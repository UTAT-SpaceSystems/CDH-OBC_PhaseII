
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070d8  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000870d8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a2f0  20070438  00087510  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a728  00091800  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fc93  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cc3  00000000  00000000  0002014f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000657c  00000000  00000000  00022e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011b0  00000000  00000000  0002938e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ff0  00000000  00000000  0002a53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b4fc  00000000  00000000  0002b52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015d4a  00000000  00000000  00046a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006877a  00000000  00000000  0005c774  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000039c8  00000000  00000000  000c4ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c728 	.word	0x2007c728
   80004:	00082f31 	.word	0x00082f31
   80008:	00082f29 	.word	0x00082f29
   8000c:	00082f29 	.word	0x00082f29
   80010:	00082f29 	.word	0x00082f29
   80014:	00082f29 	.word	0x00082f29
   80018:	00082f29 	.word	0x00082f29
	...
   8002c:	000833d9 	.word	0x000833d9
   80030:	00082f29 	.word	0x00082f29
   80034:	00000000 	.word	0x00000000
   80038:	0008359d 	.word	0x0008359d
   8003c:	000835e1 	.word	0x000835e1
   80040:	00082f29 	.word	0x00082f29
   80044:	00082f29 	.word	0x00082f29
   80048:	00082f29 	.word	0x00082f29
   8004c:	00082f29 	.word	0x00082f29
   80050:	000865e9 	.word	0x000865e9
   80054:	00082f29 	.word	0x00082f29
   80058:	00082f29 	.word	0x00082f29
   8005c:	00082f29 	.word	0x00082f29
   80060:	00082f29 	.word	0x00082f29
   80064:	00082f29 	.word	0x00082f29
   80068:	00000000 	.word	0x00000000
   8006c:	000828b1 	.word	0x000828b1
   80070:	000828c9 	.word	0x000828c9
   80074:	000828e1 	.word	0x000828e1
   80078:	000828f9 	.word	0x000828f9
	...
   80084:	0008126d 	.word	0x0008126d
   80088:	00082f29 	.word	0x00082f29
   8008c:	00082f29 	.word	0x00082f29
   80090:	00082f29 	.word	0x00082f29
   80094:	00082f29 	.word	0x00082f29
   80098:	00082f29 	.word	0x00082f29
   8009c:	00082f29 	.word	0x00082f29
   800a0:	00080df5 	.word	0x00080df5
   800a4:	00000000 	.word	0x00000000
   800a8:	00082f29 	.word	0x00082f29
   800ac:	00082f29 	.word	0x00082f29
   800b0:	00082f29 	.word	0x00082f29
   800b4:	00082f29 	.word	0x00082f29
   800b8:	00082f29 	.word	0x00082f29
   800bc:	00082f29 	.word	0x00082f29
   800c0:	00082f29 	.word	0x00082f29
   800c4:	00082f29 	.word	0x00082f29
   800c8:	00082f29 	.word	0x00082f29
   800cc:	00082f29 	.word	0x00082f29
   800d0:	00082f29 	.word	0x00082f29
   800d4:	00082f29 	.word	0x00082f29
   800d8:	00082f29 	.word	0x00082f29
   800dc:	00082f29 	.word	0x00082f29
   800e0:	00082f29 	.word	0x00082f29
   800e4:	00082f29 	.word	0x00082f29
   800e8:	00082f29 	.word	0x00082f29
   800ec:	00085975 	.word	0x00085975
   800f0:	00085885 	.word	0x00085885

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	000870d8 	.word	0x000870d8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000870d8 	.word	0x000870d8
   8013c:	2007043c 	.word	0x2007043c
   80140:	000870d8 	.word	0x000870d8
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	00082b7d 	.word	0x00082b7d

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80280:	b580      	push	{r7, lr}
   80282:	b084      	sub	sp, #16
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
   80288:	8079      	strh	r1, [r7, #2]
   8028a:	707a      	strb	r2, [r7, #1]
   8028c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8028e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80292:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80294:	e006      	b.n	802a4 <spi_write+0x24>
		if (!timeout--) {
   80296:	68fb      	ldr	r3, [r7, #12]
   80298:	1e5a      	subs	r2, r3, #1
   8029a:	60fa      	str	r2, [r7, #12]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d101      	bne.n	802a4 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   802a0:	2301      	movs	r3, #1
   802a2:	e020      	b.n	802e6 <spi_write+0x66>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	691b      	ldr	r3, [r3, #16]
   802a8:	f003 0302 	and.w	r3, r3, #2
   802ac:	2b00      	cmp	r3, #0
   802ae:	d0f2      	beq.n	80296 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) 
   802b0:	6878      	ldr	r0, [r7, #4]
   802b2:	4b0f      	ldr	r3, [pc, #60]	; (802f0 <spi_write+0x70>)
   802b4:	4798      	blx	r3
   802b6:	4603      	mov	r3, r0
   802b8:	2b00      	cmp	r3, #0
   802ba:	d00e      	beq.n	802da <spi_write+0x5a>
		{
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   802bc:	887a      	ldrh	r2, [r7, #2]
   802be:	787b      	ldrb	r3, [r7, #1]
   802c0:	041b      	lsls	r3, r3, #16
   802c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   802c6:	4313      	orrs	r3, r2
   802c8:	60bb      	str	r3, [r7, #8]
		if (uc_last) 
   802ca:	783b      	ldrb	r3, [r7, #0]
   802cc:	2b00      	cmp	r3, #0
   802ce:	d006      	beq.n	802de <spi_write+0x5e>
		{
			value |= SPI_TDR_LASTXFER;
   802d0:	68bb      	ldr	r3, [r7, #8]
   802d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802d6:	60bb      	str	r3, [r7, #8]
   802d8:	e001      	b.n	802de <spi_write+0x5e>
		}
	}	
	else 
	{
		value = SPI_TDR_TD(us_data);
   802da:	887b      	ldrh	r3, [r7, #2]
   802dc:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802de:	687b      	ldr	r3, [r7, #4]
   802e0:	68ba      	ldr	r2, [r7, #8]
   802e2:	60da      	str	r2, [r3, #12]
	
	//pio_toggle_pin(LED0_GPIO);

	return SPI_OK;
   802e4:	2300      	movs	r3, #0
   802e6:	b25b      	sxtb	r3, r3
}
   802e8:	4618      	mov	r0, r3
   802ea:	3710      	adds	r7, #16
   802ec:	46bd      	mov	sp, r7
   802ee:	bd80      	pop	{r7, pc}
   802f0:	00080149 	.word	0x00080149

000802f4 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   802f4:	b480      	push	{r7}
   802f6:	b085      	sub	sp, #20
   802f8:	af00      	add	r7, sp, #0
   802fa:	60f8      	str	r0, [r7, #12]
   802fc:	60b9      	str	r1, [r7, #8]
   802fe:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   80300:	687b      	ldr	r3, [r7, #4]
   80302:	2b00      	cmp	r3, #0
   80304:	d00c      	beq.n	80320 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80306:	68fb      	ldr	r3, [r7, #12]
   80308:	68ba      	ldr	r2, [r7, #8]
   8030a:	320c      	adds	r2, #12
   8030c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80310:	f043 0101 	orr.w	r1, r3, #1
   80314:	68fb      	ldr	r3, [r7, #12]
   80316:	68ba      	ldr	r2, [r7, #8]
   80318:	320c      	adds	r2, #12
   8031a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8031e:	e00b      	b.n	80338 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80320:	68fb      	ldr	r3, [r7, #12]
   80322:	68ba      	ldr	r2, [r7, #8]
   80324:	320c      	adds	r2, #12
   80326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8032a:	f023 0101 	bic.w	r1, r3, #1
   8032e:	68fb      	ldr	r3, [r7, #12]
   80330:	68ba      	ldr	r2, [r7, #8]
   80332:	320c      	adds	r2, #12
   80334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80338:	3714      	adds	r7, #20
   8033a:	46bd      	mov	sp, r7
   8033c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80340:	4770      	bx	lr
   80342:	bf00      	nop

00080344 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80344:	b480      	push	{r7}
   80346:	b085      	sub	sp, #20
   80348:	af00      	add	r7, sp, #0
   8034a:	60f8      	str	r0, [r7, #12]
   8034c:	60b9      	str	r1, [r7, #8]
   8034e:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   80350:	687b      	ldr	r3, [r7, #4]
   80352:	2b00      	cmp	r3, #0
   80354:	d00c      	beq.n	80370 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80356:	68fb      	ldr	r3, [r7, #12]
   80358:	68ba      	ldr	r2, [r7, #8]
   8035a:	320c      	adds	r2, #12
   8035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80360:	f043 0102 	orr.w	r1, r3, #2
   80364:	68fb      	ldr	r3, [r7, #12]
   80366:	68ba      	ldr	r2, [r7, #8]
   80368:	320c      	adds	r2, #12
   8036a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8036e:	e00b      	b.n	80388 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80370:	68fb      	ldr	r3, [r7, #12]
   80372:	68ba      	ldr	r2, [r7, #8]
   80374:	320c      	adds	r2, #12
   80376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8037a:	f023 0102 	bic.w	r1, r3, #2
   8037e:	68fb      	ldr	r3, [r7, #12]
   80380:	68ba      	ldr	r2, [r7, #8]
   80382:	320c      	adds	r2, #12
   80384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80388:	3714      	adds	r7, #20
   8038a:	46bd      	mov	sp, r7
   8038c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80390:	4770      	bx	lr
   80392:	bf00      	nop

00080394 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   80394:	b480      	push	{r7}
   80396:	b085      	sub	sp, #20
   80398:	af00      	add	r7, sp, #0
   8039a:	60f8      	str	r0, [r7, #12]
   8039c:	60b9      	str	r1, [r7, #8]
   8039e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   803a0:	687b      	ldr	r3, [r7, #4]
   803a2:	2b04      	cmp	r3, #4
   803a4:	d118      	bne.n	803d8 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803a6:	68fb      	ldr	r3, [r7, #12]
   803a8:	68ba      	ldr	r2, [r7, #8]
   803aa:	320c      	adds	r2, #12
   803ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803b0:	f023 0108 	bic.w	r1, r3, #8
   803b4:	68fb      	ldr	r3, [r7, #12]
   803b6:	68ba      	ldr	r2, [r7, #8]
   803b8:	320c      	adds	r2, #12
   803ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   803be:	68fb      	ldr	r3, [r7, #12]
   803c0:	68ba      	ldr	r2, [r7, #8]
   803c2:	320c      	adds	r2, #12
   803c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803c8:	f043 0104 	orr.w	r1, r3, #4
   803cc:	68fb      	ldr	r3, [r7, #12]
   803ce:	68ba      	ldr	r2, [r7, #8]
   803d0:	320c      	adds	r2, #12
   803d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   803d6:	e02a      	b.n	8042e <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2b00      	cmp	r3, #0
   803dc:	d118      	bne.n	80410 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803de:	68fb      	ldr	r3, [r7, #12]
   803e0:	68ba      	ldr	r2, [r7, #8]
   803e2:	320c      	adds	r2, #12
   803e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803e8:	f023 0108 	bic.w	r1, r3, #8
   803ec:	68fb      	ldr	r3, [r7, #12]
   803ee:	68ba      	ldr	r2, [r7, #8]
   803f0:	320c      	adds	r2, #12
   803f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   803f6:	68fb      	ldr	r3, [r7, #12]
   803f8:	68ba      	ldr	r2, [r7, #8]
   803fa:	320c      	adds	r2, #12
   803fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80400:	f023 0104 	bic.w	r1, r3, #4
   80404:	68fb      	ldr	r3, [r7, #12]
   80406:	68ba      	ldr	r2, [r7, #8]
   80408:	320c      	adds	r2, #12
   8040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8040e:	e00e      	b.n	8042e <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80410:	687b      	ldr	r3, [r7, #4]
   80412:	2b08      	cmp	r3, #8
   80414:	d10b      	bne.n	8042e <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80416:	68fb      	ldr	r3, [r7, #12]
   80418:	68ba      	ldr	r2, [r7, #8]
   8041a:	320c      	adds	r2, #12
   8041c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80420:	f043 0108 	orr.w	r1, r3, #8
   80424:	68fb      	ldr	r3, [r7, #12]
   80426:	68ba      	ldr	r2, [r7, #8]
   80428:	320c      	adds	r2, #12
   8042a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   8042e:	3714      	adds	r7, #20
   80430:	46bd      	mov	sp, r7
   80432:	f85d 7b04 	ldr.w	r7, [sp], #4
   80436:	4770      	bx	lr

00080438 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80438:	b480      	push	{r7}
   8043a:	b085      	sub	sp, #20
   8043c:	af00      	add	r7, sp, #0
   8043e:	60f8      	str	r0, [r7, #12]
   80440:	60b9      	str	r1, [r7, #8]
   80442:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80444:	68fb      	ldr	r3, [r7, #12]
   80446:	68ba      	ldr	r2, [r7, #8]
   80448:	320c      	adds	r2, #12
   8044a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8044e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   80452:	68fb      	ldr	r3, [r7, #12]
   80454:	68ba      	ldr	r2, [r7, #8]
   80456:	320c      	adds	r2, #12
   80458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   8045c:	68fb      	ldr	r3, [r7, #12]
   8045e:	68ba      	ldr	r2, [r7, #8]
   80460:	320c      	adds	r2, #12
   80462:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80466:	687b      	ldr	r3, [r7, #4]
   80468:	ea42 0103 	orr.w	r1, r2, r3
   8046c:	68fb      	ldr	r3, [r7, #12]
   8046e:	68ba      	ldr	r2, [r7, #8]
   80470:	320c      	adds	r2, #12
   80472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80476:	3714      	adds	r7, #20
   80478:	46bd      	mov	sp, r7
   8047a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8047e:	4770      	bx	lr

00080480 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   80480:	b480      	push	{r7}
   80482:	b085      	sub	sp, #20
   80484:	af00      	add	r7, sp, #0
   80486:	6078      	str	r0, [r7, #4]
   80488:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   8048a:	683a      	ldr	r2, [r7, #0]
   8048c:	687b      	ldr	r3, [r7, #4]
   8048e:	4413      	add	r3, r2
   80490:	1e5a      	subs	r2, r3, #1
   80492:	687b      	ldr	r3, [r7, #4]
   80494:	fbb2 f3f3 	udiv	r3, r2, r3
   80498:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8049a:	68fb      	ldr	r3, [r7, #12]
   8049c:	2b00      	cmp	r3, #0
   8049e:	dd02      	ble.n	804a6 <spi_calc_baudrate_div+0x26>
   804a0:	68fb      	ldr	r3, [r7, #12]
   804a2:	2bff      	cmp	r3, #255	; 0xff
   804a4:	dd02      	ble.n	804ac <spi_calc_baudrate_div+0x2c>
		return -1;
   804a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   804aa:	e001      	b.n	804b0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   804ac:	68fb      	ldr	r3, [r7, #12]
   804ae:	b29b      	uxth	r3, r3
   804b0:	b21b      	sxth	r3, r3
}
   804b2:	4618      	mov	r0, r3
   804b4:	3714      	adds	r7, #20
   804b6:	46bd      	mov	sp, r7
   804b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   804bc:	4770      	bx	lr
   804be:	bf00      	nop

000804c0 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   804c0:	b480      	push	{r7}
   804c2:	b085      	sub	sp, #20
   804c4:	af00      	add	r7, sp, #0
   804c6:	60f8      	str	r0, [r7, #12]
   804c8:	60b9      	str	r1, [r7, #8]
   804ca:	4613      	mov	r3, r2
   804cc:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   804ce:	68fb      	ldr	r3, [r7, #12]
   804d0:	68ba      	ldr	r2, [r7, #8]
   804d2:	320c      	adds	r2, #12
   804d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804d8:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   804dc:	68fb      	ldr	r3, [r7, #12]
   804de:	68ba      	ldr	r2, [r7, #8]
   804e0:	320c      	adds	r2, #12
   804e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	68ba      	ldr	r2, [r7, #8]
   804ea:	320c      	adds	r2, #12
   804ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804f0:	79fb      	ldrb	r3, [r7, #7]
   804f2:	021b      	lsls	r3, r3, #8
   804f4:	b29b      	uxth	r3, r3
   804f6:	ea42 0103 	orr.w	r1, r2, r3
   804fa:	68fb      	ldr	r3, [r7, #12]
   804fc:	68ba      	ldr	r2, [r7, #8]
   804fe:	320c      	adds	r2, #12
   80500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80504:	3714      	adds	r7, #20
   80506:	46bd      	mov	sp, r7
   80508:	f85d 7b04 	ldr.w	r7, [sp], #4
   8050c:	4770      	bx	lr
   8050e:	bf00      	nop

00080510 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80510:	b480      	push	{r7}
   80512:	b085      	sub	sp, #20
   80514:	af00      	add	r7, sp, #0
   80516:	60f8      	str	r0, [r7, #12]
   80518:	60b9      	str	r1, [r7, #8]
   8051a:	71fa      	strb	r2, [r7, #7]
   8051c:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8051e:	68fb      	ldr	r3, [r7, #12]
   80520:	68ba      	ldr	r2, [r7, #8]
   80522:	320c      	adds	r2, #12
   80524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80528:	b299      	uxth	r1, r3
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	68ba      	ldr	r2, [r7, #8]
   8052e:	320c      	adds	r2, #12
   80530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80534:	68fb      	ldr	r3, [r7, #12]
   80536:	68ba      	ldr	r2, [r7, #8]
   80538:	320c      	adds	r2, #12
   8053a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8053e:	79fb      	ldrb	r3, [r7, #7]
   80540:	041b      	lsls	r3, r3, #16
   80542:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   80546:	79bb      	ldrb	r3, [r7, #6]
   80548:	061b      	lsls	r3, r3, #24
   8054a:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   8054c:	ea42 0103 	orr.w	r1, r2, r3
   80550:	68fb      	ldr	r3, [r7, #12]
   80552:	68ba      	ldr	r2, [r7, #8]
   80554:	320c      	adds	r2, #12
   80556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   8055a:	3714      	adds	r7, #20
   8055c:	46bd      	mov	sp, r7
   8055e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80562:	4770      	bx	lr

00080564 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   80564:	b590      	push	{r4, r7, lr}
   80566:	b085      	sub	sp, #20
   80568:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   8056a:	2301      	movs	r3, #1
   8056c:	9300      	str	r3, [sp, #0]
   8056e:	2300      	movs	r3, #0
   80570:	9301      	str	r3, [sp, #4]
   80572:	2300      	movs	r3, #0
   80574:	9302      	str	r3, [sp, #8]
   80576:	2300      	movs	r3, #0
   80578:	9303      	str	r3, [sp, #12]
   8057a:	4805      	ldr	r0, [pc, #20]	; (80590 <command_loop+0x2c>)
   8057c:	4905      	ldr	r1, [pc, #20]	; (80594 <command_loop+0x30>)
   8057e:	2282      	movs	r2, #130	; 0x82
   80580:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80584:	4c04      	ldr	r4, [pc, #16]	; (80598 <command_loop+0x34>)
   80586:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80588:	bf00      	nop
}
   8058a:	3704      	adds	r7, #4
   8058c:	46bd      	mov	sp, r7
   8058e:	bd90      	pop	{r4, r7, pc}
   80590:	0008059d 	.word	0x0008059d
   80594:	00086f28 	.word	0x00086f28
   80598:	000842f5 	.word	0x000842f5

0008059c <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   8059c:	b590      	push	{r4, r7, lr}
   8059e:	b08b      	sub	sp, #44	; 0x2c
   805a0:	af00      	add	r7, sp, #0
   805a2:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   805a4:	687a      	ldr	r2, [r7, #4]
   805a6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   805aa:	429a      	cmp	r2, r3
   805ac:	d002      	beq.n	805b4 <prvCommandTask+0x18>
   805ae:	4b2e      	ldr	r3, [pc, #184]	; (80668 <prvCommandTask+0xcc>)
   805b0:	4798      	blx	r3
   805b2:	e7fe      	b.n	805b2 <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 91;	//Number entered here corresponds to the number of ticks we should wait.
   805b4:	235b      	movs	r3, #91	; 0x5b
   805b6:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   805b8:	f04f 33ff 	mov.w	r3, #4294967295
   805bc:	623b      	str	r3, [r7, #32]
	high = high_command_generator(OBC_ID, MT_COM, REQ_RESPONSE);
   805be:	2003      	movs	r0, #3
   805c0:	2102      	movs	r1, #2
   805c2:	2201      	movs	r2, #1
   805c4:	4b29      	ldr	r3, [pc, #164]	; (8066c <prvCommandTask+0xd0>)
   805c6:	4798      	blx	r3
   805c8:	61f8      	str	r0, [r7, #28]
	PRIORITY = COMMAND_PRIO;
   805ca:	2319      	movs	r3, #25
   805cc:	61bb      	str	r3, [r7, #24]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		if (xSemaphoreTake(Can1_Mutex, (TickType_t) 0) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   805ce:	4b28      	ldr	r3, [pc, #160]	; (80670 <prvCommandTask+0xd4>)
   805d0:	681b      	ldr	r3, [r3, #0]
   805d2:	4618      	mov	r0, r3
   805d4:	2100      	movs	r1, #0
   805d6:	2200      	movs	r2, #0
   805d8:	2300      	movs	r3, #0
   805da:	4c26      	ldr	r4, [pc, #152]	; (80674 <prvCommandTask+0xd8>)
   805dc:	47a0      	blx	r4
   805de:	4603      	mov	r3, r0
   805e0:	2b01      	cmp	r3, #1
   805e2:	d136      	bne.n	80652 <prvCommandTask+0xb6>
		{
			ID = SUB1_ID0;
   805e4:	231a      	movs	r3, #26
   805e6:	617b      	str	r3, [r7, #20]
			x = send_can_command(low, high, ID, PRIORITY);				// Request response from COMS.
   805e8:	6a38      	ldr	r0, [r7, #32]
   805ea:	69f9      	ldr	r1, [r7, #28]
   805ec:	697a      	ldr	r2, [r7, #20]
   805ee:	69bb      	ldr	r3, [r7, #24]
   805f0:	4c21      	ldr	r4, [pc, #132]	; (80678 <prvCommandTask+0xdc>)
   805f2:	47a0      	blx	r4
   805f4:	6138      	str	r0, [r7, #16]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   805f6:	4b21      	ldr	r3, [pc, #132]	; (8067c <prvCommandTask+0xe0>)
   805f8:	4798      	blx	r3
   805fa:	4603      	mov	r3, r0
   805fc:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   805fe:	f107 030c 	add.w	r3, r7, #12
   80602:	4618      	mov	r0, r3
   80604:	2101      	movs	r1, #1
   80606:	4b1e      	ldr	r3, [pc, #120]	; (80680 <prvCommandTask+0xe4>)
   80608:	4798      	blx	r3
			
			ID = SUB0_ID0;
   8060a:	2314      	movs	r3, #20
   8060c:	617b      	str	r3, [r7, #20]
			x = send_can_command(low, high, ID, PRIORITY);				// Request response from EPS.
   8060e:	6a38      	ldr	r0, [r7, #32]
   80610:	69f9      	ldr	r1, [r7, #28]
   80612:	697a      	ldr	r2, [r7, #20]
   80614:	69bb      	ldr	r3, [r7, #24]
   80616:	4c18      	ldr	r4, [pc, #96]	; (80678 <prvCommandTask+0xdc>)
   80618:	47a0      	blx	r4
   8061a:	6138      	str	r0, [r7, #16]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   8061c:	4b17      	ldr	r3, [pc, #92]	; (8067c <prvCommandTask+0xe0>)
   8061e:	4798      	blx	r3
   80620:	4603      	mov	r3, r0
   80622:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   80624:	f107 030c 	add.w	r3, r7, #12
   80628:	4618      	mov	r0, r3
   8062a:	2101      	movs	r1, #1
   8062c:	4b14      	ldr	r3, [pc, #80]	; (80680 <prvCommandTask+0xe4>)
   8062e:	4798      	blx	r3
			
			ID = SUB2_ID0;
   80630:	2320      	movs	r3, #32
   80632:	617b      	str	r3, [r7, #20]
			x = send_can_command(low, high, ID, PRIORITY);				// Request response from PAY.
   80634:	6a38      	ldr	r0, [r7, #32]
   80636:	69f9      	ldr	r1, [r7, #28]
   80638:	697a      	ldr	r2, [r7, #20]
   8063a:	69bb      	ldr	r3, [r7, #24]
   8063c:	4c0e      	ldr	r4, [pc, #56]	; (80678 <prvCommandTask+0xdc>)
   8063e:	47a0      	blx	r4
   80640:	6138      	str	r0, [r7, #16]
			xSemaphoreGive(Can1_Mutex);									// Release CAN1 Mutex
   80642:	4b0b      	ldr	r3, [pc, #44]	; (80670 <prvCommandTask+0xd4>)
   80644:	681b      	ldr	r3, [r3, #0]
   80646:	4618      	mov	r0, r3
   80648:	2100      	movs	r1, #0
   8064a:	2200      	movs	r2, #0
   8064c:	2300      	movs	r3, #0
   8064e:	4c0d      	ldr	r4, [pc, #52]	; (80684 <prvCommandTask+0xe8>)
   80650:	47a0      	blx	r4
		}
		
		xLastWakeTime = xTaskGetTickCount();
   80652:	4b0a      	ldr	r3, [pc, #40]	; (8067c <prvCommandTask+0xe0>)
   80654:	4798      	blx	r3
   80656:	4603      	mov	r3, r0
   80658:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8065a:	f107 030c 	add.w	r3, r7, #12
   8065e:	4618      	mov	r0, r3
   80660:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80662:	4b07      	ldr	r3, [pc, #28]	; (80680 <prvCommandTask+0xe4>)
   80664:	4798      	blx	r3
	}
   80666:	e7b2      	b.n	805ce <prvCommandTask+0x32>
   80668:	00083581 	.word	0x00083581
   8066c:	0008633d 	.word	0x0008633d
   80670:	2007a6ac 	.word	0x2007a6ac
   80674:	00083e49 	.word	0x00083e49
   80678:	00085d51 	.word	0x00085d51
   8067c:	00084731 	.word	0x00084731
   80680:	00084475 	.word	0x00084475
   80684:	00083b89 	.word	0x00083b89

00080688 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80688:	b590      	push	{r4, r7, lr}
   8068a:	b085      	sub	sp, #20
   8068c:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   8068e:	2301      	movs	r3, #1
   80690:	9300      	str	r3, [sp, #0]
   80692:	2300      	movs	r3, #0
   80694:	9301      	str	r3, [sp, #4]
   80696:	2300      	movs	r3, #0
   80698:	9302      	str	r3, [sp, #8]
   8069a:	2300      	movs	r3, #0
   8069c:	9303      	str	r3, [sp, #12]
   8069e:	4805      	ldr	r0, [pc, #20]	; (806b4 <data_test+0x2c>)
   806a0:	4905      	ldr	r1, [pc, #20]	; (806b8 <data_test+0x30>)
   806a2:	2282      	movs	r2, #130	; 0x82
   806a4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   806a8:	4c04      	ldr	r4, [pc, #16]	; (806bc <data_test+0x34>)
   806aa:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   806ac:	bf00      	nop
}
   806ae:	3704      	adds	r7, #4
   806b0:	46bd      	mov	sp, r7
   806b2:	bd90      	pop	{r4, r7, pc}
   806b4:	000806c1 	.word	0x000806c1
   806b8:	00086f2c 	.word	0x00086f2c
   806bc:	000842f5 	.word	0x000842f5

000806c0 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   806c0:	b590      	push	{r4, r7, lr}
   806c2:	b08b      	sub	sp, #44	; 0x2c
   806c4:	af00      	add	r7, sp, #0
   806c6:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   806c8:	687a      	ldr	r2, [r7, #4]
   806ca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   806ce:	429a      	cmp	r2, r3
   806d0:	d002      	beq.n	806d8 <prvDataTask+0x18>
   806d2:	4b4e      	ldr	r3, [pc, #312]	; (8080c <prvDataTask+0x14c>)
   806d4:	4798      	blx	r3
   806d6:	e7fe      	b.n	806d6 <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 100;	//Number entered here corresponds to the number of ticks we should wait.
   806d8:	2364      	movs	r3, #100	; 0x64
   806da:	627b      	str	r3, [r7, #36]	; 0x24
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	ID = SUB0_ID0;
   806dc:	2314      	movs	r3, #20
   806de:	623b      	str	r3, [r7, #32]
	PRIORITY = DATA_PRIO;
   806e0:	230a      	movs	r3, #10
   806e2:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		low = DATA_REQUEST;
   806e4:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   806e8:	613b      	str	r3, [r7, #16]
		high = high_command_generator(OBC_ID, MT_COM, REQ_DATA);
   806ea:	2003      	movs	r0, #3
   806ec:	2102      	movs	r1, #2
   806ee:	2202      	movs	r2, #2
   806f0:	4b47      	ldr	r3, [pc, #284]	; (80810 <prvDataTask+0x150>)
   806f2:	4798      	blx	r3
   806f4:	4603      	mov	r3, r0
   806f6:	60fb      	str	r3, [r7, #12]
		
		if (xSemaphoreTake(Can1_Mutex, (TickType_t) 1) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   806f8:	4b46      	ldr	r3, [pc, #280]	; (80814 <prvDataTask+0x154>)
   806fa:	681b      	ldr	r3, [r3, #0]
   806fc:	4618      	mov	r0, r3
   806fe:	2100      	movs	r1, #0
   80700:	2201      	movs	r2, #1
   80702:	2300      	movs	r3, #0
   80704:	4c44      	ldr	r4, [pc, #272]	; (80818 <prvDataTask+0x158>)
   80706:	47a0      	blx	r4
   80708:	4603      	mov	r3, r0
   8070a:	2b01      	cmp	r3, #1
   8070c:	d13c      	bne.n	80788 <prvDataTask+0xc8>
		{
			ID = SUB1_ID0;
   8070e:	231a      	movs	r3, #26
   80710:	623b      	str	r3, [r7, #32]
			x = send_can_command(low, high, ID, PRIORITY);				// Request data from COMS.
   80712:	693a      	ldr	r2, [r7, #16]
   80714:	68fb      	ldr	r3, [r7, #12]
   80716:	4610      	mov	r0, r2
   80718:	4619      	mov	r1, r3
   8071a:	6a3a      	ldr	r2, [r7, #32]
   8071c:	69fb      	ldr	r3, [r7, #28]
   8071e:	4c3f      	ldr	r4, [pc, #252]	; (8081c <prvDataTask+0x15c>)
   80720:	47a0      	blx	r4
   80722:	61b8      	str	r0, [r7, #24]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   80724:	4b3e      	ldr	r3, [pc, #248]	; (80820 <prvDataTask+0x160>)
   80726:	4798      	blx	r3
   80728:	4603      	mov	r3, r0
   8072a:	617b      	str	r3, [r7, #20]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   8072c:	f107 0314 	add.w	r3, r7, #20
   80730:	4618      	mov	r0, r3
   80732:	2101      	movs	r1, #1
   80734:	4b3b      	ldr	r3, [pc, #236]	; (80824 <prvDataTask+0x164>)
   80736:	4798      	blx	r3
			
			ID = SUB0_ID0;
   80738:	2314      	movs	r3, #20
   8073a:	623b      	str	r3, [r7, #32]
			x = send_can_command(low, high, ID, PRIORITY);				// Request data from EPS.
   8073c:	693a      	ldr	r2, [r7, #16]
   8073e:	68fb      	ldr	r3, [r7, #12]
   80740:	4610      	mov	r0, r2
   80742:	4619      	mov	r1, r3
   80744:	6a3a      	ldr	r2, [r7, #32]
   80746:	69fb      	ldr	r3, [r7, #28]
   80748:	4c34      	ldr	r4, [pc, #208]	; (8081c <prvDataTask+0x15c>)
   8074a:	47a0      	blx	r4
   8074c:	61b8      	str	r0, [r7, #24]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   8074e:	4b34      	ldr	r3, [pc, #208]	; (80820 <prvDataTask+0x160>)
   80750:	4798      	blx	r3
   80752:	4603      	mov	r3, r0
   80754:	617b      	str	r3, [r7, #20]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   80756:	f107 0314 	add.w	r3, r7, #20
   8075a:	4618      	mov	r0, r3
   8075c:	2101      	movs	r1, #1
   8075e:	4b31      	ldr	r3, [pc, #196]	; (80824 <prvDataTask+0x164>)
   80760:	4798      	blx	r3
			
			ID = SUB2_ID0;
   80762:	2320      	movs	r3, #32
   80764:	623b      	str	r3, [r7, #32]
			x = send_can_command(low, high, ID, PRIORITY);				// Request data from PAY.
   80766:	693a      	ldr	r2, [r7, #16]
   80768:	68fb      	ldr	r3, [r7, #12]
   8076a:	4610      	mov	r0, r2
   8076c:	4619      	mov	r1, r3
   8076e:	6a3a      	ldr	r2, [r7, #32]
   80770:	69fb      	ldr	r3, [r7, #28]
   80772:	4c2a      	ldr	r4, [pc, #168]	; (8081c <prvDataTask+0x15c>)
   80774:	47a0      	blx	r4
   80776:	61b8      	str	r0, [r7, #24]
			xSemaphoreGive(Can1_Mutex);									// Release CAN1 Mutex
   80778:	4b26      	ldr	r3, [pc, #152]	; (80814 <prvDataTask+0x154>)
   8077a:	681b      	ldr	r3, [r3, #0]
   8077c:	4618      	mov	r0, r3
   8077e:	2100      	movs	r1, #0
   80780:	2200      	movs	r2, #0
   80782:	2300      	movs	r3, #0
   80784:	4c28      	ldr	r4, [pc, #160]	; (80828 <prvDataTask+0x168>)
   80786:	47a0      	blx	r4
		}
							
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 100 ticks.
   80788:	4b25      	ldr	r3, [pc, #148]	; (80820 <prvDataTask+0x160>)
   8078a:	4798      	blx	r3
   8078c:	4603      	mov	r3, r0
   8078e:	617b      	str	r3, [r7, #20]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80790:	f107 0314 	add.w	r3, r7, #20
   80794:	4618      	mov	r0, r3
   80796:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80798:	4b22      	ldr	r3, [pc, #136]	; (80824 <prvDataTask+0x164>)
   8079a:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   8079c:	4b23      	ldr	r3, [pc, #140]	; (8082c <prvDataTask+0x16c>)
   8079e:	781b      	ldrb	r3, [r3, #0]
   807a0:	2b00      	cmp	r3, #0
   807a2:	d016      	beq.n	807d2 <prvDataTask+0x112>
		{
			x = read_can_data(&high, &low, 1234);
   807a4:	f107 020c 	add.w	r2, r7, #12
   807a8:	f107 0310 	add.w	r3, r7, #16
   807ac:	4610      	mov	r0, r2
   807ae:	4619      	mov	r1, r3
   807b0:	f240 42d2 	movw	r2, #1234	; 0x4d2
   807b4:	4b1e      	ldr	r3, [pc, #120]	; (80830 <prvDataTask+0x170>)
   807b6:	4798      	blx	r3
   807b8:	61b8      	str	r0, [r7, #24]
			// ** Modify this code so that it checks the small types first.
			if(x)
   807ba:	69bb      	ldr	r3, [r7, #24]
   807bc:	2b00      	cmp	r3, #0
   807be:	d008      	beq.n	807d2 <prvDataTask+0x112>
			{
				glob_stored_data[1] = high;
   807c0:	68fa      	ldr	r2, [r7, #12]
   807c2:	4b1c      	ldr	r3, [pc, #112]	; (80834 <prvDataTask+0x174>)
   807c4:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   807c6:	693a      	ldr	r2, [r7, #16]
   807c8:	4b1a      	ldr	r3, [pc, #104]	; (80834 <prvDataTask+0x174>)
   807ca:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   807cc:	4b17      	ldr	r3, [pc, #92]	; (8082c <prvDataTask+0x16c>)
   807ce:	2200      	movs	r2, #0
   807d0:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comsf)
   807d2:	4b19      	ldr	r3, [pc, #100]	; (80838 <prvDataTask+0x178>)
   807d4:	781b      	ldrb	r3, [r3, #0]
   807d6:	2b00      	cmp	r3, #0
   807d8:	d017      	beq.n	8080a <prvDataTask+0x14a>
		{
			x = read_can_msg(&high, &low, 1234);
   807da:	f107 020c 	add.w	r2, r7, #12
   807de:	f107 0310 	add.w	r3, r7, #16
   807e2:	4610      	mov	r0, r2
   807e4:	4619      	mov	r1, r3
   807e6:	f240 42d2 	movw	r2, #1234	; 0x4d2
   807ea:	4b14      	ldr	r3, [pc, #80]	; (8083c <prvDataTask+0x17c>)
   807ec:	4798      	blx	r3
   807ee:	61b8      	str	r0, [r7, #24]

			if(x)
   807f0:	69bb      	ldr	r3, [r7, #24]
   807f2:	2b00      	cmp	r3, #0
   807f4:	d009      	beq.n	8080a <prvDataTask+0x14a>
			{
				glob_stored_message[1] = high;
   807f6:	68fa      	ldr	r2, [r7, #12]
   807f8:	4b11      	ldr	r3, [pc, #68]	; (80840 <prvDataTask+0x180>)
   807fa:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   807fc:	693a      	ldr	r2, [r7, #16]
   807fe:	4b10      	ldr	r3, [pc, #64]	; (80840 <prvDataTask+0x180>)
   80800:	601a      	str	r2, [r3, #0]
				glob_comsf = 0;
   80802:	4b0d      	ldr	r3, [pc, #52]	; (80838 <prvDataTask+0x178>)
   80804:	2200      	movs	r2, #0
   80806:	701a      	strb	r2, [r3, #0]
			}
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   80808:	e76c      	b.n	806e4 <prvDataTask+0x24>
   8080a:	e76b      	b.n	806e4 <prvDataTask+0x24>
   8080c:	00083581 	.word	0x00083581
   80810:	0008633d 	.word	0x0008633d
   80814:	2007a6ac 	.word	0x2007a6ac
   80818:	00083e49 	.word	0x00083e49
   8081c:	00085d51 	.word	0x00085d51
   80820:	00084731 	.word	0x00084731
   80824:	00084475 	.word	0x00084475
   80828:	00083b89 	.word	0x00083b89
   8082c:	2007a670 	.word	0x2007a670
   80830:	00085de1 	.word	0x00085de1
   80834:	2007a644 	.word	0x2007a644
   80838:	2007a67c 	.word	0x2007a67c
   8083c:	00085e2d 	.word	0x00085e2d
   80840:	2007a6f4 	.word	0x2007a6f4

00080844 <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   80844:	b590      	push	{r4, r7, lr}
   80846:	b085      	sub	sp, #20
   80848:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   8084a:	2301      	movs	r3, #1
   8084c:	9300      	str	r3, [sp, #0]
   8084e:	2300      	movs	r3, #0
   80850:	9301      	str	r3, [sp, #4]
   80852:	2300      	movs	r3, #0
   80854:	9302      	str	r3, [sp, #8]
   80856:	2300      	movs	r3, #0
   80858:	9303      	str	r3, [sp, #12]
   8085a:	4805      	ldr	r0, [pc, #20]	; (80870 <housekeep+0x2c>)
   8085c:	4905      	ldr	r1, [pc, #20]	; (80874 <housekeep+0x30>)
   8085e:	2282      	movs	r2, #130	; 0x82
   80860:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80864:	4c04      	ldr	r4, [pc, #16]	; (80878 <housekeep+0x34>)
   80866:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80868:	bf00      	nop
}
   8086a:	3704      	adds	r7, #4
   8086c:	46bd      	mov	sp, r7
   8086e:	bd90      	pop	{r4, r7, pc}
   80870:	0008087d 	.word	0x0008087d
   80874:	00086f30 	.word	0x00086f30
   80878:	000842f5 	.word	0x000842f5

0008087c <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   8087c:	b590      	push	{r4, r7, lr}
   8087e:	b089      	sub	sp, #36	; 0x24
   80880:	af00      	add	r7, sp, #0
   80882:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   80884:	687a      	ldr	r2, [r7, #4]
   80886:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8088a:	429a      	cmp	r2, r3
   8088c:	d002      	beq.n	80894 <prvHouseKeepTask+0x18>
   8088e:	4b28      	ldr	r3, [pc, #160]	; (80930 <prvHouseKeepTask+0xb4>)
   80890:	4798      	blx	r3
   80892:	e7fe      	b.n	80892 <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 100;	// Number entered here corresponds to the number of ticks we should wait.
   80894:	2364      	movs	r3, #100	; 0x64
   80896:	61bb      	str	r3, [r7, #24]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	uint8_t ret_val, passkey = 0, addr = 0x80;
   80898:	2300      	movs	r3, #0
   8089a:	77fb      	strb	r3, [r7, #31]
   8089c:	2380      	movs	r3, #128	; 0x80
   8089e:	75fb      	strb	r3, [r7, #23]
		
	/* @non-terminating@ */	
	for( ;; )
	{
		if (xSemaphoreTake(Can1_Mutex, (TickType_t) 1) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   808a0:	4b24      	ldr	r3, [pc, #144]	; (80934 <prvHouseKeepTask+0xb8>)
   808a2:	681b      	ldr	r3, [r3, #0]
   808a4:	4618      	mov	r0, r3
   808a6:	2100      	movs	r1, #0
   808a8:	2201      	movs	r2, #1
   808aa:	2300      	movs	r3, #0
   808ac:	4c22      	ldr	r4, [pc, #136]	; (80938 <prvHouseKeepTask+0xbc>)
   808ae:	47a0      	blx	r4
   808b0:	4603      	mov	r3, r0
   808b2:	2b01      	cmp	r3, #1
   808b4:	d12d      	bne.n	80912 <prvHouseKeepTask+0x96>
		{
			ID = SUB1_ID5;
   808b6:	231f      	movs	r3, #31
   808b8:	613b      	str	r3, [r7, #16]
			x = request_housekeeping(ID);								// Request housekeeping from COMS.
   808ba:	6938      	ldr	r0, [r7, #16]
   808bc:	4b1f      	ldr	r3, [pc, #124]	; (8093c <prvHouseKeepTask+0xc0>)
   808be:	4798      	blx	r3
   808c0:	60f8      	str	r0, [r7, #12]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   808c2:	4b1f      	ldr	r3, [pc, #124]	; (80940 <prvHouseKeepTask+0xc4>)
   808c4:	4798      	blx	r3
   808c6:	4603      	mov	r3, r0
   808c8:	60bb      	str	r3, [r7, #8]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   808ca:	f107 0308 	add.w	r3, r7, #8
   808ce:	4618      	mov	r0, r3
   808d0:	2101      	movs	r1, #1
   808d2:	4b1c      	ldr	r3, [pc, #112]	; (80944 <prvHouseKeepTask+0xc8>)
   808d4:	4798      	blx	r3
			
			ID = SUB0_ID5;
   808d6:	2319      	movs	r3, #25
   808d8:	613b      	str	r3, [r7, #16]
			x = request_housekeeping(ID);								// Request housekeeping from EPS.
   808da:	6938      	ldr	r0, [r7, #16]
   808dc:	4b17      	ldr	r3, [pc, #92]	; (8093c <prvHouseKeepTask+0xc0>)
   808de:	4798      	blx	r3
   808e0:	60f8      	str	r0, [r7, #12]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   808e2:	4b17      	ldr	r3, [pc, #92]	; (80940 <prvHouseKeepTask+0xc4>)
   808e4:	4798      	blx	r3
   808e6:	4603      	mov	r3, r0
   808e8:	60bb      	str	r3, [r7, #8]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   808ea:	f107 0308 	add.w	r3, r7, #8
   808ee:	4618      	mov	r0, r3
   808f0:	2101      	movs	r1, #1
   808f2:	4b14      	ldr	r3, [pc, #80]	; (80944 <prvHouseKeepTask+0xc8>)
   808f4:	4798      	blx	r3
			
			ID = SUB2_ID5;
   808f6:	2325      	movs	r3, #37	; 0x25
   808f8:	613b      	str	r3, [r7, #16]
			x = request_housekeeping(ID);								// Request housekeeping from PAY.
   808fa:	6938      	ldr	r0, [r7, #16]
   808fc:	4b0f      	ldr	r3, [pc, #60]	; (8093c <prvHouseKeepTask+0xc0>)
   808fe:	4798      	blx	r3
   80900:	60f8      	str	r0, [r7, #12]
			//ret_val = read_from_SSM(HK_TASK_ID, SUB0_ID0, passkey, addr);
			xSemaphoreGive(Can1_Mutex);
   80902:	4b0c      	ldr	r3, [pc, #48]	; (80934 <prvHouseKeepTask+0xb8>)
   80904:	681b      	ldr	r3, [r3, #0]
   80906:	4618      	mov	r0, r3
   80908:	2100      	movs	r1, #0
   8090a:	2200      	movs	r2, #0
   8090c:	2300      	movs	r3, #0
   8090e:	4c0e      	ldr	r4, [pc, #56]	; (80948 <prvHouseKeepTask+0xcc>)
   80910:	47a0      	blx	r4
		}
		
		xLastWakeTime = xTaskGetTickCount();
   80912:	4b0b      	ldr	r3, [pc, #44]	; (80940 <prvHouseKeepTask+0xc4>)
   80914:	4798      	blx	r3
   80916:	4603      	mov	r3, r0
   80918:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8091a:	f107 0308 	add.w	r3, r7, #8
   8091e:	4618      	mov	r0, r3
   80920:	69b9      	ldr	r1, [r7, #24]
   80922:	4b08      	ldr	r3, [pc, #32]	; (80944 <prvHouseKeepTask+0xc8>)
   80924:	4798      	blx	r3
		
		passkey ++;
   80926:	7ffb      	ldrb	r3, [r7, #31]
   80928:	3301      	adds	r3, #1
   8092a:	77fb      	strb	r3, [r7, #31]
	}
   8092c:	e7b8      	b.n	808a0 <prvHouseKeepTask+0x24>
   8092e:	bf00      	nop
   80930:	00083581 	.word	0x00083581
   80934:	2007a6ac 	.word	0x2007a6ac
   80938:	00083e49 	.word	0x00083e49
   8093c:	00085e79 	.word	0x00085e79
   80940:	00084731 	.word	0x00084731
   80944:	00084475 	.word	0x00084475
   80948:	00083b89 	.word	0x00083b89

0008094c <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   8094c:	b580      	push	{r7, lr}
   8094e:	b082      	sub	sp, #8
   80950:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   80952:	2300      	movs	r3, #0
   80954:	607b      	str	r3, [r7, #4]
   80956:	e00f      	b.n	80978 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   80958:	4b0a      	ldr	r3, [pc, #40]	; (80984 <vParTestInitialise+0x38>)
   8095a:	687a      	ldr	r2, [r7, #4]
   8095c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80960:	4618      	mov	r0, r3
   80962:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80966:	4b08      	ldr	r3, [pc, #32]	; (80988 <vParTestInitialise+0x3c>)
   80968:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8096a:	6878      	ldr	r0, [r7, #4]
   8096c:	2100      	movs	r1, #0
   8096e:	4b07      	ldr	r3, [pc, #28]	; (8098c <vParTestInitialise+0x40>)
   80970:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   80972:	687b      	ldr	r3, [r7, #4]
   80974:	3301      	adds	r3, #1
   80976:	607b      	str	r3, [r7, #4]
   80978:	687b      	ldr	r3, [r7, #4]
   8097a:	2b03      	cmp	r3, #3
   8097c:	d9ec      	bls.n	80958 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   8097e:	3708      	adds	r7, #8
   80980:	46bd      	mov	sp, r7
   80982:	bd80      	pop	{r7, pc}
   80984:	00086f34 	.word	0x00086f34
   80988:	000825f1 	.word	0x000825f1
   8098c:	00080991 	.word	0x00080991

00080990 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   80990:	b580      	push	{r7, lr}
   80992:	b082      	sub	sp, #8
   80994:	af00      	add	r7, sp, #0
   80996:	6078      	str	r0, [r7, #4]
   80998:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   8099a:	687b      	ldr	r3, [r7, #4]
   8099c:	2b03      	cmp	r3, #3
   8099e:	d823      	bhi.n	809e8 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   809a0:	687b      	ldr	r3, [r7, #4]
   809a2:	2b00      	cmp	r3, #0
   809a4:	d106      	bne.n	809b4 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   809a6:	683b      	ldr	r3, [r7, #0]
   809a8:	2b00      	cmp	r3, #0
   809aa:	bf14      	ite	ne
   809ac:	2300      	movne	r3, #0
   809ae:	2301      	moveq	r3, #1
   809b0:	b2db      	uxtb	r3, r3
   809b2:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   809b4:	683b      	ldr	r3, [r7, #0]
   809b6:	2b00      	cmp	r3, #0
   809b8:	d00b      	beq.n	809d2 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   809ba:	4b0d      	ldr	r3, [pc, #52]	; (809f0 <vParTestSetLED+0x60>)
   809bc:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   809be:	4b0d      	ldr	r3, [pc, #52]	; (809f4 <vParTestSetLED+0x64>)
   809c0:	687a      	ldr	r2, [r7, #4]
   809c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   809c6:	4618      	mov	r0, r3
   809c8:	4b0b      	ldr	r3, [pc, #44]	; (809f8 <vParTestSetLED+0x68>)
   809ca:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   809cc:	4b0b      	ldr	r3, [pc, #44]	; (809fc <vParTestSetLED+0x6c>)
   809ce:	4798      	blx	r3
   809d0:	e00a      	b.n	809e8 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   809d2:	4b07      	ldr	r3, [pc, #28]	; (809f0 <vParTestSetLED+0x60>)
   809d4:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   809d6:	4b07      	ldr	r3, [pc, #28]	; (809f4 <vParTestSetLED+0x64>)
   809d8:	687a      	ldr	r2, [r7, #4]
   809da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   809de:	4618      	mov	r0, r3
   809e0:	4b07      	ldr	r3, [pc, #28]	; (80a00 <vParTestSetLED+0x70>)
   809e2:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   809e4:	4b05      	ldr	r3, [pc, #20]	; (809fc <vParTestSetLED+0x6c>)
   809e6:	4798      	blx	r3
		}
	}
}
   809e8:	3708      	adds	r7, #8
   809ea:	46bd      	mov	sp, r7
   809ec:	bd80      	pop	{r7, pc}
   809ee:	bf00      	nop
   809f0:	00083505 	.word	0x00083505
   809f4:	00086f34 	.word	0x00086f34
   809f8:	0008255d 	.word	0x0008255d
   809fc:	00083549 	.word	0x00083549
   80a00:	00082529 	.word	0x00082529

00080a04 <dectobcd>:

/** 
 * \brief Decimal to binary coded decimal conversion
 */
static uint8_t dectobcd(uint8_t val)
{
   80a04:	b480      	push	{r7}
   80a06:	b083      	sub	sp, #12
   80a08:	af00      	add	r7, sp, #0
   80a0a:	4603      	mov	r3, r0
   80a0c:	71fb      	strb	r3, [r7, #7]
	return ((val / 10 * 16) + (val % 10));
   80a0e:	79fa      	ldrb	r2, [r7, #7]
   80a10:	4b0c      	ldr	r3, [pc, #48]	; (80a44 <dectobcd+0x40>)
   80a12:	fba3 1302 	umull	r1, r3, r3, r2
   80a16:	08db      	lsrs	r3, r3, #3
   80a18:	b2db      	uxtb	r3, r3
   80a1a:	011b      	lsls	r3, r3, #4
   80a1c:	b2d8      	uxtb	r0, r3
   80a1e:	79fa      	ldrb	r2, [r7, #7]
   80a20:	4b08      	ldr	r3, [pc, #32]	; (80a44 <dectobcd+0x40>)
   80a22:	fba3 1302 	umull	r1, r3, r3, r2
   80a26:	08d9      	lsrs	r1, r3, #3
   80a28:	460b      	mov	r3, r1
   80a2a:	009b      	lsls	r3, r3, #2
   80a2c:	440b      	add	r3, r1
   80a2e:	005b      	lsls	r3, r3, #1
   80a30:	1ad3      	subs	r3, r2, r3
   80a32:	b2db      	uxtb	r3, r3
   80a34:	4403      	add	r3, r0
   80a36:	b2db      	uxtb	r3, r3
}
   80a38:	4618      	mov	r0, r3
   80a3a:	370c      	adds	r7, #12
   80a3c:	46bd      	mov	sp, r7
   80a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a42:	4770      	bx	lr
   80a44:	cccccccd 	.word	0xcccccccd

00080a48 <rtc_init>:
 *  setting the time-date to 00:00:00 01/01/0000
 *
 * \param ctrl_reg_val The byte to set the control register to
 */
void rtc_init(uint16_t ctrl_reg_val)
{			
   80a48:	b580      	push	{r7, lr}
   80a4a:	b084      	sub	sp, #16
   80a4c:	af00      	add	r7, sp, #0
   80a4e:	4603      	mov	r3, r0
   80a50:	80fb      	strh	r3, [r7, #6]
    rtc_set_creg(ctrl_reg_val);
   80a52:	88fb      	ldrh	r3, [r7, #6]
   80a54:	4618      	mov	r0, r3
   80a56:	4b0e      	ldr	r3, [pc, #56]	; (80a90 <rtc_init+0x48>)
   80a58:	4798      	blx	r3
	
	struct timestamp initial_time;

	initial_time.sec = 0x00;
   80a5a:	2300      	movs	r3, #0
   80a5c:	723b      	strb	r3, [r7, #8]
	initial_time.minute = 0x00;
   80a5e:	2300      	movs	r3, #0
   80a60:	727b      	strb	r3, [r7, #9]
	initial_time.hour = 0x00;
   80a62:	2300      	movs	r3, #0
   80a64:	72bb      	strb	r3, [r7, #10]
	initial_time.mday = 0x01;
   80a66:	2301      	movs	r3, #1
   80a68:	733b      	strb	r3, [r7, #12]
	initial_time.wday = 0x01;
   80a6a:	2301      	movs	r3, #1
   80a6c:	72fb      	strb	r3, [r7, #11]
	initial_time.mon = 0x01;
   80a6e:	2301      	movs	r3, #1
   80a70:	737b      	strb	r3, [r7, #13]
	initial_time.year = 0x00;
   80a72:	2300      	movs	r3, #0
   80a74:	81fb      	strh	r3, [r7, #14]
	
	rtc_set(initial_time);
   80a76:	f107 0308 	add.w	r3, r7, #8
   80a7a:	e893 0003 	ldmia.w	r3, {r0, r1}
   80a7e:	4b05      	ldr	r3, [pc, #20]	; (80a94 <rtc_init+0x4c>)
   80a80:	4798      	blx	r3
	
	rtc_set_a2();
   80a82:	4b05      	ldr	r3, [pc, #20]	; (80a98 <rtc_init+0x50>)
   80a84:	4798      	blx	r3
	rtc_clear_a2_flag();
   80a86:	4b05      	ldr	r3, [pc, #20]	; (80a9c <rtc_init+0x54>)
   80a88:	4798      	blx	r3
}
   80a8a:	3710      	adds	r7, #16
   80a8c:	46bd      	mov	sp, r7
   80a8e:	bd80      	pop	{r7, pc}
   80a90:	00080b95 	.word	0x00080b95
   80a94:	00080aa1 	.word	0x00080aa1
   80a98:	00080bf5 	.word	0x00080bf5
   80a9c:	00080c3d 	.word	0x00080c3d

00080aa0 <rtc_set>:
 * \brief Set the time and date of the RTC to a specified value.
 *
 * \param t The time struct containing the new time/date to update to.
 */
void rtc_set(struct timestamp t)
{
   80aa0:	b580      	push	{r7, lr}
   80aa2:	b088      	sub	sp, #32
   80aa4:	af00      	add	r7, sp, #0
   80aa6:	463b      	mov	r3, r7
   80aa8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t time_date[7] = { t.sec, t.minute, t.hour, t.wday, t.mday, t.mon, t.year };
   80aac:	783b      	ldrb	r3, [r7, #0]
   80aae:	743b      	strb	r3, [r7, #16]
   80ab0:	787b      	ldrb	r3, [r7, #1]
   80ab2:	747b      	strb	r3, [r7, #17]
   80ab4:	78bb      	ldrb	r3, [r7, #2]
   80ab6:	74bb      	strb	r3, [r7, #18]
   80ab8:	78fb      	ldrb	r3, [r7, #3]
   80aba:	74fb      	strb	r3, [r7, #19]
   80abc:	793b      	ldrb	r3, [r7, #4]
   80abe:	753b      	strb	r3, [r7, #20]
   80ac0:	797b      	ldrb	r3, [r7, #5]
   80ac2:	757b      	strb	r3, [r7, #21]
   80ac4:	88fb      	ldrh	r3, [r7, #6]
   80ac6:	b2db      	uxtb	r3, r3
   80ac8:	75bb      	strb	r3, [r7, #22]
    uint8_t i;
	uint16_t message, addr, data;

    for (i = 0; i < 7; i++) 
   80aca:	2300      	movs	r3, #0
   80acc:	77fb      	strb	r3, [r7, #31]
   80ace:	e020      	b.n	80b12 <rtc_set+0x72>
	{
		// Convert data and prepare message to send
		addr = i + 0x80;
   80ad0:	7ffb      	ldrb	r3, [r7, #31]
   80ad2:	b29b      	uxth	r3, r3
   80ad4:	3380      	adds	r3, #128	; 0x80
   80ad6:	83bb      	strh	r3, [r7, #28]
		data = dectobcd(time_date[i]);
   80ad8:	7ffb      	ldrb	r3, [r7, #31]
   80ada:	f107 0220 	add.w	r2, r7, #32
   80ade:	4413      	add	r3, r2
   80ae0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   80ae4:	4618      	mov	r0, r3
   80ae6:	4b0e      	ldr	r3, [pc, #56]	; (80b20 <rtc_set+0x80>)
   80ae8:	4798      	blx	r3
   80aea:	4603      	mov	r3, r0
   80aec:	837b      	strh	r3, [r7, #26]
		
		message = (addr << 8) | data;
   80aee:	8bbb      	ldrh	r3, [r7, #28]
   80af0:	021b      	lsls	r3, r3, #8
   80af2:	b29a      	uxth	r2, r3
   80af4:	8b7b      	ldrh	r3, [r7, #26]
   80af6:	4313      	orrs	r3, r2
   80af8:	b29b      	uxth	r3, r3
   80afa:	b29b      	uxth	r3, r3
   80afc:	81fb      	strh	r3, [r7, #14]
		spi_master_transfer(&message, 1, 0);
   80afe:	f107 030e 	add.w	r3, r7, #14
   80b02:	4618      	mov	r0, r3
   80b04:	2101      	movs	r1, #1
   80b06:	2200      	movs	r2, #0
   80b08:	4b06      	ldr	r3, [pc, #24]	; (80b24 <rtc_set+0x84>)
   80b0a:	4798      	blx	r3
{
	uint8_t time_date[7] = { t.sec, t.minute, t.hour, t.wday, t.mday, t.mon, t.year };
    uint8_t i;
	uint16_t message, addr, data;

    for (i = 0; i < 7; i++) 
   80b0c:	7ffb      	ldrb	r3, [r7, #31]
   80b0e:	3301      	adds	r3, #1
   80b10:	77fb      	strb	r3, [r7, #31]
   80b12:	7ffb      	ldrb	r3, [r7, #31]
   80b14:	2b06      	cmp	r3, #6
   80b16:	d9db      	bls.n	80ad0 <rtc_set+0x30>
		data = dectobcd(time_date[i]);
		
		message = (addr << 8) | data;
		spi_master_transfer(&message, 1, 0);
    }
}
   80b18:	3720      	adds	r7, #32
   80b1a:	46bd      	mov	sp, r7
   80b1c:	bd80      	pop	{r7, pc}
   80b1e:	bf00      	nop
   80b20:	00080a05 	.word	0x00080a05
   80b24:	00081019 	.word	0x00081019

00080b28 <rtc_set_addr>:
 *
 * \param addr RTC register address
 * \param val  New register value
 */
void rtc_set_addr(uint16_t addr, uint16_t val)
{
   80b28:	b580      	push	{r7, lr}
   80b2a:	b084      	sub	sp, #16
   80b2c:	af00      	add	r7, sp, #0
   80b2e:	4602      	mov	r2, r0
   80b30:	460b      	mov	r3, r1
   80b32:	80fa      	strh	r2, [r7, #6]
   80b34:	80bb      	strh	r3, [r7, #4]
	uint16_t message = (addr << 8) | val;
   80b36:	88fb      	ldrh	r3, [r7, #6]
   80b38:	021b      	lsls	r3, r3, #8
   80b3a:	b29a      	uxth	r2, r3
   80b3c:	88bb      	ldrh	r3, [r7, #4]
   80b3e:	4313      	orrs	r3, r2
   80b40:	b29b      	uxth	r3, r3
   80b42:	b29b      	uxth	r3, r3
   80b44:	81fb      	strh	r3, [r7, #14]
	spi_master_transfer(&message, 1, 0);
   80b46:	f107 030e 	add.w	r3, r7, #14
   80b4a:	4618      	mov	r0, r3
   80b4c:	2101      	movs	r1, #1
   80b4e:	2200      	movs	r2, #0
   80b50:	4b02      	ldr	r3, [pc, #8]	; (80b5c <rtc_set_addr+0x34>)
   80b52:	4798      	blx	r3
}
   80b54:	3710      	adds	r7, #16
   80b56:	46bd      	mov	sp, r7
   80b58:	bd80      	pop	{r7, pc}
   80b5a:	bf00      	nop
   80b5c:	00081019 	.word	0x00081019

00080b60 <rtc_get_addr>:
 * \param addr RTC register address
 *
 * \return val Value stored in specified register
 */
uint8_t rtc_get_addr(uint16_t addr)
{
   80b60:	b580      	push	{r7, lr}
   80b62:	b084      	sub	sp, #16
   80b64:	af00      	add	r7, sp, #0
   80b66:	4603      	mov	r3, r0
   80b68:	80fb      	strh	r3, [r7, #6]
	uint8_t val;
	uint16_t message = (uint16_t) addr << 8;
   80b6a:	88fb      	ldrh	r3, [r7, #6]
   80b6c:	021b      	lsls	r3, r3, #8
   80b6e:	b29b      	uxth	r3, r3
   80b70:	81bb      	strh	r3, [r7, #12]
	
	spi_master_transfer(&message, 1, 0);
   80b72:	f107 030c 	add.w	r3, r7, #12
   80b76:	4618      	mov	r0, r3
   80b78:	2101      	movs	r1, #1
   80b7a:	2200      	movs	r2, #0
   80b7c:	4b04      	ldr	r3, [pc, #16]	; (80b90 <rtc_get_addr+0x30>)
   80b7e:	4798      	blx	r3
	
	val = (uint8_t) message;	
   80b80:	89bb      	ldrh	r3, [r7, #12]
   80b82:	73fb      	strb	r3, [r7, #15]
	return val;
   80b84:	7bfb      	ldrb	r3, [r7, #15]
}
   80b86:	4618      	mov	r0, r3
   80b88:	3710      	adds	r7, #16
   80b8a:	46bd      	mov	sp, r7
   80b8c:	bd80      	pop	{r7, pc}
   80b8e:	bf00      	nop
   80b90:	00081019 	.word	0x00081019

00080b94 <rtc_set_creg>:
 * bit2 INTCN  Interrupt control (1 for use of the alarms and to disable square wave)
 * bit1 A2IE   Alarm1 interrupt enable (1 to enable)
 * bit0 A1IE   Alarm0 interrupt enable (1 to enable)
 */
void rtc_set_creg(uint16_t val)
{
   80b94:	b580      	push	{r7, lr}
   80b96:	b082      	sub	sp, #8
   80b98:	af00      	add	r7, sp, #0
   80b9a:	4603      	mov	r3, r0
   80b9c:	80fb      	strh	r3, [r7, #6]
    rtc_set_addr(DS3234_CREG_WRITE, val);
   80b9e:	88fb      	ldrh	r3, [r7, #6]
   80ba0:	208e      	movs	r0, #142	; 0x8e
   80ba2:	4619      	mov	r1, r3
   80ba4:	4b02      	ldr	r3, [pc, #8]	; (80bb0 <rtc_set_creg+0x1c>)
   80ba6:	4798      	blx	r3
}
   80ba8:	3708      	adds	r7, #8
   80baa:	46bd      	mov	sp, r7
   80bac:	bd80      	pop	{r7, pc}
   80bae:	bf00      	nop
   80bb0:	00080b29 	.word	0x00080b29

00080bb4 <rtc_set_sreg>:
 * bit2 BSY      Busy with TCXO functions
 * bit1 A2F      Alarm 1 Flag - (1 if alarm2 was triggered)
 * bit0 A1F      Alarm 0 Flag - (1 if alarm1 was triggered)
 */
void rtc_set_sreg(uint16_t val)
{
   80bb4:	b580      	push	{r7, lr}
   80bb6:	b082      	sub	sp, #8
   80bb8:	af00      	add	r7, sp, #0
   80bba:	4603      	mov	r3, r0
   80bbc:	80fb      	strh	r3, [r7, #6]
    rtc_set_addr(DS3234_SREG_WRITE, val);
   80bbe:	88fb      	ldrh	r3, [r7, #6]
   80bc0:	208f      	movs	r0, #143	; 0x8f
   80bc2:	4619      	mov	r1, r3
   80bc4:	4b02      	ldr	r3, [pc, #8]	; (80bd0 <rtc_set_sreg+0x1c>)
   80bc6:	4798      	blx	r3
}
   80bc8:	3708      	adds	r7, #8
   80bca:	46bd      	mov	sp, r7
   80bcc:	bd80      	pop	{r7, pc}
   80bce:	bf00      	nop
   80bd0:	00080b29 	.word	0x00080b29

00080bd4 <rtc_get_sreg>:
 * \brief Get the value of the RTC status register.
 *
 * \return ret_val Value of the RTC status register.
 */
uint8_t rtc_get_sreg(void)
{
   80bd4:	b580      	push	{r7, lr}
   80bd6:	b082      	sub	sp, #8
   80bd8:	af00      	add	r7, sp, #0
	uint8_t ret_val;
	ret_val = rtc_get_addr(DS3234_SREG_READ);
   80bda:	200f      	movs	r0, #15
   80bdc:	4b04      	ldr	r3, [pc, #16]	; (80bf0 <rtc_get_sreg+0x1c>)
   80bde:	4798      	blx	r3
   80be0:	4603      	mov	r3, r0
   80be2:	71fb      	strb	r3, [r7, #7]
	return ret_val;
   80be4:	79fb      	ldrb	r3, [r7, #7]
}
   80be6:	4618      	mov	r0, r3
   80be8:	3708      	adds	r7, #8
   80bea:	46bd      	mov	sp, r7
   80bec:	bd80      	pop	{r7, pc}
   80bee:	bf00      	nop
   80bf0:	00080b61 	.word	0x00080b61

00080bf4 <rtc_set_a2>:

/** 
 * \brief Sets the RTC Alarm 2 to trigger every minute.
 */
void rtc_set_a2(void)
{
   80bf4:	b580      	push	{r7, lr}
   80bf6:	b082      	sub	sp, #8
   80bf8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t buffer, message;
	
	for (i = 0; i <= 2; i++) 
   80bfa:	2300      	movs	r3, #0
   80bfc:	71fb      	strb	r3, [r7, #7]
   80bfe:	e014      	b.n	80c2a <rtc_set_a2+0x36>
	{
		buffer = i + 0x8B;
   80c00:	79fb      	ldrb	r3, [r7, #7]
   80c02:	b29b      	uxth	r3, r3
   80c04:	338b      	adds	r3, #139	; 0x8b
   80c06:	80bb      	strh	r3, [r7, #4]

		message = (buffer << 8) | 0x80;
   80c08:	88bb      	ldrh	r3, [r7, #4]
   80c0a:	021b      	lsls	r3, r3, #8
   80c0c:	b29b      	uxth	r3, r3
   80c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80c12:	b29b      	uxth	r3, r3
   80c14:	b29b      	uxth	r3, r3
   80c16:	807b      	strh	r3, [r7, #2]
		spi_master_transfer(&message, 1, 0);
   80c18:	1cbb      	adds	r3, r7, #2
   80c1a:	4618      	mov	r0, r3
   80c1c:	2101      	movs	r1, #1
   80c1e:	2200      	movs	r2, #0
   80c20:	4b05      	ldr	r3, [pc, #20]	; (80c38 <rtc_set_a2+0x44>)
   80c22:	4798      	blx	r3
void rtc_set_a2(void)
{
	uint8_t i;
	uint16_t buffer, message;
	
	for (i = 0; i <= 2; i++) 
   80c24:	79fb      	ldrb	r3, [r7, #7]
   80c26:	3301      	adds	r3, #1
   80c28:	71fb      	strb	r3, [r7, #7]
   80c2a:	79fb      	ldrb	r3, [r7, #7]
   80c2c:	2b02      	cmp	r3, #2
   80c2e:	d9e7      	bls.n	80c00 <rtc_set_a2+0xc>
		buffer = i + 0x8B;

		message = (buffer << 8) | 0x80;
		spi_master_transfer(&message, 1, 0);
	}
}
   80c30:	3708      	adds	r7, #8
   80c32:	46bd      	mov	sp, r7
   80c34:	bd80      	pop	{r7, pc}
   80c36:	bf00      	nop
   80c38:	00081019 	.word	0x00081019

00080c3c <rtc_clear_a2_flag>:

/** 
 * \brief Clears the RTC Alarm 2 Flag
 */
void rtc_clear_a2_flag(void)
{
   80c3c:	b580      	push	{r7, lr}
   80c3e:	b082      	sub	sp, #8
   80c40:	af00      	add	r7, sp, #0
	uint8_t reg_val;
	reg_val = rtc_get_sreg() & ~DS3234_A2F;
   80c42:	4b07      	ldr	r3, [pc, #28]	; (80c60 <rtc_clear_a2_flag+0x24>)
   80c44:	4798      	blx	r3
   80c46:	4603      	mov	r3, r0
   80c48:	f023 0302 	bic.w	r3, r3, #2
   80c4c:	71fb      	strb	r3, [r7, #7]
	
	rtc_set_sreg(reg_val);
   80c4e:	79fb      	ldrb	r3, [r7, #7]
   80c50:	b29b      	uxth	r3, r3
   80c52:	4618      	mov	r0, r3
   80c54:	4b03      	ldr	r3, [pc, #12]	; (80c64 <rtc_clear_a2_flag+0x28>)
   80c56:	4798      	blx	r3
}
   80c58:	3708      	adds	r7, #8
   80c5a:	46bd      	mov	sp, r7
   80c5c:	bd80      	pop	{r7, pc}
   80c5e:	bf00      	nop
   80c60:	00080bd5 	.word	0x00080bd5
   80c64:	00080bb5 	.word	0x00080bb5

00080c68 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80c68:	b480      	push	{r7}
   80c6a:	b083      	sub	sp, #12
   80c6c:	af00      	add	r7, sp, #0
   80c6e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c70:	687b      	ldr	r3, [r7, #4]
   80c72:	2b07      	cmp	r3, #7
   80c74:	d825      	bhi.n	80cc2 <osc_get_rate+0x5a>
   80c76:	a201      	add	r2, pc, #4	; (adr r2, 80c7c <osc_get_rate+0x14>)
   80c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c7c:	00080c9d 	.word	0x00080c9d
   80c80:	00080ca3 	.word	0x00080ca3
   80c84:	00080ca9 	.word	0x00080ca9
   80c88:	00080caf 	.word	0x00080caf
   80c8c:	00080cb3 	.word	0x00080cb3
   80c90:	00080cb7 	.word	0x00080cb7
   80c94:	00080cbb 	.word	0x00080cbb
   80c98:	00080cbf 	.word	0x00080cbf
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80c9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80ca0:	e010      	b.n	80cc4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ca6:	e00d      	b.n	80cc4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80cac:	e00a      	b.n	80cc4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80cae:	4b08      	ldr	r3, [pc, #32]	; (80cd0 <osc_get_rate+0x68>)
   80cb0:	e008      	b.n	80cc4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80cb2:	4b08      	ldr	r3, [pc, #32]	; (80cd4 <osc_get_rate+0x6c>)
   80cb4:	e006      	b.n	80cc4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80cb6:	4b08      	ldr	r3, [pc, #32]	; (80cd8 <osc_get_rate+0x70>)
   80cb8:	e004      	b.n	80cc4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80cba:	4b07      	ldr	r3, [pc, #28]	; (80cd8 <osc_get_rate+0x70>)
   80cbc:	e002      	b.n	80cc4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80cbe:	4b06      	ldr	r3, [pc, #24]	; (80cd8 <osc_get_rate+0x70>)
   80cc0:	e000      	b.n	80cc4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80cc2:	2300      	movs	r3, #0
}
   80cc4:	4618      	mov	r0, r3
   80cc6:	370c      	adds	r7, #12
   80cc8:	46bd      	mov	sp, r7
   80cca:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cce:	4770      	bx	lr
   80cd0:	003d0900 	.word	0x003d0900
   80cd4:	007a1200 	.word	0x007a1200
   80cd8:	00b71b00 	.word	0x00b71b00

00080cdc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80cdc:	b580      	push	{r7, lr}
   80cde:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80ce0:	2006      	movs	r0, #6
   80ce2:	4b04      	ldr	r3, [pc, #16]	; (80cf4 <sysclk_get_main_hz+0x18>)
   80ce4:	4798      	blx	r3
   80ce6:	4602      	mov	r2, r0
   80ce8:	4613      	mov	r3, r2
   80cea:	00db      	lsls	r3, r3, #3
   80cec:	1a9b      	subs	r3, r3, r2
   80cee:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80cf0:	4618      	mov	r0, r3
   80cf2:	bd80      	pop	{r7, pc}
   80cf4:	00080c69 	.word	0x00080c69

00080cf8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80cf8:	b580      	push	{r7, lr}
   80cfa:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80cfc:	4b02      	ldr	r3, [pc, #8]	; (80d08 <sysclk_get_cpu_hz+0x10>)
   80cfe:	4798      	blx	r3
   80d00:	4603      	mov	r3, r0
   80d02:	085b      	lsrs	r3, r3, #1
}
   80d04:	4618      	mov	r0, r3
   80d06:	bd80      	pop	{r7, pc}
   80d08:	00080cdd 	.word	0x00080cdd

00080d0c <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80d0c:	b480      	push	{r7}
   80d0e:	b083      	sub	sp, #12
   80d10:	af00      	add	r7, sp, #0
   80d12:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80d14:	687b      	ldr	r3, [r7, #4]
   80d16:	2280      	movs	r2, #128	; 0x80
   80d18:	601a      	str	r2, [r3, #0]
}
   80d1a:	370c      	adds	r7, #12
   80d1c:	46bd      	mov	sp, r7
   80d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d22:	4770      	bx	lr

00080d24 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80d24:	b480      	push	{r7}
   80d26:	b083      	sub	sp, #12
   80d28:	af00      	add	r7, sp, #0
   80d2a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80d2c:	687b      	ldr	r3, [r7, #4]
   80d2e:	2201      	movs	r2, #1
   80d30:	601a      	str	r2, [r3, #0]
}
   80d32:	370c      	adds	r7, #12
   80d34:	46bd      	mov	sp, r7
   80d36:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d3a:	4770      	bx	lr

00080d3c <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80d3c:	b480      	push	{r7}
   80d3e:	b083      	sub	sp, #12
   80d40:	af00      	add	r7, sp, #0
   80d42:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80d44:	687b      	ldr	r3, [r7, #4]
   80d46:	685b      	ldr	r3, [r3, #4]
   80d48:	f043 0201 	orr.w	r2, r3, #1
   80d4c:	687b      	ldr	r3, [r7, #4]
   80d4e:	605a      	str	r2, [r3, #4]
}
   80d50:	370c      	adds	r7, #12
   80d52:	46bd      	mov	sp, r7
   80d54:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d58:	4770      	bx	lr
   80d5a:	bf00      	nop

00080d5c <spi_set_variable_peripheral_select>:
 * Peripheral Chip Select can be controlled by SPI_TDR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
   80d5c:	b480      	push	{r7}
   80d5e:	b083      	sub	sp, #12
   80d60:	af00      	add	r7, sp, #0
   80d62:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_PS;
   80d64:	687b      	ldr	r3, [r7, #4]
   80d66:	685b      	ldr	r3, [r3, #4]
   80d68:	f043 0202 	orr.w	r2, r3, #2
   80d6c:	687b      	ldr	r3, [r7, #4]
   80d6e:	605a      	str	r2, [r3, #4]
}
   80d70:	370c      	adds	r7, #12
   80d72:	46bd      	mov	sp, r7
   80d74:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d78:	4770      	bx	lr
   80d7a:	bf00      	nop

00080d7c <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   80d7c:	b480      	push	{r7}
   80d7e:	b083      	sub	sp, #12
   80d80:	af00      	add	r7, sp, #0
   80d82:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80d84:	687b      	ldr	r3, [r7, #4]
   80d86:	685b      	ldr	r3, [r3, #4]
   80d88:	f023 0204 	bic.w	r2, r3, #4
   80d8c:	687b      	ldr	r3, [r7, #4]
   80d8e:	605a      	str	r2, [r3, #4]
}
   80d90:	370c      	adds	r7, #12
   80d92:	46bd      	mov	sp, r7
   80d94:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d98:	4770      	bx	lr
   80d9a:	bf00      	nop

00080d9c <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80d9c:	b480      	push	{r7}
   80d9e:	b083      	sub	sp, #12
   80da0:	af00      	add	r7, sp, #0
   80da2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80da4:	687b      	ldr	r3, [r7, #4]
   80da6:	685b      	ldr	r3, [r3, #4]
   80da8:	f043 0210 	orr.w	r2, r3, #16
   80dac:	687b      	ldr	r3, [r7, #4]
   80dae:	605a      	str	r2, [r3, #4]
}
   80db0:	370c      	adds	r7, #12
   80db2:	46bd      	mov	sp, r7
   80db4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80db8:	4770      	bx	lr
   80dba:	bf00      	nop

00080dbc <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   80dbc:	b480      	push	{r7}
   80dbe:	b083      	sub	sp, #12
   80dc0:	af00      	add	r7, sp, #0
   80dc2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80dc4:	687b      	ldr	r3, [r7, #4]
   80dc6:	685b      	ldr	r3, [r3, #4]
   80dc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   80dcc:	687b      	ldr	r3, [r7, #4]
   80dce:	605a      	str	r2, [r3, #4]
}
   80dd0:	370c      	adds	r7, #12
   80dd2:	46bd      	mov	sp, r7
   80dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dd8:	4770      	bx	lr
   80dda:	bf00      	nop

00080ddc <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80ddc:	b480      	push	{r7}
   80dde:	b083      	sub	sp, #12
   80de0:	af00      	add	r7, sp, #0
   80de2:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80de4:	687b      	ldr	r3, [r7, #4]
   80de6:	691b      	ldr	r3, [r3, #16]
}
   80de8:	4618      	mov	r0, r3
   80dea:	370c      	adds	r7, #12
   80dec:	46bd      	mov	sp, r7
   80dee:	f85d 7b04 	ldr.w	r7, [sp], #4
   80df2:	4770      	bx	lr

00080df4 <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   80df4:	b580      	push	{r7, lr}
   80df6:	b084      	sub	sp, #16
   80df8:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   80dfa:	2300      	movs	r3, #0
   80dfc:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   80dfe:	2300      	movs	r3, #0
   80e00:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80e02:	4b0c      	ldr	r3, [pc, #48]	; (80e34 <SPI0_Handler+0x40>)
   80e04:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80e06:	480c      	ldr	r0, [pc, #48]	; (80e38 <SPI0_Handler+0x44>)
   80e08:	4b0c      	ldr	r3, [pc, #48]	; (80e3c <SPI0_Handler+0x48>)
   80e0a:	4798      	blx	r3
   80e0c:	4603      	mov	r3, r0
   80e0e:	f003 0301 	and.w	r3, r3, #1
   80e12:	2b00      	cmp	r3, #0
   80e14:	d00b      	beq.n	80e2e <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80e16:	1cfb      	adds	r3, r7, #3
   80e18:	4807      	ldr	r0, [pc, #28]	; (80e38 <SPI0_Handler+0x44>)
   80e1a:	4909      	ldr	r1, [pc, #36]	; (80e40 <SPI0_Handler+0x4c>)
   80e1c:	461a      	mov	r2, r3
   80e1e:	4b09      	ldr	r3, [pc, #36]	; (80e44 <SPI0_Handler+0x50>)
   80e20:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80e22:	687b      	ldr	r3, [r7, #4]
   80e24:	681b      	ldr	r3, [r3, #0]
   80e26:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80e2a:	687b      	ldr	r3, [r7, #4]
   80e2c:	601a      	str	r2, [r3, #0]
	}
}
   80e2e:	3710      	adds	r7, #16
   80e30:	46bd      	mov	sp, r7
   80e32:	bd80      	pop	{r7, pc}
   80e34:	4000800c 	.word	0x4000800c
   80e38:	40008000 	.word	0x40008000
   80e3c:	00080ddd 	.word	0x00080ddd
   80e40:	20070458 	.word	0x20070458
   80e44:	00080211 	.word	0x00080211

00080e48 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   80e48:	b590      	push	{r4, r7, lr}
   80e4a:	b085      	sub	sp, #20
   80e4c:	af00      	add	r7, sp, #0
	/* Configure an SPI peripheral. */
	uint32_t spi_chip_sel, spi_clk_freq, spi_clk_pol, spi_clk_pha;
	spi_enable_clock(SPI_MASTER_BASE);
   80e4e:	485c      	ldr	r0, [pc, #368]	; (80fc0 <spi_master_initialize+0x178>)
   80e50:	4b5c      	ldr	r3, [pc, #368]	; (80fc4 <spi_master_initialize+0x17c>)
   80e52:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   80e54:	485a      	ldr	r0, [pc, #360]	; (80fc0 <spi_master_initialize+0x178>)
   80e56:	4b5c      	ldr	r3, [pc, #368]	; (80fc8 <spi_master_initialize+0x180>)
   80e58:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   80e5a:	4859      	ldr	r0, [pc, #356]	; (80fc0 <spi_master_initialize+0x178>)
   80e5c:	4b5b      	ldr	r3, [pc, #364]	; (80fcc <spi_master_initialize+0x184>)
   80e5e:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   80e60:	4857      	ldr	r0, [pc, #348]	; (80fc0 <spi_master_initialize+0x178>)
   80e62:	4b5b      	ldr	r3, [pc, #364]	; (80fd0 <spi_master_initialize+0x188>)
   80e64:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   80e66:	4856      	ldr	r0, [pc, #344]	; (80fc0 <spi_master_initialize+0x178>)
   80e68:	4b5a      	ldr	r3, [pc, #360]	; (80fd4 <spi_master_initialize+0x18c>)
   80e6a:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, spi_get_pcs(2));	// This sets the value of PCS within the Mode Register.
   80e6c:	4854      	ldr	r0, [pc, #336]	; (80fc0 <spi_master_initialize+0x178>)
   80e6e:	210b      	movs	r1, #11
   80e70:	4b59      	ldr	r3, [pc, #356]	; (80fd8 <spi_master_initialize+0x190>)
   80e72:	4798      	blx	r3
	spi_set_variable_peripheral_select(SPI_MASTER_BASE);					// PCS needs to be set within each transfer (PCS within SPI_TDR).
   80e74:	4852      	ldr	r0, [pc, #328]	; (80fc0 <spi_master_initialize+0x178>)
   80e76:	4b59      	ldr	r3, [pc, #356]	; (80fdc <spi_master_initialize+0x194>)
   80e78:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);					// Each CS is to be connected to a single device.
   80e7a:	4851      	ldr	r0, [pc, #324]	; (80fc0 <spi_master_initialize+0x178>)
   80e7c:	4b58      	ldr	r3, [pc, #352]	; (80fe0 <spi_master_initialize+0x198>)
   80e7e:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   80e80:	484f      	ldr	r0, [pc, #316]	; (80fc0 <spi_master_initialize+0x178>)
   80e82:	2100      	movs	r1, #0
   80e84:	4b57      	ldr	r3, [pc, #348]	; (80fe4 <spi_master_initialize+0x19c>)
   80e86:	4798      	blx	r3

	/* Set communication parameters for CS0	*/
	spi_chip_sel = 0;
   80e88:	2300      	movs	r3, #0
   80e8a:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 4000000;	// SPI CLK for RTC = 4MHz.
   80e8c:	4b56      	ldr	r3, [pc, #344]	; (80fe8 <spi_master_initialize+0x1a0>)
   80e8e:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   80e90:	2301      	movs	r3, #1
   80e92:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80e94:	2300      	movs	r3, #0
   80e96:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80e98:	4849      	ldr	r0, [pc, #292]	; (80fc0 <spi_master_initialize+0x178>)
   80e9a:	68f9      	ldr	r1, [r7, #12]
   80e9c:	2245      	movs	r2, #69	; 0x45
   80e9e:	2302      	movs	r3, #2
   80ea0:	4c52      	ldr	r4, [pc, #328]	; (80fec <spi_master_initialize+0x1a4>)
   80ea2:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_16_BIT);
   80ea4:	4846      	ldr	r0, [pc, #280]	; (80fc0 <spi_master_initialize+0x178>)
   80ea6:	68f9      	ldr	r1, [r7, #12]
   80ea8:	2280      	movs	r2, #128	; 0x80
   80eaa:	4b51      	ldr	r3, [pc, #324]	; (80ff0 <spi_master_initialize+0x1a8>)
   80eac:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   80eae:	4b51      	ldr	r3, [pc, #324]	; (80ff4 <spi_master_initialize+0x1ac>)
   80eb0:	4798      	blx	r3
   80eb2:	4603      	mov	r3, r0
   80eb4:	68b8      	ldr	r0, [r7, #8]
   80eb6:	4619      	mov	r1, r3
   80eb8:	4b4f      	ldr	r3, [pc, #316]	; (80ff8 <spi_master_initialize+0x1b0>)
   80eba:	4798      	blx	r3
   80ebc:	4603      	mov	r3, r0
   80ebe:	b2db      	uxtb	r3, r3
   80ec0:	483f      	ldr	r0, [pc, #252]	; (80fc0 <spi_master_initialize+0x178>)
   80ec2:	68f9      	ldr	r1, [r7, #12]
   80ec4:	461a      	mov	r2, r3
   80ec6:	4b4d      	ldr	r3, [pc, #308]	; (80ffc <spi_master_initialize+0x1b4>)
   80ec8:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);		// CS rises after SPI transfers have completed.
   80eca:	483d      	ldr	r0, [pc, #244]	; (80fc0 <spi_master_initialize+0x178>)
   80ecc:	68f9      	ldr	r1, [r7, #12]
   80ece:	2204      	movs	r2, #4
   80ed0:	4b4b      	ldr	r3, [pc, #300]	; (81000 <spi_master_initialize+0x1b8>)
   80ed2:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80ed4:	483a      	ldr	r0, [pc, #232]	; (80fc0 <spi_master_initialize+0x178>)
   80ed6:	68f9      	ldr	r1, [r7, #12]
   80ed8:	687a      	ldr	r2, [r7, #4]
   80eda:	4b4a      	ldr	r3, [pc, #296]	; (81004 <spi_master_initialize+0x1bc>)
   80edc:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   80ede:	4838      	ldr	r0, [pc, #224]	; (80fc0 <spi_master_initialize+0x178>)
   80ee0:	68f9      	ldr	r1, [r7, #12]
   80ee2:	683a      	ldr	r2, [r7, #0]
   80ee4:	4b48      	ldr	r3, [pc, #288]	; (81008 <spi_master_initialize+0x1c0>)
   80ee6:	4798      	blx	r3
	
	/* Set communication parameters for CS1	*/
	spi_chip_sel = 1;
   80ee8:	2301      	movs	r3, #1
   80eea:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 4000000;	// SPI CLK for RTC = 4MHz.
   80eec:	4b3e      	ldr	r3, [pc, #248]	; (80fe8 <spi_master_initialize+0x1a0>)
   80eee:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   80ef0:	2301      	movs	r3, #1
   80ef2:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80ef4:	2300      	movs	r3, #0
   80ef6:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80ef8:	4831      	ldr	r0, [pc, #196]	; (80fc0 <spi_master_initialize+0x178>)
   80efa:	68f9      	ldr	r1, [r7, #12]
   80efc:	2245      	movs	r2, #69	; 0x45
   80efe:	2302      	movs	r3, #2
   80f00:	4c3a      	ldr	r4, [pc, #232]	; (80fec <spi_master_initialize+0x1a4>)
   80f02:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   80f04:	482e      	ldr	r0, [pc, #184]	; (80fc0 <spi_master_initialize+0x178>)
   80f06:	68f9      	ldr	r1, [r7, #12]
   80f08:	2200      	movs	r2, #0
   80f0a:	4b39      	ldr	r3, [pc, #228]	; (80ff0 <spi_master_initialize+0x1a8>)
   80f0c:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   80f0e:	4b39      	ldr	r3, [pc, #228]	; (80ff4 <spi_master_initialize+0x1ac>)
   80f10:	4798      	blx	r3
   80f12:	4603      	mov	r3, r0
   80f14:	68b8      	ldr	r0, [r7, #8]
   80f16:	4619      	mov	r1, r3
   80f18:	4b37      	ldr	r3, [pc, #220]	; (80ff8 <spi_master_initialize+0x1b0>)
   80f1a:	4798      	blx	r3
   80f1c:	4603      	mov	r3, r0
   80f1e:	b2db      	uxtb	r3, r3
   80f20:	4827      	ldr	r0, [pc, #156]	; (80fc0 <spi_master_initialize+0x178>)
   80f22:	68f9      	ldr	r1, [r7, #12]
   80f24:	461a      	mov	r2, r3
   80f26:	4b35      	ldr	r3, [pc, #212]	; (80ffc <spi_master_initialize+0x1b4>)
   80f28:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);
   80f2a:	4825      	ldr	r0, [pc, #148]	; (80fc0 <spi_master_initialize+0x178>)
   80f2c:	68f9      	ldr	r1, [r7, #12]
   80f2e:	2204      	movs	r2, #4
   80f30:	4b33      	ldr	r3, [pc, #204]	; (81000 <spi_master_initialize+0x1b8>)
   80f32:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80f34:	4822      	ldr	r0, [pc, #136]	; (80fc0 <spi_master_initialize+0x178>)
   80f36:	68f9      	ldr	r1, [r7, #12]
   80f38:	687a      	ldr	r2, [r7, #4]
   80f3a:	4b32      	ldr	r3, [pc, #200]	; (81004 <spi_master_initialize+0x1bc>)
   80f3c:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   80f3e:	4820      	ldr	r0, [pc, #128]	; (80fc0 <spi_master_initialize+0x178>)
   80f40:	68f9      	ldr	r1, [r7, #12]
   80f42:	683a      	ldr	r2, [r7, #0]
   80f44:	4b30      	ldr	r3, [pc, #192]	; (81008 <spi_master_initialize+0x1c0>)
   80f46:	4798      	blx	r3
	
	/* Set communication parameters for CS2	*/
	spi_chip_sel = 2;
   80f48:	2302      	movs	r3, #2
   80f4a:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 200000000;	// SPI CLK for MEM2 = 20MHz.
   80f4c:	4b2f      	ldr	r3, [pc, #188]	; (8100c <spi_master_initialize+0x1c4>)
   80f4e:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 0;
   80f50:	2300      	movs	r3, #0
   80f52:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80f54:	2300      	movs	r3, #0
   80f56:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80f58:	4819      	ldr	r0, [pc, #100]	; (80fc0 <spi_master_initialize+0x178>)
   80f5a:	68f9      	ldr	r1, [r7, #12]
   80f5c:	2245      	movs	r2, #69	; 0x45
   80f5e:	2302      	movs	r3, #2
   80f60:	4c22      	ldr	r4, [pc, #136]	; (80fec <spi_master_initialize+0x1a4>)
   80f62:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   80f64:	4816      	ldr	r0, [pc, #88]	; (80fc0 <spi_master_initialize+0x178>)
   80f66:	68f9      	ldr	r1, [r7, #12]
   80f68:	2200      	movs	r2, #0
   80f6a:	4b21      	ldr	r3, [pc, #132]	; (80ff0 <spi_master_initialize+0x1a8>)
   80f6c:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz()));
   80f6e:	4b21      	ldr	r3, [pc, #132]	; (80ff4 <spi_master_initialize+0x1ac>)
   80f70:	4798      	blx	r3
   80f72:	4603      	mov	r3, r0
   80f74:	68b8      	ldr	r0, [r7, #8]
   80f76:	4619      	mov	r1, r3
   80f78:	4b1f      	ldr	r3, [pc, #124]	; (80ff8 <spi_master_initialize+0x1b0>)
   80f7a:	4798      	blx	r3
   80f7c:	4603      	mov	r3, r0
   80f7e:	b2db      	uxtb	r3, r3
   80f80:	480f      	ldr	r0, [pc, #60]	; (80fc0 <spi_master_initialize+0x178>)
   80f82:	68f9      	ldr	r1, [r7, #12]
   80f84:	461a      	mov	r2, r3
   80f86:	4b1d      	ldr	r3, [pc, #116]	; (80ffc <spi_master_initialize+0x1b4>)
   80f88:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);
   80f8a:	480d      	ldr	r0, [pc, #52]	; (80fc0 <spi_master_initialize+0x178>)
   80f8c:	68f9      	ldr	r1, [r7, #12]
   80f8e:	2204      	movs	r2, #4
   80f90:	4b1b      	ldr	r3, [pc, #108]	; (81000 <spi_master_initialize+0x1b8>)
   80f92:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80f94:	480a      	ldr	r0, [pc, #40]	; (80fc0 <spi_master_initialize+0x178>)
   80f96:	68f9      	ldr	r1, [r7, #12]
   80f98:	687a      	ldr	r2, [r7, #4]
   80f9a:	4b1a      	ldr	r3, [pc, #104]	; (81004 <spi_master_initialize+0x1bc>)
   80f9c:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   80f9e:	4808      	ldr	r0, [pc, #32]	; (80fc0 <spi_master_initialize+0x178>)
   80fa0:	68f9      	ldr	r1, [r7, #12]
   80fa2:	683a      	ldr	r2, [r7, #0]
   80fa4:	4b18      	ldr	r3, [pc, #96]	; (81008 <spi_master_initialize+0x1c0>)
   80fa6:	4798      	blx	r3
	
	/* Set pins low for SPI Memory until ready to initialize	*/
	gpio_set_pin_low(SPI0_MEM2_HOLD);
   80fa8:	2020      	movs	r0, #32
   80faa:	4b19      	ldr	r3, [pc, #100]	; (81010 <spi_master_initialize+0x1c8>)
   80fac:	4798      	blx	r3
	gpio_set_pin_low(SPI0_MEM2_WP);
   80fae:	201c      	movs	r0, #28
   80fb0:	4b17      	ldr	r3, [pc, #92]	; (81010 <spi_master_initialize+0x1c8>)
   80fb2:	4798      	blx	r3
	
	/* Enable SPI Communication */
	spi_enable(SPI_MASTER_BASE);
   80fb4:	4802      	ldr	r0, [pc, #8]	; (80fc0 <spi_master_initialize+0x178>)
   80fb6:	4b17      	ldr	r3, [pc, #92]	; (81014 <spi_master_initialize+0x1cc>)
   80fb8:	4798      	blx	r3
}
   80fba:	3714      	adds	r7, #20
   80fbc:	46bd      	mov	sp, r7
   80fbe:	bd90      	pop	{r4, r7, pc}
   80fc0:	40008000 	.word	0x40008000
   80fc4:	00080189 	.word	0x00080189
   80fc8:	00080d0d 	.word	0x00080d0d
   80fcc:	00080d3d 	.word	0x00080d3d
   80fd0:	00080d9d 	.word	0x00080d9d
   80fd4:	00080dbd 	.word	0x00080dbd
   80fd8:	000801ad 	.word	0x000801ad
   80fdc:	00080d5d 	.word	0x00080d5d
   80fe0:	00080d7d 	.word	0x00080d7d
   80fe4:	000801e1 	.word	0x000801e1
   80fe8:	003d0900 	.word	0x003d0900
   80fec:	00080511 	.word	0x00080511
   80ff0:	00080439 	.word	0x00080439
   80ff4:	00080cf9 	.word	0x00080cf9
   80ff8:	00080481 	.word	0x00080481
   80ffc:	000804c1 	.word	0x000804c1
   81000:	00080395 	.word	0x00080395
   81004:	000802f5 	.word	0x000802f5
   81008:	00080345 	.word	0x00080345
   8100c:	0bebc200 	.word	0x0bebc200
   81010:	0008255d 	.word	0x0008255d
   81014:	00080d25 	.word	0x00080d25

00081018 <spi_master_transfer>:
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
void spi_master_transfer(void *p_buf, uint32_t size, uint8_t chip_sel)
{
   81018:	b590      	push	{r4, r7, lr}
   8101a:	b089      	sub	sp, #36	; 0x24
   8101c:	af00      	add	r7, sp, #0
   8101e:	60f8      	str	r0, [r7, #12]
   81020:	60b9      	str	r1, [r7, #8]
   81022:	4613      	mov	r3, r2
   81024:	71fb      	strb	r3, [r7, #7]
	uint32_t i;
	uint32_t pcs = spi_get_pcs(chip_sel);
   81026:	79fb      	ldrb	r3, [r7, #7]
   81028:	2201      	movs	r2, #1
   8102a:	fa02 f303 	lsl.w	r3, r2, r3
   8102e:	43db      	mvns	r3, r3
   81030:	f003 030f 	and.w	r3, r3, #15
   81034:	617b      	str	r3, [r7, #20]
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   81036:	68fb      	ldr	r3, [r7, #12]
   81038:	61bb      	str	r3, [r7, #24]
	
	if(size == 1)	// Only transfer a single message.
   8103a:	68bb      	ldr	r3, [r7, #8]
   8103c:	2b01      	cmp	r3, #1
   8103e:	d124      	bne.n	8108a <spi_master_transfer+0x72>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], pcs, 1);
   81040:	69fb      	ldr	r3, [r7, #28]
   81042:	005b      	lsls	r3, r3, #1
   81044:	69ba      	ldr	r2, [r7, #24]
   81046:	4413      	add	r3, r2
   81048:	881a      	ldrh	r2, [r3, #0]
   8104a:	697b      	ldr	r3, [r7, #20]
   8104c:	b2db      	uxtb	r3, r3
   8104e:	483d      	ldr	r0, [pc, #244]	; (81144 <spi_master_transfer+0x12c>)
   81050:	4611      	mov	r1, r2
   81052:	461a      	mov	r2, r3
   81054:	2301      	movs	r3, #1
   81056:	4c3c      	ldr	r4, [pc, #240]	; (81148 <spi_master_transfer+0x130>)
   81058:	47a0      	blx	r4
		// The last parameter above tells SPI whether this is the last byte to be transferred.
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   8105a:	bf00      	nop
   8105c:	4839      	ldr	r0, [pc, #228]	; (81144 <spi_master_transfer+0x12c>)
   8105e:	4b3b      	ldr	r3, [pc, #236]	; (8114c <spi_master_transfer+0x134>)
   81060:	4798      	blx	r3
   81062:	4603      	mov	r3, r0
   81064:	f003 0301 	and.w	r3, r3, #1
   81068:	2b00      	cmp	r3, #0
   8106a:	d0f7      	beq.n	8105c <spi_master_transfer+0x44>
		spi_read(SPI_MASTER_BASE, &data, &pcs);
   8106c:	f107 0314 	add.w	r3, r7, #20
   81070:	4834      	ldr	r0, [pc, #208]	; (81144 <spi_master_transfer+0x12c>)
   81072:	4937      	ldr	r1, [pc, #220]	; (81150 <spi_master_transfer+0x138>)
   81074:	461a      	mov	r2, r3
   81076:	4b37      	ldr	r3, [pc, #220]	; (81154 <spi_master_transfer+0x13c>)
   81078:	4798      	blx	r3
		p_buffer[i] = data;
   8107a:	69fb      	ldr	r3, [r7, #28]
   8107c:	005b      	lsls	r3, r3, #1
   8107e:	69ba      	ldr	r2, [r7, #24]
   81080:	4413      	add	r3, r2
   81082:	4a33      	ldr	r2, [pc, #204]	; (81150 <spi_master_transfer+0x138>)
   81084:	8812      	ldrh	r2, [r2, #0]
   81086:	801a      	strh	r2, [r3, #0]
		return;
   81088:	e059      	b.n	8113e <spi_master_transfer+0x126>
	}
	
	// Keep CS low for the duration of the transfer, set high @ end.
	for (i = 0; i < (size - 1); i++) 
   8108a:	2300      	movs	r3, #0
   8108c:	61fb      	str	r3, [r7, #28]
   8108e:	e026      	b.n	810de <spi_master_transfer+0xc6>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], pcs, 0);	
   81090:	69fb      	ldr	r3, [r7, #28]
   81092:	005b      	lsls	r3, r3, #1
   81094:	69ba      	ldr	r2, [r7, #24]
   81096:	4413      	add	r3, r2
   81098:	881a      	ldrh	r2, [r3, #0]
   8109a:	697b      	ldr	r3, [r7, #20]
   8109c:	b2db      	uxtb	r3, r3
   8109e:	4829      	ldr	r0, [pc, #164]	; (81144 <spi_master_transfer+0x12c>)
   810a0:	4611      	mov	r1, r2
   810a2:	461a      	mov	r2, r3
   810a4:	2300      	movs	r3, #0
   810a6:	4c28      	ldr	r4, [pc, #160]	; (81148 <spi_master_transfer+0x130>)
   810a8:	47a0      	blx	r4
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   810aa:	bf00      	nop
   810ac:	4825      	ldr	r0, [pc, #148]	; (81144 <spi_master_transfer+0x12c>)
   810ae:	4b27      	ldr	r3, [pc, #156]	; (8114c <spi_master_transfer+0x134>)
   810b0:	4798      	blx	r3
   810b2:	4603      	mov	r3, r0
   810b4:	f003 0301 	and.w	r3, r3, #1
   810b8:	2b00      	cmp	r3, #0
   810ba:	d0f7      	beq.n	810ac <spi_master_transfer+0x94>
		spi_read(SPI_MASTER_BASE, &data, &pcs);
   810bc:	f107 0314 	add.w	r3, r7, #20
   810c0:	4820      	ldr	r0, [pc, #128]	; (81144 <spi_master_transfer+0x12c>)
   810c2:	4923      	ldr	r1, [pc, #140]	; (81150 <spi_master_transfer+0x138>)
   810c4:	461a      	mov	r2, r3
   810c6:	4b23      	ldr	r3, [pc, #140]	; (81154 <spi_master_transfer+0x13c>)
   810c8:	4798      	blx	r3
		p_buffer[i] = data;
   810ca:	69fb      	ldr	r3, [r7, #28]
   810cc:	005b      	lsls	r3, r3, #1
   810ce:	69ba      	ldr	r2, [r7, #24]
   810d0:	4413      	add	r3, r2
   810d2:	4a1f      	ldr	r2, [pc, #124]	; (81150 <spi_master_transfer+0x138>)
   810d4:	8812      	ldrh	r2, [r2, #0]
   810d6:	801a      	strh	r2, [r3, #0]
		p_buffer[i] = data;
		return;
	}
	
	// Keep CS low for the duration of the transfer, set high @ end.
	for (i = 0; i < (size - 1); i++) 
   810d8:	69fb      	ldr	r3, [r7, #28]
   810da:	3301      	adds	r3, #1
   810dc:	61fb      	str	r3, [r7, #28]
   810de:	68bb      	ldr	r3, [r7, #8]
   810e0:	1e5a      	subs	r2, r3, #1
   810e2:	69fb      	ldr	r3, [r7, #28]
   810e4:	429a      	cmp	r2, r3
   810e6:	d8d3      	bhi.n	81090 <spi_master_transfer+0x78>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &pcs);
		p_buffer[i] = data;
	}
	spi_write(SPI_MASTER_BASE, p_buffer[(size - 1)], pcs, 1);
   810e8:	68bb      	ldr	r3, [r7, #8]
   810ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   810ee:	3b01      	subs	r3, #1
   810f0:	005b      	lsls	r3, r3, #1
   810f2:	69ba      	ldr	r2, [r7, #24]
   810f4:	4413      	add	r3, r2
   810f6:	881a      	ldrh	r2, [r3, #0]
   810f8:	697b      	ldr	r3, [r7, #20]
   810fa:	b2db      	uxtb	r3, r3
   810fc:	4811      	ldr	r0, [pc, #68]	; (81144 <spi_master_transfer+0x12c>)
   810fe:	4611      	mov	r1, r2
   81100:	461a      	mov	r2, r3
   81102:	2301      	movs	r3, #1
   81104:	4c10      	ldr	r4, [pc, #64]	; (81148 <spi_master_transfer+0x130>)
   81106:	47a0      	blx	r4
	/* Wait transfer done. */
	while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   81108:	bf00      	nop
   8110a:	480e      	ldr	r0, [pc, #56]	; (81144 <spi_master_transfer+0x12c>)
   8110c:	4b0f      	ldr	r3, [pc, #60]	; (8114c <spi_master_transfer+0x134>)
   8110e:	4798      	blx	r3
   81110:	4603      	mov	r3, r0
   81112:	f003 0301 	and.w	r3, r3, #1
   81116:	2b00      	cmp	r3, #0
   81118:	d0f7      	beq.n	8110a <spi_master_transfer+0xf2>
	spi_read(SPI_MASTER_BASE, &data, &pcs);
   8111a:	f107 0314 	add.w	r3, r7, #20
   8111e:	4809      	ldr	r0, [pc, #36]	; (81144 <spi_master_transfer+0x12c>)
   81120:	490b      	ldr	r1, [pc, #44]	; (81150 <spi_master_transfer+0x138>)
   81122:	461a      	mov	r2, r3
   81124:	4b0b      	ldr	r3, [pc, #44]	; (81154 <spi_master_transfer+0x13c>)
   81126:	4798      	blx	r3
	p_buffer[(size - 1)] = data;
   81128:	68bb      	ldr	r3, [r7, #8]
   8112a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   8112e:	3b01      	subs	r3, #1
   81130:	005b      	lsls	r3, r3, #1
   81132:	69ba      	ldr	r2, [r7, #24]
   81134:	4413      	add	r3, r2
   81136:	4a06      	ldr	r2, [pc, #24]	; (81150 <spi_master_transfer+0x138>)
   81138:	8812      	ldrh	r2, [r2, #0]
   8113a:	801a      	strh	r2, [r3, #0]
	return;
   8113c:	bf00      	nop
}
   8113e:	3724      	adds	r7, #36	; 0x24
   81140:	46bd      	mov	sp, r7
   81142:	bd90      	pop	{r4, r7, pc}
   81144:	40008000 	.word	0x40008000
   81148:	00080281 	.word	0x00080281
   8114c:	00080ddd 	.word	0x00080ddd
   81150:	2007045a 	.word	0x2007045a
   81154:	00080211 	.word	0x00080211

00081158 <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   81158:	b580      	push	{r7, lr}
   8115a:	b084      	sub	sp, #16
   8115c:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   8115e:	2300      	movs	r3, #0
   81160:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   81162:	4b05      	ldr	r3, [pc, #20]	; (81178 <spi_initialize+0x20>)
   81164:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   81166:	2300      	movs	r3, #0
   81168:	80fb      	strh	r3, [r7, #6]
		
	//*reg_ptr |= 0x00BB;
	//spi_slave_initialize();
	spi_master_initialize();
   8116a:	4b04      	ldr	r3, [pc, #16]	; (8117c <spi_initialize+0x24>)
   8116c:	4798      	blx	r3

	return;
   8116e:	bf00      	nop
}
   81170:	3710      	adds	r7, #16
   81172:	46bd      	mov	sp, r7
   81174:	bd80      	pop	{r7, pc}
   81176:	bf00      	nop
   81178:	4000800c 	.word	0x4000800c
   8117c:	00080e49 	.word	0x00080e49

00081180 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81180:	b480      	push	{r7}
   81182:	b083      	sub	sp, #12
   81184:	af00      	add	r7, sp, #0
   81186:	4603      	mov	r3, r0
   81188:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8118a:	4b08      	ldr	r3, [pc, #32]	; (811ac <NVIC_EnableIRQ+0x2c>)
   8118c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81190:	0952      	lsrs	r2, r2, #5
   81192:	79f9      	ldrb	r1, [r7, #7]
   81194:	f001 011f 	and.w	r1, r1, #31
   81198:	2001      	movs	r0, #1
   8119a:	fa00 f101 	lsl.w	r1, r0, r1
   8119e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   811a2:	370c      	adds	r7, #12
   811a4:	46bd      	mov	sp, r7
   811a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   811aa:	4770      	bx	lr
   811ac:	e000e100 	.word	0xe000e100

000811b0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   811b0:	b480      	push	{r7}
   811b2:	b083      	sub	sp, #12
   811b4:	af00      	add	r7, sp, #0
   811b6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   811b8:	687b      	ldr	r3, [r7, #4]
   811ba:	2b07      	cmp	r3, #7
   811bc:	d825      	bhi.n	8120a <osc_get_rate+0x5a>
   811be:	a201      	add	r2, pc, #4	; (adr r2, 811c4 <osc_get_rate+0x14>)
   811c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   811c4:	000811e5 	.word	0x000811e5
   811c8:	000811eb 	.word	0x000811eb
   811cc:	000811f1 	.word	0x000811f1
   811d0:	000811f7 	.word	0x000811f7
   811d4:	000811fb 	.word	0x000811fb
   811d8:	000811ff 	.word	0x000811ff
   811dc:	00081203 	.word	0x00081203
   811e0:	00081207 	.word	0x00081207
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   811e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   811e8:	e010      	b.n	8120c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   811ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   811ee:	e00d      	b.n	8120c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   811f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   811f4:	e00a      	b.n	8120c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   811f6:	4b08      	ldr	r3, [pc, #32]	; (81218 <osc_get_rate+0x68>)
   811f8:	e008      	b.n	8120c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   811fa:	4b08      	ldr	r3, [pc, #32]	; (8121c <osc_get_rate+0x6c>)
   811fc:	e006      	b.n	8120c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   811fe:	4b08      	ldr	r3, [pc, #32]	; (81220 <osc_get_rate+0x70>)
   81200:	e004      	b.n	8120c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81202:	4b07      	ldr	r3, [pc, #28]	; (81220 <osc_get_rate+0x70>)
   81204:	e002      	b.n	8120c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81206:	4b06      	ldr	r3, [pc, #24]	; (81220 <osc_get_rate+0x70>)
   81208:	e000      	b.n	8120c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8120a:	2300      	movs	r3, #0
}
   8120c:	4618      	mov	r0, r3
   8120e:	370c      	adds	r7, #12
   81210:	46bd      	mov	sp, r7
   81212:	f85d 7b04 	ldr.w	r7, [sp], #4
   81216:	4770      	bx	lr
   81218:	003d0900 	.word	0x003d0900
   8121c:	007a1200 	.word	0x007a1200
   81220:	00b71b00 	.word	0x00b71b00

00081224 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81224:	b580      	push	{r7, lr}
   81226:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81228:	2006      	movs	r0, #6
   8122a:	4b04      	ldr	r3, [pc, #16]	; (8123c <sysclk_get_main_hz+0x18>)
   8122c:	4798      	blx	r3
   8122e:	4602      	mov	r2, r0
   81230:	4613      	mov	r3, r2
   81232:	00db      	lsls	r3, r3, #3
   81234:	1a9b      	subs	r3, r3, r2
   81236:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81238:	4618      	mov	r0, r3
   8123a:	bd80      	pop	{r7, pc}
   8123c:	000811b1 	.word	0x000811b1

00081240 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81240:	b580      	push	{r7, lr}
   81242:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81244:	4b02      	ldr	r3, [pc, #8]	; (81250 <sysclk_get_cpu_hz+0x10>)
   81246:	4798      	blx	r3
   81248:	4603      	mov	r3, r0
   8124a:	085b      	lsrs	r3, r3, #1
}
   8124c:	4618      	mov	r0, r3
   8124e:	bd80      	pop	{r7, pc}
   81250:	00081225 	.word	0x00081225

00081254 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81254:	b580      	push	{r7, lr}
   81256:	b082      	sub	sp, #8
   81258:	af00      	add	r7, sp, #0
   8125a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8125c:	6878      	ldr	r0, [r7, #4]
   8125e:	4b02      	ldr	r3, [pc, #8]	; (81268 <sysclk_enable_peripheral_clock+0x14>)
   81260:	4798      	blx	r3
}
   81262:	3708      	adds	r7, #8
   81264:	46bd      	mov	sp, r7
   81266:	bd80      	pop	{r7, pc}
   81268:	00082b7d 	.word	0x00082b7d

0008126c <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   8126c:	b580      	push	{r7, lr}
   8126e:	b084      	sub	sp, #16
   81270:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   81272:	2300      	movs	r3, #0
   81274:	60bb      	str	r3, [r7, #8]
   81276:	2300      	movs	r3, #0
   81278:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   8127a:	2300      	movs	r3, #0
   8127c:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   8127e:	2300      	movs	r3, #0
   81280:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   81282:	483b      	ldr	r0, [pc, #236]	; (81370 <USART0_Handler+0x104>)
   81284:	4b3b      	ldr	r3, [pc, #236]	; (81374 <USART0_Handler+0x108>)
   81286:	4798      	blx	r3
   81288:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   8128a:	2058      	movs	r0, #88	; 0x58
   8128c:	4b3a      	ldr	r3, [pc, #232]	; (81378 <USART0_Handler+0x10c>)
   8128e:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   81290:	4b3a      	ldr	r3, [pc, #232]	; (8137c <USART0_Handler+0x110>)
   81292:	781b      	ldrb	r3, [r3, #0]
   81294:	2b00      	cmp	r3, #0
   81296:	d167      	bne.n	81368 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   81298:	683b      	ldr	r3, [r7, #0]
   8129a:	f003 0301 	and.w	r3, r3, #1
   8129e:	2b00      	cmp	r3, #0
   812a0:	d062      	beq.n	81368 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   812a2:	4833      	ldr	r0, [pc, #204]	; (81370 <USART0_Handler+0x104>)
   812a4:	4936      	ldr	r1, [pc, #216]	; (81380 <USART0_Handler+0x114>)
   812a6:	4b37      	ldr	r3, [pc, #220]	; (81384 <USART0_Handler+0x118>)
   812a8:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   812aa:	4b35      	ldr	r3, [pc, #212]	; (81380 <USART0_Handler+0x114>)
   812ac:	681b      	ldr	r3, [r3, #0]
   812ae:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   812b0:	68bb      	ldr	r3, [r7, #8]
   812b2:	2b31      	cmp	r3, #49	; 0x31
   812b4:	d102      	bne.n	812bc <USART0_Handler+0x50>
				command_start = 1;
   812b6:	4b34      	ldr	r3, [pc, #208]	; (81388 <USART0_Handler+0x11c>)
   812b8:	2201      	movs	r2, #1
   812ba:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   812bc:	68bb      	ldr	r3, [r7, #8]
   812be:	2b32      	cmp	r3, #50	; 0x32
   812c0:	d102      	bne.n	812c8 <USART0_Handler+0x5c>
				command_end = 1;
   812c2:	4b32      	ldr	r3, [pc, #200]	; (8138c <USART0_Handler+0x120>)
   812c4:	2201      	movs	r2, #1
   812c6:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   812c8:	4b2f      	ldr	r3, [pc, #188]	; (81388 <USART0_Handler+0x11c>)
   812ca:	781b      	ldrb	r3, [r3, #0]
   812cc:	2b01      	cmp	r3, #1
   812ce:	d11e      	bne.n	8130e <USART0_Handler+0xa2>
   812d0:	68bb      	ldr	r3, [r7, #8]
   812d2:	2b00      	cmp	r3, #0
   812d4:	d01b      	beq.n	8130e <USART0_Handler+0xa2>
   812d6:	68bb      	ldr	r3, [r7, #8]
   812d8:	2b31      	cmp	r3, #49	; 0x31
   812da:	d018      	beq.n	8130e <USART0_Handler+0xa2>
   812dc:	68bb      	ldr	r3, [r7, #8]
   812de:	2b32      	cmp	r3, #50	; 0x32
   812e0:	d015      	beq.n	8130e <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   812e2:	4b2b      	ldr	r3, [pc, #172]	; (81390 <USART0_Handler+0x124>)
   812e4:	781a      	ldrb	r2, [r3, #0]
   812e6:	4b2b      	ldr	r3, [pc, #172]	; (81394 <USART0_Handler+0x128>)
   812e8:	fba3 1302 	umull	r1, r3, r3, r2
   812ec:	08d9      	lsrs	r1, r3, #3
   812ee:	460b      	mov	r3, r1
   812f0:	009b      	lsls	r3, r3, #2
   812f2:	440b      	add	r3, r1
   812f4:	005b      	lsls	r3, r3, #1
   812f6:	1ad3      	subs	r3, r2, r3
   812f8:	b2db      	uxtb	r3, r3
   812fa:	68ba      	ldr	r2, [r7, #8]
   812fc:	b2d1      	uxtb	r1, r2
   812fe:	4a26      	ldr	r2, [pc, #152]	; (81398 <USART0_Handler+0x12c>)
   81300:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   81302:	4b23      	ldr	r3, [pc, #140]	; (81390 <USART0_Handler+0x124>)
   81304:	781b      	ldrb	r3, [r3, #0]
   81306:	3301      	adds	r3, #1
   81308:	b2da      	uxtb	r2, r3
   8130a:	4b21      	ldr	r3, [pc, #132]	; (81390 <USART0_Handler+0x124>)
   8130c:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   8130e:	4b1f      	ldr	r3, [pc, #124]	; (8138c <USART0_Handler+0x120>)
   81310:	781b      	ldrb	r3, [r3, #0]
   81312:	2b01      	cmp	r3, #1
   81314:	d11d      	bne.n	81352 <USART0_Handler+0xe6>
   81316:	4b1c      	ldr	r3, [pc, #112]	; (81388 <USART0_Handler+0x11c>)
   81318:	781b      	ldrb	r3, [r3, #0]
   8131a:	2b01      	cmp	r3, #1
   8131c:	d119      	bne.n	81352 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   8131e:	4b1f      	ldr	r3, [pc, #124]	; (8139c <USART0_Handler+0x130>)
   81320:	4798      	blx	r3
				command_end = 0;
   81322:	4b1a      	ldr	r3, [pc, #104]	; (8138c <USART0_Handler+0x120>)
   81324:	2200      	movs	r2, #0
   81326:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   81328:	4b17      	ldr	r3, [pc, #92]	; (81388 <USART0_Handler+0x11c>)
   8132a:	2200      	movs	r2, #0
   8132c:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   8132e:	4b18      	ldr	r3, [pc, #96]	; (81390 <USART0_Handler+0x124>)
   81330:	2200      	movs	r2, #0
   81332:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   81334:	2300      	movs	r3, #0
   81336:	73bb      	strb	r3, [r7, #14]
   81338:	e006      	b.n	81348 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   8133a:	7bbb      	ldrb	r3, [r7, #14]
   8133c:	4a16      	ldr	r2, [pc, #88]	; (81398 <USART0_Handler+0x12c>)
   8133e:	2100      	movs	r1, #0
   81340:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   81342:	7bbb      	ldrb	r3, [r7, #14]
   81344:	3301      	adds	r3, #1
   81346:	73bb      	strb	r3, [r7, #14]
   81348:	7bbb      	ldrb	r3, [r7, #14]
   8134a:	2b09      	cmp	r3, #9
   8134c:	d9f5      	bls.n	8133a <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   8134e:	2301      	movs	r3, #1
   81350:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   81352:	7bfb      	ldrb	r3, [r7, #15]
   81354:	2b00      	cmp	r3, #0
   81356:	d105      	bne.n	81364 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   81358:	4b09      	ldr	r3, [pc, #36]	; (81380 <USART0_Handler+0x114>)
   8135a:	681b      	ldr	r3, [r3, #0]
   8135c:	4804      	ldr	r0, [pc, #16]	; (81370 <USART0_Handler+0x104>)
   8135e:	4619      	mov	r1, r3
   81360:	4b0f      	ldr	r3, [pc, #60]	; (813a0 <USART0_Handler+0x134>)
   81362:	4798      	blx	r3
					
			command_completed = 0;
   81364:	2300      	movs	r3, #0
   81366:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   81368:	3710      	adds	r7, #16
   8136a:	46bd      	mov	sp, r7
   8136c:	bd80      	pop	{r7, pc}
   8136e:	bf00      	nop
   81370:	40098000 	.word	0x40098000
   81374:	00082dfd 	.word	0x00082dfd
   81378:	00082591 	.word	0x00082591
   8137c:	20070460 	.word	0x20070460
   81380:	2007045c 	.word	0x2007045c
   81384:	00082e81 	.word	0x00082e81
   81388:	20070461 	.word	0x20070461
   8138c:	20070462 	.word	0x20070462
   81390:	20070470 	.word	0x20070470
   81394:	cccccccd 	.word	0xcccccccd
   81398:	20070464 	.word	0x20070464
   8139c:	000813a5 	.word	0x000813a5
   813a0:	00082e4d 	.word	0x00082e4d

000813a4 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   813a4:	b580      	push	{r7, lr}
   813a6:	b08a      	sub	sp, #40	; 0x28
   813a8:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   813aa:	2300      	movs	r3, #0
   813ac:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   813ae:	2301      	movs	r3, #1
   813b0:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   813b2:	2300      	movs	r3, #0
   813b4:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   813b6:	2301      	movs	r3, #1
   813b8:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   813ba:	2301      	movs	r3, #1
   813bc:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   813be:	2301      	movs	r3, #1
   813c0:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   813c2:	f240 1327 	movw	r3, #295	; 0x127
   813c6:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   813c8:	2319      	movs	r3, #25
   813ca:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   813cc:	4b7e      	ldr	r3, [pc, #504]	; (815c8 <check_command+0x224>)
   813ce:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   813d0:	6938      	ldr	r0, [r7, #16]
   813d2:	4b7e      	ldr	r3, [pc, #504]	; (815cc <check_command+0x228>)
   813d4:	4798      	blx	r3
   813d6:	4603      	mov	r3, r0
   813d8:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   813da:	4b7d      	ldr	r3, [pc, #500]	; (815d0 <check_command+0x22c>)
   813dc:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   813de:	6938      	ldr	r0, [r7, #16]
   813e0:	4b7a      	ldr	r3, [pc, #488]	; (815cc <check_command+0x228>)
   813e2:	4798      	blx	r3
   813e4:	4603      	mov	r3, r0
   813e6:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   813e8:	4b7a      	ldr	r3, [pc, #488]	; (815d4 <check_command+0x230>)
   813ea:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   813ec:	6938      	ldr	r0, [r7, #16]
   813ee:	4b77      	ldr	r3, [pc, #476]	; (815cc <check_command+0x228>)
   813f0:	4798      	blx	r3
   813f2:	4603      	mov	r3, r0
   813f4:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   813f6:	7ebb      	ldrb	r3, [r7, #26]
   813f8:	2b01      	cmp	r3, #1
   813fa:	f040 8088 	bne.w	8150e <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   813fe:	4b76      	ldr	r3, [pc, #472]	; (815d8 <check_command+0x234>)
   81400:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   81402:	e00d      	b.n	81420 <check_command+0x7c>
		{
			character = *message_array;
   81404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81406:	781b      	ldrb	r3, [r3, #0]
   81408:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8140a:	bf00      	nop
   8140c:	4873      	ldr	r0, [pc, #460]	; (815dc <check_command+0x238>)
   8140e:	6a39      	ldr	r1, [r7, #32]
   81410:	4b73      	ldr	r3, [pc, #460]	; (815e0 <check_command+0x23c>)
   81412:	4798      	blx	r3
   81414:	4603      	mov	r3, r0
   81416:	2b00      	cmp	r3, #0
   81418:	d1f8      	bne.n	8140c <check_command+0x68>
			
			message_array++;
   8141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8141c:	3301      	adds	r3, #1
   8141e:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   81420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81422:	781b      	ldrb	r3, [r3, #0]
   81424:	2b00      	cmp	r3, #0
   81426:	d1ed      	bne.n	81404 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   81428:	4b6e      	ldr	r3, [pc, #440]	; (815e4 <check_command+0x240>)
   8142a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   8142c:	e00d      	b.n	8144a <check_command+0xa6>
		{
			character = *message_array;
   8142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81430:	781b      	ldrb	r3, [r3, #0]
   81432:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81434:	bf00      	nop
   81436:	4869      	ldr	r0, [pc, #420]	; (815dc <check_command+0x238>)
   81438:	6a39      	ldr	r1, [r7, #32]
   8143a:	4b69      	ldr	r3, [pc, #420]	; (815e0 <check_command+0x23c>)
   8143c:	4798      	blx	r3
   8143e:	4603      	mov	r3, r0
   81440:	2b00      	cmp	r3, #0
   81442:	d1f8      	bne.n	81436 <check_command+0x92>
			
			message_array++;
   81444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81446:	3301      	adds	r3, #1
   81448:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   8144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8144c:	781b      	ldrb	r3, [r3, #0]
   8144e:	2b00      	cmp	r3, #0
   81450:	d1ed      	bne.n	8142e <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   81452:	4b65      	ldr	r3, [pc, #404]	; (815e8 <check_command+0x244>)
   81454:	681b      	ldr	r3, [r3, #0]
   81456:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   81458:	1d3b      	adds	r3, r7, #4
   8145a:	4618      	mov	r0, r3
   8145c:	4b63      	ldr	r3, [pc, #396]	; (815ec <check_command+0x248>)
   8145e:	4798      	blx	r3
   81460:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   81462:	687b      	ldr	r3, [r7, #4]
   81464:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   81466:	7dfb      	ldrb	r3, [r7, #23]
   81468:	4618      	mov	r0, r3
   8146a:	4b61      	ldr	r3, [pc, #388]	; (815f0 <check_command+0x24c>)
   8146c:	4798      	blx	r3
   8146e:	4603      	mov	r3, r0
   81470:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   81472:	7dfb      	ldrb	r3, [r7, #23]
   81474:	011b      	lsls	r3, r3, #4
   81476:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   81478:	7bfb      	ldrb	r3, [r7, #15]
   8147a:	091b      	lsrs	r3, r3, #4
   8147c:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   8147e:	7dfb      	ldrb	r3, [r7, #23]
   81480:	091b      	lsrs	r3, r3, #4
   81482:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   81484:	7bfb      	ldrb	r3, [r7, #15]
   81486:	3330      	adds	r3, #48	; 0x30
   81488:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   8148a:	7bbb      	ldrb	r3, [r7, #14]
   8148c:	3330      	adds	r3, #48	; 0x30
   8148e:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   81490:	69fb      	ldr	r3, [r7, #28]
   81492:	2b00      	cmp	r3, #0
   81494:	d00a      	beq.n	814ac <check_command+0x108>
		{
			character = 0x2B;
   81496:	232b      	movs	r3, #43	; 0x2b
   81498:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   8149a:	bf00      	nop
   8149c:	484f      	ldr	r0, [pc, #316]	; (815dc <check_command+0x238>)
   8149e:	6a39      	ldr	r1, [r7, #32]
   814a0:	4b4f      	ldr	r3, [pc, #316]	; (815e0 <check_command+0x23c>)
   814a2:	4798      	blx	r3
   814a4:	4603      	mov	r3, r0
   814a6:	2b00      	cmp	r3, #0
   814a8:	d1f8      	bne.n	8149c <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   814aa:	e009      	b.n	814c0 <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   814ac:	232d      	movs	r3, #45	; 0x2d
   814ae:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   814b0:	bf00      	nop
   814b2:	484a      	ldr	r0, [pc, #296]	; (815dc <check_command+0x238>)
   814b4:	6a39      	ldr	r1, [r7, #32]
   814b6:	4b4a      	ldr	r3, [pc, #296]	; (815e0 <check_command+0x23c>)
   814b8:	4798      	blx	r3
   814ba:	4603      	mov	r3, r0
   814bc:	2b00      	cmp	r3, #0
   814be:	d1f8      	bne.n	814b2 <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   814c0:	bf00      	nop
   814c2:	7bbb      	ldrb	r3, [r7, #14]
   814c4:	4845      	ldr	r0, [pc, #276]	; (815dc <check_command+0x238>)
   814c6:	4619      	mov	r1, r3
   814c8:	4b45      	ldr	r3, [pc, #276]	; (815e0 <check_command+0x23c>)
   814ca:	4798      	blx	r3
   814cc:	4603      	mov	r3, r0
   814ce:	2b00      	cmp	r3, #0
   814d0:	d1f7      	bne.n	814c2 <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   814d2:	bf00      	nop
   814d4:	7bfb      	ldrb	r3, [r7, #15]
   814d6:	4841      	ldr	r0, [pc, #260]	; (815dc <check_command+0x238>)
   814d8:	4619      	mov	r1, r3
   814da:	4b41      	ldr	r3, [pc, #260]	; (815e0 <check_command+0x23c>)
   814dc:	4798      	blx	r3
   814de:	4603      	mov	r3, r0
   814e0:	2b00      	cmp	r3, #0
   814e2:	d1f7      	bne.n	814d4 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   814e4:	4b43      	ldr	r3, [pc, #268]	; (815f4 <check_command+0x250>)
   814e6:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   814e8:	e00d      	b.n	81506 <check_command+0x162>
		{
			character = *message_array;
   814ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   814ec:	781b      	ldrb	r3, [r3, #0]
   814ee:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   814f0:	bf00      	nop
   814f2:	483a      	ldr	r0, [pc, #232]	; (815dc <check_command+0x238>)
   814f4:	6a39      	ldr	r1, [r7, #32]
   814f6:	4b3a      	ldr	r3, [pc, #232]	; (815e0 <check_command+0x23c>)
   814f8:	4798      	blx	r3
   814fa:	4603      	mov	r3, r0
   814fc:	2b00      	cmp	r3, #0
   814fe:	d1f8      	bne.n	814f2 <check_command+0x14e>
			
			message_array++;
   81500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81502:	3301      	adds	r3, #1
   81504:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   81506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81508:	781b      	ldrb	r3, [r3, #0]
   8150a:	2b00      	cmp	r3, #0
   8150c:	d1ed      	bne.n	814ea <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   8150e:	7e7b      	ldrb	r3, [r7, #25]
   81510:	2b01      	cmp	r3, #1
   81512:	d114      	bne.n	8153e <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   81514:	4b38      	ldr	r3, [pc, #224]	; (815f8 <check_command+0x254>)
   81516:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81518:	e00d      	b.n	81536 <check_command+0x192>
		{
			character = *message_array;
   8151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8151c:	781b      	ldrb	r3, [r3, #0]
   8151e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81520:	bf00      	nop
   81522:	482e      	ldr	r0, [pc, #184]	; (815dc <check_command+0x238>)
   81524:	6a39      	ldr	r1, [r7, #32]
   81526:	4b2e      	ldr	r3, [pc, #184]	; (815e0 <check_command+0x23c>)
   81528:	4798      	blx	r3
   8152a:	4603      	mov	r3, r0
   8152c:	2b00      	cmp	r3, #0
   8152e:	d1f8      	bne.n	81522 <check_command+0x17e>
			
			message_array++;
   81530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81532:	3301      	adds	r3, #1
   81534:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   81536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81538:	781b      	ldrb	r3, [r3, #0]
   8153a:	2b00      	cmp	r3, #0
   8153c:	d1ed      	bne.n	8151a <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   8153e:	7e3b      	ldrb	r3, [r7, #24]
   81540:	2b01      	cmp	r3, #1
   81542:	d13d      	bne.n	815c0 <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   81544:	4b2d      	ldr	r3, [pc, #180]	; (815fc <check_command+0x258>)
   81546:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81548:	e00d      	b.n	81566 <check_command+0x1c2>
		{
			character = *message_array;
   8154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8154c:	781b      	ldrb	r3, [r3, #0]
   8154e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81550:	bf00      	nop
   81552:	4822      	ldr	r0, [pc, #136]	; (815dc <check_command+0x238>)
   81554:	6a39      	ldr	r1, [r7, #32]
   81556:	4b22      	ldr	r3, [pc, #136]	; (815e0 <check_command+0x23c>)
   81558:	4798      	blx	r3
   8155a:	4603      	mov	r3, r0
   8155c:	2b00      	cmp	r3, #0
   8155e:	d1f8      	bne.n	81552 <check_command+0x1ae>
			
			message_array++;
   81560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81562:	3301      	adds	r3, #1
   81564:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   81566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81568:	781b      	ldrb	r3, [r3, #0]
   8156a:	2b00      	cmp	r3, #0
   8156c:	d1ed      	bne.n	8154a <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   8156e:	4b24      	ldr	r3, [pc, #144]	; (81600 <check_command+0x25c>)
   81570:	681b      	ldr	r3, [r3, #0]
   81572:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   81574:	68bb      	ldr	r3, [r7, #8]
   81576:	b2db      	uxtb	r3, r3
   81578:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   8157a:	68bb      	ldr	r3, [r7, #8]
   8157c:	2b40      	cmp	r3, #64	; 0x40
   8157e:	d802      	bhi.n	81586 <check_command+0x1e2>
   81580:	68bb      	ldr	r3, [r7, #8]
   81582:	2b5a      	cmp	r3, #90	; 0x5a
   81584:	d807      	bhi.n	81596 <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   81586:	bf00      	nop
   81588:	4814      	ldr	r0, [pc, #80]	; (815dc <check_command+0x238>)
   8158a:	68b9      	ldr	r1, [r7, #8]
   8158c:	4b14      	ldr	r3, [pc, #80]	; (815e0 <check_command+0x23c>)
   8158e:	4798      	blx	r3
   81590:	4603      	mov	r3, r0
   81592:	2b00      	cmp	r3, #0
   81594:	d1f8      	bne.n	81588 <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   81596:	4b1b      	ldr	r3, [pc, #108]	; (81604 <check_command+0x260>)
   81598:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   8159a:	e00d      	b.n	815b8 <check_command+0x214>
		{
			character = *message_array;
   8159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8159e:	781b      	ldrb	r3, [r3, #0]
   815a0:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   815a2:	bf00      	nop
   815a4:	480d      	ldr	r0, [pc, #52]	; (815dc <check_command+0x238>)
   815a6:	6a39      	ldr	r1, [r7, #32]
   815a8:	4b0d      	ldr	r3, [pc, #52]	; (815e0 <check_command+0x23c>)
   815aa:	4798      	blx	r3
   815ac:	4603      	mov	r3, r0
   815ae:	2b00      	cmp	r3, #0
   815b0:	d1f8      	bne.n	815a4 <check_command+0x200>
			
			message_array++;
   815b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   815b4:	3301      	adds	r3, #1
   815b6:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   815b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   815ba:	781b      	ldrb	r3, [r3, #0]
   815bc:	2b00      	cmp	r3, #0
   815be:	d1ed      	bne.n	8159c <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   815c0:	bf00      	nop
}
   815c2:	3728      	adds	r7, #40	; 0x28
   815c4:	46bd      	mov	sp, r7
   815c6:	bd80      	pop	{r7, pc}
   815c8:	00086f44 	.word	0x00086f44
   815cc:	00081609 	.word	0x00081609
   815d0:	00086f48 	.word	0x00086f48
   815d4:	00086f54 	.word	0x00086f54
   815d8:	00086f58 	.word	0x00086f58
   815dc:	40098000 	.word	0x40098000
   815e0:	00082e4d 	.word	0x00082e4d
   815e4:	00086f78 	.word	0x00086f78
   815e8:	2007a644 	.word	0x2007a644
   815ec:	00081665 	.word	0x00081665
   815f0:	000816fd 	.word	0x000816fd
   815f4:	00086f94 	.word	0x00086f94
   815f8:	00086f9c 	.word	0x00086f9c
   815fc:	00086fb8 	.word	0x00086fb8
   81600:	2007a6f4 	.word	0x2007a6f4
   81604:	00086fe0 	.word	0x00086fe0

00081608 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   81608:	b480      	push	{r7}
   8160a:	b085      	sub	sp, #20
   8160c:	af00      	add	r7, sp, #0
   8160e:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   81610:	2300      	movs	r3, #0
   81612:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   81614:	2301      	movs	r3, #1
   81616:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   81618:	687b      	ldr	r3, [r7, #4]
   8161a:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   8161c:	2300      	movs	r3, #0
   8161e:	73fb      	strb	r3, [r7, #15]
   81620:	e014      	b.n	8164c <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   81622:	68bb      	ldr	r3, [r7, #8]
   81624:	781a      	ldrb	r2, [r3, #0]
   81626:	7bfb      	ldrb	r3, [r7, #15]
   81628:	490d      	ldr	r1, [pc, #52]	; (81660 <check_string+0x58>)
   8162a:	5ccb      	ldrb	r3, [r1, r3]
   8162c:	429a      	cmp	r2, r3
   8162e:	d002      	beq.n	81636 <check_string+0x2e>
		{
			ret_val = 0;
   81630:	2300      	movs	r3, #0
   81632:	73bb      	strb	r3, [r7, #14]
			break;
   81634:	e00d      	b.n	81652 <check_string+0x4a>
		}
		if (!*temp_str)
   81636:	68bb      	ldr	r3, [r7, #8]
   81638:	781b      	ldrb	r3, [r3, #0]
   8163a:	2b00      	cmp	r3, #0
   8163c:	d100      	bne.n	81640 <check_string+0x38>
			break;
   8163e:	e008      	b.n	81652 <check_string+0x4a>
			
		temp_str++;
   81640:	68bb      	ldr	r3, [r7, #8]
   81642:	3301      	adds	r3, #1
   81644:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   81646:	7bfb      	ldrb	r3, [r7, #15]
   81648:	3301      	adds	r3, #1
   8164a:	73fb      	strb	r3, [r7, #15]
   8164c:	7bfb      	ldrb	r3, [r7, #15]
   8164e:	2b09      	cmp	r3, #9
   81650:	d9e7      	bls.n	81622 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   81652:	7bbb      	ldrb	r3, [r7, #14]
}
   81654:	4618      	mov	r0, r3
   81656:	3714      	adds	r7, #20
   81658:	46bd      	mov	sp, r7
   8165a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8165e:	4770      	bx	lr
   81660:	20070464 	.word	0x20070464

00081664 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   81664:	b580      	push	{r7, lr}
   81666:	b084      	sub	sp, #16
   81668:	af00      	add	r7, sp, #0
   8166a:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   8166c:	f04f 0300 	mov.w	r3, #0
   81670:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   81672:	687b      	ldr	r3, [r7, #4]
   81674:	681b      	ldr	r3, [r3, #0]
   81676:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   81678:	68bb      	ldr	r3, [r7, #8]
   8167a:	089b      	lsrs	r3, r3, #2
   8167c:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   8167e:	4b1b      	ldr	r3, [pc, #108]	; (816ec <convert_to_temp+0x88>)
   81680:	68b8      	ldr	r0, [r7, #8]
   81682:	4798      	blx	r3
   81684:	4603      	mov	r3, r0
   81686:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   81688:	4b19      	ldr	r3, [pc, #100]	; (816f0 <convert_to_temp+0x8c>)
   8168a:	68f8      	ldr	r0, [r7, #12]
   8168c:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   81690:	4798      	blx	r3
   81692:	4603      	mov	r3, r0
   81694:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   81696:	4b17      	ldr	r3, [pc, #92]	; (816f4 <convert_to_temp+0x90>)
   81698:	68f8      	ldr	r0, [r7, #12]
   8169a:	f04f 0100 	mov.w	r1, #0
   8169e:	4798      	blx	r3
   816a0:	4603      	mov	r3, r0
   816a2:	2b00      	cmp	r3, #0
   816a4:	d009      	beq.n	816ba <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   816a6:	4b14      	ldr	r3, [pc, #80]	; (816f8 <convert_to_temp+0x94>)
   816a8:	68f8      	ldr	r0, [r7, #12]
   816aa:	4798      	blx	r3
   816ac:	4603      	mov	r3, r0
   816ae:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   816b0:	687b      	ldr	r3, [r7, #4]
   816b2:	68ba      	ldr	r2, [r7, #8]
   816b4:	601a      	str	r2, [r3, #0]
		return 1;	
   816b6:	2301      	movs	r3, #1
   816b8:	e013      	b.n	816e2 <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   816ba:	4b0c      	ldr	r3, [pc, #48]	; (816ec <convert_to_temp+0x88>)
   816bc:	68b8      	ldr	r0, [r7, #8]
   816be:	4798      	blx	r3
   816c0:	4603      	mov	r3, r0
   816c2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   816c6:	4b0c      	ldr	r3, [pc, #48]	; (816f8 <convert_to_temp+0x94>)
   816c8:	4610      	mov	r0, r2
   816ca:	4798      	blx	r3
   816cc:	4603      	mov	r3, r0
   816ce:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   816d0:	4b09      	ldr	r3, [pc, #36]	; (816f8 <convert_to_temp+0x94>)
   816d2:	68f8      	ldr	r0, [r7, #12]
   816d4:	4798      	blx	r3
   816d6:	4603      	mov	r3, r0
   816d8:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   816da:	687b      	ldr	r3, [r7, #4]
   816dc:	68ba      	ldr	r2, [r7, #8]
   816de:	601a      	str	r2, [r3, #0]
		return 0;
   816e0:	2300      	movs	r3, #0
	}
}
   816e2:	4618      	mov	r0, r3
   816e4:	3710      	adds	r7, #16
   816e6:	46bd      	mov	sp, r7
   816e8:	bd80      	pop	{r7, pc}
   816ea:	bf00      	nop
   816ec:	0008677d 	.word	0x0008677d
   816f0:	0008682d 	.word	0x0008682d
   816f4:	00086b91 	.word	0x00086b91
   816f8:	00086bb9 	.word	0x00086bb9

000816fc <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   816fc:	b480      	push	{r7}
   816fe:	b085      	sub	sp, #20
   81700:	af00      	add	r7, sp, #0
   81702:	4603      	mov	r3, r0
   81704:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   81706:	2300      	movs	r3, #0
   81708:	73fb      	strb	r3, [r7, #15]
   8170a:	2300      	movs	r3, #0
   8170c:	73bb      	strb	r3, [r7, #14]
   8170e:	2300      	movs	r3, #0
   81710:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   81712:	79fb      	ldrb	r3, [r7, #7]
   81714:	2b09      	cmp	r3, #9
   81716:	d919      	bls.n	8174c <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   81718:	79fa      	ldrb	r2, [r7, #7]
   8171a:	4b10      	ldr	r3, [pc, #64]	; (8175c <convert_to_bcd+0x60>)
   8171c:	fba3 1302 	umull	r1, r3, r3, r2
   81720:	08d9      	lsrs	r1, r3, #3
   81722:	460b      	mov	r3, r1
   81724:	009b      	lsls	r3, r3, #2
   81726:	440b      	add	r3, r1
   81728:	005b      	lsls	r3, r3, #1
   8172a:	1ad3      	subs	r3, r2, r3
   8172c:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   8172e:	79fa      	ldrb	r2, [r7, #7]
   81730:	4b0a      	ldr	r3, [pc, #40]	; (8175c <convert_to_bcd+0x60>)
   81732:	fba3 1302 	umull	r1, r3, r3, r2
   81736:	08db      	lsrs	r3, r3, #3
   81738:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   8173a:	7bfb      	ldrb	r3, [r7, #15]
   8173c:	011b      	lsls	r3, r3, #4
   8173e:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   81740:	7bfa      	ldrb	r2, [r7, #15]
   81742:	7bbb      	ldrb	r3, [r7, #14]
   81744:	4313      	orrs	r3, r2
   81746:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   81748:	7b7b      	ldrb	r3, [r7, #13]
   8174a:	e000      	b.n	8174e <convert_to_bcd+0x52>
	}
	else
		return temp;
   8174c:	79fb      	ldrb	r3, [r7, #7]
}
   8174e:	4618      	mov	r0, r3
   81750:	3714      	adds	r7, #20
   81752:	46bd      	mov	sp, r7
   81754:	f85d 7b04 	ldr.w	r7, [sp], #4
   81758:	4770      	bx	lr
   8175a:	bf00      	nop
   8175c:	cccccccd 	.word	0xcccccccd

00081760 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   81760:	b5b0      	push	{r4, r5, r7, lr}
   81762:	b086      	sub	sp, #24
   81764:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   81766:	4b13      	ldr	r3, [pc, #76]	; (817b4 <configure_usart+0x54>)
   81768:	463c      	mov	r4, r7
   8176a:	461d      	mov	r5, r3
   8176c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8176e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81770:	e895 0003 	ldmia.w	r5, {r0, r1}
   81774:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   81778:	2011      	movs	r0, #17
   8177a:	4b0f      	ldr	r3, [pc, #60]	; (817b8 <configure_usart+0x58>)
   8177c:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   8177e:	4b0f      	ldr	r3, [pc, #60]	; (817bc <configure_usart+0x5c>)
   81780:	4798      	blx	r3
   81782:	4603      	mov	r3, r0
   81784:	463a      	mov	r2, r7
   81786:	480e      	ldr	r0, [pc, #56]	; (817c0 <configure_usart+0x60>)
   81788:	4611      	mov	r1, r2
   8178a:	461a      	mov	r2, r3
   8178c:	4b0d      	ldr	r3, [pc, #52]	; (817c4 <configure_usart+0x64>)
   8178e:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   81790:	480b      	ldr	r0, [pc, #44]	; (817c0 <configure_usart+0x60>)
   81792:	f04f 31ff 	mov.w	r1, #4294967295
   81796:	4b0c      	ldr	r3, [pc, #48]	; (817c8 <configure_usart+0x68>)
   81798:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   8179a:	4809      	ldr	r0, [pc, #36]	; (817c0 <configure_usart+0x60>)
   8179c:	4b0b      	ldr	r3, [pc, #44]	; (817cc <configure_usart+0x6c>)
   8179e:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   817a0:	4807      	ldr	r0, [pc, #28]	; (817c0 <configure_usart+0x60>)
   817a2:	4b0b      	ldr	r3, [pc, #44]	; (817d0 <configure_usart+0x70>)
   817a4:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   817a6:	2011      	movs	r0, #17
   817a8:	4b0a      	ldr	r3, [pc, #40]	; (817d4 <configure_usart+0x74>)
   817aa:	4798      	blx	r3
}
   817ac:	3718      	adds	r7, #24
   817ae:	46bd      	mov	sp, r7
   817b0:	bdb0      	pop	{r4, r5, r7, pc}
   817b2:	bf00      	nop
   817b4:	00086fe4 	.word	0x00086fe4
   817b8:	00081255 	.word	0x00081255
   817bc:	00081241 	.word	0x00081241
   817c0:	40098000 	.word	0x40098000
   817c4:	00082ce1 	.word	0x00082ce1
   817c8:	00082de1 	.word	0x00082de1
   817cc:	00082d65 	.word	0x00082d65
   817d0:	00082d95 	.word	0x00082d95
   817d4:	00081181 	.word	0x00081181

000817d8 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   817d8:	b580      	push	{r7, lr}
   817da:	b084      	sub	sp, #16
   817dc:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   817de:	2300      	movs	r3, #0
   817e0:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   817e2:	2300      	movs	r3, #0
   817e4:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   817e6:	4b1a      	ldr	r3, [pc, #104]	; (81850 <usart_initialize+0x78>)
   817e8:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   817ea:	4b1a      	ldr	r3, [pc, #104]	; (81854 <usart_initialize+0x7c>)
   817ec:	2200      	movs	r2, #0
   817ee:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   817f0:	2300      	movs	r3, #0
   817f2:	73fb      	strb	r3, [r7, #15]
   817f4:	e006      	b.n	81804 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   817f6:	7bfb      	ldrb	r3, [r7, #15]
   817f8:	4a17      	ldr	r2, [pc, #92]	; (81858 <usart_initialize+0x80>)
   817fa:	2100      	movs	r1, #0
   817fc:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   817fe:	7bfb      	ldrb	r3, [r7, #15]
   81800:	3301      	adds	r3, #1
   81802:	73fb      	strb	r3, [r7, #15]
   81804:	7bfb      	ldrb	r3, [r7, #15]
   81806:	2b09      	cmp	r3, #9
   81808:	d9f5      	bls.n	817f6 <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   8180a:	4814      	ldr	r0, [pc, #80]	; (8185c <usart_initialize+0x84>)
   8180c:	2101      	movs	r1, #1
   8180e:	4b14      	ldr	r3, [pc, #80]	; (81860 <usart_initialize+0x88>)
   81810:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   81812:	4812      	ldr	r0, [pc, #72]	; (8185c <usart_initialize+0x84>)
   81814:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81818:	4b12      	ldr	r3, [pc, #72]	; (81864 <usart_initialize+0x8c>)
   8181a:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   8181c:	4b12      	ldr	r3, [pc, #72]	; (81868 <usart_initialize+0x90>)
   8181e:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   81820:	e00d      	b.n	8183e <usart_initialize+0x66>
	{
		character = *message_array;
   81822:	68bb      	ldr	r3, [r7, #8]
   81824:	781b      	ldrb	r3, [r3, #0]
   81826:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   81828:	bf00      	nop
   8182a:	480c      	ldr	r0, [pc, #48]	; (8185c <usart_initialize+0x84>)
   8182c:	6879      	ldr	r1, [r7, #4]
   8182e:	4b0f      	ldr	r3, [pc, #60]	; (8186c <usart_initialize+0x94>)
   81830:	4798      	blx	r3
   81832:	4603      	mov	r3, r0
   81834:	2b00      	cmp	r3, #0
   81836:	d1f8      	bne.n	8182a <usart_initialize+0x52>
			
		message_array++;
   81838:	68bb      	ldr	r3, [r7, #8]
   8183a:	3301      	adds	r3, #1
   8183c:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   8183e:	68bb      	ldr	r3, [r7, #8]
   81840:	781b      	ldrb	r3, [r3, #0]
   81842:	2b00      	cmp	r3, #0
   81844:	d1ed      	bne.n	81822 <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   81846:	bf00      	nop
}
   81848:	3710      	adds	r7, #16
   8184a:	46bd      	mov	sp, r7
   8184c:	bd80      	pop	{r7, pc}
   8184e:	bf00      	nop
   81850:	00081761 	.word	0x00081761
   81854:	20070460 	.word	0x20070460
   81858:	20070464 	.word	0x20070464
   8185c:	40098000 	.word	0x40098000
   81860:	00082dc5 	.word	0x00082dc5
   81864:	00082de1 	.word	0x00082de1
   81868:	00086ffc 	.word	0x00086ffc
   8186c:	00082e4d 	.word	0x00082e4d

00081870 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   81870:	b580      	push	{r7, lr}
   81872:	b082      	sub	sp, #8
   81874:	af00      	add	r7, sp, #0
   81876:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81878:	687b      	ldr	r3, [r7, #4]
   8187a:	2b07      	cmp	r3, #7
   8187c:	d82e      	bhi.n	818dc <osc_enable+0x6c>
   8187e:	a201      	add	r2, pc, #4	; (adr r2, 81884 <osc_enable+0x14>)
   81880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81884:	000818dd 	.word	0x000818dd
   81888:	000818a5 	.word	0x000818a5
   8188c:	000818ad 	.word	0x000818ad
   81890:	000818b5 	.word	0x000818b5
   81894:	000818bd 	.word	0x000818bd
   81898:	000818c5 	.word	0x000818c5
   8189c:	000818cd 	.word	0x000818cd
   818a0:	000818d5 	.word	0x000818d5
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   818a4:	2000      	movs	r0, #0
   818a6:	4b0f      	ldr	r3, [pc, #60]	; (818e4 <osc_enable+0x74>)
   818a8:	4798      	blx	r3
		break;
   818aa:	e017      	b.n	818dc <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   818ac:	2001      	movs	r0, #1
   818ae:	4b0d      	ldr	r3, [pc, #52]	; (818e4 <osc_enable+0x74>)
   818b0:	4798      	blx	r3
		break;
   818b2:	e013      	b.n	818dc <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   818b4:	2000      	movs	r0, #0
   818b6:	4b0c      	ldr	r3, [pc, #48]	; (818e8 <osc_enable+0x78>)
   818b8:	4798      	blx	r3
		break;
   818ba:	e00f      	b.n	818dc <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   818bc:	2010      	movs	r0, #16
   818be:	4b0a      	ldr	r3, [pc, #40]	; (818e8 <osc_enable+0x78>)
   818c0:	4798      	blx	r3
		break;
   818c2:	e00b      	b.n	818dc <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   818c4:	2020      	movs	r0, #32
   818c6:	4b08      	ldr	r3, [pc, #32]	; (818e8 <osc_enable+0x78>)
   818c8:	4798      	blx	r3
		break;
   818ca:	e007      	b.n	818dc <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   818cc:	2000      	movs	r0, #0
   818ce:	4b07      	ldr	r3, [pc, #28]	; (818ec <osc_enable+0x7c>)
   818d0:	4798      	blx	r3
		break;
   818d2:	e003      	b.n	818dc <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   818d4:	2001      	movs	r0, #1
   818d6:	4b05      	ldr	r3, [pc, #20]	; (818ec <osc_enable+0x7c>)
   818d8:	4798      	blx	r3
		break;
   818da:	bf00      	nop
	}
}
   818dc:	3708      	adds	r7, #8
   818de:	46bd      	mov	sp, r7
   818e0:	bd80      	pop	{r7, pc}
   818e2:	bf00      	nop
   818e4:	00082995 	.word	0x00082995
   818e8:	00082a05 	.word	0x00082a05
   818ec:	00082aa5 	.word	0x00082aa5

000818f0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   818f0:	b580      	push	{r7, lr}
   818f2:	b082      	sub	sp, #8
   818f4:	af00      	add	r7, sp, #0
   818f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   818f8:	687b      	ldr	r3, [r7, #4]
   818fa:	2b07      	cmp	r3, #7
   818fc:	d826      	bhi.n	8194c <osc_is_ready+0x5c>
   818fe:	a201      	add	r2, pc, #4	; (adr r2, 81904 <osc_is_ready+0x14>)
   81900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81904:	00081925 	.word	0x00081925
   81908:	00081929 	.word	0x00081929
   8190c:	00081929 	.word	0x00081929
   81910:	0008193b 	.word	0x0008193b
   81914:	0008193b 	.word	0x0008193b
   81918:	0008193b 	.word	0x0008193b
   8191c:	0008193b 	.word	0x0008193b
   81920:	0008193b 	.word	0x0008193b
	case OSC_SLCK_32K_RC:
		return 1;
   81924:	2301      	movs	r3, #1
   81926:	e012      	b.n	8194e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   81928:	4b0b      	ldr	r3, [pc, #44]	; (81958 <osc_is_ready+0x68>)
   8192a:	4798      	blx	r3
   8192c:	4603      	mov	r3, r0
   8192e:	2b00      	cmp	r3, #0
   81930:	bf0c      	ite	eq
   81932:	2300      	moveq	r3, #0
   81934:	2301      	movne	r3, #1
   81936:	b2db      	uxtb	r3, r3
   81938:	e009      	b.n	8194e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8193a:	4b08      	ldr	r3, [pc, #32]	; (8195c <osc_is_ready+0x6c>)
   8193c:	4798      	blx	r3
   8193e:	4603      	mov	r3, r0
   81940:	2b00      	cmp	r3, #0
   81942:	bf0c      	ite	eq
   81944:	2300      	moveq	r3, #0
   81946:	2301      	movne	r3, #1
   81948:	b2db      	uxtb	r3, r3
   8194a:	e000      	b.n	8194e <osc_is_ready+0x5e>
	}

	return 0;
   8194c:	2300      	movs	r3, #0
}
   8194e:	4618      	mov	r0, r3
   81950:	3708      	adds	r7, #8
   81952:	46bd      	mov	sp, r7
   81954:	bd80      	pop	{r7, pc}
   81956:	bf00      	nop
   81958:	000829d1 	.word	0x000829d1
   8195c:	00082b11 	.word	0x00082b11

00081960 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81960:	b480      	push	{r7}
   81962:	b083      	sub	sp, #12
   81964:	af00      	add	r7, sp, #0
   81966:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81968:	687b      	ldr	r3, [r7, #4]
   8196a:	2b07      	cmp	r3, #7
   8196c:	d825      	bhi.n	819ba <osc_get_rate+0x5a>
   8196e:	a201      	add	r2, pc, #4	; (adr r2, 81974 <osc_get_rate+0x14>)
   81970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81974:	00081995 	.word	0x00081995
   81978:	0008199b 	.word	0x0008199b
   8197c:	000819a1 	.word	0x000819a1
   81980:	000819a7 	.word	0x000819a7
   81984:	000819ab 	.word	0x000819ab
   81988:	000819af 	.word	0x000819af
   8198c:	000819b3 	.word	0x000819b3
   81990:	000819b7 	.word	0x000819b7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81994:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81998:	e010      	b.n	819bc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8199a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8199e:	e00d      	b.n	819bc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   819a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   819a4:	e00a      	b.n	819bc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   819a6:	4b08      	ldr	r3, [pc, #32]	; (819c8 <osc_get_rate+0x68>)
   819a8:	e008      	b.n	819bc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   819aa:	4b08      	ldr	r3, [pc, #32]	; (819cc <osc_get_rate+0x6c>)
   819ac:	e006      	b.n	819bc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   819ae:	4b08      	ldr	r3, [pc, #32]	; (819d0 <osc_get_rate+0x70>)
   819b0:	e004      	b.n	819bc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   819b2:	4b07      	ldr	r3, [pc, #28]	; (819d0 <osc_get_rate+0x70>)
   819b4:	e002      	b.n	819bc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   819b6:	4b06      	ldr	r3, [pc, #24]	; (819d0 <osc_get_rate+0x70>)
   819b8:	e000      	b.n	819bc <osc_get_rate+0x5c>
#endif
	}

	return 0;
   819ba:	2300      	movs	r3, #0
}
   819bc:	4618      	mov	r0, r3
   819be:	370c      	adds	r7, #12
   819c0:	46bd      	mov	sp, r7
   819c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   819c6:	4770      	bx	lr
   819c8:	003d0900 	.word	0x003d0900
   819cc:	007a1200 	.word	0x007a1200
   819d0:	00b71b00 	.word	0x00b71b00

000819d4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   819d4:	b580      	push	{r7, lr}
   819d6:	b082      	sub	sp, #8
   819d8:	af00      	add	r7, sp, #0
   819da:	4603      	mov	r3, r0
   819dc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   819de:	bf00      	nop
   819e0:	79fb      	ldrb	r3, [r7, #7]
   819e2:	4618      	mov	r0, r3
   819e4:	4b05      	ldr	r3, [pc, #20]	; (819fc <osc_wait_ready+0x28>)
   819e6:	4798      	blx	r3
   819e8:	4603      	mov	r3, r0
   819ea:	f083 0301 	eor.w	r3, r3, #1
   819ee:	b2db      	uxtb	r3, r3
   819f0:	2b00      	cmp	r3, #0
   819f2:	d1f5      	bne.n	819e0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   819f4:	3708      	adds	r7, #8
   819f6:	46bd      	mov	sp, r7
   819f8:	bd80      	pop	{r7, pc}
   819fa:	bf00      	nop
   819fc:	000818f1 	.word	0x000818f1

00081a00 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   81a00:	b580      	push	{r7, lr}
   81a02:	b086      	sub	sp, #24
   81a04:	af00      	add	r7, sp, #0
   81a06:	60f8      	str	r0, [r7, #12]
   81a08:	607a      	str	r2, [r7, #4]
   81a0a:	603b      	str	r3, [r7, #0]
   81a0c:	460b      	mov	r3, r1
   81a0e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   81a10:	687b      	ldr	r3, [r7, #4]
   81a12:	2b00      	cmp	r3, #0
   81a14:	d107      	bne.n	81a26 <pll_config_init+0x26>
   81a16:	683b      	ldr	r3, [r7, #0]
   81a18:	2b00      	cmp	r3, #0
   81a1a:	d104      	bne.n	81a26 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81a1c:	68fb      	ldr	r3, [r7, #12]
   81a1e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   81a22:	601a      	str	r2, [r3, #0]
   81a24:	e019      	b.n	81a5a <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   81a26:	7afb      	ldrb	r3, [r7, #11]
   81a28:	4618      	mov	r0, r3
   81a2a:	4b0d      	ldr	r3, [pc, #52]	; (81a60 <pll_config_init+0x60>)
   81a2c:	4798      	blx	r3
   81a2e:	4602      	mov	r2, r0
   81a30:	687b      	ldr	r3, [r7, #4]
   81a32:	fbb2 f3f3 	udiv	r3, r2, r3
   81a36:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   81a38:	697b      	ldr	r3, [r7, #20]
   81a3a:	683a      	ldr	r2, [r7, #0]
   81a3c:	fb02 f303 	mul.w	r3, r2, r3
   81a40:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   81a42:	683b      	ldr	r3, [r7, #0]
   81a44:	3b01      	subs	r3, #1
   81a46:	041a      	lsls	r2, r3, #16
   81a48:	4b06      	ldr	r3, [pc, #24]	; (81a64 <pll_config_init+0x64>)
   81a4a:	4013      	ands	r3, r2
   81a4c:	687a      	ldr	r2, [r7, #4]
   81a4e:	b2d2      	uxtb	r2, r2
   81a50:	4313      	orrs	r3, r2
   81a52:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   81a56:	68fb      	ldr	r3, [r7, #12]
   81a58:	601a      	str	r2, [r3, #0]
	}
}
   81a5a:	3718      	adds	r7, #24
   81a5c:	46bd      	mov	sp, r7
   81a5e:	bd80      	pop	{r7, pc}
   81a60:	00081961 	.word	0x00081961
   81a64:	07ff0000 	.word	0x07ff0000

00081a68 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   81a68:	b580      	push	{r7, lr}
   81a6a:	b082      	sub	sp, #8
   81a6c:	af00      	add	r7, sp, #0
   81a6e:	6078      	str	r0, [r7, #4]
   81a70:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   81a72:	683b      	ldr	r3, [r7, #0]
   81a74:	2b00      	cmp	r3, #0
   81a76:	d108      	bne.n	81a8a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   81a78:	4b08      	ldr	r3, [pc, #32]	; (81a9c <pll_enable+0x34>)
   81a7a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81a7c:	4b08      	ldr	r3, [pc, #32]	; (81aa0 <pll_enable+0x38>)
   81a7e:	687a      	ldr	r2, [r7, #4]
   81a80:	6812      	ldr	r2, [r2, #0]
   81a82:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a86:	629a      	str	r2, [r3, #40]	; 0x28
   81a88:	e005      	b.n	81a96 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   81a8a:	4b05      	ldr	r3, [pc, #20]	; (81aa0 <pll_enable+0x38>)
   81a8c:	687a      	ldr	r2, [r7, #4]
   81a8e:	6812      	ldr	r2, [r2, #0]
   81a90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   81a94:	61da      	str	r2, [r3, #28]
	}
}
   81a96:	3708      	adds	r7, #8
   81a98:	46bd      	mov	sp, r7
   81a9a:	bd80      	pop	{r7, pc}
   81a9c:	00082b2d 	.word	0x00082b2d
   81aa0:	400e0600 	.word	0x400e0600

00081aa4 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   81aa4:	b580      	push	{r7, lr}
   81aa6:	b082      	sub	sp, #8
   81aa8:	af00      	add	r7, sp, #0
   81aaa:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   81aac:	687b      	ldr	r3, [r7, #4]
   81aae:	2b00      	cmp	r3, #0
   81ab0:	d103      	bne.n	81aba <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   81ab2:	4b05      	ldr	r3, [pc, #20]	; (81ac8 <pll_is_locked+0x24>)
   81ab4:	4798      	blx	r3
   81ab6:	4603      	mov	r3, r0
   81ab8:	e002      	b.n	81ac0 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   81aba:	4b04      	ldr	r3, [pc, #16]	; (81acc <pll_is_locked+0x28>)
   81abc:	4798      	blx	r3
   81abe:	4603      	mov	r3, r0
}
   81ac0:	4618      	mov	r0, r3
   81ac2:	3708      	adds	r7, #8
   81ac4:	46bd      	mov	sp, r7
   81ac6:	bd80      	pop	{r7, pc}
   81ac8:	00082b45 	.word	0x00082b45
   81acc:	00082b61 	.word	0x00082b61

00081ad0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   81ad0:	b580      	push	{r7, lr}
   81ad2:	b082      	sub	sp, #8
   81ad4:	af00      	add	r7, sp, #0
   81ad6:	4603      	mov	r3, r0
   81ad8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   81ada:	79fb      	ldrb	r3, [r7, #7]
   81adc:	3b03      	subs	r3, #3
   81ade:	2b04      	cmp	r3, #4
   81ae0:	d808      	bhi.n	81af4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   81ae2:	79fb      	ldrb	r3, [r7, #7]
   81ae4:	4618      	mov	r0, r3
   81ae6:	4b05      	ldr	r3, [pc, #20]	; (81afc <pll_enable_source+0x2c>)
   81ae8:	4798      	blx	r3
		osc_wait_ready(e_src);
   81aea:	79fb      	ldrb	r3, [r7, #7]
   81aec:	4618      	mov	r0, r3
   81aee:	4b04      	ldr	r3, [pc, #16]	; (81b00 <pll_enable_source+0x30>)
   81af0:	4798      	blx	r3
		break;
   81af2:	e000      	b.n	81af6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   81af4:	bf00      	nop
	}
}
   81af6:	3708      	adds	r7, #8
   81af8:	46bd      	mov	sp, r7
   81afa:	bd80      	pop	{r7, pc}
   81afc:	00081871 	.word	0x00081871
   81b00:	000819d5 	.word	0x000819d5

00081b04 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   81b04:	b580      	push	{r7, lr}
   81b06:	b082      	sub	sp, #8
   81b08:	af00      	add	r7, sp, #0
   81b0a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81b0c:	bf00      	nop
   81b0e:	6878      	ldr	r0, [r7, #4]
   81b10:	4b04      	ldr	r3, [pc, #16]	; (81b24 <pll_wait_for_lock+0x20>)
   81b12:	4798      	blx	r3
   81b14:	4603      	mov	r3, r0
   81b16:	2b00      	cmp	r3, #0
   81b18:	d0f9      	beq.n	81b0e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   81b1a:	2300      	movs	r3, #0
}
   81b1c:	4618      	mov	r0, r3
   81b1e:	3708      	adds	r7, #8
   81b20:	46bd      	mov	sp, r7
   81b22:	bd80      	pop	{r7, pc}
   81b24:	00081aa5 	.word	0x00081aa5

00081b28 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81b28:	b580      	push	{r7, lr}
   81b2a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81b2c:	2006      	movs	r0, #6
   81b2e:	4b04      	ldr	r3, [pc, #16]	; (81b40 <sysclk_get_main_hz+0x18>)
   81b30:	4798      	blx	r3
   81b32:	4602      	mov	r2, r0
   81b34:	4613      	mov	r3, r2
   81b36:	00db      	lsls	r3, r3, #3
   81b38:	1a9b      	subs	r3, r3, r2
   81b3a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81b3c:	4618      	mov	r0, r3
   81b3e:	bd80      	pop	{r7, pc}
   81b40:	00081961 	.word	0x00081961

00081b44 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81b44:	b580      	push	{r7, lr}
   81b46:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81b48:	4b02      	ldr	r3, [pc, #8]	; (81b54 <sysclk_get_cpu_hz+0x10>)
   81b4a:	4798      	blx	r3
   81b4c:	4603      	mov	r3, r0
   81b4e:	085b      	lsrs	r3, r3, #1
}
   81b50:	4618      	mov	r0, r3
   81b52:	bd80      	pop	{r7, pc}
   81b54:	00081b29 	.word	0x00081b29

00081b58 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81b58:	b590      	push	{r4, r7, lr}
   81b5a:	b083      	sub	sp, #12
   81b5c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81b5e:	4b10      	ldr	r3, [pc, #64]	; (81ba0 <sysclk_init+0x48>)
   81b60:	4798      	blx	r3
   81b62:	4603      	mov	r3, r0
   81b64:	4618      	mov	r0, r3
   81b66:	4b0f      	ldr	r3, [pc, #60]	; (81ba4 <sysclk_init+0x4c>)
   81b68:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   81b6a:	2006      	movs	r0, #6
   81b6c:	4b0e      	ldr	r3, [pc, #56]	; (81ba8 <sysclk_init+0x50>)
   81b6e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   81b70:	1d3b      	adds	r3, r7, #4
   81b72:	4618      	mov	r0, r3
   81b74:	2106      	movs	r1, #6
   81b76:	2201      	movs	r2, #1
   81b78:	230e      	movs	r3, #14
   81b7a:	4c0c      	ldr	r4, [pc, #48]	; (81bac <sysclk_init+0x54>)
   81b7c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   81b7e:	1d3b      	adds	r3, r7, #4
   81b80:	4618      	mov	r0, r3
   81b82:	2100      	movs	r1, #0
   81b84:	4b0a      	ldr	r3, [pc, #40]	; (81bb0 <sysclk_init+0x58>)
   81b86:	4798      	blx	r3
		pll_wait_for_lock(0);
   81b88:	2000      	movs	r0, #0
   81b8a:	4b0a      	ldr	r3, [pc, #40]	; (81bb4 <sysclk_init+0x5c>)
   81b8c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81b8e:	2010      	movs	r0, #16
   81b90:	4b09      	ldr	r3, [pc, #36]	; (81bb8 <sysclk_init+0x60>)
   81b92:	4798      	blx	r3
		break;
   81b94:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81b96:	4b09      	ldr	r3, [pc, #36]	; (81bbc <sysclk_init+0x64>)
   81b98:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   81b9a:	370c      	adds	r7, #12
   81b9c:	46bd      	mov	sp, r7
   81b9e:	bd90      	pop	{r4, r7, pc}
   81ba0:	00081b45 	.word	0x00081b45
   81ba4:	00083159 	.word	0x00083159
   81ba8:	00081ad1 	.word	0x00081ad1
   81bac:	00081a01 	.word	0x00081a01
   81bb0:	00081a69 	.word	0x00081a69
   81bb4:	00081b05 	.word	0x00081b05
   81bb8:	00082911 	.word	0x00082911
   81bbc:	00082fd9 	.word	0x00082fd9

00081bc0 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   81bc0:	b580      	push	{r7, lr}
   81bc2:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81bc4:	4b16      	ldr	r3, [pc, #88]	; (81c20 <safe_board_init+0x60>)
   81bc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81bca:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   81bcc:	2001      	movs	r0, #1
   81bce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bd2:	4b14      	ldr	r3, [pc, #80]	; (81c24 <safe_board_init+0x64>)
   81bd4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   81bd6:	2000      	movs	r0, #0
   81bd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bdc:	4b11      	ldr	r3, [pc, #68]	; (81c24 <safe_board_init+0x64>)
   81bde:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   81be0:	2034      	movs	r0, #52	; 0x34
   81be2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81be6:	4b0f      	ldr	r3, [pc, #60]	; (81c24 <safe_board_init+0x64>)
   81be8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   81bea:	2035      	movs	r0, #53	; 0x35
   81bec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81bf0:	4b0c      	ldr	r3, [pc, #48]	; (81c24 <safe_board_init+0x64>)
   81bf2:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   81bf4:	202f      	movs	r0, #47	; 0x2f
   81bf6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bfa:	4b0a      	ldr	r3, [pc, #40]	; (81c24 <safe_board_init+0x64>)
   81bfc:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   81bfe:	202e      	movs	r0, #46	; 0x2e
   81c00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c04:	4b07      	ldr	r3, [pc, #28]	; (81c24 <safe_board_init+0x64>)
   81c06:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   81c08:	208f      	movs	r0, #143	; 0x8f
   81c0a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81c0e:	4b05      	ldr	r3, [pc, #20]	; (81c24 <safe_board_init+0x64>)
   81c10:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   81c12:	2090      	movs	r0, #144	; 0x90
   81c14:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81c18:	4b02      	ldr	r3, [pc, #8]	; (81c24 <safe_board_init+0x64>)
   81c1a:	4798      	blx	r3
	#endif
	return;
   81c1c:	bf00      	nop
}
   81c1e:	bd80      	pop	{r7, pc}
   81c20:	400e1a50 	.word	0x400e1a50
   81c24:	000825f1 	.word	0x000825f1

00081c28 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   81c28:	b580      	push	{r7, lr}
   81c2a:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   81c2c:	2057      	movs	r0, #87	; 0x57
   81c2e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81c32:	4b2f      	ldr	r3, [pc, #188]	; (81cf0 <board_init+0xc8>)
   81c34:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   81c36:	2057      	movs	r0, #87	; 0x57
   81c38:	4b2e      	ldr	r3, [pc, #184]	; (81cf4 <board_init+0xcc>)
   81c3a:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81c3c:	203b      	movs	r0, #59	; 0x3b
   81c3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c42:	4b2b      	ldr	r3, [pc, #172]	; (81cf0 <board_init+0xc8>)
   81c44:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81c46:	2055      	movs	r0, #85	; 0x55
   81c48:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c4c:	4b28      	ldr	r3, [pc, #160]	; (81cf0 <board_init+0xc8>)
   81c4e:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81c50:	2056      	movs	r0, #86	; 0x56
   81c52:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81c56:	4b26      	ldr	r3, [pc, #152]	; (81cf0 <board_init+0xc8>)
   81c58:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81c5a:	2087      	movs	r0, #135	; 0x87
   81c5c:	4926      	ldr	r1, [pc, #152]	; (81cf8 <board_init+0xd0>)
   81c5e:	4b24      	ldr	r3, [pc, #144]	; (81cf0 <board_init+0xc8>)
   81c60:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81c62:	2037      	movs	r0, #55	; 0x37
   81c64:	4925      	ldr	r1, [pc, #148]	; (81cfc <board_init+0xd4>)
   81c66:	4b22      	ldr	r3, [pc, #136]	; (81cf0 <board_init+0xc8>)
   81c68:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81c6a:	4825      	ldr	r0, [pc, #148]	; (81d00 <board_init+0xd8>)
   81c6c:	f44f 7140 	mov.w	r1, #768	; 0x300
   81c70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81c74:	4b23      	ldr	r3, [pc, #140]	; (81d04 <board_init+0xdc>)
   81c76:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81c78:	2019      	movs	r0, #25
   81c7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c7e:	4b1c      	ldr	r3, [pc, #112]	; (81cf0 <board_init+0xc8>)
   81c80:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81c82:	201a      	movs	r0, #26
   81c84:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c88:	4b19      	ldr	r3, [pc, #100]	; (81cf0 <board_init+0xc8>)
   81c8a:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81c8c:	201b      	movs	r0, #27
   81c8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c92:	4b17      	ldr	r3, [pc, #92]	; (81cf0 <board_init+0xc8>)
   81c94:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81c96:	201c      	movs	r0, #28
   81c98:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81c9c:	4b14      	ldr	r3, [pc, #80]	; (81cf0 <board_init+0xc8>)
   81c9e:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS1
#       if defined(CONF_BOARD_SPI0_NPCS1_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS1_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS1_GPIO,
   81ca0:	2034      	movs	r0, #52	; 0x34
   81ca2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ca6:	4b12      	ldr	r3, [pc, #72]	; (81cf0 <board_init+0xc8>)
   81ca8:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS2
#       if defined(CONF_BOARD_SPI0_NPCS2_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS2_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS2_GPIO,
   81caa:	2035      	movs	r0, #53	; 0x35
   81cac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81cb0:	4b0f      	ldr	r3, [pc, #60]	; (81cf0 <board_init+0xc8>)
   81cb2:	4798      	blx	r3
					SPI0_NPCS3_PA31_FLAGS);
#       endif
#   endif

#	ifdef CONF_SPI_MEM2
		gpio_configure_pin(SPI0_MEM2_HOLD, SPI0_MEM2_HOLD_FLAGS);
   81cb4:	2020      	movs	r0, #32
   81cb6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81cba:	4b0d      	ldr	r3, [pc, #52]	; (81cf0 <board_init+0xc8>)
   81cbc:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM2_WP, SPI0_MEM2_WP_FLAGS);
   81cbe:	201c      	movs	r0, #28
   81cc0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cc4:	4b0a      	ldr	r3, [pc, #40]	; (81cf0 <board_init+0xc8>)
   81cc6:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   81cc8:	200a      	movs	r0, #10
   81cca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cce:	4b08      	ldr	r3, [pc, #32]	; (81cf0 <board_init+0xc8>)
   81cd0:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   81cd2:	200b      	movs	r0, #11
   81cd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81cd8:	4b05      	ldr	r3, [pc, #20]	; (81cf0 <board_init+0xc8>)
   81cda:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   81cdc:	208e      	movs	r0, #142	; 0x8e
   81cde:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81ce2:	4b03      	ldr	r3, [pc, #12]	; (81cf0 <board_init+0xc8>)
   81ce4:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   81ce6:	208e      	movs	r0, #142	; 0x8e
   81ce8:	4b07      	ldr	r3, [pc, #28]	; (81d08 <board_init+0xe0>)
   81cea:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   81cec:	bd80      	pop	{r7, pc}
   81cee:	bf00      	nop
   81cf0:	000825f1 	.word	0x000825f1
   81cf4:	00082529 	.word	0x00082529
   81cf8:	28000079 	.word	0x28000079
   81cfc:	28000059 	.word	0x28000059
   81d00:	400e0e00 	.word	0x400e0e00
   81d04:	0008272d 	.word	0x0008272d
   81d08:	0008255d 	.word	0x0008255d

00081d0c <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81d0c:	b480      	push	{r7}
   81d0e:	b083      	sub	sp, #12
   81d10:	af00      	add	r7, sp, #0
   81d12:	6078      	str	r0, [r7, #4]
   81d14:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   81d16:	687b      	ldr	r3, [r7, #4]
   81d18:	683a      	ldr	r2, [r7, #0]
   81d1a:	601a      	str	r2, [r3, #0]
}
   81d1c:	370c      	adds	r7, #12
   81d1e:	46bd      	mov	sp, r7
   81d20:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d24:	4770      	bx	lr
   81d26:	bf00      	nop

00081d28 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81d28:	b480      	push	{r7}
   81d2a:	b083      	sub	sp, #12
   81d2c:	af00      	add	r7, sp, #0
   81d2e:	6078      	str	r0, [r7, #4]
   81d30:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   81d32:	687b      	ldr	r3, [r7, #4]
   81d34:	683a      	ldr	r2, [r7, #0]
   81d36:	605a      	str	r2, [r3, #4]
}
   81d38:	370c      	adds	r7, #12
   81d3a:	46bd      	mov	sp, r7
   81d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d40:	4770      	bx	lr
   81d42:	bf00      	nop

00081d44 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   81d44:	b580      	push	{r7, lr}
   81d46:	b082      	sub	sp, #8
   81d48:	af00      	add	r7, sp, #0
   81d4a:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   81d4c:	687b      	ldr	r3, [r7, #4]
   81d4e:	685b      	ldr	r3, [r3, #4]
   81d50:	4618      	mov	r0, r3
   81d52:	4b02      	ldr	r3, [pc, #8]	; (81d5c <sn65hvd234_enable+0x18>)
   81d54:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   81d56:	3708      	adds	r7, #8
   81d58:	46bd      	mov	sp, r7
   81d5a:	bd80      	pop	{r7, pc}
   81d5c:	00082529 	.word	0x00082529

00081d60 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   81d60:	b580      	push	{r7, lr}
   81d62:	b082      	sub	sp, #8
   81d64:	af00      	add	r7, sp, #0
   81d66:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   81d68:	687b      	ldr	r3, [r7, #4]
   81d6a:	681b      	ldr	r3, [r3, #0]
   81d6c:	4618      	mov	r0, r3
   81d6e:	4b02      	ldr	r3, [pc, #8]	; (81d78 <sn65hvd234_disable_low_power+0x18>)
   81d70:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   81d72:	3708      	adds	r7, #8
   81d74:	46bd      	mov	sp, r7
   81d76:	bd80      	pop	{r7, pc}
   81d78:	0008255d 	.word	0x0008255d

00081d7c <can_set_baudrate>:
   81d7c:	b580      	push	{r7, lr}
   81d7e:	b08a      	sub	sp, #40	; 0x28
   81d80:	af00      	add	r7, sp, #0
   81d82:	60f8      	str	r0, [r7, #12]
   81d84:	60b9      	str	r1, [r7, #8]
   81d86:	607a      	str	r2, [r7, #4]
   81d88:	687b      	ldr	r3, [r7, #4]
   81d8a:	f246 12a8 	movw	r2, #25000	; 0x61a8
   81d8e:	fb02 f203 	mul.w	r2, r2, r3
   81d92:	68bb      	ldr	r3, [r7, #8]
   81d94:	4413      	add	r3, r2
   81d96:	1e5a      	subs	r2, r3, #1
   81d98:	687b      	ldr	r3, [r7, #4]
   81d9a:	f246 11a8 	movw	r1, #25000	; 0x61a8
   81d9e:	fb01 f303 	mul.w	r3, r1, r3
   81da2:	fbb2 f3f3 	udiv	r3, r2, r3
   81da6:	2b80      	cmp	r3, #128	; 0x80
   81da8:	d901      	bls.n	81dae <can_set_baudrate+0x32>
   81daa:	2300      	movs	r3, #0
   81dac:	e085      	b.n	81eba <can_set_baudrate+0x13e>
   81dae:	68bb      	ldr	r3, [r7, #8]
   81db0:	085a      	lsrs	r2, r3, #1
   81db2:	687b      	ldr	r3, [r7, #4]
   81db4:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81db8:	fb01 f303 	mul.w	r3, r1, r3
   81dbc:	429a      	cmp	r2, r3
   81dbe:	d201      	bcs.n	81dc4 <can_set_baudrate+0x48>
   81dc0:	2300      	movs	r3, #0
   81dc2:	e07a      	b.n	81eba <can_set_baudrate+0x13e>
   81dc4:	2308      	movs	r3, #8
   81dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   81dca:	f04f 33ff 	mov.w	r3, #4294967295
   81dce:	623b      	str	r3, [r7, #32]
   81dd0:	2308      	movs	r3, #8
   81dd2:	77fb      	strb	r3, [r7, #31]
   81dd4:	e02b      	b.n	81e2e <can_set_baudrate+0xb2>
   81dd6:	7ffb      	ldrb	r3, [r7, #31]
   81dd8:	687a      	ldr	r2, [r7, #4]
   81dda:	fb02 f303 	mul.w	r3, r2, r3
   81dde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81de2:	fb02 f303 	mul.w	r3, r2, r3
   81de6:	68ba      	ldr	r2, [r7, #8]
   81de8:	fbb2 f3f3 	udiv	r3, r2, r3
   81dec:	2b80      	cmp	r3, #128	; 0x80
   81dee:	d81b      	bhi.n	81e28 <can_set_baudrate+0xac>
   81df0:	7ffb      	ldrb	r3, [r7, #31]
   81df2:	687a      	ldr	r2, [r7, #4]
   81df4:	fb02 f303 	mul.w	r3, r2, r3
   81df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81dfc:	fb02 f203 	mul.w	r2, r2, r3
   81e00:	68bb      	ldr	r3, [r7, #8]
   81e02:	fbb3 f1f2 	udiv	r1, r3, r2
   81e06:	fb02 f201 	mul.w	r2, r2, r1
   81e0a:	1a9b      	subs	r3, r3, r2
   81e0c:	61bb      	str	r3, [r7, #24]
   81e0e:	69ba      	ldr	r2, [r7, #24]
   81e10:	6a3b      	ldr	r3, [r7, #32]
   81e12:	429a      	cmp	r2, r3
   81e14:	d208      	bcs.n	81e28 <can_set_baudrate+0xac>
   81e16:	69bb      	ldr	r3, [r7, #24]
   81e18:	623b      	str	r3, [r7, #32]
   81e1a:	7ffb      	ldrb	r3, [r7, #31]
   81e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   81e20:	6a3b      	ldr	r3, [r7, #32]
   81e22:	2b00      	cmp	r3, #0
   81e24:	d100      	bne.n	81e28 <can_set_baudrate+0xac>
   81e26:	e005      	b.n	81e34 <can_set_baudrate+0xb8>
   81e28:	7ffb      	ldrb	r3, [r7, #31]
   81e2a:	3301      	adds	r3, #1
   81e2c:	77fb      	strb	r3, [r7, #31]
   81e2e:	7ffb      	ldrb	r3, [r7, #31]
   81e30:	2b19      	cmp	r3, #25
   81e32:	d9d0      	bls.n	81dd6 <can_set_baudrate+0x5a>
   81e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81e38:	687a      	ldr	r2, [r7, #4]
   81e3a:	fb02 f303 	mul.w	r3, r2, r3
   81e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81e42:	fb02 f303 	mul.w	r3, r2, r3
   81e46:	68ba      	ldr	r2, [r7, #8]
   81e48:	fbb2 f3f3 	udiv	r3, r2, r3
   81e4c:	75fb      	strb	r3, [r7, #23]
   81e4e:	7dfb      	ldrb	r3, [r7, #23]
   81e50:	2b01      	cmp	r3, #1
   81e52:	d801      	bhi.n	81e58 <can_set_baudrate+0xdc>
   81e54:	2300      	movs	r3, #0
   81e56:	e030      	b.n	81eba <can_set_baudrate+0x13e>
   81e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81e5c:	f1a3 0208 	sub.w	r2, r3, #8
   81e60:	4613      	mov	r3, r2
   81e62:	005b      	lsls	r3, r3, #1
   81e64:	4413      	add	r3, r2
   81e66:	005b      	lsls	r3, r3, #1
   81e68:	4a16      	ldr	r2, [pc, #88]	; (81ec4 <can_set_baudrate+0x148>)
   81e6a:	4413      	add	r3, r2
   81e6c:	613b      	str	r3, [r7, #16]
   81e6e:	68f8      	ldr	r0, [r7, #12]
   81e70:	4b15      	ldr	r3, [pc, #84]	; (81ec8 <can_set_baudrate+0x14c>)
   81e72:	4798      	blx	r3
   81e74:	693b      	ldr	r3, [r7, #16]
   81e76:	78db      	ldrb	r3, [r3, #3]
   81e78:	3b01      	subs	r3, #1
   81e7a:	f003 0207 	and.w	r2, r3, #7
   81e7e:	693b      	ldr	r3, [r7, #16]
   81e80:	789b      	ldrb	r3, [r3, #2]
   81e82:	3b01      	subs	r3, #1
   81e84:	011b      	lsls	r3, r3, #4
   81e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81e8a:	431a      	orrs	r2, r3
   81e8c:	693b      	ldr	r3, [r7, #16]
   81e8e:	785b      	ldrb	r3, [r3, #1]
   81e90:	3b01      	subs	r3, #1
   81e92:	021b      	lsls	r3, r3, #8
   81e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   81e98:	431a      	orrs	r2, r3
   81e9a:	693b      	ldr	r3, [r7, #16]
   81e9c:	791b      	ldrb	r3, [r3, #4]
   81e9e:	3b01      	subs	r3, #1
   81ea0:	031b      	lsls	r3, r3, #12
   81ea2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   81ea6:	431a      	orrs	r2, r3
   81ea8:	7dfb      	ldrb	r3, [r7, #23]
   81eaa:	3b01      	subs	r3, #1
   81eac:	041b      	lsls	r3, r3, #16
   81eae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   81eb2:	431a      	orrs	r2, r3
   81eb4:	68fb      	ldr	r3, [r7, #12]
   81eb6:	615a      	str	r2, [r3, #20]
   81eb8:	2301      	movs	r3, #1
   81eba:	4618      	mov	r0, r3
   81ebc:	3728      	adds	r7, #40	; 0x28
   81ebe:	46bd      	mov	sp, r7
   81ec0:	bd80      	pop	{r7, pc}
   81ec2:	bf00      	nop
   81ec4:	0008701c 	.word	0x0008701c
   81ec8:	00081f75 	.word	0x00081f75

00081ecc <can_init>:
   81ecc:	b580      	push	{r7, lr}
   81ece:	b086      	sub	sp, #24
   81ed0:	af00      	add	r7, sp, #0
   81ed2:	60f8      	str	r0, [r7, #12]
   81ed4:	60b9      	str	r1, [r7, #8]
   81ed6:	607a      	str	r2, [r7, #4]
   81ed8:	68f8      	ldr	r0, [r7, #12]
   81eda:	68b9      	ldr	r1, [r7, #8]
   81edc:	687a      	ldr	r2, [r7, #4]
   81ede:	4b17      	ldr	r3, [pc, #92]	; (81f3c <can_init+0x70>)
   81ee0:	4798      	blx	r3
   81ee2:	6178      	str	r0, [r7, #20]
   81ee4:	697b      	ldr	r3, [r7, #20]
   81ee6:	2b00      	cmp	r3, #0
   81ee8:	d101      	bne.n	81eee <can_init+0x22>
   81eea:	2300      	movs	r3, #0
   81eec:	e021      	b.n	81f32 <can_init+0x66>
   81eee:	68f8      	ldr	r0, [r7, #12]
   81ef0:	4b13      	ldr	r3, [pc, #76]	; (81f40 <can_init+0x74>)
   81ef2:	4798      	blx	r3
   81ef4:	68f8      	ldr	r0, [r7, #12]
   81ef6:	4b13      	ldr	r3, [pc, #76]	; (81f44 <can_init+0x78>)
   81ef8:	4798      	blx	r3
   81efa:	2300      	movs	r3, #0
   81efc:	617b      	str	r3, [r7, #20]
   81efe:	2300      	movs	r3, #0
   81f00:	613b      	str	r3, [r7, #16]
   81f02:	e006      	b.n	81f12 <can_init+0x46>
   81f04:	68f8      	ldr	r0, [r7, #12]
   81f06:	4b10      	ldr	r3, [pc, #64]	; (81f48 <can_init+0x7c>)
   81f08:	4798      	blx	r3
   81f0a:	6178      	str	r0, [r7, #20]
   81f0c:	693b      	ldr	r3, [r7, #16]
   81f0e:	3301      	adds	r3, #1
   81f10:	613b      	str	r3, [r7, #16]
   81f12:	697b      	ldr	r3, [r7, #20]
   81f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   81f18:	2b00      	cmp	r3, #0
   81f1a:	d103      	bne.n	81f24 <can_init+0x58>
   81f1c:	693a      	ldr	r2, [r7, #16]
   81f1e:	4b0b      	ldr	r3, [pc, #44]	; (81f4c <can_init+0x80>)
   81f20:	429a      	cmp	r2, r3
   81f22:	d9ef      	bls.n	81f04 <can_init+0x38>
   81f24:	693a      	ldr	r2, [r7, #16]
   81f26:	4b0a      	ldr	r3, [pc, #40]	; (81f50 <can_init+0x84>)
   81f28:	429a      	cmp	r2, r3
   81f2a:	d101      	bne.n	81f30 <can_init+0x64>
   81f2c:	2300      	movs	r3, #0
   81f2e:	e000      	b.n	81f32 <can_init+0x66>
   81f30:	2301      	movs	r3, #1
   81f32:	4618      	mov	r0, r3
   81f34:	3718      	adds	r7, #24
   81f36:	46bd      	mov	sp, r7
   81f38:	bd80      	pop	{r7, pc}
   81f3a:	bf00      	nop
   81f3c:	00081d7d 	.word	0x00081d7d
   81f40:	0008230d 	.word	0x0008230d
   81f44:	00081f55 	.word	0x00081f55
   81f48:	00081fcd 	.word	0x00081fcd
   81f4c:	0001869f 	.word	0x0001869f
   81f50:	000186a0 	.word	0x000186a0

00081f54 <can_enable>:
   81f54:	b480      	push	{r7}
   81f56:	b083      	sub	sp, #12
   81f58:	af00      	add	r7, sp, #0
   81f5a:	6078      	str	r0, [r7, #4]
   81f5c:	687b      	ldr	r3, [r7, #4]
   81f5e:	681b      	ldr	r3, [r3, #0]
   81f60:	f043 0201 	orr.w	r2, r3, #1
   81f64:	687b      	ldr	r3, [r7, #4]
   81f66:	601a      	str	r2, [r3, #0]
   81f68:	370c      	adds	r7, #12
   81f6a:	46bd      	mov	sp, r7
   81f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f70:	4770      	bx	lr
   81f72:	bf00      	nop

00081f74 <can_disable>:
   81f74:	b480      	push	{r7}
   81f76:	b083      	sub	sp, #12
   81f78:	af00      	add	r7, sp, #0
   81f7a:	6078      	str	r0, [r7, #4]
   81f7c:	687b      	ldr	r3, [r7, #4]
   81f7e:	681b      	ldr	r3, [r3, #0]
   81f80:	f023 0201 	bic.w	r2, r3, #1
   81f84:	687b      	ldr	r3, [r7, #4]
   81f86:	601a      	str	r2, [r3, #0]
   81f88:	370c      	adds	r7, #12
   81f8a:	46bd      	mov	sp, r7
   81f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f90:	4770      	bx	lr
   81f92:	bf00      	nop

00081f94 <can_enable_interrupt>:
   81f94:	b480      	push	{r7}
   81f96:	b083      	sub	sp, #12
   81f98:	af00      	add	r7, sp, #0
   81f9a:	6078      	str	r0, [r7, #4]
   81f9c:	6039      	str	r1, [r7, #0]
   81f9e:	687b      	ldr	r3, [r7, #4]
   81fa0:	683a      	ldr	r2, [r7, #0]
   81fa2:	605a      	str	r2, [r3, #4]
   81fa4:	370c      	adds	r7, #12
   81fa6:	46bd      	mov	sp, r7
   81fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fac:	4770      	bx	lr
   81fae:	bf00      	nop

00081fb0 <can_disable_interrupt>:
   81fb0:	b480      	push	{r7}
   81fb2:	b083      	sub	sp, #12
   81fb4:	af00      	add	r7, sp, #0
   81fb6:	6078      	str	r0, [r7, #4]
   81fb8:	6039      	str	r1, [r7, #0]
   81fba:	687b      	ldr	r3, [r7, #4]
   81fbc:	683a      	ldr	r2, [r7, #0]
   81fbe:	609a      	str	r2, [r3, #8]
   81fc0:	370c      	adds	r7, #12
   81fc2:	46bd      	mov	sp, r7
   81fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fc8:	4770      	bx	lr
   81fca:	bf00      	nop

00081fcc <can_get_status>:
   81fcc:	b480      	push	{r7}
   81fce:	b083      	sub	sp, #12
   81fd0:	af00      	add	r7, sp, #0
   81fd2:	6078      	str	r0, [r7, #4]
   81fd4:	687b      	ldr	r3, [r7, #4]
   81fd6:	691b      	ldr	r3, [r3, #16]
   81fd8:	4618      	mov	r0, r3
   81fda:	370c      	adds	r7, #12
   81fdc:	46bd      	mov	sp, r7
   81fde:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fe2:	4770      	bx	lr

00081fe4 <can_global_send_transfer_cmd>:
   81fe4:	b480      	push	{r7}
   81fe6:	b085      	sub	sp, #20
   81fe8:	af00      	add	r7, sp, #0
   81fea:	6078      	str	r0, [r7, #4]
   81fec:	460b      	mov	r3, r1
   81fee:	70fb      	strb	r3, [r7, #3]
   81ff0:	687b      	ldr	r3, [r7, #4]
   81ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81ff4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81ff8:	60fb      	str	r3, [r7, #12]
   81ffa:	78fa      	ldrb	r2, [r7, #3]
   81ffc:	68fb      	ldr	r3, [r7, #12]
   81ffe:	431a      	orrs	r2, r3
   82000:	687b      	ldr	r3, [r7, #4]
   82002:	625a      	str	r2, [r3, #36]	; 0x24
   82004:	3714      	adds	r7, #20
   82006:	46bd      	mov	sp, r7
   82008:	f85d 7b04 	ldr.w	r7, [sp], #4
   8200c:	4770      	bx	lr
   8200e:	bf00      	nop

00082010 <can_mailbox_get_status>:
   82010:	b480      	push	{r7}
   82012:	b083      	sub	sp, #12
   82014:	af00      	add	r7, sp, #0
   82016:	6078      	str	r0, [r7, #4]
   82018:	460b      	mov	r3, r1
   8201a:	70fb      	strb	r3, [r7, #3]
   8201c:	78fb      	ldrb	r3, [r7, #3]
   8201e:	687a      	ldr	r2, [r7, #4]
   82020:	015b      	lsls	r3, r3, #5
   82022:	4413      	add	r3, r2
   82024:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82028:	681b      	ldr	r3, [r3, #0]
   8202a:	4618      	mov	r0, r3
   8202c:	370c      	adds	r7, #12
   8202e:	46bd      	mov	sp, r7
   82030:	f85d 7b04 	ldr.w	r7, [sp], #4
   82034:	4770      	bx	lr
   82036:	bf00      	nop

00082038 <can_mailbox_send_transfer_cmd>:
   82038:	b480      	push	{r7}
   8203a:	b085      	sub	sp, #20
   8203c:	af00      	add	r7, sp, #0
   8203e:	6078      	str	r0, [r7, #4]
   82040:	6039      	str	r1, [r7, #0]
   82042:	683b      	ldr	r3, [r7, #0]
   82044:	681b      	ldr	r3, [r3, #0]
   82046:	73fb      	strb	r3, [r7, #15]
   82048:	7bfb      	ldrb	r3, [r7, #15]
   8204a:	683a      	ldr	r2, [r7, #0]
   8204c:	7992      	ldrb	r2, [r2, #6]
   8204e:	0412      	lsls	r2, r2, #16
   82050:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   82054:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   82058:	6879      	ldr	r1, [r7, #4]
   8205a:	015b      	lsls	r3, r3, #5
   8205c:	440b      	add	r3, r1
   8205e:	f503 7306 	add.w	r3, r3, #536	; 0x218
   82062:	605a      	str	r2, [r3, #4]
   82064:	3714      	adds	r7, #20
   82066:	46bd      	mov	sp, r7
   82068:	f85d 7b04 	ldr.w	r7, [sp], #4
   8206c:	4770      	bx	lr
   8206e:	bf00      	nop

00082070 <can_mailbox_init>:
   82070:	b480      	push	{r7}
   82072:	b085      	sub	sp, #20
   82074:	af00      	add	r7, sp, #0
   82076:	6078      	str	r0, [r7, #4]
   82078:	6039      	str	r1, [r7, #0]
   8207a:	683b      	ldr	r3, [r7, #0]
   8207c:	681b      	ldr	r3, [r3, #0]
   8207e:	73fb      	strb	r3, [r7, #15]
   82080:	683b      	ldr	r3, [r7, #0]
   82082:	791b      	ldrb	r3, [r3, #4]
   82084:	2b00      	cmp	r3, #0
   82086:	d12e      	bne.n	820e6 <can_mailbox_init+0x76>
   82088:	7bfb      	ldrb	r3, [r7, #15]
   8208a:	687a      	ldr	r2, [r7, #4]
   8208c:	3310      	adds	r3, #16
   8208e:	015b      	lsls	r3, r3, #5
   82090:	4413      	add	r3, r2
   82092:	2200      	movs	r2, #0
   82094:	601a      	str	r2, [r3, #0]
   82096:	7bfb      	ldrb	r3, [r7, #15]
   82098:	687a      	ldr	r2, [r7, #4]
   8209a:	3310      	adds	r3, #16
   8209c:	015b      	lsls	r3, r3, #5
   8209e:	4413      	add	r3, r2
   820a0:	2200      	movs	r2, #0
   820a2:	605a      	str	r2, [r3, #4]
   820a4:	7bfb      	ldrb	r3, [r7, #15]
   820a6:	687a      	ldr	r2, [r7, #4]
   820a8:	015b      	lsls	r3, r3, #5
   820aa:	4413      	add	r3, r2
   820ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
   820b0:	2200      	movs	r2, #0
   820b2:	601a      	str	r2, [r3, #0]
   820b4:	7bfb      	ldrb	r3, [r7, #15]
   820b6:	687a      	ldr	r2, [r7, #4]
   820b8:	015b      	lsls	r3, r3, #5
   820ba:	4413      	add	r3, r2
   820bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
   820c0:	2200      	movs	r2, #0
   820c2:	605a      	str	r2, [r3, #4]
   820c4:	7bfb      	ldrb	r3, [r7, #15]
   820c6:	687a      	ldr	r2, [r7, #4]
   820c8:	015b      	lsls	r3, r3, #5
   820ca:	4413      	add	r3, r2
   820cc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   820d0:	2200      	movs	r2, #0
   820d2:	601a      	str	r2, [r3, #0]
   820d4:	7bfb      	ldrb	r3, [r7, #15]
   820d6:	687a      	ldr	r2, [r7, #4]
   820d8:	015b      	lsls	r3, r3, #5
   820da:	4413      	add	r3, r2
   820dc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   820e0:	2200      	movs	r2, #0
   820e2:	605a      	str	r2, [r3, #4]
   820e4:	e04e      	b.n	82184 <can_mailbox_init+0x114>
   820e6:	7bfb      	ldrb	r3, [r7, #15]
   820e8:	7bfa      	ldrb	r2, [r7, #15]
   820ea:	6879      	ldr	r1, [r7, #4]
   820ec:	3210      	adds	r2, #16
   820ee:	0152      	lsls	r2, r2, #5
   820f0:	440a      	add	r2, r1
   820f2:	6812      	ldr	r2, [r2, #0]
   820f4:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
   820f8:	683a      	ldr	r2, [r7, #0]
   820fa:	79d2      	ldrb	r2, [r2, #7]
   820fc:	0412      	lsls	r2, r2, #16
   820fe:	430a      	orrs	r2, r1
   82100:	6879      	ldr	r1, [r7, #4]
   82102:	3310      	adds	r3, #16
   82104:	015b      	lsls	r3, r3, #5
   82106:	440b      	add	r3, r1
   82108:	601a      	str	r2, [r3, #0]
   8210a:	683b      	ldr	r3, [r7, #0]
   8210c:	795b      	ldrb	r3, [r3, #5]
   8210e:	2b00      	cmp	r3, #0
   82110:	d015      	beq.n	8213e <can_mailbox_init+0xce>
   82112:	7bfb      	ldrb	r3, [r7, #15]
   82114:	683a      	ldr	r2, [r7, #0]
   82116:	68d2      	ldr	r2, [r2, #12]
   82118:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8211c:	6879      	ldr	r1, [r7, #4]
   8211e:	3310      	adds	r3, #16
   82120:	015b      	lsls	r3, r3, #5
   82122:	440b      	add	r3, r1
   82124:	605a      	str	r2, [r3, #4]
   82126:	7bfb      	ldrb	r3, [r7, #15]
   82128:	683a      	ldr	r2, [r7, #0]
   8212a:	6912      	ldr	r2, [r2, #16]
   8212c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82130:	6879      	ldr	r1, [r7, #4]
   82132:	015b      	lsls	r3, r3, #5
   82134:	440b      	add	r3, r1
   82136:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8213a:	601a      	str	r2, [r3, #0]
   8213c:	e010      	b.n	82160 <can_mailbox_init+0xf0>
   8213e:	7bfb      	ldrb	r3, [r7, #15]
   82140:	683a      	ldr	r2, [r7, #0]
   82142:	68d2      	ldr	r2, [r2, #12]
   82144:	6879      	ldr	r1, [r7, #4]
   82146:	3310      	adds	r3, #16
   82148:	015b      	lsls	r3, r3, #5
   8214a:	440b      	add	r3, r1
   8214c:	605a      	str	r2, [r3, #4]
   8214e:	7bfb      	ldrb	r3, [r7, #15]
   82150:	683a      	ldr	r2, [r7, #0]
   82152:	6912      	ldr	r2, [r2, #16]
   82154:	6879      	ldr	r1, [r7, #4]
   82156:	015b      	lsls	r3, r3, #5
   82158:	440b      	add	r3, r1
   8215a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8215e:	601a      	str	r2, [r3, #0]
   82160:	7bfb      	ldrb	r3, [r7, #15]
   82162:	7bfa      	ldrb	r2, [r7, #15]
   82164:	6879      	ldr	r1, [r7, #4]
   82166:	3210      	adds	r2, #16
   82168:	0152      	lsls	r2, r2, #5
   8216a:	440a      	add	r2, r1
   8216c:	6812      	ldr	r2, [r2, #0]
   8216e:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
   82172:	683a      	ldr	r2, [r7, #0]
   82174:	7912      	ldrb	r2, [r2, #4]
   82176:	0612      	lsls	r2, r2, #24
   82178:	430a      	orrs	r2, r1
   8217a:	6879      	ldr	r1, [r7, #4]
   8217c:	3310      	adds	r3, #16
   8217e:	015b      	lsls	r3, r3, #5
   82180:	440b      	add	r3, r1
   82182:	601a      	str	r2, [r3, #0]
   82184:	3714      	adds	r7, #20
   82186:	46bd      	mov	sp, r7
   82188:	f85d 7b04 	ldr.w	r7, [sp], #4
   8218c:	4770      	bx	lr
   8218e:	bf00      	nop

00082190 <can_mailbox_read>:
   82190:	b580      	push	{r7, lr}
   82192:	b086      	sub	sp, #24
   82194:	af00      	add	r7, sp, #0
   82196:	6078      	str	r0, [r7, #4]
   82198:	6039      	str	r1, [r7, #0]
   8219a:	2300      	movs	r3, #0
   8219c:	617b      	str	r3, [r7, #20]
   8219e:	683b      	ldr	r3, [r7, #0]
   821a0:	681b      	ldr	r3, [r3, #0]
   821a2:	74fb      	strb	r3, [r7, #19]
   821a4:	683b      	ldr	r3, [r7, #0]
   821a6:	689b      	ldr	r3, [r3, #8]
   821a8:	60fb      	str	r3, [r7, #12]
   821aa:	68fb      	ldr	r3, [r7, #12]
   821ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   821b0:	2b00      	cmp	r3, #0
   821b2:	d006      	beq.n	821c2 <can_mailbox_read+0x32>
   821b4:	68fb      	ldr	r3, [r7, #12]
   821b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   821ba:	2b00      	cmp	r3, #0
   821bc:	d001      	beq.n	821c2 <can_mailbox_read+0x32>
   821be:	2302      	movs	r3, #2
   821c0:	617b      	str	r3, [r7, #20]
   821c2:	7cfb      	ldrb	r3, [r7, #19]
   821c4:	687a      	ldr	r2, [r7, #4]
   821c6:	015b      	lsls	r3, r3, #5
   821c8:	4413      	add	r3, r2
   821ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
   821ce:	685b      	ldr	r3, [r3, #4]
   821d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   821d4:	683b      	ldr	r3, [r7, #0]
   821d6:	615a      	str	r2, [r3, #20]
   821d8:	68fb      	ldr	r3, [r7, #12]
   821da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   821de:	0c1b      	lsrs	r3, r3, #16
   821e0:	b2da      	uxtb	r2, r3
   821e2:	683b      	ldr	r3, [r7, #0]
   821e4:	719a      	strb	r2, [r3, #6]
   821e6:	7cfb      	ldrb	r3, [r7, #19]
   821e8:	687a      	ldr	r2, [r7, #4]
   821ea:	015b      	lsls	r3, r3, #5
   821ec:	4413      	add	r3, r2
   821ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
   821f2:	685a      	ldr	r2, [r3, #4]
   821f4:	683b      	ldr	r3, [r7, #0]
   821f6:	619a      	str	r2, [r3, #24]
   821f8:	683b      	ldr	r3, [r7, #0]
   821fa:	799b      	ldrb	r3, [r3, #6]
   821fc:	2b04      	cmp	r3, #4
   821fe:	d908      	bls.n	82212 <can_mailbox_read+0x82>
   82200:	7cfb      	ldrb	r3, [r7, #19]
   82202:	687a      	ldr	r2, [r7, #4]
   82204:	015b      	lsls	r3, r3, #5
   82206:	4413      	add	r3, r2
   82208:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8220c:	681a      	ldr	r2, [r3, #0]
   8220e:	683b      	ldr	r3, [r7, #0]
   82210:	61da      	str	r2, [r3, #28]
   82212:	7cfb      	ldrb	r3, [r7, #19]
   82214:	687a      	ldr	r2, [r7, #4]
   82216:	015b      	lsls	r3, r3, #5
   82218:	4413      	add	r3, r2
   8221a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8221e:	681a      	ldr	r2, [r3, #0]
   82220:	683b      	ldr	r3, [r7, #0]
   82222:	609a      	str	r2, [r3, #8]
   82224:	683b      	ldr	r3, [r7, #0]
   82226:	689b      	ldr	r3, [r3, #8]
   82228:	60fb      	str	r3, [r7, #12]
   8222a:	68fb      	ldr	r3, [r7, #12]
   8222c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82230:	2b00      	cmp	r3, #0
   82232:	d003      	beq.n	8223c <can_mailbox_read+0xac>
   82234:	697b      	ldr	r3, [r7, #20]
   82236:	f043 0304 	orr.w	r3, r3, #4
   8223a:	617b      	str	r3, [r7, #20]
   8223c:	6878      	ldr	r0, [r7, #4]
   8223e:	6839      	ldr	r1, [r7, #0]
   82240:	4b03      	ldr	r3, [pc, #12]	; (82250 <can_mailbox_read+0xc0>)
   82242:	4798      	blx	r3
   82244:	697b      	ldr	r3, [r7, #20]
   82246:	4618      	mov	r0, r3
   82248:	3718      	adds	r7, #24
   8224a:	46bd      	mov	sp, r7
   8224c:	bd80      	pop	{r7, pc}
   8224e:	bf00      	nop
   82250:	00082039 	.word	0x00082039

00082254 <can_mailbox_write>:
   82254:	b580      	push	{r7, lr}
   82256:	b084      	sub	sp, #16
   82258:	af00      	add	r7, sp, #0
   8225a:	6078      	str	r0, [r7, #4]
   8225c:	6039      	str	r1, [r7, #0]
   8225e:	683b      	ldr	r3, [r7, #0]
   82260:	681b      	ldr	r3, [r3, #0]
   82262:	73fb      	strb	r3, [r7, #15]
   82264:	7bfb      	ldrb	r3, [r7, #15]
   82266:	6878      	ldr	r0, [r7, #4]
   82268:	4619      	mov	r1, r3
   8226a:	4b27      	ldr	r3, [pc, #156]	; (82308 <can_mailbox_write+0xb4>)
   8226c:	4798      	blx	r3
   8226e:	4602      	mov	r2, r0
   82270:	683b      	ldr	r3, [r7, #0]
   82272:	609a      	str	r2, [r3, #8]
   82274:	683b      	ldr	r3, [r7, #0]
   82276:	689b      	ldr	r3, [r3, #8]
   82278:	60bb      	str	r3, [r7, #8]
   8227a:	68bb      	ldr	r3, [r7, #8]
   8227c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   82280:	2b00      	cmp	r3, #0
   82282:	d101      	bne.n	82288 <can_mailbox_write+0x34>
   82284:	2301      	movs	r3, #1
   82286:	e03b      	b.n	82300 <can_mailbox_write+0xac>
   82288:	683b      	ldr	r3, [r7, #0]
   8228a:	795b      	ldrb	r3, [r3, #5]
   8228c:	2b00      	cmp	r3, #0
   8228e:	d00b      	beq.n	822a8 <can_mailbox_write+0x54>
   82290:	7bfb      	ldrb	r3, [r7, #15]
   82292:	683a      	ldr	r2, [r7, #0]
   82294:	6912      	ldr	r2, [r2, #16]
   82296:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8229a:	6879      	ldr	r1, [r7, #4]
   8229c:	015b      	lsls	r3, r3, #5
   8229e:	440b      	add	r3, r1
   822a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   822a4:	601a      	str	r2, [r3, #0]
   822a6:	e008      	b.n	822ba <can_mailbox_write+0x66>
   822a8:	7bfb      	ldrb	r3, [r7, #15]
   822aa:	683a      	ldr	r2, [r7, #0]
   822ac:	6912      	ldr	r2, [r2, #16]
   822ae:	6879      	ldr	r1, [r7, #4]
   822b0:	015b      	lsls	r3, r3, #5
   822b2:	440b      	add	r3, r1
   822b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   822b8:	601a      	str	r2, [r3, #0]
   822ba:	7bfb      	ldrb	r3, [r7, #15]
   822bc:	683a      	ldr	r2, [r7, #0]
   822be:	6992      	ldr	r2, [r2, #24]
   822c0:	6879      	ldr	r1, [r7, #4]
   822c2:	015b      	lsls	r3, r3, #5
   822c4:	440b      	add	r3, r1
   822c6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   822ca:	605a      	str	r2, [r3, #4]
   822cc:	683b      	ldr	r3, [r7, #0]
   822ce:	799b      	ldrb	r3, [r3, #6]
   822d0:	2b04      	cmp	r3, #4
   822d2:	d908      	bls.n	822e6 <can_mailbox_write+0x92>
   822d4:	7bfb      	ldrb	r3, [r7, #15]
   822d6:	683a      	ldr	r2, [r7, #0]
   822d8:	69d2      	ldr	r2, [r2, #28]
   822da:	6879      	ldr	r1, [r7, #4]
   822dc:	015b      	lsls	r3, r3, #5
   822de:	440b      	add	r3, r1
   822e0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   822e4:	601a      	str	r2, [r3, #0]
   822e6:	7bfb      	ldrb	r3, [r7, #15]
   822e8:	683a      	ldr	r2, [r7, #0]
   822ea:	7992      	ldrb	r2, [r2, #6]
   822ec:	0412      	lsls	r2, r2, #16
   822ee:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   822f2:	6879      	ldr	r1, [r7, #4]
   822f4:	015b      	lsls	r3, r3, #5
   822f6:	440b      	add	r3, r1
   822f8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   822fc:	605a      	str	r2, [r3, #4]
   822fe:	2300      	movs	r3, #0
   82300:	4618      	mov	r0, r3
   82302:	3710      	adds	r7, #16
   82304:	46bd      	mov	sp, r7
   82306:	bd80      	pop	{r7, pc}
   82308:	00082011 	.word	0x00082011

0008230c <can_reset_all_mailbox>:
   8230c:	b580      	push	{r7, lr}
   8230e:	b08c      	sub	sp, #48	; 0x30
   82310:	af00      	add	r7, sp, #0
   82312:	6078      	str	r0, [r7, #4]
   82314:	2300      	movs	r3, #0
   82316:	743b      	strb	r3, [r7, #16]
   82318:	2300      	movs	r3, #0
   8231a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8231e:	e00d      	b.n	8233c <can_reset_all_mailbox+0x30>
   82320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82324:	60fb      	str	r3, [r7, #12]
   82326:	f107 030c 	add.w	r3, r7, #12
   8232a:	6878      	ldr	r0, [r7, #4]
   8232c:	4619      	mov	r1, r3
   8232e:	4b07      	ldr	r3, [pc, #28]	; (8234c <can_reset_all_mailbox+0x40>)
   82330:	4798      	blx	r3
   82332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82336:	3301      	adds	r3, #1
   82338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8233c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82340:	2b07      	cmp	r3, #7
   82342:	d9ed      	bls.n	82320 <can_reset_all_mailbox+0x14>
   82344:	3730      	adds	r7, #48	; 0x30
   82346:	46bd      	mov	sp, r7
   82348:	bd80      	pop	{r7, pc}
   8234a:	bf00      	nop
   8234c:	00082071 	.word	0x00082071

00082350 <pio_pull_up>:
   82350:	b480      	push	{r7}
   82352:	b085      	sub	sp, #20
   82354:	af00      	add	r7, sp, #0
   82356:	60f8      	str	r0, [r7, #12]
   82358:	60b9      	str	r1, [r7, #8]
   8235a:	607a      	str	r2, [r7, #4]
   8235c:	687b      	ldr	r3, [r7, #4]
   8235e:	2b00      	cmp	r3, #0
   82360:	d003      	beq.n	8236a <pio_pull_up+0x1a>
   82362:	68fb      	ldr	r3, [r7, #12]
   82364:	68ba      	ldr	r2, [r7, #8]
   82366:	665a      	str	r2, [r3, #100]	; 0x64
   82368:	e002      	b.n	82370 <pio_pull_up+0x20>
   8236a:	68fb      	ldr	r3, [r7, #12]
   8236c:	68ba      	ldr	r2, [r7, #8]
   8236e:	661a      	str	r2, [r3, #96]	; 0x60
   82370:	3714      	adds	r7, #20
   82372:	46bd      	mov	sp, r7
   82374:	f85d 7b04 	ldr.w	r7, [sp], #4
   82378:	4770      	bx	lr
   8237a:	bf00      	nop

0008237c <pio_set_peripheral>:
   8237c:	b480      	push	{r7}
   8237e:	b087      	sub	sp, #28
   82380:	af00      	add	r7, sp, #0
   82382:	60f8      	str	r0, [r7, #12]
   82384:	60b9      	str	r1, [r7, #8]
   82386:	607a      	str	r2, [r7, #4]
   82388:	68fb      	ldr	r3, [r7, #12]
   8238a:	687a      	ldr	r2, [r7, #4]
   8238c:	645a      	str	r2, [r3, #68]	; 0x44
   8238e:	68bb      	ldr	r3, [r7, #8]
   82390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82394:	d01f      	beq.n	823d6 <pio_set_peripheral+0x5a>
   82396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8239a:	d805      	bhi.n	823a8 <pio_set_peripheral+0x2c>
   8239c:	2b00      	cmp	r3, #0
   8239e:	d027      	beq.n	823f0 <pio_set_peripheral+0x74>
   823a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   823a4:	d00a      	beq.n	823bc <pio_set_peripheral+0x40>
   823a6:	e01f      	b.n	823e8 <pio_set_peripheral+0x6c>
   823a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   823ac:	d020      	beq.n	823f0 <pio_set_peripheral+0x74>
   823ae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   823b2:	d01d      	beq.n	823f0 <pio_set_peripheral+0x74>
   823b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823b8:	d01a      	beq.n	823f0 <pio_set_peripheral+0x74>
   823ba:	e015      	b.n	823e8 <pio_set_peripheral+0x6c>
   823bc:	68fb      	ldr	r3, [r7, #12]
   823be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   823c0:	617b      	str	r3, [r7, #20]
   823c2:	68fb      	ldr	r3, [r7, #12]
   823c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   823c6:	687b      	ldr	r3, [r7, #4]
   823c8:	43d9      	mvns	r1, r3
   823ca:	697b      	ldr	r3, [r7, #20]
   823cc:	400b      	ands	r3, r1
   823ce:	401a      	ands	r2, r3
   823d0:	68fb      	ldr	r3, [r7, #12]
   823d2:	671a      	str	r2, [r3, #112]	; 0x70
   823d4:	e008      	b.n	823e8 <pio_set_peripheral+0x6c>
   823d6:	68fb      	ldr	r3, [r7, #12]
   823d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   823da:	617b      	str	r3, [r7, #20]
   823dc:	687a      	ldr	r2, [r7, #4]
   823de:	697b      	ldr	r3, [r7, #20]
   823e0:	431a      	orrs	r2, r3
   823e2:	68fb      	ldr	r3, [r7, #12]
   823e4:	671a      	str	r2, [r3, #112]	; 0x70
   823e6:	bf00      	nop
   823e8:	68fb      	ldr	r3, [r7, #12]
   823ea:	687a      	ldr	r2, [r7, #4]
   823ec:	605a      	str	r2, [r3, #4]
   823ee:	e000      	b.n	823f2 <pio_set_peripheral+0x76>
   823f0:	bf00      	nop
   823f2:	371c      	adds	r7, #28
   823f4:	46bd      	mov	sp, r7
   823f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   823fa:	4770      	bx	lr

000823fc <pio_set_input>:
   823fc:	b580      	push	{r7, lr}
   823fe:	b084      	sub	sp, #16
   82400:	af00      	add	r7, sp, #0
   82402:	60f8      	str	r0, [r7, #12]
   82404:	60b9      	str	r1, [r7, #8]
   82406:	607a      	str	r2, [r7, #4]
   82408:	68f8      	ldr	r0, [r7, #12]
   8240a:	68b9      	ldr	r1, [r7, #8]
   8240c:	4b18      	ldr	r3, [pc, #96]	; (82470 <pio_set_input+0x74>)
   8240e:	4798      	blx	r3
   82410:	687b      	ldr	r3, [r7, #4]
   82412:	f003 0301 	and.w	r3, r3, #1
   82416:	68f8      	ldr	r0, [r7, #12]
   82418:	68b9      	ldr	r1, [r7, #8]
   8241a:	461a      	mov	r2, r3
   8241c:	4b15      	ldr	r3, [pc, #84]	; (82474 <pio_set_input+0x78>)
   8241e:	4798      	blx	r3
   82420:	687b      	ldr	r3, [r7, #4]
   82422:	f003 030a 	and.w	r3, r3, #10
   82426:	2b00      	cmp	r3, #0
   82428:	d003      	beq.n	82432 <pio_set_input+0x36>
   8242a:	68fb      	ldr	r3, [r7, #12]
   8242c:	68ba      	ldr	r2, [r7, #8]
   8242e:	621a      	str	r2, [r3, #32]
   82430:	e002      	b.n	82438 <pio_set_input+0x3c>
   82432:	68fb      	ldr	r3, [r7, #12]
   82434:	68ba      	ldr	r2, [r7, #8]
   82436:	625a      	str	r2, [r3, #36]	; 0x24
   82438:	687b      	ldr	r3, [r7, #4]
   8243a:	f003 0302 	and.w	r3, r3, #2
   8243e:	2b00      	cmp	r3, #0
   82440:	d004      	beq.n	8244c <pio_set_input+0x50>
   82442:	68fb      	ldr	r3, [r7, #12]
   82444:	68ba      	ldr	r2, [r7, #8]
   82446:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8244a:	e008      	b.n	8245e <pio_set_input+0x62>
   8244c:	687b      	ldr	r3, [r7, #4]
   8244e:	f003 0308 	and.w	r3, r3, #8
   82452:	2b00      	cmp	r3, #0
   82454:	d003      	beq.n	8245e <pio_set_input+0x62>
   82456:	68fb      	ldr	r3, [r7, #12]
   82458:	68ba      	ldr	r2, [r7, #8]
   8245a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8245e:	68fb      	ldr	r3, [r7, #12]
   82460:	68ba      	ldr	r2, [r7, #8]
   82462:	615a      	str	r2, [r3, #20]
   82464:	68fb      	ldr	r3, [r7, #12]
   82466:	68ba      	ldr	r2, [r7, #8]
   82468:	601a      	str	r2, [r3, #0]
   8246a:	3710      	adds	r7, #16
   8246c:	46bd      	mov	sp, r7
   8246e:	bd80      	pop	{r7, pc}
   82470:	000824dd 	.word	0x000824dd
   82474:	00082351 	.word	0x00082351

00082478 <pio_set_output>:
   82478:	b580      	push	{r7, lr}
   8247a:	b084      	sub	sp, #16
   8247c:	af00      	add	r7, sp, #0
   8247e:	60f8      	str	r0, [r7, #12]
   82480:	60b9      	str	r1, [r7, #8]
   82482:	607a      	str	r2, [r7, #4]
   82484:	603b      	str	r3, [r7, #0]
   82486:	68f8      	ldr	r0, [r7, #12]
   82488:	68b9      	ldr	r1, [r7, #8]
   8248a:	4b12      	ldr	r3, [pc, #72]	; (824d4 <pio_set_output+0x5c>)
   8248c:	4798      	blx	r3
   8248e:	68f8      	ldr	r0, [r7, #12]
   82490:	68b9      	ldr	r1, [r7, #8]
   82492:	69ba      	ldr	r2, [r7, #24]
   82494:	4b10      	ldr	r3, [pc, #64]	; (824d8 <pio_set_output+0x60>)
   82496:	4798      	blx	r3
   82498:	683b      	ldr	r3, [r7, #0]
   8249a:	2b00      	cmp	r3, #0
   8249c:	d003      	beq.n	824a6 <pio_set_output+0x2e>
   8249e:	68fb      	ldr	r3, [r7, #12]
   824a0:	68ba      	ldr	r2, [r7, #8]
   824a2:	651a      	str	r2, [r3, #80]	; 0x50
   824a4:	e002      	b.n	824ac <pio_set_output+0x34>
   824a6:	68fb      	ldr	r3, [r7, #12]
   824a8:	68ba      	ldr	r2, [r7, #8]
   824aa:	655a      	str	r2, [r3, #84]	; 0x54
   824ac:	687b      	ldr	r3, [r7, #4]
   824ae:	2b00      	cmp	r3, #0
   824b0:	d003      	beq.n	824ba <pio_set_output+0x42>
   824b2:	68fb      	ldr	r3, [r7, #12]
   824b4:	68ba      	ldr	r2, [r7, #8]
   824b6:	631a      	str	r2, [r3, #48]	; 0x30
   824b8:	e002      	b.n	824c0 <pio_set_output+0x48>
   824ba:	68fb      	ldr	r3, [r7, #12]
   824bc:	68ba      	ldr	r2, [r7, #8]
   824be:	635a      	str	r2, [r3, #52]	; 0x34
   824c0:	68fb      	ldr	r3, [r7, #12]
   824c2:	68ba      	ldr	r2, [r7, #8]
   824c4:	611a      	str	r2, [r3, #16]
   824c6:	68fb      	ldr	r3, [r7, #12]
   824c8:	68ba      	ldr	r2, [r7, #8]
   824ca:	601a      	str	r2, [r3, #0]
   824cc:	3710      	adds	r7, #16
   824ce:	46bd      	mov	sp, r7
   824d0:	bd80      	pop	{r7, pc}
   824d2:	bf00      	nop
   824d4:	000824dd 	.word	0x000824dd
   824d8:	00082351 	.word	0x00082351

000824dc <pio_disable_interrupt>:
   824dc:	b480      	push	{r7}
   824de:	b083      	sub	sp, #12
   824e0:	af00      	add	r7, sp, #0
   824e2:	6078      	str	r0, [r7, #4]
   824e4:	6039      	str	r1, [r7, #0]
   824e6:	687b      	ldr	r3, [r7, #4]
   824e8:	683a      	ldr	r2, [r7, #0]
   824ea:	645a      	str	r2, [r3, #68]	; 0x44
   824ec:	370c      	adds	r7, #12
   824ee:	46bd      	mov	sp, r7
   824f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   824f4:	4770      	bx	lr
   824f6:	bf00      	nop

000824f8 <pio_get_interrupt_status>:
   824f8:	b480      	push	{r7}
   824fa:	b083      	sub	sp, #12
   824fc:	af00      	add	r7, sp, #0
   824fe:	6078      	str	r0, [r7, #4]
   82500:	687b      	ldr	r3, [r7, #4]
   82502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   82504:	4618      	mov	r0, r3
   82506:	370c      	adds	r7, #12
   82508:	46bd      	mov	sp, r7
   8250a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8250e:	4770      	bx	lr

00082510 <pio_get_interrupt_mask>:
   82510:	b480      	push	{r7}
   82512:	b083      	sub	sp, #12
   82514:	af00      	add	r7, sp, #0
   82516:	6078      	str	r0, [r7, #4]
   82518:	687b      	ldr	r3, [r7, #4]
   8251a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8251c:	4618      	mov	r0, r3
   8251e:	370c      	adds	r7, #12
   82520:	46bd      	mov	sp, r7
   82522:	f85d 7b04 	ldr.w	r7, [sp], #4
   82526:	4770      	bx	lr

00082528 <pio_set_pin_high>:
   82528:	b480      	push	{r7}
   8252a:	b085      	sub	sp, #20
   8252c:	af00      	add	r7, sp, #0
   8252e:	6078      	str	r0, [r7, #4]
   82530:	687b      	ldr	r3, [r7, #4]
   82532:	095b      	lsrs	r3, r3, #5
   82534:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82538:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8253c:	025b      	lsls	r3, r3, #9
   8253e:	60fb      	str	r3, [r7, #12]
   82540:	687b      	ldr	r3, [r7, #4]
   82542:	f003 031f 	and.w	r3, r3, #31
   82546:	2201      	movs	r2, #1
   82548:	fa02 f303 	lsl.w	r3, r2, r3
   8254c:	461a      	mov	r2, r3
   8254e:	68fb      	ldr	r3, [r7, #12]
   82550:	631a      	str	r2, [r3, #48]	; 0x30
   82552:	3714      	adds	r7, #20
   82554:	46bd      	mov	sp, r7
   82556:	f85d 7b04 	ldr.w	r7, [sp], #4
   8255a:	4770      	bx	lr

0008255c <pio_set_pin_low>:
   8255c:	b480      	push	{r7}
   8255e:	b085      	sub	sp, #20
   82560:	af00      	add	r7, sp, #0
   82562:	6078      	str	r0, [r7, #4]
   82564:	687b      	ldr	r3, [r7, #4]
   82566:	095b      	lsrs	r3, r3, #5
   82568:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8256c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82570:	025b      	lsls	r3, r3, #9
   82572:	60fb      	str	r3, [r7, #12]
   82574:	687b      	ldr	r3, [r7, #4]
   82576:	f003 031f 	and.w	r3, r3, #31
   8257a:	2201      	movs	r2, #1
   8257c:	fa02 f303 	lsl.w	r3, r2, r3
   82580:	461a      	mov	r2, r3
   82582:	68fb      	ldr	r3, [r7, #12]
   82584:	635a      	str	r2, [r3, #52]	; 0x34
   82586:	3714      	adds	r7, #20
   82588:	46bd      	mov	sp, r7
   8258a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8258e:	4770      	bx	lr

00082590 <pio_toggle_pin>:
   82590:	b480      	push	{r7}
   82592:	b085      	sub	sp, #20
   82594:	af00      	add	r7, sp, #0
   82596:	6078      	str	r0, [r7, #4]
   82598:	687b      	ldr	r3, [r7, #4]
   8259a:	095b      	lsrs	r3, r3, #5
   8259c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   825a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   825a4:	025b      	lsls	r3, r3, #9
   825a6:	60fb      	str	r3, [r7, #12]
   825a8:	68fb      	ldr	r3, [r7, #12]
   825aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   825ac:	687b      	ldr	r3, [r7, #4]
   825ae:	f003 031f 	and.w	r3, r3, #31
   825b2:	2101      	movs	r1, #1
   825b4:	fa01 f303 	lsl.w	r3, r1, r3
   825b8:	4013      	ands	r3, r2
   825ba:	2b00      	cmp	r3, #0
   825bc:	d009      	beq.n	825d2 <pio_toggle_pin+0x42>
   825be:	687b      	ldr	r3, [r7, #4]
   825c0:	f003 031f 	and.w	r3, r3, #31
   825c4:	2201      	movs	r2, #1
   825c6:	fa02 f303 	lsl.w	r3, r2, r3
   825ca:	461a      	mov	r2, r3
   825cc:	68fb      	ldr	r3, [r7, #12]
   825ce:	635a      	str	r2, [r3, #52]	; 0x34
   825d0:	e008      	b.n	825e4 <pio_toggle_pin+0x54>
   825d2:	687b      	ldr	r3, [r7, #4]
   825d4:	f003 031f 	and.w	r3, r3, #31
   825d8:	2201      	movs	r2, #1
   825da:	fa02 f303 	lsl.w	r3, r2, r3
   825de:	461a      	mov	r2, r3
   825e0:	68fb      	ldr	r3, [r7, #12]
   825e2:	631a      	str	r2, [r3, #48]	; 0x30
   825e4:	3714      	adds	r7, #20
   825e6:	46bd      	mov	sp, r7
   825e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   825ec:	4770      	bx	lr
   825ee:	bf00      	nop

000825f0 <pio_configure_pin>:
   825f0:	b590      	push	{r4, r7, lr}
   825f2:	b087      	sub	sp, #28
   825f4:	af02      	add	r7, sp, #8
   825f6:	6078      	str	r0, [r7, #4]
   825f8:	6039      	str	r1, [r7, #0]
   825fa:	687b      	ldr	r3, [r7, #4]
   825fc:	095b      	lsrs	r3, r3, #5
   825fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82602:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82606:	025b      	lsls	r3, r3, #9
   82608:	60fb      	str	r3, [r7, #12]
   8260a:	683b      	ldr	r3, [r7, #0]
   8260c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82610:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82614:	d048      	beq.n	826a8 <pio_configure_pin+0xb8>
   82616:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8261a:	d806      	bhi.n	8262a <pio_configure_pin+0x3a>
   8261c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82620:	d00a      	beq.n	82638 <pio_configure_pin+0x48>
   82622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82626:	d023      	beq.n	82670 <pio_configure_pin+0x80>
   82628:	e070      	b.n	8270c <pio_configure_pin+0x11c>
   8262a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8262e:	d047      	beq.n	826c0 <pio_configure_pin+0xd0>
   82630:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82634:	d044      	beq.n	826c0 <pio_configure_pin+0xd0>
   82636:	e069      	b.n	8270c <pio_configure_pin+0x11c>
   82638:	687b      	ldr	r3, [r7, #4]
   8263a:	f003 031f 	and.w	r3, r3, #31
   8263e:	2201      	movs	r2, #1
   82640:	fa02 f303 	lsl.w	r3, r2, r3
   82644:	68f8      	ldr	r0, [r7, #12]
   82646:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8264a:	461a      	mov	r2, r3
   8264c:	4b33      	ldr	r3, [pc, #204]	; (8271c <pio_configure_pin+0x12c>)
   8264e:	4798      	blx	r3
   82650:	687b      	ldr	r3, [r7, #4]
   82652:	f003 031f 	and.w	r3, r3, #31
   82656:	2201      	movs	r2, #1
   82658:	fa02 f303 	lsl.w	r3, r2, r3
   8265c:	461a      	mov	r2, r3
   8265e:	683b      	ldr	r3, [r7, #0]
   82660:	f003 0301 	and.w	r3, r3, #1
   82664:	68f8      	ldr	r0, [r7, #12]
   82666:	4611      	mov	r1, r2
   82668:	461a      	mov	r2, r3
   8266a:	4b2d      	ldr	r3, [pc, #180]	; (82720 <pio_configure_pin+0x130>)
   8266c:	4798      	blx	r3
   8266e:	e04f      	b.n	82710 <pio_configure_pin+0x120>
   82670:	687b      	ldr	r3, [r7, #4]
   82672:	f003 031f 	and.w	r3, r3, #31
   82676:	2201      	movs	r2, #1
   82678:	fa02 f303 	lsl.w	r3, r2, r3
   8267c:	68f8      	ldr	r0, [r7, #12]
   8267e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82682:	461a      	mov	r2, r3
   82684:	4b25      	ldr	r3, [pc, #148]	; (8271c <pio_configure_pin+0x12c>)
   82686:	4798      	blx	r3
   82688:	687b      	ldr	r3, [r7, #4]
   8268a:	f003 031f 	and.w	r3, r3, #31
   8268e:	2201      	movs	r2, #1
   82690:	fa02 f303 	lsl.w	r3, r2, r3
   82694:	461a      	mov	r2, r3
   82696:	683b      	ldr	r3, [r7, #0]
   82698:	f003 0301 	and.w	r3, r3, #1
   8269c:	68f8      	ldr	r0, [r7, #12]
   8269e:	4611      	mov	r1, r2
   826a0:	461a      	mov	r2, r3
   826a2:	4b1f      	ldr	r3, [pc, #124]	; (82720 <pio_configure_pin+0x130>)
   826a4:	4798      	blx	r3
   826a6:	e033      	b.n	82710 <pio_configure_pin+0x120>
   826a8:	687b      	ldr	r3, [r7, #4]
   826aa:	f003 031f 	and.w	r3, r3, #31
   826ae:	2201      	movs	r2, #1
   826b0:	fa02 f303 	lsl.w	r3, r2, r3
   826b4:	68f8      	ldr	r0, [r7, #12]
   826b6:	4619      	mov	r1, r3
   826b8:	683a      	ldr	r2, [r7, #0]
   826ba:	4b1a      	ldr	r3, [pc, #104]	; (82724 <pio_configure_pin+0x134>)
   826bc:	4798      	blx	r3
   826be:	e027      	b.n	82710 <pio_configure_pin+0x120>
   826c0:	687b      	ldr	r3, [r7, #4]
   826c2:	f003 031f 	and.w	r3, r3, #31
   826c6:	2201      	movs	r2, #1
   826c8:	fa02 f303 	lsl.w	r3, r2, r3
   826cc:	4619      	mov	r1, r3
   826ce:	683b      	ldr	r3, [r7, #0]
   826d0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   826d4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   826d8:	bf14      	ite	ne
   826da:	2300      	movne	r3, #0
   826dc:	2301      	moveq	r3, #1
   826de:	b2db      	uxtb	r3, r3
   826e0:	461a      	mov	r2, r3
   826e2:	683b      	ldr	r3, [r7, #0]
   826e4:	f003 0304 	and.w	r3, r3, #4
   826e8:	2b00      	cmp	r3, #0
   826ea:	bf0c      	ite	eq
   826ec:	2300      	moveq	r3, #0
   826ee:	2301      	movne	r3, #1
   826f0:	b2db      	uxtb	r3, r3
   826f2:	6838      	ldr	r0, [r7, #0]
   826f4:	f000 0001 	and.w	r0, r0, #1
   826f8:	2800      	cmp	r0, #0
   826fa:	bf0c      	ite	eq
   826fc:	2000      	moveq	r0, #0
   826fe:	2001      	movne	r0, #1
   82700:	b2c0      	uxtb	r0, r0
   82702:	9000      	str	r0, [sp, #0]
   82704:	68f8      	ldr	r0, [r7, #12]
   82706:	4c08      	ldr	r4, [pc, #32]	; (82728 <pio_configure_pin+0x138>)
   82708:	47a0      	blx	r4
   8270a:	e001      	b.n	82710 <pio_configure_pin+0x120>
   8270c:	2300      	movs	r3, #0
   8270e:	e000      	b.n	82712 <pio_configure_pin+0x122>
   82710:	2301      	movs	r3, #1
   82712:	4618      	mov	r0, r3
   82714:	3714      	adds	r7, #20
   82716:	46bd      	mov	sp, r7
   82718:	bd90      	pop	{r4, r7, pc}
   8271a:	bf00      	nop
   8271c:	0008237d 	.word	0x0008237d
   82720:	00082351 	.word	0x00082351
   82724:	000823fd 	.word	0x000823fd
   82728:	00082479 	.word	0x00082479

0008272c <pio_configure_pin_group>:
   8272c:	b590      	push	{r4, r7, lr}
   8272e:	b087      	sub	sp, #28
   82730:	af02      	add	r7, sp, #8
   82732:	60f8      	str	r0, [r7, #12]
   82734:	60b9      	str	r1, [r7, #8]
   82736:	607a      	str	r2, [r7, #4]
   82738:	687b      	ldr	r3, [r7, #4]
   8273a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8273e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82742:	d02e      	beq.n	827a2 <pio_configure_pin_group+0x76>
   82744:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82748:	d806      	bhi.n	82758 <pio_configure_pin_group+0x2c>
   8274a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8274e:	d00a      	beq.n	82766 <pio_configure_pin_group+0x3a>
   82750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82754:	d016      	beq.n	82784 <pio_configure_pin_group+0x58>
   82756:	e04a      	b.n	827ee <pio_configure_pin_group+0xc2>
   82758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8275c:	d027      	beq.n	827ae <pio_configure_pin_group+0x82>
   8275e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82762:	d024      	beq.n	827ae <pio_configure_pin_group+0x82>
   82764:	e043      	b.n	827ee <pio_configure_pin_group+0xc2>
   82766:	68f8      	ldr	r0, [r7, #12]
   82768:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8276c:	68ba      	ldr	r2, [r7, #8]
   8276e:	4b23      	ldr	r3, [pc, #140]	; (827fc <pio_configure_pin_group+0xd0>)
   82770:	4798      	blx	r3
   82772:	687b      	ldr	r3, [r7, #4]
   82774:	f003 0301 	and.w	r3, r3, #1
   82778:	68f8      	ldr	r0, [r7, #12]
   8277a:	68b9      	ldr	r1, [r7, #8]
   8277c:	461a      	mov	r2, r3
   8277e:	4b20      	ldr	r3, [pc, #128]	; (82800 <pio_configure_pin_group+0xd4>)
   82780:	4798      	blx	r3
   82782:	e036      	b.n	827f2 <pio_configure_pin_group+0xc6>
   82784:	68f8      	ldr	r0, [r7, #12]
   82786:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8278a:	68ba      	ldr	r2, [r7, #8]
   8278c:	4b1b      	ldr	r3, [pc, #108]	; (827fc <pio_configure_pin_group+0xd0>)
   8278e:	4798      	blx	r3
   82790:	687b      	ldr	r3, [r7, #4]
   82792:	f003 0301 	and.w	r3, r3, #1
   82796:	68f8      	ldr	r0, [r7, #12]
   82798:	68b9      	ldr	r1, [r7, #8]
   8279a:	461a      	mov	r2, r3
   8279c:	4b18      	ldr	r3, [pc, #96]	; (82800 <pio_configure_pin_group+0xd4>)
   8279e:	4798      	blx	r3
   827a0:	e027      	b.n	827f2 <pio_configure_pin_group+0xc6>
   827a2:	68f8      	ldr	r0, [r7, #12]
   827a4:	68b9      	ldr	r1, [r7, #8]
   827a6:	687a      	ldr	r2, [r7, #4]
   827a8:	4b16      	ldr	r3, [pc, #88]	; (82804 <pio_configure_pin_group+0xd8>)
   827aa:	4798      	blx	r3
   827ac:	e021      	b.n	827f2 <pio_configure_pin_group+0xc6>
   827ae:	687b      	ldr	r3, [r7, #4]
   827b0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   827b4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   827b8:	bf14      	ite	ne
   827ba:	2300      	movne	r3, #0
   827bc:	2301      	moveq	r3, #1
   827be:	b2db      	uxtb	r3, r3
   827c0:	461a      	mov	r2, r3
   827c2:	687b      	ldr	r3, [r7, #4]
   827c4:	f003 0304 	and.w	r3, r3, #4
   827c8:	2b00      	cmp	r3, #0
   827ca:	bf0c      	ite	eq
   827cc:	2300      	moveq	r3, #0
   827ce:	2301      	movne	r3, #1
   827d0:	b2db      	uxtb	r3, r3
   827d2:	6879      	ldr	r1, [r7, #4]
   827d4:	f001 0101 	and.w	r1, r1, #1
   827d8:	2900      	cmp	r1, #0
   827da:	bf0c      	ite	eq
   827dc:	2100      	moveq	r1, #0
   827de:	2101      	movne	r1, #1
   827e0:	b2c9      	uxtb	r1, r1
   827e2:	9100      	str	r1, [sp, #0]
   827e4:	68f8      	ldr	r0, [r7, #12]
   827e6:	68b9      	ldr	r1, [r7, #8]
   827e8:	4c07      	ldr	r4, [pc, #28]	; (82808 <pio_configure_pin_group+0xdc>)
   827ea:	47a0      	blx	r4
   827ec:	e001      	b.n	827f2 <pio_configure_pin_group+0xc6>
   827ee:	2300      	movs	r3, #0
   827f0:	e000      	b.n	827f4 <pio_configure_pin_group+0xc8>
   827f2:	2301      	movs	r3, #1
   827f4:	4618      	mov	r0, r3
   827f6:	3714      	adds	r7, #20
   827f8:	46bd      	mov	sp, r7
   827fa:	bd90      	pop	{r4, r7, pc}
   827fc:	0008237d 	.word	0x0008237d
   82800:	00082351 	.word	0x00082351
   82804:	000823fd 	.word	0x000823fd
   82808:	00082479 	.word	0x00082479

0008280c <pio_handler_process>:
   8280c:	b580      	push	{r7, lr}
   8280e:	b084      	sub	sp, #16
   82810:	af00      	add	r7, sp, #0
   82812:	6078      	str	r0, [r7, #4]
   82814:	6039      	str	r1, [r7, #0]
   82816:	6878      	ldr	r0, [r7, #4]
   82818:	4b22      	ldr	r3, [pc, #136]	; (828a4 <pio_handler_process+0x98>)
   8281a:	4798      	blx	r3
   8281c:	60f8      	str	r0, [r7, #12]
   8281e:	6878      	ldr	r0, [r7, #4]
   82820:	4b21      	ldr	r3, [pc, #132]	; (828a8 <pio_handler_process+0x9c>)
   82822:	4798      	blx	r3
   82824:	4603      	mov	r3, r0
   82826:	68fa      	ldr	r2, [r7, #12]
   82828:	4013      	ands	r3, r2
   8282a:	60fb      	str	r3, [r7, #12]
   8282c:	68fb      	ldr	r3, [r7, #12]
   8282e:	2b00      	cmp	r3, #0
   82830:	d035      	beq.n	8289e <pio_handler_process+0x92>
   82832:	2300      	movs	r3, #0
   82834:	60bb      	str	r3, [r7, #8]
   82836:	e02f      	b.n	82898 <pio_handler_process+0x8c>
   82838:	4a1c      	ldr	r2, [pc, #112]	; (828ac <pio_handler_process+0xa0>)
   8283a:	68bb      	ldr	r3, [r7, #8]
   8283c:	011b      	lsls	r3, r3, #4
   8283e:	4413      	add	r3, r2
   82840:	681a      	ldr	r2, [r3, #0]
   82842:	683b      	ldr	r3, [r7, #0]
   82844:	429a      	cmp	r2, r3
   82846:	d124      	bne.n	82892 <pio_handler_process+0x86>
   82848:	4a18      	ldr	r2, [pc, #96]	; (828ac <pio_handler_process+0xa0>)
   8284a:	68bb      	ldr	r3, [r7, #8]
   8284c:	011b      	lsls	r3, r3, #4
   8284e:	4413      	add	r3, r2
   82850:	685a      	ldr	r2, [r3, #4]
   82852:	68fb      	ldr	r3, [r7, #12]
   82854:	4013      	ands	r3, r2
   82856:	2b00      	cmp	r3, #0
   82858:	d01b      	beq.n	82892 <pio_handler_process+0x86>
   8285a:	4a14      	ldr	r2, [pc, #80]	; (828ac <pio_handler_process+0xa0>)
   8285c:	68bb      	ldr	r3, [r7, #8]
   8285e:	011b      	lsls	r3, r3, #4
   82860:	4413      	add	r3, r2
   82862:	3308      	adds	r3, #8
   82864:	685b      	ldr	r3, [r3, #4]
   82866:	4911      	ldr	r1, [pc, #68]	; (828ac <pio_handler_process+0xa0>)
   82868:	68ba      	ldr	r2, [r7, #8]
   8286a:	0112      	lsls	r2, r2, #4
   8286c:	440a      	add	r2, r1
   8286e:	6811      	ldr	r1, [r2, #0]
   82870:	480e      	ldr	r0, [pc, #56]	; (828ac <pio_handler_process+0xa0>)
   82872:	68ba      	ldr	r2, [r7, #8]
   82874:	0112      	lsls	r2, r2, #4
   82876:	4402      	add	r2, r0
   82878:	6852      	ldr	r2, [r2, #4]
   8287a:	4608      	mov	r0, r1
   8287c:	4611      	mov	r1, r2
   8287e:	4798      	blx	r3
   82880:	4a0a      	ldr	r2, [pc, #40]	; (828ac <pio_handler_process+0xa0>)
   82882:	68bb      	ldr	r3, [r7, #8]
   82884:	011b      	lsls	r3, r3, #4
   82886:	4413      	add	r3, r2
   82888:	685b      	ldr	r3, [r3, #4]
   8288a:	43db      	mvns	r3, r3
   8288c:	68fa      	ldr	r2, [r7, #12]
   8288e:	4013      	ands	r3, r2
   82890:	60fb      	str	r3, [r7, #12]
   82892:	68bb      	ldr	r3, [r7, #8]
   82894:	3301      	adds	r3, #1
   82896:	60bb      	str	r3, [r7, #8]
   82898:	68fb      	ldr	r3, [r7, #12]
   8289a:	2b00      	cmp	r3, #0
   8289c:	d1cc      	bne.n	82838 <pio_handler_process+0x2c>
   8289e:	3710      	adds	r7, #16
   828a0:	46bd      	mov	sp, r7
   828a2:	bd80      	pop	{r7, pc}
   828a4:	000824f9 	.word	0x000824f9
   828a8:	00082511 	.word	0x00082511
   828ac:	20070474 	.word	0x20070474

000828b0 <PIOA_Handler>:
   828b0:	b580      	push	{r7, lr}
   828b2:	af00      	add	r7, sp, #0
   828b4:	4802      	ldr	r0, [pc, #8]	; (828c0 <PIOA_Handler+0x10>)
   828b6:	210b      	movs	r1, #11
   828b8:	4b02      	ldr	r3, [pc, #8]	; (828c4 <PIOA_Handler+0x14>)
   828ba:	4798      	blx	r3
   828bc:	bd80      	pop	{r7, pc}
   828be:	bf00      	nop
   828c0:	400e0e00 	.word	0x400e0e00
   828c4:	0008280d 	.word	0x0008280d

000828c8 <PIOB_Handler>:
   828c8:	b580      	push	{r7, lr}
   828ca:	af00      	add	r7, sp, #0
   828cc:	4802      	ldr	r0, [pc, #8]	; (828d8 <PIOB_Handler+0x10>)
   828ce:	210c      	movs	r1, #12
   828d0:	4b02      	ldr	r3, [pc, #8]	; (828dc <PIOB_Handler+0x14>)
   828d2:	4798      	blx	r3
   828d4:	bd80      	pop	{r7, pc}
   828d6:	bf00      	nop
   828d8:	400e1000 	.word	0x400e1000
   828dc:	0008280d 	.word	0x0008280d

000828e0 <PIOC_Handler>:
   828e0:	b580      	push	{r7, lr}
   828e2:	af00      	add	r7, sp, #0
   828e4:	4802      	ldr	r0, [pc, #8]	; (828f0 <PIOC_Handler+0x10>)
   828e6:	210d      	movs	r1, #13
   828e8:	4b02      	ldr	r3, [pc, #8]	; (828f4 <PIOC_Handler+0x14>)
   828ea:	4798      	blx	r3
   828ec:	bd80      	pop	{r7, pc}
   828ee:	bf00      	nop
   828f0:	400e1200 	.word	0x400e1200
   828f4:	0008280d 	.word	0x0008280d

000828f8 <PIOD_Handler>:
   828f8:	b580      	push	{r7, lr}
   828fa:	af00      	add	r7, sp, #0
   828fc:	4802      	ldr	r0, [pc, #8]	; (82908 <PIOD_Handler+0x10>)
   828fe:	210e      	movs	r1, #14
   82900:	4b02      	ldr	r3, [pc, #8]	; (8290c <PIOD_Handler+0x14>)
   82902:	4798      	blx	r3
   82904:	bd80      	pop	{r7, pc}
   82906:	bf00      	nop
   82908:	400e1400 	.word	0x400e1400
   8290c:	0008280d 	.word	0x0008280d

00082910 <pmc_switch_mck_to_pllack>:
   82910:	b480      	push	{r7}
   82912:	b085      	sub	sp, #20
   82914:	af00      	add	r7, sp, #0
   82916:	6078      	str	r0, [r7, #4]
   82918:	4b1d      	ldr	r3, [pc, #116]	; (82990 <pmc_switch_mck_to_pllack+0x80>)
   8291a:	4a1d      	ldr	r2, [pc, #116]	; (82990 <pmc_switch_mck_to_pllack+0x80>)
   8291c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8291e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   82922:	687a      	ldr	r2, [r7, #4]
   82924:	430a      	orrs	r2, r1
   82926:	631a      	str	r2, [r3, #48]	; 0x30
   82928:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8292c:	60fb      	str	r3, [r7, #12]
   8292e:	e007      	b.n	82940 <pmc_switch_mck_to_pllack+0x30>
   82930:	68fb      	ldr	r3, [r7, #12]
   82932:	2b00      	cmp	r3, #0
   82934:	d101      	bne.n	8293a <pmc_switch_mck_to_pllack+0x2a>
   82936:	2301      	movs	r3, #1
   82938:	e023      	b.n	82982 <pmc_switch_mck_to_pllack+0x72>
   8293a:	68fb      	ldr	r3, [r7, #12]
   8293c:	3b01      	subs	r3, #1
   8293e:	60fb      	str	r3, [r7, #12]
   82940:	4b13      	ldr	r3, [pc, #76]	; (82990 <pmc_switch_mck_to_pllack+0x80>)
   82942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82944:	f003 0308 	and.w	r3, r3, #8
   82948:	2b00      	cmp	r3, #0
   8294a:	d0f1      	beq.n	82930 <pmc_switch_mck_to_pllack+0x20>
   8294c:	4b10      	ldr	r3, [pc, #64]	; (82990 <pmc_switch_mck_to_pllack+0x80>)
   8294e:	4a10      	ldr	r2, [pc, #64]	; (82990 <pmc_switch_mck_to_pllack+0x80>)
   82950:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82952:	f022 0203 	bic.w	r2, r2, #3
   82956:	f042 0202 	orr.w	r2, r2, #2
   8295a:	631a      	str	r2, [r3, #48]	; 0x30
   8295c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82960:	60fb      	str	r3, [r7, #12]
   82962:	e007      	b.n	82974 <pmc_switch_mck_to_pllack+0x64>
   82964:	68fb      	ldr	r3, [r7, #12]
   82966:	2b00      	cmp	r3, #0
   82968:	d101      	bne.n	8296e <pmc_switch_mck_to_pllack+0x5e>
   8296a:	2301      	movs	r3, #1
   8296c:	e009      	b.n	82982 <pmc_switch_mck_to_pllack+0x72>
   8296e:	68fb      	ldr	r3, [r7, #12]
   82970:	3b01      	subs	r3, #1
   82972:	60fb      	str	r3, [r7, #12]
   82974:	4b06      	ldr	r3, [pc, #24]	; (82990 <pmc_switch_mck_to_pllack+0x80>)
   82976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82978:	f003 0308 	and.w	r3, r3, #8
   8297c:	2b00      	cmp	r3, #0
   8297e:	d0f1      	beq.n	82964 <pmc_switch_mck_to_pllack+0x54>
   82980:	2300      	movs	r3, #0
   82982:	4618      	mov	r0, r3
   82984:	3714      	adds	r7, #20
   82986:	46bd      	mov	sp, r7
   82988:	f85d 7b04 	ldr.w	r7, [sp], #4
   8298c:	4770      	bx	lr
   8298e:	bf00      	nop
   82990:	400e0600 	.word	0x400e0600

00082994 <pmc_switch_sclk_to_32kxtal>:
   82994:	b480      	push	{r7}
   82996:	b083      	sub	sp, #12
   82998:	af00      	add	r7, sp, #0
   8299a:	6078      	str	r0, [r7, #4]
   8299c:	687b      	ldr	r3, [r7, #4]
   8299e:	2b01      	cmp	r3, #1
   829a0:	d107      	bne.n	829b2 <pmc_switch_sclk_to_32kxtal+0x1e>
   829a2:	4a0a      	ldr	r2, [pc, #40]	; (829cc <pmc_switch_sclk_to_32kxtal+0x38>)
   829a4:	4b09      	ldr	r3, [pc, #36]	; (829cc <pmc_switch_sclk_to_32kxtal+0x38>)
   829a6:	689b      	ldr	r3, [r3, #8]
   829a8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   829ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   829b0:	6093      	str	r3, [r2, #8]
   829b2:	4a06      	ldr	r2, [pc, #24]	; (829cc <pmc_switch_sclk_to_32kxtal+0x38>)
   829b4:	4b05      	ldr	r3, [pc, #20]	; (829cc <pmc_switch_sclk_to_32kxtal+0x38>)
   829b6:	681b      	ldr	r3, [r3, #0]
   829b8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   829bc:	f043 0308 	orr.w	r3, r3, #8
   829c0:	6013      	str	r3, [r2, #0]
   829c2:	370c      	adds	r7, #12
   829c4:	46bd      	mov	sp, r7
   829c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   829ca:	4770      	bx	lr
   829cc:	400e1a10 	.word	0x400e1a10

000829d0 <pmc_osc_is_ready_32kxtal>:
   829d0:	b480      	push	{r7}
   829d2:	af00      	add	r7, sp, #0
   829d4:	4b09      	ldr	r3, [pc, #36]	; (829fc <pmc_osc_is_ready_32kxtal+0x2c>)
   829d6:	695b      	ldr	r3, [r3, #20]
   829d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   829dc:	2b00      	cmp	r3, #0
   829de:	d007      	beq.n	829f0 <pmc_osc_is_ready_32kxtal+0x20>
   829e0:	4b07      	ldr	r3, [pc, #28]	; (82a00 <pmc_osc_is_ready_32kxtal+0x30>)
   829e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   829e8:	2b00      	cmp	r3, #0
   829ea:	d001      	beq.n	829f0 <pmc_osc_is_ready_32kxtal+0x20>
   829ec:	2301      	movs	r3, #1
   829ee:	e000      	b.n	829f2 <pmc_osc_is_ready_32kxtal+0x22>
   829f0:	2300      	movs	r3, #0
   829f2:	4618      	mov	r0, r3
   829f4:	46bd      	mov	sp, r7
   829f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   829fa:	4770      	bx	lr
   829fc:	400e1a10 	.word	0x400e1a10
   82a00:	400e0600 	.word	0x400e0600

00082a04 <pmc_switch_mainck_to_fastrc>:
   82a04:	b480      	push	{r7}
   82a06:	b085      	sub	sp, #20
   82a08:	af00      	add	r7, sp, #0
   82a0a:	6078      	str	r0, [r7, #4]
   82a0c:	2300      	movs	r3, #0
   82a0e:	60fb      	str	r3, [r7, #12]
   82a10:	4b21      	ldr	r3, [pc, #132]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a12:	6a1b      	ldr	r3, [r3, #32]
   82a14:	f003 0301 	and.w	r3, r3, #1
   82a18:	2b00      	cmp	r3, #0
   82a1a:	d00e      	beq.n	82a3a <pmc_switch_mainck_to_fastrc+0x36>
   82a1c:	4a1e      	ldr	r2, [pc, #120]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a1e:	4b1e      	ldr	r3, [pc, #120]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a20:	6a1b      	ldr	r3, [r3, #32]
   82a22:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82a26:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   82a2a:	6879      	ldr	r1, [r7, #4]
   82a2c:	430b      	orrs	r3, r1
   82a2e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82a32:	f043 0308 	orr.w	r3, r3, #8
   82a36:	6213      	str	r3, [r2, #32]
   82a38:	e00b      	b.n	82a52 <pmc_switch_mainck_to_fastrc+0x4e>
   82a3a:	2301      	movs	r3, #1
   82a3c:	60fb      	str	r3, [r7, #12]
   82a3e:	4a16      	ldr	r2, [pc, #88]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a40:	4b15      	ldr	r3, [pc, #84]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a42:	6a19      	ldr	r1, [r3, #32]
   82a44:	4b15      	ldr	r3, [pc, #84]	; (82a9c <pmc_switch_mainck_to_fastrc+0x98>)
   82a46:	400b      	ands	r3, r1
   82a48:	6879      	ldr	r1, [r7, #4]
   82a4a:	4319      	orrs	r1, r3
   82a4c:	4b14      	ldr	r3, [pc, #80]	; (82aa0 <pmc_switch_mainck_to_fastrc+0x9c>)
   82a4e:	430b      	orrs	r3, r1
   82a50:	6213      	str	r3, [r2, #32]
   82a52:	bf00      	nop
   82a54:	4b10      	ldr	r3, [pc, #64]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82a5c:	2b00      	cmp	r3, #0
   82a5e:	d0f9      	beq.n	82a54 <pmc_switch_mainck_to_fastrc+0x50>
   82a60:	4a0d      	ldr	r2, [pc, #52]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a62:	4b0d      	ldr	r3, [pc, #52]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a64:	6a1b      	ldr	r3, [r3, #32]
   82a66:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82a6e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82a72:	6213      	str	r3, [r2, #32]
   82a74:	68fb      	ldr	r3, [r7, #12]
   82a76:	2b00      	cmp	r3, #0
   82a78:	d009      	beq.n	82a8e <pmc_switch_mainck_to_fastrc+0x8a>
   82a7a:	4a07      	ldr	r2, [pc, #28]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a7c:	4b06      	ldr	r3, [pc, #24]	; (82a98 <pmc_switch_mainck_to_fastrc+0x94>)
   82a7e:	6a1b      	ldr	r3, [r3, #32]
   82a80:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82a84:	f023 0301 	bic.w	r3, r3, #1
   82a88:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82a8c:	6213      	str	r3, [r2, #32]
   82a8e:	3714      	adds	r7, #20
   82a90:	46bd      	mov	sp, r7
   82a92:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a96:	4770      	bx	lr
   82a98:	400e0600 	.word	0x400e0600
   82a9c:	ffc8c086 	.word	0xffc8c086
   82aa0:	00373f09 	.word	0x00373f09

00082aa4 <pmc_switch_mainck_to_xtal>:
   82aa4:	b480      	push	{r7}
   82aa6:	b083      	sub	sp, #12
   82aa8:	af00      	add	r7, sp, #0
   82aaa:	6078      	str	r0, [r7, #4]
   82aac:	687b      	ldr	r3, [r7, #4]
   82aae:	2b00      	cmp	r3, #0
   82ab0:	d008      	beq.n	82ac4 <pmc_switch_mainck_to_xtal+0x20>
   82ab2:	4912      	ldr	r1, [pc, #72]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ab4:	4b11      	ldr	r3, [pc, #68]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ab6:	6a1b      	ldr	r3, [r3, #32]
   82ab8:	4a11      	ldr	r2, [pc, #68]	; (82b00 <pmc_switch_mainck_to_xtal+0x5c>)
   82aba:	401a      	ands	r2, r3
   82abc:	4b11      	ldr	r3, [pc, #68]	; (82b04 <pmc_switch_mainck_to_xtal+0x60>)
   82abe:	4313      	orrs	r3, r2
   82ac0:	620b      	str	r3, [r1, #32]
   82ac2:	e016      	b.n	82af2 <pmc_switch_mainck_to_xtal+0x4e>
   82ac4:	490d      	ldr	r1, [pc, #52]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ac6:	4b0d      	ldr	r3, [pc, #52]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ac8:	6a1b      	ldr	r3, [r3, #32]
   82aca:	4a0f      	ldr	r2, [pc, #60]	; (82b08 <pmc_switch_mainck_to_xtal+0x64>)
   82acc:	401a      	ands	r2, r3
   82ace:	4b0f      	ldr	r3, [pc, #60]	; (82b0c <pmc_switch_mainck_to_xtal+0x68>)
   82ad0:	4313      	orrs	r3, r2
   82ad2:	620b      	str	r3, [r1, #32]
   82ad4:	bf00      	nop
   82ad6:	4b09      	ldr	r3, [pc, #36]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ada:	f003 0301 	and.w	r3, r3, #1
   82ade:	2b00      	cmp	r3, #0
   82ae0:	d0f9      	beq.n	82ad6 <pmc_switch_mainck_to_xtal+0x32>
   82ae2:	4a06      	ldr	r2, [pc, #24]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ae4:	4b05      	ldr	r3, [pc, #20]	; (82afc <pmc_switch_mainck_to_xtal+0x58>)
   82ae6:	6a1b      	ldr	r3, [r3, #32]
   82ae8:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82af0:	6213      	str	r3, [r2, #32]
   82af2:	370c      	adds	r7, #12
   82af4:	46bd      	mov	sp, r7
   82af6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82afa:	4770      	bx	lr
   82afc:	400e0600 	.word	0x400e0600
   82b00:	fec8fffc 	.word	0xfec8fffc
   82b04:	01370002 	.word	0x01370002
   82b08:	ffc8c0fc 	.word	0xffc8c0fc
   82b0c:	00373f01 	.word	0x00373f01

00082b10 <pmc_osc_is_ready_mainck>:
   82b10:	b480      	push	{r7}
   82b12:	af00      	add	r7, sp, #0
   82b14:	4b04      	ldr	r3, [pc, #16]	; (82b28 <pmc_osc_is_ready_mainck+0x18>)
   82b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   82b1c:	4618      	mov	r0, r3
   82b1e:	46bd      	mov	sp, r7
   82b20:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b24:	4770      	bx	lr
   82b26:	bf00      	nop
   82b28:	400e0600 	.word	0x400e0600

00082b2c <pmc_disable_pllack>:
   82b2c:	b480      	push	{r7}
   82b2e:	af00      	add	r7, sp, #0
   82b30:	4b03      	ldr	r3, [pc, #12]	; (82b40 <pmc_disable_pllack+0x14>)
   82b32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82b36:	629a      	str	r2, [r3, #40]	; 0x28
   82b38:	46bd      	mov	sp, r7
   82b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b3e:	4770      	bx	lr
   82b40:	400e0600 	.word	0x400e0600

00082b44 <pmc_is_locked_pllack>:
   82b44:	b480      	push	{r7}
   82b46:	af00      	add	r7, sp, #0
   82b48:	4b04      	ldr	r3, [pc, #16]	; (82b5c <pmc_is_locked_pllack+0x18>)
   82b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b4c:	f003 0302 	and.w	r3, r3, #2
   82b50:	4618      	mov	r0, r3
   82b52:	46bd      	mov	sp, r7
   82b54:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b58:	4770      	bx	lr
   82b5a:	bf00      	nop
   82b5c:	400e0600 	.word	0x400e0600

00082b60 <pmc_is_locked_upll>:
   82b60:	b480      	push	{r7}
   82b62:	af00      	add	r7, sp, #0
   82b64:	4b04      	ldr	r3, [pc, #16]	; (82b78 <pmc_is_locked_upll+0x18>)
   82b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
   82b6c:	4618      	mov	r0, r3
   82b6e:	46bd      	mov	sp, r7
   82b70:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b74:	4770      	bx	lr
   82b76:	bf00      	nop
   82b78:	400e0600 	.word	0x400e0600

00082b7c <pmc_enable_periph_clk>:
   82b7c:	b480      	push	{r7}
   82b7e:	b083      	sub	sp, #12
   82b80:	af00      	add	r7, sp, #0
   82b82:	6078      	str	r0, [r7, #4]
   82b84:	687b      	ldr	r3, [r7, #4]
   82b86:	2b2c      	cmp	r3, #44	; 0x2c
   82b88:	d901      	bls.n	82b8e <pmc_enable_periph_clk+0x12>
   82b8a:	2301      	movs	r3, #1
   82b8c:	e02f      	b.n	82bee <pmc_enable_periph_clk+0x72>
   82b8e:	687b      	ldr	r3, [r7, #4]
   82b90:	2b1f      	cmp	r3, #31
   82b92:	d813      	bhi.n	82bbc <pmc_enable_periph_clk+0x40>
   82b94:	4b19      	ldr	r3, [pc, #100]	; (82bfc <pmc_enable_periph_clk+0x80>)
   82b96:	699a      	ldr	r2, [r3, #24]
   82b98:	687b      	ldr	r3, [r7, #4]
   82b9a:	2101      	movs	r1, #1
   82b9c:	fa01 f303 	lsl.w	r3, r1, r3
   82ba0:	401a      	ands	r2, r3
   82ba2:	687b      	ldr	r3, [r7, #4]
   82ba4:	2101      	movs	r1, #1
   82ba6:	fa01 f303 	lsl.w	r3, r1, r3
   82baa:	429a      	cmp	r2, r3
   82bac:	d01e      	beq.n	82bec <pmc_enable_periph_clk+0x70>
   82bae:	4b13      	ldr	r3, [pc, #76]	; (82bfc <pmc_enable_periph_clk+0x80>)
   82bb0:	687a      	ldr	r2, [r7, #4]
   82bb2:	2101      	movs	r1, #1
   82bb4:	fa01 f202 	lsl.w	r2, r1, r2
   82bb8:	611a      	str	r2, [r3, #16]
   82bba:	e017      	b.n	82bec <pmc_enable_periph_clk+0x70>
   82bbc:	687b      	ldr	r3, [r7, #4]
   82bbe:	3b20      	subs	r3, #32
   82bc0:	607b      	str	r3, [r7, #4]
   82bc2:	4b0e      	ldr	r3, [pc, #56]	; (82bfc <pmc_enable_periph_clk+0x80>)
   82bc4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82bc8:	687b      	ldr	r3, [r7, #4]
   82bca:	2101      	movs	r1, #1
   82bcc:	fa01 f303 	lsl.w	r3, r1, r3
   82bd0:	401a      	ands	r2, r3
   82bd2:	687b      	ldr	r3, [r7, #4]
   82bd4:	2101      	movs	r1, #1
   82bd6:	fa01 f303 	lsl.w	r3, r1, r3
   82bda:	429a      	cmp	r2, r3
   82bdc:	d006      	beq.n	82bec <pmc_enable_periph_clk+0x70>
   82bde:	4b07      	ldr	r3, [pc, #28]	; (82bfc <pmc_enable_periph_clk+0x80>)
   82be0:	687a      	ldr	r2, [r7, #4]
   82be2:	2101      	movs	r1, #1
   82be4:	fa01 f202 	lsl.w	r2, r1, r2
   82be8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   82bec:	2300      	movs	r3, #0
   82bee:	4618      	mov	r0, r3
   82bf0:	370c      	adds	r7, #12
   82bf2:	46bd      	mov	sp, r7
   82bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bf8:	4770      	bx	lr
   82bfa:	bf00      	nop
   82bfc:	400e0600 	.word	0x400e0600

00082c00 <usart_set_async_baudrate>:
   82c00:	b480      	push	{r7}
   82c02:	b089      	sub	sp, #36	; 0x24
   82c04:	af00      	add	r7, sp, #0
   82c06:	60f8      	str	r0, [r7, #12]
   82c08:	60b9      	str	r1, [r7, #8]
   82c0a:	607a      	str	r2, [r7, #4]
   82c0c:	68bb      	ldr	r3, [r7, #8]
   82c0e:	011a      	lsls	r2, r3, #4
   82c10:	687b      	ldr	r3, [r7, #4]
   82c12:	429a      	cmp	r2, r3
   82c14:	d802      	bhi.n	82c1c <usart_set_async_baudrate+0x1c>
   82c16:	2310      	movs	r3, #16
   82c18:	61fb      	str	r3, [r7, #28]
   82c1a:	e001      	b.n	82c20 <usart_set_async_baudrate+0x20>
   82c1c:	2308      	movs	r3, #8
   82c1e:	61fb      	str	r3, [r7, #28]
   82c20:	687b      	ldr	r3, [r7, #4]
   82c22:	00da      	lsls	r2, r3, #3
   82c24:	69fb      	ldr	r3, [r7, #28]
   82c26:	68b9      	ldr	r1, [r7, #8]
   82c28:	fb01 f303 	mul.w	r3, r1, r3
   82c2c:	085b      	lsrs	r3, r3, #1
   82c2e:	441a      	add	r2, r3
   82c30:	69fb      	ldr	r3, [r7, #28]
   82c32:	68b9      	ldr	r1, [r7, #8]
   82c34:	fb01 f303 	mul.w	r3, r1, r3
   82c38:	fbb2 f3f3 	udiv	r3, r2, r3
   82c3c:	61bb      	str	r3, [r7, #24]
   82c3e:	69bb      	ldr	r3, [r7, #24]
   82c40:	08db      	lsrs	r3, r3, #3
   82c42:	617b      	str	r3, [r7, #20]
   82c44:	69bb      	ldr	r3, [r7, #24]
   82c46:	f003 0307 	and.w	r3, r3, #7
   82c4a:	613b      	str	r3, [r7, #16]
   82c4c:	697b      	ldr	r3, [r7, #20]
   82c4e:	2b00      	cmp	r3, #0
   82c50:	d003      	beq.n	82c5a <usart_set_async_baudrate+0x5a>
   82c52:	697b      	ldr	r3, [r7, #20]
   82c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82c58:	d301      	bcc.n	82c5e <usart_set_async_baudrate+0x5e>
   82c5a:	2301      	movs	r3, #1
   82c5c:	e00f      	b.n	82c7e <usart_set_async_baudrate+0x7e>
   82c5e:	69fb      	ldr	r3, [r7, #28]
   82c60:	2b08      	cmp	r3, #8
   82c62:	d105      	bne.n	82c70 <usart_set_async_baudrate+0x70>
   82c64:	68fb      	ldr	r3, [r7, #12]
   82c66:	685b      	ldr	r3, [r3, #4]
   82c68:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82c6c:	68fb      	ldr	r3, [r7, #12]
   82c6e:	605a      	str	r2, [r3, #4]
   82c70:	693b      	ldr	r3, [r7, #16]
   82c72:	041a      	lsls	r2, r3, #16
   82c74:	697b      	ldr	r3, [r7, #20]
   82c76:	431a      	orrs	r2, r3
   82c78:	68fb      	ldr	r3, [r7, #12]
   82c7a:	621a      	str	r2, [r3, #32]
   82c7c:	2300      	movs	r3, #0
   82c7e:	4618      	mov	r0, r3
   82c80:	3724      	adds	r7, #36	; 0x24
   82c82:	46bd      	mov	sp, r7
   82c84:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c88:	4770      	bx	lr
   82c8a:	bf00      	nop

00082c8c <usart_reset>:
   82c8c:	b580      	push	{r7, lr}
   82c8e:	b082      	sub	sp, #8
   82c90:	af00      	add	r7, sp, #0
   82c92:	6078      	str	r0, [r7, #4]
   82c94:	6878      	ldr	r0, [r7, #4]
   82c96:	4b0d      	ldr	r3, [pc, #52]	; (82ccc <usart_reset+0x40>)
   82c98:	4798      	blx	r3
   82c9a:	687b      	ldr	r3, [r7, #4]
   82c9c:	2200      	movs	r2, #0
   82c9e:	605a      	str	r2, [r3, #4]
   82ca0:	687b      	ldr	r3, [r7, #4]
   82ca2:	2200      	movs	r2, #0
   82ca4:	625a      	str	r2, [r3, #36]	; 0x24
   82ca6:	687b      	ldr	r3, [r7, #4]
   82ca8:	2200      	movs	r2, #0
   82caa:	629a      	str	r2, [r3, #40]	; 0x28
   82cac:	6878      	ldr	r0, [r7, #4]
   82cae:	4b08      	ldr	r3, [pc, #32]	; (82cd0 <usart_reset+0x44>)
   82cb0:	4798      	blx	r3
   82cb2:	6878      	ldr	r0, [r7, #4]
   82cb4:	4b07      	ldr	r3, [pc, #28]	; (82cd4 <usart_reset+0x48>)
   82cb6:	4798      	blx	r3
   82cb8:	6878      	ldr	r0, [r7, #4]
   82cba:	4b07      	ldr	r3, [pc, #28]	; (82cd8 <usart_reset+0x4c>)
   82cbc:	4798      	blx	r3
   82cbe:	6878      	ldr	r0, [r7, #4]
   82cc0:	4b06      	ldr	r3, [pc, #24]	; (82cdc <usart_reset+0x50>)
   82cc2:	4798      	blx	r3
   82cc4:	3708      	adds	r7, #8
   82cc6:	46bd      	mov	sp, r7
   82cc8:	bd80      	pop	{r7, pc}
   82cca:	bf00      	nop
   82ccc:	00082ec9 	.word	0x00082ec9
   82cd0:	00082d7d 	.word	0x00082d7d
   82cd4:	00082dad 	.word	0x00082dad
   82cd8:	00082e15 	.word	0x00082e15
   82cdc:	00082e31 	.word	0x00082e31

00082ce0 <usart_init_rs232>:
   82ce0:	b580      	push	{r7, lr}
   82ce2:	b084      	sub	sp, #16
   82ce4:	af00      	add	r7, sp, #0
   82ce6:	60f8      	str	r0, [r7, #12]
   82ce8:	60b9      	str	r1, [r7, #8]
   82cea:	607a      	str	r2, [r7, #4]
   82cec:	68f8      	ldr	r0, [r7, #12]
   82cee:	4b1a      	ldr	r3, [pc, #104]	; (82d58 <usart_init_rs232+0x78>)
   82cf0:	4798      	blx	r3
   82cf2:	4b1a      	ldr	r3, [pc, #104]	; (82d5c <usart_init_rs232+0x7c>)
   82cf4:	2200      	movs	r2, #0
   82cf6:	601a      	str	r2, [r3, #0]
   82cf8:	68bb      	ldr	r3, [r7, #8]
   82cfa:	2b00      	cmp	r3, #0
   82cfc:	d009      	beq.n	82d12 <usart_init_rs232+0x32>
   82cfe:	68bb      	ldr	r3, [r7, #8]
   82d00:	681b      	ldr	r3, [r3, #0]
   82d02:	68f8      	ldr	r0, [r7, #12]
   82d04:	4619      	mov	r1, r3
   82d06:	687a      	ldr	r2, [r7, #4]
   82d08:	4b15      	ldr	r3, [pc, #84]	; (82d60 <usart_init_rs232+0x80>)
   82d0a:	4798      	blx	r3
   82d0c:	4603      	mov	r3, r0
   82d0e:	2b00      	cmp	r3, #0
   82d10:	d001      	beq.n	82d16 <usart_init_rs232+0x36>
   82d12:	2301      	movs	r3, #1
   82d14:	e01b      	b.n	82d4e <usart_init_rs232+0x6e>
   82d16:	68bb      	ldr	r3, [r7, #8]
   82d18:	685a      	ldr	r2, [r3, #4]
   82d1a:	68bb      	ldr	r3, [r7, #8]
   82d1c:	689b      	ldr	r3, [r3, #8]
   82d1e:	431a      	orrs	r2, r3
   82d20:	68bb      	ldr	r3, [r7, #8]
   82d22:	691b      	ldr	r3, [r3, #16]
   82d24:	431a      	orrs	r2, r3
   82d26:	68bb      	ldr	r3, [r7, #8]
   82d28:	68db      	ldr	r3, [r3, #12]
   82d2a:	431a      	orrs	r2, r3
   82d2c:	4b0b      	ldr	r3, [pc, #44]	; (82d5c <usart_init_rs232+0x7c>)
   82d2e:	681b      	ldr	r3, [r3, #0]
   82d30:	431a      	orrs	r2, r3
   82d32:	4b0a      	ldr	r3, [pc, #40]	; (82d5c <usart_init_rs232+0x7c>)
   82d34:	601a      	str	r2, [r3, #0]
   82d36:	4b09      	ldr	r3, [pc, #36]	; (82d5c <usart_init_rs232+0x7c>)
   82d38:	681a      	ldr	r2, [r3, #0]
   82d3a:	4b08      	ldr	r3, [pc, #32]	; (82d5c <usart_init_rs232+0x7c>)
   82d3c:	601a      	str	r2, [r3, #0]
   82d3e:	68fb      	ldr	r3, [r7, #12]
   82d40:	685a      	ldr	r2, [r3, #4]
   82d42:	4b06      	ldr	r3, [pc, #24]	; (82d5c <usart_init_rs232+0x7c>)
   82d44:	681b      	ldr	r3, [r3, #0]
   82d46:	431a      	orrs	r2, r3
   82d48:	68fb      	ldr	r3, [r7, #12]
   82d4a:	605a      	str	r2, [r3, #4]
   82d4c:	2300      	movs	r3, #0
   82d4e:	4618      	mov	r0, r3
   82d50:	3710      	adds	r7, #16
   82d52:	46bd      	mov	sp, r7
   82d54:	bd80      	pop	{r7, pc}
   82d56:	bf00      	nop
   82d58:	00082c8d 	.word	0x00082c8d
   82d5c:	200704e4 	.word	0x200704e4
   82d60:	00082c01 	.word	0x00082c01

00082d64 <usart_enable_tx>:
   82d64:	b480      	push	{r7}
   82d66:	b083      	sub	sp, #12
   82d68:	af00      	add	r7, sp, #0
   82d6a:	6078      	str	r0, [r7, #4]
   82d6c:	687b      	ldr	r3, [r7, #4]
   82d6e:	2240      	movs	r2, #64	; 0x40
   82d70:	601a      	str	r2, [r3, #0]
   82d72:	370c      	adds	r7, #12
   82d74:	46bd      	mov	sp, r7
   82d76:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d7a:	4770      	bx	lr

00082d7c <usart_reset_tx>:
   82d7c:	b480      	push	{r7}
   82d7e:	b083      	sub	sp, #12
   82d80:	af00      	add	r7, sp, #0
   82d82:	6078      	str	r0, [r7, #4]
   82d84:	687b      	ldr	r3, [r7, #4]
   82d86:	2288      	movs	r2, #136	; 0x88
   82d88:	601a      	str	r2, [r3, #0]
   82d8a:	370c      	adds	r7, #12
   82d8c:	46bd      	mov	sp, r7
   82d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d92:	4770      	bx	lr

00082d94 <usart_enable_rx>:
   82d94:	b480      	push	{r7}
   82d96:	b083      	sub	sp, #12
   82d98:	af00      	add	r7, sp, #0
   82d9a:	6078      	str	r0, [r7, #4]
   82d9c:	687b      	ldr	r3, [r7, #4]
   82d9e:	2210      	movs	r2, #16
   82da0:	601a      	str	r2, [r3, #0]
   82da2:	370c      	adds	r7, #12
   82da4:	46bd      	mov	sp, r7
   82da6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82daa:	4770      	bx	lr

00082dac <usart_reset_rx>:
   82dac:	b480      	push	{r7}
   82dae:	b083      	sub	sp, #12
   82db0:	af00      	add	r7, sp, #0
   82db2:	6078      	str	r0, [r7, #4]
   82db4:	687b      	ldr	r3, [r7, #4]
   82db6:	2224      	movs	r2, #36	; 0x24
   82db8:	601a      	str	r2, [r3, #0]
   82dba:	370c      	adds	r7, #12
   82dbc:	46bd      	mov	sp, r7
   82dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dc2:	4770      	bx	lr

00082dc4 <usart_enable_interrupt>:
   82dc4:	b480      	push	{r7}
   82dc6:	b083      	sub	sp, #12
   82dc8:	af00      	add	r7, sp, #0
   82dca:	6078      	str	r0, [r7, #4]
   82dcc:	6039      	str	r1, [r7, #0]
   82dce:	687b      	ldr	r3, [r7, #4]
   82dd0:	683a      	ldr	r2, [r7, #0]
   82dd2:	609a      	str	r2, [r3, #8]
   82dd4:	370c      	adds	r7, #12
   82dd6:	46bd      	mov	sp, r7
   82dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ddc:	4770      	bx	lr
   82dde:	bf00      	nop

00082de0 <usart_disable_interrupt>:
   82de0:	b480      	push	{r7}
   82de2:	b083      	sub	sp, #12
   82de4:	af00      	add	r7, sp, #0
   82de6:	6078      	str	r0, [r7, #4]
   82de8:	6039      	str	r1, [r7, #0]
   82dea:	687b      	ldr	r3, [r7, #4]
   82dec:	683a      	ldr	r2, [r7, #0]
   82dee:	60da      	str	r2, [r3, #12]
   82df0:	370c      	adds	r7, #12
   82df2:	46bd      	mov	sp, r7
   82df4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82df8:	4770      	bx	lr
   82dfa:	bf00      	nop

00082dfc <usart_get_status>:
   82dfc:	b480      	push	{r7}
   82dfe:	b083      	sub	sp, #12
   82e00:	af00      	add	r7, sp, #0
   82e02:	6078      	str	r0, [r7, #4]
   82e04:	687b      	ldr	r3, [r7, #4]
   82e06:	695b      	ldr	r3, [r3, #20]
   82e08:	4618      	mov	r0, r3
   82e0a:	370c      	adds	r7, #12
   82e0c:	46bd      	mov	sp, r7
   82e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e12:	4770      	bx	lr

00082e14 <usart_reset_status>:
   82e14:	b480      	push	{r7}
   82e16:	b083      	sub	sp, #12
   82e18:	af00      	add	r7, sp, #0
   82e1a:	6078      	str	r0, [r7, #4]
   82e1c:	687b      	ldr	r3, [r7, #4]
   82e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82e22:	601a      	str	r2, [r3, #0]
   82e24:	370c      	adds	r7, #12
   82e26:	46bd      	mov	sp, r7
   82e28:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e2c:	4770      	bx	lr
   82e2e:	bf00      	nop

00082e30 <usart_drive_RTS_pin_high>:
   82e30:	b480      	push	{r7}
   82e32:	b083      	sub	sp, #12
   82e34:	af00      	add	r7, sp, #0
   82e36:	6078      	str	r0, [r7, #4]
   82e38:	687b      	ldr	r3, [r7, #4]
   82e3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82e3e:	601a      	str	r2, [r3, #0]
   82e40:	370c      	adds	r7, #12
   82e42:	46bd      	mov	sp, r7
   82e44:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e48:	4770      	bx	lr
   82e4a:	bf00      	nop

00082e4c <usart_write>:
   82e4c:	b480      	push	{r7}
   82e4e:	b083      	sub	sp, #12
   82e50:	af00      	add	r7, sp, #0
   82e52:	6078      	str	r0, [r7, #4]
   82e54:	6039      	str	r1, [r7, #0]
   82e56:	687b      	ldr	r3, [r7, #4]
   82e58:	695b      	ldr	r3, [r3, #20]
   82e5a:	f003 0302 	and.w	r3, r3, #2
   82e5e:	2b00      	cmp	r3, #0
   82e60:	d101      	bne.n	82e66 <usart_write+0x1a>
   82e62:	2301      	movs	r3, #1
   82e64:	e005      	b.n	82e72 <usart_write+0x26>
   82e66:	683b      	ldr	r3, [r7, #0]
   82e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82e6c:	687b      	ldr	r3, [r7, #4]
   82e6e:	61da      	str	r2, [r3, #28]
   82e70:	2300      	movs	r3, #0
   82e72:	4618      	mov	r0, r3
   82e74:	370c      	adds	r7, #12
   82e76:	46bd      	mov	sp, r7
   82e78:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e7c:	4770      	bx	lr
   82e7e:	bf00      	nop

00082e80 <usart_getchar>:
   82e80:	b480      	push	{r7}
   82e82:	b085      	sub	sp, #20
   82e84:	af00      	add	r7, sp, #0
   82e86:	6078      	str	r0, [r7, #4]
   82e88:	6039      	str	r1, [r7, #0]
   82e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   82e8e:	60fb      	str	r3, [r7, #12]
   82e90:	e006      	b.n	82ea0 <usart_getchar+0x20>
   82e92:	68fb      	ldr	r3, [r7, #12]
   82e94:	1e5a      	subs	r2, r3, #1
   82e96:	60fa      	str	r2, [r7, #12]
   82e98:	2b00      	cmp	r3, #0
   82e9a:	d101      	bne.n	82ea0 <usart_getchar+0x20>
   82e9c:	2301      	movs	r3, #1
   82e9e:	e00c      	b.n	82eba <usart_getchar+0x3a>
   82ea0:	687b      	ldr	r3, [r7, #4]
   82ea2:	695b      	ldr	r3, [r3, #20]
   82ea4:	f003 0301 	and.w	r3, r3, #1
   82ea8:	2b00      	cmp	r3, #0
   82eaa:	d0f2      	beq.n	82e92 <usart_getchar+0x12>
   82eac:	687b      	ldr	r3, [r7, #4]
   82eae:	699b      	ldr	r3, [r3, #24]
   82eb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82eb4:	683b      	ldr	r3, [r7, #0]
   82eb6:	601a      	str	r2, [r3, #0]
   82eb8:	2300      	movs	r3, #0
   82eba:	4618      	mov	r0, r3
   82ebc:	3714      	adds	r7, #20
   82ebe:	46bd      	mov	sp, r7
   82ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ec4:	4770      	bx	lr
   82ec6:	bf00      	nop

00082ec8 <usart_disable_writeprotect>:
   82ec8:	b480      	push	{r7}
   82eca:	b083      	sub	sp, #12
   82ecc:	af00      	add	r7, sp, #0
   82ece:	6078      	str	r0, [r7, #4]
   82ed0:	687b      	ldr	r3, [r7, #4]
   82ed2:	4a04      	ldr	r2, [pc, #16]	; (82ee4 <usart_disable_writeprotect+0x1c>)
   82ed4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   82ed8:	370c      	adds	r7, #12
   82eda:	46bd      	mov	sp, r7
   82edc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ee0:	4770      	bx	lr
   82ee2:	bf00      	nop
   82ee4:	55534100 	.word	0x55534100

00082ee8 <wdt_restart>:
   82ee8:	b480      	push	{r7}
   82eea:	b083      	sub	sp, #12
   82eec:	af00      	add	r7, sp, #0
   82eee:	6078      	str	r0, [r7, #4]
   82ef0:	687a      	ldr	r2, [r7, #4]
   82ef2:	4b05      	ldr	r3, [pc, #20]	; (82f08 <wdt_restart+0x20>)
   82ef4:	429a      	cmp	r2, r3
   82ef6:	d102      	bne.n	82efe <wdt_restart+0x16>
   82ef8:	687b      	ldr	r3, [r7, #4]
   82efa:	4a04      	ldr	r2, [pc, #16]	; (82f0c <wdt_restart+0x24>)
   82efc:	601a      	str	r2, [r3, #0]
   82efe:	370c      	adds	r7, #12
   82f00:	46bd      	mov	sp, r7
   82f02:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f06:	4770      	bx	lr
   82f08:	400e1a50 	.word	0x400e1a50
   82f0c:	a5000001 	.word	0xa5000001

00082f10 <wdt_get_status>:
   82f10:	b480      	push	{r7}
   82f12:	b083      	sub	sp, #12
   82f14:	af00      	add	r7, sp, #0
   82f16:	6078      	str	r0, [r7, #4]
   82f18:	687b      	ldr	r3, [r7, #4]
   82f1a:	689b      	ldr	r3, [r3, #8]
   82f1c:	4618      	mov	r0, r3
   82f1e:	370c      	adds	r7, #12
   82f20:	46bd      	mov	sp, r7
   82f22:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f26:	4770      	bx	lr

00082f28 <Dummy_Handler>:
   82f28:	b480      	push	{r7}
   82f2a:	af00      	add	r7, sp, #0
   82f2c:	e7fe      	b.n	82f2c <Dummy_Handler+0x4>
   82f2e:	bf00      	nop

00082f30 <Reset_Handler>:
   82f30:	b580      	push	{r7, lr}
   82f32:	b082      	sub	sp, #8
   82f34:	af00      	add	r7, sp, #0
   82f36:	4b1e      	ldr	r3, [pc, #120]	; (82fb0 <Reset_Handler+0x80>)
   82f38:	607b      	str	r3, [r7, #4]
   82f3a:	4b1e      	ldr	r3, [pc, #120]	; (82fb4 <Reset_Handler+0x84>)
   82f3c:	603b      	str	r3, [r7, #0]
   82f3e:	687a      	ldr	r2, [r7, #4]
   82f40:	683b      	ldr	r3, [r7, #0]
   82f42:	429a      	cmp	r2, r3
   82f44:	d00c      	beq.n	82f60 <Reset_Handler+0x30>
   82f46:	e007      	b.n	82f58 <Reset_Handler+0x28>
   82f48:	683b      	ldr	r3, [r7, #0]
   82f4a:	1d1a      	adds	r2, r3, #4
   82f4c:	603a      	str	r2, [r7, #0]
   82f4e:	687a      	ldr	r2, [r7, #4]
   82f50:	1d11      	adds	r1, r2, #4
   82f52:	6079      	str	r1, [r7, #4]
   82f54:	6812      	ldr	r2, [r2, #0]
   82f56:	601a      	str	r2, [r3, #0]
   82f58:	683a      	ldr	r2, [r7, #0]
   82f5a:	4b17      	ldr	r3, [pc, #92]	; (82fb8 <Reset_Handler+0x88>)
   82f5c:	429a      	cmp	r2, r3
   82f5e:	d3f3      	bcc.n	82f48 <Reset_Handler+0x18>
   82f60:	4b16      	ldr	r3, [pc, #88]	; (82fbc <Reset_Handler+0x8c>)
   82f62:	603b      	str	r3, [r7, #0]
   82f64:	e004      	b.n	82f70 <Reset_Handler+0x40>
   82f66:	683b      	ldr	r3, [r7, #0]
   82f68:	1d1a      	adds	r2, r3, #4
   82f6a:	603a      	str	r2, [r7, #0]
   82f6c:	2200      	movs	r2, #0
   82f6e:	601a      	str	r2, [r3, #0]
   82f70:	683a      	ldr	r2, [r7, #0]
   82f72:	4b13      	ldr	r3, [pc, #76]	; (82fc0 <Reset_Handler+0x90>)
   82f74:	429a      	cmp	r2, r3
   82f76:	d3f6      	bcc.n	82f66 <Reset_Handler+0x36>
   82f78:	4b12      	ldr	r3, [pc, #72]	; (82fc4 <Reset_Handler+0x94>)
   82f7a:	607b      	str	r3, [r7, #4]
   82f7c:	4a12      	ldr	r2, [pc, #72]	; (82fc8 <Reset_Handler+0x98>)
   82f7e:	687b      	ldr	r3, [r7, #4]
   82f80:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82f84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82f88:	6093      	str	r3, [r2, #8]
   82f8a:	687b      	ldr	r3, [r7, #4]
   82f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82f90:	d309      	bcc.n	82fa6 <Reset_Handler+0x76>
   82f92:	687a      	ldr	r2, [r7, #4]
   82f94:	4b0d      	ldr	r3, [pc, #52]	; (82fcc <Reset_Handler+0x9c>)
   82f96:	429a      	cmp	r2, r3
   82f98:	d805      	bhi.n	82fa6 <Reset_Handler+0x76>
   82f9a:	4b0b      	ldr	r3, [pc, #44]	; (82fc8 <Reset_Handler+0x98>)
   82f9c:	4a0a      	ldr	r2, [pc, #40]	; (82fc8 <Reset_Handler+0x98>)
   82f9e:	6892      	ldr	r2, [r2, #8]
   82fa0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82fa4:	609a      	str	r2, [r3, #8]
   82fa6:	4b0a      	ldr	r3, [pc, #40]	; (82fd0 <Reset_Handler+0xa0>)
   82fa8:	4798      	blx	r3
   82faa:	4b0a      	ldr	r3, [pc, #40]	; (82fd4 <Reset_Handler+0xa4>)
   82fac:	4798      	blx	r3
   82fae:	e7fe      	b.n	82fae <Reset_Handler+0x7e>
   82fb0:	000870d8 	.word	0x000870d8
   82fb4:	20070000 	.word	0x20070000
   82fb8:	20070438 	.word	0x20070438
   82fbc:	20070438 	.word	0x20070438
   82fc0:	2007a728 	.word	0x2007a728
   82fc4:	00080000 	.word	0x00080000
   82fc8:	e000ed00 	.word	0xe000ed00
   82fcc:	200fffff 	.word	0x200fffff
   82fd0:	00086bf9 	.word	0x00086bf9
   82fd4:	00086479 	.word	0x00086479

00082fd8 <SystemCoreClockUpdate>:
   82fd8:	b480      	push	{r7}
   82fda:	af00      	add	r7, sp, #0
   82fdc:	4b56      	ldr	r3, [pc, #344]	; (83138 <SystemCoreClockUpdate+0x160>)
   82fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82fe0:	f003 0303 	and.w	r3, r3, #3
   82fe4:	2b03      	cmp	r3, #3
   82fe6:	f200 808a 	bhi.w	830fe <SystemCoreClockUpdate+0x126>
   82fea:	a101      	add	r1, pc, #4	; (adr r1, 82ff0 <SystemCoreClockUpdate+0x18>)
   82fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82ff0:	00083001 	.word	0x00083001
   82ff4:	00083021 	.word	0x00083021
   82ff8:	00083071 	.word	0x00083071
   82ffc:	00083071 	.word	0x00083071
   83000:	4b4e      	ldr	r3, [pc, #312]	; (8313c <SystemCoreClockUpdate+0x164>)
   83002:	695b      	ldr	r3, [r3, #20]
   83004:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83008:	2b00      	cmp	r3, #0
   8300a:	d004      	beq.n	83016 <SystemCoreClockUpdate+0x3e>
   8300c:	4b4c      	ldr	r3, [pc, #304]	; (83140 <SystemCoreClockUpdate+0x168>)
   8300e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83012:	601a      	str	r2, [r3, #0]
   83014:	e073      	b.n	830fe <SystemCoreClockUpdate+0x126>
   83016:	4b4a      	ldr	r3, [pc, #296]	; (83140 <SystemCoreClockUpdate+0x168>)
   83018:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8301c:	601a      	str	r2, [r3, #0]
   8301e:	e06e      	b.n	830fe <SystemCoreClockUpdate+0x126>
   83020:	4b45      	ldr	r3, [pc, #276]	; (83138 <SystemCoreClockUpdate+0x160>)
   83022:	6a1b      	ldr	r3, [r3, #32]
   83024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83028:	2b00      	cmp	r3, #0
   8302a:	d003      	beq.n	83034 <SystemCoreClockUpdate+0x5c>
   8302c:	4b44      	ldr	r3, [pc, #272]	; (83140 <SystemCoreClockUpdate+0x168>)
   8302e:	4a45      	ldr	r2, [pc, #276]	; (83144 <SystemCoreClockUpdate+0x16c>)
   83030:	601a      	str	r2, [r3, #0]
   83032:	e01c      	b.n	8306e <SystemCoreClockUpdate+0x96>
   83034:	4b42      	ldr	r3, [pc, #264]	; (83140 <SystemCoreClockUpdate+0x168>)
   83036:	4a44      	ldr	r2, [pc, #272]	; (83148 <SystemCoreClockUpdate+0x170>)
   83038:	601a      	str	r2, [r3, #0]
   8303a:	4b3f      	ldr	r3, [pc, #252]	; (83138 <SystemCoreClockUpdate+0x160>)
   8303c:	6a1b      	ldr	r3, [r3, #32]
   8303e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83042:	2b10      	cmp	r3, #16
   83044:	d004      	beq.n	83050 <SystemCoreClockUpdate+0x78>
   83046:	2b20      	cmp	r3, #32
   83048:	d008      	beq.n	8305c <SystemCoreClockUpdate+0x84>
   8304a:	2b00      	cmp	r3, #0
   8304c:	d00e      	beq.n	8306c <SystemCoreClockUpdate+0x94>
   8304e:	e00e      	b.n	8306e <SystemCoreClockUpdate+0x96>
   83050:	4b3b      	ldr	r3, [pc, #236]	; (83140 <SystemCoreClockUpdate+0x168>)
   83052:	681b      	ldr	r3, [r3, #0]
   83054:	005a      	lsls	r2, r3, #1
   83056:	4b3a      	ldr	r3, [pc, #232]	; (83140 <SystemCoreClockUpdate+0x168>)
   83058:	601a      	str	r2, [r3, #0]
   8305a:	e008      	b.n	8306e <SystemCoreClockUpdate+0x96>
   8305c:	4b38      	ldr	r3, [pc, #224]	; (83140 <SystemCoreClockUpdate+0x168>)
   8305e:	681a      	ldr	r2, [r3, #0]
   83060:	4613      	mov	r3, r2
   83062:	005b      	lsls	r3, r3, #1
   83064:	441a      	add	r2, r3
   83066:	4b36      	ldr	r3, [pc, #216]	; (83140 <SystemCoreClockUpdate+0x168>)
   83068:	601a      	str	r2, [r3, #0]
   8306a:	e000      	b.n	8306e <SystemCoreClockUpdate+0x96>
   8306c:	bf00      	nop
   8306e:	e046      	b.n	830fe <SystemCoreClockUpdate+0x126>
   83070:	4b31      	ldr	r3, [pc, #196]	; (83138 <SystemCoreClockUpdate+0x160>)
   83072:	6a1b      	ldr	r3, [r3, #32]
   83074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83078:	2b00      	cmp	r3, #0
   8307a:	d003      	beq.n	83084 <SystemCoreClockUpdate+0xac>
   8307c:	4b30      	ldr	r3, [pc, #192]	; (83140 <SystemCoreClockUpdate+0x168>)
   8307e:	4a31      	ldr	r2, [pc, #196]	; (83144 <SystemCoreClockUpdate+0x16c>)
   83080:	601a      	str	r2, [r3, #0]
   83082:	e01c      	b.n	830be <SystemCoreClockUpdate+0xe6>
   83084:	4b2e      	ldr	r3, [pc, #184]	; (83140 <SystemCoreClockUpdate+0x168>)
   83086:	4a30      	ldr	r2, [pc, #192]	; (83148 <SystemCoreClockUpdate+0x170>)
   83088:	601a      	str	r2, [r3, #0]
   8308a:	4b2b      	ldr	r3, [pc, #172]	; (83138 <SystemCoreClockUpdate+0x160>)
   8308c:	6a1b      	ldr	r3, [r3, #32]
   8308e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83092:	2b10      	cmp	r3, #16
   83094:	d004      	beq.n	830a0 <SystemCoreClockUpdate+0xc8>
   83096:	2b20      	cmp	r3, #32
   83098:	d008      	beq.n	830ac <SystemCoreClockUpdate+0xd4>
   8309a:	2b00      	cmp	r3, #0
   8309c:	d00e      	beq.n	830bc <SystemCoreClockUpdate+0xe4>
   8309e:	e00e      	b.n	830be <SystemCoreClockUpdate+0xe6>
   830a0:	4b27      	ldr	r3, [pc, #156]	; (83140 <SystemCoreClockUpdate+0x168>)
   830a2:	681b      	ldr	r3, [r3, #0]
   830a4:	005a      	lsls	r2, r3, #1
   830a6:	4b26      	ldr	r3, [pc, #152]	; (83140 <SystemCoreClockUpdate+0x168>)
   830a8:	601a      	str	r2, [r3, #0]
   830aa:	e008      	b.n	830be <SystemCoreClockUpdate+0xe6>
   830ac:	4b24      	ldr	r3, [pc, #144]	; (83140 <SystemCoreClockUpdate+0x168>)
   830ae:	681a      	ldr	r2, [r3, #0]
   830b0:	4613      	mov	r3, r2
   830b2:	005b      	lsls	r3, r3, #1
   830b4:	441a      	add	r2, r3
   830b6:	4b22      	ldr	r3, [pc, #136]	; (83140 <SystemCoreClockUpdate+0x168>)
   830b8:	601a      	str	r2, [r3, #0]
   830ba:	e000      	b.n	830be <SystemCoreClockUpdate+0xe6>
   830bc:	bf00      	nop
   830be:	4b1e      	ldr	r3, [pc, #120]	; (83138 <SystemCoreClockUpdate+0x160>)
   830c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830c2:	f003 0303 	and.w	r3, r3, #3
   830c6:	2b02      	cmp	r3, #2
   830c8:	d115      	bne.n	830f6 <SystemCoreClockUpdate+0x11e>
   830ca:	4b1b      	ldr	r3, [pc, #108]	; (83138 <SystemCoreClockUpdate+0x160>)
   830cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   830ce:	4b1f      	ldr	r3, [pc, #124]	; (8314c <SystemCoreClockUpdate+0x174>)
   830d0:	4013      	ands	r3, r2
   830d2:	0c1b      	lsrs	r3, r3, #16
   830d4:	3301      	adds	r3, #1
   830d6:	4a1a      	ldr	r2, [pc, #104]	; (83140 <SystemCoreClockUpdate+0x168>)
   830d8:	6812      	ldr	r2, [r2, #0]
   830da:	fb02 f203 	mul.w	r2, r2, r3
   830de:	4b18      	ldr	r3, [pc, #96]	; (83140 <SystemCoreClockUpdate+0x168>)
   830e0:	601a      	str	r2, [r3, #0]
   830e2:	4b17      	ldr	r3, [pc, #92]	; (83140 <SystemCoreClockUpdate+0x168>)
   830e4:	681a      	ldr	r2, [r3, #0]
   830e6:	4b14      	ldr	r3, [pc, #80]	; (83138 <SystemCoreClockUpdate+0x160>)
   830e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   830ea:	b2db      	uxtb	r3, r3
   830ec:	fbb2 f2f3 	udiv	r2, r2, r3
   830f0:	4b13      	ldr	r3, [pc, #76]	; (83140 <SystemCoreClockUpdate+0x168>)
   830f2:	601a      	str	r2, [r3, #0]
   830f4:	e002      	b.n	830fc <SystemCoreClockUpdate+0x124>
   830f6:	4b12      	ldr	r3, [pc, #72]	; (83140 <SystemCoreClockUpdate+0x168>)
   830f8:	4a15      	ldr	r2, [pc, #84]	; (83150 <SystemCoreClockUpdate+0x178>)
   830fa:	601a      	str	r2, [r3, #0]
   830fc:	bf00      	nop
   830fe:	4b0e      	ldr	r3, [pc, #56]	; (83138 <SystemCoreClockUpdate+0x160>)
   83100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83102:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83106:	2b70      	cmp	r3, #112	; 0x70
   83108:	d108      	bne.n	8311c <SystemCoreClockUpdate+0x144>
   8310a:	4b0d      	ldr	r3, [pc, #52]	; (83140 <SystemCoreClockUpdate+0x168>)
   8310c:	681a      	ldr	r2, [r3, #0]
   8310e:	4b11      	ldr	r3, [pc, #68]	; (83154 <SystemCoreClockUpdate+0x17c>)
   83110:	fba3 1302 	umull	r1, r3, r3, r2
   83114:	085a      	lsrs	r2, r3, #1
   83116:	4b0a      	ldr	r3, [pc, #40]	; (83140 <SystemCoreClockUpdate+0x168>)
   83118:	601a      	str	r2, [r3, #0]
   8311a:	e009      	b.n	83130 <SystemCoreClockUpdate+0x158>
   8311c:	4b08      	ldr	r3, [pc, #32]	; (83140 <SystemCoreClockUpdate+0x168>)
   8311e:	681a      	ldr	r2, [r3, #0]
   83120:	4b05      	ldr	r3, [pc, #20]	; (83138 <SystemCoreClockUpdate+0x160>)
   83122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83124:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83128:	091b      	lsrs	r3, r3, #4
   8312a:	40da      	lsrs	r2, r3
   8312c:	4b04      	ldr	r3, [pc, #16]	; (83140 <SystemCoreClockUpdate+0x168>)
   8312e:	601a      	str	r2, [r3, #0]
   83130:	46bd      	mov	sp, r7
   83132:	f85d 7b04 	ldr.w	r7, [sp], #4
   83136:	4770      	bx	lr
   83138:	400e0600 	.word	0x400e0600
   8313c:	400e1a10 	.word	0x400e1a10
   83140:	20070000 	.word	0x20070000
   83144:	00b71b00 	.word	0x00b71b00
   83148:	003d0900 	.word	0x003d0900
   8314c:	07ff0000 	.word	0x07ff0000
   83150:	0e4e1c00 	.word	0x0e4e1c00
   83154:	aaaaaaab 	.word	0xaaaaaaab

00083158 <system_init_flash>:
   83158:	b480      	push	{r7}
   8315a:	b083      	sub	sp, #12
   8315c:	af00      	add	r7, sp, #0
   8315e:	6078      	str	r0, [r7, #4]
   83160:	687a      	ldr	r2, [r7, #4]
   83162:	4b1f      	ldr	r3, [pc, #124]	; (831e0 <system_init_flash+0x88>)
   83164:	429a      	cmp	r2, r3
   83166:	d806      	bhi.n	83176 <system_init_flash+0x1e>
   83168:	4b1e      	ldr	r3, [pc, #120]	; (831e4 <system_init_flash+0x8c>)
   8316a:	2200      	movs	r2, #0
   8316c:	601a      	str	r2, [r3, #0]
   8316e:	4b1e      	ldr	r3, [pc, #120]	; (831e8 <system_init_flash+0x90>)
   83170:	2200      	movs	r2, #0
   83172:	601a      	str	r2, [r3, #0]
   83174:	e02e      	b.n	831d4 <system_init_flash+0x7c>
   83176:	687a      	ldr	r2, [r7, #4]
   83178:	4b1c      	ldr	r3, [pc, #112]	; (831ec <system_init_flash+0x94>)
   8317a:	429a      	cmp	r2, r3
   8317c:	d808      	bhi.n	83190 <system_init_flash+0x38>
   8317e:	4b19      	ldr	r3, [pc, #100]	; (831e4 <system_init_flash+0x8c>)
   83180:	f44f 7280 	mov.w	r2, #256	; 0x100
   83184:	601a      	str	r2, [r3, #0]
   83186:	4b18      	ldr	r3, [pc, #96]	; (831e8 <system_init_flash+0x90>)
   83188:	f44f 7280 	mov.w	r2, #256	; 0x100
   8318c:	601a      	str	r2, [r3, #0]
   8318e:	e021      	b.n	831d4 <system_init_flash+0x7c>
   83190:	687a      	ldr	r2, [r7, #4]
   83192:	4b17      	ldr	r3, [pc, #92]	; (831f0 <system_init_flash+0x98>)
   83194:	429a      	cmp	r2, r3
   83196:	d808      	bhi.n	831aa <system_init_flash+0x52>
   83198:	4b12      	ldr	r3, [pc, #72]	; (831e4 <system_init_flash+0x8c>)
   8319a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8319e:	601a      	str	r2, [r3, #0]
   831a0:	4b11      	ldr	r3, [pc, #68]	; (831e8 <system_init_flash+0x90>)
   831a2:	f44f 7200 	mov.w	r2, #512	; 0x200
   831a6:	601a      	str	r2, [r3, #0]
   831a8:	e014      	b.n	831d4 <system_init_flash+0x7c>
   831aa:	687a      	ldr	r2, [r7, #4]
   831ac:	4b11      	ldr	r3, [pc, #68]	; (831f4 <system_init_flash+0x9c>)
   831ae:	429a      	cmp	r2, r3
   831b0:	d808      	bhi.n	831c4 <system_init_flash+0x6c>
   831b2:	4b0c      	ldr	r3, [pc, #48]	; (831e4 <system_init_flash+0x8c>)
   831b4:	f44f 7240 	mov.w	r2, #768	; 0x300
   831b8:	601a      	str	r2, [r3, #0]
   831ba:	4b0b      	ldr	r3, [pc, #44]	; (831e8 <system_init_flash+0x90>)
   831bc:	f44f 7240 	mov.w	r2, #768	; 0x300
   831c0:	601a      	str	r2, [r3, #0]
   831c2:	e007      	b.n	831d4 <system_init_flash+0x7c>
   831c4:	4b07      	ldr	r3, [pc, #28]	; (831e4 <system_init_flash+0x8c>)
   831c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   831ca:	601a      	str	r2, [r3, #0]
   831cc:	4b06      	ldr	r3, [pc, #24]	; (831e8 <system_init_flash+0x90>)
   831ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   831d2:	601a      	str	r2, [r3, #0]
   831d4:	370c      	adds	r7, #12
   831d6:	46bd      	mov	sp, r7
   831d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   831dc:	4770      	bx	lr
   831de:	bf00      	nop
   831e0:	0157529f 	.word	0x0157529f
   831e4:	400e0a00 	.word	0x400e0a00
   831e8:	400e0c00 	.word	0x400e0c00
   831ec:	0206cc7f 	.word	0x0206cc7f
   831f0:	0328b73f 	.word	0x0328b73f
   831f4:	04a62f7f 	.word	0x04a62f7f

000831f8 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   831f8:	b480      	push	{r7}
   831fa:	b083      	sub	sp, #12
   831fc:	af00      	add	r7, sp, #0
   831fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83200:	687b      	ldr	r3, [r7, #4]
   83202:	f103 0208 	add.w	r2, r3, #8
   83206:	687b      	ldr	r3, [r7, #4]
   83208:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8320a:	687b      	ldr	r3, [r7, #4]
   8320c:	f04f 32ff 	mov.w	r2, #4294967295
   83210:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83212:	687b      	ldr	r3, [r7, #4]
   83214:	f103 0208 	add.w	r2, r3, #8
   83218:	687b      	ldr	r3, [r7, #4]
   8321a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8321c:	687b      	ldr	r3, [r7, #4]
   8321e:	f103 0208 	add.w	r2, r3, #8
   83222:	687b      	ldr	r3, [r7, #4]
   83224:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   83226:	687b      	ldr	r3, [r7, #4]
   83228:	2200      	movs	r2, #0
   8322a:	601a      	str	r2, [r3, #0]
}
   8322c:	370c      	adds	r7, #12
   8322e:	46bd      	mov	sp, r7
   83230:	f85d 7b04 	ldr.w	r7, [sp], #4
   83234:	4770      	bx	lr
   83236:	bf00      	nop

00083238 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   83238:	b480      	push	{r7}
   8323a:	b083      	sub	sp, #12
   8323c:	af00      	add	r7, sp, #0
   8323e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   83240:	687b      	ldr	r3, [r7, #4]
   83242:	2200      	movs	r2, #0
   83244:	611a      	str	r2, [r3, #16]
}
   83246:	370c      	adds	r7, #12
   83248:	46bd      	mov	sp, r7
   8324a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8324e:	4770      	bx	lr

00083250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   83250:	b480      	push	{r7}
   83252:	b085      	sub	sp, #20
   83254:	af00      	add	r7, sp, #0
   83256:	6078      	str	r0, [r7, #4]
   83258:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   8325a:	687b      	ldr	r3, [r7, #4]
   8325c:	685b      	ldr	r3, [r3, #4]
   8325e:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   83260:	683b      	ldr	r3, [r7, #0]
   83262:	68fa      	ldr	r2, [r7, #12]
   83264:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   83266:	68fb      	ldr	r3, [r7, #12]
   83268:	689a      	ldr	r2, [r3, #8]
   8326a:	683b      	ldr	r3, [r7, #0]
   8326c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   8326e:	68fb      	ldr	r3, [r7, #12]
   83270:	689b      	ldr	r3, [r3, #8]
   83272:	683a      	ldr	r2, [r7, #0]
   83274:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   83276:	68fb      	ldr	r3, [r7, #12]
   83278:	683a      	ldr	r2, [r7, #0]
   8327a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8327c:	683b      	ldr	r3, [r7, #0]
   8327e:	687a      	ldr	r2, [r7, #4]
   83280:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   83282:	687b      	ldr	r3, [r7, #4]
   83284:	681b      	ldr	r3, [r3, #0]
   83286:	1c5a      	adds	r2, r3, #1
   83288:	687b      	ldr	r3, [r7, #4]
   8328a:	601a      	str	r2, [r3, #0]
}
   8328c:	3714      	adds	r7, #20
   8328e:	46bd      	mov	sp, r7
   83290:	f85d 7b04 	ldr.w	r7, [sp], #4
   83294:	4770      	bx	lr
   83296:	bf00      	nop

00083298 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   83298:	b480      	push	{r7}
   8329a:	b085      	sub	sp, #20
   8329c:	af00      	add	r7, sp, #0
   8329e:	6078      	str	r0, [r7, #4]
   832a0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   832a2:	683b      	ldr	r3, [r7, #0]
   832a4:	681b      	ldr	r3, [r3, #0]
   832a6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   832a8:	68bb      	ldr	r3, [r7, #8]
   832aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   832ae:	d103      	bne.n	832b8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   832b0:	687b      	ldr	r3, [r7, #4]
   832b2:	691b      	ldr	r3, [r3, #16]
   832b4:	60fb      	str	r3, [r7, #12]
   832b6:	e00c      	b.n	832d2 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   832b8:	687b      	ldr	r3, [r7, #4]
   832ba:	3308      	adds	r3, #8
   832bc:	60fb      	str	r3, [r7, #12]
   832be:	e002      	b.n	832c6 <vListInsert+0x2e>
   832c0:	68fb      	ldr	r3, [r7, #12]
   832c2:	685b      	ldr	r3, [r3, #4]
   832c4:	60fb      	str	r3, [r7, #12]
   832c6:	68fb      	ldr	r3, [r7, #12]
   832c8:	685b      	ldr	r3, [r3, #4]
   832ca:	681a      	ldr	r2, [r3, #0]
   832cc:	68bb      	ldr	r3, [r7, #8]
   832ce:	429a      	cmp	r2, r3
   832d0:	d9f6      	bls.n	832c0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   832d2:	68fb      	ldr	r3, [r7, #12]
   832d4:	685a      	ldr	r2, [r3, #4]
   832d6:	683b      	ldr	r3, [r7, #0]
   832d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   832da:	683b      	ldr	r3, [r7, #0]
   832dc:	685b      	ldr	r3, [r3, #4]
   832de:	683a      	ldr	r2, [r7, #0]
   832e0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   832e2:	683b      	ldr	r3, [r7, #0]
   832e4:	68fa      	ldr	r2, [r7, #12]
   832e6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   832e8:	68fb      	ldr	r3, [r7, #12]
   832ea:	683a      	ldr	r2, [r7, #0]
   832ec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   832ee:	683b      	ldr	r3, [r7, #0]
   832f0:	687a      	ldr	r2, [r7, #4]
   832f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   832f4:	687b      	ldr	r3, [r7, #4]
   832f6:	681b      	ldr	r3, [r3, #0]
   832f8:	1c5a      	adds	r2, r3, #1
   832fa:	687b      	ldr	r3, [r7, #4]
   832fc:	601a      	str	r2, [r3, #0]
}
   832fe:	3714      	adds	r7, #20
   83300:	46bd      	mov	sp, r7
   83302:	f85d 7b04 	ldr.w	r7, [sp], #4
   83306:	4770      	bx	lr

00083308 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   83308:	b480      	push	{r7}
   8330a:	b085      	sub	sp, #20
   8330c:	af00      	add	r7, sp, #0
   8330e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   83310:	687b      	ldr	r3, [r7, #4]
   83312:	691b      	ldr	r3, [r3, #16]
   83314:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   83316:	687b      	ldr	r3, [r7, #4]
   83318:	685b      	ldr	r3, [r3, #4]
   8331a:	687a      	ldr	r2, [r7, #4]
   8331c:	6892      	ldr	r2, [r2, #8]
   8331e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   83320:	687b      	ldr	r3, [r7, #4]
   83322:	689b      	ldr	r3, [r3, #8]
   83324:	687a      	ldr	r2, [r7, #4]
   83326:	6852      	ldr	r2, [r2, #4]
   83328:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8332a:	68fb      	ldr	r3, [r7, #12]
   8332c:	685a      	ldr	r2, [r3, #4]
   8332e:	687b      	ldr	r3, [r7, #4]
   83330:	429a      	cmp	r2, r3
   83332:	d103      	bne.n	8333c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   83334:	687b      	ldr	r3, [r7, #4]
   83336:	689a      	ldr	r2, [r3, #8]
   83338:	68fb      	ldr	r3, [r7, #12]
   8333a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   8333c:	687b      	ldr	r3, [r7, #4]
   8333e:	2200      	movs	r2, #0
   83340:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   83342:	68fb      	ldr	r3, [r7, #12]
   83344:	681b      	ldr	r3, [r3, #0]
   83346:	1e5a      	subs	r2, r3, #1
   83348:	68fb      	ldr	r3, [r7, #12]
   8334a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8334c:	68fb      	ldr	r3, [r7, #12]
   8334e:	681b      	ldr	r3, [r3, #0]
}
   83350:	4618      	mov	r0, r3
   83352:	3714      	adds	r7, #20
   83354:	46bd      	mov	sp, r7
   83356:	f85d 7b04 	ldr.w	r7, [sp], #4
   8335a:	4770      	bx	lr

0008335c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   8335c:	b480      	push	{r7}
   8335e:	b085      	sub	sp, #20
   83360:	af00      	add	r7, sp, #0
   83362:	60f8      	str	r0, [r7, #12]
   83364:	60b9      	str	r1, [r7, #8]
   83366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   83368:	68fb      	ldr	r3, [r7, #12]
   8336a:	3b04      	subs	r3, #4
   8336c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8336e:	68fb      	ldr	r3, [r7, #12]
   83370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   83374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   83376:	68fb      	ldr	r3, [r7, #12]
   83378:	3b04      	subs	r3, #4
   8337a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   8337c:	68ba      	ldr	r2, [r7, #8]
   8337e:	68fb      	ldr	r3, [r7, #12]
   83380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   83382:	68fb      	ldr	r3, [r7, #12]
   83384:	3b04      	subs	r3, #4
   83386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   83388:	4a09      	ldr	r2, [pc, #36]	; (833b0 <pxPortInitialiseStack+0x54>)
   8338a:	68fb      	ldr	r3, [r7, #12]
   8338c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   8338e:	68fb      	ldr	r3, [r7, #12]
   83390:	3b14      	subs	r3, #20
   83392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   83394:	687a      	ldr	r2, [r7, #4]
   83396:	68fb      	ldr	r3, [r7, #12]
   83398:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   8339a:	68fb      	ldr	r3, [r7, #12]
   8339c:	3b20      	subs	r3, #32
   8339e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   833a0:	68fb      	ldr	r3, [r7, #12]
}
   833a2:	4618      	mov	r0, r3
   833a4:	3714      	adds	r7, #20
   833a6:	46bd      	mov	sp, r7
   833a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   833ac:	4770      	bx	lr
   833ae:	bf00      	nop
   833b0:	000833b5 	.word	0x000833b5

000833b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   833b4:	b580      	push	{r7, lr}
   833b6:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   833b8:	4b05      	ldr	r3, [pc, #20]	; (833d0 <prvTaskExitError+0x1c>)
   833ba:	681b      	ldr	r3, [r3, #0]
   833bc:	f1b3 3fff 	cmp.w	r3, #4294967295
   833c0:	d002      	beq.n	833c8 <prvTaskExitError+0x14>
   833c2:	4b04      	ldr	r3, [pc, #16]	; (833d4 <prvTaskExitError+0x20>)
   833c4:	4798      	blx	r3
   833c6:	e7fe      	b.n	833c6 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   833c8:	4b02      	ldr	r3, [pc, #8]	; (833d4 <prvTaskExitError+0x20>)
   833ca:	4798      	blx	r3
	for( ;; );
   833cc:	e7fe      	b.n	833cc <prvTaskExitError+0x18>
   833ce:	bf00      	nop
   833d0:	20070004 	.word	0x20070004
   833d4:	00083581 	.word	0x00083581

000833d8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   833d8:	4b07      	ldr	r3, [pc, #28]	; (833f8 <pxCurrentTCBConst2>)
   833da:	6819      	ldr	r1, [r3, #0]
   833dc:	6808      	ldr	r0, [r1, #0]
   833de:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   833e2:	f380 8809 	msr	PSP, r0
   833e6:	f3bf 8f6f 	isb	sy
   833ea:	f04f 0000 	mov.w	r0, #0
   833ee:	f380 8811 	msr	BASEPRI, r0
   833f2:	f04e 0e0d 	orr.w	lr, lr, #13
   833f6:	4770      	bx	lr

000833f8 <pxCurrentTCBConst2>:
   833f8:	2007a508 	.word	0x2007a508

000833fc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   833fc:	4806      	ldr	r0, [pc, #24]	; (83418 <prvPortStartFirstTask+0x1c>)
   833fe:	6800      	ldr	r0, [r0, #0]
   83400:	6800      	ldr	r0, [r0, #0]
   83402:	f380 8808 	msr	MSP, r0
   83406:	b662      	cpsie	i
   83408:	b661      	cpsie	f
   8340a:	f3bf 8f4f 	dsb	sy
   8340e:	f3bf 8f6f 	isb	sy
   83412:	df00      	svc	0
   83414:	bf00      	nop
   83416:	0000      	.short	0x0000
   83418:	e000ed08 	.word	0xe000ed08

0008341c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   8341c:	b580      	push	{r7, lr}
   8341e:	b084      	sub	sp, #16
   83420:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   83422:	4b28      	ldr	r3, [pc, #160]	; (834c4 <xPortStartScheduler+0xa8>)
   83424:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   83426:	68fb      	ldr	r3, [r7, #12]
   83428:	781b      	ldrb	r3, [r3, #0]
   8342a:	b2db      	uxtb	r3, r3
   8342c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   8342e:	68fb      	ldr	r3, [r7, #12]
   83430:	22ff      	movs	r2, #255	; 0xff
   83432:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   83434:	68fb      	ldr	r3, [r7, #12]
   83436:	781b      	ldrb	r3, [r3, #0]
   83438:	b2db      	uxtb	r3, r3
   8343a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   8343c:	79fb      	ldrb	r3, [r7, #7]
   8343e:	b2db      	uxtb	r3, r3
   83440:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   83444:	b2da      	uxtb	r2, r3
   83446:	4b20      	ldr	r3, [pc, #128]	; (834c8 <xPortStartScheduler+0xac>)
   83448:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   8344a:	4b20      	ldr	r3, [pc, #128]	; (834cc <xPortStartScheduler+0xb0>)
   8344c:	2207      	movs	r2, #7
   8344e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83450:	e009      	b.n	83466 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   83452:	4b1e      	ldr	r3, [pc, #120]	; (834cc <xPortStartScheduler+0xb0>)
   83454:	681b      	ldr	r3, [r3, #0]
   83456:	1e5a      	subs	r2, r3, #1
   83458:	4b1c      	ldr	r3, [pc, #112]	; (834cc <xPortStartScheduler+0xb0>)
   8345a:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   8345c:	79fb      	ldrb	r3, [r7, #7]
   8345e:	b2db      	uxtb	r3, r3
   83460:	005b      	lsls	r3, r3, #1
   83462:	b2db      	uxtb	r3, r3
   83464:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83466:	79fb      	ldrb	r3, [r7, #7]
   83468:	b2db      	uxtb	r3, r3
   8346a:	b2db      	uxtb	r3, r3
   8346c:	b25b      	sxtb	r3, r3
   8346e:	2b00      	cmp	r3, #0
   83470:	dbef      	blt.n	83452 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   83472:	4b16      	ldr	r3, [pc, #88]	; (834cc <xPortStartScheduler+0xb0>)
   83474:	681b      	ldr	r3, [r3, #0]
   83476:	021a      	lsls	r2, r3, #8
   83478:	4b14      	ldr	r3, [pc, #80]	; (834cc <xPortStartScheduler+0xb0>)
   8347a:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   8347c:	4b13      	ldr	r3, [pc, #76]	; (834cc <xPortStartScheduler+0xb0>)
   8347e:	681b      	ldr	r3, [r3, #0]
   83480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   83484:	4b11      	ldr	r3, [pc, #68]	; (834cc <xPortStartScheduler+0xb0>)
   83486:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   83488:	68bb      	ldr	r3, [r7, #8]
   8348a:	b2da      	uxtb	r2, r3
   8348c:	68fb      	ldr	r3, [r7, #12]
   8348e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   83490:	4b0f      	ldr	r3, [pc, #60]	; (834d0 <xPortStartScheduler+0xb4>)
   83492:	4a0f      	ldr	r2, [pc, #60]	; (834d0 <xPortStartScheduler+0xb4>)
   83494:	6812      	ldr	r2, [r2, #0]
   83496:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8349a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   8349c:	4b0c      	ldr	r3, [pc, #48]	; (834d0 <xPortStartScheduler+0xb4>)
   8349e:	4a0c      	ldr	r2, [pc, #48]	; (834d0 <xPortStartScheduler+0xb4>)
   834a0:	6812      	ldr	r2, [r2, #0]
   834a2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   834a6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   834a8:	4b0a      	ldr	r3, [pc, #40]	; (834d4 <xPortStartScheduler+0xb8>)
   834aa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   834ac:	4b0a      	ldr	r3, [pc, #40]	; (834d8 <xPortStartScheduler+0xbc>)
   834ae:	2200      	movs	r2, #0
   834b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   834b2:	4b0a      	ldr	r3, [pc, #40]	; (834dc <xPortStartScheduler+0xc0>)
   834b4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   834b6:	4b0a      	ldr	r3, [pc, #40]	; (834e0 <xPortStartScheduler+0xc4>)
   834b8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   834ba:	2300      	movs	r3, #0
}
   834bc:	4618      	mov	r0, r3
   834be:	3710      	adds	r7, #16
   834c0:	46bd      	mov	sp, r7
   834c2:	bd80      	pop	{r7, pc}
   834c4:	e000e400 	.word	0xe000e400
   834c8:	200704e8 	.word	0x200704e8
   834cc:	200704ec 	.word	0x200704ec
   834d0:	e000ed20 	.word	0xe000ed20
   834d4:	00083615 	.word	0x00083615
   834d8:	20070004 	.word	0x20070004
   834dc:	000833fd 	.word	0x000833fd
   834e0:	000833b5 	.word	0x000833b5

000834e4 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   834e4:	b480      	push	{r7}
   834e6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   834e8:	4b05      	ldr	r3, [pc, #20]	; (83500 <vPortYield+0x1c>)
   834ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   834ee:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   834f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   834f4:	f3bf 8f6f 	isb	sy
}
   834f8:	46bd      	mov	sp, r7
   834fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   834fe:	4770      	bx	lr
   83500:	e000ed04 	.word	0xe000ed04

00083504 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   83504:	b580      	push	{r7, lr}
   83506:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   83508:	4b0c      	ldr	r3, [pc, #48]	; (8353c <vPortEnterCritical+0x38>)
   8350a:	4798      	blx	r3
	uxCriticalNesting++;
   8350c:	4b0c      	ldr	r3, [pc, #48]	; (83540 <vPortEnterCritical+0x3c>)
   8350e:	681b      	ldr	r3, [r3, #0]
   83510:	1c5a      	adds	r2, r3, #1
   83512:	4b0b      	ldr	r3, [pc, #44]	; (83540 <vPortEnterCritical+0x3c>)
   83514:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   83516:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   8351a:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8351e:	4b08      	ldr	r3, [pc, #32]	; (83540 <vPortEnterCritical+0x3c>)
   83520:	681b      	ldr	r3, [r3, #0]
   83522:	2b01      	cmp	r3, #1
   83524:	d108      	bne.n	83538 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   83526:	4b07      	ldr	r3, [pc, #28]	; (83544 <vPortEnterCritical+0x40>)
   83528:	681b      	ldr	r3, [r3, #0]
   8352a:	f003 031f 	and.w	r3, r3, #31
   8352e:	2b00      	cmp	r3, #0
   83530:	d002      	beq.n	83538 <vPortEnterCritical+0x34>
   83532:	4b02      	ldr	r3, [pc, #8]	; (8353c <vPortEnterCritical+0x38>)
   83534:	4798      	blx	r3
   83536:	e7fe      	b.n	83536 <vPortEnterCritical+0x32>
	}
}
   83538:	bd80      	pop	{r7, pc}
   8353a:	bf00      	nop
   8353c:	00083581 	.word	0x00083581
   83540:	20070004 	.word	0x20070004
   83544:	e000ed04 	.word	0xe000ed04

00083548 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   83548:	b580      	push	{r7, lr}
   8354a:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   8354c:	4b09      	ldr	r3, [pc, #36]	; (83574 <vPortExitCritical+0x2c>)
   8354e:	681b      	ldr	r3, [r3, #0]
   83550:	2b00      	cmp	r3, #0
   83552:	d102      	bne.n	8355a <vPortExitCritical+0x12>
   83554:	4b08      	ldr	r3, [pc, #32]	; (83578 <vPortExitCritical+0x30>)
   83556:	4798      	blx	r3
   83558:	e7fe      	b.n	83558 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   8355a:	4b06      	ldr	r3, [pc, #24]	; (83574 <vPortExitCritical+0x2c>)
   8355c:	681b      	ldr	r3, [r3, #0]
   8355e:	1e5a      	subs	r2, r3, #1
   83560:	4b04      	ldr	r3, [pc, #16]	; (83574 <vPortExitCritical+0x2c>)
   83562:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   83564:	4b03      	ldr	r3, [pc, #12]	; (83574 <vPortExitCritical+0x2c>)
   83566:	681b      	ldr	r3, [r3, #0]
   83568:	2b00      	cmp	r3, #0
   8356a:	d102      	bne.n	83572 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   8356c:	2000      	movs	r0, #0
   8356e:	4b03      	ldr	r3, [pc, #12]	; (8357c <vPortExitCritical+0x34>)
   83570:	4798      	blx	r3
	}
}
   83572:	bd80      	pop	{r7, pc}
   83574:	20070004 	.word	0x20070004
   83578:	00083581 	.word	0x00083581
   8357c:	00083595 	.word	0x00083595

00083580 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   83580:	f3ef 8011 	mrs	r0, BASEPRI
   83584:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   83588:	f381 8811 	msr	BASEPRI, r1
   8358c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   8358e:	2300      	movs	r3, #0
}
   83590:	4618      	mov	r0, r3
   83592:	bf00      	nop

00083594 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   83594:	f380 8811 	msr	BASEPRI, r0
   83598:	4770      	bx	lr
   8359a:	bf00      	nop

0008359c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   8359c:	f3ef 8009 	mrs	r0, PSP
   835a0:	f3bf 8f6f 	isb	sy
   835a4:	4b0d      	ldr	r3, [pc, #52]	; (835dc <pxCurrentTCBConst>)
   835a6:	681a      	ldr	r2, [r3, #0]
   835a8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   835ac:	6010      	str	r0, [r2, #0]
   835ae:	e92d 4008 	stmdb	sp!, {r3, lr}
   835b2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   835b6:	f380 8811 	msr	BASEPRI, r0
   835ba:	f001 f98d 	bl	848d8 <vTaskSwitchContext>
   835be:	f04f 0000 	mov.w	r0, #0
   835c2:	f380 8811 	msr	BASEPRI, r0
   835c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   835ca:	6819      	ldr	r1, [r3, #0]
   835cc:	6808      	ldr	r0, [r1, #0]
   835ce:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   835d2:	f380 8809 	msr	PSP, r0
   835d6:	f3bf 8f6f 	isb	sy
   835da:	4770      	bx	lr

000835dc <pxCurrentTCBConst>:
   835dc:	2007a508 	.word	0x2007a508

000835e0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   835e0:	b580      	push	{r7, lr}
   835e2:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   835e4:	4b07      	ldr	r3, [pc, #28]	; (83604 <SysTick_Handler+0x24>)
   835e6:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   835e8:	4b07      	ldr	r3, [pc, #28]	; (83608 <SysTick_Handler+0x28>)
   835ea:	4798      	blx	r3
   835ec:	4603      	mov	r3, r0
   835ee:	2b00      	cmp	r3, #0
   835f0:	d003      	beq.n	835fa <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   835f2:	4b06      	ldr	r3, [pc, #24]	; (8360c <SysTick_Handler+0x2c>)
   835f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   835f8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   835fa:	2000      	movs	r0, #0
   835fc:	4b04      	ldr	r3, [pc, #16]	; (83610 <SysTick_Handler+0x30>)
   835fe:	4798      	blx	r3
}
   83600:	bd80      	pop	{r7, pc}
   83602:	bf00      	nop
   83604:	00083581 	.word	0x00083581
   83608:	0008475d 	.word	0x0008475d
   8360c:	e000ed04 	.word	0xe000ed04
   83610:	00083595 	.word	0x00083595

00083614 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   83614:	b480      	push	{r7}
   83616:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   83618:	4b07      	ldr	r3, [pc, #28]	; (83638 <vPortSetupTimerInterrupt+0x24>)
   8361a:	4a08      	ldr	r2, [pc, #32]	; (8363c <vPortSetupTimerInterrupt+0x28>)
   8361c:	6811      	ldr	r1, [r2, #0]
   8361e:	4a08      	ldr	r2, [pc, #32]	; (83640 <vPortSetupTimerInterrupt+0x2c>)
   83620:	fba2 0201 	umull	r0, r2, r2, r1
   83624:	0992      	lsrs	r2, r2, #6
   83626:	3a01      	subs	r2, #1
   83628:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   8362a:	4b06      	ldr	r3, [pc, #24]	; (83644 <vPortSetupTimerInterrupt+0x30>)
   8362c:	2207      	movs	r2, #7
   8362e:	601a      	str	r2, [r3, #0]
}
   83630:	46bd      	mov	sp, r7
   83632:	f85d 7b04 	ldr.w	r7, [sp], #4
   83636:	4770      	bx	lr
   83638:	e000e014 	.word	0xe000e014
   8363c:	20070000 	.word	0x20070000
   83640:	10624dd3 	.word	0x10624dd3
   83644:	e000e010 	.word	0xe000e010

00083648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   83648:	b580      	push	{r7, lr}
   8364a:	b082      	sub	sp, #8
   8364c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   8364e:	f3ef 8305 	mrs	r3, IPSR
   83652:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   83654:	687b      	ldr	r3, [r7, #4]
   83656:	2b0f      	cmp	r3, #15
   83658:	d90c      	bls.n	83674 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   8365a:	4a0d      	ldr	r2, [pc, #52]	; (83690 <vPortValidateInterruptPriority+0x48>)
   8365c:	687b      	ldr	r3, [r7, #4]
   8365e:	4413      	add	r3, r2
   83660:	781b      	ldrb	r3, [r3, #0]
   83662:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83664:	4b0b      	ldr	r3, [pc, #44]	; (83694 <vPortValidateInterruptPriority+0x4c>)
   83666:	781b      	ldrb	r3, [r3, #0]
   83668:	78fa      	ldrb	r2, [r7, #3]
   8366a:	429a      	cmp	r2, r3
   8366c:	d202      	bcs.n	83674 <vPortValidateInterruptPriority+0x2c>
   8366e:	4b0a      	ldr	r3, [pc, #40]	; (83698 <vPortValidateInterruptPriority+0x50>)
   83670:	4798      	blx	r3
   83672:	e7fe      	b.n	83672 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   83674:	4b09      	ldr	r3, [pc, #36]	; (8369c <vPortValidateInterruptPriority+0x54>)
   83676:	681b      	ldr	r3, [r3, #0]
   83678:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   8367c:	4b08      	ldr	r3, [pc, #32]	; (836a0 <vPortValidateInterruptPriority+0x58>)
   8367e:	681b      	ldr	r3, [r3, #0]
   83680:	429a      	cmp	r2, r3
   83682:	d902      	bls.n	8368a <vPortValidateInterruptPriority+0x42>
   83684:	4b04      	ldr	r3, [pc, #16]	; (83698 <vPortValidateInterruptPriority+0x50>)
   83686:	4798      	blx	r3
   83688:	e7fe      	b.n	83688 <vPortValidateInterruptPriority+0x40>
	}
   8368a:	3708      	adds	r7, #8
   8368c:	46bd      	mov	sp, r7
   8368e:	bd80      	pop	{r7, pc}
   83690:	e000e3f0 	.word	0xe000e3f0
   83694:	200704e8 	.word	0x200704e8
   83698:	00083581 	.word	0x00083581
   8369c:	e000ed0c 	.word	0xe000ed0c
   836a0:	200704ec 	.word	0x200704ec

000836a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   836a4:	b580      	push	{r7, lr}
   836a6:	b086      	sub	sp, #24
   836a8:	af00      	add	r7, sp, #0
   836aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   836ac:	2300      	movs	r3, #0
   836ae:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   836b0:	4b4f      	ldr	r3, [pc, #316]	; (837f0 <pvPortMalloc+0x14c>)
   836b2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   836b4:	4b4f      	ldr	r3, [pc, #316]	; (837f4 <pvPortMalloc+0x150>)
   836b6:	681b      	ldr	r3, [r3, #0]
   836b8:	2b00      	cmp	r3, #0
   836ba:	d101      	bne.n	836c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   836bc:	4b4e      	ldr	r3, [pc, #312]	; (837f8 <pvPortMalloc+0x154>)
   836be:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   836c0:	4b4e      	ldr	r3, [pc, #312]	; (837fc <pvPortMalloc+0x158>)
   836c2:	681a      	ldr	r2, [r3, #0]
   836c4:	687b      	ldr	r3, [r7, #4]
   836c6:	4013      	ands	r3, r2
   836c8:	2b00      	cmp	r3, #0
   836ca:	d17d      	bne.n	837c8 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   836cc:	687b      	ldr	r3, [r7, #4]
   836ce:	2b00      	cmp	r3, #0
   836d0:	d015      	beq.n	836fe <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   836d2:	2308      	movs	r3, #8
   836d4:	687a      	ldr	r2, [r7, #4]
   836d6:	4413      	add	r3, r2
   836d8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   836da:	687b      	ldr	r3, [r7, #4]
   836dc:	f003 0307 	and.w	r3, r3, #7
   836e0:	2b00      	cmp	r3, #0
   836e2:	d00c      	beq.n	836fe <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   836e4:	687b      	ldr	r3, [r7, #4]
   836e6:	f023 0307 	bic.w	r3, r3, #7
   836ea:	3308      	adds	r3, #8
   836ec:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   836ee:	687b      	ldr	r3, [r7, #4]
   836f0:	f003 0307 	and.w	r3, r3, #7
   836f4:	2b00      	cmp	r3, #0
   836f6:	d002      	beq.n	836fe <pvPortMalloc+0x5a>
   836f8:	4b41      	ldr	r3, [pc, #260]	; (83800 <pvPortMalloc+0x15c>)
   836fa:	4798      	blx	r3
   836fc:	e7fe      	b.n	836fc <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   836fe:	687b      	ldr	r3, [r7, #4]
   83700:	2b00      	cmp	r3, #0
   83702:	d061      	beq.n	837c8 <pvPortMalloc+0x124>
   83704:	4b3f      	ldr	r3, [pc, #252]	; (83804 <pvPortMalloc+0x160>)
   83706:	681b      	ldr	r3, [r3, #0]
   83708:	687a      	ldr	r2, [r7, #4]
   8370a:	429a      	cmp	r2, r3
   8370c:	d85c      	bhi.n	837c8 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   8370e:	4b3e      	ldr	r3, [pc, #248]	; (83808 <pvPortMalloc+0x164>)
   83710:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   83712:	4b3d      	ldr	r3, [pc, #244]	; (83808 <pvPortMalloc+0x164>)
   83714:	681b      	ldr	r3, [r3, #0]
   83716:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83718:	e004      	b.n	83724 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   8371a:	697b      	ldr	r3, [r7, #20]
   8371c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   8371e:	697b      	ldr	r3, [r7, #20]
   83720:	681b      	ldr	r3, [r3, #0]
   83722:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83724:	697b      	ldr	r3, [r7, #20]
   83726:	685a      	ldr	r2, [r3, #4]
   83728:	687b      	ldr	r3, [r7, #4]
   8372a:	429a      	cmp	r2, r3
   8372c:	d203      	bcs.n	83736 <pvPortMalloc+0x92>
   8372e:	697b      	ldr	r3, [r7, #20]
   83730:	681b      	ldr	r3, [r3, #0]
   83732:	2b00      	cmp	r3, #0
   83734:	d1f1      	bne.n	8371a <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   83736:	4b2f      	ldr	r3, [pc, #188]	; (837f4 <pvPortMalloc+0x150>)
   83738:	681b      	ldr	r3, [r3, #0]
   8373a:	697a      	ldr	r2, [r7, #20]
   8373c:	429a      	cmp	r2, r3
   8373e:	d043      	beq.n	837c8 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   83740:	693b      	ldr	r3, [r7, #16]
   83742:	681a      	ldr	r2, [r3, #0]
   83744:	2308      	movs	r3, #8
   83746:	4413      	add	r3, r2
   83748:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8374a:	697b      	ldr	r3, [r7, #20]
   8374c:	681a      	ldr	r2, [r3, #0]
   8374e:	693b      	ldr	r3, [r7, #16]
   83750:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   83752:	697b      	ldr	r3, [r7, #20]
   83754:	685a      	ldr	r2, [r3, #4]
   83756:	687b      	ldr	r3, [r7, #4]
   83758:	1ad2      	subs	r2, r2, r3
   8375a:	2308      	movs	r3, #8
   8375c:	005b      	lsls	r3, r3, #1
   8375e:	429a      	cmp	r2, r3
   83760:	d917      	bls.n	83792 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   83762:	697a      	ldr	r2, [r7, #20]
   83764:	687b      	ldr	r3, [r7, #4]
   83766:	4413      	add	r3, r2
   83768:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8376a:	68bb      	ldr	r3, [r7, #8]
   8376c:	f003 0307 	and.w	r3, r3, #7
   83770:	2b00      	cmp	r3, #0
   83772:	d002      	beq.n	8377a <pvPortMalloc+0xd6>
   83774:	4b22      	ldr	r3, [pc, #136]	; (83800 <pvPortMalloc+0x15c>)
   83776:	4798      	blx	r3
   83778:	e7fe      	b.n	83778 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8377a:	697b      	ldr	r3, [r7, #20]
   8377c:	685a      	ldr	r2, [r3, #4]
   8377e:	687b      	ldr	r3, [r7, #4]
   83780:	1ad2      	subs	r2, r2, r3
   83782:	68bb      	ldr	r3, [r7, #8]
   83784:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   83786:	697b      	ldr	r3, [r7, #20]
   83788:	687a      	ldr	r2, [r7, #4]
   8378a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   8378c:	68b8      	ldr	r0, [r7, #8]
   8378e:	4b1f      	ldr	r3, [pc, #124]	; (8380c <pvPortMalloc+0x168>)
   83790:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   83792:	4b1c      	ldr	r3, [pc, #112]	; (83804 <pvPortMalloc+0x160>)
   83794:	681a      	ldr	r2, [r3, #0]
   83796:	697b      	ldr	r3, [r7, #20]
   83798:	685b      	ldr	r3, [r3, #4]
   8379a:	1ad2      	subs	r2, r2, r3
   8379c:	4b19      	ldr	r3, [pc, #100]	; (83804 <pvPortMalloc+0x160>)
   8379e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   837a0:	4b18      	ldr	r3, [pc, #96]	; (83804 <pvPortMalloc+0x160>)
   837a2:	681a      	ldr	r2, [r3, #0]
   837a4:	4b1a      	ldr	r3, [pc, #104]	; (83810 <pvPortMalloc+0x16c>)
   837a6:	681b      	ldr	r3, [r3, #0]
   837a8:	429a      	cmp	r2, r3
   837aa:	d203      	bcs.n	837b4 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   837ac:	4b15      	ldr	r3, [pc, #84]	; (83804 <pvPortMalloc+0x160>)
   837ae:	681a      	ldr	r2, [r3, #0]
   837b0:	4b17      	ldr	r3, [pc, #92]	; (83810 <pvPortMalloc+0x16c>)
   837b2:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   837b4:	697b      	ldr	r3, [r7, #20]
   837b6:	685a      	ldr	r2, [r3, #4]
   837b8:	4b10      	ldr	r3, [pc, #64]	; (837fc <pvPortMalloc+0x158>)
   837ba:	681b      	ldr	r3, [r3, #0]
   837bc:	431a      	orrs	r2, r3
   837be:	697b      	ldr	r3, [r7, #20]
   837c0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   837c2:	697b      	ldr	r3, [r7, #20]
   837c4:	2200      	movs	r2, #0
   837c6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   837c8:	4b12      	ldr	r3, [pc, #72]	; (83814 <pvPortMalloc+0x170>)
   837ca:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   837cc:	68fb      	ldr	r3, [r7, #12]
   837ce:	2b00      	cmp	r3, #0
   837d0:	d101      	bne.n	837d6 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   837d2:	4b11      	ldr	r3, [pc, #68]	; (83818 <pvPortMalloc+0x174>)
   837d4:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   837d6:	68fb      	ldr	r3, [r7, #12]
   837d8:	f003 0307 	and.w	r3, r3, #7
   837dc:	2b00      	cmp	r3, #0
   837de:	d002      	beq.n	837e6 <pvPortMalloc+0x142>
   837e0:	4b07      	ldr	r3, [pc, #28]	; (83800 <pvPortMalloc+0x15c>)
   837e2:	4798      	blx	r3
   837e4:	e7fe      	b.n	837e4 <pvPortMalloc+0x140>
	return pvReturn;
   837e6:	68fb      	ldr	r3, [r7, #12]
}
   837e8:	4618      	mov	r0, r3
   837ea:	3718      	adds	r7, #24
   837ec:	46bd      	mov	sp, r7
   837ee:	bd80      	pop	{r7, pc}
   837f0:	000845f1 	.word	0x000845f1
   837f4:	2007a4f8 	.word	0x2007a4f8
   837f8:	000838c1 	.word	0x000838c1
   837fc:	2007a504 	.word	0x2007a504
   83800:	00083581 	.word	0x00083581
   83804:	2007a4fc 	.word	0x2007a4fc
   83808:	2007a4f0 	.word	0x2007a4f0
   8380c:	00083985 	.word	0x00083985
   83810:	2007a500 	.word	0x2007a500
   83814:	0008460d 	.word	0x0008460d
   83818:	000865c5 	.word	0x000865c5

0008381c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   8381c:	b580      	push	{r7, lr}
   8381e:	b084      	sub	sp, #16
   83820:	af00      	add	r7, sp, #0
   83822:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   83824:	687b      	ldr	r3, [r7, #4]
   83826:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   83828:	687b      	ldr	r3, [r7, #4]
   8382a:	2b00      	cmp	r3, #0
   8382c:	d038      	beq.n	838a0 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   8382e:	2308      	movs	r3, #8
   83830:	425b      	negs	r3, r3
   83832:	68fa      	ldr	r2, [r7, #12]
   83834:	4413      	add	r3, r2
   83836:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   83838:	68fb      	ldr	r3, [r7, #12]
   8383a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   8383c:	68bb      	ldr	r3, [r7, #8]
   8383e:	685a      	ldr	r2, [r3, #4]
   83840:	4b19      	ldr	r3, [pc, #100]	; (838a8 <vPortFree+0x8c>)
   83842:	681b      	ldr	r3, [r3, #0]
   83844:	4013      	ands	r3, r2
   83846:	2b00      	cmp	r3, #0
   83848:	d102      	bne.n	83850 <vPortFree+0x34>
   8384a:	4b18      	ldr	r3, [pc, #96]	; (838ac <vPortFree+0x90>)
   8384c:	4798      	blx	r3
   8384e:	e7fe      	b.n	8384e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   83850:	68bb      	ldr	r3, [r7, #8]
   83852:	681b      	ldr	r3, [r3, #0]
   83854:	2b00      	cmp	r3, #0
   83856:	d002      	beq.n	8385e <vPortFree+0x42>
   83858:	4b14      	ldr	r3, [pc, #80]	; (838ac <vPortFree+0x90>)
   8385a:	4798      	blx	r3
   8385c:	e7fe      	b.n	8385c <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   8385e:	68bb      	ldr	r3, [r7, #8]
   83860:	685a      	ldr	r2, [r3, #4]
   83862:	4b11      	ldr	r3, [pc, #68]	; (838a8 <vPortFree+0x8c>)
   83864:	681b      	ldr	r3, [r3, #0]
   83866:	4013      	ands	r3, r2
   83868:	2b00      	cmp	r3, #0
   8386a:	d019      	beq.n	838a0 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   8386c:	68bb      	ldr	r3, [r7, #8]
   8386e:	681b      	ldr	r3, [r3, #0]
   83870:	2b00      	cmp	r3, #0
   83872:	d115      	bne.n	838a0 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   83874:	68bb      	ldr	r3, [r7, #8]
   83876:	685a      	ldr	r2, [r3, #4]
   83878:	4b0b      	ldr	r3, [pc, #44]	; (838a8 <vPortFree+0x8c>)
   8387a:	681b      	ldr	r3, [r3, #0]
   8387c:	43db      	mvns	r3, r3
   8387e:	401a      	ands	r2, r3
   83880:	68bb      	ldr	r3, [r7, #8]
   83882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   83884:	4b0a      	ldr	r3, [pc, #40]	; (838b0 <vPortFree+0x94>)
   83886:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   83888:	68bb      	ldr	r3, [r7, #8]
   8388a:	685a      	ldr	r2, [r3, #4]
   8388c:	4b09      	ldr	r3, [pc, #36]	; (838b4 <vPortFree+0x98>)
   8388e:	681b      	ldr	r3, [r3, #0]
   83890:	441a      	add	r2, r3
   83892:	4b08      	ldr	r3, [pc, #32]	; (838b4 <vPortFree+0x98>)
   83894:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   83896:	68b8      	ldr	r0, [r7, #8]
   83898:	4b07      	ldr	r3, [pc, #28]	; (838b8 <vPortFree+0x9c>)
   8389a:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   8389c:	4b07      	ldr	r3, [pc, #28]	; (838bc <vPortFree+0xa0>)
   8389e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   838a0:	3710      	adds	r7, #16
   838a2:	46bd      	mov	sp, r7
   838a4:	bd80      	pop	{r7, pc}
   838a6:	bf00      	nop
   838a8:	2007a504 	.word	0x2007a504
   838ac:	00083581 	.word	0x00083581
   838b0:	000845f1 	.word	0x000845f1
   838b4:	2007a4fc 	.word	0x2007a4fc
   838b8:	00083985 	.word	0x00083985
   838bc:	0008460d 	.word	0x0008460d

000838c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   838c0:	b480      	push	{r7}
   838c2:	b085      	sub	sp, #20
   838c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   838c6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   838ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   838cc:	4b27      	ldr	r3, [pc, #156]	; (8396c <prvHeapInit+0xac>)
   838ce:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   838d0:	68fb      	ldr	r3, [r7, #12]
   838d2:	f003 0307 	and.w	r3, r3, #7
   838d6:	2b00      	cmp	r3, #0
   838d8:	d00c      	beq.n	838f4 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   838da:	68fb      	ldr	r3, [r7, #12]
   838dc:	3307      	adds	r3, #7
   838de:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   838e0:	68fb      	ldr	r3, [r7, #12]
   838e2:	f023 0307 	bic.w	r3, r3, #7
   838e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   838e8:	68ba      	ldr	r2, [r7, #8]
   838ea:	68fb      	ldr	r3, [r7, #12]
   838ec:	1ad2      	subs	r2, r2, r3
   838ee:	4b1f      	ldr	r3, [pc, #124]	; (8396c <prvHeapInit+0xac>)
   838f0:	4413      	add	r3, r2
   838f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   838f4:	68fb      	ldr	r3, [r7, #12]
   838f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   838f8:	4b1d      	ldr	r3, [pc, #116]	; (83970 <prvHeapInit+0xb0>)
   838fa:	687a      	ldr	r2, [r7, #4]
   838fc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   838fe:	4b1c      	ldr	r3, [pc, #112]	; (83970 <prvHeapInit+0xb0>)
   83900:	2200      	movs	r2, #0
   83902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   83904:	687a      	ldr	r2, [r7, #4]
   83906:	68bb      	ldr	r3, [r7, #8]
   83908:	4413      	add	r3, r2
   8390a:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   8390c:	2308      	movs	r3, #8
   8390e:	68fa      	ldr	r2, [r7, #12]
   83910:	1ad3      	subs	r3, r2, r3
   83912:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83914:	68fb      	ldr	r3, [r7, #12]
   83916:	f023 0307 	bic.w	r3, r3, #7
   8391a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   8391c:	68fa      	ldr	r2, [r7, #12]
   8391e:	4b15      	ldr	r3, [pc, #84]	; (83974 <prvHeapInit+0xb4>)
   83920:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   83922:	4b14      	ldr	r3, [pc, #80]	; (83974 <prvHeapInit+0xb4>)
   83924:	681b      	ldr	r3, [r3, #0]
   83926:	2200      	movs	r2, #0
   83928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8392a:	4b12      	ldr	r3, [pc, #72]	; (83974 <prvHeapInit+0xb4>)
   8392c:	681b      	ldr	r3, [r3, #0]
   8392e:	2200      	movs	r2, #0
   83930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   83932:	687b      	ldr	r3, [r7, #4]
   83934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   83936:	683b      	ldr	r3, [r7, #0]
   83938:	68fa      	ldr	r2, [r7, #12]
   8393a:	1ad2      	subs	r2, r2, r3
   8393c:	683b      	ldr	r3, [r7, #0]
   8393e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83940:	4b0c      	ldr	r3, [pc, #48]	; (83974 <prvHeapInit+0xb4>)
   83942:	681a      	ldr	r2, [r3, #0]
   83944:	683b      	ldr	r3, [r7, #0]
   83946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83948:	683b      	ldr	r3, [r7, #0]
   8394a:	685a      	ldr	r2, [r3, #4]
   8394c:	4b0a      	ldr	r3, [pc, #40]	; (83978 <prvHeapInit+0xb8>)
   8394e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83950:	683b      	ldr	r3, [r7, #0]
   83952:	685a      	ldr	r2, [r3, #4]
   83954:	4b09      	ldr	r3, [pc, #36]	; (8397c <prvHeapInit+0xbc>)
   83956:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   83958:	4b09      	ldr	r3, [pc, #36]	; (83980 <prvHeapInit+0xc0>)
   8395a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   8395e:	601a      	str	r2, [r3, #0]
}
   83960:	3714      	adds	r7, #20
   83962:	46bd      	mov	sp, r7
   83964:	f85d 7b04 	ldr.w	r7, [sp], #4
   83968:	4770      	bx	lr
   8396a:	bf00      	nop
   8396c:	200704f0 	.word	0x200704f0
   83970:	2007a4f0 	.word	0x2007a4f0
   83974:	2007a4f8 	.word	0x2007a4f8
   83978:	2007a500 	.word	0x2007a500
   8397c:	2007a4fc 	.word	0x2007a4fc
   83980:	2007a504 	.word	0x2007a504

00083984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   83984:	b480      	push	{r7}
   83986:	b085      	sub	sp, #20
   83988:	af00      	add	r7, sp, #0
   8398a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8398c:	4b27      	ldr	r3, [pc, #156]	; (83a2c <prvInsertBlockIntoFreeList+0xa8>)
   8398e:	60fb      	str	r3, [r7, #12]
   83990:	e002      	b.n	83998 <prvInsertBlockIntoFreeList+0x14>
   83992:	68fb      	ldr	r3, [r7, #12]
   83994:	681b      	ldr	r3, [r3, #0]
   83996:	60fb      	str	r3, [r7, #12]
   83998:	68fb      	ldr	r3, [r7, #12]
   8399a:	681a      	ldr	r2, [r3, #0]
   8399c:	687b      	ldr	r3, [r7, #4]
   8399e:	429a      	cmp	r2, r3
   839a0:	d3f7      	bcc.n	83992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   839a2:	68fb      	ldr	r3, [r7, #12]
   839a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   839a6:	68fb      	ldr	r3, [r7, #12]
   839a8:	685b      	ldr	r3, [r3, #4]
   839aa:	68ba      	ldr	r2, [r7, #8]
   839ac:	441a      	add	r2, r3
   839ae:	687b      	ldr	r3, [r7, #4]
   839b0:	429a      	cmp	r2, r3
   839b2:	d108      	bne.n	839c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   839b4:	68fb      	ldr	r3, [r7, #12]
   839b6:	685a      	ldr	r2, [r3, #4]
   839b8:	687b      	ldr	r3, [r7, #4]
   839ba:	685b      	ldr	r3, [r3, #4]
   839bc:	441a      	add	r2, r3
   839be:	68fb      	ldr	r3, [r7, #12]
   839c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   839c2:	68fb      	ldr	r3, [r7, #12]
   839c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   839c6:	687b      	ldr	r3, [r7, #4]
   839c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   839ca:	687b      	ldr	r3, [r7, #4]
   839cc:	685b      	ldr	r3, [r3, #4]
   839ce:	68ba      	ldr	r2, [r7, #8]
   839d0:	441a      	add	r2, r3
   839d2:	68fb      	ldr	r3, [r7, #12]
   839d4:	681b      	ldr	r3, [r3, #0]
   839d6:	429a      	cmp	r2, r3
   839d8:	d118      	bne.n	83a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   839da:	68fb      	ldr	r3, [r7, #12]
   839dc:	681a      	ldr	r2, [r3, #0]
   839de:	4b14      	ldr	r3, [pc, #80]	; (83a30 <prvInsertBlockIntoFreeList+0xac>)
   839e0:	681b      	ldr	r3, [r3, #0]
   839e2:	429a      	cmp	r2, r3
   839e4:	d00d      	beq.n	83a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   839e6:	687b      	ldr	r3, [r7, #4]
   839e8:	685a      	ldr	r2, [r3, #4]
   839ea:	68fb      	ldr	r3, [r7, #12]
   839ec:	681b      	ldr	r3, [r3, #0]
   839ee:	685b      	ldr	r3, [r3, #4]
   839f0:	441a      	add	r2, r3
   839f2:	687b      	ldr	r3, [r7, #4]
   839f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   839f6:	68fb      	ldr	r3, [r7, #12]
   839f8:	681b      	ldr	r3, [r3, #0]
   839fa:	681a      	ldr	r2, [r3, #0]
   839fc:	687b      	ldr	r3, [r7, #4]
   839fe:	601a      	str	r2, [r3, #0]
   83a00:	e008      	b.n	83a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   83a02:	4b0b      	ldr	r3, [pc, #44]	; (83a30 <prvInsertBlockIntoFreeList+0xac>)
   83a04:	681a      	ldr	r2, [r3, #0]
   83a06:	687b      	ldr	r3, [r7, #4]
   83a08:	601a      	str	r2, [r3, #0]
   83a0a:	e003      	b.n	83a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   83a0c:	68fb      	ldr	r3, [r7, #12]
   83a0e:	681a      	ldr	r2, [r3, #0]
   83a10:	687b      	ldr	r3, [r7, #4]
   83a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   83a14:	68fa      	ldr	r2, [r7, #12]
   83a16:	687b      	ldr	r3, [r7, #4]
   83a18:	429a      	cmp	r2, r3
   83a1a:	d002      	beq.n	83a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   83a1c:	68fb      	ldr	r3, [r7, #12]
   83a1e:	687a      	ldr	r2, [r7, #4]
   83a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   83a22:	3714      	adds	r7, #20
   83a24:	46bd      	mov	sp, r7
   83a26:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a2a:	4770      	bx	lr
   83a2c:	2007a4f0 	.word	0x2007a4f0
   83a30:	2007a4f8 	.word	0x2007a4f8

00083a34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   83a34:	b580      	push	{r7, lr}
   83a36:	b084      	sub	sp, #16
   83a38:	af00      	add	r7, sp, #0
   83a3a:	6078      	str	r0, [r7, #4]
   83a3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83a3e:	687b      	ldr	r3, [r7, #4]
   83a40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   83a42:	68fb      	ldr	r3, [r7, #12]
   83a44:	2b00      	cmp	r3, #0
   83a46:	d102      	bne.n	83a4e <xQueueGenericReset+0x1a>
   83a48:	4b26      	ldr	r3, [pc, #152]	; (83ae4 <xQueueGenericReset+0xb0>)
   83a4a:	4798      	blx	r3
   83a4c:	e7fe      	b.n	83a4c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   83a4e:	4b26      	ldr	r3, [pc, #152]	; (83ae8 <xQueueGenericReset+0xb4>)
   83a50:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   83a52:	68fb      	ldr	r3, [r7, #12]
   83a54:	681a      	ldr	r2, [r3, #0]
   83a56:	68fb      	ldr	r3, [r7, #12]
   83a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83a5a:	68f9      	ldr	r1, [r7, #12]
   83a5c:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83a5e:	fb01 f303 	mul.w	r3, r1, r3
   83a62:	441a      	add	r2, r3
   83a64:	68fb      	ldr	r3, [r7, #12]
   83a66:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   83a68:	68fb      	ldr	r3, [r7, #12]
   83a6a:	2200      	movs	r2, #0
   83a6c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   83a6e:	68fb      	ldr	r3, [r7, #12]
   83a70:	681a      	ldr	r2, [r3, #0]
   83a72:	68fb      	ldr	r3, [r7, #12]
   83a74:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   83a76:	68fb      	ldr	r3, [r7, #12]
   83a78:	681a      	ldr	r2, [r3, #0]
   83a7a:	68fb      	ldr	r3, [r7, #12]
   83a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83a7e:	3b01      	subs	r3, #1
   83a80:	68f9      	ldr	r1, [r7, #12]
   83a82:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83a84:	fb01 f303 	mul.w	r3, r1, r3
   83a88:	441a      	add	r2, r3
   83a8a:	68fb      	ldr	r3, [r7, #12]
   83a8c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   83a8e:	68fb      	ldr	r3, [r7, #12]
   83a90:	f04f 32ff 	mov.w	r2, #4294967295
   83a94:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   83a96:	68fb      	ldr	r3, [r7, #12]
   83a98:	f04f 32ff 	mov.w	r2, #4294967295
   83a9c:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   83a9e:	683b      	ldr	r3, [r7, #0]
   83aa0:	2b00      	cmp	r3, #0
   83aa2:	d10e      	bne.n	83ac2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83aa4:	68fb      	ldr	r3, [r7, #12]
   83aa6:	691b      	ldr	r3, [r3, #16]
   83aa8:	2b00      	cmp	r3, #0
   83aaa:	d014      	beq.n	83ad6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83aac:	68fb      	ldr	r3, [r7, #12]
   83aae:	3310      	adds	r3, #16
   83ab0:	4618      	mov	r0, r3
   83ab2:	4b0e      	ldr	r3, [pc, #56]	; (83aec <xQueueGenericReset+0xb8>)
   83ab4:	4798      	blx	r3
   83ab6:	4603      	mov	r3, r0
   83ab8:	2b01      	cmp	r3, #1
   83aba:	d10c      	bne.n	83ad6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   83abc:	4b0c      	ldr	r3, [pc, #48]	; (83af0 <xQueueGenericReset+0xbc>)
   83abe:	4798      	blx	r3
   83ac0:	e009      	b.n	83ad6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   83ac2:	68fb      	ldr	r3, [r7, #12]
   83ac4:	3310      	adds	r3, #16
   83ac6:	4618      	mov	r0, r3
   83ac8:	4b0a      	ldr	r3, [pc, #40]	; (83af4 <xQueueGenericReset+0xc0>)
   83aca:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   83acc:	68fb      	ldr	r3, [r7, #12]
   83ace:	3324      	adds	r3, #36	; 0x24
   83ad0:	4618      	mov	r0, r3
   83ad2:	4b08      	ldr	r3, [pc, #32]	; (83af4 <xQueueGenericReset+0xc0>)
   83ad4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   83ad6:	4b08      	ldr	r3, [pc, #32]	; (83af8 <xQueueGenericReset+0xc4>)
   83ad8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   83ada:	2301      	movs	r3, #1
}
   83adc:	4618      	mov	r0, r3
   83ade:	3710      	adds	r7, #16
   83ae0:	46bd      	mov	sp, r7
   83ae2:	bd80      	pop	{r7, pc}
   83ae4:	00083581 	.word	0x00083581
   83ae8:	00083505 	.word	0x00083505
   83aec:	00084af5 	.word	0x00084af5
   83af0:	000834e5 	.word	0x000834e5
   83af4:	000831f9 	.word	0x000831f9
   83af8:	00083549 	.word	0x00083549

00083afc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   83afc:	b580      	push	{r7, lr}
   83afe:	b088      	sub	sp, #32
   83b00:	af00      	add	r7, sp, #0
   83b02:	60f8      	str	r0, [r7, #12]
   83b04:	60b9      	str	r1, [r7, #8]
   83b06:	4613      	mov	r3, r2
   83b08:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   83b0a:	2300      	movs	r3, #0
   83b0c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   83b0e:	68fb      	ldr	r3, [r7, #12]
   83b10:	2b00      	cmp	r3, #0
   83b12:	d026      	beq.n	83b62 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   83b14:	204c      	movs	r0, #76	; 0x4c
   83b16:	4b18      	ldr	r3, [pc, #96]	; (83b78 <xQueueGenericCreate+0x7c>)
   83b18:	4798      	blx	r3
   83b1a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   83b1c:	69bb      	ldr	r3, [r7, #24]
   83b1e:	2b00      	cmp	r3, #0
   83b20:	d01f      	beq.n	83b62 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83b22:	68fb      	ldr	r3, [r7, #12]
   83b24:	68ba      	ldr	r2, [r7, #8]
   83b26:	fb02 f303 	mul.w	r3, r2, r3
   83b2a:	3301      	adds	r3, #1
   83b2c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   83b2e:	6978      	ldr	r0, [r7, #20]
   83b30:	4b11      	ldr	r3, [pc, #68]	; (83b78 <xQueueGenericCreate+0x7c>)
   83b32:	4798      	blx	r3
   83b34:	4602      	mov	r2, r0
   83b36:	69bb      	ldr	r3, [r7, #24]
   83b38:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   83b3a:	69bb      	ldr	r3, [r7, #24]
   83b3c:	681b      	ldr	r3, [r3, #0]
   83b3e:	2b00      	cmp	r3, #0
   83b40:	d00c      	beq.n	83b5c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   83b42:	69bb      	ldr	r3, [r7, #24]
   83b44:	68fa      	ldr	r2, [r7, #12]
   83b46:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   83b48:	69bb      	ldr	r3, [r7, #24]
   83b4a:	68ba      	ldr	r2, [r7, #8]
   83b4c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   83b4e:	69b8      	ldr	r0, [r7, #24]
   83b50:	2101      	movs	r1, #1
   83b52:	4b0a      	ldr	r3, [pc, #40]	; (83b7c <xQueueGenericCreate+0x80>)
   83b54:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   83b56:	69bb      	ldr	r3, [r7, #24]
   83b58:	61fb      	str	r3, [r7, #28]
   83b5a:	e002      	b.n	83b62 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   83b5c:	69b8      	ldr	r0, [r7, #24]
   83b5e:	4b08      	ldr	r3, [pc, #32]	; (83b80 <xQueueGenericCreate+0x84>)
   83b60:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   83b62:	69fb      	ldr	r3, [r7, #28]
   83b64:	2b00      	cmp	r3, #0
   83b66:	d102      	bne.n	83b6e <xQueueGenericCreate+0x72>
   83b68:	4b06      	ldr	r3, [pc, #24]	; (83b84 <xQueueGenericCreate+0x88>)
   83b6a:	4798      	blx	r3
   83b6c:	e7fe      	b.n	83b6c <xQueueGenericCreate+0x70>

	return xReturn;
   83b6e:	69fb      	ldr	r3, [r7, #28]
}
   83b70:	4618      	mov	r0, r3
   83b72:	3720      	adds	r7, #32
   83b74:	46bd      	mov	sp, r7
   83b76:	bd80      	pop	{r7, pc}
   83b78:	000836a5 	.word	0x000836a5
   83b7c:	00083a35 	.word	0x00083a35
   83b80:	0008381d 	.word	0x0008381d
   83b84:	00083581 	.word	0x00083581

00083b88 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   83b88:	b580      	push	{r7, lr}
   83b8a:	b08a      	sub	sp, #40	; 0x28
   83b8c:	af00      	add	r7, sp, #0
   83b8e:	60f8      	str	r0, [r7, #12]
   83b90:	60b9      	str	r1, [r7, #8]
   83b92:	607a      	str	r2, [r7, #4]
   83b94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   83b96:	2300      	movs	r3, #0
   83b98:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83b9a:	68fb      	ldr	r3, [r7, #12]
   83b9c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83b9e:	6a3b      	ldr	r3, [r7, #32]
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	d102      	bne.n	83baa <xQueueGenericSend+0x22>
   83ba4:	4b5b      	ldr	r3, [pc, #364]	; (83d14 <xQueueGenericSend+0x18c>)
   83ba6:	4798      	blx	r3
   83ba8:	e7fe      	b.n	83ba8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83baa:	68bb      	ldr	r3, [r7, #8]
   83bac:	2b00      	cmp	r3, #0
   83bae:	d103      	bne.n	83bb8 <xQueueGenericSend+0x30>
   83bb0:	6a3b      	ldr	r3, [r7, #32]
   83bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83bb4:	2b00      	cmp	r3, #0
   83bb6:	d101      	bne.n	83bbc <xQueueGenericSend+0x34>
   83bb8:	2301      	movs	r3, #1
   83bba:	e000      	b.n	83bbe <xQueueGenericSend+0x36>
   83bbc:	2300      	movs	r3, #0
   83bbe:	2b00      	cmp	r3, #0
   83bc0:	d102      	bne.n	83bc8 <xQueueGenericSend+0x40>
   83bc2:	4b54      	ldr	r3, [pc, #336]	; (83d14 <xQueueGenericSend+0x18c>)
   83bc4:	4798      	blx	r3
   83bc6:	e7fe      	b.n	83bc6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83bc8:	683b      	ldr	r3, [r7, #0]
   83bca:	2b02      	cmp	r3, #2
   83bcc:	d103      	bne.n	83bd6 <xQueueGenericSend+0x4e>
   83bce:	6a3b      	ldr	r3, [r7, #32]
   83bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83bd2:	2b01      	cmp	r3, #1
   83bd4:	d101      	bne.n	83bda <xQueueGenericSend+0x52>
   83bd6:	2301      	movs	r3, #1
   83bd8:	e000      	b.n	83bdc <xQueueGenericSend+0x54>
   83bda:	2300      	movs	r3, #0
   83bdc:	2b00      	cmp	r3, #0
   83bde:	d102      	bne.n	83be6 <xQueueGenericSend+0x5e>
   83be0:	4b4c      	ldr	r3, [pc, #304]	; (83d14 <xQueueGenericSend+0x18c>)
   83be2:	4798      	blx	r3
   83be4:	e7fe      	b.n	83be4 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83be6:	4b4c      	ldr	r3, [pc, #304]	; (83d18 <xQueueGenericSend+0x190>)
   83be8:	4798      	blx	r3
   83bea:	4603      	mov	r3, r0
   83bec:	2b00      	cmp	r3, #0
   83bee:	d102      	bne.n	83bf6 <xQueueGenericSend+0x6e>
   83bf0:	687b      	ldr	r3, [r7, #4]
   83bf2:	2b00      	cmp	r3, #0
   83bf4:	d101      	bne.n	83bfa <xQueueGenericSend+0x72>
   83bf6:	2301      	movs	r3, #1
   83bf8:	e000      	b.n	83bfc <xQueueGenericSend+0x74>
   83bfa:	2300      	movs	r3, #0
   83bfc:	2b00      	cmp	r3, #0
   83bfe:	d102      	bne.n	83c06 <xQueueGenericSend+0x7e>
   83c00:	4b44      	ldr	r3, [pc, #272]	; (83d14 <xQueueGenericSend+0x18c>)
   83c02:	4798      	blx	r3
   83c04:	e7fe      	b.n	83c04 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   83c06:	4b45      	ldr	r3, [pc, #276]	; (83d1c <xQueueGenericSend+0x194>)
   83c08:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83c0a:	6a3b      	ldr	r3, [r7, #32]
   83c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83c0e:	6a3b      	ldr	r3, [r7, #32]
   83c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83c12:	429a      	cmp	r2, r3
   83c14:	d302      	bcc.n	83c1c <xQueueGenericSend+0x94>
   83c16:	683b      	ldr	r3, [r7, #0]
   83c18:	2b02      	cmp	r3, #2
   83c1a:	d11d      	bne.n	83c58 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   83c1c:	6a38      	ldr	r0, [r7, #32]
   83c1e:	68b9      	ldr	r1, [r7, #8]
   83c20:	683a      	ldr	r2, [r7, #0]
   83c22:	4b3f      	ldr	r3, [pc, #252]	; (83d20 <xQueueGenericSend+0x198>)
   83c24:	4798      	blx	r3
   83c26:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83c28:	6a3b      	ldr	r3, [r7, #32]
   83c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83c2c:	2b00      	cmp	r3, #0
   83c2e:	d00a      	beq.n	83c46 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   83c30:	6a3b      	ldr	r3, [r7, #32]
   83c32:	3324      	adds	r3, #36	; 0x24
   83c34:	4618      	mov	r0, r3
   83c36:	4b3b      	ldr	r3, [pc, #236]	; (83d24 <xQueueGenericSend+0x19c>)
   83c38:	4798      	blx	r3
   83c3a:	4603      	mov	r3, r0
   83c3c:	2b01      	cmp	r3, #1
   83c3e:	d107      	bne.n	83c50 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   83c40:	4b39      	ldr	r3, [pc, #228]	; (83d28 <xQueueGenericSend+0x1a0>)
   83c42:	4798      	blx	r3
   83c44:	e004      	b.n	83c50 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   83c46:	69fb      	ldr	r3, [r7, #28]
   83c48:	2b00      	cmp	r3, #0
   83c4a:	d001      	beq.n	83c50 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83c4c:	4b36      	ldr	r3, [pc, #216]	; (83d28 <xQueueGenericSend+0x1a0>)
   83c4e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   83c50:	4b36      	ldr	r3, [pc, #216]	; (83d2c <xQueueGenericSend+0x1a4>)
   83c52:	4798      	blx	r3
				return pdPASS;
   83c54:	2301      	movs	r3, #1
   83c56:	e059      	b.n	83d0c <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83c58:	687b      	ldr	r3, [r7, #4]
   83c5a:	2b00      	cmp	r3, #0
   83c5c:	d103      	bne.n	83c66 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83c5e:	4b33      	ldr	r3, [pc, #204]	; (83d2c <xQueueGenericSend+0x1a4>)
   83c60:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   83c62:	2300      	movs	r3, #0
   83c64:	e052      	b.n	83d0c <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   83c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83c68:	2b00      	cmp	r3, #0
   83c6a:	d106      	bne.n	83c7a <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83c6c:	f107 0314 	add.w	r3, r7, #20
   83c70:	4618      	mov	r0, r3
   83c72:	4b2f      	ldr	r3, [pc, #188]	; (83d30 <xQueueGenericSend+0x1a8>)
   83c74:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83c76:	2301      	movs	r3, #1
   83c78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83c7a:	4b2c      	ldr	r3, [pc, #176]	; (83d2c <xQueueGenericSend+0x1a4>)
   83c7c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83c7e:	4b2d      	ldr	r3, [pc, #180]	; (83d34 <xQueueGenericSend+0x1ac>)
   83c80:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83c82:	4b26      	ldr	r3, [pc, #152]	; (83d1c <xQueueGenericSend+0x194>)
   83c84:	4798      	blx	r3
   83c86:	6a3b      	ldr	r3, [r7, #32]
   83c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83c8e:	d102      	bne.n	83c96 <xQueueGenericSend+0x10e>
   83c90:	6a3b      	ldr	r3, [r7, #32]
   83c92:	2200      	movs	r2, #0
   83c94:	645a      	str	r2, [r3, #68]	; 0x44
   83c96:	6a3b      	ldr	r3, [r7, #32]
   83c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83c9e:	d102      	bne.n	83ca6 <xQueueGenericSend+0x11e>
   83ca0:	6a3b      	ldr	r3, [r7, #32]
   83ca2:	2200      	movs	r2, #0
   83ca4:	649a      	str	r2, [r3, #72]	; 0x48
   83ca6:	4b21      	ldr	r3, [pc, #132]	; (83d2c <xQueueGenericSend+0x1a4>)
   83ca8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83caa:	f107 0214 	add.w	r2, r7, #20
   83cae:	1d3b      	adds	r3, r7, #4
   83cb0:	4610      	mov	r0, r2
   83cb2:	4619      	mov	r1, r3
   83cb4:	4b20      	ldr	r3, [pc, #128]	; (83d38 <xQueueGenericSend+0x1b0>)
   83cb6:	4798      	blx	r3
   83cb8:	4603      	mov	r3, r0
   83cba:	2b00      	cmp	r3, #0
   83cbc:	d11e      	bne.n	83cfc <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   83cbe:	6a38      	ldr	r0, [r7, #32]
   83cc0:	4b1e      	ldr	r3, [pc, #120]	; (83d3c <xQueueGenericSend+0x1b4>)
   83cc2:	4798      	blx	r3
   83cc4:	4603      	mov	r3, r0
   83cc6:	2b00      	cmp	r3, #0
   83cc8:	d012      	beq.n	83cf0 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   83cca:	6a3b      	ldr	r3, [r7, #32]
   83ccc:	f103 0210 	add.w	r2, r3, #16
   83cd0:	687b      	ldr	r3, [r7, #4]
   83cd2:	4610      	mov	r0, r2
   83cd4:	4619      	mov	r1, r3
   83cd6:	4b1a      	ldr	r3, [pc, #104]	; (83d40 <xQueueGenericSend+0x1b8>)
   83cd8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   83cda:	6a38      	ldr	r0, [r7, #32]
   83cdc:	4b19      	ldr	r3, [pc, #100]	; (83d44 <xQueueGenericSend+0x1bc>)
   83cde:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   83ce0:	4b19      	ldr	r3, [pc, #100]	; (83d48 <xQueueGenericSend+0x1c0>)
   83ce2:	4798      	blx	r3
   83ce4:	4603      	mov	r3, r0
   83ce6:	2b00      	cmp	r3, #0
   83ce8:	d10f      	bne.n	83d0a <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   83cea:	4b0f      	ldr	r3, [pc, #60]	; (83d28 <xQueueGenericSend+0x1a0>)
   83cec:	4798      	blx	r3
   83cee:	e00c      	b.n	83d0a <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83cf0:	6a38      	ldr	r0, [r7, #32]
   83cf2:	4b14      	ldr	r3, [pc, #80]	; (83d44 <xQueueGenericSend+0x1bc>)
   83cf4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83cf6:	4b14      	ldr	r3, [pc, #80]	; (83d48 <xQueueGenericSend+0x1c0>)
   83cf8:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   83cfa:	e784      	b.n	83c06 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   83cfc:	6a38      	ldr	r0, [r7, #32]
   83cfe:	4b11      	ldr	r3, [pc, #68]	; (83d44 <xQueueGenericSend+0x1bc>)
   83d00:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83d02:	4b11      	ldr	r3, [pc, #68]	; (83d48 <xQueueGenericSend+0x1c0>)
   83d04:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   83d06:	2300      	movs	r3, #0
   83d08:	e000      	b.n	83d0c <xQueueGenericSend+0x184>
		}
	}
   83d0a:	e77c      	b.n	83c06 <xQueueGenericSend+0x7e>
}
   83d0c:	4618      	mov	r0, r3
   83d0e:	3728      	adds	r7, #40	; 0x28
   83d10:	46bd      	mov	sp, r7
   83d12:	bd80      	pop	{r7, pc}
   83d14:	00083581 	.word	0x00083581
   83d18:	00084fcd 	.word	0x00084fcd
   83d1c:	00083505 	.word	0x00083505
   83d20:	00084045 	.word	0x00084045
   83d24:	00084af5 	.word	0x00084af5
   83d28:	000834e5 	.word	0x000834e5
   83d2c:	00083549 	.word	0x00083549
   83d30:	00084bb5 	.word	0x00084bb5
   83d34:	000845f1 	.word	0x000845f1
   83d38:	00084bed 	.word	0x00084bed
   83d3c:	00084255 	.word	0x00084255
   83d40:	000849d5 	.word	0x000849d5
   83d44:	00084179 	.word	0x00084179
   83d48:	0008460d 	.word	0x0008460d

00083d4c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83d4c:	b580      	push	{r7, lr}
   83d4e:	b088      	sub	sp, #32
   83d50:	af00      	add	r7, sp, #0
   83d52:	60f8      	str	r0, [r7, #12]
   83d54:	60b9      	str	r1, [r7, #8]
   83d56:	607a      	str	r2, [r7, #4]
   83d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83d5a:	68fb      	ldr	r3, [r7, #12]
   83d5c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   83d5e:	69bb      	ldr	r3, [r7, #24]
   83d60:	2b00      	cmp	r3, #0
   83d62:	d102      	bne.n	83d6a <xQueueGenericSendFromISR+0x1e>
   83d64:	4b33      	ldr	r3, [pc, #204]	; (83e34 <xQueueGenericSendFromISR+0xe8>)
   83d66:	4798      	blx	r3
   83d68:	e7fe      	b.n	83d68 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83d6a:	68bb      	ldr	r3, [r7, #8]
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	d103      	bne.n	83d78 <xQueueGenericSendFromISR+0x2c>
   83d70:	69bb      	ldr	r3, [r7, #24]
   83d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83d74:	2b00      	cmp	r3, #0
   83d76:	d101      	bne.n	83d7c <xQueueGenericSendFromISR+0x30>
   83d78:	2301      	movs	r3, #1
   83d7a:	e000      	b.n	83d7e <xQueueGenericSendFromISR+0x32>
   83d7c:	2300      	movs	r3, #0
   83d7e:	2b00      	cmp	r3, #0
   83d80:	d102      	bne.n	83d88 <xQueueGenericSendFromISR+0x3c>
   83d82:	4b2c      	ldr	r3, [pc, #176]	; (83e34 <xQueueGenericSendFromISR+0xe8>)
   83d84:	4798      	blx	r3
   83d86:	e7fe      	b.n	83d86 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83d88:	683b      	ldr	r3, [r7, #0]
   83d8a:	2b02      	cmp	r3, #2
   83d8c:	d103      	bne.n	83d96 <xQueueGenericSendFromISR+0x4a>
   83d8e:	69bb      	ldr	r3, [r7, #24]
   83d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83d92:	2b01      	cmp	r3, #1
   83d94:	d101      	bne.n	83d9a <xQueueGenericSendFromISR+0x4e>
   83d96:	2301      	movs	r3, #1
   83d98:	e000      	b.n	83d9c <xQueueGenericSendFromISR+0x50>
   83d9a:	2300      	movs	r3, #0
   83d9c:	2b00      	cmp	r3, #0
   83d9e:	d102      	bne.n	83da6 <xQueueGenericSendFromISR+0x5a>
   83da0:	4b24      	ldr	r3, [pc, #144]	; (83e34 <xQueueGenericSendFromISR+0xe8>)
   83da2:	4798      	blx	r3
   83da4:	e7fe      	b.n	83da4 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   83da6:	4b24      	ldr	r3, [pc, #144]	; (83e38 <xQueueGenericSendFromISR+0xec>)
   83da8:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83daa:	4b22      	ldr	r3, [pc, #136]	; (83e34 <xQueueGenericSendFromISR+0xe8>)
   83dac:	4798      	blx	r3
   83dae:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83db0:	69bb      	ldr	r3, [r7, #24]
   83db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83db4:	69bb      	ldr	r3, [r7, #24]
   83db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83db8:	429a      	cmp	r2, r3
   83dba:	d302      	bcc.n	83dc2 <xQueueGenericSendFromISR+0x76>
   83dbc:	683b      	ldr	r3, [r7, #0]
   83dbe:	2b02      	cmp	r3, #2
   83dc0:	d12d      	bne.n	83e1e <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   83dc2:	69b8      	ldr	r0, [r7, #24]
   83dc4:	68b9      	ldr	r1, [r7, #8]
   83dc6:	683a      	ldr	r2, [r7, #0]
   83dc8:	4b1c      	ldr	r3, [pc, #112]	; (83e3c <xQueueGenericSendFromISR+0xf0>)
   83dca:	4798      	blx	r3
   83dcc:	4603      	mov	r3, r0
   83dce:	2b00      	cmp	r3, #0
   83dd0:	d005      	beq.n	83dde <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   83dd2:	687b      	ldr	r3, [r7, #4]
   83dd4:	2b00      	cmp	r3, #0
   83dd6:	d002      	beq.n	83dde <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   83dd8:	687b      	ldr	r3, [r7, #4]
   83dda:	2201      	movs	r2, #1
   83ddc:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   83dde:	69bb      	ldr	r3, [r7, #24]
   83de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83de2:	f1b3 3fff 	cmp.w	r3, #4294967295
   83de6:	d112      	bne.n	83e0e <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83de8:	69bb      	ldr	r3, [r7, #24]
   83dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83dec:	2b00      	cmp	r3, #0
   83dee:	d013      	beq.n	83e18 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83df0:	69bb      	ldr	r3, [r7, #24]
   83df2:	3324      	adds	r3, #36	; 0x24
   83df4:	4618      	mov	r0, r3
   83df6:	4b12      	ldr	r3, [pc, #72]	; (83e40 <xQueueGenericSendFromISR+0xf4>)
   83df8:	4798      	blx	r3
   83dfa:	4603      	mov	r3, r0
   83dfc:	2b00      	cmp	r3, #0
   83dfe:	d00b      	beq.n	83e18 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   83e00:	687b      	ldr	r3, [r7, #4]
   83e02:	2b00      	cmp	r3, #0
   83e04:	d008      	beq.n	83e18 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   83e06:	687b      	ldr	r3, [r7, #4]
   83e08:	2201      	movs	r2, #1
   83e0a:	601a      	str	r2, [r3, #0]
   83e0c:	e004      	b.n	83e18 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   83e0e:	69bb      	ldr	r3, [r7, #24]
   83e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83e12:	1c5a      	adds	r2, r3, #1
   83e14:	69bb      	ldr	r3, [r7, #24]
   83e16:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   83e18:	2301      	movs	r3, #1
   83e1a:	61fb      	str	r3, [r7, #28]
   83e1c:	e001      	b.n	83e22 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   83e1e:	2300      	movs	r3, #0
   83e20:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   83e22:	6978      	ldr	r0, [r7, #20]
   83e24:	4b07      	ldr	r3, [pc, #28]	; (83e44 <xQueueGenericSendFromISR+0xf8>)
   83e26:	4798      	blx	r3

	return xReturn;
   83e28:	69fb      	ldr	r3, [r7, #28]
}
   83e2a:	4618      	mov	r0, r3
   83e2c:	3720      	adds	r7, #32
   83e2e:	46bd      	mov	sp, r7
   83e30:	bd80      	pop	{r7, pc}
   83e32:	bf00      	nop
   83e34:	00083581 	.word	0x00083581
   83e38:	00083649 	.word	0x00083649
   83e3c:	00084045 	.word	0x00084045
   83e40:	00084af5 	.word	0x00084af5
   83e44:	00083595 	.word	0x00083595

00083e48 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   83e48:	b580      	push	{r7, lr}
   83e4a:	b08a      	sub	sp, #40	; 0x28
   83e4c:	af00      	add	r7, sp, #0
   83e4e:	60f8      	str	r0, [r7, #12]
   83e50:	60b9      	str	r1, [r7, #8]
   83e52:	607a      	str	r2, [r7, #4]
   83e54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   83e56:	2300      	movs	r3, #0
   83e58:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83e5a:	68fb      	ldr	r3, [r7, #12]
   83e5c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83e5e:	6a3b      	ldr	r3, [r7, #32]
   83e60:	2b00      	cmp	r3, #0
   83e62:	d102      	bne.n	83e6a <xQueueGenericReceive+0x22>
   83e64:	4b67      	ldr	r3, [pc, #412]	; (84004 <xQueueGenericReceive+0x1bc>)
   83e66:	4798      	blx	r3
   83e68:	e7fe      	b.n	83e68 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83e6a:	68bb      	ldr	r3, [r7, #8]
   83e6c:	2b00      	cmp	r3, #0
   83e6e:	d103      	bne.n	83e78 <xQueueGenericReceive+0x30>
   83e70:	6a3b      	ldr	r3, [r7, #32]
   83e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83e74:	2b00      	cmp	r3, #0
   83e76:	d101      	bne.n	83e7c <xQueueGenericReceive+0x34>
   83e78:	2301      	movs	r3, #1
   83e7a:	e000      	b.n	83e7e <xQueueGenericReceive+0x36>
   83e7c:	2300      	movs	r3, #0
   83e7e:	2b00      	cmp	r3, #0
   83e80:	d102      	bne.n	83e88 <xQueueGenericReceive+0x40>
   83e82:	4b60      	ldr	r3, [pc, #384]	; (84004 <xQueueGenericReceive+0x1bc>)
   83e84:	4798      	blx	r3
   83e86:	e7fe      	b.n	83e86 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83e88:	4b5f      	ldr	r3, [pc, #380]	; (84008 <xQueueGenericReceive+0x1c0>)
   83e8a:	4798      	blx	r3
   83e8c:	4603      	mov	r3, r0
   83e8e:	2b00      	cmp	r3, #0
   83e90:	d102      	bne.n	83e98 <xQueueGenericReceive+0x50>
   83e92:	687b      	ldr	r3, [r7, #4]
   83e94:	2b00      	cmp	r3, #0
   83e96:	d101      	bne.n	83e9c <xQueueGenericReceive+0x54>
   83e98:	2301      	movs	r3, #1
   83e9a:	e000      	b.n	83e9e <xQueueGenericReceive+0x56>
   83e9c:	2300      	movs	r3, #0
   83e9e:	2b00      	cmp	r3, #0
   83ea0:	d102      	bne.n	83ea8 <xQueueGenericReceive+0x60>
   83ea2:	4b58      	ldr	r3, [pc, #352]	; (84004 <xQueueGenericReceive+0x1bc>)
   83ea4:	4798      	blx	r3
   83ea6:	e7fe      	b.n	83ea6 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83ea8:	4b58      	ldr	r3, [pc, #352]	; (8400c <xQueueGenericReceive+0x1c4>)
   83eaa:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83eac:	6a3b      	ldr	r3, [r7, #32]
   83eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83eb0:	2b00      	cmp	r3, #0
   83eb2:	d03b      	beq.n	83f2c <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   83eb4:	6a3b      	ldr	r3, [r7, #32]
   83eb6:	68db      	ldr	r3, [r3, #12]
   83eb8:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83eba:	6a38      	ldr	r0, [r7, #32]
   83ebc:	68b9      	ldr	r1, [r7, #8]
   83ebe:	4b54      	ldr	r3, [pc, #336]	; (84010 <xQueueGenericReceive+0x1c8>)
   83ec0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   83ec2:	683b      	ldr	r3, [r7, #0]
   83ec4:	2b00      	cmp	r3, #0
   83ec6:	d11c      	bne.n	83f02 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83ec8:	6a3b      	ldr	r3, [r7, #32]
   83eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ecc:	1e5a      	subs	r2, r3, #1
   83ece:	6a3b      	ldr	r3, [r7, #32]
   83ed0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83ed2:	6a3b      	ldr	r3, [r7, #32]
   83ed4:	681b      	ldr	r3, [r3, #0]
   83ed6:	2b00      	cmp	r3, #0
   83ed8:	d104      	bne.n	83ee4 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   83eda:	4b4e      	ldr	r3, [pc, #312]	; (84014 <xQueueGenericReceive+0x1cc>)
   83edc:	4798      	blx	r3
   83ede:	4602      	mov	r2, r0
   83ee0:	6a3b      	ldr	r3, [r7, #32]
   83ee2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83ee4:	6a3b      	ldr	r3, [r7, #32]
   83ee6:	691b      	ldr	r3, [r3, #16]
   83ee8:	2b00      	cmp	r3, #0
   83eea:	d01b      	beq.n	83f24 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83eec:	6a3b      	ldr	r3, [r7, #32]
   83eee:	3310      	adds	r3, #16
   83ef0:	4618      	mov	r0, r3
   83ef2:	4b49      	ldr	r3, [pc, #292]	; (84018 <xQueueGenericReceive+0x1d0>)
   83ef4:	4798      	blx	r3
   83ef6:	4603      	mov	r3, r0
   83ef8:	2b01      	cmp	r3, #1
   83efa:	d113      	bne.n	83f24 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   83efc:	4b47      	ldr	r3, [pc, #284]	; (8401c <xQueueGenericReceive+0x1d4>)
   83efe:	4798      	blx	r3
   83f00:	e010      	b.n	83f24 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   83f02:	6a3b      	ldr	r3, [r7, #32]
   83f04:	69fa      	ldr	r2, [r7, #28]
   83f06:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83f08:	6a3b      	ldr	r3, [r7, #32]
   83f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83f0c:	2b00      	cmp	r3, #0
   83f0e:	d009      	beq.n	83f24 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83f10:	6a3b      	ldr	r3, [r7, #32]
   83f12:	3324      	adds	r3, #36	; 0x24
   83f14:	4618      	mov	r0, r3
   83f16:	4b40      	ldr	r3, [pc, #256]	; (84018 <xQueueGenericReceive+0x1d0>)
   83f18:	4798      	blx	r3
   83f1a:	4603      	mov	r3, r0
   83f1c:	2b00      	cmp	r3, #0
   83f1e:	d001      	beq.n	83f24 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   83f20:	4b3e      	ldr	r3, [pc, #248]	; (8401c <xQueueGenericReceive+0x1d4>)
   83f22:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   83f24:	4b3e      	ldr	r3, [pc, #248]	; (84020 <xQueueGenericReceive+0x1d8>)
   83f26:	4798      	blx	r3
				return pdPASS;
   83f28:	2301      	movs	r3, #1
   83f2a:	e066      	b.n	83ffa <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83f2c:	687b      	ldr	r3, [r7, #4]
   83f2e:	2b00      	cmp	r3, #0
   83f30:	d103      	bne.n	83f3a <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83f32:	4b3b      	ldr	r3, [pc, #236]	; (84020 <xQueueGenericReceive+0x1d8>)
   83f34:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   83f36:	2300      	movs	r3, #0
   83f38:	e05f      	b.n	83ffa <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83f3c:	2b00      	cmp	r3, #0
   83f3e:	d106      	bne.n	83f4e <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83f40:	f107 0314 	add.w	r3, r7, #20
   83f44:	4618      	mov	r0, r3
   83f46:	4b37      	ldr	r3, [pc, #220]	; (84024 <xQueueGenericReceive+0x1dc>)
   83f48:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83f4a:	2301      	movs	r3, #1
   83f4c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83f4e:	4b34      	ldr	r3, [pc, #208]	; (84020 <xQueueGenericReceive+0x1d8>)
   83f50:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83f52:	4b35      	ldr	r3, [pc, #212]	; (84028 <xQueueGenericReceive+0x1e0>)
   83f54:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83f56:	4b2d      	ldr	r3, [pc, #180]	; (8400c <xQueueGenericReceive+0x1c4>)
   83f58:	4798      	blx	r3
   83f5a:	6a3b      	ldr	r3, [r7, #32]
   83f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83f62:	d102      	bne.n	83f6a <xQueueGenericReceive+0x122>
   83f64:	6a3b      	ldr	r3, [r7, #32]
   83f66:	2200      	movs	r2, #0
   83f68:	645a      	str	r2, [r3, #68]	; 0x44
   83f6a:	6a3b      	ldr	r3, [r7, #32]
   83f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83f72:	d102      	bne.n	83f7a <xQueueGenericReceive+0x132>
   83f74:	6a3b      	ldr	r3, [r7, #32]
   83f76:	2200      	movs	r2, #0
   83f78:	649a      	str	r2, [r3, #72]	; 0x48
   83f7a:	4b29      	ldr	r3, [pc, #164]	; (84020 <xQueueGenericReceive+0x1d8>)
   83f7c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83f7e:	f107 0214 	add.w	r2, r7, #20
   83f82:	1d3b      	adds	r3, r7, #4
   83f84:	4610      	mov	r0, r2
   83f86:	4619      	mov	r1, r3
   83f88:	4b28      	ldr	r3, [pc, #160]	; (8402c <xQueueGenericReceive+0x1e4>)
   83f8a:	4798      	blx	r3
   83f8c:	4603      	mov	r3, r0
   83f8e:	2b00      	cmp	r3, #0
   83f90:	d12b      	bne.n	83fea <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   83f92:	6a38      	ldr	r0, [r7, #32]
   83f94:	4b26      	ldr	r3, [pc, #152]	; (84030 <xQueueGenericReceive+0x1e8>)
   83f96:	4798      	blx	r3
   83f98:	4603      	mov	r3, r0
   83f9a:	2b00      	cmp	r3, #0
   83f9c:	d01f      	beq.n	83fde <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83f9e:	6a3b      	ldr	r3, [r7, #32]
   83fa0:	681b      	ldr	r3, [r3, #0]
   83fa2:	2b00      	cmp	r3, #0
   83fa4:	d108      	bne.n	83fb8 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   83fa6:	4b19      	ldr	r3, [pc, #100]	; (8400c <xQueueGenericReceive+0x1c4>)
   83fa8:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83faa:	6a3b      	ldr	r3, [r7, #32]
   83fac:	685b      	ldr	r3, [r3, #4]
   83fae:	4618      	mov	r0, r3
   83fb0:	4b20      	ldr	r3, [pc, #128]	; (84034 <xQueueGenericReceive+0x1ec>)
   83fb2:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   83fb4:	4b1a      	ldr	r3, [pc, #104]	; (84020 <xQueueGenericReceive+0x1d8>)
   83fb6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83fb8:	6a3b      	ldr	r3, [r7, #32]
   83fba:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83fbe:	687b      	ldr	r3, [r7, #4]
   83fc0:	4610      	mov	r0, r2
   83fc2:	4619      	mov	r1, r3
   83fc4:	4b1c      	ldr	r3, [pc, #112]	; (84038 <xQueueGenericReceive+0x1f0>)
   83fc6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83fc8:	6a38      	ldr	r0, [r7, #32]
   83fca:	4b1c      	ldr	r3, [pc, #112]	; (8403c <xQueueGenericReceive+0x1f4>)
   83fcc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83fce:	4b1c      	ldr	r3, [pc, #112]	; (84040 <xQueueGenericReceive+0x1f8>)
   83fd0:	4798      	blx	r3
   83fd2:	4603      	mov	r3, r0
   83fd4:	2b00      	cmp	r3, #0
   83fd6:	d10f      	bne.n	83ff8 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   83fd8:	4b10      	ldr	r3, [pc, #64]	; (8401c <xQueueGenericReceive+0x1d4>)
   83fda:	4798      	blx	r3
   83fdc:	e00c      	b.n	83ff8 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83fde:	6a38      	ldr	r0, [r7, #32]
   83fe0:	4b16      	ldr	r3, [pc, #88]	; (8403c <xQueueGenericReceive+0x1f4>)
   83fe2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83fe4:	4b16      	ldr	r3, [pc, #88]	; (84040 <xQueueGenericReceive+0x1f8>)
   83fe6:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   83fe8:	e75e      	b.n	83ea8 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   83fea:	6a38      	ldr	r0, [r7, #32]
   83fec:	4b13      	ldr	r3, [pc, #76]	; (8403c <xQueueGenericReceive+0x1f4>)
   83fee:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83ff0:	4b13      	ldr	r3, [pc, #76]	; (84040 <xQueueGenericReceive+0x1f8>)
   83ff2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   83ff4:	2300      	movs	r3, #0
   83ff6:	e000      	b.n	83ffa <xQueueGenericReceive+0x1b2>
		}
	}
   83ff8:	e756      	b.n	83ea8 <xQueueGenericReceive+0x60>
}
   83ffa:	4618      	mov	r0, r3
   83ffc:	3728      	adds	r7, #40	; 0x28
   83ffe:	46bd      	mov	sp, r7
   84000:	bd80      	pop	{r7, pc}
   84002:	bf00      	nop
   84004:	00083581 	.word	0x00083581
   84008:	00084fcd 	.word	0x00084fcd
   8400c:	00083505 	.word	0x00083505
   84010:	00084129 	.word	0x00084129
   84014:	000851e1 	.word	0x000851e1
   84018:	00084af5 	.word	0x00084af5
   8401c:	000834e5 	.word	0x000834e5
   84020:	00083549 	.word	0x00083549
   84024:	00084bb5 	.word	0x00084bb5
   84028:	000845f1 	.word	0x000845f1
   8402c:	00084bed 	.word	0x00084bed
   84030:	00084221 	.word	0x00084221
   84034:	00085009 	.word	0x00085009
   84038:	000849d5 	.word	0x000849d5
   8403c:	00084179 	.word	0x00084179
   84040:	0008460d 	.word	0x0008460d

00084044 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   84044:	b580      	push	{r7, lr}
   84046:	b086      	sub	sp, #24
   84048:	af00      	add	r7, sp, #0
   8404a:	60f8      	str	r0, [r7, #12]
   8404c:	60b9      	str	r1, [r7, #8]
   8404e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   84050:	2300      	movs	r3, #0
   84052:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   84054:	68fb      	ldr	r3, [r7, #12]
   84056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84058:	2b00      	cmp	r3, #0
   8405a:	d10d      	bne.n	84078 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8405c:	68fb      	ldr	r3, [r7, #12]
   8405e:	681b      	ldr	r3, [r3, #0]
   84060:	2b00      	cmp	r3, #0
   84062:	d152      	bne.n	8410a <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   84064:	68fb      	ldr	r3, [r7, #12]
   84066:	685b      	ldr	r3, [r3, #4]
   84068:	4618      	mov	r0, r3
   8406a:	4b2d      	ldr	r3, [pc, #180]	; (84120 <prvCopyDataToQueue+0xdc>)
   8406c:	4798      	blx	r3
   8406e:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   84070:	68fb      	ldr	r3, [r7, #12]
   84072:	2200      	movs	r2, #0
   84074:	605a      	str	r2, [r3, #4]
   84076:	e048      	b.n	8410a <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   84078:	687b      	ldr	r3, [r7, #4]
   8407a:	2b00      	cmp	r3, #0
   8407c:	d11a      	bne.n	840b4 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   8407e:	68fb      	ldr	r3, [r7, #12]
   84080:	689a      	ldr	r2, [r3, #8]
   84082:	68fb      	ldr	r3, [r7, #12]
   84084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84086:	4610      	mov	r0, r2
   84088:	68b9      	ldr	r1, [r7, #8]
   8408a:	461a      	mov	r2, r3
   8408c:	4b25      	ldr	r3, [pc, #148]	; (84124 <prvCopyDataToQueue+0xe0>)
   8408e:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   84090:	68fb      	ldr	r3, [r7, #12]
   84092:	689a      	ldr	r2, [r3, #8]
   84094:	68fb      	ldr	r3, [r7, #12]
   84096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84098:	441a      	add	r2, r3
   8409a:	68fb      	ldr	r3, [r7, #12]
   8409c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8409e:	68fb      	ldr	r3, [r7, #12]
   840a0:	689a      	ldr	r2, [r3, #8]
   840a2:	68fb      	ldr	r3, [r7, #12]
   840a4:	685b      	ldr	r3, [r3, #4]
   840a6:	429a      	cmp	r2, r3
   840a8:	d32f      	bcc.n	8410a <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   840aa:	68fb      	ldr	r3, [r7, #12]
   840ac:	681a      	ldr	r2, [r3, #0]
   840ae:	68fb      	ldr	r3, [r7, #12]
   840b0:	609a      	str	r2, [r3, #8]
   840b2:	e02a      	b.n	8410a <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   840b4:	68fb      	ldr	r3, [r7, #12]
   840b6:	68da      	ldr	r2, [r3, #12]
   840b8:	68fb      	ldr	r3, [r7, #12]
   840ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   840bc:	4610      	mov	r0, r2
   840be:	68b9      	ldr	r1, [r7, #8]
   840c0:	461a      	mov	r2, r3
   840c2:	4b18      	ldr	r3, [pc, #96]	; (84124 <prvCopyDataToQueue+0xe0>)
   840c4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   840c6:	68fb      	ldr	r3, [r7, #12]
   840c8:	68da      	ldr	r2, [r3, #12]
   840ca:	68fb      	ldr	r3, [r7, #12]
   840cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   840ce:	425b      	negs	r3, r3
   840d0:	441a      	add	r2, r3
   840d2:	68fb      	ldr	r3, [r7, #12]
   840d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   840d6:	68fb      	ldr	r3, [r7, #12]
   840d8:	68da      	ldr	r2, [r3, #12]
   840da:	68fb      	ldr	r3, [r7, #12]
   840dc:	681b      	ldr	r3, [r3, #0]
   840de:	429a      	cmp	r2, r3
   840e0:	d207      	bcs.n	840f2 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   840e2:	68fb      	ldr	r3, [r7, #12]
   840e4:	685a      	ldr	r2, [r3, #4]
   840e6:	68fb      	ldr	r3, [r7, #12]
   840e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   840ea:	425b      	negs	r3, r3
   840ec:	441a      	add	r2, r3
   840ee:	68fb      	ldr	r3, [r7, #12]
   840f0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   840f2:	687b      	ldr	r3, [r7, #4]
   840f4:	2b02      	cmp	r3, #2
   840f6:	d108      	bne.n	8410a <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   840f8:	68fb      	ldr	r3, [r7, #12]
   840fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   840fc:	2b00      	cmp	r3, #0
   840fe:	d004      	beq.n	8410a <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   84100:	68fb      	ldr	r3, [r7, #12]
   84102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84104:	1e5a      	subs	r2, r3, #1
   84106:	68fb      	ldr	r3, [r7, #12]
   84108:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8410a:	68fb      	ldr	r3, [r7, #12]
   8410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8410e:	1c5a      	adds	r2, r3, #1
   84110:	68fb      	ldr	r3, [r7, #12]
   84112:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   84114:	697b      	ldr	r3, [r7, #20]
}
   84116:	4618      	mov	r0, r3
   84118:	3718      	adds	r7, #24
   8411a:	46bd      	mov	sp, r7
   8411c:	bd80      	pop	{r7, pc}
   8411e:	bf00      	nop
   84120:	000850fd 	.word	0x000850fd
   84124:	00086cb1 	.word	0x00086cb1

00084128 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   84128:	b580      	push	{r7, lr}
   8412a:	b082      	sub	sp, #8
   8412c:	af00      	add	r7, sp, #0
   8412e:	6078      	str	r0, [r7, #4]
   84130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   84132:	687b      	ldr	r3, [r7, #4]
   84134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84136:	2b00      	cmp	r3, #0
   84138:	d019      	beq.n	8416e <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   8413a:	687b      	ldr	r3, [r7, #4]
   8413c:	68da      	ldr	r2, [r3, #12]
   8413e:	687b      	ldr	r3, [r7, #4]
   84140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84142:	441a      	add	r2, r3
   84144:	687b      	ldr	r3, [r7, #4]
   84146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   84148:	687b      	ldr	r3, [r7, #4]
   8414a:	68da      	ldr	r2, [r3, #12]
   8414c:	687b      	ldr	r3, [r7, #4]
   8414e:	685b      	ldr	r3, [r3, #4]
   84150:	429a      	cmp	r2, r3
   84152:	d303      	bcc.n	8415c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   84154:	687b      	ldr	r3, [r7, #4]
   84156:	681a      	ldr	r2, [r3, #0]
   84158:	687b      	ldr	r3, [r7, #4]
   8415a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   8415c:	687b      	ldr	r3, [r7, #4]
   8415e:	68da      	ldr	r2, [r3, #12]
   84160:	687b      	ldr	r3, [r7, #4]
   84162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84164:	6838      	ldr	r0, [r7, #0]
   84166:	4611      	mov	r1, r2
   84168:	461a      	mov	r2, r3
   8416a:	4b02      	ldr	r3, [pc, #8]	; (84174 <prvCopyDataFromQueue+0x4c>)
   8416c:	4798      	blx	r3
	}
}
   8416e:	3708      	adds	r7, #8
   84170:	46bd      	mov	sp, r7
   84172:	bd80      	pop	{r7, pc}
   84174:	00086cb1 	.word	0x00086cb1

00084178 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   84178:	b580      	push	{r7, lr}
   8417a:	b082      	sub	sp, #8
   8417c:	af00      	add	r7, sp, #0
   8417e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   84180:	4b23      	ldr	r3, [pc, #140]	; (84210 <prvUnlockQueue+0x98>)
   84182:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   84184:	e014      	b.n	841b0 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   84186:	687b      	ldr	r3, [r7, #4]
   84188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8418a:	2b00      	cmp	r3, #0
   8418c:	d00a      	beq.n	841a4 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8418e:	687b      	ldr	r3, [r7, #4]
   84190:	3324      	adds	r3, #36	; 0x24
   84192:	4618      	mov	r0, r3
   84194:	4b1f      	ldr	r3, [pc, #124]	; (84214 <prvUnlockQueue+0x9c>)
   84196:	4798      	blx	r3
   84198:	4603      	mov	r3, r0
   8419a:	2b00      	cmp	r3, #0
   8419c:	d003      	beq.n	841a6 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   8419e:	4b1e      	ldr	r3, [pc, #120]	; (84218 <prvUnlockQueue+0xa0>)
   841a0:	4798      	blx	r3
   841a2:	e000      	b.n	841a6 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   841a4:	e008      	b.n	841b8 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   841a6:	687b      	ldr	r3, [r7, #4]
   841a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   841aa:	1e5a      	subs	r2, r3, #1
   841ac:	687b      	ldr	r3, [r7, #4]
   841ae:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   841b0:	687b      	ldr	r3, [r7, #4]
   841b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   841b4:	2b00      	cmp	r3, #0
   841b6:	dce6      	bgt.n	84186 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   841b8:	687b      	ldr	r3, [r7, #4]
   841ba:	f04f 32ff 	mov.w	r2, #4294967295
   841be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   841c0:	4b16      	ldr	r3, [pc, #88]	; (8421c <prvUnlockQueue+0xa4>)
   841c2:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   841c4:	4b12      	ldr	r3, [pc, #72]	; (84210 <prvUnlockQueue+0x98>)
   841c6:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   841c8:	e014      	b.n	841f4 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   841ca:	687b      	ldr	r3, [r7, #4]
   841cc:	691b      	ldr	r3, [r3, #16]
   841ce:	2b00      	cmp	r3, #0
   841d0:	d00f      	beq.n	841f2 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   841d2:	687b      	ldr	r3, [r7, #4]
   841d4:	3310      	adds	r3, #16
   841d6:	4618      	mov	r0, r3
   841d8:	4b0e      	ldr	r3, [pc, #56]	; (84214 <prvUnlockQueue+0x9c>)
   841da:	4798      	blx	r3
   841dc:	4603      	mov	r3, r0
   841de:	2b00      	cmp	r3, #0
   841e0:	d001      	beq.n	841e6 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   841e2:	4b0d      	ldr	r3, [pc, #52]	; (84218 <prvUnlockQueue+0xa0>)
   841e4:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   841e6:	687b      	ldr	r3, [r7, #4]
   841e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   841ea:	1e5a      	subs	r2, r3, #1
   841ec:	687b      	ldr	r3, [r7, #4]
   841ee:	645a      	str	r2, [r3, #68]	; 0x44
   841f0:	e000      	b.n	841f4 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   841f2:	e003      	b.n	841fc <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   841f4:	687b      	ldr	r3, [r7, #4]
   841f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   841f8:	2b00      	cmp	r3, #0
   841fa:	dce6      	bgt.n	841ca <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   841fc:	687b      	ldr	r3, [r7, #4]
   841fe:	f04f 32ff 	mov.w	r2, #4294967295
   84202:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   84204:	4b05      	ldr	r3, [pc, #20]	; (8421c <prvUnlockQueue+0xa4>)
   84206:	4798      	blx	r3
}
   84208:	3708      	adds	r7, #8
   8420a:	46bd      	mov	sp, r7
   8420c:	bd80      	pop	{r7, pc}
   8420e:	bf00      	nop
   84210:	00083505 	.word	0x00083505
   84214:	00084af5 	.word	0x00084af5
   84218:	00084c9d 	.word	0x00084c9d
   8421c:	00083549 	.word	0x00083549

00084220 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   84220:	b580      	push	{r7, lr}
   84222:	b084      	sub	sp, #16
   84224:	af00      	add	r7, sp, #0
   84226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   84228:	4b08      	ldr	r3, [pc, #32]	; (8424c <prvIsQueueEmpty+0x2c>)
   8422a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   8422c:	687b      	ldr	r3, [r7, #4]
   8422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84230:	2b00      	cmp	r3, #0
   84232:	d102      	bne.n	8423a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   84234:	2301      	movs	r3, #1
   84236:	60fb      	str	r3, [r7, #12]
   84238:	e001      	b.n	8423e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   8423a:	2300      	movs	r3, #0
   8423c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8423e:	4b04      	ldr	r3, [pc, #16]	; (84250 <prvIsQueueEmpty+0x30>)
   84240:	4798      	blx	r3

	return xReturn;
   84242:	68fb      	ldr	r3, [r7, #12]
}
   84244:	4618      	mov	r0, r3
   84246:	3710      	adds	r7, #16
   84248:	46bd      	mov	sp, r7
   8424a:	bd80      	pop	{r7, pc}
   8424c:	00083505 	.word	0x00083505
   84250:	00083549 	.word	0x00083549

00084254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   84254:	b580      	push	{r7, lr}
   84256:	b084      	sub	sp, #16
   84258:	af00      	add	r7, sp, #0
   8425a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   8425c:	4b09      	ldr	r3, [pc, #36]	; (84284 <prvIsQueueFull+0x30>)
   8425e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   84260:	687b      	ldr	r3, [r7, #4]
   84262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   84264:	687b      	ldr	r3, [r7, #4]
   84266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   84268:	429a      	cmp	r2, r3
   8426a:	d102      	bne.n	84272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   8426c:	2301      	movs	r3, #1
   8426e:	60fb      	str	r3, [r7, #12]
   84270:	e001      	b.n	84276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   84272:	2300      	movs	r3, #0
   84274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84276:	4b04      	ldr	r3, [pc, #16]	; (84288 <prvIsQueueFull+0x34>)
   84278:	4798      	blx	r3

	return xReturn;
   8427a:	68fb      	ldr	r3, [r7, #12]
}
   8427c:	4618      	mov	r0, r3
   8427e:	3710      	adds	r7, #16
   84280:	46bd      	mov	sp, r7
   84282:	bd80      	pop	{r7, pc}
   84284:	00083505 	.word	0x00083505
   84288:	00083549 	.word	0x00083549

0008428c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   8428c:	b580      	push	{r7, lr}
   8428e:	b084      	sub	sp, #16
   84290:	af00      	add	r7, sp, #0
   84292:	6078      	str	r0, [r7, #4]
   84294:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   84296:	687b      	ldr	r3, [r7, #4]
   84298:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8429a:	4b12      	ldr	r3, [pc, #72]	; (842e4 <vQueueWaitForMessageRestricted+0x58>)
   8429c:	4798      	blx	r3
   8429e:	68fb      	ldr	r3, [r7, #12]
   842a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   842a2:	f1b3 3fff 	cmp.w	r3, #4294967295
   842a6:	d102      	bne.n	842ae <vQueueWaitForMessageRestricted+0x22>
   842a8:	68fb      	ldr	r3, [r7, #12]
   842aa:	2200      	movs	r2, #0
   842ac:	645a      	str	r2, [r3, #68]	; 0x44
   842ae:	68fb      	ldr	r3, [r7, #12]
   842b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   842b2:	f1b3 3fff 	cmp.w	r3, #4294967295
   842b6:	d102      	bne.n	842be <vQueueWaitForMessageRestricted+0x32>
   842b8:	68fb      	ldr	r3, [r7, #12]
   842ba:	2200      	movs	r2, #0
   842bc:	649a      	str	r2, [r3, #72]	; 0x48
   842be:	4b0a      	ldr	r3, [pc, #40]	; (842e8 <vQueueWaitForMessageRestricted+0x5c>)
   842c0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   842c2:	68fb      	ldr	r3, [r7, #12]
   842c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   842c6:	2b00      	cmp	r3, #0
   842c8:	d105      	bne.n	842d6 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   842ca:	68fb      	ldr	r3, [r7, #12]
   842cc:	3324      	adds	r3, #36	; 0x24
   842ce:	4618      	mov	r0, r3
   842d0:	6839      	ldr	r1, [r7, #0]
   842d2:	4b06      	ldr	r3, [pc, #24]	; (842ec <vQueueWaitForMessageRestricted+0x60>)
   842d4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   842d6:	68f8      	ldr	r0, [r7, #12]
   842d8:	4b05      	ldr	r3, [pc, #20]	; (842f0 <vQueueWaitForMessageRestricted+0x64>)
   842da:	4798      	blx	r3
	}
   842dc:	3710      	adds	r7, #16
   842de:	46bd      	mov	sp, r7
   842e0:	bd80      	pop	{r7, pc}
   842e2:	bf00      	nop
   842e4:	00083505 	.word	0x00083505
   842e8:	00083549 	.word	0x00083549
   842ec:	00084a75 	.word	0x00084a75
   842f0:	00084179 	.word	0x00084179

000842f4 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   842f4:	b590      	push	{r4, r7, lr}
   842f6:	b08b      	sub	sp, #44	; 0x2c
   842f8:	af02      	add	r7, sp, #8
   842fa:	60f8      	str	r0, [r7, #12]
   842fc:	60b9      	str	r1, [r7, #8]
   842fe:	603b      	str	r3, [r7, #0]
   84300:	4613      	mov	r3, r2
   84302:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   84304:	68fb      	ldr	r3, [r7, #12]
   84306:	2b00      	cmp	r3, #0
   84308:	d102      	bne.n	84310 <xTaskGenericCreate+0x1c>
   8430a:	4b4b      	ldr	r3, [pc, #300]	; (84438 <xTaskGenericCreate+0x144>)
   8430c:	4798      	blx	r3
   8430e:	e7fe      	b.n	8430e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   84310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84312:	2b04      	cmp	r3, #4
   84314:	d902      	bls.n	8431c <xTaskGenericCreate+0x28>
   84316:	4b48      	ldr	r3, [pc, #288]	; (84438 <xTaskGenericCreate+0x144>)
   84318:	4798      	blx	r3
   8431a:	e7fe      	b.n	8431a <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   8431c:	88fb      	ldrh	r3, [r7, #6]
   8431e:	4618      	mov	r0, r3
   84320:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   84322:	4b46      	ldr	r3, [pc, #280]	; (8443c <xTaskGenericCreate+0x148>)
   84324:	4798      	blx	r3
   84326:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   84328:	69bb      	ldr	r3, [r7, #24]
   8432a:	2b00      	cmp	r3, #0
   8432c:	d06d      	beq.n	8440a <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   8432e:	69bb      	ldr	r3, [r7, #24]
   84330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84332:	88fb      	ldrh	r3, [r7, #6]
   84334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   84338:	3b01      	subs	r3, #1
   8433a:	009b      	lsls	r3, r3, #2
   8433c:	4413      	add	r3, r2
   8433e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   84340:	697b      	ldr	r3, [r7, #20]
   84342:	f023 0307 	bic.w	r3, r3, #7
   84346:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   84348:	697b      	ldr	r3, [r7, #20]
   8434a:	f003 0307 	and.w	r3, r3, #7
   8434e:	2b00      	cmp	r3, #0
   84350:	d002      	beq.n	84358 <xTaskGenericCreate+0x64>
   84352:	4b39      	ldr	r3, [pc, #228]	; (84438 <xTaskGenericCreate+0x144>)
   84354:	4798      	blx	r3
   84356:	e7fe      	b.n	84356 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   84358:	88fb      	ldrh	r3, [r7, #6]
   8435a:	9300      	str	r3, [sp, #0]
   8435c:	69b8      	ldr	r0, [r7, #24]
   8435e:	68b9      	ldr	r1, [r7, #8]
   84360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   84364:	4c36      	ldr	r4, [pc, #216]	; (84440 <xTaskGenericCreate+0x14c>)
   84366:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   84368:	6978      	ldr	r0, [r7, #20]
   8436a:	68f9      	ldr	r1, [r7, #12]
   8436c:	683a      	ldr	r2, [r7, #0]
   8436e:	4b35      	ldr	r3, [pc, #212]	; (84444 <xTaskGenericCreate+0x150>)
   84370:	4798      	blx	r3
   84372:	4602      	mov	r2, r0
   84374:	69bb      	ldr	r3, [r7, #24]
   84376:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   84378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8437a:	2b00      	cmp	r3, #0
   8437c:	d002      	beq.n	84384 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   8437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   84380:	69ba      	ldr	r2, [r7, #24]
   84382:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   84384:	4b30      	ldr	r3, [pc, #192]	; (84448 <xTaskGenericCreate+0x154>)
   84386:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   84388:	4b30      	ldr	r3, [pc, #192]	; (8444c <xTaskGenericCreate+0x158>)
   8438a:	681b      	ldr	r3, [r3, #0]
   8438c:	1c5a      	adds	r2, r3, #1
   8438e:	4b2f      	ldr	r3, [pc, #188]	; (8444c <xTaskGenericCreate+0x158>)
   84390:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   84392:	4b2f      	ldr	r3, [pc, #188]	; (84450 <xTaskGenericCreate+0x15c>)
   84394:	681b      	ldr	r3, [r3, #0]
   84396:	2b00      	cmp	r3, #0
   84398:	d109      	bne.n	843ae <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8439a:	4b2d      	ldr	r3, [pc, #180]	; (84450 <xTaskGenericCreate+0x15c>)
   8439c:	69ba      	ldr	r2, [r7, #24]
   8439e:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   843a0:	4b2a      	ldr	r3, [pc, #168]	; (8444c <xTaskGenericCreate+0x158>)
   843a2:	681b      	ldr	r3, [r3, #0]
   843a4:	2b01      	cmp	r3, #1
   843a6:	d10f      	bne.n	843c8 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   843a8:	4b2a      	ldr	r3, [pc, #168]	; (84454 <xTaskGenericCreate+0x160>)
   843aa:	4798      	blx	r3
   843ac:	e00c      	b.n	843c8 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   843ae:	4b2a      	ldr	r3, [pc, #168]	; (84458 <xTaskGenericCreate+0x164>)
   843b0:	681b      	ldr	r3, [r3, #0]
   843b2:	2b00      	cmp	r3, #0
   843b4:	d108      	bne.n	843c8 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   843b6:	4b26      	ldr	r3, [pc, #152]	; (84450 <xTaskGenericCreate+0x15c>)
   843b8:	681b      	ldr	r3, [r3, #0]
   843ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   843bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   843be:	429a      	cmp	r2, r3
   843c0:	d802      	bhi.n	843c8 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   843c2:	4b23      	ldr	r3, [pc, #140]	; (84450 <xTaskGenericCreate+0x15c>)
   843c4:	69ba      	ldr	r2, [r7, #24]
   843c6:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   843c8:	4b24      	ldr	r3, [pc, #144]	; (8445c <xTaskGenericCreate+0x168>)
   843ca:	681b      	ldr	r3, [r3, #0]
   843cc:	1c5a      	adds	r2, r3, #1
   843ce:	4b23      	ldr	r3, [pc, #140]	; (8445c <xTaskGenericCreate+0x168>)
   843d0:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   843d2:	69bb      	ldr	r3, [r7, #24]
   843d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   843d6:	2201      	movs	r2, #1
   843d8:	409a      	lsls	r2, r3
   843da:	4b21      	ldr	r3, [pc, #132]	; (84460 <xTaskGenericCreate+0x16c>)
   843dc:	681b      	ldr	r3, [r3, #0]
   843de:	431a      	orrs	r2, r3
   843e0:	4b1f      	ldr	r3, [pc, #124]	; (84460 <xTaskGenericCreate+0x16c>)
   843e2:	601a      	str	r2, [r3, #0]
   843e4:	69bb      	ldr	r3, [r7, #24]
   843e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   843e8:	4613      	mov	r3, r2
   843ea:	009b      	lsls	r3, r3, #2
   843ec:	4413      	add	r3, r2
   843ee:	009b      	lsls	r3, r3, #2
   843f0:	4a1c      	ldr	r2, [pc, #112]	; (84464 <xTaskGenericCreate+0x170>)
   843f2:	441a      	add	r2, r3
   843f4:	69bb      	ldr	r3, [r7, #24]
   843f6:	3304      	adds	r3, #4
   843f8:	4610      	mov	r0, r2
   843fa:	4619      	mov	r1, r3
   843fc:	4b1a      	ldr	r3, [pc, #104]	; (84468 <xTaskGenericCreate+0x174>)
   843fe:	4798      	blx	r3

			xReturn = pdPASS;
   84400:	2301      	movs	r3, #1
   84402:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   84404:	4b19      	ldr	r3, [pc, #100]	; (8446c <xTaskGenericCreate+0x178>)
   84406:	4798      	blx	r3
   84408:	e002      	b.n	84410 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8440a:	f04f 33ff 	mov.w	r3, #4294967295
   8440e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   84410:	69fb      	ldr	r3, [r7, #28]
   84412:	2b01      	cmp	r3, #1
   84414:	d10b      	bne.n	8442e <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   84416:	4b10      	ldr	r3, [pc, #64]	; (84458 <xTaskGenericCreate+0x164>)
   84418:	681b      	ldr	r3, [r3, #0]
   8441a:	2b00      	cmp	r3, #0
   8441c:	d007      	beq.n	8442e <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8441e:	4b0c      	ldr	r3, [pc, #48]	; (84450 <xTaskGenericCreate+0x15c>)
   84420:	681b      	ldr	r3, [r3, #0]
   84422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84426:	429a      	cmp	r2, r3
   84428:	d201      	bcs.n	8442e <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   8442a:	4b11      	ldr	r3, [pc, #68]	; (84470 <xTaskGenericCreate+0x17c>)
   8442c:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   8442e:	69fb      	ldr	r3, [r7, #28]
}
   84430:	4618      	mov	r0, r3
   84432:	3724      	adds	r7, #36	; 0x24
   84434:	46bd      	mov	sp, r7
   84436:	bd90      	pop	{r4, r7, pc}
   84438:	00083581 	.word	0x00083581
   8443c:	00084ef1 	.word	0x00084ef1
   84440:	00084cdd 	.word	0x00084cdd
   84444:	0008335d 	.word	0x0008335d
   84448:	00083505 	.word	0x00083505
   8444c:	2007a5e0 	.word	0x2007a5e0
   84450:	2007a508 	.word	0x2007a508
   84454:	00084d75 	.word	0x00084d75
   84458:	2007a5ec 	.word	0x2007a5ec
   8445c:	2007a5fc 	.word	0x2007a5fc
   84460:	2007a5e8 	.word	0x2007a5e8
   84464:	2007a50c 	.word	0x2007a50c
   84468:	00083251 	.word	0x00083251
   8446c:	00083549 	.word	0x00083549
   84470:	000834e5 	.word	0x000834e5

00084474 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   84474:	b580      	push	{r7, lr}
   84476:	b086      	sub	sp, #24
   84478:	af00      	add	r7, sp, #0
   8447a:	6078      	str	r0, [r7, #4]
   8447c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   8447e:	2300      	movs	r3, #0
   84480:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   84482:	687b      	ldr	r3, [r7, #4]
   84484:	2b00      	cmp	r3, #0
   84486:	d102      	bne.n	8448e <vTaskDelayUntil+0x1a>
   84488:	4b2f      	ldr	r3, [pc, #188]	; (84548 <vTaskDelayUntil+0xd4>)
   8448a:	4798      	blx	r3
   8448c:	e7fe      	b.n	8448c <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   8448e:	683b      	ldr	r3, [r7, #0]
   84490:	2b00      	cmp	r3, #0
   84492:	d102      	bne.n	8449a <vTaskDelayUntil+0x26>
   84494:	4b2c      	ldr	r3, [pc, #176]	; (84548 <vTaskDelayUntil+0xd4>)
   84496:	4798      	blx	r3
   84498:	e7fe      	b.n	84498 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   8449a:	4b2c      	ldr	r3, [pc, #176]	; (8454c <vTaskDelayUntil+0xd8>)
   8449c:	681b      	ldr	r3, [r3, #0]
   8449e:	2b00      	cmp	r3, #0
   844a0:	d002      	beq.n	844a8 <vTaskDelayUntil+0x34>
   844a2:	4b29      	ldr	r3, [pc, #164]	; (84548 <vTaskDelayUntil+0xd4>)
   844a4:	4798      	blx	r3
   844a6:	e7fe      	b.n	844a6 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   844a8:	4b29      	ldr	r3, [pc, #164]	; (84550 <vTaskDelayUntil+0xdc>)
   844aa:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   844ac:	4b29      	ldr	r3, [pc, #164]	; (84554 <vTaskDelayUntil+0xe0>)
   844ae:	681b      	ldr	r3, [r3, #0]
   844b0:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   844b2:	687b      	ldr	r3, [r7, #4]
   844b4:	681a      	ldr	r2, [r3, #0]
   844b6:	683b      	ldr	r3, [r7, #0]
   844b8:	4413      	add	r3, r2
   844ba:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   844bc:	687b      	ldr	r3, [r7, #4]
   844be:	681a      	ldr	r2, [r3, #0]
   844c0:	693b      	ldr	r3, [r7, #16]
   844c2:	429a      	cmp	r2, r3
   844c4:	d90b      	bls.n	844de <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   844c6:	687b      	ldr	r3, [r7, #4]
   844c8:	681a      	ldr	r2, [r3, #0]
   844ca:	68fb      	ldr	r3, [r7, #12]
   844cc:	429a      	cmp	r2, r3
   844ce:	d911      	bls.n	844f4 <vTaskDelayUntil+0x80>
   844d0:	68fa      	ldr	r2, [r7, #12]
   844d2:	693b      	ldr	r3, [r7, #16]
   844d4:	429a      	cmp	r2, r3
   844d6:	d90d      	bls.n	844f4 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   844d8:	2301      	movs	r3, #1
   844da:	617b      	str	r3, [r7, #20]
   844dc:	e00a      	b.n	844f4 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   844de:	687b      	ldr	r3, [r7, #4]
   844e0:	681a      	ldr	r2, [r3, #0]
   844e2:	68fb      	ldr	r3, [r7, #12]
   844e4:	429a      	cmp	r2, r3
   844e6:	d803      	bhi.n	844f0 <vTaskDelayUntil+0x7c>
   844e8:	68fa      	ldr	r2, [r7, #12]
   844ea:	693b      	ldr	r3, [r7, #16]
   844ec:	429a      	cmp	r2, r3
   844ee:	d901      	bls.n	844f4 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   844f0:	2301      	movs	r3, #1
   844f2:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   844f4:	687b      	ldr	r3, [r7, #4]
   844f6:	68fa      	ldr	r2, [r7, #12]
   844f8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   844fa:	697b      	ldr	r3, [r7, #20]
   844fc:	2b00      	cmp	r3, #0
   844fe:	d017      	beq.n	84530 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84500:	4b15      	ldr	r3, [pc, #84]	; (84558 <vTaskDelayUntil+0xe4>)
   84502:	681b      	ldr	r3, [r3, #0]
   84504:	3304      	adds	r3, #4
   84506:	4618      	mov	r0, r3
   84508:	4b14      	ldr	r3, [pc, #80]	; (8455c <vTaskDelayUntil+0xe8>)
   8450a:	4798      	blx	r3
   8450c:	4603      	mov	r3, r0
   8450e:	2b00      	cmp	r3, #0
   84510:	d10b      	bne.n	8452a <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84512:	4b11      	ldr	r3, [pc, #68]	; (84558 <vTaskDelayUntil+0xe4>)
   84514:	681b      	ldr	r3, [r3, #0]
   84516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84518:	2201      	movs	r2, #1
   8451a:	fa02 f303 	lsl.w	r3, r2, r3
   8451e:	43da      	mvns	r2, r3
   84520:	4b0f      	ldr	r3, [pc, #60]	; (84560 <vTaskDelayUntil+0xec>)
   84522:	681b      	ldr	r3, [r3, #0]
   84524:	401a      	ands	r2, r3
   84526:	4b0e      	ldr	r3, [pc, #56]	; (84560 <vTaskDelayUntil+0xec>)
   84528:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8452a:	68f8      	ldr	r0, [r7, #12]
   8452c:	4b0d      	ldr	r3, [pc, #52]	; (84564 <vTaskDelayUntil+0xf0>)
   8452e:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   84530:	4b0d      	ldr	r3, [pc, #52]	; (84568 <vTaskDelayUntil+0xf4>)
   84532:	4798      	blx	r3
   84534:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   84536:	68bb      	ldr	r3, [r7, #8]
   84538:	2b00      	cmp	r3, #0
   8453a:	d101      	bne.n	84540 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   8453c:	4b0b      	ldr	r3, [pc, #44]	; (8456c <vTaskDelayUntil+0xf8>)
   8453e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84540:	3718      	adds	r7, #24
   84542:	46bd      	mov	sp, r7
   84544:	bd80      	pop	{r7, pc}
   84546:	bf00      	nop
   84548:	00083581 	.word	0x00083581
   8454c:	2007a600 	.word	0x2007a600
   84550:	000845f1 	.word	0x000845f1
   84554:	2007a5e4 	.word	0x2007a5e4
   84558:	2007a508 	.word	0x2007a508
   8455c:	00083309 	.word	0x00083309
   84560:	2007a5e8 	.word	0x2007a5e8
   84564:	00084e81 	.word	0x00084e81
   84568:	0008460d 	.word	0x0008460d
   8456c:	000834e5 	.word	0x000834e5

00084570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   84570:	b590      	push	{r4, r7, lr}
   84572:	b087      	sub	sp, #28
   84574:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   84576:	2300      	movs	r3, #0
   84578:	9300      	str	r3, [sp, #0]
   8457a:	2300      	movs	r3, #0
   8457c:	9301      	str	r3, [sp, #4]
   8457e:	2300      	movs	r3, #0
   84580:	9302      	str	r3, [sp, #8]
   84582:	2300      	movs	r3, #0
   84584:	9303      	str	r3, [sp, #12]
   84586:	4812      	ldr	r0, [pc, #72]	; (845d0 <vTaskStartScheduler+0x60>)
   84588:	4912      	ldr	r1, [pc, #72]	; (845d4 <vTaskStartScheduler+0x64>)
   8458a:	2282      	movs	r2, #130	; 0x82
   8458c:	2300      	movs	r3, #0
   8458e:	4c12      	ldr	r4, [pc, #72]	; (845d8 <vTaskStartScheduler+0x68>)
   84590:	47a0      	blx	r4
   84592:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   84594:	687b      	ldr	r3, [r7, #4]
   84596:	2b01      	cmp	r3, #1
   84598:	d102      	bne.n	845a0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   8459a:	4b10      	ldr	r3, [pc, #64]	; (845dc <vTaskStartScheduler+0x6c>)
   8459c:	4798      	blx	r3
   8459e:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   845a0:	687b      	ldr	r3, [r7, #4]
   845a2:	2b01      	cmp	r3, #1
   845a4:	d10a      	bne.n	845bc <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   845a6:	4b0e      	ldr	r3, [pc, #56]	; (845e0 <vTaskStartScheduler+0x70>)
   845a8:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   845aa:	4b0e      	ldr	r3, [pc, #56]	; (845e4 <vTaskStartScheduler+0x74>)
   845ac:	2201      	movs	r2, #1
   845ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   845b0:	4b0d      	ldr	r3, [pc, #52]	; (845e8 <vTaskStartScheduler+0x78>)
   845b2:	2200      	movs	r2, #0
   845b4:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   845b6:	4b0d      	ldr	r3, [pc, #52]	; (845ec <vTaskStartScheduler+0x7c>)
   845b8:	4798      	blx	r3
   845ba:	e005      	b.n	845c8 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   845bc:	687b      	ldr	r3, [r7, #4]
   845be:	2b00      	cmp	r3, #0
   845c0:	d102      	bne.n	845c8 <vTaskStartScheduler+0x58>
   845c2:	4b07      	ldr	r3, [pc, #28]	; (845e0 <vTaskStartScheduler+0x70>)
   845c4:	4798      	blx	r3
   845c6:	e7fe      	b.n	845c6 <vTaskStartScheduler+0x56>
	}
}
   845c8:	370c      	adds	r7, #12
   845ca:	46bd      	mov	sp, r7
   845cc:	bd90      	pop	{r4, r7, pc}
   845ce:	bf00      	nop
   845d0:	00084cb5 	.word	0x00084cb5
   845d4:	00087088 	.word	0x00087088
   845d8:	000842f5 	.word	0x000842f5
   845dc:	00085209 	.word	0x00085209
   845e0:	00083581 	.word	0x00083581
   845e4:	2007a5ec 	.word	0x2007a5ec
   845e8:	2007a5e4 	.word	0x2007a5e4
   845ec:	0008341d 	.word	0x0008341d

000845f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   845f0:	b480      	push	{r7}
   845f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   845f4:	4b04      	ldr	r3, [pc, #16]	; (84608 <vTaskSuspendAll+0x18>)
   845f6:	681b      	ldr	r3, [r3, #0]
   845f8:	1c5a      	adds	r2, r3, #1
   845fa:	4b03      	ldr	r3, [pc, #12]	; (84608 <vTaskSuspendAll+0x18>)
   845fc:	601a      	str	r2, [r3, #0]
}
   845fe:	46bd      	mov	sp, r7
   84600:	f85d 7b04 	ldr.w	r7, [sp], #4
   84604:	4770      	bx	lr
   84606:	bf00      	nop
   84608:	2007a600 	.word	0x2007a600

0008460c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   8460c:	b580      	push	{r7, lr}
   8460e:	b082      	sub	sp, #8
   84610:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   84612:	2300      	movs	r3, #0
   84614:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   84616:	4b37      	ldr	r3, [pc, #220]	; (846f4 <xTaskResumeAll+0xe8>)
   84618:	681b      	ldr	r3, [r3, #0]
   8461a:	2b00      	cmp	r3, #0
   8461c:	d102      	bne.n	84624 <xTaskResumeAll+0x18>
   8461e:	4b36      	ldr	r3, [pc, #216]	; (846f8 <xTaskResumeAll+0xec>)
   84620:	4798      	blx	r3
   84622:	e7fe      	b.n	84622 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   84624:	4b35      	ldr	r3, [pc, #212]	; (846fc <xTaskResumeAll+0xf0>)
   84626:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   84628:	4b32      	ldr	r3, [pc, #200]	; (846f4 <xTaskResumeAll+0xe8>)
   8462a:	681b      	ldr	r3, [r3, #0]
   8462c:	1e5a      	subs	r2, r3, #1
   8462e:	4b31      	ldr	r3, [pc, #196]	; (846f4 <xTaskResumeAll+0xe8>)
   84630:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84632:	4b30      	ldr	r3, [pc, #192]	; (846f4 <xTaskResumeAll+0xe8>)
   84634:	681b      	ldr	r3, [r3, #0]
   84636:	2b00      	cmp	r3, #0
   84638:	d155      	bne.n	846e6 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   8463a:	4b31      	ldr	r3, [pc, #196]	; (84700 <xTaskResumeAll+0xf4>)
   8463c:	681b      	ldr	r3, [r3, #0]
   8463e:	2b00      	cmp	r3, #0
   84640:	d051      	beq.n	846e6 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84642:	e02e      	b.n	846a2 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   84644:	4b2f      	ldr	r3, [pc, #188]	; (84704 <xTaskResumeAll+0xf8>)
   84646:	68db      	ldr	r3, [r3, #12]
   84648:	68db      	ldr	r3, [r3, #12]
   8464a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8464c:	683b      	ldr	r3, [r7, #0]
   8464e:	3318      	adds	r3, #24
   84650:	4618      	mov	r0, r3
   84652:	4b2d      	ldr	r3, [pc, #180]	; (84708 <xTaskResumeAll+0xfc>)
   84654:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84656:	683b      	ldr	r3, [r7, #0]
   84658:	3304      	adds	r3, #4
   8465a:	4618      	mov	r0, r3
   8465c:	4b2a      	ldr	r3, [pc, #168]	; (84708 <xTaskResumeAll+0xfc>)
   8465e:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   84660:	683b      	ldr	r3, [r7, #0]
   84662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84664:	2201      	movs	r2, #1
   84666:	409a      	lsls	r2, r3
   84668:	4b28      	ldr	r3, [pc, #160]	; (8470c <xTaskResumeAll+0x100>)
   8466a:	681b      	ldr	r3, [r3, #0]
   8466c:	431a      	orrs	r2, r3
   8466e:	4b27      	ldr	r3, [pc, #156]	; (8470c <xTaskResumeAll+0x100>)
   84670:	601a      	str	r2, [r3, #0]
   84672:	683b      	ldr	r3, [r7, #0]
   84674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84676:	4613      	mov	r3, r2
   84678:	009b      	lsls	r3, r3, #2
   8467a:	4413      	add	r3, r2
   8467c:	009b      	lsls	r3, r3, #2
   8467e:	4a24      	ldr	r2, [pc, #144]	; (84710 <xTaskResumeAll+0x104>)
   84680:	441a      	add	r2, r3
   84682:	683b      	ldr	r3, [r7, #0]
   84684:	3304      	adds	r3, #4
   84686:	4610      	mov	r0, r2
   84688:	4619      	mov	r1, r3
   8468a:	4b22      	ldr	r3, [pc, #136]	; (84714 <xTaskResumeAll+0x108>)
   8468c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8468e:	683b      	ldr	r3, [r7, #0]
   84690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84692:	4b21      	ldr	r3, [pc, #132]	; (84718 <xTaskResumeAll+0x10c>)
   84694:	681b      	ldr	r3, [r3, #0]
   84696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84698:	429a      	cmp	r2, r3
   8469a:	d302      	bcc.n	846a2 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   8469c:	4b1f      	ldr	r3, [pc, #124]	; (8471c <xTaskResumeAll+0x110>)
   8469e:	2201      	movs	r2, #1
   846a0:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   846a2:	4b18      	ldr	r3, [pc, #96]	; (84704 <xTaskResumeAll+0xf8>)
   846a4:	681b      	ldr	r3, [r3, #0]
   846a6:	2b00      	cmp	r3, #0
   846a8:	d1cc      	bne.n	84644 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   846aa:	4b1d      	ldr	r3, [pc, #116]	; (84720 <xTaskResumeAll+0x114>)
   846ac:	681b      	ldr	r3, [r3, #0]
   846ae:	2b00      	cmp	r3, #0
   846b0:	d011      	beq.n	846d6 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   846b2:	e00c      	b.n	846ce <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   846b4:	4b1b      	ldr	r3, [pc, #108]	; (84724 <xTaskResumeAll+0x118>)
   846b6:	4798      	blx	r3
   846b8:	4603      	mov	r3, r0
   846ba:	2b00      	cmp	r3, #0
   846bc:	d002      	beq.n	846c4 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   846be:	4b17      	ldr	r3, [pc, #92]	; (8471c <xTaskResumeAll+0x110>)
   846c0:	2201      	movs	r2, #1
   846c2:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   846c4:	4b16      	ldr	r3, [pc, #88]	; (84720 <xTaskResumeAll+0x114>)
   846c6:	681b      	ldr	r3, [r3, #0]
   846c8:	1e5a      	subs	r2, r3, #1
   846ca:	4b15      	ldr	r3, [pc, #84]	; (84720 <xTaskResumeAll+0x114>)
   846cc:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   846ce:	4b14      	ldr	r3, [pc, #80]	; (84720 <xTaskResumeAll+0x114>)
   846d0:	681b      	ldr	r3, [r3, #0]
   846d2:	2b00      	cmp	r3, #0
   846d4:	d1ee      	bne.n	846b4 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   846d6:	4b11      	ldr	r3, [pc, #68]	; (8471c <xTaskResumeAll+0x110>)
   846d8:	681b      	ldr	r3, [r3, #0]
   846da:	2b01      	cmp	r3, #1
   846dc:	d103      	bne.n	846e6 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   846de:	2301      	movs	r3, #1
   846e0:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   846e2:	4b11      	ldr	r3, [pc, #68]	; (84728 <xTaskResumeAll+0x11c>)
   846e4:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   846e6:	4b11      	ldr	r3, [pc, #68]	; (8472c <xTaskResumeAll+0x120>)
   846e8:	4798      	blx	r3

	return xAlreadyYielded;
   846ea:	687b      	ldr	r3, [r7, #4]
}
   846ec:	4618      	mov	r0, r3
   846ee:	3708      	adds	r7, #8
   846f0:	46bd      	mov	sp, r7
   846f2:	bd80      	pop	{r7, pc}
   846f4:	2007a600 	.word	0x2007a600
   846f8:	00083581 	.word	0x00083581
   846fc:	00083505 	.word	0x00083505
   84700:	2007a5e0 	.word	0x2007a5e0
   84704:	2007a5a0 	.word	0x2007a5a0
   84708:	00083309 	.word	0x00083309
   8470c:	2007a5e8 	.word	0x2007a5e8
   84710:	2007a50c 	.word	0x2007a50c
   84714:	00083251 	.word	0x00083251
   84718:	2007a508 	.word	0x2007a508
   8471c:	2007a5f4 	.word	0x2007a5f4
   84720:	2007a5f0 	.word	0x2007a5f0
   84724:	0008475d 	.word	0x0008475d
   84728:	000834e5 	.word	0x000834e5
   8472c:	00083549 	.word	0x00083549

00084730 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   84730:	b580      	push	{r7, lr}
   84732:	b082      	sub	sp, #8
   84734:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   84736:	4b06      	ldr	r3, [pc, #24]	; (84750 <xTaskGetTickCount+0x20>)
   84738:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8473a:	4b06      	ldr	r3, [pc, #24]	; (84754 <xTaskGetTickCount+0x24>)
   8473c:	681b      	ldr	r3, [r3, #0]
   8473e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   84740:	4b05      	ldr	r3, [pc, #20]	; (84758 <xTaskGetTickCount+0x28>)
   84742:	4798      	blx	r3

	return xTicks;
   84744:	687b      	ldr	r3, [r7, #4]
}
   84746:	4618      	mov	r0, r3
   84748:	3708      	adds	r7, #8
   8474a:	46bd      	mov	sp, r7
   8474c:	bd80      	pop	{r7, pc}
   8474e:	bf00      	nop
   84750:	00083505 	.word	0x00083505
   84754:	2007a5e4 	.word	0x2007a5e4
   84758:	00083549 	.word	0x00083549

0008475c <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   8475c:	b580      	push	{r7, lr}
   8475e:	b086      	sub	sp, #24
   84760:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   84762:	2300      	movs	r3, #0
   84764:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84766:	4b4d      	ldr	r3, [pc, #308]	; (8489c <xTaskIncrementTick+0x140>)
   84768:	681b      	ldr	r3, [r3, #0]
   8476a:	2b00      	cmp	r3, #0
   8476c:	f040 8086 	bne.w	8487c <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   84770:	4b4b      	ldr	r3, [pc, #300]	; (848a0 <xTaskIncrementTick+0x144>)
   84772:	681b      	ldr	r3, [r3, #0]
   84774:	1c5a      	adds	r2, r3, #1
   84776:	4b4a      	ldr	r3, [pc, #296]	; (848a0 <xTaskIncrementTick+0x144>)
   84778:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   8477a:	4b49      	ldr	r3, [pc, #292]	; (848a0 <xTaskIncrementTick+0x144>)
   8477c:	681b      	ldr	r3, [r3, #0]
   8477e:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   84780:	693b      	ldr	r3, [r7, #16]
   84782:	2b00      	cmp	r3, #0
   84784:	d118      	bne.n	847b8 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   84786:	4b47      	ldr	r3, [pc, #284]	; (848a4 <xTaskIncrementTick+0x148>)
   84788:	681b      	ldr	r3, [r3, #0]
   8478a:	681b      	ldr	r3, [r3, #0]
   8478c:	2b00      	cmp	r3, #0
   8478e:	d002      	beq.n	84796 <xTaskIncrementTick+0x3a>
   84790:	4b45      	ldr	r3, [pc, #276]	; (848a8 <xTaskIncrementTick+0x14c>)
   84792:	4798      	blx	r3
   84794:	e7fe      	b.n	84794 <xTaskIncrementTick+0x38>
   84796:	4b43      	ldr	r3, [pc, #268]	; (848a4 <xTaskIncrementTick+0x148>)
   84798:	681b      	ldr	r3, [r3, #0]
   8479a:	60fb      	str	r3, [r7, #12]
   8479c:	4b43      	ldr	r3, [pc, #268]	; (848ac <xTaskIncrementTick+0x150>)
   8479e:	681a      	ldr	r2, [r3, #0]
   847a0:	4b40      	ldr	r3, [pc, #256]	; (848a4 <xTaskIncrementTick+0x148>)
   847a2:	601a      	str	r2, [r3, #0]
   847a4:	4b41      	ldr	r3, [pc, #260]	; (848ac <xTaskIncrementTick+0x150>)
   847a6:	68fa      	ldr	r2, [r7, #12]
   847a8:	601a      	str	r2, [r3, #0]
   847aa:	4b41      	ldr	r3, [pc, #260]	; (848b0 <xTaskIncrementTick+0x154>)
   847ac:	681b      	ldr	r3, [r3, #0]
   847ae:	1c5a      	adds	r2, r3, #1
   847b0:	4b3f      	ldr	r3, [pc, #252]	; (848b0 <xTaskIncrementTick+0x154>)
   847b2:	601a      	str	r2, [r3, #0]
   847b4:	4b3f      	ldr	r3, [pc, #252]	; (848b4 <xTaskIncrementTick+0x158>)
   847b6:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   847b8:	4b3f      	ldr	r3, [pc, #252]	; (848b8 <xTaskIncrementTick+0x15c>)
   847ba:	681b      	ldr	r3, [r3, #0]
   847bc:	693a      	ldr	r2, [r7, #16]
   847be:	429a      	cmp	r2, r3
   847c0:	d34d      	bcc.n	8485e <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   847c2:	4b38      	ldr	r3, [pc, #224]	; (848a4 <xTaskIncrementTick+0x148>)
   847c4:	681b      	ldr	r3, [r3, #0]
   847c6:	681b      	ldr	r3, [r3, #0]
   847c8:	2b00      	cmp	r3, #0
   847ca:	d101      	bne.n	847d0 <xTaskIncrementTick+0x74>
   847cc:	2301      	movs	r3, #1
   847ce:	e000      	b.n	847d2 <xTaskIncrementTick+0x76>
   847d0:	2300      	movs	r3, #0
   847d2:	2b00      	cmp	r3, #0
   847d4:	d004      	beq.n	847e0 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   847d6:	4b38      	ldr	r3, [pc, #224]	; (848b8 <xTaskIncrementTick+0x15c>)
   847d8:	f04f 32ff 	mov.w	r2, #4294967295
   847dc:	601a      	str	r2, [r3, #0]
						break;
   847de:	e03e      	b.n	8485e <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   847e0:	4b30      	ldr	r3, [pc, #192]	; (848a4 <xTaskIncrementTick+0x148>)
   847e2:	681b      	ldr	r3, [r3, #0]
   847e4:	68db      	ldr	r3, [r3, #12]
   847e6:	68db      	ldr	r3, [r3, #12]
   847e8:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   847ea:	68bb      	ldr	r3, [r7, #8]
   847ec:	685b      	ldr	r3, [r3, #4]
   847ee:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   847f0:	693a      	ldr	r2, [r7, #16]
   847f2:	687b      	ldr	r3, [r7, #4]
   847f4:	429a      	cmp	r2, r3
   847f6:	d203      	bcs.n	84800 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   847f8:	4b2f      	ldr	r3, [pc, #188]	; (848b8 <xTaskIncrementTick+0x15c>)
   847fa:	687a      	ldr	r2, [r7, #4]
   847fc:	601a      	str	r2, [r3, #0]
							break;
   847fe:	e02e      	b.n	8485e <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84800:	68bb      	ldr	r3, [r7, #8]
   84802:	3304      	adds	r3, #4
   84804:	4618      	mov	r0, r3
   84806:	4b2d      	ldr	r3, [pc, #180]	; (848bc <xTaskIncrementTick+0x160>)
   84808:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   8480a:	68bb      	ldr	r3, [r7, #8]
   8480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8480e:	2b00      	cmp	r3, #0
   84810:	d004      	beq.n	8481c <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84812:	68bb      	ldr	r3, [r7, #8]
   84814:	3318      	adds	r3, #24
   84816:	4618      	mov	r0, r3
   84818:	4b28      	ldr	r3, [pc, #160]	; (848bc <xTaskIncrementTick+0x160>)
   8481a:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   8481c:	68bb      	ldr	r3, [r7, #8]
   8481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84820:	2201      	movs	r2, #1
   84822:	409a      	lsls	r2, r3
   84824:	4b26      	ldr	r3, [pc, #152]	; (848c0 <xTaskIncrementTick+0x164>)
   84826:	681b      	ldr	r3, [r3, #0]
   84828:	431a      	orrs	r2, r3
   8482a:	4b25      	ldr	r3, [pc, #148]	; (848c0 <xTaskIncrementTick+0x164>)
   8482c:	601a      	str	r2, [r3, #0]
   8482e:	68bb      	ldr	r3, [r7, #8]
   84830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84832:	4613      	mov	r3, r2
   84834:	009b      	lsls	r3, r3, #2
   84836:	4413      	add	r3, r2
   84838:	009b      	lsls	r3, r3, #2
   8483a:	4a22      	ldr	r2, [pc, #136]	; (848c4 <xTaskIncrementTick+0x168>)
   8483c:	441a      	add	r2, r3
   8483e:	68bb      	ldr	r3, [r7, #8]
   84840:	3304      	adds	r3, #4
   84842:	4610      	mov	r0, r2
   84844:	4619      	mov	r1, r3
   84846:	4b20      	ldr	r3, [pc, #128]	; (848c8 <xTaskIncrementTick+0x16c>)
   84848:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8484a:	68bb      	ldr	r3, [r7, #8]
   8484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8484e:	4b1f      	ldr	r3, [pc, #124]	; (848cc <xTaskIncrementTick+0x170>)
   84850:	681b      	ldr	r3, [r3, #0]
   84852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84854:	429a      	cmp	r2, r3
   84856:	d301      	bcc.n	8485c <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   84858:	2301      	movs	r3, #1
   8485a:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   8485c:	e7b1      	b.n	847c2 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8485e:	4b1b      	ldr	r3, [pc, #108]	; (848cc <xTaskIncrementTick+0x170>)
   84860:	681b      	ldr	r3, [r3, #0]
   84862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84864:	4917      	ldr	r1, [pc, #92]	; (848c4 <xTaskIncrementTick+0x168>)
   84866:	4613      	mov	r3, r2
   84868:	009b      	lsls	r3, r3, #2
   8486a:	4413      	add	r3, r2
   8486c:	009b      	lsls	r3, r3, #2
   8486e:	440b      	add	r3, r1
   84870:	681b      	ldr	r3, [r3, #0]
   84872:	2b01      	cmp	r3, #1
   84874:	d907      	bls.n	84886 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   84876:	2301      	movs	r3, #1
   84878:	617b      	str	r3, [r7, #20]
   8487a:	e004      	b.n	84886 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   8487c:	4b14      	ldr	r3, [pc, #80]	; (848d0 <xTaskIncrementTick+0x174>)
   8487e:	681b      	ldr	r3, [r3, #0]
   84880:	1c5a      	adds	r2, r3, #1
   84882:	4b13      	ldr	r3, [pc, #76]	; (848d0 <xTaskIncrementTick+0x174>)
   84884:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   84886:	4b13      	ldr	r3, [pc, #76]	; (848d4 <xTaskIncrementTick+0x178>)
   84888:	681b      	ldr	r3, [r3, #0]
   8488a:	2b00      	cmp	r3, #0
   8488c:	d001      	beq.n	84892 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   8488e:	2301      	movs	r3, #1
   84890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   84892:	697b      	ldr	r3, [r7, #20]
}
   84894:	4618      	mov	r0, r3
   84896:	3718      	adds	r7, #24
   84898:	46bd      	mov	sp, r7
   8489a:	bd80      	pop	{r7, pc}
   8489c:	2007a600 	.word	0x2007a600
   848a0:	2007a5e4 	.word	0x2007a5e4
   848a4:	2007a598 	.word	0x2007a598
   848a8:	00083581 	.word	0x00083581
   848ac:	2007a59c 	.word	0x2007a59c
   848b0:	2007a5f8 	.word	0x2007a5f8
   848b4:	00084f85 	.word	0x00084f85
   848b8:	20070008 	.word	0x20070008
   848bc:	00083309 	.word	0x00083309
   848c0:	2007a5e8 	.word	0x2007a5e8
   848c4:	2007a50c 	.word	0x2007a50c
   848c8:	00083251 	.word	0x00083251
   848cc:	2007a508 	.word	0x2007a508
   848d0:	2007a5f0 	.word	0x2007a5f0
   848d4:	2007a5f4 	.word	0x2007a5f4

000848d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   848d8:	b580      	push	{r7, lr}
   848da:	b084      	sub	sp, #16
   848dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   848de:	4b34      	ldr	r3, [pc, #208]	; (849b0 <vTaskSwitchContext+0xd8>)
   848e0:	681b      	ldr	r3, [r3, #0]
   848e2:	2b00      	cmp	r3, #0
   848e4:	d003      	beq.n	848ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   848e6:	4b33      	ldr	r3, [pc, #204]	; (849b4 <vTaskSwitchContext+0xdc>)
   848e8:	2201      	movs	r2, #1
   848ea:	601a      	str	r2, [r3, #0]
   848ec:	e05c      	b.n	849a8 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   848ee:	4b31      	ldr	r3, [pc, #196]	; (849b4 <vTaskSwitchContext+0xdc>)
   848f0:	2200      	movs	r2, #0
   848f2:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   848f4:	4b30      	ldr	r3, [pc, #192]	; (849b8 <vTaskSwitchContext+0xe0>)
   848f6:	681b      	ldr	r3, [r3, #0]
   848f8:	681a      	ldr	r2, [r3, #0]
   848fa:	4b2f      	ldr	r3, [pc, #188]	; (849b8 <vTaskSwitchContext+0xe0>)
   848fc:	681b      	ldr	r3, [r3, #0]
   848fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84900:	429a      	cmp	r2, r3
   84902:	d808      	bhi.n	84916 <vTaskSwitchContext+0x3e>
   84904:	4b2c      	ldr	r3, [pc, #176]	; (849b8 <vTaskSwitchContext+0xe0>)
   84906:	681a      	ldr	r2, [r3, #0]
   84908:	4b2b      	ldr	r3, [pc, #172]	; (849b8 <vTaskSwitchContext+0xe0>)
   8490a:	681b      	ldr	r3, [r3, #0]
   8490c:	3334      	adds	r3, #52	; 0x34
   8490e:	4610      	mov	r0, r2
   84910:	4619      	mov	r1, r3
   84912:	4b2a      	ldr	r3, [pc, #168]	; (849bc <vTaskSwitchContext+0xe4>)
   84914:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   84916:	4b28      	ldr	r3, [pc, #160]	; (849b8 <vTaskSwitchContext+0xe0>)
   84918:	681b      	ldr	r3, [r3, #0]
   8491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8491c:	4618      	mov	r0, r3
   8491e:	4928      	ldr	r1, [pc, #160]	; (849c0 <vTaskSwitchContext+0xe8>)
   84920:	2214      	movs	r2, #20
   84922:	4b28      	ldr	r3, [pc, #160]	; (849c4 <vTaskSwitchContext+0xec>)
   84924:	4798      	blx	r3
   84926:	4603      	mov	r3, r0
   84928:	2b00      	cmp	r3, #0
   8492a:	d008      	beq.n	8493e <vTaskSwitchContext+0x66>
   8492c:	4b22      	ldr	r3, [pc, #136]	; (849b8 <vTaskSwitchContext+0xe0>)
   8492e:	681a      	ldr	r2, [r3, #0]
   84930:	4b21      	ldr	r3, [pc, #132]	; (849b8 <vTaskSwitchContext+0xe0>)
   84932:	681b      	ldr	r3, [r3, #0]
   84934:	3334      	adds	r3, #52	; 0x34
   84936:	4610      	mov	r0, r2
   84938:	4619      	mov	r1, r3
   8493a:	4b20      	ldr	r3, [pc, #128]	; (849bc <vTaskSwitchContext+0xe4>)
   8493c:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8493e:	4b22      	ldr	r3, [pc, #136]	; (849c8 <vTaskSwitchContext+0xf0>)
   84940:	681b      	ldr	r3, [r3, #0]
   84942:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   84944:	687b      	ldr	r3, [r7, #4]
   84946:	fab3 f383 	clz	r3, r3
   8494a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   8494c:	78fb      	ldrb	r3, [r7, #3]
   8494e:	f1c3 031f 	rsb	r3, r3, #31
   84952:	60fb      	str	r3, [r7, #12]
   84954:	491d      	ldr	r1, [pc, #116]	; (849cc <vTaskSwitchContext+0xf4>)
   84956:	68fa      	ldr	r2, [r7, #12]
   84958:	4613      	mov	r3, r2
   8495a:	009b      	lsls	r3, r3, #2
   8495c:	4413      	add	r3, r2
   8495e:	009b      	lsls	r3, r3, #2
   84960:	440b      	add	r3, r1
   84962:	681b      	ldr	r3, [r3, #0]
   84964:	2b00      	cmp	r3, #0
   84966:	d102      	bne.n	8496e <vTaskSwitchContext+0x96>
   84968:	4b19      	ldr	r3, [pc, #100]	; (849d0 <vTaskSwitchContext+0xf8>)
   8496a:	4798      	blx	r3
   8496c:	e7fe      	b.n	8496c <vTaskSwitchContext+0x94>
   8496e:	68fa      	ldr	r2, [r7, #12]
   84970:	4613      	mov	r3, r2
   84972:	009b      	lsls	r3, r3, #2
   84974:	4413      	add	r3, r2
   84976:	009b      	lsls	r3, r3, #2
   84978:	4a14      	ldr	r2, [pc, #80]	; (849cc <vTaskSwitchContext+0xf4>)
   8497a:	4413      	add	r3, r2
   8497c:	60bb      	str	r3, [r7, #8]
   8497e:	68bb      	ldr	r3, [r7, #8]
   84980:	685b      	ldr	r3, [r3, #4]
   84982:	685a      	ldr	r2, [r3, #4]
   84984:	68bb      	ldr	r3, [r7, #8]
   84986:	605a      	str	r2, [r3, #4]
   84988:	68bb      	ldr	r3, [r7, #8]
   8498a:	685a      	ldr	r2, [r3, #4]
   8498c:	68bb      	ldr	r3, [r7, #8]
   8498e:	3308      	adds	r3, #8
   84990:	429a      	cmp	r2, r3
   84992:	d104      	bne.n	8499e <vTaskSwitchContext+0xc6>
   84994:	68bb      	ldr	r3, [r7, #8]
   84996:	685b      	ldr	r3, [r3, #4]
   84998:	685a      	ldr	r2, [r3, #4]
   8499a:	68bb      	ldr	r3, [r7, #8]
   8499c:	605a      	str	r2, [r3, #4]
   8499e:	68bb      	ldr	r3, [r7, #8]
   849a0:	685b      	ldr	r3, [r3, #4]
   849a2:	68da      	ldr	r2, [r3, #12]
   849a4:	4b04      	ldr	r3, [pc, #16]	; (849b8 <vTaskSwitchContext+0xe0>)
   849a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   849a8:	3710      	adds	r7, #16
   849aa:	46bd      	mov	sp, r7
   849ac:	bd80      	pop	{r7, pc}
   849ae:	bf00      	nop
   849b0:	2007a600 	.word	0x2007a600
   849b4:	2007a5f4 	.word	0x2007a5f4
   849b8:	2007a508 	.word	0x2007a508
   849bc:	000865d5 	.word	0x000865d5
   849c0:	00087090 	.word	0x00087090
   849c4:	00086c49 	.word	0x00086c49
   849c8:	2007a5e8 	.word	0x2007a5e8
   849cc:	2007a50c 	.word	0x2007a50c
   849d0:	00083581 	.word	0x00083581

000849d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   849d4:	b580      	push	{r7, lr}
   849d6:	b084      	sub	sp, #16
   849d8:	af00      	add	r7, sp, #0
   849da:	6078      	str	r0, [r7, #4]
   849dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   849de:	687b      	ldr	r3, [r7, #4]
   849e0:	2b00      	cmp	r3, #0
   849e2:	d102      	bne.n	849ea <vTaskPlaceOnEventList+0x16>
   849e4:	4b1a      	ldr	r3, [pc, #104]	; (84a50 <vTaskPlaceOnEventList+0x7c>)
   849e6:	4798      	blx	r3
   849e8:	e7fe      	b.n	849e8 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   849ea:	4b1a      	ldr	r3, [pc, #104]	; (84a54 <vTaskPlaceOnEventList+0x80>)
   849ec:	681b      	ldr	r3, [r3, #0]
   849ee:	3318      	adds	r3, #24
   849f0:	6878      	ldr	r0, [r7, #4]
   849f2:	4619      	mov	r1, r3
   849f4:	4b18      	ldr	r3, [pc, #96]	; (84a58 <vTaskPlaceOnEventList+0x84>)
   849f6:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   849f8:	4b16      	ldr	r3, [pc, #88]	; (84a54 <vTaskPlaceOnEventList+0x80>)
   849fa:	681b      	ldr	r3, [r3, #0]
   849fc:	3304      	adds	r3, #4
   849fe:	4618      	mov	r0, r3
   84a00:	4b16      	ldr	r3, [pc, #88]	; (84a5c <vTaskPlaceOnEventList+0x88>)
   84a02:	4798      	blx	r3
   84a04:	4603      	mov	r3, r0
   84a06:	2b00      	cmp	r3, #0
   84a08:	d10b      	bne.n	84a22 <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84a0a:	4b12      	ldr	r3, [pc, #72]	; (84a54 <vTaskPlaceOnEventList+0x80>)
   84a0c:	681b      	ldr	r3, [r3, #0]
   84a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a10:	2201      	movs	r2, #1
   84a12:	fa02 f303 	lsl.w	r3, r2, r3
   84a16:	43da      	mvns	r2, r3
   84a18:	4b11      	ldr	r3, [pc, #68]	; (84a60 <vTaskPlaceOnEventList+0x8c>)
   84a1a:	681b      	ldr	r3, [r3, #0]
   84a1c:	401a      	ands	r2, r3
   84a1e:	4b10      	ldr	r3, [pc, #64]	; (84a60 <vTaskPlaceOnEventList+0x8c>)
   84a20:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   84a22:	683b      	ldr	r3, [r7, #0]
   84a24:	f1b3 3fff 	cmp.w	r3, #4294967295
   84a28:	d107      	bne.n	84a3a <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84a2a:	4b0a      	ldr	r3, [pc, #40]	; (84a54 <vTaskPlaceOnEventList+0x80>)
   84a2c:	681b      	ldr	r3, [r3, #0]
   84a2e:	3304      	adds	r3, #4
   84a30:	480c      	ldr	r0, [pc, #48]	; (84a64 <vTaskPlaceOnEventList+0x90>)
   84a32:	4619      	mov	r1, r3
   84a34:	4b0c      	ldr	r3, [pc, #48]	; (84a68 <vTaskPlaceOnEventList+0x94>)
   84a36:	4798      	blx	r3
   84a38:	e007      	b.n	84a4a <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   84a3a:	4b0c      	ldr	r3, [pc, #48]	; (84a6c <vTaskPlaceOnEventList+0x98>)
   84a3c:	681a      	ldr	r2, [r3, #0]
   84a3e:	683b      	ldr	r3, [r7, #0]
   84a40:	4413      	add	r3, r2
   84a42:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   84a44:	68f8      	ldr	r0, [r7, #12]
   84a46:	4b0a      	ldr	r3, [pc, #40]	; (84a70 <vTaskPlaceOnEventList+0x9c>)
   84a48:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   84a4a:	3710      	adds	r7, #16
   84a4c:	46bd      	mov	sp, r7
   84a4e:	bd80      	pop	{r7, pc}
   84a50:	00083581 	.word	0x00083581
   84a54:	2007a508 	.word	0x2007a508
   84a58:	00083299 	.word	0x00083299
   84a5c:	00083309 	.word	0x00083309
   84a60:	2007a5e8 	.word	0x2007a5e8
   84a64:	2007a5cc 	.word	0x2007a5cc
   84a68:	00083251 	.word	0x00083251
   84a6c:	2007a5e4 	.word	0x2007a5e4
   84a70:	00084e81 	.word	0x00084e81

00084a74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   84a74:	b580      	push	{r7, lr}
   84a76:	b084      	sub	sp, #16
   84a78:	af00      	add	r7, sp, #0
   84a7a:	6078      	str	r0, [r7, #4]
   84a7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   84a7e:	687b      	ldr	r3, [r7, #4]
   84a80:	2b00      	cmp	r3, #0
   84a82:	d102      	bne.n	84a8a <vTaskPlaceOnEventListRestricted+0x16>
   84a84:	4b14      	ldr	r3, [pc, #80]	; (84ad8 <vTaskPlaceOnEventListRestricted+0x64>)
   84a86:	4798      	blx	r3
   84a88:	e7fe      	b.n	84a88 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84a8a:	4b14      	ldr	r3, [pc, #80]	; (84adc <vTaskPlaceOnEventListRestricted+0x68>)
   84a8c:	681b      	ldr	r3, [r3, #0]
   84a8e:	3318      	adds	r3, #24
   84a90:	6878      	ldr	r0, [r7, #4]
   84a92:	4619      	mov	r1, r3
   84a94:	4b12      	ldr	r3, [pc, #72]	; (84ae0 <vTaskPlaceOnEventListRestricted+0x6c>)
   84a96:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84a98:	4b10      	ldr	r3, [pc, #64]	; (84adc <vTaskPlaceOnEventListRestricted+0x68>)
   84a9a:	681b      	ldr	r3, [r3, #0]
   84a9c:	3304      	adds	r3, #4
   84a9e:	4618      	mov	r0, r3
   84aa0:	4b10      	ldr	r3, [pc, #64]	; (84ae4 <vTaskPlaceOnEventListRestricted+0x70>)
   84aa2:	4798      	blx	r3
   84aa4:	4603      	mov	r3, r0
   84aa6:	2b00      	cmp	r3, #0
   84aa8:	d10b      	bne.n	84ac2 <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84aaa:	4b0c      	ldr	r3, [pc, #48]	; (84adc <vTaskPlaceOnEventListRestricted+0x68>)
   84aac:	681b      	ldr	r3, [r3, #0]
   84aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84ab0:	2201      	movs	r2, #1
   84ab2:	fa02 f303 	lsl.w	r3, r2, r3
   84ab6:	43da      	mvns	r2, r3
   84ab8:	4b0b      	ldr	r3, [pc, #44]	; (84ae8 <vTaskPlaceOnEventListRestricted+0x74>)
   84aba:	681b      	ldr	r3, [r3, #0]
   84abc:	401a      	ands	r2, r3
   84abe:	4b0a      	ldr	r3, [pc, #40]	; (84ae8 <vTaskPlaceOnEventListRestricted+0x74>)
   84ac0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   84ac2:	4b0a      	ldr	r3, [pc, #40]	; (84aec <vTaskPlaceOnEventListRestricted+0x78>)
   84ac4:	681a      	ldr	r2, [r3, #0]
   84ac6:	683b      	ldr	r3, [r7, #0]
   84ac8:	4413      	add	r3, r2
   84aca:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   84acc:	68f8      	ldr	r0, [r7, #12]
   84ace:	4b08      	ldr	r3, [pc, #32]	; (84af0 <vTaskPlaceOnEventListRestricted+0x7c>)
   84ad0:	4798      	blx	r3
	}
   84ad2:	3710      	adds	r7, #16
   84ad4:	46bd      	mov	sp, r7
   84ad6:	bd80      	pop	{r7, pc}
   84ad8:	00083581 	.word	0x00083581
   84adc:	2007a508 	.word	0x2007a508
   84ae0:	00083251 	.word	0x00083251
   84ae4:	00083309 	.word	0x00083309
   84ae8:	2007a5e8 	.word	0x2007a5e8
   84aec:	2007a5e4 	.word	0x2007a5e4
   84af0:	00084e81 	.word	0x00084e81

00084af4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   84af4:	b580      	push	{r7, lr}
   84af6:	b084      	sub	sp, #16
   84af8:	af00      	add	r7, sp, #0
   84afa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   84afc:	687b      	ldr	r3, [r7, #4]
   84afe:	68db      	ldr	r3, [r3, #12]
   84b00:	68db      	ldr	r3, [r3, #12]
   84b02:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   84b04:	68bb      	ldr	r3, [r7, #8]
   84b06:	2b00      	cmp	r3, #0
   84b08:	d102      	bne.n	84b10 <xTaskRemoveFromEventList+0x1c>
   84b0a:	4b21      	ldr	r3, [pc, #132]	; (84b90 <xTaskRemoveFromEventList+0x9c>)
   84b0c:	4798      	blx	r3
   84b0e:	e7fe      	b.n	84b0e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   84b10:	68bb      	ldr	r3, [r7, #8]
   84b12:	3318      	adds	r3, #24
   84b14:	4618      	mov	r0, r3
   84b16:	4b1f      	ldr	r3, [pc, #124]	; (84b94 <xTaskRemoveFromEventList+0xa0>)
   84b18:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84b1a:	4b1f      	ldr	r3, [pc, #124]	; (84b98 <xTaskRemoveFromEventList+0xa4>)
   84b1c:	681b      	ldr	r3, [r3, #0]
   84b1e:	2b00      	cmp	r3, #0
   84b20:	d11c      	bne.n	84b5c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   84b22:	68bb      	ldr	r3, [r7, #8]
   84b24:	3304      	adds	r3, #4
   84b26:	4618      	mov	r0, r3
   84b28:	4b1a      	ldr	r3, [pc, #104]	; (84b94 <xTaskRemoveFromEventList+0xa0>)
   84b2a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   84b2c:	68bb      	ldr	r3, [r7, #8]
   84b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84b30:	2201      	movs	r2, #1
   84b32:	409a      	lsls	r2, r3
   84b34:	4b19      	ldr	r3, [pc, #100]	; (84b9c <xTaskRemoveFromEventList+0xa8>)
   84b36:	681b      	ldr	r3, [r3, #0]
   84b38:	431a      	orrs	r2, r3
   84b3a:	4b18      	ldr	r3, [pc, #96]	; (84b9c <xTaskRemoveFromEventList+0xa8>)
   84b3c:	601a      	str	r2, [r3, #0]
   84b3e:	68bb      	ldr	r3, [r7, #8]
   84b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84b42:	4613      	mov	r3, r2
   84b44:	009b      	lsls	r3, r3, #2
   84b46:	4413      	add	r3, r2
   84b48:	009b      	lsls	r3, r3, #2
   84b4a:	4a15      	ldr	r2, [pc, #84]	; (84ba0 <xTaskRemoveFromEventList+0xac>)
   84b4c:	441a      	add	r2, r3
   84b4e:	68bb      	ldr	r3, [r7, #8]
   84b50:	3304      	adds	r3, #4
   84b52:	4610      	mov	r0, r2
   84b54:	4619      	mov	r1, r3
   84b56:	4b13      	ldr	r3, [pc, #76]	; (84ba4 <xTaskRemoveFromEventList+0xb0>)
   84b58:	4798      	blx	r3
   84b5a:	e005      	b.n	84b68 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   84b5c:	68bb      	ldr	r3, [r7, #8]
   84b5e:	3318      	adds	r3, #24
   84b60:	4811      	ldr	r0, [pc, #68]	; (84ba8 <xTaskRemoveFromEventList+0xb4>)
   84b62:	4619      	mov	r1, r3
   84b64:	4b0f      	ldr	r3, [pc, #60]	; (84ba4 <xTaskRemoveFromEventList+0xb0>)
   84b66:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   84b68:	68bb      	ldr	r3, [r7, #8]
   84b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84b6c:	4b0f      	ldr	r3, [pc, #60]	; (84bac <xTaskRemoveFromEventList+0xb8>)
   84b6e:	681b      	ldr	r3, [r3, #0]
   84b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84b72:	429a      	cmp	r2, r3
   84b74:	d905      	bls.n	84b82 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   84b76:	2301      	movs	r3, #1
   84b78:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   84b7a:	4b0d      	ldr	r3, [pc, #52]	; (84bb0 <xTaskRemoveFromEventList+0xbc>)
   84b7c:	2201      	movs	r2, #1
   84b7e:	601a      	str	r2, [r3, #0]
   84b80:	e001      	b.n	84b86 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   84b82:	2300      	movs	r3, #0
   84b84:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   84b86:	68fb      	ldr	r3, [r7, #12]
}
   84b88:	4618      	mov	r0, r3
   84b8a:	3710      	adds	r7, #16
   84b8c:	46bd      	mov	sp, r7
   84b8e:	bd80      	pop	{r7, pc}
   84b90:	00083581 	.word	0x00083581
   84b94:	00083309 	.word	0x00083309
   84b98:	2007a600 	.word	0x2007a600
   84b9c:	2007a5e8 	.word	0x2007a5e8
   84ba0:	2007a50c 	.word	0x2007a50c
   84ba4:	00083251 	.word	0x00083251
   84ba8:	2007a5a0 	.word	0x2007a5a0
   84bac:	2007a508 	.word	0x2007a508
   84bb0:	2007a5f4 	.word	0x2007a5f4

00084bb4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   84bb4:	b580      	push	{r7, lr}
   84bb6:	b082      	sub	sp, #8
   84bb8:	af00      	add	r7, sp, #0
   84bba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   84bbc:	687b      	ldr	r3, [r7, #4]
   84bbe:	2b00      	cmp	r3, #0
   84bc0:	d102      	bne.n	84bc8 <vTaskSetTimeOutState+0x14>
   84bc2:	4b07      	ldr	r3, [pc, #28]	; (84be0 <vTaskSetTimeOutState+0x2c>)
   84bc4:	4798      	blx	r3
   84bc6:	e7fe      	b.n	84bc6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   84bc8:	4b06      	ldr	r3, [pc, #24]	; (84be4 <vTaskSetTimeOutState+0x30>)
   84bca:	681a      	ldr	r2, [r3, #0]
   84bcc:	687b      	ldr	r3, [r7, #4]
   84bce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   84bd0:	4b05      	ldr	r3, [pc, #20]	; (84be8 <vTaskSetTimeOutState+0x34>)
   84bd2:	681a      	ldr	r2, [r3, #0]
   84bd4:	687b      	ldr	r3, [r7, #4]
   84bd6:	605a      	str	r2, [r3, #4]
}
   84bd8:	3708      	adds	r7, #8
   84bda:	46bd      	mov	sp, r7
   84bdc:	bd80      	pop	{r7, pc}
   84bde:	bf00      	nop
   84be0:	00083581 	.word	0x00083581
   84be4:	2007a5f8 	.word	0x2007a5f8
   84be8:	2007a5e4 	.word	0x2007a5e4

00084bec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   84bec:	b580      	push	{r7, lr}
   84bee:	b084      	sub	sp, #16
   84bf0:	af00      	add	r7, sp, #0
   84bf2:	6078      	str	r0, [r7, #4]
   84bf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   84bf6:	687b      	ldr	r3, [r7, #4]
   84bf8:	2b00      	cmp	r3, #0
   84bfa:	d102      	bne.n	84c02 <xTaskCheckForTimeOut+0x16>
   84bfc:	4b21      	ldr	r3, [pc, #132]	; (84c84 <xTaskCheckForTimeOut+0x98>)
   84bfe:	4798      	blx	r3
   84c00:	e7fe      	b.n	84c00 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   84c02:	683b      	ldr	r3, [r7, #0]
   84c04:	2b00      	cmp	r3, #0
   84c06:	d102      	bne.n	84c0e <xTaskCheckForTimeOut+0x22>
   84c08:	4b1e      	ldr	r3, [pc, #120]	; (84c84 <xTaskCheckForTimeOut+0x98>)
   84c0a:	4798      	blx	r3
   84c0c:	e7fe      	b.n	84c0c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   84c0e:	4b1e      	ldr	r3, [pc, #120]	; (84c88 <xTaskCheckForTimeOut+0x9c>)
   84c10:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   84c12:	4b1e      	ldr	r3, [pc, #120]	; (84c8c <xTaskCheckForTimeOut+0xa0>)
   84c14:	681b      	ldr	r3, [r3, #0]
   84c16:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   84c18:	683b      	ldr	r3, [r7, #0]
   84c1a:	681b      	ldr	r3, [r3, #0]
   84c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   84c20:	d102      	bne.n	84c28 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   84c22:	2300      	movs	r3, #0
   84c24:	60fb      	str	r3, [r7, #12]
   84c26:	e026      	b.n	84c76 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   84c28:	687b      	ldr	r3, [r7, #4]
   84c2a:	681a      	ldr	r2, [r3, #0]
   84c2c:	4b18      	ldr	r3, [pc, #96]	; (84c90 <xTaskCheckForTimeOut+0xa4>)
   84c2e:	681b      	ldr	r3, [r3, #0]
   84c30:	429a      	cmp	r2, r3
   84c32:	d007      	beq.n	84c44 <xTaskCheckForTimeOut+0x58>
   84c34:	687b      	ldr	r3, [r7, #4]
   84c36:	685a      	ldr	r2, [r3, #4]
   84c38:	68bb      	ldr	r3, [r7, #8]
   84c3a:	429a      	cmp	r2, r3
   84c3c:	d802      	bhi.n	84c44 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   84c3e:	2301      	movs	r3, #1
   84c40:	60fb      	str	r3, [r7, #12]
   84c42:	e018      	b.n	84c76 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   84c44:	687b      	ldr	r3, [r7, #4]
   84c46:	685b      	ldr	r3, [r3, #4]
   84c48:	68ba      	ldr	r2, [r7, #8]
   84c4a:	1ad2      	subs	r2, r2, r3
   84c4c:	683b      	ldr	r3, [r7, #0]
   84c4e:	681b      	ldr	r3, [r3, #0]
   84c50:	429a      	cmp	r2, r3
   84c52:	d20e      	bcs.n	84c72 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   84c54:	683b      	ldr	r3, [r7, #0]
   84c56:	681a      	ldr	r2, [r3, #0]
   84c58:	687b      	ldr	r3, [r7, #4]
   84c5a:	6859      	ldr	r1, [r3, #4]
   84c5c:	68bb      	ldr	r3, [r7, #8]
   84c5e:	1acb      	subs	r3, r1, r3
   84c60:	441a      	add	r2, r3
   84c62:	683b      	ldr	r3, [r7, #0]
   84c64:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   84c66:	6878      	ldr	r0, [r7, #4]
   84c68:	4b0a      	ldr	r3, [pc, #40]	; (84c94 <xTaskCheckForTimeOut+0xa8>)
   84c6a:	4798      	blx	r3
			xReturn = pdFALSE;
   84c6c:	2300      	movs	r3, #0
   84c6e:	60fb      	str	r3, [r7, #12]
   84c70:	e001      	b.n	84c76 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   84c72:	2301      	movs	r3, #1
   84c74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84c76:	4b08      	ldr	r3, [pc, #32]	; (84c98 <xTaskCheckForTimeOut+0xac>)
   84c78:	4798      	blx	r3

	return xReturn;
   84c7a:	68fb      	ldr	r3, [r7, #12]
}
   84c7c:	4618      	mov	r0, r3
   84c7e:	3710      	adds	r7, #16
   84c80:	46bd      	mov	sp, r7
   84c82:	bd80      	pop	{r7, pc}
   84c84:	00083581 	.word	0x00083581
   84c88:	00083505 	.word	0x00083505
   84c8c:	2007a5e4 	.word	0x2007a5e4
   84c90:	2007a5f8 	.word	0x2007a5f8
   84c94:	00084bb5 	.word	0x00084bb5
   84c98:	00083549 	.word	0x00083549

00084c9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   84c9c:	b480      	push	{r7}
   84c9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   84ca0:	4b03      	ldr	r3, [pc, #12]	; (84cb0 <vTaskMissedYield+0x14>)
   84ca2:	2201      	movs	r2, #1
   84ca4:	601a      	str	r2, [r3, #0]
}
   84ca6:	46bd      	mov	sp, r7
   84ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
   84cac:	4770      	bx	lr
   84cae:	bf00      	nop
   84cb0:	2007a5f4 	.word	0x2007a5f4

00084cb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   84cb4:	b580      	push	{r7, lr}
   84cb6:	b082      	sub	sp, #8
   84cb8:	af00      	add	r7, sp, #0
   84cba:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84cbc:	4b04      	ldr	r3, [pc, #16]	; (84cd0 <prvIdleTask+0x1c>)
   84cbe:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   84cc0:	4b04      	ldr	r3, [pc, #16]	; (84cd4 <prvIdleTask+0x20>)
   84cc2:	681b      	ldr	r3, [r3, #0]
   84cc4:	2b01      	cmp	r3, #1
   84cc6:	d901      	bls.n	84ccc <prvIdleTask+0x18>
			{
				taskYIELD();
   84cc8:	4b03      	ldr	r3, [pc, #12]	; (84cd8 <prvIdleTask+0x24>)
   84cca:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   84ccc:	e7f6      	b.n	84cbc <prvIdleTask+0x8>
   84cce:	bf00      	nop
   84cd0:	00084df5 	.word	0x00084df5
   84cd4:	2007a50c 	.word	0x2007a50c
   84cd8:	000834e5 	.word	0x000834e5

00084cdc <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84cdc:	b580      	push	{r7, lr}
   84cde:	b086      	sub	sp, #24
   84ce0:	af00      	add	r7, sp, #0
   84ce2:	60f8      	str	r0, [r7, #12]
   84ce4:	60b9      	str	r1, [r7, #8]
   84ce6:	607a      	str	r2, [r7, #4]
   84ce8:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84cea:	2300      	movs	r3, #0
   84cec:	617b      	str	r3, [r7, #20]
   84cee:	e012      	b.n	84d16 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   84cf0:	68ba      	ldr	r2, [r7, #8]
   84cf2:	697b      	ldr	r3, [r7, #20]
   84cf4:	4413      	add	r3, r2
   84cf6:	781a      	ldrb	r2, [r3, #0]
   84cf8:	68f9      	ldr	r1, [r7, #12]
   84cfa:	697b      	ldr	r3, [r7, #20]
   84cfc:	440b      	add	r3, r1
   84cfe:	3330      	adds	r3, #48	; 0x30
   84d00:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   84d02:	68ba      	ldr	r2, [r7, #8]
   84d04:	697b      	ldr	r3, [r7, #20]
   84d06:	4413      	add	r3, r2
   84d08:	781b      	ldrb	r3, [r3, #0]
   84d0a:	2b00      	cmp	r3, #0
   84d0c:	d100      	bne.n	84d10 <prvInitialiseTCBVariables+0x34>
		{
			break;
   84d0e:	e005      	b.n	84d1c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84d10:	697b      	ldr	r3, [r7, #20]
   84d12:	3301      	adds	r3, #1
   84d14:	617b      	str	r3, [r7, #20]
   84d16:	697b      	ldr	r3, [r7, #20]
   84d18:	2b09      	cmp	r3, #9
   84d1a:	d9e9      	bls.n	84cf0 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   84d1c:	68fb      	ldr	r3, [r7, #12]
   84d1e:	2200      	movs	r2, #0
   84d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   84d24:	687b      	ldr	r3, [r7, #4]
   84d26:	2b04      	cmp	r3, #4
   84d28:	d901      	bls.n	84d2e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   84d2a:	2304      	movs	r3, #4
   84d2c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   84d2e:	68fb      	ldr	r3, [r7, #12]
   84d30:	687a      	ldr	r2, [r7, #4]
   84d32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   84d34:	68fb      	ldr	r3, [r7, #12]
   84d36:	687a      	ldr	r2, [r7, #4]
   84d38:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84d3a:	68fb      	ldr	r3, [r7, #12]
   84d3c:	2200      	movs	r2, #0
   84d3e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84d40:	68fb      	ldr	r3, [r7, #12]
   84d42:	3304      	adds	r3, #4
   84d44:	4618      	mov	r0, r3
   84d46:	4b0a      	ldr	r3, [pc, #40]	; (84d70 <prvInitialiseTCBVariables+0x94>)
   84d48:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84d4a:	68fb      	ldr	r3, [r7, #12]
   84d4c:	3318      	adds	r3, #24
   84d4e:	4618      	mov	r0, r3
   84d50:	4b07      	ldr	r3, [pc, #28]	; (84d70 <prvInitialiseTCBVariables+0x94>)
   84d52:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   84d54:	68fb      	ldr	r3, [r7, #12]
   84d56:	68fa      	ldr	r2, [r7, #12]
   84d58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84d5a:	687b      	ldr	r3, [r7, #4]
   84d5c:	f1c3 0205 	rsb	r2, r3, #5
   84d60:	68fb      	ldr	r3, [r7, #12]
   84d62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   84d64:	68fb      	ldr	r3, [r7, #12]
   84d66:	68fa      	ldr	r2, [r7, #12]
   84d68:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84d6a:	3718      	adds	r7, #24
   84d6c:	46bd      	mov	sp, r7
   84d6e:	bd80      	pop	{r7, pc}
   84d70:	00083239 	.word	0x00083239

00084d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   84d74:	b580      	push	{r7, lr}
   84d76:	b082      	sub	sp, #8
   84d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84d7a:	2300      	movs	r3, #0
   84d7c:	607b      	str	r3, [r7, #4]
   84d7e:	e00c      	b.n	84d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   84d80:	687a      	ldr	r2, [r7, #4]
   84d82:	4613      	mov	r3, r2
   84d84:	009b      	lsls	r3, r3, #2
   84d86:	4413      	add	r3, r2
   84d88:	009b      	lsls	r3, r3, #2
   84d8a:	4a11      	ldr	r2, [pc, #68]	; (84dd0 <prvInitialiseTaskLists+0x5c>)
   84d8c:	4413      	add	r3, r2
   84d8e:	4618      	mov	r0, r3
   84d90:	4b10      	ldr	r3, [pc, #64]	; (84dd4 <prvInitialiseTaskLists+0x60>)
   84d92:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84d94:	687b      	ldr	r3, [r7, #4]
   84d96:	3301      	adds	r3, #1
   84d98:	607b      	str	r3, [r7, #4]
   84d9a:	687b      	ldr	r3, [r7, #4]
   84d9c:	2b04      	cmp	r3, #4
   84d9e:	d9ef      	bls.n	84d80 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   84da0:	480d      	ldr	r0, [pc, #52]	; (84dd8 <prvInitialiseTaskLists+0x64>)
   84da2:	4b0c      	ldr	r3, [pc, #48]	; (84dd4 <prvInitialiseTaskLists+0x60>)
   84da4:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   84da6:	480d      	ldr	r0, [pc, #52]	; (84ddc <prvInitialiseTaskLists+0x68>)
   84da8:	4b0a      	ldr	r3, [pc, #40]	; (84dd4 <prvInitialiseTaskLists+0x60>)
   84daa:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84dac:	480c      	ldr	r0, [pc, #48]	; (84de0 <prvInitialiseTaskLists+0x6c>)
   84dae:	4b09      	ldr	r3, [pc, #36]	; (84dd4 <prvInitialiseTaskLists+0x60>)
   84db0:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   84db2:	480c      	ldr	r0, [pc, #48]	; (84de4 <prvInitialiseTaskLists+0x70>)
   84db4:	4b07      	ldr	r3, [pc, #28]	; (84dd4 <prvInitialiseTaskLists+0x60>)
   84db6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84db8:	480b      	ldr	r0, [pc, #44]	; (84de8 <prvInitialiseTaskLists+0x74>)
   84dba:	4b06      	ldr	r3, [pc, #24]	; (84dd4 <prvInitialiseTaskLists+0x60>)
   84dbc:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84dbe:	4b0b      	ldr	r3, [pc, #44]	; (84dec <prvInitialiseTaskLists+0x78>)
   84dc0:	4a05      	ldr	r2, [pc, #20]	; (84dd8 <prvInitialiseTaskLists+0x64>)
   84dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   84dc4:	4b0a      	ldr	r3, [pc, #40]	; (84df0 <prvInitialiseTaskLists+0x7c>)
   84dc6:	4a05      	ldr	r2, [pc, #20]	; (84ddc <prvInitialiseTaskLists+0x68>)
   84dc8:	601a      	str	r2, [r3, #0]
}
   84dca:	3708      	adds	r7, #8
   84dcc:	46bd      	mov	sp, r7
   84dce:	bd80      	pop	{r7, pc}
   84dd0:	2007a50c 	.word	0x2007a50c
   84dd4:	000831f9 	.word	0x000831f9
   84dd8:	2007a570 	.word	0x2007a570
   84ddc:	2007a584 	.word	0x2007a584
   84de0:	2007a5a0 	.word	0x2007a5a0
   84de4:	2007a5b4 	.word	0x2007a5b4
   84de8:	2007a5cc 	.word	0x2007a5cc
   84dec:	2007a598 	.word	0x2007a598
   84df0:	2007a59c 	.word	0x2007a59c

00084df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   84df4:	b580      	push	{r7, lr}
   84df6:	b082      	sub	sp, #8
   84df8:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84dfa:	e028      	b.n	84e4e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   84dfc:	4b17      	ldr	r3, [pc, #92]	; (84e5c <prvCheckTasksWaitingTermination+0x68>)
   84dfe:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   84e00:	4b17      	ldr	r3, [pc, #92]	; (84e60 <prvCheckTasksWaitingTermination+0x6c>)
   84e02:	681b      	ldr	r3, [r3, #0]
   84e04:	2b00      	cmp	r3, #0
   84e06:	bf14      	ite	ne
   84e08:	2300      	movne	r3, #0
   84e0a:	2301      	moveq	r3, #1
   84e0c:	b2db      	uxtb	r3, r3
   84e0e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   84e10:	4b14      	ldr	r3, [pc, #80]	; (84e64 <prvCheckTasksWaitingTermination+0x70>)
   84e12:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   84e14:	687b      	ldr	r3, [r7, #4]
   84e16:	2b00      	cmp	r3, #0
   84e18:	d119      	bne.n	84e4e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   84e1a:	4b13      	ldr	r3, [pc, #76]	; (84e68 <prvCheckTasksWaitingTermination+0x74>)
   84e1c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   84e1e:	4b10      	ldr	r3, [pc, #64]	; (84e60 <prvCheckTasksWaitingTermination+0x6c>)
   84e20:	68db      	ldr	r3, [r3, #12]
   84e22:	68db      	ldr	r3, [r3, #12]
   84e24:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84e26:	683b      	ldr	r3, [r7, #0]
   84e28:	3304      	adds	r3, #4
   84e2a:	4618      	mov	r0, r3
   84e2c:	4b0f      	ldr	r3, [pc, #60]	; (84e6c <prvCheckTasksWaitingTermination+0x78>)
   84e2e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   84e30:	4b0f      	ldr	r3, [pc, #60]	; (84e70 <prvCheckTasksWaitingTermination+0x7c>)
   84e32:	681b      	ldr	r3, [r3, #0]
   84e34:	1e5a      	subs	r2, r3, #1
   84e36:	4b0e      	ldr	r3, [pc, #56]	; (84e70 <prvCheckTasksWaitingTermination+0x7c>)
   84e38:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84e3a:	4b0e      	ldr	r3, [pc, #56]	; (84e74 <prvCheckTasksWaitingTermination+0x80>)
   84e3c:	681b      	ldr	r3, [r3, #0]
   84e3e:	1e5a      	subs	r2, r3, #1
   84e40:	4b0c      	ldr	r3, [pc, #48]	; (84e74 <prvCheckTasksWaitingTermination+0x80>)
   84e42:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   84e44:	4b0c      	ldr	r3, [pc, #48]	; (84e78 <prvCheckTasksWaitingTermination+0x84>)
   84e46:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84e48:	6838      	ldr	r0, [r7, #0]
   84e4a:	4b0c      	ldr	r3, [pc, #48]	; (84e7c <prvCheckTasksWaitingTermination+0x88>)
   84e4c:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84e4e:	4b09      	ldr	r3, [pc, #36]	; (84e74 <prvCheckTasksWaitingTermination+0x80>)
   84e50:	681b      	ldr	r3, [r3, #0]
   84e52:	2b00      	cmp	r3, #0
   84e54:	d1d2      	bne.n	84dfc <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   84e56:	3708      	adds	r7, #8
   84e58:	46bd      	mov	sp, r7
   84e5a:	bd80      	pop	{r7, pc}
   84e5c:	000845f1 	.word	0x000845f1
   84e60:	2007a5b4 	.word	0x2007a5b4
   84e64:	0008460d 	.word	0x0008460d
   84e68:	00083505 	.word	0x00083505
   84e6c:	00083309 	.word	0x00083309
   84e70:	2007a5e0 	.word	0x2007a5e0
   84e74:	2007a5c8 	.word	0x2007a5c8
   84e78:	00083549 	.word	0x00083549
   84e7c:	00084f61 	.word	0x00084f61

00084e80 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84e80:	b580      	push	{r7, lr}
   84e82:	b082      	sub	sp, #8
   84e84:	af00      	add	r7, sp, #0
   84e86:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84e88:	4b13      	ldr	r3, [pc, #76]	; (84ed8 <prvAddCurrentTaskToDelayedList+0x58>)
   84e8a:	681b      	ldr	r3, [r3, #0]
   84e8c:	687a      	ldr	r2, [r7, #4]
   84e8e:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84e90:	4b12      	ldr	r3, [pc, #72]	; (84edc <prvAddCurrentTaskToDelayedList+0x5c>)
   84e92:	681b      	ldr	r3, [r3, #0]
   84e94:	687a      	ldr	r2, [r7, #4]
   84e96:	429a      	cmp	r2, r3
   84e98:	d209      	bcs.n	84eae <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84e9a:	4b11      	ldr	r3, [pc, #68]	; (84ee0 <prvAddCurrentTaskToDelayedList+0x60>)
   84e9c:	681a      	ldr	r2, [r3, #0]
   84e9e:	4b0e      	ldr	r3, [pc, #56]	; (84ed8 <prvAddCurrentTaskToDelayedList+0x58>)
   84ea0:	681b      	ldr	r3, [r3, #0]
   84ea2:	3304      	adds	r3, #4
   84ea4:	4610      	mov	r0, r2
   84ea6:	4619      	mov	r1, r3
   84ea8:	4b0e      	ldr	r3, [pc, #56]	; (84ee4 <prvAddCurrentTaskToDelayedList+0x64>)
   84eaa:	4798      	blx	r3
   84eac:	e010      	b.n	84ed0 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84eae:	4b0e      	ldr	r3, [pc, #56]	; (84ee8 <prvAddCurrentTaskToDelayedList+0x68>)
   84eb0:	681a      	ldr	r2, [r3, #0]
   84eb2:	4b09      	ldr	r3, [pc, #36]	; (84ed8 <prvAddCurrentTaskToDelayedList+0x58>)
   84eb4:	681b      	ldr	r3, [r3, #0]
   84eb6:	3304      	adds	r3, #4
   84eb8:	4610      	mov	r0, r2
   84eba:	4619      	mov	r1, r3
   84ebc:	4b09      	ldr	r3, [pc, #36]	; (84ee4 <prvAddCurrentTaskToDelayedList+0x64>)
   84ebe:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84ec0:	4b0a      	ldr	r3, [pc, #40]	; (84eec <prvAddCurrentTaskToDelayedList+0x6c>)
   84ec2:	681b      	ldr	r3, [r3, #0]
   84ec4:	687a      	ldr	r2, [r7, #4]
   84ec6:	429a      	cmp	r2, r3
   84ec8:	d202      	bcs.n	84ed0 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84eca:	4b08      	ldr	r3, [pc, #32]	; (84eec <prvAddCurrentTaskToDelayedList+0x6c>)
   84ecc:	687a      	ldr	r2, [r7, #4]
   84ece:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84ed0:	3708      	adds	r7, #8
   84ed2:	46bd      	mov	sp, r7
   84ed4:	bd80      	pop	{r7, pc}
   84ed6:	bf00      	nop
   84ed8:	2007a508 	.word	0x2007a508
   84edc:	2007a5e4 	.word	0x2007a5e4
   84ee0:	2007a59c 	.word	0x2007a59c
   84ee4:	00083299 	.word	0x00083299
   84ee8:	2007a598 	.word	0x2007a598
   84eec:	20070008 	.word	0x20070008

00084ef0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   84ef0:	b580      	push	{r7, lr}
   84ef2:	b084      	sub	sp, #16
   84ef4:	af00      	add	r7, sp, #0
   84ef6:	4603      	mov	r3, r0
   84ef8:	6039      	str	r1, [r7, #0]
   84efa:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   84efc:	2048      	movs	r0, #72	; 0x48
   84efe:	4b15      	ldr	r3, [pc, #84]	; (84f54 <prvAllocateTCBAndStack+0x64>)
   84f00:	4798      	blx	r3
   84f02:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   84f04:	68fb      	ldr	r3, [r7, #12]
   84f06:	2b00      	cmp	r3, #0
   84f08:	d01f      	beq.n	84f4a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84f0a:	683b      	ldr	r3, [r7, #0]
   84f0c:	2b00      	cmp	r3, #0
   84f0e:	d106      	bne.n	84f1e <prvAllocateTCBAndStack+0x2e>
   84f10:	88fb      	ldrh	r3, [r7, #6]
   84f12:	009b      	lsls	r3, r3, #2
   84f14:	4618      	mov	r0, r3
   84f16:	4b0f      	ldr	r3, [pc, #60]	; (84f54 <prvAllocateTCBAndStack+0x64>)
   84f18:	4798      	blx	r3
   84f1a:	4603      	mov	r3, r0
   84f1c:	e000      	b.n	84f20 <prvAllocateTCBAndStack+0x30>
   84f1e:	683b      	ldr	r3, [r7, #0]
   84f20:	68fa      	ldr	r2, [r7, #12]
   84f22:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   84f24:	68fb      	ldr	r3, [r7, #12]
   84f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84f28:	2b00      	cmp	r3, #0
   84f2a:	d105      	bne.n	84f38 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84f2c:	68f8      	ldr	r0, [r7, #12]
   84f2e:	4b0a      	ldr	r3, [pc, #40]	; (84f58 <prvAllocateTCBAndStack+0x68>)
   84f30:	4798      	blx	r3
			pxNewTCB = NULL;
   84f32:	2300      	movs	r3, #0
   84f34:	60fb      	str	r3, [r7, #12]
   84f36:	e008      	b.n	84f4a <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84f38:	68fb      	ldr	r3, [r7, #12]
   84f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84f3c:	88fb      	ldrh	r3, [r7, #6]
   84f3e:	009b      	lsls	r3, r3, #2
   84f40:	4610      	mov	r0, r2
   84f42:	21a5      	movs	r1, #165	; 0xa5
   84f44:	461a      	mov	r2, r3
   84f46:	4b05      	ldr	r3, [pc, #20]	; (84f5c <prvAllocateTCBAndStack+0x6c>)
   84f48:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84f4a:	68fb      	ldr	r3, [r7, #12]
}
   84f4c:	4618      	mov	r0, r3
   84f4e:	3710      	adds	r7, #16
   84f50:	46bd      	mov	sp, r7
   84f52:	bd80      	pop	{r7, pc}
   84f54:	000836a5 	.word	0x000836a5
   84f58:	0008381d 	.word	0x0008381d
   84f5c:	00086d9d 	.word	0x00086d9d

00084f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84f60:	b580      	push	{r7, lr}
   84f62:	b082      	sub	sp, #8
   84f64:	af00      	add	r7, sp, #0
   84f66:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84f68:	687b      	ldr	r3, [r7, #4]
   84f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84f6c:	4618      	mov	r0, r3
   84f6e:	4b04      	ldr	r3, [pc, #16]	; (84f80 <prvDeleteTCB+0x20>)
   84f70:	4798      	blx	r3
		vPortFree( pxTCB );
   84f72:	6878      	ldr	r0, [r7, #4]
   84f74:	4b02      	ldr	r3, [pc, #8]	; (84f80 <prvDeleteTCB+0x20>)
   84f76:	4798      	blx	r3
	}
   84f78:	3708      	adds	r7, #8
   84f7a:	46bd      	mov	sp, r7
   84f7c:	bd80      	pop	{r7, pc}
   84f7e:	bf00      	nop
   84f80:	0008381d 	.word	0x0008381d

00084f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   84f84:	b480      	push	{r7}
   84f86:	b083      	sub	sp, #12
   84f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84f8a:	4b0e      	ldr	r3, [pc, #56]	; (84fc4 <prvResetNextTaskUnblockTime+0x40>)
   84f8c:	681b      	ldr	r3, [r3, #0]
   84f8e:	681b      	ldr	r3, [r3, #0]
   84f90:	2b00      	cmp	r3, #0
   84f92:	d101      	bne.n	84f98 <prvResetNextTaskUnblockTime+0x14>
   84f94:	2301      	movs	r3, #1
   84f96:	e000      	b.n	84f9a <prvResetNextTaskUnblockTime+0x16>
   84f98:	2300      	movs	r3, #0
   84f9a:	2b00      	cmp	r3, #0
   84f9c:	d004      	beq.n	84fa8 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84f9e:	4b0a      	ldr	r3, [pc, #40]	; (84fc8 <prvResetNextTaskUnblockTime+0x44>)
   84fa0:	f04f 32ff 	mov.w	r2, #4294967295
   84fa4:	601a      	str	r2, [r3, #0]
   84fa6:	e008      	b.n	84fba <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84fa8:	4b06      	ldr	r3, [pc, #24]	; (84fc4 <prvResetNextTaskUnblockTime+0x40>)
   84faa:	681b      	ldr	r3, [r3, #0]
   84fac:	68db      	ldr	r3, [r3, #12]
   84fae:	68db      	ldr	r3, [r3, #12]
   84fb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   84fb2:	687b      	ldr	r3, [r7, #4]
   84fb4:	685a      	ldr	r2, [r3, #4]
   84fb6:	4b04      	ldr	r3, [pc, #16]	; (84fc8 <prvResetNextTaskUnblockTime+0x44>)
   84fb8:	601a      	str	r2, [r3, #0]
	}
}
   84fba:	370c      	adds	r7, #12
   84fbc:	46bd      	mov	sp, r7
   84fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   84fc2:	4770      	bx	lr
   84fc4:	2007a598 	.word	0x2007a598
   84fc8:	20070008 	.word	0x20070008

00084fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84fcc:	b480      	push	{r7}
   84fce:	b083      	sub	sp, #12
   84fd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   84fd2:	4b0b      	ldr	r3, [pc, #44]	; (85000 <xTaskGetSchedulerState+0x34>)
   84fd4:	681b      	ldr	r3, [r3, #0]
   84fd6:	2b00      	cmp	r3, #0
   84fd8:	d102      	bne.n	84fe0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   84fda:	2301      	movs	r3, #1
   84fdc:	607b      	str	r3, [r7, #4]
   84fde:	e008      	b.n	84ff2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84fe0:	4b08      	ldr	r3, [pc, #32]	; (85004 <xTaskGetSchedulerState+0x38>)
   84fe2:	681b      	ldr	r3, [r3, #0]
   84fe4:	2b00      	cmp	r3, #0
   84fe6:	d102      	bne.n	84fee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   84fe8:	2302      	movs	r3, #2
   84fea:	607b      	str	r3, [r7, #4]
   84fec:	e001      	b.n	84ff2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   84fee:	2300      	movs	r3, #0
   84ff0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   84ff2:	687b      	ldr	r3, [r7, #4]
	}
   84ff4:	4618      	mov	r0, r3
   84ff6:	370c      	adds	r7, #12
   84ff8:	46bd      	mov	sp, r7
   84ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
   84ffe:	4770      	bx	lr
   85000:	2007a5ec 	.word	0x2007a5ec
   85004:	2007a600 	.word	0x2007a600

00085008 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   85008:	b580      	push	{r7, lr}
   8500a:	b084      	sub	sp, #16
   8500c:	af00      	add	r7, sp, #0
   8500e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   85010:	687b      	ldr	r3, [r7, #4]
   85012:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   85014:	687b      	ldr	r3, [r7, #4]
   85016:	2b00      	cmp	r3, #0
   85018:	d062      	beq.n	850e0 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8501a:	68fb      	ldr	r3, [r7, #12]
   8501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8501e:	4b32      	ldr	r3, [pc, #200]	; (850e8 <vTaskPriorityInherit+0xe0>)
   85020:	681b      	ldr	r3, [r3, #0]
   85022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85024:	429a      	cmp	r2, r3
   85026:	d25b      	bcs.n	850e0 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   85028:	68fb      	ldr	r3, [r7, #12]
   8502a:	699b      	ldr	r3, [r3, #24]
   8502c:	2b00      	cmp	r3, #0
   8502e:	db06      	blt.n	8503e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   85030:	4b2d      	ldr	r3, [pc, #180]	; (850e8 <vTaskPriorityInherit+0xe0>)
   85032:	681b      	ldr	r3, [r3, #0]
   85034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85036:	f1c3 0205 	rsb	r2, r3, #5
   8503a:	68fb      	ldr	r3, [r7, #12]
   8503c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8503e:	68fb      	ldr	r3, [r7, #12]
   85040:	6959      	ldr	r1, [r3, #20]
   85042:	68fb      	ldr	r3, [r7, #12]
   85044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85046:	4613      	mov	r3, r2
   85048:	009b      	lsls	r3, r3, #2
   8504a:	4413      	add	r3, r2
   8504c:	009b      	lsls	r3, r3, #2
   8504e:	4a27      	ldr	r2, [pc, #156]	; (850ec <vTaskPriorityInherit+0xe4>)
   85050:	4413      	add	r3, r2
   85052:	4299      	cmp	r1, r3
   85054:	d101      	bne.n	8505a <vTaskPriorityInherit+0x52>
   85056:	2301      	movs	r3, #1
   85058:	e000      	b.n	8505c <vTaskPriorityInherit+0x54>
   8505a:	2300      	movs	r3, #0
   8505c:	2b00      	cmp	r3, #0
   8505e:	d03a      	beq.n	850d6 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   85060:	68fb      	ldr	r3, [r7, #12]
   85062:	3304      	adds	r3, #4
   85064:	4618      	mov	r0, r3
   85066:	4b22      	ldr	r3, [pc, #136]	; (850f0 <vTaskPriorityInherit+0xe8>)
   85068:	4798      	blx	r3
   8506a:	4603      	mov	r3, r0
   8506c:	2b00      	cmp	r3, #0
   8506e:	d115      	bne.n	8509c <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   85070:	68fb      	ldr	r3, [r7, #12]
   85072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85074:	491d      	ldr	r1, [pc, #116]	; (850ec <vTaskPriorityInherit+0xe4>)
   85076:	4613      	mov	r3, r2
   85078:	009b      	lsls	r3, r3, #2
   8507a:	4413      	add	r3, r2
   8507c:	009b      	lsls	r3, r3, #2
   8507e:	440b      	add	r3, r1
   85080:	681b      	ldr	r3, [r3, #0]
   85082:	2b00      	cmp	r3, #0
   85084:	d10a      	bne.n	8509c <vTaskPriorityInherit+0x94>
   85086:	68fb      	ldr	r3, [r7, #12]
   85088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8508a:	2201      	movs	r2, #1
   8508c:	fa02 f303 	lsl.w	r3, r2, r3
   85090:	43da      	mvns	r2, r3
   85092:	4b18      	ldr	r3, [pc, #96]	; (850f4 <vTaskPriorityInherit+0xec>)
   85094:	681b      	ldr	r3, [r3, #0]
   85096:	401a      	ands	r2, r3
   85098:	4b16      	ldr	r3, [pc, #88]	; (850f4 <vTaskPriorityInherit+0xec>)
   8509a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8509c:	4b12      	ldr	r3, [pc, #72]	; (850e8 <vTaskPriorityInherit+0xe0>)
   8509e:	681b      	ldr	r3, [r3, #0]
   850a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   850a2:	68fb      	ldr	r3, [r7, #12]
   850a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   850a6:	68fb      	ldr	r3, [r7, #12]
   850a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   850aa:	2201      	movs	r2, #1
   850ac:	409a      	lsls	r2, r3
   850ae:	4b11      	ldr	r3, [pc, #68]	; (850f4 <vTaskPriorityInherit+0xec>)
   850b0:	681b      	ldr	r3, [r3, #0]
   850b2:	431a      	orrs	r2, r3
   850b4:	4b0f      	ldr	r3, [pc, #60]	; (850f4 <vTaskPriorityInherit+0xec>)
   850b6:	601a      	str	r2, [r3, #0]
   850b8:	68fb      	ldr	r3, [r7, #12]
   850ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   850bc:	4613      	mov	r3, r2
   850be:	009b      	lsls	r3, r3, #2
   850c0:	4413      	add	r3, r2
   850c2:	009b      	lsls	r3, r3, #2
   850c4:	4a09      	ldr	r2, [pc, #36]	; (850ec <vTaskPriorityInherit+0xe4>)
   850c6:	441a      	add	r2, r3
   850c8:	68fb      	ldr	r3, [r7, #12]
   850ca:	3304      	adds	r3, #4
   850cc:	4610      	mov	r0, r2
   850ce:	4619      	mov	r1, r3
   850d0:	4b09      	ldr	r3, [pc, #36]	; (850f8 <vTaskPriorityInherit+0xf0>)
   850d2:	4798      	blx	r3
   850d4:	e004      	b.n	850e0 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   850d6:	4b04      	ldr	r3, [pc, #16]	; (850e8 <vTaskPriorityInherit+0xe0>)
   850d8:	681b      	ldr	r3, [r3, #0]
   850da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   850dc:	68fb      	ldr	r3, [r7, #12]
   850de:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   850e0:	3710      	adds	r7, #16
   850e2:	46bd      	mov	sp, r7
   850e4:	bd80      	pop	{r7, pc}
   850e6:	bf00      	nop
   850e8:	2007a508 	.word	0x2007a508
   850ec:	2007a50c 	.word	0x2007a50c
   850f0:	00083309 	.word	0x00083309
   850f4:	2007a5e8 	.word	0x2007a5e8
   850f8:	00083251 	.word	0x00083251

000850fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   850fc:	b580      	push	{r7, lr}
   850fe:	b084      	sub	sp, #16
   85100:	af00      	add	r7, sp, #0
   85102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   85104:	687b      	ldr	r3, [r7, #4]
   85106:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   85108:	2300      	movs	r3, #0
   8510a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   8510c:	687b      	ldr	r3, [r7, #4]
   8510e:	2b00      	cmp	r3, #0
   85110:	d056      	beq.n	851c0 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   85112:	68bb      	ldr	r3, [r7, #8]
   85114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   85116:	2b00      	cmp	r3, #0
   85118:	d102      	bne.n	85120 <xTaskPriorityDisinherit+0x24>
   8511a:	4b2c      	ldr	r3, [pc, #176]	; (851cc <xTaskPriorityDisinherit+0xd0>)
   8511c:	4798      	blx	r3
   8511e:	e7fe      	b.n	8511e <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   85120:	68bb      	ldr	r3, [r7, #8]
   85122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   85124:	1e5a      	subs	r2, r3, #1
   85126:	68bb      	ldr	r3, [r7, #8]
   85128:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8512a:	68bb      	ldr	r3, [r7, #8]
   8512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8512e:	68bb      	ldr	r3, [r7, #8]
   85130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   85132:	429a      	cmp	r2, r3
   85134:	d044      	beq.n	851c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   85136:	68bb      	ldr	r3, [r7, #8]
   85138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8513a:	2b00      	cmp	r3, #0
   8513c:	d140      	bne.n	851c0 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8513e:	68bb      	ldr	r3, [r7, #8]
   85140:	3304      	adds	r3, #4
   85142:	4618      	mov	r0, r3
   85144:	4b22      	ldr	r3, [pc, #136]	; (851d0 <xTaskPriorityDisinherit+0xd4>)
   85146:	4798      	blx	r3
   85148:	4603      	mov	r3, r0
   8514a:	2b00      	cmp	r3, #0
   8514c:	d115      	bne.n	8517a <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8514e:	68bb      	ldr	r3, [r7, #8]
   85150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85152:	4920      	ldr	r1, [pc, #128]	; (851d4 <xTaskPriorityDisinherit+0xd8>)
   85154:	4613      	mov	r3, r2
   85156:	009b      	lsls	r3, r3, #2
   85158:	4413      	add	r3, r2
   8515a:	009b      	lsls	r3, r3, #2
   8515c:	440b      	add	r3, r1
   8515e:	681b      	ldr	r3, [r3, #0]
   85160:	2b00      	cmp	r3, #0
   85162:	d10a      	bne.n	8517a <xTaskPriorityDisinherit+0x7e>
   85164:	68bb      	ldr	r3, [r7, #8]
   85166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85168:	2201      	movs	r2, #1
   8516a:	fa02 f303 	lsl.w	r3, r2, r3
   8516e:	43da      	mvns	r2, r3
   85170:	4b19      	ldr	r3, [pc, #100]	; (851d8 <xTaskPriorityDisinherit+0xdc>)
   85172:	681b      	ldr	r3, [r3, #0]
   85174:	401a      	ands	r2, r3
   85176:	4b18      	ldr	r3, [pc, #96]	; (851d8 <xTaskPriorityDisinherit+0xdc>)
   85178:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   8517a:	68bb      	ldr	r3, [r7, #8]
   8517c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8517e:	68bb      	ldr	r3, [r7, #8]
   85180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   85182:	68bb      	ldr	r3, [r7, #8]
   85184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85186:	f1c3 0205 	rsb	r2, r3, #5
   8518a:	68bb      	ldr	r3, [r7, #8]
   8518c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   8518e:	68bb      	ldr	r3, [r7, #8]
   85190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85192:	2201      	movs	r2, #1
   85194:	409a      	lsls	r2, r3
   85196:	4b10      	ldr	r3, [pc, #64]	; (851d8 <xTaskPriorityDisinherit+0xdc>)
   85198:	681b      	ldr	r3, [r3, #0]
   8519a:	431a      	orrs	r2, r3
   8519c:	4b0e      	ldr	r3, [pc, #56]	; (851d8 <xTaskPriorityDisinherit+0xdc>)
   8519e:	601a      	str	r2, [r3, #0]
   851a0:	68bb      	ldr	r3, [r7, #8]
   851a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   851a4:	4613      	mov	r3, r2
   851a6:	009b      	lsls	r3, r3, #2
   851a8:	4413      	add	r3, r2
   851aa:	009b      	lsls	r3, r3, #2
   851ac:	4a09      	ldr	r2, [pc, #36]	; (851d4 <xTaskPriorityDisinherit+0xd8>)
   851ae:	441a      	add	r2, r3
   851b0:	68bb      	ldr	r3, [r7, #8]
   851b2:	3304      	adds	r3, #4
   851b4:	4610      	mov	r0, r2
   851b6:	4619      	mov	r1, r3
   851b8:	4b08      	ldr	r3, [pc, #32]	; (851dc <xTaskPriorityDisinherit+0xe0>)
   851ba:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   851bc:	2301      	movs	r3, #1
   851be:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   851c0:	68fb      	ldr	r3, [r7, #12]
	}
   851c2:	4618      	mov	r0, r3
   851c4:	3710      	adds	r7, #16
   851c6:	46bd      	mov	sp, r7
   851c8:	bd80      	pop	{r7, pc}
   851ca:	bf00      	nop
   851cc:	00083581 	.word	0x00083581
   851d0:	00083309 	.word	0x00083309
   851d4:	2007a50c 	.word	0x2007a50c
   851d8:	2007a5e8 	.word	0x2007a5e8
   851dc:	00083251 	.word	0x00083251

000851e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   851e0:	b480      	push	{r7}
   851e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   851e4:	4b07      	ldr	r3, [pc, #28]	; (85204 <pvTaskIncrementMutexHeldCount+0x24>)
   851e6:	681b      	ldr	r3, [r3, #0]
   851e8:	2b00      	cmp	r3, #0
   851ea:	d004      	beq.n	851f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   851ec:	4b05      	ldr	r3, [pc, #20]	; (85204 <pvTaskIncrementMutexHeldCount+0x24>)
   851ee:	681b      	ldr	r3, [r3, #0]
   851f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   851f2:	3201      	adds	r2, #1
   851f4:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   851f6:	4b03      	ldr	r3, [pc, #12]	; (85204 <pvTaskIncrementMutexHeldCount+0x24>)
   851f8:	681b      	ldr	r3, [r3, #0]
	}
   851fa:	4618      	mov	r0, r3
   851fc:	46bd      	mov	sp, r7
   851fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   85202:	4770      	bx	lr
   85204:	2007a508 	.word	0x2007a508

00085208 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   85208:	b590      	push	{r4, r7, lr}
   8520a:	b087      	sub	sp, #28
   8520c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   8520e:	2300      	movs	r3, #0
   85210:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   85212:	4b10      	ldr	r3, [pc, #64]	; (85254 <xTimerCreateTimerTask+0x4c>)
   85214:	4798      	blx	r3

	if( xTimerQueue != NULL )
   85216:	4b10      	ldr	r3, [pc, #64]	; (85258 <xTimerCreateTimerTask+0x50>)
   85218:	681b      	ldr	r3, [r3, #0]
   8521a:	2b00      	cmp	r3, #0
   8521c:	d00f      	beq.n	8523e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8521e:	2302      	movs	r3, #2
   85220:	9300      	str	r3, [sp, #0]
   85222:	2300      	movs	r3, #0
   85224:	9301      	str	r3, [sp, #4]
   85226:	2300      	movs	r3, #0
   85228:	9302      	str	r3, [sp, #8]
   8522a:	2300      	movs	r3, #0
   8522c:	9303      	str	r3, [sp, #12]
   8522e:	480b      	ldr	r0, [pc, #44]	; (8525c <xTimerCreateTimerTask+0x54>)
   85230:	490b      	ldr	r1, [pc, #44]	; (85260 <xTimerCreateTimerTask+0x58>)
   85232:	f44f 7282 	mov.w	r2, #260	; 0x104
   85236:	2300      	movs	r3, #0
   85238:	4c0a      	ldr	r4, [pc, #40]	; (85264 <xTimerCreateTimerTask+0x5c>)
   8523a:	47a0      	blx	r4
   8523c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8523e:	687b      	ldr	r3, [r7, #4]
   85240:	2b00      	cmp	r3, #0
   85242:	d102      	bne.n	8524a <xTimerCreateTimerTask+0x42>
   85244:	4b08      	ldr	r3, [pc, #32]	; (85268 <xTimerCreateTimerTask+0x60>)
   85246:	4798      	blx	r3
   85248:	e7fe      	b.n	85248 <xTimerCreateTimerTask+0x40>
	return xReturn;
   8524a:	687b      	ldr	r3, [r7, #4]
}
   8524c:	4618      	mov	r0, r3
   8524e:	370c      	adds	r7, #12
   85250:	46bd      	mov	sp, r7
   85252:	bd90      	pop	{r4, r7, pc}
   85254:	0008573d 	.word	0x0008573d
   85258:	2007a634 	.word	0x2007a634
   8525c:	00085385 	.word	0x00085385
   85260:	000870a4 	.word	0x000870a4
   85264:	000842f5 	.word	0x000842f5
   85268:	00083581 	.word	0x00083581

0008526c <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   8526c:	b590      	push	{r4, r7, lr}
   8526e:	b089      	sub	sp, #36	; 0x24
   85270:	af00      	add	r7, sp, #0
   85272:	60f8      	str	r0, [r7, #12]
   85274:	60b9      	str	r1, [r7, #8]
   85276:	607a      	str	r2, [r7, #4]
   85278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   8527a:	2300      	movs	r3, #0
   8527c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   8527e:	4b1d      	ldr	r3, [pc, #116]	; (852f4 <xTimerGenericCommand+0x88>)
   85280:	681b      	ldr	r3, [r3, #0]
   85282:	2b00      	cmp	r3, #0
   85284:	d030      	beq.n	852e8 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   85286:	68bb      	ldr	r3, [r7, #8]
   85288:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   8528a:	687b      	ldr	r3, [r7, #4]
   8528c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   8528e:	68fb      	ldr	r3, [r7, #12]
   85290:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   85292:	68bb      	ldr	r3, [r7, #8]
   85294:	2b05      	cmp	r3, #5
   85296:	dc1c      	bgt.n	852d2 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   85298:	4b17      	ldr	r3, [pc, #92]	; (852f8 <xTimerGenericCommand+0x8c>)
   8529a:	4798      	blx	r3
   8529c:	4603      	mov	r3, r0
   8529e:	2b02      	cmp	r3, #2
   852a0:	d10b      	bne.n	852ba <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   852a2:	4b14      	ldr	r3, [pc, #80]	; (852f4 <xTimerGenericCommand+0x88>)
   852a4:	681a      	ldr	r2, [r3, #0]
   852a6:	f107 0310 	add.w	r3, r7, #16
   852aa:	4610      	mov	r0, r2
   852ac:	4619      	mov	r1, r3
   852ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   852b0:	2300      	movs	r3, #0
   852b2:	4c12      	ldr	r4, [pc, #72]	; (852fc <xTimerGenericCommand+0x90>)
   852b4:	47a0      	blx	r4
   852b6:	61f8      	str	r0, [r7, #28]
   852b8:	e016      	b.n	852e8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   852ba:	4b0e      	ldr	r3, [pc, #56]	; (852f4 <xTimerGenericCommand+0x88>)
   852bc:	681a      	ldr	r2, [r3, #0]
   852be:	f107 0310 	add.w	r3, r7, #16
   852c2:	4610      	mov	r0, r2
   852c4:	4619      	mov	r1, r3
   852c6:	2200      	movs	r2, #0
   852c8:	2300      	movs	r3, #0
   852ca:	4c0c      	ldr	r4, [pc, #48]	; (852fc <xTimerGenericCommand+0x90>)
   852cc:	47a0      	blx	r4
   852ce:	61f8      	str	r0, [r7, #28]
   852d0:	e00a      	b.n	852e8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   852d2:	4b08      	ldr	r3, [pc, #32]	; (852f4 <xTimerGenericCommand+0x88>)
   852d4:	681a      	ldr	r2, [r3, #0]
   852d6:	f107 0310 	add.w	r3, r7, #16
   852da:	4610      	mov	r0, r2
   852dc:	4619      	mov	r1, r3
   852de:	683a      	ldr	r2, [r7, #0]
   852e0:	2300      	movs	r3, #0
   852e2:	4c07      	ldr	r4, [pc, #28]	; (85300 <xTimerGenericCommand+0x94>)
   852e4:	47a0      	blx	r4
   852e6:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   852e8:	69fb      	ldr	r3, [r7, #28]
}
   852ea:	4618      	mov	r0, r3
   852ec:	3724      	adds	r7, #36	; 0x24
   852ee:	46bd      	mov	sp, r7
   852f0:	bd90      	pop	{r4, r7, pc}
   852f2:	bf00      	nop
   852f4:	2007a634 	.word	0x2007a634
   852f8:	00084fcd 	.word	0x00084fcd
   852fc:	00083b89 	.word	0x00083b89
   85300:	00083d4d 	.word	0x00083d4d

00085304 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   85304:	b590      	push	{r4, r7, lr}
   85306:	b087      	sub	sp, #28
   85308:	af02      	add	r7, sp, #8
   8530a:	6078      	str	r0, [r7, #4]
   8530c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8530e:	4b18      	ldr	r3, [pc, #96]	; (85370 <prvProcessExpiredTimer+0x6c>)
   85310:	681b      	ldr	r3, [r3, #0]
   85312:	68db      	ldr	r3, [r3, #12]
   85314:	68db      	ldr	r3, [r3, #12]
   85316:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85318:	68fb      	ldr	r3, [r7, #12]
   8531a:	3304      	adds	r3, #4
   8531c:	4618      	mov	r0, r3
   8531e:	4b15      	ldr	r3, [pc, #84]	; (85374 <prvProcessExpiredTimer+0x70>)
   85320:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85322:	68fb      	ldr	r3, [r7, #12]
   85324:	69db      	ldr	r3, [r3, #28]
   85326:	2b01      	cmp	r3, #1
   85328:	d11b      	bne.n	85362 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8532a:	68fb      	ldr	r3, [r7, #12]
   8532c:	699a      	ldr	r2, [r3, #24]
   8532e:	687b      	ldr	r3, [r7, #4]
   85330:	4413      	add	r3, r2
   85332:	68f8      	ldr	r0, [r7, #12]
   85334:	4619      	mov	r1, r3
   85336:	683a      	ldr	r2, [r7, #0]
   85338:	687b      	ldr	r3, [r7, #4]
   8533a:	4c0f      	ldr	r4, [pc, #60]	; (85378 <prvProcessExpiredTimer+0x74>)
   8533c:	47a0      	blx	r4
   8533e:	4603      	mov	r3, r0
   85340:	2b01      	cmp	r3, #1
   85342:	d10e      	bne.n	85362 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   85344:	2300      	movs	r3, #0
   85346:	9300      	str	r3, [sp, #0]
   85348:	68f8      	ldr	r0, [r7, #12]
   8534a:	2100      	movs	r1, #0
   8534c:	687a      	ldr	r2, [r7, #4]
   8534e:	2300      	movs	r3, #0
   85350:	4c0a      	ldr	r4, [pc, #40]	; (8537c <prvProcessExpiredTimer+0x78>)
   85352:	47a0      	blx	r4
   85354:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   85356:	68bb      	ldr	r3, [r7, #8]
   85358:	2b00      	cmp	r3, #0
   8535a:	d102      	bne.n	85362 <prvProcessExpiredTimer+0x5e>
   8535c:	4b08      	ldr	r3, [pc, #32]	; (85380 <prvProcessExpiredTimer+0x7c>)
   8535e:	4798      	blx	r3
   85360:	e7fe      	b.n	85360 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85362:	68fb      	ldr	r3, [r7, #12]
   85364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   85366:	68f8      	ldr	r0, [r7, #12]
   85368:	4798      	blx	r3
}
   8536a:	3714      	adds	r7, #20
   8536c:	46bd      	mov	sp, r7
   8536e:	bd90      	pop	{r4, r7, pc}
   85370:	2007a62c 	.word	0x2007a62c
   85374:	00083309 	.word	0x00083309
   85378:	000854c9 	.word	0x000854c9
   8537c:	0008526d 	.word	0x0008526d
   85380:	00083581 	.word	0x00083581

00085384 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   85384:	b580      	push	{r7, lr}
   85386:	b084      	sub	sp, #16
   85388:	af00      	add	r7, sp, #0
   8538a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   8538c:	f107 0308 	add.w	r3, r7, #8
   85390:	4618      	mov	r0, r3
   85392:	4b05      	ldr	r3, [pc, #20]	; (853a8 <prvTimerTask+0x24>)
   85394:	4798      	blx	r3
   85396:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   85398:	68bb      	ldr	r3, [r7, #8]
   8539a:	68f8      	ldr	r0, [r7, #12]
   8539c:	4619      	mov	r1, r3
   8539e:	4b03      	ldr	r3, [pc, #12]	; (853ac <prvTimerTask+0x28>)
   853a0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   853a2:	4b03      	ldr	r3, [pc, #12]	; (853b0 <prvTimerTask+0x2c>)
   853a4:	4798      	blx	r3
	}
   853a6:	e7f1      	b.n	8538c <prvTimerTask+0x8>
   853a8:	00085439 	.word	0x00085439
   853ac:	000853b5 	.word	0x000853b5
   853b0:	00085551 	.word	0x00085551

000853b4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   853b4:	b580      	push	{r7, lr}
   853b6:	b084      	sub	sp, #16
   853b8:	af00      	add	r7, sp, #0
   853ba:	6078      	str	r0, [r7, #4]
   853bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   853be:	4b17      	ldr	r3, [pc, #92]	; (8541c <prvProcessTimerOrBlockTask+0x68>)
   853c0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   853c2:	f107 0308 	add.w	r3, r7, #8
   853c6:	4618      	mov	r0, r3
   853c8:	4b15      	ldr	r3, [pc, #84]	; (85420 <prvProcessTimerOrBlockTask+0x6c>)
   853ca:	4798      	blx	r3
   853cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   853ce:	68bb      	ldr	r3, [r7, #8]
   853d0:	2b00      	cmp	r3, #0
   853d2:	d11e      	bne.n	85412 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   853d4:	683b      	ldr	r3, [r7, #0]
   853d6:	2b00      	cmp	r3, #0
   853d8:	d10a      	bne.n	853f0 <prvProcessTimerOrBlockTask+0x3c>
   853da:	687a      	ldr	r2, [r7, #4]
   853dc:	68fb      	ldr	r3, [r7, #12]
   853de:	429a      	cmp	r2, r3
   853e0:	d806      	bhi.n	853f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   853e2:	4b10      	ldr	r3, [pc, #64]	; (85424 <prvProcessTimerOrBlockTask+0x70>)
   853e4:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   853e6:	6878      	ldr	r0, [r7, #4]
   853e8:	68f9      	ldr	r1, [r7, #12]
   853ea:	4b0f      	ldr	r3, [pc, #60]	; (85428 <prvProcessTimerOrBlockTask+0x74>)
   853ec:	4798      	blx	r3
   853ee:	e012      	b.n	85416 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   853f0:	4b0e      	ldr	r3, [pc, #56]	; (8542c <prvProcessTimerOrBlockTask+0x78>)
   853f2:	681a      	ldr	r2, [r3, #0]
   853f4:	6879      	ldr	r1, [r7, #4]
   853f6:	68fb      	ldr	r3, [r7, #12]
   853f8:	1acb      	subs	r3, r1, r3
   853fa:	4610      	mov	r0, r2
   853fc:	4619      	mov	r1, r3
   853fe:	4b0c      	ldr	r3, [pc, #48]	; (85430 <prvProcessTimerOrBlockTask+0x7c>)
   85400:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   85402:	4b08      	ldr	r3, [pc, #32]	; (85424 <prvProcessTimerOrBlockTask+0x70>)
   85404:	4798      	blx	r3
   85406:	4603      	mov	r3, r0
   85408:	2b00      	cmp	r3, #0
   8540a:	d104      	bne.n	85416 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   8540c:	4b09      	ldr	r3, [pc, #36]	; (85434 <prvProcessTimerOrBlockTask+0x80>)
   8540e:	4798      	blx	r3
   85410:	e001      	b.n	85416 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   85412:	4b04      	ldr	r3, [pc, #16]	; (85424 <prvProcessTimerOrBlockTask+0x70>)
   85414:	4798      	blx	r3
		}
	}
}
   85416:	3710      	adds	r7, #16
   85418:	46bd      	mov	sp, r7
   8541a:	bd80      	pop	{r7, pc}
   8541c:	000845f1 	.word	0x000845f1
   85420:	00085481 	.word	0x00085481
   85424:	0008460d 	.word	0x0008460d
   85428:	00085305 	.word	0x00085305
   8542c:	2007a634 	.word	0x2007a634
   85430:	0008428d 	.word	0x0008428d
   85434:	000834e5 	.word	0x000834e5

00085438 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   85438:	b480      	push	{r7}
   8543a:	b085      	sub	sp, #20
   8543c:	af00      	add	r7, sp, #0
   8543e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   85440:	4b0e      	ldr	r3, [pc, #56]	; (8547c <prvGetNextExpireTime+0x44>)
   85442:	681b      	ldr	r3, [r3, #0]
   85444:	681b      	ldr	r3, [r3, #0]
   85446:	2b00      	cmp	r3, #0
   85448:	bf14      	ite	ne
   8544a:	2300      	movne	r3, #0
   8544c:	2301      	moveq	r3, #1
   8544e:	b2db      	uxtb	r3, r3
   85450:	461a      	mov	r2, r3
   85452:	687b      	ldr	r3, [r7, #4]
   85454:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   85456:	687b      	ldr	r3, [r7, #4]
   85458:	681b      	ldr	r3, [r3, #0]
   8545a:	2b00      	cmp	r3, #0
   8545c:	d105      	bne.n	8546a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8545e:	4b07      	ldr	r3, [pc, #28]	; (8547c <prvGetNextExpireTime+0x44>)
   85460:	681b      	ldr	r3, [r3, #0]
   85462:	68db      	ldr	r3, [r3, #12]
   85464:	681b      	ldr	r3, [r3, #0]
   85466:	60fb      	str	r3, [r7, #12]
   85468:	e001      	b.n	8546e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   8546a:	2300      	movs	r3, #0
   8546c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   8546e:	68fb      	ldr	r3, [r7, #12]
}
   85470:	4618      	mov	r0, r3
   85472:	3714      	adds	r7, #20
   85474:	46bd      	mov	sp, r7
   85476:	f85d 7b04 	ldr.w	r7, [sp], #4
   8547a:	4770      	bx	lr
   8547c:	2007a62c 	.word	0x2007a62c

00085480 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   85480:	b580      	push	{r7, lr}
   85482:	b084      	sub	sp, #16
   85484:	af00      	add	r7, sp, #0
   85486:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   85488:	4b0c      	ldr	r3, [pc, #48]	; (854bc <prvSampleTimeNow+0x3c>)
   8548a:	4798      	blx	r3
   8548c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   8548e:	4b0c      	ldr	r3, [pc, #48]	; (854c0 <prvSampleTimeNow+0x40>)
   85490:	681b      	ldr	r3, [r3, #0]
   85492:	68fa      	ldr	r2, [r7, #12]
   85494:	429a      	cmp	r2, r3
   85496:	d205      	bcs.n	854a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   85498:	4b0a      	ldr	r3, [pc, #40]	; (854c4 <prvSampleTimeNow+0x44>)
   8549a:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   8549c:	687b      	ldr	r3, [r7, #4]
   8549e:	2201      	movs	r2, #1
   854a0:	601a      	str	r2, [r3, #0]
   854a2:	e002      	b.n	854aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   854a4:	687b      	ldr	r3, [r7, #4]
   854a6:	2200      	movs	r2, #0
   854a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   854aa:	4b05      	ldr	r3, [pc, #20]	; (854c0 <prvSampleTimeNow+0x40>)
   854ac:	68fa      	ldr	r2, [r7, #12]
   854ae:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   854b0:	68fb      	ldr	r3, [r7, #12]
}
   854b2:	4618      	mov	r0, r3
   854b4:	3710      	adds	r7, #16
   854b6:	46bd      	mov	sp, r7
   854b8:	bd80      	pop	{r7, pc}
   854ba:	bf00      	nop
   854bc:	00084731 	.word	0x00084731
   854c0:	2007a638 	.word	0x2007a638
   854c4:	0008567d 	.word	0x0008567d

000854c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   854c8:	b580      	push	{r7, lr}
   854ca:	b086      	sub	sp, #24
   854cc:	af00      	add	r7, sp, #0
   854ce:	60f8      	str	r0, [r7, #12]
   854d0:	60b9      	str	r1, [r7, #8]
   854d2:	607a      	str	r2, [r7, #4]
   854d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   854d6:	2300      	movs	r3, #0
   854d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   854da:	68fb      	ldr	r3, [r7, #12]
   854dc:	68ba      	ldr	r2, [r7, #8]
   854de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   854e0:	68fb      	ldr	r3, [r7, #12]
   854e2:	68fa      	ldr	r2, [r7, #12]
   854e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   854e6:	68ba      	ldr	r2, [r7, #8]
   854e8:	687b      	ldr	r3, [r7, #4]
   854ea:	429a      	cmp	r2, r3
   854ec:	d812      	bhi.n	85514 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   854ee:	687a      	ldr	r2, [r7, #4]
   854f0:	683b      	ldr	r3, [r7, #0]
   854f2:	1ad2      	subs	r2, r2, r3
   854f4:	68fb      	ldr	r3, [r7, #12]
   854f6:	699b      	ldr	r3, [r3, #24]
   854f8:	429a      	cmp	r2, r3
   854fa:	d302      	bcc.n	85502 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   854fc:	2301      	movs	r3, #1
   854fe:	617b      	str	r3, [r7, #20]
   85500:	e01b      	b.n	8553a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   85502:	4b10      	ldr	r3, [pc, #64]	; (85544 <prvInsertTimerInActiveList+0x7c>)
   85504:	681a      	ldr	r2, [r3, #0]
   85506:	68fb      	ldr	r3, [r7, #12]
   85508:	3304      	adds	r3, #4
   8550a:	4610      	mov	r0, r2
   8550c:	4619      	mov	r1, r3
   8550e:	4b0e      	ldr	r3, [pc, #56]	; (85548 <prvInsertTimerInActiveList+0x80>)
   85510:	4798      	blx	r3
   85512:	e012      	b.n	8553a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   85514:	687a      	ldr	r2, [r7, #4]
   85516:	683b      	ldr	r3, [r7, #0]
   85518:	429a      	cmp	r2, r3
   8551a:	d206      	bcs.n	8552a <prvInsertTimerInActiveList+0x62>
   8551c:	68ba      	ldr	r2, [r7, #8]
   8551e:	683b      	ldr	r3, [r7, #0]
   85520:	429a      	cmp	r2, r3
   85522:	d302      	bcc.n	8552a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   85524:	2301      	movs	r3, #1
   85526:	617b      	str	r3, [r7, #20]
   85528:	e007      	b.n	8553a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8552a:	4b08      	ldr	r3, [pc, #32]	; (8554c <prvInsertTimerInActiveList+0x84>)
   8552c:	681a      	ldr	r2, [r3, #0]
   8552e:	68fb      	ldr	r3, [r7, #12]
   85530:	3304      	adds	r3, #4
   85532:	4610      	mov	r0, r2
   85534:	4619      	mov	r1, r3
   85536:	4b04      	ldr	r3, [pc, #16]	; (85548 <prvInsertTimerInActiveList+0x80>)
   85538:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   8553a:	697b      	ldr	r3, [r7, #20]
}
   8553c:	4618      	mov	r0, r3
   8553e:	3718      	adds	r7, #24
   85540:	46bd      	mov	sp, r7
   85542:	bd80      	pop	{r7, pc}
   85544:	2007a630 	.word	0x2007a630
   85548:	00083299 	.word	0x00083299
   8554c:	2007a62c 	.word	0x2007a62c

00085550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   85550:	b590      	push	{r4, r7, lr}
   85552:	b08b      	sub	sp, #44	; 0x2c
   85554:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   85556:	e070      	b.n	8563a <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   85558:	68bb      	ldr	r3, [r7, #8]
   8555a:	2b00      	cmp	r3, #0
   8555c:	db6d      	blt.n	8563a <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   8555e:	693b      	ldr	r3, [r7, #16]
   85560:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   85562:	69fb      	ldr	r3, [r7, #28]
   85564:	695b      	ldr	r3, [r3, #20]
   85566:	2b00      	cmp	r3, #0
   85568:	d004      	beq.n	85574 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8556a:	69fb      	ldr	r3, [r7, #28]
   8556c:	3304      	adds	r3, #4
   8556e:	4618      	mov	r0, r3
   85570:	4b3a      	ldr	r3, [pc, #232]	; (8565c <prvProcessReceivedCommands+0x10c>)
   85572:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85574:	1d3b      	adds	r3, r7, #4
   85576:	4618      	mov	r0, r3
   85578:	4b39      	ldr	r3, [pc, #228]	; (85660 <prvProcessReceivedCommands+0x110>)
   8557a:	4798      	blx	r3
   8557c:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   8557e:	68bb      	ldr	r3, [r7, #8]
   85580:	2b09      	cmp	r3, #9
   85582:	d859      	bhi.n	85638 <prvProcessReceivedCommands+0xe8>
   85584:	a201      	add	r2, pc, #4	; (adr r2, 8558c <prvProcessReceivedCommands+0x3c>)
   85586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8558a:	bf00      	nop
   8558c:	000855b5 	.word	0x000855b5
   85590:	000855b5 	.word	0x000855b5
   85594:	000855b5 	.word	0x000855b5
   85598:	00085639 	.word	0x00085639
   8559c:	00085607 	.word	0x00085607
   855a0:	00085631 	.word	0x00085631
   855a4:	000855b5 	.word	0x000855b5
   855a8:	000855b5 	.word	0x000855b5
   855ac:	00085639 	.word	0x00085639
   855b0:	00085607 	.word	0x00085607
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   855b4:	68fa      	ldr	r2, [r7, #12]
   855b6:	69fb      	ldr	r3, [r7, #28]
   855b8:	699b      	ldr	r3, [r3, #24]
   855ba:	441a      	add	r2, r3
   855bc:	68fb      	ldr	r3, [r7, #12]
   855be:	69f8      	ldr	r0, [r7, #28]
   855c0:	4611      	mov	r1, r2
   855c2:	69ba      	ldr	r2, [r7, #24]
   855c4:	4c27      	ldr	r4, [pc, #156]	; (85664 <prvProcessReceivedCommands+0x114>)
   855c6:	47a0      	blx	r4
   855c8:	4603      	mov	r3, r0
   855ca:	2b01      	cmp	r3, #1
   855cc:	d11a      	bne.n	85604 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   855ce:	69fb      	ldr	r3, [r7, #28]
   855d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   855d2:	69f8      	ldr	r0, [r7, #28]
   855d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   855d6:	69fb      	ldr	r3, [r7, #28]
   855d8:	69db      	ldr	r3, [r3, #28]
   855da:	2b01      	cmp	r3, #1
   855dc:	d112      	bne.n	85604 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   855de:	68fa      	ldr	r2, [r7, #12]
   855e0:	69fb      	ldr	r3, [r7, #28]
   855e2:	699b      	ldr	r3, [r3, #24]
   855e4:	4413      	add	r3, r2
   855e6:	2200      	movs	r2, #0
   855e8:	9200      	str	r2, [sp, #0]
   855ea:	69f8      	ldr	r0, [r7, #28]
   855ec:	2100      	movs	r1, #0
   855ee:	461a      	mov	r2, r3
   855f0:	2300      	movs	r3, #0
   855f2:	4c1d      	ldr	r4, [pc, #116]	; (85668 <prvProcessReceivedCommands+0x118>)
   855f4:	47a0      	blx	r4
   855f6:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   855f8:	697b      	ldr	r3, [r7, #20]
   855fa:	2b00      	cmp	r3, #0
   855fc:	d102      	bne.n	85604 <prvProcessReceivedCommands+0xb4>
   855fe:	4b1b      	ldr	r3, [pc, #108]	; (8566c <prvProcessReceivedCommands+0x11c>)
   85600:	4798      	blx	r3
   85602:	e7fe      	b.n	85602 <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   85604:	e019      	b.n	8563a <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   85606:	68fa      	ldr	r2, [r7, #12]
   85608:	69fb      	ldr	r3, [r7, #28]
   8560a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8560c:	69fb      	ldr	r3, [r7, #28]
   8560e:	699b      	ldr	r3, [r3, #24]
   85610:	2b00      	cmp	r3, #0
   85612:	d102      	bne.n	8561a <prvProcessReceivedCommands+0xca>
   85614:	4b15      	ldr	r3, [pc, #84]	; (8566c <prvProcessReceivedCommands+0x11c>)
   85616:	4798      	blx	r3
   85618:	e7fe      	b.n	85618 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8561a:	69fb      	ldr	r3, [r7, #28]
   8561c:	699a      	ldr	r2, [r3, #24]
   8561e:	69bb      	ldr	r3, [r7, #24]
   85620:	4413      	add	r3, r2
   85622:	69f8      	ldr	r0, [r7, #28]
   85624:	4619      	mov	r1, r3
   85626:	69ba      	ldr	r2, [r7, #24]
   85628:	69bb      	ldr	r3, [r7, #24]
   8562a:	4c0e      	ldr	r4, [pc, #56]	; (85664 <prvProcessReceivedCommands+0x114>)
   8562c:	47a0      	blx	r4
					break;
   8562e:	e004      	b.n	8563a <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   85630:	69f8      	ldr	r0, [r7, #28]
   85632:	4b0f      	ldr	r3, [pc, #60]	; (85670 <prvProcessReceivedCommands+0x120>)
   85634:	4798      	blx	r3
					break;
   85636:	e000      	b.n	8563a <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   85638:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   8563a:	4b0e      	ldr	r3, [pc, #56]	; (85674 <prvProcessReceivedCommands+0x124>)
   8563c:	681a      	ldr	r2, [r3, #0]
   8563e:	f107 0308 	add.w	r3, r7, #8
   85642:	4610      	mov	r0, r2
   85644:	4619      	mov	r1, r3
   85646:	2200      	movs	r2, #0
   85648:	2300      	movs	r3, #0
   8564a:	4c0b      	ldr	r4, [pc, #44]	; (85678 <prvProcessReceivedCommands+0x128>)
   8564c:	47a0      	blx	r4
   8564e:	4603      	mov	r3, r0
   85650:	2b00      	cmp	r3, #0
   85652:	d181      	bne.n	85558 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   85654:	3724      	adds	r7, #36	; 0x24
   85656:	46bd      	mov	sp, r7
   85658:	bd90      	pop	{r4, r7, pc}
   8565a:	bf00      	nop
   8565c:	00083309 	.word	0x00083309
   85660:	00085481 	.word	0x00085481
   85664:	000854c9 	.word	0x000854c9
   85668:	0008526d 	.word	0x0008526d
   8566c:	00083581 	.word	0x00083581
   85670:	0008381d 	.word	0x0008381d
   85674:	2007a634 	.word	0x2007a634
   85678:	00083e49 	.word	0x00083e49

0008567c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   8567c:	b590      	push	{r4, r7, lr}
   8567e:	b089      	sub	sp, #36	; 0x24
   85680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85682:	e03d      	b.n	85700 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   85684:	4b27      	ldr	r3, [pc, #156]	; (85724 <prvSwitchTimerLists+0xa8>)
   85686:	681b      	ldr	r3, [r3, #0]
   85688:	68db      	ldr	r3, [r3, #12]
   8568a:	681b      	ldr	r3, [r3, #0]
   8568c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8568e:	4b25      	ldr	r3, [pc, #148]	; (85724 <prvSwitchTimerLists+0xa8>)
   85690:	681b      	ldr	r3, [r3, #0]
   85692:	68db      	ldr	r3, [r3, #12]
   85694:	68db      	ldr	r3, [r3, #12]
   85696:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85698:	693b      	ldr	r3, [r7, #16]
   8569a:	3304      	adds	r3, #4
   8569c:	4618      	mov	r0, r3
   8569e:	4b22      	ldr	r3, [pc, #136]	; (85728 <prvSwitchTimerLists+0xac>)
   856a0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   856a2:	693b      	ldr	r3, [r7, #16]
   856a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   856a6:	6938      	ldr	r0, [r7, #16]
   856a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   856aa:	693b      	ldr	r3, [r7, #16]
   856ac:	69db      	ldr	r3, [r3, #28]
   856ae:	2b01      	cmp	r3, #1
   856b0:	d126      	bne.n	85700 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   856b2:	693b      	ldr	r3, [r7, #16]
   856b4:	699a      	ldr	r2, [r3, #24]
   856b6:	697b      	ldr	r3, [r7, #20]
   856b8:	4413      	add	r3, r2
   856ba:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   856bc:	68fa      	ldr	r2, [r7, #12]
   856be:	697b      	ldr	r3, [r7, #20]
   856c0:	429a      	cmp	r2, r3
   856c2:	d90e      	bls.n	856e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   856c4:	693b      	ldr	r3, [r7, #16]
   856c6:	68fa      	ldr	r2, [r7, #12]
   856c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   856ca:	693b      	ldr	r3, [r7, #16]
   856cc:	693a      	ldr	r2, [r7, #16]
   856ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   856d0:	4b14      	ldr	r3, [pc, #80]	; (85724 <prvSwitchTimerLists+0xa8>)
   856d2:	681a      	ldr	r2, [r3, #0]
   856d4:	693b      	ldr	r3, [r7, #16]
   856d6:	3304      	adds	r3, #4
   856d8:	4610      	mov	r0, r2
   856da:	4619      	mov	r1, r3
   856dc:	4b13      	ldr	r3, [pc, #76]	; (8572c <prvSwitchTimerLists+0xb0>)
   856de:	4798      	blx	r3
   856e0:	e00e      	b.n	85700 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   856e2:	2300      	movs	r3, #0
   856e4:	9300      	str	r3, [sp, #0]
   856e6:	6938      	ldr	r0, [r7, #16]
   856e8:	2100      	movs	r1, #0
   856ea:	697a      	ldr	r2, [r7, #20]
   856ec:	2300      	movs	r3, #0
   856ee:	4c10      	ldr	r4, [pc, #64]	; (85730 <prvSwitchTimerLists+0xb4>)
   856f0:	47a0      	blx	r4
   856f2:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   856f4:	68bb      	ldr	r3, [r7, #8]
   856f6:	2b00      	cmp	r3, #0
   856f8:	d102      	bne.n	85700 <prvSwitchTimerLists+0x84>
   856fa:	4b0e      	ldr	r3, [pc, #56]	; (85734 <prvSwitchTimerLists+0xb8>)
   856fc:	4798      	blx	r3
   856fe:	e7fe      	b.n	856fe <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85700:	4b08      	ldr	r3, [pc, #32]	; (85724 <prvSwitchTimerLists+0xa8>)
   85702:	681b      	ldr	r3, [r3, #0]
   85704:	681b      	ldr	r3, [r3, #0]
   85706:	2b00      	cmp	r3, #0
   85708:	d1bc      	bne.n	85684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   8570a:	4b06      	ldr	r3, [pc, #24]	; (85724 <prvSwitchTimerLists+0xa8>)
   8570c:	681b      	ldr	r3, [r3, #0]
   8570e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   85710:	4b09      	ldr	r3, [pc, #36]	; (85738 <prvSwitchTimerLists+0xbc>)
   85712:	681a      	ldr	r2, [r3, #0]
   85714:	4b03      	ldr	r3, [pc, #12]	; (85724 <prvSwitchTimerLists+0xa8>)
   85716:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   85718:	4b07      	ldr	r3, [pc, #28]	; (85738 <prvSwitchTimerLists+0xbc>)
   8571a:	687a      	ldr	r2, [r7, #4]
   8571c:	601a      	str	r2, [r3, #0]
}
   8571e:	371c      	adds	r7, #28
   85720:	46bd      	mov	sp, r7
   85722:	bd90      	pop	{r4, r7, pc}
   85724:	2007a62c 	.word	0x2007a62c
   85728:	00083309 	.word	0x00083309
   8572c:	00083299 	.word	0x00083299
   85730:	0008526d 	.word	0x0008526d
   85734:	00083581 	.word	0x00083581
   85738:	2007a630 	.word	0x2007a630

0008573c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8573c:	b580      	push	{r7, lr}
   8573e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   85740:	4b11      	ldr	r3, [pc, #68]	; (85788 <prvCheckForValidListAndQueue+0x4c>)
   85742:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   85744:	4b11      	ldr	r3, [pc, #68]	; (8578c <prvCheckForValidListAndQueue+0x50>)
   85746:	681b      	ldr	r3, [r3, #0]
   85748:	2b00      	cmp	r3, #0
   8574a:	d11a      	bne.n	85782 <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   8574c:	4810      	ldr	r0, [pc, #64]	; (85790 <prvCheckForValidListAndQueue+0x54>)
   8574e:	4b11      	ldr	r3, [pc, #68]	; (85794 <prvCheckForValidListAndQueue+0x58>)
   85750:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   85752:	4811      	ldr	r0, [pc, #68]	; (85798 <prvCheckForValidListAndQueue+0x5c>)
   85754:	4b0f      	ldr	r3, [pc, #60]	; (85794 <prvCheckForValidListAndQueue+0x58>)
   85756:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   85758:	4b10      	ldr	r3, [pc, #64]	; (8579c <prvCheckForValidListAndQueue+0x60>)
   8575a:	4a0d      	ldr	r2, [pc, #52]	; (85790 <prvCheckForValidListAndQueue+0x54>)
   8575c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8575e:	4b10      	ldr	r3, [pc, #64]	; (857a0 <prvCheckForValidListAndQueue+0x64>)
   85760:	4a0d      	ldr	r2, [pc, #52]	; (85798 <prvCheckForValidListAndQueue+0x5c>)
   85762:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   85764:	2005      	movs	r0, #5
   85766:	210c      	movs	r1, #12
   85768:	2200      	movs	r2, #0
   8576a:	4b0e      	ldr	r3, [pc, #56]	; (857a4 <prvCheckForValidListAndQueue+0x68>)
   8576c:	4798      	blx	r3
   8576e:	4602      	mov	r2, r0
   85770:	4b06      	ldr	r3, [pc, #24]	; (8578c <prvCheckForValidListAndQueue+0x50>)
   85772:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   85774:	4b05      	ldr	r3, [pc, #20]	; (8578c <prvCheckForValidListAndQueue+0x50>)
   85776:	681b      	ldr	r3, [r3, #0]
   85778:	2b00      	cmp	r3, #0
   8577a:	d102      	bne.n	85782 <prvCheckForValidListAndQueue+0x46>
   8577c:	4b0a      	ldr	r3, [pc, #40]	; (857a8 <prvCheckForValidListAndQueue+0x6c>)
   8577e:	4798      	blx	r3
   85780:	e7fe      	b.n	85780 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   85782:	4b0a      	ldr	r3, [pc, #40]	; (857ac <prvCheckForValidListAndQueue+0x70>)
   85784:	4798      	blx	r3
}
   85786:	bd80      	pop	{r7, pc}
   85788:	00083505 	.word	0x00083505
   8578c:	2007a634 	.word	0x2007a634
   85790:	2007a604 	.word	0x2007a604
   85794:	000831f9 	.word	0x000831f9
   85798:	2007a618 	.word	0x2007a618
   8579c:	2007a62c 	.word	0x2007a62c
   857a0:	2007a630 	.word	0x2007a630
   857a4:	00083afd 	.word	0x00083afd
   857a8:	00083581 	.word	0x00083581
   857ac:	00083549 	.word	0x00083549

000857b0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   857b0:	b480      	push	{r7}
   857b2:	b083      	sub	sp, #12
   857b4:	af00      	add	r7, sp, #0
   857b6:	4603      	mov	r3, r0
   857b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   857ba:	4b08      	ldr	r3, [pc, #32]	; (857dc <NVIC_EnableIRQ+0x2c>)
   857bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
   857c0:	0952      	lsrs	r2, r2, #5
   857c2:	79f9      	ldrb	r1, [r7, #7]
   857c4:	f001 011f 	and.w	r1, r1, #31
   857c8:	2001      	movs	r0, #1
   857ca:	fa00 f101 	lsl.w	r1, r0, r1
   857ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   857d2:	370c      	adds	r7, #12
   857d4:	46bd      	mov	sp, r7
   857d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   857da:	4770      	bx	lr
   857dc:	e000e100 	.word	0xe000e100

000857e0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   857e0:	b480      	push	{r7}
   857e2:	b083      	sub	sp, #12
   857e4:	af00      	add	r7, sp, #0
   857e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   857e8:	687b      	ldr	r3, [r7, #4]
   857ea:	2b07      	cmp	r3, #7
   857ec:	d825      	bhi.n	8583a <osc_get_rate+0x5a>
   857ee:	a201      	add	r2, pc, #4	; (adr r2, 857f4 <osc_get_rate+0x14>)
   857f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   857f4:	00085815 	.word	0x00085815
   857f8:	0008581b 	.word	0x0008581b
   857fc:	00085821 	.word	0x00085821
   85800:	00085827 	.word	0x00085827
   85804:	0008582b 	.word	0x0008582b
   85808:	0008582f 	.word	0x0008582f
   8580c:	00085833 	.word	0x00085833
   85810:	00085837 	.word	0x00085837
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   85814:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   85818:	e010      	b.n	8583c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8581a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8581e:	e00d      	b.n	8583c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   85820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85824:	e00a      	b.n	8583c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   85826:	4b08      	ldr	r3, [pc, #32]	; (85848 <osc_get_rate+0x68>)
   85828:	e008      	b.n	8583c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8582a:	4b08      	ldr	r3, [pc, #32]	; (8584c <osc_get_rate+0x6c>)
   8582c:	e006      	b.n	8583c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8582e:	4b08      	ldr	r3, [pc, #32]	; (85850 <osc_get_rate+0x70>)
   85830:	e004      	b.n	8583c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   85832:	4b07      	ldr	r3, [pc, #28]	; (85850 <osc_get_rate+0x70>)
   85834:	e002      	b.n	8583c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   85836:	4b06      	ldr	r3, [pc, #24]	; (85850 <osc_get_rate+0x70>)
   85838:	e000      	b.n	8583c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8583a:	2300      	movs	r3, #0
}
   8583c:	4618      	mov	r0, r3
   8583e:	370c      	adds	r7, #12
   85840:	46bd      	mov	sp, r7
   85842:	f85d 7b04 	ldr.w	r7, [sp], #4
   85846:	4770      	bx	lr
   85848:	003d0900 	.word	0x003d0900
   8584c:	007a1200 	.word	0x007a1200
   85850:	00b71b00 	.word	0x00b71b00

00085854 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   85854:	b580      	push	{r7, lr}
   85856:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   85858:	2006      	movs	r0, #6
   8585a:	4b04      	ldr	r3, [pc, #16]	; (8586c <sysclk_get_main_hz+0x18>)
   8585c:	4798      	blx	r3
   8585e:	4602      	mov	r2, r0
   85860:	4613      	mov	r3, r2
   85862:	00db      	lsls	r3, r3, #3
   85864:	1a9b      	subs	r3, r3, r2
   85866:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   85868:	4618      	mov	r0, r3
   8586a:	bd80      	pop	{r7, pc}
   8586c:	000857e1 	.word	0x000857e1

00085870 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   85870:	b580      	push	{r7, lr}
   85872:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   85874:	4b02      	ldr	r3, [pc, #8]	; (85880 <sysclk_get_cpu_hz+0x10>)
   85876:	4798      	blx	r3
   85878:	4603      	mov	r3, r0
   8587a:	085b      	lsrs	r3, r3, #1
}
   8587c:	4618      	mov	r0, r3
   8587e:	bd80      	pop	{r7, pc}
   85880:	00085855 	.word	0x00085855

00085884 <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   85884:	b580      	push	{r7, lr}
   85886:	b082      	sub	sp, #8
   85888:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   8588a:	482b      	ldr	r0, [pc, #172]	; (85938 <CAN1_Handler+0xb4>)
   8588c:	492b      	ldr	r1, [pc, #172]	; (8593c <CAN1_Handler+0xb8>)
   8588e:	4b2c      	ldr	r3, [pc, #176]	; (85940 <CAN1_Handler+0xbc>)
   85890:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   85892:	482c      	ldr	r0, [pc, #176]	; (85944 <CAN1_Handler+0xc0>)
   85894:	4b2c      	ldr	r3, [pc, #176]	; (85948 <CAN1_Handler+0xc4>)
   85896:	4798      	blx	r3
   85898:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8589a:	683b      	ldr	r3, [r7, #0]
   8589c:	b2db      	uxtb	r3, r3
   8589e:	2b00      	cmp	r3, #0
   858a0:	d046      	beq.n	85930 <CAN1_Handler+0xac>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   858a2:	2300      	movs	r3, #0
   858a4:	71fb      	strb	r3, [r7, #7]
   858a6:	e040      	b.n	8592a <CAN1_Handler+0xa6>
			ul_status = can_mailbox_get_status(CAN1, i);
   858a8:	79fb      	ldrb	r3, [r7, #7]
   858aa:	4826      	ldr	r0, [pc, #152]	; (85944 <CAN1_Handler+0xc0>)
   858ac:	4619      	mov	r1, r3
   858ae:	4b27      	ldr	r3, [pc, #156]	; (8594c <CAN1_Handler+0xc8>)
   858b0:	4798      	blx	r3
   858b2:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   858b4:	683b      	ldr	r3, [r7, #0]
   858b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   858ba:	2b00      	cmp	r3, #0
   858bc:	d032      	beq.n	85924 <CAN1_Handler+0xa0>
				can1_mailbox.ul_mb_idx = i;
   858be:	79fa      	ldrb	r2, [r7, #7]
   858c0:	4b1d      	ldr	r3, [pc, #116]	; (85938 <CAN1_Handler+0xb4>)
   858c2:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   858c4:	4b1c      	ldr	r3, [pc, #112]	; (85938 <CAN1_Handler+0xb4>)
   858c6:	683a      	ldr	r2, [r7, #0]
   858c8:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   858ca:	481e      	ldr	r0, [pc, #120]	; (85944 <CAN1_Handler+0xc0>)
   858cc:	491a      	ldr	r1, [pc, #104]	; (85938 <CAN1_Handler+0xb4>)
   858ce:	4b20      	ldr	r3, [pc, #128]	; (85950 <CAN1_Handler+0xcc>)
   858d0:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   858d2:	4b19      	ldr	r3, [pc, #100]	; (85938 <CAN1_Handler+0xb4>)
   858d4:	69da      	ldr	r2, [r3, #28]
   858d6:	4b1f      	ldr	r3, [pc, #124]	; (85954 <CAN1_Handler+0xd0>)
   858d8:	429a      	cmp	r2, r3
   858da:	d107      	bne.n	858ec <CAN1_Handler+0x68>
   858dc:	4b16      	ldr	r3, [pc, #88]	; (85938 <CAN1_Handler+0xb4>)
   858de:	699a      	ldr	r2, [r3, #24]
   858e0:	4b1d      	ldr	r3, [pc, #116]	; (85958 <CAN1_Handler+0xd4>)
   858e2:	429a      	cmp	r2, r3
   858e4:	d102      	bne.n	858ec <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   858e6:	4b1d      	ldr	r3, [pc, #116]	; (8595c <CAN1_Handler+0xd8>)
   858e8:	2200      	movs	r2, #0
   858ea:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   858ec:	79fb      	ldrb	r3, [r7, #7]
   858ee:	4812      	ldr	r0, [pc, #72]	; (85938 <CAN1_Handler+0xb4>)
   858f0:	4619      	mov	r1, r3
   858f2:	4b1b      	ldr	r3, [pc, #108]	; (85960 <CAN1_Handler+0xdc>)
   858f4:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   858f6:	4810      	ldr	r0, [pc, #64]	; (85938 <CAN1_Handler+0xb4>)
   858f8:	4912      	ldr	r1, [pc, #72]	; (85944 <CAN1_Handler+0xc0>)
   858fa:	4b1a      	ldr	r3, [pc, #104]	; (85964 <CAN1_Handler+0xe0>)
   858fc:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   858fe:	79fb      	ldrb	r3, [r7, #7]
   85900:	2b07      	cmp	r3, #7
   85902:	d103      	bne.n	8590c <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   85904:	480c      	ldr	r0, [pc, #48]	; (85938 <CAN1_Handler+0xb4>)
   85906:	490f      	ldr	r1, [pc, #60]	; (85944 <CAN1_Handler+0xc0>)
   85908:	4b17      	ldr	r3, [pc, #92]	; (85968 <CAN1_Handler+0xe4>)
   8590a:	4798      	blx	r3

				if (i == 0)
   8590c:	79fb      	ldrb	r3, [r7, #7]
   8590e:	2b00      	cmp	r3, #0
   85910:	d103      	bne.n	8591a <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   85912:	4809      	ldr	r0, [pc, #36]	; (85938 <CAN1_Handler+0xb4>)
   85914:	490b      	ldr	r1, [pc, #44]	; (85944 <CAN1_Handler+0xc0>)
   85916:	4b15      	ldr	r3, [pc, #84]	; (8596c <CAN1_Handler+0xe8>)
   85918:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   8591a:	4807      	ldr	r0, [pc, #28]	; (85938 <CAN1_Handler+0xb4>)
   8591c:	4907      	ldr	r1, [pc, #28]	; (8593c <CAN1_Handler+0xb8>)
   8591e:	4b14      	ldr	r3, [pc, #80]	; (85970 <CAN1_Handler+0xec>)
   85920:	4798      	blx	r3
				break;
   85922:	e005      	b.n	85930 <CAN1_Handler+0xac>
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85924:	79fb      	ldrb	r3, [r7, #7]
   85926:	3301      	adds	r3, #1
   85928:	71fb      	strb	r3, [r7, #7]
   8592a:	79fb      	ldrb	r3, [r7, #7]
   8592c:	2b07      	cmp	r3, #7
   8592e:	d9bb      	bls.n	858a8 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   85930:	3708      	adds	r7, #8
   85932:	46bd      	mov	sp, r7
   85934:	bd80      	pop	{r7, pc}
   85936:	bf00      	nop
   85938:	2007a650 	.word	0x2007a650
   8593c:	2007a68c 	.word	0x2007a68c
   85940:	00085f39 	.word	0x00085f39
   85944:	400b8000 	.word	0x400b8000
   85948:	00081fcd 	.word	0x00081fcd
   8594c:	00082011 	.word	0x00082011
   85950:	00082191 	.word	0x00082191
   85954:	01234567 	.word	0x01234567
   85958:	89abcdef 	.word	0x89abcdef
   8595c:	2007a6e4 	.word	0x2007a6e4
   85960:	00085bd9 	.word	0x00085bd9
   85964:	00085a15 	.word	0x00085a15
   85968:	00085a75 	.word	0x00085a75
   8596c:	00085b39 	.word	0x00085b39
   85970:	00085fa9 	.word	0x00085fa9

00085974 <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   85974:	b580      	push	{r7, lr}
   85976:	b082      	sub	sp, #8
   85978:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   8597a:	481c      	ldr	r0, [pc, #112]	; (859ec <CAN0_Handler+0x78>)
   8597c:	491c      	ldr	r1, [pc, #112]	; (859f0 <CAN0_Handler+0x7c>)
   8597e:	4b1d      	ldr	r3, [pc, #116]	; (859f4 <CAN0_Handler+0x80>)
   85980:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   85982:	481d      	ldr	r0, [pc, #116]	; (859f8 <CAN0_Handler+0x84>)
   85984:	4b1d      	ldr	r3, [pc, #116]	; (859fc <CAN0_Handler+0x88>)
   85986:	4798      	blx	r3
   85988:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8598a:	683b      	ldr	r3, [r7, #0]
   8598c:	b2db      	uxtb	r3, r3
   8598e:	2b00      	cmp	r3, #0
   85990:	d029      	beq.n	859e6 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85992:	2300      	movs	r3, #0
   85994:	71fb      	strb	r3, [r7, #7]
   85996:	e023      	b.n	859e0 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   85998:	79fb      	ldrb	r3, [r7, #7]
   8599a:	4817      	ldr	r0, [pc, #92]	; (859f8 <CAN0_Handler+0x84>)
   8599c:	4619      	mov	r1, r3
   8599e:	4b18      	ldr	r3, [pc, #96]	; (85a00 <CAN0_Handler+0x8c>)
   859a0:	4798      	blx	r3
   859a2:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   859a4:	683b      	ldr	r3, [r7, #0]
   859a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   859aa:	2b00      	cmp	r3, #0
   859ac:	d015      	beq.n	859da <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   859ae:	79fa      	ldrb	r2, [r7, #7]
   859b0:	4b0e      	ldr	r3, [pc, #56]	; (859ec <CAN0_Handler+0x78>)
   859b2:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   859b4:	4b0d      	ldr	r3, [pc, #52]	; (859ec <CAN0_Handler+0x78>)
   859b6:	683a      	ldr	r2, [r7, #0]
   859b8:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   859ba:	480f      	ldr	r0, [pc, #60]	; (859f8 <CAN0_Handler+0x84>)
   859bc:	490b      	ldr	r1, [pc, #44]	; (859ec <CAN0_Handler+0x78>)
   859be:	4b11      	ldr	r3, [pc, #68]	; (85a04 <CAN0_Handler+0x90>)
   859c0:	4798      	blx	r3
				g_ul_recv_status = 1;
   859c2:	4b11      	ldr	r3, [pc, #68]	; (85a08 <CAN0_Handler+0x94>)
   859c4:	2201      	movs	r2, #1
   859c6:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   859c8:	4808      	ldr	r0, [pc, #32]	; (859ec <CAN0_Handler+0x78>)
   859ca:	490b      	ldr	r1, [pc, #44]	; (859f8 <CAN0_Handler+0x84>)
   859cc:	4b0f      	ldr	r3, [pc, #60]	; (85a0c <CAN0_Handler+0x98>)
   859ce:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   859d0:	4806      	ldr	r0, [pc, #24]	; (859ec <CAN0_Handler+0x78>)
   859d2:	4907      	ldr	r1, [pc, #28]	; (859f0 <CAN0_Handler+0x7c>)
   859d4:	4b0e      	ldr	r3, [pc, #56]	; (85a10 <CAN0_Handler+0x9c>)
   859d6:	4798      	blx	r3
				break;
   859d8:	e005      	b.n	859e6 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   859da:	79fb      	ldrb	r3, [r7, #7]
   859dc:	3301      	adds	r3, #1
   859de:	71fb      	strb	r3, [r7, #7]
   859e0:	79fb      	ldrb	r3, [r7, #7]
   859e2:	2b07      	cmp	r3, #7
   859e4:	d9d8      	bls.n	85998 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   859e6:	3708      	adds	r7, #8
   859e8:	46bd      	mov	sp, r7
   859ea:	bd80      	pop	{r7, pc}
   859ec:	2007a6bc 	.word	0x2007a6bc
   859f0:	2007a700 	.word	0x2007a700
   859f4:	00085f39 	.word	0x00085f39
   859f8:	400b4000 	.word	0x400b4000
   859fc:	00081fcd 	.word	0x00081fcd
   85a00:	00082011 	.word	0x00082011
   85a04:	00082191 	.word	0x00082191
   85a08:	2007a63c 	.word	0x2007a63c
   85a0c:	00085a15 	.word	0x00085a15
   85a10:	00085fa9 	.word	0x00085fa9

00085a14 <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   85a14:	b580      	push	{r7, lr}
   85a16:	b086      	sub	sp, #24
   85a18:	af00      	add	r7, sp, #0
   85a1a:	6078      	str	r0, [r7, #4]
   85a1c:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85a1e:	687b      	ldr	r3, [r7, #4]
   85a20:	699b      	ldr	r3, [r3, #24]
   85a22:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85a24:	687b      	ldr	r3, [r7, #4]
   85a26:	69db      	ldr	r3, [r3, #28]
   85a28:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   85a2a:	693b      	ldr	r3, [r7, #16]
   85a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85a30:	0c1b      	lsrs	r3, r3, #16
   85a32:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85a34:	693b      	ldr	r3, [r7, #16]
   85a36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   85a3a:	0a1b      	lsrs	r3, r3, #8
   85a3c:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   85a3e:	7bfb      	ldrb	r3, [r7, #15]
   85a40:	2b02      	cmp	r3, #2
   85a42:	d105      	bne.n	85a50 <debug_can_msg+0x3c>
   85a44:	7bbb      	ldrb	r3, [r7, #14]
   85a46:	2b04      	cmp	r3, #4
   85a48:	d102      	bne.n	85a50 <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   85a4a:	2057      	movs	r0, #87	; 0x57
   85a4c:	4b08      	ldr	r3, [pc, #32]	; (85a70 <debug_can_msg+0x5c>)
   85a4e:	4798      	blx	r3

	if (big_type == MT_HK)
   85a50:	7bfb      	ldrb	r3, [r7, #15]
   85a52:	2b01      	cmp	r3, #1
   85a54:	d102      	bne.n	85a5c <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   85a56:	2055      	movs	r0, #85	; 0x55
   85a58:	4b05      	ldr	r3, [pc, #20]	; (85a70 <debug_can_msg+0x5c>)
   85a5a:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   85a5c:	7bfb      	ldrb	r3, [r7, #15]
   85a5e:	2b00      	cmp	r3, #0
   85a60:	d102      	bne.n	85a68 <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   85a62:	2056      	movs	r0, #86	; 0x56
   85a64:	4b02      	ldr	r3, [pc, #8]	; (85a70 <debug_can_msg+0x5c>)
   85a66:	4798      	blx	r3

	return;
   85a68:	bf00      	nop
}
   85a6a:	3718      	adds	r7, #24
   85a6c:	46bd      	mov	sp, r7
   85a6e:	bd80      	pop	{r7, pc}
   85a70:	00082591 	.word	0x00082591

00085a74 <decode_can_command>:


void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   85a74:	b480      	push	{r7}
   85a76:	b087      	sub	sp, #28
   85a78:	af00      	add	r7, sp, #0
   85a7a:	6078      	str	r0, [r7, #4]
   85a7c:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85a7e:	687b      	ldr	r3, [r7, #4]
   85a80:	699b      	ldr	r3, [r3, #24]
   85a82:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85a84:	687b      	ldr	r3, [r7, #4]
   85a86:	69db      	ldr	r3, [r3, #28]
   85a88:	613b      	str	r3, [r7, #16]
	uint8_t sender, destination, big_type, small_type;

	sender = (uint8_t)(uh_data_incom >> 28);
   85a8a:	693b      	ldr	r3, [r7, #16]
   85a8c:	0f1b      	lsrs	r3, r3, #28
   85a8e:	73fb      	strb	r3, [r7, #15]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   85a90:	693b      	ldr	r3, [r7, #16]
   85a92:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   85a96:	0e1b      	lsrs	r3, r3, #24
   85a98:	73bb      	strb	r3, [r7, #14]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   85a9a:	693b      	ldr	r3, [r7, #16]
   85a9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85aa0:	0c1b      	lsrs	r3, r3, #16
   85aa2:	737b      	strb	r3, [r7, #13]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85aa4:	693b      	ldr	r3, [r7, #16]
   85aa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   85aaa:	0a1b      	lsrs	r3, r3, #8
   85aac:	733b      	strb	r3, [r7, #12]

	if(big_type != MT_COM)
   85aae:	7b7b      	ldrb	r3, [r7, #13]
   85ab0:	2b02      	cmp	r3, #2
   85ab2:	d000      	beq.n	85ab6 <decode_can_command+0x42>
		return;
   85ab4:	e02e      	b.n	85b14 <decode_can_command+0xa0>
	
	switch(small_type)	// FROM WHO
   85ab6:	7b3b      	ldrb	r3, [r7, #12]
   85ab8:	2b06      	cmp	r3, #6
   85aba:	d002      	beq.n	85ac2 <decode_can_command+0x4e>
   85abc:	2b08      	cmp	r3, #8
   85abe:	d014      	beq.n	85aea <decode_can_command+0x76>
				default :
					break;
			}
			break;
		default :
			break;
   85ac0:	e027      	b.n	85b12 <decode_can_command+0x9e>
		return;
	
	switch(small_type)	// FROM WHO
	{
		case ACK_READ:
			switch(destination)
   85ac2:	7bbb      	ldrb	r3, [r7, #14]
   85ac4:	2b04      	cmp	r3, #4
   85ac6:	d000      	beq.n	85aca <decode_can_command+0x56>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   85ac8:	e00e      	b.n	85ae8 <decode_can_command+0x74>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   85aca:	4b15      	ldr	r3, [pc, #84]	; (85b20 <decode_can_command+0xac>)
   85acc:	781b      	ldrb	r3, [r3, #0]
   85ace:	2b00      	cmp	r3, #0
   85ad0:	d009      	beq.n	85ae6 <decode_can_command+0x72>
					{
						hk_read_receivedf = 1;
   85ad2:	4b14      	ldr	r3, [pc, #80]	; (85b24 <decode_can_command+0xb0>)
   85ad4:	2201      	movs	r2, #1
   85ad6:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   85ad8:	4b13      	ldr	r3, [pc, #76]	; (85b28 <decode_can_command+0xb4>)
   85ada:	693a      	ldr	r2, [r7, #16]
   85adc:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   85ade:	4b12      	ldr	r3, [pc, #72]	; (85b28 <decode_can_command+0xb4>)
   85ae0:	697a      	ldr	r2, [r7, #20]
   85ae2:	601a      	str	r2, [r3, #0]
					}
					break;
   85ae4:	e7ff      	b.n	85ae6 <decode_can_command+0x72>
   85ae6:	bf00      	nop
				default :
					break;
			}
			break;
   85ae8:	e013      	b.n	85b12 <decode_can_command+0x9e>
		case ACK_WRITE :
			switch(destination)
   85aea:	7bbb      	ldrb	r3, [r7, #14]
   85aec:	2b04      	cmp	r3, #4
   85aee:	d000      	beq.n	85af2 <decode_can_command+0x7e>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   85af0:	e00e      	b.n	85b10 <decode_can_command+0x9c>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   85af2:	4b0e      	ldr	r3, [pc, #56]	; (85b2c <decode_can_command+0xb8>)
   85af4:	781b      	ldrb	r3, [r3, #0]
   85af6:	2b00      	cmp	r3, #0
   85af8:	d009      	beq.n	85b0e <decode_can_command+0x9a>
					{
						hk_write_receivedf = 1;
   85afa:	4b0d      	ldr	r3, [pc, #52]	; (85b30 <decode_can_command+0xbc>)
   85afc:	2201      	movs	r2, #1
   85afe:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   85b00:	4b0c      	ldr	r3, [pc, #48]	; (85b34 <decode_can_command+0xc0>)
   85b02:	693a      	ldr	r2, [r7, #16]
   85b04:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   85b06:	4b0b      	ldr	r3, [pc, #44]	; (85b34 <decode_can_command+0xc0>)
   85b08:	697a      	ldr	r2, [r7, #20]
   85b0a:	601a      	str	r2, [r3, #0]
					}
					break;
   85b0c:	e7ff      	b.n	85b0e <decode_can_command+0x9a>
   85b0e:	bf00      	nop
				default :
					break;
			}
			break;
   85b10:	bf00      	nop
		default :
			break;
	}
	return;
   85b12:	bf00      	nop
}
   85b14:	371c      	adds	r7, #28
   85b16:	46bd      	mov	sp, r7
   85b18:	f85d 7b04 	ldr.w	r7, [sp], #4
   85b1c:	4770      	bx	lr
   85b1e:	bf00      	nop
   85b20:	2007a6e8 	.word	0x2007a6e8
   85b24:	2007a64c 	.word	0x2007a64c
   85b28:	2007a680 	.word	0x2007a680
   85b2c:	2007a6b0 	.word	0x2007a6b0
   85b30:	2007a67d 	.word	0x2007a67d
   85b34:	2007a6b4 	.word	0x2007a6b4

00085b38 <alert_can_data>:

void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   85b38:	b480      	push	{r7}
   85b3a:	b087      	sub	sp, #28
   85b3c:	af00      	add	r7, sp, #0
   85b3e:	6078      	str	r0, [r7, #4]
   85b40:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85b42:	687b      	ldr	r3, [r7, #4]
   85b44:	69db      	ldr	r3, [r3, #28]
   85b46:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85b48:	687b      	ldr	r3, [r7, #4]
   85b4a:	699b      	ldr	r3, [r3, #24]
   85b4c:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   85b4e:	697b      	ldr	r3, [r7, #20]
   85b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85b54:	0c1b      	lsrs	r3, r3, #16
   85b56:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85b58:	697b      	ldr	r3, [r7, #20]
   85b5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   85b5e:	0a1b      	lsrs	r3, r3, #8
   85b60:	73bb      	strb	r3, [r7, #14]

	if(big_type != MT_DATA)
   85b62:	7bfb      	ldrb	r3, [r7, #15]
   85b64:	2b00      	cmp	r3, #0
   85b66:	d000      	beq.n	85b6a <alert_can_data+0x32>
		return;
   85b68:	e028      	b.n	85bbc <alert_can_data+0x84>

	switch(small_type)
   85b6a:	7bbb      	ldrb	r3, [r7, #14]
   85b6c:	3b01      	subs	r3, #1
   85b6e:	2b03      	cmp	r3, #3
   85b70:	d822      	bhi.n	85bb8 <alert_can_data+0x80>
   85b72:	a201      	add	r2, pc, #4	; (adr r2, 85b78 <alert_can_data+0x40>)
   85b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85b78:	00085b89 	.word	0x00085b89
   85b7c:	00085b8f 	.word	0x00085b8f
   85b80:	00085b95 	.word	0x00085b95
   85b84:	00085ba7 	.word	0x00085ba7
	{
		case SPI_TEMP1:
			glob_drf = 1;
   85b88:	4b0f      	ldr	r3, [pc, #60]	; (85bc8 <alert_can_data+0x90>)
   85b8a:	2201      	movs	r2, #1
   85b8c:	701a      	strb	r2, [r3, #0]
		case COMS_PACKET:
			glob_comsf = 1;
   85b8e:	4b0f      	ldr	r3, [pc, #60]	; (85bcc <alert_can_data+0x94>)
   85b90:	2201      	movs	r2, #1
   85b92:	701a      	strb	r2, [r3, #0]
		case BATT_TOP :
			eps_data_receivedf = 1;
   85b94:	4b0e      	ldr	r3, [pc, #56]	; (85bd0 <alert_can_data+0x98>)
   85b96:	2201      	movs	r2, #1
   85b98:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   85b9a:	4b0e      	ldr	r3, [pc, #56]	; (85bd4 <alert_can_data+0x9c>)
   85b9c:	697a      	ldr	r2, [r7, #20]
   85b9e:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   85ba0:	4b0c      	ldr	r3, [pc, #48]	; (85bd4 <alert_can_data+0x9c>)
   85ba2:	693a      	ldr	r2, [r7, #16]
   85ba4:	601a      	str	r2, [r3, #0]
		case BATT_BOTTOM :
			eps_data_receivedf = 1;
   85ba6:	4b0a      	ldr	r3, [pc, #40]	; (85bd0 <alert_can_data+0x98>)
   85ba8:	2201      	movs	r2, #1
   85baa:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   85bac:	4b09      	ldr	r3, [pc, #36]	; (85bd4 <alert_can_data+0x9c>)
   85bae:	697a      	ldr	r2, [r7, #20]
   85bb0:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   85bb2:	4b08      	ldr	r3, [pc, #32]	; (85bd4 <alert_can_data+0x9c>)
   85bb4:	693a      	ldr	r2, [r7, #16]
   85bb6:	601a      	str	r2, [r3, #0]
		default :
			break;
   85bb8:	bf00      	nop
	}

	return;
   85bba:	bf00      	nop
}
   85bbc:	371c      	adds	r7, #28
   85bbe:	46bd      	mov	sp, r7
   85bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   85bc4:	4770      	bx	lr
   85bc6:	bf00      	nop
   85bc8:	2007a670 	.word	0x2007a670
   85bcc:	2007a67c 	.word	0x2007a67c
   85bd0:	2007a6f0 	.word	0x2007a6f0
   85bd4:	2007a6dc 	.word	0x2007a6dc

00085bd8 <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   85bd8:	b590      	push	{r4, r7, lr}
   85bda:	b087      	sub	sp, #28
   85bdc:	af00      	add	r7, sp, #0
   85bde:	6078      	str	r0, [r7, #4]
   85be0:	460b      	mov	r3, r1
   85be2:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85be4:	687b      	ldr	r3, [r7, #4]
   85be6:	699b      	ldr	r3, [r3, #24]
   85be8:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85bea:	687b      	ldr	r3, [r7, #4]
   85bec:	69db      	ldr	r3, [r3, #28]
   85bee:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   85bf0:	78fb      	ldrb	r3, [r7, #3]
   85bf2:	2b07      	cmp	r3, #7
   85bf4:	d873      	bhi.n	85cde <store_can_msg+0x106>
   85bf6:	a201      	add	r2, pc, #4	; (adr r2, 85bfc <store_can_msg+0x24>)
   85bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85bfc:	00085c1d 	.word	0x00085c1d
   85c00:	00085cdf 	.word	0x00085cdf
   85c04:	00085cdf 	.word	0x00085cdf
   85c08:	00085cdf 	.word	0x00085cdf
   85c0c:	00085cdf 	.word	0x00085cdf
   85c10:	00085c4d 	.word	0x00085c4d
   85c14:	00085c7d 	.word	0x00085c7d
   85c18:	00085cad 	.word	0x00085cad
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   85c1c:	4b32      	ldr	r3, [pc, #200]	; (85ce8 <store_can_msg+0x110>)
   85c1e:	6819      	ldr	r1, [r3, #0]
   85c20:	f107 0214 	add.w	r2, r7, #20
   85c24:	f107 030c 	add.w	r3, r7, #12
   85c28:	4608      	mov	r0, r1
   85c2a:	4611      	mov	r1, r2
   85c2c:	461a      	mov	r2, r3
   85c2e:	2300      	movs	r3, #0
   85c30:	4c2e      	ldr	r4, [pc, #184]	; (85cec <store_can_msg+0x114>)
   85c32:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   85c34:	4b2c      	ldr	r3, [pc, #176]	; (85ce8 <store_can_msg+0x110>)
   85c36:	6819      	ldr	r1, [r3, #0]
   85c38:	f107 0210 	add.w	r2, r7, #16
   85c3c:	f107 030c 	add.w	r3, r7, #12
   85c40:	4608      	mov	r0, r1
   85c42:	4611      	mov	r1, r2
   85c44:	461a      	mov	r2, r3
   85c46:	2300      	movs	r3, #0
   85c48:	4c28      	ldr	r4, [pc, #160]	; (85cec <store_can_msg+0x114>)
   85c4a:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   85c4c:	4b28      	ldr	r3, [pc, #160]	; (85cf0 <store_can_msg+0x118>)
   85c4e:	6819      	ldr	r1, [r3, #0]
   85c50:	f107 0214 	add.w	r2, r7, #20
   85c54:	f107 030c 	add.w	r3, r7, #12
   85c58:	4608      	mov	r0, r1
   85c5a:	4611      	mov	r1, r2
   85c5c:	461a      	mov	r2, r3
   85c5e:	2300      	movs	r3, #0
   85c60:	4c22      	ldr	r4, [pc, #136]	; (85cec <store_can_msg+0x114>)
   85c62:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   85c64:	4b22      	ldr	r3, [pc, #136]	; (85cf0 <store_can_msg+0x118>)
   85c66:	6819      	ldr	r1, [r3, #0]
   85c68:	f107 0210 	add.w	r2, r7, #16
   85c6c:	f107 030c 	add.w	r3, r7, #12
   85c70:	4608      	mov	r0, r1
   85c72:	4611      	mov	r1, r2
   85c74:	461a      	mov	r2, r3
   85c76:	2300      	movs	r3, #0
   85c78:	4c1c      	ldr	r4, [pc, #112]	; (85cec <store_can_msg+0x114>)
   85c7a:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   85c7c:	4b1d      	ldr	r3, [pc, #116]	; (85cf4 <store_can_msg+0x11c>)
   85c7e:	6819      	ldr	r1, [r3, #0]
   85c80:	f107 0214 	add.w	r2, r7, #20
   85c84:	f107 030c 	add.w	r3, r7, #12
   85c88:	4608      	mov	r0, r1
   85c8a:	4611      	mov	r1, r2
   85c8c:	461a      	mov	r2, r3
   85c8e:	2300      	movs	r3, #0
   85c90:	4c16      	ldr	r4, [pc, #88]	; (85cec <store_can_msg+0x114>)
   85c92:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   85c94:	4b17      	ldr	r3, [pc, #92]	; (85cf4 <store_can_msg+0x11c>)
   85c96:	6819      	ldr	r1, [r3, #0]
   85c98:	f107 0210 	add.w	r2, r7, #16
   85c9c:	f107 030c 	add.w	r3, r7, #12
   85ca0:	4608      	mov	r0, r1
   85ca2:	4611      	mov	r1, r2
   85ca4:	461a      	mov	r2, r3
   85ca6:	2300      	movs	r3, #0
   85ca8:	4c10      	ldr	r4, [pc, #64]	; (85cec <store_can_msg+0x114>)
   85caa:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   85cac:	4b12      	ldr	r3, [pc, #72]	; (85cf8 <store_can_msg+0x120>)
   85cae:	6819      	ldr	r1, [r3, #0]
   85cb0:	f107 0214 	add.w	r2, r7, #20
   85cb4:	f107 030c 	add.w	r3, r7, #12
   85cb8:	4608      	mov	r0, r1
   85cba:	4611      	mov	r1, r2
   85cbc:	461a      	mov	r2, r3
   85cbe:	2300      	movs	r3, #0
   85cc0:	4c0a      	ldr	r4, [pc, #40]	; (85cec <store_can_msg+0x114>)
   85cc2:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   85cc4:	4b0c      	ldr	r3, [pc, #48]	; (85cf8 <store_can_msg+0x120>)
   85cc6:	6819      	ldr	r1, [r3, #0]
   85cc8:	f107 0210 	add.w	r2, r7, #16
   85ccc:	f107 030c 	add.w	r3, r7, #12
   85cd0:	4608      	mov	r0, r1
   85cd2:	4611      	mov	r1, r2
   85cd4:	461a      	mov	r2, r3
   85cd6:	2300      	movs	r3, #0
   85cd8:	4c04      	ldr	r4, [pc, #16]	; (85cec <store_can_msg+0x114>)
   85cda:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   85cdc:	bf00      	nop
   85cde:	bf00      	nop
	}
	return;
}
   85ce0:	371c      	adds	r7, #28
   85ce2:	46bd      	mov	sp, r7
   85ce4:	bd90      	pop	{r4, r7, pc}
   85ce6:	bf00      	nop
   85ce8:	2007a688 	.word	0x2007a688
   85cec:	00083d4d 	.word	0x00083d4d
   85cf0:	2007a6fc 	.word	0x2007a6fc
   85cf4:	2007a640 	.word	0x2007a640
   85cf8:	2007a6ec 	.word	0x2007a6ec

00085cfc <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85cfc:	b480      	push	{r7}
   85cfe:	b083      	sub	sp, #12
   85d00:	af00      	add	r7, sp, #0
   85d02:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   85d04:	687b      	ldr	r3, [r7, #4]
   85d06:	2200      	movs	r2, #0
   85d08:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   85d0a:	687b      	ldr	r3, [r7, #4]
   85d0c:	2200      	movs	r2, #0
   85d0e:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   85d10:	687b      	ldr	r3, [r7, #4]
   85d12:	2200      	movs	r2, #0
   85d14:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   85d16:	687b      	ldr	r3, [r7, #4]
   85d18:	2200      	movs	r2, #0
   85d1a:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   85d1c:	687b      	ldr	r3, [r7, #4]
   85d1e:	2200      	movs	r2, #0
   85d20:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   85d22:	687b      	ldr	r3, [r7, #4]
   85d24:	2200      	movs	r2, #0
   85d26:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   85d28:	687b      	ldr	r3, [r7, #4]
   85d2a:	2200      	movs	r2, #0
   85d2c:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   85d2e:	687b      	ldr	r3, [r7, #4]
   85d30:	2200      	movs	r2, #0
   85d32:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   85d34:	687b      	ldr	r3, [r7, #4]
   85d36:	2200      	movs	r2, #0
   85d38:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   85d3a:	687b      	ldr	r3, [r7, #4]
   85d3c:	2200      	movs	r2, #0
   85d3e:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   85d40:	687b      	ldr	r3, [r7, #4]
   85d42:	2200      	movs	r2, #0
   85d44:	61da      	str	r2, [r3, #28]
}
   85d46:	370c      	adds	r7, #12
   85d48:	46bd      	mov	sp, r7
   85d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   85d4e:	4770      	bx	lr

00085d50 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   85d50:	b580      	push	{r7, lr}
   85d52:	b08c      	sub	sp, #48	; 0x30
   85d54:	af00      	add	r7, sp, #0
   85d56:	60f8      	str	r0, [r7, #12]
   85d58:	60b9      	str	r1, [r7, #8]
   85d5a:	607a      	str	r2, [r7, #4]
   85d5c:	603b      	str	r3, [r7, #0]
	can_temp_t temp_mailbox;
	//save_can_object(&can0_mailbox, &temp_mailbox);
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85d5e:	4819      	ldr	r0, [pc, #100]	; (85dc4 <send_can_command+0x74>)
   85d60:	4b19      	ldr	r3, [pc, #100]	; (85dc8 <send_can_command+0x78>)
   85d62:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85d64:	4b17      	ldr	r3, [pc, #92]	; (85dc4 <send_can_command+0x74>)
   85d66:	2207      	movs	r2, #7
   85d68:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85d6a:	4b16      	ldr	r3, [pc, #88]	; (85dc4 <send_can_command+0x74>)
   85d6c:	2203      	movs	r2, #3
   85d6e:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   85d70:	683b      	ldr	r3, [r7, #0]
   85d72:	b2da      	uxtb	r2, r3
   85d74:	4b13      	ldr	r3, [pc, #76]	; (85dc4 <send_can_command+0x74>)
   85d76:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85d78:	4b12      	ldr	r3, [pc, #72]	; (85dc4 <send_can_command+0x74>)
   85d7a:	2200      	movs	r2, #0
   85d7c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85d7e:	4b11      	ldr	r3, [pc, #68]	; (85dc4 <send_can_command+0x74>)
   85d80:	2200      	movs	r2, #0
   85d82:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85d84:	4811      	ldr	r0, [pc, #68]	; (85dcc <send_can_command+0x7c>)
   85d86:	490f      	ldr	r1, [pc, #60]	; (85dc4 <send_can_command+0x74>)
   85d88:	4b11      	ldr	r3, [pc, #68]	; (85dd0 <send_can_command+0x80>)
   85d8a:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85d8c:	687b      	ldr	r3, [r7, #4]
   85d8e:	049a      	lsls	r2, r3, #18
   85d90:	4b10      	ldr	r3, [pc, #64]	; (85dd4 <send_can_command+0x84>)
   85d92:	4013      	ands	r3, r2
   85d94:	4a0b      	ldr	r2, [pc, #44]	; (85dc4 <send_can_command+0x74>)
   85d96:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   85d98:	4b0a      	ldr	r3, [pc, #40]	; (85dc4 <send_can_command+0x74>)
   85d9a:	68fa      	ldr	r2, [r7, #12]
   85d9c:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85d9e:	4b09      	ldr	r3, [pc, #36]	; (85dc4 <send_can_command+0x74>)
   85da0:	68ba      	ldr	r2, [r7, #8]
   85da2:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85da4:	4b07      	ldr	r3, [pc, #28]	; (85dc4 <send_can_command+0x74>)
   85da6:	2208      	movs	r2, #8
   85da8:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85daa:	4808      	ldr	r0, [pc, #32]	; (85dcc <send_can_command+0x7c>)
   85dac:	4905      	ldr	r1, [pc, #20]	; (85dc4 <send_can_command+0x74>)
   85dae:	4b0a      	ldr	r3, [pc, #40]	; (85dd8 <send_can_command+0x88>)
   85db0:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   85db2:	4806      	ldr	r0, [pc, #24]	; (85dcc <send_can_command+0x7c>)
   85db4:	2180      	movs	r1, #128	; 0x80
   85db6:	4b09      	ldr	r3, [pc, #36]	; (85ddc <send_can_command+0x8c>)
   85db8:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	//restore_can_object(&can0_mailbox, &temp_mailbox);
	
	return 1;
   85dba:	2301      	movs	r3, #1
}
   85dbc:	4618      	mov	r0, r3
   85dbe:	3730      	adds	r7, #48	; 0x30
   85dc0:	46bd      	mov	sp, r7
   85dc2:	bd80      	pop	{r7, pc}
   85dc4:	2007a6bc 	.word	0x2007a6bc
   85dc8:	00085cfd 	.word	0x00085cfd
   85dcc:	400b4000 	.word	0x400b4000
   85dd0:	00082071 	.word	0x00082071
   85dd4:	1ffc0000 	.word	0x1ffc0000
   85dd8:	00082255 	.word	0x00082255
   85ddc:	00081fe5 	.word	0x00081fe5

00085de0 <read_can_data>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85de0:	b590      	push	{r4, r7, lr}
   85de2:	b085      	sub	sp, #20
   85de4:	af00      	add	r7, sp, #0
   85de6:	60f8      	str	r0, [r7, #12]
   85de8:	60b9      	str	r1, [r7, #8]
   85dea:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85dec:	687a      	ldr	r2, [r7, #4]
   85dee:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85df2:	429a      	cmp	r2, r3
   85df4:	d111      	bne.n	85e1a <read_can_data+0x3a>
	{
		xQueueReceive(can_data_fifo, message_low, (TickType_t) 1);
   85df6:	4b0b      	ldr	r3, [pc, #44]	; (85e24 <read_can_data+0x44>)
   85df8:	681b      	ldr	r3, [r3, #0]
   85dfa:	4618      	mov	r0, r3
   85dfc:	68b9      	ldr	r1, [r7, #8]
   85dfe:	2201      	movs	r2, #1
   85e00:	2300      	movs	r3, #0
   85e02:	4c09      	ldr	r4, [pc, #36]	; (85e28 <read_can_data+0x48>)
   85e04:	47a0      	blx	r4
		xQueueReceive(can_data_fifo, message_high, (TickType_t) 1);
   85e06:	4b07      	ldr	r3, [pc, #28]	; (85e24 <read_can_data+0x44>)
   85e08:	681b      	ldr	r3, [r3, #0]
   85e0a:	4618      	mov	r0, r3
   85e0c:	68f9      	ldr	r1, [r7, #12]
   85e0e:	2201      	movs	r2, #1
   85e10:	2300      	movs	r3, #0
   85e12:	4c05      	ldr	r4, [pc, #20]	; (85e28 <read_can_data+0x48>)
   85e14:	47a0      	blx	r4
		return 1;
   85e16:	2301      	movs	r3, #1
   85e18:	e000      	b.n	85e1c <read_can_data+0x3c>
	}

	return 0;
   85e1a:	2300      	movs	r3, #0
}
   85e1c:	4618      	mov	r0, r3
   85e1e:	3714      	adds	r7, #20
   85e20:	46bd      	mov	sp, r7
   85e22:	bd90      	pop	{r4, r7, pc}
   85e24:	2007a688 	.word	0x2007a688
   85e28:	00083e49 	.word	0x00083e49

00085e2c <read_can_msg>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85e2c:	b590      	push	{r4, r7, lr}
   85e2e:	b085      	sub	sp, #20
   85e30:	af00      	add	r7, sp, #0
   85e32:	60f8      	str	r0, [r7, #12]
   85e34:	60b9      	str	r1, [r7, #8]
   85e36:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85e38:	687a      	ldr	r2, [r7, #4]
   85e3a:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85e3e:	429a      	cmp	r2, r3
   85e40:	d111      	bne.n	85e66 <read_can_msg+0x3a>
	{
		xQueueReceive(can_msg_fifo, message_low, (TickType_t) 1);
   85e42:	4b0b      	ldr	r3, [pc, #44]	; (85e70 <read_can_msg+0x44>)
   85e44:	681b      	ldr	r3, [r3, #0]
   85e46:	4618      	mov	r0, r3
   85e48:	68b9      	ldr	r1, [r7, #8]
   85e4a:	2201      	movs	r2, #1
   85e4c:	2300      	movs	r3, #0
   85e4e:	4c09      	ldr	r4, [pc, #36]	; (85e74 <read_can_msg+0x48>)
   85e50:	47a0      	blx	r4
		xQueueReceive(can_msg_fifo, message_high, (TickType_t) 1);
   85e52:	4b07      	ldr	r3, [pc, #28]	; (85e70 <read_can_msg+0x44>)
   85e54:	681b      	ldr	r3, [r3, #0]
   85e56:	4618      	mov	r0, r3
   85e58:	68f9      	ldr	r1, [r7, #12]
   85e5a:	2201      	movs	r2, #1
   85e5c:	2300      	movs	r3, #0
   85e5e:	4c05      	ldr	r4, [pc, #20]	; (85e74 <read_can_msg+0x48>)
   85e60:	47a0      	blx	r4
		return 1;
   85e62:	2301      	movs	r3, #1
   85e64:	e000      	b.n	85e68 <read_can_msg+0x3c>
	}

	return 0;
   85e66:	2300      	movs	r3, #0
}
   85e68:	4618      	mov	r0, r3
   85e6a:	3714      	adds	r7, #20
   85e6c:	46bd      	mov	sp, r7
   85e6e:	bd90      	pop	{r4, r7, pc}
   85e70:	2007a6fc 	.word	0x2007a6fc
   85e74:	00083e49 	.word	0x00083e49

00085e78 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   85e78:	b580      	push	{r7, lr}
   85e7a:	b08c      	sub	sp, #48	; 0x30
   85e7c:	af00      	add	r7, sp, #0
   85e7e:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	uint32_t high;
	uint8_t dest = (uint8_t)ID;
   85e80:	687b      	ldr	r3, [r7, #4]
   85e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	save_can_object(&can0_mailbox, &temp_mailbox);
   85e86:	f107 0308 	add.w	r3, r7, #8
   85e8a:	4821      	ldr	r0, [pc, #132]	; (85f10 <request_housekeeping+0x98>)
   85e8c:	4619      	mov	r1, r3
   85e8e:	4b21      	ldr	r3, [pc, #132]	; (85f14 <request_housekeeping+0x9c>)
   85e90:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85e92:	481f      	ldr	r0, [pc, #124]	; (85f10 <request_housekeeping+0x98>)
   85e94:	4b20      	ldr	r3, [pc, #128]	; (85f18 <request_housekeeping+0xa0>)
   85e96:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85e98:	4b1d      	ldr	r3, [pc, #116]	; (85f10 <request_housekeeping+0x98>)
   85e9a:	2206      	movs	r2, #6
   85e9c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85e9e:	4b1c      	ldr	r3, [pc, #112]	; (85f10 <request_housekeeping+0x98>)
   85ea0:	2203      	movs	r2, #3
   85ea2:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85ea4:	4b1a      	ldr	r3, [pc, #104]	; (85f10 <request_housekeeping+0x98>)
   85ea6:	2214      	movs	r2, #20
   85ea8:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85eaa:	4b19      	ldr	r3, [pc, #100]	; (85f10 <request_housekeeping+0x98>)
   85eac:	2200      	movs	r2, #0
   85eae:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85eb0:	4b17      	ldr	r3, [pc, #92]	; (85f10 <request_housekeeping+0x98>)
   85eb2:	2200      	movs	r2, #0
   85eb4:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85eb6:	4819      	ldr	r0, [pc, #100]	; (85f1c <request_housekeeping+0xa4>)
   85eb8:	4915      	ldr	r1, [pc, #84]	; (85f10 <request_housekeeping+0x98>)
   85eba:	4b19      	ldr	r3, [pc, #100]	; (85f20 <request_housekeeping+0xa8>)
   85ebc:	4798      	blx	r3
	
	high = high_command_generator(HK_TASK_ID, MT_COM, REQ_HK);
   85ebe:	2004      	movs	r0, #4
   85ec0:	2102      	movs	r1, #2
   85ec2:	2203      	movs	r2, #3
   85ec4:	4b17      	ldr	r3, [pc, #92]	; (85f24 <request_housekeeping+0xac>)
   85ec6:	4798      	blx	r3
   85ec8:	62b8      	str	r0, [r7, #40]	; 0x28

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85eca:	687b      	ldr	r3, [r7, #4]
   85ecc:	049a      	lsls	r2, r3, #18
   85ece:	4b16      	ldr	r3, [pc, #88]	; (85f28 <request_housekeeping+0xb0>)
   85ed0:	4013      	ands	r3, r2
   85ed2:	4a0f      	ldr	r2, [pc, #60]	; (85f10 <request_housekeeping+0x98>)
   85ed4:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = 0x00;				// shifted over to the standard frame position.
   85ed6:	4b0e      	ldr	r3, [pc, #56]	; (85f10 <request_housekeeping+0x98>)
   85ed8:	2200      	movs	r2, #0
   85eda:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85edc:	4b0c      	ldr	r3, [pc, #48]	; (85f10 <request_housekeeping+0x98>)
   85ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85ee0:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85ee2:	4b0b      	ldr	r3, [pc, #44]	; (85f10 <request_housekeeping+0x98>)
   85ee4:	2208      	movs	r2, #8
   85ee6:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85ee8:	480c      	ldr	r0, [pc, #48]	; (85f1c <request_housekeeping+0xa4>)
   85eea:	4909      	ldr	r1, [pc, #36]	; (85f10 <request_housekeeping+0x98>)
   85eec:	4b0f      	ldr	r3, [pc, #60]	; (85f2c <request_housekeeping+0xb4>)
   85eee:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   85ef0:	480a      	ldr	r0, [pc, #40]	; (85f1c <request_housekeeping+0xa4>)
   85ef2:	2140      	movs	r1, #64	; 0x40
   85ef4:	4b0e      	ldr	r3, [pc, #56]	; (85f30 <request_housekeeping+0xb8>)
   85ef6:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   85ef8:	f107 0308 	add.w	r3, r7, #8
   85efc:	4804      	ldr	r0, [pc, #16]	; (85f10 <request_housekeeping+0x98>)
   85efe:	4619      	mov	r1, r3
   85f00:	4b0c      	ldr	r3, [pc, #48]	; (85f34 <request_housekeeping+0xbc>)
   85f02:	4798      	blx	r3
		
	return 1;
   85f04:	2301      	movs	r3, #1
}
   85f06:	4618      	mov	r0, r3
   85f08:	3730      	adds	r7, #48	; 0x30
   85f0a:	46bd      	mov	sp, r7
   85f0c:	bd80      	pop	{r7, pc}
   85f0e:	bf00      	nop
   85f10:	2007a6bc 	.word	0x2007a6bc
   85f14:	00085f39 	.word	0x00085f39
   85f18:	00085cfd 	.word	0x00085cfd
   85f1c:	400b4000 	.word	0x400b4000
   85f20:	00082071 	.word	0x00082071
   85f24:	0008633d 	.word	0x0008633d
   85f28:	1ffc0000 	.word	0x1ffc0000
   85f2c:	00082255 	.word	0x00082255
   85f30:	00081fe5 	.word	0x00081fe5
   85f34:	00085fa9 	.word	0x00085fa9

00085f38 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85f38:	b480      	push	{r7}
   85f3a:	b083      	sub	sp, #12
   85f3c:	af00      	add	r7, sp, #0
   85f3e:	6078      	str	r0, [r7, #4]
   85f40:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   85f42:	687b      	ldr	r3, [r7, #4]
   85f44:	681a      	ldr	r2, [r3, #0]
   85f46:	683b      	ldr	r3, [r7, #0]
   85f48:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   85f4a:	687b      	ldr	r3, [r7, #4]
   85f4c:	791a      	ldrb	r2, [r3, #4]
   85f4e:	683b      	ldr	r3, [r7, #0]
   85f50:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   85f52:	687b      	ldr	r3, [r7, #4]
   85f54:	795a      	ldrb	r2, [r3, #5]
   85f56:	683b      	ldr	r3, [r7, #0]
   85f58:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   85f5a:	687b      	ldr	r3, [r7, #4]
   85f5c:	799a      	ldrb	r2, [r3, #6]
   85f5e:	683b      	ldr	r3, [r7, #0]
   85f60:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   85f62:	687b      	ldr	r3, [r7, #4]
   85f64:	79da      	ldrb	r2, [r3, #7]
   85f66:	683b      	ldr	r3, [r7, #0]
   85f68:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   85f6a:	687b      	ldr	r3, [r7, #4]
   85f6c:	689a      	ldr	r2, [r3, #8]
   85f6e:	683b      	ldr	r3, [r7, #0]
   85f70:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   85f72:	687b      	ldr	r3, [r7, #4]
   85f74:	68da      	ldr	r2, [r3, #12]
   85f76:	683b      	ldr	r3, [r7, #0]
   85f78:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   85f7a:	687b      	ldr	r3, [r7, #4]
   85f7c:	691a      	ldr	r2, [r3, #16]
   85f7e:	683b      	ldr	r3, [r7, #0]
   85f80:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   85f82:	687b      	ldr	r3, [r7, #4]
   85f84:	695a      	ldr	r2, [r3, #20]
   85f86:	683b      	ldr	r3, [r7, #0]
   85f88:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   85f8a:	687b      	ldr	r3, [r7, #4]
   85f8c:	699a      	ldr	r2, [r3, #24]
   85f8e:	683b      	ldr	r3, [r7, #0]
   85f90:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   85f92:	687b      	ldr	r3, [r7, #4]
   85f94:	69da      	ldr	r2, [r3, #28]
   85f96:	683b      	ldr	r3, [r7, #0]
   85f98:	61da      	str	r2, [r3, #28]
	
	return;
   85f9a:	bf00      	nop
}
   85f9c:	370c      	adds	r7, #12
   85f9e:	46bd      	mov	sp, r7
   85fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
   85fa4:	4770      	bx	lr
   85fa6:	bf00      	nop

00085fa8 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85fa8:	b480      	push	{r7}
   85faa:	b083      	sub	sp, #12
   85fac:	af00      	add	r7, sp, #0
   85fae:	6078      	str	r0, [r7, #4]
   85fb0:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   85fb2:	683b      	ldr	r3, [r7, #0]
   85fb4:	681a      	ldr	r2, [r3, #0]
   85fb6:	687b      	ldr	r3, [r7, #4]
   85fb8:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   85fba:	683b      	ldr	r3, [r7, #0]
   85fbc:	791a      	ldrb	r2, [r3, #4]
   85fbe:	687b      	ldr	r3, [r7, #4]
   85fc0:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   85fc2:	683b      	ldr	r3, [r7, #0]
   85fc4:	795a      	ldrb	r2, [r3, #5]
   85fc6:	687b      	ldr	r3, [r7, #4]
   85fc8:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   85fca:	683b      	ldr	r3, [r7, #0]
   85fcc:	799a      	ldrb	r2, [r3, #6]
   85fce:	687b      	ldr	r3, [r7, #4]
   85fd0:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   85fd2:	683b      	ldr	r3, [r7, #0]
   85fd4:	79da      	ldrb	r2, [r3, #7]
   85fd6:	687b      	ldr	r3, [r7, #4]
   85fd8:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   85fda:	683b      	ldr	r3, [r7, #0]
   85fdc:	689a      	ldr	r2, [r3, #8]
   85fde:	687b      	ldr	r3, [r7, #4]
   85fe0:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   85fe2:	683b      	ldr	r3, [r7, #0]
   85fe4:	68da      	ldr	r2, [r3, #12]
   85fe6:	687b      	ldr	r3, [r7, #4]
   85fe8:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85fea:	683b      	ldr	r3, [r7, #0]
   85fec:	691a      	ldr	r2, [r3, #16]
   85fee:	687b      	ldr	r3, [r7, #4]
   85ff0:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   85ff2:	683b      	ldr	r3, [r7, #0]
   85ff4:	695a      	ldr	r2, [r3, #20]
   85ff6:	687b      	ldr	r3, [r7, #4]
   85ff8:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   85ffa:	683b      	ldr	r3, [r7, #0]
   85ffc:	699a      	ldr	r2, [r3, #24]
   85ffe:	687b      	ldr	r3, [r7, #4]
   86000:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   86002:	683b      	ldr	r3, [r7, #0]
   86004:	69da      	ldr	r2, [r3, #28]
   86006:	687b      	ldr	r3, [r7, #4]
   86008:	61da      	str	r2, [r3, #28]
	
	return;
   8600a:	bf00      	nop
}
   8600c:	370c      	adds	r7, #12
   8600e:	46bd      	mov	sp, r7
   86010:	f85d 7b04 	ldr.w	r7, [sp], #4
   86014:	4770      	bx	lr
   86016:	bf00      	nop

00086018 <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   86018:	b580      	push	{r7, lr}
   8601a:	b086      	sub	sp, #24
   8601c:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   8601e:	2301      	movs	r3, #1
   86020:	613b      	str	r3, [r7, #16]
   86022:	2300      	movs	r3, #0
   86024:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   86026:	4853      	ldr	r0, [pc, #332]	; (86174 <can_initialize+0x15c>)
   86028:	2134      	movs	r1, #52	; 0x34
   8602a:	4b53      	ldr	r3, [pc, #332]	; (86178 <can_initialize+0x160>)
   8602c:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   8602e:	4851      	ldr	r0, [pc, #324]	; (86174 <can_initialize+0x15c>)
   86030:	2135      	movs	r1, #53	; 0x35
   86032:	4b52      	ldr	r3, [pc, #328]	; (8617c <can_initialize+0x164>)
   86034:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   86036:	484f      	ldr	r0, [pc, #316]	; (86174 <can_initialize+0x15c>)
   86038:	4b51      	ldr	r3, [pc, #324]	; (86180 <can_initialize+0x168>)
   8603a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   8603c:	484d      	ldr	r0, [pc, #308]	; (86174 <can_initialize+0x15c>)
   8603e:	4b51      	ldr	r3, [pc, #324]	; (86184 <can_initialize+0x16c>)
   86040:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   86042:	4851      	ldr	r0, [pc, #324]	; (86188 <can_initialize+0x170>)
   86044:	218f      	movs	r1, #143	; 0x8f
   86046:	4b4c      	ldr	r3, [pc, #304]	; (86178 <can_initialize+0x160>)
   86048:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   8604a:	484f      	ldr	r0, [pc, #316]	; (86188 <can_initialize+0x170>)
   8604c:	2190      	movs	r1, #144	; 0x90
   8604e:	4b4b      	ldr	r3, [pc, #300]	; (8617c <can_initialize+0x164>)
   86050:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   86052:	484d      	ldr	r0, [pc, #308]	; (86188 <can_initialize+0x170>)
   86054:	4b4a      	ldr	r3, [pc, #296]	; (86180 <can_initialize+0x168>)
   86056:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   86058:	484b      	ldr	r0, [pc, #300]	; (86188 <can_initialize+0x170>)
   8605a:	4b4a      	ldr	r3, [pc, #296]	; (86184 <can_initialize+0x16c>)
   8605c:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8605e:	202b      	movs	r0, #43	; 0x2b
   86060:	4b4a      	ldr	r3, [pc, #296]	; (8618c <can_initialize+0x174>)
   86062:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   86064:	202c      	movs	r0, #44	; 0x2c
   86066:	4b49      	ldr	r3, [pc, #292]	; (8618c <can_initialize+0x174>)
   86068:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   8606a:	4b49      	ldr	r3, [pc, #292]	; (86190 <can_initialize+0x178>)
   8606c:	4798      	blx	r3
   8606e:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   86070:	4848      	ldr	r0, [pc, #288]	; (86194 <can_initialize+0x17c>)
   86072:	68f9      	ldr	r1, [r7, #12]
   86074:	22fa      	movs	r2, #250	; 0xfa
   86076:	4b48      	ldr	r3, [pc, #288]	; (86198 <can_initialize+0x180>)
   86078:	4798      	blx	r3
   8607a:	4603      	mov	r3, r0
   8607c:	2b00      	cmp	r3, #0
   8607e:	d074      	beq.n	8616a <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   86080:	4846      	ldr	r0, [pc, #280]	; (8619c <can_initialize+0x184>)
   86082:	68f9      	ldr	r1, [r7, #12]
   86084:	22fa      	movs	r2, #250	; 0xfa
   86086:	4b44      	ldr	r3, [pc, #272]	; (86198 <can_initialize+0x180>)
   86088:	4798      	blx	r3
   8608a:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   8608c:	2b00      	cmp	r3, #0
   8608e:	d06c      	beq.n	8616a <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   86090:	4840      	ldr	r0, [pc, #256]	; (86194 <can_initialize+0x17c>)
   86092:	f04f 31ff 	mov.w	r1, #4294967295
   86096:	4b42      	ldr	r3, [pc, #264]	; (861a0 <can_initialize+0x188>)
   86098:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8609a:	4840      	ldr	r0, [pc, #256]	; (8619c <can_initialize+0x184>)
   8609c:	f04f 31ff 	mov.w	r1, #4294967295
   860a0:	4b3f      	ldr	r3, [pc, #252]	; (861a0 <can_initialize+0x188>)
   860a2:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   860a4:	202b      	movs	r0, #43	; 0x2b
   860a6:	4b3f      	ldr	r3, [pc, #252]	; (861a4 <can_initialize+0x18c>)
   860a8:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   860aa:	202c      	movs	r0, #44	; 0x2c
   860ac:	4b3d      	ldr	r3, [pc, #244]	; (861a4 <can_initialize+0x18c>)
   860ae:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   860b0:	4838      	ldr	r0, [pc, #224]	; (86194 <can_initialize+0x17c>)
   860b2:	4b3d      	ldr	r3, [pc, #244]	; (861a8 <can_initialize+0x190>)
   860b4:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   860b6:	4839      	ldr	r0, [pc, #228]	; (8619c <can_initialize+0x184>)
   860b8:	4b3b      	ldr	r3, [pc, #236]	; (861a8 <can_initialize+0x190>)
   860ba:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   860bc:	6938      	ldr	r0, [r7, #16]
   860be:	4b3b      	ldr	r3, [pc, #236]	; (861ac <can_initialize+0x194>)
   860c0:	4798      	blx	r3
   860c2:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   860c4:	4b3a      	ldr	r3, [pc, #232]	; (861b0 <can_initialize+0x198>)
   860c6:	2200      	movs	r2, #0
   860c8:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   860ca:	4b3a      	ldr	r3, [pc, #232]	; (861b4 <can_initialize+0x19c>)
   860cc:	2200      	movs	r2, #0
   860ce:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   860d0:	4b39      	ldr	r3, [pc, #228]	; (861b8 <can_initialize+0x1a0>)
   860d2:	2200      	movs	r2, #0
   860d4:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   860d6:	4b39      	ldr	r3, [pc, #228]	; (861bc <can_initialize+0x1a4>)
   860d8:	2200      	movs	r2, #0
   860da:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   860dc:	4b38      	ldr	r3, [pc, #224]	; (861c0 <can_initialize+0x1a8>)
   860de:	2200      	movs	r2, #0
   860e0:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   860e2:	4b38      	ldr	r3, [pc, #224]	; (861c4 <can_initialize+0x1ac>)
   860e4:	2200      	movs	r2, #0
   860e6:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   860e8:	2300      	movs	r3, #0
   860ea:	617b      	str	r3, [r7, #20]
   860ec:	e016      	b.n	8611c <can_initialize+0x104>
		{
			glob_stored_data[i] = 0;
   860ee:	4b36      	ldr	r3, [pc, #216]	; (861c8 <can_initialize+0x1b0>)
   860f0:	697a      	ldr	r2, [r7, #20]
   860f2:	2100      	movs	r1, #0
   860f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   860f8:	4b34      	ldr	r3, [pc, #208]	; (861cc <can_initialize+0x1b4>)
   860fa:	697a      	ldr	r2, [r7, #20]
   860fc:	2100      	movs	r1, #0
   860fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   86102:	4b33      	ldr	r3, [pc, #204]	; (861d0 <can_initialize+0x1b8>)
   86104:	697a      	ldr	r2, [r7, #20]
   86106:	2100      	movs	r1, #0
   86108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   8610c:	4b31      	ldr	r3, [pc, #196]	; (861d4 <can_initialize+0x1bc>)
   8610e:	697a      	ldr	r2, [r7, #20]
   86110:	2100      	movs	r1, #0
   86112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   86116:	697b      	ldr	r3, [r7, #20]
   86118:	3301      	adds	r3, #1
   8611a:	617b      	str	r3, [r7, #20]
   8611c:	697b      	ldr	r3, [r7, #20]
   8611e:	2b01      	cmp	r3, #1
   86120:	d9e5      	bls.n	860ee <can_initialize+0xd6>
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   86122:	2364      	movs	r3, #100	; 0x64
   86124:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   86126:	2304      	movs	r3, #4
   86128:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   8612a:	68b8      	ldr	r0, [r7, #8]
   8612c:	6879      	ldr	r1, [r7, #4]
   8612e:	2200      	movs	r2, #0
   86130:	4b29      	ldr	r3, [pc, #164]	; (861d8 <can_initialize+0x1c0>)
   86132:	4798      	blx	r3
   86134:	4602      	mov	r2, r0
   86136:	4b29      	ldr	r3, [pc, #164]	; (861dc <can_initialize+0x1c4>)
   86138:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   8613a:	68b8      	ldr	r0, [r7, #8]
   8613c:	6879      	ldr	r1, [r7, #4]
   8613e:	2200      	movs	r2, #0
   86140:	4b25      	ldr	r3, [pc, #148]	; (861d8 <can_initialize+0x1c0>)
   86142:	4798      	blx	r3
   86144:	4602      	mov	r2, r0
   86146:	4b26      	ldr	r3, [pc, #152]	; (861e0 <can_initialize+0x1c8>)
   86148:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   8614a:	68b8      	ldr	r0, [r7, #8]
   8614c:	6879      	ldr	r1, [r7, #4]
   8614e:	2200      	movs	r2, #0
   86150:	4b21      	ldr	r3, [pc, #132]	; (861d8 <can_initialize+0x1c0>)
   86152:	4798      	blx	r3
   86154:	4602      	mov	r2, r0
   86156:	4b23      	ldr	r3, [pc, #140]	; (861e4 <can_initialize+0x1cc>)
   86158:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   8615a:	68b8      	ldr	r0, [r7, #8]
   8615c:	6879      	ldr	r1, [r7, #4]
   8615e:	2200      	movs	r2, #0
   86160:	4b1d      	ldr	r3, [pc, #116]	; (861d8 <can_initialize+0x1c0>)
   86162:	4798      	blx	r3
   86164:	4602      	mov	r2, r0
   86166:	4b20      	ldr	r3, [pc, #128]	; (861e8 <can_initialize+0x1d0>)
   86168:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   8616a:	bf00      	nop
}
   8616c:	3718      	adds	r7, #24
   8616e:	46bd      	mov	sp, r7
   86170:	bd80      	pop	{r7, pc}
   86172:	bf00      	nop
   86174:	2007a720 	.word	0x2007a720
   86178:	00081d0d 	.word	0x00081d0d
   8617c:	00081d29 	.word	0x00081d29
   86180:	00081d61 	.word	0x00081d61
   86184:	00081d45 	.word	0x00081d45
   86188:	2007a674 	.word	0x2007a674
   8618c:	00082b7d 	.word	0x00082b7d
   86190:	00085871 	.word	0x00085871
   86194:	400b4000 	.word	0x400b4000
   86198:	00081ecd 	.word	0x00081ecd
   8619c:	400b8000 	.word	0x400b8000
   861a0:	00081fb1 	.word	0x00081fb1
   861a4:	000857b1 	.word	0x000857b1
   861a8:	0008230d 	.word	0x0008230d
   861ac:	000861ed 	.word	0x000861ed
   861b0:	2007a670 	.word	0x2007a670
   861b4:	2007a67c 	.word	0x2007a67c
   861b8:	2007a6e8 	.word	0x2007a6e8
   861bc:	2007a64c 	.word	0x2007a64c
   861c0:	2007a6b0 	.word	0x2007a6b0
   861c4:	2007a67d 	.word	0x2007a67d
   861c8:	2007a644 	.word	0x2007a644
   861cc:	2007a6f4 	.word	0x2007a6f4
   861d0:	2007a680 	.word	0x2007a680
   861d4:	2007a6b4 	.word	0x2007a6b4
   861d8:	00083afd 	.word	0x00083afd
   861dc:	2007a688 	.word	0x2007a688
   861e0:	2007a6fc 	.word	0x2007a6fc
   861e4:	2007a640 	.word	0x2007a640
   861e8:	2007a6ec 	.word	0x2007a6ec

000861ec <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   861ec:	b580      	push	{r7, lr}
   861ee:	b082      	sub	sp, #8
   861f0:	af00      	add	r7, sp, #0
   861f2:	6078      	str	r0, [r7, #4]
	//configASSERT(x);	//Check if this function was called naturally.

	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */
	/* CAN0 MB7 == COMMAND/MSG MB				*/	
	reset_mailbox_conf(&can0_mailbox);
   861f4:	484a      	ldr	r0, [pc, #296]	; (86320 <can_init_mailboxes+0x134>)
   861f6:	4b4b      	ldr	r3, [pc, #300]	; (86324 <can_init_mailboxes+0x138>)
   861f8:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   861fa:	4b49      	ldr	r3, [pc, #292]	; (86320 <can_init_mailboxes+0x134>)
   861fc:	2207      	movs	r2, #7
   861fe:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   86200:	4b47      	ldr	r3, [pc, #284]	; (86320 <can_init_mailboxes+0x134>)
   86202:	2203      	movs	r2, #3
   86204:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 10;		//Transmission Priority (Can be Changed dynamically)
   86206:	4b46      	ldr	r3, [pc, #280]	; (86320 <can_init_mailboxes+0x134>)
   86208:	220a      	movs	r2, #10
   8620a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8620c:	4b44      	ldr	r3, [pc, #272]	; (86320 <can_init_mailboxes+0x134>)
   8620e:	2200      	movs	r2, #0
   86210:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86212:	4b43      	ldr	r3, [pc, #268]	; (86320 <can_init_mailboxes+0x134>)
   86214:	2200      	movs	r2, #0
   86216:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   86218:	4843      	ldr	r0, [pc, #268]	; (86328 <can_init_mailboxes+0x13c>)
   8621a:	4941      	ldr	r1, [pc, #260]	; (86320 <can_init_mailboxes+0x134>)
   8621c:	4b43      	ldr	r3, [pc, #268]	; (8632c <can_init_mailboxes+0x140>)
   8621e:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86220:	4843      	ldr	r0, [pc, #268]	; (86330 <can_init_mailboxes+0x144>)
   86222:	4b40      	ldr	r3, [pc, #256]	; (86324 <can_init_mailboxes+0x138>)
   86224:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   86226:	4b42      	ldr	r3, [pc, #264]	; (86330 <can_init_mailboxes+0x144>)
   86228:	2200      	movs	r2, #0
   8622a:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8622c:	4b40      	ldr	r3, [pc, #256]	; (86330 <can_init_mailboxes+0x144>)
   8622e:	2201      	movs	r2, #1
   86230:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86232:	4b3f      	ldr	r3, [pc, #252]	; (86330 <can_init_mailboxes+0x144>)
   86234:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86238:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   8623a:	4b3d      	ldr	r3, [pc, #244]	; (86330 <can_init_mailboxes+0x144>)
   8623c:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   86240:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86242:	483c      	ldr	r0, [pc, #240]	; (86334 <can_init_mailboxes+0x148>)
   86244:	493a      	ldr	r1, [pc, #232]	; (86330 <can_init_mailboxes+0x144>)
   86246:	4b39      	ldr	r3, [pc, #228]	; (8632c <can_init_mailboxes+0x140>)
   86248:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8624a:	4839      	ldr	r0, [pc, #228]	; (86330 <can_init_mailboxes+0x144>)
   8624c:	4b35      	ldr	r3, [pc, #212]	; (86324 <can_init_mailboxes+0x138>)
   8624e:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   86250:	4b37      	ldr	r3, [pc, #220]	; (86330 <can_init_mailboxes+0x144>)
   86252:	2205      	movs	r2, #5
   86254:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   86256:	4b36      	ldr	r3, [pc, #216]	; (86330 <can_init_mailboxes+0x144>)
   86258:	2201      	movs	r2, #1
   8625a:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8625c:	4b34      	ldr	r3, [pc, #208]	; (86330 <can_init_mailboxes+0x144>)
   8625e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86262:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   86264:	4b32      	ldr	r3, [pc, #200]	; (86330 <can_init_mailboxes+0x144>)
   86266:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   8626a:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8626c:	4831      	ldr	r0, [pc, #196]	; (86334 <can_init_mailboxes+0x148>)
   8626e:	4930      	ldr	r1, [pc, #192]	; (86330 <can_init_mailboxes+0x144>)
   86270:	4b2e      	ldr	r3, [pc, #184]	; (8632c <can_init_mailboxes+0x140>)
   86272:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86274:	482e      	ldr	r0, [pc, #184]	; (86330 <can_init_mailboxes+0x144>)
   86276:	4b2b      	ldr	r3, [pc, #172]	; (86324 <can_init_mailboxes+0x138>)
   86278:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   8627a:	4b2d      	ldr	r3, [pc, #180]	; (86330 <can_init_mailboxes+0x144>)
   8627c:	2206      	movs	r2, #6
   8627e:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   86280:	4b2b      	ldr	r3, [pc, #172]	; (86330 <can_init_mailboxes+0x144>)
   86282:	2201      	movs	r2, #1
   86284:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86286:	4b2a      	ldr	r3, [pc, #168]	; (86330 <can_init_mailboxes+0x144>)
   86288:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   8628c:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   8628e:	4b28      	ldr	r3, [pc, #160]	; (86330 <can_init_mailboxes+0x144>)
   86290:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   86294:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86296:	4827      	ldr	r0, [pc, #156]	; (86334 <can_init_mailboxes+0x148>)
   86298:	4925      	ldr	r1, [pc, #148]	; (86330 <can_init_mailboxes+0x144>)
   8629a:	4b24      	ldr	r3, [pc, #144]	; (8632c <can_init_mailboxes+0x140>)
   8629c:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8629e:	4824      	ldr	r0, [pc, #144]	; (86330 <can_init_mailboxes+0x144>)
   862a0:	4b20      	ldr	r3, [pc, #128]	; (86324 <can_init_mailboxes+0x138>)
   862a2:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   862a4:	4b22      	ldr	r3, [pc, #136]	; (86330 <can_init_mailboxes+0x144>)
   862a6:	2207      	movs	r2, #7
   862a8:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   862aa:	4b21      	ldr	r3, [pc, #132]	; (86330 <can_init_mailboxes+0x144>)
   862ac:	2201      	movs	r2, #1
   862ae:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   862b0:	4b1f      	ldr	r3, [pc, #124]	; (86330 <can_init_mailboxes+0x144>)
   862b2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   862b6:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   862b8:	4b1d      	ldr	r3, [pc, #116]	; (86330 <can_init_mailboxes+0x144>)
   862ba:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   862be:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   862c0:	481c      	ldr	r0, [pc, #112]	; (86334 <can_init_mailboxes+0x148>)
   862c2:	491b      	ldr	r1, [pc, #108]	; (86330 <can_init_mailboxes+0x144>)
   862c4:	4b19      	ldr	r3, [pc, #100]	; (8632c <can_init_mailboxes+0x140>)
   862c6:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   862c8:	481a      	ldr	r0, [pc, #104]	; (86334 <can_init_mailboxes+0x148>)
   862ca:	2101      	movs	r1, #1
   862cc:	4b1a      	ldr	r3, [pc, #104]	; (86338 <can_init_mailboxes+0x14c>)
   862ce:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   862d0:	4818      	ldr	r0, [pc, #96]	; (86334 <can_init_mailboxes+0x148>)
   862d2:	2120      	movs	r1, #32
   862d4:	4b18      	ldr	r3, [pc, #96]	; (86338 <can_init_mailboxes+0x14c>)
   862d6:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   862d8:	4816      	ldr	r0, [pc, #88]	; (86334 <can_init_mailboxes+0x148>)
   862da:	2140      	movs	r1, #64	; 0x40
   862dc:	4b16      	ldr	r3, [pc, #88]	; (86338 <can_init_mailboxes+0x14c>)
   862de:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   862e0:	4814      	ldr	r0, [pc, #80]	; (86334 <can_init_mailboxes+0x148>)
   862e2:	2180      	movs	r1, #128	; 0x80
   862e4:	4b14      	ldr	r3, [pc, #80]	; (86338 <can_init_mailboxes+0x14c>)
   862e6:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   862e8:	480d      	ldr	r0, [pc, #52]	; (86320 <can_init_mailboxes+0x134>)
   862ea:	4b0e      	ldr	r3, [pc, #56]	; (86324 <can_init_mailboxes+0x138>)
   862ec:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   862ee:	4b0c      	ldr	r3, [pc, #48]	; (86320 <can_init_mailboxes+0x134>)
   862f0:	2206      	movs	r2, #6
   862f2:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   862f4:	4b0a      	ldr	r3, [pc, #40]	; (86320 <can_init_mailboxes+0x134>)
   862f6:	2203      	movs	r2, #3
   862f8:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   862fa:	4b09      	ldr	r3, [pc, #36]	; (86320 <can_init_mailboxes+0x134>)
   862fc:	2214      	movs	r2, #20
   862fe:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   86300:	4b07      	ldr	r3, [pc, #28]	; (86320 <can_init_mailboxes+0x134>)
   86302:	2200      	movs	r2, #0
   86304:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86306:	4b06      	ldr	r3, [pc, #24]	; (86320 <can_init_mailboxes+0x134>)
   86308:	2200      	movs	r2, #0
   8630a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8630c:	4806      	ldr	r0, [pc, #24]	; (86328 <can_init_mailboxes+0x13c>)
   8630e:	4904      	ldr	r1, [pc, #16]	; (86320 <can_init_mailboxes+0x134>)
   86310:	4b06      	ldr	r3, [pc, #24]	; (8632c <can_init_mailboxes+0x140>)
   86312:	4798      	blx	r3

	return 1;
   86314:	2301      	movs	r3, #1
}
   86316:	4618      	mov	r0, r3
   86318:	3708      	adds	r7, #8
   8631a:	46bd      	mov	sp, r7
   8631c:	bd80      	pop	{r7, pc}
   8631e:	bf00      	nop
   86320:	2007a6bc 	.word	0x2007a6bc
   86324:	00085cfd 	.word	0x00085cfd
   86328:	400b4000 	.word	0x400b4000
   8632c:	00082071 	.word	0x00082071
   86330:	2007a650 	.word	0x2007a650
   86334:	400b8000 	.word	0x400b8000
   86338:	00081f95 	.word	0x00081f95

0008633c <high_command_generator>:

uint32_t high_command_generator(uint8_t SENDER_ID, uint8_t MessageType, uint8_t smalltype)
{
   8633c:	b480      	push	{r7}
   8633e:	b087      	sub	sp, #28
   86340:	af00      	add	r7, sp, #0
   86342:	4613      	mov	r3, r2
   86344:	4602      	mov	r2, r0
   86346:	71fa      	strb	r2, [r7, #7]
   86348:	460a      	mov	r2, r1
   8634a:	71ba      	strb	r2, [r7, #6]
   8634c:	717b      	strb	r3, [r7, #5]
	uint8_t dummy_time=0x00; //Should be replaced once RTC is ready.
   8634e:	2300      	movs	r3, #0
   86350:	75fb      	strb	r3, [r7, #23]
	uint32_t sender, m_type, s_type;
	
	sender = (uint32_t)SENDER_ID;
   86352:	79fb      	ldrb	r3, [r7, #7]
   86354:	613b      	str	r3, [r7, #16]
	sender = sender << 24;
   86356:	693b      	ldr	r3, [r7, #16]
   86358:	061b      	lsls	r3, r3, #24
   8635a:	613b      	str	r3, [r7, #16]
		
	m_type = (uint32_t)MessageType;
   8635c:	79bb      	ldrb	r3, [r7, #6]
   8635e:	60fb      	str	r3, [r7, #12]
	m_type = m_type << 16;
   86360:	68fb      	ldr	r3, [r7, #12]
   86362:	041b      	lsls	r3, r3, #16
   86364:	60fb      	str	r3, [r7, #12]
	
	s_type = (uint32_t)smalltype;
   86366:	797b      	ldrb	r3, [r7, #5]
   86368:	60bb      	str	r3, [r7, #8]
	s_type = s_type << 8;
   8636a:	68bb      	ldr	r3, [r7, #8]
   8636c:	021b      	lsls	r3, r3, #8
   8636e:	60bb      	str	r3, [r7, #8]
	
	return sender + m_type + s_type + dummy_time;
   86370:	693a      	ldr	r2, [r7, #16]
   86372:	68fb      	ldr	r3, [r7, #12]
   86374:	441a      	add	r2, r3
   86376:	68bb      	ldr	r3, [r7, #8]
   86378:	441a      	add	r2, r3
   8637a:	7dfb      	ldrb	r3, [r7, #23]
   8637c:	4413      	add	r3, r2
}
   8637e:	4618      	mov	r0, r3
   86380:	371c      	adds	r7, #28
   86382:	46bd      	mov	sp, r7
   86384:	f85d 7b04 	ldr.w	r7, [sp], #4
   86388:	4770      	bx	lr
   8638a:	bf00      	nop

0008638c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   8638c:	b480      	push	{r7}
   8638e:	b085      	sub	sp, #20
   86390:	af00      	add	r7, sp, #0
   86392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   86394:	687b      	ldr	r3, [r7, #4]
   86396:	f003 0307 	and.w	r3, r3, #7
   8639a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   8639c:	4b0c      	ldr	r3, [pc, #48]	; (863d0 <NVIC_SetPriorityGrouping+0x44>)
   8639e:	68db      	ldr	r3, [r3, #12]
   863a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   863a2:	68ba      	ldr	r2, [r7, #8]
   863a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   863a8:	4013      	ands	r3, r2
   863aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   863ac:	68fb      	ldr	r3, [r7, #12]
   863ae:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   863b0:	68bb      	ldr	r3, [r7, #8]
   863b2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   863b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   863b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   863bc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   863be:	4b04      	ldr	r3, [pc, #16]	; (863d0 <NVIC_SetPriorityGrouping+0x44>)
   863c0:	68ba      	ldr	r2, [r7, #8]
   863c2:	60da      	str	r2, [r3, #12]
}
   863c4:	3714      	adds	r7, #20
   863c6:	46bd      	mov	sp, r7
   863c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   863cc:	4770      	bx	lr
   863ce:	bf00      	nop
   863d0:	e000ed00 	.word	0xe000ed00

000863d4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   863d4:	b480      	push	{r7}
   863d6:	b083      	sub	sp, #12
   863d8:	af00      	add	r7, sp, #0
   863da:	4603      	mov	r3, r0
   863dc:	6039      	str	r1, [r7, #0]
   863de:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   863e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   863e4:	2b00      	cmp	r3, #0
   863e6:	da0b      	bge.n	86400 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   863e8:	490d      	ldr	r1, [pc, #52]	; (86420 <NVIC_SetPriority+0x4c>)
   863ea:	79fb      	ldrb	r3, [r7, #7]
   863ec:	f003 030f 	and.w	r3, r3, #15
   863f0:	3b04      	subs	r3, #4
   863f2:	683a      	ldr	r2, [r7, #0]
   863f4:	b2d2      	uxtb	r2, r2
   863f6:	0112      	lsls	r2, r2, #4
   863f8:	b2d2      	uxtb	r2, r2
   863fa:	440b      	add	r3, r1
   863fc:	761a      	strb	r2, [r3, #24]
   863fe:	e009      	b.n	86414 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86400:	4908      	ldr	r1, [pc, #32]	; (86424 <NVIC_SetPriority+0x50>)
   86402:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86406:	683a      	ldr	r2, [r7, #0]
   86408:	b2d2      	uxtb	r2, r2
   8640a:	0112      	lsls	r2, r2, #4
   8640c:	b2d2      	uxtb	r2, r2
   8640e:	440b      	add	r3, r1
   86410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   86414:	370c      	adds	r7, #12
   86416:	46bd      	mov	sp, r7
   86418:	f85d 7b04 	ldr.w	r7, [sp], #4
   8641c:	4770      	bx	lr
   8641e:	bf00      	nop
   86420:	e000ed00 	.word	0xe000ed00
   86424:	e000e100 	.word	0xe000e100

00086428 <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   86428:	b480      	push	{r7}
   8642a:	b083      	sub	sp, #12
   8642c:	af00      	add	r7, sp, #0
   8642e:	4603      	mov	r3, r0
   86430:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   86432:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86436:	2b00      	cmp	r3, #0
   86438:	da0a      	bge.n	86450 <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   8643a:	4a0d      	ldr	r2, [pc, #52]	; (86470 <NVIC_GetPriority+0x48>)
   8643c:	79fb      	ldrb	r3, [r7, #7]
   8643e:	f003 030f 	and.w	r3, r3, #15
   86442:	3b04      	subs	r3, #4
   86444:	4413      	add	r3, r2
   86446:	7e1b      	ldrb	r3, [r3, #24]
   86448:	b2db      	uxtb	r3, r3
   8644a:	091b      	lsrs	r3, r3, #4
   8644c:	b2db      	uxtb	r3, r3
   8644e:	e008      	b.n	86462 <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   86450:	4a08      	ldr	r2, [pc, #32]	; (86474 <NVIC_GetPriority+0x4c>)
   86452:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86456:	4413      	add	r3, r2
   86458:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   8645c:	b2db      	uxtb	r3, r3
   8645e:	091b      	lsrs	r3, r3, #4
   86460:	b2db      	uxtb	r3, r3
}
   86462:	4618      	mov	r0, r3
   86464:	370c      	adds	r7, #12
   86466:	46bd      	mov	sp, r7
   86468:	f85d 7b04 	ldr.w	r7, [sp], #4
   8646c:	4770      	bx	lr
   8646e:	bf00      	nop
   86470:	e000ed00 	.word	0xe000ed00
   86474:	e000e100 	.word	0xe000e100

00086478 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   86478:	b580      	push	{r7, lr}
   8647a:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   8647c:	4b09      	ldr	r3, [pc, #36]	; (864a4 <main+0x2c>)
   8647e:	2200      	movs	r2, #0
   86480:	601a      	str	r2, [r3, #0]
	safe_mode();
   86482:	4b09      	ldr	r3, [pc, #36]	; (864a8 <main+0x30>)
   86484:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   86486:	4b09      	ldr	r3, [pc, #36]	; (864ac <main+0x34>)
   86488:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   8648a:	4b09      	ldr	r3, [pc, #36]	; (864b0 <main+0x38>)
   8648c:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   8648e:	4b09      	ldr	r3, [pc, #36]	; (864b4 <main+0x3c>)
   86490:	4798      	blx	r3
	
	/* Create Tasks */
	//my_blink();
	command_loop();
   86492:	4b09      	ldr	r3, [pc, #36]	; (864b8 <main+0x40>)
   86494:	4798      	blx	r3
	housekeep();
   86496:	4b09      	ldr	r3, [pc, #36]	; (864bc <main+0x44>)
   86498:	4798      	blx	r3
	data_test();
   8649a:	4b09      	ldr	r3, [pc, #36]	; (864c0 <main+0x48>)
   8649c:	4798      	blx	r3
	//time_update();
	
	/* Start Scheduler */
	vTaskStartScheduler();
   8649e:	4b09      	ldr	r3, [pc, #36]	; (864c4 <main+0x4c>)
   864a0:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   864a2:	e7fe      	b.n	864a2 <main+0x2a>
   864a4:	2007a6e4 	.word	0x2007a6e4
   864a8:	000864c9 	.word	0x000864c9
   864ac:	00086579 	.word	0x00086579
   864b0:	00086515 	.word	0x00086515
   864b4:	00086545 	.word	0x00086545
   864b8:	00080565 	.word	0x00080565
   864bc:	00080845 	.word	0x00080845
   864c0:	00080689 	.word	0x00080689
   864c4:	00084571 	.word	0x00084571

000864c8 <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   864c8:	b580      	push	{r7, lr}
   864ca:	b084      	sub	sp, #16
   864cc:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   864ce:	4b0b      	ldr	r3, [pc, #44]	; (864fc <safe_mode+0x34>)
   864d0:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   864d2:	2000      	movs	r0, #0
   864d4:	4b0a      	ldr	r3, [pc, #40]	; (86500 <safe_mode+0x38>)
   864d6:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   864d8:	4b0a      	ldr	r3, [pc, #40]	; (86504 <safe_mode+0x3c>)
   864da:	4798      	blx	r3
	
	uint32_t timeOut, low, high;
	
	timeOut = 80000000;
   864dc:	4b0a      	ldr	r3, [pc, #40]	; (86508 <safe_mode+0x40>)
   864de:	60fb      	str	r3, [r7, #12]
	
	
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   864e0:	4b0a      	ldr	r3, [pc, #40]	; (8650c <safe_mode+0x44>)
   864e2:	4798      	blx	r3
		
		
	//Debugging Stuff
	uint16_t MEM_LOCATION = 0x00080000;
   864e4:	2300      	movs	r3, #0
   864e6:	817b      	strh	r3, [r7, #10]
	size_t SIZE = 10;
   864e8:	230a      	movs	r3, #10
   864ea:	607b      	str	r3, [r7, #4]
	
	//uint32_t a;
	//a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   864ec:	bf00      	nop
   864ee:	4b08      	ldr	r3, [pc, #32]	; (86510 <safe_mode+0x48>)
   864f0:	681b      	ldr	r3, [r3, #0]
   864f2:	2b00      	cmp	r3, #0
   864f4:	d1fb      	bne.n	864ee <safe_mode+0x26>
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
		*/
	}
}
   864f6:	3710      	adds	r7, #16
   864f8:	46bd      	mov	sp, r7
   864fa:	bd80      	pop	{r7, pc}
   864fc:	00081b59 	.word	0x00081b59
   86500:	0008638d 	.word	0x0008638d
   86504:	00081bc1 	.word	0x00081bc1
   86508:	04c4b400 	.word	0x04c4b400
   8650c:	00086019 	.word	0x00086019
   86510:	2007a6e4 	.word	0x2007a6e4

00086514 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   86514:	b580      	push	{r7, lr}
   86516:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   86518:	4b05      	ldr	r3, [pc, #20]	; (86530 <prvSetupHardware+0x1c>)
   8651a:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   8651c:	4b05      	ldr	r3, [pc, #20]	; (86534 <prvSetupHardware+0x20>)
   8651e:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   86520:	4b05      	ldr	r3, [pc, #20]	; (86538 <prvSetupHardware+0x24>)
   86522:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   86524:	4b05      	ldr	r3, [pc, #20]	; (8653c <prvSetupHardware+0x28>)
   86526:	4798      	blx	r3
	
	/* Initialize RTC registers and set the default initial time. */
	rtc_init(DS3234_INTCN);
   86528:	2004      	movs	r0, #4
   8652a:	4b05      	ldr	r3, [pc, #20]	; (86540 <prvSetupHardware+0x2c>)
   8652c:	4798      	blx	r3
	
	/* Initialize SPI Memory Chips								  */
	
	
}
   8652e:	bd80      	pop	{r7, pc}
   86530:	00081c29 	.word	0x00081c29
   86534:	0008094d 	.word	0x0008094d
   86538:	000817d9 	.word	0x000817d9
   8653c:	00081159 	.word	0x00081159
   86540:	00080a49 	.word	0x00080a49

00086544 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   86544:	b598      	push	{r3, r4, r7, lr}
   86546:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   86548:	2001      	movs	r0, #1
   8654a:	2100      	movs	r1, #0
   8654c:	2203      	movs	r2, #3
   8654e:	4b07      	ldr	r3, [pc, #28]	; (8656c <prvInitializeMutexes+0x28>)
   86550:	4798      	blx	r3
   86552:	4602      	mov	r2, r0
   86554:	4b06      	ldr	r3, [pc, #24]	; (86570 <prvInitializeMutexes+0x2c>)
   86556:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(Can1_Mutex);
   86558:	4b05      	ldr	r3, [pc, #20]	; (86570 <prvInitializeMutexes+0x2c>)
   8655a:	681b      	ldr	r3, [r3, #0]
   8655c:	4618      	mov	r0, r3
   8655e:	2100      	movs	r1, #0
   86560:	2200      	movs	r2, #0
   86562:	2300      	movs	r3, #0
   86564:	4c03      	ldr	r4, [pc, #12]	; (86574 <prvInitializeMutexes+0x30>)
   86566:	47a0      	blx	r4
	return;
   86568:	bf00      	nop
}
   8656a:	bd98      	pop	{r3, r4, r7, pc}
   8656c:	00083afd 	.word	0x00083afd
   86570:	2007a6ac 	.word	0x2007a6ac
   86574:	00083b89 	.word	0x00083b89

00086578 <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   86578:	b580      	push	{r7, lr}
   8657a:	b082      	sub	sp, #8
   8657c:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   8657e:	230b      	movs	r3, #11
   86580:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   86582:	232c      	movs	r3, #44	; 0x2c
   86584:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   86586:	232b      	movs	r3, #43	; 0x2b
   86588:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   8658a:	f997 3003 	ldrsb.w	r3, [r7, #3]
   8658e:	4618      	mov	r0, r3
   86590:	6879      	ldr	r1, [r7, #4]
   86592:	4b0a      	ldr	r3, [pc, #40]	; (865bc <prvInitializeInterruptPriorities+0x44>)
   86594:	4798      	blx	r3
	
	priority = 12;	
   86596:	230c      	movs	r3, #12
   86598:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   8659a:	f997 3002 	ldrsb.w	r3, [r7, #2]
   8659e:	4618      	mov	r0, r3
   865a0:	6879      	ldr	r1, [r7, #4]
   865a2:	4b06      	ldr	r3, [pc, #24]	; (865bc <prvInitializeInterruptPriorities+0x44>)
   865a4:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   865a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
   865aa:	4618      	mov	r0, r3
   865ac:	4b04      	ldr	r3, [pc, #16]	; (865c0 <prvInitializeInterruptPriorities+0x48>)
   865ae:	4798      	blx	r3
   865b0:	6078      	str	r0, [r7, #4]
	
	return;
   865b2:	bf00      	nop
}
   865b4:	3708      	adds	r7, #8
   865b6:	46bd      	mov	sp, r7
   865b8:	bd80      	pop	{r7, pc}
   865ba:	bf00      	nop
   865bc:	000863d5 	.word	0x000863d5
   865c0:	00086429 	.word	0x00086429

000865c4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   865c4:	b580      	push	{r7, lr}
   865c6:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   865c8:	4b01      	ldr	r3, [pc, #4]	; (865d0 <vApplicationMallocFailedHook+0xc>)
   865ca:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   865cc:	e7fe      	b.n	865cc <vApplicationMallocFailedHook+0x8>
   865ce:	bf00      	nop
   865d0:	00083581 	.word	0x00083581

000865d4 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   865d4:	b580      	push	{r7, lr}
   865d6:	b082      	sub	sp, #8
   865d8:	af00      	add	r7, sp, #0
   865da:	6078      	str	r0, [r7, #4]
   865dc:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   865de:	4b01      	ldr	r3, [pc, #4]	; (865e4 <vApplicationStackOverflowHook+0x10>)
   865e0:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   865e2:	e7fe      	b.n	865e2 <vApplicationStackOverflowHook+0xe>
   865e4:	00083581 	.word	0x00083581

000865e8 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   865e8:	b580      	push	{r7, lr}
   865ea:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   865ec:	4804      	ldr	r0, [pc, #16]	; (86600 <WDT_Handler+0x18>)
   865ee:	4b05      	ldr	r3, [pc, #20]	; (86604 <WDT_Handler+0x1c>)
   865f0:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   865f2:	2055      	movs	r0, #85	; 0x55
   865f4:	4b04      	ldr	r3, [pc, #16]	; (86608 <WDT_Handler+0x20>)
   865f6:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   865f8:	4801      	ldr	r0, [pc, #4]	; (86600 <WDT_Handler+0x18>)
   865fa:	4b04      	ldr	r3, [pc, #16]	; (8660c <WDT_Handler+0x24>)
   865fc:	4798      	blx	r3
}
   865fe:	bd80      	pop	{r7, pc}
   86600:	400e1a50 	.word	0x400e1a50
   86604:	00082f11 	.word	0x00082f11
   86608:	00082591 	.word	0x00082591
   8660c:	00082ee9 	.word	0x00082ee9

00086610 <__aeabi_frsub>:
   86610:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   86614:	e002      	b.n	8661c <__addsf3>
   86616:	bf00      	nop

00086618 <__aeabi_fsub>:
   86618:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0008661c <__addsf3>:
   8661c:	0042      	lsls	r2, r0, #1
   8661e:	bf1f      	itttt	ne
   86620:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   86624:	ea92 0f03 	teqne	r2, r3
   86628:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   8662c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86630:	d06a      	beq.n	86708 <__addsf3+0xec>
   86632:	ea4f 6212 	mov.w	r2, r2, lsr #24
   86636:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8663a:	bfc1      	itttt	gt
   8663c:	18d2      	addgt	r2, r2, r3
   8663e:	4041      	eorgt	r1, r0
   86640:	4048      	eorgt	r0, r1
   86642:	4041      	eorgt	r1, r0
   86644:	bfb8      	it	lt
   86646:	425b      	neglt	r3, r3
   86648:	2b19      	cmp	r3, #25
   8664a:	bf88      	it	hi
   8664c:	4770      	bxhi	lr
   8664e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   86652:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86656:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8665a:	bf18      	it	ne
   8665c:	4240      	negne	r0, r0
   8665e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86662:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   86666:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8666a:	bf18      	it	ne
   8666c:	4249      	negne	r1, r1
   8666e:	ea92 0f03 	teq	r2, r3
   86672:	d03f      	beq.n	866f4 <__addsf3+0xd8>
   86674:	f1a2 0201 	sub.w	r2, r2, #1
   86678:	fa41 fc03 	asr.w	ip, r1, r3
   8667c:	eb10 000c 	adds.w	r0, r0, ip
   86680:	f1c3 0320 	rsb	r3, r3, #32
   86684:	fa01 f103 	lsl.w	r1, r1, r3
   86688:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8668c:	d502      	bpl.n	86694 <__addsf3+0x78>
   8668e:	4249      	negs	r1, r1
   86690:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   86694:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   86698:	d313      	bcc.n	866c2 <__addsf3+0xa6>
   8669a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8669e:	d306      	bcc.n	866ae <__addsf3+0x92>
   866a0:	0840      	lsrs	r0, r0, #1
   866a2:	ea4f 0131 	mov.w	r1, r1, rrx
   866a6:	f102 0201 	add.w	r2, r2, #1
   866aa:	2afe      	cmp	r2, #254	; 0xfe
   866ac:	d251      	bcs.n	86752 <__addsf3+0x136>
   866ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   866b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   866b6:	bf08      	it	eq
   866b8:	f020 0001 	biceq.w	r0, r0, #1
   866bc:	ea40 0003 	orr.w	r0, r0, r3
   866c0:	4770      	bx	lr
   866c2:	0049      	lsls	r1, r1, #1
   866c4:	eb40 0000 	adc.w	r0, r0, r0
   866c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   866cc:	f1a2 0201 	sub.w	r2, r2, #1
   866d0:	d1ed      	bne.n	866ae <__addsf3+0x92>
   866d2:	fab0 fc80 	clz	ip, r0
   866d6:	f1ac 0c08 	sub.w	ip, ip, #8
   866da:	ebb2 020c 	subs.w	r2, r2, ip
   866de:	fa00 f00c 	lsl.w	r0, r0, ip
   866e2:	bfaa      	itet	ge
   866e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   866e8:	4252      	neglt	r2, r2
   866ea:	4318      	orrge	r0, r3
   866ec:	bfbc      	itt	lt
   866ee:	40d0      	lsrlt	r0, r2
   866f0:	4318      	orrlt	r0, r3
   866f2:	4770      	bx	lr
   866f4:	f092 0f00 	teq	r2, #0
   866f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   866fc:	bf06      	itte	eq
   866fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   86702:	3201      	addeq	r2, #1
   86704:	3b01      	subne	r3, #1
   86706:	e7b5      	b.n	86674 <__addsf3+0x58>
   86708:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8670c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86710:	bf18      	it	ne
   86712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86716:	d021      	beq.n	8675c <__addsf3+0x140>
   86718:	ea92 0f03 	teq	r2, r3
   8671c:	d004      	beq.n	86728 <__addsf3+0x10c>
   8671e:	f092 0f00 	teq	r2, #0
   86722:	bf08      	it	eq
   86724:	4608      	moveq	r0, r1
   86726:	4770      	bx	lr
   86728:	ea90 0f01 	teq	r0, r1
   8672c:	bf1c      	itt	ne
   8672e:	2000      	movne	r0, #0
   86730:	4770      	bxne	lr
   86732:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   86736:	d104      	bne.n	86742 <__addsf3+0x126>
   86738:	0040      	lsls	r0, r0, #1
   8673a:	bf28      	it	cs
   8673c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   86740:	4770      	bx	lr
   86742:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   86746:	bf3c      	itt	cc
   86748:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   8674c:	4770      	bxcc	lr
   8674e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86752:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   86756:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8675a:	4770      	bx	lr
   8675c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   86760:	bf16      	itet	ne
   86762:	4608      	movne	r0, r1
   86764:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   86768:	4601      	movne	r1, r0
   8676a:	0242      	lsls	r2, r0, #9
   8676c:	bf06      	itte	eq
   8676e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86772:	ea90 0f01 	teqeq	r0, r1
   86776:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8677a:	4770      	bx	lr

0008677c <__aeabi_ui2f>:
   8677c:	f04f 0300 	mov.w	r3, #0
   86780:	e004      	b.n	8678c <__aeabi_i2f+0x8>
   86782:	bf00      	nop

00086784 <__aeabi_i2f>:
   86784:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   86788:	bf48      	it	mi
   8678a:	4240      	negmi	r0, r0
   8678c:	ea5f 0c00 	movs.w	ip, r0
   86790:	bf08      	it	eq
   86792:	4770      	bxeq	lr
   86794:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   86798:	4601      	mov	r1, r0
   8679a:	f04f 0000 	mov.w	r0, #0
   8679e:	e01c      	b.n	867da <__aeabi_l2f+0x2a>

000867a0 <__aeabi_ul2f>:
   867a0:	ea50 0201 	orrs.w	r2, r0, r1
   867a4:	bf08      	it	eq
   867a6:	4770      	bxeq	lr
   867a8:	f04f 0300 	mov.w	r3, #0
   867ac:	e00a      	b.n	867c4 <__aeabi_l2f+0x14>
   867ae:	bf00      	nop

000867b0 <__aeabi_l2f>:
   867b0:	ea50 0201 	orrs.w	r2, r0, r1
   867b4:	bf08      	it	eq
   867b6:	4770      	bxeq	lr
   867b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   867bc:	d502      	bpl.n	867c4 <__aeabi_l2f+0x14>
   867be:	4240      	negs	r0, r0
   867c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   867c4:	ea5f 0c01 	movs.w	ip, r1
   867c8:	bf02      	ittt	eq
   867ca:	4684      	moveq	ip, r0
   867cc:	4601      	moveq	r1, r0
   867ce:	2000      	moveq	r0, #0
   867d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   867d4:	bf08      	it	eq
   867d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   867da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   867de:	fabc f28c 	clz	r2, ip
   867e2:	3a08      	subs	r2, #8
   867e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   867e8:	db10      	blt.n	8680c <__aeabi_l2f+0x5c>
   867ea:	fa01 fc02 	lsl.w	ip, r1, r2
   867ee:	4463      	add	r3, ip
   867f0:	fa00 fc02 	lsl.w	ip, r0, r2
   867f4:	f1c2 0220 	rsb	r2, r2, #32
   867f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   867fc:	fa20 f202 	lsr.w	r2, r0, r2
   86800:	eb43 0002 	adc.w	r0, r3, r2
   86804:	bf08      	it	eq
   86806:	f020 0001 	biceq.w	r0, r0, #1
   8680a:	4770      	bx	lr
   8680c:	f102 0220 	add.w	r2, r2, #32
   86810:	fa01 fc02 	lsl.w	ip, r1, r2
   86814:	f1c2 0220 	rsb	r2, r2, #32
   86818:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   8681c:	fa21 f202 	lsr.w	r2, r1, r2
   86820:	eb43 0002 	adc.w	r0, r3, r2
   86824:	bf08      	it	eq
   86826:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8682a:	4770      	bx	lr

0008682c <__aeabi_fmul>:
   8682c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86830:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86834:	bf1e      	ittt	ne
   86836:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8683a:	ea92 0f0c 	teqne	r2, ip
   8683e:	ea93 0f0c 	teqne	r3, ip
   86842:	d06f      	beq.n	86924 <__aeabi_fmul+0xf8>
   86844:	441a      	add	r2, r3
   86846:	ea80 0c01 	eor.w	ip, r0, r1
   8684a:	0240      	lsls	r0, r0, #9
   8684c:	bf18      	it	ne
   8684e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86852:	d01e      	beq.n	86892 <__aeabi_fmul+0x66>
   86854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   86858:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   8685c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86860:	fba0 3101 	umull	r3, r1, r0, r1
   86864:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86868:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   8686c:	bf3e      	ittt	cc
   8686e:	0049      	lslcc	r1, r1, #1
   86870:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86874:	005b      	lslcc	r3, r3, #1
   86876:	ea40 0001 	orr.w	r0, r0, r1
   8687a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8687e:	2afd      	cmp	r2, #253	; 0xfd
   86880:	d81d      	bhi.n	868be <__aeabi_fmul+0x92>
   86882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   86886:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8688a:	bf08      	it	eq
   8688c:	f020 0001 	biceq.w	r0, r0, #1
   86890:	4770      	bx	lr
   86892:	f090 0f00 	teq	r0, #0
   86896:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8689a:	bf08      	it	eq
   8689c:	0249      	lsleq	r1, r1, #9
   8689e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   868a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   868a6:	3a7f      	subs	r2, #127	; 0x7f
   868a8:	bfc2      	ittt	gt
   868aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   868ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   868b2:	4770      	bxgt	lr
   868b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   868b8:	f04f 0300 	mov.w	r3, #0
   868bc:	3a01      	subs	r2, #1
   868be:	dc5d      	bgt.n	8697c <__aeabi_fmul+0x150>
   868c0:	f112 0f19 	cmn.w	r2, #25
   868c4:	bfdc      	itt	le
   868c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   868ca:	4770      	bxle	lr
   868cc:	f1c2 0200 	rsb	r2, r2, #0
   868d0:	0041      	lsls	r1, r0, #1
   868d2:	fa21 f102 	lsr.w	r1, r1, r2
   868d6:	f1c2 0220 	rsb	r2, r2, #32
   868da:	fa00 fc02 	lsl.w	ip, r0, r2
   868de:	ea5f 0031 	movs.w	r0, r1, rrx
   868e2:	f140 0000 	adc.w	r0, r0, #0
   868e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   868ea:	bf08      	it	eq
   868ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   868f0:	4770      	bx	lr
   868f2:	f092 0f00 	teq	r2, #0
   868f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   868fa:	bf02      	ittt	eq
   868fc:	0040      	lsleq	r0, r0, #1
   868fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86902:	3a01      	subeq	r2, #1
   86904:	d0f9      	beq.n	868fa <__aeabi_fmul+0xce>
   86906:	ea40 000c 	orr.w	r0, r0, ip
   8690a:	f093 0f00 	teq	r3, #0
   8690e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86912:	bf02      	ittt	eq
   86914:	0049      	lsleq	r1, r1, #1
   86916:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8691a:	3b01      	subeq	r3, #1
   8691c:	d0f9      	beq.n	86912 <__aeabi_fmul+0xe6>
   8691e:	ea41 010c 	orr.w	r1, r1, ip
   86922:	e78f      	b.n	86844 <__aeabi_fmul+0x18>
   86924:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86928:	ea92 0f0c 	teq	r2, ip
   8692c:	bf18      	it	ne
   8692e:	ea93 0f0c 	teqne	r3, ip
   86932:	d00a      	beq.n	8694a <__aeabi_fmul+0x11e>
   86934:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86938:	bf18      	it	ne
   8693a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8693e:	d1d8      	bne.n	868f2 <__aeabi_fmul+0xc6>
   86940:	ea80 0001 	eor.w	r0, r0, r1
   86944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86948:	4770      	bx	lr
   8694a:	f090 0f00 	teq	r0, #0
   8694e:	bf17      	itett	ne
   86950:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   86954:	4608      	moveq	r0, r1
   86956:	f091 0f00 	teqne	r1, #0
   8695a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8695e:	d014      	beq.n	8698a <__aeabi_fmul+0x15e>
   86960:	ea92 0f0c 	teq	r2, ip
   86964:	d101      	bne.n	8696a <__aeabi_fmul+0x13e>
   86966:	0242      	lsls	r2, r0, #9
   86968:	d10f      	bne.n	8698a <__aeabi_fmul+0x15e>
   8696a:	ea93 0f0c 	teq	r3, ip
   8696e:	d103      	bne.n	86978 <__aeabi_fmul+0x14c>
   86970:	024b      	lsls	r3, r1, #9
   86972:	bf18      	it	ne
   86974:	4608      	movne	r0, r1
   86976:	d108      	bne.n	8698a <__aeabi_fmul+0x15e>
   86978:	ea80 0001 	eor.w	r0, r0, r1
   8697c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86988:	4770      	bx	lr
   8698a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8698e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   86992:	4770      	bx	lr

00086994 <__aeabi_fdiv>:
   86994:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86998:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8699c:	bf1e      	ittt	ne
   8699e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   869a2:	ea92 0f0c 	teqne	r2, ip
   869a6:	ea93 0f0c 	teqne	r3, ip
   869aa:	d069      	beq.n	86a80 <__aeabi_fdiv+0xec>
   869ac:	eba2 0203 	sub.w	r2, r2, r3
   869b0:	ea80 0c01 	eor.w	ip, r0, r1
   869b4:	0249      	lsls	r1, r1, #9
   869b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
   869ba:	d037      	beq.n	86a2c <__aeabi_fdiv+0x98>
   869bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   869c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   869c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   869c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   869cc:	428b      	cmp	r3, r1
   869ce:	bf38      	it	cc
   869d0:	005b      	lslcc	r3, r3, #1
   869d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   869d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   869da:	428b      	cmp	r3, r1
   869dc:	bf24      	itt	cs
   869de:	1a5b      	subcs	r3, r3, r1
   869e0:	ea40 000c 	orrcs.w	r0, r0, ip
   869e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   869e8:	bf24      	itt	cs
   869ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   869ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   869f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   869f6:	bf24      	itt	cs
   869f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   869fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86a00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   86a04:	bf24      	itt	cs
   86a06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   86a0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86a0e:	011b      	lsls	r3, r3, #4
   86a10:	bf18      	it	ne
   86a12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   86a16:	d1e0      	bne.n	869da <__aeabi_fdiv+0x46>
   86a18:	2afd      	cmp	r2, #253	; 0xfd
   86a1a:	f63f af50 	bhi.w	868be <__aeabi_fmul+0x92>
   86a1e:	428b      	cmp	r3, r1
   86a20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86a24:	bf08      	it	eq
   86a26:	f020 0001 	biceq.w	r0, r0, #1
   86a2a:	4770      	bx	lr
   86a2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86a30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86a34:	327f      	adds	r2, #127	; 0x7f
   86a36:	bfc2      	ittt	gt
   86a38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86a3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86a40:	4770      	bxgt	lr
   86a42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86a46:	f04f 0300 	mov.w	r3, #0
   86a4a:	3a01      	subs	r2, #1
   86a4c:	e737      	b.n	868be <__aeabi_fmul+0x92>
   86a4e:	f092 0f00 	teq	r2, #0
   86a52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86a56:	bf02      	ittt	eq
   86a58:	0040      	lsleq	r0, r0, #1
   86a5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86a5e:	3a01      	subeq	r2, #1
   86a60:	d0f9      	beq.n	86a56 <__aeabi_fdiv+0xc2>
   86a62:	ea40 000c 	orr.w	r0, r0, ip
   86a66:	f093 0f00 	teq	r3, #0
   86a6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86a6e:	bf02      	ittt	eq
   86a70:	0049      	lsleq	r1, r1, #1
   86a72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86a76:	3b01      	subeq	r3, #1
   86a78:	d0f9      	beq.n	86a6e <__aeabi_fdiv+0xda>
   86a7a:	ea41 010c 	orr.w	r1, r1, ip
   86a7e:	e795      	b.n	869ac <__aeabi_fdiv+0x18>
   86a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86a84:	ea92 0f0c 	teq	r2, ip
   86a88:	d108      	bne.n	86a9c <__aeabi_fdiv+0x108>
   86a8a:	0242      	lsls	r2, r0, #9
   86a8c:	f47f af7d 	bne.w	8698a <__aeabi_fmul+0x15e>
   86a90:	ea93 0f0c 	teq	r3, ip
   86a94:	f47f af70 	bne.w	86978 <__aeabi_fmul+0x14c>
   86a98:	4608      	mov	r0, r1
   86a9a:	e776      	b.n	8698a <__aeabi_fmul+0x15e>
   86a9c:	ea93 0f0c 	teq	r3, ip
   86aa0:	d104      	bne.n	86aac <__aeabi_fdiv+0x118>
   86aa2:	024b      	lsls	r3, r1, #9
   86aa4:	f43f af4c 	beq.w	86940 <__aeabi_fmul+0x114>
   86aa8:	4608      	mov	r0, r1
   86aaa:	e76e      	b.n	8698a <__aeabi_fmul+0x15e>
   86aac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86ab0:	bf18      	it	ne
   86ab2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86ab6:	d1ca      	bne.n	86a4e <__aeabi_fdiv+0xba>
   86ab8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   86abc:	f47f af5c 	bne.w	86978 <__aeabi_fmul+0x14c>
   86ac0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   86ac4:	f47f af3c 	bne.w	86940 <__aeabi_fmul+0x114>
   86ac8:	e75f      	b.n	8698a <__aeabi_fmul+0x15e>
   86aca:	bf00      	nop

00086acc <__gesf2>:
   86acc:	f04f 3cff 	mov.w	ip, #4294967295
   86ad0:	e006      	b.n	86ae0 <__cmpsf2+0x4>
   86ad2:	bf00      	nop

00086ad4 <__lesf2>:
   86ad4:	f04f 0c01 	mov.w	ip, #1
   86ad8:	e002      	b.n	86ae0 <__cmpsf2+0x4>
   86ada:	bf00      	nop

00086adc <__cmpsf2>:
   86adc:	f04f 0c01 	mov.w	ip, #1
   86ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
   86ae4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   86ae8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86aec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86af0:	bf18      	it	ne
   86af2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86af6:	d011      	beq.n	86b1c <__cmpsf2+0x40>
   86af8:	b001      	add	sp, #4
   86afa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   86afe:	bf18      	it	ne
   86b00:	ea90 0f01 	teqne	r0, r1
   86b04:	bf58      	it	pl
   86b06:	ebb2 0003 	subspl.w	r0, r2, r3
   86b0a:	bf88      	it	hi
   86b0c:	17c8      	asrhi	r0, r1, #31
   86b0e:	bf38      	it	cc
   86b10:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   86b14:	bf18      	it	ne
   86b16:	f040 0001 	orrne.w	r0, r0, #1
   86b1a:	4770      	bx	lr
   86b1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86b20:	d102      	bne.n	86b28 <__cmpsf2+0x4c>
   86b22:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   86b26:	d105      	bne.n	86b34 <__cmpsf2+0x58>
   86b28:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   86b2c:	d1e4      	bne.n	86af8 <__cmpsf2+0x1c>
   86b2e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   86b32:	d0e1      	beq.n	86af8 <__cmpsf2+0x1c>
   86b34:	f85d 0b04 	ldr.w	r0, [sp], #4
   86b38:	4770      	bx	lr
   86b3a:	bf00      	nop

00086b3c <__aeabi_cfrcmple>:
   86b3c:	4684      	mov	ip, r0
   86b3e:	4608      	mov	r0, r1
   86b40:	4661      	mov	r1, ip
   86b42:	e7ff      	b.n	86b44 <__aeabi_cfcmpeq>

00086b44 <__aeabi_cfcmpeq>:
   86b44:	b50f      	push	{r0, r1, r2, r3, lr}
   86b46:	f7ff ffc9 	bl	86adc <__cmpsf2>
   86b4a:	2800      	cmp	r0, #0
   86b4c:	bf48      	it	mi
   86b4e:	f110 0f00 	cmnmi.w	r0, #0
   86b52:	bd0f      	pop	{r0, r1, r2, r3, pc}

00086b54 <__aeabi_fcmpeq>:
   86b54:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b58:	f7ff fff4 	bl	86b44 <__aeabi_cfcmpeq>
   86b5c:	bf0c      	ite	eq
   86b5e:	2001      	moveq	r0, #1
   86b60:	2000      	movne	r0, #0
   86b62:	f85d fb08 	ldr.w	pc, [sp], #8
   86b66:	bf00      	nop

00086b68 <__aeabi_fcmplt>:
   86b68:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b6c:	f7ff ffea 	bl	86b44 <__aeabi_cfcmpeq>
   86b70:	bf34      	ite	cc
   86b72:	2001      	movcc	r0, #1
   86b74:	2000      	movcs	r0, #0
   86b76:	f85d fb08 	ldr.w	pc, [sp], #8
   86b7a:	bf00      	nop

00086b7c <__aeabi_fcmple>:
   86b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b80:	f7ff ffe0 	bl	86b44 <__aeabi_cfcmpeq>
   86b84:	bf94      	ite	ls
   86b86:	2001      	movls	r0, #1
   86b88:	2000      	movhi	r0, #0
   86b8a:	f85d fb08 	ldr.w	pc, [sp], #8
   86b8e:	bf00      	nop

00086b90 <__aeabi_fcmpge>:
   86b90:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b94:	f7ff ffd2 	bl	86b3c <__aeabi_cfrcmple>
   86b98:	bf94      	ite	ls
   86b9a:	2001      	movls	r0, #1
   86b9c:	2000      	movhi	r0, #0
   86b9e:	f85d fb08 	ldr.w	pc, [sp], #8
   86ba2:	bf00      	nop

00086ba4 <__aeabi_fcmpgt>:
   86ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
   86ba8:	f7ff ffc8 	bl	86b3c <__aeabi_cfrcmple>
   86bac:	bf34      	ite	cc
   86bae:	2001      	movcc	r0, #1
   86bb0:	2000      	movcs	r0, #0
   86bb2:	f85d fb08 	ldr.w	pc, [sp], #8
   86bb6:	bf00      	nop

00086bb8 <__aeabi_f2uiz>:
   86bb8:	0042      	lsls	r2, r0, #1
   86bba:	d20e      	bcs.n	86bda <__aeabi_f2uiz+0x22>
   86bbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   86bc0:	d30b      	bcc.n	86bda <__aeabi_f2uiz+0x22>
   86bc2:	f04f 039e 	mov.w	r3, #158	; 0x9e
   86bc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   86bca:	d409      	bmi.n	86be0 <__aeabi_f2uiz+0x28>
   86bcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
   86bd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86bd4:	fa23 f002 	lsr.w	r0, r3, r2
   86bd8:	4770      	bx	lr
   86bda:	f04f 0000 	mov.w	r0, #0
   86bde:	4770      	bx	lr
   86be0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86be4:	d101      	bne.n	86bea <__aeabi_f2uiz+0x32>
   86be6:	0242      	lsls	r2, r0, #9
   86be8:	d102      	bne.n	86bf0 <__aeabi_f2uiz+0x38>
   86bea:	f04f 30ff 	mov.w	r0, #4294967295
   86bee:	4770      	bx	lr
   86bf0:	f04f 0000 	mov.w	r0, #0
   86bf4:	4770      	bx	lr
   86bf6:	bf00      	nop

00086bf8 <__libc_init_array>:
   86bf8:	b570      	push	{r4, r5, r6, lr}
   86bfa:	4e0f      	ldr	r6, [pc, #60]	; (86c38 <__libc_init_array+0x40>)
   86bfc:	4d0f      	ldr	r5, [pc, #60]	; (86c3c <__libc_init_array+0x44>)
   86bfe:	1b76      	subs	r6, r6, r5
   86c00:	10b6      	asrs	r6, r6, #2
   86c02:	d007      	beq.n	86c14 <__libc_init_array+0x1c>
   86c04:	3d04      	subs	r5, #4
   86c06:	2400      	movs	r4, #0
   86c08:	3401      	adds	r4, #1
   86c0a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86c0e:	4798      	blx	r3
   86c10:	42a6      	cmp	r6, r4
   86c12:	d1f9      	bne.n	86c08 <__libc_init_array+0x10>
   86c14:	4e0a      	ldr	r6, [pc, #40]	; (86c40 <__libc_init_array+0x48>)
   86c16:	4d0b      	ldr	r5, [pc, #44]	; (86c44 <__libc_init_array+0x4c>)
   86c18:	f000 fa4c 	bl	870b4 <_init>
   86c1c:	1b76      	subs	r6, r6, r5
   86c1e:	10b6      	asrs	r6, r6, #2
   86c20:	d008      	beq.n	86c34 <__libc_init_array+0x3c>
   86c22:	3d04      	subs	r5, #4
   86c24:	2400      	movs	r4, #0
   86c26:	3401      	adds	r4, #1
   86c28:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86c2c:	4798      	blx	r3
   86c2e:	42a6      	cmp	r6, r4
   86c30:	d1f9      	bne.n	86c26 <__libc_init_array+0x2e>
   86c32:	bd70      	pop	{r4, r5, r6, pc}
   86c34:	bd70      	pop	{r4, r5, r6, pc}
   86c36:	bf00      	nop
   86c38:	000870c0 	.word	0x000870c0
   86c3c:	000870c0 	.word	0x000870c0
   86c40:	000870c8 	.word	0x000870c8
   86c44:	000870c0 	.word	0x000870c0

00086c48 <memcmp>:
   86c48:	2a03      	cmp	r2, #3
   86c4a:	b470      	push	{r4, r5, r6}
   86c4c:	d928      	bls.n	86ca0 <memcmp+0x58>
   86c4e:	ea40 0301 	orr.w	r3, r0, r1
   86c52:	079b      	lsls	r3, r3, #30
   86c54:	d013      	beq.n	86c7e <memcmp+0x36>
   86c56:	7805      	ldrb	r5, [r0, #0]
   86c58:	780c      	ldrb	r4, [r1, #0]
   86c5a:	42a5      	cmp	r5, r4
   86c5c:	d124      	bne.n	86ca8 <memcmp+0x60>
   86c5e:	3a01      	subs	r2, #1
   86c60:	2300      	movs	r3, #0
   86c62:	e005      	b.n	86c70 <memcmp+0x28>
   86c64:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   86c68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   86c6c:	42a5      	cmp	r5, r4
   86c6e:	d11b      	bne.n	86ca8 <memcmp+0x60>
   86c70:	4293      	cmp	r3, r2
   86c72:	f103 0301 	add.w	r3, r3, #1
   86c76:	d1f5      	bne.n	86c64 <memcmp+0x1c>
   86c78:	2000      	movs	r0, #0
   86c7a:	bc70      	pop	{r4, r5, r6}
   86c7c:	4770      	bx	lr
   86c7e:	460c      	mov	r4, r1
   86c80:	4603      	mov	r3, r0
   86c82:	6825      	ldr	r5, [r4, #0]
   86c84:	681e      	ldr	r6, [r3, #0]
   86c86:	4621      	mov	r1, r4
   86c88:	42ae      	cmp	r6, r5
   86c8a:	4618      	mov	r0, r3
   86c8c:	f104 0404 	add.w	r4, r4, #4
   86c90:	f103 0304 	add.w	r3, r3, #4
   86c94:	d104      	bne.n	86ca0 <memcmp+0x58>
   86c96:	3a04      	subs	r2, #4
   86c98:	2a03      	cmp	r2, #3
   86c9a:	4618      	mov	r0, r3
   86c9c:	4621      	mov	r1, r4
   86c9e:	d8f0      	bhi.n	86c82 <memcmp+0x3a>
   86ca0:	2a00      	cmp	r2, #0
   86ca2:	d1d8      	bne.n	86c56 <memcmp+0xe>
   86ca4:	4610      	mov	r0, r2
   86ca6:	e7e8      	b.n	86c7a <memcmp+0x32>
   86ca8:	1b28      	subs	r0, r5, r4
   86caa:	bc70      	pop	{r4, r5, r6}
   86cac:	4770      	bx	lr
   86cae:	bf00      	nop

00086cb0 <memcpy>:
   86cb0:	4684      	mov	ip, r0
   86cb2:	ea41 0300 	orr.w	r3, r1, r0
   86cb6:	f013 0303 	ands.w	r3, r3, #3
   86cba:	d149      	bne.n	86d50 <memcpy+0xa0>
   86cbc:	3a40      	subs	r2, #64	; 0x40
   86cbe:	d323      	bcc.n	86d08 <memcpy+0x58>
   86cc0:	680b      	ldr	r3, [r1, #0]
   86cc2:	6003      	str	r3, [r0, #0]
   86cc4:	684b      	ldr	r3, [r1, #4]
   86cc6:	6043      	str	r3, [r0, #4]
   86cc8:	688b      	ldr	r3, [r1, #8]
   86cca:	6083      	str	r3, [r0, #8]
   86ccc:	68cb      	ldr	r3, [r1, #12]
   86cce:	60c3      	str	r3, [r0, #12]
   86cd0:	690b      	ldr	r3, [r1, #16]
   86cd2:	6103      	str	r3, [r0, #16]
   86cd4:	694b      	ldr	r3, [r1, #20]
   86cd6:	6143      	str	r3, [r0, #20]
   86cd8:	698b      	ldr	r3, [r1, #24]
   86cda:	6183      	str	r3, [r0, #24]
   86cdc:	69cb      	ldr	r3, [r1, #28]
   86cde:	61c3      	str	r3, [r0, #28]
   86ce0:	6a0b      	ldr	r3, [r1, #32]
   86ce2:	6203      	str	r3, [r0, #32]
   86ce4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86ce6:	6243      	str	r3, [r0, #36]	; 0x24
   86ce8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86cea:	6283      	str	r3, [r0, #40]	; 0x28
   86cec:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86cee:	62c3      	str	r3, [r0, #44]	; 0x2c
   86cf0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86cf2:	6303      	str	r3, [r0, #48]	; 0x30
   86cf4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86cf6:	6343      	str	r3, [r0, #52]	; 0x34
   86cf8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86cfa:	6383      	str	r3, [r0, #56]	; 0x38
   86cfc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86cfe:	63c3      	str	r3, [r0, #60]	; 0x3c
   86d00:	3040      	adds	r0, #64	; 0x40
   86d02:	3140      	adds	r1, #64	; 0x40
   86d04:	3a40      	subs	r2, #64	; 0x40
   86d06:	d2db      	bcs.n	86cc0 <memcpy+0x10>
   86d08:	3230      	adds	r2, #48	; 0x30
   86d0a:	d30b      	bcc.n	86d24 <memcpy+0x74>
   86d0c:	680b      	ldr	r3, [r1, #0]
   86d0e:	6003      	str	r3, [r0, #0]
   86d10:	684b      	ldr	r3, [r1, #4]
   86d12:	6043      	str	r3, [r0, #4]
   86d14:	688b      	ldr	r3, [r1, #8]
   86d16:	6083      	str	r3, [r0, #8]
   86d18:	68cb      	ldr	r3, [r1, #12]
   86d1a:	60c3      	str	r3, [r0, #12]
   86d1c:	3010      	adds	r0, #16
   86d1e:	3110      	adds	r1, #16
   86d20:	3a10      	subs	r2, #16
   86d22:	d2f3      	bcs.n	86d0c <memcpy+0x5c>
   86d24:	320c      	adds	r2, #12
   86d26:	d305      	bcc.n	86d34 <memcpy+0x84>
   86d28:	f851 3b04 	ldr.w	r3, [r1], #4
   86d2c:	f840 3b04 	str.w	r3, [r0], #4
   86d30:	3a04      	subs	r2, #4
   86d32:	d2f9      	bcs.n	86d28 <memcpy+0x78>
   86d34:	3204      	adds	r2, #4
   86d36:	d008      	beq.n	86d4a <memcpy+0x9a>
   86d38:	07d2      	lsls	r2, r2, #31
   86d3a:	bf1c      	itt	ne
   86d3c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86d40:	f800 3b01 	strbne.w	r3, [r0], #1
   86d44:	d301      	bcc.n	86d4a <memcpy+0x9a>
   86d46:	880b      	ldrh	r3, [r1, #0]
   86d48:	8003      	strh	r3, [r0, #0]
   86d4a:	4660      	mov	r0, ip
   86d4c:	4770      	bx	lr
   86d4e:	bf00      	nop
   86d50:	2a08      	cmp	r2, #8
   86d52:	d313      	bcc.n	86d7c <memcpy+0xcc>
   86d54:	078b      	lsls	r3, r1, #30
   86d56:	d0b1      	beq.n	86cbc <memcpy+0xc>
   86d58:	f010 0303 	ands.w	r3, r0, #3
   86d5c:	d0ae      	beq.n	86cbc <memcpy+0xc>
   86d5e:	f1c3 0304 	rsb	r3, r3, #4
   86d62:	1ad2      	subs	r2, r2, r3
   86d64:	07db      	lsls	r3, r3, #31
   86d66:	bf1c      	itt	ne
   86d68:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86d6c:	f800 3b01 	strbne.w	r3, [r0], #1
   86d70:	d3a4      	bcc.n	86cbc <memcpy+0xc>
   86d72:	f831 3b02 	ldrh.w	r3, [r1], #2
   86d76:	f820 3b02 	strh.w	r3, [r0], #2
   86d7a:	e79f      	b.n	86cbc <memcpy+0xc>
   86d7c:	3a04      	subs	r2, #4
   86d7e:	d3d9      	bcc.n	86d34 <memcpy+0x84>
   86d80:	3a01      	subs	r2, #1
   86d82:	f811 3b01 	ldrb.w	r3, [r1], #1
   86d86:	f800 3b01 	strb.w	r3, [r0], #1
   86d8a:	d2f9      	bcs.n	86d80 <memcpy+0xd0>
   86d8c:	780b      	ldrb	r3, [r1, #0]
   86d8e:	7003      	strb	r3, [r0, #0]
   86d90:	784b      	ldrb	r3, [r1, #1]
   86d92:	7043      	strb	r3, [r0, #1]
   86d94:	788b      	ldrb	r3, [r1, #2]
   86d96:	7083      	strb	r3, [r0, #2]
   86d98:	4660      	mov	r0, ip
   86d9a:	4770      	bx	lr

00086d9c <memset>:
   86d9c:	b4f0      	push	{r4, r5, r6, r7}
   86d9e:	0784      	lsls	r4, r0, #30
   86da0:	d043      	beq.n	86e2a <memset+0x8e>
   86da2:	1e54      	subs	r4, r2, #1
   86da4:	2a00      	cmp	r2, #0
   86da6:	d03e      	beq.n	86e26 <memset+0x8a>
   86da8:	b2cd      	uxtb	r5, r1
   86daa:	4603      	mov	r3, r0
   86dac:	e003      	b.n	86db6 <memset+0x1a>
   86dae:	1e62      	subs	r2, r4, #1
   86db0:	2c00      	cmp	r4, #0
   86db2:	d038      	beq.n	86e26 <memset+0x8a>
   86db4:	4614      	mov	r4, r2
   86db6:	f803 5b01 	strb.w	r5, [r3], #1
   86dba:	079a      	lsls	r2, r3, #30
   86dbc:	d1f7      	bne.n	86dae <memset+0x12>
   86dbe:	2c03      	cmp	r4, #3
   86dc0:	d92a      	bls.n	86e18 <memset+0x7c>
   86dc2:	b2cd      	uxtb	r5, r1
   86dc4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86dc8:	2c0f      	cmp	r4, #15
   86dca:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86dce:	d915      	bls.n	86dfc <memset+0x60>
   86dd0:	f1a4 0710 	sub.w	r7, r4, #16
   86dd4:	093f      	lsrs	r7, r7, #4
   86dd6:	f103 0610 	add.w	r6, r3, #16
   86dda:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   86dde:	461a      	mov	r2, r3
   86de0:	6015      	str	r5, [r2, #0]
   86de2:	6055      	str	r5, [r2, #4]
   86de4:	6095      	str	r5, [r2, #8]
   86de6:	60d5      	str	r5, [r2, #12]
   86de8:	3210      	adds	r2, #16
   86dea:	42b2      	cmp	r2, r6
   86dec:	d1f8      	bne.n	86de0 <memset+0x44>
   86dee:	f004 040f 	and.w	r4, r4, #15
   86df2:	3701      	adds	r7, #1
   86df4:	2c03      	cmp	r4, #3
   86df6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   86dfa:	d90d      	bls.n	86e18 <memset+0x7c>
   86dfc:	461e      	mov	r6, r3
   86dfe:	4622      	mov	r2, r4
   86e00:	3a04      	subs	r2, #4
   86e02:	2a03      	cmp	r2, #3
   86e04:	f846 5b04 	str.w	r5, [r6], #4
   86e08:	d8fa      	bhi.n	86e00 <memset+0x64>
   86e0a:	1f22      	subs	r2, r4, #4
   86e0c:	f022 0203 	bic.w	r2, r2, #3
   86e10:	3204      	adds	r2, #4
   86e12:	4413      	add	r3, r2
   86e14:	f004 0403 	and.w	r4, r4, #3
   86e18:	b12c      	cbz	r4, 86e26 <memset+0x8a>
   86e1a:	b2c9      	uxtb	r1, r1
   86e1c:	441c      	add	r4, r3
   86e1e:	f803 1b01 	strb.w	r1, [r3], #1
   86e22:	42a3      	cmp	r3, r4
   86e24:	d1fb      	bne.n	86e1e <memset+0x82>
   86e26:	bcf0      	pop	{r4, r5, r6, r7}
   86e28:	4770      	bx	lr
   86e2a:	4614      	mov	r4, r2
   86e2c:	4603      	mov	r3, r0
   86e2e:	e7c6      	b.n	86dbe <memset+0x22>

00086e30 <register_fini>:
   86e30:	4b02      	ldr	r3, [pc, #8]	; (86e3c <register_fini+0xc>)
   86e32:	b113      	cbz	r3, 86e3a <register_fini+0xa>
   86e34:	4802      	ldr	r0, [pc, #8]	; (86e40 <register_fini+0x10>)
   86e36:	f000 b805 	b.w	86e44 <atexit>
   86e3a:	4770      	bx	lr
   86e3c:	00000000 	.word	0x00000000
   86e40:	00086e51 	.word	0x00086e51

00086e44 <atexit>:
   86e44:	4601      	mov	r1, r0
   86e46:	2000      	movs	r0, #0
   86e48:	4602      	mov	r2, r0
   86e4a:	4603      	mov	r3, r0
   86e4c:	f000 b818 	b.w	86e80 <__register_exitproc>

00086e50 <__libc_fini_array>:
   86e50:	b538      	push	{r3, r4, r5, lr}
   86e52:	4d09      	ldr	r5, [pc, #36]	; (86e78 <__libc_fini_array+0x28>)
   86e54:	4c09      	ldr	r4, [pc, #36]	; (86e7c <__libc_fini_array+0x2c>)
   86e56:	1b64      	subs	r4, r4, r5
   86e58:	10a4      	asrs	r4, r4, #2
   86e5a:	bf18      	it	ne
   86e5c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   86e60:	d005      	beq.n	86e6e <__libc_fini_array+0x1e>
   86e62:	3c01      	subs	r4, #1
   86e64:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   86e68:	4798      	blx	r3
   86e6a:	2c00      	cmp	r4, #0
   86e6c:	d1f9      	bne.n	86e62 <__libc_fini_array+0x12>
   86e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86e72:	f000 b929 	b.w	870c8 <_fini>
   86e76:	bf00      	nop
   86e78:	000870d4 	.word	0x000870d4
   86e7c:	000870d8 	.word	0x000870d8

00086e80 <__register_exitproc>:
   86e80:	b5f0      	push	{r4, r5, r6, r7, lr}
   86e82:	4c27      	ldr	r4, [pc, #156]	; (86f20 <__register_exitproc+0xa0>)
   86e84:	b085      	sub	sp, #20
   86e86:	6826      	ldr	r6, [r4, #0]
   86e88:	4607      	mov	r7, r0
   86e8a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   86e8e:	2c00      	cmp	r4, #0
   86e90:	d040      	beq.n	86f14 <__register_exitproc+0x94>
   86e92:	6865      	ldr	r5, [r4, #4]
   86e94:	2d1f      	cmp	r5, #31
   86e96:	dd1e      	ble.n	86ed6 <__register_exitproc+0x56>
   86e98:	4822      	ldr	r0, [pc, #136]	; (86f24 <__register_exitproc+0xa4>)
   86e9a:	b918      	cbnz	r0, 86ea4 <__register_exitproc+0x24>
   86e9c:	f04f 30ff 	mov.w	r0, #4294967295
   86ea0:	b005      	add	sp, #20
   86ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86ea4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86ea8:	9103      	str	r1, [sp, #12]
   86eaa:	9202      	str	r2, [sp, #8]
   86eac:	9301      	str	r3, [sp, #4]
   86eae:	f3af 8000 	nop.w
   86eb2:	9903      	ldr	r1, [sp, #12]
   86eb4:	4604      	mov	r4, r0
   86eb6:	9a02      	ldr	r2, [sp, #8]
   86eb8:	9b01      	ldr	r3, [sp, #4]
   86eba:	2800      	cmp	r0, #0
   86ebc:	d0ee      	beq.n	86e9c <__register_exitproc+0x1c>
   86ebe:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   86ec2:	2000      	movs	r0, #0
   86ec4:	6025      	str	r5, [r4, #0]
   86ec6:	6060      	str	r0, [r4, #4]
   86ec8:	4605      	mov	r5, r0
   86eca:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86ece:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86ed2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86ed6:	b93f      	cbnz	r7, 86ee8 <__register_exitproc+0x68>
   86ed8:	1c6b      	adds	r3, r5, #1
   86eda:	2000      	movs	r0, #0
   86edc:	3502      	adds	r5, #2
   86ede:	6063      	str	r3, [r4, #4]
   86ee0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86ee4:	b005      	add	sp, #20
   86ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86ee8:	2601      	movs	r6, #1
   86eea:	40ae      	lsls	r6, r5
   86eec:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86ef0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86ef4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86ef8:	2f02      	cmp	r7, #2
   86efa:	ea42 0206 	orr.w	r2, r2, r6
   86efe:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86f02:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   86f06:	d1e7      	bne.n	86ed8 <__register_exitproc+0x58>
   86f08:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86f0c:	431e      	orrs	r6, r3
   86f0e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86f12:	e7e1      	b.n	86ed8 <__register_exitproc+0x58>
   86f14:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86f18:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86f1c:	e7b9      	b.n	86e92 <__register_exitproc+0x12>
   86f1e:	bf00      	nop
   86f20:	000870b0 	.word	0x000870b0
   86f24:	00000000 	.word	0x00000000
   86f28:	00004e4f 	.word	0x00004e4f
   86f2c:	00004e4f 	.word	0x00004e4f
   86f30:	00004e4f 	.word	0x00004e4f

00086f34 <ulLED>:
   86f34:	00000057 00000056 0000003b 00000055     W...V...;...U...
   86f44:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   86f54:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   86f64:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   86f74:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   86f84:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   86f94:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   86fa4:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   86fb4:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   86fc4:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   86fd4:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86fe4:	0001c200 000000c0 00000800 00000000     ................
	...
   86ffc:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   8700c:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

0008701c <can_bit_time>:
   8701c:	02020308 02094b03 43020303 0303030a     .....K.....C....
   8702c:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   8703c:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   8704c:	05050510 06114504 47040505 06060512     .....E.....G....
   8705c:	06134304 44040606 06060714 08154604     .C.....D.....F..
   8706c:	47040606 07070716 08174404 46040708     ...G.....D.....F
   8707c:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   8708c:	00000000                                ....

00087090 <ucExpectedStackBytes.5295>:
   87090:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   870a0:	a5a5a5a5 20726d54 00637653 00000043     ....Tmr Svc.C...

000870b0 <_global_impure_ptr>:
   870b0:	20070010                                ... 

000870b4 <_init>:
   870b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870b6:	bf00      	nop
   870b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   870ba:	bc08      	pop	{r3}
   870bc:	469e      	mov	lr, r3
   870be:	4770      	bx	lr

000870c0 <__init_array_start>:
   870c0:	00086e31 	.word	0x00086e31

000870c4 <__frame_dummy_init_array_entry>:
   870c4:	00080119                                ....

000870c8 <_fini>:
   870c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870ca:	bf00      	nop
   870cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   870ce:	bc08      	pop	{r3}
   870d0:	469e      	mov	lr, r3
   870d2:	4770      	bx	lr

000870d4 <__fini_array_start>:
   870d4:	000800f5 	.word	0x000800f5
