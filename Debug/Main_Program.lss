
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006914  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00086914  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a350  20070438  00086d4c  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a788  0009109c  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f215  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002be7  00000000  00000000  0001f6d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000061ac  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001128  00000000  00000000  00028464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f68  00000000  00000000  0002958c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b65a  00000000  00000000  0002a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015c12  00000000  00000000  00045b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00067f30  00000000  00000000  0005b760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000037ac  00000000  00000000  000c3690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c788 	.word	0x2007c788
   80004:	000827fd 	.word	0x000827fd
   80008:	000827f5 	.word	0x000827f5
   8000c:	000827f5 	.word	0x000827f5
   80010:	000827f5 	.word	0x000827f5
   80014:	000827f5 	.word	0x000827f5
   80018:	000827f5 	.word	0x000827f5
	...
   8002c:	00082ca5 	.word	0x00082ca5
   80030:	000827f5 	.word	0x000827f5
   80034:	00000000 	.word	0x00000000
   80038:	00082e69 	.word	0x00082e69
   8003c:	00082ead 	.word	0x00082ead
   80040:	000827f5 	.word	0x000827f5
   80044:	000827f5 	.word	0x000827f5
   80048:	000827f5 	.word	0x000827f5
   8004c:	000827f5 	.word	0x000827f5
   80050:	00085d6d 	.word	0x00085d6d
   80054:	000827f5 	.word	0x000827f5
   80058:	000827f5 	.word	0x000827f5
   8005c:	000827f5 	.word	0x000827f5
   80060:	000827f5 	.word	0x000827f5
   80064:	000827f5 	.word	0x000827f5
   80068:	00000000 	.word	0x00000000
   8006c:	0008217d 	.word	0x0008217d
   80070:	00082195 	.word	0x00082195
   80074:	000821ad 	.word	0x000821ad
   80078:	000821c5 	.word	0x000821c5
	...
   80084:	00080b61 	.word	0x00080b61
   80088:	000827f5 	.word	0x000827f5
   8008c:	000827f5 	.word	0x000827f5
   80090:	000827f5 	.word	0x000827f5
   80094:	000827f5 	.word	0x000827f5
   80098:	000827f5 	.word	0x000827f5
   8009c:	000827f5 	.word	0x000827f5
   800a0:	000808f1 	.word	0x000808f1
   800a4:	00000000 	.word	0x00000000
   800a8:	000827f5 	.word	0x000827f5
   800ac:	000827f5 	.word	0x000827f5
   800b0:	000827f5 	.word	0x000827f5
   800b4:	000827f5 	.word	0x000827f5
   800b8:	000827f5 	.word	0x000827f5
   800bc:	000827f5 	.word	0x000827f5
   800c0:	000827f5 	.word	0x000827f5
   800c4:	000827f5 	.word	0x000827f5
   800c8:	000827f5 	.word	0x000827f5
   800cc:	000827f5 	.word	0x000827f5
   800d0:	000827f5 	.word	0x000827f5
   800d4:	000827f5 	.word	0x000827f5
   800d8:	000827f5 	.word	0x000827f5
   800dc:	000827f5 	.word	0x000827f5
   800e0:	000827f5 	.word	0x000827f5
   800e4:	000827f5 	.word	0x000827f5
   800e8:	000827f5 	.word	0x000827f5
   800ec:	0008521d 	.word	0x0008521d
   800f0:	00085151 	.word	0x00085151

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00086914 	.word	0x00086914

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086914 	.word	0x00086914
   8013c:	2007043c 	.word	0x2007043c
   80140:	00086914 	.word	0x00086914
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	00082449 	.word	0x00082449

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   801e0:	b580      	push	{r7, lr}
   801e2:	b086      	sub	sp, #24
   801e4:	af00      	add	r7, sp, #0
   801e6:	60f8      	str	r0, [r7, #12]
   801e8:	60b9      	str	r1, [r7, #8]
   801ea:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   801ec:	f643 2398 	movw	r3, #15000	; 0x3a98
   801f0:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   801f2:	e006      	b.n	80202 <spi_read+0x22>
		if (!timeout--) {
   801f4:	697b      	ldr	r3, [r7, #20]
   801f6:	1e5a      	subs	r2, r3, #1
   801f8:	617a      	str	r2, [r7, #20]
   801fa:	2b00      	cmp	r3, #0
   801fc:	d101      	bne.n	80202 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   801fe:	2301      	movs	r3, #1
   80200:	e01d      	b.n	8023e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80202:	68fb      	ldr	r3, [r7, #12]
   80204:	691b      	ldr	r3, [r3, #16]
   80206:	f003 0301 	and.w	r3, r3, #1
   8020a:	2b00      	cmp	r3, #0
   8020c:	d0f2      	beq.n	801f4 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8020e:	68fb      	ldr	r3, [r7, #12]
   80210:	689a      	ldr	r2, [r3, #8]
   80212:	4b0d      	ldr	r3, [pc, #52]	; (80248 <spi_read+0x68>)
   80214:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80216:	68f8      	ldr	r0, [r7, #12]
   80218:	4b0c      	ldr	r3, [pc, #48]	; (8024c <spi_read+0x6c>)
   8021a:	4798      	blx	r3
   8021c:	4603      	mov	r3, r0
   8021e:	2b00      	cmp	r3, #0
   80220:	d007      	beq.n	80232 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80222:	4b09      	ldr	r3, [pc, #36]	; (80248 <spi_read+0x68>)
   80224:	681b      	ldr	r3, [r3, #0]
   80226:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8022a:	0c1b      	lsrs	r3, r3, #16
   8022c:	b2da      	uxtb	r2, r3
   8022e:	687b      	ldr	r3, [r7, #4]
   80230:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80232:	4b05      	ldr	r3, [pc, #20]	; (80248 <spi_read+0x68>)
   80234:	681b      	ldr	r3, [r3, #0]
   80236:	b29a      	uxth	r2, r3
   80238:	68bb      	ldr	r3, [r7, #8]
   8023a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8023c:	2300      	movs	r3, #0
   8023e:	b25b      	sxtb	r3, r3
}
   80240:	4618      	mov	r0, r3
   80242:	3718      	adds	r7, #24
   80244:	46bd      	mov	sp, r7
   80246:	bd80      	pop	{r7, pc}
   80248:	20070454 	.word	0x20070454
   8024c:	00080149 	.word	0x00080149

00080250 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80250:	b580      	push	{r7, lr}
   80252:	b084      	sub	sp, #16
   80254:	af00      	add	r7, sp, #0
   80256:	6078      	str	r0, [r7, #4]
   80258:	8079      	strh	r1, [r7, #2]
   8025a:	707a      	strb	r2, [r7, #1]
   8025c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8025e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80262:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80264:	e006      	b.n	80274 <spi_write+0x24>
		if (!timeout--) {
   80266:	68fb      	ldr	r3, [r7, #12]
   80268:	1e5a      	subs	r2, r3, #1
   8026a:	60fa      	str	r2, [r7, #12]
   8026c:	2b00      	cmp	r3, #0
   8026e:	d101      	bne.n	80274 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   80270:	2301      	movs	r3, #1
   80272:	e023      	b.n	802bc <spi_write+0x6c>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80274:	687b      	ldr	r3, [r7, #4]
   80276:	691b      	ldr	r3, [r3, #16]
   80278:	f003 0302 	and.w	r3, r3, #2
   8027c:	2b00      	cmp	r3, #0
   8027e:	d0f2      	beq.n	80266 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80280:	6878      	ldr	r0, [r7, #4]
   80282:	4b11      	ldr	r3, [pc, #68]	; (802c8 <spi_write+0x78>)
   80284:	4798      	blx	r3
   80286:	4603      	mov	r3, r0
   80288:	2b00      	cmp	r3, #0
   8028a:	d00e      	beq.n	802aa <spi_write+0x5a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8028c:	887a      	ldrh	r2, [r7, #2]
   8028e:	787b      	ldrb	r3, [r7, #1]
   80290:	041b      	lsls	r3, r3, #16
   80292:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80296:	4313      	orrs	r3, r2
   80298:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   8029a:	783b      	ldrb	r3, [r7, #0]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d006      	beq.n	802ae <spi_write+0x5e>
			value |= SPI_TDR_LASTXFER;
   802a0:	68bb      	ldr	r3, [r7, #8]
   802a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802a6:	60bb      	str	r3, [r7, #8]
   802a8:	e001      	b.n	802ae <spi_write+0x5e>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   802aa:	887b      	ldrh	r3, [r7, #2]
   802ac:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802ae:	687b      	ldr	r3, [r7, #4]
   802b0:	68ba      	ldr	r2, [r7, #8]
   802b2:	60da      	str	r2, [r3, #12]
	
	pio_toggle_pin(LED0_GPIO);
   802b4:	203b      	movs	r0, #59	; 0x3b
   802b6:	4b05      	ldr	r3, [pc, #20]	; (802cc <spi_write+0x7c>)
   802b8:	4798      	blx	r3

	return SPI_OK;
   802ba:	2300      	movs	r3, #0
   802bc:	b25b      	sxtb	r3, r3
}
   802be:	4618      	mov	r0, r3
   802c0:	3710      	adds	r7, #16
   802c2:	46bd      	mov	sp, r7
   802c4:	bd80      	pop	{r7, pc}
   802c6:	bf00      	nop
   802c8:	00080149 	.word	0x00080149
   802cc:	00081e5d 	.word	0x00081e5d

000802d0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   802d0:	b480      	push	{r7}
   802d2:	b085      	sub	sp, #20
   802d4:	af00      	add	r7, sp, #0
   802d6:	60f8      	str	r0, [r7, #12]
   802d8:	60b9      	str	r1, [r7, #8]
   802da:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d00c      	beq.n	802fc <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   802e2:	68fb      	ldr	r3, [r7, #12]
   802e4:	68ba      	ldr	r2, [r7, #8]
   802e6:	320c      	adds	r2, #12
   802e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802ec:	f043 0101 	orr.w	r1, r3, #1
   802f0:	68fb      	ldr	r3, [r7, #12]
   802f2:	68ba      	ldr	r2, [r7, #8]
   802f4:	320c      	adds	r2, #12
   802f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802fa:	e00b      	b.n	80314 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   802fc:	68fb      	ldr	r3, [r7, #12]
   802fe:	68ba      	ldr	r2, [r7, #8]
   80300:	320c      	adds	r2, #12
   80302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80306:	f023 0101 	bic.w	r1, r3, #1
   8030a:	68fb      	ldr	r3, [r7, #12]
   8030c:	68ba      	ldr	r2, [r7, #8]
   8030e:	320c      	adds	r2, #12
   80310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80314:	3714      	adds	r7, #20
   80316:	46bd      	mov	sp, r7
   80318:	f85d 7b04 	ldr.w	r7, [sp], #4
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80320:	b480      	push	{r7}
   80322:	b085      	sub	sp, #20
   80324:	af00      	add	r7, sp, #0
   80326:	60f8      	str	r0, [r7, #12]
   80328:	60b9      	str	r1, [r7, #8]
   8032a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	2b00      	cmp	r3, #0
   80330:	d00c      	beq.n	8034c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80332:	68fb      	ldr	r3, [r7, #12]
   80334:	68ba      	ldr	r2, [r7, #8]
   80336:	320c      	adds	r2, #12
   80338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8033c:	f043 0102 	orr.w	r1, r3, #2
   80340:	68fb      	ldr	r3, [r7, #12]
   80342:	68ba      	ldr	r2, [r7, #8]
   80344:	320c      	adds	r2, #12
   80346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8034a:	e00b      	b.n	80364 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8034c:	68fb      	ldr	r3, [r7, #12]
   8034e:	68ba      	ldr	r2, [r7, #8]
   80350:	320c      	adds	r2, #12
   80352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80356:	f023 0102 	bic.w	r1, r3, #2
   8035a:	68fb      	ldr	r3, [r7, #12]
   8035c:	68ba      	ldr	r2, [r7, #8]
   8035e:	320c      	adds	r2, #12
   80360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80364:	3714      	adds	r7, #20
   80366:	46bd      	mov	sp, r7
   80368:	f85d 7b04 	ldr.w	r7, [sp], #4
   8036c:	4770      	bx	lr
   8036e:	bf00      	nop

00080370 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80370:	b480      	push	{r7}
   80372:	b085      	sub	sp, #20
   80374:	af00      	add	r7, sp, #0
   80376:	60f8      	str	r0, [r7, #12]
   80378:	60b9      	str	r1, [r7, #8]
   8037a:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8037c:	68fb      	ldr	r3, [r7, #12]
   8037e:	68ba      	ldr	r2, [r7, #8]
   80380:	320c      	adds	r2, #12
   80382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80386:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8038a:	68fb      	ldr	r3, [r7, #12]
   8038c:	68ba      	ldr	r2, [r7, #8]
   8038e:	320c      	adds	r2, #12
   80390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80394:	68fb      	ldr	r3, [r7, #12]
   80396:	68ba      	ldr	r2, [r7, #8]
   80398:	320c      	adds	r2, #12
   8039a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8039e:	687b      	ldr	r3, [r7, #4]
   803a0:	ea42 0103 	orr.w	r1, r2, r3
   803a4:	68fb      	ldr	r3, [r7, #12]
   803a6:	68ba      	ldr	r2, [r7, #8]
   803a8:	320c      	adds	r2, #12
   803aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803ae:	3714      	adds	r7, #20
   803b0:	46bd      	mov	sp, r7
   803b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   803b6:	4770      	bx	lr

000803b8 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   803b8:	b590      	push	{r4, r7, lr}
   803ba:	b085      	sub	sp, #20
   803bc:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   803be:	2301      	movs	r3, #1
   803c0:	9300      	str	r3, [sp, #0]
   803c2:	2300      	movs	r3, #0
   803c4:	9301      	str	r3, [sp, #4]
   803c6:	2300      	movs	r3, #0
   803c8:	9302      	str	r3, [sp, #8]
   803ca:	2300      	movs	r3, #0
   803cc:	9303      	str	r3, [sp, #12]
   803ce:	4805      	ldr	r0, [pc, #20]	; (803e4 <command_loop+0x2c>)
   803d0:	4905      	ldr	r1, [pc, #20]	; (803e8 <command_loop+0x30>)
   803d2:	2282      	movs	r2, #130	; 0x82
   803d4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   803d8:	4c04      	ldr	r4, [pc, #16]	; (803ec <command_loop+0x34>)
   803da:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   803dc:	bf00      	nop
}
   803de:	3704      	adds	r7, #4
   803e0:	46bd      	mov	sp, r7
   803e2:	bd90      	pop	{r4, r7, pc}
   803e4:	000803f1 	.word	0x000803f1
   803e8:	0008675c 	.word	0x0008675c
   803ec:	00083bc1 	.word	0x00083bc1

000803f0 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   803f0:	b590      	push	{r4, r7, lr}
   803f2:	b08b      	sub	sp, #44	; 0x2c
   803f4:	af00      	add	r7, sp, #0
   803f6:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   803f8:	687a      	ldr	r2, [r7, #4]
   803fa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   803fe:	429a      	cmp	r2, r3
   80400:	d002      	beq.n	80408 <prvCommandTask+0x18>
   80402:	4b18      	ldr	r3, [pc, #96]	; (80464 <prvCommandTask+0x74>)
   80404:	4798      	blx	r3
   80406:	e7fe      	b.n	80406 <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80408:	230f      	movs	r3, #15
   8040a:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   8040c:	f04f 33ff 	mov.w	r3, #4294967295
   80410:	623b      	str	r3, [r7, #32]
	high = CAN_MSG_DUMMY_DATA;
   80412:	f04f 33ff 	mov.w	r3, #4294967295
   80416:	61fb      	str	r3, [r7, #28]
	ID = SUB0_ID0;
   80418:	2314      	movs	r3, #20
   8041a:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   8041c:	230a      	movs	r3, #10
   8041e:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80420:	4b11      	ldr	r3, [pc, #68]	; (80468 <prvCommandTask+0x78>)
   80422:	681b      	ldr	r3, [r3, #0]
   80424:	4618      	mov	r0, r3
   80426:	2100      	movs	r1, #0
   80428:	2202      	movs	r2, #2
   8042a:	2300      	movs	r3, #0
   8042c:	4c0f      	ldr	r4, [pc, #60]	; (8046c <prvCommandTask+0x7c>)
   8042e:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   80430:	6a38      	ldr	r0, [r7, #32]
   80432:	69f9      	ldr	r1, [r7, #28]
   80434:	69ba      	ldr	r2, [r7, #24]
   80436:	697b      	ldr	r3, [r7, #20]
   80438:	4c0d      	ldr	r4, [pc, #52]	; (80470 <prvCommandTask+0x80>)
   8043a:	47a0      	blx	r4
   8043c:	6138      	str	r0, [r7, #16]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   8043e:	4b0a      	ldr	r3, [pc, #40]	; (80468 <prvCommandTask+0x78>)
   80440:	681b      	ldr	r3, [r3, #0]
   80442:	4618      	mov	r0, r3
   80444:	2100      	movs	r1, #0
   80446:	2200      	movs	r2, #0
   80448:	2300      	movs	r3, #0
   8044a:	4c0a      	ldr	r4, [pc, #40]	; (80474 <prvCommandTask+0x84>)
   8044c:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8044e:	4b0a      	ldr	r3, [pc, #40]	; (80478 <prvCommandTask+0x88>)
   80450:	4798      	blx	r3
   80452:	4603      	mov	r3, r0
   80454:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80456:	f107 030c 	add.w	r3, r7, #12
   8045a:	4618      	mov	r0, r3
   8045c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8045e:	4b07      	ldr	r3, [pc, #28]	; (8047c <prvCommandTask+0x8c>)
   80460:	4798      	blx	r3
	}
   80462:	e7dd      	b.n	80420 <prvCommandTask+0x30>
   80464:	00082e4d 	.word	0x00082e4d
   80468:	2007a71c 	.word	0x2007a71c
   8046c:	00083715 	.word	0x00083715
   80470:	0008555d 	.word	0x0008555d
   80474:	00083455 	.word	0x00083455
   80478:	00083ffd 	.word	0x00083ffd
   8047c:	00083d41 	.word	0x00083d41

00080480 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80480:	b590      	push	{r4, r7, lr}
   80482:	b085      	sub	sp, #20
   80484:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   80486:	2302      	movs	r3, #2
   80488:	9300      	str	r3, [sp, #0]
   8048a:	2300      	movs	r3, #0
   8048c:	9301      	str	r3, [sp, #4]
   8048e:	2300      	movs	r3, #0
   80490:	9302      	str	r3, [sp, #8]
   80492:	2300      	movs	r3, #0
   80494:	9303      	str	r3, [sp, #12]
   80496:	4805      	ldr	r0, [pc, #20]	; (804ac <data_test+0x2c>)
   80498:	4905      	ldr	r1, [pc, #20]	; (804b0 <data_test+0x30>)
   8049a:	2282      	movs	r2, #130	; 0x82
   8049c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   804a0:	4c04      	ldr	r4, [pc, #16]	; (804b4 <data_test+0x34>)
   804a2:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   804a4:	bf00      	nop
}
   804a6:	3704      	adds	r7, #4
   804a8:	46bd      	mov	sp, r7
   804aa:	bd90      	pop	{r4, r7, pc}
   804ac:	000804b9 	.word	0x000804b9
   804b0:	00086760 	.word	0x00086760
   804b4:	00083bc1 	.word	0x00083bc1

000804b8 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   804b8:	b590      	push	{r4, r7, lr}
   804ba:	b08b      	sub	sp, #44	; 0x2c
   804bc:	af00      	add	r7, sp, #0
   804be:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   804c0:	687a      	ldr	r2, [r7, #4]
   804c2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   804c6:	429a      	cmp	r2, r3
   804c8:	d002      	beq.n	804d0 <prvDataTask+0x18>
   804ca:	4b38      	ldr	r3, [pc, #224]	; (805ac <prvDataTask+0xf4>)
   804cc:	4798      	blx	r3
   804ce:	e7fe      	b.n	804ce <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   804d0:	230f      	movs	r3, #15
   804d2:	627b      	str	r3, [r7, #36]	; 0x24
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	low = DATA_REQUEST;
   804d4:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804d8:	613b      	str	r3, [r7, #16]
	high = DATA_REQUEST;
   804da:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804de:	60fb      	str	r3, [r7, #12]
	ID = SUB0_ID0;
   804e0:	2314      	movs	r3, #20
   804e2:	623b      	str	r3, [r7, #32]
	PRIORITY = DATA_PRIO;
   804e4:	2319      	movs	r3, #25
   804e6:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{

		low = DATA_REQUEST;
   804e8:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804ec:	613b      	str	r3, [r7, #16]
		high = DATA_REQUEST;
   804ee:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804f2:	60fb      	str	r3, [r7, #12]
		
		xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
   804f4:	4b2e      	ldr	r3, [pc, #184]	; (805b0 <prvDataTask+0xf8>)
   804f6:	681b      	ldr	r3, [r3, #0]
   804f8:	4618      	mov	r0, r3
   804fa:	2100      	movs	r1, #0
   804fc:	2202      	movs	r2, #2
   804fe:	2300      	movs	r3, #0
   80500:	4c2c      	ldr	r4, [pc, #176]	; (805b4 <prvDataTask+0xfc>)
   80502:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);				//This is the CAN API function I have written for us to use.
   80504:	693a      	ldr	r2, [r7, #16]
   80506:	68fb      	ldr	r3, [r7, #12]
   80508:	4610      	mov	r0, r2
   8050a:	4619      	mov	r1, r3
   8050c:	6a3a      	ldr	r2, [r7, #32]
   8050e:	69fb      	ldr	r3, [r7, #28]
   80510:	4c29      	ldr	r4, [pc, #164]	; (805b8 <prvDataTask+0x100>)
   80512:	47a0      	blx	r4
   80514:	61b8      	str	r0, [r7, #24]
		xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
   80516:	4b26      	ldr	r3, [pc, #152]	; (805b0 <prvDataTask+0xf8>)
   80518:	681b      	ldr	r3, [r3, #0]
   8051a:	4618      	mov	r0, r3
   8051c:	2100      	movs	r1, #0
   8051e:	2200      	movs	r2, #0
   80520:	2300      	movs	r3, #0
   80522:	4c26      	ldr	r4, [pc, #152]	; (805bc <prvDataTask+0x104>)
   80524:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 15 clock cycles.
   80526:	4b26      	ldr	r3, [pc, #152]	; (805c0 <prvDataTask+0x108>)
   80528:	4798      	blx	r3
   8052a:	4603      	mov	r3, r0
   8052c:	617b      	str	r3, [r7, #20]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8052e:	f107 0314 	add.w	r3, r7, #20
   80532:	4618      	mov	r0, r3
   80534:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80536:	4b23      	ldr	r3, [pc, #140]	; (805c4 <prvDataTask+0x10c>)
   80538:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   8053a:	4b23      	ldr	r3, [pc, #140]	; (805c8 <prvDataTask+0x110>)
   8053c:	781b      	ldrb	r3, [r3, #0]
   8053e:	2b00      	cmp	r3, #0
   80540:	d016      	beq.n	80570 <prvDataTask+0xb8>
		{
			x = read_can_data(&high, &low, 1234);
   80542:	f107 020c 	add.w	r2, r7, #12
   80546:	f107 0310 	add.w	r3, r7, #16
   8054a:	4610      	mov	r0, r2
   8054c:	4619      	mov	r1, r3
   8054e:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80552:	4b1e      	ldr	r3, [pc, #120]	; (805cc <prvDataTask+0x114>)
   80554:	4798      	blx	r3
   80556:	61b8      	str	r0, [r7, #24]

			if(x)
   80558:	69bb      	ldr	r3, [r7, #24]
   8055a:	2b00      	cmp	r3, #0
   8055c:	d008      	beq.n	80570 <prvDataTask+0xb8>
			{
				glob_stored_data[1] = high;
   8055e:	68fa      	ldr	r2, [r7, #12]
   80560:	4b1b      	ldr	r3, [pc, #108]	; (805d0 <prvDataTask+0x118>)
   80562:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   80564:	693a      	ldr	r2, [r7, #16]
   80566:	4b1a      	ldr	r3, [pc, #104]	; (805d0 <prvDataTask+0x118>)
   80568:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   8056a:	4b17      	ldr	r3, [pc, #92]	; (805c8 <prvDataTask+0x110>)
   8056c:	2200      	movs	r2, #0
   8056e:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comf)
   80570:	4b18      	ldr	r3, [pc, #96]	; (805d4 <prvDataTask+0x11c>)
   80572:	781b      	ldrb	r3, [r3, #0]
   80574:	2b00      	cmp	r3, #0
   80576:	d017      	beq.n	805a8 <prvDataTask+0xf0>
		{
			x = read_can_msg(&high, &low, 1234);
   80578:	f107 020c 	add.w	r2, r7, #12
   8057c:	f107 0310 	add.w	r3, r7, #16
   80580:	4610      	mov	r0, r2
   80582:	4619      	mov	r1, r3
   80584:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80588:	4b13      	ldr	r3, [pc, #76]	; (805d8 <prvDataTask+0x120>)
   8058a:	4798      	blx	r3
   8058c:	61b8      	str	r0, [r7, #24]

			if(x)
   8058e:	69bb      	ldr	r3, [r7, #24]
   80590:	2b00      	cmp	r3, #0
   80592:	d009      	beq.n	805a8 <prvDataTask+0xf0>
			{
				glob_stored_message[1] = high;
   80594:	68fa      	ldr	r2, [r7, #12]
   80596:	4b11      	ldr	r3, [pc, #68]	; (805dc <prvDataTask+0x124>)
   80598:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   8059a:	693a      	ldr	r2, [r7, #16]
   8059c:	4b0f      	ldr	r3, [pc, #60]	; (805dc <prvDataTask+0x124>)
   8059e:	601a      	str	r2, [r3, #0]
				glob_comf = 0;
   805a0:	4b0c      	ldr	r3, [pc, #48]	; (805d4 <prvDataTask+0x11c>)
   805a2:	2200      	movs	r2, #0
   805a4:	701a      	strb	r2, [r3, #0]
			}
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   805a6:	e79f      	b.n	804e8 <prvDataTask+0x30>
   805a8:	e79e      	b.n	804e8 <prvDataTask+0x30>
   805aa:	bf00      	nop
   805ac:	00082e4d 	.word	0x00082e4d
   805b0:	2007a71c 	.word	0x2007a71c
   805b4:	00083715 	.word	0x00083715
   805b8:	0008555d 	.word	0x0008555d
   805bc:	00083455 	.word	0x00083455
   805c0:	00083ffd 	.word	0x00083ffd
   805c4:	00083d41 	.word	0x00083d41
   805c8:	2007a6dc 	.word	0x2007a6dc
   805cc:	0008560d 	.word	0x0008560d
   805d0:	2007a6b4 	.word	0x2007a6b4
   805d4:	2007a784 	.word	0x2007a784
   805d8:	00085659 	.word	0x00085659
   805dc:	2007a748 	.word	0x2007a748

000805e0 <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   805e0:	b590      	push	{r4, r7, lr}
   805e2:	b085      	sub	sp, #20
   805e4:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   805e6:	2301      	movs	r3, #1
   805e8:	9300      	str	r3, [sp, #0]
   805ea:	2300      	movs	r3, #0
   805ec:	9301      	str	r3, [sp, #4]
   805ee:	2300      	movs	r3, #0
   805f0:	9302      	str	r3, [sp, #8]
   805f2:	2300      	movs	r3, #0
   805f4:	9303      	str	r3, [sp, #12]
   805f6:	4805      	ldr	r0, [pc, #20]	; (8060c <housekeep+0x2c>)
   805f8:	4905      	ldr	r1, [pc, #20]	; (80610 <housekeep+0x30>)
   805fa:	2282      	movs	r2, #130	; 0x82
   805fc:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80600:	4c04      	ldr	r4, [pc, #16]	; (80614 <housekeep+0x34>)
   80602:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80604:	bf00      	nop
}
   80606:	3704      	adds	r7, #4
   80608:	46bd      	mov	sp, r7
   8060a:	bd90      	pop	{r4, r7, pc}
   8060c:	00080619 	.word	0x00080619
   80610:	00086764 	.word	0x00086764
   80614:	00083bc1 	.word	0x00083bc1

00080618 <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   80618:	b590      	push	{r4, r7, lr}
   8061a:	b087      	sub	sp, #28
   8061c:	af00      	add	r7, sp, #0
   8061e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   80620:	687a      	ldr	r2, [r7, #4]
   80622:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80626:	429a      	cmp	r2, r3
   80628:	d002      	beq.n	80630 <prvHouseKeepTask+0x18>
   8062a:	4b13      	ldr	r3, [pc, #76]	; (80678 <prvHouseKeepTask+0x60>)
   8062c:	4798      	blx	r3
   8062e:	e7fe      	b.n	8062e <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   80630:	230f      	movs	r3, #15
   80632:	617b      	str	r3, [r7, #20]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	
	ID = SUB0_ID5;
   80634:	2319      	movs	r3, #25
   80636:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80638:	4b10      	ldr	r3, [pc, #64]	; (8067c <prvHouseKeepTask+0x64>)
   8063a:	681b      	ldr	r3, [r3, #0]
   8063c:	4618      	mov	r0, r3
   8063e:	2100      	movs	r1, #0
   80640:	2202      	movs	r2, #2
   80642:	2300      	movs	r3, #0
   80644:	4c0e      	ldr	r4, [pc, #56]	; (80680 <prvHouseKeepTask+0x68>)
   80646:	47a0      	blx	r4
		x = request_housekeeping(ID);		// This is the CAN API function I have written for us to use.
   80648:	6938      	ldr	r0, [r7, #16]
   8064a:	4b0e      	ldr	r3, [pc, #56]	; (80684 <prvHouseKeepTask+0x6c>)
   8064c:	4798      	blx	r3
   8064e:	60f8      	str	r0, [r7, #12]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   80650:	4b0a      	ldr	r3, [pc, #40]	; (8067c <prvHouseKeepTask+0x64>)
   80652:	681b      	ldr	r3, [r3, #0]
   80654:	4618      	mov	r0, r3
   80656:	2100      	movs	r1, #0
   80658:	2200      	movs	r2, #0
   8065a:	2300      	movs	r3, #0
   8065c:	4c0a      	ldr	r4, [pc, #40]	; (80688 <prvHouseKeepTask+0x70>)
   8065e:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   80660:	4b0a      	ldr	r3, [pc, #40]	; (8068c <prvHouseKeepTask+0x74>)
   80662:	4798      	blx	r3
   80664:	4603      	mov	r3, r0
   80666:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80668:	f107 0308 	add.w	r3, r7, #8
   8066c:	4618      	mov	r0, r3
   8066e:	6979      	ldr	r1, [r7, #20]
   80670:	4b07      	ldr	r3, [pc, #28]	; (80690 <prvHouseKeepTask+0x78>)
   80672:	4798      	blx	r3
	}
   80674:	e7e0      	b.n	80638 <prvHouseKeepTask+0x20>
   80676:	bf00      	nop
   80678:	00082e4d 	.word	0x00082e4d
   8067c:	2007a71c 	.word	0x2007a71c
   80680:	00083715 	.word	0x00083715
   80684:	000856a5 	.word	0x000856a5
   80688:	00083455 	.word	0x00083455
   8068c:	00083ffd 	.word	0x00083ffd
   80690:	00083d41 	.word	0x00083d41

00080694 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   80694:	b580      	push	{r7, lr}
   80696:	b082      	sub	sp, #8
   80698:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8069a:	2300      	movs	r3, #0
   8069c:	607b      	str	r3, [r7, #4]
   8069e:	e00f      	b.n	806c0 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   806a0:	4b0a      	ldr	r3, [pc, #40]	; (806cc <vParTestInitialise+0x38>)
   806a2:	687a      	ldr	r2, [r7, #4]
   806a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806a8:	4618      	mov	r0, r3
   806aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806ae:	4b08      	ldr	r3, [pc, #32]	; (806d0 <vParTestInitialise+0x3c>)
   806b0:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   806b2:	6878      	ldr	r0, [r7, #4]
   806b4:	2100      	movs	r1, #0
   806b6:	4b07      	ldr	r3, [pc, #28]	; (806d4 <vParTestInitialise+0x40>)
   806b8:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   806ba:	687b      	ldr	r3, [r7, #4]
   806bc:	3301      	adds	r3, #1
   806be:	607b      	str	r3, [r7, #4]
   806c0:	687b      	ldr	r3, [r7, #4]
   806c2:	2b03      	cmp	r3, #3
   806c4:	d9ec      	bls.n	806a0 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   806c6:	3708      	adds	r7, #8
   806c8:	46bd      	mov	sp, r7
   806ca:	bd80      	pop	{r7, pc}
   806cc:	00086768 	.word	0x00086768
   806d0:	00081ebd 	.word	0x00081ebd
   806d4:	000806d9 	.word	0x000806d9

000806d8 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   806d8:	b580      	push	{r7, lr}
   806da:	b082      	sub	sp, #8
   806dc:	af00      	add	r7, sp, #0
   806de:	6078      	str	r0, [r7, #4]
   806e0:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   806e2:	687b      	ldr	r3, [r7, #4]
   806e4:	2b03      	cmp	r3, #3
   806e6:	d823      	bhi.n	80730 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   806e8:	687b      	ldr	r3, [r7, #4]
   806ea:	2b00      	cmp	r3, #0
   806ec:	d106      	bne.n	806fc <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   806ee:	683b      	ldr	r3, [r7, #0]
   806f0:	2b00      	cmp	r3, #0
   806f2:	bf14      	ite	ne
   806f4:	2300      	movne	r3, #0
   806f6:	2301      	moveq	r3, #1
   806f8:	b2db      	uxtb	r3, r3
   806fa:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   806fc:	683b      	ldr	r3, [r7, #0]
   806fe:	2b00      	cmp	r3, #0
   80700:	d00b      	beq.n	8071a <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   80702:	4b0d      	ldr	r3, [pc, #52]	; (80738 <vParTestSetLED+0x60>)
   80704:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   80706:	4b0d      	ldr	r3, [pc, #52]	; (8073c <vParTestSetLED+0x64>)
   80708:	687a      	ldr	r2, [r7, #4]
   8070a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8070e:	4618      	mov	r0, r3
   80710:	4b0b      	ldr	r3, [pc, #44]	; (80740 <vParTestSetLED+0x68>)
   80712:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80714:	4b0b      	ldr	r3, [pc, #44]	; (80744 <vParTestSetLED+0x6c>)
   80716:	4798      	blx	r3
   80718:	e00a      	b.n	80730 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   8071a:	4b07      	ldr	r3, [pc, #28]	; (80738 <vParTestSetLED+0x60>)
   8071c:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   8071e:	4b07      	ldr	r3, [pc, #28]	; (8073c <vParTestSetLED+0x64>)
   80720:	687a      	ldr	r2, [r7, #4]
   80722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80726:	4618      	mov	r0, r3
   80728:	4b07      	ldr	r3, [pc, #28]	; (80748 <vParTestSetLED+0x70>)
   8072a:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   8072c:	4b05      	ldr	r3, [pc, #20]	; (80744 <vParTestSetLED+0x6c>)
   8072e:	4798      	blx	r3
		}
	}
}
   80730:	3708      	adds	r7, #8
   80732:	46bd      	mov	sp, r7
   80734:	bd80      	pop	{r7, pc}
   80736:	bf00      	nop
   80738:	00082dd1 	.word	0x00082dd1
   8073c:	00086768 	.word	0x00086768
   80740:	00081e29 	.word	0x00081e29
   80744:	00082e15 	.word	0x00082e15
   80748:	00081df5 	.word	0x00081df5

0008074c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8074c:	b480      	push	{r7}
   8074e:	b083      	sub	sp, #12
   80750:	af00      	add	r7, sp, #0
   80752:	4603      	mov	r3, r0
   80754:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80756:	4b08      	ldr	r3, [pc, #32]	; (80778 <NVIC_EnableIRQ+0x2c>)
   80758:	f997 2007 	ldrsb.w	r2, [r7, #7]
   8075c:	0952      	lsrs	r2, r2, #5
   8075e:	79f9      	ldrb	r1, [r7, #7]
   80760:	f001 011f 	and.w	r1, r1, #31
   80764:	2001      	movs	r0, #1
   80766:	fa00 f101 	lsl.w	r1, r0, r1
   8076a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8076e:	370c      	adds	r7, #12
   80770:	46bd      	mov	sp, r7
   80772:	f85d 7b04 	ldr.w	r7, [sp], #4
   80776:	4770      	bx	lr
   80778:	e000e100 	.word	0xe000e100

0008077c <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   8077c:	b480      	push	{r7}
   8077e:	b083      	sub	sp, #12
   80780:	af00      	add	r7, sp, #0
   80782:	4603      	mov	r3, r0
   80784:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80786:	4b09      	ldr	r3, [pc, #36]	; (807ac <NVIC_DisableIRQ+0x30>)
   80788:	f997 2007 	ldrsb.w	r2, [r7, #7]
   8078c:	0952      	lsrs	r2, r2, #5
   8078e:	79f9      	ldrb	r1, [r7, #7]
   80790:	f001 011f 	and.w	r1, r1, #31
   80794:	2001      	movs	r0, #1
   80796:	fa00 f101 	lsl.w	r1, r0, r1
   8079a:	3220      	adds	r2, #32
   8079c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807a0:	370c      	adds	r7, #12
   807a2:	46bd      	mov	sp, r7
   807a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   807a8:	4770      	bx	lr
   807aa:	bf00      	nop
   807ac:	e000e100 	.word	0xe000e100

000807b0 <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807b0:	b480      	push	{r7}
   807b2:	b083      	sub	sp, #12
   807b4:	af00      	add	r7, sp, #0
   807b6:	4603      	mov	r3, r0
   807b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807ba:	4b09      	ldr	r3, [pc, #36]	; (807e0 <NVIC_ClearPendingIRQ+0x30>)
   807bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
   807c0:	0952      	lsrs	r2, r2, #5
   807c2:	79f9      	ldrb	r1, [r7, #7]
   807c4:	f001 011f 	and.w	r1, r1, #31
   807c8:	2001      	movs	r0, #1
   807ca:	fa00 f101 	lsl.w	r1, r0, r1
   807ce:	3260      	adds	r2, #96	; 0x60
   807d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807d4:	370c      	adds	r7, #12
   807d6:	46bd      	mov	sp, r7
   807d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   807dc:	4770      	bx	lr
   807de:	bf00      	nop
   807e0:	e000e100 	.word	0xe000e100

000807e4 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   807e4:	b480      	push	{r7}
   807e6:	b083      	sub	sp, #12
   807e8:	af00      	add	r7, sp, #0
   807ea:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   807ec:	687b      	ldr	r3, [r7, #4]
   807ee:	2280      	movs	r2, #128	; 0x80
   807f0:	601a      	str	r2, [r3, #0]
}
   807f2:	370c      	adds	r7, #12
   807f4:	46bd      	mov	sp, r7
   807f6:	f85d 7b04 	ldr.w	r7, [sp], #4
   807fa:	4770      	bx	lr

000807fc <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   807fc:	b480      	push	{r7}
   807fe:	b083      	sub	sp, #12
   80800:	af00      	add	r7, sp, #0
   80802:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80804:	687b      	ldr	r3, [r7, #4]
   80806:	2201      	movs	r2, #1
   80808:	601a      	str	r2, [r3, #0]
}
   8080a:	370c      	adds	r7, #12
   8080c:	46bd      	mov	sp, r7
   8080e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80812:	4770      	bx	lr

00080814 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   80814:	b480      	push	{r7}
   80816:	b083      	sub	sp, #12
   80818:	af00      	add	r7, sp, #0
   8081a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   8081c:	687b      	ldr	r3, [r7, #4]
   8081e:	2202      	movs	r2, #2
   80820:	601a      	str	r2, [r3, #0]
}
   80822:	370c      	adds	r7, #12
   80824:	46bd      	mov	sp, r7
   80826:	f85d 7b04 	ldr.w	r7, [sp], #4
   8082a:	4770      	bx	lr

0008082c <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   8082c:	b480      	push	{r7}
   8082e:	b083      	sub	sp, #12
   80830:	af00      	add	r7, sp, #0
   80832:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   80834:	687b      	ldr	r3, [r7, #4]
   80836:	685b      	ldr	r3, [r3, #4]
   80838:	f023 0201 	bic.w	r2, r3, #1
   8083c:	687b      	ldr	r3, [r7, #4]
   8083e:	605a      	str	r2, [r3, #4]
}
   80840:	370c      	adds	r7, #12
   80842:	46bd      	mov	sp, r7
   80844:	f85d 7b04 	ldr.w	r7, [sp], #4
   80848:	4770      	bx	lr
   8084a:	bf00      	nop

0008084c <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   8084c:	b480      	push	{r7}
   8084e:	b083      	sub	sp, #12
   80850:	af00      	add	r7, sp, #0
   80852:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80854:	687b      	ldr	r3, [r7, #4]
   80856:	685b      	ldr	r3, [r3, #4]
   80858:	f043 0210 	orr.w	r2, r3, #16
   8085c:	687b      	ldr	r3, [r7, #4]
   8085e:	605a      	str	r2, [r3, #4]
}
   80860:	370c      	adds	r7, #12
   80862:	46bd      	mov	sp, r7
   80864:	f85d 7b04 	ldr.w	r7, [sp], #4
   80868:	4770      	bx	lr
   8086a:	bf00      	nop

0008086c <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   8086c:	b480      	push	{r7}
   8086e:	b083      	sub	sp, #12
   80870:	af00      	add	r7, sp, #0
   80872:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80874:	687b      	ldr	r3, [r7, #4]
   80876:	691b      	ldr	r3, [r3, #16]
}
   80878:	4618      	mov	r0, r3
   8087a:	370c      	adds	r7, #12
   8087c:	46bd      	mov	sp, r7
   8087e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80882:	4770      	bx	lr

00080884 <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
   80884:	b480      	push	{r7}
   80886:	b083      	sub	sp, #12
   80888:	af00      	add	r7, sp, #0
   8088a:	6078      	str	r0, [r7, #4]
   8088c:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
   8088e:	687b      	ldr	r3, [r7, #4]
   80890:	683a      	ldr	r2, [r7, #0]
   80892:	615a      	str	r2, [r3, #20]
}
   80894:	370c      	adds	r7, #12
   80896:	46bd      	mov	sp, r7
   80898:	f85d 7b04 	ldr.w	r7, [sp], #4
   8089c:	4770      	bx	lr
   8089e:	bf00      	nop

000808a0 <spi_slave_transfer>:
 *
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
   808a0:	b590      	push	{r4, r7, lr}
   808a2:	b083      	sub	sp, #12
   808a4:	af00      	add	r7, sp, #0
   808a6:	6078      	str	r0, [r7, #4]
   808a8:	6039      	str	r1, [r7, #0]
	gs_puc_transfer_buffer = p_buf;
   808aa:	4b0c      	ldr	r3, [pc, #48]	; (808dc <spi_slave_transfer+0x3c>)
   808ac:	687a      	ldr	r2, [r7, #4]
   808ae:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_length = size;
   808b0:	4b0b      	ldr	r3, [pc, #44]	; (808e0 <spi_slave_transfer+0x40>)
   808b2:	683a      	ldr	r2, [r7, #0]
   808b4:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_index = 0;
   808b6:	4b0b      	ldr	r3, [pc, #44]	; (808e4 <spi_slave_transfer+0x44>)
   808b8:	2200      	movs	r2, #0
   808ba:	601a      	str	r2, [r3, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0,
   808bc:	4b07      	ldr	r3, [pc, #28]	; (808dc <spi_slave_transfer+0x3c>)
   808be:	681a      	ldr	r2, [r3, #0]
   808c0:	4b08      	ldr	r3, [pc, #32]	; (808e4 <spi_slave_transfer+0x44>)
   808c2:	681b      	ldr	r3, [r3, #0]
   808c4:	4413      	add	r3, r2
   808c6:	781b      	ldrb	r3, [r3, #0]
   808c8:	4807      	ldr	r0, [pc, #28]	; (808e8 <spi_slave_transfer+0x48>)
   808ca:	4619      	mov	r1, r3
   808cc:	2200      	movs	r2, #0
   808ce:	2300      	movs	r3, #0
   808d0:	4c06      	ldr	r4, [pc, #24]	; (808ec <spi_slave_transfer+0x4c>)
   808d2:	47a0      	blx	r4
			0);
}
   808d4:	370c      	adds	r7, #12
   808d6:	46bd      	mov	sp, r7
   808d8:	bd90      	pop	{r4, r7, pc}
   808da:	bf00      	nop
   808dc:	2007045c 	.word	0x2007045c
   808e0:	20070464 	.word	0x20070464
   808e4:	20070460 	.word	0x20070460
   808e8:	40008000 	.word	0x40008000
   808ec:	00080251 	.word	0x00080251

000808f0 <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   808f0:	b580      	push	{r7, lr}
   808f2:	b084      	sub	sp, #16
   808f4:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   808f6:	2300      	movs	r3, #0
   808f8:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   808fa:	2300      	movs	r3, #0
   808fc:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   808fe:	4b0c      	ldr	r3, [pc, #48]	; (80930 <SPI0_Handler+0x40>)
   80900:	607b      	str	r3, [r7, #4]
	
	//pio_toggle_pin(LED1_GPIO);

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80902:	480c      	ldr	r0, [pc, #48]	; (80934 <SPI0_Handler+0x44>)
   80904:	4b0c      	ldr	r3, [pc, #48]	; (80938 <SPI0_Handler+0x48>)
   80906:	4798      	blx	r3
   80908:	4603      	mov	r3, r0
   8090a:	f003 0301 	and.w	r3, r3, #1
   8090e:	2b00      	cmp	r3, #0
   80910:	d00b      	beq.n	8092a <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80912:	1cfb      	adds	r3, r7, #3
   80914:	4807      	ldr	r0, [pc, #28]	; (80934 <SPI0_Handler+0x44>)
   80916:	4909      	ldr	r1, [pc, #36]	; (8093c <SPI0_Handler+0x4c>)
   80918:	461a      	mov	r2, r3
   8091a:	4b09      	ldr	r3, [pc, #36]	; (80940 <SPI0_Handler+0x50>)
   8091c:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   8091e:	687b      	ldr	r3, [r7, #4]
   80920:	681b      	ldr	r3, [r3, #0]
   80922:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80926:	687b      	ldr	r3, [r7, #4]
   80928:	601a      	str	r2, [r3, #0]
	}
}
   8092a:	3710      	adds	r7, #16
   8092c:	46bd      	mov	sp, r7
   8092e:	bd80      	pop	{r7, pc}
   80930:	4000800c 	.word	0x4000800c
   80934:	40008000 	.word	0x40008000
   80938:	0008086d 	.word	0x0008086d
   8093c:	200704c0 	.word	0x200704c0
   80940:	000801e1 	.word	0x000801e1

00080944 <spi_slave_initialize>:

/**
 * \brief Initialize SPI as slave.
 */
static void spi_slave_initialize(void)
{
   80944:	b580      	push	{r7, lr}
   80946:	b082      	sub	sp, #8
   80948:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
   8094a:	4b25      	ldr	r3, [pc, #148]	; (809e0 <spi_slave_initialize+0x9c>)
   8094c:	2200      	movs	r2, #0
   8094e:	601a      	str	r2, [r3, #0]
	gs_spi_status.ul_total_command_number = 0;
   80950:	4b23      	ldr	r3, [pc, #140]	; (809e0 <spi_slave_initialize+0x9c>)
   80952:	2200      	movs	r2, #0
   80954:	605a      	str	r2, [r3, #4]
	for (i = 0; i < NB_STATUS_CMD; i++) {
   80956:	2300      	movs	r3, #0
   80958:	607b      	str	r3, [r7, #4]
   8095a:	e008      	b.n	8096e <spi_slave_initialize+0x2a>
		gs_spi_status.ul_cmd_list[i] = 0;
   8095c:	4b20      	ldr	r3, [pc, #128]	; (809e0 <spi_slave_initialize+0x9c>)
   8095e:	687a      	ldr	r2, [r7, #4]
   80960:	3202      	adds	r2, #2
   80962:	2100      	movs	r1, #0
   80964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
	gs_spi_status.ul_total_command_number = 0;
	for (i = 0; i < NB_STATUS_CMD; i++) {
   80968:	687b      	ldr	r3, [r7, #4]
   8096a:	3301      	adds	r3, #1
   8096c:	607b      	str	r3, [r7, #4]
   8096e:	687b      	ldr	r3, [r7, #4]
   80970:	2b13      	cmp	r3, #19
   80972:	d9f3      	bls.n	8095c <spi_slave_initialize+0x18>
		gs_spi_status.ul_cmd_list[i] = 0;
	}
	gs_ul_spi_state = SLAVE_STATE_DATA;
   80974:	4b1b      	ldr	r3, [pc, #108]	; (809e4 <spi_slave_initialize+0xa0>)
   80976:	2202      	movs	r2, #2
   80978:	601a      	str	r2, [r3, #0]
	gs_ul_spi_cmd = RC_SYN;
   8097a:	4b1b      	ldr	r3, [pc, #108]	; (809e8 <spi_slave_initialize+0xa4>)
   8097c:	4a1b      	ldr	r2, [pc, #108]	; (809ec <spi_slave_initialize+0xa8>)
   8097e:	601a      	str	r2, [r3, #0]

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_SLAVE_BASE);
   80980:	481b      	ldr	r0, [pc, #108]	; (809f0 <spi_slave_initialize+0xac>)
   80982:	4b1c      	ldr	r3, [pc, #112]	; (809f4 <spi_slave_initialize+0xb0>)
   80984:	4798      	blx	r3
	spi_disable(SPI_SLAVE_BASE);
   80986:	481a      	ldr	r0, [pc, #104]	; (809f0 <spi_slave_initialize+0xac>)
   80988:	4b1b      	ldr	r3, [pc, #108]	; (809f8 <spi_slave_initialize+0xb4>)
   8098a:	4798      	blx	r3
	spi_reset(SPI_SLAVE_BASE);
   8098c:	4818      	ldr	r0, [pc, #96]	; (809f0 <spi_slave_initialize+0xac>)
   8098e:	4b1b      	ldr	r3, [pc, #108]	; (809fc <spi_slave_initialize+0xb8>)
   80990:	4798      	blx	r3
	spi_set_slave_mode(SPI_SLAVE_BASE);
   80992:	4817      	ldr	r0, [pc, #92]	; (809f0 <spi_slave_initialize+0xac>)
   80994:	4b1a      	ldr	r3, [pc, #104]	; (80a00 <spi_slave_initialize+0xbc>)
   80996:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
   80998:	4815      	ldr	r0, [pc, #84]	; (809f0 <spi_slave_initialize+0xac>)
   8099a:	4b1a      	ldr	r3, [pc, #104]	; (80a04 <spi_slave_initialize+0xc0>)
   8099c:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
   8099e:	4814      	ldr	r0, [pc, #80]	; (809f0 <spi_slave_initialize+0xac>)
   809a0:	210e      	movs	r1, #14
   809a2:	4b19      	ldr	r3, [pc, #100]	; (80a08 <spi_slave_initialize+0xc4>)
   809a4:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   809a6:	4812      	ldr	r0, [pc, #72]	; (809f0 <spi_slave_initialize+0xac>)
   809a8:	2100      	movs	r1, #0
   809aa:	2201      	movs	r2, #1
   809ac:	4b17      	ldr	r3, [pc, #92]	; (80a0c <spi_slave_initialize+0xc8>)
   809ae:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
   809b0:	480f      	ldr	r0, [pc, #60]	; (809f0 <spi_slave_initialize+0xac>)
   809b2:	2100      	movs	r1, #0
   809b4:	2200      	movs	r2, #0
   809b6:	4b16      	ldr	r3, [pc, #88]	; (80a10 <spi_slave_initialize+0xcc>)
   809b8:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
   809ba:	480d      	ldr	r0, [pc, #52]	; (809f0 <spi_slave_initialize+0xac>)
   809bc:	2100      	movs	r1, #0
   809be:	2200      	movs	r2, #0
   809c0:	4b14      	ldr	r3, [pc, #80]	; (80a14 <spi_slave_initialize+0xd0>)
   809c2:	4798      	blx	r3
	spi_enable_interrupt(SPI_SLAVE_BASE, SPI_IER_RDRF);
   809c4:	480a      	ldr	r0, [pc, #40]	; (809f0 <spi_slave_initialize+0xac>)
   809c6:	2101      	movs	r1, #1
   809c8:	4b13      	ldr	r3, [pc, #76]	; (80a18 <spi_slave_initialize+0xd4>)
   809ca:	4798      	blx	r3
	spi_enable(SPI_SLAVE_BASE);
   809cc:	4808      	ldr	r0, [pc, #32]	; (809f0 <spi_slave_initialize+0xac>)
   809ce:	4b13      	ldr	r3, [pc, #76]	; (80a1c <spi_slave_initialize+0xd8>)
   809d0:	4798      	blx	r3

	/* Start waiting command. */
	spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
   809d2:	4805      	ldr	r0, [pc, #20]	; (809e8 <spi_slave_initialize+0xa4>)
   809d4:	2104      	movs	r1, #4
   809d6:	4b12      	ldr	r3, [pc, #72]	; (80a20 <spi_slave_initialize+0xdc>)
   809d8:	4798      	blx	r3
}
   809da:	3708      	adds	r7, #8
   809dc:	46bd      	mov	sp, r7
   809de:	bd80      	pop	{r7, pc}
   809e0:	20070468 	.word	0x20070468
   809e4:	20070458 	.word	0x20070458
   809e8:	20070000 	.word	0x20070000
   809ec:	55aa55aa 	.word	0x55aa55aa
   809f0:	40008000 	.word	0x40008000
   809f4:	00080189 	.word	0x00080189
   809f8:	00080815 	.word	0x00080815
   809fc:	000807e5 	.word	0x000807e5
   80a00:	0008082d 	.word	0x0008082d
   80a04:	0008084d 	.word	0x0008084d
   80a08:	000801ad 	.word	0x000801ad
   80a0c:	000802d1 	.word	0x000802d1
   80a10:	00080321 	.word	0x00080321
   80a14:	00080371 	.word	0x00080371
   80a18:	00080885 	.word	0x00080885
   80a1c:	000807fd 	.word	0x000807fd
   80a20:	000808a1 	.word	0x000808a1

00080a24 <spi_initialize>:
 * \brief Application entry point for SPI example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80a24:	b580      	push	{r7, lr}
   80a26:	b084      	sub	sp, #16
   80a28:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   80a2a:	2300      	movs	r3, #0
   80a2c:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80a2e:	4b0c      	ldr	r3, [pc, #48]	; (80a60 <spi_initialize+0x3c>)
   80a30:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   80a32:	2300      	movs	r3, #0
   80a34:	80fb      	strh	r3, [r7, #6]

	///* Initialize the SAM system. */
	//sysclk_init();
	//board_init();

	spi_slave_initialize();
   80a36:	4b0b      	ldr	r3, [pc, #44]	; (80a64 <spi_initialize+0x40>)
   80a38:	4798      	blx	r3
	
	*reg_ptr |= 0x00BB;
   80a3a:	68bb      	ldr	r3, [r7, #8]
   80a3c:	681b      	ldr	r3, [r3, #0]
   80a3e:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80a42:	68bb      	ldr	r3, [r7, #8]
   80a44:	601a      	str	r2, [r3, #0]

	/* Configure SPI interrupts for slave only. */
	NVIC_DisableIRQ(SPI_IRQn);
   80a46:	2018      	movs	r0, #24
   80a48:	4b07      	ldr	r3, [pc, #28]	; (80a68 <spi_initialize+0x44>)
   80a4a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
   80a4c:	2018      	movs	r0, #24
   80a4e:	4b07      	ldr	r3, [pc, #28]	; (80a6c <spi_initialize+0x48>)
   80a50:	4798      	blx	r3
	//NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);
   80a52:	2018      	movs	r0, #24
   80a54:	4b06      	ldr	r3, [pc, #24]	; (80a70 <spi_initialize+0x4c>)
   80a56:	4798      	blx	r3
	//while (1) {
		//
		//*reg_ptr |= 0x00BB;
		//
		//}	// Put 0xBB in the SPI shift register.
	return;
   80a58:	bf00      	nop
}
   80a5a:	3710      	adds	r7, #16
   80a5c:	46bd      	mov	sp, r7
   80a5e:	bd80      	pop	{r7, pc}
   80a60:	4000800c 	.word	0x4000800c
   80a64:	00080945 	.word	0x00080945
   80a68:	0008077d 	.word	0x0008077d
   80a6c:	000807b1 	.word	0x000807b1
   80a70:	0008074d 	.word	0x0008074d

00080a74 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80a74:	b480      	push	{r7}
   80a76:	b083      	sub	sp, #12
   80a78:	af00      	add	r7, sp, #0
   80a7a:	4603      	mov	r3, r0
   80a7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a7e:	4b08      	ldr	r3, [pc, #32]	; (80aa0 <NVIC_EnableIRQ+0x2c>)
   80a80:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80a84:	0952      	lsrs	r2, r2, #5
   80a86:	79f9      	ldrb	r1, [r7, #7]
   80a88:	f001 011f 	and.w	r1, r1, #31
   80a8c:	2001      	movs	r0, #1
   80a8e:	fa00 f101 	lsl.w	r1, r0, r1
   80a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80a96:	370c      	adds	r7, #12
   80a98:	46bd      	mov	sp, r7
   80a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a9e:	4770      	bx	lr
   80aa0:	e000e100 	.word	0xe000e100

00080aa4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80aa4:	b480      	push	{r7}
   80aa6:	b083      	sub	sp, #12
   80aa8:	af00      	add	r7, sp, #0
   80aaa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80aac:	687b      	ldr	r3, [r7, #4]
   80aae:	2b07      	cmp	r3, #7
   80ab0:	d825      	bhi.n	80afe <osc_get_rate+0x5a>
   80ab2:	a201      	add	r2, pc, #4	; (adr r2, 80ab8 <osc_get_rate+0x14>)
   80ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ab8:	00080ad9 	.word	0x00080ad9
   80abc:	00080adf 	.word	0x00080adf
   80ac0:	00080ae5 	.word	0x00080ae5
   80ac4:	00080aeb 	.word	0x00080aeb
   80ac8:	00080aef 	.word	0x00080aef
   80acc:	00080af3 	.word	0x00080af3
   80ad0:	00080af7 	.word	0x00080af7
   80ad4:	00080afb 	.word	0x00080afb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80ad8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80adc:	e010      	b.n	80b00 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ae2:	e00d      	b.n	80b00 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80ae4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ae8:	e00a      	b.n	80b00 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80aea:	4b08      	ldr	r3, [pc, #32]	; (80b0c <osc_get_rate+0x68>)
   80aec:	e008      	b.n	80b00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80aee:	4b08      	ldr	r3, [pc, #32]	; (80b10 <osc_get_rate+0x6c>)
   80af0:	e006      	b.n	80b00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80af2:	4b08      	ldr	r3, [pc, #32]	; (80b14 <osc_get_rate+0x70>)
   80af4:	e004      	b.n	80b00 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80af6:	4b07      	ldr	r3, [pc, #28]	; (80b14 <osc_get_rate+0x70>)
   80af8:	e002      	b.n	80b00 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80afa:	4b06      	ldr	r3, [pc, #24]	; (80b14 <osc_get_rate+0x70>)
   80afc:	e000      	b.n	80b00 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80afe:	2300      	movs	r3, #0
}
   80b00:	4618      	mov	r0, r3
   80b02:	370c      	adds	r7, #12
   80b04:	46bd      	mov	sp, r7
   80b06:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b0a:	4770      	bx	lr
   80b0c:	003d0900 	.word	0x003d0900
   80b10:	007a1200 	.word	0x007a1200
   80b14:	00b71b00 	.word	0x00b71b00

00080b18 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80b18:	b580      	push	{r7, lr}
   80b1a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80b1c:	2006      	movs	r0, #6
   80b1e:	4b04      	ldr	r3, [pc, #16]	; (80b30 <sysclk_get_main_hz+0x18>)
   80b20:	4798      	blx	r3
   80b22:	4602      	mov	r2, r0
   80b24:	4613      	mov	r3, r2
   80b26:	00db      	lsls	r3, r3, #3
   80b28:	1a9b      	subs	r3, r3, r2
   80b2a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80b2c:	4618      	mov	r0, r3
   80b2e:	bd80      	pop	{r7, pc}
   80b30:	00080aa5 	.word	0x00080aa5

00080b34 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80b34:	b580      	push	{r7, lr}
   80b36:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80b38:	4b02      	ldr	r3, [pc, #8]	; (80b44 <sysclk_get_cpu_hz+0x10>)
   80b3a:	4798      	blx	r3
   80b3c:	4603      	mov	r3, r0
   80b3e:	085b      	lsrs	r3, r3, #1
}
   80b40:	4618      	mov	r0, r3
   80b42:	bd80      	pop	{r7, pc}
   80b44:	00080b19 	.word	0x00080b19

00080b48 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80b48:	b580      	push	{r7, lr}
   80b4a:	b082      	sub	sp, #8
   80b4c:	af00      	add	r7, sp, #0
   80b4e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80b50:	6878      	ldr	r0, [r7, #4]
   80b52:	4b02      	ldr	r3, [pc, #8]	; (80b5c <sysclk_enable_peripheral_clock+0x14>)
   80b54:	4798      	blx	r3
}
   80b56:	3708      	adds	r7, #8
   80b58:	46bd      	mov	sp, r7
   80b5a:	bd80      	pop	{r7, pc}
   80b5c:	00082449 	.word	0x00082449

00080b60 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   80b60:	b580      	push	{r7, lr}
   80b62:	b084      	sub	sp, #16
   80b64:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80b66:	2300      	movs	r3, #0
   80b68:	60bb      	str	r3, [r7, #8]
   80b6a:	2300      	movs	r3, #0
   80b6c:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   80b6e:	2300      	movs	r3, #0
   80b70:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   80b72:	2300      	movs	r3, #0
   80b74:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80b76:	483b      	ldr	r0, [pc, #236]	; (80c64 <USART0_Handler+0x104>)
   80b78:	4b3b      	ldr	r3, [pc, #236]	; (80c68 <USART0_Handler+0x108>)
   80b7a:	4798      	blx	r3
   80b7c:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   80b7e:	2058      	movs	r0, #88	; 0x58
   80b80:	4b3a      	ldr	r3, [pc, #232]	; (80c6c <USART0_Handler+0x10c>)
   80b82:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   80b84:	4b3a      	ldr	r3, [pc, #232]	; (80c70 <USART0_Handler+0x110>)
   80b86:	781b      	ldrb	r3, [r3, #0]
   80b88:	2b00      	cmp	r3, #0
   80b8a:	d167      	bne.n	80c5c <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   80b8c:	683b      	ldr	r3, [r7, #0]
   80b8e:	f003 0301 	and.w	r3, r3, #1
   80b92:	2b00      	cmp	r3, #0
   80b94:	d062      	beq.n	80c5c <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80b96:	4833      	ldr	r0, [pc, #204]	; (80c64 <USART0_Handler+0x104>)
   80b98:	4936      	ldr	r1, [pc, #216]	; (80c74 <USART0_Handler+0x114>)
   80b9a:	4b37      	ldr	r3, [pc, #220]	; (80c78 <USART0_Handler+0x118>)
   80b9c:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   80b9e:	4b35      	ldr	r3, [pc, #212]	; (80c74 <USART0_Handler+0x114>)
   80ba0:	681b      	ldr	r3, [r3, #0]
   80ba2:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   80ba4:	68bb      	ldr	r3, [r7, #8]
   80ba6:	2b31      	cmp	r3, #49	; 0x31
   80ba8:	d102      	bne.n	80bb0 <USART0_Handler+0x50>
				command_start = 1;
   80baa:	4b34      	ldr	r3, [pc, #208]	; (80c7c <USART0_Handler+0x11c>)
   80bac:	2201      	movs	r2, #1
   80bae:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   80bb0:	68bb      	ldr	r3, [r7, #8]
   80bb2:	2b32      	cmp	r3, #50	; 0x32
   80bb4:	d102      	bne.n	80bbc <USART0_Handler+0x5c>
				command_end = 1;
   80bb6:	4b32      	ldr	r3, [pc, #200]	; (80c80 <USART0_Handler+0x120>)
   80bb8:	2201      	movs	r2, #1
   80bba:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   80bbc:	4b2f      	ldr	r3, [pc, #188]	; (80c7c <USART0_Handler+0x11c>)
   80bbe:	781b      	ldrb	r3, [r3, #0]
   80bc0:	2b01      	cmp	r3, #1
   80bc2:	d11e      	bne.n	80c02 <USART0_Handler+0xa2>
   80bc4:	68bb      	ldr	r3, [r7, #8]
   80bc6:	2b00      	cmp	r3, #0
   80bc8:	d01b      	beq.n	80c02 <USART0_Handler+0xa2>
   80bca:	68bb      	ldr	r3, [r7, #8]
   80bcc:	2b31      	cmp	r3, #49	; 0x31
   80bce:	d018      	beq.n	80c02 <USART0_Handler+0xa2>
   80bd0:	68bb      	ldr	r3, [r7, #8]
   80bd2:	2b32      	cmp	r3, #50	; 0x32
   80bd4:	d015      	beq.n	80c02 <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80bd6:	4b2b      	ldr	r3, [pc, #172]	; (80c84 <USART0_Handler+0x124>)
   80bd8:	781a      	ldrb	r2, [r3, #0]
   80bda:	4b2b      	ldr	r3, [pc, #172]	; (80c88 <USART0_Handler+0x128>)
   80bdc:	fba3 1302 	umull	r1, r3, r3, r2
   80be0:	08d9      	lsrs	r1, r3, #3
   80be2:	460b      	mov	r3, r1
   80be4:	009b      	lsls	r3, r3, #2
   80be6:	440b      	add	r3, r1
   80be8:	005b      	lsls	r3, r3, #1
   80bea:	1ad3      	subs	r3, r2, r3
   80bec:	b2db      	uxtb	r3, r3
   80bee:	68ba      	ldr	r2, [r7, #8]
   80bf0:	b2d1      	uxtb	r1, r2
   80bf2:	4a26      	ldr	r2, [pc, #152]	; (80c8c <USART0_Handler+0x12c>)
   80bf4:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80bf6:	4b23      	ldr	r3, [pc, #140]	; (80c84 <USART0_Handler+0x124>)
   80bf8:	781b      	ldrb	r3, [r3, #0]
   80bfa:	3301      	adds	r3, #1
   80bfc:	b2da      	uxtb	r2, r3
   80bfe:	4b21      	ldr	r3, [pc, #132]	; (80c84 <USART0_Handler+0x124>)
   80c00:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   80c02:	4b1f      	ldr	r3, [pc, #124]	; (80c80 <USART0_Handler+0x120>)
   80c04:	781b      	ldrb	r3, [r3, #0]
   80c06:	2b01      	cmp	r3, #1
   80c08:	d11d      	bne.n	80c46 <USART0_Handler+0xe6>
   80c0a:	4b1c      	ldr	r3, [pc, #112]	; (80c7c <USART0_Handler+0x11c>)
   80c0c:	781b      	ldrb	r3, [r3, #0]
   80c0e:	2b01      	cmp	r3, #1
   80c10:	d119      	bne.n	80c46 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   80c12:	4b1f      	ldr	r3, [pc, #124]	; (80c90 <USART0_Handler+0x130>)
   80c14:	4798      	blx	r3
				command_end = 0;
   80c16:	4b1a      	ldr	r3, [pc, #104]	; (80c80 <USART0_Handler+0x120>)
   80c18:	2200      	movs	r2, #0
   80c1a:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80c1c:	4b17      	ldr	r3, [pc, #92]	; (80c7c <USART0_Handler+0x11c>)
   80c1e:	2200      	movs	r2, #0
   80c20:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   80c22:	4b18      	ldr	r3, [pc, #96]	; (80c84 <USART0_Handler+0x124>)
   80c24:	2200      	movs	r2, #0
   80c26:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80c28:	2300      	movs	r3, #0
   80c2a:	73bb      	strb	r3, [r7, #14]
   80c2c:	e006      	b.n	80c3c <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   80c2e:	7bbb      	ldrb	r3, [r7, #14]
   80c30:	4a16      	ldr	r2, [pc, #88]	; (80c8c <USART0_Handler+0x12c>)
   80c32:	2100      	movs	r1, #0
   80c34:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80c36:	7bbb      	ldrb	r3, [r7, #14]
   80c38:	3301      	adds	r3, #1
   80c3a:	73bb      	strb	r3, [r7, #14]
   80c3c:	7bbb      	ldrb	r3, [r7, #14]
   80c3e:	2b09      	cmp	r3, #9
   80c40:	d9f5      	bls.n	80c2e <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   80c42:	2301      	movs	r3, #1
   80c44:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80c46:	7bfb      	ldrb	r3, [r7, #15]
   80c48:	2b00      	cmp	r3, #0
   80c4a:	d105      	bne.n	80c58 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80c4c:	4b09      	ldr	r3, [pc, #36]	; (80c74 <USART0_Handler+0x114>)
   80c4e:	681b      	ldr	r3, [r3, #0]
   80c50:	4804      	ldr	r0, [pc, #16]	; (80c64 <USART0_Handler+0x104>)
   80c52:	4619      	mov	r1, r3
   80c54:	4b0f      	ldr	r3, [pc, #60]	; (80c94 <USART0_Handler+0x134>)
   80c56:	4798      	blx	r3
					
			command_completed = 0;
   80c58:	2300      	movs	r3, #0
   80c5a:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80c5c:	3710      	adds	r7, #16
   80c5e:	46bd      	mov	sp, r7
   80c60:	bd80      	pop	{r7, pc}
   80c62:	bf00      	nop
   80c64:	40098000 	.word	0x40098000
   80c68:	000826c9 	.word	0x000826c9
   80c6c:	00081e5d 	.word	0x00081e5d
   80c70:	200704c8 	.word	0x200704c8
   80c74:	200704c4 	.word	0x200704c4
   80c78:	0008274d 	.word	0x0008274d
   80c7c:	200704c9 	.word	0x200704c9
   80c80:	200704ca 	.word	0x200704ca
   80c84:	200704d8 	.word	0x200704d8
   80c88:	cccccccd 	.word	0xcccccccd
   80c8c:	200704cc 	.word	0x200704cc
   80c90:	00080c99 	.word	0x00080c99
   80c94:	00082719 	.word	0x00082719

00080c98 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   80c98:	b580      	push	{r7, lr}
   80c9a:	b08a      	sub	sp, #40	; 0x28
   80c9c:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   80c9e:	2300      	movs	r3, #0
   80ca0:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   80ca2:	2301      	movs	r3, #1
   80ca4:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   80ca6:	2300      	movs	r3, #0
   80ca8:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   80caa:	2301      	movs	r3, #1
   80cac:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   80cae:	2301      	movs	r3, #1
   80cb0:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   80cb2:	2301      	movs	r3, #1
   80cb4:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   80cb6:	f240 1327 	movw	r3, #295	; 0x127
   80cba:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   80cbc:	2319      	movs	r3, #25
   80cbe:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   80cc0:	4b7e      	ldr	r3, [pc, #504]	; (80ebc <check_command+0x224>)
   80cc2:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   80cc4:	6938      	ldr	r0, [r7, #16]
   80cc6:	4b7e      	ldr	r3, [pc, #504]	; (80ec0 <check_command+0x228>)
   80cc8:	4798      	blx	r3
   80cca:	4603      	mov	r3, r0
   80ccc:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   80cce:	4b7d      	ldr	r3, [pc, #500]	; (80ec4 <check_command+0x22c>)
   80cd0:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   80cd2:	6938      	ldr	r0, [r7, #16]
   80cd4:	4b7a      	ldr	r3, [pc, #488]	; (80ec0 <check_command+0x228>)
   80cd6:	4798      	blx	r3
   80cd8:	4603      	mov	r3, r0
   80cda:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   80cdc:	4b7a      	ldr	r3, [pc, #488]	; (80ec8 <check_command+0x230>)
   80cde:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   80ce0:	6938      	ldr	r0, [r7, #16]
   80ce2:	4b77      	ldr	r3, [pc, #476]	; (80ec0 <check_command+0x228>)
   80ce4:	4798      	blx	r3
   80ce6:	4603      	mov	r3, r0
   80ce8:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   80cea:	7ebb      	ldrb	r3, [r7, #26]
   80cec:	2b01      	cmp	r3, #1
   80cee:	f040 8088 	bne.w	80e02 <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80cf2:	4b76      	ldr	r3, [pc, #472]	; (80ecc <check_command+0x234>)
   80cf4:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   80cf6:	e00d      	b.n	80d14 <check_command+0x7c>
		{
			character = *message_array;
   80cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80cfa:	781b      	ldrb	r3, [r3, #0]
   80cfc:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80cfe:	bf00      	nop
   80d00:	4873      	ldr	r0, [pc, #460]	; (80ed0 <check_command+0x238>)
   80d02:	6a39      	ldr	r1, [r7, #32]
   80d04:	4b73      	ldr	r3, [pc, #460]	; (80ed4 <check_command+0x23c>)
   80d06:	4798      	blx	r3
   80d08:	4603      	mov	r3, r0
   80d0a:	2b00      	cmp	r3, #0
   80d0c:	d1f8      	bne.n	80d00 <check_command+0x68>
			
			message_array++;
   80d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d10:	3301      	adds	r3, #1
   80d12:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d16:	781b      	ldrb	r3, [r3, #0]
   80d18:	2b00      	cmp	r3, #0
   80d1a:	d1ed      	bne.n	80cf8 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   80d1c:	4b6e      	ldr	r3, [pc, #440]	; (80ed8 <check_command+0x240>)
   80d1e:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80d20:	e00d      	b.n	80d3e <check_command+0xa6>
		{
			character = *message_array;
   80d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d24:	781b      	ldrb	r3, [r3, #0]
   80d26:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80d28:	bf00      	nop
   80d2a:	4869      	ldr	r0, [pc, #420]	; (80ed0 <check_command+0x238>)
   80d2c:	6a39      	ldr	r1, [r7, #32]
   80d2e:	4b69      	ldr	r3, [pc, #420]	; (80ed4 <check_command+0x23c>)
   80d30:	4798      	blx	r3
   80d32:	4603      	mov	r3, r0
   80d34:	2b00      	cmp	r3, #0
   80d36:	d1f8      	bne.n	80d2a <check_command+0x92>
			
			message_array++;
   80d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d3a:	3301      	adds	r3, #1
   80d3c:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d40:	781b      	ldrb	r3, [r3, #0]
   80d42:	2b00      	cmp	r3, #0
   80d44:	d1ed      	bne.n	80d22 <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = can_glob_data_reg[0];						// This is the ADC value retrieved from the subsystem.
   80d46:	4b65      	ldr	r3, [pc, #404]	; (80edc <check_command+0x244>)
   80d48:	681b      	ldr	r3, [r3, #0]
   80d4a:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   80d4c:	1d3b      	adds	r3, r7, #4
   80d4e:	4618      	mov	r0, r3
   80d50:	4b63      	ldr	r3, [pc, #396]	; (80ee0 <check_command+0x248>)
   80d52:	4798      	blx	r3
   80d54:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   80d56:	687b      	ldr	r3, [r7, #4]
   80d58:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80d5a:	7dfb      	ldrb	r3, [r7, #23]
   80d5c:	4618      	mov	r0, r3
   80d5e:	4b61      	ldr	r3, [pc, #388]	; (80ee4 <check_command+0x24c>)
   80d60:	4798      	blx	r3
   80d62:	4603      	mov	r3, r0
   80d64:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   80d66:	7dfb      	ldrb	r3, [r7, #23]
   80d68:	011b      	lsls	r3, r3, #4
   80d6a:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   80d6c:	7bfb      	ldrb	r3, [r7, #15]
   80d6e:	091b      	lsrs	r3, r3, #4
   80d70:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   80d72:	7dfb      	ldrb	r3, [r7, #23]
   80d74:	091b      	lsrs	r3, r3, #4
   80d76:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   80d78:	7bfb      	ldrb	r3, [r7, #15]
   80d7a:	3330      	adds	r3, #48	; 0x30
   80d7c:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   80d7e:	7bbb      	ldrb	r3, [r7, #14]
   80d80:	3330      	adds	r3, #48	; 0x30
   80d82:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   80d84:	69fb      	ldr	r3, [r7, #28]
   80d86:	2b00      	cmp	r3, #0
   80d88:	d00a      	beq.n	80da0 <check_command+0x108>
		{
			character = 0x2B;
   80d8a:	232b      	movs	r3, #43	; 0x2b
   80d8c:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   80d8e:	bf00      	nop
   80d90:	484f      	ldr	r0, [pc, #316]	; (80ed0 <check_command+0x238>)
   80d92:	6a39      	ldr	r1, [r7, #32]
   80d94:	4b4f      	ldr	r3, [pc, #316]	; (80ed4 <check_command+0x23c>)
   80d96:	4798      	blx	r3
   80d98:	4603      	mov	r3, r0
   80d9a:	2b00      	cmp	r3, #0
   80d9c:	d1f8      	bne.n	80d90 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80d9e:	e009      	b.n	80db4 <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   80da0:	232d      	movs	r3, #45	; 0x2d
   80da2:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   80da4:	bf00      	nop
   80da6:	484a      	ldr	r0, [pc, #296]	; (80ed0 <check_command+0x238>)
   80da8:	6a39      	ldr	r1, [r7, #32]
   80daa:	4b4a      	ldr	r3, [pc, #296]	; (80ed4 <check_command+0x23c>)
   80dac:	4798      	blx	r3
   80dae:	4603      	mov	r3, r0
   80db0:	2b00      	cmp	r3, #0
   80db2:	d1f8      	bne.n	80da6 <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80db4:	bf00      	nop
   80db6:	7bbb      	ldrb	r3, [r7, #14]
   80db8:	4845      	ldr	r0, [pc, #276]	; (80ed0 <check_command+0x238>)
   80dba:	4619      	mov	r1, r3
   80dbc:	4b45      	ldr	r3, [pc, #276]	; (80ed4 <check_command+0x23c>)
   80dbe:	4798      	blx	r3
   80dc0:	4603      	mov	r3, r0
   80dc2:	2b00      	cmp	r3, #0
   80dc4:	d1f7      	bne.n	80db6 <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   80dc6:	bf00      	nop
   80dc8:	7bfb      	ldrb	r3, [r7, #15]
   80dca:	4841      	ldr	r0, [pc, #260]	; (80ed0 <check_command+0x238>)
   80dcc:	4619      	mov	r1, r3
   80dce:	4b41      	ldr	r3, [pc, #260]	; (80ed4 <check_command+0x23c>)
   80dd0:	4798      	blx	r3
   80dd2:	4603      	mov	r3, r0
   80dd4:	2b00      	cmp	r3, #0
   80dd6:	d1f7      	bne.n	80dc8 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   80dd8:	4b43      	ldr	r3, [pc, #268]	; (80ee8 <check_command+0x250>)
   80dda:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80ddc:	e00d      	b.n	80dfa <check_command+0x162>
		{
			character = *message_array;
   80dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80de0:	781b      	ldrb	r3, [r3, #0]
   80de2:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80de4:	bf00      	nop
   80de6:	483a      	ldr	r0, [pc, #232]	; (80ed0 <check_command+0x238>)
   80de8:	6a39      	ldr	r1, [r7, #32]
   80dea:	4b3a      	ldr	r3, [pc, #232]	; (80ed4 <check_command+0x23c>)
   80dec:	4798      	blx	r3
   80dee:	4603      	mov	r3, r0
   80df0:	2b00      	cmp	r3, #0
   80df2:	d1f8      	bne.n	80de6 <check_command+0x14e>
			
			message_array++;
   80df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80df6:	3301      	adds	r3, #1
   80df8:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   80dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80dfc:	781b      	ldrb	r3, [r3, #0]
   80dfe:	2b00      	cmp	r3, #0
   80e00:	d1ed      	bne.n	80dde <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   80e02:	7e7b      	ldrb	r3, [r7, #25]
   80e04:	2b01      	cmp	r3, #1
   80e06:	d114      	bne.n	80e32 <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   80e08:	4b38      	ldr	r3, [pc, #224]	; (80eec <check_command+0x254>)
   80e0a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e0c:	e00d      	b.n	80e2a <check_command+0x192>
		{
			character = *message_array;
   80e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e10:	781b      	ldrb	r3, [r3, #0]
   80e12:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e14:	bf00      	nop
   80e16:	482e      	ldr	r0, [pc, #184]	; (80ed0 <check_command+0x238>)
   80e18:	6a39      	ldr	r1, [r7, #32]
   80e1a:	4b2e      	ldr	r3, [pc, #184]	; (80ed4 <check_command+0x23c>)
   80e1c:	4798      	blx	r3
   80e1e:	4603      	mov	r3, r0
   80e20:	2b00      	cmp	r3, #0
   80e22:	d1f8      	bne.n	80e16 <check_command+0x17e>
			
			message_array++;
   80e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e26:	3301      	adds	r3, #1
   80e28:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e2c:	781b      	ldrb	r3, [r3, #0]
   80e2e:	2b00      	cmp	r3, #0
   80e30:	d1ed      	bne.n	80e0e <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   80e32:	7e3b      	ldrb	r3, [r7, #24]
   80e34:	2b01      	cmp	r3, #1
   80e36:	d13d      	bne.n	80eb4 <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   80e38:	4b2d      	ldr	r3, [pc, #180]	; (80ef0 <check_command+0x258>)
   80e3a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e3c:	e00d      	b.n	80e5a <check_command+0x1c2>
		{
			character = *message_array;
   80e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e40:	781b      	ldrb	r3, [r3, #0]
   80e42:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e44:	bf00      	nop
   80e46:	4822      	ldr	r0, [pc, #136]	; (80ed0 <check_command+0x238>)
   80e48:	6a39      	ldr	r1, [r7, #32]
   80e4a:	4b22      	ldr	r3, [pc, #136]	; (80ed4 <check_command+0x23c>)
   80e4c:	4798      	blx	r3
   80e4e:	4603      	mov	r3, r0
   80e50:	2b00      	cmp	r3, #0
   80e52:	d1f8      	bne.n	80e46 <check_command+0x1ae>
			
			message_array++;
   80e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e56:	3301      	adds	r3, #1
   80e58:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   80e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e5c:	781b      	ldrb	r3, [r3, #0]
   80e5e:	2b00      	cmp	r3, #0
   80e60:	d1ed      	bne.n	80e3e <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(can_glob_msg_reg[0]);	// This is the ADC value retrieved from the subsystem.
   80e62:	4b24      	ldr	r3, [pc, #144]	; (80ef4 <check_command+0x25c>)
   80e64:	681b      	ldr	r3, [r3, #0]
   80e66:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   80e68:	68bb      	ldr	r3, [r7, #8]
   80e6a:	b2db      	uxtb	r3, r3
   80e6c:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   80e6e:	68bb      	ldr	r3, [r7, #8]
   80e70:	2b40      	cmp	r3, #64	; 0x40
   80e72:	d802      	bhi.n	80e7a <check_command+0x1e2>
   80e74:	68bb      	ldr	r3, [r7, #8]
   80e76:	2b5a      	cmp	r3, #90	; 0x5a
   80e78:	d807      	bhi.n	80e8a <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   80e7a:	bf00      	nop
   80e7c:	4814      	ldr	r0, [pc, #80]	; (80ed0 <check_command+0x238>)
   80e7e:	68b9      	ldr	r1, [r7, #8]
   80e80:	4b14      	ldr	r3, [pc, #80]	; (80ed4 <check_command+0x23c>)
   80e82:	4798      	blx	r3
   80e84:	4603      	mov	r3, r0
   80e86:	2b00      	cmp	r3, #0
   80e88:	d1f8      	bne.n	80e7c <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   80e8a:	4b1b      	ldr	r3, [pc, #108]	; (80ef8 <check_command+0x260>)
   80e8c:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80e8e:	e00d      	b.n	80eac <check_command+0x214>
		{
			character = *message_array;
   80e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e92:	781b      	ldrb	r3, [r3, #0]
   80e94:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e96:	bf00      	nop
   80e98:	480d      	ldr	r0, [pc, #52]	; (80ed0 <check_command+0x238>)
   80e9a:	6a39      	ldr	r1, [r7, #32]
   80e9c:	4b0d      	ldr	r3, [pc, #52]	; (80ed4 <check_command+0x23c>)
   80e9e:	4798      	blx	r3
   80ea0:	4603      	mov	r3, r0
   80ea2:	2b00      	cmp	r3, #0
   80ea4:	d1f8      	bne.n	80e98 <check_command+0x200>
			
			message_array++;
   80ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80ea8:	3301      	adds	r3, #1
   80eaa:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   80eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80eae:	781b      	ldrb	r3, [r3, #0]
   80eb0:	2b00      	cmp	r3, #0
   80eb2:	d1ed      	bne.n	80e90 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   80eb4:	bf00      	nop
}
   80eb6:	3728      	adds	r7, #40	; 0x28
   80eb8:	46bd      	mov	sp, r7
   80eba:	bd80      	pop	{r7, pc}
   80ebc:	00086778 	.word	0x00086778
   80ec0:	00080efd 	.word	0x00080efd
   80ec4:	0008677c 	.word	0x0008677c
   80ec8:	00086788 	.word	0x00086788
   80ecc:	0008678c 	.word	0x0008678c
   80ed0:	40098000 	.word	0x40098000
   80ed4:	00082719 	.word	0x00082719
   80ed8:	000867ac 	.word	0x000867ac
   80edc:	2007a6e8 	.word	0x2007a6e8
   80ee0:	00080f59 	.word	0x00080f59
   80ee4:	00080ff1 	.word	0x00080ff1
   80ee8:	000867c8 	.word	0x000867c8
   80eec:	000867d0 	.word	0x000867d0
   80ef0:	000867ec 	.word	0x000867ec
   80ef4:	2007a714 	.word	0x2007a714
   80ef8:	00086814 	.word	0x00086814

00080efc <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   80efc:	b480      	push	{r7}
   80efe:	b085      	sub	sp, #20
   80f00:	af00      	add	r7, sp, #0
   80f02:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   80f04:	2300      	movs	r3, #0
   80f06:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   80f08:	2301      	movs	r3, #1
   80f0a:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   80f0c:	687b      	ldr	r3, [r7, #4]
   80f0e:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   80f10:	2300      	movs	r3, #0
   80f12:	73fb      	strb	r3, [r7, #15]
   80f14:	e014      	b.n	80f40 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   80f16:	68bb      	ldr	r3, [r7, #8]
   80f18:	781a      	ldrb	r2, [r3, #0]
   80f1a:	7bfb      	ldrb	r3, [r7, #15]
   80f1c:	490d      	ldr	r1, [pc, #52]	; (80f54 <check_string+0x58>)
   80f1e:	5ccb      	ldrb	r3, [r1, r3]
   80f20:	429a      	cmp	r2, r3
   80f22:	d002      	beq.n	80f2a <check_string+0x2e>
		{
			ret_val = 0;
   80f24:	2300      	movs	r3, #0
   80f26:	73bb      	strb	r3, [r7, #14]
			break;
   80f28:	e00d      	b.n	80f46 <check_string+0x4a>
		}
		if (!*temp_str)
   80f2a:	68bb      	ldr	r3, [r7, #8]
   80f2c:	781b      	ldrb	r3, [r3, #0]
   80f2e:	2b00      	cmp	r3, #0
   80f30:	d100      	bne.n	80f34 <check_string+0x38>
			break;
   80f32:	e008      	b.n	80f46 <check_string+0x4a>
			
		temp_str++;
   80f34:	68bb      	ldr	r3, [r7, #8]
   80f36:	3301      	adds	r3, #1
   80f38:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   80f3a:	7bfb      	ldrb	r3, [r7, #15]
   80f3c:	3301      	adds	r3, #1
   80f3e:	73fb      	strb	r3, [r7, #15]
   80f40:	7bfb      	ldrb	r3, [r7, #15]
   80f42:	2b09      	cmp	r3, #9
   80f44:	d9e7      	bls.n	80f16 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   80f46:	7bbb      	ldrb	r3, [r7, #14]
}
   80f48:	4618      	mov	r0, r3
   80f4a:	3714      	adds	r7, #20
   80f4c:	46bd      	mov	sp, r7
   80f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f52:	4770      	bx	lr
   80f54:	200704cc 	.word	0x200704cc

00080f58 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   80f58:	b580      	push	{r7, lr}
   80f5a:	b084      	sub	sp, #16
   80f5c:	af00      	add	r7, sp, #0
   80f5e:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   80f60:	f04f 0300 	mov.w	r3, #0
   80f64:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   80f66:	687b      	ldr	r3, [r7, #4]
   80f68:	681b      	ldr	r3, [r3, #0]
   80f6a:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   80f6c:	68bb      	ldr	r3, [r7, #8]
   80f6e:	089b      	lsrs	r3, r3, #2
   80f70:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   80f72:	4b1b      	ldr	r3, [pc, #108]	; (80fe0 <convert_to_temp+0x88>)
   80f74:	68b8      	ldr	r0, [r7, #8]
   80f76:	4798      	blx	r3
   80f78:	4603      	mov	r3, r0
   80f7a:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   80f7c:	4b19      	ldr	r3, [pc, #100]	; (80fe4 <convert_to_temp+0x8c>)
   80f7e:	68f8      	ldr	r0, [r7, #12]
   80f80:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   80f84:	4798      	blx	r3
   80f86:	4603      	mov	r3, r0
   80f88:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   80f8a:	4b17      	ldr	r3, [pc, #92]	; (80fe8 <convert_to_temp+0x90>)
   80f8c:	68f8      	ldr	r0, [r7, #12]
   80f8e:	f04f 0100 	mov.w	r1, #0
   80f92:	4798      	blx	r3
   80f94:	4603      	mov	r3, r0
   80f96:	2b00      	cmp	r3, #0
   80f98:	d009      	beq.n	80fae <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   80f9a:	4b14      	ldr	r3, [pc, #80]	; (80fec <convert_to_temp+0x94>)
   80f9c:	68f8      	ldr	r0, [r7, #12]
   80f9e:	4798      	blx	r3
   80fa0:	4603      	mov	r3, r0
   80fa2:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   80fa4:	687b      	ldr	r3, [r7, #4]
   80fa6:	68ba      	ldr	r2, [r7, #8]
   80fa8:	601a      	str	r2, [r3, #0]
		return 1;	
   80faa:	2301      	movs	r3, #1
   80fac:	e013      	b.n	80fd6 <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   80fae:	4b0c      	ldr	r3, [pc, #48]	; (80fe0 <convert_to_temp+0x88>)
   80fb0:	68b8      	ldr	r0, [r7, #8]
   80fb2:	4798      	blx	r3
   80fb4:	4603      	mov	r3, r0
   80fb6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   80fba:	4b0c      	ldr	r3, [pc, #48]	; (80fec <convert_to_temp+0x94>)
   80fbc:	4610      	mov	r0, r2
   80fbe:	4798      	blx	r3
   80fc0:	4603      	mov	r3, r0
   80fc2:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   80fc4:	4b09      	ldr	r3, [pc, #36]	; (80fec <convert_to_temp+0x94>)
   80fc6:	68f8      	ldr	r0, [r7, #12]
   80fc8:	4798      	blx	r3
   80fca:	4603      	mov	r3, r0
   80fcc:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   80fce:	687b      	ldr	r3, [r7, #4]
   80fd0:	68ba      	ldr	r2, [r7, #8]
   80fd2:	601a      	str	r2, [r3, #0]
		return 0;
   80fd4:	2300      	movs	r3, #0
	}
}
   80fd6:	4618      	mov	r0, r3
   80fd8:	3710      	adds	r7, #16
   80fda:	46bd      	mov	sp, r7
   80fdc:	bd80      	pop	{r7, pc}
   80fde:	bf00      	nop
   80fe0:	00085fb1 	.word	0x00085fb1
   80fe4:	00086061 	.word	0x00086061
   80fe8:	000863c5 	.word	0x000863c5
   80fec:	000863ed 	.word	0x000863ed

00080ff0 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   80ff0:	b480      	push	{r7}
   80ff2:	b085      	sub	sp, #20
   80ff4:	af00      	add	r7, sp, #0
   80ff6:	4603      	mov	r3, r0
   80ff8:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   80ffa:	2300      	movs	r3, #0
   80ffc:	73fb      	strb	r3, [r7, #15]
   80ffe:	2300      	movs	r3, #0
   81000:	73bb      	strb	r3, [r7, #14]
   81002:	2300      	movs	r3, #0
   81004:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   81006:	79fb      	ldrb	r3, [r7, #7]
   81008:	2b09      	cmp	r3, #9
   8100a:	d919      	bls.n	81040 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   8100c:	79fa      	ldrb	r2, [r7, #7]
   8100e:	4b10      	ldr	r3, [pc, #64]	; (81050 <convert_to_bcd+0x60>)
   81010:	fba3 1302 	umull	r1, r3, r3, r2
   81014:	08d9      	lsrs	r1, r3, #3
   81016:	460b      	mov	r3, r1
   81018:	009b      	lsls	r3, r3, #2
   8101a:	440b      	add	r3, r1
   8101c:	005b      	lsls	r3, r3, #1
   8101e:	1ad3      	subs	r3, r2, r3
   81020:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   81022:	79fa      	ldrb	r2, [r7, #7]
   81024:	4b0a      	ldr	r3, [pc, #40]	; (81050 <convert_to_bcd+0x60>)
   81026:	fba3 1302 	umull	r1, r3, r3, r2
   8102a:	08db      	lsrs	r3, r3, #3
   8102c:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   8102e:	7bfb      	ldrb	r3, [r7, #15]
   81030:	011b      	lsls	r3, r3, #4
   81032:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   81034:	7bfa      	ldrb	r2, [r7, #15]
   81036:	7bbb      	ldrb	r3, [r7, #14]
   81038:	4313      	orrs	r3, r2
   8103a:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   8103c:	7b7b      	ldrb	r3, [r7, #13]
   8103e:	e000      	b.n	81042 <convert_to_bcd+0x52>
	}
	else
		return temp;
   81040:	79fb      	ldrb	r3, [r7, #7]
}
   81042:	4618      	mov	r0, r3
   81044:	3714      	adds	r7, #20
   81046:	46bd      	mov	sp, r7
   81048:	f85d 7b04 	ldr.w	r7, [sp], #4
   8104c:	4770      	bx	lr
   8104e:	bf00      	nop
   81050:	cccccccd 	.word	0xcccccccd

00081054 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   81054:	b5b0      	push	{r4, r5, r7, lr}
   81056:	b086      	sub	sp, #24
   81058:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   8105a:	4b13      	ldr	r3, [pc, #76]	; (810a8 <configure_usart+0x54>)
   8105c:	463c      	mov	r4, r7
   8105e:	461d      	mov	r5, r3
   81060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   81062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81064:	e895 0003 	ldmia.w	r5, {r0, r1}
   81068:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   8106c:	2011      	movs	r0, #17
   8106e:	4b0f      	ldr	r3, [pc, #60]	; (810ac <configure_usart+0x58>)
   81070:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   81072:	4b0f      	ldr	r3, [pc, #60]	; (810b0 <configure_usart+0x5c>)
   81074:	4798      	blx	r3
   81076:	4603      	mov	r3, r0
   81078:	463a      	mov	r2, r7
   8107a:	480e      	ldr	r0, [pc, #56]	; (810b4 <configure_usart+0x60>)
   8107c:	4611      	mov	r1, r2
   8107e:	461a      	mov	r2, r3
   81080:	4b0d      	ldr	r3, [pc, #52]	; (810b8 <configure_usart+0x64>)
   81082:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   81084:	480b      	ldr	r0, [pc, #44]	; (810b4 <configure_usart+0x60>)
   81086:	f04f 31ff 	mov.w	r1, #4294967295
   8108a:	4b0c      	ldr	r3, [pc, #48]	; (810bc <configure_usart+0x68>)
   8108c:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   8108e:	4809      	ldr	r0, [pc, #36]	; (810b4 <configure_usart+0x60>)
   81090:	4b0b      	ldr	r3, [pc, #44]	; (810c0 <configure_usart+0x6c>)
   81092:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   81094:	4807      	ldr	r0, [pc, #28]	; (810b4 <configure_usart+0x60>)
   81096:	4b0b      	ldr	r3, [pc, #44]	; (810c4 <configure_usart+0x70>)
   81098:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   8109a:	2011      	movs	r0, #17
   8109c:	4b0a      	ldr	r3, [pc, #40]	; (810c8 <configure_usart+0x74>)
   8109e:	4798      	blx	r3
}
   810a0:	3718      	adds	r7, #24
   810a2:	46bd      	mov	sp, r7
   810a4:	bdb0      	pop	{r4, r5, r7, pc}
   810a6:	bf00      	nop
   810a8:	00086818 	.word	0x00086818
   810ac:	00080b49 	.word	0x00080b49
   810b0:	00080b35 	.word	0x00080b35
   810b4:	40098000 	.word	0x40098000
   810b8:	000825ad 	.word	0x000825ad
   810bc:	000826ad 	.word	0x000826ad
   810c0:	00082631 	.word	0x00082631
   810c4:	00082661 	.word	0x00082661
   810c8:	00080a75 	.word	0x00080a75

000810cc <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   810cc:	b580      	push	{r7, lr}
   810ce:	b084      	sub	sp, #16
   810d0:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   810d2:	2300      	movs	r3, #0
   810d4:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   810d6:	2300      	movs	r3, #0
   810d8:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   810da:	4b1a      	ldr	r3, [pc, #104]	; (81144 <usart_initialize+0x78>)
   810dc:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   810de:	4b1a      	ldr	r3, [pc, #104]	; (81148 <usart_initialize+0x7c>)
   810e0:	2200      	movs	r2, #0
   810e2:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   810e4:	2300      	movs	r3, #0
   810e6:	73fb      	strb	r3, [r7, #15]
   810e8:	e006      	b.n	810f8 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   810ea:	7bfb      	ldrb	r3, [r7, #15]
   810ec:	4a17      	ldr	r2, [pc, #92]	; (8114c <usart_initialize+0x80>)
   810ee:	2100      	movs	r1, #0
   810f0:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   810f2:	7bfb      	ldrb	r3, [r7, #15]
   810f4:	3301      	adds	r3, #1
   810f6:	73fb      	strb	r3, [r7, #15]
   810f8:	7bfb      	ldrb	r3, [r7, #15]
   810fa:	2b09      	cmp	r3, #9
   810fc:	d9f5      	bls.n	810ea <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   810fe:	4814      	ldr	r0, [pc, #80]	; (81150 <usart_initialize+0x84>)
   81100:	2101      	movs	r1, #1
   81102:	4b14      	ldr	r3, [pc, #80]	; (81154 <usart_initialize+0x88>)
   81104:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   81106:	4812      	ldr	r0, [pc, #72]	; (81150 <usart_initialize+0x84>)
   81108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8110c:	4b12      	ldr	r3, [pc, #72]	; (81158 <usart_initialize+0x8c>)
   8110e:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   81110:	4b12      	ldr	r3, [pc, #72]	; (8115c <usart_initialize+0x90>)
   81112:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   81114:	e00d      	b.n	81132 <usart_initialize+0x66>
	{
		character = *message_array;
   81116:	68bb      	ldr	r3, [r7, #8]
   81118:	781b      	ldrb	r3, [r3, #0]
   8111a:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   8111c:	bf00      	nop
   8111e:	480c      	ldr	r0, [pc, #48]	; (81150 <usart_initialize+0x84>)
   81120:	6879      	ldr	r1, [r7, #4]
   81122:	4b0f      	ldr	r3, [pc, #60]	; (81160 <usart_initialize+0x94>)
   81124:	4798      	blx	r3
   81126:	4603      	mov	r3, r0
   81128:	2b00      	cmp	r3, #0
   8112a:	d1f8      	bne.n	8111e <usart_initialize+0x52>
			
		message_array++;
   8112c:	68bb      	ldr	r3, [r7, #8]
   8112e:	3301      	adds	r3, #1
   81130:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   81132:	68bb      	ldr	r3, [r7, #8]
   81134:	781b      	ldrb	r3, [r3, #0]
   81136:	2b00      	cmp	r3, #0
   81138:	d1ed      	bne.n	81116 <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   8113a:	bf00      	nop
}
   8113c:	3710      	adds	r7, #16
   8113e:	46bd      	mov	sp, r7
   81140:	bd80      	pop	{r7, pc}
   81142:	bf00      	nop
   81144:	00081055 	.word	0x00081055
   81148:	200704c8 	.word	0x200704c8
   8114c:	200704cc 	.word	0x200704cc
   81150:	40098000 	.word	0x40098000
   81154:	00082691 	.word	0x00082691
   81158:	000826ad 	.word	0x000826ad
   8115c:	00086830 	.word	0x00086830
   81160:	00082719 	.word	0x00082719

00081164 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   81164:	b580      	push	{r7, lr}
   81166:	b082      	sub	sp, #8
   81168:	af00      	add	r7, sp, #0
   8116a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8116c:	687b      	ldr	r3, [r7, #4]
   8116e:	2b07      	cmp	r3, #7
   81170:	d82e      	bhi.n	811d0 <osc_enable+0x6c>
   81172:	a201      	add	r2, pc, #4	; (adr r2, 81178 <osc_enable+0x14>)
   81174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81178:	000811d1 	.word	0x000811d1
   8117c:	00081199 	.word	0x00081199
   81180:	000811a1 	.word	0x000811a1
   81184:	000811a9 	.word	0x000811a9
   81188:	000811b1 	.word	0x000811b1
   8118c:	000811b9 	.word	0x000811b9
   81190:	000811c1 	.word	0x000811c1
   81194:	000811c9 	.word	0x000811c9
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81198:	2000      	movs	r0, #0
   8119a:	4b0f      	ldr	r3, [pc, #60]	; (811d8 <osc_enable+0x74>)
   8119c:	4798      	blx	r3
		break;
   8119e:	e017      	b.n	811d0 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   811a0:	2001      	movs	r0, #1
   811a2:	4b0d      	ldr	r3, [pc, #52]	; (811d8 <osc_enable+0x74>)
   811a4:	4798      	blx	r3
		break;
   811a6:	e013      	b.n	811d0 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   811a8:	2000      	movs	r0, #0
   811aa:	4b0c      	ldr	r3, [pc, #48]	; (811dc <osc_enable+0x78>)
   811ac:	4798      	blx	r3
		break;
   811ae:	e00f      	b.n	811d0 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   811b0:	2010      	movs	r0, #16
   811b2:	4b0a      	ldr	r3, [pc, #40]	; (811dc <osc_enable+0x78>)
   811b4:	4798      	blx	r3
		break;
   811b6:	e00b      	b.n	811d0 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   811b8:	2020      	movs	r0, #32
   811ba:	4b08      	ldr	r3, [pc, #32]	; (811dc <osc_enable+0x78>)
   811bc:	4798      	blx	r3
		break;
   811be:	e007      	b.n	811d0 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   811c0:	2000      	movs	r0, #0
   811c2:	4b07      	ldr	r3, [pc, #28]	; (811e0 <osc_enable+0x7c>)
   811c4:	4798      	blx	r3
		break;
   811c6:	e003      	b.n	811d0 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   811c8:	2001      	movs	r0, #1
   811ca:	4b05      	ldr	r3, [pc, #20]	; (811e0 <osc_enable+0x7c>)
   811cc:	4798      	blx	r3
		break;
   811ce:	bf00      	nop
	}
}
   811d0:	3708      	adds	r7, #8
   811d2:	46bd      	mov	sp, r7
   811d4:	bd80      	pop	{r7, pc}
   811d6:	bf00      	nop
   811d8:	00082261 	.word	0x00082261
   811dc:	000822d1 	.word	0x000822d1
   811e0:	00082371 	.word	0x00082371

000811e4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   811e4:	b580      	push	{r7, lr}
   811e6:	b082      	sub	sp, #8
   811e8:	af00      	add	r7, sp, #0
   811ea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   811ec:	687b      	ldr	r3, [r7, #4]
   811ee:	2b07      	cmp	r3, #7
   811f0:	d826      	bhi.n	81240 <osc_is_ready+0x5c>
   811f2:	a201      	add	r2, pc, #4	; (adr r2, 811f8 <osc_is_ready+0x14>)
   811f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   811f8:	00081219 	.word	0x00081219
   811fc:	0008121d 	.word	0x0008121d
   81200:	0008121d 	.word	0x0008121d
   81204:	0008122f 	.word	0x0008122f
   81208:	0008122f 	.word	0x0008122f
   8120c:	0008122f 	.word	0x0008122f
   81210:	0008122f 	.word	0x0008122f
   81214:	0008122f 	.word	0x0008122f
	case OSC_SLCK_32K_RC:
		return 1;
   81218:	2301      	movs	r3, #1
   8121a:	e012      	b.n	81242 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8121c:	4b0b      	ldr	r3, [pc, #44]	; (8124c <osc_is_ready+0x68>)
   8121e:	4798      	blx	r3
   81220:	4603      	mov	r3, r0
   81222:	2b00      	cmp	r3, #0
   81224:	bf0c      	ite	eq
   81226:	2300      	moveq	r3, #0
   81228:	2301      	movne	r3, #1
   8122a:	b2db      	uxtb	r3, r3
   8122c:	e009      	b.n	81242 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8122e:	4b08      	ldr	r3, [pc, #32]	; (81250 <osc_is_ready+0x6c>)
   81230:	4798      	blx	r3
   81232:	4603      	mov	r3, r0
   81234:	2b00      	cmp	r3, #0
   81236:	bf0c      	ite	eq
   81238:	2300      	moveq	r3, #0
   8123a:	2301      	movne	r3, #1
   8123c:	b2db      	uxtb	r3, r3
   8123e:	e000      	b.n	81242 <osc_is_ready+0x5e>
	}

	return 0;
   81240:	2300      	movs	r3, #0
}
   81242:	4618      	mov	r0, r3
   81244:	3708      	adds	r7, #8
   81246:	46bd      	mov	sp, r7
   81248:	bd80      	pop	{r7, pc}
   8124a:	bf00      	nop
   8124c:	0008229d 	.word	0x0008229d
   81250:	000823dd 	.word	0x000823dd

00081254 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81254:	b480      	push	{r7}
   81256:	b083      	sub	sp, #12
   81258:	af00      	add	r7, sp, #0
   8125a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8125c:	687b      	ldr	r3, [r7, #4]
   8125e:	2b07      	cmp	r3, #7
   81260:	d825      	bhi.n	812ae <osc_get_rate+0x5a>
   81262:	a201      	add	r2, pc, #4	; (adr r2, 81268 <osc_get_rate+0x14>)
   81264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81268:	00081289 	.word	0x00081289
   8126c:	0008128f 	.word	0x0008128f
   81270:	00081295 	.word	0x00081295
   81274:	0008129b 	.word	0x0008129b
   81278:	0008129f 	.word	0x0008129f
   8127c:	000812a3 	.word	0x000812a3
   81280:	000812a7 	.word	0x000812a7
   81284:	000812ab 	.word	0x000812ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81288:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8128c:	e010      	b.n	812b0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8128e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81292:	e00d      	b.n	812b0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81298:	e00a      	b.n	812b0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8129a:	4b08      	ldr	r3, [pc, #32]	; (812bc <osc_get_rate+0x68>)
   8129c:	e008      	b.n	812b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8129e:	4b08      	ldr	r3, [pc, #32]	; (812c0 <osc_get_rate+0x6c>)
   812a0:	e006      	b.n	812b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   812a2:	4b08      	ldr	r3, [pc, #32]	; (812c4 <osc_get_rate+0x70>)
   812a4:	e004      	b.n	812b0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   812a6:	4b07      	ldr	r3, [pc, #28]	; (812c4 <osc_get_rate+0x70>)
   812a8:	e002      	b.n	812b0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   812aa:	4b06      	ldr	r3, [pc, #24]	; (812c4 <osc_get_rate+0x70>)
   812ac:	e000      	b.n	812b0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   812ae:	2300      	movs	r3, #0
}
   812b0:	4618      	mov	r0, r3
   812b2:	370c      	adds	r7, #12
   812b4:	46bd      	mov	sp, r7
   812b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   812ba:	4770      	bx	lr
   812bc:	003d0900 	.word	0x003d0900
   812c0:	007a1200 	.word	0x007a1200
   812c4:	00b71b00 	.word	0x00b71b00

000812c8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   812c8:	b580      	push	{r7, lr}
   812ca:	b082      	sub	sp, #8
   812cc:	af00      	add	r7, sp, #0
   812ce:	4603      	mov	r3, r0
   812d0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   812d2:	bf00      	nop
   812d4:	79fb      	ldrb	r3, [r7, #7]
   812d6:	4618      	mov	r0, r3
   812d8:	4b05      	ldr	r3, [pc, #20]	; (812f0 <osc_wait_ready+0x28>)
   812da:	4798      	blx	r3
   812dc:	4603      	mov	r3, r0
   812de:	f083 0301 	eor.w	r3, r3, #1
   812e2:	b2db      	uxtb	r3, r3
   812e4:	2b00      	cmp	r3, #0
   812e6:	d1f5      	bne.n	812d4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   812e8:	3708      	adds	r7, #8
   812ea:	46bd      	mov	sp, r7
   812ec:	bd80      	pop	{r7, pc}
   812ee:	bf00      	nop
   812f0:	000811e5 	.word	0x000811e5

000812f4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   812f4:	b580      	push	{r7, lr}
   812f6:	b086      	sub	sp, #24
   812f8:	af00      	add	r7, sp, #0
   812fa:	60f8      	str	r0, [r7, #12]
   812fc:	607a      	str	r2, [r7, #4]
   812fe:	603b      	str	r3, [r7, #0]
   81300:	460b      	mov	r3, r1
   81302:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   81304:	687b      	ldr	r3, [r7, #4]
   81306:	2b00      	cmp	r3, #0
   81308:	d107      	bne.n	8131a <pll_config_init+0x26>
   8130a:	683b      	ldr	r3, [r7, #0]
   8130c:	2b00      	cmp	r3, #0
   8130e:	d104      	bne.n	8131a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81310:	68fb      	ldr	r3, [r7, #12]
   81312:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   81316:	601a      	str	r2, [r3, #0]
   81318:	e019      	b.n	8134e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8131a:	7afb      	ldrb	r3, [r7, #11]
   8131c:	4618      	mov	r0, r3
   8131e:	4b0d      	ldr	r3, [pc, #52]	; (81354 <pll_config_init+0x60>)
   81320:	4798      	blx	r3
   81322:	4602      	mov	r2, r0
   81324:	687b      	ldr	r3, [r7, #4]
   81326:	fbb2 f3f3 	udiv	r3, r2, r3
   8132a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   8132c:	697b      	ldr	r3, [r7, #20]
   8132e:	683a      	ldr	r2, [r7, #0]
   81330:	fb02 f303 	mul.w	r3, r2, r3
   81334:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   81336:	683b      	ldr	r3, [r7, #0]
   81338:	3b01      	subs	r3, #1
   8133a:	041a      	lsls	r2, r3, #16
   8133c:	4b06      	ldr	r3, [pc, #24]	; (81358 <pll_config_init+0x64>)
   8133e:	4013      	ands	r3, r2
   81340:	687a      	ldr	r2, [r7, #4]
   81342:	b2d2      	uxtb	r2, r2
   81344:	4313      	orrs	r3, r2
   81346:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8134a:	68fb      	ldr	r3, [r7, #12]
   8134c:	601a      	str	r2, [r3, #0]
	}
}
   8134e:	3718      	adds	r7, #24
   81350:	46bd      	mov	sp, r7
   81352:	bd80      	pop	{r7, pc}
   81354:	00081255 	.word	0x00081255
   81358:	07ff0000 	.word	0x07ff0000

0008135c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8135c:	b580      	push	{r7, lr}
   8135e:	b082      	sub	sp, #8
   81360:	af00      	add	r7, sp, #0
   81362:	6078      	str	r0, [r7, #4]
   81364:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   81366:	683b      	ldr	r3, [r7, #0]
   81368:	2b00      	cmp	r3, #0
   8136a:	d108      	bne.n	8137e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8136c:	4b08      	ldr	r3, [pc, #32]	; (81390 <pll_enable+0x34>)
   8136e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81370:	4b08      	ldr	r3, [pc, #32]	; (81394 <pll_enable+0x38>)
   81372:	687a      	ldr	r2, [r7, #4]
   81374:	6812      	ldr	r2, [r2, #0]
   81376:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8137a:	629a      	str	r2, [r3, #40]	; 0x28
   8137c:	e005      	b.n	8138a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8137e:	4b05      	ldr	r3, [pc, #20]	; (81394 <pll_enable+0x38>)
   81380:	687a      	ldr	r2, [r7, #4]
   81382:	6812      	ldr	r2, [r2, #0]
   81384:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   81388:	61da      	str	r2, [r3, #28]
	}
}
   8138a:	3708      	adds	r7, #8
   8138c:	46bd      	mov	sp, r7
   8138e:	bd80      	pop	{r7, pc}
   81390:	000823f9 	.word	0x000823f9
   81394:	400e0600 	.word	0x400e0600

00081398 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   81398:	b580      	push	{r7, lr}
   8139a:	b082      	sub	sp, #8
   8139c:	af00      	add	r7, sp, #0
   8139e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   813a0:	687b      	ldr	r3, [r7, #4]
   813a2:	2b00      	cmp	r3, #0
   813a4:	d103      	bne.n	813ae <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   813a6:	4b05      	ldr	r3, [pc, #20]	; (813bc <pll_is_locked+0x24>)
   813a8:	4798      	blx	r3
   813aa:	4603      	mov	r3, r0
   813ac:	e002      	b.n	813b4 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   813ae:	4b04      	ldr	r3, [pc, #16]	; (813c0 <pll_is_locked+0x28>)
   813b0:	4798      	blx	r3
   813b2:	4603      	mov	r3, r0
}
   813b4:	4618      	mov	r0, r3
   813b6:	3708      	adds	r7, #8
   813b8:	46bd      	mov	sp, r7
   813ba:	bd80      	pop	{r7, pc}
   813bc:	00082411 	.word	0x00082411
   813c0:	0008242d 	.word	0x0008242d

000813c4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   813c4:	b580      	push	{r7, lr}
   813c6:	b082      	sub	sp, #8
   813c8:	af00      	add	r7, sp, #0
   813ca:	4603      	mov	r3, r0
   813cc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   813ce:	79fb      	ldrb	r3, [r7, #7]
   813d0:	3b03      	subs	r3, #3
   813d2:	2b04      	cmp	r3, #4
   813d4:	d808      	bhi.n	813e8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   813d6:	79fb      	ldrb	r3, [r7, #7]
   813d8:	4618      	mov	r0, r3
   813da:	4b05      	ldr	r3, [pc, #20]	; (813f0 <pll_enable_source+0x2c>)
   813dc:	4798      	blx	r3
		osc_wait_ready(e_src);
   813de:	79fb      	ldrb	r3, [r7, #7]
   813e0:	4618      	mov	r0, r3
   813e2:	4b04      	ldr	r3, [pc, #16]	; (813f4 <pll_enable_source+0x30>)
   813e4:	4798      	blx	r3
		break;
   813e6:	e000      	b.n	813ea <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   813e8:	bf00      	nop
	}
}
   813ea:	3708      	adds	r7, #8
   813ec:	46bd      	mov	sp, r7
   813ee:	bd80      	pop	{r7, pc}
   813f0:	00081165 	.word	0x00081165
   813f4:	000812c9 	.word	0x000812c9

000813f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   813f8:	b580      	push	{r7, lr}
   813fa:	b082      	sub	sp, #8
   813fc:	af00      	add	r7, sp, #0
   813fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81400:	bf00      	nop
   81402:	6878      	ldr	r0, [r7, #4]
   81404:	4b04      	ldr	r3, [pc, #16]	; (81418 <pll_wait_for_lock+0x20>)
   81406:	4798      	blx	r3
   81408:	4603      	mov	r3, r0
   8140a:	2b00      	cmp	r3, #0
   8140c:	d0f9      	beq.n	81402 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8140e:	2300      	movs	r3, #0
}
   81410:	4618      	mov	r0, r3
   81412:	3708      	adds	r7, #8
   81414:	46bd      	mov	sp, r7
   81416:	bd80      	pop	{r7, pc}
   81418:	00081399 	.word	0x00081399

0008141c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8141c:	b580      	push	{r7, lr}
   8141e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81420:	2006      	movs	r0, #6
   81422:	4b04      	ldr	r3, [pc, #16]	; (81434 <sysclk_get_main_hz+0x18>)
   81424:	4798      	blx	r3
   81426:	4602      	mov	r2, r0
   81428:	4613      	mov	r3, r2
   8142a:	00db      	lsls	r3, r3, #3
   8142c:	1a9b      	subs	r3, r3, r2
   8142e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81430:	4618      	mov	r0, r3
   81432:	bd80      	pop	{r7, pc}
   81434:	00081255 	.word	0x00081255

00081438 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81438:	b580      	push	{r7, lr}
   8143a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   8143c:	4b02      	ldr	r3, [pc, #8]	; (81448 <sysclk_get_cpu_hz+0x10>)
   8143e:	4798      	blx	r3
   81440:	4603      	mov	r3, r0
   81442:	085b      	lsrs	r3, r3, #1
}
   81444:	4618      	mov	r0, r3
   81446:	bd80      	pop	{r7, pc}
   81448:	0008141d 	.word	0x0008141d

0008144c <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8144c:	b590      	push	{r4, r7, lr}
   8144e:	b083      	sub	sp, #12
   81450:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81452:	4b10      	ldr	r3, [pc, #64]	; (81494 <sysclk_init+0x48>)
   81454:	4798      	blx	r3
   81456:	4603      	mov	r3, r0
   81458:	4618      	mov	r0, r3
   8145a:	4b0f      	ldr	r3, [pc, #60]	; (81498 <sysclk_init+0x4c>)
   8145c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8145e:	2006      	movs	r0, #6
   81460:	4b0e      	ldr	r3, [pc, #56]	; (8149c <sysclk_init+0x50>)
   81462:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   81464:	1d3b      	adds	r3, r7, #4
   81466:	4618      	mov	r0, r3
   81468:	2106      	movs	r1, #6
   8146a:	2201      	movs	r2, #1
   8146c:	230e      	movs	r3, #14
   8146e:	4c0c      	ldr	r4, [pc, #48]	; (814a0 <sysclk_init+0x54>)
   81470:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   81472:	1d3b      	adds	r3, r7, #4
   81474:	4618      	mov	r0, r3
   81476:	2100      	movs	r1, #0
   81478:	4b0a      	ldr	r3, [pc, #40]	; (814a4 <sysclk_init+0x58>)
   8147a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8147c:	2000      	movs	r0, #0
   8147e:	4b0a      	ldr	r3, [pc, #40]	; (814a8 <sysclk_init+0x5c>)
   81480:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81482:	2010      	movs	r0, #16
   81484:	4b09      	ldr	r3, [pc, #36]	; (814ac <sysclk_init+0x60>)
   81486:	4798      	blx	r3
		break;
   81488:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8148a:	4b09      	ldr	r3, [pc, #36]	; (814b0 <sysclk_init+0x64>)
   8148c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8148e:	370c      	adds	r7, #12
   81490:	46bd      	mov	sp, r7
   81492:	bd90      	pop	{r4, r7, pc}
   81494:	00081439 	.word	0x00081439
   81498:	00082a25 	.word	0x00082a25
   8149c:	000813c5 	.word	0x000813c5
   814a0:	000812f5 	.word	0x000812f5
   814a4:	0008135d 	.word	0x0008135d
   814a8:	000813f9 	.word	0x000813f9
   814ac:	000821dd 	.word	0x000821dd
   814b0:	000828a5 	.word	0x000828a5

000814b4 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   814b4:	b580      	push	{r7, lr}
   814b6:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   814b8:	4b16      	ldr	r3, [pc, #88]	; (81514 <safe_board_init+0x60>)
   814ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   814be:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   814c0:	2001      	movs	r0, #1
   814c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814c6:	4b14      	ldr	r3, [pc, #80]	; (81518 <safe_board_init+0x64>)
   814c8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   814ca:	2000      	movs	r0, #0
   814cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814d0:	4b11      	ldr	r3, [pc, #68]	; (81518 <safe_board_init+0x64>)
   814d2:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   814d4:	2034      	movs	r0, #52	; 0x34
   814d6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   814da:	4b0f      	ldr	r3, [pc, #60]	; (81518 <safe_board_init+0x64>)
   814dc:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   814de:	2035      	movs	r0, #53	; 0x35
   814e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   814e4:	4b0c      	ldr	r3, [pc, #48]	; (81518 <safe_board_init+0x64>)
   814e6:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   814e8:	202f      	movs	r0, #47	; 0x2f
   814ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814ee:	4b0a      	ldr	r3, [pc, #40]	; (81518 <safe_board_init+0x64>)
   814f0:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   814f2:	202e      	movs	r0, #46	; 0x2e
   814f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814f8:	4b07      	ldr	r3, [pc, #28]	; (81518 <safe_board_init+0x64>)
   814fa:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   814fc:	208f      	movs	r0, #143	; 0x8f
   814fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81502:	4b05      	ldr	r3, [pc, #20]	; (81518 <safe_board_init+0x64>)
   81504:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   81506:	2090      	movs	r0, #144	; 0x90
   81508:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8150c:	4b02      	ldr	r3, [pc, #8]	; (81518 <safe_board_init+0x64>)
   8150e:	4798      	blx	r3
	#endif
	return;
   81510:	bf00      	nop
}
   81512:	bd80      	pop	{r7, pc}
   81514:	400e1a50 	.word	0x400e1a50
   81518:	00081ebd 	.word	0x00081ebd

0008151c <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   8151c:	b580      	push	{r7, lr}
   8151e:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   81520:	2057      	movs	r0, #87	; 0x57
   81522:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81526:	4b25      	ldr	r3, [pc, #148]	; (815bc <board_init+0xa0>)
   81528:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   8152a:	2057      	movs	r0, #87	; 0x57
   8152c:	4b24      	ldr	r3, [pc, #144]	; (815c0 <board_init+0xa4>)
   8152e:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81530:	203b      	movs	r0, #59	; 0x3b
   81532:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81536:	4b21      	ldr	r3, [pc, #132]	; (815bc <board_init+0xa0>)
   81538:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8153a:	2055      	movs	r0, #85	; 0x55
   8153c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81540:	4b1e      	ldr	r3, [pc, #120]	; (815bc <board_init+0xa0>)
   81542:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81544:	2056      	movs	r0, #86	; 0x56
   81546:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8154a:	4b1c      	ldr	r3, [pc, #112]	; (815bc <board_init+0xa0>)
   8154c:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8154e:	2087      	movs	r0, #135	; 0x87
   81550:	491c      	ldr	r1, [pc, #112]	; (815c4 <board_init+0xa8>)
   81552:	4b1a      	ldr	r3, [pc, #104]	; (815bc <board_init+0xa0>)
   81554:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81556:	2037      	movs	r0, #55	; 0x37
   81558:	491b      	ldr	r1, [pc, #108]	; (815c8 <board_init+0xac>)
   8155a:	4b18      	ldr	r3, [pc, #96]	; (815bc <board_init+0xa0>)
   8155c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8155e:	481b      	ldr	r0, [pc, #108]	; (815cc <board_init+0xb0>)
   81560:	f44f 7140 	mov.w	r1, #768	; 0x300
   81564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81568:	4b19      	ldr	r3, [pc, #100]	; (815d0 <board_init+0xb4>)
   8156a:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   8156c:	2019      	movs	r0, #25
   8156e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81572:	4b12      	ldr	r3, [pc, #72]	; (815bc <board_init+0xa0>)
   81574:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81576:	201a      	movs	r0, #26
   81578:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8157c:	4b0f      	ldr	r3, [pc, #60]	; (815bc <board_init+0xa0>)
   8157e:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81580:	201b      	movs	r0, #27
   81582:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81586:	4b0d      	ldr	r3, [pc, #52]	; (815bc <board_init+0xa0>)
   81588:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   8158a:	201c      	movs	r0, #28
   8158c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81590:	4b0a      	ldr	r3, [pc, #40]	; (815bc <board_init+0xa0>)
   81592:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   81594:	200a      	movs	r0, #10
   81596:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8159a:	4b08      	ldr	r3, [pc, #32]	; (815bc <board_init+0xa0>)
   8159c:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   8159e:	200b      	movs	r0, #11
   815a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815a4:	4b05      	ldr	r3, [pc, #20]	; (815bc <board_init+0xa0>)
   815a6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   815a8:	208e      	movs	r0, #142	; 0x8e
   815aa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815ae:	4b03      	ldr	r3, [pc, #12]	; (815bc <board_init+0xa0>)
   815b0:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   815b2:	208e      	movs	r0, #142	; 0x8e
   815b4:	4b07      	ldr	r3, [pc, #28]	; (815d4 <board_init+0xb8>)
   815b6:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   815b8:	bd80      	pop	{r7, pc}
   815ba:	bf00      	nop
   815bc:	00081ebd 	.word	0x00081ebd
   815c0:	00081df5 	.word	0x00081df5
   815c4:	28000079 	.word	0x28000079
   815c8:	28000059 	.word	0x28000059
   815cc:	400e0e00 	.word	0x400e0e00
   815d0:	00081ff9 	.word	0x00081ff9
   815d4:	00081e29 	.word	0x00081e29

000815d8 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   815d8:	b480      	push	{r7}
   815da:	b083      	sub	sp, #12
   815dc:	af00      	add	r7, sp, #0
   815de:	6078      	str	r0, [r7, #4]
   815e0:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   815e2:	687b      	ldr	r3, [r7, #4]
   815e4:	683a      	ldr	r2, [r7, #0]
   815e6:	601a      	str	r2, [r3, #0]
}
   815e8:	370c      	adds	r7, #12
   815ea:	46bd      	mov	sp, r7
   815ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   815f0:	4770      	bx	lr
   815f2:	bf00      	nop

000815f4 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   815f4:	b480      	push	{r7}
   815f6:	b083      	sub	sp, #12
   815f8:	af00      	add	r7, sp, #0
   815fa:	6078      	str	r0, [r7, #4]
   815fc:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   815fe:	687b      	ldr	r3, [r7, #4]
   81600:	683a      	ldr	r2, [r7, #0]
   81602:	605a      	str	r2, [r3, #4]
}
   81604:	370c      	adds	r7, #12
   81606:	46bd      	mov	sp, r7
   81608:	f85d 7b04 	ldr.w	r7, [sp], #4
   8160c:	4770      	bx	lr
   8160e:	bf00      	nop

00081610 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   81610:	b580      	push	{r7, lr}
   81612:	b082      	sub	sp, #8
   81614:	af00      	add	r7, sp, #0
   81616:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   81618:	687b      	ldr	r3, [r7, #4]
   8161a:	685b      	ldr	r3, [r3, #4]
   8161c:	4618      	mov	r0, r3
   8161e:	4b02      	ldr	r3, [pc, #8]	; (81628 <sn65hvd234_enable+0x18>)
   81620:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   81622:	3708      	adds	r7, #8
   81624:	46bd      	mov	sp, r7
   81626:	bd80      	pop	{r7, pc}
   81628:	00081df5 	.word	0x00081df5

0008162c <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   8162c:	b580      	push	{r7, lr}
   8162e:	b082      	sub	sp, #8
   81630:	af00      	add	r7, sp, #0
   81632:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   81634:	687b      	ldr	r3, [r7, #4]
   81636:	681b      	ldr	r3, [r3, #0]
   81638:	4618      	mov	r0, r3
   8163a:	4b02      	ldr	r3, [pc, #8]	; (81644 <sn65hvd234_disable_low_power+0x18>)
   8163c:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   8163e:	3708      	adds	r7, #8
   81640:	46bd      	mov	sp, r7
   81642:	bd80      	pop	{r7, pc}
   81644:	00081e29 	.word	0x00081e29

00081648 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   81648:	b580      	push	{r7, lr}
   8164a:	b08a      	sub	sp, #40	; 0x28
   8164c:	af00      	add	r7, sp, #0
   8164e:	60f8      	str	r0, [r7, #12]
   81650:	60b9      	str	r1, [r7, #8]
   81652:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81654:	687b      	ldr	r3, [r7, #4]
   81656:	f246 12a8 	movw	r2, #25000	; 0x61a8
   8165a:	fb02 f203 	mul.w	r2, r2, r3
   8165e:	68bb      	ldr	r3, [r7, #8]
   81660:	4413      	add	r3, r2
   81662:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   81664:	687b      	ldr	r3, [r7, #4]
   81666:	f246 11a8 	movw	r1, #25000	; 0x61a8
   8166a:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   8166e:	fbb2 f3f3 	udiv	r3, r2, r3
   81672:	2b80      	cmp	r3, #128	; 0x80
   81674:	d901      	bls.n	8167a <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   81676:	2300      	movs	r3, #0
   81678:	e085      	b.n	81786 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   8167a:	68bb      	ldr	r3, [r7, #8]
   8167c:	085a      	lsrs	r2, r3, #1
   8167e:	687b      	ldr	r3, [r7, #4]
   81680:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81684:	fb01 f303 	mul.w	r3, r1, r3
   81688:	429a      	cmp	r2, r3
   8168a:	d201      	bcs.n	81690 <can_set_baudrate+0x48>
		return 0;
   8168c:	2300      	movs	r3, #0
   8168e:	e07a      	b.n	81786 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   81690:	2308      	movs	r3, #8
   81692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   81696:	f04f 33ff 	mov.w	r3, #4294967295
   8169a:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   8169c:	2308      	movs	r3, #8
   8169e:	77fb      	strb	r3, [r7, #31]
   816a0:	e02b      	b.n	816fa <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   816a2:	7ffb      	ldrb	r3, [r7, #31]
   816a4:	687a      	ldr	r2, [r7, #4]
   816a6:	fb02 f303 	mul.w	r3, r2, r3
   816aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   816ae:	fb02 f303 	mul.w	r3, r2, r3
   816b2:	68ba      	ldr	r2, [r7, #8]
   816b4:	fbb2 f3f3 	udiv	r3, r2, r3
   816b8:	2b80      	cmp	r3, #128	; 0x80
   816ba:	d81b      	bhi.n	816f4 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   816bc:	7ffb      	ldrb	r3, [r7, #31]
   816be:	687a      	ldr	r2, [r7, #4]
   816c0:	fb02 f303 	mul.w	r3, r2, r3
   816c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   816c8:	fb02 f203 	mul.w	r2, r2, r3
   816cc:	68bb      	ldr	r3, [r7, #8]
   816ce:	fbb3 f1f2 	udiv	r1, r3, r2
   816d2:	fb02 f201 	mul.w	r2, r2, r1
   816d6:	1a9b      	subs	r3, r3, r2
   816d8:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   816da:	69ba      	ldr	r2, [r7, #24]
   816dc:	6a3b      	ldr	r3, [r7, #32]
   816de:	429a      	cmp	r2, r3
   816e0:	d208      	bcs.n	816f4 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   816e2:	69bb      	ldr	r3, [r7, #24]
   816e4:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   816e6:	7ffb      	ldrb	r3, [r7, #31]
   816e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   816ec:	6a3b      	ldr	r3, [r7, #32]
   816ee:	2b00      	cmp	r3, #0
   816f0:	d100      	bne.n	816f4 <can_set_baudrate+0xac>
					break;
   816f2:	e005      	b.n	81700 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   816f4:	7ffb      	ldrb	r3, [r7, #31]
   816f6:	3301      	adds	r3, #1
   816f8:	77fb      	strb	r3, [r7, #31]
   816fa:	7ffb      	ldrb	r3, [r7, #31]
   816fc:	2b19      	cmp	r3, #25
   816fe:	d9d0      	bls.n	816a2 <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   81700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81704:	687a      	ldr	r2, [r7, #4]
   81706:	fb02 f303 	mul.w	r3, r2, r3
   8170a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8170e:	fb02 f303 	mul.w	r3, r2, r3
   81712:	68ba      	ldr	r2, [r7, #8]
   81714:	fbb2 f3f3 	udiv	r3, r2, r3
   81718:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   8171a:	7dfb      	ldrb	r3, [r7, #23]
   8171c:	2b01      	cmp	r3, #1
   8171e:	d801      	bhi.n	81724 <can_set_baudrate+0xdc>
		return 0;
   81720:	2300      	movs	r3, #0
   81722:	e030      	b.n	81786 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   81724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81728:	f1a3 0208 	sub.w	r2, r3, #8
   8172c:	4613      	mov	r3, r2
   8172e:	005b      	lsls	r3, r3, #1
   81730:	4413      	add	r3, r2
   81732:	005b      	lsls	r3, r3, #1
   81734:	4a16      	ldr	r2, [pc, #88]	; (81790 <can_set_baudrate+0x148>)
   81736:	4413      	add	r3, r2
   81738:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   8173a:	68f8      	ldr	r0, [r7, #12]
   8173c:	4b15      	ldr	r3, [pc, #84]	; (81794 <can_set_baudrate+0x14c>)
   8173e:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81740:	693b      	ldr	r3, [r7, #16]
   81742:	78db      	ldrb	r3, [r3, #3]
   81744:	3b01      	subs	r3, #1
   81746:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   8174a:	693b      	ldr	r3, [r7, #16]
   8174c:	789b      	ldrb	r3, [r3, #2]
   8174e:	3b01      	subs	r3, #1
   81750:	011b      	lsls	r3, r3, #4
   81752:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81756:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81758:	693b      	ldr	r3, [r7, #16]
   8175a:	785b      	ldrb	r3, [r3, #1]
   8175c:	3b01      	subs	r3, #1
   8175e:	021b      	lsls	r3, r3, #8
   81760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81764:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81766:	693b      	ldr	r3, [r7, #16]
   81768:	791b      	ldrb	r3, [r3, #4]
   8176a:	3b01      	subs	r3, #1
   8176c:	031b      	lsls	r3, r3, #12
   8176e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81772:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81774:	7dfb      	ldrb	r3, [r7, #23]
   81776:	3b01      	subs	r3, #1
   81778:	041b      	lsls	r3, r3, #16
   8177a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8177e:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81780:	68fb      	ldr	r3, [r7, #12]
   81782:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81784:	2301      	movs	r3, #1
}
   81786:	4618      	mov	r0, r3
   81788:	3728      	adds	r7, #40	; 0x28
   8178a:	46bd      	mov	sp, r7
   8178c:	bd80      	pop	{r7, pc}
   8178e:	bf00      	nop
   81790:	00086850 	.word	0x00086850
   81794:	00081841 	.word	0x00081841

00081798 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81798:	b580      	push	{r7, lr}
   8179a:	b086      	sub	sp, #24
   8179c:	af00      	add	r7, sp, #0
   8179e:	60f8      	str	r0, [r7, #12]
   817a0:	60b9      	str	r1, [r7, #8]
   817a2:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   817a4:	68f8      	ldr	r0, [r7, #12]
   817a6:	68b9      	ldr	r1, [r7, #8]
   817a8:	687a      	ldr	r2, [r7, #4]
   817aa:	4b17      	ldr	r3, [pc, #92]	; (81808 <can_init+0x70>)
   817ac:	4798      	blx	r3
   817ae:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   817b0:	697b      	ldr	r3, [r7, #20]
   817b2:	2b00      	cmp	r3, #0
   817b4:	d101      	bne.n	817ba <can_init+0x22>
		return 0;
   817b6:	2300      	movs	r3, #0
   817b8:	e021      	b.n	817fe <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   817ba:	68f8      	ldr	r0, [r7, #12]
   817bc:	4b13      	ldr	r3, [pc, #76]	; (8180c <can_init+0x74>)
   817be:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   817c0:	68f8      	ldr	r0, [r7, #12]
   817c2:	4b13      	ldr	r3, [pc, #76]	; (81810 <can_init+0x78>)
   817c4:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   817c6:	2300      	movs	r3, #0
   817c8:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   817ca:	2300      	movs	r3, #0
   817cc:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   817ce:	e006      	b.n	817de <can_init+0x46>
		ul_flag = can_get_status(p_can);
   817d0:	68f8      	ldr	r0, [r7, #12]
   817d2:	4b10      	ldr	r3, [pc, #64]	; (81814 <can_init+0x7c>)
   817d4:	4798      	blx	r3
   817d6:	6178      	str	r0, [r7, #20]
		ul_tick++;
   817d8:	693b      	ldr	r3, [r7, #16]
   817da:	3301      	adds	r3, #1
   817dc:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   817de:	697b      	ldr	r3, [r7, #20]
   817e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   817e4:	2b00      	cmp	r3, #0
   817e6:	d103      	bne.n	817f0 <can_init+0x58>
   817e8:	693a      	ldr	r2, [r7, #16]
   817ea:	4b0b      	ldr	r3, [pc, #44]	; (81818 <can_init+0x80>)
   817ec:	429a      	cmp	r2, r3
   817ee:	d9ef      	bls.n	817d0 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   817f0:	693a      	ldr	r2, [r7, #16]
   817f2:	4b0a      	ldr	r3, [pc, #40]	; (8181c <can_init+0x84>)
   817f4:	429a      	cmp	r2, r3
   817f6:	d101      	bne.n	817fc <can_init+0x64>
		return 0;
   817f8:	2300      	movs	r3, #0
   817fa:	e000      	b.n	817fe <can_init+0x66>
	} else {
		return 1;
   817fc:	2301      	movs	r3, #1
	}
}
   817fe:	4618      	mov	r0, r3
   81800:	3718      	adds	r7, #24
   81802:	46bd      	mov	sp, r7
   81804:	bd80      	pop	{r7, pc}
   81806:	bf00      	nop
   81808:	00081649 	.word	0x00081649
   8180c:	00081bd9 	.word	0x00081bd9
   81810:	00081821 	.word	0x00081821
   81814:	00081899 	.word	0x00081899
   81818:	0001869f 	.word	0x0001869f
   8181c:	000186a0 	.word	0x000186a0

00081820 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   81820:	b480      	push	{r7}
   81822:	b083      	sub	sp, #12
   81824:	af00      	add	r7, sp, #0
   81826:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81828:	687b      	ldr	r3, [r7, #4]
   8182a:	681b      	ldr	r3, [r3, #0]
   8182c:	f043 0201 	orr.w	r2, r3, #1
   81830:	687b      	ldr	r3, [r7, #4]
   81832:	601a      	str	r2, [r3, #0]
}
   81834:	370c      	adds	r7, #12
   81836:	46bd      	mov	sp, r7
   81838:	f85d 7b04 	ldr.w	r7, [sp], #4
   8183c:	4770      	bx	lr
   8183e:	bf00      	nop

00081840 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81840:	b480      	push	{r7}
   81842:	b083      	sub	sp, #12
   81844:	af00      	add	r7, sp, #0
   81846:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81848:	687b      	ldr	r3, [r7, #4]
   8184a:	681b      	ldr	r3, [r3, #0]
   8184c:	f023 0201 	bic.w	r2, r3, #1
   81850:	687b      	ldr	r3, [r7, #4]
   81852:	601a      	str	r2, [r3, #0]
}
   81854:	370c      	adds	r7, #12
   81856:	46bd      	mov	sp, r7
   81858:	f85d 7b04 	ldr.w	r7, [sp], #4
   8185c:	4770      	bx	lr
   8185e:	bf00      	nop

00081860 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81860:	b480      	push	{r7}
   81862:	b083      	sub	sp, #12
   81864:	af00      	add	r7, sp, #0
   81866:	6078      	str	r0, [r7, #4]
   81868:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   8186a:	687b      	ldr	r3, [r7, #4]
   8186c:	683a      	ldr	r2, [r7, #0]
   8186e:	605a      	str	r2, [r3, #4]
}
   81870:	370c      	adds	r7, #12
   81872:	46bd      	mov	sp, r7
   81874:	f85d 7b04 	ldr.w	r7, [sp], #4
   81878:	4770      	bx	lr
   8187a:	bf00      	nop

0008187c <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   8187c:	b480      	push	{r7}
   8187e:	b083      	sub	sp, #12
   81880:	af00      	add	r7, sp, #0
   81882:	6078      	str	r0, [r7, #4]
   81884:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81886:	687b      	ldr	r3, [r7, #4]
   81888:	683a      	ldr	r2, [r7, #0]
   8188a:	609a      	str	r2, [r3, #8]
}
   8188c:	370c      	adds	r7, #12
   8188e:	46bd      	mov	sp, r7
   81890:	f85d 7b04 	ldr.w	r7, [sp], #4
   81894:	4770      	bx	lr
   81896:	bf00      	nop

00081898 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81898:	b480      	push	{r7}
   8189a:	b083      	sub	sp, #12
   8189c:	af00      	add	r7, sp, #0
   8189e:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   818a0:	687b      	ldr	r3, [r7, #4]
   818a2:	691b      	ldr	r3, [r3, #16]
}
   818a4:	4618      	mov	r0, r3
   818a6:	370c      	adds	r7, #12
   818a8:	46bd      	mov	sp, r7
   818aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   818ae:	4770      	bx	lr

000818b0 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   818b0:	b480      	push	{r7}
   818b2:	b085      	sub	sp, #20
   818b4:	af00      	add	r7, sp, #0
   818b6:	6078      	str	r0, [r7, #4]
   818b8:	460b      	mov	r3, r1
   818ba:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   818bc:	687b      	ldr	r3, [r7, #4]
   818be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   818c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   818c4:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   818c6:	78fa      	ldrb	r2, [r7, #3]
   818c8:	68fb      	ldr	r3, [r7, #12]
   818ca:	431a      	orrs	r2, r3
   818cc:	687b      	ldr	r3, [r7, #4]
   818ce:	625a      	str	r2, [r3, #36]	; 0x24
}
   818d0:	3714      	adds	r7, #20
   818d2:	46bd      	mov	sp, r7
   818d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   818d8:	4770      	bx	lr
   818da:	bf00      	nop

000818dc <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   818dc:	b480      	push	{r7}
   818de:	b083      	sub	sp, #12
   818e0:	af00      	add	r7, sp, #0
   818e2:	6078      	str	r0, [r7, #4]
   818e4:	460b      	mov	r3, r1
   818e6:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   818e8:	78fb      	ldrb	r3, [r7, #3]
   818ea:	687a      	ldr	r2, [r7, #4]
   818ec:	015b      	lsls	r3, r3, #5
   818ee:	4413      	add	r3, r2
   818f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   818f4:	681b      	ldr	r3, [r3, #0]
}
   818f6:	4618      	mov	r0, r3
   818f8:	370c      	adds	r7, #12
   818fa:	46bd      	mov	sp, r7
   818fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81900:	4770      	bx	lr
   81902:	bf00      	nop

00081904 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81904:	b480      	push	{r7}
   81906:	b085      	sub	sp, #20
   81908:	af00      	add	r7, sp, #0
   8190a:	6078      	str	r0, [r7, #4]
   8190c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8190e:	683b      	ldr	r3, [r7, #0]
   81910:	681b      	ldr	r3, [r3, #0]
   81912:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81914:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   81916:	683a      	ldr	r2, [r7, #0]
   81918:	7992      	ldrb	r2, [r2, #6]
   8191a:	0412      	lsls	r2, r2, #16
   8191c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81920:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81924:	6879      	ldr	r1, [r7, #4]
   81926:	015b      	lsls	r3, r3, #5
   81928:	440b      	add	r3, r1
   8192a:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8192e:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   81930:	3714      	adds	r7, #20
   81932:	46bd      	mov	sp, r7
   81934:	f85d 7b04 	ldr.w	r7, [sp], #4
   81938:	4770      	bx	lr
   8193a:	bf00      	nop

0008193c <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   8193c:	b480      	push	{r7}
   8193e:	b085      	sub	sp, #20
   81940:	af00      	add	r7, sp, #0
   81942:	6078      	str	r0, [r7, #4]
   81944:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81946:	683b      	ldr	r3, [r7, #0]
   81948:	681b      	ldr	r3, [r3, #0]
   8194a:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   8194c:	683b      	ldr	r3, [r7, #0]
   8194e:	791b      	ldrb	r3, [r3, #4]
   81950:	2b00      	cmp	r3, #0
   81952:	d12e      	bne.n	819b2 <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81954:	7bfb      	ldrb	r3, [r7, #15]
   81956:	687a      	ldr	r2, [r7, #4]
   81958:	3310      	adds	r3, #16
   8195a:	015b      	lsls	r3, r3, #5
   8195c:	4413      	add	r3, r2
   8195e:	2200      	movs	r2, #0
   81960:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   81962:	7bfb      	ldrb	r3, [r7, #15]
   81964:	687a      	ldr	r2, [r7, #4]
   81966:	3310      	adds	r3, #16
   81968:	015b      	lsls	r3, r3, #5
   8196a:	4413      	add	r3, r2
   8196c:	2200      	movs	r2, #0
   8196e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81970:	7bfb      	ldrb	r3, [r7, #15]
   81972:	687a      	ldr	r2, [r7, #4]
   81974:	015b      	lsls	r3, r3, #5
   81976:	4413      	add	r3, r2
   81978:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8197c:	2200      	movs	r2, #0
   8197e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81980:	7bfb      	ldrb	r3, [r7, #15]
   81982:	687a      	ldr	r2, [r7, #4]
   81984:	015b      	lsls	r3, r3, #5
   81986:	4413      	add	r3, r2
   81988:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8198c:	2200      	movs	r2, #0
   8198e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81990:	7bfb      	ldrb	r3, [r7, #15]
   81992:	687a      	ldr	r2, [r7, #4]
   81994:	015b      	lsls	r3, r3, #5
   81996:	4413      	add	r3, r2
   81998:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8199c:	2200      	movs	r2, #0
   8199e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   819a0:	7bfb      	ldrb	r3, [r7, #15]
   819a2:	687a      	ldr	r2, [r7, #4]
   819a4:	015b      	lsls	r3, r3, #5
   819a6:	4413      	add	r3, r2
   819a8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   819ac:	2200      	movs	r2, #0
   819ae:	605a      	str	r2, [r3, #4]
		return;
   819b0:	e04e      	b.n	81a50 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   819b2:	7bfb      	ldrb	r3, [r7, #15]
   819b4:	7bfa      	ldrb	r2, [r7, #15]
   819b6:	6879      	ldr	r1, [r7, #4]
   819b8:	3210      	adds	r2, #16
   819ba:	0152      	lsls	r2, r2, #5
   819bc:	440a      	add	r2, r1
   819be:	6812      	ldr	r2, [r2, #0]
   819c0:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   819c4:	683a      	ldr	r2, [r7, #0]
   819c6:	79d2      	ldrb	r2, [r2, #7]
   819c8:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   819ca:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   819cc:	6879      	ldr	r1, [r7, #4]
   819ce:	3310      	adds	r3, #16
   819d0:	015b      	lsls	r3, r3, #5
   819d2:	440b      	add	r3, r1
   819d4:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   819d6:	683b      	ldr	r3, [r7, #0]
   819d8:	795b      	ldrb	r3, [r3, #5]
   819da:	2b00      	cmp	r3, #0
   819dc:	d015      	beq.n	81a0a <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   819de:	7bfb      	ldrb	r3, [r7, #15]
   819e0:	683a      	ldr	r2, [r7, #0]
   819e2:	68d2      	ldr	r2, [r2, #12]
   819e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   819e8:	6879      	ldr	r1, [r7, #4]
   819ea:	3310      	adds	r3, #16
   819ec:	015b      	lsls	r3, r3, #5
   819ee:	440b      	add	r3, r1
   819f0:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   819f2:	7bfb      	ldrb	r3, [r7, #15]
   819f4:	683a      	ldr	r2, [r7, #0]
   819f6:	6912      	ldr	r2, [r2, #16]
   819f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   819fc:	6879      	ldr	r1, [r7, #4]
   819fe:	015b      	lsls	r3, r3, #5
   81a00:	440b      	add	r3, r1
   81a02:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a06:	601a      	str	r2, [r3, #0]
   81a08:	e010      	b.n	81a2c <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81a0a:	7bfb      	ldrb	r3, [r7, #15]
   81a0c:	683a      	ldr	r2, [r7, #0]
   81a0e:	68d2      	ldr	r2, [r2, #12]
   81a10:	6879      	ldr	r1, [r7, #4]
   81a12:	3310      	adds	r3, #16
   81a14:	015b      	lsls	r3, r3, #5
   81a16:	440b      	add	r3, r1
   81a18:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81a1a:	7bfb      	ldrb	r3, [r7, #15]
   81a1c:	683a      	ldr	r2, [r7, #0]
   81a1e:	6912      	ldr	r2, [r2, #16]
   81a20:	6879      	ldr	r1, [r7, #4]
   81a22:	015b      	lsls	r3, r3, #5
   81a24:	440b      	add	r3, r1
   81a26:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a2a:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a2c:	7bfb      	ldrb	r3, [r7, #15]
   81a2e:	7bfa      	ldrb	r2, [r7, #15]
   81a30:	6879      	ldr	r1, [r7, #4]
   81a32:	3210      	adds	r2, #16
   81a34:	0152      	lsls	r2, r2, #5
   81a36:	440a      	add	r2, r1
   81a38:	6812      	ldr	r2, [r2, #0]
   81a3a:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81a3e:	683a      	ldr	r2, [r7, #0]
   81a40:	7912      	ldrb	r2, [r2, #4]
   81a42:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81a44:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a46:	6879      	ldr	r1, [r7, #4]
   81a48:	3310      	adds	r3, #16
   81a4a:	015b      	lsls	r3, r3, #5
   81a4c:	440b      	add	r3, r1
   81a4e:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81a50:	3714      	adds	r7, #20
   81a52:	46bd      	mov	sp, r7
   81a54:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a58:	4770      	bx	lr
   81a5a:	bf00      	nop

00081a5c <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81a5c:	b580      	push	{r7, lr}
   81a5e:	b086      	sub	sp, #24
   81a60:	af00      	add	r7, sp, #0
   81a62:	6078      	str	r0, [r7, #4]
   81a64:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81a66:	2300      	movs	r3, #0
   81a68:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81a6a:	683b      	ldr	r3, [r7, #0]
   81a6c:	681b      	ldr	r3, [r3, #0]
   81a6e:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81a70:	683b      	ldr	r3, [r7, #0]
   81a72:	689b      	ldr	r3, [r3, #8]
   81a74:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81a76:	68fb      	ldr	r3, [r7, #12]
   81a78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81a7c:	2b00      	cmp	r3, #0
   81a7e:	d006      	beq.n	81a8e <can_mailbox_read+0x32>
   81a80:	68fb      	ldr	r3, [r7, #12]
   81a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81a86:	2b00      	cmp	r3, #0
   81a88:	d001      	beq.n	81a8e <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81a8a:	2302      	movs	r3, #2
   81a8c:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81a8e:	7cfb      	ldrb	r3, [r7, #19]
   81a90:	687a      	ldr	r2, [r7, #4]
   81a92:	015b      	lsls	r3, r3, #5
   81a94:	4413      	add	r3, r2
   81a96:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a9a:	685b      	ldr	r3, [r3, #4]
   81a9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81aa0:	683b      	ldr	r3, [r7, #0]
   81aa2:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81aa4:	68fb      	ldr	r3, [r7, #12]
   81aa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81aaa:	0c1b      	lsrs	r3, r3, #16
   81aac:	b2da      	uxtb	r2, r3
   81aae:	683b      	ldr	r3, [r7, #0]
   81ab0:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81ab2:	7cfb      	ldrb	r3, [r7, #19]
   81ab4:	687a      	ldr	r2, [r7, #4]
   81ab6:	015b      	lsls	r3, r3, #5
   81ab8:	4413      	add	r3, r2
   81aba:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81abe:	685a      	ldr	r2, [r3, #4]
   81ac0:	683b      	ldr	r3, [r7, #0]
   81ac2:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81ac4:	683b      	ldr	r3, [r7, #0]
   81ac6:	799b      	ldrb	r3, [r3, #6]
   81ac8:	2b04      	cmp	r3, #4
   81aca:	d908      	bls.n	81ade <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81acc:	7cfb      	ldrb	r3, [r7, #19]
   81ace:	687a      	ldr	r2, [r7, #4]
   81ad0:	015b      	lsls	r3, r3, #5
   81ad2:	4413      	add	r3, r2
   81ad4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ad8:	681a      	ldr	r2, [r3, #0]
   81ada:	683b      	ldr	r3, [r7, #0]
   81adc:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81ade:	7cfb      	ldrb	r3, [r7, #19]
   81ae0:	687a      	ldr	r2, [r7, #4]
   81ae2:	015b      	lsls	r3, r3, #5
   81ae4:	4413      	add	r3, r2
   81ae6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81aea:	681a      	ldr	r2, [r3, #0]
   81aec:	683b      	ldr	r3, [r7, #0]
   81aee:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81af0:	683b      	ldr	r3, [r7, #0]
   81af2:	689b      	ldr	r3, [r3, #8]
   81af4:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81af6:	68fb      	ldr	r3, [r7, #12]
   81af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81afc:	2b00      	cmp	r3, #0
   81afe:	d003      	beq.n	81b08 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81b00:	697b      	ldr	r3, [r7, #20]
   81b02:	f043 0304 	orr.w	r3, r3, #4
   81b06:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81b08:	6878      	ldr	r0, [r7, #4]
   81b0a:	6839      	ldr	r1, [r7, #0]
   81b0c:	4b03      	ldr	r3, [pc, #12]	; (81b1c <can_mailbox_read+0xc0>)
   81b0e:	4798      	blx	r3

	return ul_retval;
   81b10:	697b      	ldr	r3, [r7, #20]
}
   81b12:	4618      	mov	r0, r3
   81b14:	3718      	adds	r7, #24
   81b16:	46bd      	mov	sp, r7
   81b18:	bd80      	pop	{r7, pc}
   81b1a:	bf00      	nop
   81b1c:	00081905 	.word	0x00081905

00081b20 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81b20:	b580      	push	{r7, lr}
   81b22:	b084      	sub	sp, #16
   81b24:	af00      	add	r7, sp, #0
   81b26:	6078      	str	r0, [r7, #4]
   81b28:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81b2a:	683b      	ldr	r3, [r7, #0]
   81b2c:	681b      	ldr	r3, [r3, #0]
   81b2e:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   81b30:	7bfb      	ldrb	r3, [r7, #15]
   81b32:	6878      	ldr	r0, [r7, #4]
   81b34:	4619      	mov	r1, r3
   81b36:	4b27      	ldr	r3, [pc, #156]	; (81bd4 <can_mailbox_write+0xb4>)
   81b38:	4798      	blx	r3
   81b3a:	4602      	mov	r2, r0
   81b3c:	683b      	ldr	r3, [r7, #0]
   81b3e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81b40:	683b      	ldr	r3, [r7, #0]
   81b42:	689b      	ldr	r3, [r3, #8]
   81b44:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   81b46:	68bb      	ldr	r3, [r7, #8]
   81b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81b4c:	2b00      	cmp	r3, #0
   81b4e:	d101      	bne.n	81b54 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   81b50:	2301      	movs	r3, #1
   81b52:	e03b      	b.n	81bcc <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   81b54:	683b      	ldr	r3, [r7, #0]
   81b56:	795b      	ldrb	r3, [r3, #5]
   81b58:	2b00      	cmp	r3, #0
   81b5a:	d00b      	beq.n	81b74 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81b5c:	7bfb      	ldrb	r3, [r7, #15]
   81b5e:	683a      	ldr	r2, [r7, #0]
   81b60:	6912      	ldr	r2, [r2, #16]
   81b62:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81b66:	6879      	ldr	r1, [r7, #4]
   81b68:	015b      	lsls	r3, r3, #5
   81b6a:	440b      	add	r3, r1
   81b6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b70:	601a      	str	r2, [r3, #0]
   81b72:	e008      	b.n	81b86 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81b74:	7bfb      	ldrb	r3, [r7, #15]
   81b76:	683a      	ldr	r2, [r7, #0]
   81b78:	6912      	ldr	r2, [r2, #16]
   81b7a:	6879      	ldr	r1, [r7, #4]
   81b7c:	015b      	lsls	r3, r3, #5
   81b7e:	440b      	add	r3, r1
   81b80:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b84:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81b86:	7bfb      	ldrb	r3, [r7, #15]
   81b88:	683a      	ldr	r2, [r7, #0]
   81b8a:	6992      	ldr	r2, [r2, #24]
   81b8c:	6879      	ldr	r1, [r7, #4]
   81b8e:	015b      	lsls	r3, r3, #5
   81b90:	440b      	add	r3, r1
   81b92:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81b96:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81b98:	683b      	ldr	r3, [r7, #0]
   81b9a:	799b      	ldrb	r3, [r3, #6]
   81b9c:	2b04      	cmp	r3, #4
   81b9e:	d908      	bls.n	81bb2 <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81ba0:	7bfb      	ldrb	r3, [r7, #15]
   81ba2:	683a      	ldr	r2, [r7, #0]
   81ba4:	69d2      	ldr	r2, [r2, #28]
   81ba6:	6879      	ldr	r1, [r7, #4]
   81ba8:	015b      	lsls	r3, r3, #5
   81baa:	440b      	add	r3, r1
   81bac:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81bb0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   81bb2:	7bfb      	ldrb	r3, [r7, #15]
   81bb4:	683a      	ldr	r2, [r7, #0]
   81bb6:	7992      	ldrb	r2, [r2, #6]
   81bb8:	0412      	lsls	r2, r2, #16
   81bba:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81bbe:	6879      	ldr	r1, [r7, #4]
   81bc0:	015b      	lsls	r3, r3, #5
   81bc2:	440b      	add	r3, r1
   81bc4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81bc8:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   81bca:	2300      	movs	r3, #0
}
   81bcc:	4618      	mov	r0, r3
   81bce:	3710      	adds	r7, #16
   81bd0:	46bd      	mov	sp, r7
   81bd2:	bd80      	pop	{r7, pc}
   81bd4:	000818dd 	.word	0x000818dd

00081bd8 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81bd8:	b580      	push	{r7, lr}
   81bda:	b08c      	sub	sp, #48	; 0x30
   81bdc:	af00      	add	r7, sp, #0
   81bde:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81be0:	2300      	movs	r3, #0
   81be2:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81be4:	2300      	movs	r3, #0
   81be6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81bea:	e00d      	b.n	81c08 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   81bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81bf0:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81bf2:	f107 030c 	add.w	r3, r7, #12
   81bf6:	6878      	ldr	r0, [r7, #4]
   81bf8:	4619      	mov	r1, r3
   81bfa:	4b07      	ldr	r3, [pc, #28]	; (81c18 <can_reset_all_mailbox+0x40>)
   81bfc:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c02:	3301      	adds	r3, #1
   81c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c0c:	2b07      	cmp	r3, #7
   81c0e:	d9ed      	bls.n	81bec <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   81c10:	3730      	adds	r7, #48	; 0x30
   81c12:	46bd      	mov	sp, r7
   81c14:	bd80      	pop	{r7, pc}
   81c16:	bf00      	nop
   81c18:	0008193d 	.word	0x0008193d

00081c1c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   81c1c:	b480      	push	{r7}
   81c1e:	b085      	sub	sp, #20
   81c20:	af00      	add	r7, sp, #0
   81c22:	60f8      	str	r0, [r7, #12]
   81c24:	60b9      	str	r1, [r7, #8]
   81c26:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81c28:	687b      	ldr	r3, [r7, #4]
   81c2a:	2b00      	cmp	r3, #0
   81c2c:	d003      	beq.n	81c36 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81c2e:	68fb      	ldr	r3, [r7, #12]
   81c30:	68ba      	ldr	r2, [r7, #8]
   81c32:	665a      	str	r2, [r3, #100]	; 0x64
   81c34:	e002      	b.n	81c3c <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81c36:	68fb      	ldr	r3, [r7, #12]
   81c38:	68ba      	ldr	r2, [r7, #8]
   81c3a:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81c3c:	3714      	adds	r7, #20
   81c3e:	46bd      	mov	sp, r7
   81c40:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c44:	4770      	bx	lr
   81c46:	bf00      	nop

00081c48 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81c48:	b480      	push	{r7}
   81c4a:	b087      	sub	sp, #28
   81c4c:	af00      	add	r7, sp, #0
   81c4e:	60f8      	str	r0, [r7, #12]
   81c50:	60b9      	str	r1, [r7, #8]
   81c52:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81c54:	68fb      	ldr	r3, [r7, #12]
   81c56:	687a      	ldr	r2, [r7, #4]
   81c58:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81c5a:	68bb      	ldr	r3, [r7, #8]
   81c5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c60:	d01f      	beq.n	81ca2 <pio_set_peripheral+0x5a>
   81c62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c66:	d805      	bhi.n	81c74 <pio_set_peripheral+0x2c>
   81c68:	2b00      	cmp	r3, #0
   81c6a:	d027      	beq.n	81cbc <pio_set_peripheral+0x74>
   81c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81c70:	d00a      	beq.n	81c88 <pio_set_peripheral+0x40>
   81c72:	e01f      	b.n	81cb4 <pio_set_peripheral+0x6c>
   81c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81c78:	d020      	beq.n	81cbc <pio_set_peripheral+0x74>
   81c7a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81c7e:	d01d      	beq.n	81cbc <pio_set_peripheral+0x74>
   81c80:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81c84:	d01a      	beq.n	81cbc <pio_set_peripheral+0x74>
   81c86:	e015      	b.n	81cb4 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81c88:	68fb      	ldr	r3, [r7, #12]
   81c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81c8c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81c8e:	68fb      	ldr	r3, [r7, #12]
   81c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81c92:	687b      	ldr	r3, [r7, #4]
   81c94:	43d9      	mvns	r1, r3
   81c96:	697b      	ldr	r3, [r7, #20]
   81c98:	400b      	ands	r3, r1
   81c9a:	401a      	ands	r2, r3
   81c9c:	68fb      	ldr	r3, [r7, #12]
   81c9e:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81ca0:	e008      	b.n	81cb4 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81ca2:	68fb      	ldr	r3, [r7, #12]
   81ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81ca6:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81ca8:	687a      	ldr	r2, [r7, #4]
   81caa:	697b      	ldr	r3, [r7, #20]
   81cac:	431a      	orrs	r2, r3
   81cae:	68fb      	ldr	r3, [r7, #12]
   81cb0:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81cb2:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81cb4:	68fb      	ldr	r3, [r7, #12]
   81cb6:	687a      	ldr	r2, [r7, #4]
   81cb8:	605a      	str	r2, [r3, #4]
   81cba:	e000      	b.n	81cbe <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81cbc:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81cbe:	371c      	adds	r7, #28
   81cc0:	46bd      	mov	sp, r7
   81cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cc6:	4770      	bx	lr

00081cc8 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81cc8:	b580      	push	{r7, lr}
   81cca:	b084      	sub	sp, #16
   81ccc:	af00      	add	r7, sp, #0
   81cce:	60f8      	str	r0, [r7, #12]
   81cd0:	60b9      	str	r1, [r7, #8]
   81cd2:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81cd4:	68f8      	ldr	r0, [r7, #12]
   81cd6:	68b9      	ldr	r1, [r7, #8]
   81cd8:	4b18      	ldr	r3, [pc, #96]	; (81d3c <pio_set_input+0x74>)
   81cda:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   81cdc:	687b      	ldr	r3, [r7, #4]
   81cde:	f003 0301 	and.w	r3, r3, #1
   81ce2:	68f8      	ldr	r0, [r7, #12]
   81ce4:	68b9      	ldr	r1, [r7, #8]
   81ce6:	461a      	mov	r2, r3
   81ce8:	4b15      	ldr	r3, [pc, #84]	; (81d40 <pio_set_input+0x78>)
   81cea:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81cec:	687b      	ldr	r3, [r7, #4]
   81cee:	f003 030a 	and.w	r3, r3, #10
   81cf2:	2b00      	cmp	r3, #0
   81cf4:	d003      	beq.n	81cfe <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   81cf6:	68fb      	ldr	r3, [r7, #12]
   81cf8:	68ba      	ldr	r2, [r7, #8]
   81cfa:	621a      	str	r2, [r3, #32]
   81cfc:	e002      	b.n	81d04 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81cfe:	68fb      	ldr	r3, [r7, #12]
   81d00:	68ba      	ldr	r2, [r7, #8]
   81d02:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81d04:	687b      	ldr	r3, [r7, #4]
   81d06:	f003 0302 	and.w	r3, r3, #2
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d004      	beq.n	81d18 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   81d0e:	68fb      	ldr	r3, [r7, #12]
   81d10:	68ba      	ldr	r2, [r7, #8]
   81d12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   81d16:	e008      	b.n	81d2a <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81d18:	687b      	ldr	r3, [r7, #4]
   81d1a:	f003 0308 	and.w	r3, r3, #8
   81d1e:	2b00      	cmp	r3, #0
   81d20:	d003      	beq.n	81d2a <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   81d22:	68fb      	ldr	r3, [r7, #12]
   81d24:	68ba      	ldr	r2, [r7, #8]
   81d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81d2a:	68fb      	ldr	r3, [r7, #12]
   81d2c:	68ba      	ldr	r2, [r7, #8]
   81d2e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   81d30:	68fb      	ldr	r3, [r7, #12]
   81d32:	68ba      	ldr	r2, [r7, #8]
   81d34:	601a      	str	r2, [r3, #0]
}
   81d36:	3710      	adds	r7, #16
   81d38:	46bd      	mov	sp, r7
   81d3a:	bd80      	pop	{r7, pc}
   81d3c:	00081da9 	.word	0x00081da9
   81d40:	00081c1d 	.word	0x00081c1d

00081d44 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81d44:	b580      	push	{r7, lr}
   81d46:	b084      	sub	sp, #16
   81d48:	af00      	add	r7, sp, #0
   81d4a:	60f8      	str	r0, [r7, #12]
   81d4c:	60b9      	str	r1, [r7, #8]
   81d4e:	607a      	str	r2, [r7, #4]
   81d50:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   81d52:	68f8      	ldr	r0, [r7, #12]
   81d54:	68b9      	ldr	r1, [r7, #8]
   81d56:	4b12      	ldr	r3, [pc, #72]	; (81da0 <pio_set_output+0x5c>)
   81d58:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81d5a:	68f8      	ldr	r0, [r7, #12]
   81d5c:	68b9      	ldr	r1, [r7, #8]
   81d5e:	69ba      	ldr	r2, [r7, #24]
   81d60:	4b10      	ldr	r3, [pc, #64]	; (81da4 <pio_set_output+0x60>)
   81d62:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81d64:	683b      	ldr	r3, [r7, #0]
   81d66:	2b00      	cmp	r3, #0
   81d68:	d003      	beq.n	81d72 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81d6a:	68fb      	ldr	r3, [r7, #12]
   81d6c:	68ba      	ldr	r2, [r7, #8]
   81d6e:	651a      	str	r2, [r3, #80]	; 0x50
   81d70:	e002      	b.n	81d78 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81d72:	68fb      	ldr	r3, [r7, #12]
   81d74:	68ba      	ldr	r2, [r7, #8]
   81d76:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	2b00      	cmp	r3, #0
   81d7c:	d003      	beq.n	81d86 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81d7e:	68fb      	ldr	r3, [r7, #12]
   81d80:	68ba      	ldr	r2, [r7, #8]
   81d82:	631a      	str	r2, [r3, #48]	; 0x30
   81d84:	e002      	b.n	81d8c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81d86:	68fb      	ldr	r3, [r7, #12]
   81d88:	68ba      	ldr	r2, [r7, #8]
   81d8a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81d8c:	68fb      	ldr	r3, [r7, #12]
   81d8e:	68ba      	ldr	r2, [r7, #8]
   81d90:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81d92:	68fb      	ldr	r3, [r7, #12]
   81d94:	68ba      	ldr	r2, [r7, #8]
   81d96:	601a      	str	r2, [r3, #0]
}
   81d98:	3710      	adds	r7, #16
   81d9a:	46bd      	mov	sp, r7
   81d9c:	bd80      	pop	{r7, pc}
   81d9e:	bf00      	nop
   81da0:	00081da9 	.word	0x00081da9
   81da4:	00081c1d 	.word	0x00081c1d

00081da8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81da8:	b480      	push	{r7}
   81daa:	b083      	sub	sp, #12
   81dac:	af00      	add	r7, sp, #0
   81dae:	6078      	str	r0, [r7, #4]
   81db0:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81db2:	687b      	ldr	r3, [r7, #4]
   81db4:	683a      	ldr	r2, [r7, #0]
   81db6:	645a      	str	r2, [r3, #68]	; 0x44
}
   81db8:	370c      	adds	r7, #12
   81dba:	46bd      	mov	sp, r7
   81dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dc0:	4770      	bx	lr
   81dc2:	bf00      	nop

00081dc4 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81dc4:	b480      	push	{r7}
   81dc6:	b083      	sub	sp, #12
   81dc8:	af00      	add	r7, sp, #0
   81dca:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   81dcc:	687b      	ldr	r3, [r7, #4]
   81dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81dd0:	4618      	mov	r0, r3
   81dd2:	370c      	adds	r7, #12
   81dd4:	46bd      	mov	sp, r7
   81dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dda:	4770      	bx	lr

00081ddc <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   81ddc:	b480      	push	{r7}
   81dde:	b083      	sub	sp, #12
   81de0:	af00      	add	r7, sp, #0
   81de2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81de4:	687b      	ldr	r3, [r7, #4]
   81de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81de8:	4618      	mov	r0, r3
   81dea:	370c      	adds	r7, #12
   81dec:	46bd      	mov	sp, r7
   81dee:	f85d 7b04 	ldr.w	r7, [sp], #4
   81df2:	4770      	bx	lr

00081df4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81df4:	b480      	push	{r7}
   81df6:	b085      	sub	sp, #20
   81df8:	af00      	add	r7, sp, #0
   81dfa:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81dfc:	687b      	ldr	r3, [r7, #4]
   81dfe:	095b      	lsrs	r3, r3, #5
   81e00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e04:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e08:	025b      	lsls	r3, r3, #9
   81e0a:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81e0c:	687b      	ldr	r3, [r7, #4]
   81e0e:	f003 031f 	and.w	r3, r3, #31
   81e12:	2201      	movs	r2, #1
   81e14:	fa02 f303 	lsl.w	r3, r2, r3
   81e18:	461a      	mov	r2, r3
   81e1a:	68fb      	ldr	r3, [r7, #12]
   81e1c:	631a      	str	r2, [r3, #48]	; 0x30
}
   81e1e:	3714      	adds	r7, #20
   81e20:	46bd      	mov	sp, r7
   81e22:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e26:	4770      	bx	lr

00081e28 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81e28:	b480      	push	{r7}
   81e2a:	b085      	sub	sp, #20
   81e2c:	af00      	add	r7, sp, #0
   81e2e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e30:	687b      	ldr	r3, [r7, #4]
   81e32:	095b      	lsrs	r3, r3, #5
   81e34:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e38:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e3c:	025b      	lsls	r3, r3, #9
   81e3e:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81e40:	687b      	ldr	r3, [r7, #4]
   81e42:	f003 031f 	and.w	r3, r3, #31
   81e46:	2201      	movs	r2, #1
   81e48:	fa02 f303 	lsl.w	r3, r2, r3
   81e4c:	461a      	mov	r2, r3
   81e4e:	68fb      	ldr	r3, [r7, #12]
   81e50:	635a      	str	r2, [r3, #52]	; 0x34
}
   81e52:	3714      	adds	r7, #20
   81e54:	46bd      	mov	sp, r7
   81e56:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e5a:	4770      	bx	lr

00081e5c <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81e5c:	b480      	push	{r7}
   81e5e:	b085      	sub	sp, #20
   81e60:	af00      	add	r7, sp, #0
   81e62:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e64:	687b      	ldr	r3, [r7, #4]
   81e66:	095b      	lsrs	r3, r3, #5
   81e68:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e6c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e70:	025b      	lsls	r3, r3, #9
   81e72:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81e74:	68fb      	ldr	r3, [r7, #12]
   81e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81e78:	687b      	ldr	r3, [r7, #4]
   81e7a:	f003 031f 	and.w	r3, r3, #31
   81e7e:	2101      	movs	r1, #1
   81e80:	fa01 f303 	lsl.w	r3, r1, r3
   81e84:	4013      	ands	r3, r2
   81e86:	2b00      	cmp	r3, #0
   81e88:	d009      	beq.n	81e9e <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81e8a:	687b      	ldr	r3, [r7, #4]
   81e8c:	f003 031f 	and.w	r3, r3, #31
   81e90:	2201      	movs	r2, #1
   81e92:	fa02 f303 	lsl.w	r3, r2, r3
   81e96:	461a      	mov	r2, r3
   81e98:	68fb      	ldr	r3, [r7, #12]
   81e9a:	635a      	str	r2, [r3, #52]	; 0x34
   81e9c:	e008      	b.n	81eb0 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81e9e:	687b      	ldr	r3, [r7, #4]
   81ea0:	f003 031f 	and.w	r3, r3, #31
   81ea4:	2201      	movs	r2, #1
   81ea6:	fa02 f303 	lsl.w	r3, r2, r3
   81eaa:	461a      	mov	r2, r3
   81eac:	68fb      	ldr	r3, [r7, #12]
   81eae:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81eb0:	3714      	adds	r7, #20
   81eb2:	46bd      	mov	sp, r7
   81eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81eb8:	4770      	bx	lr
   81eba:	bf00      	nop

00081ebc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81ebc:	b590      	push	{r4, r7, lr}
   81ebe:	b087      	sub	sp, #28
   81ec0:	af02      	add	r7, sp, #8
   81ec2:	6078      	str	r0, [r7, #4]
   81ec4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ec6:	687b      	ldr	r3, [r7, #4]
   81ec8:	095b      	lsrs	r3, r3, #5
   81eca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ece:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ed2:	025b      	lsls	r3, r3, #9
   81ed4:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81ed6:	683b      	ldr	r3, [r7, #0]
   81ed8:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81edc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ee0:	d048      	beq.n	81f74 <pio_configure_pin+0xb8>
   81ee2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ee6:	d806      	bhi.n	81ef6 <pio_configure_pin+0x3a>
   81ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81eec:	d00a      	beq.n	81f04 <pio_configure_pin+0x48>
   81eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ef2:	d023      	beq.n	81f3c <pio_configure_pin+0x80>
   81ef4:	e070      	b.n	81fd8 <pio_configure_pin+0x11c>
   81ef6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81efa:	d047      	beq.n	81f8c <pio_configure_pin+0xd0>
   81efc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f00:	d044      	beq.n	81f8c <pio_configure_pin+0xd0>
   81f02:	e069      	b.n	81fd8 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f04:	687b      	ldr	r3, [r7, #4]
   81f06:	f003 031f 	and.w	r3, r3, #31
   81f0a:	2201      	movs	r2, #1
   81f0c:	fa02 f303 	lsl.w	r3, r2, r3
   81f10:	68f8      	ldr	r0, [r7, #12]
   81f12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f16:	461a      	mov	r2, r3
   81f18:	4b33      	ldr	r3, [pc, #204]	; (81fe8 <pio_configure_pin+0x12c>)
   81f1a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81f1c:	687b      	ldr	r3, [r7, #4]
   81f1e:	f003 031f 	and.w	r3, r3, #31
   81f22:	2201      	movs	r2, #1
   81f24:	fa02 f303 	lsl.w	r3, r2, r3
   81f28:	461a      	mov	r2, r3
   81f2a:	683b      	ldr	r3, [r7, #0]
   81f2c:	f003 0301 	and.w	r3, r3, #1
   81f30:	68f8      	ldr	r0, [r7, #12]
   81f32:	4611      	mov	r1, r2
   81f34:	461a      	mov	r2, r3
   81f36:	4b2d      	ldr	r3, [pc, #180]	; (81fec <pio_configure_pin+0x130>)
   81f38:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81f3a:	e04f      	b.n	81fdc <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81f3c:	687b      	ldr	r3, [r7, #4]
   81f3e:	f003 031f 	and.w	r3, r3, #31
   81f42:	2201      	movs	r2, #1
   81f44:	fa02 f303 	lsl.w	r3, r2, r3
   81f48:	68f8      	ldr	r0, [r7, #12]
   81f4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f4e:	461a      	mov	r2, r3
   81f50:	4b25      	ldr	r3, [pc, #148]	; (81fe8 <pio_configure_pin+0x12c>)
   81f52:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81f54:	687b      	ldr	r3, [r7, #4]
   81f56:	f003 031f 	and.w	r3, r3, #31
   81f5a:	2201      	movs	r2, #1
   81f5c:	fa02 f303 	lsl.w	r3, r2, r3
   81f60:	461a      	mov	r2, r3
   81f62:	683b      	ldr	r3, [r7, #0]
   81f64:	f003 0301 	and.w	r3, r3, #1
   81f68:	68f8      	ldr	r0, [r7, #12]
   81f6a:	4611      	mov	r1, r2
   81f6c:	461a      	mov	r2, r3
   81f6e:	4b1f      	ldr	r3, [pc, #124]	; (81fec <pio_configure_pin+0x130>)
   81f70:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81f72:	e033      	b.n	81fdc <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81f74:	687b      	ldr	r3, [r7, #4]
   81f76:	f003 031f 	and.w	r3, r3, #31
   81f7a:	2201      	movs	r2, #1
   81f7c:	fa02 f303 	lsl.w	r3, r2, r3
   81f80:	68f8      	ldr	r0, [r7, #12]
   81f82:	4619      	mov	r1, r3
   81f84:	683a      	ldr	r2, [r7, #0]
   81f86:	4b1a      	ldr	r3, [pc, #104]	; (81ff0 <pio_configure_pin+0x134>)
   81f88:	4798      	blx	r3
		break;
   81f8a:	e027      	b.n	81fdc <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f8c:	687b      	ldr	r3, [r7, #4]
   81f8e:	f003 031f 	and.w	r3, r3, #31
   81f92:	2201      	movs	r2, #1
   81f94:	fa02 f303 	lsl.w	r3, r2, r3
   81f98:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81f9a:	683b      	ldr	r3, [r7, #0]
   81f9c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fa0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81fa4:	bf14      	ite	ne
   81fa6:	2300      	movne	r3, #0
   81fa8:	2301      	moveq	r3, #1
   81faa:	b2db      	uxtb	r3, r3
   81fac:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81fae:	683b      	ldr	r3, [r7, #0]
   81fb0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fb4:	2b00      	cmp	r3, #0
   81fb6:	bf0c      	ite	eq
   81fb8:	2300      	moveq	r3, #0
   81fba:	2301      	movne	r3, #1
   81fbc:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81fbe:	6838      	ldr	r0, [r7, #0]
   81fc0:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fc4:	2800      	cmp	r0, #0
   81fc6:	bf0c      	ite	eq
   81fc8:	2000      	moveq	r0, #0
   81fca:	2001      	movne	r0, #1
   81fcc:	b2c0      	uxtb	r0, r0
   81fce:	9000      	str	r0, [sp, #0]
   81fd0:	68f8      	ldr	r0, [r7, #12]
   81fd2:	4c08      	ldr	r4, [pc, #32]	; (81ff4 <pio_configure_pin+0x138>)
   81fd4:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81fd6:	e001      	b.n	81fdc <pio_configure_pin+0x120>

	default:
		return 0;
   81fd8:	2300      	movs	r3, #0
   81fda:	e000      	b.n	81fde <pio_configure_pin+0x122>
	}

	return 1;
   81fdc:	2301      	movs	r3, #1
}
   81fde:	4618      	mov	r0, r3
   81fe0:	3714      	adds	r7, #20
   81fe2:	46bd      	mov	sp, r7
   81fe4:	bd90      	pop	{r4, r7, pc}
   81fe6:	bf00      	nop
   81fe8:	00081c49 	.word	0x00081c49
   81fec:	00081c1d 	.word	0x00081c1d
   81ff0:	00081cc9 	.word	0x00081cc9
   81ff4:	00081d45 	.word	0x00081d45

00081ff8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81ff8:	b590      	push	{r4, r7, lr}
   81ffa:	b087      	sub	sp, #28
   81ffc:	af02      	add	r7, sp, #8
   81ffe:	60f8      	str	r0, [r7, #12]
   82000:	60b9      	str	r1, [r7, #8]
   82002:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82004:	687b      	ldr	r3, [r7, #4]
   82006:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8200a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8200e:	d02e      	beq.n	8206e <pio_configure_pin_group+0x76>
   82010:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82014:	d806      	bhi.n	82024 <pio_configure_pin_group+0x2c>
   82016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8201a:	d00a      	beq.n	82032 <pio_configure_pin_group+0x3a>
   8201c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82020:	d016      	beq.n	82050 <pio_configure_pin_group+0x58>
   82022:	e04a      	b.n	820ba <pio_configure_pin_group+0xc2>
   82024:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82028:	d027      	beq.n	8207a <pio_configure_pin_group+0x82>
   8202a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8202e:	d024      	beq.n	8207a <pio_configure_pin_group+0x82>
   82030:	e043      	b.n	820ba <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82032:	68f8      	ldr	r0, [r7, #12]
   82034:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82038:	68ba      	ldr	r2, [r7, #8]
   8203a:	4b23      	ldr	r3, [pc, #140]	; (820c8 <pio_configure_pin_group+0xd0>)
   8203c:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8203e:	687b      	ldr	r3, [r7, #4]
   82040:	f003 0301 	and.w	r3, r3, #1
   82044:	68f8      	ldr	r0, [r7, #12]
   82046:	68b9      	ldr	r1, [r7, #8]
   82048:	461a      	mov	r2, r3
   8204a:	4b20      	ldr	r3, [pc, #128]	; (820cc <pio_configure_pin_group+0xd4>)
   8204c:	4798      	blx	r3
		break;
   8204e:	e036      	b.n	820be <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82050:	68f8      	ldr	r0, [r7, #12]
   82052:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82056:	68ba      	ldr	r2, [r7, #8]
   82058:	4b1b      	ldr	r3, [pc, #108]	; (820c8 <pio_configure_pin_group+0xd0>)
   8205a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8205c:	687b      	ldr	r3, [r7, #4]
   8205e:	f003 0301 	and.w	r3, r3, #1
   82062:	68f8      	ldr	r0, [r7, #12]
   82064:	68b9      	ldr	r1, [r7, #8]
   82066:	461a      	mov	r2, r3
   82068:	4b18      	ldr	r3, [pc, #96]	; (820cc <pio_configure_pin_group+0xd4>)
   8206a:	4798      	blx	r3
		break;
   8206c:	e027      	b.n	820be <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8206e:	68f8      	ldr	r0, [r7, #12]
   82070:	68b9      	ldr	r1, [r7, #8]
   82072:	687a      	ldr	r2, [r7, #4]
   82074:	4b16      	ldr	r3, [pc, #88]	; (820d0 <pio_configure_pin_group+0xd8>)
   82076:	4798      	blx	r3
		break;
   82078:	e021      	b.n	820be <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8207a:	687b      	ldr	r3, [r7, #4]
   8207c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82080:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82084:	bf14      	ite	ne
   82086:	2300      	movne	r3, #0
   82088:	2301      	moveq	r3, #1
   8208a:	b2db      	uxtb	r3, r3
   8208c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8208e:	687b      	ldr	r3, [r7, #4]
   82090:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82094:	2b00      	cmp	r3, #0
   82096:	bf0c      	ite	eq
   82098:	2300      	moveq	r3, #0
   8209a:	2301      	movne	r3, #1
   8209c:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8209e:	6879      	ldr	r1, [r7, #4]
   820a0:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   820a4:	2900      	cmp	r1, #0
   820a6:	bf0c      	ite	eq
   820a8:	2100      	moveq	r1, #0
   820aa:	2101      	movne	r1, #1
   820ac:	b2c9      	uxtb	r1, r1
   820ae:	9100      	str	r1, [sp, #0]
   820b0:	68f8      	ldr	r0, [r7, #12]
   820b2:	68b9      	ldr	r1, [r7, #8]
   820b4:	4c07      	ldr	r4, [pc, #28]	; (820d4 <pio_configure_pin_group+0xdc>)
   820b6:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   820b8:	e001      	b.n	820be <pio_configure_pin_group+0xc6>

	default:
		return 0;
   820ba:	2300      	movs	r3, #0
   820bc:	e000      	b.n	820c0 <pio_configure_pin_group+0xc8>
	}

	return 1;
   820be:	2301      	movs	r3, #1
}
   820c0:	4618      	mov	r0, r3
   820c2:	3714      	adds	r7, #20
   820c4:	46bd      	mov	sp, r7
   820c6:	bd90      	pop	{r4, r7, pc}
   820c8:	00081c49 	.word	0x00081c49
   820cc:	00081c1d 	.word	0x00081c1d
   820d0:	00081cc9 	.word	0x00081cc9
   820d4:	00081d45 	.word	0x00081d45

000820d8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   820d8:	b580      	push	{r7, lr}
   820da:	b084      	sub	sp, #16
   820dc:	af00      	add	r7, sp, #0
   820de:	6078      	str	r0, [r7, #4]
   820e0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   820e2:	6878      	ldr	r0, [r7, #4]
   820e4:	4b22      	ldr	r3, [pc, #136]	; (82170 <pio_handler_process+0x98>)
   820e6:	4798      	blx	r3
   820e8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   820ea:	6878      	ldr	r0, [r7, #4]
   820ec:	4b21      	ldr	r3, [pc, #132]	; (82174 <pio_handler_process+0x9c>)
   820ee:	4798      	blx	r3
   820f0:	4603      	mov	r3, r0
   820f2:	68fa      	ldr	r2, [r7, #12]
   820f4:	4013      	ands	r3, r2
   820f6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   820f8:	68fb      	ldr	r3, [r7, #12]
   820fa:	2b00      	cmp	r3, #0
   820fc:	d035      	beq.n	8216a <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   820fe:	2300      	movs	r3, #0
   82100:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82102:	e02f      	b.n	82164 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82104:	4a1c      	ldr	r2, [pc, #112]	; (82178 <pio_handler_process+0xa0>)
   82106:	68bb      	ldr	r3, [r7, #8]
   82108:	011b      	lsls	r3, r3, #4
   8210a:	4413      	add	r3, r2
   8210c:	681a      	ldr	r2, [r3, #0]
   8210e:	683b      	ldr	r3, [r7, #0]
   82110:	429a      	cmp	r2, r3
   82112:	d124      	bne.n	8215e <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82114:	4a18      	ldr	r2, [pc, #96]	; (82178 <pio_handler_process+0xa0>)
   82116:	68bb      	ldr	r3, [r7, #8]
   82118:	011b      	lsls	r3, r3, #4
   8211a:	4413      	add	r3, r2
   8211c:	685a      	ldr	r2, [r3, #4]
   8211e:	68fb      	ldr	r3, [r7, #12]
   82120:	4013      	ands	r3, r2
   82122:	2b00      	cmp	r3, #0
   82124:	d01b      	beq.n	8215e <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82126:	4a14      	ldr	r2, [pc, #80]	; (82178 <pio_handler_process+0xa0>)
   82128:	68bb      	ldr	r3, [r7, #8]
   8212a:	011b      	lsls	r3, r3, #4
   8212c:	4413      	add	r3, r2
   8212e:	3308      	adds	r3, #8
   82130:	685b      	ldr	r3, [r3, #4]
   82132:	4911      	ldr	r1, [pc, #68]	; (82178 <pio_handler_process+0xa0>)
   82134:	68ba      	ldr	r2, [r7, #8]
   82136:	0112      	lsls	r2, r2, #4
   82138:	440a      	add	r2, r1
   8213a:	6811      	ldr	r1, [r2, #0]
   8213c:	480e      	ldr	r0, [pc, #56]	; (82178 <pio_handler_process+0xa0>)
   8213e:	68ba      	ldr	r2, [r7, #8]
   82140:	0112      	lsls	r2, r2, #4
   82142:	4402      	add	r2, r0
   82144:	6852      	ldr	r2, [r2, #4]
   82146:	4608      	mov	r0, r1
   82148:	4611      	mov	r1, r2
   8214a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8214c:	4a0a      	ldr	r2, [pc, #40]	; (82178 <pio_handler_process+0xa0>)
   8214e:	68bb      	ldr	r3, [r7, #8]
   82150:	011b      	lsls	r3, r3, #4
   82152:	4413      	add	r3, r2
   82154:	685b      	ldr	r3, [r3, #4]
   82156:	43db      	mvns	r3, r3
   82158:	68fa      	ldr	r2, [r7, #12]
   8215a:	4013      	ands	r3, r2
   8215c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8215e:	68bb      	ldr	r3, [r7, #8]
   82160:	3301      	adds	r3, #1
   82162:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82164:	68fb      	ldr	r3, [r7, #12]
   82166:	2b00      	cmp	r3, #0
   82168:	d1cc      	bne.n	82104 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   8216a:	3710      	adds	r7, #16
   8216c:	46bd      	mov	sp, r7
   8216e:	bd80      	pop	{r7, pc}
   82170:	00081dc5 	.word	0x00081dc5
   82174:	00081ddd 	.word	0x00081ddd
   82178:	200704dc 	.word	0x200704dc

0008217c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8217c:	b580      	push	{r7, lr}
   8217e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82180:	4802      	ldr	r0, [pc, #8]	; (8218c <PIOA_Handler+0x10>)
   82182:	210b      	movs	r1, #11
   82184:	4b02      	ldr	r3, [pc, #8]	; (82190 <PIOA_Handler+0x14>)
   82186:	4798      	blx	r3
}
   82188:	bd80      	pop	{r7, pc}
   8218a:	bf00      	nop
   8218c:	400e0e00 	.word	0x400e0e00
   82190:	000820d9 	.word	0x000820d9

00082194 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82194:	b580      	push	{r7, lr}
   82196:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82198:	4802      	ldr	r0, [pc, #8]	; (821a4 <PIOB_Handler+0x10>)
   8219a:	210c      	movs	r1, #12
   8219c:	4b02      	ldr	r3, [pc, #8]	; (821a8 <PIOB_Handler+0x14>)
   8219e:	4798      	blx	r3
}
   821a0:	bd80      	pop	{r7, pc}
   821a2:	bf00      	nop
   821a4:	400e1000 	.word	0x400e1000
   821a8:	000820d9 	.word	0x000820d9

000821ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   821ac:	b580      	push	{r7, lr}
   821ae:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   821b0:	4802      	ldr	r0, [pc, #8]	; (821bc <PIOC_Handler+0x10>)
   821b2:	210d      	movs	r1, #13
   821b4:	4b02      	ldr	r3, [pc, #8]	; (821c0 <PIOC_Handler+0x14>)
   821b6:	4798      	blx	r3
}
   821b8:	bd80      	pop	{r7, pc}
   821ba:	bf00      	nop
   821bc:	400e1200 	.word	0x400e1200
   821c0:	000820d9 	.word	0x000820d9

000821c4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   821c4:	b580      	push	{r7, lr}
   821c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   821c8:	4802      	ldr	r0, [pc, #8]	; (821d4 <PIOD_Handler+0x10>)
   821ca:	210e      	movs	r1, #14
   821cc:	4b02      	ldr	r3, [pc, #8]	; (821d8 <PIOD_Handler+0x14>)
   821ce:	4798      	blx	r3
}
   821d0:	bd80      	pop	{r7, pc}
   821d2:	bf00      	nop
   821d4:	400e1400 	.word	0x400e1400
   821d8:	000820d9 	.word	0x000820d9

000821dc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   821dc:	b480      	push	{r7}
   821de:	b085      	sub	sp, #20
   821e0:	af00      	add	r7, sp, #0
   821e2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   821e4:	4b1d      	ldr	r3, [pc, #116]	; (8225c <pmc_switch_mck_to_pllack+0x80>)
   821e6:	4a1d      	ldr	r2, [pc, #116]	; (8225c <pmc_switch_mck_to_pllack+0x80>)
   821e8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   821ea:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   821ee:	687a      	ldr	r2, [r7, #4]
   821f0:	430a      	orrs	r2, r1
   821f2:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   821f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   821f8:	60fb      	str	r3, [r7, #12]
   821fa:	e007      	b.n	8220c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   821fc:	68fb      	ldr	r3, [r7, #12]
   821fe:	2b00      	cmp	r3, #0
   82200:	d101      	bne.n	82206 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82202:	2301      	movs	r3, #1
   82204:	e023      	b.n	8224e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82206:	68fb      	ldr	r3, [r7, #12]
   82208:	3b01      	subs	r3, #1
   8220a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8220c:	4b13      	ldr	r3, [pc, #76]	; (8225c <pmc_switch_mck_to_pllack+0x80>)
   8220e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82210:	f003 0308 	and.w	r3, r3, #8
   82214:	2b00      	cmp	r3, #0
   82216:	d0f1      	beq.n	821fc <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82218:	4b10      	ldr	r3, [pc, #64]	; (8225c <pmc_switch_mck_to_pllack+0x80>)
   8221a:	4a10      	ldr	r2, [pc, #64]	; (8225c <pmc_switch_mck_to_pllack+0x80>)
   8221c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8221e:	f022 0203 	bic.w	r2, r2, #3
   82222:	f042 0202 	orr.w	r2, r2, #2
   82226:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82228:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8222c:	60fb      	str	r3, [r7, #12]
   8222e:	e007      	b.n	82240 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82230:	68fb      	ldr	r3, [r7, #12]
   82232:	2b00      	cmp	r3, #0
   82234:	d101      	bne.n	8223a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82236:	2301      	movs	r3, #1
   82238:	e009      	b.n	8224e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8223a:	68fb      	ldr	r3, [r7, #12]
   8223c:	3b01      	subs	r3, #1
   8223e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82240:	4b06      	ldr	r3, [pc, #24]	; (8225c <pmc_switch_mck_to_pllack+0x80>)
   82242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82244:	f003 0308 	and.w	r3, r3, #8
   82248:	2b00      	cmp	r3, #0
   8224a:	d0f1      	beq.n	82230 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8224c:	2300      	movs	r3, #0
}
   8224e:	4618      	mov	r0, r3
   82250:	3714      	adds	r7, #20
   82252:	46bd      	mov	sp, r7
   82254:	f85d 7b04 	ldr.w	r7, [sp], #4
   82258:	4770      	bx	lr
   8225a:	bf00      	nop
   8225c:	400e0600 	.word	0x400e0600

00082260 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82260:	b480      	push	{r7}
   82262:	b083      	sub	sp, #12
   82264:	af00      	add	r7, sp, #0
   82266:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82268:	687b      	ldr	r3, [r7, #4]
   8226a:	2b01      	cmp	r3, #1
   8226c:	d107      	bne.n	8227e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   8226e:	4a0a      	ldr	r2, [pc, #40]	; (82298 <pmc_switch_sclk_to_32kxtal+0x38>)
   82270:	4b09      	ldr	r3, [pc, #36]	; (82298 <pmc_switch_sclk_to_32kxtal+0x38>)
   82272:	689b      	ldr	r3, [r3, #8]
   82274:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8227c:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8227e:	4a06      	ldr	r2, [pc, #24]	; (82298 <pmc_switch_sclk_to_32kxtal+0x38>)
   82280:	4b05      	ldr	r3, [pc, #20]	; (82298 <pmc_switch_sclk_to_32kxtal+0x38>)
   82282:	681b      	ldr	r3, [r3, #0]
   82284:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82288:	f043 0308 	orr.w	r3, r3, #8
   8228c:	6013      	str	r3, [r2, #0]
}
   8228e:	370c      	adds	r7, #12
   82290:	46bd      	mov	sp, r7
   82292:	f85d 7b04 	ldr.w	r7, [sp], #4
   82296:	4770      	bx	lr
   82298:	400e1a10 	.word	0x400e1a10

0008229c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8229c:	b480      	push	{r7}
   8229e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   822a0:	4b09      	ldr	r3, [pc, #36]	; (822c8 <pmc_osc_is_ready_32kxtal+0x2c>)
   822a2:	695b      	ldr	r3, [r3, #20]
   822a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   822a8:	2b00      	cmp	r3, #0
   822aa:	d007      	beq.n	822bc <pmc_osc_is_ready_32kxtal+0x20>
   822ac:	4b07      	ldr	r3, [pc, #28]	; (822cc <pmc_osc_is_ready_32kxtal+0x30>)
   822ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   822b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   822b4:	2b00      	cmp	r3, #0
   822b6:	d001      	beq.n	822bc <pmc_osc_is_ready_32kxtal+0x20>
   822b8:	2301      	movs	r3, #1
   822ba:	e000      	b.n	822be <pmc_osc_is_ready_32kxtal+0x22>
   822bc:	2300      	movs	r3, #0
}
   822be:	4618      	mov	r0, r3
   822c0:	46bd      	mov	sp, r7
   822c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   822c6:	4770      	bx	lr
   822c8:	400e1a10 	.word	0x400e1a10
   822cc:	400e0600 	.word	0x400e0600

000822d0 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   822d0:	b480      	push	{r7}
   822d2:	b085      	sub	sp, #20
   822d4:	af00      	add	r7, sp, #0
   822d6:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   822d8:	2300      	movs	r3, #0
   822da:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   822dc:	4b21      	ldr	r3, [pc, #132]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   822de:	6a1b      	ldr	r3, [r3, #32]
   822e0:	f003 0301 	and.w	r3, r3, #1
   822e4:	2b00      	cmp	r3, #0
   822e6:	d00e      	beq.n	82306 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   822e8:	4a1e      	ldr	r2, [pc, #120]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   822ea:	4b1e      	ldr	r3, [pc, #120]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   822ec:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   822ee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   822f2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   822f6:	6879      	ldr	r1, [r7, #4]
   822f8:	430b      	orrs	r3, r1
   822fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   822fe:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82302:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82304:	e00b      	b.n	8231e <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   82306:	2301      	movs	r3, #1
   82308:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8230a:	4a16      	ldr	r2, [pc, #88]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   8230c:	4b15      	ldr	r3, [pc, #84]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   8230e:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   82310:	4b15      	ldr	r3, [pc, #84]	; (82368 <pmc_switch_mainck_to_fastrc+0x98>)
   82312:	400b      	ands	r3, r1
   82314:	6879      	ldr	r1, [r7, #4]
   82316:	4319      	orrs	r1, r3
   82318:	4b14      	ldr	r3, [pc, #80]	; (8236c <pmc_switch_mainck_to_fastrc+0x9c>)
   8231a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8231c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8231e:	bf00      	nop
   82320:	4b10      	ldr	r3, [pc, #64]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   82322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82328:	2b00      	cmp	r3, #0
   8232a:	d0f9      	beq.n	82320 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   8232c:	4a0d      	ldr	r2, [pc, #52]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   8232e:	4b0d      	ldr	r3, [pc, #52]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   82330:	6a1b      	ldr	r3, [r3, #32]
   82332:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   8233a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8233e:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   82340:	68fb      	ldr	r3, [r7, #12]
   82342:	2b00      	cmp	r3, #0
   82344:	d009      	beq.n	8235a <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82346:	4a07      	ldr	r2, [pc, #28]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   82348:	4b06      	ldr	r3, [pc, #24]	; (82364 <pmc_switch_mainck_to_fastrc+0x94>)
   8234a:	6a1b      	ldr	r3, [r3, #32]
   8234c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82350:	f023 0301 	bic.w	r3, r3, #1
   82354:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82358:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   8235a:	3714      	adds	r7, #20
   8235c:	46bd      	mov	sp, r7
   8235e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82362:	4770      	bx	lr
   82364:	400e0600 	.word	0x400e0600
   82368:	ffc8c086 	.word	0xffc8c086
   8236c:	00373f09 	.word	0x00373f09

00082370 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   82370:	b480      	push	{r7}
   82372:	b083      	sub	sp, #12
   82374:	af00      	add	r7, sp, #0
   82376:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82378:	687b      	ldr	r3, [r7, #4]
   8237a:	2b00      	cmp	r3, #0
   8237c:	d008      	beq.n	82390 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8237e:	4912      	ldr	r1, [pc, #72]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   82380:	4b11      	ldr	r3, [pc, #68]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   82382:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82384:	4a11      	ldr	r2, [pc, #68]	; (823cc <pmc_switch_mainck_to_xtal+0x5c>)
   82386:	401a      	ands	r2, r3
   82388:	4b11      	ldr	r3, [pc, #68]	; (823d0 <pmc_switch_mainck_to_xtal+0x60>)
   8238a:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8238c:	620b      	str	r3, [r1, #32]
   8238e:	e016      	b.n	823be <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82390:	490d      	ldr	r1, [pc, #52]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   82392:	4b0d      	ldr	r3, [pc, #52]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   82394:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82396:	4a0f      	ldr	r2, [pc, #60]	; (823d4 <pmc_switch_mainck_to_xtal+0x64>)
   82398:	401a      	ands	r2, r3
   8239a:	4b0f      	ldr	r3, [pc, #60]	; (823d8 <pmc_switch_mainck_to_xtal+0x68>)
   8239c:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8239e:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   823a0:	bf00      	nop
   823a2:	4b09      	ldr	r3, [pc, #36]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   823a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   823a6:	f003 0301 	and.w	r3, r3, #1
   823aa:	2b00      	cmp	r3, #0
   823ac:	d0f9      	beq.n	823a2 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   823ae:	4a06      	ldr	r2, [pc, #24]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   823b0:	4b05      	ldr	r3, [pc, #20]	; (823c8 <pmc_switch_mainck_to_xtal+0x58>)
   823b2:	6a1b      	ldr	r3, [r3, #32]
   823b4:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   823b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   823bc:	6213      	str	r3, [r2, #32]
	}
}
   823be:	370c      	adds	r7, #12
   823c0:	46bd      	mov	sp, r7
   823c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   823c6:	4770      	bx	lr
   823c8:	400e0600 	.word	0x400e0600
   823cc:	fec8fffc 	.word	0xfec8fffc
   823d0:	01370002 	.word	0x01370002
   823d4:	ffc8c0fc 	.word	0xffc8c0fc
   823d8:	00373f01 	.word	0x00373f01

000823dc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   823dc:	b480      	push	{r7}
   823de:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   823e0:	4b04      	ldr	r3, [pc, #16]	; (823f4 <pmc_osc_is_ready_mainck+0x18>)
   823e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   823e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   823e8:	4618      	mov	r0, r3
   823ea:	46bd      	mov	sp, r7
   823ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   823f0:	4770      	bx	lr
   823f2:	bf00      	nop
   823f4:	400e0600 	.word	0x400e0600

000823f8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   823f8:	b480      	push	{r7}
   823fa:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   823fc:	4b03      	ldr	r3, [pc, #12]	; (8240c <pmc_disable_pllack+0x14>)
   823fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82402:	629a      	str	r2, [r3, #40]	; 0x28
}
   82404:	46bd      	mov	sp, r7
   82406:	f85d 7b04 	ldr.w	r7, [sp], #4
   8240a:	4770      	bx	lr
   8240c:	400e0600 	.word	0x400e0600

00082410 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82410:	b480      	push	{r7}
   82412:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82414:	4b04      	ldr	r3, [pc, #16]	; (82428 <pmc_is_locked_pllack+0x18>)
   82416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82418:	f003 0302 	and.w	r3, r3, #2
}
   8241c:	4618      	mov	r0, r3
   8241e:	46bd      	mov	sp, r7
   82420:	f85d 7b04 	ldr.w	r7, [sp], #4
   82424:	4770      	bx	lr
   82426:	bf00      	nop
   82428:	400e0600 	.word	0x400e0600

0008242c <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   8242c:	b480      	push	{r7}
   8242e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82430:	4b04      	ldr	r3, [pc, #16]	; (82444 <pmc_is_locked_upll+0x18>)
   82432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82434:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82438:	4618      	mov	r0, r3
   8243a:	46bd      	mov	sp, r7
   8243c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82440:	4770      	bx	lr
   82442:	bf00      	nop
   82444:	400e0600 	.word	0x400e0600

00082448 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82448:	b480      	push	{r7}
   8244a:	b083      	sub	sp, #12
   8244c:	af00      	add	r7, sp, #0
   8244e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82450:	687b      	ldr	r3, [r7, #4]
   82452:	2b2c      	cmp	r3, #44	; 0x2c
   82454:	d901      	bls.n	8245a <pmc_enable_periph_clk+0x12>
		return 1;
   82456:	2301      	movs	r3, #1
   82458:	e02f      	b.n	824ba <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   8245a:	687b      	ldr	r3, [r7, #4]
   8245c:	2b1f      	cmp	r3, #31
   8245e:	d813      	bhi.n	82488 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82460:	4b19      	ldr	r3, [pc, #100]	; (824c8 <pmc_enable_periph_clk+0x80>)
   82462:	699a      	ldr	r2, [r3, #24]
   82464:	687b      	ldr	r3, [r7, #4]
   82466:	2101      	movs	r1, #1
   82468:	fa01 f303 	lsl.w	r3, r1, r3
   8246c:	401a      	ands	r2, r3
   8246e:	687b      	ldr	r3, [r7, #4]
   82470:	2101      	movs	r1, #1
   82472:	fa01 f303 	lsl.w	r3, r1, r3
   82476:	429a      	cmp	r2, r3
   82478:	d01e      	beq.n	824b8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   8247a:	4b13      	ldr	r3, [pc, #76]	; (824c8 <pmc_enable_periph_clk+0x80>)
   8247c:	687a      	ldr	r2, [r7, #4]
   8247e:	2101      	movs	r1, #1
   82480:	fa01 f202 	lsl.w	r2, r1, r2
   82484:	611a      	str	r2, [r3, #16]
   82486:	e017      	b.n	824b8 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   82488:	687b      	ldr	r3, [r7, #4]
   8248a:	3b20      	subs	r3, #32
   8248c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8248e:	4b0e      	ldr	r3, [pc, #56]	; (824c8 <pmc_enable_periph_clk+0x80>)
   82490:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82494:	687b      	ldr	r3, [r7, #4]
   82496:	2101      	movs	r1, #1
   82498:	fa01 f303 	lsl.w	r3, r1, r3
   8249c:	401a      	ands	r2, r3
   8249e:	687b      	ldr	r3, [r7, #4]
   824a0:	2101      	movs	r1, #1
   824a2:	fa01 f303 	lsl.w	r3, r1, r3
   824a6:	429a      	cmp	r2, r3
   824a8:	d006      	beq.n	824b8 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   824aa:	4b07      	ldr	r3, [pc, #28]	; (824c8 <pmc_enable_periph_clk+0x80>)
   824ac:	687a      	ldr	r2, [r7, #4]
   824ae:	2101      	movs	r1, #1
   824b0:	fa01 f202 	lsl.w	r2, r1, r2
   824b4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   824b8:	2300      	movs	r3, #0
}
   824ba:	4618      	mov	r0, r3
   824bc:	370c      	adds	r7, #12
   824be:	46bd      	mov	sp, r7
   824c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   824c4:	4770      	bx	lr
   824c6:	bf00      	nop
   824c8:	400e0600 	.word	0x400e0600

000824cc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   824cc:	b480      	push	{r7}
   824ce:	b089      	sub	sp, #36	; 0x24
   824d0:	af00      	add	r7, sp, #0
   824d2:	60f8      	str	r0, [r7, #12]
   824d4:	60b9      	str	r1, [r7, #8]
   824d6:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   824d8:	68bb      	ldr	r3, [r7, #8]
   824da:	011a      	lsls	r2, r3, #4
   824dc:	687b      	ldr	r3, [r7, #4]
   824de:	429a      	cmp	r2, r3
   824e0:	d802      	bhi.n	824e8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   824e2:	2310      	movs	r3, #16
   824e4:	61fb      	str	r3, [r7, #28]
   824e6:	e001      	b.n	824ec <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   824e8:	2308      	movs	r3, #8
   824ea:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   824ec:	687b      	ldr	r3, [r7, #4]
   824ee:	00da      	lsls	r2, r3, #3
   824f0:	69fb      	ldr	r3, [r7, #28]
   824f2:	68b9      	ldr	r1, [r7, #8]
   824f4:	fb01 f303 	mul.w	r3, r1, r3
   824f8:	085b      	lsrs	r3, r3, #1
   824fa:	441a      	add	r2, r3
   824fc:	69fb      	ldr	r3, [r7, #28]
   824fe:	68b9      	ldr	r1, [r7, #8]
   82500:	fb01 f303 	mul.w	r3, r1, r3
   82504:	fbb2 f3f3 	udiv	r3, r2, r3
   82508:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   8250a:	69bb      	ldr	r3, [r7, #24]
   8250c:	08db      	lsrs	r3, r3, #3
   8250e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   82510:	69bb      	ldr	r3, [r7, #24]
   82512:	f003 0307 	and.w	r3, r3, #7
   82516:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82518:	697b      	ldr	r3, [r7, #20]
   8251a:	2b00      	cmp	r3, #0
   8251c:	d003      	beq.n	82526 <usart_set_async_baudrate+0x5a>
   8251e:	697b      	ldr	r3, [r7, #20]
   82520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82524:	d301      	bcc.n	8252a <usart_set_async_baudrate+0x5e>
		return 1;
   82526:	2301      	movs	r3, #1
   82528:	e00f      	b.n	8254a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   8252a:	69fb      	ldr	r3, [r7, #28]
   8252c:	2b08      	cmp	r3, #8
   8252e:	d105      	bne.n	8253c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   82530:	68fb      	ldr	r3, [r7, #12]
   82532:	685b      	ldr	r3, [r3, #4]
   82534:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82538:	68fb      	ldr	r3, [r7, #12]
   8253a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8253c:	693b      	ldr	r3, [r7, #16]
   8253e:	041a      	lsls	r2, r3, #16
   82540:	697b      	ldr	r3, [r7, #20]
   82542:	431a      	orrs	r2, r3
   82544:	68fb      	ldr	r3, [r7, #12]
   82546:	621a      	str	r2, [r3, #32]

	return 0;
   82548:	2300      	movs	r3, #0
}
   8254a:	4618      	mov	r0, r3
   8254c:	3724      	adds	r7, #36	; 0x24
   8254e:	46bd      	mov	sp, r7
   82550:	f85d 7b04 	ldr.w	r7, [sp], #4
   82554:	4770      	bx	lr
   82556:	bf00      	nop

00082558 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82558:	b580      	push	{r7, lr}
   8255a:	b082      	sub	sp, #8
   8255c:	af00      	add	r7, sp, #0
   8255e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   82560:	6878      	ldr	r0, [r7, #4]
   82562:	4b0d      	ldr	r3, [pc, #52]	; (82598 <usart_reset+0x40>)
   82564:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82566:	687b      	ldr	r3, [r7, #4]
   82568:	2200      	movs	r2, #0
   8256a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   8256c:	687b      	ldr	r3, [r7, #4]
   8256e:	2200      	movs	r2, #0
   82570:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82572:	687b      	ldr	r3, [r7, #4]
   82574:	2200      	movs	r2, #0
   82576:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   82578:	6878      	ldr	r0, [r7, #4]
   8257a:	4b08      	ldr	r3, [pc, #32]	; (8259c <usart_reset+0x44>)
   8257c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8257e:	6878      	ldr	r0, [r7, #4]
   82580:	4b07      	ldr	r3, [pc, #28]	; (825a0 <usart_reset+0x48>)
   82582:	4798      	blx	r3
	usart_reset_status(p_usart);
   82584:	6878      	ldr	r0, [r7, #4]
   82586:	4b07      	ldr	r3, [pc, #28]	; (825a4 <usart_reset+0x4c>)
   82588:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   8258a:	6878      	ldr	r0, [r7, #4]
   8258c:	4b06      	ldr	r3, [pc, #24]	; (825a8 <usart_reset+0x50>)
   8258e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82590:	3708      	adds	r7, #8
   82592:	46bd      	mov	sp, r7
   82594:	bd80      	pop	{r7, pc}
   82596:	bf00      	nop
   82598:	00082795 	.word	0x00082795
   8259c:	00082649 	.word	0x00082649
   825a0:	00082679 	.word	0x00082679
   825a4:	000826e1 	.word	0x000826e1
   825a8:	000826fd 	.word	0x000826fd

000825ac <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   825ac:	b580      	push	{r7, lr}
   825ae:	b084      	sub	sp, #16
   825b0:	af00      	add	r7, sp, #0
   825b2:	60f8      	str	r0, [r7, #12]
   825b4:	60b9      	str	r1, [r7, #8]
   825b6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   825b8:	68f8      	ldr	r0, [r7, #12]
   825ba:	4b1a      	ldr	r3, [pc, #104]	; (82624 <usart_init_rs232+0x78>)
   825bc:	4798      	blx	r3

	ul_reg_val = 0;
   825be:	4b1a      	ldr	r3, [pc, #104]	; (82628 <usart_init_rs232+0x7c>)
   825c0:	2200      	movs	r2, #0
   825c2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   825c4:	68bb      	ldr	r3, [r7, #8]
   825c6:	2b00      	cmp	r3, #0
   825c8:	d009      	beq.n	825de <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   825ca:	68bb      	ldr	r3, [r7, #8]
   825cc:	681b      	ldr	r3, [r3, #0]
   825ce:	68f8      	ldr	r0, [r7, #12]
   825d0:	4619      	mov	r1, r3
   825d2:	687a      	ldr	r2, [r7, #4]
   825d4:	4b15      	ldr	r3, [pc, #84]	; (8262c <usart_init_rs232+0x80>)
   825d6:	4798      	blx	r3
   825d8:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   825da:	2b00      	cmp	r3, #0
   825dc:	d001      	beq.n	825e2 <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   825de:	2301      	movs	r3, #1
   825e0:	e01b      	b.n	8261a <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   825e2:	68bb      	ldr	r3, [r7, #8]
   825e4:	685a      	ldr	r2, [r3, #4]
   825e6:	68bb      	ldr	r3, [r7, #8]
   825e8:	689b      	ldr	r3, [r3, #8]
   825ea:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   825ec:	68bb      	ldr	r3, [r7, #8]
   825ee:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   825f0:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   825f2:	68bb      	ldr	r3, [r7, #8]
   825f4:	68db      	ldr	r3, [r3, #12]
   825f6:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   825f8:	4b0b      	ldr	r3, [pc, #44]	; (82628 <usart_init_rs232+0x7c>)
   825fa:	681b      	ldr	r3, [r3, #0]
   825fc:	431a      	orrs	r2, r3
   825fe:	4b0a      	ldr	r3, [pc, #40]	; (82628 <usart_init_rs232+0x7c>)
   82600:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   82602:	4b09      	ldr	r3, [pc, #36]	; (82628 <usart_init_rs232+0x7c>)
   82604:	681a      	ldr	r2, [r3, #0]
   82606:	4b08      	ldr	r3, [pc, #32]	; (82628 <usart_init_rs232+0x7c>)
   82608:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   8260a:	68fb      	ldr	r3, [r7, #12]
   8260c:	685a      	ldr	r2, [r3, #4]
   8260e:	4b06      	ldr	r3, [pc, #24]	; (82628 <usart_init_rs232+0x7c>)
   82610:	681b      	ldr	r3, [r3, #0]
   82612:	431a      	orrs	r2, r3
   82614:	68fb      	ldr	r3, [r7, #12]
   82616:	605a      	str	r2, [r3, #4]
	
	return 0;
   82618:	2300      	movs	r3, #0
}
   8261a:	4618      	mov	r0, r3
   8261c:	3710      	adds	r7, #16
   8261e:	46bd      	mov	sp, r7
   82620:	bd80      	pop	{r7, pc}
   82622:	bf00      	nop
   82624:	00082559 	.word	0x00082559
   82628:	2007054c 	.word	0x2007054c
   8262c:	000824cd 	.word	0x000824cd

00082630 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82630:	b480      	push	{r7}
   82632:	b083      	sub	sp, #12
   82634:	af00      	add	r7, sp, #0
   82636:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82638:	687b      	ldr	r3, [r7, #4]
   8263a:	2240      	movs	r2, #64	; 0x40
   8263c:	601a      	str	r2, [r3, #0]
}
   8263e:	370c      	adds	r7, #12
   82640:	46bd      	mov	sp, r7
   82642:	f85d 7b04 	ldr.w	r7, [sp], #4
   82646:	4770      	bx	lr

00082648 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82648:	b480      	push	{r7}
   8264a:	b083      	sub	sp, #12
   8264c:	af00      	add	r7, sp, #0
   8264e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82650:	687b      	ldr	r3, [r7, #4]
   82652:	2288      	movs	r2, #136	; 0x88
   82654:	601a      	str	r2, [r3, #0]
}
   82656:	370c      	adds	r7, #12
   82658:	46bd      	mov	sp, r7
   8265a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8265e:	4770      	bx	lr

00082660 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82660:	b480      	push	{r7}
   82662:	b083      	sub	sp, #12
   82664:	af00      	add	r7, sp, #0
   82666:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82668:	687b      	ldr	r3, [r7, #4]
   8266a:	2210      	movs	r2, #16
   8266c:	601a      	str	r2, [r3, #0]
}
   8266e:	370c      	adds	r7, #12
   82670:	46bd      	mov	sp, r7
   82672:	f85d 7b04 	ldr.w	r7, [sp], #4
   82676:	4770      	bx	lr

00082678 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82678:	b480      	push	{r7}
   8267a:	b083      	sub	sp, #12
   8267c:	af00      	add	r7, sp, #0
   8267e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82680:	687b      	ldr	r3, [r7, #4]
   82682:	2224      	movs	r2, #36	; 0x24
   82684:	601a      	str	r2, [r3, #0]
}
   82686:	370c      	adds	r7, #12
   82688:	46bd      	mov	sp, r7
   8268a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8268e:	4770      	bx	lr

00082690 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82690:	b480      	push	{r7}
   82692:	b083      	sub	sp, #12
   82694:	af00      	add	r7, sp, #0
   82696:	6078      	str	r0, [r7, #4]
   82698:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   8269a:	687b      	ldr	r3, [r7, #4]
   8269c:	683a      	ldr	r2, [r7, #0]
   8269e:	609a      	str	r2, [r3, #8]
}
   826a0:	370c      	adds	r7, #12
   826a2:	46bd      	mov	sp, r7
   826a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   826a8:	4770      	bx	lr
   826aa:	bf00      	nop

000826ac <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   826ac:	b480      	push	{r7}
   826ae:	b083      	sub	sp, #12
   826b0:	af00      	add	r7, sp, #0
   826b2:	6078      	str	r0, [r7, #4]
   826b4:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   826b6:	687b      	ldr	r3, [r7, #4]
   826b8:	683a      	ldr	r2, [r7, #0]
   826ba:	60da      	str	r2, [r3, #12]
}
   826bc:	370c      	adds	r7, #12
   826be:	46bd      	mov	sp, r7
   826c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   826c4:	4770      	bx	lr
   826c6:	bf00      	nop

000826c8 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   826c8:	b480      	push	{r7}
   826ca:	b083      	sub	sp, #12
   826cc:	af00      	add	r7, sp, #0
   826ce:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   826d0:	687b      	ldr	r3, [r7, #4]
   826d2:	695b      	ldr	r3, [r3, #20]
}
   826d4:	4618      	mov	r0, r3
   826d6:	370c      	adds	r7, #12
   826d8:	46bd      	mov	sp, r7
   826da:	f85d 7b04 	ldr.w	r7, [sp], #4
   826de:	4770      	bx	lr

000826e0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   826e0:	b480      	push	{r7}
   826e2:	b083      	sub	sp, #12
   826e4:	af00      	add	r7, sp, #0
   826e6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   826e8:	687b      	ldr	r3, [r7, #4]
   826ea:	f44f 7280 	mov.w	r2, #256	; 0x100
   826ee:	601a      	str	r2, [r3, #0]
}
   826f0:	370c      	adds	r7, #12
   826f2:	46bd      	mov	sp, r7
   826f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   826f8:	4770      	bx	lr
   826fa:	bf00      	nop

000826fc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   826fc:	b480      	push	{r7}
   826fe:	b083      	sub	sp, #12
   82700:	af00      	add	r7, sp, #0
   82702:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82704:	687b      	ldr	r3, [r7, #4]
   82706:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8270a:	601a      	str	r2, [r3, #0]
}
   8270c:	370c      	adds	r7, #12
   8270e:	46bd      	mov	sp, r7
   82710:	f85d 7b04 	ldr.w	r7, [sp], #4
   82714:	4770      	bx	lr
   82716:	bf00      	nop

00082718 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82718:	b480      	push	{r7}
   8271a:	b083      	sub	sp, #12
   8271c:	af00      	add	r7, sp, #0
   8271e:	6078      	str	r0, [r7, #4]
   82720:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82722:	687b      	ldr	r3, [r7, #4]
   82724:	695b      	ldr	r3, [r3, #20]
   82726:	f003 0302 	and.w	r3, r3, #2
   8272a:	2b00      	cmp	r3, #0
   8272c:	d101      	bne.n	82732 <usart_write+0x1a>
		return 1;
   8272e:	2301      	movs	r3, #1
   82730:	e005      	b.n	8273e <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82732:	683b      	ldr	r3, [r7, #0]
   82734:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82738:	687b      	ldr	r3, [r7, #4]
   8273a:	61da      	str	r2, [r3, #28]
	return 0;
   8273c:	2300      	movs	r3, #0
}
   8273e:	4618      	mov	r0, r3
   82740:	370c      	adds	r7, #12
   82742:	46bd      	mov	sp, r7
   82744:	f85d 7b04 	ldr.w	r7, [sp], #4
   82748:	4770      	bx	lr
   8274a:	bf00      	nop

0008274c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   8274c:	b480      	push	{r7}
   8274e:	b085      	sub	sp, #20
   82750:	af00      	add	r7, sp, #0
   82752:	6078      	str	r0, [r7, #4]
   82754:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8275a:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8275c:	e006      	b.n	8276c <usart_getchar+0x20>
		if (!timeout--) {
   8275e:	68fb      	ldr	r3, [r7, #12]
   82760:	1e5a      	subs	r2, r3, #1
   82762:	60fa      	str	r2, [r7, #12]
   82764:	2b00      	cmp	r3, #0
   82766:	d101      	bne.n	8276c <usart_getchar+0x20>
			return 1;
   82768:	2301      	movs	r3, #1
   8276a:	e00c      	b.n	82786 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8276c:	687b      	ldr	r3, [r7, #4]
   8276e:	695b      	ldr	r3, [r3, #20]
   82770:	f003 0301 	and.w	r3, r3, #1
   82774:	2b00      	cmp	r3, #0
   82776:	d0f2      	beq.n	8275e <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82778:	687b      	ldr	r3, [r7, #4]
   8277a:	699b      	ldr	r3, [r3, #24]
   8277c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82780:	683b      	ldr	r3, [r7, #0]
   82782:	601a      	str	r2, [r3, #0]

	return 0;
   82784:	2300      	movs	r3, #0
}
   82786:	4618      	mov	r0, r3
   82788:	3714      	adds	r7, #20
   8278a:	46bd      	mov	sp, r7
   8278c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82790:	4770      	bx	lr
   82792:	bf00      	nop

00082794 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82794:	b480      	push	{r7}
   82796:	b083      	sub	sp, #12
   82798:	af00      	add	r7, sp, #0
   8279a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   8279c:	687b      	ldr	r3, [r7, #4]
   8279e:	4a04      	ldr	r2, [pc, #16]	; (827b0 <usart_disable_writeprotect+0x1c>)
   827a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   827a4:	370c      	adds	r7, #12
   827a6:	46bd      	mov	sp, r7
   827a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   827ac:	4770      	bx	lr
   827ae:	bf00      	nop
   827b0:	55534100 	.word	0x55534100

000827b4 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   827b4:	b480      	push	{r7}
   827b6:	b083      	sub	sp, #12
   827b8:	af00      	add	r7, sp, #0
   827ba:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   827bc:	687a      	ldr	r2, [r7, #4]
   827be:	4b05      	ldr	r3, [pc, #20]	; (827d4 <wdt_restart+0x20>)
   827c0:	429a      	cmp	r2, r3
   827c2:	d102      	bne.n	827ca <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   827c4:	687b      	ldr	r3, [r7, #4]
   827c6:	4a04      	ldr	r2, [pc, #16]	; (827d8 <wdt_restart+0x24>)
   827c8:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   827ca:	370c      	adds	r7, #12
   827cc:	46bd      	mov	sp, r7
   827ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   827d2:	4770      	bx	lr
   827d4:	400e1a50 	.word	0x400e1a50
   827d8:	a5000001 	.word	0xa5000001

000827dc <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   827dc:	b480      	push	{r7}
   827de:	b083      	sub	sp, #12
   827e0:	af00      	add	r7, sp, #0
   827e2:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   827e4:	687b      	ldr	r3, [r7, #4]
   827e6:	689b      	ldr	r3, [r3, #8]
}
   827e8:	4618      	mov	r0, r3
   827ea:	370c      	adds	r7, #12
   827ec:	46bd      	mov	sp, r7
   827ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   827f2:	4770      	bx	lr

000827f4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   827f4:	b480      	push	{r7}
   827f6:	af00      	add	r7, sp, #0
	while (1) {
	}
   827f8:	e7fe      	b.n	827f8 <Dummy_Handler+0x4>
   827fa:	bf00      	nop

000827fc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   827fc:	b580      	push	{r7, lr}
   827fe:	b082      	sub	sp, #8
   82800:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82802:	4b1e      	ldr	r3, [pc, #120]	; (8287c <Reset_Handler+0x80>)
   82804:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82806:	4b1e      	ldr	r3, [pc, #120]	; (82880 <Reset_Handler+0x84>)
   82808:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8280a:	687a      	ldr	r2, [r7, #4]
   8280c:	683b      	ldr	r3, [r7, #0]
   8280e:	429a      	cmp	r2, r3
   82810:	d00c      	beq.n	8282c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82812:	e007      	b.n	82824 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82814:	683b      	ldr	r3, [r7, #0]
   82816:	1d1a      	adds	r2, r3, #4
   82818:	603a      	str	r2, [r7, #0]
   8281a:	687a      	ldr	r2, [r7, #4]
   8281c:	1d11      	adds	r1, r2, #4
   8281e:	6079      	str	r1, [r7, #4]
   82820:	6812      	ldr	r2, [r2, #0]
   82822:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82824:	683a      	ldr	r2, [r7, #0]
   82826:	4b17      	ldr	r3, [pc, #92]	; (82884 <Reset_Handler+0x88>)
   82828:	429a      	cmp	r2, r3
   8282a:	d3f3      	bcc.n	82814 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8282c:	4b16      	ldr	r3, [pc, #88]	; (82888 <Reset_Handler+0x8c>)
   8282e:	603b      	str	r3, [r7, #0]
   82830:	e004      	b.n	8283c <Reset_Handler+0x40>
		*pDest++ = 0;
   82832:	683b      	ldr	r3, [r7, #0]
   82834:	1d1a      	adds	r2, r3, #4
   82836:	603a      	str	r2, [r7, #0]
   82838:	2200      	movs	r2, #0
   8283a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8283c:	683a      	ldr	r2, [r7, #0]
   8283e:	4b13      	ldr	r3, [pc, #76]	; (8288c <Reset_Handler+0x90>)
   82840:	429a      	cmp	r2, r3
   82842:	d3f6      	bcc.n	82832 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82844:	4b12      	ldr	r3, [pc, #72]	; (82890 <Reset_Handler+0x94>)
   82846:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82848:	4a12      	ldr	r2, [pc, #72]	; (82894 <Reset_Handler+0x98>)
   8284a:	687b      	ldr	r3, [r7, #4]
   8284c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82854:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82856:	687b      	ldr	r3, [r7, #4]
   82858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   8285c:	d309      	bcc.n	82872 <Reset_Handler+0x76>
   8285e:	687a      	ldr	r2, [r7, #4]
   82860:	4b0d      	ldr	r3, [pc, #52]	; (82898 <Reset_Handler+0x9c>)
   82862:	429a      	cmp	r2, r3
   82864:	d805      	bhi.n	82872 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82866:	4b0b      	ldr	r3, [pc, #44]	; (82894 <Reset_Handler+0x98>)
   82868:	4a0a      	ldr	r2, [pc, #40]	; (82894 <Reset_Handler+0x98>)
   8286a:	6892      	ldr	r2, [r2, #8]
   8286c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82870:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82872:	4b0a      	ldr	r3, [pc, #40]	; (8289c <Reset_Handler+0xa0>)
   82874:	4798      	blx	r3

	/* Branch to main function */
	main();
   82876:	4b0a      	ldr	r3, [pc, #40]	; (828a0 <Reset_Handler+0xa4>)
   82878:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8287a:	e7fe      	b.n	8287a <Reset_Handler+0x7e>
   8287c:	00086914 	.word	0x00086914
   82880:	20070000 	.word	0x20070000
   82884:	20070438 	.word	0x20070438
   82888:	20070438 	.word	0x20070438
   8288c:	2007a788 	.word	0x2007a788
   82890:	00080000 	.word	0x00080000
   82894:	e000ed00 	.word	0xe000ed00
   82898:	200fffff 	.word	0x200fffff
   8289c:	0008642d 	.word	0x0008642d
   828a0:	00085c25 	.word	0x00085c25

000828a4 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   828a4:	b480      	push	{r7}
   828a6:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   828a8:	4b56      	ldr	r3, [pc, #344]	; (82a04 <SystemCoreClockUpdate+0x160>)
   828aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   828ac:	f003 0303 	and.w	r3, r3, #3
   828b0:	2b03      	cmp	r3, #3
   828b2:	f200 808a 	bhi.w	829ca <SystemCoreClockUpdate+0x126>
   828b6:	a101      	add	r1, pc, #4	; (adr r1, 828bc <SystemCoreClockUpdate+0x18>)
   828b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   828bc:	000828cd 	.word	0x000828cd
   828c0:	000828ed 	.word	0x000828ed
   828c4:	0008293d 	.word	0x0008293d
   828c8:	0008293d 	.word	0x0008293d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   828cc:	4b4e      	ldr	r3, [pc, #312]	; (82a08 <SystemCoreClockUpdate+0x164>)
   828ce:	695b      	ldr	r3, [r3, #20]
   828d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
   828d4:	2b00      	cmp	r3, #0
   828d6:	d004      	beq.n	828e2 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   828d8:	4b4c      	ldr	r3, [pc, #304]	; (82a0c <SystemCoreClockUpdate+0x168>)
   828da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   828de:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   828e0:	e073      	b.n	829ca <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   828e2:	4b4a      	ldr	r3, [pc, #296]	; (82a0c <SystemCoreClockUpdate+0x168>)
   828e4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   828e8:	601a      	str	r2, [r3, #0]
		}
		break;
   828ea:	e06e      	b.n	829ca <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   828ec:	4b45      	ldr	r3, [pc, #276]	; (82a04 <SystemCoreClockUpdate+0x160>)
   828ee:	6a1b      	ldr	r3, [r3, #32]
   828f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   828f4:	2b00      	cmp	r3, #0
   828f6:	d003      	beq.n	82900 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   828f8:	4b44      	ldr	r3, [pc, #272]	; (82a0c <SystemCoreClockUpdate+0x168>)
   828fa:	4a45      	ldr	r2, [pc, #276]	; (82a10 <SystemCoreClockUpdate+0x16c>)
   828fc:	601a      	str	r2, [r3, #0]
   828fe:	e01c      	b.n	8293a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82900:	4b42      	ldr	r3, [pc, #264]	; (82a0c <SystemCoreClockUpdate+0x168>)
   82902:	4a44      	ldr	r2, [pc, #272]	; (82a14 <SystemCoreClockUpdate+0x170>)
   82904:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82906:	4b3f      	ldr	r3, [pc, #252]	; (82a04 <SystemCoreClockUpdate+0x160>)
   82908:	6a1b      	ldr	r3, [r3, #32]
   8290a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8290e:	2b10      	cmp	r3, #16
   82910:	d004      	beq.n	8291c <SystemCoreClockUpdate+0x78>
   82912:	2b20      	cmp	r3, #32
   82914:	d008      	beq.n	82928 <SystemCoreClockUpdate+0x84>
   82916:	2b00      	cmp	r3, #0
   82918:	d00e      	beq.n	82938 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8291a:	e00e      	b.n	8293a <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8291c:	4b3b      	ldr	r3, [pc, #236]	; (82a0c <SystemCoreClockUpdate+0x168>)
   8291e:	681b      	ldr	r3, [r3, #0]
   82920:	005a      	lsls	r2, r3, #1
   82922:	4b3a      	ldr	r3, [pc, #232]	; (82a0c <SystemCoreClockUpdate+0x168>)
   82924:	601a      	str	r2, [r3, #0]
				break;
   82926:	e008      	b.n	8293a <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82928:	4b38      	ldr	r3, [pc, #224]	; (82a0c <SystemCoreClockUpdate+0x168>)
   8292a:	681a      	ldr	r2, [r3, #0]
   8292c:	4613      	mov	r3, r2
   8292e:	005b      	lsls	r3, r3, #1
   82930:	441a      	add	r2, r3
   82932:	4b36      	ldr	r3, [pc, #216]	; (82a0c <SystemCoreClockUpdate+0x168>)
   82934:	601a      	str	r2, [r3, #0]
				break;
   82936:	e000      	b.n	8293a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82938:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8293a:	e046      	b.n	829ca <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8293c:	4b31      	ldr	r3, [pc, #196]	; (82a04 <SystemCoreClockUpdate+0x160>)
   8293e:	6a1b      	ldr	r3, [r3, #32]
   82940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82944:	2b00      	cmp	r3, #0
   82946:	d003      	beq.n	82950 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82948:	4b30      	ldr	r3, [pc, #192]	; (82a0c <SystemCoreClockUpdate+0x168>)
   8294a:	4a31      	ldr	r2, [pc, #196]	; (82a10 <SystemCoreClockUpdate+0x16c>)
   8294c:	601a      	str	r2, [r3, #0]
   8294e:	e01c      	b.n	8298a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82950:	4b2e      	ldr	r3, [pc, #184]	; (82a0c <SystemCoreClockUpdate+0x168>)
   82952:	4a30      	ldr	r2, [pc, #192]	; (82a14 <SystemCoreClockUpdate+0x170>)
   82954:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82956:	4b2b      	ldr	r3, [pc, #172]	; (82a04 <SystemCoreClockUpdate+0x160>)
   82958:	6a1b      	ldr	r3, [r3, #32]
   8295a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8295e:	2b10      	cmp	r3, #16
   82960:	d004      	beq.n	8296c <SystemCoreClockUpdate+0xc8>
   82962:	2b20      	cmp	r3, #32
   82964:	d008      	beq.n	82978 <SystemCoreClockUpdate+0xd4>
   82966:	2b00      	cmp	r3, #0
   82968:	d00e      	beq.n	82988 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8296a:	e00e      	b.n	8298a <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8296c:	4b27      	ldr	r3, [pc, #156]	; (82a0c <SystemCoreClockUpdate+0x168>)
   8296e:	681b      	ldr	r3, [r3, #0]
   82970:	005a      	lsls	r2, r3, #1
   82972:	4b26      	ldr	r3, [pc, #152]	; (82a0c <SystemCoreClockUpdate+0x168>)
   82974:	601a      	str	r2, [r3, #0]
				break;
   82976:	e008      	b.n	8298a <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82978:	4b24      	ldr	r3, [pc, #144]	; (82a0c <SystemCoreClockUpdate+0x168>)
   8297a:	681a      	ldr	r2, [r3, #0]
   8297c:	4613      	mov	r3, r2
   8297e:	005b      	lsls	r3, r3, #1
   82980:	441a      	add	r2, r3
   82982:	4b22      	ldr	r3, [pc, #136]	; (82a0c <SystemCoreClockUpdate+0x168>)
   82984:	601a      	str	r2, [r3, #0]
				break;
   82986:	e000      	b.n	8298a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82988:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8298a:	4b1e      	ldr	r3, [pc, #120]	; (82a04 <SystemCoreClockUpdate+0x160>)
   8298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8298e:	f003 0303 	and.w	r3, r3, #3
   82992:	2b02      	cmp	r3, #2
   82994:	d115      	bne.n	829c2 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82996:	4b1b      	ldr	r3, [pc, #108]	; (82a04 <SystemCoreClockUpdate+0x160>)
   82998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8299a:	4b1f      	ldr	r3, [pc, #124]	; (82a18 <SystemCoreClockUpdate+0x174>)
   8299c:	4013      	ands	r3, r2
   8299e:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   829a0:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829a2:	4a1a      	ldr	r2, [pc, #104]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829a4:	6812      	ldr	r2, [r2, #0]
   829a6:	fb02 f203 	mul.w	r2, r2, r3
   829aa:	4b18      	ldr	r3, [pc, #96]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829ac:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   829ae:	4b17      	ldr	r3, [pc, #92]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829b0:	681a      	ldr	r2, [r3, #0]
   829b2:	4b14      	ldr	r3, [pc, #80]	; (82a04 <SystemCoreClockUpdate+0x160>)
   829b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   829b6:	b2db      	uxtb	r3, r3
   829b8:	fbb2 f2f3 	udiv	r2, r2, r3
   829bc:	4b13      	ldr	r3, [pc, #76]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829be:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   829c0:	e002      	b.n	829c8 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   829c2:	4b12      	ldr	r3, [pc, #72]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829c4:	4a15      	ldr	r2, [pc, #84]	; (82a1c <SystemCoreClockUpdate+0x178>)
   829c6:	601a      	str	r2, [r3, #0]
		}
		break;
   829c8:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   829ca:	4b0e      	ldr	r3, [pc, #56]	; (82a04 <SystemCoreClockUpdate+0x160>)
   829cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829d2:	2b70      	cmp	r3, #112	; 0x70
   829d4:	d108      	bne.n	829e8 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   829d6:	4b0d      	ldr	r3, [pc, #52]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829d8:	681a      	ldr	r2, [r3, #0]
   829da:	4b11      	ldr	r3, [pc, #68]	; (82a20 <SystemCoreClockUpdate+0x17c>)
   829dc:	fba3 1302 	umull	r1, r3, r3, r2
   829e0:	085a      	lsrs	r2, r3, #1
   829e2:	4b0a      	ldr	r3, [pc, #40]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829e4:	601a      	str	r2, [r3, #0]
   829e6:	e009      	b.n	829fc <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   829e8:	4b08      	ldr	r3, [pc, #32]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829ea:	681a      	ldr	r2, [r3, #0]
   829ec:	4b05      	ldr	r3, [pc, #20]	; (82a04 <SystemCoreClockUpdate+0x160>)
   829ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829f4:	091b      	lsrs	r3, r3, #4
   829f6:	40da      	lsrs	r2, r3
   829f8:	4b04      	ldr	r3, [pc, #16]	; (82a0c <SystemCoreClockUpdate+0x168>)
   829fa:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   829fc:	46bd      	mov	sp, r7
   829fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a02:	4770      	bx	lr
   82a04:	400e0600 	.word	0x400e0600
   82a08:	400e1a10 	.word	0x400e1a10
   82a0c:	20070004 	.word	0x20070004
   82a10:	00b71b00 	.word	0x00b71b00
   82a14:	003d0900 	.word	0x003d0900
   82a18:	07ff0000 	.word	0x07ff0000
   82a1c:	0e4e1c00 	.word	0x0e4e1c00
   82a20:	aaaaaaab 	.word	0xaaaaaaab

00082a24 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82a24:	b480      	push	{r7}
   82a26:	b083      	sub	sp, #12
   82a28:	af00      	add	r7, sp, #0
   82a2a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82a2c:	687a      	ldr	r2, [r7, #4]
   82a2e:	4b1f      	ldr	r3, [pc, #124]	; (82aac <system_init_flash+0x88>)
   82a30:	429a      	cmp	r2, r3
   82a32:	d806      	bhi.n	82a42 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82a34:	4b1e      	ldr	r3, [pc, #120]	; (82ab0 <system_init_flash+0x8c>)
   82a36:	2200      	movs	r2, #0
   82a38:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82a3a:	4b1e      	ldr	r3, [pc, #120]	; (82ab4 <system_init_flash+0x90>)
   82a3c:	2200      	movs	r2, #0
   82a3e:	601a      	str	r2, [r3, #0]
   82a40:	e02e      	b.n	82aa0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82a42:	687a      	ldr	r2, [r7, #4]
   82a44:	4b1c      	ldr	r3, [pc, #112]	; (82ab8 <system_init_flash+0x94>)
   82a46:	429a      	cmp	r2, r3
   82a48:	d808      	bhi.n	82a5c <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82a4a:	4b19      	ldr	r3, [pc, #100]	; (82ab0 <system_init_flash+0x8c>)
   82a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
   82a50:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82a52:	4b18      	ldr	r3, [pc, #96]	; (82ab4 <system_init_flash+0x90>)
   82a54:	f44f 7280 	mov.w	r2, #256	; 0x100
   82a58:	601a      	str	r2, [r3, #0]
   82a5a:	e021      	b.n	82aa0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82a5c:	687a      	ldr	r2, [r7, #4]
   82a5e:	4b17      	ldr	r3, [pc, #92]	; (82abc <system_init_flash+0x98>)
   82a60:	429a      	cmp	r2, r3
   82a62:	d808      	bhi.n	82a76 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82a64:	4b12      	ldr	r3, [pc, #72]	; (82ab0 <system_init_flash+0x8c>)
   82a66:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a6a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82a6c:	4b11      	ldr	r3, [pc, #68]	; (82ab4 <system_init_flash+0x90>)
   82a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a72:	601a      	str	r2, [r3, #0]
   82a74:	e014      	b.n	82aa0 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82a76:	687a      	ldr	r2, [r7, #4]
   82a78:	4b11      	ldr	r3, [pc, #68]	; (82ac0 <system_init_flash+0x9c>)
   82a7a:	429a      	cmp	r2, r3
   82a7c:	d808      	bhi.n	82a90 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82a7e:	4b0c      	ldr	r3, [pc, #48]	; (82ab0 <system_init_flash+0x8c>)
   82a80:	f44f 7240 	mov.w	r2, #768	; 0x300
   82a84:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82a86:	4b0b      	ldr	r3, [pc, #44]	; (82ab4 <system_init_flash+0x90>)
   82a88:	f44f 7240 	mov.w	r2, #768	; 0x300
   82a8c:	601a      	str	r2, [r3, #0]
   82a8e:	e007      	b.n	82aa0 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82a90:	4b07      	ldr	r3, [pc, #28]	; (82ab0 <system_init_flash+0x8c>)
   82a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82a96:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82a98:	4b06      	ldr	r3, [pc, #24]	; (82ab4 <system_init_flash+0x90>)
   82a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82a9e:	601a      	str	r2, [r3, #0]
	}
}
   82aa0:	370c      	adds	r7, #12
   82aa2:	46bd      	mov	sp, r7
   82aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82aa8:	4770      	bx	lr
   82aaa:	bf00      	nop
   82aac:	0157529f 	.word	0x0157529f
   82ab0:	400e0a00 	.word	0x400e0a00
   82ab4:	400e0c00 	.word	0x400e0c00
   82ab8:	0206cc7f 	.word	0x0206cc7f
   82abc:	0328b73f 	.word	0x0328b73f
   82ac0:	04a62f7f 	.word	0x04a62f7f

00082ac4 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82ac4:	b480      	push	{r7}
   82ac6:	b083      	sub	sp, #12
   82ac8:	af00      	add	r7, sp, #0
   82aca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82acc:	687b      	ldr	r3, [r7, #4]
   82ace:	f103 0208 	add.w	r2, r3, #8
   82ad2:	687b      	ldr	r3, [r7, #4]
   82ad4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82ad6:	687b      	ldr	r3, [r7, #4]
   82ad8:	f04f 32ff 	mov.w	r2, #4294967295
   82adc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82ade:	687b      	ldr	r3, [r7, #4]
   82ae0:	f103 0208 	add.w	r2, r3, #8
   82ae4:	687b      	ldr	r3, [r7, #4]
   82ae6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82ae8:	687b      	ldr	r3, [r7, #4]
   82aea:	f103 0208 	add.w	r2, r3, #8
   82aee:	687b      	ldr	r3, [r7, #4]
   82af0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82af2:	687b      	ldr	r3, [r7, #4]
   82af4:	2200      	movs	r2, #0
   82af6:	601a      	str	r2, [r3, #0]
}
   82af8:	370c      	adds	r7, #12
   82afa:	46bd      	mov	sp, r7
   82afc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b00:	4770      	bx	lr
   82b02:	bf00      	nop

00082b04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   82b04:	b480      	push	{r7}
   82b06:	b083      	sub	sp, #12
   82b08:	af00      	add	r7, sp, #0
   82b0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   82b0c:	687b      	ldr	r3, [r7, #4]
   82b0e:	2200      	movs	r2, #0
   82b10:	611a      	str	r2, [r3, #16]
}
   82b12:	370c      	adds	r7, #12
   82b14:	46bd      	mov	sp, r7
   82b16:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b1a:	4770      	bx	lr

00082b1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82b1c:	b480      	push	{r7}
   82b1e:	b085      	sub	sp, #20
   82b20:	af00      	add	r7, sp, #0
   82b22:	6078      	str	r0, [r7, #4]
   82b24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82b26:	687b      	ldr	r3, [r7, #4]
   82b28:	685b      	ldr	r3, [r3, #4]
   82b2a:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82b2c:	683b      	ldr	r3, [r7, #0]
   82b2e:	68fa      	ldr	r2, [r7, #12]
   82b30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   82b32:	68fb      	ldr	r3, [r7, #12]
   82b34:	689a      	ldr	r2, [r3, #8]
   82b36:	683b      	ldr	r3, [r7, #0]
   82b38:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82b3a:	68fb      	ldr	r3, [r7, #12]
   82b3c:	689b      	ldr	r3, [r3, #8]
   82b3e:	683a      	ldr	r2, [r7, #0]
   82b40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   82b42:	68fb      	ldr	r3, [r7, #12]
   82b44:	683a      	ldr	r2, [r7, #0]
   82b46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82b48:	683b      	ldr	r3, [r7, #0]
   82b4a:	687a      	ldr	r2, [r7, #4]
   82b4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82b4e:	687b      	ldr	r3, [r7, #4]
   82b50:	681b      	ldr	r3, [r3, #0]
   82b52:	1c5a      	adds	r2, r3, #1
   82b54:	687b      	ldr	r3, [r7, #4]
   82b56:	601a      	str	r2, [r3, #0]
}
   82b58:	3714      	adds	r7, #20
   82b5a:	46bd      	mov	sp, r7
   82b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b60:	4770      	bx	lr
   82b62:	bf00      	nop

00082b64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82b64:	b480      	push	{r7}
   82b66:	b085      	sub	sp, #20
   82b68:	af00      	add	r7, sp, #0
   82b6a:	6078      	str	r0, [r7, #4]
   82b6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   82b6e:	683b      	ldr	r3, [r7, #0]
   82b70:	681b      	ldr	r3, [r3, #0]
   82b72:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82b74:	68bb      	ldr	r3, [r7, #8]
   82b76:	f1b3 3fff 	cmp.w	r3, #4294967295
   82b7a:	d103      	bne.n	82b84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   82b7c:	687b      	ldr	r3, [r7, #4]
   82b7e:	691b      	ldr	r3, [r3, #16]
   82b80:	60fb      	str	r3, [r7, #12]
   82b82:	e00c      	b.n	82b9e <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b84:	687b      	ldr	r3, [r7, #4]
   82b86:	3308      	adds	r3, #8
   82b88:	60fb      	str	r3, [r7, #12]
   82b8a:	e002      	b.n	82b92 <vListInsert+0x2e>
   82b8c:	68fb      	ldr	r3, [r7, #12]
   82b8e:	685b      	ldr	r3, [r3, #4]
   82b90:	60fb      	str	r3, [r7, #12]
   82b92:	68fb      	ldr	r3, [r7, #12]
   82b94:	685b      	ldr	r3, [r3, #4]
   82b96:	681a      	ldr	r2, [r3, #0]
   82b98:	68bb      	ldr	r3, [r7, #8]
   82b9a:	429a      	cmp	r2, r3
   82b9c:	d9f6      	bls.n	82b8c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   82b9e:	68fb      	ldr	r3, [r7, #12]
   82ba0:	685a      	ldr	r2, [r3, #4]
   82ba2:	683b      	ldr	r3, [r7, #0]
   82ba4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82ba6:	683b      	ldr	r3, [r7, #0]
   82ba8:	685b      	ldr	r3, [r3, #4]
   82baa:	683a      	ldr	r2, [r7, #0]
   82bac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   82bae:	683b      	ldr	r3, [r7, #0]
   82bb0:	68fa      	ldr	r2, [r7, #12]
   82bb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82bb4:	68fb      	ldr	r3, [r7, #12]
   82bb6:	683a      	ldr	r2, [r7, #0]
   82bb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82bba:	683b      	ldr	r3, [r7, #0]
   82bbc:	687a      	ldr	r2, [r7, #4]
   82bbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82bc0:	687b      	ldr	r3, [r7, #4]
   82bc2:	681b      	ldr	r3, [r3, #0]
   82bc4:	1c5a      	adds	r2, r3, #1
   82bc6:	687b      	ldr	r3, [r7, #4]
   82bc8:	601a      	str	r2, [r3, #0]
}
   82bca:	3714      	adds	r7, #20
   82bcc:	46bd      	mov	sp, r7
   82bce:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bd2:	4770      	bx	lr

00082bd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82bd4:	b480      	push	{r7}
   82bd6:	b085      	sub	sp, #20
   82bd8:	af00      	add	r7, sp, #0
   82bda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82bdc:	687b      	ldr	r3, [r7, #4]
   82bde:	691b      	ldr	r3, [r3, #16]
   82be0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82be2:	687b      	ldr	r3, [r7, #4]
   82be4:	685b      	ldr	r3, [r3, #4]
   82be6:	687a      	ldr	r2, [r7, #4]
   82be8:	6892      	ldr	r2, [r2, #8]
   82bea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82bec:	687b      	ldr	r3, [r7, #4]
   82bee:	689b      	ldr	r3, [r3, #8]
   82bf0:	687a      	ldr	r2, [r7, #4]
   82bf2:	6852      	ldr	r2, [r2, #4]
   82bf4:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82bf6:	68fb      	ldr	r3, [r7, #12]
   82bf8:	685a      	ldr	r2, [r3, #4]
   82bfa:	687b      	ldr	r3, [r7, #4]
   82bfc:	429a      	cmp	r2, r3
   82bfe:	d103      	bne.n	82c08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82c00:	687b      	ldr	r3, [r7, #4]
   82c02:	689a      	ldr	r2, [r3, #8]
   82c04:	68fb      	ldr	r3, [r7, #12]
   82c06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82c08:	687b      	ldr	r3, [r7, #4]
   82c0a:	2200      	movs	r2, #0
   82c0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82c0e:	68fb      	ldr	r3, [r7, #12]
   82c10:	681b      	ldr	r3, [r3, #0]
   82c12:	1e5a      	subs	r2, r3, #1
   82c14:	68fb      	ldr	r3, [r7, #12]
   82c16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82c18:	68fb      	ldr	r3, [r7, #12]
   82c1a:	681b      	ldr	r3, [r3, #0]
}
   82c1c:	4618      	mov	r0, r3
   82c1e:	3714      	adds	r7, #20
   82c20:	46bd      	mov	sp, r7
   82c22:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c26:	4770      	bx	lr

00082c28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   82c28:	b480      	push	{r7}
   82c2a:	b085      	sub	sp, #20
   82c2c:	af00      	add	r7, sp, #0
   82c2e:	60f8      	str	r0, [r7, #12]
   82c30:	60b9      	str	r1, [r7, #8]
   82c32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   82c34:	68fb      	ldr	r3, [r7, #12]
   82c36:	3b04      	subs	r3, #4
   82c38:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   82c3a:	68fb      	ldr	r3, [r7, #12]
   82c3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   82c40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82c42:	68fb      	ldr	r3, [r7, #12]
   82c44:	3b04      	subs	r3, #4
   82c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   82c48:	68ba      	ldr	r2, [r7, #8]
   82c4a:	68fb      	ldr	r3, [r7, #12]
   82c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82c4e:	68fb      	ldr	r3, [r7, #12]
   82c50:	3b04      	subs	r3, #4
   82c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   82c54:	4a09      	ldr	r2, [pc, #36]	; (82c7c <pxPortInitialiseStack+0x54>)
   82c56:	68fb      	ldr	r3, [r7, #12]
   82c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   82c5a:	68fb      	ldr	r3, [r7, #12]
   82c5c:	3b14      	subs	r3, #20
   82c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   82c60:	687a      	ldr	r2, [r7, #4]
   82c62:	68fb      	ldr	r3, [r7, #12]
   82c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   82c66:	68fb      	ldr	r3, [r7, #12]
   82c68:	3b20      	subs	r3, #32
   82c6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   82c6c:	68fb      	ldr	r3, [r7, #12]
}
   82c6e:	4618      	mov	r0, r3
   82c70:	3714      	adds	r7, #20
   82c72:	46bd      	mov	sp, r7
   82c74:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c78:	4770      	bx	lr
   82c7a:	bf00      	nop
   82c7c:	00082c81 	.word	0x00082c81

00082c80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   82c80:	b580      	push	{r7, lr}
   82c82:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82c84:	4b05      	ldr	r3, [pc, #20]	; (82c9c <prvTaskExitError+0x1c>)
   82c86:	681b      	ldr	r3, [r3, #0]
   82c88:	f1b3 3fff 	cmp.w	r3, #4294967295
   82c8c:	d002      	beq.n	82c94 <prvTaskExitError+0x14>
   82c8e:	4b04      	ldr	r3, [pc, #16]	; (82ca0 <prvTaskExitError+0x20>)
   82c90:	4798      	blx	r3
   82c92:	e7fe      	b.n	82c92 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82c94:	4b02      	ldr	r3, [pc, #8]	; (82ca0 <prvTaskExitError+0x20>)
   82c96:	4798      	blx	r3
	for( ;; );
   82c98:	e7fe      	b.n	82c98 <prvTaskExitError+0x18>
   82c9a:	bf00      	nop
   82c9c:	20070008 	.word	0x20070008
   82ca0:	00082e4d 	.word	0x00082e4d

00082ca4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82ca4:	4b07      	ldr	r3, [pc, #28]	; (82cc4 <pxCurrentTCBConst2>)
   82ca6:	6819      	ldr	r1, [r3, #0]
   82ca8:	6808      	ldr	r0, [r1, #0]
   82caa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82cae:	f380 8809 	msr	PSP, r0
   82cb2:	f3bf 8f6f 	isb	sy
   82cb6:	f04f 0000 	mov.w	r0, #0
   82cba:	f380 8811 	msr	BASEPRI, r0
   82cbe:	f04e 0e0d 	orr.w	lr, lr, #13
   82cc2:	4770      	bx	lr

00082cc4 <pxCurrentTCBConst2>:
   82cc4:	2007a570 	.word	0x2007a570

00082cc8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   82cc8:	4806      	ldr	r0, [pc, #24]	; (82ce4 <prvPortStartFirstTask+0x1c>)
   82cca:	6800      	ldr	r0, [r0, #0]
   82ccc:	6800      	ldr	r0, [r0, #0]
   82cce:	f380 8808 	msr	MSP, r0
   82cd2:	b662      	cpsie	i
   82cd4:	b661      	cpsie	f
   82cd6:	f3bf 8f4f 	dsb	sy
   82cda:	f3bf 8f6f 	isb	sy
   82cde:	df00      	svc	0
   82ce0:	bf00      	nop
   82ce2:	0000      	.short	0x0000
   82ce4:	e000ed08 	.word	0xe000ed08

00082ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   82ce8:	b580      	push	{r7, lr}
   82cea:	b084      	sub	sp, #16
   82cec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   82cee:	4b28      	ldr	r3, [pc, #160]	; (82d90 <xPortStartScheduler+0xa8>)
   82cf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   82cf2:	68fb      	ldr	r3, [r7, #12]
   82cf4:	781b      	ldrb	r3, [r3, #0]
   82cf6:	b2db      	uxtb	r3, r3
   82cf8:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   82cfa:	68fb      	ldr	r3, [r7, #12]
   82cfc:	22ff      	movs	r2, #255	; 0xff
   82cfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   82d00:	68fb      	ldr	r3, [r7, #12]
   82d02:	781b      	ldrb	r3, [r3, #0]
   82d04:	b2db      	uxtb	r3, r3
   82d06:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   82d08:	79fb      	ldrb	r3, [r7, #7]
   82d0a:	b2db      	uxtb	r3, r3
   82d0c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   82d10:	b2da      	uxtb	r2, r3
   82d12:	4b20      	ldr	r3, [pc, #128]	; (82d94 <xPortStartScheduler+0xac>)
   82d14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   82d16:	4b20      	ldr	r3, [pc, #128]	; (82d98 <xPortStartScheduler+0xb0>)
   82d18:	2207      	movs	r2, #7
   82d1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82d1c:	e009      	b.n	82d32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   82d1e:	4b1e      	ldr	r3, [pc, #120]	; (82d98 <xPortStartScheduler+0xb0>)
   82d20:	681b      	ldr	r3, [r3, #0]
   82d22:	1e5a      	subs	r2, r3, #1
   82d24:	4b1c      	ldr	r3, [pc, #112]	; (82d98 <xPortStartScheduler+0xb0>)
   82d26:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   82d28:	79fb      	ldrb	r3, [r7, #7]
   82d2a:	b2db      	uxtb	r3, r3
   82d2c:	005b      	lsls	r3, r3, #1
   82d2e:	b2db      	uxtb	r3, r3
   82d30:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82d32:	79fb      	ldrb	r3, [r7, #7]
   82d34:	b2db      	uxtb	r3, r3
   82d36:	b2db      	uxtb	r3, r3
   82d38:	b25b      	sxtb	r3, r3
   82d3a:	2b00      	cmp	r3, #0
   82d3c:	dbef      	blt.n	82d1e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   82d3e:	4b16      	ldr	r3, [pc, #88]	; (82d98 <xPortStartScheduler+0xb0>)
   82d40:	681b      	ldr	r3, [r3, #0]
   82d42:	021a      	lsls	r2, r3, #8
   82d44:	4b14      	ldr	r3, [pc, #80]	; (82d98 <xPortStartScheduler+0xb0>)
   82d46:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   82d48:	4b13      	ldr	r3, [pc, #76]	; (82d98 <xPortStartScheduler+0xb0>)
   82d4a:	681b      	ldr	r3, [r3, #0]
   82d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82d50:	4b11      	ldr	r3, [pc, #68]	; (82d98 <xPortStartScheduler+0xb0>)
   82d52:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   82d54:	68bb      	ldr	r3, [r7, #8]
   82d56:	b2da      	uxtb	r2, r3
   82d58:	68fb      	ldr	r3, [r7, #12]
   82d5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   82d5c:	4b0f      	ldr	r3, [pc, #60]	; (82d9c <xPortStartScheduler+0xb4>)
   82d5e:	4a0f      	ldr	r2, [pc, #60]	; (82d9c <xPortStartScheduler+0xb4>)
   82d60:	6812      	ldr	r2, [r2, #0]
   82d62:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   82d66:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   82d68:	4b0c      	ldr	r3, [pc, #48]	; (82d9c <xPortStartScheduler+0xb4>)
   82d6a:	4a0c      	ldr	r2, [pc, #48]	; (82d9c <xPortStartScheduler+0xb4>)
   82d6c:	6812      	ldr	r2, [r2, #0]
   82d6e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   82d72:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82d74:	4b0a      	ldr	r3, [pc, #40]	; (82da0 <xPortStartScheduler+0xb8>)
   82d76:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82d78:	4b0a      	ldr	r3, [pc, #40]	; (82da4 <xPortStartScheduler+0xbc>)
   82d7a:	2200      	movs	r2, #0
   82d7c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   82d7e:	4b0a      	ldr	r3, [pc, #40]	; (82da8 <xPortStartScheduler+0xc0>)
   82d80:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   82d82:	4b0a      	ldr	r3, [pc, #40]	; (82dac <xPortStartScheduler+0xc4>)
   82d84:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   82d86:	2300      	movs	r3, #0
}
   82d88:	4618      	mov	r0, r3
   82d8a:	3710      	adds	r7, #16
   82d8c:	46bd      	mov	sp, r7
   82d8e:	bd80      	pop	{r7, pc}
   82d90:	e000e400 	.word	0xe000e400
   82d94:	20070550 	.word	0x20070550
   82d98:	20070554 	.word	0x20070554
   82d9c:	e000ed20 	.word	0xe000ed20
   82da0:	00082ee1 	.word	0x00082ee1
   82da4:	20070008 	.word	0x20070008
   82da8:	00082cc9 	.word	0x00082cc9
   82dac:	00082c81 	.word	0x00082c81

00082db0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   82db0:	b480      	push	{r7}
   82db2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82db4:	4b05      	ldr	r3, [pc, #20]	; (82dcc <vPortYield+0x1c>)
   82db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82dba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   82dbc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82dc0:	f3bf 8f6f 	isb	sy
}
   82dc4:	46bd      	mov	sp, r7
   82dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dca:	4770      	bx	lr
   82dcc:	e000ed04 	.word	0xe000ed04

00082dd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82dd0:	b580      	push	{r7, lr}
   82dd2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   82dd4:	4b0c      	ldr	r3, [pc, #48]	; (82e08 <vPortEnterCritical+0x38>)
   82dd6:	4798      	blx	r3
	uxCriticalNesting++;
   82dd8:	4b0c      	ldr	r3, [pc, #48]	; (82e0c <vPortEnterCritical+0x3c>)
   82dda:	681b      	ldr	r3, [r3, #0]
   82ddc:	1c5a      	adds	r2, r3, #1
   82dde:	4b0b      	ldr	r3, [pc, #44]	; (82e0c <vPortEnterCritical+0x3c>)
   82de0:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   82de2:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82de6:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   82dea:	4b08      	ldr	r3, [pc, #32]	; (82e0c <vPortEnterCritical+0x3c>)
   82dec:	681b      	ldr	r3, [r3, #0]
   82dee:	2b01      	cmp	r3, #1
   82df0:	d108      	bne.n	82e04 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   82df2:	4b07      	ldr	r3, [pc, #28]	; (82e10 <vPortEnterCritical+0x40>)
   82df4:	681b      	ldr	r3, [r3, #0]
   82df6:	f003 031f 	and.w	r3, r3, #31
   82dfa:	2b00      	cmp	r3, #0
   82dfc:	d002      	beq.n	82e04 <vPortEnterCritical+0x34>
   82dfe:	4b02      	ldr	r3, [pc, #8]	; (82e08 <vPortEnterCritical+0x38>)
   82e00:	4798      	blx	r3
   82e02:	e7fe      	b.n	82e02 <vPortEnterCritical+0x32>
	}
}
   82e04:	bd80      	pop	{r7, pc}
   82e06:	bf00      	nop
   82e08:	00082e4d 	.word	0x00082e4d
   82e0c:	20070008 	.word	0x20070008
   82e10:	e000ed04 	.word	0xe000ed04

00082e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82e14:	b580      	push	{r7, lr}
   82e16:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   82e18:	4b09      	ldr	r3, [pc, #36]	; (82e40 <vPortExitCritical+0x2c>)
   82e1a:	681b      	ldr	r3, [r3, #0]
   82e1c:	2b00      	cmp	r3, #0
   82e1e:	d102      	bne.n	82e26 <vPortExitCritical+0x12>
   82e20:	4b08      	ldr	r3, [pc, #32]	; (82e44 <vPortExitCritical+0x30>)
   82e22:	4798      	blx	r3
   82e24:	e7fe      	b.n	82e24 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   82e26:	4b06      	ldr	r3, [pc, #24]	; (82e40 <vPortExitCritical+0x2c>)
   82e28:	681b      	ldr	r3, [r3, #0]
   82e2a:	1e5a      	subs	r2, r3, #1
   82e2c:	4b04      	ldr	r3, [pc, #16]	; (82e40 <vPortExitCritical+0x2c>)
   82e2e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   82e30:	4b03      	ldr	r3, [pc, #12]	; (82e40 <vPortExitCritical+0x2c>)
   82e32:	681b      	ldr	r3, [r3, #0]
   82e34:	2b00      	cmp	r3, #0
   82e36:	d102      	bne.n	82e3e <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   82e38:	2000      	movs	r0, #0
   82e3a:	4b03      	ldr	r3, [pc, #12]	; (82e48 <vPortExitCritical+0x34>)
   82e3c:	4798      	blx	r3
	}
}
   82e3e:	bd80      	pop	{r7, pc}
   82e40:	20070008 	.word	0x20070008
   82e44:	00082e4d 	.word	0x00082e4d
   82e48:	00082e61 	.word	0x00082e61

00082e4c <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82e4c:	f3ef 8011 	mrs	r0, BASEPRI
   82e50:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82e54:	f381 8811 	msr	BASEPRI, r1
   82e58:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   82e5a:	2300      	movs	r3, #0
}
   82e5c:	4618      	mov	r0, r3
   82e5e:	bf00      	nop

00082e60 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   82e60:	f380 8811 	msr	BASEPRI, r0
   82e64:	4770      	bx	lr
   82e66:	bf00      	nop

00082e68 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   82e68:	f3ef 8009 	mrs	r0, PSP
   82e6c:	f3bf 8f6f 	isb	sy
   82e70:	4b0d      	ldr	r3, [pc, #52]	; (82ea8 <pxCurrentTCBConst>)
   82e72:	681a      	ldr	r2, [r3, #0]
   82e74:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82e78:	6010      	str	r0, [r2, #0]
   82e7a:	e92d 4008 	stmdb	sp!, {r3, lr}
   82e7e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82e82:	f380 8811 	msr	BASEPRI, r0
   82e86:	f001 f98d 	bl	841a4 <vTaskSwitchContext>
   82e8a:	f04f 0000 	mov.w	r0, #0
   82e8e:	f380 8811 	msr	BASEPRI, r0
   82e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82e96:	6819      	ldr	r1, [r3, #0]
   82e98:	6808      	ldr	r0, [r1, #0]
   82e9a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82e9e:	f380 8809 	msr	PSP, r0
   82ea2:	f3bf 8f6f 	isb	sy
   82ea6:	4770      	bx	lr

00082ea8 <pxCurrentTCBConst>:
   82ea8:	2007a570 	.word	0x2007a570

00082eac <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   82eac:	b580      	push	{r7, lr}
   82eae:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82eb0:	4b07      	ldr	r3, [pc, #28]	; (82ed0 <SysTick_Handler+0x24>)
   82eb2:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82eb4:	4b07      	ldr	r3, [pc, #28]	; (82ed4 <SysTick_Handler+0x28>)
   82eb6:	4798      	blx	r3
   82eb8:	4603      	mov	r3, r0
   82eba:	2b00      	cmp	r3, #0
   82ebc:	d003      	beq.n	82ec6 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82ebe:	4b06      	ldr	r3, [pc, #24]	; (82ed8 <SysTick_Handler+0x2c>)
   82ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82ec4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   82ec6:	2000      	movs	r0, #0
   82ec8:	4b04      	ldr	r3, [pc, #16]	; (82edc <SysTick_Handler+0x30>)
   82eca:	4798      	blx	r3
}
   82ecc:	bd80      	pop	{r7, pc}
   82ece:	bf00      	nop
   82ed0:	00082e4d 	.word	0x00082e4d
   82ed4:	00084029 	.word	0x00084029
   82ed8:	e000ed04 	.word	0xe000ed04
   82edc:	00082e61 	.word	0x00082e61

00082ee0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   82ee0:	b480      	push	{r7}
   82ee2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   82ee4:	4b07      	ldr	r3, [pc, #28]	; (82f04 <vPortSetupTimerInterrupt+0x24>)
   82ee6:	4a08      	ldr	r2, [pc, #32]	; (82f08 <vPortSetupTimerInterrupt+0x28>)
   82ee8:	6811      	ldr	r1, [r2, #0]
   82eea:	4a08      	ldr	r2, [pc, #32]	; (82f0c <vPortSetupTimerInterrupt+0x2c>)
   82eec:	fba2 0201 	umull	r0, r2, r2, r1
   82ef0:	08d2      	lsrs	r2, r2, #3
   82ef2:	3a01      	subs	r2, #1
   82ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   82ef6:	4b06      	ldr	r3, [pc, #24]	; (82f10 <vPortSetupTimerInterrupt+0x30>)
   82ef8:	2207      	movs	r2, #7
   82efa:	601a      	str	r2, [r3, #0]
}
   82efc:	46bd      	mov	sp, r7
   82efe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f02:	4770      	bx	lr
   82f04:	e000e014 	.word	0xe000e014
   82f08:	20070004 	.word	0x20070004
   82f0c:	cccccccd 	.word	0xcccccccd
   82f10:	e000e010 	.word	0xe000e010

00082f14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   82f14:	b580      	push	{r7, lr}
   82f16:	b082      	sub	sp, #8
   82f18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   82f1a:	f3ef 8305 	mrs	r3, IPSR
   82f1e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   82f20:	687b      	ldr	r3, [r7, #4]
   82f22:	2b0f      	cmp	r3, #15
   82f24:	d90c      	bls.n	82f40 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   82f26:	4a0d      	ldr	r2, [pc, #52]	; (82f5c <vPortValidateInterruptPriority+0x48>)
   82f28:	687b      	ldr	r3, [r7, #4]
   82f2a:	4413      	add	r3, r2
   82f2c:	781b      	ldrb	r3, [r3, #0]
   82f2e:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   82f30:	4b0b      	ldr	r3, [pc, #44]	; (82f60 <vPortValidateInterruptPriority+0x4c>)
   82f32:	781b      	ldrb	r3, [r3, #0]
   82f34:	78fa      	ldrb	r2, [r7, #3]
   82f36:	429a      	cmp	r2, r3
   82f38:	d202      	bcs.n	82f40 <vPortValidateInterruptPriority+0x2c>
   82f3a:	4b0a      	ldr	r3, [pc, #40]	; (82f64 <vPortValidateInterruptPriority+0x50>)
   82f3c:	4798      	blx	r3
   82f3e:	e7fe      	b.n	82f3e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   82f40:	4b09      	ldr	r3, [pc, #36]	; (82f68 <vPortValidateInterruptPriority+0x54>)
   82f42:	681b      	ldr	r3, [r3, #0]
   82f44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82f48:	4b08      	ldr	r3, [pc, #32]	; (82f6c <vPortValidateInterruptPriority+0x58>)
   82f4a:	681b      	ldr	r3, [r3, #0]
   82f4c:	429a      	cmp	r2, r3
   82f4e:	d902      	bls.n	82f56 <vPortValidateInterruptPriority+0x42>
   82f50:	4b04      	ldr	r3, [pc, #16]	; (82f64 <vPortValidateInterruptPriority+0x50>)
   82f52:	4798      	blx	r3
   82f54:	e7fe      	b.n	82f54 <vPortValidateInterruptPriority+0x40>
	}
   82f56:	3708      	adds	r7, #8
   82f58:	46bd      	mov	sp, r7
   82f5a:	bd80      	pop	{r7, pc}
   82f5c:	e000e3f0 	.word	0xe000e3f0
   82f60:	20070550 	.word	0x20070550
   82f64:	00082e4d 	.word	0x00082e4d
   82f68:	e000ed0c 	.word	0xe000ed0c
   82f6c:	20070554 	.word	0x20070554

00082f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   82f70:	b580      	push	{r7, lr}
   82f72:	b086      	sub	sp, #24
   82f74:	af00      	add	r7, sp, #0
   82f76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82f78:	2300      	movs	r3, #0
   82f7a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   82f7c:	4b4f      	ldr	r3, [pc, #316]	; (830bc <pvPortMalloc+0x14c>)
   82f7e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   82f80:	4b4f      	ldr	r3, [pc, #316]	; (830c0 <pvPortMalloc+0x150>)
   82f82:	681b      	ldr	r3, [r3, #0]
   82f84:	2b00      	cmp	r3, #0
   82f86:	d101      	bne.n	82f8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   82f88:	4b4e      	ldr	r3, [pc, #312]	; (830c4 <pvPortMalloc+0x154>)
   82f8a:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   82f8c:	4b4e      	ldr	r3, [pc, #312]	; (830c8 <pvPortMalloc+0x158>)
   82f8e:	681a      	ldr	r2, [r3, #0]
   82f90:	687b      	ldr	r3, [r7, #4]
   82f92:	4013      	ands	r3, r2
   82f94:	2b00      	cmp	r3, #0
   82f96:	d17d      	bne.n	83094 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   82f98:	687b      	ldr	r3, [r7, #4]
   82f9a:	2b00      	cmp	r3, #0
   82f9c:	d015      	beq.n	82fca <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   82f9e:	2308      	movs	r3, #8
   82fa0:	687a      	ldr	r2, [r7, #4]
   82fa2:	4413      	add	r3, r2
   82fa4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   82fa6:	687b      	ldr	r3, [r7, #4]
   82fa8:	f003 0307 	and.w	r3, r3, #7
   82fac:	2b00      	cmp	r3, #0
   82fae:	d00c      	beq.n	82fca <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   82fb0:	687b      	ldr	r3, [r7, #4]
   82fb2:	f023 0307 	bic.w	r3, r3, #7
   82fb6:	3308      	adds	r3, #8
   82fb8:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   82fba:	687b      	ldr	r3, [r7, #4]
   82fbc:	f003 0307 	and.w	r3, r3, #7
   82fc0:	2b00      	cmp	r3, #0
   82fc2:	d002      	beq.n	82fca <pvPortMalloc+0x5a>
   82fc4:	4b41      	ldr	r3, [pc, #260]	; (830cc <pvPortMalloc+0x15c>)
   82fc6:	4798      	blx	r3
   82fc8:	e7fe      	b.n	82fc8 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   82fca:	687b      	ldr	r3, [r7, #4]
   82fcc:	2b00      	cmp	r3, #0
   82fce:	d061      	beq.n	83094 <pvPortMalloc+0x124>
   82fd0:	4b3f      	ldr	r3, [pc, #252]	; (830d0 <pvPortMalloc+0x160>)
   82fd2:	681b      	ldr	r3, [r3, #0]
   82fd4:	687a      	ldr	r2, [r7, #4]
   82fd6:	429a      	cmp	r2, r3
   82fd8:	d85c      	bhi.n	83094 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   82fda:	4b3e      	ldr	r3, [pc, #248]	; (830d4 <pvPortMalloc+0x164>)
   82fdc:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   82fde:	4b3d      	ldr	r3, [pc, #244]	; (830d4 <pvPortMalloc+0x164>)
   82fe0:	681b      	ldr	r3, [r3, #0]
   82fe2:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82fe4:	e004      	b.n	82ff0 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   82fe6:	697b      	ldr	r3, [r7, #20]
   82fe8:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   82fea:	697b      	ldr	r3, [r7, #20]
   82fec:	681b      	ldr	r3, [r3, #0]
   82fee:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82ff0:	697b      	ldr	r3, [r7, #20]
   82ff2:	685a      	ldr	r2, [r3, #4]
   82ff4:	687b      	ldr	r3, [r7, #4]
   82ff6:	429a      	cmp	r2, r3
   82ff8:	d203      	bcs.n	83002 <pvPortMalloc+0x92>
   82ffa:	697b      	ldr	r3, [r7, #20]
   82ffc:	681b      	ldr	r3, [r3, #0]
   82ffe:	2b00      	cmp	r3, #0
   83000:	d1f1      	bne.n	82fe6 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   83002:	4b2f      	ldr	r3, [pc, #188]	; (830c0 <pvPortMalloc+0x150>)
   83004:	681b      	ldr	r3, [r3, #0]
   83006:	697a      	ldr	r2, [r7, #20]
   83008:	429a      	cmp	r2, r3
   8300a:	d043      	beq.n	83094 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   8300c:	693b      	ldr	r3, [r7, #16]
   8300e:	681a      	ldr	r2, [r3, #0]
   83010:	2308      	movs	r3, #8
   83012:	4413      	add	r3, r2
   83014:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   83016:	697b      	ldr	r3, [r7, #20]
   83018:	681a      	ldr	r2, [r3, #0]
   8301a:	693b      	ldr	r3, [r7, #16]
   8301c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8301e:	697b      	ldr	r3, [r7, #20]
   83020:	685a      	ldr	r2, [r3, #4]
   83022:	687b      	ldr	r3, [r7, #4]
   83024:	1ad2      	subs	r2, r2, r3
   83026:	2308      	movs	r3, #8
   83028:	005b      	lsls	r3, r3, #1
   8302a:	429a      	cmp	r2, r3
   8302c:	d917      	bls.n	8305e <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   8302e:	697a      	ldr	r2, [r7, #20]
   83030:	687b      	ldr	r3, [r7, #4]
   83032:	4413      	add	r3, r2
   83034:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   83036:	68bb      	ldr	r3, [r7, #8]
   83038:	f003 0307 	and.w	r3, r3, #7
   8303c:	2b00      	cmp	r3, #0
   8303e:	d002      	beq.n	83046 <pvPortMalloc+0xd6>
   83040:	4b22      	ldr	r3, [pc, #136]	; (830cc <pvPortMalloc+0x15c>)
   83042:	4798      	blx	r3
   83044:	e7fe      	b.n	83044 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   83046:	697b      	ldr	r3, [r7, #20]
   83048:	685a      	ldr	r2, [r3, #4]
   8304a:	687b      	ldr	r3, [r7, #4]
   8304c:	1ad2      	subs	r2, r2, r3
   8304e:	68bb      	ldr	r3, [r7, #8]
   83050:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   83052:	697b      	ldr	r3, [r7, #20]
   83054:	687a      	ldr	r2, [r7, #4]
   83056:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   83058:	68b8      	ldr	r0, [r7, #8]
   8305a:	4b1f      	ldr	r3, [pc, #124]	; (830d8 <pvPortMalloc+0x168>)
   8305c:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   8305e:	4b1c      	ldr	r3, [pc, #112]	; (830d0 <pvPortMalloc+0x160>)
   83060:	681a      	ldr	r2, [r3, #0]
   83062:	697b      	ldr	r3, [r7, #20]
   83064:	685b      	ldr	r3, [r3, #4]
   83066:	1ad2      	subs	r2, r2, r3
   83068:	4b19      	ldr	r3, [pc, #100]	; (830d0 <pvPortMalloc+0x160>)
   8306a:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   8306c:	4b18      	ldr	r3, [pc, #96]	; (830d0 <pvPortMalloc+0x160>)
   8306e:	681a      	ldr	r2, [r3, #0]
   83070:	4b1a      	ldr	r3, [pc, #104]	; (830dc <pvPortMalloc+0x16c>)
   83072:	681b      	ldr	r3, [r3, #0]
   83074:	429a      	cmp	r2, r3
   83076:	d203      	bcs.n	83080 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   83078:	4b15      	ldr	r3, [pc, #84]	; (830d0 <pvPortMalloc+0x160>)
   8307a:	681a      	ldr	r2, [r3, #0]
   8307c:	4b17      	ldr	r3, [pc, #92]	; (830dc <pvPortMalloc+0x16c>)
   8307e:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   83080:	697b      	ldr	r3, [r7, #20]
   83082:	685a      	ldr	r2, [r3, #4]
   83084:	4b10      	ldr	r3, [pc, #64]	; (830c8 <pvPortMalloc+0x158>)
   83086:	681b      	ldr	r3, [r3, #0]
   83088:	431a      	orrs	r2, r3
   8308a:	697b      	ldr	r3, [r7, #20]
   8308c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   8308e:	697b      	ldr	r3, [r7, #20]
   83090:	2200      	movs	r2, #0
   83092:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   83094:	4b12      	ldr	r3, [pc, #72]	; (830e0 <pvPortMalloc+0x170>)
   83096:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   83098:	68fb      	ldr	r3, [r7, #12]
   8309a:	2b00      	cmp	r3, #0
   8309c:	d101      	bne.n	830a2 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   8309e:	4b11      	ldr	r3, [pc, #68]	; (830e4 <pvPortMalloc+0x174>)
   830a0:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   830a2:	68fb      	ldr	r3, [r7, #12]
   830a4:	f003 0307 	and.w	r3, r3, #7
   830a8:	2b00      	cmp	r3, #0
   830aa:	d002      	beq.n	830b2 <pvPortMalloc+0x142>
   830ac:	4b07      	ldr	r3, [pc, #28]	; (830cc <pvPortMalloc+0x15c>)
   830ae:	4798      	blx	r3
   830b0:	e7fe      	b.n	830b0 <pvPortMalloc+0x140>
	return pvReturn;
   830b2:	68fb      	ldr	r3, [r7, #12]
}
   830b4:	4618      	mov	r0, r3
   830b6:	3718      	adds	r7, #24
   830b8:	46bd      	mov	sp, r7
   830ba:	bd80      	pop	{r7, pc}
   830bc:	00083ebd 	.word	0x00083ebd
   830c0:	2007a560 	.word	0x2007a560
   830c4:	0008318d 	.word	0x0008318d
   830c8:	2007a56c 	.word	0x2007a56c
   830cc:	00082e4d 	.word	0x00082e4d
   830d0:	2007a564 	.word	0x2007a564
   830d4:	2007a558 	.word	0x2007a558
   830d8:	00083251 	.word	0x00083251
   830dc:	2007a568 	.word	0x2007a568
   830e0:	00083ed9 	.word	0x00083ed9
   830e4:	00085d49 	.word	0x00085d49

000830e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   830e8:	b580      	push	{r7, lr}
   830ea:	b084      	sub	sp, #16
   830ec:	af00      	add	r7, sp, #0
   830ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   830f0:	687b      	ldr	r3, [r7, #4]
   830f2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   830f4:	687b      	ldr	r3, [r7, #4]
   830f6:	2b00      	cmp	r3, #0
   830f8:	d038      	beq.n	8316c <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   830fa:	2308      	movs	r3, #8
   830fc:	425b      	negs	r3, r3
   830fe:	68fa      	ldr	r2, [r7, #12]
   83100:	4413      	add	r3, r2
   83102:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   83104:	68fb      	ldr	r3, [r7, #12]
   83106:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   83108:	68bb      	ldr	r3, [r7, #8]
   8310a:	685a      	ldr	r2, [r3, #4]
   8310c:	4b19      	ldr	r3, [pc, #100]	; (83174 <vPortFree+0x8c>)
   8310e:	681b      	ldr	r3, [r3, #0]
   83110:	4013      	ands	r3, r2
   83112:	2b00      	cmp	r3, #0
   83114:	d102      	bne.n	8311c <vPortFree+0x34>
   83116:	4b18      	ldr	r3, [pc, #96]	; (83178 <vPortFree+0x90>)
   83118:	4798      	blx	r3
   8311a:	e7fe      	b.n	8311a <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   8311c:	68bb      	ldr	r3, [r7, #8]
   8311e:	681b      	ldr	r3, [r3, #0]
   83120:	2b00      	cmp	r3, #0
   83122:	d002      	beq.n	8312a <vPortFree+0x42>
   83124:	4b14      	ldr	r3, [pc, #80]	; (83178 <vPortFree+0x90>)
   83126:	4798      	blx	r3
   83128:	e7fe      	b.n	83128 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   8312a:	68bb      	ldr	r3, [r7, #8]
   8312c:	685a      	ldr	r2, [r3, #4]
   8312e:	4b11      	ldr	r3, [pc, #68]	; (83174 <vPortFree+0x8c>)
   83130:	681b      	ldr	r3, [r3, #0]
   83132:	4013      	ands	r3, r2
   83134:	2b00      	cmp	r3, #0
   83136:	d019      	beq.n	8316c <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   83138:	68bb      	ldr	r3, [r7, #8]
   8313a:	681b      	ldr	r3, [r3, #0]
   8313c:	2b00      	cmp	r3, #0
   8313e:	d115      	bne.n	8316c <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   83140:	68bb      	ldr	r3, [r7, #8]
   83142:	685a      	ldr	r2, [r3, #4]
   83144:	4b0b      	ldr	r3, [pc, #44]	; (83174 <vPortFree+0x8c>)
   83146:	681b      	ldr	r3, [r3, #0]
   83148:	43db      	mvns	r3, r3
   8314a:	401a      	ands	r2, r3
   8314c:	68bb      	ldr	r3, [r7, #8]
   8314e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   83150:	4b0a      	ldr	r3, [pc, #40]	; (8317c <vPortFree+0x94>)
   83152:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   83154:	68bb      	ldr	r3, [r7, #8]
   83156:	685a      	ldr	r2, [r3, #4]
   83158:	4b09      	ldr	r3, [pc, #36]	; (83180 <vPortFree+0x98>)
   8315a:	681b      	ldr	r3, [r3, #0]
   8315c:	441a      	add	r2, r3
   8315e:	4b08      	ldr	r3, [pc, #32]	; (83180 <vPortFree+0x98>)
   83160:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   83162:	68b8      	ldr	r0, [r7, #8]
   83164:	4b07      	ldr	r3, [pc, #28]	; (83184 <vPortFree+0x9c>)
   83166:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   83168:	4b07      	ldr	r3, [pc, #28]	; (83188 <vPortFree+0xa0>)
   8316a:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   8316c:	3710      	adds	r7, #16
   8316e:	46bd      	mov	sp, r7
   83170:	bd80      	pop	{r7, pc}
   83172:	bf00      	nop
   83174:	2007a56c 	.word	0x2007a56c
   83178:	00082e4d 	.word	0x00082e4d
   8317c:	00083ebd 	.word	0x00083ebd
   83180:	2007a564 	.word	0x2007a564
   83184:	00083251 	.word	0x00083251
   83188:	00083ed9 	.word	0x00083ed9

0008318c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   8318c:	b480      	push	{r7}
   8318e:	b085      	sub	sp, #20
   83190:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   83192:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   83196:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   83198:	4b27      	ldr	r3, [pc, #156]	; (83238 <prvHeapInit+0xac>)
   8319a:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   8319c:	68fb      	ldr	r3, [r7, #12]
   8319e:	f003 0307 	and.w	r3, r3, #7
   831a2:	2b00      	cmp	r3, #0
   831a4:	d00c      	beq.n	831c0 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   831a6:	68fb      	ldr	r3, [r7, #12]
   831a8:	3307      	adds	r3, #7
   831aa:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   831ac:	68fb      	ldr	r3, [r7, #12]
   831ae:	f023 0307 	bic.w	r3, r3, #7
   831b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   831b4:	68ba      	ldr	r2, [r7, #8]
   831b6:	68fb      	ldr	r3, [r7, #12]
   831b8:	1ad2      	subs	r2, r2, r3
   831ba:	4b1f      	ldr	r3, [pc, #124]	; (83238 <prvHeapInit+0xac>)
   831bc:	4413      	add	r3, r2
   831be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   831c0:	68fb      	ldr	r3, [r7, #12]
   831c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   831c4:	4b1d      	ldr	r3, [pc, #116]	; (8323c <prvHeapInit+0xb0>)
   831c6:	687a      	ldr	r2, [r7, #4]
   831c8:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   831ca:	4b1c      	ldr	r3, [pc, #112]	; (8323c <prvHeapInit+0xb0>)
   831cc:	2200      	movs	r2, #0
   831ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   831d0:	687a      	ldr	r2, [r7, #4]
   831d2:	68bb      	ldr	r3, [r7, #8]
   831d4:	4413      	add	r3, r2
   831d6:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   831d8:	2308      	movs	r3, #8
   831da:	68fa      	ldr	r2, [r7, #12]
   831dc:	1ad3      	subs	r3, r2, r3
   831de:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   831e0:	68fb      	ldr	r3, [r7, #12]
   831e2:	f023 0307 	bic.w	r3, r3, #7
   831e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   831e8:	68fa      	ldr	r2, [r7, #12]
   831ea:	4b15      	ldr	r3, [pc, #84]	; (83240 <prvHeapInit+0xb4>)
   831ec:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   831ee:	4b14      	ldr	r3, [pc, #80]	; (83240 <prvHeapInit+0xb4>)
   831f0:	681b      	ldr	r3, [r3, #0]
   831f2:	2200      	movs	r2, #0
   831f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   831f6:	4b12      	ldr	r3, [pc, #72]	; (83240 <prvHeapInit+0xb4>)
   831f8:	681b      	ldr	r3, [r3, #0]
   831fa:	2200      	movs	r2, #0
   831fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   831fe:	687b      	ldr	r3, [r7, #4]
   83200:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   83202:	683b      	ldr	r3, [r7, #0]
   83204:	68fa      	ldr	r2, [r7, #12]
   83206:	1ad2      	subs	r2, r2, r3
   83208:	683b      	ldr	r3, [r7, #0]
   8320a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8320c:	4b0c      	ldr	r3, [pc, #48]	; (83240 <prvHeapInit+0xb4>)
   8320e:	681a      	ldr	r2, [r3, #0]
   83210:	683b      	ldr	r3, [r7, #0]
   83212:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83214:	683b      	ldr	r3, [r7, #0]
   83216:	685a      	ldr	r2, [r3, #4]
   83218:	4b0a      	ldr	r3, [pc, #40]	; (83244 <prvHeapInit+0xb8>)
   8321a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8321c:	683b      	ldr	r3, [r7, #0]
   8321e:	685a      	ldr	r2, [r3, #4]
   83220:	4b09      	ldr	r3, [pc, #36]	; (83248 <prvHeapInit+0xbc>)
   83222:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   83224:	4b09      	ldr	r3, [pc, #36]	; (8324c <prvHeapInit+0xc0>)
   83226:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   8322a:	601a      	str	r2, [r3, #0]
}
   8322c:	3714      	adds	r7, #20
   8322e:	46bd      	mov	sp, r7
   83230:	f85d 7b04 	ldr.w	r7, [sp], #4
   83234:	4770      	bx	lr
   83236:	bf00      	nop
   83238:	20070558 	.word	0x20070558
   8323c:	2007a558 	.word	0x2007a558
   83240:	2007a560 	.word	0x2007a560
   83244:	2007a568 	.word	0x2007a568
   83248:	2007a564 	.word	0x2007a564
   8324c:	2007a56c 	.word	0x2007a56c

00083250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   83250:	b480      	push	{r7}
   83252:	b085      	sub	sp, #20
   83254:	af00      	add	r7, sp, #0
   83256:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   83258:	4b27      	ldr	r3, [pc, #156]	; (832f8 <prvInsertBlockIntoFreeList+0xa8>)
   8325a:	60fb      	str	r3, [r7, #12]
   8325c:	e002      	b.n	83264 <prvInsertBlockIntoFreeList+0x14>
   8325e:	68fb      	ldr	r3, [r7, #12]
   83260:	681b      	ldr	r3, [r3, #0]
   83262:	60fb      	str	r3, [r7, #12]
   83264:	68fb      	ldr	r3, [r7, #12]
   83266:	681a      	ldr	r2, [r3, #0]
   83268:	687b      	ldr	r3, [r7, #4]
   8326a:	429a      	cmp	r2, r3
   8326c:	d3f7      	bcc.n	8325e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   8326e:	68fb      	ldr	r3, [r7, #12]
   83270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   83272:	68fb      	ldr	r3, [r7, #12]
   83274:	685b      	ldr	r3, [r3, #4]
   83276:	68ba      	ldr	r2, [r7, #8]
   83278:	441a      	add	r2, r3
   8327a:	687b      	ldr	r3, [r7, #4]
   8327c:	429a      	cmp	r2, r3
   8327e:	d108      	bne.n	83292 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   83280:	68fb      	ldr	r3, [r7, #12]
   83282:	685a      	ldr	r2, [r3, #4]
   83284:	687b      	ldr	r3, [r7, #4]
   83286:	685b      	ldr	r3, [r3, #4]
   83288:	441a      	add	r2, r3
   8328a:	68fb      	ldr	r3, [r7, #12]
   8328c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   8328e:	68fb      	ldr	r3, [r7, #12]
   83290:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   83292:	687b      	ldr	r3, [r7, #4]
   83294:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   83296:	687b      	ldr	r3, [r7, #4]
   83298:	685b      	ldr	r3, [r3, #4]
   8329a:	68ba      	ldr	r2, [r7, #8]
   8329c:	441a      	add	r2, r3
   8329e:	68fb      	ldr	r3, [r7, #12]
   832a0:	681b      	ldr	r3, [r3, #0]
   832a2:	429a      	cmp	r2, r3
   832a4:	d118      	bne.n	832d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   832a6:	68fb      	ldr	r3, [r7, #12]
   832a8:	681a      	ldr	r2, [r3, #0]
   832aa:	4b14      	ldr	r3, [pc, #80]	; (832fc <prvInsertBlockIntoFreeList+0xac>)
   832ac:	681b      	ldr	r3, [r3, #0]
   832ae:	429a      	cmp	r2, r3
   832b0:	d00d      	beq.n	832ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   832b2:	687b      	ldr	r3, [r7, #4]
   832b4:	685a      	ldr	r2, [r3, #4]
   832b6:	68fb      	ldr	r3, [r7, #12]
   832b8:	681b      	ldr	r3, [r3, #0]
   832ba:	685b      	ldr	r3, [r3, #4]
   832bc:	441a      	add	r2, r3
   832be:	687b      	ldr	r3, [r7, #4]
   832c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   832c2:	68fb      	ldr	r3, [r7, #12]
   832c4:	681b      	ldr	r3, [r3, #0]
   832c6:	681a      	ldr	r2, [r3, #0]
   832c8:	687b      	ldr	r3, [r7, #4]
   832ca:	601a      	str	r2, [r3, #0]
   832cc:	e008      	b.n	832e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   832ce:	4b0b      	ldr	r3, [pc, #44]	; (832fc <prvInsertBlockIntoFreeList+0xac>)
   832d0:	681a      	ldr	r2, [r3, #0]
   832d2:	687b      	ldr	r3, [r7, #4]
   832d4:	601a      	str	r2, [r3, #0]
   832d6:	e003      	b.n	832e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   832d8:	68fb      	ldr	r3, [r7, #12]
   832da:	681a      	ldr	r2, [r3, #0]
   832dc:	687b      	ldr	r3, [r7, #4]
   832de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   832e0:	68fa      	ldr	r2, [r7, #12]
   832e2:	687b      	ldr	r3, [r7, #4]
   832e4:	429a      	cmp	r2, r3
   832e6:	d002      	beq.n	832ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   832e8:	68fb      	ldr	r3, [r7, #12]
   832ea:	687a      	ldr	r2, [r7, #4]
   832ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   832ee:	3714      	adds	r7, #20
   832f0:	46bd      	mov	sp, r7
   832f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   832f6:	4770      	bx	lr
   832f8:	2007a558 	.word	0x2007a558
   832fc:	2007a560 	.word	0x2007a560

00083300 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   83300:	b580      	push	{r7, lr}
   83302:	b084      	sub	sp, #16
   83304:	af00      	add	r7, sp, #0
   83306:	6078      	str	r0, [r7, #4]
   83308:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8330a:	687b      	ldr	r3, [r7, #4]
   8330c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8330e:	68fb      	ldr	r3, [r7, #12]
   83310:	2b00      	cmp	r3, #0
   83312:	d102      	bne.n	8331a <xQueueGenericReset+0x1a>
   83314:	4b26      	ldr	r3, [pc, #152]	; (833b0 <xQueueGenericReset+0xb0>)
   83316:	4798      	blx	r3
   83318:	e7fe      	b.n	83318 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8331a:	4b26      	ldr	r3, [pc, #152]	; (833b4 <xQueueGenericReset+0xb4>)
   8331c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8331e:	68fb      	ldr	r3, [r7, #12]
   83320:	681a      	ldr	r2, [r3, #0]
   83322:	68fb      	ldr	r3, [r7, #12]
   83324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83326:	68f9      	ldr	r1, [r7, #12]
   83328:	6c09      	ldr	r1, [r1, #64]	; 0x40
   8332a:	fb01 f303 	mul.w	r3, r1, r3
   8332e:	441a      	add	r2, r3
   83330:	68fb      	ldr	r3, [r7, #12]
   83332:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   83334:	68fb      	ldr	r3, [r7, #12]
   83336:	2200      	movs	r2, #0
   83338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8333a:	68fb      	ldr	r3, [r7, #12]
   8333c:	681a      	ldr	r2, [r3, #0]
   8333e:	68fb      	ldr	r3, [r7, #12]
   83340:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   83342:	68fb      	ldr	r3, [r7, #12]
   83344:	681a      	ldr	r2, [r3, #0]
   83346:	68fb      	ldr	r3, [r7, #12]
   83348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8334a:	3b01      	subs	r3, #1
   8334c:	68f9      	ldr	r1, [r7, #12]
   8334e:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83350:	fb01 f303 	mul.w	r3, r1, r3
   83354:	441a      	add	r2, r3
   83356:	68fb      	ldr	r3, [r7, #12]
   83358:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8335a:	68fb      	ldr	r3, [r7, #12]
   8335c:	f04f 32ff 	mov.w	r2, #4294967295
   83360:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   83362:	68fb      	ldr	r3, [r7, #12]
   83364:	f04f 32ff 	mov.w	r2, #4294967295
   83368:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8336a:	683b      	ldr	r3, [r7, #0]
   8336c:	2b00      	cmp	r3, #0
   8336e:	d10e      	bne.n	8338e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83370:	68fb      	ldr	r3, [r7, #12]
   83372:	691b      	ldr	r3, [r3, #16]
   83374:	2b00      	cmp	r3, #0
   83376:	d014      	beq.n	833a2 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83378:	68fb      	ldr	r3, [r7, #12]
   8337a:	3310      	adds	r3, #16
   8337c:	4618      	mov	r0, r3
   8337e:	4b0e      	ldr	r3, [pc, #56]	; (833b8 <xQueueGenericReset+0xb8>)
   83380:	4798      	blx	r3
   83382:	4603      	mov	r3, r0
   83384:	2b01      	cmp	r3, #1
   83386:	d10c      	bne.n	833a2 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   83388:	4b0c      	ldr	r3, [pc, #48]	; (833bc <xQueueGenericReset+0xbc>)
   8338a:	4798      	blx	r3
   8338c:	e009      	b.n	833a2 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8338e:	68fb      	ldr	r3, [r7, #12]
   83390:	3310      	adds	r3, #16
   83392:	4618      	mov	r0, r3
   83394:	4b0a      	ldr	r3, [pc, #40]	; (833c0 <xQueueGenericReset+0xc0>)
   83396:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   83398:	68fb      	ldr	r3, [r7, #12]
   8339a:	3324      	adds	r3, #36	; 0x24
   8339c:	4618      	mov	r0, r3
   8339e:	4b08      	ldr	r3, [pc, #32]	; (833c0 <xQueueGenericReset+0xc0>)
   833a0:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   833a2:	4b08      	ldr	r3, [pc, #32]	; (833c4 <xQueueGenericReset+0xc4>)
   833a4:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   833a6:	2301      	movs	r3, #1
}
   833a8:	4618      	mov	r0, r3
   833aa:	3710      	adds	r7, #16
   833ac:	46bd      	mov	sp, r7
   833ae:	bd80      	pop	{r7, pc}
   833b0:	00082e4d 	.word	0x00082e4d
   833b4:	00082dd1 	.word	0x00082dd1
   833b8:	000843c1 	.word	0x000843c1
   833bc:	00082db1 	.word	0x00082db1
   833c0:	00082ac5 	.word	0x00082ac5
   833c4:	00082e15 	.word	0x00082e15

000833c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   833c8:	b580      	push	{r7, lr}
   833ca:	b088      	sub	sp, #32
   833cc:	af00      	add	r7, sp, #0
   833ce:	60f8      	str	r0, [r7, #12]
   833d0:	60b9      	str	r1, [r7, #8]
   833d2:	4613      	mov	r3, r2
   833d4:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   833d6:	2300      	movs	r3, #0
   833d8:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   833da:	68fb      	ldr	r3, [r7, #12]
   833dc:	2b00      	cmp	r3, #0
   833de:	d026      	beq.n	8342e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   833e0:	204c      	movs	r0, #76	; 0x4c
   833e2:	4b18      	ldr	r3, [pc, #96]	; (83444 <xQueueGenericCreate+0x7c>)
   833e4:	4798      	blx	r3
   833e6:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   833e8:	69bb      	ldr	r3, [r7, #24]
   833ea:	2b00      	cmp	r3, #0
   833ec:	d01f      	beq.n	8342e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   833ee:	68fb      	ldr	r3, [r7, #12]
   833f0:	68ba      	ldr	r2, [r7, #8]
   833f2:	fb02 f303 	mul.w	r3, r2, r3
   833f6:	3301      	adds	r3, #1
   833f8:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   833fa:	6978      	ldr	r0, [r7, #20]
   833fc:	4b11      	ldr	r3, [pc, #68]	; (83444 <xQueueGenericCreate+0x7c>)
   833fe:	4798      	blx	r3
   83400:	4602      	mov	r2, r0
   83402:	69bb      	ldr	r3, [r7, #24]
   83404:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   83406:	69bb      	ldr	r3, [r7, #24]
   83408:	681b      	ldr	r3, [r3, #0]
   8340a:	2b00      	cmp	r3, #0
   8340c:	d00c      	beq.n	83428 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8340e:	69bb      	ldr	r3, [r7, #24]
   83410:	68fa      	ldr	r2, [r7, #12]
   83412:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   83414:	69bb      	ldr	r3, [r7, #24]
   83416:	68ba      	ldr	r2, [r7, #8]
   83418:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8341a:	69b8      	ldr	r0, [r7, #24]
   8341c:	2101      	movs	r1, #1
   8341e:	4b0a      	ldr	r3, [pc, #40]	; (83448 <xQueueGenericCreate+0x80>)
   83420:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   83422:	69bb      	ldr	r3, [r7, #24]
   83424:	61fb      	str	r3, [r7, #28]
   83426:	e002      	b.n	8342e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   83428:	69b8      	ldr	r0, [r7, #24]
   8342a:	4b08      	ldr	r3, [pc, #32]	; (8344c <xQueueGenericCreate+0x84>)
   8342c:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8342e:	69fb      	ldr	r3, [r7, #28]
   83430:	2b00      	cmp	r3, #0
   83432:	d102      	bne.n	8343a <xQueueGenericCreate+0x72>
   83434:	4b06      	ldr	r3, [pc, #24]	; (83450 <xQueueGenericCreate+0x88>)
   83436:	4798      	blx	r3
   83438:	e7fe      	b.n	83438 <xQueueGenericCreate+0x70>

	return xReturn;
   8343a:	69fb      	ldr	r3, [r7, #28]
}
   8343c:	4618      	mov	r0, r3
   8343e:	3720      	adds	r7, #32
   83440:	46bd      	mov	sp, r7
   83442:	bd80      	pop	{r7, pc}
   83444:	00082f71 	.word	0x00082f71
   83448:	00083301 	.word	0x00083301
   8344c:	000830e9 	.word	0x000830e9
   83450:	00082e4d 	.word	0x00082e4d

00083454 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   83454:	b580      	push	{r7, lr}
   83456:	b08a      	sub	sp, #40	; 0x28
   83458:	af00      	add	r7, sp, #0
   8345a:	60f8      	str	r0, [r7, #12]
   8345c:	60b9      	str	r1, [r7, #8]
   8345e:	607a      	str	r2, [r7, #4]
   83460:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   83462:	2300      	movs	r3, #0
   83464:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83466:	68fb      	ldr	r3, [r7, #12]
   83468:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   8346a:	6a3b      	ldr	r3, [r7, #32]
   8346c:	2b00      	cmp	r3, #0
   8346e:	d102      	bne.n	83476 <xQueueGenericSend+0x22>
   83470:	4b5b      	ldr	r3, [pc, #364]	; (835e0 <xQueueGenericSend+0x18c>)
   83472:	4798      	blx	r3
   83474:	e7fe      	b.n	83474 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83476:	68bb      	ldr	r3, [r7, #8]
   83478:	2b00      	cmp	r3, #0
   8347a:	d103      	bne.n	83484 <xQueueGenericSend+0x30>
   8347c:	6a3b      	ldr	r3, [r7, #32]
   8347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83480:	2b00      	cmp	r3, #0
   83482:	d101      	bne.n	83488 <xQueueGenericSend+0x34>
   83484:	2301      	movs	r3, #1
   83486:	e000      	b.n	8348a <xQueueGenericSend+0x36>
   83488:	2300      	movs	r3, #0
   8348a:	2b00      	cmp	r3, #0
   8348c:	d102      	bne.n	83494 <xQueueGenericSend+0x40>
   8348e:	4b54      	ldr	r3, [pc, #336]	; (835e0 <xQueueGenericSend+0x18c>)
   83490:	4798      	blx	r3
   83492:	e7fe      	b.n	83492 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83494:	683b      	ldr	r3, [r7, #0]
   83496:	2b02      	cmp	r3, #2
   83498:	d103      	bne.n	834a2 <xQueueGenericSend+0x4e>
   8349a:	6a3b      	ldr	r3, [r7, #32]
   8349c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8349e:	2b01      	cmp	r3, #1
   834a0:	d101      	bne.n	834a6 <xQueueGenericSend+0x52>
   834a2:	2301      	movs	r3, #1
   834a4:	e000      	b.n	834a8 <xQueueGenericSend+0x54>
   834a6:	2300      	movs	r3, #0
   834a8:	2b00      	cmp	r3, #0
   834aa:	d102      	bne.n	834b2 <xQueueGenericSend+0x5e>
   834ac:	4b4c      	ldr	r3, [pc, #304]	; (835e0 <xQueueGenericSend+0x18c>)
   834ae:	4798      	blx	r3
   834b0:	e7fe      	b.n	834b0 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   834b2:	4b4c      	ldr	r3, [pc, #304]	; (835e4 <xQueueGenericSend+0x190>)
   834b4:	4798      	blx	r3
   834b6:	4603      	mov	r3, r0
   834b8:	2b00      	cmp	r3, #0
   834ba:	d102      	bne.n	834c2 <xQueueGenericSend+0x6e>
   834bc:	687b      	ldr	r3, [r7, #4]
   834be:	2b00      	cmp	r3, #0
   834c0:	d101      	bne.n	834c6 <xQueueGenericSend+0x72>
   834c2:	2301      	movs	r3, #1
   834c4:	e000      	b.n	834c8 <xQueueGenericSend+0x74>
   834c6:	2300      	movs	r3, #0
   834c8:	2b00      	cmp	r3, #0
   834ca:	d102      	bne.n	834d2 <xQueueGenericSend+0x7e>
   834cc:	4b44      	ldr	r3, [pc, #272]	; (835e0 <xQueueGenericSend+0x18c>)
   834ce:	4798      	blx	r3
   834d0:	e7fe      	b.n	834d0 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   834d2:	4b45      	ldr	r3, [pc, #276]	; (835e8 <xQueueGenericSend+0x194>)
   834d4:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   834d6:	6a3b      	ldr	r3, [r7, #32]
   834d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   834da:	6a3b      	ldr	r3, [r7, #32]
   834dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   834de:	429a      	cmp	r2, r3
   834e0:	d302      	bcc.n	834e8 <xQueueGenericSend+0x94>
   834e2:	683b      	ldr	r3, [r7, #0]
   834e4:	2b02      	cmp	r3, #2
   834e6:	d11d      	bne.n	83524 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   834e8:	6a38      	ldr	r0, [r7, #32]
   834ea:	68b9      	ldr	r1, [r7, #8]
   834ec:	683a      	ldr	r2, [r7, #0]
   834ee:	4b3f      	ldr	r3, [pc, #252]	; (835ec <xQueueGenericSend+0x198>)
   834f0:	4798      	blx	r3
   834f2:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   834f4:	6a3b      	ldr	r3, [r7, #32]
   834f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   834f8:	2b00      	cmp	r3, #0
   834fa:	d00a      	beq.n	83512 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   834fc:	6a3b      	ldr	r3, [r7, #32]
   834fe:	3324      	adds	r3, #36	; 0x24
   83500:	4618      	mov	r0, r3
   83502:	4b3b      	ldr	r3, [pc, #236]	; (835f0 <xQueueGenericSend+0x19c>)
   83504:	4798      	blx	r3
   83506:	4603      	mov	r3, r0
   83508:	2b01      	cmp	r3, #1
   8350a:	d107      	bne.n	8351c <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   8350c:	4b39      	ldr	r3, [pc, #228]	; (835f4 <xQueueGenericSend+0x1a0>)
   8350e:	4798      	blx	r3
   83510:	e004      	b.n	8351c <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   83512:	69fb      	ldr	r3, [r7, #28]
   83514:	2b00      	cmp	r3, #0
   83516:	d001      	beq.n	8351c <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83518:	4b36      	ldr	r3, [pc, #216]	; (835f4 <xQueueGenericSend+0x1a0>)
   8351a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   8351c:	4b36      	ldr	r3, [pc, #216]	; (835f8 <xQueueGenericSend+0x1a4>)
   8351e:	4798      	blx	r3
				return pdPASS;
   83520:	2301      	movs	r3, #1
   83522:	e059      	b.n	835d8 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83524:	687b      	ldr	r3, [r7, #4]
   83526:	2b00      	cmp	r3, #0
   83528:	d103      	bne.n	83532 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8352a:	4b33      	ldr	r3, [pc, #204]	; (835f8 <xQueueGenericSend+0x1a4>)
   8352c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8352e:	2300      	movs	r3, #0
   83530:	e052      	b.n	835d8 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   83532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83534:	2b00      	cmp	r3, #0
   83536:	d106      	bne.n	83546 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83538:	f107 0314 	add.w	r3, r7, #20
   8353c:	4618      	mov	r0, r3
   8353e:	4b2f      	ldr	r3, [pc, #188]	; (835fc <xQueueGenericSend+0x1a8>)
   83540:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83542:	2301      	movs	r3, #1
   83544:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83546:	4b2c      	ldr	r3, [pc, #176]	; (835f8 <xQueueGenericSend+0x1a4>)
   83548:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8354a:	4b2d      	ldr	r3, [pc, #180]	; (83600 <xQueueGenericSend+0x1ac>)
   8354c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8354e:	4b26      	ldr	r3, [pc, #152]	; (835e8 <xQueueGenericSend+0x194>)
   83550:	4798      	blx	r3
   83552:	6a3b      	ldr	r3, [r7, #32]
   83554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83556:	f1b3 3fff 	cmp.w	r3, #4294967295
   8355a:	d102      	bne.n	83562 <xQueueGenericSend+0x10e>
   8355c:	6a3b      	ldr	r3, [r7, #32]
   8355e:	2200      	movs	r2, #0
   83560:	645a      	str	r2, [r3, #68]	; 0x44
   83562:	6a3b      	ldr	r3, [r7, #32]
   83564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83566:	f1b3 3fff 	cmp.w	r3, #4294967295
   8356a:	d102      	bne.n	83572 <xQueueGenericSend+0x11e>
   8356c:	6a3b      	ldr	r3, [r7, #32]
   8356e:	2200      	movs	r2, #0
   83570:	649a      	str	r2, [r3, #72]	; 0x48
   83572:	4b21      	ldr	r3, [pc, #132]	; (835f8 <xQueueGenericSend+0x1a4>)
   83574:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83576:	f107 0214 	add.w	r2, r7, #20
   8357a:	1d3b      	adds	r3, r7, #4
   8357c:	4610      	mov	r0, r2
   8357e:	4619      	mov	r1, r3
   83580:	4b20      	ldr	r3, [pc, #128]	; (83604 <xQueueGenericSend+0x1b0>)
   83582:	4798      	blx	r3
   83584:	4603      	mov	r3, r0
   83586:	2b00      	cmp	r3, #0
   83588:	d11e      	bne.n	835c8 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8358a:	6a38      	ldr	r0, [r7, #32]
   8358c:	4b1e      	ldr	r3, [pc, #120]	; (83608 <xQueueGenericSend+0x1b4>)
   8358e:	4798      	blx	r3
   83590:	4603      	mov	r3, r0
   83592:	2b00      	cmp	r3, #0
   83594:	d012      	beq.n	835bc <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   83596:	6a3b      	ldr	r3, [r7, #32]
   83598:	f103 0210 	add.w	r2, r3, #16
   8359c:	687b      	ldr	r3, [r7, #4]
   8359e:	4610      	mov	r0, r2
   835a0:	4619      	mov	r1, r3
   835a2:	4b1a      	ldr	r3, [pc, #104]	; (8360c <xQueueGenericSend+0x1b8>)
   835a4:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   835a6:	6a38      	ldr	r0, [r7, #32]
   835a8:	4b19      	ldr	r3, [pc, #100]	; (83610 <xQueueGenericSend+0x1bc>)
   835aa:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   835ac:	4b19      	ldr	r3, [pc, #100]	; (83614 <xQueueGenericSend+0x1c0>)
   835ae:	4798      	blx	r3
   835b0:	4603      	mov	r3, r0
   835b2:	2b00      	cmp	r3, #0
   835b4:	d10f      	bne.n	835d6 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   835b6:	4b0f      	ldr	r3, [pc, #60]	; (835f4 <xQueueGenericSend+0x1a0>)
   835b8:	4798      	blx	r3
   835ba:	e00c      	b.n	835d6 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   835bc:	6a38      	ldr	r0, [r7, #32]
   835be:	4b14      	ldr	r3, [pc, #80]	; (83610 <xQueueGenericSend+0x1bc>)
   835c0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   835c2:	4b14      	ldr	r3, [pc, #80]	; (83614 <xQueueGenericSend+0x1c0>)
   835c4:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   835c6:	e784      	b.n	834d2 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   835c8:	6a38      	ldr	r0, [r7, #32]
   835ca:	4b11      	ldr	r3, [pc, #68]	; (83610 <xQueueGenericSend+0x1bc>)
   835cc:	4798      	blx	r3
			( void ) xTaskResumeAll();
   835ce:	4b11      	ldr	r3, [pc, #68]	; (83614 <xQueueGenericSend+0x1c0>)
   835d0:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   835d2:	2300      	movs	r3, #0
   835d4:	e000      	b.n	835d8 <xQueueGenericSend+0x184>
		}
	}
   835d6:	e77c      	b.n	834d2 <xQueueGenericSend+0x7e>
}
   835d8:	4618      	mov	r0, r3
   835da:	3728      	adds	r7, #40	; 0x28
   835dc:	46bd      	mov	sp, r7
   835de:	bd80      	pop	{r7, pc}
   835e0:	00082e4d 	.word	0x00082e4d
   835e4:	00084899 	.word	0x00084899
   835e8:	00082dd1 	.word	0x00082dd1
   835ec:	00083911 	.word	0x00083911
   835f0:	000843c1 	.word	0x000843c1
   835f4:	00082db1 	.word	0x00082db1
   835f8:	00082e15 	.word	0x00082e15
   835fc:	00084481 	.word	0x00084481
   83600:	00083ebd 	.word	0x00083ebd
   83604:	000844b9 	.word	0x000844b9
   83608:	00083b21 	.word	0x00083b21
   8360c:	000842a1 	.word	0x000842a1
   83610:	00083a45 	.word	0x00083a45
   83614:	00083ed9 	.word	0x00083ed9

00083618 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83618:	b580      	push	{r7, lr}
   8361a:	b088      	sub	sp, #32
   8361c:	af00      	add	r7, sp, #0
   8361e:	60f8      	str	r0, [r7, #12]
   83620:	60b9      	str	r1, [r7, #8]
   83622:	607a      	str	r2, [r7, #4]
   83624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83626:	68fb      	ldr	r3, [r7, #12]
   83628:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   8362a:	69bb      	ldr	r3, [r7, #24]
   8362c:	2b00      	cmp	r3, #0
   8362e:	d102      	bne.n	83636 <xQueueGenericSendFromISR+0x1e>
   83630:	4b33      	ldr	r3, [pc, #204]	; (83700 <xQueueGenericSendFromISR+0xe8>)
   83632:	4798      	blx	r3
   83634:	e7fe      	b.n	83634 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83636:	68bb      	ldr	r3, [r7, #8]
   83638:	2b00      	cmp	r3, #0
   8363a:	d103      	bne.n	83644 <xQueueGenericSendFromISR+0x2c>
   8363c:	69bb      	ldr	r3, [r7, #24]
   8363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83640:	2b00      	cmp	r3, #0
   83642:	d101      	bne.n	83648 <xQueueGenericSendFromISR+0x30>
   83644:	2301      	movs	r3, #1
   83646:	e000      	b.n	8364a <xQueueGenericSendFromISR+0x32>
   83648:	2300      	movs	r3, #0
   8364a:	2b00      	cmp	r3, #0
   8364c:	d102      	bne.n	83654 <xQueueGenericSendFromISR+0x3c>
   8364e:	4b2c      	ldr	r3, [pc, #176]	; (83700 <xQueueGenericSendFromISR+0xe8>)
   83650:	4798      	blx	r3
   83652:	e7fe      	b.n	83652 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83654:	683b      	ldr	r3, [r7, #0]
   83656:	2b02      	cmp	r3, #2
   83658:	d103      	bne.n	83662 <xQueueGenericSendFromISR+0x4a>
   8365a:	69bb      	ldr	r3, [r7, #24]
   8365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8365e:	2b01      	cmp	r3, #1
   83660:	d101      	bne.n	83666 <xQueueGenericSendFromISR+0x4e>
   83662:	2301      	movs	r3, #1
   83664:	e000      	b.n	83668 <xQueueGenericSendFromISR+0x50>
   83666:	2300      	movs	r3, #0
   83668:	2b00      	cmp	r3, #0
   8366a:	d102      	bne.n	83672 <xQueueGenericSendFromISR+0x5a>
   8366c:	4b24      	ldr	r3, [pc, #144]	; (83700 <xQueueGenericSendFromISR+0xe8>)
   8366e:	4798      	blx	r3
   83670:	e7fe      	b.n	83670 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   83672:	4b24      	ldr	r3, [pc, #144]	; (83704 <xQueueGenericSendFromISR+0xec>)
   83674:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83676:	4b22      	ldr	r3, [pc, #136]	; (83700 <xQueueGenericSendFromISR+0xe8>)
   83678:	4798      	blx	r3
   8367a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   8367c:	69bb      	ldr	r3, [r7, #24]
   8367e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83680:	69bb      	ldr	r3, [r7, #24]
   83682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83684:	429a      	cmp	r2, r3
   83686:	d302      	bcc.n	8368e <xQueueGenericSendFromISR+0x76>
   83688:	683b      	ldr	r3, [r7, #0]
   8368a:	2b02      	cmp	r3, #2
   8368c:	d12d      	bne.n	836ea <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   8368e:	69b8      	ldr	r0, [r7, #24]
   83690:	68b9      	ldr	r1, [r7, #8]
   83692:	683a      	ldr	r2, [r7, #0]
   83694:	4b1c      	ldr	r3, [pc, #112]	; (83708 <xQueueGenericSendFromISR+0xf0>)
   83696:	4798      	blx	r3
   83698:	4603      	mov	r3, r0
   8369a:	2b00      	cmp	r3, #0
   8369c:	d005      	beq.n	836aa <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   8369e:	687b      	ldr	r3, [r7, #4]
   836a0:	2b00      	cmp	r3, #0
   836a2:	d002      	beq.n	836aa <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   836a4:	687b      	ldr	r3, [r7, #4]
   836a6:	2201      	movs	r2, #1
   836a8:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   836aa:	69bb      	ldr	r3, [r7, #24]
   836ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   836ae:	f1b3 3fff 	cmp.w	r3, #4294967295
   836b2:	d112      	bne.n	836da <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   836b4:	69bb      	ldr	r3, [r7, #24]
   836b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   836b8:	2b00      	cmp	r3, #0
   836ba:	d013      	beq.n	836e4 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   836bc:	69bb      	ldr	r3, [r7, #24]
   836be:	3324      	adds	r3, #36	; 0x24
   836c0:	4618      	mov	r0, r3
   836c2:	4b12      	ldr	r3, [pc, #72]	; (8370c <xQueueGenericSendFromISR+0xf4>)
   836c4:	4798      	blx	r3
   836c6:	4603      	mov	r3, r0
   836c8:	2b00      	cmp	r3, #0
   836ca:	d00b      	beq.n	836e4 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   836cc:	687b      	ldr	r3, [r7, #4]
   836ce:	2b00      	cmp	r3, #0
   836d0:	d008      	beq.n	836e4 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   836d2:	687b      	ldr	r3, [r7, #4]
   836d4:	2201      	movs	r2, #1
   836d6:	601a      	str	r2, [r3, #0]
   836d8:	e004      	b.n	836e4 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   836da:	69bb      	ldr	r3, [r7, #24]
   836dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   836de:	1c5a      	adds	r2, r3, #1
   836e0:	69bb      	ldr	r3, [r7, #24]
   836e2:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   836e4:	2301      	movs	r3, #1
   836e6:	61fb      	str	r3, [r7, #28]
   836e8:	e001      	b.n	836ee <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   836ea:	2300      	movs	r3, #0
   836ec:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   836ee:	6978      	ldr	r0, [r7, #20]
   836f0:	4b07      	ldr	r3, [pc, #28]	; (83710 <xQueueGenericSendFromISR+0xf8>)
   836f2:	4798      	blx	r3

	return xReturn;
   836f4:	69fb      	ldr	r3, [r7, #28]
}
   836f6:	4618      	mov	r0, r3
   836f8:	3720      	adds	r7, #32
   836fa:	46bd      	mov	sp, r7
   836fc:	bd80      	pop	{r7, pc}
   836fe:	bf00      	nop
   83700:	00082e4d 	.word	0x00082e4d
   83704:	00082f15 	.word	0x00082f15
   83708:	00083911 	.word	0x00083911
   8370c:	000843c1 	.word	0x000843c1
   83710:	00082e61 	.word	0x00082e61

00083714 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   83714:	b580      	push	{r7, lr}
   83716:	b08a      	sub	sp, #40	; 0x28
   83718:	af00      	add	r7, sp, #0
   8371a:	60f8      	str	r0, [r7, #12]
   8371c:	60b9      	str	r1, [r7, #8]
   8371e:	607a      	str	r2, [r7, #4]
   83720:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   83722:	2300      	movs	r3, #0
   83724:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83726:	68fb      	ldr	r3, [r7, #12]
   83728:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   8372a:	6a3b      	ldr	r3, [r7, #32]
   8372c:	2b00      	cmp	r3, #0
   8372e:	d102      	bne.n	83736 <xQueueGenericReceive+0x22>
   83730:	4b67      	ldr	r3, [pc, #412]	; (838d0 <xQueueGenericReceive+0x1bc>)
   83732:	4798      	blx	r3
   83734:	e7fe      	b.n	83734 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83736:	68bb      	ldr	r3, [r7, #8]
   83738:	2b00      	cmp	r3, #0
   8373a:	d103      	bne.n	83744 <xQueueGenericReceive+0x30>
   8373c:	6a3b      	ldr	r3, [r7, #32]
   8373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83740:	2b00      	cmp	r3, #0
   83742:	d101      	bne.n	83748 <xQueueGenericReceive+0x34>
   83744:	2301      	movs	r3, #1
   83746:	e000      	b.n	8374a <xQueueGenericReceive+0x36>
   83748:	2300      	movs	r3, #0
   8374a:	2b00      	cmp	r3, #0
   8374c:	d102      	bne.n	83754 <xQueueGenericReceive+0x40>
   8374e:	4b60      	ldr	r3, [pc, #384]	; (838d0 <xQueueGenericReceive+0x1bc>)
   83750:	4798      	blx	r3
   83752:	e7fe      	b.n	83752 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83754:	4b5f      	ldr	r3, [pc, #380]	; (838d4 <xQueueGenericReceive+0x1c0>)
   83756:	4798      	blx	r3
   83758:	4603      	mov	r3, r0
   8375a:	2b00      	cmp	r3, #0
   8375c:	d102      	bne.n	83764 <xQueueGenericReceive+0x50>
   8375e:	687b      	ldr	r3, [r7, #4]
   83760:	2b00      	cmp	r3, #0
   83762:	d101      	bne.n	83768 <xQueueGenericReceive+0x54>
   83764:	2301      	movs	r3, #1
   83766:	e000      	b.n	8376a <xQueueGenericReceive+0x56>
   83768:	2300      	movs	r3, #0
   8376a:	2b00      	cmp	r3, #0
   8376c:	d102      	bne.n	83774 <xQueueGenericReceive+0x60>
   8376e:	4b58      	ldr	r3, [pc, #352]	; (838d0 <xQueueGenericReceive+0x1bc>)
   83770:	4798      	blx	r3
   83772:	e7fe      	b.n	83772 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83774:	4b58      	ldr	r3, [pc, #352]	; (838d8 <xQueueGenericReceive+0x1c4>)
   83776:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83778:	6a3b      	ldr	r3, [r7, #32]
   8377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8377c:	2b00      	cmp	r3, #0
   8377e:	d03b      	beq.n	837f8 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   83780:	6a3b      	ldr	r3, [r7, #32]
   83782:	68db      	ldr	r3, [r3, #12]
   83784:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83786:	6a38      	ldr	r0, [r7, #32]
   83788:	68b9      	ldr	r1, [r7, #8]
   8378a:	4b54      	ldr	r3, [pc, #336]	; (838dc <xQueueGenericReceive+0x1c8>)
   8378c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8378e:	683b      	ldr	r3, [r7, #0]
   83790:	2b00      	cmp	r3, #0
   83792:	d11c      	bne.n	837ce <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83794:	6a3b      	ldr	r3, [r7, #32]
   83796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83798:	1e5a      	subs	r2, r3, #1
   8379a:	6a3b      	ldr	r3, [r7, #32]
   8379c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8379e:	6a3b      	ldr	r3, [r7, #32]
   837a0:	681b      	ldr	r3, [r3, #0]
   837a2:	2b00      	cmp	r3, #0
   837a4:	d104      	bne.n	837b0 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   837a6:	4b4e      	ldr	r3, [pc, #312]	; (838e0 <xQueueGenericReceive+0x1cc>)
   837a8:	4798      	blx	r3
   837aa:	4602      	mov	r2, r0
   837ac:	6a3b      	ldr	r3, [r7, #32]
   837ae:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   837b0:	6a3b      	ldr	r3, [r7, #32]
   837b2:	691b      	ldr	r3, [r3, #16]
   837b4:	2b00      	cmp	r3, #0
   837b6:	d01b      	beq.n	837f0 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   837b8:	6a3b      	ldr	r3, [r7, #32]
   837ba:	3310      	adds	r3, #16
   837bc:	4618      	mov	r0, r3
   837be:	4b49      	ldr	r3, [pc, #292]	; (838e4 <xQueueGenericReceive+0x1d0>)
   837c0:	4798      	blx	r3
   837c2:	4603      	mov	r3, r0
   837c4:	2b01      	cmp	r3, #1
   837c6:	d113      	bne.n	837f0 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   837c8:	4b47      	ldr	r3, [pc, #284]	; (838e8 <xQueueGenericReceive+0x1d4>)
   837ca:	4798      	blx	r3
   837cc:	e010      	b.n	837f0 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   837ce:	6a3b      	ldr	r3, [r7, #32]
   837d0:	69fa      	ldr	r2, [r7, #28]
   837d2:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   837d4:	6a3b      	ldr	r3, [r7, #32]
   837d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   837d8:	2b00      	cmp	r3, #0
   837da:	d009      	beq.n	837f0 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   837dc:	6a3b      	ldr	r3, [r7, #32]
   837de:	3324      	adds	r3, #36	; 0x24
   837e0:	4618      	mov	r0, r3
   837e2:	4b40      	ldr	r3, [pc, #256]	; (838e4 <xQueueGenericReceive+0x1d0>)
   837e4:	4798      	blx	r3
   837e6:	4603      	mov	r3, r0
   837e8:	2b00      	cmp	r3, #0
   837ea:	d001      	beq.n	837f0 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   837ec:	4b3e      	ldr	r3, [pc, #248]	; (838e8 <xQueueGenericReceive+0x1d4>)
   837ee:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   837f0:	4b3e      	ldr	r3, [pc, #248]	; (838ec <xQueueGenericReceive+0x1d8>)
   837f2:	4798      	blx	r3
				return pdPASS;
   837f4:	2301      	movs	r3, #1
   837f6:	e066      	b.n	838c6 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   837f8:	687b      	ldr	r3, [r7, #4]
   837fa:	2b00      	cmp	r3, #0
   837fc:	d103      	bne.n	83806 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   837fe:	4b3b      	ldr	r3, [pc, #236]	; (838ec <xQueueGenericReceive+0x1d8>)
   83800:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   83802:	2300      	movs	r3, #0
   83804:	e05f      	b.n	838c6 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83808:	2b00      	cmp	r3, #0
   8380a:	d106      	bne.n	8381a <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8380c:	f107 0314 	add.w	r3, r7, #20
   83810:	4618      	mov	r0, r3
   83812:	4b37      	ldr	r3, [pc, #220]	; (838f0 <xQueueGenericReceive+0x1dc>)
   83814:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83816:	2301      	movs	r3, #1
   83818:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   8381a:	4b34      	ldr	r3, [pc, #208]	; (838ec <xQueueGenericReceive+0x1d8>)
   8381c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8381e:	4b35      	ldr	r3, [pc, #212]	; (838f4 <xQueueGenericReceive+0x1e0>)
   83820:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83822:	4b2d      	ldr	r3, [pc, #180]	; (838d8 <xQueueGenericReceive+0x1c4>)
   83824:	4798      	blx	r3
   83826:	6a3b      	ldr	r3, [r7, #32]
   83828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8382a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8382e:	d102      	bne.n	83836 <xQueueGenericReceive+0x122>
   83830:	6a3b      	ldr	r3, [r7, #32]
   83832:	2200      	movs	r2, #0
   83834:	645a      	str	r2, [r3, #68]	; 0x44
   83836:	6a3b      	ldr	r3, [r7, #32]
   83838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8383a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8383e:	d102      	bne.n	83846 <xQueueGenericReceive+0x132>
   83840:	6a3b      	ldr	r3, [r7, #32]
   83842:	2200      	movs	r2, #0
   83844:	649a      	str	r2, [r3, #72]	; 0x48
   83846:	4b29      	ldr	r3, [pc, #164]	; (838ec <xQueueGenericReceive+0x1d8>)
   83848:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8384a:	f107 0214 	add.w	r2, r7, #20
   8384e:	1d3b      	adds	r3, r7, #4
   83850:	4610      	mov	r0, r2
   83852:	4619      	mov	r1, r3
   83854:	4b28      	ldr	r3, [pc, #160]	; (838f8 <xQueueGenericReceive+0x1e4>)
   83856:	4798      	blx	r3
   83858:	4603      	mov	r3, r0
   8385a:	2b00      	cmp	r3, #0
   8385c:	d12b      	bne.n	838b6 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8385e:	6a38      	ldr	r0, [r7, #32]
   83860:	4b26      	ldr	r3, [pc, #152]	; (838fc <xQueueGenericReceive+0x1e8>)
   83862:	4798      	blx	r3
   83864:	4603      	mov	r3, r0
   83866:	2b00      	cmp	r3, #0
   83868:	d01f      	beq.n	838aa <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8386a:	6a3b      	ldr	r3, [r7, #32]
   8386c:	681b      	ldr	r3, [r3, #0]
   8386e:	2b00      	cmp	r3, #0
   83870:	d108      	bne.n	83884 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   83872:	4b19      	ldr	r3, [pc, #100]	; (838d8 <xQueueGenericReceive+0x1c4>)
   83874:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83876:	6a3b      	ldr	r3, [r7, #32]
   83878:	685b      	ldr	r3, [r3, #4]
   8387a:	4618      	mov	r0, r3
   8387c:	4b20      	ldr	r3, [pc, #128]	; (83900 <xQueueGenericReceive+0x1ec>)
   8387e:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   83880:	4b1a      	ldr	r3, [pc, #104]	; (838ec <xQueueGenericReceive+0x1d8>)
   83882:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83884:	6a3b      	ldr	r3, [r7, #32]
   83886:	f103 0224 	add.w	r2, r3, #36	; 0x24
   8388a:	687b      	ldr	r3, [r7, #4]
   8388c:	4610      	mov	r0, r2
   8388e:	4619      	mov	r1, r3
   83890:	4b1c      	ldr	r3, [pc, #112]	; (83904 <xQueueGenericReceive+0x1f0>)
   83892:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83894:	6a38      	ldr	r0, [r7, #32]
   83896:	4b1c      	ldr	r3, [pc, #112]	; (83908 <xQueueGenericReceive+0x1f4>)
   83898:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8389a:	4b1c      	ldr	r3, [pc, #112]	; (8390c <xQueueGenericReceive+0x1f8>)
   8389c:	4798      	blx	r3
   8389e:	4603      	mov	r3, r0
   838a0:	2b00      	cmp	r3, #0
   838a2:	d10f      	bne.n	838c4 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   838a4:	4b10      	ldr	r3, [pc, #64]	; (838e8 <xQueueGenericReceive+0x1d4>)
   838a6:	4798      	blx	r3
   838a8:	e00c      	b.n	838c4 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   838aa:	6a38      	ldr	r0, [r7, #32]
   838ac:	4b16      	ldr	r3, [pc, #88]	; (83908 <xQueueGenericReceive+0x1f4>)
   838ae:	4798      	blx	r3
				( void ) xTaskResumeAll();
   838b0:	4b16      	ldr	r3, [pc, #88]	; (8390c <xQueueGenericReceive+0x1f8>)
   838b2:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   838b4:	e75e      	b.n	83774 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   838b6:	6a38      	ldr	r0, [r7, #32]
   838b8:	4b13      	ldr	r3, [pc, #76]	; (83908 <xQueueGenericReceive+0x1f4>)
   838ba:	4798      	blx	r3
			( void ) xTaskResumeAll();
   838bc:	4b13      	ldr	r3, [pc, #76]	; (8390c <xQueueGenericReceive+0x1f8>)
   838be:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   838c0:	2300      	movs	r3, #0
   838c2:	e000      	b.n	838c6 <xQueueGenericReceive+0x1b2>
		}
	}
   838c4:	e756      	b.n	83774 <xQueueGenericReceive+0x60>
}
   838c6:	4618      	mov	r0, r3
   838c8:	3728      	adds	r7, #40	; 0x28
   838ca:	46bd      	mov	sp, r7
   838cc:	bd80      	pop	{r7, pc}
   838ce:	bf00      	nop
   838d0:	00082e4d 	.word	0x00082e4d
   838d4:	00084899 	.word	0x00084899
   838d8:	00082dd1 	.word	0x00082dd1
   838dc:	000839f5 	.word	0x000839f5
   838e0:	00084aad 	.word	0x00084aad
   838e4:	000843c1 	.word	0x000843c1
   838e8:	00082db1 	.word	0x00082db1
   838ec:	00082e15 	.word	0x00082e15
   838f0:	00084481 	.word	0x00084481
   838f4:	00083ebd 	.word	0x00083ebd
   838f8:	000844b9 	.word	0x000844b9
   838fc:	00083aed 	.word	0x00083aed
   83900:	000848d5 	.word	0x000848d5
   83904:	000842a1 	.word	0x000842a1
   83908:	00083a45 	.word	0x00083a45
   8390c:	00083ed9 	.word	0x00083ed9

00083910 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   83910:	b580      	push	{r7, lr}
   83912:	b086      	sub	sp, #24
   83914:	af00      	add	r7, sp, #0
   83916:	60f8      	str	r0, [r7, #12]
   83918:	60b9      	str	r1, [r7, #8]
   8391a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   8391c:	2300      	movs	r3, #0
   8391e:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   83920:	68fb      	ldr	r3, [r7, #12]
   83922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83924:	2b00      	cmp	r3, #0
   83926:	d10d      	bne.n	83944 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83928:	68fb      	ldr	r3, [r7, #12]
   8392a:	681b      	ldr	r3, [r3, #0]
   8392c:	2b00      	cmp	r3, #0
   8392e:	d152      	bne.n	839d6 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   83930:	68fb      	ldr	r3, [r7, #12]
   83932:	685b      	ldr	r3, [r3, #4]
   83934:	4618      	mov	r0, r3
   83936:	4b2d      	ldr	r3, [pc, #180]	; (839ec <prvCopyDataToQueue+0xdc>)
   83938:	4798      	blx	r3
   8393a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   8393c:	68fb      	ldr	r3, [r7, #12]
   8393e:	2200      	movs	r2, #0
   83940:	605a      	str	r2, [r3, #4]
   83942:	e048      	b.n	839d6 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83944:	687b      	ldr	r3, [r7, #4]
   83946:	2b00      	cmp	r3, #0
   83948:	d11a      	bne.n	83980 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   8394a:	68fb      	ldr	r3, [r7, #12]
   8394c:	689a      	ldr	r2, [r3, #8]
   8394e:	68fb      	ldr	r3, [r7, #12]
   83950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83952:	4610      	mov	r0, r2
   83954:	68b9      	ldr	r1, [r7, #8]
   83956:	461a      	mov	r2, r3
   83958:	4b25      	ldr	r3, [pc, #148]	; (839f0 <prvCopyDataToQueue+0xe0>)
   8395a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8395c:	68fb      	ldr	r3, [r7, #12]
   8395e:	689a      	ldr	r2, [r3, #8]
   83960:	68fb      	ldr	r3, [r7, #12]
   83962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83964:	441a      	add	r2, r3
   83966:	68fb      	ldr	r3, [r7, #12]
   83968:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8396a:	68fb      	ldr	r3, [r7, #12]
   8396c:	689a      	ldr	r2, [r3, #8]
   8396e:	68fb      	ldr	r3, [r7, #12]
   83970:	685b      	ldr	r3, [r3, #4]
   83972:	429a      	cmp	r2, r3
   83974:	d32f      	bcc.n	839d6 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83976:	68fb      	ldr	r3, [r7, #12]
   83978:	681a      	ldr	r2, [r3, #0]
   8397a:	68fb      	ldr	r3, [r7, #12]
   8397c:	609a      	str	r2, [r3, #8]
   8397e:	e02a      	b.n	839d6 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83980:	68fb      	ldr	r3, [r7, #12]
   83982:	68da      	ldr	r2, [r3, #12]
   83984:	68fb      	ldr	r3, [r7, #12]
   83986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83988:	4610      	mov	r0, r2
   8398a:	68b9      	ldr	r1, [r7, #8]
   8398c:	461a      	mov	r2, r3
   8398e:	4b18      	ldr	r3, [pc, #96]	; (839f0 <prvCopyDataToQueue+0xe0>)
   83990:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83992:	68fb      	ldr	r3, [r7, #12]
   83994:	68da      	ldr	r2, [r3, #12]
   83996:	68fb      	ldr	r3, [r7, #12]
   83998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8399a:	425b      	negs	r3, r3
   8399c:	441a      	add	r2, r3
   8399e:	68fb      	ldr	r3, [r7, #12]
   839a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   839a2:	68fb      	ldr	r3, [r7, #12]
   839a4:	68da      	ldr	r2, [r3, #12]
   839a6:	68fb      	ldr	r3, [r7, #12]
   839a8:	681b      	ldr	r3, [r3, #0]
   839aa:	429a      	cmp	r2, r3
   839ac:	d207      	bcs.n	839be <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   839ae:	68fb      	ldr	r3, [r7, #12]
   839b0:	685a      	ldr	r2, [r3, #4]
   839b2:	68fb      	ldr	r3, [r7, #12]
   839b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839b6:	425b      	negs	r3, r3
   839b8:	441a      	add	r2, r3
   839ba:	68fb      	ldr	r3, [r7, #12]
   839bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   839be:	687b      	ldr	r3, [r7, #4]
   839c0:	2b02      	cmp	r3, #2
   839c2:	d108      	bne.n	839d6 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   839c4:	68fb      	ldr	r3, [r7, #12]
   839c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   839c8:	2b00      	cmp	r3, #0
   839ca:	d004      	beq.n	839d6 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   839cc:	68fb      	ldr	r3, [r7, #12]
   839ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   839d0:	1e5a      	subs	r2, r3, #1
   839d2:	68fb      	ldr	r3, [r7, #12]
   839d4:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   839d6:	68fb      	ldr	r3, [r7, #12]
   839d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   839da:	1c5a      	adds	r2, r3, #1
   839dc:	68fb      	ldr	r3, [r7, #12]
   839de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   839e0:	697b      	ldr	r3, [r7, #20]
}
   839e2:	4618      	mov	r0, r3
   839e4:	3718      	adds	r7, #24
   839e6:	46bd      	mov	sp, r7
   839e8:	bd80      	pop	{r7, pc}
   839ea:	bf00      	nop
   839ec:	000849c9 	.word	0x000849c9
   839f0:	000864e5 	.word	0x000864e5

000839f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   839f4:	b580      	push	{r7, lr}
   839f6:	b082      	sub	sp, #8
   839f8:	af00      	add	r7, sp, #0
   839fa:	6078      	str	r0, [r7, #4]
   839fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   839fe:	687b      	ldr	r3, [r7, #4]
   83a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a02:	2b00      	cmp	r3, #0
   83a04:	d019      	beq.n	83a3a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83a06:	687b      	ldr	r3, [r7, #4]
   83a08:	68da      	ldr	r2, [r3, #12]
   83a0a:	687b      	ldr	r3, [r7, #4]
   83a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a0e:	441a      	add	r2, r3
   83a10:	687b      	ldr	r3, [r7, #4]
   83a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83a14:	687b      	ldr	r3, [r7, #4]
   83a16:	68da      	ldr	r2, [r3, #12]
   83a18:	687b      	ldr	r3, [r7, #4]
   83a1a:	685b      	ldr	r3, [r3, #4]
   83a1c:	429a      	cmp	r2, r3
   83a1e:	d303      	bcc.n	83a28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83a20:	687b      	ldr	r3, [r7, #4]
   83a22:	681a      	ldr	r2, [r3, #0]
   83a24:	687b      	ldr	r3, [r7, #4]
   83a26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83a28:	687b      	ldr	r3, [r7, #4]
   83a2a:	68da      	ldr	r2, [r3, #12]
   83a2c:	687b      	ldr	r3, [r7, #4]
   83a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a30:	6838      	ldr	r0, [r7, #0]
   83a32:	4611      	mov	r1, r2
   83a34:	461a      	mov	r2, r3
   83a36:	4b02      	ldr	r3, [pc, #8]	; (83a40 <prvCopyDataFromQueue+0x4c>)
   83a38:	4798      	blx	r3
	}
}
   83a3a:	3708      	adds	r7, #8
   83a3c:	46bd      	mov	sp, r7
   83a3e:	bd80      	pop	{r7, pc}
   83a40:	000864e5 	.word	0x000864e5

00083a44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83a44:	b580      	push	{r7, lr}
   83a46:	b082      	sub	sp, #8
   83a48:	af00      	add	r7, sp, #0
   83a4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83a4c:	4b23      	ldr	r3, [pc, #140]	; (83adc <prvUnlockQueue+0x98>)
   83a4e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83a50:	e014      	b.n	83a7c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83a52:	687b      	ldr	r3, [r7, #4]
   83a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83a56:	2b00      	cmp	r3, #0
   83a58:	d00a      	beq.n	83a70 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83a5a:	687b      	ldr	r3, [r7, #4]
   83a5c:	3324      	adds	r3, #36	; 0x24
   83a5e:	4618      	mov	r0, r3
   83a60:	4b1f      	ldr	r3, [pc, #124]	; (83ae0 <prvUnlockQueue+0x9c>)
   83a62:	4798      	blx	r3
   83a64:	4603      	mov	r3, r0
   83a66:	2b00      	cmp	r3, #0
   83a68:	d003      	beq.n	83a72 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83a6a:	4b1e      	ldr	r3, [pc, #120]	; (83ae4 <prvUnlockQueue+0xa0>)
   83a6c:	4798      	blx	r3
   83a6e:	e000      	b.n	83a72 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83a70:	e008      	b.n	83a84 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83a72:	687b      	ldr	r3, [r7, #4]
   83a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a76:	1e5a      	subs	r2, r3, #1
   83a78:	687b      	ldr	r3, [r7, #4]
   83a7a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83a7c:	687b      	ldr	r3, [r7, #4]
   83a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a80:	2b00      	cmp	r3, #0
   83a82:	dce6      	bgt.n	83a52 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83a84:	687b      	ldr	r3, [r7, #4]
   83a86:	f04f 32ff 	mov.w	r2, #4294967295
   83a8a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83a8c:	4b16      	ldr	r3, [pc, #88]	; (83ae8 <prvUnlockQueue+0xa4>)
   83a8e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83a90:	4b12      	ldr	r3, [pc, #72]	; (83adc <prvUnlockQueue+0x98>)
   83a92:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83a94:	e014      	b.n	83ac0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83a96:	687b      	ldr	r3, [r7, #4]
   83a98:	691b      	ldr	r3, [r3, #16]
   83a9a:	2b00      	cmp	r3, #0
   83a9c:	d00f      	beq.n	83abe <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83a9e:	687b      	ldr	r3, [r7, #4]
   83aa0:	3310      	adds	r3, #16
   83aa2:	4618      	mov	r0, r3
   83aa4:	4b0e      	ldr	r3, [pc, #56]	; (83ae0 <prvUnlockQueue+0x9c>)
   83aa6:	4798      	blx	r3
   83aa8:	4603      	mov	r3, r0
   83aaa:	2b00      	cmp	r3, #0
   83aac:	d001      	beq.n	83ab2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   83aae:	4b0d      	ldr	r3, [pc, #52]	; (83ae4 <prvUnlockQueue+0xa0>)
   83ab0:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83ab2:	687b      	ldr	r3, [r7, #4]
   83ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83ab6:	1e5a      	subs	r2, r3, #1
   83ab8:	687b      	ldr	r3, [r7, #4]
   83aba:	645a      	str	r2, [r3, #68]	; 0x44
   83abc:	e000      	b.n	83ac0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   83abe:	e003      	b.n	83ac8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83ac0:	687b      	ldr	r3, [r7, #4]
   83ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83ac4:	2b00      	cmp	r3, #0
   83ac6:	dce6      	bgt.n	83a96 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83ac8:	687b      	ldr	r3, [r7, #4]
   83aca:	f04f 32ff 	mov.w	r2, #4294967295
   83ace:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83ad0:	4b05      	ldr	r3, [pc, #20]	; (83ae8 <prvUnlockQueue+0xa4>)
   83ad2:	4798      	blx	r3
}
   83ad4:	3708      	adds	r7, #8
   83ad6:	46bd      	mov	sp, r7
   83ad8:	bd80      	pop	{r7, pc}
   83ada:	bf00      	nop
   83adc:	00082dd1 	.word	0x00082dd1
   83ae0:	000843c1 	.word	0x000843c1
   83ae4:	00084569 	.word	0x00084569
   83ae8:	00082e15 	.word	0x00082e15

00083aec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   83aec:	b580      	push	{r7, lr}
   83aee:	b084      	sub	sp, #16
   83af0:	af00      	add	r7, sp, #0
   83af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83af4:	4b08      	ldr	r3, [pc, #32]	; (83b18 <prvIsQueueEmpty+0x2c>)
   83af6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83af8:	687b      	ldr	r3, [r7, #4]
   83afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83afc:	2b00      	cmp	r3, #0
   83afe:	d102      	bne.n	83b06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   83b00:	2301      	movs	r3, #1
   83b02:	60fb      	str	r3, [r7, #12]
   83b04:	e001      	b.n	83b0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   83b06:	2300      	movs	r3, #0
   83b08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83b0a:	4b04      	ldr	r3, [pc, #16]	; (83b1c <prvIsQueueEmpty+0x30>)
   83b0c:	4798      	blx	r3

	return xReturn;
   83b0e:	68fb      	ldr	r3, [r7, #12]
}
   83b10:	4618      	mov	r0, r3
   83b12:	3710      	adds	r7, #16
   83b14:	46bd      	mov	sp, r7
   83b16:	bd80      	pop	{r7, pc}
   83b18:	00082dd1 	.word	0x00082dd1
   83b1c:	00082e15 	.word	0x00082e15

00083b20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   83b20:	b580      	push	{r7, lr}
   83b22:	b084      	sub	sp, #16
   83b24:	af00      	add	r7, sp, #0
   83b26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83b28:	4b09      	ldr	r3, [pc, #36]	; (83b50 <prvIsQueueFull+0x30>)
   83b2a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   83b2c:	687b      	ldr	r3, [r7, #4]
   83b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83b30:	687b      	ldr	r3, [r7, #4]
   83b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83b34:	429a      	cmp	r2, r3
   83b36:	d102      	bne.n	83b3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   83b38:	2301      	movs	r3, #1
   83b3a:	60fb      	str	r3, [r7, #12]
   83b3c:	e001      	b.n	83b42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   83b3e:	2300      	movs	r3, #0
   83b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83b42:	4b04      	ldr	r3, [pc, #16]	; (83b54 <prvIsQueueFull+0x34>)
   83b44:	4798      	blx	r3

	return xReturn;
   83b46:	68fb      	ldr	r3, [r7, #12]
}
   83b48:	4618      	mov	r0, r3
   83b4a:	3710      	adds	r7, #16
   83b4c:	46bd      	mov	sp, r7
   83b4e:	bd80      	pop	{r7, pc}
   83b50:	00082dd1 	.word	0x00082dd1
   83b54:	00082e15 	.word	0x00082e15

00083b58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   83b58:	b580      	push	{r7, lr}
   83b5a:	b084      	sub	sp, #16
   83b5c:	af00      	add	r7, sp, #0
   83b5e:	6078      	str	r0, [r7, #4]
   83b60:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83b62:	687b      	ldr	r3, [r7, #4]
   83b64:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   83b66:	4b12      	ldr	r3, [pc, #72]	; (83bb0 <vQueueWaitForMessageRestricted+0x58>)
   83b68:	4798      	blx	r3
   83b6a:	68fb      	ldr	r3, [r7, #12]
   83b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b72:	d102      	bne.n	83b7a <vQueueWaitForMessageRestricted+0x22>
   83b74:	68fb      	ldr	r3, [r7, #12]
   83b76:	2200      	movs	r2, #0
   83b78:	645a      	str	r2, [r3, #68]	; 0x44
   83b7a:	68fb      	ldr	r3, [r7, #12]
   83b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b82:	d102      	bne.n	83b8a <vQueueWaitForMessageRestricted+0x32>
   83b84:	68fb      	ldr	r3, [r7, #12]
   83b86:	2200      	movs	r2, #0
   83b88:	649a      	str	r2, [r3, #72]	; 0x48
   83b8a:	4b0a      	ldr	r3, [pc, #40]	; (83bb4 <vQueueWaitForMessageRestricted+0x5c>)
   83b8c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   83b8e:	68fb      	ldr	r3, [r7, #12]
   83b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83b92:	2b00      	cmp	r3, #0
   83b94:	d105      	bne.n	83ba2 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83b96:	68fb      	ldr	r3, [r7, #12]
   83b98:	3324      	adds	r3, #36	; 0x24
   83b9a:	4618      	mov	r0, r3
   83b9c:	6839      	ldr	r1, [r7, #0]
   83b9e:	4b06      	ldr	r3, [pc, #24]	; (83bb8 <vQueueWaitForMessageRestricted+0x60>)
   83ba0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   83ba2:	68f8      	ldr	r0, [r7, #12]
   83ba4:	4b05      	ldr	r3, [pc, #20]	; (83bbc <vQueueWaitForMessageRestricted+0x64>)
   83ba6:	4798      	blx	r3
	}
   83ba8:	3710      	adds	r7, #16
   83baa:	46bd      	mov	sp, r7
   83bac:	bd80      	pop	{r7, pc}
   83bae:	bf00      	nop
   83bb0:	00082dd1 	.word	0x00082dd1
   83bb4:	00082e15 	.word	0x00082e15
   83bb8:	00084341 	.word	0x00084341
   83bbc:	00083a45 	.word	0x00083a45

00083bc0 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83bc0:	b590      	push	{r4, r7, lr}
   83bc2:	b08b      	sub	sp, #44	; 0x2c
   83bc4:	af02      	add	r7, sp, #8
   83bc6:	60f8      	str	r0, [r7, #12]
   83bc8:	60b9      	str	r1, [r7, #8]
   83bca:	603b      	str	r3, [r7, #0]
   83bcc:	4613      	mov	r3, r2
   83bce:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   83bd0:	68fb      	ldr	r3, [r7, #12]
   83bd2:	2b00      	cmp	r3, #0
   83bd4:	d102      	bne.n	83bdc <xTaskGenericCreate+0x1c>
   83bd6:	4b4b      	ldr	r3, [pc, #300]	; (83d04 <xTaskGenericCreate+0x144>)
   83bd8:	4798      	blx	r3
   83bda:	e7fe      	b.n	83bda <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   83bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83bde:	2b04      	cmp	r3, #4
   83be0:	d902      	bls.n	83be8 <xTaskGenericCreate+0x28>
   83be2:	4b48      	ldr	r3, [pc, #288]	; (83d04 <xTaskGenericCreate+0x144>)
   83be4:	4798      	blx	r3
   83be6:	e7fe      	b.n	83be6 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   83be8:	88fb      	ldrh	r3, [r7, #6]
   83bea:	4618      	mov	r0, r3
   83bec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   83bee:	4b46      	ldr	r3, [pc, #280]	; (83d08 <xTaskGenericCreate+0x148>)
   83bf0:	4798      	blx	r3
   83bf2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   83bf4:	69bb      	ldr	r3, [r7, #24]
   83bf6:	2b00      	cmp	r3, #0
   83bf8:	d06d      	beq.n	83cd6 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   83bfa:	69bb      	ldr	r3, [r7, #24]
   83bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83bfe:	88fb      	ldrh	r3, [r7, #6]
   83c00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   83c04:	3b01      	subs	r3, #1
   83c06:	009b      	lsls	r3, r3, #2
   83c08:	4413      	add	r3, r2
   83c0a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   83c0c:	697b      	ldr	r3, [r7, #20]
   83c0e:	f023 0307 	bic.w	r3, r3, #7
   83c12:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   83c14:	697b      	ldr	r3, [r7, #20]
   83c16:	f003 0307 	and.w	r3, r3, #7
   83c1a:	2b00      	cmp	r3, #0
   83c1c:	d002      	beq.n	83c24 <xTaskGenericCreate+0x64>
   83c1e:	4b39      	ldr	r3, [pc, #228]	; (83d04 <xTaskGenericCreate+0x144>)
   83c20:	4798      	blx	r3
   83c22:	e7fe      	b.n	83c22 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   83c24:	88fb      	ldrh	r3, [r7, #6]
   83c26:	9300      	str	r3, [sp, #0]
   83c28:	69b8      	ldr	r0, [r7, #24]
   83c2a:	68b9      	ldr	r1, [r7, #8]
   83c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83c30:	4c36      	ldr	r4, [pc, #216]	; (83d0c <xTaskGenericCreate+0x14c>)
   83c32:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   83c34:	6978      	ldr	r0, [r7, #20]
   83c36:	68f9      	ldr	r1, [r7, #12]
   83c38:	683a      	ldr	r2, [r7, #0]
   83c3a:	4b35      	ldr	r3, [pc, #212]	; (83d10 <xTaskGenericCreate+0x150>)
   83c3c:	4798      	blx	r3
   83c3e:	4602      	mov	r2, r0
   83c40:	69bb      	ldr	r3, [r7, #24]
   83c42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   83c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83c46:	2b00      	cmp	r3, #0
   83c48:	d002      	beq.n	83c50 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   83c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83c4c:	69ba      	ldr	r2, [r7, #24]
   83c4e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   83c50:	4b30      	ldr	r3, [pc, #192]	; (83d14 <xTaskGenericCreate+0x154>)
   83c52:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   83c54:	4b30      	ldr	r3, [pc, #192]	; (83d18 <xTaskGenericCreate+0x158>)
   83c56:	681b      	ldr	r3, [r3, #0]
   83c58:	1c5a      	adds	r2, r3, #1
   83c5a:	4b2f      	ldr	r3, [pc, #188]	; (83d18 <xTaskGenericCreate+0x158>)
   83c5c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   83c5e:	4b2f      	ldr	r3, [pc, #188]	; (83d1c <xTaskGenericCreate+0x15c>)
   83c60:	681b      	ldr	r3, [r3, #0]
   83c62:	2b00      	cmp	r3, #0
   83c64:	d109      	bne.n	83c7a <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   83c66:	4b2d      	ldr	r3, [pc, #180]	; (83d1c <xTaskGenericCreate+0x15c>)
   83c68:	69ba      	ldr	r2, [r7, #24]
   83c6a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   83c6c:	4b2a      	ldr	r3, [pc, #168]	; (83d18 <xTaskGenericCreate+0x158>)
   83c6e:	681b      	ldr	r3, [r3, #0]
   83c70:	2b01      	cmp	r3, #1
   83c72:	d10f      	bne.n	83c94 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83c74:	4b2a      	ldr	r3, [pc, #168]	; (83d20 <xTaskGenericCreate+0x160>)
   83c76:	4798      	blx	r3
   83c78:	e00c      	b.n	83c94 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   83c7a:	4b2a      	ldr	r3, [pc, #168]	; (83d24 <xTaskGenericCreate+0x164>)
   83c7c:	681b      	ldr	r3, [r3, #0]
   83c7e:	2b00      	cmp	r3, #0
   83c80:	d108      	bne.n	83c94 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   83c82:	4b26      	ldr	r3, [pc, #152]	; (83d1c <xTaskGenericCreate+0x15c>)
   83c84:	681b      	ldr	r3, [r3, #0]
   83c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83c8a:	429a      	cmp	r2, r3
   83c8c:	d802      	bhi.n	83c94 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   83c8e:	4b23      	ldr	r3, [pc, #140]	; (83d1c <xTaskGenericCreate+0x15c>)
   83c90:	69ba      	ldr	r2, [r7, #24]
   83c92:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83c94:	4b24      	ldr	r3, [pc, #144]	; (83d28 <xTaskGenericCreate+0x168>)
   83c96:	681b      	ldr	r3, [r3, #0]
   83c98:	1c5a      	adds	r2, r3, #1
   83c9a:	4b23      	ldr	r3, [pc, #140]	; (83d28 <xTaskGenericCreate+0x168>)
   83c9c:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   83c9e:	69bb      	ldr	r3, [r7, #24]
   83ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83ca2:	2201      	movs	r2, #1
   83ca4:	409a      	lsls	r2, r3
   83ca6:	4b21      	ldr	r3, [pc, #132]	; (83d2c <xTaskGenericCreate+0x16c>)
   83ca8:	681b      	ldr	r3, [r3, #0]
   83caa:	431a      	orrs	r2, r3
   83cac:	4b1f      	ldr	r3, [pc, #124]	; (83d2c <xTaskGenericCreate+0x16c>)
   83cae:	601a      	str	r2, [r3, #0]
   83cb0:	69bb      	ldr	r3, [r7, #24]
   83cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83cb4:	4613      	mov	r3, r2
   83cb6:	009b      	lsls	r3, r3, #2
   83cb8:	4413      	add	r3, r2
   83cba:	009b      	lsls	r3, r3, #2
   83cbc:	4a1c      	ldr	r2, [pc, #112]	; (83d30 <xTaskGenericCreate+0x170>)
   83cbe:	441a      	add	r2, r3
   83cc0:	69bb      	ldr	r3, [r7, #24]
   83cc2:	3304      	adds	r3, #4
   83cc4:	4610      	mov	r0, r2
   83cc6:	4619      	mov	r1, r3
   83cc8:	4b1a      	ldr	r3, [pc, #104]	; (83d34 <xTaskGenericCreate+0x174>)
   83cca:	4798      	blx	r3

			xReturn = pdPASS;
   83ccc:	2301      	movs	r3, #1
   83cce:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   83cd0:	4b19      	ldr	r3, [pc, #100]	; (83d38 <xTaskGenericCreate+0x178>)
   83cd2:	4798      	blx	r3
   83cd4:	e002      	b.n	83cdc <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   83cd6:	f04f 33ff 	mov.w	r3, #4294967295
   83cda:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   83cdc:	69fb      	ldr	r3, [r7, #28]
   83cde:	2b01      	cmp	r3, #1
   83ce0:	d10b      	bne.n	83cfa <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   83ce2:	4b10      	ldr	r3, [pc, #64]	; (83d24 <xTaskGenericCreate+0x164>)
   83ce4:	681b      	ldr	r3, [r3, #0]
   83ce6:	2b00      	cmp	r3, #0
   83ce8:	d007      	beq.n	83cfa <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   83cea:	4b0c      	ldr	r3, [pc, #48]	; (83d1c <xTaskGenericCreate+0x15c>)
   83cec:	681b      	ldr	r3, [r3, #0]
   83cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83cf2:	429a      	cmp	r2, r3
   83cf4:	d201      	bcs.n	83cfa <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   83cf6:	4b11      	ldr	r3, [pc, #68]	; (83d3c <xTaskGenericCreate+0x17c>)
   83cf8:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   83cfa:	69fb      	ldr	r3, [r7, #28]
}
   83cfc:	4618      	mov	r0, r3
   83cfe:	3724      	adds	r7, #36	; 0x24
   83d00:	46bd      	mov	sp, r7
   83d02:	bd90      	pop	{r4, r7, pc}
   83d04:	00082e4d 	.word	0x00082e4d
   83d08:	000847bd 	.word	0x000847bd
   83d0c:	000845a9 	.word	0x000845a9
   83d10:	00082c29 	.word	0x00082c29
   83d14:	00082dd1 	.word	0x00082dd1
   83d18:	2007a648 	.word	0x2007a648
   83d1c:	2007a570 	.word	0x2007a570
   83d20:	00084641 	.word	0x00084641
   83d24:	2007a654 	.word	0x2007a654
   83d28:	2007a664 	.word	0x2007a664
   83d2c:	2007a650 	.word	0x2007a650
   83d30:	2007a574 	.word	0x2007a574
   83d34:	00082b1d 	.word	0x00082b1d
   83d38:	00082e15 	.word	0x00082e15
   83d3c:	00082db1 	.word	0x00082db1

00083d40 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   83d40:	b580      	push	{r7, lr}
   83d42:	b086      	sub	sp, #24
   83d44:	af00      	add	r7, sp, #0
   83d46:	6078      	str	r0, [r7, #4]
   83d48:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   83d4a:	2300      	movs	r3, #0
   83d4c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   83d4e:	687b      	ldr	r3, [r7, #4]
   83d50:	2b00      	cmp	r3, #0
   83d52:	d102      	bne.n	83d5a <vTaskDelayUntil+0x1a>
   83d54:	4b2f      	ldr	r3, [pc, #188]	; (83e14 <vTaskDelayUntil+0xd4>)
   83d56:	4798      	blx	r3
   83d58:	e7fe      	b.n	83d58 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   83d5a:	683b      	ldr	r3, [r7, #0]
   83d5c:	2b00      	cmp	r3, #0
   83d5e:	d102      	bne.n	83d66 <vTaskDelayUntil+0x26>
   83d60:	4b2c      	ldr	r3, [pc, #176]	; (83e14 <vTaskDelayUntil+0xd4>)
   83d62:	4798      	blx	r3
   83d64:	e7fe      	b.n	83d64 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   83d66:	4b2c      	ldr	r3, [pc, #176]	; (83e18 <vTaskDelayUntil+0xd8>)
   83d68:	681b      	ldr	r3, [r3, #0]
   83d6a:	2b00      	cmp	r3, #0
   83d6c:	d002      	beq.n	83d74 <vTaskDelayUntil+0x34>
   83d6e:	4b29      	ldr	r3, [pc, #164]	; (83e14 <vTaskDelayUntil+0xd4>)
   83d70:	4798      	blx	r3
   83d72:	e7fe      	b.n	83d72 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   83d74:	4b29      	ldr	r3, [pc, #164]	; (83e1c <vTaskDelayUntil+0xdc>)
   83d76:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   83d78:	4b29      	ldr	r3, [pc, #164]	; (83e20 <vTaskDelayUntil+0xe0>)
   83d7a:	681b      	ldr	r3, [r3, #0]
   83d7c:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   83d7e:	687b      	ldr	r3, [r7, #4]
   83d80:	681a      	ldr	r2, [r3, #0]
   83d82:	683b      	ldr	r3, [r7, #0]
   83d84:	4413      	add	r3, r2
   83d86:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   83d88:	687b      	ldr	r3, [r7, #4]
   83d8a:	681a      	ldr	r2, [r3, #0]
   83d8c:	693b      	ldr	r3, [r7, #16]
   83d8e:	429a      	cmp	r2, r3
   83d90:	d90b      	bls.n	83daa <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   83d92:	687b      	ldr	r3, [r7, #4]
   83d94:	681a      	ldr	r2, [r3, #0]
   83d96:	68fb      	ldr	r3, [r7, #12]
   83d98:	429a      	cmp	r2, r3
   83d9a:	d911      	bls.n	83dc0 <vTaskDelayUntil+0x80>
   83d9c:	68fa      	ldr	r2, [r7, #12]
   83d9e:	693b      	ldr	r3, [r7, #16]
   83da0:	429a      	cmp	r2, r3
   83da2:	d90d      	bls.n	83dc0 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83da4:	2301      	movs	r3, #1
   83da6:	617b      	str	r3, [r7, #20]
   83da8:	e00a      	b.n	83dc0 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   83daa:	687b      	ldr	r3, [r7, #4]
   83dac:	681a      	ldr	r2, [r3, #0]
   83dae:	68fb      	ldr	r3, [r7, #12]
   83db0:	429a      	cmp	r2, r3
   83db2:	d803      	bhi.n	83dbc <vTaskDelayUntil+0x7c>
   83db4:	68fa      	ldr	r2, [r7, #12]
   83db6:	693b      	ldr	r3, [r7, #16]
   83db8:	429a      	cmp	r2, r3
   83dba:	d901      	bls.n	83dc0 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83dbc:	2301      	movs	r3, #1
   83dbe:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   83dc0:	687b      	ldr	r3, [r7, #4]
   83dc2:	68fa      	ldr	r2, [r7, #12]
   83dc4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   83dc6:	697b      	ldr	r3, [r7, #20]
   83dc8:	2b00      	cmp	r3, #0
   83dca:	d017      	beq.n	83dfc <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83dcc:	4b15      	ldr	r3, [pc, #84]	; (83e24 <vTaskDelayUntil+0xe4>)
   83dce:	681b      	ldr	r3, [r3, #0]
   83dd0:	3304      	adds	r3, #4
   83dd2:	4618      	mov	r0, r3
   83dd4:	4b14      	ldr	r3, [pc, #80]	; (83e28 <vTaskDelayUntil+0xe8>)
   83dd6:	4798      	blx	r3
   83dd8:	4603      	mov	r3, r0
   83dda:	2b00      	cmp	r3, #0
   83ddc:	d10b      	bne.n	83df6 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83dde:	4b11      	ldr	r3, [pc, #68]	; (83e24 <vTaskDelayUntil+0xe4>)
   83de0:	681b      	ldr	r3, [r3, #0]
   83de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83de4:	2201      	movs	r2, #1
   83de6:	fa02 f303 	lsl.w	r3, r2, r3
   83dea:	43da      	mvns	r2, r3
   83dec:	4b0f      	ldr	r3, [pc, #60]	; (83e2c <vTaskDelayUntil+0xec>)
   83dee:	681b      	ldr	r3, [r3, #0]
   83df0:	401a      	ands	r2, r3
   83df2:	4b0e      	ldr	r3, [pc, #56]	; (83e2c <vTaskDelayUntil+0xec>)
   83df4:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   83df6:	68f8      	ldr	r0, [r7, #12]
   83df8:	4b0d      	ldr	r3, [pc, #52]	; (83e30 <vTaskDelayUntil+0xf0>)
   83dfa:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   83dfc:	4b0d      	ldr	r3, [pc, #52]	; (83e34 <vTaskDelayUntil+0xf4>)
   83dfe:	4798      	blx	r3
   83e00:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   83e02:	68bb      	ldr	r3, [r7, #8]
   83e04:	2b00      	cmp	r3, #0
   83e06:	d101      	bne.n	83e0c <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   83e08:	4b0b      	ldr	r3, [pc, #44]	; (83e38 <vTaskDelayUntil+0xf8>)
   83e0a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   83e0c:	3718      	adds	r7, #24
   83e0e:	46bd      	mov	sp, r7
   83e10:	bd80      	pop	{r7, pc}
   83e12:	bf00      	nop
   83e14:	00082e4d 	.word	0x00082e4d
   83e18:	2007a668 	.word	0x2007a668
   83e1c:	00083ebd 	.word	0x00083ebd
   83e20:	2007a64c 	.word	0x2007a64c
   83e24:	2007a570 	.word	0x2007a570
   83e28:	00082bd5 	.word	0x00082bd5
   83e2c:	2007a650 	.word	0x2007a650
   83e30:	0008474d 	.word	0x0008474d
   83e34:	00083ed9 	.word	0x00083ed9
   83e38:	00082db1 	.word	0x00082db1

00083e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   83e3c:	b590      	push	{r4, r7, lr}
   83e3e:	b087      	sub	sp, #28
   83e40:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   83e42:	2300      	movs	r3, #0
   83e44:	9300      	str	r3, [sp, #0]
   83e46:	2300      	movs	r3, #0
   83e48:	9301      	str	r3, [sp, #4]
   83e4a:	2300      	movs	r3, #0
   83e4c:	9302      	str	r3, [sp, #8]
   83e4e:	2300      	movs	r3, #0
   83e50:	9303      	str	r3, [sp, #12]
   83e52:	4812      	ldr	r0, [pc, #72]	; (83e9c <vTaskStartScheduler+0x60>)
   83e54:	4912      	ldr	r1, [pc, #72]	; (83ea0 <vTaskStartScheduler+0x64>)
   83e56:	2282      	movs	r2, #130	; 0x82
   83e58:	2300      	movs	r3, #0
   83e5a:	4c12      	ldr	r4, [pc, #72]	; (83ea4 <vTaskStartScheduler+0x68>)
   83e5c:	47a0      	blx	r4
   83e5e:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   83e60:	687b      	ldr	r3, [r7, #4]
   83e62:	2b01      	cmp	r3, #1
   83e64:	d102      	bne.n	83e6c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   83e66:	4b10      	ldr	r3, [pc, #64]	; (83ea8 <vTaskStartScheduler+0x6c>)
   83e68:	4798      	blx	r3
   83e6a:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   83e6c:	687b      	ldr	r3, [r7, #4]
   83e6e:	2b01      	cmp	r3, #1
   83e70:	d10a      	bne.n	83e88 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   83e72:	4b0e      	ldr	r3, [pc, #56]	; (83eac <vTaskStartScheduler+0x70>)
   83e74:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   83e76:	4b0e      	ldr	r3, [pc, #56]	; (83eb0 <vTaskStartScheduler+0x74>)
   83e78:	2201      	movs	r2, #1
   83e7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   83e7c:	4b0d      	ldr	r3, [pc, #52]	; (83eb4 <vTaskStartScheduler+0x78>)
   83e7e:	2200      	movs	r2, #0
   83e80:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   83e82:	4b0d      	ldr	r3, [pc, #52]	; (83eb8 <vTaskStartScheduler+0x7c>)
   83e84:	4798      	blx	r3
   83e86:	e005      	b.n	83e94 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   83e88:	687b      	ldr	r3, [r7, #4]
   83e8a:	2b00      	cmp	r3, #0
   83e8c:	d102      	bne.n	83e94 <vTaskStartScheduler+0x58>
   83e8e:	4b07      	ldr	r3, [pc, #28]	; (83eac <vTaskStartScheduler+0x70>)
   83e90:	4798      	blx	r3
   83e92:	e7fe      	b.n	83e92 <vTaskStartScheduler+0x56>
	}
}
   83e94:	370c      	adds	r7, #12
   83e96:	46bd      	mov	sp, r7
   83e98:	bd90      	pop	{r4, r7, pc}
   83e9a:	bf00      	nop
   83e9c:	00084581 	.word	0x00084581
   83ea0:	000868bc 	.word	0x000868bc
   83ea4:	00083bc1 	.word	0x00083bc1
   83ea8:	00084ad5 	.word	0x00084ad5
   83eac:	00082e4d 	.word	0x00082e4d
   83eb0:	2007a654 	.word	0x2007a654
   83eb4:	2007a64c 	.word	0x2007a64c
   83eb8:	00082ce9 	.word	0x00082ce9

00083ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   83ebc:	b480      	push	{r7}
   83ebe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   83ec0:	4b04      	ldr	r3, [pc, #16]	; (83ed4 <vTaskSuspendAll+0x18>)
   83ec2:	681b      	ldr	r3, [r3, #0]
   83ec4:	1c5a      	adds	r2, r3, #1
   83ec6:	4b03      	ldr	r3, [pc, #12]	; (83ed4 <vTaskSuspendAll+0x18>)
   83ec8:	601a      	str	r2, [r3, #0]
}
   83eca:	46bd      	mov	sp, r7
   83ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
   83ed0:	4770      	bx	lr
   83ed2:	bf00      	nop
   83ed4:	2007a668 	.word	0x2007a668

00083ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   83ed8:	b580      	push	{r7, lr}
   83eda:	b082      	sub	sp, #8
   83edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   83ede:	2300      	movs	r3, #0
   83ee0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   83ee2:	4b37      	ldr	r3, [pc, #220]	; (83fc0 <xTaskResumeAll+0xe8>)
   83ee4:	681b      	ldr	r3, [r3, #0]
   83ee6:	2b00      	cmp	r3, #0
   83ee8:	d102      	bne.n	83ef0 <xTaskResumeAll+0x18>
   83eea:	4b36      	ldr	r3, [pc, #216]	; (83fc4 <xTaskResumeAll+0xec>)
   83eec:	4798      	blx	r3
   83eee:	e7fe      	b.n	83eee <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   83ef0:	4b35      	ldr	r3, [pc, #212]	; (83fc8 <xTaskResumeAll+0xf0>)
   83ef2:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   83ef4:	4b32      	ldr	r3, [pc, #200]	; (83fc0 <xTaskResumeAll+0xe8>)
   83ef6:	681b      	ldr	r3, [r3, #0]
   83ef8:	1e5a      	subs	r2, r3, #1
   83efa:	4b31      	ldr	r3, [pc, #196]	; (83fc0 <xTaskResumeAll+0xe8>)
   83efc:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83efe:	4b30      	ldr	r3, [pc, #192]	; (83fc0 <xTaskResumeAll+0xe8>)
   83f00:	681b      	ldr	r3, [r3, #0]
   83f02:	2b00      	cmp	r3, #0
   83f04:	d155      	bne.n	83fb2 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   83f06:	4b31      	ldr	r3, [pc, #196]	; (83fcc <xTaskResumeAll+0xf4>)
   83f08:	681b      	ldr	r3, [r3, #0]
   83f0a:	2b00      	cmp	r3, #0
   83f0c:	d051      	beq.n	83fb2 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f0e:	e02e      	b.n	83f6e <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   83f10:	4b2f      	ldr	r3, [pc, #188]	; (83fd0 <xTaskResumeAll+0xf8>)
   83f12:	68db      	ldr	r3, [r3, #12]
   83f14:	68db      	ldr	r3, [r3, #12]
   83f16:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   83f18:	683b      	ldr	r3, [r7, #0]
   83f1a:	3318      	adds	r3, #24
   83f1c:	4618      	mov	r0, r3
   83f1e:	4b2d      	ldr	r3, [pc, #180]	; (83fd4 <xTaskResumeAll+0xfc>)
   83f20:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   83f22:	683b      	ldr	r3, [r7, #0]
   83f24:	3304      	adds	r3, #4
   83f26:	4618      	mov	r0, r3
   83f28:	4b2a      	ldr	r3, [pc, #168]	; (83fd4 <xTaskResumeAll+0xfc>)
   83f2a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   83f2c:	683b      	ldr	r3, [r7, #0]
   83f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f30:	2201      	movs	r2, #1
   83f32:	409a      	lsls	r2, r3
   83f34:	4b28      	ldr	r3, [pc, #160]	; (83fd8 <xTaskResumeAll+0x100>)
   83f36:	681b      	ldr	r3, [r3, #0]
   83f38:	431a      	orrs	r2, r3
   83f3a:	4b27      	ldr	r3, [pc, #156]	; (83fd8 <xTaskResumeAll+0x100>)
   83f3c:	601a      	str	r2, [r3, #0]
   83f3e:	683b      	ldr	r3, [r7, #0]
   83f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f42:	4613      	mov	r3, r2
   83f44:	009b      	lsls	r3, r3, #2
   83f46:	4413      	add	r3, r2
   83f48:	009b      	lsls	r3, r3, #2
   83f4a:	4a24      	ldr	r2, [pc, #144]	; (83fdc <xTaskResumeAll+0x104>)
   83f4c:	441a      	add	r2, r3
   83f4e:	683b      	ldr	r3, [r7, #0]
   83f50:	3304      	adds	r3, #4
   83f52:	4610      	mov	r0, r2
   83f54:	4619      	mov	r1, r3
   83f56:	4b22      	ldr	r3, [pc, #136]	; (83fe0 <xTaskResumeAll+0x108>)
   83f58:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83f5a:	683b      	ldr	r3, [r7, #0]
   83f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f5e:	4b21      	ldr	r3, [pc, #132]	; (83fe4 <xTaskResumeAll+0x10c>)
   83f60:	681b      	ldr	r3, [r3, #0]
   83f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f64:	429a      	cmp	r2, r3
   83f66:	d302      	bcc.n	83f6e <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   83f68:	4b1f      	ldr	r3, [pc, #124]	; (83fe8 <xTaskResumeAll+0x110>)
   83f6a:	2201      	movs	r2, #1
   83f6c:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f6e:	4b18      	ldr	r3, [pc, #96]	; (83fd0 <xTaskResumeAll+0xf8>)
   83f70:	681b      	ldr	r3, [r3, #0]
   83f72:	2b00      	cmp	r3, #0
   83f74:	d1cc      	bne.n	83f10 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   83f76:	4b1d      	ldr	r3, [pc, #116]	; (83fec <xTaskResumeAll+0x114>)
   83f78:	681b      	ldr	r3, [r3, #0]
   83f7a:	2b00      	cmp	r3, #0
   83f7c:	d011      	beq.n	83fa2 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83f7e:	e00c      	b.n	83f9a <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   83f80:	4b1b      	ldr	r3, [pc, #108]	; (83ff0 <xTaskResumeAll+0x118>)
   83f82:	4798      	blx	r3
   83f84:	4603      	mov	r3, r0
   83f86:	2b00      	cmp	r3, #0
   83f88:	d002      	beq.n	83f90 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   83f8a:	4b17      	ldr	r3, [pc, #92]	; (83fe8 <xTaskResumeAll+0x110>)
   83f8c:	2201      	movs	r2, #1
   83f8e:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   83f90:	4b16      	ldr	r3, [pc, #88]	; (83fec <xTaskResumeAll+0x114>)
   83f92:	681b      	ldr	r3, [r3, #0]
   83f94:	1e5a      	subs	r2, r3, #1
   83f96:	4b15      	ldr	r3, [pc, #84]	; (83fec <xTaskResumeAll+0x114>)
   83f98:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83f9a:	4b14      	ldr	r3, [pc, #80]	; (83fec <xTaskResumeAll+0x114>)
   83f9c:	681b      	ldr	r3, [r3, #0]
   83f9e:	2b00      	cmp	r3, #0
   83fa0:	d1ee      	bne.n	83f80 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   83fa2:	4b11      	ldr	r3, [pc, #68]	; (83fe8 <xTaskResumeAll+0x110>)
   83fa4:	681b      	ldr	r3, [r3, #0]
   83fa6:	2b01      	cmp	r3, #1
   83fa8:	d103      	bne.n	83fb2 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   83faa:	2301      	movs	r3, #1
   83fac:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   83fae:	4b11      	ldr	r3, [pc, #68]	; (83ff4 <xTaskResumeAll+0x11c>)
   83fb0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83fb2:	4b11      	ldr	r3, [pc, #68]	; (83ff8 <xTaskResumeAll+0x120>)
   83fb4:	4798      	blx	r3

	return xAlreadyYielded;
   83fb6:	687b      	ldr	r3, [r7, #4]
}
   83fb8:	4618      	mov	r0, r3
   83fba:	3708      	adds	r7, #8
   83fbc:	46bd      	mov	sp, r7
   83fbe:	bd80      	pop	{r7, pc}
   83fc0:	2007a668 	.word	0x2007a668
   83fc4:	00082e4d 	.word	0x00082e4d
   83fc8:	00082dd1 	.word	0x00082dd1
   83fcc:	2007a648 	.word	0x2007a648
   83fd0:	2007a608 	.word	0x2007a608
   83fd4:	00082bd5 	.word	0x00082bd5
   83fd8:	2007a650 	.word	0x2007a650
   83fdc:	2007a574 	.word	0x2007a574
   83fe0:	00082b1d 	.word	0x00082b1d
   83fe4:	2007a570 	.word	0x2007a570
   83fe8:	2007a65c 	.word	0x2007a65c
   83fec:	2007a658 	.word	0x2007a658
   83ff0:	00084029 	.word	0x00084029
   83ff4:	00082db1 	.word	0x00082db1
   83ff8:	00082e15 	.word	0x00082e15

00083ffc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   83ffc:	b580      	push	{r7, lr}
   83ffe:	b082      	sub	sp, #8
   84000:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   84002:	4b06      	ldr	r3, [pc, #24]	; (8401c <xTaskGetTickCount+0x20>)
   84004:	4798      	blx	r3
	{
		xTicks = xTickCount;
   84006:	4b06      	ldr	r3, [pc, #24]	; (84020 <xTaskGetTickCount+0x24>)
   84008:	681b      	ldr	r3, [r3, #0]
   8400a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   8400c:	4b05      	ldr	r3, [pc, #20]	; (84024 <xTaskGetTickCount+0x28>)
   8400e:	4798      	blx	r3

	return xTicks;
   84010:	687b      	ldr	r3, [r7, #4]
}
   84012:	4618      	mov	r0, r3
   84014:	3708      	adds	r7, #8
   84016:	46bd      	mov	sp, r7
   84018:	bd80      	pop	{r7, pc}
   8401a:	bf00      	nop
   8401c:	00082dd1 	.word	0x00082dd1
   84020:	2007a64c 	.word	0x2007a64c
   84024:	00082e15 	.word	0x00082e15

00084028 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   84028:	b580      	push	{r7, lr}
   8402a:	b086      	sub	sp, #24
   8402c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8402e:	2300      	movs	r3, #0
   84030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84032:	4b4d      	ldr	r3, [pc, #308]	; (84168 <xTaskIncrementTick+0x140>)
   84034:	681b      	ldr	r3, [r3, #0]
   84036:	2b00      	cmp	r3, #0
   84038:	f040 8086 	bne.w	84148 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   8403c:	4b4b      	ldr	r3, [pc, #300]	; (8416c <xTaskIncrementTick+0x144>)
   8403e:	681b      	ldr	r3, [r3, #0]
   84040:	1c5a      	adds	r2, r3, #1
   84042:	4b4a      	ldr	r3, [pc, #296]	; (8416c <xTaskIncrementTick+0x144>)
   84044:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   84046:	4b49      	ldr	r3, [pc, #292]	; (8416c <xTaskIncrementTick+0x144>)
   84048:	681b      	ldr	r3, [r3, #0]
   8404a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   8404c:	693b      	ldr	r3, [r7, #16]
   8404e:	2b00      	cmp	r3, #0
   84050:	d118      	bne.n	84084 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   84052:	4b47      	ldr	r3, [pc, #284]	; (84170 <xTaskIncrementTick+0x148>)
   84054:	681b      	ldr	r3, [r3, #0]
   84056:	681b      	ldr	r3, [r3, #0]
   84058:	2b00      	cmp	r3, #0
   8405a:	d002      	beq.n	84062 <xTaskIncrementTick+0x3a>
   8405c:	4b45      	ldr	r3, [pc, #276]	; (84174 <xTaskIncrementTick+0x14c>)
   8405e:	4798      	blx	r3
   84060:	e7fe      	b.n	84060 <xTaskIncrementTick+0x38>
   84062:	4b43      	ldr	r3, [pc, #268]	; (84170 <xTaskIncrementTick+0x148>)
   84064:	681b      	ldr	r3, [r3, #0]
   84066:	60fb      	str	r3, [r7, #12]
   84068:	4b43      	ldr	r3, [pc, #268]	; (84178 <xTaskIncrementTick+0x150>)
   8406a:	681a      	ldr	r2, [r3, #0]
   8406c:	4b40      	ldr	r3, [pc, #256]	; (84170 <xTaskIncrementTick+0x148>)
   8406e:	601a      	str	r2, [r3, #0]
   84070:	4b41      	ldr	r3, [pc, #260]	; (84178 <xTaskIncrementTick+0x150>)
   84072:	68fa      	ldr	r2, [r7, #12]
   84074:	601a      	str	r2, [r3, #0]
   84076:	4b41      	ldr	r3, [pc, #260]	; (8417c <xTaskIncrementTick+0x154>)
   84078:	681b      	ldr	r3, [r3, #0]
   8407a:	1c5a      	adds	r2, r3, #1
   8407c:	4b3f      	ldr	r3, [pc, #252]	; (8417c <xTaskIncrementTick+0x154>)
   8407e:	601a      	str	r2, [r3, #0]
   84080:	4b3f      	ldr	r3, [pc, #252]	; (84180 <xTaskIncrementTick+0x158>)
   84082:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   84084:	4b3f      	ldr	r3, [pc, #252]	; (84184 <xTaskIncrementTick+0x15c>)
   84086:	681b      	ldr	r3, [r3, #0]
   84088:	693a      	ldr	r2, [r7, #16]
   8408a:	429a      	cmp	r2, r3
   8408c:	d34d      	bcc.n	8412a <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8408e:	4b38      	ldr	r3, [pc, #224]	; (84170 <xTaskIncrementTick+0x148>)
   84090:	681b      	ldr	r3, [r3, #0]
   84092:	681b      	ldr	r3, [r3, #0]
   84094:	2b00      	cmp	r3, #0
   84096:	d101      	bne.n	8409c <xTaskIncrementTick+0x74>
   84098:	2301      	movs	r3, #1
   8409a:	e000      	b.n	8409e <xTaskIncrementTick+0x76>
   8409c:	2300      	movs	r3, #0
   8409e:	2b00      	cmp	r3, #0
   840a0:	d004      	beq.n	840ac <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   840a2:	4b38      	ldr	r3, [pc, #224]	; (84184 <xTaskIncrementTick+0x15c>)
   840a4:	f04f 32ff 	mov.w	r2, #4294967295
   840a8:	601a      	str	r2, [r3, #0]
						break;
   840aa:	e03e      	b.n	8412a <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   840ac:	4b30      	ldr	r3, [pc, #192]	; (84170 <xTaskIncrementTick+0x148>)
   840ae:	681b      	ldr	r3, [r3, #0]
   840b0:	68db      	ldr	r3, [r3, #12]
   840b2:	68db      	ldr	r3, [r3, #12]
   840b4:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   840b6:	68bb      	ldr	r3, [r7, #8]
   840b8:	685b      	ldr	r3, [r3, #4]
   840ba:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   840bc:	693a      	ldr	r2, [r7, #16]
   840be:	687b      	ldr	r3, [r7, #4]
   840c0:	429a      	cmp	r2, r3
   840c2:	d203      	bcs.n	840cc <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   840c4:	4b2f      	ldr	r3, [pc, #188]	; (84184 <xTaskIncrementTick+0x15c>)
   840c6:	687a      	ldr	r2, [r7, #4]
   840c8:	601a      	str	r2, [r3, #0]
							break;
   840ca:	e02e      	b.n	8412a <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   840cc:	68bb      	ldr	r3, [r7, #8]
   840ce:	3304      	adds	r3, #4
   840d0:	4618      	mov	r0, r3
   840d2:	4b2d      	ldr	r3, [pc, #180]	; (84188 <xTaskIncrementTick+0x160>)
   840d4:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   840d6:	68bb      	ldr	r3, [r7, #8]
   840d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840da:	2b00      	cmp	r3, #0
   840dc:	d004      	beq.n	840e8 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   840de:	68bb      	ldr	r3, [r7, #8]
   840e0:	3318      	adds	r3, #24
   840e2:	4618      	mov	r0, r3
   840e4:	4b28      	ldr	r3, [pc, #160]	; (84188 <xTaskIncrementTick+0x160>)
   840e6:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   840e8:	68bb      	ldr	r3, [r7, #8]
   840ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   840ec:	2201      	movs	r2, #1
   840ee:	409a      	lsls	r2, r3
   840f0:	4b26      	ldr	r3, [pc, #152]	; (8418c <xTaskIncrementTick+0x164>)
   840f2:	681b      	ldr	r3, [r3, #0]
   840f4:	431a      	orrs	r2, r3
   840f6:	4b25      	ldr	r3, [pc, #148]	; (8418c <xTaskIncrementTick+0x164>)
   840f8:	601a      	str	r2, [r3, #0]
   840fa:	68bb      	ldr	r3, [r7, #8]
   840fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   840fe:	4613      	mov	r3, r2
   84100:	009b      	lsls	r3, r3, #2
   84102:	4413      	add	r3, r2
   84104:	009b      	lsls	r3, r3, #2
   84106:	4a22      	ldr	r2, [pc, #136]	; (84190 <xTaskIncrementTick+0x168>)
   84108:	441a      	add	r2, r3
   8410a:	68bb      	ldr	r3, [r7, #8]
   8410c:	3304      	adds	r3, #4
   8410e:	4610      	mov	r0, r2
   84110:	4619      	mov	r1, r3
   84112:	4b20      	ldr	r3, [pc, #128]	; (84194 <xTaskIncrementTick+0x16c>)
   84114:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84116:	68bb      	ldr	r3, [r7, #8]
   84118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8411a:	4b1f      	ldr	r3, [pc, #124]	; (84198 <xTaskIncrementTick+0x170>)
   8411c:	681b      	ldr	r3, [r3, #0]
   8411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84120:	429a      	cmp	r2, r3
   84122:	d301      	bcc.n	84128 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   84124:	2301      	movs	r3, #1
   84126:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   84128:	e7b1      	b.n	8408e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8412a:	4b1b      	ldr	r3, [pc, #108]	; (84198 <xTaskIncrementTick+0x170>)
   8412c:	681b      	ldr	r3, [r3, #0]
   8412e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84130:	4917      	ldr	r1, [pc, #92]	; (84190 <xTaskIncrementTick+0x168>)
   84132:	4613      	mov	r3, r2
   84134:	009b      	lsls	r3, r3, #2
   84136:	4413      	add	r3, r2
   84138:	009b      	lsls	r3, r3, #2
   8413a:	440b      	add	r3, r1
   8413c:	681b      	ldr	r3, [r3, #0]
   8413e:	2b01      	cmp	r3, #1
   84140:	d907      	bls.n	84152 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   84142:	2301      	movs	r3, #1
   84144:	617b      	str	r3, [r7, #20]
   84146:	e004      	b.n	84152 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   84148:	4b14      	ldr	r3, [pc, #80]	; (8419c <xTaskIncrementTick+0x174>)
   8414a:	681b      	ldr	r3, [r3, #0]
   8414c:	1c5a      	adds	r2, r3, #1
   8414e:	4b13      	ldr	r3, [pc, #76]	; (8419c <xTaskIncrementTick+0x174>)
   84150:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   84152:	4b13      	ldr	r3, [pc, #76]	; (841a0 <xTaskIncrementTick+0x178>)
   84154:	681b      	ldr	r3, [r3, #0]
   84156:	2b00      	cmp	r3, #0
   84158:	d001      	beq.n	8415e <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   8415a:	2301      	movs	r3, #1
   8415c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8415e:	697b      	ldr	r3, [r7, #20]
}
   84160:	4618      	mov	r0, r3
   84162:	3718      	adds	r7, #24
   84164:	46bd      	mov	sp, r7
   84166:	bd80      	pop	{r7, pc}
   84168:	2007a668 	.word	0x2007a668
   8416c:	2007a64c 	.word	0x2007a64c
   84170:	2007a600 	.word	0x2007a600
   84174:	00082e4d 	.word	0x00082e4d
   84178:	2007a604 	.word	0x2007a604
   8417c:	2007a660 	.word	0x2007a660
   84180:	00084851 	.word	0x00084851
   84184:	2007000c 	.word	0x2007000c
   84188:	00082bd5 	.word	0x00082bd5
   8418c:	2007a650 	.word	0x2007a650
   84190:	2007a574 	.word	0x2007a574
   84194:	00082b1d 	.word	0x00082b1d
   84198:	2007a570 	.word	0x2007a570
   8419c:	2007a658 	.word	0x2007a658
   841a0:	2007a65c 	.word	0x2007a65c

000841a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   841a4:	b580      	push	{r7, lr}
   841a6:	b084      	sub	sp, #16
   841a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   841aa:	4b34      	ldr	r3, [pc, #208]	; (8427c <vTaskSwitchContext+0xd8>)
   841ac:	681b      	ldr	r3, [r3, #0]
   841ae:	2b00      	cmp	r3, #0
   841b0:	d003      	beq.n	841ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   841b2:	4b33      	ldr	r3, [pc, #204]	; (84280 <vTaskSwitchContext+0xdc>)
   841b4:	2201      	movs	r2, #1
   841b6:	601a      	str	r2, [r3, #0]
   841b8:	e05c      	b.n	84274 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   841ba:	4b31      	ldr	r3, [pc, #196]	; (84280 <vTaskSwitchContext+0xdc>)
   841bc:	2200      	movs	r2, #0
   841be:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   841c0:	4b30      	ldr	r3, [pc, #192]	; (84284 <vTaskSwitchContext+0xe0>)
   841c2:	681b      	ldr	r3, [r3, #0]
   841c4:	681a      	ldr	r2, [r3, #0]
   841c6:	4b2f      	ldr	r3, [pc, #188]	; (84284 <vTaskSwitchContext+0xe0>)
   841c8:	681b      	ldr	r3, [r3, #0]
   841ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841cc:	429a      	cmp	r2, r3
   841ce:	d808      	bhi.n	841e2 <vTaskSwitchContext+0x3e>
   841d0:	4b2c      	ldr	r3, [pc, #176]	; (84284 <vTaskSwitchContext+0xe0>)
   841d2:	681a      	ldr	r2, [r3, #0]
   841d4:	4b2b      	ldr	r3, [pc, #172]	; (84284 <vTaskSwitchContext+0xe0>)
   841d6:	681b      	ldr	r3, [r3, #0]
   841d8:	3334      	adds	r3, #52	; 0x34
   841da:	4610      	mov	r0, r2
   841dc:	4619      	mov	r1, r3
   841de:	4b2a      	ldr	r3, [pc, #168]	; (84288 <vTaskSwitchContext+0xe4>)
   841e0:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   841e2:	4b28      	ldr	r3, [pc, #160]	; (84284 <vTaskSwitchContext+0xe0>)
   841e4:	681b      	ldr	r3, [r3, #0]
   841e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841e8:	4618      	mov	r0, r3
   841ea:	4928      	ldr	r1, [pc, #160]	; (8428c <vTaskSwitchContext+0xe8>)
   841ec:	2214      	movs	r2, #20
   841ee:	4b28      	ldr	r3, [pc, #160]	; (84290 <vTaskSwitchContext+0xec>)
   841f0:	4798      	blx	r3
   841f2:	4603      	mov	r3, r0
   841f4:	2b00      	cmp	r3, #0
   841f6:	d008      	beq.n	8420a <vTaskSwitchContext+0x66>
   841f8:	4b22      	ldr	r3, [pc, #136]	; (84284 <vTaskSwitchContext+0xe0>)
   841fa:	681a      	ldr	r2, [r3, #0]
   841fc:	4b21      	ldr	r3, [pc, #132]	; (84284 <vTaskSwitchContext+0xe0>)
   841fe:	681b      	ldr	r3, [r3, #0]
   84200:	3334      	adds	r3, #52	; 0x34
   84202:	4610      	mov	r0, r2
   84204:	4619      	mov	r1, r3
   84206:	4b20      	ldr	r3, [pc, #128]	; (84288 <vTaskSwitchContext+0xe4>)
   84208:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8420a:	4b22      	ldr	r3, [pc, #136]	; (84294 <vTaskSwitchContext+0xf0>)
   8420c:	681b      	ldr	r3, [r3, #0]
   8420e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   84210:	687b      	ldr	r3, [r7, #4]
   84212:	fab3 f383 	clz	r3, r3
   84216:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   84218:	78fb      	ldrb	r3, [r7, #3]
   8421a:	f1c3 031f 	rsb	r3, r3, #31
   8421e:	60fb      	str	r3, [r7, #12]
   84220:	491d      	ldr	r1, [pc, #116]	; (84298 <vTaskSwitchContext+0xf4>)
   84222:	68fa      	ldr	r2, [r7, #12]
   84224:	4613      	mov	r3, r2
   84226:	009b      	lsls	r3, r3, #2
   84228:	4413      	add	r3, r2
   8422a:	009b      	lsls	r3, r3, #2
   8422c:	440b      	add	r3, r1
   8422e:	681b      	ldr	r3, [r3, #0]
   84230:	2b00      	cmp	r3, #0
   84232:	d102      	bne.n	8423a <vTaskSwitchContext+0x96>
   84234:	4b19      	ldr	r3, [pc, #100]	; (8429c <vTaskSwitchContext+0xf8>)
   84236:	4798      	blx	r3
   84238:	e7fe      	b.n	84238 <vTaskSwitchContext+0x94>
   8423a:	68fa      	ldr	r2, [r7, #12]
   8423c:	4613      	mov	r3, r2
   8423e:	009b      	lsls	r3, r3, #2
   84240:	4413      	add	r3, r2
   84242:	009b      	lsls	r3, r3, #2
   84244:	4a14      	ldr	r2, [pc, #80]	; (84298 <vTaskSwitchContext+0xf4>)
   84246:	4413      	add	r3, r2
   84248:	60bb      	str	r3, [r7, #8]
   8424a:	68bb      	ldr	r3, [r7, #8]
   8424c:	685b      	ldr	r3, [r3, #4]
   8424e:	685a      	ldr	r2, [r3, #4]
   84250:	68bb      	ldr	r3, [r7, #8]
   84252:	605a      	str	r2, [r3, #4]
   84254:	68bb      	ldr	r3, [r7, #8]
   84256:	685a      	ldr	r2, [r3, #4]
   84258:	68bb      	ldr	r3, [r7, #8]
   8425a:	3308      	adds	r3, #8
   8425c:	429a      	cmp	r2, r3
   8425e:	d104      	bne.n	8426a <vTaskSwitchContext+0xc6>
   84260:	68bb      	ldr	r3, [r7, #8]
   84262:	685b      	ldr	r3, [r3, #4]
   84264:	685a      	ldr	r2, [r3, #4]
   84266:	68bb      	ldr	r3, [r7, #8]
   84268:	605a      	str	r2, [r3, #4]
   8426a:	68bb      	ldr	r3, [r7, #8]
   8426c:	685b      	ldr	r3, [r3, #4]
   8426e:	68da      	ldr	r2, [r3, #12]
   84270:	4b04      	ldr	r3, [pc, #16]	; (84284 <vTaskSwitchContext+0xe0>)
   84272:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   84274:	3710      	adds	r7, #16
   84276:	46bd      	mov	sp, r7
   84278:	bd80      	pop	{r7, pc}
   8427a:	bf00      	nop
   8427c:	2007a668 	.word	0x2007a668
   84280:	2007a65c 	.word	0x2007a65c
   84284:	2007a570 	.word	0x2007a570
   84288:	00085d59 	.word	0x00085d59
   8428c:	000868c4 	.word	0x000868c4
   84290:	0008647d 	.word	0x0008647d
   84294:	2007a650 	.word	0x2007a650
   84298:	2007a574 	.word	0x2007a574
   8429c:	00082e4d 	.word	0x00082e4d

000842a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   842a0:	b580      	push	{r7, lr}
   842a2:	b084      	sub	sp, #16
   842a4:	af00      	add	r7, sp, #0
   842a6:	6078      	str	r0, [r7, #4]
   842a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   842aa:	687b      	ldr	r3, [r7, #4]
   842ac:	2b00      	cmp	r3, #0
   842ae:	d102      	bne.n	842b6 <vTaskPlaceOnEventList+0x16>
   842b0:	4b1a      	ldr	r3, [pc, #104]	; (8431c <vTaskPlaceOnEventList+0x7c>)
   842b2:	4798      	blx	r3
   842b4:	e7fe      	b.n	842b4 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   842b6:	4b1a      	ldr	r3, [pc, #104]	; (84320 <vTaskPlaceOnEventList+0x80>)
   842b8:	681b      	ldr	r3, [r3, #0]
   842ba:	3318      	adds	r3, #24
   842bc:	6878      	ldr	r0, [r7, #4]
   842be:	4619      	mov	r1, r3
   842c0:	4b18      	ldr	r3, [pc, #96]	; (84324 <vTaskPlaceOnEventList+0x84>)
   842c2:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   842c4:	4b16      	ldr	r3, [pc, #88]	; (84320 <vTaskPlaceOnEventList+0x80>)
   842c6:	681b      	ldr	r3, [r3, #0]
   842c8:	3304      	adds	r3, #4
   842ca:	4618      	mov	r0, r3
   842cc:	4b16      	ldr	r3, [pc, #88]	; (84328 <vTaskPlaceOnEventList+0x88>)
   842ce:	4798      	blx	r3
   842d0:	4603      	mov	r3, r0
   842d2:	2b00      	cmp	r3, #0
   842d4:	d10b      	bne.n	842ee <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   842d6:	4b12      	ldr	r3, [pc, #72]	; (84320 <vTaskPlaceOnEventList+0x80>)
   842d8:	681b      	ldr	r3, [r3, #0]
   842da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   842dc:	2201      	movs	r2, #1
   842de:	fa02 f303 	lsl.w	r3, r2, r3
   842e2:	43da      	mvns	r2, r3
   842e4:	4b11      	ldr	r3, [pc, #68]	; (8432c <vTaskPlaceOnEventList+0x8c>)
   842e6:	681b      	ldr	r3, [r3, #0]
   842e8:	401a      	ands	r2, r3
   842ea:	4b10      	ldr	r3, [pc, #64]	; (8432c <vTaskPlaceOnEventList+0x8c>)
   842ec:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   842ee:	683b      	ldr	r3, [r7, #0]
   842f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   842f4:	d107      	bne.n	84306 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   842f6:	4b0a      	ldr	r3, [pc, #40]	; (84320 <vTaskPlaceOnEventList+0x80>)
   842f8:	681b      	ldr	r3, [r3, #0]
   842fa:	3304      	adds	r3, #4
   842fc:	480c      	ldr	r0, [pc, #48]	; (84330 <vTaskPlaceOnEventList+0x90>)
   842fe:	4619      	mov	r1, r3
   84300:	4b0c      	ldr	r3, [pc, #48]	; (84334 <vTaskPlaceOnEventList+0x94>)
   84302:	4798      	blx	r3
   84304:	e007      	b.n	84316 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   84306:	4b0c      	ldr	r3, [pc, #48]	; (84338 <vTaskPlaceOnEventList+0x98>)
   84308:	681a      	ldr	r2, [r3, #0]
   8430a:	683b      	ldr	r3, [r7, #0]
   8430c:	4413      	add	r3, r2
   8430e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   84310:	68f8      	ldr	r0, [r7, #12]
   84312:	4b0a      	ldr	r3, [pc, #40]	; (8433c <vTaskPlaceOnEventList+0x9c>)
   84314:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   84316:	3710      	adds	r7, #16
   84318:	46bd      	mov	sp, r7
   8431a:	bd80      	pop	{r7, pc}
   8431c:	00082e4d 	.word	0x00082e4d
   84320:	2007a570 	.word	0x2007a570
   84324:	00082b65 	.word	0x00082b65
   84328:	00082bd5 	.word	0x00082bd5
   8432c:	2007a650 	.word	0x2007a650
   84330:	2007a634 	.word	0x2007a634
   84334:	00082b1d 	.word	0x00082b1d
   84338:	2007a64c 	.word	0x2007a64c
   8433c:	0008474d 	.word	0x0008474d

00084340 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   84340:	b580      	push	{r7, lr}
   84342:	b084      	sub	sp, #16
   84344:	af00      	add	r7, sp, #0
   84346:	6078      	str	r0, [r7, #4]
   84348:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   8434a:	687b      	ldr	r3, [r7, #4]
   8434c:	2b00      	cmp	r3, #0
   8434e:	d102      	bne.n	84356 <vTaskPlaceOnEventListRestricted+0x16>
   84350:	4b14      	ldr	r3, [pc, #80]	; (843a4 <vTaskPlaceOnEventListRestricted+0x64>)
   84352:	4798      	blx	r3
   84354:	e7fe      	b.n	84354 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84356:	4b14      	ldr	r3, [pc, #80]	; (843a8 <vTaskPlaceOnEventListRestricted+0x68>)
   84358:	681b      	ldr	r3, [r3, #0]
   8435a:	3318      	adds	r3, #24
   8435c:	6878      	ldr	r0, [r7, #4]
   8435e:	4619      	mov	r1, r3
   84360:	4b12      	ldr	r3, [pc, #72]	; (843ac <vTaskPlaceOnEventListRestricted+0x6c>)
   84362:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84364:	4b10      	ldr	r3, [pc, #64]	; (843a8 <vTaskPlaceOnEventListRestricted+0x68>)
   84366:	681b      	ldr	r3, [r3, #0]
   84368:	3304      	adds	r3, #4
   8436a:	4618      	mov	r0, r3
   8436c:	4b10      	ldr	r3, [pc, #64]	; (843b0 <vTaskPlaceOnEventListRestricted+0x70>)
   8436e:	4798      	blx	r3
   84370:	4603      	mov	r3, r0
   84372:	2b00      	cmp	r3, #0
   84374:	d10b      	bne.n	8438e <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84376:	4b0c      	ldr	r3, [pc, #48]	; (843a8 <vTaskPlaceOnEventListRestricted+0x68>)
   84378:	681b      	ldr	r3, [r3, #0]
   8437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8437c:	2201      	movs	r2, #1
   8437e:	fa02 f303 	lsl.w	r3, r2, r3
   84382:	43da      	mvns	r2, r3
   84384:	4b0b      	ldr	r3, [pc, #44]	; (843b4 <vTaskPlaceOnEventListRestricted+0x74>)
   84386:	681b      	ldr	r3, [r3, #0]
   84388:	401a      	ands	r2, r3
   8438a:	4b0a      	ldr	r3, [pc, #40]	; (843b4 <vTaskPlaceOnEventListRestricted+0x74>)
   8438c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8438e:	4b0a      	ldr	r3, [pc, #40]	; (843b8 <vTaskPlaceOnEventListRestricted+0x78>)
   84390:	681a      	ldr	r2, [r3, #0]
   84392:	683b      	ldr	r3, [r7, #0]
   84394:	4413      	add	r3, r2
   84396:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   84398:	68f8      	ldr	r0, [r7, #12]
   8439a:	4b08      	ldr	r3, [pc, #32]	; (843bc <vTaskPlaceOnEventListRestricted+0x7c>)
   8439c:	4798      	blx	r3
	}
   8439e:	3710      	adds	r7, #16
   843a0:	46bd      	mov	sp, r7
   843a2:	bd80      	pop	{r7, pc}
   843a4:	00082e4d 	.word	0x00082e4d
   843a8:	2007a570 	.word	0x2007a570
   843ac:	00082b1d 	.word	0x00082b1d
   843b0:	00082bd5 	.word	0x00082bd5
   843b4:	2007a650 	.word	0x2007a650
   843b8:	2007a64c 	.word	0x2007a64c
   843bc:	0008474d 	.word	0x0008474d

000843c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   843c0:	b580      	push	{r7, lr}
   843c2:	b084      	sub	sp, #16
   843c4:	af00      	add	r7, sp, #0
   843c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   843c8:	687b      	ldr	r3, [r7, #4]
   843ca:	68db      	ldr	r3, [r3, #12]
   843cc:	68db      	ldr	r3, [r3, #12]
   843ce:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   843d0:	68bb      	ldr	r3, [r7, #8]
   843d2:	2b00      	cmp	r3, #0
   843d4:	d102      	bne.n	843dc <xTaskRemoveFromEventList+0x1c>
   843d6:	4b21      	ldr	r3, [pc, #132]	; (8445c <xTaskRemoveFromEventList+0x9c>)
   843d8:	4798      	blx	r3
   843da:	e7fe      	b.n	843da <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   843dc:	68bb      	ldr	r3, [r7, #8]
   843de:	3318      	adds	r3, #24
   843e0:	4618      	mov	r0, r3
   843e2:	4b1f      	ldr	r3, [pc, #124]	; (84460 <xTaskRemoveFromEventList+0xa0>)
   843e4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   843e6:	4b1f      	ldr	r3, [pc, #124]	; (84464 <xTaskRemoveFromEventList+0xa4>)
   843e8:	681b      	ldr	r3, [r3, #0]
   843ea:	2b00      	cmp	r3, #0
   843ec:	d11c      	bne.n	84428 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   843ee:	68bb      	ldr	r3, [r7, #8]
   843f0:	3304      	adds	r3, #4
   843f2:	4618      	mov	r0, r3
   843f4:	4b1a      	ldr	r3, [pc, #104]	; (84460 <xTaskRemoveFromEventList+0xa0>)
   843f6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   843f8:	68bb      	ldr	r3, [r7, #8]
   843fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   843fc:	2201      	movs	r2, #1
   843fe:	409a      	lsls	r2, r3
   84400:	4b19      	ldr	r3, [pc, #100]	; (84468 <xTaskRemoveFromEventList+0xa8>)
   84402:	681b      	ldr	r3, [r3, #0]
   84404:	431a      	orrs	r2, r3
   84406:	4b18      	ldr	r3, [pc, #96]	; (84468 <xTaskRemoveFromEventList+0xa8>)
   84408:	601a      	str	r2, [r3, #0]
   8440a:	68bb      	ldr	r3, [r7, #8]
   8440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8440e:	4613      	mov	r3, r2
   84410:	009b      	lsls	r3, r3, #2
   84412:	4413      	add	r3, r2
   84414:	009b      	lsls	r3, r3, #2
   84416:	4a15      	ldr	r2, [pc, #84]	; (8446c <xTaskRemoveFromEventList+0xac>)
   84418:	441a      	add	r2, r3
   8441a:	68bb      	ldr	r3, [r7, #8]
   8441c:	3304      	adds	r3, #4
   8441e:	4610      	mov	r0, r2
   84420:	4619      	mov	r1, r3
   84422:	4b13      	ldr	r3, [pc, #76]	; (84470 <xTaskRemoveFromEventList+0xb0>)
   84424:	4798      	blx	r3
   84426:	e005      	b.n	84434 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   84428:	68bb      	ldr	r3, [r7, #8]
   8442a:	3318      	adds	r3, #24
   8442c:	4811      	ldr	r0, [pc, #68]	; (84474 <xTaskRemoveFromEventList+0xb4>)
   8442e:	4619      	mov	r1, r3
   84430:	4b0f      	ldr	r3, [pc, #60]	; (84470 <xTaskRemoveFromEventList+0xb0>)
   84432:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   84434:	68bb      	ldr	r3, [r7, #8]
   84436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84438:	4b0f      	ldr	r3, [pc, #60]	; (84478 <xTaskRemoveFromEventList+0xb8>)
   8443a:	681b      	ldr	r3, [r3, #0]
   8443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8443e:	429a      	cmp	r2, r3
   84440:	d905      	bls.n	8444e <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   84442:	2301      	movs	r3, #1
   84444:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   84446:	4b0d      	ldr	r3, [pc, #52]	; (8447c <xTaskRemoveFromEventList+0xbc>)
   84448:	2201      	movs	r2, #1
   8444a:	601a      	str	r2, [r3, #0]
   8444c:	e001      	b.n	84452 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8444e:	2300      	movs	r3, #0
   84450:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   84452:	68fb      	ldr	r3, [r7, #12]
}
   84454:	4618      	mov	r0, r3
   84456:	3710      	adds	r7, #16
   84458:	46bd      	mov	sp, r7
   8445a:	bd80      	pop	{r7, pc}
   8445c:	00082e4d 	.word	0x00082e4d
   84460:	00082bd5 	.word	0x00082bd5
   84464:	2007a668 	.word	0x2007a668
   84468:	2007a650 	.word	0x2007a650
   8446c:	2007a574 	.word	0x2007a574
   84470:	00082b1d 	.word	0x00082b1d
   84474:	2007a608 	.word	0x2007a608
   84478:	2007a570 	.word	0x2007a570
   8447c:	2007a65c 	.word	0x2007a65c

00084480 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   84480:	b580      	push	{r7, lr}
   84482:	b082      	sub	sp, #8
   84484:	af00      	add	r7, sp, #0
   84486:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   84488:	687b      	ldr	r3, [r7, #4]
   8448a:	2b00      	cmp	r3, #0
   8448c:	d102      	bne.n	84494 <vTaskSetTimeOutState+0x14>
   8448e:	4b07      	ldr	r3, [pc, #28]	; (844ac <vTaskSetTimeOutState+0x2c>)
   84490:	4798      	blx	r3
   84492:	e7fe      	b.n	84492 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   84494:	4b06      	ldr	r3, [pc, #24]	; (844b0 <vTaskSetTimeOutState+0x30>)
   84496:	681a      	ldr	r2, [r3, #0]
   84498:	687b      	ldr	r3, [r7, #4]
   8449a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8449c:	4b05      	ldr	r3, [pc, #20]	; (844b4 <vTaskSetTimeOutState+0x34>)
   8449e:	681a      	ldr	r2, [r3, #0]
   844a0:	687b      	ldr	r3, [r7, #4]
   844a2:	605a      	str	r2, [r3, #4]
}
   844a4:	3708      	adds	r7, #8
   844a6:	46bd      	mov	sp, r7
   844a8:	bd80      	pop	{r7, pc}
   844aa:	bf00      	nop
   844ac:	00082e4d 	.word	0x00082e4d
   844b0:	2007a660 	.word	0x2007a660
   844b4:	2007a64c 	.word	0x2007a64c

000844b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   844b8:	b580      	push	{r7, lr}
   844ba:	b084      	sub	sp, #16
   844bc:	af00      	add	r7, sp, #0
   844be:	6078      	str	r0, [r7, #4]
   844c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   844c2:	687b      	ldr	r3, [r7, #4]
   844c4:	2b00      	cmp	r3, #0
   844c6:	d102      	bne.n	844ce <xTaskCheckForTimeOut+0x16>
   844c8:	4b21      	ldr	r3, [pc, #132]	; (84550 <xTaskCheckForTimeOut+0x98>)
   844ca:	4798      	blx	r3
   844cc:	e7fe      	b.n	844cc <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   844ce:	683b      	ldr	r3, [r7, #0]
   844d0:	2b00      	cmp	r3, #0
   844d2:	d102      	bne.n	844da <xTaskCheckForTimeOut+0x22>
   844d4:	4b1e      	ldr	r3, [pc, #120]	; (84550 <xTaskCheckForTimeOut+0x98>)
   844d6:	4798      	blx	r3
   844d8:	e7fe      	b.n	844d8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   844da:	4b1e      	ldr	r3, [pc, #120]	; (84554 <xTaskCheckForTimeOut+0x9c>)
   844dc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   844de:	4b1e      	ldr	r3, [pc, #120]	; (84558 <xTaskCheckForTimeOut+0xa0>)
   844e0:	681b      	ldr	r3, [r3, #0]
   844e2:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   844e4:	683b      	ldr	r3, [r7, #0]
   844e6:	681b      	ldr	r3, [r3, #0]
   844e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   844ec:	d102      	bne.n	844f4 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   844ee:	2300      	movs	r3, #0
   844f0:	60fb      	str	r3, [r7, #12]
   844f2:	e026      	b.n	84542 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   844f4:	687b      	ldr	r3, [r7, #4]
   844f6:	681a      	ldr	r2, [r3, #0]
   844f8:	4b18      	ldr	r3, [pc, #96]	; (8455c <xTaskCheckForTimeOut+0xa4>)
   844fa:	681b      	ldr	r3, [r3, #0]
   844fc:	429a      	cmp	r2, r3
   844fe:	d007      	beq.n	84510 <xTaskCheckForTimeOut+0x58>
   84500:	687b      	ldr	r3, [r7, #4]
   84502:	685a      	ldr	r2, [r3, #4]
   84504:	68bb      	ldr	r3, [r7, #8]
   84506:	429a      	cmp	r2, r3
   84508:	d802      	bhi.n	84510 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8450a:	2301      	movs	r3, #1
   8450c:	60fb      	str	r3, [r7, #12]
   8450e:	e018      	b.n	84542 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   84510:	687b      	ldr	r3, [r7, #4]
   84512:	685b      	ldr	r3, [r3, #4]
   84514:	68ba      	ldr	r2, [r7, #8]
   84516:	1ad2      	subs	r2, r2, r3
   84518:	683b      	ldr	r3, [r7, #0]
   8451a:	681b      	ldr	r3, [r3, #0]
   8451c:	429a      	cmp	r2, r3
   8451e:	d20e      	bcs.n	8453e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   84520:	683b      	ldr	r3, [r7, #0]
   84522:	681a      	ldr	r2, [r3, #0]
   84524:	687b      	ldr	r3, [r7, #4]
   84526:	6859      	ldr	r1, [r3, #4]
   84528:	68bb      	ldr	r3, [r7, #8]
   8452a:	1acb      	subs	r3, r1, r3
   8452c:	441a      	add	r2, r3
   8452e:	683b      	ldr	r3, [r7, #0]
   84530:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   84532:	6878      	ldr	r0, [r7, #4]
   84534:	4b0a      	ldr	r3, [pc, #40]	; (84560 <xTaskCheckForTimeOut+0xa8>)
   84536:	4798      	blx	r3
			xReturn = pdFALSE;
   84538:	2300      	movs	r3, #0
   8453a:	60fb      	str	r3, [r7, #12]
   8453c:	e001      	b.n	84542 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   8453e:	2301      	movs	r3, #1
   84540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84542:	4b08      	ldr	r3, [pc, #32]	; (84564 <xTaskCheckForTimeOut+0xac>)
   84544:	4798      	blx	r3

	return xReturn;
   84546:	68fb      	ldr	r3, [r7, #12]
}
   84548:	4618      	mov	r0, r3
   8454a:	3710      	adds	r7, #16
   8454c:	46bd      	mov	sp, r7
   8454e:	bd80      	pop	{r7, pc}
   84550:	00082e4d 	.word	0x00082e4d
   84554:	00082dd1 	.word	0x00082dd1
   84558:	2007a64c 	.word	0x2007a64c
   8455c:	2007a660 	.word	0x2007a660
   84560:	00084481 	.word	0x00084481
   84564:	00082e15 	.word	0x00082e15

00084568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   84568:	b480      	push	{r7}
   8456a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   8456c:	4b03      	ldr	r3, [pc, #12]	; (8457c <vTaskMissedYield+0x14>)
   8456e:	2201      	movs	r2, #1
   84570:	601a      	str	r2, [r3, #0]
}
   84572:	46bd      	mov	sp, r7
   84574:	f85d 7b04 	ldr.w	r7, [sp], #4
   84578:	4770      	bx	lr
   8457a:	bf00      	nop
   8457c:	2007a65c 	.word	0x2007a65c

00084580 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   84580:	b580      	push	{r7, lr}
   84582:	b082      	sub	sp, #8
   84584:	af00      	add	r7, sp, #0
   84586:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84588:	4b04      	ldr	r3, [pc, #16]	; (8459c <prvIdleTask+0x1c>)
   8458a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   8458c:	4b04      	ldr	r3, [pc, #16]	; (845a0 <prvIdleTask+0x20>)
   8458e:	681b      	ldr	r3, [r3, #0]
   84590:	2b01      	cmp	r3, #1
   84592:	d901      	bls.n	84598 <prvIdleTask+0x18>
			{
				taskYIELD();
   84594:	4b03      	ldr	r3, [pc, #12]	; (845a4 <prvIdleTask+0x24>)
   84596:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   84598:	e7f6      	b.n	84588 <prvIdleTask+0x8>
   8459a:	bf00      	nop
   8459c:	000846c1 	.word	0x000846c1
   845a0:	2007a574 	.word	0x2007a574
   845a4:	00082db1 	.word	0x00082db1

000845a8 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   845a8:	b580      	push	{r7, lr}
   845aa:	b086      	sub	sp, #24
   845ac:	af00      	add	r7, sp, #0
   845ae:	60f8      	str	r0, [r7, #12]
   845b0:	60b9      	str	r1, [r7, #8]
   845b2:	607a      	str	r2, [r7, #4]
   845b4:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   845b6:	2300      	movs	r3, #0
   845b8:	617b      	str	r3, [r7, #20]
   845ba:	e012      	b.n	845e2 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   845bc:	68ba      	ldr	r2, [r7, #8]
   845be:	697b      	ldr	r3, [r7, #20]
   845c0:	4413      	add	r3, r2
   845c2:	781a      	ldrb	r2, [r3, #0]
   845c4:	68f9      	ldr	r1, [r7, #12]
   845c6:	697b      	ldr	r3, [r7, #20]
   845c8:	440b      	add	r3, r1
   845ca:	3330      	adds	r3, #48	; 0x30
   845cc:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   845ce:	68ba      	ldr	r2, [r7, #8]
   845d0:	697b      	ldr	r3, [r7, #20]
   845d2:	4413      	add	r3, r2
   845d4:	781b      	ldrb	r3, [r3, #0]
   845d6:	2b00      	cmp	r3, #0
   845d8:	d100      	bne.n	845dc <prvInitialiseTCBVariables+0x34>
		{
			break;
   845da:	e005      	b.n	845e8 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   845dc:	697b      	ldr	r3, [r7, #20]
   845de:	3301      	adds	r3, #1
   845e0:	617b      	str	r3, [r7, #20]
   845e2:	697b      	ldr	r3, [r7, #20]
   845e4:	2b09      	cmp	r3, #9
   845e6:	d9e9      	bls.n	845bc <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   845e8:	68fb      	ldr	r3, [r7, #12]
   845ea:	2200      	movs	r2, #0
   845ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   845f0:	687b      	ldr	r3, [r7, #4]
   845f2:	2b04      	cmp	r3, #4
   845f4:	d901      	bls.n	845fa <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   845f6:	2304      	movs	r3, #4
   845f8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   845fa:	68fb      	ldr	r3, [r7, #12]
   845fc:	687a      	ldr	r2, [r7, #4]
   845fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   84600:	68fb      	ldr	r3, [r7, #12]
   84602:	687a      	ldr	r2, [r7, #4]
   84604:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84606:	68fb      	ldr	r3, [r7, #12]
   84608:	2200      	movs	r2, #0
   8460a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8460c:	68fb      	ldr	r3, [r7, #12]
   8460e:	3304      	adds	r3, #4
   84610:	4618      	mov	r0, r3
   84612:	4b0a      	ldr	r3, [pc, #40]	; (8463c <prvInitialiseTCBVariables+0x94>)
   84614:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84616:	68fb      	ldr	r3, [r7, #12]
   84618:	3318      	adds	r3, #24
   8461a:	4618      	mov	r0, r3
   8461c:	4b07      	ldr	r3, [pc, #28]	; (8463c <prvInitialiseTCBVariables+0x94>)
   8461e:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   84620:	68fb      	ldr	r3, [r7, #12]
   84622:	68fa      	ldr	r2, [r7, #12]
   84624:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84626:	687b      	ldr	r3, [r7, #4]
   84628:	f1c3 0205 	rsb	r2, r3, #5
   8462c:	68fb      	ldr	r3, [r7, #12]
   8462e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   84630:	68fb      	ldr	r3, [r7, #12]
   84632:	68fa      	ldr	r2, [r7, #12]
   84634:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84636:	3718      	adds	r7, #24
   84638:	46bd      	mov	sp, r7
   8463a:	bd80      	pop	{r7, pc}
   8463c:	00082b05 	.word	0x00082b05

00084640 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   84640:	b580      	push	{r7, lr}
   84642:	b082      	sub	sp, #8
   84644:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84646:	2300      	movs	r3, #0
   84648:	607b      	str	r3, [r7, #4]
   8464a:	e00c      	b.n	84666 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   8464c:	687a      	ldr	r2, [r7, #4]
   8464e:	4613      	mov	r3, r2
   84650:	009b      	lsls	r3, r3, #2
   84652:	4413      	add	r3, r2
   84654:	009b      	lsls	r3, r3, #2
   84656:	4a11      	ldr	r2, [pc, #68]	; (8469c <prvInitialiseTaskLists+0x5c>)
   84658:	4413      	add	r3, r2
   8465a:	4618      	mov	r0, r3
   8465c:	4b10      	ldr	r3, [pc, #64]	; (846a0 <prvInitialiseTaskLists+0x60>)
   8465e:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84660:	687b      	ldr	r3, [r7, #4]
   84662:	3301      	adds	r3, #1
   84664:	607b      	str	r3, [r7, #4]
   84666:	687b      	ldr	r3, [r7, #4]
   84668:	2b04      	cmp	r3, #4
   8466a:	d9ef      	bls.n	8464c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   8466c:	480d      	ldr	r0, [pc, #52]	; (846a4 <prvInitialiseTaskLists+0x64>)
   8466e:	4b0c      	ldr	r3, [pc, #48]	; (846a0 <prvInitialiseTaskLists+0x60>)
   84670:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   84672:	480d      	ldr	r0, [pc, #52]	; (846a8 <prvInitialiseTaskLists+0x68>)
   84674:	4b0a      	ldr	r3, [pc, #40]	; (846a0 <prvInitialiseTaskLists+0x60>)
   84676:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84678:	480c      	ldr	r0, [pc, #48]	; (846ac <prvInitialiseTaskLists+0x6c>)
   8467a:	4b09      	ldr	r3, [pc, #36]	; (846a0 <prvInitialiseTaskLists+0x60>)
   8467c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8467e:	480c      	ldr	r0, [pc, #48]	; (846b0 <prvInitialiseTaskLists+0x70>)
   84680:	4b07      	ldr	r3, [pc, #28]	; (846a0 <prvInitialiseTaskLists+0x60>)
   84682:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84684:	480b      	ldr	r0, [pc, #44]	; (846b4 <prvInitialiseTaskLists+0x74>)
   84686:	4b06      	ldr	r3, [pc, #24]	; (846a0 <prvInitialiseTaskLists+0x60>)
   84688:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8468a:	4b0b      	ldr	r3, [pc, #44]	; (846b8 <prvInitialiseTaskLists+0x78>)
   8468c:	4a05      	ldr	r2, [pc, #20]	; (846a4 <prvInitialiseTaskLists+0x64>)
   8468e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   84690:	4b0a      	ldr	r3, [pc, #40]	; (846bc <prvInitialiseTaskLists+0x7c>)
   84692:	4a05      	ldr	r2, [pc, #20]	; (846a8 <prvInitialiseTaskLists+0x68>)
   84694:	601a      	str	r2, [r3, #0]
}
   84696:	3708      	adds	r7, #8
   84698:	46bd      	mov	sp, r7
   8469a:	bd80      	pop	{r7, pc}
   8469c:	2007a574 	.word	0x2007a574
   846a0:	00082ac5 	.word	0x00082ac5
   846a4:	2007a5d8 	.word	0x2007a5d8
   846a8:	2007a5ec 	.word	0x2007a5ec
   846ac:	2007a608 	.word	0x2007a608
   846b0:	2007a61c 	.word	0x2007a61c
   846b4:	2007a634 	.word	0x2007a634
   846b8:	2007a600 	.word	0x2007a600
   846bc:	2007a604 	.word	0x2007a604

000846c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   846c0:	b580      	push	{r7, lr}
   846c2:	b082      	sub	sp, #8
   846c4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   846c6:	e028      	b.n	8471a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   846c8:	4b17      	ldr	r3, [pc, #92]	; (84728 <prvCheckTasksWaitingTermination+0x68>)
   846ca:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   846cc:	4b17      	ldr	r3, [pc, #92]	; (8472c <prvCheckTasksWaitingTermination+0x6c>)
   846ce:	681b      	ldr	r3, [r3, #0]
   846d0:	2b00      	cmp	r3, #0
   846d2:	bf14      	ite	ne
   846d4:	2300      	movne	r3, #0
   846d6:	2301      	moveq	r3, #1
   846d8:	b2db      	uxtb	r3, r3
   846da:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   846dc:	4b14      	ldr	r3, [pc, #80]	; (84730 <prvCheckTasksWaitingTermination+0x70>)
   846de:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   846e0:	687b      	ldr	r3, [r7, #4]
   846e2:	2b00      	cmp	r3, #0
   846e4:	d119      	bne.n	8471a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   846e6:	4b13      	ldr	r3, [pc, #76]	; (84734 <prvCheckTasksWaitingTermination+0x74>)
   846e8:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   846ea:	4b10      	ldr	r3, [pc, #64]	; (8472c <prvCheckTasksWaitingTermination+0x6c>)
   846ec:	68db      	ldr	r3, [r3, #12]
   846ee:	68db      	ldr	r3, [r3, #12]
   846f0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   846f2:	683b      	ldr	r3, [r7, #0]
   846f4:	3304      	adds	r3, #4
   846f6:	4618      	mov	r0, r3
   846f8:	4b0f      	ldr	r3, [pc, #60]	; (84738 <prvCheckTasksWaitingTermination+0x78>)
   846fa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   846fc:	4b0f      	ldr	r3, [pc, #60]	; (8473c <prvCheckTasksWaitingTermination+0x7c>)
   846fe:	681b      	ldr	r3, [r3, #0]
   84700:	1e5a      	subs	r2, r3, #1
   84702:	4b0e      	ldr	r3, [pc, #56]	; (8473c <prvCheckTasksWaitingTermination+0x7c>)
   84704:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84706:	4b0e      	ldr	r3, [pc, #56]	; (84740 <prvCheckTasksWaitingTermination+0x80>)
   84708:	681b      	ldr	r3, [r3, #0]
   8470a:	1e5a      	subs	r2, r3, #1
   8470c:	4b0c      	ldr	r3, [pc, #48]	; (84740 <prvCheckTasksWaitingTermination+0x80>)
   8470e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   84710:	4b0c      	ldr	r3, [pc, #48]	; (84744 <prvCheckTasksWaitingTermination+0x84>)
   84712:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84714:	6838      	ldr	r0, [r7, #0]
   84716:	4b0c      	ldr	r3, [pc, #48]	; (84748 <prvCheckTasksWaitingTermination+0x88>)
   84718:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   8471a:	4b09      	ldr	r3, [pc, #36]	; (84740 <prvCheckTasksWaitingTermination+0x80>)
   8471c:	681b      	ldr	r3, [r3, #0]
   8471e:	2b00      	cmp	r3, #0
   84720:	d1d2      	bne.n	846c8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   84722:	3708      	adds	r7, #8
   84724:	46bd      	mov	sp, r7
   84726:	bd80      	pop	{r7, pc}
   84728:	00083ebd 	.word	0x00083ebd
   8472c:	2007a61c 	.word	0x2007a61c
   84730:	00083ed9 	.word	0x00083ed9
   84734:	00082dd1 	.word	0x00082dd1
   84738:	00082bd5 	.word	0x00082bd5
   8473c:	2007a648 	.word	0x2007a648
   84740:	2007a630 	.word	0x2007a630
   84744:	00082e15 	.word	0x00082e15
   84748:	0008482d 	.word	0x0008482d

0008474c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   8474c:	b580      	push	{r7, lr}
   8474e:	b082      	sub	sp, #8
   84750:	af00      	add	r7, sp, #0
   84752:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84754:	4b13      	ldr	r3, [pc, #76]	; (847a4 <prvAddCurrentTaskToDelayedList+0x58>)
   84756:	681b      	ldr	r3, [r3, #0]
   84758:	687a      	ldr	r2, [r7, #4]
   8475a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   8475c:	4b12      	ldr	r3, [pc, #72]	; (847a8 <prvAddCurrentTaskToDelayedList+0x5c>)
   8475e:	681b      	ldr	r3, [r3, #0]
   84760:	687a      	ldr	r2, [r7, #4]
   84762:	429a      	cmp	r2, r3
   84764:	d209      	bcs.n	8477a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84766:	4b11      	ldr	r3, [pc, #68]	; (847ac <prvAddCurrentTaskToDelayedList+0x60>)
   84768:	681a      	ldr	r2, [r3, #0]
   8476a:	4b0e      	ldr	r3, [pc, #56]	; (847a4 <prvAddCurrentTaskToDelayedList+0x58>)
   8476c:	681b      	ldr	r3, [r3, #0]
   8476e:	3304      	adds	r3, #4
   84770:	4610      	mov	r0, r2
   84772:	4619      	mov	r1, r3
   84774:	4b0e      	ldr	r3, [pc, #56]	; (847b0 <prvAddCurrentTaskToDelayedList+0x64>)
   84776:	4798      	blx	r3
   84778:	e010      	b.n	8479c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   8477a:	4b0e      	ldr	r3, [pc, #56]	; (847b4 <prvAddCurrentTaskToDelayedList+0x68>)
   8477c:	681a      	ldr	r2, [r3, #0]
   8477e:	4b09      	ldr	r3, [pc, #36]	; (847a4 <prvAddCurrentTaskToDelayedList+0x58>)
   84780:	681b      	ldr	r3, [r3, #0]
   84782:	3304      	adds	r3, #4
   84784:	4610      	mov	r0, r2
   84786:	4619      	mov	r1, r3
   84788:	4b09      	ldr	r3, [pc, #36]	; (847b0 <prvAddCurrentTaskToDelayedList+0x64>)
   8478a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8478c:	4b0a      	ldr	r3, [pc, #40]	; (847b8 <prvAddCurrentTaskToDelayedList+0x6c>)
   8478e:	681b      	ldr	r3, [r3, #0]
   84790:	687a      	ldr	r2, [r7, #4]
   84792:	429a      	cmp	r2, r3
   84794:	d202      	bcs.n	8479c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84796:	4b08      	ldr	r3, [pc, #32]	; (847b8 <prvAddCurrentTaskToDelayedList+0x6c>)
   84798:	687a      	ldr	r2, [r7, #4]
   8479a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   8479c:	3708      	adds	r7, #8
   8479e:	46bd      	mov	sp, r7
   847a0:	bd80      	pop	{r7, pc}
   847a2:	bf00      	nop
   847a4:	2007a570 	.word	0x2007a570
   847a8:	2007a64c 	.word	0x2007a64c
   847ac:	2007a604 	.word	0x2007a604
   847b0:	00082b65 	.word	0x00082b65
   847b4:	2007a600 	.word	0x2007a600
   847b8:	2007000c 	.word	0x2007000c

000847bc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   847bc:	b580      	push	{r7, lr}
   847be:	b084      	sub	sp, #16
   847c0:	af00      	add	r7, sp, #0
   847c2:	4603      	mov	r3, r0
   847c4:	6039      	str	r1, [r7, #0]
   847c6:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   847c8:	2048      	movs	r0, #72	; 0x48
   847ca:	4b15      	ldr	r3, [pc, #84]	; (84820 <prvAllocateTCBAndStack+0x64>)
   847cc:	4798      	blx	r3
   847ce:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   847d0:	68fb      	ldr	r3, [r7, #12]
   847d2:	2b00      	cmp	r3, #0
   847d4:	d01f      	beq.n	84816 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   847d6:	683b      	ldr	r3, [r7, #0]
   847d8:	2b00      	cmp	r3, #0
   847da:	d106      	bne.n	847ea <prvAllocateTCBAndStack+0x2e>
   847dc:	88fb      	ldrh	r3, [r7, #6]
   847de:	009b      	lsls	r3, r3, #2
   847e0:	4618      	mov	r0, r3
   847e2:	4b0f      	ldr	r3, [pc, #60]	; (84820 <prvAllocateTCBAndStack+0x64>)
   847e4:	4798      	blx	r3
   847e6:	4603      	mov	r3, r0
   847e8:	e000      	b.n	847ec <prvAllocateTCBAndStack+0x30>
   847ea:	683b      	ldr	r3, [r7, #0]
   847ec:	68fa      	ldr	r2, [r7, #12]
   847ee:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   847f0:	68fb      	ldr	r3, [r7, #12]
   847f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   847f4:	2b00      	cmp	r3, #0
   847f6:	d105      	bne.n	84804 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   847f8:	68f8      	ldr	r0, [r7, #12]
   847fa:	4b0a      	ldr	r3, [pc, #40]	; (84824 <prvAllocateTCBAndStack+0x68>)
   847fc:	4798      	blx	r3
			pxNewTCB = NULL;
   847fe:	2300      	movs	r3, #0
   84800:	60fb      	str	r3, [r7, #12]
   84802:	e008      	b.n	84816 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84804:	68fb      	ldr	r3, [r7, #12]
   84806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84808:	88fb      	ldrh	r3, [r7, #6]
   8480a:	009b      	lsls	r3, r3, #2
   8480c:	4610      	mov	r0, r2
   8480e:	21a5      	movs	r1, #165	; 0xa5
   84810:	461a      	mov	r2, r3
   84812:	4b05      	ldr	r3, [pc, #20]	; (84828 <prvAllocateTCBAndStack+0x6c>)
   84814:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84816:	68fb      	ldr	r3, [r7, #12]
}
   84818:	4618      	mov	r0, r3
   8481a:	3710      	adds	r7, #16
   8481c:	46bd      	mov	sp, r7
   8481e:	bd80      	pop	{r7, pc}
   84820:	00082f71 	.word	0x00082f71
   84824:	000830e9 	.word	0x000830e9
   84828:	000865d1 	.word	0x000865d1

0008482c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   8482c:	b580      	push	{r7, lr}
   8482e:	b082      	sub	sp, #8
   84830:	af00      	add	r7, sp, #0
   84832:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84834:	687b      	ldr	r3, [r7, #4]
   84836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84838:	4618      	mov	r0, r3
   8483a:	4b04      	ldr	r3, [pc, #16]	; (8484c <prvDeleteTCB+0x20>)
   8483c:	4798      	blx	r3
		vPortFree( pxTCB );
   8483e:	6878      	ldr	r0, [r7, #4]
   84840:	4b02      	ldr	r3, [pc, #8]	; (8484c <prvDeleteTCB+0x20>)
   84842:	4798      	blx	r3
	}
   84844:	3708      	adds	r7, #8
   84846:	46bd      	mov	sp, r7
   84848:	bd80      	pop	{r7, pc}
   8484a:	bf00      	nop
   8484c:	000830e9 	.word	0x000830e9

00084850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   84850:	b480      	push	{r7}
   84852:	b083      	sub	sp, #12
   84854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84856:	4b0e      	ldr	r3, [pc, #56]	; (84890 <prvResetNextTaskUnblockTime+0x40>)
   84858:	681b      	ldr	r3, [r3, #0]
   8485a:	681b      	ldr	r3, [r3, #0]
   8485c:	2b00      	cmp	r3, #0
   8485e:	d101      	bne.n	84864 <prvResetNextTaskUnblockTime+0x14>
   84860:	2301      	movs	r3, #1
   84862:	e000      	b.n	84866 <prvResetNextTaskUnblockTime+0x16>
   84864:	2300      	movs	r3, #0
   84866:	2b00      	cmp	r3, #0
   84868:	d004      	beq.n	84874 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   8486a:	4b0a      	ldr	r3, [pc, #40]	; (84894 <prvResetNextTaskUnblockTime+0x44>)
   8486c:	f04f 32ff 	mov.w	r2, #4294967295
   84870:	601a      	str	r2, [r3, #0]
   84872:	e008      	b.n	84886 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84874:	4b06      	ldr	r3, [pc, #24]	; (84890 <prvResetNextTaskUnblockTime+0x40>)
   84876:	681b      	ldr	r3, [r3, #0]
   84878:	68db      	ldr	r3, [r3, #12]
   8487a:	68db      	ldr	r3, [r3, #12]
   8487c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8487e:	687b      	ldr	r3, [r7, #4]
   84880:	685a      	ldr	r2, [r3, #4]
   84882:	4b04      	ldr	r3, [pc, #16]	; (84894 <prvResetNextTaskUnblockTime+0x44>)
   84884:	601a      	str	r2, [r3, #0]
	}
}
   84886:	370c      	adds	r7, #12
   84888:	46bd      	mov	sp, r7
   8488a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8488e:	4770      	bx	lr
   84890:	2007a600 	.word	0x2007a600
   84894:	2007000c 	.word	0x2007000c

00084898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84898:	b480      	push	{r7}
   8489a:	b083      	sub	sp, #12
   8489c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8489e:	4b0b      	ldr	r3, [pc, #44]	; (848cc <xTaskGetSchedulerState+0x34>)
   848a0:	681b      	ldr	r3, [r3, #0]
   848a2:	2b00      	cmp	r3, #0
   848a4:	d102      	bne.n	848ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   848a6:	2301      	movs	r3, #1
   848a8:	607b      	str	r3, [r7, #4]
   848aa:	e008      	b.n	848be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   848ac:	4b08      	ldr	r3, [pc, #32]	; (848d0 <xTaskGetSchedulerState+0x38>)
   848ae:	681b      	ldr	r3, [r3, #0]
   848b0:	2b00      	cmp	r3, #0
   848b2:	d102      	bne.n	848ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   848b4:	2302      	movs	r3, #2
   848b6:	607b      	str	r3, [r7, #4]
   848b8:	e001      	b.n	848be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   848ba:	2300      	movs	r3, #0
   848bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   848be:	687b      	ldr	r3, [r7, #4]
	}
   848c0:	4618      	mov	r0, r3
   848c2:	370c      	adds	r7, #12
   848c4:	46bd      	mov	sp, r7
   848c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   848ca:	4770      	bx	lr
   848cc:	2007a654 	.word	0x2007a654
   848d0:	2007a668 	.word	0x2007a668

000848d4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   848d4:	b580      	push	{r7, lr}
   848d6:	b084      	sub	sp, #16
   848d8:	af00      	add	r7, sp, #0
   848da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   848dc:	687b      	ldr	r3, [r7, #4]
   848de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   848e0:	687b      	ldr	r3, [r7, #4]
   848e2:	2b00      	cmp	r3, #0
   848e4:	d062      	beq.n	849ac <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   848e6:	68fb      	ldr	r3, [r7, #12]
   848e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   848ea:	4b32      	ldr	r3, [pc, #200]	; (849b4 <vTaskPriorityInherit+0xe0>)
   848ec:	681b      	ldr	r3, [r3, #0]
   848ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   848f0:	429a      	cmp	r2, r3
   848f2:	d25b      	bcs.n	849ac <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   848f4:	68fb      	ldr	r3, [r7, #12]
   848f6:	699b      	ldr	r3, [r3, #24]
   848f8:	2b00      	cmp	r3, #0
   848fa:	db06      	blt.n	8490a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   848fc:	4b2d      	ldr	r3, [pc, #180]	; (849b4 <vTaskPriorityInherit+0xe0>)
   848fe:	681b      	ldr	r3, [r3, #0]
   84900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84902:	f1c3 0205 	rsb	r2, r3, #5
   84906:	68fb      	ldr	r3, [r7, #12]
   84908:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8490a:	68fb      	ldr	r3, [r7, #12]
   8490c:	6959      	ldr	r1, [r3, #20]
   8490e:	68fb      	ldr	r3, [r7, #12]
   84910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84912:	4613      	mov	r3, r2
   84914:	009b      	lsls	r3, r3, #2
   84916:	4413      	add	r3, r2
   84918:	009b      	lsls	r3, r3, #2
   8491a:	4a27      	ldr	r2, [pc, #156]	; (849b8 <vTaskPriorityInherit+0xe4>)
   8491c:	4413      	add	r3, r2
   8491e:	4299      	cmp	r1, r3
   84920:	d101      	bne.n	84926 <vTaskPriorityInherit+0x52>
   84922:	2301      	movs	r3, #1
   84924:	e000      	b.n	84928 <vTaskPriorityInherit+0x54>
   84926:	2300      	movs	r3, #0
   84928:	2b00      	cmp	r3, #0
   8492a:	d03a      	beq.n	849a2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8492c:	68fb      	ldr	r3, [r7, #12]
   8492e:	3304      	adds	r3, #4
   84930:	4618      	mov	r0, r3
   84932:	4b22      	ldr	r3, [pc, #136]	; (849bc <vTaskPriorityInherit+0xe8>)
   84934:	4798      	blx	r3
   84936:	4603      	mov	r3, r0
   84938:	2b00      	cmp	r3, #0
   8493a:	d115      	bne.n	84968 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8493c:	68fb      	ldr	r3, [r7, #12]
   8493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84940:	491d      	ldr	r1, [pc, #116]	; (849b8 <vTaskPriorityInherit+0xe4>)
   84942:	4613      	mov	r3, r2
   84944:	009b      	lsls	r3, r3, #2
   84946:	4413      	add	r3, r2
   84948:	009b      	lsls	r3, r3, #2
   8494a:	440b      	add	r3, r1
   8494c:	681b      	ldr	r3, [r3, #0]
   8494e:	2b00      	cmp	r3, #0
   84950:	d10a      	bne.n	84968 <vTaskPriorityInherit+0x94>
   84952:	68fb      	ldr	r3, [r7, #12]
   84954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84956:	2201      	movs	r2, #1
   84958:	fa02 f303 	lsl.w	r3, r2, r3
   8495c:	43da      	mvns	r2, r3
   8495e:	4b18      	ldr	r3, [pc, #96]	; (849c0 <vTaskPriorityInherit+0xec>)
   84960:	681b      	ldr	r3, [r3, #0]
   84962:	401a      	ands	r2, r3
   84964:	4b16      	ldr	r3, [pc, #88]	; (849c0 <vTaskPriorityInherit+0xec>)
   84966:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84968:	4b12      	ldr	r3, [pc, #72]	; (849b4 <vTaskPriorityInherit+0xe0>)
   8496a:	681b      	ldr	r3, [r3, #0]
   8496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8496e:	68fb      	ldr	r3, [r7, #12]
   84970:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   84972:	68fb      	ldr	r3, [r7, #12]
   84974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84976:	2201      	movs	r2, #1
   84978:	409a      	lsls	r2, r3
   8497a:	4b11      	ldr	r3, [pc, #68]	; (849c0 <vTaskPriorityInherit+0xec>)
   8497c:	681b      	ldr	r3, [r3, #0]
   8497e:	431a      	orrs	r2, r3
   84980:	4b0f      	ldr	r3, [pc, #60]	; (849c0 <vTaskPriorityInherit+0xec>)
   84982:	601a      	str	r2, [r3, #0]
   84984:	68fb      	ldr	r3, [r7, #12]
   84986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84988:	4613      	mov	r3, r2
   8498a:	009b      	lsls	r3, r3, #2
   8498c:	4413      	add	r3, r2
   8498e:	009b      	lsls	r3, r3, #2
   84990:	4a09      	ldr	r2, [pc, #36]	; (849b8 <vTaskPriorityInherit+0xe4>)
   84992:	441a      	add	r2, r3
   84994:	68fb      	ldr	r3, [r7, #12]
   84996:	3304      	adds	r3, #4
   84998:	4610      	mov	r0, r2
   8499a:	4619      	mov	r1, r3
   8499c:	4b09      	ldr	r3, [pc, #36]	; (849c4 <vTaskPriorityInherit+0xf0>)
   8499e:	4798      	blx	r3
   849a0:	e004      	b.n	849ac <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   849a2:	4b04      	ldr	r3, [pc, #16]	; (849b4 <vTaskPriorityInherit+0xe0>)
   849a4:	681b      	ldr	r3, [r3, #0]
   849a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849a8:	68fb      	ldr	r3, [r7, #12]
   849aa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   849ac:	3710      	adds	r7, #16
   849ae:	46bd      	mov	sp, r7
   849b0:	bd80      	pop	{r7, pc}
   849b2:	bf00      	nop
   849b4:	2007a570 	.word	0x2007a570
   849b8:	2007a574 	.word	0x2007a574
   849bc:	00082bd5 	.word	0x00082bd5
   849c0:	2007a650 	.word	0x2007a650
   849c4:	00082b1d 	.word	0x00082b1d

000849c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   849c8:	b580      	push	{r7, lr}
   849ca:	b084      	sub	sp, #16
   849cc:	af00      	add	r7, sp, #0
   849ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   849d0:	687b      	ldr	r3, [r7, #4]
   849d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   849d4:	2300      	movs	r3, #0
   849d6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   849d8:	687b      	ldr	r3, [r7, #4]
   849da:	2b00      	cmp	r3, #0
   849dc:	d056      	beq.n	84a8c <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   849de:	68bb      	ldr	r3, [r7, #8]
   849e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   849e2:	2b00      	cmp	r3, #0
   849e4:	d102      	bne.n	849ec <xTaskPriorityDisinherit+0x24>
   849e6:	4b2c      	ldr	r3, [pc, #176]	; (84a98 <xTaskPriorityDisinherit+0xd0>)
   849e8:	4798      	blx	r3
   849ea:	e7fe      	b.n	849ea <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   849ec:	68bb      	ldr	r3, [r7, #8]
   849ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   849f0:	1e5a      	subs	r2, r3, #1
   849f2:	68bb      	ldr	r3, [r7, #8]
   849f4:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   849f6:	68bb      	ldr	r3, [r7, #8]
   849f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849fa:	68bb      	ldr	r3, [r7, #8]
   849fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   849fe:	429a      	cmp	r2, r3
   84a00:	d044      	beq.n	84a8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84a02:	68bb      	ldr	r3, [r7, #8]
   84a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84a06:	2b00      	cmp	r3, #0
   84a08:	d140      	bne.n	84a8c <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84a0a:	68bb      	ldr	r3, [r7, #8]
   84a0c:	3304      	adds	r3, #4
   84a0e:	4618      	mov	r0, r3
   84a10:	4b22      	ldr	r3, [pc, #136]	; (84a9c <xTaskPriorityDisinherit+0xd4>)
   84a12:	4798      	blx	r3
   84a14:	4603      	mov	r3, r0
   84a16:	2b00      	cmp	r3, #0
   84a18:	d115      	bne.n	84a46 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84a1a:	68bb      	ldr	r3, [r7, #8]
   84a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a1e:	4920      	ldr	r1, [pc, #128]	; (84aa0 <xTaskPriorityDisinherit+0xd8>)
   84a20:	4613      	mov	r3, r2
   84a22:	009b      	lsls	r3, r3, #2
   84a24:	4413      	add	r3, r2
   84a26:	009b      	lsls	r3, r3, #2
   84a28:	440b      	add	r3, r1
   84a2a:	681b      	ldr	r3, [r3, #0]
   84a2c:	2b00      	cmp	r3, #0
   84a2e:	d10a      	bne.n	84a46 <xTaskPriorityDisinherit+0x7e>
   84a30:	68bb      	ldr	r3, [r7, #8]
   84a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a34:	2201      	movs	r2, #1
   84a36:	fa02 f303 	lsl.w	r3, r2, r3
   84a3a:	43da      	mvns	r2, r3
   84a3c:	4b19      	ldr	r3, [pc, #100]	; (84aa4 <xTaskPriorityDisinherit+0xdc>)
   84a3e:	681b      	ldr	r3, [r3, #0]
   84a40:	401a      	ands	r2, r3
   84a42:	4b18      	ldr	r3, [pc, #96]	; (84aa4 <xTaskPriorityDisinherit+0xdc>)
   84a44:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84a46:	68bb      	ldr	r3, [r7, #8]
   84a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84a4a:	68bb      	ldr	r3, [r7, #8]
   84a4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84a4e:	68bb      	ldr	r3, [r7, #8]
   84a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a52:	f1c3 0205 	rsb	r2, r3, #5
   84a56:	68bb      	ldr	r3, [r7, #8]
   84a58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84a5a:	68bb      	ldr	r3, [r7, #8]
   84a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a5e:	2201      	movs	r2, #1
   84a60:	409a      	lsls	r2, r3
   84a62:	4b10      	ldr	r3, [pc, #64]	; (84aa4 <xTaskPriorityDisinherit+0xdc>)
   84a64:	681b      	ldr	r3, [r3, #0]
   84a66:	431a      	orrs	r2, r3
   84a68:	4b0e      	ldr	r3, [pc, #56]	; (84aa4 <xTaskPriorityDisinherit+0xdc>)
   84a6a:	601a      	str	r2, [r3, #0]
   84a6c:	68bb      	ldr	r3, [r7, #8]
   84a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a70:	4613      	mov	r3, r2
   84a72:	009b      	lsls	r3, r3, #2
   84a74:	4413      	add	r3, r2
   84a76:	009b      	lsls	r3, r3, #2
   84a78:	4a09      	ldr	r2, [pc, #36]	; (84aa0 <xTaskPriorityDisinherit+0xd8>)
   84a7a:	441a      	add	r2, r3
   84a7c:	68bb      	ldr	r3, [r7, #8]
   84a7e:	3304      	adds	r3, #4
   84a80:	4610      	mov	r0, r2
   84a82:	4619      	mov	r1, r3
   84a84:	4b08      	ldr	r3, [pc, #32]	; (84aa8 <xTaskPriorityDisinherit+0xe0>)
   84a86:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84a88:	2301      	movs	r3, #1
   84a8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84a8c:	68fb      	ldr	r3, [r7, #12]
	}
   84a8e:	4618      	mov	r0, r3
   84a90:	3710      	adds	r7, #16
   84a92:	46bd      	mov	sp, r7
   84a94:	bd80      	pop	{r7, pc}
   84a96:	bf00      	nop
   84a98:	00082e4d 	.word	0x00082e4d
   84a9c:	00082bd5 	.word	0x00082bd5
   84aa0:	2007a574 	.word	0x2007a574
   84aa4:	2007a650 	.word	0x2007a650
   84aa8:	00082b1d 	.word	0x00082b1d

00084aac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84aac:	b480      	push	{r7}
   84aae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84ab0:	4b07      	ldr	r3, [pc, #28]	; (84ad0 <pvTaskIncrementMutexHeldCount+0x24>)
   84ab2:	681b      	ldr	r3, [r3, #0]
   84ab4:	2b00      	cmp	r3, #0
   84ab6:	d004      	beq.n	84ac2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84ab8:	4b05      	ldr	r3, [pc, #20]	; (84ad0 <pvTaskIncrementMutexHeldCount+0x24>)
   84aba:	681b      	ldr	r3, [r3, #0]
   84abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   84abe:	3201      	adds	r2, #1
   84ac0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84ac2:	4b03      	ldr	r3, [pc, #12]	; (84ad0 <pvTaskIncrementMutexHeldCount+0x24>)
   84ac4:	681b      	ldr	r3, [r3, #0]
	}
   84ac6:	4618      	mov	r0, r3
   84ac8:	46bd      	mov	sp, r7
   84aca:	f85d 7b04 	ldr.w	r7, [sp], #4
   84ace:	4770      	bx	lr
   84ad0:	2007a570 	.word	0x2007a570

00084ad4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84ad4:	b590      	push	{r4, r7, lr}
   84ad6:	b087      	sub	sp, #28
   84ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   84ada:	2300      	movs	r3, #0
   84adc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   84ade:	4b10      	ldr	r3, [pc, #64]	; (84b20 <xTimerCreateTimerTask+0x4c>)
   84ae0:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84ae2:	4b10      	ldr	r3, [pc, #64]	; (84b24 <xTimerCreateTimerTask+0x50>)
   84ae4:	681b      	ldr	r3, [r3, #0]
   84ae6:	2b00      	cmp	r3, #0
   84ae8:	d00f      	beq.n	84b0a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   84aea:	2302      	movs	r3, #2
   84aec:	9300      	str	r3, [sp, #0]
   84aee:	2300      	movs	r3, #0
   84af0:	9301      	str	r3, [sp, #4]
   84af2:	2300      	movs	r3, #0
   84af4:	9302      	str	r3, [sp, #8]
   84af6:	2300      	movs	r3, #0
   84af8:	9303      	str	r3, [sp, #12]
   84afa:	480b      	ldr	r0, [pc, #44]	; (84b28 <xTimerCreateTimerTask+0x54>)
   84afc:	490b      	ldr	r1, [pc, #44]	; (84b2c <xTimerCreateTimerTask+0x58>)
   84afe:	f44f 7282 	mov.w	r2, #260	; 0x104
   84b02:	2300      	movs	r3, #0
   84b04:	4c0a      	ldr	r4, [pc, #40]	; (84b30 <xTimerCreateTimerTask+0x5c>)
   84b06:	47a0      	blx	r4
   84b08:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   84b0a:	687b      	ldr	r3, [r7, #4]
   84b0c:	2b00      	cmp	r3, #0
   84b0e:	d102      	bne.n	84b16 <xTimerCreateTimerTask+0x42>
   84b10:	4b08      	ldr	r3, [pc, #32]	; (84b34 <xTimerCreateTimerTask+0x60>)
   84b12:	4798      	blx	r3
   84b14:	e7fe      	b.n	84b14 <xTimerCreateTimerTask+0x40>
	return xReturn;
   84b16:	687b      	ldr	r3, [r7, #4]
}
   84b18:	4618      	mov	r0, r3
   84b1a:	370c      	adds	r7, #12
   84b1c:	46bd      	mov	sp, r7
   84b1e:	bd90      	pop	{r4, r7, pc}
   84b20:	00085009 	.word	0x00085009
   84b24:	2007a69c 	.word	0x2007a69c
   84b28:	00084c51 	.word	0x00084c51
   84b2c:	000868d8 	.word	0x000868d8
   84b30:	00083bc1 	.word	0x00083bc1
   84b34:	00082e4d 	.word	0x00082e4d

00084b38 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   84b38:	b590      	push	{r4, r7, lr}
   84b3a:	b089      	sub	sp, #36	; 0x24
   84b3c:	af00      	add	r7, sp, #0
   84b3e:	60f8      	str	r0, [r7, #12]
   84b40:	60b9      	str	r1, [r7, #8]
   84b42:	607a      	str	r2, [r7, #4]
   84b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   84b46:	2300      	movs	r3, #0
   84b48:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   84b4a:	4b1d      	ldr	r3, [pc, #116]	; (84bc0 <xTimerGenericCommand+0x88>)
   84b4c:	681b      	ldr	r3, [r3, #0]
   84b4e:	2b00      	cmp	r3, #0
   84b50:	d030      	beq.n	84bb4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   84b52:	68bb      	ldr	r3, [r7, #8]
   84b54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   84b56:	687b      	ldr	r3, [r7, #4]
   84b58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   84b5a:	68fb      	ldr	r3, [r7, #12]
   84b5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   84b5e:	68bb      	ldr	r3, [r7, #8]
   84b60:	2b05      	cmp	r3, #5
   84b62:	dc1c      	bgt.n	84b9e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   84b64:	4b17      	ldr	r3, [pc, #92]	; (84bc4 <xTimerGenericCommand+0x8c>)
   84b66:	4798      	blx	r3
   84b68:	4603      	mov	r3, r0
   84b6a:	2b02      	cmp	r3, #2
   84b6c:	d10b      	bne.n	84b86 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   84b6e:	4b14      	ldr	r3, [pc, #80]	; (84bc0 <xTimerGenericCommand+0x88>)
   84b70:	681a      	ldr	r2, [r3, #0]
   84b72:	f107 0310 	add.w	r3, r7, #16
   84b76:	4610      	mov	r0, r2
   84b78:	4619      	mov	r1, r3
   84b7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84b7c:	2300      	movs	r3, #0
   84b7e:	4c12      	ldr	r4, [pc, #72]	; (84bc8 <xTimerGenericCommand+0x90>)
   84b80:	47a0      	blx	r4
   84b82:	61f8      	str	r0, [r7, #28]
   84b84:	e016      	b.n	84bb4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84b86:	4b0e      	ldr	r3, [pc, #56]	; (84bc0 <xTimerGenericCommand+0x88>)
   84b88:	681a      	ldr	r2, [r3, #0]
   84b8a:	f107 0310 	add.w	r3, r7, #16
   84b8e:	4610      	mov	r0, r2
   84b90:	4619      	mov	r1, r3
   84b92:	2200      	movs	r2, #0
   84b94:	2300      	movs	r3, #0
   84b96:	4c0c      	ldr	r4, [pc, #48]	; (84bc8 <xTimerGenericCommand+0x90>)
   84b98:	47a0      	blx	r4
   84b9a:	61f8      	str	r0, [r7, #28]
   84b9c:	e00a      	b.n	84bb4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   84b9e:	4b08      	ldr	r3, [pc, #32]	; (84bc0 <xTimerGenericCommand+0x88>)
   84ba0:	681a      	ldr	r2, [r3, #0]
   84ba2:	f107 0310 	add.w	r3, r7, #16
   84ba6:	4610      	mov	r0, r2
   84ba8:	4619      	mov	r1, r3
   84baa:	683a      	ldr	r2, [r7, #0]
   84bac:	2300      	movs	r3, #0
   84bae:	4c07      	ldr	r4, [pc, #28]	; (84bcc <xTimerGenericCommand+0x94>)
   84bb0:	47a0      	blx	r4
   84bb2:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84bb4:	69fb      	ldr	r3, [r7, #28]
}
   84bb6:	4618      	mov	r0, r3
   84bb8:	3724      	adds	r7, #36	; 0x24
   84bba:	46bd      	mov	sp, r7
   84bbc:	bd90      	pop	{r4, r7, pc}
   84bbe:	bf00      	nop
   84bc0:	2007a69c 	.word	0x2007a69c
   84bc4:	00084899 	.word	0x00084899
   84bc8:	00083455 	.word	0x00083455
   84bcc:	00083619 	.word	0x00083619

00084bd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   84bd0:	b590      	push	{r4, r7, lr}
   84bd2:	b087      	sub	sp, #28
   84bd4:	af02      	add	r7, sp, #8
   84bd6:	6078      	str	r0, [r7, #4]
   84bd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84bda:	4b18      	ldr	r3, [pc, #96]	; (84c3c <prvProcessExpiredTimer+0x6c>)
   84bdc:	681b      	ldr	r3, [r3, #0]
   84bde:	68db      	ldr	r3, [r3, #12]
   84be0:	68db      	ldr	r3, [r3, #12]
   84be2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84be4:	68fb      	ldr	r3, [r7, #12]
   84be6:	3304      	adds	r3, #4
   84be8:	4618      	mov	r0, r3
   84bea:	4b15      	ldr	r3, [pc, #84]	; (84c40 <prvProcessExpiredTimer+0x70>)
   84bec:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84bee:	68fb      	ldr	r3, [r7, #12]
   84bf0:	69db      	ldr	r3, [r3, #28]
   84bf2:	2b01      	cmp	r3, #1
   84bf4:	d11b      	bne.n	84c2e <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   84bf6:	68fb      	ldr	r3, [r7, #12]
   84bf8:	699a      	ldr	r2, [r3, #24]
   84bfa:	687b      	ldr	r3, [r7, #4]
   84bfc:	4413      	add	r3, r2
   84bfe:	68f8      	ldr	r0, [r7, #12]
   84c00:	4619      	mov	r1, r3
   84c02:	683a      	ldr	r2, [r7, #0]
   84c04:	687b      	ldr	r3, [r7, #4]
   84c06:	4c0f      	ldr	r4, [pc, #60]	; (84c44 <prvProcessExpiredTimer+0x74>)
   84c08:	47a0      	blx	r4
   84c0a:	4603      	mov	r3, r0
   84c0c:	2b01      	cmp	r3, #1
   84c0e:	d10e      	bne.n	84c2e <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84c10:	2300      	movs	r3, #0
   84c12:	9300      	str	r3, [sp, #0]
   84c14:	68f8      	ldr	r0, [r7, #12]
   84c16:	2100      	movs	r1, #0
   84c18:	687a      	ldr	r2, [r7, #4]
   84c1a:	2300      	movs	r3, #0
   84c1c:	4c0a      	ldr	r4, [pc, #40]	; (84c48 <prvProcessExpiredTimer+0x78>)
   84c1e:	47a0      	blx	r4
   84c20:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   84c22:	68bb      	ldr	r3, [r7, #8]
   84c24:	2b00      	cmp	r3, #0
   84c26:	d102      	bne.n	84c2e <prvProcessExpiredTimer+0x5e>
   84c28:	4b08      	ldr	r3, [pc, #32]	; (84c4c <prvProcessExpiredTimer+0x7c>)
   84c2a:	4798      	blx	r3
   84c2c:	e7fe      	b.n	84c2c <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84c2e:	68fb      	ldr	r3, [r7, #12]
   84c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84c32:	68f8      	ldr	r0, [r7, #12]
   84c34:	4798      	blx	r3
}
   84c36:	3714      	adds	r7, #20
   84c38:	46bd      	mov	sp, r7
   84c3a:	bd90      	pop	{r4, r7, pc}
   84c3c:	2007a694 	.word	0x2007a694
   84c40:	00082bd5 	.word	0x00082bd5
   84c44:	00084d95 	.word	0x00084d95
   84c48:	00084b39 	.word	0x00084b39
   84c4c:	00082e4d 	.word	0x00082e4d

00084c50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   84c50:	b580      	push	{r7, lr}
   84c52:	b084      	sub	sp, #16
   84c54:	af00      	add	r7, sp, #0
   84c56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   84c58:	f107 0308 	add.w	r3, r7, #8
   84c5c:	4618      	mov	r0, r3
   84c5e:	4b05      	ldr	r3, [pc, #20]	; (84c74 <prvTimerTask+0x24>)
   84c60:	4798      	blx	r3
   84c62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   84c64:	68bb      	ldr	r3, [r7, #8]
   84c66:	68f8      	ldr	r0, [r7, #12]
   84c68:	4619      	mov	r1, r3
   84c6a:	4b03      	ldr	r3, [pc, #12]	; (84c78 <prvTimerTask+0x28>)
   84c6c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   84c6e:	4b03      	ldr	r3, [pc, #12]	; (84c7c <prvTimerTask+0x2c>)
   84c70:	4798      	blx	r3
	}
   84c72:	e7f1      	b.n	84c58 <prvTimerTask+0x8>
   84c74:	00084d05 	.word	0x00084d05
   84c78:	00084c81 	.word	0x00084c81
   84c7c:	00084e1d 	.word	0x00084e1d

00084c80 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   84c80:	b580      	push	{r7, lr}
   84c82:	b084      	sub	sp, #16
   84c84:	af00      	add	r7, sp, #0
   84c86:	6078      	str	r0, [r7, #4]
   84c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   84c8a:	4b17      	ldr	r3, [pc, #92]	; (84ce8 <prvProcessTimerOrBlockTask+0x68>)
   84c8c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84c8e:	f107 0308 	add.w	r3, r7, #8
   84c92:	4618      	mov	r0, r3
   84c94:	4b15      	ldr	r3, [pc, #84]	; (84cec <prvProcessTimerOrBlockTask+0x6c>)
   84c96:	4798      	blx	r3
   84c98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   84c9a:	68bb      	ldr	r3, [r7, #8]
   84c9c:	2b00      	cmp	r3, #0
   84c9e:	d11e      	bne.n	84cde <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   84ca0:	683b      	ldr	r3, [r7, #0]
   84ca2:	2b00      	cmp	r3, #0
   84ca4:	d10a      	bne.n	84cbc <prvProcessTimerOrBlockTask+0x3c>
   84ca6:	687a      	ldr	r2, [r7, #4]
   84ca8:	68fb      	ldr	r3, [r7, #12]
   84caa:	429a      	cmp	r2, r3
   84cac:	d806      	bhi.n	84cbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   84cae:	4b10      	ldr	r3, [pc, #64]	; (84cf0 <prvProcessTimerOrBlockTask+0x70>)
   84cb0:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   84cb2:	6878      	ldr	r0, [r7, #4]
   84cb4:	68f9      	ldr	r1, [r7, #12]
   84cb6:	4b0f      	ldr	r3, [pc, #60]	; (84cf4 <prvProcessTimerOrBlockTask+0x74>)
   84cb8:	4798      	blx	r3
   84cba:	e012      	b.n	84ce2 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   84cbc:	4b0e      	ldr	r3, [pc, #56]	; (84cf8 <prvProcessTimerOrBlockTask+0x78>)
   84cbe:	681a      	ldr	r2, [r3, #0]
   84cc0:	6879      	ldr	r1, [r7, #4]
   84cc2:	68fb      	ldr	r3, [r7, #12]
   84cc4:	1acb      	subs	r3, r1, r3
   84cc6:	4610      	mov	r0, r2
   84cc8:	4619      	mov	r1, r3
   84cca:	4b0c      	ldr	r3, [pc, #48]	; (84cfc <prvProcessTimerOrBlockTask+0x7c>)
   84ccc:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   84cce:	4b08      	ldr	r3, [pc, #32]	; (84cf0 <prvProcessTimerOrBlockTask+0x70>)
   84cd0:	4798      	blx	r3
   84cd2:	4603      	mov	r3, r0
   84cd4:	2b00      	cmp	r3, #0
   84cd6:	d104      	bne.n	84ce2 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   84cd8:	4b09      	ldr	r3, [pc, #36]	; (84d00 <prvProcessTimerOrBlockTask+0x80>)
   84cda:	4798      	blx	r3
   84cdc:	e001      	b.n	84ce2 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   84cde:	4b04      	ldr	r3, [pc, #16]	; (84cf0 <prvProcessTimerOrBlockTask+0x70>)
   84ce0:	4798      	blx	r3
		}
	}
}
   84ce2:	3710      	adds	r7, #16
   84ce4:	46bd      	mov	sp, r7
   84ce6:	bd80      	pop	{r7, pc}
   84ce8:	00083ebd 	.word	0x00083ebd
   84cec:	00084d4d 	.word	0x00084d4d
   84cf0:	00083ed9 	.word	0x00083ed9
   84cf4:	00084bd1 	.word	0x00084bd1
   84cf8:	2007a69c 	.word	0x2007a69c
   84cfc:	00083b59 	.word	0x00083b59
   84d00:	00082db1 	.word	0x00082db1

00084d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   84d04:	b480      	push	{r7}
   84d06:	b085      	sub	sp, #20
   84d08:	af00      	add	r7, sp, #0
   84d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   84d0c:	4b0e      	ldr	r3, [pc, #56]	; (84d48 <prvGetNextExpireTime+0x44>)
   84d0e:	681b      	ldr	r3, [r3, #0]
   84d10:	681b      	ldr	r3, [r3, #0]
   84d12:	2b00      	cmp	r3, #0
   84d14:	bf14      	ite	ne
   84d16:	2300      	movne	r3, #0
   84d18:	2301      	moveq	r3, #1
   84d1a:	b2db      	uxtb	r3, r3
   84d1c:	461a      	mov	r2, r3
   84d1e:	687b      	ldr	r3, [r7, #4]
   84d20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   84d22:	687b      	ldr	r3, [r7, #4]
   84d24:	681b      	ldr	r3, [r3, #0]
   84d26:	2b00      	cmp	r3, #0
   84d28:	d105      	bne.n	84d36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84d2a:	4b07      	ldr	r3, [pc, #28]	; (84d48 <prvGetNextExpireTime+0x44>)
   84d2c:	681b      	ldr	r3, [r3, #0]
   84d2e:	68db      	ldr	r3, [r3, #12]
   84d30:	681b      	ldr	r3, [r3, #0]
   84d32:	60fb      	str	r3, [r7, #12]
   84d34:	e001      	b.n	84d3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   84d36:	2300      	movs	r3, #0
   84d38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   84d3a:	68fb      	ldr	r3, [r7, #12]
}
   84d3c:	4618      	mov	r0, r3
   84d3e:	3714      	adds	r7, #20
   84d40:	46bd      	mov	sp, r7
   84d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   84d46:	4770      	bx	lr
   84d48:	2007a694 	.word	0x2007a694

00084d4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   84d4c:	b580      	push	{r7, lr}
   84d4e:	b084      	sub	sp, #16
   84d50:	af00      	add	r7, sp, #0
   84d52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   84d54:	4b0c      	ldr	r3, [pc, #48]	; (84d88 <prvSampleTimeNow+0x3c>)
   84d56:	4798      	blx	r3
   84d58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   84d5a:	4b0c      	ldr	r3, [pc, #48]	; (84d8c <prvSampleTimeNow+0x40>)
   84d5c:	681b      	ldr	r3, [r3, #0]
   84d5e:	68fa      	ldr	r2, [r7, #12]
   84d60:	429a      	cmp	r2, r3
   84d62:	d205      	bcs.n	84d70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   84d64:	4b0a      	ldr	r3, [pc, #40]	; (84d90 <prvSampleTimeNow+0x44>)
   84d66:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   84d68:	687b      	ldr	r3, [r7, #4]
   84d6a:	2201      	movs	r2, #1
   84d6c:	601a      	str	r2, [r3, #0]
   84d6e:	e002      	b.n	84d76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   84d70:	687b      	ldr	r3, [r7, #4]
   84d72:	2200      	movs	r2, #0
   84d74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   84d76:	4b05      	ldr	r3, [pc, #20]	; (84d8c <prvSampleTimeNow+0x40>)
   84d78:	68fa      	ldr	r2, [r7, #12]
   84d7a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   84d7c:	68fb      	ldr	r3, [r7, #12]
}
   84d7e:	4618      	mov	r0, r3
   84d80:	3710      	adds	r7, #16
   84d82:	46bd      	mov	sp, r7
   84d84:	bd80      	pop	{r7, pc}
   84d86:	bf00      	nop
   84d88:	00083ffd 	.word	0x00083ffd
   84d8c:	2007a6a0 	.word	0x2007a6a0
   84d90:	00084f49 	.word	0x00084f49

00084d94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   84d94:	b580      	push	{r7, lr}
   84d96:	b086      	sub	sp, #24
   84d98:	af00      	add	r7, sp, #0
   84d9a:	60f8      	str	r0, [r7, #12]
   84d9c:	60b9      	str	r1, [r7, #8]
   84d9e:	607a      	str	r2, [r7, #4]
   84da0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   84da2:	2300      	movs	r3, #0
   84da4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   84da6:	68fb      	ldr	r3, [r7, #12]
   84da8:	68ba      	ldr	r2, [r7, #8]
   84daa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84dac:	68fb      	ldr	r3, [r7, #12]
   84dae:	68fa      	ldr	r2, [r7, #12]
   84db0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   84db2:	68ba      	ldr	r2, [r7, #8]
   84db4:	687b      	ldr	r3, [r7, #4]
   84db6:	429a      	cmp	r2, r3
   84db8:	d812      	bhi.n	84de0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   84dba:	687a      	ldr	r2, [r7, #4]
   84dbc:	683b      	ldr	r3, [r7, #0]
   84dbe:	1ad2      	subs	r2, r2, r3
   84dc0:	68fb      	ldr	r3, [r7, #12]
   84dc2:	699b      	ldr	r3, [r3, #24]
   84dc4:	429a      	cmp	r2, r3
   84dc6:	d302      	bcc.n	84dce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   84dc8:	2301      	movs	r3, #1
   84dca:	617b      	str	r3, [r7, #20]
   84dcc:	e01b      	b.n	84e06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   84dce:	4b10      	ldr	r3, [pc, #64]	; (84e10 <prvInsertTimerInActiveList+0x7c>)
   84dd0:	681a      	ldr	r2, [r3, #0]
   84dd2:	68fb      	ldr	r3, [r7, #12]
   84dd4:	3304      	adds	r3, #4
   84dd6:	4610      	mov	r0, r2
   84dd8:	4619      	mov	r1, r3
   84dda:	4b0e      	ldr	r3, [pc, #56]	; (84e14 <prvInsertTimerInActiveList+0x80>)
   84ddc:	4798      	blx	r3
   84dde:	e012      	b.n	84e06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   84de0:	687a      	ldr	r2, [r7, #4]
   84de2:	683b      	ldr	r3, [r7, #0]
   84de4:	429a      	cmp	r2, r3
   84de6:	d206      	bcs.n	84df6 <prvInsertTimerInActiveList+0x62>
   84de8:	68ba      	ldr	r2, [r7, #8]
   84dea:	683b      	ldr	r3, [r7, #0]
   84dec:	429a      	cmp	r2, r3
   84dee:	d302      	bcc.n	84df6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   84df0:	2301      	movs	r3, #1
   84df2:	617b      	str	r3, [r7, #20]
   84df4:	e007      	b.n	84e06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84df6:	4b08      	ldr	r3, [pc, #32]	; (84e18 <prvInsertTimerInActiveList+0x84>)
   84df8:	681a      	ldr	r2, [r3, #0]
   84dfa:	68fb      	ldr	r3, [r7, #12]
   84dfc:	3304      	adds	r3, #4
   84dfe:	4610      	mov	r0, r2
   84e00:	4619      	mov	r1, r3
   84e02:	4b04      	ldr	r3, [pc, #16]	; (84e14 <prvInsertTimerInActiveList+0x80>)
   84e04:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   84e06:	697b      	ldr	r3, [r7, #20]
}
   84e08:	4618      	mov	r0, r3
   84e0a:	3718      	adds	r7, #24
   84e0c:	46bd      	mov	sp, r7
   84e0e:	bd80      	pop	{r7, pc}
   84e10:	2007a698 	.word	0x2007a698
   84e14:	00082b65 	.word	0x00082b65
   84e18:	2007a694 	.word	0x2007a694

00084e1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   84e1c:	b590      	push	{r4, r7, lr}
   84e1e:	b08b      	sub	sp, #44	; 0x2c
   84e20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84e22:	e070      	b.n	84f06 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   84e24:	68bb      	ldr	r3, [r7, #8]
   84e26:	2b00      	cmp	r3, #0
   84e28:	db6d      	blt.n	84f06 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   84e2a:	693b      	ldr	r3, [r7, #16]
   84e2c:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   84e2e:	69fb      	ldr	r3, [r7, #28]
   84e30:	695b      	ldr	r3, [r3, #20]
   84e32:	2b00      	cmp	r3, #0
   84e34:	d004      	beq.n	84e40 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84e36:	69fb      	ldr	r3, [r7, #28]
   84e38:	3304      	adds	r3, #4
   84e3a:	4618      	mov	r0, r3
   84e3c:	4b3a      	ldr	r3, [pc, #232]	; (84f28 <prvProcessReceivedCommands+0x10c>)
   84e3e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84e40:	1d3b      	adds	r3, r7, #4
   84e42:	4618      	mov	r0, r3
   84e44:	4b39      	ldr	r3, [pc, #228]	; (84f2c <prvProcessReceivedCommands+0x110>)
   84e46:	4798      	blx	r3
   84e48:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   84e4a:	68bb      	ldr	r3, [r7, #8]
   84e4c:	2b09      	cmp	r3, #9
   84e4e:	d859      	bhi.n	84f04 <prvProcessReceivedCommands+0xe8>
   84e50:	a201      	add	r2, pc, #4	; (adr r2, 84e58 <prvProcessReceivedCommands+0x3c>)
   84e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84e56:	bf00      	nop
   84e58:	00084e81 	.word	0x00084e81
   84e5c:	00084e81 	.word	0x00084e81
   84e60:	00084e81 	.word	0x00084e81
   84e64:	00084f05 	.word	0x00084f05
   84e68:	00084ed3 	.word	0x00084ed3
   84e6c:	00084efd 	.word	0x00084efd
   84e70:	00084e81 	.word	0x00084e81
   84e74:	00084e81 	.word	0x00084e81
   84e78:	00084f05 	.word	0x00084f05
   84e7c:	00084ed3 	.word	0x00084ed3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   84e80:	68fa      	ldr	r2, [r7, #12]
   84e82:	69fb      	ldr	r3, [r7, #28]
   84e84:	699b      	ldr	r3, [r3, #24]
   84e86:	441a      	add	r2, r3
   84e88:	68fb      	ldr	r3, [r7, #12]
   84e8a:	69f8      	ldr	r0, [r7, #28]
   84e8c:	4611      	mov	r1, r2
   84e8e:	69ba      	ldr	r2, [r7, #24]
   84e90:	4c27      	ldr	r4, [pc, #156]	; (84f30 <prvProcessReceivedCommands+0x114>)
   84e92:	47a0      	blx	r4
   84e94:	4603      	mov	r3, r0
   84e96:	2b01      	cmp	r3, #1
   84e98:	d11a      	bne.n	84ed0 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84e9a:	69fb      	ldr	r3, [r7, #28]
   84e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84e9e:	69f8      	ldr	r0, [r7, #28]
   84ea0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84ea2:	69fb      	ldr	r3, [r7, #28]
   84ea4:	69db      	ldr	r3, [r3, #28]
   84ea6:	2b01      	cmp	r3, #1
   84ea8:	d112      	bne.n	84ed0 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   84eaa:	68fa      	ldr	r2, [r7, #12]
   84eac:	69fb      	ldr	r3, [r7, #28]
   84eae:	699b      	ldr	r3, [r3, #24]
   84eb0:	4413      	add	r3, r2
   84eb2:	2200      	movs	r2, #0
   84eb4:	9200      	str	r2, [sp, #0]
   84eb6:	69f8      	ldr	r0, [r7, #28]
   84eb8:	2100      	movs	r1, #0
   84eba:	461a      	mov	r2, r3
   84ebc:	2300      	movs	r3, #0
   84ebe:	4c1d      	ldr	r4, [pc, #116]	; (84f34 <prvProcessReceivedCommands+0x118>)
   84ec0:	47a0      	blx	r4
   84ec2:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   84ec4:	697b      	ldr	r3, [r7, #20]
   84ec6:	2b00      	cmp	r3, #0
   84ec8:	d102      	bne.n	84ed0 <prvProcessReceivedCommands+0xb4>
   84eca:	4b1b      	ldr	r3, [pc, #108]	; (84f38 <prvProcessReceivedCommands+0x11c>)
   84ecc:	4798      	blx	r3
   84ece:	e7fe      	b.n	84ece <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   84ed0:	e019      	b.n	84f06 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   84ed2:	68fa      	ldr	r2, [r7, #12]
   84ed4:	69fb      	ldr	r3, [r7, #28]
   84ed6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   84ed8:	69fb      	ldr	r3, [r7, #28]
   84eda:	699b      	ldr	r3, [r3, #24]
   84edc:	2b00      	cmp	r3, #0
   84ede:	d102      	bne.n	84ee6 <prvProcessReceivedCommands+0xca>
   84ee0:	4b15      	ldr	r3, [pc, #84]	; (84f38 <prvProcessReceivedCommands+0x11c>)
   84ee2:	4798      	blx	r3
   84ee4:	e7fe      	b.n	84ee4 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   84ee6:	69fb      	ldr	r3, [r7, #28]
   84ee8:	699a      	ldr	r2, [r3, #24]
   84eea:	69bb      	ldr	r3, [r7, #24]
   84eec:	4413      	add	r3, r2
   84eee:	69f8      	ldr	r0, [r7, #28]
   84ef0:	4619      	mov	r1, r3
   84ef2:	69ba      	ldr	r2, [r7, #24]
   84ef4:	69bb      	ldr	r3, [r7, #24]
   84ef6:	4c0e      	ldr	r4, [pc, #56]	; (84f30 <prvProcessReceivedCommands+0x114>)
   84ef8:	47a0      	blx	r4
					break;
   84efa:	e004      	b.n	84f06 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   84efc:	69f8      	ldr	r0, [r7, #28]
   84efe:	4b0f      	ldr	r3, [pc, #60]	; (84f3c <prvProcessReceivedCommands+0x120>)
   84f00:	4798      	blx	r3
					break;
   84f02:	e000      	b.n	84f06 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   84f04:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84f06:	4b0e      	ldr	r3, [pc, #56]	; (84f40 <prvProcessReceivedCommands+0x124>)
   84f08:	681a      	ldr	r2, [r3, #0]
   84f0a:	f107 0308 	add.w	r3, r7, #8
   84f0e:	4610      	mov	r0, r2
   84f10:	4619      	mov	r1, r3
   84f12:	2200      	movs	r2, #0
   84f14:	2300      	movs	r3, #0
   84f16:	4c0b      	ldr	r4, [pc, #44]	; (84f44 <prvProcessReceivedCommands+0x128>)
   84f18:	47a0      	blx	r4
   84f1a:	4603      	mov	r3, r0
   84f1c:	2b00      	cmp	r3, #0
   84f1e:	d181      	bne.n	84e24 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   84f20:	3724      	adds	r7, #36	; 0x24
   84f22:	46bd      	mov	sp, r7
   84f24:	bd90      	pop	{r4, r7, pc}
   84f26:	bf00      	nop
   84f28:	00082bd5 	.word	0x00082bd5
   84f2c:	00084d4d 	.word	0x00084d4d
   84f30:	00084d95 	.word	0x00084d95
   84f34:	00084b39 	.word	0x00084b39
   84f38:	00082e4d 	.word	0x00082e4d
   84f3c:	000830e9 	.word	0x000830e9
   84f40:	2007a69c 	.word	0x2007a69c
   84f44:	00083715 	.word	0x00083715

00084f48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   84f48:	b590      	push	{r4, r7, lr}
   84f4a:	b089      	sub	sp, #36	; 0x24
   84f4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84f4e:	e03d      	b.n	84fcc <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f50:	4b27      	ldr	r3, [pc, #156]	; (84ff0 <prvSwitchTimerLists+0xa8>)
   84f52:	681b      	ldr	r3, [r3, #0]
   84f54:	68db      	ldr	r3, [r3, #12]
   84f56:	681b      	ldr	r3, [r3, #0]
   84f58:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f5a:	4b25      	ldr	r3, [pc, #148]	; (84ff0 <prvSwitchTimerLists+0xa8>)
   84f5c:	681b      	ldr	r3, [r3, #0]
   84f5e:	68db      	ldr	r3, [r3, #12]
   84f60:	68db      	ldr	r3, [r3, #12]
   84f62:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84f64:	693b      	ldr	r3, [r7, #16]
   84f66:	3304      	adds	r3, #4
   84f68:	4618      	mov	r0, r3
   84f6a:	4b22      	ldr	r3, [pc, #136]	; (84ff4 <prvSwitchTimerLists+0xac>)
   84f6c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84f6e:	693b      	ldr	r3, [r7, #16]
   84f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84f72:	6938      	ldr	r0, [r7, #16]
   84f74:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84f76:	693b      	ldr	r3, [r7, #16]
   84f78:	69db      	ldr	r3, [r3, #28]
   84f7a:	2b01      	cmp	r3, #1
   84f7c:	d126      	bne.n	84fcc <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   84f7e:	693b      	ldr	r3, [r7, #16]
   84f80:	699a      	ldr	r2, [r3, #24]
   84f82:	697b      	ldr	r3, [r7, #20]
   84f84:	4413      	add	r3, r2
   84f86:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   84f88:	68fa      	ldr	r2, [r7, #12]
   84f8a:	697b      	ldr	r3, [r7, #20]
   84f8c:	429a      	cmp	r2, r3
   84f8e:	d90e      	bls.n	84fae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   84f90:	693b      	ldr	r3, [r7, #16]
   84f92:	68fa      	ldr	r2, [r7, #12]
   84f94:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84f96:	693b      	ldr	r3, [r7, #16]
   84f98:	693a      	ldr	r2, [r7, #16]
   84f9a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84f9c:	4b14      	ldr	r3, [pc, #80]	; (84ff0 <prvSwitchTimerLists+0xa8>)
   84f9e:	681a      	ldr	r2, [r3, #0]
   84fa0:	693b      	ldr	r3, [r7, #16]
   84fa2:	3304      	adds	r3, #4
   84fa4:	4610      	mov	r0, r2
   84fa6:	4619      	mov	r1, r3
   84fa8:	4b13      	ldr	r3, [pc, #76]	; (84ff8 <prvSwitchTimerLists+0xb0>)
   84faa:	4798      	blx	r3
   84fac:	e00e      	b.n	84fcc <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84fae:	2300      	movs	r3, #0
   84fb0:	9300      	str	r3, [sp, #0]
   84fb2:	6938      	ldr	r0, [r7, #16]
   84fb4:	2100      	movs	r1, #0
   84fb6:	697a      	ldr	r2, [r7, #20]
   84fb8:	2300      	movs	r3, #0
   84fba:	4c10      	ldr	r4, [pc, #64]	; (84ffc <prvSwitchTimerLists+0xb4>)
   84fbc:	47a0      	blx	r4
   84fbe:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   84fc0:	68bb      	ldr	r3, [r7, #8]
   84fc2:	2b00      	cmp	r3, #0
   84fc4:	d102      	bne.n	84fcc <prvSwitchTimerLists+0x84>
   84fc6:	4b0e      	ldr	r3, [pc, #56]	; (85000 <prvSwitchTimerLists+0xb8>)
   84fc8:	4798      	blx	r3
   84fca:	e7fe      	b.n	84fca <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84fcc:	4b08      	ldr	r3, [pc, #32]	; (84ff0 <prvSwitchTimerLists+0xa8>)
   84fce:	681b      	ldr	r3, [r3, #0]
   84fd0:	681b      	ldr	r3, [r3, #0]
   84fd2:	2b00      	cmp	r3, #0
   84fd4:	d1bc      	bne.n	84f50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   84fd6:	4b06      	ldr	r3, [pc, #24]	; (84ff0 <prvSwitchTimerLists+0xa8>)
   84fd8:	681b      	ldr	r3, [r3, #0]
   84fda:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   84fdc:	4b09      	ldr	r3, [pc, #36]	; (85004 <prvSwitchTimerLists+0xbc>)
   84fde:	681a      	ldr	r2, [r3, #0]
   84fe0:	4b03      	ldr	r3, [pc, #12]	; (84ff0 <prvSwitchTimerLists+0xa8>)
   84fe2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   84fe4:	4b07      	ldr	r3, [pc, #28]	; (85004 <prvSwitchTimerLists+0xbc>)
   84fe6:	687a      	ldr	r2, [r7, #4]
   84fe8:	601a      	str	r2, [r3, #0]
}
   84fea:	371c      	adds	r7, #28
   84fec:	46bd      	mov	sp, r7
   84fee:	bd90      	pop	{r4, r7, pc}
   84ff0:	2007a694 	.word	0x2007a694
   84ff4:	00082bd5 	.word	0x00082bd5
   84ff8:	00082b65 	.word	0x00082b65
   84ffc:	00084b39 	.word	0x00084b39
   85000:	00082e4d 	.word	0x00082e4d
   85004:	2007a698 	.word	0x2007a698

00085008 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   85008:	b580      	push	{r7, lr}
   8500a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8500c:	4b11      	ldr	r3, [pc, #68]	; (85054 <prvCheckForValidListAndQueue+0x4c>)
   8500e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   85010:	4b11      	ldr	r3, [pc, #68]	; (85058 <prvCheckForValidListAndQueue+0x50>)
   85012:	681b      	ldr	r3, [r3, #0]
   85014:	2b00      	cmp	r3, #0
   85016:	d11a      	bne.n	8504e <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   85018:	4810      	ldr	r0, [pc, #64]	; (8505c <prvCheckForValidListAndQueue+0x54>)
   8501a:	4b11      	ldr	r3, [pc, #68]	; (85060 <prvCheckForValidListAndQueue+0x58>)
   8501c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   8501e:	4811      	ldr	r0, [pc, #68]	; (85064 <prvCheckForValidListAndQueue+0x5c>)
   85020:	4b0f      	ldr	r3, [pc, #60]	; (85060 <prvCheckForValidListAndQueue+0x58>)
   85022:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   85024:	4b10      	ldr	r3, [pc, #64]	; (85068 <prvCheckForValidListAndQueue+0x60>)
   85026:	4a0d      	ldr	r2, [pc, #52]	; (8505c <prvCheckForValidListAndQueue+0x54>)
   85028:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8502a:	4b10      	ldr	r3, [pc, #64]	; (8506c <prvCheckForValidListAndQueue+0x64>)
   8502c:	4a0d      	ldr	r2, [pc, #52]	; (85064 <prvCheckForValidListAndQueue+0x5c>)
   8502e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   85030:	2005      	movs	r0, #5
   85032:	210c      	movs	r1, #12
   85034:	2200      	movs	r2, #0
   85036:	4b0e      	ldr	r3, [pc, #56]	; (85070 <prvCheckForValidListAndQueue+0x68>)
   85038:	4798      	blx	r3
   8503a:	4602      	mov	r2, r0
   8503c:	4b06      	ldr	r3, [pc, #24]	; (85058 <prvCheckForValidListAndQueue+0x50>)
   8503e:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   85040:	4b05      	ldr	r3, [pc, #20]	; (85058 <prvCheckForValidListAndQueue+0x50>)
   85042:	681b      	ldr	r3, [r3, #0]
   85044:	2b00      	cmp	r3, #0
   85046:	d102      	bne.n	8504e <prvCheckForValidListAndQueue+0x46>
   85048:	4b0a      	ldr	r3, [pc, #40]	; (85074 <prvCheckForValidListAndQueue+0x6c>)
   8504a:	4798      	blx	r3
   8504c:	e7fe      	b.n	8504c <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8504e:	4b0a      	ldr	r3, [pc, #40]	; (85078 <prvCheckForValidListAndQueue+0x70>)
   85050:	4798      	blx	r3
}
   85052:	bd80      	pop	{r7, pc}
   85054:	00082dd1 	.word	0x00082dd1
   85058:	2007a69c 	.word	0x2007a69c
   8505c:	2007a66c 	.word	0x2007a66c
   85060:	00082ac5 	.word	0x00082ac5
   85064:	2007a680 	.word	0x2007a680
   85068:	2007a694 	.word	0x2007a694
   8506c:	2007a698 	.word	0x2007a698
   85070:	000833c9 	.word	0x000833c9
   85074:	00082e4d 	.word	0x00082e4d
   85078:	00082e15 	.word	0x00082e15

0008507c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8507c:	b480      	push	{r7}
   8507e:	b083      	sub	sp, #12
   85080:	af00      	add	r7, sp, #0
   85082:	4603      	mov	r3, r0
   85084:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85086:	4b08      	ldr	r3, [pc, #32]	; (850a8 <NVIC_EnableIRQ+0x2c>)
   85088:	f997 2007 	ldrsb.w	r2, [r7, #7]
   8508c:	0952      	lsrs	r2, r2, #5
   8508e:	79f9      	ldrb	r1, [r7, #7]
   85090:	f001 011f 	and.w	r1, r1, #31
   85094:	2001      	movs	r0, #1
   85096:	fa00 f101 	lsl.w	r1, r0, r1
   8509a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8509e:	370c      	adds	r7, #12
   850a0:	46bd      	mov	sp, r7
   850a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   850a6:	4770      	bx	lr
   850a8:	e000e100 	.word	0xe000e100

000850ac <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   850ac:	b480      	push	{r7}
   850ae:	b083      	sub	sp, #12
   850b0:	af00      	add	r7, sp, #0
   850b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   850b4:	687b      	ldr	r3, [r7, #4]
   850b6:	2b07      	cmp	r3, #7
   850b8:	d825      	bhi.n	85106 <osc_get_rate+0x5a>
   850ba:	a201      	add	r2, pc, #4	; (adr r2, 850c0 <osc_get_rate+0x14>)
   850bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   850c0:	000850e1 	.word	0x000850e1
   850c4:	000850e7 	.word	0x000850e7
   850c8:	000850ed 	.word	0x000850ed
   850cc:	000850f3 	.word	0x000850f3
   850d0:	000850f7 	.word	0x000850f7
   850d4:	000850fb 	.word	0x000850fb
   850d8:	000850ff 	.word	0x000850ff
   850dc:	00085103 	.word	0x00085103
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   850e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   850e4:	e010      	b.n	85108 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   850e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   850ea:	e00d      	b.n	85108 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   850ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   850f0:	e00a      	b.n	85108 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   850f2:	4b08      	ldr	r3, [pc, #32]	; (85114 <osc_get_rate+0x68>)
   850f4:	e008      	b.n	85108 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   850f6:	4b08      	ldr	r3, [pc, #32]	; (85118 <osc_get_rate+0x6c>)
   850f8:	e006      	b.n	85108 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   850fa:	4b08      	ldr	r3, [pc, #32]	; (8511c <osc_get_rate+0x70>)
   850fc:	e004      	b.n	85108 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   850fe:	4b07      	ldr	r3, [pc, #28]	; (8511c <osc_get_rate+0x70>)
   85100:	e002      	b.n	85108 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   85102:	4b06      	ldr	r3, [pc, #24]	; (8511c <osc_get_rate+0x70>)
   85104:	e000      	b.n	85108 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   85106:	2300      	movs	r3, #0
}
   85108:	4618      	mov	r0, r3
   8510a:	370c      	adds	r7, #12
   8510c:	46bd      	mov	sp, r7
   8510e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85112:	4770      	bx	lr
   85114:	003d0900 	.word	0x003d0900
   85118:	007a1200 	.word	0x007a1200
   8511c:	00b71b00 	.word	0x00b71b00

00085120 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   85120:	b580      	push	{r7, lr}
   85122:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   85124:	2006      	movs	r0, #6
   85126:	4b04      	ldr	r3, [pc, #16]	; (85138 <sysclk_get_main_hz+0x18>)
   85128:	4798      	blx	r3
   8512a:	4602      	mov	r2, r0
   8512c:	4613      	mov	r3, r2
   8512e:	00db      	lsls	r3, r3, #3
   85130:	1a9b      	subs	r3, r3, r2
   85132:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   85134:	4618      	mov	r0, r3
   85136:	bd80      	pop	{r7, pc}
   85138:	000850ad 	.word	0x000850ad

0008513c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8513c:	b580      	push	{r7, lr}
   8513e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   85140:	4b02      	ldr	r3, [pc, #8]	; (8514c <sysclk_get_cpu_hz+0x10>)
   85142:	4798      	blx	r3
   85144:	4603      	mov	r3, r0
   85146:	085b      	lsrs	r3, r3, #1
}
   85148:	4618      	mov	r0, r3
   8514a:	bd80      	pop	{r7, pc}
   8514c:	00085121 	.word	0x00085121

00085150 <CAN1_Handler>:

/************************************************************************/
/* Default Interrupt Handler for CAN1								    */
/************************************************************************/
void CAN1_Handler(void)
{
   85150:	b580      	push	{r7, lr}
   85152:	b082      	sub	sp, #8
   85154:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   85156:	4824      	ldr	r0, [pc, #144]	; (851e8 <CAN1_Handler+0x98>)
   85158:	4924      	ldr	r1, [pc, #144]	; (851ec <CAN1_Handler+0x9c>)
   8515a:	4b25      	ldr	r3, [pc, #148]	; (851f0 <CAN1_Handler+0xa0>)
   8515c:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   8515e:	4825      	ldr	r0, [pc, #148]	; (851f4 <CAN1_Handler+0xa4>)
   85160:	4b25      	ldr	r3, [pc, #148]	; (851f8 <CAN1_Handler+0xa8>)
   85162:	4798      	blx	r3
   85164:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   85166:	683b      	ldr	r3, [r7, #0]
   85168:	b2db      	uxtb	r3, r3
   8516a:	2b00      	cmp	r3, #0
   8516c:	d038      	beq.n	851e0 <CAN1_Handler+0x90>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8516e:	2300      	movs	r3, #0
   85170:	71fb      	strb	r3, [r7, #7]
   85172:	e032      	b.n	851da <CAN1_Handler+0x8a>
			ul_status = can_mailbox_get_status(CAN1, i);
   85174:	79fb      	ldrb	r3, [r7, #7]
   85176:	481f      	ldr	r0, [pc, #124]	; (851f4 <CAN1_Handler+0xa4>)
   85178:	4619      	mov	r1, r3
   8517a:	4b20      	ldr	r3, [pc, #128]	; (851fc <CAN1_Handler+0xac>)
   8517c:	4798      	blx	r3
   8517e:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   85180:	683b      	ldr	r3, [r7, #0]
   85182:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   85186:	2b00      	cmp	r3, #0
   85188:	d024      	beq.n	851d4 <CAN1_Handler+0x84>
				can1_mailbox.ul_mb_idx = i;
   8518a:	79fa      	ldrb	r2, [r7, #7]
   8518c:	4b16      	ldr	r3, [pc, #88]	; (851e8 <CAN1_Handler+0x98>)
   8518e:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   85190:	4b15      	ldr	r3, [pc, #84]	; (851e8 <CAN1_Handler+0x98>)
   85192:	683a      	ldr	r2, [r7, #0]
   85194:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   85196:	4817      	ldr	r0, [pc, #92]	; (851f4 <CAN1_Handler+0xa4>)
   85198:	4913      	ldr	r1, [pc, #76]	; (851e8 <CAN1_Handler+0x98>)
   8519a:	4b19      	ldr	r3, [pc, #100]	; (85200 <CAN1_Handler+0xb0>)
   8519c:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   8519e:	4b12      	ldr	r3, [pc, #72]	; (851e8 <CAN1_Handler+0x98>)
   851a0:	69da      	ldr	r2, [r3, #28]
   851a2:	4b18      	ldr	r3, [pc, #96]	; (85204 <CAN1_Handler+0xb4>)
   851a4:	429a      	cmp	r2, r3
   851a6:	d107      	bne.n	851b8 <CAN1_Handler+0x68>
   851a8:	4b0f      	ldr	r3, [pc, #60]	; (851e8 <CAN1_Handler+0x98>)
   851aa:	699a      	ldr	r2, [r3, #24]
   851ac:	4b16      	ldr	r3, [pc, #88]	; (85208 <CAN1_Handler+0xb8>)
   851ae:	429a      	cmp	r2, r3
   851b0:	d102      	bne.n	851b8 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   851b2:	4b16      	ldr	r3, [pc, #88]	; (8520c <CAN1_Handler+0xbc>)
   851b4:	2200      	movs	r2, #0
   851b6:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   851b8:	79fb      	ldrb	r3, [r7, #7]
   851ba:	480b      	ldr	r0, [pc, #44]	; (851e8 <CAN1_Handler+0x98>)
   851bc:	4619      	mov	r1, r3
   851be:	4b14      	ldr	r3, [pc, #80]	; (85210 <CAN1_Handler+0xc0>)
   851c0:	4798      	blx	r3
				
				/* Decode CAN Message */
				debug_can_msg(&can1_mailbox, CAN1);
   851c2:	4809      	ldr	r0, [pc, #36]	; (851e8 <CAN1_Handler+0x98>)
   851c4:	490b      	ldr	r1, [pc, #44]	; (851f4 <CAN1_Handler+0xa4>)
   851c6:	4b13      	ldr	r3, [pc, #76]	; (85214 <CAN1_Handler+0xc4>)
   851c8:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   851ca:	4807      	ldr	r0, [pc, #28]	; (851e8 <CAN1_Handler+0x98>)
   851cc:	4907      	ldr	r1, [pc, #28]	; (851ec <CAN1_Handler+0x9c>)
   851ce:	4b12      	ldr	r3, [pc, #72]	; (85218 <CAN1_Handler+0xc8>)
   851d0:	4798      	blx	r3
				break;
   851d2:	e005      	b.n	851e0 <CAN1_Handler+0x90>
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   851d4:	79fb      	ldrb	r3, [r7, #7]
   851d6:	3301      	adds	r3, #1
   851d8:	71fb      	strb	r3, [r7, #7]
   851da:	79fb      	ldrb	r3, [r7, #7]
   851dc:	2b07      	cmp	r3, #7
   851de:	d9c9      	bls.n	85174 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   851e0:	3708      	adds	r7, #8
   851e2:	46bd      	mov	sp, r7
   851e4:	bd80      	pop	{r7, pc}
   851e6:	bf00      	nop
   851e8:	2007a6bc 	.word	0x2007a6bc
   851ec:	2007a6f4 	.word	0x2007a6f4
   851f0:	00085751 	.word	0x00085751
   851f4:	400b8000 	.word	0x400b8000
   851f8:	00081899 	.word	0x00081899
   851fc:	000818dd 	.word	0x000818dd
   85200:	00081a5d 	.word	0x00081a5d
   85204:	01234567 	.word	0x01234567
   85208:	89abcdef 	.word	0x89abcdef
   8520c:	2007a740 	.word	0x2007a740
   85210:	000853e5 	.word	0x000853e5
   85214:	000852bd 	.word	0x000852bd
   85218:	000857c1 	.word	0x000857c1

0008521c <CAN0_Handler>:
/************************************************************************/
/* Default Interrupt Handler for CAN0								    */
/************************************************************************/
void CAN0_Handler(void)
{
   8521c:	b580      	push	{r7, lr}
   8521e:	b082      	sub	sp, #8
   85220:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   85222:	481c      	ldr	r0, [pc, #112]	; (85294 <CAN0_Handler+0x78>)
   85224:	491c      	ldr	r1, [pc, #112]	; (85298 <CAN0_Handler+0x7c>)
   85226:	4b1d      	ldr	r3, [pc, #116]	; (8529c <CAN0_Handler+0x80>)
   85228:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   8522a:	481d      	ldr	r0, [pc, #116]	; (852a0 <CAN0_Handler+0x84>)
   8522c:	4b1d      	ldr	r3, [pc, #116]	; (852a4 <CAN0_Handler+0x88>)
   8522e:	4798      	blx	r3
   85230:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   85232:	683b      	ldr	r3, [r7, #0]
   85234:	b2db      	uxtb	r3, r3
   85236:	2b00      	cmp	r3, #0
   85238:	d029      	beq.n	8528e <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8523a:	2300      	movs	r3, #0
   8523c:	71fb      	strb	r3, [r7, #7]
   8523e:	e023      	b.n	85288 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   85240:	79fb      	ldrb	r3, [r7, #7]
   85242:	4817      	ldr	r0, [pc, #92]	; (852a0 <CAN0_Handler+0x84>)
   85244:	4619      	mov	r1, r3
   85246:	4b18      	ldr	r3, [pc, #96]	; (852a8 <CAN0_Handler+0x8c>)
   85248:	4798      	blx	r3
   8524a:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   8524c:	683b      	ldr	r3, [r7, #0]
   8524e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   85252:	2b00      	cmp	r3, #0
   85254:	d015      	beq.n	85282 <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   85256:	79fa      	ldrb	r2, [r7, #7]
   85258:	4b0e      	ldr	r3, [pc, #56]	; (85294 <CAN0_Handler+0x78>)
   8525a:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   8525c:	4b0d      	ldr	r3, [pc, #52]	; (85294 <CAN0_Handler+0x78>)
   8525e:	683a      	ldr	r2, [r7, #0]
   85260:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   85262:	480f      	ldr	r0, [pc, #60]	; (852a0 <CAN0_Handler+0x84>)
   85264:	490b      	ldr	r1, [pc, #44]	; (85294 <CAN0_Handler+0x78>)
   85266:	4b11      	ldr	r3, [pc, #68]	; (852ac <CAN0_Handler+0x90>)
   85268:	4798      	blx	r3
				g_ul_recv_status = 1;
   8526a:	4b11      	ldr	r3, [pc, #68]	; (852b0 <CAN0_Handler+0x94>)
   8526c:	2201      	movs	r2, #1
   8526e:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   85270:	4808      	ldr	r0, [pc, #32]	; (85294 <CAN0_Handler+0x78>)
   85272:	490b      	ldr	r1, [pc, #44]	; (852a0 <CAN0_Handler+0x84>)
   85274:	4b0f      	ldr	r3, [pc, #60]	; (852b4 <CAN0_Handler+0x98>)
   85276:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   85278:	4806      	ldr	r0, [pc, #24]	; (85294 <CAN0_Handler+0x78>)
   8527a:	4907      	ldr	r1, [pc, #28]	; (85298 <CAN0_Handler+0x7c>)
   8527c:	4b0e      	ldr	r3, [pc, #56]	; (852b8 <CAN0_Handler+0x9c>)
   8527e:	4798      	blx	r3
				break;
   85280:	e005      	b.n	8528e <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85282:	79fb      	ldrb	r3, [r7, #7]
   85284:	3301      	adds	r3, #1
   85286:	71fb      	strb	r3, [r7, #7]
   85288:	79fb      	ldrb	r3, [r7, #7]
   8528a:	2b07      	cmp	r3, #7
   8528c:	d9d8      	bls.n	85240 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   8528e:	3708      	adds	r7, #8
   85290:	46bd      	mov	sp, r7
   85292:	bd80      	pop	{r7, pc}
   85294:	2007a720 	.word	0x2007a720
   85298:	2007a754 	.word	0x2007a754
   8529c:	00085751 	.word	0x00085751
   852a0:	400b4000 	.word	0x400b4000
   852a4:	00081899 	.word	0x00081899
   852a8:	000818dd 	.word	0x000818dd
   852ac:	00081a5d 	.word	0x00081a5d
   852b0:	2007a6a4 	.word	0x2007a6a4
   852b4:	000852bd 	.word	0x000852bd
   852b8:	000857c1 	.word	0x000857c1

000852bc <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   852bc:	b580      	push	{r7, lr}
   852be:	b086      	sub	sp, #24
   852c0:	af00      	add	r7, sp, #0
   852c2:	6078      	str	r0, [r7, #4]
   852c4:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   852c6:	687b      	ldr	r3, [r7, #4]
   852c8:	699b      	ldr	r3, [r3, #24]
   852ca:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   852cc:	687b      	ldr	r3, [r7, #4]
   852ce:	69db      	ldr	r3, [r3, #28]
   852d0:	613b      	str	r3, [r7, #16]
	float temp;
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   852d2:	697b      	ldr	r3, [r7, #20]
   852d4:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   852d8:	bf14      	ite	ne
   852da:	2300      	movne	r3, #0
   852dc:	2301      	moveq	r3, #1
   852de:	b2da      	uxtb	r2, r3
   852e0:	6839      	ldr	r1, [r7, #0]
   852e2:	4b3a      	ldr	r3, [pc, #232]	; (853cc <debug_can_msg+0x110>)
   852e4:	4299      	cmp	r1, r3
   852e6:	bf14      	ite	ne
   852e8:	2300      	movne	r3, #0
   852ea:	2301      	moveq	r3, #1
   852ec:	b2db      	uxtb	r3, r3
   852ee:	4013      	ands	r3, r2
   852f0:	b2db      	uxtb	r3, r3
   852f2:	2b00      	cmp	r3, #0
   852f4:	d002      	beq.n	852fc <debug_can_msg+0x40>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   852f6:	2057      	movs	r0, #87	; 0x57
   852f8:	4b35      	ldr	r3, [pc, #212]	; (853d0 <debug_can_msg+0x114>)
   852fa:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN1))
   852fc:	697b      	ldr	r3, [r7, #20]
   852fe:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   85302:	bf14      	ite	ne
   85304:	2300      	movne	r3, #0
   85306:	2301      	moveq	r3, #1
   85308:	b2da      	uxtb	r2, r3
   8530a:	6839      	ldr	r1, [r7, #0]
   8530c:	4b2f      	ldr	r3, [pc, #188]	; (853cc <debug_can_msg+0x110>)
   8530e:	4299      	cmp	r1, r3
   85310:	bf14      	ite	ne
   85312:	2300      	movne	r3, #0
   85314:	2301      	moveq	r3, #1
   85316:	b2db      	uxtb	r3, r3
   85318:	4013      	ands	r3, r2
   8531a:	b2db      	uxtb	r3, r3
   8531c:	2b00      	cmp	r3, #0
   8531e:	d002      	beq.n	85326 <debug_can_msg+0x6a>
	{
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   85320:	2055      	movs	r0, #85	; 0x55
   85322:	4b2b      	ldr	r3, [pc, #172]	; (853d0 <debug_can_msg+0x114>)
   85324:	4798      	blx	r3
	}
	
	if ((uh_data_incom == DATA_RETURNED) & (controller == CAN1) & (glob_drf == 0))
   85326:	693b      	ldr	r3, [r7, #16]
   85328:	2b55      	cmp	r3, #85	; 0x55
   8532a:	bf14      	ite	ne
   8532c:	2300      	movne	r3, #0
   8532e:	2301      	moveq	r3, #1
   85330:	b2da      	uxtb	r2, r3
   85332:	6839      	ldr	r1, [r7, #0]
   85334:	4b25      	ldr	r3, [pc, #148]	; (853cc <debug_can_msg+0x110>)
   85336:	4299      	cmp	r1, r3
   85338:	bf14      	ite	ne
   8533a:	2300      	movne	r3, #0
   8533c:	2301      	moveq	r3, #1
   8533e:	b2db      	uxtb	r3, r3
   85340:	4013      	ands	r3, r2
   85342:	b2db      	uxtb	r3, r3
   85344:	461a      	mov	r2, r3
   85346:	4b23      	ldr	r3, [pc, #140]	; (853d4 <debug_can_msg+0x118>)
   85348:	781b      	ldrb	r3, [r3, #0]
   8534a:	2b00      	cmp	r3, #0
   8534c:	bf14      	ite	ne
   8534e:	2300      	movne	r3, #0
   85350:	2301      	moveq	r3, #1
   85352:	b2db      	uxtb	r3, r3
   85354:	4013      	ands	r3, r2
   85356:	2b00      	cmp	r3, #0
   85358:	d014      	beq.n	85384 <debug_can_msg+0xc8>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   8535a:	2056      	movs	r0, #86	; 0x56
   8535c:	4b1c      	ldr	r3, [pc, #112]	; (853d0 <debug_can_msg+0x114>)
   8535e:	4798      	blx	r3
		
		ul_data_incom = ul_data_incom >> 2;
   85360:	697b      	ldr	r3, [r7, #20]
   85362:	089b      	lsrs	r3, r3, #2
   85364:	617b      	str	r3, [r7, #20]
		
		temp = (float)ul_data_incom;
   85366:	4b1c      	ldr	r3, [pc, #112]	; (853d8 <debug_can_msg+0x11c>)
   85368:	6978      	ldr	r0, [r7, #20]
   8536a:	4798      	blx	r3
   8536c:	4603      	mov	r3, r0
   8536e:	60fb      	str	r3, [r7, #12]
		
		temp = temp * 0.03125;
   85370:	4b1a      	ldr	r3, [pc, #104]	; (853dc <debug_can_msg+0x120>)
   85372:	68f8      	ldr	r0, [r7, #12]
   85374:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   85378:	4798      	blx	r3
   8537a:	4603      	mov	r3, r0
   8537c:	60fb      	str	r3, [r7, #12]
		
		temp = temp;
		
		glob_drf = 1;
   8537e:	4b15      	ldr	r3, [pc, #84]	; (853d4 <debug_can_msg+0x118>)
   85380:	2201      	movs	r2, #1
   85382:	701a      	strb	r2, [r3, #0]
	}
	
	if ((uh_data_incom == MESSAGE_RETURNED) & (controller == CAN1) & (glob_comf == 0))
   85384:	693b      	ldr	r3, [r7, #16]
   85386:	2b00      	cmp	r3, #0
   85388:	bf14      	ite	ne
   8538a:	2300      	movne	r3, #0
   8538c:	2301      	moveq	r3, #1
   8538e:	b2da      	uxtb	r2, r3
   85390:	6839      	ldr	r1, [r7, #0]
   85392:	4b0e      	ldr	r3, [pc, #56]	; (853cc <debug_can_msg+0x110>)
   85394:	4299      	cmp	r1, r3
   85396:	bf14      	ite	ne
   85398:	2300      	movne	r3, #0
   8539a:	2301      	moveq	r3, #1
   8539c:	b2db      	uxtb	r3, r3
   8539e:	4013      	ands	r3, r2
   853a0:	b2db      	uxtb	r3, r3
   853a2:	461a      	mov	r2, r3
   853a4:	4b0e      	ldr	r3, [pc, #56]	; (853e0 <debug_can_msg+0x124>)
   853a6:	781b      	ldrb	r3, [r3, #0]
   853a8:	2b00      	cmp	r3, #0
   853aa:	bf14      	ite	ne
   853ac:	2300      	movne	r3, #0
   853ae:	2301      	moveq	r3, #1
   853b0:	b2db      	uxtb	r3, r3
   853b2:	4013      	ands	r3, r2
   853b4:	2b00      	cmp	r3, #0
   853b6:	d005      	beq.n	853c4 <debug_can_msg+0x108>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of a message
   853b8:	2056      	movs	r0, #86	; 0x56
   853ba:	4b05      	ldr	r3, [pc, #20]	; (853d0 <debug_can_msg+0x114>)
   853bc:	4798      	blx	r3
		glob_comf = 1;
   853be:	4b08      	ldr	r3, [pc, #32]	; (853e0 <debug_can_msg+0x124>)
   853c0:	2201      	movs	r2, #1
   853c2:	701a      	strb	r2, [r3, #0]
	}

	return;
   853c4:	bf00      	nop
}
   853c6:	3718      	adds	r7, #24
   853c8:	46bd      	mov	sp, r7
   853ca:	bd80      	pop	{r7, pc}
   853cc:	400b8000 	.word	0x400b8000
   853d0:	00081e5d 	.word	0x00081e5d
   853d4:	2007a6dc 	.word	0x2007a6dc
   853d8:	00085fb1 	.word	0x00085fb1
   853dc:	00086061 	.word	0x00086061
   853e0:	2007a784 	.word	0x2007a784

000853e4 <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   853e4:	b590      	push	{r4, r7, lr}
   853e6:	b087      	sub	sp, #28
   853e8:	af00      	add	r7, sp, #0
   853ea:	6078      	str	r0, [r7, #4]
   853ec:	460b      	mov	r3, r1
   853ee:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   853f0:	687b      	ldr	r3, [r7, #4]
   853f2:	699b      	ldr	r3, [r3, #24]
   853f4:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   853f6:	687b      	ldr	r3, [r7, #4]
   853f8:	69db      	ldr	r3, [r3, #28]
   853fa:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   853fc:	78fb      	ldrb	r3, [r7, #3]
   853fe:	2b07      	cmp	r3, #7
   85400:	d873      	bhi.n	854ea <store_can_msg+0x106>
   85402:	a201      	add	r2, pc, #4	; (adr r2, 85408 <store_can_msg+0x24>)
   85404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85408:	00085429 	.word	0x00085429
   8540c:	000854eb 	.word	0x000854eb
   85410:	000854eb 	.word	0x000854eb
   85414:	000854eb 	.word	0x000854eb
   85418:	000854eb 	.word	0x000854eb
   8541c:	00085459 	.word	0x00085459
   85420:	00085489 	.word	0x00085489
   85424:	000854b9 	.word	0x000854b9
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   85428:	4b32      	ldr	r3, [pc, #200]	; (854f4 <store_can_msg+0x110>)
   8542a:	6819      	ldr	r1, [r3, #0]
   8542c:	f107 0214 	add.w	r2, r7, #20
   85430:	f107 030c 	add.w	r3, r7, #12
   85434:	4608      	mov	r0, r1
   85436:	4611      	mov	r1, r2
   85438:	461a      	mov	r2, r3
   8543a:	2300      	movs	r3, #0
   8543c:	4c2e      	ldr	r4, [pc, #184]	; (854f8 <store_can_msg+0x114>)
   8543e:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   85440:	4b2c      	ldr	r3, [pc, #176]	; (854f4 <store_can_msg+0x110>)
   85442:	6819      	ldr	r1, [r3, #0]
   85444:	f107 0210 	add.w	r2, r7, #16
   85448:	f107 030c 	add.w	r3, r7, #12
   8544c:	4608      	mov	r0, r1
   8544e:	4611      	mov	r1, r2
   85450:	461a      	mov	r2, r3
   85452:	2300      	movs	r3, #0
   85454:	4c28      	ldr	r4, [pc, #160]	; (854f8 <store_can_msg+0x114>)
   85456:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   85458:	4b28      	ldr	r3, [pc, #160]	; (854fc <store_can_msg+0x118>)
   8545a:	6819      	ldr	r1, [r3, #0]
   8545c:	f107 0214 	add.w	r2, r7, #20
   85460:	f107 030c 	add.w	r3, r7, #12
   85464:	4608      	mov	r0, r1
   85466:	4611      	mov	r1, r2
   85468:	461a      	mov	r2, r3
   8546a:	2300      	movs	r3, #0
   8546c:	4c22      	ldr	r4, [pc, #136]	; (854f8 <store_can_msg+0x114>)
   8546e:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   85470:	4b22      	ldr	r3, [pc, #136]	; (854fc <store_can_msg+0x118>)
   85472:	6819      	ldr	r1, [r3, #0]
   85474:	f107 0210 	add.w	r2, r7, #16
   85478:	f107 030c 	add.w	r3, r7, #12
   8547c:	4608      	mov	r0, r1
   8547e:	4611      	mov	r1, r2
   85480:	461a      	mov	r2, r3
   85482:	2300      	movs	r3, #0
   85484:	4c1c      	ldr	r4, [pc, #112]	; (854f8 <store_can_msg+0x114>)
   85486:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   85488:	4b1d      	ldr	r3, [pc, #116]	; (85500 <store_can_msg+0x11c>)
   8548a:	6819      	ldr	r1, [r3, #0]
   8548c:	f107 0214 	add.w	r2, r7, #20
   85490:	f107 030c 	add.w	r3, r7, #12
   85494:	4608      	mov	r0, r1
   85496:	4611      	mov	r1, r2
   85498:	461a      	mov	r2, r3
   8549a:	2300      	movs	r3, #0
   8549c:	4c16      	ldr	r4, [pc, #88]	; (854f8 <store_can_msg+0x114>)
   8549e:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   854a0:	4b17      	ldr	r3, [pc, #92]	; (85500 <store_can_msg+0x11c>)
   854a2:	6819      	ldr	r1, [r3, #0]
   854a4:	f107 0210 	add.w	r2, r7, #16
   854a8:	f107 030c 	add.w	r3, r7, #12
   854ac:	4608      	mov	r0, r1
   854ae:	4611      	mov	r1, r2
   854b0:	461a      	mov	r2, r3
   854b2:	2300      	movs	r3, #0
   854b4:	4c10      	ldr	r4, [pc, #64]	; (854f8 <store_can_msg+0x114>)
   854b6:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);
   854b8:	4b12      	ldr	r3, [pc, #72]	; (85504 <store_can_msg+0x120>)
   854ba:	6819      	ldr	r1, [r3, #0]
   854bc:	f107 0214 	add.w	r2, r7, #20
   854c0:	f107 030c 	add.w	r3, r7, #12
   854c4:	4608      	mov	r0, r1
   854c6:	4611      	mov	r1, r2
   854c8:	461a      	mov	r2, r3
   854ca:	2300      	movs	r3, #0
   854cc:	4c0a      	ldr	r4, [pc, #40]	; (854f8 <store_can_msg+0x114>)
   854ce:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   854d0:	4b0c      	ldr	r3, [pc, #48]	; (85504 <store_can_msg+0x120>)
   854d2:	6819      	ldr	r1, [r3, #0]
   854d4:	f107 0210 	add.w	r2, r7, #16
   854d8:	f107 030c 	add.w	r3, r7, #12
   854dc:	4608      	mov	r0, r1
   854de:	4611      	mov	r1, r2
   854e0:	461a      	mov	r2, r3
   854e2:	2300      	movs	r3, #0
   854e4:	4c04      	ldr	r4, [pc, #16]	; (854f8 <store_can_msg+0x114>)
   854e6:	47a0      	blx	r4

	default :
		return;
   854e8:	bf00      	nop
   854ea:	bf00      	nop
	}
	return;
}
   854ec:	371c      	adds	r7, #28
   854ee:	46bd      	mov	sp, r7
   854f0:	bd90      	pop	{r4, r7, pc}
   854f2:	bf00      	nop
   854f4:	2007a6f0 	.word	0x2007a6f0
   854f8:	00083619 	.word	0x00083619
   854fc:	2007a750 	.word	0x2007a750
   85500:	2007a6b0 	.word	0x2007a6b0
   85504:	2007a744 	.word	0x2007a744

00085508 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85508:	b480      	push	{r7}
   8550a:	b083      	sub	sp, #12
   8550c:	af00      	add	r7, sp, #0
   8550e:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   85510:	687b      	ldr	r3, [r7, #4]
   85512:	2200      	movs	r2, #0
   85514:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   85516:	687b      	ldr	r3, [r7, #4]
   85518:	2200      	movs	r2, #0
   8551a:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   8551c:	687b      	ldr	r3, [r7, #4]
   8551e:	2200      	movs	r2, #0
   85520:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   85522:	687b      	ldr	r3, [r7, #4]
   85524:	2200      	movs	r2, #0
   85526:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   85528:	687b      	ldr	r3, [r7, #4]
   8552a:	2200      	movs	r2, #0
   8552c:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   8552e:	687b      	ldr	r3, [r7, #4]
   85530:	2200      	movs	r2, #0
   85532:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   85534:	687b      	ldr	r3, [r7, #4]
   85536:	2200      	movs	r2, #0
   85538:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   8553a:	687b      	ldr	r3, [r7, #4]
   8553c:	2200      	movs	r2, #0
   8553e:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   85540:	687b      	ldr	r3, [r7, #4]
   85542:	2200      	movs	r2, #0
   85544:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   85546:	687b      	ldr	r3, [r7, #4]
   85548:	2200      	movs	r2, #0
   8554a:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   8554c:	687b      	ldr	r3, [r7, #4]
   8554e:	2200      	movs	r2, #0
   85550:	61da      	str	r2, [r3, #28]
}
   85552:	370c      	adds	r7, #12
   85554:	46bd      	mov	sp, r7
   85556:	f85d 7b04 	ldr.w	r7, [sp], #4
   8555a:	4770      	bx	lr

0008555c <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   8555c:	b580      	push	{r7, lr}
   8555e:	b08c      	sub	sp, #48	; 0x30
   85560:	af00      	add	r7, sp, #0
   85562:	60f8      	str	r0, [r7, #12]
   85564:	60b9      	str	r1, [r7, #8]
   85566:	607a      	str	r2, [r7, #4]
   85568:	603b      	str	r3, [r7, #0]
	*/
	
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   8556a:	f107 0310 	add.w	r3, r7, #16
   8556e:	481e      	ldr	r0, [pc, #120]	; (855e8 <send_can_command+0x8c>)
   85570:	4619      	mov	r1, r3
   85572:	4b1e      	ldr	r3, [pc, #120]	; (855ec <send_can_command+0x90>)
   85574:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85576:	481c      	ldr	r0, [pc, #112]	; (855e8 <send_can_command+0x8c>)
   85578:	4b1d      	ldr	r3, [pc, #116]	; (855f0 <send_can_command+0x94>)
   8557a:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   8557c:	4b1a      	ldr	r3, [pc, #104]	; (855e8 <send_can_command+0x8c>)
   8557e:	2207      	movs	r2, #7
   85580:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85582:	4b19      	ldr	r3, [pc, #100]	; (855e8 <send_can_command+0x8c>)
   85584:	2203      	movs	r2, #3
   85586:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   85588:	683b      	ldr	r3, [r7, #0]
   8558a:	b2da      	uxtb	r2, r3
   8558c:	4b16      	ldr	r3, [pc, #88]	; (855e8 <send_can_command+0x8c>)
   8558e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85590:	4b15      	ldr	r3, [pc, #84]	; (855e8 <send_can_command+0x8c>)
   85592:	2200      	movs	r2, #0
   85594:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85596:	4b14      	ldr	r3, [pc, #80]	; (855e8 <send_can_command+0x8c>)
   85598:	2200      	movs	r2, #0
   8559a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8559c:	4815      	ldr	r0, [pc, #84]	; (855f4 <send_can_command+0x98>)
   8559e:	4912      	ldr	r1, [pc, #72]	; (855e8 <send_can_command+0x8c>)
   855a0:	4b15      	ldr	r3, [pc, #84]	; (855f8 <send_can_command+0x9c>)
   855a2:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   855a4:	687b      	ldr	r3, [r7, #4]
   855a6:	049a      	lsls	r2, r3, #18
   855a8:	4b14      	ldr	r3, [pc, #80]	; (855fc <send_can_command+0xa0>)
   855aa:	4013      	ands	r3, r2
   855ac:	4a0e      	ldr	r2, [pc, #56]	; (855e8 <send_can_command+0x8c>)
   855ae:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   855b0:	4b0d      	ldr	r3, [pc, #52]	; (855e8 <send_can_command+0x8c>)
   855b2:	68fa      	ldr	r2, [r7, #12]
   855b4:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   855b6:	4b0c      	ldr	r3, [pc, #48]	; (855e8 <send_can_command+0x8c>)
   855b8:	68ba      	ldr	r2, [r7, #8]
   855ba:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   855bc:	4b0a      	ldr	r3, [pc, #40]	; (855e8 <send_can_command+0x8c>)
   855be:	2208      	movs	r2, #8
   855c0:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   855c2:	480c      	ldr	r0, [pc, #48]	; (855f4 <send_can_command+0x98>)
   855c4:	4908      	ldr	r1, [pc, #32]	; (855e8 <send_can_command+0x8c>)
   855c6:	4b0e      	ldr	r3, [pc, #56]	; (85600 <send_can_command+0xa4>)
   855c8:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   855ca:	480a      	ldr	r0, [pc, #40]	; (855f4 <send_can_command+0x98>)
   855cc:	2180      	movs	r1, #128	; 0x80
   855ce:	4b0d      	ldr	r3, [pc, #52]	; (85604 <send_can_command+0xa8>)
   855d0:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   855d2:	f107 0310 	add.w	r3, r7, #16
   855d6:	4804      	ldr	r0, [pc, #16]	; (855e8 <send_can_command+0x8c>)
   855d8:	4619      	mov	r1, r3
   855da:	4b0b      	ldr	r3, [pc, #44]	; (85608 <send_can_command+0xac>)
   855dc:	4798      	blx	r3
	
	return 1;
   855de:	2301      	movs	r3, #1
}
   855e0:	4618      	mov	r0, r3
   855e2:	3730      	adds	r7, #48	; 0x30
   855e4:	46bd      	mov	sp, r7
   855e6:	bd80      	pop	{r7, pc}
   855e8:	2007a720 	.word	0x2007a720
   855ec:	00085751 	.word	0x00085751
   855f0:	00085509 	.word	0x00085509
   855f4:	400b4000 	.word	0x400b4000
   855f8:	0008193d 	.word	0x0008193d
   855fc:	1ffc0000 	.word	0x1ffc0000
   85600:	00081b21 	.word	0x00081b21
   85604:	000818b1 	.word	0x000818b1
   85608:	000857c1 	.word	0x000857c1

0008560c <read_can_data>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   8560c:	b590      	push	{r4, r7, lr}
   8560e:	b085      	sub	sp, #20
   85610:	af00      	add	r7, sp, #0
   85612:	60f8      	str	r0, [r7, #12]
   85614:	60b9      	str	r1, [r7, #8]
   85616:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85618:	687a      	ldr	r2, [r7, #4]
   8561a:	f240 43d2 	movw	r3, #1234	; 0x4d2
   8561e:	429a      	cmp	r2, r3
   85620:	d111      	bne.n	85646 <read_can_data+0x3a>
	{
		xQueueReceive(can_data_fifo, message_low, (TickType_t) 1);
   85622:	4b0b      	ldr	r3, [pc, #44]	; (85650 <read_can_data+0x44>)
   85624:	681b      	ldr	r3, [r3, #0]
   85626:	4618      	mov	r0, r3
   85628:	68b9      	ldr	r1, [r7, #8]
   8562a:	2201      	movs	r2, #1
   8562c:	2300      	movs	r3, #0
   8562e:	4c09      	ldr	r4, [pc, #36]	; (85654 <read_can_data+0x48>)
   85630:	47a0      	blx	r4
		xQueueReceive(can_data_fifo, message_high, (TickType_t) 1);
   85632:	4b07      	ldr	r3, [pc, #28]	; (85650 <read_can_data+0x44>)
   85634:	681b      	ldr	r3, [r3, #0]
   85636:	4618      	mov	r0, r3
   85638:	68f9      	ldr	r1, [r7, #12]
   8563a:	2201      	movs	r2, #1
   8563c:	2300      	movs	r3, #0
   8563e:	4c05      	ldr	r4, [pc, #20]	; (85654 <read_can_data+0x48>)
   85640:	47a0      	blx	r4
		return 1;
   85642:	2301      	movs	r3, #1
   85644:	e000      	b.n	85648 <read_can_data+0x3c>
	}

	return 0;
   85646:	2300      	movs	r3, #0
}
   85648:	4618      	mov	r0, r3
   8564a:	3714      	adds	r7, #20
   8564c:	46bd      	mov	sp, r7
   8564e:	bd90      	pop	{r4, r7, pc}
   85650:	2007a6f0 	.word	0x2007a6f0
   85654:	00083715 	.word	0x00083715

00085658 <read_can_msg>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85658:	b590      	push	{r4, r7, lr}
   8565a:	b085      	sub	sp, #20
   8565c:	af00      	add	r7, sp, #0
   8565e:	60f8      	str	r0, [r7, #12]
   85660:	60b9      	str	r1, [r7, #8]
   85662:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85664:	687a      	ldr	r2, [r7, #4]
   85666:	f240 43d2 	movw	r3, #1234	; 0x4d2
   8566a:	429a      	cmp	r2, r3
   8566c:	d111      	bne.n	85692 <read_can_msg+0x3a>
	{
		xQueueReceive(can_msg_fifo, message_low, (TickType_t) 1);
   8566e:	4b0b      	ldr	r3, [pc, #44]	; (8569c <read_can_msg+0x44>)
   85670:	681b      	ldr	r3, [r3, #0]
   85672:	4618      	mov	r0, r3
   85674:	68b9      	ldr	r1, [r7, #8]
   85676:	2201      	movs	r2, #1
   85678:	2300      	movs	r3, #0
   8567a:	4c09      	ldr	r4, [pc, #36]	; (856a0 <read_can_msg+0x48>)
   8567c:	47a0      	blx	r4
		xQueueReceive(can_msg_fifo, message_high, (TickType_t) 1);
   8567e:	4b07      	ldr	r3, [pc, #28]	; (8569c <read_can_msg+0x44>)
   85680:	681b      	ldr	r3, [r3, #0]
   85682:	4618      	mov	r0, r3
   85684:	68f9      	ldr	r1, [r7, #12]
   85686:	2201      	movs	r2, #1
   85688:	2300      	movs	r3, #0
   8568a:	4c05      	ldr	r4, [pc, #20]	; (856a0 <read_can_msg+0x48>)
   8568c:	47a0      	blx	r4
		return 1;
   8568e:	2301      	movs	r3, #1
   85690:	e000      	b.n	85694 <read_can_msg+0x3c>
	}

	return 0;
   85692:	2300      	movs	r3, #0
}
   85694:	4618      	mov	r0, r3
   85696:	3714      	adds	r7, #20
   85698:	46bd      	mov	sp, r7
   8569a:	bd90      	pop	{r4, r7, pc}
   8569c:	2007a750 	.word	0x2007a750
   856a0:	00083715 	.word	0x00083715

000856a4 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   856a4:	b580      	push	{r7, lr}
   856a6:	b08a      	sub	sp, #40	; 0x28
   856a8:	af00      	add	r7, sp, #0
   856aa:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   856ac:	f107 0308 	add.w	r3, r7, #8
   856b0:	481e      	ldr	r0, [pc, #120]	; (8572c <request_housekeeping+0x88>)
   856b2:	4619      	mov	r1, r3
   856b4:	4b1e      	ldr	r3, [pc, #120]	; (85730 <request_housekeeping+0x8c>)
   856b6:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   856b8:	481c      	ldr	r0, [pc, #112]	; (8572c <request_housekeeping+0x88>)
   856ba:	4b1e      	ldr	r3, [pc, #120]	; (85734 <request_housekeeping+0x90>)
   856bc:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   856be:	4b1b      	ldr	r3, [pc, #108]	; (8572c <request_housekeeping+0x88>)
   856c0:	2206      	movs	r2, #6
   856c2:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   856c4:	4b19      	ldr	r3, [pc, #100]	; (8572c <request_housekeeping+0x88>)
   856c6:	2203      	movs	r2, #3
   856c8:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   856ca:	4b18      	ldr	r3, [pc, #96]	; (8572c <request_housekeeping+0x88>)
   856cc:	2214      	movs	r2, #20
   856ce:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   856d0:	4b16      	ldr	r3, [pc, #88]	; (8572c <request_housekeeping+0x88>)
   856d2:	2200      	movs	r2, #0
   856d4:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   856d6:	4b15      	ldr	r3, [pc, #84]	; (8572c <request_housekeeping+0x88>)
   856d8:	2200      	movs	r2, #0
   856da:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   856dc:	4816      	ldr	r0, [pc, #88]	; (85738 <request_housekeeping+0x94>)
   856de:	4913      	ldr	r1, [pc, #76]	; (8572c <request_housekeeping+0x88>)
   856e0:	4b16      	ldr	r3, [pc, #88]	; (8573c <request_housekeeping+0x98>)
   856e2:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   856e4:	687b      	ldr	r3, [r7, #4]
   856e6:	049a      	lsls	r2, r3, #18
   856e8:	4b15      	ldr	r3, [pc, #84]	; (85740 <request_housekeeping+0x9c>)
   856ea:	4013      	ands	r3, r2
   856ec:	4a0f      	ldr	r2, [pc, #60]	; (8572c <request_housekeeping+0x88>)
   856ee:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = HK_REQUEST;				// shifted over to the standard frame position.
   856f0:	4b0e      	ldr	r3, [pc, #56]	; (8572c <request_housekeeping+0x88>)
   856f2:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   856f6:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = HK_REQUEST;
   856f8:	4b0c      	ldr	r3, [pc, #48]	; (8572c <request_housekeeping+0x88>)
   856fa:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   856fe:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85700:	4b0a      	ldr	r3, [pc, #40]	; (8572c <request_housekeeping+0x88>)
   85702:	2208      	movs	r2, #8
   85704:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85706:	480c      	ldr	r0, [pc, #48]	; (85738 <request_housekeeping+0x94>)
   85708:	4908      	ldr	r1, [pc, #32]	; (8572c <request_housekeeping+0x88>)
   8570a:	4b0e      	ldr	r3, [pc, #56]	; (85744 <request_housekeeping+0xa0>)
   8570c:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   8570e:	480a      	ldr	r0, [pc, #40]	; (85738 <request_housekeeping+0x94>)
   85710:	2140      	movs	r1, #64	; 0x40
   85712:	4b0d      	ldr	r3, [pc, #52]	; (85748 <request_housekeeping+0xa4>)
   85714:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   85716:	f107 0308 	add.w	r3, r7, #8
   8571a:	4804      	ldr	r0, [pc, #16]	; (8572c <request_housekeeping+0x88>)
   8571c:	4619      	mov	r1, r3
   8571e:	4b0b      	ldr	r3, [pc, #44]	; (8574c <request_housekeeping+0xa8>)
   85720:	4798      	blx	r3
		
	return 1;
   85722:	2301      	movs	r3, #1
}
   85724:	4618      	mov	r0, r3
   85726:	3728      	adds	r7, #40	; 0x28
   85728:	46bd      	mov	sp, r7
   8572a:	bd80      	pop	{r7, pc}
   8572c:	2007a720 	.word	0x2007a720
   85730:	00085751 	.word	0x00085751
   85734:	00085509 	.word	0x00085509
   85738:	400b4000 	.word	0x400b4000
   8573c:	0008193d 	.word	0x0008193d
   85740:	1ffc0000 	.word	0x1ffc0000
   85744:	00081b21 	.word	0x00081b21
   85748:	000818b1 	.word	0x000818b1
   8574c:	000857c1 	.word	0x000857c1

00085750 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85750:	b480      	push	{r7}
   85752:	b083      	sub	sp, #12
   85754:	af00      	add	r7, sp, #0
   85756:	6078      	str	r0, [r7, #4]
   85758:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   8575a:	687b      	ldr	r3, [r7, #4]
   8575c:	681a      	ldr	r2, [r3, #0]
   8575e:	683b      	ldr	r3, [r7, #0]
   85760:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   85762:	687b      	ldr	r3, [r7, #4]
   85764:	791a      	ldrb	r2, [r3, #4]
   85766:	683b      	ldr	r3, [r7, #0]
   85768:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   8576a:	687b      	ldr	r3, [r7, #4]
   8576c:	795a      	ldrb	r2, [r3, #5]
   8576e:	683b      	ldr	r3, [r7, #0]
   85770:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   85772:	687b      	ldr	r3, [r7, #4]
   85774:	799a      	ldrb	r2, [r3, #6]
   85776:	683b      	ldr	r3, [r7, #0]
   85778:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   8577a:	687b      	ldr	r3, [r7, #4]
   8577c:	79da      	ldrb	r2, [r3, #7]
   8577e:	683b      	ldr	r3, [r7, #0]
   85780:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   85782:	687b      	ldr	r3, [r7, #4]
   85784:	689a      	ldr	r2, [r3, #8]
   85786:	683b      	ldr	r3, [r7, #0]
   85788:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   8578a:	687b      	ldr	r3, [r7, #4]
   8578c:	68da      	ldr	r2, [r3, #12]
   8578e:	683b      	ldr	r3, [r7, #0]
   85790:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   85792:	687b      	ldr	r3, [r7, #4]
   85794:	691a      	ldr	r2, [r3, #16]
   85796:	683b      	ldr	r3, [r7, #0]
   85798:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   8579a:	687b      	ldr	r3, [r7, #4]
   8579c:	695a      	ldr	r2, [r3, #20]
   8579e:	683b      	ldr	r3, [r7, #0]
   857a0:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   857a2:	687b      	ldr	r3, [r7, #4]
   857a4:	699a      	ldr	r2, [r3, #24]
   857a6:	683b      	ldr	r3, [r7, #0]
   857a8:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   857aa:	687b      	ldr	r3, [r7, #4]
   857ac:	69da      	ldr	r2, [r3, #28]
   857ae:	683b      	ldr	r3, [r7, #0]
   857b0:	61da      	str	r2, [r3, #28]
	
	return;
   857b2:	bf00      	nop
}
   857b4:	370c      	adds	r7, #12
   857b6:	46bd      	mov	sp, r7
   857b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   857bc:	4770      	bx	lr
   857be:	bf00      	nop

000857c0 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   857c0:	b480      	push	{r7}
   857c2:	b083      	sub	sp, #12
   857c4:	af00      	add	r7, sp, #0
   857c6:	6078      	str	r0, [r7, #4]
   857c8:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   857ca:	683b      	ldr	r3, [r7, #0]
   857cc:	681a      	ldr	r2, [r3, #0]
   857ce:	687b      	ldr	r3, [r7, #4]
   857d0:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   857d2:	683b      	ldr	r3, [r7, #0]
   857d4:	791a      	ldrb	r2, [r3, #4]
   857d6:	687b      	ldr	r3, [r7, #4]
   857d8:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   857da:	683b      	ldr	r3, [r7, #0]
   857dc:	795a      	ldrb	r2, [r3, #5]
   857de:	687b      	ldr	r3, [r7, #4]
   857e0:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   857e2:	683b      	ldr	r3, [r7, #0]
   857e4:	799a      	ldrb	r2, [r3, #6]
   857e6:	687b      	ldr	r3, [r7, #4]
   857e8:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   857ea:	683b      	ldr	r3, [r7, #0]
   857ec:	79da      	ldrb	r2, [r3, #7]
   857ee:	687b      	ldr	r3, [r7, #4]
   857f0:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   857f2:	683b      	ldr	r3, [r7, #0]
   857f4:	689a      	ldr	r2, [r3, #8]
   857f6:	687b      	ldr	r3, [r7, #4]
   857f8:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   857fa:	683b      	ldr	r3, [r7, #0]
   857fc:	68da      	ldr	r2, [r3, #12]
   857fe:	687b      	ldr	r3, [r7, #4]
   85800:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85802:	683b      	ldr	r3, [r7, #0]
   85804:	691a      	ldr	r2, [r3, #16]
   85806:	687b      	ldr	r3, [r7, #4]
   85808:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   8580a:	683b      	ldr	r3, [r7, #0]
   8580c:	695a      	ldr	r2, [r3, #20]
   8580e:	687b      	ldr	r3, [r7, #4]
   85810:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   85812:	683b      	ldr	r3, [r7, #0]
   85814:	699a      	ldr	r2, [r3, #24]
   85816:	687b      	ldr	r3, [r7, #4]
   85818:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   8581a:	683b      	ldr	r3, [r7, #0]
   8581c:	69da      	ldr	r2, [r3, #28]
   8581e:	687b      	ldr	r3, [r7, #4]
   85820:	61da      	str	r2, [r3, #28]
	
	return;
   85822:	bf00      	nop
}
   85824:	370c      	adds	r7, #12
   85826:	46bd      	mov	sp, r7
   85828:	f85d 7b04 	ldr.w	r7, [sp], #4
   8582c:	4770      	bx	lr
   8582e:	bf00      	nop

00085830 <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   85830:	b580      	push	{r7, lr}
   85832:	b086      	sub	sp, #24
   85834:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   85836:	2301      	movs	r3, #1
   85838:	613b      	str	r3, [r7, #16]
   8583a:	2300      	movs	r3, #0
   8583c:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   8583e:	484f      	ldr	r0, [pc, #316]	; (8597c <can_initialize+0x14c>)
   85840:	2134      	movs	r1, #52	; 0x34
   85842:	4b4f      	ldr	r3, [pc, #316]	; (85980 <can_initialize+0x150>)
   85844:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   85846:	484d      	ldr	r0, [pc, #308]	; (8597c <can_initialize+0x14c>)
   85848:	2135      	movs	r1, #53	; 0x35
   8584a:	4b4e      	ldr	r3, [pc, #312]	; (85984 <can_initialize+0x154>)
   8584c:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   8584e:	484b      	ldr	r0, [pc, #300]	; (8597c <can_initialize+0x14c>)
   85850:	4b4d      	ldr	r3, [pc, #308]	; (85988 <can_initialize+0x158>)
   85852:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   85854:	4849      	ldr	r0, [pc, #292]	; (8597c <can_initialize+0x14c>)
   85856:	4b4d      	ldr	r3, [pc, #308]	; (8598c <can_initialize+0x15c>)
   85858:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   8585a:	484d      	ldr	r0, [pc, #308]	; (85990 <can_initialize+0x160>)
   8585c:	218f      	movs	r1, #143	; 0x8f
   8585e:	4b48      	ldr	r3, [pc, #288]	; (85980 <can_initialize+0x150>)
   85860:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   85862:	484b      	ldr	r0, [pc, #300]	; (85990 <can_initialize+0x160>)
   85864:	2190      	movs	r1, #144	; 0x90
   85866:	4b47      	ldr	r3, [pc, #284]	; (85984 <can_initialize+0x154>)
   85868:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   8586a:	4849      	ldr	r0, [pc, #292]	; (85990 <can_initialize+0x160>)
   8586c:	4b46      	ldr	r3, [pc, #280]	; (85988 <can_initialize+0x158>)
   8586e:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   85870:	4847      	ldr	r0, [pc, #284]	; (85990 <can_initialize+0x160>)
   85872:	4b46      	ldr	r3, [pc, #280]	; (8598c <can_initialize+0x15c>)
   85874:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   85876:	202b      	movs	r0, #43	; 0x2b
   85878:	4b46      	ldr	r3, [pc, #280]	; (85994 <can_initialize+0x164>)
   8587a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   8587c:	202c      	movs	r0, #44	; 0x2c
   8587e:	4b45      	ldr	r3, [pc, #276]	; (85994 <can_initialize+0x164>)
   85880:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   85882:	4b45      	ldr	r3, [pc, #276]	; (85998 <can_initialize+0x168>)
   85884:	4798      	blx	r3
   85886:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85888:	4844      	ldr	r0, [pc, #272]	; (8599c <can_initialize+0x16c>)
   8588a:	68f9      	ldr	r1, [r7, #12]
   8588c:	22fa      	movs	r2, #250	; 0xfa
   8588e:	4b44      	ldr	r3, [pc, #272]	; (859a0 <can_initialize+0x170>)
   85890:	4798      	blx	r3
   85892:	4603      	mov	r3, r0
   85894:	2b00      	cmp	r3, #0
   85896:	d06d      	beq.n	85974 <can_initialize+0x144>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   85898:	4842      	ldr	r0, [pc, #264]	; (859a4 <can_initialize+0x174>)
   8589a:	68f9      	ldr	r1, [r7, #12]
   8589c:	22fa      	movs	r2, #250	; 0xfa
   8589e:	4b40      	ldr	r3, [pc, #256]	; (859a0 <can_initialize+0x170>)
   858a0:	4798      	blx	r3
   858a2:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   858a4:	2b00      	cmp	r3, #0
   858a6:	d065      	beq.n	85974 <can_initialize+0x144>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   858a8:	483c      	ldr	r0, [pc, #240]	; (8599c <can_initialize+0x16c>)
   858aa:	f04f 31ff 	mov.w	r1, #4294967295
   858ae:	4b3e      	ldr	r3, [pc, #248]	; (859a8 <can_initialize+0x178>)
   858b0:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   858b2:	483c      	ldr	r0, [pc, #240]	; (859a4 <can_initialize+0x174>)
   858b4:	f04f 31ff 	mov.w	r1, #4294967295
   858b8:	4b3b      	ldr	r3, [pc, #236]	; (859a8 <can_initialize+0x178>)
   858ba:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   858bc:	202b      	movs	r0, #43	; 0x2b
   858be:	4b3b      	ldr	r3, [pc, #236]	; (859ac <can_initialize+0x17c>)
   858c0:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   858c2:	202c      	movs	r0, #44	; 0x2c
   858c4:	4b39      	ldr	r3, [pc, #228]	; (859ac <can_initialize+0x17c>)
   858c6:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   858c8:	4834      	ldr	r0, [pc, #208]	; (8599c <can_initialize+0x16c>)
   858ca:	4b39      	ldr	r3, [pc, #228]	; (859b0 <can_initialize+0x180>)
   858cc:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   858ce:	4835      	ldr	r0, [pc, #212]	; (859a4 <can_initialize+0x174>)
   858d0:	4b37      	ldr	r3, [pc, #220]	; (859b0 <can_initialize+0x180>)
   858d2:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   858d4:	6938      	ldr	r0, [r7, #16]
   858d6:	4b37      	ldr	r3, [pc, #220]	; (859b4 <can_initialize+0x184>)
   858d8:	4798      	blx	r3
   858da:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   858dc:	4b36      	ldr	r3, [pc, #216]	; (859b8 <can_initialize+0x188>)
   858de:	2200      	movs	r2, #0
   858e0:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comf = 0;
   858e2:	4b36      	ldr	r3, [pc, #216]	; (859bc <can_initialize+0x18c>)
   858e4:	2200      	movs	r2, #0
   858e6:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 8; i++)
   858e8:	2300      	movs	r3, #0
   858ea:	617b      	str	r3, [r7, #20]
   858ec:	e01b      	b.n	85926 <can_initialize+0xf6>
		{
			can_glob_com_reg[i] = 0;
   858ee:	4b34      	ldr	r3, [pc, #208]	; (859c0 <can_initialize+0x190>)
   858f0:	697a      	ldr	r2, [r7, #20]
   858f2:	2100      	movs	r1, #0
   858f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			can_glob_data_reg[i] = 0;
   858f8:	4b32      	ldr	r3, [pc, #200]	; (859c4 <can_initialize+0x194>)
   858fa:	697a      	ldr	r2, [r7, #20]
   858fc:	2100      	movs	r1, #0
   858fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			can_glob_hk_reg[i] = 0;
   85902:	4b31      	ldr	r3, [pc, #196]	; (859c8 <can_initialize+0x198>)
   85904:	697a      	ldr	r2, [r7, #20]
   85906:	2100      	movs	r1, #0
   85908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_data[i] = 0;
   8590c:	4b2f      	ldr	r3, [pc, #188]	; (859cc <can_initialize+0x19c>)
   8590e:	697a      	ldr	r2, [r7, #20]
   85910:	2100      	movs	r1, #0
   85912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   85916:	4b2e      	ldr	r3, [pc, #184]	; (859d0 <can_initialize+0x1a0>)
   85918:	697a      	ldr	r2, [r7, #20]
   8591a:	2100      	movs	r1, #0
   8591c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		
		/* Initialize the message reception flag */
		glob_comf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 8; i++)
   85920:	697b      	ldr	r3, [r7, #20]
   85922:	3301      	adds	r3, #1
   85924:	617b      	str	r3, [r7, #20]
   85926:	697b      	ldr	r3, [r7, #20]
   85928:	2b07      	cmp	r3, #7
   8592a:	d9e0      	bls.n	858ee <can_initialize+0xbe>
			glob_stored_data[i] = 0;
			glob_stored_message[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   8592c:	2364      	movs	r3, #100	; 0x64
   8592e:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   85930:	2304      	movs	r3, #4
   85932:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   85934:	68b8      	ldr	r0, [r7, #8]
   85936:	6879      	ldr	r1, [r7, #4]
   85938:	2200      	movs	r2, #0
   8593a:	4b26      	ldr	r3, [pc, #152]	; (859d4 <can_initialize+0x1a4>)
   8593c:	4798      	blx	r3
   8593e:	4602      	mov	r2, r0
   85940:	4b25      	ldr	r3, [pc, #148]	; (859d8 <can_initialize+0x1a8>)
   85942:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   85944:	68b8      	ldr	r0, [r7, #8]
   85946:	6879      	ldr	r1, [r7, #4]
   85948:	2200      	movs	r2, #0
   8594a:	4b22      	ldr	r3, [pc, #136]	; (859d4 <can_initialize+0x1a4>)
   8594c:	4798      	blx	r3
   8594e:	4602      	mov	r2, r0
   85950:	4b22      	ldr	r3, [pc, #136]	; (859dc <can_initialize+0x1ac>)
   85952:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   85954:	68b8      	ldr	r0, [r7, #8]
   85956:	6879      	ldr	r1, [r7, #4]
   85958:	2200      	movs	r2, #0
   8595a:	4b1e      	ldr	r3, [pc, #120]	; (859d4 <can_initialize+0x1a4>)
   8595c:	4798      	blx	r3
   8595e:	4602      	mov	r2, r0
   85960:	4b1f      	ldr	r3, [pc, #124]	; (859e0 <can_initialize+0x1b0>)
   85962:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   85964:	68b8      	ldr	r0, [r7, #8]
   85966:	6879      	ldr	r1, [r7, #4]
   85968:	2200      	movs	r2, #0
   8596a:	4b1a      	ldr	r3, [pc, #104]	; (859d4 <can_initialize+0x1a4>)
   8596c:	4798      	blx	r3
   8596e:	4602      	mov	r2, r0
   85970:	4b1c      	ldr	r3, [pc, #112]	; (859e4 <can_initialize+0x1b4>)
   85972:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   85974:	bf00      	nop
}
   85976:	3718      	adds	r7, #24
   85978:	46bd      	mov	sp, r7
   8597a:	bd80      	pop	{r7, pc}
   8597c:	2007a774 	.word	0x2007a774
   85980:	000815d9 	.word	0x000815d9
   85984:	000815f5 	.word	0x000815f5
   85988:	0008162d 	.word	0x0008162d
   8598c:	00081611 	.word	0x00081611
   85990:	2007a6e0 	.word	0x2007a6e0
   85994:	00082449 	.word	0x00082449
   85998:	0008513d 	.word	0x0008513d
   8599c:	400b4000 	.word	0x400b4000
   859a0:	00081799 	.word	0x00081799
   859a4:	400b8000 	.word	0x400b8000
   859a8:	0008187d 	.word	0x0008187d
   859ac:	0008507d 	.word	0x0008507d
   859b0:	00081bd9 	.word	0x00081bd9
   859b4:	000859e9 	.word	0x000859e9
   859b8:	2007a6dc 	.word	0x2007a6dc
   859bc:	2007a784 	.word	0x2007a784
   859c0:	2007a77c 	.word	0x2007a77c
   859c4:	2007a6e8 	.word	0x2007a6e8
   859c8:	2007a6a8 	.word	0x2007a6a8
   859cc:	2007a6b4 	.word	0x2007a6b4
   859d0:	2007a748 	.word	0x2007a748
   859d4:	000833c9 	.word	0x000833c9
   859d8:	2007a6f0 	.word	0x2007a6f0
   859dc:	2007a750 	.word	0x2007a750
   859e0:	2007a6b0 	.word	0x2007a6b0
   859e4:	2007a744 	.word	0x2007a744

000859e8 <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   859e8:	b580      	push	{r7, lr}
   859ea:	b082      	sub	sp, #8
   859ec:	af00      	add	r7, sp, #0
   859ee:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   859f0:	484a      	ldr	r0, [pc, #296]	; (85b1c <can_init_mailboxes+0x134>)
   859f2:	4b4b      	ldr	r3, [pc, #300]	; (85b20 <can_init_mailboxes+0x138>)
   859f4:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   859f6:	4b49      	ldr	r3, [pc, #292]	; (85b1c <can_init_mailboxes+0x134>)
   859f8:	2207      	movs	r2, #7
   859fa:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   859fc:	4b47      	ldr	r3, [pc, #284]	; (85b1c <can_init_mailboxes+0x134>)
   859fe:	2203      	movs	r2, #3
   85a00:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   85a02:	4b46      	ldr	r3, [pc, #280]	; (85b1c <can_init_mailboxes+0x134>)
   85a04:	2205      	movs	r2, #5
   85a06:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85a08:	4b44      	ldr	r3, [pc, #272]	; (85b1c <can_init_mailboxes+0x134>)
   85a0a:	2200      	movs	r2, #0
   85a0c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85a0e:	4b43      	ldr	r3, [pc, #268]	; (85b1c <can_init_mailboxes+0x134>)
   85a10:	2200      	movs	r2, #0
   85a12:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85a14:	4843      	ldr	r0, [pc, #268]	; (85b24 <can_init_mailboxes+0x13c>)
   85a16:	4941      	ldr	r1, [pc, #260]	; (85b1c <can_init_mailboxes+0x134>)
   85a18:	4b43      	ldr	r3, [pc, #268]	; (85b28 <can_init_mailboxes+0x140>)
   85a1a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a1c:	4843      	ldr	r0, [pc, #268]	; (85b2c <can_init_mailboxes+0x144>)
   85a1e:	4b40      	ldr	r3, [pc, #256]	; (85b20 <can_init_mailboxes+0x138>)
   85a20:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   85a22:	4b42      	ldr	r3, [pc, #264]	; (85b2c <can_init_mailboxes+0x144>)
   85a24:	2200      	movs	r2, #0
   85a26:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85a28:	4b40      	ldr	r3, [pc, #256]	; (85b2c <can_init_mailboxes+0x144>)
   85a2a:	2201      	movs	r2, #1
   85a2c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85a2e:	4b3f      	ldr	r3, [pc, #252]	; (85b2c <can_init_mailboxes+0x144>)
   85a30:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85a34:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85a36:	4b3d      	ldr	r3, [pc, #244]	; (85b2c <can_init_mailboxes+0x144>)
   85a38:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   85a3c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85a3e:	483c      	ldr	r0, [pc, #240]	; (85b30 <can_init_mailboxes+0x148>)
   85a40:	493a      	ldr	r1, [pc, #232]	; (85b2c <can_init_mailboxes+0x144>)
   85a42:	4b39      	ldr	r3, [pc, #228]	; (85b28 <can_init_mailboxes+0x140>)
   85a44:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a46:	4839      	ldr	r0, [pc, #228]	; (85b2c <can_init_mailboxes+0x144>)
   85a48:	4b35      	ldr	r3, [pc, #212]	; (85b20 <can_init_mailboxes+0x138>)
   85a4a:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   85a4c:	4b37      	ldr	r3, [pc, #220]	; (85b2c <can_init_mailboxes+0x144>)
   85a4e:	2205      	movs	r2, #5
   85a50:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85a52:	4b36      	ldr	r3, [pc, #216]	; (85b2c <can_init_mailboxes+0x144>)
   85a54:	2201      	movs	r2, #1
   85a56:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85a58:	4b34      	ldr	r3, [pc, #208]	; (85b2c <can_init_mailboxes+0x144>)
   85a5a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85a5e:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85a60:	4b32      	ldr	r3, [pc, #200]	; (85b2c <can_init_mailboxes+0x144>)
   85a62:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   85a66:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85a68:	4831      	ldr	r0, [pc, #196]	; (85b30 <can_init_mailboxes+0x148>)
   85a6a:	4930      	ldr	r1, [pc, #192]	; (85b2c <can_init_mailboxes+0x144>)
   85a6c:	4b2e      	ldr	r3, [pc, #184]	; (85b28 <can_init_mailboxes+0x140>)
   85a6e:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a70:	482e      	ldr	r0, [pc, #184]	; (85b2c <can_init_mailboxes+0x144>)
   85a72:	4b2b      	ldr	r3, [pc, #172]	; (85b20 <can_init_mailboxes+0x138>)
   85a74:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   85a76:	4b2d      	ldr	r3, [pc, #180]	; (85b2c <can_init_mailboxes+0x144>)
   85a78:	2206      	movs	r2, #6
   85a7a:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85a7c:	4b2b      	ldr	r3, [pc, #172]	; (85b2c <can_init_mailboxes+0x144>)
   85a7e:	2201      	movs	r2, #1
   85a80:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85a82:	4b2a      	ldr	r3, [pc, #168]	; (85b2c <can_init_mailboxes+0x144>)
   85a84:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85a88:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   85a8a:	4b28      	ldr	r3, [pc, #160]	; (85b2c <can_init_mailboxes+0x144>)
   85a8c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   85a90:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85a92:	4827      	ldr	r0, [pc, #156]	; (85b30 <can_init_mailboxes+0x148>)
   85a94:	4925      	ldr	r1, [pc, #148]	; (85b2c <can_init_mailboxes+0x144>)
   85a96:	4b24      	ldr	r3, [pc, #144]	; (85b28 <can_init_mailboxes+0x140>)
   85a98:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a9a:	4824      	ldr	r0, [pc, #144]	; (85b2c <can_init_mailboxes+0x144>)
   85a9c:	4b20      	ldr	r3, [pc, #128]	; (85b20 <can_init_mailboxes+0x138>)
   85a9e:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   85aa0:	4b22      	ldr	r3, [pc, #136]	; (85b2c <can_init_mailboxes+0x144>)
   85aa2:	2207      	movs	r2, #7
   85aa4:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85aa6:	4b21      	ldr	r3, [pc, #132]	; (85b2c <can_init_mailboxes+0x144>)
   85aa8:	2201      	movs	r2, #1
   85aaa:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85aac:	4b1f      	ldr	r3, [pc, #124]	; (85b2c <can_init_mailboxes+0x144>)
   85aae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85ab2:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   85ab4:	4b1d      	ldr	r3, [pc, #116]	; (85b2c <can_init_mailboxes+0x144>)
   85ab6:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   85aba:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85abc:	481c      	ldr	r0, [pc, #112]	; (85b30 <can_init_mailboxes+0x148>)
   85abe:	491b      	ldr	r1, [pc, #108]	; (85b2c <can_init_mailboxes+0x144>)
   85ac0:	4b19      	ldr	r3, [pc, #100]	; (85b28 <can_init_mailboxes+0x140>)
   85ac2:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   85ac4:	481a      	ldr	r0, [pc, #104]	; (85b30 <can_init_mailboxes+0x148>)
   85ac6:	2101      	movs	r1, #1
   85ac8:	4b1a      	ldr	r3, [pc, #104]	; (85b34 <can_init_mailboxes+0x14c>)
   85aca:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   85acc:	4818      	ldr	r0, [pc, #96]	; (85b30 <can_init_mailboxes+0x148>)
   85ace:	2120      	movs	r1, #32
   85ad0:	4b18      	ldr	r3, [pc, #96]	; (85b34 <can_init_mailboxes+0x14c>)
   85ad2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   85ad4:	4816      	ldr	r0, [pc, #88]	; (85b30 <can_init_mailboxes+0x148>)
   85ad6:	2140      	movs	r1, #64	; 0x40
   85ad8:	4b16      	ldr	r3, [pc, #88]	; (85b34 <can_init_mailboxes+0x14c>)
   85ada:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   85adc:	4814      	ldr	r0, [pc, #80]	; (85b30 <can_init_mailboxes+0x148>)
   85ade:	2180      	movs	r1, #128	; 0x80
   85ae0:	4b14      	ldr	r3, [pc, #80]	; (85b34 <can_init_mailboxes+0x14c>)
   85ae2:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85ae4:	480d      	ldr	r0, [pc, #52]	; (85b1c <can_init_mailboxes+0x134>)
   85ae6:	4b0e      	ldr	r3, [pc, #56]	; (85b20 <can_init_mailboxes+0x138>)
   85ae8:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85aea:	4b0c      	ldr	r3, [pc, #48]	; (85b1c <can_init_mailboxes+0x134>)
   85aec:	2206      	movs	r2, #6
   85aee:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85af0:	4b0a      	ldr	r3, [pc, #40]	; (85b1c <can_init_mailboxes+0x134>)
   85af2:	2203      	movs	r2, #3
   85af4:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85af6:	4b09      	ldr	r3, [pc, #36]	; (85b1c <can_init_mailboxes+0x134>)
   85af8:	2214      	movs	r2, #20
   85afa:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85afc:	4b07      	ldr	r3, [pc, #28]	; (85b1c <can_init_mailboxes+0x134>)
   85afe:	2200      	movs	r2, #0
   85b00:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85b02:	4b06      	ldr	r3, [pc, #24]	; (85b1c <can_init_mailboxes+0x134>)
   85b04:	2200      	movs	r2, #0
   85b06:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85b08:	4806      	ldr	r0, [pc, #24]	; (85b24 <can_init_mailboxes+0x13c>)
   85b0a:	4904      	ldr	r1, [pc, #16]	; (85b1c <can_init_mailboxes+0x134>)
   85b0c:	4b06      	ldr	r3, [pc, #24]	; (85b28 <can_init_mailboxes+0x140>)
   85b0e:	4798      	blx	r3

	return 1;
   85b10:	2301      	movs	r3, #1
}
   85b12:	4618      	mov	r0, r3
   85b14:	3708      	adds	r7, #8
   85b16:	46bd      	mov	sp, r7
   85b18:	bd80      	pop	{r7, pc}
   85b1a:	bf00      	nop
   85b1c:	2007a720 	.word	0x2007a720
   85b20:	00085509 	.word	0x00085509
   85b24:	400b4000 	.word	0x400b4000
   85b28:	0008193d 	.word	0x0008193d
   85b2c:	2007a6bc 	.word	0x2007a6bc
   85b30:	400b8000 	.word	0x400b8000
   85b34:	00081861 	.word	0x00081861

00085b38 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   85b38:	b480      	push	{r7}
   85b3a:	b085      	sub	sp, #20
   85b3c:	af00      	add	r7, sp, #0
   85b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   85b40:	687b      	ldr	r3, [r7, #4]
   85b42:	f003 0307 	and.w	r3, r3, #7
   85b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85b48:	4b0c      	ldr	r3, [pc, #48]	; (85b7c <NVIC_SetPriorityGrouping+0x44>)
   85b4a:	68db      	ldr	r3, [r3, #12]
   85b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   85b4e:	68ba      	ldr	r2, [r7, #8]
   85b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   85b54:	4013      	ands	r3, r2
   85b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   85b58:	68fb      	ldr	r3, [r7, #12]
   85b5a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   85b5c:	68bb      	ldr	r3, [r7, #8]
   85b5e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   85b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   85b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   85b68:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   85b6a:	4b04      	ldr	r3, [pc, #16]	; (85b7c <NVIC_SetPriorityGrouping+0x44>)
   85b6c:	68ba      	ldr	r2, [r7, #8]
   85b6e:	60da      	str	r2, [r3, #12]
}
   85b70:	3714      	adds	r7, #20
   85b72:	46bd      	mov	sp, r7
   85b74:	f85d 7b04 	ldr.w	r7, [sp], #4
   85b78:	4770      	bx	lr
   85b7a:	bf00      	nop
   85b7c:	e000ed00 	.word	0xe000ed00

00085b80 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   85b80:	b480      	push	{r7}
   85b82:	b083      	sub	sp, #12
   85b84:	af00      	add	r7, sp, #0
   85b86:	4603      	mov	r3, r0
   85b88:	6039      	str	r1, [r7, #0]
   85b8a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   85b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85b90:	2b00      	cmp	r3, #0
   85b92:	da0b      	bge.n	85bac <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   85b94:	490d      	ldr	r1, [pc, #52]	; (85bcc <NVIC_SetPriority+0x4c>)
   85b96:	79fb      	ldrb	r3, [r7, #7]
   85b98:	f003 030f 	and.w	r3, r3, #15
   85b9c:	3b04      	subs	r3, #4
   85b9e:	683a      	ldr	r2, [r7, #0]
   85ba0:	b2d2      	uxtb	r2, r2
   85ba2:	0112      	lsls	r2, r2, #4
   85ba4:	b2d2      	uxtb	r2, r2
   85ba6:	440b      	add	r3, r1
   85ba8:	761a      	strb	r2, [r3, #24]
   85baa:	e009      	b.n	85bc0 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   85bac:	4908      	ldr	r1, [pc, #32]	; (85bd0 <NVIC_SetPriority+0x50>)
   85bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85bb2:	683a      	ldr	r2, [r7, #0]
   85bb4:	b2d2      	uxtb	r2, r2
   85bb6:	0112      	lsls	r2, r2, #4
   85bb8:	b2d2      	uxtb	r2, r2
   85bba:	440b      	add	r3, r1
   85bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   85bc0:	370c      	adds	r7, #12
   85bc2:	46bd      	mov	sp, r7
   85bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   85bc8:	4770      	bx	lr
   85bca:	bf00      	nop
   85bcc:	e000ed00 	.word	0xe000ed00
   85bd0:	e000e100 	.word	0xe000e100

00085bd4 <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   85bd4:	b480      	push	{r7}
   85bd6:	b083      	sub	sp, #12
   85bd8:	af00      	add	r7, sp, #0
   85bda:	4603      	mov	r3, r0
   85bdc:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   85bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85be2:	2b00      	cmp	r3, #0
   85be4:	da0a      	bge.n	85bfc <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   85be6:	4a0d      	ldr	r2, [pc, #52]	; (85c1c <NVIC_GetPriority+0x48>)
   85be8:	79fb      	ldrb	r3, [r7, #7]
   85bea:	f003 030f 	and.w	r3, r3, #15
   85bee:	3b04      	subs	r3, #4
   85bf0:	4413      	add	r3, r2
   85bf2:	7e1b      	ldrb	r3, [r3, #24]
   85bf4:	b2db      	uxtb	r3, r3
   85bf6:	091b      	lsrs	r3, r3, #4
   85bf8:	b2db      	uxtb	r3, r3
   85bfa:	e008      	b.n	85c0e <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   85bfc:	4a08      	ldr	r2, [pc, #32]	; (85c20 <NVIC_GetPriority+0x4c>)
   85bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85c02:	4413      	add	r3, r2
   85c04:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   85c08:	b2db      	uxtb	r3, r3
   85c0a:	091b      	lsrs	r3, r3, #4
   85c0c:	b2db      	uxtb	r3, r3
}
   85c0e:	4618      	mov	r0, r3
   85c10:	370c      	adds	r7, #12
   85c12:	46bd      	mov	sp, r7
   85c14:	f85d 7b04 	ldr.w	r7, [sp], #4
   85c18:	4770      	bx	lr
   85c1a:	bf00      	nop
   85c1c:	e000ed00 	.word	0xe000ed00
   85c20:	e000e100 	.word	0xe000e100

00085c24 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   85c24:	b580      	push	{r7, lr}
   85c26:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   85c28:	4b0a      	ldr	r3, [pc, #40]	; (85c54 <main+0x30>)
   85c2a:	2200      	movs	r2, #0
   85c2c:	601a      	str	r2, [r3, #0]
	safe_mode();
   85c2e:	4b0a      	ldr	r3, [pc, #40]	; (85c58 <main+0x34>)
   85c30:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   85c32:	4b0a      	ldr	r3, [pc, #40]	; (85c5c <main+0x38>)
   85c34:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   85c36:	4b0a      	ldr	r3, [pc, #40]	; (85c60 <main+0x3c>)
   85c38:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   85c3a:	4b0a      	ldr	r3, [pc, #40]	; (85c64 <main+0x40>)
   85c3c:	4798      	blx	r3
	
	/* Create Tasks */
	my_blink();
   85c3e:	4b0a      	ldr	r3, [pc, #40]	; (85c68 <main+0x44>)
   85c40:	4798      	blx	r3
	housekeep();
   85c42:	4b0a      	ldr	r3, [pc, #40]	; (85c6c <main+0x48>)
   85c44:	4798      	blx	r3
	command_loop();
   85c46:	4b0a      	ldr	r3, [pc, #40]	; (85c70 <main+0x4c>)
   85c48:	4798      	blx	r3
	data_test();
   85c4a:	4b0a      	ldr	r3, [pc, #40]	; (85c74 <main+0x50>)
   85c4c:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   85c4e:	4b0a      	ldr	r3, [pc, #40]	; (85c78 <main+0x54>)
   85c50:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   85c52:	e7fe      	b.n	85c52 <main+0x2e>
   85c54:	2007a740 	.word	0x2007a740
   85c58:	00085c7d 	.word	0x00085c7d
   85c5c:	00085cfd 	.word	0x00085cfd
   85c60:	00085cb5 	.word	0x00085cb5
   85c64:	00085cdd 	.word	0x00085cdd
   85c68:	00085d95 	.word	0x00085d95
   85c6c:	000805e1 	.word	0x000805e1
   85c70:	000803b9 	.word	0x000803b9
   85c74:	00080481 	.word	0x00080481
   85c78:	00083e3d 	.word	0x00083e3d

00085c7c <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   85c7c:	b580      	push	{r7, lr}
   85c7e:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   85c80:	4b07      	ldr	r3, [pc, #28]	; (85ca0 <safe_mode+0x24>)
   85c82:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   85c84:	2000      	movs	r0, #0
   85c86:	4b07      	ldr	r3, [pc, #28]	; (85ca4 <safe_mode+0x28>)
   85c88:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   85c8a:	4b07      	ldr	r3, [pc, #28]	; (85ca8 <safe_mode+0x2c>)
   85c8c:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   85c8e:	4b07      	ldr	r3, [pc, #28]	; (85cac <safe_mode+0x30>)
   85c90:	4798      	blx	r3
		// We're good, SAFE_MODE = 0
		
	// else	
		//send_can_command(result_of_hash, to_coms);
	
	while(SAFE_MODE){}		// We should remain here until this variable is updated
   85c92:	bf00      	nop
   85c94:	4b06      	ldr	r3, [pc, #24]	; (85cb0 <safe_mode+0x34>)
   85c96:	681b      	ldr	r3, [r3, #0]
   85c98:	2b00      	cmp	r3, #0
   85c9a:	d1fb      	bne.n	85c94 <safe_mode+0x18>
							// by the interrupt.
}
   85c9c:	bd80      	pop	{r7, pc}
   85c9e:	bf00      	nop
   85ca0:	0008144d 	.word	0x0008144d
   85ca4:	00085b39 	.word	0x00085b39
   85ca8:	000814b5 	.word	0x000814b5
   85cac:	00085831 	.word	0x00085831
   85cb0:	2007a740 	.word	0x2007a740

00085cb4 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   85cb4:	b580      	push	{r7, lr}
   85cb6:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   85cb8:	4b04      	ldr	r3, [pc, #16]	; (85ccc <prvSetupHardware+0x18>)
   85cba:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   85cbc:	4b04      	ldr	r3, [pc, #16]	; (85cd0 <prvSetupHardware+0x1c>)
   85cbe:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   85cc0:	4b04      	ldr	r3, [pc, #16]	; (85cd4 <prvSetupHardware+0x20>)
   85cc2:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   85cc4:	4b04      	ldr	r3, [pc, #16]	; (85cd8 <prvSetupHardware+0x24>)
   85cc6:	4798      	blx	r3
}
   85cc8:	bd80      	pop	{r7, pc}
   85cca:	bf00      	nop
   85ccc:	0008151d 	.word	0x0008151d
   85cd0:	00080695 	.word	0x00080695
   85cd4:	000810cd 	.word	0x000810cd
   85cd8:	00080a25 	.word	0x00080a25

00085cdc <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   85cdc:	b580      	push	{r7, lr}
   85cde:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   85ce0:	2001      	movs	r0, #1
   85ce2:	2100      	movs	r1, #0
   85ce4:	2203      	movs	r2, #3
   85ce6:	4b03      	ldr	r3, [pc, #12]	; (85cf4 <prvInitializeMutexes+0x18>)
   85ce8:	4798      	blx	r3
   85cea:	4602      	mov	r2, r0
   85cec:	4b02      	ldr	r3, [pc, #8]	; (85cf8 <prvInitializeMutexes+0x1c>)
   85cee:	601a      	str	r2, [r3, #0]
	return;
   85cf0:	bf00      	nop
}
   85cf2:	bd80      	pop	{r7, pc}
   85cf4:	000833c9 	.word	0x000833c9
   85cf8:	2007a71c 	.word	0x2007a71c

00085cfc <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   85cfc:	b580      	push	{r7, lr}
   85cfe:	b082      	sub	sp, #8
   85d00:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   85d02:	230b      	movs	r3, #11
   85d04:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   85d06:	232c      	movs	r3, #44	; 0x2c
   85d08:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   85d0a:	232b      	movs	r3, #43	; 0x2b
   85d0c:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   85d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
   85d12:	4618      	mov	r0, r3
   85d14:	6879      	ldr	r1, [r7, #4]
   85d16:	4b0a      	ldr	r3, [pc, #40]	; (85d40 <prvInitializeInterruptPriorities+0x44>)
   85d18:	4798      	blx	r3
	
	priority = 12;	
   85d1a:	230c      	movs	r3, #12
   85d1c:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   85d1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
   85d22:	4618      	mov	r0, r3
   85d24:	6879      	ldr	r1, [r7, #4]
   85d26:	4b06      	ldr	r3, [pc, #24]	; (85d40 <prvInitializeInterruptPriorities+0x44>)
   85d28:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   85d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
   85d2e:	4618      	mov	r0, r3
   85d30:	4b04      	ldr	r3, [pc, #16]	; (85d44 <prvInitializeInterruptPriorities+0x48>)
   85d32:	4798      	blx	r3
   85d34:	6078      	str	r0, [r7, #4]
	
	return;
   85d36:	bf00      	nop
}
   85d38:	3708      	adds	r7, #8
   85d3a:	46bd      	mov	sp, r7
   85d3c:	bd80      	pop	{r7, pc}
   85d3e:	bf00      	nop
   85d40:	00085b81 	.word	0x00085b81
   85d44:	00085bd5 	.word	0x00085bd5

00085d48 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   85d48:	b580      	push	{r7, lr}
   85d4a:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   85d4c:	4b01      	ldr	r3, [pc, #4]	; (85d54 <vApplicationMallocFailedHook+0xc>)
   85d4e:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85d50:	e7fe      	b.n	85d50 <vApplicationMallocFailedHook+0x8>
   85d52:	bf00      	nop
   85d54:	00082e4d 	.word	0x00082e4d

00085d58 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   85d58:	b580      	push	{r7, lr}
   85d5a:	b082      	sub	sp, #8
   85d5c:	af00      	add	r7, sp, #0
   85d5e:	6078      	str	r0, [r7, #4]
   85d60:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   85d62:	4b01      	ldr	r3, [pc, #4]	; (85d68 <vApplicationStackOverflowHook+0x10>)
   85d64:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85d66:	e7fe      	b.n	85d66 <vApplicationStackOverflowHook+0xe>
   85d68:	00082e4d 	.word	0x00082e4d

00085d6c <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   85d6c:	b580      	push	{r7, lr}
   85d6e:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   85d70:	4804      	ldr	r0, [pc, #16]	; (85d84 <WDT_Handler+0x18>)
   85d72:	4b05      	ldr	r3, [pc, #20]	; (85d88 <WDT_Handler+0x1c>)
   85d74:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   85d76:	2055      	movs	r0, #85	; 0x55
   85d78:	4b04      	ldr	r3, [pc, #16]	; (85d8c <WDT_Handler+0x20>)
   85d7a:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   85d7c:	4801      	ldr	r0, [pc, #4]	; (85d84 <WDT_Handler+0x18>)
   85d7e:	4b04      	ldr	r3, [pc, #16]	; (85d90 <WDT_Handler+0x24>)
   85d80:	4798      	blx	r3
}
   85d82:	bd80      	pop	{r7, pc}
   85d84:	400e1a50 	.word	0x400e1a50
   85d88:	000827dd 	.word	0x000827dd
   85d8c:	00081e5d 	.word	0x00081e5d
   85d90:	000827b5 	.word	0x000827b5

00085d94 <my_blink>:

/**
 * \brief Toggles the state of the LED pin high/low.		
 */
void my_blink( void )
{		
   85d94:	b590      	push	{r4, r7, lr}
   85d96:	b085      	sub	sp, #20
   85d98:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this file. */
		
	xTaskCreate( prvTurnOnTask,						/* The function that implements the task. */
   85d9a:	2301      	movs	r3, #1
   85d9c:	9300      	str	r3, [sp, #0]
   85d9e:	2300      	movs	r3, #0
   85da0:	9301      	str	r3, [sp, #4]
   85da2:	2300      	movs	r3, #0
   85da4:	9302      	str	r3, [sp, #8]
   85da6:	2300      	movs	r3, #0
   85da8:	9303      	str	r3, [sp, #12]
   85daa:	480d      	ldr	r0, [pc, #52]	; (85de0 <my_blink+0x4c>)
   85dac:	490d      	ldr	r1, [pc, #52]	; (85de4 <my_blink+0x50>)
   85dae:	2282      	movs	r2, #130	; 0x82
   85db0:	f241 2334 	movw	r3, #4660	; 0x1234
   85db4:	4c0c      	ldr	r4, [pc, #48]	; (85de8 <my_blink+0x54>)
   85db6:	47a0      	blx	r4
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) TurnOn_PARAMETER, 		/* The parameter passed to the task - just to check the functionality. */
				TurnOn_TASK_PRIORITY, 				/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvTurnOffTask, 
   85db8:	2301      	movs	r3, #1
   85dba:	9300      	str	r3, [sp, #0]
   85dbc:	2300      	movs	r3, #0
   85dbe:	9301      	str	r3, [sp, #4]
   85dc0:	2300      	movs	r3, #0
   85dc2:	9302      	str	r3, [sp, #8]
   85dc4:	2300      	movs	r3, #0
   85dc6:	9303      	str	r3, [sp, #12]
   85dc8:	4808      	ldr	r0, [pc, #32]	; (85dec <my_blink+0x58>)
   85dca:	4909      	ldr	r1, [pc, #36]	; (85df0 <my_blink+0x5c>)
   85dcc:	2282      	movs	r2, #130	; 0x82
   85dce:	f245 6378 	movw	r3, #22136	; 0x5678
   85dd2:	4c05      	ldr	r4, [pc, #20]	; (85de8 <my_blink+0x54>)
   85dd4:	47a0      	blx	r4
				 "OFF", 
				 configMINIMAL_STACK_SIZE, 
				 ( void * ) TurnOff_PARAMETER, 
				 TurnOn_TASK_PRIORITY, 
				 NULL );
	return;					 
   85dd6:	bf00      	nop
}
   85dd8:	3704      	adds	r7, #4
   85dda:	46bd      	mov	sp, r7
   85ddc:	bd90      	pop	{r4, r7, pc}
   85dde:	bf00      	nop
   85de0:	00085df5 	.word	0x00085df5
   85de4:	000868e0 	.word	0x000868e0
   85de8:	00083bc1 	.word	0x00083bc1
   85dec:	00085e1d 	.word	0x00085e1d
   85df0:	000868e4 	.word	0x000868e4

00085df4 <prvTurnOnTask>:
/**
 * \brief Sets LED pin to high.
 * @param *pvParameters:	
 */
static void prvTurnOnTask( void *pvParameters )
{
   85df4:	b580      	push	{r7, lr}
   85df6:	b082      	sub	sp, #8
   85df8:	af00      	add	r7, sp, #0
   85dfa:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   85dfc:	687a      	ldr	r2, [r7, #4]
   85dfe:	f241 2334 	movw	r3, #4660	; 0x1234
   85e02:	429a      	cmp	r2, r3
   85e04:	d002      	beq.n	85e0c <prvTurnOnTask+0x18>
   85e06:	4b03      	ldr	r3, [pc, #12]	; (85e14 <prvTurnOnTask+0x20>)
   85e08:	4798      	blx	r3
   85e0a:	e7fe      	b.n	85e0a <prvTurnOnTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_high(LED0_GPIO);
   85e0c:	203b      	movs	r0, #59	; 0x3b
   85e0e:	4b02      	ldr	r3, [pc, #8]	; (85e18 <prvTurnOnTask+0x24>)
   85e10:	4798      	blx	r3
	}
   85e12:	e7fb      	b.n	85e0c <prvTurnOnTask+0x18>
   85e14:	00082e4d 	.word	0x00082e4d
   85e18:	00081df5 	.word	0x00081df5

00085e1c <prvTurnOffTask>:
/**
 * \brief Sets LED pin to low.
 * @param *pvParameters:
 */
static void prvTurnOffTask( void *pvParameters )
{
   85e1c:	b580      	push	{r7, lr}
   85e1e:	b082      	sub	sp, #8
   85e20:	af00      	add	r7, sp, #0
   85e22:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   85e24:	687a      	ldr	r2, [r7, #4]
   85e26:	f245 6378 	movw	r3, #22136	; 0x5678
   85e2a:	429a      	cmp	r2, r3
   85e2c:	d002      	beq.n	85e34 <prvTurnOffTask+0x18>
   85e2e:	4b03      	ldr	r3, [pc, #12]	; (85e3c <prvTurnOffTask+0x20>)
   85e30:	4798      	blx	r3
   85e32:	e7fe      	b.n	85e32 <prvTurnOffTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_low(LED0_GPIO);
   85e34:	203b      	movs	r0, #59	; 0x3b
   85e36:	4b02      	ldr	r3, [pc, #8]	; (85e40 <prvTurnOffTask+0x24>)
   85e38:	4798      	blx	r3
	}
   85e3a:	e7fb      	b.n	85e34 <prvTurnOffTask+0x18>
   85e3c:	00082e4d 	.word	0x00082e4d
   85e40:	00081e29 	.word	0x00081e29

00085e44 <__aeabi_frsub>:
   85e44:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   85e48:	e002      	b.n	85e50 <__addsf3>
   85e4a:	bf00      	nop

00085e4c <__aeabi_fsub>:
   85e4c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00085e50 <__addsf3>:
   85e50:	0042      	lsls	r2, r0, #1
   85e52:	bf1f      	itttt	ne
   85e54:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   85e58:	ea92 0f03 	teqne	r2, r3
   85e5c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   85e60:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85e64:	d06a      	beq.n	85f3c <__addsf3+0xec>
   85e66:	ea4f 6212 	mov.w	r2, r2, lsr #24
   85e6a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   85e6e:	bfc1      	itttt	gt
   85e70:	18d2      	addgt	r2, r2, r3
   85e72:	4041      	eorgt	r1, r0
   85e74:	4048      	eorgt	r0, r1
   85e76:	4041      	eorgt	r1, r0
   85e78:	bfb8      	it	lt
   85e7a:	425b      	neglt	r3, r3
   85e7c:	2b19      	cmp	r3, #25
   85e7e:	bf88      	it	hi
   85e80:	4770      	bxhi	lr
   85e82:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85e86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85e8a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   85e8e:	bf18      	it	ne
   85e90:	4240      	negne	r0, r0
   85e92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85e96:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   85e9a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   85e9e:	bf18      	it	ne
   85ea0:	4249      	negne	r1, r1
   85ea2:	ea92 0f03 	teq	r2, r3
   85ea6:	d03f      	beq.n	85f28 <__addsf3+0xd8>
   85ea8:	f1a2 0201 	sub.w	r2, r2, #1
   85eac:	fa41 fc03 	asr.w	ip, r1, r3
   85eb0:	eb10 000c 	adds.w	r0, r0, ip
   85eb4:	f1c3 0320 	rsb	r3, r3, #32
   85eb8:	fa01 f103 	lsl.w	r1, r1, r3
   85ebc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85ec0:	d502      	bpl.n	85ec8 <__addsf3+0x78>
   85ec2:	4249      	negs	r1, r1
   85ec4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85ec8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   85ecc:	d313      	bcc.n	85ef6 <__addsf3+0xa6>
   85ece:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   85ed2:	d306      	bcc.n	85ee2 <__addsf3+0x92>
   85ed4:	0840      	lsrs	r0, r0, #1
   85ed6:	ea4f 0131 	mov.w	r1, r1, rrx
   85eda:	f102 0201 	add.w	r2, r2, #1
   85ede:	2afe      	cmp	r2, #254	; 0xfe
   85ee0:	d251      	bcs.n	85f86 <__addsf3+0x136>
   85ee2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   85ee6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85eea:	bf08      	it	eq
   85eec:	f020 0001 	biceq.w	r0, r0, #1
   85ef0:	ea40 0003 	orr.w	r0, r0, r3
   85ef4:	4770      	bx	lr
   85ef6:	0049      	lsls	r1, r1, #1
   85ef8:	eb40 0000 	adc.w	r0, r0, r0
   85efc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   85f00:	f1a2 0201 	sub.w	r2, r2, #1
   85f04:	d1ed      	bne.n	85ee2 <__addsf3+0x92>
   85f06:	fab0 fc80 	clz	ip, r0
   85f0a:	f1ac 0c08 	sub.w	ip, ip, #8
   85f0e:	ebb2 020c 	subs.w	r2, r2, ip
   85f12:	fa00 f00c 	lsl.w	r0, r0, ip
   85f16:	bfaa      	itet	ge
   85f18:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   85f1c:	4252      	neglt	r2, r2
   85f1e:	4318      	orrge	r0, r3
   85f20:	bfbc      	itt	lt
   85f22:	40d0      	lsrlt	r0, r2
   85f24:	4318      	orrlt	r0, r3
   85f26:	4770      	bx	lr
   85f28:	f092 0f00 	teq	r2, #0
   85f2c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   85f30:	bf06      	itte	eq
   85f32:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   85f36:	3201      	addeq	r2, #1
   85f38:	3b01      	subne	r3, #1
   85f3a:	e7b5      	b.n	85ea8 <__addsf3+0x58>
   85f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   85f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85f44:	bf18      	it	ne
   85f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85f4a:	d021      	beq.n	85f90 <__addsf3+0x140>
   85f4c:	ea92 0f03 	teq	r2, r3
   85f50:	d004      	beq.n	85f5c <__addsf3+0x10c>
   85f52:	f092 0f00 	teq	r2, #0
   85f56:	bf08      	it	eq
   85f58:	4608      	moveq	r0, r1
   85f5a:	4770      	bx	lr
   85f5c:	ea90 0f01 	teq	r0, r1
   85f60:	bf1c      	itt	ne
   85f62:	2000      	movne	r0, #0
   85f64:	4770      	bxne	lr
   85f66:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   85f6a:	d104      	bne.n	85f76 <__addsf3+0x126>
   85f6c:	0040      	lsls	r0, r0, #1
   85f6e:	bf28      	it	cs
   85f70:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   85f74:	4770      	bx	lr
   85f76:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   85f7a:	bf3c      	itt	cc
   85f7c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   85f80:	4770      	bxcc	lr
   85f82:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85f86:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   85f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85f8e:	4770      	bx	lr
   85f90:	ea7f 6222 	mvns.w	r2, r2, asr #24
   85f94:	bf16      	itet	ne
   85f96:	4608      	movne	r0, r1
   85f98:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   85f9c:	4601      	movne	r1, r0
   85f9e:	0242      	lsls	r2, r0, #9
   85fa0:	bf06      	itte	eq
   85fa2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   85fa6:	ea90 0f01 	teqeq	r0, r1
   85faa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   85fae:	4770      	bx	lr

00085fb0 <__aeabi_ui2f>:
   85fb0:	f04f 0300 	mov.w	r3, #0
   85fb4:	e004      	b.n	85fc0 <__aeabi_i2f+0x8>
   85fb6:	bf00      	nop

00085fb8 <__aeabi_i2f>:
   85fb8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   85fbc:	bf48      	it	mi
   85fbe:	4240      	negmi	r0, r0
   85fc0:	ea5f 0c00 	movs.w	ip, r0
   85fc4:	bf08      	it	eq
   85fc6:	4770      	bxeq	lr
   85fc8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   85fcc:	4601      	mov	r1, r0
   85fce:	f04f 0000 	mov.w	r0, #0
   85fd2:	e01c      	b.n	8600e <__aeabi_l2f+0x2a>

00085fd4 <__aeabi_ul2f>:
   85fd4:	ea50 0201 	orrs.w	r2, r0, r1
   85fd8:	bf08      	it	eq
   85fda:	4770      	bxeq	lr
   85fdc:	f04f 0300 	mov.w	r3, #0
   85fe0:	e00a      	b.n	85ff8 <__aeabi_l2f+0x14>
   85fe2:	bf00      	nop

00085fe4 <__aeabi_l2f>:
   85fe4:	ea50 0201 	orrs.w	r2, r0, r1
   85fe8:	bf08      	it	eq
   85fea:	4770      	bxeq	lr
   85fec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   85ff0:	d502      	bpl.n	85ff8 <__aeabi_l2f+0x14>
   85ff2:	4240      	negs	r0, r0
   85ff4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85ff8:	ea5f 0c01 	movs.w	ip, r1
   85ffc:	bf02      	ittt	eq
   85ffe:	4684      	moveq	ip, r0
   86000:	4601      	moveq	r1, r0
   86002:	2000      	moveq	r0, #0
   86004:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   86008:	bf08      	it	eq
   8600a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8600e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   86012:	fabc f28c 	clz	r2, ip
   86016:	3a08      	subs	r2, #8
   86018:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8601c:	db10      	blt.n	86040 <__aeabi_l2f+0x5c>
   8601e:	fa01 fc02 	lsl.w	ip, r1, r2
   86022:	4463      	add	r3, ip
   86024:	fa00 fc02 	lsl.w	ip, r0, r2
   86028:	f1c2 0220 	rsb	r2, r2, #32
   8602c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86030:	fa20 f202 	lsr.w	r2, r0, r2
   86034:	eb43 0002 	adc.w	r0, r3, r2
   86038:	bf08      	it	eq
   8603a:	f020 0001 	biceq.w	r0, r0, #1
   8603e:	4770      	bx	lr
   86040:	f102 0220 	add.w	r2, r2, #32
   86044:	fa01 fc02 	lsl.w	ip, r1, r2
   86048:	f1c2 0220 	rsb	r2, r2, #32
   8604c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   86050:	fa21 f202 	lsr.w	r2, r1, r2
   86054:	eb43 0002 	adc.w	r0, r3, r2
   86058:	bf08      	it	eq
   8605a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8605e:	4770      	bx	lr

00086060 <__aeabi_fmul>:
   86060:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86064:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86068:	bf1e      	ittt	ne
   8606a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8606e:	ea92 0f0c 	teqne	r2, ip
   86072:	ea93 0f0c 	teqne	r3, ip
   86076:	d06f      	beq.n	86158 <__aeabi_fmul+0xf8>
   86078:	441a      	add	r2, r3
   8607a:	ea80 0c01 	eor.w	ip, r0, r1
   8607e:	0240      	lsls	r0, r0, #9
   86080:	bf18      	it	ne
   86082:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86086:	d01e      	beq.n	860c6 <__aeabi_fmul+0x66>
   86088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8608c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   86090:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86094:	fba0 3101 	umull	r3, r1, r0, r1
   86098:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8609c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   860a0:	bf3e      	ittt	cc
   860a2:	0049      	lslcc	r1, r1, #1
   860a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   860a8:	005b      	lslcc	r3, r3, #1
   860aa:	ea40 0001 	orr.w	r0, r0, r1
   860ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   860b2:	2afd      	cmp	r2, #253	; 0xfd
   860b4:	d81d      	bhi.n	860f2 <__aeabi_fmul+0x92>
   860b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   860ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   860be:	bf08      	it	eq
   860c0:	f020 0001 	biceq.w	r0, r0, #1
   860c4:	4770      	bx	lr
   860c6:	f090 0f00 	teq	r0, #0
   860ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   860ce:	bf08      	it	eq
   860d0:	0249      	lsleq	r1, r1, #9
   860d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   860d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   860da:	3a7f      	subs	r2, #127	; 0x7f
   860dc:	bfc2      	ittt	gt
   860de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   860e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   860e6:	4770      	bxgt	lr
   860e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   860ec:	f04f 0300 	mov.w	r3, #0
   860f0:	3a01      	subs	r2, #1
   860f2:	dc5d      	bgt.n	861b0 <__aeabi_fmul+0x150>
   860f4:	f112 0f19 	cmn.w	r2, #25
   860f8:	bfdc      	itt	le
   860fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   860fe:	4770      	bxle	lr
   86100:	f1c2 0200 	rsb	r2, r2, #0
   86104:	0041      	lsls	r1, r0, #1
   86106:	fa21 f102 	lsr.w	r1, r1, r2
   8610a:	f1c2 0220 	rsb	r2, r2, #32
   8610e:	fa00 fc02 	lsl.w	ip, r0, r2
   86112:	ea5f 0031 	movs.w	r0, r1, rrx
   86116:	f140 0000 	adc.w	r0, r0, #0
   8611a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8611e:	bf08      	it	eq
   86120:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86124:	4770      	bx	lr
   86126:	f092 0f00 	teq	r2, #0
   8612a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8612e:	bf02      	ittt	eq
   86130:	0040      	lsleq	r0, r0, #1
   86132:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86136:	3a01      	subeq	r2, #1
   86138:	d0f9      	beq.n	8612e <__aeabi_fmul+0xce>
   8613a:	ea40 000c 	orr.w	r0, r0, ip
   8613e:	f093 0f00 	teq	r3, #0
   86142:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86146:	bf02      	ittt	eq
   86148:	0049      	lsleq	r1, r1, #1
   8614a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8614e:	3b01      	subeq	r3, #1
   86150:	d0f9      	beq.n	86146 <__aeabi_fmul+0xe6>
   86152:	ea41 010c 	orr.w	r1, r1, ip
   86156:	e78f      	b.n	86078 <__aeabi_fmul+0x18>
   86158:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8615c:	ea92 0f0c 	teq	r2, ip
   86160:	bf18      	it	ne
   86162:	ea93 0f0c 	teqne	r3, ip
   86166:	d00a      	beq.n	8617e <__aeabi_fmul+0x11e>
   86168:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8616c:	bf18      	it	ne
   8616e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86172:	d1d8      	bne.n	86126 <__aeabi_fmul+0xc6>
   86174:	ea80 0001 	eor.w	r0, r0, r1
   86178:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8617c:	4770      	bx	lr
   8617e:	f090 0f00 	teq	r0, #0
   86182:	bf17      	itett	ne
   86184:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   86188:	4608      	moveq	r0, r1
   8618a:	f091 0f00 	teqne	r1, #0
   8618e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   86192:	d014      	beq.n	861be <__aeabi_fmul+0x15e>
   86194:	ea92 0f0c 	teq	r2, ip
   86198:	d101      	bne.n	8619e <__aeabi_fmul+0x13e>
   8619a:	0242      	lsls	r2, r0, #9
   8619c:	d10f      	bne.n	861be <__aeabi_fmul+0x15e>
   8619e:	ea93 0f0c 	teq	r3, ip
   861a2:	d103      	bne.n	861ac <__aeabi_fmul+0x14c>
   861a4:	024b      	lsls	r3, r1, #9
   861a6:	bf18      	it	ne
   861a8:	4608      	movne	r0, r1
   861aa:	d108      	bne.n	861be <__aeabi_fmul+0x15e>
   861ac:	ea80 0001 	eor.w	r0, r0, r1
   861b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   861b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   861b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   861bc:	4770      	bx	lr
   861be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   861c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   861c6:	4770      	bx	lr

000861c8 <__aeabi_fdiv>:
   861c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   861cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   861d0:	bf1e      	ittt	ne
   861d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   861d6:	ea92 0f0c 	teqne	r2, ip
   861da:	ea93 0f0c 	teqne	r3, ip
   861de:	d069      	beq.n	862b4 <__aeabi_fdiv+0xec>
   861e0:	eba2 0203 	sub.w	r2, r2, r3
   861e4:	ea80 0c01 	eor.w	ip, r0, r1
   861e8:	0249      	lsls	r1, r1, #9
   861ea:	ea4f 2040 	mov.w	r0, r0, lsl #9
   861ee:	d037      	beq.n	86260 <__aeabi_fdiv+0x98>
   861f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   861f4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   861f8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   861fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86200:	428b      	cmp	r3, r1
   86202:	bf38      	it	cc
   86204:	005b      	lslcc	r3, r3, #1
   86206:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8620a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8620e:	428b      	cmp	r3, r1
   86210:	bf24      	itt	cs
   86212:	1a5b      	subcs	r3, r3, r1
   86214:	ea40 000c 	orrcs.w	r0, r0, ip
   86218:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8621c:	bf24      	itt	cs
   8621e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   86222:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   86226:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8622a:	bf24      	itt	cs
   8622c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   86230:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86234:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   86238:	bf24      	itt	cs
   8623a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8623e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86242:	011b      	lsls	r3, r3, #4
   86244:	bf18      	it	ne
   86246:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8624a:	d1e0      	bne.n	8620e <__aeabi_fdiv+0x46>
   8624c:	2afd      	cmp	r2, #253	; 0xfd
   8624e:	f63f af50 	bhi.w	860f2 <__aeabi_fmul+0x92>
   86252:	428b      	cmp	r3, r1
   86254:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86258:	bf08      	it	eq
   8625a:	f020 0001 	biceq.w	r0, r0, #1
   8625e:	4770      	bx	lr
   86260:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86264:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86268:	327f      	adds	r2, #127	; 0x7f
   8626a:	bfc2      	ittt	gt
   8626c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86270:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86274:	4770      	bxgt	lr
   86276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8627a:	f04f 0300 	mov.w	r3, #0
   8627e:	3a01      	subs	r2, #1
   86280:	e737      	b.n	860f2 <__aeabi_fmul+0x92>
   86282:	f092 0f00 	teq	r2, #0
   86286:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8628a:	bf02      	ittt	eq
   8628c:	0040      	lsleq	r0, r0, #1
   8628e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86292:	3a01      	subeq	r2, #1
   86294:	d0f9      	beq.n	8628a <__aeabi_fdiv+0xc2>
   86296:	ea40 000c 	orr.w	r0, r0, ip
   8629a:	f093 0f00 	teq	r3, #0
   8629e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   862a2:	bf02      	ittt	eq
   862a4:	0049      	lsleq	r1, r1, #1
   862a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   862aa:	3b01      	subeq	r3, #1
   862ac:	d0f9      	beq.n	862a2 <__aeabi_fdiv+0xda>
   862ae:	ea41 010c 	orr.w	r1, r1, ip
   862b2:	e795      	b.n	861e0 <__aeabi_fdiv+0x18>
   862b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   862b8:	ea92 0f0c 	teq	r2, ip
   862bc:	d108      	bne.n	862d0 <__aeabi_fdiv+0x108>
   862be:	0242      	lsls	r2, r0, #9
   862c0:	f47f af7d 	bne.w	861be <__aeabi_fmul+0x15e>
   862c4:	ea93 0f0c 	teq	r3, ip
   862c8:	f47f af70 	bne.w	861ac <__aeabi_fmul+0x14c>
   862cc:	4608      	mov	r0, r1
   862ce:	e776      	b.n	861be <__aeabi_fmul+0x15e>
   862d0:	ea93 0f0c 	teq	r3, ip
   862d4:	d104      	bne.n	862e0 <__aeabi_fdiv+0x118>
   862d6:	024b      	lsls	r3, r1, #9
   862d8:	f43f af4c 	beq.w	86174 <__aeabi_fmul+0x114>
   862dc:	4608      	mov	r0, r1
   862de:	e76e      	b.n	861be <__aeabi_fmul+0x15e>
   862e0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   862e4:	bf18      	it	ne
   862e6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   862ea:	d1ca      	bne.n	86282 <__aeabi_fdiv+0xba>
   862ec:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   862f0:	f47f af5c 	bne.w	861ac <__aeabi_fmul+0x14c>
   862f4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   862f8:	f47f af3c 	bne.w	86174 <__aeabi_fmul+0x114>
   862fc:	e75f      	b.n	861be <__aeabi_fmul+0x15e>
   862fe:	bf00      	nop

00086300 <__gesf2>:
   86300:	f04f 3cff 	mov.w	ip, #4294967295
   86304:	e006      	b.n	86314 <__cmpsf2+0x4>
   86306:	bf00      	nop

00086308 <__lesf2>:
   86308:	f04f 0c01 	mov.w	ip, #1
   8630c:	e002      	b.n	86314 <__cmpsf2+0x4>
   8630e:	bf00      	nop

00086310 <__cmpsf2>:
   86310:	f04f 0c01 	mov.w	ip, #1
   86314:	f84d cd04 	str.w	ip, [sp, #-4]!
   86318:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8631c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86324:	bf18      	it	ne
   86326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8632a:	d011      	beq.n	86350 <__cmpsf2+0x40>
   8632c:	b001      	add	sp, #4
   8632e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   86332:	bf18      	it	ne
   86334:	ea90 0f01 	teqne	r0, r1
   86338:	bf58      	it	pl
   8633a:	ebb2 0003 	subspl.w	r0, r2, r3
   8633e:	bf88      	it	hi
   86340:	17c8      	asrhi	r0, r1, #31
   86342:	bf38      	it	cc
   86344:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   86348:	bf18      	it	ne
   8634a:	f040 0001 	orrne.w	r0, r0, #1
   8634e:	4770      	bx	lr
   86350:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86354:	d102      	bne.n	8635c <__cmpsf2+0x4c>
   86356:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   8635a:	d105      	bne.n	86368 <__cmpsf2+0x58>
   8635c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   86360:	d1e4      	bne.n	8632c <__cmpsf2+0x1c>
   86362:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   86366:	d0e1      	beq.n	8632c <__cmpsf2+0x1c>
   86368:	f85d 0b04 	ldr.w	r0, [sp], #4
   8636c:	4770      	bx	lr
   8636e:	bf00      	nop

00086370 <__aeabi_cfrcmple>:
   86370:	4684      	mov	ip, r0
   86372:	4608      	mov	r0, r1
   86374:	4661      	mov	r1, ip
   86376:	e7ff      	b.n	86378 <__aeabi_cfcmpeq>

00086378 <__aeabi_cfcmpeq>:
   86378:	b50f      	push	{r0, r1, r2, r3, lr}
   8637a:	f7ff ffc9 	bl	86310 <__cmpsf2>
   8637e:	2800      	cmp	r0, #0
   86380:	bf48      	it	mi
   86382:	f110 0f00 	cmnmi.w	r0, #0
   86386:	bd0f      	pop	{r0, r1, r2, r3, pc}

00086388 <__aeabi_fcmpeq>:
   86388:	f84d ed08 	str.w	lr, [sp, #-8]!
   8638c:	f7ff fff4 	bl	86378 <__aeabi_cfcmpeq>
   86390:	bf0c      	ite	eq
   86392:	2001      	moveq	r0, #1
   86394:	2000      	movne	r0, #0
   86396:	f85d fb08 	ldr.w	pc, [sp], #8
   8639a:	bf00      	nop

0008639c <__aeabi_fcmplt>:
   8639c:	f84d ed08 	str.w	lr, [sp, #-8]!
   863a0:	f7ff ffea 	bl	86378 <__aeabi_cfcmpeq>
   863a4:	bf34      	ite	cc
   863a6:	2001      	movcc	r0, #1
   863a8:	2000      	movcs	r0, #0
   863aa:	f85d fb08 	ldr.w	pc, [sp], #8
   863ae:	bf00      	nop

000863b0 <__aeabi_fcmple>:
   863b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   863b4:	f7ff ffe0 	bl	86378 <__aeabi_cfcmpeq>
   863b8:	bf94      	ite	ls
   863ba:	2001      	movls	r0, #1
   863bc:	2000      	movhi	r0, #0
   863be:	f85d fb08 	ldr.w	pc, [sp], #8
   863c2:	bf00      	nop

000863c4 <__aeabi_fcmpge>:
   863c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   863c8:	f7ff ffd2 	bl	86370 <__aeabi_cfrcmple>
   863cc:	bf94      	ite	ls
   863ce:	2001      	movls	r0, #1
   863d0:	2000      	movhi	r0, #0
   863d2:	f85d fb08 	ldr.w	pc, [sp], #8
   863d6:	bf00      	nop

000863d8 <__aeabi_fcmpgt>:
   863d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   863dc:	f7ff ffc8 	bl	86370 <__aeabi_cfrcmple>
   863e0:	bf34      	ite	cc
   863e2:	2001      	movcc	r0, #1
   863e4:	2000      	movcs	r0, #0
   863e6:	f85d fb08 	ldr.w	pc, [sp], #8
   863ea:	bf00      	nop

000863ec <__aeabi_f2uiz>:
   863ec:	0042      	lsls	r2, r0, #1
   863ee:	d20e      	bcs.n	8640e <__aeabi_f2uiz+0x22>
   863f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   863f4:	d30b      	bcc.n	8640e <__aeabi_f2uiz+0x22>
   863f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   863fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   863fe:	d409      	bmi.n	86414 <__aeabi_f2uiz+0x28>
   86400:	ea4f 2300 	mov.w	r3, r0, lsl #8
   86404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86408:	fa23 f002 	lsr.w	r0, r3, r2
   8640c:	4770      	bx	lr
   8640e:	f04f 0000 	mov.w	r0, #0
   86412:	4770      	bx	lr
   86414:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86418:	d101      	bne.n	8641e <__aeabi_f2uiz+0x32>
   8641a:	0242      	lsls	r2, r0, #9
   8641c:	d102      	bne.n	86424 <__aeabi_f2uiz+0x38>
   8641e:	f04f 30ff 	mov.w	r0, #4294967295
   86422:	4770      	bx	lr
   86424:	f04f 0000 	mov.w	r0, #0
   86428:	4770      	bx	lr
   8642a:	bf00      	nop

0008642c <__libc_init_array>:
   8642c:	b570      	push	{r4, r5, r6, lr}
   8642e:	4e0f      	ldr	r6, [pc, #60]	; (8646c <__libc_init_array+0x40>)
   86430:	4d0f      	ldr	r5, [pc, #60]	; (86470 <__libc_init_array+0x44>)
   86432:	1b76      	subs	r6, r6, r5
   86434:	10b6      	asrs	r6, r6, #2
   86436:	d007      	beq.n	86448 <__libc_init_array+0x1c>
   86438:	3d04      	subs	r5, #4
   8643a:	2400      	movs	r4, #0
   8643c:	3401      	adds	r4, #1
   8643e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86442:	4798      	blx	r3
   86444:	42a6      	cmp	r6, r4
   86446:	d1f9      	bne.n	8643c <__libc_init_array+0x10>
   86448:	4e0a      	ldr	r6, [pc, #40]	; (86474 <__libc_init_array+0x48>)
   8644a:	4d0b      	ldr	r5, [pc, #44]	; (86478 <__libc_init_array+0x4c>)
   8644c:	f000 fa50 	bl	868f0 <_init>
   86450:	1b76      	subs	r6, r6, r5
   86452:	10b6      	asrs	r6, r6, #2
   86454:	d008      	beq.n	86468 <__libc_init_array+0x3c>
   86456:	3d04      	subs	r5, #4
   86458:	2400      	movs	r4, #0
   8645a:	3401      	adds	r4, #1
   8645c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86460:	4798      	blx	r3
   86462:	42a6      	cmp	r6, r4
   86464:	d1f9      	bne.n	8645a <__libc_init_array+0x2e>
   86466:	bd70      	pop	{r4, r5, r6, pc}
   86468:	bd70      	pop	{r4, r5, r6, pc}
   8646a:	bf00      	nop
   8646c:	000868fc 	.word	0x000868fc
   86470:	000868fc 	.word	0x000868fc
   86474:	00086904 	.word	0x00086904
   86478:	000868fc 	.word	0x000868fc

0008647c <memcmp>:
   8647c:	2a03      	cmp	r2, #3
   8647e:	b470      	push	{r4, r5, r6}
   86480:	d928      	bls.n	864d4 <memcmp+0x58>
   86482:	ea40 0301 	orr.w	r3, r0, r1
   86486:	079b      	lsls	r3, r3, #30
   86488:	d013      	beq.n	864b2 <memcmp+0x36>
   8648a:	7805      	ldrb	r5, [r0, #0]
   8648c:	780c      	ldrb	r4, [r1, #0]
   8648e:	42a5      	cmp	r5, r4
   86490:	d124      	bne.n	864dc <memcmp+0x60>
   86492:	3a01      	subs	r2, #1
   86494:	2300      	movs	r3, #0
   86496:	e005      	b.n	864a4 <memcmp+0x28>
   86498:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   8649c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   864a0:	42a5      	cmp	r5, r4
   864a2:	d11b      	bne.n	864dc <memcmp+0x60>
   864a4:	4293      	cmp	r3, r2
   864a6:	f103 0301 	add.w	r3, r3, #1
   864aa:	d1f5      	bne.n	86498 <memcmp+0x1c>
   864ac:	2000      	movs	r0, #0
   864ae:	bc70      	pop	{r4, r5, r6}
   864b0:	4770      	bx	lr
   864b2:	460c      	mov	r4, r1
   864b4:	4603      	mov	r3, r0
   864b6:	6825      	ldr	r5, [r4, #0]
   864b8:	681e      	ldr	r6, [r3, #0]
   864ba:	4621      	mov	r1, r4
   864bc:	42ae      	cmp	r6, r5
   864be:	4618      	mov	r0, r3
   864c0:	f104 0404 	add.w	r4, r4, #4
   864c4:	f103 0304 	add.w	r3, r3, #4
   864c8:	d104      	bne.n	864d4 <memcmp+0x58>
   864ca:	3a04      	subs	r2, #4
   864cc:	2a03      	cmp	r2, #3
   864ce:	4618      	mov	r0, r3
   864d0:	4621      	mov	r1, r4
   864d2:	d8f0      	bhi.n	864b6 <memcmp+0x3a>
   864d4:	2a00      	cmp	r2, #0
   864d6:	d1d8      	bne.n	8648a <memcmp+0xe>
   864d8:	4610      	mov	r0, r2
   864da:	e7e8      	b.n	864ae <memcmp+0x32>
   864dc:	1b28      	subs	r0, r5, r4
   864de:	bc70      	pop	{r4, r5, r6}
   864e0:	4770      	bx	lr
   864e2:	bf00      	nop

000864e4 <memcpy>:
   864e4:	4684      	mov	ip, r0
   864e6:	ea41 0300 	orr.w	r3, r1, r0
   864ea:	f013 0303 	ands.w	r3, r3, #3
   864ee:	d149      	bne.n	86584 <memcpy+0xa0>
   864f0:	3a40      	subs	r2, #64	; 0x40
   864f2:	d323      	bcc.n	8653c <memcpy+0x58>
   864f4:	680b      	ldr	r3, [r1, #0]
   864f6:	6003      	str	r3, [r0, #0]
   864f8:	684b      	ldr	r3, [r1, #4]
   864fa:	6043      	str	r3, [r0, #4]
   864fc:	688b      	ldr	r3, [r1, #8]
   864fe:	6083      	str	r3, [r0, #8]
   86500:	68cb      	ldr	r3, [r1, #12]
   86502:	60c3      	str	r3, [r0, #12]
   86504:	690b      	ldr	r3, [r1, #16]
   86506:	6103      	str	r3, [r0, #16]
   86508:	694b      	ldr	r3, [r1, #20]
   8650a:	6143      	str	r3, [r0, #20]
   8650c:	698b      	ldr	r3, [r1, #24]
   8650e:	6183      	str	r3, [r0, #24]
   86510:	69cb      	ldr	r3, [r1, #28]
   86512:	61c3      	str	r3, [r0, #28]
   86514:	6a0b      	ldr	r3, [r1, #32]
   86516:	6203      	str	r3, [r0, #32]
   86518:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8651a:	6243      	str	r3, [r0, #36]	; 0x24
   8651c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8651e:	6283      	str	r3, [r0, #40]	; 0x28
   86520:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86522:	62c3      	str	r3, [r0, #44]	; 0x2c
   86524:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86526:	6303      	str	r3, [r0, #48]	; 0x30
   86528:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8652a:	6343      	str	r3, [r0, #52]	; 0x34
   8652c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8652e:	6383      	str	r3, [r0, #56]	; 0x38
   86530:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86532:	63c3      	str	r3, [r0, #60]	; 0x3c
   86534:	3040      	adds	r0, #64	; 0x40
   86536:	3140      	adds	r1, #64	; 0x40
   86538:	3a40      	subs	r2, #64	; 0x40
   8653a:	d2db      	bcs.n	864f4 <memcpy+0x10>
   8653c:	3230      	adds	r2, #48	; 0x30
   8653e:	d30b      	bcc.n	86558 <memcpy+0x74>
   86540:	680b      	ldr	r3, [r1, #0]
   86542:	6003      	str	r3, [r0, #0]
   86544:	684b      	ldr	r3, [r1, #4]
   86546:	6043      	str	r3, [r0, #4]
   86548:	688b      	ldr	r3, [r1, #8]
   8654a:	6083      	str	r3, [r0, #8]
   8654c:	68cb      	ldr	r3, [r1, #12]
   8654e:	60c3      	str	r3, [r0, #12]
   86550:	3010      	adds	r0, #16
   86552:	3110      	adds	r1, #16
   86554:	3a10      	subs	r2, #16
   86556:	d2f3      	bcs.n	86540 <memcpy+0x5c>
   86558:	320c      	adds	r2, #12
   8655a:	d305      	bcc.n	86568 <memcpy+0x84>
   8655c:	f851 3b04 	ldr.w	r3, [r1], #4
   86560:	f840 3b04 	str.w	r3, [r0], #4
   86564:	3a04      	subs	r2, #4
   86566:	d2f9      	bcs.n	8655c <memcpy+0x78>
   86568:	3204      	adds	r2, #4
   8656a:	d008      	beq.n	8657e <memcpy+0x9a>
   8656c:	07d2      	lsls	r2, r2, #31
   8656e:	bf1c      	itt	ne
   86570:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86574:	f800 3b01 	strbne.w	r3, [r0], #1
   86578:	d301      	bcc.n	8657e <memcpy+0x9a>
   8657a:	880b      	ldrh	r3, [r1, #0]
   8657c:	8003      	strh	r3, [r0, #0]
   8657e:	4660      	mov	r0, ip
   86580:	4770      	bx	lr
   86582:	bf00      	nop
   86584:	2a08      	cmp	r2, #8
   86586:	d313      	bcc.n	865b0 <memcpy+0xcc>
   86588:	078b      	lsls	r3, r1, #30
   8658a:	d0b1      	beq.n	864f0 <memcpy+0xc>
   8658c:	f010 0303 	ands.w	r3, r0, #3
   86590:	d0ae      	beq.n	864f0 <memcpy+0xc>
   86592:	f1c3 0304 	rsb	r3, r3, #4
   86596:	1ad2      	subs	r2, r2, r3
   86598:	07db      	lsls	r3, r3, #31
   8659a:	bf1c      	itt	ne
   8659c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   865a0:	f800 3b01 	strbne.w	r3, [r0], #1
   865a4:	d3a4      	bcc.n	864f0 <memcpy+0xc>
   865a6:	f831 3b02 	ldrh.w	r3, [r1], #2
   865aa:	f820 3b02 	strh.w	r3, [r0], #2
   865ae:	e79f      	b.n	864f0 <memcpy+0xc>
   865b0:	3a04      	subs	r2, #4
   865b2:	d3d9      	bcc.n	86568 <memcpy+0x84>
   865b4:	3a01      	subs	r2, #1
   865b6:	f811 3b01 	ldrb.w	r3, [r1], #1
   865ba:	f800 3b01 	strb.w	r3, [r0], #1
   865be:	d2f9      	bcs.n	865b4 <memcpy+0xd0>
   865c0:	780b      	ldrb	r3, [r1, #0]
   865c2:	7003      	strb	r3, [r0, #0]
   865c4:	784b      	ldrb	r3, [r1, #1]
   865c6:	7043      	strb	r3, [r0, #1]
   865c8:	788b      	ldrb	r3, [r1, #2]
   865ca:	7083      	strb	r3, [r0, #2]
   865cc:	4660      	mov	r0, ip
   865ce:	4770      	bx	lr

000865d0 <memset>:
   865d0:	b4f0      	push	{r4, r5, r6, r7}
   865d2:	0784      	lsls	r4, r0, #30
   865d4:	d043      	beq.n	8665e <memset+0x8e>
   865d6:	1e54      	subs	r4, r2, #1
   865d8:	2a00      	cmp	r2, #0
   865da:	d03e      	beq.n	8665a <memset+0x8a>
   865dc:	b2cd      	uxtb	r5, r1
   865de:	4603      	mov	r3, r0
   865e0:	e003      	b.n	865ea <memset+0x1a>
   865e2:	1e62      	subs	r2, r4, #1
   865e4:	2c00      	cmp	r4, #0
   865e6:	d038      	beq.n	8665a <memset+0x8a>
   865e8:	4614      	mov	r4, r2
   865ea:	f803 5b01 	strb.w	r5, [r3], #1
   865ee:	079a      	lsls	r2, r3, #30
   865f0:	d1f7      	bne.n	865e2 <memset+0x12>
   865f2:	2c03      	cmp	r4, #3
   865f4:	d92a      	bls.n	8664c <memset+0x7c>
   865f6:	b2cd      	uxtb	r5, r1
   865f8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   865fc:	2c0f      	cmp	r4, #15
   865fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86602:	d915      	bls.n	86630 <memset+0x60>
   86604:	f1a4 0710 	sub.w	r7, r4, #16
   86608:	093f      	lsrs	r7, r7, #4
   8660a:	f103 0610 	add.w	r6, r3, #16
   8660e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   86612:	461a      	mov	r2, r3
   86614:	6015      	str	r5, [r2, #0]
   86616:	6055      	str	r5, [r2, #4]
   86618:	6095      	str	r5, [r2, #8]
   8661a:	60d5      	str	r5, [r2, #12]
   8661c:	3210      	adds	r2, #16
   8661e:	42b2      	cmp	r2, r6
   86620:	d1f8      	bne.n	86614 <memset+0x44>
   86622:	f004 040f 	and.w	r4, r4, #15
   86626:	3701      	adds	r7, #1
   86628:	2c03      	cmp	r4, #3
   8662a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8662e:	d90d      	bls.n	8664c <memset+0x7c>
   86630:	461e      	mov	r6, r3
   86632:	4622      	mov	r2, r4
   86634:	3a04      	subs	r2, #4
   86636:	2a03      	cmp	r2, #3
   86638:	f846 5b04 	str.w	r5, [r6], #4
   8663c:	d8fa      	bhi.n	86634 <memset+0x64>
   8663e:	1f22      	subs	r2, r4, #4
   86640:	f022 0203 	bic.w	r2, r2, #3
   86644:	3204      	adds	r2, #4
   86646:	4413      	add	r3, r2
   86648:	f004 0403 	and.w	r4, r4, #3
   8664c:	b12c      	cbz	r4, 8665a <memset+0x8a>
   8664e:	b2c9      	uxtb	r1, r1
   86650:	441c      	add	r4, r3
   86652:	f803 1b01 	strb.w	r1, [r3], #1
   86656:	42a3      	cmp	r3, r4
   86658:	d1fb      	bne.n	86652 <memset+0x82>
   8665a:	bcf0      	pop	{r4, r5, r6, r7}
   8665c:	4770      	bx	lr
   8665e:	4614      	mov	r4, r2
   86660:	4603      	mov	r3, r0
   86662:	e7c6      	b.n	865f2 <memset+0x22>

00086664 <register_fini>:
   86664:	4b02      	ldr	r3, [pc, #8]	; (86670 <register_fini+0xc>)
   86666:	b113      	cbz	r3, 8666e <register_fini+0xa>
   86668:	4802      	ldr	r0, [pc, #8]	; (86674 <register_fini+0x10>)
   8666a:	f000 b805 	b.w	86678 <atexit>
   8666e:	4770      	bx	lr
   86670:	00000000 	.word	0x00000000
   86674:	00086685 	.word	0x00086685

00086678 <atexit>:
   86678:	4601      	mov	r1, r0
   8667a:	2000      	movs	r0, #0
   8667c:	4602      	mov	r2, r0
   8667e:	4603      	mov	r3, r0
   86680:	f000 b818 	b.w	866b4 <__register_exitproc>

00086684 <__libc_fini_array>:
   86684:	b538      	push	{r3, r4, r5, lr}
   86686:	4d09      	ldr	r5, [pc, #36]	; (866ac <__libc_fini_array+0x28>)
   86688:	4c09      	ldr	r4, [pc, #36]	; (866b0 <__libc_fini_array+0x2c>)
   8668a:	1b64      	subs	r4, r4, r5
   8668c:	10a4      	asrs	r4, r4, #2
   8668e:	bf18      	it	ne
   86690:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   86694:	d005      	beq.n	866a2 <__libc_fini_array+0x1e>
   86696:	3c01      	subs	r4, #1
   86698:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8669c:	4798      	blx	r3
   8669e:	2c00      	cmp	r4, #0
   866a0:	d1f9      	bne.n	86696 <__libc_fini_array+0x12>
   866a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   866a6:	f000 b92d 	b.w	86904 <_fini>
   866aa:	bf00      	nop
   866ac:	00086910 	.word	0x00086910
   866b0:	00086914 	.word	0x00086914

000866b4 <__register_exitproc>:
   866b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   866b6:	4c27      	ldr	r4, [pc, #156]	; (86754 <__register_exitproc+0xa0>)
   866b8:	b085      	sub	sp, #20
   866ba:	6826      	ldr	r6, [r4, #0]
   866bc:	4607      	mov	r7, r0
   866be:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   866c2:	2c00      	cmp	r4, #0
   866c4:	d040      	beq.n	86748 <__register_exitproc+0x94>
   866c6:	6865      	ldr	r5, [r4, #4]
   866c8:	2d1f      	cmp	r5, #31
   866ca:	dd1e      	ble.n	8670a <__register_exitproc+0x56>
   866cc:	4822      	ldr	r0, [pc, #136]	; (86758 <__register_exitproc+0xa4>)
   866ce:	b918      	cbnz	r0, 866d8 <__register_exitproc+0x24>
   866d0:	f04f 30ff 	mov.w	r0, #4294967295
   866d4:	b005      	add	sp, #20
   866d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   866d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   866dc:	9103      	str	r1, [sp, #12]
   866de:	9202      	str	r2, [sp, #8]
   866e0:	9301      	str	r3, [sp, #4]
   866e2:	f3af 8000 	nop.w
   866e6:	9903      	ldr	r1, [sp, #12]
   866e8:	4604      	mov	r4, r0
   866ea:	9a02      	ldr	r2, [sp, #8]
   866ec:	9b01      	ldr	r3, [sp, #4]
   866ee:	2800      	cmp	r0, #0
   866f0:	d0ee      	beq.n	866d0 <__register_exitproc+0x1c>
   866f2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   866f6:	2000      	movs	r0, #0
   866f8:	6025      	str	r5, [r4, #0]
   866fa:	6060      	str	r0, [r4, #4]
   866fc:	4605      	mov	r5, r0
   866fe:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86702:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86706:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   8670a:	b93f      	cbnz	r7, 8671c <__register_exitproc+0x68>
   8670c:	1c6b      	adds	r3, r5, #1
   8670e:	2000      	movs	r0, #0
   86710:	3502      	adds	r5, #2
   86712:	6063      	str	r3, [r4, #4]
   86714:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86718:	b005      	add	sp, #20
   8671a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8671c:	2601      	movs	r6, #1
   8671e:	40ae      	lsls	r6, r5
   86720:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86724:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86728:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8672c:	2f02      	cmp	r7, #2
   8672e:	ea42 0206 	orr.w	r2, r2, r6
   86732:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86736:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8673a:	d1e7      	bne.n	8670c <__register_exitproc+0x58>
   8673c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86740:	431e      	orrs	r6, r3
   86742:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86746:	e7e1      	b.n	8670c <__register_exitproc+0x58>
   86748:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8674c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86750:	e7b9      	b.n	866c6 <__register_exitproc+0x12>
   86752:	bf00      	nop
   86754:	000868ec 	.word	0x000868ec
   86758:	00000000 	.word	0x00000000
   8675c:	00004e4f 	.word	0x00004e4f
   86760:	00004e4f 	.word	0x00004e4f
   86764:	00004e4f 	.word	0x00004e4f

00086768 <ulLED>:
   86768:	00000057 00000056 0000003b 00000055     W...V...;...U...
   86778:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   86788:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   86798:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   867a8:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   867b8:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   867c8:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   867d8:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   867e8:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   867f8:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   86808:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86818:	0001c200 000000c0 00000800 00000000     ................
	...
   86830:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   86840:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00086850 <can_bit_time>:
   86850:	02020308 02094b03 43020303 0303030a     .....K.....C....
   86860:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86870:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   86880:	05050510 06114504 47040505 06060512     .....E.....G....
   86890:	06134304 44040606 06060714 08154604     .C.....D.....F..
   868a0:	47040606 07070716 08174404 46040708     ...G.....D.....F
   868b0:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   868c0:	00000000                                ....

000868c4 <ucExpectedStackBytes.5295>:
   868c4:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   868d4:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   868e4:	0046464f 00000043                       OFF.C...

000868ec <_global_impure_ptr>:
   868ec:	20070010                                ... 

000868f0 <_init>:
   868f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   868f2:	bf00      	nop
   868f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   868f6:	bc08      	pop	{r3}
   868f8:	469e      	mov	lr, r3
   868fa:	4770      	bx	lr

000868fc <__init_array_start>:
   868fc:	00086665 	.word	0x00086665

00086900 <__frame_dummy_init_array_entry>:
   86900:	00080119                                ....

00086904 <_fini>:
   86904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86906:	bf00      	nop
   86908:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8690a:	bc08      	pop	{r3}
   8690c:	469e      	mov	lr, r3
   8690e:	4770      	bx	lr

00086910 <__fini_array_start>:
   86910:	000800f5 	.word	0x000800f5
