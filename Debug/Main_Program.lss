
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005660  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00085660  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a2b8  20070438  00085a98  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a6f0  0008fd50  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d4e1  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000026eb  00000000  00000000  0001d99d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000055f8  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f40  00000000  00000000  00025680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000da0  00000000  00000000  000265c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009dd9  00000000  00000000  00027360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013bd7  00000000  00000000  00031139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00067432  00000000  00000000  00044d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003138  00000000  00000000  000ac144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c6f0 	.word	0x2007c6f0
   80004:	00081e8d 	.word	0x00081e8d
   80008:	00081e85 	.word	0x00081e85
   8000c:	00081e85 	.word	0x00081e85
   80010:	00081e85 	.word	0x00081e85
   80014:	00081e85 	.word	0x00081e85
   80018:	00081e85 	.word	0x00081e85
	...
   8002c:	00082335 	.word	0x00082335
   80030:	00081e85 	.word	0x00081e85
   80034:	00000000 	.word	0x00000000
   80038:	000824f9 	.word	0x000824f9
   8003c:	0008253d 	.word	0x0008253d
   80040:	00081e85 	.word	0x00081e85
   80044:	00081e85 	.word	0x00081e85
   80048:	00081e85 	.word	0x00081e85
   8004c:	00081e85 	.word	0x00081e85
   80050:	00085019 	.word	0x00085019
   80054:	00081e85 	.word	0x00081e85
   80058:	00081e85 	.word	0x00081e85
   8005c:	00081e85 	.word	0x00081e85
   80060:	00081e85 	.word	0x00081e85
   80064:	00081e85 	.word	0x00081e85
   80068:	00000000 	.word	0x00000000
   8006c:	0008180d 	.word	0x0008180d
   80070:	00081825 	.word	0x00081825
   80074:	0008183d 	.word	0x0008183d
   80078:	00081855 	.word	0x00081855
	...
   80084:	0008048d 	.word	0x0008048d
   80088:	00081e85 	.word	0x00081e85
   8008c:	00081e85 	.word	0x00081e85
   80090:	00081e85 	.word	0x00081e85
   80094:	00081e85 	.word	0x00081e85
   80098:	00081e85 	.word	0x00081e85
   8009c:	00081e85 	.word	0x00081e85
   800a0:	00081e85 	.word	0x00081e85
   800a4:	00000000 	.word	0x00000000
   800a8:	00081e85 	.word	0x00081e85
   800ac:	00081e85 	.word	0x00081e85
   800b0:	00081e85 	.word	0x00081e85
   800b4:	00081e85 	.word	0x00081e85
   800b8:	00081e85 	.word	0x00081e85
   800bc:	00081e85 	.word	0x00081e85
   800c0:	00081e85 	.word	0x00081e85
   800c4:	00081e85 	.word	0x00081e85
   800c8:	00081e85 	.word	0x00081e85
   800cc:	00081e85 	.word	0x00081e85
   800d0:	00081e85 	.word	0x00081e85
   800d4:	00081e85 	.word	0x00081e85
   800d8:	00081e85 	.word	0x00081e85
   800dc:	00081e85 	.word	0x00081e85
   800e0:	00081e85 	.word	0x00081e85
   800e4:	00081e85 	.word	0x00081e85
   800e8:	00081e85 	.word	0x00081e85
   800ec:	000848c5 	.word	0x000848c5
   800f0:	000847e1 	.word	0x000847e1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00085660 	.word	0x00085660

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085660 	.word	0x00085660
   8013c:	2007043c 	.word	0x2007043c
   80140:	00085660 	.word	0x00085660
   80144:	00000000 	.word	0x00000000

00080148 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   80148:	b590      	push	{r4, r7, lr}
   8014a:	b085      	sub	sp, #20
   8014c:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   8014e:	2301      	movs	r3, #1
   80150:	9300      	str	r3, [sp, #0]
   80152:	2300      	movs	r3, #0
   80154:	9301      	str	r3, [sp, #4]
   80156:	2300      	movs	r3, #0
   80158:	9302      	str	r3, [sp, #8]
   8015a:	2300      	movs	r3, #0
   8015c:	9303      	str	r3, [sp, #12]
   8015e:	4805      	ldr	r0, [pc, #20]	; (80174 <command_loop+0x2c>)
   80160:	4905      	ldr	r1, [pc, #20]	; (80178 <command_loop+0x30>)
   80162:	2282      	movs	r2, #130	; 0x82
   80164:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80168:	4c04      	ldr	r4, [pc, #16]	; (8017c <command_loop+0x34>)
   8016a:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   8016c:	bf00      	nop
}
   8016e:	3704      	adds	r7, #4
   80170:	46bd      	mov	sp, r7
   80172:	bd90      	pop	{r4, r7, pc}
   80174:	00080181 	.word	0x00080181
   80178:	000854d8 	.word	0x000854d8
   8017c:	00083251 	.word	0x00083251

00080180 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   80180:	b590      	push	{r4, r7, lr}
   80182:	b08b      	sub	sp, #44	; 0x2c
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   80188:	687a      	ldr	r2, [r7, #4]
   8018a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8018e:	429a      	cmp	r2, r3
   80190:	d002      	beq.n	80198 <prvCommandTask+0x18>
   80192:	4b18      	ldr	r3, [pc, #96]	; (801f4 <prvCommandTask+0x74>)
   80194:	4798      	blx	r3
   80196:	e7fe      	b.n	80196 <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80198:	230f      	movs	r3, #15
   8019a:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   8019c:	f04f 33ff 	mov.w	r3, #4294967295
   801a0:	623b      	str	r3, [r7, #32]
	high = CAN_MSG_DUMMY_DATA;
   801a2:	f04f 33ff 	mov.w	r3, #4294967295
   801a6:	61fb      	str	r3, [r7, #28]
	ID = SUB0_ID0;
   801a8:	2314      	movs	r3, #20
   801aa:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   801ac:	230a      	movs	r3, #10
   801ae:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   801b0:	4b11      	ldr	r3, [pc, #68]	; (801f8 <prvCommandTask+0x78>)
   801b2:	681b      	ldr	r3, [r3, #0]
   801b4:	4618      	mov	r0, r3
   801b6:	2100      	movs	r1, #0
   801b8:	2202      	movs	r2, #2
   801ba:	2300      	movs	r3, #0
   801bc:	4c0f      	ldr	r4, [pc, #60]	; (801fc <prvCommandTask+0x7c>)
   801be:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   801c0:	6a38      	ldr	r0, [r7, #32]
   801c2:	69f9      	ldr	r1, [r7, #28]
   801c4:	69ba      	ldr	r2, [r7, #24]
   801c6:	697b      	ldr	r3, [r7, #20]
   801c8:	4c0d      	ldr	r4, [pc, #52]	; (80200 <prvCommandTask+0x80>)
   801ca:	47a0      	blx	r4
   801cc:	6138      	str	r0, [r7, #16]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   801ce:	4b0a      	ldr	r3, [pc, #40]	; (801f8 <prvCommandTask+0x78>)
   801d0:	681b      	ldr	r3, [r3, #0]
   801d2:	4618      	mov	r0, r3
   801d4:	2100      	movs	r1, #0
   801d6:	2200      	movs	r2, #0
   801d8:	2300      	movs	r3, #0
   801da:	4c0a      	ldr	r4, [pc, #40]	; (80204 <prvCommandTask+0x84>)
   801dc:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   801de:	4b0a      	ldr	r3, [pc, #40]	; (80208 <prvCommandTask+0x88>)
   801e0:	4798      	blx	r3
   801e2:	4603      	mov	r3, r0
   801e4:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   801e6:	f107 030c 	add.w	r3, r7, #12
   801ea:	4618      	mov	r0, r3
   801ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <prvCommandTask+0x8c>)
   801f0:	4798      	blx	r3
	}
   801f2:	e7dd      	b.n	801b0 <prvCommandTask+0x30>
   801f4:	000824dd 	.word	0x000824dd
   801f8:	2007a69c 	.word	0x2007a69c
   801fc:	00082da5 	.word	0x00082da5
   80200:	00084a79 	.word	0x00084a79
   80204:	00082ae5 	.word	0x00082ae5
   80208:	0008368d 	.word	0x0008368d
   8020c:	000833d1 	.word	0x000833d1

00080210 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80210:	b590      	push	{r4, r7, lr}
   80212:	b085      	sub	sp, #20
   80214:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   80216:	2302      	movs	r3, #2
   80218:	9300      	str	r3, [sp, #0]
   8021a:	2300      	movs	r3, #0
   8021c:	9301      	str	r3, [sp, #4]
   8021e:	2300      	movs	r3, #0
   80220:	9302      	str	r3, [sp, #8]
   80222:	2300      	movs	r3, #0
   80224:	9303      	str	r3, [sp, #12]
   80226:	4805      	ldr	r0, [pc, #20]	; (8023c <data_test+0x2c>)
   80228:	4905      	ldr	r1, [pc, #20]	; (80240 <data_test+0x30>)
   8022a:	2282      	movs	r2, #130	; 0x82
   8022c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80230:	4c04      	ldr	r4, [pc, #16]	; (80244 <data_test+0x34>)
   80232:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80234:	bf00      	nop
}
   80236:	3704      	adds	r7, #4
   80238:	46bd      	mov	sp, r7
   8023a:	bd90      	pop	{r4, r7, pc}
   8023c:	00080249 	.word	0x00080249
   80240:	000854dc 	.word	0x000854dc
   80244:	00083251 	.word	0x00083251

00080248 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   80248:	b590      	push	{r4, r7, lr}
   8024a:	b08b      	sub	sp, #44	; 0x2c
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   80250:	687a      	ldr	r2, [r7, #4]
   80252:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80256:	429a      	cmp	r2, r3
   80258:	d002      	beq.n	80260 <prvDataTask+0x18>
   8025a:	4b1d      	ldr	r3, [pc, #116]	; (802d0 <prvDataTask+0x88>)
   8025c:	4798      	blx	r3
   8025e:	e7fe      	b.n	8025e <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80260:	230f      	movs	r3, #15
   80262:	623b      	str	r3, [r7, #32]
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	low = DATA_REQUEST;
   80264:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   80268:	61fb      	str	r3, [r7, #28]
	high = DATA_REQUEST;
   8026a:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   8026e:	61bb      	str	r3, [r7, #24]
	ID = SUB0_ID0;
   80270:	2314      	movs	r3, #20
   80272:	617b      	str	r3, [r7, #20]
	PRIORITY = DATA_PRIO;
   80274:	2319      	movs	r3, #25
   80276:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		x = send_can_command(low, high, ID, PRIORITY);				//This is the CAN API function I have written for us to use.
   80278:	69f8      	ldr	r0, [r7, #28]
   8027a:	69b9      	ldr	r1, [r7, #24]
   8027c:	697a      	ldr	r2, [r7, #20]
   8027e:	693b      	ldr	r3, [r7, #16]
   80280:	4c14      	ldr	r4, [pc, #80]	; (802d4 <prvDataTask+0x8c>)
   80282:	47a0      	blx	r4
   80284:	60f8      	str	r0, [r7, #12]
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 15 clock cycles.
   80286:	4b14      	ldr	r3, [pc, #80]	; (802d8 <prvDataTask+0x90>)
   80288:	4798      	blx	r3
   8028a:	4603      	mov	r3, r0
   8028c:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8028e:	f107 0308 	add.w	r3, r7, #8
   80292:	4618      	mov	r0, r3
   80294:	6a39      	ldr	r1, [r7, #32]
   80296:	4b11      	ldr	r3, [pc, #68]	; (802dc <prvDataTask+0x94>)
   80298:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   8029a:	4b11      	ldr	r3, [pc, #68]	; (802e0 <prvDataTask+0x98>)
   8029c:	781b      	ldrb	r3, [r3, #0]
   8029e:	2b00      	cmp	r3, #0
   802a0:	d014      	beq.n	802cc <prvDataTask+0x84>
		{
			for (i = 0; i < 8; i++)
   802a2:	2300      	movs	r3, #0
   802a4:	627b      	str	r3, [r7, #36]	; 0x24
   802a6:	e00a      	b.n	802be <prvDataTask+0x76>
			{
				glob_stored_data[i] = can_glob_data_reg[i];			// Store the newly acquired data in memory.
   802a8:	4b0e      	ldr	r3, [pc, #56]	; (802e4 <prvDataTask+0x9c>)
   802aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   802ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   802b0:	4b0d      	ldr	r3, [pc, #52]	; (802e8 <prvDataTask+0xa0>)
   802b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   802b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
		{
			for (i = 0; i < 8; i++)
   802b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   802ba:	3301      	adds	r3, #1
   802bc:	627b      	str	r3, [r7, #36]	; 0x24
   802be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   802c0:	2b07      	cmp	r3, #7
   802c2:	d9f1      	bls.n	802a8 <prvDataTask+0x60>
			{
				glob_stored_data[i] = can_glob_data_reg[i];			// Store the newly acquired data in memory.
			}
			glob_drf = 0;
   802c4:	4b06      	ldr	r3, [pc, #24]	; (802e0 <prvDataTask+0x98>)
   802c6:	2200      	movs	r2, #0
   802c8:	701a      	strb	r2, [r3, #0]
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   802ca:	e7d5      	b.n	80278 <prvDataTask+0x30>
   802cc:	e7d4      	b.n	80278 <prvDataTask+0x30>
   802ce:	bf00      	nop
   802d0:	000824dd 	.word	0x000824dd
   802d4:	00084a79 	.word	0x00084a79
   802d8:	0008368d 	.word	0x0008368d
   802dc:	000833d1 	.word	0x000833d1
   802e0:	2007a668 	.word	0x2007a668
   802e4:	2007a674 	.word	0x2007a674
   802e8:	2007a640 	.word	0x2007a640

000802ec <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   802ec:	b590      	push	{r4, r7, lr}
   802ee:	b085      	sub	sp, #20
   802f0:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   802f2:	2301      	movs	r3, #1
   802f4:	9300      	str	r3, [sp, #0]
   802f6:	2300      	movs	r3, #0
   802f8:	9301      	str	r3, [sp, #4]
   802fa:	2300      	movs	r3, #0
   802fc:	9302      	str	r3, [sp, #8]
   802fe:	2300      	movs	r3, #0
   80300:	9303      	str	r3, [sp, #12]
   80302:	4805      	ldr	r0, [pc, #20]	; (80318 <housekeep+0x2c>)
   80304:	4905      	ldr	r1, [pc, #20]	; (8031c <housekeep+0x30>)
   80306:	2282      	movs	r2, #130	; 0x82
   80308:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8030c:	4c04      	ldr	r4, [pc, #16]	; (80320 <housekeep+0x34>)
   8030e:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80310:	bf00      	nop
}
   80312:	3704      	adds	r7, #4
   80314:	46bd      	mov	sp, r7
   80316:	bd90      	pop	{r4, r7, pc}
   80318:	00080325 	.word	0x00080325
   8031c:	000854e0 	.word	0x000854e0
   80320:	00083251 	.word	0x00083251

00080324 <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   80324:	b590      	push	{r4, r7, lr}
   80326:	b087      	sub	sp, #28
   80328:	af00      	add	r7, sp, #0
   8032a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   8032c:	687a      	ldr	r2, [r7, #4]
   8032e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80332:	429a      	cmp	r2, r3
   80334:	d002      	beq.n	8033c <prvHouseKeepTask+0x18>
   80336:	4b13      	ldr	r3, [pc, #76]	; (80384 <prvHouseKeepTask+0x60>)
   80338:	4798      	blx	r3
   8033a:	e7fe      	b.n	8033a <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   8033c:	230f      	movs	r3, #15
   8033e:	617b      	str	r3, [r7, #20]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	
	ID = SUB0_ID5;
   80340:	2319      	movs	r3, #25
   80342:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80344:	4b10      	ldr	r3, [pc, #64]	; (80388 <prvHouseKeepTask+0x64>)
   80346:	681b      	ldr	r3, [r3, #0]
   80348:	4618      	mov	r0, r3
   8034a:	2100      	movs	r1, #0
   8034c:	2202      	movs	r2, #2
   8034e:	2300      	movs	r3, #0
   80350:	4c0e      	ldr	r4, [pc, #56]	; (8038c <prvHouseKeepTask+0x68>)
   80352:	47a0      	blx	r4
		x = request_housekeeping(ID);		// This is the CAN API function I have written for us to use.
   80354:	6938      	ldr	r0, [r7, #16]
   80356:	4b0e      	ldr	r3, [pc, #56]	; (80390 <prvHouseKeepTask+0x6c>)
   80358:	4798      	blx	r3
   8035a:	60f8      	str	r0, [r7, #12]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   8035c:	4b0a      	ldr	r3, [pc, #40]	; (80388 <prvHouseKeepTask+0x64>)
   8035e:	681b      	ldr	r3, [r3, #0]
   80360:	4618      	mov	r0, r3
   80362:	2100      	movs	r1, #0
   80364:	2200      	movs	r2, #0
   80366:	2300      	movs	r3, #0
   80368:	4c0a      	ldr	r4, [pc, #40]	; (80394 <prvHouseKeepTask+0x70>)
   8036a:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8036c:	4b0a      	ldr	r3, [pc, #40]	; (80398 <prvHouseKeepTask+0x74>)
   8036e:	4798      	blx	r3
   80370:	4603      	mov	r3, r0
   80372:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80374:	f107 0308 	add.w	r3, r7, #8
   80378:	4618      	mov	r0, r3
   8037a:	6979      	ldr	r1, [r7, #20]
   8037c:	4b07      	ldr	r3, [pc, #28]	; (8039c <prvHouseKeepTask+0x78>)
   8037e:	4798      	blx	r3
	}
   80380:	e7e0      	b.n	80344 <prvHouseKeepTask+0x20>
   80382:	bf00      	nop
   80384:	000824dd 	.word	0x000824dd
   80388:	2007a69c 	.word	0x2007a69c
   8038c:	00082da5 	.word	0x00082da5
   80390:	00084b29 	.word	0x00084b29
   80394:	00082ae5 	.word	0x00082ae5
   80398:	0008368d 	.word	0x0008368d
   8039c:	000833d1 	.word	0x000833d1

000803a0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   803a0:	b480      	push	{r7}
   803a2:	b083      	sub	sp, #12
   803a4:	af00      	add	r7, sp, #0
   803a6:	4603      	mov	r3, r0
   803a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   803aa:	4b08      	ldr	r3, [pc, #32]	; (803cc <NVIC_EnableIRQ+0x2c>)
   803ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
   803b0:	0952      	lsrs	r2, r2, #5
   803b2:	79f9      	ldrb	r1, [r7, #7]
   803b4:	f001 011f 	and.w	r1, r1, #31
   803b8:	2001      	movs	r0, #1
   803ba:	fa00 f101 	lsl.w	r1, r0, r1
   803be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803c2:	370c      	adds	r7, #12
   803c4:	46bd      	mov	sp, r7
   803c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   803ca:	4770      	bx	lr
   803cc:	e000e100 	.word	0xe000e100

000803d0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   803d0:	b480      	push	{r7}
   803d2:	b083      	sub	sp, #12
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2b07      	cmp	r3, #7
   803dc:	d825      	bhi.n	8042a <osc_get_rate+0x5a>
   803de:	a201      	add	r2, pc, #4	; (adr r2, 803e4 <osc_get_rate+0x14>)
   803e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   803e4:	00080405 	.word	0x00080405
   803e8:	0008040b 	.word	0x0008040b
   803ec:	00080411 	.word	0x00080411
   803f0:	00080417 	.word	0x00080417
   803f4:	0008041b 	.word	0x0008041b
   803f8:	0008041f 	.word	0x0008041f
   803fc:	00080423 	.word	0x00080423
   80400:	00080427 	.word	0x00080427
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80404:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80408:	e010      	b.n	8042c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8040a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8040e:	e00d      	b.n	8042c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80414:	e00a      	b.n	8042c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80416:	4b08      	ldr	r3, [pc, #32]	; (80438 <osc_get_rate+0x68>)
   80418:	e008      	b.n	8042c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8041a:	4b08      	ldr	r3, [pc, #32]	; (8043c <osc_get_rate+0x6c>)
   8041c:	e006      	b.n	8042c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8041e:	4b08      	ldr	r3, [pc, #32]	; (80440 <osc_get_rate+0x70>)
   80420:	e004      	b.n	8042c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80422:	4b07      	ldr	r3, [pc, #28]	; (80440 <osc_get_rate+0x70>)
   80424:	e002      	b.n	8042c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80426:	4b06      	ldr	r3, [pc, #24]	; (80440 <osc_get_rate+0x70>)
   80428:	e000      	b.n	8042c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8042a:	2300      	movs	r3, #0
}
   8042c:	4618      	mov	r0, r3
   8042e:	370c      	adds	r7, #12
   80430:	46bd      	mov	sp, r7
   80432:	f85d 7b04 	ldr.w	r7, [sp], #4
   80436:	4770      	bx	lr
   80438:	003d0900 	.word	0x003d0900
   8043c:	007a1200 	.word	0x007a1200
   80440:	00b71b00 	.word	0x00b71b00

00080444 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80444:	b580      	push	{r7, lr}
   80446:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80448:	2006      	movs	r0, #6
   8044a:	4b04      	ldr	r3, [pc, #16]	; (8045c <sysclk_get_main_hz+0x18>)
   8044c:	4798      	blx	r3
   8044e:	4602      	mov	r2, r0
   80450:	4613      	mov	r3, r2
   80452:	00db      	lsls	r3, r3, #3
   80454:	1a9b      	subs	r3, r3, r2
   80456:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80458:	4618      	mov	r0, r3
   8045a:	bd80      	pop	{r7, pc}
   8045c:	000803d1 	.word	0x000803d1

00080460 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80460:	b580      	push	{r7, lr}
   80462:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80464:	4b02      	ldr	r3, [pc, #8]	; (80470 <sysclk_get_cpu_hz+0x10>)
   80466:	4798      	blx	r3
   80468:	4603      	mov	r3, r0
   8046a:	085b      	lsrs	r3, r3, #1
}
   8046c:	4618      	mov	r0, r3
   8046e:	bd80      	pop	{r7, pc}
   80470:	00080445 	.word	0x00080445

00080474 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80474:	b580      	push	{r7, lr}
   80476:	b082      	sub	sp, #8
   80478:	af00      	add	r7, sp, #0
   8047a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8047c:	6878      	ldr	r0, [r7, #4]
   8047e:	4b02      	ldr	r3, [pc, #8]	; (80488 <sysclk_enable_peripheral_clock+0x14>)
   80480:	4798      	blx	r3
}
   80482:	3708      	adds	r7, #8
   80484:	46bd      	mov	sp, r7
   80486:	bd80      	pop	{r7, pc}
   80488:	00081ad9 	.word	0x00081ad9

0008048c <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   8048c:	b580      	push	{r7, lr}
   8048e:	b084      	sub	sp, #16
   80490:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80492:	2300      	movs	r3, #0
   80494:	60bb      	str	r3, [r7, #8]
   80496:	2300      	movs	r3, #0
   80498:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   8049a:	2300      	movs	r3, #0
   8049c:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   8049e:	2300      	movs	r3, #0
   804a0:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   804a2:	483b      	ldr	r0, [pc, #236]	; (80590 <USART0_Handler+0x104>)
   804a4:	4b3b      	ldr	r3, [pc, #236]	; (80594 <USART0_Handler+0x108>)
   804a6:	4798      	blx	r3
   804a8:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   804aa:	2058      	movs	r0, #88	; 0x58
   804ac:	4b3a      	ldr	r3, [pc, #232]	; (80598 <USART0_Handler+0x10c>)
   804ae:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   804b0:	4b3a      	ldr	r3, [pc, #232]	; (8059c <USART0_Handler+0x110>)
   804b2:	781b      	ldrb	r3, [r3, #0]
   804b4:	2b00      	cmp	r3, #0
   804b6:	d167      	bne.n	80588 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   804b8:	683b      	ldr	r3, [r7, #0]
   804ba:	f003 0301 	and.w	r3, r3, #1
   804be:	2b00      	cmp	r3, #0
   804c0:	d062      	beq.n	80588 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   804c2:	4833      	ldr	r0, [pc, #204]	; (80590 <USART0_Handler+0x104>)
   804c4:	4936      	ldr	r1, [pc, #216]	; (805a0 <USART0_Handler+0x114>)
   804c6:	4b37      	ldr	r3, [pc, #220]	; (805a4 <USART0_Handler+0x118>)
   804c8:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   804ca:	4b35      	ldr	r3, [pc, #212]	; (805a0 <USART0_Handler+0x114>)
   804cc:	681b      	ldr	r3, [r3, #0]
   804ce:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   804d0:	68bb      	ldr	r3, [r7, #8]
   804d2:	2b31      	cmp	r3, #49	; 0x31
   804d4:	d102      	bne.n	804dc <USART0_Handler+0x50>
				command_start = 1;
   804d6:	4b34      	ldr	r3, [pc, #208]	; (805a8 <USART0_Handler+0x11c>)
   804d8:	2201      	movs	r2, #1
   804da:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   804dc:	68bb      	ldr	r3, [r7, #8]
   804de:	2b32      	cmp	r3, #50	; 0x32
   804e0:	d102      	bne.n	804e8 <USART0_Handler+0x5c>
				command_end = 1;
   804e2:	4b32      	ldr	r3, [pc, #200]	; (805ac <USART0_Handler+0x120>)
   804e4:	2201      	movs	r2, #1
   804e6:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   804e8:	4b2f      	ldr	r3, [pc, #188]	; (805a8 <USART0_Handler+0x11c>)
   804ea:	781b      	ldrb	r3, [r3, #0]
   804ec:	2b01      	cmp	r3, #1
   804ee:	d11e      	bne.n	8052e <USART0_Handler+0xa2>
   804f0:	68bb      	ldr	r3, [r7, #8]
   804f2:	2b00      	cmp	r3, #0
   804f4:	d01b      	beq.n	8052e <USART0_Handler+0xa2>
   804f6:	68bb      	ldr	r3, [r7, #8]
   804f8:	2b31      	cmp	r3, #49	; 0x31
   804fa:	d018      	beq.n	8052e <USART0_Handler+0xa2>
   804fc:	68bb      	ldr	r3, [r7, #8]
   804fe:	2b32      	cmp	r3, #50	; 0x32
   80500:	d015      	beq.n	8052e <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80502:	4b2b      	ldr	r3, [pc, #172]	; (805b0 <USART0_Handler+0x124>)
   80504:	781a      	ldrb	r2, [r3, #0]
   80506:	4b2b      	ldr	r3, [pc, #172]	; (805b4 <USART0_Handler+0x128>)
   80508:	fba3 1302 	umull	r1, r3, r3, r2
   8050c:	08d9      	lsrs	r1, r3, #3
   8050e:	460b      	mov	r3, r1
   80510:	009b      	lsls	r3, r3, #2
   80512:	440b      	add	r3, r1
   80514:	005b      	lsls	r3, r3, #1
   80516:	1ad3      	subs	r3, r2, r3
   80518:	b2db      	uxtb	r3, r3
   8051a:	68ba      	ldr	r2, [r7, #8]
   8051c:	b2d1      	uxtb	r1, r2
   8051e:	4a26      	ldr	r2, [pc, #152]	; (805b8 <USART0_Handler+0x12c>)
   80520:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80522:	4b23      	ldr	r3, [pc, #140]	; (805b0 <USART0_Handler+0x124>)
   80524:	781b      	ldrb	r3, [r3, #0]
   80526:	3301      	adds	r3, #1
   80528:	b2da      	uxtb	r2, r3
   8052a:	4b21      	ldr	r3, [pc, #132]	; (805b0 <USART0_Handler+0x124>)
   8052c:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   8052e:	4b1f      	ldr	r3, [pc, #124]	; (805ac <USART0_Handler+0x120>)
   80530:	781b      	ldrb	r3, [r3, #0]
   80532:	2b01      	cmp	r3, #1
   80534:	d11d      	bne.n	80572 <USART0_Handler+0xe6>
   80536:	4b1c      	ldr	r3, [pc, #112]	; (805a8 <USART0_Handler+0x11c>)
   80538:	781b      	ldrb	r3, [r3, #0]
   8053a:	2b01      	cmp	r3, #1
   8053c:	d119      	bne.n	80572 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   8053e:	4b1f      	ldr	r3, [pc, #124]	; (805bc <USART0_Handler+0x130>)
   80540:	4798      	blx	r3
				command_end = 0;
   80542:	4b1a      	ldr	r3, [pc, #104]	; (805ac <USART0_Handler+0x120>)
   80544:	2200      	movs	r2, #0
   80546:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80548:	4b17      	ldr	r3, [pc, #92]	; (805a8 <USART0_Handler+0x11c>)
   8054a:	2200      	movs	r2, #0
   8054c:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   8054e:	4b18      	ldr	r3, [pc, #96]	; (805b0 <USART0_Handler+0x124>)
   80550:	2200      	movs	r2, #0
   80552:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80554:	2300      	movs	r3, #0
   80556:	73bb      	strb	r3, [r7, #14]
   80558:	e006      	b.n	80568 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   8055a:	7bbb      	ldrb	r3, [r7, #14]
   8055c:	4a16      	ldr	r2, [pc, #88]	; (805b8 <USART0_Handler+0x12c>)
   8055e:	2100      	movs	r1, #0
   80560:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80562:	7bbb      	ldrb	r3, [r7, #14]
   80564:	3301      	adds	r3, #1
   80566:	73bb      	strb	r3, [r7, #14]
   80568:	7bbb      	ldrb	r3, [r7, #14]
   8056a:	2b09      	cmp	r3, #9
   8056c:	d9f5      	bls.n	8055a <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   8056e:	2301      	movs	r3, #1
   80570:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80572:	7bfb      	ldrb	r3, [r7, #15]
   80574:	2b00      	cmp	r3, #0
   80576:	d105      	bne.n	80584 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80578:	4b09      	ldr	r3, [pc, #36]	; (805a0 <USART0_Handler+0x114>)
   8057a:	681b      	ldr	r3, [r3, #0]
   8057c:	4804      	ldr	r0, [pc, #16]	; (80590 <USART0_Handler+0x104>)
   8057e:	4619      	mov	r1, r3
   80580:	4b0f      	ldr	r3, [pc, #60]	; (805c0 <USART0_Handler+0x134>)
   80582:	4798      	blx	r3
					
			command_completed = 0;
   80584:	2300      	movs	r3, #0
   80586:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80588:	3710      	adds	r7, #16
   8058a:	46bd      	mov	sp, r7
   8058c:	bd80      	pop	{r7, pc}
   8058e:	bf00      	nop
   80590:	40098000 	.word	0x40098000
   80594:	00081d59 	.word	0x00081d59
   80598:	000814ed 	.word	0x000814ed
   8059c:	20070458 	.word	0x20070458
   805a0:	20070454 	.word	0x20070454
   805a4:	00081ddd 	.word	0x00081ddd
   805a8:	20070459 	.word	0x20070459
   805ac:	2007045a 	.word	0x2007045a
   805b0:	20070468 	.word	0x20070468
   805b4:	cccccccd 	.word	0xcccccccd
   805b8:	2007045c 	.word	0x2007045c
   805bc:	000805c5 	.word	0x000805c5
   805c0:	00081da9 	.word	0x00081da9

000805c4 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   805c4:	b580      	push	{r7, lr}
   805c6:	b084      	sub	sp, #16
   805c8:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   805ca:	2300      	movs	r3, #0
   805cc:	60bb      	str	r3, [r7, #8]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   805ce:	2300      	movs	r3, #0
   805d0:	71fb      	strb	r3, [r7, #7]
	uint8_t hk = 1;
   805d2:	2301      	movs	r3, #1
   805d4:	71bb      	strb	r3, [r7, #6]
	uint8_t sad = 1;
   805d6:	2301      	movs	r3, #1
   805d8:	717b      	strb	r3, [r7, #5]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   805da:	4b2e      	ldr	r3, [pc, #184]	; (80694 <check_command+0xd0>)
   805dc:	603b      	str	r3, [r7, #0]
	
	hk =  check_string(check_array);
   805de:	6838      	ldr	r0, [r7, #0]
   805e0:	4b2d      	ldr	r3, [pc, #180]	; (80698 <check_command+0xd4>)
   805e2:	4798      	blx	r3
   805e4:	4603      	mov	r3, r0
   805e6:	71bb      	strb	r3, [r7, #6]
	
	check_array = "i am sad";
   805e8:	4b2c      	ldr	r3, [pc, #176]	; (8069c <check_command+0xd8>)
   805ea:	603b      	str	r3, [r7, #0]
	
	sad = check_string(check_array);
   805ec:	6838      	ldr	r0, [r7, #0]
   805ee:	4b2a      	ldr	r3, [pc, #168]	; (80698 <check_command+0xd4>)
   805f0:	4798      	blx	r3
   805f2:	4603      	mov	r3, r0
   805f4:	717b      	strb	r3, [r7, #5]
	
	if (hk == 1)
   805f6:	79bb      	ldrb	r3, [r7, #6]
   805f8:	2b01      	cmp	r3, #1
   805fa:	d12f      	bne.n	8065c <check_command+0x98>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   805fc:	4b28      	ldr	r3, [pc, #160]	; (806a0 <check_command+0xdc>)
   805fe:	60fb      	str	r3, [r7, #12]
				
		while(*message_array)
   80600:	e00d      	b.n	8061e <check_command+0x5a>
		{
			character = *message_array;
   80602:	68fb      	ldr	r3, [r7, #12]
   80604:	781b      	ldrb	r3, [r3, #0]
   80606:	60bb      	str	r3, [r7, #8]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80608:	bf00      	nop
   8060a:	4826      	ldr	r0, [pc, #152]	; (806a4 <check_command+0xe0>)
   8060c:	68b9      	ldr	r1, [r7, #8]
   8060e:	4b26      	ldr	r3, [pc, #152]	; (806a8 <check_command+0xe4>)
   80610:	4798      	blx	r3
   80612:	4603      	mov	r3, r0
   80614:	2b00      	cmp	r3, #0
   80616:	d1f8      	bne.n	8060a <check_command+0x46>
			
			message_array++;
   80618:	68fb      	ldr	r3, [r7, #12]
   8061a:	3301      	adds	r3, #1
   8061c:	60fb      	str	r3, [r7, #12]
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   8061e:	68fb      	ldr	r3, [r7, #12]
   80620:	781b      	ldrb	r3, [r3, #0]
   80622:	2b00      	cmp	r3, #0
   80624:	d1ed      	bne.n	80602 <check_command+0x3e>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		if(can_glob_data_reg[0] == 0x550003ff)
   80626:	4b21      	ldr	r3, [pc, #132]	; (806ac <check_command+0xe8>)
   80628:	681a      	ldr	r2, [r3, #0]
   8062a:	4b21      	ldr	r3, [pc, #132]	; (806b0 <check_command+0xec>)
   8062c:	429a      	cmp	r2, r3
   8062e:	d102      	bne.n	80636 <check_command+0x72>
		{
			message_array = "\n\rSUBSYSTEM TEMPERATURE IS 22 C\n\r";			
   80630:	4b20      	ldr	r3, [pc, #128]	; (806b4 <check_command+0xf0>)
   80632:	60fb      	str	r3, [r7, #12]
		}

		while(*message_array)
   80634:	e00e      	b.n	80654 <check_command+0x90>
   80636:	e00d      	b.n	80654 <check_command+0x90>
		{
			character = *message_array;
   80638:	68fb      	ldr	r3, [r7, #12]
   8063a:	781b      	ldrb	r3, [r3, #0]
   8063c:	60bb      	str	r3, [r7, #8]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8063e:	bf00      	nop
   80640:	4818      	ldr	r0, [pc, #96]	; (806a4 <check_command+0xe0>)
   80642:	68b9      	ldr	r1, [r7, #8]
   80644:	4b18      	ldr	r3, [pc, #96]	; (806a8 <check_command+0xe4>)
   80646:	4798      	blx	r3
   80648:	4603      	mov	r3, r0
   8064a:	2b00      	cmp	r3, #0
   8064c:	d1f8      	bne.n	80640 <check_command+0x7c>
			
			message_array++;
   8064e:	68fb      	ldr	r3, [r7, #12]
   80650:	3301      	adds	r3, #1
   80652:	60fb      	str	r3, [r7, #12]
		if(can_glob_data_reg[0] == 0x550003ff)
		{
			message_array = "\n\rSUBSYSTEM TEMPERATURE IS 22 C\n\r";			
		}

		while(*message_array)
   80654:	68fb      	ldr	r3, [r7, #12]
   80656:	781b      	ldrb	r3, [r3, #0]
   80658:	2b00      	cmp	r3, #0
   8065a:	d1ed      	bne.n	80638 <check_command+0x74>
			
			message_array++;
		}
	}
	
	if (sad == 1)
   8065c:	797b      	ldrb	r3, [r7, #5]
   8065e:	2b01      	cmp	r3, #1
   80660:	d114      	bne.n	8068c <check_command+0xc8>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   80662:	4b15      	ldr	r3, [pc, #84]	; (806b8 <check_command+0xf4>)
   80664:	60fb      	str	r3, [r7, #12]
		
		while(*message_array)
   80666:	e00d      	b.n	80684 <check_command+0xc0>
		{
			character = *message_array;
   80668:	68fb      	ldr	r3, [r7, #12]
   8066a:	781b      	ldrb	r3, [r3, #0]
   8066c:	60bb      	str	r3, [r7, #8]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8066e:	bf00      	nop
   80670:	480c      	ldr	r0, [pc, #48]	; (806a4 <check_command+0xe0>)
   80672:	68b9      	ldr	r1, [r7, #8]
   80674:	4b0c      	ldr	r3, [pc, #48]	; (806a8 <check_command+0xe4>)
   80676:	4798      	blx	r3
   80678:	4603      	mov	r3, r0
   8067a:	2b00      	cmp	r3, #0
   8067c:	d1f8      	bne.n	80670 <check_command+0xac>
			
			message_array++;
   8067e:	68fb      	ldr	r3, [r7, #12]
   80680:	3301      	adds	r3, #1
   80682:	60fb      	str	r3, [r7, #12]
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80684:	68fb      	ldr	r3, [r7, #12]
   80686:	781b      	ldrb	r3, [r3, #0]
   80688:	2b00      	cmp	r3, #0
   8068a:	d1ed      	bne.n	80668 <check_command+0xa4>
			
			message_array++;
		}
	}
	
	return;
   8068c:	bf00      	nop
}
   8068e:	3710      	adds	r7, #16
   80690:	46bd      	mov	sp, r7
   80692:	bd80      	pop	{r7, pc}
   80694:	000854e4 	.word	0x000854e4
   80698:	000806bd 	.word	0x000806bd
   8069c:	000854e8 	.word	0x000854e8
   806a0:	000854f4 	.word	0x000854f4
   806a4:	40098000 	.word	0x40098000
   806a8:	00081da9 	.word	0x00081da9
   806ac:	2007a674 	.word	0x2007a674
   806b0:	550003ff 	.word	0x550003ff
   806b4:	00085514 	.word	0x00085514
   806b8:	00085538 	.word	0x00085538

000806bc <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   806bc:	b480      	push	{r7}
   806be:	b085      	sub	sp, #20
   806c0:	af00      	add	r7, sp, #0
   806c2:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   806c4:	2300      	movs	r3, #0
   806c6:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   806c8:	2301      	movs	r3, #1
   806ca:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   806cc:	687b      	ldr	r3, [r7, #4]
   806ce:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   806d0:	2300      	movs	r3, #0
   806d2:	73fb      	strb	r3, [r7, #15]
   806d4:	e014      	b.n	80700 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   806d6:	68bb      	ldr	r3, [r7, #8]
   806d8:	781a      	ldrb	r2, [r3, #0]
   806da:	7bfb      	ldrb	r3, [r7, #15]
   806dc:	490d      	ldr	r1, [pc, #52]	; (80714 <check_string+0x58>)
   806de:	5ccb      	ldrb	r3, [r1, r3]
   806e0:	429a      	cmp	r2, r3
   806e2:	d002      	beq.n	806ea <check_string+0x2e>
		{
			ret_val = 0;
   806e4:	2300      	movs	r3, #0
   806e6:	73bb      	strb	r3, [r7, #14]
			break;
   806e8:	e00d      	b.n	80706 <check_string+0x4a>
		}
		if (!*temp_str)
   806ea:	68bb      	ldr	r3, [r7, #8]
   806ec:	781b      	ldrb	r3, [r3, #0]
   806ee:	2b00      	cmp	r3, #0
   806f0:	d100      	bne.n	806f4 <check_string+0x38>
			break;
   806f2:	e008      	b.n	80706 <check_string+0x4a>
			
		temp_str++;
   806f4:	68bb      	ldr	r3, [r7, #8]
   806f6:	3301      	adds	r3, #1
   806f8:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   806fa:	7bfb      	ldrb	r3, [r7, #15]
   806fc:	3301      	adds	r3, #1
   806fe:	73fb      	strb	r3, [r7, #15]
   80700:	7bfb      	ldrb	r3, [r7, #15]
   80702:	2b09      	cmp	r3, #9
   80704:	d9e7      	bls.n	806d6 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   80706:	7bbb      	ldrb	r3, [r7, #14]
}
   80708:	4618      	mov	r0, r3
   8070a:	3714      	adds	r7, #20
   8070c:	46bd      	mov	sp, r7
   8070e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80712:	4770      	bx	lr
   80714:	2007045c 	.word	0x2007045c

00080718 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   80718:	b5b0      	push	{r4, r5, r7, lr}
   8071a:	b086      	sub	sp, #24
   8071c:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   8071e:	4b13      	ldr	r3, [pc, #76]	; (8076c <configure_usart+0x54>)
   80720:	463c      	mov	r4, r7
   80722:	461d      	mov	r5, r3
   80724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80728:	e895 0003 	ldmia.w	r5, {r0, r1}
   8072c:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   80730:	2011      	movs	r0, #17
   80732:	4b0f      	ldr	r3, [pc, #60]	; (80770 <configure_usart+0x58>)
   80734:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   80736:	4b0f      	ldr	r3, [pc, #60]	; (80774 <configure_usart+0x5c>)
   80738:	4798      	blx	r3
   8073a:	4603      	mov	r3, r0
   8073c:	463a      	mov	r2, r7
   8073e:	480e      	ldr	r0, [pc, #56]	; (80778 <configure_usart+0x60>)
   80740:	4611      	mov	r1, r2
   80742:	461a      	mov	r2, r3
   80744:	4b0d      	ldr	r3, [pc, #52]	; (8077c <configure_usart+0x64>)
   80746:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   80748:	480b      	ldr	r0, [pc, #44]	; (80778 <configure_usart+0x60>)
   8074a:	f04f 31ff 	mov.w	r1, #4294967295
   8074e:	4b0c      	ldr	r3, [pc, #48]	; (80780 <configure_usart+0x68>)
   80750:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   80752:	4809      	ldr	r0, [pc, #36]	; (80778 <configure_usart+0x60>)
   80754:	4b0b      	ldr	r3, [pc, #44]	; (80784 <configure_usart+0x6c>)
   80756:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   80758:	4807      	ldr	r0, [pc, #28]	; (80778 <configure_usart+0x60>)
   8075a:	4b0b      	ldr	r3, [pc, #44]	; (80788 <configure_usart+0x70>)
   8075c:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   8075e:	2011      	movs	r0, #17
   80760:	4b0a      	ldr	r3, [pc, #40]	; (8078c <configure_usart+0x74>)
   80762:	4798      	blx	r3
}
   80764:	3718      	adds	r7, #24
   80766:	46bd      	mov	sp, r7
   80768:	bdb0      	pop	{r4, r5, r7, pc}
   8076a:	bf00      	nop
   8076c:	00085554 	.word	0x00085554
   80770:	00080475 	.word	0x00080475
   80774:	00080461 	.word	0x00080461
   80778:	40098000 	.word	0x40098000
   8077c:	00081c3d 	.word	0x00081c3d
   80780:	00081d3d 	.word	0x00081d3d
   80784:	00081cc1 	.word	0x00081cc1
   80788:	00081cf1 	.word	0x00081cf1
   8078c:	000803a1 	.word	0x000803a1

00080790 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   80790:	b580      	push	{r7, lr}
   80792:	b084      	sub	sp, #16
   80794:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   80796:	2300      	movs	r3, #0
   80798:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   8079a:	2300      	movs	r3, #0
   8079c:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   8079e:	4b1a      	ldr	r3, [pc, #104]	; (80808 <usart_initialize+0x78>)
   807a0:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   807a2:	4b1a      	ldr	r3, [pc, #104]	; (8080c <usart_initialize+0x7c>)
   807a4:	2200      	movs	r2, #0
   807a6:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   807a8:	2300      	movs	r3, #0
   807aa:	73fb      	strb	r3, [r7, #15]
   807ac:	e006      	b.n	807bc <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   807ae:	7bfb      	ldrb	r3, [r7, #15]
   807b0:	4a17      	ldr	r2, [pc, #92]	; (80810 <usart_initialize+0x80>)
   807b2:	2100      	movs	r1, #0
   807b4:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   807b6:	7bfb      	ldrb	r3, [r7, #15]
   807b8:	3301      	adds	r3, #1
   807ba:	73fb      	strb	r3, [r7, #15]
   807bc:	7bfb      	ldrb	r3, [r7, #15]
   807be:	2b09      	cmp	r3, #9
   807c0:	d9f5      	bls.n	807ae <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   807c2:	4814      	ldr	r0, [pc, #80]	; (80814 <usart_initialize+0x84>)
   807c4:	2101      	movs	r1, #1
   807c6:	4b14      	ldr	r3, [pc, #80]	; (80818 <usart_initialize+0x88>)
   807c8:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   807ca:	4812      	ldr	r0, [pc, #72]	; (80814 <usart_initialize+0x84>)
   807cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   807d0:	4b12      	ldr	r3, [pc, #72]	; (8081c <usart_initialize+0x8c>)
   807d2:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   807d4:	4b12      	ldr	r3, [pc, #72]	; (80820 <usart_initialize+0x90>)
   807d6:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   807d8:	e00d      	b.n	807f6 <usart_initialize+0x66>
	{
		character = *message_array;
   807da:	68bb      	ldr	r3, [r7, #8]
   807dc:	781b      	ldrb	r3, [r3, #0]
   807de:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   807e0:	bf00      	nop
   807e2:	480c      	ldr	r0, [pc, #48]	; (80814 <usart_initialize+0x84>)
   807e4:	6879      	ldr	r1, [r7, #4]
   807e6:	4b0f      	ldr	r3, [pc, #60]	; (80824 <usart_initialize+0x94>)
   807e8:	4798      	blx	r3
   807ea:	4603      	mov	r3, r0
   807ec:	2b00      	cmp	r3, #0
   807ee:	d1f8      	bne.n	807e2 <usart_initialize+0x52>
			
		message_array++;
   807f0:	68bb      	ldr	r3, [r7, #8]
   807f2:	3301      	adds	r3, #1
   807f4:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   807f6:	68bb      	ldr	r3, [r7, #8]
   807f8:	781b      	ldrb	r3, [r3, #0]
   807fa:	2b00      	cmp	r3, #0
   807fc:	d1ed      	bne.n	807da <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   807fe:	bf00      	nop
}
   80800:	3710      	adds	r7, #16
   80802:	46bd      	mov	sp, r7
   80804:	bd80      	pop	{r7, pc}
   80806:	bf00      	nop
   80808:	00080719 	.word	0x00080719
   8080c:	20070458 	.word	0x20070458
   80810:	2007045c 	.word	0x2007045c
   80814:	40098000 	.word	0x40098000
   80818:	00081d21 	.word	0x00081d21
   8081c:	00081d3d 	.word	0x00081d3d
   80820:	0008556c 	.word	0x0008556c
   80824:	00081da9 	.word	0x00081da9

00080828 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80828:	b580      	push	{r7, lr}
   8082a:	b082      	sub	sp, #8
   8082c:	af00      	add	r7, sp, #0
   8082e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80830:	687b      	ldr	r3, [r7, #4]
   80832:	2b07      	cmp	r3, #7
   80834:	d82e      	bhi.n	80894 <osc_enable+0x6c>
   80836:	a201      	add	r2, pc, #4	; (adr r2, 8083c <osc_enable+0x14>)
   80838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8083c:	00080895 	.word	0x00080895
   80840:	0008085d 	.word	0x0008085d
   80844:	00080865 	.word	0x00080865
   80848:	0008086d 	.word	0x0008086d
   8084c:	00080875 	.word	0x00080875
   80850:	0008087d 	.word	0x0008087d
   80854:	00080885 	.word	0x00080885
   80858:	0008088d 	.word	0x0008088d
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8085c:	2000      	movs	r0, #0
   8085e:	4b0f      	ldr	r3, [pc, #60]	; (8089c <osc_enable+0x74>)
   80860:	4798      	blx	r3
		break;
   80862:	e017      	b.n	80894 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80864:	2001      	movs	r0, #1
   80866:	4b0d      	ldr	r3, [pc, #52]	; (8089c <osc_enable+0x74>)
   80868:	4798      	blx	r3
		break;
   8086a:	e013      	b.n	80894 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8086c:	2000      	movs	r0, #0
   8086e:	4b0c      	ldr	r3, [pc, #48]	; (808a0 <osc_enable+0x78>)
   80870:	4798      	blx	r3
		break;
   80872:	e00f      	b.n	80894 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80874:	2010      	movs	r0, #16
   80876:	4b0a      	ldr	r3, [pc, #40]	; (808a0 <osc_enable+0x78>)
   80878:	4798      	blx	r3
		break;
   8087a:	e00b      	b.n	80894 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8087c:	2020      	movs	r0, #32
   8087e:	4b08      	ldr	r3, [pc, #32]	; (808a0 <osc_enable+0x78>)
   80880:	4798      	blx	r3
		break;
   80882:	e007      	b.n	80894 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   80884:	2000      	movs	r0, #0
   80886:	4b07      	ldr	r3, [pc, #28]	; (808a4 <osc_enable+0x7c>)
   80888:	4798      	blx	r3
		break;
   8088a:	e003      	b.n	80894 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   8088c:	2001      	movs	r0, #1
   8088e:	4b05      	ldr	r3, [pc, #20]	; (808a4 <osc_enable+0x7c>)
   80890:	4798      	blx	r3
		break;
   80892:	bf00      	nop
	}
}
   80894:	3708      	adds	r7, #8
   80896:	46bd      	mov	sp, r7
   80898:	bd80      	pop	{r7, pc}
   8089a:	bf00      	nop
   8089c:	000818f1 	.word	0x000818f1
   808a0:	00081961 	.word	0x00081961
   808a4:	00081a01 	.word	0x00081a01

000808a8 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   808a8:	b580      	push	{r7, lr}
   808aa:	b082      	sub	sp, #8
   808ac:	af00      	add	r7, sp, #0
   808ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   808b0:	687b      	ldr	r3, [r7, #4]
   808b2:	2b07      	cmp	r3, #7
   808b4:	d826      	bhi.n	80904 <osc_is_ready+0x5c>
   808b6:	a201      	add	r2, pc, #4	; (adr r2, 808bc <osc_is_ready+0x14>)
   808b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   808bc:	000808dd 	.word	0x000808dd
   808c0:	000808e1 	.word	0x000808e1
   808c4:	000808e1 	.word	0x000808e1
   808c8:	000808f3 	.word	0x000808f3
   808cc:	000808f3 	.word	0x000808f3
   808d0:	000808f3 	.word	0x000808f3
   808d4:	000808f3 	.word	0x000808f3
   808d8:	000808f3 	.word	0x000808f3
	case OSC_SLCK_32K_RC:
		return 1;
   808dc:	2301      	movs	r3, #1
   808de:	e012      	b.n	80906 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   808e0:	4b0b      	ldr	r3, [pc, #44]	; (80910 <osc_is_ready+0x68>)
   808e2:	4798      	blx	r3
   808e4:	4603      	mov	r3, r0
   808e6:	2b00      	cmp	r3, #0
   808e8:	bf0c      	ite	eq
   808ea:	2300      	moveq	r3, #0
   808ec:	2301      	movne	r3, #1
   808ee:	b2db      	uxtb	r3, r3
   808f0:	e009      	b.n	80906 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   808f2:	4b08      	ldr	r3, [pc, #32]	; (80914 <osc_is_ready+0x6c>)
   808f4:	4798      	blx	r3
   808f6:	4603      	mov	r3, r0
   808f8:	2b00      	cmp	r3, #0
   808fa:	bf0c      	ite	eq
   808fc:	2300      	moveq	r3, #0
   808fe:	2301      	movne	r3, #1
   80900:	b2db      	uxtb	r3, r3
   80902:	e000      	b.n	80906 <osc_is_ready+0x5e>
	}

	return 0;
   80904:	2300      	movs	r3, #0
}
   80906:	4618      	mov	r0, r3
   80908:	3708      	adds	r7, #8
   8090a:	46bd      	mov	sp, r7
   8090c:	bd80      	pop	{r7, pc}
   8090e:	bf00      	nop
   80910:	0008192d 	.word	0x0008192d
   80914:	00081a6d 	.word	0x00081a6d

00080918 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80918:	b480      	push	{r7}
   8091a:	b083      	sub	sp, #12
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80920:	687b      	ldr	r3, [r7, #4]
   80922:	2b07      	cmp	r3, #7
   80924:	d825      	bhi.n	80972 <osc_get_rate+0x5a>
   80926:	a201      	add	r2, pc, #4	; (adr r2, 8092c <osc_get_rate+0x14>)
   80928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8092c:	0008094d 	.word	0x0008094d
   80930:	00080953 	.word	0x00080953
   80934:	00080959 	.word	0x00080959
   80938:	0008095f 	.word	0x0008095f
   8093c:	00080963 	.word	0x00080963
   80940:	00080967 	.word	0x00080967
   80944:	0008096b 	.word	0x0008096b
   80948:	0008096f 	.word	0x0008096f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8094c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80950:	e010      	b.n	80974 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80956:	e00d      	b.n	80974 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8095c:	e00a      	b.n	80974 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8095e:	4b08      	ldr	r3, [pc, #32]	; (80980 <osc_get_rate+0x68>)
   80960:	e008      	b.n	80974 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80962:	4b08      	ldr	r3, [pc, #32]	; (80984 <osc_get_rate+0x6c>)
   80964:	e006      	b.n	80974 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80966:	4b08      	ldr	r3, [pc, #32]	; (80988 <osc_get_rate+0x70>)
   80968:	e004      	b.n	80974 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8096a:	4b07      	ldr	r3, [pc, #28]	; (80988 <osc_get_rate+0x70>)
   8096c:	e002      	b.n	80974 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8096e:	4b06      	ldr	r3, [pc, #24]	; (80988 <osc_get_rate+0x70>)
   80970:	e000      	b.n	80974 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80972:	2300      	movs	r3, #0
}
   80974:	4618      	mov	r0, r3
   80976:	370c      	adds	r7, #12
   80978:	46bd      	mov	sp, r7
   8097a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8097e:	4770      	bx	lr
   80980:	003d0900 	.word	0x003d0900
   80984:	007a1200 	.word	0x007a1200
   80988:	00b71b00 	.word	0x00b71b00

0008098c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8098c:	b580      	push	{r7, lr}
   8098e:	b082      	sub	sp, #8
   80990:	af00      	add	r7, sp, #0
   80992:	4603      	mov	r3, r0
   80994:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80996:	bf00      	nop
   80998:	79fb      	ldrb	r3, [r7, #7]
   8099a:	4618      	mov	r0, r3
   8099c:	4b05      	ldr	r3, [pc, #20]	; (809b4 <osc_wait_ready+0x28>)
   8099e:	4798      	blx	r3
   809a0:	4603      	mov	r3, r0
   809a2:	f083 0301 	eor.w	r3, r3, #1
   809a6:	b2db      	uxtb	r3, r3
   809a8:	2b00      	cmp	r3, #0
   809aa:	d1f5      	bne.n	80998 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   809ac:	3708      	adds	r7, #8
   809ae:	46bd      	mov	sp, r7
   809b0:	bd80      	pop	{r7, pc}
   809b2:	bf00      	nop
   809b4:	000808a9 	.word	0x000808a9

000809b8 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	b086      	sub	sp, #24
   809bc:	af00      	add	r7, sp, #0
   809be:	60f8      	str	r0, [r7, #12]
   809c0:	607a      	str	r2, [r7, #4]
   809c2:	603b      	str	r3, [r7, #0]
   809c4:	460b      	mov	r3, r1
   809c6:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   809c8:	687b      	ldr	r3, [r7, #4]
   809ca:	2b00      	cmp	r3, #0
   809cc:	d107      	bne.n	809de <pll_config_init+0x26>
   809ce:	683b      	ldr	r3, [r7, #0]
   809d0:	2b00      	cmp	r3, #0
   809d2:	d104      	bne.n	809de <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   809d4:	68fb      	ldr	r3, [r7, #12]
   809d6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   809da:	601a      	str	r2, [r3, #0]
   809dc:	e019      	b.n	80a12 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   809de:	7afb      	ldrb	r3, [r7, #11]
   809e0:	4618      	mov	r0, r3
   809e2:	4b0d      	ldr	r3, [pc, #52]	; (80a18 <pll_config_init+0x60>)
   809e4:	4798      	blx	r3
   809e6:	4602      	mov	r2, r0
   809e8:	687b      	ldr	r3, [r7, #4]
   809ea:	fbb2 f3f3 	udiv	r3, r2, r3
   809ee:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   809f0:	697b      	ldr	r3, [r7, #20]
   809f2:	683a      	ldr	r2, [r7, #0]
   809f4:	fb02 f303 	mul.w	r3, r2, r3
   809f8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   809fa:	683b      	ldr	r3, [r7, #0]
   809fc:	3b01      	subs	r3, #1
   809fe:	041a      	lsls	r2, r3, #16
   80a00:	4b06      	ldr	r3, [pc, #24]	; (80a1c <pll_config_init+0x64>)
   80a02:	4013      	ands	r3, r2
   80a04:	687a      	ldr	r2, [r7, #4]
   80a06:	b2d2      	uxtb	r2, r2
   80a08:	4313      	orrs	r3, r2
   80a0a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   80a0e:	68fb      	ldr	r3, [r7, #12]
   80a10:	601a      	str	r2, [r3, #0]
	}
}
   80a12:	3718      	adds	r7, #24
   80a14:	46bd      	mov	sp, r7
   80a16:	bd80      	pop	{r7, pc}
   80a18:	00080919 	.word	0x00080919
   80a1c:	07ff0000 	.word	0x07ff0000

00080a20 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80a20:	b580      	push	{r7, lr}
   80a22:	b082      	sub	sp, #8
   80a24:	af00      	add	r7, sp, #0
   80a26:	6078      	str	r0, [r7, #4]
   80a28:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   80a2a:	683b      	ldr	r3, [r7, #0]
   80a2c:	2b00      	cmp	r3, #0
   80a2e:	d108      	bne.n	80a42 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80a30:	4b08      	ldr	r3, [pc, #32]	; (80a54 <pll_enable+0x34>)
   80a32:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80a34:	4b08      	ldr	r3, [pc, #32]	; (80a58 <pll_enable+0x38>)
   80a36:	687a      	ldr	r2, [r7, #4]
   80a38:	6812      	ldr	r2, [r2, #0]
   80a3a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a3e:	629a      	str	r2, [r3, #40]	; 0x28
   80a40:	e005      	b.n	80a4e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80a42:	4b05      	ldr	r3, [pc, #20]	; (80a58 <pll_enable+0x38>)
   80a44:	687a      	ldr	r2, [r7, #4]
   80a46:	6812      	ldr	r2, [r2, #0]
   80a48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80a4c:	61da      	str	r2, [r3, #28]
	}
}
   80a4e:	3708      	adds	r7, #8
   80a50:	46bd      	mov	sp, r7
   80a52:	bd80      	pop	{r7, pc}
   80a54:	00081a89 	.word	0x00081a89
   80a58:	400e0600 	.word	0x400e0600

00080a5c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	b082      	sub	sp, #8
   80a60:	af00      	add	r7, sp, #0
   80a62:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80a64:	687b      	ldr	r3, [r7, #4]
   80a66:	2b00      	cmp	r3, #0
   80a68:	d103      	bne.n	80a72 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80a6a:	4b05      	ldr	r3, [pc, #20]	; (80a80 <pll_is_locked+0x24>)
   80a6c:	4798      	blx	r3
   80a6e:	4603      	mov	r3, r0
   80a70:	e002      	b.n	80a78 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80a72:	4b04      	ldr	r3, [pc, #16]	; (80a84 <pll_is_locked+0x28>)
   80a74:	4798      	blx	r3
   80a76:	4603      	mov	r3, r0
}
   80a78:	4618      	mov	r0, r3
   80a7a:	3708      	adds	r7, #8
   80a7c:	46bd      	mov	sp, r7
   80a7e:	bd80      	pop	{r7, pc}
   80a80:	00081aa1 	.word	0x00081aa1
   80a84:	00081abd 	.word	0x00081abd

00080a88 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80a88:	b580      	push	{r7, lr}
   80a8a:	b082      	sub	sp, #8
   80a8c:	af00      	add	r7, sp, #0
   80a8e:	4603      	mov	r3, r0
   80a90:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80a92:	79fb      	ldrb	r3, [r7, #7]
   80a94:	3b03      	subs	r3, #3
   80a96:	2b04      	cmp	r3, #4
   80a98:	d808      	bhi.n	80aac <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   80a9a:	79fb      	ldrb	r3, [r7, #7]
   80a9c:	4618      	mov	r0, r3
   80a9e:	4b05      	ldr	r3, [pc, #20]	; (80ab4 <pll_enable_source+0x2c>)
   80aa0:	4798      	blx	r3
		osc_wait_ready(e_src);
   80aa2:	79fb      	ldrb	r3, [r7, #7]
   80aa4:	4618      	mov	r0, r3
   80aa6:	4b04      	ldr	r3, [pc, #16]	; (80ab8 <pll_enable_source+0x30>)
   80aa8:	4798      	blx	r3
		break;
   80aaa:	e000      	b.n	80aae <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80aac:	bf00      	nop
	}
}
   80aae:	3708      	adds	r7, #8
   80ab0:	46bd      	mov	sp, r7
   80ab2:	bd80      	pop	{r7, pc}
   80ab4:	00080829 	.word	0x00080829
   80ab8:	0008098d 	.word	0x0008098d

00080abc <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80abc:	b580      	push	{r7, lr}
   80abe:	b082      	sub	sp, #8
   80ac0:	af00      	add	r7, sp, #0
   80ac2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80ac4:	bf00      	nop
   80ac6:	6878      	ldr	r0, [r7, #4]
   80ac8:	4b04      	ldr	r3, [pc, #16]	; (80adc <pll_wait_for_lock+0x20>)
   80aca:	4798      	blx	r3
   80acc:	4603      	mov	r3, r0
   80ace:	2b00      	cmp	r3, #0
   80ad0:	d0f9      	beq.n	80ac6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80ad2:	2300      	movs	r3, #0
}
   80ad4:	4618      	mov	r0, r3
   80ad6:	3708      	adds	r7, #8
   80ad8:	46bd      	mov	sp, r7
   80ada:	bd80      	pop	{r7, pc}
   80adc:	00080a5d 	.word	0x00080a5d

00080ae0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80ae0:	b580      	push	{r7, lr}
   80ae2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80ae4:	2006      	movs	r0, #6
   80ae6:	4b04      	ldr	r3, [pc, #16]	; (80af8 <sysclk_get_main_hz+0x18>)
   80ae8:	4798      	blx	r3
   80aea:	4602      	mov	r2, r0
   80aec:	4613      	mov	r3, r2
   80aee:	00db      	lsls	r3, r3, #3
   80af0:	1a9b      	subs	r3, r3, r2
   80af2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80af4:	4618      	mov	r0, r3
   80af6:	bd80      	pop	{r7, pc}
   80af8:	00080919 	.word	0x00080919

00080afc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80afc:	b580      	push	{r7, lr}
   80afe:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80b00:	4b02      	ldr	r3, [pc, #8]	; (80b0c <sysclk_get_cpu_hz+0x10>)
   80b02:	4798      	blx	r3
   80b04:	4603      	mov	r3, r0
   80b06:	085b      	lsrs	r3, r3, #1
}
   80b08:	4618      	mov	r0, r3
   80b0a:	bd80      	pop	{r7, pc}
   80b0c:	00080ae1 	.word	0x00080ae1

00080b10 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80b10:	b590      	push	{r4, r7, lr}
   80b12:	b083      	sub	sp, #12
   80b14:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80b16:	4b10      	ldr	r3, [pc, #64]	; (80b58 <sysclk_init+0x48>)
   80b18:	4798      	blx	r3
   80b1a:	4603      	mov	r3, r0
   80b1c:	4618      	mov	r0, r3
   80b1e:	4b0f      	ldr	r3, [pc, #60]	; (80b5c <sysclk_init+0x4c>)
   80b20:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80b22:	2006      	movs	r0, #6
   80b24:	4b0e      	ldr	r3, [pc, #56]	; (80b60 <sysclk_init+0x50>)
   80b26:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80b28:	1d3b      	adds	r3, r7, #4
   80b2a:	4618      	mov	r0, r3
   80b2c:	2106      	movs	r1, #6
   80b2e:	2201      	movs	r2, #1
   80b30:	230e      	movs	r3, #14
   80b32:	4c0c      	ldr	r4, [pc, #48]	; (80b64 <sysclk_init+0x54>)
   80b34:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80b36:	1d3b      	adds	r3, r7, #4
   80b38:	4618      	mov	r0, r3
   80b3a:	2100      	movs	r1, #0
   80b3c:	4b0a      	ldr	r3, [pc, #40]	; (80b68 <sysclk_init+0x58>)
   80b3e:	4798      	blx	r3
		pll_wait_for_lock(0);
   80b40:	2000      	movs	r0, #0
   80b42:	4b0a      	ldr	r3, [pc, #40]	; (80b6c <sysclk_init+0x5c>)
   80b44:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80b46:	2010      	movs	r0, #16
   80b48:	4b09      	ldr	r3, [pc, #36]	; (80b70 <sysclk_init+0x60>)
   80b4a:	4798      	blx	r3
		break;
   80b4c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80b4e:	4b09      	ldr	r3, [pc, #36]	; (80b74 <sysclk_init+0x64>)
   80b50:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80b52:	370c      	adds	r7, #12
   80b54:	46bd      	mov	sp, r7
   80b56:	bd90      	pop	{r4, r7, pc}
   80b58:	00080afd 	.word	0x00080afd
   80b5c:	000820b5 	.word	0x000820b5
   80b60:	00080a89 	.word	0x00080a89
   80b64:	000809b9 	.word	0x000809b9
   80b68:	00080a21 	.word	0x00080a21
   80b6c:	00080abd 	.word	0x00080abd
   80b70:	0008186d 	.word	0x0008186d
   80b74:	00081f35 	.word	0x00081f35

00080b78 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   80b78:	b580      	push	{r7, lr}
   80b7a:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80b7c:	4b32      	ldr	r3, [pc, #200]	; (80c48 <board_init+0xd0>)
   80b7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80b82:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80b84:	2001      	movs	r0, #1
   80b86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b8a:	4b30      	ldr	r3, [pc, #192]	; (80c4c <board_init+0xd4>)
   80b8c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80b8e:	2000      	movs	r0, #0
   80b90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b94:	4b2d      	ldr	r3, [pc, #180]	; (80c4c <board_init+0xd4>)
   80b96:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   80b98:	2034      	movs	r0, #52	; 0x34
   80b9a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80b9e:	4b2b      	ldr	r3, [pc, #172]	; (80c4c <board_init+0xd4>)
   80ba0:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   80ba2:	2035      	movs	r0, #53	; 0x35
   80ba4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80ba8:	4b28      	ldr	r3, [pc, #160]	; (80c4c <board_init+0xd4>)
   80baa:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   80bac:	202f      	movs	r0, #47	; 0x2f
   80bae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bb2:	4b26      	ldr	r3, [pc, #152]	; (80c4c <board_init+0xd4>)
   80bb4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   80bb6:	202e      	movs	r0, #46	; 0x2e
   80bb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bbc:	4b23      	ldr	r3, [pc, #140]	; (80c4c <board_init+0xd4>)
   80bbe:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   80bc0:	208f      	movs	r0, #143	; 0x8f
   80bc2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80bc6:	4b21      	ldr	r3, [pc, #132]	; (80c4c <board_init+0xd4>)
   80bc8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   80bca:	2090      	movs	r0, #144	; 0x90
   80bcc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80bd0:	4b1e      	ldr	r3, [pc, #120]	; (80c4c <board_init+0xd4>)
   80bd2:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   80bd4:	2057      	movs	r0, #87	; 0x57
   80bd6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80bda:	4b1c      	ldr	r3, [pc, #112]	; (80c4c <board_init+0xd4>)
   80bdc:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   80bde:	2057      	movs	r0, #87	; 0x57
   80be0:	4b1b      	ldr	r3, [pc, #108]	; (80c50 <board_init+0xd8>)
   80be2:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80be4:	203b      	movs	r0, #59	; 0x3b
   80be6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80bea:	4b18      	ldr	r3, [pc, #96]	; (80c4c <board_init+0xd4>)
   80bec:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80bee:	2055      	movs	r0, #85	; 0x55
   80bf0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80bf4:	4b15      	ldr	r3, [pc, #84]	; (80c4c <board_init+0xd4>)
   80bf6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80bf8:	2056      	movs	r0, #86	; 0x56
   80bfa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80bfe:	4b13      	ldr	r3, [pc, #76]	; (80c4c <board_init+0xd4>)
   80c00:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80c02:	2087      	movs	r0, #135	; 0x87
   80c04:	4913      	ldr	r1, [pc, #76]	; (80c54 <board_init+0xdc>)
   80c06:	4b11      	ldr	r3, [pc, #68]	; (80c4c <board_init+0xd4>)
   80c08:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80c0a:	2037      	movs	r0, #55	; 0x37
   80c0c:	4912      	ldr	r1, [pc, #72]	; (80c58 <board_init+0xe0>)
   80c0e:	4b0f      	ldr	r3, [pc, #60]	; (80c4c <board_init+0xd4>)
   80c10:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80c12:	4812      	ldr	r0, [pc, #72]	; (80c5c <board_init+0xe4>)
   80c14:	f44f 7140 	mov.w	r1, #768	; 0x300
   80c18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80c1c:	4b10      	ldr	r3, [pc, #64]	; (80c60 <board_init+0xe8>)
   80c1e:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80c20:	200a      	movs	r0, #10
   80c22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c26:	4b09      	ldr	r3, [pc, #36]	; (80c4c <board_init+0xd4>)
   80c28:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   80c2a:	200b      	movs	r0, #11
   80c2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c30:	4b06      	ldr	r3, [pc, #24]	; (80c4c <board_init+0xd4>)
   80c32:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   80c34:	208e      	movs	r0, #142	; 0x8e
   80c36:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80c3a:	4b04      	ldr	r3, [pc, #16]	; (80c4c <board_init+0xd4>)
   80c3c:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80c3e:	208e      	movs	r0, #142	; 0x8e
   80c40:	4b08      	ldr	r3, [pc, #32]	; (80c64 <board_init+0xec>)
   80c42:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80c44:	bd80      	pop	{r7, pc}
   80c46:	bf00      	nop
   80c48:	400e1a50 	.word	0x400e1a50
   80c4c:	0008154d 	.word	0x0008154d
   80c50:	00081485 	.word	0x00081485
   80c54:	28000079 	.word	0x28000079
   80c58:	28000059 	.word	0x28000059
   80c5c:	400e0e00 	.word	0x400e0e00
   80c60:	00081689 	.word	0x00081689
   80c64:	000814b9 	.word	0x000814b9

00080c68 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80c68:	b480      	push	{r7}
   80c6a:	b083      	sub	sp, #12
   80c6c:	af00      	add	r7, sp, #0
   80c6e:	6078      	str	r0, [r7, #4]
   80c70:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   80c72:	687b      	ldr	r3, [r7, #4]
   80c74:	683a      	ldr	r2, [r7, #0]
   80c76:	601a      	str	r2, [r3, #0]
}
   80c78:	370c      	adds	r7, #12
   80c7a:	46bd      	mov	sp, r7
   80c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c80:	4770      	bx	lr
   80c82:	bf00      	nop

00080c84 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80c84:	b480      	push	{r7}
   80c86:	b083      	sub	sp, #12
   80c88:	af00      	add	r7, sp, #0
   80c8a:	6078      	str	r0, [r7, #4]
   80c8c:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   80c8e:	687b      	ldr	r3, [r7, #4]
   80c90:	683a      	ldr	r2, [r7, #0]
   80c92:	605a      	str	r2, [r3, #4]
}
   80c94:	370c      	adds	r7, #12
   80c96:	46bd      	mov	sp, r7
   80c98:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c9c:	4770      	bx	lr
   80c9e:	bf00      	nop

00080ca0 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   80ca0:	b580      	push	{r7, lr}
   80ca2:	b082      	sub	sp, #8
   80ca4:	af00      	add	r7, sp, #0
   80ca6:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   80ca8:	687b      	ldr	r3, [r7, #4]
   80caa:	685b      	ldr	r3, [r3, #4]
   80cac:	4618      	mov	r0, r3
   80cae:	4b02      	ldr	r3, [pc, #8]	; (80cb8 <sn65hvd234_enable+0x18>)
   80cb0:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   80cb2:	3708      	adds	r7, #8
   80cb4:	46bd      	mov	sp, r7
   80cb6:	bd80      	pop	{r7, pc}
   80cb8:	00081485 	.word	0x00081485

00080cbc <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   80cbc:	b580      	push	{r7, lr}
   80cbe:	b082      	sub	sp, #8
   80cc0:	af00      	add	r7, sp, #0
   80cc2:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   80cc4:	687b      	ldr	r3, [r7, #4]
   80cc6:	681b      	ldr	r3, [r3, #0]
   80cc8:	4618      	mov	r0, r3
   80cca:	4b02      	ldr	r3, [pc, #8]	; (80cd4 <sn65hvd234_disable_low_power+0x18>)
   80ccc:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   80cce:	3708      	adds	r7, #8
   80cd0:	46bd      	mov	sp, r7
   80cd2:	bd80      	pop	{r7, pc}
   80cd4:	000814b9 	.word	0x000814b9

00080cd8 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   80cd8:	b580      	push	{r7, lr}
   80cda:	b08a      	sub	sp, #40	; 0x28
   80cdc:	af00      	add	r7, sp, #0
   80cde:	60f8      	str	r0, [r7, #12]
   80ce0:	60b9      	str	r1, [r7, #8]
   80ce2:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80ce4:	687b      	ldr	r3, [r7, #4]
   80ce6:	f246 12a8 	movw	r2, #25000	; 0x61a8
   80cea:	fb02 f203 	mul.w	r2, r2, r3
   80cee:	68bb      	ldr	r3, [r7, #8]
   80cf0:	4413      	add	r3, r2
   80cf2:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   80cf4:	687b      	ldr	r3, [r7, #4]
   80cf6:	f246 11a8 	movw	r1, #25000	; 0x61a8
   80cfa:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80cfe:	fbb2 f3f3 	udiv	r3, r2, r3
   80d02:	2b80      	cmp	r3, #128	; 0x80
   80d04:	d901      	bls.n	80d0a <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   80d06:	2300      	movs	r3, #0
   80d08:	e085      	b.n	80e16 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   80d0a:	68bb      	ldr	r3, [r7, #8]
   80d0c:	085a      	lsrs	r2, r3, #1
   80d0e:	687b      	ldr	r3, [r7, #4]
   80d10:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80d14:	fb01 f303 	mul.w	r3, r1, r3
   80d18:	429a      	cmp	r2, r3
   80d1a:	d201      	bcs.n	80d20 <can_set_baudrate+0x48>
		return 0;
   80d1c:	2300      	movs	r3, #0
   80d1e:	e07a      	b.n	80e16 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   80d20:	2308      	movs	r3, #8
   80d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   80d26:	f04f 33ff 	mov.w	r3, #4294967295
   80d2a:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80d2c:	2308      	movs	r3, #8
   80d2e:	77fb      	strb	r3, [r7, #31]
   80d30:	e02b      	b.n	80d8a <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   80d32:	7ffb      	ldrb	r3, [r7, #31]
   80d34:	687a      	ldr	r2, [r7, #4]
   80d36:	fb02 f303 	mul.w	r3, r2, r3
   80d3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80d3e:	fb02 f303 	mul.w	r3, r2, r3
   80d42:	68ba      	ldr	r2, [r7, #8]
   80d44:	fbb2 f3f3 	udiv	r3, r2, r3
   80d48:	2b80      	cmp	r3, #128	; 0x80
   80d4a:	d81b      	bhi.n	80d84 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   80d4c:	7ffb      	ldrb	r3, [r7, #31]
   80d4e:	687a      	ldr	r2, [r7, #4]
   80d50:	fb02 f303 	mul.w	r3, r2, r3
   80d54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80d58:	fb02 f203 	mul.w	r2, r2, r3
   80d5c:	68bb      	ldr	r3, [r7, #8]
   80d5e:	fbb3 f1f2 	udiv	r1, r3, r2
   80d62:	fb02 f201 	mul.w	r2, r2, r1
   80d66:	1a9b      	subs	r3, r3, r2
   80d68:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   80d6a:	69ba      	ldr	r2, [r7, #24]
   80d6c:	6a3b      	ldr	r3, [r7, #32]
   80d6e:	429a      	cmp	r2, r3
   80d70:	d208      	bcs.n	80d84 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   80d72:	69bb      	ldr	r3, [r7, #24]
   80d74:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   80d76:	7ffb      	ldrb	r3, [r7, #31]
   80d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   80d7c:	6a3b      	ldr	r3, [r7, #32]
   80d7e:	2b00      	cmp	r3, #0
   80d80:	d100      	bne.n	80d84 <can_set_baudrate+0xac>
					break;
   80d82:	e005      	b.n	80d90 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80d84:	7ffb      	ldrb	r3, [r7, #31]
   80d86:	3301      	adds	r3, #1
   80d88:	77fb      	strb	r3, [r7, #31]
   80d8a:	7ffb      	ldrb	r3, [r7, #31]
   80d8c:	2b19      	cmp	r3, #25
   80d8e:	d9d0      	bls.n	80d32 <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80d94:	687a      	ldr	r2, [r7, #4]
   80d96:	fb02 f303 	mul.w	r3, r2, r3
   80d9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80d9e:	fb02 f303 	mul.w	r3, r2, r3
   80da2:	68ba      	ldr	r2, [r7, #8]
   80da4:	fbb2 f3f3 	udiv	r3, r2, r3
   80da8:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   80daa:	7dfb      	ldrb	r3, [r7, #23]
   80dac:	2b01      	cmp	r3, #1
   80dae:	d801      	bhi.n	80db4 <can_set_baudrate+0xdc>
		return 0;
   80db0:	2300      	movs	r3, #0
   80db2:	e030      	b.n	80e16 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   80db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80db8:	f1a3 0208 	sub.w	r2, r3, #8
   80dbc:	4613      	mov	r3, r2
   80dbe:	005b      	lsls	r3, r3, #1
   80dc0:	4413      	add	r3, r2
   80dc2:	005b      	lsls	r3, r3, #1
   80dc4:	4a16      	ldr	r2, [pc, #88]	; (80e20 <can_set_baudrate+0x148>)
   80dc6:	4413      	add	r3, r2
   80dc8:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   80dca:	68f8      	ldr	r0, [r7, #12]
   80dcc:	4b15      	ldr	r3, [pc, #84]	; (80e24 <can_set_baudrate+0x14c>)
   80dce:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80dd0:	693b      	ldr	r3, [r7, #16]
   80dd2:	78db      	ldrb	r3, [r3, #3]
   80dd4:	3b01      	subs	r3, #1
   80dd6:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80dda:	693b      	ldr	r3, [r7, #16]
   80ddc:	789b      	ldrb	r3, [r3, #2]
   80dde:	3b01      	subs	r3, #1
   80de0:	011b      	lsls	r3, r3, #4
   80de2:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80de6:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80de8:	693b      	ldr	r3, [r7, #16]
   80dea:	785b      	ldrb	r3, [r3, #1]
   80dec:	3b01      	subs	r3, #1
   80dee:	021b      	lsls	r3, r3, #8
   80df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80df4:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80df6:	693b      	ldr	r3, [r7, #16]
   80df8:	791b      	ldrb	r3, [r3, #4]
   80dfa:	3b01      	subs	r3, #1
   80dfc:	031b      	lsls	r3, r3, #12
   80dfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80e02:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   80e04:	7dfb      	ldrb	r3, [r7, #23]
   80e06:	3b01      	subs	r3, #1
   80e08:	041b      	lsls	r3, r3, #16
   80e0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80e0e:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80e10:	68fb      	ldr	r3, [r7, #12]
   80e12:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   80e14:	2301      	movs	r3, #1
}
   80e16:	4618      	mov	r0, r3
   80e18:	3728      	adds	r7, #40	; 0x28
   80e1a:	46bd      	mov	sp, r7
   80e1c:	bd80      	pop	{r7, pc}
   80e1e:	bf00      	nop
   80e20:	0008558c 	.word	0x0008558c
   80e24:	00080ed1 	.word	0x00080ed1

00080e28 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   80e28:	b580      	push	{r7, lr}
   80e2a:	b086      	sub	sp, #24
   80e2c:	af00      	add	r7, sp, #0
   80e2e:	60f8      	str	r0, [r7, #12]
   80e30:	60b9      	str	r1, [r7, #8]
   80e32:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   80e34:	68f8      	ldr	r0, [r7, #12]
   80e36:	68b9      	ldr	r1, [r7, #8]
   80e38:	687a      	ldr	r2, [r7, #4]
   80e3a:	4b17      	ldr	r3, [pc, #92]	; (80e98 <can_init+0x70>)
   80e3c:	4798      	blx	r3
   80e3e:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   80e40:	697b      	ldr	r3, [r7, #20]
   80e42:	2b00      	cmp	r3, #0
   80e44:	d101      	bne.n	80e4a <can_init+0x22>
		return 0;
   80e46:	2300      	movs	r3, #0
   80e48:	e021      	b.n	80e8e <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   80e4a:	68f8      	ldr	r0, [r7, #12]
   80e4c:	4b13      	ldr	r3, [pc, #76]	; (80e9c <can_init+0x74>)
   80e4e:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   80e50:	68f8      	ldr	r0, [r7, #12]
   80e52:	4b13      	ldr	r3, [pc, #76]	; (80ea0 <can_init+0x78>)
   80e54:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   80e56:	2300      	movs	r3, #0
   80e58:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   80e5a:	2300      	movs	r3, #0
   80e5c:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80e5e:	e006      	b.n	80e6e <can_init+0x46>
		ul_flag = can_get_status(p_can);
   80e60:	68f8      	ldr	r0, [r7, #12]
   80e62:	4b10      	ldr	r3, [pc, #64]	; (80ea4 <can_init+0x7c>)
   80e64:	4798      	blx	r3
   80e66:	6178      	str	r0, [r7, #20]
		ul_tick++;
   80e68:	693b      	ldr	r3, [r7, #16]
   80e6a:	3301      	adds	r3, #1
   80e6c:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80e6e:	697b      	ldr	r3, [r7, #20]
   80e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80e74:	2b00      	cmp	r3, #0
   80e76:	d103      	bne.n	80e80 <can_init+0x58>
   80e78:	693a      	ldr	r2, [r7, #16]
   80e7a:	4b0b      	ldr	r3, [pc, #44]	; (80ea8 <can_init+0x80>)
   80e7c:	429a      	cmp	r2, r3
   80e7e:	d9ef      	bls.n	80e60 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   80e80:	693a      	ldr	r2, [r7, #16]
   80e82:	4b0a      	ldr	r3, [pc, #40]	; (80eac <can_init+0x84>)
   80e84:	429a      	cmp	r2, r3
   80e86:	d101      	bne.n	80e8c <can_init+0x64>
		return 0;
   80e88:	2300      	movs	r3, #0
   80e8a:	e000      	b.n	80e8e <can_init+0x66>
	} else {
		return 1;
   80e8c:	2301      	movs	r3, #1
	}
}
   80e8e:	4618      	mov	r0, r3
   80e90:	3718      	adds	r7, #24
   80e92:	46bd      	mov	sp, r7
   80e94:	bd80      	pop	{r7, pc}
   80e96:	bf00      	nop
   80e98:	00080cd9 	.word	0x00080cd9
   80e9c:	00081269 	.word	0x00081269
   80ea0:	00080eb1 	.word	0x00080eb1
   80ea4:	00080f29 	.word	0x00080f29
   80ea8:	0001869f 	.word	0x0001869f
   80eac:	000186a0 	.word	0x000186a0

00080eb0 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   80eb0:	b480      	push	{r7}
   80eb2:	b083      	sub	sp, #12
   80eb4:	af00      	add	r7, sp, #0
   80eb6:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   80eb8:	687b      	ldr	r3, [r7, #4]
   80eba:	681b      	ldr	r3, [r3, #0]
   80ebc:	f043 0201 	orr.w	r2, r3, #1
   80ec0:	687b      	ldr	r3, [r7, #4]
   80ec2:	601a      	str	r2, [r3, #0]
}
   80ec4:	370c      	adds	r7, #12
   80ec6:	46bd      	mov	sp, r7
   80ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ecc:	4770      	bx	lr
   80ece:	bf00      	nop

00080ed0 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   80ed0:	b480      	push	{r7}
   80ed2:	b083      	sub	sp, #12
   80ed4:	af00      	add	r7, sp, #0
   80ed6:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   80ed8:	687b      	ldr	r3, [r7, #4]
   80eda:	681b      	ldr	r3, [r3, #0]
   80edc:	f023 0201 	bic.w	r2, r3, #1
   80ee0:	687b      	ldr	r3, [r7, #4]
   80ee2:	601a      	str	r2, [r3, #0]
}
   80ee4:	370c      	adds	r7, #12
   80ee6:	46bd      	mov	sp, r7
   80ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80eec:	4770      	bx	lr
   80eee:	bf00      	nop

00080ef0 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   80ef0:	b480      	push	{r7}
   80ef2:	b083      	sub	sp, #12
   80ef4:	af00      	add	r7, sp, #0
   80ef6:	6078      	str	r0, [r7, #4]
   80ef8:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   80efa:	687b      	ldr	r3, [r7, #4]
   80efc:	683a      	ldr	r2, [r7, #0]
   80efe:	605a      	str	r2, [r3, #4]
}
   80f00:	370c      	adds	r7, #12
   80f02:	46bd      	mov	sp, r7
   80f04:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f08:	4770      	bx	lr
   80f0a:	bf00      	nop

00080f0c <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   80f0c:	b480      	push	{r7}
   80f0e:	b083      	sub	sp, #12
   80f10:	af00      	add	r7, sp, #0
   80f12:	6078      	str	r0, [r7, #4]
   80f14:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   80f16:	687b      	ldr	r3, [r7, #4]
   80f18:	683a      	ldr	r2, [r7, #0]
   80f1a:	609a      	str	r2, [r3, #8]
}
   80f1c:	370c      	adds	r7, #12
   80f1e:	46bd      	mov	sp, r7
   80f20:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f24:	4770      	bx	lr
   80f26:	bf00      	nop

00080f28 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   80f28:	b480      	push	{r7}
   80f2a:	b083      	sub	sp, #12
   80f2c:	af00      	add	r7, sp, #0
   80f2e:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   80f30:	687b      	ldr	r3, [r7, #4]
   80f32:	691b      	ldr	r3, [r3, #16]
}
   80f34:	4618      	mov	r0, r3
   80f36:	370c      	adds	r7, #12
   80f38:	46bd      	mov	sp, r7
   80f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f3e:	4770      	bx	lr

00080f40 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   80f40:	b480      	push	{r7}
   80f42:	b085      	sub	sp, #20
   80f44:	af00      	add	r7, sp, #0
   80f46:	6078      	str	r0, [r7, #4]
   80f48:	460b      	mov	r3, r1
   80f4a:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   80f4c:	687b      	ldr	r3, [r7, #4]
   80f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   80f50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   80f54:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   80f56:	78fa      	ldrb	r2, [r7, #3]
   80f58:	68fb      	ldr	r3, [r7, #12]
   80f5a:	431a      	orrs	r2, r3
   80f5c:	687b      	ldr	r3, [r7, #4]
   80f5e:	625a      	str	r2, [r3, #36]	; 0x24
}
   80f60:	3714      	adds	r7, #20
   80f62:	46bd      	mov	sp, r7
   80f64:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f68:	4770      	bx	lr
   80f6a:	bf00      	nop

00080f6c <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   80f6c:	b480      	push	{r7}
   80f6e:	b083      	sub	sp, #12
   80f70:	af00      	add	r7, sp, #0
   80f72:	6078      	str	r0, [r7, #4]
   80f74:	460b      	mov	r3, r1
   80f76:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   80f78:	78fb      	ldrb	r3, [r7, #3]
   80f7a:	687a      	ldr	r2, [r7, #4]
   80f7c:	015b      	lsls	r3, r3, #5
   80f7e:	4413      	add	r3, r2
   80f80:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80f84:	681b      	ldr	r3, [r3, #0]
}
   80f86:	4618      	mov	r0, r3
   80f88:	370c      	adds	r7, #12
   80f8a:	46bd      	mov	sp, r7
   80f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f90:	4770      	bx	lr
   80f92:	bf00      	nop

00080f94 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80f94:	b480      	push	{r7}
   80f96:	b085      	sub	sp, #20
   80f98:	af00      	add	r7, sp, #0
   80f9a:	6078      	str	r0, [r7, #4]
   80f9c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	681b      	ldr	r3, [r3, #0]
   80fa2:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   80fa4:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   80fa6:	683a      	ldr	r2, [r7, #0]
   80fa8:	7992      	ldrb	r2, [r2, #6]
   80faa:	0412      	lsls	r2, r2, #16
   80fac:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   80fb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80fb4:	6879      	ldr	r1, [r7, #4]
   80fb6:	015b      	lsls	r3, r3, #5
   80fb8:	440b      	add	r3, r1
   80fba:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80fbe:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   80fc0:	3714      	adds	r7, #20
   80fc2:	46bd      	mov	sp, r7
   80fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80fc8:	4770      	bx	lr
   80fca:	bf00      	nop

00080fcc <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80fcc:	b480      	push	{r7}
   80fce:	b085      	sub	sp, #20
   80fd0:	af00      	add	r7, sp, #0
   80fd2:	6078      	str	r0, [r7, #4]
   80fd4:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80fd6:	683b      	ldr	r3, [r7, #0]
   80fd8:	681b      	ldr	r3, [r3, #0]
   80fda:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80fdc:	683b      	ldr	r3, [r7, #0]
   80fde:	791b      	ldrb	r3, [r3, #4]
   80fe0:	2b00      	cmp	r3, #0
   80fe2:	d12e      	bne.n	81042 <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   80fe4:	7bfb      	ldrb	r3, [r7, #15]
   80fe6:	687a      	ldr	r2, [r7, #4]
   80fe8:	3310      	adds	r3, #16
   80fea:	015b      	lsls	r3, r3, #5
   80fec:	4413      	add	r3, r2
   80fee:	2200      	movs	r2, #0
   80ff0:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   80ff2:	7bfb      	ldrb	r3, [r7, #15]
   80ff4:	687a      	ldr	r2, [r7, #4]
   80ff6:	3310      	adds	r3, #16
   80ff8:	015b      	lsls	r3, r3, #5
   80ffa:	4413      	add	r3, r2
   80ffc:	2200      	movs	r2, #0
   80ffe:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81000:	7bfb      	ldrb	r3, [r7, #15]
   81002:	687a      	ldr	r2, [r7, #4]
   81004:	015b      	lsls	r3, r3, #5
   81006:	4413      	add	r3, r2
   81008:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8100c:	2200      	movs	r2, #0
   8100e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81010:	7bfb      	ldrb	r3, [r7, #15]
   81012:	687a      	ldr	r2, [r7, #4]
   81014:	015b      	lsls	r3, r3, #5
   81016:	4413      	add	r3, r2
   81018:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8101c:	2200      	movs	r2, #0
   8101e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81020:	7bfb      	ldrb	r3, [r7, #15]
   81022:	687a      	ldr	r2, [r7, #4]
   81024:	015b      	lsls	r3, r3, #5
   81026:	4413      	add	r3, r2
   81028:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8102c:	2200      	movs	r2, #0
   8102e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81030:	7bfb      	ldrb	r3, [r7, #15]
   81032:	687a      	ldr	r2, [r7, #4]
   81034:	015b      	lsls	r3, r3, #5
   81036:	4413      	add	r3, r2
   81038:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8103c:	2200      	movs	r2, #0
   8103e:	605a      	str	r2, [r3, #4]
		return;
   81040:	e04e      	b.n	810e0 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81042:	7bfb      	ldrb	r3, [r7, #15]
   81044:	7bfa      	ldrb	r2, [r7, #15]
   81046:	6879      	ldr	r1, [r7, #4]
   81048:	3210      	adds	r2, #16
   8104a:	0152      	lsls	r2, r2, #5
   8104c:	440a      	add	r2, r1
   8104e:	6812      	ldr	r2, [r2, #0]
   81050:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81054:	683a      	ldr	r2, [r7, #0]
   81056:	79d2      	ldrb	r2, [r2, #7]
   81058:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   8105a:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   8105c:	6879      	ldr	r1, [r7, #4]
   8105e:	3310      	adds	r3, #16
   81060:	015b      	lsls	r3, r3, #5
   81062:	440b      	add	r3, r1
   81064:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81066:	683b      	ldr	r3, [r7, #0]
   81068:	795b      	ldrb	r3, [r3, #5]
   8106a:	2b00      	cmp	r3, #0
   8106c:	d015      	beq.n	8109a <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   8106e:	7bfb      	ldrb	r3, [r7, #15]
   81070:	683a      	ldr	r2, [r7, #0]
   81072:	68d2      	ldr	r2, [r2, #12]
   81074:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81078:	6879      	ldr	r1, [r7, #4]
   8107a:	3310      	adds	r3, #16
   8107c:	015b      	lsls	r3, r3, #5
   8107e:	440b      	add	r3, r1
   81080:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81082:	7bfb      	ldrb	r3, [r7, #15]
   81084:	683a      	ldr	r2, [r7, #0]
   81086:	6912      	ldr	r2, [r2, #16]
   81088:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8108c:	6879      	ldr	r1, [r7, #4]
   8108e:	015b      	lsls	r3, r3, #5
   81090:	440b      	add	r3, r1
   81092:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81096:	601a      	str	r2, [r3, #0]
   81098:	e010      	b.n	810bc <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   8109a:	7bfb      	ldrb	r3, [r7, #15]
   8109c:	683a      	ldr	r2, [r7, #0]
   8109e:	68d2      	ldr	r2, [r2, #12]
   810a0:	6879      	ldr	r1, [r7, #4]
   810a2:	3310      	adds	r3, #16
   810a4:	015b      	lsls	r3, r3, #5
   810a6:	440b      	add	r3, r1
   810a8:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   810aa:	7bfb      	ldrb	r3, [r7, #15]
   810ac:	683a      	ldr	r2, [r7, #0]
   810ae:	6912      	ldr	r2, [r2, #16]
   810b0:	6879      	ldr	r1, [r7, #4]
   810b2:	015b      	lsls	r3, r3, #5
   810b4:	440b      	add	r3, r1
   810b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   810ba:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   810bc:	7bfb      	ldrb	r3, [r7, #15]
   810be:	7bfa      	ldrb	r2, [r7, #15]
   810c0:	6879      	ldr	r1, [r7, #4]
   810c2:	3210      	adds	r2, #16
   810c4:	0152      	lsls	r2, r2, #5
   810c6:	440a      	add	r2, r1
   810c8:	6812      	ldr	r2, [r2, #0]
   810ca:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   810ce:	683a      	ldr	r2, [r7, #0]
   810d0:	7912      	ldrb	r2, [r2, #4]
   810d2:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   810d4:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   810d6:	6879      	ldr	r1, [r7, #4]
   810d8:	3310      	adds	r3, #16
   810da:	015b      	lsls	r3, r3, #5
   810dc:	440b      	add	r3, r1
   810de:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   810e0:	3714      	adds	r7, #20
   810e2:	46bd      	mov	sp, r7
   810e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   810e8:	4770      	bx	lr
   810ea:	bf00      	nop

000810ec <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   810ec:	b580      	push	{r7, lr}
   810ee:	b086      	sub	sp, #24
   810f0:	af00      	add	r7, sp, #0
   810f2:	6078      	str	r0, [r7, #4]
   810f4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   810f6:	2300      	movs	r3, #0
   810f8:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   810fa:	683b      	ldr	r3, [r7, #0]
   810fc:	681b      	ldr	r3, [r3, #0]
   810fe:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81100:	683b      	ldr	r3, [r7, #0]
   81102:	689b      	ldr	r3, [r3, #8]
   81104:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81106:	68fb      	ldr	r3, [r7, #12]
   81108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8110c:	2b00      	cmp	r3, #0
   8110e:	d006      	beq.n	8111e <can_mailbox_read+0x32>
   81110:	68fb      	ldr	r3, [r7, #12]
   81112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81116:	2b00      	cmp	r3, #0
   81118:	d001      	beq.n	8111e <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   8111a:	2302      	movs	r3, #2
   8111c:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   8111e:	7cfb      	ldrb	r3, [r7, #19]
   81120:	687a      	ldr	r2, [r7, #4]
   81122:	015b      	lsls	r3, r3, #5
   81124:	4413      	add	r3, r2
   81126:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8112a:	685b      	ldr	r3, [r3, #4]
   8112c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81130:	683b      	ldr	r3, [r7, #0]
   81132:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81134:	68fb      	ldr	r3, [r7, #12]
   81136:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8113a:	0c1b      	lsrs	r3, r3, #16
   8113c:	b2da      	uxtb	r2, r3
   8113e:	683b      	ldr	r3, [r7, #0]
   81140:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81142:	7cfb      	ldrb	r3, [r7, #19]
   81144:	687a      	ldr	r2, [r7, #4]
   81146:	015b      	lsls	r3, r3, #5
   81148:	4413      	add	r3, r2
   8114a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8114e:	685a      	ldr	r2, [r3, #4]
   81150:	683b      	ldr	r3, [r7, #0]
   81152:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81154:	683b      	ldr	r3, [r7, #0]
   81156:	799b      	ldrb	r3, [r3, #6]
   81158:	2b04      	cmp	r3, #4
   8115a:	d908      	bls.n	8116e <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   8115c:	7cfb      	ldrb	r3, [r7, #19]
   8115e:	687a      	ldr	r2, [r7, #4]
   81160:	015b      	lsls	r3, r3, #5
   81162:	4413      	add	r3, r2
   81164:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81168:	681a      	ldr	r2, [r3, #0]
   8116a:	683b      	ldr	r3, [r7, #0]
   8116c:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   8116e:	7cfb      	ldrb	r3, [r7, #19]
   81170:	687a      	ldr	r2, [r7, #4]
   81172:	015b      	lsls	r3, r3, #5
   81174:	4413      	add	r3, r2
   81176:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8117a:	681a      	ldr	r2, [r3, #0]
   8117c:	683b      	ldr	r3, [r7, #0]
   8117e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81180:	683b      	ldr	r3, [r7, #0]
   81182:	689b      	ldr	r3, [r3, #8]
   81184:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81186:	68fb      	ldr	r3, [r7, #12]
   81188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8118c:	2b00      	cmp	r3, #0
   8118e:	d003      	beq.n	81198 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81190:	697b      	ldr	r3, [r7, #20]
   81192:	f043 0304 	orr.w	r3, r3, #4
   81196:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81198:	6878      	ldr	r0, [r7, #4]
   8119a:	6839      	ldr	r1, [r7, #0]
   8119c:	4b03      	ldr	r3, [pc, #12]	; (811ac <can_mailbox_read+0xc0>)
   8119e:	4798      	blx	r3

	return ul_retval;
   811a0:	697b      	ldr	r3, [r7, #20]
}
   811a2:	4618      	mov	r0, r3
   811a4:	3718      	adds	r7, #24
   811a6:	46bd      	mov	sp, r7
   811a8:	bd80      	pop	{r7, pc}
   811aa:	bf00      	nop
   811ac:	00080f95 	.word	0x00080f95

000811b0 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   811b0:	b580      	push	{r7, lr}
   811b2:	b084      	sub	sp, #16
   811b4:	af00      	add	r7, sp, #0
   811b6:	6078      	str	r0, [r7, #4]
   811b8:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   811ba:	683b      	ldr	r3, [r7, #0]
   811bc:	681b      	ldr	r3, [r3, #0]
   811be:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   811c0:	7bfb      	ldrb	r3, [r7, #15]
   811c2:	6878      	ldr	r0, [r7, #4]
   811c4:	4619      	mov	r1, r3
   811c6:	4b27      	ldr	r3, [pc, #156]	; (81264 <can_mailbox_write+0xb4>)
   811c8:	4798      	blx	r3
   811ca:	4602      	mov	r2, r0
   811cc:	683b      	ldr	r3, [r7, #0]
   811ce:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   811d0:	683b      	ldr	r3, [r7, #0]
   811d2:	689b      	ldr	r3, [r3, #8]
   811d4:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   811d6:	68bb      	ldr	r3, [r7, #8]
   811d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   811dc:	2b00      	cmp	r3, #0
   811de:	d101      	bne.n	811e4 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   811e0:	2301      	movs	r3, #1
   811e2:	e03b      	b.n	8125c <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   811e4:	683b      	ldr	r3, [r7, #0]
   811e6:	795b      	ldrb	r3, [r3, #5]
   811e8:	2b00      	cmp	r3, #0
   811ea:	d00b      	beq.n	81204 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   811ec:	7bfb      	ldrb	r3, [r7, #15]
   811ee:	683a      	ldr	r2, [r7, #0]
   811f0:	6912      	ldr	r2, [r2, #16]
   811f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   811f6:	6879      	ldr	r1, [r7, #4]
   811f8:	015b      	lsls	r3, r3, #5
   811fa:	440b      	add	r3, r1
   811fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81200:	601a      	str	r2, [r3, #0]
   81202:	e008      	b.n	81216 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81204:	7bfb      	ldrb	r3, [r7, #15]
   81206:	683a      	ldr	r2, [r7, #0]
   81208:	6912      	ldr	r2, [r2, #16]
   8120a:	6879      	ldr	r1, [r7, #4]
   8120c:	015b      	lsls	r3, r3, #5
   8120e:	440b      	add	r3, r1
   81210:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81214:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81216:	7bfb      	ldrb	r3, [r7, #15]
   81218:	683a      	ldr	r2, [r7, #0]
   8121a:	6992      	ldr	r2, [r2, #24]
   8121c:	6879      	ldr	r1, [r7, #4]
   8121e:	015b      	lsls	r3, r3, #5
   81220:	440b      	add	r3, r1
   81222:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81226:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81228:	683b      	ldr	r3, [r7, #0]
   8122a:	799b      	ldrb	r3, [r3, #6]
   8122c:	2b04      	cmp	r3, #4
   8122e:	d908      	bls.n	81242 <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81230:	7bfb      	ldrb	r3, [r7, #15]
   81232:	683a      	ldr	r2, [r7, #0]
   81234:	69d2      	ldr	r2, [r2, #28]
   81236:	6879      	ldr	r1, [r7, #4]
   81238:	015b      	lsls	r3, r3, #5
   8123a:	440b      	add	r3, r1
   8123c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81240:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   81242:	7bfb      	ldrb	r3, [r7, #15]
   81244:	683a      	ldr	r2, [r7, #0]
   81246:	7992      	ldrb	r2, [r2, #6]
   81248:	0412      	lsls	r2, r2, #16
   8124a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8124e:	6879      	ldr	r1, [r7, #4]
   81250:	015b      	lsls	r3, r3, #5
   81252:	440b      	add	r3, r1
   81254:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81258:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   8125a:	2300      	movs	r3, #0
}
   8125c:	4618      	mov	r0, r3
   8125e:	3710      	adds	r7, #16
   81260:	46bd      	mov	sp, r7
   81262:	bd80      	pop	{r7, pc}
   81264:	00080f6d 	.word	0x00080f6d

00081268 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81268:	b580      	push	{r7, lr}
   8126a:	b08c      	sub	sp, #48	; 0x30
   8126c:	af00      	add	r7, sp, #0
   8126e:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81270:	2300      	movs	r3, #0
   81272:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81274:	2300      	movs	r3, #0
   81276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8127a:	e00d      	b.n	81298 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   8127c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81280:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81282:	f107 030c 	add.w	r3, r7, #12
   81286:	6878      	ldr	r0, [r7, #4]
   81288:	4619      	mov	r1, r3
   8128a:	4b07      	ldr	r3, [pc, #28]	; (812a8 <can_reset_all_mailbox+0x40>)
   8128c:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8128e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81292:	3301      	adds	r3, #1
   81294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81298:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8129c:	2b07      	cmp	r3, #7
   8129e:	d9ed      	bls.n	8127c <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   812a0:	3730      	adds	r7, #48	; 0x30
   812a2:	46bd      	mov	sp, r7
   812a4:	bd80      	pop	{r7, pc}
   812a6:	bf00      	nop
   812a8:	00080fcd 	.word	0x00080fcd

000812ac <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   812ac:	b480      	push	{r7}
   812ae:	b085      	sub	sp, #20
   812b0:	af00      	add	r7, sp, #0
   812b2:	60f8      	str	r0, [r7, #12]
   812b4:	60b9      	str	r1, [r7, #8]
   812b6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   812b8:	687b      	ldr	r3, [r7, #4]
   812ba:	2b00      	cmp	r3, #0
   812bc:	d003      	beq.n	812c6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   812be:	68fb      	ldr	r3, [r7, #12]
   812c0:	68ba      	ldr	r2, [r7, #8]
   812c2:	665a      	str	r2, [r3, #100]	; 0x64
   812c4:	e002      	b.n	812cc <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   812c6:	68fb      	ldr	r3, [r7, #12]
   812c8:	68ba      	ldr	r2, [r7, #8]
   812ca:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   812cc:	3714      	adds	r7, #20
   812ce:	46bd      	mov	sp, r7
   812d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   812d4:	4770      	bx	lr
   812d6:	bf00      	nop

000812d8 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   812d8:	b480      	push	{r7}
   812da:	b087      	sub	sp, #28
   812dc:	af00      	add	r7, sp, #0
   812de:	60f8      	str	r0, [r7, #12]
   812e0:	60b9      	str	r1, [r7, #8]
   812e2:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   812e4:	68fb      	ldr	r3, [r7, #12]
   812e6:	687a      	ldr	r2, [r7, #4]
   812e8:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   812ea:	68bb      	ldr	r3, [r7, #8]
   812ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   812f0:	d01f      	beq.n	81332 <pio_set_peripheral+0x5a>
   812f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   812f6:	d805      	bhi.n	81304 <pio_set_peripheral+0x2c>
   812f8:	2b00      	cmp	r3, #0
   812fa:	d027      	beq.n	8134c <pio_set_peripheral+0x74>
   812fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81300:	d00a      	beq.n	81318 <pio_set_peripheral+0x40>
   81302:	e01f      	b.n	81344 <pio_set_peripheral+0x6c>
   81304:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81308:	d020      	beq.n	8134c <pio_set_peripheral+0x74>
   8130a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8130e:	d01d      	beq.n	8134c <pio_set_peripheral+0x74>
   81310:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81314:	d01a      	beq.n	8134c <pio_set_peripheral+0x74>
   81316:	e015      	b.n	81344 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81318:	68fb      	ldr	r3, [r7, #12]
   8131a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8131c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8131e:	68fb      	ldr	r3, [r7, #12]
   81320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81322:	687b      	ldr	r3, [r7, #4]
   81324:	43d9      	mvns	r1, r3
   81326:	697b      	ldr	r3, [r7, #20]
   81328:	400b      	ands	r3, r1
   8132a:	401a      	ands	r2, r3
   8132c:	68fb      	ldr	r3, [r7, #12]
   8132e:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81330:	e008      	b.n	81344 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81332:	68fb      	ldr	r3, [r7, #12]
   81334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81336:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81338:	687a      	ldr	r2, [r7, #4]
   8133a:	697b      	ldr	r3, [r7, #20]
   8133c:	431a      	orrs	r2, r3
   8133e:	68fb      	ldr	r3, [r7, #12]
   81340:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81342:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81344:	68fb      	ldr	r3, [r7, #12]
   81346:	687a      	ldr	r2, [r7, #4]
   81348:	605a      	str	r2, [r3, #4]
   8134a:	e000      	b.n	8134e <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   8134c:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   8134e:	371c      	adds	r7, #28
   81350:	46bd      	mov	sp, r7
   81352:	f85d 7b04 	ldr.w	r7, [sp], #4
   81356:	4770      	bx	lr

00081358 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81358:	b580      	push	{r7, lr}
   8135a:	b084      	sub	sp, #16
   8135c:	af00      	add	r7, sp, #0
   8135e:	60f8      	str	r0, [r7, #12]
   81360:	60b9      	str	r1, [r7, #8]
   81362:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81364:	68f8      	ldr	r0, [r7, #12]
   81366:	68b9      	ldr	r1, [r7, #8]
   81368:	4b18      	ldr	r3, [pc, #96]	; (813cc <pio_set_input+0x74>)
   8136a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   8136c:	687b      	ldr	r3, [r7, #4]
   8136e:	f003 0301 	and.w	r3, r3, #1
   81372:	68f8      	ldr	r0, [r7, #12]
   81374:	68b9      	ldr	r1, [r7, #8]
   81376:	461a      	mov	r2, r3
   81378:	4b15      	ldr	r3, [pc, #84]	; (813d0 <pio_set_input+0x78>)
   8137a:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8137c:	687b      	ldr	r3, [r7, #4]
   8137e:	f003 030a 	and.w	r3, r3, #10
   81382:	2b00      	cmp	r3, #0
   81384:	d003      	beq.n	8138e <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   81386:	68fb      	ldr	r3, [r7, #12]
   81388:	68ba      	ldr	r2, [r7, #8]
   8138a:	621a      	str	r2, [r3, #32]
   8138c:	e002      	b.n	81394 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8138e:	68fb      	ldr	r3, [r7, #12]
   81390:	68ba      	ldr	r2, [r7, #8]
   81392:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81394:	687b      	ldr	r3, [r7, #4]
   81396:	f003 0302 	and.w	r3, r3, #2
   8139a:	2b00      	cmp	r3, #0
   8139c:	d004      	beq.n	813a8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   8139e:	68fb      	ldr	r3, [r7, #12]
   813a0:	68ba      	ldr	r2, [r7, #8]
   813a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   813a6:	e008      	b.n	813ba <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   813a8:	687b      	ldr	r3, [r7, #4]
   813aa:	f003 0308 	and.w	r3, r3, #8
   813ae:	2b00      	cmp	r3, #0
   813b0:	d003      	beq.n	813ba <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   813b2:	68fb      	ldr	r3, [r7, #12]
   813b4:	68ba      	ldr	r2, [r7, #8]
   813b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   813ba:	68fb      	ldr	r3, [r7, #12]
   813bc:	68ba      	ldr	r2, [r7, #8]
   813be:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   813c0:	68fb      	ldr	r3, [r7, #12]
   813c2:	68ba      	ldr	r2, [r7, #8]
   813c4:	601a      	str	r2, [r3, #0]
}
   813c6:	3710      	adds	r7, #16
   813c8:	46bd      	mov	sp, r7
   813ca:	bd80      	pop	{r7, pc}
   813cc:	00081439 	.word	0x00081439
   813d0:	000812ad 	.word	0x000812ad

000813d4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   813d4:	b580      	push	{r7, lr}
   813d6:	b084      	sub	sp, #16
   813d8:	af00      	add	r7, sp, #0
   813da:	60f8      	str	r0, [r7, #12]
   813dc:	60b9      	str	r1, [r7, #8]
   813de:	607a      	str	r2, [r7, #4]
   813e0:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   813e2:	68f8      	ldr	r0, [r7, #12]
   813e4:	68b9      	ldr	r1, [r7, #8]
   813e6:	4b12      	ldr	r3, [pc, #72]	; (81430 <pio_set_output+0x5c>)
   813e8:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   813ea:	68f8      	ldr	r0, [r7, #12]
   813ec:	68b9      	ldr	r1, [r7, #8]
   813ee:	69ba      	ldr	r2, [r7, #24]
   813f0:	4b10      	ldr	r3, [pc, #64]	; (81434 <pio_set_output+0x60>)
   813f2:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   813f4:	683b      	ldr	r3, [r7, #0]
   813f6:	2b00      	cmp	r3, #0
   813f8:	d003      	beq.n	81402 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   813fa:	68fb      	ldr	r3, [r7, #12]
   813fc:	68ba      	ldr	r2, [r7, #8]
   813fe:	651a      	str	r2, [r3, #80]	; 0x50
   81400:	e002      	b.n	81408 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81402:	68fb      	ldr	r3, [r7, #12]
   81404:	68ba      	ldr	r2, [r7, #8]
   81406:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81408:	687b      	ldr	r3, [r7, #4]
   8140a:	2b00      	cmp	r3, #0
   8140c:	d003      	beq.n	81416 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8140e:	68fb      	ldr	r3, [r7, #12]
   81410:	68ba      	ldr	r2, [r7, #8]
   81412:	631a      	str	r2, [r3, #48]	; 0x30
   81414:	e002      	b.n	8141c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81416:	68fb      	ldr	r3, [r7, #12]
   81418:	68ba      	ldr	r2, [r7, #8]
   8141a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8141c:	68fb      	ldr	r3, [r7, #12]
   8141e:	68ba      	ldr	r2, [r7, #8]
   81420:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81422:	68fb      	ldr	r3, [r7, #12]
   81424:	68ba      	ldr	r2, [r7, #8]
   81426:	601a      	str	r2, [r3, #0]
}
   81428:	3710      	adds	r7, #16
   8142a:	46bd      	mov	sp, r7
   8142c:	bd80      	pop	{r7, pc}
   8142e:	bf00      	nop
   81430:	00081439 	.word	0x00081439
   81434:	000812ad 	.word	0x000812ad

00081438 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81438:	b480      	push	{r7}
   8143a:	b083      	sub	sp, #12
   8143c:	af00      	add	r7, sp, #0
   8143e:	6078      	str	r0, [r7, #4]
   81440:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81442:	687b      	ldr	r3, [r7, #4]
   81444:	683a      	ldr	r2, [r7, #0]
   81446:	645a      	str	r2, [r3, #68]	; 0x44
}
   81448:	370c      	adds	r7, #12
   8144a:	46bd      	mov	sp, r7
   8144c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81450:	4770      	bx	lr
   81452:	bf00      	nop

00081454 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81454:	b480      	push	{r7}
   81456:	b083      	sub	sp, #12
   81458:	af00      	add	r7, sp, #0
   8145a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   8145c:	687b      	ldr	r3, [r7, #4]
   8145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81460:	4618      	mov	r0, r3
   81462:	370c      	adds	r7, #12
   81464:	46bd      	mov	sp, r7
   81466:	f85d 7b04 	ldr.w	r7, [sp], #4
   8146a:	4770      	bx	lr

0008146c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   8146c:	b480      	push	{r7}
   8146e:	b083      	sub	sp, #12
   81470:	af00      	add	r7, sp, #0
   81472:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81474:	687b      	ldr	r3, [r7, #4]
   81476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81478:	4618      	mov	r0, r3
   8147a:	370c      	adds	r7, #12
   8147c:	46bd      	mov	sp, r7
   8147e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81482:	4770      	bx	lr

00081484 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81484:	b480      	push	{r7}
   81486:	b085      	sub	sp, #20
   81488:	af00      	add	r7, sp, #0
   8148a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8148c:	687b      	ldr	r3, [r7, #4]
   8148e:	095b      	lsrs	r3, r3, #5
   81490:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81494:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81498:	025b      	lsls	r3, r3, #9
   8149a:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8149c:	687b      	ldr	r3, [r7, #4]
   8149e:	f003 031f 	and.w	r3, r3, #31
   814a2:	2201      	movs	r2, #1
   814a4:	fa02 f303 	lsl.w	r3, r2, r3
   814a8:	461a      	mov	r2, r3
   814aa:	68fb      	ldr	r3, [r7, #12]
   814ac:	631a      	str	r2, [r3, #48]	; 0x30
}
   814ae:	3714      	adds	r7, #20
   814b0:	46bd      	mov	sp, r7
   814b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   814b6:	4770      	bx	lr

000814b8 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   814b8:	b480      	push	{r7}
   814ba:	b085      	sub	sp, #20
   814bc:	af00      	add	r7, sp, #0
   814be:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   814c0:	687b      	ldr	r3, [r7, #4]
   814c2:	095b      	lsrs	r3, r3, #5
   814c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   814c8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   814cc:	025b      	lsls	r3, r3, #9
   814ce:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   814d0:	687b      	ldr	r3, [r7, #4]
   814d2:	f003 031f 	and.w	r3, r3, #31
   814d6:	2201      	movs	r2, #1
   814d8:	fa02 f303 	lsl.w	r3, r2, r3
   814dc:	461a      	mov	r2, r3
   814de:	68fb      	ldr	r3, [r7, #12]
   814e0:	635a      	str	r2, [r3, #52]	; 0x34
}
   814e2:	3714      	adds	r7, #20
   814e4:	46bd      	mov	sp, r7
   814e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   814ea:	4770      	bx	lr

000814ec <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   814ec:	b480      	push	{r7}
   814ee:	b085      	sub	sp, #20
   814f0:	af00      	add	r7, sp, #0
   814f2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   814f4:	687b      	ldr	r3, [r7, #4]
   814f6:	095b      	lsrs	r3, r3, #5
   814f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   814fc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81500:	025b      	lsls	r3, r3, #9
   81502:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81504:	68fb      	ldr	r3, [r7, #12]
   81506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81508:	687b      	ldr	r3, [r7, #4]
   8150a:	f003 031f 	and.w	r3, r3, #31
   8150e:	2101      	movs	r1, #1
   81510:	fa01 f303 	lsl.w	r3, r1, r3
   81514:	4013      	ands	r3, r2
   81516:	2b00      	cmp	r3, #0
   81518:	d009      	beq.n	8152e <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8151a:	687b      	ldr	r3, [r7, #4]
   8151c:	f003 031f 	and.w	r3, r3, #31
   81520:	2201      	movs	r2, #1
   81522:	fa02 f303 	lsl.w	r3, r2, r3
   81526:	461a      	mov	r2, r3
   81528:	68fb      	ldr	r3, [r7, #12]
   8152a:	635a      	str	r2, [r3, #52]	; 0x34
   8152c:	e008      	b.n	81540 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8152e:	687b      	ldr	r3, [r7, #4]
   81530:	f003 031f 	and.w	r3, r3, #31
   81534:	2201      	movs	r2, #1
   81536:	fa02 f303 	lsl.w	r3, r2, r3
   8153a:	461a      	mov	r2, r3
   8153c:	68fb      	ldr	r3, [r7, #12]
   8153e:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81540:	3714      	adds	r7, #20
   81542:	46bd      	mov	sp, r7
   81544:	f85d 7b04 	ldr.w	r7, [sp], #4
   81548:	4770      	bx	lr
   8154a:	bf00      	nop

0008154c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8154c:	b590      	push	{r4, r7, lr}
   8154e:	b087      	sub	sp, #28
   81550:	af02      	add	r7, sp, #8
   81552:	6078      	str	r0, [r7, #4]
   81554:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81556:	687b      	ldr	r3, [r7, #4]
   81558:	095b      	lsrs	r3, r3, #5
   8155a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8155e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81562:	025b      	lsls	r3, r3, #9
   81564:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81566:	683b      	ldr	r3, [r7, #0]
   81568:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8156c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81570:	d048      	beq.n	81604 <pio_configure_pin+0xb8>
   81572:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81576:	d806      	bhi.n	81586 <pio_configure_pin+0x3a>
   81578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8157c:	d00a      	beq.n	81594 <pio_configure_pin+0x48>
   8157e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81582:	d023      	beq.n	815cc <pio_configure_pin+0x80>
   81584:	e070      	b.n	81668 <pio_configure_pin+0x11c>
   81586:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8158a:	d047      	beq.n	8161c <pio_configure_pin+0xd0>
   8158c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81590:	d044      	beq.n	8161c <pio_configure_pin+0xd0>
   81592:	e069      	b.n	81668 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81594:	687b      	ldr	r3, [r7, #4]
   81596:	f003 031f 	and.w	r3, r3, #31
   8159a:	2201      	movs	r2, #1
   8159c:	fa02 f303 	lsl.w	r3, r2, r3
   815a0:	68f8      	ldr	r0, [r7, #12]
   815a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815a6:	461a      	mov	r2, r3
   815a8:	4b33      	ldr	r3, [pc, #204]	; (81678 <pio_configure_pin+0x12c>)
   815aa:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   815ac:	687b      	ldr	r3, [r7, #4]
   815ae:	f003 031f 	and.w	r3, r3, #31
   815b2:	2201      	movs	r2, #1
   815b4:	fa02 f303 	lsl.w	r3, r2, r3
   815b8:	461a      	mov	r2, r3
   815ba:	683b      	ldr	r3, [r7, #0]
   815bc:	f003 0301 	and.w	r3, r3, #1
   815c0:	68f8      	ldr	r0, [r7, #12]
   815c2:	4611      	mov	r1, r2
   815c4:	461a      	mov	r2, r3
   815c6:	4b2d      	ldr	r3, [pc, #180]	; (8167c <pio_configure_pin+0x130>)
   815c8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   815ca:	e04f      	b.n	8166c <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   815cc:	687b      	ldr	r3, [r7, #4]
   815ce:	f003 031f 	and.w	r3, r3, #31
   815d2:	2201      	movs	r2, #1
   815d4:	fa02 f303 	lsl.w	r3, r2, r3
   815d8:	68f8      	ldr	r0, [r7, #12]
   815da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   815de:	461a      	mov	r2, r3
   815e0:	4b25      	ldr	r3, [pc, #148]	; (81678 <pio_configure_pin+0x12c>)
   815e2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   815e4:	687b      	ldr	r3, [r7, #4]
   815e6:	f003 031f 	and.w	r3, r3, #31
   815ea:	2201      	movs	r2, #1
   815ec:	fa02 f303 	lsl.w	r3, r2, r3
   815f0:	461a      	mov	r2, r3
   815f2:	683b      	ldr	r3, [r7, #0]
   815f4:	f003 0301 	and.w	r3, r3, #1
   815f8:	68f8      	ldr	r0, [r7, #12]
   815fa:	4611      	mov	r1, r2
   815fc:	461a      	mov	r2, r3
   815fe:	4b1f      	ldr	r3, [pc, #124]	; (8167c <pio_configure_pin+0x130>)
   81600:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81602:	e033      	b.n	8166c <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81604:	687b      	ldr	r3, [r7, #4]
   81606:	f003 031f 	and.w	r3, r3, #31
   8160a:	2201      	movs	r2, #1
   8160c:	fa02 f303 	lsl.w	r3, r2, r3
   81610:	68f8      	ldr	r0, [r7, #12]
   81612:	4619      	mov	r1, r3
   81614:	683a      	ldr	r2, [r7, #0]
   81616:	4b1a      	ldr	r3, [pc, #104]	; (81680 <pio_configure_pin+0x134>)
   81618:	4798      	blx	r3
		break;
   8161a:	e027      	b.n	8166c <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8161c:	687b      	ldr	r3, [r7, #4]
   8161e:	f003 031f 	and.w	r3, r3, #31
   81622:	2201      	movs	r2, #1
   81624:	fa02 f303 	lsl.w	r3, r2, r3
   81628:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8162a:	683b      	ldr	r3, [r7, #0]
   8162c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81630:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81634:	bf14      	ite	ne
   81636:	2300      	movne	r3, #0
   81638:	2301      	moveq	r3, #1
   8163a:	b2db      	uxtb	r3, r3
   8163c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8163e:	683b      	ldr	r3, [r7, #0]
   81640:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81644:	2b00      	cmp	r3, #0
   81646:	bf0c      	ite	eq
   81648:	2300      	moveq	r3, #0
   8164a:	2301      	movne	r3, #1
   8164c:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8164e:	6838      	ldr	r0, [r7, #0]
   81650:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81654:	2800      	cmp	r0, #0
   81656:	bf0c      	ite	eq
   81658:	2000      	moveq	r0, #0
   8165a:	2001      	movne	r0, #1
   8165c:	b2c0      	uxtb	r0, r0
   8165e:	9000      	str	r0, [sp, #0]
   81660:	68f8      	ldr	r0, [r7, #12]
   81662:	4c08      	ldr	r4, [pc, #32]	; (81684 <pio_configure_pin+0x138>)
   81664:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81666:	e001      	b.n	8166c <pio_configure_pin+0x120>

	default:
		return 0;
   81668:	2300      	movs	r3, #0
   8166a:	e000      	b.n	8166e <pio_configure_pin+0x122>
	}

	return 1;
   8166c:	2301      	movs	r3, #1
}
   8166e:	4618      	mov	r0, r3
   81670:	3714      	adds	r7, #20
   81672:	46bd      	mov	sp, r7
   81674:	bd90      	pop	{r4, r7, pc}
   81676:	bf00      	nop
   81678:	000812d9 	.word	0x000812d9
   8167c:	000812ad 	.word	0x000812ad
   81680:	00081359 	.word	0x00081359
   81684:	000813d5 	.word	0x000813d5

00081688 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   81688:	b590      	push	{r4, r7, lr}
   8168a:	b087      	sub	sp, #28
   8168c:	af02      	add	r7, sp, #8
   8168e:	60f8      	str	r0, [r7, #12]
   81690:	60b9      	str	r1, [r7, #8]
   81692:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81694:	687b      	ldr	r3, [r7, #4]
   81696:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8169a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8169e:	d02e      	beq.n	816fe <pio_configure_pin_group+0x76>
   816a0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   816a4:	d806      	bhi.n	816b4 <pio_configure_pin_group+0x2c>
   816a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   816aa:	d00a      	beq.n	816c2 <pio_configure_pin_group+0x3a>
   816ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   816b0:	d016      	beq.n	816e0 <pio_configure_pin_group+0x58>
   816b2:	e04a      	b.n	8174a <pio_configure_pin_group+0xc2>
   816b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   816b8:	d027      	beq.n	8170a <pio_configure_pin_group+0x82>
   816ba:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   816be:	d024      	beq.n	8170a <pio_configure_pin_group+0x82>
   816c0:	e043      	b.n	8174a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   816c2:	68f8      	ldr	r0, [r7, #12]
   816c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816c8:	68ba      	ldr	r2, [r7, #8]
   816ca:	4b23      	ldr	r3, [pc, #140]	; (81758 <pio_configure_pin_group+0xd0>)
   816cc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   816ce:	687b      	ldr	r3, [r7, #4]
   816d0:	f003 0301 	and.w	r3, r3, #1
   816d4:	68f8      	ldr	r0, [r7, #12]
   816d6:	68b9      	ldr	r1, [r7, #8]
   816d8:	461a      	mov	r2, r3
   816da:	4b20      	ldr	r3, [pc, #128]	; (8175c <pio_configure_pin_group+0xd4>)
   816dc:	4798      	blx	r3
		break;
   816de:	e036      	b.n	8174e <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   816e0:	68f8      	ldr	r0, [r7, #12]
   816e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816e6:	68ba      	ldr	r2, [r7, #8]
   816e8:	4b1b      	ldr	r3, [pc, #108]	; (81758 <pio_configure_pin_group+0xd0>)
   816ea:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   816ec:	687b      	ldr	r3, [r7, #4]
   816ee:	f003 0301 	and.w	r3, r3, #1
   816f2:	68f8      	ldr	r0, [r7, #12]
   816f4:	68b9      	ldr	r1, [r7, #8]
   816f6:	461a      	mov	r2, r3
   816f8:	4b18      	ldr	r3, [pc, #96]	; (8175c <pio_configure_pin_group+0xd4>)
   816fa:	4798      	blx	r3
		break;
   816fc:	e027      	b.n	8174e <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   816fe:	68f8      	ldr	r0, [r7, #12]
   81700:	68b9      	ldr	r1, [r7, #8]
   81702:	687a      	ldr	r2, [r7, #4]
   81704:	4b16      	ldr	r3, [pc, #88]	; (81760 <pio_configure_pin_group+0xd8>)
   81706:	4798      	blx	r3
		break;
   81708:	e021      	b.n	8174e <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8170a:	687b      	ldr	r3, [r7, #4]
   8170c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81710:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81714:	bf14      	ite	ne
   81716:	2300      	movne	r3, #0
   81718:	2301      	moveq	r3, #1
   8171a:	b2db      	uxtb	r3, r3
   8171c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8171e:	687b      	ldr	r3, [r7, #4]
   81720:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81724:	2b00      	cmp	r3, #0
   81726:	bf0c      	ite	eq
   81728:	2300      	moveq	r3, #0
   8172a:	2301      	movne	r3, #1
   8172c:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8172e:	6879      	ldr	r1, [r7, #4]
   81730:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81734:	2900      	cmp	r1, #0
   81736:	bf0c      	ite	eq
   81738:	2100      	moveq	r1, #0
   8173a:	2101      	movne	r1, #1
   8173c:	b2c9      	uxtb	r1, r1
   8173e:	9100      	str	r1, [sp, #0]
   81740:	68f8      	ldr	r0, [r7, #12]
   81742:	68b9      	ldr	r1, [r7, #8]
   81744:	4c07      	ldr	r4, [pc, #28]	; (81764 <pio_configure_pin_group+0xdc>)
   81746:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81748:	e001      	b.n	8174e <pio_configure_pin_group+0xc6>

	default:
		return 0;
   8174a:	2300      	movs	r3, #0
   8174c:	e000      	b.n	81750 <pio_configure_pin_group+0xc8>
	}

	return 1;
   8174e:	2301      	movs	r3, #1
}
   81750:	4618      	mov	r0, r3
   81752:	3714      	adds	r7, #20
   81754:	46bd      	mov	sp, r7
   81756:	bd90      	pop	{r4, r7, pc}
   81758:	000812d9 	.word	0x000812d9
   8175c:	000812ad 	.word	0x000812ad
   81760:	00081359 	.word	0x00081359
   81764:	000813d5 	.word	0x000813d5

00081768 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81768:	b580      	push	{r7, lr}
   8176a:	b084      	sub	sp, #16
   8176c:	af00      	add	r7, sp, #0
   8176e:	6078      	str	r0, [r7, #4]
   81770:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81772:	6878      	ldr	r0, [r7, #4]
   81774:	4b22      	ldr	r3, [pc, #136]	; (81800 <pio_handler_process+0x98>)
   81776:	4798      	blx	r3
   81778:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8177a:	6878      	ldr	r0, [r7, #4]
   8177c:	4b21      	ldr	r3, [pc, #132]	; (81804 <pio_handler_process+0x9c>)
   8177e:	4798      	blx	r3
   81780:	4603      	mov	r3, r0
   81782:	68fa      	ldr	r2, [r7, #12]
   81784:	4013      	ands	r3, r2
   81786:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81788:	68fb      	ldr	r3, [r7, #12]
   8178a:	2b00      	cmp	r3, #0
   8178c:	d035      	beq.n	817fa <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   8178e:	2300      	movs	r3, #0
   81790:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   81792:	e02f      	b.n	817f4 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81794:	4a1c      	ldr	r2, [pc, #112]	; (81808 <pio_handler_process+0xa0>)
   81796:	68bb      	ldr	r3, [r7, #8]
   81798:	011b      	lsls	r3, r3, #4
   8179a:	4413      	add	r3, r2
   8179c:	681a      	ldr	r2, [r3, #0]
   8179e:	683b      	ldr	r3, [r7, #0]
   817a0:	429a      	cmp	r2, r3
   817a2:	d124      	bne.n	817ee <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   817a4:	4a18      	ldr	r2, [pc, #96]	; (81808 <pio_handler_process+0xa0>)
   817a6:	68bb      	ldr	r3, [r7, #8]
   817a8:	011b      	lsls	r3, r3, #4
   817aa:	4413      	add	r3, r2
   817ac:	685a      	ldr	r2, [r3, #4]
   817ae:	68fb      	ldr	r3, [r7, #12]
   817b0:	4013      	ands	r3, r2
   817b2:	2b00      	cmp	r3, #0
   817b4:	d01b      	beq.n	817ee <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   817b6:	4a14      	ldr	r2, [pc, #80]	; (81808 <pio_handler_process+0xa0>)
   817b8:	68bb      	ldr	r3, [r7, #8]
   817ba:	011b      	lsls	r3, r3, #4
   817bc:	4413      	add	r3, r2
   817be:	3308      	adds	r3, #8
   817c0:	685b      	ldr	r3, [r3, #4]
   817c2:	4911      	ldr	r1, [pc, #68]	; (81808 <pio_handler_process+0xa0>)
   817c4:	68ba      	ldr	r2, [r7, #8]
   817c6:	0112      	lsls	r2, r2, #4
   817c8:	440a      	add	r2, r1
   817ca:	6811      	ldr	r1, [r2, #0]
   817cc:	480e      	ldr	r0, [pc, #56]	; (81808 <pio_handler_process+0xa0>)
   817ce:	68ba      	ldr	r2, [r7, #8]
   817d0:	0112      	lsls	r2, r2, #4
   817d2:	4402      	add	r2, r0
   817d4:	6852      	ldr	r2, [r2, #4]
   817d6:	4608      	mov	r0, r1
   817d8:	4611      	mov	r1, r2
   817da:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   817dc:	4a0a      	ldr	r2, [pc, #40]	; (81808 <pio_handler_process+0xa0>)
   817de:	68bb      	ldr	r3, [r7, #8]
   817e0:	011b      	lsls	r3, r3, #4
   817e2:	4413      	add	r3, r2
   817e4:	685b      	ldr	r3, [r3, #4]
   817e6:	43db      	mvns	r3, r3
   817e8:	68fa      	ldr	r2, [r7, #12]
   817ea:	4013      	ands	r3, r2
   817ec:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   817ee:	68bb      	ldr	r3, [r7, #8]
   817f0:	3301      	adds	r3, #1
   817f2:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   817f4:	68fb      	ldr	r3, [r7, #12]
   817f6:	2b00      	cmp	r3, #0
   817f8:	d1cc      	bne.n	81794 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   817fa:	3710      	adds	r7, #16
   817fc:	46bd      	mov	sp, r7
   817fe:	bd80      	pop	{r7, pc}
   81800:	00081455 	.word	0x00081455
   81804:	0008146d 	.word	0x0008146d
   81808:	2007046c 	.word	0x2007046c

0008180c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8180c:	b580      	push	{r7, lr}
   8180e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81810:	4802      	ldr	r0, [pc, #8]	; (8181c <PIOA_Handler+0x10>)
   81812:	210b      	movs	r1, #11
   81814:	4b02      	ldr	r3, [pc, #8]	; (81820 <PIOA_Handler+0x14>)
   81816:	4798      	blx	r3
}
   81818:	bd80      	pop	{r7, pc}
   8181a:	bf00      	nop
   8181c:	400e0e00 	.word	0x400e0e00
   81820:	00081769 	.word	0x00081769

00081824 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81824:	b580      	push	{r7, lr}
   81826:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81828:	4802      	ldr	r0, [pc, #8]	; (81834 <PIOB_Handler+0x10>)
   8182a:	210c      	movs	r1, #12
   8182c:	4b02      	ldr	r3, [pc, #8]	; (81838 <PIOB_Handler+0x14>)
   8182e:	4798      	blx	r3
}
   81830:	bd80      	pop	{r7, pc}
   81832:	bf00      	nop
   81834:	400e1000 	.word	0x400e1000
   81838:	00081769 	.word	0x00081769

0008183c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8183c:	b580      	push	{r7, lr}
   8183e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   81840:	4802      	ldr	r0, [pc, #8]	; (8184c <PIOC_Handler+0x10>)
   81842:	210d      	movs	r1, #13
   81844:	4b02      	ldr	r3, [pc, #8]	; (81850 <PIOC_Handler+0x14>)
   81846:	4798      	blx	r3
}
   81848:	bd80      	pop	{r7, pc}
   8184a:	bf00      	nop
   8184c:	400e1200 	.word	0x400e1200
   81850:	00081769 	.word	0x00081769

00081854 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81854:	b580      	push	{r7, lr}
   81856:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   81858:	4802      	ldr	r0, [pc, #8]	; (81864 <PIOD_Handler+0x10>)
   8185a:	210e      	movs	r1, #14
   8185c:	4b02      	ldr	r3, [pc, #8]	; (81868 <PIOD_Handler+0x14>)
   8185e:	4798      	blx	r3
}
   81860:	bd80      	pop	{r7, pc}
   81862:	bf00      	nop
   81864:	400e1400 	.word	0x400e1400
   81868:	00081769 	.word	0x00081769

0008186c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   8186c:	b480      	push	{r7}
   8186e:	b085      	sub	sp, #20
   81870:	af00      	add	r7, sp, #0
   81872:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81874:	4b1d      	ldr	r3, [pc, #116]	; (818ec <pmc_switch_mck_to_pllack+0x80>)
   81876:	4a1d      	ldr	r2, [pc, #116]	; (818ec <pmc_switch_mck_to_pllack+0x80>)
   81878:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8187a:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8187e:	687a      	ldr	r2, [r7, #4]
   81880:	430a      	orrs	r2, r1
   81882:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81884:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81888:	60fb      	str	r3, [r7, #12]
   8188a:	e007      	b.n	8189c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8188c:	68fb      	ldr	r3, [r7, #12]
   8188e:	2b00      	cmp	r3, #0
   81890:	d101      	bne.n	81896 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   81892:	2301      	movs	r3, #1
   81894:	e023      	b.n	818de <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81896:	68fb      	ldr	r3, [r7, #12]
   81898:	3b01      	subs	r3, #1
   8189a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8189c:	4b13      	ldr	r3, [pc, #76]	; (818ec <pmc_switch_mck_to_pllack+0x80>)
   8189e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   818a0:	f003 0308 	and.w	r3, r3, #8
   818a4:	2b00      	cmp	r3, #0
   818a6:	d0f1      	beq.n	8188c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   818a8:	4b10      	ldr	r3, [pc, #64]	; (818ec <pmc_switch_mck_to_pllack+0x80>)
   818aa:	4a10      	ldr	r2, [pc, #64]	; (818ec <pmc_switch_mck_to_pllack+0x80>)
   818ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
   818ae:	f022 0203 	bic.w	r2, r2, #3
   818b2:	f042 0202 	orr.w	r2, r2, #2
   818b6:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   818bc:	60fb      	str	r3, [r7, #12]
   818be:	e007      	b.n	818d0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   818c0:	68fb      	ldr	r3, [r7, #12]
   818c2:	2b00      	cmp	r3, #0
   818c4:	d101      	bne.n	818ca <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   818c6:	2301      	movs	r3, #1
   818c8:	e009      	b.n	818de <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   818ca:	68fb      	ldr	r3, [r7, #12]
   818cc:	3b01      	subs	r3, #1
   818ce:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   818d0:	4b06      	ldr	r3, [pc, #24]	; (818ec <pmc_switch_mck_to_pllack+0x80>)
   818d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   818d4:	f003 0308 	and.w	r3, r3, #8
   818d8:	2b00      	cmp	r3, #0
   818da:	d0f1      	beq.n	818c0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   818dc:	2300      	movs	r3, #0
}
   818de:	4618      	mov	r0, r3
   818e0:	3714      	adds	r7, #20
   818e2:	46bd      	mov	sp, r7
   818e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   818e8:	4770      	bx	lr
   818ea:	bf00      	nop
   818ec:	400e0600 	.word	0x400e0600

000818f0 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   818f0:	b480      	push	{r7}
   818f2:	b083      	sub	sp, #12
   818f4:	af00      	add	r7, sp, #0
   818f6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   818f8:	687b      	ldr	r3, [r7, #4]
   818fa:	2b01      	cmp	r3, #1
   818fc:	d107      	bne.n	8190e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   818fe:	4a0a      	ldr	r2, [pc, #40]	; (81928 <pmc_switch_sclk_to_32kxtal+0x38>)
   81900:	4b09      	ldr	r3, [pc, #36]	; (81928 <pmc_switch_sclk_to_32kxtal+0x38>)
   81902:	689b      	ldr	r3, [r3, #8]
   81904:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8190c:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8190e:	4a06      	ldr	r2, [pc, #24]	; (81928 <pmc_switch_sclk_to_32kxtal+0x38>)
   81910:	4b05      	ldr	r3, [pc, #20]	; (81928 <pmc_switch_sclk_to_32kxtal+0x38>)
   81912:	681b      	ldr	r3, [r3, #0]
   81914:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81918:	f043 0308 	orr.w	r3, r3, #8
   8191c:	6013      	str	r3, [r2, #0]
}
   8191e:	370c      	adds	r7, #12
   81920:	46bd      	mov	sp, r7
   81922:	f85d 7b04 	ldr.w	r7, [sp], #4
   81926:	4770      	bx	lr
   81928:	400e1a10 	.word	0x400e1a10

0008192c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8192c:	b480      	push	{r7}
   8192e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81930:	4b09      	ldr	r3, [pc, #36]	; (81958 <pmc_osc_is_ready_32kxtal+0x2c>)
   81932:	695b      	ldr	r3, [r3, #20]
   81934:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81938:	2b00      	cmp	r3, #0
   8193a:	d007      	beq.n	8194c <pmc_osc_is_ready_32kxtal+0x20>
   8193c:	4b07      	ldr	r3, [pc, #28]	; (8195c <pmc_osc_is_ready_32kxtal+0x30>)
   8193e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81940:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81944:	2b00      	cmp	r3, #0
   81946:	d001      	beq.n	8194c <pmc_osc_is_ready_32kxtal+0x20>
   81948:	2301      	movs	r3, #1
   8194a:	e000      	b.n	8194e <pmc_osc_is_ready_32kxtal+0x22>
   8194c:	2300      	movs	r3, #0
}
   8194e:	4618      	mov	r0, r3
   81950:	46bd      	mov	sp, r7
   81952:	f85d 7b04 	ldr.w	r7, [sp], #4
   81956:	4770      	bx	lr
   81958:	400e1a10 	.word	0x400e1a10
   8195c:	400e0600 	.word	0x400e0600

00081960 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   81960:	b480      	push	{r7}
   81962:	b085      	sub	sp, #20
   81964:	af00      	add	r7, sp, #0
   81966:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   81968:	2300      	movs	r3, #0
   8196a:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   8196c:	4b21      	ldr	r3, [pc, #132]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   8196e:	6a1b      	ldr	r3, [r3, #32]
   81970:	f003 0301 	and.w	r3, r3, #1
   81974:	2b00      	cmp	r3, #0
   81976:	d00e      	beq.n	81996 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81978:	4a1e      	ldr	r2, [pc, #120]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   8197a:	4b1e      	ldr	r3, [pc, #120]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   8197c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   8197e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81982:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   81986:	6879      	ldr	r1, [r7, #4]
   81988:	430b      	orrs	r3, r1
   8198a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8198e:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81992:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81994:	e00b      	b.n	819ae <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   81996:	2301      	movs	r3, #1
   81998:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8199a:	4a16      	ldr	r2, [pc, #88]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   8199c:	4b15      	ldr	r3, [pc, #84]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   8199e:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   819a0:	4b15      	ldr	r3, [pc, #84]	; (819f8 <pmc_switch_mainck_to_fastrc+0x98>)
   819a2:	400b      	ands	r3, r1
   819a4:	6879      	ldr	r1, [r7, #4]
   819a6:	4319      	orrs	r1, r3
   819a8:	4b14      	ldr	r3, [pc, #80]	; (819fc <pmc_switch_mainck_to_fastrc+0x9c>)
   819aa:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   819ac:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   819ae:	bf00      	nop
   819b0:	4b10      	ldr	r3, [pc, #64]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   819b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   819b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   819b8:	2b00      	cmp	r3, #0
   819ba:	d0f9      	beq.n	819b0 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   819bc:	4a0d      	ldr	r2, [pc, #52]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   819be:	4b0d      	ldr	r3, [pc, #52]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   819c0:	6a1b      	ldr	r3, [r3, #32]
   819c2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   819c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   819ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   819ce:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   819d0:	68fb      	ldr	r3, [r7, #12]
   819d2:	2b00      	cmp	r3, #0
   819d4:	d009      	beq.n	819ea <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   819d6:	4a07      	ldr	r2, [pc, #28]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   819d8:	4b06      	ldr	r3, [pc, #24]	; (819f4 <pmc_switch_mainck_to_fastrc+0x94>)
   819da:	6a1b      	ldr	r3, [r3, #32]
   819dc:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   819e0:	f023 0301 	bic.w	r3, r3, #1
   819e4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   819e8:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   819ea:	3714      	adds	r7, #20
   819ec:	46bd      	mov	sp, r7
   819ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   819f2:	4770      	bx	lr
   819f4:	400e0600 	.word	0x400e0600
   819f8:	ffc8c086 	.word	0xffc8c086
   819fc:	00373f09 	.word	0x00373f09

00081a00 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   81a00:	b480      	push	{r7}
   81a02:	b083      	sub	sp, #12
   81a04:	af00      	add	r7, sp, #0
   81a06:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81a08:	687b      	ldr	r3, [r7, #4]
   81a0a:	2b00      	cmp	r3, #0
   81a0c:	d008      	beq.n	81a20 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81a0e:	4912      	ldr	r1, [pc, #72]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a10:	4b11      	ldr	r3, [pc, #68]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a12:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   81a14:	4a11      	ldr	r2, [pc, #68]	; (81a5c <pmc_switch_mainck_to_xtal+0x5c>)
   81a16:	401a      	ands	r2, r3
   81a18:	4b11      	ldr	r3, [pc, #68]	; (81a60 <pmc_switch_mainck_to_xtal+0x60>)
   81a1a:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81a1c:	620b      	str	r3, [r1, #32]
   81a1e:	e016      	b.n	81a4e <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81a20:	490d      	ldr	r1, [pc, #52]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a22:	4b0d      	ldr	r3, [pc, #52]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a24:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   81a26:	4a0f      	ldr	r2, [pc, #60]	; (81a64 <pmc_switch_mainck_to_xtal+0x64>)
   81a28:	401a      	ands	r2, r3
   81a2a:	4b0f      	ldr	r3, [pc, #60]	; (81a68 <pmc_switch_mainck_to_xtal+0x68>)
   81a2c:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81a2e:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81a30:	bf00      	nop
   81a32:	4b09      	ldr	r3, [pc, #36]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81a36:	f003 0301 	and.w	r3, r3, #1
   81a3a:	2b00      	cmp	r3, #0
   81a3c:	d0f9      	beq.n	81a32 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   81a3e:	4a06      	ldr	r2, [pc, #24]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a40:	4b05      	ldr	r3, [pc, #20]	; (81a58 <pmc_switch_mainck_to_xtal+0x58>)
   81a42:	6a1b      	ldr	r3, [r3, #32]
   81a44:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81a4c:	6213      	str	r3, [r2, #32]
	}
}
   81a4e:	370c      	adds	r7, #12
   81a50:	46bd      	mov	sp, r7
   81a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a56:	4770      	bx	lr
   81a58:	400e0600 	.word	0x400e0600
   81a5c:	fec8fffc 	.word	0xfec8fffc
   81a60:	01370002 	.word	0x01370002
   81a64:	ffc8c0fc 	.word	0xffc8c0fc
   81a68:	00373f01 	.word	0x00373f01

00081a6c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81a6c:	b480      	push	{r7}
   81a6e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81a70:	4b04      	ldr	r3, [pc, #16]	; (81a84 <pmc_osc_is_ready_mainck+0x18>)
   81a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81a78:	4618      	mov	r0, r3
   81a7a:	46bd      	mov	sp, r7
   81a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a80:	4770      	bx	lr
   81a82:	bf00      	nop
   81a84:	400e0600 	.word	0x400e0600

00081a88 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   81a88:	b480      	push	{r7}
   81a8a:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81a8c:	4b03      	ldr	r3, [pc, #12]	; (81a9c <pmc_disable_pllack+0x14>)
   81a8e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81a92:	629a      	str	r2, [r3, #40]	; 0x28
}
   81a94:	46bd      	mov	sp, r7
   81a96:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a9a:	4770      	bx	lr
   81a9c:	400e0600 	.word	0x400e0600

00081aa0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   81aa0:	b480      	push	{r7}
   81aa2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81aa4:	4b04      	ldr	r3, [pc, #16]	; (81ab8 <pmc_is_locked_pllack+0x18>)
   81aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81aa8:	f003 0302 	and.w	r3, r3, #2
}
   81aac:	4618      	mov	r0, r3
   81aae:	46bd      	mov	sp, r7
   81ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ab4:	4770      	bx	lr
   81ab6:	bf00      	nop
   81ab8:	400e0600 	.word	0x400e0600

00081abc <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   81abc:	b480      	push	{r7}
   81abe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   81ac0:	4b04      	ldr	r3, [pc, #16]	; (81ad4 <pmc_is_locked_upll+0x18>)
   81ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   81ac8:	4618      	mov	r0, r3
   81aca:	46bd      	mov	sp, r7
   81acc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ad0:	4770      	bx	lr
   81ad2:	bf00      	nop
   81ad4:	400e0600 	.word	0x400e0600

00081ad8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   81ad8:	b480      	push	{r7}
   81ada:	b083      	sub	sp, #12
   81adc:	af00      	add	r7, sp, #0
   81ade:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   81ae0:	687b      	ldr	r3, [r7, #4]
   81ae2:	2b2c      	cmp	r3, #44	; 0x2c
   81ae4:	d901      	bls.n	81aea <pmc_enable_periph_clk+0x12>
		return 1;
   81ae6:	2301      	movs	r3, #1
   81ae8:	e02f      	b.n	81b4a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   81aea:	687b      	ldr	r3, [r7, #4]
   81aec:	2b1f      	cmp	r3, #31
   81aee:	d813      	bhi.n	81b18 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81af0:	4b19      	ldr	r3, [pc, #100]	; (81b58 <pmc_enable_periph_clk+0x80>)
   81af2:	699a      	ldr	r2, [r3, #24]
   81af4:	687b      	ldr	r3, [r7, #4]
   81af6:	2101      	movs	r1, #1
   81af8:	fa01 f303 	lsl.w	r3, r1, r3
   81afc:	401a      	ands	r2, r3
   81afe:	687b      	ldr	r3, [r7, #4]
   81b00:	2101      	movs	r1, #1
   81b02:	fa01 f303 	lsl.w	r3, r1, r3
   81b06:	429a      	cmp	r2, r3
   81b08:	d01e      	beq.n	81b48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   81b0a:	4b13      	ldr	r3, [pc, #76]	; (81b58 <pmc_enable_periph_clk+0x80>)
   81b0c:	687a      	ldr	r2, [r7, #4]
   81b0e:	2101      	movs	r1, #1
   81b10:	fa01 f202 	lsl.w	r2, r1, r2
   81b14:	611a      	str	r2, [r3, #16]
   81b16:	e017      	b.n	81b48 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   81b18:	687b      	ldr	r3, [r7, #4]
   81b1a:	3b20      	subs	r3, #32
   81b1c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81b1e:	4b0e      	ldr	r3, [pc, #56]	; (81b58 <pmc_enable_periph_clk+0x80>)
   81b20:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81b24:	687b      	ldr	r3, [r7, #4]
   81b26:	2101      	movs	r1, #1
   81b28:	fa01 f303 	lsl.w	r3, r1, r3
   81b2c:	401a      	ands	r2, r3
   81b2e:	687b      	ldr	r3, [r7, #4]
   81b30:	2101      	movs	r1, #1
   81b32:	fa01 f303 	lsl.w	r3, r1, r3
   81b36:	429a      	cmp	r2, r3
   81b38:	d006      	beq.n	81b48 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   81b3a:	4b07      	ldr	r3, [pc, #28]	; (81b58 <pmc_enable_periph_clk+0x80>)
   81b3c:	687a      	ldr	r2, [r7, #4]
   81b3e:	2101      	movs	r1, #1
   81b40:	fa01 f202 	lsl.w	r2, r1, r2
   81b44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81b48:	2300      	movs	r3, #0
}
   81b4a:	4618      	mov	r0, r3
   81b4c:	370c      	adds	r7, #12
   81b4e:	46bd      	mov	sp, r7
   81b50:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b54:	4770      	bx	lr
   81b56:	bf00      	nop
   81b58:	400e0600 	.word	0x400e0600

00081b5c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81b5c:	b480      	push	{r7}
   81b5e:	b089      	sub	sp, #36	; 0x24
   81b60:	af00      	add	r7, sp, #0
   81b62:	60f8      	str	r0, [r7, #12]
   81b64:	60b9      	str	r1, [r7, #8]
   81b66:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81b68:	68bb      	ldr	r3, [r7, #8]
   81b6a:	011a      	lsls	r2, r3, #4
   81b6c:	687b      	ldr	r3, [r7, #4]
   81b6e:	429a      	cmp	r2, r3
   81b70:	d802      	bhi.n	81b78 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81b72:	2310      	movs	r3, #16
   81b74:	61fb      	str	r3, [r7, #28]
   81b76:	e001      	b.n	81b7c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81b78:	2308      	movs	r3, #8
   81b7a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81b7c:	687b      	ldr	r3, [r7, #4]
   81b7e:	00da      	lsls	r2, r3, #3
   81b80:	69fb      	ldr	r3, [r7, #28]
   81b82:	68b9      	ldr	r1, [r7, #8]
   81b84:	fb01 f303 	mul.w	r3, r1, r3
   81b88:	085b      	lsrs	r3, r3, #1
   81b8a:	441a      	add	r2, r3
   81b8c:	69fb      	ldr	r3, [r7, #28]
   81b8e:	68b9      	ldr	r1, [r7, #8]
   81b90:	fb01 f303 	mul.w	r3, r1, r3
   81b94:	fbb2 f3f3 	udiv	r3, r2, r3
   81b98:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81b9a:	69bb      	ldr	r3, [r7, #24]
   81b9c:	08db      	lsrs	r3, r3, #3
   81b9e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81ba0:	69bb      	ldr	r3, [r7, #24]
   81ba2:	f003 0307 	and.w	r3, r3, #7
   81ba6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81ba8:	697b      	ldr	r3, [r7, #20]
   81baa:	2b00      	cmp	r3, #0
   81bac:	d003      	beq.n	81bb6 <usart_set_async_baudrate+0x5a>
   81bae:	697b      	ldr	r3, [r7, #20]
   81bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81bb4:	d301      	bcc.n	81bba <usart_set_async_baudrate+0x5e>
		return 1;
   81bb6:	2301      	movs	r3, #1
   81bb8:	e00f      	b.n	81bda <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81bba:	69fb      	ldr	r3, [r7, #28]
   81bbc:	2b08      	cmp	r3, #8
   81bbe:	d105      	bne.n	81bcc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81bc0:	68fb      	ldr	r3, [r7, #12]
   81bc2:	685b      	ldr	r3, [r3, #4]
   81bc4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81bc8:	68fb      	ldr	r3, [r7, #12]
   81bca:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81bcc:	693b      	ldr	r3, [r7, #16]
   81bce:	041a      	lsls	r2, r3, #16
   81bd0:	697b      	ldr	r3, [r7, #20]
   81bd2:	431a      	orrs	r2, r3
   81bd4:	68fb      	ldr	r3, [r7, #12]
   81bd6:	621a      	str	r2, [r3, #32]

	return 0;
   81bd8:	2300      	movs	r3, #0
}
   81bda:	4618      	mov	r0, r3
   81bdc:	3724      	adds	r7, #36	; 0x24
   81bde:	46bd      	mov	sp, r7
   81be0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81be4:	4770      	bx	lr
   81be6:	bf00      	nop

00081be8 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81be8:	b580      	push	{r7, lr}
   81bea:	b082      	sub	sp, #8
   81bec:	af00      	add	r7, sp, #0
   81bee:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   81bf0:	6878      	ldr	r0, [r7, #4]
   81bf2:	4b0d      	ldr	r3, [pc, #52]	; (81c28 <usart_reset+0x40>)
   81bf4:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   81bf6:	687b      	ldr	r3, [r7, #4]
   81bf8:	2200      	movs	r2, #0
   81bfa:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81bfc:	687b      	ldr	r3, [r7, #4]
   81bfe:	2200      	movs	r2, #0
   81c00:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81c02:	687b      	ldr	r3, [r7, #4]
   81c04:	2200      	movs	r2, #0
   81c06:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   81c08:	6878      	ldr	r0, [r7, #4]
   81c0a:	4b08      	ldr	r3, [pc, #32]	; (81c2c <usart_reset+0x44>)
   81c0c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81c0e:	6878      	ldr	r0, [r7, #4]
   81c10:	4b07      	ldr	r3, [pc, #28]	; (81c30 <usart_reset+0x48>)
   81c12:	4798      	blx	r3
	usart_reset_status(p_usart);
   81c14:	6878      	ldr	r0, [r7, #4]
   81c16:	4b07      	ldr	r3, [pc, #28]	; (81c34 <usart_reset+0x4c>)
   81c18:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   81c1a:	6878      	ldr	r0, [r7, #4]
   81c1c:	4b06      	ldr	r3, [pc, #24]	; (81c38 <usart_reset+0x50>)
   81c1e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81c20:	3708      	adds	r7, #8
   81c22:	46bd      	mov	sp, r7
   81c24:	bd80      	pop	{r7, pc}
   81c26:	bf00      	nop
   81c28:	00081e25 	.word	0x00081e25
   81c2c:	00081cd9 	.word	0x00081cd9
   81c30:	00081d09 	.word	0x00081d09
   81c34:	00081d71 	.word	0x00081d71
   81c38:	00081d8d 	.word	0x00081d8d

00081c3c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81c3c:	b580      	push	{r7, lr}
   81c3e:	b084      	sub	sp, #16
   81c40:	af00      	add	r7, sp, #0
   81c42:	60f8      	str	r0, [r7, #12]
   81c44:	60b9      	str	r1, [r7, #8]
   81c46:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81c48:	68f8      	ldr	r0, [r7, #12]
   81c4a:	4b1a      	ldr	r3, [pc, #104]	; (81cb4 <usart_init_rs232+0x78>)
   81c4c:	4798      	blx	r3

	ul_reg_val = 0;
   81c4e:	4b1a      	ldr	r3, [pc, #104]	; (81cb8 <usart_init_rs232+0x7c>)
   81c50:	2200      	movs	r2, #0
   81c52:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   81c54:	68bb      	ldr	r3, [r7, #8]
   81c56:	2b00      	cmp	r3, #0
   81c58:	d009      	beq.n	81c6e <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   81c5a:	68bb      	ldr	r3, [r7, #8]
   81c5c:	681b      	ldr	r3, [r3, #0]
   81c5e:	68f8      	ldr	r0, [r7, #12]
   81c60:	4619      	mov	r1, r3
   81c62:	687a      	ldr	r2, [r7, #4]
   81c64:	4b15      	ldr	r3, [pc, #84]	; (81cbc <usart_init_rs232+0x80>)
   81c66:	4798      	blx	r3
   81c68:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   81c6a:	2b00      	cmp	r3, #0
   81c6c:	d001      	beq.n	81c72 <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   81c6e:	2301      	movs	r3, #1
   81c70:	e01b      	b.n	81caa <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81c72:	68bb      	ldr	r3, [r7, #8]
   81c74:	685a      	ldr	r2, [r3, #4]
   81c76:	68bb      	ldr	r3, [r7, #8]
   81c78:	689b      	ldr	r3, [r3, #8]
   81c7a:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81c7c:	68bb      	ldr	r3, [r7, #8]
   81c7e:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81c80:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81c82:	68bb      	ldr	r3, [r7, #8]
   81c84:	68db      	ldr	r3, [r3, #12]
   81c86:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81c88:	4b0b      	ldr	r3, [pc, #44]	; (81cb8 <usart_init_rs232+0x7c>)
   81c8a:	681b      	ldr	r3, [r3, #0]
   81c8c:	431a      	orrs	r2, r3
   81c8e:	4b0a      	ldr	r3, [pc, #40]	; (81cb8 <usart_init_rs232+0x7c>)
   81c90:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81c92:	4b09      	ldr	r3, [pc, #36]	; (81cb8 <usart_init_rs232+0x7c>)
   81c94:	681a      	ldr	r2, [r3, #0]
   81c96:	4b08      	ldr	r3, [pc, #32]	; (81cb8 <usart_init_rs232+0x7c>)
   81c98:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   81c9a:	68fb      	ldr	r3, [r7, #12]
   81c9c:	685a      	ldr	r2, [r3, #4]
   81c9e:	4b06      	ldr	r3, [pc, #24]	; (81cb8 <usart_init_rs232+0x7c>)
   81ca0:	681b      	ldr	r3, [r3, #0]
   81ca2:	431a      	orrs	r2, r3
   81ca4:	68fb      	ldr	r3, [r7, #12]
   81ca6:	605a      	str	r2, [r3, #4]
	
	return 0;
   81ca8:	2300      	movs	r3, #0
}
   81caa:	4618      	mov	r0, r3
   81cac:	3710      	adds	r7, #16
   81cae:	46bd      	mov	sp, r7
   81cb0:	bd80      	pop	{r7, pc}
   81cb2:	bf00      	nop
   81cb4:	00081be9 	.word	0x00081be9
   81cb8:	200704dc 	.word	0x200704dc
   81cbc:	00081b5d 	.word	0x00081b5d

00081cc0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81cc0:	b480      	push	{r7}
   81cc2:	b083      	sub	sp, #12
   81cc4:	af00      	add	r7, sp, #0
   81cc6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81cc8:	687b      	ldr	r3, [r7, #4]
   81cca:	2240      	movs	r2, #64	; 0x40
   81ccc:	601a      	str	r2, [r3, #0]
}
   81cce:	370c      	adds	r7, #12
   81cd0:	46bd      	mov	sp, r7
   81cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cd6:	4770      	bx	lr

00081cd8 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81cd8:	b480      	push	{r7}
   81cda:	b083      	sub	sp, #12
   81cdc:	af00      	add	r7, sp, #0
   81cde:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81ce0:	687b      	ldr	r3, [r7, #4]
   81ce2:	2288      	movs	r2, #136	; 0x88
   81ce4:	601a      	str	r2, [r3, #0]
}
   81ce6:	370c      	adds	r7, #12
   81ce8:	46bd      	mov	sp, r7
   81cea:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cee:	4770      	bx	lr

00081cf0 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81cf0:	b480      	push	{r7}
   81cf2:	b083      	sub	sp, #12
   81cf4:	af00      	add	r7, sp, #0
   81cf6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   81cf8:	687b      	ldr	r3, [r7, #4]
   81cfa:	2210      	movs	r2, #16
   81cfc:	601a      	str	r2, [r3, #0]
}
   81cfe:	370c      	adds	r7, #12
   81d00:	46bd      	mov	sp, r7
   81d02:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d06:	4770      	bx	lr

00081d08 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81d08:	b480      	push	{r7}
   81d0a:	b083      	sub	sp, #12
   81d0c:	af00      	add	r7, sp, #0
   81d0e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81d10:	687b      	ldr	r3, [r7, #4]
   81d12:	2224      	movs	r2, #36	; 0x24
   81d14:	601a      	str	r2, [r3, #0]
}
   81d16:	370c      	adds	r7, #12
   81d18:	46bd      	mov	sp, r7
   81d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d1e:	4770      	bx	lr

00081d20 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81d20:	b480      	push	{r7}
   81d22:	b083      	sub	sp, #12
   81d24:	af00      	add	r7, sp, #0
   81d26:	6078      	str	r0, [r7, #4]
   81d28:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   81d2a:	687b      	ldr	r3, [r7, #4]
   81d2c:	683a      	ldr	r2, [r7, #0]
   81d2e:	609a      	str	r2, [r3, #8]
}
   81d30:	370c      	adds	r7, #12
   81d32:	46bd      	mov	sp, r7
   81d34:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d38:	4770      	bx	lr
   81d3a:	bf00      	nop

00081d3c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81d3c:	b480      	push	{r7}
   81d3e:	b083      	sub	sp, #12
   81d40:	af00      	add	r7, sp, #0
   81d42:	6078      	str	r0, [r7, #4]
   81d44:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   81d46:	687b      	ldr	r3, [r7, #4]
   81d48:	683a      	ldr	r2, [r7, #0]
   81d4a:	60da      	str	r2, [r3, #12]
}
   81d4c:	370c      	adds	r7, #12
   81d4e:	46bd      	mov	sp, r7
   81d50:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d54:	4770      	bx	lr
   81d56:	bf00      	nop

00081d58 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   81d58:	b480      	push	{r7}
   81d5a:	b083      	sub	sp, #12
   81d5c:	af00      	add	r7, sp, #0
   81d5e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	695b      	ldr	r3, [r3, #20]
}
   81d64:	4618      	mov	r0, r3
   81d66:	370c      	adds	r7, #12
   81d68:	46bd      	mov	sp, r7
   81d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d6e:	4770      	bx	lr

00081d70 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   81d70:	b480      	push	{r7}
   81d72:	b083      	sub	sp, #12
   81d74:	af00      	add	r7, sp, #0
   81d76:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
   81d7e:	601a      	str	r2, [r3, #0]
}
   81d80:	370c      	adds	r7, #12
   81d82:	46bd      	mov	sp, r7
   81d84:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d88:	4770      	bx	lr
   81d8a:	bf00      	nop

00081d8c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81d8c:	b480      	push	{r7}
   81d8e:	b083      	sub	sp, #12
   81d90:	af00      	add	r7, sp, #0
   81d92:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81d94:	687b      	ldr	r3, [r7, #4]
   81d96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81d9a:	601a      	str	r2, [r3, #0]
}
   81d9c:	370c      	adds	r7, #12
   81d9e:	46bd      	mov	sp, r7
   81da0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81da4:	4770      	bx	lr
   81da6:	bf00      	nop

00081da8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81da8:	b480      	push	{r7}
   81daa:	b083      	sub	sp, #12
   81dac:	af00      	add	r7, sp, #0
   81dae:	6078      	str	r0, [r7, #4]
   81db0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81db2:	687b      	ldr	r3, [r7, #4]
   81db4:	695b      	ldr	r3, [r3, #20]
   81db6:	f003 0302 	and.w	r3, r3, #2
   81dba:	2b00      	cmp	r3, #0
   81dbc:	d101      	bne.n	81dc2 <usart_write+0x1a>
		return 1;
   81dbe:	2301      	movs	r3, #1
   81dc0:	e005      	b.n	81dce <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81dc2:	683b      	ldr	r3, [r7, #0]
   81dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81dc8:	687b      	ldr	r3, [r7, #4]
   81dca:	61da      	str	r2, [r3, #28]
	return 0;
   81dcc:	2300      	movs	r3, #0
}
   81dce:	4618      	mov	r0, r3
   81dd0:	370c      	adds	r7, #12
   81dd2:	46bd      	mov	sp, r7
   81dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dd8:	4770      	bx	lr
   81dda:	bf00      	nop

00081ddc <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   81ddc:	b480      	push	{r7}
   81dde:	b085      	sub	sp, #20
   81de0:	af00      	add	r7, sp, #0
   81de2:	6078      	str	r0, [r7, #4]
   81de4:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   81de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   81dea:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81dec:	e006      	b.n	81dfc <usart_getchar+0x20>
		if (!timeout--) {
   81dee:	68fb      	ldr	r3, [r7, #12]
   81df0:	1e5a      	subs	r2, r3, #1
   81df2:	60fa      	str	r2, [r7, #12]
   81df4:	2b00      	cmp	r3, #0
   81df6:	d101      	bne.n	81dfc <usart_getchar+0x20>
			return 1;
   81df8:	2301      	movs	r3, #1
   81dfa:	e00c      	b.n	81e16 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81dfc:	687b      	ldr	r3, [r7, #4]
   81dfe:	695b      	ldr	r3, [r3, #20]
   81e00:	f003 0301 	and.w	r3, r3, #1
   81e04:	2b00      	cmp	r3, #0
   81e06:	d0f2      	beq.n	81dee <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81e08:	687b      	ldr	r3, [r7, #4]
   81e0a:	699b      	ldr	r3, [r3, #24]
   81e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81e10:	683b      	ldr	r3, [r7, #0]
   81e12:	601a      	str	r2, [r3, #0]

	return 0;
   81e14:	2300      	movs	r3, #0
}
   81e16:	4618      	mov	r0, r3
   81e18:	3714      	adds	r7, #20
   81e1a:	46bd      	mov	sp, r7
   81e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e20:	4770      	bx	lr
   81e22:	bf00      	nop

00081e24 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81e24:	b480      	push	{r7}
   81e26:	b083      	sub	sp, #12
   81e28:	af00      	add	r7, sp, #0
   81e2a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81e2c:	687b      	ldr	r3, [r7, #4]
   81e2e:	4a04      	ldr	r2, [pc, #16]	; (81e40 <usart_disable_writeprotect+0x1c>)
   81e30:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81e34:	370c      	adds	r7, #12
   81e36:	46bd      	mov	sp, r7
   81e38:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e3c:	4770      	bx	lr
   81e3e:	bf00      	nop
   81e40:	55534100 	.word	0x55534100

00081e44 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   81e44:	b480      	push	{r7}
   81e46:	b083      	sub	sp, #12
   81e48:	af00      	add	r7, sp, #0
   81e4a:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   81e4c:	687a      	ldr	r2, [r7, #4]
   81e4e:	4b05      	ldr	r3, [pc, #20]	; (81e64 <wdt_restart+0x20>)
   81e50:	429a      	cmp	r2, r3
   81e52:	d102      	bne.n	81e5a <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   81e54:	687b      	ldr	r3, [r7, #4]
   81e56:	4a04      	ldr	r2, [pc, #16]	; (81e68 <wdt_restart+0x24>)
   81e58:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   81e5a:	370c      	adds	r7, #12
   81e5c:	46bd      	mov	sp, r7
   81e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e62:	4770      	bx	lr
   81e64:	400e1a50 	.word	0x400e1a50
   81e68:	a5000001 	.word	0xa5000001

00081e6c <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   81e6c:	b480      	push	{r7}
   81e6e:	b083      	sub	sp, #12
   81e70:	af00      	add	r7, sp, #0
   81e72:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   81e74:	687b      	ldr	r3, [r7, #4]
   81e76:	689b      	ldr	r3, [r3, #8]
}
   81e78:	4618      	mov	r0, r3
   81e7a:	370c      	adds	r7, #12
   81e7c:	46bd      	mov	sp, r7
   81e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e82:	4770      	bx	lr

00081e84 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81e84:	b480      	push	{r7}
   81e86:	af00      	add	r7, sp, #0
	while (1) {
	}
   81e88:	e7fe      	b.n	81e88 <Dummy_Handler+0x4>
   81e8a:	bf00      	nop

00081e8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81e8c:	b580      	push	{r7, lr}
   81e8e:	b082      	sub	sp, #8
   81e90:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   81e92:	4b1e      	ldr	r3, [pc, #120]	; (81f0c <Reset_Handler+0x80>)
   81e94:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   81e96:	4b1e      	ldr	r3, [pc, #120]	; (81f10 <Reset_Handler+0x84>)
   81e98:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   81e9a:	687a      	ldr	r2, [r7, #4]
   81e9c:	683b      	ldr	r3, [r7, #0]
   81e9e:	429a      	cmp	r2, r3
   81ea0:	d00c      	beq.n	81ebc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   81ea2:	e007      	b.n	81eb4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   81ea4:	683b      	ldr	r3, [r7, #0]
   81ea6:	1d1a      	adds	r2, r3, #4
   81ea8:	603a      	str	r2, [r7, #0]
   81eaa:	687a      	ldr	r2, [r7, #4]
   81eac:	1d11      	adds	r1, r2, #4
   81eae:	6079      	str	r1, [r7, #4]
   81eb0:	6812      	ldr	r2, [r2, #0]
   81eb2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81eb4:	683a      	ldr	r2, [r7, #0]
   81eb6:	4b17      	ldr	r3, [pc, #92]	; (81f14 <Reset_Handler+0x88>)
   81eb8:	429a      	cmp	r2, r3
   81eba:	d3f3      	bcc.n	81ea4 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81ebc:	4b16      	ldr	r3, [pc, #88]	; (81f18 <Reset_Handler+0x8c>)
   81ebe:	603b      	str	r3, [r7, #0]
   81ec0:	e004      	b.n	81ecc <Reset_Handler+0x40>
		*pDest++ = 0;
   81ec2:	683b      	ldr	r3, [r7, #0]
   81ec4:	1d1a      	adds	r2, r3, #4
   81ec6:	603a      	str	r2, [r7, #0]
   81ec8:	2200      	movs	r2, #0
   81eca:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81ecc:	683a      	ldr	r2, [r7, #0]
   81ece:	4b13      	ldr	r3, [pc, #76]	; (81f1c <Reset_Handler+0x90>)
   81ed0:	429a      	cmp	r2, r3
   81ed2:	d3f6      	bcc.n	81ec2 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   81ed4:	4b12      	ldr	r3, [pc, #72]	; (81f20 <Reset_Handler+0x94>)
   81ed6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81ed8:	4a12      	ldr	r2, [pc, #72]	; (81f24 <Reset_Handler+0x98>)
   81eda:	687b      	ldr	r3, [r7, #4]
   81edc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   81ee0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81ee4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81ee6:	687b      	ldr	r3, [r7, #4]
   81ee8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81eec:	d309      	bcc.n	81f02 <Reset_Handler+0x76>
   81eee:	687a      	ldr	r2, [r7, #4]
   81ef0:	4b0d      	ldr	r3, [pc, #52]	; (81f28 <Reset_Handler+0x9c>)
   81ef2:	429a      	cmp	r2, r3
   81ef4:	d805      	bhi.n	81f02 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81ef6:	4b0b      	ldr	r3, [pc, #44]	; (81f24 <Reset_Handler+0x98>)
   81ef8:	4a0a      	ldr	r2, [pc, #40]	; (81f24 <Reset_Handler+0x98>)
   81efa:	6892      	ldr	r2, [r2, #8]
   81efc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81f00:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81f02:	4b0a      	ldr	r3, [pc, #40]	; (81f2c <Reset_Handler+0xa0>)
   81f04:	4798      	blx	r3

	/* Branch to main function */
	main();
   81f06:	4b0a      	ldr	r3, [pc, #40]	; (81f30 <Reset_Handler+0xa4>)
   81f08:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   81f0a:	e7fe      	b.n	81f0a <Reset_Handler+0x7e>
   81f0c:	00085660 	.word	0x00085660
   81f10:	20070000 	.word	0x20070000
   81f14:	20070438 	.word	0x20070438
   81f18:	20070438 	.word	0x20070438
   81f1c:	2007a6f0 	.word	0x2007a6f0
   81f20:	00080000 	.word	0x00080000
   81f24:	e000ed00 	.word	0xe000ed00
   81f28:	200fffff 	.word	0x200fffff
   81f2c:	000851a9 	.word	0x000851a9
   81f30:	00084f5d 	.word	0x00084f5d

00081f34 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   81f34:	b480      	push	{r7}
   81f36:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81f38:	4b56      	ldr	r3, [pc, #344]	; (82094 <SystemCoreClockUpdate+0x160>)
   81f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81f3c:	f003 0303 	and.w	r3, r3, #3
   81f40:	2b03      	cmp	r3, #3
   81f42:	f200 808a 	bhi.w	8205a <SystemCoreClockUpdate+0x126>
   81f46:	a101      	add	r1, pc, #4	; (adr r1, 81f4c <SystemCoreClockUpdate+0x18>)
   81f48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   81f4c:	00081f5d 	.word	0x00081f5d
   81f50:	00081f7d 	.word	0x00081f7d
   81f54:	00081fcd 	.word	0x00081fcd
   81f58:	00081fcd 	.word	0x00081fcd
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81f5c:	4b4e      	ldr	r3, [pc, #312]	; (82098 <SystemCoreClockUpdate+0x164>)
   81f5e:	695b      	ldr	r3, [r3, #20]
   81f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81f64:	2b00      	cmp	r3, #0
   81f66:	d004      	beq.n	81f72 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81f68:	4b4c      	ldr	r3, [pc, #304]	; (8209c <SystemCoreClockUpdate+0x168>)
   81f6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81f6e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   81f70:	e073      	b.n	8205a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81f72:	4b4a      	ldr	r3, [pc, #296]	; (8209c <SystemCoreClockUpdate+0x168>)
   81f74:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   81f78:	601a      	str	r2, [r3, #0]
		}
		break;
   81f7a:	e06e      	b.n	8205a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81f7c:	4b45      	ldr	r3, [pc, #276]	; (82094 <SystemCoreClockUpdate+0x160>)
   81f7e:	6a1b      	ldr	r3, [r3, #32]
   81f80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81f84:	2b00      	cmp	r3, #0
   81f86:	d003      	beq.n	81f90 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81f88:	4b44      	ldr	r3, [pc, #272]	; (8209c <SystemCoreClockUpdate+0x168>)
   81f8a:	4a45      	ldr	r2, [pc, #276]	; (820a0 <SystemCoreClockUpdate+0x16c>)
   81f8c:	601a      	str	r2, [r3, #0]
   81f8e:	e01c      	b.n	81fca <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81f90:	4b42      	ldr	r3, [pc, #264]	; (8209c <SystemCoreClockUpdate+0x168>)
   81f92:	4a44      	ldr	r2, [pc, #272]	; (820a4 <SystemCoreClockUpdate+0x170>)
   81f94:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81f96:	4b3f      	ldr	r3, [pc, #252]	; (82094 <SystemCoreClockUpdate+0x160>)
   81f98:	6a1b      	ldr	r3, [r3, #32]
   81f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81f9e:	2b10      	cmp	r3, #16
   81fa0:	d004      	beq.n	81fac <SystemCoreClockUpdate+0x78>
   81fa2:	2b20      	cmp	r3, #32
   81fa4:	d008      	beq.n	81fb8 <SystemCoreClockUpdate+0x84>
   81fa6:	2b00      	cmp	r3, #0
   81fa8:	d00e      	beq.n	81fc8 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   81faa:	e00e      	b.n	81fca <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81fac:	4b3b      	ldr	r3, [pc, #236]	; (8209c <SystemCoreClockUpdate+0x168>)
   81fae:	681b      	ldr	r3, [r3, #0]
   81fb0:	005a      	lsls	r2, r3, #1
   81fb2:	4b3a      	ldr	r3, [pc, #232]	; (8209c <SystemCoreClockUpdate+0x168>)
   81fb4:	601a      	str	r2, [r3, #0]
				break;
   81fb6:	e008      	b.n	81fca <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81fb8:	4b38      	ldr	r3, [pc, #224]	; (8209c <SystemCoreClockUpdate+0x168>)
   81fba:	681a      	ldr	r2, [r3, #0]
   81fbc:	4613      	mov	r3, r2
   81fbe:	005b      	lsls	r3, r3, #1
   81fc0:	441a      	add	r2, r3
   81fc2:	4b36      	ldr	r3, [pc, #216]	; (8209c <SystemCoreClockUpdate+0x168>)
   81fc4:	601a      	str	r2, [r3, #0]
				break;
   81fc6:	e000      	b.n	81fca <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   81fc8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   81fca:	e046      	b.n	8205a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81fcc:	4b31      	ldr	r3, [pc, #196]	; (82094 <SystemCoreClockUpdate+0x160>)
   81fce:	6a1b      	ldr	r3, [r3, #32]
   81fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81fd4:	2b00      	cmp	r3, #0
   81fd6:	d003      	beq.n	81fe0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81fd8:	4b30      	ldr	r3, [pc, #192]	; (8209c <SystemCoreClockUpdate+0x168>)
   81fda:	4a31      	ldr	r2, [pc, #196]	; (820a0 <SystemCoreClockUpdate+0x16c>)
   81fdc:	601a      	str	r2, [r3, #0]
   81fde:	e01c      	b.n	8201a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81fe0:	4b2e      	ldr	r3, [pc, #184]	; (8209c <SystemCoreClockUpdate+0x168>)
   81fe2:	4a30      	ldr	r2, [pc, #192]	; (820a4 <SystemCoreClockUpdate+0x170>)
   81fe4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81fe6:	4b2b      	ldr	r3, [pc, #172]	; (82094 <SystemCoreClockUpdate+0x160>)
   81fe8:	6a1b      	ldr	r3, [r3, #32]
   81fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81fee:	2b10      	cmp	r3, #16
   81ff0:	d004      	beq.n	81ffc <SystemCoreClockUpdate+0xc8>
   81ff2:	2b20      	cmp	r3, #32
   81ff4:	d008      	beq.n	82008 <SystemCoreClockUpdate+0xd4>
   81ff6:	2b00      	cmp	r3, #0
   81ff8:	d00e      	beq.n	82018 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   81ffa:	e00e      	b.n	8201a <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81ffc:	4b27      	ldr	r3, [pc, #156]	; (8209c <SystemCoreClockUpdate+0x168>)
   81ffe:	681b      	ldr	r3, [r3, #0]
   82000:	005a      	lsls	r2, r3, #1
   82002:	4b26      	ldr	r3, [pc, #152]	; (8209c <SystemCoreClockUpdate+0x168>)
   82004:	601a      	str	r2, [r3, #0]
				break;
   82006:	e008      	b.n	8201a <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82008:	4b24      	ldr	r3, [pc, #144]	; (8209c <SystemCoreClockUpdate+0x168>)
   8200a:	681a      	ldr	r2, [r3, #0]
   8200c:	4613      	mov	r3, r2
   8200e:	005b      	lsls	r3, r3, #1
   82010:	441a      	add	r2, r3
   82012:	4b22      	ldr	r3, [pc, #136]	; (8209c <SystemCoreClockUpdate+0x168>)
   82014:	601a      	str	r2, [r3, #0]
				break;
   82016:	e000      	b.n	8201a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82018:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8201a:	4b1e      	ldr	r3, [pc, #120]	; (82094 <SystemCoreClockUpdate+0x160>)
   8201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8201e:	f003 0303 	and.w	r3, r3, #3
   82022:	2b02      	cmp	r3, #2
   82024:	d115      	bne.n	82052 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82026:	4b1b      	ldr	r3, [pc, #108]	; (82094 <SystemCoreClockUpdate+0x160>)
   82028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8202a:	4b1f      	ldr	r3, [pc, #124]	; (820a8 <SystemCoreClockUpdate+0x174>)
   8202c:	4013      	ands	r3, r2
   8202e:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82030:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82032:	4a1a      	ldr	r2, [pc, #104]	; (8209c <SystemCoreClockUpdate+0x168>)
   82034:	6812      	ldr	r2, [r2, #0]
   82036:	fb02 f203 	mul.w	r2, r2, r3
   8203a:	4b18      	ldr	r3, [pc, #96]	; (8209c <SystemCoreClockUpdate+0x168>)
   8203c:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8203e:	4b17      	ldr	r3, [pc, #92]	; (8209c <SystemCoreClockUpdate+0x168>)
   82040:	681a      	ldr	r2, [r3, #0]
   82042:	4b14      	ldr	r3, [pc, #80]	; (82094 <SystemCoreClockUpdate+0x160>)
   82044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82046:	b2db      	uxtb	r3, r3
   82048:	fbb2 f2f3 	udiv	r2, r2, r3
   8204c:	4b13      	ldr	r3, [pc, #76]	; (8209c <SystemCoreClockUpdate+0x168>)
   8204e:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82050:	e002      	b.n	82058 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82052:	4b12      	ldr	r3, [pc, #72]	; (8209c <SystemCoreClockUpdate+0x168>)
   82054:	4a15      	ldr	r2, [pc, #84]	; (820ac <SystemCoreClockUpdate+0x178>)
   82056:	601a      	str	r2, [r3, #0]
		}
		break;
   82058:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8205a:	4b0e      	ldr	r3, [pc, #56]	; (82094 <SystemCoreClockUpdate+0x160>)
   8205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8205e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82062:	2b70      	cmp	r3, #112	; 0x70
   82064:	d108      	bne.n	82078 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82066:	4b0d      	ldr	r3, [pc, #52]	; (8209c <SystemCoreClockUpdate+0x168>)
   82068:	681a      	ldr	r2, [r3, #0]
   8206a:	4b11      	ldr	r3, [pc, #68]	; (820b0 <SystemCoreClockUpdate+0x17c>)
   8206c:	fba3 1302 	umull	r1, r3, r3, r2
   82070:	085a      	lsrs	r2, r3, #1
   82072:	4b0a      	ldr	r3, [pc, #40]	; (8209c <SystemCoreClockUpdate+0x168>)
   82074:	601a      	str	r2, [r3, #0]
   82076:	e009      	b.n	8208c <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82078:	4b08      	ldr	r3, [pc, #32]	; (8209c <SystemCoreClockUpdate+0x168>)
   8207a:	681a      	ldr	r2, [r3, #0]
   8207c:	4b05      	ldr	r3, [pc, #20]	; (82094 <SystemCoreClockUpdate+0x160>)
   8207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82080:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82084:	091b      	lsrs	r3, r3, #4
   82086:	40da      	lsrs	r2, r3
   82088:	4b04      	ldr	r3, [pc, #16]	; (8209c <SystemCoreClockUpdate+0x168>)
   8208a:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   8208c:	46bd      	mov	sp, r7
   8208e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82092:	4770      	bx	lr
   82094:	400e0600 	.word	0x400e0600
   82098:	400e1a10 	.word	0x400e1a10
   8209c:	20070000 	.word	0x20070000
   820a0:	00b71b00 	.word	0x00b71b00
   820a4:	003d0900 	.word	0x003d0900
   820a8:	07ff0000 	.word	0x07ff0000
   820ac:	0e4e1c00 	.word	0x0e4e1c00
   820b0:	aaaaaaab 	.word	0xaaaaaaab

000820b4 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   820b4:	b480      	push	{r7}
   820b6:	b083      	sub	sp, #12
   820b8:	af00      	add	r7, sp, #0
   820ba:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   820bc:	687a      	ldr	r2, [r7, #4]
   820be:	4b1f      	ldr	r3, [pc, #124]	; (8213c <system_init_flash+0x88>)
   820c0:	429a      	cmp	r2, r3
   820c2:	d806      	bhi.n	820d2 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   820c4:	4b1e      	ldr	r3, [pc, #120]	; (82140 <system_init_flash+0x8c>)
   820c6:	2200      	movs	r2, #0
   820c8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   820ca:	4b1e      	ldr	r3, [pc, #120]	; (82144 <system_init_flash+0x90>)
   820cc:	2200      	movs	r2, #0
   820ce:	601a      	str	r2, [r3, #0]
   820d0:	e02e      	b.n	82130 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   820d2:	687a      	ldr	r2, [r7, #4]
   820d4:	4b1c      	ldr	r3, [pc, #112]	; (82148 <system_init_flash+0x94>)
   820d6:	429a      	cmp	r2, r3
   820d8:	d808      	bhi.n	820ec <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   820da:	4b19      	ldr	r3, [pc, #100]	; (82140 <system_init_flash+0x8c>)
   820dc:	f44f 7280 	mov.w	r2, #256	; 0x100
   820e0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   820e2:	4b18      	ldr	r3, [pc, #96]	; (82144 <system_init_flash+0x90>)
   820e4:	f44f 7280 	mov.w	r2, #256	; 0x100
   820e8:	601a      	str	r2, [r3, #0]
   820ea:	e021      	b.n	82130 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   820ec:	687a      	ldr	r2, [r7, #4]
   820ee:	4b17      	ldr	r3, [pc, #92]	; (8214c <system_init_flash+0x98>)
   820f0:	429a      	cmp	r2, r3
   820f2:	d808      	bhi.n	82106 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   820f4:	4b12      	ldr	r3, [pc, #72]	; (82140 <system_init_flash+0x8c>)
   820f6:	f44f 7200 	mov.w	r2, #512	; 0x200
   820fa:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   820fc:	4b11      	ldr	r3, [pc, #68]	; (82144 <system_init_flash+0x90>)
   820fe:	f44f 7200 	mov.w	r2, #512	; 0x200
   82102:	601a      	str	r2, [r3, #0]
   82104:	e014      	b.n	82130 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82106:	687a      	ldr	r2, [r7, #4]
   82108:	4b11      	ldr	r3, [pc, #68]	; (82150 <system_init_flash+0x9c>)
   8210a:	429a      	cmp	r2, r3
   8210c:	d808      	bhi.n	82120 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8210e:	4b0c      	ldr	r3, [pc, #48]	; (82140 <system_init_flash+0x8c>)
   82110:	f44f 7240 	mov.w	r2, #768	; 0x300
   82114:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82116:	4b0b      	ldr	r3, [pc, #44]	; (82144 <system_init_flash+0x90>)
   82118:	f44f 7240 	mov.w	r2, #768	; 0x300
   8211c:	601a      	str	r2, [r3, #0]
   8211e:	e007      	b.n	82130 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82120:	4b07      	ldr	r3, [pc, #28]	; (82140 <system_init_flash+0x8c>)
   82122:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82126:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82128:	4b06      	ldr	r3, [pc, #24]	; (82144 <system_init_flash+0x90>)
   8212a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8212e:	601a      	str	r2, [r3, #0]
	}
}
   82130:	370c      	adds	r7, #12
   82132:	46bd      	mov	sp, r7
   82134:	f85d 7b04 	ldr.w	r7, [sp], #4
   82138:	4770      	bx	lr
   8213a:	bf00      	nop
   8213c:	0157529f 	.word	0x0157529f
   82140:	400e0a00 	.word	0x400e0a00
   82144:	400e0c00 	.word	0x400e0c00
   82148:	0206cc7f 	.word	0x0206cc7f
   8214c:	0328b73f 	.word	0x0328b73f
   82150:	04a62f7f 	.word	0x04a62f7f

00082154 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82154:	b480      	push	{r7}
   82156:	b083      	sub	sp, #12
   82158:	af00      	add	r7, sp, #0
   8215a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8215c:	687b      	ldr	r3, [r7, #4]
   8215e:	f103 0208 	add.w	r2, r3, #8
   82162:	687b      	ldr	r3, [r7, #4]
   82164:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82166:	687b      	ldr	r3, [r7, #4]
   82168:	f04f 32ff 	mov.w	r2, #4294967295
   8216c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8216e:	687b      	ldr	r3, [r7, #4]
   82170:	f103 0208 	add.w	r2, r3, #8
   82174:	687b      	ldr	r3, [r7, #4]
   82176:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82178:	687b      	ldr	r3, [r7, #4]
   8217a:	f103 0208 	add.w	r2, r3, #8
   8217e:	687b      	ldr	r3, [r7, #4]
   82180:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82182:	687b      	ldr	r3, [r7, #4]
   82184:	2200      	movs	r2, #0
   82186:	601a      	str	r2, [r3, #0]
}
   82188:	370c      	adds	r7, #12
   8218a:	46bd      	mov	sp, r7
   8218c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82190:	4770      	bx	lr
   82192:	bf00      	nop

00082194 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   82194:	b480      	push	{r7}
   82196:	b083      	sub	sp, #12
   82198:	af00      	add	r7, sp, #0
   8219a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8219c:	687b      	ldr	r3, [r7, #4]
   8219e:	2200      	movs	r2, #0
   821a0:	611a      	str	r2, [r3, #16]
}
   821a2:	370c      	adds	r7, #12
   821a4:	46bd      	mov	sp, r7
   821a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   821aa:	4770      	bx	lr

000821ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   821ac:	b480      	push	{r7}
   821ae:	b085      	sub	sp, #20
   821b0:	af00      	add	r7, sp, #0
   821b2:	6078      	str	r0, [r7, #4]
   821b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   821b6:	687b      	ldr	r3, [r7, #4]
   821b8:	685b      	ldr	r3, [r3, #4]
   821ba:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   821bc:	683b      	ldr	r3, [r7, #0]
   821be:	68fa      	ldr	r2, [r7, #12]
   821c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   821c2:	68fb      	ldr	r3, [r7, #12]
   821c4:	689a      	ldr	r2, [r3, #8]
   821c6:	683b      	ldr	r3, [r7, #0]
   821c8:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   821ca:	68fb      	ldr	r3, [r7, #12]
   821cc:	689b      	ldr	r3, [r3, #8]
   821ce:	683a      	ldr	r2, [r7, #0]
   821d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   821d2:	68fb      	ldr	r3, [r7, #12]
   821d4:	683a      	ldr	r2, [r7, #0]
   821d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   821d8:	683b      	ldr	r3, [r7, #0]
   821da:	687a      	ldr	r2, [r7, #4]
   821dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   821de:	687b      	ldr	r3, [r7, #4]
   821e0:	681b      	ldr	r3, [r3, #0]
   821e2:	1c5a      	adds	r2, r3, #1
   821e4:	687b      	ldr	r3, [r7, #4]
   821e6:	601a      	str	r2, [r3, #0]
}
   821e8:	3714      	adds	r7, #20
   821ea:	46bd      	mov	sp, r7
   821ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   821f0:	4770      	bx	lr
   821f2:	bf00      	nop

000821f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   821f4:	b480      	push	{r7}
   821f6:	b085      	sub	sp, #20
   821f8:	af00      	add	r7, sp, #0
   821fa:	6078      	str	r0, [r7, #4]
   821fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   821fe:	683b      	ldr	r3, [r7, #0]
   82200:	681b      	ldr	r3, [r3, #0]
   82202:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82204:	68bb      	ldr	r3, [r7, #8]
   82206:	f1b3 3fff 	cmp.w	r3, #4294967295
   8220a:	d103      	bne.n	82214 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8220c:	687b      	ldr	r3, [r7, #4]
   8220e:	691b      	ldr	r3, [r3, #16]
   82210:	60fb      	str	r3, [r7, #12]
   82212:	e00c      	b.n	8222e <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82214:	687b      	ldr	r3, [r7, #4]
   82216:	3308      	adds	r3, #8
   82218:	60fb      	str	r3, [r7, #12]
   8221a:	e002      	b.n	82222 <vListInsert+0x2e>
   8221c:	68fb      	ldr	r3, [r7, #12]
   8221e:	685b      	ldr	r3, [r3, #4]
   82220:	60fb      	str	r3, [r7, #12]
   82222:	68fb      	ldr	r3, [r7, #12]
   82224:	685b      	ldr	r3, [r3, #4]
   82226:	681a      	ldr	r2, [r3, #0]
   82228:	68bb      	ldr	r3, [r7, #8]
   8222a:	429a      	cmp	r2, r3
   8222c:	d9f6      	bls.n	8221c <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8222e:	68fb      	ldr	r3, [r7, #12]
   82230:	685a      	ldr	r2, [r3, #4]
   82232:	683b      	ldr	r3, [r7, #0]
   82234:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82236:	683b      	ldr	r3, [r7, #0]
   82238:	685b      	ldr	r3, [r3, #4]
   8223a:	683a      	ldr	r2, [r7, #0]
   8223c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8223e:	683b      	ldr	r3, [r7, #0]
   82240:	68fa      	ldr	r2, [r7, #12]
   82242:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82244:	68fb      	ldr	r3, [r7, #12]
   82246:	683a      	ldr	r2, [r7, #0]
   82248:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8224a:	683b      	ldr	r3, [r7, #0]
   8224c:	687a      	ldr	r2, [r7, #4]
   8224e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82250:	687b      	ldr	r3, [r7, #4]
   82252:	681b      	ldr	r3, [r3, #0]
   82254:	1c5a      	adds	r2, r3, #1
   82256:	687b      	ldr	r3, [r7, #4]
   82258:	601a      	str	r2, [r3, #0]
}
   8225a:	3714      	adds	r7, #20
   8225c:	46bd      	mov	sp, r7
   8225e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82262:	4770      	bx	lr

00082264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82264:	b480      	push	{r7}
   82266:	b085      	sub	sp, #20
   82268:	af00      	add	r7, sp, #0
   8226a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   8226c:	687b      	ldr	r3, [r7, #4]
   8226e:	691b      	ldr	r3, [r3, #16]
   82270:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82272:	687b      	ldr	r3, [r7, #4]
   82274:	685b      	ldr	r3, [r3, #4]
   82276:	687a      	ldr	r2, [r7, #4]
   82278:	6892      	ldr	r2, [r2, #8]
   8227a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8227c:	687b      	ldr	r3, [r7, #4]
   8227e:	689b      	ldr	r3, [r3, #8]
   82280:	687a      	ldr	r2, [r7, #4]
   82282:	6852      	ldr	r2, [r2, #4]
   82284:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82286:	68fb      	ldr	r3, [r7, #12]
   82288:	685a      	ldr	r2, [r3, #4]
   8228a:	687b      	ldr	r3, [r7, #4]
   8228c:	429a      	cmp	r2, r3
   8228e:	d103      	bne.n	82298 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82290:	687b      	ldr	r3, [r7, #4]
   82292:	689a      	ldr	r2, [r3, #8]
   82294:	68fb      	ldr	r3, [r7, #12]
   82296:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82298:	687b      	ldr	r3, [r7, #4]
   8229a:	2200      	movs	r2, #0
   8229c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   8229e:	68fb      	ldr	r3, [r7, #12]
   822a0:	681b      	ldr	r3, [r3, #0]
   822a2:	1e5a      	subs	r2, r3, #1
   822a4:	68fb      	ldr	r3, [r7, #12]
   822a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   822a8:	68fb      	ldr	r3, [r7, #12]
   822aa:	681b      	ldr	r3, [r3, #0]
}
   822ac:	4618      	mov	r0, r3
   822ae:	3714      	adds	r7, #20
   822b0:	46bd      	mov	sp, r7
   822b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   822b6:	4770      	bx	lr

000822b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   822b8:	b480      	push	{r7}
   822ba:	b085      	sub	sp, #20
   822bc:	af00      	add	r7, sp, #0
   822be:	60f8      	str	r0, [r7, #12]
   822c0:	60b9      	str	r1, [r7, #8]
   822c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   822c4:	68fb      	ldr	r3, [r7, #12]
   822c6:	3b04      	subs	r3, #4
   822c8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   822ca:	68fb      	ldr	r3, [r7, #12]
   822cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   822d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   822d2:	68fb      	ldr	r3, [r7, #12]
   822d4:	3b04      	subs	r3, #4
   822d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   822d8:	68ba      	ldr	r2, [r7, #8]
   822da:	68fb      	ldr	r3, [r7, #12]
   822dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   822de:	68fb      	ldr	r3, [r7, #12]
   822e0:	3b04      	subs	r3, #4
   822e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   822e4:	4a09      	ldr	r2, [pc, #36]	; (8230c <pxPortInitialiseStack+0x54>)
   822e6:	68fb      	ldr	r3, [r7, #12]
   822e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   822ea:	68fb      	ldr	r3, [r7, #12]
   822ec:	3b14      	subs	r3, #20
   822ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   822f0:	687a      	ldr	r2, [r7, #4]
   822f2:	68fb      	ldr	r3, [r7, #12]
   822f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   822f6:	68fb      	ldr	r3, [r7, #12]
   822f8:	3b20      	subs	r3, #32
   822fa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   822fc:	68fb      	ldr	r3, [r7, #12]
}
   822fe:	4618      	mov	r0, r3
   82300:	3714      	adds	r7, #20
   82302:	46bd      	mov	sp, r7
   82304:	f85d 7b04 	ldr.w	r7, [sp], #4
   82308:	4770      	bx	lr
   8230a:	bf00      	nop
   8230c:	00082311 	.word	0x00082311

00082310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   82310:	b580      	push	{r7, lr}
   82312:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82314:	4b05      	ldr	r3, [pc, #20]	; (8232c <prvTaskExitError+0x1c>)
   82316:	681b      	ldr	r3, [r3, #0]
   82318:	f1b3 3fff 	cmp.w	r3, #4294967295
   8231c:	d002      	beq.n	82324 <prvTaskExitError+0x14>
   8231e:	4b04      	ldr	r3, [pc, #16]	; (82330 <prvTaskExitError+0x20>)
   82320:	4798      	blx	r3
   82322:	e7fe      	b.n	82322 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82324:	4b02      	ldr	r3, [pc, #8]	; (82330 <prvTaskExitError+0x20>)
   82326:	4798      	blx	r3
	for( ;; );
   82328:	e7fe      	b.n	82328 <prvTaskExitError+0x18>
   8232a:	bf00      	nop
   8232c:	20070004 	.word	0x20070004
   82330:	000824dd 	.word	0x000824dd

00082334 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82334:	4b07      	ldr	r3, [pc, #28]	; (82354 <pxCurrentTCBConst2>)
   82336:	6819      	ldr	r1, [r3, #0]
   82338:	6808      	ldr	r0, [r1, #0]
   8233a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8233e:	f380 8809 	msr	PSP, r0
   82342:	f3bf 8f6f 	isb	sy
   82346:	f04f 0000 	mov.w	r0, #0
   8234a:	f380 8811 	msr	BASEPRI, r0
   8234e:	f04e 0e0d 	orr.w	lr, lr, #13
   82352:	4770      	bx	lr

00082354 <pxCurrentTCBConst2>:
   82354:	2007a500 	.word	0x2007a500

00082358 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   82358:	4806      	ldr	r0, [pc, #24]	; (82374 <prvPortStartFirstTask+0x1c>)
   8235a:	6800      	ldr	r0, [r0, #0]
   8235c:	6800      	ldr	r0, [r0, #0]
   8235e:	f380 8808 	msr	MSP, r0
   82362:	b662      	cpsie	i
   82364:	b661      	cpsie	f
   82366:	f3bf 8f4f 	dsb	sy
   8236a:	f3bf 8f6f 	isb	sy
   8236e:	df00      	svc	0
   82370:	bf00      	nop
   82372:	0000      	.short	0x0000
   82374:	e000ed08 	.word	0xe000ed08

00082378 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   82378:	b580      	push	{r7, lr}
   8237a:	b084      	sub	sp, #16
   8237c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   8237e:	4b28      	ldr	r3, [pc, #160]	; (82420 <xPortStartScheduler+0xa8>)
   82380:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   82382:	68fb      	ldr	r3, [r7, #12]
   82384:	781b      	ldrb	r3, [r3, #0]
   82386:	b2db      	uxtb	r3, r3
   82388:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   8238a:	68fb      	ldr	r3, [r7, #12]
   8238c:	22ff      	movs	r2, #255	; 0xff
   8238e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   82390:	68fb      	ldr	r3, [r7, #12]
   82392:	781b      	ldrb	r3, [r3, #0]
   82394:	b2db      	uxtb	r3, r3
   82396:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   82398:	79fb      	ldrb	r3, [r7, #7]
   8239a:	b2db      	uxtb	r3, r3
   8239c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   823a0:	b2da      	uxtb	r2, r3
   823a2:	4b20      	ldr	r3, [pc, #128]	; (82424 <xPortStartScheduler+0xac>)
   823a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   823a6:	4b20      	ldr	r3, [pc, #128]	; (82428 <xPortStartScheduler+0xb0>)
   823a8:	2207      	movs	r2, #7
   823aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   823ac:	e009      	b.n	823c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   823ae:	4b1e      	ldr	r3, [pc, #120]	; (82428 <xPortStartScheduler+0xb0>)
   823b0:	681b      	ldr	r3, [r3, #0]
   823b2:	1e5a      	subs	r2, r3, #1
   823b4:	4b1c      	ldr	r3, [pc, #112]	; (82428 <xPortStartScheduler+0xb0>)
   823b6:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   823b8:	79fb      	ldrb	r3, [r7, #7]
   823ba:	b2db      	uxtb	r3, r3
   823bc:	005b      	lsls	r3, r3, #1
   823be:	b2db      	uxtb	r3, r3
   823c0:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   823c2:	79fb      	ldrb	r3, [r7, #7]
   823c4:	b2db      	uxtb	r3, r3
   823c6:	b2db      	uxtb	r3, r3
   823c8:	b25b      	sxtb	r3, r3
   823ca:	2b00      	cmp	r3, #0
   823cc:	dbef      	blt.n	823ae <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   823ce:	4b16      	ldr	r3, [pc, #88]	; (82428 <xPortStartScheduler+0xb0>)
   823d0:	681b      	ldr	r3, [r3, #0]
   823d2:	021a      	lsls	r2, r3, #8
   823d4:	4b14      	ldr	r3, [pc, #80]	; (82428 <xPortStartScheduler+0xb0>)
   823d6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   823d8:	4b13      	ldr	r3, [pc, #76]	; (82428 <xPortStartScheduler+0xb0>)
   823da:	681b      	ldr	r3, [r3, #0]
   823dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   823e0:	4b11      	ldr	r3, [pc, #68]	; (82428 <xPortStartScheduler+0xb0>)
   823e2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   823e4:	68bb      	ldr	r3, [r7, #8]
   823e6:	b2da      	uxtb	r2, r3
   823e8:	68fb      	ldr	r3, [r7, #12]
   823ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   823ec:	4b0f      	ldr	r3, [pc, #60]	; (8242c <xPortStartScheduler+0xb4>)
   823ee:	4a0f      	ldr	r2, [pc, #60]	; (8242c <xPortStartScheduler+0xb4>)
   823f0:	6812      	ldr	r2, [r2, #0]
   823f2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   823f6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   823f8:	4b0c      	ldr	r3, [pc, #48]	; (8242c <xPortStartScheduler+0xb4>)
   823fa:	4a0c      	ldr	r2, [pc, #48]	; (8242c <xPortStartScheduler+0xb4>)
   823fc:	6812      	ldr	r2, [r2, #0]
   823fe:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   82402:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82404:	4b0a      	ldr	r3, [pc, #40]	; (82430 <xPortStartScheduler+0xb8>)
   82406:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82408:	4b0a      	ldr	r3, [pc, #40]	; (82434 <xPortStartScheduler+0xbc>)
   8240a:	2200      	movs	r2, #0
   8240c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8240e:	4b0a      	ldr	r3, [pc, #40]	; (82438 <xPortStartScheduler+0xc0>)
   82410:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   82412:	4b0a      	ldr	r3, [pc, #40]	; (8243c <xPortStartScheduler+0xc4>)
   82414:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   82416:	2300      	movs	r3, #0
}
   82418:	4618      	mov	r0, r3
   8241a:	3710      	adds	r7, #16
   8241c:	46bd      	mov	sp, r7
   8241e:	bd80      	pop	{r7, pc}
   82420:	e000e400 	.word	0xe000e400
   82424:	200704e0 	.word	0x200704e0
   82428:	200704e4 	.word	0x200704e4
   8242c:	e000ed20 	.word	0xe000ed20
   82430:	00082571 	.word	0x00082571
   82434:	20070004 	.word	0x20070004
   82438:	00082359 	.word	0x00082359
   8243c:	00082311 	.word	0x00082311

00082440 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   82440:	b480      	push	{r7}
   82442:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82444:	4b05      	ldr	r3, [pc, #20]	; (8245c <vPortYield+0x1c>)
   82446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8244a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   8244c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82450:	f3bf 8f6f 	isb	sy
}
   82454:	46bd      	mov	sp, r7
   82456:	f85d 7b04 	ldr.w	r7, [sp], #4
   8245a:	4770      	bx	lr
   8245c:	e000ed04 	.word	0xe000ed04

00082460 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82460:	b580      	push	{r7, lr}
   82462:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   82464:	4b0c      	ldr	r3, [pc, #48]	; (82498 <vPortEnterCritical+0x38>)
   82466:	4798      	blx	r3
	uxCriticalNesting++;
   82468:	4b0c      	ldr	r3, [pc, #48]	; (8249c <vPortEnterCritical+0x3c>)
   8246a:	681b      	ldr	r3, [r3, #0]
   8246c:	1c5a      	adds	r2, r3, #1
   8246e:	4b0b      	ldr	r3, [pc, #44]	; (8249c <vPortEnterCritical+0x3c>)
   82470:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   82472:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82476:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8247a:	4b08      	ldr	r3, [pc, #32]	; (8249c <vPortEnterCritical+0x3c>)
   8247c:	681b      	ldr	r3, [r3, #0]
   8247e:	2b01      	cmp	r3, #1
   82480:	d108      	bne.n	82494 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   82482:	4b07      	ldr	r3, [pc, #28]	; (824a0 <vPortEnterCritical+0x40>)
   82484:	681b      	ldr	r3, [r3, #0]
   82486:	f003 031f 	and.w	r3, r3, #31
   8248a:	2b00      	cmp	r3, #0
   8248c:	d002      	beq.n	82494 <vPortEnterCritical+0x34>
   8248e:	4b02      	ldr	r3, [pc, #8]	; (82498 <vPortEnterCritical+0x38>)
   82490:	4798      	blx	r3
   82492:	e7fe      	b.n	82492 <vPortEnterCritical+0x32>
	}
}
   82494:	bd80      	pop	{r7, pc}
   82496:	bf00      	nop
   82498:	000824dd 	.word	0x000824dd
   8249c:	20070004 	.word	0x20070004
   824a0:	e000ed04 	.word	0xe000ed04

000824a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   824a4:	b580      	push	{r7, lr}
   824a6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   824a8:	4b09      	ldr	r3, [pc, #36]	; (824d0 <vPortExitCritical+0x2c>)
   824aa:	681b      	ldr	r3, [r3, #0]
   824ac:	2b00      	cmp	r3, #0
   824ae:	d102      	bne.n	824b6 <vPortExitCritical+0x12>
   824b0:	4b08      	ldr	r3, [pc, #32]	; (824d4 <vPortExitCritical+0x30>)
   824b2:	4798      	blx	r3
   824b4:	e7fe      	b.n	824b4 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   824b6:	4b06      	ldr	r3, [pc, #24]	; (824d0 <vPortExitCritical+0x2c>)
   824b8:	681b      	ldr	r3, [r3, #0]
   824ba:	1e5a      	subs	r2, r3, #1
   824bc:	4b04      	ldr	r3, [pc, #16]	; (824d0 <vPortExitCritical+0x2c>)
   824be:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   824c0:	4b03      	ldr	r3, [pc, #12]	; (824d0 <vPortExitCritical+0x2c>)
   824c2:	681b      	ldr	r3, [r3, #0]
   824c4:	2b00      	cmp	r3, #0
   824c6:	d102      	bne.n	824ce <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   824c8:	2000      	movs	r0, #0
   824ca:	4b03      	ldr	r3, [pc, #12]	; (824d8 <vPortExitCritical+0x34>)
   824cc:	4798      	blx	r3
	}
}
   824ce:	bd80      	pop	{r7, pc}
   824d0:	20070004 	.word	0x20070004
   824d4:	000824dd 	.word	0x000824dd
   824d8:	000824f1 	.word	0x000824f1

000824dc <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   824dc:	f3ef 8011 	mrs	r0, BASEPRI
   824e0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   824e4:	f381 8811 	msr	BASEPRI, r1
   824e8:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   824ea:	2300      	movs	r3, #0
}
   824ec:	4618      	mov	r0, r3
   824ee:	bf00      	nop

000824f0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   824f0:	f380 8811 	msr	BASEPRI, r0
   824f4:	4770      	bx	lr
   824f6:	bf00      	nop

000824f8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   824f8:	f3ef 8009 	mrs	r0, PSP
   824fc:	f3bf 8f6f 	isb	sy
   82500:	4b0d      	ldr	r3, [pc, #52]	; (82538 <pxCurrentTCBConst>)
   82502:	681a      	ldr	r2, [r3, #0]
   82504:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82508:	6010      	str	r0, [r2, #0]
   8250a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8250e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82512:	f380 8811 	msr	BASEPRI, r0
   82516:	f001 f98d 	bl	83834 <vTaskSwitchContext>
   8251a:	f04f 0000 	mov.w	r0, #0
   8251e:	f380 8811 	msr	BASEPRI, r0
   82522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82526:	6819      	ldr	r1, [r3, #0]
   82528:	6808      	ldr	r0, [r1, #0]
   8252a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8252e:	f380 8809 	msr	PSP, r0
   82532:	f3bf 8f6f 	isb	sy
   82536:	4770      	bx	lr

00082538 <pxCurrentTCBConst>:
   82538:	2007a500 	.word	0x2007a500

0008253c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   8253c:	b580      	push	{r7, lr}
   8253e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82540:	4b07      	ldr	r3, [pc, #28]	; (82560 <SysTick_Handler+0x24>)
   82542:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82544:	4b07      	ldr	r3, [pc, #28]	; (82564 <SysTick_Handler+0x28>)
   82546:	4798      	blx	r3
   82548:	4603      	mov	r3, r0
   8254a:	2b00      	cmp	r3, #0
   8254c:	d003      	beq.n	82556 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8254e:	4b06      	ldr	r3, [pc, #24]	; (82568 <SysTick_Handler+0x2c>)
   82550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82554:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   82556:	2000      	movs	r0, #0
   82558:	4b04      	ldr	r3, [pc, #16]	; (8256c <SysTick_Handler+0x30>)
   8255a:	4798      	blx	r3
}
   8255c:	bd80      	pop	{r7, pc}
   8255e:	bf00      	nop
   82560:	000824dd 	.word	0x000824dd
   82564:	000836b9 	.word	0x000836b9
   82568:	e000ed04 	.word	0xe000ed04
   8256c:	000824f1 	.word	0x000824f1

00082570 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   82570:	b480      	push	{r7}
   82572:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   82574:	4b07      	ldr	r3, [pc, #28]	; (82594 <vPortSetupTimerInterrupt+0x24>)
   82576:	4a08      	ldr	r2, [pc, #32]	; (82598 <vPortSetupTimerInterrupt+0x28>)
   82578:	6811      	ldr	r1, [r2, #0]
   8257a:	4a08      	ldr	r2, [pc, #32]	; (8259c <vPortSetupTimerInterrupt+0x2c>)
   8257c:	fba2 0201 	umull	r0, r2, r2, r1
   82580:	08d2      	lsrs	r2, r2, #3
   82582:	3a01      	subs	r2, #1
   82584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   82586:	4b06      	ldr	r3, [pc, #24]	; (825a0 <vPortSetupTimerInterrupt+0x30>)
   82588:	2207      	movs	r2, #7
   8258a:	601a      	str	r2, [r3, #0]
}
   8258c:	46bd      	mov	sp, r7
   8258e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82592:	4770      	bx	lr
   82594:	e000e014 	.word	0xe000e014
   82598:	20070000 	.word	0x20070000
   8259c:	cccccccd 	.word	0xcccccccd
   825a0:	e000e010 	.word	0xe000e010

000825a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   825a4:	b580      	push	{r7, lr}
   825a6:	b082      	sub	sp, #8
   825a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   825aa:	f3ef 8305 	mrs	r3, IPSR
   825ae:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   825b0:	687b      	ldr	r3, [r7, #4]
   825b2:	2b0f      	cmp	r3, #15
   825b4:	d90c      	bls.n	825d0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   825b6:	4a0d      	ldr	r2, [pc, #52]	; (825ec <vPortValidateInterruptPriority+0x48>)
   825b8:	687b      	ldr	r3, [r7, #4]
   825ba:	4413      	add	r3, r2
   825bc:	781b      	ldrb	r3, [r3, #0]
   825be:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   825c0:	4b0b      	ldr	r3, [pc, #44]	; (825f0 <vPortValidateInterruptPriority+0x4c>)
   825c2:	781b      	ldrb	r3, [r3, #0]
   825c4:	78fa      	ldrb	r2, [r7, #3]
   825c6:	429a      	cmp	r2, r3
   825c8:	d202      	bcs.n	825d0 <vPortValidateInterruptPriority+0x2c>
   825ca:	4b0a      	ldr	r3, [pc, #40]	; (825f4 <vPortValidateInterruptPriority+0x50>)
   825cc:	4798      	blx	r3
   825ce:	e7fe      	b.n	825ce <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   825d0:	4b09      	ldr	r3, [pc, #36]	; (825f8 <vPortValidateInterruptPriority+0x54>)
   825d2:	681b      	ldr	r3, [r3, #0]
   825d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   825d8:	4b08      	ldr	r3, [pc, #32]	; (825fc <vPortValidateInterruptPriority+0x58>)
   825da:	681b      	ldr	r3, [r3, #0]
   825dc:	429a      	cmp	r2, r3
   825de:	d902      	bls.n	825e6 <vPortValidateInterruptPriority+0x42>
   825e0:	4b04      	ldr	r3, [pc, #16]	; (825f4 <vPortValidateInterruptPriority+0x50>)
   825e2:	4798      	blx	r3
   825e4:	e7fe      	b.n	825e4 <vPortValidateInterruptPriority+0x40>
	}
   825e6:	3708      	adds	r7, #8
   825e8:	46bd      	mov	sp, r7
   825ea:	bd80      	pop	{r7, pc}
   825ec:	e000e3f0 	.word	0xe000e3f0
   825f0:	200704e0 	.word	0x200704e0
   825f4:	000824dd 	.word	0x000824dd
   825f8:	e000ed0c 	.word	0xe000ed0c
   825fc:	200704e4 	.word	0x200704e4

00082600 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   82600:	b580      	push	{r7, lr}
   82602:	b086      	sub	sp, #24
   82604:	af00      	add	r7, sp, #0
   82606:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82608:	2300      	movs	r3, #0
   8260a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   8260c:	4b4f      	ldr	r3, [pc, #316]	; (8274c <pvPortMalloc+0x14c>)
   8260e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   82610:	4b4f      	ldr	r3, [pc, #316]	; (82750 <pvPortMalloc+0x150>)
   82612:	681b      	ldr	r3, [r3, #0]
   82614:	2b00      	cmp	r3, #0
   82616:	d101      	bne.n	8261c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   82618:	4b4e      	ldr	r3, [pc, #312]	; (82754 <pvPortMalloc+0x154>)
   8261a:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   8261c:	4b4e      	ldr	r3, [pc, #312]	; (82758 <pvPortMalloc+0x158>)
   8261e:	681a      	ldr	r2, [r3, #0]
   82620:	687b      	ldr	r3, [r7, #4]
   82622:	4013      	ands	r3, r2
   82624:	2b00      	cmp	r3, #0
   82626:	d17d      	bne.n	82724 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   82628:	687b      	ldr	r3, [r7, #4]
   8262a:	2b00      	cmp	r3, #0
   8262c:	d015      	beq.n	8265a <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   8262e:	2308      	movs	r3, #8
   82630:	687a      	ldr	r2, [r7, #4]
   82632:	4413      	add	r3, r2
   82634:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   82636:	687b      	ldr	r3, [r7, #4]
   82638:	f003 0307 	and.w	r3, r3, #7
   8263c:	2b00      	cmp	r3, #0
   8263e:	d00c      	beq.n	8265a <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   82640:	687b      	ldr	r3, [r7, #4]
   82642:	f023 0307 	bic.w	r3, r3, #7
   82646:	3308      	adds	r3, #8
   82648:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   8264a:	687b      	ldr	r3, [r7, #4]
   8264c:	f003 0307 	and.w	r3, r3, #7
   82650:	2b00      	cmp	r3, #0
   82652:	d002      	beq.n	8265a <pvPortMalloc+0x5a>
   82654:	4b41      	ldr	r3, [pc, #260]	; (8275c <pvPortMalloc+0x15c>)
   82656:	4798      	blx	r3
   82658:	e7fe      	b.n	82658 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   8265a:	687b      	ldr	r3, [r7, #4]
   8265c:	2b00      	cmp	r3, #0
   8265e:	d061      	beq.n	82724 <pvPortMalloc+0x124>
   82660:	4b3f      	ldr	r3, [pc, #252]	; (82760 <pvPortMalloc+0x160>)
   82662:	681b      	ldr	r3, [r3, #0]
   82664:	687a      	ldr	r2, [r7, #4]
   82666:	429a      	cmp	r2, r3
   82668:	d85c      	bhi.n	82724 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   8266a:	4b3e      	ldr	r3, [pc, #248]	; (82764 <pvPortMalloc+0x164>)
   8266c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   8266e:	4b3d      	ldr	r3, [pc, #244]	; (82764 <pvPortMalloc+0x164>)
   82670:	681b      	ldr	r3, [r3, #0]
   82672:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82674:	e004      	b.n	82680 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   82676:	697b      	ldr	r3, [r7, #20]
   82678:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   8267a:	697b      	ldr	r3, [r7, #20]
   8267c:	681b      	ldr	r3, [r3, #0]
   8267e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82680:	697b      	ldr	r3, [r7, #20]
   82682:	685a      	ldr	r2, [r3, #4]
   82684:	687b      	ldr	r3, [r7, #4]
   82686:	429a      	cmp	r2, r3
   82688:	d203      	bcs.n	82692 <pvPortMalloc+0x92>
   8268a:	697b      	ldr	r3, [r7, #20]
   8268c:	681b      	ldr	r3, [r3, #0]
   8268e:	2b00      	cmp	r3, #0
   82690:	d1f1      	bne.n	82676 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   82692:	4b2f      	ldr	r3, [pc, #188]	; (82750 <pvPortMalloc+0x150>)
   82694:	681b      	ldr	r3, [r3, #0]
   82696:	697a      	ldr	r2, [r7, #20]
   82698:	429a      	cmp	r2, r3
   8269a:	d043      	beq.n	82724 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   8269c:	693b      	ldr	r3, [r7, #16]
   8269e:	681a      	ldr	r2, [r3, #0]
   826a0:	2308      	movs	r3, #8
   826a2:	4413      	add	r3, r2
   826a4:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   826a6:	697b      	ldr	r3, [r7, #20]
   826a8:	681a      	ldr	r2, [r3, #0]
   826aa:	693b      	ldr	r3, [r7, #16]
   826ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   826ae:	697b      	ldr	r3, [r7, #20]
   826b0:	685a      	ldr	r2, [r3, #4]
   826b2:	687b      	ldr	r3, [r7, #4]
   826b4:	1ad2      	subs	r2, r2, r3
   826b6:	2308      	movs	r3, #8
   826b8:	005b      	lsls	r3, r3, #1
   826ba:	429a      	cmp	r2, r3
   826bc:	d917      	bls.n	826ee <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   826be:	697a      	ldr	r2, [r7, #20]
   826c0:	687b      	ldr	r3, [r7, #4]
   826c2:	4413      	add	r3, r2
   826c4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   826c6:	68bb      	ldr	r3, [r7, #8]
   826c8:	f003 0307 	and.w	r3, r3, #7
   826cc:	2b00      	cmp	r3, #0
   826ce:	d002      	beq.n	826d6 <pvPortMalloc+0xd6>
   826d0:	4b22      	ldr	r3, [pc, #136]	; (8275c <pvPortMalloc+0x15c>)
   826d2:	4798      	blx	r3
   826d4:	e7fe      	b.n	826d4 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   826d6:	697b      	ldr	r3, [r7, #20]
   826d8:	685a      	ldr	r2, [r3, #4]
   826da:	687b      	ldr	r3, [r7, #4]
   826dc:	1ad2      	subs	r2, r2, r3
   826de:	68bb      	ldr	r3, [r7, #8]
   826e0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   826e2:	697b      	ldr	r3, [r7, #20]
   826e4:	687a      	ldr	r2, [r7, #4]
   826e6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   826e8:	68b8      	ldr	r0, [r7, #8]
   826ea:	4b1f      	ldr	r3, [pc, #124]	; (82768 <pvPortMalloc+0x168>)
   826ec:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   826ee:	4b1c      	ldr	r3, [pc, #112]	; (82760 <pvPortMalloc+0x160>)
   826f0:	681a      	ldr	r2, [r3, #0]
   826f2:	697b      	ldr	r3, [r7, #20]
   826f4:	685b      	ldr	r3, [r3, #4]
   826f6:	1ad2      	subs	r2, r2, r3
   826f8:	4b19      	ldr	r3, [pc, #100]	; (82760 <pvPortMalloc+0x160>)
   826fa:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   826fc:	4b18      	ldr	r3, [pc, #96]	; (82760 <pvPortMalloc+0x160>)
   826fe:	681a      	ldr	r2, [r3, #0]
   82700:	4b1a      	ldr	r3, [pc, #104]	; (8276c <pvPortMalloc+0x16c>)
   82702:	681b      	ldr	r3, [r3, #0]
   82704:	429a      	cmp	r2, r3
   82706:	d203      	bcs.n	82710 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   82708:	4b15      	ldr	r3, [pc, #84]	; (82760 <pvPortMalloc+0x160>)
   8270a:	681a      	ldr	r2, [r3, #0]
   8270c:	4b17      	ldr	r3, [pc, #92]	; (8276c <pvPortMalloc+0x16c>)
   8270e:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   82710:	697b      	ldr	r3, [r7, #20]
   82712:	685a      	ldr	r2, [r3, #4]
   82714:	4b10      	ldr	r3, [pc, #64]	; (82758 <pvPortMalloc+0x158>)
   82716:	681b      	ldr	r3, [r3, #0]
   82718:	431a      	orrs	r2, r3
   8271a:	697b      	ldr	r3, [r7, #20]
   8271c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   8271e:	697b      	ldr	r3, [r7, #20]
   82720:	2200      	movs	r2, #0
   82722:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   82724:	4b12      	ldr	r3, [pc, #72]	; (82770 <pvPortMalloc+0x170>)
   82726:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   82728:	68fb      	ldr	r3, [r7, #12]
   8272a:	2b00      	cmp	r3, #0
   8272c:	d101      	bne.n	82732 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   8272e:	4b11      	ldr	r3, [pc, #68]	; (82774 <pvPortMalloc+0x174>)
   82730:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   82732:	68fb      	ldr	r3, [r7, #12]
   82734:	f003 0307 	and.w	r3, r3, #7
   82738:	2b00      	cmp	r3, #0
   8273a:	d002      	beq.n	82742 <pvPortMalloc+0x142>
   8273c:	4b07      	ldr	r3, [pc, #28]	; (8275c <pvPortMalloc+0x15c>)
   8273e:	4798      	blx	r3
   82740:	e7fe      	b.n	82740 <pvPortMalloc+0x140>
	return pvReturn;
   82742:	68fb      	ldr	r3, [r7, #12]
}
   82744:	4618      	mov	r0, r3
   82746:	3718      	adds	r7, #24
   82748:	46bd      	mov	sp, r7
   8274a:	bd80      	pop	{r7, pc}
   8274c:	0008354d 	.word	0x0008354d
   82750:	2007a4f0 	.word	0x2007a4f0
   82754:	0008281d 	.word	0x0008281d
   82758:	2007a4fc 	.word	0x2007a4fc
   8275c:	000824dd 	.word	0x000824dd
   82760:	2007a4f4 	.word	0x2007a4f4
   82764:	2007a4e8 	.word	0x2007a4e8
   82768:	000828e1 	.word	0x000828e1
   8276c:	2007a4f8 	.word	0x2007a4f8
   82770:	00083569 	.word	0x00083569
   82774:	00084ff5 	.word	0x00084ff5

00082778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   82778:	b580      	push	{r7, lr}
   8277a:	b084      	sub	sp, #16
   8277c:	af00      	add	r7, sp, #0
   8277e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   82780:	687b      	ldr	r3, [r7, #4]
   82782:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   82784:	687b      	ldr	r3, [r7, #4]
   82786:	2b00      	cmp	r3, #0
   82788:	d038      	beq.n	827fc <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   8278a:	2308      	movs	r3, #8
   8278c:	425b      	negs	r3, r3
   8278e:	68fa      	ldr	r2, [r7, #12]
   82790:	4413      	add	r3, r2
   82792:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   82794:	68fb      	ldr	r3, [r7, #12]
   82796:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   82798:	68bb      	ldr	r3, [r7, #8]
   8279a:	685a      	ldr	r2, [r3, #4]
   8279c:	4b19      	ldr	r3, [pc, #100]	; (82804 <vPortFree+0x8c>)
   8279e:	681b      	ldr	r3, [r3, #0]
   827a0:	4013      	ands	r3, r2
   827a2:	2b00      	cmp	r3, #0
   827a4:	d102      	bne.n	827ac <vPortFree+0x34>
   827a6:	4b18      	ldr	r3, [pc, #96]	; (82808 <vPortFree+0x90>)
   827a8:	4798      	blx	r3
   827aa:	e7fe      	b.n	827aa <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   827ac:	68bb      	ldr	r3, [r7, #8]
   827ae:	681b      	ldr	r3, [r3, #0]
   827b0:	2b00      	cmp	r3, #0
   827b2:	d002      	beq.n	827ba <vPortFree+0x42>
   827b4:	4b14      	ldr	r3, [pc, #80]	; (82808 <vPortFree+0x90>)
   827b6:	4798      	blx	r3
   827b8:	e7fe      	b.n	827b8 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   827ba:	68bb      	ldr	r3, [r7, #8]
   827bc:	685a      	ldr	r2, [r3, #4]
   827be:	4b11      	ldr	r3, [pc, #68]	; (82804 <vPortFree+0x8c>)
   827c0:	681b      	ldr	r3, [r3, #0]
   827c2:	4013      	ands	r3, r2
   827c4:	2b00      	cmp	r3, #0
   827c6:	d019      	beq.n	827fc <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   827c8:	68bb      	ldr	r3, [r7, #8]
   827ca:	681b      	ldr	r3, [r3, #0]
   827cc:	2b00      	cmp	r3, #0
   827ce:	d115      	bne.n	827fc <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   827d0:	68bb      	ldr	r3, [r7, #8]
   827d2:	685a      	ldr	r2, [r3, #4]
   827d4:	4b0b      	ldr	r3, [pc, #44]	; (82804 <vPortFree+0x8c>)
   827d6:	681b      	ldr	r3, [r3, #0]
   827d8:	43db      	mvns	r3, r3
   827da:	401a      	ands	r2, r3
   827dc:	68bb      	ldr	r3, [r7, #8]
   827de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   827e0:	4b0a      	ldr	r3, [pc, #40]	; (8280c <vPortFree+0x94>)
   827e2:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   827e4:	68bb      	ldr	r3, [r7, #8]
   827e6:	685a      	ldr	r2, [r3, #4]
   827e8:	4b09      	ldr	r3, [pc, #36]	; (82810 <vPortFree+0x98>)
   827ea:	681b      	ldr	r3, [r3, #0]
   827ec:	441a      	add	r2, r3
   827ee:	4b08      	ldr	r3, [pc, #32]	; (82810 <vPortFree+0x98>)
   827f0:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   827f2:	68b8      	ldr	r0, [r7, #8]
   827f4:	4b07      	ldr	r3, [pc, #28]	; (82814 <vPortFree+0x9c>)
   827f6:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   827f8:	4b07      	ldr	r3, [pc, #28]	; (82818 <vPortFree+0xa0>)
   827fa:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   827fc:	3710      	adds	r7, #16
   827fe:	46bd      	mov	sp, r7
   82800:	bd80      	pop	{r7, pc}
   82802:	bf00      	nop
   82804:	2007a4fc 	.word	0x2007a4fc
   82808:	000824dd 	.word	0x000824dd
   8280c:	0008354d 	.word	0x0008354d
   82810:	2007a4f4 	.word	0x2007a4f4
   82814:	000828e1 	.word	0x000828e1
   82818:	00083569 	.word	0x00083569

0008281c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   8281c:	b480      	push	{r7}
   8281e:	b085      	sub	sp, #20
   82820:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   82822:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   82826:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   82828:	4b27      	ldr	r3, [pc, #156]	; (828c8 <prvHeapInit+0xac>)
   8282a:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   8282c:	68fb      	ldr	r3, [r7, #12]
   8282e:	f003 0307 	and.w	r3, r3, #7
   82832:	2b00      	cmp	r3, #0
   82834:	d00c      	beq.n	82850 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   82836:	68fb      	ldr	r3, [r7, #12]
   82838:	3307      	adds	r3, #7
   8283a:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   8283c:	68fb      	ldr	r3, [r7, #12]
   8283e:	f023 0307 	bic.w	r3, r3, #7
   82842:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   82844:	68ba      	ldr	r2, [r7, #8]
   82846:	68fb      	ldr	r3, [r7, #12]
   82848:	1ad2      	subs	r2, r2, r3
   8284a:	4b1f      	ldr	r3, [pc, #124]	; (828c8 <prvHeapInit+0xac>)
   8284c:	4413      	add	r3, r2
   8284e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   82850:	68fb      	ldr	r3, [r7, #12]
   82852:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   82854:	4b1d      	ldr	r3, [pc, #116]	; (828cc <prvHeapInit+0xb0>)
   82856:	687a      	ldr	r2, [r7, #4]
   82858:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8285a:	4b1c      	ldr	r3, [pc, #112]	; (828cc <prvHeapInit+0xb0>)
   8285c:	2200      	movs	r2, #0
   8285e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   82860:	687a      	ldr	r2, [r7, #4]
   82862:	68bb      	ldr	r3, [r7, #8]
   82864:	4413      	add	r3, r2
   82866:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   82868:	2308      	movs	r3, #8
   8286a:	68fa      	ldr	r2, [r7, #12]
   8286c:	1ad3      	subs	r3, r2, r3
   8286e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   82870:	68fb      	ldr	r3, [r7, #12]
   82872:	f023 0307 	bic.w	r3, r3, #7
   82876:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   82878:	68fa      	ldr	r2, [r7, #12]
   8287a:	4b15      	ldr	r3, [pc, #84]	; (828d0 <prvHeapInit+0xb4>)
   8287c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   8287e:	4b14      	ldr	r3, [pc, #80]	; (828d0 <prvHeapInit+0xb4>)
   82880:	681b      	ldr	r3, [r3, #0]
   82882:	2200      	movs	r2, #0
   82884:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   82886:	4b12      	ldr	r3, [pc, #72]	; (828d0 <prvHeapInit+0xb4>)
   82888:	681b      	ldr	r3, [r3, #0]
   8288a:	2200      	movs	r2, #0
   8288c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   8288e:	687b      	ldr	r3, [r7, #4]
   82890:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   82892:	683b      	ldr	r3, [r7, #0]
   82894:	68fa      	ldr	r2, [r7, #12]
   82896:	1ad2      	subs	r2, r2, r3
   82898:	683b      	ldr	r3, [r7, #0]
   8289a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8289c:	4b0c      	ldr	r3, [pc, #48]	; (828d0 <prvHeapInit+0xb4>)
   8289e:	681a      	ldr	r2, [r3, #0]
   828a0:	683b      	ldr	r3, [r7, #0]
   828a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   828a4:	683b      	ldr	r3, [r7, #0]
   828a6:	685a      	ldr	r2, [r3, #4]
   828a8:	4b0a      	ldr	r3, [pc, #40]	; (828d4 <prvHeapInit+0xb8>)
   828aa:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   828ac:	683b      	ldr	r3, [r7, #0]
   828ae:	685a      	ldr	r2, [r3, #4]
   828b0:	4b09      	ldr	r3, [pc, #36]	; (828d8 <prvHeapInit+0xbc>)
   828b2:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   828b4:	4b09      	ldr	r3, [pc, #36]	; (828dc <prvHeapInit+0xc0>)
   828b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   828ba:	601a      	str	r2, [r3, #0]
}
   828bc:	3714      	adds	r7, #20
   828be:	46bd      	mov	sp, r7
   828c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   828c4:	4770      	bx	lr
   828c6:	bf00      	nop
   828c8:	200704e8 	.word	0x200704e8
   828cc:	2007a4e8 	.word	0x2007a4e8
   828d0:	2007a4f0 	.word	0x2007a4f0
   828d4:	2007a4f8 	.word	0x2007a4f8
   828d8:	2007a4f4 	.word	0x2007a4f4
   828dc:	2007a4fc 	.word	0x2007a4fc

000828e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   828e0:	b480      	push	{r7}
   828e2:	b085      	sub	sp, #20
   828e4:	af00      	add	r7, sp, #0
   828e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   828e8:	4b27      	ldr	r3, [pc, #156]	; (82988 <prvInsertBlockIntoFreeList+0xa8>)
   828ea:	60fb      	str	r3, [r7, #12]
   828ec:	e002      	b.n	828f4 <prvInsertBlockIntoFreeList+0x14>
   828ee:	68fb      	ldr	r3, [r7, #12]
   828f0:	681b      	ldr	r3, [r3, #0]
   828f2:	60fb      	str	r3, [r7, #12]
   828f4:	68fb      	ldr	r3, [r7, #12]
   828f6:	681a      	ldr	r2, [r3, #0]
   828f8:	687b      	ldr	r3, [r7, #4]
   828fa:	429a      	cmp	r2, r3
   828fc:	d3f7      	bcc.n	828ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   828fe:	68fb      	ldr	r3, [r7, #12]
   82900:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   82902:	68fb      	ldr	r3, [r7, #12]
   82904:	685b      	ldr	r3, [r3, #4]
   82906:	68ba      	ldr	r2, [r7, #8]
   82908:	441a      	add	r2, r3
   8290a:	687b      	ldr	r3, [r7, #4]
   8290c:	429a      	cmp	r2, r3
   8290e:	d108      	bne.n	82922 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   82910:	68fb      	ldr	r3, [r7, #12]
   82912:	685a      	ldr	r2, [r3, #4]
   82914:	687b      	ldr	r3, [r7, #4]
   82916:	685b      	ldr	r3, [r3, #4]
   82918:	441a      	add	r2, r3
   8291a:	68fb      	ldr	r3, [r7, #12]
   8291c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   8291e:	68fb      	ldr	r3, [r7, #12]
   82920:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   82922:	687b      	ldr	r3, [r7, #4]
   82924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   82926:	687b      	ldr	r3, [r7, #4]
   82928:	685b      	ldr	r3, [r3, #4]
   8292a:	68ba      	ldr	r2, [r7, #8]
   8292c:	441a      	add	r2, r3
   8292e:	68fb      	ldr	r3, [r7, #12]
   82930:	681b      	ldr	r3, [r3, #0]
   82932:	429a      	cmp	r2, r3
   82934:	d118      	bne.n	82968 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   82936:	68fb      	ldr	r3, [r7, #12]
   82938:	681a      	ldr	r2, [r3, #0]
   8293a:	4b14      	ldr	r3, [pc, #80]	; (8298c <prvInsertBlockIntoFreeList+0xac>)
   8293c:	681b      	ldr	r3, [r3, #0]
   8293e:	429a      	cmp	r2, r3
   82940:	d00d      	beq.n	8295e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   82942:	687b      	ldr	r3, [r7, #4]
   82944:	685a      	ldr	r2, [r3, #4]
   82946:	68fb      	ldr	r3, [r7, #12]
   82948:	681b      	ldr	r3, [r3, #0]
   8294a:	685b      	ldr	r3, [r3, #4]
   8294c:	441a      	add	r2, r3
   8294e:	687b      	ldr	r3, [r7, #4]
   82950:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   82952:	68fb      	ldr	r3, [r7, #12]
   82954:	681b      	ldr	r3, [r3, #0]
   82956:	681a      	ldr	r2, [r3, #0]
   82958:	687b      	ldr	r3, [r7, #4]
   8295a:	601a      	str	r2, [r3, #0]
   8295c:	e008      	b.n	82970 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8295e:	4b0b      	ldr	r3, [pc, #44]	; (8298c <prvInsertBlockIntoFreeList+0xac>)
   82960:	681a      	ldr	r2, [r3, #0]
   82962:	687b      	ldr	r3, [r7, #4]
   82964:	601a      	str	r2, [r3, #0]
   82966:	e003      	b.n	82970 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   82968:	68fb      	ldr	r3, [r7, #12]
   8296a:	681a      	ldr	r2, [r3, #0]
   8296c:	687b      	ldr	r3, [r7, #4]
   8296e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   82970:	68fa      	ldr	r2, [r7, #12]
   82972:	687b      	ldr	r3, [r7, #4]
   82974:	429a      	cmp	r2, r3
   82976:	d002      	beq.n	8297e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   82978:	68fb      	ldr	r3, [r7, #12]
   8297a:	687a      	ldr	r2, [r7, #4]
   8297c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   8297e:	3714      	adds	r7, #20
   82980:	46bd      	mov	sp, r7
   82982:	f85d 7b04 	ldr.w	r7, [sp], #4
   82986:	4770      	bx	lr
   82988:	2007a4e8 	.word	0x2007a4e8
   8298c:	2007a4f0 	.word	0x2007a4f0

00082990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   82990:	b580      	push	{r7, lr}
   82992:	b084      	sub	sp, #16
   82994:	af00      	add	r7, sp, #0
   82996:	6078      	str	r0, [r7, #4]
   82998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8299a:	687b      	ldr	r3, [r7, #4]
   8299c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8299e:	68fb      	ldr	r3, [r7, #12]
   829a0:	2b00      	cmp	r3, #0
   829a2:	d102      	bne.n	829aa <xQueueGenericReset+0x1a>
   829a4:	4b26      	ldr	r3, [pc, #152]	; (82a40 <xQueueGenericReset+0xb0>)
   829a6:	4798      	blx	r3
   829a8:	e7fe      	b.n	829a8 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   829aa:	4b26      	ldr	r3, [pc, #152]	; (82a44 <xQueueGenericReset+0xb4>)
   829ac:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   829ae:	68fb      	ldr	r3, [r7, #12]
   829b0:	681a      	ldr	r2, [r3, #0]
   829b2:	68fb      	ldr	r3, [r7, #12]
   829b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   829b6:	68f9      	ldr	r1, [r7, #12]
   829b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
   829ba:	fb01 f303 	mul.w	r3, r1, r3
   829be:	441a      	add	r2, r3
   829c0:	68fb      	ldr	r3, [r7, #12]
   829c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   829c4:	68fb      	ldr	r3, [r7, #12]
   829c6:	2200      	movs	r2, #0
   829c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   829ca:	68fb      	ldr	r3, [r7, #12]
   829cc:	681a      	ldr	r2, [r3, #0]
   829ce:	68fb      	ldr	r3, [r7, #12]
   829d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   829d2:	68fb      	ldr	r3, [r7, #12]
   829d4:	681a      	ldr	r2, [r3, #0]
   829d6:	68fb      	ldr	r3, [r7, #12]
   829d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   829da:	3b01      	subs	r3, #1
   829dc:	68f9      	ldr	r1, [r7, #12]
   829de:	6c09      	ldr	r1, [r1, #64]	; 0x40
   829e0:	fb01 f303 	mul.w	r3, r1, r3
   829e4:	441a      	add	r2, r3
   829e6:	68fb      	ldr	r3, [r7, #12]
   829e8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   829ea:	68fb      	ldr	r3, [r7, #12]
   829ec:	f04f 32ff 	mov.w	r2, #4294967295
   829f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   829f2:	68fb      	ldr	r3, [r7, #12]
   829f4:	f04f 32ff 	mov.w	r2, #4294967295
   829f8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   829fa:	683b      	ldr	r3, [r7, #0]
   829fc:	2b00      	cmp	r3, #0
   829fe:	d10e      	bne.n	82a1e <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82a00:	68fb      	ldr	r3, [r7, #12]
   82a02:	691b      	ldr	r3, [r3, #16]
   82a04:	2b00      	cmp	r3, #0
   82a06:	d014      	beq.n	82a32 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   82a08:	68fb      	ldr	r3, [r7, #12]
   82a0a:	3310      	adds	r3, #16
   82a0c:	4618      	mov	r0, r3
   82a0e:	4b0e      	ldr	r3, [pc, #56]	; (82a48 <xQueueGenericReset+0xb8>)
   82a10:	4798      	blx	r3
   82a12:	4603      	mov	r3, r0
   82a14:	2b01      	cmp	r3, #1
   82a16:	d10c      	bne.n	82a32 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   82a18:	4b0c      	ldr	r3, [pc, #48]	; (82a4c <xQueueGenericReset+0xbc>)
   82a1a:	4798      	blx	r3
   82a1c:	e009      	b.n	82a32 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   82a1e:	68fb      	ldr	r3, [r7, #12]
   82a20:	3310      	adds	r3, #16
   82a22:	4618      	mov	r0, r3
   82a24:	4b0a      	ldr	r3, [pc, #40]	; (82a50 <xQueueGenericReset+0xc0>)
   82a26:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   82a28:	68fb      	ldr	r3, [r7, #12]
   82a2a:	3324      	adds	r3, #36	; 0x24
   82a2c:	4618      	mov	r0, r3
   82a2e:	4b08      	ldr	r3, [pc, #32]	; (82a50 <xQueueGenericReset+0xc0>)
   82a30:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   82a32:	4b08      	ldr	r3, [pc, #32]	; (82a54 <xQueueGenericReset+0xc4>)
   82a34:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   82a36:	2301      	movs	r3, #1
}
   82a38:	4618      	mov	r0, r3
   82a3a:	3710      	adds	r7, #16
   82a3c:	46bd      	mov	sp, r7
   82a3e:	bd80      	pop	{r7, pc}
   82a40:	000824dd 	.word	0x000824dd
   82a44:	00082461 	.word	0x00082461
   82a48:	00083a51 	.word	0x00083a51
   82a4c:	00082441 	.word	0x00082441
   82a50:	00082155 	.word	0x00082155
   82a54:	000824a5 	.word	0x000824a5

00082a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   82a58:	b580      	push	{r7, lr}
   82a5a:	b088      	sub	sp, #32
   82a5c:	af00      	add	r7, sp, #0
   82a5e:	60f8      	str	r0, [r7, #12]
   82a60:	60b9      	str	r1, [r7, #8]
   82a62:	4613      	mov	r3, r2
   82a64:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   82a66:	2300      	movs	r3, #0
   82a68:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   82a6a:	68fb      	ldr	r3, [r7, #12]
   82a6c:	2b00      	cmp	r3, #0
   82a6e:	d026      	beq.n	82abe <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   82a70:	204c      	movs	r0, #76	; 0x4c
   82a72:	4b18      	ldr	r3, [pc, #96]	; (82ad4 <xQueueGenericCreate+0x7c>)
   82a74:	4798      	blx	r3
   82a76:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   82a78:	69bb      	ldr	r3, [r7, #24]
   82a7a:	2b00      	cmp	r3, #0
   82a7c:	d01f      	beq.n	82abe <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82a7e:	68fb      	ldr	r3, [r7, #12]
   82a80:	68ba      	ldr	r2, [r7, #8]
   82a82:	fb02 f303 	mul.w	r3, r2, r3
   82a86:	3301      	adds	r3, #1
   82a88:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   82a8a:	6978      	ldr	r0, [r7, #20]
   82a8c:	4b11      	ldr	r3, [pc, #68]	; (82ad4 <xQueueGenericCreate+0x7c>)
   82a8e:	4798      	blx	r3
   82a90:	4602      	mov	r2, r0
   82a92:	69bb      	ldr	r3, [r7, #24]
   82a94:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   82a96:	69bb      	ldr	r3, [r7, #24]
   82a98:	681b      	ldr	r3, [r3, #0]
   82a9a:	2b00      	cmp	r3, #0
   82a9c:	d00c      	beq.n	82ab8 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82a9e:	69bb      	ldr	r3, [r7, #24]
   82aa0:	68fa      	ldr	r2, [r7, #12]
   82aa2:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   82aa4:	69bb      	ldr	r3, [r7, #24]
   82aa6:	68ba      	ldr	r2, [r7, #8]
   82aa8:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   82aaa:	69b8      	ldr	r0, [r7, #24]
   82aac:	2101      	movs	r1, #1
   82aae:	4b0a      	ldr	r3, [pc, #40]	; (82ad8 <xQueueGenericCreate+0x80>)
   82ab0:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   82ab2:	69bb      	ldr	r3, [r7, #24]
   82ab4:	61fb      	str	r3, [r7, #28]
   82ab6:	e002      	b.n	82abe <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   82ab8:	69b8      	ldr	r0, [r7, #24]
   82aba:	4b08      	ldr	r3, [pc, #32]	; (82adc <xQueueGenericCreate+0x84>)
   82abc:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   82abe:	69fb      	ldr	r3, [r7, #28]
   82ac0:	2b00      	cmp	r3, #0
   82ac2:	d102      	bne.n	82aca <xQueueGenericCreate+0x72>
   82ac4:	4b06      	ldr	r3, [pc, #24]	; (82ae0 <xQueueGenericCreate+0x88>)
   82ac6:	4798      	blx	r3
   82ac8:	e7fe      	b.n	82ac8 <xQueueGenericCreate+0x70>

	return xReturn;
   82aca:	69fb      	ldr	r3, [r7, #28]
}
   82acc:	4618      	mov	r0, r3
   82ace:	3720      	adds	r7, #32
   82ad0:	46bd      	mov	sp, r7
   82ad2:	bd80      	pop	{r7, pc}
   82ad4:	00082601 	.word	0x00082601
   82ad8:	00082991 	.word	0x00082991
   82adc:	00082779 	.word	0x00082779
   82ae0:	000824dd 	.word	0x000824dd

00082ae4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   82ae4:	b580      	push	{r7, lr}
   82ae6:	b08a      	sub	sp, #40	; 0x28
   82ae8:	af00      	add	r7, sp, #0
   82aea:	60f8      	str	r0, [r7, #12]
   82aec:	60b9      	str	r1, [r7, #8]
   82aee:	607a      	str	r2, [r7, #4]
   82af0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   82af2:	2300      	movs	r3, #0
   82af4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82af6:	68fb      	ldr	r3, [r7, #12]
   82af8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   82afa:	6a3b      	ldr	r3, [r7, #32]
   82afc:	2b00      	cmp	r3, #0
   82afe:	d102      	bne.n	82b06 <xQueueGenericSend+0x22>
   82b00:	4b5b      	ldr	r3, [pc, #364]	; (82c70 <xQueueGenericSend+0x18c>)
   82b02:	4798      	blx	r3
   82b04:	e7fe      	b.n	82b04 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82b06:	68bb      	ldr	r3, [r7, #8]
   82b08:	2b00      	cmp	r3, #0
   82b0a:	d103      	bne.n	82b14 <xQueueGenericSend+0x30>
   82b0c:	6a3b      	ldr	r3, [r7, #32]
   82b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82b10:	2b00      	cmp	r3, #0
   82b12:	d101      	bne.n	82b18 <xQueueGenericSend+0x34>
   82b14:	2301      	movs	r3, #1
   82b16:	e000      	b.n	82b1a <xQueueGenericSend+0x36>
   82b18:	2300      	movs	r3, #0
   82b1a:	2b00      	cmp	r3, #0
   82b1c:	d102      	bne.n	82b24 <xQueueGenericSend+0x40>
   82b1e:	4b54      	ldr	r3, [pc, #336]	; (82c70 <xQueueGenericSend+0x18c>)
   82b20:	4798      	blx	r3
   82b22:	e7fe      	b.n	82b22 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   82b24:	683b      	ldr	r3, [r7, #0]
   82b26:	2b02      	cmp	r3, #2
   82b28:	d103      	bne.n	82b32 <xQueueGenericSend+0x4e>
   82b2a:	6a3b      	ldr	r3, [r7, #32]
   82b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82b2e:	2b01      	cmp	r3, #1
   82b30:	d101      	bne.n	82b36 <xQueueGenericSend+0x52>
   82b32:	2301      	movs	r3, #1
   82b34:	e000      	b.n	82b38 <xQueueGenericSend+0x54>
   82b36:	2300      	movs	r3, #0
   82b38:	2b00      	cmp	r3, #0
   82b3a:	d102      	bne.n	82b42 <xQueueGenericSend+0x5e>
   82b3c:	4b4c      	ldr	r3, [pc, #304]	; (82c70 <xQueueGenericSend+0x18c>)
   82b3e:	4798      	blx	r3
   82b40:	e7fe      	b.n	82b40 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   82b42:	4b4c      	ldr	r3, [pc, #304]	; (82c74 <xQueueGenericSend+0x190>)
   82b44:	4798      	blx	r3
   82b46:	4603      	mov	r3, r0
   82b48:	2b00      	cmp	r3, #0
   82b4a:	d102      	bne.n	82b52 <xQueueGenericSend+0x6e>
   82b4c:	687b      	ldr	r3, [r7, #4]
   82b4e:	2b00      	cmp	r3, #0
   82b50:	d101      	bne.n	82b56 <xQueueGenericSend+0x72>
   82b52:	2301      	movs	r3, #1
   82b54:	e000      	b.n	82b58 <xQueueGenericSend+0x74>
   82b56:	2300      	movs	r3, #0
   82b58:	2b00      	cmp	r3, #0
   82b5a:	d102      	bne.n	82b62 <xQueueGenericSend+0x7e>
   82b5c:	4b44      	ldr	r3, [pc, #272]	; (82c70 <xQueueGenericSend+0x18c>)
   82b5e:	4798      	blx	r3
   82b60:	e7fe      	b.n	82b60 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   82b62:	4b45      	ldr	r3, [pc, #276]	; (82c78 <xQueueGenericSend+0x194>)
   82b64:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   82b66:	6a3b      	ldr	r3, [r7, #32]
   82b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82b6a:	6a3b      	ldr	r3, [r7, #32]
   82b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82b6e:	429a      	cmp	r2, r3
   82b70:	d302      	bcc.n	82b78 <xQueueGenericSend+0x94>
   82b72:	683b      	ldr	r3, [r7, #0]
   82b74:	2b02      	cmp	r3, #2
   82b76:	d11d      	bne.n	82bb4 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82b78:	6a38      	ldr	r0, [r7, #32]
   82b7a:	68b9      	ldr	r1, [r7, #8]
   82b7c:	683a      	ldr	r2, [r7, #0]
   82b7e:	4b3f      	ldr	r3, [pc, #252]	; (82c7c <xQueueGenericSend+0x198>)
   82b80:	4798      	blx	r3
   82b82:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82b84:	6a3b      	ldr	r3, [r7, #32]
   82b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82b88:	2b00      	cmp	r3, #0
   82b8a:	d00a      	beq.n	82ba2 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   82b8c:	6a3b      	ldr	r3, [r7, #32]
   82b8e:	3324      	adds	r3, #36	; 0x24
   82b90:	4618      	mov	r0, r3
   82b92:	4b3b      	ldr	r3, [pc, #236]	; (82c80 <xQueueGenericSend+0x19c>)
   82b94:	4798      	blx	r3
   82b96:	4603      	mov	r3, r0
   82b98:	2b01      	cmp	r3, #1
   82b9a:	d107      	bne.n	82bac <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   82b9c:	4b39      	ldr	r3, [pc, #228]	; (82c84 <xQueueGenericSend+0x1a0>)
   82b9e:	4798      	blx	r3
   82ba0:	e004      	b.n	82bac <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   82ba2:	69fb      	ldr	r3, [r7, #28]
   82ba4:	2b00      	cmp	r3, #0
   82ba6:	d001      	beq.n	82bac <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   82ba8:	4b36      	ldr	r3, [pc, #216]	; (82c84 <xQueueGenericSend+0x1a0>)
   82baa:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   82bac:	4b36      	ldr	r3, [pc, #216]	; (82c88 <xQueueGenericSend+0x1a4>)
   82bae:	4798      	blx	r3
				return pdPASS;
   82bb0:	2301      	movs	r3, #1
   82bb2:	e059      	b.n	82c68 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   82bb4:	687b      	ldr	r3, [r7, #4]
   82bb6:	2b00      	cmp	r3, #0
   82bb8:	d103      	bne.n	82bc2 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82bba:	4b33      	ldr	r3, [pc, #204]	; (82c88 <xQueueGenericSend+0x1a4>)
   82bbc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   82bbe:	2300      	movs	r3, #0
   82bc0:	e052      	b.n	82c68 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   82bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82bc4:	2b00      	cmp	r3, #0
   82bc6:	d106      	bne.n	82bd6 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82bc8:	f107 0314 	add.w	r3, r7, #20
   82bcc:	4618      	mov	r0, r3
   82bce:	4b2f      	ldr	r3, [pc, #188]	; (82c8c <xQueueGenericSend+0x1a8>)
   82bd0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   82bd2:	2301      	movs	r3, #1
   82bd4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   82bd6:	4b2c      	ldr	r3, [pc, #176]	; (82c88 <xQueueGenericSend+0x1a4>)
   82bd8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82bda:	4b2d      	ldr	r3, [pc, #180]	; (82c90 <xQueueGenericSend+0x1ac>)
   82bdc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82bde:	4b26      	ldr	r3, [pc, #152]	; (82c78 <xQueueGenericSend+0x194>)
   82be0:	4798      	blx	r3
   82be2:	6a3b      	ldr	r3, [r7, #32]
   82be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82be6:	f1b3 3fff 	cmp.w	r3, #4294967295
   82bea:	d102      	bne.n	82bf2 <xQueueGenericSend+0x10e>
   82bec:	6a3b      	ldr	r3, [r7, #32]
   82bee:	2200      	movs	r2, #0
   82bf0:	645a      	str	r2, [r3, #68]	; 0x44
   82bf2:	6a3b      	ldr	r3, [r7, #32]
   82bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
   82bfa:	d102      	bne.n	82c02 <xQueueGenericSend+0x11e>
   82bfc:	6a3b      	ldr	r3, [r7, #32]
   82bfe:	2200      	movs	r2, #0
   82c00:	649a      	str	r2, [r3, #72]	; 0x48
   82c02:	4b21      	ldr	r3, [pc, #132]	; (82c88 <xQueueGenericSend+0x1a4>)
   82c04:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82c06:	f107 0214 	add.w	r2, r7, #20
   82c0a:	1d3b      	adds	r3, r7, #4
   82c0c:	4610      	mov	r0, r2
   82c0e:	4619      	mov	r1, r3
   82c10:	4b20      	ldr	r3, [pc, #128]	; (82c94 <xQueueGenericSend+0x1b0>)
   82c12:	4798      	blx	r3
   82c14:	4603      	mov	r3, r0
   82c16:	2b00      	cmp	r3, #0
   82c18:	d11e      	bne.n	82c58 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   82c1a:	6a38      	ldr	r0, [r7, #32]
   82c1c:	4b1e      	ldr	r3, [pc, #120]	; (82c98 <xQueueGenericSend+0x1b4>)
   82c1e:	4798      	blx	r3
   82c20:	4603      	mov	r3, r0
   82c22:	2b00      	cmp	r3, #0
   82c24:	d012      	beq.n	82c4c <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   82c26:	6a3b      	ldr	r3, [r7, #32]
   82c28:	f103 0210 	add.w	r2, r3, #16
   82c2c:	687b      	ldr	r3, [r7, #4]
   82c2e:	4610      	mov	r0, r2
   82c30:	4619      	mov	r1, r3
   82c32:	4b1a      	ldr	r3, [pc, #104]	; (82c9c <xQueueGenericSend+0x1b8>)
   82c34:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   82c36:	6a38      	ldr	r0, [r7, #32]
   82c38:	4b19      	ldr	r3, [pc, #100]	; (82ca0 <xQueueGenericSend+0x1bc>)
   82c3a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   82c3c:	4b19      	ldr	r3, [pc, #100]	; (82ca4 <xQueueGenericSend+0x1c0>)
   82c3e:	4798      	blx	r3
   82c40:	4603      	mov	r3, r0
   82c42:	2b00      	cmp	r3, #0
   82c44:	d10f      	bne.n	82c66 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   82c46:	4b0f      	ldr	r3, [pc, #60]	; (82c84 <xQueueGenericSend+0x1a0>)
   82c48:	4798      	blx	r3
   82c4a:	e00c      	b.n	82c66 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82c4c:	6a38      	ldr	r0, [r7, #32]
   82c4e:	4b14      	ldr	r3, [pc, #80]	; (82ca0 <xQueueGenericSend+0x1bc>)
   82c50:	4798      	blx	r3
				( void ) xTaskResumeAll();
   82c52:	4b14      	ldr	r3, [pc, #80]	; (82ca4 <xQueueGenericSend+0x1c0>)
   82c54:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   82c56:	e784      	b.n	82b62 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   82c58:	6a38      	ldr	r0, [r7, #32]
   82c5a:	4b11      	ldr	r3, [pc, #68]	; (82ca0 <xQueueGenericSend+0x1bc>)
   82c5c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82c5e:	4b11      	ldr	r3, [pc, #68]	; (82ca4 <xQueueGenericSend+0x1c0>)
   82c60:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   82c62:	2300      	movs	r3, #0
   82c64:	e000      	b.n	82c68 <xQueueGenericSend+0x184>
		}
	}
   82c66:	e77c      	b.n	82b62 <xQueueGenericSend+0x7e>
}
   82c68:	4618      	mov	r0, r3
   82c6a:	3728      	adds	r7, #40	; 0x28
   82c6c:	46bd      	mov	sp, r7
   82c6e:	bd80      	pop	{r7, pc}
   82c70:	000824dd 	.word	0x000824dd
   82c74:	00083f29 	.word	0x00083f29
   82c78:	00082461 	.word	0x00082461
   82c7c:	00082fa1 	.word	0x00082fa1
   82c80:	00083a51 	.word	0x00083a51
   82c84:	00082441 	.word	0x00082441
   82c88:	000824a5 	.word	0x000824a5
   82c8c:	00083b11 	.word	0x00083b11
   82c90:	0008354d 	.word	0x0008354d
   82c94:	00083b49 	.word	0x00083b49
   82c98:	000831b1 	.word	0x000831b1
   82c9c:	00083931 	.word	0x00083931
   82ca0:	000830d5 	.word	0x000830d5
   82ca4:	00083569 	.word	0x00083569

00082ca8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   82ca8:	b580      	push	{r7, lr}
   82caa:	b088      	sub	sp, #32
   82cac:	af00      	add	r7, sp, #0
   82cae:	60f8      	str	r0, [r7, #12]
   82cb0:	60b9      	str	r1, [r7, #8]
   82cb2:	607a      	str	r2, [r7, #4]
   82cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82cb6:	68fb      	ldr	r3, [r7, #12]
   82cb8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   82cba:	69bb      	ldr	r3, [r7, #24]
   82cbc:	2b00      	cmp	r3, #0
   82cbe:	d102      	bne.n	82cc6 <xQueueGenericSendFromISR+0x1e>
   82cc0:	4b33      	ldr	r3, [pc, #204]	; (82d90 <xQueueGenericSendFromISR+0xe8>)
   82cc2:	4798      	blx	r3
   82cc4:	e7fe      	b.n	82cc4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82cc6:	68bb      	ldr	r3, [r7, #8]
   82cc8:	2b00      	cmp	r3, #0
   82cca:	d103      	bne.n	82cd4 <xQueueGenericSendFromISR+0x2c>
   82ccc:	69bb      	ldr	r3, [r7, #24]
   82cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82cd0:	2b00      	cmp	r3, #0
   82cd2:	d101      	bne.n	82cd8 <xQueueGenericSendFromISR+0x30>
   82cd4:	2301      	movs	r3, #1
   82cd6:	e000      	b.n	82cda <xQueueGenericSendFromISR+0x32>
   82cd8:	2300      	movs	r3, #0
   82cda:	2b00      	cmp	r3, #0
   82cdc:	d102      	bne.n	82ce4 <xQueueGenericSendFromISR+0x3c>
   82cde:	4b2c      	ldr	r3, [pc, #176]	; (82d90 <xQueueGenericSendFromISR+0xe8>)
   82ce0:	4798      	blx	r3
   82ce2:	e7fe      	b.n	82ce2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   82ce4:	683b      	ldr	r3, [r7, #0]
   82ce6:	2b02      	cmp	r3, #2
   82ce8:	d103      	bne.n	82cf2 <xQueueGenericSendFromISR+0x4a>
   82cea:	69bb      	ldr	r3, [r7, #24]
   82cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82cee:	2b01      	cmp	r3, #1
   82cf0:	d101      	bne.n	82cf6 <xQueueGenericSendFromISR+0x4e>
   82cf2:	2301      	movs	r3, #1
   82cf4:	e000      	b.n	82cf8 <xQueueGenericSendFromISR+0x50>
   82cf6:	2300      	movs	r3, #0
   82cf8:	2b00      	cmp	r3, #0
   82cfa:	d102      	bne.n	82d02 <xQueueGenericSendFromISR+0x5a>
   82cfc:	4b24      	ldr	r3, [pc, #144]	; (82d90 <xQueueGenericSendFromISR+0xe8>)
   82cfe:	4798      	blx	r3
   82d00:	e7fe      	b.n	82d00 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   82d02:	4b24      	ldr	r3, [pc, #144]	; (82d94 <xQueueGenericSendFromISR+0xec>)
   82d04:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82d06:	4b22      	ldr	r3, [pc, #136]	; (82d90 <xQueueGenericSendFromISR+0xe8>)
   82d08:	4798      	blx	r3
   82d0a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   82d0c:	69bb      	ldr	r3, [r7, #24]
   82d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82d10:	69bb      	ldr	r3, [r7, #24]
   82d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82d14:	429a      	cmp	r2, r3
   82d16:	d302      	bcc.n	82d1e <xQueueGenericSendFromISR+0x76>
   82d18:	683b      	ldr	r3, [r7, #0]
   82d1a:	2b02      	cmp	r3, #2
   82d1c:	d12d      	bne.n	82d7a <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   82d1e:	69b8      	ldr	r0, [r7, #24]
   82d20:	68b9      	ldr	r1, [r7, #8]
   82d22:	683a      	ldr	r2, [r7, #0]
   82d24:	4b1c      	ldr	r3, [pc, #112]	; (82d98 <xQueueGenericSendFromISR+0xf0>)
   82d26:	4798      	blx	r3
   82d28:	4603      	mov	r3, r0
   82d2a:	2b00      	cmp	r3, #0
   82d2c:	d005      	beq.n	82d3a <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   82d2e:	687b      	ldr	r3, [r7, #4]
   82d30:	2b00      	cmp	r3, #0
   82d32:	d002      	beq.n	82d3a <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   82d34:	687b      	ldr	r3, [r7, #4]
   82d36:	2201      	movs	r2, #1
   82d38:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   82d3a:	69bb      	ldr	r3, [r7, #24]
   82d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82d42:	d112      	bne.n	82d6a <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82d44:	69bb      	ldr	r3, [r7, #24]
   82d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82d48:	2b00      	cmp	r3, #0
   82d4a:	d013      	beq.n	82d74 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82d4c:	69bb      	ldr	r3, [r7, #24]
   82d4e:	3324      	adds	r3, #36	; 0x24
   82d50:	4618      	mov	r0, r3
   82d52:	4b12      	ldr	r3, [pc, #72]	; (82d9c <xQueueGenericSendFromISR+0xf4>)
   82d54:	4798      	blx	r3
   82d56:	4603      	mov	r3, r0
   82d58:	2b00      	cmp	r3, #0
   82d5a:	d00b      	beq.n	82d74 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   82d5c:	687b      	ldr	r3, [r7, #4]
   82d5e:	2b00      	cmp	r3, #0
   82d60:	d008      	beq.n	82d74 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   82d62:	687b      	ldr	r3, [r7, #4]
   82d64:	2201      	movs	r2, #1
   82d66:	601a      	str	r2, [r3, #0]
   82d68:	e004      	b.n	82d74 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   82d6a:	69bb      	ldr	r3, [r7, #24]
   82d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82d6e:	1c5a      	adds	r2, r3, #1
   82d70:	69bb      	ldr	r3, [r7, #24]
   82d72:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   82d74:	2301      	movs	r3, #1
   82d76:	61fb      	str	r3, [r7, #28]
   82d78:	e001      	b.n	82d7e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82d7a:	2300      	movs	r3, #0
   82d7c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   82d7e:	6978      	ldr	r0, [r7, #20]
   82d80:	4b07      	ldr	r3, [pc, #28]	; (82da0 <xQueueGenericSendFromISR+0xf8>)
   82d82:	4798      	blx	r3

	return xReturn;
   82d84:	69fb      	ldr	r3, [r7, #28]
}
   82d86:	4618      	mov	r0, r3
   82d88:	3720      	adds	r7, #32
   82d8a:	46bd      	mov	sp, r7
   82d8c:	bd80      	pop	{r7, pc}
   82d8e:	bf00      	nop
   82d90:	000824dd 	.word	0x000824dd
   82d94:	000825a5 	.word	0x000825a5
   82d98:	00082fa1 	.word	0x00082fa1
   82d9c:	00083a51 	.word	0x00083a51
   82da0:	000824f1 	.word	0x000824f1

00082da4 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   82da4:	b580      	push	{r7, lr}
   82da6:	b08a      	sub	sp, #40	; 0x28
   82da8:	af00      	add	r7, sp, #0
   82daa:	60f8      	str	r0, [r7, #12]
   82dac:	60b9      	str	r1, [r7, #8]
   82dae:	607a      	str	r2, [r7, #4]
   82db0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   82db2:	2300      	movs	r3, #0
   82db4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82db6:	68fb      	ldr	r3, [r7, #12]
   82db8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   82dba:	6a3b      	ldr	r3, [r7, #32]
   82dbc:	2b00      	cmp	r3, #0
   82dbe:	d102      	bne.n	82dc6 <xQueueGenericReceive+0x22>
   82dc0:	4b67      	ldr	r3, [pc, #412]	; (82f60 <xQueueGenericReceive+0x1bc>)
   82dc2:	4798      	blx	r3
   82dc4:	e7fe      	b.n	82dc4 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82dc6:	68bb      	ldr	r3, [r7, #8]
   82dc8:	2b00      	cmp	r3, #0
   82dca:	d103      	bne.n	82dd4 <xQueueGenericReceive+0x30>
   82dcc:	6a3b      	ldr	r3, [r7, #32]
   82dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82dd0:	2b00      	cmp	r3, #0
   82dd2:	d101      	bne.n	82dd8 <xQueueGenericReceive+0x34>
   82dd4:	2301      	movs	r3, #1
   82dd6:	e000      	b.n	82dda <xQueueGenericReceive+0x36>
   82dd8:	2300      	movs	r3, #0
   82dda:	2b00      	cmp	r3, #0
   82ddc:	d102      	bne.n	82de4 <xQueueGenericReceive+0x40>
   82dde:	4b60      	ldr	r3, [pc, #384]	; (82f60 <xQueueGenericReceive+0x1bc>)
   82de0:	4798      	blx	r3
   82de2:	e7fe      	b.n	82de2 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   82de4:	4b5f      	ldr	r3, [pc, #380]	; (82f64 <xQueueGenericReceive+0x1c0>)
   82de6:	4798      	blx	r3
   82de8:	4603      	mov	r3, r0
   82dea:	2b00      	cmp	r3, #0
   82dec:	d102      	bne.n	82df4 <xQueueGenericReceive+0x50>
   82dee:	687b      	ldr	r3, [r7, #4]
   82df0:	2b00      	cmp	r3, #0
   82df2:	d101      	bne.n	82df8 <xQueueGenericReceive+0x54>
   82df4:	2301      	movs	r3, #1
   82df6:	e000      	b.n	82dfa <xQueueGenericReceive+0x56>
   82df8:	2300      	movs	r3, #0
   82dfa:	2b00      	cmp	r3, #0
   82dfc:	d102      	bne.n	82e04 <xQueueGenericReceive+0x60>
   82dfe:	4b58      	ldr	r3, [pc, #352]	; (82f60 <xQueueGenericReceive+0x1bc>)
   82e00:	4798      	blx	r3
   82e02:	e7fe      	b.n	82e02 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82e04:	4b58      	ldr	r3, [pc, #352]	; (82f68 <xQueueGenericReceive+0x1c4>)
   82e06:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   82e08:	6a3b      	ldr	r3, [r7, #32]
   82e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82e0c:	2b00      	cmp	r3, #0
   82e0e:	d03b      	beq.n	82e88 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   82e10:	6a3b      	ldr	r3, [r7, #32]
   82e12:	68db      	ldr	r3, [r3, #12]
   82e14:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   82e16:	6a38      	ldr	r0, [r7, #32]
   82e18:	68b9      	ldr	r1, [r7, #8]
   82e1a:	4b54      	ldr	r3, [pc, #336]	; (82f6c <xQueueGenericReceive+0x1c8>)
   82e1c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   82e1e:	683b      	ldr	r3, [r7, #0]
   82e20:	2b00      	cmp	r3, #0
   82e22:	d11c      	bne.n	82e5e <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   82e24:	6a3b      	ldr	r3, [r7, #32]
   82e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82e28:	1e5a      	subs	r2, r3, #1
   82e2a:	6a3b      	ldr	r3, [r7, #32]
   82e2c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82e2e:	6a3b      	ldr	r3, [r7, #32]
   82e30:	681b      	ldr	r3, [r3, #0]
   82e32:	2b00      	cmp	r3, #0
   82e34:	d104      	bne.n	82e40 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   82e36:	4b4e      	ldr	r3, [pc, #312]	; (82f70 <xQueueGenericReceive+0x1cc>)
   82e38:	4798      	blx	r3
   82e3a:	4602      	mov	r2, r0
   82e3c:	6a3b      	ldr	r3, [r7, #32]
   82e3e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82e40:	6a3b      	ldr	r3, [r7, #32]
   82e42:	691b      	ldr	r3, [r3, #16]
   82e44:	2b00      	cmp	r3, #0
   82e46:	d01b      	beq.n	82e80 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   82e48:	6a3b      	ldr	r3, [r7, #32]
   82e4a:	3310      	adds	r3, #16
   82e4c:	4618      	mov	r0, r3
   82e4e:	4b49      	ldr	r3, [pc, #292]	; (82f74 <xQueueGenericReceive+0x1d0>)
   82e50:	4798      	blx	r3
   82e52:	4603      	mov	r3, r0
   82e54:	2b01      	cmp	r3, #1
   82e56:	d113      	bne.n	82e80 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   82e58:	4b47      	ldr	r3, [pc, #284]	; (82f78 <xQueueGenericReceive+0x1d4>)
   82e5a:	4798      	blx	r3
   82e5c:	e010      	b.n	82e80 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   82e5e:	6a3b      	ldr	r3, [r7, #32]
   82e60:	69fa      	ldr	r2, [r7, #28]
   82e62:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82e64:	6a3b      	ldr	r3, [r7, #32]
   82e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82e68:	2b00      	cmp	r3, #0
   82e6a:	d009      	beq.n	82e80 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82e6c:	6a3b      	ldr	r3, [r7, #32]
   82e6e:	3324      	adds	r3, #36	; 0x24
   82e70:	4618      	mov	r0, r3
   82e72:	4b40      	ldr	r3, [pc, #256]	; (82f74 <xQueueGenericReceive+0x1d0>)
   82e74:	4798      	blx	r3
   82e76:	4603      	mov	r3, r0
   82e78:	2b00      	cmp	r3, #0
   82e7a:	d001      	beq.n	82e80 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   82e7c:	4b3e      	ldr	r3, [pc, #248]	; (82f78 <xQueueGenericReceive+0x1d4>)
   82e7e:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   82e80:	4b3e      	ldr	r3, [pc, #248]	; (82f7c <xQueueGenericReceive+0x1d8>)
   82e82:	4798      	blx	r3
				return pdPASS;
   82e84:	2301      	movs	r3, #1
   82e86:	e066      	b.n	82f56 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   82e88:	687b      	ldr	r3, [r7, #4]
   82e8a:	2b00      	cmp	r3, #0
   82e8c:	d103      	bne.n	82e96 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82e8e:	4b3b      	ldr	r3, [pc, #236]	; (82f7c <xQueueGenericReceive+0x1d8>)
   82e90:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   82e92:	2300      	movs	r3, #0
   82e94:	e05f      	b.n	82f56 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   82e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e98:	2b00      	cmp	r3, #0
   82e9a:	d106      	bne.n	82eaa <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82e9c:	f107 0314 	add.w	r3, r7, #20
   82ea0:	4618      	mov	r0, r3
   82ea2:	4b37      	ldr	r3, [pc, #220]	; (82f80 <xQueueGenericReceive+0x1dc>)
   82ea4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   82ea6:	2301      	movs	r3, #1
   82ea8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   82eaa:	4b34      	ldr	r3, [pc, #208]	; (82f7c <xQueueGenericReceive+0x1d8>)
   82eac:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82eae:	4b35      	ldr	r3, [pc, #212]	; (82f84 <xQueueGenericReceive+0x1e0>)
   82eb0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82eb2:	4b2d      	ldr	r3, [pc, #180]	; (82f68 <xQueueGenericReceive+0x1c4>)
   82eb4:	4798      	blx	r3
   82eb6:	6a3b      	ldr	r3, [r7, #32]
   82eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82eba:	f1b3 3fff 	cmp.w	r3, #4294967295
   82ebe:	d102      	bne.n	82ec6 <xQueueGenericReceive+0x122>
   82ec0:	6a3b      	ldr	r3, [r7, #32]
   82ec2:	2200      	movs	r2, #0
   82ec4:	645a      	str	r2, [r3, #68]	; 0x44
   82ec6:	6a3b      	ldr	r3, [r7, #32]
   82ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82eca:	f1b3 3fff 	cmp.w	r3, #4294967295
   82ece:	d102      	bne.n	82ed6 <xQueueGenericReceive+0x132>
   82ed0:	6a3b      	ldr	r3, [r7, #32]
   82ed2:	2200      	movs	r2, #0
   82ed4:	649a      	str	r2, [r3, #72]	; 0x48
   82ed6:	4b29      	ldr	r3, [pc, #164]	; (82f7c <xQueueGenericReceive+0x1d8>)
   82ed8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82eda:	f107 0214 	add.w	r2, r7, #20
   82ede:	1d3b      	adds	r3, r7, #4
   82ee0:	4610      	mov	r0, r2
   82ee2:	4619      	mov	r1, r3
   82ee4:	4b28      	ldr	r3, [pc, #160]	; (82f88 <xQueueGenericReceive+0x1e4>)
   82ee6:	4798      	blx	r3
   82ee8:	4603      	mov	r3, r0
   82eea:	2b00      	cmp	r3, #0
   82eec:	d12b      	bne.n	82f46 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   82eee:	6a38      	ldr	r0, [r7, #32]
   82ef0:	4b26      	ldr	r3, [pc, #152]	; (82f8c <xQueueGenericReceive+0x1e8>)
   82ef2:	4798      	blx	r3
   82ef4:	4603      	mov	r3, r0
   82ef6:	2b00      	cmp	r3, #0
   82ef8:	d01f      	beq.n	82f3a <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82efa:	6a3b      	ldr	r3, [r7, #32]
   82efc:	681b      	ldr	r3, [r3, #0]
   82efe:	2b00      	cmp	r3, #0
   82f00:	d108      	bne.n	82f14 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   82f02:	4b19      	ldr	r3, [pc, #100]	; (82f68 <xQueueGenericReceive+0x1c4>)
   82f04:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   82f06:	6a3b      	ldr	r3, [r7, #32]
   82f08:	685b      	ldr	r3, [r3, #4]
   82f0a:	4618      	mov	r0, r3
   82f0c:	4b20      	ldr	r3, [pc, #128]	; (82f90 <xQueueGenericReceive+0x1ec>)
   82f0e:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   82f10:	4b1a      	ldr	r3, [pc, #104]	; (82f7c <xQueueGenericReceive+0x1d8>)
   82f12:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82f14:	6a3b      	ldr	r3, [r7, #32]
   82f16:	f103 0224 	add.w	r2, r3, #36	; 0x24
   82f1a:	687b      	ldr	r3, [r7, #4]
   82f1c:	4610      	mov	r0, r2
   82f1e:	4619      	mov	r1, r3
   82f20:	4b1c      	ldr	r3, [pc, #112]	; (82f94 <xQueueGenericReceive+0x1f0>)
   82f22:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   82f24:	6a38      	ldr	r0, [r7, #32]
   82f26:	4b1c      	ldr	r3, [pc, #112]	; (82f98 <xQueueGenericReceive+0x1f4>)
   82f28:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   82f2a:	4b1c      	ldr	r3, [pc, #112]	; (82f9c <xQueueGenericReceive+0x1f8>)
   82f2c:	4798      	blx	r3
   82f2e:	4603      	mov	r3, r0
   82f30:	2b00      	cmp	r3, #0
   82f32:	d10f      	bne.n	82f54 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   82f34:	4b10      	ldr	r3, [pc, #64]	; (82f78 <xQueueGenericReceive+0x1d4>)
   82f36:	4798      	blx	r3
   82f38:	e00c      	b.n	82f54 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82f3a:	6a38      	ldr	r0, [r7, #32]
   82f3c:	4b16      	ldr	r3, [pc, #88]	; (82f98 <xQueueGenericReceive+0x1f4>)
   82f3e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   82f40:	4b16      	ldr	r3, [pc, #88]	; (82f9c <xQueueGenericReceive+0x1f8>)
   82f42:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   82f44:	e75e      	b.n	82e04 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   82f46:	6a38      	ldr	r0, [r7, #32]
   82f48:	4b13      	ldr	r3, [pc, #76]	; (82f98 <xQueueGenericReceive+0x1f4>)
   82f4a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82f4c:	4b13      	ldr	r3, [pc, #76]	; (82f9c <xQueueGenericReceive+0x1f8>)
   82f4e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   82f50:	2300      	movs	r3, #0
   82f52:	e000      	b.n	82f56 <xQueueGenericReceive+0x1b2>
		}
	}
   82f54:	e756      	b.n	82e04 <xQueueGenericReceive+0x60>
}
   82f56:	4618      	mov	r0, r3
   82f58:	3728      	adds	r7, #40	; 0x28
   82f5a:	46bd      	mov	sp, r7
   82f5c:	bd80      	pop	{r7, pc}
   82f5e:	bf00      	nop
   82f60:	000824dd 	.word	0x000824dd
   82f64:	00083f29 	.word	0x00083f29
   82f68:	00082461 	.word	0x00082461
   82f6c:	00083085 	.word	0x00083085
   82f70:	0008413d 	.word	0x0008413d
   82f74:	00083a51 	.word	0x00083a51
   82f78:	00082441 	.word	0x00082441
   82f7c:	000824a5 	.word	0x000824a5
   82f80:	00083b11 	.word	0x00083b11
   82f84:	0008354d 	.word	0x0008354d
   82f88:	00083b49 	.word	0x00083b49
   82f8c:	0008317d 	.word	0x0008317d
   82f90:	00083f65 	.word	0x00083f65
   82f94:	00083931 	.word	0x00083931
   82f98:	000830d5 	.word	0x000830d5
   82f9c:	00083569 	.word	0x00083569

00082fa0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   82fa0:	b580      	push	{r7, lr}
   82fa2:	b086      	sub	sp, #24
   82fa4:	af00      	add	r7, sp, #0
   82fa6:	60f8      	str	r0, [r7, #12]
   82fa8:	60b9      	str	r1, [r7, #8]
   82faa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   82fac:	2300      	movs	r3, #0
   82fae:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   82fb0:	68fb      	ldr	r3, [r7, #12]
   82fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82fb4:	2b00      	cmp	r3, #0
   82fb6:	d10d      	bne.n	82fd4 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82fb8:	68fb      	ldr	r3, [r7, #12]
   82fba:	681b      	ldr	r3, [r3, #0]
   82fbc:	2b00      	cmp	r3, #0
   82fbe:	d152      	bne.n	83066 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   82fc0:	68fb      	ldr	r3, [r7, #12]
   82fc2:	685b      	ldr	r3, [r3, #4]
   82fc4:	4618      	mov	r0, r3
   82fc6:	4b2d      	ldr	r3, [pc, #180]	; (8307c <prvCopyDataToQueue+0xdc>)
   82fc8:	4798      	blx	r3
   82fca:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   82fcc:	68fb      	ldr	r3, [r7, #12]
   82fce:	2200      	movs	r2, #0
   82fd0:	605a      	str	r2, [r3, #4]
   82fd2:	e048      	b.n	83066 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   82fd4:	687b      	ldr	r3, [r7, #4]
   82fd6:	2b00      	cmp	r3, #0
   82fd8:	d11a      	bne.n	83010 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   82fda:	68fb      	ldr	r3, [r7, #12]
   82fdc:	689a      	ldr	r2, [r3, #8]
   82fde:	68fb      	ldr	r3, [r7, #12]
   82fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82fe2:	4610      	mov	r0, r2
   82fe4:	68b9      	ldr	r1, [r7, #8]
   82fe6:	461a      	mov	r2, r3
   82fe8:	4b25      	ldr	r3, [pc, #148]	; (83080 <prvCopyDataToQueue+0xe0>)
   82fea:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   82fec:	68fb      	ldr	r3, [r7, #12]
   82fee:	689a      	ldr	r2, [r3, #8]
   82ff0:	68fb      	ldr	r3, [r7, #12]
   82ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82ff4:	441a      	add	r2, r3
   82ff6:	68fb      	ldr	r3, [r7, #12]
   82ff8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   82ffa:	68fb      	ldr	r3, [r7, #12]
   82ffc:	689a      	ldr	r2, [r3, #8]
   82ffe:	68fb      	ldr	r3, [r7, #12]
   83000:	685b      	ldr	r3, [r3, #4]
   83002:	429a      	cmp	r2, r3
   83004:	d32f      	bcc.n	83066 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83006:	68fb      	ldr	r3, [r7, #12]
   83008:	681a      	ldr	r2, [r3, #0]
   8300a:	68fb      	ldr	r3, [r7, #12]
   8300c:	609a      	str	r2, [r3, #8]
   8300e:	e02a      	b.n	83066 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83010:	68fb      	ldr	r3, [r7, #12]
   83012:	68da      	ldr	r2, [r3, #12]
   83014:	68fb      	ldr	r3, [r7, #12]
   83016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83018:	4610      	mov	r0, r2
   8301a:	68b9      	ldr	r1, [r7, #8]
   8301c:	461a      	mov	r2, r3
   8301e:	4b18      	ldr	r3, [pc, #96]	; (83080 <prvCopyDataToQueue+0xe0>)
   83020:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83022:	68fb      	ldr	r3, [r7, #12]
   83024:	68da      	ldr	r2, [r3, #12]
   83026:	68fb      	ldr	r3, [r7, #12]
   83028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8302a:	425b      	negs	r3, r3
   8302c:	441a      	add	r2, r3
   8302e:	68fb      	ldr	r3, [r7, #12]
   83030:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83032:	68fb      	ldr	r3, [r7, #12]
   83034:	68da      	ldr	r2, [r3, #12]
   83036:	68fb      	ldr	r3, [r7, #12]
   83038:	681b      	ldr	r3, [r3, #0]
   8303a:	429a      	cmp	r2, r3
   8303c:	d207      	bcs.n	8304e <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8303e:	68fb      	ldr	r3, [r7, #12]
   83040:	685a      	ldr	r2, [r3, #4]
   83042:	68fb      	ldr	r3, [r7, #12]
   83044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83046:	425b      	negs	r3, r3
   83048:	441a      	add	r2, r3
   8304a:	68fb      	ldr	r3, [r7, #12]
   8304c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   8304e:	687b      	ldr	r3, [r7, #4]
   83050:	2b02      	cmp	r3, #2
   83052:	d108      	bne.n	83066 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83054:	68fb      	ldr	r3, [r7, #12]
   83056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83058:	2b00      	cmp	r3, #0
   8305a:	d004      	beq.n	83066 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   8305c:	68fb      	ldr	r3, [r7, #12]
   8305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83060:	1e5a      	subs	r2, r3, #1
   83062:	68fb      	ldr	r3, [r7, #12]
   83064:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   83066:	68fb      	ldr	r3, [r7, #12]
   83068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8306a:	1c5a      	adds	r2, r3, #1
   8306c:	68fb      	ldr	r3, [r7, #12]
   8306e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83070:	697b      	ldr	r3, [r7, #20]
}
   83072:	4618      	mov	r0, r3
   83074:	3718      	adds	r7, #24
   83076:	46bd      	mov	sp, r7
   83078:	bd80      	pop	{r7, pc}
   8307a:	bf00      	nop
   8307c:	00084059 	.word	0x00084059
   83080:	00085261 	.word	0x00085261

00083084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83084:	b580      	push	{r7, lr}
   83086:	b082      	sub	sp, #8
   83088:	af00      	add	r7, sp, #0
   8308a:	6078      	str	r0, [r7, #4]
   8308c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   8308e:	687b      	ldr	r3, [r7, #4]
   83090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83092:	2b00      	cmp	r3, #0
   83094:	d019      	beq.n	830ca <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83096:	687b      	ldr	r3, [r7, #4]
   83098:	68da      	ldr	r2, [r3, #12]
   8309a:	687b      	ldr	r3, [r7, #4]
   8309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8309e:	441a      	add	r2, r3
   830a0:	687b      	ldr	r3, [r7, #4]
   830a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   830a4:	687b      	ldr	r3, [r7, #4]
   830a6:	68da      	ldr	r2, [r3, #12]
   830a8:	687b      	ldr	r3, [r7, #4]
   830aa:	685b      	ldr	r3, [r3, #4]
   830ac:	429a      	cmp	r2, r3
   830ae:	d303      	bcc.n	830b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   830b0:	687b      	ldr	r3, [r7, #4]
   830b2:	681a      	ldr	r2, [r3, #0]
   830b4:	687b      	ldr	r3, [r7, #4]
   830b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   830b8:	687b      	ldr	r3, [r7, #4]
   830ba:	68da      	ldr	r2, [r3, #12]
   830bc:	687b      	ldr	r3, [r7, #4]
   830be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   830c0:	6838      	ldr	r0, [r7, #0]
   830c2:	4611      	mov	r1, r2
   830c4:	461a      	mov	r2, r3
   830c6:	4b02      	ldr	r3, [pc, #8]	; (830d0 <prvCopyDataFromQueue+0x4c>)
   830c8:	4798      	blx	r3
	}
}
   830ca:	3708      	adds	r7, #8
   830cc:	46bd      	mov	sp, r7
   830ce:	bd80      	pop	{r7, pc}
   830d0:	00085261 	.word	0x00085261

000830d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   830d4:	b580      	push	{r7, lr}
   830d6:	b082      	sub	sp, #8
   830d8:	af00      	add	r7, sp, #0
   830da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   830dc:	4b23      	ldr	r3, [pc, #140]	; (8316c <prvUnlockQueue+0x98>)
   830de:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   830e0:	e014      	b.n	8310c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   830e2:	687b      	ldr	r3, [r7, #4]
   830e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   830e6:	2b00      	cmp	r3, #0
   830e8:	d00a      	beq.n	83100 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   830ea:	687b      	ldr	r3, [r7, #4]
   830ec:	3324      	adds	r3, #36	; 0x24
   830ee:	4618      	mov	r0, r3
   830f0:	4b1f      	ldr	r3, [pc, #124]	; (83170 <prvUnlockQueue+0x9c>)
   830f2:	4798      	blx	r3
   830f4:	4603      	mov	r3, r0
   830f6:	2b00      	cmp	r3, #0
   830f8:	d003      	beq.n	83102 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   830fa:	4b1e      	ldr	r3, [pc, #120]	; (83174 <prvUnlockQueue+0xa0>)
   830fc:	4798      	blx	r3
   830fe:	e000      	b.n	83102 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83100:	e008      	b.n	83114 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83102:	687b      	ldr	r3, [r7, #4]
   83104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83106:	1e5a      	subs	r2, r3, #1
   83108:	687b      	ldr	r3, [r7, #4]
   8310a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8310c:	687b      	ldr	r3, [r7, #4]
   8310e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83110:	2b00      	cmp	r3, #0
   83112:	dce6      	bgt.n	830e2 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83114:	687b      	ldr	r3, [r7, #4]
   83116:	f04f 32ff 	mov.w	r2, #4294967295
   8311a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8311c:	4b16      	ldr	r3, [pc, #88]	; (83178 <prvUnlockQueue+0xa4>)
   8311e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83120:	4b12      	ldr	r3, [pc, #72]	; (8316c <prvUnlockQueue+0x98>)
   83122:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83124:	e014      	b.n	83150 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83126:	687b      	ldr	r3, [r7, #4]
   83128:	691b      	ldr	r3, [r3, #16]
   8312a:	2b00      	cmp	r3, #0
   8312c:	d00f      	beq.n	8314e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8312e:	687b      	ldr	r3, [r7, #4]
   83130:	3310      	adds	r3, #16
   83132:	4618      	mov	r0, r3
   83134:	4b0e      	ldr	r3, [pc, #56]	; (83170 <prvUnlockQueue+0x9c>)
   83136:	4798      	blx	r3
   83138:	4603      	mov	r3, r0
   8313a:	2b00      	cmp	r3, #0
   8313c:	d001      	beq.n	83142 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   8313e:	4b0d      	ldr	r3, [pc, #52]	; (83174 <prvUnlockQueue+0xa0>)
   83140:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83142:	687b      	ldr	r3, [r7, #4]
   83144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83146:	1e5a      	subs	r2, r3, #1
   83148:	687b      	ldr	r3, [r7, #4]
   8314a:	645a      	str	r2, [r3, #68]	; 0x44
   8314c:	e000      	b.n	83150 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   8314e:	e003      	b.n	83158 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83150:	687b      	ldr	r3, [r7, #4]
   83152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83154:	2b00      	cmp	r3, #0
   83156:	dce6      	bgt.n	83126 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83158:	687b      	ldr	r3, [r7, #4]
   8315a:	f04f 32ff 	mov.w	r2, #4294967295
   8315e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83160:	4b05      	ldr	r3, [pc, #20]	; (83178 <prvUnlockQueue+0xa4>)
   83162:	4798      	blx	r3
}
   83164:	3708      	adds	r7, #8
   83166:	46bd      	mov	sp, r7
   83168:	bd80      	pop	{r7, pc}
   8316a:	bf00      	nop
   8316c:	00082461 	.word	0x00082461
   83170:	00083a51 	.word	0x00083a51
   83174:	00083bf9 	.word	0x00083bf9
   83178:	000824a5 	.word	0x000824a5

0008317c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   8317c:	b580      	push	{r7, lr}
   8317e:	b084      	sub	sp, #16
   83180:	af00      	add	r7, sp, #0
   83182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83184:	4b08      	ldr	r3, [pc, #32]	; (831a8 <prvIsQueueEmpty+0x2c>)
   83186:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83188:	687b      	ldr	r3, [r7, #4]
   8318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8318c:	2b00      	cmp	r3, #0
   8318e:	d102      	bne.n	83196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   83190:	2301      	movs	r3, #1
   83192:	60fb      	str	r3, [r7, #12]
   83194:	e001      	b.n	8319a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   83196:	2300      	movs	r3, #0
   83198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8319a:	4b04      	ldr	r3, [pc, #16]	; (831ac <prvIsQueueEmpty+0x30>)
   8319c:	4798      	blx	r3

	return xReturn;
   8319e:	68fb      	ldr	r3, [r7, #12]
}
   831a0:	4618      	mov	r0, r3
   831a2:	3710      	adds	r7, #16
   831a4:	46bd      	mov	sp, r7
   831a6:	bd80      	pop	{r7, pc}
   831a8:	00082461 	.word	0x00082461
   831ac:	000824a5 	.word	0x000824a5

000831b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   831b0:	b580      	push	{r7, lr}
   831b2:	b084      	sub	sp, #16
   831b4:	af00      	add	r7, sp, #0
   831b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   831b8:	4b09      	ldr	r3, [pc, #36]	; (831e0 <prvIsQueueFull+0x30>)
   831ba:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   831bc:	687b      	ldr	r3, [r7, #4]
   831be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   831c0:	687b      	ldr	r3, [r7, #4]
   831c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   831c4:	429a      	cmp	r2, r3
   831c6:	d102      	bne.n	831ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   831c8:	2301      	movs	r3, #1
   831ca:	60fb      	str	r3, [r7, #12]
   831cc:	e001      	b.n	831d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   831ce:	2300      	movs	r3, #0
   831d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   831d2:	4b04      	ldr	r3, [pc, #16]	; (831e4 <prvIsQueueFull+0x34>)
   831d4:	4798      	blx	r3

	return xReturn;
   831d6:	68fb      	ldr	r3, [r7, #12]
}
   831d8:	4618      	mov	r0, r3
   831da:	3710      	adds	r7, #16
   831dc:	46bd      	mov	sp, r7
   831de:	bd80      	pop	{r7, pc}
   831e0:	00082461 	.word	0x00082461
   831e4:	000824a5 	.word	0x000824a5

000831e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   831e8:	b580      	push	{r7, lr}
   831ea:	b084      	sub	sp, #16
   831ec:	af00      	add	r7, sp, #0
   831ee:	6078      	str	r0, [r7, #4]
   831f0:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   831f2:	687b      	ldr	r3, [r7, #4]
   831f4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   831f6:	4b12      	ldr	r3, [pc, #72]	; (83240 <vQueueWaitForMessageRestricted+0x58>)
   831f8:	4798      	blx	r3
   831fa:	68fb      	ldr	r3, [r7, #12]
   831fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   831fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   83202:	d102      	bne.n	8320a <vQueueWaitForMessageRestricted+0x22>
   83204:	68fb      	ldr	r3, [r7, #12]
   83206:	2200      	movs	r2, #0
   83208:	645a      	str	r2, [r3, #68]	; 0x44
   8320a:	68fb      	ldr	r3, [r7, #12]
   8320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8320e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83212:	d102      	bne.n	8321a <vQueueWaitForMessageRestricted+0x32>
   83214:	68fb      	ldr	r3, [r7, #12]
   83216:	2200      	movs	r2, #0
   83218:	649a      	str	r2, [r3, #72]	; 0x48
   8321a:	4b0a      	ldr	r3, [pc, #40]	; (83244 <vQueueWaitForMessageRestricted+0x5c>)
   8321c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   8321e:	68fb      	ldr	r3, [r7, #12]
   83220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83222:	2b00      	cmp	r3, #0
   83224:	d105      	bne.n	83232 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83226:	68fb      	ldr	r3, [r7, #12]
   83228:	3324      	adds	r3, #36	; 0x24
   8322a:	4618      	mov	r0, r3
   8322c:	6839      	ldr	r1, [r7, #0]
   8322e:	4b06      	ldr	r3, [pc, #24]	; (83248 <vQueueWaitForMessageRestricted+0x60>)
   83230:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   83232:	68f8      	ldr	r0, [r7, #12]
   83234:	4b05      	ldr	r3, [pc, #20]	; (8324c <vQueueWaitForMessageRestricted+0x64>)
   83236:	4798      	blx	r3
	}
   83238:	3710      	adds	r7, #16
   8323a:	46bd      	mov	sp, r7
   8323c:	bd80      	pop	{r7, pc}
   8323e:	bf00      	nop
   83240:	00082461 	.word	0x00082461
   83244:	000824a5 	.word	0x000824a5
   83248:	000839d1 	.word	0x000839d1
   8324c:	000830d5 	.word	0x000830d5

00083250 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83250:	b590      	push	{r4, r7, lr}
   83252:	b08b      	sub	sp, #44	; 0x2c
   83254:	af02      	add	r7, sp, #8
   83256:	60f8      	str	r0, [r7, #12]
   83258:	60b9      	str	r1, [r7, #8]
   8325a:	603b      	str	r3, [r7, #0]
   8325c:	4613      	mov	r3, r2
   8325e:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   83260:	68fb      	ldr	r3, [r7, #12]
   83262:	2b00      	cmp	r3, #0
   83264:	d102      	bne.n	8326c <xTaskGenericCreate+0x1c>
   83266:	4b4b      	ldr	r3, [pc, #300]	; (83394 <xTaskGenericCreate+0x144>)
   83268:	4798      	blx	r3
   8326a:	e7fe      	b.n	8326a <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   8326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8326e:	2b04      	cmp	r3, #4
   83270:	d902      	bls.n	83278 <xTaskGenericCreate+0x28>
   83272:	4b48      	ldr	r3, [pc, #288]	; (83394 <xTaskGenericCreate+0x144>)
   83274:	4798      	blx	r3
   83276:	e7fe      	b.n	83276 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   83278:	88fb      	ldrh	r3, [r7, #6]
   8327a:	4618      	mov	r0, r3
   8327c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   8327e:	4b46      	ldr	r3, [pc, #280]	; (83398 <xTaskGenericCreate+0x148>)
   83280:	4798      	blx	r3
   83282:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   83284:	69bb      	ldr	r3, [r7, #24]
   83286:	2b00      	cmp	r3, #0
   83288:	d06d      	beq.n	83366 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   8328a:	69bb      	ldr	r3, [r7, #24]
   8328c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8328e:	88fb      	ldrh	r3, [r7, #6]
   83290:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   83294:	3b01      	subs	r3, #1
   83296:	009b      	lsls	r3, r3, #2
   83298:	4413      	add	r3, r2
   8329a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   8329c:	697b      	ldr	r3, [r7, #20]
   8329e:	f023 0307 	bic.w	r3, r3, #7
   832a2:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   832a4:	697b      	ldr	r3, [r7, #20]
   832a6:	f003 0307 	and.w	r3, r3, #7
   832aa:	2b00      	cmp	r3, #0
   832ac:	d002      	beq.n	832b4 <xTaskGenericCreate+0x64>
   832ae:	4b39      	ldr	r3, [pc, #228]	; (83394 <xTaskGenericCreate+0x144>)
   832b0:	4798      	blx	r3
   832b2:	e7fe      	b.n	832b2 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   832b4:	88fb      	ldrh	r3, [r7, #6]
   832b6:	9300      	str	r3, [sp, #0]
   832b8:	69b8      	ldr	r0, [r7, #24]
   832ba:	68b9      	ldr	r1, [r7, #8]
   832bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   832be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   832c0:	4c36      	ldr	r4, [pc, #216]	; (8339c <xTaskGenericCreate+0x14c>)
   832c2:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   832c4:	6978      	ldr	r0, [r7, #20]
   832c6:	68f9      	ldr	r1, [r7, #12]
   832c8:	683a      	ldr	r2, [r7, #0]
   832ca:	4b35      	ldr	r3, [pc, #212]	; (833a0 <xTaskGenericCreate+0x150>)
   832cc:	4798      	blx	r3
   832ce:	4602      	mov	r2, r0
   832d0:	69bb      	ldr	r3, [r7, #24]
   832d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   832d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   832d6:	2b00      	cmp	r3, #0
   832d8:	d002      	beq.n	832e0 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   832da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   832dc:	69ba      	ldr	r2, [r7, #24]
   832de:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   832e0:	4b30      	ldr	r3, [pc, #192]	; (833a4 <xTaskGenericCreate+0x154>)
   832e2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   832e4:	4b30      	ldr	r3, [pc, #192]	; (833a8 <xTaskGenericCreate+0x158>)
   832e6:	681b      	ldr	r3, [r3, #0]
   832e8:	1c5a      	adds	r2, r3, #1
   832ea:	4b2f      	ldr	r3, [pc, #188]	; (833a8 <xTaskGenericCreate+0x158>)
   832ec:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   832ee:	4b2f      	ldr	r3, [pc, #188]	; (833ac <xTaskGenericCreate+0x15c>)
   832f0:	681b      	ldr	r3, [r3, #0]
   832f2:	2b00      	cmp	r3, #0
   832f4:	d109      	bne.n	8330a <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   832f6:	4b2d      	ldr	r3, [pc, #180]	; (833ac <xTaskGenericCreate+0x15c>)
   832f8:	69ba      	ldr	r2, [r7, #24]
   832fa:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   832fc:	4b2a      	ldr	r3, [pc, #168]	; (833a8 <xTaskGenericCreate+0x158>)
   832fe:	681b      	ldr	r3, [r3, #0]
   83300:	2b01      	cmp	r3, #1
   83302:	d10f      	bne.n	83324 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83304:	4b2a      	ldr	r3, [pc, #168]	; (833b0 <xTaskGenericCreate+0x160>)
   83306:	4798      	blx	r3
   83308:	e00c      	b.n	83324 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8330a:	4b2a      	ldr	r3, [pc, #168]	; (833b4 <xTaskGenericCreate+0x164>)
   8330c:	681b      	ldr	r3, [r3, #0]
   8330e:	2b00      	cmp	r3, #0
   83310:	d108      	bne.n	83324 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   83312:	4b26      	ldr	r3, [pc, #152]	; (833ac <xTaskGenericCreate+0x15c>)
   83314:	681b      	ldr	r3, [r3, #0]
   83316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8331a:	429a      	cmp	r2, r3
   8331c:	d802      	bhi.n	83324 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   8331e:	4b23      	ldr	r3, [pc, #140]	; (833ac <xTaskGenericCreate+0x15c>)
   83320:	69ba      	ldr	r2, [r7, #24]
   83322:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83324:	4b24      	ldr	r3, [pc, #144]	; (833b8 <xTaskGenericCreate+0x168>)
   83326:	681b      	ldr	r3, [r3, #0]
   83328:	1c5a      	adds	r2, r3, #1
   8332a:	4b23      	ldr	r3, [pc, #140]	; (833b8 <xTaskGenericCreate+0x168>)
   8332c:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   8332e:	69bb      	ldr	r3, [r7, #24]
   83330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83332:	2201      	movs	r2, #1
   83334:	409a      	lsls	r2, r3
   83336:	4b21      	ldr	r3, [pc, #132]	; (833bc <xTaskGenericCreate+0x16c>)
   83338:	681b      	ldr	r3, [r3, #0]
   8333a:	431a      	orrs	r2, r3
   8333c:	4b1f      	ldr	r3, [pc, #124]	; (833bc <xTaskGenericCreate+0x16c>)
   8333e:	601a      	str	r2, [r3, #0]
   83340:	69bb      	ldr	r3, [r7, #24]
   83342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83344:	4613      	mov	r3, r2
   83346:	009b      	lsls	r3, r3, #2
   83348:	4413      	add	r3, r2
   8334a:	009b      	lsls	r3, r3, #2
   8334c:	4a1c      	ldr	r2, [pc, #112]	; (833c0 <xTaskGenericCreate+0x170>)
   8334e:	441a      	add	r2, r3
   83350:	69bb      	ldr	r3, [r7, #24]
   83352:	3304      	adds	r3, #4
   83354:	4610      	mov	r0, r2
   83356:	4619      	mov	r1, r3
   83358:	4b1a      	ldr	r3, [pc, #104]	; (833c4 <xTaskGenericCreate+0x174>)
   8335a:	4798      	blx	r3

			xReturn = pdPASS;
   8335c:	2301      	movs	r3, #1
   8335e:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   83360:	4b19      	ldr	r3, [pc, #100]	; (833c8 <xTaskGenericCreate+0x178>)
   83362:	4798      	blx	r3
   83364:	e002      	b.n	8336c <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   83366:	f04f 33ff 	mov.w	r3, #4294967295
   8336a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   8336c:	69fb      	ldr	r3, [r7, #28]
   8336e:	2b01      	cmp	r3, #1
   83370:	d10b      	bne.n	8338a <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   83372:	4b10      	ldr	r3, [pc, #64]	; (833b4 <xTaskGenericCreate+0x164>)
   83374:	681b      	ldr	r3, [r3, #0]
   83376:	2b00      	cmp	r3, #0
   83378:	d007      	beq.n	8338a <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8337a:	4b0c      	ldr	r3, [pc, #48]	; (833ac <xTaskGenericCreate+0x15c>)
   8337c:	681b      	ldr	r3, [r3, #0]
   8337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83382:	429a      	cmp	r2, r3
   83384:	d201      	bcs.n	8338a <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   83386:	4b11      	ldr	r3, [pc, #68]	; (833cc <xTaskGenericCreate+0x17c>)
   83388:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   8338a:	69fb      	ldr	r3, [r7, #28]
}
   8338c:	4618      	mov	r0, r3
   8338e:	3724      	adds	r7, #36	; 0x24
   83390:	46bd      	mov	sp, r7
   83392:	bd90      	pop	{r4, r7, pc}
   83394:	000824dd 	.word	0x000824dd
   83398:	00083e4d 	.word	0x00083e4d
   8339c:	00083c39 	.word	0x00083c39
   833a0:	000822b9 	.word	0x000822b9
   833a4:	00082461 	.word	0x00082461
   833a8:	2007a5d8 	.word	0x2007a5d8
   833ac:	2007a500 	.word	0x2007a500
   833b0:	00083cd1 	.word	0x00083cd1
   833b4:	2007a5e4 	.word	0x2007a5e4
   833b8:	2007a5f4 	.word	0x2007a5f4
   833bc:	2007a5e0 	.word	0x2007a5e0
   833c0:	2007a504 	.word	0x2007a504
   833c4:	000821ad 	.word	0x000821ad
   833c8:	000824a5 	.word	0x000824a5
   833cc:	00082441 	.word	0x00082441

000833d0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   833d0:	b580      	push	{r7, lr}
   833d2:	b086      	sub	sp, #24
   833d4:	af00      	add	r7, sp, #0
   833d6:	6078      	str	r0, [r7, #4]
   833d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   833da:	2300      	movs	r3, #0
   833dc:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   833de:	687b      	ldr	r3, [r7, #4]
   833e0:	2b00      	cmp	r3, #0
   833e2:	d102      	bne.n	833ea <vTaskDelayUntil+0x1a>
   833e4:	4b2f      	ldr	r3, [pc, #188]	; (834a4 <vTaskDelayUntil+0xd4>)
   833e6:	4798      	blx	r3
   833e8:	e7fe      	b.n	833e8 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   833ea:	683b      	ldr	r3, [r7, #0]
   833ec:	2b00      	cmp	r3, #0
   833ee:	d102      	bne.n	833f6 <vTaskDelayUntil+0x26>
   833f0:	4b2c      	ldr	r3, [pc, #176]	; (834a4 <vTaskDelayUntil+0xd4>)
   833f2:	4798      	blx	r3
   833f4:	e7fe      	b.n	833f4 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   833f6:	4b2c      	ldr	r3, [pc, #176]	; (834a8 <vTaskDelayUntil+0xd8>)
   833f8:	681b      	ldr	r3, [r3, #0]
   833fa:	2b00      	cmp	r3, #0
   833fc:	d002      	beq.n	83404 <vTaskDelayUntil+0x34>
   833fe:	4b29      	ldr	r3, [pc, #164]	; (834a4 <vTaskDelayUntil+0xd4>)
   83400:	4798      	blx	r3
   83402:	e7fe      	b.n	83402 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   83404:	4b29      	ldr	r3, [pc, #164]	; (834ac <vTaskDelayUntil+0xdc>)
   83406:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   83408:	4b29      	ldr	r3, [pc, #164]	; (834b0 <vTaskDelayUntil+0xe0>)
   8340a:	681b      	ldr	r3, [r3, #0]
   8340c:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8340e:	687b      	ldr	r3, [r7, #4]
   83410:	681a      	ldr	r2, [r3, #0]
   83412:	683b      	ldr	r3, [r7, #0]
   83414:	4413      	add	r3, r2
   83416:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   83418:	687b      	ldr	r3, [r7, #4]
   8341a:	681a      	ldr	r2, [r3, #0]
   8341c:	693b      	ldr	r3, [r7, #16]
   8341e:	429a      	cmp	r2, r3
   83420:	d90b      	bls.n	8343a <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   83422:	687b      	ldr	r3, [r7, #4]
   83424:	681a      	ldr	r2, [r3, #0]
   83426:	68fb      	ldr	r3, [r7, #12]
   83428:	429a      	cmp	r2, r3
   8342a:	d911      	bls.n	83450 <vTaskDelayUntil+0x80>
   8342c:	68fa      	ldr	r2, [r7, #12]
   8342e:	693b      	ldr	r3, [r7, #16]
   83430:	429a      	cmp	r2, r3
   83432:	d90d      	bls.n	83450 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83434:	2301      	movs	r3, #1
   83436:	617b      	str	r3, [r7, #20]
   83438:	e00a      	b.n	83450 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   8343a:	687b      	ldr	r3, [r7, #4]
   8343c:	681a      	ldr	r2, [r3, #0]
   8343e:	68fb      	ldr	r3, [r7, #12]
   83440:	429a      	cmp	r2, r3
   83442:	d803      	bhi.n	8344c <vTaskDelayUntil+0x7c>
   83444:	68fa      	ldr	r2, [r7, #12]
   83446:	693b      	ldr	r3, [r7, #16]
   83448:	429a      	cmp	r2, r3
   8344a:	d901      	bls.n	83450 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   8344c:	2301      	movs	r3, #1
   8344e:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   83450:	687b      	ldr	r3, [r7, #4]
   83452:	68fa      	ldr	r2, [r7, #12]
   83454:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   83456:	697b      	ldr	r3, [r7, #20]
   83458:	2b00      	cmp	r3, #0
   8345a:	d017      	beq.n	8348c <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8345c:	4b15      	ldr	r3, [pc, #84]	; (834b4 <vTaskDelayUntil+0xe4>)
   8345e:	681b      	ldr	r3, [r3, #0]
   83460:	3304      	adds	r3, #4
   83462:	4618      	mov	r0, r3
   83464:	4b14      	ldr	r3, [pc, #80]	; (834b8 <vTaskDelayUntil+0xe8>)
   83466:	4798      	blx	r3
   83468:	4603      	mov	r3, r0
   8346a:	2b00      	cmp	r3, #0
   8346c:	d10b      	bne.n	83486 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8346e:	4b11      	ldr	r3, [pc, #68]	; (834b4 <vTaskDelayUntil+0xe4>)
   83470:	681b      	ldr	r3, [r3, #0]
   83472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83474:	2201      	movs	r2, #1
   83476:	fa02 f303 	lsl.w	r3, r2, r3
   8347a:	43da      	mvns	r2, r3
   8347c:	4b0f      	ldr	r3, [pc, #60]	; (834bc <vTaskDelayUntil+0xec>)
   8347e:	681b      	ldr	r3, [r3, #0]
   83480:	401a      	ands	r2, r3
   83482:	4b0e      	ldr	r3, [pc, #56]	; (834bc <vTaskDelayUntil+0xec>)
   83484:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   83486:	68f8      	ldr	r0, [r7, #12]
   83488:	4b0d      	ldr	r3, [pc, #52]	; (834c0 <vTaskDelayUntil+0xf0>)
   8348a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   8348c:	4b0d      	ldr	r3, [pc, #52]	; (834c4 <vTaskDelayUntil+0xf4>)
   8348e:	4798      	blx	r3
   83490:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   83492:	68bb      	ldr	r3, [r7, #8]
   83494:	2b00      	cmp	r3, #0
   83496:	d101      	bne.n	8349c <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   83498:	4b0b      	ldr	r3, [pc, #44]	; (834c8 <vTaskDelayUntil+0xf8>)
   8349a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   8349c:	3718      	adds	r7, #24
   8349e:	46bd      	mov	sp, r7
   834a0:	bd80      	pop	{r7, pc}
   834a2:	bf00      	nop
   834a4:	000824dd 	.word	0x000824dd
   834a8:	2007a5f8 	.word	0x2007a5f8
   834ac:	0008354d 	.word	0x0008354d
   834b0:	2007a5dc 	.word	0x2007a5dc
   834b4:	2007a500 	.word	0x2007a500
   834b8:	00082265 	.word	0x00082265
   834bc:	2007a5e0 	.word	0x2007a5e0
   834c0:	00083ddd 	.word	0x00083ddd
   834c4:	00083569 	.word	0x00083569
   834c8:	00082441 	.word	0x00082441

000834cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   834cc:	b590      	push	{r4, r7, lr}
   834ce:	b087      	sub	sp, #28
   834d0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   834d2:	2300      	movs	r3, #0
   834d4:	9300      	str	r3, [sp, #0]
   834d6:	2300      	movs	r3, #0
   834d8:	9301      	str	r3, [sp, #4]
   834da:	2300      	movs	r3, #0
   834dc:	9302      	str	r3, [sp, #8]
   834de:	2300      	movs	r3, #0
   834e0:	9303      	str	r3, [sp, #12]
   834e2:	4812      	ldr	r0, [pc, #72]	; (8352c <vTaskStartScheduler+0x60>)
   834e4:	4912      	ldr	r1, [pc, #72]	; (83530 <vTaskStartScheduler+0x64>)
   834e6:	2282      	movs	r2, #130	; 0x82
   834e8:	2300      	movs	r3, #0
   834ea:	4c12      	ldr	r4, [pc, #72]	; (83534 <vTaskStartScheduler+0x68>)
   834ec:	47a0      	blx	r4
   834ee:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   834f0:	687b      	ldr	r3, [r7, #4]
   834f2:	2b01      	cmp	r3, #1
   834f4:	d102      	bne.n	834fc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   834f6:	4b10      	ldr	r3, [pc, #64]	; (83538 <vTaskStartScheduler+0x6c>)
   834f8:	4798      	blx	r3
   834fa:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   834fc:	687b      	ldr	r3, [r7, #4]
   834fe:	2b01      	cmp	r3, #1
   83500:	d10a      	bne.n	83518 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   83502:	4b0e      	ldr	r3, [pc, #56]	; (8353c <vTaskStartScheduler+0x70>)
   83504:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   83506:	4b0e      	ldr	r3, [pc, #56]	; (83540 <vTaskStartScheduler+0x74>)
   83508:	2201      	movs	r2, #1
   8350a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   8350c:	4b0d      	ldr	r3, [pc, #52]	; (83544 <vTaskStartScheduler+0x78>)
   8350e:	2200      	movs	r2, #0
   83510:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   83512:	4b0d      	ldr	r3, [pc, #52]	; (83548 <vTaskStartScheduler+0x7c>)
   83514:	4798      	blx	r3
   83516:	e005      	b.n	83524 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   83518:	687b      	ldr	r3, [r7, #4]
   8351a:	2b00      	cmp	r3, #0
   8351c:	d102      	bne.n	83524 <vTaskStartScheduler+0x58>
   8351e:	4b07      	ldr	r3, [pc, #28]	; (8353c <vTaskStartScheduler+0x70>)
   83520:	4798      	blx	r3
   83522:	e7fe      	b.n	83522 <vTaskStartScheduler+0x56>
	}
}
   83524:	370c      	adds	r7, #12
   83526:	46bd      	mov	sp, r7
   83528:	bd90      	pop	{r4, r7, pc}
   8352a:	bf00      	nop
   8352c:	00083c11 	.word	0x00083c11
   83530:	000855f8 	.word	0x000855f8
   83534:	00083251 	.word	0x00083251
   83538:	00084165 	.word	0x00084165
   8353c:	000824dd 	.word	0x000824dd
   83540:	2007a5e4 	.word	0x2007a5e4
   83544:	2007a5dc 	.word	0x2007a5dc
   83548:	00082379 	.word	0x00082379

0008354c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   8354c:	b480      	push	{r7}
   8354e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   83550:	4b04      	ldr	r3, [pc, #16]	; (83564 <vTaskSuspendAll+0x18>)
   83552:	681b      	ldr	r3, [r3, #0]
   83554:	1c5a      	adds	r2, r3, #1
   83556:	4b03      	ldr	r3, [pc, #12]	; (83564 <vTaskSuspendAll+0x18>)
   83558:	601a      	str	r2, [r3, #0]
}
   8355a:	46bd      	mov	sp, r7
   8355c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83560:	4770      	bx	lr
   83562:	bf00      	nop
   83564:	2007a5f8 	.word	0x2007a5f8

00083568 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   83568:	b580      	push	{r7, lr}
   8356a:	b082      	sub	sp, #8
   8356c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   8356e:	2300      	movs	r3, #0
   83570:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   83572:	4b37      	ldr	r3, [pc, #220]	; (83650 <xTaskResumeAll+0xe8>)
   83574:	681b      	ldr	r3, [r3, #0]
   83576:	2b00      	cmp	r3, #0
   83578:	d102      	bne.n	83580 <xTaskResumeAll+0x18>
   8357a:	4b36      	ldr	r3, [pc, #216]	; (83654 <xTaskResumeAll+0xec>)
   8357c:	4798      	blx	r3
   8357e:	e7fe      	b.n	8357e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   83580:	4b35      	ldr	r3, [pc, #212]	; (83658 <xTaskResumeAll+0xf0>)
   83582:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   83584:	4b32      	ldr	r3, [pc, #200]	; (83650 <xTaskResumeAll+0xe8>)
   83586:	681b      	ldr	r3, [r3, #0]
   83588:	1e5a      	subs	r2, r3, #1
   8358a:	4b31      	ldr	r3, [pc, #196]	; (83650 <xTaskResumeAll+0xe8>)
   8358c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8358e:	4b30      	ldr	r3, [pc, #192]	; (83650 <xTaskResumeAll+0xe8>)
   83590:	681b      	ldr	r3, [r3, #0]
   83592:	2b00      	cmp	r3, #0
   83594:	d155      	bne.n	83642 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   83596:	4b31      	ldr	r3, [pc, #196]	; (8365c <xTaskResumeAll+0xf4>)
   83598:	681b      	ldr	r3, [r3, #0]
   8359a:	2b00      	cmp	r3, #0
   8359c:	d051      	beq.n	83642 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   8359e:	e02e      	b.n	835fe <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   835a0:	4b2f      	ldr	r3, [pc, #188]	; (83660 <xTaskResumeAll+0xf8>)
   835a2:	68db      	ldr	r3, [r3, #12]
   835a4:	68db      	ldr	r3, [r3, #12]
   835a6:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   835a8:	683b      	ldr	r3, [r7, #0]
   835aa:	3318      	adds	r3, #24
   835ac:	4618      	mov	r0, r3
   835ae:	4b2d      	ldr	r3, [pc, #180]	; (83664 <xTaskResumeAll+0xfc>)
   835b0:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   835b2:	683b      	ldr	r3, [r7, #0]
   835b4:	3304      	adds	r3, #4
   835b6:	4618      	mov	r0, r3
   835b8:	4b2a      	ldr	r3, [pc, #168]	; (83664 <xTaskResumeAll+0xfc>)
   835ba:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   835bc:	683b      	ldr	r3, [r7, #0]
   835be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   835c0:	2201      	movs	r2, #1
   835c2:	409a      	lsls	r2, r3
   835c4:	4b28      	ldr	r3, [pc, #160]	; (83668 <xTaskResumeAll+0x100>)
   835c6:	681b      	ldr	r3, [r3, #0]
   835c8:	431a      	orrs	r2, r3
   835ca:	4b27      	ldr	r3, [pc, #156]	; (83668 <xTaskResumeAll+0x100>)
   835cc:	601a      	str	r2, [r3, #0]
   835ce:	683b      	ldr	r3, [r7, #0]
   835d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   835d2:	4613      	mov	r3, r2
   835d4:	009b      	lsls	r3, r3, #2
   835d6:	4413      	add	r3, r2
   835d8:	009b      	lsls	r3, r3, #2
   835da:	4a24      	ldr	r2, [pc, #144]	; (8366c <xTaskResumeAll+0x104>)
   835dc:	441a      	add	r2, r3
   835de:	683b      	ldr	r3, [r7, #0]
   835e0:	3304      	adds	r3, #4
   835e2:	4610      	mov	r0, r2
   835e4:	4619      	mov	r1, r3
   835e6:	4b22      	ldr	r3, [pc, #136]	; (83670 <xTaskResumeAll+0x108>)
   835e8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   835ea:	683b      	ldr	r3, [r7, #0]
   835ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   835ee:	4b21      	ldr	r3, [pc, #132]	; (83674 <xTaskResumeAll+0x10c>)
   835f0:	681b      	ldr	r3, [r3, #0]
   835f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   835f4:	429a      	cmp	r2, r3
   835f6:	d302      	bcc.n	835fe <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   835f8:	4b1f      	ldr	r3, [pc, #124]	; (83678 <xTaskResumeAll+0x110>)
   835fa:	2201      	movs	r2, #1
   835fc:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   835fe:	4b18      	ldr	r3, [pc, #96]	; (83660 <xTaskResumeAll+0xf8>)
   83600:	681b      	ldr	r3, [r3, #0]
   83602:	2b00      	cmp	r3, #0
   83604:	d1cc      	bne.n	835a0 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   83606:	4b1d      	ldr	r3, [pc, #116]	; (8367c <xTaskResumeAll+0x114>)
   83608:	681b      	ldr	r3, [r3, #0]
   8360a:	2b00      	cmp	r3, #0
   8360c:	d011      	beq.n	83632 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   8360e:	e00c      	b.n	8362a <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   83610:	4b1b      	ldr	r3, [pc, #108]	; (83680 <xTaskResumeAll+0x118>)
   83612:	4798      	blx	r3
   83614:	4603      	mov	r3, r0
   83616:	2b00      	cmp	r3, #0
   83618:	d002      	beq.n	83620 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   8361a:	4b17      	ldr	r3, [pc, #92]	; (83678 <xTaskResumeAll+0x110>)
   8361c:	2201      	movs	r2, #1
   8361e:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   83620:	4b16      	ldr	r3, [pc, #88]	; (8367c <xTaskResumeAll+0x114>)
   83622:	681b      	ldr	r3, [r3, #0]
   83624:	1e5a      	subs	r2, r3, #1
   83626:	4b15      	ldr	r3, [pc, #84]	; (8367c <xTaskResumeAll+0x114>)
   83628:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   8362a:	4b14      	ldr	r3, [pc, #80]	; (8367c <xTaskResumeAll+0x114>)
   8362c:	681b      	ldr	r3, [r3, #0]
   8362e:	2b00      	cmp	r3, #0
   83630:	d1ee      	bne.n	83610 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   83632:	4b11      	ldr	r3, [pc, #68]	; (83678 <xTaskResumeAll+0x110>)
   83634:	681b      	ldr	r3, [r3, #0]
   83636:	2b01      	cmp	r3, #1
   83638:	d103      	bne.n	83642 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   8363a:	2301      	movs	r3, #1
   8363c:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   8363e:	4b11      	ldr	r3, [pc, #68]	; (83684 <xTaskResumeAll+0x11c>)
   83640:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83642:	4b11      	ldr	r3, [pc, #68]	; (83688 <xTaskResumeAll+0x120>)
   83644:	4798      	blx	r3

	return xAlreadyYielded;
   83646:	687b      	ldr	r3, [r7, #4]
}
   83648:	4618      	mov	r0, r3
   8364a:	3708      	adds	r7, #8
   8364c:	46bd      	mov	sp, r7
   8364e:	bd80      	pop	{r7, pc}
   83650:	2007a5f8 	.word	0x2007a5f8
   83654:	000824dd 	.word	0x000824dd
   83658:	00082461 	.word	0x00082461
   8365c:	2007a5d8 	.word	0x2007a5d8
   83660:	2007a598 	.word	0x2007a598
   83664:	00082265 	.word	0x00082265
   83668:	2007a5e0 	.word	0x2007a5e0
   8366c:	2007a504 	.word	0x2007a504
   83670:	000821ad 	.word	0x000821ad
   83674:	2007a500 	.word	0x2007a500
   83678:	2007a5ec 	.word	0x2007a5ec
   8367c:	2007a5e8 	.word	0x2007a5e8
   83680:	000836b9 	.word	0x000836b9
   83684:	00082441 	.word	0x00082441
   83688:	000824a5 	.word	0x000824a5

0008368c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   8368c:	b580      	push	{r7, lr}
   8368e:	b082      	sub	sp, #8
   83690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   83692:	4b06      	ldr	r3, [pc, #24]	; (836ac <xTaskGetTickCount+0x20>)
   83694:	4798      	blx	r3
	{
		xTicks = xTickCount;
   83696:	4b06      	ldr	r3, [pc, #24]	; (836b0 <xTaskGetTickCount+0x24>)
   83698:	681b      	ldr	r3, [r3, #0]
   8369a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   8369c:	4b05      	ldr	r3, [pc, #20]	; (836b4 <xTaskGetTickCount+0x28>)
   8369e:	4798      	blx	r3

	return xTicks;
   836a0:	687b      	ldr	r3, [r7, #4]
}
   836a2:	4618      	mov	r0, r3
   836a4:	3708      	adds	r7, #8
   836a6:	46bd      	mov	sp, r7
   836a8:	bd80      	pop	{r7, pc}
   836aa:	bf00      	nop
   836ac:	00082461 	.word	0x00082461
   836b0:	2007a5dc 	.word	0x2007a5dc
   836b4:	000824a5 	.word	0x000824a5

000836b8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   836b8:	b580      	push	{r7, lr}
   836ba:	b086      	sub	sp, #24
   836bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   836be:	2300      	movs	r3, #0
   836c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   836c2:	4b4d      	ldr	r3, [pc, #308]	; (837f8 <xTaskIncrementTick+0x140>)
   836c4:	681b      	ldr	r3, [r3, #0]
   836c6:	2b00      	cmp	r3, #0
   836c8:	f040 8086 	bne.w	837d8 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   836cc:	4b4b      	ldr	r3, [pc, #300]	; (837fc <xTaskIncrementTick+0x144>)
   836ce:	681b      	ldr	r3, [r3, #0]
   836d0:	1c5a      	adds	r2, r3, #1
   836d2:	4b4a      	ldr	r3, [pc, #296]	; (837fc <xTaskIncrementTick+0x144>)
   836d4:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   836d6:	4b49      	ldr	r3, [pc, #292]	; (837fc <xTaskIncrementTick+0x144>)
   836d8:	681b      	ldr	r3, [r3, #0]
   836da:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   836dc:	693b      	ldr	r3, [r7, #16]
   836de:	2b00      	cmp	r3, #0
   836e0:	d118      	bne.n	83714 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   836e2:	4b47      	ldr	r3, [pc, #284]	; (83800 <xTaskIncrementTick+0x148>)
   836e4:	681b      	ldr	r3, [r3, #0]
   836e6:	681b      	ldr	r3, [r3, #0]
   836e8:	2b00      	cmp	r3, #0
   836ea:	d002      	beq.n	836f2 <xTaskIncrementTick+0x3a>
   836ec:	4b45      	ldr	r3, [pc, #276]	; (83804 <xTaskIncrementTick+0x14c>)
   836ee:	4798      	blx	r3
   836f0:	e7fe      	b.n	836f0 <xTaskIncrementTick+0x38>
   836f2:	4b43      	ldr	r3, [pc, #268]	; (83800 <xTaskIncrementTick+0x148>)
   836f4:	681b      	ldr	r3, [r3, #0]
   836f6:	60fb      	str	r3, [r7, #12]
   836f8:	4b43      	ldr	r3, [pc, #268]	; (83808 <xTaskIncrementTick+0x150>)
   836fa:	681a      	ldr	r2, [r3, #0]
   836fc:	4b40      	ldr	r3, [pc, #256]	; (83800 <xTaskIncrementTick+0x148>)
   836fe:	601a      	str	r2, [r3, #0]
   83700:	4b41      	ldr	r3, [pc, #260]	; (83808 <xTaskIncrementTick+0x150>)
   83702:	68fa      	ldr	r2, [r7, #12]
   83704:	601a      	str	r2, [r3, #0]
   83706:	4b41      	ldr	r3, [pc, #260]	; (8380c <xTaskIncrementTick+0x154>)
   83708:	681b      	ldr	r3, [r3, #0]
   8370a:	1c5a      	adds	r2, r3, #1
   8370c:	4b3f      	ldr	r3, [pc, #252]	; (8380c <xTaskIncrementTick+0x154>)
   8370e:	601a      	str	r2, [r3, #0]
   83710:	4b3f      	ldr	r3, [pc, #252]	; (83810 <xTaskIncrementTick+0x158>)
   83712:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   83714:	4b3f      	ldr	r3, [pc, #252]	; (83814 <xTaskIncrementTick+0x15c>)
   83716:	681b      	ldr	r3, [r3, #0]
   83718:	693a      	ldr	r2, [r7, #16]
   8371a:	429a      	cmp	r2, r3
   8371c:	d34d      	bcc.n	837ba <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8371e:	4b38      	ldr	r3, [pc, #224]	; (83800 <xTaskIncrementTick+0x148>)
   83720:	681b      	ldr	r3, [r3, #0]
   83722:	681b      	ldr	r3, [r3, #0]
   83724:	2b00      	cmp	r3, #0
   83726:	d101      	bne.n	8372c <xTaskIncrementTick+0x74>
   83728:	2301      	movs	r3, #1
   8372a:	e000      	b.n	8372e <xTaskIncrementTick+0x76>
   8372c:	2300      	movs	r3, #0
   8372e:	2b00      	cmp	r3, #0
   83730:	d004      	beq.n	8373c <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   83732:	4b38      	ldr	r3, [pc, #224]	; (83814 <xTaskIncrementTick+0x15c>)
   83734:	f04f 32ff 	mov.w	r2, #4294967295
   83738:	601a      	str	r2, [r3, #0]
						break;
   8373a:	e03e      	b.n	837ba <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8373c:	4b30      	ldr	r3, [pc, #192]	; (83800 <xTaskIncrementTick+0x148>)
   8373e:	681b      	ldr	r3, [r3, #0]
   83740:	68db      	ldr	r3, [r3, #12]
   83742:	68db      	ldr	r3, [r3, #12]
   83744:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   83746:	68bb      	ldr	r3, [r7, #8]
   83748:	685b      	ldr	r3, [r3, #4]
   8374a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   8374c:	693a      	ldr	r2, [r7, #16]
   8374e:	687b      	ldr	r3, [r7, #4]
   83750:	429a      	cmp	r2, r3
   83752:	d203      	bcs.n	8375c <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   83754:	4b2f      	ldr	r3, [pc, #188]	; (83814 <xTaskIncrementTick+0x15c>)
   83756:	687a      	ldr	r2, [r7, #4]
   83758:	601a      	str	r2, [r3, #0]
							break;
   8375a:	e02e      	b.n	837ba <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8375c:	68bb      	ldr	r3, [r7, #8]
   8375e:	3304      	adds	r3, #4
   83760:	4618      	mov	r0, r3
   83762:	4b2d      	ldr	r3, [pc, #180]	; (83818 <xTaskIncrementTick+0x160>)
   83764:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   83766:	68bb      	ldr	r3, [r7, #8]
   83768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8376a:	2b00      	cmp	r3, #0
   8376c:	d004      	beq.n	83778 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8376e:	68bb      	ldr	r3, [r7, #8]
   83770:	3318      	adds	r3, #24
   83772:	4618      	mov	r0, r3
   83774:	4b28      	ldr	r3, [pc, #160]	; (83818 <xTaskIncrementTick+0x160>)
   83776:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   83778:	68bb      	ldr	r3, [r7, #8]
   8377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8377c:	2201      	movs	r2, #1
   8377e:	409a      	lsls	r2, r3
   83780:	4b26      	ldr	r3, [pc, #152]	; (8381c <xTaskIncrementTick+0x164>)
   83782:	681b      	ldr	r3, [r3, #0]
   83784:	431a      	orrs	r2, r3
   83786:	4b25      	ldr	r3, [pc, #148]	; (8381c <xTaskIncrementTick+0x164>)
   83788:	601a      	str	r2, [r3, #0]
   8378a:	68bb      	ldr	r3, [r7, #8]
   8378c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8378e:	4613      	mov	r3, r2
   83790:	009b      	lsls	r3, r3, #2
   83792:	4413      	add	r3, r2
   83794:	009b      	lsls	r3, r3, #2
   83796:	4a22      	ldr	r2, [pc, #136]	; (83820 <xTaskIncrementTick+0x168>)
   83798:	441a      	add	r2, r3
   8379a:	68bb      	ldr	r3, [r7, #8]
   8379c:	3304      	adds	r3, #4
   8379e:	4610      	mov	r0, r2
   837a0:	4619      	mov	r1, r3
   837a2:	4b20      	ldr	r3, [pc, #128]	; (83824 <xTaskIncrementTick+0x16c>)
   837a4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   837a6:	68bb      	ldr	r3, [r7, #8]
   837a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   837aa:	4b1f      	ldr	r3, [pc, #124]	; (83828 <xTaskIncrementTick+0x170>)
   837ac:	681b      	ldr	r3, [r3, #0]
   837ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   837b0:	429a      	cmp	r2, r3
   837b2:	d301      	bcc.n	837b8 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   837b4:	2301      	movs	r3, #1
   837b6:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   837b8:	e7b1      	b.n	8371e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   837ba:	4b1b      	ldr	r3, [pc, #108]	; (83828 <xTaskIncrementTick+0x170>)
   837bc:	681b      	ldr	r3, [r3, #0]
   837be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   837c0:	4917      	ldr	r1, [pc, #92]	; (83820 <xTaskIncrementTick+0x168>)
   837c2:	4613      	mov	r3, r2
   837c4:	009b      	lsls	r3, r3, #2
   837c6:	4413      	add	r3, r2
   837c8:	009b      	lsls	r3, r3, #2
   837ca:	440b      	add	r3, r1
   837cc:	681b      	ldr	r3, [r3, #0]
   837ce:	2b01      	cmp	r3, #1
   837d0:	d907      	bls.n	837e2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   837d2:	2301      	movs	r3, #1
   837d4:	617b      	str	r3, [r7, #20]
   837d6:	e004      	b.n	837e2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   837d8:	4b14      	ldr	r3, [pc, #80]	; (8382c <xTaskIncrementTick+0x174>)
   837da:	681b      	ldr	r3, [r3, #0]
   837dc:	1c5a      	adds	r2, r3, #1
   837de:	4b13      	ldr	r3, [pc, #76]	; (8382c <xTaskIncrementTick+0x174>)
   837e0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   837e2:	4b13      	ldr	r3, [pc, #76]	; (83830 <xTaskIncrementTick+0x178>)
   837e4:	681b      	ldr	r3, [r3, #0]
   837e6:	2b00      	cmp	r3, #0
   837e8:	d001      	beq.n	837ee <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   837ea:	2301      	movs	r3, #1
   837ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   837ee:	697b      	ldr	r3, [r7, #20]
}
   837f0:	4618      	mov	r0, r3
   837f2:	3718      	adds	r7, #24
   837f4:	46bd      	mov	sp, r7
   837f6:	bd80      	pop	{r7, pc}
   837f8:	2007a5f8 	.word	0x2007a5f8
   837fc:	2007a5dc 	.word	0x2007a5dc
   83800:	2007a590 	.word	0x2007a590
   83804:	000824dd 	.word	0x000824dd
   83808:	2007a594 	.word	0x2007a594
   8380c:	2007a5f0 	.word	0x2007a5f0
   83810:	00083ee1 	.word	0x00083ee1
   83814:	20070008 	.word	0x20070008
   83818:	00082265 	.word	0x00082265
   8381c:	2007a5e0 	.word	0x2007a5e0
   83820:	2007a504 	.word	0x2007a504
   83824:	000821ad 	.word	0x000821ad
   83828:	2007a500 	.word	0x2007a500
   8382c:	2007a5e8 	.word	0x2007a5e8
   83830:	2007a5ec 	.word	0x2007a5ec

00083834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   83834:	b580      	push	{r7, lr}
   83836:	b084      	sub	sp, #16
   83838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   8383a:	4b34      	ldr	r3, [pc, #208]	; (8390c <vTaskSwitchContext+0xd8>)
   8383c:	681b      	ldr	r3, [r3, #0]
   8383e:	2b00      	cmp	r3, #0
   83840:	d003      	beq.n	8384a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   83842:	4b33      	ldr	r3, [pc, #204]	; (83910 <vTaskSwitchContext+0xdc>)
   83844:	2201      	movs	r2, #1
   83846:	601a      	str	r2, [r3, #0]
   83848:	e05c      	b.n	83904 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   8384a:	4b31      	ldr	r3, [pc, #196]	; (83910 <vTaskSwitchContext+0xdc>)
   8384c:	2200      	movs	r2, #0
   8384e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   83850:	4b30      	ldr	r3, [pc, #192]	; (83914 <vTaskSwitchContext+0xe0>)
   83852:	681b      	ldr	r3, [r3, #0]
   83854:	681a      	ldr	r2, [r3, #0]
   83856:	4b2f      	ldr	r3, [pc, #188]	; (83914 <vTaskSwitchContext+0xe0>)
   83858:	681b      	ldr	r3, [r3, #0]
   8385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8385c:	429a      	cmp	r2, r3
   8385e:	d808      	bhi.n	83872 <vTaskSwitchContext+0x3e>
   83860:	4b2c      	ldr	r3, [pc, #176]	; (83914 <vTaskSwitchContext+0xe0>)
   83862:	681a      	ldr	r2, [r3, #0]
   83864:	4b2b      	ldr	r3, [pc, #172]	; (83914 <vTaskSwitchContext+0xe0>)
   83866:	681b      	ldr	r3, [r3, #0]
   83868:	3334      	adds	r3, #52	; 0x34
   8386a:	4610      	mov	r0, r2
   8386c:	4619      	mov	r1, r3
   8386e:	4b2a      	ldr	r3, [pc, #168]	; (83918 <vTaskSwitchContext+0xe4>)
   83870:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   83872:	4b28      	ldr	r3, [pc, #160]	; (83914 <vTaskSwitchContext+0xe0>)
   83874:	681b      	ldr	r3, [r3, #0]
   83876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83878:	4618      	mov	r0, r3
   8387a:	4928      	ldr	r1, [pc, #160]	; (8391c <vTaskSwitchContext+0xe8>)
   8387c:	2214      	movs	r2, #20
   8387e:	4b28      	ldr	r3, [pc, #160]	; (83920 <vTaskSwitchContext+0xec>)
   83880:	4798      	blx	r3
   83882:	4603      	mov	r3, r0
   83884:	2b00      	cmp	r3, #0
   83886:	d008      	beq.n	8389a <vTaskSwitchContext+0x66>
   83888:	4b22      	ldr	r3, [pc, #136]	; (83914 <vTaskSwitchContext+0xe0>)
   8388a:	681a      	ldr	r2, [r3, #0]
   8388c:	4b21      	ldr	r3, [pc, #132]	; (83914 <vTaskSwitchContext+0xe0>)
   8388e:	681b      	ldr	r3, [r3, #0]
   83890:	3334      	adds	r3, #52	; 0x34
   83892:	4610      	mov	r0, r2
   83894:	4619      	mov	r1, r3
   83896:	4b20      	ldr	r3, [pc, #128]	; (83918 <vTaskSwitchContext+0xe4>)
   83898:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8389a:	4b22      	ldr	r3, [pc, #136]	; (83924 <vTaskSwitchContext+0xf0>)
   8389c:	681b      	ldr	r3, [r3, #0]
   8389e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   838a0:	687b      	ldr	r3, [r7, #4]
   838a2:	fab3 f383 	clz	r3, r3
   838a6:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   838a8:	78fb      	ldrb	r3, [r7, #3]
   838aa:	f1c3 031f 	rsb	r3, r3, #31
   838ae:	60fb      	str	r3, [r7, #12]
   838b0:	491d      	ldr	r1, [pc, #116]	; (83928 <vTaskSwitchContext+0xf4>)
   838b2:	68fa      	ldr	r2, [r7, #12]
   838b4:	4613      	mov	r3, r2
   838b6:	009b      	lsls	r3, r3, #2
   838b8:	4413      	add	r3, r2
   838ba:	009b      	lsls	r3, r3, #2
   838bc:	440b      	add	r3, r1
   838be:	681b      	ldr	r3, [r3, #0]
   838c0:	2b00      	cmp	r3, #0
   838c2:	d102      	bne.n	838ca <vTaskSwitchContext+0x96>
   838c4:	4b19      	ldr	r3, [pc, #100]	; (8392c <vTaskSwitchContext+0xf8>)
   838c6:	4798      	blx	r3
   838c8:	e7fe      	b.n	838c8 <vTaskSwitchContext+0x94>
   838ca:	68fa      	ldr	r2, [r7, #12]
   838cc:	4613      	mov	r3, r2
   838ce:	009b      	lsls	r3, r3, #2
   838d0:	4413      	add	r3, r2
   838d2:	009b      	lsls	r3, r3, #2
   838d4:	4a14      	ldr	r2, [pc, #80]	; (83928 <vTaskSwitchContext+0xf4>)
   838d6:	4413      	add	r3, r2
   838d8:	60bb      	str	r3, [r7, #8]
   838da:	68bb      	ldr	r3, [r7, #8]
   838dc:	685b      	ldr	r3, [r3, #4]
   838de:	685a      	ldr	r2, [r3, #4]
   838e0:	68bb      	ldr	r3, [r7, #8]
   838e2:	605a      	str	r2, [r3, #4]
   838e4:	68bb      	ldr	r3, [r7, #8]
   838e6:	685a      	ldr	r2, [r3, #4]
   838e8:	68bb      	ldr	r3, [r7, #8]
   838ea:	3308      	adds	r3, #8
   838ec:	429a      	cmp	r2, r3
   838ee:	d104      	bne.n	838fa <vTaskSwitchContext+0xc6>
   838f0:	68bb      	ldr	r3, [r7, #8]
   838f2:	685b      	ldr	r3, [r3, #4]
   838f4:	685a      	ldr	r2, [r3, #4]
   838f6:	68bb      	ldr	r3, [r7, #8]
   838f8:	605a      	str	r2, [r3, #4]
   838fa:	68bb      	ldr	r3, [r7, #8]
   838fc:	685b      	ldr	r3, [r3, #4]
   838fe:	68da      	ldr	r2, [r3, #12]
   83900:	4b04      	ldr	r3, [pc, #16]	; (83914 <vTaskSwitchContext+0xe0>)
   83902:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   83904:	3710      	adds	r7, #16
   83906:	46bd      	mov	sp, r7
   83908:	bd80      	pop	{r7, pc}
   8390a:	bf00      	nop
   8390c:	2007a5f8 	.word	0x2007a5f8
   83910:	2007a5ec 	.word	0x2007a5ec
   83914:	2007a500 	.word	0x2007a500
   83918:	00085005 	.word	0x00085005
   8391c:	00085600 	.word	0x00085600
   83920:	000851f9 	.word	0x000851f9
   83924:	2007a5e0 	.word	0x2007a5e0
   83928:	2007a504 	.word	0x2007a504
   8392c:	000824dd 	.word	0x000824dd

00083930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   83930:	b580      	push	{r7, lr}
   83932:	b084      	sub	sp, #16
   83934:	af00      	add	r7, sp, #0
   83936:	6078      	str	r0, [r7, #4]
   83938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   8393a:	687b      	ldr	r3, [r7, #4]
   8393c:	2b00      	cmp	r3, #0
   8393e:	d102      	bne.n	83946 <vTaskPlaceOnEventList+0x16>
   83940:	4b1a      	ldr	r3, [pc, #104]	; (839ac <vTaskPlaceOnEventList+0x7c>)
   83942:	4798      	blx	r3
   83944:	e7fe      	b.n	83944 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   83946:	4b1a      	ldr	r3, [pc, #104]	; (839b0 <vTaskPlaceOnEventList+0x80>)
   83948:	681b      	ldr	r3, [r3, #0]
   8394a:	3318      	adds	r3, #24
   8394c:	6878      	ldr	r0, [r7, #4]
   8394e:	4619      	mov	r1, r3
   83950:	4b18      	ldr	r3, [pc, #96]	; (839b4 <vTaskPlaceOnEventList+0x84>)
   83952:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83954:	4b16      	ldr	r3, [pc, #88]	; (839b0 <vTaskPlaceOnEventList+0x80>)
   83956:	681b      	ldr	r3, [r3, #0]
   83958:	3304      	adds	r3, #4
   8395a:	4618      	mov	r0, r3
   8395c:	4b16      	ldr	r3, [pc, #88]	; (839b8 <vTaskPlaceOnEventList+0x88>)
   8395e:	4798      	blx	r3
   83960:	4603      	mov	r3, r0
   83962:	2b00      	cmp	r3, #0
   83964:	d10b      	bne.n	8397e <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83966:	4b12      	ldr	r3, [pc, #72]	; (839b0 <vTaskPlaceOnEventList+0x80>)
   83968:	681b      	ldr	r3, [r3, #0]
   8396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8396c:	2201      	movs	r2, #1
   8396e:	fa02 f303 	lsl.w	r3, r2, r3
   83972:	43da      	mvns	r2, r3
   83974:	4b11      	ldr	r3, [pc, #68]	; (839bc <vTaskPlaceOnEventList+0x8c>)
   83976:	681b      	ldr	r3, [r3, #0]
   83978:	401a      	ands	r2, r3
   8397a:	4b10      	ldr	r3, [pc, #64]	; (839bc <vTaskPlaceOnEventList+0x8c>)
   8397c:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8397e:	683b      	ldr	r3, [r7, #0]
   83980:	f1b3 3fff 	cmp.w	r3, #4294967295
   83984:	d107      	bne.n	83996 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83986:	4b0a      	ldr	r3, [pc, #40]	; (839b0 <vTaskPlaceOnEventList+0x80>)
   83988:	681b      	ldr	r3, [r3, #0]
   8398a:	3304      	adds	r3, #4
   8398c:	480c      	ldr	r0, [pc, #48]	; (839c0 <vTaskPlaceOnEventList+0x90>)
   8398e:	4619      	mov	r1, r3
   83990:	4b0c      	ldr	r3, [pc, #48]	; (839c4 <vTaskPlaceOnEventList+0x94>)
   83992:	4798      	blx	r3
   83994:	e007      	b.n	839a6 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   83996:	4b0c      	ldr	r3, [pc, #48]	; (839c8 <vTaskPlaceOnEventList+0x98>)
   83998:	681a      	ldr	r2, [r3, #0]
   8399a:	683b      	ldr	r3, [r7, #0]
   8399c:	4413      	add	r3, r2
   8399e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   839a0:	68f8      	ldr	r0, [r7, #12]
   839a2:	4b0a      	ldr	r3, [pc, #40]	; (839cc <vTaskPlaceOnEventList+0x9c>)
   839a4:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   839a6:	3710      	adds	r7, #16
   839a8:	46bd      	mov	sp, r7
   839aa:	bd80      	pop	{r7, pc}
   839ac:	000824dd 	.word	0x000824dd
   839b0:	2007a500 	.word	0x2007a500
   839b4:	000821f5 	.word	0x000821f5
   839b8:	00082265 	.word	0x00082265
   839bc:	2007a5e0 	.word	0x2007a5e0
   839c0:	2007a5c4 	.word	0x2007a5c4
   839c4:	000821ad 	.word	0x000821ad
   839c8:	2007a5dc 	.word	0x2007a5dc
   839cc:	00083ddd 	.word	0x00083ddd

000839d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   839d0:	b580      	push	{r7, lr}
   839d2:	b084      	sub	sp, #16
   839d4:	af00      	add	r7, sp, #0
   839d6:	6078      	str	r0, [r7, #4]
   839d8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   839da:	687b      	ldr	r3, [r7, #4]
   839dc:	2b00      	cmp	r3, #0
   839de:	d102      	bne.n	839e6 <vTaskPlaceOnEventListRestricted+0x16>
   839e0:	4b14      	ldr	r3, [pc, #80]	; (83a34 <vTaskPlaceOnEventListRestricted+0x64>)
   839e2:	4798      	blx	r3
   839e4:	e7fe      	b.n	839e4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   839e6:	4b14      	ldr	r3, [pc, #80]	; (83a38 <vTaskPlaceOnEventListRestricted+0x68>)
   839e8:	681b      	ldr	r3, [r3, #0]
   839ea:	3318      	adds	r3, #24
   839ec:	6878      	ldr	r0, [r7, #4]
   839ee:	4619      	mov	r1, r3
   839f0:	4b12      	ldr	r3, [pc, #72]	; (83a3c <vTaskPlaceOnEventListRestricted+0x6c>)
   839f2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   839f4:	4b10      	ldr	r3, [pc, #64]	; (83a38 <vTaskPlaceOnEventListRestricted+0x68>)
   839f6:	681b      	ldr	r3, [r3, #0]
   839f8:	3304      	adds	r3, #4
   839fa:	4618      	mov	r0, r3
   839fc:	4b10      	ldr	r3, [pc, #64]	; (83a40 <vTaskPlaceOnEventListRestricted+0x70>)
   839fe:	4798      	blx	r3
   83a00:	4603      	mov	r3, r0
   83a02:	2b00      	cmp	r3, #0
   83a04:	d10b      	bne.n	83a1e <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83a06:	4b0c      	ldr	r3, [pc, #48]	; (83a38 <vTaskPlaceOnEventListRestricted+0x68>)
   83a08:	681b      	ldr	r3, [r3, #0]
   83a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83a0c:	2201      	movs	r2, #1
   83a0e:	fa02 f303 	lsl.w	r3, r2, r3
   83a12:	43da      	mvns	r2, r3
   83a14:	4b0b      	ldr	r3, [pc, #44]	; (83a44 <vTaskPlaceOnEventListRestricted+0x74>)
   83a16:	681b      	ldr	r3, [r3, #0]
   83a18:	401a      	ands	r2, r3
   83a1a:	4b0a      	ldr	r3, [pc, #40]	; (83a44 <vTaskPlaceOnEventListRestricted+0x74>)
   83a1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   83a1e:	4b0a      	ldr	r3, [pc, #40]	; (83a48 <vTaskPlaceOnEventListRestricted+0x78>)
   83a20:	681a      	ldr	r2, [r3, #0]
   83a22:	683b      	ldr	r3, [r7, #0]
   83a24:	4413      	add	r3, r2
   83a26:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83a28:	68f8      	ldr	r0, [r7, #12]
   83a2a:	4b08      	ldr	r3, [pc, #32]	; (83a4c <vTaskPlaceOnEventListRestricted+0x7c>)
   83a2c:	4798      	blx	r3
	}
   83a2e:	3710      	adds	r7, #16
   83a30:	46bd      	mov	sp, r7
   83a32:	bd80      	pop	{r7, pc}
   83a34:	000824dd 	.word	0x000824dd
   83a38:	2007a500 	.word	0x2007a500
   83a3c:	000821ad 	.word	0x000821ad
   83a40:	00082265 	.word	0x00082265
   83a44:	2007a5e0 	.word	0x2007a5e0
   83a48:	2007a5dc 	.word	0x2007a5dc
   83a4c:	00083ddd 	.word	0x00083ddd

00083a50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   83a50:	b580      	push	{r7, lr}
   83a52:	b084      	sub	sp, #16
   83a54:	af00      	add	r7, sp, #0
   83a56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   83a58:	687b      	ldr	r3, [r7, #4]
   83a5a:	68db      	ldr	r3, [r3, #12]
   83a5c:	68db      	ldr	r3, [r3, #12]
   83a5e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   83a60:	68bb      	ldr	r3, [r7, #8]
   83a62:	2b00      	cmp	r3, #0
   83a64:	d102      	bne.n	83a6c <xTaskRemoveFromEventList+0x1c>
   83a66:	4b21      	ldr	r3, [pc, #132]	; (83aec <xTaskRemoveFromEventList+0x9c>)
   83a68:	4798      	blx	r3
   83a6a:	e7fe      	b.n	83a6a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   83a6c:	68bb      	ldr	r3, [r7, #8]
   83a6e:	3318      	adds	r3, #24
   83a70:	4618      	mov	r0, r3
   83a72:	4b1f      	ldr	r3, [pc, #124]	; (83af0 <xTaskRemoveFromEventList+0xa0>)
   83a74:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83a76:	4b1f      	ldr	r3, [pc, #124]	; (83af4 <xTaskRemoveFromEventList+0xa4>)
   83a78:	681b      	ldr	r3, [r3, #0]
   83a7a:	2b00      	cmp	r3, #0
   83a7c:	d11c      	bne.n	83ab8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   83a7e:	68bb      	ldr	r3, [r7, #8]
   83a80:	3304      	adds	r3, #4
   83a82:	4618      	mov	r0, r3
   83a84:	4b1a      	ldr	r3, [pc, #104]	; (83af0 <xTaskRemoveFromEventList+0xa0>)
   83a86:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   83a88:	68bb      	ldr	r3, [r7, #8]
   83a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83a8c:	2201      	movs	r2, #1
   83a8e:	409a      	lsls	r2, r3
   83a90:	4b19      	ldr	r3, [pc, #100]	; (83af8 <xTaskRemoveFromEventList+0xa8>)
   83a92:	681b      	ldr	r3, [r3, #0]
   83a94:	431a      	orrs	r2, r3
   83a96:	4b18      	ldr	r3, [pc, #96]	; (83af8 <xTaskRemoveFromEventList+0xa8>)
   83a98:	601a      	str	r2, [r3, #0]
   83a9a:	68bb      	ldr	r3, [r7, #8]
   83a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83a9e:	4613      	mov	r3, r2
   83aa0:	009b      	lsls	r3, r3, #2
   83aa2:	4413      	add	r3, r2
   83aa4:	009b      	lsls	r3, r3, #2
   83aa6:	4a15      	ldr	r2, [pc, #84]	; (83afc <xTaskRemoveFromEventList+0xac>)
   83aa8:	441a      	add	r2, r3
   83aaa:	68bb      	ldr	r3, [r7, #8]
   83aac:	3304      	adds	r3, #4
   83aae:	4610      	mov	r0, r2
   83ab0:	4619      	mov	r1, r3
   83ab2:	4b13      	ldr	r3, [pc, #76]	; (83b00 <xTaskRemoveFromEventList+0xb0>)
   83ab4:	4798      	blx	r3
   83ab6:	e005      	b.n	83ac4 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   83ab8:	68bb      	ldr	r3, [r7, #8]
   83aba:	3318      	adds	r3, #24
   83abc:	4811      	ldr	r0, [pc, #68]	; (83b04 <xTaskRemoveFromEventList+0xb4>)
   83abe:	4619      	mov	r1, r3
   83ac0:	4b0f      	ldr	r3, [pc, #60]	; (83b00 <xTaskRemoveFromEventList+0xb0>)
   83ac2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   83ac4:	68bb      	ldr	r3, [r7, #8]
   83ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83ac8:	4b0f      	ldr	r3, [pc, #60]	; (83b08 <xTaskRemoveFromEventList+0xb8>)
   83aca:	681b      	ldr	r3, [r3, #0]
   83acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83ace:	429a      	cmp	r2, r3
   83ad0:	d905      	bls.n	83ade <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   83ad2:	2301      	movs	r3, #1
   83ad4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   83ad6:	4b0d      	ldr	r3, [pc, #52]	; (83b0c <xTaskRemoveFromEventList+0xbc>)
   83ad8:	2201      	movs	r2, #1
   83ada:	601a      	str	r2, [r3, #0]
   83adc:	e001      	b.n	83ae2 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   83ade:	2300      	movs	r3, #0
   83ae0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   83ae2:	68fb      	ldr	r3, [r7, #12]
}
   83ae4:	4618      	mov	r0, r3
   83ae6:	3710      	adds	r7, #16
   83ae8:	46bd      	mov	sp, r7
   83aea:	bd80      	pop	{r7, pc}
   83aec:	000824dd 	.word	0x000824dd
   83af0:	00082265 	.word	0x00082265
   83af4:	2007a5f8 	.word	0x2007a5f8
   83af8:	2007a5e0 	.word	0x2007a5e0
   83afc:	2007a504 	.word	0x2007a504
   83b00:	000821ad 	.word	0x000821ad
   83b04:	2007a598 	.word	0x2007a598
   83b08:	2007a500 	.word	0x2007a500
   83b0c:	2007a5ec 	.word	0x2007a5ec

00083b10 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   83b10:	b580      	push	{r7, lr}
   83b12:	b082      	sub	sp, #8
   83b14:	af00      	add	r7, sp, #0
   83b16:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   83b18:	687b      	ldr	r3, [r7, #4]
   83b1a:	2b00      	cmp	r3, #0
   83b1c:	d102      	bne.n	83b24 <vTaskSetTimeOutState+0x14>
   83b1e:	4b07      	ldr	r3, [pc, #28]	; (83b3c <vTaskSetTimeOutState+0x2c>)
   83b20:	4798      	blx	r3
   83b22:	e7fe      	b.n	83b22 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83b24:	4b06      	ldr	r3, [pc, #24]	; (83b40 <vTaskSetTimeOutState+0x30>)
   83b26:	681a      	ldr	r2, [r3, #0]
   83b28:	687b      	ldr	r3, [r7, #4]
   83b2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   83b2c:	4b05      	ldr	r3, [pc, #20]	; (83b44 <vTaskSetTimeOutState+0x34>)
   83b2e:	681a      	ldr	r2, [r3, #0]
   83b30:	687b      	ldr	r3, [r7, #4]
   83b32:	605a      	str	r2, [r3, #4]
}
   83b34:	3708      	adds	r7, #8
   83b36:	46bd      	mov	sp, r7
   83b38:	bd80      	pop	{r7, pc}
   83b3a:	bf00      	nop
   83b3c:	000824dd 	.word	0x000824dd
   83b40:	2007a5f0 	.word	0x2007a5f0
   83b44:	2007a5dc 	.word	0x2007a5dc

00083b48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   83b48:	b580      	push	{r7, lr}
   83b4a:	b084      	sub	sp, #16
   83b4c:	af00      	add	r7, sp, #0
   83b4e:	6078      	str	r0, [r7, #4]
   83b50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   83b52:	687b      	ldr	r3, [r7, #4]
   83b54:	2b00      	cmp	r3, #0
   83b56:	d102      	bne.n	83b5e <xTaskCheckForTimeOut+0x16>
   83b58:	4b21      	ldr	r3, [pc, #132]	; (83be0 <xTaskCheckForTimeOut+0x98>)
   83b5a:	4798      	blx	r3
   83b5c:	e7fe      	b.n	83b5c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   83b5e:	683b      	ldr	r3, [r7, #0]
   83b60:	2b00      	cmp	r3, #0
   83b62:	d102      	bne.n	83b6a <xTaskCheckForTimeOut+0x22>
   83b64:	4b1e      	ldr	r3, [pc, #120]	; (83be0 <xTaskCheckForTimeOut+0x98>)
   83b66:	4798      	blx	r3
   83b68:	e7fe      	b.n	83b68 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   83b6a:	4b1e      	ldr	r3, [pc, #120]	; (83be4 <xTaskCheckForTimeOut+0x9c>)
   83b6c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   83b6e:	4b1e      	ldr	r3, [pc, #120]	; (83be8 <xTaskCheckForTimeOut+0xa0>)
   83b70:	681b      	ldr	r3, [r3, #0]
   83b72:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   83b74:	683b      	ldr	r3, [r7, #0]
   83b76:	681b      	ldr	r3, [r3, #0]
   83b78:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b7c:	d102      	bne.n	83b84 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   83b7e:	2300      	movs	r3, #0
   83b80:	60fb      	str	r3, [r7, #12]
   83b82:	e026      	b.n	83bd2 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   83b84:	687b      	ldr	r3, [r7, #4]
   83b86:	681a      	ldr	r2, [r3, #0]
   83b88:	4b18      	ldr	r3, [pc, #96]	; (83bec <xTaskCheckForTimeOut+0xa4>)
   83b8a:	681b      	ldr	r3, [r3, #0]
   83b8c:	429a      	cmp	r2, r3
   83b8e:	d007      	beq.n	83ba0 <xTaskCheckForTimeOut+0x58>
   83b90:	687b      	ldr	r3, [r7, #4]
   83b92:	685a      	ldr	r2, [r3, #4]
   83b94:	68bb      	ldr	r3, [r7, #8]
   83b96:	429a      	cmp	r2, r3
   83b98:	d802      	bhi.n	83ba0 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   83b9a:	2301      	movs	r3, #1
   83b9c:	60fb      	str	r3, [r7, #12]
   83b9e:	e018      	b.n	83bd2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   83ba0:	687b      	ldr	r3, [r7, #4]
   83ba2:	685b      	ldr	r3, [r3, #4]
   83ba4:	68ba      	ldr	r2, [r7, #8]
   83ba6:	1ad2      	subs	r2, r2, r3
   83ba8:	683b      	ldr	r3, [r7, #0]
   83baa:	681b      	ldr	r3, [r3, #0]
   83bac:	429a      	cmp	r2, r3
   83bae:	d20e      	bcs.n	83bce <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   83bb0:	683b      	ldr	r3, [r7, #0]
   83bb2:	681a      	ldr	r2, [r3, #0]
   83bb4:	687b      	ldr	r3, [r7, #4]
   83bb6:	6859      	ldr	r1, [r3, #4]
   83bb8:	68bb      	ldr	r3, [r7, #8]
   83bba:	1acb      	subs	r3, r1, r3
   83bbc:	441a      	add	r2, r3
   83bbe:	683b      	ldr	r3, [r7, #0]
   83bc0:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   83bc2:	6878      	ldr	r0, [r7, #4]
   83bc4:	4b0a      	ldr	r3, [pc, #40]	; (83bf0 <xTaskCheckForTimeOut+0xa8>)
   83bc6:	4798      	blx	r3
			xReturn = pdFALSE;
   83bc8:	2300      	movs	r3, #0
   83bca:	60fb      	str	r3, [r7, #12]
   83bcc:	e001      	b.n	83bd2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   83bce:	2301      	movs	r3, #1
   83bd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83bd2:	4b08      	ldr	r3, [pc, #32]	; (83bf4 <xTaskCheckForTimeOut+0xac>)
   83bd4:	4798      	blx	r3

	return xReturn;
   83bd6:	68fb      	ldr	r3, [r7, #12]
}
   83bd8:	4618      	mov	r0, r3
   83bda:	3710      	adds	r7, #16
   83bdc:	46bd      	mov	sp, r7
   83bde:	bd80      	pop	{r7, pc}
   83be0:	000824dd 	.word	0x000824dd
   83be4:	00082461 	.word	0x00082461
   83be8:	2007a5dc 	.word	0x2007a5dc
   83bec:	2007a5f0 	.word	0x2007a5f0
   83bf0:	00083b11 	.word	0x00083b11
   83bf4:	000824a5 	.word	0x000824a5

00083bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   83bf8:	b480      	push	{r7}
   83bfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   83bfc:	4b03      	ldr	r3, [pc, #12]	; (83c0c <vTaskMissedYield+0x14>)
   83bfe:	2201      	movs	r2, #1
   83c00:	601a      	str	r2, [r3, #0]
}
   83c02:	46bd      	mov	sp, r7
   83c04:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c08:	4770      	bx	lr
   83c0a:	bf00      	nop
   83c0c:	2007a5ec 	.word	0x2007a5ec

00083c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   83c10:	b580      	push	{r7, lr}
   83c12:	b082      	sub	sp, #8
   83c14:	af00      	add	r7, sp, #0
   83c16:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   83c18:	4b04      	ldr	r3, [pc, #16]	; (83c2c <prvIdleTask+0x1c>)
   83c1a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   83c1c:	4b04      	ldr	r3, [pc, #16]	; (83c30 <prvIdleTask+0x20>)
   83c1e:	681b      	ldr	r3, [r3, #0]
   83c20:	2b01      	cmp	r3, #1
   83c22:	d901      	bls.n	83c28 <prvIdleTask+0x18>
			{
				taskYIELD();
   83c24:	4b03      	ldr	r3, [pc, #12]	; (83c34 <prvIdleTask+0x24>)
   83c26:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   83c28:	e7f6      	b.n	83c18 <prvIdleTask+0x8>
   83c2a:	bf00      	nop
   83c2c:	00083d51 	.word	0x00083d51
   83c30:	2007a504 	.word	0x2007a504
   83c34:	00082441 	.word	0x00082441

00083c38 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83c38:	b580      	push	{r7, lr}
   83c3a:	b086      	sub	sp, #24
   83c3c:	af00      	add	r7, sp, #0
   83c3e:	60f8      	str	r0, [r7, #12]
   83c40:	60b9      	str	r1, [r7, #8]
   83c42:	607a      	str	r2, [r7, #4]
   83c44:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   83c46:	2300      	movs	r3, #0
   83c48:	617b      	str	r3, [r7, #20]
   83c4a:	e012      	b.n	83c72 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   83c4c:	68ba      	ldr	r2, [r7, #8]
   83c4e:	697b      	ldr	r3, [r7, #20]
   83c50:	4413      	add	r3, r2
   83c52:	781a      	ldrb	r2, [r3, #0]
   83c54:	68f9      	ldr	r1, [r7, #12]
   83c56:	697b      	ldr	r3, [r7, #20]
   83c58:	440b      	add	r3, r1
   83c5a:	3330      	adds	r3, #48	; 0x30
   83c5c:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   83c5e:	68ba      	ldr	r2, [r7, #8]
   83c60:	697b      	ldr	r3, [r7, #20]
   83c62:	4413      	add	r3, r2
   83c64:	781b      	ldrb	r3, [r3, #0]
   83c66:	2b00      	cmp	r3, #0
   83c68:	d100      	bne.n	83c6c <prvInitialiseTCBVariables+0x34>
		{
			break;
   83c6a:	e005      	b.n	83c78 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   83c6c:	697b      	ldr	r3, [r7, #20]
   83c6e:	3301      	adds	r3, #1
   83c70:	617b      	str	r3, [r7, #20]
   83c72:	697b      	ldr	r3, [r7, #20]
   83c74:	2b09      	cmp	r3, #9
   83c76:	d9e9      	bls.n	83c4c <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   83c78:	68fb      	ldr	r3, [r7, #12]
   83c7a:	2200      	movs	r2, #0
   83c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   83c80:	687b      	ldr	r3, [r7, #4]
   83c82:	2b04      	cmp	r3, #4
   83c84:	d901      	bls.n	83c8a <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   83c86:	2304      	movs	r3, #4
   83c88:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   83c8a:	68fb      	ldr	r3, [r7, #12]
   83c8c:	687a      	ldr	r2, [r7, #4]
   83c8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   83c90:	68fb      	ldr	r3, [r7, #12]
   83c92:	687a      	ldr	r2, [r7, #4]
   83c94:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   83c96:	68fb      	ldr	r3, [r7, #12]
   83c98:	2200      	movs	r2, #0
   83c9a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   83c9c:	68fb      	ldr	r3, [r7, #12]
   83c9e:	3304      	adds	r3, #4
   83ca0:	4618      	mov	r0, r3
   83ca2:	4b0a      	ldr	r3, [pc, #40]	; (83ccc <prvInitialiseTCBVariables+0x94>)
   83ca4:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   83ca6:	68fb      	ldr	r3, [r7, #12]
   83ca8:	3318      	adds	r3, #24
   83caa:	4618      	mov	r0, r3
   83cac:	4b07      	ldr	r3, [pc, #28]	; (83ccc <prvInitialiseTCBVariables+0x94>)
   83cae:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   83cb0:	68fb      	ldr	r3, [r7, #12]
   83cb2:	68fa      	ldr	r2, [r7, #12]
   83cb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83cb6:	687b      	ldr	r3, [r7, #4]
   83cb8:	f1c3 0205 	rsb	r2, r3, #5
   83cbc:	68fb      	ldr	r3, [r7, #12]
   83cbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   83cc0:	68fb      	ldr	r3, [r7, #12]
   83cc2:	68fa      	ldr	r2, [r7, #12]
   83cc4:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   83cc6:	3718      	adds	r7, #24
   83cc8:	46bd      	mov	sp, r7
   83cca:	bd80      	pop	{r7, pc}
   83ccc:	00082195 	.word	0x00082195

00083cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   83cd0:	b580      	push	{r7, lr}
   83cd2:	b082      	sub	sp, #8
   83cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83cd6:	2300      	movs	r3, #0
   83cd8:	607b      	str	r3, [r7, #4]
   83cda:	e00c      	b.n	83cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   83cdc:	687a      	ldr	r2, [r7, #4]
   83cde:	4613      	mov	r3, r2
   83ce0:	009b      	lsls	r3, r3, #2
   83ce2:	4413      	add	r3, r2
   83ce4:	009b      	lsls	r3, r3, #2
   83ce6:	4a11      	ldr	r2, [pc, #68]	; (83d2c <prvInitialiseTaskLists+0x5c>)
   83ce8:	4413      	add	r3, r2
   83cea:	4618      	mov	r0, r3
   83cec:	4b10      	ldr	r3, [pc, #64]	; (83d30 <prvInitialiseTaskLists+0x60>)
   83cee:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83cf0:	687b      	ldr	r3, [r7, #4]
   83cf2:	3301      	adds	r3, #1
   83cf4:	607b      	str	r3, [r7, #4]
   83cf6:	687b      	ldr	r3, [r7, #4]
   83cf8:	2b04      	cmp	r3, #4
   83cfa:	d9ef      	bls.n	83cdc <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   83cfc:	480d      	ldr	r0, [pc, #52]	; (83d34 <prvInitialiseTaskLists+0x64>)
   83cfe:	4b0c      	ldr	r3, [pc, #48]	; (83d30 <prvInitialiseTaskLists+0x60>)
   83d00:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   83d02:	480d      	ldr	r0, [pc, #52]	; (83d38 <prvInitialiseTaskLists+0x68>)
   83d04:	4b0a      	ldr	r3, [pc, #40]	; (83d30 <prvInitialiseTaskLists+0x60>)
   83d06:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   83d08:	480c      	ldr	r0, [pc, #48]	; (83d3c <prvInitialiseTaskLists+0x6c>)
   83d0a:	4b09      	ldr	r3, [pc, #36]	; (83d30 <prvInitialiseTaskLists+0x60>)
   83d0c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   83d0e:	480c      	ldr	r0, [pc, #48]	; (83d40 <prvInitialiseTaskLists+0x70>)
   83d10:	4b07      	ldr	r3, [pc, #28]	; (83d30 <prvInitialiseTaskLists+0x60>)
   83d12:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   83d14:	480b      	ldr	r0, [pc, #44]	; (83d44 <prvInitialiseTaskLists+0x74>)
   83d16:	4b06      	ldr	r3, [pc, #24]	; (83d30 <prvInitialiseTaskLists+0x60>)
   83d18:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   83d1a:	4b0b      	ldr	r3, [pc, #44]	; (83d48 <prvInitialiseTaskLists+0x78>)
   83d1c:	4a05      	ldr	r2, [pc, #20]	; (83d34 <prvInitialiseTaskLists+0x64>)
   83d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   83d20:	4b0a      	ldr	r3, [pc, #40]	; (83d4c <prvInitialiseTaskLists+0x7c>)
   83d22:	4a05      	ldr	r2, [pc, #20]	; (83d38 <prvInitialiseTaskLists+0x68>)
   83d24:	601a      	str	r2, [r3, #0]
}
   83d26:	3708      	adds	r7, #8
   83d28:	46bd      	mov	sp, r7
   83d2a:	bd80      	pop	{r7, pc}
   83d2c:	2007a504 	.word	0x2007a504
   83d30:	00082155 	.word	0x00082155
   83d34:	2007a568 	.word	0x2007a568
   83d38:	2007a57c 	.word	0x2007a57c
   83d3c:	2007a598 	.word	0x2007a598
   83d40:	2007a5ac 	.word	0x2007a5ac
   83d44:	2007a5c4 	.word	0x2007a5c4
   83d48:	2007a590 	.word	0x2007a590
   83d4c:	2007a594 	.word	0x2007a594

00083d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   83d50:	b580      	push	{r7, lr}
   83d52:	b082      	sub	sp, #8
   83d54:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   83d56:	e028      	b.n	83daa <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   83d58:	4b17      	ldr	r3, [pc, #92]	; (83db8 <prvCheckTasksWaitingTermination+0x68>)
   83d5a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   83d5c:	4b17      	ldr	r3, [pc, #92]	; (83dbc <prvCheckTasksWaitingTermination+0x6c>)
   83d5e:	681b      	ldr	r3, [r3, #0]
   83d60:	2b00      	cmp	r3, #0
   83d62:	bf14      	ite	ne
   83d64:	2300      	movne	r3, #0
   83d66:	2301      	moveq	r3, #1
   83d68:	b2db      	uxtb	r3, r3
   83d6a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   83d6c:	4b14      	ldr	r3, [pc, #80]	; (83dc0 <prvCheckTasksWaitingTermination+0x70>)
   83d6e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   83d70:	687b      	ldr	r3, [r7, #4]
   83d72:	2b00      	cmp	r3, #0
   83d74:	d119      	bne.n	83daa <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   83d76:	4b13      	ldr	r3, [pc, #76]	; (83dc4 <prvCheckTasksWaitingTermination+0x74>)
   83d78:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   83d7a:	4b10      	ldr	r3, [pc, #64]	; (83dbc <prvCheckTasksWaitingTermination+0x6c>)
   83d7c:	68db      	ldr	r3, [r3, #12]
   83d7e:	68db      	ldr	r3, [r3, #12]
   83d80:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   83d82:	683b      	ldr	r3, [r7, #0]
   83d84:	3304      	adds	r3, #4
   83d86:	4618      	mov	r0, r3
   83d88:	4b0f      	ldr	r3, [pc, #60]	; (83dc8 <prvCheckTasksWaitingTermination+0x78>)
   83d8a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   83d8c:	4b0f      	ldr	r3, [pc, #60]	; (83dcc <prvCheckTasksWaitingTermination+0x7c>)
   83d8e:	681b      	ldr	r3, [r3, #0]
   83d90:	1e5a      	subs	r2, r3, #1
   83d92:	4b0e      	ldr	r3, [pc, #56]	; (83dcc <prvCheckTasksWaitingTermination+0x7c>)
   83d94:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   83d96:	4b0e      	ldr	r3, [pc, #56]	; (83dd0 <prvCheckTasksWaitingTermination+0x80>)
   83d98:	681b      	ldr	r3, [r3, #0]
   83d9a:	1e5a      	subs	r2, r3, #1
   83d9c:	4b0c      	ldr	r3, [pc, #48]	; (83dd0 <prvCheckTasksWaitingTermination+0x80>)
   83d9e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   83da0:	4b0c      	ldr	r3, [pc, #48]	; (83dd4 <prvCheckTasksWaitingTermination+0x84>)
   83da2:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   83da4:	6838      	ldr	r0, [r7, #0]
   83da6:	4b0c      	ldr	r3, [pc, #48]	; (83dd8 <prvCheckTasksWaitingTermination+0x88>)
   83da8:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   83daa:	4b09      	ldr	r3, [pc, #36]	; (83dd0 <prvCheckTasksWaitingTermination+0x80>)
   83dac:	681b      	ldr	r3, [r3, #0]
   83dae:	2b00      	cmp	r3, #0
   83db0:	d1d2      	bne.n	83d58 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   83db2:	3708      	adds	r7, #8
   83db4:	46bd      	mov	sp, r7
   83db6:	bd80      	pop	{r7, pc}
   83db8:	0008354d 	.word	0x0008354d
   83dbc:	2007a5ac 	.word	0x2007a5ac
   83dc0:	00083569 	.word	0x00083569
   83dc4:	00082461 	.word	0x00082461
   83dc8:	00082265 	.word	0x00082265
   83dcc:	2007a5d8 	.word	0x2007a5d8
   83dd0:	2007a5c0 	.word	0x2007a5c0
   83dd4:	000824a5 	.word	0x000824a5
   83dd8:	00083ebd 	.word	0x00083ebd

00083ddc <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   83ddc:	b580      	push	{r7, lr}
   83dde:	b082      	sub	sp, #8
   83de0:	af00      	add	r7, sp, #0
   83de2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   83de4:	4b13      	ldr	r3, [pc, #76]	; (83e34 <prvAddCurrentTaskToDelayedList+0x58>)
   83de6:	681b      	ldr	r3, [r3, #0]
   83de8:	687a      	ldr	r2, [r7, #4]
   83dea:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   83dec:	4b12      	ldr	r3, [pc, #72]	; (83e38 <prvAddCurrentTaskToDelayedList+0x5c>)
   83dee:	681b      	ldr	r3, [r3, #0]
   83df0:	687a      	ldr	r2, [r7, #4]
   83df2:	429a      	cmp	r2, r3
   83df4:	d209      	bcs.n	83e0a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83df6:	4b11      	ldr	r3, [pc, #68]	; (83e3c <prvAddCurrentTaskToDelayedList+0x60>)
   83df8:	681a      	ldr	r2, [r3, #0]
   83dfa:	4b0e      	ldr	r3, [pc, #56]	; (83e34 <prvAddCurrentTaskToDelayedList+0x58>)
   83dfc:	681b      	ldr	r3, [r3, #0]
   83dfe:	3304      	adds	r3, #4
   83e00:	4610      	mov	r0, r2
   83e02:	4619      	mov	r1, r3
   83e04:	4b0e      	ldr	r3, [pc, #56]	; (83e40 <prvAddCurrentTaskToDelayedList+0x64>)
   83e06:	4798      	blx	r3
   83e08:	e010      	b.n	83e2c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83e0a:	4b0e      	ldr	r3, [pc, #56]	; (83e44 <prvAddCurrentTaskToDelayedList+0x68>)
   83e0c:	681a      	ldr	r2, [r3, #0]
   83e0e:	4b09      	ldr	r3, [pc, #36]	; (83e34 <prvAddCurrentTaskToDelayedList+0x58>)
   83e10:	681b      	ldr	r3, [r3, #0]
   83e12:	3304      	adds	r3, #4
   83e14:	4610      	mov	r0, r2
   83e16:	4619      	mov	r1, r3
   83e18:	4b09      	ldr	r3, [pc, #36]	; (83e40 <prvAddCurrentTaskToDelayedList+0x64>)
   83e1a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   83e1c:	4b0a      	ldr	r3, [pc, #40]	; (83e48 <prvAddCurrentTaskToDelayedList+0x6c>)
   83e1e:	681b      	ldr	r3, [r3, #0]
   83e20:	687a      	ldr	r2, [r7, #4]
   83e22:	429a      	cmp	r2, r3
   83e24:	d202      	bcs.n	83e2c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   83e26:	4b08      	ldr	r3, [pc, #32]	; (83e48 <prvAddCurrentTaskToDelayedList+0x6c>)
   83e28:	687a      	ldr	r2, [r7, #4]
   83e2a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   83e2c:	3708      	adds	r7, #8
   83e2e:	46bd      	mov	sp, r7
   83e30:	bd80      	pop	{r7, pc}
   83e32:	bf00      	nop
   83e34:	2007a500 	.word	0x2007a500
   83e38:	2007a5dc 	.word	0x2007a5dc
   83e3c:	2007a594 	.word	0x2007a594
   83e40:	000821f5 	.word	0x000821f5
   83e44:	2007a590 	.word	0x2007a590
   83e48:	20070008 	.word	0x20070008

00083e4c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   83e4c:	b580      	push	{r7, lr}
   83e4e:	b084      	sub	sp, #16
   83e50:	af00      	add	r7, sp, #0
   83e52:	4603      	mov	r3, r0
   83e54:	6039      	str	r1, [r7, #0]
   83e56:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   83e58:	2048      	movs	r0, #72	; 0x48
   83e5a:	4b15      	ldr	r3, [pc, #84]	; (83eb0 <prvAllocateTCBAndStack+0x64>)
   83e5c:	4798      	blx	r3
   83e5e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   83e60:	68fb      	ldr	r3, [r7, #12]
   83e62:	2b00      	cmp	r3, #0
   83e64:	d01f      	beq.n	83ea6 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83e66:	683b      	ldr	r3, [r7, #0]
   83e68:	2b00      	cmp	r3, #0
   83e6a:	d106      	bne.n	83e7a <prvAllocateTCBAndStack+0x2e>
   83e6c:	88fb      	ldrh	r3, [r7, #6]
   83e6e:	009b      	lsls	r3, r3, #2
   83e70:	4618      	mov	r0, r3
   83e72:	4b0f      	ldr	r3, [pc, #60]	; (83eb0 <prvAllocateTCBAndStack+0x64>)
   83e74:	4798      	blx	r3
   83e76:	4603      	mov	r3, r0
   83e78:	e000      	b.n	83e7c <prvAllocateTCBAndStack+0x30>
   83e7a:	683b      	ldr	r3, [r7, #0]
   83e7c:	68fa      	ldr	r2, [r7, #12]
   83e7e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   83e80:	68fb      	ldr	r3, [r7, #12]
   83e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83e84:	2b00      	cmp	r3, #0
   83e86:	d105      	bne.n	83e94 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   83e88:	68f8      	ldr	r0, [r7, #12]
   83e8a:	4b0a      	ldr	r3, [pc, #40]	; (83eb4 <prvAllocateTCBAndStack+0x68>)
   83e8c:	4798      	blx	r3
			pxNewTCB = NULL;
   83e8e:	2300      	movs	r3, #0
   83e90:	60fb      	str	r3, [r7, #12]
   83e92:	e008      	b.n	83ea6 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   83e94:	68fb      	ldr	r3, [r7, #12]
   83e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83e98:	88fb      	ldrh	r3, [r7, #6]
   83e9a:	009b      	lsls	r3, r3, #2
   83e9c:	4610      	mov	r0, r2
   83e9e:	21a5      	movs	r1, #165	; 0xa5
   83ea0:	461a      	mov	r2, r3
   83ea2:	4b05      	ldr	r3, [pc, #20]	; (83eb8 <prvAllocateTCBAndStack+0x6c>)
   83ea4:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   83ea6:	68fb      	ldr	r3, [r7, #12]
}
   83ea8:	4618      	mov	r0, r3
   83eaa:	3710      	adds	r7, #16
   83eac:	46bd      	mov	sp, r7
   83eae:	bd80      	pop	{r7, pc}
   83eb0:	00082601 	.word	0x00082601
   83eb4:	00082779 	.word	0x00082779
   83eb8:	0008534d 	.word	0x0008534d

00083ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   83ebc:	b580      	push	{r7, lr}
   83ebe:	b082      	sub	sp, #8
   83ec0:	af00      	add	r7, sp, #0
   83ec2:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   83ec4:	687b      	ldr	r3, [r7, #4]
   83ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ec8:	4618      	mov	r0, r3
   83eca:	4b04      	ldr	r3, [pc, #16]	; (83edc <prvDeleteTCB+0x20>)
   83ecc:	4798      	blx	r3
		vPortFree( pxTCB );
   83ece:	6878      	ldr	r0, [r7, #4]
   83ed0:	4b02      	ldr	r3, [pc, #8]	; (83edc <prvDeleteTCB+0x20>)
   83ed2:	4798      	blx	r3
	}
   83ed4:	3708      	adds	r7, #8
   83ed6:	46bd      	mov	sp, r7
   83ed8:	bd80      	pop	{r7, pc}
   83eda:	bf00      	nop
   83edc:	00082779 	.word	0x00082779

00083ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   83ee0:	b480      	push	{r7}
   83ee2:	b083      	sub	sp, #12
   83ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   83ee6:	4b0e      	ldr	r3, [pc, #56]	; (83f20 <prvResetNextTaskUnblockTime+0x40>)
   83ee8:	681b      	ldr	r3, [r3, #0]
   83eea:	681b      	ldr	r3, [r3, #0]
   83eec:	2b00      	cmp	r3, #0
   83eee:	d101      	bne.n	83ef4 <prvResetNextTaskUnblockTime+0x14>
   83ef0:	2301      	movs	r3, #1
   83ef2:	e000      	b.n	83ef6 <prvResetNextTaskUnblockTime+0x16>
   83ef4:	2300      	movs	r3, #0
   83ef6:	2b00      	cmp	r3, #0
   83ef8:	d004      	beq.n	83f04 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   83efa:	4b0a      	ldr	r3, [pc, #40]	; (83f24 <prvResetNextTaskUnblockTime+0x44>)
   83efc:	f04f 32ff 	mov.w	r2, #4294967295
   83f00:	601a      	str	r2, [r3, #0]
   83f02:	e008      	b.n	83f16 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   83f04:	4b06      	ldr	r3, [pc, #24]	; (83f20 <prvResetNextTaskUnblockTime+0x40>)
   83f06:	681b      	ldr	r3, [r3, #0]
   83f08:	68db      	ldr	r3, [r3, #12]
   83f0a:	68db      	ldr	r3, [r3, #12]
   83f0c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   83f0e:	687b      	ldr	r3, [r7, #4]
   83f10:	685a      	ldr	r2, [r3, #4]
   83f12:	4b04      	ldr	r3, [pc, #16]	; (83f24 <prvResetNextTaskUnblockTime+0x44>)
   83f14:	601a      	str	r2, [r3, #0]
	}
}
   83f16:	370c      	adds	r7, #12
   83f18:	46bd      	mov	sp, r7
   83f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   83f1e:	4770      	bx	lr
   83f20:	2007a590 	.word	0x2007a590
   83f24:	20070008 	.word	0x20070008

00083f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   83f28:	b480      	push	{r7}
   83f2a:	b083      	sub	sp, #12
   83f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   83f2e:	4b0b      	ldr	r3, [pc, #44]	; (83f5c <xTaskGetSchedulerState+0x34>)
   83f30:	681b      	ldr	r3, [r3, #0]
   83f32:	2b00      	cmp	r3, #0
   83f34:	d102      	bne.n	83f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   83f36:	2301      	movs	r3, #1
   83f38:	607b      	str	r3, [r7, #4]
   83f3a:	e008      	b.n	83f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83f3c:	4b08      	ldr	r3, [pc, #32]	; (83f60 <xTaskGetSchedulerState+0x38>)
   83f3e:	681b      	ldr	r3, [r3, #0]
   83f40:	2b00      	cmp	r3, #0
   83f42:	d102      	bne.n	83f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   83f44:	2302      	movs	r3, #2
   83f46:	607b      	str	r3, [r7, #4]
   83f48:	e001      	b.n	83f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   83f4a:	2300      	movs	r3, #0
   83f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   83f4e:	687b      	ldr	r3, [r7, #4]
	}
   83f50:	4618      	mov	r0, r3
   83f52:	370c      	adds	r7, #12
   83f54:	46bd      	mov	sp, r7
   83f56:	f85d 7b04 	ldr.w	r7, [sp], #4
   83f5a:	4770      	bx	lr
   83f5c:	2007a5e4 	.word	0x2007a5e4
   83f60:	2007a5f8 	.word	0x2007a5f8

00083f64 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   83f64:	b580      	push	{r7, lr}
   83f66:	b084      	sub	sp, #16
   83f68:	af00      	add	r7, sp, #0
   83f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   83f6c:	687b      	ldr	r3, [r7, #4]
   83f6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   83f70:	687b      	ldr	r3, [r7, #4]
   83f72:	2b00      	cmp	r3, #0
   83f74:	d062      	beq.n	8403c <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   83f76:	68fb      	ldr	r3, [r7, #12]
   83f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f7a:	4b32      	ldr	r3, [pc, #200]	; (84044 <vTaskPriorityInherit+0xe0>)
   83f7c:	681b      	ldr	r3, [r3, #0]
   83f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f80:	429a      	cmp	r2, r3
   83f82:	d25b      	bcs.n	8403c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   83f84:	68fb      	ldr	r3, [r7, #12]
   83f86:	699b      	ldr	r3, [r3, #24]
   83f88:	2b00      	cmp	r3, #0
   83f8a:	db06      	blt.n	83f9a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83f8c:	4b2d      	ldr	r3, [pc, #180]	; (84044 <vTaskPriorityInherit+0xe0>)
   83f8e:	681b      	ldr	r3, [r3, #0]
   83f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f92:	f1c3 0205 	rsb	r2, r3, #5
   83f96:	68fb      	ldr	r3, [r7, #12]
   83f98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   83f9a:	68fb      	ldr	r3, [r7, #12]
   83f9c:	6959      	ldr	r1, [r3, #20]
   83f9e:	68fb      	ldr	r3, [r7, #12]
   83fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83fa2:	4613      	mov	r3, r2
   83fa4:	009b      	lsls	r3, r3, #2
   83fa6:	4413      	add	r3, r2
   83fa8:	009b      	lsls	r3, r3, #2
   83faa:	4a27      	ldr	r2, [pc, #156]	; (84048 <vTaskPriorityInherit+0xe4>)
   83fac:	4413      	add	r3, r2
   83fae:	4299      	cmp	r1, r3
   83fb0:	d101      	bne.n	83fb6 <vTaskPriorityInherit+0x52>
   83fb2:	2301      	movs	r3, #1
   83fb4:	e000      	b.n	83fb8 <vTaskPriorityInherit+0x54>
   83fb6:	2300      	movs	r3, #0
   83fb8:	2b00      	cmp	r3, #0
   83fba:	d03a      	beq.n	84032 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83fbc:	68fb      	ldr	r3, [r7, #12]
   83fbe:	3304      	adds	r3, #4
   83fc0:	4618      	mov	r0, r3
   83fc2:	4b22      	ldr	r3, [pc, #136]	; (8404c <vTaskPriorityInherit+0xe8>)
   83fc4:	4798      	blx	r3
   83fc6:	4603      	mov	r3, r0
   83fc8:	2b00      	cmp	r3, #0
   83fca:	d115      	bne.n	83ff8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   83fcc:	68fb      	ldr	r3, [r7, #12]
   83fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83fd0:	491d      	ldr	r1, [pc, #116]	; (84048 <vTaskPriorityInherit+0xe4>)
   83fd2:	4613      	mov	r3, r2
   83fd4:	009b      	lsls	r3, r3, #2
   83fd6:	4413      	add	r3, r2
   83fd8:	009b      	lsls	r3, r3, #2
   83fda:	440b      	add	r3, r1
   83fdc:	681b      	ldr	r3, [r3, #0]
   83fde:	2b00      	cmp	r3, #0
   83fe0:	d10a      	bne.n	83ff8 <vTaskPriorityInherit+0x94>
   83fe2:	68fb      	ldr	r3, [r7, #12]
   83fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83fe6:	2201      	movs	r2, #1
   83fe8:	fa02 f303 	lsl.w	r3, r2, r3
   83fec:	43da      	mvns	r2, r3
   83fee:	4b18      	ldr	r3, [pc, #96]	; (84050 <vTaskPriorityInherit+0xec>)
   83ff0:	681b      	ldr	r3, [r3, #0]
   83ff2:	401a      	ands	r2, r3
   83ff4:	4b16      	ldr	r3, [pc, #88]	; (84050 <vTaskPriorityInherit+0xec>)
   83ff6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   83ff8:	4b12      	ldr	r3, [pc, #72]	; (84044 <vTaskPriorityInherit+0xe0>)
   83ffa:	681b      	ldr	r3, [r3, #0]
   83ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83ffe:	68fb      	ldr	r3, [r7, #12]
   84000:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   84002:	68fb      	ldr	r3, [r7, #12]
   84004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84006:	2201      	movs	r2, #1
   84008:	409a      	lsls	r2, r3
   8400a:	4b11      	ldr	r3, [pc, #68]	; (84050 <vTaskPriorityInherit+0xec>)
   8400c:	681b      	ldr	r3, [r3, #0]
   8400e:	431a      	orrs	r2, r3
   84010:	4b0f      	ldr	r3, [pc, #60]	; (84050 <vTaskPriorityInherit+0xec>)
   84012:	601a      	str	r2, [r3, #0]
   84014:	68fb      	ldr	r3, [r7, #12]
   84016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84018:	4613      	mov	r3, r2
   8401a:	009b      	lsls	r3, r3, #2
   8401c:	4413      	add	r3, r2
   8401e:	009b      	lsls	r3, r3, #2
   84020:	4a09      	ldr	r2, [pc, #36]	; (84048 <vTaskPriorityInherit+0xe4>)
   84022:	441a      	add	r2, r3
   84024:	68fb      	ldr	r3, [r7, #12]
   84026:	3304      	adds	r3, #4
   84028:	4610      	mov	r0, r2
   8402a:	4619      	mov	r1, r3
   8402c:	4b09      	ldr	r3, [pc, #36]	; (84054 <vTaskPriorityInherit+0xf0>)
   8402e:	4798      	blx	r3
   84030:	e004      	b.n	8403c <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84032:	4b04      	ldr	r3, [pc, #16]	; (84044 <vTaskPriorityInherit+0xe0>)
   84034:	681b      	ldr	r3, [r3, #0]
   84036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84038:	68fb      	ldr	r3, [r7, #12]
   8403a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   8403c:	3710      	adds	r7, #16
   8403e:	46bd      	mov	sp, r7
   84040:	bd80      	pop	{r7, pc}
   84042:	bf00      	nop
   84044:	2007a500 	.word	0x2007a500
   84048:	2007a504 	.word	0x2007a504
   8404c:	00082265 	.word	0x00082265
   84050:	2007a5e0 	.word	0x2007a5e0
   84054:	000821ad 	.word	0x000821ad

00084058 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   84058:	b580      	push	{r7, lr}
   8405a:	b084      	sub	sp, #16
   8405c:	af00      	add	r7, sp, #0
   8405e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84060:	687b      	ldr	r3, [r7, #4]
   84062:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   84064:	2300      	movs	r3, #0
   84066:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   84068:	687b      	ldr	r3, [r7, #4]
   8406a:	2b00      	cmp	r3, #0
   8406c:	d056      	beq.n	8411c <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   8406e:	68bb      	ldr	r3, [r7, #8]
   84070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84072:	2b00      	cmp	r3, #0
   84074:	d102      	bne.n	8407c <xTaskPriorityDisinherit+0x24>
   84076:	4b2c      	ldr	r3, [pc, #176]	; (84128 <xTaskPriorityDisinherit+0xd0>)
   84078:	4798      	blx	r3
   8407a:	e7fe      	b.n	8407a <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   8407c:	68bb      	ldr	r3, [r7, #8]
   8407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84080:	1e5a      	subs	r2, r3, #1
   84082:	68bb      	ldr	r3, [r7, #8]
   84084:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   84086:	68bb      	ldr	r3, [r7, #8]
   84088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8408a:	68bb      	ldr	r3, [r7, #8]
   8408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8408e:	429a      	cmp	r2, r3
   84090:	d044      	beq.n	8411c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84092:	68bb      	ldr	r3, [r7, #8]
   84094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84096:	2b00      	cmp	r3, #0
   84098:	d140      	bne.n	8411c <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8409a:	68bb      	ldr	r3, [r7, #8]
   8409c:	3304      	adds	r3, #4
   8409e:	4618      	mov	r0, r3
   840a0:	4b22      	ldr	r3, [pc, #136]	; (8412c <xTaskPriorityDisinherit+0xd4>)
   840a2:	4798      	blx	r3
   840a4:	4603      	mov	r3, r0
   840a6:	2b00      	cmp	r3, #0
   840a8:	d115      	bne.n	840d6 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   840aa:	68bb      	ldr	r3, [r7, #8]
   840ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   840ae:	4920      	ldr	r1, [pc, #128]	; (84130 <xTaskPriorityDisinherit+0xd8>)
   840b0:	4613      	mov	r3, r2
   840b2:	009b      	lsls	r3, r3, #2
   840b4:	4413      	add	r3, r2
   840b6:	009b      	lsls	r3, r3, #2
   840b8:	440b      	add	r3, r1
   840ba:	681b      	ldr	r3, [r3, #0]
   840bc:	2b00      	cmp	r3, #0
   840be:	d10a      	bne.n	840d6 <xTaskPriorityDisinherit+0x7e>
   840c0:	68bb      	ldr	r3, [r7, #8]
   840c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   840c4:	2201      	movs	r2, #1
   840c6:	fa02 f303 	lsl.w	r3, r2, r3
   840ca:	43da      	mvns	r2, r3
   840cc:	4b19      	ldr	r3, [pc, #100]	; (84134 <xTaskPriorityDisinherit+0xdc>)
   840ce:	681b      	ldr	r3, [r3, #0]
   840d0:	401a      	ands	r2, r3
   840d2:	4b18      	ldr	r3, [pc, #96]	; (84134 <xTaskPriorityDisinherit+0xdc>)
   840d4:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   840d6:	68bb      	ldr	r3, [r7, #8]
   840d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   840da:	68bb      	ldr	r3, [r7, #8]
   840dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   840de:	68bb      	ldr	r3, [r7, #8]
   840e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   840e2:	f1c3 0205 	rsb	r2, r3, #5
   840e6:	68bb      	ldr	r3, [r7, #8]
   840e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   840ea:	68bb      	ldr	r3, [r7, #8]
   840ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   840ee:	2201      	movs	r2, #1
   840f0:	409a      	lsls	r2, r3
   840f2:	4b10      	ldr	r3, [pc, #64]	; (84134 <xTaskPriorityDisinherit+0xdc>)
   840f4:	681b      	ldr	r3, [r3, #0]
   840f6:	431a      	orrs	r2, r3
   840f8:	4b0e      	ldr	r3, [pc, #56]	; (84134 <xTaskPriorityDisinherit+0xdc>)
   840fa:	601a      	str	r2, [r3, #0]
   840fc:	68bb      	ldr	r3, [r7, #8]
   840fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84100:	4613      	mov	r3, r2
   84102:	009b      	lsls	r3, r3, #2
   84104:	4413      	add	r3, r2
   84106:	009b      	lsls	r3, r3, #2
   84108:	4a09      	ldr	r2, [pc, #36]	; (84130 <xTaskPriorityDisinherit+0xd8>)
   8410a:	441a      	add	r2, r3
   8410c:	68bb      	ldr	r3, [r7, #8]
   8410e:	3304      	adds	r3, #4
   84110:	4610      	mov	r0, r2
   84112:	4619      	mov	r1, r3
   84114:	4b08      	ldr	r3, [pc, #32]	; (84138 <xTaskPriorityDisinherit+0xe0>)
   84116:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84118:	2301      	movs	r3, #1
   8411a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   8411c:	68fb      	ldr	r3, [r7, #12]
	}
   8411e:	4618      	mov	r0, r3
   84120:	3710      	adds	r7, #16
   84122:	46bd      	mov	sp, r7
   84124:	bd80      	pop	{r7, pc}
   84126:	bf00      	nop
   84128:	000824dd 	.word	0x000824dd
   8412c:	00082265 	.word	0x00082265
   84130:	2007a504 	.word	0x2007a504
   84134:	2007a5e0 	.word	0x2007a5e0
   84138:	000821ad 	.word	0x000821ad

0008413c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   8413c:	b480      	push	{r7}
   8413e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84140:	4b07      	ldr	r3, [pc, #28]	; (84160 <pvTaskIncrementMutexHeldCount+0x24>)
   84142:	681b      	ldr	r3, [r3, #0]
   84144:	2b00      	cmp	r3, #0
   84146:	d004      	beq.n	84152 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84148:	4b05      	ldr	r3, [pc, #20]	; (84160 <pvTaskIncrementMutexHeldCount+0x24>)
   8414a:	681b      	ldr	r3, [r3, #0]
   8414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   8414e:	3201      	adds	r2, #1
   84150:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84152:	4b03      	ldr	r3, [pc, #12]	; (84160 <pvTaskIncrementMutexHeldCount+0x24>)
   84154:	681b      	ldr	r3, [r3, #0]
	}
   84156:	4618      	mov	r0, r3
   84158:	46bd      	mov	sp, r7
   8415a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8415e:	4770      	bx	lr
   84160:	2007a500 	.word	0x2007a500

00084164 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84164:	b590      	push	{r4, r7, lr}
   84166:	b087      	sub	sp, #28
   84168:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   8416a:	2300      	movs	r3, #0
   8416c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   8416e:	4b10      	ldr	r3, [pc, #64]	; (841b0 <xTimerCreateTimerTask+0x4c>)
   84170:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84172:	4b10      	ldr	r3, [pc, #64]	; (841b4 <xTimerCreateTimerTask+0x50>)
   84174:	681b      	ldr	r3, [r3, #0]
   84176:	2b00      	cmp	r3, #0
   84178:	d00f      	beq.n	8419a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8417a:	2302      	movs	r3, #2
   8417c:	9300      	str	r3, [sp, #0]
   8417e:	2300      	movs	r3, #0
   84180:	9301      	str	r3, [sp, #4]
   84182:	2300      	movs	r3, #0
   84184:	9302      	str	r3, [sp, #8]
   84186:	2300      	movs	r3, #0
   84188:	9303      	str	r3, [sp, #12]
   8418a:	480b      	ldr	r0, [pc, #44]	; (841b8 <xTimerCreateTimerTask+0x54>)
   8418c:	490b      	ldr	r1, [pc, #44]	; (841bc <xTimerCreateTimerTask+0x58>)
   8418e:	f44f 7282 	mov.w	r2, #260	; 0x104
   84192:	2300      	movs	r3, #0
   84194:	4c0a      	ldr	r4, [pc, #40]	; (841c0 <xTimerCreateTimerTask+0x5c>)
   84196:	47a0      	blx	r4
   84198:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8419a:	687b      	ldr	r3, [r7, #4]
   8419c:	2b00      	cmp	r3, #0
   8419e:	d102      	bne.n	841a6 <xTimerCreateTimerTask+0x42>
   841a0:	4b08      	ldr	r3, [pc, #32]	; (841c4 <xTimerCreateTimerTask+0x60>)
   841a2:	4798      	blx	r3
   841a4:	e7fe      	b.n	841a4 <xTimerCreateTimerTask+0x40>
	return xReturn;
   841a6:	687b      	ldr	r3, [r7, #4]
}
   841a8:	4618      	mov	r0, r3
   841aa:	370c      	adds	r7, #12
   841ac:	46bd      	mov	sp, r7
   841ae:	bd90      	pop	{r4, r7, pc}
   841b0:	00084699 	.word	0x00084699
   841b4:	2007a62c 	.word	0x2007a62c
   841b8:	000842e1 	.word	0x000842e1
   841bc:	00085614 	.word	0x00085614
   841c0:	00083251 	.word	0x00083251
   841c4:	000824dd 	.word	0x000824dd

000841c8 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   841c8:	b590      	push	{r4, r7, lr}
   841ca:	b089      	sub	sp, #36	; 0x24
   841cc:	af00      	add	r7, sp, #0
   841ce:	60f8      	str	r0, [r7, #12]
   841d0:	60b9      	str	r1, [r7, #8]
   841d2:	607a      	str	r2, [r7, #4]
   841d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   841d6:	2300      	movs	r3, #0
   841d8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   841da:	4b1d      	ldr	r3, [pc, #116]	; (84250 <xTimerGenericCommand+0x88>)
   841dc:	681b      	ldr	r3, [r3, #0]
   841de:	2b00      	cmp	r3, #0
   841e0:	d030      	beq.n	84244 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   841e2:	68bb      	ldr	r3, [r7, #8]
   841e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   841e6:	687b      	ldr	r3, [r7, #4]
   841e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   841ea:	68fb      	ldr	r3, [r7, #12]
   841ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   841ee:	68bb      	ldr	r3, [r7, #8]
   841f0:	2b05      	cmp	r3, #5
   841f2:	dc1c      	bgt.n	8422e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   841f4:	4b17      	ldr	r3, [pc, #92]	; (84254 <xTimerGenericCommand+0x8c>)
   841f6:	4798      	blx	r3
   841f8:	4603      	mov	r3, r0
   841fa:	2b02      	cmp	r3, #2
   841fc:	d10b      	bne.n	84216 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   841fe:	4b14      	ldr	r3, [pc, #80]	; (84250 <xTimerGenericCommand+0x88>)
   84200:	681a      	ldr	r2, [r3, #0]
   84202:	f107 0310 	add.w	r3, r7, #16
   84206:	4610      	mov	r0, r2
   84208:	4619      	mov	r1, r3
   8420a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   8420c:	2300      	movs	r3, #0
   8420e:	4c12      	ldr	r4, [pc, #72]	; (84258 <xTimerGenericCommand+0x90>)
   84210:	47a0      	blx	r4
   84212:	61f8      	str	r0, [r7, #28]
   84214:	e016      	b.n	84244 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84216:	4b0e      	ldr	r3, [pc, #56]	; (84250 <xTimerGenericCommand+0x88>)
   84218:	681a      	ldr	r2, [r3, #0]
   8421a:	f107 0310 	add.w	r3, r7, #16
   8421e:	4610      	mov	r0, r2
   84220:	4619      	mov	r1, r3
   84222:	2200      	movs	r2, #0
   84224:	2300      	movs	r3, #0
   84226:	4c0c      	ldr	r4, [pc, #48]	; (84258 <xTimerGenericCommand+0x90>)
   84228:	47a0      	blx	r4
   8422a:	61f8      	str	r0, [r7, #28]
   8422c:	e00a      	b.n	84244 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8422e:	4b08      	ldr	r3, [pc, #32]	; (84250 <xTimerGenericCommand+0x88>)
   84230:	681a      	ldr	r2, [r3, #0]
   84232:	f107 0310 	add.w	r3, r7, #16
   84236:	4610      	mov	r0, r2
   84238:	4619      	mov	r1, r3
   8423a:	683a      	ldr	r2, [r7, #0]
   8423c:	2300      	movs	r3, #0
   8423e:	4c07      	ldr	r4, [pc, #28]	; (8425c <xTimerGenericCommand+0x94>)
   84240:	47a0      	blx	r4
   84242:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84244:	69fb      	ldr	r3, [r7, #28]
}
   84246:	4618      	mov	r0, r3
   84248:	3724      	adds	r7, #36	; 0x24
   8424a:	46bd      	mov	sp, r7
   8424c:	bd90      	pop	{r4, r7, pc}
   8424e:	bf00      	nop
   84250:	2007a62c 	.word	0x2007a62c
   84254:	00083f29 	.word	0x00083f29
   84258:	00082ae5 	.word	0x00082ae5
   8425c:	00082ca9 	.word	0x00082ca9

00084260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   84260:	b590      	push	{r4, r7, lr}
   84262:	b087      	sub	sp, #28
   84264:	af02      	add	r7, sp, #8
   84266:	6078      	str	r0, [r7, #4]
   84268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8426a:	4b18      	ldr	r3, [pc, #96]	; (842cc <prvProcessExpiredTimer+0x6c>)
   8426c:	681b      	ldr	r3, [r3, #0]
   8426e:	68db      	ldr	r3, [r3, #12]
   84270:	68db      	ldr	r3, [r3, #12]
   84272:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84274:	68fb      	ldr	r3, [r7, #12]
   84276:	3304      	adds	r3, #4
   84278:	4618      	mov	r0, r3
   8427a:	4b15      	ldr	r3, [pc, #84]	; (842d0 <prvProcessExpiredTimer+0x70>)
   8427c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8427e:	68fb      	ldr	r3, [r7, #12]
   84280:	69db      	ldr	r3, [r3, #28]
   84282:	2b01      	cmp	r3, #1
   84284:	d11b      	bne.n	842be <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   84286:	68fb      	ldr	r3, [r7, #12]
   84288:	699a      	ldr	r2, [r3, #24]
   8428a:	687b      	ldr	r3, [r7, #4]
   8428c:	4413      	add	r3, r2
   8428e:	68f8      	ldr	r0, [r7, #12]
   84290:	4619      	mov	r1, r3
   84292:	683a      	ldr	r2, [r7, #0]
   84294:	687b      	ldr	r3, [r7, #4]
   84296:	4c0f      	ldr	r4, [pc, #60]	; (842d4 <prvProcessExpiredTimer+0x74>)
   84298:	47a0      	blx	r4
   8429a:	4603      	mov	r3, r0
   8429c:	2b01      	cmp	r3, #1
   8429e:	d10e      	bne.n	842be <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   842a0:	2300      	movs	r3, #0
   842a2:	9300      	str	r3, [sp, #0]
   842a4:	68f8      	ldr	r0, [r7, #12]
   842a6:	2100      	movs	r1, #0
   842a8:	687a      	ldr	r2, [r7, #4]
   842aa:	2300      	movs	r3, #0
   842ac:	4c0a      	ldr	r4, [pc, #40]	; (842d8 <prvProcessExpiredTimer+0x78>)
   842ae:	47a0      	blx	r4
   842b0:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   842b2:	68bb      	ldr	r3, [r7, #8]
   842b4:	2b00      	cmp	r3, #0
   842b6:	d102      	bne.n	842be <prvProcessExpiredTimer+0x5e>
   842b8:	4b08      	ldr	r3, [pc, #32]	; (842dc <prvProcessExpiredTimer+0x7c>)
   842ba:	4798      	blx	r3
   842bc:	e7fe      	b.n	842bc <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   842be:	68fb      	ldr	r3, [r7, #12]
   842c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   842c2:	68f8      	ldr	r0, [r7, #12]
   842c4:	4798      	blx	r3
}
   842c6:	3714      	adds	r7, #20
   842c8:	46bd      	mov	sp, r7
   842ca:	bd90      	pop	{r4, r7, pc}
   842cc:	2007a624 	.word	0x2007a624
   842d0:	00082265 	.word	0x00082265
   842d4:	00084425 	.word	0x00084425
   842d8:	000841c9 	.word	0x000841c9
   842dc:	000824dd 	.word	0x000824dd

000842e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   842e0:	b580      	push	{r7, lr}
   842e2:	b084      	sub	sp, #16
   842e4:	af00      	add	r7, sp, #0
   842e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   842e8:	f107 0308 	add.w	r3, r7, #8
   842ec:	4618      	mov	r0, r3
   842ee:	4b05      	ldr	r3, [pc, #20]	; (84304 <prvTimerTask+0x24>)
   842f0:	4798      	blx	r3
   842f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   842f4:	68bb      	ldr	r3, [r7, #8]
   842f6:	68f8      	ldr	r0, [r7, #12]
   842f8:	4619      	mov	r1, r3
   842fa:	4b03      	ldr	r3, [pc, #12]	; (84308 <prvTimerTask+0x28>)
   842fc:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   842fe:	4b03      	ldr	r3, [pc, #12]	; (8430c <prvTimerTask+0x2c>)
   84300:	4798      	blx	r3
	}
   84302:	e7f1      	b.n	842e8 <prvTimerTask+0x8>
   84304:	00084395 	.word	0x00084395
   84308:	00084311 	.word	0x00084311
   8430c:	000844ad 	.word	0x000844ad

00084310 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   84310:	b580      	push	{r7, lr}
   84312:	b084      	sub	sp, #16
   84314:	af00      	add	r7, sp, #0
   84316:	6078      	str	r0, [r7, #4]
   84318:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   8431a:	4b17      	ldr	r3, [pc, #92]	; (84378 <prvProcessTimerOrBlockTask+0x68>)
   8431c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8431e:	f107 0308 	add.w	r3, r7, #8
   84322:	4618      	mov	r0, r3
   84324:	4b15      	ldr	r3, [pc, #84]	; (8437c <prvProcessTimerOrBlockTask+0x6c>)
   84326:	4798      	blx	r3
   84328:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   8432a:	68bb      	ldr	r3, [r7, #8]
   8432c:	2b00      	cmp	r3, #0
   8432e:	d11e      	bne.n	8436e <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   84330:	683b      	ldr	r3, [r7, #0]
   84332:	2b00      	cmp	r3, #0
   84334:	d10a      	bne.n	8434c <prvProcessTimerOrBlockTask+0x3c>
   84336:	687a      	ldr	r2, [r7, #4]
   84338:	68fb      	ldr	r3, [r7, #12]
   8433a:	429a      	cmp	r2, r3
   8433c:	d806      	bhi.n	8434c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   8433e:	4b10      	ldr	r3, [pc, #64]	; (84380 <prvProcessTimerOrBlockTask+0x70>)
   84340:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   84342:	6878      	ldr	r0, [r7, #4]
   84344:	68f9      	ldr	r1, [r7, #12]
   84346:	4b0f      	ldr	r3, [pc, #60]	; (84384 <prvProcessTimerOrBlockTask+0x74>)
   84348:	4798      	blx	r3
   8434a:	e012      	b.n	84372 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8434c:	4b0e      	ldr	r3, [pc, #56]	; (84388 <prvProcessTimerOrBlockTask+0x78>)
   8434e:	681a      	ldr	r2, [r3, #0]
   84350:	6879      	ldr	r1, [r7, #4]
   84352:	68fb      	ldr	r3, [r7, #12]
   84354:	1acb      	subs	r3, r1, r3
   84356:	4610      	mov	r0, r2
   84358:	4619      	mov	r1, r3
   8435a:	4b0c      	ldr	r3, [pc, #48]	; (8438c <prvProcessTimerOrBlockTask+0x7c>)
   8435c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   8435e:	4b08      	ldr	r3, [pc, #32]	; (84380 <prvProcessTimerOrBlockTask+0x70>)
   84360:	4798      	blx	r3
   84362:	4603      	mov	r3, r0
   84364:	2b00      	cmp	r3, #0
   84366:	d104      	bne.n	84372 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   84368:	4b09      	ldr	r3, [pc, #36]	; (84390 <prvProcessTimerOrBlockTask+0x80>)
   8436a:	4798      	blx	r3
   8436c:	e001      	b.n	84372 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   8436e:	4b04      	ldr	r3, [pc, #16]	; (84380 <prvProcessTimerOrBlockTask+0x70>)
   84370:	4798      	blx	r3
		}
	}
}
   84372:	3710      	adds	r7, #16
   84374:	46bd      	mov	sp, r7
   84376:	bd80      	pop	{r7, pc}
   84378:	0008354d 	.word	0x0008354d
   8437c:	000843dd 	.word	0x000843dd
   84380:	00083569 	.word	0x00083569
   84384:	00084261 	.word	0x00084261
   84388:	2007a62c 	.word	0x2007a62c
   8438c:	000831e9 	.word	0x000831e9
   84390:	00082441 	.word	0x00082441

00084394 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   84394:	b480      	push	{r7}
   84396:	b085      	sub	sp, #20
   84398:	af00      	add	r7, sp, #0
   8439a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   8439c:	4b0e      	ldr	r3, [pc, #56]	; (843d8 <prvGetNextExpireTime+0x44>)
   8439e:	681b      	ldr	r3, [r3, #0]
   843a0:	681b      	ldr	r3, [r3, #0]
   843a2:	2b00      	cmp	r3, #0
   843a4:	bf14      	ite	ne
   843a6:	2300      	movne	r3, #0
   843a8:	2301      	moveq	r3, #1
   843aa:	b2db      	uxtb	r3, r3
   843ac:	461a      	mov	r2, r3
   843ae:	687b      	ldr	r3, [r7, #4]
   843b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   843b2:	687b      	ldr	r3, [r7, #4]
   843b4:	681b      	ldr	r3, [r3, #0]
   843b6:	2b00      	cmp	r3, #0
   843b8:	d105      	bne.n	843c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   843ba:	4b07      	ldr	r3, [pc, #28]	; (843d8 <prvGetNextExpireTime+0x44>)
   843bc:	681b      	ldr	r3, [r3, #0]
   843be:	68db      	ldr	r3, [r3, #12]
   843c0:	681b      	ldr	r3, [r3, #0]
   843c2:	60fb      	str	r3, [r7, #12]
   843c4:	e001      	b.n	843ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   843c6:	2300      	movs	r3, #0
   843c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   843ca:	68fb      	ldr	r3, [r7, #12]
}
   843cc:	4618      	mov	r0, r3
   843ce:	3714      	adds	r7, #20
   843d0:	46bd      	mov	sp, r7
   843d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   843d6:	4770      	bx	lr
   843d8:	2007a624 	.word	0x2007a624

000843dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   843dc:	b580      	push	{r7, lr}
   843de:	b084      	sub	sp, #16
   843e0:	af00      	add	r7, sp, #0
   843e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   843e4:	4b0c      	ldr	r3, [pc, #48]	; (84418 <prvSampleTimeNow+0x3c>)
   843e6:	4798      	blx	r3
   843e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   843ea:	4b0c      	ldr	r3, [pc, #48]	; (8441c <prvSampleTimeNow+0x40>)
   843ec:	681b      	ldr	r3, [r3, #0]
   843ee:	68fa      	ldr	r2, [r7, #12]
   843f0:	429a      	cmp	r2, r3
   843f2:	d205      	bcs.n	84400 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   843f4:	4b0a      	ldr	r3, [pc, #40]	; (84420 <prvSampleTimeNow+0x44>)
   843f6:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   843f8:	687b      	ldr	r3, [r7, #4]
   843fa:	2201      	movs	r2, #1
   843fc:	601a      	str	r2, [r3, #0]
   843fe:	e002      	b.n	84406 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   84400:	687b      	ldr	r3, [r7, #4]
   84402:	2200      	movs	r2, #0
   84404:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   84406:	4b05      	ldr	r3, [pc, #20]	; (8441c <prvSampleTimeNow+0x40>)
   84408:	68fa      	ldr	r2, [r7, #12]
   8440a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   8440c:	68fb      	ldr	r3, [r7, #12]
}
   8440e:	4618      	mov	r0, r3
   84410:	3710      	adds	r7, #16
   84412:	46bd      	mov	sp, r7
   84414:	bd80      	pop	{r7, pc}
   84416:	bf00      	nop
   84418:	0008368d 	.word	0x0008368d
   8441c:	2007a630 	.word	0x2007a630
   84420:	000845d9 	.word	0x000845d9

00084424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   84424:	b580      	push	{r7, lr}
   84426:	b086      	sub	sp, #24
   84428:	af00      	add	r7, sp, #0
   8442a:	60f8      	str	r0, [r7, #12]
   8442c:	60b9      	str	r1, [r7, #8]
   8442e:	607a      	str	r2, [r7, #4]
   84430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   84432:	2300      	movs	r3, #0
   84434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   84436:	68fb      	ldr	r3, [r7, #12]
   84438:	68ba      	ldr	r2, [r7, #8]
   8443a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8443c:	68fb      	ldr	r3, [r7, #12]
   8443e:	68fa      	ldr	r2, [r7, #12]
   84440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   84442:	68ba      	ldr	r2, [r7, #8]
   84444:	687b      	ldr	r3, [r7, #4]
   84446:	429a      	cmp	r2, r3
   84448:	d812      	bhi.n	84470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   8444a:	687a      	ldr	r2, [r7, #4]
   8444c:	683b      	ldr	r3, [r7, #0]
   8444e:	1ad2      	subs	r2, r2, r3
   84450:	68fb      	ldr	r3, [r7, #12]
   84452:	699b      	ldr	r3, [r3, #24]
   84454:	429a      	cmp	r2, r3
   84456:	d302      	bcc.n	8445e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   84458:	2301      	movs	r3, #1
   8445a:	617b      	str	r3, [r7, #20]
   8445c:	e01b      	b.n	84496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8445e:	4b10      	ldr	r3, [pc, #64]	; (844a0 <prvInsertTimerInActiveList+0x7c>)
   84460:	681a      	ldr	r2, [r3, #0]
   84462:	68fb      	ldr	r3, [r7, #12]
   84464:	3304      	adds	r3, #4
   84466:	4610      	mov	r0, r2
   84468:	4619      	mov	r1, r3
   8446a:	4b0e      	ldr	r3, [pc, #56]	; (844a4 <prvInsertTimerInActiveList+0x80>)
   8446c:	4798      	blx	r3
   8446e:	e012      	b.n	84496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   84470:	687a      	ldr	r2, [r7, #4]
   84472:	683b      	ldr	r3, [r7, #0]
   84474:	429a      	cmp	r2, r3
   84476:	d206      	bcs.n	84486 <prvInsertTimerInActiveList+0x62>
   84478:	68ba      	ldr	r2, [r7, #8]
   8447a:	683b      	ldr	r3, [r7, #0]
   8447c:	429a      	cmp	r2, r3
   8447e:	d302      	bcc.n	84486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   84480:	2301      	movs	r3, #1
   84482:	617b      	str	r3, [r7, #20]
   84484:	e007      	b.n	84496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84486:	4b08      	ldr	r3, [pc, #32]	; (844a8 <prvInsertTimerInActiveList+0x84>)
   84488:	681a      	ldr	r2, [r3, #0]
   8448a:	68fb      	ldr	r3, [r7, #12]
   8448c:	3304      	adds	r3, #4
   8448e:	4610      	mov	r0, r2
   84490:	4619      	mov	r1, r3
   84492:	4b04      	ldr	r3, [pc, #16]	; (844a4 <prvInsertTimerInActiveList+0x80>)
   84494:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   84496:	697b      	ldr	r3, [r7, #20]
}
   84498:	4618      	mov	r0, r3
   8449a:	3718      	adds	r7, #24
   8449c:	46bd      	mov	sp, r7
   8449e:	bd80      	pop	{r7, pc}
   844a0:	2007a628 	.word	0x2007a628
   844a4:	000821f5 	.word	0x000821f5
   844a8:	2007a624 	.word	0x2007a624

000844ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   844ac:	b590      	push	{r4, r7, lr}
   844ae:	b08b      	sub	sp, #44	; 0x2c
   844b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   844b2:	e070      	b.n	84596 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   844b4:	68bb      	ldr	r3, [r7, #8]
   844b6:	2b00      	cmp	r3, #0
   844b8:	db6d      	blt.n	84596 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   844ba:	693b      	ldr	r3, [r7, #16]
   844bc:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   844be:	69fb      	ldr	r3, [r7, #28]
   844c0:	695b      	ldr	r3, [r3, #20]
   844c2:	2b00      	cmp	r3, #0
   844c4:	d004      	beq.n	844d0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   844c6:	69fb      	ldr	r3, [r7, #28]
   844c8:	3304      	adds	r3, #4
   844ca:	4618      	mov	r0, r3
   844cc:	4b3a      	ldr	r3, [pc, #232]	; (845b8 <prvProcessReceivedCommands+0x10c>)
   844ce:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   844d0:	1d3b      	adds	r3, r7, #4
   844d2:	4618      	mov	r0, r3
   844d4:	4b39      	ldr	r3, [pc, #228]	; (845bc <prvProcessReceivedCommands+0x110>)
   844d6:	4798      	blx	r3
   844d8:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   844da:	68bb      	ldr	r3, [r7, #8]
   844dc:	2b09      	cmp	r3, #9
   844de:	d859      	bhi.n	84594 <prvProcessReceivedCommands+0xe8>
   844e0:	a201      	add	r2, pc, #4	; (adr r2, 844e8 <prvProcessReceivedCommands+0x3c>)
   844e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   844e6:	bf00      	nop
   844e8:	00084511 	.word	0x00084511
   844ec:	00084511 	.word	0x00084511
   844f0:	00084511 	.word	0x00084511
   844f4:	00084595 	.word	0x00084595
   844f8:	00084563 	.word	0x00084563
   844fc:	0008458d 	.word	0x0008458d
   84500:	00084511 	.word	0x00084511
   84504:	00084511 	.word	0x00084511
   84508:	00084595 	.word	0x00084595
   8450c:	00084563 	.word	0x00084563
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   84510:	68fa      	ldr	r2, [r7, #12]
   84512:	69fb      	ldr	r3, [r7, #28]
   84514:	699b      	ldr	r3, [r3, #24]
   84516:	441a      	add	r2, r3
   84518:	68fb      	ldr	r3, [r7, #12]
   8451a:	69f8      	ldr	r0, [r7, #28]
   8451c:	4611      	mov	r1, r2
   8451e:	69ba      	ldr	r2, [r7, #24]
   84520:	4c27      	ldr	r4, [pc, #156]	; (845c0 <prvProcessReceivedCommands+0x114>)
   84522:	47a0      	blx	r4
   84524:	4603      	mov	r3, r0
   84526:	2b01      	cmp	r3, #1
   84528:	d11a      	bne.n	84560 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8452a:	69fb      	ldr	r3, [r7, #28]
   8452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8452e:	69f8      	ldr	r0, [r7, #28]
   84530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84532:	69fb      	ldr	r3, [r7, #28]
   84534:	69db      	ldr	r3, [r3, #28]
   84536:	2b01      	cmp	r3, #1
   84538:	d112      	bne.n	84560 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8453a:	68fa      	ldr	r2, [r7, #12]
   8453c:	69fb      	ldr	r3, [r7, #28]
   8453e:	699b      	ldr	r3, [r3, #24]
   84540:	4413      	add	r3, r2
   84542:	2200      	movs	r2, #0
   84544:	9200      	str	r2, [sp, #0]
   84546:	69f8      	ldr	r0, [r7, #28]
   84548:	2100      	movs	r1, #0
   8454a:	461a      	mov	r2, r3
   8454c:	2300      	movs	r3, #0
   8454e:	4c1d      	ldr	r4, [pc, #116]	; (845c4 <prvProcessReceivedCommands+0x118>)
   84550:	47a0      	blx	r4
   84552:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   84554:	697b      	ldr	r3, [r7, #20]
   84556:	2b00      	cmp	r3, #0
   84558:	d102      	bne.n	84560 <prvProcessReceivedCommands+0xb4>
   8455a:	4b1b      	ldr	r3, [pc, #108]	; (845c8 <prvProcessReceivedCommands+0x11c>)
   8455c:	4798      	blx	r3
   8455e:	e7fe      	b.n	8455e <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   84560:	e019      	b.n	84596 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   84562:	68fa      	ldr	r2, [r7, #12]
   84564:	69fb      	ldr	r3, [r7, #28]
   84566:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   84568:	69fb      	ldr	r3, [r7, #28]
   8456a:	699b      	ldr	r3, [r3, #24]
   8456c:	2b00      	cmp	r3, #0
   8456e:	d102      	bne.n	84576 <prvProcessReceivedCommands+0xca>
   84570:	4b15      	ldr	r3, [pc, #84]	; (845c8 <prvProcessReceivedCommands+0x11c>)
   84572:	4798      	blx	r3
   84574:	e7fe      	b.n	84574 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   84576:	69fb      	ldr	r3, [r7, #28]
   84578:	699a      	ldr	r2, [r3, #24]
   8457a:	69bb      	ldr	r3, [r7, #24]
   8457c:	4413      	add	r3, r2
   8457e:	69f8      	ldr	r0, [r7, #28]
   84580:	4619      	mov	r1, r3
   84582:	69ba      	ldr	r2, [r7, #24]
   84584:	69bb      	ldr	r3, [r7, #24]
   84586:	4c0e      	ldr	r4, [pc, #56]	; (845c0 <prvProcessReceivedCommands+0x114>)
   84588:	47a0      	blx	r4
					break;
   8458a:	e004      	b.n	84596 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   8458c:	69f8      	ldr	r0, [r7, #28]
   8458e:	4b0f      	ldr	r3, [pc, #60]	; (845cc <prvProcessReceivedCommands+0x120>)
   84590:	4798      	blx	r3
					break;
   84592:	e000      	b.n	84596 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   84594:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84596:	4b0e      	ldr	r3, [pc, #56]	; (845d0 <prvProcessReceivedCommands+0x124>)
   84598:	681a      	ldr	r2, [r3, #0]
   8459a:	f107 0308 	add.w	r3, r7, #8
   8459e:	4610      	mov	r0, r2
   845a0:	4619      	mov	r1, r3
   845a2:	2200      	movs	r2, #0
   845a4:	2300      	movs	r3, #0
   845a6:	4c0b      	ldr	r4, [pc, #44]	; (845d4 <prvProcessReceivedCommands+0x128>)
   845a8:	47a0      	blx	r4
   845aa:	4603      	mov	r3, r0
   845ac:	2b00      	cmp	r3, #0
   845ae:	d181      	bne.n	844b4 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   845b0:	3724      	adds	r7, #36	; 0x24
   845b2:	46bd      	mov	sp, r7
   845b4:	bd90      	pop	{r4, r7, pc}
   845b6:	bf00      	nop
   845b8:	00082265 	.word	0x00082265
   845bc:	000843dd 	.word	0x000843dd
   845c0:	00084425 	.word	0x00084425
   845c4:	000841c9 	.word	0x000841c9
   845c8:	000824dd 	.word	0x000824dd
   845cc:	00082779 	.word	0x00082779
   845d0:	2007a62c 	.word	0x2007a62c
   845d4:	00082da5 	.word	0x00082da5

000845d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   845d8:	b590      	push	{r4, r7, lr}
   845da:	b089      	sub	sp, #36	; 0x24
   845dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   845de:	e03d      	b.n	8465c <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   845e0:	4b27      	ldr	r3, [pc, #156]	; (84680 <prvSwitchTimerLists+0xa8>)
   845e2:	681b      	ldr	r3, [r3, #0]
   845e4:	68db      	ldr	r3, [r3, #12]
   845e6:	681b      	ldr	r3, [r3, #0]
   845e8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   845ea:	4b25      	ldr	r3, [pc, #148]	; (84680 <prvSwitchTimerLists+0xa8>)
   845ec:	681b      	ldr	r3, [r3, #0]
   845ee:	68db      	ldr	r3, [r3, #12]
   845f0:	68db      	ldr	r3, [r3, #12]
   845f2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   845f4:	693b      	ldr	r3, [r7, #16]
   845f6:	3304      	adds	r3, #4
   845f8:	4618      	mov	r0, r3
   845fa:	4b22      	ldr	r3, [pc, #136]	; (84684 <prvSwitchTimerLists+0xac>)
   845fc:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   845fe:	693b      	ldr	r3, [r7, #16]
   84600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84602:	6938      	ldr	r0, [r7, #16]
   84604:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84606:	693b      	ldr	r3, [r7, #16]
   84608:	69db      	ldr	r3, [r3, #28]
   8460a:	2b01      	cmp	r3, #1
   8460c:	d126      	bne.n	8465c <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   8460e:	693b      	ldr	r3, [r7, #16]
   84610:	699a      	ldr	r2, [r3, #24]
   84612:	697b      	ldr	r3, [r7, #20]
   84614:	4413      	add	r3, r2
   84616:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   84618:	68fa      	ldr	r2, [r7, #12]
   8461a:	697b      	ldr	r3, [r7, #20]
   8461c:	429a      	cmp	r2, r3
   8461e:	d90e      	bls.n	8463e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   84620:	693b      	ldr	r3, [r7, #16]
   84622:	68fa      	ldr	r2, [r7, #12]
   84624:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84626:	693b      	ldr	r3, [r7, #16]
   84628:	693a      	ldr	r2, [r7, #16]
   8462a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8462c:	4b14      	ldr	r3, [pc, #80]	; (84680 <prvSwitchTimerLists+0xa8>)
   8462e:	681a      	ldr	r2, [r3, #0]
   84630:	693b      	ldr	r3, [r7, #16]
   84632:	3304      	adds	r3, #4
   84634:	4610      	mov	r0, r2
   84636:	4619      	mov	r1, r3
   84638:	4b13      	ldr	r3, [pc, #76]	; (84688 <prvSwitchTimerLists+0xb0>)
   8463a:	4798      	blx	r3
   8463c:	e00e      	b.n	8465c <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8463e:	2300      	movs	r3, #0
   84640:	9300      	str	r3, [sp, #0]
   84642:	6938      	ldr	r0, [r7, #16]
   84644:	2100      	movs	r1, #0
   84646:	697a      	ldr	r2, [r7, #20]
   84648:	2300      	movs	r3, #0
   8464a:	4c10      	ldr	r4, [pc, #64]	; (8468c <prvSwitchTimerLists+0xb4>)
   8464c:	47a0      	blx	r4
   8464e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   84650:	68bb      	ldr	r3, [r7, #8]
   84652:	2b00      	cmp	r3, #0
   84654:	d102      	bne.n	8465c <prvSwitchTimerLists+0x84>
   84656:	4b0e      	ldr	r3, [pc, #56]	; (84690 <prvSwitchTimerLists+0xb8>)
   84658:	4798      	blx	r3
   8465a:	e7fe      	b.n	8465a <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8465c:	4b08      	ldr	r3, [pc, #32]	; (84680 <prvSwitchTimerLists+0xa8>)
   8465e:	681b      	ldr	r3, [r3, #0]
   84660:	681b      	ldr	r3, [r3, #0]
   84662:	2b00      	cmp	r3, #0
   84664:	d1bc      	bne.n	845e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   84666:	4b06      	ldr	r3, [pc, #24]	; (84680 <prvSwitchTimerLists+0xa8>)
   84668:	681b      	ldr	r3, [r3, #0]
   8466a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   8466c:	4b09      	ldr	r3, [pc, #36]	; (84694 <prvSwitchTimerLists+0xbc>)
   8466e:	681a      	ldr	r2, [r3, #0]
   84670:	4b03      	ldr	r3, [pc, #12]	; (84680 <prvSwitchTimerLists+0xa8>)
   84672:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   84674:	4b07      	ldr	r3, [pc, #28]	; (84694 <prvSwitchTimerLists+0xbc>)
   84676:	687a      	ldr	r2, [r7, #4]
   84678:	601a      	str	r2, [r3, #0]
}
   8467a:	371c      	adds	r7, #28
   8467c:	46bd      	mov	sp, r7
   8467e:	bd90      	pop	{r4, r7, pc}
   84680:	2007a624 	.word	0x2007a624
   84684:	00082265 	.word	0x00082265
   84688:	000821f5 	.word	0x000821f5
   8468c:	000841c9 	.word	0x000841c9
   84690:	000824dd 	.word	0x000824dd
   84694:	2007a628 	.word	0x2007a628

00084698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   84698:	b580      	push	{r7, lr}
   8469a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8469c:	4b11      	ldr	r3, [pc, #68]	; (846e4 <prvCheckForValidListAndQueue+0x4c>)
   8469e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   846a0:	4b11      	ldr	r3, [pc, #68]	; (846e8 <prvCheckForValidListAndQueue+0x50>)
   846a2:	681b      	ldr	r3, [r3, #0]
   846a4:	2b00      	cmp	r3, #0
   846a6:	d11a      	bne.n	846de <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   846a8:	4810      	ldr	r0, [pc, #64]	; (846ec <prvCheckForValidListAndQueue+0x54>)
   846aa:	4b11      	ldr	r3, [pc, #68]	; (846f0 <prvCheckForValidListAndQueue+0x58>)
   846ac:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   846ae:	4811      	ldr	r0, [pc, #68]	; (846f4 <prvCheckForValidListAndQueue+0x5c>)
   846b0:	4b0f      	ldr	r3, [pc, #60]	; (846f0 <prvCheckForValidListAndQueue+0x58>)
   846b2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   846b4:	4b10      	ldr	r3, [pc, #64]	; (846f8 <prvCheckForValidListAndQueue+0x60>)
   846b6:	4a0d      	ldr	r2, [pc, #52]	; (846ec <prvCheckForValidListAndQueue+0x54>)
   846b8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   846ba:	4b10      	ldr	r3, [pc, #64]	; (846fc <prvCheckForValidListAndQueue+0x64>)
   846bc:	4a0d      	ldr	r2, [pc, #52]	; (846f4 <prvCheckForValidListAndQueue+0x5c>)
   846be:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   846c0:	2005      	movs	r0, #5
   846c2:	210c      	movs	r1, #12
   846c4:	2200      	movs	r2, #0
   846c6:	4b0e      	ldr	r3, [pc, #56]	; (84700 <prvCheckForValidListAndQueue+0x68>)
   846c8:	4798      	blx	r3
   846ca:	4602      	mov	r2, r0
   846cc:	4b06      	ldr	r3, [pc, #24]	; (846e8 <prvCheckForValidListAndQueue+0x50>)
   846ce:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   846d0:	4b05      	ldr	r3, [pc, #20]	; (846e8 <prvCheckForValidListAndQueue+0x50>)
   846d2:	681b      	ldr	r3, [r3, #0]
   846d4:	2b00      	cmp	r3, #0
   846d6:	d102      	bne.n	846de <prvCheckForValidListAndQueue+0x46>
   846d8:	4b0a      	ldr	r3, [pc, #40]	; (84704 <prvCheckForValidListAndQueue+0x6c>)
   846da:	4798      	blx	r3
   846dc:	e7fe      	b.n	846dc <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   846de:	4b0a      	ldr	r3, [pc, #40]	; (84708 <prvCheckForValidListAndQueue+0x70>)
   846e0:	4798      	blx	r3
}
   846e2:	bd80      	pop	{r7, pc}
   846e4:	00082461 	.word	0x00082461
   846e8:	2007a62c 	.word	0x2007a62c
   846ec:	2007a5fc 	.word	0x2007a5fc
   846f0:	00082155 	.word	0x00082155
   846f4:	2007a610 	.word	0x2007a610
   846f8:	2007a624 	.word	0x2007a624
   846fc:	2007a628 	.word	0x2007a628
   84700:	00082a59 	.word	0x00082a59
   84704:	000824dd 	.word	0x000824dd
   84708:	000824a5 	.word	0x000824a5

0008470c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8470c:	b480      	push	{r7}
   8470e:	b083      	sub	sp, #12
   84710:	af00      	add	r7, sp, #0
   84712:	4603      	mov	r3, r0
   84714:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84716:	4b08      	ldr	r3, [pc, #32]	; (84738 <NVIC_EnableIRQ+0x2c>)
   84718:	f997 2007 	ldrsb.w	r2, [r7, #7]
   8471c:	0952      	lsrs	r2, r2, #5
   8471e:	79f9      	ldrb	r1, [r7, #7]
   84720:	f001 011f 	and.w	r1, r1, #31
   84724:	2001      	movs	r0, #1
   84726:	fa00 f101 	lsl.w	r1, r0, r1
   8472a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8472e:	370c      	adds	r7, #12
   84730:	46bd      	mov	sp, r7
   84732:	f85d 7b04 	ldr.w	r7, [sp], #4
   84736:	4770      	bx	lr
   84738:	e000e100 	.word	0xe000e100

0008473c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8473c:	b480      	push	{r7}
   8473e:	b083      	sub	sp, #12
   84740:	af00      	add	r7, sp, #0
   84742:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84744:	687b      	ldr	r3, [r7, #4]
   84746:	2b07      	cmp	r3, #7
   84748:	d825      	bhi.n	84796 <osc_get_rate+0x5a>
   8474a:	a201      	add	r2, pc, #4	; (adr r2, 84750 <osc_get_rate+0x14>)
   8474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84750:	00084771 	.word	0x00084771
   84754:	00084777 	.word	0x00084777
   84758:	0008477d 	.word	0x0008477d
   8475c:	00084783 	.word	0x00084783
   84760:	00084787 	.word	0x00084787
   84764:	0008478b 	.word	0x0008478b
   84768:	0008478f 	.word	0x0008478f
   8476c:	00084793 	.word	0x00084793
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   84770:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84774:	e010      	b.n	84798 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   84776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8477a:	e00d      	b.n	84798 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8477c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84780:	e00a      	b.n	84798 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   84782:	4b08      	ldr	r3, [pc, #32]	; (847a4 <osc_get_rate+0x68>)
   84784:	e008      	b.n	84798 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   84786:	4b08      	ldr	r3, [pc, #32]	; (847a8 <osc_get_rate+0x6c>)
   84788:	e006      	b.n	84798 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8478a:	4b08      	ldr	r3, [pc, #32]	; (847ac <osc_get_rate+0x70>)
   8478c:	e004      	b.n	84798 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8478e:	4b07      	ldr	r3, [pc, #28]	; (847ac <osc_get_rate+0x70>)
   84790:	e002      	b.n	84798 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   84792:	4b06      	ldr	r3, [pc, #24]	; (847ac <osc_get_rate+0x70>)
   84794:	e000      	b.n	84798 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   84796:	2300      	movs	r3, #0
}
   84798:	4618      	mov	r0, r3
   8479a:	370c      	adds	r7, #12
   8479c:	46bd      	mov	sp, r7
   8479e:	f85d 7b04 	ldr.w	r7, [sp], #4
   847a2:	4770      	bx	lr
   847a4:	003d0900 	.word	0x003d0900
   847a8:	007a1200 	.word	0x007a1200
   847ac:	00b71b00 	.word	0x00b71b00

000847b0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   847b0:	b580      	push	{r7, lr}
   847b2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   847b4:	2006      	movs	r0, #6
   847b6:	4b04      	ldr	r3, [pc, #16]	; (847c8 <sysclk_get_main_hz+0x18>)
   847b8:	4798      	blx	r3
   847ba:	4602      	mov	r2, r0
   847bc:	4613      	mov	r3, r2
   847be:	00db      	lsls	r3, r3, #3
   847c0:	1a9b      	subs	r3, r3, r2
   847c2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   847c4:	4618      	mov	r0, r3
   847c6:	bd80      	pop	{r7, pc}
   847c8:	0008473d 	.word	0x0008473d

000847cc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   847cc:	b580      	push	{r7, lr}
   847ce:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   847d0:	4b02      	ldr	r3, [pc, #8]	; (847dc <sysclk_get_cpu_hz+0x10>)
   847d2:	4798      	blx	r3
   847d4:	4603      	mov	r3, r0
   847d6:	085b      	lsrs	r3, r3, #1
}
   847d8:	4618      	mov	r0, r3
   847da:	bd80      	pop	{r7, pc}
   847dc:	000847b1 	.word	0x000847b1

000847e0 <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   847e0:	b580      	push	{r7, lr}
   847e2:	b082      	sub	sp, #8
   847e4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   847e6:	482b      	ldr	r0, [pc, #172]	; (84894 <CAN1_Handler+0xb4>)
   847e8:	492b      	ldr	r1, [pc, #172]	; (84898 <CAN1_Handler+0xb8>)
   847ea:	4b2c      	ldr	r3, [pc, #176]	; (8489c <CAN1_Handler+0xbc>)
   847ec:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   847ee:	482c      	ldr	r0, [pc, #176]	; (848a0 <CAN1_Handler+0xc0>)
   847f0:	4b2c      	ldr	r3, [pc, #176]	; (848a4 <CAN1_Handler+0xc4>)
   847f2:	4798      	blx	r3
   847f4:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   847f6:	683b      	ldr	r3, [r7, #0]
   847f8:	b2db      	uxtb	r3, r3
   847fa:	2b00      	cmp	r3, #0
   847fc:	d047      	beq.n	8488e <CAN1_Handler+0xae>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   847fe:	2300      	movs	r3, #0
   84800:	71fb      	strb	r3, [r7, #7]
   84802:	e041      	b.n	84888 <CAN1_Handler+0xa8>
			ul_status = can_mailbox_get_status(CAN1, i);
   84804:	79fb      	ldrb	r3, [r7, #7]
   84806:	4826      	ldr	r0, [pc, #152]	; (848a0 <CAN1_Handler+0xc0>)
   84808:	4619      	mov	r1, r3
   8480a:	4b27      	ldr	r3, [pc, #156]	; (848a8 <CAN1_Handler+0xc8>)
   8480c:	4798      	blx	r3
   8480e:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   84810:	683b      	ldr	r3, [r7, #0]
   84812:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   84816:	2b00      	cmp	r3, #0
   84818:	d033      	beq.n	84882 <CAN1_Handler+0xa2>
				can1_mailbox.ul_mb_idx = i;
   8481a:	79fa      	ldrb	r2, [r7, #7]
   8481c:	4b1d      	ldr	r3, [pc, #116]	; (84894 <CAN1_Handler+0xb4>)
   8481e:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   84820:	4b1c      	ldr	r3, [pc, #112]	; (84894 <CAN1_Handler+0xb4>)
   84822:	683a      	ldr	r2, [r7, #0]
   84824:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   84826:	481e      	ldr	r0, [pc, #120]	; (848a0 <CAN1_Handler+0xc0>)
   84828:	491a      	ldr	r1, [pc, #104]	; (84894 <CAN1_Handler+0xb4>)
   8482a:	4b20      	ldr	r3, [pc, #128]	; (848ac <CAN1_Handler+0xcc>)
   8482c:	4798      	blx	r3
				
				/* UPDATE THE GLOBAL CAN REGS		*/
				
				if (i == 0)
   8482e:	79fb      	ldrb	r3, [r7, #7]
   84830:	2b00      	cmp	r3, #0
   84832:	d107      	bne.n	84844 <CAN1_Handler+0x64>
				{
					can_glob_data_reg[0] = can1_mailbox.ul_datal;
   84834:	4b17      	ldr	r3, [pc, #92]	; (84894 <CAN1_Handler+0xb4>)
   84836:	699a      	ldr	r2, [r3, #24]
   84838:	4b1d      	ldr	r3, [pc, #116]	; (848b0 <CAN1_Handler+0xd0>)
   8483a:	601a      	str	r2, [r3, #0]
					can_glob_data_reg[1] = can1_mailbox.ul_datah;
   8483c:	4b15      	ldr	r3, [pc, #84]	; (84894 <CAN1_Handler+0xb4>)
   8483e:	69da      	ldr	r2, [r3, #28]
   84840:	4b1b      	ldr	r3, [pc, #108]	; (848b0 <CAN1_Handler+0xd0>)
   84842:	605a      	str	r2, [r3, #4]
				}
				
				if (i == 6)
   84844:	79fb      	ldrb	r3, [r7, #7]
   84846:	2b06      	cmp	r3, #6
   84848:	d107      	bne.n	8485a <CAN1_Handler+0x7a>
				{
					can_glob_hk_reg[0] = can1_mailbox.ul_datal;
   8484a:	4b12      	ldr	r3, [pc, #72]	; (84894 <CAN1_Handler+0xb4>)
   8484c:	699a      	ldr	r2, [r3, #24]
   8484e:	4b19      	ldr	r3, [pc, #100]	; (848b4 <CAN1_Handler+0xd4>)
   84850:	601a      	str	r2, [r3, #0]
					can_glob_hk_reg[1] = can1_mailbox.ul_datah;
   84852:	4b10      	ldr	r3, [pc, #64]	; (84894 <CAN1_Handler+0xb4>)
   84854:	69da      	ldr	r2, [r3, #28]
   84856:	4b17      	ldr	r3, [pc, #92]	; (848b4 <CAN1_Handler+0xd4>)
   84858:	605a      	str	r2, [r3, #4]
				}
				
				if (i == 7)
   8485a:	79fb      	ldrb	r3, [r7, #7]
   8485c:	2b07      	cmp	r3, #7
   8485e:	d107      	bne.n	84870 <CAN1_Handler+0x90>
				{
					can_glob_com_reg[0] = can1_mailbox.ul_datal;
   84860:	4b0c      	ldr	r3, [pc, #48]	; (84894 <CAN1_Handler+0xb4>)
   84862:	699a      	ldr	r2, [r3, #24]
   84864:	4b14      	ldr	r3, [pc, #80]	; (848b8 <CAN1_Handler+0xd8>)
   84866:	601a      	str	r2, [r3, #0]
					can_glob_com_reg[1] = can1_mailbox.ul_datah;
   84868:	4b0a      	ldr	r3, [pc, #40]	; (84894 <CAN1_Handler+0xb4>)
   8486a:	69da      	ldr	r2, [r3, #28]
   8486c:	4b12      	ldr	r3, [pc, #72]	; (848b8 <CAN1_Handler+0xd8>)
   8486e:	605a      	str	r2, [r3, #4]
				}
				
				/* Decode CAN Message */
				decode_can_msg(&can1_mailbox, CAN1);
   84870:	4808      	ldr	r0, [pc, #32]	; (84894 <CAN1_Handler+0xb4>)
   84872:	490b      	ldr	r1, [pc, #44]	; (848a0 <CAN1_Handler+0xc0>)
   84874:	4b11      	ldr	r3, [pc, #68]	; (848bc <CAN1_Handler+0xdc>)
   84876:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   84878:	4806      	ldr	r0, [pc, #24]	; (84894 <CAN1_Handler+0xb4>)
   8487a:	4907      	ldr	r1, [pc, #28]	; (84898 <CAN1_Handler+0xb8>)
   8487c:	4b10      	ldr	r3, [pc, #64]	; (848c0 <CAN1_Handler+0xe0>)
   8487e:	4798      	blx	r3
				break;
   84880:	e005      	b.n	8488e <CAN1_Handler+0xae>
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84882:	79fb      	ldrb	r3, [r7, #7]
   84884:	3301      	adds	r3, #1
   84886:	71fb      	strb	r3, [r7, #7]
   84888:	79fb      	ldrb	r3, [r7, #7]
   8488a:	2b07      	cmp	r3, #7
   8488c:	d9ba      	bls.n	84804 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   8488e:	3708      	adds	r7, #8
   84890:	46bd      	mov	sp, r7
   84892:	bd80      	pop	{r7, pc}
   84894:	2007a648 	.word	0x2007a648
   84898:	2007a67c 	.word	0x2007a67c
   8489c:	00084bd5 	.word	0x00084bd5
   848a0:	400b8000 	.word	0x400b8000
   848a4:	00080f29 	.word	0x00080f29
   848a8:	00080f6d 	.word	0x00080f6d
   848ac:	000810ed 	.word	0x000810ed
   848b0:	2007a674 	.word	0x2007a674
   848b4:	2007a638 	.word	0x2007a638
   848b8:	2007a6e8 	.word	0x2007a6e8
   848bc:	00084965 	.word	0x00084965
   848c0:	00084c45 	.word	0x00084c45

000848c4 <CAN0_Handler>:

/**
 * \brief Default interrupt handler for CAN0
 */
void CAN0_Handler(void)
{
   848c4:	b580      	push	{r7, lr}
   848c6:	b082      	sub	sp, #8
   848c8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   848ca:	481c      	ldr	r0, [pc, #112]	; (8493c <CAN0_Handler+0x78>)
   848cc:	491c      	ldr	r1, [pc, #112]	; (84940 <CAN0_Handler+0x7c>)
   848ce:	4b1d      	ldr	r3, [pc, #116]	; (84944 <CAN0_Handler+0x80>)
   848d0:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   848d2:	481d      	ldr	r0, [pc, #116]	; (84948 <CAN0_Handler+0x84>)
   848d4:	4b1d      	ldr	r3, [pc, #116]	; (8494c <CAN0_Handler+0x88>)
   848d6:	4798      	blx	r3
   848d8:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   848da:	683b      	ldr	r3, [r7, #0]
   848dc:	b2db      	uxtb	r3, r3
   848de:	2b00      	cmp	r3, #0
   848e0:	d029      	beq.n	84936 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   848e2:	2300      	movs	r3, #0
   848e4:	71fb      	strb	r3, [r7, #7]
   848e6:	e023      	b.n	84930 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   848e8:	79fb      	ldrb	r3, [r7, #7]
   848ea:	4817      	ldr	r0, [pc, #92]	; (84948 <CAN0_Handler+0x84>)
   848ec:	4619      	mov	r1, r3
   848ee:	4b18      	ldr	r3, [pc, #96]	; (84950 <CAN0_Handler+0x8c>)
   848f0:	4798      	blx	r3
   848f2:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   848f4:	683b      	ldr	r3, [r7, #0]
   848f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   848fa:	2b00      	cmp	r3, #0
   848fc:	d015      	beq.n	8492a <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   848fe:	79fa      	ldrb	r2, [r7, #7]
   84900:	4b0e      	ldr	r3, [pc, #56]	; (8493c <CAN0_Handler+0x78>)
   84902:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   84904:	4b0d      	ldr	r3, [pc, #52]	; (8493c <CAN0_Handler+0x78>)
   84906:	683a      	ldr	r2, [r7, #0]
   84908:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   8490a:	480f      	ldr	r0, [pc, #60]	; (84948 <CAN0_Handler+0x84>)
   8490c:	490b      	ldr	r1, [pc, #44]	; (8493c <CAN0_Handler+0x78>)
   8490e:	4b11      	ldr	r3, [pc, #68]	; (84954 <CAN0_Handler+0x90>)
   84910:	4798      	blx	r3
				g_ul_recv_status = 1;
   84912:	4b11      	ldr	r3, [pc, #68]	; (84958 <CAN0_Handler+0x94>)
   84914:	2201      	movs	r2, #1
   84916:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can0_mailbox, CAN0);
   84918:	4808      	ldr	r0, [pc, #32]	; (8493c <CAN0_Handler+0x78>)
   8491a:	490b      	ldr	r1, [pc, #44]	; (84948 <CAN0_Handler+0x84>)
   8491c:	4b0f      	ldr	r3, [pc, #60]	; (8495c <CAN0_Handler+0x98>)
   8491e:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   84920:	4806      	ldr	r0, [pc, #24]	; (8493c <CAN0_Handler+0x78>)
   84922:	4907      	ldr	r1, [pc, #28]	; (84940 <CAN0_Handler+0x7c>)
   84924:	4b0e      	ldr	r3, [pc, #56]	; (84960 <CAN0_Handler+0x9c>)
   84926:	4798      	blx	r3
				break;
   84928:	e005      	b.n	84936 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8492a:	79fb      	ldrb	r3, [r7, #7]
   8492c:	3301      	adds	r3, #1
   8492e:	71fb      	strb	r3, [r7, #7]
   84930:	79fb      	ldrb	r3, [r7, #7]
   84932:	2b07      	cmp	r3, #7
   84934:	d9d8      	bls.n	848e8 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   84936:	3708      	adds	r7, #8
   84938:	46bd      	mov	sp, r7
   8493a:	bd80      	pop	{r7, pc}
   8493c:	2007a6a0 	.word	0x2007a6a0
   84940:	2007a6c0 	.word	0x2007a6c0
   84944:	00084bd5 	.word	0x00084bd5
   84948:	400b4000 	.word	0x400b4000
   8494c:	00080f29 	.word	0x00080f29
   84950:	00080f6d 	.word	0x00080f6d
   84954:	000810ed 	.word	0x000810ed
   84958:	2007a634 	.word	0x2007a634
   8495c:	00084965 	.word	0x00084965
   84960:	00084c45 	.word	0x00084c45

00084964 <decode_can_msg>:
/* Decode CAN Message													*/
/* Performs a prescribed action depending on the message received       */
/************************************************************************/

void decode_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   84964:	b580      	push	{r7, lr}
   84966:	b084      	sub	sp, #16
   84968:	af00      	add	r7, sp, #0
   8496a:	6078      	str	r0, [r7, #4]
   8496c:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8496e:	687b      	ldr	r3, [r7, #4]
   84970:	699b      	ldr	r3, [r3, #24]
   84972:	60fb      	str	r3, [r7, #12]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   84974:	687b      	ldr	r3, [r7, #4]
   84976:	69db      	ldr	r3, [r3, #28]
   84978:	60bb      	str	r3, [r7, #8]
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   8497a:	68fb      	ldr	r3, [r7, #12]
   8497c:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   84980:	bf14      	ite	ne
   84982:	2300      	movne	r3, #0
   84984:	2301      	moveq	r3, #1
   84986:	b2da      	uxtb	r2, r3
   84988:	6839      	ldr	r1, [r7, #0]
   8498a:	4b23      	ldr	r3, [pc, #140]	; (84a18 <decode_can_msg+0xb4>)
   8498c:	4299      	cmp	r1, r3
   8498e:	bf14      	ite	ne
   84990:	2300      	movne	r3, #0
   84992:	2301      	moveq	r3, #1
   84994:	b2db      	uxtb	r3, r3
   84996:	4013      	ands	r3, r2
   84998:	b2db      	uxtb	r3, r3
   8499a:	2b00      	cmp	r3, #0
   8499c:	d002      	beq.n	849a4 <decode_can_msg+0x40>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   8499e:	2057      	movs	r0, #87	; 0x57
   849a0:	4b1e      	ldr	r3, [pc, #120]	; (84a1c <decode_can_msg+0xb8>)
   849a2:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN1))
   849a4:	68fb      	ldr	r3, [r7, #12]
   849a6:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   849aa:	bf14      	ite	ne
   849ac:	2300      	movne	r3, #0
   849ae:	2301      	moveq	r3, #1
   849b0:	b2da      	uxtb	r2, r3
   849b2:	6839      	ldr	r1, [r7, #0]
   849b4:	4b18      	ldr	r3, [pc, #96]	; (84a18 <decode_can_msg+0xb4>)
   849b6:	4299      	cmp	r1, r3
   849b8:	bf14      	ite	ne
   849ba:	2300      	movne	r3, #0
   849bc:	2301      	moveq	r3, #1
   849be:	b2db      	uxtb	r3, r3
   849c0:	4013      	ands	r3, r2
   849c2:	b2db      	uxtb	r3, r3
   849c4:	2b00      	cmp	r3, #0
   849c6:	d002      	beq.n	849ce <decode_can_msg+0x6a>
	{
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   849c8:	2055      	movs	r0, #85	; 0x55
   849ca:	4b14      	ldr	r3, [pc, #80]	; (84a1c <decode_can_msg+0xb8>)
   849cc:	4798      	blx	r3
	}
	
	if ((uh_data_incom == DATA_RETURNED) & (controller == CAN1) & (glob_drf == 0))
   849ce:	68bb      	ldr	r3, [r7, #8]
   849d0:	2b00      	cmp	r3, #0
   849d2:	bf14      	ite	ne
   849d4:	2300      	movne	r3, #0
   849d6:	2301      	moveq	r3, #1
   849d8:	b2da      	uxtb	r2, r3
   849da:	6839      	ldr	r1, [r7, #0]
   849dc:	4b0e      	ldr	r3, [pc, #56]	; (84a18 <decode_can_msg+0xb4>)
   849de:	4299      	cmp	r1, r3
   849e0:	bf14      	ite	ne
   849e2:	2300      	movne	r3, #0
   849e4:	2301      	moveq	r3, #1
   849e6:	b2db      	uxtb	r3, r3
   849e8:	4013      	ands	r3, r2
   849ea:	b2db      	uxtb	r3, r3
   849ec:	461a      	mov	r2, r3
   849ee:	4b0c      	ldr	r3, [pc, #48]	; (84a20 <decode_can_msg+0xbc>)
   849f0:	781b      	ldrb	r3, [r3, #0]
   849f2:	2b00      	cmp	r3, #0
   849f4:	bf14      	ite	ne
   849f6:	2300      	movne	r3, #0
   849f8:	2301      	moveq	r3, #1
   849fa:	b2db      	uxtb	r3, r3
   849fc:	4013      	ands	r3, r2
   849fe:	2b00      	cmp	r3, #0
   84a00:	d005      	beq.n	84a0e <decode_can_msg+0xaa>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   84a02:	2056      	movs	r0, #86	; 0x56
   84a04:	4b05      	ldr	r3, [pc, #20]	; (84a1c <decode_can_msg+0xb8>)
   84a06:	4798      	blx	r3
		glob_drf = 1;
   84a08:	4b05      	ldr	r3, [pc, #20]	; (84a20 <decode_can_msg+0xbc>)
   84a0a:	2201      	movs	r2, #1
   84a0c:	701a      	strb	r2, [r3, #0]
	}
	return;
   84a0e:	bf00      	nop
}
   84a10:	3710      	adds	r7, #16
   84a12:	46bd      	mov	sp, r7
   84a14:	bd80      	pop	{r7, pc}
   84a16:	bf00      	nop
   84a18:	400b8000 	.word	0x400b8000
   84a1c:	000814ed 	.word	0x000814ed
   84a20:	2007a668 	.word	0x2007a668

00084a24 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   84a24:	b480      	push	{r7}
   84a26:	b083      	sub	sp, #12
   84a28:	af00      	add	r7, sp, #0
   84a2a:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   84a2c:	687b      	ldr	r3, [r7, #4]
   84a2e:	2200      	movs	r2, #0
   84a30:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   84a32:	687b      	ldr	r3, [r7, #4]
   84a34:	2200      	movs	r2, #0
   84a36:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   84a38:	687b      	ldr	r3, [r7, #4]
   84a3a:	2200      	movs	r2, #0
   84a3c:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   84a3e:	687b      	ldr	r3, [r7, #4]
   84a40:	2200      	movs	r2, #0
   84a42:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   84a44:	687b      	ldr	r3, [r7, #4]
   84a46:	2200      	movs	r2, #0
   84a48:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   84a4a:	687b      	ldr	r3, [r7, #4]
   84a4c:	2200      	movs	r2, #0
   84a4e:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   84a50:	687b      	ldr	r3, [r7, #4]
   84a52:	2200      	movs	r2, #0
   84a54:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   84a56:	687b      	ldr	r3, [r7, #4]
   84a58:	2200      	movs	r2, #0
   84a5a:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   84a5c:	687b      	ldr	r3, [r7, #4]
   84a5e:	2200      	movs	r2, #0
   84a60:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   84a62:	687b      	ldr	r3, [r7, #4]
   84a64:	2200      	movs	r2, #0
   84a66:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   84a68:	687b      	ldr	r3, [r7, #4]
   84a6a:	2200      	movs	r2, #0
   84a6c:	61da      	str	r2, [r3, #28]
}
   84a6e:	370c      	adds	r7, #12
   84a70:	46bd      	mov	sp, r7
   84a72:	f85d 7b04 	ldr.w	r7, [sp], #4
   84a76:	4770      	bx	lr

00084a78 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   84a78:	b580      	push	{r7, lr}
   84a7a:	b08c      	sub	sp, #48	; 0x30
   84a7c:	af00      	add	r7, sp, #0
   84a7e:	60f8      	str	r0, [r7, #12]
   84a80:	60b9      	str	r1, [r7, #8]
   84a82:	607a      	str	r2, [r7, #4]
   84a84:	603b      	str	r3, [r7, #0]
	*/
	
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   84a86:	f107 0310 	add.w	r3, r7, #16
   84a8a:	481e      	ldr	r0, [pc, #120]	; (84b04 <send_can_command+0x8c>)
   84a8c:	4619      	mov	r1, r3
   84a8e:	4b1e      	ldr	r3, [pc, #120]	; (84b08 <send_can_command+0x90>)
   84a90:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   84a92:	481c      	ldr	r0, [pc, #112]	; (84b04 <send_can_command+0x8c>)
   84a94:	4b1d      	ldr	r3, [pc, #116]	; (84b0c <send_can_command+0x94>)
   84a96:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   84a98:	4b1a      	ldr	r3, [pc, #104]	; (84b04 <send_can_command+0x8c>)
   84a9a:	2207      	movs	r2, #7
   84a9c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84a9e:	4b19      	ldr	r3, [pc, #100]	; (84b04 <send_can_command+0x8c>)
   84aa0:	2203      	movs	r2, #3
   84aa2:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   84aa4:	683b      	ldr	r3, [r7, #0]
   84aa6:	b2da      	uxtb	r2, r3
   84aa8:	4b16      	ldr	r3, [pc, #88]	; (84b04 <send_can_command+0x8c>)
   84aaa:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84aac:	4b15      	ldr	r3, [pc, #84]	; (84b04 <send_can_command+0x8c>)
   84aae:	2200      	movs	r2, #0
   84ab0:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84ab2:	4b14      	ldr	r3, [pc, #80]	; (84b04 <send_can_command+0x8c>)
   84ab4:	2200      	movs	r2, #0
   84ab6:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84ab8:	4815      	ldr	r0, [pc, #84]	; (84b10 <send_can_command+0x98>)
   84aba:	4912      	ldr	r1, [pc, #72]	; (84b04 <send_can_command+0x8c>)
   84abc:	4b15      	ldr	r3, [pc, #84]	; (84b14 <send_can_command+0x9c>)
   84abe:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   84ac0:	687b      	ldr	r3, [r7, #4]
   84ac2:	049a      	lsls	r2, r3, #18
   84ac4:	4b14      	ldr	r3, [pc, #80]	; (84b18 <send_can_command+0xa0>)
   84ac6:	4013      	ands	r3, r2
   84ac8:	4a0e      	ldr	r2, [pc, #56]	; (84b04 <send_can_command+0x8c>)
   84aca:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   84acc:	4b0d      	ldr	r3, [pc, #52]	; (84b04 <send_can_command+0x8c>)
   84ace:	68fa      	ldr	r2, [r7, #12]
   84ad0:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   84ad2:	4b0c      	ldr	r3, [pc, #48]	; (84b04 <send_can_command+0x8c>)
   84ad4:	68ba      	ldr	r2, [r7, #8]
   84ad6:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   84ad8:	4b0a      	ldr	r3, [pc, #40]	; (84b04 <send_can_command+0x8c>)
   84ada:	2208      	movs	r2, #8
   84adc:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   84ade:	480c      	ldr	r0, [pc, #48]	; (84b10 <send_can_command+0x98>)
   84ae0:	4908      	ldr	r1, [pc, #32]	; (84b04 <send_can_command+0x8c>)
   84ae2:	4b0e      	ldr	r3, [pc, #56]	; (84b1c <send_can_command+0xa4>)
   84ae4:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   84ae6:	480a      	ldr	r0, [pc, #40]	; (84b10 <send_can_command+0x98>)
   84ae8:	2180      	movs	r1, #128	; 0x80
   84aea:	4b0d      	ldr	r3, [pc, #52]	; (84b20 <send_can_command+0xa8>)
   84aec:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   84aee:	f107 0310 	add.w	r3, r7, #16
   84af2:	4804      	ldr	r0, [pc, #16]	; (84b04 <send_can_command+0x8c>)
   84af4:	4619      	mov	r1, r3
   84af6:	4b0b      	ldr	r3, [pc, #44]	; (84b24 <send_can_command+0xac>)
   84af8:	4798      	blx	r3
	
	return 1;
   84afa:	2301      	movs	r3, #1
}
   84afc:	4618      	mov	r0, r3
   84afe:	3730      	adds	r7, #48	; 0x30
   84b00:	46bd      	mov	sp, r7
   84b02:	bd80      	pop	{r7, pc}
   84b04:	2007a6a0 	.word	0x2007a6a0
   84b08:	00084bd5 	.word	0x00084bd5
   84b0c:	00084a25 	.word	0x00084a25
   84b10:	400b4000 	.word	0x400b4000
   84b14:	00080fcd 	.word	0x00080fcd
   84b18:	1ffc0000 	.word	0x1ffc0000
   84b1c:	000811b1 	.word	0x000811b1
   84b20:	00080f41 	.word	0x00080f41
   84b24:	00084c45 	.word	0x00084c45

00084b28 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   84b28:	b580      	push	{r7, lr}
   84b2a:	b08a      	sub	sp, #40	; 0x28
   84b2c:	af00      	add	r7, sp, #0
   84b2e:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   84b30:	f107 0308 	add.w	r3, r7, #8
   84b34:	481e      	ldr	r0, [pc, #120]	; (84bb0 <request_housekeeping+0x88>)
   84b36:	4619      	mov	r1, r3
   84b38:	4b1e      	ldr	r3, [pc, #120]	; (84bb4 <request_housekeeping+0x8c>)
   84b3a:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   84b3c:	481c      	ldr	r0, [pc, #112]	; (84bb0 <request_housekeeping+0x88>)
   84b3e:	4b1e      	ldr	r3, [pc, #120]	; (84bb8 <request_housekeeping+0x90>)
   84b40:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   84b42:	4b1b      	ldr	r3, [pc, #108]	; (84bb0 <request_housekeeping+0x88>)
   84b44:	2206      	movs	r2, #6
   84b46:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84b48:	4b19      	ldr	r3, [pc, #100]	; (84bb0 <request_housekeeping+0x88>)
   84b4a:	2203      	movs	r2, #3
   84b4c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   84b4e:	4b18      	ldr	r3, [pc, #96]	; (84bb0 <request_housekeeping+0x88>)
   84b50:	2214      	movs	r2, #20
   84b52:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84b54:	4b16      	ldr	r3, [pc, #88]	; (84bb0 <request_housekeeping+0x88>)
   84b56:	2200      	movs	r2, #0
   84b58:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84b5a:	4b15      	ldr	r3, [pc, #84]	; (84bb0 <request_housekeeping+0x88>)
   84b5c:	2200      	movs	r2, #0
   84b5e:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84b60:	4816      	ldr	r0, [pc, #88]	; (84bbc <request_housekeeping+0x94>)
   84b62:	4913      	ldr	r1, [pc, #76]	; (84bb0 <request_housekeeping+0x88>)
   84b64:	4b16      	ldr	r3, [pc, #88]	; (84bc0 <request_housekeeping+0x98>)
   84b66:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   84b68:	687b      	ldr	r3, [r7, #4]
   84b6a:	049a      	lsls	r2, r3, #18
   84b6c:	4b15      	ldr	r3, [pc, #84]	; (84bc4 <request_housekeeping+0x9c>)
   84b6e:	4013      	ands	r3, r2
   84b70:	4a0f      	ldr	r2, [pc, #60]	; (84bb0 <request_housekeeping+0x88>)
   84b72:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = HK_REQUEST;				// shifted over to the standard frame position.
   84b74:	4b0e      	ldr	r3, [pc, #56]	; (84bb0 <request_housekeeping+0x88>)
   84b76:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   84b7a:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = HK_REQUEST;
   84b7c:	4b0c      	ldr	r3, [pc, #48]	; (84bb0 <request_housekeeping+0x88>)
   84b7e:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   84b82:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   84b84:	4b0a      	ldr	r3, [pc, #40]	; (84bb0 <request_housekeeping+0x88>)
   84b86:	2208      	movs	r2, #8
   84b88:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   84b8a:	480c      	ldr	r0, [pc, #48]	; (84bbc <request_housekeeping+0x94>)
   84b8c:	4908      	ldr	r1, [pc, #32]	; (84bb0 <request_housekeeping+0x88>)
   84b8e:	4b0e      	ldr	r3, [pc, #56]	; (84bc8 <request_housekeeping+0xa0>)
   84b90:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   84b92:	480a      	ldr	r0, [pc, #40]	; (84bbc <request_housekeeping+0x94>)
   84b94:	2140      	movs	r1, #64	; 0x40
   84b96:	4b0d      	ldr	r3, [pc, #52]	; (84bcc <request_housekeeping+0xa4>)
   84b98:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   84b9a:	f107 0308 	add.w	r3, r7, #8
   84b9e:	4804      	ldr	r0, [pc, #16]	; (84bb0 <request_housekeeping+0x88>)
   84ba0:	4619      	mov	r1, r3
   84ba2:	4b0b      	ldr	r3, [pc, #44]	; (84bd0 <request_housekeeping+0xa8>)
   84ba4:	4798      	blx	r3
		
	return 1;
   84ba6:	2301      	movs	r3, #1
}
   84ba8:	4618      	mov	r0, r3
   84baa:	3728      	adds	r7, #40	; 0x28
   84bac:	46bd      	mov	sp, r7
   84bae:	bd80      	pop	{r7, pc}
   84bb0:	2007a6a0 	.word	0x2007a6a0
   84bb4:	00084bd5 	.word	0x00084bd5
   84bb8:	00084a25 	.word	0x00084a25
   84bbc:	400b4000 	.word	0x400b4000
   84bc0:	00080fcd 	.word	0x00080fcd
   84bc4:	1ffc0000 	.word	0x1ffc0000
   84bc8:	000811b1 	.word	0x000811b1
   84bcc:	00080f41 	.word	0x00080f41
   84bd0:	00084c45 	.word	0x00084c45

00084bd4 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   84bd4:	b480      	push	{r7}
   84bd6:	b083      	sub	sp, #12
   84bd8:	af00      	add	r7, sp, #0
   84bda:	6078      	str	r0, [r7, #4]
   84bdc:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   84bde:	687b      	ldr	r3, [r7, #4]
   84be0:	681a      	ldr	r2, [r3, #0]
   84be2:	683b      	ldr	r3, [r7, #0]
   84be4:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   84be6:	687b      	ldr	r3, [r7, #4]
   84be8:	791a      	ldrb	r2, [r3, #4]
   84bea:	683b      	ldr	r3, [r7, #0]
   84bec:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   84bee:	687b      	ldr	r3, [r7, #4]
   84bf0:	795a      	ldrb	r2, [r3, #5]
   84bf2:	683b      	ldr	r3, [r7, #0]
   84bf4:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   84bf6:	687b      	ldr	r3, [r7, #4]
   84bf8:	799a      	ldrb	r2, [r3, #6]
   84bfa:	683b      	ldr	r3, [r7, #0]
   84bfc:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   84bfe:	687b      	ldr	r3, [r7, #4]
   84c00:	79da      	ldrb	r2, [r3, #7]
   84c02:	683b      	ldr	r3, [r7, #0]
   84c04:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   84c06:	687b      	ldr	r3, [r7, #4]
   84c08:	689a      	ldr	r2, [r3, #8]
   84c0a:	683b      	ldr	r3, [r7, #0]
   84c0c:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   84c0e:	687b      	ldr	r3, [r7, #4]
   84c10:	68da      	ldr	r2, [r3, #12]
   84c12:	683b      	ldr	r3, [r7, #0]
   84c14:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   84c16:	687b      	ldr	r3, [r7, #4]
   84c18:	691a      	ldr	r2, [r3, #16]
   84c1a:	683b      	ldr	r3, [r7, #0]
   84c1c:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   84c1e:	687b      	ldr	r3, [r7, #4]
   84c20:	695a      	ldr	r2, [r3, #20]
   84c22:	683b      	ldr	r3, [r7, #0]
   84c24:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   84c26:	687b      	ldr	r3, [r7, #4]
   84c28:	699a      	ldr	r2, [r3, #24]
   84c2a:	683b      	ldr	r3, [r7, #0]
   84c2c:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   84c2e:	687b      	ldr	r3, [r7, #4]
   84c30:	69da      	ldr	r2, [r3, #28]
   84c32:	683b      	ldr	r3, [r7, #0]
   84c34:	61da      	str	r2, [r3, #28]
	
	return;
   84c36:	bf00      	nop
}
   84c38:	370c      	adds	r7, #12
   84c3a:	46bd      	mov	sp, r7
   84c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   84c40:	4770      	bx	lr
   84c42:	bf00      	nop

00084c44 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   84c44:	b480      	push	{r7}
   84c46:	b083      	sub	sp, #12
   84c48:	af00      	add	r7, sp, #0
   84c4a:	6078      	str	r0, [r7, #4]
   84c4c:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   84c4e:	683b      	ldr	r3, [r7, #0]
   84c50:	681a      	ldr	r2, [r3, #0]
   84c52:	687b      	ldr	r3, [r7, #4]
   84c54:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   84c56:	683b      	ldr	r3, [r7, #0]
   84c58:	791a      	ldrb	r2, [r3, #4]
   84c5a:	687b      	ldr	r3, [r7, #4]
   84c5c:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   84c5e:	683b      	ldr	r3, [r7, #0]
   84c60:	795a      	ldrb	r2, [r3, #5]
   84c62:	687b      	ldr	r3, [r7, #4]
   84c64:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   84c66:	683b      	ldr	r3, [r7, #0]
   84c68:	799a      	ldrb	r2, [r3, #6]
   84c6a:	687b      	ldr	r3, [r7, #4]
   84c6c:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   84c6e:	683b      	ldr	r3, [r7, #0]
   84c70:	79da      	ldrb	r2, [r3, #7]
   84c72:	687b      	ldr	r3, [r7, #4]
   84c74:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   84c76:	683b      	ldr	r3, [r7, #0]
   84c78:	689a      	ldr	r2, [r3, #8]
   84c7a:	687b      	ldr	r3, [r7, #4]
   84c7c:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   84c7e:	683b      	ldr	r3, [r7, #0]
   84c80:	68da      	ldr	r2, [r3, #12]
   84c82:	687b      	ldr	r3, [r7, #4]
   84c84:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   84c86:	683b      	ldr	r3, [r7, #0]
   84c88:	691a      	ldr	r2, [r3, #16]
   84c8a:	687b      	ldr	r3, [r7, #4]
   84c8c:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   84c8e:	683b      	ldr	r3, [r7, #0]
   84c90:	695a      	ldr	r2, [r3, #20]
   84c92:	687b      	ldr	r3, [r7, #4]
   84c94:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   84c96:	683b      	ldr	r3, [r7, #0]
   84c98:	699a      	ldr	r2, [r3, #24]
   84c9a:	687b      	ldr	r3, [r7, #4]
   84c9c:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   84c9e:	683b      	ldr	r3, [r7, #0]
   84ca0:	69da      	ldr	r2, [r3, #28]
   84ca2:	687b      	ldr	r3, [r7, #4]
   84ca4:	61da      	str	r2, [r3, #28]
	
	return;
   84ca6:	bf00      	nop
}
   84ca8:	370c      	adds	r7, #12
   84caa:	46bd      	mov	sp, r7
   84cac:	f85d 7b04 	ldr.w	r7, [sp], #4
   84cb0:	4770      	bx	lr
   84cb2:	bf00      	nop

00084cb4 <can_initialize>:
/**
 * \brief Initializes and enables CAN0 & CAN1 tranceivers and clocks. 
 * CAN0/CAN1 mailboxes are reset and interrupts disabled.
 */
void can_initialize(void)
{
   84cb4:	b580      	push	{r7, lr}
   84cb6:	b084      	sub	sp, #16
   84cb8:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   84cba:	2301      	movs	r3, #1
   84cbc:	60bb      	str	r3, [r7, #8]
   84cbe:	2300      	movs	r3, #0
   84cc0:	60fb      	str	r3, [r7, #12]

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   84cc2:	4839      	ldr	r0, [pc, #228]	; (84da8 <can_initialize+0xf4>)
   84cc4:	2134      	movs	r1, #52	; 0x34
   84cc6:	4b39      	ldr	r3, [pc, #228]	; (84dac <can_initialize+0xf8>)
   84cc8:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   84cca:	4837      	ldr	r0, [pc, #220]	; (84da8 <can_initialize+0xf4>)
   84ccc:	2135      	movs	r1, #53	; 0x35
   84cce:	4b38      	ldr	r3, [pc, #224]	; (84db0 <can_initialize+0xfc>)
   84cd0:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   84cd2:	4835      	ldr	r0, [pc, #212]	; (84da8 <can_initialize+0xf4>)
   84cd4:	4b37      	ldr	r3, [pc, #220]	; (84db4 <can_initialize+0x100>)
   84cd6:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   84cd8:	4833      	ldr	r0, [pc, #204]	; (84da8 <can_initialize+0xf4>)
   84cda:	4b37      	ldr	r3, [pc, #220]	; (84db8 <can_initialize+0x104>)
   84cdc:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   84cde:	4837      	ldr	r0, [pc, #220]	; (84dbc <can_initialize+0x108>)
   84ce0:	218f      	movs	r1, #143	; 0x8f
   84ce2:	4b32      	ldr	r3, [pc, #200]	; (84dac <can_initialize+0xf8>)
   84ce4:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   84ce6:	4835      	ldr	r0, [pc, #212]	; (84dbc <can_initialize+0x108>)
   84ce8:	2190      	movs	r1, #144	; 0x90
   84cea:	4b31      	ldr	r3, [pc, #196]	; (84db0 <can_initialize+0xfc>)
   84cec:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   84cee:	4833      	ldr	r0, [pc, #204]	; (84dbc <can_initialize+0x108>)
   84cf0:	4b30      	ldr	r3, [pc, #192]	; (84db4 <can_initialize+0x100>)
   84cf2:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   84cf4:	4831      	ldr	r0, [pc, #196]	; (84dbc <can_initialize+0x108>)
   84cf6:	4b30      	ldr	r3, [pc, #192]	; (84db8 <can_initialize+0x104>)
   84cf8:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   84cfa:	202b      	movs	r0, #43	; 0x2b
   84cfc:	4b30      	ldr	r3, [pc, #192]	; (84dc0 <can_initialize+0x10c>)
   84cfe:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   84d00:	202c      	movs	r0, #44	; 0x2c
   84d02:	4b2f      	ldr	r3, [pc, #188]	; (84dc0 <can_initialize+0x10c>)
   84d04:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   84d06:	4b2f      	ldr	r3, [pc, #188]	; (84dc4 <can_initialize+0x110>)
   84d08:	4798      	blx	r3
   84d0a:	6078      	str	r0, [r7, #4]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84d0c:	482e      	ldr	r0, [pc, #184]	; (84dc8 <can_initialize+0x114>)
   84d0e:	6879      	ldr	r1, [r7, #4]
   84d10:	22fa      	movs	r2, #250	; 0xfa
   84d12:	4b2e      	ldr	r3, [pc, #184]	; (84dcc <can_initialize+0x118>)
   84d14:	4798      	blx	r3
   84d16:	4603      	mov	r3, r0
   84d18:	2b00      	cmp	r3, #0
   84d1a:	d041      	beq.n	84da0 <can_initialize+0xec>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   84d1c:	482c      	ldr	r0, [pc, #176]	; (84dd0 <can_initialize+0x11c>)
   84d1e:	6879      	ldr	r1, [r7, #4]
   84d20:	22fa      	movs	r2, #250	; 0xfa
   84d22:	4b2a      	ldr	r3, [pc, #168]	; (84dcc <can_initialize+0x118>)
   84d24:	4798      	blx	r3
   84d26:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84d28:	2b00      	cmp	r3, #0
   84d2a:	d039      	beq.n	84da0 <can_initialize+0xec>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

	/* Disable all CAN0 & CAN1 interrupts. */
	can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84d2c:	4826      	ldr	r0, [pc, #152]	; (84dc8 <can_initialize+0x114>)
   84d2e:	f04f 31ff 	mov.w	r1, #4294967295
   84d32:	4b28      	ldr	r3, [pc, #160]	; (84dd4 <can_initialize+0x120>)
   84d34:	4798      	blx	r3
	can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84d36:	4826      	ldr	r0, [pc, #152]	; (84dd0 <can_initialize+0x11c>)
   84d38:	f04f 31ff 	mov.w	r1, #4294967295
   84d3c:	4b25      	ldr	r3, [pc, #148]	; (84dd4 <can_initialize+0x120>)
   84d3e:	4798      	blx	r3
		
	NVIC_EnableIRQ(CAN0_IRQn);
   84d40:	202b      	movs	r0, #43	; 0x2b
   84d42:	4b25      	ldr	r3, [pc, #148]	; (84dd8 <can_initialize+0x124>)
   84d44:	4798      	blx	r3
	NVIC_EnableIRQ(CAN1_IRQn);
   84d46:	202c      	movs	r0, #44	; 0x2c
   84d48:	4b23      	ldr	r3, [pc, #140]	; (84dd8 <can_initialize+0x124>)
   84d4a:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   84d4c:	481e      	ldr	r0, [pc, #120]	; (84dc8 <can_initialize+0x114>)
   84d4e:	4b23      	ldr	r3, [pc, #140]	; (84ddc <can_initialize+0x128>)
   84d50:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   84d52:	481f      	ldr	r0, [pc, #124]	; (84dd0 <can_initialize+0x11c>)
   84d54:	4b21      	ldr	r3, [pc, #132]	; (84ddc <can_initialize+0x128>)
   84d56:	4798      	blx	r3
	
	/* Initialize the CAN0 & CAN1 mailboxes */
	x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   84d58:	68b8      	ldr	r0, [r7, #8]
   84d5a:	4b21      	ldr	r3, [pc, #132]	; (84de0 <can_initialize+0x12c>)
   84d5c:	4798      	blx	r3
   84d5e:	60b8      	str	r0, [r7, #8]
	//configASSERT(x);
	
	/* Initialize the data reception flag	*/
	glob_drf = 0;
   84d60:	4b20      	ldr	r3, [pc, #128]	; (84de4 <can_initialize+0x130>)
   84d62:	2200      	movs	r2, #0
   84d64:	701a      	strb	r2, [r3, #0]
	
	/* Initialize the global can regs		*/
	for (i = 0; i < 8; i++)
   84d66:	2300      	movs	r3, #0
   84d68:	60fb      	str	r3, [r7, #12]
   84d6a:	e016      	b.n	84d9a <can_initialize+0xe6>
	{
		can_glob_com_reg[i] = 0;
   84d6c:	4b1e      	ldr	r3, [pc, #120]	; (84de8 <can_initialize+0x134>)
   84d6e:	68fa      	ldr	r2, [r7, #12]
   84d70:	2100      	movs	r1, #0
   84d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		can_glob_data_reg[i] = 0;
   84d76:	4b1d      	ldr	r3, [pc, #116]	; (84dec <can_initialize+0x138>)
   84d78:	68fa      	ldr	r2, [r7, #12]
   84d7a:	2100      	movs	r1, #0
   84d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		can_glob_hk_reg[i] = 0;
   84d80:	4b1b      	ldr	r3, [pc, #108]	; (84df0 <can_initialize+0x13c>)
   84d82:	68fa      	ldr	r2, [r7, #12]
   84d84:	2100      	movs	r1, #0
   84d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		glob_stored_data[i] = 0;
   84d8a:	4b1a      	ldr	r3, [pc, #104]	; (84df4 <can_initialize+0x140>)
   84d8c:	68fa      	ldr	r2, [r7, #12]
   84d8e:	2100      	movs	r1, #0
   84d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	
	/* Initialize the data reception flag	*/
	glob_drf = 0;
	
	/* Initialize the global can regs		*/
	for (i = 0; i < 8; i++)
   84d94:	68fb      	ldr	r3, [r7, #12]
   84d96:	3301      	adds	r3, #1
   84d98:	60fb      	str	r3, [r7, #12]
   84d9a:	68fb      	ldr	r3, [r7, #12]
   84d9c:	2b07      	cmp	r3, #7
   84d9e:	d9e5      	bls.n	84d6c <can_initialize+0xb8>
		can_glob_hk_reg[i] = 0;
		glob_stored_data[i] = 0;
	}
	
	}
	return;
   84da0:	bf00      	nop
}
   84da2:	3710      	adds	r7, #16
   84da4:	46bd      	mov	sp, r7
   84da6:	bd80      	pop	{r7, pc}
   84da8:	2007a6e0 	.word	0x2007a6e0
   84dac:	00080c69 	.word	0x00080c69
   84db0:	00080c85 	.word	0x00080c85
   84db4:	00080cbd 	.word	0x00080cbd
   84db8:	00080ca1 	.word	0x00080ca1
   84dbc:	2007a66c 	.word	0x2007a66c
   84dc0:	00081ad9 	.word	0x00081ad9
   84dc4:	000847cd 	.word	0x000847cd
   84dc8:	400b4000 	.word	0x400b4000
   84dcc:	00080e29 	.word	0x00080e29
   84dd0:	400b8000 	.word	0x400b8000
   84dd4:	00080f0d 	.word	0x00080f0d
   84dd8:	0008470d 	.word	0x0008470d
   84ddc:	00081269 	.word	0x00081269
   84de0:	00084df9 	.word	0x00084df9
   84de4:	2007a668 	.word	0x2007a668
   84de8:	2007a6e8 	.word	0x2007a6e8
   84dec:	2007a674 	.word	0x2007a674
   84df0:	2007a638 	.word	0x2007a638
   84df4:	2007a640 	.word	0x2007a640

00084df8 <can_init_mailboxes>:

uint32_t can_init_mailboxes(uint32_t x)
{
   84df8:	b580      	push	{r7, lr}
   84dfa:	b082      	sub	sp, #8
   84dfc:	af00      	add	r7, sp, #0
   84dfe:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   84e00:	483d      	ldr	r0, [pc, #244]	; (84ef8 <can_init_mailboxes+0x100>)
   84e02:	4b3e      	ldr	r3, [pc, #248]	; (84efc <can_init_mailboxes+0x104>)
   84e04:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   84e06:	4b3c      	ldr	r3, [pc, #240]	; (84ef8 <can_init_mailboxes+0x100>)
   84e08:	2207      	movs	r2, #7
   84e0a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84e0c:	4b3a      	ldr	r3, [pc, #232]	; (84ef8 <can_init_mailboxes+0x100>)
   84e0e:	2203      	movs	r2, #3
   84e10:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   84e12:	4b39      	ldr	r3, [pc, #228]	; (84ef8 <can_init_mailboxes+0x100>)
   84e14:	2205      	movs	r2, #5
   84e16:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84e18:	4b37      	ldr	r3, [pc, #220]	; (84ef8 <can_init_mailboxes+0x100>)
   84e1a:	2200      	movs	r2, #0
   84e1c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84e1e:	4b36      	ldr	r3, [pc, #216]	; (84ef8 <can_init_mailboxes+0x100>)
   84e20:	2200      	movs	r2, #0
   84e22:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84e24:	4836      	ldr	r0, [pc, #216]	; (84f00 <can_init_mailboxes+0x108>)
   84e26:	4934      	ldr	r1, [pc, #208]	; (84ef8 <can_init_mailboxes+0x100>)
   84e28:	4b36      	ldr	r3, [pc, #216]	; (84f04 <can_init_mailboxes+0x10c>)
   84e2a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   84e2c:	4836      	ldr	r0, [pc, #216]	; (84f08 <can_init_mailboxes+0x110>)
   84e2e:	4b33      	ldr	r3, [pc, #204]	; (84efc <can_init_mailboxes+0x104>)
   84e30:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   84e32:	4b35      	ldr	r3, [pc, #212]	; (84f08 <can_init_mailboxes+0x110>)
   84e34:	2200      	movs	r2, #0
   84e36:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84e38:	4b33      	ldr	r3, [pc, #204]	; (84f08 <can_init_mailboxes+0x110>)
   84e3a:	2201      	movs	r2, #1
   84e3c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   84e3e:	4b32      	ldr	r3, [pc, #200]	; (84f08 <can_init_mailboxes+0x110>)
   84e40:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84e44:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   84e46:	4b30      	ldr	r3, [pc, #192]	; (84f08 <can_init_mailboxes+0x110>)
   84e48:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   84e4c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   84e4e:	482f      	ldr	r0, [pc, #188]	; (84f0c <can_init_mailboxes+0x114>)
   84e50:	492d      	ldr	r1, [pc, #180]	; (84f08 <can_init_mailboxes+0x110>)
   84e52:	4b2c      	ldr	r3, [pc, #176]	; (84f04 <can_init_mailboxes+0x10c>)
   84e54:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   84e56:	482c      	ldr	r0, [pc, #176]	; (84f08 <can_init_mailboxes+0x110>)
   84e58:	4b28      	ldr	r3, [pc, #160]	; (84efc <can_init_mailboxes+0x104>)
   84e5a:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   84e5c:	4b2a      	ldr	r3, [pc, #168]	; (84f08 <can_init_mailboxes+0x110>)
   84e5e:	2206      	movs	r2, #6
   84e60:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84e62:	4b29      	ldr	r3, [pc, #164]	; (84f08 <can_init_mailboxes+0x110>)
   84e64:	2201      	movs	r2, #1
   84e66:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   84e68:	4b27      	ldr	r3, [pc, #156]	; (84f08 <can_init_mailboxes+0x110>)
   84e6a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84e6e:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   84e70:	4b25      	ldr	r3, [pc, #148]	; (84f08 <can_init_mailboxes+0x110>)
   84e72:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   84e76:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   84e78:	4824      	ldr	r0, [pc, #144]	; (84f0c <can_init_mailboxes+0x114>)
   84e7a:	4923      	ldr	r1, [pc, #140]	; (84f08 <can_init_mailboxes+0x110>)
   84e7c:	4b21      	ldr	r3, [pc, #132]	; (84f04 <can_init_mailboxes+0x10c>)
   84e7e:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   84e80:	4821      	ldr	r0, [pc, #132]	; (84f08 <can_init_mailboxes+0x110>)
   84e82:	4b1e      	ldr	r3, [pc, #120]	; (84efc <can_init_mailboxes+0x104>)
   84e84:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   84e86:	4b20      	ldr	r3, [pc, #128]	; (84f08 <can_init_mailboxes+0x110>)
   84e88:	2207      	movs	r2, #7
   84e8a:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84e8c:	4b1e      	ldr	r3, [pc, #120]	; (84f08 <can_init_mailboxes+0x110>)
   84e8e:	2201      	movs	r2, #1
   84e90:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   84e92:	4b1d      	ldr	r3, [pc, #116]	; (84f08 <can_init_mailboxes+0x110>)
   84e94:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84e98:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   84e9a:	4b1b      	ldr	r3, [pc, #108]	; (84f08 <can_init_mailboxes+0x110>)
   84e9c:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   84ea0:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   84ea2:	481a      	ldr	r0, [pc, #104]	; (84f0c <can_init_mailboxes+0x114>)
   84ea4:	4918      	ldr	r1, [pc, #96]	; (84f08 <can_init_mailboxes+0x110>)
   84ea6:	4b17      	ldr	r3, [pc, #92]	; (84f04 <can_init_mailboxes+0x10c>)
   84ea8:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   84eaa:	4818      	ldr	r0, [pc, #96]	; (84f0c <can_init_mailboxes+0x114>)
   84eac:	2101      	movs	r1, #1
   84eae:	4b18      	ldr	r3, [pc, #96]	; (84f10 <can_init_mailboxes+0x118>)
   84eb0:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   84eb2:	4816      	ldr	r0, [pc, #88]	; (84f0c <can_init_mailboxes+0x114>)
   84eb4:	2140      	movs	r1, #64	; 0x40
   84eb6:	4b16      	ldr	r3, [pc, #88]	; (84f10 <can_init_mailboxes+0x118>)
   84eb8:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   84eba:	4814      	ldr	r0, [pc, #80]	; (84f0c <can_init_mailboxes+0x114>)
   84ebc:	2180      	movs	r1, #128	; 0x80
   84ebe:	4b14      	ldr	r3, [pc, #80]	; (84f10 <can_init_mailboxes+0x118>)
   84ec0:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   84ec2:	480d      	ldr	r0, [pc, #52]	; (84ef8 <can_init_mailboxes+0x100>)
   84ec4:	4b0d      	ldr	r3, [pc, #52]	; (84efc <can_init_mailboxes+0x104>)
   84ec6:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   84ec8:	4b0b      	ldr	r3, [pc, #44]	; (84ef8 <can_init_mailboxes+0x100>)
   84eca:	2206      	movs	r2, #6
   84ecc:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84ece:	4b0a      	ldr	r3, [pc, #40]	; (84ef8 <can_init_mailboxes+0x100>)
   84ed0:	2203      	movs	r2, #3
   84ed2:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   84ed4:	4b08      	ldr	r3, [pc, #32]	; (84ef8 <can_init_mailboxes+0x100>)
   84ed6:	2214      	movs	r2, #20
   84ed8:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84eda:	4b07      	ldr	r3, [pc, #28]	; (84ef8 <can_init_mailboxes+0x100>)
   84edc:	2200      	movs	r2, #0
   84ede:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84ee0:	4b05      	ldr	r3, [pc, #20]	; (84ef8 <can_init_mailboxes+0x100>)
   84ee2:	2200      	movs	r2, #0
   84ee4:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84ee6:	4806      	ldr	r0, [pc, #24]	; (84f00 <can_init_mailboxes+0x108>)
   84ee8:	4903      	ldr	r1, [pc, #12]	; (84ef8 <can_init_mailboxes+0x100>)
   84eea:	4b06      	ldr	r3, [pc, #24]	; (84f04 <can_init_mailboxes+0x10c>)
   84eec:	4798      	blx	r3

	return 1;
   84eee:	2301      	movs	r3, #1
}
   84ef0:	4618      	mov	r0, r3
   84ef2:	3708      	adds	r7, #8
   84ef4:	46bd      	mov	sp, r7
   84ef6:	bd80      	pop	{r7, pc}
   84ef8:	2007a6a0 	.word	0x2007a6a0
   84efc:	00084a25 	.word	0x00084a25
   84f00:	400b4000 	.word	0x400b4000
   84f04:	00080fcd 	.word	0x00080fcd
   84f08:	2007a648 	.word	0x2007a648
   84f0c:	400b8000 	.word	0x400b8000
   84f10:	00080ef1 	.word	0x00080ef1

00084f14 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   84f14:	b480      	push	{r7}
   84f16:	b085      	sub	sp, #20
   84f18:	af00      	add	r7, sp, #0
   84f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   84f1c:	687b      	ldr	r3, [r7, #4]
   84f1e:	f003 0307 	and.w	r3, r3, #7
   84f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   84f24:	4b0c      	ldr	r3, [pc, #48]	; (84f58 <NVIC_SetPriorityGrouping+0x44>)
   84f26:	68db      	ldr	r3, [r3, #12]
   84f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   84f2a:	68ba      	ldr	r2, [r7, #8]
   84f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   84f30:	4013      	ands	r3, r2
   84f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   84f34:	68fb      	ldr	r3, [r7, #12]
   84f36:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   84f38:	68bb      	ldr	r3, [r7, #8]
   84f3a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   84f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   84f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   84f44:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   84f46:	4b04      	ldr	r3, [pc, #16]	; (84f58 <NVIC_SetPriorityGrouping+0x44>)
   84f48:	68ba      	ldr	r2, [r7, #8]
   84f4a:	60da      	str	r2, [r3, #12]
}
   84f4c:	3714      	adds	r7, #20
   84f4e:	46bd      	mov	sp, r7
   84f50:	f85d 7b04 	ldr.w	r7, [sp], #4
   84f54:	4770      	bx	lr
   84f56:	bf00      	nop
   84f58:	e000ed00 	.word	0xe000ed00

00084f5c <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   84f5c:	b580      	push	{r7, lr}
   84f5e:	af00      	add	r7, sp, #0
	/* Prepare the hardware */
	prvSetupHardware();
   84f60:	4b07      	ldr	r3, [pc, #28]	; (84f80 <main+0x24>)
   84f62:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   84f64:	4b07      	ldr	r3, [pc, #28]	; (84f84 <main+0x28>)
   84f66:	4798      	blx	r3

	/* Create Tasks */
	my_blink();
   84f68:	4b07      	ldr	r3, [pc, #28]	; (84f88 <main+0x2c>)
   84f6a:	4798      	blx	r3
	housekeep();
   84f6c:	4b07      	ldr	r3, [pc, #28]	; (84f8c <main+0x30>)
   84f6e:	4798      	blx	r3
	command_loop();
   84f70:	4b07      	ldr	r3, [pc, #28]	; (84f90 <main+0x34>)
   84f72:	4798      	blx	r3
	data_test();
   84f74:	4b07      	ldr	r3, [pc, #28]	; (84f94 <main+0x38>)
   84f76:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   84f78:	4b07      	ldr	r3, [pc, #28]	; (84f98 <main+0x3c>)
   84f7a:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   84f7c:	e7fe      	b.n	84f7c <main+0x20>
   84f7e:	bf00      	nop
   84f80:	00084f9d 	.word	0x00084f9d
   84f84:	00084fd5 	.word	0x00084fd5
   84f88:	00085041 	.word	0x00085041
   84f8c:	000802ed 	.word	0x000802ed
   84f90:	00080149 	.word	0x00080149
   84f94:	00080211 	.word	0x00080211
   84f98:	000834cd 	.word	0x000834cd

00084f9c <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   84f9c:	b580      	push	{r7, lr}
   84f9e:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   84fa0:	4b06      	ldr	r3, [pc, #24]	; (84fbc <prvSetupHardware+0x20>)
   84fa2:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   84fa4:	2000      	movs	r0, #0
   84fa6:	4b06      	ldr	r3, [pc, #24]	; (84fc0 <prvSetupHardware+0x24>)
   84fa8:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   84faa:	4b06      	ldr	r3, [pc, #24]	; (84fc4 <prvSetupHardware+0x28>)
   84fac:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   84fae:	4b06      	ldr	r3, [pc, #24]	; (84fc8 <prvSetupHardware+0x2c>)
   84fb0:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   84fb2:	4b06      	ldr	r3, [pc, #24]	; (84fcc <prvSetupHardware+0x30>)
   84fb4:	4798      	blx	r3
	
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   84fb6:	4b06      	ldr	r3, [pc, #24]	; (84fd0 <prvSetupHardware+0x34>)
   84fb8:	4798      	blx	r3
	
}
   84fba:	bd80      	pop	{r7, pc}
   84fbc:	00080b11 	.word	0x00080b11
   84fc0:	00084f15 	.word	0x00084f15
   84fc4:	00080b79 	.word	0x00080b79
   84fc8:	000850f1 	.word	0x000850f1
   84fcc:	00084cb5 	.word	0x00084cb5
   84fd0:	00080791 	.word	0x00080791

00084fd4 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   84fd4:	b580      	push	{r7, lr}
   84fd6:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   84fd8:	2001      	movs	r0, #1
   84fda:	2100      	movs	r1, #0
   84fdc:	2203      	movs	r2, #3
   84fde:	4b03      	ldr	r3, [pc, #12]	; (84fec <prvInitializeMutexes+0x18>)
   84fe0:	4798      	blx	r3
   84fe2:	4602      	mov	r2, r0
   84fe4:	4b02      	ldr	r3, [pc, #8]	; (84ff0 <prvInitializeMutexes+0x1c>)
   84fe6:	601a      	str	r2, [r3, #0]
	return;
   84fe8:	bf00      	nop
}
   84fea:	bd80      	pop	{r7, pc}
   84fec:	00082a59 	.word	0x00082a59
   84ff0:	2007a69c 	.word	0x2007a69c

00084ff4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   84ff4:	b580      	push	{r7, lr}
   84ff6:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   84ff8:	4b01      	ldr	r3, [pc, #4]	; (85000 <vApplicationMallocFailedHook+0xc>)
   84ffa:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   84ffc:	e7fe      	b.n	84ffc <vApplicationMallocFailedHook+0x8>
   84ffe:	bf00      	nop
   85000:	000824dd 	.word	0x000824dd

00085004 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   85004:	b580      	push	{r7, lr}
   85006:	b082      	sub	sp, #8
   85008:	af00      	add	r7, sp, #0
   8500a:	6078      	str	r0, [r7, #4]
   8500c:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   8500e:	4b01      	ldr	r3, [pc, #4]	; (85014 <vApplicationStackOverflowHook+0x10>)
   85010:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85012:	e7fe      	b.n	85012 <vApplicationStackOverflowHook+0xe>
   85014:	000824dd 	.word	0x000824dd

00085018 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   85018:	b580      	push	{r7, lr}
   8501a:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   8501c:	4804      	ldr	r0, [pc, #16]	; (85030 <WDT_Handler+0x18>)
   8501e:	4b05      	ldr	r3, [pc, #20]	; (85034 <WDT_Handler+0x1c>)
   85020:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   85022:	2055      	movs	r0, #85	; 0x55
   85024:	4b04      	ldr	r3, [pc, #16]	; (85038 <WDT_Handler+0x20>)
   85026:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   85028:	4801      	ldr	r0, [pc, #4]	; (85030 <WDT_Handler+0x18>)
   8502a:	4b04      	ldr	r3, [pc, #16]	; (8503c <WDT_Handler+0x24>)
   8502c:	4798      	blx	r3
}
   8502e:	bd80      	pop	{r7, pc}
   85030:	400e1a50 	.word	0x400e1a50
   85034:	00081e6d 	.word	0x00081e6d
   85038:	000814ed 	.word	0x000814ed
   8503c:	00081e45 	.word	0x00081e45

00085040 <my_blink>:

/**
 * \brief Toggles the state of the LED pin high/low.		
 */
void my_blink( void )
{		
   85040:	b590      	push	{r4, r7, lr}
   85042:	b085      	sub	sp, #20
   85044:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this file. */
		
	xTaskCreate( prvTurnOnTask,						/* The function that implements the task. */
   85046:	2301      	movs	r3, #1
   85048:	9300      	str	r3, [sp, #0]
   8504a:	2300      	movs	r3, #0
   8504c:	9301      	str	r3, [sp, #4]
   8504e:	2300      	movs	r3, #0
   85050:	9302      	str	r3, [sp, #8]
   85052:	2300      	movs	r3, #0
   85054:	9303      	str	r3, [sp, #12]
   85056:	480d      	ldr	r0, [pc, #52]	; (8508c <my_blink+0x4c>)
   85058:	490d      	ldr	r1, [pc, #52]	; (85090 <my_blink+0x50>)
   8505a:	2282      	movs	r2, #130	; 0x82
   8505c:	f241 2334 	movw	r3, #4660	; 0x1234
   85060:	4c0c      	ldr	r4, [pc, #48]	; (85094 <my_blink+0x54>)
   85062:	47a0      	blx	r4
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) TurnOn_PARAMETER, 		/* The parameter passed to the task - just to check the functionality. */
				TurnOn_TASK_PRIORITY, 				/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvTurnOffTask, 
   85064:	2301      	movs	r3, #1
   85066:	9300      	str	r3, [sp, #0]
   85068:	2300      	movs	r3, #0
   8506a:	9301      	str	r3, [sp, #4]
   8506c:	2300      	movs	r3, #0
   8506e:	9302      	str	r3, [sp, #8]
   85070:	2300      	movs	r3, #0
   85072:	9303      	str	r3, [sp, #12]
   85074:	4808      	ldr	r0, [pc, #32]	; (85098 <my_blink+0x58>)
   85076:	4909      	ldr	r1, [pc, #36]	; (8509c <my_blink+0x5c>)
   85078:	2282      	movs	r2, #130	; 0x82
   8507a:	f245 6378 	movw	r3, #22136	; 0x5678
   8507e:	4c05      	ldr	r4, [pc, #20]	; (85094 <my_blink+0x54>)
   85080:	47a0      	blx	r4
				 "OFF", 
				 configMINIMAL_STACK_SIZE, 
				 ( void * ) TurnOff_PARAMETER, 
				 TurnOn_TASK_PRIORITY, 
				 NULL );
	return;					 
   85082:	bf00      	nop
}
   85084:	3704      	adds	r7, #4
   85086:	46bd      	mov	sp, r7
   85088:	bd90      	pop	{r4, r7, pc}
   8508a:	bf00      	nop
   8508c:	000850a1 	.word	0x000850a1
   85090:	0008561c 	.word	0x0008561c
   85094:	00083251 	.word	0x00083251
   85098:	000850c9 	.word	0x000850c9
   8509c:	00085620 	.word	0x00085620

000850a0 <prvTurnOnTask>:
/**
 * \brief Sets LED pin to high.
 * @param *pvParameters:	
 */
static void prvTurnOnTask( void *pvParameters )
{
   850a0:	b580      	push	{r7, lr}
   850a2:	b082      	sub	sp, #8
   850a4:	af00      	add	r7, sp, #0
   850a6:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   850a8:	687a      	ldr	r2, [r7, #4]
   850aa:	f241 2334 	movw	r3, #4660	; 0x1234
   850ae:	429a      	cmp	r2, r3
   850b0:	d002      	beq.n	850b8 <prvTurnOnTask+0x18>
   850b2:	4b03      	ldr	r3, [pc, #12]	; (850c0 <prvTurnOnTask+0x20>)
   850b4:	4798      	blx	r3
   850b6:	e7fe      	b.n	850b6 <prvTurnOnTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_high(LED0_GPIO);
   850b8:	203b      	movs	r0, #59	; 0x3b
   850ba:	4b02      	ldr	r3, [pc, #8]	; (850c4 <prvTurnOnTask+0x24>)
   850bc:	4798      	blx	r3
	}
   850be:	e7fb      	b.n	850b8 <prvTurnOnTask+0x18>
   850c0:	000824dd 	.word	0x000824dd
   850c4:	00081485 	.word	0x00081485

000850c8 <prvTurnOffTask>:
/**
 * \brief Sets LED pin to low.
 * @param *pvParameters:
 */
static void prvTurnOffTask( void *pvParameters )
{
   850c8:	b580      	push	{r7, lr}
   850ca:	b082      	sub	sp, #8
   850cc:	af00      	add	r7, sp, #0
   850ce:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   850d0:	687a      	ldr	r2, [r7, #4]
   850d2:	f245 6378 	movw	r3, #22136	; 0x5678
   850d6:	429a      	cmp	r2, r3
   850d8:	d002      	beq.n	850e0 <prvTurnOffTask+0x18>
   850da:	4b03      	ldr	r3, [pc, #12]	; (850e8 <prvTurnOffTask+0x20>)
   850dc:	4798      	blx	r3
   850de:	e7fe      	b.n	850de <prvTurnOffTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_low(LED0_GPIO);
   850e0:	203b      	movs	r0, #59	; 0x3b
   850e2:	4b02      	ldr	r3, [pc, #8]	; (850ec <prvTurnOffTask+0x24>)
   850e4:	4798      	blx	r3
	}
   850e6:	e7fb      	b.n	850e0 <prvTurnOffTask+0x18>
   850e8:	000824dd 	.word	0x000824dd
   850ec:	000814b9 	.word	0x000814b9

000850f0 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   850f0:	b580      	push	{r7, lr}
   850f2:	b082      	sub	sp, #8
   850f4:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   850f6:	2300      	movs	r3, #0
   850f8:	607b      	str	r3, [r7, #4]
   850fa:	e00f      	b.n	8511c <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   850fc:	4b0a      	ldr	r3, [pc, #40]	; (85128 <vParTestInitialise+0x38>)
   850fe:	687a      	ldr	r2, [r7, #4]
   85100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   85104:	4618      	mov	r0, r3
   85106:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8510a:	4b08      	ldr	r3, [pc, #32]	; (8512c <vParTestInitialise+0x3c>)
   8510c:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8510e:	6878      	ldr	r0, [r7, #4]
   85110:	2100      	movs	r1, #0
   85112:	4b07      	ldr	r3, [pc, #28]	; (85130 <vParTestInitialise+0x40>)
   85114:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   85116:	687b      	ldr	r3, [r7, #4]
   85118:	3301      	adds	r3, #1
   8511a:	607b      	str	r3, [r7, #4]
   8511c:	687b      	ldr	r3, [r7, #4]
   8511e:	2b03      	cmp	r3, #3
   85120:	d9ec      	bls.n	850fc <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   85122:	3708      	adds	r7, #8
   85124:	46bd      	mov	sp, r7
   85126:	bd80      	pop	{r7, pc}
   85128:	00085624 	.word	0x00085624
   8512c:	0008154d 	.word	0x0008154d
   85130:	00085135 	.word	0x00085135

00085134 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   85134:	b580      	push	{r7, lr}
   85136:	b082      	sub	sp, #8
   85138:	af00      	add	r7, sp, #0
   8513a:	6078      	str	r0, [r7, #4]
   8513c:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   8513e:	687b      	ldr	r3, [r7, #4]
   85140:	2b03      	cmp	r3, #3
   85142:	d823      	bhi.n	8518c <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   85144:	687b      	ldr	r3, [r7, #4]
   85146:	2b00      	cmp	r3, #0
   85148:	d106      	bne.n	85158 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   8514a:	683b      	ldr	r3, [r7, #0]
   8514c:	2b00      	cmp	r3, #0
   8514e:	bf14      	ite	ne
   85150:	2300      	movne	r3, #0
   85152:	2301      	moveq	r3, #1
   85154:	b2db      	uxtb	r3, r3
   85156:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   85158:	683b      	ldr	r3, [r7, #0]
   8515a:	2b00      	cmp	r3, #0
   8515c:	d00b      	beq.n	85176 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   8515e:	4b0d      	ldr	r3, [pc, #52]	; (85194 <vParTestSetLED+0x60>)
   85160:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   85162:	4b0d      	ldr	r3, [pc, #52]	; (85198 <vParTestSetLED+0x64>)
   85164:	687a      	ldr	r2, [r7, #4]
   85166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8516a:	4618      	mov	r0, r3
   8516c:	4b0b      	ldr	r3, [pc, #44]	; (8519c <vParTestSetLED+0x68>)
   8516e:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   85170:	4b0b      	ldr	r3, [pc, #44]	; (851a0 <vParTestSetLED+0x6c>)
   85172:	4798      	blx	r3
   85174:	e00a      	b.n	8518c <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   85176:	4b07      	ldr	r3, [pc, #28]	; (85194 <vParTestSetLED+0x60>)
   85178:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   8517a:	4b07      	ldr	r3, [pc, #28]	; (85198 <vParTestSetLED+0x64>)
   8517c:	687a      	ldr	r2, [r7, #4]
   8517e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   85182:	4618      	mov	r0, r3
   85184:	4b07      	ldr	r3, [pc, #28]	; (851a4 <vParTestSetLED+0x70>)
   85186:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   85188:	4b05      	ldr	r3, [pc, #20]	; (851a0 <vParTestSetLED+0x6c>)
   8518a:	4798      	blx	r3
		}
	}
}
   8518c:	3708      	adds	r7, #8
   8518e:	46bd      	mov	sp, r7
   85190:	bd80      	pop	{r7, pc}
   85192:	bf00      	nop
   85194:	00082461 	.word	0x00082461
   85198:	00085624 	.word	0x00085624
   8519c:	000814b9 	.word	0x000814b9
   851a0:	000824a5 	.word	0x000824a5
   851a4:	00081485 	.word	0x00081485

000851a8 <__libc_init_array>:
   851a8:	b570      	push	{r4, r5, r6, lr}
   851aa:	4e0f      	ldr	r6, [pc, #60]	; (851e8 <__libc_init_array+0x40>)
   851ac:	4d0f      	ldr	r5, [pc, #60]	; (851ec <__libc_init_array+0x44>)
   851ae:	1b76      	subs	r6, r6, r5
   851b0:	10b6      	asrs	r6, r6, #2
   851b2:	d007      	beq.n	851c4 <__libc_init_array+0x1c>
   851b4:	3d04      	subs	r5, #4
   851b6:	2400      	movs	r4, #0
   851b8:	3401      	adds	r4, #1
   851ba:	f855 3f04 	ldr.w	r3, [r5, #4]!
   851be:	4798      	blx	r3
   851c0:	42a6      	cmp	r6, r4
   851c2:	d1f9      	bne.n	851b8 <__libc_init_array+0x10>
   851c4:	4e0a      	ldr	r6, [pc, #40]	; (851f0 <__libc_init_array+0x48>)
   851c6:	4d0b      	ldr	r5, [pc, #44]	; (851f4 <__libc_init_array+0x4c>)
   851c8:	f000 fa38 	bl	8563c <_init>
   851cc:	1b76      	subs	r6, r6, r5
   851ce:	10b6      	asrs	r6, r6, #2
   851d0:	d008      	beq.n	851e4 <__libc_init_array+0x3c>
   851d2:	3d04      	subs	r5, #4
   851d4:	2400      	movs	r4, #0
   851d6:	3401      	adds	r4, #1
   851d8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   851dc:	4798      	blx	r3
   851de:	42a6      	cmp	r6, r4
   851e0:	d1f9      	bne.n	851d6 <__libc_init_array+0x2e>
   851e2:	bd70      	pop	{r4, r5, r6, pc}
   851e4:	bd70      	pop	{r4, r5, r6, pc}
   851e6:	bf00      	nop
   851e8:	00085648 	.word	0x00085648
   851ec:	00085648 	.word	0x00085648
   851f0:	00085650 	.word	0x00085650
   851f4:	00085648 	.word	0x00085648

000851f8 <memcmp>:
   851f8:	2a03      	cmp	r2, #3
   851fa:	b470      	push	{r4, r5, r6}
   851fc:	d928      	bls.n	85250 <memcmp+0x58>
   851fe:	ea40 0301 	orr.w	r3, r0, r1
   85202:	079b      	lsls	r3, r3, #30
   85204:	d013      	beq.n	8522e <memcmp+0x36>
   85206:	7805      	ldrb	r5, [r0, #0]
   85208:	780c      	ldrb	r4, [r1, #0]
   8520a:	42a5      	cmp	r5, r4
   8520c:	d124      	bne.n	85258 <memcmp+0x60>
   8520e:	3a01      	subs	r2, #1
   85210:	2300      	movs	r3, #0
   85212:	e005      	b.n	85220 <memcmp+0x28>
   85214:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   85218:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   8521c:	42a5      	cmp	r5, r4
   8521e:	d11b      	bne.n	85258 <memcmp+0x60>
   85220:	4293      	cmp	r3, r2
   85222:	f103 0301 	add.w	r3, r3, #1
   85226:	d1f5      	bne.n	85214 <memcmp+0x1c>
   85228:	2000      	movs	r0, #0
   8522a:	bc70      	pop	{r4, r5, r6}
   8522c:	4770      	bx	lr
   8522e:	460c      	mov	r4, r1
   85230:	4603      	mov	r3, r0
   85232:	6825      	ldr	r5, [r4, #0]
   85234:	681e      	ldr	r6, [r3, #0]
   85236:	4621      	mov	r1, r4
   85238:	42ae      	cmp	r6, r5
   8523a:	4618      	mov	r0, r3
   8523c:	f104 0404 	add.w	r4, r4, #4
   85240:	f103 0304 	add.w	r3, r3, #4
   85244:	d104      	bne.n	85250 <memcmp+0x58>
   85246:	3a04      	subs	r2, #4
   85248:	2a03      	cmp	r2, #3
   8524a:	4618      	mov	r0, r3
   8524c:	4621      	mov	r1, r4
   8524e:	d8f0      	bhi.n	85232 <memcmp+0x3a>
   85250:	2a00      	cmp	r2, #0
   85252:	d1d8      	bne.n	85206 <memcmp+0xe>
   85254:	4610      	mov	r0, r2
   85256:	e7e8      	b.n	8522a <memcmp+0x32>
   85258:	1b28      	subs	r0, r5, r4
   8525a:	bc70      	pop	{r4, r5, r6}
   8525c:	4770      	bx	lr
   8525e:	bf00      	nop

00085260 <memcpy>:
   85260:	4684      	mov	ip, r0
   85262:	ea41 0300 	orr.w	r3, r1, r0
   85266:	f013 0303 	ands.w	r3, r3, #3
   8526a:	d149      	bne.n	85300 <memcpy+0xa0>
   8526c:	3a40      	subs	r2, #64	; 0x40
   8526e:	d323      	bcc.n	852b8 <memcpy+0x58>
   85270:	680b      	ldr	r3, [r1, #0]
   85272:	6003      	str	r3, [r0, #0]
   85274:	684b      	ldr	r3, [r1, #4]
   85276:	6043      	str	r3, [r0, #4]
   85278:	688b      	ldr	r3, [r1, #8]
   8527a:	6083      	str	r3, [r0, #8]
   8527c:	68cb      	ldr	r3, [r1, #12]
   8527e:	60c3      	str	r3, [r0, #12]
   85280:	690b      	ldr	r3, [r1, #16]
   85282:	6103      	str	r3, [r0, #16]
   85284:	694b      	ldr	r3, [r1, #20]
   85286:	6143      	str	r3, [r0, #20]
   85288:	698b      	ldr	r3, [r1, #24]
   8528a:	6183      	str	r3, [r0, #24]
   8528c:	69cb      	ldr	r3, [r1, #28]
   8528e:	61c3      	str	r3, [r0, #28]
   85290:	6a0b      	ldr	r3, [r1, #32]
   85292:	6203      	str	r3, [r0, #32]
   85294:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85296:	6243      	str	r3, [r0, #36]	; 0x24
   85298:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8529a:	6283      	str	r3, [r0, #40]	; 0x28
   8529c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8529e:	62c3      	str	r3, [r0, #44]	; 0x2c
   852a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   852a2:	6303      	str	r3, [r0, #48]	; 0x30
   852a4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   852a6:	6343      	str	r3, [r0, #52]	; 0x34
   852a8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   852aa:	6383      	str	r3, [r0, #56]	; 0x38
   852ac:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   852ae:	63c3      	str	r3, [r0, #60]	; 0x3c
   852b0:	3040      	adds	r0, #64	; 0x40
   852b2:	3140      	adds	r1, #64	; 0x40
   852b4:	3a40      	subs	r2, #64	; 0x40
   852b6:	d2db      	bcs.n	85270 <memcpy+0x10>
   852b8:	3230      	adds	r2, #48	; 0x30
   852ba:	d30b      	bcc.n	852d4 <memcpy+0x74>
   852bc:	680b      	ldr	r3, [r1, #0]
   852be:	6003      	str	r3, [r0, #0]
   852c0:	684b      	ldr	r3, [r1, #4]
   852c2:	6043      	str	r3, [r0, #4]
   852c4:	688b      	ldr	r3, [r1, #8]
   852c6:	6083      	str	r3, [r0, #8]
   852c8:	68cb      	ldr	r3, [r1, #12]
   852ca:	60c3      	str	r3, [r0, #12]
   852cc:	3010      	adds	r0, #16
   852ce:	3110      	adds	r1, #16
   852d0:	3a10      	subs	r2, #16
   852d2:	d2f3      	bcs.n	852bc <memcpy+0x5c>
   852d4:	320c      	adds	r2, #12
   852d6:	d305      	bcc.n	852e4 <memcpy+0x84>
   852d8:	f851 3b04 	ldr.w	r3, [r1], #4
   852dc:	f840 3b04 	str.w	r3, [r0], #4
   852e0:	3a04      	subs	r2, #4
   852e2:	d2f9      	bcs.n	852d8 <memcpy+0x78>
   852e4:	3204      	adds	r2, #4
   852e6:	d008      	beq.n	852fa <memcpy+0x9a>
   852e8:	07d2      	lsls	r2, r2, #31
   852ea:	bf1c      	itt	ne
   852ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   852f0:	f800 3b01 	strbne.w	r3, [r0], #1
   852f4:	d301      	bcc.n	852fa <memcpy+0x9a>
   852f6:	880b      	ldrh	r3, [r1, #0]
   852f8:	8003      	strh	r3, [r0, #0]
   852fa:	4660      	mov	r0, ip
   852fc:	4770      	bx	lr
   852fe:	bf00      	nop
   85300:	2a08      	cmp	r2, #8
   85302:	d313      	bcc.n	8532c <memcpy+0xcc>
   85304:	078b      	lsls	r3, r1, #30
   85306:	d0b1      	beq.n	8526c <memcpy+0xc>
   85308:	f010 0303 	ands.w	r3, r0, #3
   8530c:	d0ae      	beq.n	8526c <memcpy+0xc>
   8530e:	f1c3 0304 	rsb	r3, r3, #4
   85312:	1ad2      	subs	r2, r2, r3
   85314:	07db      	lsls	r3, r3, #31
   85316:	bf1c      	itt	ne
   85318:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8531c:	f800 3b01 	strbne.w	r3, [r0], #1
   85320:	d3a4      	bcc.n	8526c <memcpy+0xc>
   85322:	f831 3b02 	ldrh.w	r3, [r1], #2
   85326:	f820 3b02 	strh.w	r3, [r0], #2
   8532a:	e79f      	b.n	8526c <memcpy+0xc>
   8532c:	3a04      	subs	r2, #4
   8532e:	d3d9      	bcc.n	852e4 <memcpy+0x84>
   85330:	3a01      	subs	r2, #1
   85332:	f811 3b01 	ldrb.w	r3, [r1], #1
   85336:	f800 3b01 	strb.w	r3, [r0], #1
   8533a:	d2f9      	bcs.n	85330 <memcpy+0xd0>
   8533c:	780b      	ldrb	r3, [r1, #0]
   8533e:	7003      	strb	r3, [r0, #0]
   85340:	784b      	ldrb	r3, [r1, #1]
   85342:	7043      	strb	r3, [r0, #1]
   85344:	788b      	ldrb	r3, [r1, #2]
   85346:	7083      	strb	r3, [r0, #2]
   85348:	4660      	mov	r0, ip
   8534a:	4770      	bx	lr

0008534c <memset>:
   8534c:	b4f0      	push	{r4, r5, r6, r7}
   8534e:	0784      	lsls	r4, r0, #30
   85350:	d043      	beq.n	853da <memset+0x8e>
   85352:	1e54      	subs	r4, r2, #1
   85354:	2a00      	cmp	r2, #0
   85356:	d03e      	beq.n	853d6 <memset+0x8a>
   85358:	b2cd      	uxtb	r5, r1
   8535a:	4603      	mov	r3, r0
   8535c:	e003      	b.n	85366 <memset+0x1a>
   8535e:	1e62      	subs	r2, r4, #1
   85360:	2c00      	cmp	r4, #0
   85362:	d038      	beq.n	853d6 <memset+0x8a>
   85364:	4614      	mov	r4, r2
   85366:	f803 5b01 	strb.w	r5, [r3], #1
   8536a:	079a      	lsls	r2, r3, #30
   8536c:	d1f7      	bne.n	8535e <memset+0x12>
   8536e:	2c03      	cmp	r4, #3
   85370:	d92a      	bls.n	853c8 <memset+0x7c>
   85372:	b2cd      	uxtb	r5, r1
   85374:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85378:	2c0f      	cmp	r4, #15
   8537a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8537e:	d915      	bls.n	853ac <memset+0x60>
   85380:	f1a4 0710 	sub.w	r7, r4, #16
   85384:	093f      	lsrs	r7, r7, #4
   85386:	f103 0610 	add.w	r6, r3, #16
   8538a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8538e:	461a      	mov	r2, r3
   85390:	6015      	str	r5, [r2, #0]
   85392:	6055      	str	r5, [r2, #4]
   85394:	6095      	str	r5, [r2, #8]
   85396:	60d5      	str	r5, [r2, #12]
   85398:	3210      	adds	r2, #16
   8539a:	42b2      	cmp	r2, r6
   8539c:	d1f8      	bne.n	85390 <memset+0x44>
   8539e:	f004 040f 	and.w	r4, r4, #15
   853a2:	3701      	adds	r7, #1
   853a4:	2c03      	cmp	r4, #3
   853a6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   853aa:	d90d      	bls.n	853c8 <memset+0x7c>
   853ac:	461e      	mov	r6, r3
   853ae:	4622      	mov	r2, r4
   853b0:	3a04      	subs	r2, #4
   853b2:	2a03      	cmp	r2, #3
   853b4:	f846 5b04 	str.w	r5, [r6], #4
   853b8:	d8fa      	bhi.n	853b0 <memset+0x64>
   853ba:	1f22      	subs	r2, r4, #4
   853bc:	f022 0203 	bic.w	r2, r2, #3
   853c0:	3204      	adds	r2, #4
   853c2:	4413      	add	r3, r2
   853c4:	f004 0403 	and.w	r4, r4, #3
   853c8:	b12c      	cbz	r4, 853d6 <memset+0x8a>
   853ca:	b2c9      	uxtb	r1, r1
   853cc:	441c      	add	r4, r3
   853ce:	f803 1b01 	strb.w	r1, [r3], #1
   853d2:	42a3      	cmp	r3, r4
   853d4:	d1fb      	bne.n	853ce <memset+0x82>
   853d6:	bcf0      	pop	{r4, r5, r6, r7}
   853d8:	4770      	bx	lr
   853da:	4614      	mov	r4, r2
   853dc:	4603      	mov	r3, r0
   853de:	e7c6      	b.n	8536e <memset+0x22>

000853e0 <register_fini>:
   853e0:	4b02      	ldr	r3, [pc, #8]	; (853ec <register_fini+0xc>)
   853e2:	b113      	cbz	r3, 853ea <register_fini+0xa>
   853e4:	4802      	ldr	r0, [pc, #8]	; (853f0 <register_fini+0x10>)
   853e6:	f000 b805 	b.w	853f4 <atexit>
   853ea:	4770      	bx	lr
   853ec:	00000000 	.word	0x00000000
   853f0:	00085401 	.word	0x00085401

000853f4 <atexit>:
   853f4:	4601      	mov	r1, r0
   853f6:	2000      	movs	r0, #0
   853f8:	4602      	mov	r2, r0
   853fa:	4603      	mov	r3, r0
   853fc:	f000 b818 	b.w	85430 <__register_exitproc>

00085400 <__libc_fini_array>:
   85400:	b538      	push	{r3, r4, r5, lr}
   85402:	4d09      	ldr	r5, [pc, #36]	; (85428 <__libc_fini_array+0x28>)
   85404:	4c09      	ldr	r4, [pc, #36]	; (8542c <__libc_fini_array+0x2c>)
   85406:	1b64      	subs	r4, r4, r5
   85408:	10a4      	asrs	r4, r4, #2
   8540a:	bf18      	it	ne
   8540c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   85410:	d005      	beq.n	8541e <__libc_fini_array+0x1e>
   85412:	3c01      	subs	r4, #1
   85414:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85418:	4798      	blx	r3
   8541a:	2c00      	cmp	r4, #0
   8541c:	d1f9      	bne.n	85412 <__libc_fini_array+0x12>
   8541e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85422:	f000 b915 	b.w	85650 <_fini>
   85426:	bf00      	nop
   85428:	0008565c 	.word	0x0008565c
   8542c:	00085660 	.word	0x00085660

00085430 <__register_exitproc>:
   85430:	b5f0      	push	{r4, r5, r6, r7, lr}
   85432:	4c27      	ldr	r4, [pc, #156]	; (854d0 <__register_exitproc+0xa0>)
   85434:	b085      	sub	sp, #20
   85436:	6826      	ldr	r6, [r4, #0]
   85438:	4607      	mov	r7, r0
   8543a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8543e:	2c00      	cmp	r4, #0
   85440:	d040      	beq.n	854c4 <__register_exitproc+0x94>
   85442:	6865      	ldr	r5, [r4, #4]
   85444:	2d1f      	cmp	r5, #31
   85446:	dd1e      	ble.n	85486 <__register_exitproc+0x56>
   85448:	4822      	ldr	r0, [pc, #136]	; (854d4 <__register_exitproc+0xa4>)
   8544a:	b918      	cbnz	r0, 85454 <__register_exitproc+0x24>
   8544c:	f04f 30ff 	mov.w	r0, #4294967295
   85450:	b005      	add	sp, #20
   85452:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85454:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85458:	9103      	str	r1, [sp, #12]
   8545a:	9202      	str	r2, [sp, #8]
   8545c:	9301      	str	r3, [sp, #4]
   8545e:	f3af 8000 	nop.w
   85462:	9903      	ldr	r1, [sp, #12]
   85464:	4604      	mov	r4, r0
   85466:	9a02      	ldr	r2, [sp, #8]
   85468:	9b01      	ldr	r3, [sp, #4]
   8546a:	2800      	cmp	r0, #0
   8546c:	d0ee      	beq.n	8544c <__register_exitproc+0x1c>
   8546e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85472:	2000      	movs	r0, #0
   85474:	6025      	str	r5, [r4, #0]
   85476:	6060      	str	r0, [r4, #4]
   85478:	4605      	mov	r5, r0
   8547a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8547e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85482:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85486:	b93f      	cbnz	r7, 85498 <__register_exitproc+0x68>
   85488:	1c6b      	adds	r3, r5, #1
   8548a:	2000      	movs	r0, #0
   8548c:	3502      	adds	r5, #2
   8548e:	6063      	str	r3, [r4, #4]
   85490:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85494:	b005      	add	sp, #20
   85496:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85498:	2601      	movs	r6, #1
   8549a:	40ae      	lsls	r6, r5
   8549c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   854a0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   854a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   854a8:	2f02      	cmp	r7, #2
   854aa:	ea42 0206 	orr.w	r2, r2, r6
   854ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   854b2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   854b6:	d1e7      	bne.n	85488 <__register_exitproc+0x58>
   854b8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   854bc:	431e      	orrs	r6, r3
   854be:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   854c2:	e7e1      	b.n	85488 <__register_exitproc+0x58>
   854c4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   854c8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   854cc:	e7b9      	b.n	85442 <__register_exitproc+0x12>
   854ce:	bf00      	nop
   854d0:	00085638 	.word	0x00085638
   854d4:	00000000 	.word	0x00000000
   854d8:	00004e4f 	.word	0x00004e4f
   854dc:	00004e4f 	.word	0x00004e4f
   854e0:	00004e4f 	.word	0x00004e4f
   854e4:	00006b68 	.word	0x00006b68
   854e8:	6d612069 	.word	0x6d612069
   854ec:	64617320 	.word	0x64617320
   854f0:	00000000 	.word	0x00000000
   854f4:	59530d0a 	.word	0x59530d0a
   854f8:	4d455453 	.word	0x4d455453
   854fc:	52412053 	.word	0x52412053
   85500:	4f4e2045 	.word	0x4f4e2045
   85504:	414e494d 	.word	0x414e494d
   85508:	53202c4c 	.word	0x53202c4c
   8550c:	0a2e5249 	.word	0x0a2e5249
   85510:	0000000d 	.word	0x0000000d
   85514:	55530d0a 	.word	0x55530d0a
   85518:	53595342 	.word	0x53595342
   8551c:	204d4554 	.word	0x204d4554
   85520:	504d4554 	.word	0x504d4554
   85524:	54415245 	.word	0x54415245
   85528:	20455255 	.word	0x20455255
   8552c:	32205349 	.word	0x32205349
   85530:	0a432032 	.word	0x0a432032
   85534:	0000000d 	.word	0x0000000d
   85538:	4f440d0a 	.word	0x4f440d0a
   8553c:	554f5920 	.word	0x554f5920
   85540:	4e415720 	.word	0x4e415720
   85544:	20412054 	.word	0x20412054
   85548:	43534942 	.word	0x43534942
   8554c:	3f544955 	.word	0x3f544955
   85550:	00000d0a 	.word	0x00000d0a
   85554:	0001c200 	.word	0x0001c200
   85558:	000000c0 	.word	0x000000c0
   8555c:	00000800 	.word	0x00000800
	...
   8556c:	54414857 	.word	0x54414857
   85570:	4e414320 	.word	0x4e414320
   85574:	44204920 	.word	0x44204920
   85578:	4f46204f 	.word	0x4f46204f
   8557c:	4f592052 	.word	0x4f592052
   85580:	53202c55 	.word	0x53202c55
   85584:	0a3f5249 	.word	0x0a3f5249
   85588:	0000000d 	.word	0x0000000d

0008558c <can_bit_time>:
   8558c:	02020308 02094b03 43020303 0303030a     .....K.....C....
   8559c:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   855ac:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   855bc:	05050510 06114504 47040505 06060512     .....E.....G....
   855cc:	06134304 44040606 06060714 08154604     .C.....D.....F..
   855dc:	47040606 07070716 08174404 46040708     ...G.....D.....F
   855ec:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   855fc:	00000000                                ....

00085600 <ucExpectedStackBytes.5295>:
   85600:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   85610:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   85620:	0046464f                                OFF.

00085624 <ulLED>:
   85624:	00000057 00000056 0000003b 00000055     W...V...;...U...
   85634:	00000043                                C...

00085638 <_global_impure_ptr>:
   85638:	20070010                                ... 

0008563c <_init>:
   8563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8563e:	bf00      	nop
   85640:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85642:	bc08      	pop	{r3}
   85644:	469e      	mov	lr, r3
   85646:	4770      	bx	lr

00085648 <__init_array_start>:
   85648:	000853e1 	.word	0x000853e1

0008564c <__frame_dummy_init_array_entry>:
   8564c:	00080119                                ....

00085650 <_fini>:
   85650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85652:	bf00      	nop
   85654:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85656:	bc08      	pop	{r3}
   85658:	469e      	mov	lr, r3
   8565a:	4770      	bx	lr

0008565c <__fini_array_start>:
   8565c:	000800f5 	.word	0x000800f5
