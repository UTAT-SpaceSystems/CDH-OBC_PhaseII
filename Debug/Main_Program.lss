
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f6c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00086f6c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a2f0  20070438  000873a4  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a728  00091694  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fb4e  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cec  00000000  00000000  0002000a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006490  00000000  00000000  00022cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000011a8  00000000  00000000  00029186  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fd8  00000000  00000000  0002a32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b8a8  00000000  00000000  0002b306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015fc3  00000000  00000000  00046bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068478  00000000  00000000  0005cb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003950  00000000  00000000  000c4fec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c728 	.word	0x2007c728
   80004:	00082d81 	.word	0x00082d81
   80008:	00082d79 	.word	0x00082d79
   8000c:	00082d79 	.word	0x00082d79
   80010:	00082d79 	.word	0x00082d79
   80014:	00082d79 	.word	0x00082d79
   80018:	00082d79 	.word	0x00082d79
	...
   8002c:	00083229 	.word	0x00083229
   80030:	00082d79 	.word	0x00082d79
   80034:	00000000 	.word	0x00000000
   80038:	000833ed 	.word	0x000833ed
   8003c:	00083431 	.word	0x00083431
   80040:	00082d79 	.word	0x00082d79
   80044:	00082d79 	.word	0x00082d79
   80048:	00082d79 	.word	0x00082d79
   8004c:	00082d79 	.word	0x00082d79
   80050:	0008647d 	.word	0x0008647d
   80054:	00082d79 	.word	0x00082d79
   80058:	00082d79 	.word	0x00082d79
   8005c:	00082d79 	.word	0x00082d79
   80060:	00082d79 	.word	0x00082d79
   80064:	00082d79 	.word	0x00082d79
   80068:	00000000 	.word	0x00000000
   8006c:	00082701 	.word	0x00082701
   80070:	00082719 	.word	0x00082719
   80074:	00082731 	.word	0x00082731
   80078:	00082749 	.word	0x00082749
	...
   80084:	000810e5 	.word	0x000810e5
   80088:	00082d79 	.word	0x00082d79
   8008c:	00082d79 	.word	0x00082d79
   80090:	00082d79 	.word	0x00082d79
   80094:	00082d79 	.word	0x00082d79
   80098:	00082d79 	.word	0x00082d79
   8009c:	00082d79 	.word	0x00082d79
   800a0:	00080e09 	.word	0x00080e09
   800a4:	00000000 	.word	0x00000000
   800a8:	00082d79 	.word	0x00082d79
   800ac:	00082d79 	.word	0x00082d79
   800b0:	00082d79 	.word	0x00082d79
   800b4:	00082d79 	.word	0x00082d79
   800b8:	00082d79 	.word	0x00082d79
   800bc:	00082d79 	.word	0x00082d79
   800c0:	00082d79 	.word	0x00082d79
   800c4:	00082d79 	.word	0x00082d79
   800c8:	00082d79 	.word	0x00082d79
   800cc:	00082d79 	.word	0x00082d79
   800d0:	00082d79 	.word	0x00082d79
   800d4:	00082d79 	.word	0x00082d79
   800d8:	00082d79 	.word	0x00082d79
   800dc:	00082d79 	.word	0x00082d79
   800e0:	00082d79 	.word	0x00082d79
   800e4:	00082d79 	.word	0x00082d79
   800e8:	00082d79 	.word	0x00082d79
   800ec:	000857c5 	.word	0x000857c5
   800f0:	000856d5 	.word	0x000856d5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00086f6c 	.word	0x00086f6c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086f6c 	.word	0x00086f6c
   8013c:	2007043c 	.word	0x2007043c
   80140:	00086f6c 	.word	0x00086f6c
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	000829cd 	.word	0x000829cd

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80280:	b580      	push	{r7, lr}
   80282:	b084      	sub	sp, #16
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
   80288:	8079      	strh	r1, [r7, #2]
   8028a:	707a      	strb	r2, [r7, #1]
   8028c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8028e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80292:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80294:	e006      	b.n	802a4 <spi_write+0x24>
		if (!timeout--) {
   80296:	68fb      	ldr	r3, [r7, #12]
   80298:	1e5a      	subs	r2, r3, #1
   8029a:	60fa      	str	r2, [r7, #12]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d101      	bne.n	802a4 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   802a0:	2301      	movs	r3, #1
   802a2:	e023      	b.n	802ec <spi_write+0x6c>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	691b      	ldr	r3, [r3, #16]
   802a8:	f003 0302 	and.w	r3, r3, #2
   802ac:	2b00      	cmp	r3, #0
   802ae:	d0f2      	beq.n	80296 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   802b0:	6878      	ldr	r0, [r7, #4]
   802b2:	4b11      	ldr	r3, [pc, #68]	; (802f8 <spi_write+0x78>)
   802b4:	4798      	blx	r3
   802b6:	4603      	mov	r3, r0
   802b8:	2b00      	cmp	r3, #0
   802ba:	d00e      	beq.n	802da <spi_write+0x5a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   802bc:	887a      	ldrh	r2, [r7, #2]
   802be:	787b      	ldrb	r3, [r7, #1]
   802c0:	041b      	lsls	r3, r3, #16
   802c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   802c6:	4313      	orrs	r3, r2
   802c8:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   802ca:	783b      	ldrb	r3, [r7, #0]
   802cc:	2b00      	cmp	r3, #0
   802ce:	d006      	beq.n	802de <spi_write+0x5e>
			value |= SPI_TDR_LASTXFER;
   802d0:	68bb      	ldr	r3, [r7, #8]
   802d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802d6:	60bb      	str	r3, [r7, #8]
   802d8:	e001      	b.n	802de <spi_write+0x5e>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   802da:	887b      	ldrh	r3, [r7, #2]
   802dc:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802de:	687b      	ldr	r3, [r7, #4]
   802e0:	68ba      	ldr	r2, [r7, #8]
   802e2:	60da      	str	r2, [r3, #12]
	
	pio_toggle_pin(LED0_GPIO);
   802e4:	203b      	movs	r0, #59	; 0x3b
   802e6:	4b05      	ldr	r3, [pc, #20]	; (802fc <spi_write+0x7c>)
   802e8:	4798      	blx	r3

	return SPI_OK;
   802ea:	2300      	movs	r3, #0
   802ec:	b25b      	sxtb	r3, r3
}
   802ee:	4618      	mov	r0, r3
   802f0:	3710      	adds	r7, #16
   802f2:	46bd      	mov	sp, r7
   802f4:	bd80      	pop	{r7, pc}
   802f6:	bf00      	nop
   802f8:	00080149 	.word	0x00080149
   802fc:	000823e1 	.word	0x000823e1

00080300 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80300:	b480      	push	{r7}
   80302:	b085      	sub	sp, #20
   80304:	af00      	add	r7, sp, #0
   80306:	60f8      	str	r0, [r7, #12]
   80308:	60b9      	str	r1, [r7, #8]
   8030a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8030c:	687b      	ldr	r3, [r7, #4]
   8030e:	2b00      	cmp	r3, #0
   80310:	d00c      	beq.n	8032c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80312:	68fb      	ldr	r3, [r7, #12]
   80314:	68ba      	ldr	r2, [r7, #8]
   80316:	320c      	adds	r2, #12
   80318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8031c:	f043 0101 	orr.w	r1, r3, #1
   80320:	68fb      	ldr	r3, [r7, #12]
   80322:	68ba      	ldr	r2, [r7, #8]
   80324:	320c      	adds	r2, #12
   80326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8032a:	e00b      	b.n	80344 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8032c:	68fb      	ldr	r3, [r7, #12]
   8032e:	68ba      	ldr	r2, [r7, #8]
   80330:	320c      	adds	r2, #12
   80332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80336:	f023 0101 	bic.w	r1, r3, #1
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	68ba      	ldr	r2, [r7, #8]
   8033e:	320c      	adds	r2, #12
   80340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80344:	3714      	adds	r7, #20
   80346:	46bd      	mov	sp, r7
   80348:	f85d 7b04 	ldr.w	r7, [sp], #4
   8034c:	4770      	bx	lr
   8034e:	bf00      	nop

00080350 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80350:	b480      	push	{r7}
   80352:	b085      	sub	sp, #20
   80354:	af00      	add	r7, sp, #0
   80356:	60f8      	str	r0, [r7, #12]
   80358:	60b9      	str	r1, [r7, #8]
   8035a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8035c:	687b      	ldr	r3, [r7, #4]
   8035e:	2b00      	cmp	r3, #0
   80360:	d00c      	beq.n	8037c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80362:	68fb      	ldr	r3, [r7, #12]
   80364:	68ba      	ldr	r2, [r7, #8]
   80366:	320c      	adds	r2, #12
   80368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8036c:	f043 0102 	orr.w	r1, r3, #2
   80370:	68fb      	ldr	r3, [r7, #12]
   80372:	68ba      	ldr	r2, [r7, #8]
   80374:	320c      	adds	r2, #12
   80376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8037a:	e00b      	b.n	80394 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8037c:	68fb      	ldr	r3, [r7, #12]
   8037e:	68ba      	ldr	r2, [r7, #8]
   80380:	320c      	adds	r2, #12
   80382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80386:	f023 0102 	bic.w	r1, r3, #2
   8038a:	68fb      	ldr	r3, [r7, #12]
   8038c:	68ba      	ldr	r2, [r7, #8]
   8038e:	320c      	adds	r2, #12
   80390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80394:	3714      	adds	r7, #20
   80396:	46bd      	mov	sp, r7
   80398:	f85d 7b04 	ldr.w	r7, [sp], #4
   8039c:	4770      	bx	lr
   8039e:	bf00      	nop

000803a0 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   803a0:	b480      	push	{r7}
   803a2:	b085      	sub	sp, #20
   803a4:	af00      	add	r7, sp, #0
   803a6:	60f8      	str	r0, [r7, #12]
   803a8:	60b9      	str	r1, [r7, #8]
   803aa:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   803ac:	687b      	ldr	r3, [r7, #4]
   803ae:	2b04      	cmp	r3, #4
   803b0:	d118      	bne.n	803e4 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803b2:	68fb      	ldr	r3, [r7, #12]
   803b4:	68ba      	ldr	r2, [r7, #8]
   803b6:	320c      	adds	r2, #12
   803b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803bc:	f023 0108 	bic.w	r1, r3, #8
   803c0:	68fb      	ldr	r3, [r7, #12]
   803c2:	68ba      	ldr	r2, [r7, #8]
   803c4:	320c      	adds	r2, #12
   803c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   803ca:	68fb      	ldr	r3, [r7, #12]
   803cc:	68ba      	ldr	r2, [r7, #8]
   803ce:	320c      	adds	r2, #12
   803d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803d4:	f043 0104 	orr.w	r1, r3, #4
   803d8:	68fb      	ldr	r3, [r7, #12]
   803da:	68ba      	ldr	r2, [r7, #8]
   803dc:	320c      	adds	r2, #12
   803de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   803e2:	e02a      	b.n	8043a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   803e4:	687b      	ldr	r3, [r7, #4]
   803e6:	2b00      	cmp	r3, #0
   803e8:	d118      	bne.n	8041c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803ea:	68fb      	ldr	r3, [r7, #12]
   803ec:	68ba      	ldr	r2, [r7, #8]
   803ee:	320c      	adds	r2, #12
   803f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803f4:	f023 0108 	bic.w	r1, r3, #8
   803f8:	68fb      	ldr	r3, [r7, #12]
   803fa:	68ba      	ldr	r2, [r7, #8]
   803fc:	320c      	adds	r2, #12
   803fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80402:	68fb      	ldr	r3, [r7, #12]
   80404:	68ba      	ldr	r2, [r7, #8]
   80406:	320c      	adds	r2, #12
   80408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8040c:	f023 0104 	bic.w	r1, r3, #4
   80410:	68fb      	ldr	r3, [r7, #12]
   80412:	68ba      	ldr	r2, [r7, #8]
   80414:	320c      	adds	r2, #12
   80416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8041a:	e00e      	b.n	8043a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8041c:	687b      	ldr	r3, [r7, #4]
   8041e:	2b08      	cmp	r3, #8
   80420:	d10b      	bne.n	8043a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80422:	68fb      	ldr	r3, [r7, #12]
   80424:	68ba      	ldr	r2, [r7, #8]
   80426:	320c      	adds	r2, #12
   80428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8042c:	f043 0108 	orr.w	r1, r3, #8
   80430:	68fb      	ldr	r3, [r7, #12]
   80432:	68ba      	ldr	r2, [r7, #8]
   80434:	320c      	adds	r2, #12
   80436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   8043a:	3714      	adds	r7, #20
   8043c:	46bd      	mov	sp, r7
   8043e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80442:	4770      	bx	lr

00080444 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80444:	b480      	push	{r7}
   80446:	b085      	sub	sp, #20
   80448:	af00      	add	r7, sp, #0
   8044a:	60f8      	str	r0, [r7, #12]
   8044c:	60b9      	str	r1, [r7, #8]
   8044e:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80450:	68fb      	ldr	r3, [r7, #12]
   80452:	68ba      	ldr	r2, [r7, #8]
   80454:	320c      	adds	r2, #12
   80456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8045a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8045e:	68fb      	ldr	r3, [r7, #12]
   80460:	68ba      	ldr	r2, [r7, #8]
   80462:	320c      	adds	r2, #12
   80464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80468:	68fb      	ldr	r3, [r7, #12]
   8046a:	68ba      	ldr	r2, [r7, #8]
   8046c:	320c      	adds	r2, #12
   8046e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80472:	687b      	ldr	r3, [r7, #4]
   80474:	ea42 0103 	orr.w	r1, r2, r3
   80478:	68fb      	ldr	r3, [r7, #12]
   8047a:	68ba      	ldr	r2, [r7, #8]
   8047c:	320c      	adds	r2, #12
   8047e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80482:	3714      	adds	r7, #20
   80484:	46bd      	mov	sp, r7
   80486:	f85d 7b04 	ldr.w	r7, [sp], #4
   8048a:	4770      	bx	lr

0008048c <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   8048c:	b480      	push	{r7}
   8048e:	b085      	sub	sp, #20
   80490:	af00      	add	r7, sp, #0
   80492:	6078      	str	r0, [r7, #4]
   80494:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   80496:	683a      	ldr	r2, [r7, #0]
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	4413      	add	r3, r2
   8049c:	1e5a      	subs	r2, r3, #1
   8049e:	687b      	ldr	r3, [r7, #4]
   804a0:	fbb2 f3f3 	udiv	r3, r2, r3
   804a4:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   804a6:	68fb      	ldr	r3, [r7, #12]
   804a8:	2b00      	cmp	r3, #0
   804aa:	dd02      	ble.n	804b2 <spi_calc_baudrate_div+0x26>
   804ac:	68fb      	ldr	r3, [r7, #12]
   804ae:	2bff      	cmp	r3, #255	; 0xff
   804b0:	dd02      	ble.n	804b8 <spi_calc_baudrate_div+0x2c>
		return -1;
   804b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   804b6:	e001      	b.n	804bc <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   804b8:	68fb      	ldr	r3, [r7, #12]
   804ba:	b29b      	uxth	r3, r3
   804bc:	b21b      	sxth	r3, r3
}
   804be:	4618      	mov	r0, r3
   804c0:	3714      	adds	r7, #20
   804c2:	46bd      	mov	sp, r7
   804c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   804c8:	4770      	bx	lr
   804ca:	bf00      	nop

000804cc <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   804cc:	b480      	push	{r7}
   804ce:	b085      	sub	sp, #20
   804d0:	af00      	add	r7, sp, #0
   804d2:	60f8      	str	r0, [r7, #12]
   804d4:	60b9      	str	r1, [r7, #8]
   804d6:	4613      	mov	r3, r2
   804d8:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	68ba      	ldr	r2, [r7, #8]
   804de:	320c      	adds	r2, #12
   804e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804e4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   804e8:	68fb      	ldr	r3, [r7, #12]
   804ea:	68ba      	ldr	r2, [r7, #8]
   804ec:	320c      	adds	r2, #12
   804ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	68ba      	ldr	r2, [r7, #8]
   804f6:	320c      	adds	r2, #12
   804f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804fc:	79fb      	ldrb	r3, [r7, #7]
   804fe:	021b      	lsls	r3, r3, #8
   80500:	b29b      	uxth	r3, r3
   80502:	ea42 0103 	orr.w	r1, r2, r3
   80506:	68fb      	ldr	r3, [r7, #12]
   80508:	68ba      	ldr	r2, [r7, #8]
   8050a:	320c      	adds	r2, #12
   8050c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80510:	3714      	adds	r7, #20
   80512:	46bd      	mov	sp, r7
   80514:	f85d 7b04 	ldr.w	r7, [sp], #4
   80518:	4770      	bx	lr
   8051a:	bf00      	nop

0008051c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8051c:	b480      	push	{r7}
   8051e:	b085      	sub	sp, #20
   80520:	af00      	add	r7, sp, #0
   80522:	60f8      	str	r0, [r7, #12]
   80524:	60b9      	str	r1, [r7, #8]
   80526:	71fa      	strb	r2, [r7, #7]
   80528:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	68ba      	ldr	r2, [r7, #8]
   8052e:	320c      	adds	r2, #12
   80530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80534:	b299      	uxth	r1, r3
   80536:	68fb      	ldr	r3, [r7, #12]
   80538:	68ba      	ldr	r2, [r7, #8]
   8053a:	320c      	adds	r2, #12
   8053c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80540:	68fb      	ldr	r3, [r7, #12]
   80542:	68ba      	ldr	r2, [r7, #8]
   80544:	320c      	adds	r2, #12
   80546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	041b      	lsls	r3, r3, #16
   8054e:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   80552:	79bb      	ldrb	r3, [r7, #6]
   80554:	061b      	lsls	r3, r3, #24
   80556:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80558:	ea42 0103 	orr.w	r1, r2, r3
   8055c:	68fb      	ldr	r3, [r7, #12]
   8055e:	68ba      	ldr	r2, [r7, #8]
   80560:	320c      	adds	r2, #12
   80562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80566:	3714      	adds	r7, #20
   80568:	46bd      	mov	sp, r7
   8056a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8056e:	4770      	bx	lr

00080570 <fletcher32>:
/* Standard includes */
#include <stdio.h>
#include <stdint.h>

uint32_t fletcher32( uint16_t const *data, size_t words )
{
   80570:	b480      	push	{r7}
   80572:	b087      	sub	sp, #28
   80574:	af00      	add	r7, sp, #0
   80576:	6078      	str	r0, [r7, #4]
   80578:	6039      	str	r1, [r7, #0]
	/* sum1 and sum2 should never be 0 */
	uint32_t sum1 = 0xffff;
   8057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8057e:	617b      	str	r3, [r7, #20]
	uint32_t sum2 = 0xffff;
   80580:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80584:	613b      	str	r3, [r7, #16]
	
	
	while (words)
   80586:	e027      	b.n	805d8 <fletcher32+0x68>
	{
		/* 359 is the largest n such that ( n(n+1) / 2 ) will not cause an overflow in sum2 */
		unsigned len = words > 359 ? 359 : words;
   80588:	683a      	ldr	r2, [r7, #0]
   8058a:	f240 1367 	movw	r3, #359	; 0x167
   8058e:	429a      	cmp	r2, r3
   80590:	bf38      	it	cc
   80592:	4613      	movcc	r3, r2
   80594:	60fb      	str	r3, [r7, #12]
		words -= len;
   80596:	683a      	ldr	r2, [r7, #0]
   80598:	68fb      	ldr	r3, [r7, #12]
   8059a:	1ad3      	subs	r3, r2, r3
   8059c:	603b      	str	r3, [r7, #0]

		do {
			sum2 += sum1 += *data++;
   8059e:	687b      	ldr	r3, [r7, #4]
   805a0:	1c9a      	adds	r2, r3, #2
   805a2:	607a      	str	r2, [r7, #4]
   805a4:	881b      	ldrh	r3, [r3, #0]
   805a6:	697a      	ldr	r2, [r7, #20]
   805a8:	4413      	add	r3, r2
   805aa:	617b      	str	r3, [r7, #20]
   805ac:	693a      	ldr	r2, [r7, #16]
   805ae:	697b      	ldr	r3, [r7, #20]
   805b0:	4413      	add	r3, r2
   805b2:	613b      	str	r3, [r7, #16]
		} while (--len);
   805b4:	68fb      	ldr	r3, [r7, #12]
   805b6:	3b01      	subs	r3, #1
   805b8:	60fb      	str	r3, [r7, #12]
   805ba:	68fb      	ldr	r3, [r7, #12]
   805bc:	2b00      	cmp	r3, #0
   805be:	d1ee      	bne.n	8059e <fletcher32+0x2e>
		
		sum1 = (sum1 & 0xffff) + (sum1 >> 16);
   805c0:	697b      	ldr	r3, [r7, #20]
   805c2:	b29a      	uxth	r2, r3
   805c4:	697b      	ldr	r3, [r7, #20]
   805c6:	0c1b      	lsrs	r3, r3, #16
   805c8:	4413      	add	r3, r2
   805ca:	617b      	str	r3, [r7, #20]
		sum2 = (sum2 & 0xffff) + (sum2 >> 16);
   805cc:	693b      	ldr	r3, [r7, #16]
   805ce:	b29a      	uxth	r2, r3
   805d0:	693b      	ldr	r3, [r7, #16]
   805d2:	0c1b      	lsrs	r3, r3, #16
   805d4:	4413      	add	r3, r2
   805d6:	613b      	str	r3, [r7, #16]
	/* sum1 and sum2 should never be 0 */
	uint32_t sum1 = 0xffff;
	uint32_t sum2 = 0xffff;
	
	
	while (words)
   805d8:	683b      	ldr	r3, [r7, #0]
   805da:	2b00      	cmp	r3, #0
   805dc:	d1d4      	bne.n	80588 <fletcher32+0x18>
		
		sum1 = (sum1 & 0xffff) + (sum1 >> 16);
		sum2 = (sum2 & 0xffff) + (sum2 >> 16);
	}
	/* Second reduction step to reduce sums to 16 bits to yield a final uint32_t */
	sum1 = (sum1 & 0xffff) + (sum1 >> 16);
   805de:	697b      	ldr	r3, [r7, #20]
   805e0:	b29a      	uxth	r2, r3
   805e2:	697b      	ldr	r3, [r7, #20]
   805e4:	0c1b      	lsrs	r3, r3, #16
   805e6:	4413      	add	r3, r2
   805e8:	617b      	str	r3, [r7, #20]
	sum2 = (sum2 & 0xffff) + (sum2 >> 16);
   805ea:	693b      	ldr	r3, [r7, #16]
   805ec:	b29a      	uxth	r2, r3
   805ee:	693b      	ldr	r3, [r7, #16]
   805f0:	0c1b      	lsrs	r3, r3, #16
   805f2:	4413      	add	r3, r2
   805f4:	613b      	str	r3, [r7, #16]
	
	return sum2 << 16 | sum1;
   805f6:	693b      	ldr	r3, [r7, #16]
   805f8:	041a      	lsls	r2, r3, #16
   805fa:	697b      	ldr	r3, [r7, #20]
   805fc:	4313      	orrs	r3, r2
   805fe:	4618      	mov	r0, r3
   80600:	371c      	adds	r7, #28
   80602:	46bd      	mov	sp, r7
   80604:	f85d 7b04 	ldr.w	r7, [sp], #4
   80608:	4770      	bx	lr
   8060a:	bf00      	nop

0008060c <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   8060c:	b590      	push	{r4, r7, lr}
   8060e:	b085      	sub	sp, #20
   80610:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   80612:	2301      	movs	r3, #1
   80614:	9300      	str	r3, [sp, #0]
   80616:	2300      	movs	r3, #0
   80618:	9301      	str	r3, [sp, #4]
   8061a:	2300      	movs	r3, #0
   8061c:	9302      	str	r3, [sp, #8]
   8061e:	2300      	movs	r3, #0
   80620:	9303      	str	r3, [sp, #12]
   80622:	4805      	ldr	r0, [pc, #20]	; (80638 <command_loop+0x2c>)
   80624:	4905      	ldr	r1, [pc, #20]	; (8063c <command_loop+0x30>)
   80626:	2282      	movs	r2, #130	; 0x82
   80628:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8062c:	4c04      	ldr	r4, [pc, #16]	; (80640 <command_loop+0x34>)
   8062e:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80630:	bf00      	nop
}
   80632:	3704      	adds	r7, #4
   80634:	46bd      	mov	sp, r7
   80636:	bd90      	pop	{r4, r7, pc}
   80638:	00080645 	.word	0x00080645
   8063c:	00086dbc 	.word	0x00086dbc
   80640:	00084145 	.word	0x00084145

00080644 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   80644:	b590      	push	{r4, r7, lr}
   80646:	b08b      	sub	sp, #44	; 0x2c
   80648:	af00      	add	r7, sp, #0
   8064a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   8064c:	687a      	ldr	r2, [r7, #4]
   8064e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80652:	429a      	cmp	r2, r3
   80654:	d002      	beq.n	8065c <prvCommandTask+0x18>
   80656:	4b2e      	ldr	r3, [pc, #184]	; (80710 <prvCommandTask+0xcc>)
   80658:	4798      	blx	r3
   8065a:	e7fe      	b.n	8065a <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 91;	//Number entered here corresponds to the number of ticks we should wait.
   8065c:	235b      	movs	r3, #91	; 0x5b
   8065e:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   80660:	f04f 33ff 	mov.w	r3, #4294967295
   80664:	623b      	str	r3, [r7, #32]
	high = high_command_generator(OBC_ID, MT_COM, REQ_RESPONSE);
   80666:	2003      	movs	r0, #3
   80668:	2102      	movs	r1, #2
   8066a:	2201      	movs	r2, #1
   8066c:	4b29      	ldr	r3, [pc, #164]	; (80714 <prvCommandTask+0xd0>)
   8066e:	4798      	blx	r3
   80670:	61f8      	str	r0, [r7, #28]
	PRIORITY = COMMAND_PRIO;
   80672:	2319      	movs	r3, #25
   80674:	61bb      	str	r3, [r7, #24]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		if (xSemaphoreTake(Can1_Mutex, (TickType_t) 0) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   80676:	4b28      	ldr	r3, [pc, #160]	; (80718 <prvCommandTask+0xd4>)
   80678:	681b      	ldr	r3, [r3, #0]
   8067a:	4618      	mov	r0, r3
   8067c:	2100      	movs	r1, #0
   8067e:	2200      	movs	r2, #0
   80680:	2300      	movs	r3, #0
   80682:	4c26      	ldr	r4, [pc, #152]	; (8071c <prvCommandTask+0xd8>)
   80684:	47a0      	blx	r4
   80686:	4603      	mov	r3, r0
   80688:	2b01      	cmp	r3, #1
   8068a:	d136      	bne.n	806fa <prvCommandTask+0xb6>
		{
			ID = SUB1_ID0;
   8068c:	231a      	movs	r3, #26
   8068e:	617b      	str	r3, [r7, #20]
			x = send_can_command(low, high, ID, PRIORITY);				// Request response from COMS.
   80690:	6a38      	ldr	r0, [r7, #32]
   80692:	69f9      	ldr	r1, [r7, #28]
   80694:	697a      	ldr	r2, [r7, #20]
   80696:	69bb      	ldr	r3, [r7, #24]
   80698:	4c21      	ldr	r4, [pc, #132]	; (80720 <prvCommandTask+0xdc>)
   8069a:	47a0      	blx	r4
   8069c:	6138      	str	r0, [r7, #16]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   8069e:	4b21      	ldr	r3, [pc, #132]	; (80724 <prvCommandTask+0xe0>)
   806a0:	4798      	blx	r3
   806a2:	4603      	mov	r3, r0
   806a4:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   806a6:	f107 030c 	add.w	r3, r7, #12
   806aa:	4618      	mov	r0, r3
   806ac:	2101      	movs	r1, #1
   806ae:	4b1e      	ldr	r3, [pc, #120]	; (80728 <prvCommandTask+0xe4>)
   806b0:	4798      	blx	r3
			
			ID = SUB0_ID0;
   806b2:	2314      	movs	r3, #20
   806b4:	617b      	str	r3, [r7, #20]
			x = send_can_command(low, high, ID, PRIORITY);				// Request response from EPS.
   806b6:	6a38      	ldr	r0, [r7, #32]
   806b8:	69f9      	ldr	r1, [r7, #28]
   806ba:	697a      	ldr	r2, [r7, #20]
   806bc:	69bb      	ldr	r3, [r7, #24]
   806be:	4c18      	ldr	r4, [pc, #96]	; (80720 <prvCommandTask+0xdc>)
   806c0:	47a0      	blx	r4
   806c2:	6138      	str	r0, [r7, #16]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   806c4:	4b17      	ldr	r3, [pc, #92]	; (80724 <prvCommandTask+0xe0>)
   806c6:	4798      	blx	r3
   806c8:	4603      	mov	r3, r0
   806ca:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   806cc:	f107 030c 	add.w	r3, r7, #12
   806d0:	4618      	mov	r0, r3
   806d2:	2101      	movs	r1, #1
   806d4:	4b14      	ldr	r3, [pc, #80]	; (80728 <prvCommandTask+0xe4>)
   806d6:	4798      	blx	r3
			
			ID = SUB2_ID0;
   806d8:	2320      	movs	r3, #32
   806da:	617b      	str	r3, [r7, #20]
			x = send_can_command(low, high, ID, PRIORITY);				// Request response from PAY.
   806dc:	6a38      	ldr	r0, [r7, #32]
   806de:	69f9      	ldr	r1, [r7, #28]
   806e0:	697a      	ldr	r2, [r7, #20]
   806e2:	69bb      	ldr	r3, [r7, #24]
   806e4:	4c0e      	ldr	r4, [pc, #56]	; (80720 <prvCommandTask+0xdc>)
   806e6:	47a0      	blx	r4
   806e8:	6138      	str	r0, [r7, #16]
			xSemaphoreGive(Can1_Mutex);									// Release CAN1 Mutex
   806ea:	4b0b      	ldr	r3, [pc, #44]	; (80718 <prvCommandTask+0xd4>)
   806ec:	681b      	ldr	r3, [r3, #0]
   806ee:	4618      	mov	r0, r3
   806f0:	2100      	movs	r1, #0
   806f2:	2200      	movs	r2, #0
   806f4:	2300      	movs	r3, #0
   806f6:	4c0d      	ldr	r4, [pc, #52]	; (8072c <prvCommandTask+0xe8>)
   806f8:	47a0      	blx	r4
		}
		
		xLastWakeTime = xTaskGetTickCount();
   806fa:	4b0a      	ldr	r3, [pc, #40]	; (80724 <prvCommandTask+0xe0>)
   806fc:	4798      	blx	r3
   806fe:	4603      	mov	r3, r0
   80700:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80702:	f107 030c 	add.w	r3, r7, #12
   80706:	4618      	mov	r0, r3
   80708:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8070a:	4b07      	ldr	r3, [pc, #28]	; (80728 <prvCommandTask+0xe4>)
   8070c:	4798      	blx	r3
	}
   8070e:	e7b2      	b.n	80676 <prvCommandTask+0x32>
   80710:	000833d1 	.word	0x000833d1
   80714:	0008618d 	.word	0x0008618d
   80718:	2007a6ac 	.word	0x2007a6ac
   8071c:	00083c99 	.word	0x00083c99
   80720:	00085ba1 	.word	0x00085ba1
   80724:	00084581 	.word	0x00084581
   80728:	000842c5 	.word	0x000842c5
   8072c:	000839d9 	.word	0x000839d9

00080730 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80730:	b590      	push	{r4, r7, lr}
   80732:	b085      	sub	sp, #20
   80734:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   80736:	2301      	movs	r3, #1
   80738:	9300      	str	r3, [sp, #0]
   8073a:	2300      	movs	r3, #0
   8073c:	9301      	str	r3, [sp, #4]
   8073e:	2300      	movs	r3, #0
   80740:	9302      	str	r3, [sp, #8]
   80742:	2300      	movs	r3, #0
   80744:	9303      	str	r3, [sp, #12]
   80746:	4805      	ldr	r0, [pc, #20]	; (8075c <data_test+0x2c>)
   80748:	4905      	ldr	r1, [pc, #20]	; (80760 <data_test+0x30>)
   8074a:	2282      	movs	r2, #130	; 0x82
   8074c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80750:	4c04      	ldr	r4, [pc, #16]	; (80764 <data_test+0x34>)
   80752:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80754:	bf00      	nop
}
   80756:	3704      	adds	r7, #4
   80758:	46bd      	mov	sp, r7
   8075a:	bd90      	pop	{r4, r7, pc}
   8075c:	00080769 	.word	0x00080769
   80760:	00086dc0 	.word	0x00086dc0
   80764:	00084145 	.word	0x00084145

00080768 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   80768:	b590      	push	{r4, r7, lr}
   8076a:	b08b      	sub	sp, #44	; 0x2c
   8076c:	af00      	add	r7, sp, #0
   8076e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   80770:	687a      	ldr	r2, [r7, #4]
   80772:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80776:	429a      	cmp	r2, r3
   80778:	d002      	beq.n	80780 <prvDataTask+0x18>
   8077a:	4b4e      	ldr	r3, [pc, #312]	; (808b4 <prvDataTask+0x14c>)
   8077c:	4798      	blx	r3
   8077e:	e7fe      	b.n	8077e <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 100;	//Number entered here corresponds to the number of ticks we should wait.
   80780:	2364      	movs	r3, #100	; 0x64
   80782:	627b      	str	r3, [r7, #36]	; 0x24
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	ID = SUB0_ID0;
   80784:	2314      	movs	r3, #20
   80786:	623b      	str	r3, [r7, #32]
	PRIORITY = DATA_PRIO;
   80788:	230a      	movs	r3, #10
   8078a:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		low = DATA_REQUEST;
   8078c:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   80790:	613b      	str	r3, [r7, #16]
		high = high_command_generator(OBC_ID, MT_COM, REQ_DATA);
   80792:	2003      	movs	r0, #3
   80794:	2102      	movs	r1, #2
   80796:	2202      	movs	r2, #2
   80798:	4b47      	ldr	r3, [pc, #284]	; (808b8 <prvDataTask+0x150>)
   8079a:	4798      	blx	r3
   8079c:	4603      	mov	r3, r0
   8079e:	60fb      	str	r3, [r7, #12]
		
		if (xSemaphoreTake(Can1_Mutex, (TickType_t) 1) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   807a0:	4b46      	ldr	r3, [pc, #280]	; (808bc <prvDataTask+0x154>)
   807a2:	681b      	ldr	r3, [r3, #0]
   807a4:	4618      	mov	r0, r3
   807a6:	2100      	movs	r1, #0
   807a8:	2201      	movs	r2, #1
   807aa:	2300      	movs	r3, #0
   807ac:	4c44      	ldr	r4, [pc, #272]	; (808c0 <prvDataTask+0x158>)
   807ae:	47a0      	blx	r4
   807b0:	4603      	mov	r3, r0
   807b2:	2b01      	cmp	r3, #1
   807b4:	d13c      	bne.n	80830 <prvDataTask+0xc8>
		{
			ID = SUB1_ID0;
   807b6:	231a      	movs	r3, #26
   807b8:	623b      	str	r3, [r7, #32]
			x = send_can_command(low, high, ID, PRIORITY);				// Request data from COMS.
   807ba:	693a      	ldr	r2, [r7, #16]
   807bc:	68fb      	ldr	r3, [r7, #12]
   807be:	4610      	mov	r0, r2
   807c0:	4619      	mov	r1, r3
   807c2:	6a3a      	ldr	r2, [r7, #32]
   807c4:	69fb      	ldr	r3, [r7, #28]
   807c6:	4c3f      	ldr	r4, [pc, #252]	; (808c4 <prvDataTask+0x15c>)
   807c8:	47a0      	blx	r4
   807ca:	61b8      	str	r0, [r7, #24]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   807cc:	4b3e      	ldr	r3, [pc, #248]	; (808c8 <prvDataTask+0x160>)
   807ce:	4798      	blx	r3
   807d0:	4603      	mov	r3, r0
   807d2:	617b      	str	r3, [r7, #20]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   807d4:	f107 0314 	add.w	r3, r7, #20
   807d8:	4618      	mov	r0, r3
   807da:	2101      	movs	r1, #1
   807dc:	4b3b      	ldr	r3, [pc, #236]	; (808cc <prvDataTask+0x164>)
   807de:	4798      	blx	r3
			
			ID = SUB0_ID0;
   807e0:	2314      	movs	r3, #20
   807e2:	623b      	str	r3, [r7, #32]
			x = send_can_command(low, high, ID, PRIORITY);				// Request data from EPS.
   807e4:	693a      	ldr	r2, [r7, #16]
   807e6:	68fb      	ldr	r3, [r7, #12]
   807e8:	4610      	mov	r0, r2
   807ea:	4619      	mov	r1, r3
   807ec:	6a3a      	ldr	r2, [r7, #32]
   807ee:	69fb      	ldr	r3, [r7, #28]
   807f0:	4c34      	ldr	r4, [pc, #208]	; (808c4 <prvDataTask+0x15c>)
   807f2:	47a0      	blx	r4
   807f4:	61b8      	str	r0, [r7, #24]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   807f6:	4b34      	ldr	r3, [pc, #208]	; (808c8 <prvDataTask+0x160>)
   807f8:	4798      	blx	r3
   807fa:	4603      	mov	r3, r0
   807fc:	617b      	str	r3, [r7, #20]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   807fe:	f107 0314 	add.w	r3, r7, #20
   80802:	4618      	mov	r0, r3
   80804:	2101      	movs	r1, #1
   80806:	4b31      	ldr	r3, [pc, #196]	; (808cc <prvDataTask+0x164>)
   80808:	4798      	blx	r3
			
			ID = SUB2_ID0;
   8080a:	2320      	movs	r3, #32
   8080c:	623b      	str	r3, [r7, #32]
			x = send_can_command(low, high, ID, PRIORITY);				// Request data from PAY.
   8080e:	693a      	ldr	r2, [r7, #16]
   80810:	68fb      	ldr	r3, [r7, #12]
   80812:	4610      	mov	r0, r2
   80814:	4619      	mov	r1, r3
   80816:	6a3a      	ldr	r2, [r7, #32]
   80818:	69fb      	ldr	r3, [r7, #28]
   8081a:	4c2a      	ldr	r4, [pc, #168]	; (808c4 <prvDataTask+0x15c>)
   8081c:	47a0      	blx	r4
   8081e:	61b8      	str	r0, [r7, #24]
			xSemaphoreGive(Can1_Mutex);									// Release CAN1 Mutex
   80820:	4b26      	ldr	r3, [pc, #152]	; (808bc <prvDataTask+0x154>)
   80822:	681b      	ldr	r3, [r3, #0]
   80824:	4618      	mov	r0, r3
   80826:	2100      	movs	r1, #0
   80828:	2200      	movs	r2, #0
   8082a:	2300      	movs	r3, #0
   8082c:	4c28      	ldr	r4, [pc, #160]	; (808d0 <prvDataTask+0x168>)
   8082e:	47a0      	blx	r4
		}
							
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 100 ticks.
   80830:	4b25      	ldr	r3, [pc, #148]	; (808c8 <prvDataTask+0x160>)
   80832:	4798      	blx	r3
   80834:	4603      	mov	r3, r0
   80836:	617b      	str	r3, [r7, #20]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80838:	f107 0314 	add.w	r3, r7, #20
   8083c:	4618      	mov	r0, r3
   8083e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80840:	4b22      	ldr	r3, [pc, #136]	; (808cc <prvDataTask+0x164>)
   80842:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   80844:	4b23      	ldr	r3, [pc, #140]	; (808d4 <prvDataTask+0x16c>)
   80846:	781b      	ldrb	r3, [r3, #0]
   80848:	2b00      	cmp	r3, #0
   8084a:	d016      	beq.n	8087a <prvDataTask+0x112>
		{
			x = read_can_data(&high, &low, 1234);
   8084c:	f107 020c 	add.w	r2, r7, #12
   80850:	f107 0310 	add.w	r3, r7, #16
   80854:	4610      	mov	r0, r2
   80856:	4619      	mov	r1, r3
   80858:	f240 42d2 	movw	r2, #1234	; 0x4d2
   8085c:	4b1e      	ldr	r3, [pc, #120]	; (808d8 <prvDataTask+0x170>)
   8085e:	4798      	blx	r3
   80860:	61b8      	str	r0, [r7, #24]
			// ** Modify this code so that it checks the small types first.
			if(x)
   80862:	69bb      	ldr	r3, [r7, #24]
   80864:	2b00      	cmp	r3, #0
   80866:	d008      	beq.n	8087a <prvDataTask+0x112>
			{
				glob_stored_data[1] = high;
   80868:	68fa      	ldr	r2, [r7, #12]
   8086a:	4b1c      	ldr	r3, [pc, #112]	; (808dc <prvDataTask+0x174>)
   8086c:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   8086e:	693a      	ldr	r2, [r7, #16]
   80870:	4b1a      	ldr	r3, [pc, #104]	; (808dc <prvDataTask+0x174>)
   80872:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   80874:	4b17      	ldr	r3, [pc, #92]	; (808d4 <prvDataTask+0x16c>)
   80876:	2200      	movs	r2, #0
   80878:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comsf)
   8087a:	4b19      	ldr	r3, [pc, #100]	; (808e0 <prvDataTask+0x178>)
   8087c:	781b      	ldrb	r3, [r3, #0]
   8087e:	2b00      	cmp	r3, #0
   80880:	d017      	beq.n	808b2 <prvDataTask+0x14a>
		{
			x = read_can_msg(&high, &low, 1234);
   80882:	f107 020c 	add.w	r2, r7, #12
   80886:	f107 0310 	add.w	r3, r7, #16
   8088a:	4610      	mov	r0, r2
   8088c:	4619      	mov	r1, r3
   8088e:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80892:	4b14      	ldr	r3, [pc, #80]	; (808e4 <prvDataTask+0x17c>)
   80894:	4798      	blx	r3
   80896:	61b8      	str	r0, [r7, #24]

			if(x)
   80898:	69bb      	ldr	r3, [r7, #24]
   8089a:	2b00      	cmp	r3, #0
   8089c:	d009      	beq.n	808b2 <prvDataTask+0x14a>
			{
				glob_stored_message[1] = high;
   8089e:	68fa      	ldr	r2, [r7, #12]
   808a0:	4b11      	ldr	r3, [pc, #68]	; (808e8 <prvDataTask+0x180>)
   808a2:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   808a4:	693a      	ldr	r2, [r7, #16]
   808a6:	4b10      	ldr	r3, [pc, #64]	; (808e8 <prvDataTask+0x180>)
   808a8:	601a      	str	r2, [r3, #0]
				glob_comsf = 0;
   808aa:	4b0d      	ldr	r3, [pc, #52]	; (808e0 <prvDataTask+0x178>)
   808ac:	2200      	movs	r2, #0
   808ae:	701a      	strb	r2, [r3, #0]
			}
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   808b0:	e76c      	b.n	8078c <prvDataTask+0x24>
   808b2:	e76b      	b.n	8078c <prvDataTask+0x24>
   808b4:	000833d1 	.word	0x000833d1
   808b8:	0008618d 	.word	0x0008618d
   808bc:	2007a6ac 	.word	0x2007a6ac
   808c0:	00083c99 	.word	0x00083c99
   808c4:	00085ba1 	.word	0x00085ba1
   808c8:	00084581 	.word	0x00084581
   808cc:	000842c5 	.word	0x000842c5
   808d0:	000839d9 	.word	0x000839d9
   808d4:	2007a670 	.word	0x2007a670
   808d8:	00085c31 	.word	0x00085c31
   808dc:	2007a644 	.word	0x2007a644
   808e0:	2007a67c 	.word	0x2007a67c
   808e4:	00085c7d 	.word	0x00085c7d
   808e8:	2007a6f4 	.word	0x2007a6f4

000808ec <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   808ec:	b590      	push	{r4, r7, lr}
   808ee:	b085      	sub	sp, #20
   808f0:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   808f2:	2301      	movs	r3, #1
   808f4:	9300      	str	r3, [sp, #0]
   808f6:	2300      	movs	r3, #0
   808f8:	9301      	str	r3, [sp, #4]
   808fa:	2300      	movs	r3, #0
   808fc:	9302      	str	r3, [sp, #8]
   808fe:	2300      	movs	r3, #0
   80900:	9303      	str	r3, [sp, #12]
   80902:	4805      	ldr	r0, [pc, #20]	; (80918 <housekeep+0x2c>)
   80904:	4905      	ldr	r1, [pc, #20]	; (8091c <housekeep+0x30>)
   80906:	2282      	movs	r2, #130	; 0x82
   80908:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8090c:	4c04      	ldr	r4, [pc, #16]	; (80920 <housekeep+0x34>)
   8090e:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80910:	bf00      	nop
}
   80912:	3704      	adds	r7, #4
   80914:	46bd      	mov	sp, r7
   80916:	bd90      	pop	{r4, r7, pc}
   80918:	00080925 	.word	0x00080925
   8091c:	00086dc4 	.word	0x00086dc4
   80920:	00084145 	.word	0x00084145

00080924 <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   80924:	b590      	push	{r4, r7, lr}
   80926:	b089      	sub	sp, #36	; 0x24
   80928:	af00      	add	r7, sp, #0
   8092a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   8092c:	687a      	ldr	r2, [r7, #4]
   8092e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80932:	429a      	cmp	r2, r3
   80934:	d002      	beq.n	8093c <prvHouseKeepTask+0x18>
   80936:	4b28      	ldr	r3, [pc, #160]	; (809d8 <prvHouseKeepTask+0xb4>)
   80938:	4798      	blx	r3
   8093a:	e7fe      	b.n	8093a <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 100;	// Number entered here corresponds to the number of ticks we should wait.
   8093c:	2364      	movs	r3, #100	; 0x64
   8093e:	61bb      	str	r3, [r7, #24]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	uint8_t ret_val, passkey = 0, addr = 0x80;
   80940:	2300      	movs	r3, #0
   80942:	77fb      	strb	r3, [r7, #31]
   80944:	2380      	movs	r3, #128	; 0x80
   80946:	75fb      	strb	r3, [r7, #23]
		
	/* @non-terminating@ */	
	for( ;; )
	{
		if (xSemaphoreTake(Can1_Mutex, (TickType_t) 1) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   80948:	4b24      	ldr	r3, [pc, #144]	; (809dc <prvHouseKeepTask+0xb8>)
   8094a:	681b      	ldr	r3, [r3, #0]
   8094c:	4618      	mov	r0, r3
   8094e:	2100      	movs	r1, #0
   80950:	2201      	movs	r2, #1
   80952:	2300      	movs	r3, #0
   80954:	4c22      	ldr	r4, [pc, #136]	; (809e0 <prvHouseKeepTask+0xbc>)
   80956:	47a0      	blx	r4
   80958:	4603      	mov	r3, r0
   8095a:	2b01      	cmp	r3, #1
   8095c:	d12d      	bne.n	809ba <prvHouseKeepTask+0x96>
		{
			ID = SUB1_ID5;
   8095e:	231f      	movs	r3, #31
   80960:	613b      	str	r3, [r7, #16]
			x = request_housekeeping(ID);								// Request housekeeping from COMS.
   80962:	6938      	ldr	r0, [r7, #16]
   80964:	4b1f      	ldr	r3, [pc, #124]	; (809e4 <prvHouseKeepTask+0xc0>)
   80966:	4798      	blx	r3
   80968:	60f8      	str	r0, [r7, #12]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   8096a:	4b1f      	ldr	r3, [pc, #124]	; (809e8 <prvHouseKeepTask+0xc4>)
   8096c:	4798      	blx	r3
   8096e:	4603      	mov	r3, r0
   80970:	60bb      	str	r3, [r7, #8]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   80972:	f107 0308 	add.w	r3, r7, #8
   80976:	4618      	mov	r0, r3
   80978:	2101      	movs	r1, #1
   8097a:	4b1c      	ldr	r3, [pc, #112]	; (809ec <prvHouseKeepTask+0xc8>)
   8097c:	4798      	blx	r3
			
			ID = SUB0_ID5;
   8097e:	2319      	movs	r3, #25
   80980:	613b      	str	r3, [r7, #16]
			x = request_housekeeping(ID);								// Request housekeeping from EPS.
   80982:	6938      	ldr	r0, [r7, #16]
   80984:	4b17      	ldr	r3, [pc, #92]	; (809e4 <prvHouseKeepTask+0xc0>)
   80986:	4798      	blx	r3
   80988:	60f8      	str	r0, [r7, #12]
			
			xLastWakeTime = xTaskGetTickCount();						// Delay for 1 tick.
   8098a:	4b17      	ldr	r3, [pc, #92]	; (809e8 <prvHouseKeepTask+0xc4>)
   8098c:	4798      	blx	r3
   8098e:	4603      	mov	r3, r0
   80990:	60bb      	str	r3, [r7, #8]
			vTaskDelayUntil(&xLastWakeTime, (TickType_t) 1);
   80992:	f107 0308 	add.w	r3, r7, #8
   80996:	4618      	mov	r0, r3
   80998:	2101      	movs	r1, #1
   8099a:	4b14      	ldr	r3, [pc, #80]	; (809ec <prvHouseKeepTask+0xc8>)
   8099c:	4798      	blx	r3
			
			ID = SUB2_ID5;
   8099e:	2325      	movs	r3, #37	; 0x25
   809a0:	613b      	str	r3, [r7, #16]
			x = request_housekeeping(ID);								// Request housekeeping from PAY.
   809a2:	6938      	ldr	r0, [r7, #16]
   809a4:	4b0f      	ldr	r3, [pc, #60]	; (809e4 <prvHouseKeepTask+0xc0>)
   809a6:	4798      	blx	r3
   809a8:	60f8      	str	r0, [r7, #12]
			//ret_val = read_from_SSM(HK_TASK_ID, SUB0_ID0, passkey, addr);
			xSemaphoreGive(Can1_Mutex);
   809aa:	4b0c      	ldr	r3, [pc, #48]	; (809dc <prvHouseKeepTask+0xb8>)
   809ac:	681b      	ldr	r3, [r3, #0]
   809ae:	4618      	mov	r0, r3
   809b0:	2100      	movs	r1, #0
   809b2:	2200      	movs	r2, #0
   809b4:	2300      	movs	r3, #0
   809b6:	4c0e      	ldr	r4, [pc, #56]	; (809f0 <prvHouseKeepTask+0xcc>)
   809b8:	47a0      	blx	r4
		}
		
		xLastWakeTime = xTaskGetTickCount();
   809ba:	4b0b      	ldr	r3, [pc, #44]	; (809e8 <prvHouseKeepTask+0xc4>)
   809bc:	4798      	blx	r3
   809be:	4603      	mov	r3, r0
   809c0:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   809c2:	f107 0308 	add.w	r3, r7, #8
   809c6:	4618      	mov	r0, r3
   809c8:	69b9      	ldr	r1, [r7, #24]
   809ca:	4b08      	ldr	r3, [pc, #32]	; (809ec <prvHouseKeepTask+0xc8>)
   809cc:	4798      	blx	r3
		
		passkey ++;
   809ce:	7ffb      	ldrb	r3, [r7, #31]
   809d0:	3301      	adds	r3, #1
   809d2:	77fb      	strb	r3, [r7, #31]
	}
   809d4:	e7b8      	b.n	80948 <prvHouseKeepTask+0x24>
   809d6:	bf00      	nop
   809d8:	000833d1 	.word	0x000833d1
   809dc:	2007a6ac 	.word	0x2007a6ac
   809e0:	00083c99 	.word	0x00083c99
   809e4:	00085cc9 	.word	0x00085cc9
   809e8:	00084581 	.word	0x00084581
   809ec:	000842c5 	.word	0x000842c5
   809f0:	000839d9 	.word	0x000839d9

000809f4 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   809f4:	b580      	push	{r7, lr}
   809f6:	b082      	sub	sp, #8
   809f8:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   809fa:	2300      	movs	r3, #0
   809fc:	607b      	str	r3, [r7, #4]
   809fe:	e00f      	b.n	80a20 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   80a00:	4b0a      	ldr	r3, [pc, #40]	; (80a2c <vParTestInitialise+0x38>)
   80a02:	687a      	ldr	r2, [r7, #4]
   80a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80a08:	4618      	mov	r0, r3
   80a0a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a0e:	4b08      	ldr	r3, [pc, #32]	; (80a30 <vParTestInitialise+0x3c>)
   80a10:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   80a12:	6878      	ldr	r0, [r7, #4]
   80a14:	2100      	movs	r1, #0
   80a16:	4b07      	ldr	r3, [pc, #28]	; (80a34 <vParTestInitialise+0x40>)
   80a18:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   80a1a:	687b      	ldr	r3, [r7, #4]
   80a1c:	3301      	adds	r3, #1
   80a1e:	607b      	str	r3, [r7, #4]
   80a20:	687b      	ldr	r3, [r7, #4]
   80a22:	2b03      	cmp	r3, #3
   80a24:	d9ec      	bls.n	80a00 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   80a26:	3708      	adds	r7, #8
   80a28:	46bd      	mov	sp, r7
   80a2a:	bd80      	pop	{r7, pc}
   80a2c:	00086dc8 	.word	0x00086dc8
   80a30:	00082441 	.word	0x00082441
   80a34:	00080a39 	.word	0x00080a39

00080a38 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   80a38:	b580      	push	{r7, lr}
   80a3a:	b082      	sub	sp, #8
   80a3c:	af00      	add	r7, sp, #0
   80a3e:	6078      	str	r0, [r7, #4]
   80a40:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   80a42:	687b      	ldr	r3, [r7, #4]
   80a44:	2b03      	cmp	r3, #3
   80a46:	d823      	bhi.n	80a90 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   80a48:	687b      	ldr	r3, [r7, #4]
   80a4a:	2b00      	cmp	r3, #0
   80a4c:	d106      	bne.n	80a5c <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   80a4e:	683b      	ldr	r3, [r7, #0]
   80a50:	2b00      	cmp	r3, #0
   80a52:	bf14      	ite	ne
   80a54:	2300      	movne	r3, #0
   80a56:	2301      	moveq	r3, #1
   80a58:	b2db      	uxtb	r3, r3
   80a5a:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   80a5c:	683b      	ldr	r3, [r7, #0]
   80a5e:	2b00      	cmp	r3, #0
   80a60:	d00b      	beq.n	80a7a <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   80a62:	4b0d      	ldr	r3, [pc, #52]	; (80a98 <vParTestSetLED+0x60>)
   80a64:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   80a66:	4b0d      	ldr	r3, [pc, #52]	; (80a9c <vParTestSetLED+0x64>)
   80a68:	687a      	ldr	r2, [r7, #4]
   80a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80a6e:	4618      	mov	r0, r3
   80a70:	4b0b      	ldr	r3, [pc, #44]	; (80aa0 <vParTestSetLED+0x68>)
   80a72:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80a74:	4b0b      	ldr	r3, [pc, #44]	; (80aa4 <vParTestSetLED+0x6c>)
   80a76:	4798      	blx	r3
   80a78:	e00a      	b.n	80a90 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   80a7a:	4b07      	ldr	r3, [pc, #28]	; (80a98 <vParTestSetLED+0x60>)
   80a7c:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   80a7e:	4b07      	ldr	r3, [pc, #28]	; (80a9c <vParTestSetLED+0x64>)
   80a80:	687a      	ldr	r2, [r7, #4]
   80a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80a86:	4618      	mov	r0, r3
   80a88:	4b07      	ldr	r3, [pc, #28]	; (80aa8 <vParTestSetLED+0x70>)
   80a8a:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80a8c:	4b05      	ldr	r3, [pc, #20]	; (80aa4 <vParTestSetLED+0x6c>)
   80a8e:	4798      	blx	r3
		}
	}
}
   80a90:	3708      	adds	r7, #8
   80a92:	46bd      	mov	sp, r7
   80a94:	bd80      	pop	{r7, pc}
   80a96:	bf00      	nop
   80a98:	00083355 	.word	0x00083355
   80a9c:	00086dc8 	.word	0x00086dc8
   80aa0:	000823ad 	.word	0x000823ad
   80aa4:	00083399 	.word	0x00083399
   80aa8:	00082379 	.word	0x00082379

00080aac <dectobcd>:

/** 
 * \brief Decimal to binary coded decimal conversion
 */
static uint8_t dectobcd(uint8_t val)
{
   80aac:	b480      	push	{r7}
   80aae:	b083      	sub	sp, #12
   80ab0:	af00      	add	r7, sp, #0
   80ab2:	4603      	mov	r3, r0
   80ab4:	71fb      	strb	r3, [r7, #7]
	return ((val / 10 * 16) + (val % 10));
   80ab6:	79fa      	ldrb	r2, [r7, #7]
   80ab8:	4b0c      	ldr	r3, [pc, #48]	; (80aec <dectobcd+0x40>)
   80aba:	fba3 1302 	umull	r1, r3, r3, r2
   80abe:	08db      	lsrs	r3, r3, #3
   80ac0:	b2db      	uxtb	r3, r3
   80ac2:	011b      	lsls	r3, r3, #4
   80ac4:	b2d8      	uxtb	r0, r3
   80ac6:	79fa      	ldrb	r2, [r7, #7]
   80ac8:	4b08      	ldr	r3, [pc, #32]	; (80aec <dectobcd+0x40>)
   80aca:	fba3 1302 	umull	r1, r3, r3, r2
   80ace:	08d9      	lsrs	r1, r3, #3
   80ad0:	460b      	mov	r3, r1
   80ad2:	009b      	lsls	r3, r3, #2
   80ad4:	440b      	add	r3, r1
   80ad6:	005b      	lsls	r3, r3, #1
   80ad8:	1ad3      	subs	r3, r2, r3
   80ada:	b2db      	uxtb	r3, r3
   80adc:	4403      	add	r3, r0
   80ade:	b2db      	uxtb	r3, r3
}
   80ae0:	4618      	mov	r0, r3
   80ae2:	370c      	adds	r7, #12
   80ae4:	46bd      	mov	sp, r7
   80ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aea:	4770      	bx	lr
   80aec:	cccccccd 	.word	0xcccccccd

00080af0 <rtc_init>:
 *  setting the time-date to 00:00:00 01/01/0000
 *
 * \param ctrl_reg_val The byte to set the control register to
 */
void rtc_init(uint8_t ctrl_reg_val)
{			
   80af0:	b590      	push	{r4, r7, lr}
   80af2:	b087      	sub	sp, #28
   80af4:	af00      	add	r7, sp, #0
   80af6:	4603      	mov	r3, r0
   80af8:	71fb      	strb	r3, [r7, #7]
    rtc_set_creg(ctrl_reg_val);
   80afa:	79fb      	ldrb	r3, [r7, #7]
   80afc:	4618      	mov	r0, r3
   80afe:	4b0f      	ldr	r3, [pc, #60]	; (80b3c <rtc_init+0x4c>)
   80b00:	4798      	blx	r3
	
	struct timestamp initial_time;

	initial_time.sec = 0;
   80b02:	2300      	movs	r3, #0
   80b04:	723b      	strb	r3, [r7, #8]
	initial_time.min = 0;
   80b06:	2300      	movs	r3, #0
   80b08:	727b      	strb	r3, [r7, #9]
	initial_time.hour = 0;
   80b0a:	2300      	movs	r3, #0
   80b0c:	72bb      	strb	r3, [r7, #10]
	initial_time.yday = 1;
   80b0e:	2301      	movs	r3, #1
   80b10:	757b      	strb	r3, [r7, #21]
	initial_time.mday = 1;
   80b12:	2301      	movs	r3, #1
   80b14:	72fb      	strb	r3, [r7, #11]
	initial_time.wday = 1;
   80b16:	2301      	movs	r3, #1
   80b18:	753b      	strb	r3, [r7, #20]
	initial_time.mon = 1;
   80b1a:	2301      	movs	r3, #1
   80b1c:	733b      	strb	r3, [r7, #12]
	initial_time.year = 0;
   80b1e:	2300      	movs	r3, #0
   80b20:	613b      	str	r3, [r7, #16]
	initial_time.year_s = 0;
   80b22:	2300      	movs	r3, #0
   80b24:	75fb      	strb	r3, [r7, #23]
	initial_time.isdst = 0;
   80b26:	2300      	movs	r3, #0
   80b28:	75bb      	strb	r3, [r7, #22]
	
	rtc_set(initial_time);	
   80b2a:	f107 0308 	add.w	r3, r7, #8
   80b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   80b30:	4c03      	ldr	r4, [pc, #12]	; (80b40 <rtc_init+0x50>)
   80b32:	47a0      	blx	r4
}
   80b34:	371c      	adds	r7, #28
   80b36:	46bd      	mov	sp, r7
   80b38:	bd90      	pop	{r4, r7, pc}
   80b3a:	bf00      	nop
   80b3c:	00080c5d 	.word	0x00080c5d
   80b40:	00080b45 	.word	0x00080b45

00080b44 <rtc_set>:
 * \brief Set the time and date of the RTC to a specified value.
 *
 * \param t The time struct containing the new time/date to update to.
 */
void rtc_set(struct timestamp t)
{
   80b44:	b590      	push	{r4, r7, lr}
   80b46:	b089      	sub	sp, #36	; 0x24
   80b48:	af00      	add	r7, sp, #0
   80b4a:	463c      	mov	r4, r7
   80b4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t time_date[7] = { t.sec, t.min, t.hour, t.wday, t.mday, t.mon, t.year_s };
   80b50:	783b      	ldrb	r3, [r7, #0]
   80b52:	753b      	strb	r3, [r7, #20]
   80b54:	787b      	ldrb	r3, [r7, #1]
   80b56:	757b      	strb	r3, [r7, #21]
   80b58:	78bb      	ldrb	r3, [r7, #2]
   80b5a:	75bb      	strb	r3, [r7, #22]
   80b5c:	7b3b      	ldrb	r3, [r7, #12]
   80b5e:	75fb      	strb	r3, [r7, #23]
   80b60:	78fb      	ldrb	r3, [r7, #3]
   80b62:	763b      	strb	r3, [r7, #24]
   80b64:	793b      	ldrb	r3, [r7, #4]
   80b66:	767b      	strb	r3, [r7, #25]
   80b68:	7bfb      	ldrb	r3, [r7, #15]
   80b6a:	76bb      	strb	r3, [r7, #26]
    uint8_t i, century, buffer_0, buffer_1, buffer_2;
	uint16_t message;
	
    if (t.year > 2000) 
   80b6c:	68bb      	ldr	r3, [r7, #8]
   80b6e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   80b72:	dd07      	ble.n	80b84 <rtc_set+0x40>
	{
        century = 0x80;
   80b74:	2380      	movs	r3, #128	; 0x80
   80b76:	77bb      	strb	r3, [r7, #30]
        t.year_s = t.year - 2000;
   80b78:	68bb      	ldr	r3, [r7, #8]
   80b7a:	b2db      	uxtb	r3, r3
   80b7c:	3330      	adds	r3, #48	; 0x30
   80b7e:	b2db      	uxtb	r3, r3
   80b80:	73fb      	strb	r3, [r7, #15]
   80b82:	e006      	b.n	80b92 <rtc_set+0x4e>
    } 
	else 
	{
        century = 0;
   80b84:	2300      	movs	r3, #0
   80b86:	77bb      	strb	r3, [r7, #30]
        t.year_s = t.year - 1900;
   80b88:	68bb      	ldr	r3, [r7, #8]
   80b8a:	b2db      	uxtb	r3, r3
   80b8c:	3b6c      	subs	r3, #108	; 0x6c
   80b8e:	b2db      	uxtb	r3, r3
   80b90:	73fb      	strb	r3, [r7, #15]
    }
	
	buffer_1 = dectobcd(time_date[5]) + century;
   80b92:	7e7b      	ldrb	r3, [r7, #25]
   80b94:	4618      	mov	r0, r3
   80b96:	4b21      	ldr	r3, [pc, #132]	; (80c1c <rtc_set+0xd8>)
   80b98:	4798      	blx	r3
   80b9a:	4603      	mov	r3, r0
   80b9c:	461a      	mov	r2, r3
   80b9e:	7fbb      	ldrb	r3, [r7, #30]
   80ba0:	4413      	add	r3, r2
   80ba2:	777b      	strb	r3, [r7, #29]

    for (i = 0; i < 7; i++) 
   80ba4:	2300      	movs	r3, #0
   80ba6:	77fb      	strb	r3, [r7, #31]
   80ba8:	e032      	b.n	80c10 <rtc_set+0xcc>
	{
		// Convert data and prepare message to send
		buffer_0 = i + 0x80;
   80baa:	7ffb      	ldrb	r3, [r7, #31]
   80bac:	3b80      	subs	r3, #128	; 0x80
   80bae:	773b      	strb	r3, [r7, #28]
		buffer_2 = dectobcd(time_date[i]);
   80bb0:	7ffb      	ldrb	r3, [r7, #31]
   80bb2:	f107 0220 	add.w	r2, r7, #32
   80bb6:	4413      	add	r3, r2
   80bb8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
   80bbc:	4618      	mov	r0, r3
   80bbe:	4b17      	ldr	r3, [pc, #92]	; (80c1c <rtc_set+0xd8>)
   80bc0:	4798      	blx	r3
   80bc2:	4603      	mov	r3, r0
   80bc4:	76fb      	strb	r3, [r7, #27]
			
		if (i == 5)
   80bc6:	7ffb      	ldrb	r3, [r7, #31]
   80bc8:	2b05      	cmp	r3, #5
   80bca:	d10f      	bne.n	80bec <rtc_set+0xa8>
		{
			message = (((uint16_t) buffer_0) << 8) | buffer_1;
   80bcc:	7f3b      	ldrb	r3, [r7, #28]
   80bce:	021b      	lsls	r3, r3, #8
   80bd0:	b29a      	uxth	r2, r3
   80bd2:	7f7b      	ldrb	r3, [r7, #29]
   80bd4:	b29b      	uxth	r3, r3
   80bd6:	4313      	orrs	r3, r2
   80bd8:	b29b      	uxth	r3, r3
   80bda:	b29b      	uxth	r3, r3
   80bdc:	827b      	strh	r3, [r7, #18]
			spi_master_transfer(&message, 1);
   80bde:	f107 0312 	add.w	r3, r7, #18
   80be2:	4618      	mov	r0, r3
   80be4:	2101      	movs	r1, #1
   80be6:	4b0e      	ldr	r3, [pc, #56]	; (80c20 <rtc_set+0xdc>)
   80be8:	4798      	blx	r3
   80bea:	e00e      	b.n	80c0a <rtc_set+0xc6>
		}
		else
		{
			message = (((uint16_t) buffer_0) << 8) | buffer_2;
   80bec:	7f3b      	ldrb	r3, [r7, #28]
   80bee:	021b      	lsls	r3, r3, #8
   80bf0:	b29a      	uxth	r2, r3
   80bf2:	7efb      	ldrb	r3, [r7, #27]
   80bf4:	b29b      	uxth	r3, r3
   80bf6:	4313      	orrs	r3, r2
   80bf8:	b29b      	uxth	r3, r3
   80bfa:	b29b      	uxth	r3, r3
   80bfc:	827b      	strh	r3, [r7, #18]
			spi_master_transfer(&message, 1);
   80bfe:	f107 0312 	add.w	r3, r7, #18
   80c02:	4618      	mov	r0, r3
   80c04:	2101      	movs	r1, #1
   80c06:	4b06      	ldr	r3, [pc, #24]	; (80c20 <rtc_set+0xdc>)
   80c08:	4798      	blx	r3
        t.year_s = t.year - 1900;
    }
	
	buffer_1 = dectobcd(time_date[5]) + century;

    for (i = 0; i < 7; i++) 
   80c0a:	7ffb      	ldrb	r3, [r7, #31]
   80c0c:	3301      	adds	r3, #1
   80c0e:	77fb      	strb	r3, [r7, #31]
   80c10:	7ffb      	ldrb	r3, [r7, #31]
   80c12:	2b06      	cmp	r3, #6
   80c14:	d9c9      	bls.n	80baa <rtc_set+0x66>
		{
			message = (((uint16_t) buffer_0) << 8) | buffer_2;
			spi_master_transfer(&message, 1);
		}
    }
}
   80c16:	3724      	adds	r7, #36	; 0x24
   80c18:	46bd      	mov	sp, r7
   80c1a:	bd90      	pop	{r4, r7, pc}
   80c1c:	00080aad 	.word	0x00080aad
   80c20:	00080f45 	.word	0x00080f45

00080c24 <rtc_set_addr>:
 *
 * \param addr RTC register address
 * \param val  New register value
 */
void rtc_set_addr(uint8_t addr, uint8_t val)
{
   80c24:	b580      	push	{r7, lr}
   80c26:	b084      	sub	sp, #16
   80c28:	af00      	add	r7, sp, #0
   80c2a:	4602      	mov	r2, r0
   80c2c:	460b      	mov	r3, r1
   80c2e:	71fa      	strb	r2, [r7, #7]
   80c30:	71bb      	strb	r3, [r7, #6]
	uint16_t message = (((uint16_t) addr) << 8) | val;
   80c32:	79fb      	ldrb	r3, [r7, #7]
   80c34:	021b      	lsls	r3, r3, #8
   80c36:	b29a      	uxth	r2, r3
   80c38:	79bb      	ldrb	r3, [r7, #6]
   80c3a:	b29b      	uxth	r3, r3
   80c3c:	4313      	orrs	r3, r2
   80c3e:	b29b      	uxth	r3, r3
   80c40:	b29b      	uxth	r3, r3
   80c42:	81fb      	strh	r3, [r7, #14]
	spi_master_transfer(&message, 1);
   80c44:	f107 030e 	add.w	r3, r7, #14
   80c48:	4618      	mov	r0, r3
   80c4a:	2101      	movs	r1, #1
   80c4c:	4b02      	ldr	r3, [pc, #8]	; (80c58 <rtc_set_addr+0x34>)
   80c4e:	4798      	blx	r3
}
   80c50:	3710      	adds	r7, #16
   80c52:	46bd      	mov	sp, r7
   80c54:	bd80      	pop	{r7, pc}
   80c56:	bf00      	nop
   80c58:	00080f45 	.word	0x00080f45

00080c5c <rtc_set_creg>:
 * bit2 INTCN  Interrupt control (1 for use of the alarms and to disable square wave)
 * bit1 A2IE   Alarm1 interrupt enable (1 to enable)
 * bit0 A1IE   Alarm0 interrupt enable (1 to enable)
 */
void rtc_set_creg(uint8_t val)
{
   80c5c:	b580      	push	{r7, lr}
   80c5e:	b082      	sub	sp, #8
   80c60:	af00      	add	r7, sp, #0
   80c62:	4603      	mov	r3, r0
   80c64:	71fb      	strb	r3, [r7, #7]
    rtc_set_addr(DS3234_CREG_WRITE, val);
   80c66:	79fb      	ldrb	r3, [r7, #7]
   80c68:	208e      	movs	r0, #142	; 0x8e
   80c6a:	4619      	mov	r1, r3
   80c6c:	4b02      	ldr	r3, [pc, #8]	; (80c78 <rtc_set_creg+0x1c>)
   80c6e:	4798      	blx	r3
}
   80c70:	3708      	adds	r7, #8
   80c72:	46bd      	mov	sp, r7
   80c74:	bd80      	pop	{r7, pc}
   80c76:	bf00      	nop
   80c78:	00080c25 	.word	0x00080c25

00080c7c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80c7c:	b480      	push	{r7}
   80c7e:	b083      	sub	sp, #12
   80c80:	af00      	add	r7, sp, #0
   80c82:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c84:	687b      	ldr	r3, [r7, #4]
   80c86:	2b07      	cmp	r3, #7
   80c88:	d825      	bhi.n	80cd6 <osc_get_rate+0x5a>
   80c8a:	a201      	add	r2, pc, #4	; (adr r2, 80c90 <osc_get_rate+0x14>)
   80c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c90:	00080cb1 	.word	0x00080cb1
   80c94:	00080cb7 	.word	0x00080cb7
   80c98:	00080cbd 	.word	0x00080cbd
   80c9c:	00080cc3 	.word	0x00080cc3
   80ca0:	00080cc7 	.word	0x00080cc7
   80ca4:	00080ccb 	.word	0x00080ccb
   80ca8:	00080ccf 	.word	0x00080ccf
   80cac:	00080cd3 	.word	0x00080cd3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80cb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80cb4:	e010      	b.n	80cd8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80cba:	e00d      	b.n	80cd8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80cc0:	e00a      	b.n	80cd8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80cc2:	4b08      	ldr	r3, [pc, #32]	; (80ce4 <osc_get_rate+0x68>)
   80cc4:	e008      	b.n	80cd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80cc6:	4b08      	ldr	r3, [pc, #32]	; (80ce8 <osc_get_rate+0x6c>)
   80cc8:	e006      	b.n	80cd8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80cca:	4b08      	ldr	r3, [pc, #32]	; (80cec <osc_get_rate+0x70>)
   80ccc:	e004      	b.n	80cd8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80cce:	4b07      	ldr	r3, [pc, #28]	; (80cec <osc_get_rate+0x70>)
   80cd0:	e002      	b.n	80cd8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80cd2:	4b06      	ldr	r3, [pc, #24]	; (80cec <osc_get_rate+0x70>)
   80cd4:	e000      	b.n	80cd8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80cd6:	2300      	movs	r3, #0
}
   80cd8:	4618      	mov	r0, r3
   80cda:	370c      	adds	r7, #12
   80cdc:	46bd      	mov	sp, r7
   80cde:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ce2:	4770      	bx	lr
   80ce4:	003d0900 	.word	0x003d0900
   80ce8:	007a1200 	.word	0x007a1200
   80cec:	00b71b00 	.word	0x00b71b00

00080cf0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80cf0:	b580      	push	{r7, lr}
   80cf2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80cf4:	2006      	movs	r0, #6
   80cf6:	4b04      	ldr	r3, [pc, #16]	; (80d08 <sysclk_get_main_hz+0x18>)
   80cf8:	4798      	blx	r3
   80cfa:	4602      	mov	r2, r0
   80cfc:	4613      	mov	r3, r2
   80cfe:	00db      	lsls	r3, r3, #3
   80d00:	1a9b      	subs	r3, r3, r2
   80d02:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80d04:	4618      	mov	r0, r3
   80d06:	bd80      	pop	{r7, pc}
   80d08:	00080c7d 	.word	0x00080c7d

00080d0c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80d0c:	b580      	push	{r7, lr}
   80d0e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80d10:	4b02      	ldr	r3, [pc, #8]	; (80d1c <sysclk_get_cpu_hz+0x10>)
   80d12:	4798      	blx	r3
   80d14:	4603      	mov	r3, r0
   80d16:	085b      	lsrs	r3, r3, #1
}
   80d18:	4618      	mov	r0, r3
   80d1a:	bd80      	pop	{r7, pc}
   80d1c:	00080cf1 	.word	0x00080cf1

00080d20 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80d20:	b480      	push	{r7}
   80d22:	b083      	sub	sp, #12
   80d24:	af00      	add	r7, sp, #0
   80d26:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	2280      	movs	r2, #128	; 0x80
   80d2c:	601a      	str	r2, [r3, #0]
}
   80d2e:	370c      	adds	r7, #12
   80d30:	46bd      	mov	sp, r7
   80d32:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d36:	4770      	bx	lr

00080d38 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80d38:	b480      	push	{r7}
   80d3a:	b083      	sub	sp, #12
   80d3c:	af00      	add	r7, sp, #0
   80d3e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80d40:	687b      	ldr	r3, [r7, #4]
   80d42:	2201      	movs	r2, #1
   80d44:	601a      	str	r2, [r3, #0]
}
   80d46:	370c      	adds	r7, #12
   80d48:	46bd      	mov	sp, r7
   80d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d4e:	4770      	bx	lr

00080d50 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80d50:	b480      	push	{r7}
   80d52:	b083      	sub	sp, #12
   80d54:	af00      	add	r7, sp, #0
   80d56:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80d58:	687b      	ldr	r3, [r7, #4]
   80d5a:	685b      	ldr	r3, [r3, #4]
   80d5c:	f043 0201 	orr.w	r2, r3, #1
   80d60:	687b      	ldr	r3, [r7, #4]
   80d62:	605a      	str	r2, [r3, #4]
}
   80d64:	370c      	adds	r7, #12
   80d66:	46bd      	mov	sp, r7
   80d68:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d6c:	4770      	bx	lr
   80d6e:	bf00      	nop

00080d70 <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
   80d70:	b480      	push	{r7}
   80d72:	b083      	sub	sp, #12
   80d74:	af00      	add	r7, sp, #0
   80d76:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
   80d78:	687b      	ldr	r3, [r7, #4]
   80d7a:	685b      	ldr	r3, [r3, #4]
   80d7c:	f023 0202 	bic.w	r2, r3, #2
   80d80:	687b      	ldr	r3, [r7, #4]
   80d82:	605a      	str	r2, [r3, #4]
}
   80d84:	370c      	adds	r7, #12
   80d86:	46bd      	mov	sp, r7
   80d88:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d8c:	4770      	bx	lr
   80d8e:	bf00      	nop

00080d90 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   80d90:	b480      	push	{r7}
   80d92:	b083      	sub	sp, #12
   80d94:	af00      	add	r7, sp, #0
   80d96:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80d98:	687b      	ldr	r3, [r7, #4]
   80d9a:	685b      	ldr	r3, [r3, #4]
   80d9c:	f023 0204 	bic.w	r2, r3, #4
   80da0:	687b      	ldr	r3, [r7, #4]
   80da2:	605a      	str	r2, [r3, #4]
}
   80da4:	370c      	adds	r7, #12
   80da6:	46bd      	mov	sp, r7
   80da8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dac:	4770      	bx	lr
   80dae:	bf00      	nop

00080db0 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80db0:	b480      	push	{r7}
   80db2:	b083      	sub	sp, #12
   80db4:	af00      	add	r7, sp, #0
   80db6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80db8:	687b      	ldr	r3, [r7, #4]
   80dba:	685b      	ldr	r3, [r3, #4]
   80dbc:	f043 0210 	orr.w	r2, r3, #16
   80dc0:	687b      	ldr	r3, [r7, #4]
   80dc2:	605a      	str	r2, [r3, #4]
}
   80dc4:	370c      	adds	r7, #12
   80dc6:	46bd      	mov	sp, r7
   80dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dcc:	4770      	bx	lr
   80dce:	bf00      	nop

00080dd0 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   80dd0:	b480      	push	{r7}
   80dd2:	b083      	sub	sp, #12
   80dd4:	af00      	add	r7, sp, #0
   80dd6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80dd8:	687b      	ldr	r3, [r7, #4]
   80dda:	685b      	ldr	r3, [r3, #4]
   80ddc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   80de0:	687b      	ldr	r3, [r7, #4]
   80de2:	605a      	str	r2, [r3, #4]
}
   80de4:	370c      	adds	r7, #12
   80de6:	46bd      	mov	sp, r7
   80de8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dec:	4770      	bx	lr
   80dee:	bf00      	nop

00080df0 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80df0:	b480      	push	{r7}
   80df2:	b083      	sub	sp, #12
   80df4:	af00      	add	r7, sp, #0
   80df6:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80df8:	687b      	ldr	r3, [r7, #4]
   80dfa:	691b      	ldr	r3, [r3, #16]
}
   80dfc:	4618      	mov	r0, r3
   80dfe:	370c      	adds	r7, #12
   80e00:	46bd      	mov	sp, r7
   80e02:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e06:	4770      	bx	lr

00080e08 <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   80e08:	b580      	push	{r7, lr}
   80e0a:	b084      	sub	sp, #16
   80e0c:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   80e0e:	2300      	movs	r3, #0
   80e10:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   80e12:	2300      	movs	r3, #0
   80e14:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80e16:	4b0c      	ldr	r3, [pc, #48]	; (80e48 <SPI0_Handler+0x40>)
   80e18:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80e1a:	480c      	ldr	r0, [pc, #48]	; (80e4c <SPI0_Handler+0x44>)
   80e1c:	4b0c      	ldr	r3, [pc, #48]	; (80e50 <SPI0_Handler+0x48>)
   80e1e:	4798      	blx	r3
   80e20:	4603      	mov	r3, r0
   80e22:	f003 0301 	and.w	r3, r3, #1
   80e26:	2b00      	cmp	r3, #0
   80e28:	d00b      	beq.n	80e42 <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80e2a:	1cfb      	adds	r3, r7, #3
   80e2c:	4807      	ldr	r0, [pc, #28]	; (80e4c <SPI0_Handler+0x44>)
   80e2e:	4909      	ldr	r1, [pc, #36]	; (80e54 <SPI0_Handler+0x4c>)
   80e30:	461a      	mov	r2, r3
   80e32:	4b09      	ldr	r3, [pc, #36]	; (80e58 <SPI0_Handler+0x50>)
   80e34:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80e36:	687b      	ldr	r3, [r7, #4]
   80e38:	681b      	ldr	r3, [r3, #0]
   80e3a:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80e3e:	687b      	ldr	r3, [r7, #4]
   80e40:	601a      	str	r2, [r3, #0]
	}
}
   80e42:	3710      	adds	r7, #16
   80e44:	46bd      	mov	sp, r7
   80e46:	bd80      	pop	{r7, pc}
   80e48:	4000800c 	.word	0x4000800c
   80e4c:	40008000 	.word	0x40008000
   80e50:	00080df1 	.word	0x00080df1
   80e54:	20070458 	.word	0x20070458
   80e58:	00080211 	.word	0x00080211

00080e5c <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   80e5c:	b598      	push	{r3, r4, r7, lr}
   80e5e:	af00      	add	r7, sp, #0

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_MASTER_BASE);
   80e60:	4824      	ldr	r0, [pc, #144]	; (80ef4 <spi_master_initialize+0x98>)
   80e62:	4b25      	ldr	r3, [pc, #148]	; (80ef8 <spi_master_initialize+0x9c>)
   80e64:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   80e66:	4823      	ldr	r0, [pc, #140]	; (80ef4 <spi_master_initialize+0x98>)
   80e68:	4b24      	ldr	r3, [pc, #144]	; (80efc <spi_master_initialize+0xa0>)
   80e6a:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   80e6c:	4821      	ldr	r0, [pc, #132]	; (80ef4 <spi_master_initialize+0x98>)
   80e6e:	4b24      	ldr	r3, [pc, #144]	; (80f00 <spi_master_initialize+0xa4>)
   80e70:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   80e72:	4820      	ldr	r0, [pc, #128]	; (80ef4 <spi_master_initialize+0x98>)
   80e74:	4b23      	ldr	r3, [pc, #140]	; (80f04 <spi_master_initialize+0xa8>)
   80e76:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   80e78:	481e      	ldr	r0, [pc, #120]	; (80ef4 <spi_master_initialize+0x98>)
   80e7a:	4b23      	ldr	r3, [pc, #140]	; (80f08 <spi_master_initialize+0xac>)
   80e7c:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
   80e7e:	481d      	ldr	r0, [pc, #116]	; (80ef4 <spi_master_initialize+0x98>)
   80e80:	210e      	movs	r1, #14
   80e82:	4b22      	ldr	r3, [pc, #136]	; (80f0c <spi_master_initialize+0xb0>)
   80e84:	4798      	blx	r3
	spi_set_fixed_peripheral_select(SPI_MASTER_BASE);
   80e86:	481b      	ldr	r0, [pc, #108]	; (80ef4 <spi_master_initialize+0x98>)
   80e88:	4b21      	ldr	r3, [pc, #132]	; (80f10 <spi_master_initialize+0xb4>)
   80e8a:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);
   80e8c:	4819      	ldr	r0, [pc, #100]	; (80ef4 <spi_master_initialize+0x98>)
   80e8e:	4b21      	ldr	r3, [pc, #132]	; (80f14 <spi_master_initialize+0xb8>)
   80e90:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   80e92:	4818      	ldr	r0, [pc, #96]	; (80ef4 <spi_master_initialize+0x98>)
   80e94:	2100      	movs	r1, #0
   80e96:	4b20      	ldr	r3, [pc, #128]	; (80f18 <spi_master_initialize+0xbc>)
   80e98:	4798      	blx	r3

	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
   80e9a:	4816      	ldr	r0, [pc, #88]	; (80ef4 <spi_master_initialize+0x98>)
   80e9c:	2100      	movs	r1, #0
   80e9e:	2245      	movs	r2, #69	; 0x45
   80ea0:	2302      	movs	r3, #2
   80ea2:	4c1e      	ldr	r4, [pc, #120]	; (80f1c <spi_master_initialize+0xc0>)
   80ea4:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_16_BIT);
   80ea6:	4813      	ldr	r0, [pc, #76]	; (80ef4 <spi_master_initialize+0x98>)
   80ea8:	2100      	movs	r1, #0
   80eaa:	2280      	movs	r2, #128	; 0x80
   80eac:	4b1c      	ldr	r3, [pc, #112]	; (80f20 <spi_master_initialize+0xc4>)
   80eae:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL, spi_calc_baudrate_div(SPI_CLK_FREQ, sysclk_get_cpu_hz())); 
   80eb0:	4b1c      	ldr	r3, [pc, #112]	; (80f24 <spi_master_initialize+0xc8>)
   80eb2:	4798      	blx	r3
   80eb4:	4603      	mov	r3, r0
   80eb6:	481c      	ldr	r0, [pc, #112]	; (80f28 <spi_master_initialize+0xcc>)
   80eb8:	4619      	mov	r1, r3
   80eba:	4b1c      	ldr	r3, [pc, #112]	; (80f2c <spi_master_initialize+0xd0>)
   80ebc:	4798      	blx	r3
   80ebe:	4603      	mov	r3, r0
   80ec0:	b2db      	uxtb	r3, r3
   80ec2:	480c      	ldr	r0, [pc, #48]	; (80ef4 <spi_master_initialize+0x98>)
   80ec4:	2100      	movs	r1, #0
   80ec6:	461a      	mov	r2, r3
   80ec8:	4b19      	ldr	r3, [pc, #100]	; (80f30 <spi_master_initialize+0xd4>)
   80eca:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CS_RISE_FORCED);
   80ecc:	4809      	ldr	r0, [pc, #36]	; (80ef4 <spi_master_initialize+0x98>)
   80ece:	2100      	movs	r1, #0
   80ed0:	2204      	movs	r2, #4
   80ed2:	4b18      	ldr	r3, [pc, #96]	; (80f34 <spi_master_initialize+0xd8>)
   80ed4:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   80ed6:	4807      	ldr	r0, [pc, #28]	; (80ef4 <spi_master_initialize+0x98>)
   80ed8:	2100      	movs	r1, #0
   80eda:	2200      	movs	r2, #0
   80edc:	4b16      	ldr	r3, [pc, #88]	; (80f38 <spi_master_initialize+0xdc>)
   80ede:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
   80ee0:	4804      	ldr	r0, [pc, #16]	; (80ef4 <spi_master_initialize+0x98>)
   80ee2:	2100      	movs	r1, #0
   80ee4:	2201      	movs	r2, #1
   80ee6:	4b15      	ldr	r3, [pc, #84]	; (80f3c <spi_master_initialize+0xe0>)
   80ee8:	4798      	blx	r3
	spi_enable(SPI_MASTER_BASE);
   80eea:	4802      	ldr	r0, [pc, #8]	; (80ef4 <spi_master_initialize+0x98>)
   80eec:	4b14      	ldr	r3, [pc, #80]	; (80f40 <spi_master_initialize+0xe4>)
   80eee:	4798      	blx	r3
}
   80ef0:	bd98      	pop	{r3, r4, r7, pc}
   80ef2:	bf00      	nop
   80ef4:	40008000 	.word	0x40008000
   80ef8:	00080189 	.word	0x00080189
   80efc:	00080d21 	.word	0x00080d21
   80f00:	00080d51 	.word	0x00080d51
   80f04:	00080db1 	.word	0x00080db1
   80f08:	00080dd1 	.word	0x00080dd1
   80f0c:	000801ad 	.word	0x000801ad
   80f10:	00080d71 	.word	0x00080d71
   80f14:	00080d91 	.word	0x00080d91
   80f18:	000801e1 	.word	0x000801e1
   80f1c:	0008051d 	.word	0x0008051d
   80f20:	00080445 	.word	0x00080445
   80f24:	00080d0d 	.word	0x00080d0d
   80f28:	003d0900 	.word	0x003d0900
   80f2c:	0008048d 	.word	0x0008048d
   80f30:	000804cd 	.word	0x000804cd
   80f34:	000803a1 	.word	0x000803a1
   80f38:	00080301 	.word	0x00080301
   80f3c:	00080351 	.word	0x00080351
   80f40:	00080d39 	.word	0x00080d39

00080f44 <spi_master_transfer>:
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
   80f44:	b590      	push	{r4, r7, lr}
   80f46:	b087      	sub	sp, #28
   80f48:	af00      	add	r7, sp, #0
   80f4a:	6078      	str	r0, [r7, #4]
   80f4c:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs; // SPI Master operating in fixed CS mode so uc_pcs doesn't need to take on a value
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   80f4e:	687b      	ldr	r3, [r7, #4]
   80f50:	613b      	str	r3, [r7, #16]
	
	for (i = 0; i < size; i++) 
   80f52:	2300      	movs	r3, #0
   80f54:	617b      	str	r3, [r7, #20]
   80f56:	e024      	b.n	80fa2 <spi_master_transfer+0x5e>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
   80f58:	697b      	ldr	r3, [r7, #20]
   80f5a:	005b      	lsls	r3, r3, #1
   80f5c:	693a      	ldr	r2, [r7, #16]
   80f5e:	4413      	add	r3, r2
   80f60:	881b      	ldrh	r3, [r3, #0]
   80f62:	4813      	ldr	r0, [pc, #76]	; (80fb0 <spi_master_transfer+0x6c>)
   80f64:	4619      	mov	r1, r3
   80f66:	2200      	movs	r2, #0
   80f68:	2300      	movs	r3, #0
   80f6a:	4c12      	ldr	r4, [pc, #72]	; (80fb4 <spi_master_transfer+0x70>)
   80f6c:	47a0      	blx	r4
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   80f6e:	bf00      	nop
   80f70:	480f      	ldr	r0, [pc, #60]	; (80fb0 <spi_master_transfer+0x6c>)
   80f72:	4b11      	ldr	r3, [pc, #68]	; (80fb8 <spi_master_transfer+0x74>)
   80f74:	4798      	blx	r3
   80f76:	4603      	mov	r3, r0
   80f78:	f003 0301 	and.w	r3, r3, #1
   80f7c:	2b00      	cmp	r3, #0
   80f7e:	d0f7      	beq.n	80f70 <spi_master_transfer+0x2c>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
   80f80:	f107 030f 	add.w	r3, r7, #15
   80f84:	480a      	ldr	r0, [pc, #40]	; (80fb0 <spi_master_transfer+0x6c>)
   80f86:	490d      	ldr	r1, [pc, #52]	; (80fbc <spi_master_transfer+0x78>)
   80f88:	461a      	mov	r2, r3
   80f8a:	4b0d      	ldr	r3, [pc, #52]	; (80fc0 <spi_master_transfer+0x7c>)
   80f8c:	4798      	blx	r3
		p_buffer[i] = data;
   80f8e:	697b      	ldr	r3, [r7, #20]
   80f90:	005b      	lsls	r3, r3, #1
   80f92:	693a      	ldr	r2, [r7, #16]
   80f94:	4413      	add	r3, r2
   80f96:	4a09      	ldr	r2, [pc, #36]	; (80fbc <spi_master_transfer+0x78>)
   80f98:	8812      	ldrh	r2, [r2, #0]
   80f9a:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;
	
	for (i = 0; i < size; i++) 
   80f9c:	697b      	ldr	r3, [r7, #20]
   80f9e:	3301      	adds	r3, #1
   80fa0:	617b      	str	r3, [r7, #20]
   80fa2:	697a      	ldr	r2, [r7, #20]
   80fa4:	683b      	ldr	r3, [r7, #0]
   80fa6:	429a      	cmp	r2, r3
   80fa8:	d3d6      	bcc.n	80f58 <spi_master_transfer+0x14>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   80faa:	371c      	adds	r7, #28
   80fac:	46bd      	mov	sp, r7
   80fae:	bd90      	pop	{r4, r7, pc}
   80fb0:	40008000 	.word	0x40008000
   80fb4:	00080281 	.word	0x00080281
   80fb8:	00080df1 	.word	0x00080df1
   80fbc:	2007045a 	.word	0x2007045a
   80fc0:	00080211 	.word	0x00080211

00080fc4 <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80fc4:	b580      	push	{r7, lr}
   80fc6:	b084      	sub	sp, #16
   80fc8:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   80fca:	2300      	movs	r3, #0
   80fcc:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80fce:	4b08      	ldr	r3, [pc, #32]	; (80ff0 <spi_initialize+0x2c>)
   80fd0:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   80fd2:	2300      	movs	r3, #0
   80fd4:	80fb      	strh	r3, [r7, #6]

//	spi_slave_initialize();
	
	*reg_ptr |= 0x00BB;
   80fd6:	68bb      	ldr	r3, [r7, #8]
   80fd8:	681b      	ldr	r3, [r3, #0]
   80fda:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80fde:	68bb      	ldr	r3, [r7, #8]
   80fe0:	601a      	str	r2, [r3, #0]
//	NVIC_DisableIRQ(SPI_IRQn);
//	NVIC_ClearPendingIRQ(SPI_IRQn);
//	NVIC_SetPriority(SPI_IRQn, 0);
//	NVIC_EnableIRQ(SPI_IRQn);

	spi_master_initialize();
   80fe2:	4b04      	ldr	r3, [pc, #16]	; (80ff4 <spi_initialize+0x30>)
   80fe4:	4798      	blx	r3
	//while (1) {
		//
		//*reg_ptr |= 0x00BB;
		//
		//}	// Put 0xBB in the SPI shift register.
	return;
   80fe6:	bf00      	nop
}
   80fe8:	3710      	adds	r7, #16
   80fea:	46bd      	mov	sp, r7
   80fec:	bd80      	pop	{r7, pc}
   80fee:	bf00      	nop
   80ff0:	4000800c 	.word	0x4000800c
   80ff4:	00080e5d 	.word	0x00080e5d

00080ff8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80ff8:	b480      	push	{r7}
   80ffa:	b083      	sub	sp, #12
   80ffc:	af00      	add	r7, sp, #0
   80ffe:	4603      	mov	r3, r0
   81000:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81002:	4b08      	ldr	r3, [pc, #32]	; (81024 <NVIC_EnableIRQ+0x2c>)
   81004:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81008:	0952      	lsrs	r2, r2, #5
   8100a:	79f9      	ldrb	r1, [r7, #7]
   8100c:	f001 011f 	and.w	r1, r1, #31
   81010:	2001      	movs	r0, #1
   81012:	fa00 f101 	lsl.w	r1, r0, r1
   81016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8101a:	370c      	adds	r7, #12
   8101c:	46bd      	mov	sp, r7
   8101e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81022:	4770      	bx	lr
   81024:	e000e100 	.word	0xe000e100

00081028 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81028:	b480      	push	{r7}
   8102a:	b083      	sub	sp, #12
   8102c:	af00      	add	r7, sp, #0
   8102e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81030:	687b      	ldr	r3, [r7, #4]
   81032:	2b07      	cmp	r3, #7
   81034:	d825      	bhi.n	81082 <osc_get_rate+0x5a>
   81036:	a201      	add	r2, pc, #4	; (adr r2, 8103c <osc_get_rate+0x14>)
   81038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8103c:	0008105d 	.word	0x0008105d
   81040:	00081063 	.word	0x00081063
   81044:	00081069 	.word	0x00081069
   81048:	0008106f 	.word	0x0008106f
   8104c:	00081073 	.word	0x00081073
   81050:	00081077 	.word	0x00081077
   81054:	0008107b 	.word	0x0008107b
   81058:	0008107f 	.word	0x0008107f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8105c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81060:	e010      	b.n	81084 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81066:	e00d      	b.n	81084 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81068:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8106c:	e00a      	b.n	81084 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8106e:	4b08      	ldr	r3, [pc, #32]	; (81090 <osc_get_rate+0x68>)
   81070:	e008      	b.n	81084 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81072:	4b08      	ldr	r3, [pc, #32]	; (81094 <osc_get_rate+0x6c>)
   81074:	e006      	b.n	81084 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81076:	4b08      	ldr	r3, [pc, #32]	; (81098 <osc_get_rate+0x70>)
   81078:	e004      	b.n	81084 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8107a:	4b07      	ldr	r3, [pc, #28]	; (81098 <osc_get_rate+0x70>)
   8107c:	e002      	b.n	81084 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8107e:	4b06      	ldr	r3, [pc, #24]	; (81098 <osc_get_rate+0x70>)
   81080:	e000      	b.n	81084 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81082:	2300      	movs	r3, #0
}
   81084:	4618      	mov	r0, r3
   81086:	370c      	adds	r7, #12
   81088:	46bd      	mov	sp, r7
   8108a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8108e:	4770      	bx	lr
   81090:	003d0900 	.word	0x003d0900
   81094:	007a1200 	.word	0x007a1200
   81098:	00b71b00 	.word	0x00b71b00

0008109c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8109c:	b580      	push	{r7, lr}
   8109e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   810a0:	2006      	movs	r0, #6
   810a2:	4b04      	ldr	r3, [pc, #16]	; (810b4 <sysclk_get_main_hz+0x18>)
   810a4:	4798      	blx	r3
   810a6:	4602      	mov	r2, r0
   810a8:	4613      	mov	r3, r2
   810aa:	00db      	lsls	r3, r3, #3
   810ac:	1a9b      	subs	r3, r3, r2
   810ae:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   810b0:	4618      	mov	r0, r3
   810b2:	bd80      	pop	{r7, pc}
   810b4:	00081029 	.word	0x00081029

000810b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   810b8:	b580      	push	{r7, lr}
   810ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   810bc:	4b02      	ldr	r3, [pc, #8]	; (810c8 <sysclk_get_cpu_hz+0x10>)
   810be:	4798      	blx	r3
   810c0:	4603      	mov	r3, r0
   810c2:	085b      	lsrs	r3, r3, #1
}
   810c4:	4618      	mov	r0, r3
   810c6:	bd80      	pop	{r7, pc}
   810c8:	0008109d 	.word	0x0008109d

000810cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   810cc:	b580      	push	{r7, lr}
   810ce:	b082      	sub	sp, #8
   810d0:	af00      	add	r7, sp, #0
   810d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   810d4:	6878      	ldr	r0, [r7, #4]
   810d6:	4b02      	ldr	r3, [pc, #8]	; (810e0 <sysclk_enable_peripheral_clock+0x14>)
   810d8:	4798      	blx	r3
}
   810da:	3708      	adds	r7, #8
   810dc:	46bd      	mov	sp, r7
   810de:	bd80      	pop	{r7, pc}
   810e0:	000829cd 	.word	0x000829cd

000810e4 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   810e4:	b580      	push	{r7, lr}
   810e6:	b084      	sub	sp, #16
   810e8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   810ea:	2300      	movs	r3, #0
   810ec:	60bb      	str	r3, [r7, #8]
   810ee:	2300      	movs	r3, #0
   810f0:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   810f2:	2300      	movs	r3, #0
   810f4:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   810f6:	2300      	movs	r3, #0
   810f8:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   810fa:	483b      	ldr	r0, [pc, #236]	; (811e8 <USART0_Handler+0x104>)
   810fc:	4b3b      	ldr	r3, [pc, #236]	; (811ec <USART0_Handler+0x108>)
   810fe:	4798      	blx	r3
   81100:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   81102:	2058      	movs	r0, #88	; 0x58
   81104:	4b3a      	ldr	r3, [pc, #232]	; (811f0 <USART0_Handler+0x10c>)
   81106:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   81108:	4b3a      	ldr	r3, [pc, #232]	; (811f4 <USART0_Handler+0x110>)
   8110a:	781b      	ldrb	r3, [r3, #0]
   8110c:	2b00      	cmp	r3, #0
   8110e:	d167      	bne.n	811e0 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   81110:	683b      	ldr	r3, [r7, #0]
   81112:	f003 0301 	and.w	r3, r3, #1
   81116:	2b00      	cmp	r3, #0
   81118:	d062      	beq.n	811e0 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   8111a:	4833      	ldr	r0, [pc, #204]	; (811e8 <USART0_Handler+0x104>)
   8111c:	4936      	ldr	r1, [pc, #216]	; (811f8 <USART0_Handler+0x114>)
   8111e:	4b37      	ldr	r3, [pc, #220]	; (811fc <USART0_Handler+0x118>)
   81120:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   81122:	4b35      	ldr	r3, [pc, #212]	; (811f8 <USART0_Handler+0x114>)
   81124:	681b      	ldr	r3, [r3, #0]
   81126:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   81128:	68bb      	ldr	r3, [r7, #8]
   8112a:	2b31      	cmp	r3, #49	; 0x31
   8112c:	d102      	bne.n	81134 <USART0_Handler+0x50>
				command_start = 1;
   8112e:	4b34      	ldr	r3, [pc, #208]	; (81200 <USART0_Handler+0x11c>)
   81130:	2201      	movs	r2, #1
   81132:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   81134:	68bb      	ldr	r3, [r7, #8]
   81136:	2b32      	cmp	r3, #50	; 0x32
   81138:	d102      	bne.n	81140 <USART0_Handler+0x5c>
				command_end = 1;
   8113a:	4b32      	ldr	r3, [pc, #200]	; (81204 <USART0_Handler+0x120>)
   8113c:	2201      	movs	r2, #1
   8113e:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   81140:	4b2f      	ldr	r3, [pc, #188]	; (81200 <USART0_Handler+0x11c>)
   81142:	781b      	ldrb	r3, [r3, #0]
   81144:	2b01      	cmp	r3, #1
   81146:	d11e      	bne.n	81186 <USART0_Handler+0xa2>
   81148:	68bb      	ldr	r3, [r7, #8]
   8114a:	2b00      	cmp	r3, #0
   8114c:	d01b      	beq.n	81186 <USART0_Handler+0xa2>
   8114e:	68bb      	ldr	r3, [r7, #8]
   81150:	2b31      	cmp	r3, #49	; 0x31
   81152:	d018      	beq.n	81186 <USART0_Handler+0xa2>
   81154:	68bb      	ldr	r3, [r7, #8]
   81156:	2b32      	cmp	r3, #50	; 0x32
   81158:	d015      	beq.n	81186 <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   8115a:	4b2b      	ldr	r3, [pc, #172]	; (81208 <USART0_Handler+0x124>)
   8115c:	781a      	ldrb	r2, [r3, #0]
   8115e:	4b2b      	ldr	r3, [pc, #172]	; (8120c <USART0_Handler+0x128>)
   81160:	fba3 1302 	umull	r1, r3, r3, r2
   81164:	08d9      	lsrs	r1, r3, #3
   81166:	460b      	mov	r3, r1
   81168:	009b      	lsls	r3, r3, #2
   8116a:	440b      	add	r3, r1
   8116c:	005b      	lsls	r3, r3, #1
   8116e:	1ad3      	subs	r3, r2, r3
   81170:	b2db      	uxtb	r3, r3
   81172:	68ba      	ldr	r2, [r7, #8]
   81174:	b2d1      	uxtb	r1, r2
   81176:	4a26      	ldr	r2, [pc, #152]	; (81210 <USART0_Handler+0x12c>)
   81178:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   8117a:	4b23      	ldr	r3, [pc, #140]	; (81208 <USART0_Handler+0x124>)
   8117c:	781b      	ldrb	r3, [r3, #0]
   8117e:	3301      	adds	r3, #1
   81180:	b2da      	uxtb	r2, r3
   81182:	4b21      	ldr	r3, [pc, #132]	; (81208 <USART0_Handler+0x124>)
   81184:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   81186:	4b1f      	ldr	r3, [pc, #124]	; (81204 <USART0_Handler+0x120>)
   81188:	781b      	ldrb	r3, [r3, #0]
   8118a:	2b01      	cmp	r3, #1
   8118c:	d11d      	bne.n	811ca <USART0_Handler+0xe6>
   8118e:	4b1c      	ldr	r3, [pc, #112]	; (81200 <USART0_Handler+0x11c>)
   81190:	781b      	ldrb	r3, [r3, #0]
   81192:	2b01      	cmp	r3, #1
   81194:	d119      	bne.n	811ca <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   81196:	4b1f      	ldr	r3, [pc, #124]	; (81214 <USART0_Handler+0x130>)
   81198:	4798      	blx	r3
				command_end = 0;
   8119a:	4b1a      	ldr	r3, [pc, #104]	; (81204 <USART0_Handler+0x120>)
   8119c:	2200      	movs	r2, #0
   8119e:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   811a0:	4b17      	ldr	r3, [pc, #92]	; (81200 <USART0_Handler+0x11c>)
   811a2:	2200      	movs	r2, #0
   811a4:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   811a6:	4b18      	ldr	r3, [pc, #96]	; (81208 <USART0_Handler+0x124>)
   811a8:	2200      	movs	r2, #0
   811aa:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   811ac:	2300      	movs	r3, #0
   811ae:	73bb      	strb	r3, [r7, #14]
   811b0:	e006      	b.n	811c0 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   811b2:	7bbb      	ldrb	r3, [r7, #14]
   811b4:	4a16      	ldr	r2, [pc, #88]	; (81210 <USART0_Handler+0x12c>)
   811b6:	2100      	movs	r1, #0
   811b8:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   811ba:	7bbb      	ldrb	r3, [r7, #14]
   811bc:	3301      	adds	r3, #1
   811be:	73bb      	strb	r3, [r7, #14]
   811c0:	7bbb      	ldrb	r3, [r7, #14]
   811c2:	2b09      	cmp	r3, #9
   811c4:	d9f5      	bls.n	811b2 <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   811c6:	2301      	movs	r3, #1
   811c8:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   811ca:	7bfb      	ldrb	r3, [r7, #15]
   811cc:	2b00      	cmp	r3, #0
   811ce:	d105      	bne.n	811dc <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   811d0:	4b09      	ldr	r3, [pc, #36]	; (811f8 <USART0_Handler+0x114>)
   811d2:	681b      	ldr	r3, [r3, #0]
   811d4:	4804      	ldr	r0, [pc, #16]	; (811e8 <USART0_Handler+0x104>)
   811d6:	4619      	mov	r1, r3
   811d8:	4b0f      	ldr	r3, [pc, #60]	; (81218 <USART0_Handler+0x134>)
   811da:	4798      	blx	r3
					
			command_completed = 0;
   811dc:	2300      	movs	r3, #0
   811de:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   811e0:	3710      	adds	r7, #16
   811e2:	46bd      	mov	sp, r7
   811e4:	bd80      	pop	{r7, pc}
   811e6:	bf00      	nop
   811e8:	40098000 	.word	0x40098000
   811ec:	00082c4d 	.word	0x00082c4d
   811f0:	000823e1 	.word	0x000823e1
   811f4:	20070460 	.word	0x20070460
   811f8:	2007045c 	.word	0x2007045c
   811fc:	00082cd1 	.word	0x00082cd1
   81200:	20070461 	.word	0x20070461
   81204:	20070462 	.word	0x20070462
   81208:	20070470 	.word	0x20070470
   8120c:	cccccccd 	.word	0xcccccccd
   81210:	20070464 	.word	0x20070464
   81214:	0008121d 	.word	0x0008121d
   81218:	00082c9d 	.word	0x00082c9d

0008121c <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   8121c:	b580      	push	{r7, lr}
   8121e:	b08a      	sub	sp, #40	; 0x28
   81220:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   81222:	2300      	movs	r3, #0
   81224:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   81226:	2301      	movs	r3, #1
   81228:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   8122a:	2300      	movs	r3, #0
   8122c:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   8122e:	2301      	movs	r3, #1
   81230:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   81232:	2301      	movs	r3, #1
   81234:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   81236:	2301      	movs	r3, #1
   81238:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   8123a:	f240 1327 	movw	r3, #295	; 0x127
   8123e:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   81240:	2319      	movs	r3, #25
   81242:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   81244:	4b7e      	ldr	r3, [pc, #504]	; (81440 <check_command+0x224>)
   81246:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   81248:	6938      	ldr	r0, [r7, #16]
   8124a:	4b7e      	ldr	r3, [pc, #504]	; (81444 <check_command+0x228>)
   8124c:	4798      	blx	r3
   8124e:	4603      	mov	r3, r0
   81250:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   81252:	4b7d      	ldr	r3, [pc, #500]	; (81448 <check_command+0x22c>)
   81254:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   81256:	6938      	ldr	r0, [r7, #16]
   81258:	4b7a      	ldr	r3, [pc, #488]	; (81444 <check_command+0x228>)
   8125a:	4798      	blx	r3
   8125c:	4603      	mov	r3, r0
   8125e:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   81260:	4b7a      	ldr	r3, [pc, #488]	; (8144c <check_command+0x230>)
   81262:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   81264:	6938      	ldr	r0, [r7, #16]
   81266:	4b77      	ldr	r3, [pc, #476]	; (81444 <check_command+0x228>)
   81268:	4798      	blx	r3
   8126a:	4603      	mov	r3, r0
   8126c:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   8126e:	7ebb      	ldrb	r3, [r7, #26]
   81270:	2b01      	cmp	r3, #1
   81272:	f040 8088 	bne.w	81386 <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   81276:	4b76      	ldr	r3, [pc, #472]	; (81450 <check_command+0x234>)
   81278:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   8127a:	e00d      	b.n	81298 <check_command+0x7c>
		{
			character = *message_array;
   8127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8127e:	781b      	ldrb	r3, [r3, #0]
   81280:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81282:	bf00      	nop
   81284:	4873      	ldr	r0, [pc, #460]	; (81454 <check_command+0x238>)
   81286:	6a39      	ldr	r1, [r7, #32]
   81288:	4b73      	ldr	r3, [pc, #460]	; (81458 <check_command+0x23c>)
   8128a:	4798      	blx	r3
   8128c:	4603      	mov	r3, r0
   8128e:	2b00      	cmp	r3, #0
   81290:	d1f8      	bne.n	81284 <check_command+0x68>
			
			message_array++;
   81292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81294:	3301      	adds	r3, #1
   81296:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   81298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8129a:	781b      	ldrb	r3, [r3, #0]
   8129c:	2b00      	cmp	r3, #0
   8129e:	d1ed      	bne.n	8127c <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   812a0:	4b6e      	ldr	r3, [pc, #440]	; (8145c <check_command+0x240>)
   812a2:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   812a4:	e00d      	b.n	812c2 <check_command+0xa6>
		{
			character = *message_array;
   812a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   812a8:	781b      	ldrb	r3, [r3, #0]
   812aa:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   812ac:	bf00      	nop
   812ae:	4869      	ldr	r0, [pc, #420]	; (81454 <check_command+0x238>)
   812b0:	6a39      	ldr	r1, [r7, #32]
   812b2:	4b69      	ldr	r3, [pc, #420]	; (81458 <check_command+0x23c>)
   812b4:	4798      	blx	r3
   812b6:	4603      	mov	r3, r0
   812b8:	2b00      	cmp	r3, #0
   812ba:	d1f8      	bne.n	812ae <check_command+0x92>
			
			message_array++;
   812bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   812be:	3301      	adds	r3, #1
   812c0:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   812c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   812c4:	781b      	ldrb	r3, [r3, #0]
   812c6:	2b00      	cmp	r3, #0
   812c8:	d1ed      	bne.n	812a6 <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   812ca:	4b65      	ldr	r3, [pc, #404]	; (81460 <check_command+0x244>)
   812cc:	681b      	ldr	r3, [r3, #0]
   812ce:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   812d0:	1d3b      	adds	r3, r7, #4
   812d2:	4618      	mov	r0, r3
   812d4:	4b63      	ldr	r3, [pc, #396]	; (81464 <check_command+0x248>)
   812d6:	4798      	blx	r3
   812d8:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   812da:	687b      	ldr	r3, [r7, #4]
   812dc:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   812de:	7dfb      	ldrb	r3, [r7, #23]
   812e0:	4618      	mov	r0, r3
   812e2:	4b61      	ldr	r3, [pc, #388]	; (81468 <check_command+0x24c>)
   812e4:	4798      	blx	r3
   812e6:	4603      	mov	r3, r0
   812e8:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   812ea:	7dfb      	ldrb	r3, [r7, #23]
   812ec:	011b      	lsls	r3, r3, #4
   812ee:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   812f0:	7bfb      	ldrb	r3, [r7, #15]
   812f2:	091b      	lsrs	r3, r3, #4
   812f4:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   812f6:	7dfb      	ldrb	r3, [r7, #23]
   812f8:	091b      	lsrs	r3, r3, #4
   812fa:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   812fc:	7bfb      	ldrb	r3, [r7, #15]
   812fe:	3330      	adds	r3, #48	; 0x30
   81300:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   81302:	7bbb      	ldrb	r3, [r7, #14]
   81304:	3330      	adds	r3, #48	; 0x30
   81306:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   81308:	69fb      	ldr	r3, [r7, #28]
   8130a:	2b00      	cmp	r3, #0
   8130c:	d00a      	beq.n	81324 <check_command+0x108>
		{
			character = 0x2B;
   8130e:	232b      	movs	r3, #43	; 0x2b
   81310:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   81312:	bf00      	nop
   81314:	484f      	ldr	r0, [pc, #316]	; (81454 <check_command+0x238>)
   81316:	6a39      	ldr	r1, [r7, #32]
   81318:	4b4f      	ldr	r3, [pc, #316]	; (81458 <check_command+0x23c>)
   8131a:	4798      	blx	r3
   8131c:	4603      	mov	r3, r0
   8131e:	2b00      	cmp	r3, #0
   81320:	d1f8      	bne.n	81314 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   81322:	e009      	b.n	81338 <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   81324:	232d      	movs	r3, #45	; 0x2d
   81326:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   81328:	bf00      	nop
   8132a:	484a      	ldr	r0, [pc, #296]	; (81454 <check_command+0x238>)
   8132c:	6a39      	ldr	r1, [r7, #32]
   8132e:	4b4a      	ldr	r3, [pc, #296]	; (81458 <check_command+0x23c>)
   81330:	4798      	blx	r3
   81332:	4603      	mov	r3, r0
   81334:	2b00      	cmp	r3, #0
   81336:	d1f8      	bne.n	8132a <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   81338:	bf00      	nop
   8133a:	7bbb      	ldrb	r3, [r7, #14]
   8133c:	4845      	ldr	r0, [pc, #276]	; (81454 <check_command+0x238>)
   8133e:	4619      	mov	r1, r3
   81340:	4b45      	ldr	r3, [pc, #276]	; (81458 <check_command+0x23c>)
   81342:	4798      	blx	r3
   81344:	4603      	mov	r3, r0
   81346:	2b00      	cmp	r3, #0
   81348:	d1f7      	bne.n	8133a <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   8134a:	bf00      	nop
   8134c:	7bfb      	ldrb	r3, [r7, #15]
   8134e:	4841      	ldr	r0, [pc, #260]	; (81454 <check_command+0x238>)
   81350:	4619      	mov	r1, r3
   81352:	4b41      	ldr	r3, [pc, #260]	; (81458 <check_command+0x23c>)
   81354:	4798      	blx	r3
   81356:	4603      	mov	r3, r0
   81358:	2b00      	cmp	r3, #0
   8135a:	d1f7      	bne.n	8134c <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   8135c:	4b43      	ldr	r3, [pc, #268]	; (8146c <check_command+0x250>)
   8135e:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   81360:	e00d      	b.n	8137e <check_command+0x162>
		{
			character = *message_array;
   81362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81364:	781b      	ldrb	r3, [r3, #0]
   81366:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81368:	bf00      	nop
   8136a:	483a      	ldr	r0, [pc, #232]	; (81454 <check_command+0x238>)
   8136c:	6a39      	ldr	r1, [r7, #32]
   8136e:	4b3a      	ldr	r3, [pc, #232]	; (81458 <check_command+0x23c>)
   81370:	4798      	blx	r3
   81372:	4603      	mov	r3, r0
   81374:	2b00      	cmp	r3, #0
   81376:	d1f8      	bne.n	8136a <check_command+0x14e>
			
			message_array++;
   81378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8137a:	3301      	adds	r3, #1
   8137c:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   8137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81380:	781b      	ldrb	r3, [r3, #0]
   81382:	2b00      	cmp	r3, #0
   81384:	d1ed      	bne.n	81362 <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   81386:	7e7b      	ldrb	r3, [r7, #25]
   81388:	2b01      	cmp	r3, #1
   8138a:	d114      	bne.n	813b6 <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   8138c:	4b38      	ldr	r3, [pc, #224]	; (81470 <check_command+0x254>)
   8138e:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81390:	e00d      	b.n	813ae <check_command+0x192>
		{
			character = *message_array;
   81392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81394:	781b      	ldrb	r3, [r3, #0]
   81396:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81398:	bf00      	nop
   8139a:	482e      	ldr	r0, [pc, #184]	; (81454 <check_command+0x238>)
   8139c:	6a39      	ldr	r1, [r7, #32]
   8139e:	4b2e      	ldr	r3, [pc, #184]	; (81458 <check_command+0x23c>)
   813a0:	4798      	blx	r3
   813a2:	4603      	mov	r3, r0
   813a4:	2b00      	cmp	r3, #0
   813a6:	d1f8      	bne.n	8139a <check_command+0x17e>
			
			message_array++;
   813a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813aa:	3301      	adds	r3, #1
   813ac:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   813ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813b0:	781b      	ldrb	r3, [r3, #0]
   813b2:	2b00      	cmp	r3, #0
   813b4:	d1ed      	bne.n	81392 <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   813b6:	7e3b      	ldrb	r3, [r7, #24]
   813b8:	2b01      	cmp	r3, #1
   813ba:	d13d      	bne.n	81438 <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   813bc:	4b2d      	ldr	r3, [pc, #180]	; (81474 <check_command+0x258>)
   813be:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   813c0:	e00d      	b.n	813de <check_command+0x1c2>
		{
			character = *message_array;
   813c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813c4:	781b      	ldrb	r3, [r3, #0]
   813c6:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   813c8:	bf00      	nop
   813ca:	4822      	ldr	r0, [pc, #136]	; (81454 <check_command+0x238>)
   813cc:	6a39      	ldr	r1, [r7, #32]
   813ce:	4b22      	ldr	r3, [pc, #136]	; (81458 <check_command+0x23c>)
   813d0:	4798      	blx	r3
   813d2:	4603      	mov	r3, r0
   813d4:	2b00      	cmp	r3, #0
   813d6:	d1f8      	bne.n	813ca <check_command+0x1ae>
			
			message_array++;
   813d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813da:	3301      	adds	r3, #1
   813dc:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   813de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813e0:	781b      	ldrb	r3, [r3, #0]
   813e2:	2b00      	cmp	r3, #0
   813e4:	d1ed      	bne.n	813c2 <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   813e6:	4b24      	ldr	r3, [pc, #144]	; (81478 <check_command+0x25c>)
   813e8:	681b      	ldr	r3, [r3, #0]
   813ea:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   813ec:	68bb      	ldr	r3, [r7, #8]
   813ee:	b2db      	uxtb	r3, r3
   813f0:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   813f2:	68bb      	ldr	r3, [r7, #8]
   813f4:	2b40      	cmp	r3, #64	; 0x40
   813f6:	d802      	bhi.n	813fe <check_command+0x1e2>
   813f8:	68bb      	ldr	r3, [r7, #8]
   813fa:	2b5a      	cmp	r3, #90	; 0x5a
   813fc:	d807      	bhi.n	8140e <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   813fe:	bf00      	nop
   81400:	4814      	ldr	r0, [pc, #80]	; (81454 <check_command+0x238>)
   81402:	68b9      	ldr	r1, [r7, #8]
   81404:	4b14      	ldr	r3, [pc, #80]	; (81458 <check_command+0x23c>)
   81406:	4798      	blx	r3
   81408:	4603      	mov	r3, r0
   8140a:	2b00      	cmp	r3, #0
   8140c:	d1f8      	bne.n	81400 <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   8140e:	4b1b      	ldr	r3, [pc, #108]	; (8147c <check_command+0x260>)
   81410:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   81412:	e00d      	b.n	81430 <check_command+0x214>
		{
			character = *message_array;
   81414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81416:	781b      	ldrb	r3, [r3, #0]
   81418:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8141a:	bf00      	nop
   8141c:	480d      	ldr	r0, [pc, #52]	; (81454 <check_command+0x238>)
   8141e:	6a39      	ldr	r1, [r7, #32]
   81420:	4b0d      	ldr	r3, [pc, #52]	; (81458 <check_command+0x23c>)
   81422:	4798      	blx	r3
   81424:	4603      	mov	r3, r0
   81426:	2b00      	cmp	r3, #0
   81428:	d1f8      	bne.n	8141c <check_command+0x200>
			
			message_array++;
   8142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8142c:	3301      	adds	r3, #1
   8142e:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   81430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81432:	781b      	ldrb	r3, [r3, #0]
   81434:	2b00      	cmp	r3, #0
   81436:	d1ed      	bne.n	81414 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   81438:	bf00      	nop
}
   8143a:	3728      	adds	r7, #40	; 0x28
   8143c:	46bd      	mov	sp, r7
   8143e:	bd80      	pop	{r7, pc}
   81440:	00086dd8 	.word	0x00086dd8
   81444:	00081481 	.word	0x00081481
   81448:	00086ddc 	.word	0x00086ddc
   8144c:	00086de8 	.word	0x00086de8
   81450:	00086dec 	.word	0x00086dec
   81454:	40098000 	.word	0x40098000
   81458:	00082c9d 	.word	0x00082c9d
   8145c:	00086e0c 	.word	0x00086e0c
   81460:	2007a644 	.word	0x2007a644
   81464:	000814dd 	.word	0x000814dd
   81468:	00081575 	.word	0x00081575
   8146c:	00086e28 	.word	0x00086e28
   81470:	00086e30 	.word	0x00086e30
   81474:	00086e4c 	.word	0x00086e4c
   81478:	2007a6f4 	.word	0x2007a6f4
   8147c:	00086e74 	.word	0x00086e74

00081480 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   81480:	b480      	push	{r7}
   81482:	b085      	sub	sp, #20
   81484:	af00      	add	r7, sp, #0
   81486:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   81488:	2300      	movs	r3, #0
   8148a:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   8148c:	2301      	movs	r3, #1
   8148e:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   81490:	687b      	ldr	r3, [r7, #4]
   81492:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   81494:	2300      	movs	r3, #0
   81496:	73fb      	strb	r3, [r7, #15]
   81498:	e014      	b.n	814c4 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   8149a:	68bb      	ldr	r3, [r7, #8]
   8149c:	781a      	ldrb	r2, [r3, #0]
   8149e:	7bfb      	ldrb	r3, [r7, #15]
   814a0:	490d      	ldr	r1, [pc, #52]	; (814d8 <check_string+0x58>)
   814a2:	5ccb      	ldrb	r3, [r1, r3]
   814a4:	429a      	cmp	r2, r3
   814a6:	d002      	beq.n	814ae <check_string+0x2e>
		{
			ret_val = 0;
   814a8:	2300      	movs	r3, #0
   814aa:	73bb      	strb	r3, [r7, #14]
			break;
   814ac:	e00d      	b.n	814ca <check_string+0x4a>
		}
		if (!*temp_str)
   814ae:	68bb      	ldr	r3, [r7, #8]
   814b0:	781b      	ldrb	r3, [r3, #0]
   814b2:	2b00      	cmp	r3, #0
   814b4:	d100      	bne.n	814b8 <check_string+0x38>
			break;
   814b6:	e008      	b.n	814ca <check_string+0x4a>
			
		temp_str++;
   814b8:	68bb      	ldr	r3, [r7, #8]
   814ba:	3301      	adds	r3, #1
   814bc:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   814be:	7bfb      	ldrb	r3, [r7, #15]
   814c0:	3301      	adds	r3, #1
   814c2:	73fb      	strb	r3, [r7, #15]
   814c4:	7bfb      	ldrb	r3, [r7, #15]
   814c6:	2b09      	cmp	r3, #9
   814c8:	d9e7      	bls.n	8149a <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   814ca:	7bbb      	ldrb	r3, [r7, #14]
}
   814cc:	4618      	mov	r0, r3
   814ce:	3714      	adds	r7, #20
   814d0:	46bd      	mov	sp, r7
   814d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   814d6:	4770      	bx	lr
   814d8:	20070464 	.word	0x20070464

000814dc <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   814dc:	b580      	push	{r7, lr}
   814de:	b084      	sub	sp, #16
   814e0:	af00      	add	r7, sp, #0
   814e2:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   814e4:	f04f 0300 	mov.w	r3, #0
   814e8:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   814ea:	687b      	ldr	r3, [r7, #4]
   814ec:	681b      	ldr	r3, [r3, #0]
   814ee:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   814f0:	68bb      	ldr	r3, [r7, #8]
   814f2:	089b      	lsrs	r3, r3, #2
   814f4:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   814f6:	4b1b      	ldr	r3, [pc, #108]	; (81564 <convert_to_temp+0x88>)
   814f8:	68b8      	ldr	r0, [r7, #8]
   814fa:	4798      	blx	r3
   814fc:	4603      	mov	r3, r0
   814fe:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   81500:	4b19      	ldr	r3, [pc, #100]	; (81568 <convert_to_temp+0x8c>)
   81502:	68f8      	ldr	r0, [r7, #12]
   81504:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   81508:	4798      	blx	r3
   8150a:	4603      	mov	r3, r0
   8150c:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   8150e:	4b17      	ldr	r3, [pc, #92]	; (8156c <convert_to_temp+0x90>)
   81510:	68f8      	ldr	r0, [r7, #12]
   81512:	f04f 0100 	mov.w	r1, #0
   81516:	4798      	blx	r3
   81518:	4603      	mov	r3, r0
   8151a:	2b00      	cmp	r3, #0
   8151c:	d009      	beq.n	81532 <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   8151e:	4b14      	ldr	r3, [pc, #80]	; (81570 <convert_to_temp+0x94>)
   81520:	68f8      	ldr	r0, [r7, #12]
   81522:	4798      	blx	r3
   81524:	4603      	mov	r3, r0
   81526:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   81528:	687b      	ldr	r3, [r7, #4]
   8152a:	68ba      	ldr	r2, [r7, #8]
   8152c:	601a      	str	r2, [r3, #0]
		return 1;	
   8152e:	2301      	movs	r3, #1
   81530:	e013      	b.n	8155a <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   81532:	4b0c      	ldr	r3, [pc, #48]	; (81564 <convert_to_temp+0x88>)
   81534:	68b8      	ldr	r0, [r7, #8]
   81536:	4798      	blx	r3
   81538:	4603      	mov	r3, r0
   8153a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   8153e:	4b0c      	ldr	r3, [pc, #48]	; (81570 <convert_to_temp+0x94>)
   81540:	4610      	mov	r0, r2
   81542:	4798      	blx	r3
   81544:	4603      	mov	r3, r0
   81546:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   81548:	4b09      	ldr	r3, [pc, #36]	; (81570 <convert_to_temp+0x94>)
   8154a:	68f8      	ldr	r0, [r7, #12]
   8154c:	4798      	blx	r3
   8154e:	4603      	mov	r3, r0
   81550:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   81552:	687b      	ldr	r3, [r7, #4]
   81554:	68ba      	ldr	r2, [r7, #8]
   81556:	601a      	str	r2, [r3, #0]
		return 0;
   81558:	2300      	movs	r3, #0
	}
}
   8155a:	4618      	mov	r0, r3
   8155c:	3710      	adds	r7, #16
   8155e:	46bd      	mov	sp, r7
   81560:	bd80      	pop	{r7, pc}
   81562:	bf00      	nop
   81564:	00086611 	.word	0x00086611
   81568:	000866c1 	.word	0x000866c1
   8156c:	00086a25 	.word	0x00086a25
   81570:	00086a4d 	.word	0x00086a4d

00081574 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   81574:	b480      	push	{r7}
   81576:	b085      	sub	sp, #20
   81578:	af00      	add	r7, sp, #0
   8157a:	4603      	mov	r3, r0
   8157c:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   8157e:	2300      	movs	r3, #0
   81580:	73fb      	strb	r3, [r7, #15]
   81582:	2300      	movs	r3, #0
   81584:	73bb      	strb	r3, [r7, #14]
   81586:	2300      	movs	r3, #0
   81588:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   8158a:	79fb      	ldrb	r3, [r7, #7]
   8158c:	2b09      	cmp	r3, #9
   8158e:	d919      	bls.n	815c4 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   81590:	79fa      	ldrb	r2, [r7, #7]
   81592:	4b10      	ldr	r3, [pc, #64]	; (815d4 <convert_to_bcd+0x60>)
   81594:	fba3 1302 	umull	r1, r3, r3, r2
   81598:	08d9      	lsrs	r1, r3, #3
   8159a:	460b      	mov	r3, r1
   8159c:	009b      	lsls	r3, r3, #2
   8159e:	440b      	add	r3, r1
   815a0:	005b      	lsls	r3, r3, #1
   815a2:	1ad3      	subs	r3, r2, r3
   815a4:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   815a6:	79fa      	ldrb	r2, [r7, #7]
   815a8:	4b0a      	ldr	r3, [pc, #40]	; (815d4 <convert_to_bcd+0x60>)
   815aa:	fba3 1302 	umull	r1, r3, r3, r2
   815ae:	08db      	lsrs	r3, r3, #3
   815b0:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   815b2:	7bfb      	ldrb	r3, [r7, #15]
   815b4:	011b      	lsls	r3, r3, #4
   815b6:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   815b8:	7bfa      	ldrb	r2, [r7, #15]
   815ba:	7bbb      	ldrb	r3, [r7, #14]
   815bc:	4313      	orrs	r3, r2
   815be:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   815c0:	7b7b      	ldrb	r3, [r7, #13]
   815c2:	e000      	b.n	815c6 <convert_to_bcd+0x52>
	}
	else
		return temp;
   815c4:	79fb      	ldrb	r3, [r7, #7]
}
   815c6:	4618      	mov	r0, r3
   815c8:	3714      	adds	r7, #20
   815ca:	46bd      	mov	sp, r7
   815cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   815d0:	4770      	bx	lr
   815d2:	bf00      	nop
   815d4:	cccccccd 	.word	0xcccccccd

000815d8 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   815d8:	b5b0      	push	{r4, r5, r7, lr}
   815da:	b086      	sub	sp, #24
   815dc:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   815de:	4b13      	ldr	r3, [pc, #76]	; (8162c <configure_usart+0x54>)
   815e0:	463c      	mov	r4, r7
   815e2:	461d      	mov	r5, r3
   815e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   815e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   815e8:	e895 0003 	ldmia.w	r5, {r0, r1}
   815ec:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   815f0:	2011      	movs	r0, #17
   815f2:	4b0f      	ldr	r3, [pc, #60]	; (81630 <configure_usart+0x58>)
   815f4:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   815f6:	4b0f      	ldr	r3, [pc, #60]	; (81634 <configure_usart+0x5c>)
   815f8:	4798      	blx	r3
   815fa:	4603      	mov	r3, r0
   815fc:	463a      	mov	r2, r7
   815fe:	480e      	ldr	r0, [pc, #56]	; (81638 <configure_usart+0x60>)
   81600:	4611      	mov	r1, r2
   81602:	461a      	mov	r2, r3
   81604:	4b0d      	ldr	r3, [pc, #52]	; (8163c <configure_usart+0x64>)
   81606:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   81608:	480b      	ldr	r0, [pc, #44]	; (81638 <configure_usart+0x60>)
   8160a:	f04f 31ff 	mov.w	r1, #4294967295
   8160e:	4b0c      	ldr	r3, [pc, #48]	; (81640 <configure_usart+0x68>)
   81610:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   81612:	4809      	ldr	r0, [pc, #36]	; (81638 <configure_usart+0x60>)
   81614:	4b0b      	ldr	r3, [pc, #44]	; (81644 <configure_usart+0x6c>)
   81616:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   81618:	4807      	ldr	r0, [pc, #28]	; (81638 <configure_usart+0x60>)
   8161a:	4b0b      	ldr	r3, [pc, #44]	; (81648 <configure_usart+0x70>)
   8161c:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   8161e:	2011      	movs	r0, #17
   81620:	4b0a      	ldr	r3, [pc, #40]	; (8164c <configure_usart+0x74>)
   81622:	4798      	blx	r3
}
   81624:	3718      	adds	r7, #24
   81626:	46bd      	mov	sp, r7
   81628:	bdb0      	pop	{r4, r5, r7, pc}
   8162a:	bf00      	nop
   8162c:	00086e78 	.word	0x00086e78
   81630:	000810cd 	.word	0x000810cd
   81634:	000810b9 	.word	0x000810b9
   81638:	40098000 	.word	0x40098000
   8163c:	00082b31 	.word	0x00082b31
   81640:	00082c31 	.word	0x00082c31
   81644:	00082bb5 	.word	0x00082bb5
   81648:	00082be5 	.word	0x00082be5
   8164c:	00080ff9 	.word	0x00080ff9

00081650 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   81650:	b580      	push	{r7, lr}
   81652:	b084      	sub	sp, #16
   81654:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   81656:	2300      	movs	r3, #0
   81658:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   8165a:	2300      	movs	r3, #0
   8165c:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   8165e:	4b1a      	ldr	r3, [pc, #104]	; (816c8 <usart_initialize+0x78>)
   81660:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   81662:	4b1a      	ldr	r3, [pc, #104]	; (816cc <usart_initialize+0x7c>)
   81664:	2200      	movs	r2, #0
   81666:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   81668:	2300      	movs	r3, #0
   8166a:	73fb      	strb	r3, [r7, #15]
   8166c:	e006      	b.n	8167c <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   8166e:	7bfb      	ldrb	r3, [r7, #15]
   81670:	4a17      	ldr	r2, [pc, #92]	; (816d0 <usart_initialize+0x80>)
   81672:	2100      	movs	r1, #0
   81674:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   81676:	7bfb      	ldrb	r3, [r7, #15]
   81678:	3301      	adds	r3, #1
   8167a:	73fb      	strb	r3, [r7, #15]
   8167c:	7bfb      	ldrb	r3, [r7, #15]
   8167e:	2b09      	cmp	r3, #9
   81680:	d9f5      	bls.n	8166e <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   81682:	4814      	ldr	r0, [pc, #80]	; (816d4 <usart_initialize+0x84>)
   81684:	2101      	movs	r1, #1
   81686:	4b14      	ldr	r3, [pc, #80]	; (816d8 <usart_initialize+0x88>)
   81688:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   8168a:	4812      	ldr	r0, [pc, #72]	; (816d4 <usart_initialize+0x84>)
   8168c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81690:	4b12      	ldr	r3, [pc, #72]	; (816dc <usart_initialize+0x8c>)
   81692:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   81694:	4b12      	ldr	r3, [pc, #72]	; (816e0 <usart_initialize+0x90>)
   81696:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   81698:	e00d      	b.n	816b6 <usart_initialize+0x66>
	{
		character = *message_array;
   8169a:	68bb      	ldr	r3, [r7, #8]
   8169c:	781b      	ldrb	r3, [r3, #0]
   8169e:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   816a0:	bf00      	nop
   816a2:	480c      	ldr	r0, [pc, #48]	; (816d4 <usart_initialize+0x84>)
   816a4:	6879      	ldr	r1, [r7, #4]
   816a6:	4b0f      	ldr	r3, [pc, #60]	; (816e4 <usart_initialize+0x94>)
   816a8:	4798      	blx	r3
   816aa:	4603      	mov	r3, r0
   816ac:	2b00      	cmp	r3, #0
   816ae:	d1f8      	bne.n	816a2 <usart_initialize+0x52>
			
		message_array++;
   816b0:	68bb      	ldr	r3, [r7, #8]
   816b2:	3301      	adds	r3, #1
   816b4:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   816b6:	68bb      	ldr	r3, [r7, #8]
   816b8:	781b      	ldrb	r3, [r3, #0]
   816ba:	2b00      	cmp	r3, #0
   816bc:	d1ed      	bne.n	8169a <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   816be:	bf00      	nop
}
   816c0:	3710      	adds	r7, #16
   816c2:	46bd      	mov	sp, r7
   816c4:	bd80      	pop	{r7, pc}
   816c6:	bf00      	nop
   816c8:	000815d9 	.word	0x000815d9
   816cc:	20070460 	.word	0x20070460
   816d0:	20070464 	.word	0x20070464
   816d4:	40098000 	.word	0x40098000
   816d8:	00082c15 	.word	0x00082c15
   816dc:	00082c31 	.word	0x00082c31
   816e0:	00086e90 	.word	0x00086e90
   816e4:	00082c9d 	.word	0x00082c9d

000816e8 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   816e8:	b580      	push	{r7, lr}
   816ea:	b082      	sub	sp, #8
   816ec:	af00      	add	r7, sp, #0
   816ee:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   816f0:	687b      	ldr	r3, [r7, #4]
   816f2:	2b07      	cmp	r3, #7
   816f4:	d82e      	bhi.n	81754 <osc_enable+0x6c>
   816f6:	a201      	add	r2, pc, #4	; (adr r2, 816fc <osc_enable+0x14>)
   816f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   816fc:	00081755 	.word	0x00081755
   81700:	0008171d 	.word	0x0008171d
   81704:	00081725 	.word	0x00081725
   81708:	0008172d 	.word	0x0008172d
   8170c:	00081735 	.word	0x00081735
   81710:	0008173d 	.word	0x0008173d
   81714:	00081745 	.word	0x00081745
   81718:	0008174d 	.word	0x0008174d
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8171c:	2000      	movs	r0, #0
   8171e:	4b0f      	ldr	r3, [pc, #60]	; (8175c <osc_enable+0x74>)
   81720:	4798      	blx	r3
		break;
   81722:	e017      	b.n	81754 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   81724:	2001      	movs	r0, #1
   81726:	4b0d      	ldr	r3, [pc, #52]	; (8175c <osc_enable+0x74>)
   81728:	4798      	blx	r3
		break;
   8172a:	e013      	b.n	81754 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8172c:	2000      	movs	r0, #0
   8172e:	4b0c      	ldr	r3, [pc, #48]	; (81760 <osc_enable+0x78>)
   81730:	4798      	blx	r3
		break;
   81732:	e00f      	b.n	81754 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   81734:	2010      	movs	r0, #16
   81736:	4b0a      	ldr	r3, [pc, #40]	; (81760 <osc_enable+0x78>)
   81738:	4798      	blx	r3
		break;
   8173a:	e00b      	b.n	81754 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8173c:	2020      	movs	r0, #32
   8173e:	4b08      	ldr	r3, [pc, #32]	; (81760 <osc_enable+0x78>)
   81740:	4798      	blx	r3
		break;
   81742:	e007      	b.n	81754 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   81744:	2000      	movs	r0, #0
   81746:	4b07      	ldr	r3, [pc, #28]	; (81764 <osc_enable+0x7c>)
   81748:	4798      	blx	r3
		break;
   8174a:	e003      	b.n	81754 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   8174c:	2001      	movs	r0, #1
   8174e:	4b05      	ldr	r3, [pc, #20]	; (81764 <osc_enable+0x7c>)
   81750:	4798      	blx	r3
		break;
   81752:	bf00      	nop
	}
}
   81754:	3708      	adds	r7, #8
   81756:	46bd      	mov	sp, r7
   81758:	bd80      	pop	{r7, pc}
   8175a:	bf00      	nop
   8175c:	000827e5 	.word	0x000827e5
   81760:	00082855 	.word	0x00082855
   81764:	000828f5 	.word	0x000828f5

00081768 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   81768:	b580      	push	{r7, lr}
   8176a:	b082      	sub	sp, #8
   8176c:	af00      	add	r7, sp, #0
   8176e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81770:	687b      	ldr	r3, [r7, #4]
   81772:	2b07      	cmp	r3, #7
   81774:	d826      	bhi.n	817c4 <osc_is_ready+0x5c>
   81776:	a201      	add	r2, pc, #4	; (adr r2, 8177c <osc_is_ready+0x14>)
   81778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8177c:	0008179d 	.word	0x0008179d
   81780:	000817a1 	.word	0x000817a1
   81784:	000817a1 	.word	0x000817a1
   81788:	000817b3 	.word	0x000817b3
   8178c:	000817b3 	.word	0x000817b3
   81790:	000817b3 	.word	0x000817b3
   81794:	000817b3 	.word	0x000817b3
   81798:	000817b3 	.word	0x000817b3
	case OSC_SLCK_32K_RC:
		return 1;
   8179c:	2301      	movs	r3, #1
   8179e:	e012      	b.n	817c6 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   817a0:	4b0b      	ldr	r3, [pc, #44]	; (817d0 <osc_is_ready+0x68>)
   817a2:	4798      	blx	r3
   817a4:	4603      	mov	r3, r0
   817a6:	2b00      	cmp	r3, #0
   817a8:	bf0c      	ite	eq
   817aa:	2300      	moveq	r3, #0
   817ac:	2301      	movne	r3, #1
   817ae:	b2db      	uxtb	r3, r3
   817b0:	e009      	b.n	817c6 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   817b2:	4b08      	ldr	r3, [pc, #32]	; (817d4 <osc_is_ready+0x6c>)
   817b4:	4798      	blx	r3
   817b6:	4603      	mov	r3, r0
   817b8:	2b00      	cmp	r3, #0
   817ba:	bf0c      	ite	eq
   817bc:	2300      	moveq	r3, #0
   817be:	2301      	movne	r3, #1
   817c0:	b2db      	uxtb	r3, r3
   817c2:	e000      	b.n	817c6 <osc_is_ready+0x5e>
	}

	return 0;
   817c4:	2300      	movs	r3, #0
}
   817c6:	4618      	mov	r0, r3
   817c8:	3708      	adds	r7, #8
   817ca:	46bd      	mov	sp, r7
   817cc:	bd80      	pop	{r7, pc}
   817ce:	bf00      	nop
   817d0:	00082821 	.word	0x00082821
   817d4:	00082961 	.word	0x00082961

000817d8 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   817d8:	b480      	push	{r7}
   817da:	b083      	sub	sp, #12
   817dc:	af00      	add	r7, sp, #0
   817de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   817e0:	687b      	ldr	r3, [r7, #4]
   817e2:	2b07      	cmp	r3, #7
   817e4:	d825      	bhi.n	81832 <osc_get_rate+0x5a>
   817e6:	a201      	add	r2, pc, #4	; (adr r2, 817ec <osc_get_rate+0x14>)
   817e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817ec:	0008180d 	.word	0x0008180d
   817f0:	00081813 	.word	0x00081813
   817f4:	00081819 	.word	0x00081819
   817f8:	0008181f 	.word	0x0008181f
   817fc:	00081823 	.word	0x00081823
   81800:	00081827 	.word	0x00081827
   81804:	0008182b 	.word	0x0008182b
   81808:	0008182f 	.word	0x0008182f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8180c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81810:	e010      	b.n	81834 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81816:	e00d      	b.n	81834 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8181c:	e00a      	b.n	81834 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8181e:	4b08      	ldr	r3, [pc, #32]	; (81840 <osc_get_rate+0x68>)
   81820:	e008      	b.n	81834 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81822:	4b08      	ldr	r3, [pc, #32]	; (81844 <osc_get_rate+0x6c>)
   81824:	e006      	b.n	81834 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81826:	4b08      	ldr	r3, [pc, #32]	; (81848 <osc_get_rate+0x70>)
   81828:	e004      	b.n	81834 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8182a:	4b07      	ldr	r3, [pc, #28]	; (81848 <osc_get_rate+0x70>)
   8182c:	e002      	b.n	81834 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8182e:	4b06      	ldr	r3, [pc, #24]	; (81848 <osc_get_rate+0x70>)
   81830:	e000      	b.n	81834 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81832:	2300      	movs	r3, #0
}
   81834:	4618      	mov	r0, r3
   81836:	370c      	adds	r7, #12
   81838:	46bd      	mov	sp, r7
   8183a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8183e:	4770      	bx	lr
   81840:	003d0900 	.word	0x003d0900
   81844:	007a1200 	.word	0x007a1200
   81848:	00b71b00 	.word	0x00b71b00

0008184c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8184c:	b580      	push	{r7, lr}
   8184e:	b082      	sub	sp, #8
   81850:	af00      	add	r7, sp, #0
   81852:	4603      	mov	r3, r0
   81854:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   81856:	bf00      	nop
   81858:	79fb      	ldrb	r3, [r7, #7]
   8185a:	4618      	mov	r0, r3
   8185c:	4b05      	ldr	r3, [pc, #20]	; (81874 <osc_wait_ready+0x28>)
   8185e:	4798      	blx	r3
   81860:	4603      	mov	r3, r0
   81862:	f083 0301 	eor.w	r3, r3, #1
   81866:	b2db      	uxtb	r3, r3
   81868:	2b00      	cmp	r3, #0
   8186a:	d1f5      	bne.n	81858 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   8186c:	3708      	adds	r7, #8
   8186e:	46bd      	mov	sp, r7
   81870:	bd80      	pop	{r7, pc}
   81872:	bf00      	nop
   81874:	00081769 	.word	0x00081769

00081878 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   81878:	b580      	push	{r7, lr}
   8187a:	b086      	sub	sp, #24
   8187c:	af00      	add	r7, sp, #0
   8187e:	60f8      	str	r0, [r7, #12]
   81880:	607a      	str	r2, [r7, #4]
   81882:	603b      	str	r3, [r7, #0]
   81884:	460b      	mov	r3, r1
   81886:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   81888:	687b      	ldr	r3, [r7, #4]
   8188a:	2b00      	cmp	r3, #0
   8188c:	d107      	bne.n	8189e <pll_config_init+0x26>
   8188e:	683b      	ldr	r3, [r7, #0]
   81890:	2b00      	cmp	r3, #0
   81892:	d104      	bne.n	8189e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81894:	68fb      	ldr	r3, [r7, #12]
   81896:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8189a:	601a      	str	r2, [r3, #0]
   8189c:	e019      	b.n	818d2 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8189e:	7afb      	ldrb	r3, [r7, #11]
   818a0:	4618      	mov	r0, r3
   818a2:	4b0d      	ldr	r3, [pc, #52]	; (818d8 <pll_config_init+0x60>)
   818a4:	4798      	blx	r3
   818a6:	4602      	mov	r2, r0
   818a8:	687b      	ldr	r3, [r7, #4]
   818aa:	fbb2 f3f3 	udiv	r3, r2, r3
   818ae:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   818b0:	697b      	ldr	r3, [r7, #20]
   818b2:	683a      	ldr	r2, [r7, #0]
   818b4:	fb02 f303 	mul.w	r3, r2, r3
   818b8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   818ba:	683b      	ldr	r3, [r7, #0]
   818bc:	3b01      	subs	r3, #1
   818be:	041a      	lsls	r2, r3, #16
   818c0:	4b06      	ldr	r3, [pc, #24]	; (818dc <pll_config_init+0x64>)
   818c2:	4013      	ands	r3, r2
   818c4:	687a      	ldr	r2, [r7, #4]
   818c6:	b2d2      	uxtb	r2, r2
   818c8:	4313      	orrs	r3, r2
   818ca:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   818ce:	68fb      	ldr	r3, [r7, #12]
   818d0:	601a      	str	r2, [r3, #0]
	}
}
   818d2:	3718      	adds	r7, #24
   818d4:	46bd      	mov	sp, r7
   818d6:	bd80      	pop	{r7, pc}
   818d8:	000817d9 	.word	0x000817d9
   818dc:	07ff0000 	.word	0x07ff0000

000818e0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   818e0:	b580      	push	{r7, lr}
   818e2:	b082      	sub	sp, #8
   818e4:	af00      	add	r7, sp, #0
   818e6:	6078      	str	r0, [r7, #4]
   818e8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   818ea:	683b      	ldr	r3, [r7, #0]
   818ec:	2b00      	cmp	r3, #0
   818ee:	d108      	bne.n	81902 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   818f0:	4b08      	ldr	r3, [pc, #32]	; (81914 <pll_enable+0x34>)
   818f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   818f4:	4b08      	ldr	r3, [pc, #32]	; (81918 <pll_enable+0x38>)
   818f6:	687a      	ldr	r2, [r7, #4]
   818f8:	6812      	ldr	r2, [r2, #0]
   818fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   818fe:	629a      	str	r2, [r3, #40]	; 0x28
   81900:	e005      	b.n	8190e <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   81902:	4b05      	ldr	r3, [pc, #20]	; (81918 <pll_enable+0x38>)
   81904:	687a      	ldr	r2, [r7, #4]
   81906:	6812      	ldr	r2, [r2, #0]
   81908:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   8190c:	61da      	str	r2, [r3, #28]
	}
}
   8190e:	3708      	adds	r7, #8
   81910:	46bd      	mov	sp, r7
   81912:	bd80      	pop	{r7, pc}
   81914:	0008297d 	.word	0x0008297d
   81918:	400e0600 	.word	0x400e0600

0008191c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8191c:	b580      	push	{r7, lr}
   8191e:	b082      	sub	sp, #8
   81920:	af00      	add	r7, sp, #0
   81922:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   81924:	687b      	ldr	r3, [r7, #4]
   81926:	2b00      	cmp	r3, #0
   81928:	d103      	bne.n	81932 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8192a:	4b05      	ldr	r3, [pc, #20]	; (81940 <pll_is_locked+0x24>)
   8192c:	4798      	blx	r3
   8192e:	4603      	mov	r3, r0
   81930:	e002      	b.n	81938 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   81932:	4b04      	ldr	r3, [pc, #16]	; (81944 <pll_is_locked+0x28>)
   81934:	4798      	blx	r3
   81936:	4603      	mov	r3, r0
}
   81938:	4618      	mov	r0, r3
   8193a:	3708      	adds	r7, #8
   8193c:	46bd      	mov	sp, r7
   8193e:	bd80      	pop	{r7, pc}
   81940:	00082995 	.word	0x00082995
   81944:	000829b1 	.word	0x000829b1

00081948 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   81948:	b580      	push	{r7, lr}
   8194a:	b082      	sub	sp, #8
   8194c:	af00      	add	r7, sp, #0
   8194e:	4603      	mov	r3, r0
   81950:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   81952:	79fb      	ldrb	r3, [r7, #7]
   81954:	3b03      	subs	r3, #3
   81956:	2b04      	cmp	r3, #4
   81958:	d808      	bhi.n	8196c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8195a:	79fb      	ldrb	r3, [r7, #7]
   8195c:	4618      	mov	r0, r3
   8195e:	4b05      	ldr	r3, [pc, #20]	; (81974 <pll_enable_source+0x2c>)
   81960:	4798      	blx	r3
		osc_wait_ready(e_src);
   81962:	79fb      	ldrb	r3, [r7, #7]
   81964:	4618      	mov	r0, r3
   81966:	4b04      	ldr	r3, [pc, #16]	; (81978 <pll_enable_source+0x30>)
   81968:	4798      	blx	r3
		break;
   8196a:	e000      	b.n	8196e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8196c:	bf00      	nop
	}
}
   8196e:	3708      	adds	r7, #8
   81970:	46bd      	mov	sp, r7
   81972:	bd80      	pop	{r7, pc}
   81974:	000816e9 	.word	0x000816e9
   81978:	0008184d 	.word	0x0008184d

0008197c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8197c:	b580      	push	{r7, lr}
   8197e:	b082      	sub	sp, #8
   81980:	af00      	add	r7, sp, #0
   81982:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81984:	bf00      	nop
   81986:	6878      	ldr	r0, [r7, #4]
   81988:	4b04      	ldr	r3, [pc, #16]	; (8199c <pll_wait_for_lock+0x20>)
   8198a:	4798      	blx	r3
   8198c:	4603      	mov	r3, r0
   8198e:	2b00      	cmp	r3, #0
   81990:	d0f9      	beq.n	81986 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   81992:	2300      	movs	r3, #0
}
   81994:	4618      	mov	r0, r3
   81996:	3708      	adds	r7, #8
   81998:	46bd      	mov	sp, r7
   8199a:	bd80      	pop	{r7, pc}
   8199c:	0008191d 	.word	0x0008191d

000819a0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   819a0:	b580      	push	{r7, lr}
   819a2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   819a4:	2006      	movs	r0, #6
   819a6:	4b04      	ldr	r3, [pc, #16]	; (819b8 <sysclk_get_main_hz+0x18>)
   819a8:	4798      	blx	r3
   819aa:	4602      	mov	r2, r0
   819ac:	4613      	mov	r3, r2
   819ae:	00db      	lsls	r3, r3, #3
   819b0:	1a9b      	subs	r3, r3, r2
   819b2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   819b4:	4618      	mov	r0, r3
   819b6:	bd80      	pop	{r7, pc}
   819b8:	000817d9 	.word	0x000817d9

000819bc <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   819bc:	b580      	push	{r7, lr}
   819be:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   819c0:	4b02      	ldr	r3, [pc, #8]	; (819cc <sysclk_get_cpu_hz+0x10>)
   819c2:	4798      	blx	r3
   819c4:	4603      	mov	r3, r0
   819c6:	085b      	lsrs	r3, r3, #1
}
   819c8:	4618      	mov	r0, r3
   819ca:	bd80      	pop	{r7, pc}
   819cc:	000819a1 	.word	0x000819a1

000819d0 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   819d0:	b590      	push	{r4, r7, lr}
   819d2:	b083      	sub	sp, #12
   819d4:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   819d6:	4b10      	ldr	r3, [pc, #64]	; (81a18 <sysclk_init+0x48>)
   819d8:	4798      	blx	r3
   819da:	4603      	mov	r3, r0
   819dc:	4618      	mov	r0, r3
   819de:	4b0f      	ldr	r3, [pc, #60]	; (81a1c <sysclk_init+0x4c>)
   819e0:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   819e2:	2006      	movs	r0, #6
   819e4:	4b0e      	ldr	r3, [pc, #56]	; (81a20 <sysclk_init+0x50>)
   819e6:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   819e8:	1d3b      	adds	r3, r7, #4
   819ea:	4618      	mov	r0, r3
   819ec:	2106      	movs	r1, #6
   819ee:	2201      	movs	r2, #1
   819f0:	230e      	movs	r3, #14
   819f2:	4c0c      	ldr	r4, [pc, #48]	; (81a24 <sysclk_init+0x54>)
   819f4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   819f6:	1d3b      	adds	r3, r7, #4
   819f8:	4618      	mov	r0, r3
   819fa:	2100      	movs	r1, #0
   819fc:	4b0a      	ldr	r3, [pc, #40]	; (81a28 <sysclk_init+0x58>)
   819fe:	4798      	blx	r3
		pll_wait_for_lock(0);
   81a00:	2000      	movs	r0, #0
   81a02:	4b0a      	ldr	r3, [pc, #40]	; (81a2c <sysclk_init+0x5c>)
   81a04:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81a06:	2010      	movs	r0, #16
   81a08:	4b09      	ldr	r3, [pc, #36]	; (81a30 <sysclk_init+0x60>)
   81a0a:	4798      	blx	r3
		break;
   81a0c:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81a0e:	4b09      	ldr	r3, [pc, #36]	; (81a34 <sysclk_init+0x64>)
   81a10:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   81a12:	370c      	adds	r7, #12
   81a14:	46bd      	mov	sp, r7
   81a16:	bd90      	pop	{r4, r7, pc}
   81a18:	000819bd 	.word	0x000819bd
   81a1c:	00082fa9 	.word	0x00082fa9
   81a20:	00081949 	.word	0x00081949
   81a24:	00081879 	.word	0x00081879
   81a28:	000818e1 	.word	0x000818e1
   81a2c:	0008197d 	.word	0x0008197d
   81a30:	00082761 	.word	0x00082761
   81a34:	00082e29 	.word	0x00082e29

00081a38 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   81a38:	b580      	push	{r7, lr}
   81a3a:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81a3c:	4b16      	ldr	r3, [pc, #88]	; (81a98 <safe_board_init+0x60>)
   81a3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81a42:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   81a44:	2001      	movs	r0, #1
   81a46:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a4a:	4b14      	ldr	r3, [pc, #80]	; (81a9c <safe_board_init+0x64>)
   81a4c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   81a4e:	2000      	movs	r0, #0
   81a50:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a54:	4b11      	ldr	r3, [pc, #68]	; (81a9c <safe_board_init+0x64>)
   81a56:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   81a58:	2034      	movs	r0, #52	; 0x34
   81a5a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a5e:	4b0f      	ldr	r3, [pc, #60]	; (81a9c <safe_board_init+0x64>)
   81a60:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   81a62:	2035      	movs	r0, #53	; 0x35
   81a64:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a68:	4b0c      	ldr	r3, [pc, #48]	; (81a9c <safe_board_init+0x64>)
   81a6a:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   81a6c:	202f      	movs	r0, #47	; 0x2f
   81a6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a72:	4b0a      	ldr	r3, [pc, #40]	; (81a9c <safe_board_init+0x64>)
   81a74:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   81a76:	202e      	movs	r0, #46	; 0x2e
   81a78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a7c:	4b07      	ldr	r3, [pc, #28]	; (81a9c <safe_board_init+0x64>)
   81a7e:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   81a80:	208f      	movs	r0, #143	; 0x8f
   81a82:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a86:	4b05      	ldr	r3, [pc, #20]	; (81a9c <safe_board_init+0x64>)
   81a88:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   81a8a:	2090      	movs	r0, #144	; 0x90
   81a8c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a90:	4b02      	ldr	r3, [pc, #8]	; (81a9c <safe_board_init+0x64>)
   81a92:	4798      	blx	r3
	#endif
	return;
   81a94:	bf00      	nop
}
   81a96:	bd80      	pop	{r7, pc}
   81a98:	400e1a50 	.word	0x400e1a50
   81a9c:	00082441 	.word	0x00082441

00081aa0 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   81aa0:	b580      	push	{r7, lr}
   81aa2:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   81aa4:	2057      	movs	r0, #87	; 0x57
   81aa6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81aaa:	4b25      	ldr	r3, [pc, #148]	; (81b40 <board_init+0xa0>)
   81aac:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   81aae:	2057      	movs	r0, #87	; 0x57
   81ab0:	4b24      	ldr	r3, [pc, #144]	; (81b44 <board_init+0xa4>)
   81ab2:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81ab4:	203b      	movs	r0, #59	; 0x3b
   81ab6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81aba:	4b21      	ldr	r3, [pc, #132]	; (81b40 <board_init+0xa0>)
   81abc:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81abe:	2055      	movs	r0, #85	; 0x55
   81ac0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81ac4:	4b1e      	ldr	r3, [pc, #120]	; (81b40 <board_init+0xa0>)
   81ac6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81ac8:	2056      	movs	r0, #86	; 0x56
   81aca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81ace:	4b1c      	ldr	r3, [pc, #112]	; (81b40 <board_init+0xa0>)
   81ad0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81ad2:	2087      	movs	r0, #135	; 0x87
   81ad4:	491c      	ldr	r1, [pc, #112]	; (81b48 <board_init+0xa8>)
   81ad6:	4b1a      	ldr	r3, [pc, #104]	; (81b40 <board_init+0xa0>)
   81ad8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81ada:	2037      	movs	r0, #55	; 0x37
   81adc:	491b      	ldr	r1, [pc, #108]	; (81b4c <board_init+0xac>)
   81ade:	4b18      	ldr	r3, [pc, #96]	; (81b40 <board_init+0xa0>)
   81ae0:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81ae2:	481b      	ldr	r0, [pc, #108]	; (81b50 <board_init+0xb0>)
   81ae4:	f44f 7140 	mov.w	r1, #768	; 0x300
   81ae8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81aec:	4b19      	ldr	r3, [pc, #100]	; (81b54 <board_init+0xb4>)
   81aee:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81af0:	2019      	movs	r0, #25
   81af2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81af6:	4b12      	ldr	r3, [pc, #72]	; (81b40 <board_init+0xa0>)
   81af8:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81afa:	201a      	movs	r0, #26
   81afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b00:	4b0f      	ldr	r3, [pc, #60]	; (81b40 <board_init+0xa0>)
   81b02:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81b04:	201b      	movs	r0, #27
   81b06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b0a:	4b0d      	ldr	r3, [pc, #52]	; (81b40 <board_init+0xa0>)
   81b0c:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81b0e:	201c      	movs	r0, #28
   81b10:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b14:	4b0a      	ldr	r3, [pc, #40]	; (81b40 <board_init+0xa0>)
   81b16:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   81b18:	200a      	movs	r0, #10
   81b1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b1e:	4b08      	ldr	r3, [pc, #32]	; (81b40 <board_init+0xa0>)
   81b20:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   81b22:	200b      	movs	r0, #11
   81b24:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b28:	4b05      	ldr	r3, [pc, #20]	; (81b40 <board_init+0xa0>)
   81b2a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   81b2c:	208e      	movs	r0, #142	; 0x8e
   81b2e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81b32:	4b03      	ldr	r3, [pc, #12]	; (81b40 <board_init+0xa0>)
   81b34:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   81b36:	208e      	movs	r0, #142	; 0x8e
   81b38:	4b07      	ldr	r3, [pc, #28]	; (81b58 <board_init+0xb8>)
   81b3a:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   81b3c:	bd80      	pop	{r7, pc}
   81b3e:	bf00      	nop
   81b40:	00082441 	.word	0x00082441
   81b44:	00082379 	.word	0x00082379
   81b48:	28000079 	.word	0x28000079
   81b4c:	28000059 	.word	0x28000059
   81b50:	400e0e00 	.word	0x400e0e00
   81b54:	0008257d 	.word	0x0008257d
   81b58:	000823ad 	.word	0x000823ad

00081b5c <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81b5c:	b480      	push	{r7}
   81b5e:	b083      	sub	sp, #12
   81b60:	af00      	add	r7, sp, #0
   81b62:	6078      	str	r0, [r7, #4]
   81b64:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   81b66:	687b      	ldr	r3, [r7, #4]
   81b68:	683a      	ldr	r2, [r7, #0]
   81b6a:	601a      	str	r2, [r3, #0]
}
   81b6c:	370c      	adds	r7, #12
   81b6e:	46bd      	mov	sp, r7
   81b70:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b74:	4770      	bx	lr
   81b76:	bf00      	nop

00081b78 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81b78:	b480      	push	{r7}
   81b7a:	b083      	sub	sp, #12
   81b7c:	af00      	add	r7, sp, #0
   81b7e:	6078      	str	r0, [r7, #4]
   81b80:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   81b82:	687b      	ldr	r3, [r7, #4]
   81b84:	683a      	ldr	r2, [r7, #0]
   81b86:	605a      	str	r2, [r3, #4]
}
   81b88:	370c      	adds	r7, #12
   81b8a:	46bd      	mov	sp, r7
   81b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b90:	4770      	bx	lr
   81b92:	bf00      	nop

00081b94 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   81b94:	b580      	push	{r7, lr}
   81b96:	b082      	sub	sp, #8
   81b98:	af00      	add	r7, sp, #0
   81b9a:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   81b9c:	687b      	ldr	r3, [r7, #4]
   81b9e:	685b      	ldr	r3, [r3, #4]
   81ba0:	4618      	mov	r0, r3
   81ba2:	4b02      	ldr	r3, [pc, #8]	; (81bac <sn65hvd234_enable+0x18>)
   81ba4:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   81ba6:	3708      	adds	r7, #8
   81ba8:	46bd      	mov	sp, r7
   81baa:	bd80      	pop	{r7, pc}
   81bac:	00082379 	.word	0x00082379

00081bb0 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   81bb0:	b580      	push	{r7, lr}
   81bb2:	b082      	sub	sp, #8
   81bb4:	af00      	add	r7, sp, #0
   81bb6:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   81bb8:	687b      	ldr	r3, [r7, #4]
   81bba:	681b      	ldr	r3, [r3, #0]
   81bbc:	4618      	mov	r0, r3
   81bbe:	4b02      	ldr	r3, [pc, #8]	; (81bc8 <sn65hvd234_disable_low_power+0x18>)
   81bc0:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   81bc2:	3708      	adds	r7, #8
   81bc4:	46bd      	mov	sp, r7
   81bc6:	bd80      	pop	{r7, pc}
   81bc8:	000823ad 	.word	0x000823ad

00081bcc <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   81bcc:	b580      	push	{r7, lr}
   81bce:	b08a      	sub	sp, #40	; 0x28
   81bd0:	af00      	add	r7, sp, #0
   81bd2:	60f8      	str	r0, [r7, #12]
   81bd4:	60b9      	str	r1, [r7, #8]
   81bd6:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81bd8:	687b      	ldr	r3, [r7, #4]
   81bda:	f246 12a8 	movw	r2, #25000	; 0x61a8
   81bde:	fb02 f203 	mul.w	r2, r2, r3
   81be2:	68bb      	ldr	r3, [r7, #8]
   81be4:	4413      	add	r3, r2
   81be6:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   81be8:	687b      	ldr	r3, [r7, #4]
   81bea:	f246 11a8 	movw	r1, #25000	; 0x61a8
   81bee:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81bf2:	fbb2 f3f3 	udiv	r3, r2, r3
   81bf6:	2b80      	cmp	r3, #128	; 0x80
   81bf8:	d901      	bls.n	81bfe <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   81bfa:	2300      	movs	r3, #0
   81bfc:	e085      	b.n	81d0a <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   81bfe:	68bb      	ldr	r3, [r7, #8]
   81c00:	085a      	lsrs	r2, r3, #1
   81c02:	687b      	ldr	r3, [r7, #4]
   81c04:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81c08:	fb01 f303 	mul.w	r3, r1, r3
   81c0c:	429a      	cmp	r2, r3
   81c0e:	d201      	bcs.n	81c14 <can_set_baudrate+0x48>
		return 0;
   81c10:	2300      	movs	r3, #0
   81c12:	e07a      	b.n	81d0a <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   81c14:	2308      	movs	r3, #8
   81c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   81c1a:	f04f 33ff 	mov.w	r3, #4294967295
   81c1e:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81c20:	2308      	movs	r3, #8
   81c22:	77fb      	strb	r3, [r7, #31]
   81c24:	e02b      	b.n	81c7e <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   81c26:	7ffb      	ldrb	r3, [r7, #31]
   81c28:	687a      	ldr	r2, [r7, #4]
   81c2a:	fb02 f303 	mul.w	r3, r2, r3
   81c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81c32:	fb02 f303 	mul.w	r3, r2, r3
   81c36:	68ba      	ldr	r2, [r7, #8]
   81c38:	fbb2 f3f3 	udiv	r3, r2, r3
   81c3c:	2b80      	cmp	r3, #128	; 0x80
   81c3e:	d81b      	bhi.n	81c78 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   81c40:	7ffb      	ldrb	r3, [r7, #31]
   81c42:	687a      	ldr	r2, [r7, #4]
   81c44:	fb02 f303 	mul.w	r3, r2, r3
   81c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81c4c:	fb02 f203 	mul.w	r2, r2, r3
   81c50:	68bb      	ldr	r3, [r7, #8]
   81c52:	fbb3 f1f2 	udiv	r1, r3, r2
   81c56:	fb02 f201 	mul.w	r2, r2, r1
   81c5a:	1a9b      	subs	r3, r3, r2
   81c5c:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   81c5e:	69ba      	ldr	r2, [r7, #24]
   81c60:	6a3b      	ldr	r3, [r7, #32]
   81c62:	429a      	cmp	r2, r3
   81c64:	d208      	bcs.n	81c78 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   81c66:	69bb      	ldr	r3, [r7, #24]
   81c68:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   81c6a:	7ffb      	ldrb	r3, [r7, #31]
   81c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   81c70:	6a3b      	ldr	r3, [r7, #32]
   81c72:	2b00      	cmp	r3, #0
   81c74:	d100      	bne.n	81c78 <can_set_baudrate+0xac>
					break;
   81c76:	e005      	b.n	81c84 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81c78:	7ffb      	ldrb	r3, [r7, #31]
   81c7a:	3301      	adds	r3, #1
   81c7c:	77fb      	strb	r3, [r7, #31]
   81c7e:	7ffb      	ldrb	r3, [r7, #31]
   81c80:	2b19      	cmp	r3, #25
   81c82:	d9d0      	bls.n	81c26 <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   81c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81c88:	687a      	ldr	r2, [r7, #4]
   81c8a:	fb02 f303 	mul.w	r3, r2, r3
   81c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81c92:	fb02 f303 	mul.w	r3, r2, r3
   81c96:	68ba      	ldr	r2, [r7, #8]
   81c98:	fbb2 f3f3 	udiv	r3, r2, r3
   81c9c:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   81c9e:	7dfb      	ldrb	r3, [r7, #23]
   81ca0:	2b01      	cmp	r3, #1
   81ca2:	d801      	bhi.n	81ca8 <can_set_baudrate+0xdc>
		return 0;
   81ca4:	2300      	movs	r3, #0
   81ca6:	e030      	b.n	81d0a <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   81ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81cac:	f1a3 0208 	sub.w	r2, r3, #8
   81cb0:	4613      	mov	r3, r2
   81cb2:	005b      	lsls	r3, r3, #1
   81cb4:	4413      	add	r3, r2
   81cb6:	005b      	lsls	r3, r3, #1
   81cb8:	4a16      	ldr	r2, [pc, #88]	; (81d14 <can_set_baudrate+0x148>)
   81cba:	4413      	add	r3, r2
   81cbc:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81cbe:	68f8      	ldr	r0, [r7, #12]
   81cc0:	4b15      	ldr	r3, [pc, #84]	; (81d18 <can_set_baudrate+0x14c>)
   81cc2:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81cc4:	693b      	ldr	r3, [r7, #16]
   81cc6:	78db      	ldrb	r3, [r3, #3]
   81cc8:	3b01      	subs	r3, #1
   81cca:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81cce:	693b      	ldr	r3, [r7, #16]
   81cd0:	789b      	ldrb	r3, [r3, #2]
   81cd2:	3b01      	subs	r3, #1
   81cd4:	011b      	lsls	r3, r3, #4
   81cd6:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81cda:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81cdc:	693b      	ldr	r3, [r7, #16]
   81cde:	785b      	ldrb	r3, [r3, #1]
   81ce0:	3b01      	subs	r3, #1
   81ce2:	021b      	lsls	r3, r3, #8
   81ce4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81ce8:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81cea:	693b      	ldr	r3, [r7, #16]
   81cec:	791b      	ldrb	r3, [r3, #4]
   81cee:	3b01      	subs	r3, #1
   81cf0:	031b      	lsls	r3, r3, #12
   81cf2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81cf6:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81cf8:	7dfb      	ldrb	r3, [r7, #23]
   81cfa:	3b01      	subs	r3, #1
   81cfc:	041b      	lsls	r3, r3, #16
   81cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81d02:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81d04:	68fb      	ldr	r3, [r7, #12]
   81d06:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81d08:	2301      	movs	r3, #1
}
   81d0a:	4618      	mov	r0, r3
   81d0c:	3728      	adds	r7, #40	; 0x28
   81d0e:	46bd      	mov	sp, r7
   81d10:	bd80      	pop	{r7, pc}
   81d12:	bf00      	nop
   81d14:	00086eb0 	.word	0x00086eb0
   81d18:	00081dc5 	.word	0x00081dc5

00081d1c <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81d1c:	b580      	push	{r7, lr}
   81d1e:	b086      	sub	sp, #24
   81d20:	af00      	add	r7, sp, #0
   81d22:	60f8      	str	r0, [r7, #12]
   81d24:	60b9      	str	r1, [r7, #8]
   81d26:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   81d28:	68f8      	ldr	r0, [r7, #12]
   81d2a:	68b9      	ldr	r1, [r7, #8]
   81d2c:	687a      	ldr	r2, [r7, #4]
   81d2e:	4b17      	ldr	r3, [pc, #92]	; (81d8c <can_init+0x70>)
   81d30:	4798      	blx	r3
   81d32:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   81d34:	697b      	ldr	r3, [r7, #20]
   81d36:	2b00      	cmp	r3, #0
   81d38:	d101      	bne.n	81d3e <can_init+0x22>
		return 0;
   81d3a:	2300      	movs	r3, #0
   81d3c:	e021      	b.n	81d82 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81d3e:	68f8      	ldr	r0, [r7, #12]
   81d40:	4b13      	ldr	r3, [pc, #76]	; (81d90 <can_init+0x74>)
   81d42:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   81d44:	68f8      	ldr	r0, [r7, #12]
   81d46:	4b13      	ldr	r3, [pc, #76]	; (81d94 <can_init+0x78>)
   81d48:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   81d4a:	2300      	movs	r3, #0
   81d4c:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   81d4e:	2300      	movs	r3, #0
   81d50:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81d52:	e006      	b.n	81d62 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   81d54:	68f8      	ldr	r0, [r7, #12]
   81d56:	4b10      	ldr	r3, [pc, #64]	; (81d98 <can_init+0x7c>)
   81d58:	4798      	blx	r3
   81d5a:	6178      	str	r0, [r7, #20]
		ul_tick++;
   81d5c:	693b      	ldr	r3, [r7, #16]
   81d5e:	3301      	adds	r3, #1
   81d60:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81d62:	697b      	ldr	r3, [r7, #20]
   81d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   81d68:	2b00      	cmp	r3, #0
   81d6a:	d103      	bne.n	81d74 <can_init+0x58>
   81d6c:	693a      	ldr	r2, [r7, #16]
   81d6e:	4b0b      	ldr	r3, [pc, #44]	; (81d9c <can_init+0x80>)
   81d70:	429a      	cmp	r2, r3
   81d72:	d9ef      	bls.n	81d54 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   81d74:	693a      	ldr	r2, [r7, #16]
   81d76:	4b0a      	ldr	r3, [pc, #40]	; (81da0 <can_init+0x84>)
   81d78:	429a      	cmp	r2, r3
   81d7a:	d101      	bne.n	81d80 <can_init+0x64>
		return 0;
   81d7c:	2300      	movs	r3, #0
   81d7e:	e000      	b.n	81d82 <can_init+0x66>
	} else {
		return 1;
   81d80:	2301      	movs	r3, #1
	}
}
   81d82:	4618      	mov	r0, r3
   81d84:	3718      	adds	r7, #24
   81d86:	46bd      	mov	sp, r7
   81d88:	bd80      	pop	{r7, pc}
   81d8a:	bf00      	nop
   81d8c:	00081bcd 	.word	0x00081bcd
   81d90:	0008215d 	.word	0x0008215d
   81d94:	00081da5 	.word	0x00081da5
   81d98:	00081e1d 	.word	0x00081e1d
   81d9c:	0001869f 	.word	0x0001869f
   81da0:	000186a0 	.word	0x000186a0

00081da4 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   81da4:	b480      	push	{r7}
   81da6:	b083      	sub	sp, #12
   81da8:	af00      	add	r7, sp, #0
   81daa:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81dac:	687b      	ldr	r3, [r7, #4]
   81dae:	681b      	ldr	r3, [r3, #0]
   81db0:	f043 0201 	orr.w	r2, r3, #1
   81db4:	687b      	ldr	r3, [r7, #4]
   81db6:	601a      	str	r2, [r3, #0]
}
   81db8:	370c      	adds	r7, #12
   81dba:	46bd      	mov	sp, r7
   81dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dc0:	4770      	bx	lr
   81dc2:	bf00      	nop

00081dc4 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81dc4:	b480      	push	{r7}
   81dc6:	b083      	sub	sp, #12
   81dc8:	af00      	add	r7, sp, #0
   81dca:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81dcc:	687b      	ldr	r3, [r7, #4]
   81dce:	681b      	ldr	r3, [r3, #0]
   81dd0:	f023 0201 	bic.w	r2, r3, #1
   81dd4:	687b      	ldr	r3, [r7, #4]
   81dd6:	601a      	str	r2, [r3, #0]
}
   81dd8:	370c      	adds	r7, #12
   81dda:	46bd      	mov	sp, r7
   81ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81de0:	4770      	bx	lr
   81de2:	bf00      	nop

00081de4 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81de4:	b480      	push	{r7}
   81de6:	b083      	sub	sp, #12
   81de8:	af00      	add	r7, sp, #0
   81dea:	6078      	str	r0, [r7, #4]
   81dec:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   81dee:	687b      	ldr	r3, [r7, #4]
   81df0:	683a      	ldr	r2, [r7, #0]
   81df2:	605a      	str	r2, [r3, #4]
}
   81df4:	370c      	adds	r7, #12
   81df6:	46bd      	mov	sp, r7
   81df8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dfc:	4770      	bx	lr
   81dfe:	bf00      	nop

00081e00 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81e00:	b480      	push	{r7}
   81e02:	b083      	sub	sp, #12
   81e04:	af00      	add	r7, sp, #0
   81e06:	6078      	str	r0, [r7, #4]
   81e08:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81e0a:	687b      	ldr	r3, [r7, #4]
   81e0c:	683a      	ldr	r2, [r7, #0]
   81e0e:	609a      	str	r2, [r3, #8]
}
   81e10:	370c      	adds	r7, #12
   81e12:	46bd      	mov	sp, r7
   81e14:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e18:	4770      	bx	lr
   81e1a:	bf00      	nop

00081e1c <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81e1c:	b480      	push	{r7}
   81e1e:	b083      	sub	sp, #12
   81e20:	af00      	add	r7, sp, #0
   81e22:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   81e24:	687b      	ldr	r3, [r7, #4]
   81e26:	691b      	ldr	r3, [r3, #16]
}
   81e28:	4618      	mov	r0, r3
   81e2a:	370c      	adds	r7, #12
   81e2c:	46bd      	mov	sp, r7
   81e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e32:	4770      	bx	lr

00081e34 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   81e34:	b480      	push	{r7}
   81e36:	b085      	sub	sp, #20
   81e38:	af00      	add	r7, sp, #0
   81e3a:	6078      	str	r0, [r7, #4]
   81e3c:	460b      	mov	r3, r1
   81e3e:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   81e40:	687b      	ldr	r3, [r7, #4]
   81e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81e44:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81e48:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   81e4a:	78fa      	ldrb	r2, [r7, #3]
   81e4c:	68fb      	ldr	r3, [r7, #12]
   81e4e:	431a      	orrs	r2, r3
   81e50:	687b      	ldr	r3, [r7, #4]
   81e52:	625a      	str	r2, [r3, #36]	; 0x24
}
   81e54:	3714      	adds	r7, #20
   81e56:	46bd      	mov	sp, r7
   81e58:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e5c:	4770      	bx	lr
   81e5e:	bf00      	nop

00081e60 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   81e60:	b480      	push	{r7}
   81e62:	b083      	sub	sp, #12
   81e64:	af00      	add	r7, sp, #0
   81e66:	6078      	str	r0, [r7, #4]
   81e68:	460b      	mov	r3, r1
   81e6a:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   81e6c:	78fb      	ldrb	r3, [r7, #3]
   81e6e:	687a      	ldr	r2, [r7, #4]
   81e70:	015b      	lsls	r3, r3, #5
   81e72:	4413      	add	r3, r2
   81e74:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81e78:	681b      	ldr	r3, [r3, #0]
}
   81e7a:	4618      	mov	r0, r3
   81e7c:	370c      	adds	r7, #12
   81e7e:	46bd      	mov	sp, r7
   81e80:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e84:	4770      	bx	lr
   81e86:	bf00      	nop

00081e88 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81e88:	b480      	push	{r7}
   81e8a:	b085      	sub	sp, #20
   81e8c:	af00      	add	r7, sp, #0
   81e8e:	6078      	str	r0, [r7, #4]
   81e90:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81e92:	683b      	ldr	r3, [r7, #0]
   81e94:	681b      	ldr	r3, [r3, #0]
   81e96:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81e98:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   81e9a:	683a      	ldr	r2, [r7, #0]
   81e9c:	7992      	ldrb	r2, [r2, #6]
   81e9e:	0412      	lsls	r2, r2, #16
   81ea0:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81ea4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81ea8:	6879      	ldr	r1, [r7, #4]
   81eaa:	015b      	lsls	r3, r3, #5
   81eac:	440b      	add	r3, r1
   81eae:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81eb2:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   81eb4:	3714      	adds	r7, #20
   81eb6:	46bd      	mov	sp, r7
   81eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ebc:	4770      	bx	lr
   81ebe:	bf00      	nop

00081ec0 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81ec0:	b480      	push	{r7}
   81ec2:	b085      	sub	sp, #20
   81ec4:	af00      	add	r7, sp, #0
   81ec6:	6078      	str	r0, [r7, #4]
   81ec8:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81eca:	683b      	ldr	r3, [r7, #0]
   81ecc:	681b      	ldr	r3, [r3, #0]
   81ece:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81ed0:	683b      	ldr	r3, [r7, #0]
   81ed2:	791b      	ldrb	r3, [r3, #4]
   81ed4:	2b00      	cmp	r3, #0
   81ed6:	d12e      	bne.n	81f36 <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81ed8:	7bfb      	ldrb	r3, [r7, #15]
   81eda:	687a      	ldr	r2, [r7, #4]
   81edc:	3310      	adds	r3, #16
   81ede:	015b      	lsls	r3, r3, #5
   81ee0:	4413      	add	r3, r2
   81ee2:	2200      	movs	r2, #0
   81ee4:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   81ee6:	7bfb      	ldrb	r3, [r7, #15]
   81ee8:	687a      	ldr	r2, [r7, #4]
   81eea:	3310      	adds	r3, #16
   81eec:	015b      	lsls	r3, r3, #5
   81eee:	4413      	add	r3, r2
   81ef0:	2200      	movs	r2, #0
   81ef2:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81ef4:	7bfb      	ldrb	r3, [r7, #15]
   81ef6:	687a      	ldr	r2, [r7, #4]
   81ef8:	015b      	lsls	r3, r3, #5
   81efa:	4413      	add	r3, r2
   81efc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81f00:	2200      	movs	r2, #0
   81f02:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81f04:	7bfb      	ldrb	r3, [r7, #15]
   81f06:	687a      	ldr	r2, [r7, #4]
   81f08:	015b      	lsls	r3, r3, #5
   81f0a:	4413      	add	r3, r2
   81f0c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81f10:	2200      	movs	r2, #0
   81f12:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81f14:	7bfb      	ldrb	r3, [r7, #15]
   81f16:	687a      	ldr	r2, [r7, #4]
   81f18:	015b      	lsls	r3, r3, #5
   81f1a:	4413      	add	r3, r2
   81f1c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81f20:	2200      	movs	r2, #0
   81f22:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81f24:	7bfb      	ldrb	r3, [r7, #15]
   81f26:	687a      	ldr	r2, [r7, #4]
   81f28:	015b      	lsls	r3, r3, #5
   81f2a:	4413      	add	r3, r2
   81f2c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81f30:	2200      	movs	r2, #0
   81f32:	605a      	str	r2, [r3, #4]
		return;
   81f34:	e04e      	b.n	81fd4 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81f36:	7bfb      	ldrb	r3, [r7, #15]
   81f38:	7bfa      	ldrb	r2, [r7, #15]
   81f3a:	6879      	ldr	r1, [r7, #4]
   81f3c:	3210      	adds	r2, #16
   81f3e:	0152      	lsls	r2, r2, #5
   81f40:	440a      	add	r2, r1
   81f42:	6812      	ldr	r2, [r2, #0]
   81f44:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81f48:	683a      	ldr	r2, [r7, #0]
   81f4a:	79d2      	ldrb	r2, [r2, #7]
   81f4c:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   81f4e:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81f50:	6879      	ldr	r1, [r7, #4]
   81f52:	3310      	adds	r3, #16
   81f54:	015b      	lsls	r3, r3, #5
   81f56:	440b      	add	r3, r1
   81f58:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81f5a:	683b      	ldr	r3, [r7, #0]
   81f5c:	795b      	ldrb	r3, [r3, #5]
   81f5e:	2b00      	cmp	r3, #0
   81f60:	d015      	beq.n	81f8e <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   81f62:	7bfb      	ldrb	r3, [r7, #15]
   81f64:	683a      	ldr	r2, [r7, #0]
   81f66:	68d2      	ldr	r2, [r2, #12]
   81f68:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81f6c:	6879      	ldr	r1, [r7, #4]
   81f6e:	3310      	adds	r3, #16
   81f70:	015b      	lsls	r3, r3, #5
   81f72:	440b      	add	r3, r1
   81f74:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81f76:	7bfb      	ldrb	r3, [r7, #15]
   81f78:	683a      	ldr	r2, [r7, #0]
   81f7a:	6912      	ldr	r2, [r2, #16]
   81f7c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81f80:	6879      	ldr	r1, [r7, #4]
   81f82:	015b      	lsls	r3, r3, #5
   81f84:	440b      	add	r3, r1
   81f86:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81f8a:	601a      	str	r2, [r3, #0]
   81f8c:	e010      	b.n	81fb0 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81f8e:	7bfb      	ldrb	r3, [r7, #15]
   81f90:	683a      	ldr	r2, [r7, #0]
   81f92:	68d2      	ldr	r2, [r2, #12]
   81f94:	6879      	ldr	r1, [r7, #4]
   81f96:	3310      	adds	r3, #16
   81f98:	015b      	lsls	r3, r3, #5
   81f9a:	440b      	add	r3, r1
   81f9c:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81f9e:	7bfb      	ldrb	r3, [r7, #15]
   81fa0:	683a      	ldr	r2, [r7, #0]
   81fa2:	6912      	ldr	r2, [r2, #16]
   81fa4:	6879      	ldr	r1, [r7, #4]
   81fa6:	015b      	lsls	r3, r3, #5
   81fa8:	440b      	add	r3, r1
   81faa:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81fae:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81fb0:	7bfb      	ldrb	r3, [r7, #15]
   81fb2:	7bfa      	ldrb	r2, [r7, #15]
   81fb4:	6879      	ldr	r1, [r7, #4]
   81fb6:	3210      	adds	r2, #16
   81fb8:	0152      	lsls	r2, r2, #5
   81fba:	440a      	add	r2, r1
   81fbc:	6812      	ldr	r2, [r2, #0]
   81fbe:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81fc2:	683a      	ldr	r2, [r7, #0]
   81fc4:	7912      	ldrb	r2, [r2, #4]
   81fc6:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81fc8:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81fca:	6879      	ldr	r1, [r7, #4]
   81fcc:	3310      	adds	r3, #16
   81fce:	015b      	lsls	r3, r3, #5
   81fd0:	440b      	add	r3, r1
   81fd2:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81fd4:	3714      	adds	r7, #20
   81fd6:	46bd      	mov	sp, r7
   81fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fdc:	4770      	bx	lr
   81fde:	bf00      	nop

00081fe0 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81fe0:	b580      	push	{r7, lr}
   81fe2:	b086      	sub	sp, #24
   81fe4:	af00      	add	r7, sp, #0
   81fe6:	6078      	str	r0, [r7, #4]
   81fe8:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81fea:	2300      	movs	r3, #0
   81fec:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81fee:	683b      	ldr	r3, [r7, #0]
   81ff0:	681b      	ldr	r3, [r3, #0]
   81ff2:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81ff4:	683b      	ldr	r3, [r7, #0]
   81ff6:	689b      	ldr	r3, [r3, #8]
   81ff8:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81ffa:	68fb      	ldr	r3, [r7, #12]
   81ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   82000:	2b00      	cmp	r3, #0
   82002:	d006      	beq.n	82012 <can_mailbox_read+0x32>
   82004:	68fb      	ldr	r3, [r7, #12]
   82006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8200a:	2b00      	cmp	r3, #0
   8200c:	d001      	beq.n	82012 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   8200e:	2302      	movs	r3, #2
   82010:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   82012:	7cfb      	ldrb	r3, [r7, #19]
   82014:	687a      	ldr	r2, [r7, #4]
   82016:	015b      	lsls	r3, r3, #5
   82018:	4413      	add	r3, r2
   8201a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8201e:	685b      	ldr	r3, [r3, #4]
   82020:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82024:	683b      	ldr	r3, [r7, #0]
   82026:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   82028:	68fb      	ldr	r3, [r7, #12]
   8202a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8202e:	0c1b      	lsrs	r3, r3, #16
   82030:	b2da      	uxtb	r2, r3
   82032:	683b      	ldr	r3, [r7, #0]
   82034:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   82036:	7cfb      	ldrb	r3, [r7, #19]
   82038:	687a      	ldr	r2, [r7, #4]
   8203a:	015b      	lsls	r3, r3, #5
   8203c:	4413      	add	r3, r2
   8203e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82042:	685a      	ldr	r2, [r3, #4]
   82044:	683b      	ldr	r3, [r7, #0]
   82046:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   82048:	683b      	ldr	r3, [r7, #0]
   8204a:	799b      	ldrb	r3, [r3, #6]
   8204c:	2b04      	cmp	r3, #4
   8204e:	d908      	bls.n	82062 <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   82050:	7cfb      	ldrb	r3, [r7, #19]
   82052:	687a      	ldr	r2, [r7, #4]
   82054:	015b      	lsls	r3, r3, #5
   82056:	4413      	add	r3, r2
   82058:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8205c:	681a      	ldr	r2, [r3, #0]
   8205e:	683b      	ldr	r3, [r7, #0]
   82060:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   82062:	7cfb      	ldrb	r3, [r7, #19]
   82064:	687a      	ldr	r2, [r7, #4]
   82066:	015b      	lsls	r3, r3, #5
   82068:	4413      	add	r3, r2
   8206a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8206e:	681a      	ldr	r2, [r3, #0]
   82070:	683b      	ldr	r3, [r7, #0]
   82072:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   82074:	683b      	ldr	r3, [r7, #0]
   82076:	689b      	ldr	r3, [r3, #8]
   82078:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   8207a:	68fb      	ldr	r3, [r7, #12]
   8207c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82080:	2b00      	cmp	r3, #0
   82082:	d003      	beq.n	8208c <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   82084:	697b      	ldr	r3, [r7, #20]
   82086:	f043 0304 	orr.w	r3, r3, #4
   8208a:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   8208c:	6878      	ldr	r0, [r7, #4]
   8208e:	6839      	ldr	r1, [r7, #0]
   82090:	4b03      	ldr	r3, [pc, #12]	; (820a0 <can_mailbox_read+0xc0>)
   82092:	4798      	blx	r3

	return ul_retval;
   82094:	697b      	ldr	r3, [r7, #20]
}
   82096:	4618      	mov	r0, r3
   82098:	3718      	adds	r7, #24
   8209a:	46bd      	mov	sp, r7
   8209c:	bd80      	pop	{r7, pc}
   8209e:	bf00      	nop
   820a0:	00081e89 	.word	0x00081e89

000820a4 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   820a4:	b580      	push	{r7, lr}
   820a6:	b084      	sub	sp, #16
   820a8:	af00      	add	r7, sp, #0
   820aa:	6078      	str	r0, [r7, #4]
   820ac:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   820ae:	683b      	ldr	r3, [r7, #0]
   820b0:	681b      	ldr	r3, [r3, #0]
   820b2:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   820b4:	7bfb      	ldrb	r3, [r7, #15]
   820b6:	6878      	ldr	r0, [r7, #4]
   820b8:	4619      	mov	r1, r3
   820ba:	4b27      	ldr	r3, [pc, #156]	; (82158 <can_mailbox_write+0xb4>)
   820bc:	4798      	blx	r3
   820be:	4602      	mov	r2, r0
   820c0:	683b      	ldr	r3, [r7, #0]
   820c2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   820c4:	683b      	ldr	r3, [r7, #0]
   820c6:	689b      	ldr	r3, [r3, #8]
   820c8:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   820ca:	68bb      	ldr	r3, [r7, #8]
   820cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   820d0:	2b00      	cmp	r3, #0
   820d2:	d101      	bne.n	820d8 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   820d4:	2301      	movs	r3, #1
   820d6:	e03b      	b.n	82150 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   820d8:	683b      	ldr	r3, [r7, #0]
   820da:	795b      	ldrb	r3, [r3, #5]
   820dc:	2b00      	cmp	r3, #0
   820de:	d00b      	beq.n	820f8 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   820e0:	7bfb      	ldrb	r3, [r7, #15]
   820e2:	683a      	ldr	r2, [r7, #0]
   820e4:	6912      	ldr	r2, [r2, #16]
   820e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   820ea:	6879      	ldr	r1, [r7, #4]
   820ec:	015b      	lsls	r3, r3, #5
   820ee:	440b      	add	r3, r1
   820f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   820f4:	601a      	str	r2, [r3, #0]
   820f6:	e008      	b.n	8210a <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   820f8:	7bfb      	ldrb	r3, [r7, #15]
   820fa:	683a      	ldr	r2, [r7, #0]
   820fc:	6912      	ldr	r2, [r2, #16]
   820fe:	6879      	ldr	r1, [r7, #4]
   82100:	015b      	lsls	r3, r3, #5
   82102:	440b      	add	r3, r1
   82104:	f503 7302 	add.w	r3, r3, #520	; 0x208
   82108:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   8210a:	7bfb      	ldrb	r3, [r7, #15]
   8210c:	683a      	ldr	r2, [r7, #0]
   8210e:	6992      	ldr	r2, [r2, #24]
   82110:	6879      	ldr	r1, [r7, #4]
   82112:	015b      	lsls	r3, r3, #5
   82114:	440b      	add	r3, r1
   82116:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8211a:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   8211c:	683b      	ldr	r3, [r7, #0]
   8211e:	799b      	ldrb	r3, [r3, #6]
   82120:	2b04      	cmp	r3, #4
   82122:	d908      	bls.n	82136 <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   82124:	7bfb      	ldrb	r3, [r7, #15]
   82126:	683a      	ldr	r2, [r7, #0]
   82128:	69d2      	ldr	r2, [r2, #28]
   8212a:	6879      	ldr	r1, [r7, #4]
   8212c:	015b      	lsls	r3, r3, #5
   8212e:	440b      	add	r3, r1
   82130:	f503 7306 	add.w	r3, r3, #536	; 0x218
   82134:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   82136:	7bfb      	ldrb	r3, [r7, #15]
   82138:	683a      	ldr	r2, [r7, #0]
   8213a:	7992      	ldrb	r2, [r2, #6]
   8213c:	0412      	lsls	r2, r2, #16
   8213e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   82142:	6879      	ldr	r1, [r7, #4]
   82144:	015b      	lsls	r3, r3, #5
   82146:	440b      	add	r3, r1
   82148:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8214c:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   8214e:	2300      	movs	r3, #0
}
   82150:	4618      	mov	r0, r3
   82152:	3710      	adds	r7, #16
   82154:	46bd      	mov	sp, r7
   82156:	bd80      	pop	{r7, pc}
   82158:	00081e61 	.word	0x00081e61

0008215c <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   8215c:	b580      	push	{r7, lr}
   8215e:	b08c      	sub	sp, #48	; 0x30
   82160:	af00      	add	r7, sp, #0
   82162:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   82164:	2300      	movs	r3, #0
   82166:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82168:	2300      	movs	r3, #0
   8216a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8216e:	e00d      	b.n	8218c <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   82170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82174:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   82176:	f107 030c 	add.w	r3, r7, #12
   8217a:	6878      	ldr	r0, [r7, #4]
   8217c:	4619      	mov	r1, r3
   8217e:	4b07      	ldr	r3, [pc, #28]	; (8219c <can_reset_all_mailbox+0x40>)
   82180:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82186:	3301      	adds	r3, #1
   82188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8218c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82190:	2b07      	cmp	r3, #7
   82192:	d9ed      	bls.n	82170 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   82194:	3730      	adds	r7, #48	; 0x30
   82196:	46bd      	mov	sp, r7
   82198:	bd80      	pop	{r7, pc}
   8219a:	bf00      	nop
   8219c:	00081ec1 	.word	0x00081ec1

000821a0 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   821a0:	b480      	push	{r7}
   821a2:	b085      	sub	sp, #20
   821a4:	af00      	add	r7, sp, #0
   821a6:	60f8      	str	r0, [r7, #12]
   821a8:	60b9      	str	r1, [r7, #8]
   821aa:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   821ac:	687b      	ldr	r3, [r7, #4]
   821ae:	2b00      	cmp	r3, #0
   821b0:	d003      	beq.n	821ba <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   821b2:	68fb      	ldr	r3, [r7, #12]
   821b4:	68ba      	ldr	r2, [r7, #8]
   821b6:	665a      	str	r2, [r3, #100]	; 0x64
   821b8:	e002      	b.n	821c0 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   821ba:	68fb      	ldr	r3, [r7, #12]
   821bc:	68ba      	ldr	r2, [r7, #8]
   821be:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   821c0:	3714      	adds	r7, #20
   821c2:	46bd      	mov	sp, r7
   821c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   821c8:	4770      	bx	lr
   821ca:	bf00      	nop

000821cc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   821cc:	b480      	push	{r7}
   821ce:	b087      	sub	sp, #28
   821d0:	af00      	add	r7, sp, #0
   821d2:	60f8      	str	r0, [r7, #12]
   821d4:	60b9      	str	r1, [r7, #8]
   821d6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   821d8:	68fb      	ldr	r3, [r7, #12]
   821da:	687a      	ldr	r2, [r7, #4]
   821dc:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   821de:	68bb      	ldr	r3, [r7, #8]
   821e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   821e4:	d01f      	beq.n	82226 <pio_set_peripheral+0x5a>
   821e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   821ea:	d805      	bhi.n	821f8 <pio_set_peripheral+0x2c>
   821ec:	2b00      	cmp	r3, #0
   821ee:	d027      	beq.n	82240 <pio_set_peripheral+0x74>
   821f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   821f4:	d00a      	beq.n	8220c <pio_set_peripheral+0x40>
   821f6:	e01f      	b.n	82238 <pio_set_peripheral+0x6c>
   821f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   821fc:	d020      	beq.n	82240 <pio_set_peripheral+0x74>
   821fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82202:	d01d      	beq.n	82240 <pio_set_peripheral+0x74>
   82204:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82208:	d01a      	beq.n	82240 <pio_set_peripheral+0x74>
   8220a:	e015      	b.n	82238 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8220c:	68fb      	ldr	r3, [r7, #12]
   8220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82210:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82212:	68fb      	ldr	r3, [r7, #12]
   82214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82216:	687b      	ldr	r3, [r7, #4]
   82218:	43d9      	mvns	r1, r3
   8221a:	697b      	ldr	r3, [r7, #20]
   8221c:	400b      	ands	r3, r1
   8221e:	401a      	ands	r2, r3
   82220:	68fb      	ldr	r3, [r7, #12]
   82222:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82224:	e008      	b.n	82238 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82226:	68fb      	ldr	r3, [r7, #12]
   82228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8222a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8222c:	687a      	ldr	r2, [r7, #4]
   8222e:	697b      	ldr	r3, [r7, #20]
   82230:	431a      	orrs	r2, r3
   82232:	68fb      	ldr	r3, [r7, #12]
   82234:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82236:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   82238:	68fb      	ldr	r3, [r7, #12]
   8223a:	687a      	ldr	r2, [r7, #4]
   8223c:	605a      	str	r2, [r3, #4]
   8223e:	e000      	b.n	82242 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82240:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   82242:	371c      	adds	r7, #28
   82244:	46bd      	mov	sp, r7
   82246:	f85d 7b04 	ldr.w	r7, [sp], #4
   8224a:	4770      	bx	lr

0008224c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   8224c:	b580      	push	{r7, lr}
   8224e:	b084      	sub	sp, #16
   82250:	af00      	add	r7, sp, #0
   82252:	60f8      	str	r0, [r7, #12]
   82254:	60b9      	str	r1, [r7, #8]
   82256:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82258:	68f8      	ldr	r0, [r7, #12]
   8225a:	68b9      	ldr	r1, [r7, #8]
   8225c:	4b18      	ldr	r3, [pc, #96]	; (822c0 <pio_set_input+0x74>)
   8225e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82260:	687b      	ldr	r3, [r7, #4]
   82262:	f003 0301 	and.w	r3, r3, #1
   82266:	68f8      	ldr	r0, [r7, #12]
   82268:	68b9      	ldr	r1, [r7, #8]
   8226a:	461a      	mov	r2, r3
   8226c:	4b15      	ldr	r3, [pc, #84]	; (822c4 <pio_set_input+0x78>)
   8226e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82270:	687b      	ldr	r3, [r7, #4]
   82272:	f003 030a 	and.w	r3, r3, #10
   82276:	2b00      	cmp	r3, #0
   82278:	d003      	beq.n	82282 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8227a:	68fb      	ldr	r3, [r7, #12]
   8227c:	68ba      	ldr	r2, [r7, #8]
   8227e:	621a      	str	r2, [r3, #32]
   82280:	e002      	b.n	82288 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82282:	68fb      	ldr	r3, [r7, #12]
   82284:	68ba      	ldr	r2, [r7, #8]
   82286:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82288:	687b      	ldr	r3, [r7, #4]
   8228a:	f003 0302 	and.w	r3, r3, #2
   8228e:	2b00      	cmp	r3, #0
   82290:	d004      	beq.n	8229c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82292:	68fb      	ldr	r3, [r7, #12]
   82294:	68ba      	ldr	r2, [r7, #8]
   82296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8229a:	e008      	b.n	822ae <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8229c:	687b      	ldr	r3, [r7, #4]
   8229e:	f003 0308 	and.w	r3, r3, #8
   822a2:	2b00      	cmp	r3, #0
   822a4:	d003      	beq.n	822ae <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   822a6:	68fb      	ldr	r3, [r7, #12]
   822a8:	68ba      	ldr	r2, [r7, #8]
   822aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   822ae:	68fb      	ldr	r3, [r7, #12]
   822b0:	68ba      	ldr	r2, [r7, #8]
   822b2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   822b4:	68fb      	ldr	r3, [r7, #12]
   822b6:	68ba      	ldr	r2, [r7, #8]
   822b8:	601a      	str	r2, [r3, #0]
}
   822ba:	3710      	adds	r7, #16
   822bc:	46bd      	mov	sp, r7
   822be:	bd80      	pop	{r7, pc}
   822c0:	0008232d 	.word	0x0008232d
   822c4:	000821a1 	.word	0x000821a1

000822c8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   822c8:	b580      	push	{r7, lr}
   822ca:	b084      	sub	sp, #16
   822cc:	af00      	add	r7, sp, #0
   822ce:	60f8      	str	r0, [r7, #12]
   822d0:	60b9      	str	r1, [r7, #8]
   822d2:	607a      	str	r2, [r7, #4]
   822d4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   822d6:	68f8      	ldr	r0, [r7, #12]
   822d8:	68b9      	ldr	r1, [r7, #8]
   822da:	4b12      	ldr	r3, [pc, #72]	; (82324 <pio_set_output+0x5c>)
   822dc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   822de:	68f8      	ldr	r0, [r7, #12]
   822e0:	68b9      	ldr	r1, [r7, #8]
   822e2:	69ba      	ldr	r2, [r7, #24]
   822e4:	4b10      	ldr	r3, [pc, #64]	; (82328 <pio_set_output+0x60>)
   822e6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   822e8:	683b      	ldr	r3, [r7, #0]
   822ea:	2b00      	cmp	r3, #0
   822ec:	d003      	beq.n	822f6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   822ee:	68fb      	ldr	r3, [r7, #12]
   822f0:	68ba      	ldr	r2, [r7, #8]
   822f2:	651a      	str	r2, [r3, #80]	; 0x50
   822f4:	e002      	b.n	822fc <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   822f6:	68fb      	ldr	r3, [r7, #12]
   822f8:	68ba      	ldr	r2, [r7, #8]
   822fa:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   822fc:	687b      	ldr	r3, [r7, #4]
   822fe:	2b00      	cmp	r3, #0
   82300:	d003      	beq.n	8230a <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82302:	68fb      	ldr	r3, [r7, #12]
   82304:	68ba      	ldr	r2, [r7, #8]
   82306:	631a      	str	r2, [r3, #48]	; 0x30
   82308:	e002      	b.n	82310 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8230a:	68fb      	ldr	r3, [r7, #12]
   8230c:	68ba      	ldr	r2, [r7, #8]
   8230e:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   82310:	68fb      	ldr	r3, [r7, #12]
   82312:	68ba      	ldr	r2, [r7, #8]
   82314:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   82316:	68fb      	ldr	r3, [r7, #12]
   82318:	68ba      	ldr	r2, [r7, #8]
   8231a:	601a      	str	r2, [r3, #0]
}
   8231c:	3710      	adds	r7, #16
   8231e:	46bd      	mov	sp, r7
   82320:	bd80      	pop	{r7, pc}
   82322:	bf00      	nop
   82324:	0008232d 	.word	0x0008232d
   82328:	000821a1 	.word	0x000821a1

0008232c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   8232c:	b480      	push	{r7}
   8232e:	b083      	sub	sp, #12
   82330:	af00      	add	r7, sp, #0
   82332:	6078      	str	r0, [r7, #4]
   82334:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   82336:	687b      	ldr	r3, [r7, #4]
   82338:	683a      	ldr	r2, [r7, #0]
   8233a:	645a      	str	r2, [r3, #68]	; 0x44
}
   8233c:	370c      	adds	r7, #12
   8233e:	46bd      	mov	sp, r7
   82340:	f85d 7b04 	ldr.w	r7, [sp], #4
   82344:	4770      	bx	lr
   82346:	bf00      	nop

00082348 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82348:	b480      	push	{r7}
   8234a:	b083      	sub	sp, #12
   8234c:	af00      	add	r7, sp, #0
   8234e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82350:	687b      	ldr	r3, [r7, #4]
   82352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82354:	4618      	mov	r0, r3
   82356:	370c      	adds	r7, #12
   82358:	46bd      	mov	sp, r7
   8235a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8235e:	4770      	bx	lr

00082360 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82360:	b480      	push	{r7}
   82362:	b083      	sub	sp, #12
   82364:	af00      	add	r7, sp, #0
   82366:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82368:	687b      	ldr	r3, [r7, #4]
   8236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   8236c:	4618      	mov	r0, r3
   8236e:	370c      	adds	r7, #12
   82370:	46bd      	mov	sp, r7
   82372:	f85d 7b04 	ldr.w	r7, [sp], #4
   82376:	4770      	bx	lr

00082378 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   82378:	b480      	push	{r7}
   8237a:	b085      	sub	sp, #20
   8237c:	af00      	add	r7, sp, #0
   8237e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82380:	687b      	ldr	r3, [r7, #4]
   82382:	095b      	lsrs	r3, r3, #5
   82384:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82388:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8238c:	025b      	lsls	r3, r3, #9
   8238e:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82390:	687b      	ldr	r3, [r7, #4]
   82392:	f003 031f 	and.w	r3, r3, #31
   82396:	2201      	movs	r2, #1
   82398:	fa02 f303 	lsl.w	r3, r2, r3
   8239c:	461a      	mov	r2, r3
   8239e:	68fb      	ldr	r3, [r7, #12]
   823a0:	631a      	str	r2, [r3, #48]	; 0x30
}
   823a2:	3714      	adds	r7, #20
   823a4:	46bd      	mov	sp, r7
   823a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   823aa:	4770      	bx	lr

000823ac <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   823ac:	b480      	push	{r7}
   823ae:	b085      	sub	sp, #20
   823b0:	af00      	add	r7, sp, #0
   823b2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   823b4:	687b      	ldr	r3, [r7, #4]
   823b6:	095b      	lsrs	r3, r3, #5
   823b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   823bc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   823c0:	025b      	lsls	r3, r3, #9
   823c2:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   823c4:	687b      	ldr	r3, [r7, #4]
   823c6:	f003 031f 	and.w	r3, r3, #31
   823ca:	2201      	movs	r2, #1
   823cc:	fa02 f303 	lsl.w	r3, r2, r3
   823d0:	461a      	mov	r2, r3
   823d2:	68fb      	ldr	r3, [r7, #12]
   823d4:	635a      	str	r2, [r3, #52]	; 0x34
}
   823d6:	3714      	adds	r7, #20
   823d8:	46bd      	mov	sp, r7
   823da:	f85d 7b04 	ldr.w	r7, [sp], #4
   823de:	4770      	bx	lr

000823e0 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   823e0:	b480      	push	{r7}
   823e2:	b085      	sub	sp, #20
   823e4:	af00      	add	r7, sp, #0
   823e6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   823e8:	687b      	ldr	r3, [r7, #4]
   823ea:	095b      	lsrs	r3, r3, #5
   823ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   823f0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   823f4:	025b      	lsls	r3, r3, #9
   823f6:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   823f8:	68fb      	ldr	r3, [r7, #12]
   823fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   823fc:	687b      	ldr	r3, [r7, #4]
   823fe:	f003 031f 	and.w	r3, r3, #31
   82402:	2101      	movs	r1, #1
   82404:	fa01 f303 	lsl.w	r3, r1, r3
   82408:	4013      	ands	r3, r2
   8240a:	2b00      	cmp	r3, #0
   8240c:	d009      	beq.n	82422 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8240e:	687b      	ldr	r3, [r7, #4]
   82410:	f003 031f 	and.w	r3, r3, #31
   82414:	2201      	movs	r2, #1
   82416:	fa02 f303 	lsl.w	r3, r2, r3
   8241a:	461a      	mov	r2, r3
   8241c:	68fb      	ldr	r3, [r7, #12]
   8241e:	635a      	str	r2, [r3, #52]	; 0x34
   82420:	e008      	b.n	82434 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82422:	687b      	ldr	r3, [r7, #4]
   82424:	f003 031f 	and.w	r3, r3, #31
   82428:	2201      	movs	r2, #1
   8242a:	fa02 f303 	lsl.w	r3, r2, r3
   8242e:	461a      	mov	r2, r3
   82430:	68fb      	ldr	r3, [r7, #12]
   82432:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   82434:	3714      	adds	r7, #20
   82436:	46bd      	mov	sp, r7
   82438:	f85d 7b04 	ldr.w	r7, [sp], #4
   8243c:	4770      	bx	lr
   8243e:	bf00      	nop

00082440 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82440:	b590      	push	{r4, r7, lr}
   82442:	b087      	sub	sp, #28
   82444:	af02      	add	r7, sp, #8
   82446:	6078      	str	r0, [r7, #4]
   82448:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8244a:	687b      	ldr	r3, [r7, #4]
   8244c:	095b      	lsrs	r3, r3, #5
   8244e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82452:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82456:	025b      	lsls	r3, r3, #9
   82458:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8245a:	683b      	ldr	r3, [r7, #0]
   8245c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82460:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82464:	d048      	beq.n	824f8 <pio_configure_pin+0xb8>
   82466:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8246a:	d806      	bhi.n	8247a <pio_configure_pin+0x3a>
   8246c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82470:	d00a      	beq.n	82488 <pio_configure_pin+0x48>
   82472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82476:	d023      	beq.n	824c0 <pio_configure_pin+0x80>
   82478:	e070      	b.n	8255c <pio_configure_pin+0x11c>
   8247a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8247e:	d047      	beq.n	82510 <pio_configure_pin+0xd0>
   82480:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82484:	d044      	beq.n	82510 <pio_configure_pin+0xd0>
   82486:	e069      	b.n	8255c <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82488:	687b      	ldr	r3, [r7, #4]
   8248a:	f003 031f 	and.w	r3, r3, #31
   8248e:	2201      	movs	r2, #1
   82490:	fa02 f303 	lsl.w	r3, r2, r3
   82494:	68f8      	ldr	r0, [r7, #12]
   82496:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8249a:	461a      	mov	r2, r3
   8249c:	4b33      	ldr	r3, [pc, #204]	; (8256c <pio_configure_pin+0x12c>)
   8249e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   824a0:	687b      	ldr	r3, [r7, #4]
   824a2:	f003 031f 	and.w	r3, r3, #31
   824a6:	2201      	movs	r2, #1
   824a8:	fa02 f303 	lsl.w	r3, r2, r3
   824ac:	461a      	mov	r2, r3
   824ae:	683b      	ldr	r3, [r7, #0]
   824b0:	f003 0301 	and.w	r3, r3, #1
   824b4:	68f8      	ldr	r0, [r7, #12]
   824b6:	4611      	mov	r1, r2
   824b8:	461a      	mov	r2, r3
   824ba:	4b2d      	ldr	r3, [pc, #180]	; (82570 <pio_configure_pin+0x130>)
   824bc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   824be:	e04f      	b.n	82560 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   824c0:	687b      	ldr	r3, [r7, #4]
   824c2:	f003 031f 	and.w	r3, r3, #31
   824c6:	2201      	movs	r2, #1
   824c8:	fa02 f303 	lsl.w	r3, r2, r3
   824cc:	68f8      	ldr	r0, [r7, #12]
   824ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824d2:	461a      	mov	r2, r3
   824d4:	4b25      	ldr	r3, [pc, #148]	; (8256c <pio_configure_pin+0x12c>)
   824d6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   824d8:	687b      	ldr	r3, [r7, #4]
   824da:	f003 031f 	and.w	r3, r3, #31
   824de:	2201      	movs	r2, #1
   824e0:	fa02 f303 	lsl.w	r3, r2, r3
   824e4:	461a      	mov	r2, r3
   824e6:	683b      	ldr	r3, [r7, #0]
   824e8:	f003 0301 	and.w	r3, r3, #1
   824ec:	68f8      	ldr	r0, [r7, #12]
   824ee:	4611      	mov	r1, r2
   824f0:	461a      	mov	r2, r3
   824f2:	4b1f      	ldr	r3, [pc, #124]	; (82570 <pio_configure_pin+0x130>)
   824f4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   824f6:	e033      	b.n	82560 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   824f8:	687b      	ldr	r3, [r7, #4]
   824fa:	f003 031f 	and.w	r3, r3, #31
   824fe:	2201      	movs	r2, #1
   82500:	fa02 f303 	lsl.w	r3, r2, r3
   82504:	68f8      	ldr	r0, [r7, #12]
   82506:	4619      	mov	r1, r3
   82508:	683a      	ldr	r2, [r7, #0]
   8250a:	4b1a      	ldr	r3, [pc, #104]	; (82574 <pio_configure_pin+0x134>)
   8250c:	4798      	blx	r3
		break;
   8250e:	e027      	b.n	82560 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82510:	687b      	ldr	r3, [r7, #4]
   82512:	f003 031f 	and.w	r3, r3, #31
   82516:	2201      	movs	r2, #1
   82518:	fa02 f303 	lsl.w	r3, r2, r3
   8251c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8251e:	683b      	ldr	r3, [r7, #0]
   82520:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82524:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82528:	bf14      	ite	ne
   8252a:	2300      	movne	r3, #0
   8252c:	2301      	moveq	r3, #1
   8252e:	b2db      	uxtb	r3, r3
   82530:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82532:	683b      	ldr	r3, [r7, #0]
   82534:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82538:	2b00      	cmp	r3, #0
   8253a:	bf0c      	ite	eq
   8253c:	2300      	moveq	r3, #0
   8253e:	2301      	movne	r3, #1
   82540:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82542:	6838      	ldr	r0, [r7, #0]
   82544:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82548:	2800      	cmp	r0, #0
   8254a:	bf0c      	ite	eq
   8254c:	2000      	moveq	r0, #0
   8254e:	2001      	movne	r0, #1
   82550:	b2c0      	uxtb	r0, r0
   82552:	9000      	str	r0, [sp, #0]
   82554:	68f8      	ldr	r0, [r7, #12]
   82556:	4c08      	ldr	r4, [pc, #32]	; (82578 <pio_configure_pin+0x138>)
   82558:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8255a:	e001      	b.n	82560 <pio_configure_pin+0x120>

	default:
		return 0;
   8255c:	2300      	movs	r3, #0
   8255e:	e000      	b.n	82562 <pio_configure_pin+0x122>
	}

	return 1;
   82560:	2301      	movs	r3, #1
}
   82562:	4618      	mov	r0, r3
   82564:	3714      	adds	r7, #20
   82566:	46bd      	mov	sp, r7
   82568:	bd90      	pop	{r4, r7, pc}
   8256a:	bf00      	nop
   8256c:	000821cd 	.word	0x000821cd
   82570:	000821a1 	.word	0x000821a1
   82574:	0008224d 	.word	0x0008224d
   82578:	000822c9 	.word	0x000822c9

0008257c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8257c:	b590      	push	{r4, r7, lr}
   8257e:	b087      	sub	sp, #28
   82580:	af02      	add	r7, sp, #8
   82582:	60f8      	str	r0, [r7, #12]
   82584:	60b9      	str	r1, [r7, #8]
   82586:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82588:	687b      	ldr	r3, [r7, #4]
   8258a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8258e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82592:	d02e      	beq.n	825f2 <pio_configure_pin_group+0x76>
   82594:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82598:	d806      	bhi.n	825a8 <pio_configure_pin_group+0x2c>
   8259a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8259e:	d00a      	beq.n	825b6 <pio_configure_pin_group+0x3a>
   825a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   825a4:	d016      	beq.n	825d4 <pio_configure_pin_group+0x58>
   825a6:	e04a      	b.n	8263e <pio_configure_pin_group+0xc2>
   825a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   825ac:	d027      	beq.n	825fe <pio_configure_pin_group+0x82>
   825ae:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   825b2:	d024      	beq.n	825fe <pio_configure_pin_group+0x82>
   825b4:	e043      	b.n	8263e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   825b6:	68f8      	ldr	r0, [r7, #12]
   825b8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825bc:	68ba      	ldr	r2, [r7, #8]
   825be:	4b23      	ldr	r3, [pc, #140]	; (8264c <pio_configure_pin_group+0xd0>)
   825c0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   825c2:	687b      	ldr	r3, [r7, #4]
   825c4:	f003 0301 	and.w	r3, r3, #1
   825c8:	68f8      	ldr	r0, [r7, #12]
   825ca:	68b9      	ldr	r1, [r7, #8]
   825cc:	461a      	mov	r2, r3
   825ce:	4b20      	ldr	r3, [pc, #128]	; (82650 <pio_configure_pin_group+0xd4>)
   825d0:	4798      	blx	r3
		break;
   825d2:	e036      	b.n	82642 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   825d4:	68f8      	ldr	r0, [r7, #12]
   825d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   825da:	68ba      	ldr	r2, [r7, #8]
   825dc:	4b1b      	ldr	r3, [pc, #108]	; (8264c <pio_configure_pin_group+0xd0>)
   825de:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   825e0:	687b      	ldr	r3, [r7, #4]
   825e2:	f003 0301 	and.w	r3, r3, #1
   825e6:	68f8      	ldr	r0, [r7, #12]
   825e8:	68b9      	ldr	r1, [r7, #8]
   825ea:	461a      	mov	r2, r3
   825ec:	4b18      	ldr	r3, [pc, #96]	; (82650 <pio_configure_pin_group+0xd4>)
   825ee:	4798      	blx	r3
		break;
   825f0:	e027      	b.n	82642 <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   825f2:	68f8      	ldr	r0, [r7, #12]
   825f4:	68b9      	ldr	r1, [r7, #8]
   825f6:	687a      	ldr	r2, [r7, #4]
   825f8:	4b16      	ldr	r3, [pc, #88]	; (82654 <pio_configure_pin_group+0xd8>)
   825fa:	4798      	blx	r3
		break;
   825fc:	e021      	b.n	82642 <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   825fe:	687b      	ldr	r3, [r7, #4]
   82600:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82604:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82608:	bf14      	ite	ne
   8260a:	2300      	movne	r3, #0
   8260c:	2301      	moveq	r3, #1
   8260e:	b2db      	uxtb	r3, r3
   82610:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82612:	687b      	ldr	r3, [r7, #4]
   82614:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82618:	2b00      	cmp	r3, #0
   8261a:	bf0c      	ite	eq
   8261c:	2300      	moveq	r3, #0
   8261e:	2301      	movne	r3, #1
   82620:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82622:	6879      	ldr	r1, [r7, #4]
   82624:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82628:	2900      	cmp	r1, #0
   8262a:	bf0c      	ite	eq
   8262c:	2100      	moveq	r1, #0
   8262e:	2101      	movne	r1, #1
   82630:	b2c9      	uxtb	r1, r1
   82632:	9100      	str	r1, [sp, #0]
   82634:	68f8      	ldr	r0, [r7, #12]
   82636:	68b9      	ldr	r1, [r7, #8]
   82638:	4c07      	ldr	r4, [pc, #28]	; (82658 <pio_configure_pin_group+0xdc>)
   8263a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8263c:	e001      	b.n	82642 <pio_configure_pin_group+0xc6>

	default:
		return 0;
   8263e:	2300      	movs	r3, #0
   82640:	e000      	b.n	82644 <pio_configure_pin_group+0xc8>
	}

	return 1;
   82642:	2301      	movs	r3, #1
}
   82644:	4618      	mov	r0, r3
   82646:	3714      	adds	r7, #20
   82648:	46bd      	mov	sp, r7
   8264a:	bd90      	pop	{r4, r7, pc}
   8264c:	000821cd 	.word	0x000821cd
   82650:	000821a1 	.word	0x000821a1
   82654:	0008224d 	.word	0x0008224d
   82658:	000822c9 	.word	0x000822c9

0008265c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8265c:	b580      	push	{r7, lr}
   8265e:	b084      	sub	sp, #16
   82660:	af00      	add	r7, sp, #0
   82662:	6078      	str	r0, [r7, #4]
   82664:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82666:	6878      	ldr	r0, [r7, #4]
   82668:	4b22      	ldr	r3, [pc, #136]	; (826f4 <pio_handler_process+0x98>)
   8266a:	4798      	blx	r3
   8266c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8266e:	6878      	ldr	r0, [r7, #4]
   82670:	4b21      	ldr	r3, [pc, #132]	; (826f8 <pio_handler_process+0x9c>)
   82672:	4798      	blx	r3
   82674:	4603      	mov	r3, r0
   82676:	68fa      	ldr	r2, [r7, #12]
   82678:	4013      	ands	r3, r2
   8267a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8267c:	68fb      	ldr	r3, [r7, #12]
   8267e:	2b00      	cmp	r3, #0
   82680:	d035      	beq.n	826ee <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   82682:	2300      	movs	r3, #0
   82684:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82686:	e02f      	b.n	826e8 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82688:	4a1c      	ldr	r2, [pc, #112]	; (826fc <pio_handler_process+0xa0>)
   8268a:	68bb      	ldr	r3, [r7, #8]
   8268c:	011b      	lsls	r3, r3, #4
   8268e:	4413      	add	r3, r2
   82690:	681a      	ldr	r2, [r3, #0]
   82692:	683b      	ldr	r3, [r7, #0]
   82694:	429a      	cmp	r2, r3
   82696:	d124      	bne.n	826e2 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82698:	4a18      	ldr	r2, [pc, #96]	; (826fc <pio_handler_process+0xa0>)
   8269a:	68bb      	ldr	r3, [r7, #8]
   8269c:	011b      	lsls	r3, r3, #4
   8269e:	4413      	add	r3, r2
   826a0:	685a      	ldr	r2, [r3, #4]
   826a2:	68fb      	ldr	r3, [r7, #12]
   826a4:	4013      	ands	r3, r2
   826a6:	2b00      	cmp	r3, #0
   826a8:	d01b      	beq.n	826e2 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   826aa:	4a14      	ldr	r2, [pc, #80]	; (826fc <pio_handler_process+0xa0>)
   826ac:	68bb      	ldr	r3, [r7, #8]
   826ae:	011b      	lsls	r3, r3, #4
   826b0:	4413      	add	r3, r2
   826b2:	3308      	adds	r3, #8
   826b4:	685b      	ldr	r3, [r3, #4]
   826b6:	4911      	ldr	r1, [pc, #68]	; (826fc <pio_handler_process+0xa0>)
   826b8:	68ba      	ldr	r2, [r7, #8]
   826ba:	0112      	lsls	r2, r2, #4
   826bc:	440a      	add	r2, r1
   826be:	6811      	ldr	r1, [r2, #0]
   826c0:	480e      	ldr	r0, [pc, #56]	; (826fc <pio_handler_process+0xa0>)
   826c2:	68ba      	ldr	r2, [r7, #8]
   826c4:	0112      	lsls	r2, r2, #4
   826c6:	4402      	add	r2, r0
   826c8:	6852      	ldr	r2, [r2, #4]
   826ca:	4608      	mov	r0, r1
   826cc:	4611      	mov	r1, r2
   826ce:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   826d0:	4a0a      	ldr	r2, [pc, #40]	; (826fc <pio_handler_process+0xa0>)
   826d2:	68bb      	ldr	r3, [r7, #8]
   826d4:	011b      	lsls	r3, r3, #4
   826d6:	4413      	add	r3, r2
   826d8:	685b      	ldr	r3, [r3, #4]
   826da:	43db      	mvns	r3, r3
   826dc:	68fa      	ldr	r2, [r7, #12]
   826de:	4013      	ands	r3, r2
   826e0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   826e2:	68bb      	ldr	r3, [r7, #8]
   826e4:	3301      	adds	r3, #1
   826e6:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   826e8:	68fb      	ldr	r3, [r7, #12]
   826ea:	2b00      	cmp	r3, #0
   826ec:	d1cc      	bne.n	82688 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   826ee:	3710      	adds	r7, #16
   826f0:	46bd      	mov	sp, r7
   826f2:	bd80      	pop	{r7, pc}
   826f4:	00082349 	.word	0x00082349
   826f8:	00082361 	.word	0x00082361
   826fc:	20070474 	.word	0x20070474

00082700 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82700:	b580      	push	{r7, lr}
   82702:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82704:	4802      	ldr	r0, [pc, #8]	; (82710 <PIOA_Handler+0x10>)
   82706:	210b      	movs	r1, #11
   82708:	4b02      	ldr	r3, [pc, #8]	; (82714 <PIOA_Handler+0x14>)
   8270a:	4798      	blx	r3
}
   8270c:	bd80      	pop	{r7, pc}
   8270e:	bf00      	nop
   82710:	400e0e00 	.word	0x400e0e00
   82714:	0008265d 	.word	0x0008265d

00082718 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82718:	b580      	push	{r7, lr}
   8271a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   8271c:	4802      	ldr	r0, [pc, #8]	; (82728 <PIOB_Handler+0x10>)
   8271e:	210c      	movs	r1, #12
   82720:	4b02      	ldr	r3, [pc, #8]	; (8272c <PIOB_Handler+0x14>)
   82722:	4798      	blx	r3
}
   82724:	bd80      	pop	{r7, pc}
   82726:	bf00      	nop
   82728:	400e1000 	.word	0x400e1000
   8272c:	0008265d 	.word	0x0008265d

00082730 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82730:	b580      	push	{r7, lr}
   82732:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   82734:	4802      	ldr	r0, [pc, #8]	; (82740 <PIOC_Handler+0x10>)
   82736:	210d      	movs	r1, #13
   82738:	4b02      	ldr	r3, [pc, #8]	; (82744 <PIOC_Handler+0x14>)
   8273a:	4798      	blx	r3
}
   8273c:	bd80      	pop	{r7, pc}
   8273e:	bf00      	nop
   82740:	400e1200 	.word	0x400e1200
   82744:	0008265d 	.word	0x0008265d

00082748 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82748:	b580      	push	{r7, lr}
   8274a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   8274c:	4802      	ldr	r0, [pc, #8]	; (82758 <PIOD_Handler+0x10>)
   8274e:	210e      	movs	r1, #14
   82750:	4b02      	ldr	r3, [pc, #8]	; (8275c <PIOD_Handler+0x14>)
   82752:	4798      	blx	r3
}
   82754:	bd80      	pop	{r7, pc}
   82756:	bf00      	nop
   82758:	400e1400 	.word	0x400e1400
   8275c:	0008265d 	.word	0x0008265d

00082760 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82760:	b480      	push	{r7}
   82762:	b085      	sub	sp, #20
   82764:	af00      	add	r7, sp, #0
   82766:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82768:	4b1d      	ldr	r3, [pc, #116]	; (827e0 <pmc_switch_mck_to_pllack+0x80>)
   8276a:	4a1d      	ldr	r2, [pc, #116]	; (827e0 <pmc_switch_mck_to_pllack+0x80>)
   8276c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8276e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   82772:	687a      	ldr	r2, [r7, #4]
   82774:	430a      	orrs	r2, r1
   82776:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82778:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8277c:	60fb      	str	r3, [r7, #12]
   8277e:	e007      	b.n	82790 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82780:	68fb      	ldr	r3, [r7, #12]
   82782:	2b00      	cmp	r3, #0
   82784:	d101      	bne.n	8278a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82786:	2301      	movs	r3, #1
   82788:	e023      	b.n	827d2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8278a:	68fb      	ldr	r3, [r7, #12]
   8278c:	3b01      	subs	r3, #1
   8278e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82790:	4b13      	ldr	r3, [pc, #76]	; (827e0 <pmc_switch_mck_to_pllack+0x80>)
   82792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82794:	f003 0308 	and.w	r3, r3, #8
   82798:	2b00      	cmp	r3, #0
   8279a:	d0f1      	beq.n	82780 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8279c:	4b10      	ldr	r3, [pc, #64]	; (827e0 <pmc_switch_mck_to_pllack+0x80>)
   8279e:	4a10      	ldr	r2, [pc, #64]	; (827e0 <pmc_switch_mck_to_pllack+0x80>)
   827a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
   827a2:	f022 0203 	bic.w	r2, r2, #3
   827a6:	f042 0202 	orr.w	r2, r2, #2
   827aa:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   827b0:	60fb      	str	r3, [r7, #12]
   827b2:	e007      	b.n	827c4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   827b4:	68fb      	ldr	r3, [r7, #12]
   827b6:	2b00      	cmp	r3, #0
   827b8:	d101      	bne.n	827be <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   827ba:	2301      	movs	r3, #1
   827bc:	e009      	b.n	827d2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   827be:	68fb      	ldr	r3, [r7, #12]
   827c0:	3b01      	subs	r3, #1
   827c2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   827c4:	4b06      	ldr	r3, [pc, #24]	; (827e0 <pmc_switch_mck_to_pllack+0x80>)
   827c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827c8:	f003 0308 	and.w	r3, r3, #8
   827cc:	2b00      	cmp	r3, #0
   827ce:	d0f1      	beq.n	827b4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   827d0:	2300      	movs	r3, #0
}
   827d2:	4618      	mov	r0, r3
   827d4:	3714      	adds	r7, #20
   827d6:	46bd      	mov	sp, r7
   827d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   827dc:	4770      	bx	lr
   827de:	bf00      	nop
   827e0:	400e0600 	.word	0x400e0600

000827e4 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   827e4:	b480      	push	{r7}
   827e6:	b083      	sub	sp, #12
   827e8:	af00      	add	r7, sp, #0
   827ea:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   827ec:	687b      	ldr	r3, [r7, #4]
   827ee:	2b01      	cmp	r3, #1
   827f0:	d107      	bne.n	82802 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   827f2:	4a0a      	ldr	r2, [pc, #40]	; (8281c <pmc_switch_sclk_to_32kxtal+0x38>)
   827f4:	4b09      	ldr	r3, [pc, #36]	; (8281c <pmc_switch_sclk_to_32kxtal+0x38>)
   827f6:	689b      	ldr	r3, [r3, #8]
   827f8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   827fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82800:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   82802:	4a06      	ldr	r2, [pc, #24]	; (8281c <pmc_switch_sclk_to_32kxtal+0x38>)
   82804:	4b05      	ldr	r3, [pc, #20]	; (8281c <pmc_switch_sclk_to_32kxtal+0x38>)
   82806:	681b      	ldr	r3, [r3, #0]
   82808:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8280c:	f043 0308 	orr.w	r3, r3, #8
   82810:	6013      	str	r3, [r2, #0]
}
   82812:	370c      	adds	r7, #12
   82814:	46bd      	mov	sp, r7
   82816:	f85d 7b04 	ldr.w	r7, [sp], #4
   8281a:	4770      	bx	lr
   8281c:	400e1a10 	.word	0x400e1a10

00082820 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82820:	b480      	push	{r7}
   82822:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82824:	4b09      	ldr	r3, [pc, #36]	; (8284c <pmc_osc_is_ready_32kxtal+0x2c>)
   82826:	695b      	ldr	r3, [r3, #20]
   82828:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8282c:	2b00      	cmp	r3, #0
   8282e:	d007      	beq.n	82840 <pmc_osc_is_ready_32kxtal+0x20>
   82830:	4b07      	ldr	r3, [pc, #28]	; (82850 <pmc_osc_is_ready_32kxtal+0x30>)
   82832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82834:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82838:	2b00      	cmp	r3, #0
   8283a:	d001      	beq.n	82840 <pmc_osc_is_ready_32kxtal+0x20>
   8283c:	2301      	movs	r3, #1
   8283e:	e000      	b.n	82842 <pmc_osc_is_ready_32kxtal+0x22>
   82840:	2300      	movs	r3, #0
}
   82842:	4618      	mov	r0, r3
   82844:	46bd      	mov	sp, r7
   82846:	f85d 7b04 	ldr.w	r7, [sp], #4
   8284a:	4770      	bx	lr
   8284c:	400e1a10 	.word	0x400e1a10
   82850:	400e0600 	.word	0x400e0600

00082854 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82854:	b480      	push	{r7}
   82856:	b085      	sub	sp, #20
   82858:	af00      	add	r7, sp, #0
   8285a:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   8285c:	2300      	movs	r3, #0
   8285e:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   82860:	4b21      	ldr	r3, [pc, #132]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   82862:	6a1b      	ldr	r3, [r3, #32]
   82864:	f003 0301 	and.w	r3, r3, #1
   82868:	2b00      	cmp	r3, #0
   8286a:	d00e      	beq.n	8288a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8286c:	4a1e      	ldr	r2, [pc, #120]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   8286e:	4b1e      	ldr	r3, [pc, #120]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   82870:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   82872:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82876:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8287a:	6879      	ldr	r1, [r7, #4]
   8287c:	430b      	orrs	r3, r1
   8287e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82882:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82886:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82888:	e00b      	b.n	828a2 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8288a:	2301      	movs	r3, #1
   8288c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8288e:	4a16      	ldr	r2, [pc, #88]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   82890:	4b15      	ldr	r3, [pc, #84]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   82892:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   82894:	4b15      	ldr	r3, [pc, #84]	; (828ec <pmc_switch_mainck_to_fastrc+0x98>)
   82896:	400b      	ands	r3, r1
   82898:	6879      	ldr	r1, [r7, #4]
   8289a:	4319      	orrs	r1, r3
   8289c:	4b14      	ldr	r3, [pc, #80]	; (828f0 <pmc_switch_mainck_to_fastrc+0x9c>)
   8289e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   828a0:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   828a2:	bf00      	nop
   828a4:	4b10      	ldr	r3, [pc, #64]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   828a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   828ac:	2b00      	cmp	r3, #0
   828ae:	d0f9      	beq.n	828a4 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   828b0:	4a0d      	ldr	r2, [pc, #52]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   828b2:	4b0d      	ldr	r3, [pc, #52]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   828b4:	6a1b      	ldr	r3, [r3, #32]
   828b6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   828ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   828be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   828c2:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   828c4:	68fb      	ldr	r3, [r7, #12]
   828c6:	2b00      	cmp	r3, #0
   828c8:	d009      	beq.n	828de <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   828ca:	4a07      	ldr	r2, [pc, #28]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   828cc:	4b06      	ldr	r3, [pc, #24]	; (828e8 <pmc_switch_mainck_to_fastrc+0x94>)
   828ce:	6a1b      	ldr	r3, [r3, #32]
   828d0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   828d4:	f023 0301 	bic.w	r3, r3, #1
   828d8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   828dc:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   828de:	3714      	adds	r7, #20
   828e0:	46bd      	mov	sp, r7
   828e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   828e6:	4770      	bx	lr
   828e8:	400e0600 	.word	0x400e0600
   828ec:	ffc8c086 	.word	0xffc8c086
   828f0:	00373f09 	.word	0x00373f09

000828f4 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   828f4:	b480      	push	{r7}
   828f6:	b083      	sub	sp, #12
   828f8:	af00      	add	r7, sp, #0
   828fa:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   828fc:	687b      	ldr	r3, [r7, #4]
   828fe:	2b00      	cmp	r3, #0
   82900:	d008      	beq.n	82914 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82902:	4912      	ldr	r1, [pc, #72]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82904:	4b11      	ldr	r3, [pc, #68]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82906:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82908:	4a11      	ldr	r2, [pc, #68]	; (82950 <pmc_switch_mainck_to_xtal+0x5c>)
   8290a:	401a      	ands	r2, r3
   8290c:	4b11      	ldr	r3, [pc, #68]	; (82954 <pmc_switch_mainck_to_xtal+0x60>)
   8290e:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82910:	620b      	str	r3, [r1, #32]
   82912:	e016      	b.n	82942 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82914:	490d      	ldr	r1, [pc, #52]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82916:	4b0d      	ldr	r3, [pc, #52]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82918:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8291a:	4a0f      	ldr	r2, [pc, #60]	; (82958 <pmc_switch_mainck_to_xtal+0x64>)
   8291c:	401a      	ands	r2, r3
   8291e:	4b0f      	ldr	r3, [pc, #60]	; (8295c <pmc_switch_mainck_to_xtal+0x68>)
   82920:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82922:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82924:	bf00      	nop
   82926:	4b09      	ldr	r3, [pc, #36]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8292a:	f003 0301 	and.w	r3, r3, #1
   8292e:	2b00      	cmp	r3, #0
   82930:	d0f9      	beq.n	82926 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   82932:	4a06      	ldr	r2, [pc, #24]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82934:	4b05      	ldr	r3, [pc, #20]	; (8294c <pmc_switch_mainck_to_xtal+0x58>)
   82936:	6a1b      	ldr	r3, [r3, #32]
   82938:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82940:	6213      	str	r3, [r2, #32]
	}
}
   82942:	370c      	adds	r7, #12
   82944:	46bd      	mov	sp, r7
   82946:	f85d 7b04 	ldr.w	r7, [sp], #4
   8294a:	4770      	bx	lr
   8294c:	400e0600 	.word	0x400e0600
   82950:	fec8fffc 	.word	0xfec8fffc
   82954:	01370002 	.word	0x01370002
   82958:	ffc8c0fc 	.word	0xffc8c0fc
   8295c:	00373f01 	.word	0x00373f01

00082960 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82960:	b480      	push	{r7}
   82962:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82964:	4b04      	ldr	r3, [pc, #16]	; (82978 <pmc_osc_is_ready_mainck+0x18>)
   82966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   8296c:	4618      	mov	r0, r3
   8296e:	46bd      	mov	sp, r7
   82970:	f85d 7b04 	ldr.w	r7, [sp], #4
   82974:	4770      	bx	lr
   82976:	bf00      	nop
   82978:	400e0600 	.word	0x400e0600

0008297c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   8297c:	b480      	push	{r7}
   8297e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82980:	4b03      	ldr	r3, [pc, #12]	; (82990 <pmc_disable_pllack+0x14>)
   82982:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82986:	629a      	str	r2, [r3, #40]	; 0x28
}
   82988:	46bd      	mov	sp, r7
   8298a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8298e:	4770      	bx	lr
   82990:	400e0600 	.word	0x400e0600

00082994 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82994:	b480      	push	{r7}
   82996:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82998:	4b04      	ldr	r3, [pc, #16]	; (829ac <pmc_is_locked_pllack+0x18>)
   8299a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8299c:	f003 0302 	and.w	r3, r3, #2
}
   829a0:	4618      	mov	r0, r3
   829a2:	46bd      	mov	sp, r7
   829a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   829a8:	4770      	bx	lr
   829aa:	bf00      	nop
   829ac:	400e0600 	.word	0x400e0600

000829b0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   829b0:	b480      	push	{r7}
   829b2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   829b4:	4b04      	ldr	r3, [pc, #16]	; (829c8 <pmc_is_locked_upll+0x18>)
   829b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   829b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   829bc:	4618      	mov	r0, r3
   829be:	46bd      	mov	sp, r7
   829c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   829c4:	4770      	bx	lr
   829c6:	bf00      	nop
   829c8:	400e0600 	.word	0x400e0600

000829cc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   829cc:	b480      	push	{r7}
   829ce:	b083      	sub	sp, #12
   829d0:	af00      	add	r7, sp, #0
   829d2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   829d4:	687b      	ldr	r3, [r7, #4]
   829d6:	2b2c      	cmp	r3, #44	; 0x2c
   829d8:	d901      	bls.n	829de <pmc_enable_periph_clk+0x12>
		return 1;
   829da:	2301      	movs	r3, #1
   829dc:	e02f      	b.n	82a3e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   829de:	687b      	ldr	r3, [r7, #4]
   829e0:	2b1f      	cmp	r3, #31
   829e2:	d813      	bhi.n	82a0c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   829e4:	4b19      	ldr	r3, [pc, #100]	; (82a4c <pmc_enable_periph_clk+0x80>)
   829e6:	699a      	ldr	r2, [r3, #24]
   829e8:	687b      	ldr	r3, [r7, #4]
   829ea:	2101      	movs	r1, #1
   829ec:	fa01 f303 	lsl.w	r3, r1, r3
   829f0:	401a      	ands	r2, r3
   829f2:	687b      	ldr	r3, [r7, #4]
   829f4:	2101      	movs	r1, #1
   829f6:	fa01 f303 	lsl.w	r3, r1, r3
   829fa:	429a      	cmp	r2, r3
   829fc:	d01e      	beq.n	82a3c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   829fe:	4b13      	ldr	r3, [pc, #76]	; (82a4c <pmc_enable_periph_clk+0x80>)
   82a00:	687a      	ldr	r2, [r7, #4]
   82a02:	2101      	movs	r1, #1
   82a04:	fa01 f202 	lsl.w	r2, r1, r2
   82a08:	611a      	str	r2, [r3, #16]
   82a0a:	e017      	b.n	82a3c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   82a0c:	687b      	ldr	r3, [r7, #4]
   82a0e:	3b20      	subs	r3, #32
   82a10:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82a12:	4b0e      	ldr	r3, [pc, #56]	; (82a4c <pmc_enable_periph_clk+0x80>)
   82a14:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82a18:	687b      	ldr	r3, [r7, #4]
   82a1a:	2101      	movs	r1, #1
   82a1c:	fa01 f303 	lsl.w	r3, r1, r3
   82a20:	401a      	ands	r2, r3
   82a22:	687b      	ldr	r3, [r7, #4]
   82a24:	2101      	movs	r1, #1
   82a26:	fa01 f303 	lsl.w	r3, r1, r3
   82a2a:	429a      	cmp	r2, r3
   82a2c:	d006      	beq.n	82a3c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   82a2e:	4b07      	ldr	r3, [pc, #28]	; (82a4c <pmc_enable_periph_clk+0x80>)
   82a30:	687a      	ldr	r2, [r7, #4]
   82a32:	2101      	movs	r1, #1
   82a34:	fa01 f202 	lsl.w	r2, r1, r2
   82a38:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82a3c:	2300      	movs	r3, #0
}
   82a3e:	4618      	mov	r0, r3
   82a40:	370c      	adds	r7, #12
   82a42:	46bd      	mov	sp, r7
   82a44:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a48:	4770      	bx	lr
   82a4a:	bf00      	nop
   82a4c:	400e0600 	.word	0x400e0600

00082a50 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82a50:	b480      	push	{r7}
   82a52:	b089      	sub	sp, #36	; 0x24
   82a54:	af00      	add	r7, sp, #0
   82a56:	60f8      	str	r0, [r7, #12]
   82a58:	60b9      	str	r1, [r7, #8]
   82a5a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82a5c:	68bb      	ldr	r3, [r7, #8]
   82a5e:	011a      	lsls	r2, r3, #4
   82a60:	687b      	ldr	r3, [r7, #4]
   82a62:	429a      	cmp	r2, r3
   82a64:	d802      	bhi.n	82a6c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   82a66:	2310      	movs	r3, #16
   82a68:	61fb      	str	r3, [r7, #28]
   82a6a:	e001      	b.n	82a70 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   82a6c:	2308      	movs	r3, #8
   82a6e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82a70:	687b      	ldr	r3, [r7, #4]
   82a72:	00da      	lsls	r2, r3, #3
   82a74:	69fb      	ldr	r3, [r7, #28]
   82a76:	68b9      	ldr	r1, [r7, #8]
   82a78:	fb01 f303 	mul.w	r3, r1, r3
   82a7c:	085b      	lsrs	r3, r3, #1
   82a7e:	441a      	add	r2, r3
   82a80:	69fb      	ldr	r3, [r7, #28]
   82a82:	68b9      	ldr	r1, [r7, #8]
   82a84:	fb01 f303 	mul.w	r3, r1, r3
   82a88:	fbb2 f3f3 	udiv	r3, r2, r3
   82a8c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82a8e:	69bb      	ldr	r3, [r7, #24]
   82a90:	08db      	lsrs	r3, r3, #3
   82a92:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   82a94:	69bb      	ldr	r3, [r7, #24]
   82a96:	f003 0307 	and.w	r3, r3, #7
   82a9a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82a9c:	697b      	ldr	r3, [r7, #20]
   82a9e:	2b00      	cmp	r3, #0
   82aa0:	d003      	beq.n	82aaa <usart_set_async_baudrate+0x5a>
   82aa2:	697b      	ldr	r3, [r7, #20]
   82aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82aa8:	d301      	bcc.n	82aae <usart_set_async_baudrate+0x5e>
		return 1;
   82aaa:	2301      	movs	r3, #1
   82aac:	e00f      	b.n	82ace <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   82aae:	69fb      	ldr	r3, [r7, #28]
   82ab0:	2b08      	cmp	r3, #8
   82ab2:	d105      	bne.n	82ac0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   82ab4:	68fb      	ldr	r3, [r7, #12]
   82ab6:	685b      	ldr	r3, [r3, #4]
   82ab8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82abc:	68fb      	ldr	r3, [r7, #12]
   82abe:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82ac0:	693b      	ldr	r3, [r7, #16]
   82ac2:	041a      	lsls	r2, r3, #16
   82ac4:	697b      	ldr	r3, [r7, #20]
   82ac6:	431a      	orrs	r2, r3
   82ac8:	68fb      	ldr	r3, [r7, #12]
   82aca:	621a      	str	r2, [r3, #32]

	return 0;
   82acc:	2300      	movs	r3, #0
}
   82ace:	4618      	mov	r0, r3
   82ad0:	3724      	adds	r7, #36	; 0x24
   82ad2:	46bd      	mov	sp, r7
   82ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ad8:	4770      	bx	lr
   82ada:	bf00      	nop

00082adc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82adc:	b580      	push	{r7, lr}
   82ade:	b082      	sub	sp, #8
   82ae0:	af00      	add	r7, sp, #0
   82ae2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   82ae4:	6878      	ldr	r0, [r7, #4]
   82ae6:	4b0d      	ldr	r3, [pc, #52]	; (82b1c <usart_reset+0x40>)
   82ae8:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82aea:	687b      	ldr	r3, [r7, #4]
   82aec:	2200      	movs	r2, #0
   82aee:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82af0:	687b      	ldr	r3, [r7, #4]
   82af2:	2200      	movs	r2, #0
   82af4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82af6:	687b      	ldr	r3, [r7, #4]
   82af8:	2200      	movs	r2, #0
   82afa:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   82afc:	6878      	ldr	r0, [r7, #4]
   82afe:	4b08      	ldr	r3, [pc, #32]	; (82b20 <usart_reset+0x44>)
   82b00:	4798      	blx	r3
	usart_reset_rx(p_usart);
   82b02:	6878      	ldr	r0, [r7, #4]
   82b04:	4b07      	ldr	r3, [pc, #28]	; (82b24 <usart_reset+0x48>)
   82b06:	4798      	blx	r3
	usart_reset_status(p_usart);
   82b08:	6878      	ldr	r0, [r7, #4]
   82b0a:	4b07      	ldr	r3, [pc, #28]	; (82b28 <usart_reset+0x4c>)
   82b0c:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   82b0e:	6878      	ldr	r0, [r7, #4]
   82b10:	4b06      	ldr	r3, [pc, #24]	; (82b2c <usart_reset+0x50>)
   82b12:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82b14:	3708      	adds	r7, #8
   82b16:	46bd      	mov	sp, r7
   82b18:	bd80      	pop	{r7, pc}
   82b1a:	bf00      	nop
   82b1c:	00082d19 	.word	0x00082d19
   82b20:	00082bcd 	.word	0x00082bcd
   82b24:	00082bfd 	.word	0x00082bfd
   82b28:	00082c65 	.word	0x00082c65
   82b2c:	00082c81 	.word	0x00082c81

00082b30 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82b30:	b580      	push	{r7, lr}
   82b32:	b084      	sub	sp, #16
   82b34:	af00      	add	r7, sp, #0
   82b36:	60f8      	str	r0, [r7, #12]
   82b38:	60b9      	str	r1, [r7, #8]
   82b3a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82b3c:	68f8      	ldr	r0, [r7, #12]
   82b3e:	4b1a      	ldr	r3, [pc, #104]	; (82ba8 <usart_init_rs232+0x78>)
   82b40:	4798      	blx	r3

	ul_reg_val = 0;
   82b42:	4b1a      	ldr	r3, [pc, #104]	; (82bac <usart_init_rs232+0x7c>)
   82b44:	2200      	movs	r2, #0
   82b46:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82b48:	68bb      	ldr	r3, [r7, #8]
   82b4a:	2b00      	cmp	r3, #0
   82b4c:	d009      	beq.n	82b62 <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   82b4e:	68bb      	ldr	r3, [r7, #8]
   82b50:	681b      	ldr	r3, [r3, #0]
   82b52:	68f8      	ldr	r0, [r7, #12]
   82b54:	4619      	mov	r1, r3
   82b56:	687a      	ldr	r2, [r7, #4]
   82b58:	4b15      	ldr	r3, [pc, #84]	; (82bb0 <usart_init_rs232+0x80>)
   82b5a:	4798      	blx	r3
   82b5c:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82b5e:	2b00      	cmp	r3, #0
   82b60:	d001      	beq.n	82b66 <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82b62:	2301      	movs	r3, #1
   82b64:	e01b      	b.n	82b9e <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82b66:	68bb      	ldr	r3, [r7, #8]
   82b68:	685a      	ldr	r2, [r3, #4]
   82b6a:	68bb      	ldr	r3, [r7, #8]
   82b6c:	689b      	ldr	r3, [r3, #8]
   82b6e:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82b70:	68bb      	ldr	r3, [r7, #8]
   82b72:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82b74:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82b76:	68bb      	ldr	r3, [r7, #8]
   82b78:	68db      	ldr	r3, [r3, #12]
   82b7a:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82b7c:	4b0b      	ldr	r3, [pc, #44]	; (82bac <usart_init_rs232+0x7c>)
   82b7e:	681b      	ldr	r3, [r3, #0]
   82b80:	431a      	orrs	r2, r3
   82b82:	4b0a      	ldr	r3, [pc, #40]	; (82bac <usart_init_rs232+0x7c>)
   82b84:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   82b86:	4b09      	ldr	r3, [pc, #36]	; (82bac <usart_init_rs232+0x7c>)
   82b88:	681a      	ldr	r2, [r3, #0]
   82b8a:	4b08      	ldr	r3, [pc, #32]	; (82bac <usart_init_rs232+0x7c>)
   82b8c:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   82b8e:	68fb      	ldr	r3, [r7, #12]
   82b90:	685a      	ldr	r2, [r3, #4]
   82b92:	4b06      	ldr	r3, [pc, #24]	; (82bac <usart_init_rs232+0x7c>)
   82b94:	681b      	ldr	r3, [r3, #0]
   82b96:	431a      	orrs	r2, r3
   82b98:	68fb      	ldr	r3, [r7, #12]
   82b9a:	605a      	str	r2, [r3, #4]
	
	return 0;
   82b9c:	2300      	movs	r3, #0
}
   82b9e:	4618      	mov	r0, r3
   82ba0:	3710      	adds	r7, #16
   82ba2:	46bd      	mov	sp, r7
   82ba4:	bd80      	pop	{r7, pc}
   82ba6:	bf00      	nop
   82ba8:	00082add 	.word	0x00082add
   82bac:	200704e4 	.word	0x200704e4
   82bb0:	00082a51 	.word	0x00082a51

00082bb4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82bb4:	b480      	push	{r7}
   82bb6:	b083      	sub	sp, #12
   82bb8:	af00      	add	r7, sp, #0
   82bba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82bbc:	687b      	ldr	r3, [r7, #4]
   82bbe:	2240      	movs	r2, #64	; 0x40
   82bc0:	601a      	str	r2, [r3, #0]
}
   82bc2:	370c      	adds	r7, #12
   82bc4:	46bd      	mov	sp, r7
   82bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bca:	4770      	bx	lr

00082bcc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82bcc:	b480      	push	{r7}
   82bce:	b083      	sub	sp, #12
   82bd0:	af00      	add	r7, sp, #0
   82bd2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82bd4:	687b      	ldr	r3, [r7, #4]
   82bd6:	2288      	movs	r2, #136	; 0x88
   82bd8:	601a      	str	r2, [r3, #0]
}
   82bda:	370c      	adds	r7, #12
   82bdc:	46bd      	mov	sp, r7
   82bde:	f85d 7b04 	ldr.w	r7, [sp], #4
   82be2:	4770      	bx	lr

00082be4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82be4:	b480      	push	{r7}
   82be6:	b083      	sub	sp, #12
   82be8:	af00      	add	r7, sp, #0
   82bea:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82bec:	687b      	ldr	r3, [r7, #4]
   82bee:	2210      	movs	r2, #16
   82bf0:	601a      	str	r2, [r3, #0]
}
   82bf2:	370c      	adds	r7, #12
   82bf4:	46bd      	mov	sp, r7
   82bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bfa:	4770      	bx	lr

00082bfc <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82bfc:	b480      	push	{r7}
   82bfe:	b083      	sub	sp, #12
   82c00:	af00      	add	r7, sp, #0
   82c02:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82c04:	687b      	ldr	r3, [r7, #4]
   82c06:	2224      	movs	r2, #36	; 0x24
   82c08:	601a      	str	r2, [r3, #0]
}
   82c0a:	370c      	adds	r7, #12
   82c0c:	46bd      	mov	sp, r7
   82c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c12:	4770      	bx	lr

00082c14 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82c14:	b480      	push	{r7}
   82c16:	b083      	sub	sp, #12
   82c18:	af00      	add	r7, sp, #0
   82c1a:	6078      	str	r0, [r7, #4]
   82c1c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   82c1e:	687b      	ldr	r3, [r7, #4]
   82c20:	683a      	ldr	r2, [r7, #0]
   82c22:	609a      	str	r2, [r3, #8]
}
   82c24:	370c      	adds	r7, #12
   82c26:	46bd      	mov	sp, r7
   82c28:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c2c:	4770      	bx	lr
   82c2e:	bf00      	nop

00082c30 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82c30:	b480      	push	{r7}
   82c32:	b083      	sub	sp, #12
   82c34:	af00      	add	r7, sp, #0
   82c36:	6078      	str	r0, [r7, #4]
   82c38:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   82c3a:	687b      	ldr	r3, [r7, #4]
   82c3c:	683a      	ldr	r2, [r7, #0]
   82c3e:	60da      	str	r2, [r3, #12]
}
   82c40:	370c      	adds	r7, #12
   82c42:	46bd      	mov	sp, r7
   82c44:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c48:	4770      	bx	lr
   82c4a:	bf00      	nop

00082c4c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   82c4c:	b480      	push	{r7}
   82c4e:	b083      	sub	sp, #12
   82c50:	af00      	add	r7, sp, #0
   82c52:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   82c54:	687b      	ldr	r3, [r7, #4]
   82c56:	695b      	ldr	r3, [r3, #20]
}
   82c58:	4618      	mov	r0, r3
   82c5a:	370c      	adds	r7, #12
   82c5c:	46bd      	mov	sp, r7
   82c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c62:	4770      	bx	lr

00082c64 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82c64:	b480      	push	{r7}
   82c66:	b083      	sub	sp, #12
   82c68:	af00      	add	r7, sp, #0
   82c6a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82c6c:	687b      	ldr	r3, [r7, #4]
   82c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82c72:	601a      	str	r2, [r3, #0]
}
   82c74:	370c      	adds	r7, #12
   82c76:	46bd      	mov	sp, r7
   82c78:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c7c:	4770      	bx	lr
   82c7e:	bf00      	nop

00082c80 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82c80:	b480      	push	{r7}
   82c82:	b083      	sub	sp, #12
   82c84:	af00      	add	r7, sp, #0
   82c86:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82c88:	687b      	ldr	r3, [r7, #4]
   82c8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82c8e:	601a      	str	r2, [r3, #0]
}
   82c90:	370c      	adds	r7, #12
   82c92:	46bd      	mov	sp, r7
   82c94:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c98:	4770      	bx	lr
   82c9a:	bf00      	nop

00082c9c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82c9c:	b480      	push	{r7}
   82c9e:	b083      	sub	sp, #12
   82ca0:	af00      	add	r7, sp, #0
   82ca2:	6078      	str	r0, [r7, #4]
   82ca4:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82ca6:	687b      	ldr	r3, [r7, #4]
   82ca8:	695b      	ldr	r3, [r3, #20]
   82caa:	f003 0302 	and.w	r3, r3, #2
   82cae:	2b00      	cmp	r3, #0
   82cb0:	d101      	bne.n	82cb6 <usart_write+0x1a>
		return 1;
   82cb2:	2301      	movs	r3, #1
   82cb4:	e005      	b.n	82cc2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82cb6:	683b      	ldr	r3, [r7, #0]
   82cb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82cbc:	687b      	ldr	r3, [r7, #4]
   82cbe:	61da      	str	r2, [r3, #28]
	return 0;
   82cc0:	2300      	movs	r3, #0
}
   82cc2:	4618      	mov	r0, r3
   82cc4:	370c      	adds	r7, #12
   82cc6:	46bd      	mov	sp, r7
   82cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ccc:	4770      	bx	lr
   82cce:	bf00      	nop

00082cd0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   82cd0:	b480      	push	{r7}
   82cd2:	b085      	sub	sp, #20
   82cd4:	af00      	add	r7, sp, #0
   82cd6:	6078      	str	r0, [r7, #4]
   82cd8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   82cde:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82ce0:	e006      	b.n	82cf0 <usart_getchar+0x20>
		if (!timeout--) {
   82ce2:	68fb      	ldr	r3, [r7, #12]
   82ce4:	1e5a      	subs	r2, r3, #1
   82ce6:	60fa      	str	r2, [r7, #12]
   82ce8:	2b00      	cmp	r3, #0
   82cea:	d101      	bne.n	82cf0 <usart_getchar+0x20>
			return 1;
   82cec:	2301      	movs	r3, #1
   82cee:	e00c      	b.n	82d0a <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82cf0:	687b      	ldr	r3, [r7, #4]
   82cf2:	695b      	ldr	r3, [r3, #20]
   82cf4:	f003 0301 	and.w	r3, r3, #1
   82cf8:	2b00      	cmp	r3, #0
   82cfa:	d0f2      	beq.n	82ce2 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82cfc:	687b      	ldr	r3, [r7, #4]
   82cfe:	699b      	ldr	r3, [r3, #24]
   82d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82d04:	683b      	ldr	r3, [r7, #0]
   82d06:	601a      	str	r2, [r3, #0]

	return 0;
   82d08:	2300      	movs	r3, #0
}
   82d0a:	4618      	mov	r0, r3
   82d0c:	3714      	adds	r7, #20
   82d0e:	46bd      	mov	sp, r7
   82d10:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d14:	4770      	bx	lr
   82d16:	bf00      	nop

00082d18 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82d18:	b480      	push	{r7}
   82d1a:	b083      	sub	sp, #12
   82d1c:	af00      	add	r7, sp, #0
   82d1e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   82d20:	687b      	ldr	r3, [r7, #4]
   82d22:	4a04      	ldr	r2, [pc, #16]	; (82d34 <usart_disable_writeprotect+0x1c>)
   82d24:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82d28:	370c      	adds	r7, #12
   82d2a:	46bd      	mov	sp, r7
   82d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d30:	4770      	bx	lr
   82d32:	bf00      	nop
   82d34:	55534100 	.word	0x55534100

00082d38 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   82d38:	b480      	push	{r7}
   82d3a:	b083      	sub	sp, #12
   82d3c:	af00      	add	r7, sp, #0
   82d3e:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   82d40:	687a      	ldr	r2, [r7, #4]
   82d42:	4b05      	ldr	r3, [pc, #20]	; (82d58 <wdt_restart+0x20>)
   82d44:	429a      	cmp	r2, r3
   82d46:	d102      	bne.n	82d4e <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   82d48:	687b      	ldr	r3, [r7, #4]
   82d4a:	4a04      	ldr	r2, [pc, #16]	; (82d5c <wdt_restart+0x24>)
   82d4c:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   82d4e:	370c      	adds	r7, #12
   82d50:	46bd      	mov	sp, r7
   82d52:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d56:	4770      	bx	lr
   82d58:	400e1a50 	.word	0x400e1a50
   82d5c:	a5000001 	.word	0xa5000001

00082d60 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   82d60:	b480      	push	{r7}
   82d62:	b083      	sub	sp, #12
   82d64:	af00      	add	r7, sp, #0
   82d66:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   82d68:	687b      	ldr	r3, [r7, #4]
   82d6a:	689b      	ldr	r3, [r3, #8]
}
   82d6c:	4618      	mov	r0, r3
   82d6e:	370c      	adds	r7, #12
   82d70:	46bd      	mov	sp, r7
   82d72:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d76:	4770      	bx	lr

00082d78 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82d78:	b480      	push	{r7}
   82d7a:	af00      	add	r7, sp, #0
	while (1) {
	}
   82d7c:	e7fe      	b.n	82d7c <Dummy_Handler+0x4>
   82d7e:	bf00      	nop

00082d80 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82d80:	b580      	push	{r7, lr}
   82d82:	b082      	sub	sp, #8
   82d84:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82d86:	4b1e      	ldr	r3, [pc, #120]	; (82e00 <Reset_Handler+0x80>)
   82d88:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82d8a:	4b1e      	ldr	r3, [pc, #120]	; (82e04 <Reset_Handler+0x84>)
   82d8c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82d8e:	687a      	ldr	r2, [r7, #4]
   82d90:	683b      	ldr	r3, [r7, #0]
   82d92:	429a      	cmp	r2, r3
   82d94:	d00c      	beq.n	82db0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82d96:	e007      	b.n	82da8 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82d98:	683b      	ldr	r3, [r7, #0]
   82d9a:	1d1a      	adds	r2, r3, #4
   82d9c:	603a      	str	r2, [r7, #0]
   82d9e:	687a      	ldr	r2, [r7, #4]
   82da0:	1d11      	adds	r1, r2, #4
   82da2:	6079      	str	r1, [r7, #4]
   82da4:	6812      	ldr	r2, [r2, #0]
   82da6:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82da8:	683a      	ldr	r2, [r7, #0]
   82daa:	4b17      	ldr	r3, [pc, #92]	; (82e08 <Reset_Handler+0x88>)
   82dac:	429a      	cmp	r2, r3
   82dae:	d3f3      	bcc.n	82d98 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82db0:	4b16      	ldr	r3, [pc, #88]	; (82e0c <Reset_Handler+0x8c>)
   82db2:	603b      	str	r3, [r7, #0]
   82db4:	e004      	b.n	82dc0 <Reset_Handler+0x40>
		*pDest++ = 0;
   82db6:	683b      	ldr	r3, [r7, #0]
   82db8:	1d1a      	adds	r2, r3, #4
   82dba:	603a      	str	r2, [r7, #0]
   82dbc:	2200      	movs	r2, #0
   82dbe:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82dc0:	683a      	ldr	r2, [r7, #0]
   82dc2:	4b13      	ldr	r3, [pc, #76]	; (82e10 <Reset_Handler+0x90>)
   82dc4:	429a      	cmp	r2, r3
   82dc6:	d3f6      	bcc.n	82db6 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82dc8:	4b12      	ldr	r3, [pc, #72]	; (82e14 <Reset_Handler+0x94>)
   82dca:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82dcc:	4a12      	ldr	r2, [pc, #72]	; (82e18 <Reset_Handler+0x98>)
   82dce:	687b      	ldr	r3, [r7, #4]
   82dd0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82dd4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82dd8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82dda:	687b      	ldr	r3, [r7, #4]
   82ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82de0:	d309      	bcc.n	82df6 <Reset_Handler+0x76>
   82de2:	687a      	ldr	r2, [r7, #4]
   82de4:	4b0d      	ldr	r3, [pc, #52]	; (82e1c <Reset_Handler+0x9c>)
   82de6:	429a      	cmp	r2, r3
   82de8:	d805      	bhi.n	82df6 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82dea:	4b0b      	ldr	r3, [pc, #44]	; (82e18 <Reset_Handler+0x98>)
   82dec:	4a0a      	ldr	r2, [pc, #40]	; (82e18 <Reset_Handler+0x98>)
   82dee:	6892      	ldr	r2, [r2, #8]
   82df0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82df4:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82df6:	4b0a      	ldr	r3, [pc, #40]	; (82e20 <Reset_Handler+0xa0>)
   82df8:	4798      	blx	r3

	/* Branch to main function */
	main();
   82dfa:	4b0a      	ldr	r3, [pc, #40]	; (82e24 <Reset_Handler+0xa4>)
   82dfc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82dfe:	e7fe      	b.n	82dfe <Reset_Handler+0x7e>
   82e00:	00086f6c 	.word	0x00086f6c
   82e04:	20070000 	.word	0x20070000
   82e08:	20070438 	.word	0x20070438
   82e0c:	20070438 	.word	0x20070438
   82e10:	2007a728 	.word	0x2007a728
   82e14:	00080000 	.word	0x00080000
   82e18:	e000ed00 	.word	0xe000ed00
   82e1c:	200fffff 	.word	0x200fffff
   82e20:	00086a8d 	.word	0x00086a8d
   82e24:	000862c9 	.word	0x000862c9

00082e28 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82e28:	b480      	push	{r7}
   82e2a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82e2c:	4b56      	ldr	r3, [pc, #344]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e30:	f003 0303 	and.w	r3, r3, #3
   82e34:	2b03      	cmp	r3, #3
   82e36:	f200 808a 	bhi.w	82f4e <SystemCoreClockUpdate+0x126>
   82e3a:	a101      	add	r1, pc, #4	; (adr r1, 82e40 <SystemCoreClockUpdate+0x18>)
   82e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82e40:	00082e51 	.word	0x00082e51
   82e44:	00082e71 	.word	0x00082e71
   82e48:	00082ec1 	.word	0x00082ec1
   82e4c:	00082ec1 	.word	0x00082ec1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82e50:	4b4e      	ldr	r3, [pc, #312]	; (82f8c <SystemCoreClockUpdate+0x164>)
   82e52:	695b      	ldr	r3, [r3, #20]
   82e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82e58:	2b00      	cmp	r3, #0
   82e5a:	d004      	beq.n	82e66 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82e5c:	4b4c      	ldr	r3, [pc, #304]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82e5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e62:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82e64:	e073      	b.n	82f4e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82e66:	4b4a      	ldr	r3, [pc, #296]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82e68:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82e6c:	601a      	str	r2, [r3, #0]
		}
		break;
   82e6e:	e06e      	b.n	82f4e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e70:	4b45      	ldr	r3, [pc, #276]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82e72:	6a1b      	ldr	r3, [r3, #32]
   82e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e78:	2b00      	cmp	r3, #0
   82e7a:	d003      	beq.n	82e84 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e7c:	4b44      	ldr	r3, [pc, #272]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82e7e:	4a45      	ldr	r2, [pc, #276]	; (82f94 <SystemCoreClockUpdate+0x16c>)
   82e80:	601a      	str	r2, [r3, #0]
   82e82:	e01c      	b.n	82ebe <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e84:	4b42      	ldr	r3, [pc, #264]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82e86:	4a44      	ldr	r2, [pc, #272]	; (82f98 <SystemCoreClockUpdate+0x170>)
   82e88:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e8a:	4b3f      	ldr	r3, [pc, #252]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82e8c:	6a1b      	ldr	r3, [r3, #32]
   82e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e92:	2b10      	cmp	r3, #16
   82e94:	d004      	beq.n	82ea0 <SystemCoreClockUpdate+0x78>
   82e96:	2b20      	cmp	r3, #32
   82e98:	d008      	beq.n	82eac <SystemCoreClockUpdate+0x84>
   82e9a:	2b00      	cmp	r3, #0
   82e9c:	d00e      	beq.n	82ebc <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82e9e:	e00e      	b.n	82ebe <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82ea0:	4b3b      	ldr	r3, [pc, #236]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82ea2:	681b      	ldr	r3, [r3, #0]
   82ea4:	005a      	lsls	r2, r3, #1
   82ea6:	4b3a      	ldr	r3, [pc, #232]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82ea8:	601a      	str	r2, [r3, #0]
				break;
   82eaa:	e008      	b.n	82ebe <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82eac:	4b38      	ldr	r3, [pc, #224]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82eae:	681a      	ldr	r2, [r3, #0]
   82eb0:	4613      	mov	r3, r2
   82eb2:	005b      	lsls	r3, r3, #1
   82eb4:	441a      	add	r2, r3
   82eb6:	4b36      	ldr	r3, [pc, #216]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82eb8:	601a      	str	r2, [r3, #0]
				break;
   82eba:	e000      	b.n	82ebe <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82ebc:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   82ebe:	e046      	b.n	82f4e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82ec0:	4b31      	ldr	r3, [pc, #196]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82ec2:	6a1b      	ldr	r3, [r3, #32]
   82ec4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82ec8:	2b00      	cmp	r3, #0
   82eca:	d003      	beq.n	82ed4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82ecc:	4b30      	ldr	r3, [pc, #192]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82ece:	4a31      	ldr	r2, [pc, #196]	; (82f94 <SystemCoreClockUpdate+0x16c>)
   82ed0:	601a      	str	r2, [r3, #0]
   82ed2:	e01c      	b.n	82f0e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82ed4:	4b2e      	ldr	r3, [pc, #184]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82ed6:	4a30      	ldr	r2, [pc, #192]	; (82f98 <SystemCoreClockUpdate+0x170>)
   82ed8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82eda:	4b2b      	ldr	r3, [pc, #172]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82edc:	6a1b      	ldr	r3, [r3, #32]
   82ede:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ee2:	2b10      	cmp	r3, #16
   82ee4:	d004      	beq.n	82ef0 <SystemCoreClockUpdate+0xc8>
   82ee6:	2b20      	cmp	r3, #32
   82ee8:	d008      	beq.n	82efc <SystemCoreClockUpdate+0xd4>
   82eea:	2b00      	cmp	r3, #0
   82eec:	d00e      	beq.n	82f0c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82eee:	e00e      	b.n	82f0e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82ef0:	4b27      	ldr	r3, [pc, #156]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82ef2:	681b      	ldr	r3, [r3, #0]
   82ef4:	005a      	lsls	r2, r3, #1
   82ef6:	4b26      	ldr	r3, [pc, #152]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82ef8:	601a      	str	r2, [r3, #0]
				break;
   82efa:	e008      	b.n	82f0e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82efc:	4b24      	ldr	r3, [pc, #144]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82efe:	681a      	ldr	r2, [r3, #0]
   82f00:	4613      	mov	r3, r2
   82f02:	005b      	lsls	r3, r3, #1
   82f04:	441a      	add	r2, r3
   82f06:	4b22      	ldr	r3, [pc, #136]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f08:	601a      	str	r2, [r3, #0]
				break;
   82f0a:	e000      	b.n	82f0e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82f0c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82f0e:	4b1e      	ldr	r3, [pc, #120]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f12:	f003 0303 	and.w	r3, r3, #3
   82f16:	2b02      	cmp	r3, #2
   82f18:	d115      	bne.n	82f46 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82f1a:	4b1b      	ldr	r3, [pc, #108]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82f1e:	4b1f      	ldr	r3, [pc, #124]	; (82f9c <SystemCoreClockUpdate+0x174>)
   82f20:	4013      	ands	r3, r2
   82f22:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82f24:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82f26:	4a1a      	ldr	r2, [pc, #104]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f28:	6812      	ldr	r2, [r2, #0]
   82f2a:	fb02 f203 	mul.w	r2, r2, r3
   82f2e:	4b18      	ldr	r3, [pc, #96]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f30:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82f32:	4b17      	ldr	r3, [pc, #92]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f34:	681a      	ldr	r2, [r3, #0]
   82f36:	4b14      	ldr	r3, [pc, #80]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82f3a:	b2db      	uxtb	r3, r3
   82f3c:	fbb2 f2f3 	udiv	r2, r2, r3
   82f40:	4b13      	ldr	r3, [pc, #76]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f42:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82f44:	e002      	b.n	82f4c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82f46:	4b12      	ldr	r3, [pc, #72]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f48:	4a15      	ldr	r2, [pc, #84]	; (82fa0 <SystemCoreClockUpdate+0x178>)
   82f4a:	601a      	str	r2, [r3, #0]
		}
		break;
   82f4c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82f4e:	4b0e      	ldr	r3, [pc, #56]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f52:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82f56:	2b70      	cmp	r3, #112	; 0x70
   82f58:	d108      	bne.n	82f6c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82f5a:	4b0d      	ldr	r3, [pc, #52]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f5c:	681a      	ldr	r2, [r3, #0]
   82f5e:	4b11      	ldr	r3, [pc, #68]	; (82fa4 <SystemCoreClockUpdate+0x17c>)
   82f60:	fba3 1302 	umull	r1, r3, r3, r2
   82f64:	085a      	lsrs	r2, r3, #1
   82f66:	4b0a      	ldr	r3, [pc, #40]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f68:	601a      	str	r2, [r3, #0]
   82f6a:	e009      	b.n	82f80 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82f6c:	4b08      	ldr	r3, [pc, #32]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f6e:	681a      	ldr	r2, [r3, #0]
   82f70:	4b05      	ldr	r3, [pc, #20]	; (82f88 <SystemCoreClockUpdate+0x160>)
   82f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f74:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82f78:	091b      	lsrs	r3, r3, #4
   82f7a:	40da      	lsrs	r2, r3
   82f7c:	4b04      	ldr	r3, [pc, #16]	; (82f90 <SystemCoreClockUpdate+0x168>)
   82f7e:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82f80:	46bd      	mov	sp, r7
   82f82:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f86:	4770      	bx	lr
   82f88:	400e0600 	.word	0x400e0600
   82f8c:	400e1a10 	.word	0x400e1a10
   82f90:	20070000 	.word	0x20070000
   82f94:	00b71b00 	.word	0x00b71b00
   82f98:	003d0900 	.word	0x003d0900
   82f9c:	07ff0000 	.word	0x07ff0000
   82fa0:	0e4e1c00 	.word	0x0e4e1c00
   82fa4:	aaaaaaab 	.word	0xaaaaaaab

00082fa8 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82fa8:	b480      	push	{r7}
   82faa:	b083      	sub	sp, #12
   82fac:	af00      	add	r7, sp, #0
   82fae:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82fb0:	687a      	ldr	r2, [r7, #4]
   82fb2:	4b1f      	ldr	r3, [pc, #124]	; (83030 <system_init_flash+0x88>)
   82fb4:	429a      	cmp	r2, r3
   82fb6:	d806      	bhi.n	82fc6 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82fb8:	4b1e      	ldr	r3, [pc, #120]	; (83034 <system_init_flash+0x8c>)
   82fba:	2200      	movs	r2, #0
   82fbc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82fbe:	4b1e      	ldr	r3, [pc, #120]	; (83038 <system_init_flash+0x90>)
   82fc0:	2200      	movs	r2, #0
   82fc2:	601a      	str	r2, [r3, #0]
   82fc4:	e02e      	b.n	83024 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82fc6:	687a      	ldr	r2, [r7, #4]
   82fc8:	4b1c      	ldr	r3, [pc, #112]	; (8303c <system_init_flash+0x94>)
   82fca:	429a      	cmp	r2, r3
   82fcc:	d808      	bhi.n	82fe0 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82fce:	4b19      	ldr	r3, [pc, #100]	; (83034 <system_init_flash+0x8c>)
   82fd0:	f44f 7280 	mov.w	r2, #256	; 0x100
   82fd4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82fd6:	4b18      	ldr	r3, [pc, #96]	; (83038 <system_init_flash+0x90>)
   82fd8:	f44f 7280 	mov.w	r2, #256	; 0x100
   82fdc:	601a      	str	r2, [r3, #0]
   82fde:	e021      	b.n	83024 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82fe0:	687a      	ldr	r2, [r7, #4]
   82fe2:	4b17      	ldr	r3, [pc, #92]	; (83040 <system_init_flash+0x98>)
   82fe4:	429a      	cmp	r2, r3
   82fe6:	d808      	bhi.n	82ffa <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82fe8:	4b12      	ldr	r3, [pc, #72]	; (83034 <system_init_flash+0x8c>)
   82fea:	f44f 7200 	mov.w	r2, #512	; 0x200
   82fee:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82ff0:	4b11      	ldr	r3, [pc, #68]	; (83038 <system_init_flash+0x90>)
   82ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ff6:	601a      	str	r2, [r3, #0]
   82ff8:	e014      	b.n	83024 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82ffa:	687a      	ldr	r2, [r7, #4]
   82ffc:	4b11      	ldr	r3, [pc, #68]	; (83044 <system_init_flash+0x9c>)
   82ffe:	429a      	cmp	r2, r3
   83000:	d808      	bhi.n	83014 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83002:	4b0c      	ldr	r3, [pc, #48]	; (83034 <system_init_flash+0x8c>)
   83004:	f44f 7240 	mov.w	r2, #768	; 0x300
   83008:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8300a:	4b0b      	ldr	r3, [pc, #44]	; (83038 <system_init_flash+0x90>)
   8300c:	f44f 7240 	mov.w	r2, #768	; 0x300
   83010:	601a      	str	r2, [r3, #0]
   83012:	e007      	b.n	83024 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   83014:	4b07      	ldr	r3, [pc, #28]	; (83034 <system_init_flash+0x8c>)
   83016:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8301a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8301c:	4b06      	ldr	r3, [pc, #24]	; (83038 <system_init_flash+0x90>)
   8301e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83022:	601a      	str	r2, [r3, #0]
	}
}
   83024:	370c      	adds	r7, #12
   83026:	46bd      	mov	sp, r7
   83028:	f85d 7b04 	ldr.w	r7, [sp], #4
   8302c:	4770      	bx	lr
   8302e:	bf00      	nop
   83030:	0157529f 	.word	0x0157529f
   83034:	400e0a00 	.word	0x400e0a00
   83038:	400e0c00 	.word	0x400e0c00
   8303c:	0206cc7f 	.word	0x0206cc7f
   83040:	0328b73f 	.word	0x0328b73f
   83044:	04a62f7f 	.word	0x04a62f7f

00083048 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   83048:	b480      	push	{r7}
   8304a:	b083      	sub	sp, #12
   8304c:	af00      	add	r7, sp, #0
   8304e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83050:	687b      	ldr	r3, [r7, #4]
   83052:	f103 0208 	add.w	r2, r3, #8
   83056:	687b      	ldr	r3, [r7, #4]
   83058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8305a:	687b      	ldr	r3, [r7, #4]
   8305c:	f04f 32ff 	mov.w	r2, #4294967295
   83060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83062:	687b      	ldr	r3, [r7, #4]
   83064:	f103 0208 	add.w	r2, r3, #8
   83068:	687b      	ldr	r3, [r7, #4]
   8306a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8306c:	687b      	ldr	r3, [r7, #4]
   8306e:	f103 0208 	add.w	r2, r3, #8
   83072:	687b      	ldr	r3, [r7, #4]
   83074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   83076:	687b      	ldr	r3, [r7, #4]
   83078:	2200      	movs	r2, #0
   8307a:	601a      	str	r2, [r3, #0]
}
   8307c:	370c      	adds	r7, #12
   8307e:	46bd      	mov	sp, r7
   83080:	f85d 7b04 	ldr.w	r7, [sp], #4
   83084:	4770      	bx	lr
   83086:	bf00      	nop

00083088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   83088:	b480      	push	{r7}
   8308a:	b083      	sub	sp, #12
   8308c:	af00      	add	r7, sp, #0
   8308e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   83090:	687b      	ldr	r3, [r7, #4]
   83092:	2200      	movs	r2, #0
   83094:	611a      	str	r2, [r3, #16]
}
   83096:	370c      	adds	r7, #12
   83098:	46bd      	mov	sp, r7
   8309a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8309e:	4770      	bx	lr

000830a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   830a0:	b480      	push	{r7}
   830a2:	b085      	sub	sp, #20
   830a4:	af00      	add	r7, sp, #0
   830a6:	6078      	str	r0, [r7, #4]
   830a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   830aa:	687b      	ldr	r3, [r7, #4]
   830ac:	685b      	ldr	r3, [r3, #4]
   830ae:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   830b0:	683b      	ldr	r3, [r7, #0]
   830b2:	68fa      	ldr	r2, [r7, #12]
   830b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   830b6:	68fb      	ldr	r3, [r7, #12]
   830b8:	689a      	ldr	r2, [r3, #8]
   830ba:	683b      	ldr	r3, [r7, #0]
   830bc:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   830be:	68fb      	ldr	r3, [r7, #12]
   830c0:	689b      	ldr	r3, [r3, #8]
   830c2:	683a      	ldr	r2, [r7, #0]
   830c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   830c6:	68fb      	ldr	r3, [r7, #12]
   830c8:	683a      	ldr	r2, [r7, #0]
   830ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   830cc:	683b      	ldr	r3, [r7, #0]
   830ce:	687a      	ldr	r2, [r7, #4]
   830d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   830d2:	687b      	ldr	r3, [r7, #4]
   830d4:	681b      	ldr	r3, [r3, #0]
   830d6:	1c5a      	adds	r2, r3, #1
   830d8:	687b      	ldr	r3, [r7, #4]
   830da:	601a      	str	r2, [r3, #0]
}
   830dc:	3714      	adds	r7, #20
   830de:	46bd      	mov	sp, r7
   830e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   830e4:	4770      	bx	lr
   830e6:	bf00      	nop

000830e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   830e8:	b480      	push	{r7}
   830ea:	b085      	sub	sp, #20
   830ec:	af00      	add	r7, sp, #0
   830ee:	6078      	str	r0, [r7, #4]
   830f0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   830f2:	683b      	ldr	r3, [r7, #0]
   830f4:	681b      	ldr	r3, [r3, #0]
   830f6:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   830f8:	68bb      	ldr	r3, [r7, #8]
   830fa:	f1b3 3fff 	cmp.w	r3, #4294967295
   830fe:	d103      	bne.n	83108 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   83100:	687b      	ldr	r3, [r7, #4]
   83102:	691b      	ldr	r3, [r3, #16]
   83104:	60fb      	str	r3, [r7, #12]
   83106:	e00c      	b.n	83122 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83108:	687b      	ldr	r3, [r7, #4]
   8310a:	3308      	adds	r3, #8
   8310c:	60fb      	str	r3, [r7, #12]
   8310e:	e002      	b.n	83116 <vListInsert+0x2e>
   83110:	68fb      	ldr	r3, [r7, #12]
   83112:	685b      	ldr	r3, [r3, #4]
   83114:	60fb      	str	r3, [r7, #12]
   83116:	68fb      	ldr	r3, [r7, #12]
   83118:	685b      	ldr	r3, [r3, #4]
   8311a:	681a      	ldr	r2, [r3, #0]
   8311c:	68bb      	ldr	r3, [r7, #8]
   8311e:	429a      	cmp	r2, r3
   83120:	d9f6      	bls.n	83110 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   83122:	68fb      	ldr	r3, [r7, #12]
   83124:	685a      	ldr	r2, [r3, #4]
   83126:	683b      	ldr	r3, [r7, #0]
   83128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   8312a:	683b      	ldr	r3, [r7, #0]
   8312c:	685b      	ldr	r3, [r3, #4]
   8312e:	683a      	ldr	r2, [r7, #0]
   83130:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   83132:	683b      	ldr	r3, [r7, #0]
   83134:	68fa      	ldr	r2, [r7, #12]
   83136:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   83138:	68fb      	ldr	r3, [r7, #12]
   8313a:	683a      	ldr	r2, [r7, #0]
   8313c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8313e:	683b      	ldr	r3, [r7, #0]
   83140:	687a      	ldr	r2, [r7, #4]
   83142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   83144:	687b      	ldr	r3, [r7, #4]
   83146:	681b      	ldr	r3, [r3, #0]
   83148:	1c5a      	adds	r2, r3, #1
   8314a:	687b      	ldr	r3, [r7, #4]
   8314c:	601a      	str	r2, [r3, #0]
}
   8314e:	3714      	adds	r7, #20
   83150:	46bd      	mov	sp, r7
   83152:	f85d 7b04 	ldr.w	r7, [sp], #4
   83156:	4770      	bx	lr

00083158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   83158:	b480      	push	{r7}
   8315a:	b085      	sub	sp, #20
   8315c:	af00      	add	r7, sp, #0
   8315e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   83160:	687b      	ldr	r3, [r7, #4]
   83162:	691b      	ldr	r3, [r3, #16]
   83164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   83166:	687b      	ldr	r3, [r7, #4]
   83168:	685b      	ldr	r3, [r3, #4]
   8316a:	687a      	ldr	r2, [r7, #4]
   8316c:	6892      	ldr	r2, [r2, #8]
   8316e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   83170:	687b      	ldr	r3, [r7, #4]
   83172:	689b      	ldr	r3, [r3, #8]
   83174:	687a      	ldr	r2, [r7, #4]
   83176:	6852      	ldr	r2, [r2, #4]
   83178:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8317a:	68fb      	ldr	r3, [r7, #12]
   8317c:	685a      	ldr	r2, [r3, #4]
   8317e:	687b      	ldr	r3, [r7, #4]
   83180:	429a      	cmp	r2, r3
   83182:	d103      	bne.n	8318c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   83184:	687b      	ldr	r3, [r7, #4]
   83186:	689a      	ldr	r2, [r3, #8]
   83188:	68fb      	ldr	r3, [r7, #12]
   8318a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   8318c:	687b      	ldr	r3, [r7, #4]
   8318e:	2200      	movs	r2, #0
   83190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   83192:	68fb      	ldr	r3, [r7, #12]
   83194:	681b      	ldr	r3, [r3, #0]
   83196:	1e5a      	subs	r2, r3, #1
   83198:	68fb      	ldr	r3, [r7, #12]
   8319a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8319c:	68fb      	ldr	r3, [r7, #12]
   8319e:	681b      	ldr	r3, [r3, #0]
}
   831a0:	4618      	mov	r0, r3
   831a2:	3714      	adds	r7, #20
   831a4:	46bd      	mov	sp, r7
   831a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   831aa:	4770      	bx	lr

000831ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   831ac:	b480      	push	{r7}
   831ae:	b085      	sub	sp, #20
   831b0:	af00      	add	r7, sp, #0
   831b2:	60f8      	str	r0, [r7, #12]
   831b4:	60b9      	str	r1, [r7, #8]
   831b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   831b8:	68fb      	ldr	r3, [r7, #12]
   831ba:	3b04      	subs	r3, #4
   831bc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   831be:	68fb      	ldr	r3, [r7, #12]
   831c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   831c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   831c6:	68fb      	ldr	r3, [r7, #12]
   831c8:	3b04      	subs	r3, #4
   831ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   831cc:	68ba      	ldr	r2, [r7, #8]
   831ce:	68fb      	ldr	r3, [r7, #12]
   831d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   831d2:	68fb      	ldr	r3, [r7, #12]
   831d4:	3b04      	subs	r3, #4
   831d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   831d8:	4a09      	ldr	r2, [pc, #36]	; (83200 <pxPortInitialiseStack+0x54>)
   831da:	68fb      	ldr	r3, [r7, #12]
   831dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   831de:	68fb      	ldr	r3, [r7, #12]
   831e0:	3b14      	subs	r3, #20
   831e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   831e4:	687a      	ldr	r2, [r7, #4]
   831e6:	68fb      	ldr	r3, [r7, #12]
   831e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   831ea:	68fb      	ldr	r3, [r7, #12]
   831ec:	3b20      	subs	r3, #32
   831ee:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   831f0:	68fb      	ldr	r3, [r7, #12]
}
   831f2:	4618      	mov	r0, r3
   831f4:	3714      	adds	r7, #20
   831f6:	46bd      	mov	sp, r7
   831f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   831fc:	4770      	bx	lr
   831fe:	bf00      	nop
   83200:	00083205 	.word	0x00083205

00083204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   83204:	b580      	push	{r7, lr}
   83206:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   83208:	4b05      	ldr	r3, [pc, #20]	; (83220 <prvTaskExitError+0x1c>)
   8320a:	681b      	ldr	r3, [r3, #0]
   8320c:	f1b3 3fff 	cmp.w	r3, #4294967295
   83210:	d002      	beq.n	83218 <prvTaskExitError+0x14>
   83212:	4b04      	ldr	r3, [pc, #16]	; (83224 <prvTaskExitError+0x20>)
   83214:	4798      	blx	r3
   83216:	e7fe      	b.n	83216 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   83218:	4b02      	ldr	r3, [pc, #8]	; (83224 <prvTaskExitError+0x20>)
   8321a:	4798      	blx	r3
	for( ;; );
   8321c:	e7fe      	b.n	8321c <prvTaskExitError+0x18>
   8321e:	bf00      	nop
   83220:	20070004 	.word	0x20070004
   83224:	000833d1 	.word	0x000833d1

00083228 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   83228:	4b07      	ldr	r3, [pc, #28]	; (83248 <pxCurrentTCBConst2>)
   8322a:	6819      	ldr	r1, [r3, #0]
   8322c:	6808      	ldr	r0, [r1, #0]
   8322e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83232:	f380 8809 	msr	PSP, r0
   83236:	f3bf 8f6f 	isb	sy
   8323a:	f04f 0000 	mov.w	r0, #0
   8323e:	f380 8811 	msr	BASEPRI, r0
   83242:	f04e 0e0d 	orr.w	lr, lr, #13
   83246:	4770      	bx	lr

00083248 <pxCurrentTCBConst2>:
   83248:	2007a508 	.word	0x2007a508

0008324c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   8324c:	4806      	ldr	r0, [pc, #24]	; (83268 <prvPortStartFirstTask+0x1c>)
   8324e:	6800      	ldr	r0, [r0, #0]
   83250:	6800      	ldr	r0, [r0, #0]
   83252:	f380 8808 	msr	MSP, r0
   83256:	b662      	cpsie	i
   83258:	b661      	cpsie	f
   8325a:	f3bf 8f4f 	dsb	sy
   8325e:	f3bf 8f6f 	isb	sy
   83262:	df00      	svc	0
   83264:	bf00      	nop
   83266:	0000      	.short	0x0000
   83268:	e000ed08 	.word	0xe000ed08

0008326c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   8326c:	b580      	push	{r7, lr}
   8326e:	b084      	sub	sp, #16
   83270:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   83272:	4b28      	ldr	r3, [pc, #160]	; (83314 <xPortStartScheduler+0xa8>)
   83274:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   83276:	68fb      	ldr	r3, [r7, #12]
   83278:	781b      	ldrb	r3, [r3, #0]
   8327a:	b2db      	uxtb	r3, r3
   8327c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   8327e:	68fb      	ldr	r3, [r7, #12]
   83280:	22ff      	movs	r2, #255	; 0xff
   83282:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   83284:	68fb      	ldr	r3, [r7, #12]
   83286:	781b      	ldrb	r3, [r3, #0]
   83288:	b2db      	uxtb	r3, r3
   8328a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   8328c:	79fb      	ldrb	r3, [r7, #7]
   8328e:	b2db      	uxtb	r3, r3
   83290:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   83294:	b2da      	uxtb	r2, r3
   83296:	4b20      	ldr	r3, [pc, #128]	; (83318 <xPortStartScheduler+0xac>)
   83298:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   8329a:	4b20      	ldr	r3, [pc, #128]	; (8331c <xPortStartScheduler+0xb0>)
   8329c:	2207      	movs	r2, #7
   8329e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   832a0:	e009      	b.n	832b6 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   832a2:	4b1e      	ldr	r3, [pc, #120]	; (8331c <xPortStartScheduler+0xb0>)
   832a4:	681b      	ldr	r3, [r3, #0]
   832a6:	1e5a      	subs	r2, r3, #1
   832a8:	4b1c      	ldr	r3, [pc, #112]	; (8331c <xPortStartScheduler+0xb0>)
   832aa:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   832ac:	79fb      	ldrb	r3, [r7, #7]
   832ae:	b2db      	uxtb	r3, r3
   832b0:	005b      	lsls	r3, r3, #1
   832b2:	b2db      	uxtb	r3, r3
   832b4:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   832b6:	79fb      	ldrb	r3, [r7, #7]
   832b8:	b2db      	uxtb	r3, r3
   832ba:	b2db      	uxtb	r3, r3
   832bc:	b25b      	sxtb	r3, r3
   832be:	2b00      	cmp	r3, #0
   832c0:	dbef      	blt.n	832a2 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   832c2:	4b16      	ldr	r3, [pc, #88]	; (8331c <xPortStartScheduler+0xb0>)
   832c4:	681b      	ldr	r3, [r3, #0]
   832c6:	021a      	lsls	r2, r3, #8
   832c8:	4b14      	ldr	r3, [pc, #80]	; (8331c <xPortStartScheduler+0xb0>)
   832ca:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   832cc:	4b13      	ldr	r3, [pc, #76]	; (8331c <xPortStartScheduler+0xb0>)
   832ce:	681b      	ldr	r3, [r3, #0]
   832d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   832d4:	4b11      	ldr	r3, [pc, #68]	; (8331c <xPortStartScheduler+0xb0>)
   832d6:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   832d8:	68bb      	ldr	r3, [r7, #8]
   832da:	b2da      	uxtb	r2, r3
   832dc:	68fb      	ldr	r3, [r7, #12]
   832de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   832e0:	4b0f      	ldr	r3, [pc, #60]	; (83320 <xPortStartScheduler+0xb4>)
   832e2:	4a0f      	ldr	r2, [pc, #60]	; (83320 <xPortStartScheduler+0xb4>)
   832e4:	6812      	ldr	r2, [r2, #0]
   832e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   832ea:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   832ec:	4b0c      	ldr	r3, [pc, #48]	; (83320 <xPortStartScheduler+0xb4>)
   832ee:	4a0c      	ldr	r2, [pc, #48]	; (83320 <xPortStartScheduler+0xb4>)
   832f0:	6812      	ldr	r2, [r2, #0]
   832f2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   832f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   832f8:	4b0a      	ldr	r3, [pc, #40]	; (83324 <xPortStartScheduler+0xb8>)
   832fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   832fc:	4b0a      	ldr	r3, [pc, #40]	; (83328 <xPortStartScheduler+0xbc>)
   832fe:	2200      	movs	r2, #0
   83300:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   83302:	4b0a      	ldr	r3, [pc, #40]	; (8332c <xPortStartScheduler+0xc0>)
   83304:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   83306:	4b0a      	ldr	r3, [pc, #40]	; (83330 <xPortStartScheduler+0xc4>)
   83308:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   8330a:	2300      	movs	r3, #0
}
   8330c:	4618      	mov	r0, r3
   8330e:	3710      	adds	r7, #16
   83310:	46bd      	mov	sp, r7
   83312:	bd80      	pop	{r7, pc}
   83314:	e000e400 	.word	0xe000e400
   83318:	200704e8 	.word	0x200704e8
   8331c:	200704ec 	.word	0x200704ec
   83320:	e000ed20 	.word	0xe000ed20
   83324:	00083465 	.word	0x00083465
   83328:	20070004 	.word	0x20070004
   8332c:	0008324d 	.word	0x0008324d
   83330:	00083205 	.word	0x00083205

00083334 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   83334:	b480      	push	{r7}
   83336:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   83338:	4b05      	ldr	r3, [pc, #20]	; (83350 <vPortYield+0x1c>)
   8333a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8333e:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   83340:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   83344:	f3bf 8f6f 	isb	sy
}
   83348:	46bd      	mov	sp, r7
   8334a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8334e:	4770      	bx	lr
   83350:	e000ed04 	.word	0xe000ed04

00083354 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   83354:	b580      	push	{r7, lr}
   83356:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   83358:	4b0c      	ldr	r3, [pc, #48]	; (8338c <vPortEnterCritical+0x38>)
   8335a:	4798      	blx	r3
	uxCriticalNesting++;
   8335c:	4b0c      	ldr	r3, [pc, #48]	; (83390 <vPortEnterCritical+0x3c>)
   8335e:	681b      	ldr	r3, [r3, #0]
   83360:	1c5a      	adds	r2, r3, #1
   83362:	4b0b      	ldr	r3, [pc, #44]	; (83390 <vPortEnterCritical+0x3c>)
   83364:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   83366:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   8336a:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8336e:	4b08      	ldr	r3, [pc, #32]	; (83390 <vPortEnterCritical+0x3c>)
   83370:	681b      	ldr	r3, [r3, #0]
   83372:	2b01      	cmp	r3, #1
   83374:	d108      	bne.n	83388 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   83376:	4b07      	ldr	r3, [pc, #28]	; (83394 <vPortEnterCritical+0x40>)
   83378:	681b      	ldr	r3, [r3, #0]
   8337a:	f003 031f 	and.w	r3, r3, #31
   8337e:	2b00      	cmp	r3, #0
   83380:	d002      	beq.n	83388 <vPortEnterCritical+0x34>
   83382:	4b02      	ldr	r3, [pc, #8]	; (8338c <vPortEnterCritical+0x38>)
   83384:	4798      	blx	r3
   83386:	e7fe      	b.n	83386 <vPortEnterCritical+0x32>
	}
}
   83388:	bd80      	pop	{r7, pc}
   8338a:	bf00      	nop
   8338c:	000833d1 	.word	0x000833d1
   83390:	20070004 	.word	0x20070004
   83394:	e000ed04 	.word	0xe000ed04

00083398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   83398:	b580      	push	{r7, lr}
   8339a:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   8339c:	4b09      	ldr	r3, [pc, #36]	; (833c4 <vPortExitCritical+0x2c>)
   8339e:	681b      	ldr	r3, [r3, #0]
   833a0:	2b00      	cmp	r3, #0
   833a2:	d102      	bne.n	833aa <vPortExitCritical+0x12>
   833a4:	4b08      	ldr	r3, [pc, #32]	; (833c8 <vPortExitCritical+0x30>)
   833a6:	4798      	blx	r3
   833a8:	e7fe      	b.n	833a8 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   833aa:	4b06      	ldr	r3, [pc, #24]	; (833c4 <vPortExitCritical+0x2c>)
   833ac:	681b      	ldr	r3, [r3, #0]
   833ae:	1e5a      	subs	r2, r3, #1
   833b0:	4b04      	ldr	r3, [pc, #16]	; (833c4 <vPortExitCritical+0x2c>)
   833b2:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   833b4:	4b03      	ldr	r3, [pc, #12]	; (833c4 <vPortExitCritical+0x2c>)
   833b6:	681b      	ldr	r3, [r3, #0]
   833b8:	2b00      	cmp	r3, #0
   833ba:	d102      	bne.n	833c2 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   833bc:	2000      	movs	r0, #0
   833be:	4b03      	ldr	r3, [pc, #12]	; (833cc <vPortExitCritical+0x34>)
   833c0:	4798      	blx	r3
	}
}
   833c2:	bd80      	pop	{r7, pc}
   833c4:	20070004 	.word	0x20070004
   833c8:	000833d1 	.word	0x000833d1
   833cc:	000833e5 	.word	0x000833e5

000833d0 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   833d0:	f3ef 8011 	mrs	r0, BASEPRI
   833d4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   833d8:	f381 8811 	msr	BASEPRI, r1
   833dc:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   833de:	2300      	movs	r3, #0
}
   833e0:	4618      	mov	r0, r3
   833e2:	bf00      	nop

000833e4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   833e4:	f380 8811 	msr	BASEPRI, r0
   833e8:	4770      	bx	lr
   833ea:	bf00      	nop

000833ec <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   833ec:	f3ef 8009 	mrs	r0, PSP
   833f0:	f3bf 8f6f 	isb	sy
   833f4:	4b0d      	ldr	r3, [pc, #52]	; (8342c <pxCurrentTCBConst>)
   833f6:	681a      	ldr	r2, [r3, #0]
   833f8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   833fc:	6010      	str	r0, [r2, #0]
   833fe:	e92d 4008 	stmdb	sp!, {r3, lr}
   83402:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   83406:	f380 8811 	msr	BASEPRI, r0
   8340a:	f001 f98d 	bl	84728 <vTaskSwitchContext>
   8340e:	f04f 0000 	mov.w	r0, #0
   83412:	f380 8811 	msr	BASEPRI, r0
   83416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8341a:	6819      	ldr	r1, [r3, #0]
   8341c:	6808      	ldr	r0, [r1, #0]
   8341e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83422:	f380 8809 	msr	PSP, r0
   83426:	f3bf 8f6f 	isb	sy
   8342a:	4770      	bx	lr

0008342c <pxCurrentTCBConst>:
   8342c:	2007a508 	.word	0x2007a508

00083430 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   83430:	b580      	push	{r7, lr}
   83432:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   83434:	4b07      	ldr	r3, [pc, #28]	; (83454 <SysTick_Handler+0x24>)
   83436:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   83438:	4b07      	ldr	r3, [pc, #28]	; (83458 <SysTick_Handler+0x28>)
   8343a:	4798      	blx	r3
   8343c:	4603      	mov	r3, r0
   8343e:	2b00      	cmp	r3, #0
   83440:	d003      	beq.n	8344a <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   83442:	4b06      	ldr	r3, [pc, #24]	; (8345c <SysTick_Handler+0x2c>)
   83444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   83448:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8344a:	2000      	movs	r0, #0
   8344c:	4b04      	ldr	r3, [pc, #16]	; (83460 <SysTick_Handler+0x30>)
   8344e:	4798      	blx	r3
}
   83450:	bd80      	pop	{r7, pc}
   83452:	bf00      	nop
   83454:	000833d1 	.word	0x000833d1
   83458:	000845ad 	.word	0x000845ad
   8345c:	e000ed04 	.word	0xe000ed04
   83460:	000833e5 	.word	0x000833e5

00083464 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   83464:	b480      	push	{r7}
   83466:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   83468:	4b07      	ldr	r3, [pc, #28]	; (83488 <vPortSetupTimerInterrupt+0x24>)
   8346a:	4a08      	ldr	r2, [pc, #32]	; (8348c <vPortSetupTimerInterrupt+0x28>)
   8346c:	6811      	ldr	r1, [r2, #0]
   8346e:	4a08      	ldr	r2, [pc, #32]	; (83490 <vPortSetupTimerInterrupt+0x2c>)
   83470:	fba2 0201 	umull	r0, r2, r2, r1
   83474:	0992      	lsrs	r2, r2, #6
   83476:	3a01      	subs	r2, #1
   83478:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   8347a:	4b06      	ldr	r3, [pc, #24]	; (83494 <vPortSetupTimerInterrupt+0x30>)
   8347c:	2207      	movs	r2, #7
   8347e:	601a      	str	r2, [r3, #0]
}
   83480:	46bd      	mov	sp, r7
   83482:	f85d 7b04 	ldr.w	r7, [sp], #4
   83486:	4770      	bx	lr
   83488:	e000e014 	.word	0xe000e014
   8348c:	20070000 	.word	0x20070000
   83490:	10624dd3 	.word	0x10624dd3
   83494:	e000e010 	.word	0xe000e010

00083498 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   83498:	b580      	push	{r7, lr}
   8349a:	b082      	sub	sp, #8
   8349c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   8349e:	f3ef 8305 	mrs	r3, IPSR
   834a2:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   834a4:	687b      	ldr	r3, [r7, #4]
   834a6:	2b0f      	cmp	r3, #15
   834a8:	d90c      	bls.n	834c4 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   834aa:	4a0d      	ldr	r2, [pc, #52]	; (834e0 <vPortValidateInterruptPriority+0x48>)
   834ac:	687b      	ldr	r3, [r7, #4]
   834ae:	4413      	add	r3, r2
   834b0:	781b      	ldrb	r3, [r3, #0]
   834b2:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   834b4:	4b0b      	ldr	r3, [pc, #44]	; (834e4 <vPortValidateInterruptPriority+0x4c>)
   834b6:	781b      	ldrb	r3, [r3, #0]
   834b8:	78fa      	ldrb	r2, [r7, #3]
   834ba:	429a      	cmp	r2, r3
   834bc:	d202      	bcs.n	834c4 <vPortValidateInterruptPriority+0x2c>
   834be:	4b0a      	ldr	r3, [pc, #40]	; (834e8 <vPortValidateInterruptPriority+0x50>)
   834c0:	4798      	blx	r3
   834c2:	e7fe      	b.n	834c2 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   834c4:	4b09      	ldr	r3, [pc, #36]	; (834ec <vPortValidateInterruptPriority+0x54>)
   834c6:	681b      	ldr	r3, [r3, #0]
   834c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   834cc:	4b08      	ldr	r3, [pc, #32]	; (834f0 <vPortValidateInterruptPriority+0x58>)
   834ce:	681b      	ldr	r3, [r3, #0]
   834d0:	429a      	cmp	r2, r3
   834d2:	d902      	bls.n	834da <vPortValidateInterruptPriority+0x42>
   834d4:	4b04      	ldr	r3, [pc, #16]	; (834e8 <vPortValidateInterruptPriority+0x50>)
   834d6:	4798      	blx	r3
   834d8:	e7fe      	b.n	834d8 <vPortValidateInterruptPriority+0x40>
	}
   834da:	3708      	adds	r7, #8
   834dc:	46bd      	mov	sp, r7
   834de:	bd80      	pop	{r7, pc}
   834e0:	e000e3f0 	.word	0xe000e3f0
   834e4:	200704e8 	.word	0x200704e8
   834e8:	000833d1 	.word	0x000833d1
   834ec:	e000ed0c 	.word	0xe000ed0c
   834f0:	200704ec 	.word	0x200704ec

000834f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   834f4:	b580      	push	{r7, lr}
   834f6:	b086      	sub	sp, #24
   834f8:	af00      	add	r7, sp, #0
   834fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   834fc:	2300      	movs	r3, #0
   834fe:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   83500:	4b4f      	ldr	r3, [pc, #316]	; (83640 <pvPortMalloc+0x14c>)
   83502:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   83504:	4b4f      	ldr	r3, [pc, #316]	; (83644 <pvPortMalloc+0x150>)
   83506:	681b      	ldr	r3, [r3, #0]
   83508:	2b00      	cmp	r3, #0
   8350a:	d101      	bne.n	83510 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   8350c:	4b4e      	ldr	r3, [pc, #312]	; (83648 <pvPortMalloc+0x154>)
   8350e:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   83510:	4b4e      	ldr	r3, [pc, #312]	; (8364c <pvPortMalloc+0x158>)
   83512:	681a      	ldr	r2, [r3, #0]
   83514:	687b      	ldr	r3, [r7, #4]
   83516:	4013      	ands	r3, r2
   83518:	2b00      	cmp	r3, #0
   8351a:	d17d      	bne.n	83618 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   8351c:	687b      	ldr	r3, [r7, #4]
   8351e:	2b00      	cmp	r3, #0
   83520:	d015      	beq.n	8354e <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   83522:	2308      	movs	r3, #8
   83524:	687a      	ldr	r2, [r7, #4]
   83526:	4413      	add	r3, r2
   83528:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   8352a:	687b      	ldr	r3, [r7, #4]
   8352c:	f003 0307 	and.w	r3, r3, #7
   83530:	2b00      	cmp	r3, #0
   83532:	d00c      	beq.n	8354e <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   83534:	687b      	ldr	r3, [r7, #4]
   83536:	f023 0307 	bic.w	r3, r3, #7
   8353a:	3308      	adds	r3, #8
   8353c:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   8353e:	687b      	ldr	r3, [r7, #4]
   83540:	f003 0307 	and.w	r3, r3, #7
   83544:	2b00      	cmp	r3, #0
   83546:	d002      	beq.n	8354e <pvPortMalloc+0x5a>
   83548:	4b41      	ldr	r3, [pc, #260]	; (83650 <pvPortMalloc+0x15c>)
   8354a:	4798      	blx	r3
   8354c:	e7fe      	b.n	8354c <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   8354e:	687b      	ldr	r3, [r7, #4]
   83550:	2b00      	cmp	r3, #0
   83552:	d061      	beq.n	83618 <pvPortMalloc+0x124>
   83554:	4b3f      	ldr	r3, [pc, #252]	; (83654 <pvPortMalloc+0x160>)
   83556:	681b      	ldr	r3, [r3, #0]
   83558:	687a      	ldr	r2, [r7, #4]
   8355a:	429a      	cmp	r2, r3
   8355c:	d85c      	bhi.n	83618 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   8355e:	4b3e      	ldr	r3, [pc, #248]	; (83658 <pvPortMalloc+0x164>)
   83560:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   83562:	4b3d      	ldr	r3, [pc, #244]	; (83658 <pvPortMalloc+0x164>)
   83564:	681b      	ldr	r3, [r3, #0]
   83566:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83568:	e004      	b.n	83574 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   8356a:	697b      	ldr	r3, [r7, #20]
   8356c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   8356e:	697b      	ldr	r3, [r7, #20]
   83570:	681b      	ldr	r3, [r3, #0]
   83572:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83574:	697b      	ldr	r3, [r7, #20]
   83576:	685a      	ldr	r2, [r3, #4]
   83578:	687b      	ldr	r3, [r7, #4]
   8357a:	429a      	cmp	r2, r3
   8357c:	d203      	bcs.n	83586 <pvPortMalloc+0x92>
   8357e:	697b      	ldr	r3, [r7, #20]
   83580:	681b      	ldr	r3, [r3, #0]
   83582:	2b00      	cmp	r3, #0
   83584:	d1f1      	bne.n	8356a <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   83586:	4b2f      	ldr	r3, [pc, #188]	; (83644 <pvPortMalloc+0x150>)
   83588:	681b      	ldr	r3, [r3, #0]
   8358a:	697a      	ldr	r2, [r7, #20]
   8358c:	429a      	cmp	r2, r3
   8358e:	d043      	beq.n	83618 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   83590:	693b      	ldr	r3, [r7, #16]
   83592:	681a      	ldr	r2, [r3, #0]
   83594:	2308      	movs	r3, #8
   83596:	4413      	add	r3, r2
   83598:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8359a:	697b      	ldr	r3, [r7, #20]
   8359c:	681a      	ldr	r2, [r3, #0]
   8359e:	693b      	ldr	r3, [r7, #16]
   835a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   835a2:	697b      	ldr	r3, [r7, #20]
   835a4:	685a      	ldr	r2, [r3, #4]
   835a6:	687b      	ldr	r3, [r7, #4]
   835a8:	1ad2      	subs	r2, r2, r3
   835aa:	2308      	movs	r3, #8
   835ac:	005b      	lsls	r3, r3, #1
   835ae:	429a      	cmp	r2, r3
   835b0:	d917      	bls.n	835e2 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   835b2:	697a      	ldr	r2, [r7, #20]
   835b4:	687b      	ldr	r3, [r7, #4]
   835b6:	4413      	add	r3, r2
   835b8:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   835ba:	68bb      	ldr	r3, [r7, #8]
   835bc:	f003 0307 	and.w	r3, r3, #7
   835c0:	2b00      	cmp	r3, #0
   835c2:	d002      	beq.n	835ca <pvPortMalloc+0xd6>
   835c4:	4b22      	ldr	r3, [pc, #136]	; (83650 <pvPortMalloc+0x15c>)
   835c6:	4798      	blx	r3
   835c8:	e7fe      	b.n	835c8 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   835ca:	697b      	ldr	r3, [r7, #20]
   835cc:	685a      	ldr	r2, [r3, #4]
   835ce:	687b      	ldr	r3, [r7, #4]
   835d0:	1ad2      	subs	r2, r2, r3
   835d2:	68bb      	ldr	r3, [r7, #8]
   835d4:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   835d6:	697b      	ldr	r3, [r7, #20]
   835d8:	687a      	ldr	r2, [r7, #4]
   835da:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   835dc:	68b8      	ldr	r0, [r7, #8]
   835de:	4b1f      	ldr	r3, [pc, #124]	; (8365c <pvPortMalloc+0x168>)
   835e0:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   835e2:	4b1c      	ldr	r3, [pc, #112]	; (83654 <pvPortMalloc+0x160>)
   835e4:	681a      	ldr	r2, [r3, #0]
   835e6:	697b      	ldr	r3, [r7, #20]
   835e8:	685b      	ldr	r3, [r3, #4]
   835ea:	1ad2      	subs	r2, r2, r3
   835ec:	4b19      	ldr	r3, [pc, #100]	; (83654 <pvPortMalloc+0x160>)
   835ee:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   835f0:	4b18      	ldr	r3, [pc, #96]	; (83654 <pvPortMalloc+0x160>)
   835f2:	681a      	ldr	r2, [r3, #0]
   835f4:	4b1a      	ldr	r3, [pc, #104]	; (83660 <pvPortMalloc+0x16c>)
   835f6:	681b      	ldr	r3, [r3, #0]
   835f8:	429a      	cmp	r2, r3
   835fa:	d203      	bcs.n	83604 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   835fc:	4b15      	ldr	r3, [pc, #84]	; (83654 <pvPortMalloc+0x160>)
   835fe:	681a      	ldr	r2, [r3, #0]
   83600:	4b17      	ldr	r3, [pc, #92]	; (83660 <pvPortMalloc+0x16c>)
   83602:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   83604:	697b      	ldr	r3, [r7, #20]
   83606:	685a      	ldr	r2, [r3, #4]
   83608:	4b10      	ldr	r3, [pc, #64]	; (8364c <pvPortMalloc+0x158>)
   8360a:	681b      	ldr	r3, [r3, #0]
   8360c:	431a      	orrs	r2, r3
   8360e:	697b      	ldr	r3, [r7, #20]
   83610:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   83612:	697b      	ldr	r3, [r7, #20]
   83614:	2200      	movs	r2, #0
   83616:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   83618:	4b12      	ldr	r3, [pc, #72]	; (83664 <pvPortMalloc+0x170>)
   8361a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   8361c:	68fb      	ldr	r3, [r7, #12]
   8361e:	2b00      	cmp	r3, #0
   83620:	d101      	bne.n	83626 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   83622:	4b11      	ldr	r3, [pc, #68]	; (83668 <pvPortMalloc+0x174>)
   83624:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   83626:	68fb      	ldr	r3, [r7, #12]
   83628:	f003 0307 	and.w	r3, r3, #7
   8362c:	2b00      	cmp	r3, #0
   8362e:	d002      	beq.n	83636 <pvPortMalloc+0x142>
   83630:	4b07      	ldr	r3, [pc, #28]	; (83650 <pvPortMalloc+0x15c>)
   83632:	4798      	blx	r3
   83634:	e7fe      	b.n	83634 <pvPortMalloc+0x140>
	return pvReturn;
   83636:	68fb      	ldr	r3, [r7, #12]
}
   83638:	4618      	mov	r0, r3
   8363a:	3718      	adds	r7, #24
   8363c:	46bd      	mov	sp, r7
   8363e:	bd80      	pop	{r7, pc}
   83640:	00084441 	.word	0x00084441
   83644:	2007a4f8 	.word	0x2007a4f8
   83648:	00083711 	.word	0x00083711
   8364c:	2007a504 	.word	0x2007a504
   83650:	000833d1 	.word	0x000833d1
   83654:	2007a4fc 	.word	0x2007a4fc
   83658:	2007a4f0 	.word	0x2007a4f0
   8365c:	000837d5 	.word	0x000837d5
   83660:	2007a500 	.word	0x2007a500
   83664:	0008445d 	.word	0x0008445d
   83668:	00086459 	.word	0x00086459

0008366c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   8366c:	b580      	push	{r7, lr}
   8366e:	b084      	sub	sp, #16
   83670:	af00      	add	r7, sp, #0
   83672:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   83674:	687b      	ldr	r3, [r7, #4]
   83676:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   83678:	687b      	ldr	r3, [r7, #4]
   8367a:	2b00      	cmp	r3, #0
   8367c:	d038      	beq.n	836f0 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   8367e:	2308      	movs	r3, #8
   83680:	425b      	negs	r3, r3
   83682:	68fa      	ldr	r2, [r7, #12]
   83684:	4413      	add	r3, r2
   83686:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   83688:	68fb      	ldr	r3, [r7, #12]
   8368a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   8368c:	68bb      	ldr	r3, [r7, #8]
   8368e:	685a      	ldr	r2, [r3, #4]
   83690:	4b19      	ldr	r3, [pc, #100]	; (836f8 <vPortFree+0x8c>)
   83692:	681b      	ldr	r3, [r3, #0]
   83694:	4013      	ands	r3, r2
   83696:	2b00      	cmp	r3, #0
   83698:	d102      	bne.n	836a0 <vPortFree+0x34>
   8369a:	4b18      	ldr	r3, [pc, #96]	; (836fc <vPortFree+0x90>)
   8369c:	4798      	blx	r3
   8369e:	e7fe      	b.n	8369e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   836a0:	68bb      	ldr	r3, [r7, #8]
   836a2:	681b      	ldr	r3, [r3, #0]
   836a4:	2b00      	cmp	r3, #0
   836a6:	d002      	beq.n	836ae <vPortFree+0x42>
   836a8:	4b14      	ldr	r3, [pc, #80]	; (836fc <vPortFree+0x90>)
   836aa:	4798      	blx	r3
   836ac:	e7fe      	b.n	836ac <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   836ae:	68bb      	ldr	r3, [r7, #8]
   836b0:	685a      	ldr	r2, [r3, #4]
   836b2:	4b11      	ldr	r3, [pc, #68]	; (836f8 <vPortFree+0x8c>)
   836b4:	681b      	ldr	r3, [r3, #0]
   836b6:	4013      	ands	r3, r2
   836b8:	2b00      	cmp	r3, #0
   836ba:	d019      	beq.n	836f0 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   836bc:	68bb      	ldr	r3, [r7, #8]
   836be:	681b      	ldr	r3, [r3, #0]
   836c0:	2b00      	cmp	r3, #0
   836c2:	d115      	bne.n	836f0 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   836c4:	68bb      	ldr	r3, [r7, #8]
   836c6:	685a      	ldr	r2, [r3, #4]
   836c8:	4b0b      	ldr	r3, [pc, #44]	; (836f8 <vPortFree+0x8c>)
   836ca:	681b      	ldr	r3, [r3, #0]
   836cc:	43db      	mvns	r3, r3
   836ce:	401a      	ands	r2, r3
   836d0:	68bb      	ldr	r3, [r7, #8]
   836d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   836d4:	4b0a      	ldr	r3, [pc, #40]	; (83700 <vPortFree+0x94>)
   836d6:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   836d8:	68bb      	ldr	r3, [r7, #8]
   836da:	685a      	ldr	r2, [r3, #4]
   836dc:	4b09      	ldr	r3, [pc, #36]	; (83704 <vPortFree+0x98>)
   836de:	681b      	ldr	r3, [r3, #0]
   836e0:	441a      	add	r2, r3
   836e2:	4b08      	ldr	r3, [pc, #32]	; (83704 <vPortFree+0x98>)
   836e4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   836e6:	68b8      	ldr	r0, [r7, #8]
   836e8:	4b07      	ldr	r3, [pc, #28]	; (83708 <vPortFree+0x9c>)
   836ea:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   836ec:	4b07      	ldr	r3, [pc, #28]	; (8370c <vPortFree+0xa0>)
   836ee:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   836f0:	3710      	adds	r7, #16
   836f2:	46bd      	mov	sp, r7
   836f4:	bd80      	pop	{r7, pc}
   836f6:	bf00      	nop
   836f8:	2007a504 	.word	0x2007a504
   836fc:	000833d1 	.word	0x000833d1
   83700:	00084441 	.word	0x00084441
   83704:	2007a4fc 	.word	0x2007a4fc
   83708:	000837d5 	.word	0x000837d5
   8370c:	0008445d 	.word	0x0008445d

00083710 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   83710:	b480      	push	{r7}
   83712:	b085      	sub	sp, #20
   83714:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   83716:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   8371a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   8371c:	4b27      	ldr	r3, [pc, #156]	; (837bc <prvHeapInit+0xac>)
   8371e:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   83720:	68fb      	ldr	r3, [r7, #12]
   83722:	f003 0307 	and.w	r3, r3, #7
   83726:	2b00      	cmp	r3, #0
   83728:	d00c      	beq.n	83744 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   8372a:	68fb      	ldr	r3, [r7, #12]
   8372c:	3307      	adds	r3, #7
   8372e:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83730:	68fb      	ldr	r3, [r7, #12]
   83732:	f023 0307 	bic.w	r3, r3, #7
   83736:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   83738:	68ba      	ldr	r2, [r7, #8]
   8373a:	68fb      	ldr	r3, [r7, #12]
   8373c:	1ad2      	subs	r2, r2, r3
   8373e:	4b1f      	ldr	r3, [pc, #124]	; (837bc <prvHeapInit+0xac>)
   83740:	4413      	add	r3, r2
   83742:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   83744:	68fb      	ldr	r3, [r7, #12]
   83746:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   83748:	4b1d      	ldr	r3, [pc, #116]	; (837c0 <prvHeapInit+0xb0>)
   8374a:	687a      	ldr	r2, [r7, #4]
   8374c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8374e:	4b1c      	ldr	r3, [pc, #112]	; (837c0 <prvHeapInit+0xb0>)
   83750:	2200      	movs	r2, #0
   83752:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   83754:	687a      	ldr	r2, [r7, #4]
   83756:	68bb      	ldr	r3, [r7, #8]
   83758:	4413      	add	r3, r2
   8375a:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   8375c:	2308      	movs	r3, #8
   8375e:	68fa      	ldr	r2, [r7, #12]
   83760:	1ad3      	subs	r3, r2, r3
   83762:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83764:	68fb      	ldr	r3, [r7, #12]
   83766:	f023 0307 	bic.w	r3, r3, #7
   8376a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   8376c:	68fa      	ldr	r2, [r7, #12]
   8376e:	4b15      	ldr	r3, [pc, #84]	; (837c4 <prvHeapInit+0xb4>)
   83770:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   83772:	4b14      	ldr	r3, [pc, #80]	; (837c4 <prvHeapInit+0xb4>)
   83774:	681b      	ldr	r3, [r3, #0]
   83776:	2200      	movs	r2, #0
   83778:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8377a:	4b12      	ldr	r3, [pc, #72]	; (837c4 <prvHeapInit+0xb4>)
   8377c:	681b      	ldr	r3, [r3, #0]
   8377e:	2200      	movs	r2, #0
   83780:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   83782:	687b      	ldr	r3, [r7, #4]
   83784:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   83786:	683b      	ldr	r3, [r7, #0]
   83788:	68fa      	ldr	r2, [r7, #12]
   8378a:	1ad2      	subs	r2, r2, r3
   8378c:	683b      	ldr	r3, [r7, #0]
   8378e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83790:	4b0c      	ldr	r3, [pc, #48]	; (837c4 <prvHeapInit+0xb4>)
   83792:	681a      	ldr	r2, [r3, #0]
   83794:	683b      	ldr	r3, [r7, #0]
   83796:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83798:	683b      	ldr	r3, [r7, #0]
   8379a:	685a      	ldr	r2, [r3, #4]
   8379c:	4b0a      	ldr	r3, [pc, #40]	; (837c8 <prvHeapInit+0xb8>)
   8379e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   837a0:	683b      	ldr	r3, [r7, #0]
   837a2:	685a      	ldr	r2, [r3, #4]
   837a4:	4b09      	ldr	r3, [pc, #36]	; (837cc <prvHeapInit+0xbc>)
   837a6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   837a8:	4b09      	ldr	r3, [pc, #36]	; (837d0 <prvHeapInit+0xc0>)
   837aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   837ae:	601a      	str	r2, [r3, #0]
}
   837b0:	3714      	adds	r7, #20
   837b2:	46bd      	mov	sp, r7
   837b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   837b8:	4770      	bx	lr
   837ba:	bf00      	nop
   837bc:	200704f0 	.word	0x200704f0
   837c0:	2007a4f0 	.word	0x2007a4f0
   837c4:	2007a4f8 	.word	0x2007a4f8
   837c8:	2007a500 	.word	0x2007a500
   837cc:	2007a4fc 	.word	0x2007a4fc
   837d0:	2007a504 	.word	0x2007a504

000837d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   837d4:	b480      	push	{r7}
   837d6:	b085      	sub	sp, #20
   837d8:	af00      	add	r7, sp, #0
   837da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   837dc:	4b27      	ldr	r3, [pc, #156]	; (8387c <prvInsertBlockIntoFreeList+0xa8>)
   837de:	60fb      	str	r3, [r7, #12]
   837e0:	e002      	b.n	837e8 <prvInsertBlockIntoFreeList+0x14>
   837e2:	68fb      	ldr	r3, [r7, #12]
   837e4:	681b      	ldr	r3, [r3, #0]
   837e6:	60fb      	str	r3, [r7, #12]
   837e8:	68fb      	ldr	r3, [r7, #12]
   837ea:	681a      	ldr	r2, [r3, #0]
   837ec:	687b      	ldr	r3, [r7, #4]
   837ee:	429a      	cmp	r2, r3
   837f0:	d3f7      	bcc.n	837e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   837f2:	68fb      	ldr	r3, [r7, #12]
   837f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   837f6:	68fb      	ldr	r3, [r7, #12]
   837f8:	685b      	ldr	r3, [r3, #4]
   837fa:	68ba      	ldr	r2, [r7, #8]
   837fc:	441a      	add	r2, r3
   837fe:	687b      	ldr	r3, [r7, #4]
   83800:	429a      	cmp	r2, r3
   83802:	d108      	bne.n	83816 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   83804:	68fb      	ldr	r3, [r7, #12]
   83806:	685a      	ldr	r2, [r3, #4]
   83808:	687b      	ldr	r3, [r7, #4]
   8380a:	685b      	ldr	r3, [r3, #4]
   8380c:	441a      	add	r2, r3
   8380e:	68fb      	ldr	r3, [r7, #12]
   83810:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   83812:	68fb      	ldr	r3, [r7, #12]
   83814:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   83816:	687b      	ldr	r3, [r7, #4]
   83818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   8381a:	687b      	ldr	r3, [r7, #4]
   8381c:	685b      	ldr	r3, [r3, #4]
   8381e:	68ba      	ldr	r2, [r7, #8]
   83820:	441a      	add	r2, r3
   83822:	68fb      	ldr	r3, [r7, #12]
   83824:	681b      	ldr	r3, [r3, #0]
   83826:	429a      	cmp	r2, r3
   83828:	d118      	bne.n	8385c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8382a:	68fb      	ldr	r3, [r7, #12]
   8382c:	681a      	ldr	r2, [r3, #0]
   8382e:	4b14      	ldr	r3, [pc, #80]	; (83880 <prvInsertBlockIntoFreeList+0xac>)
   83830:	681b      	ldr	r3, [r3, #0]
   83832:	429a      	cmp	r2, r3
   83834:	d00d      	beq.n	83852 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   83836:	687b      	ldr	r3, [r7, #4]
   83838:	685a      	ldr	r2, [r3, #4]
   8383a:	68fb      	ldr	r3, [r7, #12]
   8383c:	681b      	ldr	r3, [r3, #0]
   8383e:	685b      	ldr	r3, [r3, #4]
   83840:	441a      	add	r2, r3
   83842:	687b      	ldr	r3, [r7, #4]
   83844:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   83846:	68fb      	ldr	r3, [r7, #12]
   83848:	681b      	ldr	r3, [r3, #0]
   8384a:	681a      	ldr	r2, [r3, #0]
   8384c:	687b      	ldr	r3, [r7, #4]
   8384e:	601a      	str	r2, [r3, #0]
   83850:	e008      	b.n	83864 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   83852:	4b0b      	ldr	r3, [pc, #44]	; (83880 <prvInsertBlockIntoFreeList+0xac>)
   83854:	681a      	ldr	r2, [r3, #0]
   83856:	687b      	ldr	r3, [r7, #4]
   83858:	601a      	str	r2, [r3, #0]
   8385a:	e003      	b.n	83864 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   8385c:	68fb      	ldr	r3, [r7, #12]
   8385e:	681a      	ldr	r2, [r3, #0]
   83860:	687b      	ldr	r3, [r7, #4]
   83862:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   83864:	68fa      	ldr	r2, [r7, #12]
   83866:	687b      	ldr	r3, [r7, #4]
   83868:	429a      	cmp	r2, r3
   8386a:	d002      	beq.n	83872 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8386c:	68fb      	ldr	r3, [r7, #12]
   8386e:	687a      	ldr	r2, [r7, #4]
   83870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   83872:	3714      	adds	r7, #20
   83874:	46bd      	mov	sp, r7
   83876:	f85d 7b04 	ldr.w	r7, [sp], #4
   8387a:	4770      	bx	lr
   8387c:	2007a4f0 	.word	0x2007a4f0
   83880:	2007a4f8 	.word	0x2007a4f8

00083884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   83884:	b580      	push	{r7, lr}
   83886:	b084      	sub	sp, #16
   83888:	af00      	add	r7, sp, #0
   8388a:	6078      	str	r0, [r7, #4]
   8388c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8388e:	687b      	ldr	r3, [r7, #4]
   83890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   83892:	68fb      	ldr	r3, [r7, #12]
   83894:	2b00      	cmp	r3, #0
   83896:	d102      	bne.n	8389e <xQueueGenericReset+0x1a>
   83898:	4b26      	ldr	r3, [pc, #152]	; (83934 <xQueueGenericReset+0xb0>)
   8389a:	4798      	blx	r3
   8389c:	e7fe      	b.n	8389c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8389e:	4b26      	ldr	r3, [pc, #152]	; (83938 <xQueueGenericReset+0xb4>)
   838a0:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   838a2:	68fb      	ldr	r3, [r7, #12]
   838a4:	681a      	ldr	r2, [r3, #0]
   838a6:	68fb      	ldr	r3, [r7, #12]
   838a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   838aa:	68f9      	ldr	r1, [r7, #12]
   838ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
   838ae:	fb01 f303 	mul.w	r3, r1, r3
   838b2:	441a      	add	r2, r3
   838b4:	68fb      	ldr	r3, [r7, #12]
   838b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   838b8:	68fb      	ldr	r3, [r7, #12]
   838ba:	2200      	movs	r2, #0
   838bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   838be:	68fb      	ldr	r3, [r7, #12]
   838c0:	681a      	ldr	r2, [r3, #0]
   838c2:	68fb      	ldr	r3, [r7, #12]
   838c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   838c6:	68fb      	ldr	r3, [r7, #12]
   838c8:	681a      	ldr	r2, [r3, #0]
   838ca:	68fb      	ldr	r3, [r7, #12]
   838cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   838ce:	3b01      	subs	r3, #1
   838d0:	68f9      	ldr	r1, [r7, #12]
   838d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
   838d4:	fb01 f303 	mul.w	r3, r1, r3
   838d8:	441a      	add	r2, r3
   838da:	68fb      	ldr	r3, [r7, #12]
   838dc:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   838de:	68fb      	ldr	r3, [r7, #12]
   838e0:	f04f 32ff 	mov.w	r2, #4294967295
   838e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   838e6:	68fb      	ldr	r3, [r7, #12]
   838e8:	f04f 32ff 	mov.w	r2, #4294967295
   838ec:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   838ee:	683b      	ldr	r3, [r7, #0]
   838f0:	2b00      	cmp	r3, #0
   838f2:	d10e      	bne.n	83912 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   838f4:	68fb      	ldr	r3, [r7, #12]
   838f6:	691b      	ldr	r3, [r3, #16]
   838f8:	2b00      	cmp	r3, #0
   838fa:	d014      	beq.n	83926 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   838fc:	68fb      	ldr	r3, [r7, #12]
   838fe:	3310      	adds	r3, #16
   83900:	4618      	mov	r0, r3
   83902:	4b0e      	ldr	r3, [pc, #56]	; (8393c <xQueueGenericReset+0xb8>)
   83904:	4798      	blx	r3
   83906:	4603      	mov	r3, r0
   83908:	2b01      	cmp	r3, #1
   8390a:	d10c      	bne.n	83926 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   8390c:	4b0c      	ldr	r3, [pc, #48]	; (83940 <xQueueGenericReset+0xbc>)
   8390e:	4798      	blx	r3
   83910:	e009      	b.n	83926 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   83912:	68fb      	ldr	r3, [r7, #12]
   83914:	3310      	adds	r3, #16
   83916:	4618      	mov	r0, r3
   83918:	4b0a      	ldr	r3, [pc, #40]	; (83944 <xQueueGenericReset+0xc0>)
   8391a:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8391c:	68fb      	ldr	r3, [r7, #12]
   8391e:	3324      	adds	r3, #36	; 0x24
   83920:	4618      	mov	r0, r3
   83922:	4b08      	ldr	r3, [pc, #32]	; (83944 <xQueueGenericReset+0xc0>)
   83924:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   83926:	4b08      	ldr	r3, [pc, #32]	; (83948 <xQueueGenericReset+0xc4>)
   83928:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   8392a:	2301      	movs	r3, #1
}
   8392c:	4618      	mov	r0, r3
   8392e:	3710      	adds	r7, #16
   83930:	46bd      	mov	sp, r7
   83932:	bd80      	pop	{r7, pc}
   83934:	000833d1 	.word	0x000833d1
   83938:	00083355 	.word	0x00083355
   8393c:	00084945 	.word	0x00084945
   83940:	00083335 	.word	0x00083335
   83944:	00083049 	.word	0x00083049
   83948:	00083399 	.word	0x00083399

0008394c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   8394c:	b580      	push	{r7, lr}
   8394e:	b088      	sub	sp, #32
   83950:	af00      	add	r7, sp, #0
   83952:	60f8      	str	r0, [r7, #12]
   83954:	60b9      	str	r1, [r7, #8]
   83956:	4613      	mov	r3, r2
   83958:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   8395a:	2300      	movs	r3, #0
   8395c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   8395e:	68fb      	ldr	r3, [r7, #12]
   83960:	2b00      	cmp	r3, #0
   83962:	d026      	beq.n	839b2 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   83964:	204c      	movs	r0, #76	; 0x4c
   83966:	4b18      	ldr	r3, [pc, #96]	; (839c8 <xQueueGenericCreate+0x7c>)
   83968:	4798      	blx	r3
   8396a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   8396c:	69bb      	ldr	r3, [r7, #24]
   8396e:	2b00      	cmp	r3, #0
   83970:	d01f      	beq.n	839b2 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83972:	68fb      	ldr	r3, [r7, #12]
   83974:	68ba      	ldr	r2, [r7, #8]
   83976:	fb02 f303 	mul.w	r3, r2, r3
   8397a:	3301      	adds	r3, #1
   8397c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   8397e:	6978      	ldr	r0, [r7, #20]
   83980:	4b11      	ldr	r3, [pc, #68]	; (839c8 <xQueueGenericCreate+0x7c>)
   83982:	4798      	blx	r3
   83984:	4602      	mov	r2, r0
   83986:	69bb      	ldr	r3, [r7, #24]
   83988:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   8398a:	69bb      	ldr	r3, [r7, #24]
   8398c:	681b      	ldr	r3, [r3, #0]
   8398e:	2b00      	cmp	r3, #0
   83990:	d00c      	beq.n	839ac <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   83992:	69bb      	ldr	r3, [r7, #24]
   83994:	68fa      	ldr	r2, [r7, #12]
   83996:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   83998:	69bb      	ldr	r3, [r7, #24]
   8399a:	68ba      	ldr	r2, [r7, #8]
   8399c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8399e:	69b8      	ldr	r0, [r7, #24]
   839a0:	2101      	movs	r1, #1
   839a2:	4b0a      	ldr	r3, [pc, #40]	; (839cc <xQueueGenericCreate+0x80>)
   839a4:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   839a6:	69bb      	ldr	r3, [r7, #24]
   839a8:	61fb      	str	r3, [r7, #28]
   839aa:	e002      	b.n	839b2 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   839ac:	69b8      	ldr	r0, [r7, #24]
   839ae:	4b08      	ldr	r3, [pc, #32]	; (839d0 <xQueueGenericCreate+0x84>)
   839b0:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   839b2:	69fb      	ldr	r3, [r7, #28]
   839b4:	2b00      	cmp	r3, #0
   839b6:	d102      	bne.n	839be <xQueueGenericCreate+0x72>
   839b8:	4b06      	ldr	r3, [pc, #24]	; (839d4 <xQueueGenericCreate+0x88>)
   839ba:	4798      	blx	r3
   839bc:	e7fe      	b.n	839bc <xQueueGenericCreate+0x70>

	return xReturn;
   839be:	69fb      	ldr	r3, [r7, #28]
}
   839c0:	4618      	mov	r0, r3
   839c2:	3720      	adds	r7, #32
   839c4:	46bd      	mov	sp, r7
   839c6:	bd80      	pop	{r7, pc}
   839c8:	000834f5 	.word	0x000834f5
   839cc:	00083885 	.word	0x00083885
   839d0:	0008366d 	.word	0x0008366d
   839d4:	000833d1 	.word	0x000833d1

000839d8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   839d8:	b580      	push	{r7, lr}
   839da:	b08a      	sub	sp, #40	; 0x28
   839dc:	af00      	add	r7, sp, #0
   839de:	60f8      	str	r0, [r7, #12]
   839e0:	60b9      	str	r1, [r7, #8]
   839e2:	607a      	str	r2, [r7, #4]
   839e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   839e6:	2300      	movs	r3, #0
   839e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   839ea:	68fb      	ldr	r3, [r7, #12]
   839ec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   839ee:	6a3b      	ldr	r3, [r7, #32]
   839f0:	2b00      	cmp	r3, #0
   839f2:	d102      	bne.n	839fa <xQueueGenericSend+0x22>
   839f4:	4b5b      	ldr	r3, [pc, #364]	; (83b64 <xQueueGenericSend+0x18c>)
   839f6:	4798      	blx	r3
   839f8:	e7fe      	b.n	839f8 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   839fa:	68bb      	ldr	r3, [r7, #8]
   839fc:	2b00      	cmp	r3, #0
   839fe:	d103      	bne.n	83a08 <xQueueGenericSend+0x30>
   83a00:	6a3b      	ldr	r3, [r7, #32]
   83a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a04:	2b00      	cmp	r3, #0
   83a06:	d101      	bne.n	83a0c <xQueueGenericSend+0x34>
   83a08:	2301      	movs	r3, #1
   83a0a:	e000      	b.n	83a0e <xQueueGenericSend+0x36>
   83a0c:	2300      	movs	r3, #0
   83a0e:	2b00      	cmp	r3, #0
   83a10:	d102      	bne.n	83a18 <xQueueGenericSend+0x40>
   83a12:	4b54      	ldr	r3, [pc, #336]	; (83b64 <xQueueGenericSend+0x18c>)
   83a14:	4798      	blx	r3
   83a16:	e7fe      	b.n	83a16 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83a18:	683b      	ldr	r3, [r7, #0]
   83a1a:	2b02      	cmp	r3, #2
   83a1c:	d103      	bne.n	83a26 <xQueueGenericSend+0x4e>
   83a1e:	6a3b      	ldr	r3, [r7, #32]
   83a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83a22:	2b01      	cmp	r3, #1
   83a24:	d101      	bne.n	83a2a <xQueueGenericSend+0x52>
   83a26:	2301      	movs	r3, #1
   83a28:	e000      	b.n	83a2c <xQueueGenericSend+0x54>
   83a2a:	2300      	movs	r3, #0
   83a2c:	2b00      	cmp	r3, #0
   83a2e:	d102      	bne.n	83a36 <xQueueGenericSend+0x5e>
   83a30:	4b4c      	ldr	r3, [pc, #304]	; (83b64 <xQueueGenericSend+0x18c>)
   83a32:	4798      	blx	r3
   83a34:	e7fe      	b.n	83a34 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83a36:	4b4c      	ldr	r3, [pc, #304]	; (83b68 <xQueueGenericSend+0x190>)
   83a38:	4798      	blx	r3
   83a3a:	4603      	mov	r3, r0
   83a3c:	2b00      	cmp	r3, #0
   83a3e:	d102      	bne.n	83a46 <xQueueGenericSend+0x6e>
   83a40:	687b      	ldr	r3, [r7, #4]
   83a42:	2b00      	cmp	r3, #0
   83a44:	d101      	bne.n	83a4a <xQueueGenericSend+0x72>
   83a46:	2301      	movs	r3, #1
   83a48:	e000      	b.n	83a4c <xQueueGenericSend+0x74>
   83a4a:	2300      	movs	r3, #0
   83a4c:	2b00      	cmp	r3, #0
   83a4e:	d102      	bne.n	83a56 <xQueueGenericSend+0x7e>
   83a50:	4b44      	ldr	r3, [pc, #272]	; (83b64 <xQueueGenericSend+0x18c>)
   83a52:	4798      	blx	r3
   83a54:	e7fe      	b.n	83a54 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   83a56:	4b45      	ldr	r3, [pc, #276]	; (83b6c <xQueueGenericSend+0x194>)
   83a58:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83a5a:	6a3b      	ldr	r3, [r7, #32]
   83a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83a5e:	6a3b      	ldr	r3, [r7, #32]
   83a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83a62:	429a      	cmp	r2, r3
   83a64:	d302      	bcc.n	83a6c <xQueueGenericSend+0x94>
   83a66:	683b      	ldr	r3, [r7, #0]
   83a68:	2b02      	cmp	r3, #2
   83a6a:	d11d      	bne.n	83aa8 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   83a6c:	6a38      	ldr	r0, [r7, #32]
   83a6e:	68b9      	ldr	r1, [r7, #8]
   83a70:	683a      	ldr	r2, [r7, #0]
   83a72:	4b3f      	ldr	r3, [pc, #252]	; (83b70 <xQueueGenericSend+0x198>)
   83a74:	4798      	blx	r3
   83a76:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83a78:	6a3b      	ldr	r3, [r7, #32]
   83a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83a7c:	2b00      	cmp	r3, #0
   83a7e:	d00a      	beq.n	83a96 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   83a80:	6a3b      	ldr	r3, [r7, #32]
   83a82:	3324      	adds	r3, #36	; 0x24
   83a84:	4618      	mov	r0, r3
   83a86:	4b3b      	ldr	r3, [pc, #236]	; (83b74 <xQueueGenericSend+0x19c>)
   83a88:	4798      	blx	r3
   83a8a:	4603      	mov	r3, r0
   83a8c:	2b01      	cmp	r3, #1
   83a8e:	d107      	bne.n	83aa0 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   83a90:	4b39      	ldr	r3, [pc, #228]	; (83b78 <xQueueGenericSend+0x1a0>)
   83a92:	4798      	blx	r3
   83a94:	e004      	b.n	83aa0 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   83a96:	69fb      	ldr	r3, [r7, #28]
   83a98:	2b00      	cmp	r3, #0
   83a9a:	d001      	beq.n	83aa0 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83a9c:	4b36      	ldr	r3, [pc, #216]	; (83b78 <xQueueGenericSend+0x1a0>)
   83a9e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   83aa0:	4b36      	ldr	r3, [pc, #216]	; (83b7c <xQueueGenericSend+0x1a4>)
   83aa2:	4798      	blx	r3
				return pdPASS;
   83aa4:	2301      	movs	r3, #1
   83aa6:	e059      	b.n	83b5c <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83aa8:	687b      	ldr	r3, [r7, #4]
   83aaa:	2b00      	cmp	r3, #0
   83aac:	d103      	bne.n	83ab6 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83aae:	4b33      	ldr	r3, [pc, #204]	; (83b7c <xQueueGenericSend+0x1a4>)
   83ab0:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   83ab2:	2300      	movs	r3, #0
   83ab4:	e052      	b.n	83b5c <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   83ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83ab8:	2b00      	cmp	r3, #0
   83aba:	d106      	bne.n	83aca <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83abc:	f107 0314 	add.w	r3, r7, #20
   83ac0:	4618      	mov	r0, r3
   83ac2:	4b2f      	ldr	r3, [pc, #188]	; (83b80 <xQueueGenericSend+0x1a8>)
   83ac4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83ac6:	2301      	movs	r3, #1
   83ac8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83aca:	4b2c      	ldr	r3, [pc, #176]	; (83b7c <xQueueGenericSend+0x1a4>)
   83acc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83ace:	4b2d      	ldr	r3, [pc, #180]	; (83b84 <xQueueGenericSend+0x1ac>)
   83ad0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83ad2:	4b26      	ldr	r3, [pc, #152]	; (83b6c <xQueueGenericSend+0x194>)
   83ad4:	4798      	blx	r3
   83ad6:	6a3b      	ldr	r3, [r7, #32]
   83ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83ada:	f1b3 3fff 	cmp.w	r3, #4294967295
   83ade:	d102      	bne.n	83ae6 <xQueueGenericSend+0x10e>
   83ae0:	6a3b      	ldr	r3, [r7, #32]
   83ae2:	2200      	movs	r2, #0
   83ae4:	645a      	str	r2, [r3, #68]	; 0x44
   83ae6:	6a3b      	ldr	r3, [r7, #32]
   83ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83aea:	f1b3 3fff 	cmp.w	r3, #4294967295
   83aee:	d102      	bne.n	83af6 <xQueueGenericSend+0x11e>
   83af0:	6a3b      	ldr	r3, [r7, #32]
   83af2:	2200      	movs	r2, #0
   83af4:	649a      	str	r2, [r3, #72]	; 0x48
   83af6:	4b21      	ldr	r3, [pc, #132]	; (83b7c <xQueueGenericSend+0x1a4>)
   83af8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83afa:	f107 0214 	add.w	r2, r7, #20
   83afe:	1d3b      	adds	r3, r7, #4
   83b00:	4610      	mov	r0, r2
   83b02:	4619      	mov	r1, r3
   83b04:	4b20      	ldr	r3, [pc, #128]	; (83b88 <xQueueGenericSend+0x1b0>)
   83b06:	4798      	blx	r3
   83b08:	4603      	mov	r3, r0
   83b0a:	2b00      	cmp	r3, #0
   83b0c:	d11e      	bne.n	83b4c <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   83b0e:	6a38      	ldr	r0, [r7, #32]
   83b10:	4b1e      	ldr	r3, [pc, #120]	; (83b8c <xQueueGenericSend+0x1b4>)
   83b12:	4798      	blx	r3
   83b14:	4603      	mov	r3, r0
   83b16:	2b00      	cmp	r3, #0
   83b18:	d012      	beq.n	83b40 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   83b1a:	6a3b      	ldr	r3, [r7, #32]
   83b1c:	f103 0210 	add.w	r2, r3, #16
   83b20:	687b      	ldr	r3, [r7, #4]
   83b22:	4610      	mov	r0, r2
   83b24:	4619      	mov	r1, r3
   83b26:	4b1a      	ldr	r3, [pc, #104]	; (83b90 <xQueueGenericSend+0x1b8>)
   83b28:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   83b2a:	6a38      	ldr	r0, [r7, #32]
   83b2c:	4b19      	ldr	r3, [pc, #100]	; (83b94 <xQueueGenericSend+0x1bc>)
   83b2e:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   83b30:	4b19      	ldr	r3, [pc, #100]	; (83b98 <xQueueGenericSend+0x1c0>)
   83b32:	4798      	blx	r3
   83b34:	4603      	mov	r3, r0
   83b36:	2b00      	cmp	r3, #0
   83b38:	d10f      	bne.n	83b5a <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   83b3a:	4b0f      	ldr	r3, [pc, #60]	; (83b78 <xQueueGenericSend+0x1a0>)
   83b3c:	4798      	blx	r3
   83b3e:	e00c      	b.n	83b5a <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83b40:	6a38      	ldr	r0, [r7, #32]
   83b42:	4b14      	ldr	r3, [pc, #80]	; (83b94 <xQueueGenericSend+0x1bc>)
   83b44:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83b46:	4b14      	ldr	r3, [pc, #80]	; (83b98 <xQueueGenericSend+0x1c0>)
   83b48:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   83b4a:	e784      	b.n	83a56 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   83b4c:	6a38      	ldr	r0, [r7, #32]
   83b4e:	4b11      	ldr	r3, [pc, #68]	; (83b94 <xQueueGenericSend+0x1bc>)
   83b50:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83b52:	4b11      	ldr	r3, [pc, #68]	; (83b98 <xQueueGenericSend+0x1c0>)
   83b54:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   83b56:	2300      	movs	r3, #0
   83b58:	e000      	b.n	83b5c <xQueueGenericSend+0x184>
		}
	}
   83b5a:	e77c      	b.n	83a56 <xQueueGenericSend+0x7e>
}
   83b5c:	4618      	mov	r0, r3
   83b5e:	3728      	adds	r7, #40	; 0x28
   83b60:	46bd      	mov	sp, r7
   83b62:	bd80      	pop	{r7, pc}
   83b64:	000833d1 	.word	0x000833d1
   83b68:	00084e1d 	.word	0x00084e1d
   83b6c:	00083355 	.word	0x00083355
   83b70:	00083e95 	.word	0x00083e95
   83b74:	00084945 	.word	0x00084945
   83b78:	00083335 	.word	0x00083335
   83b7c:	00083399 	.word	0x00083399
   83b80:	00084a05 	.word	0x00084a05
   83b84:	00084441 	.word	0x00084441
   83b88:	00084a3d 	.word	0x00084a3d
   83b8c:	000840a5 	.word	0x000840a5
   83b90:	00084825 	.word	0x00084825
   83b94:	00083fc9 	.word	0x00083fc9
   83b98:	0008445d 	.word	0x0008445d

00083b9c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83b9c:	b580      	push	{r7, lr}
   83b9e:	b088      	sub	sp, #32
   83ba0:	af00      	add	r7, sp, #0
   83ba2:	60f8      	str	r0, [r7, #12]
   83ba4:	60b9      	str	r1, [r7, #8]
   83ba6:	607a      	str	r2, [r7, #4]
   83ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83baa:	68fb      	ldr	r3, [r7, #12]
   83bac:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   83bae:	69bb      	ldr	r3, [r7, #24]
   83bb0:	2b00      	cmp	r3, #0
   83bb2:	d102      	bne.n	83bba <xQueueGenericSendFromISR+0x1e>
   83bb4:	4b33      	ldr	r3, [pc, #204]	; (83c84 <xQueueGenericSendFromISR+0xe8>)
   83bb6:	4798      	blx	r3
   83bb8:	e7fe      	b.n	83bb8 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83bba:	68bb      	ldr	r3, [r7, #8]
   83bbc:	2b00      	cmp	r3, #0
   83bbe:	d103      	bne.n	83bc8 <xQueueGenericSendFromISR+0x2c>
   83bc0:	69bb      	ldr	r3, [r7, #24]
   83bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83bc4:	2b00      	cmp	r3, #0
   83bc6:	d101      	bne.n	83bcc <xQueueGenericSendFromISR+0x30>
   83bc8:	2301      	movs	r3, #1
   83bca:	e000      	b.n	83bce <xQueueGenericSendFromISR+0x32>
   83bcc:	2300      	movs	r3, #0
   83bce:	2b00      	cmp	r3, #0
   83bd0:	d102      	bne.n	83bd8 <xQueueGenericSendFromISR+0x3c>
   83bd2:	4b2c      	ldr	r3, [pc, #176]	; (83c84 <xQueueGenericSendFromISR+0xe8>)
   83bd4:	4798      	blx	r3
   83bd6:	e7fe      	b.n	83bd6 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83bd8:	683b      	ldr	r3, [r7, #0]
   83bda:	2b02      	cmp	r3, #2
   83bdc:	d103      	bne.n	83be6 <xQueueGenericSendFromISR+0x4a>
   83bde:	69bb      	ldr	r3, [r7, #24]
   83be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83be2:	2b01      	cmp	r3, #1
   83be4:	d101      	bne.n	83bea <xQueueGenericSendFromISR+0x4e>
   83be6:	2301      	movs	r3, #1
   83be8:	e000      	b.n	83bec <xQueueGenericSendFromISR+0x50>
   83bea:	2300      	movs	r3, #0
   83bec:	2b00      	cmp	r3, #0
   83bee:	d102      	bne.n	83bf6 <xQueueGenericSendFromISR+0x5a>
   83bf0:	4b24      	ldr	r3, [pc, #144]	; (83c84 <xQueueGenericSendFromISR+0xe8>)
   83bf2:	4798      	blx	r3
   83bf4:	e7fe      	b.n	83bf4 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   83bf6:	4b24      	ldr	r3, [pc, #144]	; (83c88 <xQueueGenericSendFromISR+0xec>)
   83bf8:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83bfa:	4b22      	ldr	r3, [pc, #136]	; (83c84 <xQueueGenericSendFromISR+0xe8>)
   83bfc:	4798      	blx	r3
   83bfe:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83c00:	69bb      	ldr	r3, [r7, #24]
   83c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83c04:	69bb      	ldr	r3, [r7, #24]
   83c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83c08:	429a      	cmp	r2, r3
   83c0a:	d302      	bcc.n	83c12 <xQueueGenericSendFromISR+0x76>
   83c0c:	683b      	ldr	r3, [r7, #0]
   83c0e:	2b02      	cmp	r3, #2
   83c10:	d12d      	bne.n	83c6e <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   83c12:	69b8      	ldr	r0, [r7, #24]
   83c14:	68b9      	ldr	r1, [r7, #8]
   83c16:	683a      	ldr	r2, [r7, #0]
   83c18:	4b1c      	ldr	r3, [pc, #112]	; (83c8c <xQueueGenericSendFromISR+0xf0>)
   83c1a:	4798      	blx	r3
   83c1c:	4603      	mov	r3, r0
   83c1e:	2b00      	cmp	r3, #0
   83c20:	d005      	beq.n	83c2e <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   83c22:	687b      	ldr	r3, [r7, #4]
   83c24:	2b00      	cmp	r3, #0
   83c26:	d002      	beq.n	83c2e <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   83c28:	687b      	ldr	r3, [r7, #4]
   83c2a:	2201      	movs	r2, #1
   83c2c:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   83c2e:	69bb      	ldr	r3, [r7, #24]
   83c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83c32:	f1b3 3fff 	cmp.w	r3, #4294967295
   83c36:	d112      	bne.n	83c5e <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83c38:	69bb      	ldr	r3, [r7, #24]
   83c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83c3c:	2b00      	cmp	r3, #0
   83c3e:	d013      	beq.n	83c68 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83c40:	69bb      	ldr	r3, [r7, #24]
   83c42:	3324      	adds	r3, #36	; 0x24
   83c44:	4618      	mov	r0, r3
   83c46:	4b12      	ldr	r3, [pc, #72]	; (83c90 <xQueueGenericSendFromISR+0xf4>)
   83c48:	4798      	blx	r3
   83c4a:	4603      	mov	r3, r0
   83c4c:	2b00      	cmp	r3, #0
   83c4e:	d00b      	beq.n	83c68 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   83c50:	687b      	ldr	r3, [r7, #4]
   83c52:	2b00      	cmp	r3, #0
   83c54:	d008      	beq.n	83c68 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   83c56:	687b      	ldr	r3, [r7, #4]
   83c58:	2201      	movs	r2, #1
   83c5a:	601a      	str	r2, [r3, #0]
   83c5c:	e004      	b.n	83c68 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   83c5e:	69bb      	ldr	r3, [r7, #24]
   83c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83c62:	1c5a      	adds	r2, r3, #1
   83c64:	69bb      	ldr	r3, [r7, #24]
   83c66:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   83c68:	2301      	movs	r3, #1
   83c6a:	61fb      	str	r3, [r7, #28]
   83c6c:	e001      	b.n	83c72 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   83c6e:	2300      	movs	r3, #0
   83c70:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   83c72:	6978      	ldr	r0, [r7, #20]
   83c74:	4b07      	ldr	r3, [pc, #28]	; (83c94 <xQueueGenericSendFromISR+0xf8>)
   83c76:	4798      	blx	r3

	return xReturn;
   83c78:	69fb      	ldr	r3, [r7, #28]
}
   83c7a:	4618      	mov	r0, r3
   83c7c:	3720      	adds	r7, #32
   83c7e:	46bd      	mov	sp, r7
   83c80:	bd80      	pop	{r7, pc}
   83c82:	bf00      	nop
   83c84:	000833d1 	.word	0x000833d1
   83c88:	00083499 	.word	0x00083499
   83c8c:	00083e95 	.word	0x00083e95
   83c90:	00084945 	.word	0x00084945
   83c94:	000833e5 	.word	0x000833e5

00083c98 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   83c98:	b580      	push	{r7, lr}
   83c9a:	b08a      	sub	sp, #40	; 0x28
   83c9c:	af00      	add	r7, sp, #0
   83c9e:	60f8      	str	r0, [r7, #12]
   83ca0:	60b9      	str	r1, [r7, #8]
   83ca2:	607a      	str	r2, [r7, #4]
   83ca4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   83ca6:	2300      	movs	r3, #0
   83ca8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83caa:	68fb      	ldr	r3, [r7, #12]
   83cac:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83cae:	6a3b      	ldr	r3, [r7, #32]
   83cb0:	2b00      	cmp	r3, #0
   83cb2:	d102      	bne.n	83cba <xQueueGenericReceive+0x22>
   83cb4:	4b67      	ldr	r3, [pc, #412]	; (83e54 <xQueueGenericReceive+0x1bc>)
   83cb6:	4798      	blx	r3
   83cb8:	e7fe      	b.n	83cb8 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83cba:	68bb      	ldr	r3, [r7, #8]
   83cbc:	2b00      	cmp	r3, #0
   83cbe:	d103      	bne.n	83cc8 <xQueueGenericReceive+0x30>
   83cc0:	6a3b      	ldr	r3, [r7, #32]
   83cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83cc4:	2b00      	cmp	r3, #0
   83cc6:	d101      	bne.n	83ccc <xQueueGenericReceive+0x34>
   83cc8:	2301      	movs	r3, #1
   83cca:	e000      	b.n	83cce <xQueueGenericReceive+0x36>
   83ccc:	2300      	movs	r3, #0
   83cce:	2b00      	cmp	r3, #0
   83cd0:	d102      	bne.n	83cd8 <xQueueGenericReceive+0x40>
   83cd2:	4b60      	ldr	r3, [pc, #384]	; (83e54 <xQueueGenericReceive+0x1bc>)
   83cd4:	4798      	blx	r3
   83cd6:	e7fe      	b.n	83cd6 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83cd8:	4b5f      	ldr	r3, [pc, #380]	; (83e58 <xQueueGenericReceive+0x1c0>)
   83cda:	4798      	blx	r3
   83cdc:	4603      	mov	r3, r0
   83cde:	2b00      	cmp	r3, #0
   83ce0:	d102      	bne.n	83ce8 <xQueueGenericReceive+0x50>
   83ce2:	687b      	ldr	r3, [r7, #4]
   83ce4:	2b00      	cmp	r3, #0
   83ce6:	d101      	bne.n	83cec <xQueueGenericReceive+0x54>
   83ce8:	2301      	movs	r3, #1
   83cea:	e000      	b.n	83cee <xQueueGenericReceive+0x56>
   83cec:	2300      	movs	r3, #0
   83cee:	2b00      	cmp	r3, #0
   83cf0:	d102      	bne.n	83cf8 <xQueueGenericReceive+0x60>
   83cf2:	4b58      	ldr	r3, [pc, #352]	; (83e54 <xQueueGenericReceive+0x1bc>)
   83cf4:	4798      	blx	r3
   83cf6:	e7fe      	b.n	83cf6 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83cf8:	4b58      	ldr	r3, [pc, #352]	; (83e5c <xQueueGenericReceive+0x1c4>)
   83cfa:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83cfc:	6a3b      	ldr	r3, [r7, #32]
   83cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83d00:	2b00      	cmp	r3, #0
   83d02:	d03b      	beq.n	83d7c <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   83d04:	6a3b      	ldr	r3, [r7, #32]
   83d06:	68db      	ldr	r3, [r3, #12]
   83d08:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83d0a:	6a38      	ldr	r0, [r7, #32]
   83d0c:	68b9      	ldr	r1, [r7, #8]
   83d0e:	4b54      	ldr	r3, [pc, #336]	; (83e60 <xQueueGenericReceive+0x1c8>)
   83d10:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   83d12:	683b      	ldr	r3, [r7, #0]
   83d14:	2b00      	cmp	r3, #0
   83d16:	d11c      	bne.n	83d52 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83d18:	6a3b      	ldr	r3, [r7, #32]
   83d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83d1c:	1e5a      	subs	r2, r3, #1
   83d1e:	6a3b      	ldr	r3, [r7, #32]
   83d20:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83d22:	6a3b      	ldr	r3, [r7, #32]
   83d24:	681b      	ldr	r3, [r3, #0]
   83d26:	2b00      	cmp	r3, #0
   83d28:	d104      	bne.n	83d34 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   83d2a:	4b4e      	ldr	r3, [pc, #312]	; (83e64 <xQueueGenericReceive+0x1cc>)
   83d2c:	4798      	blx	r3
   83d2e:	4602      	mov	r2, r0
   83d30:	6a3b      	ldr	r3, [r7, #32]
   83d32:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83d34:	6a3b      	ldr	r3, [r7, #32]
   83d36:	691b      	ldr	r3, [r3, #16]
   83d38:	2b00      	cmp	r3, #0
   83d3a:	d01b      	beq.n	83d74 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83d3c:	6a3b      	ldr	r3, [r7, #32]
   83d3e:	3310      	adds	r3, #16
   83d40:	4618      	mov	r0, r3
   83d42:	4b49      	ldr	r3, [pc, #292]	; (83e68 <xQueueGenericReceive+0x1d0>)
   83d44:	4798      	blx	r3
   83d46:	4603      	mov	r3, r0
   83d48:	2b01      	cmp	r3, #1
   83d4a:	d113      	bne.n	83d74 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   83d4c:	4b47      	ldr	r3, [pc, #284]	; (83e6c <xQueueGenericReceive+0x1d4>)
   83d4e:	4798      	blx	r3
   83d50:	e010      	b.n	83d74 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   83d52:	6a3b      	ldr	r3, [r7, #32]
   83d54:	69fa      	ldr	r2, [r7, #28]
   83d56:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83d58:	6a3b      	ldr	r3, [r7, #32]
   83d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83d5c:	2b00      	cmp	r3, #0
   83d5e:	d009      	beq.n	83d74 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83d60:	6a3b      	ldr	r3, [r7, #32]
   83d62:	3324      	adds	r3, #36	; 0x24
   83d64:	4618      	mov	r0, r3
   83d66:	4b40      	ldr	r3, [pc, #256]	; (83e68 <xQueueGenericReceive+0x1d0>)
   83d68:	4798      	blx	r3
   83d6a:	4603      	mov	r3, r0
   83d6c:	2b00      	cmp	r3, #0
   83d6e:	d001      	beq.n	83d74 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   83d70:	4b3e      	ldr	r3, [pc, #248]	; (83e6c <xQueueGenericReceive+0x1d4>)
   83d72:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   83d74:	4b3e      	ldr	r3, [pc, #248]	; (83e70 <xQueueGenericReceive+0x1d8>)
   83d76:	4798      	blx	r3
				return pdPASS;
   83d78:	2301      	movs	r3, #1
   83d7a:	e066      	b.n	83e4a <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83d7c:	687b      	ldr	r3, [r7, #4]
   83d7e:	2b00      	cmp	r3, #0
   83d80:	d103      	bne.n	83d8a <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83d82:	4b3b      	ldr	r3, [pc, #236]	; (83e70 <xQueueGenericReceive+0x1d8>)
   83d84:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   83d86:	2300      	movs	r3, #0
   83d88:	e05f      	b.n	83e4a <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d8c:	2b00      	cmp	r3, #0
   83d8e:	d106      	bne.n	83d9e <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83d90:	f107 0314 	add.w	r3, r7, #20
   83d94:	4618      	mov	r0, r3
   83d96:	4b37      	ldr	r3, [pc, #220]	; (83e74 <xQueueGenericReceive+0x1dc>)
   83d98:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83d9a:	2301      	movs	r3, #1
   83d9c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83d9e:	4b34      	ldr	r3, [pc, #208]	; (83e70 <xQueueGenericReceive+0x1d8>)
   83da0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83da2:	4b35      	ldr	r3, [pc, #212]	; (83e78 <xQueueGenericReceive+0x1e0>)
   83da4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83da6:	4b2d      	ldr	r3, [pc, #180]	; (83e5c <xQueueGenericReceive+0x1c4>)
   83da8:	4798      	blx	r3
   83daa:	6a3b      	ldr	r3, [r7, #32]
   83dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83dae:	f1b3 3fff 	cmp.w	r3, #4294967295
   83db2:	d102      	bne.n	83dba <xQueueGenericReceive+0x122>
   83db4:	6a3b      	ldr	r3, [r7, #32]
   83db6:	2200      	movs	r2, #0
   83db8:	645a      	str	r2, [r3, #68]	; 0x44
   83dba:	6a3b      	ldr	r3, [r7, #32]
   83dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
   83dc2:	d102      	bne.n	83dca <xQueueGenericReceive+0x132>
   83dc4:	6a3b      	ldr	r3, [r7, #32]
   83dc6:	2200      	movs	r2, #0
   83dc8:	649a      	str	r2, [r3, #72]	; 0x48
   83dca:	4b29      	ldr	r3, [pc, #164]	; (83e70 <xQueueGenericReceive+0x1d8>)
   83dcc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83dce:	f107 0214 	add.w	r2, r7, #20
   83dd2:	1d3b      	adds	r3, r7, #4
   83dd4:	4610      	mov	r0, r2
   83dd6:	4619      	mov	r1, r3
   83dd8:	4b28      	ldr	r3, [pc, #160]	; (83e7c <xQueueGenericReceive+0x1e4>)
   83dda:	4798      	blx	r3
   83ddc:	4603      	mov	r3, r0
   83dde:	2b00      	cmp	r3, #0
   83de0:	d12b      	bne.n	83e3a <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   83de2:	6a38      	ldr	r0, [r7, #32]
   83de4:	4b26      	ldr	r3, [pc, #152]	; (83e80 <xQueueGenericReceive+0x1e8>)
   83de6:	4798      	blx	r3
   83de8:	4603      	mov	r3, r0
   83dea:	2b00      	cmp	r3, #0
   83dec:	d01f      	beq.n	83e2e <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83dee:	6a3b      	ldr	r3, [r7, #32]
   83df0:	681b      	ldr	r3, [r3, #0]
   83df2:	2b00      	cmp	r3, #0
   83df4:	d108      	bne.n	83e08 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   83df6:	4b19      	ldr	r3, [pc, #100]	; (83e5c <xQueueGenericReceive+0x1c4>)
   83df8:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83dfa:	6a3b      	ldr	r3, [r7, #32]
   83dfc:	685b      	ldr	r3, [r3, #4]
   83dfe:	4618      	mov	r0, r3
   83e00:	4b20      	ldr	r3, [pc, #128]	; (83e84 <xQueueGenericReceive+0x1ec>)
   83e02:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   83e04:	4b1a      	ldr	r3, [pc, #104]	; (83e70 <xQueueGenericReceive+0x1d8>)
   83e06:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83e08:	6a3b      	ldr	r3, [r7, #32]
   83e0a:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83e0e:	687b      	ldr	r3, [r7, #4]
   83e10:	4610      	mov	r0, r2
   83e12:	4619      	mov	r1, r3
   83e14:	4b1c      	ldr	r3, [pc, #112]	; (83e88 <xQueueGenericReceive+0x1f0>)
   83e16:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83e18:	6a38      	ldr	r0, [r7, #32]
   83e1a:	4b1c      	ldr	r3, [pc, #112]	; (83e8c <xQueueGenericReceive+0x1f4>)
   83e1c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83e1e:	4b1c      	ldr	r3, [pc, #112]	; (83e90 <xQueueGenericReceive+0x1f8>)
   83e20:	4798      	blx	r3
   83e22:	4603      	mov	r3, r0
   83e24:	2b00      	cmp	r3, #0
   83e26:	d10f      	bne.n	83e48 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   83e28:	4b10      	ldr	r3, [pc, #64]	; (83e6c <xQueueGenericReceive+0x1d4>)
   83e2a:	4798      	blx	r3
   83e2c:	e00c      	b.n	83e48 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83e2e:	6a38      	ldr	r0, [r7, #32]
   83e30:	4b16      	ldr	r3, [pc, #88]	; (83e8c <xQueueGenericReceive+0x1f4>)
   83e32:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83e34:	4b16      	ldr	r3, [pc, #88]	; (83e90 <xQueueGenericReceive+0x1f8>)
   83e36:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   83e38:	e75e      	b.n	83cf8 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   83e3a:	6a38      	ldr	r0, [r7, #32]
   83e3c:	4b13      	ldr	r3, [pc, #76]	; (83e8c <xQueueGenericReceive+0x1f4>)
   83e3e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83e40:	4b13      	ldr	r3, [pc, #76]	; (83e90 <xQueueGenericReceive+0x1f8>)
   83e42:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   83e44:	2300      	movs	r3, #0
   83e46:	e000      	b.n	83e4a <xQueueGenericReceive+0x1b2>
		}
	}
   83e48:	e756      	b.n	83cf8 <xQueueGenericReceive+0x60>
}
   83e4a:	4618      	mov	r0, r3
   83e4c:	3728      	adds	r7, #40	; 0x28
   83e4e:	46bd      	mov	sp, r7
   83e50:	bd80      	pop	{r7, pc}
   83e52:	bf00      	nop
   83e54:	000833d1 	.word	0x000833d1
   83e58:	00084e1d 	.word	0x00084e1d
   83e5c:	00083355 	.word	0x00083355
   83e60:	00083f79 	.word	0x00083f79
   83e64:	00085031 	.word	0x00085031
   83e68:	00084945 	.word	0x00084945
   83e6c:	00083335 	.word	0x00083335
   83e70:	00083399 	.word	0x00083399
   83e74:	00084a05 	.word	0x00084a05
   83e78:	00084441 	.word	0x00084441
   83e7c:	00084a3d 	.word	0x00084a3d
   83e80:	00084071 	.word	0x00084071
   83e84:	00084e59 	.word	0x00084e59
   83e88:	00084825 	.word	0x00084825
   83e8c:	00083fc9 	.word	0x00083fc9
   83e90:	0008445d 	.word	0x0008445d

00083e94 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   83e94:	b580      	push	{r7, lr}
   83e96:	b086      	sub	sp, #24
   83e98:	af00      	add	r7, sp, #0
   83e9a:	60f8      	str	r0, [r7, #12]
   83e9c:	60b9      	str	r1, [r7, #8]
   83e9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   83ea0:	2300      	movs	r3, #0
   83ea2:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   83ea4:	68fb      	ldr	r3, [r7, #12]
   83ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83ea8:	2b00      	cmp	r3, #0
   83eaa:	d10d      	bne.n	83ec8 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83eac:	68fb      	ldr	r3, [r7, #12]
   83eae:	681b      	ldr	r3, [r3, #0]
   83eb0:	2b00      	cmp	r3, #0
   83eb2:	d152      	bne.n	83f5a <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   83eb4:	68fb      	ldr	r3, [r7, #12]
   83eb6:	685b      	ldr	r3, [r3, #4]
   83eb8:	4618      	mov	r0, r3
   83eba:	4b2d      	ldr	r3, [pc, #180]	; (83f70 <prvCopyDataToQueue+0xdc>)
   83ebc:	4798      	blx	r3
   83ebe:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   83ec0:	68fb      	ldr	r3, [r7, #12]
   83ec2:	2200      	movs	r2, #0
   83ec4:	605a      	str	r2, [r3, #4]
   83ec6:	e048      	b.n	83f5a <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83ec8:	687b      	ldr	r3, [r7, #4]
   83eca:	2b00      	cmp	r3, #0
   83ecc:	d11a      	bne.n	83f04 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83ece:	68fb      	ldr	r3, [r7, #12]
   83ed0:	689a      	ldr	r2, [r3, #8]
   83ed2:	68fb      	ldr	r3, [r7, #12]
   83ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83ed6:	4610      	mov	r0, r2
   83ed8:	68b9      	ldr	r1, [r7, #8]
   83eda:	461a      	mov	r2, r3
   83edc:	4b25      	ldr	r3, [pc, #148]	; (83f74 <prvCopyDataToQueue+0xe0>)
   83ede:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83ee0:	68fb      	ldr	r3, [r7, #12]
   83ee2:	689a      	ldr	r2, [r3, #8]
   83ee4:	68fb      	ldr	r3, [r7, #12]
   83ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83ee8:	441a      	add	r2, r3
   83eea:	68fb      	ldr	r3, [r7, #12]
   83eec:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83eee:	68fb      	ldr	r3, [r7, #12]
   83ef0:	689a      	ldr	r2, [r3, #8]
   83ef2:	68fb      	ldr	r3, [r7, #12]
   83ef4:	685b      	ldr	r3, [r3, #4]
   83ef6:	429a      	cmp	r2, r3
   83ef8:	d32f      	bcc.n	83f5a <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83efa:	68fb      	ldr	r3, [r7, #12]
   83efc:	681a      	ldr	r2, [r3, #0]
   83efe:	68fb      	ldr	r3, [r7, #12]
   83f00:	609a      	str	r2, [r3, #8]
   83f02:	e02a      	b.n	83f5a <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83f04:	68fb      	ldr	r3, [r7, #12]
   83f06:	68da      	ldr	r2, [r3, #12]
   83f08:	68fb      	ldr	r3, [r7, #12]
   83f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f0c:	4610      	mov	r0, r2
   83f0e:	68b9      	ldr	r1, [r7, #8]
   83f10:	461a      	mov	r2, r3
   83f12:	4b18      	ldr	r3, [pc, #96]	; (83f74 <prvCopyDataToQueue+0xe0>)
   83f14:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83f16:	68fb      	ldr	r3, [r7, #12]
   83f18:	68da      	ldr	r2, [r3, #12]
   83f1a:	68fb      	ldr	r3, [r7, #12]
   83f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f1e:	425b      	negs	r3, r3
   83f20:	441a      	add	r2, r3
   83f22:	68fb      	ldr	r3, [r7, #12]
   83f24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83f26:	68fb      	ldr	r3, [r7, #12]
   83f28:	68da      	ldr	r2, [r3, #12]
   83f2a:	68fb      	ldr	r3, [r7, #12]
   83f2c:	681b      	ldr	r3, [r3, #0]
   83f2e:	429a      	cmp	r2, r3
   83f30:	d207      	bcs.n	83f42 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83f32:	68fb      	ldr	r3, [r7, #12]
   83f34:	685a      	ldr	r2, [r3, #4]
   83f36:	68fb      	ldr	r3, [r7, #12]
   83f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f3a:	425b      	negs	r3, r3
   83f3c:	441a      	add	r2, r3
   83f3e:	68fb      	ldr	r3, [r7, #12]
   83f40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   83f42:	687b      	ldr	r3, [r7, #4]
   83f44:	2b02      	cmp	r3, #2
   83f46:	d108      	bne.n	83f5a <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83f48:	68fb      	ldr	r3, [r7, #12]
   83f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83f4c:	2b00      	cmp	r3, #0
   83f4e:	d004      	beq.n	83f5a <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   83f50:	68fb      	ldr	r3, [r7, #12]
   83f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83f54:	1e5a      	subs	r2, r3, #1
   83f56:	68fb      	ldr	r3, [r7, #12]
   83f58:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   83f5a:	68fb      	ldr	r3, [r7, #12]
   83f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83f5e:	1c5a      	adds	r2, r3, #1
   83f60:	68fb      	ldr	r3, [r7, #12]
   83f62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83f64:	697b      	ldr	r3, [r7, #20]
}
   83f66:	4618      	mov	r0, r3
   83f68:	3718      	adds	r7, #24
   83f6a:	46bd      	mov	sp, r7
   83f6c:	bd80      	pop	{r7, pc}
   83f6e:	bf00      	nop
   83f70:	00084f4d 	.word	0x00084f4d
   83f74:	00086b45 	.word	0x00086b45

00083f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83f78:	b580      	push	{r7, lr}
   83f7a:	b082      	sub	sp, #8
   83f7c:	af00      	add	r7, sp, #0
   83f7e:	6078      	str	r0, [r7, #4]
   83f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83f82:	687b      	ldr	r3, [r7, #4]
   83f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f86:	2b00      	cmp	r3, #0
   83f88:	d019      	beq.n	83fbe <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83f8a:	687b      	ldr	r3, [r7, #4]
   83f8c:	68da      	ldr	r2, [r3, #12]
   83f8e:	687b      	ldr	r3, [r7, #4]
   83f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f92:	441a      	add	r2, r3
   83f94:	687b      	ldr	r3, [r7, #4]
   83f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83f98:	687b      	ldr	r3, [r7, #4]
   83f9a:	68da      	ldr	r2, [r3, #12]
   83f9c:	687b      	ldr	r3, [r7, #4]
   83f9e:	685b      	ldr	r3, [r3, #4]
   83fa0:	429a      	cmp	r2, r3
   83fa2:	d303      	bcc.n	83fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83fa4:	687b      	ldr	r3, [r7, #4]
   83fa6:	681a      	ldr	r2, [r3, #0]
   83fa8:	687b      	ldr	r3, [r7, #4]
   83faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83fac:	687b      	ldr	r3, [r7, #4]
   83fae:	68da      	ldr	r2, [r3, #12]
   83fb0:	687b      	ldr	r3, [r7, #4]
   83fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83fb4:	6838      	ldr	r0, [r7, #0]
   83fb6:	4611      	mov	r1, r2
   83fb8:	461a      	mov	r2, r3
   83fba:	4b02      	ldr	r3, [pc, #8]	; (83fc4 <prvCopyDataFromQueue+0x4c>)
   83fbc:	4798      	blx	r3
	}
}
   83fbe:	3708      	adds	r7, #8
   83fc0:	46bd      	mov	sp, r7
   83fc2:	bd80      	pop	{r7, pc}
   83fc4:	00086b45 	.word	0x00086b45

00083fc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83fc8:	b580      	push	{r7, lr}
   83fca:	b082      	sub	sp, #8
   83fcc:	af00      	add	r7, sp, #0
   83fce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83fd0:	4b23      	ldr	r3, [pc, #140]	; (84060 <prvUnlockQueue+0x98>)
   83fd2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83fd4:	e014      	b.n	84000 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83fd6:	687b      	ldr	r3, [r7, #4]
   83fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83fda:	2b00      	cmp	r3, #0
   83fdc:	d00a      	beq.n	83ff4 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83fde:	687b      	ldr	r3, [r7, #4]
   83fe0:	3324      	adds	r3, #36	; 0x24
   83fe2:	4618      	mov	r0, r3
   83fe4:	4b1f      	ldr	r3, [pc, #124]	; (84064 <prvUnlockQueue+0x9c>)
   83fe6:	4798      	blx	r3
   83fe8:	4603      	mov	r3, r0
   83fea:	2b00      	cmp	r3, #0
   83fec:	d003      	beq.n	83ff6 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83fee:	4b1e      	ldr	r3, [pc, #120]	; (84068 <prvUnlockQueue+0xa0>)
   83ff0:	4798      	blx	r3
   83ff2:	e000      	b.n	83ff6 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83ff4:	e008      	b.n	84008 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83ff6:	687b      	ldr	r3, [r7, #4]
   83ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83ffa:	1e5a      	subs	r2, r3, #1
   83ffc:	687b      	ldr	r3, [r7, #4]
   83ffe:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   84000:	687b      	ldr	r3, [r7, #4]
   84002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84004:	2b00      	cmp	r3, #0
   84006:	dce6      	bgt.n	83fd6 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   84008:	687b      	ldr	r3, [r7, #4]
   8400a:	f04f 32ff 	mov.w	r2, #4294967295
   8400e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   84010:	4b16      	ldr	r3, [pc, #88]	; (8406c <prvUnlockQueue+0xa4>)
   84012:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   84014:	4b12      	ldr	r3, [pc, #72]	; (84060 <prvUnlockQueue+0x98>)
   84016:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   84018:	e014      	b.n	84044 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8401a:	687b      	ldr	r3, [r7, #4]
   8401c:	691b      	ldr	r3, [r3, #16]
   8401e:	2b00      	cmp	r3, #0
   84020:	d00f      	beq.n	84042 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   84022:	687b      	ldr	r3, [r7, #4]
   84024:	3310      	adds	r3, #16
   84026:	4618      	mov	r0, r3
   84028:	4b0e      	ldr	r3, [pc, #56]	; (84064 <prvUnlockQueue+0x9c>)
   8402a:	4798      	blx	r3
   8402c:	4603      	mov	r3, r0
   8402e:	2b00      	cmp	r3, #0
   84030:	d001      	beq.n	84036 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   84032:	4b0d      	ldr	r3, [pc, #52]	; (84068 <prvUnlockQueue+0xa0>)
   84034:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   84036:	687b      	ldr	r3, [r7, #4]
   84038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8403a:	1e5a      	subs	r2, r3, #1
   8403c:	687b      	ldr	r3, [r7, #4]
   8403e:	645a      	str	r2, [r3, #68]	; 0x44
   84040:	e000      	b.n	84044 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   84042:	e003      	b.n	8404c <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   84044:	687b      	ldr	r3, [r7, #4]
   84046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84048:	2b00      	cmp	r3, #0
   8404a:	dce6      	bgt.n	8401a <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8404c:	687b      	ldr	r3, [r7, #4]
   8404e:	f04f 32ff 	mov.w	r2, #4294967295
   84052:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   84054:	4b05      	ldr	r3, [pc, #20]	; (8406c <prvUnlockQueue+0xa4>)
   84056:	4798      	blx	r3
}
   84058:	3708      	adds	r7, #8
   8405a:	46bd      	mov	sp, r7
   8405c:	bd80      	pop	{r7, pc}
   8405e:	bf00      	nop
   84060:	00083355 	.word	0x00083355
   84064:	00084945 	.word	0x00084945
   84068:	00084aed 	.word	0x00084aed
   8406c:	00083399 	.word	0x00083399

00084070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   84070:	b580      	push	{r7, lr}
   84072:	b084      	sub	sp, #16
   84074:	af00      	add	r7, sp, #0
   84076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   84078:	4b08      	ldr	r3, [pc, #32]	; (8409c <prvIsQueueEmpty+0x2c>)
   8407a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   8407c:	687b      	ldr	r3, [r7, #4]
   8407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84080:	2b00      	cmp	r3, #0
   84082:	d102      	bne.n	8408a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   84084:	2301      	movs	r3, #1
   84086:	60fb      	str	r3, [r7, #12]
   84088:	e001      	b.n	8408e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   8408a:	2300      	movs	r3, #0
   8408c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8408e:	4b04      	ldr	r3, [pc, #16]	; (840a0 <prvIsQueueEmpty+0x30>)
   84090:	4798      	blx	r3

	return xReturn;
   84092:	68fb      	ldr	r3, [r7, #12]
}
   84094:	4618      	mov	r0, r3
   84096:	3710      	adds	r7, #16
   84098:	46bd      	mov	sp, r7
   8409a:	bd80      	pop	{r7, pc}
   8409c:	00083355 	.word	0x00083355
   840a0:	00083399 	.word	0x00083399

000840a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   840a4:	b580      	push	{r7, lr}
   840a6:	b084      	sub	sp, #16
   840a8:	af00      	add	r7, sp, #0
   840aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   840ac:	4b09      	ldr	r3, [pc, #36]	; (840d4 <prvIsQueueFull+0x30>)
   840ae:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   840b0:	687b      	ldr	r3, [r7, #4]
   840b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   840b4:	687b      	ldr	r3, [r7, #4]
   840b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   840b8:	429a      	cmp	r2, r3
   840ba:	d102      	bne.n	840c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   840bc:	2301      	movs	r3, #1
   840be:	60fb      	str	r3, [r7, #12]
   840c0:	e001      	b.n	840c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   840c2:	2300      	movs	r3, #0
   840c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   840c6:	4b04      	ldr	r3, [pc, #16]	; (840d8 <prvIsQueueFull+0x34>)
   840c8:	4798      	blx	r3

	return xReturn;
   840ca:	68fb      	ldr	r3, [r7, #12]
}
   840cc:	4618      	mov	r0, r3
   840ce:	3710      	adds	r7, #16
   840d0:	46bd      	mov	sp, r7
   840d2:	bd80      	pop	{r7, pc}
   840d4:	00083355 	.word	0x00083355
   840d8:	00083399 	.word	0x00083399

000840dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   840dc:	b580      	push	{r7, lr}
   840de:	b084      	sub	sp, #16
   840e0:	af00      	add	r7, sp, #0
   840e2:	6078      	str	r0, [r7, #4]
   840e4:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   840e6:	687b      	ldr	r3, [r7, #4]
   840e8:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   840ea:	4b12      	ldr	r3, [pc, #72]	; (84134 <vQueueWaitForMessageRestricted+0x58>)
   840ec:	4798      	blx	r3
   840ee:	68fb      	ldr	r3, [r7, #12]
   840f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   840f2:	f1b3 3fff 	cmp.w	r3, #4294967295
   840f6:	d102      	bne.n	840fe <vQueueWaitForMessageRestricted+0x22>
   840f8:	68fb      	ldr	r3, [r7, #12]
   840fa:	2200      	movs	r2, #0
   840fc:	645a      	str	r2, [r3, #68]	; 0x44
   840fe:	68fb      	ldr	r3, [r7, #12]
   84100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84102:	f1b3 3fff 	cmp.w	r3, #4294967295
   84106:	d102      	bne.n	8410e <vQueueWaitForMessageRestricted+0x32>
   84108:	68fb      	ldr	r3, [r7, #12]
   8410a:	2200      	movs	r2, #0
   8410c:	649a      	str	r2, [r3, #72]	; 0x48
   8410e:	4b0a      	ldr	r3, [pc, #40]	; (84138 <vQueueWaitForMessageRestricted+0x5c>)
   84110:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   84112:	68fb      	ldr	r3, [r7, #12]
   84114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84116:	2b00      	cmp	r3, #0
   84118:	d105      	bne.n	84126 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8411a:	68fb      	ldr	r3, [r7, #12]
   8411c:	3324      	adds	r3, #36	; 0x24
   8411e:	4618      	mov	r0, r3
   84120:	6839      	ldr	r1, [r7, #0]
   84122:	4b06      	ldr	r3, [pc, #24]	; (8413c <vQueueWaitForMessageRestricted+0x60>)
   84124:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   84126:	68f8      	ldr	r0, [r7, #12]
   84128:	4b05      	ldr	r3, [pc, #20]	; (84140 <vQueueWaitForMessageRestricted+0x64>)
   8412a:	4798      	blx	r3
	}
   8412c:	3710      	adds	r7, #16
   8412e:	46bd      	mov	sp, r7
   84130:	bd80      	pop	{r7, pc}
   84132:	bf00      	nop
   84134:	00083355 	.word	0x00083355
   84138:	00083399 	.word	0x00083399
   8413c:	000848c5 	.word	0x000848c5
   84140:	00083fc9 	.word	0x00083fc9

00084144 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84144:	b590      	push	{r4, r7, lr}
   84146:	b08b      	sub	sp, #44	; 0x2c
   84148:	af02      	add	r7, sp, #8
   8414a:	60f8      	str	r0, [r7, #12]
   8414c:	60b9      	str	r1, [r7, #8]
   8414e:	603b      	str	r3, [r7, #0]
   84150:	4613      	mov	r3, r2
   84152:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   84154:	68fb      	ldr	r3, [r7, #12]
   84156:	2b00      	cmp	r3, #0
   84158:	d102      	bne.n	84160 <xTaskGenericCreate+0x1c>
   8415a:	4b4b      	ldr	r3, [pc, #300]	; (84288 <xTaskGenericCreate+0x144>)
   8415c:	4798      	blx	r3
   8415e:	e7fe      	b.n	8415e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   84160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84162:	2b04      	cmp	r3, #4
   84164:	d902      	bls.n	8416c <xTaskGenericCreate+0x28>
   84166:	4b48      	ldr	r3, [pc, #288]	; (84288 <xTaskGenericCreate+0x144>)
   84168:	4798      	blx	r3
   8416a:	e7fe      	b.n	8416a <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   8416c:	88fb      	ldrh	r3, [r7, #6]
   8416e:	4618      	mov	r0, r3
   84170:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   84172:	4b46      	ldr	r3, [pc, #280]	; (8428c <xTaskGenericCreate+0x148>)
   84174:	4798      	blx	r3
   84176:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   84178:	69bb      	ldr	r3, [r7, #24]
   8417a:	2b00      	cmp	r3, #0
   8417c:	d06d      	beq.n	8425a <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   8417e:	69bb      	ldr	r3, [r7, #24]
   84180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84182:	88fb      	ldrh	r3, [r7, #6]
   84184:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   84188:	3b01      	subs	r3, #1
   8418a:	009b      	lsls	r3, r3, #2
   8418c:	4413      	add	r3, r2
   8418e:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   84190:	697b      	ldr	r3, [r7, #20]
   84192:	f023 0307 	bic.w	r3, r3, #7
   84196:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   84198:	697b      	ldr	r3, [r7, #20]
   8419a:	f003 0307 	and.w	r3, r3, #7
   8419e:	2b00      	cmp	r3, #0
   841a0:	d002      	beq.n	841a8 <xTaskGenericCreate+0x64>
   841a2:	4b39      	ldr	r3, [pc, #228]	; (84288 <xTaskGenericCreate+0x144>)
   841a4:	4798      	blx	r3
   841a6:	e7fe      	b.n	841a6 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   841a8:	88fb      	ldrh	r3, [r7, #6]
   841aa:	9300      	str	r3, [sp, #0]
   841ac:	69b8      	ldr	r0, [r7, #24]
   841ae:	68b9      	ldr	r1, [r7, #8]
   841b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   841b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   841b4:	4c36      	ldr	r4, [pc, #216]	; (84290 <xTaskGenericCreate+0x14c>)
   841b6:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   841b8:	6978      	ldr	r0, [r7, #20]
   841ba:	68f9      	ldr	r1, [r7, #12]
   841bc:	683a      	ldr	r2, [r7, #0]
   841be:	4b35      	ldr	r3, [pc, #212]	; (84294 <xTaskGenericCreate+0x150>)
   841c0:	4798      	blx	r3
   841c2:	4602      	mov	r2, r0
   841c4:	69bb      	ldr	r3, [r7, #24]
   841c6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   841c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   841ca:	2b00      	cmp	r3, #0
   841cc:	d002      	beq.n	841d4 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   841ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   841d0:	69ba      	ldr	r2, [r7, #24]
   841d2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   841d4:	4b30      	ldr	r3, [pc, #192]	; (84298 <xTaskGenericCreate+0x154>)
   841d6:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   841d8:	4b30      	ldr	r3, [pc, #192]	; (8429c <xTaskGenericCreate+0x158>)
   841da:	681b      	ldr	r3, [r3, #0]
   841dc:	1c5a      	adds	r2, r3, #1
   841de:	4b2f      	ldr	r3, [pc, #188]	; (8429c <xTaskGenericCreate+0x158>)
   841e0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   841e2:	4b2f      	ldr	r3, [pc, #188]	; (842a0 <xTaskGenericCreate+0x15c>)
   841e4:	681b      	ldr	r3, [r3, #0]
   841e6:	2b00      	cmp	r3, #0
   841e8:	d109      	bne.n	841fe <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   841ea:	4b2d      	ldr	r3, [pc, #180]	; (842a0 <xTaskGenericCreate+0x15c>)
   841ec:	69ba      	ldr	r2, [r7, #24]
   841ee:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   841f0:	4b2a      	ldr	r3, [pc, #168]	; (8429c <xTaskGenericCreate+0x158>)
   841f2:	681b      	ldr	r3, [r3, #0]
   841f4:	2b01      	cmp	r3, #1
   841f6:	d10f      	bne.n	84218 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   841f8:	4b2a      	ldr	r3, [pc, #168]	; (842a4 <xTaskGenericCreate+0x160>)
   841fa:	4798      	blx	r3
   841fc:	e00c      	b.n	84218 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   841fe:	4b2a      	ldr	r3, [pc, #168]	; (842a8 <xTaskGenericCreate+0x164>)
   84200:	681b      	ldr	r3, [r3, #0]
   84202:	2b00      	cmp	r3, #0
   84204:	d108      	bne.n	84218 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   84206:	4b26      	ldr	r3, [pc, #152]	; (842a0 <xTaskGenericCreate+0x15c>)
   84208:	681b      	ldr	r3, [r3, #0]
   8420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8420e:	429a      	cmp	r2, r3
   84210:	d802      	bhi.n	84218 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   84212:	4b23      	ldr	r3, [pc, #140]	; (842a0 <xTaskGenericCreate+0x15c>)
   84214:	69ba      	ldr	r2, [r7, #24]
   84216:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   84218:	4b24      	ldr	r3, [pc, #144]	; (842ac <xTaskGenericCreate+0x168>)
   8421a:	681b      	ldr	r3, [r3, #0]
   8421c:	1c5a      	adds	r2, r3, #1
   8421e:	4b23      	ldr	r3, [pc, #140]	; (842ac <xTaskGenericCreate+0x168>)
   84220:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   84222:	69bb      	ldr	r3, [r7, #24]
   84224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84226:	2201      	movs	r2, #1
   84228:	409a      	lsls	r2, r3
   8422a:	4b21      	ldr	r3, [pc, #132]	; (842b0 <xTaskGenericCreate+0x16c>)
   8422c:	681b      	ldr	r3, [r3, #0]
   8422e:	431a      	orrs	r2, r3
   84230:	4b1f      	ldr	r3, [pc, #124]	; (842b0 <xTaskGenericCreate+0x16c>)
   84232:	601a      	str	r2, [r3, #0]
   84234:	69bb      	ldr	r3, [r7, #24]
   84236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84238:	4613      	mov	r3, r2
   8423a:	009b      	lsls	r3, r3, #2
   8423c:	4413      	add	r3, r2
   8423e:	009b      	lsls	r3, r3, #2
   84240:	4a1c      	ldr	r2, [pc, #112]	; (842b4 <xTaskGenericCreate+0x170>)
   84242:	441a      	add	r2, r3
   84244:	69bb      	ldr	r3, [r7, #24]
   84246:	3304      	adds	r3, #4
   84248:	4610      	mov	r0, r2
   8424a:	4619      	mov	r1, r3
   8424c:	4b1a      	ldr	r3, [pc, #104]	; (842b8 <xTaskGenericCreate+0x174>)
   8424e:	4798      	blx	r3

			xReturn = pdPASS;
   84250:	2301      	movs	r3, #1
   84252:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   84254:	4b19      	ldr	r3, [pc, #100]	; (842bc <xTaskGenericCreate+0x178>)
   84256:	4798      	blx	r3
   84258:	e002      	b.n	84260 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8425a:	f04f 33ff 	mov.w	r3, #4294967295
   8425e:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   84260:	69fb      	ldr	r3, [r7, #28]
   84262:	2b01      	cmp	r3, #1
   84264:	d10b      	bne.n	8427e <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   84266:	4b10      	ldr	r3, [pc, #64]	; (842a8 <xTaskGenericCreate+0x164>)
   84268:	681b      	ldr	r3, [r3, #0]
   8426a:	2b00      	cmp	r3, #0
   8426c:	d007      	beq.n	8427e <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8426e:	4b0c      	ldr	r3, [pc, #48]	; (842a0 <xTaskGenericCreate+0x15c>)
   84270:	681b      	ldr	r3, [r3, #0]
   84272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84276:	429a      	cmp	r2, r3
   84278:	d201      	bcs.n	8427e <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   8427a:	4b11      	ldr	r3, [pc, #68]	; (842c0 <xTaskGenericCreate+0x17c>)
   8427c:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   8427e:	69fb      	ldr	r3, [r7, #28]
}
   84280:	4618      	mov	r0, r3
   84282:	3724      	adds	r7, #36	; 0x24
   84284:	46bd      	mov	sp, r7
   84286:	bd90      	pop	{r4, r7, pc}
   84288:	000833d1 	.word	0x000833d1
   8428c:	00084d41 	.word	0x00084d41
   84290:	00084b2d 	.word	0x00084b2d
   84294:	000831ad 	.word	0x000831ad
   84298:	00083355 	.word	0x00083355
   8429c:	2007a5e0 	.word	0x2007a5e0
   842a0:	2007a508 	.word	0x2007a508
   842a4:	00084bc5 	.word	0x00084bc5
   842a8:	2007a5ec 	.word	0x2007a5ec
   842ac:	2007a5fc 	.word	0x2007a5fc
   842b0:	2007a5e8 	.word	0x2007a5e8
   842b4:	2007a50c 	.word	0x2007a50c
   842b8:	000830a1 	.word	0x000830a1
   842bc:	00083399 	.word	0x00083399
   842c0:	00083335 	.word	0x00083335

000842c4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   842c4:	b580      	push	{r7, lr}
   842c6:	b086      	sub	sp, #24
   842c8:	af00      	add	r7, sp, #0
   842ca:	6078      	str	r0, [r7, #4]
   842cc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   842ce:	2300      	movs	r3, #0
   842d0:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   842d2:	687b      	ldr	r3, [r7, #4]
   842d4:	2b00      	cmp	r3, #0
   842d6:	d102      	bne.n	842de <vTaskDelayUntil+0x1a>
   842d8:	4b2f      	ldr	r3, [pc, #188]	; (84398 <vTaskDelayUntil+0xd4>)
   842da:	4798      	blx	r3
   842dc:	e7fe      	b.n	842dc <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   842de:	683b      	ldr	r3, [r7, #0]
   842e0:	2b00      	cmp	r3, #0
   842e2:	d102      	bne.n	842ea <vTaskDelayUntil+0x26>
   842e4:	4b2c      	ldr	r3, [pc, #176]	; (84398 <vTaskDelayUntil+0xd4>)
   842e6:	4798      	blx	r3
   842e8:	e7fe      	b.n	842e8 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   842ea:	4b2c      	ldr	r3, [pc, #176]	; (8439c <vTaskDelayUntil+0xd8>)
   842ec:	681b      	ldr	r3, [r3, #0]
   842ee:	2b00      	cmp	r3, #0
   842f0:	d002      	beq.n	842f8 <vTaskDelayUntil+0x34>
   842f2:	4b29      	ldr	r3, [pc, #164]	; (84398 <vTaskDelayUntil+0xd4>)
   842f4:	4798      	blx	r3
   842f6:	e7fe      	b.n	842f6 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   842f8:	4b29      	ldr	r3, [pc, #164]	; (843a0 <vTaskDelayUntil+0xdc>)
   842fa:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   842fc:	4b29      	ldr	r3, [pc, #164]	; (843a4 <vTaskDelayUntil+0xe0>)
   842fe:	681b      	ldr	r3, [r3, #0]
   84300:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   84302:	687b      	ldr	r3, [r7, #4]
   84304:	681a      	ldr	r2, [r3, #0]
   84306:	683b      	ldr	r3, [r7, #0]
   84308:	4413      	add	r3, r2
   8430a:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   8430c:	687b      	ldr	r3, [r7, #4]
   8430e:	681a      	ldr	r2, [r3, #0]
   84310:	693b      	ldr	r3, [r7, #16]
   84312:	429a      	cmp	r2, r3
   84314:	d90b      	bls.n	8432e <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   84316:	687b      	ldr	r3, [r7, #4]
   84318:	681a      	ldr	r2, [r3, #0]
   8431a:	68fb      	ldr	r3, [r7, #12]
   8431c:	429a      	cmp	r2, r3
   8431e:	d911      	bls.n	84344 <vTaskDelayUntil+0x80>
   84320:	68fa      	ldr	r2, [r7, #12]
   84322:	693b      	ldr	r3, [r7, #16]
   84324:	429a      	cmp	r2, r3
   84326:	d90d      	bls.n	84344 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   84328:	2301      	movs	r3, #1
   8432a:	617b      	str	r3, [r7, #20]
   8432c:	e00a      	b.n	84344 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   8432e:	687b      	ldr	r3, [r7, #4]
   84330:	681a      	ldr	r2, [r3, #0]
   84332:	68fb      	ldr	r3, [r7, #12]
   84334:	429a      	cmp	r2, r3
   84336:	d803      	bhi.n	84340 <vTaskDelayUntil+0x7c>
   84338:	68fa      	ldr	r2, [r7, #12]
   8433a:	693b      	ldr	r3, [r7, #16]
   8433c:	429a      	cmp	r2, r3
   8433e:	d901      	bls.n	84344 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   84340:	2301      	movs	r3, #1
   84342:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   84344:	687b      	ldr	r3, [r7, #4]
   84346:	68fa      	ldr	r2, [r7, #12]
   84348:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   8434a:	697b      	ldr	r3, [r7, #20]
   8434c:	2b00      	cmp	r3, #0
   8434e:	d017      	beq.n	84380 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84350:	4b15      	ldr	r3, [pc, #84]	; (843a8 <vTaskDelayUntil+0xe4>)
   84352:	681b      	ldr	r3, [r3, #0]
   84354:	3304      	adds	r3, #4
   84356:	4618      	mov	r0, r3
   84358:	4b14      	ldr	r3, [pc, #80]	; (843ac <vTaskDelayUntil+0xe8>)
   8435a:	4798      	blx	r3
   8435c:	4603      	mov	r3, r0
   8435e:	2b00      	cmp	r3, #0
   84360:	d10b      	bne.n	8437a <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84362:	4b11      	ldr	r3, [pc, #68]	; (843a8 <vTaskDelayUntil+0xe4>)
   84364:	681b      	ldr	r3, [r3, #0]
   84366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84368:	2201      	movs	r2, #1
   8436a:	fa02 f303 	lsl.w	r3, r2, r3
   8436e:	43da      	mvns	r2, r3
   84370:	4b0f      	ldr	r3, [pc, #60]	; (843b0 <vTaskDelayUntil+0xec>)
   84372:	681b      	ldr	r3, [r3, #0]
   84374:	401a      	ands	r2, r3
   84376:	4b0e      	ldr	r3, [pc, #56]	; (843b0 <vTaskDelayUntil+0xec>)
   84378:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8437a:	68f8      	ldr	r0, [r7, #12]
   8437c:	4b0d      	ldr	r3, [pc, #52]	; (843b4 <vTaskDelayUntil+0xf0>)
   8437e:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   84380:	4b0d      	ldr	r3, [pc, #52]	; (843b8 <vTaskDelayUntil+0xf4>)
   84382:	4798      	blx	r3
   84384:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   84386:	68bb      	ldr	r3, [r7, #8]
   84388:	2b00      	cmp	r3, #0
   8438a:	d101      	bne.n	84390 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   8438c:	4b0b      	ldr	r3, [pc, #44]	; (843bc <vTaskDelayUntil+0xf8>)
   8438e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84390:	3718      	adds	r7, #24
   84392:	46bd      	mov	sp, r7
   84394:	bd80      	pop	{r7, pc}
   84396:	bf00      	nop
   84398:	000833d1 	.word	0x000833d1
   8439c:	2007a600 	.word	0x2007a600
   843a0:	00084441 	.word	0x00084441
   843a4:	2007a5e4 	.word	0x2007a5e4
   843a8:	2007a508 	.word	0x2007a508
   843ac:	00083159 	.word	0x00083159
   843b0:	2007a5e8 	.word	0x2007a5e8
   843b4:	00084cd1 	.word	0x00084cd1
   843b8:	0008445d 	.word	0x0008445d
   843bc:	00083335 	.word	0x00083335

000843c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   843c0:	b590      	push	{r4, r7, lr}
   843c2:	b087      	sub	sp, #28
   843c4:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   843c6:	2300      	movs	r3, #0
   843c8:	9300      	str	r3, [sp, #0]
   843ca:	2300      	movs	r3, #0
   843cc:	9301      	str	r3, [sp, #4]
   843ce:	2300      	movs	r3, #0
   843d0:	9302      	str	r3, [sp, #8]
   843d2:	2300      	movs	r3, #0
   843d4:	9303      	str	r3, [sp, #12]
   843d6:	4812      	ldr	r0, [pc, #72]	; (84420 <vTaskStartScheduler+0x60>)
   843d8:	4912      	ldr	r1, [pc, #72]	; (84424 <vTaskStartScheduler+0x64>)
   843da:	2282      	movs	r2, #130	; 0x82
   843dc:	2300      	movs	r3, #0
   843de:	4c12      	ldr	r4, [pc, #72]	; (84428 <vTaskStartScheduler+0x68>)
   843e0:	47a0      	blx	r4
   843e2:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   843e4:	687b      	ldr	r3, [r7, #4]
   843e6:	2b01      	cmp	r3, #1
   843e8:	d102      	bne.n	843f0 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   843ea:	4b10      	ldr	r3, [pc, #64]	; (8442c <vTaskStartScheduler+0x6c>)
   843ec:	4798      	blx	r3
   843ee:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   843f0:	687b      	ldr	r3, [r7, #4]
   843f2:	2b01      	cmp	r3, #1
   843f4:	d10a      	bne.n	8440c <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   843f6:	4b0e      	ldr	r3, [pc, #56]	; (84430 <vTaskStartScheduler+0x70>)
   843f8:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   843fa:	4b0e      	ldr	r3, [pc, #56]	; (84434 <vTaskStartScheduler+0x74>)
   843fc:	2201      	movs	r2, #1
   843fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   84400:	4b0d      	ldr	r3, [pc, #52]	; (84438 <vTaskStartScheduler+0x78>)
   84402:	2200      	movs	r2, #0
   84404:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   84406:	4b0d      	ldr	r3, [pc, #52]	; (8443c <vTaskStartScheduler+0x7c>)
   84408:	4798      	blx	r3
   8440a:	e005      	b.n	84418 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   8440c:	687b      	ldr	r3, [r7, #4]
   8440e:	2b00      	cmp	r3, #0
   84410:	d102      	bne.n	84418 <vTaskStartScheduler+0x58>
   84412:	4b07      	ldr	r3, [pc, #28]	; (84430 <vTaskStartScheduler+0x70>)
   84414:	4798      	blx	r3
   84416:	e7fe      	b.n	84416 <vTaskStartScheduler+0x56>
	}
}
   84418:	370c      	adds	r7, #12
   8441a:	46bd      	mov	sp, r7
   8441c:	bd90      	pop	{r4, r7, pc}
   8441e:	bf00      	nop
   84420:	00084b05 	.word	0x00084b05
   84424:	00086f1c 	.word	0x00086f1c
   84428:	00084145 	.word	0x00084145
   8442c:	00085059 	.word	0x00085059
   84430:	000833d1 	.word	0x000833d1
   84434:	2007a5ec 	.word	0x2007a5ec
   84438:	2007a5e4 	.word	0x2007a5e4
   8443c:	0008326d 	.word	0x0008326d

00084440 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   84440:	b480      	push	{r7}
   84442:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   84444:	4b04      	ldr	r3, [pc, #16]	; (84458 <vTaskSuspendAll+0x18>)
   84446:	681b      	ldr	r3, [r3, #0]
   84448:	1c5a      	adds	r2, r3, #1
   8444a:	4b03      	ldr	r3, [pc, #12]	; (84458 <vTaskSuspendAll+0x18>)
   8444c:	601a      	str	r2, [r3, #0]
}
   8444e:	46bd      	mov	sp, r7
   84450:	f85d 7b04 	ldr.w	r7, [sp], #4
   84454:	4770      	bx	lr
   84456:	bf00      	nop
   84458:	2007a600 	.word	0x2007a600

0008445c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   8445c:	b580      	push	{r7, lr}
   8445e:	b082      	sub	sp, #8
   84460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   84462:	2300      	movs	r3, #0
   84464:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   84466:	4b37      	ldr	r3, [pc, #220]	; (84544 <xTaskResumeAll+0xe8>)
   84468:	681b      	ldr	r3, [r3, #0]
   8446a:	2b00      	cmp	r3, #0
   8446c:	d102      	bne.n	84474 <xTaskResumeAll+0x18>
   8446e:	4b36      	ldr	r3, [pc, #216]	; (84548 <xTaskResumeAll+0xec>)
   84470:	4798      	blx	r3
   84472:	e7fe      	b.n	84472 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   84474:	4b35      	ldr	r3, [pc, #212]	; (8454c <xTaskResumeAll+0xf0>)
   84476:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   84478:	4b32      	ldr	r3, [pc, #200]	; (84544 <xTaskResumeAll+0xe8>)
   8447a:	681b      	ldr	r3, [r3, #0]
   8447c:	1e5a      	subs	r2, r3, #1
   8447e:	4b31      	ldr	r3, [pc, #196]	; (84544 <xTaskResumeAll+0xe8>)
   84480:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84482:	4b30      	ldr	r3, [pc, #192]	; (84544 <xTaskResumeAll+0xe8>)
   84484:	681b      	ldr	r3, [r3, #0]
   84486:	2b00      	cmp	r3, #0
   84488:	d155      	bne.n	84536 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   8448a:	4b31      	ldr	r3, [pc, #196]	; (84550 <xTaskResumeAll+0xf4>)
   8448c:	681b      	ldr	r3, [r3, #0]
   8448e:	2b00      	cmp	r3, #0
   84490:	d051      	beq.n	84536 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84492:	e02e      	b.n	844f2 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   84494:	4b2f      	ldr	r3, [pc, #188]	; (84554 <xTaskResumeAll+0xf8>)
   84496:	68db      	ldr	r3, [r3, #12]
   84498:	68db      	ldr	r3, [r3, #12]
   8449a:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8449c:	683b      	ldr	r3, [r7, #0]
   8449e:	3318      	adds	r3, #24
   844a0:	4618      	mov	r0, r3
   844a2:	4b2d      	ldr	r3, [pc, #180]	; (84558 <xTaskResumeAll+0xfc>)
   844a4:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   844a6:	683b      	ldr	r3, [r7, #0]
   844a8:	3304      	adds	r3, #4
   844aa:	4618      	mov	r0, r3
   844ac:	4b2a      	ldr	r3, [pc, #168]	; (84558 <xTaskResumeAll+0xfc>)
   844ae:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   844b0:	683b      	ldr	r3, [r7, #0]
   844b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   844b4:	2201      	movs	r2, #1
   844b6:	409a      	lsls	r2, r3
   844b8:	4b28      	ldr	r3, [pc, #160]	; (8455c <xTaskResumeAll+0x100>)
   844ba:	681b      	ldr	r3, [r3, #0]
   844bc:	431a      	orrs	r2, r3
   844be:	4b27      	ldr	r3, [pc, #156]	; (8455c <xTaskResumeAll+0x100>)
   844c0:	601a      	str	r2, [r3, #0]
   844c2:	683b      	ldr	r3, [r7, #0]
   844c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   844c6:	4613      	mov	r3, r2
   844c8:	009b      	lsls	r3, r3, #2
   844ca:	4413      	add	r3, r2
   844cc:	009b      	lsls	r3, r3, #2
   844ce:	4a24      	ldr	r2, [pc, #144]	; (84560 <xTaskResumeAll+0x104>)
   844d0:	441a      	add	r2, r3
   844d2:	683b      	ldr	r3, [r7, #0]
   844d4:	3304      	adds	r3, #4
   844d6:	4610      	mov	r0, r2
   844d8:	4619      	mov	r1, r3
   844da:	4b22      	ldr	r3, [pc, #136]	; (84564 <xTaskResumeAll+0x108>)
   844dc:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   844de:	683b      	ldr	r3, [r7, #0]
   844e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   844e2:	4b21      	ldr	r3, [pc, #132]	; (84568 <xTaskResumeAll+0x10c>)
   844e4:	681b      	ldr	r3, [r3, #0]
   844e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   844e8:	429a      	cmp	r2, r3
   844ea:	d302      	bcc.n	844f2 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   844ec:	4b1f      	ldr	r3, [pc, #124]	; (8456c <xTaskResumeAll+0x110>)
   844ee:	2201      	movs	r2, #1
   844f0:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   844f2:	4b18      	ldr	r3, [pc, #96]	; (84554 <xTaskResumeAll+0xf8>)
   844f4:	681b      	ldr	r3, [r3, #0]
   844f6:	2b00      	cmp	r3, #0
   844f8:	d1cc      	bne.n	84494 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   844fa:	4b1d      	ldr	r3, [pc, #116]	; (84570 <xTaskResumeAll+0x114>)
   844fc:	681b      	ldr	r3, [r3, #0]
   844fe:	2b00      	cmp	r3, #0
   84500:	d011      	beq.n	84526 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   84502:	e00c      	b.n	8451e <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   84504:	4b1b      	ldr	r3, [pc, #108]	; (84574 <xTaskResumeAll+0x118>)
   84506:	4798      	blx	r3
   84508:	4603      	mov	r3, r0
   8450a:	2b00      	cmp	r3, #0
   8450c:	d002      	beq.n	84514 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   8450e:	4b17      	ldr	r3, [pc, #92]	; (8456c <xTaskResumeAll+0x110>)
   84510:	2201      	movs	r2, #1
   84512:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   84514:	4b16      	ldr	r3, [pc, #88]	; (84570 <xTaskResumeAll+0x114>)
   84516:	681b      	ldr	r3, [r3, #0]
   84518:	1e5a      	subs	r2, r3, #1
   8451a:	4b15      	ldr	r3, [pc, #84]	; (84570 <xTaskResumeAll+0x114>)
   8451c:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   8451e:	4b14      	ldr	r3, [pc, #80]	; (84570 <xTaskResumeAll+0x114>)
   84520:	681b      	ldr	r3, [r3, #0]
   84522:	2b00      	cmp	r3, #0
   84524:	d1ee      	bne.n	84504 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   84526:	4b11      	ldr	r3, [pc, #68]	; (8456c <xTaskResumeAll+0x110>)
   84528:	681b      	ldr	r3, [r3, #0]
   8452a:	2b01      	cmp	r3, #1
   8452c:	d103      	bne.n	84536 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   8452e:	2301      	movs	r3, #1
   84530:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   84532:	4b11      	ldr	r3, [pc, #68]	; (84578 <xTaskResumeAll+0x11c>)
   84534:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   84536:	4b11      	ldr	r3, [pc, #68]	; (8457c <xTaskResumeAll+0x120>)
   84538:	4798      	blx	r3

	return xAlreadyYielded;
   8453a:	687b      	ldr	r3, [r7, #4]
}
   8453c:	4618      	mov	r0, r3
   8453e:	3708      	adds	r7, #8
   84540:	46bd      	mov	sp, r7
   84542:	bd80      	pop	{r7, pc}
   84544:	2007a600 	.word	0x2007a600
   84548:	000833d1 	.word	0x000833d1
   8454c:	00083355 	.word	0x00083355
   84550:	2007a5e0 	.word	0x2007a5e0
   84554:	2007a5a0 	.word	0x2007a5a0
   84558:	00083159 	.word	0x00083159
   8455c:	2007a5e8 	.word	0x2007a5e8
   84560:	2007a50c 	.word	0x2007a50c
   84564:	000830a1 	.word	0x000830a1
   84568:	2007a508 	.word	0x2007a508
   8456c:	2007a5f4 	.word	0x2007a5f4
   84570:	2007a5f0 	.word	0x2007a5f0
   84574:	000845ad 	.word	0x000845ad
   84578:	00083335 	.word	0x00083335
   8457c:	00083399 	.word	0x00083399

00084580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   84580:	b580      	push	{r7, lr}
   84582:	b082      	sub	sp, #8
   84584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   84586:	4b06      	ldr	r3, [pc, #24]	; (845a0 <xTaskGetTickCount+0x20>)
   84588:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8458a:	4b06      	ldr	r3, [pc, #24]	; (845a4 <xTaskGetTickCount+0x24>)
   8458c:	681b      	ldr	r3, [r3, #0]
   8458e:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   84590:	4b05      	ldr	r3, [pc, #20]	; (845a8 <xTaskGetTickCount+0x28>)
   84592:	4798      	blx	r3

	return xTicks;
   84594:	687b      	ldr	r3, [r7, #4]
}
   84596:	4618      	mov	r0, r3
   84598:	3708      	adds	r7, #8
   8459a:	46bd      	mov	sp, r7
   8459c:	bd80      	pop	{r7, pc}
   8459e:	bf00      	nop
   845a0:	00083355 	.word	0x00083355
   845a4:	2007a5e4 	.word	0x2007a5e4
   845a8:	00083399 	.word	0x00083399

000845ac <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   845ac:	b580      	push	{r7, lr}
   845ae:	b086      	sub	sp, #24
   845b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   845b2:	2300      	movs	r3, #0
   845b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   845b6:	4b4d      	ldr	r3, [pc, #308]	; (846ec <xTaskIncrementTick+0x140>)
   845b8:	681b      	ldr	r3, [r3, #0]
   845ba:	2b00      	cmp	r3, #0
   845bc:	f040 8086 	bne.w	846cc <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   845c0:	4b4b      	ldr	r3, [pc, #300]	; (846f0 <xTaskIncrementTick+0x144>)
   845c2:	681b      	ldr	r3, [r3, #0]
   845c4:	1c5a      	adds	r2, r3, #1
   845c6:	4b4a      	ldr	r3, [pc, #296]	; (846f0 <xTaskIncrementTick+0x144>)
   845c8:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   845ca:	4b49      	ldr	r3, [pc, #292]	; (846f0 <xTaskIncrementTick+0x144>)
   845cc:	681b      	ldr	r3, [r3, #0]
   845ce:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   845d0:	693b      	ldr	r3, [r7, #16]
   845d2:	2b00      	cmp	r3, #0
   845d4:	d118      	bne.n	84608 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   845d6:	4b47      	ldr	r3, [pc, #284]	; (846f4 <xTaskIncrementTick+0x148>)
   845d8:	681b      	ldr	r3, [r3, #0]
   845da:	681b      	ldr	r3, [r3, #0]
   845dc:	2b00      	cmp	r3, #0
   845de:	d002      	beq.n	845e6 <xTaskIncrementTick+0x3a>
   845e0:	4b45      	ldr	r3, [pc, #276]	; (846f8 <xTaskIncrementTick+0x14c>)
   845e2:	4798      	blx	r3
   845e4:	e7fe      	b.n	845e4 <xTaskIncrementTick+0x38>
   845e6:	4b43      	ldr	r3, [pc, #268]	; (846f4 <xTaskIncrementTick+0x148>)
   845e8:	681b      	ldr	r3, [r3, #0]
   845ea:	60fb      	str	r3, [r7, #12]
   845ec:	4b43      	ldr	r3, [pc, #268]	; (846fc <xTaskIncrementTick+0x150>)
   845ee:	681a      	ldr	r2, [r3, #0]
   845f0:	4b40      	ldr	r3, [pc, #256]	; (846f4 <xTaskIncrementTick+0x148>)
   845f2:	601a      	str	r2, [r3, #0]
   845f4:	4b41      	ldr	r3, [pc, #260]	; (846fc <xTaskIncrementTick+0x150>)
   845f6:	68fa      	ldr	r2, [r7, #12]
   845f8:	601a      	str	r2, [r3, #0]
   845fa:	4b41      	ldr	r3, [pc, #260]	; (84700 <xTaskIncrementTick+0x154>)
   845fc:	681b      	ldr	r3, [r3, #0]
   845fe:	1c5a      	adds	r2, r3, #1
   84600:	4b3f      	ldr	r3, [pc, #252]	; (84700 <xTaskIncrementTick+0x154>)
   84602:	601a      	str	r2, [r3, #0]
   84604:	4b3f      	ldr	r3, [pc, #252]	; (84704 <xTaskIncrementTick+0x158>)
   84606:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   84608:	4b3f      	ldr	r3, [pc, #252]	; (84708 <xTaskIncrementTick+0x15c>)
   8460a:	681b      	ldr	r3, [r3, #0]
   8460c:	693a      	ldr	r2, [r7, #16]
   8460e:	429a      	cmp	r2, r3
   84610:	d34d      	bcc.n	846ae <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84612:	4b38      	ldr	r3, [pc, #224]	; (846f4 <xTaskIncrementTick+0x148>)
   84614:	681b      	ldr	r3, [r3, #0]
   84616:	681b      	ldr	r3, [r3, #0]
   84618:	2b00      	cmp	r3, #0
   8461a:	d101      	bne.n	84620 <xTaskIncrementTick+0x74>
   8461c:	2301      	movs	r3, #1
   8461e:	e000      	b.n	84622 <xTaskIncrementTick+0x76>
   84620:	2300      	movs	r3, #0
   84622:	2b00      	cmp	r3, #0
   84624:	d004      	beq.n	84630 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   84626:	4b38      	ldr	r3, [pc, #224]	; (84708 <xTaskIncrementTick+0x15c>)
   84628:	f04f 32ff 	mov.w	r2, #4294967295
   8462c:	601a      	str	r2, [r3, #0]
						break;
   8462e:	e03e      	b.n	846ae <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84630:	4b30      	ldr	r3, [pc, #192]	; (846f4 <xTaskIncrementTick+0x148>)
   84632:	681b      	ldr	r3, [r3, #0]
   84634:	68db      	ldr	r3, [r3, #12]
   84636:	68db      	ldr	r3, [r3, #12]
   84638:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8463a:	68bb      	ldr	r3, [r7, #8]
   8463c:	685b      	ldr	r3, [r3, #4]
   8463e:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   84640:	693a      	ldr	r2, [r7, #16]
   84642:	687b      	ldr	r3, [r7, #4]
   84644:	429a      	cmp	r2, r3
   84646:	d203      	bcs.n	84650 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   84648:	4b2f      	ldr	r3, [pc, #188]	; (84708 <xTaskIncrementTick+0x15c>)
   8464a:	687a      	ldr	r2, [r7, #4]
   8464c:	601a      	str	r2, [r3, #0]
							break;
   8464e:	e02e      	b.n	846ae <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84650:	68bb      	ldr	r3, [r7, #8]
   84652:	3304      	adds	r3, #4
   84654:	4618      	mov	r0, r3
   84656:	4b2d      	ldr	r3, [pc, #180]	; (8470c <xTaskIncrementTick+0x160>)
   84658:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   8465a:	68bb      	ldr	r3, [r7, #8]
   8465c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8465e:	2b00      	cmp	r3, #0
   84660:	d004      	beq.n	8466c <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84662:	68bb      	ldr	r3, [r7, #8]
   84664:	3318      	adds	r3, #24
   84666:	4618      	mov	r0, r3
   84668:	4b28      	ldr	r3, [pc, #160]	; (8470c <xTaskIncrementTick+0x160>)
   8466a:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   8466c:	68bb      	ldr	r3, [r7, #8]
   8466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84670:	2201      	movs	r2, #1
   84672:	409a      	lsls	r2, r3
   84674:	4b26      	ldr	r3, [pc, #152]	; (84710 <xTaskIncrementTick+0x164>)
   84676:	681b      	ldr	r3, [r3, #0]
   84678:	431a      	orrs	r2, r3
   8467a:	4b25      	ldr	r3, [pc, #148]	; (84710 <xTaskIncrementTick+0x164>)
   8467c:	601a      	str	r2, [r3, #0]
   8467e:	68bb      	ldr	r3, [r7, #8]
   84680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84682:	4613      	mov	r3, r2
   84684:	009b      	lsls	r3, r3, #2
   84686:	4413      	add	r3, r2
   84688:	009b      	lsls	r3, r3, #2
   8468a:	4a22      	ldr	r2, [pc, #136]	; (84714 <xTaskIncrementTick+0x168>)
   8468c:	441a      	add	r2, r3
   8468e:	68bb      	ldr	r3, [r7, #8]
   84690:	3304      	adds	r3, #4
   84692:	4610      	mov	r0, r2
   84694:	4619      	mov	r1, r3
   84696:	4b20      	ldr	r3, [pc, #128]	; (84718 <xTaskIncrementTick+0x16c>)
   84698:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8469a:	68bb      	ldr	r3, [r7, #8]
   8469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8469e:	4b1f      	ldr	r3, [pc, #124]	; (8471c <xTaskIncrementTick+0x170>)
   846a0:	681b      	ldr	r3, [r3, #0]
   846a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   846a4:	429a      	cmp	r2, r3
   846a6:	d301      	bcc.n	846ac <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   846a8:	2301      	movs	r3, #1
   846aa:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   846ac:	e7b1      	b.n	84612 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   846ae:	4b1b      	ldr	r3, [pc, #108]	; (8471c <xTaskIncrementTick+0x170>)
   846b0:	681b      	ldr	r3, [r3, #0]
   846b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   846b4:	4917      	ldr	r1, [pc, #92]	; (84714 <xTaskIncrementTick+0x168>)
   846b6:	4613      	mov	r3, r2
   846b8:	009b      	lsls	r3, r3, #2
   846ba:	4413      	add	r3, r2
   846bc:	009b      	lsls	r3, r3, #2
   846be:	440b      	add	r3, r1
   846c0:	681b      	ldr	r3, [r3, #0]
   846c2:	2b01      	cmp	r3, #1
   846c4:	d907      	bls.n	846d6 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   846c6:	2301      	movs	r3, #1
   846c8:	617b      	str	r3, [r7, #20]
   846ca:	e004      	b.n	846d6 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   846cc:	4b14      	ldr	r3, [pc, #80]	; (84720 <xTaskIncrementTick+0x174>)
   846ce:	681b      	ldr	r3, [r3, #0]
   846d0:	1c5a      	adds	r2, r3, #1
   846d2:	4b13      	ldr	r3, [pc, #76]	; (84720 <xTaskIncrementTick+0x174>)
   846d4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   846d6:	4b13      	ldr	r3, [pc, #76]	; (84724 <xTaskIncrementTick+0x178>)
   846d8:	681b      	ldr	r3, [r3, #0]
   846da:	2b00      	cmp	r3, #0
   846dc:	d001      	beq.n	846e2 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   846de:	2301      	movs	r3, #1
   846e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   846e2:	697b      	ldr	r3, [r7, #20]
}
   846e4:	4618      	mov	r0, r3
   846e6:	3718      	adds	r7, #24
   846e8:	46bd      	mov	sp, r7
   846ea:	bd80      	pop	{r7, pc}
   846ec:	2007a600 	.word	0x2007a600
   846f0:	2007a5e4 	.word	0x2007a5e4
   846f4:	2007a598 	.word	0x2007a598
   846f8:	000833d1 	.word	0x000833d1
   846fc:	2007a59c 	.word	0x2007a59c
   84700:	2007a5f8 	.word	0x2007a5f8
   84704:	00084dd5 	.word	0x00084dd5
   84708:	20070008 	.word	0x20070008
   8470c:	00083159 	.word	0x00083159
   84710:	2007a5e8 	.word	0x2007a5e8
   84714:	2007a50c 	.word	0x2007a50c
   84718:	000830a1 	.word	0x000830a1
   8471c:	2007a508 	.word	0x2007a508
   84720:	2007a5f0 	.word	0x2007a5f0
   84724:	2007a5f4 	.word	0x2007a5f4

00084728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   84728:	b580      	push	{r7, lr}
   8472a:	b084      	sub	sp, #16
   8472c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   8472e:	4b34      	ldr	r3, [pc, #208]	; (84800 <vTaskSwitchContext+0xd8>)
   84730:	681b      	ldr	r3, [r3, #0]
   84732:	2b00      	cmp	r3, #0
   84734:	d003      	beq.n	8473e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   84736:	4b33      	ldr	r3, [pc, #204]	; (84804 <vTaskSwitchContext+0xdc>)
   84738:	2201      	movs	r2, #1
   8473a:	601a      	str	r2, [r3, #0]
   8473c:	e05c      	b.n	847f8 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   8473e:	4b31      	ldr	r3, [pc, #196]	; (84804 <vTaskSwitchContext+0xdc>)
   84740:	2200      	movs	r2, #0
   84742:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   84744:	4b30      	ldr	r3, [pc, #192]	; (84808 <vTaskSwitchContext+0xe0>)
   84746:	681b      	ldr	r3, [r3, #0]
   84748:	681a      	ldr	r2, [r3, #0]
   8474a:	4b2f      	ldr	r3, [pc, #188]	; (84808 <vTaskSwitchContext+0xe0>)
   8474c:	681b      	ldr	r3, [r3, #0]
   8474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84750:	429a      	cmp	r2, r3
   84752:	d808      	bhi.n	84766 <vTaskSwitchContext+0x3e>
   84754:	4b2c      	ldr	r3, [pc, #176]	; (84808 <vTaskSwitchContext+0xe0>)
   84756:	681a      	ldr	r2, [r3, #0]
   84758:	4b2b      	ldr	r3, [pc, #172]	; (84808 <vTaskSwitchContext+0xe0>)
   8475a:	681b      	ldr	r3, [r3, #0]
   8475c:	3334      	adds	r3, #52	; 0x34
   8475e:	4610      	mov	r0, r2
   84760:	4619      	mov	r1, r3
   84762:	4b2a      	ldr	r3, [pc, #168]	; (8480c <vTaskSwitchContext+0xe4>)
   84764:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   84766:	4b28      	ldr	r3, [pc, #160]	; (84808 <vTaskSwitchContext+0xe0>)
   84768:	681b      	ldr	r3, [r3, #0]
   8476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8476c:	4618      	mov	r0, r3
   8476e:	4928      	ldr	r1, [pc, #160]	; (84810 <vTaskSwitchContext+0xe8>)
   84770:	2214      	movs	r2, #20
   84772:	4b28      	ldr	r3, [pc, #160]	; (84814 <vTaskSwitchContext+0xec>)
   84774:	4798      	blx	r3
   84776:	4603      	mov	r3, r0
   84778:	2b00      	cmp	r3, #0
   8477a:	d008      	beq.n	8478e <vTaskSwitchContext+0x66>
   8477c:	4b22      	ldr	r3, [pc, #136]	; (84808 <vTaskSwitchContext+0xe0>)
   8477e:	681a      	ldr	r2, [r3, #0]
   84780:	4b21      	ldr	r3, [pc, #132]	; (84808 <vTaskSwitchContext+0xe0>)
   84782:	681b      	ldr	r3, [r3, #0]
   84784:	3334      	adds	r3, #52	; 0x34
   84786:	4610      	mov	r0, r2
   84788:	4619      	mov	r1, r3
   8478a:	4b20      	ldr	r3, [pc, #128]	; (8480c <vTaskSwitchContext+0xe4>)
   8478c:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8478e:	4b22      	ldr	r3, [pc, #136]	; (84818 <vTaskSwitchContext+0xf0>)
   84790:	681b      	ldr	r3, [r3, #0]
   84792:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   84794:	687b      	ldr	r3, [r7, #4]
   84796:	fab3 f383 	clz	r3, r3
   8479a:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   8479c:	78fb      	ldrb	r3, [r7, #3]
   8479e:	f1c3 031f 	rsb	r3, r3, #31
   847a2:	60fb      	str	r3, [r7, #12]
   847a4:	491d      	ldr	r1, [pc, #116]	; (8481c <vTaskSwitchContext+0xf4>)
   847a6:	68fa      	ldr	r2, [r7, #12]
   847a8:	4613      	mov	r3, r2
   847aa:	009b      	lsls	r3, r3, #2
   847ac:	4413      	add	r3, r2
   847ae:	009b      	lsls	r3, r3, #2
   847b0:	440b      	add	r3, r1
   847b2:	681b      	ldr	r3, [r3, #0]
   847b4:	2b00      	cmp	r3, #0
   847b6:	d102      	bne.n	847be <vTaskSwitchContext+0x96>
   847b8:	4b19      	ldr	r3, [pc, #100]	; (84820 <vTaskSwitchContext+0xf8>)
   847ba:	4798      	blx	r3
   847bc:	e7fe      	b.n	847bc <vTaskSwitchContext+0x94>
   847be:	68fa      	ldr	r2, [r7, #12]
   847c0:	4613      	mov	r3, r2
   847c2:	009b      	lsls	r3, r3, #2
   847c4:	4413      	add	r3, r2
   847c6:	009b      	lsls	r3, r3, #2
   847c8:	4a14      	ldr	r2, [pc, #80]	; (8481c <vTaskSwitchContext+0xf4>)
   847ca:	4413      	add	r3, r2
   847cc:	60bb      	str	r3, [r7, #8]
   847ce:	68bb      	ldr	r3, [r7, #8]
   847d0:	685b      	ldr	r3, [r3, #4]
   847d2:	685a      	ldr	r2, [r3, #4]
   847d4:	68bb      	ldr	r3, [r7, #8]
   847d6:	605a      	str	r2, [r3, #4]
   847d8:	68bb      	ldr	r3, [r7, #8]
   847da:	685a      	ldr	r2, [r3, #4]
   847dc:	68bb      	ldr	r3, [r7, #8]
   847de:	3308      	adds	r3, #8
   847e0:	429a      	cmp	r2, r3
   847e2:	d104      	bne.n	847ee <vTaskSwitchContext+0xc6>
   847e4:	68bb      	ldr	r3, [r7, #8]
   847e6:	685b      	ldr	r3, [r3, #4]
   847e8:	685a      	ldr	r2, [r3, #4]
   847ea:	68bb      	ldr	r3, [r7, #8]
   847ec:	605a      	str	r2, [r3, #4]
   847ee:	68bb      	ldr	r3, [r7, #8]
   847f0:	685b      	ldr	r3, [r3, #4]
   847f2:	68da      	ldr	r2, [r3, #12]
   847f4:	4b04      	ldr	r3, [pc, #16]	; (84808 <vTaskSwitchContext+0xe0>)
   847f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   847f8:	3710      	adds	r7, #16
   847fa:	46bd      	mov	sp, r7
   847fc:	bd80      	pop	{r7, pc}
   847fe:	bf00      	nop
   84800:	2007a600 	.word	0x2007a600
   84804:	2007a5f4 	.word	0x2007a5f4
   84808:	2007a508 	.word	0x2007a508
   8480c:	00086469 	.word	0x00086469
   84810:	00086f24 	.word	0x00086f24
   84814:	00086add 	.word	0x00086add
   84818:	2007a5e8 	.word	0x2007a5e8
   8481c:	2007a50c 	.word	0x2007a50c
   84820:	000833d1 	.word	0x000833d1

00084824 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   84824:	b580      	push	{r7, lr}
   84826:	b084      	sub	sp, #16
   84828:	af00      	add	r7, sp, #0
   8482a:	6078      	str	r0, [r7, #4]
   8482c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   8482e:	687b      	ldr	r3, [r7, #4]
   84830:	2b00      	cmp	r3, #0
   84832:	d102      	bne.n	8483a <vTaskPlaceOnEventList+0x16>
   84834:	4b1a      	ldr	r3, [pc, #104]	; (848a0 <vTaskPlaceOnEventList+0x7c>)
   84836:	4798      	blx	r3
   84838:	e7fe      	b.n	84838 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   8483a:	4b1a      	ldr	r3, [pc, #104]	; (848a4 <vTaskPlaceOnEventList+0x80>)
   8483c:	681b      	ldr	r3, [r3, #0]
   8483e:	3318      	adds	r3, #24
   84840:	6878      	ldr	r0, [r7, #4]
   84842:	4619      	mov	r1, r3
   84844:	4b18      	ldr	r3, [pc, #96]	; (848a8 <vTaskPlaceOnEventList+0x84>)
   84846:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84848:	4b16      	ldr	r3, [pc, #88]	; (848a4 <vTaskPlaceOnEventList+0x80>)
   8484a:	681b      	ldr	r3, [r3, #0]
   8484c:	3304      	adds	r3, #4
   8484e:	4618      	mov	r0, r3
   84850:	4b16      	ldr	r3, [pc, #88]	; (848ac <vTaskPlaceOnEventList+0x88>)
   84852:	4798      	blx	r3
   84854:	4603      	mov	r3, r0
   84856:	2b00      	cmp	r3, #0
   84858:	d10b      	bne.n	84872 <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8485a:	4b12      	ldr	r3, [pc, #72]	; (848a4 <vTaskPlaceOnEventList+0x80>)
   8485c:	681b      	ldr	r3, [r3, #0]
   8485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84860:	2201      	movs	r2, #1
   84862:	fa02 f303 	lsl.w	r3, r2, r3
   84866:	43da      	mvns	r2, r3
   84868:	4b11      	ldr	r3, [pc, #68]	; (848b0 <vTaskPlaceOnEventList+0x8c>)
   8486a:	681b      	ldr	r3, [r3, #0]
   8486c:	401a      	ands	r2, r3
   8486e:	4b10      	ldr	r3, [pc, #64]	; (848b0 <vTaskPlaceOnEventList+0x8c>)
   84870:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   84872:	683b      	ldr	r3, [r7, #0]
   84874:	f1b3 3fff 	cmp.w	r3, #4294967295
   84878:	d107      	bne.n	8488a <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   8487a:	4b0a      	ldr	r3, [pc, #40]	; (848a4 <vTaskPlaceOnEventList+0x80>)
   8487c:	681b      	ldr	r3, [r3, #0]
   8487e:	3304      	adds	r3, #4
   84880:	480c      	ldr	r0, [pc, #48]	; (848b4 <vTaskPlaceOnEventList+0x90>)
   84882:	4619      	mov	r1, r3
   84884:	4b0c      	ldr	r3, [pc, #48]	; (848b8 <vTaskPlaceOnEventList+0x94>)
   84886:	4798      	blx	r3
   84888:	e007      	b.n	8489a <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   8488a:	4b0c      	ldr	r3, [pc, #48]	; (848bc <vTaskPlaceOnEventList+0x98>)
   8488c:	681a      	ldr	r2, [r3, #0]
   8488e:	683b      	ldr	r3, [r7, #0]
   84890:	4413      	add	r3, r2
   84892:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   84894:	68f8      	ldr	r0, [r7, #12]
   84896:	4b0a      	ldr	r3, [pc, #40]	; (848c0 <vTaskPlaceOnEventList+0x9c>)
   84898:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   8489a:	3710      	adds	r7, #16
   8489c:	46bd      	mov	sp, r7
   8489e:	bd80      	pop	{r7, pc}
   848a0:	000833d1 	.word	0x000833d1
   848a4:	2007a508 	.word	0x2007a508
   848a8:	000830e9 	.word	0x000830e9
   848ac:	00083159 	.word	0x00083159
   848b0:	2007a5e8 	.word	0x2007a5e8
   848b4:	2007a5cc 	.word	0x2007a5cc
   848b8:	000830a1 	.word	0x000830a1
   848bc:	2007a5e4 	.word	0x2007a5e4
   848c0:	00084cd1 	.word	0x00084cd1

000848c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   848c4:	b580      	push	{r7, lr}
   848c6:	b084      	sub	sp, #16
   848c8:	af00      	add	r7, sp, #0
   848ca:	6078      	str	r0, [r7, #4]
   848cc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   848ce:	687b      	ldr	r3, [r7, #4]
   848d0:	2b00      	cmp	r3, #0
   848d2:	d102      	bne.n	848da <vTaskPlaceOnEventListRestricted+0x16>
   848d4:	4b14      	ldr	r3, [pc, #80]	; (84928 <vTaskPlaceOnEventListRestricted+0x64>)
   848d6:	4798      	blx	r3
   848d8:	e7fe      	b.n	848d8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   848da:	4b14      	ldr	r3, [pc, #80]	; (8492c <vTaskPlaceOnEventListRestricted+0x68>)
   848dc:	681b      	ldr	r3, [r3, #0]
   848de:	3318      	adds	r3, #24
   848e0:	6878      	ldr	r0, [r7, #4]
   848e2:	4619      	mov	r1, r3
   848e4:	4b12      	ldr	r3, [pc, #72]	; (84930 <vTaskPlaceOnEventListRestricted+0x6c>)
   848e6:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   848e8:	4b10      	ldr	r3, [pc, #64]	; (8492c <vTaskPlaceOnEventListRestricted+0x68>)
   848ea:	681b      	ldr	r3, [r3, #0]
   848ec:	3304      	adds	r3, #4
   848ee:	4618      	mov	r0, r3
   848f0:	4b10      	ldr	r3, [pc, #64]	; (84934 <vTaskPlaceOnEventListRestricted+0x70>)
   848f2:	4798      	blx	r3
   848f4:	4603      	mov	r3, r0
   848f6:	2b00      	cmp	r3, #0
   848f8:	d10b      	bne.n	84912 <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   848fa:	4b0c      	ldr	r3, [pc, #48]	; (8492c <vTaskPlaceOnEventListRestricted+0x68>)
   848fc:	681b      	ldr	r3, [r3, #0]
   848fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84900:	2201      	movs	r2, #1
   84902:	fa02 f303 	lsl.w	r3, r2, r3
   84906:	43da      	mvns	r2, r3
   84908:	4b0b      	ldr	r3, [pc, #44]	; (84938 <vTaskPlaceOnEventListRestricted+0x74>)
   8490a:	681b      	ldr	r3, [r3, #0]
   8490c:	401a      	ands	r2, r3
   8490e:	4b0a      	ldr	r3, [pc, #40]	; (84938 <vTaskPlaceOnEventListRestricted+0x74>)
   84910:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   84912:	4b0a      	ldr	r3, [pc, #40]	; (8493c <vTaskPlaceOnEventListRestricted+0x78>)
   84914:	681a      	ldr	r2, [r3, #0]
   84916:	683b      	ldr	r3, [r7, #0]
   84918:	4413      	add	r3, r2
   8491a:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   8491c:	68f8      	ldr	r0, [r7, #12]
   8491e:	4b08      	ldr	r3, [pc, #32]	; (84940 <vTaskPlaceOnEventListRestricted+0x7c>)
   84920:	4798      	blx	r3
	}
   84922:	3710      	adds	r7, #16
   84924:	46bd      	mov	sp, r7
   84926:	bd80      	pop	{r7, pc}
   84928:	000833d1 	.word	0x000833d1
   8492c:	2007a508 	.word	0x2007a508
   84930:	000830a1 	.word	0x000830a1
   84934:	00083159 	.word	0x00083159
   84938:	2007a5e8 	.word	0x2007a5e8
   8493c:	2007a5e4 	.word	0x2007a5e4
   84940:	00084cd1 	.word	0x00084cd1

00084944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   84944:	b580      	push	{r7, lr}
   84946:	b084      	sub	sp, #16
   84948:	af00      	add	r7, sp, #0
   8494a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8494c:	687b      	ldr	r3, [r7, #4]
   8494e:	68db      	ldr	r3, [r3, #12]
   84950:	68db      	ldr	r3, [r3, #12]
   84952:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   84954:	68bb      	ldr	r3, [r7, #8]
   84956:	2b00      	cmp	r3, #0
   84958:	d102      	bne.n	84960 <xTaskRemoveFromEventList+0x1c>
   8495a:	4b21      	ldr	r3, [pc, #132]	; (849e0 <xTaskRemoveFromEventList+0x9c>)
   8495c:	4798      	blx	r3
   8495e:	e7fe      	b.n	8495e <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   84960:	68bb      	ldr	r3, [r7, #8]
   84962:	3318      	adds	r3, #24
   84964:	4618      	mov	r0, r3
   84966:	4b1f      	ldr	r3, [pc, #124]	; (849e4 <xTaskRemoveFromEventList+0xa0>)
   84968:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8496a:	4b1f      	ldr	r3, [pc, #124]	; (849e8 <xTaskRemoveFromEventList+0xa4>)
   8496c:	681b      	ldr	r3, [r3, #0]
   8496e:	2b00      	cmp	r3, #0
   84970:	d11c      	bne.n	849ac <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   84972:	68bb      	ldr	r3, [r7, #8]
   84974:	3304      	adds	r3, #4
   84976:	4618      	mov	r0, r3
   84978:	4b1a      	ldr	r3, [pc, #104]	; (849e4 <xTaskRemoveFromEventList+0xa0>)
   8497a:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   8497c:	68bb      	ldr	r3, [r7, #8]
   8497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84980:	2201      	movs	r2, #1
   84982:	409a      	lsls	r2, r3
   84984:	4b19      	ldr	r3, [pc, #100]	; (849ec <xTaskRemoveFromEventList+0xa8>)
   84986:	681b      	ldr	r3, [r3, #0]
   84988:	431a      	orrs	r2, r3
   8498a:	4b18      	ldr	r3, [pc, #96]	; (849ec <xTaskRemoveFromEventList+0xa8>)
   8498c:	601a      	str	r2, [r3, #0]
   8498e:	68bb      	ldr	r3, [r7, #8]
   84990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84992:	4613      	mov	r3, r2
   84994:	009b      	lsls	r3, r3, #2
   84996:	4413      	add	r3, r2
   84998:	009b      	lsls	r3, r3, #2
   8499a:	4a15      	ldr	r2, [pc, #84]	; (849f0 <xTaskRemoveFromEventList+0xac>)
   8499c:	441a      	add	r2, r3
   8499e:	68bb      	ldr	r3, [r7, #8]
   849a0:	3304      	adds	r3, #4
   849a2:	4610      	mov	r0, r2
   849a4:	4619      	mov	r1, r3
   849a6:	4b13      	ldr	r3, [pc, #76]	; (849f4 <xTaskRemoveFromEventList+0xb0>)
   849a8:	4798      	blx	r3
   849aa:	e005      	b.n	849b8 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   849ac:	68bb      	ldr	r3, [r7, #8]
   849ae:	3318      	adds	r3, #24
   849b0:	4811      	ldr	r0, [pc, #68]	; (849f8 <xTaskRemoveFromEventList+0xb4>)
   849b2:	4619      	mov	r1, r3
   849b4:	4b0f      	ldr	r3, [pc, #60]	; (849f4 <xTaskRemoveFromEventList+0xb0>)
   849b6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   849b8:	68bb      	ldr	r3, [r7, #8]
   849ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849bc:	4b0f      	ldr	r3, [pc, #60]	; (849fc <xTaskRemoveFromEventList+0xb8>)
   849be:	681b      	ldr	r3, [r3, #0]
   849c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   849c2:	429a      	cmp	r2, r3
   849c4:	d905      	bls.n	849d2 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   849c6:	2301      	movs	r3, #1
   849c8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   849ca:	4b0d      	ldr	r3, [pc, #52]	; (84a00 <xTaskRemoveFromEventList+0xbc>)
   849cc:	2201      	movs	r2, #1
   849ce:	601a      	str	r2, [r3, #0]
   849d0:	e001      	b.n	849d6 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   849d2:	2300      	movs	r3, #0
   849d4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   849d6:	68fb      	ldr	r3, [r7, #12]
}
   849d8:	4618      	mov	r0, r3
   849da:	3710      	adds	r7, #16
   849dc:	46bd      	mov	sp, r7
   849de:	bd80      	pop	{r7, pc}
   849e0:	000833d1 	.word	0x000833d1
   849e4:	00083159 	.word	0x00083159
   849e8:	2007a600 	.word	0x2007a600
   849ec:	2007a5e8 	.word	0x2007a5e8
   849f0:	2007a50c 	.word	0x2007a50c
   849f4:	000830a1 	.word	0x000830a1
   849f8:	2007a5a0 	.word	0x2007a5a0
   849fc:	2007a508 	.word	0x2007a508
   84a00:	2007a5f4 	.word	0x2007a5f4

00084a04 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   84a04:	b580      	push	{r7, lr}
   84a06:	b082      	sub	sp, #8
   84a08:	af00      	add	r7, sp, #0
   84a0a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   84a0c:	687b      	ldr	r3, [r7, #4]
   84a0e:	2b00      	cmp	r3, #0
   84a10:	d102      	bne.n	84a18 <vTaskSetTimeOutState+0x14>
   84a12:	4b07      	ldr	r3, [pc, #28]	; (84a30 <vTaskSetTimeOutState+0x2c>)
   84a14:	4798      	blx	r3
   84a16:	e7fe      	b.n	84a16 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   84a18:	4b06      	ldr	r3, [pc, #24]	; (84a34 <vTaskSetTimeOutState+0x30>)
   84a1a:	681a      	ldr	r2, [r3, #0]
   84a1c:	687b      	ldr	r3, [r7, #4]
   84a1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   84a20:	4b05      	ldr	r3, [pc, #20]	; (84a38 <vTaskSetTimeOutState+0x34>)
   84a22:	681a      	ldr	r2, [r3, #0]
   84a24:	687b      	ldr	r3, [r7, #4]
   84a26:	605a      	str	r2, [r3, #4]
}
   84a28:	3708      	adds	r7, #8
   84a2a:	46bd      	mov	sp, r7
   84a2c:	bd80      	pop	{r7, pc}
   84a2e:	bf00      	nop
   84a30:	000833d1 	.word	0x000833d1
   84a34:	2007a5f8 	.word	0x2007a5f8
   84a38:	2007a5e4 	.word	0x2007a5e4

00084a3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   84a3c:	b580      	push	{r7, lr}
   84a3e:	b084      	sub	sp, #16
   84a40:	af00      	add	r7, sp, #0
   84a42:	6078      	str	r0, [r7, #4]
   84a44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   84a46:	687b      	ldr	r3, [r7, #4]
   84a48:	2b00      	cmp	r3, #0
   84a4a:	d102      	bne.n	84a52 <xTaskCheckForTimeOut+0x16>
   84a4c:	4b21      	ldr	r3, [pc, #132]	; (84ad4 <xTaskCheckForTimeOut+0x98>)
   84a4e:	4798      	blx	r3
   84a50:	e7fe      	b.n	84a50 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   84a52:	683b      	ldr	r3, [r7, #0]
   84a54:	2b00      	cmp	r3, #0
   84a56:	d102      	bne.n	84a5e <xTaskCheckForTimeOut+0x22>
   84a58:	4b1e      	ldr	r3, [pc, #120]	; (84ad4 <xTaskCheckForTimeOut+0x98>)
   84a5a:	4798      	blx	r3
   84a5c:	e7fe      	b.n	84a5c <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   84a5e:	4b1e      	ldr	r3, [pc, #120]	; (84ad8 <xTaskCheckForTimeOut+0x9c>)
   84a60:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   84a62:	4b1e      	ldr	r3, [pc, #120]	; (84adc <xTaskCheckForTimeOut+0xa0>)
   84a64:	681b      	ldr	r3, [r3, #0]
   84a66:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   84a68:	683b      	ldr	r3, [r7, #0]
   84a6a:	681b      	ldr	r3, [r3, #0]
   84a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
   84a70:	d102      	bne.n	84a78 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   84a72:	2300      	movs	r3, #0
   84a74:	60fb      	str	r3, [r7, #12]
   84a76:	e026      	b.n	84ac6 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   84a78:	687b      	ldr	r3, [r7, #4]
   84a7a:	681a      	ldr	r2, [r3, #0]
   84a7c:	4b18      	ldr	r3, [pc, #96]	; (84ae0 <xTaskCheckForTimeOut+0xa4>)
   84a7e:	681b      	ldr	r3, [r3, #0]
   84a80:	429a      	cmp	r2, r3
   84a82:	d007      	beq.n	84a94 <xTaskCheckForTimeOut+0x58>
   84a84:	687b      	ldr	r3, [r7, #4]
   84a86:	685a      	ldr	r2, [r3, #4]
   84a88:	68bb      	ldr	r3, [r7, #8]
   84a8a:	429a      	cmp	r2, r3
   84a8c:	d802      	bhi.n	84a94 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   84a8e:	2301      	movs	r3, #1
   84a90:	60fb      	str	r3, [r7, #12]
   84a92:	e018      	b.n	84ac6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   84a94:	687b      	ldr	r3, [r7, #4]
   84a96:	685b      	ldr	r3, [r3, #4]
   84a98:	68ba      	ldr	r2, [r7, #8]
   84a9a:	1ad2      	subs	r2, r2, r3
   84a9c:	683b      	ldr	r3, [r7, #0]
   84a9e:	681b      	ldr	r3, [r3, #0]
   84aa0:	429a      	cmp	r2, r3
   84aa2:	d20e      	bcs.n	84ac2 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   84aa4:	683b      	ldr	r3, [r7, #0]
   84aa6:	681a      	ldr	r2, [r3, #0]
   84aa8:	687b      	ldr	r3, [r7, #4]
   84aaa:	6859      	ldr	r1, [r3, #4]
   84aac:	68bb      	ldr	r3, [r7, #8]
   84aae:	1acb      	subs	r3, r1, r3
   84ab0:	441a      	add	r2, r3
   84ab2:	683b      	ldr	r3, [r7, #0]
   84ab4:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   84ab6:	6878      	ldr	r0, [r7, #4]
   84ab8:	4b0a      	ldr	r3, [pc, #40]	; (84ae4 <xTaskCheckForTimeOut+0xa8>)
   84aba:	4798      	blx	r3
			xReturn = pdFALSE;
   84abc:	2300      	movs	r3, #0
   84abe:	60fb      	str	r3, [r7, #12]
   84ac0:	e001      	b.n	84ac6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   84ac2:	2301      	movs	r3, #1
   84ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84ac6:	4b08      	ldr	r3, [pc, #32]	; (84ae8 <xTaskCheckForTimeOut+0xac>)
   84ac8:	4798      	blx	r3

	return xReturn;
   84aca:	68fb      	ldr	r3, [r7, #12]
}
   84acc:	4618      	mov	r0, r3
   84ace:	3710      	adds	r7, #16
   84ad0:	46bd      	mov	sp, r7
   84ad2:	bd80      	pop	{r7, pc}
   84ad4:	000833d1 	.word	0x000833d1
   84ad8:	00083355 	.word	0x00083355
   84adc:	2007a5e4 	.word	0x2007a5e4
   84ae0:	2007a5f8 	.word	0x2007a5f8
   84ae4:	00084a05 	.word	0x00084a05
   84ae8:	00083399 	.word	0x00083399

00084aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   84aec:	b480      	push	{r7}
   84aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   84af0:	4b03      	ldr	r3, [pc, #12]	; (84b00 <vTaskMissedYield+0x14>)
   84af2:	2201      	movs	r2, #1
   84af4:	601a      	str	r2, [r3, #0]
}
   84af6:	46bd      	mov	sp, r7
   84af8:	f85d 7b04 	ldr.w	r7, [sp], #4
   84afc:	4770      	bx	lr
   84afe:	bf00      	nop
   84b00:	2007a5f4 	.word	0x2007a5f4

00084b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   84b04:	b580      	push	{r7, lr}
   84b06:	b082      	sub	sp, #8
   84b08:	af00      	add	r7, sp, #0
   84b0a:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84b0c:	4b04      	ldr	r3, [pc, #16]	; (84b20 <prvIdleTask+0x1c>)
   84b0e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   84b10:	4b04      	ldr	r3, [pc, #16]	; (84b24 <prvIdleTask+0x20>)
   84b12:	681b      	ldr	r3, [r3, #0]
   84b14:	2b01      	cmp	r3, #1
   84b16:	d901      	bls.n	84b1c <prvIdleTask+0x18>
			{
				taskYIELD();
   84b18:	4b03      	ldr	r3, [pc, #12]	; (84b28 <prvIdleTask+0x24>)
   84b1a:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   84b1c:	e7f6      	b.n	84b0c <prvIdleTask+0x8>
   84b1e:	bf00      	nop
   84b20:	00084c45 	.word	0x00084c45
   84b24:	2007a50c 	.word	0x2007a50c
   84b28:	00083335 	.word	0x00083335

00084b2c <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84b2c:	b580      	push	{r7, lr}
   84b2e:	b086      	sub	sp, #24
   84b30:	af00      	add	r7, sp, #0
   84b32:	60f8      	str	r0, [r7, #12]
   84b34:	60b9      	str	r1, [r7, #8]
   84b36:	607a      	str	r2, [r7, #4]
   84b38:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84b3a:	2300      	movs	r3, #0
   84b3c:	617b      	str	r3, [r7, #20]
   84b3e:	e012      	b.n	84b66 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   84b40:	68ba      	ldr	r2, [r7, #8]
   84b42:	697b      	ldr	r3, [r7, #20]
   84b44:	4413      	add	r3, r2
   84b46:	781a      	ldrb	r2, [r3, #0]
   84b48:	68f9      	ldr	r1, [r7, #12]
   84b4a:	697b      	ldr	r3, [r7, #20]
   84b4c:	440b      	add	r3, r1
   84b4e:	3330      	adds	r3, #48	; 0x30
   84b50:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   84b52:	68ba      	ldr	r2, [r7, #8]
   84b54:	697b      	ldr	r3, [r7, #20]
   84b56:	4413      	add	r3, r2
   84b58:	781b      	ldrb	r3, [r3, #0]
   84b5a:	2b00      	cmp	r3, #0
   84b5c:	d100      	bne.n	84b60 <prvInitialiseTCBVariables+0x34>
		{
			break;
   84b5e:	e005      	b.n	84b6c <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84b60:	697b      	ldr	r3, [r7, #20]
   84b62:	3301      	adds	r3, #1
   84b64:	617b      	str	r3, [r7, #20]
   84b66:	697b      	ldr	r3, [r7, #20]
   84b68:	2b09      	cmp	r3, #9
   84b6a:	d9e9      	bls.n	84b40 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   84b6c:	68fb      	ldr	r3, [r7, #12]
   84b6e:	2200      	movs	r2, #0
   84b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   84b74:	687b      	ldr	r3, [r7, #4]
   84b76:	2b04      	cmp	r3, #4
   84b78:	d901      	bls.n	84b7e <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   84b7a:	2304      	movs	r3, #4
   84b7c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   84b7e:	68fb      	ldr	r3, [r7, #12]
   84b80:	687a      	ldr	r2, [r7, #4]
   84b82:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   84b84:	68fb      	ldr	r3, [r7, #12]
   84b86:	687a      	ldr	r2, [r7, #4]
   84b88:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84b8a:	68fb      	ldr	r3, [r7, #12]
   84b8c:	2200      	movs	r2, #0
   84b8e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84b90:	68fb      	ldr	r3, [r7, #12]
   84b92:	3304      	adds	r3, #4
   84b94:	4618      	mov	r0, r3
   84b96:	4b0a      	ldr	r3, [pc, #40]	; (84bc0 <prvInitialiseTCBVariables+0x94>)
   84b98:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84b9a:	68fb      	ldr	r3, [r7, #12]
   84b9c:	3318      	adds	r3, #24
   84b9e:	4618      	mov	r0, r3
   84ba0:	4b07      	ldr	r3, [pc, #28]	; (84bc0 <prvInitialiseTCBVariables+0x94>)
   84ba2:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   84ba4:	68fb      	ldr	r3, [r7, #12]
   84ba6:	68fa      	ldr	r2, [r7, #12]
   84ba8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84baa:	687b      	ldr	r3, [r7, #4]
   84bac:	f1c3 0205 	rsb	r2, r3, #5
   84bb0:	68fb      	ldr	r3, [r7, #12]
   84bb2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   84bb4:	68fb      	ldr	r3, [r7, #12]
   84bb6:	68fa      	ldr	r2, [r7, #12]
   84bb8:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84bba:	3718      	adds	r7, #24
   84bbc:	46bd      	mov	sp, r7
   84bbe:	bd80      	pop	{r7, pc}
   84bc0:	00083089 	.word	0x00083089

00084bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   84bc4:	b580      	push	{r7, lr}
   84bc6:	b082      	sub	sp, #8
   84bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84bca:	2300      	movs	r3, #0
   84bcc:	607b      	str	r3, [r7, #4]
   84bce:	e00c      	b.n	84bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   84bd0:	687a      	ldr	r2, [r7, #4]
   84bd2:	4613      	mov	r3, r2
   84bd4:	009b      	lsls	r3, r3, #2
   84bd6:	4413      	add	r3, r2
   84bd8:	009b      	lsls	r3, r3, #2
   84bda:	4a11      	ldr	r2, [pc, #68]	; (84c20 <prvInitialiseTaskLists+0x5c>)
   84bdc:	4413      	add	r3, r2
   84bde:	4618      	mov	r0, r3
   84be0:	4b10      	ldr	r3, [pc, #64]	; (84c24 <prvInitialiseTaskLists+0x60>)
   84be2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84be4:	687b      	ldr	r3, [r7, #4]
   84be6:	3301      	adds	r3, #1
   84be8:	607b      	str	r3, [r7, #4]
   84bea:	687b      	ldr	r3, [r7, #4]
   84bec:	2b04      	cmp	r3, #4
   84bee:	d9ef      	bls.n	84bd0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   84bf0:	480d      	ldr	r0, [pc, #52]	; (84c28 <prvInitialiseTaskLists+0x64>)
   84bf2:	4b0c      	ldr	r3, [pc, #48]	; (84c24 <prvInitialiseTaskLists+0x60>)
   84bf4:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   84bf6:	480d      	ldr	r0, [pc, #52]	; (84c2c <prvInitialiseTaskLists+0x68>)
   84bf8:	4b0a      	ldr	r3, [pc, #40]	; (84c24 <prvInitialiseTaskLists+0x60>)
   84bfa:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84bfc:	480c      	ldr	r0, [pc, #48]	; (84c30 <prvInitialiseTaskLists+0x6c>)
   84bfe:	4b09      	ldr	r3, [pc, #36]	; (84c24 <prvInitialiseTaskLists+0x60>)
   84c00:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   84c02:	480c      	ldr	r0, [pc, #48]	; (84c34 <prvInitialiseTaskLists+0x70>)
   84c04:	4b07      	ldr	r3, [pc, #28]	; (84c24 <prvInitialiseTaskLists+0x60>)
   84c06:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84c08:	480b      	ldr	r0, [pc, #44]	; (84c38 <prvInitialiseTaskLists+0x74>)
   84c0a:	4b06      	ldr	r3, [pc, #24]	; (84c24 <prvInitialiseTaskLists+0x60>)
   84c0c:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84c0e:	4b0b      	ldr	r3, [pc, #44]	; (84c3c <prvInitialiseTaskLists+0x78>)
   84c10:	4a05      	ldr	r2, [pc, #20]	; (84c28 <prvInitialiseTaskLists+0x64>)
   84c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   84c14:	4b0a      	ldr	r3, [pc, #40]	; (84c40 <prvInitialiseTaskLists+0x7c>)
   84c16:	4a05      	ldr	r2, [pc, #20]	; (84c2c <prvInitialiseTaskLists+0x68>)
   84c18:	601a      	str	r2, [r3, #0]
}
   84c1a:	3708      	adds	r7, #8
   84c1c:	46bd      	mov	sp, r7
   84c1e:	bd80      	pop	{r7, pc}
   84c20:	2007a50c 	.word	0x2007a50c
   84c24:	00083049 	.word	0x00083049
   84c28:	2007a570 	.word	0x2007a570
   84c2c:	2007a584 	.word	0x2007a584
   84c30:	2007a5a0 	.word	0x2007a5a0
   84c34:	2007a5b4 	.word	0x2007a5b4
   84c38:	2007a5cc 	.word	0x2007a5cc
   84c3c:	2007a598 	.word	0x2007a598
   84c40:	2007a59c 	.word	0x2007a59c

00084c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   84c44:	b580      	push	{r7, lr}
   84c46:	b082      	sub	sp, #8
   84c48:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84c4a:	e028      	b.n	84c9e <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   84c4c:	4b17      	ldr	r3, [pc, #92]	; (84cac <prvCheckTasksWaitingTermination+0x68>)
   84c4e:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   84c50:	4b17      	ldr	r3, [pc, #92]	; (84cb0 <prvCheckTasksWaitingTermination+0x6c>)
   84c52:	681b      	ldr	r3, [r3, #0]
   84c54:	2b00      	cmp	r3, #0
   84c56:	bf14      	ite	ne
   84c58:	2300      	movne	r3, #0
   84c5a:	2301      	moveq	r3, #1
   84c5c:	b2db      	uxtb	r3, r3
   84c5e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   84c60:	4b14      	ldr	r3, [pc, #80]	; (84cb4 <prvCheckTasksWaitingTermination+0x70>)
   84c62:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   84c64:	687b      	ldr	r3, [r7, #4]
   84c66:	2b00      	cmp	r3, #0
   84c68:	d119      	bne.n	84c9e <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   84c6a:	4b13      	ldr	r3, [pc, #76]	; (84cb8 <prvCheckTasksWaitingTermination+0x74>)
   84c6c:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   84c6e:	4b10      	ldr	r3, [pc, #64]	; (84cb0 <prvCheckTasksWaitingTermination+0x6c>)
   84c70:	68db      	ldr	r3, [r3, #12]
   84c72:	68db      	ldr	r3, [r3, #12]
   84c74:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84c76:	683b      	ldr	r3, [r7, #0]
   84c78:	3304      	adds	r3, #4
   84c7a:	4618      	mov	r0, r3
   84c7c:	4b0f      	ldr	r3, [pc, #60]	; (84cbc <prvCheckTasksWaitingTermination+0x78>)
   84c7e:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   84c80:	4b0f      	ldr	r3, [pc, #60]	; (84cc0 <prvCheckTasksWaitingTermination+0x7c>)
   84c82:	681b      	ldr	r3, [r3, #0]
   84c84:	1e5a      	subs	r2, r3, #1
   84c86:	4b0e      	ldr	r3, [pc, #56]	; (84cc0 <prvCheckTasksWaitingTermination+0x7c>)
   84c88:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84c8a:	4b0e      	ldr	r3, [pc, #56]	; (84cc4 <prvCheckTasksWaitingTermination+0x80>)
   84c8c:	681b      	ldr	r3, [r3, #0]
   84c8e:	1e5a      	subs	r2, r3, #1
   84c90:	4b0c      	ldr	r3, [pc, #48]	; (84cc4 <prvCheckTasksWaitingTermination+0x80>)
   84c92:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   84c94:	4b0c      	ldr	r3, [pc, #48]	; (84cc8 <prvCheckTasksWaitingTermination+0x84>)
   84c96:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84c98:	6838      	ldr	r0, [r7, #0]
   84c9a:	4b0c      	ldr	r3, [pc, #48]	; (84ccc <prvCheckTasksWaitingTermination+0x88>)
   84c9c:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84c9e:	4b09      	ldr	r3, [pc, #36]	; (84cc4 <prvCheckTasksWaitingTermination+0x80>)
   84ca0:	681b      	ldr	r3, [r3, #0]
   84ca2:	2b00      	cmp	r3, #0
   84ca4:	d1d2      	bne.n	84c4c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   84ca6:	3708      	adds	r7, #8
   84ca8:	46bd      	mov	sp, r7
   84caa:	bd80      	pop	{r7, pc}
   84cac:	00084441 	.word	0x00084441
   84cb0:	2007a5b4 	.word	0x2007a5b4
   84cb4:	0008445d 	.word	0x0008445d
   84cb8:	00083355 	.word	0x00083355
   84cbc:	00083159 	.word	0x00083159
   84cc0:	2007a5e0 	.word	0x2007a5e0
   84cc4:	2007a5c8 	.word	0x2007a5c8
   84cc8:	00083399 	.word	0x00083399
   84ccc:	00084db1 	.word	0x00084db1

00084cd0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84cd0:	b580      	push	{r7, lr}
   84cd2:	b082      	sub	sp, #8
   84cd4:	af00      	add	r7, sp, #0
   84cd6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84cd8:	4b13      	ldr	r3, [pc, #76]	; (84d28 <prvAddCurrentTaskToDelayedList+0x58>)
   84cda:	681b      	ldr	r3, [r3, #0]
   84cdc:	687a      	ldr	r2, [r7, #4]
   84cde:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84ce0:	4b12      	ldr	r3, [pc, #72]	; (84d2c <prvAddCurrentTaskToDelayedList+0x5c>)
   84ce2:	681b      	ldr	r3, [r3, #0]
   84ce4:	687a      	ldr	r2, [r7, #4]
   84ce6:	429a      	cmp	r2, r3
   84ce8:	d209      	bcs.n	84cfe <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84cea:	4b11      	ldr	r3, [pc, #68]	; (84d30 <prvAddCurrentTaskToDelayedList+0x60>)
   84cec:	681a      	ldr	r2, [r3, #0]
   84cee:	4b0e      	ldr	r3, [pc, #56]	; (84d28 <prvAddCurrentTaskToDelayedList+0x58>)
   84cf0:	681b      	ldr	r3, [r3, #0]
   84cf2:	3304      	adds	r3, #4
   84cf4:	4610      	mov	r0, r2
   84cf6:	4619      	mov	r1, r3
   84cf8:	4b0e      	ldr	r3, [pc, #56]	; (84d34 <prvAddCurrentTaskToDelayedList+0x64>)
   84cfa:	4798      	blx	r3
   84cfc:	e010      	b.n	84d20 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84cfe:	4b0e      	ldr	r3, [pc, #56]	; (84d38 <prvAddCurrentTaskToDelayedList+0x68>)
   84d00:	681a      	ldr	r2, [r3, #0]
   84d02:	4b09      	ldr	r3, [pc, #36]	; (84d28 <prvAddCurrentTaskToDelayedList+0x58>)
   84d04:	681b      	ldr	r3, [r3, #0]
   84d06:	3304      	adds	r3, #4
   84d08:	4610      	mov	r0, r2
   84d0a:	4619      	mov	r1, r3
   84d0c:	4b09      	ldr	r3, [pc, #36]	; (84d34 <prvAddCurrentTaskToDelayedList+0x64>)
   84d0e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84d10:	4b0a      	ldr	r3, [pc, #40]	; (84d3c <prvAddCurrentTaskToDelayedList+0x6c>)
   84d12:	681b      	ldr	r3, [r3, #0]
   84d14:	687a      	ldr	r2, [r7, #4]
   84d16:	429a      	cmp	r2, r3
   84d18:	d202      	bcs.n	84d20 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84d1a:	4b08      	ldr	r3, [pc, #32]	; (84d3c <prvAddCurrentTaskToDelayedList+0x6c>)
   84d1c:	687a      	ldr	r2, [r7, #4]
   84d1e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84d20:	3708      	adds	r7, #8
   84d22:	46bd      	mov	sp, r7
   84d24:	bd80      	pop	{r7, pc}
   84d26:	bf00      	nop
   84d28:	2007a508 	.word	0x2007a508
   84d2c:	2007a5e4 	.word	0x2007a5e4
   84d30:	2007a59c 	.word	0x2007a59c
   84d34:	000830e9 	.word	0x000830e9
   84d38:	2007a598 	.word	0x2007a598
   84d3c:	20070008 	.word	0x20070008

00084d40 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   84d40:	b580      	push	{r7, lr}
   84d42:	b084      	sub	sp, #16
   84d44:	af00      	add	r7, sp, #0
   84d46:	4603      	mov	r3, r0
   84d48:	6039      	str	r1, [r7, #0]
   84d4a:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   84d4c:	2048      	movs	r0, #72	; 0x48
   84d4e:	4b15      	ldr	r3, [pc, #84]	; (84da4 <prvAllocateTCBAndStack+0x64>)
   84d50:	4798      	blx	r3
   84d52:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   84d54:	68fb      	ldr	r3, [r7, #12]
   84d56:	2b00      	cmp	r3, #0
   84d58:	d01f      	beq.n	84d9a <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84d5a:	683b      	ldr	r3, [r7, #0]
   84d5c:	2b00      	cmp	r3, #0
   84d5e:	d106      	bne.n	84d6e <prvAllocateTCBAndStack+0x2e>
   84d60:	88fb      	ldrh	r3, [r7, #6]
   84d62:	009b      	lsls	r3, r3, #2
   84d64:	4618      	mov	r0, r3
   84d66:	4b0f      	ldr	r3, [pc, #60]	; (84da4 <prvAllocateTCBAndStack+0x64>)
   84d68:	4798      	blx	r3
   84d6a:	4603      	mov	r3, r0
   84d6c:	e000      	b.n	84d70 <prvAllocateTCBAndStack+0x30>
   84d6e:	683b      	ldr	r3, [r7, #0]
   84d70:	68fa      	ldr	r2, [r7, #12]
   84d72:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   84d74:	68fb      	ldr	r3, [r7, #12]
   84d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84d78:	2b00      	cmp	r3, #0
   84d7a:	d105      	bne.n	84d88 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84d7c:	68f8      	ldr	r0, [r7, #12]
   84d7e:	4b0a      	ldr	r3, [pc, #40]	; (84da8 <prvAllocateTCBAndStack+0x68>)
   84d80:	4798      	blx	r3
			pxNewTCB = NULL;
   84d82:	2300      	movs	r3, #0
   84d84:	60fb      	str	r3, [r7, #12]
   84d86:	e008      	b.n	84d9a <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84d88:	68fb      	ldr	r3, [r7, #12]
   84d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84d8c:	88fb      	ldrh	r3, [r7, #6]
   84d8e:	009b      	lsls	r3, r3, #2
   84d90:	4610      	mov	r0, r2
   84d92:	21a5      	movs	r1, #165	; 0xa5
   84d94:	461a      	mov	r2, r3
   84d96:	4b05      	ldr	r3, [pc, #20]	; (84dac <prvAllocateTCBAndStack+0x6c>)
   84d98:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84d9a:	68fb      	ldr	r3, [r7, #12]
}
   84d9c:	4618      	mov	r0, r3
   84d9e:	3710      	adds	r7, #16
   84da0:	46bd      	mov	sp, r7
   84da2:	bd80      	pop	{r7, pc}
   84da4:	000834f5 	.word	0x000834f5
   84da8:	0008366d 	.word	0x0008366d
   84dac:	00086c31 	.word	0x00086c31

00084db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84db0:	b580      	push	{r7, lr}
   84db2:	b082      	sub	sp, #8
   84db4:	af00      	add	r7, sp, #0
   84db6:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84db8:	687b      	ldr	r3, [r7, #4]
   84dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84dbc:	4618      	mov	r0, r3
   84dbe:	4b04      	ldr	r3, [pc, #16]	; (84dd0 <prvDeleteTCB+0x20>)
   84dc0:	4798      	blx	r3
		vPortFree( pxTCB );
   84dc2:	6878      	ldr	r0, [r7, #4]
   84dc4:	4b02      	ldr	r3, [pc, #8]	; (84dd0 <prvDeleteTCB+0x20>)
   84dc6:	4798      	blx	r3
	}
   84dc8:	3708      	adds	r7, #8
   84dca:	46bd      	mov	sp, r7
   84dcc:	bd80      	pop	{r7, pc}
   84dce:	bf00      	nop
   84dd0:	0008366d 	.word	0x0008366d

00084dd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   84dd4:	b480      	push	{r7}
   84dd6:	b083      	sub	sp, #12
   84dd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84dda:	4b0e      	ldr	r3, [pc, #56]	; (84e14 <prvResetNextTaskUnblockTime+0x40>)
   84ddc:	681b      	ldr	r3, [r3, #0]
   84dde:	681b      	ldr	r3, [r3, #0]
   84de0:	2b00      	cmp	r3, #0
   84de2:	d101      	bne.n	84de8 <prvResetNextTaskUnblockTime+0x14>
   84de4:	2301      	movs	r3, #1
   84de6:	e000      	b.n	84dea <prvResetNextTaskUnblockTime+0x16>
   84de8:	2300      	movs	r3, #0
   84dea:	2b00      	cmp	r3, #0
   84dec:	d004      	beq.n	84df8 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84dee:	4b0a      	ldr	r3, [pc, #40]	; (84e18 <prvResetNextTaskUnblockTime+0x44>)
   84df0:	f04f 32ff 	mov.w	r2, #4294967295
   84df4:	601a      	str	r2, [r3, #0]
   84df6:	e008      	b.n	84e0a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84df8:	4b06      	ldr	r3, [pc, #24]	; (84e14 <prvResetNextTaskUnblockTime+0x40>)
   84dfa:	681b      	ldr	r3, [r3, #0]
   84dfc:	68db      	ldr	r3, [r3, #12]
   84dfe:	68db      	ldr	r3, [r3, #12]
   84e00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   84e02:	687b      	ldr	r3, [r7, #4]
   84e04:	685a      	ldr	r2, [r3, #4]
   84e06:	4b04      	ldr	r3, [pc, #16]	; (84e18 <prvResetNextTaskUnblockTime+0x44>)
   84e08:	601a      	str	r2, [r3, #0]
	}
}
   84e0a:	370c      	adds	r7, #12
   84e0c:	46bd      	mov	sp, r7
   84e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84e12:	4770      	bx	lr
   84e14:	2007a598 	.word	0x2007a598
   84e18:	20070008 	.word	0x20070008

00084e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84e1c:	b480      	push	{r7}
   84e1e:	b083      	sub	sp, #12
   84e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   84e22:	4b0b      	ldr	r3, [pc, #44]	; (84e50 <xTaskGetSchedulerState+0x34>)
   84e24:	681b      	ldr	r3, [r3, #0]
   84e26:	2b00      	cmp	r3, #0
   84e28:	d102      	bne.n	84e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   84e2a:	2301      	movs	r3, #1
   84e2c:	607b      	str	r3, [r7, #4]
   84e2e:	e008      	b.n	84e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84e30:	4b08      	ldr	r3, [pc, #32]	; (84e54 <xTaskGetSchedulerState+0x38>)
   84e32:	681b      	ldr	r3, [r3, #0]
   84e34:	2b00      	cmp	r3, #0
   84e36:	d102      	bne.n	84e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   84e38:	2302      	movs	r3, #2
   84e3a:	607b      	str	r3, [r7, #4]
   84e3c:	e001      	b.n	84e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   84e3e:	2300      	movs	r3, #0
   84e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   84e42:	687b      	ldr	r3, [r7, #4]
	}
   84e44:	4618      	mov	r0, r3
   84e46:	370c      	adds	r7, #12
   84e48:	46bd      	mov	sp, r7
   84e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   84e4e:	4770      	bx	lr
   84e50:	2007a5ec 	.word	0x2007a5ec
   84e54:	2007a600 	.word	0x2007a600

00084e58 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   84e58:	b580      	push	{r7, lr}
   84e5a:	b084      	sub	sp, #16
   84e5c:	af00      	add	r7, sp, #0
   84e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84e60:	687b      	ldr	r3, [r7, #4]
   84e62:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   84e64:	687b      	ldr	r3, [r7, #4]
   84e66:	2b00      	cmp	r3, #0
   84e68:	d062      	beq.n	84f30 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   84e6a:	68fb      	ldr	r3, [r7, #12]
   84e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84e6e:	4b32      	ldr	r3, [pc, #200]	; (84f38 <vTaskPriorityInherit+0xe0>)
   84e70:	681b      	ldr	r3, [r3, #0]
   84e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e74:	429a      	cmp	r2, r3
   84e76:	d25b      	bcs.n	84f30 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   84e78:	68fb      	ldr	r3, [r7, #12]
   84e7a:	699b      	ldr	r3, [r3, #24]
   84e7c:	2b00      	cmp	r3, #0
   84e7e:	db06      	blt.n	84e8e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84e80:	4b2d      	ldr	r3, [pc, #180]	; (84f38 <vTaskPriorityInherit+0xe0>)
   84e82:	681b      	ldr	r3, [r3, #0]
   84e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e86:	f1c3 0205 	rsb	r2, r3, #5
   84e8a:	68fb      	ldr	r3, [r7, #12]
   84e8c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   84e8e:	68fb      	ldr	r3, [r7, #12]
   84e90:	6959      	ldr	r1, [r3, #20]
   84e92:	68fb      	ldr	r3, [r7, #12]
   84e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84e96:	4613      	mov	r3, r2
   84e98:	009b      	lsls	r3, r3, #2
   84e9a:	4413      	add	r3, r2
   84e9c:	009b      	lsls	r3, r3, #2
   84e9e:	4a27      	ldr	r2, [pc, #156]	; (84f3c <vTaskPriorityInherit+0xe4>)
   84ea0:	4413      	add	r3, r2
   84ea2:	4299      	cmp	r1, r3
   84ea4:	d101      	bne.n	84eaa <vTaskPriorityInherit+0x52>
   84ea6:	2301      	movs	r3, #1
   84ea8:	e000      	b.n	84eac <vTaskPriorityInherit+0x54>
   84eaa:	2300      	movs	r3, #0
   84eac:	2b00      	cmp	r3, #0
   84eae:	d03a      	beq.n	84f26 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84eb0:	68fb      	ldr	r3, [r7, #12]
   84eb2:	3304      	adds	r3, #4
   84eb4:	4618      	mov	r0, r3
   84eb6:	4b22      	ldr	r3, [pc, #136]	; (84f40 <vTaskPriorityInherit+0xe8>)
   84eb8:	4798      	blx	r3
   84eba:	4603      	mov	r3, r0
   84ebc:	2b00      	cmp	r3, #0
   84ebe:	d115      	bne.n	84eec <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84ec0:	68fb      	ldr	r3, [r7, #12]
   84ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ec4:	491d      	ldr	r1, [pc, #116]	; (84f3c <vTaskPriorityInherit+0xe4>)
   84ec6:	4613      	mov	r3, r2
   84ec8:	009b      	lsls	r3, r3, #2
   84eca:	4413      	add	r3, r2
   84ecc:	009b      	lsls	r3, r3, #2
   84ece:	440b      	add	r3, r1
   84ed0:	681b      	ldr	r3, [r3, #0]
   84ed2:	2b00      	cmp	r3, #0
   84ed4:	d10a      	bne.n	84eec <vTaskPriorityInherit+0x94>
   84ed6:	68fb      	ldr	r3, [r7, #12]
   84ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84eda:	2201      	movs	r2, #1
   84edc:	fa02 f303 	lsl.w	r3, r2, r3
   84ee0:	43da      	mvns	r2, r3
   84ee2:	4b18      	ldr	r3, [pc, #96]	; (84f44 <vTaskPriorityInherit+0xec>)
   84ee4:	681b      	ldr	r3, [r3, #0]
   84ee6:	401a      	ands	r2, r3
   84ee8:	4b16      	ldr	r3, [pc, #88]	; (84f44 <vTaskPriorityInherit+0xec>)
   84eea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84eec:	4b12      	ldr	r3, [pc, #72]	; (84f38 <vTaskPriorityInherit+0xe0>)
   84eee:	681b      	ldr	r3, [r3, #0]
   84ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ef2:	68fb      	ldr	r3, [r7, #12]
   84ef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   84ef6:	68fb      	ldr	r3, [r7, #12]
   84ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84efa:	2201      	movs	r2, #1
   84efc:	409a      	lsls	r2, r3
   84efe:	4b11      	ldr	r3, [pc, #68]	; (84f44 <vTaskPriorityInherit+0xec>)
   84f00:	681b      	ldr	r3, [r3, #0]
   84f02:	431a      	orrs	r2, r3
   84f04:	4b0f      	ldr	r3, [pc, #60]	; (84f44 <vTaskPriorityInherit+0xec>)
   84f06:	601a      	str	r2, [r3, #0]
   84f08:	68fb      	ldr	r3, [r7, #12]
   84f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f0c:	4613      	mov	r3, r2
   84f0e:	009b      	lsls	r3, r3, #2
   84f10:	4413      	add	r3, r2
   84f12:	009b      	lsls	r3, r3, #2
   84f14:	4a09      	ldr	r2, [pc, #36]	; (84f3c <vTaskPriorityInherit+0xe4>)
   84f16:	441a      	add	r2, r3
   84f18:	68fb      	ldr	r3, [r7, #12]
   84f1a:	3304      	adds	r3, #4
   84f1c:	4610      	mov	r0, r2
   84f1e:	4619      	mov	r1, r3
   84f20:	4b09      	ldr	r3, [pc, #36]	; (84f48 <vTaskPriorityInherit+0xf0>)
   84f22:	4798      	blx	r3
   84f24:	e004      	b.n	84f30 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84f26:	4b04      	ldr	r3, [pc, #16]	; (84f38 <vTaskPriorityInherit+0xe0>)
   84f28:	681b      	ldr	r3, [r3, #0]
   84f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f2c:	68fb      	ldr	r3, [r7, #12]
   84f2e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84f30:	3710      	adds	r7, #16
   84f32:	46bd      	mov	sp, r7
   84f34:	bd80      	pop	{r7, pc}
   84f36:	bf00      	nop
   84f38:	2007a508 	.word	0x2007a508
   84f3c:	2007a50c 	.word	0x2007a50c
   84f40:	00083159 	.word	0x00083159
   84f44:	2007a5e8 	.word	0x2007a5e8
   84f48:	000830a1 	.word	0x000830a1

00084f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   84f4c:	b580      	push	{r7, lr}
   84f4e:	b084      	sub	sp, #16
   84f50:	af00      	add	r7, sp, #0
   84f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84f54:	687b      	ldr	r3, [r7, #4]
   84f56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   84f58:	2300      	movs	r3, #0
   84f5a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   84f5c:	687b      	ldr	r3, [r7, #4]
   84f5e:	2b00      	cmp	r3, #0
   84f60:	d056      	beq.n	85010 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   84f62:	68bb      	ldr	r3, [r7, #8]
   84f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84f66:	2b00      	cmp	r3, #0
   84f68:	d102      	bne.n	84f70 <xTaskPriorityDisinherit+0x24>
   84f6a:	4b2c      	ldr	r3, [pc, #176]	; (8501c <xTaskPriorityDisinherit+0xd0>)
   84f6c:	4798      	blx	r3
   84f6e:	e7fe      	b.n	84f6e <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   84f70:	68bb      	ldr	r3, [r7, #8]
   84f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84f74:	1e5a      	subs	r2, r3, #1
   84f76:	68bb      	ldr	r3, [r7, #8]
   84f78:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   84f7a:	68bb      	ldr	r3, [r7, #8]
   84f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f7e:	68bb      	ldr	r3, [r7, #8]
   84f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84f82:	429a      	cmp	r2, r3
   84f84:	d044      	beq.n	85010 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84f86:	68bb      	ldr	r3, [r7, #8]
   84f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84f8a:	2b00      	cmp	r3, #0
   84f8c:	d140      	bne.n	85010 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84f8e:	68bb      	ldr	r3, [r7, #8]
   84f90:	3304      	adds	r3, #4
   84f92:	4618      	mov	r0, r3
   84f94:	4b22      	ldr	r3, [pc, #136]	; (85020 <xTaskPriorityDisinherit+0xd4>)
   84f96:	4798      	blx	r3
   84f98:	4603      	mov	r3, r0
   84f9a:	2b00      	cmp	r3, #0
   84f9c:	d115      	bne.n	84fca <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84f9e:	68bb      	ldr	r3, [r7, #8]
   84fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84fa2:	4920      	ldr	r1, [pc, #128]	; (85024 <xTaskPriorityDisinherit+0xd8>)
   84fa4:	4613      	mov	r3, r2
   84fa6:	009b      	lsls	r3, r3, #2
   84fa8:	4413      	add	r3, r2
   84faa:	009b      	lsls	r3, r3, #2
   84fac:	440b      	add	r3, r1
   84fae:	681b      	ldr	r3, [r3, #0]
   84fb0:	2b00      	cmp	r3, #0
   84fb2:	d10a      	bne.n	84fca <xTaskPriorityDisinherit+0x7e>
   84fb4:	68bb      	ldr	r3, [r7, #8]
   84fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84fb8:	2201      	movs	r2, #1
   84fba:	fa02 f303 	lsl.w	r3, r2, r3
   84fbe:	43da      	mvns	r2, r3
   84fc0:	4b19      	ldr	r3, [pc, #100]	; (85028 <xTaskPriorityDisinherit+0xdc>)
   84fc2:	681b      	ldr	r3, [r3, #0]
   84fc4:	401a      	ands	r2, r3
   84fc6:	4b18      	ldr	r3, [pc, #96]	; (85028 <xTaskPriorityDisinherit+0xdc>)
   84fc8:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84fca:	68bb      	ldr	r3, [r7, #8]
   84fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84fce:	68bb      	ldr	r3, [r7, #8]
   84fd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84fd2:	68bb      	ldr	r3, [r7, #8]
   84fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84fd6:	f1c3 0205 	rsb	r2, r3, #5
   84fda:	68bb      	ldr	r3, [r7, #8]
   84fdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84fde:	68bb      	ldr	r3, [r7, #8]
   84fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84fe2:	2201      	movs	r2, #1
   84fe4:	409a      	lsls	r2, r3
   84fe6:	4b10      	ldr	r3, [pc, #64]	; (85028 <xTaskPriorityDisinherit+0xdc>)
   84fe8:	681b      	ldr	r3, [r3, #0]
   84fea:	431a      	orrs	r2, r3
   84fec:	4b0e      	ldr	r3, [pc, #56]	; (85028 <xTaskPriorityDisinherit+0xdc>)
   84fee:	601a      	str	r2, [r3, #0]
   84ff0:	68bb      	ldr	r3, [r7, #8]
   84ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ff4:	4613      	mov	r3, r2
   84ff6:	009b      	lsls	r3, r3, #2
   84ff8:	4413      	add	r3, r2
   84ffa:	009b      	lsls	r3, r3, #2
   84ffc:	4a09      	ldr	r2, [pc, #36]	; (85024 <xTaskPriorityDisinherit+0xd8>)
   84ffe:	441a      	add	r2, r3
   85000:	68bb      	ldr	r3, [r7, #8]
   85002:	3304      	adds	r3, #4
   85004:	4610      	mov	r0, r2
   85006:	4619      	mov	r1, r3
   85008:	4b08      	ldr	r3, [pc, #32]	; (8502c <xTaskPriorityDisinherit+0xe0>)
   8500a:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   8500c:	2301      	movs	r3, #1
   8500e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   85010:	68fb      	ldr	r3, [r7, #12]
	}
   85012:	4618      	mov	r0, r3
   85014:	3710      	adds	r7, #16
   85016:	46bd      	mov	sp, r7
   85018:	bd80      	pop	{r7, pc}
   8501a:	bf00      	nop
   8501c:	000833d1 	.word	0x000833d1
   85020:	00083159 	.word	0x00083159
   85024:	2007a50c 	.word	0x2007a50c
   85028:	2007a5e8 	.word	0x2007a5e8
   8502c:	000830a1 	.word	0x000830a1

00085030 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   85030:	b480      	push	{r7}
   85032:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   85034:	4b07      	ldr	r3, [pc, #28]	; (85054 <pvTaskIncrementMutexHeldCount+0x24>)
   85036:	681b      	ldr	r3, [r3, #0]
   85038:	2b00      	cmp	r3, #0
   8503a:	d004      	beq.n	85046 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   8503c:	4b05      	ldr	r3, [pc, #20]	; (85054 <pvTaskIncrementMutexHeldCount+0x24>)
   8503e:	681b      	ldr	r3, [r3, #0]
   85040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   85042:	3201      	adds	r2, #1
   85044:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   85046:	4b03      	ldr	r3, [pc, #12]	; (85054 <pvTaskIncrementMutexHeldCount+0x24>)
   85048:	681b      	ldr	r3, [r3, #0]
	}
   8504a:	4618      	mov	r0, r3
   8504c:	46bd      	mov	sp, r7
   8504e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85052:	4770      	bx	lr
   85054:	2007a508 	.word	0x2007a508

00085058 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   85058:	b590      	push	{r4, r7, lr}
   8505a:	b087      	sub	sp, #28
   8505c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   8505e:	2300      	movs	r3, #0
   85060:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   85062:	4b10      	ldr	r3, [pc, #64]	; (850a4 <xTimerCreateTimerTask+0x4c>)
   85064:	4798      	blx	r3

	if( xTimerQueue != NULL )
   85066:	4b10      	ldr	r3, [pc, #64]	; (850a8 <xTimerCreateTimerTask+0x50>)
   85068:	681b      	ldr	r3, [r3, #0]
   8506a:	2b00      	cmp	r3, #0
   8506c:	d00f      	beq.n	8508e <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8506e:	2302      	movs	r3, #2
   85070:	9300      	str	r3, [sp, #0]
   85072:	2300      	movs	r3, #0
   85074:	9301      	str	r3, [sp, #4]
   85076:	2300      	movs	r3, #0
   85078:	9302      	str	r3, [sp, #8]
   8507a:	2300      	movs	r3, #0
   8507c:	9303      	str	r3, [sp, #12]
   8507e:	480b      	ldr	r0, [pc, #44]	; (850ac <xTimerCreateTimerTask+0x54>)
   85080:	490b      	ldr	r1, [pc, #44]	; (850b0 <xTimerCreateTimerTask+0x58>)
   85082:	f44f 7282 	mov.w	r2, #260	; 0x104
   85086:	2300      	movs	r3, #0
   85088:	4c0a      	ldr	r4, [pc, #40]	; (850b4 <xTimerCreateTimerTask+0x5c>)
   8508a:	47a0      	blx	r4
   8508c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8508e:	687b      	ldr	r3, [r7, #4]
   85090:	2b00      	cmp	r3, #0
   85092:	d102      	bne.n	8509a <xTimerCreateTimerTask+0x42>
   85094:	4b08      	ldr	r3, [pc, #32]	; (850b8 <xTimerCreateTimerTask+0x60>)
   85096:	4798      	blx	r3
   85098:	e7fe      	b.n	85098 <xTimerCreateTimerTask+0x40>
	return xReturn;
   8509a:	687b      	ldr	r3, [r7, #4]
}
   8509c:	4618      	mov	r0, r3
   8509e:	370c      	adds	r7, #12
   850a0:	46bd      	mov	sp, r7
   850a2:	bd90      	pop	{r4, r7, pc}
   850a4:	0008558d 	.word	0x0008558d
   850a8:	2007a634 	.word	0x2007a634
   850ac:	000851d5 	.word	0x000851d5
   850b0:	00086f38 	.word	0x00086f38
   850b4:	00084145 	.word	0x00084145
   850b8:	000833d1 	.word	0x000833d1

000850bc <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   850bc:	b590      	push	{r4, r7, lr}
   850be:	b089      	sub	sp, #36	; 0x24
   850c0:	af00      	add	r7, sp, #0
   850c2:	60f8      	str	r0, [r7, #12]
   850c4:	60b9      	str	r1, [r7, #8]
   850c6:	607a      	str	r2, [r7, #4]
   850c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   850ca:	2300      	movs	r3, #0
   850cc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   850ce:	4b1d      	ldr	r3, [pc, #116]	; (85144 <xTimerGenericCommand+0x88>)
   850d0:	681b      	ldr	r3, [r3, #0]
   850d2:	2b00      	cmp	r3, #0
   850d4:	d030      	beq.n	85138 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   850d6:	68bb      	ldr	r3, [r7, #8]
   850d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   850da:	687b      	ldr	r3, [r7, #4]
   850dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   850de:	68fb      	ldr	r3, [r7, #12]
   850e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   850e2:	68bb      	ldr	r3, [r7, #8]
   850e4:	2b05      	cmp	r3, #5
   850e6:	dc1c      	bgt.n	85122 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   850e8:	4b17      	ldr	r3, [pc, #92]	; (85148 <xTimerGenericCommand+0x8c>)
   850ea:	4798      	blx	r3
   850ec:	4603      	mov	r3, r0
   850ee:	2b02      	cmp	r3, #2
   850f0:	d10b      	bne.n	8510a <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   850f2:	4b14      	ldr	r3, [pc, #80]	; (85144 <xTimerGenericCommand+0x88>)
   850f4:	681a      	ldr	r2, [r3, #0]
   850f6:	f107 0310 	add.w	r3, r7, #16
   850fa:	4610      	mov	r0, r2
   850fc:	4619      	mov	r1, r3
   850fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85100:	2300      	movs	r3, #0
   85102:	4c12      	ldr	r4, [pc, #72]	; (8514c <xTimerGenericCommand+0x90>)
   85104:	47a0      	blx	r4
   85106:	61f8      	str	r0, [r7, #28]
   85108:	e016      	b.n	85138 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8510a:	4b0e      	ldr	r3, [pc, #56]	; (85144 <xTimerGenericCommand+0x88>)
   8510c:	681a      	ldr	r2, [r3, #0]
   8510e:	f107 0310 	add.w	r3, r7, #16
   85112:	4610      	mov	r0, r2
   85114:	4619      	mov	r1, r3
   85116:	2200      	movs	r2, #0
   85118:	2300      	movs	r3, #0
   8511a:	4c0c      	ldr	r4, [pc, #48]	; (8514c <xTimerGenericCommand+0x90>)
   8511c:	47a0      	blx	r4
   8511e:	61f8      	str	r0, [r7, #28]
   85120:	e00a      	b.n	85138 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   85122:	4b08      	ldr	r3, [pc, #32]	; (85144 <xTimerGenericCommand+0x88>)
   85124:	681a      	ldr	r2, [r3, #0]
   85126:	f107 0310 	add.w	r3, r7, #16
   8512a:	4610      	mov	r0, r2
   8512c:	4619      	mov	r1, r3
   8512e:	683a      	ldr	r2, [r7, #0]
   85130:	2300      	movs	r3, #0
   85132:	4c07      	ldr	r4, [pc, #28]	; (85150 <xTimerGenericCommand+0x94>)
   85134:	47a0      	blx	r4
   85136:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   85138:	69fb      	ldr	r3, [r7, #28]
}
   8513a:	4618      	mov	r0, r3
   8513c:	3724      	adds	r7, #36	; 0x24
   8513e:	46bd      	mov	sp, r7
   85140:	bd90      	pop	{r4, r7, pc}
   85142:	bf00      	nop
   85144:	2007a634 	.word	0x2007a634
   85148:	00084e1d 	.word	0x00084e1d
   8514c:	000839d9 	.word	0x000839d9
   85150:	00083b9d 	.word	0x00083b9d

00085154 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   85154:	b590      	push	{r4, r7, lr}
   85156:	b087      	sub	sp, #28
   85158:	af02      	add	r7, sp, #8
   8515a:	6078      	str	r0, [r7, #4]
   8515c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8515e:	4b18      	ldr	r3, [pc, #96]	; (851c0 <prvProcessExpiredTimer+0x6c>)
   85160:	681b      	ldr	r3, [r3, #0]
   85162:	68db      	ldr	r3, [r3, #12]
   85164:	68db      	ldr	r3, [r3, #12]
   85166:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85168:	68fb      	ldr	r3, [r7, #12]
   8516a:	3304      	adds	r3, #4
   8516c:	4618      	mov	r0, r3
   8516e:	4b15      	ldr	r3, [pc, #84]	; (851c4 <prvProcessExpiredTimer+0x70>)
   85170:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85172:	68fb      	ldr	r3, [r7, #12]
   85174:	69db      	ldr	r3, [r3, #28]
   85176:	2b01      	cmp	r3, #1
   85178:	d11b      	bne.n	851b2 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8517a:	68fb      	ldr	r3, [r7, #12]
   8517c:	699a      	ldr	r2, [r3, #24]
   8517e:	687b      	ldr	r3, [r7, #4]
   85180:	4413      	add	r3, r2
   85182:	68f8      	ldr	r0, [r7, #12]
   85184:	4619      	mov	r1, r3
   85186:	683a      	ldr	r2, [r7, #0]
   85188:	687b      	ldr	r3, [r7, #4]
   8518a:	4c0f      	ldr	r4, [pc, #60]	; (851c8 <prvProcessExpiredTimer+0x74>)
   8518c:	47a0      	blx	r4
   8518e:	4603      	mov	r3, r0
   85190:	2b01      	cmp	r3, #1
   85192:	d10e      	bne.n	851b2 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   85194:	2300      	movs	r3, #0
   85196:	9300      	str	r3, [sp, #0]
   85198:	68f8      	ldr	r0, [r7, #12]
   8519a:	2100      	movs	r1, #0
   8519c:	687a      	ldr	r2, [r7, #4]
   8519e:	2300      	movs	r3, #0
   851a0:	4c0a      	ldr	r4, [pc, #40]	; (851cc <prvProcessExpiredTimer+0x78>)
   851a2:	47a0      	blx	r4
   851a4:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   851a6:	68bb      	ldr	r3, [r7, #8]
   851a8:	2b00      	cmp	r3, #0
   851aa:	d102      	bne.n	851b2 <prvProcessExpiredTimer+0x5e>
   851ac:	4b08      	ldr	r3, [pc, #32]	; (851d0 <prvProcessExpiredTimer+0x7c>)
   851ae:	4798      	blx	r3
   851b0:	e7fe      	b.n	851b0 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   851b2:	68fb      	ldr	r3, [r7, #12]
   851b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   851b6:	68f8      	ldr	r0, [r7, #12]
   851b8:	4798      	blx	r3
}
   851ba:	3714      	adds	r7, #20
   851bc:	46bd      	mov	sp, r7
   851be:	bd90      	pop	{r4, r7, pc}
   851c0:	2007a62c 	.word	0x2007a62c
   851c4:	00083159 	.word	0x00083159
   851c8:	00085319 	.word	0x00085319
   851cc:	000850bd 	.word	0x000850bd
   851d0:	000833d1 	.word	0x000833d1

000851d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   851d4:	b580      	push	{r7, lr}
   851d6:	b084      	sub	sp, #16
   851d8:	af00      	add	r7, sp, #0
   851da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   851dc:	f107 0308 	add.w	r3, r7, #8
   851e0:	4618      	mov	r0, r3
   851e2:	4b05      	ldr	r3, [pc, #20]	; (851f8 <prvTimerTask+0x24>)
   851e4:	4798      	blx	r3
   851e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   851e8:	68bb      	ldr	r3, [r7, #8]
   851ea:	68f8      	ldr	r0, [r7, #12]
   851ec:	4619      	mov	r1, r3
   851ee:	4b03      	ldr	r3, [pc, #12]	; (851fc <prvTimerTask+0x28>)
   851f0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   851f2:	4b03      	ldr	r3, [pc, #12]	; (85200 <prvTimerTask+0x2c>)
   851f4:	4798      	blx	r3
	}
   851f6:	e7f1      	b.n	851dc <prvTimerTask+0x8>
   851f8:	00085289 	.word	0x00085289
   851fc:	00085205 	.word	0x00085205
   85200:	000853a1 	.word	0x000853a1

00085204 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   85204:	b580      	push	{r7, lr}
   85206:	b084      	sub	sp, #16
   85208:	af00      	add	r7, sp, #0
   8520a:	6078      	str	r0, [r7, #4]
   8520c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   8520e:	4b17      	ldr	r3, [pc, #92]	; (8526c <prvProcessTimerOrBlockTask+0x68>)
   85210:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85212:	f107 0308 	add.w	r3, r7, #8
   85216:	4618      	mov	r0, r3
   85218:	4b15      	ldr	r3, [pc, #84]	; (85270 <prvProcessTimerOrBlockTask+0x6c>)
   8521a:	4798      	blx	r3
   8521c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   8521e:	68bb      	ldr	r3, [r7, #8]
   85220:	2b00      	cmp	r3, #0
   85222:	d11e      	bne.n	85262 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   85224:	683b      	ldr	r3, [r7, #0]
   85226:	2b00      	cmp	r3, #0
   85228:	d10a      	bne.n	85240 <prvProcessTimerOrBlockTask+0x3c>
   8522a:	687a      	ldr	r2, [r7, #4]
   8522c:	68fb      	ldr	r3, [r7, #12]
   8522e:	429a      	cmp	r2, r3
   85230:	d806      	bhi.n	85240 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   85232:	4b10      	ldr	r3, [pc, #64]	; (85274 <prvProcessTimerOrBlockTask+0x70>)
   85234:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   85236:	6878      	ldr	r0, [r7, #4]
   85238:	68f9      	ldr	r1, [r7, #12]
   8523a:	4b0f      	ldr	r3, [pc, #60]	; (85278 <prvProcessTimerOrBlockTask+0x74>)
   8523c:	4798      	blx	r3
   8523e:	e012      	b.n	85266 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   85240:	4b0e      	ldr	r3, [pc, #56]	; (8527c <prvProcessTimerOrBlockTask+0x78>)
   85242:	681a      	ldr	r2, [r3, #0]
   85244:	6879      	ldr	r1, [r7, #4]
   85246:	68fb      	ldr	r3, [r7, #12]
   85248:	1acb      	subs	r3, r1, r3
   8524a:	4610      	mov	r0, r2
   8524c:	4619      	mov	r1, r3
   8524e:	4b0c      	ldr	r3, [pc, #48]	; (85280 <prvProcessTimerOrBlockTask+0x7c>)
   85250:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   85252:	4b08      	ldr	r3, [pc, #32]	; (85274 <prvProcessTimerOrBlockTask+0x70>)
   85254:	4798      	blx	r3
   85256:	4603      	mov	r3, r0
   85258:	2b00      	cmp	r3, #0
   8525a:	d104      	bne.n	85266 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   8525c:	4b09      	ldr	r3, [pc, #36]	; (85284 <prvProcessTimerOrBlockTask+0x80>)
   8525e:	4798      	blx	r3
   85260:	e001      	b.n	85266 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   85262:	4b04      	ldr	r3, [pc, #16]	; (85274 <prvProcessTimerOrBlockTask+0x70>)
   85264:	4798      	blx	r3
		}
	}
}
   85266:	3710      	adds	r7, #16
   85268:	46bd      	mov	sp, r7
   8526a:	bd80      	pop	{r7, pc}
   8526c:	00084441 	.word	0x00084441
   85270:	000852d1 	.word	0x000852d1
   85274:	0008445d 	.word	0x0008445d
   85278:	00085155 	.word	0x00085155
   8527c:	2007a634 	.word	0x2007a634
   85280:	000840dd 	.word	0x000840dd
   85284:	00083335 	.word	0x00083335

00085288 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   85288:	b480      	push	{r7}
   8528a:	b085      	sub	sp, #20
   8528c:	af00      	add	r7, sp, #0
   8528e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   85290:	4b0e      	ldr	r3, [pc, #56]	; (852cc <prvGetNextExpireTime+0x44>)
   85292:	681b      	ldr	r3, [r3, #0]
   85294:	681b      	ldr	r3, [r3, #0]
   85296:	2b00      	cmp	r3, #0
   85298:	bf14      	ite	ne
   8529a:	2300      	movne	r3, #0
   8529c:	2301      	moveq	r3, #1
   8529e:	b2db      	uxtb	r3, r3
   852a0:	461a      	mov	r2, r3
   852a2:	687b      	ldr	r3, [r7, #4]
   852a4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   852a6:	687b      	ldr	r3, [r7, #4]
   852a8:	681b      	ldr	r3, [r3, #0]
   852aa:	2b00      	cmp	r3, #0
   852ac:	d105      	bne.n	852ba <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   852ae:	4b07      	ldr	r3, [pc, #28]	; (852cc <prvGetNextExpireTime+0x44>)
   852b0:	681b      	ldr	r3, [r3, #0]
   852b2:	68db      	ldr	r3, [r3, #12]
   852b4:	681b      	ldr	r3, [r3, #0]
   852b6:	60fb      	str	r3, [r7, #12]
   852b8:	e001      	b.n	852be <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   852ba:	2300      	movs	r3, #0
   852bc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   852be:	68fb      	ldr	r3, [r7, #12]
}
   852c0:	4618      	mov	r0, r3
   852c2:	3714      	adds	r7, #20
   852c4:	46bd      	mov	sp, r7
   852c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   852ca:	4770      	bx	lr
   852cc:	2007a62c 	.word	0x2007a62c

000852d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   852d0:	b580      	push	{r7, lr}
   852d2:	b084      	sub	sp, #16
   852d4:	af00      	add	r7, sp, #0
   852d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   852d8:	4b0c      	ldr	r3, [pc, #48]	; (8530c <prvSampleTimeNow+0x3c>)
   852da:	4798      	blx	r3
   852dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   852de:	4b0c      	ldr	r3, [pc, #48]	; (85310 <prvSampleTimeNow+0x40>)
   852e0:	681b      	ldr	r3, [r3, #0]
   852e2:	68fa      	ldr	r2, [r7, #12]
   852e4:	429a      	cmp	r2, r3
   852e6:	d205      	bcs.n	852f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   852e8:	4b0a      	ldr	r3, [pc, #40]	; (85314 <prvSampleTimeNow+0x44>)
   852ea:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   852ec:	687b      	ldr	r3, [r7, #4]
   852ee:	2201      	movs	r2, #1
   852f0:	601a      	str	r2, [r3, #0]
   852f2:	e002      	b.n	852fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   852f4:	687b      	ldr	r3, [r7, #4]
   852f6:	2200      	movs	r2, #0
   852f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   852fa:	4b05      	ldr	r3, [pc, #20]	; (85310 <prvSampleTimeNow+0x40>)
   852fc:	68fa      	ldr	r2, [r7, #12]
   852fe:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   85300:	68fb      	ldr	r3, [r7, #12]
}
   85302:	4618      	mov	r0, r3
   85304:	3710      	adds	r7, #16
   85306:	46bd      	mov	sp, r7
   85308:	bd80      	pop	{r7, pc}
   8530a:	bf00      	nop
   8530c:	00084581 	.word	0x00084581
   85310:	2007a638 	.word	0x2007a638
   85314:	000854cd 	.word	0x000854cd

00085318 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   85318:	b580      	push	{r7, lr}
   8531a:	b086      	sub	sp, #24
   8531c:	af00      	add	r7, sp, #0
   8531e:	60f8      	str	r0, [r7, #12]
   85320:	60b9      	str	r1, [r7, #8]
   85322:	607a      	str	r2, [r7, #4]
   85324:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   85326:	2300      	movs	r3, #0
   85328:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8532a:	68fb      	ldr	r3, [r7, #12]
   8532c:	68ba      	ldr	r2, [r7, #8]
   8532e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   85330:	68fb      	ldr	r3, [r7, #12]
   85332:	68fa      	ldr	r2, [r7, #12]
   85334:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   85336:	68ba      	ldr	r2, [r7, #8]
   85338:	687b      	ldr	r3, [r7, #4]
   8533a:	429a      	cmp	r2, r3
   8533c:	d812      	bhi.n	85364 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   8533e:	687a      	ldr	r2, [r7, #4]
   85340:	683b      	ldr	r3, [r7, #0]
   85342:	1ad2      	subs	r2, r2, r3
   85344:	68fb      	ldr	r3, [r7, #12]
   85346:	699b      	ldr	r3, [r3, #24]
   85348:	429a      	cmp	r2, r3
   8534a:	d302      	bcc.n	85352 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8534c:	2301      	movs	r3, #1
   8534e:	617b      	str	r3, [r7, #20]
   85350:	e01b      	b.n	8538a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   85352:	4b10      	ldr	r3, [pc, #64]	; (85394 <prvInsertTimerInActiveList+0x7c>)
   85354:	681a      	ldr	r2, [r3, #0]
   85356:	68fb      	ldr	r3, [r7, #12]
   85358:	3304      	adds	r3, #4
   8535a:	4610      	mov	r0, r2
   8535c:	4619      	mov	r1, r3
   8535e:	4b0e      	ldr	r3, [pc, #56]	; (85398 <prvInsertTimerInActiveList+0x80>)
   85360:	4798      	blx	r3
   85362:	e012      	b.n	8538a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   85364:	687a      	ldr	r2, [r7, #4]
   85366:	683b      	ldr	r3, [r7, #0]
   85368:	429a      	cmp	r2, r3
   8536a:	d206      	bcs.n	8537a <prvInsertTimerInActiveList+0x62>
   8536c:	68ba      	ldr	r2, [r7, #8]
   8536e:	683b      	ldr	r3, [r7, #0]
   85370:	429a      	cmp	r2, r3
   85372:	d302      	bcc.n	8537a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   85374:	2301      	movs	r3, #1
   85376:	617b      	str	r3, [r7, #20]
   85378:	e007      	b.n	8538a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8537a:	4b08      	ldr	r3, [pc, #32]	; (8539c <prvInsertTimerInActiveList+0x84>)
   8537c:	681a      	ldr	r2, [r3, #0]
   8537e:	68fb      	ldr	r3, [r7, #12]
   85380:	3304      	adds	r3, #4
   85382:	4610      	mov	r0, r2
   85384:	4619      	mov	r1, r3
   85386:	4b04      	ldr	r3, [pc, #16]	; (85398 <prvInsertTimerInActiveList+0x80>)
   85388:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   8538a:	697b      	ldr	r3, [r7, #20]
}
   8538c:	4618      	mov	r0, r3
   8538e:	3718      	adds	r7, #24
   85390:	46bd      	mov	sp, r7
   85392:	bd80      	pop	{r7, pc}
   85394:	2007a630 	.word	0x2007a630
   85398:	000830e9 	.word	0x000830e9
   8539c:	2007a62c 	.word	0x2007a62c

000853a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   853a0:	b590      	push	{r4, r7, lr}
   853a2:	b08b      	sub	sp, #44	; 0x2c
   853a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   853a6:	e070      	b.n	8548a <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   853a8:	68bb      	ldr	r3, [r7, #8]
   853aa:	2b00      	cmp	r3, #0
   853ac:	db6d      	blt.n	8548a <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   853ae:	693b      	ldr	r3, [r7, #16]
   853b0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   853b2:	69fb      	ldr	r3, [r7, #28]
   853b4:	695b      	ldr	r3, [r3, #20]
   853b6:	2b00      	cmp	r3, #0
   853b8:	d004      	beq.n	853c4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   853ba:	69fb      	ldr	r3, [r7, #28]
   853bc:	3304      	adds	r3, #4
   853be:	4618      	mov	r0, r3
   853c0:	4b3a      	ldr	r3, [pc, #232]	; (854ac <prvProcessReceivedCommands+0x10c>)
   853c2:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   853c4:	1d3b      	adds	r3, r7, #4
   853c6:	4618      	mov	r0, r3
   853c8:	4b39      	ldr	r3, [pc, #228]	; (854b0 <prvProcessReceivedCommands+0x110>)
   853ca:	4798      	blx	r3
   853cc:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   853ce:	68bb      	ldr	r3, [r7, #8]
   853d0:	2b09      	cmp	r3, #9
   853d2:	d859      	bhi.n	85488 <prvProcessReceivedCommands+0xe8>
   853d4:	a201      	add	r2, pc, #4	; (adr r2, 853dc <prvProcessReceivedCommands+0x3c>)
   853d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   853da:	bf00      	nop
   853dc:	00085405 	.word	0x00085405
   853e0:	00085405 	.word	0x00085405
   853e4:	00085405 	.word	0x00085405
   853e8:	00085489 	.word	0x00085489
   853ec:	00085457 	.word	0x00085457
   853f0:	00085481 	.word	0x00085481
   853f4:	00085405 	.word	0x00085405
   853f8:	00085405 	.word	0x00085405
   853fc:	00085489 	.word	0x00085489
   85400:	00085457 	.word	0x00085457
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   85404:	68fa      	ldr	r2, [r7, #12]
   85406:	69fb      	ldr	r3, [r7, #28]
   85408:	699b      	ldr	r3, [r3, #24]
   8540a:	441a      	add	r2, r3
   8540c:	68fb      	ldr	r3, [r7, #12]
   8540e:	69f8      	ldr	r0, [r7, #28]
   85410:	4611      	mov	r1, r2
   85412:	69ba      	ldr	r2, [r7, #24]
   85414:	4c27      	ldr	r4, [pc, #156]	; (854b4 <prvProcessReceivedCommands+0x114>)
   85416:	47a0      	blx	r4
   85418:	4603      	mov	r3, r0
   8541a:	2b01      	cmp	r3, #1
   8541c:	d11a      	bne.n	85454 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8541e:	69fb      	ldr	r3, [r7, #28]
   85420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   85422:	69f8      	ldr	r0, [r7, #28]
   85424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85426:	69fb      	ldr	r3, [r7, #28]
   85428:	69db      	ldr	r3, [r3, #28]
   8542a:	2b01      	cmp	r3, #1
   8542c:	d112      	bne.n	85454 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8542e:	68fa      	ldr	r2, [r7, #12]
   85430:	69fb      	ldr	r3, [r7, #28]
   85432:	699b      	ldr	r3, [r3, #24]
   85434:	4413      	add	r3, r2
   85436:	2200      	movs	r2, #0
   85438:	9200      	str	r2, [sp, #0]
   8543a:	69f8      	ldr	r0, [r7, #28]
   8543c:	2100      	movs	r1, #0
   8543e:	461a      	mov	r2, r3
   85440:	2300      	movs	r3, #0
   85442:	4c1d      	ldr	r4, [pc, #116]	; (854b8 <prvProcessReceivedCommands+0x118>)
   85444:	47a0      	blx	r4
   85446:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   85448:	697b      	ldr	r3, [r7, #20]
   8544a:	2b00      	cmp	r3, #0
   8544c:	d102      	bne.n	85454 <prvProcessReceivedCommands+0xb4>
   8544e:	4b1b      	ldr	r3, [pc, #108]	; (854bc <prvProcessReceivedCommands+0x11c>)
   85450:	4798      	blx	r3
   85452:	e7fe      	b.n	85452 <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   85454:	e019      	b.n	8548a <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   85456:	68fa      	ldr	r2, [r7, #12]
   85458:	69fb      	ldr	r3, [r7, #28]
   8545a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8545c:	69fb      	ldr	r3, [r7, #28]
   8545e:	699b      	ldr	r3, [r3, #24]
   85460:	2b00      	cmp	r3, #0
   85462:	d102      	bne.n	8546a <prvProcessReceivedCommands+0xca>
   85464:	4b15      	ldr	r3, [pc, #84]	; (854bc <prvProcessReceivedCommands+0x11c>)
   85466:	4798      	blx	r3
   85468:	e7fe      	b.n	85468 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8546a:	69fb      	ldr	r3, [r7, #28]
   8546c:	699a      	ldr	r2, [r3, #24]
   8546e:	69bb      	ldr	r3, [r7, #24]
   85470:	4413      	add	r3, r2
   85472:	69f8      	ldr	r0, [r7, #28]
   85474:	4619      	mov	r1, r3
   85476:	69ba      	ldr	r2, [r7, #24]
   85478:	69bb      	ldr	r3, [r7, #24]
   8547a:	4c0e      	ldr	r4, [pc, #56]	; (854b4 <prvProcessReceivedCommands+0x114>)
   8547c:	47a0      	blx	r4
					break;
   8547e:	e004      	b.n	8548a <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   85480:	69f8      	ldr	r0, [r7, #28]
   85482:	4b0f      	ldr	r3, [pc, #60]	; (854c0 <prvProcessReceivedCommands+0x120>)
   85484:	4798      	blx	r3
					break;
   85486:	e000      	b.n	8548a <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   85488:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   8548a:	4b0e      	ldr	r3, [pc, #56]	; (854c4 <prvProcessReceivedCommands+0x124>)
   8548c:	681a      	ldr	r2, [r3, #0]
   8548e:	f107 0308 	add.w	r3, r7, #8
   85492:	4610      	mov	r0, r2
   85494:	4619      	mov	r1, r3
   85496:	2200      	movs	r2, #0
   85498:	2300      	movs	r3, #0
   8549a:	4c0b      	ldr	r4, [pc, #44]	; (854c8 <prvProcessReceivedCommands+0x128>)
   8549c:	47a0      	blx	r4
   8549e:	4603      	mov	r3, r0
   854a0:	2b00      	cmp	r3, #0
   854a2:	d181      	bne.n	853a8 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   854a4:	3724      	adds	r7, #36	; 0x24
   854a6:	46bd      	mov	sp, r7
   854a8:	bd90      	pop	{r4, r7, pc}
   854aa:	bf00      	nop
   854ac:	00083159 	.word	0x00083159
   854b0:	000852d1 	.word	0x000852d1
   854b4:	00085319 	.word	0x00085319
   854b8:	000850bd 	.word	0x000850bd
   854bc:	000833d1 	.word	0x000833d1
   854c0:	0008366d 	.word	0x0008366d
   854c4:	2007a634 	.word	0x2007a634
   854c8:	00083c99 	.word	0x00083c99

000854cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   854cc:	b590      	push	{r4, r7, lr}
   854ce:	b089      	sub	sp, #36	; 0x24
   854d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   854d2:	e03d      	b.n	85550 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   854d4:	4b27      	ldr	r3, [pc, #156]	; (85574 <prvSwitchTimerLists+0xa8>)
   854d6:	681b      	ldr	r3, [r3, #0]
   854d8:	68db      	ldr	r3, [r3, #12]
   854da:	681b      	ldr	r3, [r3, #0]
   854dc:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   854de:	4b25      	ldr	r3, [pc, #148]	; (85574 <prvSwitchTimerLists+0xa8>)
   854e0:	681b      	ldr	r3, [r3, #0]
   854e2:	68db      	ldr	r3, [r3, #12]
   854e4:	68db      	ldr	r3, [r3, #12]
   854e6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   854e8:	693b      	ldr	r3, [r7, #16]
   854ea:	3304      	adds	r3, #4
   854ec:	4618      	mov	r0, r3
   854ee:	4b22      	ldr	r3, [pc, #136]	; (85578 <prvSwitchTimerLists+0xac>)
   854f0:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   854f2:	693b      	ldr	r3, [r7, #16]
   854f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   854f6:	6938      	ldr	r0, [r7, #16]
   854f8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   854fa:	693b      	ldr	r3, [r7, #16]
   854fc:	69db      	ldr	r3, [r3, #28]
   854fe:	2b01      	cmp	r3, #1
   85500:	d126      	bne.n	85550 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   85502:	693b      	ldr	r3, [r7, #16]
   85504:	699a      	ldr	r2, [r3, #24]
   85506:	697b      	ldr	r3, [r7, #20]
   85508:	4413      	add	r3, r2
   8550a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   8550c:	68fa      	ldr	r2, [r7, #12]
   8550e:	697b      	ldr	r3, [r7, #20]
   85510:	429a      	cmp	r2, r3
   85512:	d90e      	bls.n	85532 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   85514:	693b      	ldr	r3, [r7, #16]
   85516:	68fa      	ldr	r2, [r7, #12]
   85518:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8551a:	693b      	ldr	r3, [r7, #16]
   8551c:	693a      	ldr	r2, [r7, #16]
   8551e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   85520:	4b14      	ldr	r3, [pc, #80]	; (85574 <prvSwitchTimerLists+0xa8>)
   85522:	681a      	ldr	r2, [r3, #0]
   85524:	693b      	ldr	r3, [r7, #16]
   85526:	3304      	adds	r3, #4
   85528:	4610      	mov	r0, r2
   8552a:	4619      	mov	r1, r3
   8552c:	4b13      	ldr	r3, [pc, #76]	; (8557c <prvSwitchTimerLists+0xb0>)
   8552e:	4798      	blx	r3
   85530:	e00e      	b.n	85550 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   85532:	2300      	movs	r3, #0
   85534:	9300      	str	r3, [sp, #0]
   85536:	6938      	ldr	r0, [r7, #16]
   85538:	2100      	movs	r1, #0
   8553a:	697a      	ldr	r2, [r7, #20]
   8553c:	2300      	movs	r3, #0
   8553e:	4c10      	ldr	r4, [pc, #64]	; (85580 <prvSwitchTimerLists+0xb4>)
   85540:	47a0      	blx	r4
   85542:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   85544:	68bb      	ldr	r3, [r7, #8]
   85546:	2b00      	cmp	r3, #0
   85548:	d102      	bne.n	85550 <prvSwitchTimerLists+0x84>
   8554a:	4b0e      	ldr	r3, [pc, #56]	; (85584 <prvSwitchTimerLists+0xb8>)
   8554c:	4798      	blx	r3
   8554e:	e7fe      	b.n	8554e <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85550:	4b08      	ldr	r3, [pc, #32]	; (85574 <prvSwitchTimerLists+0xa8>)
   85552:	681b      	ldr	r3, [r3, #0]
   85554:	681b      	ldr	r3, [r3, #0]
   85556:	2b00      	cmp	r3, #0
   85558:	d1bc      	bne.n	854d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   8555a:	4b06      	ldr	r3, [pc, #24]	; (85574 <prvSwitchTimerLists+0xa8>)
   8555c:	681b      	ldr	r3, [r3, #0]
   8555e:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   85560:	4b09      	ldr	r3, [pc, #36]	; (85588 <prvSwitchTimerLists+0xbc>)
   85562:	681a      	ldr	r2, [r3, #0]
   85564:	4b03      	ldr	r3, [pc, #12]	; (85574 <prvSwitchTimerLists+0xa8>)
   85566:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   85568:	4b07      	ldr	r3, [pc, #28]	; (85588 <prvSwitchTimerLists+0xbc>)
   8556a:	687a      	ldr	r2, [r7, #4]
   8556c:	601a      	str	r2, [r3, #0]
}
   8556e:	371c      	adds	r7, #28
   85570:	46bd      	mov	sp, r7
   85572:	bd90      	pop	{r4, r7, pc}
   85574:	2007a62c 	.word	0x2007a62c
   85578:	00083159 	.word	0x00083159
   8557c:	000830e9 	.word	0x000830e9
   85580:	000850bd 	.word	0x000850bd
   85584:	000833d1 	.word	0x000833d1
   85588:	2007a630 	.word	0x2007a630

0008558c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8558c:	b580      	push	{r7, lr}
   8558e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   85590:	4b11      	ldr	r3, [pc, #68]	; (855d8 <prvCheckForValidListAndQueue+0x4c>)
   85592:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   85594:	4b11      	ldr	r3, [pc, #68]	; (855dc <prvCheckForValidListAndQueue+0x50>)
   85596:	681b      	ldr	r3, [r3, #0]
   85598:	2b00      	cmp	r3, #0
   8559a:	d11a      	bne.n	855d2 <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   8559c:	4810      	ldr	r0, [pc, #64]	; (855e0 <prvCheckForValidListAndQueue+0x54>)
   8559e:	4b11      	ldr	r3, [pc, #68]	; (855e4 <prvCheckForValidListAndQueue+0x58>)
   855a0:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   855a2:	4811      	ldr	r0, [pc, #68]	; (855e8 <prvCheckForValidListAndQueue+0x5c>)
   855a4:	4b0f      	ldr	r3, [pc, #60]	; (855e4 <prvCheckForValidListAndQueue+0x58>)
   855a6:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   855a8:	4b10      	ldr	r3, [pc, #64]	; (855ec <prvCheckForValidListAndQueue+0x60>)
   855aa:	4a0d      	ldr	r2, [pc, #52]	; (855e0 <prvCheckForValidListAndQueue+0x54>)
   855ac:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   855ae:	4b10      	ldr	r3, [pc, #64]	; (855f0 <prvCheckForValidListAndQueue+0x64>)
   855b0:	4a0d      	ldr	r2, [pc, #52]	; (855e8 <prvCheckForValidListAndQueue+0x5c>)
   855b2:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   855b4:	2005      	movs	r0, #5
   855b6:	210c      	movs	r1, #12
   855b8:	2200      	movs	r2, #0
   855ba:	4b0e      	ldr	r3, [pc, #56]	; (855f4 <prvCheckForValidListAndQueue+0x68>)
   855bc:	4798      	blx	r3
   855be:	4602      	mov	r2, r0
   855c0:	4b06      	ldr	r3, [pc, #24]	; (855dc <prvCheckForValidListAndQueue+0x50>)
   855c2:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   855c4:	4b05      	ldr	r3, [pc, #20]	; (855dc <prvCheckForValidListAndQueue+0x50>)
   855c6:	681b      	ldr	r3, [r3, #0]
   855c8:	2b00      	cmp	r3, #0
   855ca:	d102      	bne.n	855d2 <prvCheckForValidListAndQueue+0x46>
   855cc:	4b0a      	ldr	r3, [pc, #40]	; (855f8 <prvCheckForValidListAndQueue+0x6c>)
   855ce:	4798      	blx	r3
   855d0:	e7fe      	b.n	855d0 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   855d2:	4b0a      	ldr	r3, [pc, #40]	; (855fc <prvCheckForValidListAndQueue+0x70>)
   855d4:	4798      	blx	r3
}
   855d6:	bd80      	pop	{r7, pc}
   855d8:	00083355 	.word	0x00083355
   855dc:	2007a634 	.word	0x2007a634
   855e0:	2007a604 	.word	0x2007a604
   855e4:	00083049 	.word	0x00083049
   855e8:	2007a618 	.word	0x2007a618
   855ec:	2007a62c 	.word	0x2007a62c
   855f0:	2007a630 	.word	0x2007a630
   855f4:	0008394d 	.word	0x0008394d
   855f8:	000833d1 	.word	0x000833d1
   855fc:	00083399 	.word	0x00083399

00085600 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   85600:	b480      	push	{r7}
   85602:	b083      	sub	sp, #12
   85604:	af00      	add	r7, sp, #0
   85606:	4603      	mov	r3, r0
   85608:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8560a:	4b08      	ldr	r3, [pc, #32]	; (8562c <NVIC_EnableIRQ+0x2c>)
   8560c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   85610:	0952      	lsrs	r2, r2, #5
   85612:	79f9      	ldrb	r1, [r7, #7]
   85614:	f001 011f 	and.w	r1, r1, #31
   85618:	2001      	movs	r0, #1
   8561a:	fa00 f101 	lsl.w	r1, r0, r1
   8561e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   85622:	370c      	adds	r7, #12
   85624:	46bd      	mov	sp, r7
   85626:	f85d 7b04 	ldr.w	r7, [sp], #4
   8562a:	4770      	bx	lr
   8562c:	e000e100 	.word	0xe000e100

00085630 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   85630:	b480      	push	{r7}
   85632:	b083      	sub	sp, #12
   85634:	af00      	add	r7, sp, #0
   85636:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   85638:	687b      	ldr	r3, [r7, #4]
   8563a:	2b07      	cmp	r3, #7
   8563c:	d825      	bhi.n	8568a <osc_get_rate+0x5a>
   8563e:	a201      	add	r2, pc, #4	; (adr r2, 85644 <osc_get_rate+0x14>)
   85640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85644:	00085665 	.word	0x00085665
   85648:	0008566b 	.word	0x0008566b
   8564c:	00085671 	.word	0x00085671
   85650:	00085677 	.word	0x00085677
   85654:	0008567b 	.word	0x0008567b
   85658:	0008567f 	.word	0x0008567f
   8565c:	00085683 	.word	0x00085683
   85660:	00085687 	.word	0x00085687
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   85664:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   85668:	e010      	b.n	8568c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8566a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8566e:	e00d      	b.n	8568c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   85670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85674:	e00a      	b.n	8568c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   85676:	4b08      	ldr	r3, [pc, #32]	; (85698 <osc_get_rate+0x68>)
   85678:	e008      	b.n	8568c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8567a:	4b08      	ldr	r3, [pc, #32]	; (8569c <osc_get_rate+0x6c>)
   8567c:	e006      	b.n	8568c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8567e:	4b08      	ldr	r3, [pc, #32]	; (856a0 <osc_get_rate+0x70>)
   85680:	e004      	b.n	8568c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   85682:	4b07      	ldr	r3, [pc, #28]	; (856a0 <osc_get_rate+0x70>)
   85684:	e002      	b.n	8568c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   85686:	4b06      	ldr	r3, [pc, #24]	; (856a0 <osc_get_rate+0x70>)
   85688:	e000      	b.n	8568c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8568a:	2300      	movs	r3, #0
}
   8568c:	4618      	mov	r0, r3
   8568e:	370c      	adds	r7, #12
   85690:	46bd      	mov	sp, r7
   85692:	f85d 7b04 	ldr.w	r7, [sp], #4
   85696:	4770      	bx	lr
   85698:	003d0900 	.word	0x003d0900
   8569c:	007a1200 	.word	0x007a1200
   856a0:	00b71b00 	.word	0x00b71b00

000856a4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   856a4:	b580      	push	{r7, lr}
   856a6:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   856a8:	2006      	movs	r0, #6
   856aa:	4b04      	ldr	r3, [pc, #16]	; (856bc <sysclk_get_main_hz+0x18>)
   856ac:	4798      	blx	r3
   856ae:	4602      	mov	r2, r0
   856b0:	4613      	mov	r3, r2
   856b2:	00db      	lsls	r3, r3, #3
   856b4:	1a9b      	subs	r3, r3, r2
   856b6:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   856b8:	4618      	mov	r0, r3
   856ba:	bd80      	pop	{r7, pc}
   856bc:	00085631 	.word	0x00085631

000856c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   856c0:	b580      	push	{r7, lr}
   856c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   856c4:	4b02      	ldr	r3, [pc, #8]	; (856d0 <sysclk_get_cpu_hz+0x10>)
   856c6:	4798      	blx	r3
   856c8:	4603      	mov	r3, r0
   856ca:	085b      	lsrs	r3, r3, #1
}
   856cc:	4618      	mov	r0, r3
   856ce:	bd80      	pop	{r7, pc}
   856d0:	000856a5 	.word	0x000856a5

000856d4 <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   856d4:	b580      	push	{r7, lr}
   856d6:	b082      	sub	sp, #8
   856d8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   856da:	482b      	ldr	r0, [pc, #172]	; (85788 <CAN1_Handler+0xb4>)
   856dc:	492b      	ldr	r1, [pc, #172]	; (8578c <CAN1_Handler+0xb8>)
   856de:	4b2c      	ldr	r3, [pc, #176]	; (85790 <CAN1_Handler+0xbc>)
   856e0:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   856e2:	482c      	ldr	r0, [pc, #176]	; (85794 <CAN1_Handler+0xc0>)
   856e4:	4b2c      	ldr	r3, [pc, #176]	; (85798 <CAN1_Handler+0xc4>)
   856e6:	4798      	blx	r3
   856e8:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   856ea:	683b      	ldr	r3, [r7, #0]
   856ec:	b2db      	uxtb	r3, r3
   856ee:	2b00      	cmp	r3, #0
   856f0:	d046      	beq.n	85780 <CAN1_Handler+0xac>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   856f2:	2300      	movs	r3, #0
   856f4:	71fb      	strb	r3, [r7, #7]
   856f6:	e040      	b.n	8577a <CAN1_Handler+0xa6>
			ul_status = can_mailbox_get_status(CAN1, i);
   856f8:	79fb      	ldrb	r3, [r7, #7]
   856fa:	4826      	ldr	r0, [pc, #152]	; (85794 <CAN1_Handler+0xc0>)
   856fc:	4619      	mov	r1, r3
   856fe:	4b27      	ldr	r3, [pc, #156]	; (8579c <CAN1_Handler+0xc8>)
   85700:	4798      	blx	r3
   85702:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   85704:	683b      	ldr	r3, [r7, #0]
   85706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8570a:	2b00      	cmp	r3, #0
   8570c:	d032      	beq.n	85774 <CAN1_Handler+0xa0>
				can1_mailbox.ul_mb_idx = i;
   8570e:	79fa      	ldrb	r2, [r7, #7]
   85710:	4b1d      	ldr	r3, [pc, #116]	; (85788 <CAN1_Handler+0xb4>)
   85712:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   85714:	4b1c      	ldr	r3, [pc, #112]	; (85788 <CAN1_Handler+0xb4>)
   85716:	683a      	ldr	r2, [r7, #0]
   85718:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   8571a:	481e      	ldr	r0, [pc, #120]	; (85794 <CAN1_Handler+0xc0>)
   8571c:	491a      	ldr	r1, [pc, #104]	; (85788 <CAN1_Handler+0xb4>)
   8571e:	4b20      	ldr	r3, [pc, #128]	; (857a0 <CAN1_Handler+0xcc>)
   85720:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   85722:	4b19      	ldr	r3, [pc, #100]	; (85788 <CAN1_Handler+0xb4>)
   85724:	69da      	ldr	r2, [r3, #28]
   85726:	4b1f      	ldr	r3, [pc, #124]	; (857a4 <CAN1_Handler+0xd0>)
   85728:	429a      	cmp	r2, r3
   8572a:	d107      	bne.n	8573c <CAN1_Handler+0x68>
   8572c:	4b16      	ldr	r3, [pc, #88]	; (85788 <CAN1_Handler+0xb4>)
   8572e:	699a      	ldr	r2, [r3, #24]
   85730:	4b1d      	ldr	r3, [pc, #116]	; (857a8 <CAN1_Handler+0xd4>)
   85732:	429a      	cmp	r2, r3
   85734:	d102      	bne.n	8573c <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   85736:	4b1d      	ldr	r3, [pc, #116]	; (857ac <CAN1_Handler+0xd8>)
   85738:	2200      	movs	r2, #0
   8573a:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   8573c:	79fb      	ldrb	r3, [r7, #7]
   8573e:	4812      	ldr	r0, [pc, #72]	; (85788 <CAN1_Handler+0xb4>)
   85740:	4619      	mov	r1, r3
   85742:	4b1b      	ldr	r3, [pc, #108]	; (857b0 <CAN1_Handler+0xdc>)
   85744:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   85746:	4810      	ldr	r0, [pc, #64]	; (85788 <CAN1_Handler+0xb4>)
   85748:	4912      	ldr	r1, [pc, #72]	; (85794 <CAN1_Handler+0xc0>)
   8574a:	4b1a      	ldr	r3, [pc, #104]	; (857b4 <CAN1_Handler+0xe0>)
   8574c:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   8574e:	79fb      	ldrb	r3, [r7, #7]
   85750:	2b07      	cmp	r3, #7
   85752:	d103      	bne.n	8575c <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   85754:	480c      	ldr	r0, [pc, #48]	; (85788 <CAN1_Handler+0xb4>)
   85756:	490f      	ldr	r1, [pc, #60]	; (85794 <CAN1_Handler+0xc0>)
   85758:	4b17      	ldr	r3, [pc, #92]	; (857b8 <CAN1_Handler+0xe4>)
   8575a:	4798      	blx	r3

				if (i == 0)
   8575c:	79fb      	ldrb	r3, [r7, #7]
   8575e:	2b00      	cmp	r3, #0
   85760:	d103      	bne.n	8576a <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   85762:	4809      	ldr	r0, [pc, #36]	; (85788 <CAN1_Handler+0xb4>)
   85764:	490b      	ldr	r1, [pc, #44]	; (85794 <CAN1_Handler+0xc0>)
   85766:	4b15      	ldr	r3, [pc, #84]	; (857bc <CAN1_Handler+0xe8>)
   85768:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   8576a:	4807      	ldr	r0, [pc, #28]	; (85788 <CAN1_Handler+0xb4>)
   8576c:	4907      	ldr	r1, [pc, #28]	; (8578c <CAN1_Handler+0xb8>)
   8576e:	4b14      	ldr	r3, [pc, #80]	; (857c0 <CAN1_Handler+0xec>)
   85770:	4798      	blx	r3
				break;
   85772:	e005      	b.n	85780 <CAN1_Handler+0xac>
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85774:	79fb      	ldrb	r3, [r7, #7]
   85776:	3301      	adds	r3, #1
   85778:	71fb      	strb	r3, [r7, #7]
   8577a:	79fb      	ldrb	r3, [r7, #7]
   8577c:	2b07      	cmp	r3, #7
   8577e:	d9bb      	bls.n	856f8 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   85780:	3708      	adds	r7, #8
   85782:	46bd      	mov	sp, r7
   85784:	bd80      	pop	{r7, pc}
   85786:	bf00      	nop
   85788:	2007a650 	.word	0x2007a650
   8578c:	2007a68c 	.word	0x2007a68c
   85790:	00085d89 	.word	0x00085d89
   85794:	400b8000 	.word	0x400b8000
   85798:	00081e1d 	.word	0x00081e1d
   8579c:	00081e61 	.word	0x00081e61
   857a0:	00081fe1 	.word	0x00081fe1
   857a4:	01234567 	.word	0x01234567
   857a8:	89abcdef 	.word	0x89abcdef
   857ac:	2007a6e4 	.word	0x2007a6e4
   857b0:	00085a29 	.word	0x00085a29
   857b4:	00085865 	.word	0x00085865
   857b8:	000858c5 	.word	0x000858c5
   857bc:	00085989 	.word	0x00085989
   857c0:	00085df9 	.word	0x00085df9

000857c4 <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   857c4:	b580      	push	{r7, lr}
   857c6:	b082      	sub	sp, #8
   857c8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   857ca:	481c      	ldr	r0, [pc, #112]	; (8583c <CAN0_Handler+0x78>)
   857cc:	491c      	ldr	r1, [pc, #112]	; (85840 <CAN0_Handler+0x7c>)
   857ce:	4b1d      	ldr	r3, [pc, #116]	; (85844 <CAN0_Handler+0x80>)
   857d0:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   857d2:	481d      	ldr	r0, [pc, #116]	; (85848 <CAN0_Handler+0x84>)
   857d4:	4b1d      	ldr	r3, [pc, #116]	; (8584c <CAN0_Handler+0x88>)
   857d6:	4798      	blx	r3
   857d8:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   857da:	683b      	ldr	r3, [r7, #0]
   857dc:	b2db      	uxtb	r3, r3
   857de:	2b00      	cmp	r3, #0
   857e0:	d029      	beq.n	85836 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   857e2:	2300      	movs	r3, #0
   857e4:	71fb      	strb	r3, [r7, #7]
   857e6:	e023      	b.n	85830 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   857e8:	79fb      	ldrb	r3, [r7, #7]
   857ea:	4817      	ldr	r0, [pc, #92]	; (85848 <CAN0_Handler+0x84>)
   857ec:	4619      	mov	r1, r3
   857ee:	4b18      	ldr	r3, [pc, #96]	; (85850 <CAN0_Handler+0x8c>)
   857f0:	4798      	blx	r3
   857f2:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   857f4:	683b      	ldr	r3, [r7, #0]
   857f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   857fa:	2b00      	cmp	r3, #0
   857fc:	d015      	beq.n	8582a <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   857fe:	79fa      	ldrb	r2, [r7, #7]
   85800:	4b0e      	ldr	r3, [pc, #56]	; (8583c <CAN0_Handler+0x78>)
   85802:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   85804:	4b0d      	ldr	r3, [pc, #52]	; (8583c <CAN0_Handler+0x78>)
   85806:	683a      	ldr	r2, [r7, #0]
   85808:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   8580a:	480f      	ldr	r0, [pc, #60]	; (85848 <CAN0_Handler+0x84>)
   8580c:	490b      	ldr	r1, [pc, #44]	; (8583c <CAN0_Handler+0x78>)
   8580e:	4b11      	ldr	r3, [pc, #68]	; (85854 <CAN0_Handler+0x90>)
   85810:	4798      	blx	r3
				g_ul_recv_status = 1;
   85812:	4b11      	ldr	r3, [pc, #68]	; (85858 <CAN0_Handler+0x94>)
   85814:	2201      	movs	r2, #1
   85816:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   85818:	4808      	ldr	r0, [pc, #32]	; (8583c <CAN0_Handler+0x78>)
   8581a:	490b      	ldr	r1, [pc, #44]	; (85848 <CAN0_Handler+0x84>)
   8581c:	4b0f      	ldr	r3, [pc, #60]	; (8585c <CAN0_Handler+0x98>)
   8581e:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   85820:	4806      	ldr	r0, [pc, #24]	; (8583c <CAN0_Handler+0x78>)
   85822:	4907      	ldr	r1, [pc, #28]	; (85840 <CAN0_Handler+0x7c>)
   85824:	4b0e      	ldr	r3, [pc, #56]	; (85860 <CAN0_Handler+0x9c>)
   85826:	4798      	blx	r3
				break;
   85828:	e005      	b.n	85836 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8582a:	79fb      	ldrb	r3, [r7, #7]
   8582c:	3301      	adds	r3, #1
   8582e:	71fb      	strb	r3, [r7, #7]
   85830:	79fb      	ldrb	r3, [r7, #7]
   85832:	2b07      	cmp	r3, #7
   85834:	d9d8      	bls.n	857e8 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   85836:	3708      	adds	r7, #8
   85838:	46bd      	mov	sp, r7
   8583a:	bd80      	pop	{r7, pc}
   8583c:	2007a6bc 	.word	0x2007a6bc
   85840:	2007a700 	.word	0x2007a700
   85844:	00085d89 	.word	0x00085d89
   85848:	400b4000 	.word	0x400b4000
   8584c:	00081e1d 	.word	0x00081e1d
   85850:	00081e61 	.word	0x00081e61
   85854:	00081fe1 	.word	0x00081fe1
   85858:	2007a63c 	.word	0x2007a63c
   8585c:	00085865 	.word	0x00085865
   85860:	00085df9 	.word	0x00085df9

00085864 <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   85864:	b580      	push	{r7, lr}
   85866:	b086      	sub	sp, #24
   85868:	af00      	add	r7, sp, #0
   8586a:	6078      	str	r0, [r7, #4]
   8586c:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8586e:	687b      	ldr	r3, [r7, #4]
   85870:	699b      	ldr	r3, [r3, #24]
   85872:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85874:	687b      	ldr	r3, [r7, #4]
   85876:	69db      	ldr	r3, [r3, #28]
   85878:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8587a:	693b      	ldr	r3, [r7, #16]
   8587c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85880:	0c1b      	lsrs	r3, r3, #16
   85882:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85884:	693b      	ldr	r3, [r7, #16]
   85886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8588a:	0a1b      	lsrs	r3, r3, #8
   8588c:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   8588e:	7bfb      	ldrb	r3, [r7, #15]
   85890:	2b02      	cmp	r3, #2
   85892:	d105      	bne.n	858a0 <debug_can_msg+0x3c>
   85894:	7bbb      	ldrb	r3, [r7, #14]
   85896:	2b04      	cmp	r3, #4
   85898:	d102      	bne.n	858a0 <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   8589a:	2057      	movs	r0, #87	; 0x57
   8589c:	4b08      	ldr	r3, [pc, #32]	; (858c0 <debug_can_msg+0x5c>)
   8589e:	4798      	blx	r3

	if (big_type == MT_HK)
   858a0:	7bfb      	ldrb	r3, [r7, #15]
   858a2:	2b01      	cmp	r3, #1
   858a4:	d102      	bne.n	858ac <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   858a6:	2055      	movs	r0, #85	; 0x55
   858a8:	4b05      	ldr	r3, [pc, #20]	; (858c0 <debug_can_msg+0x5c>)
   858aa:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   858ac:	7bfb      	ldrb	r3, [r7, #15]
   858ae:	2b00      	cmp	r3, #0
   858b0:	d102      	bne.n	858b8 <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   858b2:	2056      	movs	r0, #86	; 0x56
   858b4:	4b02      	ldr	r3, [pc, #8]	; (858c0 <debug_can_msg+0x5c>)
   858b6:	4798      	blx	r3

	return;
   858b8:	bf00      	nop
}
   858ba:	3718      	adds	r7, #24
   858bc:	46bd      	mov	sp, r7
   858be:	bd80      	pop	{r7, pc}
   858c0:	000823e1 	.word	0x000823e1

000858c4 <decode_can_command>:


void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   858c4:	b480      	push	{r7}
   858c6:	b087      	sub	sp, #28
   858c8:	af00      	add	r7, sp, #0
   858ca:	6078      	str	r0, [r7, #4]
   858cc:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   858ce:	687b      	ldr	r3, [r7, #4]
   858d0:	699b      	ldr	r3, [r3, #24]
   858d2:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   858d4:	687b      	ldr	r3, [r7, #4]
   858d6:	69db      	ldr	r3, [r3, #28]
   858d8:	613b      	str	r3, [r7, #16]
	uint8_t sender, destination, big_type, small_type;

	sender = (uint8_t)(uh_data_incom >> 28);
   858da:	693b      	ldr	r3, [r7, #16]
   858dc:	0f1b      	lsrs	r3, r3, #28
   858de:	73fb      	strb	r3, [r7, #15]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   858e0:	693b      	ldr	r3, [r7, #16]
   858e2:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   858e6:	0e1b      	lsrs	r3, r3, #24
   858e8:	73bb      	strb	r3, [r7, #14]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   858ea:	693b      	ldr	r3, [r7, #16]
   858ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   858f0:	0c1b      	lsrs	r3, r3, #16
   858f2:	737b      	strb	r3, [r7, #13]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   858f4:	693b      	ldr	r3, [r7, #16]
   858f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   858fa:	0a1b      	lsrs	r3, r3, #8
   858fc:	733b      	strb	r3, [r7, #12]

	if(big_type != MT_COM)
   858fe:	7b7b      	ldrb	r3, [r7, #13]
   85900:	2b02      	cmp	r3, #2
   85902:	d000      	beq.n	85906 <decode_can_command+0x42>
		return;
   85904:	e02e      	b.n	85964 <decode_can_command+0xa0>
	
	switch(small_type)	// FROM WHO
   85906:	7b3b      	ldrb	r3, [r7, #12]
   85908:	2b06      	cmp	r3, #6
   8590a:	d002      	beq.n	85912 <decode_can_command+0x4e>
   8590c:	2b08      	cmp	r3, #8
   8590e:	d014      	beq.n	8593a <decode_can_command+0x76>
				default :
					break;
			}
			break;
		default :
			break;
   85910:	e027      	b.n	85962 <decode_can_command+0x9e>
		return;
	
	switch(small_type)	// FROM WHO
	{
		case ACK_READ:
			switch(destination)
   85912:	7bbb      	ldrb	r3, [r7, #14]
   85914:	2b04      	cmp	r3, #4
   85916:	d000      	beq.n	8591a <decode_can_command+0x56>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   85918:	e00e      	b.n	85938 <decode_can_command+0x74>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   8591a:	4b15      	ldr	r3, [pc, #84]	; (85970 <decode_can_command+0xac>)
   8591c:	781b      	ldrb	r3, [r3, #0]
   8591e:	2b00      	cmp	r3, #0
   85920:	d009      	beq.n	85936 <decode_can_command+0x72>
					{
						hk_read_receivedf = 1;
   85922:	4b14      	ldr	r3, [pc, #80]	; (85974 <decode_can_command+0xb0>)
   85924:	2201      	movs	r2, #1
   85926:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   85928:	4b13      	ldr	r3, [pc, #76]	; (85978 <decode_can_command+0xb4>)
   8592a:	693a      	ldr	r2, [r7, #16]
   8592c:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   8592e:	4b12      	ldr	r3, [pc, #72]	; (85978 <decode_can_command+0xb4>)
   85930:	697a      	ldr	r2, [r7, #20]
   85932:	601a      	str	r2, [r3, #0]
					}
					break;
   85934:	e7ff      	b.n	85936 <decode_can_command+0x72>
   85936:	bf00      	nop
				default :
					break;
			}
			break;
   85938:	e013      	b.n	85962 <decode_can_command+0x9e>
		case ACK_WRITE :
			switch(destination)
   8593a:	7bbb      	ldrb	r3, [r7, #14]
   8593c:	2b04      	cmp	r3, #4
   8593e:	d000      	beq.n	85942 <decode_can_command+0x7e>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   85940:	e00e      	b.n	85960 <decode_can_command+0x9c>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   85942:	4b0e      	ldr	r3, [pc, #56]	; (8597c <decode_can_command+0xb8>)
   85944:	781b      	ldrb	r3, [r3, #0]
   85946:	2b00      	cmp	r3, #0
   85948:	d009      	beq.n	8595e <decode_can_command+0x9a>
					{
						hk_write_receivedf = 1;
   8594a:	4b0d      	ldr	r3, [pc, #52]	; (85980 <decode_can_command+0xbc>)
   8594c:	2201      	movs	r2, #1
   8594e:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   85950:	4b0c      	ldr	r3, [pc, #48]	; (85984 <decode_can_command+0xc0>)
   85952:	693a      	ldr	r2, [r7, #16]
   85954:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   85956:	4b0b      	ldr	r3, [pc, #44]	; (85984 <decode_can_command+0xc0>)
   85958:	697a      	ldr	r2, [r7, #20]
   8595a:	601a      	str	r2, [r3, #0]
					}
					break;
   8595c:	e7ff      	b.n	8595e <decode_can_command+0x9a>
   8595e:	bf00      	nop
				default :
					break;
			}
			break;
   85960:	bf00      	nop
		default :
			break;
	}
	return;
   85962:	bf00      	nop
}
   85964:	371c      	adds	r7, #28
   85966:	46bd      	mov	sp, r7
   85968:	f85d 7b04 	ldr.w	r7, [sp], #4
   8596c:	4770      	bx	lr
   8596e:	bf00      	nop
   85970:	2007a6e8 	.word	0x2007a6e8
   85974:	2007a64c 	.word	0x2007a64c
   85978:	2007a680 	.word	0x2007a680
   8597c:	2007a6b0 	.word	0x2007a6b0
   85980:	2007a67d 	.word	0x2007a67d
   85984:	2007a6b4 	.word	0x2007a6b4

00085988 <alert_can_data>:

void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   85988:	b480      	push	{r7}
   8598a:	b087      	sub	sp, #28
   8598c:	af00      	add	r7, sp, #0
   8598e:	6078      	str	r0, [r7, #4]
   85990:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85992:	687b      	ldr	r3, [r7, #4]
   85994:	69db      	ldr	r3, [r3, #28]
   85996:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85998:	687b      	ldr	r3, [r7, #4]
   8599a:	699b      	ldr	r3, [r3, #24]
   8599c:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8599e:	697b      	ldr	r3, [r7, #20]
   859a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   859a4:	0c1b      	lsrs	r3, r3, #16
   859a6:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   859a8:	697b      	ldr	r3, [r7, #20]
   859aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   859ae:	0a1b      	lsrs	r3, r3, #8
   859b0:	73bb      	strb	r3, [r7, #14]

	if(big_type != MT_DATA)
   859b2:	7bfb      	ldrb	r3, [r7, #15]
   859b4:	2b00      	cmp	r3, #0
   859b6:	d000      	beq.n	859ba <alert_can_data+0x32>
		return;
   859b8:	e028      	b.n	85a0c <alert_can_data+0x84>

	switch(small_type)
   859ba:	7bbb      	ldrb	r3, [r7, #14]
   859bc:	3b01      	subs	r3, #1
   859be:	2b03      	cmp	r3, #3
   859c0:	d822      	bhi.n	85a08 <alert_can_data+0x80>
   859c2:	a201      	add	r2, pc, #4	; (adr r2, 859c8 <alert_can_data+0x40>)
   859c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   859c8:	000859d9 	.word	0x000859d9
   859cc:	000859df 	.word	0x000859df
   859d0:	000859e5 	.word	0x000859e5
   859d4:	000859f7 	.word	0x000859f7
	{
		case SPI_TEMP1:
			glob_drf = 1;
   859d8:	4b0f      	ldr	r3, [pc, #60]	; (85a18 <alert_can_data+0x90>)
   859da:	2201      	movs	r2, #1
   859dc:	701a      	strb	r2, [r3, #0]
		case COMS_PACKET:
			glob_comsf = 1;
   859de:	4b0f      	ldr	r3, [pc, #60]	; (85a1c <alert_can_data+0x94>)
   859e0:	2201      	movs	r2, #1
   859e2:	701a      	strb	r2, [r3, #0]
		case BATT_TOP :
			eps_data_receivedf = 1;
   859e4:	4b0e      	ldr	r3, [pc, #56]	; (85a20 <alert_can_data+0x98>)
   859e6:	2201      	movs	r2, #1
   859e8:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   859ea:	4b0e      	ldr	r3, [pc, #56]	; (85a24 <alert_can_data+0x9c>)
   859ec:	697a      	ldr	r2, [r7, #20]
   859ee:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   859f0:	4b0c      	ldr	r3, [pc, #48]	; (85a24 <alert_can_data+0x9c>)
   859f2:	693a      	ldr	r2, [r7, #16]
   859f4:	601a      	str	r2, [r3, #0]
		case BATT_BOTTOM :
			eps_data_receivedf = 1;
   859f6:	4b0a      	ldr	r3, [pc, #40]	; (85a20 <alert_can_data+0x98>)
   859f8:	2201      	movs	r2, #1
   859fa:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   859fc:	4b09      	ldr	r3, [pc, #36]	; (85a24 <alert_can_data+0x9c>)
   859fe:	697a      	ldr	r2, [r7, #20]
   85a00:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   85a02:	4b08      	ldr	r3, [pc, #32]	; (85a24 <alert_can_data+0x9c>)
   85a04:	693a      	ldr	r2, [r7, #16]
   85a06:	601a      	str	r2, [r3, #0]
		default :
			break;
   85a08:	bf00      	nop
	}

	return;
   85a0a:	bf00      	nop
}
   85a0c:	371c      	adds	r7, #28
   85a0e:	46bd      	mov	sp, r7
   85a10:	f85d 7b04 	ldr.w	r7, [sp], #4
   85a14:	4770      	bx	lr
   85a16:	bf00      	nop
   85a18:	2007a670 	.word	0x2007a670
   85a1c:	2007a67c 	.word	0x2007a67c
   85a20:	2007a6f0 	.word	0x2007a6f0
   85a24:	2007a6dc 	.word	0x2007a6dc

00085a28 <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   85a28:	b590      	push	{r4, r7, lr}
   85a2a:	b087      	sub	sp, #28
   85a2c:	af00      	add	r7, sp, #0
   85a2e:	6078      	str	r0, [r7, #4]
   85a30:	460b      	mov	r3, r1
   85a32:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85a34:	687b      	ldr	r3, [r7, #4]
   85a36:	699b      	ldr	r3, [r3, #24]
   85a38:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85a3a:	687b      	ldr	r3, [r7, #4]
   85a3c:	69db      	ldr	r3, [r3, #28]
   85a3e:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   85a40:	78fb      	ldrb	r3, [r7, #3]
   85a42:	2b07      	cmp	r3, #7
   85a44:	d873      	bhi.n	85b2e <store_can_msg+0x106>
   85a46:	a201      	add	r2, pc, #4	; (adr r2, 85a4c <store_can_msg+0x24>)
   85a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85a4c:	00085a6d 	.word	0x00085a6d
   85a50:	00085b2f 	.word	0x00085b2f
   85a54:	00085b2f 	.word	0x00085b2f
   85a58:	00085b2f 	.word	0x00085b2f
   85a5c:	00085b2f 	.word	0x00085b2f
   85a60:	00085a9d 	.word	0x00085a9d
   85a64:	00085acd 	.word	0x00085acd
   85a68:	00085afd 	.word	0x00085afd
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   85a6c:	4b32      	ldr	r3, [pc, #200]	; (85b38 <store_can_msg+0x110>)
   85a6e:	6819      	ldr	r1, [r3, #0]
   85a70:	f107 0214 	add.w	r2, r7, #20
   85a74:	f107 030c 	add.w	r3, r7, #12
   85a78:	4608      	mov	r0, r1
   85a7a:	4611      	mov	r1, r2
   85a7c:	461a      	mov	r2, r3
   85a7e:	2300      	movs	r3, #0
   85a80:	4c2e      	ldr	r4, [pc, #184]	; (85b3c <store_can_msg+0x114>)
   85a82:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   85a84:	4b2c      	ldr	r3, [pc, #176]	; (85b38 <store_can_msg+0x110>)
   85a86:	6819      	ldr	r1, [r3, #0]
   85a88:	f107 0210 	add.w	r2, r7, #16
   85a8c:	f107 030c 	add.w	r3, r7, #12
   85a90:	4608      	mov	r0, r1
   85a92:	4611      	mov	r1, r2
   85a94:	461a      	mov	r2, r3
   85a96:	2300      	movs	r3, #0
   85a98:	4c28      	ldr	r4, [pc, #160]	; (85b3c <store_can_msg+0x114>)
   85a9a:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   85a9c:	4b28      	ldr	r3, [pc, #160]	; (85b40 <store_can_msg+0x118>)
   85a9e:	6819      	ldr	r1, [r3, #0]
   85aa0:	f107 0214 	add.w	r2, r7, #20
   85aa4:	f107 030c 	add.w	r3, r7, #12
   85aa8:	4608      	mov	r0, r1
   85aaa:	4611      	mov	r1, r2
   85aac:	461a      	mov	r2, r3
   85aae:	2300      	movs	r3, #0
   85ab0:	4c22      	ldr	r4, [pc, #136]	; (85b3c <store_can_msg+0x114>)
   85ab2:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   85ab4:	4b22      	ldr	r3, [pc, #136]	; (85b40 <store_can_msg+0x118>)
   85ab6:	6819      	ldr	r1, [r3, #0]
   85ab8:	f107 0210 	add.w	r2, r7, #16
   85abc:	f107 030c 	add.w	r3, r7, #12
   85ac0:	4608      	mov	r0, r1
   85ac2:	4611      	mov	r1, r2
   85ac4:	461a      	mov	r2, r3
   85ac6:	2300      	movs	r3, #0
   85ac8:	4c1c      	ldr	r4, [pc, #112]	; (85b3c <store_can_msg+0x114>)
   85aca:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   85acc:	4b1d      	ldr	r3, [pc, #116]	; (85b44 <store_can_msg+0x11c>)
   85ace:	6819      	ldr	r1, [r3, #0]
   85ad0:	f107 0214 	add.w	r2, r7, #20
   85ad4:	f107 030c 	add.w	r3, r7, #12
   85ad8:	4608      	mov	r0, r1
   85ada:	4611      	mov	r1, r2
   85adc:	461a      	mov	r2, r3
   85ade:	2300      	movs	r3, #0
   85ae0:	4c16      	ldr	r4, [pc, #88]	; (85b3c <store_can_msg+0x114>)
   85ae2:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   85ae4:	4b17      	ldr	r3, [pc, #92]	; (85b44 <store_can_msg+0x11c>)
   85ae6:	6819      	ldr	r1, [r3, #0]
   85ae8:	f107 0210 	add.w	r2, r7, #16
   85aec:	f107 030c 	add.w	r3, r7, #12
   85af0:	4608      	mov	r0, r1
   85af2:	4611      	mov	r1, r2
   85af4:	461a      	mov	r2, r3
   85af6:	2300      	movs	r3, #0
   85af8:	4c10      	ldr	r4, [pc, #64]	; (85b3c <store_can_msg+0x114>)
   85afa:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   85afc:	4b12      	ldr	r3, [pc, #72]	; (85b48 <store_can_msg+0x120>)
   85afe:	6819      	ldr	r1, [r3, #0]
   85b00:	f107 0214 	add.w	r2, r7, #20
   85b04:	f107 030c 	add.w	r3, r7, #12
   85b08:	4608      	mov	r0, r1
   85b0a:	4611      	mov	r1, r2
   85b0c:	461a      	mov	r2, r3
   85b0e:	2300      	movs	r3, #0
   85b10:	4c0a      	ldr	r4, [pc, #40]	; (85b3c <store_can_msg+0x114>)
   85b12:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   85b14:	4b0c      	ldr	r3, [pc, #48]	; (85b48 <store_can_msg+0x120>)
   85b16:	6819      	ldr	r1, [r3, #0]
   85b18:	f107 0210 	add.w	r2, r7, #16
   85b1c:	f107 030c 	add.w	r3, r7, #12
   85b20:	4608      	mov	r0, r1
   85b22:	4611      	mov	r1, r2
   85b24:	461a      	mov	r2, r3
   85b26:	2300      	movs	r3, #0
   85b28:	4c04      	ldr	r4, [pc, #16]	; (85b3c <store_can_msg+0x114>)
   85b2a:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   85b2c:	bf00      	nop
   85b2e:	bf00      	nop
	}
	return;
}
   85b30:	371c      	adds	r7, #28
   85b32:	46bd      	mov	sp, r7
   85b34:	bd90      	pop	{r4, r7, pc}
   85b36:	bf00      	nop
   85b38:	2007a688 	.word	0x2007a688
   85b3c:	00083b9d 	.word	0x00083b9d
   85b40:	2007a6fc 	.word	0x2007a6fc
   85b44:	2007a640 	.word	0x2007a640
   85b48:	2007a6ec 	.word	0x2007a6ec

00085b4c <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85b4c:	b480      	push	{r7}
   85b4e:	b083      	sub	sp, #12
   85b50:	af00      	add	r7, sp, #0
   85b52:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   85b54:	687b      	ldr	r3, [r7, #4]
   85b56:	2200      	movs	r2, #0
   85b58:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   85b5a:	687b      	ldr	r3, [r7, #4]
   85b5c:	2200      	movs	r2, #0
   85b5e:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   85b60:	687b      	ldr	r3, [r7, #4]
   85b62:	2200      	movs	r2, #0
   85b64:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   85b66:	687b      	ldr	r3, [r7, #4]
   85b68:	2200      	movs	r2, #0
   85b6a:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   85b6c:	687b      	ldr	r3, [r7, #4]
   85b6e:	2200      	movs	r2, #0
   85b70:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   85b72:	687b      	ldr	r3, [r7, #4]
   85b74:	2200      	movs	r2, #0
   85b76:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   85b78:	687b      	ldr	r3, [r7, #4]
   85b7a:	2200      	movs	r2, #0
   85b7c:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   85b7e:	687b      	ldr	r3, [r7, #4]
   85b80:	2200      	movs	r2, #0
   85b82:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   85b84:	687b      	ldr	r3, [r7, #4]
   85b86:	2200      	movs	r2, #0
   85b88:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   85b8a:	687b      	ldr	r3, [r7, #4]
   85b8c:	2200      	movs	r2, #0
   85b8e:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   85b90:	687b      	ldr	r3, [r7, #4]
   85b92:	2200      	movs	r2, #0
   85b94:	61da      	str	r2, [r3, #28]
}
   85b96:	370c      	adds	r7, #12
   85b98:	46bd      	mov	sp, r7
   85b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   85b9e:	4770      	bx	lr

00085ba0 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   85ba0:	b580      	push	{r7, lr}
   85ba2:	b08c      	sub	sp, #48	; 0x30
   85ba4:	af00      	add	r7, sp, #0
   85ba6:	60f8      	str	r0, [r7, #12]
   85ba8:	60b9      	str	r1, [r7, #8]
   85baa:	607a      	str	r2, [r7, #4]
   85bac:	603b      	str	r3, [r7, #0]
	can_temp_t temp_mailbox;
	//save_can_object(&can0_mailbox, &temp_mailbox);
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85bae:	4819      	ldr	r0, [pc, #100]	; (85c14 <send_can_command+0x74>)
   85bb0:	4b19      	ldr	r3, [pc, #100]	; (85c18 <send_can_command+0x78>)
   85bb2:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85bb4:	4b17      	ldr	r3, [pc, #92]	; (85c14 <send_can_command+0x74>)
   85bb6:	2207      	movs	r2, #7
   85bb8:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85bba:	4b16      	ldr	r3, [pc, #88]	; (85c14 <send_can_command+0x74>)
   85bbc:	2203      	movs	r2, #3
   85bbe:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   85bc0:	683b      	ldr	r3, [r7, #0]
   85bc2:	b2da      	uxtb	r2, r3
   85bc4:	4b13      	ldr	r3, [pc, #76]	; (85c14 <send_can_command+0x74>)
   85bc6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85bc8:	4b12      	ldr	r3, [pc, #72]	; (85c14 <send_can_command+0x74>)
   85bca:	2200      	movs	r2, #0
   85bcc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85bce:	4b11      	ldr	r3, [pc, #68]	; (85c14 <send_can_command+0x74>)
   85bd0:	2200      	movs	r2, #0
   85bd2:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85bd4:	4811      	ldr	r0, [pc, #68]	; (85c1c <send_can_command+0x7c>)
   85bd6:	490f      	ldr	r1, [pc, #60]	; (85c14 <send_can_command+0x74>)
   85bd8:	4b11      	ldr	r3, [pc, #68]	; (85c20 <send_can_command+0x80>)
   85bda:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85bdc:	687b      	ldr	r3, [r7, #4]
   85bde:	049a      	lsls	r2, r3, #18
   85be0:	4b10      	ldr	r3, [pc, #64]	; (85c24 <send_can_command+0x84>)
   85be2:	4013      	ands	r3, r2
   85be4:	4a0b      	ldr	r2, [pc, #44]	; (85c14 <send_can_command+0x74>)
   85be6:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   85be8:	4b0a      	ldr	r3, [pc, #40]	; (85c14 <send_can_command+0x74>)
   85bea:	68fa      	ldr	r2, [r7, #12]
   85bec:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85bee:	4b09      	ldr	r3, [pc, #36]	; (85c14 <send_can_command+0x74>)
   85bf0:	68ba      	ldr	r2, [r7, #8]
   85bf2:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85bf4:	4b07      	ldr	r3, [pc, #28]	; (85c14 <send_can_command+0x74>)
   85bf6:	2208      	movs	r2, #8
   85bf8:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85bfa:	4808      	ldr	r0, [pc, #32]	; (85c1c <send_can_command+0x7c>)
   85bfc:	4905      	ldr	r1, [pc, #20]	; (85c14 <send_can_command+0x74>)
   85bfe:	4b0a      	ldr	r3, [pc, #40]	; (85c28 <send_can_command+0x88>)
   85c00:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   85c02:	4806      	ldr	r0, [pc, #24]	; (85c1c <send_can_command+0x7c>)
   85c04:	2180      	movs	r1, #128	; 0x80
   85c06:	4b09      	ldr	r3, [pc, #36]	; (85c2c <send_can_command+0x8c>)
   85c08:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	//restore_can_object(&can0_mailbox, &temp_mailbox);
	
	return 1;
   85c0a:	2301      	movs	r3, #1
}
   85c0c:	4618      	mov	r0, r3
   85c0e:	3730      	adds	r7, #48	; 0x30
   85c10:	46bd      	mov	sp, r7
   85c12:	bd80      	pop	{r7, pc}
   85c14:	2007a6bc 	.word	0x2007a6bc
   85c18:	00085b4d 	.word	0x00085b4d
   85c1c:	400b4000 	.word	0x400b4000
   85c20:	00081ec1 	.word	0x00081ec1
   85c24:	1ffc0000 	.word	0x1ffc0000
   85c28:	000820a5 	.word	0x000820a5
   85c2c:	00081e35 	.word	0x00081e35

00085c30 <read_can_data>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85c30:	b590      	push	{r4, r7, lr}
   85c32:	b085      	sub	sp, #20
   85c34:	af00      	add	r7, sp, #0
   85c36:	60f8      	str	r0, [r7, #12]
   85c38:	60b9      	str	r1, [r7, #8]
   85c3a:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85c3c:	687a      	ldr	r2, [r7, #4]
   85c3e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85c42:	429a      	cmp	r2, r3
   85c44:	d111      	bne.n	85c6a <read_can_data+0x3a>
	{
		xQueueReceive(can_data_fifo, message_low, (TickType_t) 1);
   85c46:	4b0b      	ldr	r3, [pc, #44]	; (85c74 <read_can_data+0x44>)
   85c48:	681b      	ldr	r3, [r3, #0]
   85c4a:	4618      	mov	r0, r3
   85c4c:	68b9      	ldr	r1, [r7, #8]
   85c4e:	2201      	movs	r2, #1
   85c50:	2300      	movs	r3, #0
   85c52:	4c09      	ldr	r4, [pc, #36]	; (85c78 <read_can_data+0x48>)
   85c54:	47a0      	blx	r4
		xQueueReceive(can_data_fifo, message_high, (TickType_t) 1);
   85c56:	4b07      	ldr	r3, [pc, #28]	; (85c74 <read_can_data+0x44>)
   85c58:	681b      	ldr	r3, [r3, #0]
   85c5a:	4618      	mov	r0, r3
   85c5c:	68f9      	ldr	r1, [r7, #12]
   85c5e:	2201      	movs	r2, #1
   85c60:	2300      	movs	r3, #0
   85c62:	4c05      	ldr	r4, [pc, #20]	; (85c78 <read_can_data+0x48>)
   85c64:	47a0      	blx	r4
		return 1;
   85c66:	2301      	movs	r3, #1
   85c68:	e000      	b.n	85c6c <read_can_data+0x3c>
	}

	return 0;
   85c6a:	2300      	movs	r3, #0
}
   85c6c:	4618      	mov	r0, r3
   85c6e:	3714      	adds	r7, #20
   85c70:	46bd      	mov	sp, r7
   85c72:	bd90      	pop	{r4, r7, pc}
   85c74:	2007a688 	.word	0x2007a688
   85c78:	00083c99 	.word	0x00083c99

00085c7c <read_can_msg>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85c7c:	b590      	push	{r4, r7, lr}
   85c7e:	b085      	sub	sp, #20
   85c80:	af00      	add	r7, sp, #0
   85c82:	60f8      	str	r0, [r7, #12]
   85c84:	60b9      	str	r1, [r7, #8]
   85c86:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85c88:	687a      	ldr	r2, [r7, #4]
   85c8a:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85c8e:	429a      	cmp	r2, r3
   85c90:	d111      	bne.n	85cb6 <read_can_msg+0x3a>
	{
		xQueueReceive(can_msg_fifo, message_low, (TickType_t) 1);
   85c92:	4b0b      	ldr	r3, [pc, #44]	; (85cc0 <read_can_msg+0x44>)
   85c94:	681b      	ldr	r3, [r3, #0]
   85c96:	4618      	mov	r0, r3
   85c98:	68b9      	ldr	r1, [r7, #8]
   85c9a:	2201      	movs	r2, #1
   85c9c:	2300      	movs	r3, #0
   85c9e:	4c09      	ldr	r4, [pc, #36]	; (85cc4 <read_can_msg+0x48>)
   85ca0:	47a0      	blx	r4
		xQueueReceive(can_msg_fifo, message_high, (TickType_t) 1);
   85ca2:	4b07      	ldr	r3, [pc, #28]	; (85cc0 <read_can_msg+0x44>)
   85ca4:	681b      	ldr	r3, [r3, #0]
   85ca6:	4618      	mov	r0, r3
   85ca8:	68f9      	ldr	r1, [r7, #12]
   85caa:	2201      	movs	r2, #1
   85cac:	2300      	movs	r3, #0
   85cae:	4c05      	ldr	r4, [pc, #20]	; (85cc4 <read_can_msg+0x48>)
   85cb0:	47a0      	blx	r4
		return 1;
   85cb2:	2301      	movs	r3, #1
   85cb4:	e000      	b.n	85cb8 <read_can_msg+0x3c>
	}

	return 0;
   85cb6:	2300      	movs	r3, #0
}
   85cb8:	4618      	mov	r0, r3
   85cba:	3714      	adds	r7, #20
   85cbc:	46bd      	mov	sp, r7
   85cbe:	bd90      	pop	{r4, r7, pc}
   85cc0:	2007a6fc 	.word	0x2007a6fc
   85cc4:	00083c99 	.word	0x00083c99

00085cc8 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   85cc8:	b580      	push	{r7, lr}
   85cca:	b08c      	sub	sp, #48	; 0x30
   85ccc:	af00      	add	r7, sp, #0
   85cce:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	uint32_t high;
	uint8_t dest = (uint8_t)ID;
   85cd0:	687b      	ldr	r3, [r7, #4]
   85cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	save_can_object(&can0_mailbox, &temp_mailbox);
   85cd6:	f107 0308 	add.w	r3, r7, #8
   85cda:	4821      	ldr	r0, [pc, #132]	; (85d60 <request_housekeeping+0x98>)
   85cdc:	4619      	mov	r1, r3
   85cde:	4b21      	ldr	r3, [pc, #132]	; (85d64 <request_housekeeping+0x9c>)
   85ce0:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85ce2:	481f      	ldr	r0, [pc, #124]	; (85d60 <request_housekeeping+0x98>)
   85ce4:	4b20      	ldr	r3, [pc, #128]	; (85d68 <request_housekeeping+0xa0>)
   85ce6:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85ce8:	4b1d      	ldr	r3, [pc, #116]	; (85d60 <request_housekeeping+0x98>)
   85cea:	2206      	movs	r2, #6
   85cec:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85cee:	4b1c      	ldr	r3, [pc, #112]	; (85d60 <request_housekeeping+0x98>)
   85cf0:	2203      	movs	r2, #3
   85cf2:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85cf4:	4b1a      	ldr	r3, [pc, #104]	; (85d60 <request_housekeeping+0x98>)
   85cf6:	2214      	movs	r2, #20
   85cf8:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85cfa:	4b19      	ldr	r3, [pc, #100]	; (85d60 <request_housekeeping+0x98>)
   85cfc:	2200      	movs	r2, #0
   85cfe:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85d00:	4b17      	ldr	r3, [pc, #92]	; (85d60 <request_housekeeping+0x98>)
   85d02:	2200      	movs	r2, #0
   85d04:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85d06:	4819      	ldr	r0, [pc, #100]	; (85d6c <request_housekeeping+0xa4>)
   85d08:	4915      	ldr	r1, [pc, #84]	; (85d60 <request_housekeeping+0x98>)
   85d0a:	4b19      	ldr	r3, [pc, #100]	; (85d70 <request_housekeeping+0xa8>)
   85d0c:	4798      	blx	r3
	
	high = high_command_generator(HK_TASK_ID, MT_COM, REQ_HK);
   85d0e:	2004      	movs	r0, #4
   85d10:	2102      	movs	r1, #2
   85d12:	2203      	movs	r2, #3
   85d14:	4b17      	ldr	r3, [pc, #92]	; (85d74 <request_housekeeping+0xac>)
   85d16:	4798      	blx	r3
   85d18:	62b8      	str	r0, [r7, #40]	; 0x28

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85d1a:	687b      	ldr	r3, [r7, #4]
   85d1c:	049a      	lsls	r2, r3, #18
   85d1e:	4b16      	ldr	r3, [pc, #88]	; (85d78 <request_housekeeping+0xb0>)
   85d20:	4013      	ands	r3, r2
   85d22:	4a0f      	ldr	r2, [pc, #60]	; (85d60 <request_housekeeping+0x98>)
   85d24:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = 0x00;				// shifted over to the standard frame position.
   85d26:	4b0e      	ldr	r3, [pc, #56]	; (85d60 <request_housekeeping+0x98>)
   85d28:	2200      	movs	r2, #0
   85d2a:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85d2c:	4b0c      	ldr	r3, [pc, #48]	; (85d60 <request_housekeeping+0x98>)
   85d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85d30:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85d32:	4b0b      	ldr	r3, [pc, #44]	; (85d60 <request_housekeeping+0x98>)
   85d34:	2208      	movs	r2, #8
   85d36:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85d38:	480c      	ldr	r0, [pc, #48]	; (85d6c <request_housekeeping+0xa4>)
   85d3a:	4909      	ldr	r1, [pc, #36]	; (85d60 <request_housekeeping+0x98>)
   85d3c:	4b0f      	ldr	r3, [pc, #60]	; (85d7c <request_housekeeping+0xb4>)
   85d3e:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   85d40:	480a      	ldr	r0, [pc, #40]	; (85d6c <request_housekeeping+0xa4>)
   85d42:	2140      	movs	r1, #64	; 0x40
   85d44:	4b0e      	ldr	r3, [pc, #56]	; (85d80 <request_housekeeping+0xb8>)
   85d46:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   85d48:	f107 0308 	add.w	r3, r7, #8
   85d4c:	4804      	ldr	r0, [pc, #16]	; (85d60 <request_housekeeping+0x98>)
   85d4e:	4619      	mov	r1, r3
   85d50:	4b0c      	ldr	r3, [pc, #48]	; (85d84 <request_housekeeping+0xbc>)
   85d52:	4798      	blx	r3
		
	return 1;
   85d54:	2301      	movs	r3, #1
}
   85d56:	4618      	mov	r0, r3
   85d58:	3730      	adds	r7, #48	; 0x30
   85d5a:	46bd      	mov	sp, r7
   85d5c:	bd80      	pop	{r7, pc}
   85d5e:	bf00      	nop
   85d60:	2007a6bc 	.word	0x2007a6bc
   85d64:	00085d89 	.word	0x00085d89
   85d68:	00085b4d 	.word	0x00085b4d
   85d6c:	400b4000 	.word	0x400b4000
   85d70:	00081ec1 	.word	0x00081ec1
   85d74:	0008618d 	.word	0x0008618d
   85d78:	1ffc0000 	.word	0x1ffc0000
   85d7c:	000820a5 	.word	0x000820a5
   85d80:	00081e35 	.word	0x00081e35
   85d84:	00085df9 	.word	0x00085df9

00085d88 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85d88:	b480      	push	{r7}
   85d8a:	b083      	sub	sp, #12
   85d8c:	af00      	add	r7, sp, #0
   85d8e:	6078      	str	r0, [r7, #4]
   85d90:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   85d92:	687b      	ldr	r3, [r7, #4]
   85d94:	681a      	ldr	r2, [r3, #0]
   85d96:	683b      	ldr	r3, [r7, #0]
   85d98:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   85d9a:	687b      	ldr	r3, [r7, #4]
   85d9c:	791a      	ldrb	r2, [r3, #4]
   85d9e:	683b      	ldr	r3, [r7, #0]
   85da0:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   85da2:	687b      	ldr	r3, [r7, #4]
   85da4:	795a      	ldrb	r2, [r3, #5]
   85da6:	683b      	ldr	r3, [r7, #0]
   85da8:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   85daa:	687b      	ldr	r3, [r7, #4]
   85dac:	799a      	ldrb	r2, [r3, #6]
   85dae:	683b      	ldr	r3, [r7, #0]
   85db0:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   85db2:	687b      	ldr	r3, [r7, #4]
   85db4:	79da      	ldrb	r2, [r3, #7]
   85db6:	683b      	ldr	r3, [r7, #0]
   85db8:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   85dba:	687b      	ldr	r3, [r7, #4]
   85dbc:	689a      	ldr	r2, [r3, #8]
   85dbe:	683b      	ldr	r3, [r7, #0]
   85dc0:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   85dc2:	687b      	ldr	r3, [r7, #4]
   85dc4:	68da      	ldr	r2, [r3, #12]
   85dc6:	683b      	ldr	r3, [r7, #0]
   85dc8:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   85dca:	687b      	ldr	r3, [r7, #4]
   85dcc:	691a      	ldr	r2, [r3, #16]
   85dce:	683b      	ldr	r3, [r7, #0]
   85dd0:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   85dd2:	687b      	ldr	r3, [r7, #4]
   85dd4:	695a      	ldr	r2, [r3, #20]
   85dd6:	683b      	ldr	r3, [r7, #0]
   85dd8:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   85dda:	687b      	ldr	r3, [r7, #4]
   85ddc:	699a      	ldr	r2, [r3, #24]
   85dde:	683b      	ldr	r3, [r7, #0]
   85de0:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   85de2:	687b      	ldr	r3, [r7, #4]
   85de4:	69da      	ldr	r2, [r3, #28]
   85de6:	683b      	ldr	r3, [r7, #0]
   85de8:	61da      	str	r2, [r3, #28]
	
	return;
   85dea:	bf00      	nop
}
   85dec:	370c      	adds	r7, #12
   85dee:	46bd      	mov	sp, r7
   85df0:	f85d 7b04 	ldr.w	r7, [sp], #4
   85df4:	4770      	bx	lr
   85df6:	bf00      	nop

00085df8 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85df8:	b480      	push	{r7}
   85dfa:	b083      	sub	sp, #12
   85dfc:	af00      	add	r7, sp, #0
   85dfe:	6078      	str	r0, [r7, #4]
   85e00:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   85e02:	683b      	ldr	r3, [r7, #0]
   85e04:	681a      	ldr	r2, [r3, #0]
   85e06:	687b      	ldr	r3, [r7, #4]
   85e08:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   85e0a:	683b      	ldr	r3, [r7, #0]
   85e0c:	791a      	ldrb	r2, [r3, #4]
   85e0e:	687b      	ldr	r3, [r7, #4]
   85e10:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   85e12:	683b      	ldr	r3, [r7, #0]
   85e14:	795a      	ldrb	r2, [r3, #5]
   85e16:	687b      	ldr	r3, [r7, #4]
   85e18:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   85e1a:	683b      	ldr	r3, [r7, #0]
   85e1c:	799a      	ldrb	r2, [r3, #6]
   85e1e:	687b      	ldr	r3, [r7, #4]
   85e20:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   85e22:	683b      	ldr	r3, [r7, #0]
   85e24:	79da      	ldrb	r2, [r3, #7]
   85e26:	687b      	ldr	r3, [r7, #4]
   85e28:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   85e2a:	683b      	ldr	r3, [r7, #0]
   85e2c:	689a      	ldr	r2, [r3, #8]
   85e2e:	687b      	ldr	r3, [r7, #4]
   85e30:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   85e32:	683b      	ldr	r3, [r7, #0]
   85e34:	68da      	ldr	r2, [r3, #12]
   85e36:	687b      	ldr	r3, [r7, #4]
   85e38:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85e3a:	683b      	ldr	r3, [r7, #0]
   85e3c:	691a      	ldr	r2, [r3, #16]
   85e3e:	687b      	ldr	r3, [r7, #4]
   85e40:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   85e42:	683b      	ldr	r3, [r7, #0]
   85e44:	695a      	ldr	r2, [r3, #20]
   85e46:	687b      	ldr	r3, [r7, #4]
   85e48:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   85e4a:	683b      	ldr	r3, [r7, #0]
   85e4c:	699a      	ldr	r2, [r3, #24]
   85e4e:	687b      	ldr	r3, [r7, #4]
   85e50:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   85e52:	683b      	ldr	r3, [r7, #0]
   85e54:	69da      	ldr	r2, [r3, #28]
   85e56:	687b      	ldr	r3, [r7, #4]
   85e58:	61da      	str	r2, [r3, #28]
	
	return;
   85e5a:	bf00      	nop
}
   85e5c:	370c      	adds	r7, #12
   85e5e:	46bd      	mov	sp, r7
   85e60:	f85d 7b04 	ldr.w	r7, [sp], #4
   85e64:	4770      	bx	lr
   85e66:	bf00      	nop

00085e68 <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   85e68:	b580      	push	{r7, lr}
   85e6a:	b086      	sub	sp, #24
   85e6c:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   85e6e:	2301      	movs	r3, #1
   85e70:	613b      	str	r3, [r7, #16]
   85e72:	2300      	movs	r3, #0
   85e74:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   85e76:	4853      	ldr	r0, [pc, #332]	; (85fc4 <can_initialize+0x15c>)
   85e78:	2134      	movs	r1, #52	; 0x34
   85e7a:	4b53      	ldr	r3, [pc, #332]	; (85fc8 <can_initialize+0x160>)
   85e7c:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   85e7e:	4851      	ldr	r0, [pc, #324]	; (85fc4 <can_initialize+0x15c>)
   85e80:	2135      	movs	r1, #53	; 0x35
   85e82:	4b52      	ldr	r3, [pc, #328]	; (85fcc <can_initialize+0x164>)
   85e84:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   85e86:	484f      	ldr	r0, [pc, #316]	; (85fc4 <can_initialize+0x15c>)
   85e88:	4b51      	ldr	r3, [pc, #324]	; (85fd0 <can_initialize+0x168>)
   85e8a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   85e8c:	484d      	ldr	r0, [pc, #308]	; (85fc4 <can_initialize+0x15c>)
   85e8e:	4b51      	ldr	r3, [pc, #324]	; (85fd4 <can_initialize+0x16c>)
   85e90:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   85e92:	4851      	ldr	r0, [pc, #324]	; (85fd8 <can_initialize+0x170>)
   85e94:	218f      	movs	r1, #143	; 0x8f
   85e96:	4b4c      	ldr	r3, [pc, #304]	; (85fc8 <can_initialize+0x160>)
   85e98:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   85e9a:	484f      	ldr	r0, [pc, #316]	; (85fd8 <can_initialize+0x170>)
   85e9c:	2190      	movs	r1, #144	; 0x90
   85e9e:	4b4b      	ldr	r3, [pc, #300]	; (85fcc <can_initialize+0x164>)
   85ea0:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   85ea2:	484d      	ldr	r0, [pc, #308]	; (85fd8 <can_initialize+0x170>)
   85ea4:	4b4a      	ldr	r3, [pc, #296]	; (85fd0 <can_initialize+0x168>)
   85ea6:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   85ea8:	484b      	ldr	r0, [pc, #300]	; (85fd8 <can_initialize+0x170>)
   85eaa:	4b4a      	ldr	r3, [pc, #296]	; (85fd4 <can_initialize+0x16c>)
   85eac:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   85eae:	202b      	movs	r0, #43	; 0x2b
   85eb0:	4b4a      	ldr	r3, [pc, #296]	; (85fdc <can_initialize+0x174>)
   85eb2:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   85eb4:	202c      	movs	r0, #44	; 0x2c
   85eb6:	4b49      	ldr	r3, [pc, #292]	; (85fdc <can_initialize+0x174>)
   85eb8:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   85eba:	4b49      	ldr	r3, [pc, #292]	; (85fe0 <can_initialize+0x178>)
   85ebc:	4798      	blx	r3
   85ebe:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85ec0:	4848      	ldr	r0, [pc, #288]	; (85fe4 <can_initialize+0x17c>)
   85ec2:	68f9      	ldr	r1, [r7, #12]
   85ec4:	22fa      	movs	r2, #250	; 0xfa
   85ec6:	4b48      	ldr	r3, [pc, #288]	; (85fe8 <can_initialize+0x180>)
   85ec8:	4798      	blx	r3
   85eca:	4603      	mov	r3, r0
   85ecc:	2b00      	cmp	r3, #0
   85ece:	d074      	beq.n	85fba <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   85ed0:	4846      	ldr	r0, [pc, #280]	; (85fec <can_initialize+0x184>)
   85ed2:	68f9      	ldr	r1, [r7, #12]
   85ed4:	22fa      	movs	r2, #250	; 0xfa
   85ed6:	4b44      	ldr	r3, [pc, #272]	; (85fe8 <can_initialize+0x180>)
   85ed8:	4798      	blx	r3
   85eda:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85edc:	2b00      	cmp	r3, #0
   85ede:	d06c      	beq.n	85fba <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85ee0:	4840      	ldr	r0, [pc, #256]	; (85fe4 <can_initialize+0x17c>)
   85ee2:	f04f 31ff 	mov.w	r1, #4294967295
   85ee6:	4b42      	ldr	r3, [pc, #264]	; (85ff0 <can_initialize+0x188>)
   85ee8:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85eea:	4840      	ldr	r0, [pc, #256]	; (85fec <can_initialize+0x184>)
   85eec:	f04f 31ff 	mov.w	r1, #4294967295
   85ef0:	4b3f      	ldr	r3, [pc, #252]	; (85ff0 <can_initialize+0x188>)
   85ef2:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   85ef4:	202b      	movs	r0, #43	; 0x2b
   85ef6:	4b3f      	ldr	r3, [pc, #252]	; (85ff4 <can_initialize+0x18c>)
   85ef8:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   85efa:	202c      	movs	r0, #44	; 0x2c
   85efc:	4b3d      	ldr	r3, [pc, #244]	; (85ff4 <can_initialize+0x18c>)
   85efe:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   85f00:	4838      	ldr	r0, [pc, #224]	; (85fe4 <can_initialize+0x17c>)
   85f02:	4b3d      	ldr	r3, [pc, #244]	; (85ff8 <can_initialize+0x190>)
   85f04:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   85f06:	4839      	ldr	r0, [pc, #228]	; (85fec <can_initialize+0x184>)
   85f08:	4b3b      	ldr	r3, [pc, #236]	; (85ff8 <can_initialize+0x190>)
   85f0a:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   85f0c:	6938      	ldr	r0, [r7, #16]
   85f0e:	4b3b      	ldr	r3, [pc, #236]	; (85ffc <can_initialize+0x194>)
   85f10:	4798      	blx	r3
   85f12:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   85f14:	4b3a      	ldr	r3, [pc, #232]	; (86000 <can_initialize+0x198>)
   85f16:	2200      	movs	r2, #0
   85f18:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   85f1a:	4b3a      	ldr	r3, [pc, #232]	; (86004 <can_initialize+0x19c>)
   85f1c:	2200      	movs	r2, #0
   85f1e:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   85f20:	4b39      	ldr	r3, [pc, #228]	; (86008 <can_initialize+0x1a0>)
   85f22:	2200      	movs	r2, #0
   85f24:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   85f26:	4b39      	ldr	r3, [pc, #228]	; (8600c <can_initialize+0x1a4>)
   85f28:	2200      	movs	r2, #0
   85f2a:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   85f2c:	4b38      	ldr	r3, [pc, #224]	; (86010 <can_initialize+0x1a8>)
   85f2e:	2200      	movs	r2, #0
   85f30:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   85f32:	4b38      	ldr	r3, [pc, #224]	; (86014 <can_initialize+0x1ac>)
   85f34:	2200      	movs	r2, #0
   85f36:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85f38:	2300      	movs	r3, #0
   85f3a:	617b      	str	r3, [r7, #20]
   85f3c:	e016      	b.n	85f6c <can_initialize+0x104>
		{
			glob_stored_data[i] = 0;
   85f3e:	4b36      	ldr	r3, [pc, #216]	; (86018 <can_initialize+0x1b0>)
   85f40:	697a      	ldr	r2, [r7, #20]
   85f42:	2100      	movs	r1, #0
   85f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   85f48:	4b34      	ldr	r3, [pc, #208]	; (8601c <can_initialize+0x1b4>)
   85f4a:	697a      	ldr	r2, [r7, #20]
   85f4c:	2100      	movs	r1, #0
   85f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   85f52:	4b33      	ldr	r3, [pc, #204]	; (86020 <can_initialize+0x1b8>)
   85f54:	697a      	ldr	r2, [r7, #20]
   85f56:	2100      	movs	r1, #0
   85f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   85f5c:	4b31      	ldr	r3, [pc, #196]	; (86024 <can_initialize+0x1bc>)
   85f5e:	697a      	ldr	r2, [r7, #20]
   85f60:	2100      	movs	r1, #0
   85f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85f66:	697b      	ldr	r3, [r7, #20]
   85f68:	3301      	adds	r3, #1
   85f6a:	617b      	str	r3, [r7, #20]
   85f6c:	697b      	ldr	r3, [r7, #20]
   85f6e:	2b01      	cmp	r3, #1
   85f70:	d9e5      	bls.n	85f3e <can_initialize+0xd6>
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   85f72:	2364      	movs	r3, #100	; 0x64
   85f74:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   85f76:	2304      	movs	r3, #4
   85f78:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   85f7a:	68b8      	ldr	r0, [r7, #8]
   85f7c:	6879      	ldr	r1, [r7, #4]
   85f7e:	2200      	movs	r2, #0
   85f80:	4b29      	ldr	r3, [pc, #164]	; (86028 <can_initialize+0x1c0>)
   85f82:	4798      	blx	r3
   85f84:	4602      	mov	r2, r0
   85f86:	4b29      	ldr	r3, [pc, #164]	; (8602c <can_initialize+0x1c4>)
   85f88:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   85f8a:	68b8      	ldr	r0, [r7, #8]
   85f8c:	6879      	ldr	r1, [r7, #4]
   85f8e:	2200      	movs	r2, #0
   85f90:	4b25      	ldr	r3, [pc, #148]	; (86028 <can_initialize+0x1c0>)
   85f92:	4798      	blx	r3
   85f94:	4602      	mov	r2, r0
   85f96:	4b26      	ldr	r3, [pc, #152]	; (86030 <can_initialize+0x1c8>)
   85f98:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   85f9a:	68b8      	ldr	r0, [r7, #8]
   85f9c:	6879      	ldr	r1, [r7, #4]
   85f9e:	2200      	movs	r2, #0
   85fa0:	4b21      	ldr	r3, [pc, #132]	; (86028 <can_initialize+0x1c0>)
   85fa2:	4798      	blx	r3
   85fa4:	4602      	mov	r2, r0
   85fa6:	4b23      	ldr	r3, [pc, #140]	; (86034 <can_initialize+0x1cc>)
   85fa8:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   85faa:	68b8      	ldr	r0, [r7, #8]
   85fac:	6879      	ldr	r1, [r7, #4]
   85fae:	2200      	movs	r2, #0
   85fb0:	4b1d      	ldr	r3, [pc, #116]	; (86028 <can_initialize+0x1c0>)
   85fb2:	4798      	blx	r3
   85fb4:	4602      	mov	r2, r0
   85fb6:	4b20      	ldr	r3, [pc, #128]	; (86038 <can_initialize+0x1d0>)
   85fb8:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   85fba:	bf00      	nop
}
   85fbc:	3718      	adds	r7, #24
   85fbe:	46bd      	mov	sp, r7
   85fc0:	bd80      	pop	{r7, pc}
   85fc2:	bf00      	nop
   85fc4:	2007a720 	.word	0x2007a720
   85fc8:	00081b5d 	.word	0x00081b5d
   85fcc:	00081b79 	.word	0x00081b79
   85fd0:	00081bb1 	.word	0x00081bb1
   85fd4:	00081b95 	.word	0x00081b95
   85fd8:	2007a674 	.word	0x2007a674
   85fdc:	000829cd 	.word	0x000829cd
   85fe0:	000856c1 	.word	0x000856c1
   85fe4:	400b4000 	.word	0x400b4000
   85fe8:	00081d1d 	.word	0x00081d1d
   85fec:	400b8000 	.word	0x400b8000
   85ff0:	00081e01 	.word	0x00081e01
   85ff4:	00085601 	.word	0x00085601
   85ff8:	0008215d 	.word	0x0008215d
   85ffc:	0008603d 	.word	0x0008603d
   86000:	2007a670 	.word	0x2007a670
   86004:	2007a67c 	.word	0x2007a67c
   86008:	2007a6e8 	.word	0x2007a6e8
   8600c:	2007a64c 	.word	0x2007a64c
   86010:	2007a6b0 	.word	0x2007a6b0
   86014:	2007a67d 	.word	0x2007a67d
   86018:	2007a644 	.word	0x2007a644
   8601c:	2007a6f4 	.word	0x2007a6f4
   86020:	2007a680 	.word	0x2007a680
   86024:	2007a6b4 	.word	0x2007a6b4
   86028:	0008394d 	.word	0x0008394d
   8602c:	2007a688 	.word	0x2007a688
   86030:	2007a6fc 	.word	0x2007a6fc
   86034:	2007a640 	.word	0x2007a640
   86038:	2007a6ec 	.word	0x2007a6ec

0008603c <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   8603c:	b580      	push	{r7, lr}
   8603e:	b082      	sub	sp, #8
   86040:	af00      	add	r7, sp, #0
   86042:	6078      	str	r0, [r7, #4]
	//configASSERT(x);	//Check if this function was called naturally.

	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */
	/* CAN0 MB7 == COMMAND/MSG MB				*/	
	reset_mailbox_conf(&can0_mailbox);
   86044:	484a      	ldr	r0, [pc, #296]	; (86170 <can_init_mailboxes+0x134>)
   86046:	4b4b      	ldr	r3, [pc, #300]	; (86174 <can_init_mailboxes+0x138>)
   86048:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   8604a:	4b49      	ldr	r3, [pc, #292]	; (86170 <can_init_mailboxes+0x134>)
   8604c:	2207      	movs	r2, #7
   8604e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   86050:	4b47      	ldr	r3, [pc, #284]	; (86170 <can_init_mailboxes+0x134>)
   86052:	2203      	movs	r2, #3
   86054:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 10;		//Transmission Priority (Can be Changed dynamically)
   86056:	4b46      	ldr	r3, [pc, #280]	; (86170 <can_init_mailboxes+0x134>)
   86058:	220a      	movs	r2, #10
   8605a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8605c:	4b44      	ldr	r3, [pc, #272]	; (86170 <can_init_mailboxes+0x134>)
   8605e:	2200      	movs	r2, #0
   86060:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86062:	4b43      	ldr	r3, [pc, #268]	; (86170 <can_init_mailboxes+0x134>)
   86064:	2200      	movs	r2, #0
   86066:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   86068:	4843      	ldr	r0, [pc, #268]	; (86178 <can_init_mailboxes+0x13c>)
   8606a:	4941      	ldr	r1, [pc, #260]	; (86170 <can_init_mailboxes+0x134>)
   8606c:	4b43      	ldr	r3, [pc, #268]	; (8617c <can_init_mailboxes+0x140>)
   8606e:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86070:	4843      	ldr	r0, [pc, #268]	; (86180 <can_init_mailboxes+0x144>)
   86072:	4b40      	ldr	r3, [pc, #256]	; (86174 <can_init_mailboxes+0x138>)
   86074:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   86076:	4b42      	ldr	r3, [pc, #264]	; (86180 <can_init_mailboxes+0x144>)
   86078:	2200      	movs	r2, #0
   8607a:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8607c:	4b40      	ldr	r3, [pc, #256]	; (86180 <can_init_mailboxes+0x144>)
   8607e:	2201      	movs	r2, #1
   86080:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86082:	4b3f      	ldr	r3, [pc, #252]	; (86180 <can_init_mailboxes+0x144>)
   86084:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86088:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   8608a:	4b3d      	ldr	r3, [pc, #244]	; (86180 <can_init_mailboxes+0x144>)
   8608c:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   86090:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86092:	483c      	ldr	r0, [pc, #240]	; (86184 <can_init_mailboxes+0x148>)
   86094:	493a      	ldr	r1, [pc, #232]	; (86180 <can_init_mailboxes+0x144>)
   86096:	4b39      	ldr	r3, [pc, #228]	; (8617c <can_init_mailboxes+0x140>)
   86098:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8609a:	4839      	ldr	r0, [pc, #228]	; (86180 <can_init_mailboxes+0x144>)
   8609c:	4b35      	ldr	r3, [pc, #212]	; (86174 <can_init_mailboxes+0x138>)
   8609e:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   860a0:	4b37      	ldr	r3, [pc, #220]	; (86180 <can_init_mailboxes+0x144>)
   860a2:	2205      	movs	r2, #5
   860a4:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   860a6:	4b36      	ldr	r3, [pc, #216]	; (86180 <can_init_mailboxes+0x144>)
   860a8:	2201      	movs	r2, #1
   860aa:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   860ac:	4b34      	ldr	r3, [pc, #208]	; (86180 <can_init_mailboxes+0x144>)
   860ae:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   860b2:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   860b4:	4b32      	ldr	r3, [pc, #200]	; (86180 <can_init_mailboxes+0x144>)
   860b6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   860ba:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   860bc:	4831      	ldr	r0, [pc, #196]	; (86184 <can_init_mailboxes+0x148>)
   860be:	4930      	ldr	r1, [pc, #192]	; (86180 <can_init_mailboxes+0x144>)
   860c0:	4b2e      	ldr	r3, [pc, #184]	; (8617c <can_init_mailboxes+0x140>)
   860c2:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   860c4:	482e      	ldr	r0, [pc, #184]	; (86180 <can_init_mailboxes+0x144>)
   860c6:	4b2b      	ldr	r3, [pc, #172]	; (86174 <can_init_mailboxes+0x138>)
   860c8:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   860ca:	4b2d      	ldr	r3, [pc, #180]	; (86180 <can_init_mailboxes+0x144>)
   860cc:	2206      	movs	r2, #6
   860ce:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   860d0:	4b2b      	ldr	r3, [pc, #172]	; (86180 <can_init_mailboxes+0x144>)
   860d2:	2201      	movs	r2, #1
   860d4:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   860d6:	4b2a      	ldr	r3, [pc, #168]	; (86180 <can_init_mailboxes+0x144>)
   860d8:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   860dc:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   860de:	4b28      	ldr	r3, [pc, #160]	; (86180 <can_init_mailboxes+0x144>)
   860e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   860e4:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   860e6:	4827      	ldr	r0, [pc, #156]	; (86184 <can_init_mailboxes+0x148>)
   860e8:	4925      	ldr	r1, [pc, #148]	; (86180 <can_init_mailboxes+0x144>)
   860ea:	4b24      	ldr	r3, [pc, #144]	; (8617c <can_init_mailboxes+0x140>)
   860ec:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   860ee:	4824      	ldr	r0, [pc, #144]	; (86180 <can_init_mailboxes+0x144>)
   860f0:	4b20      	ldr	r3, [pc, #128]	; (86174 <can_init_mailboxes+0x138>)
   860f2:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   860f4:	4b22      	ldr	r3, [pc, #136]	; (86180 <can_init_mailboxes+0x144>)
   860f6:	2207      	movs	r2, #7
   860f8:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   860fa:	4b21      	ldr	r3, [pc, #132]	; (86180 <can_init_mailboxes+0x144>)
   860fc:	2201      	movs	r2, #1
   860fe:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86100:	4b1f      	ldr	r3, [pc, #124]	; (86180 <can_init_mailboxes+0x144>)
   86102:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86106:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   86108:	4b1d      	ldr	r3, [pc, #116]	; (86180 <can_init_mailboxes+0x144>)
   8610a:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   8610e:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86110:	481c      	ldr	r0, [pc, #112]	; (86184 <can_init_mailboxes+0x148>)
   86112:	491b      	ldr	r1, [pc, #108]	; (86180 <can_init_mailboxes+0x144>)
   86114:	4b19      	ldr	r3, [pc, #100]	; (8617c <can_init_mailboxes+0x140>)
   86116:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   86118:	481a      	ldr	r0, [pc, #104]	; (86184 <can_init_mailboxes+0x148>)
   8611a:	2101      	movs	r1, #1
   8611c:	4b1a      	ldr	r3, [pc, #104]	; (86188 <can_init_mailboxes+0x14c>)
   8611e:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   86120:	4818      	ldr	r0, [pc, #96]	; (86184 <can_init_mailboxes+0x148>)
   86122:	2120      	movs	r1, #32
   86124:	4b18      	ldr	r3, [pc, #96]	; (86188 <can_init_mailboxes+0x14c>)
   86126:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   86128:	4816      	ldr	r0, [pc, #88]	; (86184 <can_init_mailboxes+0x148>)
   8612a:	2140      	movs	r1, #64	; 0x40
   8612c:	4b16      	ldr	r3, [pc, #88]	; (86188 <can_init_mailboxes+0x14c>)
   8612e:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   86130:	4814      	ldr	r0, [pc, #80]	; (86184 <can_init_mailboxes+0x148>)
   86132:	2180      	movs	r1, #128	; 0x80
   86134:	4b14      	ldr	r3, [pc, #80]	; (86188 <can_init_mailboxes+0x14c>)
   86136:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   86138:	480d      	ldr	r0, [pc, #52]	; (86170 <can_init_mailboxes+0x134>)
   8613a:	4b0e      	ldr	r3, [pc, #56]	; (86174 <can_init_mailboxes+0x138>)
   8613c:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   8613e:	4b0c      	ldr	r3, [pc, #48]	; (86170 <can_init_mailboxes+0x134>)
   86140:	2206      	movs	r2, #6
   86142:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   86144:	4b0a      	ldr	r3, [pc, #40]	; (86170 <can_init_mailboxes+0x134>)
   86146:	2203      	movs	r2, #3
   86148:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   8614a:	4b09      	ldr	r3, [pc, #36]	; (86170 <can_init_mailboxes+0x134>)
   8614c:	2214      	movs	r2, #20
   8614e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   86150:	4b07      	ldr	r3, [pc, #28]	; (86170 <can_init_mailboxes+0x134>)
   86152:	2200      	movs	r2, #0
   86154:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86156:	4b06      	ldr	r3, [pc, #24]	; (86170 <can_init_mailboxes+0x134>)
   86158:	2200      	movs	r2, #0
   8615a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8615c:	4806      	ldr	r0, [pc, #24]	; (86178 <can_init_mailboxes+0x13c>)
   8615e:	4904      	ldr	r1, [pc, #16]	; (86170 <can_init_mailboxes+0x134>)
   86160:	4b06      	ldr	r3, [pc, #24]	; (8617c <can_init_mailboxes+0x140>)
   86162:	4798      	blx	r3

	return 1;
   86164:	2301      	movs	r3, #1
}
   86166:	4618      	mov	r0, r3
   86168:	3708      	adds	r7, #8
   8616a:	46bd      	mov	sp, r7
   8616c:	bd80      	pop	{r7, pc}
   8616e:	bf00      	nop
   86170:	2007a6bc 	.word	0x2007a6bc
   86174:	00085b4d 	.word	0x00085b4d
   86178:	400b4000 	.word	0x400b4000
   8617c:	00081ec1 	.word	0x00081ec1
   86180:	2007a650 	.word	0x2007a650
   86184:	400b8000 	.word	0x400b8000
   86188:	00081de5 	.word	0x00081de5

0008618c <high_command_generator>:

uint32_t high_command_generator(uint8_t SENDER_ID, uint8_t MessageType, uint8_t smalltype)
{
   8618c:	b480      	push	{r7}
   8618e:	b087      	sub	sp, #28
   86190:	af00      	add	r7, sp, #0
   86192:	4613      	mov	r3, r2
   86194:	4602      	mov	r2, r0
   86196:	71fa      	strb	r2, [r7, #7]
   86198:	460a      	mov	r2, r1
   8619a:	71ba      	strb	r2, [r7, #6]
   8619c:	717b      	strb	r3, [r7, #5]
	uint8_t dummy_time=0x00; //Should be replaced once RTC is ready.
   8619e:	2300      	movs	r3, #0
   861a0:	75fb      	strb	r3, [r7, #23]
	uint32_t sender, m_type, s_type;
	
	sender = (uint32_t)SENDER_ID;
   861a2:	79fb      	ldrb	r3, [r7, #7]
   861a4:	613b      	str	r3, [r7, #16]
	sender = sender << 24;
   861a6:	693b      	ldr	r3, [r7, #16]
   861a8:	061b      	lsls	r3, r3, #24
   861aa:	613b      	str	r3, [r7, #16]
		
	m_type = (uint32_t)MessageType;
   861ac:	79bb      	ldrb	r3, [r7, #6]
   861ae:	60fb      	str	r3, [r7, #12]
	m_type = m_type << 16;
   861b0:	68fb      	ldr	r3, [r7, #12]
   861b2:	041b      	lsls	r3, r3, #16
   861b4:	60fb      	str	r3, [r7, #12]
	
	s_type = (uint32_t)smalltype;
   861b6:	797b      	ldrb	r3, [r7, #5]
   861b8:	60bb      	str	r3, [r7, #8]
	s_type = s_type << 8;
   861ba:	68bb      	ldr	r3, [r7, #8]
   861bc:	021b      	lsls	r3, r3, #8
   861be:	60bb      	str	r3, [r7, #8]
	
	return sender + m_type + s_type + dummy_time;
   861c0:	693a      	ldr	r2, [r7, #16]
   861c2:	68fb      	ldr	r3, [r7, #12]
   861c4:	441a      	add	r2, r3
   861c6:	68bb      	ldr	r3, [r7, #8]
   861c8:	441a      	add	r2, r3
   861ca:	7dfb      	ldrb	r3, [r7, #23]
   861cc:	4413      	add	r3, r2
}
   861ce:	4618      	mov	r0, r3
   861d0:	371c      	adds	r7, #28
   861d2:	46bd      	mov	sp, r7
   861d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   861d8:	4770      	bx	lr
   861da:	bf00      	nop

000861dc <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   861dc:	b480      	push	{r7}
   861de:	b085      	sub	sp, #20
   861e0:	af00      	add	r7, sp, #0
   861e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   861e4:	687b      	ldr	r3, [r7, #4]
   861e6:	f003 0307 	and.w	r3, r3, #7
   861ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   861ec:	4b0c      	ldr	r3, [pc, #48]	; (86220 <NVIC_SetPriorityGrouping+0x44>)
   861ee:	68db      	ldr	r3, [r3, #12]
   861f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   861f2:	68ba      	ldr	r2, [r7, #8]
   861f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   861f8:	4013      	ands	r3, r2
   861fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   861fc:	68fb      	ldr	r3, [r7, #12]
   861fe:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   86200:	68bb      	ldr	r3, [r7, #8]
   86202:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   86204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   86208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   8620c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   8620e:	4b04      	ldr	r3, [pc, #16]	; (86220 <NVIC_SetPriorityGrouping+0x44>)
   86210:	68ba      	ldr	r2, [r7, #8]
   86212:	60da      	str	r2, [r3, #12]
}
   86214:	3714      	adds	r7, #20
   86216:	46bd      	mov	sp, r7
   86218:	f85d 7b04 	ldr.w	r7, [sp], #4
   8621c:	4770      	bx	lr
   8621e:	bf00      	nop
   86220:	e000ed00 	.word	0xe000ed00

00086224 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   86224:	b480      	push	{r7}
   86226:	b083      	sub	sp, #12
   86228:	af00      	add	r7, sp, #0
   8622a:	4603      	mov	r3, r0
   8622c:	6039      	str	r1, [r7, #0]
   8622e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   86230:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86234:	2b00      	cmp	r3, #0
   86236:	da0b      	bge.n	86250 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   86238:	490d      	ldr	r1, [pc, #52]	; (86270 <NVIC_SetPriority+0x4c>)
   8623a:	79fb      	ldrb	r3, [r7, #7]
   8623c:	f003 030f 	and.w	r3, r3, #15
   86240:	3b04      	subs	r3, #4
   86242:	683a      	ldr	r2, [r7, #0]
   86244:	b2d2      	uxtb	r2, r2
   86246:	0112      	lsls	r2, r2, #4
   86248:	b2d2      	uxtb	r2, r2
   8624a:	440b      	add	r3, r1
   8624c:	761a      	strb	r2, [r3, #24]
   8624e:	e009      	b.n	86264 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86250:	4908      	ldr	r1, [pc, #32]	; (86274 <NVIC_SetPriority+0x50>)
   86252:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86256:	683a      	ldr	r2, [r7, #0]
   86258:	b2d2      	uxtb	r2, r2
   8625a:	0112      	lsls	r2, r2, #4
   8625c:	b2d2      	uxtb	r2, r2
   8625e:	440b      	add	r3, r1
   86260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   86264:	370c      	adds	r7, #12
   86266:	46bd      	mov	sp, r7
   86268:	f85d 7b04 	ldr.w	r7, [sp], #4
   8626c:	4770      	bx	lr
   8626e:	bf00      	nop
   86270:	e000ed00 	.word	0xe000ed00
   86274:	e000e100 	.word	0xe000e100

00086278 <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   86278:	b480      	push	{r7}
   8627a:	b083      	sub	sp, #12
   8627c:	af00      	add	r7, sp, #0
   8627e:	4603      	mov	r3, r0
   86280:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   86282:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86286:	2b00      	cmp	r3, #0
   86288:	da0a      	bge.n	862a0 <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   8628a:	4a0d      	ldr	r2, [pc, #52]	; (862c0 <NVIC_GetPriority+0x48>)
   8628c:	79fb      	ldrb	r3, [r7, #7]
   8628e:	f003 030f 	and.w	r3, r3, #15
   86292:	3b04      	subs	r3, #4
   86294:	4413      	add	r3, r2
   86296:	7e1b      	ldrb	r3, [r3, #24]
   86298:	b2db      	uxtb	r3, r3
   8629a:	091b      	lsrs	r3, r3, #4
   8629c:	b2db      	uxtb	r3, r3
   8629e:	e008      	b.n	862b2 <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   862a0:	4a08      	ldr	r2, [pc, #32]	; (862c4 <NVIC_GetPriority+0x4c>)
   862a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   862a6:	4413      	add	r3, r2
   862a8:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   862ac:	b2db      	uxtb	r3, r3
   862ae:	091b      	lsrs	r3, r3, #4
   862b0:	b2db      	uxtb	r3, r3
}
   862b2:	4618      	mov	r0, r3
   862b4:	370c      	adds	r7, #12
   862b6:	46bd      	mov	sp, r7
   862b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   862bc:	4770      	bx	lr
   862be:	bf00      	nop
   862c0:	e000ed00 	.word	0xe000ed00
   862c4:	e000e100 	.word	0xe000e100

000862c8 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   862c8:	b580      	push	{r7, lr}
   862ca:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   862cc:	4b09      	ldr	r3, [pc, #36]	; (862f4 <main+0x2c>)
   862ce:	2200      	movs	r2, #0
   862d0:	601a      	str	r2, [r3, #0]
	safe_mode();
   862d2:	4b09      	ldr	r3, [pc, #36]	; (862f8 <main+0x30>)
   862d4:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   862d6:	4b09      	ldr	r3, [pc, #36]	; (862fc <main+0x34>)
   862d8:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   862da:	4b09      	ldr	r3, [pc, #36]	; (86300 <main+0x38>)
   862dc:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   862de:	4b09      	ldr	r3, [pc, #36]	; (86304 <main+0x3c>)
   862e0:	4798      	blx	r3
	
	/* Create Tasks */
	//my_blink();
	command_loop();
   862e2:	4b09      	ldr	r3, [pc, #36]	; (86308 <main+0x40>)
   862e4:	4798      	blx	r3
	housekeep();
   862e6:	4b09      	ldr	r3, [pc, #36]	; (8630c <main+0x44>)
   862e8:	4798      	blx	r3
	data_test();
   862ea:	4b09      	ldr	r3, [pc, #36]	; (86310 <main+0x48>)
   862ec:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   862ee:	4b09      	ldr	r3, [pc, #36]	; (86314 <main+0x4c>)
   862f0:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   862f2:	e7fe      	b.n	862f2 <main+0x2a>
   862f4:	2007a6e4 	.word	0x2007a6e4
   862f8:	00086319 	.word	0x00086319
   862fc:	0008640d 	.word	0x0008640d
   86300:	000863a9 	.word	0x000863a9
   86304:	000863d9 	.word	0x000863d9
   86308:	0008060d 	.word	0x0008060d
   8630c:	000808ed 	.word	0x000808ed
   86310:	00080731 	.word	0x00080731
   86314:	000843c1 	.word	0x000843c1

00086318 <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   86318:	b590      	push	{r4, r7, lr}
   8631a:	b087      	sub	sp, #28
   8631c:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   8631e:	4b19      	ldr	r3, [pc, #100]	; (86384 <safe_mode+0x6c>)
   86320:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   86322:	2000      	movs	r0, #0
   86324:	4b18      	ldr	r3, [pc, #96]	; (86388 <safe_mode+0x70>)
   86326:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   86328:	4b18      	ldr	r3, [pc, #96]	; (8638c <safe_mode+0x74>)
   8632a:	4798      	blx	r3
	
	uint32_t timeOut, low, high;
	
	timeOut = 80000000;
   8632c:	4b18      	ldr	r3, [pc, #96]	; (86390 <safe_mode+0x78>)
   8632e:	617b      	str	r3, [r7, #20]
	
	
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   86330:	4b18      	ldr	r3, [pc, #96]	; (86394 <safe_mode+0x7c>)
   86332:	4798      	blx	r3
		
		
	//Debugging Stuff
	uint16_t MEM_LOCATION = 0x00080000;
   86334:	2300      	movs	r3, #0
   86336:	827b      	strh	r3, [r7, #18]
	size_t SIZE = 10;
   86338:	230a      	movs	r3, #10
   8633a:	60fb      	str	r3, [r7, #12]
	
	uint32_t a;
	a = fletcher32(MEM_LOCATION, SIZE);
   8633c:	8a7b      	ldrh	r3, [r7, #18]
   8633e:	4618      	mov	r0, r3
   86340:	68f9      	ldr	r1, [r7, #12]
   86342:	4b15      	ldr	r3, [pc, #84]	; (86398 <safe_mode+0x80>)
   86344:	4798      	blx	r3
   86346:	60b8      	str	r0, [r7, #8]
	
	
	while(SAFE_MODE)
   86348:	e014      	b.n	86374 <safe_mode+0x5c>
	{
		if(timeOut--)
   8634a:	697b      	ldr	r3, [r7, #20]
   8634c:	1e5a      	subs	r2, r3, #1
   8634e:	617a      	str	r2, [r7, #20]
   86350:	2b00      	cmp	r3, #0
   86352:	d00f      	beq.n	86374 <safe_mode+0x5c>
		{
			high = high_command_generator(OBC_ID, MT_COM, SAFE_MODE_VAR);
   86354:	2003      	movs	r0, #3
   86356:	2102      	movs	r1, #2
   86358:	2209      	movs	r2, #9
   8635a:	4b10      	ldr	r3, [pc, #64]	; (8639c <safe_mode+0x84>)
   8635c:	4798      	blx	r3
   8635e:	6078      	str	r0, [r7, #4]
			low = a;
   86360:	68bb      	ldr	r3, [r7, #8]
   86362:	603b      	str	r3, [r7, #0]
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
   86364:	6838      	ldr	r0, [r7, #0]
   86366:	6879      	ldr	r1, [r7, #4]
   86368:	2214      	movs	r2, #20
   8636a:	230a      	movs	r3, #10
   8636c:	4c0c      	ldr	r4, [pc, #48]	; (863a0 <safe_mode+0x88>)
   8636e:	47a0      	blx	r4
			timeOut = 80000000;
   86370:	4b07      	ldr	r3, [pc, #28]	; (86390 <safe_mode+0x78>)
   86372:	617b      	str	r3, [r7, #20]
	
	uint32_t a;
	a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   86374:	4b0b      	ldr	r3, [pc, #44]	; (863a4 <safe_mode+0x8c>)
   86376:	681b      	ldr	r3, [r3, #0]
   86378:	2b00      	cmp	r3, #0
   8637a:	d1e6      	bne.n	8634a <safe_mode+0x32>
			low = a;
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
	}
}
   8637c:	371c      	adds	r7, #28
   8637e:	46bd      	mov	sp, r7
   86380:	bd90      	pop	{r4, r7, pc}
   86382:	bf00      	nop
   86384:	000819d1 	.word	0x000819d1
   86388:	000861dd 	.word	0x000861dd
   8638c:	00081a39 	.word	0x00081a39
   86390:	04c4b400 	.word	0x04c4b400
   86394:	00085e69 	.word	0x00085e69
   86398:	00080571 	.word	0x00080571
   8639c:	0008618d 	.word	0x0008618d
   863a0:	00085ba1 	.word	0x00085ba1
   863a4:	2007a6e4 	.word	0x2007a6e4

000863a8 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   863a8:	b580      	push	{r7, lr}
   863aa:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   863ac:	4b05      	ldr	r3, [pc, #20]	; (863c4 <prvSetupHardware+0x1c>)
   863ae:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   863b0:	4b05      	ldr	r3, [pc, #20]	; (863c8 <prvSetupHardware+0x20>)
   863b2:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   863b4:	4b05      	ldr	r3, [pc, #20]	; (863cc <prvSetupHardware+0x24>)
   863b6:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   863b8:	4b05      	ldr	r3, [pc, #20]	; (863d0 <prvSetupHardware+0x28>)
   863ba:	4798      	blx	r3
	
	/* Initialize RTC registers and set the default initial time. */
	rtc_init(DS3234_INTCN);
   863bc:	2004      	movs	r0, #4
   863be:	4b05      	ldr	r3, [pc, #20]	; (863d4 <prvSetupHardware+0x2c>)
   863c0:	4798      	blx	r3
}
   863c2:	bd80      	pop	{r7, pc}
   863c4:	00081aa1 	.word	0x00081aa1
   863c8:	000809f5 	.word	0x000809f5
   863cc:	00081651 	.word	0x00081651
   863d0:	00080fc5 	.word	0x00080fc5
   863d4:	00080af1 	.word	0x00080af1

000863d8 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   863d8:	b598      	push	{r3, r4, r7, lr}
   863da:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   863dc:	2001      	movs	r0, #1
   863de:	2100      	movs	r1, #0
   863e0:	2203      	movs	r2, #3
   863e2:	4b07      	ldr	r3, [pc, #28]	; (86400 <prvInitializeMutexes+0x28>)
   863e4:	4798      	blx	r3
   863e6:	4602      	mov	r2, r0
   863e8:	4b06      	ldr	r3, [pc, #24]	; (86404 <prvInitializeMutexes+0x2c>)
   863ea:	601a      	str	r2, [r3, #0]
	xSemaphoreGive(Can1_Mutex);
   863ec:	4b05      	ldr	r3, [pc, #20]	; (86404 <prvInitializeMutexes+0x2c>)
   863ee:	681b      	ldr	r3, [r3, #0]
   863f0:	4618      	mov	r0, r3
   863f2:	2100      	movs	r1, #0
   863f4:	2200      	movs	r2, #0
   863f6:	2300      	movs	r3, #0
   863f8:	4c03      	ldr	r4, [pc, #12]	; (86408 <prvInitializeMutexes+0x30>)
   863fa:	47a0      	blx	r4
	return;
   863fc:	bf00      	nop
}
   863fe:	bd98      	pop	{r3, r4, r7, pc}
   86400:	0008394d 	.word	0x0008394d
   86404:	2007a6ac 	.word	0x2007a6ac
   86408:	000839d9 	.word	0x000839d9

0008640c <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   8640c:	b580      	push	{r7, lr}
   8640e:	b082      	sub	sp, #8
   86410:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   86412:	230b      	movs	r3, #11
   86414:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   86416:	232c      	movs	r3, #44	; 0x2c
   86418:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   8641a:	232b      	movs	r3, #43	; 0x2b
   8641c:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   8641e:	f997 3003 	ldrsb.w	r3, [r7, #3]
   86422:	4618      	mov	r0, r3
   86424:	6879      	ldr	r1, [r7, #4]
   86426:	4b0a      	ldr	r3, [pc, #40]	; (86450 <prvInitializeInterruptPriorities+0x44>)
   86428:	4798      	blx	r3
	
	priority = 12;	
   8642a:	230c      	movs	r3, #12
   8642c:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   8642e:	f997 3002 	ldrsb.w	r3, [r7, #2]
   86432:	4618      	mov	r0, r3
   86434:	6879      	ldr	r1, [r7, #4]
   86436:	4b06      	ldr	r3, [pc, #24]	; (86450 <prvInitializeInterruptPriorities+0x44>)
   86438:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   8643a:	f997 3003 	ldrsb.w	r3, [r7, #3]
   8643e:	4618      	mov	r0, r3
   86440:	4b04      	ldr	r3, [pc, #16]	; (86454 <prvInitializeInterruptPriorities+0x48>)
   86442:	4798      	blx	r3
   86444:	6078      	str	r0, [r7, #4]
	
	return;
   86446:	bf00      	nop
}
   86448:	3708      	adds	r7, #8
   8644a:	46bd      	mov	sp, r7
   8644c:	bd80      	pop	{r7, pc}
   8644e:	bf00      	nop
   86450:	00086225 	.word	0x00086225
   86454:	00086279 	.word	0x00086279

00086458 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   86458:	b580      	push	{r7, lr}
   8645a:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   8645c:	4b01      	ldr	r3, [pc, #4]	; (86464 <vApplicationMallocFailedHook+0xc>)
   8645e:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   86460:	e7fe      	b.n	86460 <vApplicationMallocFailedHook+0x8>
   86462:	bf00      	nop
   86464:	000833d1 	.word	0x000833d1

00086468 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   86468:	b580      	push	{r7, lr}
   8646a:	b082      	sub	sp, #8
   8646c:	af00      	add	r7, sp, #0
   8646e:	6078      	str	r0, [r7, #4]
   86470:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   86472:	4b01      	ldr	r3, [pc, #4]	; (86478 <vApplicationStackOverflowHook+0x10>)
   86474:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   86476:	e7fe      	b.n	86476 <vApplicationStackOverflowHook+0xe>
   86478:	000833d1 	.word	0x000833d1

0008647c <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   8647c:	b580      	push	{r7, lr}
   8647e:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   86480:	4804      	ldr	r0, [pc, #16]	; (86494 <WDT_Handler+0x18>)
   86482:	4b05      	ldr	r3, [pc, #20]	; (86498 <WDT_Handler+0x1c>)
   86484:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   86486:	2055      	movs	r0, #85	; 0x55
   86488:	4b04      	ldr	r3, [pc, #16]	; (8649c <WDT_Handler+0x20>)
   8648a:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   8648c:	4801      	ldr	r0, [pc, #4]	; (86494 <WDT_Handler+0x18>)
   8648e:	4b04      	ldr	r3, [pc, #16]	; (864a0 <WDT_Handler+0x24>)
   86490:	4798      	blx	r3
}
   86492:	bd80      	pop	{r7, pc}
   86494:	400e1a50 	.word	0x400e1a50
   86498:	00082d61 	.word	0x00082d61
   8649c:	000823e1 	.word	0x000823e1
   864a0:	00082d39 	.word	0x00082d39

000864a4 <__aeabi_frsub>:
   864a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   864a8:	e002      	b.n	864b0 <__addsf3>
   864aa:	bf00      	nop

000864ac <__aeabi_fsub>:
   864ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000864b0 <__addsf3>:
   864b0:	0042      	lsls	r2, r0, #1
   864b2:	bf1f      	itttt	ne
   864b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   864b8:	ea92 0f03 	teqne	r2, r3
   864bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   864c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   864c4:	d06a      	beq.n	8659c <__addsf3+0xec>
   864c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
   864ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   864ce:	bfc1      	itttt	gt
   864d0:	18d2      	addgt	r2, r2, r3
   864d2:	4041      	eorgt	r1, r0
   864d4:	4048      	eorgt	r0, r1
   864d6:	4041      	eorgt	r1, r0
   864d8:	bfb8      	it	lt
   864da:	425b      	neglt	r3, r3
   864dc:	2b19      	cmp	r3, #25
   864de:	bf88      	it	hi
   864e0:	4770      	bxhi	lr
   864e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   864e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   864ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   864ee:	bf18      	it	ne
   864f0:	4240      	negne	r0, r0
   864f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   864f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   864fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   864fe:	bf18      	it	ne
   86500:	4249      	negne	r1, r1
   86502:	ea92 0f03 	teq	r2, r3
   86506:	d03f      	beq.n	86588 <__addsf3+0xd8>
   86508:	f1a2 0201 	sub.w	r2, r2, #1
   8650c:	fa41 fc03 	asr.w	ip, r1, r3
   86510:	eb10 000c 	adds.w	r0, r0, ip
   86514:	f1c3 0320 	rsb	r3, r3, #32
   86518:	fa01 f103 	lsl.w	r1, r1, r3
   8651c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86520:	d502      	bpl.n	86528 <__addsf3+0x78>
   86522:	4249      	negs	r1, r1
   86524:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   86528:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8652c:	d313      	bcc.n	86556 <__addsf3+0xa6>
   8652e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   86532:	d306      	bcc.n	86542 <__addsf3+0x92>
   86534:	0840      	lsrs	r0, r0, #1
   86536:	ea4f 0131 	mov.w	r1, r1, rrx
   8653a:	f102 0201 	add.w	r2, r2, #1
   8653e:	2afe      	cmp	r2, #254	; 0xfe
   86540:	d251      	bcs.n	865e6 <__addsf3+0x136>
   86542:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   86546:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8654a:	bf08      	it	eq
   8654c:	f020 0001 	biceq.w	r0, r0, #1
   86550:	ea40 0003 	orr.w	r0, r0, r3
   86554:	4770      	bx	lr
   86556:	0049      	lsls	r1, r1, #1
   86558:	eb40 0000 	adc.w	r0, r0, r0
   8655c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   86560:	f1a2 0201 	sub.w	r2, r2, #1
   86564:	d1ed      	bne.n	86542 <__addsf3+0x92>
   86566:	fab0 fc80 	clz	ip, r0
   8656a:	f1ac 0c08 	sub.w	ip, ip, #8
   8656e:	ebb2 020c 	subs.w	r2, r2, ip
   86572:	fa00 f00c 	lsl.w	r0, r0, ip
   86576:	bfaa      	itet	ge
   86578:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8657c:	4252      	neglt	r2, r2
   8657e:	4318      	orrge	r0, r3
   86580:	bfbc      	itt	lt
   86582:	40d0      	lsrlt	r0, r2
   86584:	4318      	orrlt	r0, r3
   86586:	4770      	bx	lr
   86588:	f092 0f00 	teq	r2, #0
   8658c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   86590:	bf06      	itte	eq
   86592:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   86596:	3201      	addeq	r2, #1
   86598:	3b01      	subne	r3, #1
   8659a:	e7b5      	b.n	86508 <__addsf3+0x58>
   8659c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   865a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   865a4:	bf18      	it	ne
   865a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   865aa:	d021      	beq.n	865f0 <__addsf3+0x140>
   865ac:	ea92 0f03 	teq	r2, r3
   865b0:	d004      	beq.n	865bc <__addsf3+0x10c>
   865b2:	f092 0f00 	teq	r2, #0
   865b6:	bf08      	it	eq
   865b8:	4608      	moveq	r0, r1
   865ba:	4770      	bx	lr
   865bc:	ea90 0f01 	teq	r0, r1
   865c0:	bf1c      	itt	ne
   865c2:	2000      	movne	r0, #0
   865c4:	4770      	bxne	lr
   865c6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   865ca:	d104      	bne.n	865d6 <__addsf3+0x126>
   865cc:	0040      	lsls	r0, r0, #1
   865ce:	bf28      	it	cs
   865d0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   865d4:	4770      	bx	lr
   865d6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   865da:	bf3c      	itt	cc
   865dc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   865e0:	4770      	bxcc	lr
   865e2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   865e6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   865ea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   865ee:	4770      	bx	lr
   865f0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   865f4:	bf16      	itet	ne
   865f6:	4608      	movne	r0, r1
   865f8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   865fc:	4601      	movne	r1, r0
   865fe:	0242      	lsls	r2, r0, #9
   86600:	bf06      	itte	eq
   86602:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86606:	ea90 0f01 	teqeq	r0, r1
   8660a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8660e:	4770      	bx	lr

00086610 <__aeabi_ui2f>:
   86610:	f04f 0300 	mov.w	r3, #0
   86614:	e004      	b.n	86620 <__aeabi_i2f+0x8>
   86616:	bf00      	nop

00086618 <__aeabi_i2f>:
   86618:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8661c:	bf48      	it	mi
   8661e:	4240      	negmi	r0, r0
   86620:	ea5f 0c00 	movs.w	ip, r0
   86624:	bf08      	it	eq
   86626:	4770      	bxeq	lr
   86628:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8662c:	4601      	mov	r1, r0
   8662e:	f04f 0000 	mov.w	r0, #0
   86632:	e01c      	b.n	8666e <__aeabi_l2f+0x2a>

00086634 <__aeabi_ul2f>:
   86634:	ea50 0201 	orrs.w	r2, r0, r1
   86638:	bf08      	it	eq
   8663a:	4770      	bxeq	lr
   8663c:	f04f 0300 	mov.w	r3, #0
   86640:	e00a      	b.n	86658 <__aeabi_l2f+0x14>
   86642:	bf00      	nop

00086644 <__aeabi_l2f>:
   86644:	ea50 0201 	orrs.w	r2, r0, r1
   86648:	bf08      	it	eq
   8664a:	4770      	bxeq	lr
   8664c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   86650:	d502      	bpl.n	86658 <__aeabi_l2f+0x14>
   86652:	4240      	negs	r0, r0
   86654:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86658:	ea5f 0c01 	movs.w	ip, r1
   8665c:	bf02      	ittt	eq
   8665e:	4684      	moveq	ip, r0
   86660:	4601      	moveq	r1, r0
   86662:	2000      	moveq	r0, #0
   86664:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   86668:	bf08      	it	eq
   8666a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8666e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   86672:	fabc f28c 	clz	r2, ip
   86676:	3a08      	subs	r2, #8
   86678:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8667c:	db10      	blt.n	866a0 <__aeabi_l2f+0x5c>
   8667e:	fa01 fc02 	lsl.w	ip, r1, r2
   86682:	4463      	add	r3, ip
   86684:	fa00 fc02 	lsl.w	ip, r0, r2
   86688:	f1c2 0220 	rsb	r2, r2, #32
   8668c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86690:	fa20 f202 	lsr.w	r2, r0, r2
   86694:	eb43 0002 	adc.w	r0, r3, r2
   86698:	bf08      	it	eq
   8669a:	f020 0001 	biceq.w	r0, r0, #1
   8669e:	4770      	bx	lr
   866a0:	f102 0220 	add.w	r2, r2, #32
   866a4:	fa01 fc02 	lsl.w	ip, r1, r2
   866a8:	f1c2 0220 	rsb	r2, r2, #32
   866ac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   866b0:	fa21 f202 	lsr.w	r2, r1, r2
   866b4:	eb43 0002 	adc.w	r0, r3, r2
   866b8:	bf08      	it	eq
   866ba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   866be:	4770      	bx	lr

000866c0 <__aeabi_fmul>:
   866c0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   866c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   866c8:	bf1e      	ittt	ne
   866ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   866ce:	ea92 0f0c 	teqne	r2, ip
   866d2:	ea93 0f0c 	teqne	r3, ip
   866d6:	d06f      	beq.n	867b8 <__aeabi_fmul+0xf8>
   866d8:	441a      	add	r2, r3
   866da:	ea80 0c01 	eor.w	ip, r0, r1
   866de:	0240      	lsls	r0, r0, #9
   866e0:	bf18      	it	ne
   866e2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   866e6:	d01e      	beq.n	86726 <__aeabi_fmul+0x66>
   866e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   866ec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   866f0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   866f4:	fba0 3101 	umull	r3, r1, r0, r1
   866f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   866fc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   86700:	bf3e      	ittt	cc
   86702:	0049      	lslcc	r1, r1, #1
   86704:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86708:	005b      	lslcc	r3, r3, #1
   8670a:	ea40 0001 	orr.w	r0, r0, r1
   8670e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   86712:	2afd      	cmp	r2, #253	; 0xfd
   86714:	d81d      	bhi.n	86752 <__aeabi_fmul+0x92>
   86716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8671a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8671e:	bf08      	it	eq
   86720:	f020 0001 	biceq.w	r0, r0, #1
   86724:	4770      	bx	lr
   86726:	f090 0f00 	teq	r0, #0
   8672a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8672e:	bf08      	it	eq
   86730:	0249      	lsleq	r1, r1, #9
   86732:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86736:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8673a:	3a7f      	subs	r2, #127	; 0x7f
   8673c:	bfc2      	ittt	gt
   8673e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86742:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86746:	4770      	bxgt	lr
   86748:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8674c:	f04f 0300 	mov.w	r3, #0
   86750:	3a01      	subs	r2, #1
   86752:	dc5d      	bgt.n	86810 <__aeabi_fmul+0x150>
   86754:	f112 0f19 	cmn.w	r2, #25
   86758:	bfdc      	itt	le
   8675a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8675e:	4770      	bxle	lr
   86760:	f1c2 0200 	rsb	r2, r2, #0
   86764:	0041      	lsls	r1, r0, #1
   86766:	fa21 f102 	lsr.w	r1, r1, r2
   8676a:	f1c2 0220 	rsb	r2, r2, #32
   8676e:	fa00 fc02 	lsl.w	ip, r0, r2
   86772:	ea5f 0031 	movs.w	r0, r1, rrx
   86776:	f140 0000 	adc.w	r0, r0, #0
   8677a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8677e:	bf08      	it	eq
   86780:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86784:	4770      	bx	lr
   86786:	f092 0f00 	teq	r2, #0
   8678a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8678e:	bf02      	ittt	eq
   86790:	0040      	lsleq	r0, r0, #1
   86792:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86796:	3a01      	subeq	r2, #1
   86798:	d0f9      	beq.n	8678e <__aeabi_fmul+0xce>
   8679a:	ea40 000c 	orr.w	r0, r0, ip
   8679e:	f093 0f00 	teq	r3, #0
   867a2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   867a6:	bf02      	ittt	eq
   867a8:	0049      	lsleq	r1, r1, #1
   867aa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   867ae:	3b01      	subeq	r3, #1
   867b0:	d0f9      	beq.n	867a6 <__aeabi_fmul+0xe6>
   867b2:	ea41 010c 	orr.w	r1, r1, ip
   867b6:	e78f      	b.n	866d8 <__aeabi_fmul+0x18>
   867b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   867bc:	ea92 0f0c 	teq	r2, ip
   867c0:	bf18      	it	ne
   867c2:	ea93 0f0c 	teqne	r3, ip
   867c6:	d00a      	beq.n	867de <__aeabi_fmul+0x11e>
   867c8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   867cc:	bf18      	it	ne
   867ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   867d2:	d1d8      	bne.n	86786 <__aeabi_fmul+0xc6>
   867d4:	ea80 0001 	eor.w	r0, r0, r1
   867d8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   867dc:	4770      	bx	lr
   867de:	f090 0f00 	teq	r0, #0
   867e2:	bf17      	itett	ne
   867e4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   867e8:	4608      	moveq	r0, r1
   867ea:	f091 0f00 	teqne	r1, #0
   867ee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   867f2:	d014      	beq.n	8681e <__aeabi_fmul+0x15e>
   867f4:	ea92 0f0c 	teq	r2, ip
   867f8:	d101      	bne.n	867fe <__aeabi_fmul+0x13e>
   867fa:	0242      	lsls	r2, r0, #9
   867fc:	d10f      	bne.n	8681e <__aeabi_fmul+0x15e>
   867fe:	ea93 0f0c 	teq	r3, ip
   86802:	d103      	bne.n	8680c <__aeabi_fmul+0x14c>
   86804:	024b      	lsls	r3, r1, #9
   86806:	bf18      	it	ne
   86808:	4608      	movne	r0, r1
   8680a:	d108      	bne.n	8681e <__aeabi_fmul+0x15e>
   8680c:	ea80 0001 	eor.w	r0, r0, r1
   86810:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86814:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86818:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8681c:	4770      	bx	lr
   8681e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86822:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   86826:	4770      	bx	lr

00086828 <__aeabi_fdiv>:
   86828:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8682c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86830:	bf1e      	ittt	ne
   86832:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86836:	ea92 0f0c 	teqne	r2, ip
   8683a:	ea93 0f0c 	teqne	r3, ip
   8683e:	d069      	beq.n	86914 <__aeabi_fdiv+0xec>
   86840:	eba2 0203 	sub.w	r2, r2, r3
   86844:	ea80 0c01 	eor.w	ip, r0, r1
   86848:	0249      	lsls	r1, r1, #9
   8684a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8684e:	d037      	beq.n	868c0 <__aeabi_fdiv+0x98>
   86850:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   86854:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   86858:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   8685c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86860:	428b      	cmp	r3, r1
   86862:	bf38      	it	cc
   86864:	005b      	lslcc	r3, r3, #1
   86866:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8686a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8686e:	428b      	cmp	r3, r1
   86870:	bf24      	itt	cs
   86872:	1a5b      	subcs	r3, r3, r1
   86874:	ea40 000c 	orrcs.w	r0, r0, ip
   86878:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8687c:	bf24      	itt	cs
   8687e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   86882:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   86886:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8688a:	bf24      	itt	cs
   8688c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   86890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86894:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   86898:	bf24      	itt	cs
   8689a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8689e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   868a2:	011b      	lsls	r3, r3, #4
   868a4:	bf18      	it	ne
   868a6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   868aa:	d1e0      	bne.n	8686e <__aeabi_fdiv+0x46>
   868ac:	2afd      	cmp	r2, #253	; 0xfd
   868ae:	f63f af50 	bhi.w	86752 <__aeabi_fmul+0x92>
   868b2:	428b      	cmp	r3, r1
   868b4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   868b8:	bf08      	it	eq
   868ba:	f020 0001 	biceq.w	r0, r0, #1
   868be:	4770      	bx	lr
   868c0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   868c4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   868c8:	327f      	adds	r2, #127	; 0x7f
   868ca:	bfc2      	ittt	gt
   868cc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   868d0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   868d4:	4770      	bxgt	lr
   868d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   868da:	f04f 0300 	mov.w	r3, #0
   868de:	3a01      	subs	r2, #1
   868e0:	e737      	b.n	86752 <__aeabi_fmul+0x92>
   868e2:	f092 0f00 	teq	r2, #0
   868e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   868ea:	bf02      	ittt	eq
   868ec:	0040      	lsleq	r0, r0, #1
   868ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   868f2:	3a01      	subeq	r2, #1
   868f4:	d0f9      	beq.n	868ea <__aeabi_fdiv+0xc2>
   868f6:	ea40 000c 	orr.w	r0, r0, ip
   868fa:	f093 0f00 	teq	r3, #0
   868fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86902:	bf02      	ittt	eq
   86904:	0049      	lsleq	r1, r1, #1
   86906:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8690a:	3b01      	subeq	r3, #1
   8690c:	d0f9      	beq.n	86902 <__aeabi_fdiv+0xda>
   8690e:	ea41 010c 	orr.w	r1, r1, ip
   86912:	e795      	b.n	86840 <__aeabi_fdiv+0x18>
   86914:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86918:	ea92 0f0c 	teq	r2, ip
   8691c:	d108      	bne.n	86930 <__aeabi_fdiv+0x108>
   8691e:	0242      	lsls	r2, r0, #9
   86920:	f47f af7d 	bne.w	8681e <__aeabi_fmul+0x15e>
   86924:	ea93 0f0c 	teq	r3, ip
   86928:	f47f af70 	bne.w	8680c <__aeabi_fmul+0x14c>
   8692c:	4608      	mov	r0, r1
   8692e:	e776      	b.n	8681e <__aeabi_fmul+0x15e>
   86930:	ea93 0f0c 	teq	r3, ip
   86934:	d104      	bne.n	86940 <__aeabi_fdiv+0x118>
   86936:	024b      	lsls	r3, r1, #9
   86938:	f43f af4c 	beq.w	867d4 <__aeabi_fmul+0x114>
   8693c:	4608      	mov	r0, r1
   8693e:	e76e      	b.n	8681e <__aeabi_fmul+0x15e>
   86940:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86944:	bf18      	it	ne
   86946:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8694a:	d1ca      	bne.n	868e2 <__aeabi_fdiv+0xba>
   8694c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   86950:	f47f af5c 	bne.w	8680c <__aeabi_fmul+0x14c>
   86954:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   86958:	f47f af3c 	bne.w	867d4 <__aeabi_fmul+0x114>
   8695c:	e75f      	b.n	8681e <__aeabi_fmul+0x15e>
   8695e:	bf00      	nop

00086960 <__gesf2>:
   86960:	f04f 3cff 	mov.w	ip, #4294967295
   86964:	e006      	b.n	86974 <__cmpsf2+0x4>
   86966:	bf00      	nop

00086968 <__lesf2>:
   86968:	f04f 0c01 	mov.w	ip, #1
   8696c:	e002      	b.n	86974 <__cmpsf2+0x4>
   8696e:	bf00      	nop

00086970 <__cmpsf2>:
   86970:	f04f 0c01 	mov.w	ip, #1
   86974:	f84d cd04 	str.w	ip, [sp, #-4]!
   86978:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8697c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86980:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86984:	bf18      	it	ne
   86986:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8698a:	d011      	beq.n	869b0 <__cmpsf2+0x40>
   8698c:	b001      	add	sp, #4
   8698e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   86992:	bf18      	it	ne
   86994:	ea90 0f01 	teqne	r0, r1
   86998:	bf58      	it	pl
   8699a:	ebb2 0003 	subspl.w	r0, r2, r3
   8699e:	bf88      	it	hi
   869a0:	17c8      	asrhi	r0, r1, #31
   869a2:	bf38      	it	cc
   869a4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   869a8:	bf18      	it	ne
   869aa:	f040 0001 	orrne.w	r0, r0, #1
   869ae:	4770      	bx	lr
   869b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   869b4:	d102      	bne.n	869bc <__cmpsf2+0x4c>
   869b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   869ba:	d105      	bne.n	869c8 <__cmpsf2+0x58>
   869bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   869c0:	d1e4      	bne.n	8698c <__cmpsf2+0x1c>
   869c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   869c6:	d0e1      	beq.n	8698c <__cmpsf2+0x1c>
   869c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   869cc:	4770      	bx	lr
   869ce:	bf00      	nop

000869d0 <__aeabi_cfrcmple>:
   869d0:	4684      	mov	ip, r0
   869d2:	4608      	mov	r0, r1
   869d4:	4661      	mov	r1, ip
   869d6:	e7ff      	b.n	869d8 <__aeabi_cfcmpeq>

000869d8 <__aeabi_cfcmpeq>:
   869d8:	b50f      	push	{r0, r1, r2, r3, lr}
   869da:	f7ff ffc9 	bl	86970 <__cmpsf2>
   869de:	2800      	cmp	r0, #0
   869e0:	bf48      	it	mi
   869e2:	f110 0f00 	cmnmi.w	r0, #0
   869e6:	bd0f      	pop	{r0, r1, r2, r3, pc}

000869e8 <__aeabi_fcmpeq>:
   869e8:	f84d ed08 	str.w	lr, [sp, #-8]!
   869ec:	f7ff fff4 	bl	869d8 <__aeabi_cfcmpeq>
   869f0:	bf0c      	ite	eq
   869f2:	2001      	moveq	r0, #1
   869f4:	2000      	movne	r0, #0
   869f6:	f85d fb08 	ldr.w	pc, [sp], #8
   869fa:	bf00      	nop

000869fc <__aeabi_fcmplt>:
   869fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a00:	f7ff ffea 	bl	869d8 <__aeabi_cfcmpeq>
   86a04:	bf34      	ite	cc
   86a06:	2001      	movcc	r0, #1
   86a08:	2000      	movcs	r0, #0
   86a0a:	f85d fb08 	ldr.w	pc, [sp], #8
   86a0e:	bf00      	nop

00086a10 <__aeabi_fcmple>:
   86a10:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a14:	f7ff ffe0 	bl	869d8 <__aeabi_cfcmpeq>
   86a18:	bf94      	ite	ls
   86a1a:	2001      	movls	r0, #1
   86a1c:	2000      	movhi	r0, #0
   86a1e:	f85d fb08 	ldr.w	pc, [sp], #8
   86a22:	bf00      	nop

00086a24 <__aeabi_fcmpge>:
   86a24:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a28:	f7ff ffd2 	bl	869d0 <__aeabi_cfrcmple>
   86a2c:	bf94      	ite	ls
   86a2e:	2001      	movls	r0, #1
   86a30:	2000      	movhi	r0, #0
   86a32:	f85d fb08 	ldr.w	pc, [sp], #8
   86a36:	bf00      	nop

00086a38 <__aeabi_fcmpgt>:
   86a38:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a3c:	f7ff ffc8 	bl	869d0 <__aeabi_cfrcmple>
   86a40:	bf34      	ite	cc
   86a42:	2001      	movcc	r0, #1
   86a44:	2000      	movcs	r0, #0
   86a46:	f85d fb08 	ldr.w	pc, [sp], #8
   86a4a:	bf00      	nop

00086a4c <__aeabi_f2uiz>:
   86a4c:	0042      	lsls	r2, r0, #1
   86a4e:	d20e      	bcs.n	86a6e <__aeabi_f2uiz+0x22>
   86a50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   86a54:	d30b      	bcc.n	86a6e <__aeabi_f2uiz+0x22>
   86a56:	f04f 039e 	mov.w	r3, #158	; 0x9e
   86a5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   86a5e:	d409      	bmi.n	86a74 <__aeabi_f2uiz+0x28>
   86a60:	ea4f 2300 	mov.w	r3, r0, lsl #8
   86a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86a68:	fa23 f002 	lsr.w	r0, r3, r2
   86a6c:	4770      	bx	lr
   86a6e:	f04f 0000 	mov.w	r0, #0
   86a72:	4770      	bx	lr
   86a74:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86a78:	d101      	bne.n	86a7e <__aeabi_f2uiz+0x32>
   86a7a:	0242      	lsls	r2, r0, #9
   86a7c:	d102      	bne.n	86a84 <__aeabi_f2uiz+0x38>
   86a7e:	f04f 30ff 	mov.w	r0, #4294967295
   86a82:	4770      	bx	lr
   86a84:	f04f 0000 	mov.w	r0, #0
   86a88:	4770      	bx	lr
   86a8a:	bf00      	nop

00086a8c <__libc_init_array>:
   86a8c:	b570      	push	{r4, r5, r6, lr}
   86a8e:	4e0f      	ldr	r6, [pc, #60]	; (86acc <__libc_init_array+0x40>)
   86a90:	4d0f      	ldr	r5, [pc, #60]	; (86ad0 <__libc_init_array+0x44>)
   86a92:	1b76      	subs	r6, r6, r5
   86a94:	10b6      	asrs	r6, r6, #2
   86a96:	d007      	beq.n	86aa8 <__libc_init_array+0x1c>
   86a98:	3d04      	subs	r5, #4
   86a9a:	2400      	movs	r4, #0
   86a9c:	3401      	adds	r4, #1
   86a9e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86aa2:	4798      	blx	r3
   86aa4:	42a6      	cmp	r6, r4
   86aa6:	d1f9      	bne.n	86a9c <__libc_init_array+0x10>
   86aa8:	4e0a      	ldr	r6, [pc, #40]	; (86ad4 <__libc_init_array+0x48>)
   86aaa:	4d0b      	ldr	r5, [pc, #44]	; (86ad8 <__libc_init_array+0x4c>)
   86aac:	f000 fa4c 	bl	86f48 <_init>
   86ab0:	1b76      	subs	r6, r6, r5
   86ab2:	10b6      	asrs	r6, r6, #2
   86ab4:	d008      	beq.n	86ac8 <__libc_init_array+0x3c>
   86ab6:	3d04      	subs	r5, #4
   86ab8:	2400      	movs	r4, #0
   86aba:	3401      	adds	r4, #1
   86abc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86ac0:	4798      	blx	r3
   86ac2:	42a6      	cmp	r6, r4
   86ac4:	d1f9      	bne.n	86aba <__libc_init_array+0x2e>
   86ac6:	bd70      	pop	{r4, r5, r6, pc}
   86ac8:	bd70      	pop	{r4, r5, r6, pc}
   86aca:	bf00      	nop
   86acc:	00086f54 	.word	0x00086f54
   86ad0:	00086f54 	.word	0x00086f54
   86ad4:	00086f5c 	.word	0x00086f5c
   86ad8:	00086f54 	.word	0x00086f54

00086adc <memcmp>:
   86adc:	2a03      	cmp	r2, #3
   86ade:	b470      	push	{r4, r5, r6}
   86ae0:	d928      	bls.n	86b34 <memcmp+0x58>
   86ae2:	ea40 0301 	orr.w	r3, r0, r1
   86ae6:	079b      	lsls	r3, r3, #30
   86ae8:	d013      	beq.n	86b12 <memcmp+0x36>
   86aea:	7805      	ldrb	r5, [r0, #0]
   86aec:	780c      	ldrb	r4, [r1, #0]
   86aee:	42a5      	cmp	r5, r4
   86af0:	d124      	bne.n	86b3c <memcmp+0x60>
   86af2:	3a01      	subs	r2, #1
   86af4:	2300      	movs	r3, #0
   86af6:	e005      	b.n	86b04 <memcmp+0x28>
   86af8:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   86afc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   86b00:	42a5      	cmp	r5, r4
   86b02:	d11b      	bne.n	86b3c <memcmp+0x60>
   86b04:	4293      	cmp	r3, r2
   86b06:	f103 0301 	add.w	r3, r3, #1
   86b0a:	d1f5      	bne.n	86af8 <memcmp+0x1c>
   86b0c:	2000      	movs	r0, #0
   86b0e:	bc70      	pop	{r4, r5, r6}
   86b10:	4770      	bx	lr
   86b12:	460c      	mov	r4, r1
   86b14:	4603      	mov	r3, r0
   86b16:	6825      	ldr	r5, [r4, #0]
   86b18:	681e      	ldr	r6, [r3, #0]
   86b1a:	4621      	mov	r1, r4
   86b1c:	42ae      	cmp	r6, r5
   86b1e:	4618      	mov	r0, r3
   86b20:	f104 0404 	add.w	r4, r4, #4
   86b24:	f103 0304 	add.w	r3, r3, #4
   86b28:	d104      	bne.n	86b34 <memcmp+0x58>
   86b2a:	3a04      	subs	r2, #4
   86b2c:	2a03      	cmp	r2, #3
   86b2e:	4618      	mov	r0, r3
   86b30:	4621      	mov	r1, r4
   86b32:	d8f0      	bhi.n	86b16 <memcmp+0x3a>
   86b34:	2a00      	cmp	r2, #0
   86b36:	d1d8      	bne.n	86aea <memcmp+0xe>
   86b38:	4610      	mov	r0, r2
   86b3a:	e7e8      	b.n	86b0e <memcmp+0x32>
   86b3c:	1b28      	subs	r0, r5, r4
   86b3e:	bc70      	pop	{r4, r5, r6}
   86b40:	4770      	bx	lr
   86b42:	bf00      	nop

00086b44 <memcpy>:
   86b44:	4684      	mov	ip, r0
   86b46:	ea41 0300 	orr.w	r3, r1, r0
   86b4a:	f013 0303 	ands.w	r3, r3, #3
   86b4e:	d149      	bne.n	86be4 <memcpy+0xa0>
   86b50:	3a40      	subs	r2, #64	; 0x40
   86b52:	d323      	bcc.n	86b9c <memcpy+0x58>
   86b54:	680b      	ldr	r3, [r1, #0]
   86b56:	6003      	str	r3, [r0, #0]
   86b58:	684b      	ldr	r3, [r1, #4]
   86b5a:	6043      	str	r3, [r0, #4]
   86b5c:	688b      	ldr	r3, [r1, #8]
   86b5e:	6083      	str	r3, [r0, #8]
   86b60:	68cb      	ldr	r3, [r1, #12]
   86b62:	60c3      	str	r3, [r0, #12]
   86b64:	690b      	ldr	r3, [r1, #16]
   86b66:	6103      	str	r3, [r0, #16]
   86b68:	694b      	ldr	r3, [r1, #20]
   86b6a:	6143      	str	r3, [r0, #20]
   86b6c:	698b      	ldr	r3, [r1, #24]
   86b6e:	6183      	str	r3, [r0, #24]
   86b70:	69cb      	ldr	r3, [r1, #28]
   86b72:	61c3      	str	r3, [r0, #28]
   86b74:	6a0b      	ldr	r3, [r1, #32]
   86b76:	6203      	str	r3, [r0, #32]
   86b78:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86b7a:	6243      	str	r3, [r0, #36]	; 0x24
   86b7c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86b7e:	6283      	str	r3, [r0, #40]	; 0x28
   86b80:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86b82:	62c3      	str	r3, [r0, #44]	; 0x2c
   86b84:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86b86:	6303      	str	r3, [r0, #48]	; 0x30
   86b88:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86b8a:	6343      	str	r3, [r0, #52]	; 0x34
   86b8c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86b8e:	6383      	str	r3, [r0, #56]	; 0x38
   86b90:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86b92:	63c3      	str	r3, [r0, #60]	; 0x3c
   86b94:	3040      	adds	r0, #64	; 0x40
   86b96:	3140      	adds	r1, #64	; 0x40
   86b98:	3a40      	subs	r2, #64	; 0x40
   86b9a:	d2db      	bcs.n	86b54 <memcpy+0x10>
   86b9c:	3230      	adds	r2, #48	; 0x30
   86b9e:	d30b      	bcc.n	86bb8 <memcpy+0x74>
   86ba0:	680b      	ldr	r3, [r1, #0]
   86ba2:	6003      	str	r3, [r0, #0]
   86ba4:	684b      	ldr	r3, [r1, #4]
   86ba6:	6043      	str	r3, [r0, #4]
   86ba8:	688b      	ldr	r3, [r1, #8]
   86baa:	6083      	str	r3, [r0, #8]
   86bac:	68cb      	ldr	r3, [r1, #12]
   86bae:	60c3      	str	r3, [r0, #12]
   86bb0:	3010      	adds	r0, #16
   86bb2:	3110      	adds	r1, #16
   86bb4:	3a10      	subs	r2, #16
   86bb6:	d2f3      	bcs.n	86ba0 <memcpy+0x5c>
   86bb8:	320c      	adds	r2, #12
   86bba:	d305      	bcc.n	86bc8 <memcpy+0x84>
   86bbc:	f851 3b04 	ldr.w	r3, [r1], #4
   86bc0:	f840 3b04 	str.w	r3, [r0], #4
   86bc4:	3a04      	subs	r2, #4
   86bc6:	d2f9      	bcs.n	86bbc <memcpy+0x78>
   86bc8:	3204      	adds	r2, #4
   86bca:	d008      	beq.n	86bde <memcpy+0x9a>
   86bcc:	07d2      	lsls	r2, r2, #31
   86bce:	bf1c      	itt	ne
   86bd0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86bd4:	f800 3b01 	strbne.w	r3, [r0], #1
   86bd8:	d301      	bcc.n	86bde <memcpy+0x9a>
   86bda:	880b      	ldrh	r3, [r1, #0]
   86bdc:	8003      	strh	r3, [r0, #0]
   86bde:	4660      	mov	r0, ip
   86be0:	4770      	bx	lr
   86be2:	bf00      	nop
   86be4:	2a08      	cmp	r2, #8
   86be6:	d313      	bcc.n	86c10 <memcpy+0xcc>
   86be8:	078b      	lsls	r3, r1, #30
   86bea:	d0b1      	beq.n	86b50 <memcpy+0xc>
   86bec:	f010 0303 	ands.w	r3, r0, #3
   86bf0:	d0ae      	beq.n	86b50 <memcpy+0xc>
   86bf2:	f1c3 0304 	rsb	r3, r3, #4
   86bf6:	1ad2      	subs	r2, r2, r3
   86bf8:	07db      	lsls	r3, r3, #31
   86bfa:	bf1c      	itt	ne
   86bfc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86c00:	f800 3b01 	strbne.w	r3, [r0], #1
   86c04:	d3a4      	bcc.n	86b50 <memcpy+0xc>
   86c06:	f831 3b02 	ldrh.w	r3, [r1], #2
   86c0a:	f820 3b02 	strh.w	r3, [r0], #2
   86c0e:	e79f      	b.n	86b50 <memcpy+0xc>
   86c10:	3a04      	subs	r2, #4
   86c12:	d3d9      	bcc.n	86bc8 <memcpy+0x84>
   86c14:	3a01      	subs	r2, #1
   86c16:	f811 3b01 	ldrb.w	r3, [r1], #1
   86c1a:	f800 3b01 	strb.w	r3, [r0], #1
   86c1e:	d2f9      	bcs.n	86c14 <memcpy+0xd0>
   86c20:	780b      	ldrb	r3, [r1, #0]
   86c22:	7003      	strb	r3, [r0, #0]
   86c24:	784b      	ldrb	r3, [r1, #1]
   86c26:	7043      	strb	r3, [r0, #1]
   86c28:	788b      	ldrb	r3, [r1, #2]
   86c2a:	7083      	strb	r3, [r0, #2]
   86c2c:	4660      	mov	r0, ip
   86c2e:	4770      	bx	lr

00086c30 <memset>:
   86c30:	b4f0      	push	{r4, r5, r6, r7}
   86c32:	0784      	lsls	r4, r0, #30
   86c34:	d043      	beq.n	86cbe <memset+0x8e>
   86c36:	1e54      	subs	r4, r2, #1
   86c38:	2a00      	cmp	r2, #0
   86c3a:	d03e      	beq.n	86cba <memset+0x8a>
   86c3c:	b2cd      	uxtb	r5, r1
   86c3e:	4603      	mov	r3, r0
   86c40:	e003      	b.n	86c4a <memset+0x1a>
   86c42:	1e62      	subs	r2, r4, #1
   86c44:	2c00      	cmp	r4, #0
   86c46:	d038      	beq.n	86cba <memset+0x8a>
   86c48:	4614      	mov	r4, r2
   86c4a:	f803 5b01 	strb.w	r5, [r3], #1
   86c4e:	079a      	lsls	r2, r3, #30
   86c50:	d1f7      	bne.n	86c42 <memset+0x12>
   86c52:	2c03      	cmp	r4, #3
   86c54:	d92a      	bls.n	86cac <memset+0x7c>
   86c56:	b2cd      	uxtb	r5, r1
   86c58:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86c5c:	2c0f      	cmp	r4, #15
   86c5e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86c62:	d915      	bls.n	86c90 <memset+0x60>
   86c64:	f1a4 0710 	sub.w	r7, r4, #16
   86c68:	093f      	lsrs	r7, r7, #4
   86c6a:	f103 0610 	add.w	r6, r3, #16
   86c6e:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   86c72:	461a      	mov	r2, r3
   86c74:	6015      	str	r5, [r2, #0]
   86c76:	6055      	str	r5, [r2, #4]
   86c78:	6095      	str	r5, [r2, #8]
   86c7a:	60d5      	str	r5, [r2, #12]
   86c7c:	3210      	adds	r2, #16
   86c7e:	42b2      	cmp	r2, r6
   86c80:	d1f8      	bne.n	86c74 <memset+0x44>
   86c82:	f004 040f 	and.w	r4, r4, #15
   86c86:	3701      	adds	r7, #1
   86c88:	2c03      	cmp	r4, #3
   86c8a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   86c8e:	d90d      	bls.n	86cac <memset+0x7c>
   86c90:	461e      	mov	r6, r3
   86c92:	4622      	mov	r2, r4
   86c94:	3a04      	subs	r2, #4
   86c96:	2a03      	cmp	r2, #3
   86c98:	f846 5b04 	str.w	r5, [r6], #4
   86c9c:	d8fa      	bhi.n	86c94 <memset+0x64>
   86c9e:	1f22      	subs	r2, r4, #4
   86ca0:	f022 0203 	bic.w	r2, r2, #3
   86ca4:	3204      	adds	r2, #4
   86ca6:	4413      	add	r3, r2
   86ca8:	f004 0403 	and.w	r4, r4, #3
   86cac:	b12c      	cbz	r4, 86cba <memset+0x8a>
   86cae:	b2c9      	uxtb	r1, r1
   86cb0:	441c      	add	r4, r3
   86cb2:	f803 1b01 	strb.w	r1, [r3], #1
   86cb6:	42a3      	cmp	r3, r4
   86cb8:	d1fb      	bne.n	86cb2 <memset+0x82>
   86cba:	bcf0      	pop	{r4, r5, r6, r7}
   86cbc:	4770      	bx	lr
   86cbe:	4614      	mov	r4, r2
   86cc0:	4603      	mov	r3, r0
   86cc2:	e7c6      	b.n	86c52 <memset+0x22>

00086cc4 <register_fini>:
   86cc4:	4b02      	ldr	r3, [pc, #8]	; (86cd0 <register_fini+0xc>)
   86cc6:	b113      	cbz	r3, 86cce <register_fini+0xa>
   86cc8:	4802      	ldr	r0, [pc, #8]	; (86cd4 <register_fini+0x10>)
   86cca:	f000 b805 	b.w	86cd8 <atexit>
   86cce:	4770      	bx	lr
   86cd0:	00000000 	.word	0x00000000
   86cd4:	00086ce5 	.word	0x00086ce5

00086cd8 <atexit>:
   86cd8:	4601      	mov	r1, r0
   86cda:	2000      	movs	r0, #0
   86cdc:	4602      	mov	r2, r0
   86cde:	4603      	mov	r3, r0
   86ce0:	f000 b818 	b.w	86d14 <__register_exitproc>

00086ce4 <__libc_fini_array>:
   86ce4:	b538      	push	{r3, r4, r5, lr}
   86ce6:	4d09      	ldr	r5, [pc, #36]	; (86d0c <__libc_fini_array+0x28>)
   86ce8:	4c09      	ldr	r4, [pc, #36]	; (86d10 <__libc_fini_array+0x2c>)
   86cea:	1b64      	subs	r4, r4, r5
   86cec:	10a4      	asrs	r4, r4, #2
   86cee:	bf18      	it	ne
   86cf0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   86cf4:	d005      	beq.n	86d02 <__libc_fini_array+0x1e>
   86cf6:	3c01      	subs	r4, #1
   86cf8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   86cfc:	4798      	blx	r3
   86cfe:	2c00      	cmp	r4, #0
   86d00:	d1f9      	bne.n	86cf6 <__libc_fini_array+0x12>
   86d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86d06:	f000 b929 	b.w	86f5c <_fini>
   86d0a:	bf00      	nop
   86d0c:	00086f68 	.word	0x00086f68
   86d10:	00086f6c 	.word	0x00086f6c

00086d14 <__register_exitproc>:
   86d14:	b5f0      	push	{r4, r5, r6, r7, lr}
   86d16:	4c27      	ldr	r4, [pc, #156]	; (86db4 <__register_exitproc+0xa0>)
   86d18:	b085      	sub	sp, #20
   86d1a:	6826      	ldr	r6, [r4, #0]
   86d1c:	4607      	mov	r7, r0
   86d1e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   86d22:	2c00      	cmp	r4, #0
   86d24:	d040      	beq.n	86da8 <__register_exitproc+0x94>
   86d26:	6865      	ldr	r5, [r4, #4]
   86d28:	2d1f      	cmp	r5, #31
   86d2a:	dd1e      	ble.n	86d6a <__register_exitproc+0x56>
   86d2c:	4822      	ldr	r0, [pc, #136]	; (86db8 <__register_exitproc+0xa4>)
   86d2e:	b918      	cbnz	r0, 86d38 <__register_exitproc+0x24>
   86d30:	f04f 30ff 	mov.w	r0, #4294967295
   86d34:	b005      	add	sp, #20
   86d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86d38:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86d3c:	9103      	str	r1, [sp, #12]
   86d3e:	9202      	str	r2, [sp, #8]
   86d40:	9301      	str	r3, [sp, #4]
   86d42:	f3af 8000 	nop.w
   86d46:	9903      	ldr	r1, [sp, #12]
   86d48:	4604      	mov	r4, r0
   86d4a:	9a02      	ldr	r2, [sp, #8]
   86d4c:	9b01      	ldr	r3, [sp, #4]
   86d4e:	2800      	cmp	r0, #0
   86d50:	d0ee      	beq.n	86d30 <__register_exitproc+0x1c>
   86d52:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   86d56:	2000      	movs	r0, #0
   86d58:	6025      	str	r5, [r4, #0]
   86d5a:	6060      	str	r0, [r4, #4]
   86d5c:	4605      	mov	r5, r0
   86d5e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86d62:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86d66:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86d6a:	b93f      	cbnz	r7, 86d7c <__register_exitproc+0x68>
   86d6c:	1c6b      	adds	r3, r5, #1
   86d6e:	2000      	movs	r0, #0
   86d70:	3502      	adds	r5, #2
   86d72:	6063      	str	r3, [r4, #4]
   86d74:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86d78:	b005      	add	sp, #20
   86d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86d7c:	2601      	movs	r6, #1
   86d7e:	40ae      	lsls	r6, r5
   86d80:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86d84:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86d88:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86d8c:	2f02      	cmp	r7, #2
   86d8e:	ea42 0206 	orr.w	r2, r2, r6
   86d92:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86d96:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   86d9a:	d1e7      	bne.n	86d6c <__register_exitproc+0x58>
   86d9c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86da0:	431e      	orrs	r6, r3
   86da2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86da6:	e7e1      	b.n	86d6c <__register_exitproc+0x58>
   86da8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86dac:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86db0:	e7b9      	b.n	86d26 <__register_exitproc+0x12>
   86db2:	bf00      	nop
   86db4:	00086f44 	.word	0x00086f44
   86db8:	00000000 	.word	0x00000000
   86dbc:	00004e4f 	.word	0x00004e4f
   86dc0:	00004e4f 	.word	0x00004e4f
   86dc4:	00004e4f 	.word	0x00004e4f

00086dc8 <ulLED>:
   86dc8:	00000057 00000056 0000003b 00000055     W...V...;...U...
   86dd8:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   86de8:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   86df8:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   86e08:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   86e18:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   86e28:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   86e38:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   86e48:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   86e58:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   86e68:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86e78:	0001c200 000000c0 00000800 00000000     ................
	...
   86e90:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   86ea0:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00086eb0 <can_bit_time>:
   86eb0:	02020308 02094b03 43020303 0303030a     .....K.....C....
   86ec0:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86ed0:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   86ee0:	05050510 06114504 47040505 06060512     .....E.....G....
   86ef0:	06134304 44040606 06060714 08154604     .C.....D.....F..
   86f00:	47040606 07070716 08174404 46040708     ...G.....D.....F
   86f10:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   86f20:	00000000                                ....

00086f24 <ucExpectedStackBytes.5295>:
   86f24:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   86f34:	a5a5a5a5 20726d54 00637653 00000043     ....Tmr Svc.C...

00086f44 <_global_impure_ptr>:
   86f44:	20070010                                ... 

00086f48 <_init>:
   86f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86f4a:	bf00      	nop
   86f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86f4e:	bc08      	pop	{r3}
   86f50:	469e      	mov	lr, r3
   86f52:	4770      	bx	lr

00086f54 <__init_array_start>:
   86f54:	00086cc5 	.word	0x00086cc5

00086f58 <__frame_dummy_init_array_entry>:
   86f58:	00080119                                ....

00086f5c <_fini>:
   86f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86f5e:	bf00      	nop
   86f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86f62:	bc08      	pop	{r3}
   86f64:	469e      	mov	lr, r3
   86f66:	4770      	bx	lr

00086f68 <__fini_array_start>:
   86f68:	000800f5 	.word	0x000800f5
