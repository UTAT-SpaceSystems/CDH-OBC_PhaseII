
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e70  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00084e70  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a284  20070438  000852a8  00010438  2**2
                  ALLOC
  3 .stack        00002004  2007a6bc  0008f52c  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c212  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000256e  00000000  00000000  0001c6ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000581c  00000000  00000000  0001ec3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f90  00000000  00000000  00024458  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000df0  00000000  00000000  000253e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a031  00000000  00000000  000261d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001317a  00000000  00000000  00040209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00066dc6  00000000  00000000  00053383  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003244  00000000  00000000  000ba14c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c6c0 	.word	0x2007c6c0
   80004:	00081621 	.word	0x00081621
   80008:	00081619 	.word	0x00081619
   8000c:	00081619 	.word	0x00081619
   80010:	00081619 	.word	0x00081619
   80014:	00081619 	.word	0x00081619
   80018:	00081619 	.word	0x00081619
	...
   8002c:	00081ac9 	.word	0x00081ac9
   80030:	00081619 	.word	0x00081619
   80034:	00000000 	.word	0x00000000
   80038:	00081c8d 	.word	0x00081c8d
   8003c:	00081cd1 	.word	0x00081cd1
   80040:	00081619 	.word	0x00081619
   80044:	00081619 	.word	0x00081619
   80048:	00081619 	.word	0x00081619
   8004c:	00084935 	.word	0x00084935
   80050:	00084855 	.word	0x00084855
   80054:	00081619 	.word	0x00081619
   80058:	00081619 	.word	0x00081619
   8005c:	00081619 	.word	0x00081619
   80060:	00081619 	.word	0x00081619
   80064:	00081619 	.word	0x00081619
   80068:	00000000 	.word	0x00000000
   8006c:	000810c5 	.word	0x000810c5
   80070:	000810dd 	.word	0x000810dd
   80074:	000810f5 	.word	0x000810f5
   80078:	0008110d 	.word	0x0008110d
	...
   80084:	000849a5 	.word	0x000849a5
   80088:	00081619 	.word	0x00081619
   8008c:	00081619 	.word	0x00081619
   80090:	00081619 	.word	0x00081619
   80094:	00081619 	.word	0x00081619
   80098:	00081619 	.word	0x00081619
   8009c:	00081619 	.word	0x00081619
   800a0:	00081619 	.word	0x00081619
   800a4:	00000000 	.word	0x00000000
   800a8:	00081619 	.word	0x00081619
   800ac:	00081619 	.word	0x00081619
   800b0:	00081619 	.word	0x00081619
   800b4:	00081619 	.word	0x00081619
   800b8:	00081619 	.word	0x00081619
   800bc:	00081619 	.word	0x00081619
   800c0:	00081619 	.word	0x00081619
   800c4:	00081619 	.word	0x00081619
   800c8:	00081619 	.word	0x00081619
   800cc:	00081619 	.word	0x00081619
   800d0:	00081619 	.word	0x00081619
   800d4:	00081619 	.word	0x00081619
   800d8:	00081619 	.word	0x00081619
   800dc:	00081619 	.word	0x00081619
   800e0:	00081619 	.word	0x00081619
   800e4:	00081619 	.word	0x00081619
   800e8:	00081619 	.word	0x00081619
   800ec:	00084109 	.word	0x00084109
   800f0:	00084071 	.word	0x00084071

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00084e70 	.word	0x00084e70

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084e70 	.word	0x00084e70
   8013c:	2007043c 	.word	0x2007043c
   80140:	00084e70 	.word	0x00084e70
   80144:	00000000 	.word	0x00000000

00080148 <housekeep_test2>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep_test2( void )
{
   80148:	b590      	push	{r4, r7, lr}
   8014a:	b085      	sub	sp, #20
   8014c:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask2,					/* The function that implements the task. */
   8014e:	2303      	movs	r3, #3
   80150:	9300      	str	r3, [sp, #0]
   80152:	2300      	movs	r3, #0
   80154:	9301      	str	r3, [sp, #4]
   80156:	2300      	movs	r3, #0
   80158:	9302      	str	r3, [sp, #8]
   8015a:	2300      	movs	r3, #0
   8015c:	9303      	str	r3, [sp, #12]
   8015e:	4806      	ldr	r0, [pc, #24]	; (80178 <housekeep_test2+0x30>)
   80160:	4906      	ldr	r1, [pc, #24]	; (8017c <housekeep_test2+0x34>)
   80162:	2282      	movs	r2, #130	; 0x82
   80164:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80168:	4c05      	ldr	r4, [pc, #20]	; (80180 <housekeep_test2+0x38>)
   8016a:	47a0      	blx	r4
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) HK_PARAMETER2, 			/* The parameter passed to the task - just to check the functionality. */
					Housekeep_TEST2_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
					
		vTaskStartScheduler();
   8016c:	4b05      	ldr	r3, [pc, #20]	; (80184 <housekeep_test2+0x3c>)
   8016e:	4798      	blx	r3
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80170:	bf00      	nop
}
   80172:	3704      	adds	r7, #4
   80174:	46bd      	mov	sp, r7
   80176:	bd90      	pop	{r4, r7, pc}
   80178:	00080189 	.word	0x00080189
   8017c:	00084da4 	.word	0x00084da4
   80180:	00082aad 	.word	0x00082aad
   80184:	00082d29 	.word	0x00082d29

00080188 <prvHouseKeepTask2>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask2(void *pvParameters )
{
   80188:	b580      	push	{r7, lr}
   8018a:	b086      	sub	sp, #24
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER2 );
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80196:	429a      	cmp	r2, r3
   80198:	d002      	beq.n	801a0 <prvHouseKeepTask2+0x18>
   8019a:	4b0b      	ldr	r3, [pc, #44]	; (801c8 <prvHouseKeepTask2+0x40>)
   8019c:	4798      	blx	r3
   8019e:	e7fe      	b.n	8019e <prvHouseKeepTask2+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   801a0:	230f      	movs	r3, #15
   801a2:	617b      	str	r3, [r7, #20]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	
	ID = SUB0_ID5;
   801a4:	2319      	movs	r3, #25
   801a6:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		x = request_housekeeping(SUB0_ID5);		// This is the CAN API function I have written for us to use.
   801a8:	2019      	movs	r0, #25
   801aa:	4b08      	ldr	r3, [pc, #32]	; (801cc <prvHouseKeepTask2+0x44>)
   801ac:	4798      	blx	r3
   801ae:	60f8      	str	r0, [r7, #12]
		xLastWakeTime = xTaskGetTickCount();
   801b0:	4b07      	ldr	r3, [pc, #28]	; (801d0 <prvHouseKeepTask2+0x48>)
   801b2:	4798      	blx	r3
   801b4:	4603      	mov	r3, r0
   801b6:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   801b8:	f107 0308 	add.w	r3, r7, #8
   801bc:	4618      	mov	r0, r3
   801be:	6979      	ldr	r1, [r7, #20]
   801c0:	4b04      	ldr	r3, [pc, #16]	; (801d4 <prvHouseKeepTask2+0x4c>)
   801c2:	4798      	blx	r3
	}
   801c4:	e7f0      	b.n	801a8 <prvHouseKeepTask2+0x20>
   801c6:	bf00      	nop
   801c8:	00081c71 	.word	0x00081c71
   801cc:	0008437d 	.word	0x0008437d
   801d0:	00082ee9 	.word	0x00082ee9
   801d4:	00082c2d 	.word	0x00082c2d

000801d8 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   801d8:	b580      	push	{r7, lr}
   801da:	b082      	sub	sp, #8
   801dc:	af00      	add	r7, sp, #0
   801de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	2b07      	cmp	r3, #7
   801e4:	d82e      	bhi.n	80244 <osc_enable+0x6c>
   801e6:	a201      	add	r2, pc, #4	; (adr r2, 801ec <osc_enable+0x14>)
   801e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801ec:	00080245 	.word	0x00080245
   801f0:	0008020d 	.word	0x0008020d
   801f4:	00080215 	.word	0x00080215
   801f8:	0008021d 	.word	0x0008021d
   801fc:	00080225 	.word	0x00080225
   80200:	0008022d 	.word	0x0008022d
   80204:	00080235 	.word	0x00080235
   80208:	0008023d 	.word	0x0008023d
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8020c:	2000      	movs	r0, #0
   8020e:	4b0f      	ldr	r3, [pc, #60]	; (8024c <osc_enable+0x74>)
   80210:	4798      	blx	r3
		break;
   80212:	e017      	b.n	80244 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80214:	2001      	movs	r0, #1
   80216:	4b0d      	ldr	r3, [pc, #52]	; (8024c <osc_enable+0x74>)
   80218:	4798      	blx	r3
		break;
   8021a:	e013      	b.n	80244 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   8021c:	2000      	movs	r0, #0
   8021e:	4b0c      	ldr	r3, [pc, #48]	; (80250 <osc_enable+0x78>)
   80220:	4798      	blx	r3
		break;
   80222:	e00f      	b.n	80244 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80224:	2010      	movs	r0, #16
   80226:	4b0a      	ldr	r3, [pc, #40]	; (80250 <osc_enable+0x78>)
   80228:	4798      	blx	r3
		break;
   8022a:	e00b      	b.n	80244 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   8022c:	2020      	movs	r0, #32
   8022e:	4b08      	ldr	r3, [pc, #32]	; (80250 <osc_enable+0x78>)
   80230:	4798      	blx	r3
		break;
   80232:	e007      	b.n	80244 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   80234:	2000      	movs	r0, #0
   80236:	4b07      	ldr	r3, [pc, #28]	; (80254 <osc_enable+0x7c>)
   80238:	4798      	blx	r3
		break;
   8023a:	e003      	b.n	80244 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   8023c:	2001      	movs	r0, #1
   8023e:	4b05      	ldr	r3, [pc, #20]	; (80254 <osc_enable+0x7c>)
   80240:	4798      	blx	r3
		break;
   80242:	bf00      	nop
	}
}
   80244:	3708      	adds	r7, #8
   80246:	46bd      	mov	sp, r7
   80248:	bd80      	pop	{r7, pc}
   8024a:	bf00      	nop
   8024c:	000811a9 	.word	0x000811a9
   80250:	00081219 	.word	0x00081219
   80254:	000812b9 	.word	0x000812b9

00080258 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80258:	b580      	push	{r7, lr}
   8025a:	b082      	sub	sp, #8
   8025c:	af00      	add	r7, sp, #0
   8025e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80260:	687b      	ldr	r3, [r7, #4]
   80262:	2b07      	cmp	r3, #7
   80264:	d826      	bhi.n	802b4 <osc_is_ready+0x5c>
   80266:	a201      	add	r2, pc, #4	; (adr r2, 8026c <osc_is_ready+0x14>)
   80268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8026c:	0008028d 	.word	0x0008028d
   80270:	00080291 	.word	0x00080291
   80274:	00080291 	.word	0x00080291
   80278:	000802a3 	.word	0x000802a3
   8027c:	000802a3 	.word	0x000802a3
   80280:	000802a3 	.word	0x000802a3
   80284:	000802a3 	.word	0x000802a3
   80288:	000802a3 	.word	0x000802a3
	case OSC_SLCK_32K_RC:
		return 1;
   8028c:	2301      	movs	r3, #1
   8028e:	e012      	b.n	802b6 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80290:	4b0b      	ldr	r3, [pc, #44]	; (802c0 <osc_is_ready+0x68>)
   80292:	4798      	blx	r3
   80294:	4603      	mov	r3, r0
   80296:	2b00      	cmp	r3, #0
   80298:	bf0c      	ite	eq
   8029a:	2300      	moveq	r3, #0
   8029c:	2301      	movne	r3, #1
   8029e:	b2db      	uxtb	r3, r3
   802a0:	e009      	b.n	802b6 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   802a2:	4b08      	ldr	r3, [pc, #32]	; (802c4 <osc_is_ready+0x6c>)
   802a4:	4798      	blx	r3
   802a6:	4603      	mov	r3, r0
   802a8:	2b00      	cmp	r3, #0
   802aa:	bf0c      	ite	eq
   802ac:	2300      	moveq	r3, #0
   802ae:	2301      	movne	r3, #1
   802b0:	b2db      	uxtb	r3, r3
   802b2:	e000      	b.n	802b6 <osc_is_ready+0x5e>
	}

	return 0;
   802b4:	2300      	movs	r3, #0
}
   802b6:	4618      	mov	r0, r3
   802b8:	3708      	adds	r7, #8
   802ba:	46bd      	mov	sp, r7
   802bc:	bd80      	pop	{r7, pc}
   802be:	bf00      	nop
   802c0:	000811e5 	.word	0x000811e5
   802c4:	00081325 	.word	0x00081325

000802c8 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   802c8:	b480      	push	{r7}
   802ca:	b083      	sub	sp, #12
   802cc:	af00      	add	r7, sp, #0
   802ce:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   802d0:	687b      	ldr	r3, [r7, #4]
   802d2:	2b07      	cmp	r3, #7
   802d4:	d825      	bhi.n	80322 <osc_get_rate+0x5a>
   802d6:	a201      	add	r2, pc, #4	; (adr r2, 802dc <osc_get_rate+0x14>)
   802d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   802dc:	000802fd 	.word	0x000802fd
   802e0:	00080303 	.word	0x00080303
   802e4:	00080309 	.word	0x00080309
   802e8:	0008030f 	.word	0x0008030f
   802ec:	00080313 	.word	0x00080313
   802f0:	00080317 	.word	0x00080317
   802f4:	0008031b 	.word	0x0008031b
   802f8:	0008031f 	.word	0x0008031f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   802fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80300:	e010      	b.n	80324 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80306:	e00d      	b.n	80324 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8030c:	e00a      	b.n	80324 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8030e:	4b08      	ldr	r3, [pc, #32]	; (80330 <osc_get_rate+0x68>)
   80310:	e008      	b.n	80324 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80312:	4b08      	ldr	r3, [pc, #32]	; (80334 <osc_get_rate+0x6c>)
   80314:	e006      	b.n	80324 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80316:	4b08      	ldr	r3, [pc, #32]	; (80338 <osc_get_rate+0x70>)
   80318:	e004      	b.n	80324 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8031a:	4b07      	ldr	r3, [pc, #28]	; (80338 <osc_get_rate+0x70>)
   8031c:	e002      	b.n	80324 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8031e:	4b06      	ldr	r3, [pc, #24]	; (80338 <osc_get_rate+0x70>)
   80320:	e000      	b.n	80324 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80322:	2300      	movs	r3, #0
}
   80324:	4618      	mov	r0, r3
   80326:	370c      	adds	r7, #12
   80328:	46bd      	mov	sp, r7
   8032a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8032e:	4770      	bx	lr
   80330:	003d0900 	.word	0x003d0900
   80334:	007a1200 	.word	0x007a1200
   80338:	00b71b00 	.word	0x00b71b00

0008033c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8033c:	b580      	push	{r7, lr}
   8033e:	b082      	sub	sp, #8
   80340:	af00      	add	r7, sp, #0
   80342:	4603      	mov	r3, r0
   80344:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80346:	bf00      	nop
   80348:	79fb      	ldrb	r3, [r7, #7]
   8034a:	4618      	mov	r0, r3
   8034c:	4b05      	ldr	r3, [pc, #20]	; (80364 <osc_wait_ready+0x28>)
   8034e:	4798      	blx	r3
   80350:	4603      	mov	r3, r0
   80352:	f083 0301 	eor.w	r3, r3, #1
   80356:	b2db      	uxtb	r3, r3
   80358:	2b00      	cmp	r3, #0
   8035a:	d1f5      	bne.n	80348 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   8035c:	3708      	adds	r7, #8
   8035e:	46bd      	mov	sp, r7
   80360:	bd80      	pop	{r7, pc}
   80362:	bf00      	nop
   80364:	00080259 	.word	0x00080259

00080368 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   80368:	b580      	push	{r7, lr}
   8036a:	b086      	sub	sp, #24
   8036c:	af00      	add	r7, sp, #0
   8036e:	60f8      	str	r0, [r7, #12]
   80370:	607a      	str	r2, [r7, #4]
   80372:	603b      	str	r3, [r7, #0]
   80374:	460b      	mov	r3, r1
   80376:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   80378:	687b      	ldr	r3, [r7, #4]
   8037a:	2b00      	cmp	r3, #0
   8037c:	d107      	bne.n	8038e <pll_config_init+0x26>
   8037e:	683b      	ldr	r3, [r7, #0]
   80380:	2b00      	cmp	r3, #0
   80382:	d104      	bne.n	8038e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80384:	68fb      	ldr	r3, [r7, #12]
   80386:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8038a:	601a      	str	r2, [r3, #0]
   8038c:	e019      	b.n	803c2 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8038e:	7afb      	ldrb	r3, [r7, #11]
   80390:	4618      	mov	r0, r3
   80392:	4b0d      	ldr	r3, [pc, #52]	; (803c8 <pll_config_init+0x60>)
   80394:	4798      	blx	r3
   80396:	4602      	mov	r2, r0
   80398:	687b      	ldr	r3, [r7, #4]
   8039a:	fbb2 f3f3 	udiv	r3, r2, r3
   8039e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   803a0:	697b      	ldr	r3, [r7, #20]
   803a2:	683a      	ldr	r2, [r7, #0]
   803a4:	fb02 f303 	mul.w	r3, r2, r3
   803a8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   803aa:	683b      	ldr	r3, [r7, #0]
   803ac:	3b01      	subs	r3, #1
   803ae:	041a      	lsls	r2, r3, #16
   803b0:	4b06      	ldr	r3, [pc, #24]	; (803cc <pll_config_init+0x64>)
   803b2:	4013      	ands	r3, r2
   803b4:	687a      	ldr	r2, [r7, #4]
   803b6:	b2d2      	uxtb	r2, r2
   803b8:	4313      	orrs	r3, r2
   803ba:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   803be:	68fb      	ldr	r3, [r7, #12]
   803c0:	601a      	str	r2, [r3, #0]
	}
}
   803c2:	3718      	adds	r7, #24
   803c4:	46bd      	mov	sp, r7
   803c6:	bd80      	pop	{r7, pc}
   803c8:	000802c9 	.word	0x000802c9
   803cc:	07ff0000 	.word	0x07ff0000

000803d0 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   803d0:	b580      	push	{r7, lr}
   803d2:	b082      	sub	sp, #8
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
   803d8:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   803da:	683b      	ldr	r3, [r7, #0]
   803dc:	2b00      	cmp	r3, #0
   803de:	d108      	bne.n	803f2 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   803e0:	4b08      	ldr	r3, [pc, #32]	; (80404 <pll_enable+0x34>)
   803e2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   803e4:	4b08      	ldr	r3, [pc, #32]	; (80408 <pll_enable+0x38>)
   803e6:	687a      	ldr	r2, [r7, #4]
   803e8:	6812      	ldr	r2, [r2, #0]
   803ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   803ee:	629a      	str	r2, [r3, #40]	; 0x28
   803f0:	e005      	b.n	803fe <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   803f2:	4b05      	ldr	r3, [pc, #20]	; (80408 <pll_enable+0x38>)
   803f4:	687a      	ldr	r2, [r7, #4]
   803f6:	6812      	ldr	r2, [r2, #0]
   803f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   803fc:	61da      	str	r2, [r3, #28]
	}
}
   803fe:	3708      	adds	r7, #8
   80400:	46bd      	mov	sp, r7
   80402:	bd80      	pop	{r7, pc}
   80404:	00081341 	.word	0x00081341
   80408:	400e0600 	.word	0x400e0600

0008040c <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   8040c:	b580      	push	{r7, lr}
   8040e:	b082      	sub	sp, #8
   80410:	af00      	add	r7, sp, #0
   80412:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80414:	687b      	ldr	r3, [r7, #4]
   80416:	2b00      	cmp	r3, #0
   80418:	d103      	bne.n	80422 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8041a:	4b05      	ldr	r3, [pc, #20]	; (80430 <pll_is_locked+0x24>)
   8041c:	4798      	blx	r3
   8041e:	4603      	mov	r3, r0
   80420:	e002      	b.n	80428 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80422:	4b04      	ldr	r3, [pc, #16]	; (80434 <pll_is_locked+0x28>)
   80424:	4798      	blx	r3
   80426:	4603      	mov	r3, r0
}
   80428:	4618      	mov	r0, r3
   8042a:	3708      	adds	r7, #8
   8042c:	46bd      	mov	sp, r7
   8042e:	bd80      	pop	{r7, pc}
   80430:	00081359 	.word	0x00081359
   80434:	00081375 	.word	0x00081375

00080438 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80438:	b580      	push	{r7, lr}
   8043a:	b082      	sub	sp, #8
   8043c:	af00      	add	r7, sp, #0
   8043e:	4603      	mov	r3, r0
   80440:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80442:	79fb      	ldrb	r3, [r7, #7]
   80444:	3b03      	subs	r3, #3
   80446:	2b04      	cmp	r3, #4
   80448:	d808      	bhi.n	8045c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8044a:	79fb      	ldrb	r3, [r7, #7]
   8044c:	4618      	mov	r0, r3
   8044e:	4b05      	ldr	r3, [pc, #20]	; (80464 <pll_enable_source+0x2c>)
   80450:	4798      	blx	r3
		osc_wait_ready(e_src);
   80452:	79fb      	ldrb	r3, [r7, #7]
   80454:	4618      	mov	r0, r3
   80456:	4b04      	ldr	r3, [pc, #16]	; (80468 <pll_enable_source+0x30>)
   80458:	4798      	blx	r3
		break;
   8045a:	e000      	b.n	8045e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   8045c:	bf00      	nop
	}
}
   8045e:	3708      	adds	r7, #8
   80460:	46bd      	mov	sp, r7
   80462:	bd80      	pop	{r7, pc}
   80464:	000801d9 	.word	0x000801d9
   80468:	0008033d 	.word	0x0008033d

0008046c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8046c:	b580      	push	{r7, lr}
   8046e:	b082      	sub	sp, #8
   80470:	af00      	add	r7, sp, #0
   80472:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80474:	bf00      	nop
   80476:	6878      	ldr	r0, [r7, #4]
   80478:	4b04      	ldr	r3, [pc, #16]	; (8048c <pll_wait_for_lock+0x20>)
   8047a:	4798      	blx	r3
   8047c:	4603      	mov	r3, r0
   8047e:	2b00      	cmp	r3, #0
   80480:	d0f9      	beq.n	80476 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80482:	2300      	movs	r3, #0
}
   80484:	4618      	mov	r0, r3
   80486:	3708      	adds	r7, #8
   80488:	46bd      	mov	sp, r7
   8048a:	bd80      	pop	{r7, pc}
   8048c:	0008040d 	.word	0x0008040d

00080490 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80490:	b580      	push	{r7, lr}
   80492:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80494:	2006      	movs	r0, #6
   80496:	4b04      	ldr	r3, [pc, #16]	; (804a8 <sysclk_get_main_hz+0x18>)
   80498:	4798      	blx	r3
   8049a:	4602      	mov	r2, r0
   8049c:	4613      	mov	r3, r2
   8049e:	00db      	lsls	r3, r3, #3
   804a0:	1a9b      	subs	r3, r3, r2
   804a2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   804a4:	4618      	mov	r0, r3
   804a6:	bd80      	pop	{r7, pc}
   804a8:	000802c9 	.word	0x000802c9

000804ac <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   804ac:	b580      	push	{r7, lr}
   804ae:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   804b0:	4b02      	ldr	r3, [pc, #8]	; (804bc <sysclk_get_cpu_hz+0x10>)
   804b2:	4798      	blx	r3
   804b4:	4603      	mov	r3, r0
   804b6:	085b      	lsrs	r3, r3, #1
}
   804b8:	4618      	mov	r0, r3
   804ba:	bd80      	pop	{r7, pc}
   804bc:	00080491 	.word	0x00080491

000804c0 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   804c0:	b590      	push	{r4, r7, lr}
   804c2:	b083      	sub	sp, #12
   804c4:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   804c6:	4b10      	ldr	r3, [pc, #64]	; (80508 <sysclk_init+0x48>)
   804c8:	4798      	blx	r3
   804ca:	4603      	mov	r3, r0
   804cc:	4618      	mov	r0, r3
   804ce:	4b0f      	ldr	r3, [pc, #60]	; (8050c <sysclk_init+0x4c>)
   804d0:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   804d2:	2006      	movs	r0, #6
   804d4:	4b0e      	ldr	r3, [pc, #56]	; (80510 <sysclk_init+0x50>)
   804d6:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   804d8:	1d3b      	adds	r3, r7, #4
   804da:	4618      	mov	r0, r3
   804dc:	2106      	movs	r1, #6
   804de:	2201      	movs	r2, #1
   804e0:	230e      	movs	r3, #14
   804e2:	4c0c      	ldr	r4, [pc, #48]	; (80514 <sysclk_init+0x54>)
   804e4:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   804e6:	1d3b      	adds	r3, r7, #4
   804e8:	4618      	mov	r0, r3
   804ea:	2100      	movs	r1, #0
   804ec:	4b0a      	ldr	r3, [pc, #40]	; (80518 <sysclk_init+0x58>)
   804ee:	4798      	blx	r3
		pll_wait_for_lock(0);
   804f0:	2000      	movs	r0, #0
   804f2:	4b0a      	ldr	r3, [pc, #40]	; (8051c <sysclk_init+0x5c>)
   804f4:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   804f6:	2010      	movs	r0, #16
   804f8:	4b09      	ldr	r3, [pc, #36]	; (80520 <sysclk_init+0x60>)
   804fa:	4798      	blx	r3
		break;
   804fc:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   804fe:	4b09      	ldr	r3, [pc, #36]	; (80524 <sysclk_init+0x64>)
   80500:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80502:	370c      	adds	r7, #12
   80504:	46bd      	mov	sp, r7
   80506:	bd90      	pop	{r4, r7, pc}
   80508:	000804ad 	.word	0x000804ad
   8050c:	00081849 	.word	0x00081849
   80510:	00080439 	.word	0x00080439
   80514:	00080369 	.word	0x00080369
   80518:	000803d1 	.word	0x000803d1
   8051c:	0008046d 	.word	0x0008046d
   80520:	00081125 	.word	0x00081125
   80524:	000816c9 	.word	0x000816c9

00080528 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   80528:	b580      	push	{r7, lr}
   8052a:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8052c:	4b2e      	ldr	r3, [pc, #184]	; (805e8 <board_init+0xc0>)
   8052e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80532:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80534:	2001      	movs	r0, #1
   80536:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8053a:	4b2c      	ldr	r3, [pc, #176]	; (805ec <board_init+0xc4>)
   8053c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   8053e:	2000      	movs	r0, #0
   80540:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80544:	4b29      	ldr	r3, [pc, #164]	; (805ec <board_init+0xc4>)
   80546:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   80548:	2034      	movs	r0, #52	; 0x34
   8054a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8054e:	4b27      	ldr	r3, [pc, #156]	; (805ec <board_init+0xc4>)
   80550:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   80552:	2035      	movs	r0, #53	; 0x35
   80554:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80558:	4b24      	ldr	r3, [pc, #144]	; (805ec <board_init+0xc4>)
   8055a:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   8055c:	202f      	movs	r0, #47	; 0x2f
   8055e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80562:	4b22      	ldr	r3, [pc, #136]	; (805ec <board_init+0xc4>)
   80564:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   80566:	202e      	movs	r0, #46	; 0x2e
   80568:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8056c:	4b1f      	ldr	r3, [pc, #124]	; (805ec <board_init+0xc4>)
   8056e:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   80570:	208f      	movs	r0, #143	; 0x8f
   80572:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80576:	4b1d      	ldr	r3, [pc, #116]	; (805ec <board_init+0xc4>)
   80578:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   8057a:	2090      	movs	r0, #144	; 0x90
   8057c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80580:	4b1a      	ldr	r3, [pc, #104]	; (805ec <board_init+0xc4>)
   80582:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   80584:	2057      	movs	r0, #87	; 0x57
   80586:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8058a:	4b18      	ldr	r3, [pc, #96]	; (805ec <board_init+0xc4>)
   8058c:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   8058e:	2057      	movs	r0, #87	; 0x57
   80590:	4b17      	ldr	r3, [pc, #92]	; (805f0 <board_init+0xc8>)
   80592:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80594:	203b      	movs	r0, #59	; 0x3b
   80596:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8059a:	4b14      	ldr	r3, [pc, #80]	; (805ec <board_init+0xc4>)
   8059c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8059e:	2055      	movs	r0, #85	; 0x55
   805a0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805a4:	4b11      	ldr	r3, [pc, #68]	; (805ec <board_init+0xc4>)
   805a6:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805a8:	2056      	movs	r0, #86	; 0x56
   805aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805ae:	4b0f      	ldr	r3, [pc, #60]	; (805ec <board_init+0xc4>)
   805b0:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805b2:	2087      	movs	r0, #135	; 0x87
   805b4:	490f      	ldr	r1, [pc, #60]	; (805f4 <board_init+0xcc>)
   805b6:	4b0d      	ldr	r3, [pc, #52]	; (805ec <board_init+0xc4>)
   805b8:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805ba:	2037      	movs	r0, #55	; 0x37
   805bc:	490e      	ldr	r1, [pc, #56]	; (805f8 <board_init+0xd0>)
   805be:	4b0b      	ldr	r3, [pc, #44]	; (805ec <board_init+0xc4>)
   805c0:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   805c2:	200a      	movs	r0, #10
   805c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805c8:	4b08      	ldr	r3, [pc, #32]	; (805ec <board_init+0xc4>)
   805ca:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   805cc:	200b      	movs	r0, #11
   805ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805d2:	4b06      	ldr	r3, [pc, #24]	; (805ec <board_init+0xc4>)
   805d4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   805d6:	208e      	movs	r0, #142	; 0x8e
   805d8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   805dc:	4b03      	ldr	r3, [pc, #12]	; (805ec <board_init+0xc4>)
   805de:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   805e0:	208e      	movs	r0, #142	; 0x8e
   805e2:	4b06      	ldr	r3, [pc, #24]	; (805fc <board_init+0xd4>)
   805e4:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   805e6:	bd80      	pop	{r7, pc}
   805e8:	400e1a50 	.word	0x400e1a50
   805ec:	00080ee5 	.word	0x00080ee5
   805f0:	00080e1d 	.word	0x00080e1d
   805f4:	28000079 	.word	0x28000079
   805f8:	28000059 	.word	0x28000059
   805fc:	00080e51 	.word	0x00080e51

00080600 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80600:	b480      	push	{r7}
   80602:	b083      	sub	sp, #12
   80604:	af00      	add	r7, sp, #0
   80606:	6078      	str	r0, [r7, #4]
   80608:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8060a:	687b      	ldr	r3, [r7, #4]
   8060c:	683a      	ldr	r2, [r7, #0]
   8060e:	601a      	str	r2, [r3, #0]
}
   80610:	370c      	adds	r7, #12
   80612:	46bd      	mov	sp, r7
   80614:	f85d 7b04 	ldr.w	r7, [sp], #4
   80618:	4770      	bx	lr
   8061a:	bf00      	nop

0008061c <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   8061c:	b480      	push	{r7}
   8061e:	b083      	sub	sp, #12
   80620:	af00      	add	r7, sp, #0
   80622:	6078      	str	r0, [r7, #4]
   80624:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   80626:	687b      	ldr	r3, [r7, #4]
   80628:	683a      	ldr	r2, [r7, #0]
   8062a:	605a      	str	r2, [r3, #4]
}
   8062c:	370c      	adds	r7, #12
   8062e:	46bd      	mov	sp, r7
   80630:	f85d 7b04 	ldr.w	r7, [sp], #4
   80634:	4770      	bx	lr
   80636:	bf00      	nop

00080638 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   80638:	b580      	push	{r7, lr}
   8063a:	b082      	sub	sp, #8
   8063c:	af00      	add	r7, sp, #0
   8063e:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   80640:	687b      	ldr	r3, [r7, #4]
   80642:	685b      	ldr	r3, [r3, #4]
   80644:	4618      	mov	r0, r3
   80646:	4b02      	ldr	r3, [pc, #8]	; (80650 <sn65hvd234_enable+0x18>)
   80648:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   8064a:	3708      	adds	r7, #8
   8064c:	46bd      	mov	sp, r7
   8064e:	bd80      	pop	{r7, pc}
   80650:	00080e1d 	.word	0x00080e1d

00080654 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   80654:	b580      	push	{r7, lr}
   80656:	b082      	sub	sp, #8
   80658:	af00      	add	r7, sp, #0
   8065a:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   8065c:	687b      	ldr	r3, [r7, #4]
   8065e:	681b      	ldr	r3, [r3, #0]
   80660:	4618      	mov	r0, r3
   80662:	4b02      	ldr	r3, [pc, #8]	; (8066c <sn65hvd234_disable_low_power+0x18>)
   80664:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   80666:	3708      	adds	r7, #8
   80668:	46bd      	mov	sp, r7
   8066a:	bd80      	pop	{r7, pc}
   8066c:	00080e51 	.word	0x00080e51

00080670 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   80670:	b580      	push	{r7, lr}
   80672:	b08a      	sub	sp, #40	; 0x28
   80674:	af00      	add	r7, sp, #0
   80676:	60f8      	str	r0, [r7, #12]
   80678:	60b9      	str	r1, [r7, #8]
   8067a:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   8067c:	687b      	ldr	r3, [r7, #4]
   8067e:	f246 12a8 	movw	r2, #25000	; 0x61a8
   80682:	fb02 f203 	mul.w	r2, r2, r3
   80686:	68bb      	ldr	r3, [r7, #8]
   80688:	4413      	add	r3, r2
   8068a:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   8068c:	687b      	ldr	r3, [r7, #4]
   8068e:	f246 11a8 	movw	r1, #25000	; 0x61a8
   80692:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80696:	fbb2 f3f3 	udiv	r3, r2, r3
   8069a:	2b80      	cmp	r3, #128	; 0x80
   8069c:	d901      	bls.n	806a2 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   8069e:	2300      	movs	r3, #0
   806a0:	e085      	b.n	807ae <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   806a2:	68bb      	ldr	r3, [r7, #8]
   806a4:	085a      	lsrs	r2, r3, #1
   806a6:	687b      	ldr	r3, [r7, #4]
   806a8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   806ac:	fb01 f303 	mul.w	r3, r1, r3
   806b0:	429a      	cmp	r2, r3
   806b2:	d201      	bcs.n	806b8 <can_set_baudrate+0x48>
		return 0;
   806b4:	2300      	movs	r3, #0
   806b6:	e07a      	b.n	807ae <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   806b8:	2308      	movs	r3, #8
   806ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   806be:	f04f 33ff 	mov.w	r3, #4294967295
   806c2:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   806c4:	2308      	movs	r3, #8
   806c6:	77fb      	strb	r3, [r7, #31]
   806c8:	e02b      	b.n	80722 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   806ca:	7ffb      	ldrb	r3, [r7, #31]
   806cc:	687a      	ldr	r2, [r7, #4]
   806ce:	fb02 f303 	mul.w	r3, r2, r3
   806d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   806d6:	fb02 f303 	mul.w	r3, r2, r3
   806da:	68ba      	ldr	r2, [r7, #8]
   806dc:	fbb2 f3f3 	udiv	r3, r2, r3
   806e0:	2b80      	cmp	r3, #128	; 0x80
   806e2:	d81b      	bhi.n	8071c <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   806e4:	7ffb      	ldrb	r3, [r7, #31]
   806e6:	687a      	ldr	r2, [r7, #4]
   806e8:	fb02 f303 	mul.w	r3, r2, r3
   806ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   806f0:	fb02 f203 	mul.w	r2, r2, r3
   806f4:	68bb      	ldr	r3, [r7, #8]
   806f6:	fbb3 f1f2 	udiv	r1, r3, r2
   806fa:	fb02 f201 	mul.w	r2, r2, r1
   806fe:	1a9b      	subs	r3, r3, r2
   80700:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   80702:	69ba      	ldr	r2, [r7, #24]
   80704:	6a3b      	ldr	r3, [r7, #32]
   80706:	429a      	cmp	r2, r3
   80708:	d208      	bcs.n	8071c <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   8070a:	69bb      	ldr	r3, [r7, #24]
   8070c:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   8070e:	7ffb      	ldrb	r3, [r7, #31]
   80710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   80714:	6a3b      	ldr	r3, [r7, #32]
   80716:	2b00      	cmp	r3, #0
   80718:	d100      	bne.n	8071c <can_set_baudrate+0xac>
					break;
   8071a:	e005      	b.n	80728 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   8071c:	7ffb      	ldrb	r3, [r7, #31]
   8071e:	3301      	adds	r3, #1
   80720:	77fb      	strb	r3, [r7, #31]
   80722:	7ffb      	ldrb	r3, [r7, #31]
   80724:	2b19      	cmp	r3, #25
   80726:	d9d0      	bls.n	806ca <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8072c:	687a      	ldr	r2, [r7, #4]
   8072e:	fb02 f303 	mul.w	r3, r2, r3
   80732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80736:	fb02 f303 	mul.w	r3, r2, r3
   8073a:	68ba      	ldr	r2, [r7, #8]
   8073c:	fbb2 f3f3 	udiv	r3, r2, r3
   80740:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   80742:	7dfb      	ldrb	r3, [r7, #23]
   80744:	2b01      	cmp	r3, #1
   80746:	d801      	bhi.n	8074c <can_set_baudrate+0xdc>
		return 0;
   80748:	2300      	movs	r3, #0
   8074a:	e030      	b.n	807ae <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   8074c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80750:	f1a3 0208 	sub.w	r2, r3, #8
   80754:	4613      	mov	r3, r2
   80756:	005b      	lsls	r3, r3, #1
   80758:	4413      	add	r3, r2
   8075a:	005b      	lsls	r3, r3, #1
   8075c:	4a16      	ldr	r2, [pc, #88]	; (807b8 <can_set_baudrate+0x148>)
   8075e:	4413      	add	r3, r2
   80760:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   80762:	68f8      	ldr	r0, [r7, #12]
   80764:	4b15      	ldr	r3, [pc, #84]	; (807bc <can_set_baudrate+0x14c>)
   80766:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80768:	693b      	ldr	r3, [r7, #16]
   8076a:	78db      	ldrb	r3, [r3, #3]
   8076c:	3b01      	subs	r3, #1
   8076e:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80772:	693b      	ldr	r3, [r7, #16]
   80774:	789b      	ldrb	r3, [r3, #2]
   80776:	3b01      	subs	r3, #1
   80778:	011b      	lsls	r3, r3, #4
   8077a:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8077e:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80780:	693b      	ldr	r3, [r7, #16]
   80782:	785b      	ldrb	r3, [r3, #1]
   80784:	3b01      	subs	r3, #1
   80786:	021b      	lsls	r3, r3, #8
   80788:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   8078c:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8078e:	693b      	ldr	r3, [r7, #16]
   80790:	791b      	ldrb	r3, [r3, #4]
   80792:	3b01      	subs	r3, #1
   80794:	031b      	lsls	r3, r3, #12
   80796:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   8079a:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   8079c:	7dfb      	ldrb	r3, [r7, #23]
   8079e:	3b01      	subs	r3, #1
   807a0:	041b      	lsls	r3, r3, #16
   807a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   807a6:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   807a8:	68fb      	ldr	r3, [r7, #12]
   807aa:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   807ac:	2301      	movs	r3, #1
}
   807ae:	4618      	mov	r0, r3
   807b0:	3728      	adds	r7, #40	; 0x28
   807b2:	46bd      	mov	sp, r7
   807b4:	bd80      	pop	{r7, pc}
   807b6:	bf00      	nop
   807b8:	00084da8 	.word	0x00084da8
   807bc:	00080869 	.word	0x00080869

000807c0 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   807c0:	b580      	push	{r7, lr}
   807c2:	b086      	sub	sp, #24
   807c4:	af00      	add	r7, sp, #0
   807c6:	60f8      	str	r0, [r7, #12]
   807c8:	60b9      	str	r1, [r7, #8]
   807ca:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   807cc:	68f8      	ldr	r0, [r7, #12]
   807ce:	68b9      	ldr	r1, [r7, #8]
   807d0:	687a      	ldr	r2, [r7, #4]
   807d2:	4b17      	ldr	r3, [pc, #92]	; (80830 <can_init+0x70>)
   807d4:	4798      	blx	r3
   807d6:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   807d8:	697b      	ldr	r3, [r7, #20]
   807da:	2b00      	cmp	r3, #0
   807dc:	d101      	bne.n	807e2 <can_init+0x22>
		return 0;
   807de:	2300      	movs	r3, #0
   807e0:	e021      	b.n	80826 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   807e2:	68f8      	ldr	r0, [r7, #12]
   807e4:	4b13      	ldr	r3, [pc, #76]	; (80834 <can_init+0x74>)
   807e6:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   807e8:	68f8      	ldr	r0, [r7, #12]
   807ea:	4b13      	ldr	r3, [pc, #76]	; (80838 <can_init+0x78>)
   807ec:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   807ee:	2300      	movs	r3, #0
   807f0:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   807f2:	2300      	movs	r3, #0
   807f4:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   807f6:	e006      	b.n	80806 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   807f8:	68f8      	ldr	r0, [r7, #12]
   807fa:	4b10      	ldr	r3, [pc, #64]	; (8083c <can_init+0x7c>)
   807fc:	4798      	blx	r3
   807fe:	6178      	str	r0, [r7, #20]
		ul_tick++;
   80800:	693b      	ldr	r3, [r7, #16]
   80802:	3301      	adds	r3, #1
   80804:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80806:	697b      	ldr	r3, [r7, #20]
   80808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   8080c:	2b00      	cmp	r3, #0
   8080e:	d103      	bne.n	80818 <can_init+0x58>
   80810:	693a      	ldr	r2, [r7, #16]
   80812:	4b0b      	ldr	r3, [pc, #44]	; (80840 <can_init+0x80>)
   80814:	429a      	cmp	r2, r3
   80816:	d9ef      	bls.n	807f8 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   80818:	693a      	ldr	r2, [r7, #16]
   8081a:	4b0a      	ldr	r3, [pc, #40]	; (80844 <can_init+0x84>)
   8081c:	429a      	cmp	r2, r3
   8081e:	d101      	bne.n	80824 <can_init+0x64>
		return 0;
   80820:	2300      	movs	r3, #0
   80822:	e000      	b.n	80826 <can_init+0x66>
	} else {
		return 1;
   80824:	2301      	movs	r3, #1
	}
}
   80826:	4618      	mov	r0, r3
   80828:	3718      	adds	r7, #24
   8082a:	46bd      	mov	sp, r7
   8082c:	bd80      	pop	{r7, pc}
   8082e:	bf00      	nop
   80830:	00080671 	.word	0x00080671
   80834:	00080c01 	.word	0x00080c01
   80838:	00080849 	.word	0x00080849
   8083c:	000808c1 	.word	0x000808c1
   80840:	0001869f 	.word	0x0001869f
   80844:	000186a0 	.word	0x000186a0

00080848 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   80848:	b480      	push	{r7}
   8084a:	b083      	sub	sp, #12
   8084c:	af00      	add	r7, sp, #0
   8084e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   80850:	687b      	ldr	r3, [r7, #4]
   80852:	681b      	ldr	r3, [r3, #0]
   80854:	f043 0201 	orr.w	r2, r3, #1
   80858:	687b      	ldr	r3, [r7, #4]
   8085a:	601a      	str	r2, [r3, #0]
}
   8085c:	370c      	adds	r7, #12
   8085e:	46bd      	mov	sp, r7
   80860:	f85d 7b04 	ldr.w	r7, [sp], #4
   80864:	4770      	bx	lr
   80866:	bf00      	nop

00080868 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   80868:	b480      	push	{r7}
   8086a:	b083      	sub	sp, #12
   8086c:	af00      	add	r7, sp, #0
   8086e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   80870:	687b      	ldr	r3, [r7, #4]
   80872:	681b      	ldr	r3, [r3, #0]
   80874:	f023 0201 	bic.w	r2, r3, #1
   80878:	687b      	ldr	r3, [r7, #4]
   8087a:	601a      	str	r2, [r3, #0]
}
   8087c:	370c      	adds	r7, #12
   8087e:	46bd      	mov	sp, r7
   80880:	f85d 7b04 	ldr.w	r7, [sp], #4
   80884:	4770      	bx	lr
   80886:	bf00      	nop

00080888 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   80888:	b480      	push	{r7}
   8088a:	b083      	sub	sp, #12
   8088c:	af00      	add	r7, sp, #0
   8088e:	6078      	str	r0, [r7, #4]
   80890:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   80892:	687b      	ldr	r3, [r7, #4]
   80894:	683a      	ldr	r2, [r7, #0]
   80896:	605a      	str	r2, [r3, #4]
}
   80898:	370c      	adds	r7, #12
   8089a:	46bd      	mov	sp, r7
   8089c:	f85d 7b04 	ldr.w	r7, [sp], #4
   808a0:	4770      	bx	lr
   808a2:	bf00      	nop

000808a4 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   808a4:	b480      	push	{r7}
   808a6:	b083      	sub	sp, #12
   808a8:	af00      	add	r7, sp, #0
   808aa:	6078      	str	r0, [r7, #4]
   808ac:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   808ae:	687b      	ldr	r3, [r7, #4]
   808b0:	683a      	ldr	r2, [r7, #0]
   808b2:	609a      	str	r2, [r3, #8]
}
   808b4:	370c      	adds	r7, #12
   808b6:	46bd      	mov	sp, r7
   808b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   808bc:	4770      	bx	lr
   808be:	bf00      	nop

000808c0 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   808c0:	b480      	push	{r7}
   808c2:	b083      	sub	sp, #12
   808c4:	af00      	add	r7, sp, #0
   808c6:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   808c8:	687b      	ldr	r3, [r7, #4]
   808ca:	691b      	ldr	r3, [r3, #16]
}
   808cc:	4618      	mov	r0, r3
   808ce:	370c      	adds	r7, #12
   808d0:	46bd      	mov	sp, r7
   808d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   808d6:	4770      	bx	lr

000808d8 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   808d8:	b480      	push	{r7}
   808da:	b085      	sub	sp, #20
   808dc:	af00      	add	r7, sp, #0
   808de:	6078      	str	r0, [r7, #4]
   808e0:	460b      	mov	r3, r1
   808e2:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   808e4:	687b      	ldr	r3, [r7, #4]
   808e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   808e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   808ec:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   808ee:	78fa      	ldrb	r2, [r7, #3]
   808f0:	68fb      	ldr	r3, [r7, #12]
   808f2:	431a      	orrs	r2, r3
   808f4:	687b      	ldr	r3, [r7, #4]
   808f6:	625a      	str	r2, [r3, #36]	; 0x24
}
   808f8:	3714      	adds	r7, #20
   808fa:	46bd      	mov	sp, r7
   808fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80900:	4770      	bx	lr
   80902:	bf00      	nop

00080904 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   80904:	b480      	push	{r7}
   80906:	b083      	sub	sp, #12
   80908:	af00      	add	r7, sp, #0
   8090a:	6078      	str	r0, [r7, #4]
   8090c:	460b      	mov	r3, r1
   8090e:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   80910:	78fb      	ldrb	r3, [r7, #3]
   80912:	687a      	ldr	r2, [r7, #4]
   80914:	015b      	lsls	r3, r3, #5
   80916:	4413      	add	r3, r2
   80918:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8091c:	681b      	ldr	r3, [r3, #0]
}
   8091e:	4618      	mov	r0, r3
   80920:	370c      	adds	r7, #12
   80922:	46bd      	mov	sp, r7
   80924:	f85d 7b04 	ldr.w	r7, [sp], #4
   80928:	4770      	bx	lr
   8092a:	bf00      	nop

0008092c <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   8092c:	b480      	push	{r7}
   8092e:	b085      	sub	sp, #20
   80930:	af00      	add	r7, sp, #0
   80932:	6078      	str	r0, [r7, #4]
   80934:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80936:	683b      	ldr	r3, [r7, #0]
   80938:	681b      	ldr	r3, [r3, #0]
   8093a:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   8093c:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   8093e:	683a      	ldr	r2, [r7, #0]
   80940:	7992      	ldrb	r2, [r2, #6]
   80942:	0412      	lsls	r2, r2, #16
   80944:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   80948:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   8094c:	6879      	ldr	r1, [r7, #4]
   8094e:	015b      	lsls	r3, r3, #5
   80950:	440b      	add	r3, r1
   80952:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80956:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   80958:	3714      	adds	r7, #20
   8095a:	46bd      	mov	sp, r7
   8095c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80960:	4770      	bx	lr
   80962:	bf00      	nop

00080964 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80964:	b480      	push	{r7}
   80966:	b085      	sub	sp, #20
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
   8096c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8096e:	683b      	ldr	r3, [r7, #0]
   80970:	681b      	ldr	r3, [r3, #0]
   80972:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80974:	683b      	ldr	r3, [r7, #0]
   80976:	791b      	ldrb	r3, [r3, #4]
   80978:	2b00      	cmp	r3, #0
   8097a:	d12e      	bne.n	809da <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   8097c:	7bfb      	ldrb	r3, [r7, #15]
   8097e:	687a      	ldr	r2, [r7, #4]
   80980:	3310      	adds	r3, #16
   80982:	015b      	lsls	r3, r3, #5
   80984:	4413      	add	r3, r2
   80986:	2200      	movs	r2, #0
   80988:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   8098a:	7bfb      	ldrb	r3, [r7, #15]
   8098c:	687a      	ldr	r2, [r7, #4]
   8098e:	3310      	adds	r3, #16
   80990:	015b      	lsls	r3, r3, #5
   80992:	4413      	add	r3, r2
   80994:	2200      	movs	r2, #0
   80996:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   80998:	7bfb      	ldrb	r3, [r7, #15]
   8099a:	687a      	ldr	r2, [r7, #4]
   8099c:	015b      	lsls	r3, r3, #5
   8099e:	4413      	add	r3, r2
   809a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   809a4:	2200      	movs	r2, #0
   809a6:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   809a8:	7bfb      	ldrb	r3, [r7, #15]
   809aa:	687a      	ldr	r2, [r7, #4]
   809ac:	015b      	lsls	r3, r3, #5
   809ae:	4413      	add	r3, r2
   809b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   809b4:	2200      	movs	r2, #0
   809b6:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   809b8:	7bfb      	ldrb	r3, [r7, #15]
   809ba:	687a      	ldr	r2, [r7, #4]
   809bc:	015b      	lsls	r3, r3, #5
   809be:	4413      	add	r3, r2
   809c0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   809c4:	2200      	movs	r2, #0
   809c6:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   809c8:	7bfb      	ldrb	r3, [r7, #15]
   809ca:	687a      	ldr	r2, [r7, #4]
   809cc:	015b      	lsls	r3, r3, #5
   809ce:	4413      	add	r3, r2
   809d0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   809d4:	2200      	movs	r2, #0
   809d6:	605a      	str	r2, [r3, #4]
		return;
   809d8:	e04e      	b.n	80a78 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   809da:	7bfb      	ldrb	r3, [r7, #15]
   809dc:	7bfa      	ldrb	r2, [r7, #15]
   809de:	6879      	ldr	r1, [r7, #4]
   809e0:	3210      	adds	r2, #16
   809e2:	0152      	lsls	r2, r2, #5
   809e4:	440a      	add	r2, r1
   809e6:	6812      	ldr	r2, [r2, #0]
   809e8:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   809ec:	683a      	ldr	r2, [r7, #0]
   809ee:	79d2      	ldrb	r2, [r2, #7]
   809f0:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   809f2:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   809f4:	6879      	ldr	r1, [r7, #4]
   809f6:	3310      	adds	r3, #16
   809f8:	015b      	lsls	r3, r3, #5
   809fa:	440b      	add	r3, r1
   809fc:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   809fe:	683b      	ldr	r3, [r7, #0]
   80a00:	795b      	ldrb	r3, [r3, #5]
   80a02:	2b00      	cmp	r3, #0
   80a04:	d015      	beq.n	80a32 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   80a06:	7bfb      	ldrb	r3, [r7, #15]
   80a08:	683a      	ldr	r2, [r7, #0]
   80a0a:	68d2      	ldr	r2, [r2, #12]
   80a0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a10:	6879      	ldr	r1, [r7, #4]
   80a12:	3310      	adds	r3, #16
   80a14:	015b      	lsls	r3, r3, #5
   80a16:	440b      	add	r3, r1
   80a18:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80a1a:	7bfb      	ldrb	r3, [r7, #15]
   80a1c:	683a      	ldr	r2, [r7, #0]
   80a1e:	6912      	ldr	r2, [r2, #16]
   80a20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a24:	6879      	ldr	r1, [r7, #4]
   80a26:	015b      	lsls	r3, r3, #5
   80a28:	440b      	add	r3, r1
   80a2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a2e:	601a      	str	r2, [r3, #0]
   80a30:	e010      	b.n	80a54 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80a32:	7bfb      	ldrb	r3, [r7, #15]
   80a34:	683a      	ldr	r2, [r7, #0]
   80a36:	68d2      	ldr	r2, [r2, #12]
   80a38:	6879      	ldr	r1, [r7, #4]
   80a3a:	3310      	adds	r3, #16
   80a3c:	015b      	lsls	r3, r3, #5
   80a3e:	440b      	add	r3, r1
   80a40:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80a42:	7bfb      	ldrb	r3, [r7, #15]
   80a44:	683a      	ldr	r2, [r7, #0]
   80a46:	6912      	ldr	r2, [r2, #16]
   80a48:	6879      	ldr	r1, [r7, #4]
   80a4a:	015b      	lsls	r3, r3, #5
   80a4c:	440b      	add	r3, r1
   80a4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a52:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a54:	7bfb      	ldrb	r3, [r7, #15]
   80a56:	7bfa      	ldrb	r2, [r7, #15]
   80a58:	6879      	ldr	r1, [r7, #4]
   80a5a:	3210      	adds	r2, #16
   80a5c:	0152      	lsls	r2, r2, #5
   80a5e:	440a      	add	r2, r1
   80a60:	6812      	ldr	r2, [r2, #0]
   80a62:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   80a66:	683a      	ldr	r2, [r7, #0]
   80a68:	7912      	ldrb	r2, [r2, #4]
   80a6a:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   80a6c:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a6e:	6879      	ldr	r1, [r7, #4]
   80a70:	3310      	adds	r3, #16
   80a72:	015b      	lsls	r3, r3, #5
   80a74:	440b      	add	r3, r1
   80a76:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   80a78:	3714      	adds	r7, #20
   80a7a:	46bd      	mov	sp, r7
   80a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a80:	4770      	bx	lr
   80a82:	bf00      	nop

00080a84 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80a84:	b580      	push	{r7, lr}
   80a86:	b086      	sub	sp, #24
   80a88:	af00      	add	r7, sp, #0
   80a8a:	6078      	str	r0, [r7, #4]
   80a8c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80a8e:	2300      	movs	r3, #0
   80a90:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80a92:	683b      	ldr	r3, [r7, #0]
   80a94:	681b      	ldr	r3, [r3, #0]
   80a96:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   80a98:	683b      	ldr	r3, [r7, #0]
   80a9a:	689b      	ldr	r3, [r3, #8]
   80a9c:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   80a9e:	68fb      	ldr	r3, [r7, #12]
   80aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80aa4:	2b00      	cmp	r3, #0
   80aa6:	d006      	beq.n	80ab6 <can_mailbox_read+0x32>
   80aa8:	68fb      	ldr	r3, [r7, #12]
   80aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80aae:	2b00      	cmp	r3, #0
   80ab0:	d001      	beq.n	80ab6 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   80ab2:	2302      	movs	r3, #2
   80ab4:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   80ab6:	7cfb      	ldrb	r3, [r7, #19]
   80ab8:	687a      	ldr	r2, [r7, #4]
   80aba:	015b      	lsls	r3, r3, #5
   80abc:	4413      	add	r3, r2
   80abe:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80ac2:	685b      	ldr	r3, [r3, #4]
   80ac4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80ac8:	683b      	ldr	r3, [r7, #0]
   80aca:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80acc:	68fb      	ldr	r3, [r7, #12]
   80ace:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80ad2:	0c1b      	lsrs	r3, r3, #16
   80ad4:	b2da      	uxtb	r2, r3
   80ad6:	683b      	ldr	r3, [r7, #0]
   80ad8:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   80ada:	7cfb      	ldrb	r3, [r7, #19]
   80adc:	687a      	ldr	r2, [r7, #4]
   80ade:	015b      	lsls	r3, r3, #5
   80ae0:	4413      	add	r3, r2
   80ae2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80ae6:	685a      	ldr	r2, [r3, #4]
   80ae8:	683b      	ldr	r3, [r7, #0]
   80aea:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   80aec:	683b      	ldr	r3, [r7, #0]
   80aee:	799b      	ldrb	r3, [r3, #6]
   80af0:	2b04      	cmp	r3, #4
   80af2:	d908      	bls.n	80b06 <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   80af4:	7cfb      	ldrb	r3, [r7, #19]
   80af6:	687a      	ldr	r2, [r7, #4]
   80af8:	015b      	lsls	r3, r3, #5
   80afa:	4413      	add	r3, r2
   80afc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80b00:	681a      	ldr	r2, [r3, #0]
   80b02:	683b      	ldr	r3, [r7, #0]
   80b04:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   80b06:	7cfb      	ldrb	r3, [r7, #19]
   80b08:	687a      	ldr	r2, [r7, #4]
   80b0a:	015b      	lsls	r3, r3, #5
   80b0c:	4413      	add	r3, r2
   80b0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80b12:	681a      	ldr	r2, [r3, #0]
   80b14:	683b      	ldr	r3, [r7, #0]
   80b16:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80b18:	683b      	ldr	r3, [r7, #0]
   80b1a:	689b      	ldr	r3, [r3, #8]
   80b1c:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   80b1e:	68fb      	ldr	r3, [r7, #12]
   80b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b24:	2b00      	cmp	r3, #0
   80b26:	d003      	beq.n	80b30 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   80b28:	697b      	ldr	r3, [r7, #20]
   80b2a:	f043 0304 	orr.w	r3, r3, #4
   80b2e:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   80b30:	6878      	ldr	r0, [r7, #4]
   80b32:	6839      	ldr	r1, [r7, #0]
   80b34:	4b03      	ldr	r3, [pc, #12]	; (80b44 <can_mailbox_read+0xc0>)
   80b36:	4798      	blx	r3

	return ul_retval;
   80b38:	697b      	ldr	r3, [r7, #20]
}
   80b3a:	4618      	mov	r0, r3
   80b3c:	3718      	adds	r7, #24
   80b3e:	46bd      	mov	sp, r7
   80b40:	bd80      	pop	{r7, pc}
   80b42:	bf00      	nop
   80b44:	0008092d 	.word	0x0008092d

00080b48 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80b48:	b580      	push	{r7, lr}
   80b4a:	b084      	sub	sp, #16
   80b4c:	af00      	add	r7, sp, #0
   80b4e:	6078      	str	r0, [r7, #4]
   80b50:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80b52:	683b      	ldr	r3, [r7, #0]
   80b54:	681b      	ldr	r3, [r3, #0]
   80b56:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   80b58:	7bfb      	ldrb	r3, [r7, #15]
   80b5a:	6878      	ldr	r0, [r7, #4]
   80b5c:	4619      	mov	r1, r3
   80b5e:	4b27      	ldr	r3, [pc, #156]	; (80bfc <can_mailbox_write+0xb4>)
   80b60:	4798      	blx	r3
   80b62:	4602      	mov	r2, r0
   80b64:	683b      	ldr	r3, [r7, #0]
   80b66:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80b68:	683b      	ldr	r3, [r7, #0]
   80b6a:	689b      	ldr	r3, [r3, #8]
   80b6c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   80b6e:	68bb      	ldr	r3, [r7, #8]
   80b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80b74:	2b00      	cmp	r3, #0
   80b76:	d101      	bne.n	80b7c <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   80b78:	2301      	movs	r3, #1
   80b7a:	e03b      	b.n	80bf4 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   80b7c:	683b      	ldr	r3, [r7, #0]
   80b7e:	795b      	ldrb	r3, [r3, #5]
   80b80:	2b00      	cmp	r3, #0
   80b82:	d00b      	beq.n	80b9c <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80b84:	7bfb      	ldrb	r3, [r7, #15]
   80b86:	683a      	ldr	r2, [r7, #0]
   80b88:	6912      	ldr	r2, [r2, #16]
   80b8a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80b8e:	6879      	ldr	r1, [r7, #4]
   80b90:	015b      	lsls	r3, r3, #5
   80b92:	440b      	add	r3, r1
   80b94:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80b98:	601a      	str	r2, [r3, #0]
   80b9a:	e008      	b.n	80bae <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80b9c:	7bfb      	ldrb	r3, [r7, #15]
   80b9e:	683a      	ldr	r2, [r7, #0]
   80ba0:	6912      	ldr	r2, [r2, #16]
   80ba2:	6879      	ldr	r1, [r7, #4]
   80ba4:	015b      	lsls	r3, r3, #5
   80ba6:	440b      	add	r3, r1
   80ba8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80bac:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80bae:	7bfb      	ldrb	r3, [r7, #15]
   80bb0:	683a      	ldr	r2, [r7, #0]
   80bb2:	6992      	ldr	r2, [r2, #24]
   80bb4:	6879      	ldr	r1, [r7, #4]
   80bb6:	015b      	lsls	r3, r3, #5
   80bb8:	440b      	add	r3, r1
   80bba:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80bbe:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   80bc0:	683b      	ldr	r3, [r7, #0]
   80bc2:	799b      	ldrb	r3, [r3, #6]
   80bc4:	2b04      	cmp	r3, #4
   80bc6:	d908      	bls.n	80bda <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   80bc8:	7bfb      	ldrb	r3, [r7, #15]
   80bca:	683a      	ldr	r2, [r7, #0]
   80bcc:	69d2      	ldr	r2, [r2, #28]
   80bce:	6879      	ldr	r1, [r7, #4]
   80bd0:	015b      	lsls	r3, r3, #5
   80bd2:	440b      	add	r3, r1
   80bd4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80bd8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80bda:	7bfb      	ldrb	r3, [r7, #15]
   80bdc:	683a      	ldr	r2, [r7, #0]
   80bde:	7992      	ldrb	r2, [r2, #6]
   80be0:	0412      	lsls	r2, r2, #16
   80be2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80be6:	6879      	ldr	r1, [r7, #4]
   80be8:	015b      	lsls	r3, r3, #5
   80bea:	440b      	add	r3, r1
   80bec:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80bf0:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   80bf2:	2300      	movs	r3, #0
}
   80bf4:	4618      	mov	r0, r3
   80bf6:	3710      	adds	r7, #16
   80bf8:	46bd      	mov	sp, r7
   80bfa:	bd80      	pop	{r7, pc}
   80bfc:	00080905 	.word	0x00080905

00080c00 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   80c00:	b580      	push	{r7, lr}
   80c02:	b08c      	sub	sp, #48	; 0x30
   80c04:	af00      	add	r7, sp, #0
   80c06:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80c08:	2300      	movs	r3, #0
   80c0a:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80c0c:	2300      	movs	r3, #0
   80c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80c12:	e00d      	b.n	80c30 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   80c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c18:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   80c1a:	f107 030c 	add.w	r3, r7, #12
   80c1e:	6878      	ldr	r0, [r7, #4]
   80c20:	4619      	mov	r1, r3
   80c22:	4b07      	ldr	r3, [pc, #28]	; (80c40 <can_reset_all_mailbox+0x40>)
   80c24:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80c26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c2a:	3301      	adds	r3, #1
   80c2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c34:	2b07      	cmp	r3, #7
   80c36:	d9ed      	bls.n	80c14 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   80c38:	3730      	adds	r7, #48	; 0x30
   80c3a:	46bd      	mov	sp, r7
   80c3c:	bd80      	pop	{r7, pc}
   80c3e:	bf00      	nop
   80c40:	00080965 	.word	0x00080965

00080c44 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   80c44:	b480      	push	{r7}
   80c46:	b085      	sub	sp, #20
   80c48:	af00      	add	r7, sp, #0
   80c4a:	60f8      	str	r0, [r7, #12]
   80c4c:	60b9      	str	r1, [r7, #8]
   80c4e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c50:	687b      	ldr	r3, [r7, #4]
   80c52:	2b00      	cmp	r3, #0
   80c54:	d003      	beq.n	80c5e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   80c56:	68fb      	ldr	r3, [r7, #12]
   80c58:	68ba      	ldr	r2, [r7, #8]
   80c5a:	665a      	str	r2, [r3, #100]	; 0x64
   80c5c:	e002      	b.n	80c64 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c5e:	68fb      	ldr	r3, [r7, #12]
   80c60:	68ba      	ldr	r2, [r7, #8]
   80c62:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   80c64:	3714      	adds	r7, #20
   80c66:	46bd      	mov	sp, r7
   80c68:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c6c:	4770      	bx	lr
   80c6e:	bf00      	nop

00080c70 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   80c70:	b480      	push	{r7}
   80c72:	b087      	sub	sp, #28
   80c74:	af00      	add	r7, sp, #0
   80c76:	60f8      	str	r0, [r7, #12]
   80c78:	60b9      	str	r1, [r7, #8]
   80c7a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80c7c:	68fb      	ldr	r3, [r7, #12]
   80c7e:	687a      	ldr	r2, [r7, #4]
   80c80:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80c82:	68bb      	ldr	r3, [r7, #8]
   80c84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c88:	d01f      	beq.n	80cca <pio_set_peripheral+0x5a>
   80c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c8e:	d805      	bhi.n	80c9c <pio_set_peripheral+0x2c>
   80c90:	2b00      	cmp	r3, #0
   80c92:	d027      	beq.n	80ce4 <pio_set_peripheral+0x74>
   80c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80c98:	d00a      	beq.n	80cb0 <pio_set_peripheral+0x40>
   80c9a:	e01f      	b.n	80cdc <pio_set_peripheral+0x6c>
   80c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ca0:	d020      	beq.n	80ce4 <pio_set_peripheral+0x74>
   80ca2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ca6:	d01d      	beq.n	80ce4 <pio_set_peripheral+0x74>
   80ca8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80cac:	d01a      	beq.n	80ce4 <pio_set_peripheral+0x74>
   80cae:	e015      	b.n	80cdc <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80cb0:	68fb      	ldr	r3, [r7, #12]
   80cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80cb4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80cb6:	68fb      	ldr	r3, [r7, #12]
   80cb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cba:	687b      	ldr	r3, [r7, #4]
   80cbc:	43d9      	mvns	r1, r3
   80cbe:	697b      	ldr	r3, [r7, #20]
   80cc0:	400b      	ands	r3, r1
   80cc2:	401a      	ands	r2, r3
   80cc4:	68fb      	ldr	r3, [r7, #12]
   80cc6:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80cc8:	e008      	b.n	80cdc <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80cca:	68fb      	ldr	r3, [r7, #12]
   80ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80cce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80cd0:	687a      	ldr	r2, [r7, #4]
   80cd2:	697b      	ldr	r3, [r7, #20]
   80cd4:	431a      	orrs	r2, r3
   80cd6:	68fb      	ldr	r3, [r7, #12]
   80cd8:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80cda:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   80cdc:	68fb      	ldr	r3, [r7, #12]
   80cde:	687a      	ldr	r2, [r7, #4]
   80ce0:	605a      	str	r2, [r3, #4]
   80ce2:	e000      	b.n	80ce6 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   80ce4:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   80ce6:	371c      	adds	r7, #28
   80ce8:	46bd      	mov	sp, r7
   80cea:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cee:	4770      	bx	lr

00080cf0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80cf0:	b580      	push	{r7, lr}
   80cf2:	b084      	sub	sp, #16
   80cf4:	af00      	add	r7, sp, #0
   80cf6:	60f8      	str	r0, [r7, #12]
   80cf8:	60b9      	str	r1, [r7, #8]
   80cfa:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   80cfc:	68f8      	ldr	r0, [r7, #12]
   80cfe:	68b9      	ldr	r1, [r7, #8]
   80d00:	4b18      	ldr	r3, [pc, #96]	; (80d64 <pio_set_input+0x74>)
   80d02:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80d04:	687b      	ldr	r3, [r7, #4]
   80d06:	f003 0301 	and.w	r3, r3, #1
   80d0a:	68f8      	ldr	r0, [r7, #12]
   80d0c:	68b9      	ldr	r1, [r7, #8]
   80d0e:	461a      	mov	r2, r3
   80d10:	4b15      	ldr	r3, [pc, #84]	; (80d68 <pio_set_input+0x78>)
   80d12:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80d14:	687b      	ldr	r3, [r7, #4]
   80d16:	f003 030a 	and.w	r3, r3, #10
   80d1a:	2b00      	cmp	r3, #0
   80d1c:	d003      	beq.n	80d26 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   80d1e:	68fb      	ldr	r3, [r7, #12]
   80d20:	68ba      	ldr	r2, [r7, #8]
   80d22:	621a      	str	r2, [r3, #32]
   80d24:	e002      	b.n	80d2c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80d26:	68fb      	ldr	r3, [r7, #12]
   80d28:	68ba      	ldr	r2, [r7, #8]
   80d2a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80d2c:	687b      	ldr	r3, [r7, #4]
   80d2e:	f003 0302 	and.w	r3, r3, #2
   80d32:	2b00      	cmp	r3, #0
   80d34:	d004      	beq.n	80d40 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   80d36:	68fb      	ldr	r3, [r7, #12]
   80d38:	68ba      	ldr	r2, [r7, #8]
   80d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   80d3e:	e008      	b.n	80d52 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80d40:	687b      	ldr	r3, [r7, #4]
   80d42:	f003 0308 	and.w	r3, r3, #8
   80d46:	2b00      	cmp	r3, #0
   80d48:	d003      	beq.n	80d52 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   80d4a:	68fb      	ldr	r3, [r7, #12]
   80d4c:	68ba      	ldr	r2, [r7, #8]
   80d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80d52:	68fb      	ldr	r3, [r7, #12]
   80d54:	68ba      	ldr	r2, [r7, #8]
   80d56:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   80d58:	68fb      	ldr	r3, [r7, #12]
   80d5a:	68ba      	ldr	r2, [r7, #8]
   80d5c:	601a      	str	r2, [r3, #0]
}
   80d5e:	3710      	adds	r7, #16
   80d60:	46bd      	mov	sp, r7
   80d62:	bd80      	pop	{r7, pc}
   80d64:	00080dd1 	.word	0x00080dd1
   80d68:	00080c45 	.word	0x00080c45

00080d6c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80d6c:	b580      	push	{r7, lr}
   80d6e:	b084      	sub	sp, #16
   80d70:	af00      	add	r7, sp, #0
   80d72:	60f8      	str	r0, [r7, #12]
   80d74:	60b9      	str	r1, [r7, #8]
   80d76:	607a      	str	r2, [r7, #4]
   80d78:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   80d7a:	68f8      	ldr	r0, [r7, #12]
   80d7c:	68b9      	ldr	r1, [r7, #8]
   80d7e:	4b12      	ldr	r3, [pc, #72]	; (80dc8 <pio_set_output+0x5c>)
   80d80:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80d82:	68f8      	ldr	r0, [r7, #12]
   80d84:	68b9      	ldr	r1, [r7, #8]
   80d86:	69ba      	ldr	r2, [r7, #24]
   80d88:	4b10      	ldr	r3, [pc, #64]	; (80dcc <pio_set_output+0x60>)
   80d8a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80d8c:	683b      	ldr	r3, [r7, #0]
   80d8e:	2b00      	cmp	r3, #0
   80d90:	d003      	beq.n	80d9a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   80d92:	68fb      	ldr	r3, [r7, #12]
   80d94:	68ba      	ldr	r2, [r7, #8]
   80d96:	651a      	str	r2, [r3, #80]	; 0x50
   80d98:	e002      	b.n	80da0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80d9a:	68fb      	ldr	r3, [r7, #12]
   80d9c:	68ba      	ldr	r2, [r7, #8]
   80d9e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80da0:	687b      	ldr	r3, [r7, #4]
   80da2:	2b00      	cmp	r3, #0
   80da4:	d003      	beq.n	80dae <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   80da6:	68fb      	ldr	r3, [r7, #12]
   80da8:	68ba      	ldr	r2, [r7, #8]
   80daa:	631a      	str	r2, [r3, #48]	; 0x30
   80dac:	e002      	b.n	80db4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80dae:	68fb      	ldr	r3, [r7, #12]
   80db0:	68ba      	ldr	r2, [r7, #8]
   80db2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80db4:	68fb      	ldr	r3, [r7, #12]
   80db6:	68ba      	ldr	r2, [r7, #8]
   80db8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   80dba:	68fb      	ldr	r3, [r7, #12]
   80dbc:	68ba      	ldr	r2, [r7, #8]
   80dbe:	601a      	str	r2, [r3, #0]
}
   80dc0:	3710      	adds	r7, #16
   80dc2:	46bd      	mov	sp, r7
   80dc4:	bd80      	pop	{r7, pc}
   80dc6:	bf00      	nop
   80dc8:	00080dd1 	.word	0x00080dd1
   80dcc:	00080c45 	.word	0x00080c45

00080dd0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   80dd0:	b480      	push	{r7}
   80dd2:	b083      	sub	sp, #12
   80dd4:	af00      	add	r7, sp, #0
   80dd6:	6078      	str	r0, [r7, #4]
   80dd8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   80dda:	687b      	ldr	r3, [r7, #4]
   80ddc:	683a      	ldr	r2, [r7, #0]
   80dde:	645a      	str	r2, [r3, #68]	; 0x44
}
   80de0:	370c      	adds	r7, #12
   80de2:	46bd      	mov	sp, r7
   80de4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80de8:	4770      	bx	lr
   80dea:	bf00      	nop

00080dec <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   80dec:	b480      	push	{r7}
   80dee:	b083      	sub	sp, #12
   80df0:	af00      	add	r7, sp, #0
   80df2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   80df4:	687b      	ldr	r3, [r7, #4]
   80df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   80df8:	4618      	mov	r0, r3
   80dfa:	370c      	adds	r7, #12
   80dfc:	46bd      	mov	sp, r7
   80dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e02:	4770      	bx	lr

00080e04 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   80e04:	b480      	push	{r7}
   80e06:	b083      	sub	sp, #12
   80e08:	af00      	add	r7, sp, #0
   80e0a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   80e0c:	687b      	ldr	r3, [r7, #4]
   80e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   80e10:	4618      	mov	r0, r3
   80e12:	370c      	adds	r7, #12
   80e14:	46bd      	mov	sp, r7
   80e16:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e1a:	4770      	bx	lr

00080e1c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   80e1c:	b480      	push	{r7}
   80e1e:	b085      	sub	sp, #20
   80e20:	af00      	add	r7, sp, #0
   80e22:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e24:	687b      	ldr	r3, [r7, #4]
   80e26:	095b      	lsrs	r3, r3, #5
   80e28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e2c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e30:	025b      	lsls	r3, r3, #9
   80e32:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80e34:	687b      	ldr	r3, [r7, #4]
   80e36:	f003 031f 	and.w	r3, r3, #31
   80e3a:	2201      	movs	r2, #1
   80e3c:	fa02 f303 	lsl.w	r3, r2, r3
   80e40:	461a      	mov	r2, r3
   80e42:	68fb      	ldr	r3, [r7, #12]
   80e44:	631a      	str	r2, [r3, #48]	; 0x30
}
   80e46:	3714      	adds	r7, #20
   80e48:	46bd      	mov	sp, r7
   80e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e4e:	4770      	bx	lr

00080e50 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   80e50:	b480      	push	{r7}
   80e52:	b085      	sub	sp, #20
   80e54:	af00      	add	r7, sp, #0
   80e56:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e58:	687b      	ldr	r3, [r7, #4]
   80e5a:	095b      	lsrs	r3, r3, #5
   80e5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e60:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e64:	025b      	lsls	r3, r3, #9
   80e66:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80e68:	687b      	ldr	r3, [r7, #4]
   80e6a:	f003 031f 	and.w	r3, r3, #31
   80e6e:	2201      	movs	r2, #1
   80e70:	fa02 f303 	lsl.w	r3, r2, r3
   80e74:	461a      	mov	r2, r3
   80e76:	68fb      	ldr	r3, [r7, #12]
   80e78:	635a      	str	r2, [r3, #52]	; 0x34
}
   80e7a:	3714      	adds	r7, #20
   80e7c:	46bd      	mov	sp, r7
   80e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e82:	4770      	bx	lr

00080e84 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   80e84:	b480      	push	{r7}
   80e86:	b085      	sub	sp, #20
   80e88:	af00      	add	r7, sp, #0
   80e8a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e8c:	687b      	ldr	r3, [r7, #4]
   80e8e:	095b      	lsrs	r3, r3, #5
   80e90:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e94:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e98:	025b      	lsls	r3, r3, #9
   80e9a:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80e9c:	68fb      	ldr	r3, [r7, #12]
   80e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   80ea0:	687b      	ldr	r3, [r7, #4]
   80ea2:	f003 031f 	and.w	r3, r3, #31
   80ea6:	2101      	movs	r1, #1
   80ea8:	fa01 f303 	lsl.w	r3, r1, r3
   80eac:	4013      	ands	r3, r2
   80eae:	2b00      	cmp	r3, #0
   80eb0:	d009      	beq.n	80ec6 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80eb2:	687b      	ldr	r3, [r7, #4]
   80eb4:	f003 031f 	and.w	r3, r3, #31
   80eb8:	2201      	movs	r2, #1
   80eba:	fa02 f303 	lsl.w	r3, r2, r3
   80ebe:	461a      	mov	r2, r3
   80ec0:	68fb      	ldr	r3, [r7, #12]
   80ec2:	635a      	str	r2, [r3, #52]	; 0x34
   80ec4:	e008      	b.n	80ed8 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80ec6:	687b      	ldr	r3, [r7, #4]
   80ec8:	f003 031f 	and.w	r3, r3, #31
   80ecc:	2201      	movs	r2, #1
   80ece:	fa02 f303 	lsl.w	r3, r2, r3
   80ed2:	461a      	mov	r2, r3
   80ed4:	68fb      	ldr	r3, [r7, #12]
   80ed6:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   80ed8:	3714      	adds	r7, #20
   80eda:	46bd      	mov	sp, r7
   80edc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ee0:	4770      	bx	lr
   80ee2:	bf00      	nop

00080ee4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80ee4:	b590      	push	{r4, r7, lr}
   80ee6:	b087      	sub	sp, #28
   80ee8:	af02      	add	r7, sp, #8
   80eea:	6078      	str	r0, [r7, #4]
   80eec:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80eee:	687b      	ldr	r3, [r7, #4]
   80ef0:	095b      	lsrs	r3, r3, #5
   80ef2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ef6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80efa:	025b      	lsls	r3, r3, #9
   80efc:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80efe:	683b      	ldr	r3, [r7, #0]
   80f00:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   80f04:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f08:	d048      	beq.n	80f9c <pio_configure_pin+0xb8>
   80f0a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f0e:	d806      	bhi.n	80f1e <pio_configure_pin+0x3a>
   80f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80f14:	d00a      	beq.n	80f2c <pio_configure_pin+0x48>
   80f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80f1a:	d023      	beq.n	80f64 <pio_configure_pin+0x80>
   80f1c:	e070      	b.n	81000 <pio_configure_pin+0x11c>
   80f1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80f22:	d047      	beq.n	80fb4 <pio_configure_pin+0xd0>
   80f24:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80f28:	d044      	beq.n	80fb4 <pio_configure_pin+0xd0>
   80f2a:	e069      	b.n	81000 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f2c:	687b      	ldr	r3, [r7, #4]
   80f2e:	f003 031f 	and.w	r3, r3, #31
   80f32:	2201      	movs	r2, #1
   80f34:	fa02 f303 	lsl.w	r3, r2, r3
   80f38:	68f8      	ldr	r0, [r7, #12]
   80f3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f3e:	461a      	mov	r2, r3
   80f40:	4b33      	ldr	r3, [pc, #204]	; (81010 <pio_configure_pin+0x12c>)
   80f42:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80f44:	687b      	ldr	r3, [r7, #4]
   80f46:	f003 031f 	and.w	r3, r3, #31
   80f4a:	2201      	movs	r2, #1
   80f4c:	fa02 f303 	lsl.w	r3, r2, r3
   80f50:	461a      	mov	r2, r3
   80f52:	683b      	ldr	r3, [r7, #0]
   80f54:	f003 0301 	and.w	r3, r3, #1
   80f58:	68f8      	ldr	r0, [r7, #12]
   80f5a:	4611      	mov	r1, r2
   80f5c:	461a      	mov	r2, r3
   80f5e:	4b2d      	ldr	r3, [pc, #180]	; (81014 <pio_configure_pin+0x130>)
   80f60:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80f62:	e04f      	b.n	81004 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80f64:	687b      	ldr	r3, [r7, #4]
   80f66:	f003 031f 	and.w	r3, r3, #31
   80f6a:	2201      	movs	r2, #1
   80f6c:	fa02 f303 	lsl.w	r3, r2, r3
   80f70:	68f8      	ldr	r0, [r7, #12]
   80f72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f76:	461a      	mov	r2, r3
   80f78:	4b25      	ldr	r3, [pc, #148]	; (81010 <pio_configure_pin+0x12c>)
   80f7a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80f7c:	687b      	ldr	r3, [r7, #4]
   80f7e:	f003 031f 	and.w	r3, r3, #31
   80f82:	2201      	movs	r2, #1
   80f84:	fa02 f303 	lsl.w	r3, r2, r3
   80f88:	461a      	mov	r2, r3
   80f8a:	683b      	ldr	r3, [r7, #0]
   80f8c:	f003 0301 	and.w	r3, r3, #1
   80f90:	68f8      	ldr	r0, [r7, #12]
   80f92:	4611      	mov	r1, r2
   80f94:	461a      	mov	r2, r3
   80f96:	4b1f      	ldr	r3, [pc, #124]	; (81014 <pio_configure_pin+0x130>)
   80f98:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80f9a:	e033      	b.n	81004 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80f9c:	687b      	ldr	r3, [r7, #4]
   80f9e:	f003 031f 	and.w	r3, r3, #31
   80fa2:	2201      	movs	r2, #1
   80fa4:	fa02 f303 	lsl.w	r3, r2, r3
   80fa8:	68f8      	ldr	r0, [r7, #12]
   80faa:	4619      	mov	r1, r3
   80fac:	683a      	ldr	r2, [r7, #0]
   80fae:	4b1a      	ldr	r3, [pc, #104]	; (81018 <pio_configure_pin+0x134>)
   80fb0:	4798      	blx	r3
		break;
   80fb2:	e027      	b.n	81004 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fb4:	687b      	ldr	r3, [r7, #4]
   80fb6:	f003 031f 	and.w	r3, r3, #31
   80fba:	2201      	movs	r2, #1
   80fbc:	fa02 f303 	lsl.w	r3, r2, r3
   80fc0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80fc2:	683b      	ldr	r3, [r7, #0]
   80fc4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fc8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80fcc:	bf14      	ite	ne
   80fce:	2300      	movne	r3, #0
   80fd0:	2301      	moveq	r3, #1
   80fd2:	b2db      	uxtb	r3, r3
   80fd4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   80fd6:	683b      	ldr	r3, [r7, #0]
   80fd8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fdc:	2b00      	cmp	r3, #0
   80fde:	bf0c      	ite	eq
   80fe0:	2300      	moveq	r3, #0
   80fe2:	2301      	movne	r3, #1
   80fe4:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   80fe6:	6838      	ldr	r0, [r7, #0]
   80fe8:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fec:	2800      	cmp	r0, #0
   80fee:	bf0c      	ite	eq
   80ff0:	2000      	moveq	r0, #0
   80ff2:	2001      	movne	r0, #1
   80ff4:	b2c0      	uxtb	r0, r0
   80ff6:	9000      	str	r0, [sp, #0]
   80ff8:	68f8      	ldr	r0, [r7, #12]
   80ffa:	4c08      	ldr	r4, [pc, #32]	; (8101c <pio_configure_pin+0x138>)
   80ffc:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80ffe:	e001      	b.n	81004 <pio_configure_pin+0x120>

	default:
		return 0;
   81000:	2300      	movs	r3, #0
   81002:	e000      	b.n	81006 <pio_configure_pin+0x122>
	}

	return 1;
   81004:	2301      	movs	r3, #1
}
   81006:	4618      	mov	r0, r3
   81008:	3714      	adds	r7, #20
   8100a:	46bd      	mov	sp, r7
   8100c:	bd90      	pop	{r4, r7, pc}
   8100e:	bf00      	nop
   81010:	00080c71 	.word	0x00080c71
   81014:	00080c45 	.word	0x00080c45
   81018:	00080cf1 	.word	0x00080cf1
   8101c:	00080d6d 	.word	0x00080d6d

00081020 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81020:	b580      	push	{r7, lr}
   81022:	b084      	sub	sp, #16
   81024:	af00      	add	r7, sp, #0
   81026:	6078      	str	r0, [r7, #4]
   81028:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8102a:	6878      	ldr	r0, [r7, #4]
   8102c:	4b22      	ldr	r3, [pc, #136]	; (810b8 <pio_handler_process+0x98>)
   8102e:	4798      	blx	r3
   81030:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   81032:	6878      	ldr	r0, [r7, #4]
   81034:	4b21      	ldr	r3, [pc, #132]	; (810bc <pio_handler_process+0x9c>)
   81036:	4798      	blx	r3
   81038:	4603      	mov	r3, r0
   8103a:	68fa      	ldr	r2, [r7, #12]
   8103c:	4013      	ands	r3, r2
   8103e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81040:	68fb      	ldr	r3, [r7, #12]
   81042:	2b00      	cmp	r3, #0
   81044:	d035      	beq.n	810b2 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   81046:	2300      	movs	r3, #0
   81048:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8104a:	e02f      	b.n	810ac <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8104c:	4a1c      	ldr	r2, [pc, #112]	; (810c0 <pio_handler_process+0xa0>)
   8104e:	68bb      	ldr	r3, [r7, #8]
   81050:	011b      	lsls	r3, r3, #4
   81052:	4413      	add	r3, r2
   81054:	681a      	ldr	r2, [r3, #0]
   81056:	683b      	ldr	r3, [r7, #0]
   81058:	429a      	cmp	r2, r3
   8105a:	d124      	bne.n	810a6 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8105c:	4a18      	ldr	r2, [pc, #96]	; (810c0 <pio_handler_process+0xa0>)
   8105e:	68bb      	ldr	r3, [r7, #8]
   81060:	011b      	lsls	r3, r3, #4
   81062:	4413      	add	r3, r2
   81064:	685a      	ldr	r2, [r3, #4]
   81066:	68fb      	ldr	r3, [r7, #12]
   81068:	4013      	ands	r3, r2
   8106a:	2b00      	cmp	r3, #0
   8106c:	d01b      	beq.n	810a6 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8106e:	4a14      	ldr	r2, [pc, #80]	; (810c0 <pio_handler_process+0xa0>)
   81070:	68bb      	ldr	r3, [r7, #8]
   81072:	011b      	lsls	r3, r3, #4
   81074:	4413      	add	r3, r2
   81076:	3308      	adds	r3, #8
   81078:	685b      	ldr	r3, [r3, #4]
   8107a:	4911      	ldr	r1, [pc, #68]	; (810c0 <pio_handler_process+0xa0>)
   8107c:	68ba      	ldr	r2, [r7, #8]
   8107e:	0112      	lsls	r2, r2, #4
   81080:	440a      	add	r2, r1
   81082:	6811      	ldr	r1, [r2, #0]
   81084:	480e      	ldr	r0, [pc, #56]	; (810c0 <pio_handler_process+0xa0>)
   81086:	68ba      	ldr	r2, [r7, #8]
   81088:	0112      	lsls	r2, r2, #4
   8108a:	4402      	add	r2, r0
   8108c:	6852      	ldr	r2, [r2, #4]
   8108e:	4608      	mov	r0, r1
   81090:	4611      	mov	r1, r2
   81092:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81094:	4a0a      	ldr	r2, [pc, #40]	; (810c0 <pio_handler_process+0xa0>)
   81096:	68bb      	ldr	r3, [r7, #8]
   81098:	011b      	lsls	r3, r3, #4
   8109a:	4413      	add	r3, r2
   8109c:	685b      	ldr	r3, [r3, #4]
   8109e:	43db      	mvns	r3, r3
   810a0:	68fa      	ldr	r2, [r7, #12]
   810a2:	4013      	ands	r3, r2
   810a4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   810a6:	68bb      	ldr	r3, [r7, #8]
   810a8:	3301      	adds	r3, #1
   810aa:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   810ac:	68fb      	ldr	r3, [r7, #12]
   810ae:	2b00      	cmp	r3, #0
   810b0:	d1cc      	bne.n	8104c <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   810b2:	3710      	adds	r7, #16
   810b4:	46bd      	mov	sp, r7
   810b6:	bd80      	pop	{r7, pc}
   810b8:	00080ded 	.word	0x00080ded
   810bc:	00080e05 	.word	0x00080e05
   810c0:	20070454 	.word	0x20070454

000810c4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   810c4:	b580      	push	{r7, lr}
   810c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   810c8:	4802      	ldr	r0, [pc, #8]	; (810d4 <PIOA_Handler+0x10>)
   810ca:	210b      	movs	r1, #11
   810cc:	4b02      	ldr	r3, [pc, #8]	; (810d8 <PIOA_Handler+0x14>)
   810ce:	4798      	blx	r3
}
   810d0:	bd80      	pop	{r7, pc}
   810d2:	bf00      	nop
   810d4:	400e0e00 	.word	0x400e0e00
   810d8:	00081021 	.word	0x00081021

000810dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   810dc:	b580      	push	{r7, lr}
   810de:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   810e0:	4802      	ldr	r0, [pc, #8]	; (810ec <PIOB_Handler+0x10>)
   810e2:	210c      	movs	r1, #12
   810e4:	4b02      	ldr	r3, [pc, #8]	; (810f0 <PIOB_Handler+0x14>)
   810e6:	4798      	blx	r3
}
   810e8:	bd80      	pop	{r7, pc}
   810ea:	bf00      	nop
   810ec:	400e1000 	.word	0x400e1000
   810f0:	00081021 	.word	0x00081021

000810f4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   810f4:	b580      	push	{r7, lr}
   810f6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   810f8:	4802      	ldr	r0, [pc, #8]	; (81104 <PIOC_Handler+0x10>)
   810fa:	210d      	movs	r1, #13
   810fc:	4b02      	ldr	r3, [pc, #8]	; (81108 <PIOC_Handler+0x14>)
   810fe:	4798      	blx	r3
}
   81100:	bd80      	pop	{r7, pc}
   81102:	bf00      	nop
   81104:	400e1200 	.word	0x400e1200
   81108:	00081021 	.word	0x00081021

0008110c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8110c:	b580      	push	{r7, lr}
   8110e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   81110:	4802      	ldr	r0, [pc, #8]	; (8111c <PIOD_Handler+0x10>)
   81112:	210e      	movs	r1, #14
   81114:	4b02      	ldr	r3, [pc, #8]	; (81120 <PIOD_Handler+0x14>)
   81116:	4798      	blx	r3
}
   81118:	bd80      	pop	{r7, pc}
   8111a:	bf00      	nop
   8111c:	400e1400 	.word	0x400e1400
   81120:	00081021 	.word	0x00081021

00081124 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81124:	b480      	push	{r7}
   81126:	b085      	sub	sp, #20
   81128:	af00      	add	r7, sp, #0
   8112a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8112c:	4b1d      	ldr	r3, [pc, #116]	; (811a4 <pmc_switch_mck_to_pllack+0x80>)
   8112e:	4a1d      	ldr	r2, [pc, #116]	; (811a4 <pmc_switch_mck_to_pllack+0x80>)
   81130:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81132:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   81136:	687a      	ldr	r2, [r7, #4]
   81138:	430a      	orrs	r2, r1
   8113a:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8113c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81140:	60fb      	str	r3, [r7, #12]
   81142:	e007      	b.n	81154 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81144:	68fb      	ldr	r3, [r7, #12]
   81146:	2b00      	cmp	r3, #0
   81148:	d101      	bne.n	8114e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8114a:	2301      	movs	r3, #1
   8114c:	e023      	b.n	81196 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8114e:	68fb      	ldr	r3, [r7, #12]
   81150:	3b01      	subs	r3, #1
   81152:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81154:	4b13      	ldr	r3, [pc, #76]	; (811a4 <pmc_switch_mck_to_pllack+0x80>)
   81156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81158:	f003 0308 	and.w	r3, r3, #8
   8115c:	2b00      	cmp	r3, #0
   8115e:	d0f1      	beq.n	81144 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81160:	4b10      	ldr	r3, [pc, #64]	; (811a4 <pmc_switch_mck_to_pllack+0x80>)
   81162:	4a10      	ldr	r2, [pc, #64]	; (811a4 <pmc_switch_mck_to_pllack+0x80>)
   81164:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81166:	f022 0203 	bic.w	r2, r2, #3
   8116a:	f042 0202 	orr.w	r2, r2, #2
   8116e:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81170:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81174:	60fb      	str	r3, [r7, #12]
   81176:	e007      	b.n	81188 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81178:	68fb      	ldr	r3, [r7, #12]
   8117a:	2b00      	cmp	r3, #0
   8117c:	d101      	bne.n	81182 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8117e:	2301      	movs	r3, #1
   81180:	e009      	b.n	81196 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81182:	68fb      	ldr	r3, [r7, #12]
   81184:	3b01      	subs	r3, #1
   81186:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81188:	4b06      	ldr	r3, [pc, #24]	; (811a4 <pmc_switch_mck_to_pllack+0x80>)
   8118a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8118c:	f003 0308 	and.w	r3, r3, #8
   81190:	2b00      	cmp	r3, #0
   81192:	d0f1      	beq.n	81178 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81194:	2300      	movs	r3, #0
}
   81196:	4618      	mov	r0, r3
   81198:	3714      	adds	r7, #20
   8119a:	46bd      	mov	sp, r7
   8119c:	f85d 7b04 	ldr.w	r7, [sp], #4
   811a0:	4770      	bx	lr
   811a2:	bf00      	nop
   811a4:	400e0600 	.word	0x400e0600

000811a8 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   811a8:	b480      	push	{r7}
   811aa:	b083      	sub	sp, #12
   811ac:	af00      	add	r7, sp, #0
   811ae:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   811b0:	687b      	ldr	r3, [r7, #4]
   811b2:	2b01      	cmp	r3, #1
   811b4:	d107      	bne.n	811c6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   811b6:	4a0a      	ldr	r2, [pc, #40]	; (811e0 <pmc_switch_sclk_to_32kxtal+0x38>)
   811b8:	4b09      	ldr	r3, [pc, #36]	; (811e0 <pmc_switch_sclk_to_32kxtal+0x38>)
   811ba:	689b      	ldr	r3, [r3, #8]
   811bc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   811c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811c4:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   811c6:	4a06      	ldr	r2, [pc, #24]	; (811e0 <pmc_switch_sclk_to_32kxtal+0x38>)
   811c8:	4b05      	ldr	r3, [pc, #20]	; (811e0 <pmc_switch_sclk_to_32kxtal+0x38>)
   811ca:	681b      	ldr	r3, [r3, #0]
   811cc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   811d0:	f043 0308 	orr.w	r3, r3, #8
   811d4:	6013      	str	r3, [r2, #0]
}
   811d6:	370c      	adds	r7, #12
   811d8:	46bd      	mov	sp, r7
   811da:	f85d 7b04 	ldr.w	r7, [sp], #4
   811de:	4770      	bx	lr
   811e0:	400e1a10 	.word	0x400e1a10

000811e4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   811e4:	b480      	push	{r7}
   811e6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   811e8:	4b09      	ldr	r3, [pc, #36]	; (81210 <pmc_osc_is_ready_32kxtal+0x2c>)
   811ea:	695b      	ldr	r3, [r3, #20]
   811ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   811f0:	2b00      	cmp	r3, #0
   811f2:	d007      	beq.n	81204 <pmc_osc_is_ready_32kxtal+0x20>
   811f4:	4b07      	ldr	r3, [pc, #28]	; (81214 <pmc_osc_is_ready_32kxtal+0x30>)
   811f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   811f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   811fc:	2b00      	cmp	r3, #0
   811fe:	d001      	beq.n	81204 <pmc_osc_is_ready_32kxtal+0x20>
   81200:	2301      	movs	r3, #1
   81202:	e000      	b.n	81206 <pmc_osc_is_ready_32kxtal+0x22>
   81204:	2300      	movs	r3, #0
}
   81206:	4618      	mov	r0, r3
   81208:	46bd      	mov	sp, r7
   8120a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8120e:	4770      	bx	lr
   81210:	400e1a10 	.word	0x400e1a10
   81214:	400e0600 	.word	0x400e0600

00081218 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   81218:	b480      	push	{r7}
   8121a:	b085      	sub	sp, #20
   8121c:	af00      	add	r7, sp, #0
   8121e:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   81220:	2300      	movs	r3, #0
   81222:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   81224:	4b21      	ldr	r3, [pc, #132]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81226:	6a1b      	ldr	r3, [r3, #32]
   81228:	f003 0301 	and.w	r3, r3, #1
   8122c:	2b00      	cmp	r3, #0
   8122e:	d00e      	beq.n	8124e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81230:	4a1e      	ldr	r2, [pc, #120]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81232:	4b1e      	ldr	r3, [pc, #120]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81234:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   81236:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8123a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8123e:	6879      	ldr	r1, [r7, #4]
   81240:	430b      	orrs	r3, r1
   81242:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81246:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8124a:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8124c:	e00b      	b.n	81266 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8124e:	2301      	movs	r3, #1
   81250:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81252:	4a16      	ldr	r2, [pc, #88]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81254:	4b15      	ldr	r3, [pc, #84]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81256:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   81258:	4b15      	ldr	r3, [pc, #84]	; (812b0 <pmc_switch_mainck_to_fastrc+0x98>)
   8125a:	400b      	ands	r3, r1
   8125c:	6879      	ldr	r1, [r7, #4]
   8125e:	4319      	orrs	r1, r3
   81260:	4b14      	ldr	r3, [pc, #80]	; (812b4 <pmc_switch_mainck_to_fastrc+0x9c>)
   81262:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81264:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81266:	bf00      	nop
   81268:	4b10      	ldr	r3, [pc, #64]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   8126a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81270:	2b00      	cmp	r3, #0
   81272:	d0f9      	beq.n	81268 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   81274:	4a0d      	ldr	r2, [pc, #52]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81276:	4b0d      	ldr	r3, [pc, #52]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81278:	6a1b      	ldr	r3, [r3, #32]
   8127a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81282:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81286:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   81288:	68fb      	ldr	r3, [r7, #12]
   8128a:	2b00      	cmp	r3, #0
   8128c:	d009      	beq.n	812a2 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8128e:	4a07      	ldr	r2, [pc, #28]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81290:	4b06      	ldr	r3, [pc, #24]	; (812ac <pmc_switch_mainck_to_fastrc+0x94>)
   81292:	6a1b      	ldr	r3, [r3, #32]
   81294:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81298:	f023 0301 	bic.w	r3, r3, #1
   8129c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   812a0:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   812a2:	3714      	adds	r7, #20
   812a4:	46bd      	mov	sp, r7
   812a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   812aa:	4770      	bx	lr
   812ac:	400e0600 	.word	0x400e0600
   812b0:	ffc8c086 	.word	0xffc8c086
   812b4:	00373f09 	.word	0x00373f09

000812b8 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   812b8:	b480      	push	{r7}
   812ba:	b083      	sub	sp, #12
   812bc:	af00      	add	r7, sp, #0
   812be:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   812c0:	687b      	ldr	r3, [r7, #4]
   812c2:	2b00      	cmp	r3, #0
   812c4:	d008      	beq.n	812d8 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812c6:	4912      	ldr	r1, [pc, #72]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812c8:	4b11      	ldr	r3, [pc, #68]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812ca:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   812cc:	4a11      	ldr	r2, [pc, #68]	; (81314 <pmc_switch_mainck_to_xtal+0x5c>)
   812ce:	401a      	ands	r2, r3
   812d0:	4b11      	ldr	r3, [pc, #68]	; (81318 <pmc_switch_mainck_to_xtal+0x60>)
   812d2:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812d4:	620b      	str	r3, [r1, #32]
   812d6:	e016      	b.n	81306 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   812d8:	490d      	ldr	r1, [pc, #52]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812da:	4b0d      	ldr	r3, [pc, #52]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812dc:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   812de:	4a0f      	ldr	r2, [pc, #60]	; (8131c <pmc_switch_mainck_to_xtal+0x64>)
   812e0:	401a      	ands	r2, r3
   812e2:	4b0f      	ldr	r3, [pc, #60]	; (81320 <pmc_switch_mainck_to_xtal+0x68>)
   812e4:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   812e6:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   812e8:	bf00      	nop
   812ea:	4b09      	ldr	r3, [pc, #36]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   812ee:	f003 0301 	and.w	r3, r3, #1
   812f2:	2b00      	cmp	r3, #0
   812f4:	d0f9      	beq.n	812ea <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   812f6:	4a06      	ldr	r2, [pc, #24]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812f8:	4b05      	ldr	r3, [pc, #20]	; (81310 <pmc_switch_mainck_to_xtal+0x58>)
   812fa:	6a1b      	ldr	r3, [r3, #32]
   812fc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81304:	6213      	str	r3, [r2, #32]
	}
}
   81306:	370c      	adds	r7, #12
   81308:	46bd      	mov	sp, r7
   8130a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8130e:	4770      	bx	lr
   81310:	400e0600 	.word	0x400e0600
   81314:	fec8fffc 	.word	0xfec8fffc
   81318:	01370002 	.word	0x01370002
   8131c:	ffc8c0fc 	.word	0xffc8c0fc
   81320:	00373f01 	.word	0x00373f01

00081324 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81324:	b480      	push	{r7}
   81326:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81328:	4b04      	ldr	r3, [pc, #16]	; (8133c <pmc_osc_is_ready_mainck+0x18>)
   8132a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81330:	4618      	mov	r0, r3
   81332:	46bd      	mov	sp, r7
   81334:	f85d 7b04 	ldr.w	r7, [sp], #4
   81338:	4770      	bx	lr
   8133a:	bf00      	nop
   8133c:	400e0600 	.word	0x400e0600

00081340 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   81340:	b480      	push	{r7}
   81342:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81344:	4b03      	ldr	r3, [pc, #12]	; (81354 <pmc_disable_pllack+0x14>)
   81346:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8134a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8134c:	46bd      	mov	sp, r7
   8134e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81352:	4770      	bx	lr
   81354:	400e0600 	.word	0x400e0600

00081358 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   81358:	b480      	push	{r7}
   8135a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8135c:	4b04      	ldr	r3, [pc, #16]	; (81370 <pmc_is_locked_pllack+0x18>)
   8135e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81360:	f003 0302 	and.w	r3, r3, #2
}
   81364:	4618      	mov	r0, r3
   81366:	46bd      	mov	sp, r7
   81368:	f85d 7b04 	ldr.w	r7, [sp], #4
   8136c:	4770      	bx	lr
   8136e:	bf00      	nop
   81370:	400e0600 	.word	0x400e0600

00081374 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   81374:	b480      	push	{r7}
   81376:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   81378:	4b04      	ldr	r3, [pc, #16]	; (8138c <pmc_is_locked_upll+0x18>)
   8137a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8137c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   81380:	4618      	mov	r0, r3
   81382:	46bd      	mov	sp, r7
   81384:	f85d 7b04 	ldr.w	r7, [sp], #4
   81388:	4770      	bx	lr
   8138a:	bf00      	nop
   8138c:	400e0600 	.word	0x400e0600

00081390 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   81390:	b480      	push	{r7}
   81392:	b083      	sub	sp, #12
   81394:	af00      	add	r7, sp, #0
   81396:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   81398:	687b      	ldr	r3, [r7, #4]
   8139a:	2b2c      	cmp	r3, #44	; 0x2c
   8139c:	d901      	bls.n	813a2 <pmc_enable_periph_clk+0x12>
		return 1;
   8139e:	2301      	movs	r3, #1
   813a0:	e02f      	b.n	81402 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   813a2:	687b      	ldr	r3, [r7, #4]
   813a4:	2b1f      	cmp	r3, #31
   813a6:	d813      	bhi.n	813d0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   813a8:	4b19      	ldr	r3, [pc, #100]	; (81410 <pmc_enable_periph_clk+0x80>)
   813aa:	699a      	ldr	r2, [r3, #24]
   813ac:	687b      	ldr	r3, [r7, #4]
   813ae:	2101      	movs	r1, #1
   813b0:	fa01 f303 	lsl.w	r3, r1, r3
   813b4:	401a      	ands	r2, r3
   813b6:	687b      	ldr	r3, [r7, #4]
   813b8:	2101      	movs	r1, #1
   813ba:	fa01 f303 	lsl.w	r3, r1, r3
   813be:	429a      	cmp	r2, r3
   813c0:	d01e      	beq.n	81400 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   813c2:	4b13      	ldr	r3, [pc, #76]	; (81410 <pmc_enable_periph_clk+0x80>)
   813c4:	687a      	ldr	r2, [r7, #4]
   813c6:	2101      	movs	r1, #1
   813c8:	fa01 f202 	lsl.w	r2, r1, r2
   813cc:	611a      	str	r2, [r3, #16]
   813ce:	e017      	b.n	81400 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   813d0:	687b      	ldr	r3, [r7, #4]
   813d2:	3b20      	subs	r3, #32
   813d4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   813d6:	4b0e      	ldr	r3, [pc, #56]	; (81410 <pmc_enable_periph_clk+0x80>)
   813d8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   813dc:	687b      	ldr	r3, [r7, #4]
   813de:	2101      	movs	r1, #1
   813e0:	fa01 f303 	lsl.w	r3, r1, r3
   813e4:	401a      	ands	r2, r3
   813e6:	687b      	ldr	r3, [r7, #4]
   813e8:	2101      	movs	r1, #1
   813ea:	fa01 f303 	lsl.w	r3, r1, r3
   813ee:	429a      	cmp	r2, r3
   813f0:	d006      	beq.n	81400 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   813f2:	4b07      	ldr	r3, [pc, #28]	; (81410 <pmc_enable_periph_clk+0x80>)
   813f4:	687a      	ldr	r2, [r7, #4]
   813f6:	2101      	movs	r1, #1
   813f8:	fa01 f202 	lsl.w	r2, r1, r2
   813fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81400:	2300      	movs	r3, #0
}
   81402:	4618      	mov	r0, r3
   81404:	370c      	adds	r7, #12
   81406:	46bd      	mov	sp, r7
   81408:	f85d 7b04 	ldr.w	r7, [sp], #4
   8140c:	4770      	bx	lr
   8140e:	bf00      	nop
   81410:	400e0600 	.word	0x400e0600

00081414 <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
   81414:	b480      	push	{r7}
   81416:	b083      	sub	sp, #12
   81418:	af00      	add	r7, sp, #0
   8141a:	6078      	str	r0, [r7, #4]
   8141c:	460b      	mov	r3, r1
   8141e:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
   81420:	887b      	ldrh	r3, [r7, #2]
   81422:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   81426:	687b      	ldr	r3, [r7, #4]
   81428:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8142a:	2300      	movs	r3, #0
}
   8142c:	4618      	mov	r0, r3
   8142e:	370c      	adds	r7, #12
   81430:	46bd      	mov	sp, r7
   81432:	f85d 7b04 	ldr.w	r7, [sp], #4
   81436:	4770      	bx	lr

00081438 <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   81438:	b480      	push	{r7}
   8143a:	b085      	sub	sp, #20
   8143c:	af00      	add	r7, sp, #0
   8143e:	6078      	str	r0, [r7, #4]
   81440:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
   81442:	687b      	ldr	r3, [r7, #4]
   81444:	681b      	ldr	r3, [r3, #0]
   81446:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
   81448:	68fa      	ldr	r2, [r7, #12]
   8144a:	683b      	ldr	r3, [r7, #0]
   8144c:	4313      	orrs	r3, r2
   8144e:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   81450:	687b      	ldr	r3, [r7, #4]
   81452:	68fa      	ldr	r2, [r7, #12]
   81454:	601a      	str	r2, [r3, #0]
}
   81456:	3714      	adds	r7, #20
   81458:	46bd      	mov	sp, r7
   8145a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8145e:	4770      	bx	lr

00081460 <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   81460:	b480      	push	{r7}
   81462:	b085      	sub	sp, #20
   81464:	af00      	add	r7, sp, #0
   81466:	6078      	str	r0, [r7, #4]
   81468:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
   8146a:	2300      	movs	r3, #0
   8146c:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
   8146e:	687b      	ldr	r3, [r7, #4]
   81470:	681b      	ldr	r3, [r3, #0]
   81472:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
   81474:	683b      	ldr	r3, [r7, #0]
   81476:	43db      	mvns	r3, r3
   81478:	68fa      	ldr	r2, [r7, #12]
   8147a:	4013      	ands	r3, r2
   8147c:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   8147e:	687b      	ldr	r3, [r7, #4]
   81480:	68fa      	ldr	r2, [r7, #12]
   81482:	601a      	str	r2, [r3, #0]
}
   81484:	3714      	adds	r7, #20
   81486:	46bd      	mov	sp, r7
   81488:	f85d 7b04 	ldr.w	r7, [sp], #4
   8148c:	4770      	bx	lr
   8148e:	bf00      	nop

00081490 <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
   81490:	b480      	push	{r7}
   81492:	b083      	sub	sp, #12
   81494:	af00      	add	r7, sp, #0
   81496:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
   81498:	687b      	ldr	r3, [r7, #4]
   8149a:	68db      	ldr	r3, [r3, #12]
}
   8149c:	4618      	mov	r0, r3
   8149e:	370c      	adds	r7, #12
   814a0:	46bd      	mov	sp, r7
   814a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   814a6:	4770      	bx	lr

000814a8 <rtt_write_alarm_time>:
 *
 * \retval 0 Configuration is done.
 * \retval 1 Parameter error.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
   814a8:	b580      	push	{r7, lr}
   814aa:	b084      	sub	sp, #16
   814ac:	af00      	add	r7, sp, #0
   814ae:	6078      	str	r0, [r7, #4]
   814b0:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	if (ul_alarm_time == 0) {
   814b2:	683b      	ldr	r3, [r7, #0]
   814b4:	2b00      	cmp	r3, #0
   814b6:	d101      	bne.n	814bc <rtt_write_alarm_time+0x14>
		return 1;
   814b8:	2301      	movs	r3, #1
   814ba:	e016      	b.n	814ea <rtt_write_alarm_time+0x42>
	}

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
   814bc:	687b      	ldr	r3, [r7, #4]
   814be:	681b      	ldr	r3, [r3, #0]
   814c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   814c4:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
   814c6:	480b      	ldr	r0, [pc, #44]	; (814f4 <rtt_write_alarm_time+0x4c>)
   814c8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   814cc:	4b0a      	ldr	r3, [pc, #40]	; (814f8 <rtt_write_alarm_time+0x50>)
   814ce:	4798      	blx	r3

	/* Alarm time = ALMV + 1 */
	p_rtt->RTT_AR = ul_alarm_time - 1;
   814d0:	683b      	ldr	r3, [r7, #0]
   814d2:	1e5a      	subs	r2, r3, #1
   814d4:	687b      	ldr	r3, [r7, #4]
   814d6:	605a      	str	r2, [r3, #4]

	if (flag) {
   814d8:	68fb      	ldr	r3, [r7, #12]
   814da:	2b00      	cmp	r3, #0
   814dc:	d004      	beq.n	814e8 <rtt_write_alarm_time+0x40>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
   814de:	4805      	ldr	r0, [pc, #20]	; (814f4 <rtt_write_alarm_time+0x4c>)
   814e0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   814e4:	4b05      	ldr	r3, [pc, #20]	; (814fc <rtt_write_alarm_time+0x54>)
   814e6:	4798      	blx	r3
	}

	return 0;
   814e8:	2300      	movs	r3, #0
}
   814ea:	4618      	mov	r0, r3
   814ec:	3710      	adds	r7, #16
   814ee:	46bd      	mov	sp, r7
   814f0:	bd80      	pop	{r7, pc}
   814f2:	bf00      	nop
   814f4:	400e1a30 	.word	0x400e1a30
   814f8:	00081461 	.word	0x00081461
   814fc:	00081439 	.word	0x00081439

00081500 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81500:	b480      	push	{r7}
   81502:	b083      	sub	sp, #12
   81504:	af00      	add	r7, sp, #0
   81506:	6078      	str	r0, [r7, #4]
   81508:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   8150a:	687b      	ldr	r3, [r7, #4]
   8150c:	683a      	ldr	r2, [r7, #0]
   8150e:	60da      	str	r2, [r3, #12]
}
   81510:	370c      	adds	r7, #12
   81512:	46bd      	mov	sp, r7
   81514:	f85d 7b04 	ldr.w	r7, [sp], #4
   81518:	4770      	bx	lr
   8151a:	bf00      	nop

0008151c <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   8151c:	b480      	push	{r7}
   8151e:	b083      	sub	sp, #12
   81520:	af00      	add	r7, sp, #0
   81522:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   81524:	687b      	ldr	r3, [r7, #4]
   81526:	691b      	ldr	r3, [r3, #16]
}
   81528:	4618      	mov	r0, r3
   8152a:	370c      	adds	r7, #12
   8152c:	46bd      	mov	sp, r7
   8152e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81532:	4770      	bx	lr

00081534 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   81534:	b480      	push	{r7}
   81536:	b083      	sub	sp, #12
   81538:	af00      	add	r7, sp, #0
   8153a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   8153c:	687b      	ldr	r3, [r7, #4]
   8153e:	695b      	ldr	r3, [r3, #20]
}
   81540:	4618      	mov	r0, r3
   81542:	370c      	adds	r7, #12
   81544:	46bd      	mov	sp, r7
   81546:	f85d 7b04 	ldr.w	r7, [sp], #4
   8154a:	4770      	bx	lr

0008154c <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   8154c:	b480      	push	{r7}
   8154e:	b085      	sub	sp, #20
   81550:	af00      	add	r7, sp, #0
   81552:	6078      	str	r0, [r7, #4]
   81554:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   81556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8155a:	60fb      	str	r3, [r7, #12]

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8155c:	e006      	b.n	8156c <usart_putchar+0x20>
		if (!timeout--) {
   8155e:	68fb      	ldr	r3, [r7, #12]
   81560:	1e5a      	subs	r2, r3, #1
   81562:	60fa      	str	r2, [r7, #12]
   81564:	2b00      	cmp	r3, #0
   81566:	d101      	bne.n	8156c <usart_putchar+0x20>
			return 1;
   81568:	2301      	movs	r3, #1
   8156a:	e00b      	b.n	81584 <usart_putchar+0x38>
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8156c:	687b      	ldr	r3, [r7, #4]
   8156e:	695b      	ldr	r3, [r3, #20]
   81570:	f003 0302 	and.w	r3, r3, #2
   81574:	2b00      	cmp	r3, #0
   81576:	d0f2      	beq.n	8155e <usart_putchar+0x12>
		if (!timeout--) {
			return 1;
		}
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81578:	683b      	ldr	r3, [r7, #0]
   8157a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8157e:	687b      	ldr	r3, [r7, #4]
   81580:	61da      	str	r2, [r3, #28]

	return 0;
   81582:	2300      	movs	r3, #0
}
   81584:	4618      	mov	r0, r3
   81586:	3714      	adds	r7, #20
   81588:	46bd      	mov	sp, r7
   8158a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8158e:	4770      	bx	lr

00081590 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   81590:	b480      	push	{r7}
   81592:	b085      	sub	sp, #20
   81594:	af00      	add	r7, sp, #0
   81596:	6078      	str	r0, [r7, #4]
   81598:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   8159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8159e:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815a0:	e006      	b.n	815b0 <usart_getchar+0x20>
		if (!timeout--) {
   815a2:	68fb      	ldr	r3, [r7, #12]
   815a4:	1e5a      	subs	r2, r3, #1
   815a6:	60fa      	str	r2, [r7, #12]
   815a8:	2b00      	cmp	r3, #0
   815aa:	d101      	bne.n	815b0 <usart_getchar+0x20>
			return 1;
   815ac:	2301      	movs	r3, #1
   815ae:	e00c      	b.n	815ca <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815b0:	687b      	ldr	r3, [r7, #4]
   815b2:	695b      	ldr	r3, [r3, #20]
   815b4:	f003 0301 	and.w	r3, r3, #1
   815b8:	2b00      	cmp	r3, #0
   815ba:	d0f2      	beq.n	815a2 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   815bc:	687b      	ldr	r3, [r7, #4]
   815be:	699b      	ldr	r3, [r3, #24]
   815c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   815c4:	683b      	ldr	r3, [r7, #0]
   815c6:	601a      	str	r2, [r3, #0]

	return 0;
   815c8:	2300      	movs	r3, #0
}
   815ca:	4618      	mov	r0, r3
   815cc:	3714      	adds	r7, #20
   815ce:	46bd      	mov	sp, r7
   815d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   815d4:	4770      	bx	lr
   815d6:	bf00      	nop

000815d8 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   815d8:	b480      	push	{r7}
   815da:	b083      	sub	sp, #12
   815dc:	af00      	add	r7, sp, #0
   815de:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   815e0:	687a      	ldr	r2, [r7, #4]
   815e2:	4b05      	ldr	r3, [pc, #20]	; (815f8 <wdt_restart+0x20>)
   815e4:	429a      	cmp	r2, r3
   815e6:	d102      	bne.n	815ee <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   815e8:	687b      	ldr	r3, [r7, #4]
   815ea:	4a04      	ldr	r2, [pc, #16]	; (815fc <wdt_restart+0x24>)
   815ec:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   815ee:	370c      	adds	r7, #12
   815f0:	46bd      	mov	sp, r7
   815f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   815f6:	4770      	bx	lr
   815f8:	400e1a50 	.word	0x400e1a50
   815fc:	a5000001 	.word	0xa5000001

00081600 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   81600:	b480      	push	{r7}
   81602:	b083      	sub	sp, #12
   81604:	af00      	add	r7, sp, #0
   81606:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   81608:	687b      	ldr	r3, [r7, #4]
   8160a:	689b      	ldr	r3, [r3, #8]
}
   8160c:	4618      	mov	r0, r3
   8160e:	370c      	adds	r7, #12
   81610:	46bd      	mov	sp, r7
   81612:	f85d 7b04 	ldr.w	r7, [sp], #4
   81616:	4770      	bx	lr

00081618 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81618:	b480      	push	{r7}
   8161a:	af00      	add	r7, sp, #0
	while (1) {
	}
   8161c:	e7fe      	b.n	8161c <Dummy_Handler+0x4>
   8161e:	bf00      	nop

00081620 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81620:	b580      	push	{r7, lr}
   81622:	b082      	sub	sp, #8
   81624:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   81626:	4b1e      	ldr	r3, [pc, #120]	; (816a0 <Reset_Handler+0x80>)
   81628:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8162a:	4b1e      	ldr	r3, [pc, #120]	; (816a4 <Reset_Handler+0x84>)
   8162c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8162e:	687a      	ldr	r2, [r7, #4]
   81630:	683b      	ldr	r3, [r7, #0]
   81632:	429a      	cmp	r2, r3
   81634:	d00c      	beq.n	81650 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   81636:	e007      	b.n	81648 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   81638:	683b      	ldr	r3, [r7, #0]
   8163a:	1d1a      	adds	r2, r3, #4
   8163c:	603a      	str	r2, [r7, #0]
   8163e:	687a      	ldr	r2, [r7, #4]
   81640:	1d11      	adds	r1, r2, #4
   81642:	6079      	str	r1, [r7, #4]
   81644:	6812      	ldr	r2, [r2, #0]
   81646:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81648:	683a      	ldr	r2, [r7, #0]
   8164a:	4b17      	ldr	r3, [pc, #92]	; (816a8 <Reset_Handler+0x88>)
   8164c:	429a      	cmp	r2, r3
   8164e:	d3f3      	bcc.n	81638 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81650:	4b16      	ldr	r3, [pc, #88]	; (816ac <Reset_Handler+0x8c>)
   81652:	603b      	str	r3, [r7, #0]
   81654:	e004      	b.n	81660 <Reset_Handler+0x40>
		*pDest++ = 0;
   81656:	683b      	ldr	r3, [r7, #0]
   81658:	1d1a      	adds	r2, r3, #4
   8165a:	603a      	str	r2, [r7, #0]
   8165c:	2200      	movs	r2, #0
   8165e:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81660:	683a      	ldr	r2, [r7, #0]
   81662:	4b13      	ldr	r3, [pc, #76]	; (816b0 <Reset_Handler+0x90>)
   81664:	429a      	cmp	r2, r3
   81666:	d3f6      	bcc.n	81656 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   81668:	4b12      	ldr	r3, [pc, #72]	; (816b4 <Reset_Handler+0x94>)
   8166a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8166c:	4a12      	ldr	r2, [pc, #72]	; (816b8 <Reset_Handler+0x98>)
   8166e:	687b      	ldr	r3, [r7, #4]
   81670:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   81674:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81678:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8167a:	687b      	ldr	r3, [r7, #4]
   8167c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81680:	d309      	bcc.n	81696 <Reset_Handler+0x76>
   81682:	687a      	ldr	r2, [r7, #4]
   81684:	4b0d      	ldr	r3, [pc, #52]	; (816bc <Reset_Handler+0x9c>)
   81686:	429a      	cmp	r2, r3
   81688:	d805      	bhi.n	81696 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8168a:	4b0b      	ldr	r3, [pc, #44]	; (816b8 <Reset_Handler+0x98>)
   8168c:	4a0a      	ldr	r2, [pc, #40]	; (816b8 <Reset_Handler+0x98>)
   8168e:	6892      	ldr	r2, [r2, #8]
   81690:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81694:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81696:	4b0a      	ldr	r3, [pc, #40]	; (816c0 <Reset_Handler+0xa0>)
   81698:	4798      	blx	r3

	/* Branch to main function */
	main();
   8169a:	4b0a      	ldr	r3, [pc, #40]	; (816c4 <Reset_Handler+0xa4>)
   8169c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8169e:	e7fe      	b.n	8169e <Reset_Handler+0x7e>
   816a0:	00084e70 	.word	0x00084e70
   816a4:	20070000 	.word	0x20070000
   816a8:	20070438 	.word	0x20070438
   816ac:	20070438 	.word	0x20070438
   816b0:	2007a6bc 	.word	0x2007a6bc
   816b4:	00080000 	.word	0x00080000
   816b8:	e000ed00 	.word	0xe000ed00
   816bc:	200fffff 	.word	0x200fffff
   816c0:	00084a75 	.word	0x00084a75
   816c4:	000847e9 	.word	0x000847e9

000816c8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   816c8:	b480      	push	{r7}
   816ca:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   816cc:	4b56      	ldr	r3, [pc, #344]	; (81828 <SystemCoreClockUpdate+0x160>)
   816ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816d0:	f003 0303 	and.w	r3, r3, #3
   816d4:	2b03      	cmp	r3, #3
   816d6:	f200 808a 	bhi.w	817ee <SystemCoreClockUpdate+0x126>
   816da:	a101      	add	r1, pc, #4	; (adr r1, 816e0 <SystemCoreClockUpdate+0x18>)
   816dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   816e0:	000816f1 	.word	0x000816f1
   816e4:	00081711 	.word	0x00081711
   816e8:	00081761 	.word	0x00081761
   816ec:	00081761 	.word	0x00081761
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   816f0:	4b4e      	ldr	r3, [pc, #312]	; (8182c <SystemCoreClockUpdate+0x164>)
   816f2:	695b      	ldr	r3, [r3, #20]
   816f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   816f8:	2b00      	cmp	r3, #0
   816fa:	d004      	beq.n	81706 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   816fc:	4b4c      	ldr	r3, [pc, #304]	; (81830 <SystemCoreClockUpdate+0x168>)
   816fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81702:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   81704:	e073      	b.n	817ee <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81706:	4b4a      	ldr	r3, [pc, #296]	; (81830 <SystemCoreClockUpdate+0x168>)
   81708:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8170c:	601a      	str	r2, [r3, #0]
		}
		break;
   8170e:	e06e      	b.n	817ee <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81710:	4b45      	ldr	r3, [pc, #276]	; (81828 <SystemCoreClockUpdate+0x160>)
   81712:	6a1b      	ldr	r3, [r3, #32]
   81714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81718:	2b00      	cmp	r3, #0
   8171a:	d003      	beq.n	81724 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8171c:	4b44      	ldr	r3, [pc, #272]	; (81830 <SystemCoreClockUpdate+0x168>)
   8171e:	4a45      	ldr	r2, [pc, #276]	; (81834 <SystemCoreClockUpdate+0x16c>)
   81720:	601a      	str	r2, [r3, #0]
   81722:	e01c      	b.n	8175e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81724:	4b42      	ldr	r3, [pc, #264]	; (81830 <SystemCoreClockUpdate+0x168>)
   81726:	4a44      	ldr	r2, [pc, #272]	; (81838 <SystemCoreClockUpdate+0x170>)
   81728:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8172a:	4b3f      	ldr	r3, [pc, #252]	; (81828 <SystemCoreClockUpdate+0x160>)
   8172c:	6a1b      	ldr	r3, [r3, #32]
   8172e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81732:	2b10      	cmp	r3, #16
   81734:	d004      	beq.n	81740 <SystemCoreClockUpdate+0x78>
   81736:	2b20      	cmp	r3, #32
   81738:	d008      	beq.n	8174c <SystemCoreClockUpdate+0x84>
   8173a:	2b00      	cmp	r3, #0
   8173c:	d00e      	beq.n	8175c <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8173e:	e00e      	b.n	8175e <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81740:	4b3b      	ldr	r3, [pc, #236]	; (81830 <SystemCoreClockUpdate+0x168>)
   81742:	681b      	ldr	r3, [r3, #0]
   81744:	005a      	lsls	r2, r3, #1
   81746:	4b3a      	ldr	r3, [pc, #232]	; (81830 <SystemCoreClockUpdate+0x168>)
   81748:	601a      	str	r2, [r3, #0]
				break;
   8174a:	e008      	b.n	8175e <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8174c:	4b38      	ldr	r3, [pc, #224]	; (81830 <SystemCoreClockUpdate+0x168>)
   8174e:	681a      	ldr	r2, [r3, #0]
   81750:	4613      	mov	r3, r2
   81752:	005b      	lsls	r3, r3, #1
   81754:	441a      	add	r2, r3
   81756:	4b36      	ldr	r3, [pc, #216]	; (81830 <SystemCoreClockUpdate+0x168>)
   81758:	601a      	str	r2, [r3, #0]
				break;
   8175a:	e000      	b.n	8175e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8175c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8175e:	e046      	b.n	817ee <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81760:	4b31      	ldr	r3, [pc, #196]	; (81828 <SystemCoreClockUpdate+0x160>)
   81762:	6a1b      	ldr	r3, [r3, #32]
   81764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81768:	2b00      	cmp	r3, #0
   8176a:	d003      	beq.n	81774 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8176c:	4b30      	ldr	r3, [pc, #192]	; (81830 <SystemCoreClockUpdate+0x168>)
   8176e:	4a31      	ldr	r2, [pc, #196]	; (81834 <SystemCoreClockUpdate+0x16c>)
   81770:	601a      	str	r2, [r3, #0]
   81772:	e01c      	b.n	817ae <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81774:	4b2e      	ldr	r3, [pc, #184]	; (81830 <SystemCoreClockUpdate+0x168>)
   81776:	4a30      	ldr	r2, [pc, #192]	; (81838 <SystemCoreClockUpdate+0x170>)
   81778:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8177a:	4b2b      	ldr	r3, [pc, #172]	; (81828 <SystemCoreClockUpdate+0x160>)
   8177c:	6a1b      	ldr	r3, [r3, #32]
   8177e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81782:	2b10      	cmp	r3, #16
   81784:	d004      	beq.n	81790 <SystemCoreClockUpdate+0xc8>
   81786:	2b20      	cmp	r3, #32
   81788:	d008      	beq.n	8179c <SystemCoreClockUpdate+0xd4>
   8178a:	2b00      	cmp	r3, #0
   8178c:	d00e      	beq.n	817ac <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8178e:	e00e      	b.n	817ae <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81790:	4b27      	ldr	r3, [pc, #156]	; (81830 <SystemCoreClockUpdate+0x168>)
   81792:	681b      	ldr	r3, [r3, #0]
   81794:	005a      	lsls	r2, r3, #1
   81796:	4b26      	ldr	r3, [pc, #152]	; (81830 <SystemCoreClockUpdate+0x168>)
   81798:	601a      	str	r2, [r3, #0]
				break;
   8179a:	e008      	b.n	817ae <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8179c:	4b24      	ldr	r3, [pc, #144]	; (81830 <SystemCoreClockUpdate+0x168>)
   8179e:	681a      	ldr	r2, [r3, #0]
   817a0:	4613      	mov	r3, r2
   817a2:	005b      	lsls	r3, r3, #1
   817a4:	441a      	add	r2, r3
   817a6:	4b22      	ldr	r3, [pc, #136]	; (81830 <SystemCoreClockUpdate+0x168>)
   817a8:	601a      	str	r2, [r3, #0]
				break;
   817aa:	e000      	b.n	817ae <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   817ac:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   817ae:	4b1e      	ldr	r3, [pc, #120]	; (81828 <SystemCoreClockUpdate+0x160>)
   817b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   817b2:	f003 0303 	and.w	r3, r3, #3
   817b6:	2b02      	cmp	r3, #2
   817b8:	d115      	bne.n	817e6 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   817ba:	4b1b      	ldr	r3, [pc, #108]	; (81828 <SystemCoreClockUpdate+0x160>)
   817bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   817be:	4b1f      	ldr	r3, [pc, #124]	; (8183c <SystemCoreClockUpdate+0x174>)
   817c0:	4013      	ands	r3, r2
   817c2:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   817c4:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   817c6:	4a1a      	ldr	r2, [pc, #104]	; (81830 <SystemCoreClockUpdate+0x168>)
   817c8:	6812      	ldr	r2, [r2, #0]
   817ca:	fb02 f203 	mul.w	r2, r2, r3
   817ce:	4b18      	ldr	r3, [pc, #96]	; (81830 <SystemCoreClockUpdate+0x168>)
   817d0:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   817d2:	4b17      	ldr	r3, [pc, #92]	; (81830 <SystemCoreClockUpdate+0x168>)
   817d4:	681a      	ldr	r2, [r3, #0]
   817d6:	4b14      	ldr	r3, [pc, #80]	; (81828 <SystemCoreClockUpdate+0x160>)
   817d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   817da:	b2db      	uxtb	r3, r3
   817dc:	fbb2 f2f3 	udiv	r2, r2, r3
   817e0:	4b13      	ldr	r3, [pc, #76]	; (81830 <SystemCoreClockUpdate+0x168>)
   817e2:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   817e4:	e002      	b.n	817ec <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   817e6:	4b12      	ldr	r3, [pc, #72]	; (81830 <SystemCoreClockUpdate+0x168>)
   817e8:	4a15      	ldr	r2, [pc, #84]	; (81840 <SystemCoreClockUpdate+0x178>)
   817ea:	601a      	str	r2, [r3, #0]
		}
		break;
   817ec:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   817ee:	4b0e      	ldr	r3, [pc, #56]	; (81828 <SystemCoreClockUpdate+0x160>)
   817f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   817f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   817f6:	2b70      	cmp	r3, #112	; 0x70
   817f8:	d108      	bne.n	8180c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   817fa:	4b0d      	ldr	r3, [pc, #52]	; (81830 <SystemCoreClockUpdate+0x168>)
   817fc:	681a      	ldr	r2, [r3, #0]
   817fe:	4b11      	ldr	r3, [pc, #68]	; (81844 <SystemCoreClockUpdate+0x17c>)
   81800:	fba3 1302 	umull	r1, r3, r3, r2
   81804:	085a      	lsrs	r2, r3, #1
   81806:	4b0a      	ldr	r3, [pc, #40]	; (81830 <SystemCoreClockUpdate+0x168>)
   81808:	601a      	str	r2, [r3, #0]
   8180a:	e009      	b.n	81820 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8180c:	4b08      	ldr	r3, [pc, #32]	; (81830 <SystemCoreClockUpdate+0x168>)
   8180e:	681a      	ldr	r2, [r3, #0]
   81810:	4b05      	ldr	r3, [pc, #20]	; (81828 <SystemCoreClockUpdate+0x160>)
   81812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81814:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81818:	091b      	lsrs	r3, r3, #4
   8181a:	40da      	lsrs	r2, r3
   8181c:	4b04      	ldr	r3, [pc, #16]	; (81830 <SystemCoreClockUpdate+0x168>)
   8181e:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   81820:	46bd      	mov	sp, r7
   81822:	f85d 7b04 	ldr.w	r7, [sp], #4
   81826:	4770      	bx	lr
   81828:	400e0600 	.word	0x400e0600
   8182c:	400e1a10 	.word	0x400e1a10
   81830:	20070000 	.word	0x20070000
   81834:	00b71b00 	.word	0x00b71b00
   81838:	003d0900 	.word	0x003d0900
   8183c:	07ff0000 	.word	0x07ff0000
   81840:	0e4e1c00 	.word	0x0e4e1c00
   81844:	aaaaaaab 	.word	0xaaaaaaab

00081848 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   81848:	b480      	push	{r7}
   8184a:	b083      	sub	sp, #12
   8184c:	af00      	add	r7, sp, #0
   8184e:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81850:	687a      	ldr	r2, [r7, #4]
   81852:	4b1f      	ldr	r3, [pc, #124]	; (818d0 <system_init_flash+0x88>)
   81854:	429a      	cmp	r2, r3
   81856:	d806      	bhi.n	81866 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   81858:	4b1e      	ldr	r3, [pc, #120]	; (818d4 <system_init_flash+0x8c>)
   8185a:	2200      	movs	r2, #0
   8185c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   8185e:	4b1e      	ldr	r3, [pc, #120]	; (818d8 <system_init_flash+0x90>)
   81860:	2200      	movs	r2, #0
   81862:	601a      	str	r2, [r3, #0]
   81864:	e02e      	b.n	818c4 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   81866:	687a      	ldr	r2, [r7, #4]
   81868:	4b1c      	ldr	r3, [pc, #112]	; (818dc <system_init_flash+0x94>)
   8186a:	429a      	cmp	r2, r3
   8186c:	d808      	bhi.n	81880 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   8186e:	4b19      	ldr	r3, [pc, #100]	; (818d4 <system_init_flash+0x8c>)
   81870:	f44f 7280 	mov.w	r2, #256	; 0x100
   81874:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   81876:	4b18      	ldr	r3, [pc, #96]	; (818d8 <system_init_flash+0x90>)
   81878:	f44f 7280 	mov.w	r2, #256	; 0x100
   8187c:	601a      	str	r2, [r3, #0]
   8187e:	e021      	b.n	818c4 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81880:	687a      	ldr	r2, [r7, #4]
   81882:	4b17      	ldr	r3, [pc, #92]	; (818e0 <system_init_flash+0x98>)
   81884:	429a      	cmp	r2, r3
   81886:	d808      	bhi.n	8189a <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   81888:	4b12      	ldr	r3, [pc, #72]	; (818d4 <system_init_flash+0x8c>)
   8188a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8188e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   81890:	4b11      	ldr	r3, [pc, #68]	; (818d8 <system_init_flash+0x90>)
   81892:	f44f 7200 	mov.w	r2, #512	; 0x200
   81896:	601a      	str	r2, [r3, #0]
   81898:	e014      	b.n	818c4 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8189a:	687a      	ldr	r2, [r7, #4]
   8189c:	4b11      	ldr	r3, [pc, #68]	; (818e4 <system_init_flash+0x9c>)
   8189e:	429a      	cmp	r2, r3
   818a0:	d808      	bhi.n	818b4 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   818a2:	4b0c      	ldr	r3, [pc, #48]	; (818d4 <system_init_flash+0x8c>)
   818a4:	f44f 7240 	mov.w	r2, #768	; 0x300
   818a8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   818aa:	4b0b      	ldr	r3, [pc, #44]	; (818d8 <system_init_flash+0x90>)
   818ac:	f44f 7240 	mov.w	r2, #768	; 0x300
   818b0:	601a      	str	r2, [r3, #0]
   818b2:	e007      	b.n	818c4 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   818b4:	4b07      	ldr	r3, [pc, #28]	; (818d4 <system_init_flash+0x8c>)
   818b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   818ba:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   818bc:	4b06      	ldr	r3, [pc, #24]	; (818d8 <system_init_flash+0x90>)
   818be:	f44f 6280 	mov.w	r2, #1024	; 0x400
   818c2:	601a      	str	r2, [r3, #0]
	}
}
   818c4:	370c      	adds	r7, #12
   818c6:	46bd      	mov	sp, r7
   818c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   818cc:	4770      	bx	lr
   818ce:	bf00      	nop
   818d0:	0157529f 	.word	0x0157529f
   818d4:	400e0a00 	.word	0x400e0a00
   818d8:	400e0c00 	.word	0x400e0c00
   818dc:	0206cc7f 	.word	0x0206cc7f
   818e0:	0328b73f 	.word	0x0328b73f
   818e4:	04a62f7f 	.word	0x04a62f7f

000818e8 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   818e8:	b480      	push	{r7}
   818ea:	b083      	sub	sp, #12
   818ec:	af00      	add	r7, sp, #0
   818ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   818f0:	687b      	ldr	r3, [r7, #4]
   818f2:	f103 0208 	add.w	r2, r3, #8
   818f6:	687b      	ldr	r3, [r7, #4]
   818f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   818fa:	687b      	ldr	r3, [r7, #4]
   818fc:	f04f 32ff 	mov.w	r2, #4294967295
   81900:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81902:	687b      	ldr	r3, [r7, #4]
   81904:	f103 0208 	add.w	r2, r3, #8
   81908:	687b      	ldr	r3, [r7, #4]
   8190a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8190c:	687b      	ldr	r3, [r7, #4]
   8190e:	f103 0208 	add.w	r2, r3, #8
   81912:	687b      	ldr	r3, [r7, #4]
   81914:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   81916:	687b      	ldr	r3, [r7, #4]
   81918:	2200      	movs	r2, #0
   8191a:	601a      	str	r2, [r3, #0]
}
   8191c:	370c      	adds	r7, #12
   8191e:	46bd      	mov	sp, r7
   81920:	f85d 7b04 	ldr.w	r7, [sp], #4
   81924:	4770      	bx	lr
   81926:	bf00      	nop

00081928 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   81928:	b480      	push	{r7}
   8192a:	b083      	sub	sp, #12
   8192c:	af00      	add	r7, sp, #0
   8192e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81930:	687b      	ldr	r3, [r7, #4]
   81932:	2200      	movs	r2, #0
   81934:	611a      	str	r2, [r3, #16]
}
   81936:	370c      	adds	r7, #12
   81938:	46bd      	mov	sp, r7
   8193a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8193e:	4770      	bx	lr

00081940 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   81940:	b480      	push	{r7}
   81942:	b085      	sub	sp, #20
   81944:	af00      	add	r7, sp, #0
   81946:	6078      	str	r0, [r7, #4]
   81948:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   8194a:	687b      	ldr	r3, [r7, #4]
   8194c:	685b      	ldr	r3, [r3, #4]
   8194e:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   81950:	683b      	ldr	r3, [r7, #0]
   81952:	68fa      	ldr	r2, [r7, #12]
   81954:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   81956:	68fb      	ldr	r3, [r7, #12]
   81958:	689a      	ldr	r2, [r3, #8]
   8195a:	683b      	ldr	r3, [r7, #0]
   8195c:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   8195e:	68fb      	ldr	r3, [r7, #12]
   81960:	689b      	ldr	r3, [r3, #8]
   81962:	683a      	ldr	r2, [r7, #0]
   81964:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   81966:	68fb      	ldr	r3, [r7, #12]
   81968:	683a      	ldr	r2, [r7, #0]
   8196a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8196c:	683b      	ldr	r3, [r7, #0]
   8196e:	687a      	ldr	r2, [r7, #4]
   81970:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   81972:	687b      	ldr	r3, [r7, #4]
   81974:	681b      	ldr	r3, [r3, #0]
   81976:	1c5a      	adds	r2, r3, #1
   81978:	687b      	ldr	r3, [r7, #4]
   8197a:	601a      	str	r2, [r3, #0]
}
   8197c:	3714      	adds	r7, #20
   8197e:	46bd      	mov	sp, r7
   81980:	f85d 7b04 	ldr.w	r7, [sp], #4
   81984:	4770      	bx	lr
   81986:	bf00      	nop

00081988 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   81988:	b480      	push	{r7}
   8198a:	b085      	sub	sp, #20
   8198c:	af00      	add	r7, sp, #0
   8198e:	6078      	str	r0, [r7, #4]
   81990:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   81992:	683b      	ldr	r3, [r7, #0]
   81994:	681b      	ldr	r3, [r3, #0]
   81996:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81998:	68bb      	ldr	r3, [r7, #8]
   8199a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8199e:	d103      	bne.n	819a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   819a0:	687b      	ldr	r3, [r7, #4]
   819a2:	691b      	ldr	r3, [r3, #16]
   819a4:	60fb      	str	r3, [r7, #12]
   819a6:	e00c      	b.n	819c2 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   819a8:	687b      	ldr	r3, [r7, #4]
   819aa:	3308      	adds	r3, #8
   819ac:	60fb      	str	r3, [r7, #12]
   819ae:	e002      	b.n	819b6 <vListInsert+0x2e>
   819b0:	68fb      	ldr	r3, [r7, #12]
   819b2:	685b      	ldr	r3, [r3, #4]
   819b4:	60fb      	str	r3, [r7, #12]
   819b6:	68fb      	ldr	r3, [r7, #12]
   819b8:	685b      	ldr	r3, [r3, #4]
   819ba:	681a      	ldr	r2, [r3, #0]
   819bc:	68bb      	ldr	r3, [r7, #8]
   819be:	429a      	cmp	r2, r3
   819c0:	d9f6      	bls.n	819b0 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   819c2:	68fb      	ldr	r3, [r7, #12]
   819c4:	685a      	ldr	r2, [r3, #4]
   819c6:	683b      	ldr	r3, [r7, #0]
   819c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   819ca:	683b      	ldr	r3, [r7, #0]
   819cc:	685b      	ldr	r3, [r3, #4]
   819ce:	683a      	ldr	r2, [r7, #0]
   819d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   819d2:	683b      	ldr	r3, [r7, #0]
   819d4:	68fa      	ldr	r2, [r7, #12]
   819d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   819d8:	68fb      	ldr	r3, [r7, #12]
   819da:	683a      	ldr	r2, [r7, #0]
   819dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   819de:	683b      	ldr	r3, [r7, #0]
   819e0:	687a      	ldr	r2, [r7, #4]
   819e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   819e4:	687b      	ldr	r3, [r7, #4]
   819e6:	681b      	ldr	r3, [r3, #0]
   819e8:	1c5a      	adds	r2, r3, #1
   819ea:	687b      	ldr	r3, [r7, #4]
   819ec:	601a      	str	r2, [r3, #0]
}
   819ee:	3714      	adds	r7, #20
   819f0:	46bd      	mov	sp, r7
   819f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   819f6:	4770      	bx	lr

000819f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   819f8:	b480      	push	{r7}
   819fa:	b085      	sub	sp, #20
   819fc:	af00      	add	r7, sp, #0
   819fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   81a00:	687b      	ldr	r3, [r7, #4]
   81a02:	691b      	ldr	r3, [r3, #16]
   81a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81a06:	687b      	ldr	r3, [r7, #4]
   81a08:	685b      	ldr	r3, [r3, #4]
   81a0a:	687a      	ldr	r2, [r7, #4]
   81a0c:	6892      	ldr	r2, [r2, #8]
   81a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81a10:	687b      	ldr	r3, [r7, #4]
   81a12:	689b      	ldr	r3, [r3, #8]
   81a14:	687a      	ldr	r2, [r7, #4]
   81a16:	6852      	ldr	r2, [r2, #4]
   81a18:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81a1a:	68fb      	ldr	r3, [r7, #12]
   81a1c:	685a      	ldr	r2, [r3, #4]
   81a1e:	687b      	ldr	r3, [r7, #4]
   81a20:	429a      	cmp	r2, r3
   81a22:	d103      	bne.n	81a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81a24:	687b      	ldr	r3, [r7, #4]
   81a26:	689a      	ldr	r2, [r3, #8]
   81a28:	68fb      	ldr	r3, [r7, #12]
   81a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   81a2c:	687b      	ldr	r3, [r7, #4]
   81a2e:	2200      	movs	r2, #0
   81a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   81a32:	68fb      	ldr	r3, [r7, #12]
   81a34:	681b      	ldr	r3, [r3, #0]
   81a36:	1e5a      	subs	r2, r3, #1
   81a38:	68fb      	ldr	r3, [r7, #12]
   81a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81a3c:	68fb      	ldr	r3, [r7, #12]
   81a3e:	681b      	ldr	r3, [r3, #0]
}
   81a40:	4618      	mov	r0, r3
   81a42:	3714      	adds	r7, #20
   81a44:	46bd      	mov	sp, r7
   81a46:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a4a:	4770      	bx	lr

00081a4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   81a4c:	b480      	push	{r7}
   81a4e:	b085      	sub	sp, #20
   81a50:	af00      	add	r7, sp, #0
   81a52:	60f8      	str	r0, [r7, #12]
   81a54:	60b9      	str	r1, [r7, #8]
   81a56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   81a58:	68fb      	ldr	r3, [r7, #12]
   81a5a:	3b04      	subs	r3, #4
   81a5c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81a5e:	68fb      	ldr	r3, [r7, #12]
   81a60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   81a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   81a66:	68fb      	ldr	r3, [r7, #12]
   81a68:	3b04      	subs	r3, #4
   81a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   81a6c:	68ba      	ldr	r2, [r7, #8]
   81a6e:	68fb      	ldr	r3, [r7, #12]
   81a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   81a72:	68fb      	ldr	r3, [r7, #12]
   81a74:	3b04      	subs	r3, #4
   81a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   81a78:	4a09      	ldr	r2, [pc, #36]	; (81aa0 <pxPortInitialiseStack+0x54>)
   81a7a:	68fb      	ldr	r3, [r7, #12]
   81a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   81a7e:	68fb      	ldr	r3, [r7, #12]
   81a80:	3b14      	subs	r3, #20
   81a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   81a84:	687a      	ldr	r2, [r7, #4]
   81a86:	68fb      	ldr	r3, [r7, #12]
   81a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   81a8a:	68fb      	ldr	r3, [r7, #12]
   81a8c:	3b20      	subs	r3, #32
   81a8e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   81a90:	68fb      	ldr	r3, [r7, #12]
}
   81a92:	4618      	mov	r0, r3
   81a94:	3714      	adds	r7, #20
   81a96:	46bd      	mov	sp, r7
   81a98:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a9c:	4770      	bx	lr
   81a9e:	bf00      	nop
   81aa0:	00081aa5 	.word	0x00081aa5

00081aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   81aa4:	b580      	push	{r7, lr}
   81aa6:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   81aa8:	4b05      	ldr	r3, [pc, #20]	; (81ac0 <prvTaskExitError+0x1c>)
   81aaa:	681b      	ldr	r3, [r3, #0]
   81aac:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ab0:	d002      	beq.n	81ab8 <prvTaskExitError+0x14>
   81ab2:	4b04      	ldr	r3, [pc, #16]	; (81ac4 <prvTaskExitError+0x20>)
   81ab4:	4798      	blx	r3
   81ab6:	e7fe      	b.n	81ab6 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   81ab8:	4b02      	ldr	r3, [pc, #8]	; (81ac4 <prvTaskExitError+0x20>)
   81aba:	4798      	blx	r3
	for( ;; );
   81abc:	e7fe      	b.n	81abc <prvTaskExitError+0x18>
   81abe:	bf00      	nop
   81ac0:	20070004 	.word	0x20070004
   81ac4:	00081c71 	.word	0x00081c71

00081ac8 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   81ac8:	4b07      	ldr	r3, [pc, #28]	; (81ae8 <pxCurrentTCBConst2>)
   81aca:	6819      	ldr	r1, [r3, #0]
   81acc:	6808      	ldr	r0, [r1, #0]
   81ace:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81ad2:	f380 8809 	msr	PSP, r0
   81ad6:	f3bf 8f6f 	isb	sy
   81ada:	f04f 0000 	mov.w	r0, #0
   81ade:	f380 8811 	msr	BASEPRI, r0
   81ae2:	f04e 0e0d 	orr.w	lr, lr, #13
   81ae6:	4770      	bx	lr

00081ae8 <pxCurrentTCBConst2>:
   81ae8:	2007a4e4 	.word	0x2007a4e4

00081aec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81aec:	4806      	ldr	r0, [pc, #24]	; (81b08 <prvPortStartFirstTask+0x1c>)
   81aee:	6800      	ldr	r0, [r0, #0]
   81af0:	6800      	ldr	r0, [r0, #0]
   81af2:	f380 8808 	msr	MSP, r0
   81af6:	b662      	cpsie	i
   81af8:	b661      	cpsie	f
   81afa:	f3bf 8f4f 	dsb	sy
   81afe:	f3bf 8f6f 	isb	sy
   81b02:	df00      	svc	0
   81b04:	bf00      	nop
   81b06:	0000      	.short	0x0000
   81b08:	e000ed08 	.word	0xe000ed08

00081b0c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   81b0c:	b580      	push	{r7, lr}
   81b0e:	b084      	sub	sp, #16
   81b10:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   81b12:	4b28      	ldr	r3, [pc, #160]	; (81bb4 <xPortStartScheduler+0xa8>)
   81b14:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   81b16:	68fb      	ldr	r3, [r7, #12]
   81b18:	781b      	ldrb	r3, [r3, #0]
   81b1a:	b2db      	uxtb	r3, r3
   81b1c:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   81b1e:	68fb      	ldr	r3, [r7, #12]
   81b20:	22ff      	movs	r2, #255	; 0xff
   81b22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   81b24:	68fb      	ldr	r3, [r7, #12]
   81b26:	781b      	ldrb	r3, [r3, #0]
   81b28:	b2db      	uxtb	r3, r3
   81b2a:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   81b2c:	79fb      	ldrb	r3, [r7, #7]
   81b2e:	b2db      	uxtb	r3, r3
   81b30:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   81b34:	b2da      	uxtb	r2, r3
   81b36:	4b20      	ldr	r3, [pc, #128]	; (81bb8 <xPortStartScheduler+0xac>)
   81b38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   81b3a:	4b20      	ldr	r3, [pc, #128]	; (81bbc <xPortStartScheduler+0xb0>)
   81b3c:	2207      	movs	r2, #7
   81b3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   81b40:	e009      	b.n	81b56 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   81b42:	4b1e      	ldr	r3, [pc, #120]	; (81bbc <xPortStartScheduler+0xb0>)
   81b44:	681b      	ldr	r3, [r3, #0]
   81b46:	1e5a      	subs	r2, r3, #1
   81b48:	4b1c      	ldr	r3, [pc, #112]	; (81bbc <xPortStartScheduler+0xb0>)
   81b4a:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   81b4c:	79fb      	ldrb	r3, [r7, #7]
   81b4e:	b2db      	uxtb	r3, r3
   81b50:	005b      	lsls	r3, r3, #1
   81b52:	b2db      	uxtb	r3, r3
   81b54:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   81b56:	79fb      	ldrb	r3, [r7, #7]
   81b58:	b2db      	uxtb	r3, r3
   81b5a:	b2db      	uxtb	r3, r3
   81b5c:	b25b      	sxtb	r3, r3
   81b5e:	2b00      	cmp	r3, #0
   81b60:	dbef      	blt.n	81b42 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   81b62:	4b16      	ldr	r3, [pc, #88]	; (81bbc <xPortStartScheduler+0xb0>)
   81b64:	681b      	ldr	r3, [r3, #0]
   81b66:	021a      	lsls	r2, r3, #8
   81b68:	4b14      	ldr	r3, [pc, #80]	; (81bbc <xPortStartScheduler+0xb0>)
   81b6a:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   81b6c:	4b13      	ldr	r3, [pc, #76]	; (81bbc <xPortStartScheduler+0xb0>)
   81b6e:	681b      	ldr	r3, [r3, #0]
   81b70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81b74:	4b11      	ldr	r3, [pc, #68]	; (81bbc <xPortStartScheduler+0xb0>)
   81b76:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   81b78:	68bb      	ldr	r3, [r7, #8]
   81b7a:	b2da      	uxtb	r2, r3
   81b7c:	68fb      	ldr	r3, [r7, #12]
   81b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81b80:	4b0f      	ldr	r3, [pc, #60]	; (81bc0 <xPortStartScheduler+0xb4>)
   81b82:	4a0f      	ldr	r2, [pc, #60]	; (81bc0 <xPortStartScheduler+0xb4>)
   81b84:	6812      	ldr	r2, [r2, #0]
   81b86:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   81b8a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81b8c:	4b0c      	ldr	r3, [pc, #48]	; (81bc0 <xPortStartScheduler+0xb4>)
   81b8e:	4a0c      	ldr	r2, [pc, #48]	; (81bc0 <xPortStartScheduler+0xb4>)
   81b90:	6812      	ldr	r2, [r2, #0]
   81b92:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   81b96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81b98:	4b0a      	ldr	r3, [pc, #40]	; (81bc4 <xPortStartScheduler+0xb8>)
   81b9a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81b9c:	4b0a      	ldr	r3, [pc, #40]	; (81bc8 <xPortStartScheduler+0xbc>)
   81b9e:	2200      	movs	r2, #0
   81ba0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81ba2:	4b0a      	ldr	r3, [pc, #40]	; (81bcc <xPortStartScheduler+0xc0>)
   81ba4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   81ba6:	4b0a      	ldr	r3, [pc, #40]	; (81bd0 <xPortStartScheduler+0xc4>)
   81ba8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   81baa:	2300      	movs	r3, #0
}
   81bac:	4618      	mov	r0, r3
   81bae:	3710      	adds	r7, #16
   81bb0:	46bd      	mov	sp, r7
   81bb2:	bd80      	pop	{r7, pc}
   81bb4:	e000e400 	.word	0xe000e400
   81bb8:	200704c4 	.word	0x200704c4
   81bbc:	200704c8 	.word	0x200704c8
   81bc0:	e000ed20 	.word	0xe000ed20
   81bc4:	00081d05 	.word	0x00081d05
   81bc8:	20070004 	.word	0x20070004
   81bcc:	00081aed 	.word	0x00081aed
   81bd0:	00081aa5 	.word	0x00081aa5

00081bd4 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   81bd4:	b480      	push	{r7}
   81bd6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81bd8:	4b05      	ldr	r3, [pc, #20]	; (81bf0 <vPortYield+0x1c>)
   81bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81bde:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   81be0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81be4:	f3bf 8f6f 	isb	sy
}
   81be8:	46bd      	mov	sp, r7
   81bea:	f85d 7b04 	ldr.w	r7, [sp], #4
   81bee:	4770      	bx	lr
   81bf0:	e000ed04 	.word	0xe000ed04

00081bf4 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81bf4:	b580      	push	{r7, lr}
   81bf6:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   81bf8:	4b0c      	ldr	r3, [pc, #48]	; (81c2c <vPortEnterCritical+0x38>)
   81bfa:	4798      	blx	r3
	uxCriticalNesting++;
   81bfc:	4b0c      	ldr	r3, [pc, #48]	; (81c30 <vPortEnterCritical+0x3c>)
   81bfe:	681b      	ldr	r3, [r3, #0]
   81c00:	1c5a      	adds	r2, r3, #1
   81c02:	4b0b      	ldr	r3, [pc, #44]	; (81c30 <vPortEnterCritical+0x3c>)
   81c04:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   81c06:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81c0a:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   81c0e:	4b08      	ldr	r3, [pc, #32]	; (81c30 <vPortEnterCritical+0x3c>)
   81c10:	681b      	ldr	r3, [r3, #0]
   81c12:	2b01      	cmp	r3, #1
   81c14:	d108      	bne.n	81c28 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   81c16:	4b07      	ldr	r3, [pc, #28]	; (81c34 <vPortEnterCritical+0x40>)
   81c18:	681b      	ldr	r3, [r3, #0]
   81c1a:	f003 031f 	and.w	r3, r3, #31
   81c1e:	2b00      	cmp	r3, #0
   81c20:	d002      	beq.n	81c28 <vPortEnterCritical+0x34>
   81c22:	4b02      	ldr	r3, [pc, #8]	; (81c2c <vPortEnterCritical+0x38>)
   81c24:	4798      	blx	r3
   81c26:	e7fe      	b.n	81c26 <vPortEnterCritical+0x32>
	}
}
   81c28:	bd80      	pop	{r7, pc}
   81c2a:	bf00      	nop
   81c2c:	00081c71 	.word	0x00081c71
   81c30:	20070004 	.word	0x20070004
   81c34:	e000ed04 	.word	0xe000ed04

00081c38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81c38:	b580      	push	{r7, lr}
   81c3a:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   81c3c:	4b09      	ldr	r3, [pc, #36]	; (81c64 <vPortExitCritical+0x2c>)
   81c3e:	681b      	ldr	r3, [r3, #0]
   81c40:	2b00      	cmp	r3, #0
   81c42:	d102      	bne.n	81c4a <vPortExitCritical+0x12>
   81c44:	4b08      	ldr	r3, [pc, #32]	; (81c68 <vPortExitCritical+0x30>)
   81c46:	4798      	blx	r3
   81c48:	e7fe      	b.n	81c48 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   81c4a:	4b06      	ldr	r3, [pc, #24]	; (81c64 <vPortExitCritical+0x2c>)
   81c4c:	681b      	ldr	r3, [r3, #0]
   81c4e:	1e5a      	subs	r2, r3, #1
   81c50:	4b04      	ldr	r3, [pc, #16]	; (81c64 <vPortExitCritical+0x2c>)
   81c52:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   81c54:	4b03      	ldr	r3, [pc, #12]	; (81c64 <vPortExitCritical+0x2c>)
   81c56:	681b      	ldr	r3, [r3, #0]
   81c58:	2b00      	cmp	r3, #0
   81c5a:	d102      	bne.n	81c62 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   81c5c:	2000      	movs	r0, #0
   81c5e:	4b03      	ldr	r3, [pc, #12]	; (81c6c <vPortExitCritical+0x34>)
   81c60:	4798      	blx	r3
	}
}
   81c62:	bd80      	pop	{r7, pc}
   81c64:	20070004 	.word	0x20070004
   81c68:	00081c71 	.word	0x00081c71
   81c6c:	00081c85 	.word	0x00081c85

00081c70 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81c70:	f3ef 8011 	mrs	r0, BASEPRI
   81c74:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81c78:	f381 8811 	msr	BASEPRI, r1
   81c7c:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   81c7e:	2300      	movs	r3, #0
}
   81c80:	4618      	mov	r0, r3
   81c82:	bf00      	nop

00081c84 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   81c84:	f380 8811 	msr	BASEPRI, r0
   81c88:	4770      	bx	lr
   81c8a:	bf00      	nop

00081c8c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   81c8c:	f3ef 8009 	mrs	r0, PSP
   81c90:	f3bf 8f6f 	isb	sy
   81c94:	4b0d      	ldr	r3, [pc, #52]	; (81ccc <pxCurrentTCBConst>)
   81c96:	681a      	ldr	r2, [r3, #0]
   81c98:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81c9c:	6010      	str	r0, [r2, #0]
   81c9e:	e92d 4008 	stmdb	sp!, {r3, lr}
   81ca2:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81ca6:	f380 8811 	msr	BASEPRI, r0
   81caa:	f001 f9f1 	bl	83090 <vTaskSwitchContext>
   81cae:	f04f 0000 	mov.w	r0, #0
   81cb2:	f380 8811 	msr	BASEPRI, r0
   81cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81cba:	6819      	ldr	r1, [r3, #0]
   81cbc:	6808      	ldr	r0, [r1, #0]
   81cbe:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81cc2:	f380 8809 	msr	PSP, r0
   81cc6:	f3bf 8f6f 	isb	sy
   81cca:	4770      	bx	lr

00081ccc <pxCurrentTCBConst>:
   81ccc:	2007a4e4 	.word	0x2007a4e4

00081cd0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   81cd0:	b580      	push	{r7, lr}
   81cd2:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81cd4:	4b07      	ldr	r3, [pc, #28]	; (81cf4 <SysTick_Handler+0x24>)
   81cd6:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   81cd8:	4b07      	ldr	r3, [pc, #28]	; (81cf8 <SysTick_Handler+0x28>)
   81cda:	4798      	blx	r3
   81cdc:	4603      	mov	r3, r0
   81cde:	2b00      	cmp	r3, #0
   81ce0:	d003      	beq.n	81cea <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81ce2:	4b06      	ldr	r3, [pc, #24]	; (81cfc <SysTick_Handler+0x2c>)
   81ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81ce8:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81cea:	2000      	movs	r0, #0
   81cec:	4b04      	ldr	r3, [pc, #16]	; (81d00 <SysTick_Handler+0x30>)
   81cee:	4798      	blx	r3
}
   81cf0:	bd80      	pop	{r7, pc}
   81cf2:	bf00      	nop
   81cf4:	00081c71 	.word	0x00081c71
   81cf8:	00082f15 	.word	0x00082f15
   81cfc:	e000ed04 	.word	0xe000ed04
   81d00:	00081c85 	.word	0x00081c85

00081d04 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   81d04:	b480      	push	{r7}
   81d06:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   81d08:	4b07      	ldr	r3, [pc, #28]	; (81d28 <vPortSetupTimerInterrupt+0x24>)
   81d0a:	4a08      	ldr	r2, [pc, #32]	; (81d2c <vPortSetupTimerInterrupt+0x28>)
   81d0c:	6811      	ldr	r1, [r2, #0]
   81d0e:	4a08      	ldr	r2, [pc, #32]	; (81d30 <vPortSetupTimerInterrupt+0x2c>)
   81d10:	fba2 0201 	umull	r0, r2, r2, r1
   81d14:	08d2      	lsrs	r2, r2, #3
   81d16:	3a01      	subs	r2, #1
   81d18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   81d1a:	4b06      	ldr	r3, [pc, #24]	; (81d34 <vPortSetupTimerInterrupt+0x30>)
   81d1c:	2207      	movs	r2, #7
   81d1e:	601a      	str	r2, [r3, #0]
}
   81d20:	46bd      	mov	sp, r7
   81d22:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d26:	4770      	bx	lr
   81d28:	e000e014 	.word	0xe000e014
   81d2c:	20070000 	.word	0x20070000
   81d30:	cccccccd 	.word	0xcccccccd
   81d34:	e000e010 	.word	0xe000e010

00081d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   81d38:	b580      	push	{r7, lr}
   81d3a:	b082      	sub	sp, #8
   81d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   81d3e:	f3ef 8305 	mrs	r3, IPSR
   81d42:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   81d44:	687b      	ldr	r3, [r7, #4]
   81d46:	2b0f      	cmp	r3, #15
   81d48:	d90c      	bls.n	81d64 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   81d4a:	4a0d      	ldr	r2, [pc, #52]	; (81d80 <vPortValidateInterruptPriority+0x48>)
   81d4c:	687b      	ldr	r3, [r7, #4]
   81d4e:	4413      	add	r3, r2
   81d50:	781b      	ldrb	r3, [r3, #0]
   81d52:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   81d54:	4b0b      	ldr	r3, [pc, #44]	; (81d84 <vPortValidateInterruptPriority+0x4c>)
   81d56:	781b      	ldrb	r3, [r3, #0]
   81d58:	78fa      	ldrb	r2, [r7, #3]
   81d5a:	429a      	cmp	r2, r3
   81d5c:	d202      	bcs.n	81d64 <vPortValidateInterruptPriority+0x2c>
   81d5e:	4b0a      	ldr	r3, [pc, #40]	; (81d88 <vPortValidateInterruptPriority+0x50>)
   81d60:	4798      	blx	r3
   81d62:	e7fe      	b.n	81d62 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   81d64:	4b09      	ldr	r3, [pc, #36]	; (81d8c <vPortValidateInterruptPriority+0x54>)
   81d66:	681b      	ldr	r3, [r3, #0]
   81d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81d6c:	4b08      	ldr	r3, [pc, #32]	; (81d90 <vPortValidateInterruptPriority+0x58>)
   81d6e:	681b      	ldr	r3, [r3, #0]
   81d70:	429a      	cmp	r2, r3
   81d72:	d902      	bls.n	81d7a <vPortValidateInterruptPriority+0x42>
   81d74:	4b04      	ldr	r3, [pc, #16]	; (81d88 <vPortValidateInterruptPriority+0x50>)
   81d76:	4798      	blx	r3
   81d78:	e7fe      	b.n	81d78 <vPortValidateInterruptPriority+0x40>
	}
   81d7a:	3708      	adds	r7, #8
   81d7c:	46bd      	mov	sp, r7
   81d7e:	bd80      	pop	{r7, pc}
   81d80:	e000e3f0 	.word	0xe000e3f0
   81d84:	200704c4 	.word	0x200704c4
   81d88:	00081c71 	.word	0x00081c71
   81d8c:	e000ed0c 	.word	0xe000ed0c
   81d90:	200704c8 	.word	0x200704c8

00081d94 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81d94:	b580      	push	{r7, lr}
   81d96:	b086      	sub	sp, #24
   81d98:	af00      	add	r7, sp, #0
   81d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81d9c:	2300      	movs	r3, #0
   81d9e:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   81da0:	4b4f      	ldr	r3, [pc, #316]	; (81ee0 <pvPortMalloc+0x14c>)
   81da2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81da4:	4b4f      	ldr	r3, [pc, #316]	; (81ee4 <pvPortMalloc+0x150>)
   81da6:	681b      	ldr	r3, [r3, #0]
   81da8:	2b00      	cmp	r3, #0
   81daa:	d101      	bne.n	81db0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   81dac:	4b4e      	ldr	r3, [pc, #312]	; (81ee8 <pvPortMalloc+0x154>)
   81dae:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   81db0:	4b4e      	ldr	r3, [pc, #312]	; (81eec <pvPortMalloc+0x158>)
   81db2:	681a      	ldr	r2, [r3, #0]
   81db4:	687b      	ldr	r3, [r7, #4]
   81db6:	4013      	ands	r3, r2
   81db8:	2b00      	cmp	r3, #0
   81dba:	d17d      	bne.n	81eb8 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   81dbc:	687b      	ldr	r3, [r7, #4]
   81dbe:	2b00      	cmp	r3, #0
   81dc0:	d015      	beq.n	81dee <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   81dc2:	2308      	movs	r3, #8
   81dc4:	687a      	ldr	r2, [r7, #4]
   81dc6:	4413      	add	r3, r2
   81dc8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   81dca:	687b      	ldr	r3, [r7, #4]
   81dcc:	f003 0307 	and.w	r3, r3, #7
   81dd0:	2b00      	cmp	r3, #0
   81dd2:	d00c      	beq.n	81dee <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81dd4:	687b      	ldr	r3, [r7, #4]
   81dd6:	f023 0307 	bic.w	r3, r3, #7
   81dda:	3308      	adds	r3, #8
   81ddc:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   81dde:	687b      	ldr	r3, [r7, #4]
   81de0:	f003 0307 	and.w	r3, r3, #7
   81de4:	2b00      	cmp	r3, #0
   81de6:	d002      	beq.n	81dee <pvPortMalloc+0x5a>
   81de8:	4b41      	ldr	r3, [pc, #260]	; (81ef0 <pvPortMalloc+0x15c>)
   81dea:	4798      	blx	r3
   81dec:	e7fe      	b.n	81dec <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   81dee:	687b      	ldr	r3, [r7, #4]
   81df0:	2b00      	cmp	r3, #0
   81df2:	d061      	beq.n	81eb8 <pvPortMalloc+0x124>
   81df4:	4b3f      	ldr	r3, [pc, #252]	; (81ef4 <pvPortMalloc+0x160>)
   81df6:	681b      	ldr	r3, [r3, #0]
   81df8:	687a      	ldr	r2, [r7, #4]
   81dfa:	429a      	cmp	r2, r3
   81dfc:	d85c      	bhi.n	81eb8 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   81dfe:	4b3e      	ldr	r3, [pc, #248]	; (81ef8 <pvPortMalloc+0x164>)
   81e00:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   81e02:	4b3d      	ldr	r3, [pc, #244]	; (81ef8 <pvPortMalloc+0x164>)
   81e04:	681b      	ldr	r3, [r3, #0]
   81e06:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81e08:	e004      	b.n	81e14 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   81e0a:	697b      	ldr	r3, [r7, #20]
   81e0c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   81e0e:	697b      	ldr	r3, [r7, #20]
   81e10:	681b      	ldr	r3, [r3, #0]
   81e12:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81e14:	697b      	ldr	r3, [r7, #20]
   81e16:	685a      	ldr	r2, [r3, #4]
   81e18:	687b      	ldr	r3, [r7, #4]
   81e1a:	429a      	cmp	r2, r3
   81e1c:	d203      	bcs.n	81e26 <pvPortMalloc+0x92>
   81e1e:	697b      	ldr	r3, [r7, #20]
   81e20:	681b      	ldr	r3, [r3, #0]
   81e22:	2b00      	cmp	r3, #0
   81e24:	d1f1      	bne.n	81e0a <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   81e26:	4b2f      	ldr	r3, [pc, #188]	; (81ee4 <pvPortMalloc+0x150>)
   81e28:	681b      	ldr	r3, [r3, #0]
   81e2a:	697a      	ldr	r2, [r7, #20]
   81e2c:	429a      	cmp	r2, r3
   81e2e:	d043      	beq.n	81eb8 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   81e30:	693b      	ldr	r3, [r7, #16]
   81e32:	681a      	ldr	r2, [r3, #0]
   81e34:	2308      	movs	r3, #8
   81e36:	4413      	add	r3, r2
   81e38:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81e3a:	697b      	ldr	r3, [r7, #20]
   81e3c:	681a      	ldr	r2, [r3, #0]
   81e3e:	693b      	ldr	r3, [r7, #16]
   81e40:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81e42:	697b      	ldr	r3, [r7, #20]
   81e44:	685a      	ldr	r2, [r3, #4]
   81e46:	687b      	ldr	r3, [r7, #4]
   81e48:	1ad2      	subs	r2, r2, r3
   81e4a:	2308      	movs	r3, #8
   81e4c:	005b      	lsls	r3, r3, #1
   81e4e:	429a      	cmp	r2, r3
   81e50:	d917      	bls.n	81e82 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   81e52:	697a      	ldr	r2, [r7, #20]
   81e54:	687b      	ldr	r3, [r7, #4]
   81e56:	4413      	add	r3, r2
   81e58:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   81e5a:	68bb      	ldr	r3, [r7, #8]
   81e5c:	f003 0307 	and.w	r3, r3, #7
   81e60:	2b00      	cmp	r3, #0
   81e62:	d002      	beq.n	81e6a <pvPortMalloc+0xd6>
   81e64:	4b22      	ldr	r3, [pc, #136]	; (81ef0 <pvPortMalloc+0x15c>)
   81e66:	4798      	blx	r3
   81e68:	e7fe      	b.n	81e68 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81e6a:	697b      	ldr	r3, [r7, #20]
   81e6c:	685a      	ldr	r2, [r3, #4]
   81e6e:	687b      	ldr	r3, [r7, #4]
   81e70:	1ad2      	subs	r2, r2, r3
   81e72:	68bb      	ldr	r3, [r7, #8]
   81e74:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   81e76:	697b      	ldr	r3, [r7, #20]
   81e78:	687a      	ldr	r2, [r7, #4]
   81e7a:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81e7c:	68b8      	ldr	r0, [r7, #8]
   81e7e:	4b1f      	ldr	r3, [pc, #124]	; (81efc <pvPortMalloc+0x168>)
   81e80:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   81e82:	4b1c      	ldr	r3, [pc, #112]	; (81ef4 <pvPortMalloc+0x160>)
   81e84:	681a      	ldr	r2, [r3, #0]
   81e86:	697b      	ldr	r3, [r7, #20]
   81e88:	685b      	ldr	r3, [r3, #4]
   81e8a:	1ad2      	subs	r2, r2, r3
   81e8c:	4b19      	ldr	r3, [pc, #100]	; (81ef4 <pvPortMalloc+0x160>)
   81e8e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   81e90:	4b18      	ldr	r3, [pc, #96]	; (81ef4 <pvPortMalloc+0x160>)
   81e92:	681a      	ldr	r2, [r3, #0]
   81e94:	4b1a      	ldr	r3, [pc, #104]	; (81f00 <pvPortMalloc+0x16c>)
   81e96:	681b      	ldr	r3, [r3, #0]
   81e98:	429a      	cmp	r2, r3
   81e9a:	d203      	bcs.n	81ea4 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   81e9c:	4b15      	ldr	r3, [pc, #84]	; (81ef4 <pvPortMalloc+0x160>)
   81e9e:	681a      	ldr	r2, [r3, #0]
   81ea0:	4b17      	ldr	r3, [pc, #92]	; (81f00 <pvPortMalloc+0x16c>)
   81ea2:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   81ea4:	697b      	ldr	r3, [r7, #20]
   81ea6:	685a      	ldr	r2, [r3, #4]
   81ea8:	4b10      	ldr	r3, [pc, #64]	; (81eec <pvPortMalloc+0x158>)
   81eaa:	681b      	ldr	r3, [r3, #0]
   81eac:	431a      	orrs	r2, r3
   81eae:	697b      	ldr	r3, [r7, #20]
   81eb0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   81eb2:	697b      	ldr	r3, [r7, #20]
   81eb4:	2200      	movs	r2, #0
   81eb6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   81eb8:	4b12      	ldr	r3, [pc, #72]	; (81f04 <pvPortMalloc+0x170>)
   81eba:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   81ebc:	68fb      	ldr	r3, [r7, #12]
   81ebe:	2b00      	cmp	r3, #0
   81ec0:	d101      	bne.n	81ec6 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   81ec2:	4b11      	ldr	r3, [pc, #68]	; (81f08 <pvPortMalloc+0x174>)
   81ec4:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   81ec6:	68fb      	ldr	r3, [r7, #12]
   81ec8:	f003 0307 	and.w	r3, r3, #7
   81ecc:	2b00      	cmp	r3, #0
   81ece:	d002      	beq.n	81ed6 <pvPortMalloc+0x142>
   81ed0:	4b07      	ldr	r3, [pc, #28]	; (81ef0 <pvPortMalloc+0x15c>)
   81ed2:	4798      	blx	r3
   81ed4:	e7fe      	b.n	81ed4 <pvPortMalloc+0x140>
	return pvReturn;
   81ed6:	68fb      	ldr	r3, [r7, #12]
}
   81ed8:	4618      	mov	r0, r3
   81eda:	3718      	adds	r7, #24
   81edc:	46bd      	mov	sp, r7
   81ede:	bd80      	pop	{r7, pc}
   81ee0:	00082da9 	.word	0x00082da9
   81ee4:	2007a4d4 	.word	0x2007a4d4
   81ee8:	00081fb1 	.word	0x00081fb1
   81eec:	2007a4e0 	.word	0x2007a4e0
   81ef0:	00081c71 	.word	0x00081c71
   81ef4:	2007a4d8 	.word	0x2007a4d8
   81ef8:	2007a4cc 	.word	0x2007a4cc
   81efc:	00082075 	.word	0x00082075
   81f00:	2007a4dc 	.word	0x2007a4dc
   81f04:	00082dc5 	.word	0x00082dc5
   81f08:	00084831 	.word	0x00084831

00081f0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81f0c:	b580      	push	{r7, lr}
   81f0e:	b084      	sub	sp, #16
   81f10:	af00      	add	r7, sp, #0
   81f12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   81f14:	687b      	ldr	r3, [r7, #4]
   81f16:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   81f18:	687b      	ldr	r3, [r7, #4]
   81f1a:	2b00      	cmp	r3, #0
   81f1c:	d038      	beq.n	81f90 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   81f1e:	2308      	movs	r3, #8
   81f20:	425b      	negs	r3, r3
   81f22:	68fa      	ldr	r2, [r7, #12]
   81f24:	4413      	add	r3, r2
   81f26:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   81f28:	68fb      	ldr	r3, [r7, #12]
   81f2a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   81f2c:	68bb      	ldr	r3, [r7, #8]
   81f2e:	685a      	ldr	r2, [r3, #4]
   81f30:	4b19      	ldr	r3, [pc, #100]	; (81f98 <vPortFree+0x8c>)
   81f32:	681b      	ldr	r3, [r3, #0]
   81f34:	4013      	ands	r3, r2
   81f36:	2b00      	cmp	r3, #0
   81f38:	d102      	bne.n	81f40 <vPortFree+0x34>
   81f3a:	4b18      	ldr	r3, [pc, #96]	; (81f9c <vPortFree+0x90>)
   81f3c:	4798      	blx	r3
   81f3e:	e7fe      	b.n	81f3e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   81f40:	68bb      	ldr	r3, [r7, #8]
   81f42:	681b      	ldr	r3, [r3, #0]
   81f44:	2b00      	cmp	r3, #0
   81f46:	d002      	beq.n	81f4e <vPortFree+0x42>
   81f48:	4b14      	ldr	r3, [pc, #80]	; (81f9c <vPortFree+0x90>)
   81f4a:	4798      	blx	r3
   81f4c:	e7fe      	b.n	81f4c <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   81f4e:	68bb      	ldr	r3, [r7, #8]
   81f50:	685a      	ldr	r2, [r3, #4]
   81f52:	4b11      	ldr	r3, [pc, #68]	; (81f98 <vPortFree+0x8c>)
   81f54:	681b      	ldr	r3, [r3, #0]
   81f56:	4013      	ands	r3, r2
   81f58:	2b00      	cmp	r3, #0
   81f5a:	d019      	beq.n	81f90 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   81f5c:	68bb      	ldr	r3, [r7, #8]
   81f5e:	681b      	ldr	r3, [r3, #0]
   81f60:	2b00      	cmp	r3, #0
   81f62:	d115      	bne.n	81f90 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   81f64:	68bb      	ldr	r3, [r7, #8]
   81f66:	685a      	ldr	r2, [r3, #4]
   81f68:	4b0b      	ldr	r3, [pc, #44]	; (81f98 <vPortFree+0x8c>)
   81f6a:	681b      	ldr	r3, [r3, #0]
   81f6c:	43db      	mvns	r3, r3
   81f6e:	401a      	ands	r2, r3
   81f70:	68bb      	ldr	r3, [r7, #8]
   81f72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   81f74:	4b0a      	ldr	r3, [pc, #40]	; (81fa0 <vPortFree+0x94>)
   81f76:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   81f78:	68bb      	ldr	r3, [r7, #8]
   81f7a:	685a      	ldr	r2, [r3, #4]
   81f7c:	4b09      	ldr	r3, [pc, #36]	; (81fa4 <vPortFree+0x98>)
   81f7e:	681b      	ldr	r3, [r3, #0]
   81f80:	441a      	add	r2, r3
   81f82:	4b08      	ldr	r3, [pc, #32]	; (81fa4 <vPortFree+0x98>)
   81f84:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   81f86:	68b8      	ldr	r0, [r7, #8]
   81f88:	4b07      	ldr	r3, [pc, #28]	; (81fa8 <vPortFree+0x9c>)
   81f8a:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   81f8c:	4b07      	ldr	r3, [pc, #28]	; (81fac <vPortFree+0xa0>)
   81f8e:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   81f90:	3710      	adds	r7, #16
   81f92:	46bd      	mov	sp, r7
   81f94:	bd80      	pop	{r7, pc}
   81f96:	bf00      	nop
   81f98:	2007a4e0 	.word	0x2007a4e0
   81f9c:	00081c71 	.word	0x00081c71
   81fa0:	00082da9 	.word	0x00082da9
   81fa4:	2007a4d8 	.word	0x2007a4d8
   81fa8:	00082075 	.word	0x00082075
   81fac:	00082dc5 	.word	0x00082dc5

00081fb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   81fb0:	b480      	push	{r7}
   81fb2:	b085      	sub	sp, #20
   81fb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   81fb6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   81fba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   81fbc:	4b27      	ldr	r3, [pc, #156]	; (8205c <prvHeapInit+0xac>)
   81fbe:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   81fc0:	68fb      	ldr	r3, [r7, #12]
   81fc2:	f003 0307 	and.w	r3, r3, #7
   81fc6:	2b00      	cmp	r3, #0
   81fc8:	d00c      	beq.n	81fe4 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   81fca:	68fb      	ldr	r3, [r7, #12]
   81fcc:	3307      	adds	r3, #7
   81fce:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   81fd0:	68fb      	ldr	r3, [r7, #12]
   81fd2:	f023 0307 	bic.w	r3, r3, #7
   81fd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   81fd8:	68ba      	ldr	r2, [r7, #8]
   81fda:	68fb      	ldr	r3, [r7, #12]
   81fdc:	1ad2      	subs	r2, r2, r3
   81fde:	4b1f      	ldr	r3, [pc, #124]	; (8205c <prvHeapInit+0xac>)
   81fe0:	4413      	add	r3, r2
   81fe2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   81fe4:	68fb      	ldr	r3, [r7, #12]
   81fe6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   81fe8:	4b1d      	ldr	r3, [pc, #116]	; (82060 <prvHeapInit+0xb0>)
   81fea:	687a      	ldr	r2, [r7, #4]
   81fec:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81fee:	4b1c      	ldr	r3, [pc, #112]	; (82060 <prvHeapInit+0xb0>)
   81ff0:	2200      	movs	r2, #0
   81ff2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   81ff4:	687a      	ldr	r2, [r7, #4]
   81ff6:	68bb      	ldr	r3, [r7, #8]
   81ff8:	4413      	add	r3, r2
   81ffa:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   81ffc:	2308      	movs	r3, #8
   81ffe:	68fa      	ldr	r2, [r7, #12]
   82000:	1ad3      	subs	r3, r2, r3
   82002:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   82004:	68fb      	ldr	r3, [r7, #12]
   82006:	f023 0307 	bic.w	r3, r3, #7
   8200a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   8200c:	68fa      	ldr	r2, [r7, #12]
   8200e:	4b15      	ldr	r3, [pc, #84]	; (82064 <prvHeapInit+0xb4>)
   82010:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   82012:	4b14      	ldr	r3, [pc, #80]	; (82064 <prvHeapInit+0xb4>)
   82014:	681b      	ldr	r3, [r3, #0]
   82016:	2200      	movs	r2, #0
   82018:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8201a:	4b12      	ldr	r3, [pc, #72]	; (82064 <prvHeapInit+0xb4>)
   8201c:	681b      	ldr	r3, [r3, #0]
   8201e:	2200      	movs	r2, #0
   82020:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   82022:	687b      	ldr	r3, [r7, #4]
   82024:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   82026:	683b      	ldr	r3, [r7, #0]
   82028:	68fa      	ldr	r2, [r7, #12]
   8202a:	1ad2      	subs	r2, r2, r3
   8202c:	683b      	ldr	r3, [r7, #0]
   8202e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   82030:	4b0c      	ldr	r3, [pc, #48]	; (82064 <prvHeapInit+0xb4>)
   82032:	681a      	ldr	r2, [r3, #0]
   82034:	683b      	ldr	r3, [r7, #0]
   82036:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   82038:	683b      	ldr	r3, [r7, #0]
   8203a:	685a      	ldr	r2, [r3, #4]
   8203c:	4b0a      	ldr	r3, [pc, #40]	; (82068 <prvHeapInit+0xb8>)
   8203e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   82040:	683b      	ldr	r3, [r7, #0]
   82042:	685a      	ldr	r2, [r3, #4]
   82044:	4b09      	ldr	r3, [pc, #36]	; (8206c <prvHeapInit+0xbc>)
   82046:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   82048:	4b09      	ldr	r3, [pc, #36]	; (82070 <prvHeapInit+0xc0>)
   8204a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   8204e:	601a      	str	r2, [r3, #0]
}
   82050:	3714      	adds	r7, #20
   82052:	46bd      	mov	sp, r7
   82054:	f85d 7b04 	ldr.w	r7, [sp], #4
   82058:	4770      	bx	lr
   8205a:	bf00      	nop
   8205c:	200704cc 	.word	0x200704cc
   82060:	2007a4cc 	.word	0x2007a4cc
   82064:	2007a4d4 	.word	0x2007a4d4
   82068:	2007a4dc 	.word	0x2007a4dc
   8206c:	2007a4d8 	.word	0x2007a4d8
   82070:	2007a4e0 	.word	0x2007a4e0

00082074 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   82074:	b480      	push	{r7}
   82076:	b085      	sub	sp, #20
   82078:	af00      	add	r7, sp, #0
   8207a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8207c:	4b27      	ldr	r3, [pc, #156]	; (8211c <prvInsertBlockIntoFreeList+0xa8>)
   8207e:	60fb      	str	r3, [r7, #12]
   82080:	e002      	b.n	82088 <prvInsertBlockIntoFreeList+0x14>
   82082:	68fb      	ldr	r3, [r7, #12]
   82084:	681b      	ldr	r3, [r3, #0]
   82086:	60fb      	str	r3, [r7, #12]
   82088:	68fb      	ldr	r3, [r7, #12]
   8208a:	681a      	ldr	r2, [r3, #0]
   8208c:	687b      	ldr	r3, [r7, #4]
   8208e:	429a      	cmp	r2, r3
   82090:	d3f7      	bcc.n	82082 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   82092:	68fb      	ldr	r3, [r7, #12]
   82094:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   82096:	68fb      	ldr	r3, [r7, #12]
   82098:	685b      	ldr	r3, [r3, #4]
   8209a:	68ba      	ldr	r2, [r7, #8]
   8209c:	441a      	add	r2, r3
   8209e:	687b      	ldr	r3, [r7, #4]
   820a0:	429a      	cmp	r2, r3
   820a2:	d108      	bne.n	820b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   820a4:	68fb      	ldr	r3, [r7, #12]
   820a6:	685a      	ldr	r2, [r3, #4]
   820a8:	687b      	ldr	r3, [r7, #4]
   820aa:	685b      	ldr	r3, [r3, #4]
   820ac:	441a      	add	r2, r3
   820ae:	68fb      	ldr	r3, [r7, #12]
   820b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   820b2:	68fb      	ldr	r3, [r7, #12]
   820b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   820b6:	687b      	ldr	r3, [r7, #4]
   820b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   820ba:	687b      	ldr	r3, [r7, #4]
   820bc:	685b      	ldr	r3, [r3, #4]
   820be:	68ba      	ldr	r2, [r7, #8]
   820c0:	441a      	add	r2, r3
   820c2:	68fb      	ldr	r3, [r7, #12]
   820c4:	681b      	ldr	r3, [r3, #0]
   820c6:	429a      	cmp	r2, r3
   820c8:	d118      	bne.n	820fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   820ca:	68fb      	ldr	r3, [r7, #12]
   820cc:	681a      	ldr	r2, [r3, #0]
   820ce:	4b14      	ldr	r3, [pc, #80]	; (82120 <prvInsertBlockIntoFreeList+0xac>)
   820d0:	681b      	ldr	r3, [r3, #0]
   820d2:	429a      	cmp	r2, r3
   820d4:	d00d      	beq.n	820f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   820d6:	687b      	ldr	r3, [r7, #4]
   820d8:	685a      	ldr	r2, [r3, #4]
   820da:	68fb      	ldr	r3, [r7, #12]
   820dc:	681b      	ldr	r3, [r3, #0]
   820de:	685b      	ldr	r3, [r3, #4]
   820e0:	441a      	add	r2, r3
   820e2:	687b      	ldr	r3, [r7, #4]
   820e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   820e6:	68fb      	ldr	r3, [r7, #12]
   820e8:	681b      	ldr	r3, [r3, #0]
   820ea:	681a      	ldr	r2, [r3, #0]
   820ec:	687b      	ldr	r3, [r7, #4]
   820ee:	601a      	str	r2, [r3, #0]
   820f0:	e008      	b.n	82104 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   820f2:	4b0b      	ldr	r3, [pc, #44]	; (82120 <prvInsertBlockIntoFreeList+0xac>)
   820f4:	681a      	ldr	r2, [r3, #0]
   820f6:	687b      	ldr	r3, [r7, #4]
   820f8:	601a      	str	r2, [r3, #0]
   820fa:	e003      	b.n	82104 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   820fc:	68fb      	ldr	r3, [r7, #12]
   820fe:	681a      	ldr	r2, [r3, #0]
   82100:	687b      	ldr	r3, [r7, #4]
   82102:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   82104:	68fa      	ldr	r2, [r7, #12]
   82106:	687b      	ldr	r3, [r7, #4]
   82108:	429a      	cmp	r2, r3
   8210a:	d002      	beq.n	82112 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8210c:	68fb      	ldr	r3, [r7, #12]
   8210e:	687a      	ldr	r2, [r7, #4]
   82110:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   82112:	3714      	adds	r7, #20
   82114:	46bd      	mov	sp, r7
   82116:	f85d 7b04 	ldr.w	r7, [sp], #4
   8211a:	4770      	bx	lr
   8211c:	2007a4cc 	.word	0x2007a4cc
   82120:	2007a4d4 	.word	0x2007a4d4

00082124 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   82124:	b580      	push	{r7, lr}
   82126:	b084      	sub	sp, #16
   82128:	af00      	add	r7, sp, #0
   8212a:	6078      	str	r0, [r7, #4]
   8212c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8212e:	687b      	ldr	r3, [r7, #4]
   82130:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   82132:	68fb      	ldr	r3, [r7, #12]
   82134:	2b00      	cmp	r3, #0
   82136:	d102      	bne.n	8213e <xQueueGenericReset+0x1a>
   82138:	4b26      	ldr	r3, [pc, #152]	; (821d4 <xQueueGenericReset+0xb0>)
   8213a:	4798      	blx	r3
   8213c:	e7fe      	b.n	8213c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8213e:	4b26      	ldr	r3, [pc, #152]	; (821d8 <xQueueGenericReset+0xb4>)
   82140:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   82142:	68fb      	ldr	r3, [r7, #12]
   82144:	681a      	ldr	r2, [r3, #0]
   82146:	68fb      	ldr	r3, [r7, #12]
   82148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8214a:	68f9      	ldr	r1, [r7, #12]
   8214c:	6c09      	ldr	r1, [r1, #64]	; 0x40
   8214e:	fb01 f303 	mul.w	r3, r1, r3
   82152:	441a      	add	r2, r3
   82154:	68fb      	ldr	r3, [r7, #12]
   82156:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   82158:	68fb      	ldr	r3, [r7, #12]
   8215a:	2200      	movs	r2, #0
   8215c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8215e:	68fb      	ldr	r3, [r7, #12]
   82160:	681a      	ldr	r2, [r3, #0]
   82162:	68fb      	ldr	r3, [r7, #12]
   82164:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   82166:	68fb      	ldr	r3, [r7, #12]
   82168:	681a      	ldr	r2, [r3, #0]
   8216a:	68fb      	ldr	r3, [r7, #12]
   8216c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8216e:	3b01      	subs	r3, #1
   82170:	68f9      	ldr	r1, [r7, #12]
   82172:	6c09      	ldr	r1, [r1, #64]	; 0x40
   82174:	fb01 f303 	mul.w	r3, r1, r3
   82178:	441a      	add	r2, r3
   8217a:	68fb      	ldr	r3, [r7, #12]
   8217c:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   8217e:	68fb      	ldr	r3, [r7, #12]
   82180:	f04f 32ff 	mov.w	r2, #4294967295
   82184:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   82186:	68fb      	ldr	r3, [r7, #12]
   82188:	f04f 32ff 	mov.w	r2, #4294967295
   8218c:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8218e:	683b      	ldr	r3, [r7, #0]
   82190:	2b00      	cmp	r3, #0
   82192:	d10e      	bne.n	821b2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82194:	68fb      	ldr	r3, [r7, #12]
   82196:	691b      	ldr	r3, [r3, #16]
   82198:	2b00      	cmp	r3, #0
   8219a:	d014      	beq.n	821c6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8219c:	68fb      	ldr	r3, [r7, #12]
   8219e:	3310      	adds	r3, #16
   821a0:	4618      	mov	r0, r3
   821a2:	4b0e      	ldr	r3, [pc, #56]	; (821dc <xQueueGenericReset+0xb8>)
   821a4:	4798      	blx	r3
   821a6:	4603      	mov	r3, r0
   821a8:	2b01      	cmp	r3, #1
   821aa:	d10c      	bne.n	821c6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   821ac:	4b0c      	ldr	r3, [pc, #48]	; (821e0 <xQueueGenericReset+0xbc>)
   821ae:	4798      	blx	r3
   821b0:	e009      	b.n	821c6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   821b2:	68fb      	ldr	r3, [r7, #12]
   821b4:	3310      	adds	r3, #16
   821b6:	4618      	mov	r0, r3
   821b8:	4b0a      	ldr	r3, [pc, #40]	; (821e4 <xQueueGenericReset+0xc0>)
   821ba:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   821bc:	68fb      	ldr	r3, [r7, #12]
   821be:	3324      	adds	r3, #36	; 0x24
   821c0:	4618      	mov	r0, r3
   821c2:	4b08      	ldr	r3, [pc, #32]	; (821e4 <xQueueGenericReset+0xc0>)
   821c4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   821c6:	4b08      	ldr	r3, [pc, #32]	; (821e8 <xQueueGenericReset+0xc4>)
   821c8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   821ca:	2301      	movs	r3, #1
}
   821cc:	4618      	mov	r0, r3
   821ce:	3710      	adds	r7, #16
   821d0:	46bd      	mov	sp, r7
   821d2:	bd80      	pop	{r7, pc}
   821d4:	00081c71 	.word	0x00081c71
   821d8:	00081bf5 	.word	0x00081bf5
   821dc:	000832ad 	.word	0x000832ad
   821e0:	00081bd5 	.word	0x00081bd5
   821e4:	000818e9 	.word	0x000818e9
   821e8:	00081c39 	.word	0x00081c39

000821ec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   821ec:	b580      	push	{r7, lr}
   821ee:	b088      	sub	sp, #32
   821f0:	af00      	add	r7, sp, #0
   821f2:	60f8      	str	r0, [r7, #12]
   821f4:	60b9      	str	r1, [r7, #8]
   821f6:	4613      	mov	r3, r2
   821f8:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   821fa:	2300      	movs	r3, #0
   821fc:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   821fe:	68fb      	ldr	r3, [r7, #12]
   82200:	2b00      	cmp	r3, #0
   82202:	d026      	beq.n	82252 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   82204:	204c      	movs	r0, #76	; 0x4c
   82206:	4b18      	ldr	r3, [pc, #96]	; (82268 <xQueueGenericCreate+0x7c>)
   82208:	4798      	blx	r3
   8220a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   8220c:	69bb      	ldr	r3, [r7, #24]
   8220e:	2b00      	cmp	r3, #0
   82210:	d01f      	beq.n	82252 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82212:	68fb      	ldr	r3, [r7, #12]
   82214:	68ba      	ldr	r2, [r7, #8]
   82216:	fb02 f303 	mul.w	r3, r2, r3
   8221a:	3301      	adds	r3, #1
   8221c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   8221e:	6978      	ldr	r0, [r7, #20]
   82220:	4b11      	ldr	r3, [pc, #68]	; (82268 <xQueueGenericCreate+0x7c>)
   82222:	4798      	blx	r3
   82224:	4602      	mov	r2, r0
   82226:	69bb      	ldr	r3, [r7, #24]
   82228:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   8222a:	69bb      	ldr	r3, [r7, #24]
   8222c:	681b      	ldr	r3, [r3, #0]
   8222e:	2b00      	cmp	r3, #0
   82230:	d00c      	beq.n	8224c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82232:	69bb      	ldr	r3, [r7, #24]
   82234:	68fa      	ldr	r2, [r7, #12]
   82236:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   82238:	69bb      	ldr	r3, [r7, #24]
   8223a:	68ba      	ldr	r2, [r7, #8]
   8223c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8223e:	69b8      	ldr	r0, [r7, #24]
   82240:	2101      	movs	r1, #1
   82242:	4b0a      	ldr	r3, [pc, #40]	; (8226c <xQueueGenericCreate+0x80>)
   82244:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   82246:	69bb      	ldr	r3, [r7, #24]
   82248:	61fb      	str	r3, [r7, #28]
   8224a:	e002      	b.n	82252 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   8224c:	69b8      	ldr	r0, [r7, #24]
   8224e:	4b08      	ldr	r3, [pc, #32]	; (82270 <xQueueGenericCreate+0x84>)
   82250:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   82252:	69fb      	ldr	r3, [r7, #28]
   82254:	2b00      	cmp	r3, #0
   82256:	d102      	bne.n	8225e <xQueueGenericCreate+0x72>
   82258:	4b06      	ldr	r3, [pc, #24]	; (82274 <xQueueGenericCreate+0x88>)
   8225a:	4798      	blx	r3
   8225c:	e7fe      	b.n	8225c <xQueueGenericCreate+0x70>

	return xReturn;
   8225e:	69fb      	ldr	r3, [r7, #28]
}
   82260:	4618      	mov	r0, r3
   82262:	3720      	adds	r7, #32
   82264:	46bd      	mov	sp, r7
   82266:	bd80      	pop	{r7, pc}
   82268:	00081d95 	.word	0x00081d95
   8226c:	00082125 	.word	0x00082125
   82270:	00081f0d 	.word	0x00081f0d
   82274:	00081c71 	.word	0x00081c71

00082278 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   82278:	b580      	push	{r7, lr}
   8227a:	b08a      	sub	sp, #40	; 0x28
   8227c:	af00      	add	r7, sp, #0
   8227e:	60f8      	str	r0, [r7, #12]
   82280:	60b9      	str	r1, [r7, #8]
   82282:	607a      	str	r2, [r7, #4]
   82284:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   82286:	2300      	movs	r3, #0
   82288:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8228a:	68fb      	ldr	r3, [r7, #12]
   8228c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   8228e:	6a3b      	ldr	r3, [r7, #32]
   82290:	2b00      	cmp	r3, #0
   82292:	d102      	bne.n	8229a <xQueueGenericSend+0x22>
   82294:	4b5b      	ldr	r3, [pc, #364]	; (82404 <xQueueGenericSend+0x18c>)
   82296:	4798      	blx	r3
   82298:	e7fe      	b.n	82298 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8229a:	68bb      	ldr	r3, [r7, #8]
   8229c:	2b00      	cmp	r3, #0
   8229e:	d103      	bne.n	822a8 <xQueueGenericSend+0x30>
   822a0:	6a3b      	ldr	r3, [r7, #32]
   822a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   822a4:	2b00      	cmp	r3, #0
   822a6:	d101      	bne.n	822ac <xQueueGenericSend+0x34>
   822a8:	2301      	movs	r3, #1
   822aa:	e000      	b.n	822ae <xQueueGenericSend+0x36>
   822ac:	2300      	movs	r3, #0
   822ae:	2b00      	cmp	r3, #0
   822b0:	d102      	bne.n	822b8 <xQueueGenericSend+0x40>
   822b2:	4b54      	ldr	r3, [pc, #336]	; (82404 <xQueueGenericSend+0x18c>)
   822b4:	4798      	blx	r3
   822b6:	e7fe      	b.n	822b6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   822b8:	683b      	ldr	r3, [r7, #0]
   822ba:	2b02      	cmp	r3, #2
   822bc:	d103      	bne.n	822c6 <xQueueGenericSend+0x4e>
   822be:	6a3b      	ldr	r3, [r7, #32]
   822c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   822c2:	2b01      	cmp	r3, #1
   822c4:	d101      	bne.n	822ca <xQueueGenericSend+0x52>
   822c6:	2301      	movs	r3, #1
   822c8:	e000      	b.n	822cc <xQueueGenericSend+0x54>
   822ca:	2300      	movs	r3, #0
   822cc:	2b00      	cmp	r3, #0
   822ce:	d102      	bne.n	822d6 <xQueueGenericSend+0x5e>
   822d0:	4b4c      	ldr	r3, [pc, #304]	; (82404 <xQueueGenericSend+0x18c>)
   822d2:	4798      	blx	r3
   822d4:	e7fe      	b.n	822d4 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   822d6:	4b4c      	ldr	r3, [pc, #304]	; (82408 <xQueueGenericSend+0x190>)
   822d8:	4798      	blx	r3
   822da:	4603      	mov	r3, r0
   822dc:	2b00      	cmp	r3, #0
   822de:	d102      	bne.n	822e6 <xQueueGenericSend+0x6e>
   822e0:	687b      	ldr	r3, [r7, #4]
   822e2:	2b00      	cmp	r3, #0
   822e4:	d101      	bne.n	822ea <xQueueGenericSend+0x72>
   822e6:	2301      	movs	r3, #1
   822e8:	e000      	b.n	822ec <xQueueGenericSend+0x74>
   822ea:	2300      	movs	r3, #0
   822ec:	2b00      	cmp	r3, #0
   822ee:	d102      	bne.n	822f6 <xQueueGenericSend+0x7e>
   822f0:	4b44      	ldr	r3, [pc, #272]	; (82404 <xQueueGenericSend+0x18c>)
   822f2:	4798      	blx	r3
   822f4:	e7fe      	b.n	822f4 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   822f6:	4b45      	ldr	r3, [pc, #276]	; (8240c <xQueueGenericSend+0x194>)
   822f8:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   822fa:	6a3b      	ldr	r3, [r7, #32]
   822fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   822fe:	6a3b      	ldr	r3, [r7, #32]
   82300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82302:	429a      	cmp	r2, r3
   82304:	d302      	bcc.n	8230c <xQueueGenericSend+0x94>
   82306:	683b      	ldr	r3, [r7, #0]
   82308:	2b02      	cmp	r3, #2
   8230a:	d11d      	bne.n	82348 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8230c:	6a38      	ldr	r0, [r7, #32]
   8230e:	68b9      	ldr	r1, [r7, #8]
   82310:	683a      	ldr	r2, [r7, #0]
   82312:	4b3f      	ldr	r3, [pc, #252]	; (82410 <xQueueGenericSend+0x198>)
   82314:	4798      	blx	r3
   82316:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82318:	6a3b      	ldr	r3, [r7, #32]
   8231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8231c:	2b00      	cmp	r3, #0
   8231e:	d00a      	beq.n	82336 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   82320:	6a3b      	ldr	r3, [r7, #32]
   82322:	3324      	adds	r3, #36	; 0x24
   82324:	4618      	mov	r0, r3
   82326:	4b3b      	ldr	r3, [pc, #236]	; (82414 <xQueueGenericSend+0x19c>)
   82328:	4798      	blx	r3
   8232a:	4603      	mov	r3, r0
   8232c:	2b01      	cmp	r3, #1
   8232e:	d107      	bne.n	82340 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   82330:	4b39      	ldr	r3, [pc, #228]	; (82418 <xQueueGenericSend+0x1a0>)
   82332:	4798      	blx	r3
   82334:	e004      	b.n	82340 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   82336:	69fb      	ldr	r3, [r7, #28]
   82338:	2b00      	cmp	r3, #0
   8233a:	d001      	beq.n	82340 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   8233c:	4b36      	ldr	r3, [pc, #216]	; (82418 <xQueueGenericSend+0x1a0>)
   8233e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   82340:	4b36      	ldr	r3, [pc, #216]	; (8241c <xQueueGenericSend+0x1a4>)
   82342:	4798      	blx	r3
				return pdPASS;
   82344:	2301      	movs	r3, #1
   82346:	e059      	b.n	823fc <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   82348:	687b      	ldr	r3, [r7, #4]
   8234a:	2b00      	cmp	r3, #0
   8234c:	d103      	bne.n	82356 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8234e:	4b33      	ldr	r3, [pc, #204]	; (8241c <xQueueGenericSend+0x1a4>)
   82350:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   82352:	2300      	movs	r3, #0
   82354:	e052      	b.n	823fc <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   82356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82358:	2b00      	cmp	r3, #0
   8235a:	d106      	bne.n	8236a <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   8235c:	f107 0314 	add.w	r3, r7, #20
   82360:	4618      	mov	r0, r3
   82362:	4b2f      	ldr	r3, [pc, #188]	; (82420 <xQueueGenericSend+0x1a8>)
   82364:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   82366:	2301      	movs	r3, #1
   82368:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   8236a:	4b2c      	ldr	r3, [pc, #176]	; (8241c <xQueueGenericSend+0x1a4>)
   8236c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8236e:	4b2d      	ldr	r3, [pc, #180]	; (82424 <xQueueGenericSend+0x1ac>)
   82370:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82372:	4b26      	ldr	r3, [pc, #152]	; (8240c <xQueueGenericSend+0x194>)
   82374:	4798      	blx	r3
   82376:	6a3b      	ldr	r3, [r7, #32]
   82378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8237a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8237e:	d102      	bne.n	82386 <xQueueGenericSend+0x10e>
   82380:	6a3b      	ldr	r3, [r7, #32]
   82382:	2200      	movs	r2, #0
   82384:	645a      	str	r2, [r3, #68]	; 0x44
   82386:	6a3b      	ldr	r3, [r7, #32]
   82388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8238a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8238e:	d102      	bne.n	82396 <xQueueGenericSend+0x11e>
   82390:	6a3b      	ldr	r3, [r7, #32]
   82392:	2200      	movs	r2, #0
   82394:	649a      	str	r2, [r3, #72]	; 0x48
   82396:	4b21      	ldr	r3, [pc, #132]	; (8241c <xQueueGenericSend+0x1a4>)
   82398:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8239a:	f107 0214 	add.w	r2, r7, #20
   8239e:	1d3b      	adds	r3, r7, #4
   823a0:	4610      	mov	r0, r2
   823a2:	4619      	mov	r1, r3
   823a4:	4b20      	ldr	r3, [pc, #128]	; (82428 <xQueueGenericSend+0x1b0>)
   823a6:	4798      	blx	r3
   823a8:	4603      	mov	r3, r0
   823aa:	2b00      	cmp	r3, #0
   823ac:	d11e      	bne.n	823ec <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   823ae:	6a38      	ldr	r0, [r7, #32]
   823b0:	4b1e      	ldr	r3, [pc, #120]	; (8242c <xQueueGenericSend+0x1b4>)
   823b2:	4798      	blx	r3
   823b4:	4603      	mov	r3, r0
   823b6:	2b00      	cmp	r3, #0
   823b8:	d012      	beq.n	823e0 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   823ba:	6a3b      	ldr	r3, [r7, #32]
   823bc:	f103 0210 	add.w	r2, r3, #16
   823c0:	687b      	ldr	r3, [r7, #4]
   823c2:	4610      	mov	r0, r2
   823c4:	4619      	mov	r1, r3
   823c6:	4b1a      	ldr	r3, [pc, #104]	; (82430 <xQueueGenericSend+0x1b8>)
   823c8:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   823ca:	6a38      	ldr	r0, [r7, #32]
   823cc:	4b19      	ldr	r3, [pc, #100]	; (82434 <xQueueGenericSend+0x1bc>)
   823ce:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   823d0:	4b19      	ldr	r3, [pc, #100]	; (82438 <xQueueGenericSend+0x1c0>)
   823d2:	4798      	blx	r3
   823d4:	4603      	mov	r3, r0
   823d6:	2b00      	cmp	r3, #0
   823d8:	d10f      	bne.n	823fa <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   823da:	4b0f      	ldr	r3, [pc, #60]	; (82418 <xQueueGenericSend+0x1a0>)
   823dc:	4798      	blx	r3
   823de:	e00c      	b.n	823fa <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   823e0:	6a38      	ldr	r0, [r7, #32]
   823e2:	4b14      	ldr	r3, [pc, #80]	; (82434 <xQueueGenericSend+0x1bc>)
   823e4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   823e6:	4b14      	ldr	r3, [pc, #80]	; (82438 <xQueueGenericSend+0x1c0>)
   823e8:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   823ea:	e784      	b.n	822f6 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   823ec:	6a38      	ldr	r0, [r7, #32]
   823ee:	4b11      	ldr	r3, [pc, #68]	; (82434 <xQueueGenericSend+0x1bc>)
   823f0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   823f2:	4b11      	ldr	r3, [pc, #68]	; (82438 <xQueueGenericSend+0x1c0>)
   823f4:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   823f6:	2300      	movs	r3, #0
   823f8:	e000      	b.n	823fc <xQueueGenericSend+0x184>
		}
	}
   823fa:	e77c      	b.n	822f6 <xQueueGenericSend+0x7e>
}
   823fc:	4618      	mov	r0, r3
   823fe:	3728      	adds	r7, #40	; 0x28
   82400:	46bd      	mov	sp, r7
   82402:	bd80      	pop	{r7, pc}
   82404:	00081c71 	.word	0x00081c71
   82408:	00083785 	.word	0x00083785
   8240c:	00081bf5 	.word	0x00081bf5
   82410:	000827fd 	.word	0x000827fd
   82414:	000832ad 	.word	0x000832ad
   82418:	00081bd5 	.word	0x00081bd5
   8241c:	00081c39 	.word	0x00081c39
   82420:	0008336d 	.word	0x0008336d
   82424:	00082da9 	.word	0x00082da9
   82428:	000833a5 	.word	0x000833a5
   8242c:	00082a0d 	.word	0x00082a0d
   82430:	0008318d 	.word	0x0008318d
   82434:	00082931 	.word	0x00082931
   82438:	00082dc5 	.word	0x00082dc5

0008243c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   8243c:	b580      	push	{r7, lr}
   8243e:	b088      	sub	sp, #32
   82440:	af00      	add	r7, sp, #0
   82442:	60f8      	str	r0, [r7, #12]
   82444:	60b9      	str	r1, [r7, #8]
   82446:	607a      	str	r2, [r7, #4]
   82448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8244a:	68fb      	ldr	r3, [r7, #12]
   8244c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   8244e:	69bb      	ldr	r3, [r7, #24]
   82450:	2b00      	cmp	r3, #0
   82452:	d102      	bne.n	8245a <xQueueGenericSendFromISR+0x1e>
   82454:	4b33      	ldr	r3, [pc, #204]	; (82524 <xQueueGenericSendFromISR+0xe8>)
   82456:	4798      	blx	r3
   82458:	e7fe      	b.n	82458 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8245a:	68bb      	ldr	r3, [r7, #8]
   8245c:	2b00      	cmp	r3, #0
   8245e:	d103      	bne.n	82468 <xQueueGenericSendFromISR+0x2c>
   82460:	69bb      	ldr	r3, [r7, #24]
   82462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82464:	2b00      	cmp	r3, #0
   82466:	d101      	bne.n	8246c <xQueueGenericSendFromISR+0x30>
   82468:	2301      	movs	r3, #1
   8246a:	e000      	b.n	8246e <xQueueGenericSendFromISR+0x32>
   8246c:	2300      	movs	r3, #0
   8246e:	2b00      	cmp	r3, #0
   82470:	d102      	bne.n	82478 <xQueueGenericSendFromISR+0x3c>
   82472:	4b2c      	ldr	r3, [pc, #176]	; (82524 <xQueueGenericSendFromISR+0xe8>)
   82474:	4798      	blx	r3
   82476:	e7fe      	b.n	82476 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   82478:	683b      	ldr	r3, [r7, #0]
   8247a:	2b02      	cmp	r3, #2
   8247c:	d103      	bne.n	82486 <xQueueGenericSendFromISR+0x4a>
   8247e:	69bb      	ldr	r3, [r7, #24]
   82480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82482:	2b01      	cmp	r3, #1
   82484:	d101      	bne.n	8248a <xQueueGenericSendFromISR+0x4e>
   82486:	2301      	movs	r3, #1
   82488:	e000      	b.n	8248c <xQueueGenericSendFromISR+0x50>
   8248a:	2300      	movs	r3, #0
   8248c:	2b00      	cmp	r3, #0
   8248e:	d102      	bne.n	82496 <xQueueGenericSendFromISR+0x5a>
   82490:	4b24      	ldr	r3, [pc, #144]	; (82524 <xQueueGenericSendFromISR+0xe8>)
   82492:	4798      	blx	r3
   82494:	e7fe      	b.n	82494 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   82496:	4b24      	ldr	r3, [pc, #144]	; (82528 <xQueueGenericSendFromISR+0xec>)
   82498:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8249a:	4b22      	ldr	r3, [pc, #136]	; (82524 <xQueueGenericSendFromISR+0xe8>)
   8249c:	4798      	blx	r3
   8249e:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   824a0:	69bb      	ldr	r3, [r7, #24]
   824a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   824a4:	69bb      	ldr	r3, [r7, #24]
   824a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   824a8:	429a      	cmp	r2, r3
   824aa:	d302      	bcc.n	824b2 <xQueueGenericSendFromISR+0x76>
   824ac:	683b      	ldr	r3, [r7, #0]
   824ae:	2b02      	cmp	r3, #2
   824b0:	d12d      	bne.n	8250e <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   824b2:	69b8      	ldr	r0, [r7, #24]
   824b4:	68b9      	ldr	r1, [r7, #8]
   824b6:	683a      	ldr	r2, [r7, #0]
   824b8:	4b1c      	ldr	r3, [pc, #112]	; (8252c <xQueueGenericSendFromISR+0xf0>)
   824ba:	4798      	blx	r3
   824bc:	4603      	mov	r3, r0
   824be:	2b00      	cmp	r3, #0
   824c0:	d005      	beq.n	824ce <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   824c2:	687b      	ldr	r3, [r7, #4]
   824c4:	2b00      	cmp	r3, #0
   824c6:	d002      	beq.n	824ce <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   824c8:	687b      	ldr	r3, [r7, #4]
   824ca:	2201      	movs	r2, #1
   824cc:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   824ce:	69bb      	ldr	r3, [r7, #24]
   824d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   824d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   824d6:	d112      	bne.n	824fe <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   824d8:	69bb      	ldr	r3, [r7, #24]
   824da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   824dc:	2b00      	cmp	r3, #0
   824de:	d013      	beq.n	82508 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   824e0:	69bb      	ldr	r3, [r7, #24]
   824e2:	3324      	adds	r3, #36	; 0x24
   824e4:	4618      	mov	r0, r3
   824e6:	4b12      	ldr	r3, [pc, #72]	; (82530 <xQueueGenericSendFromISR+0xf4>)
   824e8:	4798      	blx	r3
   824ea:	4603      	mov	r3, r0
   824ec:	2b00      	cmp	r3, #0
   824ee:	d00b      	beq.n	82508 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   824f0:	687b      	ldr	r3, [r7, #4]
   824f2:	2b00      	cmp	r3, #0
   824f4:	d008      	beq.n	82508 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   824f6:	687b      	ldr	r3, [r7, #4]
   824f8:	2201      	movs	r2, #1
   824fa:	601a      	str	r2, [r3, #0]
   824fc:	e004      	b.n	82508 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   824fe:	69bb      	ldr	r3, [r7, #24]
   82500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82502:	1c5a      	adds	r2, r3, #1
   82504:	69bb      	ldr	r3, [r7, #24]
   82506:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   82508:	2301      	movs	r3, #1
   8250a:	61fb      	str	r3, [r7, #28]
   8250c:	e001      	b.n	82512 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   8250e:	2300      	movs	r3, #0
   82510:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   82512:	6978      	ldr	r0, [r7, #20]
   82514:	4b07      	ldr	r3, [pc, #28]	; (82534 <xQueueGenericSendFromISR+0xf8>)
   82516:	4798      	blx	r3

	return xReturn;
   82518:	69fb      	ldr	r3, [r7, #28]
}
   8251a:	4618      	mov	r0, r3
   8251c:	3720      	adds	r7, #32
   8251e:	46bd      	mov	sp, r7
   82520:	bd80      	pop	{r7, pc}
   82522:	bf00      	nop
   82524:	00081c71 	.word	0x00081c71
   82528:	00081d39 	.word	0x00081d39
   8252c:	000827fd 	.word	0x000827fd
   82530:	000832ad 	.word	0x000832ad
   82534:	00081c85 	.word	0x00081c85

00082538 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   82538:	b580      	push	{r7, lr}
   8253a:	b08a      	sub	sp, #40	; 0x28
   8253c:	af00      	add	r7, sp, #0
   8253e:	60f8      	str	r0, [r7, #12]
   82540:	60b9      	str	r1, [r7, #8]
   82542:	607a      	str	r2, [r7, #4]
   82544:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   82546:	2300      	movs	r3, #0
   82548:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8254a:	68fb      	ldr	r3, [r7, #12]
   8254c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   8254e:	6a3b      	ldr	r3, [r7, #32]
   82550:	2b00      	cmp	r3, #0
   82552:	d102      	bne.n	8255a <xQueueGenericReceive+0x22>
   82554:	4b67      	ldr	r3, [pc, #412]	; (826f4 <xQueueGenericReceive+0x1bc>)
   82556:	4798      	blx	r3
   82558:	e7fe      	b.n	82558 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8255a:	68bb      	ldr	r3, [r7, #8]
   8255c:	2b00      	cmp	r3, #0
   8255e:	d103      	bne.n	82568 <xQueueGenericReceive+0x30>
   82560:	6a3b      	ldr	r3, [r7, #32]
   82562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82564:	2b00      	cmp	r3, #0
   82566:	d101      	bne.n	8256c <xQueueGenericReceive+0x34>
   82568:	2301      	movs	r3, #1
   8256a:	e000      	b.n	8256e <xQueueGenericReceive+0x36>
   8256c:	2300      	movs	r3, #0
   8256e:	2b00      	cmp	r3, #0
   82570:	d102      	bne.n	82578 <xQueueGenericReceive+0x40>
   82572:	4b60      	ldr	r3, [pc, #384]	; (826f4 <xQueueGenericReceive+0x1bc>)
   82574:	4798      	blx	r3
   82576:	e7fe      	b.n	82576 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   82578:	4b5f      	ldr	r3, [pc, #380]	; (826f8 <xQueueGenericReceive+0x1c0>)
   8257a:	4798      	blx	r3
   8257c:	4603      	mov	r3, r0
   8257e:	2b00      	cmp	r3, #0
   82580:	d102      	bne.n	82588 <xQueueGenericReceive+0x50>
   82582:	687b      	ldr	r3, [r7, #4]
   82584:	2b00      	cmp	r3, #0
   82586:	d101      	bne.n	8258c <xQueueGenericReceive+0x54>
   82588:	2301      	movs	r3, #1
   8258a:	e000      	b.n	8258e <xQueueGenericReceive+0x56>
   8258c:	2300      	movs	r3, #0
   8258e:	2b00      	cmp	r3, #0
   82590:	d102      	bne.n	82598 <xQueueGenericReceive+0x60>
   82592:	4b58      	ldr	r3, [pc, #352]	; (826f4 <xQueueGenericReceive+0x1bc>)
   82594:	4798      	blx	r3
   82596:	e7fe      	b.n	82596 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   82598:	4b58      	ldr	r3, [pc, #352]	; (826fc <xQueueGenericReceive+0x1c4>)
   8259a:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   8259c:	6a3b      	ldr	r3, [r7, #32]
   8259e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   825a0:	2b00      	cmp	r3, #0
   825a2:	d03b      	beq.n	8261c <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   825a4:	6a3b      	ldr	r3, [r7, #32]
   825a6:	68db      	ldr	r3, [r3, #12]
   825a8:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   825aa:	6a38      	ldr	r0, [r7, #32]
   825ac:	68b9      	ldr	r1, [r7, #8]
   825ae:	4b54      	ldr	r3, [pc, #336]	; (82700 <xQueueGenericReceive+0x1c8>)
   825b0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   825b2:	683b      	ldr	r3, [r7, #0]
   825b4:	2b00      	cmp	r3, #0
   825b6:	d11c      	bne.n	825f2 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   825b8:	6a3b      	ldr	r3, [r7, #32]
   825ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   825bc:	1e5a      	subs	r2, r3, #1
   825be:	6a3b      	ldr	r3, [r7, #32]
   825c0:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   825c2:	6a3b      	ldr	r3, [r7, #32]
   825c4:	681b      	ldr	r3, [r3, #0]
   825c6:	2b00      	cmp	r3, #0
   825c8:	d104      	bne.n	825d4 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   825ca:	4b4e      	ldr	r3, [pc, #312]	; (82704 <xQueueGenericReceive+0x1cc>)
   825cc:	4798      	blx	r3
   825ce:	4602      	mov	r2, r0
   825d0:	6a3b      	ldr	r3, [r7, #32]
   825d2:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   825d4:	6a3b      	ldr	r3, [r7, #32]
   825d6:	691b      	ldr	r3, [r3, #16]
   825d8:	2b00      	cmp	r3, #0
   825da:	d01b      	beq.n	82614 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   825dc:	6a3b      	ldr	r3, [r7, #32]
   825de:	3310      	adds	r3, #16
   825e0:	4618      	mov	r0, r3
   825e2:	4b49      	ldr	r3, [pc, #292]	; (82708 <xQueueGenericReceive+0x1d0>)
   825e4:	4798      	blx	r3
   825e6:	4603      	mov	r3, r0
   825e8:	2b01      	cmp	r3, #1
   825ea:	d113      	bne.n	82614 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   825ec:	4b47      	ldr	r3, [pc, #284]	; (8270c <xQueueGenericReceive+0x1d4>)
   825ee:	4798      	blx	r3
   825f0:	e010      	b.n	82614 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   825f2:	6a3b      	ldr	r3, [r7, #32]
   825f4:	69fa      	ldr	r2, [r7, #28]
   825f6:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   825f8:	6a3b      	ldr	r3, [r7, #32]
   825fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   825fc:	2b00      	cmp	r3, #0
   825fe:	d009      	beq.n	82614 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82600:	6a3b      	ldr	r3, [r7, #32]
   82602:	3324      	adds	r3, #36	; 0x24
   82604:	4618      	mov	r0, r3
   82606:	4b40      	ldr	r3, [pc, #256]	; (82708 <xQueueGenericReceive+0x1d0>)
   82608:	4798      	blx	r3
   8260a:	4603      	mov	r3, r0
   8260c:	2b00      	cmp	r3, #0
   8260e:	d001      	beq.n	82614 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   82610:	4b3e      	ldr	r3, [pc, #248]	; (8270c <xQueueGenericReceive+0x1d4>)
   82612:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   82614:	4b3e      	ldr	r3, [pc, #248]	; (82710 <xQueueGenericReceive+0x1d8>)
   82616:	4798      	blx	r3
				return pdPASS;
   82618:	2301      	movs	r3, #1
   8261a:	e066      	b.n	826ea <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   8261c:	687b      	ldr	r3, [r7, #4]
   8261e:	2b00      	cmp	r3, #0
   82620:	d103      	bne.n	8262a <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82622:	4b3b      	ldr	r3, [pc, #236]	; (82710 <xQueueGenericReceive+0x1d8>)
   82624:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   82626:	2300      	movs	r3, #0
   82628:	e05f      	b.n	826ea <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   8262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8262c:	2b00      	cmp	r3, #0
   8262e:	d106      	bne.n	8263e <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82630:	f107 0314 	add.w	r3, r7, #20
   82634:	4618      	mov	r0, r3
   82636:	4b37      	ldr	r3, [pc, #220]	; (82714 <xQueueGenericReceive+0x1dc>)
   82638:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8263a:	2301      	movs	r3, #1
   8263c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   8263e:	4b34      	ldr	r3, [pc, #208]	; (82710 <xQueueGenericReceive+0x1d8>)
   82640:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82642:	4b35      	ldr	r3, [pc, #212]	; (82718 <xQueueGenericReceive+0x1e0>)
   82644:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82646:	4b2d      	ldr	r3, [pc, #180]	; (826fc <xQueueGenericReceive+0x1c4>)
   82648:	4798      	blx	r3
   8264a:	6a3b      	ldr	r3, [r7, #32]
   8264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8264e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82652:	d102      	bne.n	8265a <xQueueGenericReceive+0x122>
   82654:	6a3b      	ldr	r3, [r7, #32]
   82656:	2200      	movs	r2, #0
   82658:	645a      	str	r2, [r3, #68]	; 0x44
   8265a:	6a3b      	ldr	r3, [r7, #32]
   8265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8265e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82662:	d102      	bne.n	8266a <xQueueGenericReceive+0x132>
   82664:	6a3b      	ldr	r3, [r7, #32]
   82666:	2200      	movs	r2, #0
   82668:	649a      	str	r2, [r3, #72]	; 0x48
   8266a:	4b29      	ldr	r3, [pc, #164]	; (82710 <xQueueGenericReceive+0x1d8>)
   8266c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8266e:	f107 0214 	add.w	r2, r7, #20
   82672:	1d3b      	adds	r3, r7, #4
   82674:	4610      	mov	r0, r2
   82676:	4619      	mov	r1, r3
   82678:	4b28      	ldr	r3, [pc, #160]	; (8271c <xQueueGenericReceive+0x1e4>)
   8267a:	4798      	blx	r3
   8267c:	4603      	mov	r3, r0
   8267e:	2b00      	cmp	r3, #0
   82680:	d12b      	bne.n	826da <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   82682:	6a38      	ldr	r0, [r7, #32]
   82684:	4b26      	ldr	r3, [pc, #152]	; (82720 <xQueueGenericReceive+0x1e8>)
   82686:	4798      	blx	r3
   82688:	4603      	mov	r3, r0
   8268a:	2b00      	cmp	r3, #0
   8268c:	d01f      	beq.n	826ce <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8268e:	6a3b      	ldr	r3, [r7, #32]
   82690:	681b      	ldr	r3, [r3, #0]
   82692:	2b00      	cmp	r3, #0
   82694:	d108      	bne.n	826a8 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   82696:	4b19      	ldr	r3, [pc, #100]	; (826fc <xQueueGenericReceive+0x1c4>)
   82698:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8269a:	6a3b      	ldr	r3, [r7, #32]
   8269c:	685b      	ldr	r3, [r3, #4]
   8269e:	4618      	mov	r0, r3
   826a0:	4b20      	ldr	r3, [pc, #128]	; (82724 <xQueueGenericReceive+0x1ec>)
   826a2:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   826a4:	4b1a      	ldr	r3, [pc, #104]	; (82710 <xQueueGenericReceive+0x1d8>)
   826a6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   826a8:	6a3b      	ldr	r3, [r7, #32]
   826aa:	f103 0224 	add.w	r2, r3, #36	; 0x24
   826ae:	687b      	ldr	r3, [r7, #4]
   826b0:	4610      	mov	r0, r2
   826b2:	4619      	mov	r1, r3
   826b4:	4b1c      	ldr	r3, [pc, #112]	; (82728 <xQueueGenericReceive+0x1f0>)
   826b6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   826b8:	6a38      	ldr	r0, [r7, #32]
   826ba:	4b1c      	ldr	r3, [pc, #112]	; (8272c <xQueueGenericReceive+0x1f4>)
   826bc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   826be:	4b1c      	ldr	r3, [pc, #112]	; (82730 <xQueueGenericReceive+0x1f8>)
   826c0:	4798      	blx	r3
   826c2:	4603      	mov	r3, r0
   826c4:	2b00      	cmp	r3, #0
   826c6:	d10f      	bne.n	826e8 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   826c8:	4b10      	ldr	r3, [pc, #64]	; (8270c <xQueueGenericReceive+0x1d4>)
   826ca:	4798      	blx	r3
   826cc:	e00c      	b.n	826e8 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   826ce:	6a38      	ldr	r0, [r7, #32]
   826d0:	4b16      	ldr	r3, [pc, #88]	; (8272c <xQueueGenericReceive+0x1f4>)
   826d2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   826d4:	4b16      	ldr	r3, [pc, #88]	; (82730 <xQueueGenericReceive+0x1f8>)
   826d6:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   826d8:	e75e      	b.n	82598 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   826da:	6a38      	ldr	r0, [r7, #32]
   826dc:	4b13      	ldr	r3, [pc, #76]	; (8272c <xQueueGenericReceive+0x1f4>)
   826de:	4798      	blx	r3
			( void ) xTaskResumeAll();
   826e0:	4b13      	ldr	r3, [pc, #76]	; (82730 <xQueueGenericReceive+0x1f8>)
   826e2:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   826e4:	2300      	movs	r3, #0
   826e6:	e000      	b.n	826ea <xQueueGenericReceive+0x1b2>
		}
	}
   826e8:	e756      	b.n	82598 <xQueueGenericReceive+0x60>
}
   826ea:	4618      	mov	r0, r3
   826ec:	3728      	adds	r7, #40	; 0x28
   826ee:	46bd      	mov	sp, r7
   826f0:	bd80      	pop	{r7, pc}
   826f2:	bf00      	nop
   826f4:	00081c71 	.word	0x00081c71
   826f8:	00083785 	.word	0x00083785
   826fc:	00081bf5 	.word	0x00081bf5
   82700:	000828e1 	.word	0x000828e1
   82704:	00083999 	.word	0x00083999
   82708:	000832ad 	.word	0x000832ad
   8270c:	00081bd5 	.word	0x00081bd5
   82710:	00081c39 	.word	0x00081c39
   82714:	0008336d 	.word	0x0008336d
   82718:	00082da9 	.word	0x00082da9
   8271c:	000833a5 	.word	0x000833a5
   82720:	000829d9 	.word	0x000829d9
   82724:	000837c1 	.word	0x000837c1
   82728:	0008318d 	.word	0x0008318d
   8272c:	00082931 	.word	0x00082931
   82730:	00082dc5 	.word	0x00082dc5

00082734 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   82734:	b580      	push	{r7, lr}
   82736:	b088      	sub	sp, #32
   82738:	af00      	add	r7, sp, #0
   8273a:	60f8      	str	r0, [r7, #12]
   8273c:	60b9      	str	r1, [r7, #8]
   8273e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82740:	68fb      	ldr	r3, [r7, #12]
   82742:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   82744:	69bb      	ldr	r3, [r7, #24]
   82746:	2b00      	cmp	r3, #0
   82748:	d102      	bne.n	82750 <xQueueReceiveFromISR+0x1c>
   8274a:	4b27      	ldr	r3, [pc, #156]	; (827e8 <xQueueReceiveFromISR+0xb4>)
   8274c:	4798      	blx	r3
   8274e:	e7fe      	b.n	8274e <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82750:	68bb      	ldr	r3, [r7, #8]
   82752:	2b00      	cmp	r3, #0
   82754:	d103      	bne.n	8275e <xQueueReceiveFromISR+0x2a>
   82756:	69bb      	ldr	r3, [r7, #24]
   82758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8275a:	2b00      	cmp	r3, #0
   8275c:	d101      	bne.n	82762 <xQueueReceiveFromISR+0x2e>
   8275e:	2301      	movs	r3, #1
   82760:	e000      	b.n	82764 <xQueueReceiveFromISR+0x30>
   82762:	2300      	movs	r3, #0
   82764:	2b00      	cmp	r3, #0
   82766:	d102      	bne.n	8276e <xQueueReceiveFromISR+0x3a>
   82768:	4b1f      	ldr	r3, [pc, #124]	; (827e8 <xQueueReceiveFromISR+0xb4>)
   8276a:	4798      	blx	r3
   8276c:	e7fe      	b.n	8276c <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8276e:	4b1f      	ldr	r3, [pc, #124]	; (827ec <xQueueReceiveFromISR+0xb8>)
   82770:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82772:	4b1d      	ldr	r3, [pc, #116]	; (827e8 <xQueueReceiveFromISR+0xb4>)
   82774:	4798      	blx	r3
   82776:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   82778:	69bb      	ldr	r3, [r7, #24]
   8277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8277c:	2b00      	cmp	r3, #0
   8277e:	d028      	beq.n	827d2 <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   82780:	69b8      	ldr	r0, [r7, #24]
   82782:	68b9      	ldr	r1, [r7, #8]
   82784:	4b1a      	ldr	r3, [pc, #104]	; (827f0 <xQueueReceiveFromISR+0xbc>)
   82786:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   82788:	69bb      	ldr	r3, [r7, #24]
   8278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8278c:	1e5a      	subs	r2, r3, #1
   8278e:	69bb      	ldr	r3, [r7, #24]
   82790:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   82792:	69bb      	ldr	r3, [r7, #24]
   82794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82796:	f1b3 3fff 	cmp.w	r3, #4294967295
   8279a:	d112      	bne.n	827c2 <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8279c:	69bb      	ldr	r3, [r7, #24]
   8279e:	691b      	ldr	r3, [r3, #16]
   827a0:	2b00      	cmp	r3, #0
   827a2:	d013      	beq.n	827cc <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   827a4:	69bb      	ldr	r3, [r7, #24]
   827a6:	3310      	adds	r3, #16
   827a8:	4618      	mov	r0, r3
   827aa:	4b12      	ldr	r3, [pc, #72]	; (827f4 <xQueueReceiveFromISR+0xc0>)
   827ac:	4798      	blx	r3
   827ae:	4603      	mov	r3, r0
   827b0:	2b00      	cmp	r3, #0
   827b2:	d00b      	beq.n	827cc <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   827b4:	687b      	ldr	r3, [r7, #4]
   827b6:	2b00      	cmp	r3, #0
   827b8:	d008      	beq.n	827cc <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   827ba:	687b      	ldr	r3, [r7, #4]
   827bc:	2201      	movs	r2, #1
   827be:	601a      	str	r2, [r3, #0]
   827c0:	e004      	b.n	827cc <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   827c2:	69bb      	ldr	r3, [r7, #24]
   827c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   827c6:	1c5a      	adds	r2, r3, #1
   827c8:	69bb      	ldr	r3, [r7, #24]
   827ca:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   827cc:	2301      	movs	r3, #1
   827ce:	61fb      	str	r3, [r7, #28]
   827d0:	e001      	b.n	827d6 <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   827d2:	2300      	movs	r3, #0
   827d4:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   827d6:	6978      	ldr	r0, [r7, #20]
   827d8:	4b07      	ldr	r3, [pc, #28]	; (827f8 <xQueueReceiveFromISR+0xc4>)
   827da:	4798      	blx	r3

	return xReturn;
   827dc:	69fb      	ldr	r3, [r7, #28]
}
   827de:	4618      	mov	r0, r3
   827e0:	3720      	adds	r7, #32
   827e2:	46bd      	mov	sp, r7
   827e4:	bd80      	pop	{r7, pc}
   827e6:	bf00      	nop
   827e8:	00081c71 	.word	0x00081c71
   827ec:	00081d39 	.word	0x00081d39
   827f0:	000828e1 	.word	0x000828e1
   827f4:	000832ad 	.word	0x000832ad
   827f8:	00081c85 	.word	0x00081c85

000827fc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   827fc:	b580      	push	{r7, lr}
   827fe:	b086      	sub	sp, #24
   82800:	af00      	add	r7, sp, #0
   82802:	60f8      	str	r0, [r7, #12]
   82804:	60b9      	str	r1, [r7, #8]
   82806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   82808:	2300      	movs	r3, #0
   8280a:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   8280c:	68fb      	ldr	r3, [r7, #12]
   8280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82810:	2b00      	cmp	r3, #0
   82812:	d10d      	bne.n	82830 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82814:	68fb      	ldr	r3, [r7, #12]
   82816:	681b      	ldr	r3, [r3, #0]
   82818:	2b00      	cmp	r3, #0
   8281a:	d152      	bne.n	828c2 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   8281c:	68fb      	ldr	r3, [r7, #12]
   8281e:	685b      	ldr	r3, [r3, #4]
   82820:	4618      	mov	r0, r3
   82822:	4b2d      	ldr	r3, [pc, #180]	; (828d8 <prvCopyDataToQueue+0xdc>)
   82824:	4798      	blx	r3
   82826:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   82828:	68fb      	ldr	r3, [r7, #12]
   8282a:	2200      	movs	r2, #0
   8282c:	605a      	str	r2, [r3, #4]
   8282e:	e048      	b.n	828c2 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   82830:	687b      	ldr	r3, [r7, #4]
   82832:	2b00      	cmp	r3, #0
   82834:	d11a      	bne.n	8286c <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   82836:	68fb      	ldr	r3, [r7, #12]
   82838:	689a      	ldr	r2, [r3, #8]
   8283a:	68fb      	ldr	r3, [r7, #12]
   8283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8283e:	4610      	mov	r0, r2
   82840:	68b9      	ldr	r1, [r7, #8]
   82842:	461a      	mov	r2, r3
   82844:	4b25      	ldr	r3, [pc, #148]	; (828dc <prvCopyDataToQueue+0xe0>)
   82846:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   82848:	68fb      	ldr	r3, [r7, #12]
   8284a:	689a      	ldr	r2, [r3, #8]
   8284c:	68fb      	ldr	r3, [r7, #12]
   8284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82850:	441a      	add	r2, r3
   82852:	68fb      	ldr	r3, [r7, #12]
   82854:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   82856:	68fb      	ldr	r3, [r7, #12]
   82858:	689a      	ldr	r2, [r3, #8]
   8285a:	68fb      	ldr	r3, [r7, #12]
   8285c:	685b      	ldr	r3, [r3, #4]
   8285e:	429a      	cmp	r2, r3
   82860:	d32f      	bcc.n	828c2 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   82862:	68fb      	ldr	r3, [r7, #12]
   82864:	681a      	ldr	r2, [r3, #0]
   82866:	68fb      	ldr	r3, [r7, #12]
   82868:	609a      	str	r2, [r3, #8]
   8286a:	e02a      	b.n	828c2 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8286c:	68fb      	ldr	r3, [r7, #12]
   8286e:	68da      	ldr	r2, [r3, #12]
   82870:	68fb      	ldr	r3, [r7, #12]
   82872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82874:	4610      	mov	r0, r2
   82876:	68b9      	ldr	r1, [r7, #8]
   82878:	461a      	mov	r2, r3
   8287a:	4b18      	ldr	r3, [pc, #96]	; (828dc <prvCopyDataToQueue+0xe0>)
   8287c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   8287e:	68fb      	ldr	r3, [r7, #12]
   82880:	68da      	ldr	r2, [r3, #12]
   82882:	68fb      	ldr	r3, [r7, #12]
   82884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82886:	425b      	negs	r3, r3
   82888:	441a      	add	r2, r3
   8288a:	68fb      	ldr	r3, [r7, #12]
   8288c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8288e:	68fb      	ldr	r3, [r7, #12]
   82890:	68da      	ldr	r2, [r3, #12]
   82892:	68fb      	ldr	r3, [r7, #12]
   82894:	681b      	ldr	r3, [r3, #0]
   82896:	429a      	cmp	r2, r3
   82898:	d207      	bcs.n	828aa <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8289a:	68fb      	ldr	r3, [r7, #12]
   8289c:	685a      	ldr	r2, [r3, #4]
   8289e:	68fb      	ldr	r3, [r7, #12]
   828a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   828a2:	425b      	negs	r3, r3
   828a4:	441a      	add	r2, r3
   828a6:	68fb      	ldr	r3, [r7, #12]
   828a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   828aa:	687b      	ldr	r3, [r7, #4]
   828ac:	2b02      	cmp	r3, #2
   828ae:	d108      	bne.n	828c2 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   828b0:	68fb      	ldr	r3, [r7, #12]
   828b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   828b4:	2b00      	cmp	r3, #0
   828b6:	d004      	beq.n	828c2 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   828b8:	68fb      	ldr	r3, [r7, #12]
   828ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   828bc:	1e5a      	subs	r2, r3, #1
   828be:	68fb      	ldr	r3, [r7, #12]
   828c0:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   828c2:	68fb      	ldr	r3, [r7, #12]
   828c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   828c6:	1c5a      	adds	r2, r3, #1
   828c8:	68fb      	ldr	r3, [r7, #12]
   828ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   828cc:	697b      	ldr	r3, [r7, #20]
}
   828ce:	4618      	mov	r0, r3
   828d0:	3718      	adds	r7, #24
   828d2:	46bd      	mov	sp, r7
   828d4:	bd80      	pop	{r7, pc}
   828d6:	bf00      	nop
   828d8:	000838b5 	.word	0x000838b5
   828dc:	00084b2d 	.word	0x00084b2d

000828e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   828e0:	b580      	push	{r7, lr}
   828e2:	b082      	sub	sp, #8
   828e4:	af00      	add	r7, sp, #0
   828e6:	6078      	str	r0, [r7, #4]
   828e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   828ea:	687b      	ldr	r3, [r7, #4]
   828ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   828ee:	2b00      	cmp	r3, #0
   828f0:	d019      	beq.n	82926 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   828f2:	687b      	ldr	r3, [r7, #4]
   828f4:	68da      	ldr	r2, [r3, #12]
   828f6:	687b      	ldr	r3, [r7, #4]
   828f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   828fa:	441a      	add	r2, r3
   828fc:	687b      	ldr	r3, [r7, #4]
   828fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   82900:	687b      	ldr	r3, [r7, #4]
   82902:	68da      	ldr	r2, [r3, #12]
   82904:	687b      	ldr	r3, [r7, #4]
   82906:	685b      	ldr	r3, [r3, #4]
   82908:	429a      	cmp	r2, r3
   8290a:	d303      	bcc.n	82914 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   8290c:	687b      	ldr	r3, [r7, #4]
   8290e:	681a      	ldr	r2, [r3, #0]
   82910:	687b      	ldr	r3, [r7, #4]
   82912:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   82914:	687b      	ldr	r3, [r7, #4]
   82916:	68da      	ldr	r2, [r3, #12]
   82918:	687b      	ldr	r3, [r7, #4]
   8291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8291c:	6838      	ldr	r0, [r7, #0]
   8291e:	4611      	mov	r1, r2
   82920:	461a      	mov	r2, r3
   82922:	4b02      	ldr	r3, [pc, #8]	; (8292c <prvCopyDataFromQueue+0x4c>)
   82924:	4798      	blx	r3
	}
}
   82926:	3708      	adds	r7, #8
   82928:	46bd      	mov	sp, r7
   8292a:	bd80      	pop	{r7, pc}
   8292c:	00084b2d 	.word	0x00084b2d

00082930 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   82930:	b580      	push	{r7, lr}
   82932:	b082      	sub	sp, #8
   82934:	af00      	add	r7, sp, #0
   82936:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   82938:	4b23      	ldr	r3, [pc, #140]	; (829c8 <prvUnlockQueue+0x98>)
   8293a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8293c:	e014      	b.n	82968 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8293e:	687b      	ldr	r3, [r7, #4]
   82940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82942:	2b00      	cmp	r3, #0
   82944:	d00a      	beq.n	8295c <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82946:	687b      	ldr	r3, [r7, #4]
   82948:	3324      	adds	r3, #36	; 0x24
   8294a:	4618      	mov	r0, r3
   8294c:	4b1f      	ldr	r3, [pc, #124]	; (829cc <prvUnlockQueue+0x9c>)
   8294e:	4798      	blx	r3
   82950:	4603      	mov	r3, r0
   82952:	2b00      	cmp	r3, #0
   82954:	d003      	beq.n	8295e <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   82956:	4b1e      	ldr	r3, [pc, #120]	; (829d0 <prvUnlockQueue+0xa0>)
   82958:	4798      	blx	r3
   8295a:	e000      	b.n	8295e <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   8295c:	e008      	b.n	82970 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   8295e:	687b      	ldr	r3, [r7, #4]
   82960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82962:	1e5a      	subs	r2, r3, #1
   82964:	687b      	ldr	r3, [r7, #4]
   82966:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82968:	687b      	ldr	r3, [r7, #4]
   8296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8296c:	2b00      	cmp	r3, #0
   8296e:	dce6      	bgt.n	8293e <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   82970:	687b      	ldr	r3, [r7, #4]
   82972:	f04f 32ff 	mov.w	r2, #4294967295
   82976:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   82978:	4b16      	ldr	r3, [pc, #88]	; (829d4 <prvUnlockQueue+0xa4>)
   8297a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8297c:	4b12      	ldr	r3, [pc, #72]	; (829c8 <prvUnlockQueue+0x98>)
   8297e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82980:	e014      	b.n	829ac <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82982:	687b      	ldr	r3, [r7, #4]
   82984:	691b      	ldr	r3, [r3, #16]
   82986:	2b00      	cmp	r3, #0
   82988:	d00f      	beq.n	829aa <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8298a:	687b      	ldr	r3, [r7, #4]
   8298c:	3310      	adds	r3, #16
   8298e:	4618      	mov	r0, r3
   82990:	4b0e      	ldr	r3, [pc, #56]	; (829cc <prvUnlockQueue+0x9c>)
   82992:	4798      	blx	r3
   82994:	4603      	mov	r3, r0
   82996:	2b00      	cmp	r3, #0
   82998:	d001      	beq.n	8299e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   8299a:	4b0d      	ldr	r3, [pc, #52]	; (829d0 <prvUnlockQueue+0xa0>)
   8299c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   8299e:	687b      	ldr	r3, [r7, #4]
   829a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   829a2:	1e5a      	subs	r2, r3, #1
   829a4:	687b      	ldr	r3, [r7, #4]
   829a6:	645a      	str	r2, [r3, #68]	; 0x44
   829a8:	e000      	b.n	829ac <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   829aa:	e003      	b.n	829b4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   829ac:	687b      	ldr	r3, [r7, #4]
   829ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   829b0:	2b00      	cmp	r3, #0
   829b2:	dce6      	bgt.n	82982 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   829b4:	687b      	ldr	r3, [r7, #4]
   829b6:	f04f 32ff 	mov.w	r2, #4294967295
   829ba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   829bc:	4b05      	ldr	r3, [pc, #20]	; (829d4 <prvUnlockQueue+0xa4>)
   829be:	4798      	blx	r3
}
   829c0:	3708      	adds	r7, #8
   829c2:	46bd      	mov	sp, r7
   829c4:	bd80      	pop	{r7, pc}
   829c6:	bf00      	nop
   829c8:	00081bf5 	.word	0x00081bf5
   829cc:	000832ad 	.word	0x000832ad
   829d0:	00083455 	.word	0x00083455
   829d4:	00081c39 	.word	0x00081c39

000829d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   829d8:	b580      	push	{r7, lr}
   829da:	b084      	sub	sp, #16
   829dc:	af00      	add	r7, sp, #0
   829de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   829e0:	4b08      	ldr	r3, [pc, #32]	; (82a04 <prvIsQueueEmpty+0x2c>)
   829e2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   829e4:	687b      	ldr	r3, [r7, #4]
   829e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   829e8:	2b00      	cmp	r3, #0
   829ea:	d102      	bne.n	829f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   829ec:	2301      	movs	r3, #1
   829ee:	60fb      	str	r3, [r7, #12]
   829f0:	e001      	b.n	829f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   829f2:	2300      	movs	r3, #0
   829f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   829f6:	4b04      	ldr	r3, [pc, #16]	; (82a08 <prvIsQueueEmpty+0x30>)
   829f8:	4798      	blx	r3

	return xReturn;
   829fa:	68fb      	ldr	r3, [r7, #12]
}
   829fc:	4618      	mov	r0, r3
   829fe:	3710      	adds	r7, #16
   82a00:	46bd      	mov	sp, r7
   82a02:	bd80      	pop	{r7, pc}
   82a04:	00081bf5 	.word	0x00081bf5
   82a08:	00081c39 	.word	0x00081c39

00082a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   82a0c:	b580      	push	{r7, lr}
   82a0e:	b084      	sub	sp, #16
   82a10:	af00      	add	r7, sp, #0
   82a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   82a14:	4b09      	ldr	r3, [pc, #36]	; (82a3c <prvIsQueueFull+0x30>)
   82a16:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   82a18:	687b      	ldr	r3, [r7, #4]
   82a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82a1c:	687b      	ldr	r3, [r7, #4]
   82a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82a20:	429a      	cmp	r2, r3
   82a22:	d102      	bne.n	82a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   82a24:	2301      	movs	r3, #1
   82a26:	60fb      	str	r3, [r7, #12]
   82a28:	e001      	b.n	82a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   82a2a:	2300      	movs	r3, #0
   82a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   82a2e:	4b04      	ldr	r3, [pc, #16]	; (82a40 <prvIsQueueFull+0x34>)
   82a30:	4798      	blx	r3

	return xReturn;
   82a32:	68fb      	ldr	r3, [r7, #12]
}
   82a34:	4618      	mov	r0, r3
   82a36:	3710      	adds	r7, #16
   82a38:	46bd      	mov	sp, r7
   82a3a:	bd80      	pop	{r7, pc}
   82a3c:	00081bf5 	.word	0x00081bf5
   82a40:	00081c39 	.word	0x00081c39

00082a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   82a44:	b580      	push	{r7, lr}
   82a46:	b084      	sub	sp, #16
   82a48:	af00      	add	r7, sp, #0
   82a4a:	6078      	str	r0, [r7, #4]
   82a4c:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82a4e:	687b      	ldr	r3, [r7, #4]
   82a50:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82a52:	4b12      	ldr	r3, [pc, #72]	; (82a9c <vQueueWaitForMessageRestricted+0x58>)
   82a54:	4798      	blx	r3
   82a56:	68fb      	ldr	r3, [r7, #12]
   82a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
   82a5e:	d102      	bne.n	82a66 <vQueueWaitForMessageRestricted+0x22>
   82a60:	68fb      	ldr	r3, [r7, #12]
   82a62:	2200      	movs	r2, #0
   82a64:	645a      	str	r2, [r3, #68]	; 0x44
   82a66:	68fb      	ldr	r3, [r7, #12]
   82a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
   82a6e:	d102      	bne.n	82a76 <vQueueWaitForMessageRestricted+0x32>
   82a70:	68fb      	ldr	r3, [r7, #12]
   82a72:	2200      	movs	r2, #0
   82a74:	649a      	str	r2, [r3, #72]	; 0x48
   82a76:	4b0a      	ldr	r3, [pc, #40]	; (82aa0 <vQueueWaitForMessageRestricted+0x5c>)
   82a78:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   82a7a:	68fb      	ldr	r3, [r7, #12]
   82a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82a7e:	2b00      	cmp	r3, #0
   82a80:	d105      	bne.n	82a8e <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82a82:	68fb      	ldr	r3, [r7, #12]
   82a84:	3324      	adds	r3, #36	; 0x24
   82a86:	4618      	mov	r0, r3
   82a88:	6839      	ldr	r1, [r7, #0]
   82a8a:	4b06      	ldr	r3, [pc, #24]	; (82aa4 <vQueueWaitForMessageRestricted+0x60>)
   82a8c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   82a8e:	68f8      	ldr	r0, [r7, #12]
   82a90:	4b05      	ldr	r3, [pc, #20]	; (82aa8 <vQueueWaitForMessageRestricted+0x64>)
   82a92:	4798      	blx	r3
	}
   82a94:	3710      	adds	r7, #16
   82a96:	46bd      	mov	sp, r7
   82a98:	bd80      	pop	{r7, pc}
   82a9a:	bf00      	nop
   82a9c:	00081bf5 	.word	0x00081bf5
   82aa0:	00081c39 	.word	0x00081c39
   82aa4:	0008322d 	.word	0x0008322d
   82aa8:	00082931 	.word	0x00082931

00082aac <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   82aac:	b590      	push	{r4, r7, lr}
   82aae:	b08b      	sub	sp, #44	; 0x2c
   82ab0:	af02      	add	r7, sp, #8
   82ab2:	60f8      	str	r0, [r7, #12]
   82ab4:	60b9      	str	r1, [r7, #8]
   82ab6:	603b      	str	r3, [r7, #0]
   82ab8:	4613      	mov	r3, r2
   82aba:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   82abc:	68fb      	ldr	r3, [r7, #12]
   82abe:	2b00      	cmp	r3, #0
   82ac0:	d102      	bne.n	82ac8 <xTaskGenericCreate+0x1c>
   82ac2:	4b4b      	ldr	r3, [pc, #300]	; (82bf0 <xTaskGenericCreate+0x144>)
   82ac4:	4798      	blx	r3
   82ac6:	e7fe      	b.n	82ac6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82aca:	2b04      	cmp	r3, #4
   82acc:	d902      	bls.n	82ad4 <xTaskGenericCreate+0x28>
   82ace:	4b48      	ldr	r3, [pc, #288]	; (82bf0 <xTaskGenericCreate+0x144>)
   82ad0:	4798      	blx	r3
   82ad2:	e7fe      	b.n	82ad2 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   82ad4:	88fb      	ldrh	r3, [r7, #6]
   82ad6:	4618      	mov	r0, r3
   82ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   82ada:	4b46      	ldr	r3, [pc, #280]	; (82bf4 <xTaskGenericCreate+0x148>)
   82adc:	4798      	blx	r3
   82ade:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   82ae0:	69bb      	ldr	r3, [r7, #24]
   82ae2:	2b00      	cmp	r3, #0
   82ae4:	d06d      	beq.n	82bc2 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   82ae6:	69bb      	ldr	r3, [r7, #24]
   82ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82aea:	88fb      	ldrh	r3, [r7, #6]
   82aec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   82af0:	3b01      	subs	r3, #1
   82af2:	009b      	lsls	r3, r3, #2
   82af4:	4413      	add	r3, r2
   82af6:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   82af8:	697b      	ldr	r3, [r7, #20]
   82afa:	f023 0307 	bic.w	r3, r3, #7
   82afe:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82b00:	697b      	ldr	r3, [r7, #20]
   82b02:	f003 0307 	and.w	r3, r3, #7
   82b06:	2b00      	cmp	r3, #0
   82b08:	d002      	beq.n	82b10 <xTaskGenericCreate+0x64>
   82b0a:	4b39      	ldr	r3, [pc, #228]	; (82bf0 <xTaskGenericCreate+0x144>)
   82b0c:	4798      	blx	r3
   82b0e:	e7fe      	b.n	82b0e <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   82b10:	88fb      	ldrh	r3, [r7, #6]
   82b12:	9300      	str	r3, [sp, #0]
   82b14:	69b8      	ldr	r0, [r7, #24]
   82b16:	68b9      	ldr	r1, [r7, #8]
   82b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82b1c:	4c36      	ldr	r4, [pc, #216]	; (82bf8 <xTaskGenericCreate+0x14c>)
   82b1e:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82b20:	6978      	ldr	r0, [r7, #20]
   82b22:	68f9      	ldr	r1, [r7, #12]
   82b24:	683a      	ldr	r2, [r7, #0]
   82b26:	4b35      	ldr	r3, [pc, #212]	; (82bfc <xTaskGenericCreate+0x150>)
   82b28:	4798      	blx	r3
   82b2a:	4602      	mov	r2, r0
   82b2c:	69bb      	ldr	r3, [r7, #24]
   82b2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   82b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82b32:	2b00      	cmp	r3, #0
   82b34:	d002      	beq.n	82b3c <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   82b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82b38:	69ba      	ldr	r2, [r7, #24]
   82b3a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   82b3c:	4b30      	ldr	r3, [pc, #192]	; (82c00 <xTaskGenericCreate+0x154>)
   82b3e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   82b40:	4b30      	ldr	r3, [pc, #192]	; (82c04 <xTaskGenericCreate+0x158>)
   82b42:	681b      	ldr	r3, [r3, #0]
   82b44:	1c5a      	adds	r2, r3, #1
   82b46:	4b2f      	ldr	r3, [pc, #188]	; (82c04 <xTaskGenericCreate+0x158>)
   82b48:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82b4a:	4b2f      	ldr	r3, [pc, #188]	; (82c08 <xTaskGenericCreate+0x15c>)
   82b4c:	681b      	ldr	r3, [r3, #0]
   82b4e:	2b00      	cmp	r3, #0
   82b50:	d109      	bne.n	82b66 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   82b52:	4b2d      	ldr	r3, [pc, #180]	; (82c08 <xTaskGenericCreate+0x15c>)
   82b54:	69ba      	ldr	r2, [r7, #24]
   82b56:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   82b58:	4b2a      	ldr	r3, [pc, #168]	; (82c04 <xTaskGenericCreate+0x158>)
   82b5a:	681b      	ldr	r3, [r3, #0]
   82b5c:	2b01      	cmp	r3, #1
   82b5e:	d10f      	bne.n	82b80 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   82b60:	4b2a      	ldr	r3, [pc, #168]	; (82c0c <xTaskGenericCreate+0x160>)
   82b62:	4798      	blx	r3
   82b64:	e00c      	b.n	82b80 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82b66:	4b2a      	ldr	r3, [pc, #168]	; (82c10 <xTaskGenericCreate+0x164>)
   82b68:	681b      	ldr	r3, [r3, #0]
   82b6a:	2b00      	cmp	r3, #0
   82b6c:	d108      	bne.n	82b80 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82b6e:	4b26      	ldr	r3, [pc, #152]	; (82c08 <xTaskGenericCreate+0x15c>)
   82b70:	681b      	ldr	r3, [r3, #0]
   82b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82b76:	429a      	cmp	r2, r3
   82b78:	d802      	bhi.n	82b80 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   82b7a:	4b23      	ldr	r3, [pc, #140]	; (82c08 <xTaskGenericCreate+0x15c>)
   82b7c:	69ba      	ldr	r2, [r7, #24]
   82b7e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   82b80:	4b24      	ldr	r3, [pc, #144]	; (82c14 <xTaskGenericCreate+0x168>)
   82b82:	681b      	ldr	r3, [r3, #0]
   82b84:	1c5a      	adds	r2, r3, #1
   82b86:	4b23      	ldr	r3, [pc, #140]	; (82c14 <xTaskGenericCreate+0x168>)
   82b88:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   82b8a:	69bb      	ldr	r3, [r7, #24]
   82b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82b8e:	2201      	movs	r2, #1
   82b90:	409a      	lsls	r2, r3
   82b92:	4b21      	ldr	r3, [pc, #132]	; (82c18 <xTaskGenericCreate+0x16c>)
   82b94:	681b      	ldr	r3, [r3, #0]
   82b96:	431a      	orrs	r2, r3
   82b98:	4b1f      	ldr	r3, [pc, #124]	; (82c18 <xTaskGenericCreate+0x16c>)
   82b9a:	601a      	str	r2, [r3, #0]
   82b9c:	69bb      	ldr	r3, [r7, #24]
   82b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82ba0:	4613      	mov	r3, r2
   82ba2:	009b      	lsls	r3, r3, #2
   82ba4:	4413      	add	r3, r2
   82ba6:	009b      	lsls	r3, r3, #2
   82ba8:	4a1c      	ldr	r2, [pc, #112]	; (82c1c <xTaskGenericCreate+0x170>)
   82baa:	441a      	add	r2, r3
   82bac:	69bb      	ldr	r3, [r7, #24]
   82bae:	3304      	adds	r3, #4
   82bb0:	4610      	mov	r0, r2
   82bb2:	4619      	mov	r1, r3
   82bb4:	4b1a      	ldr	r3, [pc, #104]	; (82c20 <xTaskGenericCreate+0x174>)
   82bb6:	4798      	blx	r3

			xReturn = pdPASS;
   82bb8:	2301      	movs	r3, #1
   82bba:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   82bbc:	4b19      	ldr	r3, [pc, #100]	; (82c24 <xTaskGenericCreate+0x178>)
   82bbe:	4798      	blx	r3
   82bc0:	e002      	b.n	82bc8 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82bc2:	f04f 33ff 	mov.w	r3, #4294967295
   82bc6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   82bc8:	69fb      	ldr	r3, [r7, #28]
   82bca:	2b01      	cmp	r3, #1
   82bcc:	d10b      	bne.n	82be6 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   82bce:	4b10      	ldr	r3, [pc, #64]	; (82c10 <xTaskGenericCreate+0x164>)
   82bd0:	681b      	ldr	r3, [r3, #0]
   82bd2:	2b00      	cmp	r3, #0
   82bd4:	d007      	beq.n	82be6 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82bd6:	4b0c      	ldr	r3, [pc, #48]	; (82c08 <xTaskGenericCreate+0x15c>)
   82bd8:	681b      	ldr	r3, [r3, #0]
   82bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82bde:	429a      	cmp	r2, r3
   82be0:	d201      	bcs.n	82be6 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   82be2:	4b11      	ldr	r3, [pc, #68]	; (82c28 <xTaskGenericCreate+0x17c>)
   82be4:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   82be6:	69fb      	ldr	r3, [r7, #28]
}
   82be8:	4618      	mov	r0, r3
   82bea:	3724      	adds	r7, #36	; 0x24
   82bec:	46bd      	mov	sp, r7
   82bee:	bd90      	pop	{r4, r7, pc}
   82bf0:	00081c71 	.word	0x00081c71
   82bf4:	000836a9 	.word	0x000836a9
   82bf8:	00083495 	.word	0x00083495
   82bfc:	00081a4d 	.word	0x00081a4d
   82c00:	00081bf5 	.word	0x00081bf5
   82c04:	2007a5bc 	.word	0x2007a5bc
   82c08:	2007a4e4 	.word	0x2007a4e4
   82c0c:	0008352d 	.word	0x0008352d
   82c10:	2007a5c8 	.word	0x2007a5c8
   82c14:	2007a5d8 	.word	0x2007a5d8
   82c18:	2007a5c4 	.word	0x2007a5c4
   82c1c:	2007a4e8 	.word	0x2007a4e8
   82c20:	00081941 	.word	0x00081941
   82c24:	00081c39 	.word	0x00081c39
   82c28:	00081bd5 	.word	0x00081bd5

00082c2c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   82c2c:	b580      	push	{r7, lr}
   82c2e:	b086      	sub	sp, #24
   82c30:	af00      	add	r7, sp, #0
   82c32:	6078      	str	r0, [r7, #4]
   82c34:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   82c36:	2300      	movs	r3, #0
   82c38:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   82c3a:	687b      	ldr	r3, [r7, #4]
   82c3c:	2b00      	cmp	r3, #0
   82c3e:	d102      	bne.n	82c46 <vTaskDelayUntil+0x1a>
   82c40:	4b2f      	ldr	r3, [pc, #188]	; (82d00 <vTaskDelayUntil+0xd4>)
   82c42:	4798      	blx	r3
   82c44:	e7fe      	b.n	82c44 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   82c46:	683b      	ldr	r3, [r7, #0]
   82c48:	2b00      	cmp	r3, #0
   82c4a:	d102      	bne.n	82c52 <vTaskDelayUntil+0x26>
   82c4c:	4b2c      	ldr	r3, [pc, #176]	; (82d00 <vTaskDelayUntil+0xd4>)
   82c4e:	4798      	blx	r3
   82c50:	e7fe      	b.n	82c50 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   82c52:	4b2c      	ldr	r3, [pc, #176]	; (82d04 <vTaskDelayUntil+0xd8>)
   82c54:	681b      	ldr	r3, [r3, #0]
   82c56:	2b00      	cmp	r3, #0
   82c58:	d002      	beq.n	82c60 <vTaskDelayUntil+0x34>
   82c5a:	4b29      	ldr	r3, [pc, #164]	; (82d00 <vTaskDelayUntil+0xd4>)
   82c5c:	4798      	blx	r3
   82c5e:	e7fe      	b.n	82c5e <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   82c60:	4b29      	ldr	r3, [pc, #164]	; (82d08 <vTaskDelayUntil+0xdc>)
   82c62:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   82c64:	4b29      	ldr	r3, [pc, #164]	; (82d0c <vTaskDelayUntil+0xe0>)
   82c66:	681b      	ldr	r3, [r3, #0]
   82c68:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82c6a:	687b      	ldr	r3, [r7, #4]
   82c6c:	681a      	ldr	r2, [r3, #0]
   82c6e:	683b      	ldr	r3, [r7, #0]
   82c70:	4413      	add	r3, r2
   82c72:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   82c74:	687b      	ldr	r3, [r7, #4]
   82c76:	681a      	ldr	r2, [r3, #0]
   82c78:	693b      	ldr	r3, [r7, #16]
   82c7a:	429a      	cmp	r2, r3
   82c7c:	d90b      	bls.n	82c96 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   82c7e:	687b      	ldr	r3, [r7, #4]
   82c80:	681a      	ldr	r2, [r3, #0]
   82c82:	68fb      	ldr	r3, [r7, #12]
   82c84:	429a      	cmp	r2, r3
   82c86:	d911      	bls.n	82cac <vTaskDelayUntil+0x80>
   82c88:	68fa      	ldr	r2, [r7, #12]
   82c8a:	693b      	ldr	r3, [r7, #16]
   82c8c:	429a      	cmp	r2, r3
   82c8e:	d90d      	bls.n	82cac <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   82c90:	2301      	movs	r3, #1
   82c92:	617b      	str	r3, [r7, #20]
   82c94:	e00a      	b.n	82cac <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   82c96:	687b      	ldr	r3, [r7, #4]
   82c98:	681a      	ldr	r2, [r3, #0]
   82c9a:	68fb      	ldr	r3, [r7, #12]
   82c9c:	429a      	cmp	r2, r3
   82c9e:	d803      	bhi.n	82ca8 <vTaskDelayUntil+0x7c>
   82ca0:	68fa      	ldr	r2, [r7, #12]
   82ca2:	693b      	ldr	r3, [r7, #16]
   82ca4:	429a      	cmp	r2, r3
   82ca6:	d901      	bls.n	82cac <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   82ca8:	2301      	movs	r3, #1
   82caa:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82cac:	687b      	ldr	r3, [r7, #4]
   82cae:	68fa      	ldr	r2, [r7, #12]
   82cb0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   82cb2:	697b      	ldr	r3, [r7, #20]
   82cb4:	2b00      	cmp	r3, #0
   82cb6:	d017      	beq.n	82ce8 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82cb8:	4b15      	ldr	r3, [pc, #84]	; (82d10 <vTaskDelayUntil+0xe4>)
   82cba:	681b      	ldr	r3, [r3, #0]
   82cbc:	3304      	adds	r3, #4
   82cbe:	4618      	mov	r0, r3
   82cc0:	4b14      	ldr	r3, [pc, #80]	; (82d14 <vTaskDelayUntil+0xe8>)
   82cc2:	4798      	blx	r3
   82cc4:	4603      	mov	r3, r0
   82cc6:	2b00      	cmp	r3, #0
   82cc8:	d10b      	bne.n	82ce2 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   82cca:	4b11      	ldr	r3, [pc, #68]	; (82d10 <vTaskDelayUntil+0xe4>)
   82ccc:	681b      	ldr	r3, [r3, #0]
   82cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82cd0:	2201      	movs	r2, #1
   82cd2:	fa02 f303 	lsl.w	r3, r2, r3
   82cd6:	43da      	mvns	r2, r3
   82cd8:	4b0f      	ldr	r3, [pc, #60]	; (82d18 <vTaskDelayUntil+0xec>)
   82cda:	681b      	ldr	r3, [r3, #0]
   82cdc:	401a      	ands	r2, r3
   82cde:	4b0e      	ldr	r3, [pc, #56]	; (82d18 <vTaskDelayUntil+0xec>)
   82ce0:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82ce2:	68f8      	ldr	r0, [r7, #12]
   82ce4:	4b0d      	ldr	r3, [pc, #52]	; (82d1c <vTaskDelayUntil+0xf0>)
   82ce6:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82ce8:	4b0d      	ldr	r3, [pc, #52]	; (82d20 <vTaskDelayUntil+0xf4>)
   82cea:	4798      	blx	r3
   82cec:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82cee:	68bb      	ldr	r3, [r7, #8]
   82cf0:	2b00      	cmp	r3, #0
   82cf2:	d101      	bne.n	82cf8 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   82cf4:	4b0b      	ldr	r3, [pc, #44]	; (82d24 <vTaskDelayUntil+0xf8>)
   82cf6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   82cf8:	3718      	adds	r7, #24
   82cfa:	46bd      	mov	sp, r7
   82cfc:	bd80      	pop	{r7, pc}
   82cfe:	bf00      	nop
   82d00:	00081c71 	.word	0x00081c71
   82d04:	2007a5dc 	.word	0x2007a5dc
   82d08:	00082da9 	.word	0x00082da9
   82d0c:	2007a5c0 	.word	0x2007a5c0
   82d10:	2007a4e4 	.word	0x2007a4e4
   82d14:	000819f9 	.word	0x000819f9
   82d18:	2007a5c4 	.word	0x2007a5c4
   82d1c:	00083639 	.word	0x00083639
   82d20:	00082dc5 	.word	0x00082dc5
   82d24:	00081bd5 	.word	0x00081bd5

00082d28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   82d28:	b590      	push	{r4, r7, lr}
   82d2a:	b087      	sub	sp, #28
   82d2c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   82d2e:	2300      	movs	r3, #0
   82d30:	9300      	str	r3, [sp, #0]
   82d32:	2300      	movs	r3, #0
   82d34:	9301      	str	r3, [sp, #4]
   82d36:	2300      	movs	r3, #0
   82d38:	9302      	str	r3, [sp, #8]
   82d3a:	2300      	movs	r3, #0
   82d3c:	9303      	str	r3, [sp, #12]
   82d3e:	4812      	ldr	r0, [pc, #72]	; (82d88 <vTaskStartScheduler+0x60>)
   82d40:	4912      	ldr	r1, [pc, #72]	; (82d8c <vTaskStartScheduler+0x64>)
   82d42:	2282      	movs	r2, #130	; 0x82
   82d44:	2300      	movs	r3, #0
   82d46:	4c12      	ldr	r4, [pc, #72]	; (82d90 <vTaskStartScheduler+0x68>)
   82d48:	47a0      	blx	r4
   82d4a:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   82d4c:	687b      	ldr	r3, [r7, #4]
   82d4e:	2b01      	cmp	r3, #1
   82d50:	d102      	bne.n	82d58 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   82d52:	4b10      	ldr	r3, [pc, #64]	; (82d94 <vTaskStartScheduler+0x6c>)
   82d54:	4798      	blx	r3
   82d56:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   82d58:	687b      	ldr	r3, [r7, #4]
   82d5a:	2b01      	cmp	r3, #1
   82d5c:	d10a      	bne.n	82d74 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   82d5e:	4b0e      	ldr	r3, [pc, #56]	; (82d98 <vTaskStartScheduler+0x70>)
   82d60:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   82d62:	4b0e      	ldr	r3, [pc, #56]	; (82d9c <vTaskStartScheduler+0x74>)
   82d64:	2201      	movs	r2, #1
   82d66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   82d68:	4b0d      	ldr	r3, [pc, #52]	; (82da0 <vTaskStartScheduler+0x78>)
   82d6a:	2200      	movs	r2, #0
   82d6c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82d6e:	4b0d      	ldr	r3, [pc, #52]	; (82da4 <vTaskStartScheduler+0x7c>)
   82d70:	4798      	blx	r3
   82d72:	e005      	b.n	82d80 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   82d74:	687b      	ldr	r3, [r7, #4]
   82d76:	2b00      	cmp	r3, #0
   82d78:	d102      	bne.n	82d80 <vTaskStartScheduler+0x58>
   82d7a:	4b07      	ldr	r3, [pc, #28]	; (82d98 <vTaskStartScheduler+0x70>)
   82d7c:	4798      	blx	r3
   82d7e:	e7fe      	b.n	82d7e <vTaskStartScheduler+0x56>
	}
}
   82d80:	370c      	adds	r7, #12
   82d82:	46bd      	mov	sp, r7
   82d84:	bd90      	pop	{r4, r7, pc}
   82d86:	bf00      	nop
   82d88:	0008346d 	.word	0x0008346d
   82d8c:	00084e14 	.word	0x00084e14
   82d90:	00082aad 	.word	0x00082aad
   82d94:	000839c1 	.word	0x000839c1
   82d98:	00081c71 	.word	0x00081c71
   82d9c:	2007a5c8 	.word	0x2007a5c8
   82da0:	2007a5c0 	.word	0x2007a5c0
   82da4:	00081b0d 	.word	0x00081b0d

00082da8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   82da8:	b480      	push	{r7}
   82daa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   82dac:	4b04      	ldr	r3, [pc, #16]	; (82dc0 <vTaskSuspendAll+0x18>)
   82dae:	681b      	ldr	r3, [r3, #0]
   82db0:	1c5a      	adds	r2, r3, #1
   82db2:	4b03      	ldr	r3, [pc, #12]	; (82dc0 <vTaskSuspendAll+0x18>)
   82db4:	601a      	str	r2, [r3, #0]
}
   82db6:	46bd      	mov	sp, r7
   82db8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dbc:	4770      	bx	lr
   82dbe:	bf00      	nop
   82dc0:	2007a5dc 	.word	0x2007a5dc

00082dc4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   82dc4:	b580      	push	{r7, lr}
   82dc6:	b082      	sub	sp, #8
   82dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   82dca:	2300      	movs	r3, #0
   82dcc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82dce:	4b37      	ldr	r3, [pc, #220]	; (82eac <xTaskResumeAll+0xe8>)
   82dd0:	681b      	ldr	r3, [r3, #0]
   82dd2:	2b00      	cmp	r3, #0
   82dd4:	d102      	bne.n	82ddc <xTaskResumeAll+0x18>
   82dd6:	4b36      	ldr	r3, [pc, #216]	; (82eb0 <xTaskResumeAll+0xec>)
   82dd8:	4798      	blx	r3
   82dda:	e7fe      	b.n	82dda <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   82ddc:	4b35      	ldr	r3, [pc, #212]	; (82eb4 <xTaskResumeAll+0xf0>)
   82dde:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   82de0:	4b32      	ldr	r3, [pc, #200]	; (82eac <xTaskResumeAll+0xe8>)
   82de2:	681b      	ldr	r3, [r3, #0]
   82de4:	1e5a      	subs	r2, r3, #1
   82de6:	4b31      	ldr	r3, [pc, #196]	; (82eac <xTaskResumeAll+0xe8>)
   82de8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82dea:	4b30      	ldr	r3, [pc, #192]	; (82eac <xTaskResumeAll+0xe8>)
   82dec:	681b      	ldr	r3, [r3, #0]
   82dee:	2b00      	cmp	r3, #0
   82df0:	d155      	bne.n	82e9e <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   82df2:	4b31      	ldr	r3, [pc, #196]	; (82eb8 <xTaskResumeAll+0xf4>)
   82df4:	681b      	ldr	r3, [r3, #0]
   82df6:	2b00      	cmp	r3, #0
   82df8:	d051      	beq.n	82e9e <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   82dfa:	e02e      	b.n	82e5a <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   82dfc:	4b2f      	ldr	r3, [pc, #188]	; (82ebc <xTaskResumeAll+0xf8>)
   82dfe:	68db      	ldr	r3, [r3, #12]
   82e00:	68db      	ldr	r3, [r3, #12]
   82e02:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82e04:	683b      	ldr	r3, [r7, #0]
   82e06:	3318      	adds	r3, #24
   82e08:	4618      	mov	r0, r3
   82e0a:	4b2d      	ldr	r3, [pc, #180]	; (82ec0 <xTaskResumeAll+0xfc>)
   82e0c:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82e0e:	683b      	ldr	r3, [r7, #0]
   82e10:	3304      	adds	r3, #4
   82e12:	4618      	mov	r0, r3
   82e14:	4b2a      	ldr	r3, [pc, #168]	; (82ec0 <xTaskResumeAll+0xfc>)
   82e16:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   82e18:	683b      	ldr	r3, [r7, #0]
   82e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82e1c:	2201      	movs	r2, #1
   82e1e:	409a      	lsls	r2, r3
   82e20:	4b28      	ldr	r3, [pc, #160]	; (82ec4 <xTaskResumeAll+0x100>)
   82e22:	681b      	ldr	r3, [r3, #0]
   82e24:	431a      	orrs	r2, r3
   82e26:	4b27      	ldr	r3, [pc, #156]	; (82ec4 <xTaskResumeAll+0x100>)
   82e28:	601a      	str	r2, [r3, #0]
   82e2a:	683b      	ldr	r3, [r7, #0]
   82e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e2e:	4613      	mov	r3, r2
   82e30:	009b      	lsls	r3, r3, #2
   82e32:	4413      	add	r3, r2
   82e34:	009b      	lsls	r3, r3, #2
   82e36:	4a24      	ldr	r2, [pc, #144]	; (82ec8 <xTaskResumeAll+0x104>)
   82e38:	441a      	add	r2, r3
   82e3a:	683b      	ldr	r3, [r7, #0]
   82e3c:	3304      	adds	r3, #4
   82e3e:	4610      	mov	r0, r2
   82e40:	4619      	mov	r1, r3
   82e42:	4b22      	ldr	r3, [pc, #136]	; (82ecc <xTaskResumeAll+0x108>)
   82e44:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82e46:	683b      	ldr	r3, [r7, #0]
   82e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e4a:	4b21      	ldr	r3, [pc, #132]	; (82ed0 <xTaskResumeAll+0x10c>)
   82e4c:	681b      	ldr	r3, [r3, #0]
   82e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82e50:	429a      	cmp	r2, r3
   82e52:	d302      	bcc.n	82e5a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   82e54:	4b1f      	ldr	r3, [pc, #124]	; (82ed4 <xTaskResumeAll+0x110>)
   82e56:	2201      	movs	r2, #1
   82e58:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   82e5a:	4b18      	ldr	r3, [pc, #96]	; (82ebc <xTaskResumeAll+0xf8>)
   82e5c:	681b      	ldr	r3, [r3, #0]
   82e5e:	2b00      	cmp	r3, #0
   82e60:	d1cc      	bne.n	82dfc <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   82e62:	4b1d      	ldr	r3, [pc, #116]	; (82ed8 <xTaskResumeAll+0x114>)
   82e64:	681b      	ldr	r3, [r3, #0]
   82e66:	2b00      	cmp	r3, #0
   82e68:	d011      	beq.n	82e8e <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   82e6a:	e00c      	b.n	82e86 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   82e6c:	4b1b      	ldr	r3, [pc, #108]	; (82edc <xTaskResumeAll+0x118>)
   82e6e:	4798      	blx	r3
   82e70:	4603      	mov	r3, r0
   82e72:	2b00      	cmp	r3, #0
   82e74:	d002      	beq.n	82e7c <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   82e76:	4b17      	ldr	r3, [pc, #92]	; (82ed4 <xTaskResumeAll+0x110>)
   82e78:	2201      	movs	r2, #1
   82e7a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   82e7c:	4b16      	ldr	r3, [pc, #88]	; (82ed8 <xTaskResumeAll+0x114>)
   82e7e:	681b      	ldr	r3, [r3, #0]
   82e80:	1e5a      	subs	r2, r3, #1
   82e82:	4b15      	ldr	r3, [pc, #84]	; (82ed8 <xTaskResumeAll+0x114>)
   82e84:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   82e86:	4b14      	ldr	r3, [pc, #80]	; (82ed8 <xTaskResumeAll+0x114>)
   82e88:	681b      	ldr	r3, [r3, #0]
   82e8a:	2b00      	cmp	r3, #0
   82e8c:	d1ee      	bne.n	82e6c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   82e8e:	4b11      	ldr	r3, [pc, #68]	; (82ed4 <xTaskResumeAll+0x110>)
   82e90:	681b      	ldr	r3, [r3, #0]
   82e92:	2b01      	cmp	r3, #1
   82e94:	d103      	bne.n	82e9e <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   82e96:	2301      	movs	r3, #1
   82e98:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   82e9a:	4b11      	ldr	r3, [pc, #68]	; (82ee0 <xTaskResumeAll+0x11c>)
   82e9c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   82e9e:	4b11      	ldr	r3, [pc, #68]	; (82ee4 <xTaskResumeAll+0x120>)
   82ea0:	4798      	blx	r3

	return xAlreadyYielded;
   82ea2:	687b      	ldr	r3, [r7, #4]
}
   82ea4:	4618      	mov	r0, r3
   82ea6:	3708      	adds	r7, #8
   82ea8:	46bd      	mov	sp, r7
   82eaa:	bd80      	pop	{r7, pc}
   82eac:	2007a5dc 	.word	0x2007a5dc
   82eb0:	00081c71 	.word	0x00081c71
   82eb4:	00081bf5 	.word	0x00081bf5
   82eb8:	2007a5bc 	.word	0x2007a5bc
   82ebc:	2007a57c 	.word	0x2007a57c
   82ec0:	000819f9 	.word	0x000819f9
   82ec4:	2007a5c4 	.word	0x2007a5c4
   82ec8:	2007a4e8 	.word	0x2007a4e8
   82ecc:	00081941 	.word	0x00081941
   82ed0:	2007a4e4 	.word	0x2007a4e4
   82ed4:	2007a5d0 	.word	0x2007a5d0
   82ed8:	2007a5cc 	.word	0x2007a5cc
   82edc:	00082f15 	.word	0x00082f15
   82ee0:	00081bd5 	.word	0x00081bd5
   82ee4:	00081c39 	.word	0x00081c39

00082ee8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   82ee8:	b580      	push	{r7, lr}
   82eea:	b082      	sub	sp, #8
   82eec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   82eee:	4b06      	ldr	r3, [pc, #24]	; (82f08 <xTaskGetTickCount+0x20>)
   82ef0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82ef2:	4b06      	ldr	r3, [pc, #24]	; (82f0c <xTaskGetTickCount+0x24>)
   82ef4:	681b      	ldr	r3, [r3, #0]
   82ef6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   82ef8:	4b05      	ldr	r3, [pc, #20]	; (82f10 <xTaskGetTickCount+0x28>)
   82efa:	4798      	blx	r3

	return xTicks;
   82efc:	687b      	ldr	r3, [r7, #4]
}
   82efe:	4618      	mov	r0, r3
   82f00:	3708      	adds	r7, #8
   82f02:	46bd      	mov	sp, r7
   82f04:	bd80      	pop	{r7, pc}
   82f06:	bf00      	nop
   82f08:	00081bf5 	.word	0x00081bf5
   82f0c:	2007a5c0 	.word	0x2007a5c0
   82f10:	00081c39 	.word	0x00081c39

00082f14 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   82f14:	b580      	push	{r7, lr}
   82f16:	b086      	sub	sp, #24
   82f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   82f1a:	2300      	movs	r3, #0
   82f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82f1e:	4b4d      	ldr	r3, [pc, #308]	; (83054 <xTaskIncrementTick+0x140>)
   82f20:	681b      	ldr	r3, [r3, #0]
   82f22:	2b00      	cmp	r3, #0
   82f24:	f040 8086 	bne.w	83034 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   82f28:	4b4b      	ldr	r3, [pc, #300]	; (83058 <xTaskIncrementTick+0x144>)
   82f2a:	681b      	ldr	r3, [r3, #0]
   82f2c:	1c5a      	adds	r2, r3, #1
   82f2e:	4b4a      	ldr	r3, [pc, #296]	; (83058 <xTaskIncrementTick+0x144>)
   82f30:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   82f32:	4b49      	ldr	r3, [pc, #292]	; (83058 <xTaskIncrementTick+0x144>)
   82f34:	681b      	ldr	r3, [r3, #0]
   82f36:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   82f38:	693b      	ldr	r3, [r7, #16]
   82f3a:	2b00      	cmp	r3, #0
   82f3c:	d118      	bne.n	82f70 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   82f3e:	4b47      	ldr	r3, [pc, #284]	; (8305c <xTaskIncrementTick+0x148>)
   82f40:	681b      	ldr	r3, [r3, #0]
   82f42:	681b      	ldr	r3, [r3, #0]
   82f44:	2b00      	cmp	r3, #0
   82f46:	d002      	beq.n	82f4e <xTaskIncrementTick+0x3a>
   82f48:	4b45      	ldr	r3, [pc, #276]	; (83060 <xTaskIncrementTick+0x14c>)
   82f4a:	4798      	blx	r3
   82f4c:	e7fe      	b.n	82f4c <xTaskIncrementTick+0x38>
   82f4e:	4b43      	ldr	r3, [pc, #268]	; (8305c <xTaskIncrementTick+0x148>)
   82f50:	681b      	ldr	r3, [r3, #0]
   82f52:	60fb      	str	r3, [r7, #12]
   82f54:	4b43      	ldr	r3, [pc, #268]	; (83064 <xTaskIncrementTick+0x150>)
   82f56:	681a      	ldr	r2, [r3, #0]
   82f58:	4b40      	ldr	r3, [pc, #256]	; (8305c <xTaskIncrementTick+0x148>)
   82f5a:	601a      	str	r2, [r3, #0]
   82f5c:	4b41      	ldr	r3, [pc, #260]	; (83064 <xTaskIncrementTick+0x150>)
   82f5e:	68fa      	ldr	r2, [r7, #12]
   82f60:	601a      	str	r2, [r3, #0]
   82f62:	4b41      	ldr	r3, [pc, #260]	; (83068 <xTaskIncrementTick+0x154>)
   82f64:	681b      	ldr	r3, [r3, #0]
   82f66:	1c5a      	adds	r2, r3, #1
   82f68:	4b3f      	ldr	r3, [pc, #252]	; (83068 <xTaskIncrementTick+0x154>)
   82f6a:	601a      	str	r2, [r3, #0]
   82f6c:	4b3f      	ldr	r3, [pc, #252]	; (8306c <xTaskIncrementTick+0x158>)
   82f6e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   82f70:	4b3f      	ldr	r3, [pc, #252]	; (83070 <xTaskIncrementTick+0x15c>)
   82f72:	681b      	ldr	r3, [r3, #0]
   82f74:	693a      	ldr	r2, [r7, #16]
   82f76:	429a      	cmp	r2, r3
   82f78:	d34d      	bcc.n	83016 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82f7a:	4b38      	ldr	r3, [pc, #224]	; (8305c <xTaskIncrementTick+0x148>)
   82f7c:	681b      	ldr	r3, [r3, #0]
   82f7e:	681b      	ldr	r3, [r3, #0]
   82f80:	2b00      	cmp	r3, #0
   82f82:	d101      	bne.n	82f88 <xTaskIncrementTick+0x74>
   82f84:	2301      	movs	r3, #1
   82f86:	e000      	b.n	82f8a <xTaskIncrementTick+0x76>
   82f88:	2300      	movs	r3, #0
   82f8a:	2b00      	cmp	r3, #0
   82f8c:	d004      	beq.n	82f98 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   82f8e:	4b38      	ldr	r3, [pc, #224]	; (83070 <xTaskIncrementTick+0x15c>)
   82f90:	f04f 32ff 	mov.w	r2, #4294967295
   82f94:	601a      	str	r2, [r3, #0]
						break;
   82f96:	e03e      	b.n	83016 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82f98:	4b30      	ldr	r3, [pc, #192]	; (8305c <xTaskIncrementTick+0x148>)
   82f9a:	681b      	ldr	r3, [r3, #0]
   82f9c:	68db      	ldr	r3, [r3, #12]
   82f9e:	68db      	ldr	r3, [r3, #12]
   82fa0:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82fa2:	68bb      	ldr	r3, [r7, #8]
   82fa4:	685b      	ldr	r3, [r3, #4]
   82fa6:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   82fa8:	693a      	ldr	r2, [r7, #16]
   82faa:	687b      	ldr	r3, [r7, #4]
   82fac:	429a      	cmp	r2, r3
   82fae:	d203      	bcs.n	82fb8 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   82fb0:	4b2f      	ldr	r3, [pc, #188]	; (83070 <xTaskIncrementTick+0x15c>)
   82fb2:	687a      	ldr	r2, [r7, #4]
   82fb4:	601a      	str	r2, [r3, #0]
							break;
   82fb6:	e02e      	b.n	83016 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82fb8:	68bb      	ldr	r3, [r7, #8]
   82fba:	3304      	adds	r3, #4
   82fbc:	4618      	mov	r0, r3
   82fbe:	4b2d      	ldr	r3, [pc, #180]	; (83074 <xTaskIncrementTick+0x160>)
   82fc0:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   82fc2:	68bb      	ldr	r3, [r7, #8]
   82fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82fc6:	2b00      	cmp	r3, #0
   82fc8:	d004      	beq.n	82fd4 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82fca:	68bb      	ldr	r3, [r7, #8]
   82fcc:	3318      	adds	r3, #24
   82fce:	4618      	mov	r0, r3
   82fd0:	4b28      	ldr	r3, [pc, #160]	; (83074 <xTaskIncrementTick+0x160>)
   82fd2:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   82fd4:	68bb      	ldr	r3, [r7, #8]
   82fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82fd8:	2201      	movs	r2, #1
   82fda:	409a      	lsls	r2, r3
   82fdc:	4b26      	ldr	r3, [pc, #152]	; (83078 <xTaskIncrementTick+0x164>)
   82fde:	681b      	ldr	r3, [r3, #0]
   82fe0:	431a      	orrs	r2, r3
   82fe2:	4b25      	ldr	r3, [pc, #148]	; (83078 <xTaskIncrementTick+0x164>)
   82fe4:	601a      	str	r2, [r3, #0]
   82fe6:	68bb      	ldr	r3, [r7, #8]
   82fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82fea:	4613      	mov	r3, r2
   82fec:	009b      	lsls	r3, r3, #2
   82fee:	4413      	add	r3, r2
   82ff0:	009b      	lsls	r3, r3, #2
   82ff2:	4a22      	ldr	r2, [pc, #136]	; (8307c <xTaskIncrementTick+0x168>)
   82ff4:	441a      	add	r2, r3
   82ff6:	68bb      	ldr	r3, [r7, #8]
   82ff8:	3304      	adds	r3, #4
   82ffa:	4610      	mov	r0, r2
   82ffc:	4619      	mov	r1, r3
   82ffe:	4b20      	ldr	r3, [pc, #128]	; (83080 <xTaskIncrementTick+0x16c>)
   83000:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83002:	68bb      	ldr	r3, [r7, #8]
   83004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83006:	4b1f      	ldr	r3, [pc, #124]	; (83084 <xTaskIncrementTick+0x170>)
   83008:	681b      	ldr	r3, [r3, #0]
   8300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8300c:	429a      	cmp	r2, r3
   8300e:	d301      	bcc.n	83014 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   83010:	2301      	movs	r3, #1
   83012:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   83014:	e7b1      	b.n	82f7a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   83016:	4b1b      	ldr	r3, [pc, #108]	; (83084 <xTaskIncrementTick+0x170>)
   83018:	681b      	ldr	r3, [r3, #0]
   8301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8301c:	4917      	ldr	r1, [pc, #92]	; (8307c <xTaskIncrementTick+0x168>)
   8301e:	4613      	mov	r3, r2
   83020:	009b      	lsls	r3, r3, #2
   83022:	4413      	add	r3, r2
   83024:	009b      	lsls	r3, r3, #2
   83026:	440b      	add	r3, r1
   83028:	681b      	ldr	r3, [r3, #0]
   8302a:	2b01      	cmp	r3, #1
   8302c:	d907      	bls.n	8303e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   8302e:	2301      	movs	r3, #1
   83030:	617b      	str	r3, [r7, #20]
   83032:	e004      	b.n	8303e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   83034:	4b14      	ldr	r3, [pc, #80]	; (83088 <xTaskIncrementTick+0x174>)
   83036:	681b      	ldr	r3, [r3, #0]
   83038:	1c5a      	adds	r2, r3, #1
   8303a:	4b13      	ldr	r3, [pc, #76]	; (83088 <xTaskIncrementTick+0x174>)
   8303c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   8303e:	4b13      	ldr	r3, [pc, #76]	; (8308c <xTaskIncrementTick+0x178>)
   83040:	681b      	ldr	r3, [r3, #0]
   83042:	2b00      	cmp	r3, #0
   83044:	d001      	beq.n	8304a <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   83046:	2301      	movs	r3, #1
   83048:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8304a:	697b      	ldr	r3, [r7, #20]
}
   8304c:	4618      	mov	r0, r3
   8304e:	3718      	adds	r7, #24
   83050:	46bd      	mov	sp, r7
   83052:	bd80      	pop	{r7, pc}
   83054:	2007a5dc 	.word	0x2007a5dc
   83058:	2007a5c0 	.word	0x2007a5c0
   8305c:	2007a574 	.word	0x2007a574
   83060:	00081c71 	.word	0x00081c71
   83064:	2007a578 	.word	0x2007a578
   83068:	2007a5d4 	.word	0x2007a5d4
   8306c:	0008373d 	.word	0x0008373d
   83070:	20070008 	.word	0x20070008
   83074:	000819f9 	.word	0x000819f9
   83078:	2007a5c4 	.word	0x2007a5c4
   8307c:	2007a4e8 	.word	0x2007a4e8
   83080:	00081941 	.word	0x00081941
   83084:	2007a4e4 	.word	0x2007a4e4
   83088:	2007a5cc 	.word	0x2007a5cc
   8308c:	2007a5d0 	.word	0x2007a5d0

00083090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   83090:	b580      	push	{r7, lr}
   83092:	b084      	sub	sp, #16
   83094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   83096:	4b34      	ldr	r3, [pc, #208]	; (83168 <vTaskSwitchContext+0xd8>)
   83098:	681b      	ldr	r3, [r3, #0]
   8309a:	2b00      	cmp	r3, #0
   8309c:	d003      	beq.n	830a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   8309e:	4b33      	ldr	r3, [pc, #204]	; (8316c <vTaskSwitchContext+0xdc>)
   830a0:	2201      	movs	r2, #1
   830a2:	601a      	str	r2, [r3, #0]
   830a4:	e05c      	b.n	83160 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   830a6:	4b31      	ldr	r3, [pc, #196]	; (8316c <vTaskSwitchContext+0xdc>)
   830a8:	2200      	movs	r2, #0
   830aa:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   830ac:	4b30      	ldr	r3, [pc, #192]	; (83170 <vTaskSwitchContext+0xe0>)
   830ae:	681b      	ldr	r3, [r3, #0]
   830b0:	681a      	ldr	r2, [r3, #0]
   830b2:	4b2f      	ldr	r3, [pc, #188]	; (83170 <vTaskSwitchContext+0xe0>)
   830b4:	681b      	ldr	r3, [r3, #0]
   830b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830b8:	429a      	cmp	r2, r3
   830ba:	d808      	bhi.n	830ce <vTaskSwitchContext+0x3e>
   830bc:	4b2c      	ldr	r3, [pc, #176]	; (83170 <vTaskSwitchContext+0xe0>)
   830be:	681a      	ldr	r2, [r3, #0]
   830c0:	4b2b      	ldr	r3, [pc, #172]	; (83170 <vTaskSwitchContext+0xe0>)
   830c2:	681b      	ldr	r3, [r3, #0]
   830c4:	3334      	adds	r3, #52	; 0x34
   830c6:	4610      	mov	r0, r2
   830c8:	4619      	mov	r1, r3
   830ca:	4b2a      	ldr	r3, [pc, #168]	; (83174 <vTaskSwitchContext+0xe4>)
   830cc:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   830ce:	4b28      	ldr	r3, [pc, #160]	; (83170 <vTaskSwitchContext+0xe0>)
   830d0:	681b      	ldr	r3, [r3, #0]
   830d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830d4:	4618      	mov	r0, r3
   830d6:	4928      	ldr	r1, [pc, #160]	; (83178 <vTaskSwitchContext+0xe8>)
   830d8:	2214      	movs	r2, #20
   830da:	4b28      	ldr	r3, [pc, #160]	; (8317c <vTaskSwitchContext+0xec>)
   830dc:	4798      	blx	r3
   830de:	4603      	mov	r3, r0
   830e0:	2b00      	cmp	r3, #0
   830e2:	d008      	beq.n	830f6 <vTaskSwitchContext+0x66>
   830e4:	4b22      	ldr	r3, [pc, #136]	; (83170 <vTaskSwitchContext+0xe0>)
   830e6:	681a      	ldr	r2, [r3, #0]
   830e8:	4b21      	ldr	r3, [pc, #132]	; (83170 <vTaskSwitchContext+0xe0>)
   830ea:	681b      	ldr	r3, [r3, #0]
   830ec:	3334      	adds	r3, #52	; 0x34
   830ee:	4610      	mov	r0, r2
   830f0:	4619      	mov	r1, r3
   830f2:	4b20      	ldr	r3, [pc, #128]	; (83174 <vTaskSwitchContext+0xe4>)
   830f4:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   830f6:	4b22      	ldr	r3, [pc, #136]	; (83180 <vTaskSwitchContext+0xf0>)
   830f8:	681b      	ldr	r3, [r3, #0]
   830fa:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   830fc:	687b      	ldr	r3, [r7, #4]
   830fe:	fab3 f383 	clz	r3, r3
   83102:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   83104:	78fb      	ldrb	r3, [r7, #3]
   83106:	f1c3 031f 	rsb	r3, r3, #31
   8310a:	60fb      	str	r3, [r7, #12]
   8310c:	491d      	ldr	r1, [pc, #116]	; (83184 <vTaskSwitchContext+0xf4>)
   8310e:	68fa      	ldr	r2, [r7, #12]
   83110:	4613      	mov	r3, r2
   83112:	009b      	lsls	r3, r3, #2
   83114:	4413      	add	r3, r2
   83116:	009b      	lsls	r3, r3, #2
   83118:	440b      	add	r3, r1
   8311a:	681b      	ldr	r3, [r3, #0]
   8311c:	2b00      	cmp	r3, #0
   8311e:	d102      	bne.n	83126 <vTaskSwitchContext+0x96>
   83120:	4b19      	ldr	r3, [pc, #100]	; (83188 <vTaskSwitchContext+0xf8>)
   83122:	4798      	blx	r3
   83124:	e7fe      	b.n	83124 <vTaskSwitchContext+0x94>
   83126:	68fa      	ldr	r2, [r7, #12]
   83128:	4613      	mov	r3, r2
   8312a:	009b      	lsls	r3, r3, #2
   8312c:	4413      	add	r3, r2
   8312e:	009b      	lsls	r3, r3, #2
   83130:	4a14      	ldr	r2, [pc, #80]	; (83184 <vTaskSwitchContext+0xf4>)
   83132:	4413      	add	r3, r2
   83134:	60bb      	str	r3, [r7, #8]
   83136:	68bb      	ldr	r3, [r7, #8]
   83138:	685b      	ldr	r3, [r3, #4]
   8313a:	685a      	ldr	r2, [r3, #4]
   8313c:	68bb      	ldr	r3, [r7, #8]
   8313e:	605a      	str	r2, [r3, #4]
   83140:	68bb      	ldr	r3, [r7, #8]
   83142:	685a      	ldr	r2, [r3, #4]
   83144:	68bb      	ldr	r3, [r7, #8]
   83146:	3308      	adds	r3, #8
   83148:	429a      	cmp	r2, r3
   8314a:	d104      	bne.n	83156 <vTaskSwitchContext+0xc6>
   8314c:	68bb      	ldr	r3, [r7, #8]
   8314e:	685b      	ldr	r3, [r3, #4]
   83150:	685a      	ldr	r2, [r3, #4]
   83152:	68bb      	ldr	r3, [r7, #8]
   83154:	605a      	str	r2, [r3, #4]
   83156:	68bb      	ldr	r3, [r7, #8]
   83158:	685b      	ldr	r3, [r3, #4]
   8315a:	68da      	ldr	r2, [r3, #12]
   8315c:	4b04      	ldr	r3, [pc, #16]	; (83170 <vTaskSwitchContext+0xe0>)
   8315e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   83160:	3710      	adds	r7, #16
   83162:	46bd      	mov	sp, r7
   83164:	bd80      	pop	{r7, pc}
   83166:	bf00      	nop
   83168:	2007a5dc 	.word	0x2007a5dc
   8316c:	2007a5d0 	.word	0x2007a5d0
   83170:	2007a4e4 	.word	0x2007a4e4
   83174:	00084841 	.word	0x00084841
   83178:	00084e1c 	.word	0x00084e1c
   8317c:	00084ac5 	.word	0x00084ac5
   83180:	2007a5c4 	.word	0x2007a5c4
   83184:	2007a4e8 	.word	0x2007a4e8
   83188:	00081c71 	.word	0x00081c71

0008318c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   8318c:	b580      	push	{r7, lr}
   8318e:	b084      	sub	sp, #16
   83190:	af00      	add	r7, sp, #0
   83192:	6078      	str	r0, [r7, #4]
   83194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   83196:	687b      	ldr	r3, [r7, #4]
   83198:	2b00      	cmp	r3, #0
   8319a:	d102      	bne.n	831a2 <vTaskPlaceOnEventList+0x16>
   8319c:	4b1a      	ldr	r3, [pc, #104]	; (83208 <vTaskPlaceOnEventList+0x7c>)
   8319e:	4798      	blx	r3
   831a0:	e7fe      	b.n	831a0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   831a2:	4b1a      	ldr	r3, [pc, #104]	; (8320c <vTaskPlaceOnEventList+0x80>)
   831a4:	681b      	ldr	r3, [r3, #0]
   831a6:	3318      	adds	r3, #24
   831a8:	6878      	ldr	r0, [r7, #4]
   831aa:	4619      	mov	r1, r3
   831ac:	4b18      	ldr	r3, [pc, #96]	; (83210 <vTaskPlaceOnEventList+0x84>)
   831ae:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   831b0:	4b16      	ldr	r3, [pc, #88]	; (8320c <vTaskPlaceOnEventList+0x80>)
   831b2:	681b      	ldr	r3, [r3, #0]
   831b4:	3304      	adds	r3, #4
   831b6:	4618      	mov	r0, r3
   831b8:	4b16      	ldr	r3, [pc, #88]	; (83214 <vTaskPlaceOnEventList+0x88>)
   831ba:	4798      	blx	r3
   831bc:	4603      	mov	r3, r0
   831be:	2b00      	cmp	r3, #0
   831c0:	d10b      	bne.n	831da <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   831c2:	4b12      	ldr	r3, [pc, #72]	; (8320c <vTaskPlaceOnEventList+0x80>)
   831c4:	681b      	ldr	r3, [r3, #0]
   831c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   831c8:	2201      	movs	r2, #1
   831ca:	fa02 f303 	lsl.w	r3, r2, r3
   831ce:	43da      	mvns	r2, r3
   831d0:	4b11      	ldr	r3, [pc, #68]	; (83218 <vTaskPlaceOnEventList+0x8c>)
   831d2:	681b      	ldr	r3, [r3, #0]
   831d4:	401a      	ands	r2, r3
   831d6:	4b10      	ldr	r3, [pc, #64]	; (83218 <vTaskPlaceOnEventList+0x8c>)
   831d8:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   831da:	683b      	ldr	r3, [r7, #0]
   831dc:	f1b3 3fff 	cmp.w	r3, #4294967295
   831e0:	d107      	bne.n	831f2 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   831e2:	4b0a      	ldr	r3, [pc, #40]	; (8320c <vTaskPlaceOnEventList+0x80>)
   831e4:	681b      	ldr	r3, [r3, #0]
   831e6:	3304      	adds	r3, #4
   831e8:	480c      	ldr	r0, [pc, #48]	; (8321c <vTaskPlaceOnEventList+0x90>)
   831ea:	4619      	mov	r1, r3
   831ec:	4b0c      	ldr	r3, [pc, #48]	; (83220 <vTaskPlaceOnEventList+0x94>)
   831ee:	4798      	blx	r3
   831f0:	e007      	b.n	83202 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   831f2:	4b0c      	ldr	r3, [pc, #48]	; (83224 <vTaskPlaceOnEventList+0x98>)
   831f4:	681a      	ldr	r2, [r3, #0]
   831f6:	683b      	ldr	r3, [r7, #0]
   831f8:	4413      	add	r3, r2
   831fa:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   831fc:	68f8      	ldr	r0, [r7, #12]
   831fe:	4b0a      	ldr	r3, [pc, #40]	; (83228 <vTaskPlaceOnEventList+0x9c>)
   83200:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   83202:	3710      	adds	r7, #16
   83204:	46bd      	mov	sp, r7
   83206:	bd80      	pop	{r7, pc}
   83208:	00081c71 	.word	0x00081c71
   8320c:	2007a4e4 	.word	0x2007a4e4
   83210:	00081989 	.word	0x00081989
   83214:	000819f9 	.word	0x000819f9
   83218:	2007a5c4 	.word	0x2007a5c4
   8321c:	2007a5a8 	.word	0x2007a5a8
   83220:	00081941 	.word	0x00081941
   83224:	2007a5c0 	.word	0x2007a5c0
   83228:	00083639 	.word	0x00083639

0008322c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   8322c:	b580      	push	{r7, lr}
   8322e:	b084      	sub	sp, #16
   83230:	af00      	add	r7, sp, #0
   83232:	6078      	str	r0, [r7, #4]
   83234:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   83236:	687b      	ldr	r3, [r7, #4]
   83238:	2b00      	cmp	r3, #0
   8323a:	d102      	bne.n	83242 <vTaskPlaceOnEventListRestricted+0x16>
   8323c:	4b14      	ldr	r3, [pc, #80]	; (83290 <vTaskPlaceOnEventListRestricted+0x64>)
   8323e:	4798      	blx	r3
   83240:	e7fe      	b.n	83240 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   83242:	4b14      	ldr	r3, [pc, #80]	; (83294 <vTaskPlaceOnEventListRestricted+0x68>)
   83244:	681b      	ldr	r3, [r3, #0]
   83246:	3318      	adds	r3, #24
   83248:	6878      	ldr	r0, [r7, #4]
   8324a:	4619      	mov	r1, r3
   8324c:	4b12      	ldr	r3, [pc, #72]	; (83298 <vTaskPlaceOnEventListRestricted+0x6c>)
   8324e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83250:	4b10      	ldr	r3, [pc, #64]	; (83294 <vTaskPlaceOnEventListRestricted+0x68>)
   83252:	681b      	ldr	r3, [r3, #0]
   83254:	3304      	adds	r3, #4
   83256:	4618      	mov	r0, r3
   83258:	4b10      	ldr	r3, [pc, #64]	; (8329c <vTaskPlaceOnEventListRestricted+0x70>)
   8325a:	4798      	blx	r3
   8325c:	4603      	mov	r3, r0
   8325e:	2b00      	cmp	r3, #0
   83260:	d10b      	bne.n	8327a <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83262:	4b0c      	ldr	r3, [pc, #48]	; (83294 <vTaskPlaceOnEventListRestricted+0x68>)
   83264:	681b      	ldr	r3, [r3, #0]
   83266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83268:	2201      	movs	r2, #1
   8326a:	fa02 f303 	lsl.w	r3, r2, r3
   8326e:	43da      	mvns	r2, r3
   83270:	4b0b      	ldr	r3, [pc, #44]	; (832a0 <vTaskPlaceOnEventListRestricted+0x74>)
   83272:	681b      	ldr	r3, [r3, #0]
   83274:	401a      	ands	r2, r3
   83276:	4b0a      	ldr	r3, [pc, #40]	; (832a0 <vTaskPlaceOnEventListRestricted+0x74>)
   83278:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8327a:	4b0a      	ldr	r3, [pc, #40]	; (832a4 <vTaskPlaceOnEventListRestricted+0x78>)
   8327c:	681a      	ldr	r2, [r3, #0]
   8327e:	683b      	ldr	r3, [r7, #0]
   83280:	4413      	add	r3, r2
   83282:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83284:	68f8      	ldr	r0, [r7, #12]
   83286:	4b08      	ldr	r3, [pc, #32]	; (832a8 <vTaskPlaceOnEventListRestricted+0x7c>)
   83288:	4798      	blx	r3
	}
   8328a:	3710      	adds	r7, #16
   8328c:	46bd      	mov	sp, r7
   8328e:	bd80      	pop	{r7, pc}
   83290:	00081c71 	.word	0x00081c71
   83294:	2007a4e4 	.word	0x2007a4e4
   83298:	00081941 	.word	0x00081941
   8329c:	000819f9 	.word	0x000819f9
   832a0:	2007a5c4 	.word	0x2007a5c4
   832a4:	2007a5c0 	.word	0x2007a5c0
   832a8:	00083639 	.word	0x00083639

000832ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   832ac:	b580      	push	{r7, lr}
   832ae:	b084      	sub	sp, #16
   832b0:	af00      	add	r7, sp, #0
   832b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   832b4:	687b      	ldr	r3, [r7, #4]
   832b6:	68db      	ldr	r3, [r3, #12]
   832b8:	68db      	ldr	r3, [r3, #12]
   832ba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   832bc:	68bb      	ldr	r3, [r7, #8]
   832be:	2b00      	cmp	r3, #0
   832c0:	d102      	bne.n	832c8 <xTaskRemoveFromEventList+0x1c>
   832c2:	4b21      	ldr	r3, [pc, #132]	; (83348 <xTaskRemoveFromEventList+0x9c>)
   832c4:	4798      	blx	r3
   832c6:	e7fe      	b.n	832c6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   832c8:	68bb      	ldr	r3, [r7, #8]
   832ca:	3318      	adds	r3, #24
   832cc:	4618      	mov	r0, r3
   832ce:	4b1f      	ldr	r3, [pc, #124]	; (8334c <xTaskRemoveFromEventList+0xa0>)
   832d0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   832d2:	4b1f      	ldr	r3, [pc, #124]	; (83350 <xTaskRemoveFromEventList+0xa4>)
   832d4:	681b      	ldr	r3, [r3, #0]
   832d6:	2b00      	cmp	r3, #0
   832d8:	d11c      	bne.n	83314 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   832da:	68bb      	ldr	r3, [r7, #8]
   832dc:	3304      	adds	r3, #4
   832de:	4618      	mov	r0, r3
   832e0:	4b1a      	ldr	r3, [pc, #104]	; (8334c <xTaskRemoveFromEventList+0xa0>)
   832e2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   832e4:	68bb      	ldr	r3, [r7, #8]
   832e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   832e8:	2201      	movs	r2, #1
   832ea:	409a      	lsls	r2, r3
   832ec:	4b19      	ldr	r3, [pc, #100]	; (83354 <xTaskRemoveFromEventList+0xa8>)
   832ee:	681b      	ldr	r3, [r3, #0]
   832f0:	431a      	orrs	r2, r3
   832f2:	4b18      	ldr	r3, [pc, #96]	; (83354 <xTaskRemoveFromEventList+0xa8>)
   832f4:	601a      	str	r2, [r3, #0]
   832f6:	68bb      	ldr	r3, [r7, #8]
   832f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   832fa:	4613      	mov	r3, r2
   832fc:	009b      	lsls	r3, r3, #2
   832fe:	4413      	add	r3, r2
   83300:	009b      	lsls	r3, r3, #2
   83302:	4a15      	ldr	r2, [pc, #84]	; (83358 <xTaskRemoveFromEventList+0xac>)
   83304:	441a      	add	r2, r3
   83306:	68bb      	ldr	r3, [r7, #8]
   83308:	3304      	adds	r3, #4
   8330a:	4610      	mov	r0, r2
   8330c:	4619      	mov	r1, r3
   8330e:	4b13      	ldr	r3, [pc, #76]	; (8335c <xTaskRemoveFromEventList+0xb0>)
   83310:	4798      	blx	r3
   83312:	e005      	b.n	83320 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   83314:	68bb      	ldr	r3, [r7, #8]
   83316:	3318      	adds	r3, #24
   83318:	4811      	ldr	r0, [pc, #68]	; (83360 <xTaskRemoveFromEventList+0xb4>)
   8331a:	4619      	mov	r1, r3
   8331c:	4b0f      	ldr	r3, [pc, #60]	; (8335c <xTaskRemoveFromEventList+0xb0>)
   8331e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   83320:	68bb      	ldr	r3, [r7, #8]
   83322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83324:	4b0f      	ldr	r3, [pc, #60]	; (83364 <xTaskRemoveFromEventList+0xb8>)
   83326:	681b      	ldr	r3, [r3, #0]
   83328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8332a:	429a      	cmp	r2, r3
   8332c:	d905      	bls.n	8333a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   8332e:	2301      	movs	r3, #1
   83330:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   83332:	4b0d      	ldr	r3, [pc, #52]	; (83368 <xTaskRemoveFromEventList+0xbc>)
   83334:	2201      	movs	r2, #1
   83336:	601a      	str	r2, [r3, #0]
   83338:	e001      	b.n	8333e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8333a:	2300      	movs	r3, #0
   8333c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   8333e:	68fb      	ldr	r3, [r7, #12]
}
   83340:	4618      	mov	r0, r3
   83342:	3710      	adds	r7, #16
   83344:	46bd      	mov	sp, r7
   83346:	bd80      	pop	{r7, pc}
   83348:	00081c71 	.word	0x00081c71
   8334c:	000819f9 	.word	0x000819f9
   83350:	2007a5dc 	.word	0x2007a5dc
   83354:	2007a5c4 	.word	0x2007a5c4
   83358:	2007a4e8 	.word	0x2007a4e8
   8335c:	00081941 	.word	0x00081941
   83360:	2007a57c 	.word	0x2007a57c
   83364:	2007a4e4 	.word	0x2007a4e4
   83368:	2007a5d0 	.word	0x2007a5d0

0008336c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   8336c:	b580      	push	{r7, lr}
   8336e:	b082      	sub	sp, #8
   83370:	af00      	add	r7, sp, #0
   83372:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   83374:	687b      	ldr	r3, [r7, #4]
   83376:	2b00      	cmp	r3, #0
   83378:	d102      	bne.n	83380 <vTaskSetTimeOutState+0x14>
   8337a:	4b07      	ldr	r3, [pc, #28]	; (83398 <vTaskSetTimeOutState+0x2c>)
   8337c:	4798      	blx	r3
   8337e:	e7fe      	b.n	8337e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83380:	4b06      	ldr	r3, [pc, #24]	; (8339c <vTaskSetTimeOutState+0x30>)
   83382:	681a      	ldr	r2, [r3, #0]
   83384:	687b      	ldr	r3, [r7, #4]
   83386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   83388:	4b05      	ldr	r3, [pc, #20]	; (833a0 <vTaskSetTimeOutState+0x34>)
   8338a:	681a      	ldr	r2, [r3, #0]
   8338c:	687b      	ldr	r3, [r7, #4]
   8338e:	605a      	str	r2, [r3, #4]
}
   83390:	3708      	adds	r7, #8
   83392:	46bd      	mov	sp, r7
   83394:	bd80      	pop	{r7, pc}
   83396:	bf00      	nop
   83398:	00081c71 	.word	0x00081c71
   8339c:	2007a5d4 	.word	0x2007a5d4
   833a0:	2007a5c0 	.word	0x2007a5c0

000833a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   833a4:	b580      	push	{r7, lr}
   833a6:	b084      	sub	sp, #16
   833a8:	af00      	add	r7, sp, #0
   833aa:	6078      	str	r0, [r7, #4]
   833ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   833ae:	687b      	ldr	r3, [r7, #4]
   833b0:	2b00      	cmp	r3, #0
   833b2:	d102      	bne.n	833ba <xTaskCheckForTimeOut+0x16>
   833b4:	4b21      	ldr	r3, [pc, #132]	; (8343c <xTaskCheckForTimeOut+0x98>)
   833b6:	4798      	blx	r3
   833b8:	e7fe      	b.n	833b8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   833ba:	683b      	ldr	r3, [r7, #0]
   833bc:	2b00      	cmp	r3, #0
   833be:	d102      	bne.n	833c6 <xTaskCheckForTimeOut+0x22>
   833c0:	4b1e      	ldr	r3, [pc, #120]	; (8343c <xTaskCheckForTimeOut+0x98>)
   833c2:	4798      	blx	r3
   833c4:	e7fe      	b.n	833c4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   833c6:	4b1e      	ldr	r3, [pc, #120]	; (83440 <xTaskCheckForTimeOut+0x9c>)
   833c8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   833ca:	4b1e      	ldr	r3, [pc, #120]	; (83444 <xTaskCheckForTimeOut+0xa0>)
   833cc:	681b      	ldr	r3, [r3, #0]
   833ce:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   833d0:	683b      	ldr	r3, [r7, #0]
   833d2:	681b      	ldr	r3, [r3, #0]
   833d4:	f1b3 3fff 	cmp.w	r3, #4294967295
   833d8:	d102      	bne.n	833e0 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   833da:	2300      	movs	r3, #0
   833dc:	60fb      	str	r3, [r7, #12]
   833de:	e026      	b.n	8342e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   833e0:	687b      	ldr	r3, [r7, #4]
   833e2:	681a      	ldr	r2, [r3, #0]
   833e4:	4b18      	ldr	r3, [pc, #96]	; (83448 <xTaskCheckForTimeOut+0xa4>)
   833e6:	681b      	ldr	r3, [r3, #0]
   833e8:	429a      	cmp	r2, r3
   833ea:	d007      	beq.n	833fc <xTaskCheckForTimeOut+0x58>
   833ec:	687b      	ldr	r3, [r7, #4]
   833ee:	685a      	ldr	r2, [r3, #4]
   833f0:	68bb      	ldr	r3, [r7, #8]
   833f2:	429a      	cmp	r2, r3
   833f4:	d802      	bhi.n	833fc <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   833f6:	2301      	movs	r3, #1
   833f8:	60fb      	str	r3, [r7, #12]
   833fa:	e018      	b.n	8342e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   833fc:	687b      	ldr	r3, [r7, #4]
   833fe:	685b      	ldr	r3, [r3, #4]
   83400:	68ba      	ldr	r2, [r7, #8]
   83402:	1ad2      	subs	r2, r2, r3
   83404:	683b      	ldr	r3, [r7, #0]
   83406:	681b      	ldr	r3, [r3, #0]
   83408:	429a      	cmp	r2, r3
   8340a:	d20e      	bcs.n	8342a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   8340c:	683b      	ldr	r3, [r7, #0]
   8340e:	681a      	ldr	r2, [r3, #0]
   83410:	687b      	ldr	r3, [r7, #4]
   83412:	6859      	ldr	r1, [r3, #4]
   83414:	68bb      	ldr	r3, [r7, #8]
   83416:	1acb      	subs	r3, r1, r3
   83418:	441a      	add	r2, r3
   8341a:	683b      	ldr	r3, [r7, #0]
   8341c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8341e:	6878      	ldr	r0, [r7, #4]
   83420:	4b0a      	ldr	r3, [pc, #40]	; (8344c <xTaskCheckForTimeOut+0xa8>)
   83422:	4798      	blx	r3
			xReturn = pdFALSE;
   83424:	2300      	movs	r3, #0
   83426:	60fb      	str	r3, [r7, #12]
   83428:	e001      	b.n	8342e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   8342a:	2301      	movs	r3, #1
   8342c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8342e:	4b08      	ldr	r3, [pc, #32]	; (83450 <xTaskCheckForTimeOut+0xac>)
   83430:	4798      	blx	r3

	return xReturn;
   83432:	68fb      	ldr	r3, [r7, #12]
}
   83434:	4618      	mov	r0, r3
   83436:	3710      	adds	r7, #16
   83438:	46bd      	mov	sp, r7
   8343a:	bd80      	pop	{r7, pc}
   8343c:	00081c71 	.word	0x00081c71
   83440:	00081bf5 	.word	0x00081bf5
   83444:	2007a5c0 	.word	0x2007a5c0
   83448:	2007a5d4 	.word	0x2007a5d4
   8344c:	0008336d 	.word	0x0008336d
   83450:	00081c39 	.word	0x00081c39

00083454 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   83454:	b480      	push	{r7}
   83456:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   83458:	4b03      	ldr	r3, [pc, #12]	; (83468 <vTaskMissedYield+0x14>)
   8345a:	2201      	movs	r2, #1
   8345c:	601a      	str	r2, [r3, #0]
}
   8345e:	46bd      	mov	sp, r7
   83460:	f85d 7b04 	ldr.w	r7, [sp], #4
   83464:	4770      	bx	lr
   83466:	bf00      	nop
   83468:	2007a5d0 	.word	0x2007a5d0

0008346c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8346c:	b580      	push	{r7, lr}
   8346e:	b082      	sub	sp, #8
   83470:	af00      	add	r7, sp, #0
   83472:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   83474:	4b04      	ldr	r3, [pc, #16]	; (83488 <prvIdleTask+0x1c>)
   83476:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   83478:	4b04      	ldr	r3, [pc, #16]	; (8348c <prvIdleTask+0x20>)
   8347a:	681b      	ldr	r3, [r3, #0]
   8347c:	2b01      	cmp	r3, #1
   8347e:	d901      	bls.n	83484 <prvIdleTask+0x18>
			{
				taskYIELD();
   83480:	4b03      	ldr	r3, [pc, #12]	; (83490 <prvIdleTask+0x24>)
   83482:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   83484:	e7f6      	b.n	83474 <prvIdleTask+0x8>
   83486:	bf00      	nop
   83488:	000835ad 	.word	0x000835ad
   8348c:	2007a4e8 	.word	0x2007a4e8
   83490:	00081bd5 	.word	0x00081bd5

00083494 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83494:	b580      	push	{r7, lr}
   83496:	b086      	sub	sp, #24
   83498:	af00      	add	r7, sp, #0
   8349a:	60f8      	str	r0, [r7, #12]
   8349c:	60b9      	str	r1, [r7, #8]
   8349e:	607a      	str	r2, [r7, #4]
   834a0:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   834a2:	2300      	movs	r3, #0
   834a4:	617b      	str	r3, [r7, #20]
   834a6:	e012      	b.n	834ce <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   834a8:	68ba      	ldr	r2, [r7, #8]
   834aa:	697b      	ldr	r3, [r7, #20]
   834ac:	4413      	add	r3, r2
   834ae:	781a      	ldrb	r2, [r3, #0]
   834b0:	68f9      	ldr	r1, [r7, #12]
   834b2:	697b      	ldr	r3, [r7, #20]
   834b4:	440b      	add	r3, r1
   834b6:	3330      	adds	r3, #48	; 0x30
   834b8:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   834ba:	68ba      	ldr	r2, [r7, #8]
   834bc:	697b      	ldr	r3, [r7, #20]
   834be:	4413      	add	r3, r2
   834c0:	781b      	ldrb	r3, [r3, #0]
   834c2:	2b00      	cmp	r3, #0
   834c4:	d100      	bne.n	834c8 <prvInitialiseTCBVariables+0x34>
		{
			break;
   834c6:	e005      	b.n	834d4 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   834c8:	697b      	ldr	r3, [r7, #20]
   834ca:	3301      	adds	r3, #1
   834cc:	617b      	str	r3, [r7, #20]
   834ce:	697b      	ldr	r3, [r7, #20]
   834d0:	2b09      	cmp	r3, #9
   834d2:	d9e9      	bls.n	834a8 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   834d4:	68fb      	ldr	r3, [r7, #12]
   834d6:	2200      	movs	r2, #0
   834d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   834dc:	687b      	ldr	r3, [r7, #4]
   834de:	2b04      	cmp	r3, #4
   834e0:	d901      	bls.n	834e6 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   834e2:	2304      	movs	r3, #4
   834e4:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   834e6:	68fb      	ldr	r3, [r7, #12]
   834e8:	687a      	ldr	r2, [r7, #4]
   834ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   834ec:	68fb      	ldr	r3, [r7, #12]
   834ee:	687a      	ldr	r2, [r7, #4]
   834f0:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   834f2:	68fb      	ldr	r3, [r7, #12]
   834f4:	2200      	movs	r2, #0
   834f6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   834f8:	68fb      	ldr	r3, [r7, #12]
   834fa:	3304      	adds	r3, #4
   834fc:	4618      	mov	r0, r3
   834fe:	4b0a      	ldr	r3, [pc, #40]	; (83528 <prvInitialiseTCBVariables+0x94>)
   83500:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   83502:	68fb      	ldr	r3, [r7, #12]
   83504:	3318      	adds	r3, #24
   83506:	4618      	mov	r0, r3
   83508:	4b07      	ldr	r3, [pc, #28]	; (83528 <prvInitialiseTCBVariables+0x94>)
   8350a:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8350c:	68fb      	ldr	r3, [r7, #12]
   8350e:	68fa      	ldr	r2, [r7, #12]
   83510:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83512:	687b      	ldr	r3, [r7, #4]
   83514:	f1c3 0205 	rsb	r2, r3, #5
   83518:	68fb      	ldr	r3, [r7, #12]
   8351a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8351c:	68fb      	ldr	r3, [r7, #12]
   8351e:	68fa      	ldr	r2, [r7, #12]
   83520:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   83522:	3718      	adds	r7, #24
   83524:	46bd      	mov	sp, r7
   83526:	bd80      	pop	{r7, pc}
   83528:	00081929 	.word	0x00081929

0008352c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   8352c:	b580      	push	{r7, lr}
   8352e:	b082      	sub	sp, #8
   83530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83532:	2300      	movs	r3, #0
   83534:	607b      	str	r3, [r7, #4]
   83536:	e00c      	b.n	83552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   83538:	687a      	ldr	r2, [r7, #4]
   8353a:	4613      	mov	r3, r2
   8353c:	009b      	lsls	r3, r3, #2
   8353e:	4413      	add	r3, r2
   83540:	009b      	lsls	r3, r3, #2
   83542:	4a11      	ldr	r2, [pc, #68]	; (83588 <prvInitialiseTaskLists+0x5c>)
   83544:	4413      	add	r3, r2
   83546:	4618      	mov	r0, r3
   83548:	4b10      	ldr	r3, [pc, #64]	; (8358c <prvInitialiseTaskLists+0x60>)
   8354a:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   8354c:	687b      	ldr	r3, [r7, #4]
   8354e:	3301      	adds	r3, #1
   83550:	607b      	str	r3, [r7, #4]
   83552:	687b      	ldr	r3, [r7, #4]
   83554:	2b04      	cmp	r3, #4
   83556:	d9ef      	bls.n	83538 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   83558:	480d      	ldr	r0, [pc, #52]	; (83590 <prvInitialiseTaskLists+0x64>)
   8355a:	4b0c      	ldr	r3, [pc, #48]	; (8358c <prvInitialiseTaskLists+0x60>)
   8355c:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   8355e:	480d      	ldr	r0, [pc, #52]	; (83594 <prvInitialiseTaskLists+0x68>)
   83560:	4b0a      	ldr	r3, [pc, #40]	; (8358c <prvInitialiseTaskLists+0x60>)
   83562:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   83564:	480c      	ldr	r0, [pc, #48]	; (83598 <prvInitialiseTaskLists+0x6c>)
   83566:	4b09      	ldr	r3, [pc, #36]	; (8358c <prvInitialiseTaskLists+0x60>)
   83568:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8356a:	480c      	ldr	r0, [pc, #48]	; (8359c <prvInitialiseTaskLists+0x70>)
   8356c:	4b07      	ldr	r3, [pc, #28]	; (8358c <prvInitialiseTaskLists+0x60>)
   8356e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   83570:	480b      	ldr	r0, [pc, #44]	; (835a0 <prvInitialiseTaskLists+0x74>)
   83572:	4b06      	ldr	r3, [pc, #24]	; (8358c <prvInitialiseTaskLists+0x60>)
   83574:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   83576:	4b0b      	ldr	r3, [pc, #44]	; (835a4 <prvInitialiseTaskLists+0x78>)
   83578:	4a05      	ldr	r2, [pc, #20]	; (83590 <prvInitialiseTaskLists+0x64>)
   8357a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8357c:	4b0a      	ldr	r3, [pc, #40]	; (835a8 <prvInitialiseTaskLists+0x7c>)
   8357e:	4a05      	ldr	r2, [pc, #20]	; (83594 <prvInitialiseTaskLists+0x68>)
   83580:	601a      	str	r2, [r3, #0]
}
   83582:	3708      	adds	r7, #8
   83584:	46bd      	mov	sp, r7
   83586:	bd80      	pop	{r7, pc}
   83588:	2007a4e8 	.word	0x2007a4e8
   8358c:	000818e9 	.word	0x000818e9
   83590:	2007a54c 	.word	0x2007a54c
   83594:	2007a560 	.word	0x2007a560
   83598:	2007a57c 	.word	0x2007a57c
   8359c:	2007a590 	.word	0x2007a590
   835a0:	2007a5a8 	.word	0x2007a5a8
   835a4:	2007a574 	.word	0x2007a574
   835a8:	2007a578 	.word	0x2007a578

000835ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   835ac:	b580      	push	{r7, lr}
   835ae:	b082      	sub	sp, #8
   835b0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   835b2:	e028      	b.n	83606 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   835b4:	4b17      	ldr	r3, [pc, #92]	; (83614 <prvCheckTasksWaitingTermination+0x68>)
   835b6:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   835b8:	4b17      	ldr	r3, [pc, #92]	; (83618 <prvCheckTasksWaitingTermination+0x6c>)
   835ba:	681b      	ldr	r3, [r3, #0]
   835bc:	2b00      	cmp	r3, #0
   835be:	bf14      	ite	ne
   835c0:	2300      	movne	r3, #0
   835c2:	2301      	moveq	r3, #1
   835c4:	b2db      	uxtb	r3, r3
   835c6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   835c8:	4b14      	ldr	r3, [pc, #80]	; (8361c <prvCheckTasksWaitingTermination+0x70>)
   835ca:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   835cc:	687b      	ldr	r3, [r7, #4]
   835ce:	2b00      	cmp	r3, #0
   835d0:	d119      	bne.n	83606 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   835d2:	4b13      	ldr	r3, [pc, #76]	; (83620 <prvCheckTasksWaitingTermination+0x74>)
   835d4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   835d6:	4b10      	ldr	r3, [pc, #64]	; (83618 <prvCheckTasksWaitingTermination+0x6c>)
   835d8:	68db      	ldr	r3, [r3, #12]
   835da:	68db      	ldr	r3, [r3, #12]
   835dc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   835de:	683b      	ldr	r3, [r7, #0]
   835e0:	3304      	adds	r3, #4
   835e2:	4618      	mov	r0, r3
   835e4:	4b0f      	ldr	r3, [pc, #60]	; (83624 <prvCheckTasksWaitingTermination+0x78>)
   835e6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   835e8:	4b0f      	ldr	r3, [pc, #60]	; (83628 <prvCheckTasksWaitingTermination+0x7c>)
   835ea:	681b      	ldr	r3, [r3, #0]
   835ec:	1e5a      	subs	r2, r3, #1
   835ee:	4b0e      	ldr	r3, [pc, #56]	; (83628 <prvCheckTasksWaitingTermination+0x7c>)
   835f0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   835f2:	4b0e      	ldr	r3, [pc, #56]	; (8362c <prvCheckTasksWaitingTermination+0x80>)
   835f4:	681b      	ldr	r3, [r3, #0]
   835f6:	1e5a      	subs	r2, r3, #1
   835f8:	4b0c      	ldr	r3, [pc, #48]	; (8362c <prvCheckTasksWaitingTermination+0x80>)
   835fa:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   835fc:	4b0c      	ldr	r3, [pc, #48]	; (83630 <prvCheckTasksWaitingTermination+0x84>)
   835fe:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   83600:	6838      	ldr	r0, [r7, #0]
   83602:	4b0c      	ldr	r3, [pc, #48]	; (83634 <prvCheckTasksWaitingTermination+0x88>)
   83604:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   83606:	4b09      	ldr	r3, [pc, #36]	; (8362c <prvCheckTasksWaitingTermination+0x80>)
   83608:	681b      	ldr	r3, [r3, #0]
   8360a:	2b00      	cmp	r3, #0
   8360c:	d1d2      	bne.n	835b4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   8360e:	3708      	adds	r7, #8
   83610:	46bd      	mov	sp, r7
   83612:	bd80      	pop	{r7, pc}
   83614:	00082da9 	.word	0x00082da9
   83618:	2007a590 	.word	0x2007a590
   8361c:	00082dc5 	.word	0x00082dc5
   83620:	00081bf5 	.word	0x00081bf5
   83624:	000819f9 	.word	0x000819f9
   83628:	2007a5bc 	.word	0x2007a5bc
   8362c:	2007a5a4 	.word	0x2007a5a4
   83630:	00081c39 	.word	0x00081c39
   83634:	00083719 	.word	0x00083719

00083638 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   83638:	b580      	push	{r7, lr}
   8363a:	b082      	sub	sp, #8
   8363c:	af00      	add	r7, sp, #0
   8363e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   83640:	4b13      	ldr	r3, [pc, #76]	; (83690 <prvAddCurrentTaskToDelayedList+0x58>)
   83642:	681b      	ldr	r3, [r3, #0]
   83644:	687a      	ldr	r2, [r7, #4]
   83646:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   83648:	4b12      	ldr	r3, [pc, #72]	; (83694 <prvAddCurrentTaskToDelayedList+0x5c>)
   8364a:	681b      	ldr	r3, [r3, #0]
   8364c:	687a      	ldr	r2, [r7, #4]
   8364e:	429a      	cmp	r2, r3
   83650:	d209      	bcs.n	83666 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83652:	4b11      	ldr	r3, [pc, #68]	; (83698 <prvAddCurrentTaskToDelayedList+0x60>)
   83654:	681a      	ldr	r2, [r3, #0]
   83656:	4b0e      	ldr	r3, [pc, #56]	; (83690 <prvAddCurrentTaskToDelayedList+0x58>)
   83658:	681b      	ldr	r3, [r3, #0]
   8365a:	3304      	adds	r3, #4
   8365c:	4610      	mov	r0, r2
   8365e:	4619      	mov	r1, r3
   83660:	4b0e      	ldr	r3, [pc, #56]	; (8369c <prvAddCurrentTaskToDelayedList+0x64>)
   83662:	4798      	blx	r3
   83664:	e010      	b.n	83688 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83666:	4b0e      	ldr	r3, [pc, #56]	; (836a0 <prvAddCurrentTaskToDelayedList+0x68>)
   83668:	681a      	ldr	r2, [r3, #0]
   8366a:	4b09      	ldr	r3, [pc, #36]	; (83690 <prvAddCurrentTaskToDelayedList+0x58>)
   8366c:	681b      	ldr	r3, [r3, #0]
   8366e:	3304      	adds	r3, #4
   83670:	4610      	mov	r0, r2
   83672:	4619      	mov	r1, r3
   83674:	4b09      	ldr	r3, [pc, #36]	; (8369c <prvAddCurrentTaskToDelayedList+0x64>)
   83676:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   83678:	4b0a      	ldr	r3, [pc, #40]	; (836a4 <prvAddCurrentTaskToDelayedList+0x6c>)
   8367a:	681b      	ldr	r3, [r3, #0]
   8367c:	687a      	ldr	r2, [r7, #4]
   8367e:	429a      	cmp	r2, r3
   83680:	d202      	bcs.n	83688 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   83682:	4b08      	ldr	r3, [pc, #32]	; (836a4 <prvAddCurrentTaskToDelayedList+0x6c>)
   83684:	687a      	ldr	r2, [r7, #4]
   83686:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   83688:	3708      	adds	r7, #8
   8368a:	46bd      	mov	sp, r7
   8368c:	bd80      	pop	{r7, pc}
   8368e:	bf00      	nop
   83690:	2007a4e4 	.word	0x2007a4e4
   83694:	2007a5c0 	.word	0x2007a5c0
   83698:	2007a578 	.word	0x2007a578
   8369c:	00081989 	.word	0x00081989
   836a0:	2007a574 	.word	0x2007a574
   836a4:	20070008 	.word	0x20070008

000836a8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   836a8:	b580      	push	{r7, lr}
   836aa:	b084      	sub	sp, #16
   836ac:	af00      	add	r7, sp, #0
   836ae:	4603      	mov	r3, r0
   836b0:	6039      	str	r1, [r7, #0]
   836b2:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   836b4:	2048      	movs	r0, #72	; 0x48
   836b6:	4b15      	ldr	r3, [pc, #84]	; (8370c <prvAllocateTCBAndStack+0x64>)
   836b8:	4798      	blx	r3
   836ba:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   836bc:	68fb      	ldr	r3, [r7, #12]
   836be:	2b00      	cmp	r3, #0
   836c0:	d01f      	beq.n	83702 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   836c2:	683b      	ldr	r3, [r7, #0]
   836c4:	2b00      	cmp	r3, #0
   836c6:	d106      	bne.n	836d6 <prvAllocateTCBAndStack+0x2e>
   836c8:	88fb      	ldrh	r3, [r7, #6]
   836ca:	009b      	lsls	r3, r3, #2
   836cc:	4618      	mov	r0, r3
   836ce:	4b0f      	ldr	r3, [pc, #60]	; (8370c <prvAllocateTCBAndStack+0x64>)
   836d0:	4798      	blx	r3
   836d2:	4603      	mov	r3, r0
   836d4:	e000      	b.n	836d8 <prvAllocateTCBAndStack+0x30>
   836d6:	683b      	ldr	r3, [r7, #0]
   836d8:	68fa      	ldr	r2, [r7, #12]
   836da:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   836dc:	68fb      	ldr	r3, [r7, #12]
   836de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836e0:	2b00      	cmp	r3, #0
   836e2:	d105      	bne.n	836f0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   836e4:	68f8      	ldr	r0, [r7, #12]
   836e6:	4b0a      	ldr	r3, [pc, #40]	; (83710 <prvAllocateTCBAndStack+0x68>)
   836e8:	4798      	blx	r3
			pxNewTCB = NULL;
   836ea:	2300      	movs	r3, #0
   836ec:	60fb      	str	r3, [r7, #12]
   836ee:	e008      	b.n	83702 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   836f0:	68fb      	ldr	r3, [r7, #12]
   836f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   836f4:	88fb      	ldrh	r3, [r7, #6]
   836f6:	009b      	lsls	r3, r3, #2
   836f8:	4610      	mov	r0, r2
   836fa:	21a5      	movs	r1, #165	; 0xa5
   836fc:	461a      	mov	r2, r3
   836fe:	4b05      	ldr	r3, [pc, #20]	; (83714 <prvAllocateTCBAndStack+0x6c>)
   83700:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   83702:	68fb      	ldr	r3, [r7, #12]
}
   83704:	4618      	mov	r0, r3
   83706:	3710      	adds	r7, #16
   83708:	46bd      	mov	sp, r7
   8370a:	bd80      	pop	{r7, pc}
   8370c:	00081d95 	.word	0x00081d95
   83710:	00081f0d 	.word	0x00081f0d
   83714:	00084c19 	.word	0x00084c19

00083718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   83718:	b580      	push	{r7, lr}
   8371a:	b082      	sub	sp, #8
   8371c:	af00      	add	r7, sp, #0
   8371e:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   83720:	687b      	ldr	r3, [r7, #4]
   83722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83724:	4618      	mov	r0, r3
   83726:	4b04      	ldr	r3, [pc, #16]	; (83738 <prvDeleteTCB+0x20>)
   83728:	4798      	blx	r3
		vPortFree( pxTCB );
   8372a:	6878      	ldr	r0, [r7, #4]
   8372c:	4b02      	ldr	r3, [pc, #8]	; (83738 <prvDeleteTCB+0x20>)
   8372e:	4798      	blx	r3
	}
   83730:	3708      	adds	r7, #8
   83732:	46bd      	mov	sp, r7
   83734:	bd80      	pop	{r7, pc}
   83736:	bf00      	nop
   83738:	00081f0d 	.word	0x00081f0d

0008373c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   8373c:	b480      	push	{r7}
   8373e:	b083      	sub	sp, #12
   83740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   83742:	4b0e      	ldr	r3, [pc, #56]	; (8377c <prvResetNextTaskUnblockTime+0x40>)
   83744:	681b      	ldr	r3, [r3, #0]
   83746:	681b      	ldr	r3, [r3, #0]
   83748:	2b00      	cmp	r3, #0
   8374a:	d101      	bne.n	83750 <prvResetNextTaskUnblockTime+0x14>
   8374c:	2301      	movs	r3, #1
   8374e:	e000      	b.n	83752 <prvResetNextTaskUnblockTime+0x16>
   83750:	2300      	movs	r3, #0
   83752:	2b00      	cmp	r3, #0
   83754:	d004      	beq.n	83760 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   83756:	4b0a      	ldr	r3, [pc, #40]	; (83780 <prvResetNextTaskUnblockTime+0x44>)
   83758:	f04f 32ff 	mov.w	r2, #4294967295
   8375c:	601a      	str	r2, [r3, #0]
   8375e:	e008      	b.n	83772 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   83760:	4b06      	ldr	r3, [pc, #24]	; (8377c <prvResetNextTaskUnblockTime+0x40>)
   83762:	681b      	ldr	r3, [r3, #0]
   83764:	68db      	ldr	r3, [r3, #12]
   83766:	68db      	ldr	r3, [r3, #12]
   83768:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8376a:	687b      	ldr	r3, [r7, #4]
   8376c:	685a      	ldr	r2, [r3, #4]
   8376e:	4b04      	ldr	r3, [pc, #16]	; (83780 <prvResetNextTaskUnblockTime+0x44>)
   83770:	601a      	str	r2, [r3, #0]
	}
}
   83772:	370c      	adds	r7, #12
   83774:	46bd      	mov	sp, r7
   83776:	f85d 7b04 	ldr.w	r7, [sp], #4
   8377a:	4770      	bx	lr
   8377c:	2007a574 	.word	0x2007a574
   83780:	20070008 	.word	0x20070008

00083784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   83784:	b480      	push	{r7}
   83786:	b083      	sub	sp, #12
   83788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8378a:	4b0b      	ldr	r3, [pc, #44]	; (837b8 <xTaskGetSchedulerState+0x34>)
   8378c:	681b      	ldr	r3, [r3, #0]
   8378e:	2b00      	cmp	r3, #0
   83790:	d102      	bne.n	83798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   83792:	2301      	movs	r3, #1
   83794:	607b      	str	r3, [r7, #4]
   83796:	e008      	b.n	837aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83798:	4b08      	ldr	r3, [pc, #32]	; (837bc <xTaskGetSchedulerState+0x38>)
   8379a:	681b      	ldr	r3, [r3, #0]
   8379c:	2b00      	cmp	r3, #0
   8379e:	d102      	bne.n	837a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   837a0:	2302      	movs	r3, #2
   837a2:	607b      	str	r3, [r7, #4]
   837a4:	e001      	b.n	837aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   837a6:	2300      	movs	r3, #0
   837a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   837aa:	687b      	ldr	r3, [r7, #4]
	}
   837ac:	4618      	mov	r0, r3
   837ae:	370c      	adds	r7, #12
   837b0:	46bd      	mov	sp, r7
   837b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   837b6:	4770      	bx	lr
   837b8:	2007a5c8 	.word	0x2007a5c8
   837bc:	2007a5dc 	.word	0x2007a5dc

000837c0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   837c0:	b580      	push	{r7, lr}
   837c2:	b084      	sub	sp, #16
   837c4:	af00      	add	r7, sp, #0
   837c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   837c8:	687b      	ldr	r3, [r7, #4]
   837ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   837cc:	687b      	ldr	r3, [r7, #4]
   837ce:	2b00      	cmp	r3, #0
   837d0:	d062      	beq.n	83898 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   837d2:	68fb      	ldr	r3, [r7, #12]
   837d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   837d6:	4b32      	ldr	r3, [pc, #200]	; (838a0 <vTaskPriorityInherit+0xe0>)
   837d8:	681b      	ldr	r3, [r3, #0]
   837da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   837dc:	429a      	cmp	r2, r3
   837de:	d25b      	bcs.n	83898 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   837e0:	68fb      	ldr	r3, [r7, #12]
   837e2:	699b      	ldr	r3, [r3, #24]
   837e4:	2b00      	cmp	r3, #0
   837e6:	db06      	blt.n	837f6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   837e8:	4b2d      	ldr	r3, [pc, #180]	; (838a0 <vTaskPriorityInherit+0xe0>)
   837ea:	681b      	ldr	r3, [r3, #0]
   837ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   837ee:	f1c3 0205 	rsb	r2, r3, #5
   837f2:	68fb      	ldr	r3, [r7, #12]
   837f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   837f6:	68fb      	ldr	r3, [r7, #12]
   837f8:	6959      	ldr	r1, [r3, #20]
   837fa:	68fb      	ldr	r3, [r7, #12]
   837fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   837fe:	4613      	mov	r3, r2
   83800:	009b      	lsls	r3, r3, #2
   83802:	4413      	add	r3, r2
   83804:	009b      	lsls	r3, r3, #2
   83806:	4a27      	ldr	r2, [pc, #156]	; (838a4 <vTaskPriorityInherit+0xe4>)
   83808:	4413      	add	r3, r2
   8380a:	4299      	cmp	r1, r3
   8380c:	d101      	bne.n	83812 <vTaskPriorityInherit+0x52>
   8380e:	2301      	movs	r3, #1
   83810:	e000      	b.n	83814 <vTaskPriorityInherit+0x54>
   83812:	2300      	movs	r3, #0
   83814:	2b00      	cmp	r3, #0
   83816:	d03a      	beq.n	8388e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83818:	68fb      	ldr	r3, [r7, #12]
   8381a:	3304      	adds	r3, #4
   8381c:	4618      	mov	r0, r3
   8381e:	4b22      	ldr	r3, [pc, #136]	; (838a8 <vTaskPriorityInherit+0xe8>)
   83820:	4798      	blx	r3
   83822:	4603      	mov	r3, r0
   83824:	2b00      	cmp	r3, #0
   83826:	d115      	bne.n	83854 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   83828:	68fb      	ldr	r3, [r7, #12]
   8382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8382c:	491d      	ldr	r1, [pc, #116]	; (838a4 <vTaskPriorityInherit+0xe4>)
   8382e:	4613      	mov	r3, r2
   83830:	009b      	lsls	r3, r3, #2
   83832:	4413      	add	r3, r2
   83834:	009b      	lsls	r3, r3, #2
   83836:	440b      	add	r3, r1
   83838:	681b      	ldr	r3, [r3, #0]
   8383a:	2b00      	cmp	r3, #0
   8383c:	d10a      	bne.n	83854 <vTaskPriorityInherit+0x94>
   8383e:	68fb      	ldr	r3, [r7, #12]
   83840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83842:	2201      	movs	r2, #1
   83844:	fa02 f303 	lsl.w	r3, r2, r3
   83848:	43da      	mvns	r2, r3
   8384a:	4b18      	ldr	r3, [pc, #96]	; (838ac <vTaskPriorityInherit+0xec>)
   8384c:	681b      	ldr	r3, [r3, #0]
   8384e:	401a      	ands	r2, r3
   83850:	4b16      	ldr	r3, [pc, #88]	; (838ac <vTaskPriorityInherit+0xec>)
   83852:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   83854:	4b12      	ldr	r3, [pc, #72]	; (838a0 <vTaskPriorityInherit+0xe0>)
   83856:	681b      	ldr	r3, [r3, #0]
   83858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8385a:	68fb      	ldr	r3, [r7, #12]
   8385c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   8385e:	68fb      	ldr	r3, [r7, #12]
   83860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83862:	2201      	movs	r2, #1
   83864:	409a      	lsls	r2, r3
   83866:	4b11      	ldr	r3, [pc, #68]	; (838ac <vTaskPriorityInherit+0xec>)
   83868:	681b      	ldr	r3, [r3, #0]
   8386a:	431a      	orrs	r2, r3
   8386c:	4b0f      	ldr	r3, [pc, #60]	; (838ac <vTaskPriorityInherit+0xec>)
   8386e:	601a      	str	r2, [r3, #0]
   83870:	68fb      	ldr	r3, [r7, #12]
   83872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83874:	4613      	mov	r3, r2
   83876:	009b      	lsls	r3, r3, #2
   83878:	4413      	add	r3, r2
   8387a:	009b      	lsls	r3, r3, #2
   8387c:	4a09      	ldr	r2, [pc, #36]	; (838a4 <vTaskPriorityInherit+0xe4>)
   8387e:	441a      	add	r2, r3
   83880:	68fb      	ldr	r3, [r7, #12]
   83882:	3304      	adds	r3, #4
   83884:	4610      	mov	r0, r2
   83886:	4619      	mov	r1, r3
   83888:	4b09      	ldr	r3, [pc, #36]	; (838b0 <vTaskPriorityInherit+0xf0>)
   8388a:	4798      	blx	r3
   8388c:	e004      	b.n	83898 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8388e:	4b04      	ldr	r3, [pc, #16]	; (838a0 <vTaskPriorityInherit+0xe0>)
   83890:	681b      	ldr	r3, [r3, #0]
   83892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83894:	68fb      	ldr	r3, [r7, #12]
   83896:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   83898:	3710      	adds	r7, #16
   8389a:	46bd      	mov	sp, r7
   8389c:	bd80      	pop	{r7, pc}
   8389e:	bf00      	nop
   838a0:	2007a4e4 	.word	0x2007a4e4
   838a4:	2007a4e8 	.word	0x2007a4e8
   838a8:	000819f9 	.word	0x000819f9
   838ac:	2007a5c4 	.word	0x2007a5c4
   838b0:	00081941 	.word	0x00081941

000838b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   838b4:	b580      	push	{r7, lr}
   838b6:	b084      	sub	sp, #16
   838b8:	af00      	add	r7, sp, #0
   838ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   838bc:	687b      	ldr	r3, [r7, #4]
   838be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   838c0:	2300      	movs	r3, #0
   838c2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   838c4:	687b      	ldr	r3, [r7, #4]
   838c6:	2b00      	cmp	r3, #0
   838c8:	d056      	beq.n	83978 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   838ca:	68bb      	ldr	r3, [r7, #8]
   838cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838ce:	2b00      	cmp	r3, #0
   838d0:	d102      	bne.n	838d8 <xTaskPriorityDisinherit+0x24>
   838d2:	4b2c      	ldr	r3, [pc, #176]	; (83984 <xTaskPriorityDisinherit+0xd0>)
   838d4:	4798      	blx	r3
   838d6:	e7fe      	b.n	838d6 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   838d8:	68bb      	ldr	r3, [r7, #8]
   838da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838dc:	1e5a      	subs	r2, r3, #1
   838de:	68bb      	ldr	r3, [r7, #8]
   838e0:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   838e2:	68bb      	ldr	r3, [r7, #8]
   838e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   838e6:	68bb      	ldr	r3, [r7, #8]
   838e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   838ea:	429a      	cmp	r2, r3
   838ec:	d044      	beq.n	83978 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   838ee:	68bb      	ldr	r3, [r7, #8]
   838f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838f2:	2b00      	cmp	r3, #0
   838f4:	d140      	bne.n	83978 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   838f6:	68bb      	ldr	r3, [r7, #8]
   838f8:	3304      	adds	r3, #4
   838fa:	4618      	mov	r0, r3
   838fc:	4b22      	ldr	r3, [pc, #136]	; (83988 <xTaskPriorityDisinherit+0xd4>)
   838fe:	4798      	blx	r3
   83900:	4603      	mov	r3, r0
   83902:	2b00      	cmp	r3, #0
   83904:	d115      	bne.n	83932 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   83906:	68bb      	ldr	r3, [r7, #8]
   83908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8390a:	4920      	ldr	r1, [pc, #128]	; (8398c <xTaskPriorityDisinherit+0xd8>)
   8390c:	4613      	mov	r3, r2
   8390e:	009b      	lsls	r3, r3, #2
   83910:	4413      	add	r3, r2
   83912:	009b      	lsls	r3, r3, #2
   83914:	440b      	add	r3, r1
   83916:	681b      	ldr	r3, [r3, #0]
   83918:	2b00      	cmp	r3, #0
   8391a:	d10a      	bne.n	83932 <xTaskPriorityDisinherit+0x7e>
   8391c:	68bb      	ldr	r3, [r7, #8]
   8391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83920:	2201      	movs	r2, #1
   83922:	fa02 f303 	lsl.w	r3, r2, r3
   83926:	43da      	mvns	r2, r3
   83928:	4b19      	ldr	r3, [pc, #100]	; (83990 <xTaskPriorityDisinherit+0xdc>)
   8392a:	681b      	ldr	r3, [r3, #0]
   8392c:	401a      	ands	r2, r3
   8392e:	4b18      	ldr	r3, [pc, #96]	; (83990 <xTaskPriorityDisinherit+0xdc>)
   83930:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   83932:	68bb      	ldr	r3, [r7, #8]
   83934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   83936:	68bb      	ldr	r3, [r7, #8]
   83938:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8393a:	68bb      	ldr	r3, [r7, #8]
   8393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8393e:	f1c3 0205 	rsb	r2, r3, #5
   83942:	68bb      	ldr	r3, [r7, #8]
   83944:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   83946:	68bb      	ldr	r3, [r7, #8]
   83948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8394a:	2201      	movs	r2, #1
   8394c:	409a      	lsls	r2, r3
   8394e:	4b10      	ldr	r3, [pc, #64]	; (83990 <xTaskPriorityDisinherit+0xdc>)
   83950:	681b      	ldr	r3, [r3, #0]
   83952:	431a      	orrs	r2, r3
   83954:	4b0e      	ldr	r3, [pc, #56]	; (83990 <xTaskPriorityDisinherit+0xdc>)
   83956:	601a      	str	r2, [r3, #0]
   83958:	68bb      	ldr	r3, [r7, #8]
   8395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8395c:	4613      	mov	r3, r2
   8395e:	009b      	lsls	r3, r3, #2
   83960:	4413      	add	r3, r2
   83962:	009b      	lsls	r3, r3, #2
   83964:	4a09      	ldr	r2, [pc, #36]	; (8398c <xTaskPriorityDisinherit+0xd8>)
   83966:	441a      	add	r2, r3
   83968:	68bb      	ldr	r3, [r7, #8]
   8396a:	3304      	adds	r3, #4
   8396c:	4610      	mov	r0, r2
   8396e:	4619      	mov	r1, r3
   83970:	4b08      	ldr	r3, [pc, #32]	; (83994 <xTaskPriorityDisinherit+0xe0>)
   83972:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   83974:	2301      	movs	r3, #1
   83976:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   83978:	68fb      	ldr	r3, [r7, #12]
	}
   8397a:	4618      	mov	r0, r3
   8397c:	3710      	adds	r7, #16
   8397e:	46bd      	mov	sp, r7
   83980:	bd80      	pop	{r7, pc}
   83982:	bf00      	nop
   83984:	00081c71 	.word	0x00081c71
   83988:	000819f9 	.word	0x000819f9
   8398c:	2007a4e8 	.word	0x2007a4e8
   83990:	2007a5c4 	.word	0x2007a5c4
   83994:	00081941 	.word	0x00081941

00083998 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   83998:	b480      	push	{r7}
   8399a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   8399c:	4b07      	ldr	r3, [pc, #28]	; (839bc <pvTaskIncrementMutexHeldCount+0x24>)
   8399e:	681b      	ldr	r3, [r3, #0]
   839a0:	2b00      	cmp	r3, #0
   839a2:	d004      	beq.n	839ae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   839a4:	4b05      	ldr	r3, [pc, #20]	; (839bc <pvTaskIncrementMutexHeldCount+0x24>)
   839a6:	681b      	ldr	r3, [r3, #0]
   839a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   839aa:	3201      	adds	r2, #1
   839ac:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   839ae:	4b03      	ldr	r3, [pc, #12]	; (839bc <pvTaskIncrementMutexHeldCount+0x24>)
   839b0:	681b      	ldr	r3, [r3, #0]
	}
   839b2:	4618      	mov	r0, r3
   839b4:	46bd      	mov	sp, r7
   839b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   839ba:	4770      	bx	lr
   839bc:	2007a4e4 	.word	0x2007a4e4

000839c0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   839c0:	b590      	push	{r4, r7, lr}
   839c2:	b087      	sub	sp, #28
   839c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   839c6:	2300      	movs	r3, #0
   839c8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   839ca:	4b10      	ldr	r3, [pc, #64]	; (83a0c <xTimerCreateTimerTask+0x4c>)
   839cc:	4798      	blx	r3

	if( xTimerQueue != NULL )
   839ce:	4b10      	ldr	r3, [pc, #64]	; (83a10 <xTimerCreateTimerTask+0x50>)
   839d0:	681b      	ldr	r3, [r3, #0]
   839d2:	2b00      	cmp	r3, #0
   839d4:	d00f      	beq.n	839f6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   839d6:	2302      	movs	r3, #2
   839d8:	9300      	str	r3, [sp, #0]
   839da:	2300      	movs	r3, #0
   839dc:	9301      	str	r3, [sp, #4]
   839de:	2300      	movs	r3, #0
   839e0:	9302      	str	r3, [sp, #8]
   839e2:	2300      	movs	r3, #0
   839e4:	9303      	str	r3, [sp, #12]
   839e6:	480b      	ldr	r0, [pc, #44]	; (83a14 <xTimerCreateTimerTask+0x54>)
   839e8:	490b      	ldr	r1, [pc, #44]	; (83a18 <xTimerCreateTimerTask+0x58>)
   839ea:	f44f 7282 	mov.w	r2, #260	; 0x104
   839ee:	2300      	movs	r3, #0
   839f0:	4c0a      	ldr	r4, [pc, #40]	; (83a1c <xTimerCreateTimerTask+0x5c>)
   839f2:	47a0      	blx	r4
   839f4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   839f6:	687b      	ldr	r3, [r7, #4]
   839f8:	2b00      	cmp	r3, #0
   839fa:	d102      	bne.n	83a02 <xTimerCreateTimerTask+0x42>
   839fc:	4b08      	ldr	r3, [pc, #32]	; (83a20 <xTimerCreateTimerTask+0x60>)
   839fe:	4798      	blx	r3
   83a00:	e7fe      	b.n	83a00 <xTimerCreateTimerTask+0x40>
	return xReturn;
   83a02:	687b      	ldr	r3, [r7, #4]
}
   83a04:	4618      	mov	r0, r3
   83a06:	370c      	adds	r7, #12
   83a08:	46bd      	mov	sp, r7
   83a0a:	bd90      	pop	{r4, r7, pc}
   83a0c:	00083ef5 	.word	0x00083ef5
   83a10:	2007a610 	.word	0x2007a610
   83a14:	00083b3d 	.word	0x00083b3d
   83a18:	00084e30 	.word	0x00084e30
   83a1c:	00082aad 	.word	0x00082aad
   83a20:	00081c71 	.word	0x00081c71

00083a24 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   83a24:	b590      	push	{r4, r7, lr}
   83a26:	b089      	sub	sp, #36	; 0x24
   83a28:	af00      	add	r7, sp, #0
   83a2a:	60f8      	str	r0, [r7, #12]
   83a2c:	60b9      	str	r1, [r7, #8]
   83a2e:	607a      	str	r2, [r7, #4]
   83a30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   83a32:	2300      	movs	r3, #0
   83a34:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83a36:	4b1d      	ldr	r3, [pc, #116]	; (83aac <xTimerGenericCommand+0x88>)
   83a38:	681b      	ldr	r3, [r3, #0]
   83a3a:	2b00      	cmp	r3, #0
   83a3c:	d030      	beq.n	83aa0 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   83a3e:	68bb      	ldr	r3, [r7, #8]
   83a40:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   83a42:	687b      	ldr	r3, [r7, #4]
   83a44:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   83a46:	68fb      	ldr	r3, [r7, #12]
   83a48:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   83a4a:	68bb      	ldr	r3, [r7, #8]
   83a4c:	2b05      	cmp	r3, #5
   83a4e:	dc1c      	bgt.n	83a8a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   83a50:	4b17      	ldr	r3, [pc, #92]	; (83ab0 <xTimerGenericCommand+0x8c>)
   83a52:	4798      	blx	r3
   83a54:	4603      	mov	r3, r0
   83a56:	2b02      	cmp	r3, #2
   83a58:	d10b      	bne.n	83a72 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   83a5a:	4b14      	ldr	r3, [pc, #80]	; (83aac <xTimerGenericCommand+0x88>)
   83a5c:	681a      	ldr	r2, [r3, #0]
   83a5e:	f107 0310 	add.w	r3, r7, #16
   83a62:	4610      	mov	r0, r2
   83a64:	4619      	mov	r1, r3
   83a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83a68:	2300      	movs	r3, #0
   83a6a:	4c12      	ldr	r4, [pc, #72]	; (83ab4 <xTimerGenericCommand+0x90>)
   83a6c:	47a0      	blx	r4
   83a6e:	61f8      	str	r0, [r7, #28]
   83a70:	e016      	b.n	83aa0 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   83a72:	4b0e      	ldr	r3, [pc, #56]	; (83aac <xTimerGenericCommand+0x88>)
   83a74:	681a      	ldr	r2, [r3, #0]
   83a76:	f107 0310 	add.w	r3, r7, #16
   83a7a:	4610      	mov	r0, r2
   83a7c:	4619      	mov	r1, r3
   83a7e:	2200      	movs	r2, #0
   83a80:	2300      	movs	r3, #0
   83a82:	4c0c      	ldr	r4, [pc, #48]	; (83ab4 <xTimerGenericCommand+0x90>)
   83a84:	47a0      	blx	r4
   83a86:	61f8      	str	r0, [r7, #28]
   83a88:	e00a      	b.n	83aa0 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   83a8a:	4b08      	ldr	r3, [pc, #32]	; (83aac <xTimerGenericCommand+0x88>)
   83a8c:	681a      	ldr	r2, [r3, #0]
   83a8e:	f107 0310 	add.w	r3, r7, #16
   83a92:	4610      	mov	r0, r2
   83a94:	4619      	mov	r1, r3
   83a96:	683a      	ldr	r2, [r7, #0]
   83a98:	2300      	movs	r3, #0
   83a9a:	4c07      	ldr	r4, [pc, #28]	; (83ab8 <xTimerGenericCommand+0x94>)
   83a9c:	47a0      	blx	r4
   83a9e:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   83aa0:	69fb      	ldr	r3, [r7, #28]
}
   83aa2:	4618      	mov	r0, r3
   83aa4:	3724      	adds	r7, #36	; 0x24
   83aa6:	46bd      	mov	sp, r7
   83aa8:	bd90      	pop	{r4, r7, pc}
   83aaa:	bf00      	nop
   83aac:	2007a610 	.word	0x2007a610
   83ab0:	00083785 	.word	0x00083785
   83ab4:	00082279 	.word	0x00082279
   83ab8:	0008243d 	.word	0x0008243d

00083abc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   83abc:	b590      	push	{r4, r7, lr}
   83abe:	b087      	sub	sp, #28
   83ac0:	af02      	add	r7, sp, #8
   83ac2:	6078      	str	r0, [r7, #4]
   83ac4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83ac6:	4b18      	ldr	r3, [pc, #96]	; (83b28 <prvProcessExpiredTimer+0x6c>)
   83ac8:	681b      	ldr	r3, [r3, #0]
   83aca:	68db      	ldr	r3, [r3, #12]
   83acc:	68db      	ldr	r3, [r3, #12]
   83ace:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83ad0:	68fb      	ldr	r3, [r7, #12]
   83ad2:	3304      	adds	r3, #4
   83ad4:	4618      	mov	r0, r3
   83ad6:	4b15      	ldr	r3, [pc, #84]	; (83b2c <prvProcessExpiredTimer+0x70>)
   83ad8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83ada:	68fb      	ldr	r3, [r7, #12]
   83adc:	69db      	ldr	r3, [r3, #28]
   83ade:	2b01      	cmp	r3, #1
   83ae0:	d11b      	bne.n	83b1a <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   83ae2:	68fb      	ldr	r3, [r7, #12]
   83ae4:	699a      	ldr	r2, [r3, #24]
   83ae6:	687b      	ldr	r3, [r7, #4]
   83ae8:	4413      	add	r3, r2
   83aea:	68f8      	ldr	r0, [r7, #12]
   83aec:	4619      	mov	r1, r3
   83aee:	683a      	ldr	r2, [r7, #0]
   83af0:	687b      	ldr	r3, [r7, #4]
   83af2:	4c0f      	ldr	r4, [pc, #60]	; (83b30 <prvProcessExpiredTimer+0x74>)
   83af4:	47a0      	blx	r4
   83af6:	4603      	mov	r3, r0
   83af8:	2b01      	cmp	r3, #1
   83afa:	d10e      	bne.n	83b1a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   83afc:	2300      	movs	r3, #0
   83afe:	9300      	str	r3, [sp, #0]
   83b00:	68f8      	ldr	r0, [r7, #12]
   83b02:	2100      	movs	r1, #0
   83b04:	687a      	ldr	r2, [r7, #4]
   83b06:	2300      	movs	r3, #0
   83b08:	4c0a      	ldr	r4, [pc, #40]	; (83b34 <prvProcessExpiredTimer+0x78>)
   83b0a:	47a0      	blx	r4
   83b0c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   83b0e:	68bb      	ldr	r3, [r7, #8]
   83b10:	2b00      	cmp	r3, #0
   83b12:	d102      	bne.n	83b1a <prvProcessExpiredTimer+0x5e>
   83b14:	4b08      	ldr	r3, [pc, #32]	; (83b38 <prvProcessExpiredTimer+0x7c>)
   83b16:	4798      	blx	r3
   83b18:	e7fe      	b.n	83b18 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83b1a:	68fb      	ldr	r3, [r7, #12]
   83b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83b1e:	68f8      	ldr	r0, [r7, #12]
   83b20:	4798      	blx	r3
}
   83b22:	3714      	adds	r7, #20
   83b24:	46bd      	mov	sp, r7
   83b26:	bd90      	pop	{r4, r7, pc}
   83b28:	2007a608 	.word	0x2007a608
   83b2c:	000819f9 	.word	0x000819f9
   83b30:	00083c81 	.word	0x00083c81
   83b34:	00083a25 	.word	0x00083a25
   83b38:	00081c71 	.word	0x00081c71

00083b3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   83b3c:	b580      	push	{r7, lr}
   83b3e:	b084      	sub	sp, #16
   83b40:	af00      	add	r7, sp, #0
   83b42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   83b44:	f107 0308 	add.w	r3, r7, #8
   83b48:	4618      	mov	r0, r3
   83b4a:	4b05      	ldr	r3, [pc, #20]	; (83b60 <prvTimerTask+0x24>)
   83b4c:	4798      	blx	r3
   83b4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   83b50:	68bb      	ldr	r3, [r7, #8]
   83b52:	68f8      	ldr	r0, [r7, #12]
   83b54:	4619      	mov	r1, r3
   83b56:	4b03      	ldr	r3, [pc, #12]	; (83b64 <prvTimerTask+0x28>)
   83b58:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   83b5a:	4b03      	ldr	r3, [pc, #12]	; (83b68 <prvTimerTask+0x2c>)
   83b5c:	4798      	blx	r3
	}
   83b5e:	e7f1      	b.n	83b44 <prvTimerTask+0x8>
   83b60:	00083bf1 	.word	0x00083bf1
   83b64:	00083b6d 	.word	0x00083b6d
   83b68:	00083d09 	.word	0x00083d09

00083b6c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   83b6c:	b580      	push	{r7, lr}
   83b6e:	b084      	sub	sp, #16
   83b70:	af00      	add	r7, sp, #0
   83b72:	6078      	str	r0, [r7, #4]
   83b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   83b76:	4b17      	ldr	r3, [pc, #92]	; (83bd4 <prvProcessTimerOrBlockTask+0x68>)
   83b78:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83b7a:	f107 0308 	add.w	r3, r7, #8
   83b7e:	4618      	mov	r0, r3
   83b80:	4b15      	ldr	r3, [pc, #84]	; (83bd8 <prvProcessTimerOrBlockTask+0x6c>)
   83b82:	4798      	blx	r3
   83b84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   83b86:	68bb      	ldr	r3, [r7, #8]
   83b88:	2b00      	cmp	r3, #0
   83b8a:	d11e      	bne.n	83bca <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   83b8c:	683b      	ldr	r3, [r7, #0]
   83b8e:	2b00      	cmp	r3, #0
   83b90:	d10a      	bne.n	83ba8 <prvProcessTimerOrBlockTask+0x3c>
   83b92:	687a      	ldr	r2, [r7, #4]
   83b94:	68fb      	ldr	r3, [r7, #12]
   83b96:	429a      	cmp	r2, r3
   83b98:	d806      	bhi.n	83ba8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   83b9a:	4b10      	ldr	r3, [pc, #64]	; (83bdc <prvProcessTimerOrBlockTask+0x70>)
   83b9c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   83b9e:	6878      	ldr	r0, [r7, #4]
   83ba0:	68f9      	ldr	r1, [r7, #12]
   83ba2:	4b0f      	ldr	r3, [pc, #60]	; (83be0 <prvProcessTimerOrBlockTask+0x74>)
   83ba4:	4798      	blx	r3
   83ba6:	e012      	b.n	83bce <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83ba8:	4b0e      	ldr	r3, [pc, #56]	; (83be4 <prvProcessTimerOrBlockTask+0x78>)
   83baa:	681a      	ldr	r2, [r3, #0]
   83bac:	6879      	ldr	r1, [r7, #4]
   83bae:	68fb      	ldr	r3, [r7, #12]
   83bb0:	1acb      	subs	r3, r1, r3
   83bb2:	4610      	mov	r0, r2
   83bb4:	4619      	mov	r1, r3
   83bb6:	4b0c      	ldr	r3, [pc, #48]	; (83be8 <prvProcessTimerOrBlockTask+0x7c>)
   83bb8:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   83bba:	4b08      	ldr	r3, [pc, #32]	; (83bdc <prvProcessTimerOrBlockTask+0x70>)
   83bbc:	4798      	blx	r3
   83bbe:	4603      	mov	r3, r0
   83bc0:	2b00      	cmp	r3, #0
   83bc2:	d104      	bne.n	83bce <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83bc4:	4b09      	ldr	r3, [pc, #36]	; (83bec <prvProcessTimerOrBlockTask+0x80>)
   83bc6:	4798      	blx	r3
   83bc8:	e001      	b.n	83bce <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   83bca:	4b04      	ldr	r3, [pc, #16]	; (83bdc <prvProcessTimerOrBlockTask+0x70>)
   83bcc:	4798      	blx	r3
		}
	}
}
   83bce:	3710      	adds	r7, #16
   83bd0:	46bd      	mov	sp, r7
   83bd2:	bd80      	pop	{r7, pc}
   83bd4:	00082da9 	.word	0x00082da9
   83bd8:	00083c39 	.word	0x00083c39
   83bdc:	00082dc5 	.word	0x00082dc5
   83be0:	00083abd 	.word	0x00083abd
   83be4:	2007a610 	.word	0x2007a610
   83be8:	00082a45 	.word	0x00082a45
   83bec:	00081bd5 	.word	0x00081bd5

00083bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   83bf0:	b480      	push	{r7}
   83bf2:	b085      	sub	sp, #20
   83bf4:	af00      	add	r7, sp, #0
   83bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   83bf8:	4b0e      	ldr	r3, [pc, #56]	; (83c34 <prvGetNextExpireTime+0x44>)
   83bfa:	681b      	ldr	r3, [r3, #0]
   83bfc:	681b      	ldr	r3, [r3, #0]
   83bfe:	2b00      	cmp	r3, #0
   83c00:	bf14      	ite	ne
   83c02:	2300      	movne	r3, #0
   83c04:	2301      	moveq	r3, #1
   83c06:	b2db      	uxtb	r3, r3
   83c08:	461a      	mov	r2, r3
   83c0a:	687b      	ldr	r3, [r7, #4]
   83c0c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   83c0e:	687b      	ldr	r3, [r7, #4]
   83c10:	681b      	ldr	r3, [r3, #0]
   83c12:	2b00      	cmp	r3, #0
   83c14:	d105      	bne.n	83c22 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83c16:	4b07      	ldr	r3, [pc, #28]	; (83c34 <prvGetNextExpireTime+0x44>)
   83c18:	681b      	ldr	r3, [r3, #0]
   83c1a:	68db      	ldr	r3, [r3, #12]
   83c1c:	681b      	ldr	r3, [r3, #0]
   83c1e:	60fb      	str	r3, [r7, #12]
   83c20:	e001      	b.n	83c26 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   83c22:	2300      	movs	r3, #0
   83c24:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   83c26:	68fb      	ldr	r3, [r7, #12]
}
   83c28:	4618      	mov	r0, r3
   83c2a:	3714      	adds	r7, #20
   83c2c:	46bd      	mov	sp, r7
   83c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c32:	4770      	bx	lr
   83c34:	2007a608 	.word	0x2007a608

00083c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   83c38:	b580      	push	{r7, lr}
   83c3a:	b084      	sub	sp, #16
   83c3c:	af00      	add	r7, sp, #0
   83c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   83c40:	4b0c      	ldr	r3, [pc, #48]	; (83c74 <prvSampleTimeNow+0x3c>)
   83c42:	4798      	blx	r3
   83c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   83c46:	4b0c      	ldr	r3, [pc, #48]	; (83c78 <prvSampleTimeNow+0x40>)
   83c48:	681b      	ldr	r3, [r3, #0]
   83c4a:	68fa      	ldr	r2, [r7, #12]
   83c4c:	429a      	cmp	r2, r3
   83c4e:	d205      	bcs.n	83c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   83c50:	4b0a      	ldr	r3, [pc, #40]	; (83c7c <prvSampleTimeNow+0x44>)
   83c52:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   83c54:	687b      	ldr	r3, [r7, #4]
   83c56:	2201      	movs	r2, #1
   83c58:	601a      	str	r2, [r3, #0]
   83c5a:	e002      	b.n	83c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   83c5c:	687b      	ldr	r3, [r7, #4]
   83c5e:	2200      	movs	r2, #0
   83c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   83c62:	4b05      	ldr	r3, [pc, #20]	; (83c78 <prvSampleTimeNow+0x40>)
   83c64:	68fa      	ldr	r2, [r7, #12]
   83c66:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   83c68:	68fb      	ldr	r3, [r7, #12]
}
   83c6a:	4618      	mov	r0, r3
   83c6c:	3710      	adds	r7, #16
   83c6e:	46bd      	mov	sp, r7
   83c70:	bd80      	pop	{r7, pc}
   83c72:	bf00      	nop
   83c74:	00082ee9 	.word	0x00082ee9
   83c78:	2007a614 	.word	0x2007a614
   83c7c:	00083e35 	.word	0x00083e35

00083c80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   83c80:	b580      	push	{r7, lr}
   83c82:	b086      	sub	sp, #24
   83c84:	af00      	add	r7, sp, #0
   83c86:	60f8      	str	r0, [r7, #12]
   83c88:	60b9      	str	r1, [r7, #8]
   83c8a:	607a      	str	r2, [r7, #4]
   83c8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   83c8e:	2300      	movs	r3, #0
   83c90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   83c92:	68fb      	ldr	r3, [r7, #12]
   83c94:	68ba      	ldr	r2, [r7, #8]
   83c96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83c98:	68fb      	ldr	r3, [r7, #12]
   83c9a:	68fa      	ldr	r2, [r7, #12]
   83c9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   83c9e:	68ba      	ldr	r2, [r7, #8]
   83ca0:	687b      	ldr	r3, [r7, #4]
   83ca2:	429a      	cmp	r2, r3
   83ca4:	d812      	bhi.n	83ccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   83ca6:	687a      	ldr	r2, [r7, #4]
   83ca8:	683b      	ldr	r3, [r7, #0]
   83caa:	1ad2      	subs	r2, r2, r3
   83cac:	68fb      	ldr	r3, [r7, #12]
   83cae:	699b      	ldr	r3, [r3, #24]
   83cb0:	429a      	cmp	r2, r3
   83cb2:	d302      	bcc.n	83cba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83cb4:	2301      	movs	r3, #1
   83cb6:	617b      	str	r3, [r7, #20]
   83cb8:	e01b      	b.n	83cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   83cba:	4b10      	ldr	r3, [pc, #64]	; (83cfc <prvInsertTimerInActiveList+0x7c>)
   83cbc:	681a      	ldr	r2, [r3, #0]
   83cbe:	68fb      	ldr	r3, [r7, #12]
   83cc0:	3304      	adds	r3, #4
   83cc2:	4610      	mov	r0, r2
   83cc4:	4619      	mov	r1, r3
   83cc6:	4b0e      	ldr	r3, [pc, #56]	; (83d00 <prvInsertTimerInActiveList+0x80>)
   83cc8:	4798      	blx	r3
   83cca:	e012      	b.n	83cf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   83ccc:	687a      	ldr	r2, [r7, #4]
   83cce:	683b      	ldr	r3, [r7, #0]
   83cd0:	429a      	cmp	r2, r3
   83cd2:	d206      	bcs.n	83ce2 <prvInsertTimerInActiveList+0x62>
   83cd4:	68ba      	ldr	r2, [r7, #8]
   83cd6:	683b      	ldr	r3, [r7, #0]
   83cd8:	429a      	cmp	r2, r3
   83cda:	d302      	bcc.n	83ce2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   83cdc:	2301      	movs	r3, #1
   83cde:	617b      	str	r3, [r7, #20]
   83ce0:	e007      	b.n	83cf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83ce2:	4b08      	ldr	r3, [pc, #32]	; (83d04 <prvInsertTimerInActiveList+0x84>)
   83ce4:	681a      	ldr	r2, [r3, #0]
   83ce6:	68fb      	ldr	r3, [r7, #12]
   83ce8:	3304      	adds	r3, #4
   83cea:	4610      	mov	r0, r2
   83cec:	4619      	mov	r1, r3
   83cee:	4b04      	ldr	r3, [pc, #16]	; (83d00 <prvInsertTimerInActiveList+0x80>)
   83cf0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   83cf2:	697b      	ldr	r3, [r7, #20]
}
   83cf4:	4618      	mov	r0, r3
   83cf6:	3718      	adds	r7, #24
   83cf8:	46bd      	mov	sp, r7
   83cfa:	bd80      	pop	{r7, pc}
   83cfc:	2007a60c 	.word	0x2007a60c
   83d00:	00081989 	.word	0x00081989
   83d04:	2007a608 	.word	0x2007a608

00083d08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   83d08:	b590      	push	{r4, r7, lr}
   83d0a:	b08b      	sub	sp, #44	; 0x2c
   83d0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83d0e:	e070      	b.n	83df2 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   83d10:	68bb      	ldr	r3, [r7, #8]
   83d12:	2b00      	cmp	r3, #0
   83d14:	db6d      	blt.n	83df2 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   83d16:	693b      	ldr	r3, [r7, #16]
   83d18:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   83d1a:	69fb      	ldr	r3, [r7, #28]
   83d1c:	695b      	ldr	r3, [r3, #20]
   83d1e:	2b00      	cmp	r3, #0
   83d20:	d004      	beq.n	83d2c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83d22:	69fb      	ldr	r3, [r7, #28]
   83d24:	3304      	adds	r3, #4
   83d26:	4618      	mov	r0, r3
   83d28:	4b3a      	ldr	r3, [pc, #232]	; (83e14 <prvProcessReceivedCommands+0x10c>)
   83d2a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83d2c:	1d3b      	adds	r3, r7, #4
   83d2e:	4618      	mov	r0, r3
   83d30:	4b39      	ldr	r3, [pc, #228]	; (83e18 <prvProcessReceivedCommands+0x110>)
   83d32:	4798      	blx	r3
   83d34:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   83d36:	68bb      	ldr	r3, [r7, #8]
   83d38:	2b09      	cmp	r3, #9
   83d3a:	d859      	bhi.n	83df0 <prvProcessReceivedCommands+0xe8>
   83d3c:	a201      	add	r2, pc, #4	; (adr r2, 83d44 <prvProcessReceivedCommands+0x3c>)
   83d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d42:	bf00      	nop
   83d44:	00083d6d 	.word	0x00083d6d
   83d48:	00083d6d 	.word	0x00083d6d
   83d4c:	00083d6d 	.word	0x00083d6d
   83d50:	00083df1 	.word	0x00083df1
   83d54:	00083dbf 	.word	0x00083dbf
   83d58:	00083de9 	.word	0x00083de9
   83d5c:	00083d6d 	.word	0x00083d6d
   83d60:	00083d6d 	.word	0x00083d6d
   83d64:	00083df1 	.word	0x00083df1
   83d68:	00083dbf 	.word	0x00083dbf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   83d6c:	68fa      	ldr	r2, [r7, #12]
   83d6e:	69fb      	ldr	r3, [r7, #28]
   83d70:	699b      	ldr	r3, [r3, #24]
   83d72:	441a      	add	r2, r3
   83d74:	68fb      	ldr	r3, [r7, #12]
   83d76:	69f8      	ldr	r0, [r7, #28]
   83d78:	4611      	mov	r1, r2
   83d7a:	69ba      	ldr	r2, [r7, #24]
   83d7c:	4c27      	ldr	r4, [pc, #156]	; (83e1c <prvProcessReceivedCommands+0x114>)
   83d7e:	47a0      	blx	r4
   83d80:	4603      	mov	r3, r0
   83d82:	2b01      	cmp	r3, #1
   83d84:	d11a      	bne.n	83dbc <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83d86:	69fb      	ldr	r3, [r7, #28]
   83d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83d8a:	69f8      	ldr	r0, [r7, #28]
   83d8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83d8e:	69fb      	ldr	r3, [r7, #28]
   83d90:	69db      	ldr	r3, [r3, #28]
   83d92:	2b01      	cmp	r3, #1
   83d94:	d112      	bne.n	83dbc <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83d96:	68fa      	ldr	r2, [r7, #12]
   83d98:	69fb      	ldr	r3, [r7, #28]
   83d9a:	699b      	ldr	r3, [r3, #24]
   83d9c:	4413      	add	r3, r2
   83d9e:	2200      	movs	r2, #0
   83da0:	9200      	str	r2, [sp, #0]
   83da2:	69f8      	ldr	r0, [r7, #28]
   83da4:	2100      	movs	r1, #0
   83da6:	461a      	mov	r2, r3
   83da8:	2300      	movs	r3, #0
   83daa:	4c1d      	ldr	r4, [pc, #116]	; (83e20 <prvProcessReceivedCommands+0x118>)
   83dac:	47a0      	blx	r4
   83dae:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   83db0:	697b      	ldr	r3, [r7, #20]
   83db2:	2b00      	cmp	r3, #0
   83db4:	d102      	bne.n	83dbc <prvProcessReceivedCommands+0xb4>
   83db6:	4b1b      	ldr	r3, [pc, #108]	; (83e24 <prvProcessReceivedCommands+0x11c>)
   83db8:	4798      	blx	r3
   83dba:	e7fe      	b.n	83dba <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   83dbc:	e019      	b.n	83df2 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   83dbe:	68fa      	ldr	r2, [r7, #12]
   83dc0:	69fb      	ldr	r3, [r7, #28]
   83dc2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   83dc4:	69fb      	ldr	r3, [r7, #28]
   83dc6:	699b      	ldr	r3, [r3, #24]
   83dc8:	2b00      	cmp	r3, #0
   83dca:	d102      	bne.n	83dd2 <prvProcessReceivedCommands+0xca>
   83dcc:	4b15      	ldr	r3, [pc, #84]	; (83e24 <prvProcessReceivedCommands+0x11c>)
   83dce:	4798      	blx	r3
   83dd0:	e7fe      	b.n	83dd0 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83dd2:	69fb      	ldr	r3, [r7, #28]
   83dd4:	699a      	ldr	r2, [r3, #24]
   83dd6:	69bb      	ldr	r3, [r7, #24]
   83dd8:	4413      	add	r3, r2
   83dda:	69f8      	ldr	r0, [r7, #28]
   83ddc:	4619      	mov	r1, r3
   83dde:	69ba      	ldr	r2, [r7, #24]
   83de0:	69bb      	ldr	r3, [r7, #24]
   83de2:	4c0e      	ldr	r4, [pc, #56]	; (83e1c <prvProcessReceivedCommands+0x114>)
   83de4:	47a0      	blx	r4
					break;
   83de6:	e004      	b.n	83df2 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   83de8:	69f8      	ldr	r0, [r7, #28]
   83dea:	4b0f      	ldr	r3, [pc, #60]	; (83e28 <prvProcessReceivedCommands+0x120>)
   83dec:	4798      	blx	r3
					break;
   83dee:	e000      	b.n	83df2 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   83df0:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83df2:	4b0e      	ldr	r3, [pc, #56]	; (83e2c <prvProcessReceivedCommands+0x124>)
   83df4:	681a      	ldr	r2, [r3, #0]
   83df6:	f107 0308 	add.w	r3, r7, #8
   83dfa:	4610      	mov	r0, r2
   83dfc:	4619      	mov	r1, r3
   83dfe:	2200      	movs	r2, #0
   83e00:	2300      	movs	r3, #0
   83e02:	4c0b      	ldr	r4, [pc, #44]	; (83e30 <prvProcessReceivedCommands+0x128>)
   83e04:	47a0      	blx	r4
   83e06:	4603      	mov	r3, r0
   83e08:	2b00      	cmp	r3, #0
   83e0a:	d181      	bne.n	83d10 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   83e0c:	3724      	adds	r7, #36	; 0x24
   83e0e:	46bd      	mov	sp, r7
   83e10:	bd90      	pop	{r4, r7, pc}
   83e12:	bf00      	nop
   83e14:	000819f9 	.word	0x000819f9
   83e18:	00083c39 	.word	0x00083c39
   83e1c:	00083c81 	.word	0x00083c81
   83e20:	00083a25 	.word	0x00083a25
   83e24:	00081c71 	.word	0x00081c71
   83e28:	00081f0d 	.word	0x00081f0d
   83e2c:	2007a610 	.word	0x2007a610
   83e30:	00082539 	.word	0x00082539

00083e34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   83e34:	b590      	push	{r4, r7, lr}
   83e36:	b089      	sub	sp, #36	; 0x24
   83e38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83e3a:	e03d      	b.n	83eb8 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83e3c:	4b27      	ldr	r3, [pc, #156]	; (83edc <prvSwitchTimerLists+0xa8>)
   83e3e:	681b      	ldr	r3, [r3, #0]
   83e40:	68db      	ldr	r3, [r3, #12]
   83e42:	681b      	ldr	r3, [r3, #0]
   83e44:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83e46:	4b25      	ldr	r3, [pc, #148]	; (83edc <prvSwitchTimerLists+0xa8>)
   83e48:	681b      	ldr	r3, [r3, #0]
   83e4a:	68db      	ldr	r3, [r3, #12]
   83e4c:	68db      	ldr	r3, [r3, #12]
   83e4e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83e50:	693b      	ldr	r3, [r7, #16]
   83e52:	3304      	adds	r3, #4
   83e54:	4618      	mov	r0, r3
   83e56:	4b22      	ldr	r3, [pc, #136]	; (83ee0 <prvSwitchTimerLists+0xac>)
   83e58:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83e5a:	693b      	ldr	r3, [r7, #16]
   83e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83e5e:	6938      	ldr	r0, [r7, #16]
   83e60:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83e62:	693b      	ldr	r3, [r7, #16]
   83e64:	69db      	ldr	r3, [r3, #28]
   83e66:	2b01      	cmp	r3, #1
   83e68:	d126      	bne.n	83eb8 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83e6a:	693b      	ldr	r3, [r7, #16]
   83e6c:	699a      	ldr	r2, [r3, #24]
   83e6e:	697b      	ldr	r3, [r7, #20]
   83e70:	4413      	add	r3, r2
   83e72:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   83e74:	68fa      	ldr	r2, [r7, #12]
   83e76:	697b      	ldr	r3, [r7, #20]
   83e78:	429a      	cmp	r2, r3
   83e7a:	d90e      	bls.n	83e9a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83e7c:	693b      	ldr	r3, [r7, #16]
   83e7e:	68fa      	ldr	r2, [r7, #12]
   83e80:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83e82:	693b      	ldr	r3, [r7, #16]
   83e84:	693a      	ldr	r2, [r7, #16]
   83e86:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83e88:	4b14      	ldr	r3, [pc, #80]	; (83edc <prvSwitchTimerLists+0xa8>)
   83e8a:	681a      	ldr	r2, [r3, #0]
   83e8c:	693b      	ldr	r3, [r7, #16]
   83e8e:	3304      	adds	r3, #4
   83e90:	4610      	mov	r0, r2
   83e92:	4619      	mov	r1, r3
   83e94:	4b13      	ldr	r3, [pc, #76]	; (83ee4 <prvSwitchTimerLists+0xb0>)
   83e96:	4798      	blx	r3
   83e98:	e00e      	b.n	83eb8 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   83e9a:	2300      	movs	r3, #0
   83e9c:	9300      	str	r3, [sp, #0]
   83e9e:	6938      	ldr	r0, [r7, #16]
   83ea0:	2100      	movs	r1, #0
   83ea2:	697a      	ldr	r2, [r7, #20]
   83ea4:	2300      	movs	r3, #0
   83ea6:	4c10      	ldr	r4, [pc, #64]	; (83ee8 <prvSwitchTimerLists+0xb4>)
   83ea8:	47a0      	blx	r4
   83eaa:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   83eac:	68bb      	ldr	r3, [r7, #8]
   83eae:	2b00      	cmp	r3, #0
   83eb0:	d102      	bne.n	83eb8 <prvSwitchTimerLists+0x84>
   83eb2:	4b0e      	ldr	r3, [pc, #56]	; (83eec <prvSwitchTimerLists+0xb8>)
   83eb4:	4798      	blx	r3
   83eb6:	e7fe      	b.n	83eb6 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83eb8:	4b08      	ldr	r3, [pc, #32]	; (83edc <prvSwitchTimerLists+0xa8>)
   83eba:	681b      	ldr	r3, [r3, #0]
   83ebc:	681b      	ldr	r3, [r3, #0]
   83ebe:	2b00      	cmp	r3, #0
   83ec0:	d1bc      	bne.n	83e3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   83ec2:	4b06      	ldr	r3, [pc, #24]	; (83edc <prvSwitchTimerLists+0xa8>)
   83ec4:	681b      	ldr	r3, [r3, #0]
   83ec6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   83ec8:	4b09      	ldr	r3, [pc, #36]	; (83ef0 <prvSwitchTimerLists+0xbc>)
   83eca:	681a      	ldr	r2, [r3, #0]
   83ecc:	4b03      	ldr	r3, [pc, #12]	; (83edc <prvSwitchTimerLists+0xa8>)
   83ece:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   83ed0:	4b07      	ldr	r3, [pc, #28]	; (83ef0 <prvSwitchTimerLists+0xbc>)
   83ed2:	687a      	ldr	r2, [r7, #4]
   83ed4:	601a      	str	r2, [r3, #0]
}
   83ed6:	371c      	adds	r7, #28
   83ed8:	46bd      	mov	sp, r7
   83eda:	bd90      	pop	{r4, r7, pc}
   83edc:	2007a608 	.word	0x2007a608
   83ee0:	000819f9 	.word	0x000819f9
   83ee4:	00081989 	.word	0x00081989
   83ee8:	00083a25 	.word	0x00083a25
   83eec:	00081c71 	.word	0x00081c71
   83ef0:	2007a60c 	.word	0x2007a60c

00083ef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83ef4:	b580      	push	{r7, lr}
   83ef6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   83ef8:	4b11      	ldr	r3, [pc, #68]	; (83f40 <prvCheckForValidListAndQueue+0x4c>)
   83efa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   83efc:	4b11      	ldr	r3, [pc, #68]	; (83f44 <prvCheckForValidListAndQueue+0x50>)
   83efe:	681b      	ldr	r3, [r3, #0]
   83f00:	2b00      	cmp	r3, #0
   83f02:	d11a      	bne.n	83f3a <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   83f04:	4810      	ldr	r0, [pc, #64]	; (83f48 <prvCheckForValidListAndQueue+0x54>)
   83f06:	4b11      	ldr	r3, [pc, #68]	; (83f4c <prvCheckForValidListAndQueue+0x58>)
   83f08:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   83f0a:	4811      	ldr	r0, [pc, #68]	; (83f50 <prvCheckForValidListAndQueue+0x5c>)
   83f0c:	4b0f      	ldr	r3, [pc, #60]	; (83f4c <prvCheckForValidListAndQueue+0x58>)
   83f0e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   83f10:	4b10      	ldr	r3, [pc, #64]	; (83f54 <prvCheckForValidListAndQueue+0x60>)
   83f12:	4a0d      	ldr	r2, [pc, #52]	; (83f48 <prvCheckForValidListAndQueue+0x54>)
   83f14:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83f16:	4b10      	ldr	r3, [pc, #64]	; (83f58 <prvCheckForValidListAndQueue+0x64>)
   83f18:	4a0d      	ldr	r2, [pc, #52]	; (83f50 <prvCheckForValidListAndQueue+0x5c>)
   83f1a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   83f1c:	2005      	movs	r0, #5
   83f1e:	210c      	movs	r1, #12
   83f20:	2200      	movs	r2, #0
   83f22:	4b0e      	ldr	r3, [pc, #56]	; (83f5c <prvCheckForValidListAndQueue+0x68>)
   83f24:	4798      	blx	r3
   83f26:	4602      	mov	r2, r0
   83f28:	4b06      	ldr	r3, [pc, #24]	; (83f44 <prvCheckForValidListAndQueue+0x50>)
   83f2a:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   83f2c:	4b05      	ldr	r3, [pc, #20]	; (83f44 <prvCheckForValidListAndQueue+0x50>)
   83f2e:	681b      	ldr	r3, [r3, #0]
   83f30:	2b00      	cmp	r3, #0
   83f32:	d102      	bne.n	83f3a <prvCheckForValidListAndQueue+0x46>
   83f34:	4b0a      	ldr	r3, [pc, #40]	; (83f60 <prvCheckForValidListAndQueue+0x6c>)
   83f36:	4798      	blx	r3
   83f38:	e7fe      	b.n	83f38 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83f3a:	4b0a      	ldr	r3, [pc, #40]	; (83f64 <prvCheckForValidListAndQueue+0x70>)
   83f3c:	4798      	blx	r3
}
   83f3e:	bd80      	pop	{r7, pc}
   83f40:	00081bf5 	.word	0x00081bf5
   83f44:	2007a610 	.word	0x2007a610
   83f48:	2007a5e0 	.word	0x2007a5e0
   83f4c:	000818e9 	.word	0x000818e9
   83f50:	2007a5f4 	.word	0x2007a5f4
   83f54:	2007a608 	.word	0x2007a608
   83f58:	2007a60c 	.word	0x2007a60c
   83f5c:	000821ed 	.word	0x000821ed
   83f60:	00081c71 	.word	0x00081c71
   83f64:	00081c39 	.word	0x00081c39

00083f68 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   83f68:	b480      	push	{r7}
   83f6a:	b083      	sub	sp, #12
   83f6c:	af00      	add	r7, sp, #0
   83f6e:	4603      	mov	r3, r0
   83f70:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83f72:	4b08      	ldr	r3, [pc, #32]	; (83f94 <NVIC_EnableIRQ+0x2c>)
   83f74:	f997 2007 	ldrsb.w	r2, [r7, #7]
   83f78:	0952      	lsrs	r2, r2, #5
   83f7a:	79f9      	ldrb	r1, [r7, #7]
   83f7c:	f001 011f 	and.w	r1, r1, #31
   83f80:	2001      	movs	r0, #1
   83f82:	fa00 f101 	lsl.w	r1, r0, r1
   83f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83f8a:	370c      	adds	r7, #12
   83f8c:	46bd      	mov	sp, r7
   83f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83f92:	4770      	bx	lr
   83f94:	e000e100 	.word	0xe000e100

00083f98 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   83f98:	b480      	push	{r7}
   83f9a:	b083      	sub	sp, #12
   83f9c:	af00      	add	r7, sp, #0
   83f9e:	4603      	mov	r3, r0
   83fa0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   83fa2:	4b09      	ldr	r3, [pc, #36]	; (83fc8 <NVIC_DisableIRQ+0x30>)
   83fa4:	f997 2007 	ldrsb.w	r2, [r7, #7]
   83fa8:	0952      	lsrs	r2, r2, #5
   83faa:	79f9      	ldrb	r1, [r7, #7]
   83fac:	f001 011f 	and.w	r1, r1, #31
   83fb0:	2001      	movs	r0, #1
   83fb2:	fa00 f101 	lsl.w	r1, r0, r1
   83fb6:	3220      	adds	r2, #32
   83fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83fbc:	370c      	adds	r7, #12
   83fbe:	46bd      	mov	sp, r7
   83fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   83fc4:	4770      	bx	lr
   83fc6:	bf00      	nop
   83fc8:	e000e100 	.word	0xe000e100

00083fcc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   83fcc:	b480      	push	{r7}
   83fce:	b083      	sub	sp, #12
   83fd0:	af00      	add	r7, sp, #0
   83fd2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83fd4:	687b      	ldr	r3, [r7, #4]
   83fd6:	2b07      	cmp	r3, #7
   83fd8:	d825      	bhi.n	84026 <osc_get_rate+0x5a>
   83fda:	a201      	add	r2, pc, #4	; (adr r2, 83fe0 <osc_get_rate+0x14>)
   83fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83fe0:	00084001 	.word	0x00084001
   83fe4:	00084007 	.word	0x00084007
   83fe8:	0008400d 	.word	0x0008400d
   83fec:	00084013 	.word	0x00084013
   83ff0:	00084017 	.word	0x00084017
   83ff4:	0008401b 	.word	0x0008401b
   83ff8:	0008401f 	.word	0x0008401f
   83ffc:	00084023 	.word	0x00084023
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   84000:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84004:	e010      	b.n	84028 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   84006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8400a:	e00d      	b.n	84028 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8400c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84010:	e00a      	b.n	84028 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   84012:	4b08      	ldr	r3, [pc, #32]	; (84034 <osc_get_rate+0x68>)
   84014:	e008      	b.n	84028 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   84016:	4b08      	ldr	r3, [pc, #32]	; (84038 <osc_get_rate+0x6c>)
   84018:	e006      	b.n	84028 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8401a:	4b08      	ldr	r3, [pc, #32]	; (8403c <osc_get_rate+0x70>)
   8401c:	e004      	b.n	84028 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8401e:	4b07      	ldr	r3, [pc, #28]	; (8403c <osc_get_rate+0x70>)
   84020:	e002      	b.n	84028 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   84022:	4b06      	ldr	r3, [pc, #24]	; (8403c <osc_get_rate+0x70>)
   84024:	e000      	b.n	84028 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   84026:	2300      	movs	r3, #0
}
   84028:	4618      	mov	r0, r3
   8402a:	370c      	adds	r7, #12
   8402c:	46bd      	mov	sp, r7
   8402e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84032:	4770      	bx	lr
   84034:	003d0900 	.word	0x003d0900
   84038:	007a1200 	.word	0x007a1200
   8403c:	00b71b00 	.word	0x00b71b00

00084040 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   84040:	b580      	push	{r7, lr}
   84042:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   84044:	2006      	movs	r0, #6
   84046:	4b04      	ldr	r3, [pc, #16]	; (84058 <sysclk_get_main_hz+0x18>)
   84048:	4798      	blx	r3
   8404a:	4602      	mov	r2, r0
   8404c:	4613      	mov	r3, r2
   8404e:	00db      	lsls	r3, r3, #3
   84050:	1a9b      	subs	r3, r3, r2
   84052:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   84054:	4618      	mov	r0, r3
   84056:	bd80      	pop	{r7, pc}
   84058:	00083fcd 	.word	0x00083fcd

0008405c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8405c:	b580      	push	{r7, lr}
   8405e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   84060:	4b02      	ldr	r3, [pc, #8]	; (8406c <sysclk_get_cpu_hz+0x10>)
   84062:	4798      	blx	r3
   84064:	4603      	mov	r3, r0
   84066:	085b      	lsrs	r3, r3, #1
}
   84068:	4618      	mov	r0, r3
   8406a:	bd80      	pop	{r7, pc}
   8406c:	00084041 	.word	0x00084041

00084070 <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   84070:	b580      	push	{r7, lr}
   84072:	b082      	sub	sp, #8
   84074:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   84076:	481b      	ldr	r0, [pc, #108]	; (840e4 <CAN1_Handler+0x74>)
   84078:	491b      	ldr	r1, [pc, #108]	; (840e8 <CAN1_Handler+0x78>)
   8407a:	4b1c      	ldr	r3, [pc, #112]	; (840ec <CAN1_Handler+0x7c>)
   8407c:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   8407e:	481c      	ldr	r0, [pc, #112]	; (840f0 <CAN1_Handler+0x80>)
   84080:	4b1c      	ldr	r3, [pc, #112]	; (840f4 <CAN1_Handler+0x84>)
   84082:	4798      	blx	r3
   84084:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   84086:	683b      	ldr	r3, [r7, #0]
   84088:	b2db      	uxtb	r3, r3
   8408a:	2b00      	cmp	r3, #0
   8408c:	d026      	beq.n	840dc <CAN1_Handler+0x6c>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8408e:	2300      	movs	r3, #0
   84090:	71fb      	strb	r3, [r7, #7]
   84092:	e020      	b.n	840d6 <CAN1_Handler+0x66>
			ul_status = can_mailbox_get_status(CAN1, i);
   84094:	79fb      	ldrb	r3, [r7, #7]
   84096:	4816      	ldr	r0, [pc, #88]	; (840f0 <CAN1_Handler+0x80>)
   84098:	4619      	mov	r1, r3
   8409a:	4b17      	ldr	r3, [pc, #92]	; (840f8 <CAN1_Handler+0x88>)
   8409c:	4798      	blx	r3
   8409e:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   840a0:	683b      	ldr	r3, [r7, #0]
   840a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   840a6:	2b00      	cmp	r3, #0
   840a8:	d012      	beq.n	840d0 <CAN1_Handler+0x60>
				can1_mailbox.ul_mb_idx = i;
   840aa:	79fa      	ldrb	r2, [r7, #7]
   840ac:	4b0d      	ldr	r3, [pc, #52]	; (840e4 <CAN1_Handler+0x74>)
   840ae:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   840b0:	4b0c      	ldr	r3, [pc, #48]	; (840e4 <CAN1_Handler+0x74>)
   840b2:	683a      	ldr	r2, [r7, #0]
   840b4:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   840b6:	480e      	ldr	r0, [pc, #56]	; (840f0 <CAN1_Handler+0x80>)
   840b8:	490a      	ldr	r1, [pc, #40]	; (840e4 <CAN1_Handler+0x74>)
   840ba:	4b10      	ldr	r3, [pc, #64]	; (840fc <CAN1_Handler+0x8c>)
   840bc:	4798      	blx	r3
				
				/* Decode CAN Message */
				decode_can_msg(&can1_mailbox, CAN1);
   840be:	4809      	ldr	r0, [pc, #36]	; (840e4 <CAN1_Handler+0x74>)
   840c0:	490b      	ldr	r1, [pc, #44]	; (840f0 <CAN1_Handler+0x80>)
   840c2:	4b0f      	ldr	r3, [pc, #60]	; (84100 <CAN1_Handler+0x90>)
   840c4:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   840c6:	4807      	ldr	r0, [pc, #28]	; (840e4 <CAN1_Handler+0x74>)
   840c8:	4907      	ldr	r1, [pc, #28]	; (840e8 <CAN1_Handler+0x78>)
   840ca:	4b0e      	ldr	r3, [pc, #56]	; (84104 <CAN1_Handler+0x94>)
   840cc:	4798      	blx	r3
				break;
   840ce:	e005      	b.n	840dc <CAN1_Handler+0x6c>
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   840d0:	79fb      	ldrb	r3, [r7, #7]
   840d2:	3301      	adds	r3, #1
   840d4:	71fb      	strb	r3, [r7, #7]
   840d6:	79fb      	ldrb	r3, [r7, #7]
   840d8:	2b07      	cmp	r3, #7
   840da:	d9db      	bls.n	84094 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   840dc:	3708      	adds	r7, #8
   840de:	46bd      	mov	sp, r7
   840e0:	bd80      	pop	{r7, pc}
   840e2:	bf00      	nop
   840e4:	2007a624 	.word	0x2007a624
   840e8:	2007a64c 	.word	0x2007a64c
   840ec:	0008451d 	.word	0x0008451d
   840f0:	400b8000 	.word	0x400b8000
   840f4:	000808c1 	.word	0x000808c1
   840f8:	00080905 	.word	0x00080905
   840fc:	00080a85 	.word	0x00080a85
   84100:	000841a9 	.word	0x000841a9
   84104:	0008458d 	.word	0x0008458d

00084108 <CAN0_Handler>:

/**
 * \brief Default interrupt handler for CAN0
 */
void CAN0_Handler(void)
{
   84108:	b580      	push	{r7, lr}
   8410a:	b082      	sub	sp, #8
   8410c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   8410e:	481c      	ldr	r0, [pc, #112]	; (84180 <CAN0_Handler+0x78>)
   84110:	491c      	ldr	r1, [pc, #112]	; (84184 <CAN0_Handler+0x7c>)
   84112:	4b1d      	ldr	r3, [pc, #116]	; (84188 <CAN0_Handler+0x80>)
   84114:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   84116:	481d      	ldr	r0, [pc, #116]	; (8418c <CAN0_Handler+0x84>)
   84118:	4b1d      	ldr	r3, [pc, #116]	; (84190 <CAN0_Handler+0x88>)
   8411a:	4798      	blx	r3
   8411c:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8411e:	683b      	ldr	r3, [r7, #0]
   84120:	b2db      	uxtb	r3, r3
   84122:	2b00      	cmp	r3, #0
   84124:	d029      	beq.n	8417a <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84126:	2300      	movs	r3, #0
   84128:	71fb      	strb	r3, [r7, #7]
   8412a:	e023      	b.n	84174 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   8412c:	79fb      	ldrb	r3, [r7, #7]
   8412e:	4817      	ldr	r0, [pc, #92]	; (8418c <CAN0_Handler+0x84>)
   84130:	4619      	mov	r1, r3
   84132:	4b18      	ldr	r3, [pc, #96]	; (84194 <CAN0_Handler+0x8c>)
   84134:	4798      	blx	r3
   84136:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   84138:	683b      	ldr	r3, [r7, #0]
   8413a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8413e:	2b00      	cmp	r3, #0
   84140:	d015      	beq.n	8416e <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   84142:	79fa      	ldrb	r2, [r7, #7]
   84144:	4b0e      	ldr	r3, [pc, #56]	; (84180 <CAN0_Handler+0x78>)
   84146:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   84148:	4b0d      	ldr	r3, [pc, #52]	; (84180 <CAN0_Handler+0x78>)
   8414a:	683a      	ldr	r2, [r7, #0]
   8414c:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   8414e:	480f      	ldr	r0, [pc, #60]	; (8418c <CAN0_Handler+0x84>)
   84150:	490b      	ldr	r1, [pc, #44]	; (84180 <CAN0_Handler+0x78>)
   84152:	4b11      	ldr	r3, [pc, #68]	; (84198 <CAN0_Handler+0x90>)
   84154:	4798      	blx	r3
				g_ul_recv_status = 1;
   84156:	4b11      	ldr	r3, [pc, #68]	; (8419c <CAN0_Handler+0x94>)
   84158:	2201      	movs	r2, #1
   8415a:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can0_mailbox, CAN0);
   8415c:	4808      	ldr	r0, [pc, #32]	; (84180 <CAN0_Handler+0x78>)
   8415e:	490b      	ldr	r1, [pc, #44]	; (8418c <CAN0_Handler+0x84>)
   84160:	4b0f      	ldr	r3, [pc, #60]	; (841a0 <CAN0_Handler+0x98>)
   84162:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   84164:	4806      	ldr	r0, [pc, #24]	; (84180 <CAN0_Handler+0x78>)
   84166:	4907      	ldr	r1, [pc, #28]	; (84184 <CAN0_Handler+0x7c>)
   84168:	4b0e      	ldr	r3, [pc, #56]	; (841a4 <CAN0_Handler+0x9c>)
   8416a:	4798      	blx	r3
				break;
   8416c:	e005      	b.n	8417a <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8416e:	79fb      	ldrb	r3, [r7, #7]
   84170:	3301      	adds	r3, #1
   84172:	71fb      	strb	r3, [r7, #7]
   84174:	79fb      	ldrb	r3, [r7, #7]
   84176:	2b07      	cmp	r3, #7
   84178:	d9d8      	bls.n	8412c <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   8417a:	3708      	adds	r7, #8
   8417c:	46bd      	mov	sp, r7
   8417e:	bd80      	pop	{r7, pc}
   84180:	2007a66c 	.word	0x2007a66c
   84184:	2007a68c 	.word	0x2007a68c
   84188:	0008451d 	.word	0x0008451d
   8418c:	400b4000 	.word	0x400b4000
   84190:	000808c1 	.word	0x000808c1
   84194:	00080905 	.word	0x00080905
   84198:	00080a85 	.word	0x00080a85
   8419c:	2007a618 	.word	0x2007a618
   841a0:	000841a9 	.word	0x000841a9
   841a4:	0008458d 	.word	0x0008458d

000841a8 <decode_can_msg>:
 * the message received.
 * @param *controller:  	CAN sending controller
 * @param *p_mailbox:		CAN mailbox structure of sending controller
 */
void decode_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   841a8:	b580      	push	{r7, lr}
   841aa:	b084      	sub	sp, #16
   841ac:	af00      	add	r7, sp, #0
   841ae:	6078      	str	r0, [r7, #4]
   841b0:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   841b2:	687b      	ldr	r3, [r7, #4]
   841b4:	699b      	ldr	r3, [r3, #24]
   841b6:	60fb      	str	r3, [r7, #12]
	if(controller == CAN0)
   841b8:	683a      	ldr	r2, [r7, #0]
   841ba:	4b56      	ldr	r3, [pc, #344]	; (84314 <decode_can_msg+0x16c>)
   841bc:	429a      	cmp	r2, r3
   841be:	d102      	bne.n	841c6 <decode_can_msg+0x1e>
		pio_toggle_pin(LED0_GPIO);
   841c0:	203b      	movs	r0, #59	; 0x3b
   841c2:	4b55      	ldr	r3, [pc, #340]	; (84318 <decode_can_msg+0x170>)
   841c4:	4798      	blx	r3
	if(controller == CAN1)
   841c6:	683a      	ldr	r2, [r7, #0]
   841c8:	4b54      	ldr	r3, [pc, #336]	; (8431c <decode_can_msg+0x174>)
   841ca:	429a      	cmp	r2, r3
   841cc:	d102      	bne.n	841d4 <decode_can_msg+0x2c>
		pio_toggle_pin(LED1_GPIO);
   841ce:	2055      	movs	r0, #85	; 0x55
   841d0:	4b51      	ldr	r3, [pc, #324]	; (84318 <decode_can_msg+0x170>)
   841d2:	4798      	blx	r3
	if (ul_data_incom == COMMAND_OUT)
   841d4:	68fb      	ldr	r3, [r7, #12]
   841d6:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   841da:	d102      	bne.n	841e2 <decode_can_msg+0x3a>
		pio_toggle_pin(LED0_GPIO);
   841dc:	203b      	movs	r0, #59	; 0x3b
   841de:	4b4e      	ldr	r3, [pc, #312]	; (84318 <decode_can_msg+0x170>)
   841e0:	4798      	blx	r3
	if (ul_data_incom == COMMAND_IN)
   841e2:	68fb      	ldr	r3, [r7, #12]
   841e4:	f1b3 3f11 	cmp.w	r3, #286331153	; 0x11111111
   841e8:	d102      	bne.n	841f0 <decode_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);
   841ea:	2055      	movs	r0, #85	; 0x55
   841ec:	4b4a      	ldr	r3, [pc, #296]	; (84318 <decode_can_msg+0x170>)
   841ee:	4798      	blx	r3
	if (ul_data_incom == DUMMY_COMMAND)
   841f0:	68fb      	ldr	r3, [r7, #12]
   841f2:	f1b3 3fff 	cmp.w	r3, #4294967295
   841f6:	d102      	bne.n	841fe <decode_can_msg+0x56>
		pio_toggle_pin(LED1_GPIO);
   841f8:	2055      	movs	r0, #85	; 0x55
   841fa:	4b47      	ldr	r3, [pc, #284]	; (84318 <decode_can_msg+0x170>)
   841fc:	4798      	blx	r3
	if (ul_data_incom == MSG_ACK)
   841fe:	68fb      	ldr	r3, [r7, #12]
   84200:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   84204:	d102      	bne.n	8420c <decode_can_msg+0x64>
		pio_toggle_pin(LED1_GPIO);
   84206:	2055      	movs	r0, #85	; 0x55
   84208:	4b43      	ldr	r3, [pc, #268]	; (84318 <decode_can_msg+0x170>)
   8420a:	4798      	blx	r3

	if ((ul_data_incom == COMMAND_IN) & (controller == CAN0)) 
   8420c:	68fb      	ldr	r3, [r7, #12]
   8420e:	f1b3 3f11 	cmp.w	r3, #286331153	; 0x11111111
   84212:	bf14      	ite	ne
   84214:	2300      	movne	r3, #0
   84216:	2301      	moveq	r3, #1
   84218:	b2da      	uxtb	r2, r3
   8421a:	6839      	ldr	r1, [r7, #0]
   8421c:	4b3d      	ldr	r3, [pc, #244]	; (84314 <decode_can_msg+0x16c>)
   8421e:	4299      	cmp	r1, r3
   84220:	bf14      	ite	ne
   84222:	2300      	movne	r3, #0
   84224:	2301      	moveq	r3, #1
   84226:	b2db      	uxtb	r3, r3
   84228:	4013      	ands	r3, r2
   8422a:	b2db      	uxtb	r3, r3
   8422c:	2b00      	cmp	r3, #0
   8422e:	d004      	beq.n	8423a <decode_can_msg+0x92>
	{
		// Command has been received, respond.
		pio_toggle_pin(LED0_GPIO);
   84230:	203b      	movs	r0, #59	; 0x3b
   84232:	4b39      	ldr	r3, [pc, #228]	; (84318 <decode_can_msg+0x170>)
   84234:	4798      	blx	r3
		command_in();
   84236:	4b3a      	ldr	r3, [pc, #232]	; (84320 <decode_can_msg+0x178>)
   84238:	4798      	blx	r3
	}
	if ((ul_data_incom == COMMAND_OUT) & (controller == CAN1))
   8423a:	68fb      	ldr	r3, [r7, #12]
   8423c:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   84240:	bf14      	ite	ne
   84242:	2300      	movne	r3, #0
   84244:	2301      	moveq	r3, #1
   84246:	b2da      	uxtb	r2, r3
   84248:	6839      	ldr	r1, [r7, #0]
   8424a:	4b34      	ldr	r3, [pc, #208]	; (8431c <decode_can_msg+0x174>)
   8424c:	4299      	cmp	r1, r3
   8424e:	bf14      	ite	ne
   84250:	2300      	movne	r3, #0
   84252:	2301      	moveq	r3, #1
   84254:	b2db      	uxtb	r3, r3
   84256:	4013      	ands	r3, r2
   84258:	b2db      	uxtb	r3, r3
   8425a:	2b00      	cmp	r3, #0
   8425c:	d002      	beq.n	84264 <decode_can_msg+0xbc>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the response to the command
   8425e:	2056      	movs	r0, #86	; 0x56
   84260:	4b2d      	ldr	r3, [pc, #180]	; (84318 <decode_can_msg+0x170>)
   84262:	4798      	blx	r3
	}								// has been received.
	if ((ul_data_incom == HK_TRANSMIT) & (controller == CAN1))
   84264:	68fa      	ldr	r2, [r7, #12]
   84266:	4b2f      	ldr	r3, [pc, #188]	; (84324 <decode_can_msg+0x17c>)
   84268:	429a      	cmp	r2, r3
   8426a:	bf14      	ite	ne
   8426c:	2300      	movne	r3, #0
   8426e:	2301      	moveq	r3, #1
   84270:	b2da      	uxtb	r2, r3
   84272:	6839      	ldr	r1, [r7, #0]
   84274:	4b29      	ldr	r3, [pc, #164]	; (8431c <decode_can_msg+0x174>)
   84276:	4299      	cmp	r1, r3
   84278:	bf14      	ite	ne
   8427a:	2300      	movne	r3, #0
   8427c:	2301      	moveq	r3, #1
   8427e:	b2db      	uxtb	r3, r3
   84280:	4013      	ands	r3, r2
   84282:	b2db      	uxtb	r3, r3
   84284:	2b00      	cmp	r3, #0
   84286:	d002      	beq.n	8428e <decode_can_msg+0xe6>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   84288:	2057      	movs	r0, #87	; 0x57
   8428a:	4b23      	ldr	r3, [pc, #140]	; (84318 <decode_can_msg+0x170>)
   8428c:	4798      	blx	r3
	}
	if ((ul_data_incom == DUMMY_COMMAND) & (controller == CAN1))
   8428e:	68fb      	ldr	r3, [r7, #12]
   84290:	f1b3 3fff 	cmp.w	r3, #4294967295
   84294:	bf14      	ite	ne
   84296:	2300      	movne	r3, #0
   84298:	2301      	moveq	r3, #1
   8429a:	b2da      	uxtb	r2, r3
   8429c:	6839      	ldr	r1, [r7, #0]
   8429e:	4b1f      	ldr	r3, [pc, #124]	; (8431c <decode_can_msg+0x174>)
   842a0:	4299      	cmp	r1, r3
   842a2:	bf14      	ite	ne
   842a4:	2300      	movne	r3, #0
   842a6:	2301      	moveq	r3, #1
   842a8:	b2db      	uxtb	r3, r3
   842aa:	4013      	ands	r3, r2
   842ac:	b2db      	uxtb	r3, r3
   842ae:	2b00      	cmp	r3, #0
   842b0:	d002      	beq.n	842b8 <decode_can_msg+0x110>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   842b2:	2057      	movs	r0, #87	; 0x57
   842b4:	4b18      	ldr	r3, [pc, #96]	; (84318 <decode_can_msg+0x170>)
   842b6:	4798      	blx	r3
	}
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   842b8:	68fb      	ldr	r3, [r7, #12]
   842ba:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   842be:	bf14      	ite	ne
   842c0:	2300      	movne	r3, #0
   842c2:	2301      	moveq	r3, #1
   842c4:	b2da      	uxtb	r2, r3
   842c6:	6839      	ldr	r1, [r7, #0]
   842c8:	4b14      	ldr	r3, [pc, #80]	; (8431c <decode_can_msg+0x174>)
   842ca:	4299      	cmp	r1, r3
   842cc:	bf14      	ite	ne
   842ce:	2300      	movne	r3, #0
   842d0:	2301      	moveq	r3, #1
   842d2:	b2db      	uxtb	r3, r3
   842d4:	4013      	ands	r3, r2
   842d6:	b2db      	uxtb	r3, r3
   842d8:	2b00      	cmp	r3, #0
   842da:	d002      	beq.n	842e2 <decode_can_msg+0x13a>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   842dc:	2057      	movs	r0, #87	; 0x57
   842de:	4b0e      	ldr	r3, [pc, #56]	; (84318 <decode_can_msg+0x170>)
   842e0:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN0))
   842e2:	68fb      	ldr	r3, [r7, #12]
   842e4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   842e8:	bf14      	ite	ne
   842ea:	2300      	movne	r3, #0
   842ec:	2301      	moveq	r3, #1
   842ee:	b2da      	uxtb	r2, r3
   842f0:	6839      	ldr	r1, [r7, #0]
   842f2:	4b08      	ldr	r3, [pc, #32]	; (84314 <decode_can_msg+0x16c>)
   842f4:	4299      	cmp	r1, r3
   842f6:	bf14      	ite	ne
   842f8:	2300      	movne	r3, #0
   842fa:	2301      	moveq	r3, #1
   842fc:	b2db      	uxtb	r3, r3
   842fe:	4013      	ands	r3, r2
   84300:	b2db      	uxtb	r3, r3
   84302:	2b00      	cmp	r3, #0
   84304:	d002      	beq.n	8430c <decode_can_msg+0x164>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of housekeeping.
   84306:	2057      	movs	r0, #87	; 0x57
   84308:	4b03      	ldr	r3, [pc, #12]	; (84318 <decode_can_msg+0x170>)
   8430a:	4798      	blx	r3
	}	
	return;
   8430c:	bf00      	nop
}
   8430e:	3710      	adds	r7, #16
   84310:	46bd      	mov	sp, r7
   84312:	bd80      	pop	{r7, pc}
   84314:	400b4000 	.word	0x400b4000
   84318:	00080e85 	.word	0x00080e85
   8431c:	400b8000 	.word	0x400b8000
   84320:	00084429 	.word	0x00084429
   84324:	12345678 	.word	0x12345678

00084328 <reset_mailbox_conf>:
/**
 * \brief Resets the mailbox configure structure.  
 * @param *p_mailbox:		Mailbox structure that will be reset. 
 */
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   84328:	b480      	push	{r7}
   8432a:	b083      	sub	sp, #12
   8432c:	af00      	add	r7, sp, #0
   8432e:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   84330:	687b      	ldr	r3, [r7, #4]
   84332:	2200      	movs	r2, #0
   84334:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   84336:	687b      	ldr	r3, [r7, #4]
   84338:	2200      	movs	r2, #0
   8433a:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   8433c:	687b      	ldr	r3, [r7, #4]
   8433e:	2200      	movs	r2, #0
   84340:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   84342:	687b      	ldr	r3, [r7, #4]
   84344:	2200      	movs	r2, #0
   84346:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   84348:	687b      	ldr	r3, [r7, #4]
   8434a:	2200      	movs	r2, #0
   8434c:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   8434e:	687b      	ldr	r3, [r7, #4]
   84350:	2200      	movs	r2, #0
   84352:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   84354:	687b      	ldr	r3, [r7, #4]
   84356:	2200      	movs	r2, #0
   84358:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   8435a:	687b      	ldr	r3, [r7, #4]
   8435c:	2200      	movs	r2, #0
   8435e:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   84360:	687b      	ldr	r3, [r7, #4]
   84362:	2200      	movs	r2, #0
   84364:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   84366:	687b      	ldr	r3, [r7, #4]
   84368:	2200      	movs	r2, #0
   8436a:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   8436c:	687b      	ldr	r3, [r7, #4]
   8436e:	2200      	movs	r2, #0
   84370:	61da      	str	r2, [r3, #28]
}
   84372:	370c      	adds	r7, #12
   84374:	46bd      	mov	sp, r7
   84376:	f85d 7b04 	ldr.w	r7, [sp], #4
   8437a:	4770      	bx	lr

0008437c <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   8437c:	b580      	push	{r7, lr}
   8437e:	b08a      	sub	sp, #40	; 0x28
   84380:	af00      	add	r7, sp, #0
   84382:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   84384:	f107 0308 	add.w	r3, r7, #8
   84388:	481e      	ldr	r0, [pc, #120]	; (84404 <request_housekeeping+0x88>)
   8438a:	4619      	mov	r1, r3
   8438c:	4b1e      	ldr	r3, [pc, #120]	; (84408 <request_housekeeping+0x8c>)
   8438e:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   84390:	481c      	ldr	r0, [pc, #112]	; (84404 <request_housekeeping+0x88>)
   84392:	4b1e      	ldr	r3, [pc, #120]	; (8440c <request_housekeeping+0x90>)
   84394:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   84396:	4b1b      	ldr	r3, [pc, #108]	; (84404 <request_housekeeping+0x88>)
   84398:	2206      	movs	r2, #6
   8439a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   8439c:	4b19      	ldr	r3, [pc, #100]	; (84404 <request_housekeeping+0x88>)
   8439e:	2203      	movs	r2, #3
   843a0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   843a2:	4b18      	ldr	r3, [pc, #96]	; (84404 <request_housekeeping+0x88>)
   843a4:	2214      	movs	r2, #20
   843a6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   843a8:	4b16      	ldr	r3, [pc, #88]	; (84404 <request_housekeeping+0x88>)
   843aa:	2200      	movs	r2, #0
   843ac:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   843ae:	4b15      	ldr	r3, [pc, #84]	; (84404 <request_housekeeping+0x88>)
   843b0:	2200      	movs	r2, #0
   843b2:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   843b4:	4816      	ldr	r0, [pc, #88]	; (84410 <request_housekeeping+0x94>)
   843b6:	4913      	ldr	r1, [pc, #76]	; (84404 <request_housekeeping+0x88>)
   843b8:	4b16      	ldr	r3, [pc, #88]	; (84414 <request_housekeeping+0x98>)
   843ba:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   843bc:	687b      	ldr	r3, [r7, #4]
   843be:	049a      	lsls	r2, r3, #18
   843c0:	4b15      	ldr	r3, [pc, #84]	; (84418 <request_housekeeping+0x9c>)
   843c2:	4013      	ands	r3, r2
   843c4:	4a0f      	ldr	r2, [pc, #60]	; (84404 <request_housekeeping+0x88>)
   843c6:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = HK_REQUEST;				// shifted over to the standard frame position.
   843c8:	4b0e      	ldr	r3, [pc, #56]	; (84404 <request_housekeeping+0x88>)
   843ca:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   843ce:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = HK_REQUEST;
   843d0:	4b0c      	ldr	r3, [pc, #48]	; (84404 <request_housekeeping+0x88>)
   843d2:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   843d6:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   843d8:	4b0a      	ldr	r3, [pc, #40]	; (84404 <request_housekeeping+0x88>)
   843da:	2208      	movs	r2, #8
   843dc:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   843de:	480c      	ldr	r0, [pc, #48]	; (84410 <request_housekeeping+0x94>)
   843e0:	4908      	ldr	r1, [pc, #32]	; (84404 <request_housekeeping+0x88>)
   843e2:	4b0e      	ldr	r3, [pc, #56]	; (8441c <request_housekeeping+0xa0>)
   843e4:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   843e6:	480a      	ldr	r0, [pc, #40]	; (84410 <request_housekeeping+0x94>)
   843e8:	2140      	movs	r1, #64	; 0x40
   843ea:	4b0d      	ldr	r3, [pc, #52]	; (84420 <request_housekeeping+0xa4>)
   843ec:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   843ee:	f107 0308 	add.w	r3, r7, #8
   843f2:	4804      	ldr	r0, [pc, #16]	; (84404 <request_housekeeping+0x88>)
   843f4:	4619      	mov	r1, r3
   843f6:	4b0b      	ldr	r3, [pc, #44]	; (84424 <request_housekeeping+0xa8>)
   843f8:	4798      	blx	r3
		
	return 1;
   843fa:	2301      	movs	r3, #1
}
   843fc:	4618      	mov	r0, r3
   843fe:	3728      	adds	r7, #40	; 0x28
   84400:	46bd      	mov	sp, r7
   84402:	bd80      	pop	{r7, pc}
   84404:	2007a66c 	.word	0x2007a66c
   84408:	0008451d 	.word	0x0008451d
   8440c:	00084329 	.word	0x00084329
   84410:	400b4000 	.word	0x400b4000
   84414:	00080965 	.word	0x00080965
   84418:	1ffc0000 	.word	0x1ffc0000
   8441c:	00080b49 	.word	0x00080b49
   84420:	000808d9 	.word	0x000808d9
   84424:	0008458d 	.word	0x0008458d

00084428 <command_in>:

/**
 * \brief Responds to he command from CAN0 and sends to CAN1
 **/
void command_in(void)
{
   84428:	b580      	push	{r7, lr}
   8442a:	af00      	add	r7, sp, #0
	pio_toggle_pin(LED0_GPIO);
   8442c:	203b      	movs	r0, #59	; 0x3b
   8442e:	4b2d      	ldr	r3, [pc, #180]	; (844e4 <command_in+0xbc>)
   84430:	4798      	blx	r3
	
	can_disable_interrupt(CAN0, CAN_IER_MB0);
   84432:	482d      	ldr	r0, [pc, #180]	; (844e8 <command_in+0xc0>)
   84434:	2101      	movs	r1, #1
   84436:	4b2d      	ldr	r3, [pc, #180]	; (844ec <command_in+0xc4>)
   84438:	4798      	blx	r3
	NVIC_DisableIRQ(CAN0_IRQn);
   8443a:	202b      	movs	r0, #43	; 0x2b
   8443c:	4b2c      	ldr	r3, [pc, #176]	; (844f0 <command_in+0xc8>)
   8443e:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   84440:	4829      	ldr	r0, [pc, #164]	; (844e8 <command_in+0xc0>)
   84442:	4b2c      	ldr	r3, [pc, #176]	; (844f4 <command_in+0xcc>)
   84444:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   84446:	482c      	ldr	r0, [pc, #176]	; (844f8 <command_in+0xd0>)
   84448:	4b2a      	ldr	r3, [pc, #168]	; (844f4 <command_in+0xcc>)
   8444a:	4798      	blx	r3

	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   8444c:	482b      	ldr	r0, [pc, #172]	; (844fc <command_in+0xd4>)
   8444e:	4b2c      	ldr	r3, [pc, #176]	; (84500 <command_in+0xd8>)
   84450:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 1;
   84452:	4b2c      	ldr	r3, [pc, #176]	; (84504 <command_in+0xdc>)
   84454:	2201      	movs	r2, #1
   84456:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84458:	4b2a      	ldr	r3, [pc, #168]	; (84504 <command_in+0xdc>)
   8445a:	2201      	movs	r2, #1
   8445c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;
   8445e:	4b29      	ldr	r3, [pc, #164]	; (84504 <command_in+0xdc>)
   84460:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84464:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(7);
   84466:	4b27      	ldr	r3, [pc, #156]	; (84504 <command_in+0xdc>)
   84468:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   8446c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8446e:	4822      	ldr	r0, [pc, #136]	; (844f8 <command_in+0xd0>)
   84470:	4924      	ldr	r1, [pc, #144]	; (84504 <command_in+0xdc>)
   84472:	4b25      	ldr	r3, [pc, #148]	; (84508 <command_in+0xe0>)
   84474:	4798      	blx	r3

	/* Init CAN0 Mailbox 0 to Transmit Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   84476:	4821      	ldr	r0, [pc, #132]	; (844fc <command_in+0xd4>)
   84478:	4b21      	ldr	r3, [pc, #132]	; (84500 <command_in+0xd8>)
   8447a:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 1;
   8447c:	4b1f      	ldr	r3, [pc, #124]	; (844fc <command_in+0xd4>)
   8447e:	2201      	movs	r2, #1
   84480:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84482:	4b1e      	ldr	r3, [pc, #120]	; (844fc <command_in+0xd4>)
   84484:	2203      	movs	r2, #3
   84486:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 15;
   84488:	4b1c      	ldr	r3, [pc, #112]	; (844fc <command_in+0xd4>)
   8448a:	220f      	movs	r2, #15
   8448c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8448e:	4b1b      	ldr	r3, [pc, #108]	; (844fc <command_in+0xd4>)
   84490:	2200      	movs	r2, #0
   84492:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84494:	4b19      	ldr	r3, [pc, #100]	; (844fc <command_in+0xd4>)
   84496:	2200      	movs	r2, #0
   84498:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8449a:	4813      	ldr	r0, [pc, #76]	; (844e8 <command_in+0xc0>)
   8449c:	4917      	ldr	r1, [pc, #92]	; (844fc <command_in+0xd4>)
   8449e:	4b1a      	ldr	r3, [pc, #104]	; (84508 <command_in+0xe0>)
   844a0:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(7);
   844a2:	4b16      	ldr	r3, [pc, #88]	; (844fc <command_in+0xd4>)
   844a4:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   844a8:	611a      	str	r2, [r3, #16]
	can0_mailbox.ul_datal = COMMAND_OUT;
   844aa:	4b14      	ldr	r3, [pc, #80]	; (844fc <command_in+0xd4>)
   844ac:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
   844b0:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = CAN_MSG_DUMMY_DATA;
   844b2:	4b12      	ldr	r3, [pc, #72]	; (844fc <command_in+0xd4>)
   844b4:	f04f 32ff 	mov.w	r2, #4294967295
   844b8:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   844ba:	4b10      	ldr	r3, [pc, #64]	; (844fc <command_in+0xd4>)
   844bc:	2208      	movs	r2, #8
   844be:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   844c0:	4809      	ldr	r0, [pc, #36]	; (844e8 <command_in+0xc0>)
   844c2:	490e      	ldr	r1, [pc, #56]	; (844fc <command_in+0xd4>)
   844c4:	4b11      	ldr	r3, [pc, #68]	; (8450c <command_in+0xe4>)
   844c6:	4798      	blx	r3

	/* Enable CAN1 mailbox 0 interrupt. */
	can_enable_interrupt(CAN1, CAN_IER_MB1);
   844c8:	480b      	ldr	r0, [pc, #44]	; (844f8 <command_in+0xd0>)
   844ca:	2102      	movs	r1, #2
   844cc:	4b10      	ldr	r3, [pc, #64]	; (84510 <command_in+0xe8>)
   844ce:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1);
   844d0:	4805      	ldr	r0, [pc, #20]	; (844e8 <command_in+0xc0>)
   844d2:	2102      	movs	r1, #2
   844d4:	4b0f      	ldr	r3, [pc, #60]	; (84514 <command_in+0xec>)
   844d6:	4798      	blx	r3

	/* potentially @non-terminating@ */
	while (!g_ul_recv_status) {
   844d8:	bf00      	nop
   844da:	4b0f      	ldr	r3, [pc, #60]	; (84518 <command_in+0xf0>)
   844dc:	681b      	ldr	r3, [r3, #0]
   844de:	2b00      	cmp	r3, #0
   844e0:	d0fb      	beq.n	844da <command_in+0xb2>
	}
}
   844e2:	bd80      	pop	{r7, pc}
   844e4:	00080e85 	.word	0x00080e85
   844e8:	400b4000 	.word	0x400b4000
   844ec:	000808a5 	.word	0x000808a5
   844f0:	00083f99 	.word	0x00083f99
   844f4:	00080c01 	.word	0x00080c01
   844f8:	400b8000 	.word	0x400b8000
   844fc:	2007a66c 	.word	0x2007a66c
   84500:	00084329 	.word	0x00084329
   84504:	2007a624 	.word	0x2007a624
   84508:	00080965 	.word	0x00080965
   8450c:	00080b49 	.word	0x00080b49
   84510:	00080889 	.word	0x00080889
   84514:	000808d9 	.word	0x000808d9
   84518:	2007a618 	.word	0x2007a618

0008451c <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   8451c:	b480      	push	{r7}
   8451e:	b083      	sub	sp, #12
   84520:	af00      	add	r7, sp, #0
   84522:	6078      	str	r0, [r7, #4]
   84524:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   84526:	687b      	ldr	r3, [r7, #4]
   84528:	681a      	ldr	r2, [r3, #0]
   8452a:	683b      	ldr	r3, [r7, #0]
   8452c:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   8452e:	687b      	ldr	r3, [r7, #4]
   84530:	791a      	ldrb	r2, [r3, #4]
   84532:	683b      	ldr	r3, [r7, #0]
   84534:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   84536:	687b      	ldr	r3, [r7, #4]
   84538:	795a      	ldrb	r2, [r3, #5]
   8453a:	683b      	ldr	r3, [r7, #0]
   8453c:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   8453e:	687b      	ldr	r3, [r7, #4]
   84540:	799a      	ldrb	r2, [r3, #6]
   84542:	683b      	ldr	r3, [r7, #0]
   84544:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   84546:	687b      	ldr	r3, [r7, #4]
   84548:	79da      	ldrb	r2, [r3, #7]
   8454a:	683b      	ldr	r3, [r7, #0]
   8454c:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   8454e:	687b      	ldr	r3, [r7, #4]
   84550:	689a      	ldr	r2, [r3, #8]
   84552:	683b      	ldr	r3, [r7, #0]
   84554:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   84556:	687b      	ldr	r3, [r7, #4]
   84558:	68da      	ldr	r2, [r3, #12]
   8455a:	683b      	ldr	r3, [r7, #0]
   8455c:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   8455e:	687b      	ldr	r3, [r7, #4]
   84560:	691a      	ldr	r2, [r3, #16]
   84562:	683b      	ldr	r3, [r7, #0]
   84564:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   84566:	687b      	ldr	r3, [r7, #4]
   84568:	695a      	ldr	r2, [r3, #20]
   8456a:	683b      	ldr	r3, [r7, #0]
   8456c:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   8456e:	687b      	ldr	r3, [r7, #4]
   84570:	699a      	ldr	r2, [r3, #24]
   84572:	683b      	ldr	r3, [r7, #0]
   84574:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   84576:	687b      	ldr	r3, [r7, #4]
   84578:	69da      	ldr	r2, [r3, #28]
   8457a:	683b      	ldr	r3, [r7, #0]
   8457c:	61da      	str	r2, [r3, #28]
	
	return;
   8457e:	bf00      	nop
}
   84580:	370c      	adds	r7, #12
   84582:	46bd      	mov	sp, r7
   84584:	f85d 7b04 	ldr.w	r7, [sp], #4
   84588:	4770      	bx	lr
   8458a:	bf00      	nop

0008458c <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   8458c:	b480      	push	{r7}
   8458e:	b083      	sub	sp, #12
   84590:	af00      	add	r7, sp, #0
   84592:	6078      	str	r0, [r7, #4]
   84594:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   84596:	683b      	ldr	r3, [r7, #0]
   84598:	681a      	ldr	r2, [r3, #0]
   8459a:	687b      	ldr	r3, [r7, #4]
   8459c:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   8459e:	683b      	ldr	r3, [r7, #0]
   845a0:	791a      	ldrb	r2, [r3, #4]
   845a2:	687b      	ldr	r3, [r7, #4]
   845a4:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   845a6:	683b      	ldr	r3, [r7, #0]
   845a8:	795a      	ldrb	r2, [r3, #5]
   845aa:	687b      	ldr	r3, [r7, #4]
   845ac:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   845ae:	683b      	ldr	r3, [r7, #0]
   845b0:	799a      	ldrb	r2, [r3, #6]
   845b2:	687b      	ldr	r3, [r7, #4]
   845b4:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   845b6:	683b      	ldr	r3, [r7, #0]
   845b8:	79da      	ldrb	r2, [r3, #7]
   845ba:	687b      	ldr	r3, [r7, #4]
   845bc:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   845be:	683b      	ldr	r3, [r7, #0]
   845c0:	689a      	ldr	r2, [r3, #8]
   845c2:	687b      	ldr	r3, [r7, #4]
   845c4:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   845c6:	683b      	ldr	r3, [r7, #0]
   845c8:	68da      	ldr	r2, [r3, #12]
   845ca:	687b      	ldr	r3, [r7, #4]
   845cc:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   845ce:	683b      	ldr	r3, [r7, #0]
   845d0:	691a      	ldr	r2, [r3, #16]
   845d2:	687b      	ldr	r3, [r7, #4]
   845d4:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   845d6:	683b      	ldr	r3, [r7, #0]
   845d8:	695a      	ldr	r2, [r3, #20]
   845da:	687b      	ldr	r3, [r7, #4]
   845dc:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   845de:	683b      	ldr	r3, [r7, #0]
   845e0:	699a      	ldr	r2, [r3, #24]
   845e2:	687b      	ldr	r3, [r7, #4]
   845e4:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   845e6:	683b      	ldr	r3, [r7, #0]
   845e8:	69da      	ldr	r2, [r3, #28]
   845ea:	687b      	ldr	r3, [r7, #4]
   845ec:	61da      	str	r2, [r3, #28]
	
	return;
   845ee:	bf00      	nop
}
   845f0:	370c      	adds	r7, #12
   845f2:	46bd      	mov	sp, r7
   845f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   845f8:	4770      	bx	lr
   845fa:	bf00      	nop

000845fc <can_initialize>:
/**
 * \brief Initializes and enables CAN0 & CAN1 tranceivers and clocks. 
 * CAN0/CAN1 mailboxes are reset and interrupts disabled.
 */
void can_initialize(void)
{
   845fc:	b580      	push	{r7, lr}
   845fe:	b082      	sub	sp, #8
   84600:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1;
   84602:	2301      	movs	r3, #1
   84604:	607b      	str	r3, [r7, #4]

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   84606:	4829      	ldr	r0, [pc, #164]	; (846ac <can_initialize+0xb0>)
   84608:	2134      	movs	r1, #52	; 0x34
   8460a:	4b29      	ldr	r3, [pc, #164]	; (846b0 <can_initialize+0xb4>)
   8460c:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   8460e:	4827      	ldr	r0, [pc, #156]	; (846ac <can_initialize+0xb0>)
   84610:	2135      	movs	r1, #53	; 0x35
   84612:	4b28      	ldr	r3, [pc, #160]	; (846b4 <can_initialize+0xb8>)
   84614:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   84616:	4825      	ldr	r0, [pc, #148]	; (846ac <can_initialize+0xb0>)
   84618:	4b27      	ldr	r3, [pc, #156]	; (846b8 <can_initialize+0xbc>)
   8461a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   8461c:	4823      	ldr	r0, [pc, #140]	; (846ac <can_initialize+0xb0>)
   8461e:	4b27      	ldr	r3, [pc, #156]	; (846bc <can_initialize+0xc0>)
   84620:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   84622:	4827      	ldr	r0, [pc, #156]	; (846c0 <can_initialize+0xc4>)
   84624:	218f      	movs	r1, #143	; 0x8f
   84626:	4b22      	ldr	r3, [pc, #136]	; (846b0 <can_initialize+0xb4>)
   84628:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   8462a:	4825      	ldr	r0, [pc, #148]	; (846c0 <can_initialize+0xc4>)
   8462c:	2190      	movs	r1, #144	; 0x90
   8462e:	4b21      	ldr	r3, [pc, #132]	; (846b4 <can_initialize+0xb8>)
   84630:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   84632:	4823      	ldr	r0, [pc, #140]	; (846c0 <can_initialize+0xc4>)
   84634:	4b20      	ldr	r3, [pc, #128]	; (846b8 <can_initialize+0xbc>)
   84636:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   84638:	4821      	ldr	r0, [pc, #132]	; (846c0 <can_initialize+0xc4>)
   8463a:	4b20      	ldr	r3, [pc, #128]	; (846bc <can_initialize+0xc0>)
   8463c:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8463e:	202b      	movs	r0, #43	; 0x2b
   84640:	4b20      	ldr	r3, [pc, #128]	; (846c4 <can_initialize+0xc8>)
   84642:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   84644:	202c      	movs	r0, #44	; 0x2c
   84646:	4b1f      	ldr	r3, [pc, #124]	; (846c4 <can_initialize+0xc8>)
   84648:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   8464a:	4b1f      	ldr	r3, [pc, #124]	; (846c8 <can_initialize+0xcc>)
   8464c:	4798      	blx	r3
   8464e:	6038      	str	r0, [r7, #0]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84650:	481e      	ldr	r0, [pc, #120]	; (846cc <can_initialize+0xd0>)
   84652:	6839      	ldr	r1, [r7, #0]
   84654:	22fa      	movs	r2, #250	; 0xfa
   84656:	4b1e      	ldr	r3, [pc, #120]	; (846d0 <can_initialize+0xd4>)
   84658:	4798      	blx	r3
   8465a:	4603      	mov	r3, r0
   8465c:	2b00      	cmp	r3, #0
   8465e:	d021      	beq.n	846a4 <can_initialize+0xa8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   84660:	481c      	ldr	r0, [pc, #112]	; (846d4 <can_initialize+0xd8>)
   84662:	6839      	ldr	r1, [r7, #0]
   84664:	22fa      	movs	r2, #250	; 0xfa
   84666:	4b1a      	ldr	r3, [pc, #104]	; (846d0 <can_initialize+0xd4>)
   84668:	4798      	blx	r3
   8466a:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   8466c:	2b00      	cmp	r3, #0
   8466e:	d019      	beq.n	846a4 <can_initialize+0xa8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

	/* Disable all CAN0 & CAN1 interrupts. */
	can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84670:	4816      	ldr	r0, [pc, #88]	; (846cc <can_initialize+0xd0>)
   84672:	f04f 31ff 	mov.w	r1, #4294967295
   84676:	4b18      	ldr	r3, [pc, #96]	; (846d8 <can_initialize+0xdc>)
   84678:	4798      	blx	r3
	can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8467a:	4816      	ldr	r0, [pc, #88]	; (846d4 <can_initialize+0xd8>)
   8467c:	f04f 31ff 	mov.w	r1, #4294967295
   84680:	4b15      	ldr	r3, [pc, #84]	; (846d8 <can_initialize+0xdc>)
   84682:	4798      	blx	r3
		
	NVIC_EnableIRQ(CAN0_IRQn);
   84684:	202b      	movs	r0, #43	; 0x2b
   84686:	4b15      	ldr	r3, [pc, #84]	; (846dc <can_initialize+0xe0>)
   84688:	4798      	blx	r3
	NVIC_EnableIRQ(CAN1_IRQn);
   8468a:	202c      	movs	r0, #44	; 0x2c
   8468c:	4b13      	ldr	r3, [pc, #76]	; (846dc <can_initialize+0xe0>)
   8468e:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   84690:	480e      	ldr	r0, [pc, #56]	; (846cc <can_initialize+0xd0>)
   84692:	4b13      	ldr	r3, [pc, #76]	; (846e0 <can_initialize+0xe4>)
   84694:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   84696:	480f      	ldr	r0, [pc, #60]	; (846d4 <can_initialize+0xd8>)
   84698:	4b11      	ldr	r3, [pc, #68]	; (846e0 <can_initialize+0xe4>)
   8469a:	4798      	blx	r3
	
	/* Initialize the CAN0 & CAN1 mailboxes */
	x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   8469c:	6878      	ldr	r0, [r7, #4]
   8469e:	4b11      	ldr	r3, [pc, #68]	; (846e4 <can_initialize+0xe8>)
   846a0:	4798      	blx	r3
   846a2:	6078      	str	r0, [r7, #4]
	//configASSERT(x);
	
	
	}
	return;
   846a4:	bf00      	nop
}
   846a6:	3708      	adds	r7, #8
   846a8:	46bd      	mov	sp, r7
   846aa:	bd80      	pop	{r7, pc}
   846ac:	2007a6ac 	.word	0x2007a6ac
   846b0:	00080601 	.word	0x00080601
   846b4:	0008061d 	.word	0x0008061d
   846b8:	00080655 	.word	0x00080655
   846bc:	00080639 	.word	0x00080639
   846c0:	2007a644 	.word	0x2007a644
   846c4:	00081391 	.word	0x00081391
   846c8:	0008405d 	.word	0x0008405d
   846cc:	400b4000 	.word	0x400b4000
   846d0:	000807c1 	.word	0x000807c1
   846d4:	400b8000 	.word	0x400b8000
   846d8:	000808a5 	.word	0x000808a5
   846dc:	00083f69 	.word	0x00083f69
   846e0:	00080c01 	.word	0x00080c01
   846e4:	000846e9 	.word	0x000846e9

000846e8 <can_init_mailboxes>:

uint32_t can_init_mailboxes(uint32_t x)
{
   846e8:	b580      	push	{r7, lr}
   846ea:	b082      	sub	sp, #8
   846ec:	af00      	add	r7, sp, #0
   846ee:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   846f0:	4824      	ldr	r0, [pc, #144]	; (84784 <can_init_mailboxes+0x9c>)
   846f2:	4b25      	ldr	r3, [pc, #148]	; (84788 <can_init_mailboxes+0xa0>)
   846f4:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   846f6:	4b23      	ldr	r3, [pc, #140]	; (84784 <can_init_mailboxes+0x9c>)
   846f8:	2207      	movs	r2, #7
   846fa:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   846fc:	4b21      	ldr	r3, [pc, #132]	; (84784 <can_init_mailboxes+0x9c>)
   846fe:	2203      	movs	r2, #3
   84700:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   84702:	4b20      	ldr	r3, [pc, #128]	; (84784 <can_init_mailboxes+0x9c>)
   84704:	2205      	movs	r2, #5
   84706:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84708:	4b1e      	ldr	r3, [pc, #120]	; (84784 <can_init_mailboxes+0x9c>)
   8470a:	2200      	movs	r2, #0
   8470c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8470e:	4b1d      	ldr	r3, [pc, #116]	; (84784 <can_init_mailboxes+0x9c>)
   84710:	2200      	movs	r2, #0
   84712:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84714:	481d      	ldr	r0, [pc, #116]	; (8478c <can_init_mailboxes+0xa4>)
   84716:	491b      	ldr	r1, [pc, #108]	; (84784 <can_init_mailboxes+0x9c>)
   84718:	4b1d      	ldr	r3, [pc, #116]	; (84790 <can_init_mailboxes+0xa8>)
   8471a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8471c:	481d      	ldr	r0, [pc, #116]	; (84794 <can_init_mailboxes+0xac>)
   8471e:	4b1a      	ldr	r3, [pc, #104]	; (84788 <can_init_mailboxes+0xa0>)
   84720:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   84722:	4b1c      	ldr	r3, [pc, #112]	; (84794 <can_init_mailboxes+0xac>)
   84724:	2200      	movs	r2, #0
   84726:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84728:	4b1a      	ldr	r3, [pc, #104]	; (84794 <can_init_mailboxes+0xac>)
   8472a:	2201      	movs	r2, #1
   8472c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8472e:	4b19      	ldr	r3, [pc, #100]	; (84794 <can_init_mailboxes+0xac>)
   84730:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84734:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(NODE0_ID);					  // The ID of CAN1 MB0 is currently NODE0_ID (standard).
   84736:	4b17      	ldr	r3, [pc, #92]	; (84794 <can_init_mailboxes+0xac>)
   84738:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8473c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8473e:	4816      	ldr	r0, [pc, #88]	; (84798 <can_init_mailboxes+0xb0>)
   84740:	4914      	ldr	r1, [pc, #80]	; (84794 <can_init_mailboxes+0xac>)
   84742:	4b13      	ldr	r3, [pc, #76]	; (84790 <can_init_mailboxes+0xa8>)
   84744:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   84746:	4814      	ldr	r0, [pc, #80]	; (84798 <can_init_mailboxes+0xb0>)
   84748:	2101      	movs	r1, #1
   8474a:	4b14      	ldr	r3, [pc, #80]	; (8479c <can_init_mailboxes+0xb4>)
   8474c:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   8474e:	480d      	ldr	r0, [pc, #52]	; (84784 <can_init_mailboxes+0x9c>)
   84750:	4b0d      	ldr	r3, [pc, #52]	; (84788 <can_init_mailboxes+0xa0>)
   84752:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   84754:	4b0b      	ldr	r3, [pc, #44]	; (84784 <can_init_mailboxes+0x9c>)
   84756:	2206      	movs	r2, #6
   84758:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   8475a:	4b0a      	ldr	r3, [pc, #40]	; (84784 <can_init_mailboxes+0x9c>)
   8475c:	2203      	movs	r2, #3
   8475e:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   84760:	4b08      	ldr	r3, [pc, #32]	; (84784 <can_init_mailboxes+0x9c>)
   84762:	2214      	movs	r2, #20
   84764:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84766:	4b07      	ldr	r3, [pc, #28]	; (84784 <can_init_mailboxes+0x9c>)
   84768:	2200      	movs	r2, #0
   8476a:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8476c:	4b05      	ldr	r3, [pc, #20]	; (84784 <can_init_mailboxes+0x9c>)
   8476e:	2200      	movs	r2, #0
   84770:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84772:	4806      	ldr	r0, [pc, #24]	; (8478c <can_init_mailboxes+0xa4>)
   84774:	4903      	ldr	r1, [pc, #12]	; (84784 <can_init_mailboxes+0x9c>)
   84776:	4b06      	ldr	r3, [pc, #24]	; (84790 <can_init_mailboxes+0xa8>)
   84778:	4798      	blx	r3

	return 1;
   8477a:	2301      	movs	r3, #1
}
   8477c:	4618      	mov	r0, r3
   8477e:	3708      	adds	r7, #8
   84780:	46bd      	mov	sp, r7
   84782:	bd80      	pop	{r7, pc}
   84784:	2007a66c 	.word	0x2007a66c
   84788:	00084329 	.word	0x00084329
   8478c:	400b4000 	.word	0x400b4000
   84790:	00080965 	.word	0x00080965
   84794:	2007a624 	.word	0x2007a624
   84798:	400b8000 	.word	0x400b8000
   8479c:	00080889 	.word	0x00080889

000847a0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   847a0:	b480      	push	{r7}
   847a2:	b085      	sub	sp, #20
   847a4:	af00      	add	r7, sp, #0
   847a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   847a8:	687b      	ldr	r3, [r7, #4]
   847aa:	f003 0307 	and.w	r3, r3, #7
   847ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   847b0:	4b0c      	ldr	r3, [pc, #48]	; (847e4 <NVIC_SetPriorityGrouping+0x44>)
   847b2:	68db      	ldr	r3, [r3, #12]
   847b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   847b6:	68ba      	ldr	r2, [r7, #8]
   847b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   847bc:	4013      	ands	r3, r2
   847be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   847c0:	68fb      	ldr	r3, [r7, #12]
   847c2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   847c4:	68bb      	ldr	r3, [r7, #8]
   847c6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   847c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   847cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   847d0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   847d2:	4b04      	ldr	r3, [pc, #16]	; (847e4 <NVIC_SetPriorityGrouping+0x44>)
   847d4:	68ba      	ldr	r2, [r7, #8]
   847d6:	60da      	str	r2, [r3, #12]
}
   847d8:	3714      	adds	r7, #20
   847da:	46bd      	mov	sp, r7
   847dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   847e0:	4770      	bx	lr
   847e2:	bf00      	nop
   847e4:	e000ed00 	.word	0xe000ed00

000847e8 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   847e8:	b580      	push	{r7, lr}
   847ea:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   847ec:	4b02      	ldr	r3, [pc, #8]	; (847f8 <main+0x10>)
   847ee:	4798      	blx	r3
		command_test();
	}
#endif
#if PROGRAM_CHOICE == 9
	{
		housekeep_test2();
   847f0:	4b02      	ldr	r3, [pc, #8]	; (847fc <main+0x14>)
   847f2:	4798      	blx	r3
	}
#endif
	{
		while (1){}
   847f4:	e7fe      	b.n	847f4 <main+0xc>
   847f6:	bf00      	nop
   847f8:	00084801 	.word	0x00084801
   847fc:	00080149 	.word	0x00080149

00084800 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   84800:	b580      	push	{r7, lr}
   84802:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   84804:	4b05      	ldr	r3, [pc, #20]	; (8481c <prvSetupHardware+0x1c>)
   84806:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   84808:	2000      	movs	r0, #0
   8480a:	4b05      	ldr	r3, [pc, #20]	; (84820 <prvSetupHardware+0x20>)
   8480c:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   8480e:	4b05      	ldr	r3, [pc, #20]	; (84824 <prvSetupHardware+0x24>)
   84810:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   84812:	4b05      	ldr	r3, [pc, #20]	; (84828 <prvSetupHardware+0x28>)
   84814:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   84816:	4b05      	ldr	r3, [pc, #20]	; (8482c <prvSetupHardware+0x2c>)
   84818:	4798      	blx	r3
	
}
   8481a:	bd80      	pop	{r7, pc}
   8481c:	000804c1 	.word	0x000804c1
   84820:	000847a1 	.word	0x000847a1
   84824:	00080529 	.word	0x00080529
   84828:	0008487d 	.word	0x0008487d
   8482c:	000845fd 	.word	0x000845fd

00084830 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/


void vApplicationMallocFailedHook(void)
{
   84830:	b580      	push	{r7, lr}
   84832:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   84834:	4b01      	ldr	r3, [pc, #4]	; (8483c <vApplicationMallocFailedHook+0xc>)
   84836:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   84838:	e7fe      	b.n	84838 <vApplicationMallocFailedHook+0x8>
   8483a:	bf00      	nop
   8483c:	00081c71 	.word	0x00081c71

00084840 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   84840:	b580      	push	{r7, lr}
   84842:	b082      	sub	sp, #8
   84844:	af00      	add	r7, sp, #0
   84846:	6078      	str	r0, [r7, #4]
   84848:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   8484a:	4b01      	ldr	r3, [pc, #4]	; (84850 <vApplicationStackOverflowHook+0x10>)
   8484c:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   8484e:	e7fe      	b.n	8484e <vApplicationStackOverflowHook+0xe>
   84850:	00081c71 	.word	0x00081c71

00084854 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   84854:	b580      	push	{r7, lr}
   84856:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   84858:	4804      	ldr	r0, [pc, #16]	; (8486c <WDT_Handler+0x18>)
   8485a:	4b05      	ldr	r3, [pc, #20]	; (84870 <WDT_Handler+0x1c>)
   8485c:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   8485e:	2055      	movs	r0, #85	; 0x55
   84860:	4b04      	ldr	r3, [pc, #16]	; (84874 <WDT_Handler+0x20>)
   84862:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   84864:	4801      	ldr	r0, [pc, #4]	; (8486c <WDT_Handler+0x18>)
   84866:	4b04      	ldr	r3, [pc, #16]	; (84878 <WDT_Handler+0x24>)
   84868:	4798      	blx	r3
}
   8486a:	bd80      	pop	{r7, pc}
   8486c:	400e1a50 	.word	0x400e1a50
   84870:	00081601 	.word	0x00081601
   84874:	00080e85 	.word	0x00080e85
   84878:	000815d9 	.word	0x000815d9

0008487c <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   8487c:	b580      	push	{r7, lr}
   8487e:	b082      	sub	sp, #8
   84880:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   84882:	2300      	movs	r3, #0
   84884:	607b      	str	r3, [r7, #4]
   84886:	e00f      	b.n	848a8 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   84888:	4b0a      	ldr	r3, [pc, #40]	; (848b4 <vParTestInitialise+0x38>)
   8488a:	687a      	ldr	r2, [r7, #4]
   8488c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84890:	4618      	mov	r0, r3
   84892:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   84896:	4b08      	ldr	r3, [pc, #32]	; (848b8 <vParTestInitialise+0x3c>)
   84898:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8489a:	6878      	ldr	r0, [r7, #4]
   8489c:	2100      	movs	r1, #0
   8489e:	4b07      	ldr	r3, [pc, #28]	; (848bc <vParTestInitialise+0x40>)
   848a0:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   848a2:	687b      	ldr	r3, [r7, #4]
   848a4:	3301      	adds	r3, #1
   848a6:	607b      	str	r3, [r7, #4]
   848a8:	687b      	ldr	r3, [r7, #4]
   848aa:	2b02      	cmp	r3, #2
   848ac:	d9ec      	bls.n	84888 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   848ae:	3708      	adds	r7, #8
   848b0:	46bd      	mov	sp, r7
   848b2:	bd80      	pop	{r7, pc}
   848b4:	00084e38 	.word	0x00084e38
   848b8:	00080ee5 	.word	0x00080ee5
   848bc:	000848c1 	.word	0x000848c1

000848c0 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   848c0:	b580      	push	{r7, lr}
   848c2:	b082      	sub	sp, #8
   848c4:	af00      	add	r7, sp, #0
   848c6:	6078      	str	r0, [r7, #4]
   848c8:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   848ca:	687b      	ldr	r3, [r7, #4]
   848cc:	2b02      	cmp	r3, #2
   848ce:	d823      	bhi.n	84918 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   848d0:	687b      	ldr	r3, [r7, #4]
   848d2:	2b00      	cmp	r3, #0
   848d4:	d106      	bne.n	848e4 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   848d6:	683b      	ldr	r3, [r7, #0]
   848d8:	2b00      	cmp	r3, #0
   848da:	bf14      	ite	ne
   848dc:	2300      	movne	r3, #0
   848de:	2301      	moveq	r3, #1
   848e0:	b2db      	uxtb	r3, r3
   848e2:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   848e4:	683b      	ldr	r3, [r7, #0]
   848e6:	2b00      	cmp	r3, #0
   848e8:	d00b      	beq.n	84902 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   848ea:	4b0d      	ldr	r3, [pc, #52]	; (84920 <vParTestSetLED+0x60>)
   848ec:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   848ee:	4b0d      	ldr	r3, [pc, #52]	; (84924 <vParTestSetLED+0x64>)
   848f0:	687a      	ldr	r2, [r7, #4]
   848f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   848f6:	4618      	mov	r0, r3
   848f8:	4b0b      	ldr	r3, [pc, #44]	; (84928 <vParTestSetLED+0x68>)
   848fa:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   848fc:	4b0b      	ldr	r3, [pc, #44]	; (8492c <vParTestSetLED+0x6c>)
   848fe:	4798      	blx	r3
   84900:	e00a      	b.n	84918 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   84902:	4b07      	ldr	r3, [pc, #28]	; (84920 <vParTestSetLED+0x60>)
   84904:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   84906:	4b07      	ldr	r3, [pc, #28]	; (84924 <vParTestSetLED+0x64>)
   84908:	687a      	ldr	r2, [r7, #4]
   8490a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8490e:	4618      	mov	r0, r3
   84910:	4b07      	ldr	r3, [pc, #28]	; (84930 <vParTestSetLED+0x70>)
   84912:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   84914:	4b05      	ldr	r3, [pc, #20]	; (8492c <vParTestSetLED+0x6c>)
   84916:	4798      	blx	r3
		}
	}
}
   84918:	3708      	adds	r7, #8
   8491a:	46bd      	mov	sp, r7
   8491c:	bd80      	pop	{r7, pc}
   8491e:	bf00      	nop
   84920:	00081bf5 	.word	0x00081bf5
   84924:	00084e38 	.word	0x00084e38
   84928:	00080e51 	.word	0x00080e51
   8492c:	00081c39 	.word	0x00081c39
   84930:	00080e1d 	.word	0x00080e1d

00084934 <RTT_Handler>:
/************************************************************************/
/**
 * \brief Real-time timer interrupt handler.
 */
void RTT_Handler(void)
{
   84934:	b580      	push	{r7, lr}
   84936:	b082      	sub	sp, #8
   84938:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT); // Reading the status register clears the interrupt requests.
   8493a:	4812      	ldr	r0, [pc, #72]	; (84984 <RTT_Handler+0x50>)
   8493c:	4b12      	ldr	r3, [pc, #72]	; (84988 <RTT_Handler+0x54>)
   8493e:	4798      	blx	r3
   84940:	6078      	str	r0, [r7, #4]

	/* Time has changed*/
	pio_toggle_pin(LED0_GPIO);
   84942:	203b      	movs	r0, #59	; 0x3b
   84944:	4b11      	ldr	r3, [pc, #68]	; (8498c <RTT_Handler+0x58>)
   84946:	4798      	blx	r3
		
	/* Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
   84948:	687b      	ldr	r3, [r7, #4]
   8494a:	f003 0301 	and.w	r3, r3, #1
   8494e:	2b00      	cmp	r3, #0
   84950:	d015      	beq.n	8497e <RTT_Handler+0x4a>
		g_uc_alarmed = 1;
   84952:	4b0f      	ldr	r3, [pc, #60]	; (84990 <RTT_Handler+0x5c>)
   84954:	2201      	movs	r2, #1
   84956:	701a      	strb	r2, [r3, #0]
		pio_toggle_pin(LED1_GPIO);
   84958:	2055      	movs	r0, #85	; 0x55
   8495a:	4b0c      	ldr	r3, [pc, #48]	; (8498c <RTT_Handler+0x58>)
   8495c:	4798      	blx	r3
		rtt_init(RTT, 32768);
   8495e:	4809      	ldr	r0, [pc, #36]	; (84984 <RTT_Handler+0x50>)
   84960:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   84964:	4b0b      	ldr	r3, [pc, #44]	; (84994 <RTT_Handler+0x60>)
   84966:	4798      	blx	r3
		rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
   84968:	4806      	ldr	r0, [pc, #24]	; (84984 <RTT_Handler+0x50>)
   8496a:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   8496e:	4b0a      	ldr	r3, [pc, #40]	; (84998 <RTT_Handler+0x64>)
   84970:	4798      	blx	r3
		rtt_write_alarm_time(RTT, g_ul_new_alarm);
   84972:	4b0a      	ldr	r3, [pc, #40]	; (8499c <RTT_Handler+0x68>)
   84974:	681b      	ldr	r3, [r3, #0]
   84976:	4803      	ldr	r0, [pc, #12]	; (84984 <RTT_Handler+0x50>)
   84978:	4619      	mov	r1, r3
   8497a:	4b09      	ldr	r3, [pc, #36]	; (849a0 <RTT_Handler+0x6c>)
   8497c:	4798      	blx	r3
	}
}
   8497e:	3708      	adds	r7, #8
   84980:	46bd      	mov	sp, r7
   84982:	bd80      	pop	{r7, pc}
   84984:	400e1a30 	.word	0x400e1a30
   84988:	00081491 	.word	0x00081491
   8498c:	00080e85 	.word	0x00080e85
   84990:	2007a6b4 	.word	0x2007a6b4
   84994:	00081415 	.word	0x00081415
   84998:	00081439 	.word	0x00081439
   8499c:	2007a6b8 	.word	0x2007a6b8
   849a0:	000814a9 	.word	0x000814a9

000849a4 <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   849a4:	b590      	push	{r4, r7, lr}
   849a6:	b087      	sub	sp, #28
   849a8:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   849aa:	2300      	movs	r3, #0
   849ac:	60fb      	str	r3, [r7, #12]
	uint8_t ucChar;
	uint32_t ulChar;
	uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   849ae:	4826      	ldr	r0, [pc, #152]	; (84a48 <USART0_Handler+0xa4>)
   849b0:	4b26      	ldr	r3, [pc, #152]	; (84a4c <USART0_Handler+0xa8>)
   849b2:	4798      	blx	r3
   849b4:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   849b6:	4824      	ldr	r0, [pc, #144]	; (84a48 <USART0_Handler+0xa4>)
   849b8:	4b25      	ldr	r3, [pc, #148]	; (84a50 <USART0_Handler+0xac>)
   849ba:	4798      	blx	r3
   849bc:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   849be:	697a      	ldr	r2, [r7, #20]
   849c0:	693b      	ldr	r3, [r7, #16]
   849c2:	4013      	ands	r3, r2
   849c4:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   849c6:	697b      	ldr	r3, [r7, #20]
   849c8:	f003 0302 	and.w	r3, r3, #2
   849cc:	2b00      	cmp	r3, #0
   849ce:	d017      	beq.n	84a00 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   849d0:	4b20      	ldr	r3, [pc, #128]	; (84a54 <USART0_Handler+0xb0>)
   849d2:	6819      	ldr	r1, [r3, #0]
   849d4:	f107 020b 	add.w	r2, r7, #11
   849d8:	f107 030c 	add.w	r3, r7, #12
   849dc:	4608      	mov	r0, r1
   849de:	4611      	mov	r1, r2
   849e0:	461a      	mov	r2, r3
   849e2:	4b1d      	ldr	r3, [pc, #116]	; (84a58 <USART0_Handler+0xb4>)
   849e4:	4798      	blx	r3
   849e6:	4603      	mov	r3, r0
   849e8:	2b01      	cmp	r3, #1
   849ea:	d105      	bne.n	849f8 <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   849ec:	7afb      	ldrb	r3, [r7, #11]
   849ee:	4816      	ldr	r0, [pc, #88]	; (84a48 <USART0_Handler+0xa4>)
   849f0:	4619      	mov	r1, r3
   849f2:	4b1a      	ldr	r3, [pc, #104]	; (84a5c <USART0_Handler+0xb8>)
   849f4:	4798      	blx	r3
   849f6:	e003      	b.n	84a00 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   849f8:	4813      	ldr	r0, [pc, #76]	; (84a48 <USART0_Handler+0xa4>)
   849fa:	2102      	movs	r1, #2
   849fc:	4b18      	ldr	r3, [pc, #96]	; (84a60 <USART0_Handler+0xbc>)
   849fe:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   84a00:	697b      	ldr	r3, [r7, #20]
   84a02:	f003 0301 	and.w	r3, r3, #1
   84a06:	2b00      	cmp	r3, #0
   84a08:	d013      	beq.n	84a32 <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   84a0a:	1d3b      	adds	r3, r7, #4
   84a0c:	480e      	ldr	r0, [pc, #56]	; (84a48 <USART0_Handler+0xa4>)
   84a0e:	4619      	mov	r1, r3
   84a10:	4b14      	ldr	r3, [pc, #80]	; (84a64 <USART0_Handler+0xc0>)
   84a12:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   84a14:	687b      	ldr	r3, [r7, #4]
   84a16:	b2db      	uxtb	r3, r3
   84a18:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   84a1a:	4b13      	ldr	r3, [pc, #76]	; (84a68 <USART0_Handler+0xc4>)
   84a1c:	6819      	ldr	r1, [r3, #0]
   84a1e:	f107 020b 	add.w	r2, r7, #11
   84a22:	f107 030c 	add.w	r3, r7, #12
   84a26:	4608      	mov	r0, r1
   84a28:	4611      	mov	r1, r2
   84a2a:	461a      	mov	r2, r3
   84a2c:	2300      	movs	r3, #0
   84a2e:	4c0f      	ldr	r4, [pc, #60]	; (84a6c <USART0_Handler+0xc8>)
   84a30:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   84a32:	68fb      	ldr	r3, [r7, #12]
   84a34:	2b00      	cmp	r3, #0
   84a36:	d003      	beq.n	84a40 <USART0_Handler+0x9c>
   84a38:	4b0d      	ldr	r3, [pc, #52]	; (84a70 <USART0_Handler+0xcc>)
   84a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   84a3e:	601a      	str	r2, [r3, #0]
}
   84a40:	371c      	adds	r7, #28
   84a42:	46bd      	mov	sp, r7
   84a44:	bd90      	pop	{r4, r7, pc}
   84a46:	bf00      	nop
   84a48:	40098000 	.word	0x40098000
   84a4c:	00081535 	.word	0x00081535
   84a50:	0008151d 	.word	0x0008151d
   84a54:	2007a620 	.word	0x2007a620
   84a58:	00082735 	.word	0x00082735
   84a5c:	0008154d 	.word	0x0008154d
   84a60:	00081501 	.word	0x00081501
   84a64:	00081591 	.word	0x00081591
   84a68:	2007a61c 	.word	0x2007a61c
   84a6c:	0008243d 	.word	0x0008243d
   84a70:	e000ed04 	.word	0xe000ed04

00084a74 <__libc_init_array>:
   84a74:	b570      	push	{r4, r5, r6, lr}
   84a76:	4e0f      	ldr	r6, [pc, #60]	; (84ab4 <__libc_init_array+0x40>)
   84a78:	4d0f      	ldr	r5, [pc, #60]	; (84ab8 <__libc_init_array+0x44>)
   84a7a:	1b76      	subs	r6, r6, r5
   84a7c:	10b6      	asrs	r6, r6, #2
   84a7e:	d007      	beq.n	84a90 <__libc_init_array+0x1c>
   84a80:	3d04      	subs	r5, #4
   84a82:	2400      	movs	r4, #0
   84a84:	3401      	adds	r4, #1
   84a86:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84a8a:	4798      	blx	r3
   84a8c:	42a6      	cmp	r6, r4
   84a8e:	d1f9      	bne.n	84a84 <__libc_init_array+0x10>
   84a90:	4e0a      	ldr	r6, [pc, #40]	; (84abc <__libc_init_array+0x48>)
   84a92:	4d0b      	ldr	r5, [pc, #44]	; (84ac0 <__libc_init_array+0x4c>)
   84a94:	f000 f9da 	bl	84e4c <_init>
   84a98:	1b76      	subs	r6, r6, r5
   84a9a:	10b6      	asrs	r6, r6, #2
   84a9c:	d008      	beq.n	84ab0 <__libc_init_array+0x3c>
   84a9e:	3d04      	subs	r5, #4
   84aa0:	2400      	movs	r4, #0
   84aa2:	3401      	adds	r4, #1
   84aa4:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84aa8:	4798      	blx	r3
   84aaa:	42a6      	cmp	r6, r4
   84aac:	d1f9      	bne.n	84aa2 <__libc_init_array+0x2e>
   84aae:	bd70      	pop	{r4, r5, r6, pc}
   84ab0:	bd70      	pop	{r4, r5, r6, pc}
   84ab2:	bf00      	nop
   84ab4:	00084e58 	.word	0x00084e58
   84ab8:	00084e58 	.word	0x00084e58
   84abc:	00084e60 	.word	0x00084e60
   84ac0:	00084e58 	.word	0x00084e58

00084ac4 <memcmp>:
   84ac4:	2a03      	cmp	r2, #3
   84ac6:	b470      	push	{r4, r5, r6}
   84ac8:	d928      	bls.n	84b1c <memcmp+0x58>
   84aca:	ea40 0301 	orr.w	r3, r0, r1
   84ace:	079b      	lsls	r3, r3, #30
   84ad0:	d013      	beq.n	84afa <memcmp+0x36>
   84ad2:	7805      	ldrb	r5, [r0, #0]
   84ad4:	780c      	ldrb	r4, [r1, #0]
   84ad6:	42a5      	cmp	r5, r4
   84ad8:	d124      	bne.n	84b24 <memcmp+0x60>
   84ada:	3a01      	subs	r2, #1
   84adc:	2300      	movs	r3, #0
   84ade:	e005      	b.n	84aec <memcmp+0x28>
   84ae0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   84ae4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84ae8:	42a5      	cmp	r5, r4
   84aea:	d11b      	bne.n	84b24 <memcmp+0x60>
   84aec:	4293      	cmp	r3, r2
   84aee:	f103 0301 	add.w	r3, r3, #1
   84af2:	d1f5      	bne.n	84ae0 <memcmp+0x1c>
   84af4:	2000      	movs	r0, #0
   84af6:	bc70      	pop	{r4, r5, r6}
   84af8:	4770      	bx	lr
   84afa:	460c      	mov	r4, r1
   84afc:	4603      	mov	r3, r0
   84afe:	6825      	ldr	r5, [r4, #0]
   84b00:	681e      	ldr	r6, [r3, #0]
   84b02:	4621      	mov	r1, r4
   84b04:	42ae      	cmp	r6, r5
   84b06:	4618      	mov	r0, r3
   84b08:	f104 0404 	add.w	r4, r4, #4
   84b0c:	f103 0304 	add.w	r3, r3, #4
   84b10:	d104      	bne.n	84b1c <memcmp+0x58>
   84b12:	3a04      	subs	r2, #4
   84b14:	2a03      	cmp	r2, #3
   84b16:	4618      	mov	r0, r3
   84b18:	4621      	mov	r1, r4
   84b1a:	d8f0      	bhi.n	84afe <memcmp+0x3a>
   84b1c:	2a00      	cmp	r2, #0
   84b1e:	d1d8      	bne.n	84ad2 <memcmp+0xe>
   84b20:	4610      	mov	r0, r2
   84b22:	e7e8      	b.n	84af6 <memcmp+0x32>
   84b24:	1b28      	subs	r0, r5, r4
   84b26:	bc70      	pop	{r4, r5, r6}
   84b28:	4770      	bx	lr
   84b2a:	bf00      	nop

00084b2c <memcpy>:
   84b2c:	4684      	mov	ip, r0
   84b2e:	ea41 0300 	orr.w	r3, r1, r0
   84b32:	f013 0303 	ands.w	r3, r3, #3
   84b36:	d149      	bne.n	84bcc <memcpy+0xa0>
   84b38:	3a40      	subs	r2, #64	; 0x40
   84b3a:	d323      	bcc.n	84b84 <memcpy+0x58>
   84b3c:	680b      	ldr	r3, [r1, #0]
   84b3e:	6003      	str	r3, [r0, #0]
   84b40:	684b      	ldr	r3, [r1, #4]
   84b42:	6043      	str	r3, [r0, #4]
   84b44:	688b      	ldr	r3, [r1, #8]
   84b46:	6083      	str	r3, [r0, #8]
   84b48:	68cb      	ldr	r3, [r1, #12]
   84b4a:	60c3      	str	r3, [r0, #12]
   84b4c:	690b      	ldr	r3, [r1, #16]
   84b4e:	6103      	str	r3, [r0, #16]
   84b50:	694b      	ldr	r3, [r1, #20]
   84b52:	6143      	str	r3, [r0, #20]
   84b54:	698b      	ldr	r3, [r1, #24]
   84b56:	6183      	str	r3, [r0, #24]
   84b58:	69cb      	ldr	r3, [r1, #28]
   84b5a:	61c3      	str	r3, [r0, #28]
   84b5c:	6a0b      	ldr	r3, [r1, #32]
   84b5e:	6203      	str	r3, [r0, #32]
   84b60:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84b62:	6243      	str	r3, [r0, #36]	; 0x24
   84b64:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84b66:	6283      	str	r3, [r0, #40]	; 0x28
   84b68:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84b6a:	62c3      	str	r3, [r0, #44]	; 0x2c
   84b6c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84b6e:	6303      	str	r3, [r0, #48]	; 0x30
   84b70:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84b72:	6343      	str	r3, [r0, #52]	; 0x34
   84b74:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84b76:	6383      	str	r3, [r0, #56]	; 0x38
   84b78:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84b7a:	63c3      	str	r3, [r0, #60]	; 0x3c
   84b7c:	3040      	adds	r0, #64	; 0x40
   84b7e:	3140      	adds	r1, #64	; 0x40
   84b80:	3a40      	subs	r2, #64	; 0x40
   84b82:	d2db      	bcs.n	84b3c <memcpy+0x10>
   84b84:	3230      	adds	r2, #48	; 0x30
   84b86:	d30b      	bcc.n	84ba0 <memcpy+0x74>
   84b88:	680b      	ldr	r3, [r1, #0]
   84b8a:	6003      	str	r3, [r0, #0]
   84b8c:	684b      	ldr	r3, [r1, #4]
   84b8e:	6043      	str	r3, [r0, #4]
   84b90:	688b      	ldr	r3, [r1, #8]
   84b92:	6083      	str	r3, [r0, #8]
   84b94:	68cb      	ldr	r3, [r1, #12]
   84b96:	60c3      	str	r3, [r0, #12]
   84b98:	3010      	adds	r0, #16
   84b9a:	3110      	adds	r1, #16
   84b9c:	3a10      	subs	r2, #16
   84b9e:	d2f3      	bcs.n	84b88 <memcpy+0x5c>
   84ba0:	320c      	adds	r2, #12
   84ba2:	d305      	bcc.n	84bb0 <memcpy+0x84>
   84ba4:	f851 3b04 	ldr.w	r3, [r1], #4
   84ba8:	f840 3b04 	str.w	r3, [r0], #4
   84bac:	3a04      	subs	r2, #4
   84bae:	d2f9      	bcs.n	84ba4 <memcpy+0x78>
   84bb0:	3204      	adds	r2, #4
   84bb2:	d008      	beq.n	84bc6 <memcpy+0x9a>
   84bb4:	07d2      	lsls	r2, r2, #31
   84bb6:	bf1c      	itt	ne
   84bb8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84bbc:	f800 3b01 	strbne.w	r3, [r0], #1
   84bc0:	d301      	bcc.n	84bc6 <memcpy+0x9a>
   84bc2:	880b      	ldrh	r3, [r1, #0]
   84bc4:	8003      	strh	r3, [r0, #0]
   84bc6:	4660      	mov	r0, ip
   84bc8:	4770      	bx	lr
   84bca:	bf00      	nop
   84bcc:	2a08      	cmp	r2, #8
   84bce:	d313      	bcc.n	84bf8 <memcpy+0xcc>
   84bd0:	078b      	lsls	r3, r1, #30
   84bd2:	d0b1      	beq.n	84b38 <memcpy+0xc>
   84bd4:	f010 0303 	ands.w	r3, r0, #3
   84bd8:	d0ae      	beq.n	84b38 <memcpy+0xc>
   84bda:	f1c3 0304 	rsb	r3, r3, #4
   84bde:	1ad2      	subs	r2, r2, r3
   84be0:	07db      	lsls	r3, r3, #31
   84be2:	bf1c      	itt	ne
   84be4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84be8:	f800 3b01 	strbne.w	r3, [r0], #1
   84bec:	d3a4      	bcc.n	84b38 <memcpy+0xc>
   84bee:	f831 3b02 	ldrh.w	r3, [r1], #2
   84bf2:	f820 3b02 	strh.w	r3, [r0], #2
   84bf6:	e79f      	b.n	84b38 <memcpy+0xc>
   84bf8:	3a04      	subs	r2, #4
   84bfa:	d3d9      	bcc.n	84bb0 <memcpy+0x84>
   84bfc:	3a01      	subs	r2, #1
   84bfe:	f811 3b01 	ldrb.w	r3, [r1], #1
   84c02:	f800 3b01 	strb.w	r3, [r0], #1
   84c06:	d2f9      	bcs.n	84bfc <memcpy+0xd0>
   84c08:	780b      	ldrb	r3, [r1, #0]
   84c0a:	7003      	strb	r3, [r0, #0]
   84c0c:	784b      	ldrb	r3, [r1, #1]
   84c0e:	7043      	strb	r3, [r0, #1]
   84c10:	788b      	ldrb	r3, [r1, #2]
   84c12:	7083      	strb	r3, [r0, #2]
   84c14:	4660      	mov	r0, ip
   84c16:	4770      	bx	lr

00084c18 <memset>:
   84c18:	b4f0      	push	{r4, r5, r6, r7}
   84c1a:	0784      	lsls	r4, r0, #30
   84c1c:	d043      	beq.n	84ca6 <memset+0x8e>
   84c1e:	1e54      	subs	r4, r2, #1
   84c20:	2a00      	cmp	r2, #0
   84c22:	d03e      	beq.n	84ca2 <memset+0x8a>
   84c24:	b2cd      	uxtb	r5, r1
   84c26:	4603      	mov	r3, r0
   84c28:	e003      	b.n	84c32 <memset+0x1a>
   84c2a:	1e62      	subs	r2, r4, #1
   84c2c:	2c00      	cmp	r4, #0
   84c2e:	d038      	beq.n	84ca2 <memset+0x8a>
   84c30:	4614      	mov	r4, r2
   84c32:	f803 5b01 	strb.w	r5, [r3], #1
   84c36:	079a      	lsls	r2, r3, #30
   84c38:	d1f7      	bne.n	84c2a <memset+0x12>
   84c3a:	2c03      	cmp	r4, #3
   84c3c:	d92a      	bls.n	84c94 <memset+0x7c>
   84c3e:	b2cd      	uxtb	r5, r1
   84c40:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84c44:	2c0f      	cmp	r4, #15
   84c46:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84c4a:	d915      	bls.n	84c78 <memset+0x60>
   84c4c:	f1a4 0710 	sub.w	r7, r4, #16
   84c50:	093f      	lsrs	r7, r7, #4
   84c52:	f103 0610 	add.w	r6, r3, #16
   84c56:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   84c5a:	461a      	mov	r2, r3
   84c5c:	6015      	str	r5, [r2, #0]
   84c5e:	6055      	str	r5, [r2, #4]
   84c60:	6095      	str	r5, [r2, #8]
   84c62:	60d5      	str	r5, [r2, #12]
   84c64:	3210      	adds	r2, #16
   84c66:	42b2      	cmp	r2, r6
   84c68:	d1f8      	bne.n	84c5c <memset+0x44>
   84c6a:	f004 040f 	and.w	r4, r4, #15
   84c6e:	3701      	adds	r7, #1
   84c70:	2c03      	cmp	r4, #3
   84c72:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   84c76:	d90d      	bls.n	84c94 <memset+0x7c>
   84c78:	461e      	mov	r6, r3
   84c7a:	4622      	mov	r2, r4
   84c7c:	3a04      	subs	r2, #4
   84c7e:	2a03      	cmp	r2, #3
   84c80:	f846 5b04 	str.w	r5, [r6], #4
   84c84:	d8fa      	bhi.n	84c7c <memset+0x64>
   84c86:	1f22      	subs	r2, r4, #4
   84c88:	f022 0203 	bic.w	r2, r2, #3
   84c8c:	3204      	adds	r2, #4
   84c8e:	4413      	add	r3, r2
   84c90:	f004 0403 	and.w	r4, r4, #3
   84c94:	b12c      	cbz	r4, 84ca2 <memset+0x8a>
   84c96:	b2c9      	uxtb	r1, r1
   84c98:	441c      	add	r4, r3
   84c9a:	f803 1b01 	strb.w	r1, [r3], #1
   84c9e:	42a3      	cmp	r3, r4
   84ca0:	d1fb      	bne.n	84c9a <memset+0x82>
   84ca2:	bcf0      	pop	{r4, r5, r6, r7}
   84ca4:	4770      	bx	lr
   84ca6:	4614      	mov	r4, r2
   84ca8:	4603      	mov	r3, r0
   84caa:	e7c6      	b.n	84c3a <memset+0x22>

00084cac <register_fini>:
   84cac:	4b02      	ldr	r3, [pc, #8]	; (84cb8 <register_fini+0xc>)
   84cae:	b113      	cbz	r3, 84cb6 <register_fini+0xa>
   84cb0:	4802      	ldr	r0, [pc, #8]	; (84cbc <register_fini+0x10>)
   84cb2:	f000 b805 	b.w	84cc0 <atexit>
   84cb6:	4770      	bx	lr
   84cb8:	00000000 	.word	0x00000000
   84cbc:	00084ccd 	.word	0x00084ccd

00084cc0 <atexit>:
   84cc0:	4601      	mov	r1, r0
   84cc2:	2000      	movs	r0, #0
   84cc4:	4602      	mov	r2, r0
   84cc6:	4603      	mov	r3, r0
   84cc8:	f000 b818 	b.w	84cfc <__register_exitproc>

00084ccc <__libc_fini_array>:
   84ccc:	b538      	push	{r3, r4, r5, lr}
   84cce:	4d09      	ldr	r5, [pc, #36]	; (84cf4 <__libc_fini_array+0x28>)
   84cd0:	4c09      	ldr	r4, [pc, #36]	; (84cf8 <__libc_fini_array+0x2c>)
   84cd2:	1b64      	subs	r4, r4, r5
   84cd4:	10a4      	asrs	r4, r4, #2
   84cd6:	bf18      	it	ne
   84cd8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   84cdc:	d005      	beq.n	84cea <__libc_fini_array+0x1e>
   84cde:	3c01      	subs	r4, #1
   84ce0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84ce4:	4798      	blx	r3
   84ce6:	2c00      	cmp	r4, #0
   84ce8:	d1f9      	bne.n	84cde <__libc_fini_array+0x12>
   84cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84cee:	f000 b8b7 	b.w	84e60 <_fini>
   84cf2:	bf00      	nop
   84cf4:	00084e6c 	.word	0x00084e6c
   84cf8:	00084e70 	.word	0x00084e70

00084cfc <__register_exitproc>:
   84cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   84cfe:	4c27      	ldr	r4, [pc, #156]	; (84d9c <__register_exitproc+0xa0>)
   84d00:	b085      	sub	sp, #20
   84d02:	6826      	ldr	r6, [r4, #0]
   84d04:	4607      	mov	r7, r0
   84d06:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84d0a:	2c00      	cmp	r4, #0
   84d0c:	d040      	beq.n	84d90 <__register_exitproc+0x94>
   84d0e:	6865      	ldr	r5, [r4, #4]
   84d10:	2d1f      	cmp	r5, #31
   84d12:	dd1e      	ble.n	84d52 <__register_exitproc+0x56>
   84d14:	4822      	ldr	r0, [pc, #136]	; (84da0 <__register_exitproc+0xa4>)
   84d16:	b918      	cbnz	r0, 84d20 <__register_exitproc+0x24>
   84d18:	f04f 30ff 	mov.w	r0, #4294967295
   84d1c:	b005      	add	sp, #20
   84d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d20:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84d24:	9103      	str	r1, [sp, #12]
   84d26:	9202      	str	r2, [sp, #8]
   84d28:	9301      	str	r3, [sp, #4]
   84d2a:	f3af 8000 	nop.w
   84d2e:	9903      	ldr	r1, [sp, #12]
   84d30:	4604      	mov	r4, r0
   84d32:	9a02      	ldr	r2, [sp, #8]
   84d34:	9b01      	ldr	r3, [sp, #4]
   84d36:	2800      	cmp	r0, #0
   84d38:	d0ee      	beq.n	84d18 <__register_exitproc+0x1c>
   84d3a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84d3e:	2000      	movs	r0, #0
   84d40:	6025      	str	r5, [r4, #0]
   84d42:	6060      	str	r0, [r4, #4]
   84d44:	4605      	mov	r5, r0
   84d46:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84d4a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84d4e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84d52:	b93f      	cbnz	r7, 84d64 <__register_exitproc+0x68>
   84d54:	1c6b      	adds	r3, r5, #1
   84d56:	2000      	movs	r0, #0
   84d58:	3502      	adds	r5, #2
   84d5a:	6063      	str	r3, [r4, #4]
   84d5c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84d60:	b005      	add	sp, #20
   84d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d64:	2601      	movs	r6, #1
   84d66:	40ae      	lsls	r6, r5
   84d68:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84d6c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84d70:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84d74:	2f02      	cmp	r7, #2
   84d76:	ea42 0206 	orr.w	r2, r2, r6
   84d7a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84d7e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84d82:	d1e7      	bne.n	84d54 <__register_exitproc+0x58>
   84d84:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84d88:	431e      	orrs	r6, r3
   84d8a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84d8e:	e7e1      	b.n	84d54 <__register_exitproc+0x58>
   84d90:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84d94:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84d98:	e7b9      	b.n	84d0e <__register_exitproc+0x12>
   84d9a:	bf00      	nop
   84d9c:	00084e48 	.word	0x00084e48
   84da0:	00000000 	.word	0x00000000
   84da4:	00004e4f 	.word	0x00004e4f

00084da8 <can_bit_time>:
   84da8:	02020308 02094b03 43020303 0303030a     .....K.....C....
   84db8:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   84dc8:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   84dd8:	05050510 06114504 47040505 06060512     .....E.....G....
   84de8:	06134304 44040606 06060714 08154604     .C.....D.....F..
   84df8:	47040606 07070716 08174404 46040708     ...G.....D.....F
   84e08:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   84e18:	00000000                                ....

00084e1c <ucExpectedStackBytes.5295>:
   84e1c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   84e2c:	a5a5a5a5 20726d54 00637653              ....Tmr Svc.

00084e38 <ulLED>:
   84e38:	00000056 0000003b 00000055 00000043     V...;...U...C...

00084e48 <_global_impure_ptr>:
   84e48:	20070010                                ... 

00084e4c <_init>:
   84e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e4e:	bf00      	nop
   84e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84e52:	bc08      	pop	{r3}
   84e54:	469e      	mov	lr, r3
   84e56:	4770      	bx	lr

00084e58 <__init_array_start>:
   84e58:	00084cad 	.word	0x00084cad

00084e5c <__frame_dummy_init_array_entry>:
   84e5c:	00080119                                ....

00084e60 <_fini>:
   84e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e62:	bf00      	nop
   84e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84e66:	bc08      	pop	{r3}
   84e68:	469e      	mov	lr, r3
   84e6a:	4770      	bx	lr

00084e6c <__fini_array_start>:
   84e6c:	000800f5 	.word	0x000800f5
