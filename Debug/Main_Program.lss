
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000061b8  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000861b8  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a2b8  20070438  000865f0  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a6f0  000908a8  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000d5ef  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002723  00000000  00000000  0001daab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005668  00000000  00000000  000201ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f50  00000000  00000000  00025836  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000db0  00000000  00000000  00026786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009dd9  00000000  00000000  00027536  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013c4c  00000000  00000000  0003130f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006746c  00000000  00000000  00044f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003174  00000000  00000000  000ac3c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c6f0 	.word	0x2007c6f0
   80004:	000820d9 	.word	0x000820d9
   80008:	000820d1 	.word	0x000820d1
   8000c:	000820d1 	.word	0x000820d1
   80010:	000820d1 	.word	0x000820d1
   80014:	000820d1 	.word	0x000820d1
   80018:	000820d1 	.word	0x000820d1
	...
   8002c:	00082581 	.word	0x00082581
   80030:	000820d1 	.word	0x000820d1
   80034:	00000000 	.word	0x00000000
   80038:	00082745 	.word	0x00082745
   8003c:	00082789 	.word	0x00082789
   80040:	000820d1 	.word	0x000820d1
   80044:	000820d1 	.word	0x000820d1
   80048:	000820d1 	.word	0x000820d1
   8004c:	000820d1 	.word	0x000820d1
   80050:	00085265 	.word	0x00085265
   80054:	000820d1 	.word	0x000820d1
   80058:	000820d1 	.word	0x000820d1
   8005c:	000820d1 	.word	0x000820d1
   80060:	000820d1 	.word	0x000820d1
   80064:	000820d1 	.word	0x000820d1
   80068:	00000000 	.word	0x00000000
   8006c:	00081a59 	.word	0x00081a59
   80070:	00081a71 	.word	0x00081a71
   80074:	00081a89 	.word	0x00081a89
   80078:	00081aa1 	.word	0x00081aa1
	...
   80084:	0008048d 	.word	0x0008048d
   80088:	000820d1 	.word	0x000820d1
   8008c:	000820d1 	.word	0x000820d1
   80090:	000820d1 	.word	0x000820d1
   80094:	000820d1 	.word	0x000820d1
   80098:	000820d1 	.word	0x000820d1
   8009c:	000820d1 	.word	0x000820d1
   800a0:	000820d1 	.word	0x000820d1
   800a4:	00000000 	.word	0x00000000
   800a8:	000820d1 	.word	0x000820d1
   800ac:	000820d1 	.word	0x000820d1
   800b0:	000820d1 	.word	0x000820d1
   800b4:	000820d1 	.word	0x000820d1
   800b8:	000820d1 	.word	0x000820d1
   800bc:	000820d1 	.word	0x000820d1
   800c0:	000820d1 	.word	0x000820d1
   800c4:	000820d1 	.word	0x000820d1
   800c8:	000820d1 	.word	0x000820d1
   800cc:	000820d1 	.word	0x000820d1
   800d0:	000820d1 	.word	0x000820d1
   800d4:	000820d1 	.word	0x000820d1
   800d8:	000820d1 	.word	0x000820d1
   800dc:	000820d1 	.word	0x000820d1
   800e0:	000820d1 	.word	0x000820d1
   800e4:	000820d1 	.word	0x000820d1
   800e8:	000820d1 	.word	0x000820d1
   800ec:	00084b11 	.word	0x00084b11
   800f0:	00084a2d 	.word	0x00084a2d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	000861b8 	.word	0x000861b8

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000861b8 	.word	0x000861b8
   8013c:	2007043c 	.word	0x2007043c
   80140:	000861b8 	.word	0x000861b8
   80144:	00000000 	.word	0x00000000

00080148 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   80148:	b590      	push	{r4, r7, lr}
   8014a:	b085      	sub	sp, #20
   8014c:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   8014e:	2301      	movs	r3, #1
   80150:	9300      	str	r3, [sp, #0]
   80152:	2300      	movs	r3, #0
   80154:	9301      	str	r3, [sp, #4]
   80156:	2300      	movs	r3, #0
   80158:	9302      	str	r3, [sp, #8]
   8015a:	2300      	movs	r3, #0
   8015c:	9303      	str	r3, [sp, #12]
   8015e:	4805      	ldr	r0, [pc, #20]	; (80174 <command_loop+0x2c>)
   80160:	4905      	ldr	r1, [pc, #20]	; (80178 <command_loop+0x30>)
   80162:	2282      	movs	r2, #130	; 0x82
   80164:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80168:	4c04      	ldr	r4, [pc, #16]	; (8017c <command_loop+0x34>)
   8016a:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   8016c:	bf00      	nop
}
   8016e:	3704      	adds	r7, #4
   80170:	46bd      	mov	sp, r7
   80172:	bd90      	pop	{r4, r7, pc}
   80174:	00080181 	.word	0x00080181
   80178:	00086030 	.word	0x00086030
   8017c:	0008349d 	.word	0x0008349d

00080180 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   80180:	b590      	push	{r4, r7, lr}
   80182:	b08b      	sub	sp, #44	; 0x2c
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   80188:	687a      	ldr	r2, [r7, #4]
   8018a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8018e:	429a      	cmp	r2, r3
   80190:	d002      	beq.n	80198 <prvCommandTask+0x18>
   80192:	4b18      	ldr	r3, [pc, #96]	; (801f4 <prvCommandTask+0x74>)
   80194:	4798      	blx	r3
   80196:	e7fe      	b.n	80196 <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80198:	230f      	movs	r3, #15
   8019a:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   8019c:	f04f 33ff 	mov.w	r3, #4294967295
   801a0:	623b      	str	r3, [r7, #32]
	high = CAN_MSG_DUMMY_DATA;
   801a2:	f04f 33ff 	mov.w	r3, #4294967295
   801a6:	61fb      	str	r3, [r7, #28]
	ID = SUB0_ID0;
   801a8:	2314      	movs	r3, #20
   801aa:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   801ac:	230a      	movs	r3, #10
   801ae:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   801b0:	4b11      	ldr	r3, [pc, #68]	; (801f8 <prvCommandTask+0x78>)
   801b2:	681b      	ldr	r3, [r3, #0]
   801b4:	4618      	mov	r0, r3
   801b6:	2100      	movs	r1, #0
   801b8:	2202      	movs	r2, #2
   801ba:	2300      	movs	r3, #0
   801bc:	4c0f      	ldr	r4, [pc, #60]	; (801fc <prvCommandTask+0x7c>)
   801be:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   801c0:	6a38      	ldr	r0, [r7, #32]
   801c2:	69f9      	ldr	r1, [r7, #28]
   801c4:	69ba      	ldr	r2, [r7, #24]
   801c6:	697b      	ldr	r3, [r7, #20]
   801c8:	4c0d      	ldr	r4, [pc, #52]	; (80200 <prvCommandTask+0x80>)
   801ca:	47a0      	blx	r4
   801cc:	6138      	str	r0, [r7, #16]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   801ce:	4b0a      	ldr	r3, [pc, #40]	; (801f8 <prvCommandTask+0x78>)
   801d0:	681b      	ldr	r3, [r3, #0]
   801d2:	4618      	mov	r0, r3
   801d4:	2100      	movs	r1, #0
   801d6:	2200      	movs	r2, #0
   801d8:	2300      	movs	r3, #0
   801da:	4c0a      	ldr	r4, [pc, #40]	; (80204 <prvCommandTask+0x84>)
   801dc:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   801de:	4b0a      	ldr	r3, [pc, #40]	; (80208 <prvCommandTask+0x88>)
   801e0:	4798      	blx	r3
   801e2:	4603      	mov	r3, r0
   801e4:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   801e6:	f107 030c 	add.w	r3, r7, #12
   801ea:	4618      	mov	r0, r3
   801ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <prvCommandTask+0x8c>)
   801f0:	4798      	blx	r3
	}
   801f2:	e7dd      	b.n	801b0 <prvCommandTask+0x30>
   801f4:	00082729 	.word	0x00082729
   801f8:	2007a69c 	.word	0x2007a69c
   801fc:	00082ff1 	.word	0x00082ff1
   80200:	00084cc5 	.word	0x00084cc5
   80204:	00082d31 	.word	0x00082d31
   80208:	000838d9 	.word	0x000838d9
   8020c:	0008361d 	.word	0x0008361d

00080210 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80210:	b590      	push	{r4, r7, lr}
   80212:	b085      	sub	sp, #20
   80214:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   80216:	2302      	movs	r3, #2
   80218:	9300      	str	r3, [sp, #0]
   8021a:	2300      	movs	r3, #0
   8021c:	9301      	str	r3, [sp, #4]
   8021e:	2300      	movs	r3, #0
   80220:	9302      	str	r3, [sp, #8]
   80222:	2300      	movs	r3, #0
   80224:	9303      	str	r3, [sp, #12]
   80226:	4805      	ldr	r0, [pc, #20]	; (8023c <data_test+0x2c>)
   80228:	4905      	ldr	r1, [pc, #20]	; (80240 <data_test+0x30>)
   8022a:	2282      	movs	r2, #130	; 0x82
   8022c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80230:	4c04      	ldr	r4, [pc, #16]	; (80244 <data_test+0x34>)
   80232:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80234:	bf00      	nop
}
   80236:	3704      	adds	r7, #4
   80238:	46bd      	mov	sp, r7
   8023a:	bd90      	pop	{r4, r7, pc}
   8023c:	00080249 	.word	0x00080249
   80240:	00086034 	.word	0x00086034
   80244:	0008349d 	.word	0x0008349d

00080248 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   80248:	b590      	push	{r4, r7, lr}
   8024a:	b08b      	sub	sp, #44	; 0x2c
   8024c:	af00      	add	r7, sp, #0
   8024e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   80250:	687a      	ldr	r2, [r7, #4]
   80252:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80256:	429a      	cmp	r2, r3
   80258:	d002      	beq.n	80260 <prvDataTask+0x18>
   8025a:	4b1d      	ldr	r3, [pc, #116]	; (802d0 <prvDataTask+0x88>)
   8025c:	4798      	blx	r3
   8025e:	e7fe      	b.n	8025e <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80260:	230f      	movs	r3, #15
   80262:	623b      	str	r3, [r7, #32]
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	low = DATA_REQUEST;
   80264:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   80268:	61fb      	str	r3, [r7, #28]
	high = DATA_REQUEST;
   8026a:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   8026e:	61bb      	str	r3, [r7, #24]
	ID = SUB0_ID0;
   80270:	2314      	movs	r3, #20
   80272:	617b      	str	r3, [r7, #20]
	PRIORITY = DATA_PRIO;
   80274:	2319      	movs	r3, #25
   80276:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		x = send_can_command(low, high, ID, PRIORITY);				//This is the CAN API function I have written for us to use.
   80278:	69f8      	ldr	r0, [r7, #28]
   8027a:	69b9      	ldr	r1, [r7, #24]
   8027c:	697a      	ldr	r2, [r7, #20]
   8027e:	693b      	ldr	r3, [r7, #16]
   80280:	4c14      	ldr	r4, [pc, #80]	; (802d4 <prvDataTask+0x8c>)
   80282:	47a0      	blx	r4
   80284:	60f8      	str	r0, [r7, #12]
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 15 clock cycles.
   80286:	4b14      	ldr	r3, [pc, #80]	; (802d8 <prvDataTask+0x90>)
   80288:	4798      	blx	r3
   8028a:	4603      	mov	r3, r0
   8028c:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8028e:	f107 0308 	add.w	r3, r7, #8
   80292:	4618      	mov	r0, r3
   80294:	6a39      	ldr	r1, [r7, #32]
   80296:	4b11      	ldr	r3, [pc, #68]	; (802dc <prvDataTask+0x94>)
   80298:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   8029a:	4b11      	ldr	r3, [pc, #68]	; (802e0 <prvDataTask+0x98>)
   8029c:	781b      	ldrb	r3, [r3, #0]
   8029e:	2b00      	cmp	r3, #0
   802a0:	d014      	beq.n	802cc <prvDataTask+0x84>
		{
			for (i = 0; i < 8; i++)
   802a2:	2300      	movs	r3, #0
   802a4:	627b      	str	r3, [r7, #36]	; 0x24
   802a6:	e00a      	b.n	802be <prvDataTask+0x76>
			{
				glob_stored_data[i] = can_glob_data_reg[i];			// Store the newly acquired data in memory.
   802a8:	4b0e      	ldr	r3, [pc, #56]	; (802e4 <prvDataTask+0x9c>)
   802aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   802ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   802b0:	4b0d      	ldr	r3, [pc, #52]	; (802e8 <prvDataTask+0xa0>)
   802b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   802b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
		{
			for (i = 0; i < 8; i++)
   802b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   802ba:	3301      	adds	r3, #1
   802bc:	627b      	str	r3, [r7, #36]	; 0x24
   802be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   802c0:	2b07      	cmp	r3, #7
   802c2:	d9f1      	bls.n	802a8 <prvDataTask+0x60>
			{
				glob_stored_data[i] = can_glob_data_reg[i];			// Store the newly acquired data in memory.
			}
			glob_drf = 0;
   802c4:	4b06      	ldr	r3, [pc, #24]	; (802e0 <prvDataTask+0x98>)
   802c6:	2200      	movs	r2, #0
   802c8:	701a      	strb	r2, [r3, #0]
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   802ca:	e7d5      	b.n	80278 <prvDataTask+0x30>
   802cc:	e7d4      	b.n	80278 <prvDataTask+0x30>
   802ce:	bf00      	nop
   802d0:	00082729 	.word	0x00082729
   802d4:	00084cc5 	.word	0x00084cc5
   802d8:	000838d9 	.word	0x000838d9
   802dc:	0008361d 	.word	0x0008361d
   802e0:	2007a668 	.word	0x2007a668
   802e4:	2007a674 	.word	0x2007a674
   802e8:	2007a640 	.word	0x2007a640

000802ec <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   802ec:	b590      	push	{r4, r7, lr}
   802ee:	b085      	sub	sp, #20
   802f0:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   802f2:	2301      	movs	r3, #1
   802f4:	9300      	str	r3, [sp, #0]
   802f6:	2300      	movs	r3, #0
   802f8:	9301      	str	r3, [sp, #4]
   802fa:	2300      	movs	r3, #0
   802fc:	9302      	str	r3, [sp, #8]
   802fe:	2300      	movs	r3, #0
   80300:	9303      	str	r3, [sp, #12]
   80302:	4805      	ldr	r0, [pc, #20]	; (80318 <housekeep+0x2c>)
   80304:	4905      	ldr	r1, [pc, #20]	; (8031c <housekeep+0x30>)
   80306:	2282      	movs	r2, #130	; 0x82
   80308:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8030c:	4c04      	ldr	r4, [pc, #16]	; (80320 <housekeep+0x34>)
   8030e:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80310:	bf00      	nop
}
   80312:	3704      	adds	r7, #4
   80314:	46bd      	mov	sp, r7
   80316:	bd90      	pop	{r4, r7, pc}
   80318:	00080325 	.word	0x00080325
   8031c:	00086038 	.word	0x00086038
   80320:	0008349d 	.word	0x0008349d

00080324 <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   80324:	b590      	push	{r4, r7, lr}
   80326:	b087      	sub	sp, #28
   80328:	af00      	add	r7, sp, #0
   8032a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   8032c:	687a      	ldr	r2, [r7, #4]
   8032e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80332:	429a      	cmp	r2, r3
   80334:	d002      	beq.n	8033c <prvHouseKeepTask+0x18>
   80336:	4b13      	ldr	r3, [pc, #76]	; (80384 <prvHouseKeepTask+0x60>)
   80338:	4798      	blx	r3
   8033a:	e7fe      	b.n	8033a <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   8033c:	230f      	movs	r3, #15
   8033e:	617b      	str	r3, [r7, #20]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	
	ID = SUB0_ID5;
   80340:	2319      	movs	r3, #25
   80342:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80344:	4b10      	ldr	r3, [pc, #64]	; (80388 <prvHouseKeepTask+0x64>)
   80346:	681b      	ldr	r3, [r3, #0]
   80348:	4618      	mov	r0, r3
   8034a:	2100      	movs	r1, #0
   8034c:	2202      	movs	r2, #2
   8034e:	2300      	movs	r3, #0
   80350:	4c0e      	ldr	r4, [pc, #56]	; (8038c <prvHouseKeepTask+0x68>)
   80352:	47a0      	blx	r4
		x = request_housekeeping(ID);		// This is the CAN API function I have written for us to use.
   80354:	6938      	ldr	r0, [r7, #16]
   80356:	4b0e      	ldr	r3, [pc, #56]	; (80390 <prvHouseKeepTask+0x6c>)
   80358:	4798      	blx	r3
   8035a:	60f8      	str	r0, [r7, #12]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   8035c:	4b0a      	ldr	r3, [pc, #40]	; (80388 <prvHouseKeepTask+0x64>)
   8035e:	681b      	ldr	r3, [r3, #0]
   80360:	4618      	mov	r0, r3
   80362:	2100      	movs	r1, #0
   80364:	2200      	movs	r2, #0
   80366:	2300      	movs	r3, #0
   80368:	4c0a      	ldr	r4, [pc, #40]	; (80394 <prvHouseKeepTask+0x70>)
   8036a:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8036c:	4b0a      	ldr	r3, [pc, #40]	; (80398 <prvHouseKeepTask+0x74>)
   8036e:	4798      	blx	r3
   80370:	4603      	mov	r3, r0
   80372:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80374:	f107 0308 	add.w	r3, r7, #8
   80378:	4618      	mov	r0, r3
   8037a:	6979      	ldr	r1, [r7, #20]
   8037c:	4b07      	ldr	r3, [pc, #28]	; (8039c <prvHouseKeepTask+0x78>)
   8037e:	4798      	blx	r3
	}
   80380:	e7e0      	b.n	80344 <prvHouseKeepTask+0x20>
   80382:	bf00      	nop
   80384:	00082729 	.word	0x00082729
   80388:	2007a69c 	.word	0x2007a69c
   8038c:	00082ff1 	.word	0x00082ff1
   80390:	00084d75 	.word	0x00084d75
   80394:	00082d31 	.word	0x00082d31
   80398:	000838d9 	.word	0x000838d9
   8039c:	0008361d 	.word	0x0008361d

000803a0 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   803a0:	b480      	push	{r7}
   803a2:	b083      	sub	sp, #12
   803a4:	af00      	add	r7, sp, #0
   803a6:	4603      	mov	r3, r0
   803a8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   803aa:	4b08      	ldr	r3, [pc, #32]	; (803cc <NVIC_EnableIRQ+0x2c>)
   803ac:	f997 2007 	ldrsb.w	r2, [r7, #7]
   803b0:	0952      	lsrs	r2, r2, #5
   803b2:	79f9      	ldrb	r1, [r7, #7]
   803b4:	f001 011f 	and.w	r1, r1, #31
   803b8:	2001      	movs	r0, #1
   803ba:	fa00 f101 	lsl.w	r1, r0, r1
   803be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803c2:	370c      	adds	r7, #12
   803c4:	46bd      	mov	sp, r7
   803c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   803ca:	4770      	bx	lr
   803cc:	e000e100 	.word	0xe000e100

000803d0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   803d0:	b480      	push	{r7}
   803d2:	b083      	sub	sp, #12
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2b07      	cmp	r3, #7
   803dc:	d825      	bhi.n	8042a <osc_get_rate+0x5a>
   803de:	a201      	add	r2, pc, #4	; (adr r2, 803e4 <osc_get_rate+0x14>)
   803e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   803e4:	00080405 	.word	0x00080405
   803e8:	0008040b 	.word	0x0008040b
   803ec:	00080411 	.word	0x00080411
   803f0:	00080417 	.word	0x00080417
   803f4:	0008041b 	.word	0x0008041b
   803f8:	0008041f 	.word	0x0008041f
   803fc:	00080423 	.word	0x00080423
   80400:	00080427 	.word	0x00080427
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80404:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80408:	e010      	b.n	8042c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8040a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8040e:	e00d      	b.n	8042c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80414:	e00a      	b.n	8042c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80416:	4b08      	ldr	r3, [pc, #32]	; (80438 <osc_get_rate+0x68>)
   80418:	e008      	b.n	8042c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8041a:	4b08      	ldr	r3, [pc, #32]	; (8043c <osc_get_rate+0x6c>)
   8041c:	e006      	b.n	8042c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8041e:	4b08      	ldr	r3, [pc, #32]	; (80440 <osc_get_rate+0x70>)
   80420:	e004      	b.n	8042c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80422:	4b07      	ldr	r3, [pc, #28]	; (80440 <osc_get_rate+0x70>)
   80424:	e002      	b.n	8042c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80426:	4b06      	ldr	r3, [pc, #24]	; (80440 <osc_get_rate+0x70>)
   80428:	e000      	b.n	8042c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8042a:	2300      	movs	r3, #0
}
   8042c:	4618      	mov	r0, r3
   8042e:	370c      	adds	r7, #12
   80430:	46bd      	mov	sp, r7
   80432:	f85d 7b04 	ldr.w	r7, [sp], #4
   80436:	4770      	bx	lr
   80438:	003d0900 	.word	0x003d0900
   8043c:	007a1200 	.word	0x007a1200
   80440:	00b71b00 	.word	0x00b71b00

00080444 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80444:	b580      	push	{r7, lr}
   80446:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80448:	2006      	movs	r0, #6
   8044a:	4b04      	ldr	r3, [pc, #16]	; (8045c <sysclk_get_main_hz+0x18>)
   8044c:	4798      	blx	r3
   8044e:	4602      	mov	r2, r0
   80450:	4613      	mov	r3, r2
   80452:	00db      	lsls	r3, r3, #3
   80454:	1a9b      	subs	r3, r3, r2
   80456:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80458:	4618      	mov	r0, r3
   8045a:	bd80      	pop	{r7, pc}
   8045c:	000803d1 	.word	0x000803d1

00080460 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80460:	b580      	push	{r7, lr}
   80462:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80464:	4b02      	ldr	r3, [pc, #8]	; (80470 <sysclk_get_cpu_hz+0x10>)
   80466:	4798      	blx	r3
   80468:	4603      	mov	r3, r0
   8046a:	085b      	lsrs	r3, r3, #1
}
   8046c:	4618      	mov	r0, r3
   8046e:	bd80      	pop	{r7, pc}
   80470:	00080445 	.word	0x00080445

00080474 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80474:	b580      	push	{r7, lr}
   80476:	b082      	sub	sp, #8
   80478:	af00      	add	r7, sp, #0
   8047a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   8047c:	6878      	ldr	r0, [r7, #4]
   8047e:	4b02      	ldr	r3, [pc, #8]	; (80488 <sysclk_enable_peripheral_clock+0x14>)
   80480:	4798      	blx	r3
}
   80482:	3708      	adds	r7, #8
   80484:	46bd      	mov	sp, r7
   80486:	bd80      	pop	{r7, pc}
   80488:	00081d25 	.word	0x00081d25

0008048c <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   8048c:	b580      	push	{r7, lr}
   8048e:	b084      	sub	sp, #16
   80490:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80492:	2300      	movs	r3, #0
   80494:	60bb      	str	r3, [r7, #8]
   80496:	2300      	movs	r3, #0
   80498:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   8049a:	2300      	movs	r3, #0
   8049c:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   8049e:	2300      	movs	r3, #0
   804a0:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   804a2:	483b      	ldr	r0, [pc, #236]	; (80590 <USART0_Handler+0x104>)
   804a4:	4b3b      	ldr	r3, [pc, #236]	; (80594 <USART0_Handler+0x108>)
   804a6:	4798      	blx	r3
   804a8:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   804aa:	2058      	movs	r0, #88	; 0x58
   804ac:	4b3a      	ldr	r3, [pc, #232]	; (80598 <USART0_Handler+0x10c>)
   804ae:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   804b0:	4b3a      	ldr	r3, [pc, #232]	; (8059c <USART0_Handler+0x110>)
   804b2:	781b      	ldrb	r3, [r3, #0]
   804b4:	2b00      	cmp	r3, #0
   804b6:	d167      	bne.n	80588 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   804b8:	683b      	ldr	r3, [r7, #0]
   804ba:	f003 0301 	and.w	r3, r3, #1
   804be:	2b00      	cmp	r3, #0
   804c0:	d062      	beq.n	80588 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   804c2:	4833      	ldr	r0, [pc, #204]	; (80590 <USART0_Handler+0x104>)
   804c4:	4936      	ldr	r1, [pc, #216]	; (805a0 <USART0_Handler+0x114>)
   804c6:	4b37      	ldr	r3, [pc, #220]	; (805a4 <USART0_Handler+0x118>)
   804c8:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   804ca:	4b35      	ldr	r3, [pc, #212]	; (805a0 <USART0_Handler+0x114>)
   804cc:	681b      	ldr	r3, [r3, #0]
   804ce:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   804d0:	68bb      	ldr	r3, [r7, #8]
   804d2:	2b31      	cmp	r3, #49	; 0x31
   804d4:	d102      	bne.n	804dc <USART0_Handler+0x50>
				command_start = 1;
   804d6:	4b34      	ldr	r3, [pc, #208]	; (805a8 <USART0_Handler+0x11c>)
   804d8:	2201      	movs	r2, #1
   804da:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   804dc:	68bb      	ldr	r3, [r7, #8]
   804de:	2b32      	cmp	r3, #50	; 0x32
   804e0:	d102      	bne.n	804e8 <USART0_Handler+0x5c>
				command_end = 1;
   804e2:	4b32      	ldr	r3, [pc, #200]	; (805ac <USART0_Handler+0x120>)
   804e4:	2201      	movs	r2, #1
   804e6:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   804e8:	4b2f      	ldr	r3, [pc, #188]	; (805a8 <USART0_Handler+0x11c>)
   804ea:	781b      	ldrb	r3, [r3, #0]
   804ec:	2b01      	cmp	r3, #1
   804ee:	d11e      	bne.n	8052e <USART0_Handler+0xa2>
   804f0:	68bb      	ldr	r3, [r7, #8]
   804f2:	2b00      	cmp	r3, #0
   804f4:	d01b      	beq.n	8052e <USART0_Handler+0xa2>
   804f6:	68bb      	ldr	r3, [r7, #8]
   804f8:	2b31      	cmp	r3, #49	; 0x31
   804fa:	d018      	beq.n	8052e <USART0_Handler+0xa2>
   804fc:	68bb      	ldr	r3, [r7, #8]
   804fe:	2b32      	cmp	r3, #50	; 0x32
   80500:	d015      	beq.n	8052e <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80502:	4b2b      	ldr	r3, [pc, #172]	; (805b0 <USART0_Handler+0x124>)
   80504:	781a      	ldrb	r2, [r3, #0]
   80506:	4b2b      	ldr	r3, [pc, #172]	; (805b4 <USART0_Handler+0x128>)
   80508:	fba3 1302 	umull	r1, r3, r3, r2
   8050c:	08d9      	lsrs	r1, r3, #3
   8050e:	460b      	mov	r3, r1
   80510:	009b      	lsls	r3, r3, #2
   80512:	440b      	add	r3, r1
   80514:	005b      	lsls	r3, r3, #1
   80516:	1ad3      	subs	r3, r2, r3
   80518:	b2db      	uxtb	r3, r3
   8051a:	68ba      	ldr	r2, [r7, #8]
   8051c:	b2d1      	uxtb	r1, r2
   8051e:	4a26      	ldr	r2, [pc, #152]	; (805b8 <USART0_Handler+0x12c>)
   80520:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80522:	4b23      	ldr	r3, [pc, #140]	; (805b0 <USART0_Handler+0x124>)
   80524:	781b      	ldrb	r3, [r3, #0]
   80526:	3301      	adds	r3, #1
   80528:	b2da      	uxtb	r2, r3
   8052a:	4b21      	ldr	r3, [pc, #132]	; (805b0 <USART0_Handler+0x124>)
   8052c:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   8052e:	4b1f      	ldr	r3, [pc, #124]	; (805ac <USART0_Handler+0x120>)
   80530:	781b      	ldrb	r3, [r3, #0]
   80532:	2b01      	cmp	r3, #1
   80534:	d11d      	bne.n	80572 <USART0_Handler+0xe6>
   80536:	4b1c      	ldr	r3, [pc, #112]	; (805a8 <USART0_Handler+0x11c>)
   80538:	781b      	ldrb	r3, [r3, #0]
   8053a:	2b01      	cmp	r3, #1
   8053c:	d119      	bne.n	80572 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   8053e:	4b1f      	ldr	r3, [pc, #124]	; (805bc <USART0_Handler+0x130>)
   80540:	4798      	blx	r3
				command_end = 0;
   80542:	4b1a      	ldr	r3, [pc, #104]	; (805ac <USART0_Handler+0x120>)
   80544:	2200      	movs	r2, #0
   80546:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80548:	4b17      	ldr	r3, [pc, #92]	; (805a8 <USART0_Handler+0x11c>)
   8054a:	2200      	movs	r2, #0
   8054c:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   8054e:	4b18      	ldr	r3, [pc, #96]	; (805b0 <USART0_Handler+0x124>)
   80550:	2200      	movs	r2, #0
   80552:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80554:	2300      	movs	r3, #0
   80556:	73bb      	strb	r3, [r7, #14]
   80558:	e006      	b.n	80568 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   8055a:	7bbb      	ldrb	r3, [r7, #14]
   8055c:	4a16      	ldr	r2, [pc, #88]	; (805b8 <USART0_Handler+0x12c>)
   8055e:	2100      	movs	r1, #0
   80560:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80562:	7bbb      	ldrb	r3, [r7, #14]
   80564:	3301      	adds	r3, #1
   80566:	73bb      	strb	r3, [r7, #14]
   80568:	7bbb      	ldrb	r3, [r7, #14]
   8056a:	2b09      	cmp	r3, #9
   8056c:	d9f5      	bls.n	8055a <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   8056e:	2301      	movs	r3, #1
   80570:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80572:	7bfb      	ldrb	r3, [r7, #15]
   80574:	2b00      	cmp	r3, #0
   80576:	d105      	bne.n	80584 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80578:	4b09      	ldr	r3, [pc, #36]	; (805a0 <USART0_Handler+0x114>)
   8057a:	681b      	ldr	r3, [r3, #0]
   8057c:	4804      	ldr	r0, [pc, #16]	; (80590 <USART0_Handler+0x104>)
   8057e:	4619      	mov	r1, r3
   80580:	4b0f      	ldr	r3, [pc, #60]	; (805c0 <USART0_Handler+0x134>)
   80582:	4798      	blx	r3
					
			command_completed = 0;
   80584:	2300      	movs	r3, #0
   80586:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80588:	3710      	adds	r7, #16
   8058a:	46bd      	mov	sp, r7
   8058c:	bd80      	pop	{r7, pc}
   8058e:	bf00      	nop
   80590:	40098000 	.word	0x40098000
   80594:	00081fa5 	.word	0x00081fa5
   80598:	00081739 	.word	0x00081739
   8059c:	20070458 	.word	0x20070458
   805a0:	20070454 	.word	0x20070454
   805a4:	00082029 	.word	0x00082029
   805a8:	20070459 	.word	0x20070459
   805ac:	2007045a 	.word	0x2007045a
   805b0:	20070468 	.word	0x20070468
   805b4:	cccccccd 	.word	0xcccccccd
   805b8:	2007045c 	.word	0x2007045c
   805bc:	000805c5 	.word	0x000805c5
   805c0:	00081ff5 	.word	0x00081ff5

000805c4 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   805c4:	b580      	push	{r7, lr}
   805c6:	b088      	sub	sp, #32
   805c8:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   805ca:	2300      	movs	r3, #0
   805cc:	61bb      	str	r3, [r7, #24]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   805ce:	2300      	movs	r3, #0
   805d0:	75fb      	strb	r3, [r7, #23]
	uint8_t hk = 1;
   805d2:	2301      	movs	r3, #1
   805d4:	75bb      	strb	r3, [r7, #22]
	uint8_t sad = 1;
   805d6:	2301      	movs	r3, #1
   805d8:	757b      	strb	r3, [r7, #21]
	
	float temp = 295.0;
   805da:	4b55      	ldr	r3, [pc, #340]	; (80730 <check_command+0x16c>)
   805dc:	613b      	str	r3, [r7, #16]
	
	uint8_t temp_int = 25, upper, lower;
   805de:	2319      	movs	r3, #25
   805e0:	73fb      	strb	r3, [r7, #15]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   805e2:	4b54      	ldr	r3, [pc, #336]	; (80734 <check_command+0x170>)
   805e4:	60bb      	str	r3, [r7, #8]
	
	hk =  check_string(check_array);
   805e6:	68b8      	ldr	r0, [r7, #8]
   805e8:	4b53      	ldr	r3, [pc, #332]	; (80738 <check_command+0x174>)
   805ea:	4798      	blx	r3
   805ec:	4603      	mov	r3, r0
   805ee:	75bb      	strb	r3, [r7, #22]
	
	check_array = "i am sad";
   805f0:	4b52      	ldr	r3, [pc, #328]	; (8073c <check_command+0x178>)
   805f2:	60bb      	str	r3, [r7, #8]
	
	sad = check_string(check_array);
   805f4:	68b8      	ldr	r0, [r7, #8]
   805f6:	4b50      	ldr	r3, [pc, #320]	; (80738 <check_command+0x174>)
   805f8:	4798      	blx	r3
   805fa:	4603      	mov	r3, r0
   805fc:	757b      	strb	r3, [r7, #21]
	
	if (hk == 1)
   805fe:	7dbb      	ldrb	r3, [r7, #22]
   80600:	2b01      	cmp	r3, #1
   80602:	d179      	bne.n	806f8 <check_command+0x134>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80604:	4b4e      	ldr	r3, [pc, #312]	; (80740 <check_command+0x17c>)
   80606:	61fb      	str	r3, [r7, #28]
				
		while(*message_array)
   80608:	e00d      	b.n	80626 <check_command+0x62>
		{
			character = *message_array;
   8060a:	69fb      	ldr	r3, [r7, #28]
   8060c:	781b      	ldrb	r3, [r3, #0]
   8060e:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80610:	bf00      	nop
   80612:	484c      	ldr	r0, [pc, #304]	; (80744 <check_command+0x180>)
   80614:	69b9      	ldr	r1, [r7, #24]
   80616:	4b4c      	ldr	r3, [pc, #304]	; (80748 <check_command+0x184>)
   80618:	4798      	blx	r3
   8061a:	4603      	mov	r3, r0
   8061c:	2b00      	cmp	r3, #0
   8061e:	d1f8      	bne.n	80612 <check_command+0x4e>
			
			message_array++;
   80620:	69fb      	ldr	r3, [r7, #28]
   80622:	3301      	adds	r3, #1
   80624:	61fb      	str	r3, [r7, #28]
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80626:	69fb      	ldr	r3, [r7, #28]
   80628:	781b      	ldrb	r3, [r3, #0]
   8062a:	2b00      	cmp	r3, #0
   8062c:	d1ed      	bne.n	8060a <check_command+0x46>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   8062e:	4b47      	ldr	r3, [pc, #284]	; (8074c <check_command+0x188>)
   80630:	61fb      	str	r3, [r7, #28]
		
		while(*message_array)
   80632:	e00d      	b.n	80650 <check_command+0x8c>
		{
			character = *message_array;
   80634:	69fb      	ldr	r3, [r7, #28]
   80636:	781b      	ldrb	r3, [r3, #0]
   80638:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8063a:	bf00      	nop
   8063c:	4841      	ldr	r0, [pc, #260]	; (80744 <check_command+0x180>)
   8063e:	69b9      	ldr	r1, [r7, #24]
   80640:	4b41      	ldr	r3, [pc, #260]	; (80748 <check_command+0x184>)
   80642:	4798      	blx	r3
   80644:	4603      	mov	r3, r0
   80646:	2b00      	cmp	r3, #0
   80648:	d1f8      	bne.n	8063c <check_command+0x78>
			
			message_array++;
   8064a:	69fb      	ldr	r3, [r7, #28]
   8064c:	3301      	adds	r3, #1
   8064e:	61fb      	str	r3, [r7, #28]
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80650:	69fb      	ldr	r3, [r7, #28]
   80652:	781b      	ldrb	r3, [r3, #0]
   80654:	2b00      	cmp	r3, #0
   80656:	d1ed      	bne.n	80634 <check_command+0x70>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = (float)(can_glob_data_reg[0] - (uint32_t)0x55000000);	// This is the ADC value retrieved from the subsystem.
   80658:	4b3d      	ldr	r3, [pc, #244]	; (80750 <check_command+0x18c>)
   8065a:	681b      	ldr	r3, [r3, #0]
   8065c:	f103 422b 	add.w	r2, r3, #2868903936	; 0xab000000
   80660:	4b3c      	ldr	r3, [pc, #240]	; (80754 <check_command+0x190>)
   80662:	4610      	mov	r0, r2
   80664:	4798      	blx	r3
   80666:	4603      	mov	r3, r0
   80668:	613b      	str	r3, [r7, #16]
			
		temp = convert_to_temp(temp);						// Temperature returned is in degrees celsius.
   8066a:	6938      	ldr	r0, [r7, #16]
   8066c:	4b3a      	ldr	r3, [pc, #232]	; (80758 <check_command+0x194>)
   8066e:	4798      	blx	r3
   80670:	6138      	str	r0, [r7, #16]

		temp_int = (uint8_t)temp + 1;							// Convert the float to an integer.
   80672:	4b3a      	ldr	r3, [pc, #232]	; (8075c <check_command+0x198>)
   80674:	6938      	ldr	r0, [r7, #16]
   80676:	4798      	blx	r3
   80678:	4603      	mov	r3, r0
   8067a:	b2db      	uxtb	r3, r3
   8067c:	3301      	adds	r3, #1
   8067e:	73fb      	strb	r3, [r7, #15]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80680:	7bfb      	ldrb	r3, [r7, #15]
   80682:	4618      	mov	r0, r3
   80684:	4b36      	ldr	r3, [pc, #216]	; (80760 <check_command+0x19c>)
   80686:	4798      	blx	r3
   80688:	4603      	mov	r3, r0
   8068a:	73fb      	strb	r3, [r7, #15]
		
		lower = temp_int << 4;
   8068c:	7bfb      	ldrb	r3, [r7, #15]
   8068e:	011b      	lsls	r3, r3, #4
   80690:	71fb      	strb	r3, [r7, #7]
		lower = lower >> 4;
   80692:	79fb      	ldrb	r3, [r7, #7]
   80694:	091b      	lsrs	r3, r3, #4
   80696:	71fb      	strb	r3, [r7, #7]
		upper = temp_int >> 4;
   80698:	7bfb      	ldrb	r3, [r7, #15]
   8069a:	091b      	lsrs	r3, r3, #4
   8069c:	71bb      	strb	r3, [r7, #6]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   8069e:	79fb      	ldrb	r3, [r7, #7]
   806a0:	3330      	adds	r3, #48	; 0x30
   806a2:	71fb      	strb	r3, [r7, #7]
		upper += (uint8_t)0x30;
   806a4:	79bb      	ldrb	r3, [r7, #6]
   806a6:	3330      	adds	r3, #48	; 0x30
   806a8:	71bb      	strb	r3, [r7, #6]
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   806aa:	bf00      	nop
   806ac:	79bb      	ldrb	r3, [r7, #6]
   806ae:	4825      	ldr	r0, [pc, #148]	; (80744 <check_command+0x180>)
   806b0:	4619      	mov	r1, r3
   806b2:	4b25      	ldr	r3, [pc, #148]	; (80748 <check_command+0x184>)
   806b4:	4798      	blx	r3
   806b6:	4603      	mov	r3, r0
   806b8:	2b00      	cmp	r3, #0
   806ba:	d1f7      	bne.n	806ac <check_command+0xe8>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   806bc:	bf00      	nop
   806be:	79fb      	ldrb	r3, [r7, #7]
   806c0:	4820      	ldr	r0, [pc, #128]	; (80744 <check_command+0x180>)
   806c2:	4619      	mov	r1, r3
   806c4:	4b20      	ldr	r3, [pc, #128]	; (80748 <check_command+0x184>)
   806c6:	4798      	blx	r3
   806c8:	4603      	mov	r3, r0
   806ca:	2b00      	cmp	r3, #0
   806cc:	d1f7      	bne.n	806be <check_command+0xfa>
		
		message_array = " C\n\r";							// Finish the sentence.
   806ce:	4b25      	ldr	r3, [pc, #148]	; (80764 <check_command+0x1a0>)
   806d0:	61fb      	str	r3, [r7, #28]

		while(*message_array)
   806d2:	e00d      	b.n	806f0 <check_command+0x12c>
		{
			character = *message_array;
   806d4:	69fb      	ldr	r3, [r7, #28]
   806d6:	781b      	ldrb	r3, [r3, #0]
   806d8:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   806da:	bf00      	nop
   806dc:	4819      	ldr	r0, [pc, #100]	; (80744 <check_command+0x180>)
   806de:	69b9      	ldr	r1, [r7, #24]
   806e0:	4b19      	ldr	r3, [pc, #100]	; (80748 <check_command+0x184>)
   806e2:	4798      	blx	r3
   806e4:	4603      	mov	r3, r0
   806e6:	2b00      	cmp	r3, #0
   806e8:	d1f8      	bne.n	806dc <check_command+0x118>
			
			message_array++;
   806ea:	69fb      	ldr	r3, [r7, #28]
   806ec:	3301      	adds	r3, #1
   806ee:	61fb      	str	r3, [r7, #28]
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   806f0:	69fb      	ldr	r3, [r7, #28]
   806f2:	781b      	ldrb	r3, [r3, #0]
   806f4:	2b00      	cmp	r3, #0
   806f6:	d1ed      	bne.n	806d4 <check_command+0x110>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   806f8:	7d7b      	ldrb	r3, [r7, #21]
   806fa:	2b01      	cmp	r3, #1
   806fc:	d114      	bne.n	80728 <check_command+0x164>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   806fe:	4b1a      	ldr	r3, [pc, #104]	; (80768 <check_command+0x1a4>)
   80700:	61fb      	str	r3, [r7, #28]
		
		while(*message_array)
   80702:	e00d      	b.n	80720 <check_command+0x15c>
		{
			character = *message_array;
   80704:	69fb      	ldr	r3, [r7, #28]
   80706:	781b      	ldrb	r3, [r3, #0]
   80708:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8070a:	bf00      	nop
   8070c:	480d      	ldr	r0, [pc, #52]	; (80744 <check_command+0x180>)
   8070e:	69b9      	ldr	r1, [r7, #24]
   80710:	4b0d      	ldr	r3, [pc, #52]	; (80748 <check_command+0x184>)
   80712:	4798      	blx	r3
   80714:	4603      	mov	r3, r0
   80716:	2b00      	cmp	r3, #0
   80718:	d1f8      	bne.n	8070c <check_command+0x148>
			
			message_array++;
   8071a:	69fb      	ldr	r3, [r7, #28]
   8071c:	3301      	adds	r3, #1
   8071e:	61fb      	str	r3, [r7, #28]
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80720:	69fb      	ldr	r3, [r7, #28]
   80722:	781b      	ldrb	r3, [r3, #0]
   80724:	2b00      	cmp	r3, #0
   80726:	d1ed      	bne.n	80704 <check_command+0x140>
			
			message_array++;
		}
	}
	
	return;
   80728:	bf00      	nop
}
   8072a:	3720      	adds	r7, #32
   8072c:	46bd      	mov	sp, r7
   8072e:	bd80      	pop	{r7, pc}
   80730:	43938000 	.word	0x43938000
   80734:	0008603c 	.word	0x0008603c
   80738:	0008076d 	.word	0x0008076d
   8073c:	00086040 	.word	0x00086040
   80740:	0008604c 	.word	0x0008604c
   80744:	40098000 	.word	0x40098000
   80748:	00081ff5 	.word	0x00081ff5
   8074c:	0008606c 	.word	0x0008606c
   80750:	2007a674 	.word	0x2007a674
   80754:	00085971 	.word	0x00085971
   80758:	000807c9 	.word	0x000807c9
   8075c:	00085cc1 	.word	0x00085cc1
   80760:	00080901 	.word	0x00080901
   80764:	00086088 	.word	0x00086088
   80768:	00086090 	.word	0x00086090

0008076c <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   8076c:	b480      	push	{r7}
   8076e:	b085      	sub	sp, #20
   80770:	af00      	add	r7, sp, #0
   80772:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   80774:	2300      	movs	r3, #0
   80776:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   80778:	2301      	movs	r3, #1
   8077a:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   8077c:	687b      	ldr	r3, [r7, #4]
   8077e:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   80780:	2300      	movs	r3, #0
   80782:	73fb      	strb	r3, [r7, #15]
   80784:	e014      	b.n	807b0 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   80786:	68bb      	ldr	r3, [r7, #8]
   80788:	781a      	ldrb	r2, [r3, #0]
   8078a:	7bfb      	ldrb	r3, [r7, #15]
   8078c:	490d      	ldr	r1, [pc, #52]	; (807c4 <check_string+0x58>)
   8078e:	5ccb      	ldrb	r3, [r1, r3]
   80790:	429a      	cmp	r2, r3
   80792:	d002      	beq.n	8079a <check_string+0x2e>
		{
			ret_val = 0;
   80794:	2300      	movs	r3, #0
   80796:	73bb      	strb	r3, [r7, #14]
			break;
   80798:	e00d      	b.n	807b6 <check_string+0x4a>
		}
		if (!*temp_str)
   8079a:	68bb      	ldr	r3, [r7, #8]
   8079c:	781b      	ldrb	r3, [r3, #0]
   8079e:	2b00      	cmp	r3, #0
   807a0:	d100      	bne.n	807a4 <check_string+0x38>
			break;
   807a2:	e008      	b.n	807b6 <check_string+0x4a>
			
		temp_str++;
   807a4:	68bb      	ldr	r3, [r7, #8]
   807a6:	3301      	adds	r3, #1
   807a8:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   807aa:	7bfb      	ldrb	r3, [r7, #15]
   807ac:	3301      	adds	r3, #1
   807ae:	73fb      	strb	r3, [r7, #15]
   807b0:	7bfb      	ldrb	r3, [r7, #15]
   807b2:	2b09      	cmp	r3, #9
   807b4:	d9e7      	bls.n	80786 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   807b6:	7bbb      	ldrb	r3, [r7, #14]
}
   807b8:	4618      	mov	r0, r3
   807ba:	3714      	adds	r7, #20
   807bc:	46bd      	mov	sp, r7
   807be:	f85d 7b04 	ldr.w	r7, [sp], #4
   807c2:	4770      	bx	lr
   807c4:	2007045c 	.word	0x2007045c

000807c8 <convert_to_temp>:

float convert_to_temp(float temp)
{
   807c8:	b590      	push	{r4, r7, lr}
   807ca:	b089      	sub	sp, #36	; 0x24
   807cc:	af00      	add	r7, sp, #0
   807ce:	6078      	str	r0, [r7, #4]
	float r_ratio, log_result = 0.0, result = 0.0;
   807d0:	f04f 0300 	mov.w	r3, #0
   807d4:	61bb      	str	r3, [r7, #24]
   807d6:	f04f 0300 	mov.w	r3, #0
   807da:	613b      	str	r3, [r7, #16]
	
	int i, flag = 0;
   807dc:	2300      	movs	r3, #0
   807de:	60fb      	str	r3, [r7, #12]
	
	r_ratio = (temp) / 1023;	// Convert ADC value to the ratio (of resistances).
   807e0:	4b3b      	ldr	r3, [pc, #236]	; (808d0 <convert_to_temp+0x108>)
   807e2:	6878      	ldr	r0, [r7, #4]
   807e4:	493b      	ldr	r1, [pc, #236]	; (808d4 <convert_to_temp+0x10c>)
   807e6:	4798      	blx	r3
   807e8:	4603      	mov	r3, r0
   807ea:	61fb      	str	r3, [r7, #28]
	
	r_ratio = 1 / (r_ratio);	// Take the inverse.
   807ec:	4b38      	ldr	r3, [pc, #224]	; (808d0 <convert_to_temp+0x108>)
   807ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   807f2:	69f9      	ldr	r1, [r7, #28]
   807f4:	4798      	blx	r3
   807f6:	4603      	mov	r3, r0
   807f8:	61fb      	str	r3, [r7, #28]
	
	r_ratio = 1 - r_ratio;		// Substract this from one in order to approximate logarithm.
   807fa:	4b37      	ldr	r3, [pc, #220]	; (808d8 <convert_to_temp+0x110>)
   807fc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80800:	69f9      	ldr	r1, [r7, #28]
   80802:	4798      	blx	r3
   80804:	4603      	mov	r3, r0
   80806:	61fb      	str	r3, [r7, #28]
	
	for (i = 1; i < 5; i++)		// Natural Logarithm approximation.
   80808:	2301      	movs	r3, #1
   8080a:	617b      	str	r3, [r7, #20]
   8080c:	e01b      	b.n	80846 <convert_to_temp+0x7e>
	{
		if(i > 1)
   8080e:	697b      	ldr	r3, [r7, #20]
   80810:	2b01      	cmp	r3, #1
   80812:	dd05      	ble.n	80820 <convert_to_temp+0x58>
		{
			r_ratio = r_ratio * r_ratio;
   80814:	4b31      	ldr	r3, [pc, #196]	; (808dc <convert_to_temp+0x114>)
   80816:	69f8      	ldr	r0, [r7, #28]
   80818:	69f9      	ldr	r1, [r7, #28]
   8081a:	4798      	blx	r3
   8081c:	4603      	mov	r3, r0
   8081e:	61fb      	str	r3, [r7, #28]
		}
		
		r_ratio = r_ratio / i;
   80820:	4b2f      	ldr	r3, [pc, #188]	; (808e0 <convert_to_temp+0x118>)
   80822:	6978      	ldr	r0, [r7, #20]
   80824:	4798      	blx	r3
   80826:	4602      	mov	r2, r0
   80828:	4b29      	ldr	r3, [pc, #164]	; (808d0 <convert_to_temp+0x108>)
   8082a:	69f8      	ldr	r0, [r7, #28]
   8082c:	4611      	mov	r1, r2
   8082e:	4798      	blx	r3
   80830:	4603      	mov	r3, r0
   80832:	61fb      	str	r3, [r7, #28]
		
		log_result += r_ratio;
   80834:	4b2b      	ldr	r3, [pc, #172]	; (808e4 <convert_to_temp+0x11c>)
   80836:	69b8      	ldr	r0, [r7, #24]
   80838:	69f9      	ldr	r1, [r7, #28]
   8083a:	4798      	blx	r3
   8083c:	4603      	mov	r3, r0
   8083e:	61bb      	str	r3, [r7, #24]
	
	r_ratio = 1 / (r_ratio);	// Take the inverse.
	
	r_ratio = 1 - r_ratio;		// Substract this from one in order to approximate logarithm.
	
	for (i = 1; i < 5; i++)		// Natural Logarithm approximation.
   80840:	697b      	ldr	r3, [r7, #20]
   80842:	3301      	adds	r3, #1
   80844:	617b      	str	r3, [r7, #20]
   80846:	697b      	ldr	r3, [r7, #20]
   80848:	2b04      	cmp	r3, #4
   8084a:	dde0      	ble.n	8080e <convert_to_temp+0x46>
		r_ratio = r_ratio / i;
		
		log_result += r_ratio;
	}
	
	result = 1 / 293.15 + log_result / 3950;
   8084c:	4b20      	ldr	r3, [pc, #128]	; (808d0 <convert_to_temp+0x108>)
   8084e:	69b8      	ldr	r0, [r7, #24]
   80850:	4925      	ldr	r1, [pc, #148]	; (808e8 <convert_to_temp+0x120>)
   80852:	4798      	blx	r3
   80854:	4603      	mov	r3, r0
   80856:	461a      	mov	r2, r3
   80858:	4b24      	ldr	r3, [pc, #144]	; (808ec <convert_to_temp+0x124>)
   8085a:	4610      	mov	r0, r2
   8085c:	4798      	blx	r3
   8085e:	4602      	mov	r2, r0
   80860:	460b      	mov	r3, r1
   80862:	4c23      	ldr	r4, [pc, #140]	; (808f0 <convert_to_temp+0x128>)
   80864:	4610      	mov	r0, r2
   80866:	4619      	mov	r1, r3
   80868:	a315      	add	r3, pc, #84	; (adr r3, 808c0 <convert_to_temp+0xf8>)
   8086a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8086e:	47a0      	blx	r4
   80870:	4602      	mov	r2, r0
   80872:	460b      	mov	r3, r1
   80874:	4c1f      	ldr	r4, [pc, #124]	; (808f4 <convert_to_temp+0x12c>)
   80876:	4610      	mov	r0, r2
   80878:	4619      	mov	r1, r3
   8087a:	47a0      	blx	r4
   8087c:	4603      	mov	r3, r0
   8087e:	613b      	str	r3, [r7, #16]
	
	result = 1 / result;
   80880:	4b13      	ldr	r3, [pc, #76]	; (808d0 <convert_to_temp+0x108>)
   80882:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80886:	6939      	ldr	r1, [r7, #16]
   80888:	4798      	blx	r3
   8088a:	4603      	mov	r3, r0
   8088c:	613b      	str	r3, [r7, #16]
	
	result = result - 273.15;		// Degrees Celsius.
   8088e:	4b17      	ldr	r3, [pc, #92]	; (808ec <convert_to_temp+0x124>)
   80890:	6938      	ldr	r0, [r7, #16]
   80892:	4798      	blx	r3
   80894:	4602      	mov	r2, r0
   80896:	460b      	mov	r3, r1
   80898:	4c17      	ldr	r4, [pc, #92]	; (808f8 <convert_to_temp+0x130>)
   8089a:	4610      	mov	r0, r2
   8089c:	4619      	mov	r1, r3
   8089e:	a30a      	add	r3, pc, #40	; (adr r3, 808c8 <convert_to_temp+0x100>)
   808a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   808a4:	47a0      	blx	r4
   808a6:	4602      	mov	r2, r0
   808a8:	460b      	mov	r3, r1
   808aa:	4c12      	ldr	r4, [pc, #72]	; (808f4 <convert_to_temp+0x12c>)
   808ac:	4610      	mov	r0, r2
   808ae:	4619      	mov	r1, r3
   808b0:	47a0      	blx	r4
   808b2:	4603      	mov	r3, r0
   808b4:	613b      	str	r3, [r7, #16]
	
	return result;
   808b6:	693b      	ldr	r3, [r7, #16]
}
   808b8:	4618      	mov	r0, r3
   808ba:	3724      	adds	r7, #36	; 0x24
   808bc:	46bd      	mov	sp, r7
   808be:	bd90      	pop	{r4, r7, pc}
   808c0:	5ca77e69 	.word	0x5ca77e69
   808c4:	3f6bf1da 	.word	0x3f6bf1da
   808c8:	66666666 	.word	0x66666666
   808cc:	40711266 	.word	0x40711266
   808d0:	00085b89 	.word	0x00085b89
   808d4:	447fc000 	.word	0x447fc000
   808d8:	0008580d 	.word	0x0008580d
   808dc:	00085a21 	.word	0x00085a21
   808e0:	00085979 	.word	0x00085979
   808e4:	00085811 	.word	0x00085811
   808e8:	4576e000 	.word	0x4576e000
   808ec:	000856bd 	.word	0x000856bd
   808f0:	00085401 	.word	0x00085401
   808f4:	00085765 	.word	0x00085765
   808f8:	000853fd 	.word	0x000853fd
   808fc:	f3af 8000 	nop.w

00080900 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   80900:	b480      	push	{r7}
   80902:	b085      	sub	sp, #20
   80904:	af00      	add	r7, sp, #0
   80906:	4603      	mov	r3, r0
   80908:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   8090a:	2300      	movs	r3, #0
   8090c:	73fb      	strb	r3, [r7, #15]
   8090e:	2300      	movs	r3, #0
   80910:	73bb      	strb	r3, [r7, #14]
   80912:	2300      	movs	r3, #0
   80914:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   80916:	79fb      	ldrb	r3, [r7, #7]
   80918:	2b09      	cmp	r3, #9
   8091a:	d919      	bls.n	80950 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   8091c:	79fa      	ldrb	r2, [r7, #7]
   8091e:	4b10      	ldr	r3, [pc, #64]	; (80960 <convert_to_bcd+0x60>)
   80920:	fba3 1302 	umull	r1, r3, r3, r2
   80924:	08d9      	lsrs	r1, r3, #3
   80926:	460b      	mov	r3, r1
   80928:	009b      	lsls	r3, r3, #2
   8092a:	440b      	add	r3, r1
   8092c:	005b      	lsls	r3, r3, #1
   8092e:	1ad3      	subs	r3, r2, r3
   80930:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   80932:	79fa      	ldrb	r2, [r7, #7]
   80934:	4b0a      	ldr	r3, [pc, #40]	; (80960 <convert_to_bcd+0x60>)
   80936:	fba3 1302 	umull	r1, r3, r3, r2
   8093a:	08db      	lsrs	r3, r3, #3
   8093c:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   8093e:	7bfb      	ldrb	r3, [r7, #15]
   80940:	011b      	lsls	r3, r3, #4
   80942:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   80944:	7bfa      	ldrb	r2, [r7, #15]
   80946:	7bbb      	ldrb	r3, [r7, #14]
   80948:	4313      	orrs	r3, r2
   8094a:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   8094c:	7b7b      	ldrb	r3, [r7, #13]
   8094e:	e000      	b.n	80952 <convert_to_bcd+0x52>
	}
	else
		return temp;
   80950:	79fb      	ldrb	r3, [r7, #7]
}
   80952:	4618      	mov	r0, r3
   80954:	3714      	adds	r7, #20
   80956:	46bd      	mov	sp, r7
   80958:	f85d 7b04 	ldr.w	r7, [sp], #4
   8095c:	4770      	bx	lr
   8095e:	bf00      	nop
   80960:	cccccccd 	.word	0xcccccccd

00080964 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   80964:	b5b0      	push	{r4, r5, r7, lr}
   80966:	b086      	sub	sp, #24
   80968:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   8096a:	4b13      	ldr	r3, [pc, #76]	; (809b8 <configure_usart+0x54>)
   8096c:	463c      	mov	r4, r7
   8096e:	461d      	mov	r5, r3
   80970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80974:	e895 0003 	ldmia.w	r5, {r0, r1}
   80978:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   8097c:	2011      	movs	r0, #17
   8097e:	4b0f      	ldr	r3, [pc, #60]	; (809bc <configure_usart+0x58>)
   80980:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   80982:	4b0f      	ldr	r3, [pc, #60]	; (809c0 <configure_usart+0x5c>)
   80984:	4798      	blx	r3
   80986:	4603      	mov	r3, r0
   80988:	463a      	mov	r2, r7
   8098a:	480e      	ldr	r0, [pc, #56]	; (809c4 <configure_usart+0x60>)
   8098c:	4611      	mov	r1, r2
   8098e:	461a      	mov	r2, r3
   80990:	4b0d      	ldr	r3, [pc, #52]	; (809c8 <configure_usart+0x64>)
   80992:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   80994:	480b      	ldr	r0, [pc, #44]	; (809c4 <configure_usart+0x60>)
   80996:	f04f 31ff 	mov.w	r1, #4294967295
   8099a:	4b0c      	ldr	r3, [pc, #48]	; (809cc <configure_usart+0x68>)
   8099c:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   8099e:	4809      	ldr	r0, [pc, #36]	; (809c4 <configure_usart+0x60>)
   809a0:	4b0b      	ldr	r3, [pc, #44]	; (809d0 <configure_usart+0x6c>)
   809a2:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   809a4:	4807      	ldr	r0, [pc, #28]	; (809c4 <configure_usart+0x60>)
   809a6:	4b0b      	ldr	r3, [pc, #44]	; (809d4 <configure_usart+0x70>)
   809a8:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   809aa:	2011      	movs	r0, #17
   809ac:	4b0a      	ldr	r3, [pc, #40]	; (809d8 <configure_usart+0x74>)
   809ae:	4798      	blx	r3
}
   809b0:	3718      	adds	r7, #24
   809b2:	46bd      	mov	sp, r7
   809b4:	bdb0      	pop	{r4, r5, r7, pc}
   809b6:	bf00      	nop
   809b8:	000860ac 	.word	0x000860ac
   809bc:	00080475 	.word	0x00080475
   809c0:	00080461 	.word	0x00080461
   809c4:	40098000 	.word	0x40098000
   809c8:	00081e89 	.word	0x00081e89
   809cc:	00081f89 	.word	0x00081f89
   809d0:	00081f0d 	.word	0x00081f0d
   809d4:	00081f3d 	.word	0x00081f3d
   809d8:	000803a1 	.word	0x000803a1

000809dc <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   809dc:	b580      	push	{r7, lr}
   809de:	b084      	sub	sp, #16
   809e0:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   809e2:	2300      	movs	r3, #0
   809e4:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   809e6:	2300      	movs	r3, #0
   809e8:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   809ea:	4b1a      	ldr	r3, [pc, #104]	; (80a54 <usart_initialize+0x78>)
   809ec:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   809ee:	4b1a      	ldr	r3, [pc, #104]	; (80a58 <usart_initialize+0x7c>)
   809f0:	2200      	movs	r2, #0
   809f2:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   809f4:	2300      	movs	r3, #0
   809f6:	73fb      	strb	r3, [r7, #15]
   809f8:	e006      	b.n	80a08 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   809fa:	7bfb      	ldrb	r3, [r7, #15]
   809fc:	4a17      	ldr	r2, [pc, #92]	; (80a5c <usart_initialize+0x80>)
   809fe:	2100      	movs	r1, #0
   80a00:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   80a02:	7bfb      	ldrb	r3, [r7, #15]
   80a04:	3301      	adds	r3, #1
   80a06:	73fb      	strb	r3, [r7, #15]
   80a08:	7bfb      	ldrb	r3, [r7, #15]
   80a0a:	2b09      	cmp	r3, #9
   80a0c:	d9f5      	bls.n	809fa <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   80a0e:	4814      	ldr	r0, [pc, #80]	; (80a60 <usart_initialize+0x84>)
   80a10:	2101      	movs	r1, #1
   80a12:	4b14      	ldr	r3, [pc, #80]	; (80a64 <usart_initialize+0x88>)
   80a14:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   80a16:	4812      	ldr	r0, [pc, #72]	; (80a60 <usart_initialize+0x84>)
   80a18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   80a1c:	4b12      	ldr	r3, [pc, #72]	; (80a68 <usart_initialize+0x8c>)
   80a1e:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   80a20:	4b12      	ldr	r3, [pc, #72]	; (80a6c <usart_initialize+0x90>)
   80a22:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   80a24:	e00d      	b.n	80a42 <usart_initialize+0x66>
	{
		character = *message_array;
   80a26:	68bb      	ldr	r3, [r7, #8]
   80a28:	781b      	ldrb	r3, [r3, #0]
   80a2a:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   80a2c:	bf00      	nop
   80a2e:	480c      	ldr	r0, [pc, #48]	; (80a60 <usart_initialize+0x84>)
   80a30:	6879      	ldr	r1, [r7, #4]
   80a32:	4b0f      	ldr	r3, [pc, #60]	; (80a70 <usart_initialize+0x94>)
   80a34:	4798      	blx	r3
   80a36:	4603      	mov	r3, r0
   80a38:	2b00      	cmp	r3, #0
   80a3a:	d1f8      	bne.n	80a2e <usart_initialize+0x52>
			
		message_array++;
   80a3c:	68bb      	ldr	r3, [r7, #8]
   80a3e:	3301      	adds	r3, #1
   80a40:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   80a42:	68bb      	ldr	r3, [r7, #8]
   80a44:	781b      	ldrb	r3, [r3, #0]
   80a46:	2b00      	cmp	r3, #0
   80a48:	d1ed      	bne.n	80a26 <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   80a4a:	bf00      	nop
}
   80a4c:	3710      	adds	r7, #16
   80a4e:	46bd      	mov	sp, r7
   80a50:	bd80      	pop	{r7, pc}
   80a52:	bf00      	nop
   80a54:	00080965 	.word	0x00080965
   80a58:	20070458 	.word	0x20070458
   80a5c:	2007045c 	.word	0x2007045c
   80a60:	40098000 	.word	0x40098000
   80a64:	00081f6d 	.word	0x00081f6d
   80a68:	00081f89 	.word	0x00081f89
   80a6c:	000860c4 	.word	0x000860c4
   80a70:	00081ff5 	.word	0x00081ff5

00080a74 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80a74:	b580      	push	{r7, lr}
   80a76:	b082      	sub	sp, #8
   80a78:	af00      	add	r7, sp, #0
   80a7a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80a7c:	687b      	ldr	r3, [r7, #4]
   80a7e:	2b07      	cmp	r3, #7
   80a80:	d82e      	bhi.n	80ae0 <osc_enable+0x6c>
   80a82:	a201      	add	r2, pc, #4	; (adr r2, 80a88 <osc_enable+0x14>)
   80a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a88:	00080ae1 	.word	0x00080ae1
   80a8c:	00080aa9 	.word	0x00080aa9
   80a90:	00080ab1 	.word	0x00080ab1
   80a94:	00080ab9 	.word	0x00080ab9
   80a98:	00080ac1 	.word	0x00080ac1
   80a9c:	00080ac9 	.word	0x00080ac9
   80aa0:	00080ad1 	.word	0x00080ad1
   80aa4:	00080ad9 	.word	0x00080ad9
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80aa8:	2000      	movs	r0, #0
   80aaa:	4b0f      	ldr	r3, [pc, #60]	; (80ae8 <osc_enable+0x74>)
   80aac:	4798      	blx	r3
		break;
   80aae:	e017      	b.n	80ae0 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80ab0:	2001      	movs	r0, #1
   80ab2:	4b0d      	ldr	r3, [pc, #52]	; (80ae8 <osc_enable+0x74>)
   80ab4:	4798      	blx	r3
		break;
   80ab6:	e013      	b.n	80ae0 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80ab8:	2000      	movs	r0, #0
   80aba:	4b0c      	ldr	r3, [pc, #48]	; (80aec <osc_enable+0x78>)
   80abc:	4798      	blx	r3
		break;
   80abe:	e00f      	b.n	80ae0 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80ac0:	2010      	movs	r0, #16
   80ac2:	4b0a      	ldr	r3, [pc, #40]	; (80aec <osc_enable+0x78>)
   80ac4:	4798      	blx	r3
		break;
   80ac6:	e00b      	b.n	80ae0 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80ac8:	2020      	movs	r0, #32
   80aca:	4b08      	ldr	r3, [pc, #32]	; (80aec <osc_enable+0x78>)
   80acc:	4798      	blx	r3
		break;
   80ace:	e007      	b.n	80ae0 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   80ad0:	2000      	movs	r0, #0
   80ad2:	4b07      	ldr	r3, [pc, #28]	; (80af0 <osc_enable+0x7c>)
   80ad4:	4798      	blx	r3
		break;
   80ad6:	e003      	b.n	80ae0 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   80ad8:	2001      	movs	r0, #1
   80ada:	4b05      	ldr	r3, [pc, #20]	; (80af0 <osc_enable+0x7c>)
   80adc:	4798      	blx	r3
		break;
   80ade:	bf00      	nop
	}
}
   80ae0:	3708      	adds	r7, #8
   80ae2:	46bd      	mov	sp, r7
   80ae4:	bd80      	pop	{r7, pc}
   80ae6:	bf00      	nop
   80ae8:	00081b3d 	.word	0x00081b3d
   80aec:	00081bad 	.word	0x00081bad
   80af0:	00081c4d 	.word	0x00081c4d

00080af4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80af4:	b580      	push	{r7, lr}
   80af6:	b082      	sub	sp, #8
   80af8:	af00      	add	r7, sp, #0
   80afa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80afc:	687b      	ldr	r3, [r7, #4]
   80afe:	2b07      	cmp	r3, #7
   80b00:	d826      	bhi.n	80b50 <osc_is_ready+0x5c>
   80b02:	a201      	add	r2, pc, #4	; (adr r2, 80b08 <osc_is_ready+0x14>)
   80b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b08:	00080b29 	.word	0x00080b29
   80b0c:	00080b2d 	.word	0x00080b2d
   80b10:	00080b2d 	.word	0x00080b2d
   80b14:	00080b3f 	.word	0x00080b3f
   80b18:	00080b3f 	.word	0x00080b3f
   80b1c:	00080b3f 	.word	0x00080b3f
   80b20:	00080b3f 	.word	0x00080b3f
   80b24:	00080b3f 	.word	0x00080b3f
	case OSC_SLCK_32K_RC:
		return 1;
   80b28:	2301      	movs	r3, #1
   80b2a:	e012      	b.n	80b52 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   80b2c:	4b0b      	ldr	r3, [pc, #44]	; (80b5c <osc_is_ready+0x68>)
   80b2e:	4798      	blx	r3
   80b30:	4603      	mov	r3, r0
   80b32:	2b00      	cmp	r3, #0
   80b34:	bf0c      	ite	eq
   80b36:	2300      	moveq	r3, #0
   80b38:	2301      	movne	r3, #1
   80b3a:	b2db      	uxtb	r3, r3
   80b3c:	e009      	b.n	80b52 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80b3e:	4b08      	ldr	r3, [pc, #32]	; (80b60 <osc_is_ready+0x6c>)
   80b40:	4798      	blx	r3
   80b42:	4603      	mov	r3, r0
   80b44:	2b00      	cmp	r3, #0
   80b46:	bf0c      	ite	eq
   80b48:	2300      	moveq	r3, #0
   80b4a:	2301      	movne	r3, #1
   80b4c:	b2db      	uxtb	r3, r3
   80b4e:	e000      	b.n	80b52 <osc_is_ready+0x5e>
	}

	return 0;
   80b50:	2300      	movs	r3, #0
}
   80b52:	4618      	mov	r0, r3
   80b54:	3708      	adds	r7, #8
   80b56:	46bd      	mov	sp, r7
   80b58:	bd80      	pop	{r7, pc}
   80b5a:	bf00      	nop
   80b5c:	00081b79 	.word	0x00081b79
   80b60:	00081cb9 	.word	0x00081cb9

00080b64 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80b64:	b480      	push	{r7}
   80b66:	b083      	sub	sp, #12
   80b68:	af00      	add	r7, sp, #0
   80b6a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80b6c:	687b      	ldr	r3, [r7, #4]
   80b6e:	2b07      	cmp	r3, #7
   80b70:	d825      	bhi.n	80bbe <osc_get_rate+0x5a>
   80b72:	a201      	add	r2, pc, #4	; (adr r2, 80b78 <osc_get_rate+0x14>)
   80b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80b78:	00080b99 	.word	0x00080b99
   80b7c:	00080b9f 	.word	0x00080b9f
   80b80:	00080ba5 	.word	0x00080ba5
   80b84:	00080bab 	.word	0x00080bab
   80b88:	00080baf 	.word	0x00080baf
   80b8c:	00080bb3 	.word	0x00080bb3
   80b90:	00080bb7 	.word	0x00080bb7
   80b94:	00080bbb 	.word	0x00080bbb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80b98:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80b9c:	e010      	b.n	80bc0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ba2:	e00d      	b.n	80bc0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ba8:	e00a      	b.n	80bc0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80baa:	4b08      	ldr	r3, [pc, #32]	; (80bcc <osc_get_rate+0x68>)
   80bac:	e008      	b.n	80bc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80bae:	4b08      	ldr	r3, [pc, #32]	; (80bd0 <osc_get_rate+0x6c>)
   80bb0:	e006      	b.n	80bc0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80bb2:	4b08      	ldr	r3, [pc, #32]	; (80bd4 <osc_get_rate+0x70>)
   80bb4:	e004      	b.n	80bc0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80bb6:	4b07      	ldr	r3, [pc, #28]	; (80bd4 <osc_get_rate+0x70>)
   80bb8:	e002      	b.n	80bc0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80bba:	4b06      	ldr	r3, [pc, #24]	; (80bd4 <osc_get_rate+0x70>)
   80bbc:	e000      	b.n	80bc0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80bbe:	2300      	movs	r3, #0
}
   80bc0:	4618      	mov	r0, r3
   80bc2:	370c      	adds	r7, #12
   80bc4:	46bd      	mov	sp, r7
   80bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bca:	4770      	bx	lr
   80bcc:	003d0900 	.word	0x003d0900
   80bd0:	007a1200 	.word	0x007a1200
   80bd4:	00b71b00 	.word	0x00b71b00

00080bd8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80bd8:	b580      	push	{r7, lr}
   80bda:	b082      	sub	sp, #8
   80bdc:	af00      	add	r7, sp, #0
   80bde:	4603      	mov	r3, r0
   80be0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   80be2:	bf00      	nop
   80be4:	79fb      	ldrb	r3, [r7, #7]
   80be6:	4618      	mov	r0, r3
   80be8:	4b05      	ldr	r3, [pc, #20]	; (80c00 <osc_wait_ready+0x28>)
   80bea:	4798      	blx	r3
   80bec:	4603      	mov	r3, r0
   80bee:	f083 0301 	eor.w	r3, r3, #1
   80bf2:	b2db      	uxtb	r3, r3
   80bf4:	2b00      	cmp	r3, #0
   80bf6:	d1f5      	bne.n	80be4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80bf8:	3708      	adds	r7, #8
   80bfa:	46bd      	mov	sp, r7
   80bfc:	bd80      	pop	{r7, pc}
   80bfe:	bf00      	nop
   80c00:	00080af5 	.word	0x00080af5

00080c04 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   80c04:	b580      	push	{r7, lr}
   80c06:	b086      	sub	sp, #24
   80c08:	af00      	add	r7, sp, #0
   80c0a:	60f8      	str	r0, [r7, #12]
   80c0c:	607a      	str	r2, [r7, #4]
   80c0e:	603b      	str	r3, [r7, #0]
   80c10:	460b      	mov	r3, r1
   80c12:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   80c14:	687b      	ldr	r3, [r7, #4]
   80c16:	2b00      	cmp	r3, #0
   80c18:	d107      	bne.n	80c2a <pll_config_init+0x26>
   80c1a:	683b      	ldr	r3, [r7, #0]
   80c1c:	2b00      	cmp	r3, #0
   80c1e:	d104      	bne.n	80c2a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80c20:	68fb      	ldr	r3, [r7, #12]
   80c22:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80c26:	601a      	str	r2, [r3, #0]
   80c28:	e019      	b.n	80c5e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   80c2a:	7afb      	ldrb	r3, [r7, #11]
   80c2c:	4618      	mov	r0, r3
   80c2e:	4b0d      	ldr	r3, [pc, #52]	; (80c64 <pll_config_init+0x60>)
   80c30:	4798      	blx	r3
   80c32:	4602      	mov	r2, r0
   80c34:	687b      	ldr	r3, [r7, #4]
   80c36:	fbb2 f3f3 	udiv	r3, r2, r3
   80c3a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   80c3c:	697b      	ldr	r3, [r7, #20]
   80c3e:	683a      	ldr	r2, [r7, #0]
   80c40:	fb02 f303 	mul.w	r3, r2, r3
   80c44:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80c46:	683b      	ldr	r3, [r7, #0]
   80c48:	3b01      	subs	r3, #1
   80c4a:	041a      	lsls	r2, r3, #16
   80c4c:	4b06      	ldr	r3, [pc, #24]	; (80c68 <pll_config_init+0x64>)
   80c4e:	4013      	ands	r3, r2
   80c50:	687a      	ldr	r2, [r7, #4]
   80c52:	b2d2      	uxtb	r2, r2
   80c54:	4313      	orrs	r3, r2
   80c56:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   80c5a:	68fb      	ldr	r3, [r7, #12]
   80c5c:	601a      	str	r2, [r3, #0]
	}
}
   80c5e:	3718      	adds	r7, #24
   80c60:	46bd      	mov	sp, r7
   80c62:	bd80      	pop	{r7, pc}
   80c64:	00080b65 	.word	0x00080b65
   80c68:	07ff0000 	.word	0x07ff0000

00080c6c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   80c6c:	b580      	push	{r7, lr}
   80c6e:	b082      	sub	sp, #8
   80c70:	af00      	add	r7, sp, #0
   80c72:	6078      	str	r0, [r7, #4]
   80c74:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   80c76:	683b      	ldr	r3, [r7, #0]
   80c78:	2b00      	cmp	r3, #0
   80c7a:	d108      	bne.n	80c8e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80c7c:	4b08      	ldr	r3, [pc, #32]	; (80ca0 <pll_enable+0x34>)
   80c7e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80c80:	4b08      	ldr	r3, [pc, #32]	; (80ca4 <pll_enable+0x38>)
   80c82:	687a      	ldr	r2, [r7, #4]
   80c84:	6812      	ldr	r2, [r2, #0]
   80c86:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80c8a:	629a      	str	r2, [r3, #40]	; 0x28
   80c8c:	e005      	b.n	80c9a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80c8e:	4b05      	ldr	r3, [pc, #20]	; (80ca4 <pll_enable+0x38>)
   80c90:	687a      	ldr	r2, [r7, #4]
   80c92:	6812      	ldr	r2, [r2, #0]
   80c94:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80c98:	61da      	str	r2, [r3, #28]
	}
}
   80c9a:	3708      	adds	r7, #8
   80c9c:	46bd      	mov	sp, r7
   80c9e:	bd80      	pop	{r7, pc}
   80ca0:	00081cd5 	.word	0x00081cd5
   80ca4:	400e0600 	.word	0x400e0600

00080ca8 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80ca8:	b580      	push	{r7, lr}
   80caa:	b082      	sub	sp, #8
   80cac:	af00      	add	r7, sp, #0
   80cae:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80cb0:	687b      	ldr	r3, [r7, #4]
   80cb2:	2b00      	cmp	r3, #0
   80cb4:	d103      	bne.n	80cbe <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80cb6:	4b05      	ldr	r3, [pc, #20]	; (80ccc <pll_is_locked+0x24>)
   80cb8:	4798      	blx	r3
   80cba:	4603      	mov	r3, r0
   80cbc:	e002      	b.n	80cc4 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80cbe:	4b04      	ldr	r3, [pc, #16]	; (80cd0 <pll_is_locked+0x28>)
   80cc0:	4798      	blx	r3
   80cc2:	4603      	mov	r3, r0
}
   80cc4:	4618      	mov	r0, r3
   80cc6:	3708      	adds	r7, #8
   80cc8:	46bd      	mov	sp, r7
   80cca:	bd80      	pop	{r7, pc}
   80ccc:	00081ced 	.word	0x00081ced
   80cd0:	00081d09 	.word	0x00081d09

00080cd4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   80cd4:	b580      	push	{r7, lr}
   80cd6:	b082      	sub	sp, #8
   80cd8:	af00      	add	r7, sp, #0
   80cda:	4603      	mov	r3, r0
   80cdc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80cde:	79fb      	ldrb	r3, [r7, #7]
   80ce0:	3b03      	subs	r3, #3
   80ce2:	2b04      	cmp	r3, #4
   80ce4:	d808      	bhi.n	80cf8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   80ce6:	79fb      	ldrb	r3, [r7, #7]
   80ce8:	4618      	mov	r0, r3
   80cea:	4b05      	ldr	r3, [pc, #20]	; (80d00 <pll_enable_source+0x2c>)
   80cec:	4798      	blx	r3
		osc_wait_ready(e_src);
   80cee:	79fb      	ldrb	r3, [r7, #7]
   80cf0:	4618      	mov	r0, r3
   80cf2:	4b04      	ldr	r3, [pc, #16]	; (80d04 <pll_enable_source+0x30>)
   80cf4:	4798      	blx	r3
		break;
   80cf6:	e000      	b.n	80cfa <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80cf8:	bf00      	nop
	}
}
   80cfa:	3708      	adds	r7, #8
   80cfc:	46bd      	mov	sp, r7
   80cfe:	bd80      	pop	{r7, pc}
   80d00:	00080a75 	.word	0x00080a75
   80d04:	00080bd9 	.word	0x00080bd9

00080d08 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80d08:	b580      	push	{r7, lr}
   80d0a:	b082      	sub	sp, #8
   80d0c:	af00      	add	r7, sp, #0
   80d0e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80d10:	bf00      	nop
   80d12:	6878      	ldr	r0, [r7, #4]
   80d14:	4b04      	ldr	r3, [pc, #16]	; (80d28 <pll_wait_for_lock+0x20>)
   80d16:	4798      	blx	r3
   80d18:	4603      	mov	r3, r0
   80d1a:	2b00      	cmp	r3, #0
   80d1c:	d0f9      	beq.n	80d12 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80d1e:	2300      	movs	r3, #0
}
   80d20:	4618      	mov	r0, r3
   80d22:	3708      	adds	r7, #8
   80d24:	46bd      	mov	sp, r7
   80d26:	bd80      	pop	{r7, pc}
   80d28:	00080ca9 	.word	0x00080ca9

00080d2c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80d2c:	b580      	push	{r7, lr}
   80d2e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80d30:	2006      	movs	r0, #6
   80d32:	4b04      	ldr	r3, [pc, #16]	; (80d44 <sysclk_get_main_hz+0x18>)
   80d34:	4798      	blx	r3
   80d36:	4602      	mov	r2, r0
   80d38:	4613      	mov	r3, r2
   80d3a:	00db      	lsls	r3, r3, #3
   80d3c:	1a9b      	subs	r3, r3, r2
   80d3e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80d40:	4618      	mov	r0, r3
   80d42:	bd80      	pop	{r7, pc}
   80d44:	00080b65 	.word	0x00080b65

00080d48 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80d48:	b580      	push	{r7, lr}
   80d4a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80d4c:	4b02      	ldr	r3, [pc, #8]	; (80d58 <sysclk_get_cpu_hz+0x10>)
   80d4e:	4798      	blx	r3
   80d50:	4603      	mov	r3, r0
   80d52:	085b      	lsrs	r3, r3, #1
}
   80d54:	4618      	mov	r0, r3
   80d56:	bd80      	pop	{r7, pc}
   80d58:	00080d2d 	.word	0x00080d2d

00080d5c <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80d5c:	b590      	push	{r4, r7, lr}
   80d5e:	b083      	sub	sp, #12
   80d60:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80d62:	4b10      	ldr	r3, [pc, #64]	; (80da4 <sysclk_init+0x48>)
   80d64:	4798      	blx	r3
   80d66:	4603      	mov	r3, r0
   80d68:	4618      	mov	r0, r3
   80d6a:	4b0f      	ldr	r3, [pc, #60]	; (80da8 <sysclk_init+0x4c>)
   80d6c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   80d6e:	2006      	movs	r0, #6
   80d70:	4b0e      	ldr	r3, [pc, #56]	; (80dac <sysclk_init+0x50>)
   80d72:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80d74:	1d3b      	adds	r3, r7, #4
   80d76:	4618      	mov	r0, r3
   80d78:	2106      	movs	r1, #6
   80d7a:	2201      	movs	r2, #1
   80d7c:	230e      	movs	r3, #14
   80d7e:	4c0c      	ldr	r4, [pc, #48]	; (80db0 <sysclk_init+0x54>)
   80d80:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80d82:	1d3b      	adds	r3, r7, #4
   80d84:	4618      	mov	r0, r3
   80d86:	2100      	movs	r1, #0
   80d88:	4b0a      	ldr	r3, [pc, #40]	; (80db4 <sysclk_init+0x58>)
   80d8a:	4798      	blx	r3
		pll_wait_for_lock(0);
   80d8c:	2000      	movs	r0, #0
   80d8e:	4b0a      	ldr	r3, [pc, #40]	; (80db8 <sysclk_init+0x5c>)
   80d90:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80d92:	2010      	movs	r0, #16
   80d94:	4b09      	ldr	r3, [pc, #36]	; (80dbc <sysclk_init+0x60>)
   80d96:	4798      	blx	r3
		break;
   80d98:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80d9a:	4b09      	ldr	r3, [pc, #36]	; (80dc0 <sysclk_init+0x64>)
   80d9c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80d9e:	370c      	adds	r7, #12
   80da0:	46bd      	mov	sp, r7
   80da2:	bd90      	pop	{r4, r7, pc}
   80da4:	00080d49 	.word	0x00080d49
   80da8:	00082301 	.word	0x00082301
   80dac:	00080cd5 	.word	0x00080cd5
   80db0:	00080c05 	.word	0x00080c05
   80db4:	00080c6d 	.word	0x00080c6d
   80db8:	00080d09 	.word	0x00080d09
   80dbc:	00081ab9 	.word	0x00081ab9
   80dc0:	00082181 	.word	0x00082181

00080dc4 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   80dc4:	b580      	push	{r7, lr}
   80dc6:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80dc8:	4b32      	ldr	r3, [pc, #200]	; (80e94 <board_init+0xd0>)
   80dca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80dce:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80dd0:	2001      	movs	r0, #1
   80dd2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80dd6:	4b30      	ldr	r3, [pc, #192]	; (80e98 <board_init+0xd4>)
   80dd8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80dda:	2000      	movs	r0, #0
   80ddc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80de0:	4b2d      	ldr	r3, [pc, #180]	; (80e98 <board_init+0xd4>)
   80de2:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   80de4:	2034      	movs	r0, #52	; 0x34
   80de6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80dea:	4b2b      	ldr	r3, [pc, #172]	; (80e98 <board_init+0xd4>)
   80dec:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   80dee:	2035      	movs	r0, #53	; 0x35
   80df0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80df4:	4b28      	ldr	r3, [pc, #160]	; (80e98 <board_init+0xd4>)
   80df6:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   80df8:	202f      	movs	r0, #47	; 0x2f
   80dfa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80dfe:	4b26      	ldr	r3, [pc, #152]	; (80e98 <board_init+0xd4>)
   80e00:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   80e02:	202e      	movs	r0, #46	; 0x2e
   80e04:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e08:	4b23      	ldr	r3, [pc, #140]	; (80e98 <board_init+0xd4>)
   80e0a:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   80e0c:	208f      	movs	r0, #143	; 0x8f
   80e0e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e12:	4b21      	ldr	r3, [pc, #132]	; (80e98 <board_init+0xd4>)
   80e14:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   80e16:	2090      	movs	r0, #144	; 0x90
   80e18:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e1c:	4b1e      	ldr	r3, [pc, #120]	; (80e98 <board_init+0xd4>)
   80e1e:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   80e20:	2057      	movs	r0, #87	; 0x57
   80e22:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e26:	4b1c      	ldr	r3, [pc, #112]	; (80e98 <board_init+0xd4>)
   80e28:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   80e2a:	2057      	movs	r0, #87	; 0x57
   80e2c:	4b1b      	ldr	r3, [pc, #108]	; (80e9c <board_init+0xd8>)
   80e2e:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80e30:	203b      	movs	r0, #59	; 0x3b
   80e32:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e36:	4b18      	ldr	r3, [pc, #96]	; (80e98 <board_init+0xd4>)
   80e38:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80e3a:	2055      	movs	r0, #85	; 0x55
   80e3c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e40:	4b15      	ldr	r3, [pc, #84]	; (80e98 <board_init+0xd4>)
   80e42:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80e44:	2056      	movs	r0, #86	; 0x56
   80e46:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80e4a:	4b13      	ldr	r3, [pc, #76]	; (80e98 <board_init+0xd4>)
   80e4c:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80e4e:	2087      	movs	r0, #135	; 0x87
   80e50:	4913      	ldr	r1, [pc, #76]	; (80ea0 <board_init+0xdc>)
   80e52:	4b11      	ldr	r3, [pc, #68]	; (80e98 <board_init+0xd4>)
   80e54:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80e56:	2037      	movs	r0, #55	; 0x37
   80e58:	4912      	ldr	r1, [pc, #72]	; (80ea4 <board_init+0xe0>)
   80e5a:	4b0f      	ldr	r3, [pc, #60]	; (80e98 <board_init+0xd4>)
   80e5c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80e5e:	4812      	ldr	r0, [pc, #72]	; (80ea8 <board_init+0xe4>)
   80e60:	f44f 7140 	mov.w	r1, #768	; 0x300
   80e64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80e68:	4b10      	ldr	r3, [pc, #64]	; (80eac <board_init+0xe8>)
   80e6a:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   80e6c:	200a      	movs	r0, #10
   80e6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e72:	4b09      	ldr	r3, [pc, #36]	; (80e98 <board_init+0xd4>)
   80e74:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   80e76:	200b      	movs	r0, #11
   80e78:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e7c:	4b06      	ldr	r3, [pc, #24]	; (80e98 <board_init+0xd4>)
   80e7e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   80e80:	208e      	movs	r0, #142	; 0x8e
   80e82:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e86:	4b04      	ldr	r3, [pc, #16]	; (80e98 <board_init+0xd4>)
   80e88:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   80e8a:	208e      	movs	r0, #142	; 0x8e
   80e8c:	4b08      	ldr	r3, [pc, #32]	; (80eb0 <board_init+0xec>)
   80e8e:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   80e90:	bd80      	pop	{r7, pc}
   80e92:	bf00      	nop
   80e94:	400e1a50 	.word	0x400e1a50
   80e98:	00081799 	.word	0x00081799
   80e9c:	000816d1 	.word	0x000816d1
   80ea0:	28000079 	.word	0x28000079
   80ea4:	28000059 	.word	0x28000059
   80ea8:	400e0e00 	.word	0x400e0e00
   80eac:	000818d5 	.word	0x000818d5
   80eb0:	00081705 	.word	0x00081705

00080eb4 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80eb4:	b480      	push	{r7}
   80eb6:	b083      	sub	sp, #12
   80eb8:	af00      	add	r7, sp, #0
   80eba:	6078      	str	r0, [r7, #4]
   80ebc:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   80ebe:	687b      	ldr	r3, [r7, #4]
   80ec0:	683a      	ldr	r2, [r7, #0]
   80ec2:	601a      	str	r2, [r3, #0]
}
   80ec4:	370c      	adds	r7, #12
   80ec6:	46bd      	mov	sp, r7
   80ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ecc:	4770      	bx	lr
   80ece:	bf00      	nop

00080ed0 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80ed0:	b480      	push	{r7}
   80ed2:	b083      	sub	sp, #12
   80ed4:	af00      	add	r7, sp, #0
   80ed6:	6078      	str	r0, [r7, #4]
   80ed8:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   80eda:	687b      	ldr	r3, [r7, #4]
   80edc:	683a      	ldr	r2, [r7, #0]
   80ede:	605a      	str	r2, [r3, #4]
}
   80ee0:	370c      	adds	r7, #12
   80ee2:	46bd      	mov	sp, r7
   80ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ee8:	4770      	bx	lr
   80eea:	bf00      	nop

00080eec <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   80eec:	b580      	push	{r7, lr}
   80eee:	b082      	sub	sp, #8
   80ef0:	af00      	add	r7, sp, #0
   80ef2:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   80ef4:	687b      	ldr	r3, [r7, #4]
   80ef6:	685b      	ldr	r3, [r3, #4]
   80ef8:	4618      	mov	r0, r3
   80efa:	4b02      	ldr	r3, [pc, #8]	; (80f04 <sn65hvd234_enable+0x18>)
   80efc:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   80efe:	3708      	adds	r7, #8
   80f00:	46bd      	mov	sp, r7
   80f02:	bd80      	pop	{r7, pc}
   80f04:	000816d1 	.word	0x000816d1

00080f08 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   80f08:	b580      	push	{r7, lr}
   80f0a:	b082      	sub	sp, #8
   80f0c:	af00      	add	r7, sp, #0
   80f0e:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   80f10:	687b      	ldr	r3, [r7, #4]
   80f12:	681b      	ldr	r3, [r3, #0]
   80f14:	4618      	mov	r0, r3
   80f16:	4b02      	ldr	r3, [pc, #8]	; (80f20 <sn65hvd234_disable_low_power+0x18>)
   80f18:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   80f1a:	3708      	adds	r7, #8
   80f1c:	46bd      	mov	sp, r7
   80f1e:	bd80      	pop	{r7, pc}
   80f20:	00081705 	.word	0x00081705

00080f24 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   80f24:	b580      	push	{r7, lr}
   80f26:	b08a      	sub	sp, #40	; 0x28
   80f28:	af00      	add	r7, sp, #0
   80f2a:	60f8      	str	r0, [r7, #12]
   80f2c:	60b9      	str	r1, [r7, #8]
   80f2e:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80f30:	687b      	ldr	r3, [r7, #4]
   80f32:	f246 12a8 	movw	r2, #25000	; 0x61a8
   80f36:	fb02 f203 	mul.w	r2, r2, r3
   80f3a:	68bb      	ldr	r3, [r7, #8]
   80f3c:	4413      	add	r3, r2
   80f3e:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   80f40:	687b      	ldr	r3, [r7, #4]
   80f42:	f246 11a8 	movw	r1, #25000	; 0x61a8
   80f46:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80f4a:	fbb2 f3f3 	udiv	r3, r2, r3
   80f4e:	2b80      	cmp	r3, #128	; 0x80
   80f50:	d901      	bls.n	80f56 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   80f52:	2300      	movs	r3, #0
   80f54:	e085      	b.n	81062 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   80f56:	68bb      	ldr	r3, [r7, #8]
   80f58:	085a      	lsrs	r2, r3, #1
   80f5a:	687b      	ldr	r3, [r7, #4]
   80f5c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   80f60:	fb01 f303 	mul.w	r3, r1, r3
   80f64:	429a      	cmp	r2, r3
   80f66:	d201      	bcs.n	80f6c <can_set_baudrate+0x48>
		return 0;
   80f68:	2300      	movs	r3, #0
   80f6a:	e07a      	b.n	81062 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   80f6c:	2308      	movs	r3, #8
   80f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   80f72:	f04f 33ff 	mov.w	r3, #4294967295
   80f76:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80f78:	2308      	movs	r3, #8
   80f7a:	77fb      	strb	r3, [r7, #31]
   80f7c:	e02b      	b.n	80fd6 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   80f7e:	7ffb      	ldrb	r3, [r7, #31]
   80f80:	687a      	ldr	r2, [r7, #4]
   80f82:	fb02 f303 	mul.w	r3, r2, r3
   80f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80f8a:	fb02 f303 	mul.w	r3, r2, r3
   80f8e:	68ba      	ldr	r2, [r7, #8]
   80f90:	fbb2 f3f3 	udiv	r3, r2, r3
   80f94:	2b80      	cmp	r3, #128	; 0x80
   80f96:	d81b      	bhi.n	80fd0 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   80f98:	7ffb      	ldrb	r3, [r7, #31]
   80f9a:	687a      	ldr	r2, [r7, #4]
   80f9c:	fb02 f303 	mul.w	r3, r2, r3
   80fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80fa4:	fb02 f203 	mul.w	r2, r2, r3
   80fa8:	68bb      	ldr	r3, [r7, #8]
   80faa:	fbb3 f1f2 	udiv	r1, r3, r2
   80fae:	fb02 f201 	mul.w	r2, r2, r1
   80fb2:	1a9b      	subs	r3, r3, r2
   80fb4:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   80fb6:	69ba      	ldr	r2, [r7, #24]
   80fb8:	6a3b      	ldr	r3, [r7, #32]
   80fba:	429a      	cmp	r2, r3
   80fbc:	d208      	bcs.n	80fd0 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   80fbe:	69bb      	ldr	r3, [r7, #24]
   80fc0:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   80fc2:	7ffb      	ldrb	r3, [r7, #31]
   80fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   80fc8:	6a3b      	ldr	r3, [r7, #32]
   80fca:	2b00      	cmp	r3, #0
   80fcc:	d100      	bne.n	80fd0 <can_set_baudrate+0xac>
					break;
   80fce:	e005      	b.n	80fdc <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80fd0:	7ffb      	ldrb	r3, [r7, #31]
   80fd2:	3301      	adds	r3, #1
   80fd4:	77fb      	strb	r3, [r7, #31]
   80fd6:	7ffb      	ldrb	r3, [r7, #31]
   80fd8:	2b19      	cmp	r3, #25
   80fda:	d9d0      	bls.n	80f7e <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80fe0:	687a      	ldr	r2, [r7, #4]
   80fe2:	fb02 f303 	mul.w	r3, r2, r3
   80fe6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80fea:	fb02 f303 	mul.w	r3, r2, r3
   80fee:	68ba      	ldr	r2, [r7, #8]
   80ff0:	fbb2 f3f3 	udiv	r3, r2, r3
   80ff4:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   80ff6:	7dfb      	ldrb	r3, [r7, #23]
   80ff8:	2b01      	cmp	r3, #1
   80ffa:	d801      	bhi.n	81000 <can_set_baudrate+0xdc>
		return 0;
   80ffc:	2300      	movs	r3, #0
   80ffe:	e030      	b.n	81062 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   81000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81004:	f1a3 0208 	sub.w	r2, r3, #8
   81008:	4613      	mov	r3, r2
   8100a:	005b      	lsls	r3, r3, #1
   8100c:	4413      	add	r3, r2
   8100e:	005b      	lsls	r3, r3, #1
   81010:	4a16      	ldr	r2, [pc, #88]	; (8106c <can_set_baudrate+0x148>)
   81012:	4413      	add	r3, r2
   81014:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81016:	68f8      	ldr	r0, [r7, #12]
   81018:	4b15      	ldr	r3, [pc, #84]	; (81070 <can_set_baudrate+0x14c>)
   8101a:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8101c:	693b      	ldr	r3, [r7, #16]
   8101e:	78db      	ldrb	r3, [r3, #3]
   81020:	3b01      	subs	r3, #1
   81022:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81026:	693b      	ldr	r3, [r7, #16]
   81028:	789b      	ldrb	r3, [r3, #2]
   8102a:	3b01      	subs	r3, #1
   8102c:	011b      	lsls	r3, r3, #4
   8102e:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81032:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81034:	693b      	ldr	r3, [r7, #16]
   81036:	785b      	ldrb	r3, [r3, #1]
   81038:	3b01      	subs	r3, #1
   8103a:	021b      	lsls	r3, r3, #8
   8103c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81040:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81042:	693b      	ldr	r3, [r7, #16]
   81044:	791b      	ldrb	r3, [r3, #4]
   81046:	3b01      	subs	r3, #1
   81048:	031b      	lsls	r3, r3, #12
   8104a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   8104e:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81050:	7dfb      	ldrb	r3, [r7, #23]
   81052:	3b01      	subs	r3, #1
   81054:	041b      	lsls	r3, r3, #16
   81056:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8105a:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8105c:	68fb      	ldr	r3, [r7, #12]
   8105e:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81060:	2301      	movs	r3, #1
}
   81062:	4618      	mov	r0, r3
   81064:	3728      	adds	r7, #40	; 0x28
   81066:	46bd      	mov	sp, r7
   81068:	bd80      	pop	{r7, pc}
   8106a:	bf00      	nop
   8106c:	000860e4 	.word	0x000860e4
   81070:	0008111d 	.word	0x0008111d

00081074 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81074:	b580      	push	{r7, lr}
   81076:	b086      	sub	sp, #24
   81078:	af00      	add	r7, sp, #0
   8107a:	60f8      	str	r0, [r7, #12]
   8107c:	60b9      	str	r1, [r7, #8]
   8107e:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   81080:	68f8      	ldr	r0, [r7, #12]
   81082:	68b9      	ldr	r1, [r7, #8]
   81084:	687a      	ldr	r2, [r7, #4]
   81086:	4b17      	ldr	r3, [pc, #92]	; (810e4 <can_init+0x70>)
   81088:	4798      	blx	r3
   8108a:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   8108c:	697b      	ldr	r3, [r7, #20]
   8108e:	2b00      	cmp	r3, #0
   81090:	d101      	bne.n	81096 <can_init+0x22>
		return 0;
   81092:	2300      	movs	r3, #0
   81094:	e021      	b.n	810da <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81096:	68f8      	ldr	r0, [r7, #12]
   81098:	4b13      	ldr	r3, [pc, #76]	; (810e8 <can_init+0x74>)
   8109a:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   8109c:	68f8      	ldr	r0, [r7, #12]
   8109e:	4b13      	ldr	r3, [pc, #76]	; (810ec <can_init+0x78>)
   810a0:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   810a2:	2300      	movs	r3, #0
   810a4:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   810a6:	2300      	movs	r3, #0
   810a8:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   810aa:	e006      	b.n	810ba <can_init+0x46>
		ul_flag = can_get_status(p_can);
   810ac:	68f8      	ldr	r0, [r7, #12]
   810ae:	4b10      	ldr	r3, [pc, #64]	; (810f0 <can_init+0x7c>)
   810b0:	4798      	blx	r3
   810b2:	6178      	str	r0, [r7, #20]
		ul_tick++;
   810b4:	693b      	ldr	r3, [r7, #16]
   810b6:	3301      	adds	r3, #1
   810b8:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   810ba:	697b      	ldr	r3, [r7, #20]
   810bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   810c0:	2b00      	cmp	r3, #0
   810c2:	d103      	bne.n	810cc <can_init+0x58>
   810c4:	693a      	ldr	r2, [r7, #16]
   810c6:	4b0b      	ldr	r3, [pc, #44]	; (810f4 <can_init+0x80>)
   810c8:	429a      	cmp	r2, r3
   810ca:	d9ef      	bls.n	810ac <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   810cc:	693a      	ldr	r2, [r7, #16]
   810ce:	4b0a      	ldr	r3, [pc, #40]	; (810f8 <can_init+0x84>)
   810d0:	429a      	cmp	r2, r3
   810d2:	d101      	bne.n	810d8 <can_init+0x64>
		return 0;
   810d4:	2300      	movs	r3, #0
   810d6:	e000      	b.n	810da <can_init+0x66>
	} else {
		return 1;
   810d8:	2301      	movs	r3, #1
	}
}
   810da:	4618      	mov	r0, r3
   810dc:	3718      	adds	r7, #24
   810de:	46bd      	mov	sp, r7
   810e0:	bd80      	pop	{r7, pc}
   810e2:	bf00      	nop
   810e4:	00080f25 	.word	0x00080f25
   810e8:	000814b5 	.word	0x000814b5
   810ec:	000810fd 	.word	0x000810fd
   810f0:	00081175 	.word	0x00081175
   810f4:	0001869f 	.word	0x0001869f
   810f8:	000186a0 	.word	0x000186a0

000810fc <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   810fc:	b480      	push	{r7}
   810fe:	b083      	sub	sp, #12
   81100:	af00      	add	r7, sp, #0
   81102:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81104:	687b      	ldr	r3, [r7, #4]
   81106:	681b      	ldr	r3, [r3, #0]
   81108:	f043 0201 	orr.w	r2, r3, #1
   8110c:	687b      	ldr	r3, [r7, #4]
   8110e:	601a      	str	r2, [r3, #0]
}
   81110:	370c      	adds	r7, #12
   81112:	46bd      	mov	sp, r7
   81114:	f85d 7b04 	ldr.w	r7, [sp], #4
   81118:	4770      	bx	lr
   8111a:	bf00      	nop

0008111c <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   8111c:	b480      	push	{r7}
   8111e:	b083      	sub	sp, #12
   81120:	af00      	add	r7, sp, #0
   81122:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81124:	687b      	ldr	r3, [r7, #4]
   81126:	681b      	ldr	r3, [r3, #0]
   81128:	f023 0201 	bic.w	r2, r3, #1
   8112c:	687b      	ldr	r3, [r7, #4]
   8112e:	601a      	str	r2, [r3, #0]
}
   81130:	370c      	adds	r7, #12
   81132:	46bd      	mov	sp, r7
   81134:	f85d 7b04 	ldr.w	r7, [sp], #4
   81138:	4770      	bx	lr
   8113a:	bf00      	nop

0008113c <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   8113c:	b480      	push	{r7}
   8113e:	b083      	sub	sp, #12
   81140:	af00      	add	r7, sp, #0
   81142:	6078      	str	r0, [r7, #4]
   81144:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   81146:	687b      	ldr	r3, [r7, #4]
   81148:	683a      	ldr	r2, [r7, #0]
   8114a:	605a      	str	r2, [r3, #4]
}
   8114c:	370c      	adds	r7, #12
   8114e:	46bd      	mov	sp, r7
   81150:	f85d 7b04 	ldr.w	r7, [sp], #4
   81154:	4770      	bx	lr
   81156:	bf00      	nop

00081158 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81158:	b480      	push	{r7}
   8115a:	b083      	sub	sp, #12
   8115c:	af00      	add	r7, sp, #0
   8115e:	6078      	str	r0, [r7, #4]
   81160:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81162:	687b      	ldr	r3, [r7, #4]
   81164:	683a      	ldr	r2, [r7, #0]
   81166:	609a      	str	r2, [r3, #8]
}
   81168:	370c      	adds	r7, #12
   8116a:	46bd      	mov	sp, r7
   8116c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81170:	4770      	bx	lr
   81172:	bf00      	nop

00081174 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81174:	b480      	push	{r7}
   81176:	b083      	sub	sp, #12
   81178:	af00      	add	r7, sp, #0
   8117a:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   8117c:	687b      	ldr	r3, [r7, #4]
   8117e:	691b      	ldr	r3, [r3, #16]
}
   81180:	4618      	mov	r0, r3
   81182:	370c      	adds	r7, #12
   81184:	46bd      	mov	sp, r7
   81186:	f85d 7b04 	ldr.w	r7, [sp], #4
   8118a:	4770      	bx	lr

0008118c <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   8118c:	b480      	push	{r7}
   8118e:	b085      	sub	sp, #20
   81190:	af00      	add	r7, sp, #0
   81192:	6078      	str	r0, [r7, #4]
   81194:	460b      	mov	r3, r1
   81196:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   81198:	687b      	ldr	r3, [r7, #4]
   8119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8119c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   811a0:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   811a2:	78fa      	ldrb	r2, [r7, #3]
   811a4:	68fb      	ldr	r3, [r7, #12]
   811a6:	431a      	orrs	r2, r3
   811a8:	687b      	ldr	r3, [r7, #4]
   811aa:	625a      	str	r2, [r3, #36]	; 0x24
}
   811ac:	3714      	adds	r7, #20
   811ae:	46bd      	mov	sp, r7
   811b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   811b4:	4770      	bx	lr
   811b6:	bf00      	nop

000811b8 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   811b8:	b480      	push	{r7}
   811ba:	b083      	sub	sp, #12
   811bc:	af00      	add	r7, sp, #0
   811be:	6078      	str	r0, [r7, #4]
   811c0:	460b      	mov	r3, r1
   811c2:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   811c4:	78fb      	ldrb	r3, [r7, #3]
   811c6:	687a      	ldr	r2, [r7, #4]
   811c8:	015b      	lsls	r3, r3, #5
   811ca:	4413      	add	r3, r2
   811cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
   811d0:	681b      	ldr	r3, [r3, #0]
}
   811d2:	4618      	mov	r0, r3
   811d4:	370c      	adds	r7, #12
   811d6:	46bd      	mov	sp, r7
   811d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   811dc:	4770      	bx	lr
   811de:	bf00      	nop

000811e0 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   811e0:	b480      	push	{r7}
   811e2:	b085      	sub	sp, #20
   811e4:	af00      	add	r7, sp, #0
   811e6:	6078      	str	r0, [r7, #4]
   811e8:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   811ea:	683b      	ldr	r3, [r7, #0]
   811ec:	681b      	ldr	r3, [r3, #0]
   811ee:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   811f0:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   811f2:	683a      	ldr	r2, [r7, #0]
   811f4:	7992      	ldrb	r2, [r2, #6]
   811f6:	0412      	lsls	r2, r2, #16
   811f8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   811fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81200:	6879      	ldr	r1, [r7, #4]
   81202:	015b      	lsls	r3, r3, #5
   81204:	440b      	add	r3, r1
   81206:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8120a:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   8120c:	3714      	adds	r7, #20
   8120e:	46bd      	mov	sp, r7
   81210:	f85d 7b04 	ldr.w	r7, [sp], #4
   81214:	4770      	bx	lr
   81216:	bf00      	nop

00081218 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81218:	b480      	push	{r7}
   8121a:	b085      	sub	sp, #20
   8121c:	af00      	add	r7, sp, #0
   8121e:	6078      	str	r0, [r7, #4]
   81220:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81222:	683b      	ldr	r3, [r7, #0]
   81224:	681b      	ldr	r3, [r3, #0]
   81226:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81228:	683b      	ldr	r3, [r7, #0]
   8122a:	791b      	ldrb	r3, [r3, #4]
   8122c:	2b00      	cmp	r3, #0
   8122e:	d12e      	bne.n	8128e <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81230:	7bfb      	ldrb	r3, [r7, #15]
   81232:	687a      	ldr	r2, [r7, #4]
   81234:	3310      	adds	r3, #16
   81236:	015b      	lsls	r3, r3, #5
   81238:	4413      	add	r3, r2
   8123a:	2200      	movs	r2, #0
   8123c:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   8123e:	7bfb      	ldrb	r3, [r7, #15]
   81240:	687a      	ldr	r2, [r7, #4]
   81242:	3310      	adds	r3, #16
   81244:	015b      	lsls	r3, r3, #5
   81246:	4413      	add	r3, r2
   81248:	2200      	movs	r2, #0
   8124a:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   8124c:	7bfb      	ldrb	r3, [r7, #15]
   8124e:	687a      	ldr	r2, [r7, #4]
   81250:	015b      	lsls	r3, r3, #5
   81252:	4413      	add	r3, r2
   81254:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81258:	2200      	movs	r2, #0
   8125a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   8125c:	7bfb      	ldrb	r3, [r7, #15]
   8125e:	687a      	ldr	r2, [r7, #4]
   81260:	015b      	lsls	r3, r3, #5
   81262:	4413      	add	r3, r2
   81264:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81268:	2200      	movs	r2, #0
   8126a:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   8126c:	7bfb      	ldrb	r3, [r7, #15]
   8126e:	687a      	ldr	r2, [r7, #4]
   81270:	015b      	lsls	r3, r3, #5
   81272:	4413      	add	r3, r2
   81274:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81278:	2200      	movs	r2, #0
   8127a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   8127c:	7bfb      	ldrb	r3, [r7, #15]
   8127e:	687a      	ldr	r2, [r7, #4]
   81280:	015b      	lsls	r3, r3, #5
   81282:	4413      	add	r3, r2
   81284:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81288:	2200      	movs	r2, #0
   8128a:	605a      	str	r2, [r3, #4]
		return;
   8128c:	e04e      	b.n	8132c <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   8128e:	7bfb      	ldrb	r3, [r7, #15]
   81290:	7bfa      	ldrb	r2, [r7, #15]
   81292:	6879      	ldr	r1, [r7, #4]
   81294:	3210      	adds	r2, #16
   81296:	0152      	lsls	r2, r2, #5
   81298:	440a      	add	r2, r1
   8129a:	6812      	ldr	r2, [r2, #0]
   8129c:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   812a0:	683a      	ldr	r2, [r7, #0]
   812a2:	79d2      	ldrb	r2, [r2, #7]
   812a4:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   812a6:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   812a8:	6879      	ldr	r1, [r7, #4]
   812aa:	3310      	adds	r3, #16
   812ac:	015b      	lsls	r3, r3, #5
   812ae:	440b      	add	r3, r1
   812b0:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   812b2:	683b      	ldr	r3, [r7, #0]
   812b4:	795b      	ldrb	r3, [r3, #5]
   812b6:	2b00      	cmp	r3, #0
   812b8:	d015      	beq.n	812e6 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   812ba:	7bfb      	ldrb	r3, [r7, #15]
   812bc:	683a      	ldr	r2, [r7, #0]
   812be:	68d2      	ldr	r2, [r2, #12]
   812c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   812c4:	6879      	ldr	r1, [r7, #4]
   812c6:	3310      	adds	r3, #16
   812c8:	015b      	lsls	r3, r3, #5
   812ca:	440b      	add	r3, r1
   812cc:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   812ce:	7bfb      	ldrb	r3, [r7, #15]
   812d0:	683a      	ldr	r2, [r7, #0]
   812d2:	6912      	ldr	r2, [r2, #16]
   812d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   812d8:	6879      	ldr	r1, [r7, #4]
   812da:	015b      	lsls	r3, r3, #5
   812dc:	440b      	add	r3, r1
   812de:	f503 7302 	add.w	r3, r3, #520	; 0x208
   812e2:	601a      	str	r2, [r3, #0]
   812e4:	e010      	b.n	81308 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   812e6:	7bfb      	ldrb	r3, [r7, #15]
   812e8:	683a      	ldr	r2, [r7, #0]
   812ea:	68d2      	ldr	r2, [r2, #12]
   812ec:	6879      	ldr	r1, [r7, #4]
   812ee:	3310      	adds	r3, #16
   812f0:	015b      	lsls	r3, r3, #5
   812f2:	440b      	add	r3, r1
   812f4:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   812f6:	7bfb      	ldrb	r3, [r7, #15]
   812f8:	683a      	ldr	r2, [r7, #0]
   812fa:	6912      	ldr	r2, [r2, #16]
   812fc:	6879      	ldr	r1, [r7, #4]
   812fe:	015b      	lsls	r3, r3, #5
   81300:	440b      	add	r3, r1
   81302:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81306:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81308:	7bfb      	ldrb	r3, [r7, #15]
   8130a:	7bfa      	ldrb	r2, [r7, #15]
   8130c:	6879      	ldr	r1, [r7, #4]
   8130e:	3210      	adds	r2, #16
   81310:	0152      	lsls	r2, r2, #5
   81312:	440a      	add	r2, r1
   81314:	6812      	ldr	r2, [r2, #0]
   81316:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   8131a:	683a      	ldr	r2, [r7, #0]
   8131c:	7912      	ldrb	r2, [r2, #4]
   8131e:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81320:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81322:	6879      	ldr	r1, [r7, #4]
   81324:	3310      	adds	r3, #16
   81326:	015b      	lsls	r3, r3, #5
   81328:	440b      	add	r3, r1
   8132a:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   8132c:	3714      	adds	r7, #20
   8132e:	46bd      	mov	sp, r7
   81330:	f85d 7b04 	ldr.w	r7, [sp], #4
   81334:	4770      	bx	lr
   81336:	bf00      	nop

00081338 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81338:	b580      	push	{r7, lr}
   8133a:	b086      	sub	sp, #24
   8133c:	af00      	add	r7, sp, #0
   8133e:	6078      	str	r0, [r7, #4]
   81340:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81342:	2300      	movs	r3, #0
   81344:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81346:	683b      	ldr	r3, [r7, #0]
   81348:	681b      	ldr	r3, [r3, #0]
   8134a:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   8134c:	683b      	ldr	r3, [r7, #0]
   8134e:	689b      	ldr	r3, [r3, #8]
   81350:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81352:	68fb      	ldr	r3, [r7, #12]
   81354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81358:	2b00      	cmp	r3, #0
   8135a:	d006      	beq.n	8136a <can_mailbox_read+0x32>
   8135c:	68fb      	ldr	r3, [r7, #12]
   8135e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81362:	2b00      	cmp	r3, #0
   81364:	d001      	beq.n	8136a <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81366:	2302      	movs	r3, #2
   81368:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   8136a:	7cfb      	ldrb	r3, [r7, #19]
   8136c:	687a      	ldr	r2, [r7, #4]
   8136e:	015b      	lsls	r3, r3, #5
   81370:	4413      	add	r3, r2
   81372:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81376:	685b      	ldr	r3, [r3, #4]
   81378:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8137c:	683b      	ldr	r3, [r7, #0]
   8137e:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81380:	68fb      	ldr	r3, [r7, #12]
   81382:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81386:	0c1b      	lsrs	r3, r3, #16
   81388:	b2da      	uxtb	r2, r3
   8138a:	683b      	ldr	r3, [r7, #0]
   8138c:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   8138e:	7cfb      	ldrb	r3, [r7, #19]
   81390:	687a      	ldr	r2, [r7, #4]
   81392:	015b      	lsls	r3, r3, #5
   81394:	4413      	add	r3, r2
   81396:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8139a:	685a      	ldr	r2, [r3, #4]
   8139c:	683b      	ldr	r3, [r7, #0]
   8139e:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   813a0:	683b      	ldr	r3, [r7, #0]
   813a2:	799b      	ldrb	r3, [r3, #6]
   813a4:	2b04      	cmp	r3, #4
   813a6:	d908      	bls.n	813ba <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   813a8:	7cfb      	ldrb	r3, [r7, #19]
   813aa:	687a      	ldr	r2, [r7, #4]
   813ac:	015b      	lsls	r3, r3, #5
   813ae:	4413      	add	r3, r2
   813b0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   813b4:	681a      	ldr	r2, [r3, #0]
   813b6:	683b      	ldr	r3, [r7, #0]
   813b8:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   813ba:	7cfb      	ldrb	r3, [r7, #19]
   813bc:	687a      	ldr	r2, [r7, #4]
   813be:	015b      	lsls	r3, r3, #5
   813c0:	4413      	add	r3, r2
   813c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   813c6:	681a      	ldr	r2, [r3, #0]
   813c8:	683b      	ldr	r3, [r7, #0]
   813ca:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   813cc:	683b      	ldr	r3, [r7, #0]
   813ce:	689b      	ldr	r3, [r3, #8]
   813d0:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   813d2:	68fb      	ldr	r3, [r7, #12]
   813d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   813d8:	2b00      	cmp	r3, #0
   813da:	d003      	beq.n	813e4 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   813dc:	697b      	ldr	r3, [r7, #20]
   813de:	f043 0304 	orr.w	r3, r3, #4
   813e2:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   813e4:	6878      	ldr	r0, [r7, #4]
   813e6:	6839      	ldr	r1, [r7, #0]
   813e8:	4b03      	ldr	r3, [pc, #12]	; (813f8 <can_mailbox_read+0xc0>)
   813ea:	4798      	blx	r3

	return ul_retval;
   813ec:	697b      	ldr	r3, [r7, #20]
}
   813ee:	4618      	mov	r0, r3
   813f0:	3718      	adds	r7, #24
   813f2:	46bd      	mov	sp, r7
   813f4:	bd80      	pop	{r7, pc}
   813f6:	bf00      	nop
   813f8:	000811e1 	.word	0x000811e1

000813fc <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   813fc:	b580      	push	{r7, lr}
   813fe:	b084      	sub	sp, #16
   81400:	af00      	add	r7, sp, #0
   81402:	6078      	str	r0, [r7, #4]
   81404:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81406:	683b      	ldr	r3, [r7, #0]
   81408:	681b      	ldr	r3, [r3, #0]
   8140a:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   8140c:	7bfb      	ldrb	r3, [r7, #15]
   8140e:	6878      	ldr	r0, [r7, #4]
   81410:	4619      	mov	r1, r3
   81412:	4b27      	ldr	r3, [pc, #156]	; (814b0 <can_mailbox_write+0xb4>)
   81414:	4798      	blx	r3
   81416:	4602      	mov	r2, r0
   81418:	683b      	ldr	r3, [r7, #0]
   8141a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   8141c:	683b      	ldr	r3, [r7, #0]
   8141e:	689b      	ldr	r3, [r3, #8]
   81420:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   81422:	68bb      	ldr	r3, [r7, #8]
   81424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81428:	2b00      	cmp	r3, #0
   8142a:	d101      	bne.n	81430 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   8142c:	2301      	movs	r3, #1
   8142e:	e03b      	b.n	814a8 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   81430:	683b      	ldr	r3, [r7, #0]
   81432:	795b      	ldrb	r3, [r3, #5]
   81434:	2b00      	cmp	r3, #0
   81436:	d00b      	beq.n	81450 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81438:	7bfb      	ldrb	r3, [r7, #15]
   8143a:	683a      	ldr	r2, [r7, #0]
   8143c:	6912      	ldr	r2, [r2, #16]
   8143e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81442:	6879      	ldr	r1, [r7, #4]
   81444:	015b      	lsls	r3, r3, #5
   81446:	440b      	add	r3, r1
   81448:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8144c:	601a      	str	r2, [r3, #0]
   8144e:	e008      	b.n	81462 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81450:	7bfb      	ldrb	r3, [r7, #15]
   81452:	683a      	ldr	r2, [r7, #0]
   81454:	6912      	ldr	r2, [r2, #16]
   81456:	6879      	ldr	r1, [r7, #4]
   81458:	015b      	lsls	r3, r3, #5
   8145a:	440b      	add	r3, r1
   8145c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81460:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81462:	7bfb      	ldrb	r3, [r7, #15]
   81464:	683a      	ldr	r2, [r7, #0]
   81466:	6992      	ldr	r2, [r2, #24]
   81468:	6879      	ldr	r1, [r7, #4]
   8146a:	015b      	lsls	r3, r3, #5
   8146c:	440b      	add	r3, r1
   8146e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81472:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81474:	683b      	ldr	r3, [r7, #0]
   81476:	799b      	ldrb	r3, [r3, #6]
   81478:	2b04      	cmp	r3, #4
   8147a:	d908      	bls.n	8148e <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   8147c:	7bfb      	ldrb	r3, [r7, #15]
   8147e:	683a      	ldr	r2, [r7, #0]
   81480:	69d2      	ldr	r2, [r2, #28]
   81482:	6879      	ldr	r1, [r7, #4]
   81484:	015b      	lsls	r3, r3, #5
   81486:	440b      	add	r3, r1
   81488:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8148c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   8148e:	7bfb      	ldrb	r3, [r7, #15]
   81490:	683a      	ldr	r2, [r7, #0]
   81492:	7992      	ldrb	r2, [r2, #6]
   81494:	0412      	lsls	r2, r2, #16
   81496:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8149a:	6879      	ldr	r1, [r7, #4]
   8149c:	015b      	lsls	r3, r3, #5
   8149e:	440b      	add	r3, r1
   814a0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   814a4:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   814a6:	2300      	movs	r3, #0
}
   814a8:	4618      	mov	r0, r3
   814aa:	3710      	adds	r7, #16
   814ac:	46bd      	mov	sp, r7
   814ae:	bd80      	pop	{r7, pc}
   814b0:	000811b9 	.word	0x000811b9

000814b4 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   814b4:	b580      	push	{r7, lr}
   814b6:	b08c      	sub	sp, #48	; 0x30
   814b8:	af00      	add	r7, sp, #0
   814ba:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   814bc:	2300      	movs	r3, #0
   814be:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   814c0:	2300      	movs	r3, #0
   814c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   814c6:	e00d      	b.n	814e4 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   814c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   814cc:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   814ce:	f107 030c 	add.w	r3, r7, #12
   814d2:	6878      	ldr	r0, [r7, #4]
   814d4:	4619      	mov	r1, r3
   814d6:	4b07      	ldr	r3, [pc, #28]	; (814f4 <can_reset_all_mailbox+0x40>)
   814d8:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   814da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   814de:	3301      	adds	r3, #1
   814e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   814e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   814e8:	2b07      	cmp	r3, #7
   814ea:	d9ed      	bls.n	814c8 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   814ec:	3730      	adds	r7, #48	; 0x30
   814ee:	46bd      	mov	sp, r7
   814f0:	bd80      	pop	{r7, pc}
   814f2:	bf00      	nop
   814f4:	00081219 	.word	0x00081219

000814f8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   814f8:	b480      	push	{r7}
   814fa:	b085      	sub	sp, #20
   814fc:	af00      	add	r7, sp, #0
   814fe:	60f8      	str	r0, [r7, #12]
   81500:	60b9      	str	r1, [r7, #8]
   81502:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81504:	687b      	ldr	r3, [r7, #4]
   81506:	2b00      	cmp	r3, #0
   81508:	d003      	beq.n	81512 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8150a:	68fb      	ldr	r3, [r7, #12]
   8150c:	68ba      	ldr	r2, [r7, #8]
   8150e:	665a      	str	r2, [r3, #100]	; 0x64
   81510:	e002      	b.n	81518 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81512:	68fb      	ldr	r3, [r7, #12]
   81514:	68ba      	ldr	r2, [r7, #8]
   81516:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81518:	3714      	adds	r7, #20
   8151a:	46bd      	mov	sp, r7
   8151c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81520:	4770      	bx	lr
   81522:	bf00      	nop

00081524 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81524:	b480      	push	{r7}
   81526:	b087      	sub	sp, #28
   81528:	af00      	add	r7, sp, #0
   8152a:	60f8      	str	r0, [r7, #12]
   8152c:	60b9      	str	r1, [r7, #8]
   8152e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81530:	68fb      	ldr	r3, [r7, #12]
   81532:	687a      	ldr	r2, [r7, #4]
   81534:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81536:	68bb      	ldr	r3, [r7, #8]
   81538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8153c:	d01f      	beq.n	8157e <pio_set_peripheral+0x5a>
   8153e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81542:	d805      	bhi.n	81550 <pio_set_peripheral+0x2c>
   81544:	2b00      	cmp	r3, #0
   81546:	d027      	beq.n	81598 <pio_set_peripheral+0x74>
   81548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8154c:	d00a      	beq.n	81564 <pio_set_peripheral+0x40>
   8154e:	e01f      	b.n	81590 <pio_set_peripheral+0x6c>
   81550:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81554:	d020      	beq.n	81598 <pio_set_peripheral+0x74>
   81556:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8155a:	d01d      	beq.n	81598 <pio_set_peripheral+0x74>
   8155c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81560:	d01a      	beq.n	81598 <pio_set_peripheral+0x74>
   81562:	e015      	b.n	81590 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81564:	68fb      	ldr	r3, [r7, #12]
   81566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81568:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8156a:	68fb      	ldr	r3, [r7, #12]
   8156c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8156e:	687b      	ldr	r3, [r7, #4]
   81570:	43d9      	mvns	r1, r3
   81572:	697b      	ldr	r3, [r7, #20]
   81574:	400b      	ands	r3, r1
   81576:	401a      	ands	r2, r3
   81578:	68fb      	ldr	r3, [r7, #12]
   8157a:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8157c:	e008      	b.n	81590 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8157e:	68fb      	ldr	r3, [r7, #12]
   81580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81582:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81584:	687a      	ldr	r2, [r7, #4]
   81586:	697b      	ldr	r3, [r7, #20]
   81588:	431a      	orrs	r2, r3
   8158a:	68fb      	ldr	r3, [r7, #12]
   8158c:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8158e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81590:	68fb      	ldr	r3, [r7, #12]
   81592:	687a      	ldr	r2, [r7, #4]
   81594:	605a      	str	r2, [r3, #4]
   81596:	e000      	b.n	8159a <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81598:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   8159a:	371c      	adds	r7, #28
   8159c:	46bd      	mov	sp, r7
   8159e:	f85d 7b04 	ldr.w	r7, [sp], #4
   815a2:	4770      	bx	lr

000815a4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   815a4:	b580      	push	{r7, lr}
   815a6:	b084      	sub	sp, #16
   815a8:	af00      	add	r7, sp, #0
   815aa:	60f8      	str	r0, [r7, #12]
   815ac:	60b9      	str	r1, [r7, #8]
   815ae:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   815b0:	68f8      	ldr	r0, [r7, #12]
   815b2:	68b9      	ldr	r1, [r7, #8]
   815b4:	4b18      	ldr	r3, [pc, #96]	; (81618 <pio_set_input+0x74>)
   815b6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   815b8:	687b      	ldr	r3, [r7, #4]
   815ba:	f003 0301 	and.w	r3, r3, #1
   815be:	68f8      	ldr	r0, [r7, #12]
   815c0:	68b9      	ldr	r1, [r7, #8]
   815c2:	461a      	mov	r2, r3
   815c4:	4b15      	ldr	r3, [pc, #84]	; (8161c <pio_set_input+0x78>)
   815c6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   815c8:	687b      	ldr	r3, [r7, #4]
   815ca:	f003 030a 	and.w	r3, r3, #10
   815ce:	2b00      	cmp	r3, #0
   815d0:	d003      	beq.n	815da <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   815d2:	68fb      	ldr	r3, [r7, #12]
   815d4:	68ba      	ldr	r2, [r7, #8]
   815d6:	621a      	str	r2, [r3, #32]
   815d8:	e002      	b.n	815e0 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   815da:	68fb      	ldr	r3, [r7, #12]
   815dc:	68ba      	ldr	r2, [r7, #8]
   815de:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   815e0:	687b      	ldr	r3, [r7, #4]
   815e2:	f003 0302 	and.w	r3, r3, #2
   815e6:	2b00      	cmp	r3, #0
   815e8:	d004      	beq.n	815f4 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   815ea:	68fb      	ldr	r3, [r7, #12]
   815ec:	68ba      	ldr	r2, [r7, #8]
   815ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   815f2:	e008      	b.n	81606 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   815f4:	687b      	ldr	r3, [r7, #4]
   815f6:	f003 0308 	and.w	r3, r3, #8
   815fa:	2b00      	cmp	r3, #0
   815fc:	d003      	beq.n	81606 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   815fe:	68fb      	ldr	r3, [r7, #12]
   81600:	68ba      	ldr	r2, [r7, #8]
   81602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81606:	68fb      	ldr	r3, [r7, #12]
   81608:	68ba      	ldr	r2, [r7, #8]
   8160a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8160c:	68fb      	ldr	r3, [r7, #12]
   8160e:	68ba      	ldr	r2, [r7, #8]
   81610:	601a      	str	r2, [r3, #0]
}
   81612:	3710      	adds	r7, #16
   81614:	46bd      	mov	sp, r7
   81616:	bd80      	pop	{r7, pc}
   81618:	00081685 	.word	0x00081685
   8161c:	000814f9 	.word	0x000814f9

00081620 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81620:	b580      	push	{r7, lr}
   81622:	b084      	sub	sp, #16
   81624:	af00      	add	r7, sp, #0
   81626:	60f8      	str	r0, [r7, #12]
   81628:	60b9      	str	r1, [r7, #8]
   8162a:	607a      	str	r2, [r7, #4]
   8162c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8162e:	68f8      	ldr	r0, [r7, #12]
   81630:	68b9      	ldr	r1, [r7, #8]
   81632:	4b12      	ldr	r3, [pc, #72]	; (8167c <pio_set_output+0x5c>)
   81634:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81636:	68f8      	ldr	r0, [r7, #12]
   81638:	68b9      	ldr	r1, [r7, #8]
   8163a:	69ba      	ldr	r2, [r7, #24]
   8163c:	4b10      	ldr	r3, [pc, #64]	; (81680 <pio_set_output+0x60>)
   8163e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81640:	683b      	ldr	r3, [r7, #0]
   81642:	2b00      	cmp	r3, #0
   81644:	d003      	beq.n	8164e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81646:	68fb      	ldr	r3, [r7, #12]
   81648:	68ba      	ldr	r2, [r7, #8]
   8164a:	651a      	str	r2, [r3, #80]	; 0x50
   8164c:	e002      	b.n	81654 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8164e:	68fb      	ldr	r3, [r7, #12]
   81650:	68ba      	ldr	r2, [r7, #8]
   81652:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81654:	687b      	ldr	r3, [r7, #4]
   81656:	2b00      	cmp	r3, #0
   81658:	d003      	beq.n	81662 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8165a:	68fb      	ldr	r3, [r7, #12]
   8165c:	68ba      	ldr	r2, [r7, #8]
   8165e:	631a      	str	r2, [r3, #48]	; 0x30
   81660:	e002      	b.n	81668 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81662:	68fb      	ldr	r3, [r7, #12]
   81664:	68ba      	ldr	r2, [r7, #8]
   81666:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81668:	68fb      	ldr	r3, [r7, #12]
   8166a:	68ba      	ldr	r2, [r7, #8]
   8166c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8166e:	68fb      	ldr	r3, [r7, #12]
   81670:	68ba      	ldr	r2, [r7, #8]
   81672:	601a      	str	r2, [r3, #0]
}
   81674:	3710      	adds	r7, #16
   81676:	46bd      	mov	sp, r7
   81678:	bd80      	pop	{r7, pc}
   8167a:	bf00      	nop
   8167c:	00081685 	.word	0x00081685
   81680:	000814f9 	.word	0x000814f9

00081684 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81684:	b480      	push	{r7}
   81686:	b083      	sub	sp, #12
   81688:	af00      	add	r7, sp, #0
   8168a:	6078      	str	r0, [r7, #4]
   8168c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   8168e:	687b      	ldr	r3, [r7, #4]
   81690:	683a      	ldr	r2, [r7, #0]
   81692:	645a      	str	r2, [r3, #68]	; 0x44
}
   81694:	370c      	adds	r7, #12
   81696:	46bd      	mov	sp, r7
   81698:	f85d 7b04 	ldr.w	r7, [sp], #4
   8169c:	4770      	bx	lr
   8169e:	bf00      	nop

000816a0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   816a0:	b480      	push	{r7}
   816a2:	b083      	sub	sp, #12
   816a4:	af00      	add	r7, sp, #0
   816a6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   816a8:	687b      	ldr	r3, [r7, #4]
   816aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   816ac:	4618      	mov	r0, r3
   816ae:	370c      	adds	r7, #12
   816b0:	46bd      	mov	sp, r7
   816b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   816b6:	4770      	bx	lr

000816b8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   816b8:	b480      	push	{r7}
   816ba:	b083      	sub	sp, #12
   816bc:	af00      	add	r7, sp, #0
   816be:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   816c0:	687b      	ldr	r3, [r7, #4]
   816c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   816c4:	4618      	mov	r0, r3
   816c6:	370c      	adds	r7, #12
   816c8:	46bd      	mov	sp, r7
   816ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   816ce:	4770      	bx	lr

000816d0 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   816d0:	b480      	push	{r7}
   816d2:	b085      	sub	sp, #20
   816d4:	af00      	add	r7, sp, #0
   816d6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   816d8:	687b      	ldr	r3, [r7, #4]
   816da:	095b      	lsrs	r3, r3, #5
   816dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   816e0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   816e4:	025b      	lsls	r3, r3, #9
   816e6:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   816e8:	687b      	ldr	r3, [r7, #4]
   816ea:	f003 031f 	and.w	r3, r3, #31
   816ee:	2201      	movs	r2, #1
   816f0:	fa02 f303 	lsl.w	r3, r2, r3
   816f4:	461a      	mov	r2, r3
   816f6:	68fb      	ldr	r3, [r7, #12]
   816f8:	631a      	str	r2, [r3, #48]	; 0x30
}
   816fa:	3714      	adds	r7, #20
   816fc:	46bd      	mov	sp, r7
   816fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   81702:	4770      	bx	lr

00081704 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81704:	b480      	push	{r7}
   81706:	b085      	sub	sp, #20
   81708:	af00      	add	r7, sp, #0
   8170a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8170c:	687b      	ldr	r3, [r7, #4]
   8170e:	095b      	lsrs	r3, r3, #5
   81710:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81714:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81718:	025b      	lsls	r3, r3, #9
   8171a:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8171c:	687b      	ldr	r3, [r7, #4]
   8171e:	f003 031f 	and.w	r3, r3, #31
   81722:	2201      	movs	r2, #1
   81724:	fa02 f303 	lsl.w	r3, r2, r3
   81728:	461a      	mov	r2, r3
   8172a:	68fb      	ldr	r3, [r7, #12]
   8172c:	635a      	str	r2, [r3, #52]	; 0x34
}
   8172e:	3714      	adds	r7, #20
   81730:	46bd      	mov	sp, r7
   81732:	f85d 7b04 	ldr.w	r7, [sp], #4
   81736:	4770      	bx	lr

00081738 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81738:	b480      	push	{r7}
   8173a:	b085      	sub	sp, #20
   8173c:	af00      	add	r7, sp, #0
   8173e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81740:	687b      	ldr	r3, [r7, #4]
   81742:	095b      	lsrs	r3, r3, #5
   81744:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81748:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8174c:	025b      	lsls	r3, r3, #9
   8174e:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81750:	68fb      	ldr	r3, [r7, #12]
   81752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81754:	687b      	ldr	r3, [r7, #4]
   81756:	f003 031f 	and.w	r3, r3, #31
   8175a:	2101      	movs	r1, #1
   8175c:	fa01 f303 	lsl.w	r3, r1, r3
   81760:	4013      	ands	r3, r2
   81762:	2b00      	cmp	r3, #0
   81764:	d009      	beq.n	8177a <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81766:	687b      	ldr	r3, [r7, #4]
   81768:	f003 031f 	and.w	r3, r3, #31
   8176c:	2201      	movs	r2, #1
   8176e:	fa02 f303 	lsl.w	r3, r2, r3
   81772:	461a      	mov	r2, r3
   81774:	68fb      	ldr	r3, [r7, #12]
   81776:	635a      	str	r2, [r3, #52]	; 0x34
   81778:	e008      	b.n	8178c <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8177a:	687b      	ldr	r3, [r7, #4]
   8177c:	f003 031f 	and.w	r3, r3, #31
   81780:	2201      	movs	r2, #1
   81782:	fa02 f303 	lsl.w	r3, r2, r3
   81786:	461a      	mov	r2, r3
   81788:	68fb      	ldr	r3, [r7, #12]
   8178a:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   8178c:	3714      	adds	r7, #20
   8178e:	46bd      	mov	sp, r7
   81790:	f85d 7b04 	ldr.w	r7, [sp], #4
   81794:	4770      	bx	lr
   81796:	bf00      	nop

00081798 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81798:	b590      	push	{r4, r7, lr}
   8179a:	b087      	sub	sp, #28
   8179c:	af02      	add	r7, sp, #8
   8179e:	6078      	str	r0, [r7, #4]
   817a0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   817a2:	687b      	ldr	r3, [r7, #4]
   817a4:	095b      	lsrs	r3, r3, #5
   817a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   817aa:	f203 7307 	addw	r3, r3, #1799	; 0x707
   817ae:	025b      	lsls	r3, r3, #9
   817b0:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   817b2:	683b      	ldr	r3, [r7, #0]
   817b4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   817b8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   817bc:	d048      	beq.n	81850 <pio_configure_pin+0xb8>
   817be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   817c2:	d806      	bhi.n	817d2 <pio_configure_pin+0x3a>
   817c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   817c8:	d00a      	beq.n	817e0 <pio_configure_pin+0x48>
   817ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   817ce:	d023      	beq.n	81818 <pio_configure_pin+0x80>
   817d0:	e070      	b.n	818b4 <pio_configure_pin+0x11c>
   817d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   817d6:	d047      	beq.n	81868 <pio_configure_pin+0xd0>
   817d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   817dc:	d044      	beq.n	81868 <pio_configure_pin+0xd0>
   817de:	e069      	b.n	818b4 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   817e0:	687b      	ldr	r3, [r7, #4]
   817e2:	f003 031f 	and.w	r3, r3, #31
   817e6:	2201      	movs	r2, #1
   817e8:	fa02 f303 	lsl.w	r3, r2, r3
   817ec:	68f8      	ldr	r0, [r7, #12]
   817ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   817f2:	461a      	mov	r2, r3
   817f4:	4b33      	ldr	r3, [pc, #204]	; (818c4 <pio_configure_pin+0x12c>)
   817f6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   817f8:	687b      	ldr	r3, [r7, #4]
   817fa:	f003 031f 	and.w	r3, r3, #31
   817fe:	2201      	movs	r2, #1
   81800:	fa02 f303 	lsl.w	r3, r2, r3
   81804:	461a      	mov	r2, r3
   81806:	683b      	ldr	r3, [r7, #0]
   81808:	f003 0301 	and.w	r3, r3, #1
   8180c:	68f8      	ldr	r0, [r7, #12]
   8180e:	4611      	mov	r1, r2
   81810:	461a      	mov	r2, r3
   81812:	4b2d      	ldr	r3, [pc, #180]	; (818c8 <pio_configure_pin+0x130>)
   81814:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81816:	e04f      	b.n	818b8 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81818:	687b      	ldr	r3, [r7, #4]
   8181a:	f003 031f 	and.w	r3, r3, #31
   8181e:	2201      	movs	r2, #1
   81820:	fa02 f303 	lsl.w	r3, r2, r3
   81824:	68f8      	ldr	r0, [r7, #12]
   81826:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8182a:	461a      	mov	r2, r3
   8182c:	4b25      	ldr	r3, [pc, #148]	; (818c4 <pio_configure_pin+0x12c>)
   8182e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81830:	687b      	ldr	r3, [r7, #4]
   81832:	f003 031f 	and.w	r3, r3, #31
   81836:	2201      	movs	r2, #1
   81838:	fa02 f303 	lsl.w	r3, r2, r3
   8183c:	461a      	mov	r2, r3
   8183e:	683b      	ldr	r3, [r7, #0]
   81840:	f003 0301 	and.w	r3, r3, #1
   81844:	68f8      	ldr	r0, [r7, #12]
   81846:	4611      	mov	r1, r2
   81848:	461a      	mov	r2, r3
   8184a:	4b1f      	ldr	r3, [pc, #124]	; (818c8 <pio_configure_pin+0x130>)
   8184c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8184e:	e033      	b.n	818b8 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81850:	687b      	ldr	r3, [r7, #4]
   81852:	f003 031f 	and.w	r3, r3, #31
   81856:	2201      	movs	r2, #1
   81858:	fa02 f303 	lsl.w	r3, r2, r3
   8185c:	68f8      	ldr	r0, [r7, #12]
   8185e:	4619      	mov	r1, r3
   81860:	683a      	ldr	r2, [r7, #0]
   81862:	4b1a      	ldr	r3, [pc, #104]	; (818cc <pio_configure_pin+0x134>)
   81864:	4798      	blx	r3
		break;
   81866:	e027      	b.n	818b8 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81868:	687b      	ldr	r3, [r7, #4]
   8186a:	f003 031f 	and.w	r3, r3, #31
   8186e:	2201      	movs	r2, #1
   81870:	fa02 f303 	lsl.w	r3, r2, r3
   81874:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81876:	683b      	ldr	r3, [r7, #0]
   81878:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8187c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81880:	bf14      	ite	ne
   81882:	2300      	movne	r3, #0
   81884:	2301      	moveq	r3, #1
   81886:	b2db      	uxtb	r3, r3
   81888:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8188a:	683b      	ldr	r3, [r7, #0]
   8188c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81890:	2b00      	cmp	r3, #0
   81892:	bf0c      	ite	eq
   81894:	2300      	moveq	r3, #0
   81896:	2301      	movne	r3, #1
   81898:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8189a:	6838      	ldr	r0, [r7, #0]
   8189c:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   818a0:	2800      	cmp	r0, #0
   818a2:	bf0c      	ite	eq
   818a4:	2000      	moveq	r0, #0
   818a6:	2001      	movne	r0, #1
   818a8:	b2c0      	uxtb	r0, r0
   818aa:	9000      	str	r0, [sp, #0]
   818ac:	68f8      	ldr	r0, [r7, #12]
   818ae:	4c08      	ldr	r4, [pc, #32]	; (818d0 <pio_configure_pin+0x138>)
   818b0:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   818b2:	e001      	b.n	818b8 <pio_configure_pin+0x120>

	default:
		return 0;
   818b4:	2300      	movs	r3, #0
   818b6:	e000      	b.n	818ba <pio_configure_pin+0x122>
	}

	return 1;
   818b8:	2301      	movs	r3, #1
}
   818ba:	4618      	mov	r0, r3
   818bc:	3714      	adds	r7, #20
   818be:	46bd      	mov	sp, r7
   818c0:	bd90      	pop	{r4, r7, pc}
   818c2:	bf00      	nop
   818c4:	00081525 	.word	0x00081525
   818c8:	000814f9 	.word	0x000814f9
   818cc:	000815a5 	.word	0x000815a5
   818d0:	00081621 	.word	0x00081621

000818d4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   818d4:	b590      	push	{r4, r7, lr}
   818d6:	b087      	sub	sp, #28
   818d8:	af02      	add	r7, sp, #8
   818da:	60f8      	str	r0, [r7, #12]
   818dc:	60b9      	str	r1, [r7, #8]
   818de:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   818e0:	687b      	ldr	r3, [r7, #4]
   818e2:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   818e6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   818ea:	d02e      	beq.n	8194a <pio_configure_pin_group+0x76>
   818ec:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   818f0:	d806      	bhi.n	81900 <pio_configure_pin_group+0x2c>
   818f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   818f6:	d00a      	beq.n	8190e <pio_configure_pin_group+0x3a>
   818f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   818fc:	d016      	beq.n	8192c <pio_configure_pin_group+0x58>
   818fe:	e04a      	b.n	81996 <pio_configure_pin_group+0xc2>
   81900:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81904:	d027      	beq.n	81956 <pio_configure_pin_group+0x82>
   81906:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8190a:	d024      	beq.n	81956 <pio_configure_pin_group+0x82>
   8190c:	e043      	b.n	81996 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8190e:	68f8      	ldr	r0, [r7, #12]
   81910:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81914:	68ba      	ldr	r2, [r7, #8]
   81916:	4b23      	ldr	r3, [pc, #140]	; (819a4 <pio_configure_pin_group+0xd0>)
   81918:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8191a:	687b      	ldr	r3, [r7, #4]
   8191c:	f003 0301 	and.w	r3, r3, #1
   81920:	68f8      	ldr	r0, [r7, #12]
   81922:	68b9      	ldr	r1, [r7, #8]
   81924:	461a      	mov	r2, r3
   81926:	4b20      	ldr	r3, [pc, #128]	; (819a8 <pio_configure_pin_group+0xd4>)
   81928:	4798      	blx	r3
		break;
   8192a:	e036      	b.n	8199a <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8192c:	68f8      	ldr	r0, [r7, #12]
   8192e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81932:	68ba      	ldr	r2, [r7, #8]
   81934:	4b1b      	ldr	r3, [pc, #108]	; (819a4 <pio_configure_pin_group+0xd0>)
   81936:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   81938:	687b      	ldr	r3, [r7, #4]
   8193a:	f003 0301 	and.w	r3, r3, #1
   8193e:	68f8      	ldr	r0, [r7, #12]
   81940:	68b9      	ldr	r1, [r7, #8]
   81942:	461a      	mov	r2, r3
   81944:	4b18      	ldr	r3, [pc, #96]	; (819a8 <pio_configure_pin_group+0xd4>)
   81946:	4798      	blx	r3
		break;
   81948:	e027      	b.n	8199a <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8194a:	68f8      	ldr	r0, [r7, #12]
   8194c:	68b9      	ldr	r1, [r7, #8]
   8194e:	687a      	ldr	r2, [r7, #4]
   81950:	4b16      	ldr	r3, [pc, #88]	; (819ac <pio_configure_pin_group+0xd8>)
   81952:	4798      	blx	r3
		break;
   81954:	e021      	b.n	8199a <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81956:	687b      	ldr	r3, [r7, #4]
   81958:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8195c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81960:	bf14      	ite	ne
   81962:	2300      	movne	r3, #0
   81964:	2301      	moveq	r3, #1
   81966:	b2db      	uxtb	r3, r3
   81968:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8196a:	687b      	ldr	r3, [r7, #4]
   8196c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81970:	2b00      	cmp	r3, #0
   81972:	bf0c      	ite	eq
   81974:	2300      	moveq	r3, #0
   81976:	2301      	movne	r3, #1
   81978:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8197a:	6879      	ldr	r1, [r7, #4]
   8197c:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   81980:	2900      	cmp	r1, #0
   81982:	bf0c      	ite	eq
   81984:	2100      	moveq	r1, #0
   81986:	2101      	movne	r1, #1
   81988:	b2c9      	uxtb	r1, r1
   8198a:	9100      	str	r1, [sp, #0]
   8198c:	68f8      	ldr	r0, [r7, #12]
   8198e:	68b9      	ldr	r1, [r7, #8]
   81990:	4c07      	ldr	r4, [pc, #28]	; (819b0 <pio_configure_pin_group+0xdc>)
   81992:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81994:	e001      	b.n	8199a <pio_configure_pin_group+0xc6>

	default:
		return 0;
   81996:	2300      	movs	r3, #0
   81998:	e000      	b.n	8199c <pio_configure_pin_group+0xc8>
	}

	return 1;
   8199a:	2301      	movs	r3, #1
}
   8199c:	4618      	mov	r0, r3
   8199e:	3714      	adds	r7, #20
   819a0:	46bd      	mov	sp, r7
   819a2:	bd90      	pop	{r4, r7, pc}
   819a4:	00081525 	.word	0x00081525
   819a8:	000814f9 	.word	0x000814f9
   819ac:	000815a5 	.word	0x000815a5
   819b0:	00081621 	.word	0x00081621

000819b4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   819b4:	b580      	push	{r7, lr}
   819b6:	b084      	sub	sp, #16
   819b8:	af00      	add	r7, sp, #0
   819ba:	6078      	str	r0, [r7, #4]
   819bc:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   819be:	6878      	ldr	r0, [r7, #4]
   819c0:	4b22      	ldr	r3, [pc, #136]	; (81a4c <pio_handler_process+0x98>)
   819c2:	4798      	blx	r3
   819c4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   819c6:	6878      	ldr	r0, [r7, #4]
   819c8:	4b21      	ldr	r3, [pc, #132]	; (81a50 <pio_handler_process+0x9c>)
   819ca:	4798      	blx	r3
   819cc:	4603      	mov	r3, r0
   819ce:	68fa      	ldr	r2, [r7, #12]
   819d0:	4013      	ands	r3, r2
   819d2:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   819d4:	68fb      	ldr	r3, [r7, #12]
   819d6:	2b00      	cmp	r3, #0
   819d8:	d035      	beq.n	81a46 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   819da:	2300      	movs	r3, #0
   819dc:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   819de:	e02f      	b.n	81a40 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   819e0:	4a1c      	ldr	r2, [pc, #112]	; (81a54 <pio_handler_process+0xa0>)
   819e2:	68bb      	ldr	r3, [r7, #8]
   819e4:	011b      	lsls	r3, r3, #4
   819e6:	4413      	add	r3, r2
   819e8:	681a      	ldr	r2, [r3, #0]
   819ea:	683b      	ldr	r3, [r7, #0]
   819ec:	429a      	cmp	r2, r3
   819ee:	d124      	bne.n	81a3a <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   819f0:	4a18      	ldr	r2, [pc, #96]	; (81a54 <pio_handler_process+0xa0>)
   819f2:	68bb      	ldr	r3, [r7, #8]
   819f4:	011b      	lsls	r3, r3, #4
   819f6:	4413      	add	r3, r2
   819f8:	685a      	ldr	r2, [r3, #4]
   819fa:	68fb      	ldr	r3, [r7, #12]
   819fc:	4013      	ands	r3, r2
   819fe:	2b00      	cmp	r3, #0
   81a00:	d01b      	beq.n	81a3a <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81a02:	4a14      	ldr	r2, [pc, #80]	; (81a54 <pio_handler_process+0xa0>)
   81a04:	68bb      	ldr	r3, [r7, #8]
   81a06:	011b      	lsls	r3, r3, #4
   81a08:	4413      	add	r3, r2
   81a0a:	3308      	adds	r3, #8
   81a0c:	685b      	ldr	r3, [r3, #4]
   81a0e:	4911      	ldr	r1, [pc, #68]	; (81a54 <pio_handler_process+0xa0>)
   81a10:	68ba      	ldr	r2, [r7, #8]
   81a12:	0112      	lsls	r2, r2, #4
   81a14:	440a      	add	r2, r1
   81a16:	6811      	ldr	r1, [r2, #0]
   81a18:	480e      	ldr	r0, [pc, #56]	; (81a54 <pio_handler_process+0xa0>)
   81a1a:	68ba      	ldr	r2, [r7, #8]
   81a1c:	0112      	lsls	r2, r2, #4
   81a1e:	4402      	add	r2, r0
   81a20:	6852      	ldr	r2, [r2, #4]
   81a22:	4608      	mov	r0, r1
   81a24:	4611      	mov	r1, r2
   81a26:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81a28:	4a0a      	ldr	r2, [pc, #40]	; (81a54 <pio_handler_process+0xa0>)
   81a2a:	68bb      	ldr	r3, [r7, #8]
   81a2c:	011b      	lsls	r3, r3, #4
   81a2e:	4413      	add	r3, r2
   81a30:	685b      	ldr	r3, [r3, #4]
   81a32:	43db      	mvns	r3, r3
   81a34:	68fa      	ldr	r2, [r7, #12]
   81a36:	4013      	ands	r3, r2
   81a38:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   81a3a:	68bb      	ldr	r3, [r7, #8]
   81a3c:	3301      	adds	r3, #1
   81a3e:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81a40:	68fb      	ldr	r3, [r7, #12]
   81a42:	2b00      	cmp	r3, #0
   81a44:	d1cc      	bne.n	819e0 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   81a46:	3710      	adds	r7, #16
   81a48:	46bd      	mov	sp, r7
   81a4a:	bd80      	pop	{r7, pc}
   81a4c:	000816a1 	.word	0x000816a1
   81a50:	000816b9 	.word	0x000816b9
   81a54:	2007046c 	.word	0x2007046c

00081a58 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81a58:	b580      	push	{r7, lr}
   81a5a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   81a5c:	4802      	ldr	r0, [pc, #8]	; (81a68 <PIOA_Handler+0x10>)
   81a5e:	210b      	movs	r1, #11
   81a60:	4b02      	ldr	r3, [pc, #8]	; (81a6c <PIOA_Handler+0x14>)
   81a62:	4798      	blx	r3
}
   81a64:	bd80      	pop	{r7, pc}
   81a66:	bf00      	nop
   81a68:	400e0e00 	.word	0x400e0e00
   81a6c:	000819b5 	.word	0x000819b5

00081a70 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81a70:	b580      	push	{r7, lr}
   81a72:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   81a74:	4802      	ldr	r0, [pc, #8]	; (81a80 <PIOB_Handler+0x10>)
   81a76:	210c      	movs	r1, #12
   81a78:	4b02      	ldr	r3, [pc, #8]	; (81a84 <PIOB_Handler+0x14>)
   81a7a:	4798      	blx	r3
}
   81a7c:	bd80      	pop	{r7, pc}
   81a7e:	bf00      	nop
   81a80:	400e1000 	.word	0x400e1000
   81a84:	000819b5 	.word	0x000819b5

00081a88 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81a88:	b580      	push	{r7, lr}
   81a8a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   81a8c:	4802      	ldr	r0, [pc, #8]	; (81a98 <PIOC_Handler+0x10>)
   81a8e:	210d      	movs	r1, #13
   81a90:	4b02      	ldr	r3, [pc, #8]	; (81a9c <PIOC_Handler+0x14>)
   81a92:	4798      	blx	r3
}
   81a94:	bd80      	pop	{r7, pc}
   81a96:	bf00      	nop
   81a98:	400e1200 	.word	0x400e1200
   81a9c:	000819b5 	.word	0x000819b5

00081aa0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81aa0:	b580      	push	{r7, lr}
   81aa2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   81aa4:	4802      	ldr	r0, [pc, #8]	; (81ab0 <PIOD_Handler+0x10>)
   81aa6:	210e      	movs	r1, #14
   81aa8:	4b02      	ldr	r3, [pc, #8]	; (81ab4 <PIOD_Handler+0x14>)
   81aaa:	4798      	blx	r3
}
   81aac:	bd80      	pop	{r7, pc}
   81aae:	bf00      	nop
   81ab0:	400e1400 	.word	0x400e1400
   81ab4:	000819b5 	.word	0x000819b5

00081ab8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81ab8:	b480      	push	{r7}
   81aba:	b085      	sub	sp, #20
   81abc:	af00      	add	r7, sp, #0
   81abe:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81ac0:	4b1d      	ldr	r3, [pc, #116]	; (81b38 <pmc_switch_mck_to_pllack+0x80>)
   81ac2:	4a1d      	ldr	r2, [pc, #116]	; (81b38 <pmc_switch_mck_to_pllack+0x80>)
   81ac4:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81ac6:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   81aca:	687a      	ldr	r2, [r7, #4]
   81acc:	430a      	orrs	r2, r1
   81ace:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81ad4:	60fb      	str	r3, [r7, #12]
   81ad6:	e007      	b.n	81ae8 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81ad8:	68fb      	ldr	r3, [r7, #12]
   81ada:	2b00      	cmp	r3, #0
   81adc:	d101      	bne.n	81ae2 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   81ade:	2301      	movs	r3, #1
   81ae0:	e023      	b.n	81b2a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81ae2:	68fb      	ldr	r3, [r7, #12]
   81ae4:	3b01      	subs	r3, #1
   81ae6:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81ae8:	4b13      	ldr	r3, [pc, #76]	; (81b38 <pmc_switch_mck_to_pllack+0x80>)
   81aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81aec:	f003 0308 	and.w	r3, r3, #8
   81af0:	2b00      	cmp	r3, #0
   81af2:	d0f1      	beq.n	81ad8 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81af4:	4b10      	ldr	r3, [pc, #64]	; (81b38 <pmc_switch_mck_to_pllack+0x80>)
   81af6:	4a10      	ldr	r2, [pc, #64]	; (81b38 <pmc_switch_mck_to_pllack+0x80>)
   81af8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81afa:	f022 0203 	bic.w	r2, r2, #3
   81afe:	f042 0202 	orr.w	r2, r2, #2
   81b02:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b04:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b08:	60fb      	str	r3, [r7, #12]
   81b0a:	e007      	b.n	81b1c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81b0c:	68fb      	ldr	r3, [r7, #12]
   81b0e:	2b00      	cmp	r3, #0
   81b10:	d101      	bne.n	81b16 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   81b12:	2301      	movs	r3, #1
   81b14:	e009      	b.n	81b2a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81b16:	68fb      	ldr	r3, [r7, #12]
   81b18:	3b01      	subs	r3, #1
   81b1a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81b1c:	4b06      	ldr	r3, [pc, #24]	; (81b38 <pmc_switch_mck_to_pllack+0x80>)
   81b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81b20:	f003 0308 	and.w	r3, r3, #8
   81b24:	2b00      	cmp	r3, #0
   81b26:	d0f1      	beq.n	81b0c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81b28:	2300      	movs	r3, #0
}
   81b2a:	4618      	mov	r0, r3
   81b2c:	3714      	adds	r7, #20
   81b2e:	46bd      	mov	sp, r7
   81b30:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b34:	4770      	bx	lr
   81b36:	bf00      	nop
   81b38:	400e0600 	.word	0x400e0600

00081b3c <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   81b3c:	b480      	push	{r7}
   81b3e:	b083      	sub	sp, #12
   81b40:	af00      	add	r7, sp, #0
   81b42:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   81b44:	687b      	ldr	r3, [r7, #4]
   81b46:	2b01      	cmp	r3, #1
   81b48:	d107      	bne.n	81b5a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   81b4a:	4a0a      	ldr	r2, [pc, #40]	; (81b74 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b4c:	4b09      	ldr	r3, [pc, #36]	; (81b74 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b4e:	689b      	ldr	r3, [r3, #8]
   81b50:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81b58:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   81b5a:	4a06      	ldr	r2, [pc, #24]	; (81b74 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b5c:	4b05      	ldr	r3, [pc, #20]	; (81b74 <pmc_switch_sclk_to_32kxtal+0x38>)
   81b5e:	681b      	ldr	r3, [r3, #0]
   81b60:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81b64:	f043 0308 	orr.w	r3, r3, #8
   81b68:	6013      	str	r3, [r2, #0]
}
   81b6a:	370c      	adds	r7, #12
   81b6c:	46bd      	mov	sp, r7
   81b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b72:	4770      	bx	lr
   81b74:	400e1a10 	.word	0x400e1a10

00081b78 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   81b78:	b480      	push	{r7}
   81b7a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   81b7c:	4b09      	ldr	r3, [pc, #36]	; (81ba4 <pmc_osc_is_ready_32kxtal+0x2c>)
   81b7e:	695b      	ldr	r3, [r3, #20]
   81b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81b84:	2b00      	cmp	r3, #0
   81b86:	d007      	beq.n	81b98 <pmc_osc_is_ready_32kxtal+0x20>
   81b88:	4b07      	ldr	r3, [pc, #28]	; (81ba8 <pmc_osc_is_ready_32kxtal+0x30>)
   81b8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81b90:	2b00      	cmp	r3, #0
   81b92:	d001      	beq.n	81b98 <pmc_osc_is_ready_32kxtal+0x20>
   81b94:	2301      	movs	r3, #1
   81b96:	e000      	b.n	81b9a <pmc_osc_is_ready_32kxtal+0x22>
   81b98:	2300      	movs	r3, #0
}
   81b9a:	4618      	mov	r0, r3
   81b9c:	46bd      	mov	sp, r7
   81b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ba2:	4770      	bx	lr
   81ba4:	400e1a10 	.word	0x400e1a10
   81ba8:	400e0600 	.word	0x400e0600

00081bac <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   81bac:	b480      	push	{r7}
   81bae:	b085      	sub	sp, #20
   81bb0:	af00      	add	r7, sp, #0
   81bb2:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   81bb4:	2300      	movs	r3, #0
   81bb6:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   81bb8:	4b21      	ldr	r3, [pc, #132]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81bba:	6a1b      	ldr	r3, [r3, #32]
   81bbc:	f003 0301 	and.w	r3, r3, #1
   81bc0:	2b00      	cmp	r3, #0
   81bc2:	d00e      	beq.n	81be2 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81bc4:	4a1e      	ldr	r2, [pc, #120]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81bc6:	4b1e      	ldr	r3, [pc, #120]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81bc8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   81bca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81bce:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   81bd2:	6879      	ldr	r1, [r7, #4]
   81bd4:	430b      	orrs	r3, r1
   81bd6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81bda:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81bde:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81be0:	e00b      	b.n	81bfa <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   81be2:	2301      	movs	r3, #1
   81be4:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81be6:	4a16      	ldr	r2, [pc, #88]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81be8:	4b15      	ldr	r3, [pc, #84]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81bea:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   81bec:	4b15      	ldr	r3, [pc, #84]	; (81c44 <pmc_switch_mainck_to_fastrc+0x98>)
   81bee:	400b      	ands	r3, r1
   81bf0:	6879      	ldr	r1, [r7, #4]
   81bf2:	4319      	orrs	r1, r3
   81bf4:	4b14      	ldr	r3, [pc, #80]	; (81c48 <pmc_switch_mainck_to_fastrc+0x9c>)
   81bf6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81bf8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81bfa:	bf00      	nop
   81bfc:	4b10      	ldr	r3, [pc, #64]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81c04:	2b00      	cmp	r3, #0
   81c06:	d0f9      	beq.n	81bfc <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   81c08:	4a0d      	ldr	r2, [pc, #52]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81c0a:	4b0d      	ldr	r3, [pc, #52]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81c0c:	6a1b      	ldr	r3, [r3, #32]
   81c0e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   81c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81c16:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81c1a:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   81c1c:	68fb      	ldr	r3, [r7, #12]
   81c1e:	2b00      	cmp	r3, #0
   81c20:	d009      	beq.n	81c36 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c22:	4a07      	ldr	r2, [pc, #28]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81c24:	4b06      	ldr	r3, [pc, #24]	; (81c40 <pmc_switch_mainck_to_fastrc+0x94>)
   81c26:	6a1b      	ldr	r3, [r3, #32]
   81c28:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81c2c:	f023 0301 	bic.w	r3, r3, #1
   81c30:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81c34:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   81c36:	3714      	adds	r7, #20
   81c38:	46bd      	mov	sp, r7
   81c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c3e:	4770      	bx	lr
   81c40:	400e0600 	.word	0x400e0600
   81c44:	ffc8c086 	.word	0xffc8c086
   81c48:	00373f09 	.word	0x00373f09

00081c4c <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   81c4c:	b480      	push	{r7}
   81c4e:	b083      	sub	sp, #12
   81c50:	af00      	add	r7, sp, #0
   81c52:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81c54:	687b      	ldr	r3, [r7, #4]
   81c56:	2b00      	cmp	r3, #0
   81c58:	d008      	beq.n	81c6c <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c5a:	4912      	ldr	r1, [pc, #72]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c5c:	4b11      	ldr	r3, [pc, #68]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c5e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   81c60:	4a11      	ldr	r2, [pc, #68]	; (81ca8 <pmc_switch_mainck_to_xtal+0x5c>)
   81c62:	401a      	ands	r2, r3
   81c64:	4b11      	ldr	r3, [pc, #68]	; (81cac <pmc_switch_mainck_to_xtal+0x60>)
   81c66:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81c68:	620b      	str	r3, [r1, #32]
   81c6a:	e016      	b.n	81c9a <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c6c:	490d      	ldr	r1, [pc, #52]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c6e:	4b0d      	ldr	r3, [pc, #52]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c70:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   81c72:	4a0f      	ldr	r2, [pc, #60]	; (81cb0 <pmc_switch_mainck_to_xtal+0x64>)
   81c74:	401a      	ands	r2, r3
   81c76:	4b0f      	ldr	r3, [pc, #60]	; (81cb4 <pmc_switch_mainck_to_xtal+0x68>)
   81c78:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81c7a:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81c7c:	bf00      	nop
   81c7e:	4b09      	ldr	r3, [pc, #36]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81c82:	f003 0301 	and.w	r3, r3, #1
   81c86:	2b00      	cmp	r3, #0
   81c88:	d0f9      	beq.n	81c7e <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   81c8a:	4a06      	ldr	r2, [pc, #24]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c8c:	4b05      	ldr	r3, [pc, #20]	; (81ca4 <pmc_switch_mainck_to_xtal+0x58>)
   81c8e:	6a1b      	ldr	r3, [r3, #32]
   81c90:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81c98:	6213      	str	r3, [r2, #32]
	}
}
   81c9a:	370c      	adds	r7, #12
   81c9c:	46bd      	mov	sp, r7
   81c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ca2:	4770      	bx	lr
   81ca4:	400e0600 	.word	0x400e0600
   81ca8:	fec8fffc 	.word	0xfec8fffc
   81cac:	01370002 	.word	0x01370002
   81cb0:	ffc8c0fc 	.word	0xffc8c0fc
   81cb4:	00373f01 	.word	0x00373f01

00081cb8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81cb8:	b480      	push	{r7}
   81cba:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81cbc:	4b04      	ldr	r3, [pc, #16]	; (81cd0 <pmc_osc_is_ready_mainck+0x18>)
   81cbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81cc4:	4618      	mov	r0, r3
   81cc6:	46bd      	mov	sp, r7
   81cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ccc:	4770      	bx	lr
   81cce:	bf00      	nop
   81cd0:	400e0600 	.word	0x400e0600

00081cd4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   81cd4:	b480      	push	{r7}
   81cd6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81cd8:	4b03      	ldr	r3, [pc, #12]	; (81ce8 <pmc_disable_pllack+0x14>)
   81cda:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81cde:	629a      	str	r2, [r3, #40]	; 0x28
}
   81ce0:	46bd      	mov	sp, r7
   81ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ce6:	4770      	bx	lr
   81ce8:	400e0600 	.word	0x400e0600

00081cec <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   81cec:	b480      	push	{r7}
   81cee:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81cf0:	4b04      	ldr	r3, [pc, #16]	; (81d04 <pmc_is_locked_pllack+0x18>)
   81cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81cf4:	f003 0302 	and.w	r3, r3, #2
}
   81cf8:	4618      	mov	r0, r3
   81cfa:	46bd      	mov	sp, r7
   81cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d00:	4770      	bx	lr
   81d02:	bf00      	nop
   81d04:	400e0600 	.word	0x400e0600

00081d08 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   81d08:	b480      	push	{r7}
   81d0a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   81d0c:	4b04      	ldr	r3, [pc, #16]	; (81d20 <pmc_is_locked_upll+0x18>)
   81d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   81d14:	4618      	mov	r0, r3
   81d16:	46bd      	mov	sp, r7
   81d18:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d1c:	4770      	bx	lr
   81d1e:	bf00      	nop
   81d20:	400e0600 	.word	0x400e0600

00081d24 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   81d24:	b480      	push	{r7}
   81d26:	b083      	sub	sp, #12
   81d28:	af00      	add	r7, sp, #0
   81d2a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   81d2c:	687b      	ldr	r3, [r7, #4]
   81d2e:	2b2c      	cmp	r3, #44	; 0x2c
   81d30:	d901      	bls.n	81d36 <pmc_enable_periph_clk+0x12>
		return 1;
   81d32:	2301      	movs	r3, #1
   81d34:	e02f      	b.n	81d96 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   81d36:	687b      	ldr	r3, [r7, #4]
   81d38:	2b1f      	cmp	r3, #31
   81d3a:	d813      	bhi.n	81d64 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81d3c:	4b19      	ldr	r3, [pc, #100]	; (81da4 <pmc_enable_periph_clk+0x80>)
   81d3e:	699a      	ldr	r2, [r3, #24]
   81d40:	687b      	ldr	r3, [r7, #4]
   81d42:	2101      	movs	r1, #1
   81d44:	fa01 f303 	lsl.w	r3, r1, r3
   81d48:	401a      	ands	r2, r3
   81d4a:	687b      	ldr	r3, [r7, #4]
   81d4c:	2101      	movs	r1, #1
   81d4e:	fa01 f303 	lsl.w	r3, r1, r3
   81d52:	429a      	cmp	r2, r3
   81d54:	d01e      	beq.n	81d94 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   81d56:	4b13      	ldr	r3, [pc, #76]	; (81da4 <pmc_enable_periph_clk+0x80>)
   81d58:	687a      	ldr	r2, [r7, #4]
   81d5a:	2101      	movs	r1, #1
   81d5c:	fa01 f202 	lsl.w	r2, r1, r2
   81d60:	611a      	str	r2, [r3, #16]
   81d62:	e017      	b.n	81d94 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   81d64:	687b      	ldr	r3, [r7, #4]
   81d66:	3b20      	subs	r3, #32
   81d68:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81d6a:	4b0e      	ldr	r3, [pc, #56]	; (81da4 <pmc_enable_periph_clk+0x80>)
   81d6c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81d70:	687b      	ldr	r3, [r7, #4]
   81d72:	2101      	movs	r1, #1
   81d74:	fa01 f303 	lsl.w	r3, r1, r3
   81d78:	401a      	ands	r2, r3
   81d7a:	687b      	ldr	r3, [r7, #4]
   81d7c:	2101      	movs	r1, #1
   81d7e:	fa01 f303 	lsl.w	r3, r1, r3
   81d82:	429a      	cmp	r2, r3
   81d84:	d006      	beq.n	81d94 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   81d86:	4b07      	ldr	r3, [pc, #28]	; (81da4 <pmc_enable_periph_clk+0x80>)
   81d88:	687a      	ldr	r2, [r7, #4]
   81d8a:	2101      	movs	r1, #1
   81d8c:	fa01 f202 	lsl.w	r2, r1, r2
   81d90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81d94:	2300      	movs	r3, #0
}
   81d96:	4618      	mov	r0, r3
   81d98:	370c      	adds	r7, #12
   81d9a:	46bd      	mov	sp, r7
   81d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81da0:	4770      	bx	lr
   81da2:	bf00      	nop
   81da4:	400e0600 	.word	0x400e0600

00081da8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   81da8:	b480      	push	{r7}
   81daa:	b089      	sub	sp, #36	; 0x24
   81dac:	af00      	add	r7, sp, #0
   81dae:	60f8      	str	r0, [r7, #12]
   81db0:	60b9      	str	r1, [r7, #8]
   81db2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81db4:	68bb      	ldr	r3, [r7, #8]
   81db6:	011a      	lsls	r2, r3, #4
   81db8:	687b      	ldr	r3, [r7, #4]
   81dba:	429a      	cmp	r2, r3
   81dbc:	d802      	bhi.n	81dc4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81dbe:	2310      	movs	r3, #16
   81dc0:	61fb      	str	r3, [r7, #28]
   81dc2:	e001      	b.n	81dc8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81dc4:	2308      	movs	r3, #8
   81dc6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81dc8:	687b      	ldr	r3, [r7, #4]
   81dca:	00da      	lsls	r2, r3, #3
   81dcc:	69fb      	ldr	r3, [r7, #28]
   81dce:	68b9      	ldr	r1, [r7, #8]
   81dd0:	fb01 f303 	mul.w	r3, r1, r3
   81dd4:	085b      	lsrs	r3, r3, #1
   81dd6:	441a      	add	r2, r3
   81dd8:	69fb      	ldr	r3, [r7, #28]
   81dda:	68b9      	ldr	r1, [r7, #8]
   81ddc:	fb01 f303 	mul.w	r3, r1, r3
   81de0:	fbb2 f3f3 	udiv	r3, r2, r3
   81de4:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81de6:	69bb      	ldr	r3, [r7, #24]
   81de8:	08db      	lsrs	r3, r3, #3
   81dea:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81dec:	69bb      	ldr	r3, [r7, #24]
   81dee:	f003 0307 	and.w	r3, r3, #7
   81df2:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81df4:	697b      	ldr	r3, [r7, #20]
   81df6:	2b00      	cmp	r3, #0
   81df8:	d003      	beq.n	81e02 <usart_set_async_baudrate+0x5a>
   81dfa:	697b      	ldr	r3, [r7, #20]
   81dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81e00:	d301      	bcc.n	81e06 <usart_set_async_baudrate+0x5e>
		return 1;
   81e02:	2301      	movs	r3, #1
   81e04:	e00f      	b.n	81e26 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81e06:	69fb      	ldr	r3, [r7, #28]
   81e08:	2b08      	cmp	r3, #8
   81e0a:	d105      	bne.n	81e18 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81e0c:	68fb      	ldr	r3, [r7, #12]
   81e0e:	685b      	ldr	r3, [r3, #4]
   81e10:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81e14:	68fb      	ldr	r3, [r7, #12]
   81e16:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81e18:	693b      	ldr	r3, [r7, #16]
   81e1a:	041a      	lsls	r2, r3, #16
   81e1c:	697b      	ldr	r3, [r7, #20]
   81e1e:	431a      	orrs	r2, r3
   81e20:	68fb      	ldr	r3, [r7, #12]
   81e22:	621a      	str	r2, [r3, #32]

	return 0;
   81e24:	2300      	movs	r3, #0
}
   81e26:	4618      	mov	r0, r3
   81e28:	3724      	adds	r7, #36	; 0x24
   81e2a:	46bd      	mov	sp, r7
   81e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e30:	4770      	bx	lr
   81e32:	bf00      	nop

00081e34 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81e34:	b580      	push	{r7, lr}
   81e36:	b082      	sub	sp, #8
   81e38:	af00      	add	r7, sp, #0
   81e3a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   81e3c:	6878      	ldr	r0, [r7, #4]
   81e3e:	4b0d      	ldr	r3, [pc, #52]	; (81e74 <usart_reset+0x40>)
   81e40:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   81e42:	687b      	ldr	r3, [r7, #4]
   81e44:	2200      	movs	r2, #0
   81e46:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81e48:	687b      	ldr	r3, [r7, #4]
   81e4a:	2200      	movs	r2, #0
   81e4c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   81e4e:	687b      	ldr	r3, [r7, #4]
   81e50:	2200      	movs	r2, #0
   81e52:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   81e54:	6878      	ldr	r0, [r7, #4]
   81e56:	4b08      	ldr	r3, [pc, #32]	; (81e78 <usart_reset+0x44>)
   81e58:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81e5a:	6878      	ldr	r0, [r7, #4]
   81e5c:	4b07      	ldr	r3, [pc, #28]	; (81e7c <usart_reset+0x48>)
   81e5e:	4798      	blx	r3
	usart_reset_status(p_usart);
   81e60:	6878      	ldr	r0, [r7, #4]
   81e62:	4b07      	ldr	r3, [pc, #28]	; (81e80 <usart_reset+0x4c>)
   81e64:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   81e66:	6878      	ldr	r0, [r7, #4]
   81e68:	4b06      	ldr	r3, [pc, #24]	; (81e84 <usart_reset+0x50>)
   81e6a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81e6c:	3708      	adds	r7, #8
   81e6e:	46bd      	mov	sp, r7
   81e70:	bd80      	pop	{r7, pc}
   81e72:	bf00      	nop
   81e74:	00082071 	.word	0x00082071
   81e78:	00081f25 	.word	0x00081f25
   81e7c:	00081f55 	.word	0x00081f55
   81e80:	00081fbd 	.word	0x00081fbd
   81e84:	00081fd9 	.word	0x00081fd9

00081e88 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81e88:	b580      	push	{r7, lr}
   81e8a:	b084      	sub	sp, #16
   81e8c:	af00      	add	r7, sp, #0
   81e8e:	60f8      	str	r0, [r7, #12]
   81e90:	60b9      	str	r1, [r7, #8]
   81e92:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81e94:	68f8      	ldr	r0, [r7, #12]
   81e96:	4b1a      	ldr	r3, [pc, #104]	; (81f00 <usart_init_rs232+0x78>)
   81e98:	4798      	blx	r3

	ul_reg_val = 0;
   81e9a:	4b1a      	ldr	r3, [pc, #104]	; (81f04 <usart_init_rs232+0x7c>)
   81e9c:	2200      	movs	r2, #0
   81e9e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   81ea0:	68bb      	ldr	r3, [r7, #8]
   81ea2:	2b00      	cmp	r3, #0
   81ea4:	d009      	beq.n	81eba <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   81ea6:	68bb      	ldr	r3, [r7, #8]
   81ea8:	681b      	ldr	r3, [r3, #0]
   81eaa:	68f8      	ldr	r0, [r7, #12]
   81eac:	4619      	mov	r1, r3
   81eae:	687a      	ldr	r2, [r7, #4]
   81eb0:	4b15      	ldr	r3, [pc, #84]	; (81f08 <usart_init_rs232+0x80>)
   81eb2:	4798      	blx	r3
   81eb4:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   81eb6:	2b00      	cmp	r3, #0
   81eb8:	d001      	beq.n	81ebe <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   81eba:	2301      	movs	r3, #1
   81ebc:	e01b      	b.n	81ef6 <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81ebe:	68bb      	ldr	r3, [r7, #8]
   81ec0:	685a      	ldr	r2, [r3, #4]
   81ec2:	68bb      	ldr	r3, [r7, #8]
   81ec4:	689b      	ldr	r3, [r3, #8]
   81ec6:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81ec8:	68bb      	ldr	r3, [r7, #8]
   81eca:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81ecc:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81ece:	68bb      	ldr	r3, [r7, #8]
   81ed0:	68db      	ldr	r3, [r3, #12]
   81ed2:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81ed4:	4b0b      	ldr	r3, [pc, #44]	; (81f04 <usart_init_rs232+0x7c>)
   81ed6:	681b      	ldr	r3, [r3, #0]
   81ed8:	431a      	orrs	r2, r3
   81eda:	4b0a      	ldr	r3, [pc, #40]	; (81f04 <usart_init_rs232+0x7c>)
   81edc:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81ede:	4b09      	ldr	r3, [pc, #36]	; (81f04 <usart_init_rs232+0x7c>)
   81ee0:	681a      	ldr	r2, [r3, #0]
   81ee2:	4b08      	ldr	r3, [pc, #32]	; (81f04 <usart_init_rs232+0x7c>)
   81ee4:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   81ee6:	68fb      	ldr	r3, [r7, #12]
   81ee8:	685a      	ldr	r2, [r3, #4]
   81eea:	4b06      	ldr	r3, [pc, #24]	; (81f04 <usart_init_rs232+0x7c>)
   81eec:	681b      	ldr	r3, [r3, #0]
   81eee:	431a      	orrs	r2, r3
   81ef0:	68fb      	ldr	r3, [r7, #12]
   81ef2:	605a      	str	r2, [r3, #4]
	
	return 0;
   81ef4:	2300      	movs	r3, #0
}
   81ef6:	4618      	mov	r0, r3
   81ef8:	3710      	adds	r7, #16
   81efa:	46bd      	mov	sp, r7
   81efc:	bd80      	pop	{r7, pc}
   81efe:	bf00      	nop
   81f00:	00081e35 	.word	0x00081e35
   81f04:	200704dc 	.word	0x200704dc
   81f08:	00081da9 	.word	0x00081da9

00081f0c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81f0c:	b480      	push	{r7}
   81f0e:	b083      	sub	sp, #12
   81f10:	af00      	add	r7, sp, #0
   81f12:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81f14:	687b      	ldr	r3, [r7, #4]
   81f16:	2240      	movs	r2, #64	; 0x40
   81f18:	601a      	str	r2, [r3, #0]
}
   81f1a:	370c      	adds	r7, #12
   81f1c:	46bd      	mov	sp, r7
   81f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f22:	4770      	bx	lr

00081f24 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81f24:	b480      	push	{r7}
   81f26:	b083      	sub	sp, #12
   81f28:	af00      	add	r7, sp, #0
   81f2a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81f2c:	687b      	ldr	r3, [r7, #4]
   81f2e:	2288      	movs	r2, #136	; 0x88
   81f30:	601a      	str	r2, [r3, #0]
}
   81f32:	370c      	adds	r7, #12
   81f34:	46bd      	mov	sp, r7
   81f36:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f3a:	4770      	bx	lr

00081f3c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81f3c:	b480      	push	{r7}
   81f3e:	b083      	sub	sp, #12
   81f40:	af00      	add	r7, sp, #0
   81f42:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   81f44:	687b      	ldr	r3, [r7, #4]
   81f46:	2210      	movs	r2, #16
   81f48:	601a      	str	r2, [r3, #0]
}
   81f4a:	370c      	adds	r7, #12
   81f4c:	46bd      	mov	sp, r7
   81f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f52:	4770      	bx	lr

00081f54 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81f54:	b480      	push	{r7}
   81f56:	b083      	sub	sp, #12
   81f58:	af00      	add	r7, sp, #0
   81f5a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81f5c:	687b      	ldr	r3, [r7, #4]
   81f5e:	2224      	movs	r2, #36	; 0x24
   81f60:	601a      	str	r2, [r3, #0]
}
   81f62:	370c      	adds	r7, #12
   81f64:	46bd      	mov	sp, r7
   81f66:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f6a:	4770      	bx	lr

00081f6c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81f6c:	b480      	push	{r7}
   81f6e:	b083      	sub	sp, #12
   81f70:	af00      	add	r7, sp, #0
   81f72:	6078      	str	r0, [r7, #4]
   81f74:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   81f76:	687b      	ldr	r3, [r7, #4]
   81f78:	683a      	ldr	r2, [r7, #0]
   81f7a:	609a      	str	r2, [r3, #8]
}
   81f7c:	370c      	adds	r7, #12
   81f7e:	46bd      	mov	sp, r7
   81f80:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f84:	4770      	bx	lr
   81f86:	bf00      	nop

00081f88 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81f88:	b480      	push	{r7}
   81f8a:	b083      	sub	sp, #12
   81f8c:	af00      	add	r7, sp, #0
   81f8e:	6078      	str	r0, [r7, #4]
   81f90:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   81f92:	687b      	ldr	r3, [r7, #4]
   81f94:	683a      	ldr	r2, [r7, #0]
   81f96:	60da      	str	r2, [r3, #12]
}
   81f98:	370c      	adds	r7, #12
   81f9a:	46bd      	mov	sp, r7
   81f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fa0:	4770      	bx	lr
   81fa2:	bf00      	nop

00081fa4 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   81fa4:	b480      	push	{r7}
   81fa6:	b083      	sub	sp, #12
   81fa8:	af00      	add	r7, sp, #0
   81faa:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   81fac:	687b      	ldr	r3, [r7, #4]
   81fae:	695b      	ldr	r3, [r3, #20]
}
   81fb0:	4618      	mov	r0, r3
   81fb2:	370c      	adds	r7, #12
   81fb4:	46bd      	mov	sp, r7
   81fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fba:	4770      	bx	lr

00081fbc <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   81fbc:	b480      	push	{r7}
   81fbe:	b083      	sub	sp, #12
   81fc0:	af00      	add	r7, sp, #0
   81fc2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   81fc4:	687b      	ldr	r3, [r7, #4]
   81fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
   81fca:	601a      	str	r2, [r3, #0]
}
   81fcc:	370c      	adds	r7, #12
   81fce:	46bd      	mov	sp, r7
   81fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fd4:	4770      	bx	lr
   81fd6:	bf00      	nop

00081fd8 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81fd8:	b480      	push	{r7}
   81fda:	b083      	sub	sp, #12
   81fdc:	af00      	add	r7, sp, #0
   81fde:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81fe0:	687b      	ldr	r3, [r7, #4]
   81fe2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81fe6:	601a      	str	r2, [r3, #0]
}
   81fe8:	370c      	adds	r7, #12
   81fea:	46bd      	mov	sp, r7
   81fec:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ff0:	4770      	bx	lr
   81ff2:	bf00      	nop

00081ff4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81ff4:	b480      	push	{r7}
   81ff6:	b083      	sub	sp, #12
   81ff8:	af00      	add	r7, sp, #0
   81ffa:	6078      	str	r0, [r7, #4]
   81ffc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81ffe:	687b      	ldr	r3, [r7, #4]
   82000:	695b      	ldr	r3, [r3, #20]
   82002:	f003 0302 	and.w	r3, r3, #2
   82006:	2b00      	cmp	r3, #0
   82008:	d101      	bne.n	8200e <usart_write+0x1a>
		return 1;
   8200a:	2301      	movs	r3, #1
   8200c:	e005      	b.n	8201a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8200e:	683b      	ldr	r3, [r7, #0]
   82010:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82014:	687b      	ldr	r3, [r7, #4]
   82016:	61da      	str	r2, [r3, #28]
	return 0;
   82018:	2300      	movs	r3, #0
}
   8201a:	4618      	mov	r0, r3
   8201c:	370c      	adds	r7, #12
   8201e:	46bd      	mov	sp, r7
   82020:	f85d 7b04 	ldr.w	r7, [sp], #4
   82024:	4770      	bx	lr
   82026:	bf00      	nop

00082028 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   82028:	b480      	push	{r7}
   8202a:	b085      	sub	sp, #20
   8202c:	af00      	add	r7, sp, #0
   8202e:	6078      	str	r0, [r7, #4]
   82030:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   82036:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82038:	e006      	b.n	82048 <usart_getchar+0x20>
		if (!timeout--) {
   8203a:	68fb      	ldr	r3, [r7, #12]
   8203c:	1e5a      	subs	r2, r3, #1
   8203e:	60fa      	str	r2, [r7, #12]
   82040:	2b00      	cmp	r3, #0
   82042:	d101      	bne.n	82048 <usart_getchar+0x20>
			return 1;
   82044:	2301      	movs	r3, #1
   82046:	e00c      	b.n	82062 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82048:	687b      	ldr	r3, [r7, #4]
   8204a:	695b      	ldr	r3, [r3, #20]
   8204c:	f003 0301 	and.w	r3, r3, #1
   82050:	2b00      	cmp	r3, #0
   82052:	d0f2      	beq.n	8203a <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82054:	687b      	ldr	r3, [r7, #4]
   82056:	699b      	ldr	r3, [r3, #24]
   82058:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8205c:	683b      	ldr	r3, [r7, #0]
   8205e:	601a      	str	r2, [r3, #0]

	return 0;
   82060:	2300      	movs	r3, #0
}
   82062:	4618      	mov	r0, r3
   82064:	3714      	adds	r7, #20
   82066:	46bd      	mov	sp, r7
   82068:	f85d 7b04 	ldr.w	r7, [sp], #4
   8206c:	4770      	bx	lr
   8206e:	bf00      	nop

00082070 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82070:	b480      	push	{r7}
   82072:	b083      	sub	sp, #12
   82074:	af00      	add	r7, sp, #0
   82076:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   82078:	687b      	ldr	r3, [r7, #4]
   8207a:	4a04      	ldr	r2, [pc, #16]	; (8208c <usart_disable_writeprotect+0x1c>)
   8207c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82080:	370c      	adds	r7, #12
   82082:	46bd      	mov	sp, r7
   82084:	f85d 7b04 	ldr.w	r7, [sp], #4
   82088:	4770      	bx	lr
   8208a:	bf00      	nop
   8208c:	55534100 	.word	0x55534100

00082090 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   82090:	b480      	push	{r7}
   82092:	b083      	sub	sp, #12
   82094:	af00      	add	r7, sp, #0
   82096:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   82098:	687a      	ldr	r2, [r7, #4]
   8209a:	4b05      	ldr	r3, [pc, #20]	; (820b0 <wdt_restart+0x20>)
   8209c:	429a      	cmp	r2, r3
   8209e:	d102      	bne.n	820a6 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   820a0:	687b      	ldr	r3, [r7, #4]
   820a2:	4a04      	ldr	r2, [pc, #16]	; (820b4 <wdt_restart+0x24>)
   820a4:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   820a6:	370c      	adds	r7, #12
   820a8:	46bd      	mov	sp, r7
   820aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   820ae:	4770      	bx	lr
   820b0:	400e1a50 	.word	0x400e1a50
   820b4:	a5000001 	.word	0xa5000001

000820b8 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   820b8:	b480      	push	{r7}
   820ba:	b083      	sub	sp, #12
   820bc:	af00      	add	r7, sp, #0
   820be:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   820c0:	687b      	ldr	r3, [r7, #4]
   820c2:	689b      	ldr	r3, [r3, #8]
}
   820c4:	4618      	mov	r0, r3
   820c6:	370c      	adds	r7, #12
   820c8:	46bd      	mov	sp, r7
   820ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   820ce:	4770      	bx	lr

000820d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   820d0:	b480      	push	{r7}
   820d2:	af00      	add	r7, sp, #0
	while (1) {
	}
   820d4:	e7fe      	b.n	820d4 <Dummy_Handler+0x4>
   820d6:	bf00      	nop

000820d8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   820d8:	b580      	push	{r7, lr}
   820da:	b082      	sub	sp, #8
   820dc:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   820de:	4b1e      	ldr	r3, [pc, #120]	; (82158 <Reset_Handler+0x80>)
   820e0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   820e2:	4b1e      	ldr	r3, [pc, #120]	; (8215c <Reset_Handler+0x84>)
   820e4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   820e6:	687a      	ldr	r2, [r7, #4]
   820e8:	683b      	ldr	r3, [r7, #0]
   820ea:	429a      	cmp	r2, r3
   820ec:	d00c      	beq.n	82108 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   820ee:	e007      	b.n	82100 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   820f0:	683b      	ldr	r3, [r7, #0]
   820f2:	1d1a      	adds	r2, r3, #4
   820f4:	603a      	str	r2, [r7, #0]
   820f6:	687a      	ldr	r2, [r7, #4]
   820f8:	1d11      	adds	r1, r2, #4
   820fa:	6079      	str	r1, [r7, #4]
   820fc:	6812      	ldr	r2, [r2, #0]
   820fe:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82100:	683a      	ldr	r2, [r7, #0]
   82102:	4b17      	ldr	r3, [pc, #92]	; (82160 <Reset_Handler+0x88>)
   82104:	429a      	cmp	r2, r3
   82106:	d3f3      	bcc.n	820f0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82108:	4b16      	ldr	r3, [pc, #88]	; (82164 <Reset_Handler+0x8c>)
   8210a:	603b      	str	r3, [r7, #0]
   8210c:	e004      	b.n	82118 <Reset_Handler+0x40>
		*pDest++ = 0;
   8210e:	683b      	ldr	r3, [r7, #0]
   82110:	1d1a      	adds	r2, r3, #4
   82112:	603a      	str	r2, [r7, #0]
   82114:	2200      	movs	r2, #0
   82116:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82118:	683a      	ldr	r2, [r7, #0]
   8211a:	4b13      	ldr	r3, [pc, #76]	; (82168 <Reset_Handler+0x90>)
   8211c:	429a      	cmp	r2, r3
   8211e:	d3f6      	bcc.n	8210e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82120:	4b12      	ldr	r3, [pc, #72]	; (8216c <Reset_Handler+0x94>)
   82122:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82124:	4a12      	ldr	r2, [pc, #72]	; (82170 <Reset_Handler+0x98>)
   82126:	687b      	ldr	r3, [r7, #4]
   82128:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8212c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82130:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82132:	687b      	ldr	r3, [r7, #4]
   82134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82138:	d309      	bcc.n	8214e <Reset_Handler+0x76>
   8213a:	687a      	ldr	r2, [r7, #4]
   8213c:	4b0d      	ldr	r3, [pc, #52]	; (82174 <Reset_Handler+0x9c>)
   8213e:	429a      	cmp	r2, r3
   82140:	d805      	bhi.n	8214e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82142:	4b0b      	ldr	r3, [pc, #44]	; (82170 <Reset_Handler+0x98>)
   82144:	4a0a      	ldr	r2, [pc, #40]	; (82170 <Reset_Handler+0x98>)
   82146:	6892      	ldr	r2, [r2, #8]
   82148:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8214c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8214e:	4b0a      	ldr	r3, [pc, #40]	; (82178 <Reset_Handler+0xa0>)
   82150:	4798      	blx	r3

	/* Branch to main function */
	main();
   82152:	4b0a      	ldr	r3, [pc, #40]	; (8217c <Reset_Handler+0xa4>)
   82154:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82156:	e7fe      	b.n	82156 <Reset_Handler+0x7e>
   82158:	000861b8 	.word	0x000861b8
   8215c:	20070000 	.word	0x20070000
   82160:	20070438 	.word	0x20070438
   82164:	20070438 	.word	0x20070438
   82168:	2007a6f0 	.word	0x2007a6f0
   8216c:	00080000 	.word	0x00080000
   82170:	e000ed00 	.word	0xe000ed00
   82174:	200fffff 	.word	0x200fffff
   82178:	00085d01 	.word	0x00085d01
   8217c:	000851a9 	.word	0x000851a9

00082180 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82180:	b480      	push	{r7}
   82182:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82184:	4b56      	ldr	r3, [pc, #344]	; (822e0 <SystemCoreClockUpdate+0x160>)
   82186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82188:	f003 0303 	and.w	r3, r3, #3
   8218c:	2b03      	cmp	r3, #3
   8218e:	f200 808a 	bhi.w	822a6 <SystemCoreClockUpdate+0x126>
   82192:	a101      	add	r1, pc, #4	; (adr r1, 82198 <SystemCoreClockUpdate+0x18>)
   82194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82198:	000821a9 	.word	0x000821a9
   8219c:	000821c9 	.word	0x000821c9
   821a0:	00082219 	.word	0x00082219
   821a4:	00082219 	.word	0x00082219
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   821a8:	4b4e      	ldr	r3, [pc, #312]	; (822e4 <SystemCoreClockUpdate+0x164>)
   821aa:	695b      	ldr	r3, [r3, #20]
   821ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
   821b0:	2b00      	cmp	r3, #0
   821b2:	d004      	beq.n	821be <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   821b4:	4b4c      	ldr	r3, [pc, #304]	; (822e8 <SystemCoreClockUpdate+0x168>)
   821b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   821ba:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   821bc:	e073      	b.n	822a6 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   821be:	4b4a      	ldr	r3, [pc, #296]	; (822e8 <SystemCoreClockUpdate+0x168>)
   821c0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   821c4:	601a      	str	r2, [r3, #0]
		}
		break;
   821c6:	e06e      	b.n	822a6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   821c8:	4b45      	ldr	r3, [pc, #276]	; (822e0 <SystemCoreClockUpdate+0x160>)
   821ca:	6a1b      	ldr	r3, [r3, #32]
   821cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   821d0:	2b00      	cmp	r3, #0
   821d2:	d003      	beq.n	821dc <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   821d4:	4b44      	ldr	r3, [pc, #272]	; (822e8 <SystemCoreClockUpdate+0x168>)
   821d6:	4a45      	ldr	r2, [pc, #276]	; (822ec <SystemCoreClockUpdate+0x16c>)
   821d8:	601a      	str	r2, [r3, #0]
   821da:	e01c      	b.n	82216 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   821dc:	4b42      	ldr	r3, [pc, #264]	; (822e8 <SystemCoreClockUpdate+0x168>)
   821de:	4a44      	ldr	r2, [pc, #272]	; (822f0 <SystemCoreClockUpdate+0x170>)
   821e0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   821e2:	4b3f      	ldr	r3, [pc, #252]	; (822e0 <SystemCoreClockUpdate+0x160>)
   821e4:	6a1b      	ldr	r3, [r3, #32]
   821e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   821ea:	2b10      	cmp	r3, #16
   821ec:	d004      	beq.n	821f8 <SystemCoreClockUpdate+0x78>
   821ee:	2b20      	cmp	r3, #32
   821f0:	d008      	beq.n	82204 <SystemCoreClockUpdate+0x84>
   821f2:	2b00      	cmp	r3, #0
   821f4:	d00e      	beq.n	82214 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   821f6:	e00e      	b.n	82216 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   821f8:	4b3b      	ldr	r3, [pc, #236]	; (822e8 <SystemCoreClockUpdate+0x168>)
   821fa:	681b      	ldr	r3, [r3, #0]
   821fc:	005a      	lsls	r2, r3, #1
   821fe:	4b3a      	ldr	r3, [pc, #232]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82200:	601a      	str	r2, [r3, #0]
				break;
   82202:	e008      	b.n	82216 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82204:	4b38      	ldr	r3, [pc, #224]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82206:	681a      	ldr	r2, [r3, #0]
   82208:	4613      	mov	r3, r2
   8220a:	005b      	lsls	r3, r3, #1
   8220c:	441a      	add	r2, r3
   8220e:	4b36      	ldr	r3, [pc, #216]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82210:	601a      	str	r2, [r3, #0]
				break;
   82212:	e000      	b.n	82216 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82214:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   82216:	e046      	b.n	822a6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82218:	4b31      	ldr	r3, [pc, #196]	; (822e0 <SystemCoreClockUpdate+0x160>)
   8221a:	6a1b      	ldr	r3, [r3, #32]
   8221c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82220:	2b00      	cmp	r3, #0
   82222:	d003      	beq.n	8222c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82224:	4b30      	ldr	r3, [pc, #192]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82226:	4a31      	ldr	r2, [pc, #196]	; (822ec <SystemCoreClockUpdate+0x16c>)
   82228:	601a      	str	r2, [r3, #0]
   8222a:	e01c      	b.n	82266 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8222c:	4b2e      	ldr	r3, [pc, #184]	; (822e8 <SystemCoreClockUpdate+0x168>)
   8222e:	4a30      	ldr	r2, [pc, #192]	; (822f0 <SystemCoreClockUpdate+0x170>)
   82230:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82232:	4b2b      	ldr	r3, [pc, #172]	; (822e0 <SystemCoreClockUpdate+0x160>)
   82234:	6a1b      	ldr	r3, [r3, #32]
   82236:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8223a:	2b10      	cmp	r3, #16
   8223c:	d004      	beq.n	82248 <SystemCoreClockUpdate+0xc8>
   8223e:	2b20      	cmp	r3, #32
   82240:	d008      	beq.n	82254 <SystemCoreClockUpdate+0xd4>
   82242:	2b00      	cmp	r3, #0
   82244:	d00e      	beq.n	82264 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82246:	e00e      	b.n	82266 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82248:	4b27      	ldr	r3, [pc, #156]	; (822e8 <SystemCoreClockUpdate+0x168>)
   8224a:	681b      	ldr	r3, [r3, #0]
   8224c:	005a      	lsls	r2, r3, #1
   8224e:	4b26      	ldr	r3, [pc, #152]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82250:	601a      	str	r2, [r3, #0]
				break;
   82252:	e008      	b.n	82266 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82254:	4b24      	ldr	r3, [pc, #144]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82256:	681a      	ldr	r2, [r3, #0]
   82258:	4613      	mov	r3, r2
   8225a:	005b      	lsls	r3, r3, #1
   8225c:	441a      	add	r2, r3
   8225e:	4b22      	ldr	r3, [pc, #136]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82260:	601a      	str	r2, [r3, #0]
				break;
   82262:	e000      	b.n	82266 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82264:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82266:	4b1e      	ldr	r3, [pc, #120]	; (822e0 <SystemCoreClockUpdate+0x160>)
   82268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8226a:	f003 0303 	and.w	r3, r3, #3
   8226e:	2b02      	cmp	r3, #2
   82270:	d115      	bne.n	8229e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82272:	4b1b      	ldr	r3, [pc, #108]	; (822e0 <SystemCoreClockUpdate+0x160>)
   82274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82276:	4b1f      	ldr	r3, [pc, #124]	; (822f4 <SystemCoreClockUpdate+0x174>)
   82278:	4013      	ands	r3, r2
   8227a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   8227c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8227e:	4a1a      	ldr	r2, [pc, #104]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82280:	6812      	ldr	r2, [r2, #0]
   82282:	fb02 f203 	mul.w	r2, r2, r3
   82286:	4b18      	ldr	r3, [pc, #96]	; (822e8 <SystemCoreClockUpdate+0x168>)
   82288:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8228a:	4b17      	ldr	r3, [pc, #92]	; (822e8 <SystemCoreClockUpdate+0x168>)
   8228c:	681a      	ldr	r2, [r3, #0]
   8228e:	4b14      	ldr	r3, [pc, #80]	; (822e0 <SystemCoreClockUpdate+0x160>)
   82290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82292:	b2db      	uxtb	r3, r3
   82294:	fbb2 f2f3 	udiv	r2, r2, r3
   82298:	4b13      	ldr	r3, [pc, #76]	; (822e8 <SystemCoreClockUpdate+0x168>)
   8229a:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   8229c:	e002      	b.n	822a4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8229e:	4b12      	ldr	r3, [pc, #72]	; (822e8 <SystemCoreClockUpdate+0x168>)
   822a0:	4a15      	ldr	r2, [pc, #84]	; (822f8 <SystemCoreClockUpdate+0x178>)
   822a2:	601a      	str	r2, [r3, #0]
		}
		break;
   822a4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   822a6:	4b0e      	ldr	r3, [pc, #56]	; (822e0 <SystemCoreClockUpdate+0x160>)
   822a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822ae:	2b70      	cmp	r3, #112	; 0x70
   822b0:	d108      	bne.n	822c4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   822b2:	4b0d      	ldr	r3, [pc, #52]	; (822e8 <SystemCoreClockUpdate+0x168>)
   822b4:	681a      	ldr	r2, [r3, #0]
   822b6:	4b11      	ldr	r3, [pc, #68]	; (822fc <SystemCoreClockUpdate+0x17c>)
   822b8:	fba3 1302 	umull	r1, r3, r3, r2
   822bc:	085a      	lsrs	r2, r3, #1
   822be:	4b0a      	ldr	r3, [pc, #40]	; (822e8 <SystemCoreClockUpdate+0x168>)
   822c0:	601a      	str	r2, [r3, #0]
   822c2:	e009      	b.n	822d8 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   822c4:	4b08      	ldr	r3, [pc, #32]	; (822e8 <SystemCoreClockUpdate+0x168>)
   822c6:	681a      	ldr	r2, [r3, #0]
   822c8:	4b05      	ldr	r3, [pc, #20]	; (822e0 <SystemCoreClockUpdate+0x160>)
   822ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822d0:	091b      	lsrs	r3, r3, #4
   822d2:	40da      	lsrs	r2, r3
   822d4:	4b04      	ldr	r3, [pc, #16]	; (822e8 <SystemCoreClockUpdate+0x168>)
   822d6:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   822d8:	46bd      	mov	sp, r7
   822da:	f85d 7b04 	ldr.w	r7, [sp], #4
   822de:	4770      	bx	lr
   822e0:	400e0600 	.word	0x400e0600
   822e4:	400e1a10 	.word	0x400e1a10
   822e8:	20070000 	.word	0x20070000
   822ec:	00b71b00 	.word	0x00b71b00
   822f0:	003d0900 	.word	0x003d0900
   822f4:	07ff0000 	.word	0x07ff0000
   822f8:	0e4e1c00 	.word	0x0e4e1c00
   822fc:	aaaaaaab 	.word	0xaaaaaaab

00082300 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82300:	b480      	push	{r7}
   82302:	b083      	sub	sp, #12
   82304:	af00      	add	r7, sp, #0
   82306:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82308:	687a      	ldr	r2, [r7, #4]
   8230a:	4b1f      	ldr	r3, [pc, #124]	; (82388 <system_init_flash+0x88>)
   8230c:	429a      	cmp	r2, r3
   8230e:	d806      	bhi.n	8231e <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82310:	4b1e      	ldr	r3, [pc, #120]	; (8238c <system_init_flash+0x8c>)
   82312:	2200      	movs	r2, #0
   82314:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82316:	4b1e      	ldr	r3, [pc, #120]	; (82390 <system_init_flash+0x90>)
   82318:	2200      	movs	r2, #0
   8231a:	601a      	str	r2, [r3, #0]
   8231c:	e02e      	b.n	8237c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8231e:	687a      	ldr	r2, [r7, #4]
   82320:	4b1c      	ldr	r3, [pc, #112]	; (82394 <system_init_flash+0x94>)
   82322:	429a      	cmp	r2, r3
   82324:	d808      	bhi.n	82338 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82326:	4b19      	ldr	r3, [pc, #100]	; (8238c <system_init_flash+0x8c>)
   82328:	f44f 7280 	mov.w	r2, #256	; 0x100
   8232c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8232e:	4b18      	ldr	r3, [pc, #96]	; (82390 <system_init_flash+0x90>)
   82330:	f44f 7280 	mov.w	r2, #256	; 0x100
   82334:	601a      	str	r2, [r3, #0]
   82336:	e021      	b.n	8237c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82338:	687a      	ldr	r2, [r7, #4]
   8233a:	4b17      	ldr	r3, [pc, #92]	; (82398 <system_init_flash+0x98>)
   8233c:	429a      	cmp	r2, r3
   8233e:	d808      	bhi.n	82352 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82340:	4b12      	ldr	r3, [pc, #72]	; (8238c <system_init_flash+0x8c>)
   82342:	f44f 7200 	mov.w	r2, #512	; 0x200
   82346:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82348:	4b11      	ldr	r3, [pc, #68]	; (82390 <system_init_flash+0x90>)
   8234a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8234e:	601a      	str	r2, [r3, #0]
   82350:	e014      	b.n	8237c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82352:	687a      	ldr	r2, [r7, #4]
   82354:	4b11      	ldr	r3, [pc, #68]	; (8239c <system_init_flash+0x9c>)
   82356:	429a      	cmp	r2, r3
   82358:	d808      	bhi.n	8236c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   8235a:	4b0c      	ldr	r3, [pc, #48]	; (8238c <system_init_flash+0x8c>)
   8235c:	f44f 7240 	mov.w	r2, #768	; 0x300
   82360:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82362:	4b0b      	ldr	r3, [pc, #44]	; (82390 <system_init_flash+0x90>)
   82364:	f44f 7240 	mov.w	r2, #768	; 0x300
   82368:	601a      	str	r2, [r3, #0]
   8236a:	e007      	b.n	8237c <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8236c:	4b07      	ldr	r3, [pc, #28]	; (8238c <system_init_flash+0x8c>)
   8236e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82372:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82374:	4b06      	ldr	r3, [pc, #24]	; (82390 <system_init_flash+0x90>)
   82376:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8237a:	601a      	str	r2, [r3, #0]
	}
}
   8237c:	370c      	adds	r7, #12
   8237e:	46bd      	mov	sp, r7
   82380:	f85d 7b04 	ldr.w	r7, [sp], #4
   82384:	4770      	bx	lr
   82386:	bf00      	nop
   82388:	0157529f 	.word	0x0157529f
   8238c:	400e0a00 	.word	0x400e0a00
   82390:	400e0c00 	.word	0x400e0c00
   82394:	0206cc7f 	.word	0x0206cc7f
   82398:	0328b73f 	.word	0x0328b73f
   8239c:	04a62f7f 	.word	0x04a62f7f

000823a0 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   823a0:	b480      	push	{r7}
   823a2:	b083      	sub	sp, #12
   823a4:	af00      	add	r7, sp, #0
   823a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   823a8:	687b      	ldr	r3, [r7, #4]
   823aa:	f103 0208 	add.w	r2, r3, #8
   823ae:	687b      	ldr	r3, [r7, #4]
   823b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   823b2:	687b      	ldr	r3, [r7, #4]
   823b4:	f04f 32ff 	mov.w	r2, #4294967295
   823b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   823ba:	687b      	ldr	r3, [r7, #4]
   823bc:	f103 0208 	add.w	r2, r3, #8
   823c0:	687b      	ldr	r3, [r7, #4]
   823c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   823c4:	687b      	ldr	r3, [r7, #4]
   823c6:	f103 0208 	add.w	r2, r3, #8
   823ca:	687b      	ldr	r3, [r7, #4]
   823cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   823ce:	687b      	ldr	r3, [r7, #4]
   823d0:	2200      	movs	r2, #0
   823d2:	601a      	str	r2, [r3, #0]
}
   823d4:	370c      	adds	r7, #12
   823d6:	46bd      	mov	sp, r7
   823d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   823dc:	4770      	bx	lr
   823de:	bf00      	nop

000823e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   823e0:	b480      	push	{r7}
   823e2:	b083      	sub	sp, #12
   823e4:	af00      	add	r7, sp, #0
   823e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   823e8:	687b      	ldr	r3, [r7, #4]
   823ea:	2200      	movs	r2, #0
   823ec:	611a      	str	r2, [r3, #16]
}
   823ee:	370c      	adds	r7, #12
   823f0:	46bd      	mov	sp, r7
   823f2:	f85d 7b04 	ldr.w	r7, [sp], #4
   823f6:	4770      	bx	lr

000823f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   823f8:	b480      	push	{r7}
   823fa:	b085      	sub	sp, #20
   823fc:	af00      	add	r7, sp, #0
   823fe:	6078      	str	r0, [r7, #4]
   82400:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82402:	687b      	ldr	r3, [r7, #4]
   82404:	685b      	ldr	r3, [r3, #4]
   82406:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82408:	683b      	ldr	r3, [r7, #0]
   8240a:	68fa      	ldr	r2, [r7, #12]
   8240c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8240e:	68fb      	ldr	r3, [r7, #12]
   82410:	689a      	ldr	r2, [r3, #8]
   82412:	683b      	ldr	r3, [r7, #0]
   82414:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82416:	68fb      	ldr	r3, [r7, #12]
   82418:	689b      	ldr	r3, [r3, #8]
   8241a:	683a      	ldr	r2, [r7, #0]
   8241c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8241e:	68fb      	ldr	r3, [r7, #12]
   82420:	683a      	ldr	r2, [r7, #0]
   82422:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82424:	683b      	ldr	r3, [r7, #0]
   82426:	687a      	ldr	r2, [r7, #4]
   82428:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   8242a:	687b      	ldr	r3, [r7, #4]
   8242c:	681b      	ldr	r3, [r3, #0]
   8242e:	1c5a      	adds	r2, r3, #1
   82430:	687b      	ldr	r3, [r7, #4]
   82432:	601a      	str	r2, [r3, #0]
}
   82434:	3714      	adds	r7, #20
   82436:	46bd      	mov	sp, r7
   82438:	f85d 7b04 	ldr.w	r7, [sp], #4
   8243c:	4770      	bx	lr
   8243e:	bf00      	nop

00082440 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82440:	b480      	push	{r7}
   82442:	b085      	sub	sp, #20
   82444:	af00      	add	r7, sp, #0
   82446:	6078      	str	r0, [r7, #4]
   82448:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   8244a:	683b      	ldr	r3, [r7, #0]
   8244c:	681b      	ldr	r3, [r3, #0]
   8244e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82450:	68bb      	ldr	r3, [r7, #8]
   82452:	f1b3 3fff 	cmp.w	r3, #4294967295
   82456:	d103      	bne.n	82460 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   82458:	687b      	ldr	r3, [r7, #4]
   8245a:	691b      	ldr	r3, [r3, #16]
   8245c:	60fb      	str	r3, [r7, #12]
   8245e:	e00c      	b.n	8247a <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82460:	687b      	ldr	r3, [r7, #4]
   82462:	3308      	adds	r3, #8
   82464:	60fb      	str	r3, [r7, #12]
   82466:	e002      	b.n	8246e <vListInsert+0x2e>
   82468:	68fb      	ldr	r3, [r7, #12]
   8246a:	685b      	ldr	r3, [r3, #4]
   8246c:	60fb      	str	r3, [r7, #12]
   8246e:	68fb      	ldr	r3, [r7, #12]
   82470:	685b      	ldr	r3, [r3, #4]
   82472:	681a      	ldr	r2, [r3, #0]
   82474:	68bb      	ldr	r3, [r7, #8]
   82476:	429a      	cmp	r2, r3
   82478:	d9f6      	bls.n	82468 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8247a:	68fb      	ldr	r3, [r7, #12]
   8247c:	685a      	ldr	r2, [r3, #4]
   8247e:	683b      	ldr	r3, [r7, #0]
   82480:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82482:	683b      	ldr	r3, [r7, #0]
   82484:	685b      	ldr	r3, [r3, #4]
   82486:	683a      	ldr	r2, [r7, #0]
   82488:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8248a:	683b      	ldr	r3, [r7, #0]
   8248c:	68fa      	ldr	r2, [r7, #12]
   8248e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82490:	68fb      	ldr	r3, [r7, #12]
   82492:	683a      	ldr	r2, [r7, #0]
   82494:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82496:	683b      	ldr	r3, [r7, #0]
   82498:	687a      	ldr	r2, [r7, #4]
   8249a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   8249c:	687b      	ldr	r3, [r7, #4]
   8249e:	681b      	ldr	r3, [r3, #0]
   824a0:	1c5a      	adds	r2, r3, #1
   824a2:	687b      	ldr	r3, [r7, #4]
   824a4:	601a      	str	r2, [r3, #0]
}
   824a6:	3714      	adds	r7, #20
   824a8:	46bd      	mov	sp, r7
   824aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   824ae:	4770      	bx	lr

000824b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   824b0:	b480      	push	{r7}
   824b2:	b085      	sub	sp, #20
   824b4:	af00      	add	r7, sp, #0
   824b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   824b8:	687b      	ldr	r3, [r7, #4]
   824ba:	691b      	ldr	r3, [r3, #16]
   824bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   824be:	687b      	ldr	r3, [r7, #4]
   824c0:	685b      	ldr	r3, [r3, #4]
   824c2:	687a      	ldr	r2, [r7, #4]
   824c4:	6892      	ldr	r2, [r2, #8]
   824c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   824c8:	687b      	ldr	r3, [r7, #4]
   824ca:	689b      	ldr	r3, [r3, #8]
   824cc:	687a      	ldr	r2, [r7, #4]
   824ce:	6852      	ldr	r2, [r2, #4]
   824d0:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   824d2:	68fb      	ldr	r3, [r7, #12]
   824d4:	685a      	ldr	r2, [r3, #4]
   824d6:	687b      	ldr	r3, [r7, #4]
   824d8:	429a      	cmp	r2, r3
   824da:	d103      	bne.n	824e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   824dc:	687b      	ldr	r3, [r7, #4]
   824de:	689a      	ldr	r2, [r3, #8]
   824e0:	68fb      	ldr	r3, [r7, #12]
   824e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   824e4:	687b      	ldr	r3, [r7, #4]
   824e6:	2200      	movs	r2, #0
   824e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   824ea:	68fb      	ldr	r3, [r7, #12]
   824ec:	681b      	ldr	r3, [r3, #0]
   824ee:	1e5a      	subs	r2, r3, #1
   824f0:	68fb      	ldr	r3, [r7, #12]
   824f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   824f4:	68fb      	ldr	r3, [r7, #12]
   824f6:	681b      	ldr	r3, [r3, #0]
}
   824f8:	4618      	mov	r0, r3
   824fa:	3714      	adds	r7, #20
   824fc:	46bd      	mov	sp, r7
   824fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82502:	4770      	bx	lr

00082504 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   82504:	b480      	push	{r7}
   82506:	b085      	sub	sp, #20
   82508:	af00      	add	r7, sp, #0
   8250a:	60f8      	str	r0, [r7, #12]
   8250c:	60b9      	str	r1, [r7, #8]
   8250e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   82510:	68fb      	ldr	r3, [r7, #12]
   82512:	3b04      	subs	r3, #4
   82514:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   82516:	68fb      	ldr	r3, [r7, #12]
   82518:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8251c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   8251e:	68fb      	ldr	r3, [r7, #12]
   82520:	3b04      	subs	r3, #4
   82522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   82524:	68ba      	ldr	r2, [r7, #8]
   82526:	68fb      	ldr	r3, [r7, #12]
   82528:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   8252a:	68fb      	ldr	r3, [r7, #12]
   8252c:	3b04      	subs	r3, #4
   8252e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   82530:	4a09      	ldr	r2, [pc, #36]	; (82558 <pxPortInitialiseStack+0x54>)
   82532:	68fb      	ldr	r3, [r7, #12]
   82534:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   82536:	68fb      	ldr	r3, [r7, #12]
   82538:	3b14      	subs	r3, #20
   8253a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   8253c:	687a      	ldr	r2, [r7, #4]
   8253e:	68fb      	ldr	r3, [r7, #12]
   82540:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   82542:	68fb      	ldr	r3, [r7, #12]
   82544:	3b20      	subs	r3, #32
   82546:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   82548:	68fb      	ldr	r3, [r7, #12]
}
   8254a:	4618      	mov	r0, r3
   8254c:	3714      	adds	r7, #20
   8254e:	46bd      	mov	sp, r7
   82550:	f85d 7b04 	ldr.w	r7, [sp], #4
   82554:	4770      	bx	lr
   82556:	bf00      	nop
   82558:	0008255d 	.word	0x0008255d

0008255c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   8255c:	b580      	push	{r7, lr}
   8255e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82560:	4b05      	ldr	r3, [pc, #20]	; (82578 <prvTaskExitError+0x1c>)
   82562:	681b      	ldr	r3, [r3, #0]
   82564:	f1b3 3fff 	cmp.w	r3, #4294967295
   82568:	d002      	beq.n	82570 <prvTaskExitError+0x14>
   8256a:	4b04      	ldr	r3, [pc, #16]	; (8257c <prvTaskExitError+0x20>)
   8256c:	4798      	blx	r3
   8256e:	e7fe      	b.n	8256e <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82570:	4b02      	ldr	r3, [pc, #8]	; (8257c <prvTaskExitError+0x20>)
   82572:	4798      	blx	r3
	for( ;; );
   82574:	e7fe      	b.n	82574 <prvTaskExitError+0x18>
   82576:	bf00      	nop
   82578:	20070004 	.word	0x20070004
   8257c:	00082729 	.word	0x00082729

00082580 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82580:	4b07      	ldr	r3, [pc, #28]	; (825a0 <pxCurrentTCBConst2>)
   82582:	6819      	ldr	r1, [r3, #0]
   82584:	6808      	ldr	r0, [r1, #0]
   82586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8258a:	f380 8809 	msr	PSP, r0
   8258e:	f3bf 8f6f 	isb	sy
   82592:	f04f 0000 	mov.w	r0, #0
   82596:	f380 8811 	msr	BASEPRI, r0
   8259a:	f04e 0e0d 	orr.w	lr, lr, #13
   8259e:	4770      	bx	lr

000825a0 <pxCurrentTCBConst2>:
   825a0:	2007a500 	.word	0x2007a500

000825a4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   825a4:	4806      	ldr	r0, [pc, #24]	; (825c0 <prvPortStartFirstTask+0x1c>)
   825a6:	6800      	ldr	r0, [r0, #0]
   825a8:	6800      	ldr	r0, [r0, #0]
   825aa:	f380 8808 	msr	MSP, r0
   825ae:	b662      	cpsie	i
   825b0:	b661      	cpsie	f
   825b2:	f3bf 8f4f 	dsb	sy
   825b6:	f3bf 8f6f 	isb	sy
   825ba:	df00      	svc	0
   825bc:	bf00      	nop
   825be:	0000      	.short	0x0000
   825c0:	e000ed08 	.word	0xe000ed08

000825c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   825c4:	b580      	push	{r7, lr}
   825c6:	b084      	sub	sp, #16
   825c8:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   825ca:	4b28      	ldr	r3, [pc, #160]	; (8266c <xPortStartScheduler+0xa8>)
   825cc:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   825ce:	68fb      	ldr	r3, [r7, #12]
   825d0:	781b      	ldrb	r3, [r3, #0]
   825d2:	b2db      	uxtb	r3, r3
   825d4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   825d6:	68fb      	ldr	r3, [r7, #12]
   825d8:	22ff      	movs	r2, #255	; 0xff
   825da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   825dc:	68fb      	ldr	r3, [r7, #12]
   825de:	781b      	ldrb	r3, [r3, #0]
   825e0:	b2db      	uxtb	r3, r3
   825e2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   825e4:	79fb      	ldrb	r3, [r7, #7]
   825e6:	b2db      	uxtb	r3, r3
   825e8:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   825ec:	b2da      	uxtb	r2, r3
   825ee:	4b20      	ldr	r3, [pc, #128]	; (82670 <xPortStartScheduler+0xac>)
   825f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   825f2:	4b20      	ldr	r3, [pc, #128]	; (82674 <xPortStartScheduler+0xb0>)
   825f4:	2207      	movs	r2, #7
   825f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   825f8:	e009      	b.n	8260e <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   825fa:	4b1e      	ldr	r3, [pc, #120]	; (82674 <xPortStartScheduler+0xb0>)
   825fc:	681b      	ldr	r3, [r3, #0]
   825fe:	1e5a      	subs	r2, r3, #1
   82600:	4b1c      	ldr	r3, [pc, #112]	; (82674 <xPortStartScheduler+0xb0>)
   82602:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   82604:	79fb      	ldrb	r3, [r7, #7]
   82606:	b2db      	uxtb	r3, r3
   82608:	005b      	lsls	r3, r3, #1
   8260a:	b2db      	uxtb	r3, r3
   8260c:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8260e:	79fb      	ldrb	r3, [r7, #7]
   82610:	b2db      	uxtb	r3, r3
   82612:	b2db      	uxtb	r3, r3
   82614:	b25b      	sxtb	r3, r3
   82616:	2b00      	cmp	r3, #0
   82618:	dbef      	blt.n	825fa <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8261a:	4b16      	ldr	r3, [pc, #88]	; (82674 <xPortStartScheduler+0xb0>)
   8261c:	681b      	ldr	r3, [r3, #0]
   8261e:	021a      	lsls	r2, r3, #8
   82620:	4b14      	ldr	r3, [pc, #80]	; (82674 <xPortStartScheduler+0xb0>)
   82622:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   82624:	4b13      	ldr	r3, [pc, #76]	; (82674 <xPortStartScheduler+0xb0>)
   82626:	681b      	ldr	r3, [r3, #0]
   82628:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   8262c:	4b11      	ldr	r3, [pc, #68]	; (82674 <xPortStartScheduler+0xb0>)
   8262e:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   82630:	68bb      	ldr	r3, [r7, #8]
   82632:	b2da      	uxtb	r2, r3
   82634:	68fb      	ldr	r3, [r7, #12]
   82636:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   82638:	4b0f      	ldr	r3, [pc, #60]	; (82678 <xPortStartScheduler+0xb4>)
   8263a:	4a0f      	ldr	r2, [pc, #60]	; (82678 <xPortStartScheduler+0xb4>)
   8263c:	6812      	ldr	r2, [r2, #0]
   8263e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   82642:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   82644:	4b0c      	ldr	r3, [pc, #48]	; (82678 <xPortStartScheduler+0xb4>)
   82646:	4a0c      	ldr	r2, [pc, #48]	; (82678 <xPortStartScheduler+0xb4>)
   82648:	6812      	ldr	r2, [r2, #0]
   8264a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8264e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82650:	4b0a      	ldr	r3, [pc, #40]	; (8267c <xPortStartScheduler+0xb8>)
   82652:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82654:	4b0a      	ldr	r3, [pc, #40]	; (82680 <xPortStartScheduler+0xbc>)
   82656:	2200      	movs	r2, #0
   82658:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   8265a:	4b0a      	ldr	r3, [pc, #40]	; (82684 <xPortStartScheduler+0xc0>)
   8265c:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   8265e:	4b0a      	ldr	r3, [pc, #40]	; (82688 <xPortStartScheduler+0xc4>)
   82660:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   82662:	2300      	movs	r3, #0
}
   82664:	4618      	mov	r0, r3
   82666:	3710      	adds	r7, #16
   82668:	46bd      	mov	sp, r7
   8266a:	bd80      	pop	{r7, pc}
   8266c:	e000e400 	.word	0xe000e400
   82670:	200704e0 	.word	0x200704e0
   82674:	200704e4 	.word	0x200704e4
   82678:	e000ed20 	.word	0xe000ed20
   8267c:	000827bd 	.word	0x000827bd
   82680:	20070004 	.word	0x20070004
   82684:	000825a5 	.word	0x000825a5
   82688:	0008255d 	.word	0x0008255d

0008268c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   8268c:	b480      	push	{r7}
   8268e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82690:	4b05      	ldr	r3, [pc, #20]	; (826a8 <vPortYield+0x1c>)
   82692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82696:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   82698:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   8269c:	f3bf 8f6f 	isb	sy
}
   826a0:	46bd      	mov	sp, r7
   826a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   826a6:	4770      	bx	lr
   826a8:	e000ed04 	.word	0xe000ed04

000826ac <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   826ac:	b580      	push	{r7, lr}
   826ae:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   826b0:	4b0c      	ldr	r3, [pc, #48]	; (826e4 <vPortEnterCritical+0x38>)
   826b2:	4798      	blx	r3
	uxCriticalNesting++;
   826b4:	4b0c      	ldr	r3, [pc, #48]	; (826e8 <vPortEnterCritical+0x3c>)
   826b6:	681b      	ldr	r3, [r3, #0]
   826b8:	1c5a      	adds	r2, r3, #1
   826ba:	4b0b      	ldr	r3, [pc, #44]	; (826e8 <vPortEnterCritical+0x3c>)
   826bc:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   826be:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   826c2:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   826c6:	4b08      	ldr	r3, [pc, #32]	; (826e8 <vPortEnterCritical+0x3c>)
   826c8:	681b      	ldr	r3, [r3, #0]
   826ca:	2b01      	cmp	r3, #1
   826cc:	d108      	bne.n	826e0 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   826ce:	4b07      	ldr	r3, [pc, #28]	; (826ec <vPortEnterCritical+0x40>)
   826d0:	681b      	ldr	r3, [r3, #0]
   826d2:	f003 031f 	and.w	r3, r3, #31
   826d6:	2b00      	cmp	r3, #0
   826d8:	d002      	beq.n	826e0 <vPortEnterCritical+0x34>
   826da:	4b02      	ldr	r3, [pc, #8]	; (826e4 <vPortEnterCritical+0x38>)
   826dc:	4798      	blx	r3
   826de:	e7fe      	b.n	826de <vPortEnterCritical+0x32>
	}
}
   826e0:	bd80      	pop	{r7, pc}
   826e2:	bf00      	nop
   826e4:	00082729 	.word	0x00082729
   826e8:	20070004 	.word	0x20070004
   826ec:	e000ed04 	.word	0xe000ed04

000826f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   826f0:	b580      	push	{r7, lr}
   826f2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   826f4:	4b09      	ldr	r3, [pc, #36]	; (8271c <vPortExitCritical+0x2c>)
   826f6:	681b      	ldr	r3, [r3, #0]
   826f8:	2b00      	cmp	r3, #0
   826fa:	d102      	bne.n	82702 <vPortExitCritical+0x12>
   826fc:	4b08      	ldr	r3, [pc, #32]	; (82720 <vPortExitCritical+0x30>)
   826fe:	4798      	blx	r3
   82700:	e7fe      	b.n	82700 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   82702:	4b06      	ldr	r3, [pc, #24]	; (8271c <vPortExitCritical+0x2c>)
   82704:	681b      	ldr	r3, [r3, #0]
   82706:	1e5a      	subs	r2, r3, #1
   82708:	4b04      	ldr	r3, [pc, #16]	; (8271c <vPortExitCritical+0x2c>)
   8270a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   8270c:	4b03      	ldr	r3, [pc, #12]	; (8271c <vPortExitCritical+0x2c>)
   8270e:	681b      	ldr	r3, [r3, #0]
   82710:	2b00      	cmp	r3, #0
   82712:	d102      	bne.n	8271a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   82714:	2000      	movs	r0, #0
   82716:	4b03      	ldr	r3, [pc, #12]	; (82724 <vPortExitCritical+0x34>)
   82718:	4798      	blx	r3
	}
}
   8271a:	bd80      	pop	{r7, pc}
   8271c:	20070004 	.word	0x20070004
   82720:	00082729 	.word	0x00082729
   82724:	0008273d 	.word	0x0008273d

00082728 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82728:	f3ef 8011 	mrs	r0, BASEPRI
   8272c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82730:	f381 8811 	msr	BASEPRI, r1
   82734:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   82736:	2300      	movs	r3, #0
}
   82738:	4618      	mov	r0, r3
   8273a:	bf00      	nop

0008273c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   8273c:	f380 8811 	msr	BASEPRI, r0
   82740:	4770      	bx	lr
   82742:	bf00      	nop

00082744 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   82744:	f3ef 8009 	mrs	r0, PSP
   82748:	f3bf 8f6f 	isb	sy
   8274c:	4b0d      	ldr	r3, [pc, #52]	; (82784 <pxCurrentTCBConst>)
   8274e:	681a      	ldr	r2, [r3, #0]
   82750:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82754:	6010      	str	r0, [r2, #0]
   82756:	e92d 4008 	stmdb	sp!, {r3, lr}
   8275a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8275e:	f380 8811 	msr	BASEPRI, r0
   82762:	f001 f98d 	bl	83a80 <vTaskSwitchContext>
   82766:	f04f 0000 	mov.w	r0, #0
   8276a:	f380 8811 	msr	BASEPRI, r0
   8276e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82772:	6819      	ldr	r1, [r3, #0]
   82774:	6808      	ldr	r0, [r1, #0]
   82776:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8277a:	f380 8809 	msr	PSP, r0
   8277e:	f3bf 8f6f 	isb	sy
   82782:	4770      	bx	lr

00082784 <pxCurrentTCBConst>:
   82784:	2007a500 	.word	0x2007a500

00082788 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   82788:	b580      	push	{r7, lr}
   8278a:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8278c:	4b07      	ldr	r3, [pc, #28]	; (827ac <SysTick_Handler+0x24>)
   8278e:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82790:	4b07      	ldr	r3, [pc, #28]	; (827b0 <SysTick_Handler+0x28>)
   82792:	4798      	blx	r3
   82794:	4603      	mov	r3, r0
   82796:	2b00      	cmp	r3, #0
   82798:	d003      	beq.n	827a2 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8279a:	4b06      	ldr	r3, [pc, #24]	; (827b4 <SysTick_Handler+0x2c>)
   8279c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   827a0:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   827a2:	2000      	movs	r0, #0
   827a4:	4b04      	ldr	r3, [pc, #16]	; (827b8 <SysTick_Handler+0x30>)
   827a6:	4798      	blx	r3
}
   827a8:	bd80      	pop	{r7, pc}
   827aa:	bf00      	nop
   827ac:	00082729 	.word	0x00082729
   827b0:	00083905 	.word	0x00083905
   827b4:	e000ed04 	.word	0xe000ed04
   827b8:	0008273d 	.word	0x0008273d

000827bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   827bc:	b480      	push	{r7}
   827be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   827c0:	4b07      	ldr	r3, [pc, #28]	; (827e0 <vPortSetupTimerInterrupt+0x24>)
   827c2:	4a08      	ldr	r2, [pc, #32]	; (827e4 <vPortSetupTimerInterrupt+0x28>)
   827c4:	6811      	ldr	r1, [r2, #0]
   827c6:	4a08      	ldr	r2, [pc, #32]	; (827e8 <vPortSetupTimerInterrupt+0x2c>)
   827c8:	fba2 0201 	umull	r0, r2, r2, r1
   827cc:	08d2      	lsrs	r2, r2, #3
   827ce:	3a01      	subs	r2, #1
   827d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   827d2:	4b06      	ldr	r3, [pc, #24]	; (827ec <vPortSetupTimerInterrupt+0x30>)
   827d4:	2207      	movs	r2, #7
   827d6:	601a      	str	r2, [r3, #0]
}
   827d8:	46bd      	mov	sp, r7
   827da:	f85d 7b04 	ldr.w	r7, [sp], #4
   827de:	4770      	bx	lr
   827e0:	e000e014 	.word	0xe000e014
   827e4:	20070000 	.word	0x20070000
   827e8:	cccccccd 	.word	0xcccccccd
   827ec:	e000e010 	.word	0xe000e010

000827f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   827f0:	b580      	push	{r7, lr}
   827f2:	b082      	sub	sp, #8
   827f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   827f6:	f3ef 8305 	mrs	r3, IPSR
   827fa:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   827fc:	687b      	ldr	r3, [r7, #4]
   827fe:	2b0f      	cmp	r3, #15
   82800:	d90c      	bls.n	8281c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   82802:	4a0d      	ldr	r2, [pc, #52]	; (82838 <vPortValidateInterruptPriority+0x48>)
   82804:	687b      	ldr	r3, [r7, #4]
   82806:	4413      	add	r3, r2
   82808:	781b      	ldrb	r3, [r3, #0]
   8280a:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   8280c:	4b0b      	ldr	r3, [pc, #44]	; (8283c <vPortValidateInterruptPriority+0x4c>)
   8280e:	781b      	ldrb	r3, [r3, #0]
   82810:	78fa      	ldrb	r2, [r7, #3]
   82812:	429a      	cmp	r2, r3
   82814:	d202      	bcs.n	8281c <vPortValidateInterruptPriority+0x2c>
   82816:	4b0a      	ldr	r3, [pc, #40]	; (82840 <vPortValidateInterruptPriority+0x50>)
   82818:	4798      	blx	r3
   8281a:	e7fe      	b.n	8281a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   8281c:	4b09      	ldr	r3, [pc, #36]	; (82844 <vPortValidateInterruptPriority+0x54>)
   8281e:	681b      	ldr	r3, [r3, #0]
   82820:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82824:	4b08      	ldr	r3, [pc, #32]	; (82848 <vPortValidateInterruptPriority+0x58>)
   82826:	681b      	ldr	r3, [r3, #0]
   82828:	429a      	cmp	r2, r3
   8282a:	d902      	bls.n	82832 <vPortValidateInterruptPriority+0x42>
   8282c:	4b04      	ldr	r3, [pc, #16]	; (82840 <vPortValidateInterruptPriority+0x50>)
   8282e:	4798      	blx	r3
   82830:	e7fe      	b.n	82830 <vPortValidateInterruptPriority+0x40>
	}
   82832:	3708      	adds	r7, #8
   82834:	46bd      	mov	sp, r7
   82836:	bd80      	pop	{r7, pc}
   82838:	e000e3f0 	.word	0xe000e3f0
   8283c:	200704e0 	.word	0x200704e0
   82840:	00082729 	.word	0x00082729
   82844:	e000ed0c 	.word	0xe000ed0c
   82848:	200704e4 	.word	0x200704e4

0008284c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8284c:	b580      	push	{r7, lr}
   8284e:	b086      	sub	sp, #24
   82850:	af00      	add	r7, sp, #0
   82852:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82854:	2300      	movs	r3, #0
   82856:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   82858:	4b4f      	ldr	r3, [pc, #316]	; (82998 <pvPortMalloc+0x14c>)
   8285a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8285c:	4b4f      	ldr	r3, [pc, #316]	; (8299c <pvPortMalloc+0x150>)
   8285e:	681b      	ldr	r3, [r3, #0]
   82860:	2b00      	cmp	r3, #0
   82862:	d101      	bne.n	82868 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   82864:	4b4e      	ldr	r3, [pc, #312]	; (829a0 <pvPortMalloc+0x154>)
   82866:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   82868:	4b4e      	ldr	r3, [pc, #312]	; (829a4 <pvPortMalloc+0x158>)
   8286a:	681a      	ldr	r2, [r3, #0]
   8286c:	687b      	ldr	r3, [r7, #4]
   8286e:	4013      	ands	r3, r2
   82870:	2b00      	cmp	r3, #0
   82872:	d17d      	bne.n	82970 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   82874:	687b      	ldr	r3, [r7, #4]
   82876:	2b00      	cmp	r3, #0
   82878:	d015      	beq.n	828a6 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   8287a:	2308      	movs	r3, #8
   8287c:	687a      	ldr	r2, [r7, #4]
   8287e:	4413      	add	r3, r2
   82880:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   82882:	687b      	ldr	r3, [r7, #4]
   82884:	f003 0307 	and.w	r3, r3, #7
   82888:	2b00      	cmp	r3, #0
   8288a:	d00c      	beq.n	828a6 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8288c:	687b      	ldr	r3, [r7, #4]
   8288e:	f023 0307 	bic.w	r3, r3, #7
   82892:	3308      	adds	r3, #8
   82894:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   82896:	687b      	ldr	r3, [r7, #4]
   82898:	f003 0307 	and.w	r3, r3, #7
   8289c:	2b00      	cmp	r3, #0
   8289e:	d002      	beq.n	828a6 <pvPortMalloc+0x5a>
   828a0:	4b41      	ldr	r3, [pc, #260]	; (829a8 <pvPortMalloc+0x15c>)
   828a2:	4798      	blx	r3
   828a4:	e7fe      	b.n	828a4 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   828a6:	687b      	ldr	r3, [r7, #4]
   828a8:	2b00      	cmp	r3, #0
   828aa:	d061      	beq.n	82970 <pvPortMalloc+0x124>
   828ac:	4b3f      	ldr	r3, [pc, #252]	; (829ac <pvPortMalloc+0x160>)
   828ae:	681b      	ldr	r3, [r3, #0]
   828b0:	687a      	ldr	r2, [r7, #4]
   828b2:	429a      	cmp	r2, r3
   828b4:	d85c      	bhi.n	82970 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   828b6:	4b3e      	ldr	r3, [pc, #248]	; (829b0 <pvPortMalloc+0x164>)
   828b8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   828ba:	4b3d      	ldr	r3, [pc, #244]	; (829b0 <pvPortMalloc+0x164>)
   828bc:	681b      	ldr	r3, [r3, #0]
   828be:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   828c0:	e004      	b.n	828cc <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   828c2:	697b      	ldr	r3, [r7, #20]
   828c4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   828c6:	697b      	ldr	r3, [r7, #20]
   828c8:	681b      	ldr	r3, [r3, #0]
   828ca:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   828cc:	697b      	ldr	r3, [r7, #20]
   828ce:	685a      	ldr	r2, [r3, #4]
   828d0:	687b      	ldr	r3, [r7, #4]
   828d2:	429a      	cmp	r2, r3
   828d4:	d203      	bcs.n	828de <pvPortMalloc+0x92>
   828d6:	697b      	ldr	r3, [r7, #20]
   828d8:	681b      	ldr	r3, [r3, #0]
   828da:	2b00      	cmp	r3, #0
   828dc:	d1f1      	bne.n	828c2 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   828de:	4b2f      	ldr	r3, [pc, #188]	; (8299c <pvPortMalloc+0x150>)
   828e0:	681b      	ldr	r3, [r3, #0]
   828e2:	697a      	ldr	r2, [r7, #20]
   828e4:	429a      	cmp	r2, r3
   828e6:	d043      	beq.n	82970 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   828e8:	693b      	ldr	r3, [r7, #16]
   828ea:	681a      	ldr	r2, [r3, #0]
   828ec:	2308      	movs	r3, #8
   828ee:	4413      	add	r3, r2
   828f0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   828f2:	697b      	ldr	r3, [r7, #20]
   828f4:	681a      	ldr	r2, [r3, #0]
   828f6:	693b      	ldr	r3, [r7, #16]
   828f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   828fa:	697b      	ldr	r3, [r7, #20]
   828fc:	685a      	ldr	r2, [r3, #4]
   828fe:	687b      	ldr	r3, [r7, #4]
   82900:	1ad2      	subs	r2, r2, r3
   82902:	2308      	movs	r3, #8
   82904:	005b      	lsls	r3, r3, #1
   82906:	429a      	cmp	r2, r3
   82908:	d917      	bls.n	8293a <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   8290a:	697a      	ldr	r2, [r7, #20]
   8290c:	687b      	ldr	r3, [r7, #4]
   8290e:	4413      	add	r3, r2
   82910:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   82912:	68bb      	ldr	r3, [r7, #8]
   82914:	f003 0307 	and.w	r3, r3, #7
   82918:	2b00      	cmp	r3, #0
   8291a:	d002      	beq.n	82922 <pvPortMalloc+0xd6>
   8291c:	4b22      	ldr	r3, [pc, #136]	; (829a8 <pvPortMalloc+0x15c>)
   8291e:	4798      	blx	r3
   82920:	e7fe      	b.n	82920 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   82922:	697b      	ldr	r3, [r7, #20]
   82924:	685a      	ldr	r2, [r3, #4]
   82926:	687b      	ldr	r3, [r7, #4]
   82928:	1ad2      	subs	r2, r2, r3
   8292a:	68bb      	ldr	r3, [r7, #8]
   8292c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   8292e:	697b      	ldr	r3, [r7, #20]
   82930:	687a      	ldr	r2, [r7, #4]
   82932:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   82934:	68b8      	ldr	r0, [r7, #8]
   82936:	4b1f      	ldr	r3, [pc, #124]	; (829b4 <pvPortMalloc+0x168>)
   82938:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   8293a:	4b1c      	ldr	r3, [pc, #112]	; (829ac <pvPortMalloc+0x160>)
   8293c:	681a      	ldr	r2, [r3, #0]
   8293e:	697b      	ldr	r3, [r7, #20]
   82940:	685b      	ldr	r3, [r3, #4]
   82942:	1ad2      	subs	r2, r2, r3
   82944:	4b19      	ldr	r3, [pc, #100]	; (829ac <pvPortMalloc+0x160>)
   82946:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   82948:	4b18      	ldr	r3, [pc, #96]	; (829ac <pvPortMalloc+0x160>)
   8294a:	681a      	ldr	r2, [r3, #0]
   8294c:	4b1a      	ldr	r3, [pc, #104]	; (829b8 <pvPortMalloc+0x16c>)
   8294e:	681b      	ldr	r3, [r3, #0]
   82950:	429a      	cmp	r2, r3
   82952:	d203      	bcs.n	8295c <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   82954:	4b15      	ldr	r3, [pc, #84]	; (829ac <pvPortMalloc+0x160>)
   82956:	681a      	ldr	r2, [r3, #0]
   82958:	4b17      	ldr	r3, [pc, #92]	; (829b8 <pvPortMalloc+0x16c>)
   8295a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   8295c:	697b      	ldr	r3, [r7, #20]
   8295e:	685a      	ldr	r2, [r3, #4]
   82960:	4b10      	ldr	r3, [pc, #64]	; (829a4 <pvPortMalloc+0x158>)
   82962:	681b      	ldr	r3, [r3, #0]
   82964:	431a      	orrs	r2, r3
   82966:	697b      	ldr	r3, [r7, #20]
   82968:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   8296a:	697b      	ldr	r3, [r7, #20]
   8296c:	2200      	movs	r2, #0
   8296e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   82970:	4b12      	ldr	r3, [pc, #72]	; (829bc <pvPortMalloc+0x170>)
   82972:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   82974:	68fb      	ldr	r3, [r7, #12]
   82976:	2b00      	cmp	r3, #0
   82978:	d101      	bne.n	8297e <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   8297a:	4b11      	ldr	r3, [pc, #68]	; (829c0 <pvPortMalloc+0x174>)
   8297c:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8297e:	68fb      	ldr	r3, [r7, #12]
   82980:	f003 0307 	and.w	r3, r3, #7
   82984:	2b00      	cmp	r3, #0
   82986:	d002      	beq.n	8298e <pvPortMalloc+0x142>
   82988:	4b07      	ldr	r3, [pc, #28]	; (829a8 <pvPortMalloc+0x15c>)
   8298a:	4798      	blx	r3
   8298c:	e7fe      	b.n	8298c <pvPortMalloc+0x140>
	return pvReturn;
   8298e:	68fb      	ldr	r3, [r7, #12]
}
   82990:	4618      	mov	r0, r3
   82992:	3718      	adds	r7, #24
   82994:	46bd      	mov	sp, r7
   82996:	bd80      	pop	{r7, pc}
   82998:	00083799 	.word	0x00083799
   8299c:	2007a4f0 	.word	0x2007a4f0
   829a0:	00082a69 	.word	0x00082a69
   829a4:	2007a4fc 	.word	0x2007a4fc
   829a8:	00082729 	.word	0x00082729
   829ac:	2007a4f4 	.word	0x2007a4f4
   829b0:	2007a4e8 	.word	0x2007a4e8
   829b4:	00082b2d 	.word	0x00082b2d
   829b8:	2007a4f8 	.word	0x2007a4f8
   829bc:	000837b5 	.word	0x000837b5
   829c0:	00085241 	.word	0x00085241

000829c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   829c4:	b580      	push	{r7, lr}
   829c6:	b084      	sub	sp, #16
   829c8:	af00      	add	r7, sp, #0
   829ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   829cc:	687b      	ldr	r3, [r7, #4]
   829ce:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   829d0:	687b      	ldr	r3, [r7, #4]
   829d2:	2b00      	cmp	r3, #0
   829d4:	d038      	beq.n	82a48 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   829d6:	2308      	movs	r3, #8
   829d8:	425b      	negs	r3, r3
   829da:	68fa      	ldr	r2, [r7, #12]
   829dc:	4413      	add	r3, r2
   829de:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   829e0:	68fb      	ldr	r3, [r7, #12]
   829e2:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   829e4:	68bb      	ldr	r3, [r7, #8]
   829e6:	685a      	ldr	r2, [r3, #4]
   829e8:	4b19      	ldr	r3, [pc, #100]	; (82a50 <vPortFree+0x8c>)
   829ea:	681b      	ldr	r3, [r3, #0]
   829ec:	4013      	ands	r3, r2
   829ee:	2b00      	cmp	r3, #0
   829f0:	d102      	bne.n	829f8 <vPortFree+0x34>
   829f2:	4b18      	ldr	r3, [pc, #96]	; (82a54 <vPortFree+0x90>)
   829f4:	4798      	blx	r3
   829f6:	e7fe      	b.n	829f6 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   829f8:	68bb      	ldr	r3, [r7, #8]
   829fa:	681b      	ldr	r3, [r3, #0]
   829fc:	2b00      	cmp	r3, #0
   829fe:	d002      	beq.n	82a06 <vPortFree+0x42>
   82a00:	4b14      	ldr	r3, [pc, #80]	; (82a54 <vPortFree+0x90>)
   82a02:	4798      	blx	r3
   82a04:	e7fe      	b.n	82a04 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   82a06:	68bb      	ldr	r3, [r7, #8]
   82a08:	685a      	ldr	r2, [r3, #4]
   82a0a:	4b11      	ldr	r3, [pc, #68]	; (82a50 <vPortFree+0x8c>)
   82a0c:	681b      	ldr	r3, [r3, #0]
   82a0e:	4013      	ands	r3, r2
   82a10:	2b00      	cmp	r3, #0
   82a12:	d019      	beq.n	82a48 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   82a14:	68bb      	ldr	r3, [r7, #8]
   82a16:	681b      	ldr	r3, [r3, #0]
   82a18:	2b00      	cmp	r3, #0
   82a1a:	d115      	bne.n	82a48 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   82a1c:	68bb      	ldr	r3, [r7, #8]
   82a1e:	685a      	ldr	r2, [r3, #4]
   82a20:	4b0b      	ldr	r3, [pc, #44]	; (82a50 <vPortFree+0x8c>)
   82a22:	681b      	ldr	r3, [r3, #0]
   82a24:	43db      	mvns	r3, r3
   82a26:	401a      	ands	r2, r3
   82a28:	68bb      	ldr	r3, [r7, #8]
   82a2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   82a2c:	4b0a      	ldr	r3, [pc, #40]	; (82a58 <vPortFree+0x94>)
   82a2e:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   82a30:	68bb      	ldr	r3, [r7, #8]
   82a32:	685a      	ldr	r2, [r3, #4]
   82a34:	4b09      	ldr	r3, [pc, #36]	; (82a5c <vPortFree+0x98>)
   82a36:	681b      	ldr	r3, [r3, #0]
   82a38:	441a      	add	r2, r3
   82a3a:	4b08      	ldr	r3, [pc, #32]	; (82a5c <vPortFree+0x98>)
   82a3c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   82a3e:	68b8      	ldr	r0, [r7, #8]
   82a40:	4b07      	ldr	r3, [pc, #28]	; (82a60 <vPortFree+0x9c>)
   82a42:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   82a44:	4b07      	ldr	r3, [pc, #28]	; (82a64 <vPortFree+0xa0>)
   82a46:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   82a48:	3710      	adds	r7, #16
   82a4a:	46bd      	mov	sp, r7
   82a4c:	bd80      	pop	{r7, pc}
   82a4e:	bf00      	nop
   82a50:	2007a4fc 	.word	0x2007a4fc
   82a54:	00082729 	.word	0x00082729
   82a58:	00083799 	.word	0x00083799
   82a5c:	2007a4f4 	.word	0x2007a4f4
   82a60:	00082b2d 	.word	0x00082b2d
   82a64:	000837b5 	.word	0x000837b5

00082a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   82a68:	b480      	push	{r7}
   82a6a:	b085      	sub	sp, #20
   82a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   82a6e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   82a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   82a74:	4b27      	ldr	r3, [pc, #156]	; (82b14 <prvHeapInit+0xac>)
   82a76:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   82a78:	68fb      	ldr	r3, [r7, #12]
   82a7a:	f003 0307 	and.w	r3, r3, #7
   82a7e:	2b00      	cmp	r3, #0
   82a80:	d00c      	beq.n	82a9c <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   82a82:	68fb      	ldr	r3, [r7, #12]
   82a84:	3307      	adds	r3, #7
   82a86:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   82a88:	68fb      	ldr	r3, [r7, #12]
   82a8a:	f023 0307 	bic.w	r3, r3, #7
   82a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   82a90:	68ba      	ldr	r2, [r7, #8]
   82a92:	68fb      	ldr	r3, [r7, #12]
   82a94:	1ad2      	subs	r2, r2, r3
   82a96:	4b1f      	ldr	r3, [pc, #124]	; (82b14 <prvHeapInit+0xac>)
   82a98:	4413      	add	r3, r2
   82a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   82a9c:	68fb      	ldr	r3, [r7, #12]
   82a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   82aa0:	4b1d      	ldr	r3, [pc, #116]	; (82b18 <prvHeapInit+0xb0>)
   82aa2:	687a      	ldr	r2, [r7, #4]
   82aa4:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   82aa6:	4b1c      	ldr	r3, [pc, #112]	; (82b18 <prvHeapInit+0xb0>)
   82aa8:	2200      	movs	r2, #0
   82aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   82aac:	687a      	ldr	r2, [r7, #4]
   82aae:	68bb      	ldr	r3, [r7, #8]
   82ab0:	4413      	add	r3, r2
   82ab2:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   82ab4:	2308      	movs	r3, #8
   82ab6:	68fa      	ldr	r2, [r7, #12]
   82ab8:	1ad3      	subs	r3, r2, r3
   82aba:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   82abc:	68fb      	ldr	r3, [r7, #12]
   82abe:	f023 0307 	bic.w	r3, r3, #7
   82ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   82ac4:	68fa      	ldr	r2, [r7, #12]
   82ac6:	4b15      	ldr	r3, [pc, #84]	; (82b1c <prvHeapInit+0xb4>)
   82ac8:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   82aca:	4b14      	ldr	r3, [pc, #80]	; (82b1c <prvHeapInit+0xb4>)
   82acc:	681b      	ldr	r3, [r3, #0]
   82ace:	2200      	movs	r2, #0
   82ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   82ad2:	4b12      	ldr	r3, [pc, #72]	; (82b1c <prvHeapInit+0xb4>)
   82ad4:	681b      	ldr	r3, [r3, #0]
   82ad6:	2200      	movs	r2, #0
   82ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   82ada:	687b      	ldr	r3, [r7, #4]
   82adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   82ade:	683b      	ldr	r3, [r7, #0]
   82ae0:	68fa      	ldr	r2, [r7, #12]
   82ae2:	1ad2      	subs	r2, r2, r3
   82ae4:	683b      	ldr	r3, [r7, #0]
   82ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   82ae8:	4b0c      	ldr	r3, [pc, #48]	; (82b1c <prvHeapInit+0xb4>)
   82aea:	681a      	ldr	r2, [r3, #0]
   82aec:	683b      	ldr	r3, [r7, #0]
   82aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   82af0:	683b      	ldr	r3, [r7, #0]
   82af2:	685a      	ldr	r2, [r3, #4]
   82af4:	4b0a      	ldr	r3, [pc, #40]	; (82b20 <prvHeapInit+0xb8>)
   82af6:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   82af8:	683b      	ldr	r3, [r7, #0]
   82afa:	685a      	ldr	r2, [r3, #4]
   82afc:	4b09      	ldr	r3, [pc, #36]	; (82b24 <prvHeapInit+0xbc>)
   82afe:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   82b00:	4b09      	ldr	r3, [pc, #36]	; (82b28 <prvHeapInit+0xc0>)
   82b02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   82b06:	601a      	str	r2, [r3, #0]
}
   82b08:	3714      	adds	r7, #20
   82b0a:	46bd      	mov	sp, r7
   82b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b10:	4770      	bx	lr
   82b12:	bf00      	nop
   82b14:	200704e8 	.word	0x200704e8
   82b18:	2007a4e8 	.word	0x2007a4e8
   82b1c:	2007a4f0 	.word	0x2007a4f0
   82b20:	2007a4f8 	.word	0x2007a4f8
   82b24:	2007a4f4 	.word	0x2007a4f4
   82b28:	2007a4fc 	.word	0x2007a4fc

00082b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   82b2c:	b480      	push	{r7}
   82b2e:	b085      	sub	sp, #20
   82b30:	af00      	add	r7, sp, #0
   82b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   82b34:	4b27      	ldr	r3, [pc, #156]	; (82bd4 <prvInsertBlockIntoFreeList+0xa8>)
   82b36:	60fb      	str	r3, [r7, #12]
   82b38:	e002      	b.n	82b40 <prvInsertBlockIntoFreeList+0x14>
   82b3a:	68fb      	ldr	r3, [r7, #12]
   82b3c:	681b      	ldr	r3, [r3, #0]
   82b3e:	60fb      	str	r3, [r7, #12]
   82b40:	68fb      	ldr	r3, [r7, #12]
   82b42:	681a      	ldr	r2, [r3, #0]
   82b44:	687b      	ldr	r3, [r7, #4]
   82b46:	429a      	cmp	r2, r3
   82b48:	d3f7      	bcc.n	82b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   82b4a:	68fb      	ldr	r3, [r7, #12]
   82b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   82b4e:	68fb      	ldr	r3, [r7, #12]
   82b50:	685b      	ldr	r3, [r3, #4]
   82b52:	68ba      	ldr	r2, [r7, #8]
   82b54:	441a      	add	r2, r3
   82b56:	687b      	ldr	r3, [r7, #4]
   82b58:	429a      	cmp	r2, r3
   82b5a:	d108      	bne.n	82b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   82b5c:	68fb      	ldr	r3, [r7, #12]
   82b5e:	685a      	ldr	r2, [r3, #4]
   82b60:	687b      	ldr	r3, [r7, #4]
   82b62:	685b      	ldr	r3, [r3, #4]
   82b64:	441a      	add	r2, r3
   82b66:	68fb      	ldr	r3, [r7, #12]
   82b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   82b6a:	68fb      	ldr	r3, [r7, #12]
   82b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   82b6e:	687b      	ldr	r3, [r7, #4]
   82b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   82b72:	687b      	ldr	r3, [r7, #4]
   82b74:	685b      	ldr	r3, [r3, #4]
   82b76:	68ba      	ldr	r2, [r7, #8]
   82b78:	441a      	add	r2, r3
   82b7a:	68fb      	ldr	r3, [r7, #12]
   82b7c:	681b      	ldr	r3, [r3, #0]
   82b7e:	429a      	cmp	r2, r3
   82b80:	d118      	bne.n	82bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   82b82:	68fb      	ldr	r3, [r7, #12]
   82b84:	681a      	ldr	r2, [r3, #0]
   82b86:	4b14      	ldr	r3, [pc, #80]	; (82bd8 <prvInsertBlockIntoFreeList+0xac>)
   82b88:	681b      	ldr	r3, [r3, #0]
   82b8a:	429a      	cmp	r2, r3
   82b8c:	d00d      	beq.n	82baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   82b8e:	687b      	ldr	r3, [r7, #4]
   82b90:	685a      	ldr	r2, [r3, #4]
   82b92:	68fb      	ldr	r3, [r7, #12]
   82b94:	681b      	ldr	r3, [r3, #0]
   82b96:	685b      	ldr	r3, [r3, #4]
   82b98:	441a      	add	r2, r3
   82b9a:	687b      	ldr	r3, [r7, #4]
   82b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   82b9e:	68fb      	ldr	r3, [r7, #12]
   82ba0:	681b      	ldr	r3, [r3, #0]
   82ba2:	681a      	ldr	r2, [r3, #0]
   82ba4:	687b      	ldr	r3, [r7, #4]
   82ba6:	601a      	str	r2, [r3, #0]
   82ba8:	e008      	b.n	82bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   82baa:	4b0b      	ldr	r3, [pc, #44]	; (82bd8 <prvInsertBlockIntoFreeList+0xac>)
   82bac:	681a      	ldr	r2, [r3, #0]
   82bae:	687b      	ldr	r3, [r7, #4]
   82bb0:	601a      	str	r2, [r3, #0]
   82bb2:	e003      	b.n	82bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   82bb4:	68fb      	ldr	r3, [r7, #12]
   82bb6:	681a      	ldr	r2, [r3, #0]
   82bb8:	687b      	ldr	r3, [r7, #4]
   82bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   82bbc:	68fa      	ldr	r2, [r7, #12]
   82bbe:	687b      	ldr	r3, [r7, #4]
   82bc0:	429a      	cmp	r2, r3
   82bc2:	d002      	beq.n	82bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   82bc4:	68fb      	ldr	r3, [r7, #12]
   82bc6:	687a      	ldr	r2, [r7, #4]
   82bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   82bca:	3714      	adds	r7, #20
   82bcc:	46bd      	mov	sp, r7
   82bce:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bd2:	4770      	bx	lr
   82bd4:	2007a4e8 	.word	0x2007a4e8
   82bd8:	2007a4f0 	.word	0x2007a4f0

00082bdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   82bdc:	b580      	push	{r7, lr}
   82bde:	b084      	sub	sp, #16
   82be0:	af00      	add	r7, sp, #0
   82be2:	6078      	str	r0, [r7, #4]
   82be4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82be6:	687b      	ldr	r3, [r7, #4]
   82be8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   82bea:	68fb      	ldr	r3, [r7, #12]
   82bec:	2b00      	cmp	r3, #0
   82bee:	d102      	bne.n	82bf6 <xQueueGenericReset+0x1a>
   82bf0:	4b26      	ldr	r3, [pc, #152]	; (82c8c <xQueueGenericReset+0xb0>)
   82bf2:	4798      	blx	r3
   82bf4:	e7fe      	b.n	82bf4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   82bf6:	4b26      	ldr	r3, [pc, #152]	; (82c90 <xQueueGenericReset+0xb4>)
   82bf8:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   82bfa:	68fb      	ldr	r3, [r7, #12]
   82bfc:	681a      	ldr	r2, [r3, #0]
   82bfe:	68fb      	ldr	r3, [r7, #12]
   82c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82c02:	68f9      	ldr	r1, [r7, #12]
   82c04:	6c09      	ldr	r1, [r1, #64]	; 0x40
   82c06:	fb01 f303 	mul.w	r3, r1, r3
   82c0a:	441a      	add	r2, r3
   82c0c:	68fb      	ldr	r3, [r7, #12]
   82c0e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   82c10:	68fb      	ldr	r3, [r7, #12]
   82c12:	2200      	movs	r2, #0
   82c14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   82c16:	68fb      	ldr	r3, [r7, #12]
   82c18:	681a      	ldr	r2, [r3, #0]
   82c1a:	68fb      	ldr	r3, [r7, #12]
   82c1c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   82c1e:	68fb      	ldr	r3, [r7, #12]
   82c20:	681a      	ldr	r2, [r3, #0]
   82c22:	68fb      	ldr	r3, [r7, #12]
   82c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82c26:	3b01      	subs	r3, #1
   82c28:	68f9      	ldr	r1, [r7, #12]
   82c2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
   82c2c:	fb01 f303 	mul.w	r3, r1, r3
   82c30:	441a      	add	r2, r3
   82c32:	68fb      	ldr	r3, [r7, #12]
   82c34:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   82c36:	68fb      	ldr	r3, [r7, #12]
   82c38:	f04f 32ff 	mov.w	r2, #4294967295
   82c3c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   82c3e:	68fb      	ldr	r3, [r7, #12]
   82c40:	f04f 32ff 	mov.w	r2, #4294967295
   82c44:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   82c46:	683b      	ldr	r3, [r7, #0]
   82c48:	2b00      	cmp	r3, #0
   82c4a:	d10e      	bne.n	82c6a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82c4c:	68fb      	ldr	r3, [r7, #12]
   82c4e:	691b      	ldr	r3, [r3, #16]
   82c50:	2b00      	cmp	r3, #0
   82c52:	d014      	beq.n	82c7e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   82c54:	68fb      	ldr	r3, [r7, #12]
   82c56:	3310      	adds	r3, #16
   82c58:	4618      	mov	r0, r3
   82c5a:	4b0e      	ldr	r3, [pc, #56]	; (82c94 <xQueueGenericReset+0xb8>)
   82c5c:	4798      	blx	r3
   82c5e:	4603      	mov	r3, r0
   82c60:	2b01      	cmp	r3, #1
   82c62:	d10c      	bne.n	82c7e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   82c64:	4b0c      	ldr	r3, [pc, #48]	; (82c98 <xQueueGenericReset+0xbc>)
   82c66:	4798      	blx	r3
   82c68:	e009      	b.n	82c7e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   82c6a:	68fb      	ldr	r3, [r7, #12]
   82c6c:	3310      	adds	r3, #16
   82c6e:	4618      	mov	r0, r3
   82c70:	4b0a      	ldr	r3, [pc, #40]	; (82c9c <xQueueGenericReset+0xc0>)
   82c72:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   82c74:	68fb      	ldr	r3, [r7, #12]
   82c76:	3324      	adds	r3, #36	; 0x24
   82c78:	4618      	mov	r0, r3
   82c7a:	4b08      	ldr	r3, [pc, #32]	; (82c9c <xQueueGenericReset+0xc0>)
   82c7c:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   82c7e:	4b08      	ldr	r3, [pc, #32]	; (82ca0 <xQueueGenericReset+0xc4>)
   82c80:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   82c82:	2301      	movs	r3, #1
}
   82c84:	4618      	mov	r0, r3
   82c86:	3710      	adds	r7, #16
   82c88:	46bd      	mov	sp, r7
   82c8a:	bd80      	pop	{r7, pc}
   82c8c:	00082729 	.word	0x00082729
   82c90:	000826ad 	.word	0x000826ad
   82c94:	00083c9d 	.word	0x00083c9d
   82c98:	0008268d 	.word	0x0008268d
   82c9c:	000823a1 	.word	0x000823a1
   82ca0:	000826f1 	.word	0x000826f1

00082ca4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   82ca4:	b580      	push	{r7, lr}
   82ca6:	b088      	sub	sp, #32
   82ca8:	af00      	add	r7, sp, #0
   82caa:	60f8      	str	r0, [r7, #12]
   82cac:	60b9      	str	r1, [r7, #8]
   82cae:	4613      	mov	r3, r2
   82cb0:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   82cb2:	2300      	movs	r3, #0
   82cb4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   82cb6:	68fb      	ldr	r3, [r7, #12]
   82cb8:	2b00      	cmp	r3, #0
   82cba:	d026      	beq.n	82d0a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   82cbc:	204c      	movs	r0, #76	; 0x4c
   82cbe:	4b18      	ldr	r3, [pc, #96]	; (82d20 <xQueueGenericCreate+0x7c>)
   82cc0:	4798      	blx	r3
   82cc2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   82cc4:	69bb      	ldr	r3, [r7, #24]
   82cc6:	2b00      	cmp	r3, #0
   82cc8:	d01f      	beq.n	82d0a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82cca:	68fb      	ldr	r3, [r7, #12]
   82ccc:	68ba      	ldr	r2, [r7, #8]
   82cce:	fb02 f303 	mul.w	r3, r2, r3
   82cd2:	3301      	adds	r3, #1
   82cd4:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   82cd6:	6978      	ldr	r0, [r7, #20]
   82cd8:	4b11      	ldr	r3, [pc, #68]	; (82d20 <xQueueGenericCreate+0x7c>)
   82cda:	4798      	blx	r3
   82cdc:	4602      	mov	r2, r0
   82cde:	69bb      	ldr	r3, [r7, #24]
   82ce0:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   82ce2:	69bb      	ldr	r3, [r7, #24]
   82ce4:	681b      	ldr	r3, [r3, #0]
   82ce6:	2b00      	cmp	r3, #0
   82ce8:	d00c      	beq.n	82d04 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82cea:	69bb      	ldr	r3, [r7, #24]
   82cec:	68fa      	ldr	r2, [r7, #12]
   82cee:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   82cf0:	69bb      	ldr	r3, [r7, #24]
   82cf2:	68ba      	ldr	r2, [r7, #8]
   82cf4:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   82cf6:	69b8      	ldr	r0, [r7, #24]
   82cf8:	2101      	movs	r1, #1
   82cfa:	4b0a      	ldr	r3, [pc, #40]	; (82d24 <xQueueGenericCreate+0x80>)
   82cfc:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   82cfe:	69bb      	ldr	r3, [r7, #24]
   82d00:	61fb      	str	r3, [r7, #28]
   82d02:	e002      	b.n	82d0a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   82d04:	69b8      	ldr	r0, [r7, #24]
   82d06:	4b08      	ldr	r3, [pc, #32]	; (82d28 <xQueueGenericCreate+0x84>)
   82d08:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   82d0a:	69fb      	ldr	r3, [r7, #28]
   82d0c:	2b00      	cmp	r3, #0
   82d0e:	d102      	bne.n	82d16 <xQueueGenericCreate+0x72>
   82d10:	4b06      	ldr	r3, [pc, #24]	; (82d2c <xQueueGenericCreate+0x88>)
   82d12:	4798      	blx	r3
   82d14:	e7fe      	b.n	82d14 <xQueueGenericCreate+0x70>

	return xReturn;
   82d16:	69fb      	ldr	r3, [r7, #28]
}
   82d18:	4618      	mov	r0, r3
   82d1a:	3720      	adds	r7, #32
   82d1c:	46bd      	mov	sp, r7
   82d1e:	bd80      	pop	{r7, pc}
   82d20:	0008284d 	.word	0x0008284d
   82d24:	00082bdd 	.word	0x00082bdd
   82d28:	000829c5 	.word	0x000829c5
   82d2c:	00082729 	.word	0x00082729

00082d30 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   82d30:	b580      	push	{r7, lr}
   82d32:	b08a      	sub	sp, #40	; 0x28
   82d34:	af00      	add	r7, sp, #0
   82d36:	60f8      	str	r0, [r7, #12]
   82d38:	60b9      	str	r1, [r7, #8]
   82d3a:	607a      	str	r2, [r7, #4]
   82d3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   82d3e:	2300      	movs	r3, #0
   82d40:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82d42:	68fb      	ldr	r3, [r7, #12]
   82d44:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   82d46:	6a3b      	ldr	r3, [r7, #32]
   82d48:	2b00      	cmp	r3, #0
   82d4a:	d102      	bne.n	82d52 <xQueueGenericSend+0x22>
   82d4c:	4b5b      	ldr	r3, [pc, #364]	; (82ebc <xQueueGenericSend+0x18c>)
   82d4e:	4798      	blx	r3
   82d50:	e7fe      	b.n	82d50 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82d52:	68bb      	ldr	r3, [r7, #8]
   82d54:	2b00      	cmp	r3, #0
   82d56:	d103      	bne.n	82d60 <xQueueGenericSend+0x30>
   82d58:	6a3b      	ldr	r3, [r7, #32]
   82d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82d5c:	2b00      	cmp	r3, #0
   82d5e:	d101      	bne.n	82d64 <xQueueGenericSend+0x34>
   82d60:	2301      	movs	r3, #1
   82d62:	e000      	b.n	82d66 <xQueueGenericSend+0x36>
   82d64:	2300      	movs	r3, #0
   82d66:	2b00      	cmp	r3, #0
   82d68:	d102      	bne.n	82d70 <xQueueGenericSend+0x40>
   82d6a:	4b54      	ldr	r3, [pc, #336]	; (82ebc <xQueueGenericSend+0x18c>)
   82d6c:	4798      	blx	r3
   82d6e:	e7fe      	b.n	82d6e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   82d70:	683b      	ldr	r3, [r7, #0]
   82d72:	2b02      	cmp	r3, #2
   82d74:	d103      	bne.n	82d7e <xQueueGenericSend+0x4e>
   82d76:	6a3b      	ldr	r3, [r7, #32]
   82d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82d7a:	2b01      	cmp	r3, #1
   82d7c:	d101      	bne.n	82d82 <xQueueGenericSend+0x52>
   82d7e:	2301      	movs	r3, #1
   82d80:	e000      	b.n	82d84 <xQueueGenericSend+0x54>
   82d82:	2300      	movs	r3, #0
   82d84:	2b00      	cmp	r3, #0
   82d86:	d102      	bne.n	82d8e <xQueueGenericSend+0x5e>
   82d88:	4b4c      	ldr	r3, [pc, #304]	; (82ebc <xQueueGenericSend+0x18c>)
   82d8a:	4798      	blx	r3
   82d8c:	e7fe      	b.n	82d8c <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   82d8e:	4b4c      	ldr	r3, [pc, #304]	; (82ec0 <xQueueGenericSend+0x190>)
   82d90:	4798      	blx	r3
   82d92:	4603      	mov	r3, r0
   82d94:	2b00      	cmp	r3, #0
   82d96:	d102      	bne.n	82d9e <xQueueGenericSend+0x6e>
   82d98:	687b      	ldr	r3, [r7, #4]
   82d9a:	2b00      	cmp	r3, #0
   82d9c:	d101      	bne.n	82da2 <xQueueGenericSend+0x72>
   82d9e:	2301      	movs	r3, #1
   82da0:	e000      	b.n	82da4 <xQueueGenericSend+0x74>
   82da2:	2300      	movs	r3, #0
   82da4:	2b00      	cmp	r3, #0
   82da6:	d102      	bne.n	82dae <xQueueGenericSend+0x7e>
   82da8:	4b44      	ldr	r3, [pc, #272]	; (82ebc <xQueueGenericSend+0x18c>)
   82daa:	4798      	blx	r3
   82dac:	e7fe      	b.n	82dac <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   82dae:	4b45      	ldr	r3, [pc, #276]	; (82ec4 <xQueueGenericSend+0x194>)
   82db0:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   82db2:	6a3b      	ldr	r3, [r7, #32]
   82db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82db6:	6a3b      	ldr	r3, [r7, #32]
   82db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82dba:	429a      	cmp	r2, r3
   82dbc:	d302      	bcc.n	82dc4 <xQueueGenericSend+0x94>
   82dbe:	683b      	ldr	r3, [r7, #0]
   82dc0:	2b02      	cmp	r3, #2
   82dc2:	d11d      	bne.n	82e00 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82dc4:	6a38      	ldr	r0, [r7, #32]
   82dc6:	68b9      	ldr	r1, [r7, #8]
   82dc8:	683a      	ldr	r2, [r7, #0]
   82dca:	4b3f      	ldr	r3, [pc, #252]	; (82ec8 <xQueueGenericSend+0x198>)
   82dcc:	4798      	blx	r3
   82dce:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82dd0:	6a3b      	ldr	r3, [r7, #32]
   82dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82dd4:	2b00      	cmp	r3, #0
   82dd6:	d00a      	beq.n	82dee <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   82dd8:	6a3b      	ldr	r3, [r7, #32]
   82dda:	3324      	adds	r3, #36	; 0x24
   82ddc:	4618      	mov	r0, r3
   82dde:	4b3b      	ldr	r3, [pc, #236]	; (82ecc <xQueueGenericSend+0x19c>)
   82de0:	4798      	blx	r3
   82de2:	4603      	mov	r3, r0
   82de4:	2b01      	cmp	r3, #1
   82de6:	d107      	bne.n	82df8 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   82de8:	4b39      	ldr	r3, [pc, #228]	; (82ed0 <xQueueGenericSend+0x1a0>)
   82dea:	4798      	blx	r3
   82dec:	e004      	b.n	82df8 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   82dee:	69fb      	ldr	r3, [r7, #28]
   82df0:	2b00      	cmp	r3, #0
   82df2:	d001      	beq.n	82df8 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   82df4:	4b36      	ldr	r3, [pc, #216]	; (82ed0 <xQueueGenericSend+0x1a0>)
   82df6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   82df8:	4b36      	ldr	r3, [pc, #216]	; (82ed4 <xQueueGenericSend+0x1a4>)
   82dfa:	4798      	blx	r3
				return pdPASS;
   82dfc:	2301      	movs	r3, #1
   82dfe:	e059      	b.n	82eb4 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   82e00:	687b      	ldr	r3, [r7, #4]
   82e02:	2b00      	cmp	r3, #0
   82e04:	d103      	bne.n	82e0e <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82e06:	4b33      	ldr	r3, [pc, #204]	; (82ed4 <xQueueGenericSend+0x1a4>)
   82e08:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   82e0a:	2300      	movs	r3, #0
   82e0c:	e052      	b.n	82eb4 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   82e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82e10:	2b00      	cmp	r3, #0
   82e12:	d106      	bne.n	82e22 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82e14:	f107 0314 	add.w	r3, r7, #20
   82e18:	4618      	mov	r0, r3
   82e1a:	4b2f      	ldr	r3, [pc, #188]	; (82ed8 <xQueueGenericSend+0x1a8>)
   82e1c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   82e1e:	2301      	movs	r3, #1
   82e20:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   82e22:	4b2c      	ldr	r3, [pc, #176]	; (82ed4 <xQueueGenericSend+0x1a4>)
   82e24:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82e26:	4b2d      	ldr	r3, [pc, #180]	; (82edc <xQueueGenericSend+0x1ac>)
   82e28:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82e2a:	4b26      	ldr	r3, [pc, #152]	; (82ec4 <xQueueGenericSend+0x194>)
   82e2c:	4798      	blx	r3
   82e2e:	6a3b      	ldr	r3, [r7, #32]
   82e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82e32:	f1b3 3fff 	cmp.w	r3, #4294967295
   82e36:	d102      	bne.n	82e3e <xQueueGenericSend+0x10e>
   82e38:	6a3b      	ldr	r3, [r7, #32]
   82e3a:	2200      	movs	r2, #0
   82e3c:	645a      	str	r2, [r3, #68]	; 0x44
   82e3e:	6a3b      	ldr	r3, [r7, #32]
   82e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82e42:	f1b3 3fff 	cmp.w	r3, #4294967295
   82e46:	d102      	bne.n	82e4e <xQueueGenericSend+0x11e>
   82e48:	6a3b      	ldr	r3, [r7, #32]
   82e4a:	2200      	movs	r2, #0
   82e4c:	649a      	str	r2, [r3, #72]	; 0x48
   82e4e:	4b21      	ldr	r3, [pc, #132]	; (82ed4 <xQueueGenericSend+0x1a4>)
   82e50:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82e52:	f107 0214 	add.w	r2, r7, #20
   82e56:	1d3b      	adds	r3, r7, #4
   82e58:	4610      	mov	r0, r2
   82e5a:	4619      	mov	r1, r3
   82e5c:	4b20      	ldr	r3, [pc, #128]	; (82ee0 <xQueueGenericSend+0x1b0>)
   82e5e:	4798      	blx	r3
   82e60:	4603      	mov	r3, r0
   82e62:	2b00      	cmp	r3, #0
   82e64:	d11e      	bne.n	82ea4 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   82e66:	6a38      	ldr	r0, [r7, #32]
   82e68:	4b1e      	ldr	r3, [pc, #120]	; (82ee4 <xQueueGenericSend+0x1b4>)
   82e6a:	4798      	blx	r3
   82e6c:	4603      	mov	r3, r0
   82e6e:	2b00      	cmp	r3, #0
   82e70:	d012      	beq.n	82e98 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   82e72:	6a3b      	ldr	r3, [r7, #32]
   82e74:	f103 0210 	add.w	r2, r3, #16
   82e78:	687b      	ldr	r3, [r7, #4]
   82e7a:	4610      	mov	r0, r2
   82e7c:	4619      	mov	r1, r3
   82e7e:	4b1a      	ldr	r3, [pc, #104]	; (82ee8 <xQueueGenericSend+0x1b8>)
   82e80:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   82e82:	6a38      	ldr	r0, [r7, #32]
   82e84:	4b19      	ldr	r3, [pc, #100]	; (82eec <xQueueGenericSend+0x1bc>)
   82e86:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   82e88:	4b19      	ldr	r3, [pc, #100]	; (82ef0 <xQueueGenericSend+0x1c0>)
   82e8a:	4798      	blx	r3
   82e8c:	4603      	mov	r3, r0
   82e8e:	2b00      	cmp	r3, #0
   82e90:	d10f      	bne.n	82eb2 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   82e92:	4b0f      	ldr	r3, [pc, #60]	; (82ed0 <xQueueGenericSend+0x1a0>)
   82e94:	4798      	blx	r3
   82e96:	e00c      	b.n	82eb2 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   82e98:	6a38      	ldr	r0, [r7, #32]
   82e9a:	4b14      	ldr	r3, [pc, #80]	; (82eec <xQueueGenericSend+0x1bc>)
   82e9c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   82e9e:	4b14      	ldr	r3, [pc, #80]	; (82ef0 <xQueueGenericSend+0x1c0>)
   82ea0:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   82ea2:	e784      	b.n	82dae <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   82ea4:	6a38      	ldr	r0, [r7, #32]
   82ea6:	4b11      	ldr	r3, [pc, #68]	; (82eec <xQueueGenericSend+0x1bc>)
   82ea8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82eaa:	4b11      	ldr	r3, [pc, #68]	; (82ef0 <xQueueGenericSend+0x1c0>)
   82eac:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   82eae:	2300      	movs	r3, #0
   82eb0:	e000      	b.n	82eb4 <xQueueGenericSend+0x184>
		}
	}
   82eb2:	e77c      	b.n	82dae <xQueueGenericSend+0x7e>
}
   82eb4:	4618      	mov	r0, r3
   82eb6:	3728      	adds	r7, #40	; 0x28
   82eb8:	46bd      	mov	sp, r7
   82eba:	bd80      	pop	{r7, pc}
   82ebc:	00082729 	.word	0x00082729
   82ec0:	00084175 	.word	0x00084175
   82ec4:	000826ad 	.word	0x000826ad
   82ec8:	000831ed 	.word	0x000831ed
   82ecc:	00083c9d 	.word	0x00083c9d
   82ed0:	0008268d 	.word	0x0008268d
   82ed4:	000826f1 	.word	0x000826f1
   82ed8:	00083d5d 	.word	0x00083d5d
   82edc:	00083799 	.word	0x00083799
   82ee0:	00083d95 	.word	0x00083d95
   82ee4:	000833fd 	.word	0x000833fd
   82ee8:	00083b7d 	.word	0x00083b7d
   82eec:	00083321 	.word	0x00083321
   82ef0:	000837b5 	.word	0x000837b5

00082ef4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   82ef4:	b580      	push	{r7, lr}
   82ef6:	b088      	sub	sp, #32
   82ef8:	af00      	add	r7, sp, #0
   82efa:	60f8      	str	r0, [r7, #12]
   82efc:	60b9      	str	r1, [r7, #8]
   82efe:	607a      	str	r2, [r7, #4]
   82f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82f02:	68fb      	ldr	r3, [r7, #12]
   82f04:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   82f06:	69bb      	ldr	r3, [r7, #24]
   82f08:	2b00      	cmp	r3, #0
   82f0a:	d102      	bne.n	82f12 <xQueueGenericSendFromISR+0x1e>
   82f0c:	4b33      	ldr	r3, [pc, #204]	; (82fdc <xQueueGenericSendFromISR+0xe8>)
   82f0e:	4798      	blx	r3
   82f10:	e7fe      	b.n	82f10 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82f12:	68bb      	ldr	r3, [r7, #8]
   82f14:	2b00      	cmp	r3, #0
   82f16:	d103      	bne.n	82f20 <xQueueGenericSendFromISR+0x2c>
   82f18:	69bb      	ldr	r3, [r7, #24]
   82f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82f1c:	2b00      	cmp	r3, #0
   82f1e:	d101      	bne.n	82f24 <xQueueGenericSendFromISR+0x30>
   82f20:	2301      	movs	r3, #1
   82f22:	e000      	b.n	82f26 <xQueueGenericSendFromISR+0x32>
   82f24:	2300      	movs	r3, #0
   82f26:	2b00      	cmp	r3, #0
   82f28:	d102      	bne.n	82f30 <xQueueGenericSendFromISR+0x3c>
   82f2a:	4b2c      	ldr	r3, [pc, #176]	; (82fdc <xQueueGenericSendFromISR+0xe8>)
   82f2c:	4798      	blx	r3
   82f2e:	e7fe      	b.n	82f2e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   82f30:	683b      	ldr	r3, [r7, #0]
   82f32:	2b02      	cmp	r3, #2
   82f34:	d103      	bne.n	82f3e <xQueueGenericSendFromISR+0x4a>
   82f36:	69bb      	ldr	r3, [r7, #24]
   82f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82f3a:	2b01      	cmp	r3, #1
   82f3c:	d101      	bne.n	82f42 <xQueueGenericSendFromISR+0x4e>
   82f3e:	2301      	movs	r3, #1
   82f40:	e000      	b.n	82f44 <xQueueGenericSendFromISR+0x50>
   82f42:	2300      	movs	r3, #0
   82f44:	2b00      	cmp	r3, #0
   82f46:	d102      	bne.n	82f4e <xQueueGenericSendFromISR+0x5a>
   82f48:	4b24      	ldr	r3, [pc, #144]	; (82fdc <xQueueGenericSendFromISR+0xe8>)
   82f4a:	4798      	blx	r3
   82f4c:	e7fe      	b.n	82f4c <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   82f4e:	4b24      	ldr	r3, [pc, #144]	; (82fe0 <xQueueGenericSendFromISR+0xec>)
   82f50:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82f52:	4b22      	ldr	r3, [pc, #136]	; (82fdc <xQueueGenericSendFromISR+0xe8>)
   82f54:	4798      	blx	r3
   82f56:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   82f58:	69bb      	ldr	r3, [r7, #24]
   82f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82f5c:	69bb      	ldr	r3, [r7, #24]
   82f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82f60:	429a      	cmp	r2, r3
   82f62:	d302      	bcc.n	82f6a <xQueueGenericSendFromISR+0x76>
   82f64:	683b      	ldr	r3, [r7, #0]
   82f66:	2b02      	cmp	r3, #2
   82f68:	d12d      	bne.n	82fc6 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   82f6a:	69b8      	ldr	r0, [r7, #24]
   82f6c:	68b9      	ldr	r1, [r7, #8]
   82f6e:	683a      	ldr	r2, [r7, #0]
   82f70:	4b1c      	ldr	r3, [pc, #112]	; (82fe4 <xQueueGenericSendFromISR+0xf0>)
   82f72:	4798      	blx	r3
   82f74:	4603      	mov	r3, r0
   82f76:	2b00      	cmp	r3, #0
   82f78:	d005      	beq.n	82f86 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   82f7a:	687b      	ldr	r3, [r7, #4]
   82f7c:	2b00      	cmp	r3, #0
   82f7e:	d002      	beq.n	82f86 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   82f80:	687b      	ldr	r3, [r7, #4]
   82f82:	2201      	movs	r2, #1
   82f84:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   82f86:	69bb      	ldr	r3, [r7, #24]
   82f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   82f8e:	d112      	bne.n	82fb6 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82f90:	69bb      	ldr	r3, [r7, #24]
   82f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82f94:	2b00      	cmp	r3, #0
   82f96:	d013      	beq.n	82fc0 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82f98:	69bb      	ldr	r3, [r7, #24]
   82f9a:	3324      	adds	r3, #36	; 0x24
   82f9c:	4618      	mov	r0, r3
   82f9e:	4b12      	ldr	r3, [pc, #72]	; (82fe8 <xQueueGenericSendFromISR+0xf4>)
   82fa0:	4798      	blx	r3
   82fa2:	4603      	mov	r3, r0
   82fa4:	2b00      	cmp	r3, #0
   82fa6:	d00b      	beq.n	82fc0 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   82fa8:	687b      	ldr	r3, [r7, #4]
   82faa:	2b00      	cmp	r3, #0
   82fac:	d008      	beq.n	82fc0 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   82fae:	687b      	ldr	r3, [r7, #4]
   82fb0:	2201      	movs	r2, #1
   82fb2:	601a      	str	r2, [r3, #0]
   82fb4:	e004      	b.n	82fc0 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   82fb6:	69bb      	ldr	r3, [r7, #24]
   82fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82fba:	1c5a      	adds	r2, r3, #1
   82fbc:	69bb      	ldr	r3, [r7, #24]
   82fbe:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   82fc0:	2301      	movs	r3, #1
   82fc2:	61fb      	str	r3, [r7, #28]
   82fc4:	e001      	b.n	82fca <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82fc6:	2300      	movs	r3, #0
   82fc8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   82fca:	6978      	ldr	r0, [r7, #20]
   82fcc:	4b07      	ldr	r3, [pc, #28]	; (82fec <xQueueGenericSendFromISR+0xf8>)
   82fce:	4798      	blx	r3

	return xReturn;
   82fd0:	69fb      	ldr	r3, [r7, #28]
}
   82fd2:	4618      	mov	r0, r3
   82fd4:	3720      	adds	r7, #32
   82fd6:	46bd      	mov	sp, r7
   82fd8:	bd80      	pop	{r7, pc}
   82fda:	bf00      	nop
   82fdc:	00082729 	.word	0x00082729
   82fe0:	000827f1 	.word	0x000827f1
   82fe4:	000831ed 	.word	0x000831ed
   82fe8:	00083c9d 	.word	0x00083c9d
   82fec:	0008273d 	.word	0x0008273d

00082ff0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   82ff0:	b580      	push	{r7, lr}
   82ff2:	b08a      	sub	sp, #40	; 0x28
   82ff4:	af00      	add	r7, sp, #0
   82ff6:	60f8      	str	r0, [r7, #12]
   82ff8:	60b9      	str	r1, [r7, #8]
   82ffa:	607a      	str	r2, [r7, #4]
   82ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   82ffe:	2300      	movs	r3, #0
   83000:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83002:	68fb      	ldr	r3, [r7, #12]
   83004:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83006:	6a3b      	ldr	r3, [r7, #32]
   83008:	2b00      	cmp	r3, #0
   8300a:	d102      	bne.n	83012 <xQueueGenericReceive+0x22>
   8300c:	4b67      	ldr	r3, [pc, #412]	; (831ac <xQueueGenericReceive+0x1bc>)
   8300e:	4798      	blx	r3
   83010:	e7fe      	b.n	83010 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83012:	68bb      	ldr	r3, [r7, #8]
   83014:	2b00      	cmp	r3, #0
   83016:	d103      	bne.n	83020 <xQueueGenericReceive+0x30>
   83018:	6a3b      	ldr	r3, [r7, #32]
   8301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8301c:	2b00      	cmp	r3, #0
   8301e:	d101      	bne.n	83024 <xQueueGenericReceive+0x34>
   83020:	2301      	movs	r3, #1
   83022:	e000      	b.n	83026 <xQueueGenericReceive+0x36>
   83024:	2300      	movs	r3, #0
   83026:	2b00      	cmp	r3, #0
   83028:	d102      	bne.n	83030 <xQueueGenericReceive+0x40>
   8302a:	4b60      	ldr	r3, [pc, #384]	; (831ac <xQueueGenericReceive+0x1bc>)
   8302c:	4798      	blx	r3
   8302e:	e7fe      	b.n	8302e <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83030:	4b5f      	ldr	r3, [pc, #380]	; (831b0 <xQueueGenericReceive+0x1c0>)
   83032:	4798      	blx	r3
   83034:	4603      	mov	r3, r0
   83036:	2b00      	cmp	r3, #0
   83038:	d102      	bne.n	83040 <xQueueGenericReceive+0x50>
   8303a:	687b      	ldr	r3, [r7, #4]
   8303c:	2b00      	cmp	r3, #0
   8303e:	d101      	bne.n	83044 <xQueueGenericReceive+0x54>
   83040:	2301      	movs	r3, #1
   83042:	e000      	b.n	83046 <xQueueGenericReceive+0x56>
   83044:	2300      	movs	r3, #0
   83046:	2b00      	cmp	r3, #0
   83048:	d102      	bne.n	83050 <xQueueGenericReceive+0x60>
   8304a:	4b58      	ldr	r3, [pc, #352]	; (831ac <xQueueGenericReceive+0x1bc>)
   8304c:	4798      	blx	r3
   8304e:	e7fe      	b.n	8304e <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83050:	4b58      	ldr	r3, [pc, #352]	; (831b4 <xQueueGenericReceive+0x1c4>)
   83052:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83054:	6a3b      	ldr	r3, [r7, #32]
   83056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83058:	2b00      	cmp	r3, #0
   8305a:	d03b      	beq.n	830d4 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   8305c:	6a3b      	ldr	r3, [r7, #32]
   8305e:	68db      	ldr	r3, [r3, #12]
   83060:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83062:	6a38      	ldr	r0, [r7, #32]
   83064:	68b9      	ldr	r1, [r7, #8]
   83066:	4b54      	ldr	r3, [pc, #336]	; (831b8 <xQueueGenericReceive+0x1c8>)
   83068:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8306a:	683b      	ldr	r3, [r7, #0]
   8306c:	2b00      	cmp	r3, #0
   8306e:	d11c      	bne.n	830aa <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83070:	6a3b      	ldr	r3, [r7, #32]
   83072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83074:	1e5a      	subs	r2, r3, #1
   83076:	6a3b      	ldr	r3, [r7, #32]
   83078:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8307a:	6a3b      	ldr	r3, [r7, #32]
   8307c:	681b      	ldr	r3, [r3, #0]
   8307e:	2b00      	cmp	r3, #0
   83080:	d104      	bne.n	8308c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   83082:	4b4e      	ldr	r3, [pc, #312]	; (831bc <xQueueGenericReceive+0x1cc>)
   83084:	4798      	blx	r3
   83086:	4602      	mov	r2, r0
   83088:	6a3b      	ldr	r3, [r7, #32]
   8308a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8308c:	6a3b      	ldr	r3, [r7, #32]
   8308e:	691b      	ldr	r3, [r3, #16]
   83090:	2b00      	cmp	r3, #0
   83092:	d01b      	beq.n	830cc <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83094:	6a3b      	ldr	r3, [r7, #32]
   83096:	3310      	adds	r3, #16
   83098:	4618      	mov	r0, r3
   8309a:	4b49      	ldr	r3, [pc, #292]	; (831c0 <xQueueGenericReceive+0x1d0>)
   8309c:	4798      	blx	r3
   8309e:	4603      	mov	r3, r0
   830a0:	2b01      	cmp	r3, #1
   830a2:	d113      	bne.n	830cc <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   830a4:	4b47      	ldr	r3, [pc, #284]	; (831c4 <xQueueGenericReceive+0x1d4>)
   830a6:	4798      	blx	r3
   830a8:	e010      	b.n	830cc <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   830aa:	6a3b      	ldr	r3, [r7, #32]
   830ac:	69fa      	ldr	r2, [r7, #28]
   830ae:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   830b0:	6a3b      	ldr	r3, [r7, #32]
   830b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   830b4:	2b00      	cmp	r3, #0
   830b6:	d009      	beq.n	830cc <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   830b8:	6a3b      	ldr	r3, [r7, #32]
   830ba:	3324      	adds	r3, #36	; 0x24
   830bc:	4618      	mov	r0, r3
   830be:	4b40      	ldr	r3, [pc, #256]	; (831c0 <xQueueGenericReceive+0x1d0>)
   830c0:	4798      	blx	r3
   830c2:	4603      	mov	r3, r0
   830c4:	2b00      	cmp	r3, #0
   830c6:	d001      	beq.n	830cc <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   830c8:	4b3e      	ldr	r3, [pc, #248]	; (831c4 <xQueueGenericReceive+0x1d4>)
   830ca:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   830cc:	4b3e      	ldr	r3, [pc, #248]	; (831c8 <xQueueGenericReceive+0x1d8>)
   830ce:	4798      	blx	r3
				return pdPASS;
   830d0:	2301      	movs	r3, #1
   830d2:	e066      	b.n	831a2 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   830d4:	687b      	ldr	r3, [r7, #4]
   830d6:	2b00      	cmp	r3, #0
   830d8:	d103      	bne.n	830e2 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   830da:	4b3b      	ldr	r3, [pc, #236]	; (831c8 <xQueueGenericReceive+0x1d8>)
   830dc:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   830de:	2300      	movs	r3, #0
   830e0:	e05f      	b.n	831a2 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   830e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   830e4:	2b00      	cmp	r3, #0
   830e6:	d106      	bne.n	830f6 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   830e8:	f107 0314 	add.w	r3, r7, #20
   830ec:	4618      	mov	r0, r3
   830ee:	4b37      	ldr	r3, [pc, #220]	; (831cc <xQueueGenericReceive+0x1dc>)
   830f0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   830f2:	2301      	movs	r3, #1
   830f4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   830f6:	4b34      	ldr	r3, [pc, #208]	; (831c8 <xQueueGenericReceive+0x1d8>)
   830f8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   830fa:	4b35      	ldr	r3, [pc, #212]	; (831d0 <xQueueGenericReceive+0x1e0>)
   830fc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   830fe:	4b2d      	ldr	r3, [pc, #180]	; (831b4 <xQueueGenericReceive+0x1c4>)
   83100:	4798      	blx	r3
   83102:	6a3b      	ldr	r3, [r7, #32]
   83104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83106:	f1b3 3fff 	cmp.w	r3, #4294967295
   8310a:	d102      	bne.n	83112 <xQueueGenericReceive+0x122>
   8310c:	6a3b      	ldr	r3, [r7, #32]
   8310e:	2200      	movs	r2, #0
   83110:	645a      	str	r2, [r3, #68]	; 0x44
   83112:	6a3b      	ldr	r3, [r7, #32]
   83114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83116:	f1b3 3fff 	cmp.w	r3, #4294967295
   8311a:	d102      	bne.n	83122 <xQueueGenericReceive+0x132>
   8311c:	6a3b      	ldr	r3, [r7, #32]
   8311e:	2200      	movs	r2, #0
   83120:	649a      	str	r2, [r3, #72]	; 0x48
   83122:	4b29      	ldr	r3, [pc, #164]	; (831c8 <xQueueGenericReceive+0x1d8>)
   83124:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83126:	f107 0214 	add.w	r2, r7, #20
   8312a:	1d3b      	adds	r3, r7, #4
   8312c:	4610      	mov	r0, r2
   8312e:	4619      	mov	r1, r3
   83130:	4b28      	ldr	r3, [pc, #160]	; (831d4 <xQueueGenericReceive+0x1e4>)
   83132:	4798      	blx	r3
   83134:	4603      	mov	r3, r0
   83136:	2b00      	cmp	r3, #0
   83138:	d12b      	bne.n	83192 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8313a:	6a38      	ldr	r0, [r7, #32]
   8313c:	4b26      	ldr	r3, [pc, #152]	; (831d8 <xQueueGenericReceive+0x1e8>)
   8313e:	4798      	blx	r3
   83140:	4603      	mov	r3, r0
   83142:	2b00      	cmp	r3, #0
   83144:	d01f      	beq.n	83186 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83146:	6a3b      	ldr	r3, [r7, #32]
   83148:	681b      	ldr	r3, [r3, #0]
   8314a:	2b00      	cmp	r3, #0
   8314c:	d108      	bne.n	83160 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   8314e:	4b19      	ldr	r3, [pc, #100]	; (831b4 <xQueueGenericReceive+0x1c4>)
   83150:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83152:	6a3b      	ldr	r3, [r7, #32]
   83154:	685b      	ldr	r3, [r3, #4]
   83156:	4618      	mov	r0, r3
   83158:	4b20      	ldr	r3, [pc, #128]	; (831dc <xQueueGenericReceive+0x1ec>)
   8315a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   8315c:	4b1a      	ldr	r3, [pc, #104]	; (831c8 <xQueueGenericReceive+0x1d8>)
   8315e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83160:	6a3b      	ldr	r3, [r7, #32]
   83162:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83166:	687b      	ldr	r3, [r7, #4]
   83168:	4610      	mov	r0, r2
   8316a:	4619      	mov	r1, r3
   8316c:	4b1c      	ldr	r3, [pc, #112]	; (831e0 <xQueueGenericReceive+0x1f0>)
   8316e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83170:	6a38      	ldr	r0, [r7, #32]
   83172:	4b1c      	ldr	r3, [pc, #112]	; (831e4 <xQueueGenericReceive+0x1f4>)
   83174:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83176:	4b1c      	ldr	r3, [pc, #112]	; (831e8 <xQueueGenericReceive+0x1f8>)
   83178:	4798      	blx	r3
   8317a:	4603      	mov	r3, r0
   8317c:	2b00      	cmp	r3, #0
   8317e:	d10f      	bne.n	831a0 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   83180:	4b10      	ldr	r3, [pc, #64]	; (831c4 <xQueueGenericReceive+0x1d4>)
   83182:	4798      	blx	r3
   83184:	e00c      	b.n	831a0 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83186:	6a38      	ldr	r0, [r7, #32]
   83188:	4b16      	ldr	r3, [pc, #88]	; (831e4 <xQueueGenericReceive+0x1f4>)
   8318a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8318c:	4b16      	ldr	r3, [pc, #88]	; (831e8 <xQueueGenericReceive+0x1f8>)
   8318e:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   83190:	e75e      	b.n	83050 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   83192:	6a38      	ldr	r0, [r7, #32]
   83194:	4b13      	ldr	r3, [pc, #76]	; (831e4 <xQueueGenericReceive+0x1f4>)
   83196:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83198:	4b13      	ldr	r3, [pc, #76]	; (831e8 <xQueueGenericReceive+0x1f8>)
   8319a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8319c:	2300      	movs	r3, #0
   8319e:	e000      	b.n	831a2 <xQueueGenericReceive+0x1b2>
		}
	}
   831a0:	e756      	b.n	83050 <xQueueGenericReceive+0x60>
}
   831a2:	4618      	mov	r0, r3
   831a4:	3728      	adds	r7, #40	; 0x28
   831a6:	46bd      	mov	sp, r7
   831a8:	bd80      	pop	{r7, pc}
   831aa:	bf00      	nop
   831ac:	00082729 	.word	0x00082729
   831b0:	00084175 	.word	0x00084175
   831b4:	000826ad 	.word	0x000826ad
   831b8:	000832d1 	.word	0x000832d1
   831bc:	00084389 	.word	0x00084389
   831c0:	00083c9d 	.word	0x00083c9d
   831c4:	0008268d 	.word	0x0008268d
   831c8:	000826f1 	.word	0x000826f1
   831cc:	00083d5d 	.word	0x00083d5d
   831d0:	00083799 	.word	0x00083799
   831d4:	00083d95 	.word	0x00083d95
   831d8:	000833c9 	.word	0x000833c9
   831dc:	000841b1 	.word	0x000841b1
   831e0:	00083b7d 	.word	0x00083b7d
   831e4:	00083321 	.word	0x00083321
   831e8:	000837b5 	.word	0x000837b5

000831ec <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   831ec:	b580      	push	{r7, lr}
   831ee:	b086      	sub	sp, #24
   831f0:	af00      	add	r7, sp, #0
   831f2:	60f8      	str	r0, [r7, #12]
   831f4:	60b9      	str	r1, [r7, #8]
   831f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   831f8:	2300      	movs	r3, #0
   831fa:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   831fc:	68fb      	ldr	r3, [r7, #12]
   831fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83200:	2b00      	cmp	r3, #0
   83202:	d10d      	bne.n	83220 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83204:	68fb      	ldr	r3, [r7, #12]
   83206:	681b      	ldr	r3, [r3, #0]
   83208:	2b00      	cmp	r3, #0
   8320a:	d152      	bne.n	832b2 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   8320c:	68fb      	ldr	r3, [r7, #12]
   8320e:	685b      	ldr	r3, [r3, #4]
   83210:	4618      	mov	r0, r3
   83212:	4b2d      	ldr	r3, [pc, #180]	; (832c8 <prvCopyDataToQueue+0xdc>)
   83214:	4798      	blx	r3
   83216:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   83218:	68fb      	ldr	r3, [r7, #12]
   8321a:	2200      	movs	r2, #0
   8321c:	605a      	str	r2, [r3, #4]
   8321e:	e048      	b.n	832b2 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83220:	687b      	ldr	r3, [r7, #4]
   83222:	2b00      	cmp	r3, #0
   83224:	d11a      	bne.n	8325c <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83226:	68fb      	ldr	r3, [r7, #12]
   83228:	689a      	ldr	r2, [r3, #8]
   8322a:	68fb      	ldr	r3, [r7, #12]
   8322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8322e:	4610      	mov	r0, r2
   83230:	68b9      	ldr	r1, [r7, #8]
   83232:	461a      	mov	r2, r3
   83234:	4b25      	ldr	r3, [pc, #148]	; (832cc <prvCopyDataToQueue+0xe0>)
   83236:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83238:	68fb      	ldr	r3, [r7, #12]
   8323a:	689a      	ldr	r2, [r3, #8]
   8323c:	68fb      	ldr	r3, [r7, #12]
   8323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83240:	441a      	add	r2, r3
   83242:	68fb      	ldr	r3, [r7, #12]
   83244:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83246:	68fb      	ldr	r3, [r7, #12]
   83248:	689a      	ldr	r2, [r3, #8]
   8324a:	68fb      	ldr	r3, [r7, #12]
   8324c:	685b      	ldr	r3, [r3, #4]
   8324e:	429a      	cmp	r2, r3
   83250:	d32f      	bcc.n	832b2 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83252:	68fb      	ldr	r3, [r7, #12]
   83254:	681a      	ldr	r2, [r3, #0]
   83256:	68fb      	ldr	r3, [r7, #12]
   83258:	609a      	str	r2, [r3, #8]
   8325a:	e02a      	b.n	832b2 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8325c:	68fb      	ldr	r3, [r7, #12]
   8325e:	68da      	ldr	r2, [r3, #12]
   83260:	68fb      	ldr	r3, [r7, #12]
   83262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83264:	4610      	mov	r0, r2
   83266:	68b9      	ldr	r1, [r7, #8]
   83268:	461a      	mov	r2, r3
   8326a:	4b18      	ldr	r3, [pc, #96]	; (832cc <prvCopyDataToQueue+0xe0>)
   8326c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   8326e:	68fb      	ldr	r3, [r7, #12]
   83270:	68da      	ldr	r2, [r3, #12]
   83272:	68fb      	ldr	r3, [r7, #12]
   83274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83276:	425b      	negs	r3, r3
   83278:	441a      	add	r2, r3
   8327a:	68fb      	ldr	r3, [r7, #12]
   8327c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8327e:	68fb      	ldr	r3, [r7, #12]
   83280:	68da      	ldr	r2, [r3, #12]
   83282:	68fb      	ldr	r3, [r7, #12]
   83284:	681b      	ldr	r3, [r3, #0]
   83286:	429a      	cmp	r2, r3
   83288:	d207      	bcs.n	8329a <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8328a:	68fb      	ldr	r3, [r7, #12]
   8328c:	685a      	ldr	r2, [r3, #4]
   8328e:	68fb      	ldr	r3, [r7, #12]
   83290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83292:	425b      	negs	r3, r3
   83294:	441a      	add	r2, r3
   83296:	68fb      	ldr	r3, [r7, #12]
   83298:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   8329a:	687b      	ldr	r3, [r7, #4]
   8329c:	2b02      	cmp	r3, #2
   8329e:	d108      	bne.n	832b2 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   832a0:	68fb      	ldr	r3, [r7, #12]
   832a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   832a4:	2b00      	cmp	r3, #0
   832a6:	d004      	beq.n	832b2 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   832a8:	68fb      	ldr	r3, [r7, #12]
   832aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   832ac:	1e5a      	subs	r2, r3, #1
   832ae:	68fb      	ldr	r3, [r7, #12]
   832b0:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   832b2:	68fb      	ldr	r3, [r7, #12]
   832b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   832b6:	1c5a      	adds	r2, r3, #1
   832b8:	68fb      	ldr	r3, [r7, #12]
   832ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   832bc:	697b      	ldr	r3, [r7, #20]
}
   832be:	4618      	mov	r0, r3
   832c0:	3718      	adds	r7, #24
   832c2:	46bd      	mov	sp, r7
   832c4:	bd80      	pop	{r7, pc}
   832c6:	bf00      	nop
   832c8:	000842a5 	.word	0x000842a5
   832cc:	00085db9 	.word	0x00085db9

000832d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   832d0:	b580      	push	{r7, lr}
   832d2:	b082      	sub	sp, #8
   832d4:	af00      	add	r7, sp, #0
   832d6:	6078      	str	r0, [r7, #4]
   832d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   832da:	687b      	ldr	r3, [r7, #4]
   832dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   832de:	2b00      	cmp	r3, #0
   832e0:	d019      	beq.n	83316 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   832e2:	687b      	ldr	r3, [r7, #4]
   832e4:	68da      	ldr	r2, [r3, #12]
   832e6:	687b      	ldr	r3, [r7, #4]
   832e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   832ea:	441a      	add	r2, r3
   832ec:	687b      	ldr	r3, [r7, #4]
   832ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   832f0:	687b      	ldr	r3, [r7, #4]
   832f2:	68da      	ldr	r2, [r3, #12]
   832f4:	687b      	ldr	r3, [r7, #4]
   832f6:	685b      	ldr	r3, [r3, #4]
   832f8:	429a      	cmp	r2, r3
   832fa:	d303      	bcc.n	83304 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   832fc:	687b      	ldr	r3, [r7, #4]
   832fe:	681a      	ldr	r2, [r3, #0]
   83300:	687b      	ldr	r3, [r7, #4]
   83302:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83304:	687b      	ldr	r3, [r7, #4]
   83306:	68da      	ldr	r2, [r3, #12]
   83308:	687b      	ldr	r3, [r7, #4]
   8330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8330c:	6838      	ldr	r0, [r7, #0]
   8330e:	4611      	mov	r1, r2
   83310:	461a      	mov	r2, r3
   83312:	4b02      	ldr	r3, [pc, #8]	; (8331c <prvCopyDataFromQueue+0x4c>)
   83314:	4798      	blx	r3
	}
}
   83316:	3708      	adds	r7, #8
   83318:	46bd      	mov	sp, r7
   8331a:	bd80      	pop	{r7, pc}
   8331c:	00085db9 	.word	0x00085db9

00083320 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83320:	b580      	push	{r7, lr}
   83322:	b082      	sub	sp, #8
   83324:	af00      	add	r7, sp, #0
   83326:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83328:	4b23      	ldr	r3, [pc, #140]	; (833b8 <prvUnlockQueue+0x98>)
   8332a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8332c:	e014      	b.n	83358 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8332e:	687b      	ldr	r3, [r7, #4]
   83330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83332:	2b00      	cmp	r3, #0
   83334:	d00a      	beq.n	8334c <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83336:	687b      	ldr	r3, [r7, #4]
   83338:	3324      	adds	r3, #36	; 0x24
   8333a:	4618      	mov	r0, r3
   8333c:	4b1f      	ldr	r3, [pc, #124]	; (833bc <prvUnlockQueue+0x9c>)
   8333e:	4798      	blx	r3
   83340:	4603      	mov	r3, r0
   83342:	2b00      	cmp	r3, #0
   83344:	d003      	beq.n	8334e <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83346:	4b1e      	ldr	r3, [pc, #120]	; (833c0 <prvUnlockQueue+0xa0>)
   83348:	4798      	blx	r3
   8334a:	e000      	b.n	8334e <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   8334c:	e008      	b.n	83360 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   8334e:	687b      	ldr	r3, [r7, #4]
   83350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83352:	1e5a      	subs	r2, r3, #1
   83354:	687b      	ldr	r3, [r7, #4]
   83356:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83358:	687b      	ldr	r3, [r7, #4]
   8335a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8335c:	2b00      	cmp	r3, #0
   8335e:	dce6      	bgt.n	8332e <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83360:	687b      	ldr	r3, [r7, #4]
   83362:	f04f 32ff 	mov.w	r2, #4294967295
   83366:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83368:	4b16      	ldr	r3, [pc, #88]	; (833c4 <prvUnlockQueue+0xa4>)
   8336a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8336c:	4b12      	ldr	r3, [pc, #72]	; (833b8 <prvUnlockQueue+0x98>)
   8336e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83370:	e014      	b.n	8339c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83372:	687b      	ldr	r3, [r7, #4]
   83374:	691b      	ldr	r3, [r3, #16]
   83376:	2b00      	cmp	r3, #0
   83378:	d00f      	beq.n	8339a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8337a:	687b      	ldr	r3, [r7, #4]
   8337c:	3310      	adds	r3, #16
   8337e:	4618      	mov	r0, r3
   83380:	4b0e      	ldr	r3, [pc, #56]	; (833bc <prvUnlockQueue+0x9c>)
   83382:	4798      	blx	r3
   83384:	4603      	mov	r3, r0
   83386:	2b00      	cmp	r3, #0
   83388:	d001      	beq.n	8338e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   8338a:	4b0d      	ldr	r3, [pc, #52]	; (833c0 <prvUnlockQueue+0xa0>)
   8338c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   8338e:	687b      	ldr	r3, [r7, #4]
   83390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83392:	1e5a      	subs	r2, r3, #1
   83394:	687b      	ldr	r3, [r7, #4]
   83396:	645a      	str	r2, [r3, #68]	; 0x44
   83398:	e000      	b.n	8339c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   8339a:	e003      	b.n	833a4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8339c:	687b      	ldr	r3, [r7, #4]
   8339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   833a0:	2b00      	cmp	r3, #0
   833a2:	dce6      	bgt.n	83372 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   833a4:	687b      	ldr	r3, [r7, #4]
   833a6:	f04f 32ff 	mov.w	r2, #4294967295
   833aa:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   833ac:	4b05      	ldr	r3, [pc, #20]	; (833c4 <prvUnlockQueue+0xa4>)
   833ae:	4798      	blx	r3
}
   833b0:	3708      	adds	r7, #8
   833b2:	46bd      	mov	sp, r7
   833b4:	bd80      	pop	{r7, pc}
   833b6:	bf00      	nop
   833b8:	000826ad 	.word	0x000826ad
   833bc:	00083c9d 	.word	0x00083c9d
   833c0:	00083e45 	.word	0x00083e45
   833c4:	000826f1 	.word	0x000826f1

000833c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   833c8:	b580      	push	{r7, lr}
   833ca:	b084      	sub	sp, #16
   833cc:	af00      	add	r7, sp, #0
   833ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   833d0:	4b08      	ldr	r3, [pc, #32]	; (833f4 <prvIsQueueEmpty+0x2c>)
   833d2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   833d4:	687b      	ldr	r3, [r7, #4]
   833d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   833d8:	2b00      	cmp	r3, #0
   833da:	d102      	bne.n	833e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   833dc:	2301      	movs	r3, #1
   833de:	60fb      	str	r3, [r7, #12]
   833e0:	e001      	b.n	833e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   833e2:	2300      	movs	r3, #0
   833e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   833e6:	4b04      	ldr	r3, [pc, #16]	; (833f8 <prvIsQueueEmpty+0x30>)
   833e8:	4798      	blx	r3

	return xReturn;
   833ea:	68fb      	ldr	r3, [r7, #12]
}
   833ec:	4618      	mov	r0, r3
   833ee:	3710      	adds	r7, #16
   833f0:	46bd      	mov	sp, r7
   833f2:	bd80      	pop	{r7, pc}
   833f4:	000826ad 	.word	0x000826ad
   833f8:	000826f1 	.word	0x000826f1

000833fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   833fc:	b580      	push	{r7, lr}
   833fe:	b084      	sub	sp, #16
   83400:	af00      	add	r7, sp, #0
   83402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83404:	4b09      	ldr	r3, [pc, #36]	; (8342c <prvIsQueueFull+0x30>)
   83406:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   83408:	687b      	ldr	r3, [r7, #4]
   8340a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8340c:	687b      	ldr	r3, [r7, #4]
   8340e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83410:	429a      	cmp	r2, r3
   83412:	d102      	bne.n	8341a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   83414:	2301      	movs	r3, #1
   83416:	60fb      	str	r3, [r7, #12]
   83418:	e001      	b.n	8341e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   8341a:	2300      	movs	r3, #0
   8341c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8341e:	4b04      	ldr	r3, [pc, #16]	; (83430 <prvIsQueueFull+0x34>)
   83420:	4798      	blx	r3

	return xReturn;
   83422:	68fb      	ldr	r3, [r7, #12]
}
   83424:	4618      	mov	r0, r3
   83426:	3710      	adds	r7, #16
   83428:	46bd      	mov	sp, r7
   8342a:	bd80      	pop	{r7, pc}
   8342c:	000826ad 	.word	0x000826ad
   83430:	000826f1 	.word	0x000826f1

00083434 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   83434:	b580      	push	{r7, lr}
   83436:	b084      	sub	sp, #16
   83438:	af00      	add	r7, sp, #0
   8343a:	6078      	str	r0, [r7, #4]
   8343c:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8343e:	687b      	ldr	r3, [r7, #4]
   83440:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   83442:	4b12      	ldr	r3, [pc, #72]	; (8348c <vQueueWaitForMessageRestricted+0x58>)
   83444:	4798      	blx	r3
   83446:	68fb      	ldr	r3, [r7, #12]
   83448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8344a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8344e:	d102      	bne.n	83456 <vQueueWaitForMessageRestricted+0x22>
   83450:	68fb      	ldr	r3, [r7, #12]
   83452:	2200      	movs	r2, #0
   83454:	645a      	str	r2, [r3, #68]	; 0x44
   83456:	68fb      	ldr	r3, [r7, #12]
   83458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8345a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8345e:	d102      	bne.n	83466 <vQueueWaitForMessageRestricted+0x32>
   83460:	68fb      	ldr	r3, [r7, #12]
   83462:	2200      	movs	r2, #0
   83464:	649a      	str	r2, [r3, #72]	; 0x48
   83466:	4b0a      	ldr	r3, [pc, #40]	; (83490 <vQueueWaitForMessageRestricted+0x5c>)
   83468:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   8346a:	68fb      	ldr	r3, [r7, #12]
   8346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8346e:	2b00      	cmp	r3, #0
   83470:	d105      	bne.n	8347e <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83472:	68fb      	ldr	r3, [r7, #12]
   83474:	3324      	adds	r3, #36	; 0x24
   83476:	4618      	mov	r0, r3
   83478:	6839      	ldr	r1, [r7, #0]
   8347a:	4b06      	ldr	r3, [pc, #24]	; (83494 <vQueueWaitForMessageRestricted+0x60>)
   8347c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   8347e:	68f8      	ldr	r0, [r7, #12]
   83480:	4b05      	ldr	r3, [pc, #20]	; (83498 <vQueueWaitForMessageRestricted+0x64>)
   83482:	4798      	blx	r3
	}
   83484:	3710      	adds	r7, #16
   83486:	46bd      	mov	sp, r7
   83488:	bd80      	pop	{r7, pc}
   8348a:	bf00      	nop
   8348c:	000826ad 	.word	0x000826ad
   83490:	000826f1 	.word	0x000826f1
   83494:	00083c1d 	.word	0x00083c1d
   83498:	00083321 	.word	0x00083321

0008349c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   8349c:	b590      	push	{r4, r7, lr}
   8349e:	b08b      	sub	sp, #44	; 0x2c
   834a0:	af02      	add	r7, sp, #8
   834a2:	60f8      	str	r0, [r7, #12]
   834a4:	60b9      	str	r1, [r7, #8]
   834a6:	603b      	str	r3, [r7, #0]
   834a8:	4613      	mov	r3, r2
   834aa:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   834ac:	68fb      	ldr	r3, [r7, #12]
   834ae:	2b00      	cmp	r3, #0
   834b0:	d102      	bne.n	834b8 <xTaskGenericCreate+0x1c>
   834b2:	4b4b      	ldr	r3, [pc, #300]	; (835e0 <xTaskGenericCreate+0x144>)
   834b4:	4798      	blx	r3
   834b6:	e7fe      	b.n	834b6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   834b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   834ba:	2b04      	cmp	r3, #4
   834bc:	d902      	bls.n	834c4 <xTaskGenericCreate+0x28>
   834be:	4b48      	ldr	r3, [pc, #288]	; (835e0 <xTaskGenericCreate+0x144>)
   834c0:	4798      	blx	r3
   834c2:	e7fe      	b.n	834c2 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   834c4:	88fb      	ldrh	r3, [r7, #6]
   834c6:	4618      	mov	r0, r3
   834c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   834ca:	4b46      	ldr	r3, [pc, #280]	; (835e4 <xTaskGenericCreate+0x148>)
   834cc:	4798      	blx	r3
   834ce:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   834d0:	69bb      	ldr	r3, [r7, #24]
   834d2:	2b00      	cmp	r3, #0
   834d4:	d06d      	beq.n	835b2 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   834d6:	69bb      	ldr	r3, [r7, #24]
   834d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   834da:	88fb      	ldrh	r3, [r7, #6]
   834dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   834e0:	3b01      	subs	r3, #1
   834e2:	009b      	lsls	r3, r3, #2
   834e4:	4413      	add	r3, r2
   834e6:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   834e8:	697b      	ldr	r3, [r7, #20]
   834ea:	f023 0307 	bic.w	r3, r3, #7
   834ee:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   834f0:	697b      	ldr	r3, [r7, #20]
   834f2:	f003 0307 	and.w	r3, r3, #7
   834f6:	2b00      	cmp	r3, #0
   834f8:	d002      	beq.n	83500 <xTaskGenericCreate+0x64>
   834fa:	4b39      	ldr	r3, [pc, #228]	; (835e0 <xTaskGenericCreate+0x144>)
   834fc:	4798      	blx	r3
   834fe:	e7fe      	b.n	834fe <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   83500:	88fb      	ldrh	r3, [r7, #6]
   83502:	9300      	str	r3, [sp, #0]
   83504:	69b8      	ldr	r0, [r7, #24]
   83506:	68b9      	ldr	r1, [r7, #8]
   83508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   8350a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8350c:	4c36      	ldr	r4, [pc, #216]	; (835e8 <xTaskGenericCreate+0x14c>)
   8350e:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   83510:	6978      	ldr	r0, [r7, #20]
   83512:	68f9      	ldr	r1, [r7, #12]
   83514:	683a      	ldr	r2, [r7, #0]
   83516:	4b35      	ldr	r3, [pc, #212]	; (835ec <xTaskGenericCreate+0x150>)
   83518:	4798      	blx	r3
   8351a:	4602      	mov	r2, r0
   8351c:	69bb      	ldr	r3, [r7, #24]
   8351e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   83520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83522:	2b00      	cmp	r3, #0
   83524:	d002      	beq.n	8352c <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   83526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83528:	69ba      	ldr	r2, [r7, #24]
   8352a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   8352c:	4b30      	ldr	r3, [pc, #192]	; (835f0 <xTaskGenericCreate+0x154>)
   8352e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   83530:	4b30      	ldr	r3, [pc, #192]	; (835f4 <xTaskGenericCreate+0x158>)
   83532:	681b      	ldr	r3, [r3, #0]
   83534:	1c5a      	adds	r2, r3, #1
   83536:	4b2f      	ldr	r3, [pc, #188]	; (835f4 <xTaskGenericCreate+0x158>)
   83538:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   8353a:	4b2f      	ldr	r3, [pc, #188]	; (835f8 <xTaskGenericCreate+0x15c>)
   8353c:	681b      	ldr	r3, [r3, #0]
   8353e:	2b00      	cmp	r3, #0
   83540:	d109      	bne.n	83556 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   83542:	4b2d      	ldr	r3, [pc, #180]	; (835f8 <xTaskGenericCreate+0x15c>)
   83544:	69ba      	ldr	r2, [r7, #24]
   83546:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   83548:	4b2a      	ldr	r3, [pc, #168]	; (835f4 <xTaskGenericCreate+0x158>)
   8354a:	681b      	ldr	r3, [r3, #0]
   8354c:	2b01      	cmp	r3, #1
   8354e:	d10f      	bne.n	83570 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83550:	4b2a      	ldr	r3, [pc, #168]	; (835fc <xTaskGenericCreate+0x160>)
   83552:	4798      	blx	r3
   83554:	e00c      	b.n	83570 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   83556:	4b2a      	ldr	r3, [pc, #168]	; (83600 <xTaskGenericCreate+0x164>)
   83558:	681b      	ldr	r3, [r3, #0]
   8355a:	2b00      	cmp	r3, #0
   8355c:	d108      	bne.n	83570 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8355e:	4b26      	ldr	r3, [pc, #152]	; (835f8 <xTaskGenericCreate+0x15c>)
   83560:	681b      	ldr	r3, [r3, #0]
   83562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83566:	429a      	cmp	r2, r3
   83568:	d802      	bhi.n	83570 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   8356a:	4b23      	ldr	r3, [pc, #140]	; (835f8 <xTaskGenericCreate+0x15c>)
   8356c:	69ba      	ldr	r2, [r7, #24]
   8356e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83570:	4b24      	ldr	r3, [pc, #144]	; (83604 <xTaskGenericCreate+0x168>)
   83572:	681b      	ldr	r3, [r3, #0]
   83574:	1c5a      	adds	r2, r3, #1
   83576:	4b23      	ldr	r3, [pc, #140]	; (83604 <xTaskGenericCreate+0x168>)
   83578:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   8357a:	69bb      	ldr	r3, [r7, #24]
   8357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8357e:	2201      	movs	r2, #1
   83580:	409a      	lsls	r2, r3
   83582:	4b21      	ldr	r3, [pc, #132]	; (83608 <xTaskGenericCreate+0x16c>)
   83584:	681b      	ldr	r3, [r3, #0]
   83586:	431a      	orrs	r2, r3
   83588:	4b1f      	ldr	r3, [pc, #124]	; (83608 <xTaskGenericCreate+0x16c>)
   8358a:	601a      	str	r2, [r3, #0]
   8358c:	69bb      	ldr	r3, [r7, #24]
   8358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83590:	4613      	mov	r3, r2
   83592:	009b      	lsls	r3, r3, #2
   83594:	4413      	add	r3, r2
   83596:	009b      	lsls	r3, r3, #2
   83598:	4a1c      	ldr	r2, [pc, #112]	; (8360c <xTaskGenericCreate+0x170>)
   8359a:	441a      	add	r2, r3
   8359c:	69bb      	ldr	r3, [r7, #24]
   8359e:	3304      	adds	r3, #4
   835a0:	4610      	mov	r0, r2
   835a2:	4619      	mov	r1, r3
   835a4:	4b1a      	ldr	r3, [pc, #104]	; (83610 <xTaskGenericCreate+0x174>)
   835a6:	4798      	blx	r3

			xReturn = pdPASS;
   835a8:	2301      	movs	r3, #1
   835aa:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   835ac:	4b19      	ldr	r3, [pc, #100]	; (83614 <xTaskGenericCreate+0x178>)
   835ae:	4798      	blx	r3
   835b0:	e002      	b.n	835b8 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   835b2:	f04f 33ff 	mov.w	r3, #4294967295
   835b6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   835b8:	69fb      	ldr	r3, [r7, #28]
   835ba:	2b01      	cmp	r3, #1
   835bc:	d10b      	bne.n	835d6 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   835be:	4b10      	ldr	r3, [pc, #64]	; (83600 <xTaskGenericCreate+0x164>)
   835c0:	681b      	ldr	r3, [r3, #0]
   835c2:	2b00      	cmp	r3, #0
   835c4:	d007      	beq.n	835d6 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   835c6:	4b0c      	ldr	r3, [pc, #48]	; (835f8 <xTaskGenericCreate+0x15c>)
   835c8:	681b      	ldr	r3, [r3, #0]
   835ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   835cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   835ce:	429a      	cmp	r2, r3
   835d0:	d201      	bcs.n	835d6 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   835d2:	4b11      	ldr	r3, [pc, #68]	; (83618 <xTaskGenericCreate+0x17c>)
   835d4:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   835d6:	69fb      	ldr	r3, [r7, #28]
}
   835d8:	4618      	mov	r0, r3
   835da:	3724      	adds	r7, #36	; 0x24
   835dc:	46bd      	mov	sp, r7
   835de:	bd90      	pop	{r4, r7, pc}
   835e0:	00082729 	.word	0x00082729
   835e4:	00084099 	.word	0x00084099
   835e8:	00083e85 	.word	0x00083e85
   835ec:	00082505 	.word	0x00082505
   835f0:	000826ad 	.word	0x000826ad
   835f4:	2007a5d8 	.word	0x2007a5d8
   835f8:	2007a500 	.word	0x2007a500
   835fc:	00083f1d 	.word	0x00083f1d
   83600:	2007a5e4 	.word	0x2007a5e4
   83604:	2007a5f4 	.word	0x2007a5f4
   83608:	2007a5e0 	.word	0x2007a5e0
   8360c:	2007a504 	.word	0x2007a504
   83610:	000823f9 	.word	0x000823f9
   83614:	000826f1 	.word	0x000826f1
   83618:	0008268d 	.word	0x0008268d

0008361c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   8361c:	b580      	push	{r7, lr}
   8361e:	b086      	sub	sp, #24
   83620:	af00      	add	r7, sp, #0
   83622:	6078      	str	r0, [r7, #4]
   83624:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   83626:	2300      	movs	r3, #0
   83628:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   8362a:	687b      	ldr	r3, [r7, #4]
   8362c:	2b00      	cmp	r3, #0
   8362e:	d102      	bne.n	83636 <vTaskDelayUntil+0x1a>
   83630:	4b2f      	ldr	r3, [pc, #188]	; (836f0 <vTaskDelayUntil+0xd4>)
   83632:	4798      	blx	r3
   83634:	e7fe      	b.n	83634 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   83636:	683b      	ldr	r3, [r7, #0]
   83638:	2b00      	cmp	r3, #0
   8363a:	d102      	bne.n	83642 <vTaskDelayUntil+0x26>
   8363c:	4b2c      	ldr	r3, [pc, #176]	; (836f0 <vTaskDelayUntil+0xd4>)
   8363e:	4798      	blx	r3
   83640:	e7fe      	b.n	83640 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   83642:	4b2c      	ldr	r3, [pc, #176]	; (836f4 <vTaskDelayUntil+0xd8>)
   83644:	681b      	ldr	r3, [r3, #0]
   83646:	2b00      	cmp	r3, #0
   83648:	d002      	beq.n	83650 <vTaskDelayUntil+0x34>
   8364a:	4b29      	ldr	r3, [pc, #164]	; (836f0 <vTaskDelayUntil+0xd4>)
   8364c:	4798      	blx	r3
   8364e:	e7fe      	b.n	8364e <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   83650:	4b29      	ldr	r3, [pc, #164]	; (836f8 <vTaskDelayUntil+0xdc>)
   83652:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   83654:	4b29      	ldr	r3, [pc, #164]	; (836fc <vTaskDelayUntil+0xe0>)
   83656:	681b      	ldr	r3, [r3, #0]
   83658:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8365a:	687b      	ldr	r3, [r7, #4]
   8365c:	681a      	ldr	r2, [r3, #0]
   8365e:	683b      	ldr	r3, [r7, #0]
   83660:	4413      	add	r3, r2
   83662:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   83664:	687b      	ldr	r3, [r7, #4]
   83666:	681a      	ldr	r2, [r3, #0]
   83668:	693b      	ldr	r3, [r7, #16]
   8366a:	429a      	cmp	r2, r3
   8366c:	d90b      	bls.n	83686 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   8366e:	687b      	ldr	r3, [r7, #4]
   83670:	681a      	ldr	r2, [r3, #0]
   83672:	68fb      	ldr	r3, [r7, #12]
   83674:	429a      	cmp	r2, r3
   83676:	d911      	bls.n	8369c <vTaskDelayUntil+0x80>
   83678:	68fa      	ldr	r2, [r7, #12]
   8367a:	693b      	ldr	r3, [r7, #16]
   8367c:	429a      	cmp	r2, r3
   8367e:	d90d      	bls.n	8369c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83680:	2301      	movs	r3, #1
   83682:	617b      	str	r3, [r7, #20]
   83684:	e00a      	b.n	8369c <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   83686:	687b      	ldr	r3, [r7, #4]
   83688:	681a      	ldr	r2, [r3, #0]
   8368a:	68fb      	ldr	r3, [r7, #12]
   8368c:	429a      	cmp	r2, r3
   8368e:	d803      	bhi.n	83698 <vTaskDelayUntil+0x7c>
   83690:	68fa      	ldr	r2, [r7, #12]
   83692:	693b      	ldr	r3, [r7, #16]
   83694:	429a      	cmp	r2, r3
   83696:	d901      	bls.n	8369c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83698:	2301      	movs	r3, #1
   8369a:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8369c:	687b      	ldr	r3, [r7, #4]
   8369e:	68fa      	ldr	r2, [r7, #12]
   836a0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   836a2:	697b      	ldr	r3, [r7, #20]
   836a4:	2b00      	cmp	r3, #0
   836a6:	d017      	beq.n	836d8 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   836a8:	4b15      	ldr	r3, [pc, #84]	; (83700 <vTaskDelayUntil+0xe4>)
   836aa:	681b      	ldr	r3, [r3, #0]
   836ac:	3304      	adds	r3, #4
   836ae:	4618      	mov	r0, r3
   836b0:	4b14      	ldr	r3, [pc, #80]	; (83704 <vTaskDelayUntil+0xe8>)
   836b2:	4798      	blx	r3
   836b4:	4603      	mov	r3, r0
   836b6:	2b00      	cmp	r3, #0
   836b8:	d10b      	bne.n	836d2 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   836ba:	4b11      	ldr	r3, [pc, #68]	; (83700 <vTaskDelayUntil+0xe4>)
   836bc:	681b      	ldr	r3, [r3, #0]
   836be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   836c0:	2201      	movs	r2, #1
   836c2:	fa02 f303 	lsl.w	r3, r2, r3
   836c6:	43da      	mvns	r2, r3
   836c8:	4b0f      	ldr	r3, [pc, #60]	; (83708 <vTaskDelayUntil+0xec>)
   836ca:	681b      	ldr	r3, [r3, #0]
   836cc:	401a      	ands	r2, r3
   836ce:	4b0e      	ldr	r3, [pc, #56]	; (83708 <vTaskDelayUntil+0xec>)
   836d0:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   836d2:	68f8      	ldr	r0, [r7, #12]
   836d4:	4b0d      	ldr	r3, [pc, #52]	; (8370c <vTaskDelayUntil+0xf0>)
   836d6:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   836d8:	4b0d      	ldr	r3, [pc, #52]	; (83710 <vTaskDelayUntil+0xf4>)
   836da:	4798      	blx	r3
   836dc:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   836de:	68bb      	ldr	r3, [r7, #8]
   836e0:	2b00      	cmp	r3, #0
   836e2:	d101      	bne.n	836e8 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   836e4:	4b0b      	ldr	r3, [pc, #44]	; (83714 <vTaskDelayUntil+0xf8>)
   836e6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   836e8:	3718      	adds	r7, #24
   836ea:	46bd      	mov	sp, r7
   836ec:	bd80      	pop	{r7, pc}
   836ee:	bf00      	nop
   836f0:	00082729 	.word	0x00082729
   836f4:	2007a5f8 	.word	0x2007a5f8
   836f8:	00083799 	.word	0x00083799
   836fc:	2007a5dc 	.word	0x2007a5dc
   83700:	2007a500 	.word	0x2007a500
   83704:	000824b1 	.word	0x000824b1
   83708:	2007a5e0 	.word	0x2007a5e0
   8370c:	00084029 	.word	0x00084029
   83710:	000837b5 	.word	0x000837b5
   83714:	0008268d 	.word	0x0008268d

00083718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   83718:	b590      	push	{r4, r7, lr}
   8371a:	b087      	sub	sp, #28
   8371c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   8371e:	2300      	movs	r3, #0
   83720:	9300      	str	r3, [sp, #0]
   83722:	2300      	movs	r3, #0
   83724:	9301      	str	r3, [sp, #4]
   83726:	2300      	movs	r3, #0
   83728:	9302      	str	r3, [sp, #8]
   8372a:	2300      	movs	r3, #0
   8372c:	9303      	str	r3, [sp, #12]
   8372e:	4812      	ldr	r0, [pc, #72]	; (83778 <vTaskStartScheduler+0x60>)
   83730:	4912      	ldr	r1, [pc, #72]	; (8377c <vTaskStartScheduler+0x64>)
   83732:	2282      	movs	r2, #130	; 0x82
   83734:	2300      	movs	r3, #0
   83736:	4c12      	ldr	r4, [pc, #72]	; (83780 <vTaskStartScheduler+0x68>)
   83738:	47a0      	blx	r4
   8373a:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8373c:	687b      	ldr	r3, [r7, #4]
   8373e:	2b01      	cmp	r3, #1
   83740:	d102      	bne.n	83748 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   83742:	4b10      	ldr	r3, [pc, #64]	; (83784 <vTaskStartScheduler+0x6c>)
   83744:	4798      	blx	r3
   83746:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   83748:	687b      	ldr	r3, [r7, #4]
   8374a:	2b01      	cmp	r3, #1
   8374c:	d10a      	bne.n	83764 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   8374e:	4b0e      	ldr	r3, [pc, #56]	; (83788 <vTaskStartScheduler+0x70>)
   83750:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   83752:	4b0e      	ldr	r3, [pc, #56]	; (8378c <vTaskStartScheduler+0x74>)
   83754:	2201      	movs	r2, #1
   83756:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   83758:	4b0d      	ldr	r3, [pc, #52]	; (83790 <vTaskStartScheduler+0x78>)
   8375a:	2200      	movs	r2, #0
   8375c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8375e:	4b0d      	ldr	r3, [pc, #52]	; (83794 <vTaskStartScheduler+0x7c>)
   83760:	4798      	blx	r3
   83762:	e005      	b.n	83770 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   83764:	687b      	ldr	r3, [r7, #4]
   83766:	2b00      	cmp	r3, #0
   83768:	d102      	bne.n	83770 <vTaskStartScheduler+0x58>
   8376a:	4b07      	ldr	r3, [pc, #28]	; (83788 <vTaskStartScheduler+0x70>)
   8376c:	4798      	blx	r3
   8376e:	e7fe      	b.n	8376e <vTaskStartScheduler+0x56>
	}
}
   83770:	370c      	adds	r7, #12
   83772:	46bd      	mov	sp, r7
   83774:	bd90      	pop	{r4, r7, pc}
   83776:	bf00      	nop
   83778:	00083e5d 	.word	0x00083e5d
   8377c:	00086150 	.word	0x00086150
   83780:	0008349d 	.word	0x0008349d
   83784:	000843b1 	.word	0x000843b1
   83788:	00082729 	.word	0x00082729
   8378c:	2007a5e4 	.word	0x2007a5e4
   83790:	2007a5dc 	.word	0x2007a5dc
   83794:	000825c5 	.word	0x000825c5

00083798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   83798:	b480      	push	{r7}
   8379a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   8379c:	4b04      	ldr	r3, [pc, #16]	; (837b0 <vTaskSuspendAll+0x18>)
   8379e:	681b      	ldr	r3, [r3, #0]
   837a0:	1c5a      	adds	r2, r3, #1
   837a2:	4b03      	ldr	r3, [pc, #12]	; (837b0 <vTaskSuspendAll+0x18>)
   837a4:	601a      	str	r2, [r3, #0]
}
   837a6:	46bd      	mov	sp, r7
   837a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   837ac:	4770      	bx	lr
   837ae:	bf00      	nop
   837b0:	2007a5f8 	.word	0x2007a5f8

000837b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   837b4:	b580      	push	{r7, lr}
   837b6:	b082      	sub	sp, #8
   837b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   837ba:	2300      	movs	r3, #0
   837bc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   837be:	4b37      	ldr	r3, [pc, #220]	; (8389c <xTaskResumeAll+0xe8>)
   837c0:	681b      	ldr	r3, [r3, #0]
   837c2:	2b00      	cmp	r3, #0
   837c4:	d102      	bne.n	837cc <xTaskResumeAll+0x18>
   837c6:	4b36      	ldr	r3, [pc, #216]	; (838a0 <xTaskResumeAll+0xec>)
   837c8:	4798      	blx	r3
   837ca:	e7fe      	b.n	837ca <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   837cc:	4b35      	ldr	r3, [pc, #212]	; (838a4 <xTaskResumeAll+0xf0>)
   837ce:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   837d0:	4b32      	ldr	r3, [pc, #200]	; (8389c <xTaskResumeAll+0xe8>)
   837d2:	681b      	ldr	r3, [r3, #0]
   837d4:	1e5a      	subs	r2, r3, #1
   837d6:	4b31      	ldr	r3, [pc, #196]	; (8389c <xTaskResumeAll+0xe8>)
   837d8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   837da:	4b30      	ldr	r3, [pc, #192]	; (8389c <xTaskResumeAll+0xe8>)
   837dc:	681b      	ldr	r3, [r3, #0]
   837de:	2b00      	cmp	r3, #0
   837e0:	d155      	bne.n	8388e <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   837e2:	4b31      	ldr	r3, [pc, #196]	; (838a8 <xTaskResumeAll+0xf4>)
   837e4:	681b      	ldr	r3, [r3, #0]
   837e6:	2b00      	cmp	r3, #0
   837e8:	d051      	beq.n	8388e <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   837ea:	e02e      	b.n	8384a <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   837ec:	4b2f      	ldr	r3, [pc, #188]	; (838ac <xTaskResumeAll+0xf8>)
   837ee:	68db      	ldr	r3, [r3, #12]
   837f0:	68db      	ldr	r3, [r3, #12]
   837f2:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   837f4:	683b      	ldr	r3, [r7, #0]
   837f6:	3318      	adds	r3, #24
   837f8:	4618      	mov	r0, r3
   837fa:	4b2d      	ldr	r3, [pc, #180]	; (838b0 <xTaskResumeAll+0xfc>)
   837fc:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   837fe:	683b      	ldr	r3, [r7, #0]
   83800:	3304      	adds	r3, #4
   83802:	4618      	mov	r0, r3
   83804:	4b2a      	ldr	r3, [pc, #168]	; (838b0 <xTaskResumeAll+0xfc>)
   83806:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   83808:	683b      	ldr	r3, [r7, #0]
   8380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8380c:	2201      	movs	r2, #1
   8380e:	409a      	lsls	r2, r3
   83810:	4b28      	ldr	r3, [pc, #160]	; (838b4 <xTaskResumeAll+0x100>)
   83812:	681b      	ldr	r3, [r3, #0]
   83814:	431a      	orrs	r2, r3
   83816:	4b27      	ldr	r3, [pc, #156]	; (838b4 <xTaskResumeAll+0x100>)
   83818:	601a      	str	r2, [r3, #0]
   8381a:	683b      	ldr	r3, [r7, #0]
   8381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8381e:	4613      	mov	r3, r2
   83820:	009b      	lsls	r3, r3, #2
   83822:	4413      	add	r3, r2
   83824:	009b      	lsls	r3, r3, #2
   83826:	4a24      	ldr	r2, [pc, #144]	; (838b8 <xTaskResumeAll+0x104>)
   83828:	441a      	add	r2, r3
   8382a:	683b      	ldr	r3, [r7, #0]
   8382c:	3304      	adds	r3, #4
   8382e:	4610      	mov	r0, r2
   83830:	4619      	mov	r1, r3
   83832:	4b22      	ldr	r3, [pc, #136]	; (838bc <xTaskResumeAll+0x108>)
   83834:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83836:	683b      	ldr	r3, [r7, #0]
   83838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8383a:	4b21      	ldr	r3, [pc, #132]	; (838c0 <xTaskResumeAll+0x10c>)
   8383c:	681b      	ldr	r3, [r3, #0]
   8383e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83840:	429a      	cmp	r2, r3
   83842:	d302      	bcc.n	8384a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   83844:	4b1f      	ldr	r3, [pc, #124]	; (838c4 <xTaskResumeAll+0x110>)
   83846:	2201      	movs	r2, #1
   83848:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   8384a:	4b18      	ldr	r3, [pc, #96]	; (838ac <xTaskResumeAll+0xf8>)
   8384c:	681b      	ldr	r3, [r3, #0]
   8384e:	2b00      	cmp	r3, #0
   83850:	d1cc      	bne.n	837ec <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   83852:	4b1d      	ldr	r3, [pc, #116]	; (838c8 <xTaskResumeAll+0x114>)
   83854:	681b      	ldr	r3, [r3, #0]
   83856:	2b00      	cmp	r3, #0
   83858:	d011      	beq.n	8387e <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   8385a:	e00c      	b.n	83876 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   8385c:	4b1b      	ldr	r3, [pc, #108]	; (838cc <xTaskResumeAll+0x118>)
   8385e:	4798      	blx	r3
   83860:	4603      	mov	r3, r0
   83862:	2b00      	cmp	r3, #0
   83864:	d002      	beq.n	8386c <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   83866:	4b17      	ldr	r3, [pc, #92]	; (838c4 <xTaskResumeAll+0x110>)
   83868:	2201      	movs	r2, #1
   8386a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   8386c:	4b16      	ldr	r3, [pc, #88]	; (838c8 <xTaskResumeAll+0x114>)
   8386e:	681b      	ldr	r3, [r3, #0]
   83870:	1e5a      	subs	r2, r3, #1
   83872:	4b15      	ldr	r3, [pc, #84]	; (838c8 <xTaskResumeAll+0x114>)
   83874:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83876:	4b14      	ldr	r3, [pc, #80]	; (838c8 <xTaskResumeAll+0x114>)
   83878:	681b      	ldr	r3, [r3, #0]
   8387a:	2b00      	cmp	r3, #0
   8387c:	d1ee      	bne.n	8385c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   8387e:	4b11      	ldr	r3, [pc, #68]	; (838c4 <xTaskResumeAll+0x110>)
   83880:	681b      	ldr	r3, [r3, #0]
   83882:	2b01      	cmp	r3, #1
   83884:	d103      	bne.n	8388e <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   83886:	2301      	movs	r3, #1
   83888:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   8388a:	4b11      	ldr	r3, [pc, #68]	; (838d0 <xTaskResumeAll+0x11c>)
   8388c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8388e:	4b11      	ldr	r3, [pc, #68]	; (838d4 <xTaskResumeAll+0x120>)
   83890:	4798      	blx	r3

	return xAlreadyYielded;
   83892:	687b      	ldr	r3, [r7, #4]
}
   83894:	4618      	mov	r0, r3
   83896:	3708      	adds	r7, #8
   83898:	46bd      	mov	sp, r7
   8389a:	bd80      	pop	{r7, pc}
   8389c:	2007a5f8 	.word	0x2007a5f8
   838a0:	00082729 	.word	0x00082729
   838a4:	000826ad 	.word	0x000826ad
   838a8:	2007a5d8 	.word	0x2007a5d8
   838ac:	2007a598 	.word	0x2007a598
   838b0:	000824b1 	.word	0x000824b1
   838b4:	2007a5e0 	.word	0x2007a5e0
   838b8:	2007a504 	.word	0x2007a504
   838bc:	000823f9 	.word	0x000823f9
   838c0:	2007a500 	.word	0x2007a500
   838c4:	2007a5ec 	.word	0x2007a5ec
   838c8:	2007a5e8 	.word	0x2007a5e8
   838cc:	00083905 	.word	0x00083905
   838d0:	0008268d 	.word	0x0008268d
   838d4:	000826f1 	.word	0x000826f1

000838d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   838d8:	b580      	push	{r7, lr}
   838da:	b082      	sub	sp, #8
   838dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   838de:	4b06      	ldr	r3, [pc, #24]	; (838f8 <xTaskGetTickCount+0x20>)
   838e0:	4798      	blx	r3
	{
		xTicks = xTickCount;
   838e2:	4b06      	ldr	r3, [pc, #24]	; (838fc <xTaskGetTickCount+0x24>)
   838e4:	681b      	ldr	r3, [r3, #0]
   838e6:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   838e8:	4b05      	ldr	r3, [pc, #20]	; (83900 <xTaskGetTickCount+0x28>)
   838ea:	4798      	blx	r3

	return xTicks;
   838ec:	687b      	ldr	r3, [r7, #4]
}
   838ee:	4618      	mov	r0, r3
   838f0:	3708      	adds	r7, #8
   838f2:	46bd      	mov	sp, r7
   838f4:	bd80      	pop	{r7, pc}
   838f6:	bf00      	nop
   838f8:	000826ad 	.word	0x000826ad
   838fc:	2007a5dc 	.word	0x2007a5dc
   83900:	000826f1 	.word	0x000826f1

00083904 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   83904:	b580      	push	{r7, lr}
   83906:	b086      	sub	sp, #24
   83908:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8390a:	2300      	movs	r3, #0
   8390c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8390e:	4b4d      	ldr	r3, [pc, #308]	; (83a44 <xTaskIncrementTick+0x140>)
   83910:	681b      	ldr	r3, [r3, #0]
   83912:	2b00      	cmp	r3, #0
   83914:	f040 8086 	bne.w	83a24 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   83918:	4b4b      	ldr	r3, [pc, #300]	; (83a48 <xTaskIncrementTick+0x144>)
   8391a:	681b      	ldr	r3, [r3, #0]
   8391c:	1c5a      	adds	r2, r3, #1
   8391e:	4b4a      	ldr	r3, [pc, #296]	; (83a48 <xTaskIncrementTick+0x144>)
   83920:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   83922:	4b49      	ldr	r3, [pc, #292]	; (83a48 <xTaskIncrementTick+0x144>)
   83924:	681b      	ldr	r3, [r3, #0]
   83926:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   83928:	693b      	ldr	r3, [r7, #16]
   8392a:	2b00      	cmp	r3, #0
   8392c:	d118      	bne.n	83960 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   8392e:	4b47      	ldr	r3, [pc, #284]	; (83a4c <xTaskIncrementTick+0x148>)
   83930:	681b      	ldr	r3, [r3, #0]
   83932:	681b      	ldr	r3, [r3, #0]
   83934:	2b00      	cmp	r3, #0
   83936:	d002      	beq.n	8393e <xTaskIncrementTick+0x3a>
   83938:	4b45      	ldr	r3, [pc, #276]	; (83a50 <xTaskIncrementTick+0x14c>)
   8393a:	4798      	blx	r3
   8393c:	e7fe      	b.n	8393c <xTaskIncrementTick+0x38>
   8393e:	4b43      	ldr	r3, [pc, #268]	; (83a4c <xTaskIncrementTick+0x148>)
   83940:	681b      	ldr	r3, [r3, #0]
   83942:	60fb      	str	r3, [r7, #12]
   83944:	4b43      	ldr	r3, [pc, #268]	; (83a54 <xTaskIncrementTick+0x150>)
   83946:	681a      	ldr	r2, [r3, #0]
   83948:	4b40      	ldr	r3, [pc, #256]	; (83a4c <xTaskIncrementTick+0x148>)
   8394a:	601a      	str	r2, [r3, #0]
   8394c:	4b41      	ldr	r3, [pc, #260]	; (83a54 <xTaskIncrementTick+0x150>)
   8394e:	68fa      	ldr	r2, [r7, #12]
   83950:	601a      	str	r2, [r3, #0]
   83952:	4b41      	ldr	r3, [pc, #260]	; (83a58 <xTaskIncrementTick+0x154>)
   83954:	681b      	ldr	r3, [r3, #0]
   83956:	1c5a      	adds	r2, r3, #1
   83958:	4b3f      	ldr	r3, [pc, #252]	; (83a58 <xTaskIncrementTick+0x154>)
   8395a:	601a      	str	r2, [r3, #0]
   8395c:	4b3f      	ldr	r3, [pc, #252]	; (83a5c <xTaskIncrementTick+0x158>)
   8395e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   83960:	4b3f      	ldr	r3, [pc, #252]	; (83a60 <xTaskIncrementTick+0x15c>)
   83962:	681b      	ldr	r3, [r3, #0]
   83964:	693a      	ldr	r2, [r7, #16]
   83966:	429a      	cmp	r2, r3
   83968:	d34d      	bcc.n	83a06 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8396a:	4b38      	ldr	r3, [pc, #224]	; (83a4c <xTaskIncrementTick+0x148>)
   8396c:	681b      	ldr	r3, [r3, #0]
   8396e:	681b      	ldr	r3, [r3, #0]
   83970:	2b00      	cmp	r3, #0
   83972:	d101      	bne.n	83978 <xTaskIncrementTick+0x74>
   83974:	2301      	movs	r3, #1
   83976:	e000      	b.n	8397a <xTaskIncrementTick+0x76>
   83978:	2300      	movs	r3, #0
   8397a:	2b00      	cmp	r3, #0
   8397c:	d004      	beq.n	83988 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   8397e:	4b38      	ldr	r3, [pc, #224]	; (83a60 <xTaskIncrementTick+0x15c>)
   83980:	f04f 32ff 	mov.w	r2, #4294967295
   83984:	601a      	str	r2, [r3, #0]
						break;
   83986:	e03e      	b.n	83a06 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   83988:	4b30      	ldr	r3, [pc, #192]	; (83a4c <xTaskIncrementTick+0x148>)
   8398a:	681b      	ldr	r3, [r3, #0]
   8398c:	68db      	ldr	r3, [r3, #12]
   8398e:	68db      	ldr	r3, [r3, #12]
   83990:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   83992:	68bb      	ldr	r3, [r7, #8]
   83994:	685b      	ldr	r3, [r3, #4]
   83996:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   83998:	693a      	ldr	r2, [r7, #16]
   8399a:	687b      	ldr	r3, [r7, #4]
   8399c:	429a      	cmp	r2, r3
   8399e:	d203      	bcs.n	839a8 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   839a0:	4b2f      	ldr	r3, [pc, #188]	; (83a60 <xTaskIncrementTick+0x15c>)
   839a2:	687a      	ldr	r2, [r7, #4]
   839a4:	601a      	str	r2, [r3, #0]
							break;
   839a6:	e02e      	b.n	83a06 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   839a8:	68bb      	ldr	r3, [r7, #8]
   839aa:	3304      	adds	r3, #4
   839ac:	4618      	mov	r0, r3
   839ae:	4b2d      	ldr	r3, [pc, #180]	; (83a64 <xTaskIncrementTick+0x160>)
   839b0:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   839b2:	68bb      	ldr	r3, [r7, #8]
   839b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   839b6:	2b00      	cmp	r3, #0
   839b8:	d004      	beq.n	839c4 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   839ba:	68bb      	ldr	r3, [r7, #8]
   839bc:	3318      	adds	r3, #24
   839be:	4618      	mov	r0, r3
   839c0:	4b28      	ldr	r3, [pc, #160]	; (83a64 <xTaskIncrementTick+0x160>)
   839c2:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   839c4:	68bb      	ldr	r3, [r7, #8]
   839c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   839c8:	2201      	movs	r2, #1
   839ca:	409a      	lsls	r2, r3
   839cc:	4b26      	ldr	r3, [pc, #152]	; (83a68 <xTaskIncrementTick+0x164>)
   839ce:	681b      	ldr	r3, [r3, #0]
   839d0:	431a      	orrs	r2, r3
   839d2:	4b25      	ldr	r3, [pc, #148]	; (83a68 <xTaskIncrementTick+0x164>)
   839d4:	601a      	str	r2, [r3, #0]
   839d6:	68bb      	ldr	r3, [r7, #8]
   839d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   839da:	4613      	mov	r3, r2
   839dc:	009b      	lsls	r3, r3, #2
   839de:	4413      	add	r3, r2
   839e0:	009b      	lsls	r3, r3, #2
   839e2:	4a22      	ldr	r2, [pc, #136]	; (83a6c <xTaskIncrementTick+0x168>)
   839e4:	441a      	add	r2, r3
   839e6:	68bb      	ldr	r3, [r7, #8]
   839e8:	3304      	adds	r3, #4
   839ea:	4610      	mov	r0, r2
   839ec:	4619      	mov	r1, r3
   839ee:	4b20      	ldr	r3, [pc, #128]	; (83a70 <xTaskIncrementTick+0x16c>)
   839f0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   839f2:	68bb      	ldr	r3, [r7, #8]
   839f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   839f6:	4b1f      	ldr	r3, [pc, #124]	; (83a74 <xTaskIncrementTick+0x170>)
   839f8:	681b      	ldr	r3, [r3, #0]
   839fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   839fc:	429a      	cmp	r2, r3
   839fe:	d301      	bcc.n	83a04 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   83a00:	2301      	movs	r3, #1
   83a02:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   83a04:	e7b1      	b.n	8396a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   83a06:	4b1b      	ldr	r3, [pc, #108]	; (83a74 <xTaskIncrementTick+0x170>)
   83a08:	681b      	ldr	r3, [r3, #0]
   83a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83a0c:	4917      	ldr	r1, [pc, #92]	; (83a6c <xTaskIncrementTick+0x168>)
   83a0e:	4613      	mov	r3, r2
   83a10:	009b      	lsls	r3, r3, #2
   83a12:	4413      	add	r3, r2
   83a14:	009b      	lsls	r3, r3, #2
   83a16:	440b      	add	r3, r1
   83a18:	681b      	ldr	r3, [r3, #0]
   83a1a:	2b01      	cmp	r3, #1
   83a1c:	d907      	bls.n	83a2e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   83a1e:	2301      	movs	r3, #1
   83a20:	617b      	str	r3, [r7, #20]
   83a22:	e004      	b.n	83a2e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   83a24:	4b14      	ldr	r3, [pc, #80]	; (83a78 <xTaskIncrementTick+0x174>)
   83a26:	681b      	ldr	r3, [r3, #0]
   83a28:	1c5a      	adds	r2, r3, #1
   83a2a:	4b13      	ldr	r3, [pc, #76]	; (83a78 <xTaskIncrementTick+0x174>)
   83a2c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   83a2e:	4b13      	ldr	r3, [pc, #76]	; (83a7c <xTaskIncrementTick+0x178>)
   83a30:	681b      	ldr	r3, [r3, #0]
   83a32:	2b00      	cmp	r3, #0
   83a34:	d001      	beq.n	83a3a <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   83a36:	2301      	movs	r3, #1
   83a38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   83a3a:	697b      	ldr	r3, [r7, #20]
}
   83a3c:	4618      	mov	r0, r3
   83a3e:	3718      	adds	r7, #24
   83a40:	46bd      	mov	sp, r7
   83a42:	bd80      	pop	{r7, pc}
   83a44:	2007a5f8 	.word	0x2007a5f8
   83a48:	2007a5dc 	.word	0x2007a5dc
   83a4c:	2007a590 	.word	0x2007a590
   83a50:	00082729 	.word	0x00082729
   83a54:	2007a594 	.word	0x2007a594
   83a58:	2007a5f0 	.word	0x2007a5f0
   83a5c:	0008412d 	.word	0x0008412d
   83a60:	20070008 	.word	0x20070008
   83a64:	000824b1 	.word	0x000824b1
   83a68:	2007a5e0 	.word	0x2007a5e0
   83a6c:	2007a504 	.word	0x2007a504
   83a70:	000823f9 	.word	0x000823f9
   83a74:	2007a500 	.word	0x2007a500
   83a78:	2007a5e8 	.word	0x2007a5e8
   83a7c:	2007a5ec 	.word	0x2007a5ec

00083a80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   83a80:	b580      	push	{r7, lr}
   83a82:	b084      	sub	sp, #16
   83a84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   83a86:	4b34      	ldr	r3, [pc, #208]	; (83b58 <vTaskSwitchContext+0xd8>)
   83a88:	681b      	ldr	r3, [r3, #0]
   83a8a:	2b00      	cmp	r3, #0
   83a8c:	d003      	beq.n	83a96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   83a8e:	4b33      	ldr	r3, [pc, #204]	; (83b5c <vTaskSwitchContext+0xdc>)
   83a90:	2201      	movs	r2, #1
   83a92:	601a      	str	r2, [r3, #0]
   83a94:	e05c      	b.n	83b50 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   83a96:	4b31      	ldr	r3, [pc, #196]	; (83b5c <vTaskSwitchContext+0xdc>)
   83a98:	2200      	movs	r2, #0
   83a9a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   83a9c:	4b30      	ldr	r3, [pc, #192]	; (83b60 <vTaskSwitchContext+0xe0>)
   83a9e:	681b      	ldr	r3, [r3, #0]
   83aa0:	681a      	ldr	r2, [r3, #0]
   83aa2:	4b2f      	ldr	r3, [pc, #188]	; (83b60 <vTaskSwitchContext+0xe0>)
   83aa4:	681b      	ldr	r3, [r3, #0]
   83aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83aa8:	429a      	cmp	r2, r3
   83aaa:	d808      	bhi.n	83abe <vTaskSwitchContext+0x3e>
   83aac:	4b2c      	ldr	r3, [pc, #176]	; (83b60 <vTaskSwitchContext+0xe0>)
   83aae:	681a      	ldr	r2, [r3, #0]
   83ab0:	4b2b      	ldr	r3, [pc, #172]	; (83b60 <vTaskSwitchContext+0xe0>)
   83ab2:	681b      	ldr	r3, [r3, #0]
   83ab4:	3334      	adds	r3, #52	; 0x34
   83ab6:	4610      	mov	r0, r2
   83ab8:	4619      	mov	r1, r3
   83aba:	4b2a      	ldr	r3, [pc, #168]	; (83b64 <vTaskSwitchContext+0xe4>)
   83abc:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   83abe:	4b28      	ldr	r3, [pc, #160]	; (83b60 <vTaskSwitchContext+0xe0>)
   83ac0:	681b      	ldr	r3, [r3, #0]
   83ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83ac4:	4618      	mov	r0, r3
   83ac6:	4928      	ldr	r1, [pc, #160]	; (83b68 <vTaskSwitchContext+0xe8>)
   83ac8:	2214      	movs	r2, #20
   83aca:	4b28      	ldr	r3, [pc, #160]	; (83b6c <vTaskSwitchContext+0xec>)
   83acc:	4798      	blx	r3
   83ace:	4603      	mov	r3, r0
   83ad0:	2b00      	cmp	r3, #0
   83ad2:	d008      	beq.n	83ae6 <vTaskSwitchContext+0x66>
   83ad4:	4b22      	ldr	r3, [pc, #136]	; (83b60 <vTaskSwitchContext+0xe0>)
   83ad6:	681a      	ldr	r2, [r3, #0]
   83ad8:	4b21      	ldr	r3, [pc, #132]	; (83b60 <vTaskSwitchContext+0xe0>)
   83ada:	681b      	ldr	r3, [r3, #0]
   83adc:	3334      	adds	r3, #52	; 0x34
   83ade:	4610      	mov	r0, r2
   83ae0:	4619      	mov	r1, r3
   83ae2:	4b20      	ldr	r3, [pc, #128]	; (83b64 <vTaskSwitchContext+0xe4>)
   83ae4:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   83ae6:	4b22      	ldr	r3, [pc, #136]	; (83b70 <vTaskSwitchContext+0xf0>)
   83ae8:	681b      	ldr	r3, [r3, #0]
   83aea:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   83aec:	687b      	ldr	r3, [r7, #4]
   83aee:	fab3 f383 	clz	r3, r3
   83af2:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   83af4:	78fb      	ldrb	r3, [r7, #3]
   83af6:	f1c3 031f 	rsb	r3, r3, #31
   83afa:	60fb      	str	r3, [r7, #12]
   83afc:	491d      	ldr	r1, [pc, #116]	; (83b74 <vTaskSwitchContext+0xf4>)
   83afe:	68fa      	ldr	r2, [r7, #12]
   83b00:	4613      	mov	r3, r2
   83b02:	009b      	lsls	r3, r3, #2
   83b04:	4413      	add	r3, r2
   83b06:	009b      	lsls	r3, r3, #2
   83b08:	440b      	add	r3, r1
   83b0a:	681b      	ldr	r3, [r3, #0]
   83b0c:	2b00      	cmp	r3, #0
   83b0e:	d102      	bne.n	83b16 <vTaskSwitchContext+0x96>
   83b10:	4b19      	ldr	r3, [pc, #100]	; (83b78 <vTaskSwitchContext+0xf8>)
   83b12:	4798      	blx	r3
   83b14:	e7fe      	b.n	83b14 <vTaskSwitchContext+0x94>
   83b16:	68fa      	ldr	r2, [r7, #12]
   83b18:	4613      	mov	r3, r2
   83b1a:	009b      	lsls	r3, r3, #2
   83b1c:	4413      	add	r3, r2
   83b1e:	009b      	lsls	r3, r3, #2
   83b20:	4a14      	ldr	r2, [pc, #80]	; (83b74 <vTaskSwitchContext+0xf4>)
   83b22:	4413      	add	r3, r2
   83b24:	60bb      	str	r3, [r7, #8]
   83b26:	68bb      	ldr	r3, [r7, #8]
   83b28:	685b      	ldr	r3, [r3, #4]
   83b2a:	685a      	ldr	r2, [r3, #4]
   83b2c:	68bb      	ldr	r3, [r7, #8]
   83b2e:	605a      	str	r2, [r3, #4]
   83b30:	68bb      	ldr	r3, [r7, #8]
   83b32:	685a      	ldr	r2, [r3, #4]
   83b34:	68bb      	ldr	r3, [r7, #8]
   83b36:	3308      	adds	r3, #8
   83b38:	429a      	cmp	r2, r3
   83b3a:	d104      	bne.n	83b46 <vTaskSwitchContext+0xc6>
   83b3c:	68bb      	ldr	r3, [r7, #8]
   83b3e:	685b      	ldr	r3, [r3, #4]
   83b40:	685a      	ldr	r2, [r3, #4]
   83b42:	68bb      	ldr	r3, [r7, #8]
   83b44:	605a      	str	r2, [r3, #4]
   83b46:	68bb      	ldr	r3, [r7, #8]
   83b48:	685b      	ldr	r3, [r3, #4]
   83b4a:	68da      	ldr	r2, [r3, #12]
   83b4c:	4b04      	ldr	r3, [pc, #16]	; (83b60 <vTaskSwitchContext+0xe0>)
   83b4e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   83b50:	3710      	adds	r7, #16
   83b52:	46bd      	mov	sp, r7
   83b54:	bd80      	pop	{r7, pc}
   83b56:	bf00      	nop
   83b58:	2007a5f8 	.word	0x2007a5f8
   83b5c:	2007a5ec 	.word	0x2007a5ec
   83b60:	2007a500 	.word	0x2007a500
   83b64:	00085251 	.word	0x00085251
   83b68:	00086158 	.word	0x00086158
   83b6c:	00085d51 	.word	0x00085d51
   83b70:	2007a5e0 	.word	0x2007a5e0
   83b74:	2007a504 	.word	0x2007a504
   83b78:	00082729 	.word	0x00082729

00083b7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   83b7c:	b580      	push	{r7, lr}
   83b7e:	b084      	sub	sp, #16
   83b80:	af00      	add	r7, sp, #0
   83b82:	6078      	str	r0, [r7, #4]
   83b84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   83b86:	687b      	ldr	r3, [r7, #4]
   83b88:	2b00      	cmp	r3, #0
   83b8a:	d102      	bne.n	83b92 <vTaskPlaceOnEventList+0x16>
   83b8c:	4b1a      	ldr	r3, [pc, #104]	; (83bf8 <vTaskPlaceOnEventList+0x7c>)
   83b8e:	4798      	blx	r3
   83b90:	e7fe      	b.n	83b90 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   83b92:	4b1a      	ldr	r3, [pc, #104]	; (83bfc <vTaskPlaceOnEventList+0x80>)
   83b94:	681b      	ldr	r3, [r3, #0]
   83b96:	3318      	adds	r3, #24
   83b98:	6878      	ldr	r0, [r7, #4]
   83b9a:	4619      	mov	r1, r3
   83b9c:	4b18      	ldr	r3, [pc, #96]	; (83c00 <vTaskPlaceOnEventList+0x84>)
   83b9e:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83ba0:	4b16      	ldr	r3, [pc, #88]	; (83bfc <vTaskPlaceOnEventList+0x80>)
   83ba2:	681b      	ldr	r3, [r3, #0]
   83ba4:	3304      	adds	r3, #4
   83ba6:	4618      	mov	r0, r3
   83ba8:	4b16      	ldr	r3, [pc, #88]	; (83c04 <vTaskPlaceOnEventList+0x88>)
   83baa:	4798      	blx	r3
   83bac:	4603      	mov	r3, r0
   83bae:	2b00      	cmp	r3, #0
   83bb0:	d10b      	bne.n	83bca <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83bb2:	4b12      	ldr	r3, [pc, #72]	; (83bfc <vTaskPlaceOnEventList+0x80>)
   83bb4:	681b      	ldr	r3, [r3, #0]
   83bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83bb8:	2201      	movs	r2, #1
   83bba:	fa02 f303 	lsl.w	r3, r2, r3
   83bbe:	43da      	mvns	r2, r3
   83bc0:	4b11      	ldr	r3, [pc, #68]	; (83c08 <vTaskPlaceOnEventList+0x8c>)
   83bc2:	681b      	ldr	r3, [r3, #0]
   83bc4:	401a      	ands	r2, r3
   83bc6:	4b10      	ldr	r3, [pc, #64]	; (83c08 <vTaskPlaceOnEventList+0x8c>)
   83bc8:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   83bca:	683b      	ldr	r3, [r7, #0]
   83bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
   83bd0:	d107      	bne.n	83be2 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83bd2:	4b0a      	ldr	r3, [pc, #40]	; (83bfc <vTaskPlaceOnEventList+0x80>)
   83bd4:	681b      	ldr	r3, [r3, #0]
   83bd6:	3304      	adds	r3, #4
   83bd8:	480c      	ldr	r0, [pc, #48]	; (83c0c <vTaskPlaceOnEventList+0x90>)
   83bda:	4619      	mov	r1, r3
   83bdc:	4b0c      	ldr	r3, [pc, #48]	; (83c10 <vTaskPlaceOnEventList+0x94>)
   83bde:	4798      	blx	r3
   83be0:	e007      	b.n	83bf2 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   83be2:	4b0c      	ldr	r3, [pc, #48]	; (83c14 <vTaskPlaceOnEventList+0x98>)
   83be4:	681a      	ldr	r2, [r3, #0]
   83be6:	683b      	ldr	r3, [r7, #0]
   83be8:	4413      	add	r3, r2
   83bea:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   83bec:	68f8      	ldr	r0, [r7, #12]
   83bee:	4b0a      	ldr	r3, [pc, #40]	; (83c18 <vTaskPlaceOnEventList+0x9c>)
   83bf0:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   83bf2:	3710      	adds	r7, #16
   83bf4:	46bd      	mov	sp, r7
   83bf6:	bd80      	pop	{r7, pc}
   83bf8:	00082729 	.word	0x00082729
   83bfc:	2007a500 	.word	0x2007a500
   83c00:	00082441 	.word	0x00082441
   83c04:	000824b1 	.word	0x000824b1
   83c08:	2007a5e0 	.word	0x2007a5e0
   83c0c:	2007a5c4 	.word	0x2007a5c4
   83c10:	000823f9 	.word	0x000823f9
   83c14:	2007a5dc 	.word	0x2007a5dc
   83c18:	00084029 	.word	0x00084029

00083c1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   83c1c:	b580      	push	{r7, lr}
   83c1e:	b084      	sub	sp, #16
   83c20:	af00      	add	r7, sp, #0
   83c22:	6078      	str	r0, [r7, #4]
   83c24:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   83c26:	687b      	ldr	r3, [r7, #4]
   83c28:	2b00      	cmp	r3, #0
   83c2a:	d102      	bne.n	83c32 <vTaskPlaceOnEventListRestricted+0x16>
   83c2c:	4b14      	ldr	r3, [pc, #80]	; (83c80 <vTaskPlaceOnEventListRestricted+0x64>)
   83c2e:	4798      	blx	r3
   83c30:	e7fe      	b.n	83c30 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   83c32:	4b14      	ldr	r3, [pc, #80]	; (83c84 <vTaskPlaceOnEventListRestricted+0x68>)
   83c34:	681b      	ldr	r3, [r3, #0]
   83c36:	3318      	adds	r3, #24
   83c38:	6878      	ldr	r0, [r7, #4]
   83c3a:	4619      	mov	r1, r3
   83c3c:	4b12      	ldr	r3, [pc, #72]	; (83c88 <vTaskPlaceOnEventListRestricted+0x6c>)
   83c3e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83c40:	4b10      	ldr	r3, [pc, #64]	; (83c84 <vTaskPlaceOnEventListRestricted+0x68>)
   83c42:	681b      	ldr	r3, [r3, #0]
   83c44:	3304      	adds	r3, #4
   83c46:	4618      	mov	r0, r3
   83c48:	4b10      	ldr	r3, [pc, #64]	; (83c8c <vTaskPlaceOnEventListRestricted+0x70>)
   83c4a:	4798      	blx	r3
   83c4c:	4603      	mov	r3, r0
   83c4e:	2b00      	cmp	r3, #0
   83c50:	d10b      	bne.n	83c6a <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83c52:	4b0c      	ldr	r3, [pc, #48]	; (83c84 <vTaskPlaceOnEventListRestricted+0x68>)
   83c54:	681b      	ldr	r3, [r3, #0]
   83c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83c58:	2201      	movs	r2, #1
   83c5a:	fa02 f303 	lsl.w	r3, r2, r3
   83c5e:	43da      	mvns	r2, r3
   83c60:	4b0b      	ldr	r3, [pc, #44]	; (83c90 <vTaskPlaceOnEventListRestricted+0x74>)
   83c62:	681b      	ldr	r3, [r3, #0]
   83c64:	401a      	ands	r2, r3
   83c66:	4b0a      	ldr	r3, [pc, #40]	; (83c90 <vTaskPlaceOnEventListRestricted+0x74>)
   83c68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   83c6a:	4b0a      	ldr	r3, [pc, #40]	; (83c94 <vTaskPlaceOnEventListRestricted+0x78>)
   83c6c:	681a      	ldr	r2, [r3, #0]
   83c6e:	683b      	ldr	r3, [r7, #0]
   83c70:	4413      	add	r3, r2
   83c72:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83c74:	68f8      	ldr	r0, [r7, #12]
   83c76:	4b08      	ldr	r3, [pc, #32]	; (83c98 <vTaskPlaceOnEventListRestricted+0x7c>)
   83c78:	4798      	blx	r3
	}
   83c7a:	3710      	adds	r7, #16
   83c7c:	46bd      	mov	sp, r7
   83c7e:	bd80      	pop	{r7, pc}
   83c80:	00082729 	.word	0x00082729
   83c84:	2007a500 	.word	0x2007a500
   83c88:	000823f9 	.word	0x000823f9
   83c8c:	000824b1 	.word	0x000824b1
   83c90:	2007a5e0 	.word	0x2007a5e0
   83c94:	2007a5dc 	.word	0x2007a5dc
   83c98:	00084029 	.word	0x00084029

00083c9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   83c9c:	b580      	push	{r7, lr}
   83c9e:	b084      	sub	sp, #16
   83ca0:	af00      	add	r7, sp, #0
   83ca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   83ca4:	687b      	ldr	r3, [r7, #4]
   83ca6:	68db      	ldr	r3, [r3, #12]
   83ca8:	68db      	ldr	r3, [r3, #12]
   83caa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   83cac:	68bb      	ldr	r3, [r7, #8]
   83cae:	2b00      	cmp	r3, #0
   83cb0:	d102      	bne.n	83cb8 <xTaskRemoveFromEventList+0x1c>
   83cb2:	4b21      	ldr	r3, [pc, #132]	; (83d38 <xTaskRemoveFromEventList+0x9c>)
   83cb4:	4798      	blx	r3
   83cb6:	e7fe      	b.n	83cb6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   83cb8:	68bb      	ldr	r3, [r7, #8]
   83cba:	3318      	adds	r3, #24
   83cbc:	4618      	mov	r0, r3
   83cbe:	4b1f      	ldr	r3, [pc, #124]	; (83d3c <xTaskRemoveFromEventList+0xa0>)
   83cc0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83cc2:	4b1f      	ldr	r3, [pc, #124]	; (83d40 <xTaskRemoveFromEventList+0xa4>)
   83cc4:	681b      	ldr	r3, [r3, #0]
   83cc6:	2b00      	cmp	r3, #0
   83cc8:	d11c      	bne.n	83d04 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   83cca:	68bb      	ldr	r3, [r7, #8]
   83ccc:	3304      	adds	r3, #4
   83cce:	4618      	mov	r0, r3
   83cd0:	4b1a      	ldr	r3, [pc, #104]	; (83d3c <xTaskRemoveFromEventList+0xa0>)
   83cd2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   83cd4:	68bb      	ldr	r3, [r7, #8]
   83cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83cd8:	2201      	movs	r2, #1
   83cda:	409a      	lsls	r2, r3
   83cdc:	4b19      	ldr	r3, [pc, #100]	; (83d44 <xTaskRemoveFromEventList+0xa8>)
   83cde:	681b      	ldr	r3, [r3, #0]
   83ce0:	431a      	orrs	r2, r3
   83ce2:	4b18      	ldr	r3, [pc, #96]	; (83d44 <xTaskRemoveFromEventList+0xa8>)
   83ce4:	601a      	str	r2, [r3, #0]
   83ce6:	68bb      	ldr	r3, [r7, #8]
   83ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83cea:	4613      	mov	r3, r2
   83cec:	009b      	lsls	r3, r3, #2
   83cee:	4413      	add	r3, r2
   83cf0:	009b      	lsls	r3, r3, #2
   83cf2:	4a15      	ldr	r2, [pc, #84]	; (83d48 <xTaskRemoveFromEventList+0xac>)
   83cf4:	441a      	add	r2, r3
   83cf6:	68bb      	ldr	r3, [r7, #8]
   83cf8:	3304      	adds	r3, #4
   83cfa:	4610      	mov	r0, r2
   83cfc:	4619      	mov	r1, r3
   83cfe:	4b13      	ldr	r3, [pc, #76]	; (83d4c <xTaskRemoveFromEventList+0xb0>)
   83d00:	4798      	blx	r3
   83d02:	e005      	b.n	83d10 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   83d04:	68bb      	ldr	r3, [r7, #8]
   83d06:	3318      	adds	r3, #24
   83d08:	4811      	ldr	r0, [pc, #68]	; (83d50 <xTaskRemoveFromEventList+0xb4>)
   83d0a:	4619      	mov	r1, r3
   83d0c:	4b0f      	ldr	r3, [pc, #60]	; (83d4c <xTaskRemoveFromEventList+0xb0>)
   83d0e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   83d10:	68bb      	ldr	r3, [r7, #8]
   83d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83d14:	4b0f      	ldr	r3, [pc, #60]	; (83d54 <xTaskRemoveFromEventList+0xb8>)
   83d16:	681b      	ldr	r3, [r3, #0]
   83d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83d1a:	429a      	cmp	r2, r3
   83d1c:	d905      	bls.n	83d2a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   83d1e:	2301      	movs	r3, #1
   83d20:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   83d22:	4b0d      	ldr	r3, [pc, #52]	; (83d58 <xTaskRemoveFromEventList+0xbc>)
   83d24:	2201      	movs	r2, #1
   83d26:	601a      	str	r2, [r3, #0]
   83d28:	e001      	b.n	83d2e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   83d2a:	2300      	movs	r3, #0
   83d2c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   83d2e:	68fb      	ldr	r3, [r7, #12]
}
   83d30:	4618      	mov	r0, r3
   83d32:	3710      	adds	r7, #16
   83d34:	46bd      	mov	sp, r7
   83d36:	bd80      	pop	{r7, pc}
   83d38:	00082729 	.word	0x00082729
   83d3c:	000824b1 	.word	0x000824b1
   83d40:	2007a5f8 	.word	0x2007a5f8
   83d44:	2007a5e0 	.word	0x2007a5e0
   83d48:	2007a504 	.word	0x2007a504
   83d4c:	000823f9 	.word	0x000823f9
   83d50:	2007a598 	.word	0x2007a598
   83d54:	2007a500 	.word	0x2007a500
   83d58:	2007a5ec 	.word	0x2007a5ec

00083d5c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   83d5c:	b580      	push	{r7, lr}
   83d5e:	b082      	sub	sp, #8
   83d60:	af00      	add	r7, sp, #0
   83d62:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   83d64:	687b      	ldr	r3, [r7, #4]
   83d66:	2b00      	cmp	r3, #0
   83d68:	d102      	bne.n	83d70 <vTaskSetTimeOutState+0x14>
   83d6a:	4b07      	ldr	r3, [pc, #28]	; (83d88 <vTaskSetTimeOutState+0x2c>)
   83d6c:	4798      	blx	r3
   83d6e:	e7fe      	b.n	83d6e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83d70:	4b06      	ldr	r3, [pc, #24]	; (83d8c <vTaskSetTimeOutState+0x30>)
   83d72:	681a      	ldr	r2, [r3, #0]
   83d74:	687b      	ldr	r3, [r7, #4]
   83d76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   83d78:	4b05      	ldr	r3, [pc, #20]	; (83d90 <vTaskSetTimeOutState+0x34>)
   83d7a:	681a      	ldr	r2, [r3, #0]
   83d7c:	687b      	ldr	r3, [r7, #4]
   83d7e:	605a      	str	r2, [r3, #4]
}
   83d80:	3708      	adds	r7, #8
   83d82:	46bd      	mov	sp, r7
   83d84:	bd80      	pop	{r7, pc}
   83d86:	bf00      	nop
   83d88:	00082729 	.word	0x00082729
   83d8c:	2007a5f0 	.word	0x2007a5f0
   83d90:	2007a5dc 	.word	0x2007a5dc

00083d94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   83d94:	b580      	push	{r7, lr}
   83d96:	b084      	sub	sp, #16
   83d98:	af00      	add	r7, sp, #0
   83d9a:	6078      	str	r0, [r7, #4]
   83d9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   83d9e:	687b      	ldr	r3, [r7, #4]
   83da0:	2b00      	cmp	r3, #0
   83da2:	d102      	bne.n	83daa <xTaskCheckForTimeOut+0x16>
   83da4:	4b21      	ldr	r3, [pc, #132]	; (83e2c <xTaskCheckForTimeOut+0x98>)
   83da6:	4798      	blx	r3
   83da8:	e7fe      	b.n	83da8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   83daa:	683b      	ldr	r3, [r7, #0]
   83dac:	2b00      	cmp	r3, #0
   83dae:	d102      	bne.n	83db6 <xTaskCheckForTimeOut+0x22>
   83db0:	4b1e      	ldr	r3, [pc, #120]	; (83e2c <xTaskCheckForTimeOut+0x98>)
   83db2:	4798      	blx	r3
   83db4:	e7fe      	b.n	83db4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   83db6:	4b1e      	ldr	r3, [pc, #120]	; (83e30 <xTaskCheckForTimeOut+0x9c>)
   83db8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   83dba:	4b1e      	ldr	r3, [pc, #120]	; (83e34 <xTaskCheckForTimeOut+0xa0>)
   83dbc:	681b      	ldr	r3, [r3, #0]
   83dbe:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   83dc0:	683b      	ldr	r3, [r7, #0]
   83dc2:	681b      	ldr	r3, [r3, #0]
   83dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
   83dc8:	d102      	bne.n	83dd0 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   83dca:	2300      	movs	r3, #0
   83dcc:	60fb      	str	r3, [r7, #12]
   83dce:	e026      	b.n	83e1e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   83dd0:	687b      	ldr	r3, [r7, #4]
   83dd2:	681a      	ldr	r2, [r3, #0]
   83dd4:	4b18      	ldr	r3, [pc, #96]	; (83e38 <xTaskCheckForTimeOut+0xa4>)
   83dd6:	681b      	ldr	r3, [r3, #0]
   83dd8:	429a      	cmp	r2, r3
   83dda:	d007      	beq.n	83dec <xTaskCheckForTimeOut+0x58>
   83ddc:	687b      	ldr	r3, [r7, #4]
   83dde:	685a      	ldr	r2, [r3, #4]
   83de0:	68bb      	ldr	r3, [r7, #8]
   83de2:	429a      	cmp	r2, r3
   83de4:	d802      	bhi.n	83dec <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   83de6:	2301      	movs	r3, #1
   83de8:	60fb      	str	r3, [r7, #12]
   83dea:	e018      	b.n	83e1e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   83dec:	687b      	ldr	r3, [r7, #4]
   83dee:	685b      	ldr	r3, [r3, #4]
   83df0:	68ba      	ldr	r2, [r7, #8]
   83df2:	1ad2      	subs	r2, r2, r3
   83df4:	683b      	ldr	r3, [r7, #0]
   83df6:	681b      	ldr	r3, [r3, #0]
   83df8:	429a      	cmp	r2, r3
   83dfa:	d20e      	bcs.n	83e1a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   83dfc:	683b      	ldr	r3, [r7, #0]
   83dfe:	681a      	ldr	r2, [r3, #0]
   83e00:	687b      	ldr	r3, [r7, #4]
   83e02:	6859      	ldr	r1, [r3, #4]
   83e04:	68bb      	ldr	r3, [r7, #8]
   83e06:	1acb      	subs	r3, r1, r3
   83e08:	441a      	add	r2, r3
   83e0a:	683b      	ldr	r3, [r7, #0]
   83e0c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   83e0e:	6878      	ldr	r0, [r7, #4]
   83e10:	4b0a      	ldr	r3, [pc, #40]	; (83e3c <xTaskCheckForTimeOut+0xa8>)
   83e12:	4798      	blx	r3
			xReturn = pdFALSE;
   83e14:	2300      	movs	r3, #0
   83e16:	60fb      	str	r3, [r7, #12]
   83e18:	e001      	b.n	83e1e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   83e1a:	2301      	movs	r3, #1
   83e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83e1e:	4b08      	ldr	r3, [pc, #32]	; (83e40 <xTaskCheckForTimeOut+0xac>)
   83e20:	4798      	blx	r3

	return xReturn;
   83e22:	68fb      	ldr	r3, [r7, #12]
}
   83e24:	4618      	mov	r0, r3
   83e26:	3710      	adds	r7, #16
   83e28:	46bd      	mov	sp, r7
   83e2a:	bd80      	pop	{r7, pc}
   83e2c:	00082729 	.word	0x00082729
   83e30:	000826ad 	.word	0x000826ad
   83e34:	2007a5dc 	.word	0x2007a5dc
   83e38:	2007a5f0 	.word	0x2007a5f0
   83e3c:	00083d5d 	.word	0x00083d5d
   83e40:	000826f1 	.word	0x000826f1

00083e44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   83e44:	b480      	push	{r7}
   83e46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   83e48:	4b03      	ldr	r3, [pc, #12]	; (83e58 <vTaskMissedYield+0x14>)
   83e4a:	2201      	movs	r2, #1
   83e4c:	601a      	str	r2, [r3, #0]
}
   83e4e:	46bd      	mov	sp, r7
   83e50:	f85d 7b04 	ldr.w	r7, [sp], #4
   83e54:	4770      	bx	lr
   83e56:	bf00      	nop
   83e58:	2007a5ec 	.word	0x2007a5ec

00083e5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   83e5c:	b580      	push	{r7, lr}
   83e5e:	b082      	sub	sp, #8
   83e60:	af00      	add	r7, sp, #0
   83e62:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   83e64:	4b04      	ldr	r3, [pc, #16]	; (83e78 <prvIdleTask+0x1c>)
   83e66:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   83e68:	4b04      	ldr	r3, [pc, #16]	; (83e7c <prvIdleTask+0x20>)
   83e6a:	681b      	ldr	r3, [r3, #0]
   83e6c:	2b01      	cmp	r3, #1
   83e6e:	d901      	bls.n	83e74 <prvIdleTask+0x18>
			{
				taskYIELD();
   83e70:	4b03      	ldr	r3, [pc, #12]	; (83e80 <prvIdleTask+0x24>)
   83e72:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   83e74:	e7f6      	b.n	83e64 <prvIdleTask+0x8>
   83e76:	bf00      	nop
   83e78:	00083f9d 	.word	0x00083f9d
   83e7c:	2007a504 	.word	0x2007a504
   83e80:	0008268d 	.word	0x0008268d

00083e84 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83e84:	b580      	push	{r7, lr}
   83e86:	b086      	sub	sp, #24
   83e88:	af00      	add	r7, sp, #0
   83e8a:	60f8      	str	r0, [r7, #12]
   83e8c:	60b9      	str	r1, [r7, #8]
   83e8e:	607a      	str	r2, [r7, #4]
   83e90:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   83e92:	2300      	movs	r3, #0
   83e94:	617b      	str	r3, [r7, #20]
   83e96:	e012      	b.n	83ebe <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   83e98:	68ba      	ldr	r2, [r7, #8]
   83e9a:	697b      	ldr	r3, [r7, #20]
   83e9c:	4413      	add	r3, r2
   83e9e:	781a      	ldrb	r2, [r3, #0]
   83ea0:	68f9      	ldr	r1, [r7, #12]
   83ea2:	697b      	ldr	r3, [r7, #20]
   83ea4:	440b      	add	r3, r1
   83ea6:	3330      	adds	r3, #48	; 0x30
   83ea8:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   83eaa:	68ba      	ldr	r2, [r7, #8]
   83eac:	697b      	ldr	r3, [r7, #20]
   83eae:	4413      	add	r3, r2
   83eb0:	781b      	ldrb	r3, [r3, #0]
   83eb2:	2b00      	cmp	r3, #0
   83eb4:	d100      	bne.n	83eb8 <prvInitialiseTCBVariables+0x34>
		{
			break;
   83eb6:	e005      	b.n	83ec4 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   83eb8:	697b      	ldr	r3, [r7, #20]
   83eba:	3301      	adds	r3, #1
   83ebc:	617b      	str	r3, [r7, #20]
   83ebe:	697b      	ldr	r3, [r7, #20]
   83ec0:	2b09      	cmp	r3, #9
   83ec2:	d9e9      	bls.n	83e98 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   83ec4:	68fb      	ldr	r3, [r7, #12]
   83ec6:	2200      	movs	r2, #0
   83ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   83ecc:	687b      	ldr	r3, [r7, #4]
   83ece:	2b04      	cmp	r3, #4
   83ed0:	d901      	bls.n	83ed6 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   83ed2:	2304      	movs	r3, #4
   83ed4:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   83ed6:	68fb      	ldr	r3, [r7, #12]
   83ed8:	687a      	ldr	r2, [r7, #4]
   83eda:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   83edc:	68fb      	ldr	r3, [r7, #12]
   83ede:	687a      	ldr	r2, [r7, #4]
   83ee0:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   83ee2:	68fb      	ldr	r3, [r7, #12]
   83ee4:	2200      	movs	r2, #0
   83ee6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   83ee8:	68fb      	ldr	r3, [r7, #12]
   83eea:	3304      	adds	r3, #4
   83eec:	4618      	mov	r0, r3
   83eee:	4b0a      	ldr	r3, [pc, #40]	; (83f18 <prvInitialiseTCBVariables+0x94>)
   83ef0:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   83ef2:	68fb      	ldr	r3, [r7, #12]
   83ef4:	3318      	adds	r3, #24
   83ef6:	4618      	mov	r0, r3
   83ef8:	4b07      	ldr	r3, [pc, #28]	; (83f18 <prvInitialiseTCBVariables+0x94>)
   83efa:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   83efc:	68fb      	ldr	r3, [r7, #12]
   83efe:	68fa      	ldr	r2, [r7, #12]
   83f00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83f02:	687b      	ldr	r3, [r7, #4]
   83f04:	f1c3 0205 	rsb	r2, r3, #5
   83f08:	68fb      	ldr	r3, [r7, #12]
   83f0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   83f0c:	68fb      	ldr	r3, [r7, #12]
   83f0e:	68fa      	ldr	r2, [r7, #12]
   83f10:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   83f12:	3718      	adds	r7, #24
   83f14:	46bd      	mov	sp, r7
   83f16:	bd80      	pop	{r7, pc}
   83f18:	000823e1 	.word	0x000823e1

00083f1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   83f1c:	b580      	push	{r7, lr}
   83f1e:	b082      	sub	sp, #8
   83f20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83f22:	2300      	movs	r3, #0
   83f24:	607b      	str	r3, [r7, #4]
   83f26:	e00c      	b.n	83f42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   83f28:	687a      	ldr	r2, [r7, #4]
   83f2a:	4613      	mov	r3, r2
   83f2c:	009b      	lsls	r3, r3, #2
   83f2e:	4413      	add	r3, r2
   83f30:	009b      	lsls	r3, r3, #2
   83f32:	4a11      	ldr	r2, [pc, #68]	; (83f78 <prvInitialiseTaskLists+0x5c>)
   83f34:	4413      	add	r3, r2
   83f36:	4618      	mov	r0, r3
   83f38:	4b10      	ldr	r3, [pc, #64]	; (83f7c <prvInitialiseTaskLists+0x60>)
   83f3a:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83f3c:	687b      	ldr	r3, [r7, #4]
   83f3e:	3301      	adds	r3, #1
   83f40:	607b      	str	r3, [r7, #4]
   83f42:	687b      	ldr	r3, [r7, #4]
   83f44:	2b04      	cmp	r3, #4
   83f46:	d9ef      	bls.n	83f28 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   83f48:	480d      	ldr	r0, [pc, #52]	; (83f80 <prvInitialiseTaskLists+0x64>)
   83f4a:	4b0c      	ldr	r3, [pc, #48]	; (83f7c <prvInitialiseTaskLists+0x60>)
   83f4c:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   83f4e:	480d      	ldr	r0, [pc, #52]	; (83f84 <prvInitialiseTaskLists+0x68>)
   83f50:	4b0a      	ldr	r3, [pc, #40]	; (83f7c <prvInitialiseTaskLists+0x60>)
   83f52:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   83f54:	480c      	ldr	r0, [pc, #48]	; (83f88 <prvInitialiseTaskLists+0x6c>)
   83f56:	4b09      	ldr	r3, [pc, #36]	; (83f7c <prvInitialiseTaskLists+0x60>)
   83f58:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   83f5a:	480c      	ldr	r0, [pc, #48]	; (83f8c <prvInitialiseTaskLists+0x70>)
   83f5c:	4b07      	ldr	r3, [pc, #28]	; (83f7c <prvInitialiseTaskLists+0x60>)
   83f5e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   83f60:	480b      	ldr	r0, [pc, #44]	; (83f90 <prvInitialiseTaskLists+0x74>)
   83f62:	4b06      	ldr	r3, [pc, #24]	; (83f7c <prvInitialiseTaskLists+0x60>)
   83f64:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   83f66:	4b0b      	ldr	r3, [pc, #44]	; (83f94 <prvInitialiseTaskLists+0x78>)
   83f68:	4a05      	ldr	r2, [pc, #20]	; (83f80 <prvInitialiseTaskLists+0x64>)
   83f6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   83f6c:	4b0a      	ldr	r3, [pc, #40]	; (83f98 <prvInitialiseTaskLists+0x7c>)
   83f6e:	4a05      	ldr	r2, [pc, #20]	; (83f84 <prvInitialiseTaskLists+0x68>)
   83f70:	601a      	str	r2, [r3, #0]
}
   83f72:	3708      	adds	r7, #8
   83f74:	46bd      	mov	sp, r7
   83f76:	bd80      	pop	{r7, pc}
   83f78:	2007a504 	.word	0x2007a504
   83f7c:	000823a1 	.word	0x000823a1
   83f80:	2007a568 	.word	0x2007a568
   83f84:	2007a57c 	.word	0x2007a57c
   83f88:	2007a598 	.word	0x2007a598
   83f8c:	2007a5ac 	.word	0x2007a5ac
   83f90:	2007a5c4 	.word	0x2007a5c4
   83f94:	2007a590 	.word	0x2007a590
   83f98:	2007a594 	.word	0x2007a594

00083f9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   83f9c:	b580      	push	{r7, lr}
   83f9e:	b082      	sub	sp, #8
   83fa0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   83fa2:	e028      	b.n	83ff6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   83fa4:	4b17      	ldr	r3, [pc, #92]	; (84004 <prvCheckTasksWaitingTermination+0x68>)
   83fa6:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   83fa8:	4b17      	ldr	r3, [pc, #92]	; (84008 <prvCheckTasksWaitingTermination+0x6c>)
   83faa:	681b      	ldr	r3, [r3, #0]
   83fac:	2b00      	cmp	r3, #0
   83fae:	bf14      	ite	ne
   83fb0:	2300      	movne	r3, #0
   83fb2:	2301      	moveq	r3, #1
   83fb4:	b2db      	uxtb	r3, r3
   83fb6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   83fb8:	4b14      	ldr	r3, [pc, #80]	; (8400c <prvCheckTasksWaitingTermination+0x70>)
   83fba:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   83fbc:	687b      	ldr	r3, [r7, #4]
   83fbe:	2b00      	cmp	r3, #0
   83fc0:	d119      	bne.n	83ff6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   83fc2:	4b13      	ldr	r3, [pc, #76]	; (84010 <prvCheckTasksWaitingTermination+0x74>)
   83fc4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   83fc6:	4b10      	ldr	r3, [pc, #64]	; (84008 <prvCheckTasksWaitingTermination+0x6c>)
   83fc8:	68db      	ldr	r3, [r3, #12]
   83fca:	68db      	ldr	r3, [r3, #12]
   83fcc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   83fce:	683b      	ldr	r3, [r7, #0]
   83fd0:	3304      	adds	r3, #4
   83fd2:	4618      	mov	r0, r3
   83fd4:	4b0f      	ldr	r3, [pc, #60]	; (84014 <prvCheckTasksWaitingTermination+0x78>)
   83fd6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   83fd8:	4b0f      	ldr	r3, [pc, #60]	; (84018 <prvCheckTasksWaitingTermination+0x7c>)
   83fda:	681b      	ldr	r3, [r3, #0]
   83fdc:	1e5a      	subs	r2, r3, #1
   83fde:	4b0e      	ldr	r3, [pc, #56]	; (84018 <prvCheckTasksWaitingTermination+0x7c>)
   83fe0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   83fe2:	4b0e      	ldr	r3, [pc, #56]	; (8401c <prvCheckTasksWaitingTermination+0x80>)
   83fe4:	681b      	ldr	r3, [r3, #0]
   83fe6:	1e5a      	subs	r2, r3, #1
   83fe8:	4b0c      	ldr	r3, [pc, #48]	; (8401c <prvCheckTasksWaitingTermination+0x80>)
   83fea:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   83fec:	4b0c      	ldr	r3, [pc, #48]	; (84020 <prvCheckTasksWaitingTermination+0x84>)
   83fee:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   83ff0:	6838      	ldr	r0, [r7, #0]
   83ff2:	4b0c      	ldr	r3, [pc, #48]	; (84024 <prvCheckTasksWaitingTermination+0x88>)
   83ff4:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   83ff6:	4b09      	ldr	r3, [pc, #36]	; (8401c <prvCheckTasksWaitingTermination+0x80>)
   83ff8:	681b      	ldr	r3, [r3, #0]
   83ffa:	2b00      	cmp	r3, #0
   83ffc:	d1d2      	bne.n	83fa4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   83ffe:	3708      	adds	r7, #8
   84000:	46bd      	mov	sp, r7
   84002:	bd80      	pop	{r7, pc}
   84004:	00083799 	.word	0x00083799
   84008:	2007a5ac 	.word	0x2007a5ac
   8400c:	000837b5 	.word	0x000837b5
   84010:	000826ad 	.word	0x000826ad
   84014:	000824b1 	.word	0x000824b1
   84018:	2007a5d8 	.word	0x2007a5d8
   8401c:	2007a5c0 	.word	0x2007a5c0
   84020:	000826f1 	.word	0x000826f1
   84024:	00084109 	.word	0x00084109

00084028 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84028:	b580      	push	{r7, lr}
   8402a:	b082      	sub	sp, #8
   8402c:	af00      	add	r7, sp, #0
   8402e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84030:	4b13      	ldr	r3, [pc, #76]	; (84080 <prvAddCurrentTaskToDelayedList+0x58>)
   84032:	681b      	ldr	r3, [r3, #0]
   84034:	687a      	ldr	r2, [r7, #4]
   84036:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84038:	4b12      	ldr	r3, [pc, #72]	; (84084 <prvAddCurrentTaskToDelayedList+0x5c>)
   8403a:	681b      	ldr	r3, [r3, #0]
   8403c:	687a      	ldr	r2, [r7, #4]
   8403e:	429a      	cmp	r2, r3
   84040:	d209      	bcs.n	84056 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84042:	4b11      	ldr	r3, [pc, #68]	; (84088 <prvAddCurrentTaskToDelayedList+0x60>)
   84044:	681a      	ldr	r2, [r3, #0]
   84046:	4b0e      	ldr	r3, [pc, #56]	; (84080 <prvAddCurrentTaskToDelayedList+0x58>)
   84048:	681b      	ldr	r3, [r3, #0]
   8404a:	3304      	adds	r3, #4
   8404c:	4610      	mov	r0, r2
   8404e:	4619      	mov	r1, r3
   84050:	4b0e      	ldr	r3, [pc, #56]	; (8408c <prvAddCurrentTaskToDelayedList+0x64>)
   84052:	4798      	blx	r3
   84054:	e010      	b.n	84078 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84056:	4b0e      	ldr	r3, [pc, #56]	; (84090 <prvAddCurrentTaskToDelayedList+0x68>)
   84058:	681a      	ldr	r2, [r3, #0]
   8405a:	4b09      	ldr	r3, [pc, #36]	; (84080 <prvAddCurrentTaskToDelayedList+0x58>)
   8405c:	681b      	ldr	r3, [r3, #0]
   8405e:	3304      	adds	r3, #4
   84060:	4610      	mov	r0, r2
   84062:	4619      	mov	r1, r3
   84064:	4b09      	ldr	r3, [pc, #36]	; (8408c <prvAddCurrentTaskToDelayedList+0x64>)
   84066:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84068:	4b0a      	ldr	r3, [pc, #40]	; (84094 <prvAddCurrentTaskToDelayedList+0x6c>)
   8406a:	681b      	ldr	r3, [r3, #0]
   8406c:	687a      	ldr	r2, [r7, #4]
   8406e:	429a      	cmp	r2, r3
   84070:	d202      	bcs.n	84078 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84072:	4b08      	ldr	r3, [pc, #32]	; (84094 <prvAddCurrentTaskToDelayedList+0x6c>)
   84074:	687a      	ldr	r2, [r7, #4]
   84076:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84078:	3708      	adds	r7, #8
   8407a:	46bd      	mov	sp, r7
   8407c:	bd80      	pop	{r7, pc}
   8407e:	bf00      	nop
   84080:	2007a500 	.word	0x2007a500
   84084:	2007a5dc 	.word	0x2007a5dc
   84088:	2007a594 	.word	0x2007a594
   8408c:	00082441 	.word	0x00082441
   84090:	2007a590 	.word	0x2007a590
   84094:	20070008 	.word	0x20070008

00084098 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   84098:	b580      	push	{r7, lr}
   8409a:	b084      	sub	sp, #16
   8409c:	af00      	add	r7, sp, #0
   8409e:	4603      	mov	r3, r0
   840a0:	6039      	str	r1, [r7, #0]
   840a2:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   840a4:	2048      	movs	r0, #72	; 0x48
   840a6:	4b15      	ldr	r3, [pc, #84]	; (840fc <prvAllocateTCBAndStack+0x64>)
   840a8:	4798      	blx	r3
   840aa:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   840ac:	68fb      	ldr	r3, [r7, #12]
   840ae:	2b00      	cmp	r3, #0
   840b0:	d01f      	beq.n	840f2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   840b2:	683b      	ldr	r3, [r7, #0]
   840b4:	2b00      	cmp	r3, #0
   840b6:	d106      	bne.n	840c6 <prvAllocateTCBAndStack+0x2e>
   840b8:	88fb      	ldrh	r3, [r7, #6]
   840ba:	009b      	lsls	r3, r3, #2
   840bc:	4618      	mov	r0, r3
   840be:	4b0f      	ldr	r3, [pc, #60]	; (840fc <prvAllocateTCBAndStack+0x64>)
   840c0:	4798      	blx	r3
   840c2:	4603      	mov	r3, r0
   840c4:	e000      	b.n	840c8 <prvAllocateTCBAndStack+0x30>
   840c6:	683b      	ldr	r3, [r7, #0]
   840c8:	68fa      	ldr	r2, [r7, #12]
   840ca:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   840cc:	68fb      	ldr	r3, [r7, #12]
   840ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840d0:	2b00      	cmp	r3, #0
   840d2:	d105      	bne.n	840e0 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   840d4:	68f8      	ldr	r0, [r7, #12]
   840d6:	4b0a      	ldr	r3, [pc, #40]	; (84100 <prvAllocateTCBAndStack+0x68>)
   840d8:	4798      	blx	r3
			pxNewTCB = NULL;
   840da:	2300      	movs	r3, #0
   840dc:	60fb      	str	r3, [r7, #12]
   840de:	e008      	b.n	840f2 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   840e0:	68fb      	ldr	r3, [r7, #12]
   840e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   840e4:	88fb      	ldrh	r3, [r7, #6]
   840e6:	009b      	lsls	r3, r3, #2
   840e8:	4610      	mov	r0, r2
   840ea:	21a5      	movs	r1, #165	; 0xa5
   840ec:	461a      	mov	r2, r3
   840ee:	4b05      	ldr	r3, [pc, #20]	; (84104 <prvAllocateTCBAndStack+0x6c>)
   840f0:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   840f2:	68fb      	ldr	r3, [r7, #12]
}
   840f4:	4618      	mov	r0, r3
   840f6:	3710      	adds	r7, #16
   840f8:	46bd      	mov	sp, r7
   840fa:	bd80      	pop	{r7, pc}
   840fc:	0008284d 	.word	0x0008284d
   84100:	000829c5 	.word	0x000829c5
   84104:	00085ea5 	.word	0x00085ea5

00084108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84108:	b580      	push	{r7, lr}
   8410a:	b082      	sub	sp, #8
   8410c:	af00      	add	r7, sp, #0
   8410e:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84110:	687b      	ldr	r3, [r7, #4]
   84112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84114:	4618      	mov	r0, r3
   84116:	4b04      	ldr	r3, [pc, #16]	; (84128 <prvDeleteTCB+0x20>)
   84118:	4798      	blx	r3
		vPortFree( pxTCB );
   8411a:	6878      	ldr	r0, [r7, #4]
   8411c:	4b02      	ldr	r3, [pc, #8]	; (84128 <prvDeleteTCB+0x20>)
   8411e:	4798      	blx	r3
	}
   84120:	3708      	adds	r7, #8
   84122:	46bd      	mov	sp, r7
   84124:	bd80      	pop	{r7, pc}
   84126:	bf00      	nop
   84128:	000829c5 	.word	0x000829c5

0008412c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   8412c:	b480      	push	{r7}
   8412e:	b083      	sub	sp, #12
   84130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84132:	4b0e      	ldr	r3, [pc, #56]	; (8416c <prvResetNextTaskUnblockTime+0x40>)
   84134:	681b      	ldr	r3, [r3, #0]
   84136:	681b      	ldr	r3, [r3, #0]
   84138:	2b00      	cmp	r3, #0
   8413a:	d101      	bne.n	84140 <prvResetNextTaskUnblockTime+0x14>
   8413c:	2301      	movs	r3, #1
   8413e:	e000      	b.n	84142 <prvResetNextTaskUnblockTime+0x16>
   84140:	2300      	movs	r3, #0
   84142:	2b00      	cmp	r3, #0
   84144:	d004      	beq.n	84150 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84146:	4b0a      	ldr	r3, [pc, #40]	; (84170 <prvResetNextTaskUnblockTime+0x44>)
   84148:	f04f 32ff 	mov.w	r2, #4294967295
   8414c:	601a      	str	r2, [r3, #0]
   8414e:	e008      	b.n	84162 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84150:	4b06      	ldr	r3, [pc, #24]	; (8416c <prvResetNextTaskUnblockTime+0x40>)
   84152:	681b      	ldr	r3, [r3, #0]
   84154:	68db      	ldr	r3, [r3, #12]
   84156:	68db      	ldr	r3, [r3, #12]
   84158:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8415a:	687b      	ldr	r3, [r7, #4]
   8415c:	685a      	ldr	r2, [r3, #4]
   8415e:	4b04      	ldr	r3, [pc, #16]	; (84170 <prvResetNextTaskUnblockTime+0x44>)
   84160:	601a      	str	r2, [r3, #0]
	}
}
   84162:	370c      	adds	r7, #12
   84164:	46bd      	mov	sp, r7
   84166:	f85d 7b04 	ldr.w	r7, [sp], #4
   8416a:	4770      	bx	lr
   8416c:	2007a590 	.word	0x2007a590
   84170:	20070008 	.word	0x20070008

00084174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84174:	b480      	push	{r7}
   84176:	b083      	sub	sp, #12
   84178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8417a:	4b0b      	ldr	r3, [pc, #44]	; (841a8 <xTaskGetSchedulerState+0x34>)
   8417c:	681b      	ldr	r3, [r3, #0]
   8417e:	2b00      	cmp	r3, #0
   84180:	d102      	bne.n	84188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   84182:	2301      	movs	r3, #1
   84184:	607b      	str	r3, [r7, #4]
   84186:	e008      	b.n	8419a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84188:	4b08      	ldr	r3, [pc, #32]	; (841ac <xTaskGetSchedulerState+0x38>)
   8418a:	681b      	ldr	r3, [r3, #0]
   8418c:	2b00      	cmp	r3, #0
   8418e:	d102      	bne.n	84196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   84190:	2302      	movs	r3, #2
   84192:	607b      	str	r3, [r7, #4]
   84194:	e001      	b.n	8419a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   84196:	2300      	movs	r3, #0
   84198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   8419a:	687b      	ldr	r3, [r7, #4]
	}
   8419c:	4618      	mov	r0, r3
   8419e:	370c      	adds	r7, #12
   841a0:	46bd      	mov	sp, r7
   841a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   841a6:	4770      	bx	lr
   841a8:	2007a5e4 	.word	0x2007a5e4
   841ac:	2007a5f8 	.word	0x2007a5f8

000841b0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   841b0:	b580      	push	{r7, lr}
   841b2:	b084      	sub	sp, #16
   841b4:	af00      	add	r7, sp, #0
   841b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   841b8:	687b      	ldr	r3, [r7, #4]
   841ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   841bc:	687b      	ldr	r3, [r7, #4]
   841be:	2b00      	cmp	r3, #0
   841c0:	d062      	beq.n	84288 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   841c2:	68fb      	ldr	r3, [r7, #12]
   841c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   841c6:	4b32      	ldr	r3, [pc, #200]	; (84290 <vTaskPriorityInherit+0xe0>)
   841c8:	681b      	ldr	r3, [r3, #0]
   841ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   841cc:	429a      	cmp	r2, r3
   841ce:	d25b      	bcs.n	84288 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   841d0:	68fb      	ldr	r3, [r7, #12]
   841d2:	699b      	ldr	r3, [r3, #24]
   841d4:	2b00      	cmp	r3, #0
   841d6:	db06      	blt.n	841e6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   841d8:	4b2d      	ldr	r3, [pc, #180]	; (84290 <vTaskPriorityInherit+0xe0>)
   841da:	681b      	ldr	r3, [r3, #0]
   841dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   841de:	f1c3 0205 	rsb	r2, r3, #5
   841e2:	68fb      	ldr	r3, [r7, #12]
   841e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   841e6:	68fb      	ldr	r3, [r7, #12]
   841e8:	6959      	ldr	r1, [r3, #20]
   841ea:	68fb      	ldr	r3, [r7, #12]
   841ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   841ee:	4613      	mov	r3, r2
   841f0:	009b      	lsls	r3, r3, #2
   841f2:	4413      	add	r3, r2
   841f4:	009b      	lsls	r3, r3, #2
   841f6:	4a27      	ldr	r2, [pc, #156]	; (84294 <vTaskPriorityInherit+0xe4>)
   841f8:	4413      	add	r3, r2
   841fa:	4299      	cmp	r1, r3
   841fc:	d101      	bne.n	84202 <vTaskPriorityInherit+0x52>
   841fe:	2301      	movs	r3, #1
   84200:	e000      	b.n	84204 <vTaskPriorityInherit+0x54>
   84202:	2300      	movs	r3, #0
   84204:	2b00      	cmp	r3, #0
   84206:	d03a      	beq.n	8427e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84208:	68fb      	ldr	r3, [r7, #12]
   8420a:	3304      	adds	r3, #4
   8420c:	4618      	mov	r0, r3
   8420e:	4b22      	ldr	r3, [pc, #136]	; (84298 <vTaskPriorityInherit+0xe8>)
   84210:	4798      	blx	r3
   84212:	4603      	mov	r3, r0
   84214:	2b00      	cmp	r3, #0
   84216:	d115      	bne.n	84244 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84218:	68fb      	ldr	r3, [r7, #12]
   8421a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8421c:	491d      	ldr	r1, [pc, #116]	; (84294 <vTaskPriorityInherit+0xe4>)
   8421e:	4613      	mov	r3, r2
   84220:	009b      	lsls	r3, r3, #2
   84222:	4413      	add	r3, r2
   84224:	009b      	lsls	r3, r3, #2
   84226:	440b      	add	r3, r1
   84228:	681b      	ldr	r3, [r3, #0]
   8422a:	2b00      	cmp	r3, #0
   8422c:	d10a      	bne.n	84244 <vTaskPriorityInherit+0x94>
   8422e:	68fb      	ldr	r3, [r7, #12]
   84230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84232:	2201      	movs	r2, #1
   84234:	fa02 f303 	lsl.w	r3, r2, r3
   84238:	43da      	mvns	r2, r3
   8423a:	4b18      	ldr	r3, [pc, #96]	; (8429c <vTaskPriorityInherit+0xec>)
   8423c:	681b      	ldr	r3, [r3, #0]
   8423e:	401a      	ands	r2, r3
   84240:	4b16      	ldr	r3, [pc, #88]	; (8429c <vTaskPriorityInherit+0xec>)
   84242:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84244:	4b12      	ldr	r3, [pc, #72]	; (84290 <vTaskPriorityInherit+0xe0>)
   84246:	681b      	ldr	r3, [r3, #0]
   84248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8424a:	68fb      	ldr	r3, [r7, #12]
   8424c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   8424e:	68fb      	ldr	r3, [r7, #12]
   84250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84252:	2201      	movs	r2, #1
   84254:	409a      	lsls	r2, r3
   84256:	4b11      	ldr	r3, [pc, #68]	; (8429c <vTaskPriorityInherit+0xec>)
   84258:	681b      	ldr	r3, [r3, #0]
   8425a:	431a      	orrs	r2, r3
   8425c:	4b0f      	ldr	r3, [pc, #60]	; (8429c <vTaskPriorityInherit+0xec>)
   8425e:	601a      	str	r2, [r3, #0]
   84260:	68fb      	ldr	r3, [r7, #12]
   84262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84264:	4613      	mov	r3, r2
   84266:	009b      	lsls	r3, r3, #2
   84268:	4413      	add	r3, r2
   8426a:	009b      	lsls	r3, r3, #2
   8426c:	4a09      	ldr	r2, [pc, #36]	; (84294 <vTaskPriorityInherit+0xe4>)
   8426e:	441a      	add	r2, r3
   84270:	68fb      	ldr	r3, [r7, #12]
   84272:	3304      	adds	r3, #4
   84274:	4610      	mov	r0, r2
   84276:	4619      	mov	r1, r3
   84278:	4b09      	ldr	r3, [pc, #36]	; (842a0 <vTaskPriorityInherit+0xf0>)
   8427a:	4798      	blx	r3
   8427c:	e004      	b.n	84288 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8427e:	4b04      	ldr	r3, [pc, #16]	; (84290 <vTaskPriorityInherit+0xe0>)
   84280:	681b      	ldr	r3, [r3, #0]
   84282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84284:	68fb      	ldr	r3, [r7, #12]
   84286:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84288:	3710      	adds	r7, #16
   8428a:	46bd      	mov	sp, r7
   8428c:	bd80      	pop	{r7, pc}
   8428e:	bf00      	nop
   84290:	2007a500 	.word	0x2007a500
   84294:	2007a504 	.word	0x2007a504
   84298:	000824b1 	.word	0x000824b1
   8429c:	2007a5e0 	.word	0x2007a5e0
   842a0:	000823f9 	.word	0x000823f9

000842a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   842a4:	b580      	push	{r7, lr}
   842a6:	b084      	sub	sp, #16
   842a8:	af00      	add	r7, sp, #0
   842aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   842ac:	687b      	ldr	r3, [r7, #4]
   842ae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   842b0:	2300      	movs	r3, #0
   842b2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   842b4:	687b      	ldr	r3, [r7, #4]
   842b6:	2b00      	cmp	r3, #0
   842b8:	d056      	beq.n	84368 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   842ba:	68bb      	ldr	r3, [r7, #8]
   842bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   842be:	2b00      	cmp	r3, #0
   842c0:	d102      	bne.n	842c8 <xTaskPriorityDisinherit+0x24>
   842c2:	4b2c      	ldr	r3, [pc, #176]	; (84374 <xTaskPriorityDisinherit+0xd0>)
   842c4:	4798      	blx	r3
   842c6:	e7fe      	b.n	842c6 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   842c8:	68bb      	ldr	r3, [r7, #8]
   842ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   842cc:	1e5a      	subs	r2, r3, #1
   842ce:	68bb      	ldr	r3, [r7, #8]
   842d0:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   842d2:	68bb      	ldr	r3, [r7, #8]
   842d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   842d6:	68bb      	ldr	r3, [r7, #8]
   842d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   842da:	429a      	cmp	r2, r3
   842dc:	d044      	beq.n	84368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   842de:	68bb      	ldr	r3, [r7, #8]
   842e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   842e2:	2b00      	cmp	r3, #0
   842e4:	d140      	bne.n	84368 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   842e6:	68bb      	ldr	r3, [r7, #8]
   842e8:	3304      	adds	r3, #4
   842ea:	4618      	mov	r0, r3
   842ec:	4b22      	ldr	r3, [pc, #136]	; (84378 <xTaskPriorityDisinherit+0xd4>)
   842ee:	4798      	blx	r3
   842f0:	4603      	mov	r3, r0
   842f2:	2b00      	cmp	r3, #0
   842f4:	d115      	bne.n	84322 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   842f6:	68bb      	ldr	r3, [r7, #8]
   842f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   842fa:	4920      	ldr	r1, [pc, #128]	; (8437c <xTaskPriorityDisinherit+0xd8>)
   842fc:	4613      	mov	r3, r2
   842fe:	009b      	lsls	r3, r3, #2
   84300:	4413      	add	r3, r2
   84302:	009b      	lsls	r3, r3, #2
   84304:	440b      	add	r3, r1
   84306:	681b      	ldr	r3, [r3, #0]
   84308:	2b00      	cmp	r3, #0
   8430a:	d10a      	bne.n	84322 <xTaskPriorityDisinherit+0x7e>
   8430c:	68bb      	ldr	r3, [r7, #8]
   8430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84310:	2201      	movs	r2, #1
   84312:	fa02 f303 	lsl.w	r3, r2, r3
   84316:	43da      	mvns	r2, r3
   84318:	4b19      	ldr	r3, [pc, #100]	; (84380 <xTaskPriorityDisinherit+0xdc>)
   8431a:	681b      	ldr	r3, [r3, #0]
   8431c:	401a      	ands	r2, r3
   8431e:	4b18      	ldr	r3, [pc, #96]	; (84380 <xTaskPriorityDisinherit+0xdc>)
   84320:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84322:	68bb      	ldr	r3, [r7, #8]
   84324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84326:	68bb      	ldr	r3, [r7, #8]
   84328:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8432a:	68bb      	ldr	r3, [r7, #8]
   8432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8432e:	f1c3 0205 	rsb	r2, r3, #5
   84332:	68bb      	ldr	r3, [r7, #8]
   84334:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84336:	68bb      	ldr	r3, [r7, #8]
   84338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8433a:	2201      	movs	r2, #1
   8433c:	409a      	lsls	r2, r3
   8433e:	4b10      	ldr	r3, [pc, #64]	; (84380 <xTaskPriorityDisinherit+0xdc>)
   84340:	681b      	ldr	r3, [r3, #0]
   84342:	431a      	orrs	r2, r3
   84344:	4b0e      	ldr	r3, [pc, #56]	; (84380 <xTaskPriorityDisinherit+0xdc>)
   84346:	601a      	str	r2, [r3, #0]
   84348:	68bb      	ldr	r3, [r7, #8]
   8434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8434c:	4613      	mov	r3, r2
   8434e:	009b      	lsls	r3, r3, #2
   84350:	4413      	add	r3, r2
   84352:	009b      	lsls	r3, r3, #2
   84354:	4a09      	ldr	r2, [pc, #36]	; (8437c <xTaskPriorityDisinherit+0xd8>)
   84356:	441a      	add	r2, r3
   84358:	68bb      	ldr	r3, [r7, #8]
   8435a:	3304      	adds	r3, #4
   8435c:	4610      	mov	r0, r2
   8435e:	4619      	mov	r1, r3
   84360:	4b08      	ldr	r3, [pc, #32]	; (84384 <xTaskPriorityDisinherit+0xe0>)
   84362:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84364:	2301      	movs	r3, #1
   84366:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84368:	68fb      	ldr	r3, [r7, #12]
	}
   8436a:	4618      	mov	r0, r3
   8436c:	3710      	adds	r7, #16
   8436e:	46bd      	mov	sp, r7
   84370:	bd80      	pop	{r7, pc}
   84372:	bf00      	nop
   84374:	00082729 	.word	0x00082729
   84378:	000824b1 	.word	0x000824b1
   8437c:	2007a504 	.word	0x2007a504
   84380:	2007a5e0 	.word	0x2007a5e0
   84384:	000823f9 	.word	0x000823f9

00084388 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84388:	b480      	push	{r7}
   8438a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   8438c:	4b07      	ldr	r3, [pc, #28]	; (843ac <pvTaskIncrementMutexHeldCount+0x24>)
   8438e:	681b      	ldr	r3, [r3, #0]
   84390:	2b00      	cmp	r3, #0
   84392:	d004      	beq.n	8439e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84394:	4b05      	ldr	r3, [pc, #20]	; (843ac <pvTaskIncrementMutexHeldCount+0x24>)
   84396:	681b      	ldr	r3, [r3, #0]
   84398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   8439a:	3201      	adds	r2, #1
   8439c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   8439e:	4b03      	ldr	r3, [pc, #12]	; (843ac <pvTaskIncrementMutexHeldCount+0x24>)
   843a0:	681b      	ldr	r3, [r3, #0]
	}
   843a2:	4618      	mov	r0, r3
   843a4:	46bd      	mov	sp, r7
   843a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   843aa:	4770      	bx	lr
   843ac:	2007a500 	.word	0x2007a500

000843b0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   843b0:	b590      	push	{r4, r7, lr}
   843b2:	b087      	sub	sp, #28
   843b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   843b6:	2300      	movs	r3, #0
   843b8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   843ba:	4b10      	ldr	r3, [pc, #64]	; (843fc <xTimerCreateTimerTask+0x4c>)
   843bc:	4798      	blx	r3

	if( xTimerQueue != NULL )
   843be:	4b10      	ldr	r3, [pc, #64]	; (84400 <xTimerCreateTimerTask+0x50>)
   843c0:	681b      	ldr	r3, [r3, #0]
   843c2:	2b00      	cmp	r3, #0
   843c4:	d00f      	beq.n	843e6 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   843c6:	2302      	movs	r3, #2
   843c8:	9300      	str	r3, [sp, #0]
   843ca:	2300      	movs	r3, #0
   843cc:	9301      	str	r3, [sp, #4]
   843ce:	2300      	movs	r3, #0
   843d0:	9302      	str	r3, [sp, #8]
   843d2:	2300      	movs	r3, #0
   843d4:	9303      	str	r3, [sp, #12]
   843d6:	480b      	ldr	r0, [pc, #44]	; (84404 <xTimerCreateTimerTask+0x54>)
   843d8:	490b      	ldr	r1, [pc, #44]	; (84408 <xTimerCreateTimerTask+0x58>)
   843da:	f44f 7282 	mov.w	r2, #260	; 0x104
   843de:	2300      	movs	r3, #0
   843e0:	4c0a      	ldr	r4, [pc, #40]	; (8440c <xTimerCreateTimerTask+0x5c>)
   843e2:	47a0      	blx	r4
   843e4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   843e6:	687b      	ldr	r3, [r7, #4]
   843e8:	2b00      	cmp	r3, #0
   843ea:	d102      	bne.n	843f2 <xTimerCreateTimerTask+0x42>
   843ec:	4b08      	ldr	r3, [pc, #32]	; (84410 <xTimerCreateTimerTask+0x60>)
   843ee:	4798      	blx	r3
   843f0:	e7fe      	b.n	843f0 <xTimerCreateTimerTask+0x40>
	return xReturn;
   843f2:	687b      	ldr	r3, [r7, #4]
}
   843f4:	4618      	mov	r0, r3
   843f6:	370c      	adds	r7, #12
   843f8:	46bd      	mov	sp, r7
   843fa:	bd90      	pop	{r4, r7, pc}
   843fc:	000848e5 	.word	0x000848e5
   84400:	2007a62c 	.word	0x2007a62c
   84404:	0008452d 	.word	0x0008452d
   84408:	0008616c 	.word	0x0008616c
   8440c:	0008349d 	.word	0x0008349d
   84410:	00082729 	.word	0x00082729

00084414 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   84414:	b590      	push	{r4, r7, lr}
   84416:	b089      	sub	sp, #36	; 0x24
   84418:	af00      	add	r7, sp, #0
   8441a:	60f8      	str	r0, [r7, #12]
   8441c:	60b9      	str	r1, [r7, #8]
   8441e:	607a      	str	r2, [r7, #4]
   84420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   84422:	2300      	movs	r3, #0
   84424:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   84426:	4b1d      	ldr	r3, [pc, #116]	; (8449c <xTimerGenericCommand+0x88>)
   84428:	681b      	ldr	r3, [r3, #0]
   8442a:	2b00      	cmp	r3, #0
   8442c:	d030      	beq.n	84490 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8442e:	68bb      	ldr	r3, [r7, #8]
   84430:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   84432:	687b      	ldr	r3, [r7, #4]
   84434:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   84436:	68fb      	ldr	r3, [r7, #12]
   84438:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   8443a:	68bb      	ldr	r3, [r7, #8]
   8443c:	2b05      	cmp	r3, #5
   8443e:	dc1c      	bgt.n	8447a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   84440:	4b17      	ldr	r3, [pc, #92]	; (844a0 <xTimerGenericCommand+0x8c>)
   84442:	4798      	blx	r3
   84444:	4603      	mov	r3, r0
   84446:	2b02      	cmp	r3, #2
   84448:	d10b      	bne.n	84462 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   8444a:	4b14      	ldr	r3, [pc, #80]	; (8449c <xTimerGenericCommand+0x88>)
   8444c:	681a      	ldr	r2, [r3, #0]
   8444e:	f107 0310 	add.w	r3, r7, #16
   84452:	4610      	mov	r0, r2
   84454:	4619      	mov	r1, r3
   84456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84458:	2300      	movs	r3, #0
   8445a:	4c12      	ldr	r4, [pc, #72]	; (844a4 <xTimerGenericCommand+0x90>)
   8445c:	47a0      	blx	r4
   8445e:	61f8      	str	r0, [r7, #28]
   84460:	e016      	b.n	84490 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84462:	4b0e      	ldr	r3, [pc, #56]	; (8449c <xTimerGenericCommand+0x88>)
   84464:	681a      	ldr	r2, [r3, #0]
   84466:	f107 0310 	add.w	r3, r7, #16
   8446a:	4610      	mov	r0, r2
   8446c:	4619      	mov	r1, r3
   8446e:	2200      	movs	r2, #0
   84470:	2300      	movs	r3, #0
   84472:	4c0c      	ldr	r4, [pc, #48]	; (844a4 <xTimerGenericCommand+0x90>)
   84474:	47a0      	blx	r4
   84476:	61f8      	str	r0, [r7, #28]
   84478:	e00a      	b.n	84490 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8447a:	4b08      	ldr	r3, [pc, #32]	; (8449c <xTimerGenericCommand+0x88>)
   8447c:	681a      	ldr	r2, [r3, #0]
   8447e:	f107 0310 	add.w	r3, r7, #16
   84482:	4610      	mov	r0, r2
   84484:	4619      	mov	r1, r3
   84486:	683a      	ldr	r2, [r7, #0]
   84488:	2300      	movs	r3, #0
   8448a:	4c07      	ldr	r4, [pc, #28]	; (844a8 <xTimerGenericCommand+0x94>)
   8448c:	47a0      	blx	r4
   8448e:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84490:	69fb      	ldr	r3, [r7, #28]
}
   84492:	4618      	mov	r0, r3
   84494:	3724      	adds	r7, #36	; 0x24
   84496:	46bd      	mov	sp, r7
   84498:	bd90      	pop	{r4, r7, pc}
   8449a:	bf00      	nop
   8449c:	2007a62c 	.word	0x2007a62c
   844a0:	00084175 	.word	0x00084175
   844a4:	00082d31 	.word	0x00082d31
   844a8:	00082ef5 	.word	0x00082ef5

000844ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   844ac:	b590      	push	{r4, r7, lr}
   844ae:	b087      	sub	sp, #28
   844b0:	af02      	add	r7, sp, #8
   844b2:	6078      	str	r0, [r7, #4]
   844b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   844b6:	4b18      	ldr	r3, [pc, #96]	; (84518 <prvProcessExpiredTimer+0x6c>)
   844b8:	681b      	ldr	r3, [r3, #0]
   844ba:	68db      	ldr	r3, [r3, #12]
   844bc:	68db      	ldr	r3, [r3, #12]
   844be:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   844c0:	68fb      	ldr	r3, [r7, #12]
   844c2:	3304      	adds	r3, #4
   844c4:	4618      	mov	r0, r3
   844c6:	4b15      	ldr	r3, [pc, #84]	; (8451c <prvProcessExpiredTimer+0x70>)
   844c8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   844ca:	68fb      	ldr	r3, [r7, #12]
   844cc:	69db      	ldr	r3, [r3, #28]
   844ce:	2b01      	cmp	r3, #1
   844d0:	d11b      	bne.n	8450a <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   844d2:	68fb      	ldr	r3, [r7, #12]
   844d4:	699a      	ldr	r2, [r3, #24]
   844d6:	687b      	ldr	r3, [r7, #4]
   844d8:	4413      	add	r3, r2
   844da:	68f8      	ldr	r0, [r7, #12]
   844dc:	4619      	mov	r1, r3
   844de:	683a      	ldr	r2, [r7, #0]
   844e0:	687b      	ldr	r3, [r7, #4]
   844e2:	4c0f      	ldr	r4, [pc, #60]	; (84520 <prvProcessExpiredTimer+0x74>)
   844e4:	47a0      	blx	r4
   844e6:	4603      	mov	r3, r0
   844e8:	2b01      	cmp	r3, #1
   844ea:	d10e      	bne.n	8450a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   844ec:	2300      	movs	r3, #0
   844ee:	9300      	str	r3, [sp, #0]
   844f0:	68f8      	ldr	r0, [r7, #12]
   844f2:	2100      	movs	r1, #0
   844f4:	687a      	ldr	r2, [r7, #4]
   844f6:	2300      	movs	r3, #0
   844f8:	4c0a      	ldr	r4, [pc, #40]	; (84524 <prvProcessExpiredTimer+0x78>)
   844fa:	47a0      	blx	r4
   844fc:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   844fe:	68bb      	ldr	r3, [r7, #8]
   84500:	2b00      	cmp	r3, #0
   84502:	d102      	bne.n	8450a <prvProcessExpiredTimer+0x5e>
   84504:	4b08      	ldr	r3, [pc, #32]	; (84528 <prvProcessExpiredTimer+0x7c>)
   84506:	4798      	blx	r3
   84508:	e7fe      	b.n	84508 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8450a:	68fb      	ldr	r3, [r7, #12]
   8450c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8450e:	68f8      	ldr	r0, [r7, #12]
   84510:	4798      	blx	r3
}
   84512:	3714      	adds	r7, #20
   84514:	46bd      	mov	sp, r7
   84516:	bd90      	pop	{r4, r7, pc}
   84518:	2007a624 	.word	0x2007a624
   8451c:	000824b1 	.word	0x000824b1
   84520:	00084671 	.word	0x00084671
   84524:	00084415 	.word	0x00084415
   84528:	00082729 	.word	0x00082729

0008452c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   8452c:	b580      	push	{r7, lr}
   8452e:	b084      	sub	sp, #16
   84530:	af00      	add	r7, sp, #0
   84532:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   84534:	f107 0308 	add.w	r3, r7, #8
   84538:	4618      	mov	r0, r3
   8453a:	4b05      	ldr	r3, [pc, #20]	; (84550 <prvTimerTask+0x24>)
   8453c:	4798      	blx	r3
   8453e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   84540:	68bb      	ldr	r3, [r7, #8]
   84542:	68f8      	ldr	r0, [r7, #12]
   84544:	4619      	mov	r1, r3
   84546:	4b03      	ldr	r3, [pc, #12]	; (84554 <prvTimerTask+0x28>)
   84548:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   8454a:	4b03      	ldr	r3, [pc, #12]	; (84558 <prvTimerTask+0x2c>)
   8454c:	4798      	blx	r3
	}
   8454e:	e7f1      	b.n	84534 <prvTimerTask+0x8>
   84550:	000845e1 	.word	0x000845e1
   84554:	0008455d 	.word	0x0008455d
   84558:	000846f9 	.word	0x000846f9

0008455c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   8455c:	b580      	push	{r7, lr}
   8455e:	b084      	sub	sp, #16
   84560:	af00      	add	r7, sp, #0
   84562:	6078      	str	r0, [r7, #4]
   84564:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   84566:	4b17      	ldr	r3, [pc, #92]	; (845c4 <prvProcessTimerOrBlockTask+0x68>)
   84568:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8456a:	f107 0308 	add.w	r3, r7, #8
   8456e:	4618      	mov	r0, r3
   84570:	4b15      	ldr	r3, [pc, #84]	; (845c8 <prvProcessTimerOrBlockTask+0x6c>)
   84572:	4798      	blx	r3
   84574:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   84576:	68bb      	ldr	r3, [r7, #8]
   84578:	2b00      	cmp	r3, #0
   8457a:	d11e      	bne.n	845ba <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8457c:	683b      	ldr	r3, [r7, #0]
   8457e:	2b00      	cmp	r3, #0
   84580:	d10a      	bne.n	84598 <prvProcessTimerOrBlockTask+0x3c>
   84582:	687a      	ldr	r2, [r7, #4]
   84584:	68fb      	ldr	r3, [r7, #12]
   84586:	429a      	cmp	r2, r3
   84588:	d806      	bhi.n	84598 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   8458a:	4b10      	ldr	r3, [pc, #64]	; (845cc <prvProcessTimerOrBlockTask+0x70>)
   8458c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   8458e:	6878      	ldr	r0, [r7, #4]
   84590:	68f9      	ldr	r1, [r7, #12]
   84592:	4b0f      	ldr	r3, [pc, #60]	; (845d0 <prvProcessTimerOrBlockTask+0x74>)
   84594:	4798      	blx	r3
   84596:	e012      	b.n	845be <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   84598:	4b0e      	ldr	r3, [pc, #56]	; (845d4 <prvProcessTimerOrBlockTask+0x78>)
   8459a:	681a      	ldr	r2, [r3, #0]
   8459c:	6879      	ldr	r1, [r7, #4]
   8459e:	68fb      	ldr	r3, [r7, #12]
   845a0:	1acb      	subs	r3, r1, r3
   845a2:	4610      	mov	r0, r2
   845a4:	4619      	mov	r1, r3
   845a6:	4b0c      	ldr	r3, [pc, #48]	; (845d8 <prvProcessTimerOrBlockTask+0x7c>)
   845a8:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   845aa:	4b08      	ldr	r3, [pc, #32]	; (845cc <prvProcessTimerOrBlockTask+0x70>)
   845ac:	4798      	blx	r3
   845ae:	4603      	mov	r3, r0
   845b0:	2b00      	cmp	r3, #0
   845b2:	d104      	bne.n	845be <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   845b4:	4b09      	ldr	r3, [pc, #36]	; (845dc <prvProcessTimerOrBlockTask+0x80>)
   845b6:	4798      	blx	r3
   845b8:	e001      	b.n	845be <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   845ba:	4b04      	ldr	r3, [pc, #16]	; (845cc <prvProcessTimerOrBlockTask+0x70>)
   845bc:	4798      	blx	r3
		}
	}
}
   845be:	3710      	adds	r7, #16
   845c0:	46bd      	mov	sp, r7
   845c2:	bd80      	pop	{r7, pc}
   845c4:	00083799 	.word	0x00083799
   845c8:	00084629 	.word	0x00084629
   845cc:	000837b5 	.word	0x000837b5
   845d0:	000844ad 	.word	0x000844ad
   845d4:	2007a62c 	.word	0x2007a62c
   845d8:	00083435 	.word	0x00083435
   845dc:	0008268d 	.word	0x0008268d

000845e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   845e0:	b480      	push	{r7}
   845e2:	b085      	sub	sp, #20
   845e4:	af00      	add	r7, sp, #0
   845e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   845e8:	4b0e      	ldr	r3, [pc, #56]	; (84624 <prvGetNextExpireTime+0x44>)
   845ea:	681b      	ldr	r3, [r3, #0]
   845ec:	681b      	ldr	r3, [r3, #0]
   845ee:	2b00      	cmp	r3, #0
   845f0:	bf14      	ite	ne
   845f2:	2300      	movne	r3, #0
   845f4:	2301      	moveq	r3, #1
   845f6:	b2db      	uxtb	r3, r3
   845f8:	461a      	mov	r2, r3
   845fa:	687b      	ldr	r3, [r7, #4]
   845fc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   845fe:	687b      	ldr	r3, [r7, #4]
   84600:	681b      	ldr	r3, [r3, #0]
   84602:	2b00      	cmp	r3, #0
   84604:	d105      	bne.n	84612 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84606:	4b07      	ldr	r3, [pc, #28]	; (84624 <prvGetNextExpireTime+0x44>)
   84608:	681b      	ldr	r3, [r3, #0]
   8460a:	68db      	ldr	r3, [r3, #12]
   8460c:	681b      	ldr	r3, [r3, #0]
   8460e:	60fb      	str	r3, [r7, #12]
   84610:	e001      	b.n	84616 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   84612:	2300      	movs	r3, #0
   84614:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   84616:	68fb      	ldr	r3, [r7, #12]
}
   84618:	4618      	mov	r0, r3
   8461a:	3714      	adds	r7, #20
   8461c:	46bd      	mov	sp, r7
   8461e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84622:	4770      	bx	lr
   84624:	2007a624 	.word	0x2007a624

00084628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   84628:	b580      	push	{r7, lr}
   8462a:	b084      	sub	sp, #16
   8462c:	af00      	add	r7, sp, #0
   8462e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   84630:	4b0c      	ldr	r3, [pc, #48]	; (84664 <prvSampleTimeNow+0x3c>)
   84632:	4798      	blx	r3
   84634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   84636:	4b0c      	ldr	r3, [pc, #48]	; (84668 <prvSampleTimeNow+0x40>)
   84638:	681b      	ldr	r3, [r3, #0]
   8463a:	68fa      	ldr	r2, [r7, #12]
   8463c:	429a      	cmp	r2, r3
   8463e:	d205      	bcs.n	8464c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   84640:	4b0a      	ldr	r3, [pc, #40]	; (8466c <prvSampleTimeNow+0x44>)
   84642:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   84644:	687b      	ldr	r3, [r7, #4]
   84646:	2201      	movs	r2, #1
   84648:	601a      	str	r2, [r3, #0]
   8464a:	e002      	b.n	84652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   8464c:	687b      	ldr	r3, [r7, #4]
   8464e:	2200      	movs	r2, #0
   84650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   84652:	4b05      	ldr	r3, [pc, #20]	; (84668 <prvSampleTimeNow+0x40>)
   84654:	68fa      	ldr	r2, [r7, #12]
   84656:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   84658:	68fb      	ldr	r3, [r7, #12]
}
   8465a:	4618      	mov	r0, r3
   8465c:	3710      	adds	r7, #16
   8465e:	46bd      	mov	sp, r7
   84660:	bd80      	pop	{r7, pc}
   84662:	bf00      	nop
   84664:	000838d9 	.word	0x000838d9
   84668:	2007a630 	.word	0x2007a630
   8466c:	00084825 	.word	0x00084825

00084670 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   84670:	b580      	push	{r7, lr}
   84672:	b086      	sub	sp, #24
   84674:	af00      	add	r7, sp, #0
   84676:	60f8      	str	r0, [r7, #12]
   84678:	60b9      	str	r1, [r7, #8]
   8467a:	607a      	str	r2, [r7, #4]
   8467c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   8467e:	2300      	movs	r3, #0
   84680:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   84682:	68fb      	ldr	r3, [r7, #12]
   84684:	68ba      	ldr	r2, [r7, #8]
   84686:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84688:	68fb      	ldr	r3, [r7, #12]
   8468a:	68fa      	ldr	r2, [r7, #12]
   8468c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   8468e:	68ba      	ldr	r2, [r7, #8]
   84690:	687b      	ldr	r3, [r7, #4]
   84692:	429a      	cmp	r2, r3
   84694:	d812      	bhi.n	846bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   84696:	687a      	ldr	r2, [r7, #4]
   84698:	683b      	ldr	r3, [r7, #0]
   8469a:	1ad2      	subs	r2, r2, r3
   8469c:	68fb      	ldr	r3, [r7, #12]
   8469e:	699b      	ldr	r3, [r3, #24]
   846a0:	429a      	cmp	r2, r3
   846a2:	d302      	bcc.n	846aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   846a4:	2301      	movs	r3, #1
   846a6:	617b      	str	r3, [r7, #20]
   846a8:	e01b      	b.n	846e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   846aa:	4b10      	ldr	r3, [pc, #64]	; (846ec <prvInsertTimerInActiveList+0x7c>)
   846ac:	681a      	ldr	r2, [r3, #0]
   846ae:	68fb      	ldr	r3, [r7, #12]
   846b0:	3304      	adds	r3, #4
   846b2:	4610      	mov	r0, r2
   846b4:	4619      	mov	r1, r3
   846b6:	4b0e      	ldr	r3, [pc, #56]	; (846f0 <prvInsertTimerInActiveList+0x80>)
   846b8:	4798      	blx	r3
   846ba:	e012      	b.n	846e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   846bc:	687a      	ldr	r2, [r7, #4]
   846be:	683b      	ldr	r3, [r7, #0]
   846c0:	429a      	cmp	r2, r3
   846c2:	d206      	bcs.n	846d2 <prvInsertTimerInActiveList+0x62>
   846c4:	68ba      	ldr	r2, [r7, #8]
   846c6:	683b      	ldr	r3, [r7, #0]
   846c8:	429a      	cmp	r2, r3
   846ca:	d302      	bcc.n	846d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   846cc:	2301      	movs	r3, #1
   846ce:	617b      	str	r3, [r7, #20]
   846d0:	e007      	b.n	846e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   846d2:	4b08      	ldr	r3, [pc, #32]	; (846f4 <prvInsertTimerInActiveList+0x84>)
   846d4:	681a      	ldr	r2, [r3, #0]
   846d6:	68fb      	ldr	r3, [r7, #12]
   846d8:	3304      	adds	r3, #4
   846da:	4610      	mov	r0, r2
   846dc:	4619      	mov	r1, r3
   846de:	4b04      	ldr	r3, [pc, #16]	; (846f0 <prvInsertTimerInActiveList+0x80>)
   846e0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   846e2:	697b      	ldr	r3, [r7, #20]
}
   846e4:	4618      	mov	r0, r3
   846e6:	3718      	adds	r7, #24
   846e8:	46bd      	mov	sp, r7
   846ea:	bd80      	pop	{r7, pc}
   846ec:	2007a628 	.word	0x2007a628
   846f0:	00082441 	.word	0x00082441
   846f4:	2007a624 	.word	0x2007a624

000846f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   846f8:	b590      	push	{r4, r7, lr}
   846fa:	b08b      	sub	sp, #44	; 0x2c
   846fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   846fe:	e070      	b.n	847e2 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   84700:	68bb      	ldr	r3, [r7, #8]
   84702:	2b00      	cmp	r3, #0
   84704:	db6d      	blt.n	847e2 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   84706:	693b      	ldr	r3, [r7, #16]
   84708:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8470a:	69fb      	ldr	r3, [r7, #28]
   8470c:	695b      	ldr	r3, [r3, #20]
   8470e:	2b00      	cmp	r3, #0
   84710:	d004      	beq.n	8471c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84712:	69fb      	ldr	r3, [r7, #28]
   84714:	3304      	adds	r3, #4
   84716:	4618      	mov	r0, r3
   84718:	4b3a      	ldr	r3, [pc, #232]	; (84804 <prvProcessReceivedCommands+0x10c>)
   8471a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8471c:	1d3b      	adds	r3, r7, #4
   8471e:	4618      	mov	r0, r3
   84720:	4b39      	ldr	r3, [pc, #228]	; (84808 <prvProcessReceivedCommands+0x110>)
   84722:	4798      	blx	r3
   84724:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   84726:	68bb      	ldr	r3, [r7, #8]
   84728:	2b09      	cmp	r3, #9
   8472a:	d859      	bhi.n	847e0 <prvProcessReceivedCommands+0xe8>
   8472c:	a201      	add	r2, pc, #4	; (adr r2, 84734 <prvProcessReceivedCommands+0x3c>)
   8472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84732:	bf00      	nop
   84734:	0008475d 	.word	0x0008475d
   84738:	0008475d 	.word	0x0008475d
   8473c:	0008475d 	.word	0x0008475d
   84740:	000847e1 	.word	0x000847e1
   84744:	000847af 	.word	0x000847af
   84748:	000847d9 	.word	0x000847d9
   8474c:	0008475d 	.word	0x0008475d
   84750:	0008475d 	.word	0x0008475d
   84754:	000847e1 	.word	0x000847e1
   84758:	000847af 	.word	0x000847af
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   8475c:	68fa      	ldr	r2, [r7, #12]
   8475e:	69fb      	ldr	r3, [r7, #28]
   84760:	699b      	ldr	r3, [r3, #24]
   84762:	441a      	add	r2, r3
   84764:	68fb      	ldr	r3, [r7, #12]
   84766:	69f8      	ldr	r0, [r7, #28]
   84768:	4611      	mov	r1, r2
   8476a:	69ba      	ldr	r2, [r7, #24]
   8476c:	4c27      	ldr	r4, [pc, #156]	; (8480c <prvProcessReceivedCommands+0x114>)
   8476e:	47a0      	blx	r4
   84770:	4603      	mov	r3, r0
   84772:	2b01      	cmp	r3, #1
   84774:	d11a      	bne.n	847ac <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84776:	69fb      	ldr	r3, [r7, #28]
   84778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8477a:	69f8      	ldr	r0, [r7, #28]
   8477c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8477e:	69fb      	ldr	r3, [r7, #28]
   84780:	69db      	ldr	r3, [r3, #28]
   84782:	2b01      	cmp	r3, #1
   84784:	d112      	bne.n	847ac <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   84786:	68fa      	ldr	r2, [r7, #12]
   84788:	69fb      	ldr	r3, [r7, #28]
   8478a:	699b      	ldr	r3, [r3, #24]
   8478c:	4413      	add	r3, r2
   8478e:	2200      	movs	r2, #0
   84790:	9200      	str	r2, [sp, #0]
   84792:	69f8      	ldr	r0, [r7, #28]
   84794:	2100      	movs	r1, #0
   84796:	461a      	mov	r2, r3
   84798:	2300      	movs	r3, #0
   8479a:	4c1d      	ldr	r4, [pc, #116]	; (84810 <prvProcessReceivedCommands+0x118>)
   8479c:	47a0      	blx	r4
   8479e:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   847a0:	697b      	ldr	r3, [r7, #20]
   847a2:	2b00      	cmp	r3, #0
   847a4:	d102      	bne.n	847ac <prvProcessReceivedCommands+0xb4>
   847a6:	4b1b      	ldr	r3, [pc, #108]	; (84814 <prvProcessReceivedCommands+0x11c>)
   847a8:	4798      	blx	r3
   847aa:	e7fe      	b.n	847aa <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   847ac:	e019      	b.n	847e2 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   847ae:	68fa      	ldr	r2, [r7, #12]
   847b0:	69fb      	ldr	r3, [r7, #28]
   847b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   847b4:	69fb      	ldr	r3, [r7, #28]
   847b6:	699b      	ldr	r3, [r3, #24]
   847b8:	2b00      	cmp	r3, #0
   847ba:	d102      	bne.n	847c2 <prvProcessReceivedCommands+0xca>
   847bc:	4b15      	ldr	r3, [pc, #84]	; (84814 <prvProcessReceivedCommands+0x11c>)
   847be:	4798      	blx	r3
   847c0:	e7fe      	b.n	847c0 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   847c2:	69fb      	ldr	r3, [r7, #28]
   847c4:	699a      	ldr	r2, [r3, #24]
   847c6:	69bb      	ldr	r3, [r7, #24]
   847c8:	4413      	add	r3, r2
   847ca:	69f8      	ldr	r0, [r7, #28]
   847cc:	4619      	mov	r1, r3
   847ce:	69ba      	ldr	r2, [r7, #24]
   847d0:	69bb      	ldr	r3, [r7, #24]
   847d2:	4c0e      	ldr	r4, [pc, #56]	; (8480c <prvProcessReceivedCommands+0x114>)
   847d4:	47a0      	blx	r4
					break;
   847d6:	e004      	b.n	847e2 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   847d8:	69f8      	ldr	r0, [r7, #28]
   847da:	4b0f      	ldr	r3, [pc, #60]	; (84818 <prvProcessReceivedCommands+0x120>)
   847dc:	4798      	blx	r3
					break;
   847de:	e000      	b.n	847e2 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   847e0:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   847e2:	4b0e      	ldr	r3, [pc, #56]	; (8481c <prvProcessReceivedCommands+0x124>)
   847e4:	681a      	ldr	r2, [r3, #0]
   847e6:	f107 0308 	add.w	r3, r7, #8
   847ea:	4610      	mov	r0, r2
   847ec:	4619      	mov	r1, r3
   847ee:	2200      	movs	r2, #0
   847f0:	2300      	movs	r3, #0
   847f2:	4c0b      	ldr	r4, [pc, #44]	; (84820 <prvProcessReceivedCommands+0x128>)
   847f4:	47a0      	blx	r4
   847f6:	4603      	mov	r3, r0
   847f8:	2b00      	cmp	r3, #0
   847fa:	d181      	bne.n	84700 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   847fc:	3724      	adds	r7, #36	; 0x24
   847fe:	46bd      	mov	sp, r7
   84800:	bd90      	pop	{r4, r7, pc}
   84802:	bf00      	nop
   84804:	000824b1 	.word	0x000824b1
   84808:	00084629 	.word	0x00084629
   8480c:	00084671 	.word	0x00084671
   84810:	00084415 	.word	0x00084415
   84814:	00082729 	.word	0x00082729
   84818:	000829c5 	.word	0x000829c5
   8481c:	2007a62c 	.word	0x2007a62c
   84820:	00082ff1 	.word	0x00082ff1

00084824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   84824:	b590      	push	{r4, r7, lr}
   84826:	b089      	sub	sp, #36	; 0x24
   84828:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8482a:	e03d      	b.n	848a8 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8482c:	4b27      	ldr	r3, [pc, #156]	; (848cc <prvSwitchTimerLists+0xa8>)
   8482e:	681b      	ldr	r3, [r3, #0]
   84830:	68db      	ldr	r3, [r3, #12]
   84832:	681b      	ldr	r3, [r3, #0]
   84834:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84836:	4b25      	ldr	r3, [pc, #148]	; (848cc <prvSwitchTimerLists+0xa8>)
   84838:	681b      	ldr	r3, [r3, #0]
   8483a:	68db      	ldr	r3, [r3, #12]
   8483c:	68db      	ldr	r3, [r3, #12]
   8483e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84840:	693b      	ldr	r3, [r7, #16]
   84842:	3304      	adds	r3, #4
   84844:	4618      	mov	r0, r3
   84846:	4b22      	ldr	r3, [pc, #136]	; (848d0 <prvSwitchTimerLists+0xac>)
   84848:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   8484a:	693b      	ldr	r3, [r7, #16]
   8484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8484e:	6938      	ldr	r0, [r7, #16]
   84850:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84852:	693b      	ldr	r3, [r7, #16]
   84854:	69db      	ldr	r3, [r3, #28]
   84856:	2b01      	cmp	r3, #1
   84858:	d126      	bne.n	848a8 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   8485a:	693b      	ldr	r3, [r7, #16]
   8485c:	699a      	ldr	r2, [r3, #24]
   8485e:	697b      	ldr	r3, [r7, #20]
   84860:	4413      	add	r3, r2
   84862:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   84864:	68fa      	ldr	r2, [r7, #12]
   84866:	697b      	ldr	r3, [r7, #20]
   84868:	429a      	cmp	r2, r3
   8486a:	d90e      	bls.n	8488a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8486c:	693b      	ldr	r3, [r7, #16]
   8486e:	68fa      	ldr	r2, [r7, #12]
   84870:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84872:	693b      	ldr	r3, [r7, #16]
   84874:	693a      	ldr	r2, [r7, #16]
   84876:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84878:	4b14      	ldr	r3, [pc, #80]	; (848cc <prvSwitchTimerLists+0xa8>)
   8487a:	681a      	ldr	r2, [r3, #0]
   8487c:	693b      	ldr	r3, [r7, #16]
   8487e:	3304      	adds	r3, #4
   84880:	4610      	mov	r0, r2
   84882:	4619      	mov	r1, r3
   84884:	4b13      	ldr	r3, [pc, #76]	; (848d4 <prvSwitchTimerLists+0xb0>)
   84886:	4798      	blx	r3
   84888:	e00e      	b.n	848a8 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8488a:	2300      	movs	r3, #0
   8488c:	9300      	str	r3, [sp, #0]
   8488e:	6938      	ldr	r0, [r7, #16]
   84890:	2100      	movs	r1, #0
   84892:	697a      	ldr	r2, [r7, #20]
   84894:	2300      	movs	r3, #0
   84896:	4c10      	ldr	r4, [pc, #64]	; (848d8 <prvSwitchTimerLists+0xb4>)
   84898:	47a0      	blx	r4
   8489a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   8489c:	68bb      	ldr	r3, [r7, #8]
   8489e:	2b00      	cmp	r3, #0
   848a0:	d102      	bne.n	848a8 <prvSwitchTimerLists+0x84>
   848a2:	4b0e      	ldr	r3, [pc, #56]	; (848dc <prvSwitchTimerLists+0xb8>)
   848a4:	4798      	blx	r3
   848a6:	e7fe      	b.n	848a6 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   848a8:	4b08      	ldr	r3, [pc, #32]	; (848cc <prvSwitchTimerLists+0xa8>)
   848aa:	681b      	ldr	r3, [r3, #0]
   848ac:	681b      	ldr	r3, [r3, #0]
   848ae:	2b00      	cmp	r3, #0
   848b0:	d1bc      	bne.n	8482c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   848b2:	4b06      	ldr	r3, [pc, #24]	; (848cc <prvSwitchTimerLists+0xa8>)
   848b4:	681b      	ldr	r3, [r3, #0]
   848b6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   848b8:	4b09      	ldr	r3, [pc, #36]	; (848e0 <prvSwitchTimerLists+0xbc>)
   848ba:	681a      	ldr	r2, [r3, #0]
   848bc:	4b03      	ldr	r3, [pc, #12]	; (848cc <prvSwitchTimerLists+0xa8>)
   848be:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   848c0:	4b07      	ldr	r3, [pc, #28]	; (848e0 <prvSwitchTimerLists+0xbc>)
   848c2:	687a      	ldr	r2, [r7, #4]
   848c4:	601a      	str	r2, [r3, #0]
}
   848c6:	371c      	adds	r7, #28
   848c8:	46bd      	mov	sp, r7
   848ca:	bd90      	pop	{r4, r7, pc}
   848cc:	2007a624 	.word	0x2007a624
   848d0:	000824b1 	.word	0x000824b1
   848d4:	00082441 	.word	0x00082441
   848d8:	00084415 	.word	0x00084415
   848dc:	00082729 	.word	0x00082729
   848e0:	2007a628 	.word	0x2007a628

000848e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   848e4:	b580      	push	{r7, lr}
   848e6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   848e8:	4b11      	ldr	r3, [pc, #68]	; (84930 <prvCheckForValidListAndQueue+0x4c>)
   848ea:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   848ec:	4b11      	ldr	r3, [pc, #68]	; (84934 <prvCheckForValidListAndQueue+0x50>)
   848ee:	681b      	ldr	r3, [r3, #0]
   848f0:	2b00      	cmp	r3, #0
   848f2:	d11a      	bne.n	8492a <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   848f4:	4810      	ldr	r0, [pc, #64]	; (84938 <prvCheckForValidListAndQueue+0x54>)
   848f6:	4b11      	ldr	r3, [pc, #68]	; (8493c <prvCheckForValidListAndQueue+0x58>)
   848f8:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   848fa:	4811      	ldr	r0, [pc, #68]	; (84940 <prvCheckForValidListAndQueue+0x5c>)
   848fc:	4b0f      	ldr	r3, [pc, #60]	; (8493c <prvCheckForValidListAndQueue+0x58>)
   848fe:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   84900:	4b10      	ldr	r3, [pc, #64]	; (84944 <prvCheckForValidListAndQueue+0x60>)
   84902:	4a0d      	ldr	r2, [pc, #52]	; (84938 <prvCheckForValidListAndQueue+0x54>)
   84904:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   84906:	4b10      	ldr	r3, [pc, #64]	; (84948 <prvCheckForValidListAndQueue+0x64>)
   84908:	4a0d      	ldr	r2, [pc, #52]	; (84940 <prvCheckForValidListAndQueue+0x5c>)
   8490a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   8490c:	2005      	movs	r0, #5
   8490e:	210c      	movs	r1, #12
   84910:	2200      	movs	r2, #0
   84912:	4b0e      	ldr	r3, [pc, #56]	; (8494c <prvCheckForValidListAndQueue+0x68>)
   84914:	4798      	blx	r3
   84916:	4602      	mov	r2, r0
   84918:	4b06      	ldr	r3, [pc, #24]	; (84934 <prvCheckForValidListAndQueue+0x50>)
   8491a:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   8491c:	4b05      	ldr	r3, [pc, #20]	; (84934 <prvCheckForValidListAndQueue+0x50>)
   8491e:	681b      	ldr	r3, [r3, #0]
   84920:	2b00      	cmp	r3, #0
   84922:	d102      	bne.n	8492a <prvCheckForValidListAndQueue+0x46>
   84924:	4b0a      	ldr	r3, [pc, #40]	; (84950 <prvCheckForValidListAndQueue+0x6c>)
   84926:	4798      	blx	r3
   84928:	e7fe      	b.n	84928 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8492a:	4b0a      	ldr	r3, [pc, #40]	; (84954 <prvCheckForValidListAndQueue+0x70>)
   8492c:	4798      	blx	r3
}
   8492e:	bd80      	pop	{r7, pc}
   84930:	000826ad 	.word	0x000826ad
   84934:	2007a62c 	.word	0x2007a62c
   84938:	2007a5fc 	.word	0x2007a5fc
   8493c:	000823a1 	.word	0x000823a1
   84940:	2007a610 	.word	0x2007a610
   84944:	2007a624 	.word	0x2007a624
   84948:	2007a628 	.word	0x2007a628
   8494c:	00082ca5 	.word	0x00082ca5
   84950:	00082729 	.word	0x00082729
   84954:	000826f1 	.word	0x000826f1

00084958 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   84958:	b480      	push	{r7}
   8495a:	b083      	sub	sp, #12
   8495c:	af00      	add	r7, sp, #0
   8495e:	4603      	mov	r3, r0
   84960:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   84962:	4b08      	ldr	r3, [pc, #32]	; (84984 <NVIC_EnableIRQ+0x2c>)
   84964:	f997 2007 	ldrsb.w	r2, [r7, #7]
   84968:	0952      	lsrs	r2, r2, #5
   8496a:	79f9      	ldrb	r1, [r7, #7]
   8496c:	f001 011f 	and.w	r1, r1, #31
   84970:	2001      	movs	r0, #1
   84972:	fa00 f101 	lsl.w	r1, r0, r1
   84976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8497a:	370c      	adds	r7, #12
   8497c:	46bd      	mov	sp, r7
   8497e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84982:	4770      	bx	lr
   84984:	e000e100 	.word	0xe000e100

00084988 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   84988:	b480      	push	{r7}
   8498a:	b083      	sub	sp, #12
   8498c:	af00      	add	r7, sp, #0
   8498e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84990:	687b      	ldr	r3, [r7, #4]
   84992:	2b07      	cmp	r3, #7
   84994:	d825      	bhi.n	849e2 <osc_get_rate+0x5a>
   84996:	a201      	add	r2, pc, #4	; (adr r2, 8499c <osc_get_rate+0x14>)
   84998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8499c:	000849bd 	.word	0x000849bd
   849a0:	000849c3 	.word	0x000849c3
   849a4:	000849c9 	.word	0x000849c9
   849a8:	000849cf 	.word	0x000849cf
   849ac:	000849d3 	.word	0x000849d3
   849b0:	000849d7 	.word	0x000849d7
   849b4:	000849db 	.word	0x000849db
   849b8:	000849df 	.word	0x000849df
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   849bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   849c0:	e010      	b.n	849e4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   849c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   849c6:	e00d      	b.n	849e4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   849c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   849cc:	e00a      	b.n	849e4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   849ce:	4b08      	ldr	r3, [pc, #32]	; (849f0 <osc_get_rate+0x68>)
   849d0:	e008      	b.n	849e4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   849d2:	4b08      	ldr	r3, [pc, #32]	; (849f4 <osc_get_rate+0x6c>)
   849d4:	e006      	b.n	849e4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   849d6:	4b08      	ldr	r3, [pc, #32]	; (849f8 <osc_get_rate+0x70>)
   849d8:	e004      	b.n	849e4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   849da:	4b07      	ldr	r3, [pc, #28]	; (849f8 <osc_get_rate+0x70>)
   849dc:	e002      	b.n	849e4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   849de:	4b06      	ldr	r3, [pc, #24]	; (849f8 <osc_get_rate+0x70>)
   849e0:	e000      	b.n	849e4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   849e2:	2300      	movs	r3, #0
}
   849e4:	4618      	mov	r0, r3
   849e6:	370c      	adds	r7, #12
   849e8:	46bd      	mov	sp, r7
   849ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   849ee:	4770      	bx	lr
   849f0:	003d0900 	.word	0x003d0900
   849f4:	007a1200 	.word	0x007a1200
   849f8:	00b71b00 	.word	0x00b71b00

000849fc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   849fc:	b580      	push	{r7, lr}
   849fe:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   84a00:	2006      	movs	r0, #6
   84a02:	4b04      	ldr	r3, [pc, #16]	; (84a14 <sysclk_get_main_hz+0x18>)
   84a04:	4798      	blx	r3
   84a06:	4602      	mov	r2, r0
   84a08:	4613      	mov	r3, r2
   84a0a:	00db      	lsls	r3, r3, #3
   84a0c:	1a9b      	subs	r3, r3, r2
   84a0e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   84a10:	4618      	mov	r0, r3
   84a12:	bd80      	pop	{r7, pc}
   84a14:	00084989 	.word	0x00084989

00084a18 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   84a18:	b580      	push	{r7, lr}
   84a1a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   84a1c:	4b02      	ldr	r3, [pc, #8]	; (84a28 <sysclk_get_cpu_hz+0x10>)
   84a1e:	4798      	blx	r3
   84a20:	4603      	mov	r3, r0
   84a22:	085b      	lsrs	r3, r3, #1
}
   84a24:	4618      	mov	r0, r3
   84a26:	bd80      	pop	{r7, pc}
   84a28:	000849fd 	.word	0x000849fd

00084a2c <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   84a2c:	b580      	push	{r7, lr}
   84a2e:	b082      	sub	sp, #8
   84a30:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   84a32:	482b      	ldr	r0, [pc, #172]	; (84ae0 <CAN1_Handler+0xb4>)
   84a34:	492b      	ldr	r1, [pc, #172]	; (84ae4 <CAN1_Handler+0xb8>)
   84a36:	4b2c      	ldr	r3, [pc, #176]	; (84ae8 <CAN1_Handler+0xbc>)
   84a38:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   84a3a:	482c      	ldr	r0, [pc, #176]	; (84aec <CAN1_Handler+0xc0>)
   84a3c:	4b2c      	ldr	r3, [pc, #176]	; (84af0 <CAN1_Handler+0xc4>)
   84a3e:	4798      	blx	r3
   84a40:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   84a42:	683b      	ldr	r3, [r7, #0]
   84a44:	b2db      	uxtb	r3, r3
   84a46:	2b00      	cmp	r3, #0
   84a48:	d047      	beq.n	84ada <CAN1_Handler+0xae>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84a4a:	2300      	movs	r3, #0
   84a4c:	71fb      	strb	r3, [r7, #7]
   84a4e:	e041      	b.n	84ad4 <CAN1_Handler+0xa8>
			ul_status = can_mailbox_get_status(CAN1, i);
   84a50:	79fb      	ldrb	r3, [r7, #7]
   84a52:	4826      	ldr	r0, [pc, #152]	; (84aec <CAN1_Handler+0xc0>)
   84a54:	4619      	mov	r1, r3
   84a56:	4b27      	ldr	r3, [pc, #156]	; (84af4 <CAN1_Handler+0xc8>)
   84a58:	4798      	blx	r3
   84a5a:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   84a5c:	683b      	ldr	r3, [r7, #0]
   84a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   84a62:	2b00      	cmp	r3, #0
   84a64:	d033      	beq.n	84ace <CAN1_Handler+0xa2>
				can1_mailbox.ul_mb_idx = i;
   84a66:	79fa      	ldrb	r2, [r7, #7]
   84a68:	4b1d      	ldr	r3, [pc, #116]	; (84ae0 <CAN1_Handler+0xb4>)
   84a6a:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   84a6c:	4b1c      	ldr	r3, [pc, #112]	; (84ae0 <CAN1_Handler+0xb4>)
   84a6e:	683a      	ldr	r2, [r7, #0]
   84a70:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   84a72:	481e      	ldr	r0, [pc, #120]	; (84aec <CAN1_Handler+0xc0>)
   84a74:	491a      	ldr	r1, [pc, #104]	; (84ae0 <CAN1_Handler+0xb4>)
   84a76:	4b20      	ldr	r3, [pc, #128]	; (84af8 <CAN1_Handler+0xcc>)
   84a78:	4798      	blx	r3
				
				/* UPDATE THE GLOBAL CAN REGS		*/
				
				if (i == 0)
   84a7a:	79fb      	ldrb	r3, [r7, #7]
   84a7c:	2b00      	cmp	r3, #0
   84a7e:	d107      	bne.n	84a90 <CAN1_Handler+0x64>
				{
					can_glob_data_reg[0] = can1_mailbox.ul_datal;
   84a80:	4b17      	ldr	r3, [pc, #92]	; (84ae0 <CAN1_Handler+0xb4>)
   84a82:	699a      	ldr	r2, [r3, #24]
   84a84:	4b1d      	ldr	r3, [pc, #116]	; (84afc <CAN1_Handler+0xd0>)
   84a86:	601a      	str	r2, [r3, #0]
					can_glob_data_reg[1] = can1_mailbox.ul_datah;
   84a88:	4b15      	ldr	r3, [pc, #84]	; (84ae0 <CAN1_Handler+0xb4>)
   84a8a:	69da      	ldr	r2, [r3, #28]
   84a8c:	4b1b      	ldr	r3, [pc, #108]	; (84afc <CAN1_Handler+0xd0>)
   84a8e:	605a      	str	r2, [r3, #4]
				}
				
				if (i == 6)
   84a90:	79fb      	ldrb	r3, [r7, #7]
   84a92:	2b06      	cmp	r3, #6
   84a94:	d107      	bne.n	84aa6 <CAN1_Handler+0x7a>
				{
					can_glob_hk_reg[0] = can1_mailbox.ul_datal;
   84a96:	4b12      	ldr	r3, [pc, #72]	; (84ae0 <CAN1_Handler+0xb4>)
   84a98:	699a      	ldr	r2, [r3, #24]
   84a9a:	4b19      	ldr	r3, [pc, #100]	; (84b00 <CAN1_Handler+0xd4>)
   84a9c:	601a      	str	r2, [r3, #0]
					can_glob_hk_reg[1] = can1_mailbox.ul_datah;
   84a9e:	4b10      	ldr	r3, [pc, #64]	; (84ae0 <CAN1_Handler+0xb4>)
   84aa0:	69da      	ldr	r2, [r3, #28]
   84aa2:	4b17      	ldr	r3, [pc, #92]	; (84b00 <CAN1_Handler+0xd4>)
   84aa4:	605a      	str	r2, [r3, #4]
				}
				
				if (i == 7)
   84aa6:	79fb      	ldrb	r3, [r7, #7]
   84aa8:	2b07      	cmp	r3, #7
   84aaa:	d107      	bne.n	84abc <CAN1_Handler+0x90>
				{
					can_glob_com_reg[0] = can1_mailbox.ul_datal;
   84aac:	4b0c      	ldr	r3, [pc, #48]	; (84ae0 <CAN1_Handler+0xb4>)
   84aae:	699a      	ldr	r2, [r3, #24]
   84ab0:	4b14      	ldr	r3, [pc, #80]	; (84b04 <CAN1_Handler+0xd8>)
   84ab2:	601a      	str	r2, [r3, #0]
					can_glob_com_reg[1] = can1_mailbox.ul_datah;
   84ab4:	4b0a      	ldr	r3, [pc, #40]	; (84ae0 <CAN1_Handler+0xb4>)
   84ab6:	69da      	ldr	r2, [r3, #28]
   84ab8:	4b12      	ldr	r3, [pc, #72]	; (84b04 <CAN1_Handler+0xd8>)
   84aba:	605a      	str	r2, [r3, #4]
				}
				
				/* Decode CAN Message */
				decode_can_msg(&can1_mailbox, CAN1);
   84abc:	4808      	ldr	r0, [pc, #32]	; (84ae0 <CAN1_Handler+0xb4>)
   84abe:	490b      	ldr	r1, [pc, #44]	; (84aec <CAN1_Handler+0xc0>)
   84ac0:	4b11      	ldr	r3, [pc, #68]	; (84b08 <CAN1_Handler+0xdc>)
   84ac2:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   84ac4:	4806      	ldr	r0, [pc, #24]	; (84ae0 <CAN1_Handler+0xb4>)
   84ac6:	4907      	ldr	r1, [pc, #28]	; (84ae4 <CAN1_Handler+0xb8>)
   84ac8:	4b10      	ldr	r3, [pc, #64]	; (84b0c <CAN1_Handler+0xe0>)
   84aca:	4798      	blx	r3
				break;
   84acc:	e005      	b.n	84ada <CAN1_Handler+0xae>
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84ace:	79fb      	ldrb	r3, [r7, #7]
   84ad0:	3301      	adds	r3, #1
   84ad2:	71fb      	strb	r3, [r7, #7]
   84ad4:	79fb      	ldrb	r3, [r7, #7]
   84ad6:	2b07      	cmp	r3, #7
   84ad8:	d9ba      	bls.n	84a50 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   84ada:	3708      	adds	r7, #8
   84adc:	46bd      	mov	sp, r7
   84ade:	bd80      	pop	{r7, pc}
   84ae0:	2007a648 	.word	0x2007a648
   84ae4:	2007a67c 	.word	0x2007a67c
   84ae8:	00084e21 	.word	0x00084e21
   84aec:	400b8000 	.word	0x400b8000
   84af0:	00081175 	.word	0x00081175
   84af4:	000811b9 	.word	0x000811b9
   84af8:	00081339 	.word	0x00081339
   84afc:	2007a674 	.word	0x2007a674
   84b00:	2007a638 	.word	0x2007a638
   84b04:	2007a6e8 	.word	0x2007a6e8
   84b08:	00084bb1 	.word	0x00084bb1
   84b0c:	00084e91 	.word	0x00084e91

00084b10 <CAN0_Handler>:

/**
 * \brief Default interrupt handler for CAN0
 */
void CAN0_Handler(void)
{
   84b10:	b580      	push	{r7, lr}
   84b12:	b082      	sub	sp, #8
   84b14:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   84b16:	481c      	ldr	r0, [pc, #112]	; (84b88 <CAN0_Handler+0x78>)
   84b18:	491c      	ldr	r1, [pc, #112]	; (84b8c <CAN0_Handler+0x7c>)
   84b1a:	4b1d      	ldr	r3, [pc, #116]	; (84b90 <CAN0_Handler+0x80>)
   84b1c:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   84b1e:	481d      	ldr	r0, [pc, #116]	; (84b94 <CAN0_Handler+0x84>)
   84b20:	4b1d      	ldr	r3, [pc, #116]	; (84b98 <CAN0_Handler+0x88>)
   84b22:	4798      	blx	r3
   84b24:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   84b26:	683b      	ldr	r3, [r7, #0]
   84b28:	b2db      	uxtb	r3, r3
   84b2a:	2b00      	cmp	r3, #0
   84b2c:	d029      	beq.n	84b82 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84b2e:	2300      	movs	r3, #0
   84b30:	71fb      	strb	r3, [r7, #7]
   84b32:	e023      	b.n	84b7c <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   84b34:	79fb      	ldrb	r3, [r7, #7]
   84b36:	4817      	ldr	r0, [pc, #92]	; (84b94 <CAN0_Handler+0x84>)
   84b38:	4619      	mov	r1, r3
   84b3a:	4b18      	ldr	r3, [pc, #96]	; (84b9c <CAN0_Handler+0x8c>)
   84b3c:	4798      	blx	r3
   84b3e:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   84b40:	683b      	ldr	r3, [r7, #0]
   84b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   84b46:	2b00      	cmp	r3, #0
   84b48:	d015      	beq.n	84b76 <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   84b4a:	79fa      	ldrb	r2, [r7, #7]
   84b4c:	4b0e      	ldr	r3, [pc, #56]	; (84b88 <CAN0_Handler+0x78>)
   84b4e:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   84b50:	4b0d      	ldr	r3, [pc, #52]	; (84b88 <CAN0_Handler+0x78>)
   84b52:	683a      	ldr	r2, [r7, #0]
   84b54:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   84b56:	480f      	ldr	r0, [pc, #60]	; (84b94 <CAN0_Handler+0x84>)
   84b58:	490b      	ldr	r1, [pc, #44]	; (84b88 <CAN0_Handler+0x78>)
   84b5a:	4b11      	ldr	r3, [pc, #68]	; (84ba0 <CAN0_Handler+0x90>)
   84b5c:	4798      	blx	r3
				g_ul_recv_status = 1;
   84b5e:	4b11      	ldr	r3, [pc, #68]	; (84ba4 <CAN0_Handler+0x94>)
   84b60:	2201      	movs	r2, #1
   84b62:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can0_mailbox, CAN0);
   84b64:	4808      	ldr	r0, [pc, #32]	; (84b88 <CAN0_Handler+0x78>)
   84b66:	490b      	ldr	r1, [pc, #44]	; (84b94 <CAN0_Handler+0x84>)
   84b68:	4b0f      	ldr	r3, [pc, #60]	; (84ba8 <CAN0_Handler+0x98>)
   84b6a:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   84b6c:	4806      	ldr	r0, [pc, #24]	; (84b88 <CAN0_Handler+0x78>)
   84b6e:	4907      	ldr	r1, [pc, #28]	; (84b8c <CAN0_Handler+0x7c>)
   84b70:	4b0e      	ldr	r3, [pc, #56]	; (84bac <CAN0_Handler+0x9c>)
   84b72:	4798      	blx	r3
				break;
   84b74:	e005      	b.n	84b82 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84b76:	79fb      	ldrb	r3, [r7, #7]
   84b78:	3301      	adds	r3, #1
   84b7a:	71fb      	strb	r3, [r7, #7]
   84b7c:	79fb      	ldrb	r3, [r7, #7]
   84b7e:	2b07      	cmp	r3, #7
   84b80:	d9d8      	bls.n	84b34 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   84b82:	3708      	adds	r7, #8
   84b84:	46bd      	mov	sp, r7
   84b86:	bd80      	pop	{r7, pc}
   84b88:	2007a6a0 	.word	0x2007a6a0
   84b8c:	2007a6c0 	.word	0x2007a6c0
   84b90:	00084e21 	.word	0x00084e21
   84b94:	400b4000 	.word	0x400b4000
   84b98:	00081175 	.word	0x00081175
   84b9c:	000811b9 	.word	0x000811b9
   84ba0:	00081339 	.word	0x00081339
   84ba4:	2007a634 	.word	0x2007a634
   84ba8:	00084bb1 	.word	0x00084bb1
   84bac:	00084e91 	.word	0x00084e91

00084bb0 <decode_can_msg>:
/* Decode CAN Message													*/
/* Performs a prescribed action depending on the message received       */
/************************************************************************/

void decode_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   84bb0:	b580      	push	{r7, lr}
   84bb2:	b084      	sub	sp, #16
   84bb4:	af00      	add	r7, sp, #0
   84bb6:	6078      	str	r0, [r7, #4]
   84bb8:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   84bba:	687b      	ldr	r3, [r7, #4]
   84bbc:	699b      	ldr	r3, [r3, #24]
   84bbe:	60fb      	str	r3, [r7, #12]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   84bc0:	687b      	ldr	r3, [r7, #4]
   84bc2:	69db      	ldr	r3, [r3, #28]
   84bc4:	60bb      	str	r3, [r7, #8]
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   84bc6:	68fb      	ldr	r3, [r7, #12]
   84bc8:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   84bcc:	bf14      	ite	ne
   84bce:	2300      	movne	r3, #0
   84bd0:	2301      	moveq	r3, #1
   84bd2:	b2da      	uxtb	r2, r3
   84bd4:	6839      	ldr	r1, [r7, #0]
   84bd6:	4b23      	ldr	r3, [pc, #140]	; (84c64 <decode_can_msg+0xb4>)
   84bd8:	4299      	cmp	r1, r3
   84bda:	bf14      	ite	ne
   84bdc:	2300      	movne	r3, #0
   84bde:	2301      	moveq	r3, #1
   84be0:	b2db      	uxtb	r3, r3
   84be2:	4013      	ands	r3, r2
   84be4:	b2db      	uxtb	r3, r3
   84be6:	2b00      	cmp	r3, #0
   84be8:	d002      	beq.n	84bf0 <decode_can_msg+0x40>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   84bea:	2057      	movs	r0, #87	; 0x57
   84bec:	4b1e      	ldr	r3, [pc, #120]	; (84c68 <decode_can_msg+0xb8>)
   84bee:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN1))
   84bf0:	68fb      	ldr	r3, [r7, #12]
   84bf2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   84bf6:	bf14      	ite	ne
   84bf8:	2300      	movne	r3, #0
   84bfa:	2301      	moveq	r3, #1
   84bfc:	b2da      	uxtb	r2, r3
   84bfe:	6839      	ldr	r1, [r7, #0]
   84c00:	4b18      	ldr	r3, [pc, #96]	; (84c64 <decode_can_msg+0xb4>)
   84c02:	4299      	cmp	r1, r3
   84c04:	bf14      	ite	ne
   84c06:	2300      	movne	r3, #0
   84c08:	2301      	moveq	r3, #1
   84c0a:	b2db      	uxtb	r3, r3
   84c0c:	4013      	ands	r3, r2
   84c0e:	b2db      	uxtb	r3, r3
   84c10:	2b00      	cmp	r3, #0
   84c12:	d002      	beq.n	84c1a <decode_can_msg+0x6a>
	{
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   84c14:	2055      	movs	r0, #85	; 0x55
   84c16:	4b14      	ldr	r3, [pc, #80]	; (84c68 <decode_can_msg+0xb8>)
   84c18:	4798      	blx	r3
	}
	
	if ((uh_data_incom == DATA_RETURNED) & (controller == CAN1) & (glob_drf == 0))
   84c1a:	68bb      	ldr	r3, [r7, #8]
   84c1c:	2b00      	cmp	r3, #0
   84c1e:	bf14      	ite	ne
   84c20:	2300      	movne	r3, #0
   84c22:	2301      	moveq	r3, #1
   84c24:	b2da      	uxtb	r2, r3
   84c26:	6839      	ldr	r1, [r7, #0]
   84c28:	4b0e      	ldr	r3, [pc, #56]	; (84c64 <decode_can_msg+0xb4>)
   84c2a:	4299      	cmp	r1, r3
   84c2c:	bf14      	ite	ne
   84c2e:	2300      	movne	r3, #0
   84c30:	2301      	moveq	r3, #1
   84c32:	b2db      	uxtb	r3, r3
   84c34:	4013      	ands	r3, r2
   84c36:	b2db      	uxtb	r3, r3
   84c38:	461a      	mov	r2, r3
   84c3a:	4b0c      	ldr	r3, [pc, #48]	; (84c6c <decode_can_msg+0xbc>)
   84c3c:	781b      	ldrb	r3, [r3, #0]
   84c3e:	2b00      	cmp	r3, #0
   84c40:	bf14      	ite	ne
   84c42:	2300      	movne	r3, #0
   84c44:	2301      	moveq	r3, #1
   84c46:	b2db      	uxtb	r3, r3
   84c48:	4013      	ands	r3, r2
   84c4a:	2b00      	cmp	r3, #0
   84c4c:	d005      	beq.n	84c5a <decode_can_msg+0xaa>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   84c4e:	2056      	movs	r0, #86	; 0x56
   84c50:	4b05      	ldr	r3, [pc, #20]	; (84c68 <decode_can_msg+0xb8>)
   84c52:	4798      	blx	r3
		glob_drf = 1;
   84c54:	4b05      	ldr	r3, [pc, #20]	; (84c6c <decode_can_msg+0xbc>)
   84c56:	2201      	movs	r2, #1
   84c58:	701a      	strb	r2, [r3, #0]
	}
	return;
   84c5a:	bf00      	nop
}
   84c5c:	3710      	adds	r7, #16
   84c5e:	46bd      	mov	sp, r7
   84c60:	bd80      	pop	{r7, pc}
   84c62:	bf00      	nop
   84c64:	400b8000 	.word	0x400b8000
   84c68:	00081739 	.word	0x00081739
   84c6c:	2007a668 	.word	0x2007a668

00084c70 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   84c70:	b480      	push	{r7}
   84c72:	b083      	sub	sp, #12
   84c74:	af00      	add	r7, sp, #0
   84c76:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   84c78:	687b      	ldr	r3, [r7, #4]
   84c7a:	2200      	movs	r2, #0
   84c7c:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   84c7e:	687b      	ldr	r3, [r7, #4]
   84c80:	2200      	movs	r2, #0
   84c82:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   84c84:	687b      	ldr	r3, [r7, #4]
   84c86:	2200      	movs	r2, #0
   84c88:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   84c8a:	687b      	ldr	r3, [r7, #4]
   84c8c:	2200      	movs	r2, #0
   84c8e:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   84c90:	687b      	ldr	r3, [r7, #4]
   84c92:	2200      	movs	r2, #0
   84c94:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   84c96:	687b      	ldr	r3, [r7, #4]
   84c98:	2200      	movs	r2, #0
   84c9a:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   84c9c:	687b      	ldr	r3, [r7, #4]
   84c9e:	2200      	movs	r2, #0
   84ca0:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   84ca2:	687b      	ldr	r3, [r7, #4]
   84ca4:	2200      	movs	r2, #0
   84ca6:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   84ca8:	687b      	ldr	r3, [r7, #4]
   84caa:	2200      	movs	r2, #0
   84cac:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   84cae:	687b      	ldr	r3, [r7, #4]
   84cb0:	2200      	movs	r2, #0
   84cb2:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   84cb4:	687b      	ldr	r3, [r7, #4]
   84cb6:	2200      	movs	r2, #0
   84cb8:	61da      	str	r2, [r3, #28]
}
   84cba:	370c      	adds	r7, #12
   84cbc:	46bd      	mov	sp, r7
   84cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   84cc2:	4770      	bx	lr

00084cc4 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   84cc4:	b580      	push	{r7, lr}
   84cc6:	b08c      	sub	sp, #48	; 0x30
   84cc8:	af00      	add	r7, sp, #0
   84cca:	60f8      	str	r0, [r7, #12]
   84ccc:	60b9      	str	r1, [r7, #8]
   84cce:	607a      	str	r2, [r7, #4]
   84cd0:	603b      	str	r3, [r7, #0]
	*/
	
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   84cd2:	f107 0310 	add.w	r3, r7, #16
   84cd6:	481e      	ldr	r0, [pc, #120]	; (84d50 <send_can_command+0x8c>)
   84cd8:	4619      	mov	r1, r3
   84cda:	4b1e      	ldr	r3, [pc, #120]	; (84d54 <send_can_command+0x90>)
   84cdc:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   84cde:	481c      	ldr	r0, [pc, #112]	; (84d50 <send_can_command+0x8c>)
   84ce0:	4b1d      	ldr	r3, [pc, #116]	; (84d58 <send_can_command+0x94>)
   84ce2:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   84ce4:	4b1a      	ldr	r3, [pc, #104]	; (84d50 <send_can_command+0x8c>)
   84ce6:	2207      	movs	r2, #7
   84ce8:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84cea:	4b19      	ldr	r3, [pc, #100]	; (84d50 <send_can_command+0x8c>)
   84cec:	2203      	movs	r2, #3
   84cee:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   84cf0:	683b      	ldr	r3, [r7, #0]
   84cf2:	b2da      	uxtb	r2, r3
   84cf4:	4b16      	ldr	r3, [pc, #88]	; (84d50 <send_can_command+0x8c>)
   84cf6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84cf8:	4b15      	ldr	r3, [pc, #84]	; (84d50 <send_can_command+0x8c>)
   84cfa:	2200      	movs	r2, #0
   84cfc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84cfe:	4b14      	ldr	r3, [pc, #80]	; (84d50 <send_can_command+0x8c>)
   84d00:	2200      	movs	r2, #0
   84d02:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84d04:	4815      	ldr	r0, [pc, #84]	; (84d5c <send_can_command+0x98>)
   84d06:	4912      	ldr	r1, [pc, #72]	; (84d50 <send_can_command+0x8c>)
   84d08:	4b15      	ldr	r3, [pc, #84]	; (84d60 <send_can_command+0x9c>)
   84d0a:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   84d0c:	687b      	ldr	r3, [r7, #4]
   84d0e:	049a      	lsls	r2, r3, #18
   84d10:	4b14      	ldr	r3, [pc, #80]	; (84d64 <send_can_command+0xa0>)
   84d12:	4013      	ands	r3, r2
   84d14:	4a0e      	ldr	r2, [pc, #56]	; (84d50 <send_can_command+0x8c>)
   84d16:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   84d18:	4b0d      	ldr	r3, [pc, #52]	; (84d50 <send_can_command+0x8c>)
   84d1a:	68fa      	ldr	r2, [r7, #12]
   84d1c:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   84d1e:	4b0c      	ldr	r3, [pc, #48]	; (84d50 <send_can_command+0x8c>)
   84d20:	68ba      	ldr	r2, [r7, #8]
   84d22:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   84d24:	4b0a      	ldr	r3, [pc, #40]	; (84d50 <send_can_command+0x8c>)
   84d26:	2208      	movs	r2, #8
   84d28:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   84d2a:	480c      	ldr	r0, [pc, #48]	; (84d5c <send_can_command+0x98>)
   84d2c:	4908      	ldr	r1, [pc, #32]	; (84d50 <send_can_command+0x8c>)
   84d2e:	4b0e      	ldr	r3, [pc, #56]	; (84d68 <send_can_command+0xa4>)
   84d30:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   84d32:	480a      	ldr	r0, [pc, #40]	; (84d5c <send_can_command+0x98>)
   84d34:	2180      	movs	r1, #128	; 0x80
   84d36:	4b0d      	ldr	r3, [pc, #52]	; (84d6c <send_can_command+0xa8>)
   84d38:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   84d3a:	f107 0310 	add.w	r3, r7, #16
   84d3e:	4804      	ldr	r0, [pc, #16]	; (84d50 <send_can_command+0x8c>)
   84d40:	4619      	mov	r1, r3
   84d42:	4b0b      	ldr	r3, [pc, #44]	; (84d70 <send_can_command+0xac>)
   84d44:	4798      	blx	r3
	
	return 1;
   84d46:	2301      	movs	r3, #1
}
   84d48:	4618      	mov	r0, r3
   84d4a:	3730      	adds	r7, #48	; 0x30
   84d4c:	46bd      	mov	sp, r7
   84d4e:	bd80      	pop	{r7, pc}
   84d50:	2007a6a0 	.word	0x2007a6a0
   84d54:	00084e21 	.word	0x00084e21
   84d58:	00084c71 	.word	0x00084c71
   84d5c:	400b4000 	.word	0x400b4000
   84d60:	00081219 	.word	0x00081219
   84d64:	1ffc0000 	.word	0x1ffc0000
   84d68:	000813fd 	.word	0x000813fd
   84d6c:	0008118d 	.word	0x0008118d
   84d70:	00084e91 	.word	0x00084e91

00084d74 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   84d74:	b580      	push	{r7, lr}
   84d76:	b08a      	sub	sp, #40	; 0x28
   84d78:	af00      	add	r7, sp, #0
   84d7a:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   84d7c:	f107 0308 	add.w	r3, r7, #8
   84d80:	481e      	ldr	r0, [pc, #120]	; (84dfc <request_housekeeping+0x88>)
   84d82:	4619      	mov	r1, r3
   84d84:	4b1e      	ldr	r3, [pc, #120]	; (84e00 <request_housekeeping+0x8c>)
   84d86:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   84d88:	481c      	ldr	r0, [pc, #112]	; (84dfc <request_housekeeping+0x88>)
   84d8a:	4b1e      	ldr	r3, [pc, #120]	; (84e04 <request_housekeeping+0x90>)
   84d8c:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   84d8e:	4b1b      	ldr	r3, [pc, #108]	; (84dfc <request_housekeeping+0x88>)
   84d90:	2206      	movs	r2, #6
   84d92:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84d94:	4b19      	ldr	r3, [pc, #100]	; (84dfc <request_housekeeping+0x88>)
   84d96:	2203      	movs	r2, #3
   84d98:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   84d9a:	4b18      	ldr	r3, [pc, #96]	; (84dfc <request_housekeeping+0x88>)
   84d9c:	2214      	movs	r2, #20
   84d9e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84da0:	4b16      	ldr	r3, [pc, #88]	; (84dfc <request_housekeeping+0x88>)
   84da2:	2200      	movs	r2, #0
   84da4:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84da6:	4b15      	ldr	r3, [pc, #84]	; (84dfc <request_housekeeping+0x88>)
   84da8:	2200      	movs	r2, #0
   84daa:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84dac:	4816      	ldr	r0, [pc, #88]	; (84e08 <request_housekeeping+0x94>)
   84dae:	4913      	ldr	r1, [pc, #76]	; (84dfc <request_housekeeping+0x88>)
   84db0:	4b16      	ldr	r3, [pc, #88]	; (84e0c <request_housekeeping+0x98>)
   84db2:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   84db4:	687b      	ldr	r3, [r7, #4]
   84db6:	049a      	lsls	r2, r3, #18
   84db8:	4b15      	ldr	r3, [pc, #84]	; (84e10 <request_housekeeping+0x9c>)
   84dba:	4013      	ands	r3, r2
   84dbc:	4a0f      	ldr	r2, [pc, #60]	; (84dfc <request_housekeeping+0x88>)
   84dbe:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = HK_REQUEST;				// shifted over to the standard frame position.
   84dc0:	4b0e      	ldr	r3, [pc, #56]	; (84dfc <request_housekeeping+0x88>)
   84dc2:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   84dc6:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = HK_REQUEST;
   84dc8:	4b0c      	ldr	r3, [pc, #48]	; (84dfc <request_housekeeping+0x88>)
   84dca:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   84dce:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   84dd0:	4b0a      	ldr	r3, [pc, #40]	; (84dfc <request_housekeeping+0x88>)
   84dd2:	2208      	movs	r2, #8
   84dd4:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   84dd6:	480c      	ldr	r0, [pc, #48]	; (84e08 <request_housekeeping+0x94>)
   84dd8:	4908      	ldr	r1, [pc, #32]	; (84dfc <request_housekeeping+0x88>)
   84dda:	4b0e      	ldr	r3, [pc, #56]	; (84e14 <request_housekeeping+0xa0>)
   84ddc:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   84dde:	480a      	ldr	r0, [pc, #40]	; (84e08 <request_housekeeping+0x94>)
   84de0:	2140      	movs	r1, #64	; 0x40
   84de2:	4b0d      	ldr	r3, [pc, #52]	; (84e18 <request_housekeeping+0xa4>)
   84de4:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   84de6:	f107 0308 	add.w	r3, r7, #8
   84dea:	4804      	ldr	r0, [pc, #16]	; (84dfc <request_housekeeping+0x88>)
   84dec:	4619      	mov	r1, r3
   84dee:	4b0b      	ldr	r3, [pc, #44]	; (84e1c <request_housekeeping+0xa8>)
   84df0:	4798      	blx	r3
		
	return 1;
   84df2:	2301      	movs	r3, #1
}
   84df4:	4618      	mov	r0, r3
   84df6:	3728      	adds	r7, #40	; 0x28
   84df8:	46bd      	mov	sp, r7
   84dfa:	bd80      	pop	{r7, pc}
   84dfc:	2007a6a0 	.word	0x2007a6a0
   84e00:	00084e21 	.word	0x00084e21
   84e04:	00084c71 	.word	0x00084c71
   84e08:	400b4000 	.word	0x400b4000
   84e0c:	00081219 	.word	0x00081219
   84e10:	1ffc0000 	.word	0x1ffc0000
   84e14:	000813fd 	.word	0x000813fd
   84e18:	0008118d 	.word	0x0008118d
   84e1c:	00084e91 	.word	0x00084e91

00084e20 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   84e20:	b480      	push	{r7}
   84e22:	b083      	sub	sp, #12
   84e24:	af00      	add	r7, sp, #0
   84e26:	6078      	str	r0, [r7, #4]
   84e28:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   84e2a:	687b      	ldr	r3, [r7, #4]
   84e2c:	681a      	ldr	r2, [r3, #0]
   84e2e:	683b      	ldr	r3, [r7, #0]
   84e30:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   84e32:	687b      	ldr	r3, [r7, #4]
   84e34:	791a      	ldrb	r2, [r3, #4]
   84e36:	683b      	ldr	r3, [r7, #0]
   84e38:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   84e3a:	687b      	ldr	r3, [r7, #4]
   84e3c:	795a      	ldrb	r2, [r3, #5]
   84e3e:	683b      	ldr	r3, [r7, #0]
   84e40:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   84e42:	687b      	ldr	r3, [r7, #4]
   84e44:	799a      	ldrb	r2, [r3, #6]
   84e46:	683b      	ldr	r3, [r7, #0]
   84e48:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   84e4a:	687b      	ldr	r3, [r7, #4]
   84e4c:	79da      	ldrb	r2, [r3, #7]
   84e4e:	683b      	ldr	r3, [r7, #0]
   84e50:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   84e52:	687b      	ldr	r3, [r7, #4]
   84e54:	689a      	ldr	r2, [r3, #8]
   84e56:	683b      	ldr	r3, [r7, #0]
   84e58:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   84e5a:	687b      	ldr	r3, [r7, #4]
   84e5c:	68da      	ldr	r2, [r3, #12]
   84e5e:	683b      	ldr	r3, [r7, #0]
   84e60:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   84e62:	687b      	ldr	r3, [r7, #4]
   84e64:	691a      	ldr	r2, [r3, #16]
   84e66:	683b      	ldr	r3, [r7, #0]
   84e68:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   84e6a:	687b      	ldr	r3, [r7, #4]
   84e6c:	695a      	ldr	r2, [r3, #20]
   84e6e:	683b      	ldr	r3, [r7, #0]
   84e70:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   84e72:	687b      	ldr	r3, [r7, #4]
   84e74:	699a      	ldr	r2, [r3, #24]
   84e76:	683b      	ldr	r3, [r7, #0]
   84e78:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   84e7a:	687b      	ldr	r3, [r7, #4]
   84e7c:	69da      	ldr	r2, [r3, #28]
   84e7e:	683b      	ldr	r3, [r7, #0]
   84e80:	61da      	str	r2, [r3, #28]
	
	return;
   84e82:	bf00      	nop
}
   84e84:	370c      	adds	r7, #12
   84e86:	46bd      	mov	sp, r7
   84e88:	f85d 7b04 	ldr.w	r7, [sp], #4
   84e8c:	4770      	bx	lr
   84e8e:	bf00      	nop

00084e90 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   84e90:	b480      	push	{r7}
   84e92:	b083      	sub	sp, #12
   84e94:	af00      	add	r7, sp, #0
   84e96:	6078      	str	r0, [r7, #4]
   84e98:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   84e9a:	683b      	ldr	r3, [r7, #0]
   84e9c:	681a      	ldr	r2, [r3, #0]
   84e9e:	687b      	ldr	r3, [r7, #4]
   84ea0:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   84ea2:	683b      	ldr	r3, [r7, #0]
   84ea4:	791a      	ldrb	r2, [r3, #4]
   84ea6:	687b      	ldr	r3, [r7, #4]
   84ea8:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   84eaa:	683b      	ldr	r3, [r7, #0]
   84eac:	795a      	ldrb	r2, [r3, #5]
   84eae:	687b      	ldr	r3, [r7, #4]
   84eb0:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   84eb2:	683b      	ldr	r3, [r7, #0]
   84eb4:	799a      	ldrb	r2, [r3, #6]
   84eb6:	687b      	ldr	r3, [r7, #4]
   84eb8:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   84eba:	683b      	ldr	r3, [r7, #0]
   84ebc:	79da      	ldrb	r2, [r3, #7]
   84ebe:	687b      	ldr	r3, [r7, #4]
   84ec0:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   84ec2:	683b      	ldr	r3, [r7, #0]
   84ec4:	689a      	ldr	r2, [r3, #8]
   84ec6:	687b      	ldr	r3, [r7, #4]
   84ec8:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   84eca:	683b      	ldr	r3, [r7, #0]
   84ecc:	68da      	ldr	r2, [r3, #12]
   84ece:	687b      	ldr	r3, [r7, #4]
   84ed0:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   84ed2:	683b      	ldr	r3, [r7, #0]
   84ed4:	691a      	ldr	r2, [r3, #16]
   84ed6:	687b      	ldr	r3, [r7, #4]
   84ed8:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   84eda:	683b      	ldr	r3, [r7, #0]
   84edc:	695a      	ldr	r2, [r3, #20]
   84ede:	687b      	ldr	r3, [r7, #4]
   84ee0:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   84ee2:	683b      	ldr	r3, [r7, #0]
   84ee4:	699a      	ldr	r2, [r3, #24]
   84ee6:	687b      	ldr	r3, [r7, #4]
   84ee8:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   84eea:	683b      	ldr	r3, [r7, #0]
   84eec:	69da      	ldr	r2, [r3, #28]
   84eee:	687b      	ldr	r3, [r7, #4]
   84ef0:	61da      	str	r2, [r3, #28]
	
	return;
   84ef2:	bf00      	nop
}
   84ef4:	370c      	adds	r7, #12
   84ef6:	46bd      	mov	sp, r7
   84ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
   84efc:	4770      	bx	lr
   84efe:	bf00      	nop

00084f00 <can_initialize>:
/**
 * \brief Initializes and enables CAN0 & CAN1 tranceivers and clocks. 
 * CAN0/CAN1 mailboxes are reset and interrupts disabled.
 */
void can_initialize(void)
{
   84f00:	b580      	push	{r7, lr}
   84f02:	b084      	sub	sp, #16
   84f04:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   84f06:	2301      	movs	r3, #1
   84f08:	60bb      	str	r3, [r7, #8]
   84f0a:	2300      	movs	r3, #0
   84f0c:	60fb      	str	r3, [r7, #12]

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   84f0e:	4839      	ldr	r0, [pc, #228]	; (84ff4 <can_initialize+0xf4>)
   84f10:	2134      	movs	r1, #52	; 0x34
   84f12:	4b39      	ldr	r3, [pc, #228]	; (84ff8 <can_initialize+0xf8>)
   84f14:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   84f16:	4837      	ldr	r0, [pc, #220]	; (84ff4 <can_initialize+0xf4>)
   84f18:	2135      	movs	r1, #53	; 0x35
   84f1a:	4b38      	ldr	r3, [pc, #224]	; (84ffc <can_initialize+0xfc>)
   84f1c:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   84f1e:	4835      	ldr	r0, [pc, #212]	; (84ff4 <can_initialize+0xf4>)
   84f20:	4b37      	ldr	r3, [pc, #220]	; (85000 <can_initialize+0x100>)
   84f22:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   84f24:	4833      	ldr	r0, [pc, #204]	; (84ff4 <can_initialize+0xf4>)
   84f26:	4b37      	ldr	r3, [pc, #220]	; (85004 <can_initialize+0x104>)
   84f28:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   84f2a:	4837      	ldr	r0, [pc, #220]	; (85008 <can_initialize+0x108>)
   84f2c:	218f      	movs	r1, #143	; 0x8f
   84f2e:	4b32      	ldr	r3, [pc, #200]	; (84ff8 <can_initialize+0xf8>)
   84f30:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   84f32:	4835      	ldr	r0, [pc, #212]	; (85008 <can_initialize+0x108>)
   84f34:	2190      	movs	r1, #144	; 0x90
   84f36:	4b31      	ldr	r3, [pc, #196]	; (84ffc <can_initialize+0xfc>)
   84f38:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   84f3a:	4833      	ldr	r0, [pc, #204]	; (85008 <can_initialize+0x108>)
   84f3c:	4b30      	ldr	r3, [pc, #192]	; (85000 <can_initialize+0x100>)
   84f3e:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   84f40:	4831      	ldr	r0, [pc, #196]	; (85008 <can_initialize+0x108>)
   84f42:	4b30      	ldr	r3, [pc, #192]	; (85004 <can_initialize+0x104>)
   84f44:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   84f46:	202b      	movs	r0, #43	; 0x2b
   84f48:	4b30      	ldr	r3, [pc, #192]	; (8500c <can_initialize+0x10c>)
   84f4a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   84f4c:	202c      	movs	r0, #44	; 0x2c
   84f4e:	4b2f      	ldr	r3, [pc, #188]	; (8500c <can_initialize+0x10c>)
   84f50:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   84f52:	4b2f      	ldr	r3, [pc, #188]	; (85010 <can_initialize+0x110>)
   84f54:	4798      	blx	r3
   84f56:	6078      	str	r0, [r7, #4]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84f58:	482e      	ldr	r0, [pc, #184]	; (85014 <can_initialize+0x114>)
   84f5a:	6879      	ldr	r1, [r7, #4]
   84f5c:	22fa      	movs	r2, #250	; 0xfa
   84f5e:	4b2e      	ldr	r3, [pc, #184]	; (85018 <can_initialize+0x118>)
   84f60:	4798      	blx	r3
   84f62:	4603      	mov	r3, r0
   84f64:	2b00      	cmp	r3, #0
   84f66:	d041      	beq.n	84fec <can_initialize+0xec>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   84f68:	482c      	ldr	r0, [pc, #176]	; (8501c <can_initialize+0x11c>)
   84f6a:	6879      	ldr	r1, [r7, #4]
   84f6c:	22fa      	movs	r2, #250	; 0xfa
   84f6e:	4b2a      	ldr	r3, [pc, #168]	; (85018 <can_initialize+0x118>)
   84f70:	4798      	blx	r3
   84f72:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84f74:	2b00      	cmp	r3, #0
   84f76:	d039      	beq.n	84fec <can_initialize+0xec>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

	/* Disable all CAN0 & CAN1 interrupts. */
	can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84f78:	4826      	ldr	r0, [pc, #152]	; (85014 <can_initialize+0x114>)
   84f7a:	f04f 31ff 	mov.w	r1, #4294967295
   84f7e:	4b28      	ldr	r3, [pc, #160]	; (85020 <can_initialize+0x120>)
   84f80:	4798      	blx	r3
	can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84f82:	4826      	ldr	r0, [pc, #152]	; (8501c <can_initialize+0x11c>)
   84f84:	f04f 31ff 	mov.w	r1, #4294967295
   84f88:	4b25      	ldr	r3, [pc, #148]	; (85020 <can_initialize+0x120>)
   84f8a:	4798      	blx	r3
		
	NVIC_EnableIRQ(CAN0_IRQn);
   84f8c:	202b      	movs	r0, #43	; 0x2b
   84f8e:	4b25      	ldr	r3, [pc, #148]	; (85024 <can_initialize+0x124>)
   84f90:	4798      	blx	r3
	NVIC_EnableIRQ(CAN1_IRQn);
   84f92:	202c      	movs	r0, #44	; 0x2c
   84f94:	4b23      	ldr	r3, [pc, #140]	; (85024 <can_initialize+0x124>)
   84f96:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   84f98:	481e      	ldr	r0, [pc, #120]	; (85014 <can_initialize+0x114>)
   84f9a:	4b23      	ldr	r3, [pc, #140]	; (85028 <can_initialize+0x128>)
   84f9c:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   84f9e:	481f      	ldr	r0, [pc, #124]	; (8501c <can_initialize+0x11c>)
   84fa0:	4b21      	ldr	r3, [pc, #132]	; (85028 <can_initialize+0x128>)
   84fa2:	4798      	blx	r3
	
	/* Initialize the CAN0 & CAN1 mailboxes */
	x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   84fa4:	68b8      	ldr	r0, [r7, #8]
   84fa6:	4b21      	ldr	r3, [pc, #132]	; (8502c <can_initialize+0x12c>)
   84fa8:	4798      	blx	r3
   84faa:	60b8      	str	r0, [r7, #8]
	//configASSERT(x);
	
	/* Initialize the data reception flag	*/
	glob_drf = 0;
   84fac:	4b20      	ldr	r3, [pc, #128]	; (85030 <can_initialize+0x130>)
   84fae:	2200      	movs	r2, #0
   84fb0:	701a      	strb	r2, [r3, #0]
	
	/* Initialize the global can regs		*/
	for (i = 0; i < 8; i++)
   84fb2:	2300      	movs	r3, #0
   84fb4:	60fb      	str	r3, [r7, #12]
   84fb6:	e016      	b.n	84fe6 <can_initialize+0xe6>
	{
		can_glob_com_reg[i] = 0;
   84fb8:	4b1e      	ldr	r3, [pc, #120]	; (85034 <can_initialize+0x134>)
   84fba:	68fa      	ldr	r2, [r7, #12]
   84fbc:	2100      	movs	r1, #0
   84fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		can_glob_data_reg[i] = 0;
   84fc2:	4b1d      	ldr	r3, [pc, #116]	; (85038 <can_initialize+0x138>)
   84fc4:	68fa      	ldr	r2, [r7, #12]
   84fc6:	2100      	movs	r1, #0
   84fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		can_glob_hk_reg[i] = 0;
   84fcc:	4b1b      	ldr	r3, [pc, #108]	; (8503c <can_initialize+0x13c>)
   84fce:	68fa      	ldr	r2, [r7, #12]
   84fd0:	2100      	movs	r1, #0
   84fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		glob_stored_data[i] = 0;
   84fd6:	4b1a      	ldr	r3, [pc, #104]	; (85040 <can_initialize+0x140>)
   84fd8:	68fa      	ldr	r2, [r7, #12]
   84fda:	2100      	movs	r1, #0
   84fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	
	/* Initialize the data reception flag	*/
	glob_drf = 0;
	
	/* Initialize the global can regs		*/
	for (i = 0; i < 8; i++)
   84fe0:	68fb      	ldr	r3, [r7, #12]
   84fe2:	3301      	adds	r3, #1
   84fe4:	60fb      	str	r3, [r7, #12]
   84fe6:	68fb      	ldr	r3, [r7, #12]
   84fe8:	2b07      	cmp	r3, #7
   84fea:	d9e5      	bls.n	84fb8 <can_initialize+0xb8>
		can_glob_hk_reg[i] = 0;
		glob_stored_data[i] = 0;
	}
	
	}
	return;
   84fec:	bf00      	nop
}
   84fee:	3710      	adds	r7, #16
   84ff0:	46bd      	mov	sp, r7
   84ff2:	bd80      	pop	{r7, pc}
   84ff4:	2007a6e0 	.word	0x2007a6e0
   84ff8:	00080eb5 	.word	0x00080eb5
   84ffc:	00080ed1 	.word	0x00080ed1
   85000:	00080f09 	.word	0x00080f09
   85004:	00080eed 	.word	0x00080eed
   85008:	2007a66c 	.word	0x2007a66c
   8500c:	00081d25 	.word	0x00081d25
   85010:	00084a19 	.word	0x00084a19
   85014:	400b4000 	.word	0x400b4000
   85018:	00081075 	.word	0x00081075
   8501c:	400b8000 	.word	0x400b8000
   85020:	00081159 	.word	0x00081159
   85024:	00084959 	.word	0x00084959
   85028:	000814b5 	.word	0x000814b5
   8502c:	00085045 	.word	0x00085045
   85030:	2007a668 	.word	0x2007a668
   85034:	2007a6e8 	.word	0x2007a6e8
   85038:	2007a674 	.word	0x2007a674
   8503c:	2007a638 	.word	0x2007a638
   85040:	2007a640 	.word	0x2007a640

00085044 <can_init_mailboxes>:

uint32_t can_init_mailboxes(uint32_t x)
{
   85044:	b580      	push	{r7, lr}
   85046:	b082      	sub	sp, #8
   85048:	af00      	add	r7, sp, #0
   8504a:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   8504c:	483d      	ldr	r0, [pc, #244]	; (85144 <can_init_mailboxes+0x100>)
   8504e:	4b3e      	ldr	r3, [pc, #248]	; (85148 <can_init_mailboxes+0x104>)
   85050:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85052:	4b3c      	ldr	r3, [pc, #240]	; (85144 <can_init_mailboxes+0x100>)
   85054:	2207      	movs	r2, #7
   85056:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85058:	4b3a      	ldr	r3, [pc, #232]	; (85144 <can_init_mailboxes+0x100>)
   8505a:	2203      	movs	r2, #3
   8505c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   8505e:	4b39      	ldr	r3, [pc, #228]	; (85144 <can_init_mailboxes+0x100>)
   85060:	2205      	movs	r2, #5
   85062:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85064:	4b37      	ldr	r3, [pc, #220]	; (85144 <can_init_mailboxes+0x100>)
   85066:	2200      	movs	r2, #0
   85068:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8506a:	4b36      	ldr	r3, [pc, #216]	; (85144 <can_init_mailboxes+0x100>)
   8506c:	2200      	movs	r2, #0
   8506e:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85070:	4836      	ldr	r0, [pc, #216]	; (8514c <can_init_mailboxes+0x108>)
   85072:	4934      	ldr	r1, [pc, #208]	; (85144 <can_init_mailboxes+0x100>)
   85074:	4b36      	ldr	r3, [pc, #216]	; (85150 <can_init_mailboxes+0x10c>)
   85076:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85078:	4836      	ldr	r0, [pc, #216]	; (85154 <can_init_mailboxes+0x110>)
   8507a:	4b33      	ldr	r3, [pc, #204]	; (85148 <can_init_mailboxes+0x104>)
   8507c:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   8507e:	4b35      	ldr	r3, [pc, #212]	; (85154 <can_init_mailboxes+0x110>)
   85080:	2200      	movs	r2, #0
   85082:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85084:	4b33      	ldr	r3, [pc, #204]	; (85154 <can_init_mailboxes+0x110>)
   85086:	2201      	movs	r2, #1
   85088:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8508a:	4b32      	ldr	r3, [pc, #200]	; (85154 <can_init_mailboxes+0x110>)
   8508c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85090:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85092:	4b30      	ldr	r3, [pc, #192]	; (85154 <can_init_mailboxes+0x110>)
   85094:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   85098:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8509a:	482f      	ldr	r0, [pc, #188]	; (85158 <can_init_mailboxes+0x114>)
   8509c:	492d      	ldr	r1, [pc, #180]	; (85154 <can_init_mailboxes+0x110>)
   8509e:	4b2c      	ldr	r3, [pc, #176]	; (85150 <can_init_mailboxes+0x10c>)
   850a0:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   850a2:	482c      	ldr	r0, [pc, #176]	; (85154 <can_init_mailboxes+0x110>)
   850a4:	4b28      	ldr	r3, [pc, #160]	; (85148 <can_init_mailboxes+0x104>)
   850a6:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   850a8:	4b2a      	ldr	r3, [pc, #168]	; (85154 <can_init_mailboxes+0x110>)
   850aa:	2206      	movs	r2, #6
   850ac:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   850ae:	4b29      	ldr	r3, [pc, #164]	; (85154 <can_init_mailboxes+0x110>)
   850b0:	2201      	movs	r2, #1
   850b2:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   850b4:	4b27      	ldr	r3, [pc, #156]	; (85154 <can_init_mailboxes+0x110>)
   850b6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   850ba:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   850bc:	4b25      	ldr	r3, [pc, #148]	; (85154 <can_init_mailboxes+0x110>)
   850be:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   850c2:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   850c4:	4824      	ldr	r0, [pc, #144]	; (85158 <can_init_mailboxes+0x114>)
   850c6:	4923      	ldr	r1, [pc, #140]	; (85154 <can_init_mailboxes+0x110>)
   850c8:	4b21      	ldr	r3, [pc, #132]	; (85150 <can_init_mailboxes+0x10c>)
   850ca:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   850cc:	4821      	ldr	r0, [pc, #132]	; (85154 <can_init_mailboxes+0x110>)
   850ce:	4b1e      	ldr	r3, [pc, #120]	; (85148 <can_init_mailboxes+0x104>)
   850d0:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   850d2:	4b20      	ldr	r3, [pc, #128]	; (85154 <can_init_mailboxes+0x110>)
   850d4:	2207      	movs	r2, #7
   850d6:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   850d8:	4b1e      	ldr	r3, [pc, #120]	; (85154 <can_init_mailboxes+0x110>)
   850da:	2201      	movs	r2, #1
   850dc:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   850de:	4b1d      	ldr	r3, [pc, #116]	; (85154 <can_init_mailboxes+0x110>)
   850e0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   850e4:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   850e6:	4b1b      	ldr	r3, [pc, #108]	; (85154 <can_init_mailboxes+0x110>)
   850e8:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   850ec:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   850ee:	481a      	ldr	r0, [pc, #104]	; (85158 <can_init_mailboxes+0x114>)
   850f0:	4918      	ldr	r1, [pc, #96]	; (85154 <can_init_mailboxes+0x110>)
   850f2:	4b17      	ldr	r3, [pc, #92]	; (85150 <can_init_mailboxes+0x10c>)
   850f4:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   850f6:	4818      	ldr	r0, [pc, #96]	; (85158 <can_init_mailboxes+0x114>)
   850f8:	2101      	movs	r1, #1
   850fa:	4b18      	ldr	r3, [pc, #96]	; (8515c <can_init_mailboxes+0x118>)
   850fc:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   850fe:	4816      	ldr	r0, [pc, #88]	; (85158 <can_init_mailboxes+0x114>)
   85100:	2140      	movs	r1, #64	; 0x40
   85102:	4b16      	ldr	r3, [pc, #88]	; (8515c <can_init_mailboxes+0x118>)
   85104:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   85106:	4814      	ldr	r0, [pc, #80]	; (85158 <can_init_mailboxes+0x114>)
   85108:	2180      	movs	r1, #128	; 0x80
   8510a:	4b14      	ldr	r3, [pc, #80]	; (8515c <can_init_mailboxes+0x118>)
   8510c:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   8510e:	480d      	ldr	r0, [pc, #52]	; (85144 <can_init_mailboxes+0x100>)
   85110:	4b0d      	ldr	r3, [pc, #52]	; (85148 <can_init_mailboxes+0x104>)
   85112:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85114:	4b0b      	ldr	r3, [pc, #44]	; (85144 <can_init_mailboxes+0x100>)
   85116:	2206      	movs	r2, #6
   85118:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   8511a:	4b0a      	ldr	r3, [pc, #40]	; (85144 <can_init_mailboxes+0x100>)
   8511c:	2203      	movs	r2, #3
   8511e:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85120:	4b08      	ldr	r3, [pc, #32]	; (85144 <can_init_mailboxes+0x100>)
   85122:	2214      	movs	r2, #20
   85124:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85126:	4b07      	ldr	r3, [pc, #28]	; (85144 <can_init_mailboxes+0x100>)
   85128:	2200      	movs	r2, #0
   8512a:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8512c:	4b05      	ldr	r3, [pc, #20]	; (85144 <can_init_mailboxes+0x100>)
   8512e:	2200      	movs	r2, #0
   85130:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85132:	4806      	ldr	r0, [pc, #24]	; (8514c <can_init_mailboxes+0x108>)
   85134:	4903      	ldr	r1, [pc, #12]	; (85144 <can_init_mailboxes+0x100>)
   85136:	4b06      	ldr	r3, [pc, #24]	; (85150 <can_init_mailboxes+0x10c>)
   85138:	4798      	blx	r3

	return 1;
   8513a:	2301      	movs	r3, #1
}
   8513c:	4618      	mov	r0, r3
   8513e:	3708      	adds	r7, #8
   85140:	46bd      	mov	sp, r7
   85142:	bd80      	pop	{r7, pc}
   85144:	2007a6a0 	.word	0x2007a6a0
   85148:	00084c71 	.word	0x00084c71
   8514c:	400b4000 	.word	0x400b4000
   85150:	00081219 	.word	0x00081219
   85154:	2007a648 	.word	0x2007a648
   85158:	400b8000 	.word	0x400b8000
   8515c:	0008113d 	.word	0x0008113d

00085160 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   85160:	b480      	push	{r7}
   85162:	b085      	sub	sp, #20
   85164:	af00      	add	r7, sp, #0
   85166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   85168:	687b      	ldr	r3, [r7, #4]
   8516a:	f003 0307 	and.w	r3, r3, #7
   8516e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85170:	4b0c      	ldr	r3, [pc, #48]	; (851a4 <NVIC_SetPriorityGrouping+0x44>)
   85172:	68db      	ldr	r3, [r3, #12]
   85174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   85176:	68ba      	ldr	r2, [r7, #8]
   85178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   8517c:	4013      	ands	r3, r2
   8517e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   85180:	68fb      	ldr	r3, [r7, #12]
   85182:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   85184:	68bb      	ldr	r3, [r7, #8]
   85186:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   85188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   8518c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   85190:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   85192:	4b04      	ldr	r3, [pc, #16]	; (851a4 <NVIC_SetPriorityGrouping+0x44>)
   85194:	68ba      	ldr	r2, [r7, #8]
   85196:	60da      	str	r2, [r3, #12]
}
   85198:	3714      	adds	r7, #20
   8519a:	46bd      	mov	sp, r7
   8519c:	f85d 7b04 	ldr.w	r7, [sp], #4
   851a0:	4770      	bx	lr
   851a2:	bf00      	nop
   851a4:	e000ed00 	.word	0xe000ed00

000851a8 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   851a8:	b580      	push	{r7, lr}
   851aa:	af00      	add	r7, sp, #0
	/* Prepare the hardware */
	prvSetupHardware();
   851ac:	4b07      	ldr	r3, [pc, #28]	; (851cc <main+0x24>)
   851ae:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   851b0:	4b07      	ldr	r3, [pc, #28]	; (851d0 <main+0x28>)
   851b2:	4798      	blx	r3

	/* Create Tasks */
	my_blink();
   851b4:	4b07      	ldr	r3, [pc, #28]	; (851d4 <main+0x2c>)
   851b6:	4798      	blx	r3
	housekeep();
   851b8:	4b07      	ldr	r3, [pc, #28]	; (851d8 <main+0x30>)
   851ba:	4798      	blx	r3
	command_loop();
   851bc:	4b07      	ldr	r3, [pc, #28]	; (851dc <main+0x34>)
   851be:	4798      	blx	r3
	data_test();
   851c0:	4b07      	ldr	r3, [pc, #28]	; (851e0 <main+0x38>)
   851c2:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   851c4:	4b07      	ldr	r3, [pc, #28]	; (851e4 <main+0x3c>)
   851c6:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   851c8:	e7fe      	b.n	851c8 <main+0x20>
   851ca:	bf00      	nop
   851cc:	000851e9 	.word	0x000851e9
   851d0:	00085221 	.word	0x00085221
   851d4:	0008528d 	.word	0x0008528d
   851d8:	000802ed 	.word	0x000802ed
   851dc:	00080149 	.word	0x00080149
   851e0:	00080211 	.word	0x00080211
   851e4:	00083719 	.word	0x00083719

000851e8 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   851e8:	b580      	push	{r7, lr}
   851ea:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   851ec:	4b06      	ldr	r3, [pc, #24]	; (85208 <prvSetupHardware+0x20>)
   851ee:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   851f0:	2000      	movs	r0, #0
   851f2:	4b06      	ldr	r3, [pc, #24]	; (8520c <prvSetupHardware+0x24>)
   851f4:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   851f6:	4b06      	ldr	r3, [pc, #24]	; (85210 <prvSetupHardware+0x28>)
   851f8:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   851fa:	4b06      	ldr	r3, [pc, #24]	; (85214 <prvSetupHardware+0x2c>)
   851fc:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   851fe:	4b06      	ldr	r3, [pc, #24]	; (85218 <prvSetupHardware+0x30>)
   85200:	4798      	blx	r3
	
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   85202:	4b06      	ldr	r3, [pc, #24]	; (8521c <prvSetupHardware+0x34>)
   85204:	4798      	blx	r3
	
}
   85206:	bd80      	pop	{r7, pc}
   85208:	00080d5d 	.word	0x00080d5d
   8520c:	00085161 	.word	0x00085161
   85210:	00080dc5 	.word	0x00080dc5
   85214:	0008533d 	.word	0x0008533d
   85218:	00084f01 	.word	0x00084f01
   8521c:	000809dd 	.word	0x000809dd

00085220 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   85220:	b580      	push	{r7, lr}
   85222:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   85224:	2001      	movs	r0, #1
   85226:	2100      	movs	r1, #0
   85228:	2203      	movs	r2, #3
   8522a:	4b03      	ldr	r3, [pc, #12]	; (85238 <prvInitializeMutexes+0x18>)
   8522c:	4798      	blx	r3
   8522e:	4602      	mov	r2, r0
   85230:	4b02      	ldr	r3, [pc, #8]	; (8523c <prvInitializeMutexes+0x1c>)
   85232:	601a      	str	r2, [r3, #0]
	return;
   85234:	bf00      	nop
}
   85236:	bd80      	pop	{r7, pc}
   85238:	00082ca5 	.word	0x00082ca5
   8523c:	2007a69c 	.word	0x2007a69c

00085240 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   85240:	b580      	push	{r7, lr}
   85242:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   85244:	4b01      	ldr	r3, [pc, #4]	; (8524c <vApplicationMallocFailedHook+0xc>)
   85246:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85248:	e7fe      	b.n	85248 <vApplicationMallocFailedHook+0x8>
   8524a:	bf00      	nop
   8524c:	00082729 	.word	0x00082729

00085250 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   85250:	b580      	push	{r7, lr}
   85252:	b082      	sub	sp, #8
   85254:	af00      	add	r7, sp, #0
   85256:	6078      	str	r0, [r7, #4]
   85258:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   8525a:	4b01      	ldr	r3, [pc, #4]	; (85260 <vApplicationStackOverflowHook+0x10>)
   8525c:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   8525e:	e7fe      	b.n	8525e <vApplicationStackOverflowHook+0xe>
   85260:	00082729 	.word	0x00082729

00085264 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   85264:	b580      	push	{r7, lr}
   85266:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   85268:	4804      	ldr	r0, [pc, #16]	; (8527c <WDT_Handler+0x18>)
   8526a:	4b05      	ldr	r3, [pc, #20]	; (85280 <WDT_Handler+0x1c>)
   8526c:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   8526e:	2055      	movs	r0, #85	; 0x55
   85270:	4b04      	ldr	r3, [pc, #16]	; (85284 <WDT_Handler+0x20>)
   85272:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   85274:	4801      	ldr	r0, [pc, #4]	; (8527c <WDT_Handler+0x18>)
   85276:	4b04      	ldr	r3, [pc, #16]	; (85288 <WDT_Handler+0x24>)
   85278:	4798      	blx	r3
}
   8527a:	bd80      	pop	{r7, pc}
   8527c:	400e1a50 	.word	0x400e1a50
   85280:	000820b9 	.word	0x000820b9
   85284:	00081739 	.word	0x00081739
   85288:	00082091 	.word	0x00082091

0008528c <my_blink>:

/**
 * \brief Toggles the state of the LED pin high/low.		
 */
void my_blink( void )
{		
   8528c:	b590      	push	{r4, r7, lr}
   8528e:	b085      	sub	sp, #20
   85290:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this file. */
		
	xTaskCreate( prvTurnOnTask,						/* The function that implements the task. */
   85292:	2301      	movs	r3, #1
   85294:	9300      	str	r3, [sp, #0]
   85296:	2300      	movs	r3, #0
   85298:	9301      	str	r3, [sp, #4]
   8529a:	2300      	movs	r3, #0
   8529c:	9302      	str	r3, [sp, #8]
   8529e:	2300      	movs	r3, #0
   852a0:	9303      	str	r3, [sp, #12]
   852a2:	480d      	ldr	r0, [pc, #52]	; (852d8 <my_blink+0x4c>)
   852a4:	490d      	ldr	r1, [pc, #52]	; (852dc <my_blink+0x50>)
   852a6:	2282      	movs	r2, #130	; 0x82
   852a8:	f241 2334 	movw	r3, #4660	; 0x1234
   852ac:	4c0c      	ldr	r4, [pc, #48]	; (852e0 <my_blink+0x54>)
   852ae:	47a0      	blx	r4
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) TurnOn_PARAMETER, 		/* The parameter passed to the task - just to check the functionality. */
				TurnOn_TASK_PRIORITY, 				/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvTurnOffTask, 
   852b0:	2301      	movs	r3, #1
   852b2:	9300      	str	r3, [sp, #0]
   852b4:	2300      	movs	r3, #0
   852b6:	9301      	str	r3, [sp, #4]
   852b8:	2300      	movs	r3, #0
   852ba:	9302      	str	r3, [sp, #8]
   852bc:	2300      	movs	r3, #0
   852be:	9303      	str	r3, [sp, #12]
   852c0:	4808      	ldr	r0, [pc, #32]	; (852e4 <my_blink+0x58>)
   852c2:	4909      	ldr	r1, [pc, #36]	; (852e8 <my_blink+0x5c>)
   852c4:	2282      	movs	r2, #130	; 0x82
   852c6:	f245 6378 	movw	r3, #22136	; 0x5678
   852ca:	4c05      	ldr	r4, [pc, #20]	; (852e0 <my_blink+0x54>)
   852cc:	47a0      	blx	r4
				 "OFF", 
				 configMINIMAL_STACK_SIZE, 
				 ( void * ) TurnOff_PARAMETER, 
				 TurnOn_TASK_PRIORITY, 
				 NULL );
	return;					 
   852ce:	bf00      	nop
}
   852d0:	3704      	adds	r7, #4
   852d2:	46bd      	mov	sp, r7
   852d4:	bd90      	pop	{r4, r7, pc}
   852d6:	bf00      	nop
   852d8:	000852ed 	.word	0x000852ed
   852dc:	00086174 	.word	0x00086174
   852e0:	0008349d 	.word	0x0008349d
   852e4:	00085315 	.word	0x00085315
   852e8:	00086178 	.word	0x00086178

000852ec <prvTurnOnTask>:
/**
 * \brief Sets LED pin to high.
 * @param *pvParameters:	
 */
static void prvTurnOnTask( void *pvParameters )
{
   852ec:	b580      	push	{r7, lr}
   852ee:	b082      	sub	sp, #8
   852f0:	af00      	add	r7, sp, #0
   852f2:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   852f4:	687a      	ldr	r2, [r7, #4]
   852f6:	f241 2334 	movw	r3, #4660	; 0x1234
   852fa:	429a      	cmp	r2, r3
   852fc:	d002      	beq.n	85304 <prvTurnOnTask+0x18>
   852fe:	4b03      	ldr	r3, [pc, #12]	; (8530c <prvTurnOnTask+0x20>)
   85300:	4798      	blx	r3
   85302:	e7fe      	b.n	85302 <prvTurnOnTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_high(LED0_GPIO);
   85304:	203b      	movs	r0, #59	; 0x3b
   85306:	4b02      	ldr	r3, [pc, #8]	; (85310 <prvTurnOnTask+0x24>)
   85308:	4798      	blx	r3
	}
   8530a:	e7fb      	b.n	85304 <prvTurnOnTask+0x18>
   8530c:	00082729 	.word	0x00082729
   85310:	000816d1 	.word	0x000816d1

00085314 <prvTurnOffTask>:
/**
 * \brief Sets LED pin to low.
 * @param *pvParameters:
 */
static void prvTurnOffTask( void *pvParameters )
{
   85314:	b580      	push	{r7, lr}
   85316:	b082      	sub	sp, #8
   85318:	af00      	add	r7, sp, #0
   8531a:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   8531c:	687a      	ldr	r2, [r7, #4]
   8531e:	f245 6378 	movw	r3, #22136	; 0x5678
   85322:	429a      	cmp	r2, r3
   85324:	d002      	beq.n	8532c <prvTurnOffTask+0x18>
   85326:	4b03      	ldr	r3, [pc, #12]	; (85334 <prvTurnOffTask+0x20>)
   85328:	4798      	blx	r3
   8532a:	e7fe      	b.n	8532a <prvTurnOffTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_low(LED0_GPIO);
   8532c:	203b      	movs	r0, #59	; 0x3b
   8532e:	4b02      	ldr	r3, [pc, #8]	; (85338 <prvTurnOffTask+0x24>)
   85330:	4798      	blx	r3
	}
   85332:	e7fb      	b.n	8532c <prvTurnOffTask+0x18>
   85334:	00082729 	.word	0x00082729
   85338:	00081705 	.word	0x00081705

0008533c <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   8533c:	b580      	push	{r7, lr}
   8533e:	b082      	sub	sp, #8
   85340:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   85342:	2300      	movs	r3, #0
   85344:	607b      	str	r3, [r7, #4]
   85346:	e00f      	b.n	85368 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   85348:	4b0a      	ldr	r3, [pc, #40]	; (85374 <vParTestInitialise+0x38>)
   8534a:	687a      	ldr	r2, [r7, #4]
   8534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   85350:	4618      	mov	r0, r3
   85352:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   85356:	4b08      	ldr	r3, [pc, #32]	; (85378 <vParTestInitialise+0x3c>)
   85358:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8535a:	6878      	ldr	r0, [r7, #4]
   8535c:	2100      	movs	r1, #0
   8535e:	4b07      	ldr	r3, [pc, #28]	; (8537c <vParTestInitialise+0x40>)
   85360:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   85362:	687b      	ldr	r3, [r7, #4]
   85364:	3301      	adds	r3, #1
   85366:	607b      	str	r3, [r7, #4]
   85368:	687b      	ldr	r3, [r7, #4]
   8536a:	2b03      	cmp	r3, #3
   8536c:	d9ec      	bls.n	85348 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   8536e:	3708      	adds	r7, #8
   85370:	46bd      	mov	sp, r7
   85372:	bd80      	pop	{r7, pc}
   85374:	0008617c 	.word	0x0008617c
   85378:	00081799 	.word	0x00081799
   8537c:	00085381 	.word	0x00085381

00085380 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   85380:	b580      	push	{r7, lr}
   85382:	b082      	sub	sp, #8
   85384:	af00      	add	r7, sp, #0
   85386:	6078      	str	r0, [r7, #4]
   85388:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   8538a:	687b      	ldr	r3, [r7, #4]
   8538c:	2b03      	cmp	r3, #3
   8538e:	d823      	bhi.n	853d8 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   85390:	687b      	ldr	r3, [r7, #4]
   85392:	2b00      	cmp	r3, #0
   85394:	d106      	bne.n	853a4 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   85396:	683b      	ldr	r3, [r7, #0]
   85398:	2b00      	cmp	r3, #0
   8539a:	bf14      	ite	ne
   8539c:	2300      	movne	r3, #0
   8539e:	2301      	moveq	r3, #1
   853a0:	b2db      	uxtb	r3, r3
   853a2:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   853a4:	683b      	ldr	r3, [r7, #0]
   853a6:	2b00      	cmp	r3, #0
   853a8:	d00b      	beq.n	853c2 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   853aa:	4b0d      	ldr	r3, [pc, #52]	; (853e0 <vParTestSetLED+0x60>)
   853ac:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   853ae:	4b0d      	ldr	r3, [pc, #52]	; (853e4 <vParTestSetLED+0x64>)
   853b0:	687a      	ldr	r2, [r7, #4]
   853b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   853b6:	4618      	mov	r0, r3
   853b8:	4b0b      	ldr	r3, [pc, #44]	; (853e8 <vParTestSetLED+0x68>)
   853ba:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   853bc:	4b0b      	ldr	r3, [pc, #44]	; (853ec <vParTestSetLED+0x6c>)
   853be:	4798      	blx	r3
   853c0:	e00a      	b.n	853d8 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   853c2:	4b07      	ldr	r3, [pc, #28]	; (853e0 <vParTestSetLED+0x60>)
   853c4:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   853c6:	4b07      	ldr	r3, [pc, #28]	; (853e4 <vParTestSetLED+0x64>)
   853c8:	687a      	ldr	r2, [r7, #4]
   853ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   853ce:	4618      	mov	r0, r3
   853d0:	4b07      	ldr	r3, [pc, #28]	; (853f0 <vParTestSetLED+0x70>)
   853d2:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   853d4:	4b05      	ldr	r3, [pc, #20]	; (853ec <vParTestSetLED+0x6c>)
   853d6:	4798      	blx	r3
		}
	}
}
   853d8:	3708      	adds	r7, #8
   853da:	46bd      	mov	sp, r7
   853dc:	bd80      	pop	{r7, pc}
   853de:	bf00      	nop
   853e0:	000826ad 	.word	0x000826ad
   853e4:	0008617c 	.word	0x0008617c
   853e8:	00081705 	.word	0x00081705
   853ec:	000826f1 	.word	0x000826f1
   853f0:	000816d1 	.word	0x000816d1

000853f4 <__aeabi_drsub>:
   853f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   853f8:	e002      	b.n	85400 <__adddf3>
   853fa:	bf00      	nop

000853fc <__aeabi_dsub>:
   853fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085400 <__adddf3>:
   85400:	b530      	push	{r4, r5, lr}
   85402:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85406:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8540a:	ea94 0f05 	teq	r4, r5
   8540e:	bf08      	it	eq
   85410:	ea90 0f02 	teqeq	r0, r2
   85414:	bf1f      	itttt	ne
   85416:	ea54 0c00 	orrsne.w	ip, r4, r0
   8541a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8541e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85422:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85426:	f000 80e2 	beq.w	855ee <__adddf3+0x1ee>
   8542a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8542e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85432:	bfb8      	it	lt
   85434:	426d      	neglt	r5, r5
   85436:	dd0c      	ble.n	85452 <__adddf3+0x52>
   85438:	442c      	add	r4, r5
   8543a:	ea80 0202 	eor.w	r2, r0, r2
   8543e:	ea81 0303 	eor.w	r3, r1, r3
   85442:	ea82 0000 	eor.w	r0, r2, r0
   85446:	ea83 0101 	eor.w	r1, r3, r1
   8544a:	ea80 0202 	eor.w	r2, r0, r2
   8544e:	ea81 0303 	eor.w	r3, r1, r3
   85452:	2d36      	cmp	r5, #54	; 0x36
   85454:	bf88      	it	hi
   85456:	bd30      	pophi	{r4, r5, pc}
   85458:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8545c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85460:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85464:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85468:	d002      	beq.n	85470 <__adddf3+0x70>
   8546a:	4240      	negs	r0, r0
   8546c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85470:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85474:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85478:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8547c:	d002      	beq.n	85484 <__adddf3+0x84>
   8547e:	4252      	negs	r2, r2
   85480:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85484:	ea94 0f05 	teq	r4, r5
   85488:	f000 80a7 	beq.w	855da <__adddf3+0x1da>
   8548c:	f1a4 0401 	sub.w	r4, r4, #1
   85490:	f1d5 0e20 	rsbs	lr, r5, #32
   85494:	db0d      	blt.n	854b2 <__adddf3+0xb2>
   85496:	fa02 fc0e 	lsl.w	ip, r2, lr
   8549a:	fa22 f205 	lsr.w	r2, r2, r5
   8549e:	1880      	adds	r0, r0, r2
   854a0:	f141 0100 	adc.w	r1, r1, #0
   854a4:	fa03 f20e 	lsl.w	r2, r3, lr
   854a8:	1880      	adds	r0, r0, r2
   854aa:	fa43 f305 	asr.w	r3, r3, r5
   854ae:	4159      	adcs	r1, r3
   854b0:	e00e      	b.n	854d0 <__adddf3+0xd0>
   854b2:	f1a5 0520 	sub.w	r5, r5, #32
   854b6:	f10e 0e20 	add.w	lr, lr, #32
   854ba:	2a01      	cmp	r2, #1
   854bc:	fa03 fc0e 	lsl.w	ip, r3, lr
   854c0:	bf28      	it	cs
   854c2:	f04c 0c02 	orrcs.w	ip, ip, #2
   854c6:	fa43 f305 	asr.w	r3, r3, r5
   854ca:	18c0      	adds	r0, r0, r3
   854cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   854d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   854d4:	d507      	bpl.n	854e6 <__adddf3+0xe6>
   854d6:	f04f 0e00 	mov.w	lr, #0
   854da:	f1dc 0c00 	rsbs	ip, ip, #0
   854de:	eb7e 0000 	sbcs.w	r0, lr, r0
   854e2:	eb6e 0101 	sbc.w	r1, lr, r1
   854e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   854ea:	d31b      	bcc.n	85524 <__adddf3+0x124>
   854ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   854f0:	d30c      	bcc.n	8550c <__adddf3+0x10c>
   854f2:	0849      	lsrs	r1, r1, #1
   854f4:	ea5f 0030 	movs.w	r0, r0, rrx
   854f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   854fc:	f104 0401 	add.w	r4, r4, #1
   85500:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85504:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85508:	f080 809a 	bcs.w	85640 <__adddf3+0x240>
   8550c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85510:	bf08      	it	eq
   85512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85516:	f150 0000 	adcs.w	r0, r0, #0
   8551a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8551e:	ea41 0105 	orr.w	r1, r1, r5
   85522:	bd30      	pop	{r4, r5, pc}
   85524:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   85528:	4140      	adcs	r0, r0
   8552a:	eb41 0101 	adc.w	r1, r1, r1
   8552e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85532:	f1a4 0401 	sub.w	r4, r4, #1
   85536:	d1e9      	bne.n	8550c <__adddf3+0x10c>
   85538:	f091 0f00 	teq	r1, #0
   8553c:	bf04      	itt	eq
   8553e:	4601      	moveq	r1, r0
   85540:	2000      	moveq	r0, #0
   85542:	fab1 f381 	clz	r3, r1
   85546:	bf08      	it	eq
   85548:	3320      	addeq	r3, #32
   8554a:	f1a3 030b 	sub.w	r3, r3, #11
   8554e:	f1b3 0220 	subs.w	r2, r3, #32
   85552:	da0c      	bge.n	8556e <__adddf3+0x16e>
   85554:	320c      	adds	r2, #12
   85556:	dd08      	ble.n	8556a <__adddf3+0x16a>
   85558:	f102 0c14 	add.w	ip, r2, #20
   8555c:	f1c2 020c 	rsb	r2, r2, #12
   85560:	fa01 f00c 	lsl.w	r0, r1, ip
   85564:	fa21 f102 	lsr.w	r1, r1, r2
   85568:	e00c      	b.n	85584 <__adddf3+0x184>
   8556a:	f102 0214 	add.w	r2, r2, #20
   8556e:	bfd8      	it	le
   85570:	f1c2 0c20 	rsble	ip, r2, #32
   85574:	fa01 f102 	lsl.w	r1, r1, r2
   85578:	fa20 fc0c 	lsr.w	ip, r0, ip
   8557c:	bfdc      	itt	le
   8557e:	ea41 010c 	orrle.w	r1, r1, ip
   85582:	4090      	lslle	r0, r2
   85584:	1ae4      	subs	r4, r4, r3
   85586:	bfa2      	ittt	ge
   85588:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8558c:	4329      	orrge	r1, r5
   8558e:	bd30      	popge	{r4, r5, pc}
   85590:	ea6f 0404 	mvn.w	r4, r4
   85594:	3c1f      	subs	r4, #31
   85596:	da1c      	bge.n	855d2 <__adddf3+0x1d2>
   85598:	340c      	adds	r4, #12
   8559a:	dc0e      	bgt.n	855ba <__adddf3+0x1ba>
   8559c:	f104 0414 	add.w	r4, r4, #20
   855a0:	f1c4 0220 	rsb	r2, r4, #32
   855a4:	fa20 f004 	lsr.w	r0, r0, r4
   855a8:	fa01 f302 	lsl.w	r3, r1, r2
   855ac:	ea40 0003 	orr.w	r0, r0, r3
   855b0:	fa21 f304 	lsr.w	r3, r1, r4
   855b4:	ea45 0103 	orr.w	r1, r5, r3
   855b8:	bd30      	pop	{r4, r5, pc}
   855ba:	f1c4 040c 	rsb	r4, r4, #12
   855be:	f1c4 0220 	rsb	r2, r4, #32
   855c2:	fa20 f002 	lsr.w	r0, r0, r2
   855c6:	fa01 f304 	lsl.w	r3, r1, r4
   855ca:	ea40 0003 	orr.w	r0, r0, r3
   855ce:	4629      	mov	r1, r5
   855d0:	bd30      	pop	{r4, r5, pc}
   855d2:	fa21 f004 	lsr.w	r0, r1, r4
   855d6:	4629      	mov	r1, r5
   855d8:	bd30      	pop	{r4, r5, pc}
   855da:	f094 0f00 	teq	r4, #0
   855de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   855e2:	bf06      	itte	eq
   855e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   855e8:	3401      	addeq	r4, #1
   855ea:	3d01      	subne	r5, #1
   855ec:	e74e      	b.n	8548c <__adddf3+0x8c>
   855ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   855f2:	bf18      	it	ne
   855f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   855f8:	d029      	beq.n	8564e <__adddf3+0x24e>
   855fa:	ea94 0f05 	teq	r4, r5
   855fe:	bf08      	it	eq
   85600:	ea90 0f02 	teqeq	r0, r2
   85604:	d005      	beq.n	85612 <__adddf3+0x212>
   85606:	ea54 0c00 	orrs.w	ip, r4, r0
   8560a:	bf04      	itt	eq
   8560c:	4619      	moveq	r1, r3
   8560e:	4610      	moveq	r0, r2
   85610:	bd30      	pop	{r4, r5, pc}
   85612:	ea91 0f03 	teq	r1, r3
   85616:	bf1e      	ittt	ne
   85618:	2100      	movne	r1, #0
   8561a:	2000      	movne	r0, #0
   8561c:	bd30      	popne	{r4, r5, pc}
   8561e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   85622:	d105      	bne.n	85630 <__adddf3+0x230>
   85624:	0040      	lsls	r0, r0, #1
   85626:	4149      	adcs	r1, r1
   85628:	bf28      	it	cs
   8562a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8562e:	bd30      	pop	{r4, r5, pc}
   85630:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   85634:	bf3c      	itt	cc
   85636:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8563a:	bd30      	popcc	{r4, r5, pc}
   8563c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85640:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   85644:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85648:	f04f 0000 	mov.w	r0, #0
   8564c:	bd30      	pop	{r4, r5, pc}
   8564e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85652:	bf1a      	itte	ne
   85654:	4619      	movne	r1, r3
   85656:	4610      	movne	r0, r2
   85658:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8565c:	bf1c      	itt	ne
   8565e:	460b      	movne	r3, r1
   85660:	4602      	movne	r2, r0
   85662:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85666:	bf06      	itte	eq
   85668:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8566c:	ea91 0f03 	teqeq	r1, r3
   85670:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   85674:	bd30      	pop	{r4, r5, pc}
   85676:	bf00      	nop

00085678 <__aeabi_ui2d>:
   85678:	f090 0f00 	teq	r0, #0
   8567c:	bf04      	itt	eq
   8567e:	2100      	moveq	r1, #0
   85680:	4770      	bxeq	lr
   85682:	b530      	push	{r4, r5, lr}
   85684:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85688:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8568c:	f04f 0500 	mov.w	r5, #0
   85690:	f04f 0100 	mov.w	r1, #0
   85694:	e750      	b.n	85538 <__adddf3+0x138>
   85696:	bf00      	nop

00085698 <__aeabi_i2d>:
   85698:	f090 0f00 	teq	r0, #0
   8569c:	bf04      	itt	eq
   8569e:	2100      	moveq	r1, #0
   856a0:	4770      	bxeq	lr
   856a2:	b530      	push	{r4, r5, lr}
   856a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   856a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   856ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   856b0:	bf48      	it	mi
   856b2:	4240      	negmi	r0, r0
   856b4:	f04f 0100 	mov.w	r1, #0
   856b8:	e73e      	b.n	85538 <__adddf3+0x138>
   856ba:	bf00      	nop

000856bc <__aeabi_f2d>:
   856bc:	0042      	lsls	r2, r0, #1
   856be:	ea4f 01e2 	mov.w	r1, r2, asr #3
   856c2:	ea4f 0131 	mov.w	r1, r1, rrx
   856c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   856ca:	bf1f      	itttt	ne
   856cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   856d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   856d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   856d8:	4770      	bxne	lr
   856da:	f092 0f00 	teq	r2, #0
   856de:	bf14      	ite	ne
   856e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   856e4:	4770      	bxeq	lr
   856e6:	b530      	push	{r4, r5, lr}
   856e8:	f44f 7460 	mov.w	r4, #896	; 0x380
   856ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   856f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   856f4:	e720      	b.n	85538 <__adddf3+0x138>
   856f6:	bf00      	nop

000856f8 <__aeabi_ul2d>:
   856f8:	ea50 0201 	orrs.w	r2, r0, r1
   856fc:	bf08      	it	eq
   856fe:	4770      	bxeq	lr
   85700:	b530      	push	{r4, r5, lr}
   85702:	f04f 0500 	mov.w	r5, #0
   85706:	e00a      	b.n	8571e <__aeabi_l2d+0x16>

00085708 <__aeabi_l2d>:
   85708:	ea50 0201 	orrs.w	r2, r0, r1
   8570c:	bf08      	it	eq
   8570e:	4770      	bxeq	lr
   85710:	b530      	push	{r4, r5, lr}
   85712:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85716:	d502      	bpl.n	8571e <__aeabi_l2d+0x16>
   85718:	4240      	negs	r0, r0
   8571a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8571e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85722:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85726:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8572a:	f43f aedc 	beq.w	854e6 <__adddf3+0xe6>
   8572e:	f04f 0203 	mov.w	r2, #3
   85732:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85736:	bf18      	it	ne
   85738:	3203      	addne	r2, #3
   8573a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8573e:	bf18      	it	ne
   85740:	3203      	addne	r2, #3
   85742:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   85746:	f1c2 0320 	rsb	r3, r2, #32
   8574a:	fa00 fc03 	lsl.w	ip, r0, r3
   8574e:	fa20 f002 	lsr.w	r0, r0, r2
   85752:	fa01 fe03 	lsl.w	lr, r1, r3
   85756:	ea40 000e 	orr.w	r0, r0, lr
   8575a:	fa21 f102 	lsr.w	r1, r1, r2
   8575e:	4414      	add	r4, r2
   85760:	e6c1      	b.n	854e6 <__adddf3+0xe6>
   85762:	bf00      	nop

00085764 <__aeabi_d2f>:
   85764:	ea4f 0241 	mov.w	r2, r1, lsl #1
   85768:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   8576c:	bf24      	itt	cs
   8576e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   85772:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   85776:	d90d      	bls.n	85794 <__aeabi_d2f+0x30>
   85778:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8577c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   85780:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   85784:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   85788:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   8578c:	bf08      	it	eq
   8578e:	f020 0001 	biceq.w	r0, r0, #1
   85792:	4770      	bx	lr
   85794:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   85798:	d121      	bne.n	857de <__aeabi_d2f+0x7a>
   8579a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   8579e:	bfbc      	itt	lt
   857a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   857a4:	4770      	bxlt	lr
   857a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   857aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
   857ae:	f1c2 0218 	rsb	r2, r2, #24
   857b2:	f1c2 0c20 	rsb	ip, r2, #32
   857b6:	fa10 f30c 	lsls.w	r3, r0, ip
   857ba:	fa20 f002 	lsr.w	r0, r0, r2
   857be:	bf18      	it	ne
   857c0:	f040 0001 	orrne.w	r0, r0, #1
   857c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   857c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   857cc:	fa03 fc0c 	lsl.w	ip, r3, ip
   857d0:	ea40 000c 	orr.w	r0, r0, ip
   857d4:	fa23 f302 	lsr.w	r3, r3, r2
   857d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   857dc:	e7cc      	b.n	85778 <__aeabi_d2f+0x14>
   857de:	ea7f 5362 	mvns.w	r3, r2, asr #21
   857e2:	d107      	bne.n	857f4 <__aeabi_d2f+0x90>
   857e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   857e8:	bf1e      	ittt	ne
   857ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   857ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   857f2:	4770      	bxne	lr
   857f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   857f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   857fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85800:	4770      	bx	lr
   85802:	bf00      	nop

00085804 <__aeabi_frsub>:
   85804:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   85808:	e002      	b.n	85810 <__addsf3>
   8580a:	bf00      	nop

0008580c <__aeabi_fsub>:
   8580c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00085810 <__addsf3>:
   85810:	0042      	lsls	r2, r0, #1
   85812:	bf1f      	itttt	ne
   85814:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   85818:	ea92 0f03 	teqne	r2, r3
   8581c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   85820:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85824:	d06a      	beq.n	858fc <__addsf3+0xec>
   85826:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8582a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8582e:	bfc1      	itttt	gt
   85830:	18d2      	addgt	r2, r2, r3
   85832:	4041      	eorgt	r1, r0
   85834:	4048      	eorgt	r0, r1
   85836:	4041      	eorgt	r1, r0
   85838:	bfb8      	it	lt
   8583a:	425b      	neglt	r3, r3
   8583c:	2b19      	cmp	r3, #25
   8583e:	bf88      	it	hi
   85840:	4770      	bxhi	lr
   85842:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85846:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8584a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8584e:	bf18      	it	ne
   85850:	4240      	negne	r0, r0
   85852:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85856:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8585a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8585e:	bf18      	it	ne
   85860:	4249      	negne	r1, r1
   85862:	ea92 0f03 	teq	r2, r3
   85866:	d03f      	beq.n	858e8 <__addsf3+0xd8>
   85868:	f1a2 0201 	sub.w	r2, r2, #1
   8586c:	fa41 fc03 	asr.w	ip, r1, r3
   85870:	eb10 000c 	adds.w	r0, r0, ip
   85874:	f1c3 0320 	rsb	r3, r3, #32
   85878:	fa01 f103 	lsl.w	r1, r1, r3
   8587c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85880:	d502      	bpl.n	85888 <__addsf3+0x78>
   85882:	4249      	negs	r1, r1
   85884:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85888:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8588c:	d313      	bcc.n	858b6 <__addsf3+0xa6>
   8588e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   85892:	d306      	bcc.n	858a2 <__addsf3+0x92>
   85894:	0840      	lsrs	r0, r0, #1
   85896:	ea4f 0131 	mov.w	r1, r1, rrx
   8589a:	f102 0201 	add.w	r2, r2, #1
   8589e:	2afe      	cmp	r2, #254	; 0xfe
   858a0:	d251      	bcs.n	85946 <__addsf3+0x136>
   858a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   858a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   858aa:	bf08      	it	eq
   858ac:	f020 0001 	biceq.w	r0, r0, #1
   858b0:	ea40 0003 	orr.w	r0, r0, r3
   858b4:	4770      	bx	lr
   858b6:	0049      	lsls	r1, r1, #1
   858b8:	eb40 0000 	adc.w	r0, r0, r0
   858bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   858c0:	f1a2 0201 	sub.w	r2, r2, #1
   858c4:	d1ed      	bne.n	858a2 <__addsf3+0x92>
   858c6:	fab0 fc80 	clz	ip, r0
   858ca:	f1ac 0c08 	sub.w	ip, ip, #8
   858ce:	ebb2 020c 	subs.w	r2, r2, ip
   858d2:	fa00 f00c 	lsl.w	r0, r0, ip
   858d6:	bfaa      	itet	ge
   858d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   858dc:	4252      	neglt	r2, r2
   858de:	4318      	orrge	r0, r3
   858e0:	bfbc      	itt	lt
   858e2:	40d0      	lsrlt	r0, r2
   858e4:	4318      	orrlt	r0, r3
   858e6:	4770      	bx	lr
   858e8:	f092 0f00 	teq	r2, #0
   858ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   858f0:	bf06      	itte	eq
   858f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   858f6:	3201      	addeq	r2, #1
   858f8:	3b01      	subne	r3, #1
   858fa:	e7b5      	b.n	85868 <__addsf3+0x58>
   858fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   85900:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85904:	bf18      	it	ne
   85906:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8590a:	d021      	beq.n	85950 <__addsf3+0x140>
   8590c:	ea92 0f03 	teq	r2, r3
   85910:	d004      	beq.n	8591c <__addsf3+0x10c>
   85912:	f092 0f00 	teq	r2, #0
   85916:	bf08      	it	eq
   85918:	4608      	moveq	r0, r1
   8591a:	4770      	bx	lr
   8591c:	ea90 0f01 	teq	r0, r1
   85920:	bf1c      	itt	ne
   85922:	2000      	movne	r0, #0
   85924:	4770      	bxne	lr
   85926:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8592a:	d104      	bne.n	85936 <__addsf3+0x126>
   8592c:	0040      	lsls	r0, r0, #1
   8592e:	bf28      	it	cs
   85930:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   85934:	4770      	bx	lr
   85936:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8593a:	bf3c      	itt	cc
   8593c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   85940:	4770      	bxcc	lr
   85942:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85946:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8594a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8594e:	4770      	bx	lr
   85950:	ea7f 6222 	mvns.w	r2, r2, asr #24
   85954:	bf16      	itet	ne
   85956:	4608      	movne	r0, r1
   85958:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8595c:	4601      	movne	r1, r0
   8595e:	0242      	lsls	r2, r0, #9
   85960:	bf06      	itte	eq
   85962:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   85966:	ea90 0f01 	teqeq	r0, r1
   8596a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8596e:	4770      	bx	lr

00085970 <__aeabi_ui2f>:
   85970:	f04f 0300 	mov.w	r3, #0
   85974:	e004      	b.n	85980 <__aeabi_i2f+0x8>
   85976:	bf00      	nop

00085978 <__aeabi_i2f>:
   85978:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8597c:	bf48      	it	mi
   8597e:	4240      	negmi	r0, r0
   85980:	ea5f 0c00 	movs.w	ip, r0
   85984:	bf08      	it	eq
   85986:	4770      	bxeq	lr
   85988:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8598c:	4601      	mov	r1, r0
   8598e:	f04f 0000 	mov.w	r0, #0
   85992:	e01c      	b.n	859ce <__aeabi_l2f+0x2a>

00085994 <__aeabi_ul2f>:
   85994:	ea50 0201 	orrs.w	r2, r0, r1
   85998:	bf08      	it	eq
   8599a:	4770      	bxeq	lr
   8599c:	f04f 0300 	mov.w	r3, #0
   859a0:	e00a      	b.n	859b8 <__aeabi_l2f+0x14>
   859a2:	bf00      	nop

000859a4 <__aeabi_l2f>:
   859a4:	ea50 0201 	orrs.w	r2, r0, r1
   859a8:	bf08      	it	eq
   859aa:	4770      	bxeq	lr
   859ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   859b0:	d502      	bpl.n	859b8 <__aeabi_l2f+0x14>
   859b2:	4240      	negs	r0, r0
   859b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   859b8:	ea5f 0c01 	movs.w	ip, r1
   859bc:	bf02      	ittt	eq
   859be:	4684      	moveq	ip, r0
   859c0:	4601      	moveq	r1, r0
   859c2:	2000      	moveq	r0, #0
   859c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   859c8:	bf08      	it	eq
   859ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   859ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   859d2:	fabc f28c 	clz	r2, ip
   859d6:	3a08      	subs	r2, #8
   859d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   859dc:	db10      	blt.n	85a00 <__aeabi_l2f+0x5c>
   859de:	fa01 fc02 	lsl.w	ip, r1, r2
   859e2:	4463      	add	r3, ip
   859e4:	fa00 fc02 	lsl.w	ip, r0, r2
   859e8:	f1c2 0220 	rsb	r2, r2, #32
   859ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   859f0:	fa20 f202 	lsr.w	r2, r0, r2
   859f4:	eb43 0002 	adc.w	r0, r3, r2
   859f8:	bf08      	it	eq
   859fa:	f020 0001 	biceq.w	r0, r0, #1
   859fe:	4770      	bx	lr
   85a00:	f102 0220 	add.w	r2, r2, #32
   85a04:	fa01 fc02 	lsl.w	ip, r1, r2
   85a08:	f1c2 0220 	rsb	r2, r2, #32
   85a0c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   85a10:	fa21 f202 	lsr.w	r2, r1, r2
   85a14:	eb43 0002 	adc.w	r0, r3, r2
   85a18:	bf08      	it	eq
   85a1a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   85a1e:	4770      	bx	lr

00085a20 <__aeabi_fmul>:
   85a20:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85a24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85a28:	bf1e      	ittt	ne
   85a2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85a2e:	ea92 0f0c 	teqne	r2, ip
   85a32:	ea93 0f0c 	teqne	r3, ip
   85a36:	d06f      	beq.n	85b18 <__aeabi_fmul+0xf8>
   85a38:	441a      	add	r2, r3
   85a3a:	ea80 0c01 	eor.w	ip, r0, r1
   85a3e:	0240      	lsls	r0, r0, #9
   85a40:	bf18      	it	ne
   85a42:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   85a46:	d01e      	beq.n	85a86 <__aeabi_fmul+0x66>
   85a48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   85a4c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   85a50:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   85a54:	fba0 3101 	umull	r3, r1, r0, r1
   85a58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85a5c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   85a60:	bf3e      	ittt	cc
   85a62:	0049      	lslcc	r1, r1, #1
   85a64:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   85a68:	005b      	lslcc	r3, r3, #1
   85a6a:	ea40 0001 	orr.w	r0, r0, r1
   85a6e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   85a72:	2afd      	cmp	r2, #253	; 0xfd
   85a74:	d81d      	bhi.n	85ab2 <__aeabi_fmul+0x92>
   85a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   85a7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85a7e:	bf08      	it	eq
   85a80:	f020 0001 	biceq.w	r0, r0, #1
   85a84:	4770      	bx	lr
   85a86:	f090 0f00 	teq	r0, #0
   85a8a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85a8e:	bf08      	it	eq
   85a90:	0249      	lsleq	r1, r1, #9
   85a92:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85a96:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   85a9a:	3a7f      	subs	r2, #127	; 0x7f
   85a9c:	bfc2      	ittt	gt
   85a9e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   85aa2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85aa6:	4770      	bxgt	lr
   85aa8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85aac:	f04f 0300 	mov.w	r3, #0
   85ab0:	3a01      	subs	r2, #1
   85ab2:	dc5d      	bgt.n	85b70 <__aeabi_fmul+0x150>
   85ab4:	f112 0f19 	cmn.w	r2, #25
   85ab8:	bfdc      	itt	le
   85aba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   85abe:	4770      	bxle	lr
   85ac0:	f1c2 0200 	rsb	r2, r2, #0
   85ac4:	0041      	lsls	r1, r0, #1
   85ac6:	fa21 f102 	lsr.w	r1, r1, r2
   85aca:	f1c2 0220 	rsb	r2, r2, #32
   85ace:	fa00 fc02 	lsl.w	ip, r0, r2
   85ad2:	ea5f 0031 	movs.w	r0, r1, rrx
   85ad6:	f140 0000 	adc.w	r0, r0, #0
   85ada:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   85ade:	bf08      	it	eq
   85ae0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   85ae4:	4770      	bx	lr
   85ae6:	f092 0f00 	teq	r2, #0
   85aea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   85aee:	bf02      	ittt	eq
   85af0:	0040      	lsleq	r0, r0, #1
   85af2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   85af6:	3a01      	subeq	r2, #1
   85af8:	d0f9      	beq.n	85aee <__aeabi_fmul+0xce>
   85afa:	ea40 000c 	orr.w	r0, r0, ip
   85afe:	f093 0f00 	teq	r3, #0
   85b02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   85b06:	bf02      	ittt	eq
   85b08:	0049      	lsleq	r1, r1, #1
   85b0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   85b0e:	3b01      	subeq	r3, #1
   85b10:	d0f9      	beq.n	85b06 <__aeabi_fmul+0xe6>
   85b12:	ea41 010c 	orr.w	r1, r1, ip
   85b16:	e78f      	b.n	85a38 <__aeabi_fmul+0x18>
   85b18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85b1c:	ea92 0f0c 	teq	r2, ip
   85b20:	bf18      	it	ne
   85b22:	ea93 0f0c 	teqne	r3, ip
   85b26:	d00a      	beq.n	85b3e <__aeabi_fmul+0x11e>
   85b28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85b2c:	bf18      	it	ne
   85b2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85b32:	d1d8      	bne.n	85ae6 <__aeabi_fmul+0xc6>
   85b34:	ea80 0001 	eor.w	r0, r0, r1
   85b38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85b3c:	4770      	bx	lr
   85b3e:	f090 0f00 	teq	r0, #0
   85b42:	bf17      	itett	ne
   85b44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   85b48:	4608      	moveq	r0, r1
   85b4a:	f091 0f00 	teqne	r1, #0
   85b4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   85b52:	d014      	beq.n	85b7e <__aeabi_fmul+0x15e>
   85b54:	ea92 0f0c 	teq	r2, ip
   85b58:	d101      	bne.n	85b5e <__aeabi_fmul+0x13e>
   85b5a:	0242      	lsls	r2, r0, #9
   85b5c:	d10f      	bne.n	85b7e <__aeabi_fmul+0x15e>
   85b5e:	ea93 0f0c 	teq	r3, ip
   85b62:	d103      	bne.n	85b6c <__aeabi_fmul+0x14c>
   85b64:	024b      	lsls	r3, r1, #9
   85b66:	bf18      	it	ne
   85b68:	4608      	movne	r0, r1
   85b6a:	d108      	bne.n	85b7e <__aeabi_fmul+0x15e>
   85b6c:	ea80 0001 	eor.w	r0, r0, r1
   85b70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   85b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85b7c:	4770      	bx	lr
   85b7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   85b82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   85b86:	4770      	bx	lr

00085b88 <__aeabi_fdiv>:
   85b88:	f04f 0cff 	mov.w	ip, #255	; 0xff
   85b8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   85b90:	bf1e      	ittt	ne
   85b92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   85b96:	ea92 0f0c 	teqne	r2, ip
   85b9a:	ea93 0f0c 	teqne	r3, ip
   85b9e:	d069      	beq.n	85c74 <__aeabi_fdiv+0xec>
   85ba0:	eba2 0203 	sub.w	r2, r2, r3
   85ba4:	ea80 0c01 	eor.w	ip, r0, r1
   85ba8:	0249      	lsls	r1, r1, #9
   85baa:	ea4f 2040 	mov.w	r0, r0, lsl #9
   85bae:	d037      	beq.n	85c20 <__aeabi_fdiv+0x98>
   85bb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   85bb4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   85bb8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   85bbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   85bc0:	428b      	cmp	r3, r1
   85bc2:	bf38      	it	cc
   85bc4:	005b      	lslcc	r3, r3, #1
   85bc6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   85bca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   85bce:	428b      	cmp	r3, r1
   85bd0:	bf24      	itt	cs
   85bd2:	1a5b      	subcs	r3, r3, r1
   85bd4:	ea40 000c 	orrcs.w	r0, r0, ip
   85bd8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   85bdc:	bf24      	itt	cs
   85bde:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   85be2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   85be6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   85bea:	bf24      	itt	cs
   85bec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   85bf0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   85bf4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   85bf8:	bf24      	itt	cs
   85bfa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   85bfe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   85c02:	011b      	lsls	r3, r3, #4
   85c04:	bf18      	it	ne
   85c06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   85c0a:	d1e0      	bne.n	85bce <__aeabi_fdiv+0x46>
   85c0c:	2afd      	cmp	r2, #253	; 0xfd
   85c0e:	f63f af50 	bhi.w	85ab2 <__aeabi_fmul+0x92>
   85c12:	428b      	cmp	r3, r1
   85c14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85c18:	bf08      	it	eq
   85c1a:	f020 0001 	biceq.w	r0, r0, #1
   85c1e:	4770      	bx	lr
   85c20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   85c24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   85c28:	327f      	adds	r2, #127	; 0x7f
   85c2a:	bfc2      	ittt	gt
   85c2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   85c30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   85c34:	4770      	bxgt	lr
   85c36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85c3a:	f04f 0300 	mov.w	r3, #0
   85c3e:	3a01      	subs	r2, #1
   85c40:	e737      	b.n	85ab2 <__aeabi_fmul+0x92>
   85c42:	f092 0f00 	teq	r2, #0
   85c46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   85c4a:	bf02      	ittt	eq
   85c4c:	0040      	lsleq	r0, r0, #1
   85c4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   85c52:	3a01      	subeq	r2, #1
   85c54:	d0f9      	beq.n	85c4a <__aeabi_fdiv+0xc2>
   85c56:	ea40 000c 	orr.w	r0, r0, ip
   85c5a:	f093 0f00 	teq	r3, #0
   85c5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   85c62:	bf02      	ittt	eq
   85c64:	0049      	lsleq	r1, r1, #1
   85c66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   85c6a:	3b01      	subeq	r3, #1
   85c6c:	d0f9      	beq.n	85c62 <__aeabi_fdiv+0xda>
   85c6e:	ea41 010c 	orr.w	r1, r1, ip
   85c72:	e795      	b.n	85ba0 <__aeabi_fdiv+0x18>
   85c74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   85c78:	ea92 0f0c 	teq	r2, ip
   85c7c:	d108      	bne.n	85c90 <__aeabi_fdiv+0x108>
   85c7e:	0242      	lsls	r2, r0, #9
   85c80:	f47f af7d 	bne.w	85b7e <__aeabi_fmul+0x15e>
   85c84:	ea93 0f0c 	teq	r3, ip
   85c88:	f47f af70 	bne.w	85b6c <__aeabi_fmul+0x14c>
   85c8c:	4608      	mov	r0, r1
   85c8e:	e776      	b.n	85b7e <__aeabi_fmul+0x15e>
   85c90:	ea93 0f0c 	teq	r3, ip
   85c94:	d104      	bne.n	85ca0 <__aeabi_fdiv+0x118>
   85c96:	024b      	lsls	r3, r1, #9
   85c98:	f43f af4c 	beq.w	85b34 <__aeabi_fmul+0x114>
   85c9c:	4608      	mov	r0, r1
   85c9e:	e76e      	b.n	85b7e <__aeabi_fmul+0x15e>
   85ca0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   85ca4:	bf18      	it	ne
   85ca6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   85caa:	d1ca      	bne.n	85c42 <__aeabi_fdiv+0xba>
   85cac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   85cb0:	f47f af5c 	bne.w	85b6c <__aeabi_fmul+0x14c>
   85cb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   85cb8:	f47f af3c 	bne.w	85b34 <__aeabi_fmul+0x114>
   85cbc:	e75f      	b.n	85b7e <__aeabi_fmul+0x15e>
   85cbe:	bf00      	nop

00085cc0 <__aeabi_f2uiz>:
   85cc0:	0042      	lsls	r2, r0, #1
   85cc2:	d20e      	bcs.n	85ce2 <__aeabi_f2uiz+0x22>
   85cc4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   85cc8:	d30b      	bcc.n	85ce2 <__aeabi_f2uiz+0x22>
   85cca:	f04f 039e 	mov.w	r3, #158	; 0x9e
   85cce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   85cd2:	d409      	bmi.n	85ce8 <__aeabi_f2uiz+0x28>
   85cd4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   85cd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   85cdc:	fa23 f002 	lsr.w	r0, r3, r2
   85ce0:	4770      	bx	lr
   85ce2:	f04f 0000 	mov.w	r0, #0
   85ce6:	4770      	bx	lr
   85ce8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   85cec:	d101      	bne.n	85cf2 <__aeabi_f2uiz+0x32>
   85cee:	0242      	lsls	r2, r0, #9
   85cf0:	d102      	bne.n	85cf8 <__aeabi_f2uiz+0x38>
   85cf2:	f04f 30ff 	mov.w	r0, #4294967295
   85cf6:	4770      	bx	lr
   85cf8:	f04f 0000 	mov.w	r0, #0
   85cfc:	4770      	bx	lr
   85cfe:	bf00      	nop

00085d00 <__libc_init_array>:
   85d00:	b570      	push	{r4, r5, r6, lr}
   85d02:	4e0f      	ldr	r6, [pc, #60]	; (85d40 <__libc_init_array+0x40>)
   85d04:	4d0f      	ldr	r5, [pc, #60]	; (85d44 <__libc_init_array+0x44>)
   85d06:	1b76      	subs	r6, r6, r5
   85d08:	10b6      	asrs	r6, r6, #2
   85d0a:	d007      	beq.n	85d1c <__libc_init_array+0x1c>
   85d0c:	3d04      	subs	r5, #4
   85d0e:	2400      	movs	r4, #0
   85d10:	3401      	adds	r4, #1
   85d12:	f855 3f04 	ldr.w	r3, [r5, #4]!
   85d16:	4798      	blx	r3
   85d18:	42a6      	cmp	r6, r4
   85d1a:	d1f9      	bne.n	85d10 <__libc_init_array+0x10>
   85d1c:	4e0a      	ldr	r6, [pc, #40]	; (85d48 <__libc_init_array+0x48>)
   85d1e:	4d0b      	ldr	r5, [pc, #44]	; (85d4c <__libc_init_array+0x4c>)
   85d20:	f000 fa38 	bl	86194 <_init>
   85d24:	1b76      	subs	r6, r6, r5
   85d26:	10b6      	asrs	r6, r6, #2
   85d28:	d008      	beq.n	85d3c <__libc_init_array+0x3c>
   85d2a:	3d04      	subs	r5, #4
   85d2c:	2400      	movs	r4, #0
   85d2e:	3401      	adds	r4, #1
   85d30:	f855 3f04 	ldr.w	r3, [r5, #4]!
   85d34:	4798      	blx	r3
   85d36:	42a6      	cmp	r6, r4
   85d38:	d1f9      	bne.n	85d2e <__libc_init_array+0x2e>
   85d3a:	bd70      	pop	{r4, r5, r6, pc}
   85d3c:	bd70      	pop	{r4, r5, r6, pc}
   85d3e:	bf00      	nop
   85d40:	000861a0 	.word	0x000861a0
   85d44:	000861a0 	.word	0x000861a0
   85d48:	000861a8 	.word	0x000861a8
   85d4c:	000861a0 	.word	0x000861a0

00085d50 <memcmp>:
   85d50:	2a03      	cmp	r2, #3
   85d52:	b470      	push	{r4, r5, r6}
   85d54:	d928      	bls.n	85da8 <memcmp+0x58>
   85d56:	ea40 0301 	orr.w	r3, r0, r1
   85d5a:	079b      	lsls	r3, r3, #30
   85d5c:	d013      	beq.n	85d86 <memcmp+0x36>
   85d5e:	7805      	ldrb	r5, [r0, #0]
   85d60:	780c      	ldrb	r4, [r1, #0]
   85d62:	42a5      	cmp	r5, r4
   85d64:	d124      	bne.n	85db0 <memcmp+0x60>
   85d66:	3a01      	subs	r2, #1
   85d68:	2300      	movs	r3, #0
   85d6a:	e005      	b.n	85d78 <memcmp+0x28>
   85d6c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   85d70:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   85d74:	42a5      	cmp	r5, r4
   85d76:	d11b      	bne.n	85db0 <memcmp+0x60>
   85d78:	4293      	cmp	r3, r2
   85d7a:	f103 0301 	add.w	r3, r3, #1
   85d7e:	d1f5      	bne.n	85d6c <memcmp+0x1c>
   85d80:	2000      	movs	r0, #0
   85d82:	bc70      	pop	{r4, r5, r6}
   85d84:	4770      	bx	lr
   85d86:	460c      	mov	r4, r1
   85d88:	4603      	mov	r3, r0
   85d8a:	6825      	ldr	r5, [r4, #0]
   85d8c:	681e      	ldr	r6, [r3, #0]
   85d8e:	4621      	mov	r1, r4
   85d90:	42ae      	cmp	r6, r5
   85d92:	4618      	mov	r0, r3
   85d94:	f104 0404 	add.w	r4, r4, #4
   85d98:	f103 0304 	add.w	r3, r3, #4
   85d9c:	d104      	bne.n	85da8 <memcmp+0x58>
   85d9e:	3a04      	subs	r2, #4
   85da0:	2a03      	cmp	r2, #3
   85da2:	4618      	mov	r0, r3
   85da4:	4621      	mov	r1, r4
   85da6:	d8f0      	bhi.n	85d8a <memcmp+0x3a>
   85da8:	2a00      	cmp	r2, #0
   85daa:	d1d8      	bne.n	85d5e <memcmp+0xe>
   85dac:	4610      	mov	r0, r2
   85dae:	e7e8      	b.n	85d82 <memcmp+0x32>
   85db0:	1b28      	subs	r0, r5, r4
   85db2:	bc70      	pop	{r4, r5, r6}
   85db4:	4770      	bx	lr
   85db6:	bf00      	nop

00085db8 <memcpy>:
   85db8:	4684      	mov	ip, r0
   85dba:	ea41 0300 	orr.w	r3, r1, r0
   85dbe:	f013 0303 	ands.w	r3, r3, #3
   85dc2:	d149      	bne.n	85e58 <memcpy+0xa0>
   85dc4:	3a40      	subs	r2, #64	; 0x40
   85dc6:	d323      	bcc.n	85e10 <memcpy+0x58>
   85dc8:	680b      	ldr	r3, [r1, #0]
   85dca:	6003      	str	r3, [r0, #0]
   85dcc:	684b      	ldr	r3, [r1, #4]
   85dce:	6043      	str	r3, [r0, #4]
   85dd0:	688b      	ldr	r3, [r1, #8]
   85dd2:	6083      	str	r3, [r0, #8]
   85dd4:	68cb      	ldr	r3, [r1, #12]
   85dd6:	60c3      	str	r3, [r0, #12]
   85dd8:	690b      	ldr	r3, [r1, #16]
   85dda:	6103      	str	r3, [r0, #16]
   85ddc:	694b      	ldr	r3, [r1, #20]
   85dde:	6143      	str	r3, [r0, #20]
   85de0:	698b      	ldr	r3, [r1, #24]
   85de2:	6183      	str	r3, [r0, #24]
   85de4:	69cb      	ldr	r3, [r1, #28]
   85de6:	61c3      	str	r3, [r0, #28]
   85de8:	6a0b      	ldr	r3, [r1, #32]
   85dea:	6203      	str	r3, [r0, #32]
   85dec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85dee:	6243      	str	r3, [r0, #36]	; 0x24
   85df0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85df2:	6283      	str	r3, [r0, #40]	; 0x28
   85df4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85df6:	62c3      	str	r3, [r0, #44]	; 0x2c
   85df8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85dfa:	6303      	str	r3, [r0, #48]	; 0x30
   85dfc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85dfe:	6343      	str	r3, [r0, #52]	; 0x34
   85e00:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85e02:	6383      	str	r3, [r0, #56]	; 0x38
   85e04:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85e06:	63c3      	str	r3, [r0, #60]	; 0x3c
   85e08:	3040      	adds	r0, #64	; 0x40
   85e0a:	3140      	adds	r1, #64	; 0x40
   85e0c:	3a40      	subs	r2, #64	; 0x40
   85e0e:	d2db      	bcs.n	85dc8 <memcpy+0x10>
   85e10:	3230      	adds	r2, #48	; 0x30
   85e12:	d30b      	bcc.n	85e2c <memcpy+0x74>
   85e14:	680b      	ldr	r3, [r1, #0]
   85e16:	6003      	str	r3, [r0, #0]
   85e18:	684b      	ldr	r3, [r1, #4]
   85e1a:	6043      	str	r3, [r0, #4]
   85e1c:	688b      	ldr	r3, [r1, #8]
   85e1e:	6083      	str	r3, [r0, #8]
   85e20:	68cb      	ldr	r3, [r1, #12]
   85e22:	60c3      	str	r3, [r0, #12]
   85e24:	3010      	adds	r0, #16
   85e26:	3110      	adds	r1, #16
   85e28:	3a10      	subs	r2, #16
   85e2a:	d2f3      	bcs.n	85e14 <memcpy+0x5c>
   85e2c:	320c      	adds	r2, #12
   85e2e:	d305      	bcc.n	85e3c <memcpy+0x84>
   85e30:	f851 3b04 	ldr.w	r3, [r1], #4
   85e34:	f840 3b04 	str.w	r3, [r0], #4
   85e38:	3a04      	subs	r2, #4
   85e3a:	d2f9      	bcs.n	85e30 <memcpy+0x78>
   85e3c:	3204      	adds	r2, #4
   85e3e:	d008      	beq.n	85e52 <memcpy+0x9a>
   85e40:	07d2      	lsls	r2, r2, #31
   85e42:	bf1c      	itt	ne
   85e44:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85e48:	f800 3b01 	strbne.w	r3, [r0], #1
   85e4c:	d301      	bcc.n	85e52 <memcpy+0x9a>
   85e4e:	880b      	ldrh	r3, [r1, #0]
   85e50:	8003      	strh	r3, [r0, #0]
   85e52:	4660      	mov	r0, ip
   85e54:	4770      	bx	lr
   85e56:	bf00      	nop
   85e58:	2a08      	cmp	r2, #8
   85e5a:	d313      	bcc.n	85e84 <memcpy+0xcc>
   85e5c:	078b      	lsls	r3, r1, #30
   85e5e:	d0b1      	beq.n	85dc4 <memcpy+0xc>
   85e60:	f010 0303 	ands.w	r3, r0, #3
   85e64:	d0ae      	beq.n	85dc4 <memcpy+0xc>
   85e66:	f1c3 0304 	rsb	r3, r3, #4
   85e6a:	1ad2      	subs	r2, r2, r3
   85e6c:	07db      	lsls	r3, r3, #31
   85e6e:	bf1c      	itt	ne
   85e70:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85e74:	f800 3b01 	strbne.w	r3, [r0], #1
   85e78:	d3a4      	bcc.n	85dc4 <memcpy+0xc>
   85e7a:	f831 3b02 	ldrh.w	r3, [r1], #2
   85e7e:	f820 3b02 	strh.w	r3, [r0], #2
   85e82:	e79f      	b.n	85dc4 <memcpy+0xc>
   85e84:	3a04      	subs	r2, #4
   85e86:	d3d9      	bcc.n	85e3c <memcpy+0x84>
   85e88:	3a01      	subs	r2, #1
   85e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
   85e8e:	f800 3b01 	strb.w	r3, [r0], #1
   85e92:	d2f9      	bcs.n	85e88 <memcpy+0xd0>
   85e94:	780b      	ldrb	r3, [r1, #0]
   85e96:	7003      	strb	r3, [r0, #0]
   85e98:	784b      	ldrb	r3, [r1, #1]
   85e9a:	7043      	strb	r3, [r0, #1]
   85e9c:	788b      	ldrb	r3, [r1, #2]
   85e9e:	7083      	strb	r3, [r0, #2]
   85ea0:	4660      	mov	r0, ip
   85ea2:	4770      	bx	lr

00085ea4 <memset>:
   85ea4:	b4f0      	push	{r4, r5, r6, r7}
   85ea6:	0784      	lsls	r4, r0, #30
   85ea8:	d043      	beq.n	85f32 <memset+0x8e>
   85eaa:	1e54      	subs	r4, r2, #1
   85eac:	2a00      	cmp	r2, #0
   85eae:	d03e      	beq.n	85f2e <memset+0x8a>
   85eb0:	b2cd      	uxtb	r5, r1
   85eb2:	4603      	mov	r3, r0
   85eb4:	e003      	b.n	85ebe <memset+0x1a>
   85eb6:	1e62      	subs	r2, r4, #1
   85eb8:	2c00      	cmp	r4, #0
   85eba:	d038      	beq.n	85f2e <memset+0x8a>
   85ebc:	4614      	mov	r4, r2
   85ebe:	f803 5b01 	strb.w	r5, [r3], #1
   85ec2:	079a      	lsls	r2, r3, #30
   85ec4:	d1f7      	bne.n	85eb6 <memset+0x12>
   85ec6:	2c03      	cmp	r4, #3
   85ec8:	d92a      	bls.n	85f20 <memset+0x7c>
   85eca:	b2cd      	uxtb	r5, r1
   85ecc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85ed0:	2c0f      	cmp	r4, #15
   85ed2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85ed6:	d915      	bls.n	85f04 <memset+0x60>
   85ed8:	f1a4 0710 	sub.w	r7, r4, #16
   85edc:	093f      	lsrs	r7, r7, #4
   85ede:	f103 0610 	add.w	r6, r3, #16
   85ee2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   85ee6:	461a      	mov	r2, r3
   85ee8:	6015      	str	r5, [r2, #0]
   85eea:	6055      	str	r5, [r2, #4]
   85eec:	6095      	str	r5, [r2, #8]
   85eee:	60d5      	str	r5, [r2, #12]
   85ef0:	3210      	adds	r2, #16
   85ef2:	42b2      	cmp	r2, r6
   85ef4:	d1f8      	bne.n	85ee8 <memset+0x44>
   85ef6:	f004 040f 	and.w	r4, r4, #15
   85efa:	3701      	adds	r7, #1
   85efc:	2c03      	cmp	r4, #3
   85efe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   85f02:	d90d      	bls.n	85f20 <memset+0x7c>
   85f04:	461e      	mov	r6, r3
   85f06:	4622      	mov	r2, r4
   85f08:	3a04      	subs	r2, #4
   85f0a:	2a03      	cmp	r2, #3
   85f0c:	f846 5b04 	str.w	r5, [r6], #4
   85f10:	d8fa      	bhi.n	85f08 <memset+0x64>
   85f12:	1f22      	subs	r2, r4, #4
   85f14:	f022 0203 	bic.w	r2, r2, #3
   85f18:	3204      	adds	r2, #4
   85f1a:	4413      	add	r3, r2
   85f1c:	f004 0403 	and.w	r4, r4, #3
   85f20:	b12c      	cbz	r4, 85f2e <memset+0x8a>
   85f22:	b2c9      	uxtb	r1, r1
   85f24:	441c      	add	r4, r3
   85f26:	f803 1b01 	strb.w	r1, [r3], #1
   85f2a:	42a3      	cmp	r3, r4
   85f2c:	d1fb      	bne.n	85f26 <memset+0x82>
   85f2e:	bcf0      	pop	{r4, r5, r6, r7}
   85f30:	4770      	bx	lr
   85f32:	4614      	mov	r4, r2
   85f34:	4603      	mov	r3, r0
   85f36:	e7c6      	b.n	85ec6 <memset+0x22>

00085f38 <register_fini>:
   85f38:	4b02      	ldr	r3, [pc, #8]	; (85f44 <register_fini+0xc>)
   85f3a:	b113      	cbz	r3, 85f42 <register_fini+0xa>
   85f3c:	4802      	ldr	r0, [pc, #8]	; (85f48 <register_fini+0x10>)
   85f3e:	f000 b805 	b.w	85f4c <atexit>
   85f42:	4770      	bx	lr
   85f44:	00000000 	.word	0x00000000
   85f48:	00085f59 	.word	0x00085f59

00085f4c <atexit>:
   85f4c:	4601      	mov	r1, r0
   85f4e:	2000      	movs	r0, #0
   85f50:	4602      	mov	r2, r0
   85f52:	4603      	mov	r3, r0
   85f54:	f000 b818 	b.w	85f88 <__register_exitproc>

00085f58 <__libc_fini_array>:
   85f58:	b538      	push	{r3, r4, r5, lr}
   85f5a:	4d09      	ldr	r5, [pc, #36]	; (85f80 <__libc_fini_array+0x28>)
   85f5c:	4c09      	ldr	r4, [pc, #36]	; (85f84 <__libc_fini_array+0x2c>)
   85f5e:	1b64      	subs	r4, r4, r5
   85f60:	10a4      	asrs	r4, r4, #2
   85f62:	bf18      	it	ne
   85f64:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   85f68:	d005      	beq.n	85f76 <__libc_fini_array+0x1e>
   85f6a:	3c01      	subs	r4, #1
   85f6c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85f70:	4798      	blx	r3
   85f72:	2c00      	cmp	r4, #0
   85f74:	d1f9      	bne.n	85f6a <__libc_fini_array+0x12>
   85f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85f7a:	f000 b915 	b.w	861a8 <_fini>
   85f7e:	bf00      	nop
   85f80:	000861b4 	.word	0x000861b4
   85f84:	000861b8 	.word	0x000861b8

00085f88 <__register_exitproc>:
   85f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   85f8a:	4c27      	ldr	r4, [pc, #156]	; (86028 <__register_exitproc+0xa0>)
   85f8c:	b085      	sub	sp, #20
   85f8e:	6826      	ldr	r6, [r4, #0]
   85f90:	4607      	mov	r7, r0
   85f92:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   85f96:	2c00      	cmp	r4, #0
   85f98:	d040      	beq.n	8601c <__register_exitproc+0x94>
   85f9a:	6865      	ldr	r5, [r4, #4]
   85f9c:	2d1f      	cmp	r5, #31
   85f9e:	dd1e      	ble.n	85fde <__register_exitproc+0x56>
   85fa0:	4822      	ldr	r0, [pc, #136]	; (8602c <__register_exitproc+0xa4>)
   85fa2:	b918      	cbnz	r0, 85fac <__register_exitproc+0x24>
   85fa4:	f04f 30ff 	mov.w	r0, #4294967295
   85fa8:	b005      	add	sp, #20
   85faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85fac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85fb0:	9103      	str	r1, [sp, #12]
   85fb2:	9202      	str	r2, [sp, #8]
   85fb4:	9301      	str	r3, [sp, #4]
   85fb6:	f3af 8000 	nop.w
   85fba:	9903      	ldr	r1, [sp, #12]
   85fbc:	4604      	mov	r4, r0
   85fbe:	9a02      	ldr	r2, [sp, #8]
   85fc0:	9b01      	ldr	r3, [sp, #4]
   85fc2:	2800      	cmp	r0, #0
   85fc4:	d0ee      	beq.n	85fa4 <__register_exitproc+0x1c>
   85fc6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   85fca:	2000      	movs	r0, #0
   85fcc:	6025      	str	r5, [r4, #0]
   85fce:	6060      	str	r0, [r4, #4]
   85fd0:	4605      	mov	r5, r0
   85fd2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   85fd6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   85fda:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   85fde:	b93f      	cbnz	r7, 85ff0 <__register_exitproc+0x68>
   85fe0:	1c6b      	adds	r3, r5, #1
   85fe2:	2000      	movs	r0, #0
   85fe4:	3502      	adds	r5, #2
   85fe6:	6063      	str	r3, [r4, #4]
   85fe8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   85fec:	b005      	add	sp, #20
   85fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85ff0:	2601      	movs	r6, #1
   85ff2:	40ae      	lsls	r6, r5
   85ff4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   85ff8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   85ffc:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86000:	2f02      	cmp	r7, #2
   86002:	ea42 0206 	orr.w	r2, r2, r6
   86006:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8600a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8600e:	d1e7      	bne.n	85fe0 <__register_exitproc+0x58>
   86010:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86014:	431e      	orrs	r6, r3
   86016:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8601a:	e7e1      	b.n	85fe0 <__register_exitproc+0x58>
   8601c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86020:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86024:	e7b9      	b.n	85f9a <__register_exitproc+0x12>
   86026:	bf00      	nop
   86028:	00086190 	.word	0x00086190
   8602c:	00000000 	.word	0x00000000
   86030:	00004e4f 	.word	0x00004e4f
   86034:	00004e4f 	.word	0x00004e4f
   86038:	00004e4f 	.word	0x00004e4f
   8603c:	00006b68 	.word	0x00006b68
   86040:	6d612069 	.word	0x6d612069
   86044:	64617320 	.word	0x64617320
   86048:	00000000 	.word	0x00000000
   8604c:	59530d0a 	.word	0x59530d0a
   86050:	4d455453 	.word	0x4d455453
   86054:	52412053 	.word	0x52412053
   86058:	4f4e2045 	.word	0x4f4e2045
   8605c:	414e494d 	.word	0x414e494d
   86060:	53202c4c 	.word	0x53202c4c
   86064:	0a2e5249 	.word	0x0a2e5249
   86068:	0000000d 	.word	0x0000000d
   8606c:	55530d0a 	.word	0x55530d0a
   86070:	53595342 	.word	0x53595342
   86074:	204d4554 	.word	0x204d4554
   86078:	504d4554 	.word	0x504d4554
   8607c:	54415245 	.word	0x54415245
   86080:	20455255 	.word	0x20455255
   86084:	00205349 	.word	0x00205349
   86088:	0d0a4320 	.word	0x0d0a4320
   8608c:	00000000 	.word	0x00000000
   86090:	4f440d0a 	.word	0x4f440d0a
   86094:	554f5920 	.word	0x554f5920
   86098:	4e415720 	.word	0x4e415720
   8609c:	20412054 	.word	0x20412054
   860a0:	43534942 	.word	0x43534942
   860a4:	3f544955 	.word	0x3f544955
   860a8:	00000d0a 	.word	0x00000d0a
   860ac:	0001c200 	.word	0x0001c200
   860b0:	000000c0 	.word	0x000000c0
   860b4:	00000800 	.word	0x00000800
	...
   860c4:	54414857 	.word	0x54414857
   860c8:	4e414320 	.word	0x4e414320
   860cc:	44204920 	.word	0x44204920
   860d0:	4f46204f 	.word	0x4f46204f
   860d4:	4f592052 	.word	0x4f592052
   860d8:	53202c55 	.word	0x53202c55
   860dc:	0a3f5249 	.word	0x0a3f5249
   860e0:	0000000d 	.word	0x0000000d

000860e4 <can_bit_time>:
   860e4:	02020308 02094b03 43020303 0303030a     .....K.....C....
   860f4:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86104:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   86114:	05050510 06114504 47040505 06060512     .....E.....G....
   86124:	06134304 44040606 06060714 08154604     .C.....D.....F..
   86134:	47040606 07070716 08174404 46040708     ...G.....D.....F
   86144:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   86154:	00000000                                ....

00086158 <ucExpectedStackBytes.5295>:
   86158:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   86168:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   86178:	0046464f                                OFF.

0008617c <ulLED>:
   8617c:	00000057 00000056 0000003b 00000055     W...V...;...U...
   8618c:	00000043                                C...

00086190 <_global_impure_ptr>:
   86190:	20070010                                ... 

00086194 <_init>:
   86194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86196:	bf00      	nop
   86198:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8619a:	bc08      	pop	{r3}
   8619c:	469e      	mov	lr, r3
   8619e:	4770      	bx	lr

000861a0 <__init_array_start>:
   861a0:	00085f39 	.word	0x00085f39

000861a4 <__frame_dummy_init_array_entry>:
   861a4:	00080119                                ....

000861a8 <_fini>:
   861a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   861aa:	bf00      	nop
   861ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   861ae:	bc08      	pop	{r3}
   861b0:	469e      	mov	lr, r3
   861b2:	4770      	bx	lr

000861b4 <__fini_array_start>:
   861b4:	000800f5 	.word	0x000800f5
