
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f94  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00086f94  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a2f0  20070438  000873cc  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a728  000916bc  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000fddb  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e66  00000000  00000000  00020297  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006638  00000000  00000000  000230fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001200  00000000  00000000  00029735  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001020  00000000  00000000  0002a935  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c44a  00000000  00000000  0002b955  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017aa3  00000000  00000000  00047d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000685a8  00000000  00000000  0005f842  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003a58  00000000  00000000  000c7dec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c728 	.word	0x2007c728
   80004:	00082d15 	.word	0x00082d15
   80008:	00082d0d 	.word	0x00082d0d
   8000c:	00082d0d 	.word	0x00082d0d
   80010:	00082d0d 	.word	0x00082d0d
   80014:	00082d0d 	.word	0x00082d0d
   80018:	00082d0d 	.word	0x00082d0d
	...
   8002c:	000831bd 	.word	0x000831bd
   80030:	00082d0d 	.word	0x00082d0d
   80034:	00000000 	.word	0x00000000
   80038:	00083381 	.word	0x00083381
   8003c:	000833c5 	.word	0x000833c5
   80040:	00082d0d 	.word	0x00082d0d
   80044:	00082d0d 	.word	0x00082d0d
   80048:	00082d0d 	.word	0x00082d0d
   8004c:	00082d0d 	.word	0x00082d0d
   80050:	000863e9 	.word	0x000863e9
   80054:	00082d0d 	.word	0x00082d0d
   80058:	00082d0d 	.word	0x00082d0d
   8005c:	00082d0d 	.word	0x00082d0d
   80060:	00082d0d 	.word	0x00082d0d
   80064:	00082d0d 	.word	0x00082d0d
   80068:	00000000 	.word	0x00000000
   8006c:	00082695 	.word	0x00082695
   80070:	000826ad 	.word	0x000826ad
   80074:	000826c5 	.word	0x000826c5
   80078:	000826dd 	.word	0x000826dd
	...
   80084:	00081079 	.word	0x00081079
   80088:	00082d0d 	.word	0x00082d0d
   8008c:	00082d0d 	.word	0x00082d0d
   80090:	00082d0d 	.word	0x00082d0d
   80094:	00082d0d 	.word	0x00082d0d
   80098:	00082d0d 	.word	0x00082d0d
   8009c:	00082d0d 	.word	0x00082d0d
   800a0:	00080d2d 	.word	0x00080d2d
   800a4:	00000000 	.word	0x00000000
   800a8:	00082d0d 	.word	0x00082d0d
   800ac:	00082d0d 	.word	0x00082d0d
   800b0:	00082d0d 	.word	0x00082d0d
   800b4:	00082d0d 	.word	0x00082d0d
   800b8:	00082d0d 	.word	0x00082d0d
   800bc:	00082d0d 	.word	0x00082d0d
   800c0:	00082d0d 	.word	0x00082d0d
   800c4:	00082d0d 	.word	0x00082d0d
   800c8:	00082d0d 	.word	0x00082d0d
   800cc:	00082d0d 	.word	0x00082d0d
   800d0:	00082d0d 	.word	0x00082d0d
   800d4:	00082d0d 	.word	0x00082d0d
   800d8:	00082d0d 	.word	0x00082d0d
   800dc:	00082d0d 	.word	0x00082d0d
   800e0:	00082d0d 	.word	0x00082d0d
   800e4:	00082d0d 	.word	0x00082d0d
   800e8:	00082d0d 	.word	0x00082d0d
   800ec:	00085759 	.word	0x00085759
   800f0:	00085669 	.word	0x00085669

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00086f94 	.word	0x00086f94

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086f94 	.word	0x00086f94
   8013c:	2007043c 	.word	0x2007043c
   80140:	00086f94 	.word	0x00086f94
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	00082961 	.word	0x00082961

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80280:	b580      	push	{r7, lr}
   80282:	b084      	sub	sp, #16
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
   80288:	8079      	strh	r1, [r7, #2]
   8028a:	707a      	strb	r2, [r7, #1]
   8028c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8028e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80292:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80294:	e006      	b.n	802a4 <spi_write+0x24>
		if (!timeout--) {
   80296:	68fb      	ldr	r3, [r7, #12]
   80298:	1e5a      	subs	r2, r3, #1
   8029a:	60fa      	str	r2, [r7, #12]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d101      	bne.n	802a4 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   802a0:	2301      	movs	r3, #1
   802a2:	e023      	b.n	802ec <spi_write+0x6c>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	691b      	ldr	r3, [r3, #16]
   802a8:	f003 0302 	and.w	r3, r3, #2
   802ac:	2b00      	cmp	r3, #0
   802ae:	d0f2      	beq.n	80296 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   802b0:	6878      	ldr	r0, [r7, #4]
   802b2:	4b11      	ldr	r3, [pc, #68]	; (802f8 <spi_write+0x78>)
   802b4:	4798      	blx	r3
   802b6:	4603      	mov	r3, r0
   802b8:	2b00      	cmp	r3, #0
   802ba:	d00e      	beq.n	802da <spi_write+0x5a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   802bc:	887a      	ldrh	r2, [r7, #2]
   802be:	787b      	ldrb	r3, [r7, #1]
   802c0:	041b      	lsls	r3, r3, #16
   802c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   802c6:	4313      	orrs	r3, r2
   802c8:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   802ca:	783b      	ldrb	r3, [r7, #0]
   802cc:	2b00      	cmp	r3, #0
   802ce:	d006      	beq.n	802de <spi_write+0x5e>
			value |= SPI_TDR_LASTXFER;
   802d0:	68bb      	ldr	r3, [r7, #8]
   802d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802d6:	60bb      	str	r3, [r7, #8]
   802d8:	e001      	b.n	802de <spi_write+0x5e>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   802da:	887b      	ldrh	r3, [r7, #2]
   802dc:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802de:	687b      	ldr	r3, [r7, #4]
   802e0:	68ba      	ldr	r2, [r7, #8]
   802e2:	60da      	str	r2, [r3, #12]
	
	pio_toggle_pin(LED0_GPIO);
   802e4:	203b      	movs	r0, #59	; 0x3b
   802e6:	4b05      	ldr	r3, [pc, #20]	; (802fc <spi_write+0x7c>)
   802e8:	4798      	blx	r3

	return SPI_OK;
   802ea:	2300      	movs	r3, #0
   802ec:	b25b      	sxtb	r3, r3
}
   802ee:	4618      	mov	r0, r3
   802f0:	3710      	adds	r7, #16
   802f2:	46bd      	mov	sp, r7
   802f4:	bd80      	pop	{r7, pc}
   802f6:	bf00      	nop
   802f8:	00080149 	.word	0x00080149
   802fc:	00082375 	.word	0x00082375

00080300 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80300:	b480      	push	{r7}
   80302:	b085      	sub	sp, #20
   80304:	af00      	add	r7, sp, #0
   80306:	60f8      	str	r0, [r7, #12]
   80308:	60b9      	str	r1, [r7, #8]
   8030a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8030c:	687b      	ldr	r3, [r7, #4]
   8030e:	2b00      	cmp	r3, #0
   80310:	d00c      	beq.n	8032c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80312:	68fb      	ldr	r3, [r7, #12]
   80314:	68ba      	ldr	r2, [r7, #8]
   80316:	320c      	adds	r2, #12
   80318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8031c:	f043 0101 	orr.w	r1, r3, #1
   80320:	68fb      	ldr	r3, [r7, #12]
   80322:	68ba      	ldr	r2, [r7, #8]
   80324:	320c      	adds	r2, #12
   80326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8032a:	e00b      	b.n	80344 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8032c:	68fb      	ldr	r3, [r7, #12]
   8032e:	68ba      	ldr	r2, [r7, #8]
   80330:	320c      	adds	r2, #12
   80332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80336:	f023 0101 	bic.w	r1, r3, #1
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	68ba      	ldr	r2, [r7, #8]
   8033e:	320c      	adds	r2, #12
   80340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80344:	3714      	adds	r7, #20
   80346:	46bd      	mov	sp, r7
   80348:	f85d 7b04 	ldr.w	r7, [sp], #4
   8034c:	4770      	bx	lr
   8034e:	bf00      	nop

00080350 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80350:	b480      	push	{r7}
   80352:	b085      	sub	sp, #20
   80354:	af00      	add	r7, sp, #0
   80356:	60f8      	str	r0, [r7, #12]
   80358:	60b9      	str	r1, [r7, #8]
   8035a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8035c:	687b      	ldr	r3, [r7, #4]
   8035e:	2b00      	cmp	r3, #0
   80360:	d00c      	beq.n	8037c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80362:	68fb      	ldr	r3, [r7, #12]
   80364:	68ba      	ldr	r2, [r7, #8]
   80366:	320c      	adds	r2, #12
   80368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8036c:	f043 0102 	orr.w	r1, r3, #2
   80370:	68fb      	ldr	r3, [r7, #12]
   80372:	68ba      	ldr	r2, [r7, #8]
   80374:	320c      	adds	r2, #12
   80376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8037a:	e00b      	b.n	80394 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8037c:	68fb      	ldr	r3, [r7, #12]
   8037e:	68ba      	ldr	r2, [r7, #8]
   80380:	320c      	adds	r2, #12
   80382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80386:	f023 0102 	bic.w	r1, r3, #2
   8038a:	68fb      	ldr	r3, [r7, #12]
   8038c:	68ba      	ldr	r2, [r7, #8]
   8038e:	320c      	adds	r2, #12
   80390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80394:	3714      	adds	r7, #20
   80396:	46bd      	mov	sp, r7
   80398:	f85d 7b04 	ldr.w	r7, [sp], #4
   8039c:	4770      	bx	lr
   8039e:	bf00      	nop

000803a0 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   803a0:	b480      	push	{r7}
   803a2:	b085      	sub	sp, #20
   803a4:	af00      	add	r7, sp, #0
   803a6:	60f8      	str	r0, [r7, #12]
   803a8:	60b9      	str	r1, [r7, #8]
   803aa:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   803ac:	687b      	ldr	r3, [r7, #4]
   803ae:	2b04      	cmp	r3, #4
   803b0:	d118      	bne.n	803e4 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803b2:	68fb      	ldr	r3, [r7, #12]
   803b4:	68ba      	ldr	r2, [r7, #8]
   803b6:	320c      	adds	r2, #12
   803b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803bc:	f023 0108 	bic.w	r1, r3, #8
   803c0:	68fb      	ldr	r3, [r7, #12]
   803c2:	68ba      	ldr	r2, [r7, #8]
   803c4:	320c      	adds	r2, #12
   803c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   803ca:	68fb      	ldr	r3, [r7, #12]
   803cc:	68ba      	ldr	r2, [r7, #8]
   803ce:	320c      	adds	r2, #12
   803d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803d4:	f043 0104 	orr.w	r1, r3, #4
   803d8:	68fb      	ldr	r3, [r7, #12]
   803da:	68ba      	ldr	r2, [r7, #8]
   803dc:	320c      	adds	r2, #12
   803de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   803e2:	e02a      	b.n	8043a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   803e4:	687b      	ldr	r3, [r7, #4]
   803e6:	2b00      	cmp	r3, #0
   803e8:	d118      	bne.n	8041c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803ea:	68fb      	ldr	r3, [r7, #12]
   803ec:	68ba      	ldr	r2, [r7, #8]
   803ee:	320c      	adds	r2, #12
   803f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803f4:	f023 0108 	bic.w	r1, r3, #8
   803f8:	68fb      	ldr	r3, [r7, #12]
   803fa:	68ba      	ldr	r2, [r7, #8]
   803fc:	320c      	adds	r2, #12
   803fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80402:	68fb      	ldr	r3, [r7, #12]
   80404:	68ba      	ldr	r2, [r7, #8]
   80406:	320c      	adds	r2, #12
   80408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8040c:	f023 0104 	bic.w	r1, r3, #4
   80410:	68fb      	ldr	r3, [r7, #12]
   80412:	68ba      	ldr	r2, [r7, #8]
   80414:	320c      	adds	r2, #12
   80416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8041a:	e00e      	b.n	8043a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8041c:	687b      	ldr	r3, [r7, #4]
   8041e:	2b08      	cmp	r3, #8
   80420:	d10b      	bne.n	8043a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80422:	68fb      	ldr	r3, [r7, #12]
   80424:	68ba      	ldr	r2, [r7, #8]
   80426:	320c      	adds	r2, #12
   80428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8042c:	f043 0108 	orr.w	r1, r3, #8
   80430:	68fb      	ldr	r3, [r7, #12]
   80432:	68ba      	ldr	r2, [r7, #8]
   80434:	320c      	adds	r2, #12
   80436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   8043a:	3714      	adds	r7, #20
   8043c:	46bd      	mov	sp, r7
   8043e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80442:	4770      	bx	lr

00080444 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80444:	b480      	push	{r7}
   80446:	b085      	sub	sp, #20
   80448:	af00      	add	r7, sp, #0
   8044a:	60f8      	str	r0, [r7, #12]
   8044c:	60b9      	str	r1, [r7, #8]
   8044e:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80450:	68fb      	ldr	r3, [r7, #12]
   80452:	68ba      	ldr	r2, [r7, #8]
   80454:	320c      	adds	r2, #12
   80456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8045a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8045e:	68fb      	ldr	r3, [r7, #12]
   80460:	68ba      	ldr	r2, [r7, #8]
   80462:	320c      	adds	r2, #12
   80464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80468:	68fb      	ldr	r3, [r7, #12]
   8046a:	68ba      	ldr	r2, [r7, #8]
   8046c:	320c      	adds	r2, #12
   8046e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80472:	687b      	ldr	r3, [r7, #4]
   80474:	ea42 0103 	orr.w	r1, r2, r3
   80478:	68fb      	ldr	r3, [r7, #12]
   8047a:	68ba      	ldr	r2, [r7, #8]
   8047c:	320c      	adds	r2, #12
   8047e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80482:	3714      	adds	r7, #20
   80484:	46bd      	mov	sp, r7
   80486:	f85d 7b04 	ldr.w	r7, [sp], #4
   8048a:	4770      	bx	lr

0008048c <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   8048c:	b480      	push	{r7}
   8048e:	b085      	sub	sp, #20
   80490:	af00      	add	r7, sp, #0
   80492:	6078      	str	r0, [r7, #4]
   80494:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   80496:	683a      	ldr	r2, [r7, #0]
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	4413      	add	r3, r2
   8049c:	1e5a      	subs	r2, r3, #1
   8049e:	687b      	ldr	r3, [r7, #4]
   804a0:	fbb2 f3f3 	udiv	r3, r2, r3
   804a4:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   804a6:	68fb      	ldr	r3, [r7, #12]
   804a8:	2b00      	cmp	r3, #0
   804aa:	dd02      	ble.n	804b2 <spi_calc_baudrate_div+0x26>
   804ac:	68fb      	ldr	r3, [r7, #12]
   804ae:	2bff      	cmp	r3, #255	; 0xff
   804b0:	dd02      	ble.n	804b8 <spi_calc_baudrate_div+0x2c>
		return -1;
   804b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   804b6:	e001      	b.n	804bc <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   804b8:	68fb      	ldr	r3, [r7, #12]
   804ba:	b29b      	uxth	r3, r3
   804bc:	b21b      	sxth	r3, r3
}
   804be:	4618      	mov	r0, r3
   804c0:	3714      	adds	r7, #20
   804c2:	46bd      	mov	sp, r7
   804c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   804c8:	4770      	bx	lr
   804ca:	bf00      	nop

000804cc <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   804cc:	b480      	push	{r7}
   804ce:	b085      	sub	sp, #20
   804d0:	af00      	add	r7, sp, #0
   804d2:	60f8      	str	r0, [r7, #12]
   804d4:	60b9      	str	r1, [r7, #8]
   804d6:	4613      	mov	r3, r2
   804d8:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	68ba      	ldr	r2, [r7, #8]
   804de:	320c      	adds	r2, #12
   804e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804e4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   804e8:	68fb      	ldr	r3, [r7, #12]
   804ea:	68ba      	ldr	r2, [r7, #8]
   804ec:	320c      	adds	r2, #12
   804ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	68ba      	ldr	r2, [r7, #8]
   804f6:	320c      	adds	r2, #12
   804f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804fc:	79fb      	ldrb	r3, [r7, #7]
   804fe:	021b      	lsls	r3, r3, #8
   80500:	b29b      	uxth	r3, r3
   80502:	ea42 0103 	orr.w	r1, r2, r3
   80506:	68fb      	ldr	r3, [r7, #12]
   80508:	68ba      	ldr	r2, [r7, #8]
   8050a:	320c      	adds	r2, #12
   8050c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80510:	3714      	adds	r7, #20
   80512:	46bd      	mov	sp, r7
   80514:	f85d 7b04 	ldr.w	r7, [sp], #4
   80518:	4770      	bx	lr
   8051a:	bf00      	nop

0008051c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8051c:	b480      	push	{r7}
   8051e:	b085      	sub	sp, #20
   80520:	af00      	add	r7, sp, #0
   80522:	60f8      	str	r0, [r7, #12]
   80524:	60b9      	str	r1, [r7, #8]
   80526:	71fa      	strb	r2, [r7, #7]
   80528:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	68ba      	ldr	r2, [r7, #8]
   8052e:	320c      	adds	r2, #12
   80530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80534:	b299      	uxth	r1, r3
   80536:	68fb      	ldr	r3, [r7, #12]
   80538:	68ba      	ldr	r2, [r7, #8]
   8053a:	320c      	adds	r2, #12
   8053c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80540:	68fb      	ldr	r3, [r7, #12]
   80542:	68ba      	ldr	r2, [r7, #8]
   80544:	320c      	adds	r2, #12
   80546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	041b      	lsls	r3, r3, #16
   8054e:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   80552:	79bb      	ldrb	r3, [r7, #6]
   80554:	061b      	lsls	r3, r3, #24
   80556:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80558:	ea42 0103 	orr.w	r1, r2, r3
   8055c:	68fb      	ldr	r3, [r7, #12]
   8055e:	68ba      	ldr	r2, [r7, #8]
   80560:	320c      	adds	r2, #12
   80562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80566:	3714      	adds	r7, #20
   80568:	46bd      	mov	sp, r7
   8056a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8056e:	4770      	bx	lr

00080570 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   80570:	b590      	push	{r4, r7, lr}
   80572:	b085      	sub	sp, #20
   80574:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   80576:	2301      	movs	r3, #1
   80578:	9300      	str	r3, [sp, #0]
   8057a:	2300      	movs	r3, #0
   8057c:	9301      	str	r3, [sp, #4]
   8057e:	2300      	movs	r3, #0
   80580:	9302      	str	r3, [sp, #8]
   80582:	2300      	movs	r3, #0
   80584:	9303      	str	r3, [sp, #12]
   80586:	4805      	ldr	r0, [pc, #20]	; (8059c <command_loop+0x2c>)
   80588:	4905      	ldr	r1, [pc, #20]	; (805a0 <command_loop+0x30>)
   8058a:	2282      	movs	r2, #130	; 0x82
   8058c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80590:	4c04      	ldr	r4, [pc, #16]	; (805a4 <command_loop+0x34>)
   80592:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80594:	bf00      	nop
}
   80596:	3704      	adds	r7, #4
   80598:	46bd      	mov	sp, r7
   8059a:	bd90      	pop	{r4, r7, pc}
   8059c:	000805a9 	.word	0x000805a9
   805a0:	00086dd8 	.word	0x00086dd8
   805a4:	000840d9 	.word	0x000840d9

000805a8 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   805a8:	b590      	push	{r4, r7, lr}
   805aa:	b08b      	sub	sp, #44	; 0x2c
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   805b0:	687a      	ldr	r2, [r7, #4]
   805b2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   805b6:	429a      	cmp	r2, r3
   805b8:	d002      	beq.n	805c0 <prvCommandTask+0x18>
   805ba:	4b1a      	ldr	r3, [pc, #104]	; (80624 <prvCommandTask+0x7c>)
   805bc:	4798      	blx	r3
   805be:	e7fe      	b.n	805be <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   805c0:	230f      	movs	r3, #15
   805c2:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   805c4:	f04f 33ff 	mov.w	r3, #4294967295
   805c8:	623b      	str	r3, [r7, #32]
	high = high_command_generator(OBC_ID, MT_COM, REQ_RESPONSE);
   805ca:	2003      	movs	r0, #3
   805cc:	2102      	movs	r1, #2
   805ce:	2201      	movs	r2, #1
   805d0:	4b15      	ldr	r3, [pc, #84]	; (80628 <prvCommandTask+0x80>)
   805d2:	4798      	blx	r3
   805d4:	61f8      	str	r0, [r7, #28]
	ID = SUB0_ID0;
   805d6:	2314      	movs	r3, #20
   805d8:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   805da:	2319      	movs	r3, #25
   805dc:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   805de:	4b13      	ldr	r3, [pc, #76]	; (8062c <prvCommandTask+0x84>)
   805e0:	681b      	ldr	r3, [r3, #0]
   805e2:	4618      	mov	r0, r3
   805e4:	2100      	movs	r1, #0
   805e6:	2202      	movs	r2, #2
   805e8:	2300      	movs	r3, #0
   805ea:	4c11      	ldr	r4, [pc, #68]	; (80630 <prvCommandTask+0x88>)
   805ec:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   805ee:	6a38      	ldr	r0, [r7, #32]
   805f0:	69f9      	ldr	r1, [r7, #28]
   805f2:	69ba      	ldr	r2, [r7, #24]
   805f4:	697b      	ldr	r3, [r7, #20]
   805f6:	4c0f      	ldr	r4, [pc, #60]	; (80634 <prvCommandTask+0x8c>)
   805f8:	47a0      	blx	r4
   805fa:	6138      	str	r0, [r7, #16]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   805fc:	4b0b      	ldr	r3, [pc, #44]	; (8062c <prvCommandTask+0x84>)
   805fe:	681b      	ldr	r3, [r3, #0]
   80600:	4618      	mov	r0, r3
   80602:	2100      	movs	r1, #0
   80604:	2200      	movs	r2, #0
   80606:	2300      	movs	r3, #0
   80608:	4c0b      	ldr	r4, [pc, #44]	; (80638 <prvCommandTask+0x90>)
   8060a:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8060c:	4b0b      	ldr	r3, [pc, #44]	; (8063c <prvCommandTask+0x94>)
   8060e:	4798      	blx	r3
   80610:	4603      	mov	r3, r0
   80612:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80614:	f107 030c 	add.w	r3, r7, #12
   80618:	4618      	mov	r0, r3
   8061a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8061c:	4b08      	ldr	r3, [pc, #32]	; (80640 <prvCommandTask+0x98>)
   8061e:	4798      	blx	r3
	}
   80620:	e7dd      	b.n	805de <prvCommandTask+0x36>
   80622:	bf00      	nop
   80624:	00083365 	.word	0x00083365
   80628:	00086141 	.word	0x00086141
   8062c:	2007a6ac 	.word	0x2007a6ac
   80630:	00083c2d 	.word	0x00083c2d
   80634:	00085b35 	.word	0x00085b35
   80638:	0008396d 	.word	0x0008396d
   8063c:	00084515 	.word	0x00084515
   80640:	00084259 	.word	0x00084259

00080644 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80644:	b590      	push	{r4, r7, lr}
   80646:	b085      	sub	sp, #20
   80648:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   8064a:	2302      	movs	r3, #2
   8064c:	9300      	str	r3, [sp, #0]
   8064e:	2300      	movs	r3, #0
   80650:	9301      	str	r3, [sp, #4]
   80652:	2300      	movs	r3, #0
   80654:	9302      	str	r3, [sp, #8]
   80656:	2300      	movs	r3, #0
   80658:	9303      	str	r3, [sp, #12]
   8065a:	4805      	ldr	r0, [pc, #20]	; (80670 <data_test+0x2c>)
   8065c:	4905      	ldr	r1, [pc, #20]	; (80674 <data_test+0x30>)
   8065e:	2282      	movs	r2, #130	; 0x82
   80660:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80664:	4c04      	ldr	r4, [pc, #16]	; (80678 <data_test+0x34>)
   80666:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80668:	bf00      	nop
}
   8066a:	3704      	adds	r7, #4
   8066c:	46bd      	mov	sp, r7
   8066e:	bd90      	pop	{r4, r7, pc}
   80670:	0008067d 	.word	0x0008067d
   80674:	00086ddc 	.word	0x00086ddc
   80678:	000840d9 	.word	0x000840d9

0008067c <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   8067c:	b590      	push	{r4, r7, lr}
   8067e:	b08b      	sub	sp, #44	; 0x2c
   80680:	af00      	add	r7, sp, #0
   80682:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   80684:	687a      	ldr	r2, [r7, #4]
   80686:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8068a:	429a      	cmp	r2, r3
   8068c:	d002      	beq.n	80694 <prvDataTask+0x18>
   8068e:	4b37      	ldr	r3, [pc, #220]	; (8076c <prvDataTask+0xf0>)
   80690:	4798      	blx	r3
   80692:	e7fe      	b.n	80692 <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80694:	230f      	movs	r3, #15
   80696:	627b      	str	r3, [r7, #36]	; 0x24
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	ID = SUB0_ID0;
   80698:	2314      	movs	r3, #20
   8069a:	623b      	str	r3, [r7, #32]
	PRIORITY = DATA_PRIO;
   8069c:	230a      	movs	r3, #10
   8069e:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{

		low = DATA_REQUEST;
   806a0:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   806a4:	613b      	str	r3, [r7, #16]
		high = high_command_generator(OBC_ID, MT_COM, REQ_DATA);
   806a6:	2003      	movs	r0, #3
   806a8:	2102      	movs	r1, #2
   806aa:	2202      	movs	r2, #2
   806ac:	4b30      	ldr	r3, [pc, #192]	; (80770 <prvDataTask+0xf4>)
   806ae:	4798      	blx	r3
   806b0:	4603      	mov	r3, r0
   806b2:	60fb      	str	r3, [r7, #12]
		
		xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
   806b4:	4b2f      	ldr	r3, [pc, #188]	; (80774 <prvDataTask+0xf8>)
   806b6:	681b      	ldr	r3, [r3, #0]
   806b8:	4618      	mov	r0, r3
   806ba:	2100      	movs	r1, #0
   806bc:	2202      	movs	r2, #2
   806be:	2300      	movs	r3, #0
   806c0:	4c2d      	ldr	r4, [pc, #180]	; (80778 <prvDataTask+0xfc>)
   806c2:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);				//This is the CAN API function I have written for us to use.
   806c4:	693a      	ldr	r2, [r7, #16]
   806c6:	68fb      	ldr	r3, [r7, #12]
   806c8:	4610      	mov	r0, r2
   806ca:	4619      	mov	r1, r3
   806cc:	6a3a      	ldr	r2, [r7, #32]
   806ce:	69fb      	ldr	r3, [r7, #28]
   806d0:	4c2a      	ldr	r4, [pc, #168]	; (8077c <prvDataTask+0x100>)
   806d2:	47a0      	blx	r4
   806d4:	61b8      	str	r0, [r7, #24]
		xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
   806d6:	4b27      	ldr	r3, [pc, #156]	; (80774 <prvDataTask+0xf8>)
   806d8:	681b      	ldr	r3, [r3, #0]
   806da:	4618      	mov	r0, r3
   806dc:	2100      	movs	r1, #0
   806de:	2200      	movs	r2, #0
   806e0:	2300      	movs	r3, #0
   806e2:	4c27      	ldr	r4, [pc, #156]	; (80780 <prvDataTask+0x104>)
   806e4:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 15 clock cycles.
   806e6:	4b27      	ldr	r3, [pc, #156]	; (80784 <prvDataTask+0x108>)
   806e8:	4798      	blx	r3
   806ea:	4603      	mov	r3, r0
   806ec:	617b      	str	r3, [r7, #20]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   806ee:	f107 0314 	add.w	r3, r7, #20
   806f2:	4618      	mov	r0, r3
   806f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   806f6:	4b24      	ldr	r3, [pc, #144]	; (80788 <prvDataTask+0x10c>)
   806f8:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   806fa:	4b24      	ldr	r3, [pc, #144]	; (8078c <prvDataTask+0x110>)
   806fc:	781b      	ldrb	r3, [r3, #0]
   806fe:	2b00      	cmp	r3, #0
   80700:	d016      	beq.n	80730 <prvDataTask+0xb4>
		{
			x = read_can_data(&high, &low, 1234);
   80702:	f107 020c 	add.w	r2, r7, #12
   80706:	f107 0310 	add.w	r3, r7, #16
   8070a:	4610      	mov	r0, r2
   8070c:	4619      	mov	r1, r3
   8070e:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80712:	4b1f      	ldr	r3, [pc, #124]	; (80790 <prvDataTask+0x114>)
   80714:	4798      	blx	r3
   80716:	61b8      	str	r0, [r7, #24]
			// ** Modify this code so that it checks the small types first.
			if(x)
   80718:	69bb      	ldr	r3, [r7, #24]
   8071a:	2b00      	cmp	r3, #0
   8071c:	d008      	beq.n	80730 <prvDataTask+0xb4>
			{
				glob_stored_data[1] = high;
   8071e:	68fa      	ldr	r2, [r7, #12]
   80720:	4b1c      	ldr	r3, [pc, #112]	; (80794 <prvDataTask+0x118>)
   80722:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   80724:	693a      	ldr	r2, [r7, #16]
   80726:	4b1b      	ldr	r3, [pc, #108]	; (80794 <prvDataTask+0x118>)
   80728:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   8072a:	4b18      	ldr	r3, [pc, #96]	; (8078c <prvDataTask+0x110>)
   8072c:	2200      	movs	r2, #0
   8072e:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comsf)
   80730:	4b19      	ldr	r3, [pc, #100]	; (80798 <prvDataTask+0x11c>)
   80732:	781b      	ldrb	r3, [r3, #0]
   80734:	2b00      	cmp	r3, #0
   80736:	d017      	beq.n	80768 <prvDataTask+0xec>
		{
			x = read_can_msg(&high, &low, 1234);
   80738:	f107 020c 	add.w	r2, r7, #12
   8073c:	f107 0310 	add.w	r3, r7, #16
   80740:	4610      	mov	r0, r2
   80742:	4619      	mov	r1, r3
   80744:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80748:	4b14      	ldr	r3, [pc, #80]	; (8079c <prvDataTask+0x120>)
   8074a:	4798      	blx	r3
   8074c:	61b8      	str	r0, [r7, #24]

			if(x)
   8074e:	69bb      	ldr	r3, [r7, #24]
   80750:	2b00      	cmp	r3, #0
   80752:	d009      	beq.n	80768 <prvDataTask+0xec>
			{
				glob_stored_message[1] = high;
   80754:	68fa      	ldr	r2, [r7, #12]
   80756:	4b12      	ldr	r3, [pc, #72]	; (807a0 <prvDataTask+0x124>)
   80758:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   8075a:	693a      	ldr	r2, [r7, #16]
   8075c:	4b10      	ldr	r3, [pc, #64]	; (807a0 <prvDataTask+0x124>)
   8075e:	601a      	str	r2, [r3, #0]
				glob_comsf = 0;
   80760:	4b0d      	ldr	r3, [pc, #52]	; (80798 <prvDataTask+0x11c>)
   80762:	2200      	movs	r2, #0
   80764:	701a      	strb	r2, [r3, #0]
			}
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   80766:	e79b      	b.n	806a0 <prvDataTask+0x24>
   80768:	e79a      	b.n	806a0 <prvDataTask+0x24>
   8076a:	bf00      	nop
   8076c:	00083365 	.word	0x00083365
   80770:	00086141 	.word	0x00086141
   80774:	2007a6ac 	.word	0x2007a6ac
   80778:	00083c2d 	.word	0x00083c2d
   8077c:	00085b35 	.word	0x00085b35
   80780:	0008396d 	.word	0x0008396d
   80784:	00084515 	.word	0x00084515
   80788:	00084259 	.word	0x00084259
   8078c:	2007a670 	.word	0x2007a670
   80790:	00085be5 	.word	0x00085be5
   80794:	2007a644 	.word	0x2007a644
   80798:	2007a67c 	.word	0x2007a67c
   8079c:	00085c31 	.word	0x00085c31
   807a0:	2007a6f4 	.word	0x2007a6f4

000807a4 <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   807a4:	b590      	push	{r4, r7, lr}
   807a6:	b085      	sub	sp, #20
   807a8:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   807aa:	2301      	movs	r3, #1
   807ac:	9300      	str	r3, [sp, #0]
   807ae:	2300      	movs	r3, #0
   807b0:	9301      	str	r3, [sp, #4]
   807b2:	2300      	movs	r3, #0
   807b4:	9302      	str	r3, [sp, #8]
   807b6:	2300      	movs	r3, #0
   807b8:	9303      	str	r3, [sp, #12]
   807ba:	4805      	ldr	r0, [pc, #20]	; (807d0 <housekeep+0x2c>)
   807bc:	4905      	ldr	r1, [pc, #20]	; (807d4 <housekeep+0x30>)
   807be:	2282      	movs	r2, #130	; 0x82
   807c0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   807c4:	4c04      	ldr	r4, [pc, #16]	; (807d8 <housekeep+0x34>)
   807c6:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   807c8:	bf00      	nop
}
   807ca:	3704      	adds	r7, #4
   807cc:	46bd      	mov	sp, r7
   807ce:	bd90      	pop	{r4, r7, pc}
   807d0:	000807dd 	.word	0x000807dd
   807d4:	00086de0 	.word	0x00086de0
   807d8:	000840d9 	.word	0x000840d9

000807dc <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   807dc:	b590      	push	{r4, r7, lr}
   807de:	b089      	sub	sp, #36	; 0x24
   807e0:	af00      	add	r7, sp, #0
   807e2:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   807e4:	687a      	ldr	r2, [r7, #4]
   807e6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   807ea:	429a      	cmp	r2, r3
   807ec:	d002      	beq.n	807f4 <prvHouseKeepTask+0x18>
   807ee:	4b16      	ldr	r3, [pc, #88]	; (80848 <prvHouseKeepTask+0x6c>)
   807f0:	4798      	blx	r3
   807f2:	e7fe      	b.n	807f2 <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   807f4:	230f      	movs	r3, #15
   807f6:	61bb      	str	r3, [r7, #24]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	uint8_t ret_val, passkey = 0, addr = 0x80;
   807f8:	2300      	movs	r3, #0
   807fa:	77fb      	strb	r3, [r7, #31]
   807fc:	2380      	movs	r3, #128	; 0x80
   807fe:	75fb      	strb	r3, [r7, #23]
	
	ID = SUB0_ID5;
   80800:	2319      	movs	r3, #25
   80802:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80804:	4b11      	ldr	r3, [pc, #68]	; (8084c <prvHouseKeepTask+0x70>)
   80806:	681b      	ldr	r3, [r3, #0]
   80808:	4618      	mov	r0, r3
   8080a:	2100      	movs	r1, #0
   8080c:	2202      	movs	r2, #2
   8080e:	2300      	movs	r3, #0
   80810:	4c0f      	ldr	r4, [pc, #60]	; (80850 <prvHouseKeepTask+0x74>)
   80812:	47a0      	blx	r4
		x = request_housekeeping(ID);		// This is the CAN API function I have written for us to use.
   80814:	6938      	ldr	r0, [r7, #16]
   80816:	4b0f      	ldr	r3, [pc, #60]	; (80854 <prvHouseKeepTask+0x78>)
   80818:	4798      	blx	r3
   8081a:	60f8      	str	r0, [r7, #12]
		//ret_val = read_from_SSM(HK_TASK_ID, SUB0_ID0, passkey, addr);
		xSemaphoreGive(Can1_Mutex);
   8081c:	4b0b      	ldr	r3, [pc, #44]	; (8084c <prvHouseKeepTask+0x70>)
   8081e:	681b      	ldr	r3, [r3, #0]
   80820:	4618      	mov	r0, r3
   80822:	2100      	movs	r1, #0
   80824:	2200      	movs	r2, #0
   80826:	2300      	movs	r3, #0
   80828:	4c0b      	ldr	r4, [pc, #44]	; (80858 <prvHouseKeepTask+0x7c>)
   8082a:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8082c:	4b0b      	ldr	r3, [pc, #44]	; (8085c <prvHouseKeepTask+0x80>)
   8082e:	4798      	blx	r3
   80830:	4603      	mov	r3, r0
   80832:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80834:	f107 0308 	add.w	r3, r7, #8
   80838:	4618      	mov	r0, r3
   8083a:	69b9      	ldr	r1, [r7, #24]
   8083c:	4b08      	ldr	r3, [pc, #32]	; (80860 <prvHouseKeepTask+0x84>)
   8083e:	4798      	blx	r3
		
		passkey ++;
   80840:	7ffb      	ldrb	r3, [r7, #31]
   80842:	3301      	adds	r3, #1
   80844:	77fb      	strb	r3, [r7, #31]
	}
   80846:	e7dd      	b.n	80804 <prvHouseKeepTask+0x28>
   80848:	00083365 	.word	0x00083365
   8084c:	2007a6ac 	.word	0x2007a6ac
   80850:	00083c2d 	.word	0x00083c2d
   80854:	00085c7d 	.word	0x00085c7d
   80858:	0008396d 	.word	0x0008396d
   8085c:	00084515 	.word	0x00084515
   80860:	00084259 	.word	0x00084259

00080864 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   80864:	b580      	push	{r7, lr}
   80866:	b082      	sub	sp, #8
   80868:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8086a:	2300      	movs	r3, #0
   8086c:	607b      	str	r3, [r7, #4]
   8086e:	e00f      	b.n	80890 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   80870:	4b0a      	ldr	r3, [pc, #40]	; (8089c <vParTestInitialise+0x38>)
   80872:	687a      	ldr	r2, [r7, #4]
   80874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80878:	4618      	mov	r0, r3
   8087a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8087e:	4b08      	ldr	r3, [pc, #32]	; (808a0 <vParTestInitialise+0x3c>)
   80880:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   80882:	6878      	ldr	r0, [r7, #4]
   80884:	2100      	movs	r1, #0
   80886:	4b07      	ldr	r3, [pc, #28]	; (808a4 <vParTestInitialise+0x40>)
   80888:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8088a:	687b      	ldr	r3, [r7, #4]
   8088c:	3301      	adds	r3, #1
   8088e:	607b      	str	r3, [r7, #4]
   80890:	687b      	ldr	r3, [r7, #4]
   80892:	2b03      	cmp	r3, #3
   80894:	d9ec      	bls.n	80870 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   80896:	3708      	adds	r7, #8
   80898:	46bd      	mov	sp, r7
   8089a:	bd80      	pop	{r7, pc}
   8089c:	00086de4 	.word	0x00086de4
   808a0:	000823d5 	.word	0x000823d5
   808a4:	000808a9 	.word	0x000808a9

000808a8 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   808a8:	b580      	push	{r7, lr}
   808aa:	b082      	sub	sp, #8
   808ac:	af00      	add	r7, sp, #0
   808ae:	6078      	str	r0, [r7, #4]
   808b0:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   808b2:	687b      	ldr	r3, [r7, #4]
   808b4:	2b03      	cmp	r3, #3
   808b6:	d823      	bhi.n	80900 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   808b8:	687b      	ldr	r3, [r7, #4]
   808ba:	2b00      	cmp	r3, #0
   808bc:	d106      	bne.n	808cc <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   808be:	683b      	ldr	r3, [r7, #0]
   808c0:	2b00      	cmp	r3, #0
   808c2:	bf14      	ite	ne
   808c4:	2300      	movne	r3, #0
   808c6:	2301      	moveq	r3, #1
   808c8:	b2db      	uxtb	r3, r3
   808ca:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   808cc:	683b      	ldr	r3, [r7, #0]
   808ce:	2b00      	cmp	r3, #0
   808d0:	d00b      	beq.n	808ea <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   808d2:	4b0d      	ldr	r3, [pc, #52]	; (80908 <vParTestSetLED+0x60>)
   808d4:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   808d6:	4b0d      	ldr	r3, [pc, #52]	; (8090c <vParTestSetLED+0x64>)
   808d8:	687a      	ldr	r2, [r7, #4]
   808da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   808de:	4618      	mov	r0, r3
   808e0:	4b0b      	ldr	r3, [pc, #44]	; (80910 <vParTestSetLED+0x68>)
   808e2:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   808e4:	4b0b      	ldr	r3, [pc, #44]	; (80914 <vParTestSetLED+0x6c>)
   808e6:	4798      	blx	r3
   808e8:	e00a      	b.n	80900 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   808ea:	4b07      	ldr	r3, [pc, #28]	; (80908 <vParTestSetLED+0x60>)
   808ec:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   808ee:	4b07      	ldr	r3, [pc, #28]	; (8090c <vParTestSetLED+0x64>)
   808f0:	687a      	ldr	r2, [r7, #4]
   808f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   808f6:	4618      	mov	r0, r3
   808f8:	4b07      	ldr	r3, [pc, #28]	; (80918 <vParTestSetLED+0x70>)
   808fa:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   808fc:	4b05      	ldr	r3, [pc, #20]	; (80914 <vParTestSetLED+0x6c>)
   808fe:	4798      	blx	r3
		}
	}
}
   80900:	3708      	adds	r7, #8
   80902:	46bd      	mov	sp, r7
   80904:	bd80      	pop	{r7, pc}
   80906:	bf00      	nop
   80908:	000832e9 	.word	0x000832e9
   8090c:	00086de4 	.word	0x00086de4
   80910:	00082341 	.word	0x00082341
   80914:	0008332d 	.word	0x0008332d
   80918:	0008230d 	.word	0x0008230d

0008091c <dectobcd>:

/** 
 * \brief Decimal to binary coded decimal conversion
 */
static uint8_t dectobcd(uint8_t val)
{
   8091c:	b480      	push	{r7}
   8091e:	b083      	sub	sp, #12
   80920:	af00      	add	r7, sp, #0
   80922:	4603      	mov	r3, r0
   80924:	71fb      	strb	r3, [r7, #7]
	return ((val / 10 * 16) + (val % 10));
   80926:	79fa      	ldrb	r2, [r7, #7]
   80928:	4b0c      	ldr	r3, [pc, #48]	; (8095c <dectobcd+0x40>)
   8092a:	fba3 1302 	umull	r1, r3, r3, r2
   8092e:	08db      	lsrs	r3, r3, #3
   80930:	b2db      	uxtb	r3, r3
   80932:	011b      	lsls	r3, r3, #4
   80934:	b2d8      	uxtb	r0, r3
   80936:	79fa      	ldrb	r2, [r7, #7]
   80938:	4b08      	ldr	r3, [pc, #32]	; (8095c <dectobcd+0x40>)
   8093a:	fba3 1302 	umull	r1, r3, r3, r2
   8093e:	08d9      	lsrs	r1, r3, #3
   80940:	460b      	mov	r3, r1
   80942:	009b      	lsls	r3, r3, #2
   80944:	440b      	add	r3, r1
   80946:	005b      	lsls	r3, r3, #1
   80948:	1ad3      	subs	r3, r2, r3
   8094a:	b2db      	uxtb	r3, r3
   8094c:	4403      	add	r3, r0
   8094e:	b2db      	uxtb	r3, r3
}
   80950:	4618      	mov	r0, r3
   80952:	370c      	adds	r7, #12
   80954:	46bd      	mov	sp, r7
   80956:	f85d 7b04 	ldr.w	r7, [sp], #4
   8095a:	4770      	bx	lr
   8095c:	cccccccd 	.word	0xcccccccd

00080960 <rtc_init>:
 *  setting the time-date to 00:00:00 01/01/0000
 *
 * \param ctrl_reg_val The byte to set the control register to
 */
void rtc_init(uint16_t ctrl_reg_val)
{			
   80960:	b580      	push	{r7, lr}
   80962:	b084      	sub	sp, #16
   80964:	af00      	add	r7, sp, #0
   80966:	4603      	mov	r3, r0
   80968:	80fb      	strh	r3, [r7, #6]
    rtc_set_creg(ctrl_reg_val);
   8096a:	88fb      	ldrh	r3, [r7, #6]
   8096c:	4618      	mov	r0, r3
   8096e:	4b0e      	ldr	r3, [pc, #56]	; (809a8 <rtc_init+0x48>)
   80970:	4798      	blx	r3
	
	struct timestamp initial_time;

	initial_time.sec = 0x00;
   80972:	2300      	movs	r3, #0
   80974:	723b      	strb	r3, [r7, #8]
	initial_time.minute = 0x00;
   80976:	2300      	movs	r3, #0
   80978:	727b      	strb	r3, [r7, #9]
	initial_time.hour = 0x00;
   8097a:	2300      	movs	r3, #0
   8097c:	72bb      	strb	r3, [r7, #10]
	initial_time.mday = 0x01;
   8097e:	2301      	movs	r3, #1
   80980:	733b      	strb	r3, [r7, #12]
	initial_time.wday = 0x01;
   80982:	2301      	movs	r3, #1
   80984:	72fb      	strb	r3, [r7, #11]
	initial_time.mon = 0x01;
   80986:	2301      	movs	r3, #1
   80988:	737b      	strb	r3, [r7, #13]
	initial_time.year = 0x00;
   8098a:	2300      	movs	r3, #0
   8098c:	81fb      	strh	r3, [r7, #14]
	
	rtc_set(initial_time);
   8098e:	f107 0308 	add.w	r3, r7, #8
   80992:	e893 0003 	ldmia.w	r3, {r0, r1}
   80996:	4b05      	ldr	r3, [pc, #20]	; (809ac <rtc_init+0x4c>)
   80998:	4798      	blx	r3
	
	rtc_set_a2();
   8099a:	4b05      	ldr	r3, [pc, #20]	; (809b0 <rtc_init+0x50>)
   8099c:	4798      	blx	r3
	rtc_clear_a2_flag();
   8099e:	4b05      	ldr	r3, [pc, #20]	; (809b4 <rtc_init+0x54>)
   809a0:	4798      	blx	r3
}
   809a2:	3710      	adds	r7, #16
   809a4:	46bd      	mov	sp, r7
   809a6:	bd80      	pop	{r7, pc}
   809a8:	00080aa1 	.word	0x00080aa1
   809ac:	000809b9 	.word	0x000809b9
   809b0:	00080b01 	.word	0x00080b01
   809b4:	00080b5d 	.word	0x00080b5d

000809b8 <rtc_set>:
 * \brief Set the time and date of the RTC to a specified value.
 *
 * \param t The time struct containing the new time/date to update to.
 */
void rtc_set(struct timestamp t)
{
   809b8:	b580      	push	{r7, lr}
   809ba:	b088      	sub	sp, #32
   809bc:	af00      	add	r7, sp, #0
   809be:	463b      	mov	r3, r7
   809c0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t time_date[7] = { t.sec, t.minute, t.hour, t.wday, t.mday, t.mon, t.year };
   809c4:	783b      	ldrb	r3, [r7, #0]
   809c6:	743b      	strb	r3, [r7, #16]
   809c8:	787b      	ldrb	r3, [r7, #1]
   809ca:	747b      	strb	r3, [r7, #17]
   809cc:	78bb      	ldrb	r3, [r7, #2]
   809ce:	74bb      	strb	r3, [r7, #18]
   809d0:	78fb      	ldrb	r3, [r7, #3]
   809d2:	74fb      	strb	r3, [r7, #19]
   809d4:	793b      	ldrb	r3, [r7, #4]
   809d6:	753b      	strb	r3, [r7, #20]
   809d8:	797b      	ldrb	r3, [r7, #5]
   809da:	757b      	strb	r3, [r7, #21]
   809dc:	88fb      	ldrh	r3, [r7, #6]
   809de:	b2db      	uxtb	r3, r3
   809e0:	75bb      	strb	r3, [r7, #22]
    uint8_t i;
	uint16_t message, addr, data;

    for (i = 0; i < 7; i++) 
   809e2:	2300      	movs	r3, #0
   809e4:	77fb      	strb	r3, [r7, #31]
   809e6:	e01f      	b.n	80a28 <rtc_set+0x70>
	{
		// Convert data and prepare message to send
		addr = i + 0x80;
   809e8:	7ffb      	ldrb	r3, [r7, #31]
   809ea:	b29b      	uxth	r3, r3
   809ec:	3380      	adds	r3, #128	; 0x80
   809ee:	83bb      	strh	r3, [r7, #28]
		data = dectobcd(time_date[i]);
   809f0:	7ffb      	ldrb	r3, [r7, #31]
   809f2:	f107 0220 	add.w	r2, r7, #32
   809f6:	4413      	add	r3, r2
   809f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   809fc:	4618      	mov	r0, r3
   809fe:	4b0d      	ldr	r3, [pc, #52]	; (80a34 <rtc_set+0x7c>)
   80a00:	4798      	blx	r3
   80a02:	4603      	mov	r3, r0
   80a04:	837b      	strh	r3, [r7, #26]
		
		message = (addr << 8) | data;
   80a06:	8bbb      	ldrh	r3, [r7, #28]
   80a08:	021b      	lsls	r3, r3, #8
   80a0a:	b29a      	uxth	r2, r3
   80a0c:	8b7b      	ldrh	r3, [r7, #26]
   80a0e:	4313      	orrs	r3, r2
   80a10:	b29b      	uxth	r3, r3
   80a12:	b29b      	uxth	r3, r3
   80a14:	81fb      	strh	r3, [r7, #14]
		spi_master_transfer(&message, 1);
   80a16:	f107 030e 	add.w	r3, r7, #14
   80a1a:	4618      	mov	r0, r3
   80a1c:	2101      	movs	r1, #1
   80a1e:	4b06      	ldr	r3, [pc, #24]	; (80a38 <rtc_set+0x80>)
   80a20:	4798      	blx	r3
{
	uint8_t time_date[7] = { t.sec, t.minute, t.hour, t.wday, t.mday, t.mon, t.year };
    uint8_t i;
	uint16_t message, addr, data;

    for (i = 0; i < 7; i++) 
   80a22:	7ffb      	ldrb	r3, [r7, #31]
   80a24:	3301      	adds	r3, #1
   80a26:	77fb      	strb	r3, [r7, #31]
   80a28:	7ffb      	ldrb	r3, [r7, #31]
   80a2a:	2b06      	cmp	r3, #6
   80a2c:	d9dc      	bls.n	809e8 <rtc_set+0x30>
		data = dectobcd(time_date[i]);
		
		message = (addr << 8) | data;
		spi_master_transfer(&message, 1);
    }
}
   80a2e:	3720      	adds	r7, #32
   80a30:	46bd      	mov	sp, r7
   80a32:	bd80      	pop	{r7, pc}
   80a34:	0008091d 	.word	0x0008091d
   80a38:	00080e69 	.word	0x00080e69

00080a3c <rtc_set_addr>:
 *
 * \param addr RTC register address
 * \param val  New register value
 */
void rtc_set_addr(uint16_t addr, uint16_t val)
{
   80a3c:	b580      	push	{r7, lr}
   80a3e:	b084      	sub	sp, #16
   80a40:	af00      	add	r7, sp, #0
   80a42:	4602      	mov	r2, r0
   80a44:	460b      	mov	r3, r1
   80a46:	80fa      	strh	r2, [r7, #6]
   80a48:	80bb      	strh	r3, [r7, #4]
	uint16_t message = (addr << 8) | val;
   80a4a:	88fb      	ldrh	r3, [r7, #6]
   80a4c:	021b      	lsls	r3, r3, #8
   80a4e:	b29a      	uxth	r2, r3
   80a50:	88bb      	ldrh	r3, [r7, #4]
   80a52:	4313      	orrs	r3, r2
   80a54:	b29b      	uxth	r3, r3
   80a56:	b29b      	uxth	r3, r3
   80a58:	81fb      	strh	r3, [r7, #14]
	spi_master_transfer(&message, 1);
   80a5a:	f107 030e 	add.w	r3, r7, #14
   80a5e:	4618      	mov	r0, r3
   80a60:	2101      	movs	r1, #1
   80a62:	4b02      	ldr	r3, [pc, #8]	; (80a6c <rtc_set_addr+0x30>)
   80a64:	4798      	blx	r3
}
   80a66:	3710      	adds	r7, #16
   80a68:	46bd      	mov	sp, r7
   80a6a:	bd80      	pop	{r7, pc}
   80a6c:	00080e69 	.word	0x00080e69

00080a70 <rtc_get_addr>:
 * \param addr RTC register address
 *
 * \return val Value stored in specified register
 */
uint8_t rtc_get_addr(uint16_t addr)
{
   80a70:	b580      	push	{r7, lr}
   80a72:	b084      	sub	sp, #16
   80a74:	af00      	add	r7, sp, #0
   80a76:	4603      	mov	r3, r0
   80a78:	80fb      	strh	r3, [r7, #6]
	uint8_t val;
	uint16_t message = (uint16_t) addr << 8;
   80a7a:	88fb      	ldrh	r3, [r7, #6]
   80a7c:	021b      	lsls	r3, r3, #8
   80a7e:	b29b      	uxth	r3, r3
   80a80:	81bb      	strh	r3, [r7, #12]
	
	spi_master_transfer(&message, 1);
   80a82:	f107 030c 	add.w	r3, r7, #12
   80a86:	4618      	mov	r0, r3
   80a88:	2101      	movs	r1, #1
   80a8a:	4b04      	ldr	r3, [pc, #16]	; (80a9c <rtc_get_addr+0x2c>)
   80a8c:	4798      	blx	r3
	
	val = (uint8_t) message;	
   80a8e:	89bb      	ldrh	r3, [r7, #12]
   80a90:	73fb      	strb	r3, [r7, #15]
	return val;
   80a92:	7bfb      	ldrb	r3, [r7, #15]
}
   80a94:	4618      	mov	r0, r3
   80a96:	3710      	adds	r7, #16
   80a98:	46bd      	mov	sp, r7
   80a9a:	bd80      	pop	{r7, pc}
   80a9c:	00080e69 	.word	0x00080e69

00080aa0 <rtc_set_creg>:
 * bit2 INTCN  Interrupt control (1 for use of the alarms and to disable square wave)
 * bit1 A2IE   Alarm1 interrupt enable (1 to enable)
 * bit0 A1IE   Alarm0 interrupt enable (1 to enable)
 */
void rtc_set_creg(uint16_t val)
{
   80aa0:	b580      	push	{r7, lr}
   80aa2:	b082      	sub	sp, #8
   80aa4:	af00      	add	r7, sp, #0
   80aa6:	4603      	mov	r3, r0
   80aa8:	80fb      	strh	r3, [r7, #6]
    rtc_set_addr(DS3234_CREG_WRITE, val);
   80aaa:	88fb      	ldrh	r3, [r7, #6]
   80aac:	208e      	movs	r0, #142	; 0x8e
   80aae:	4619      	mov	r1, r3
   80ab0:	4b02      	ldr	r3, [pc, #8]	; (80abc <rtc_set_creg+0x1c>)
   80ab2:	4798      	blx	r3
}
   80ab4:	3708      	adds	r7, #8
   80ab6:	46bd      	mov	sp, r7
   80ab8:	bd80      	pop	{r7, pc}
   80aba:	bf00      	nop
   80abc:	00080a3d 	.word	0x00080a3d

00080ac0 <rtc_set_sreg>:
 * bit2 BSY      Busy with TCXO functions
 * bit1 A2F      Alarm 1 Flag - (1 if alarm2 was triggered)
 * bit0 A1F      Alarm 0 Flag - (1 if alarm1 was triggered)
 */
void rtc_set_sreg(uint16_t val)
{
   80ac0:	b580      	push	{r7, lr}
   80ac2:	b082      	sub	sp, #8
   80ac4:	af00      	add	r7, sp, #0
   80ac6:	4603      	mov	r3, r0
   80ac8:	80fb      	strh	r3, [r7, #6]
    rtc_set_addr(DS3234_SREG_WRITE, val);
   80aca:	88fb      	ldrh	r3, [r7, #6]
   80acc:	208f      	movs	r0, #143	; 0x8f
   80ace:	4619      	mov	r1, r3
   80ad0:	4b02      	ldr	r3, [pc, #8]	; (80adc <rtc_set_sreg+0x1c>)
   80ad2:	4798      	blx	r3
}
   80ad4:	3708      	adds	r7, #8
   80ad6:	46bd      	mov	sp, r7
   80ad8:	bd80      	pop	{r7, pc}
   80ada:	bf00      	nop
   80adc:	00080a3d 	.word	0x00080a3d

00080ae0 <rtc_get_sreg>:
 * \brief Get the value of the RTC status register.
 *
 * \return ret_val Value of the RTC status register.
 */
uint8_t rtc_get_sreg(void)
{
   80ae0:	b580      	push	{r7, lr}
   80ae2:	b082      	sub	sp, #8
   80ae4:	af00      	add	r7, sp, #0
	uint8_t ret_val;
	ret_val = rtc_get_addr(DS3234_SREG_READ);
   80ae6:	200f      	movs	r0, #15
   80ae8:	4b04      	ldr	r3, [pc, #16]	; (80afc <rtc_get_sreg+0x1c>)
   80aea:	4798      	blx	r3
   80aec:	4603      	mov	r3, r0
   80aee:	71fb      	strb	r3, [r7, #7]
	return ret_val;
   80af0:	79fb      	ldrb	r3, [r7, #7]
}
   80af2:	4618      	mov	r0, r3
   80af4:	3708      	adds	r7, #8
   80af6:	46bd      	mov	sp, r7
   80af8:	bd80      	pop	{r7, pc}
   80afa:	bf00      	nop
   80afc:	00080a71 	.word	0x00080a71

00080b00 <rtc_set_a2>:

/** 
 * \brief Sets the RTC Alarm 2 to trigger every minute.
 */
void rtc_set_a2(void)
{
   80b00:	b580      	push	{r7, lr}
   80b02:	b082      	sub	sp, #8
   80b04:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t buffer, message;
	
	for (i = 0; i <= 2; i++) 
   80b06:	2300      	movs	r3, #0
   80b08:	71fb      	strb	r3, [r7, #7]
   80b0a:	e013      	b.n	80b34 <rtc_set_a2+0x34>
	{
		buffer = i + 0x8B;
   80b0c:	79fb      	ldrb	r3, [r7, #7]
   80b0e:	b29b      	uxth	r3, r3
   80b10:	338b      	adds	r3, #139	; 0x8b
   80b12:	80bb      	strh	r3, [r7, #4]

		message = (buffer << 8) | 0x80;
   80b14:	88bb      	ldrh	r3, [r7, #4]
   80b16:	021b      	lsls	r3, r3, #8
   80b18:	b29b      	uxth	r3, r3
   80b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80b1e:	b29b      	uxth	r3, r3
   80b20:	b29b      	uxth	r3, r3
   80b22:	807b      	strh	r3, [r7, #2]
		spi_master_transfer(&message, 1);
   80b24:	1cbb      	adds	r3, r7, #2
   80b26:	4618      	mov	r0, r3
   80b28:	2101      	movs	r1, #1
   80b2a:	4b05      	ldr	r3, [pc, #20]	; (80b40 <rtc_set_a2+0x40>)
   80b2c:	4798      	blx	r3
void rtc_set_a2(void)
{
	uint8_t i;
	uint16_t buffer, message;
	
	for (i = 0; i <= 2; i++) 
   80b2e:	79fb      	ldrb	r3, [r7, #7]
   80b30:	3301      	adds	r3, #1
   80b32:	71fb      	strb	r3, [r7, #7]
   80b34:	79fb      	ldrb	r3, [r7, #7]
   80b36:	2b02      	cmp	r3, #2
   80b38:	d9e8      	bls.n	80b0c <rtc_set_a2+0xc>
		buffer = i + 0x8B;

		message = (buffer << 8) | 0x80;
		spi_master_transfer(&message, 1);
	}
}
   80b3a:	3708      	adds	r7, #8
   80b3c:	46bd      	mov	sp, r7
   80b3e:	bd80      	pop	{r7, pc}
   80b40:	00080e69 	.word	0x00080e69

00080b44 <rtc_reset_a2>:

/** 
 * \brief Clears and resets the RTC Alarm 2 to trigger every minute.
 */
void rtc_reset_a2(void)
{
   80b44:	b580      	push	{r7, lr}
   80b46:	af00      	add	r7, sp, #0
	rtc_set_creg(DS3234_INTCN | DS3234_A2IE);
   80b48:	2006      	movs	r0, #6
   80b4a:	4b02      	ldr	r3, [pc, #8]	; (80b54 <rtc_reset_a2+0x10>)
   80b4c:	4798      	blx	r3
	rtc_clear_a2_flag();	
   80b4e:	4b02      	ldr	r3, [pc, #8]	; (80b58 <rtc_reset_a2+0x14>)
   80b50:	4798      	blx	r3
}
   80b52:	bd80      	pop	{r7, pc}
   80b54:	00080aa1 	.word	0x00080aa1
   80b58:	00080b5d 	.word	0x00080b5d

00080b5c <rtc_clear_a2_flag>:

/** 
 * \brief Clears the RTC Alarm 2 Flag
 */
void rtc_clear_a2_flag(void)
{
   80b5c:	b580      	push	{r7, lr}
   80b5e:	b082      	sub	sp, #8
   80b60:	af00      	add	r7, sp, #0
	uint8_t reg_val;
	reg_val = rtc_get_sreg() & ~DS3234_A2F;
   80b62:	4b07      	ldr	r3, [pc, #28]	; (80b80 <rtc_clear_a2_flag+0x24>)
   80b64:	4798      	blx	r3
   80b66:	4603      	mov	r3, r0
   80b68:	f023 0302 	bic.w	r3, r3, #2
   80b6c:	71fb      	strb	r3, [r7, #7]
	
	rtc_set_sreg(reg_val);
   80b6e:	79fb      	ldrb	r3, [r7, #7]
   80b70:	b29b      	uxth	r3, r3
   80b72:	4618      	mov	r0, r3
   80b74:	4b03      	ldr	r3, [pc, #12]	; (80b84 <rtc_clear_a2_flag+0x28>)
   80b76:	4798      	blx	r3
}
   80b78:	3708      	adds	r7, #8
   80b7a:	46bd      	mov	sp, r7
   80b7c:	bd80      	pop	{r7, pc}
   80b7e:	bf00      	nop
   80b80:	00080ae1 	.word	0x00080ae1
   80b84:	00080ac1 	.word	0x00080ac1

00080b88 <rtc_triggered_a2>:
 * \brief Checks the RTC Alarm 2 flag to see if the alarm has triggered.
 *
 * \return 1 if the alarm is triggered, 0 otherwise.
 */
uint8_t rtc_triggered_a2(void)
{
   80b88:	b580      	push	{r7, lr}
   80b8a:	af00      	add	r7, sp, #0
	return  rtc_get_sreg() & DS3234_A2F;
   80b8c:	4b03      	ldr	r3, [pc, #12]	; (80b9c <rtc_triggered_a2+0x14>)
   80b8e:	4798      	blx	r3
   80b90:	4603      	mov	r3, r0
   80b92:	f003 0302 	and.w	r3, r3, #2
   80b96:	b2db      	uxtb	r3, r3
   80b98:	4618      	mov	r0, r3
   80b9a:	bd80      	pop	{r7, pc}
   80b9c:	00080ae1 	.word	0x00080ae1

00080ba0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80ba0:	b480      	push	{r7}
   80ba2:	b083      	sub	sp, #12
   80ba4:	af00      	add	r7, sp, #0
   80ba6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80ba8:	687b      	ldr	r3, [r7, #4]
   80baa:	2b07      	cmp	r3, #7
   80bac:	d825      	bhi.n	80bfa <osc_get_rate+0x5a>
   80bae:	a201      	add	r2, pc, #4	; (adr r2, 80bb4 <osc_get_rate+0x14>)
   80bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80bb4:	00080bd5 	.word	0x00080bd5
   80bb8:	00080bdb 	.word	0x00080bdb
   80bbc:	00080be1 	.word	0x00080be1
   80bc0:	00080be7 	.word	0x00080be7
   80bc4:	00080beb 	.word	0x00080beb
   80bc8:	00080bef 	.word	0x00080bef
   80bcc:	00080bf3 	.word	0x00080bf3
   80bd0:	00080bf7 	.word	0x00080bf7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80bd4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80bd8:	e010      	b.n	80bfc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80bde:	e00d      	b.n	80bfc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80be0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80be4:	e00a      	b.n	80bfc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80be6:	4b08      	ldr	r3, [pc, #32]	; (80c08 <osc_get_rate+0x68>)
   80be8:	e008      	b.n	80bfc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80bea:	4b08      	ldr	r3, [pc, #32]	; (80c0c <osc_get_rate+0x6c>)
   80bec:	e006      	b.n	80bfc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80bee:	4b08      	ldr	r3, [pc, #32]	; (80c10 <osc_get_rate+0x70>)
   80bf0:	e004      	b.n	80bfc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80bf2:	4b07      	ldr	r3, [pc, #28]	; (80c10 <osc_get_rate+0x70>)
   80bf4:	e002      	b.n	80bfc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80bf6:	4b06      	ldr	r3, [pc, #24]	; (80c10 <osc_get_rate+0x70>)
   80bf8:	e000      	b.n	80bfc <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80bfa:	2300      	movs	r3, #0
}
   80bfc:	4618      	mov	r0, r3
   80bfe:	370c      	adds	r7, #12
   80c00:	46bd      	mov	sp, r7
   80c02:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c06:	4770      	bx	lr
   80c08:	003d0900 	.word	0x003d0900
   80c0c:	007a1200 	.word	0x007a1200
   80c10:	00b71b00 	.word	0x00b71b00

00080c14 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80c14:	b580      	push	{r7, lr}
   80c16:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80c18:	2006      	movs	r0, #6
   80c1a:	4b04      	ldr	r3, [pc, #16]	; (80c2c <sysclk_get_main_hz+0x18>)
   80c1c:	4798      	blx	r3
   80c1e:	4602      	mov	r2, r0
   80c20:	4613      	mov	r3, r2
   80c22:	00db      	lsls	r3, r3, #3
   80c24:	1a9b      	subs	r3, r3, r2
   80c26:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80c28:	4618      	mov	r0, r3
   80c2a:	bd80      	pop	{r7, pc}
   80c2c:	00080ba1 	.word	0x00080ba1

00080c30 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80c30:	b580      	push	{r7, lr}
   80c32:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80c34:	4b02      	ldr	r3, [pc, #8]	; (80c40 <sysclk_get_cpu_hz+0x10>)
   80c36:	4798      	blx	r3
   80c38:	4603      	mov	r3, r0
   80c3a:	085b      	lsrs	r3, r3, #1
}
   80c3c:	4618      	mov	r0, r3
   80c3e:	bd80      	pop	{r7, pc}
   80c40:	00080c15 	.word	0x00080c15

00080c44 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80c44:	b480      	push	{r7}
   80c46:	b083      	sub	sp, #12
   80c48:	af00      	add	r7, sp, #0
   80c4a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80c4c:	687b      	ldr	r3, [r7, #4]
   80c4e:	2280      	movs	r2, #128	; 0x80
   80c50:	601a      	str	r2, [r3, #0]
}
   80c52:	370c      	adds	r7, #12
   80c54:	46bd      	mov	sp, r7
   80c56:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c5a:	4770      	bx	lr

00080c5c <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80c5c:	b480      	push	{r7}
   80c5e:	b083      	sub	sp, #12
   80c60:	af00      	add	r7, sp, #0
   80c62:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80c64:	687b      	ldr	r3, [r7, #4]
   80c66:	2201      	movs	r2, #1
   80c68:	601a      	str	r2, [r3, #0]
}
   80c6a:	370c      	adds	r7, #12
   80c6c:	46bd      	mov	sp, r7
   80c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c72:	4770      	bx	lr

00080c74 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80c74:	b480      	push	{r7}
   80c76:	b083      	sub	sp, #12
   80c78:	af00      	add	r7, sp, #0
   80c7a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80c7c:	687b      	ldr	r3, [r7, #4]
   80c7e:	685b      	ldr	r3, [r3, #4]
   80c80:	f043 0201 	orr.w	r2, r3, #1
   80c84:	687b      	ldr	r3, [r7, #4]
   80c86:	605a      	str	r2, [r3, #4]
}
   80c88:	370c      	adds	r7, #12
   80c8a:	46bd      	mov	sp, r7
   80c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c90:	4770      	bx	lr
   80c92:	bf00      	nop

00080c94 <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
   80c94:	b480      	push	{r7}
   80c96:	b083      	sub	sp, #12
   80c98:	af00      	add	r7, sp, #0
   80c9a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
   80c9c:	687b      	ldr	r3, [r7, #4]
   80c9e:	685b      	ldr	r3, [r3, #4]
   80ca0:	f023 0202 	bic.w	r2, r3, #2
   80ca4:	687b      	ldr	r3, [r7, #4]
   80ca6:	605a      	str	r2, [r3, #4]
}
   80ca8:	370c      	adds	r7, #12
   80caa:	46bd      	mov	sp, r7
   80cac:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cb0:	4770      	bx	lr
   80cb2:	bf00      	nop

00080cb4 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   80cb4:	b480      	push	{r7}
   80cb6:	b083      	sub	sp, #12
   80cb8:	af00      	add	r7, sp, #0
   80cba:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80cbc:	687b      	ldr	r3, [r7, #4]
   80cbe:	685b      	ldr	r3, [r3, #4]
   80cc0:	f023 0204 	bic.w	r2, r3, #4
   80cc4:	687b      	ldr	r3, [r7, #4]
   80cc6:	605a      	str	r2, [r3, #4]
}
   80cc8:	370c      	adds	r7, #12
   80cca:	46bd      	mov	sp, r7
   80ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop

00080cd4 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80cd4:	b480      	push	{r7}
   80cd6:	b083      	sub	sp, #12
   80cd8:	af00      	add	r7, sp, #0
   80cda:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80cdc:	687b      	ldr	r3, [r7, #4]
   80cde:	685b      	ldr	r3, [r3, #4]
   80ce0:	f043 0210 	orr.w	r2, r3, #16
   80ce4:	687b      	ldr	r3, [r7, #4]
   80ce6:	605a      	str	r2, [r3, #4]
}
   80ce8:	370c      	adds	r7, #12
   80cea:	46bd      	mov	sp, r7
   80cec:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cf0:	4770      	bx	lr
   80cf2:	bf00      	nop

00080cf4 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   80cf4:	b480      	push	{r7}
   80cf6:	b083      	sub	sp, #12
   80cf8:	af00      	add	r7, sp, #0
   80cfa:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80cfc:	687b      	ldr	r3, [r7, #4]
   80cfe:	685b      	ldr	r3, [r3, #4]
   80d00:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   80d04:	687b      	ldr	r3, [r7, #4]
   80d06:	605a      	str	r2, [r3, #4]
}
   80d08:	370c      	adds	r7, #12
   80d0a:	46bd      	mov	sp, r7
   80d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d10:	4770      	bx	lr
   80d12:	bf00      	nop

00080d14 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80d14:	b480      	push	{r7}
   80d16:	b083      	sub	sp, #12
   80d18:	af00      	add	r7, sp, #0
   80d1a:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80d1c:	687b      	ldr	r3, [r7, #4]
   80d1e:	691b      	ldr	r3, [r3, #16]
}
   80d20:	4618      	mov	r0, r3
   80d22:	370c      	adds	r7, #12
   80d24:	46bd      	mov	sp, r7
   80d26:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d2a:	4770      	bx	lr

00080d2c <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   80d2c:	b580      	push	{r7, lr}
   80d2e:	b084      	sub	sp, #16
   80d30:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   80d32:	2300      	movs	r3, #0
   80d34:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   80d36:	2300      	movs	r3, #0
   80d38:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80d3a:	4b0c      	ldr	r3, [pc, #48]	; (80d6c <SPI0_Handler+0x40>)
   80d3c:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80d3e:	480c      	ldr	r0, [pc, #48]	; (80d70 <SPI0_Handler+0x44>)
   80d40:	4b0c      	ldr	r3, [pc, #48]	; (80d74 <SPI0_Handler+0x48>)
   80d42:	4798      	blx	r3
   80d44:	4603      	mov	r3, r0
   80d46:	f003 0301 	and.w	r3, r3, #1
   80d4a:	2b00      	cmp	r3, #0
   80d4c:	d00b      	beq.n	80d66 <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80d4e:	1cfb      	adds	r3, r7, #3
   80d50:	4807      	ldr	r0, [pc, #28]	; (80d70 <SPI0_Handler+0x44>)
   80d52:	4909      	ldr	r1, [pc, #36]	; (80d78 <SPI0_Handler+0x4c>)
   80d54:	461a      	mov	r2, r3
   80d56:	4b09      	ldr	r3, [pc, #36]	; (80d7c <SPI0_Handler+0x50>)
   80d58:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80d5a:	687b      	ldr	r3, [r7, #4]
   80d5c:	681b      	ldr	r3, [r3, #0]
   80d5e:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80d62:	687b      	ldr	r3, [r7, #4]
   80d64:	601a      	str	r2, [r3, #0]
	}
}
   80d66:	3710      	adds	r7, #16
   80d68:	46bd      	mov	sp, r7
   80d6a:	bd80      	pop	{r7, pc}
   80d6c:	4000800c 	.word	0x4000800c
   80d70:	40008000 	.word	0x40008000
   80d74:	00080d15 	.word	0x00080d15
   80d78:	20070458 	.word	0x20070458
   80d7c:	00080211 	.word	0x00080211

00080d80 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   80d80:	b598      	push	{r3, r4, r7, lr}
   80d82:	af00      	add	r7, sp, #0

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_MASTER_BASE);
   80d84:	4824      	ldr	r0, [pc, #144]	; (80e18 <spi_master_initialize+0x98>)
   80d86:	4b25      	ldr	r3, [pc, #148]	; (80e1c <spi_master_initialize+0x9c>)
   80d88:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   80d8a:	4823      	ldr	r0, [pc, #140]	; (80e18 <spi_master_initialize+0x98>)
   80d8c:	4b24      	ldr	r3, [pc, #144]	; (80e20 <spi_master_initialize+0xa0>)
   80d8e:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   80d90:	4821      	ldr	r0, [pc, #132]	; (80e18 <spi_master_initialize+0x98>)
   80d92:	4b24      	ldr	r3, [pc, #144]	; (80e24 <spi_master_initialize+0xa4>)
   80d94:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   80d96:	4820      	ldr	r0, [pc, #128]	; (80e18 <spi_master_initialize+0x98>)
   80d98:	4b23      	ldr	r3, [pc, #140]	; (80e28 <spi_master_initialize+0xa8>)
   80d9a:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   80d9c:	481e      	ldr	r0, [pc, #120]	; (80e18 <spi_master_initialize+0x98>)
   80d9e:	4b23      	ldr	r3, [pc, #140]	; (80e2c <spi_master_initialize+0xac>)
   80da0:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
   80da2:	481d      	ldr	r0, [pc, #116]	; (80e18 <spi_master_initialize+0x98>)
   80da4:	210e      	movs	r1, #14
   80da6:	4b22      	ldr	r3, [pc, #136]	; (80e30 <spi_master_initialize+0xb0>)
   80da8:	4798      	blx	r3
	spi_set_fixed_peripheral_select(SPI_MASTER_BASE);
   80daa:	481b      	ldr	r0, [pc, #108]	; (80e18 <spi_master_initialize+0x98>)
   80dac:	4b21      	ldr	r3, [pc, #132]	; (80e34 <spi_master_initialize+0xb4>)
   80dae:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);
   80db0:	4819      	ldr	r0, [pc, #100]	; (80e18 <spi_master_initialize+0x98>)
   80db2:	4b21      	ldr	r3, [pc, #132]	; (80e38 <spi_master_initialize+0xb8>)
   80db4:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   80db6:	4818      	ldr	r0, [pc, #96]	; (80e18 <spi_master_initialize+0x98>)
   80db8:	2100      	movs	r1, #0
   80dba:	4b20      	ldr	r3, [pc, #128]	; (80e3c <spi_master_initialize+0xbc>)
   80dbc:	4798      	blx	r3

	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
   80dbe:	4816      	ldr	r0, [pc, #88]	; (80e18 <spi_master_initialize+0x98>)
   80dc0:	2100      	movs	r1, #0
   80dc2:	2245      	movs	r2, #69	; 0x45
   80dc4:	2302      	movs	r3, #2
   80dc6:	4c1e      	ldr	r4, [pc, #120]	; (80e40 <spi_master_initialize+0xc0>)
   80dc8:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_16_BIT);
   80dca:	4813      	ldr	r0, [pc, #76]	; (80e18 <spi_master_initialize+0x98>)
   80dcc:	2100      	movs	r1, #0
   80dce:	2280      	movs	r2, #128	; 0x80
   80dd0:	4b1c      	ldr	r3, [pc, #112]	; (80e44 <spi_master_initialize+0xc4>)
   80dd2:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL, spi_calc_baudrate_div(SPI_CLK_FREQ, sysclk_get_cpu_hz())); 
   80dd4:	4b1c      	ldr	r3, [pc, #112]	; (80e48 <spi_master_initialize+0xc8>)
   80dd6:	4798      	blx	r3
   80dd8:	4603      	mov	r3, r0
   80dda:	481c      	ldr	r0, [pc, #112]	; (80e4c <spi_master_initialize+0xcc>)
   80ddc:	4619      	mov	r1, r3
   80dde:	4b1c      	ldr	r3, [pc, #112]	; (80e50 <spi_master_initialize+0xd0>)
   80de0:	4798      	blx	r3
   80de2:	4603      	mov	r3, r0
   80de4:	b2db      	uxtb	r3, r3
   80de6:	480c      	ldr	r0, [pc, #48]	; (80e18 <spi_master_initialize+0x98>)
   80de8:	2100      	movs	r1, #0
   80dea:	461a      	mov	r2, r3
   80dec:	4b19      	ldr	r3, [pc, #100]	; (80e54 <spi_master_initialize+0xd4>)
   80dee:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CS_RISE_FORCED);
   80df0:	4809      	ldr	r0, [pc, #36]	; (80e18 <spi_master_initialize+0x98>)
   80df2:	2100      	movs	r1, #0
   80df4:	2204      	movs	r2, #4
   80df6:	4b18      	ldr	r3, [pc, #96]	; (80e58 <spi_master_initialize+0xd8>)
   80df8:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   80dfa:	4807      	ldr	r0, [pc, #28]	; (80e18 <spi_master_initialize+0x98>)
   80dfc:	2100      	movs	r1, #0
   80dfe:	2201      	movs	r2, #1
   80e00:	4b16      	ldr	r3, [pc, #88]	; (80e5c <spi_master_initialize+0xdc>)
   80e02:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
   80e04:	4804      	ldr	r0, [pc, #16]	; (80e18 <spi_master_initialize+0x98>)
   80e06:	2100      	movs	r1, #0
   80e08:	2200      	movs	r2, #0
   80e0a:	4b15      	ldr	r3, [pc, #84]	; (80e60 <spi_master_initialize+0xe0>)
   80e0c:	4798      	blx	r3
	spi_enable(SPI_MASTER_BASE);
   80e0e:	4802      	ldr	r0, [pc, #8]	; (80e18 <spi_master_initialize+0x98>)
   80e10:	4b14      	ldr	r3, [pc, #80]	; (80e64 <spi_master_initialize+0xe4>)
   80e12:	4798      	blx	r3
}
   80e14:	bd98      	pop	{r3, r4, r7, pc}
   80e16:	bf00      	nop
   80e18:	40008000 	.word	0x40008000
   80e1c:	00080189 	.word	0x00080189
   80e20:	00080c45 	.word	0x00080c45
   80e24:	00080c75 	.word	0x00080c75
   80e28:	00080cd5 	.word	0x00080cd5
   80e2c:	00080cf5 	.word	0x00080cf5
   80e30:	000801ad 	.word	0x000801ad
   80e34:	00080c95 	.word	0x00080c95
   80e38:	00080cb5 	.word	0x00080cb5
   80e3c:	000801e1 	.word	0x000801e1
   80e40:	0008051d 	.word	0x0008051d
   80e44:	00080445 	.word	0x00080445
   80e48:	00080c31 	.word	0x00080c31
   80e4c:	003d0900 	.word	0x003d0900
   80e50:	0008048d 	.word	0x0008048d
   80e54:	000804cd 	.word	0x000804cd
   80e58:	000803a1 	.word	0x000803a1
   80e5c:	00080301 	.word	0x00080301
   80e60:	00080351 	.word	0x00080351
   80e64:	00080c5d 	.word	0x00080c5d

00080e68 <spi_master_transfer>:
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
   80e68:	b590      	push	{r4, r7, lr}
   80e6a:	b087      	sub	sp, #28
   80e6c:	af00      	add	r7, sp, #0
   80e6e:	6078      	str	r0, [r7, #4]
   80e70:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs; // SPI Master operating in fixed CS mode so uc_pcs doesn't need to take on a value
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   80e72:	687b      	ldr	r3, [r7, #4]
   80e74:	613b      	str	r3, [r7, #16]
	
	for (i = 0; i < size; i++) 
   80e76:	2300      	movs	r3, #0
   80e78:	617b      	str	r3, [r7, #20]
   80e7a:	e024      	b.n	80ec6 <spi_master_transfer+0x5e>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
   80e7c:	697b      	ldr	r3, [r7, #20]
   80e7e:	005b      	lsls	r3, r3, #1
   80e80:	693a      	ldr	r2, [r7, #16]
   80e82:	4413      	add	r3, r2
   80e84:	881b      	ldrh	r3, [r3, #0]
   80e86:	4813      	ldr	r0, [pc, #76]	; (80ed4 <spi_master_transfer+0x6c>)
   80e88:	4619      	mov	r1, r3
   80e8a:	2200      	movs	r2, #0
   80e8c:	2300      	movs	r3, #0
   80e8e:	4c12      	ldr	r4, [pc, #72]	; (80ed8 <spi_master_transfer+0x70>)
   80e90:	47a0      	blx	r4
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   80e92:	bf00      	nop
   80e94:	480f      	ldr	r0, [pc, #60]	; (80ed4 <spi_master_transfer+0x6c>)
   80e96:	4b11      	ldr	r3, [pc, #68]	; (80edc <spi_master_transfer+0x74>)
   80e98:	4798      	blx	r3
   80e9a:	4603      	mov	r3, r0
   80e9c:	f003 0301 	and.w	r3, r3, #1
   80ea0:	2b00      	cmp	r3, #0
   80ea2:	d0f7      	beq.n	80e94 <spi_master_transfer+0x2c>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
   80ea4:	f107 030f 	add.w	r3, r7, #15
   80ea8:	480a      	ldr	r0, [pc, #40]	; (80ed4 <spi_master_transfer+0x6c>)
   80eaa:	490d      	ldr	r1, [pc, #52]	; (80ee0 <spi_master_transfer+0x78>)
   80eac:	461a      	mov	r2, r3
   80eae:	4b0d      	ldr	r3, [pc, #52]	; (80ee4 <spi_master_transfer+0x7c>)
   80eb0:	4798      	blx	r3
		p_buffer[i] = data;
   80eb2:	697b      	ldr	r3, [r7, #20]
   80eb4:	005b      	lsls	r3, r3, #1
   80eb6:	693a      	ldr	r2, [r7, #16]
   80eb8:	4413      	add	r3, r2
   80eba:	4a09      	ldr	r2, [pc, #36]	; (80ee0 <spi_master_transfer+0x78>)
   80ebc:	8812      	ldrh	r2, [r2, #0]
   80ebe:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;
	
	for (i = 0; i < size; i++) 
   80ec0:	697b      	ldr	r3, [r7, #20]
   80ec2:	3301      	adds	r3, #1
   80ec4:	617b      	str	r3, [r7, #20]
   80ec6:	697a      	ldr	r2, [r7, #20]
   80ec8:	683b      	ldr	r3, [r7, #0]
   80eca:	429a      	cmp	r2, r3
   80ecc:	d3d6      	bcc.n	80e7c <spi_master_transfer+0x14>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   80ece:	371c      	adds	r7, #28
   80ed0:	46bd      	mov	sp, r7
   80ed2:	bd90      	pop	{r4, r7, pc}
   80ed4:	40008000 	.word	0x40008000
   80ed8:	00080281 	.word	0x00080281
   80edc:	00080d15 	.word	0x00080d15
   80ee0:	2007045a 	.word	0x2007045a
   80ee4:	00080211 	.word	0x00080211

00080ee8 <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80ee8:	b580      	push	{r7, lr}
   80eea:	b084      	sub	sp, #16
   80eec:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   80eee:	2300      	movs	r3, #0
   80ef0:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80ef2:	4b08      	ldr	r3, [pc, #32]	; (80f14 <spi_initialize+0x2c>)
   80ef4:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   80ef6:	2300      	movs	r3, #0
   80ef8:	80fb      	strh	r3, [r7, #6]

//	spi_slave_initialize();
	
	*reg_ptr |= 0x00BB;
   80efa:	68bb      	ldr	r3, [r7, #8]
   80efc:	681b      	ldr	r3, [r3, #0]
   80efe:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80f02:	68bb      	ldr	r3, [r7, #8]
   80f04:	601a      	str	r2, [r3, #0]
//	NVIC_DisableIRQ(SPI_IRQn);
//	NVIC_ClearPendingIRQ(SPI_IRQn);
//	NVIC_SetPriority(SPI_IRQn, 0);
//	NVIC_EnableIRQ(SPI_IRQn);

	spi_master_initialize();
   80f06:	4b04      	ldr	r3, [pc, #16]	; (80f18 <spi_initialize+0x30>)
   80f08:	4798      	blx	r3
	//while (1) {
		//
		//*reg_ptr |= 0x00BB;
		//
		//}	// Put 0xBB in the SPI shift register.
	return;
   80f0a:	bf00      	nop
}
   80f0c:	3710      	adds	r7, #16
   80f0e:	46bd      	mov	sp, r7
   80f10:	bd80      	pop	{r7, pc}
   80f12:	bf00      	nop
   80f14:	4000800c 	.word	0x4000800c
   80f18:	00080d81 	.word	0x00080d81

00080f1c <time_update>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void time_update( void )
{
   80f1c:	b590      	push	{r4, r7, lr}
   80f1e:	b085      	sub	sp, #20
   80f20:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvTimeUpdateTask,					/* The function that implements the task. */
   80f22:	2301      	movs	r3, #1
   80f24:	9300      	str	r3, [sp, #0]
   80f26:	2300      	movs	r3, #0
   80f28:	9301      	str	r3, [sp, #4]
   80f2a:	2300      	movs	r3, #0
   80f2c:	9302      	str	r3, [sp, #8]
   80f2e:	2300      	movs	r3, #0
   80f30:	9303      	str	r3, [sp, #12]
   80f32:	4805      	ldr	r0, [pc, #20]	; (80f48 <time_update+0x2c>)
   80f34:	4905      	ldr	r1, [pc, #20]	; (80f4c <time_update+0x30>)
   80f36:	2282      	movs	r2, #130	; 0x82
   80f38:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80f3c:	4c04      	ldr	r4, [pc, #16]	; (80f50 <time_update+0x34>)
   80f3e:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) TIME_UPDATE_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					TIME_UPDATE_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80f40:	bf00      	nop
}
   80f42:	3704      	adds	r7, #4
   80f44:	46bd      	mov	sp, r7
   80f46:	bd90      	pop	{r4, r7, pc}
   80f48:	00080f55 	.word	0x00080f55
   80f4c:	00086df4 	.word	0x00086df4
   80f50:	000840d9 	.word	0x000840d9

00080f54 <prvTimeUpdateTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvTimeUpdateTask( void *pvParameters )
{
   80f54:	b580      	push	{r7, lr}
   80f56:	b082      	sub	sp, #8
   80f58:	af00      	add	r7, sp, #0
   80f5a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == TIME_UPDATE_PARAMETER );
   80f5c:	687a      	ldr	r2, [r7, #4]
   80f5e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80f62:	429a      	cmp	r2, r3
   80f64:	d002      	beq.n	80f6c <prvTimeUpdateTask+0x18>
   80f66:	4b06      	ldr	r3, [pc, #24]	; (80f80 <prvTimeUpdateTask+0x2c>)
   80f68:	4798      	blx	r3
   80f6a:	e7fe      	b.n	80f6a <prvTimeUpdateTask+0x16>

	/* @non-terminating@ */	
	for( ;; )
	{
		if (rtc_triggered_a2())
   80f6c:	4b05      	ldr	r3, [pc, #20]	; (80f84 <prvTimeUpdateTask+0x30>)
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	2b00      	cmp	r3, #0
   80f74:	d002      	beq.n	80f7c <prvTimeUpdateTask+0x28>
			//TODO: SEND CAN COMMAND
			//xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
			//x = send_can_command(low, high, ID, PRIORITY);
			//xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
			
			rtc_reset_a2();
   80f76:	4b04      	ldr	r3, [pc, #16]	; (80f88 <prvTimeUpdateTask+0x34>)
   80f78:	4798      	blx	r3
		}
	}
   80f7a:	e7f7      	b.n	80f6c <prvTimeUpdateTask+0x18>
   80f7c:	e7f6      	b.n	80f6c <prvTimeUpdateTask+0x18>
   80f7e:	bf00      	nop
   80f80:	00083365 	.word	0x00083365
   80f84:	00080b89 	.word	0x00080b89
   80f88:	00080b45 	.word	0x00080b45

00080f8c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80f8c:	b480      	push	{r7}
   80f8e:	b083      	sub	sp, #12
   80f90:	af00      	add	r7, sp, #0
   80f92:	4603      	mov	r3, r0
   80f94:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80f96:	4b08      	ldr	r3, [pc, #32]	; (80fb8 <NVIC_EnableIRQ+0x2c>)
   80f98:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80f9c:	0952      	lsrs	r2, r2, #5
   80f9e:	79f9      	ldrb	r1, [r7, #7]
   80fa0:	f001 011f 	and.w	r1, r1, #31
   80fa4:	2001      	movs	r0, #1
   80fa6:	fa00 f101 	lsl.w	r1, r0, r1
   80faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80fae:	370c      	adds	r7, #12
   80fb0:	46bd      	mov	sp, r7
   80fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80fb6:	4770      	bx	lr
   80fb8:	e000e100 	.word	0xe000e100

00080fbc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80fbc:	b480      	push	{r7}
   80fbe:	b083      	sub	sp, #12
   80fc0:	af00      	add	r7, sp, #0
   80fc2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80fc4:	687b      	ldr	r3, [r7, #4]
   80fc6:	2b07      	cmp	r3, #7
   80fc8:	d825      	bhi.n	81016 <osc_get_rate+0x5a>
   80fca:	a201      	add	r2, pc, #4	; (adr r2, 80fd0 <osc_get_rate+0x14>)
   80fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80fd0:	00080ff1 	.word	0x00080ff1
   80fd4:	00080ff7 	.word	0x00080ff7
   80fd8:	00080ffd 	.word	0x00080ffd
   80fdc:	00081003 	.word	0x00081003
   80fe0:	00081007 	.word	0x00081007
   80fe4:	0008100b 	.word	0x0008100b
   80fe8:	0008100f 	.word	0x0008100f
   80fec:	00081013 	.word	0x00081013
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80ff0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80ff4:	e010      	b.n	81018 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ffa:	e00d      	b.n	81018 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80ffc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81000:	e00a      	b.n	81018 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81002:	4b08      	ldr	r3, [pc, #32]	; (81024 <osc_get_rate+0x68>)
   81004:	e008      	b.n	81018 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81006:	4b08      	ldr	r3, [pc, #32]	; (81028 <osc_get_rate+0x6c>)
   81008:	e006      	b.n	81018 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8100a:	4b08      	ldr	r3, [pc, #32]	; (8102c <osc_get_rate+0x70>)
   8100c:	e004      	b.n	81018 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8100e:	4b07      	ldr	r3, [pc, #28]	; (8102c <osc_get_rate+0x70>)
   81010:	e002      	b.n	81018 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81012:	4b06      	ldr	r3, [pc, #24]	; (8102c <osc_get_rate+0x70>)
   81014:	e000      	b.n	81018 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81016:	2300      	movs	r3, #0
}
   81018:	4618      	mov	r0, r3
   8101a:	370c      	adds	r7, #12
   8101c:	46bd      	mov	sp, r7
   8101e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81022:	4770      	bx	lr
   81024:	003d0900 	.word	0x003d0900
   81028:	007a1200 	.word	0x007a1200
   8102c:	00b71b00 	.word	0x00b71b00

00081030 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81030:	b580      	push	{r7, lr}
   81032:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81034:	2006      	movs	r0, #6
   81036:	4b04      	ldr	r3, [pc, #16]	; (81048 <sysclk_get_main_hz+0x18>)
   81038:	4798      	blx	r3
   8103a:	4602      	mov	r2, r0
   8103c:	4613      	mov	r3, r2
   8103e:	00db      	lsls	r3, r3, #3
   81040:	1a9b      	subs	r3, r3, r2
   81042:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81044:	4618      	mov	r0, r3
   81046:	bd80      	pop	{r7, pc}
   81048:	00080fbd 	.word	0x00080fbd

0008104c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8104c:	b580      	push	{r7, lr}
   8104e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81050:	4b02      	ldr	r3, [pc, #8]	; (8105c <sysclk_get_cpu_hz+0x10>)
   81052:	4798      	blx	r3
   81054:	4603      	mov	r3, r0
   81056:	085b      	lsrs	r3, r3, #1
}
   81058:	4618      	mov	r0, r3
   8105a:	bd80      	pop	{r7, pc}
   8105c:	00081031 	.word	0x00081031

00081060 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81060:	b580      	push	{r7, lr}
   81062:	b082      	sub	sp, #8
   81064:	af00      	add	r7, sp, #0
   81066:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81068:	6878      	ldr	r0, [r7, #4]
   8106a:	4b02      	ldr	r3, [pc, #8]	; (81074 <sysclk_enable_peripheral_clock+0x14>)
   8106c:	4798      	blx	r3
}
   8106e:	3708      	adds	r7, #8
   81070:	46bd      	mov	sp, r7
   81072:	bd80      	pop	{r7, pc}
   81074:	00082961 	.word	0x00082961

00081078 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   81078:	b580      	push	{r7, lr}
   8107a:	b084      	sub	sp, #16
   8107c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   8107e:	2300      	movs	r3, #0
   81080:	60bb      	str	r3, [r7, #8]
   81082:	2300      	movs	r3, #0
   81084:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   81086:	2300      	movs	r3, #0
   81088:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   8108a:	2300      	movs	r3, #0
   8108c:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   8108e:	483b      	ldr	r0, [pc, #236]	; (8117c <USART0_Handler+0x104>)
   81090:	4b3b      	ldr	r3, [pc, #236]	; (81180 <USART0_Handler+0x108>)
   81092:	4798      	blx	r3
   81094:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   81096:	2058      	movs	r0, #88	; 0x58
   81098:	4b3a      	ldr	r3, [pc, #232]	; (81184 <USART0_Handler+0x10c>)
   8109a:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   8109c:	4b3a      	ldr	r3, [pc, #232]	; (81188 <USART0_Handler+0x110>)
   8109e:	781b      	ldrb	r3, [r3, #0]
   810a0:	2b00      	cmp	r3, #0
   810a2:	d167      	bne.n	81174 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   810a4:	683b      	ldr	r3, [r7, #0]
   810a6:	f003 0301 	and.w	r3, r3, #1
   810aa:	2b00      	cmp	r3, #0
   810ac:	d062      	beq.n	81174 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   810ae:	4833      	ldr	r0, [pc, #204]	; (8117c <USART0_Handler+0x104>)
   810b0:	4936      	ldr	r1, [pc, #216]	; (8118c <USART0_Handler+0x114>)
   810b2:	4b37      	ldr	r3, [pc, #220]	; (81190 <USART0_Handler+0x118>)
   810b4:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   810b6:	4b35      	ldr	r3, [pc, #212]	; (8118c <USART0_Handler+0x114>)
   810b8:	681b      	ldr	r3, [r3, #0]
   810ba:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   810bc:	68bb      	ldr	r3, [r7, #8]
   810be:	2b31      	cmp	r3, #49	; 0x31
   810c0:	d102      	bne.n	810c8 <USART0_Handler+0x50>
				command_start = 1;
   810c2:	4b34      	ldr	r3, [pc, #208]	; (81194 <USART0_Handler+0x11c>)
   810c4:	2201      	movs	r2, #1
   810c6:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   810c8:	68bb      	ldr	r3, [r7, #8]
   810ca:	2b32      	cmp	r3, #50	; 0x32
   810cc:	d102      	bne.n	810d4 <USART0_Handler+0x5c>
				command_end = 1;
   810ce:	4b32      	ldr	r3, [pc, #200]	; (81198 <USART0_Handler+0x120>)
   810d0:	2201      	movs	r2, #1
   810d2:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   810d4:	4b2f      	ldr	r3, [pc, #188]	; (81194 <USART0_Handler+0x11c>)
   810d6:	781b      	ldrb	r3, [r3, #0]
   810d8:	2b01      	cmp	r3, #1
   810da:	d11e      	bne.n	8111a <USART0_Handler+0xa2>
   810dc:	68bb      	ldr	r3, [r7, #8]
   810de:	2b00      	cmp	r3, #0
   810e0:	d01b      	beq.n	8111a <USART0_Handler+0xa2>
   810e2:	68bb      	ldr	r3, [r7, #8]
   810e4:	2b31      	cmp	r3, #49	; 0x31
   810e6:	d018      	beq.n	8111a <USART0_Handler+0xa2>
   810e8:	68bb      	ldr	r3, [r7, #8]
   810ea:	2b32      	cmp	r3, #50	; 0x32
   810ec:	d015      	beq.n	8111a <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   810ee:	4b2b      	ldr	r3, [pc, #172]	; (8119c <USART0_Handler+0x124>)
   810f0:	781a      	ldrb	r2, [r3, #0]
   810f2:	4b2b      	ldr	r3, [pc, #172]	; (811a0 <USART0_Handler+0x128>)
   810f4:	fba3 1302 	umull	r1, r3, r3, r2
   810f8:	08d9      	lsrs	r1, r3, #3
   810fa:	460b      	mov	r3, r1
   810fc:	009b      	lsls	r3, r3, #2
   810fe:	440b      	add	r3, r1
   81100:	005b      	lsls	r3, r3, #1
   81102:	1ad3      	subs	r3, r2, r3
   81104:	b2db      	uxtb	r3, r3
   81106:	68ba      	ldr	r2, [r7, #8]
   81108:	b2d1      	uxtb	r1, r2
   8110a:	4a26      	ldr	r2, [pc, #152]	; (811a4 <USART0_Handler+0x12c>)
   8110c:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   8110e:	4b23      	ldr	r3, [pc, #140]	; (8119c <USART0_Handler+0x124>)
   81110:	781b      	ldrb	r3, [r3, #0]
   81112:	3301      	adds	r3, #1
   81114:	b2da      	uxtb	r2, r3
   81116:	4b21      	ldr	r3, [pc, #132]	; (8119c <USART0_Handler+0x124>)
   81118:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   8111a:	4b1f      	ldr	r3, [pc, #124]	; (81198 <USART0_Handler+0x120>)
   8111c:	781b      	ldrb	r3, [r3, #0]
   8111e:	2b01      	cmp	r3, #1
   81120:	d11d      	bne.n	8115e <USART0_Handler+0xe6>
   81122:	4b1c      	ldr	r3, [pc, #112]	; (81194 <USART0_Handler+0x11c>)
   81124:	781b      	ldrb	r3, [r3, #0]
   81126:	2b01      	cmp	r3, #1
   81128:	d119      	bne.n	8115e <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   8112a:	4b1f      	ldr	r3, [pc, #124]	; (811a8 <USART0_Handler+0x130>)
   8112c:	4798      	blx	r3
				command_end = 0;
   8112e:	4b1a      	ldr	r3, [pc, #104]	; (81198 <USART0_Handler+0x120>)
   81130:	2200      	movs	r2, #0
   81132:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   81134:	4b17      	ldr	r3, [pc, #92]	; (81194 <USART0_Handler+0x11c>)
   81136:	2200      	movs	r2, #0
   81138:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   8113a:	4b18      	ldr	r3, [pc, #96]	; (8119c <USART0_Handler+0x124>)
   8113c:	2200      	movs	r2, #0
   8113e:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   81140:	2300      	movs	r3, #0
   81142:	73bb      	strb	r3, [r7, #14]
   81144:	e006      	b.n	81154 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   81146:	7bbb      	ldrb	r3, [r7, #14]
   81148:	4a16      	ldr	r2, [pc, #88]	; (811a4 <USART0_Handler+0x12c>)
   8114a:	2100      	movs	r1, #0
   8114c:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   8114e:	7bbb      	ldrb	r3, [r7, #14]
   81150:	3301      	adds	r3, #1
   81152:	73bb      	strb	r3, [r7, #14]
   81154:	7bbb      	ldrb	r3, [r7, #14]
   81156:	2b09      	cmp	r3, #9
   81158:	d9f5      	bls.n	81146 <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   8115a:	2301      	movs	r3, #1
   8115c:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   8115e:	7bfb      	ldrb	r3, [r7, #15]
   81160:	2b00      	cmp	r3, #0
   81162:	d105      	bne.n	81170 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   81164:	4b09      	ldr	r3, [pc, #36]	; (8118c <USART0_Handler+0x114>)
   81166:	681b      	ldr	r3, [r3, #0]
   81168:	4804      	ldr	r0, [pc, #16]	; (8117c <USART0_Handler+0x104>)
   8116a:	4619      	mov	r1, r3
   8116c:	4b0f      	ldr	r3, [pc, #60]	; (811ac <USART0_Handler+0x134>)
   8116e:	4798      	blx	r3
					
			command_completed = 0;
   81170:	2300      	movs	r3, #0
   81172:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   81174:	3710      	adds	r7, #16
   81176:	46bd      	mov	sp, r7
   81178:	bd80      	pop	{r7, pc}
   8117a:	bf00      	nop
   8117c:	40098000 	.word	0x40098000
   81180:	00082be1 	.word	0x00082be1
   81184:	00082375 	.word	0x00082375
   81188:	20070460 	.word	0x20070460
   8118c:	2007045c 	.word	0x2007045c
   81190:	00082c65 	.word	0x00082c65
   81194:	20070461 	.word	0x20070461
   81198:	20070462 	.word	0x20070462
   8119c:	20070470 	.word	0x20070470
   811a0:	cccccccd 	.word	0xcccccccd
   811a4:	20070464 	.word	0x20070464
   811a8:	000811b1 	.word	0x000811b1
   811ac:	00082c31 	.word	0x00082c31

000811b0 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   811b0:	b580      	push	{r7, lr}
   811b2:	b08a      	sub	sp, #40	; 0x28
   811b4:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   811b6:	2300      	movs	r3, #0
   811b8:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   811ba:	2301      	movs	r3, #1
   811bc:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   811be:	2300      	movs	r3, #0
   811c0:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   811c2:	2301      	movs	r3, #1
   811c4:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   811c6:	2301      	movs	r3, #1
   811c8:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   811ca:	2301      	movs	r3, #1
   811cc:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   811ce:	f240 1327 	movw	r3, #295	; 0x127
   811d2:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   811d4:	2319      	movs	r3, #25
   811d6:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   811d8:	4b7e      	ldr	r3, [pc, #504]	; (813d4 <check_command+0x224>)
   811da:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   811dc:	6938      	ldr	r0, [r7, #16]
   811de:	4b7e      	ldr	r3, [pc, #504]	; (813d8 <check_command+0x228>)
   811e0:	4798      	blx	r3
   811e2:	4603      	mov	r3, r0
   811e4:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   811e6:	4b7d      	ldr	r3, [pc, #500]	; (813dc <check_command+0x22c>)
   811e8:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   811ea:	6938      	ldr	r0, [r7, #16]
   811ec:	4b7a      	ldr	r3, [pc, #488]	; (813d8 <check_command+0x228>)
   811ee:	4798      	blx	r3
   811f0:	4603      	mov	r3, r0
   811f2:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   811f4:	4b7a      	ldr	r3, [pc, #488]	; (813e0 <check_command+0x230>)
   811f6:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   811f8:	6938      	ldr	r0, [r7, #16]
   811fa:	4b77      	ldr	r3, [pc, #476]	; (813d8 <check_command+0x228>)
   811fc:	4798      	blx	r3
   811fe:	4603      	mov	r3, r0
   81200:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   81202:	7ebb      	ldrb	r3, [r7, #26]
   81204:	2b01      	cmp	r3, #1
   81206:	f040 8088 	bne.w	8131a <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   8120a:	4b76      	ldr	r3, [pc, #472]	; (813e4 <check_command+0x234>)
   8120c:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   8120e:	e00d      	b.n	8122c <check_command+0x7c>
		{
			character = *message_array;
   81210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81212:	781b      	ldrb	r3, [r3, #0]
   81214:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81216:	bf00      	nop
   81218:	4873      	ldr	r0, [pc, #460]	; (813e8 <check_command+0x238>)
   8121a:	6a39      	ldr	r1, [r7, #32]
   8121c:	4b73      	ldr	r3, [pc, #460]	; (813ec <check_command+0x23c>)
   8121e:	4798      	blx	r3
   81220:	4603      	mov	r3, r0
   81222:	2b00      	cmp	r3, #0
   81224:	d1f8      	bne.n	81218 <check_command+0x68>
			
			message_array++;
   81226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81228:	3301      	adds	r3, #1
   8122a:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   8122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8122e:	781b      	ldrb	r3, [r3, #0]
   81230:	2b00      	cmp	r3, #0
   81232:	d1ed      	bne.n	81210 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   81234:	4b6e      	ldr	r3, [pc, #440]	; (813f0 <check_command+0x240>)
   81236:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81238:	e00d      	b.n	81256 <check_command+0xa6>
		{
			character = *message_array;
   8123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8123c:	781b      	ldrb	r3, [r3, #0]
   8123e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81240:	bf00      	nop
   81242:	4869      	ldr	r0, [pc, #420]	; (813e8 <check_command+0x238>)
   81244:	6a39      	ldr	r1, [r7, #32]
   81246:	4b69      	ldr	r3, [pc, #420]	; (813ec <check_command+0x23c>)
   81248:	4798      	blx	r3
   8124a:	4603      	mov	r3, r0
   8124c:	2b00      	cmp	r3, #0
   8124e:	d1f8      	bne.n	81242 <check_command+0x92>
			
			message_array++;
   81250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81252:	3301      	adds	r3, #1
   81254:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   81256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81258:	781b      	ldrb	r3, [r3, #0]
   8125a:	2b00      	cmp	r3, #0
   8125c:	d1ed      	bne.n	8123a <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   8125e:	4b65      	ldr	r3, [pc, #404]	; (813f4 <check_command+0x244>)
   81260:	681b      	ldr	r3, [r3, #0]
   81262:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   81264:	1d3b      	adds	r3, r7, #4
   81266:	4618      	mov	r0, r3
   81268:	4b63      	ldr	r3, [pc, #396]	; (813f8 <check_command+0x248>)
   8126a:	4798      	blx	r3
   8126c:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   8126e:	687b      	ldr	r3, [r7, #4]
   81270:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   81272:	7dfb      	ldrb	r3, [r7, #23]
   81274:	4618      	mov	r0, r3
   81276:	4b61      	ldr	r3, [pc, #388]	; (813fc <check_command+0x24c>)
   81278:	4798      	blx	r3
   8127a:	4603      	mov	r3, r0
   8127c:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   8127e:	7dfb      	ldrb	r3, [r7, #23]
   81280:	011b      	lsls	r3, r3, #4
   81282:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   81284:	7bfb      	ldrb	r3, [r7, #15]
   81286:	091b      	lsrs	r3, r3, #4
   81288:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   8128a:	7dfb      	ldrb	r3, [r7, #23]
   8128c:	091b      	lsrs	r3, r3, #4
   8128e:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   81290:	7bfb      	ldrb	r3, [r7, #15]
   81292:	3330      	adds	r3, #48	; 0x30
   81294:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   81296:	7bbb      	ldrb	r3, [r7, #14]
   81298:	3330      	adds	r3, #48	; 0x30
   8129a:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   8129c:	69fb      	ldr	r3, [r7, #28]
   8129e:	2b00      	cmp	r3, #0
   812a0:	d00a      	beq.n	812b8 <check_command+0x108>
		{
			character = 0x2B;
   812a2:	232b      	movs	r3, #43	; 0x2b
   812a4:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   812a6:	bf00      	nop
   812a8:	484f      	ldr	r0, [pc, #316]	; (813e8 <check_command+0x238>)
   812aa:	6a39      	ldr	r1, [r7, #32]
   812ac:	4b4f      	ldr	r3, [pc, #316]	; (813ec <check_command+0x23c>)
   812ae:	4798      	blx	r3
   812b0:	4603      	mov	r3, r0
   812b2:	2b00      	cmp	r3, #0
   812b4:	d1f8      	bne.n	812a8 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   812b6:	e009      	b.n	812cc <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   812b8:	232d      	movs	r3, #45	; 0x2d
   812ba:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   812bc:	bf00      	nop
   812be:	484a      	ldr	r0, [pc, #296]	; (813e8 <check_command+0x238>)
   812c0:	6a39      	ldr	r1, [r7, #32]
   812c2:	4b4a      	ldr	r3, [pc, #296]	; (813ec <check_command+0x23c>)
   812c4:	4798      	blx	r3
   812c6:	4603      	mov	r3, r0
   812c8:	2b00      	cmp	r3, #0
   812ca:	d1f8      	bne.n	812be <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   812cc:	bf00      	nop
   812ce:	7bbb      	ldrb	r3, [r7, #14]
   812d0:	4845      	ldr	r0, [pc, #276]	; (813e8 <check_command+0x238>)
   812d2:	4619      	mov	r1, r3
   812d4:	4b45      	ldr	r3, [pc, #276]	; (813ec <check_command+0x23c>)
   812d6:	4798      	blx	r3
   812d8:	4603      	mov	r3, r0
   812da:	2b00      	cmp	r3, #0
   812dc:	d1f7      	bne.n	812ce <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   812de:	bf00      	nop
   812e0:	7bfb      	ldrb	r3, [r7, #15]
   812e2:	4841      	ldr	r0, [pc, #260]	; (813e8 <check_command+0x238>)
   812e4:	4619      	mov	r1, r3
   812e6:	4b41      	ldr	r3, [pc, #260]	; (813ec <check_command+0x23c>)
   812e8:	4798      	blx	r3
   812ea:	4603      	mov	r3, r0
   812ec:	2b00      	cmp	r3, #0
   812ee:	d1f7      	bne.n	812e0 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   812f0:	4b43      	ldr	r3, [pc, #268]	; (81400 <check_command+0x250>)
   812f2:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   812f4:	e00d      	b.n	81312 <check_command+0x162>
		{
			character = *message_array;
   812f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   812f8:	781b      	ldrb	r3, [r3, #0]
   812fa:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   812fc:	bf00      	nop
   812fe:	483a      	ldr	r0, [pc, #232]	; (813e8 <check_command+0x238>)
   81300:	6a39      	ldr	r1, [r7, #32]
   81302:	4b3a      	ldr	r3, [pc, #232]	; (813ec <check_command+0x23c>)
   81304:	4798      	blx	r3
   81306:	4603      	mov	r3, r0
   81308:	2b00      	cmp	r3, #0
   8130a:	d1f8      	bne.n	812fe <check_command+0x14e>
			
			message_array++;
   8130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8130e:	3301      	adds	r3, #1
   81310:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   81312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81314:	781b      	ldrb	r3, [r3, #0]
   81316:	2b00      	cmp	r3, #0
   81318:	d1ed      	bne.n	812f6 <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   8131a:	7e7b      	ldrb	r3, [r7, #25]
   8131c:	2b01      	cmp	r3, #1
   8131e:	d114      	bne.n	8134a <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   81320:	4b38      	ldr	r3, [pc, #224]	; (81404 <check_command+0x254>)
   81322:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81324:	e00d      	b.n	81342 <check_command+0x192>
		{
			character = *message_array;
   81326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81328:	781b      	ldrb	r3, [r3, #0]
   8132a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8132c:	bf00      	nop
   8132e:	482e      	ldr	r0, [pc, #184]	; (813e8 <check_command+0x238>)
   81330:	6a39      	ldr	r1, [r7, #32]
   81332:	4b2e      	ldr	r3, [pc, #184]	; (813ec <check_command+0x23c>)
   81334:	4798      	blx	r3
   81336:	4603      	mov	r3, r0
   81338:	2b00      	cmp	r3, #0
   8133a:	d1f8      	bne.n	8132e <check_command+0x17e>
			
			message_array++;
   8133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8133e:	3301      	adds	r3, #1
   81340:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   81342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81344:	781b      	ldrb	r3, [r3, #0]
   81346:	2b00      	cmp	r3, #0
   81348:	d1ed      	bne.n	81326 <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   8134a:	7e3b      	ldrb	r3, [r7, #24]
   8134c:	2b01      	cmp	r3, #1
   8134e:	d13d      	bne.n	813cc <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   81350:	4b2d      	ldr	r3, [pc, #180]	; (81408 <check_command+0x258>)
   81352:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81354:	e00d      	b.n	81372 <check_command+0x1c2>
		{
			character = *message_array;
   81356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81358:	781b      	ldrb	r3, [r3, #0]
   8135a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   8135c:	bf00      	nop
   8135e:	4822      	ldr	r0, [pc, #136]	; (813e8 <check_command+0x238>)
   81360:	6a39      	ldr	r1, [r7, #32]
   81362:	4b22      	ldr	r3, [pc, #136]	; (813ec <check_command+0x23c>)
   81364:	4798      	blx	r3
   81366:	4603      	mov	r3, r0
   81368:	2b00      	cmp	r3, #0
   8136a:	d1f8      	bne.n	8135e <check_command+0x1ae>
			
			message_array++;
   8136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8136e:	3301      	adds	r3, #1
   81370:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   81372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81374:	781b      	ldrb	r3, [r3, #0]
   81376:	2b00      	cmp	r3, #0
   81378:	d1ed      	bne.n	81356 <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   8137a:	4b24      	ldr	r3, [pc, #144]	; (8140c <check_command+0x25c>)
   8137c:	681b      	ldr	r3, [r3, #0]
   8137e:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   81380:	68bb      	ldr	r3, [r7, #8]
   81382:	b2db      	uxtb	r3, r3
   81384:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   81386:	68bb      	ldr	r3, [r7, #8]
   81388:	2b40      	cmp	r3, #64	; 0x40
   8138a:	d802      	bhi.n	81392 <check_command+0x1e2>
   8138c:	68bb      	ldr	r3, [r7, #8]
   8138e:	2b5a      	cmp	r3, #90	; 0x5a
   81390:	d807      	bhi.n	813a2 <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   81392:	bf00      	nop
   81394:	4814      	ldr	r0, [pc, #80]	; (813e8 <check_command+0x238>)
   81396:	68b9      	ldr	r1, [r7, #8]
   81398:	4b14      	ldr	r3, [pc, #80]	; (813ec <check_command+0x23c>)
   8139a:	4798      	blx	r3
   8139c:	4603      	mov	r3, r0
   8139e:	2b00      	cmp	r3, #0
   813a0:	d1f8      	bne.n	81394 <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   813a2:	4b1b      	ldr	r3, [pc, #108]	; (81410 <check_command+0x260>)
   813a4:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   813a6:	e00d      	b.n	813c4 <check_command+0x214>
		{
			character = *message_array;
   813a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813aa:	781b      	ldrb	r3, [r3, #0]
   813ac:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   813ae:	bf00      	nop
   813b0:	480d      	ldr	r0, [pc, #52]	; (813e8 <check_command+0x238>)
   813b2:	6a39      	ldr	r1, [r7, #32]
   813b4:	4b0d      	ldr	r3, [pc, #52]	; (813ec <check_command+0x23c>)
   813b6:	4798      	blx	r3
   813b8:	4603      	mov	r3, r0
   813ba:	2b00      	cmp	r3, #0
   813bc:	d1f8      	bne.n	813b0 <check_command+0x200>
			
			message_array++;
   813be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813c0:	3301      	adds	r3, #1
   813c2:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   813c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   813c6:	781b      	ldrb	r3, [r3, #0]
   813c8:	2b00      	cmp	r3, #0
   813ca:	d1ed      	bne.n	813a8 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   813cc:	bf00      	nop
}
   813ce:	3728      	adds	r7, #40	; 0x28
   813d0:	46bd      	mov	sp, r7
   813d2:	bd80      	pop	{r7, pc}
   813d4:	00086df8 	.word	0x00086df8
   813d8:	00081415 	.word	0x00081415
   813dc:	00086dfc 	.word	0x00086dfc
   813e0:	00086e08 	.word	0x00086e08
   813e4:	00086e0c 	.word	0x00086e0c
   813e8:	40098000 	.word	0x40098000
   813ec:	00082c31 	.word	0x00082c31
   813f0:	00086e2c 	.word	0x00086e2c
   813f4:	2007a644 	.word	0x2007a644
   813f8:	00081471 	.word	0x00081471
   813fc:	00081509 	.word	0x00081509
   81400:	00086e48 	.word	0x00086e48
   81404:	00086e50 	.word	0x00086e50
   81408:	00086e6c 	.word	0x00086e6c
   8140c:	2007a6f4 	.word	0x2007a6f4
   81410:	00086e94 	.word	0x00086e94

00081414 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   81414:	b480      	push	{r7}
   81416:	b085      	sub	sp, #20
   81418:	af00      	add	r7, sp, #0
   8141a:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   8141c:	2300      	movs	r3, #0
   8141e:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   81420:	2301      	movs	r3, #1
   81422:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   81424:	687b      	ldr	r3, [r7, #4]
   81426:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   81428:	2300      	movs	r3, #0
   8142a:	73fb      	strb	r3, [r7, #15]
   8142c:	e014      	b.n	81458 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   8142e:	68bb      	ldr	r3, [r7, #8]
   81430:	781a      	ldrb	r2, [r3, #0]
   81432:	7bfb      	ldrb	r3, [r7, #15]
   81434:	490d      	ldr	r1, [pc, #52]	; (8146c <check_string+0x58>)
   81436:	5ccb      	ldrb	r3, [r1, r3]
   81438:	429a      	cmp	r2, r3
   8143a:	d002      	beq.n	81442 <check_string+0x2e>
		{
			ret_val = 0;
   8143c:	2300      	movs	r3, #0
   8143e:	73bb      	strb	r3, [r7, #14]
			break;
   81440:	e00d      	b.n	8145e <check_string+0x4a>
		}
		if (!*temp_str)
   81442:	68bb      	ldr	r3, [r7, #8]
   81444:	781b      	ldrb	r3, [r3, #0]
   81446:	2b00      	cmp	r3, #0
   81448:	d100      	bne.n	8144c <check_string+0x38>
			break;
   8144a:	e008      	b.n	8145e <check_string+0x4a>
			
		temp_str++;
   8144c:	68bb      	ldr	r3, [r7, #8]
   8144e:	3301      	adds	r3, #1
   81450:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   81452:	7bfb      	ldrb	r3, [r7, #15]
   81454:	3301      	adds	r3, #1
   81456:	73fb      	strb	r3, [r7, #15]
   81458:	7bfb      	ldrb	r3, [r7, #15]
   8145a:	2b09      	cmp	r3, #9
   8145c:	d9e7      	bls.n	8142e <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   8145e:	7bbb      	ldrb	r3, [r7, #14]
}
   81460:	4618      	mov	r0, r3
   81462:	3714      	adds	r7, #20
   81464:	46bd      	mov	sp, r7
   81466:	f85d 7b04 	ldr.w	r7, [sp], #4
   8146a:	4770      	bx	lr
   8146c:	20070464 	.word	0x20070464

00081470 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   81470:	b580      	push	{r7, lr}
   81472:	b084      	sub	sp, #16
   81474:	af00      	add	r7, sp, #0
   81476:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   81478:	f04f 0300 	mov.w	r3, #0
   8147c:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   8147e:	687b      	ldr	r3, [r7, #4]
   81480:	681b      	ldr	r3, [r3, #0]
   81482:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   81484:	68bb      	ldr	r3, [r7, #8]
   81486:	089b      	lsrs	r3, r3, #2
   81488:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   8148a:	4b1b      	ldr	r3, [pc, #108]	; (814f8 <convert_to_temp+0x88>)
   8148c:	68b8      	ldr	r0, [r7, #8]
   8148e:	4798      	blx	r3
   81490:	4603      	mov	r3, r0
   81492:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   81494:	4b19      	ldr	r3, [pc, #100]	; (814fc <convert_to_temp+0x8c>)
   81496:	68f8      	ldr	r0, [r7, #12]
   81498:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   8149c:	4798      	blx	r3
   8149e:	4603      	mov	r3, r0
   814a0:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   814a2:	4b17      	ldr	r3, [pc, #92]	; (81500 <convert_to_temp+0x90>)
   814a4:	68f8      	ldr	r0, [r7, #12]
   814a6:	f04f 0100 	mov.w	r1, #0
   814aa:	4798      	blx	r3
   814ac:	4603      	mov	r3, r0
   814ae:	2b00      	cmp	r3, #0
   814b0:	d009      	beq.n	814c6 <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   814b2:	4b14      	ldr	r3, [pc, #80]	; (81504 <convert_to_temp+0x94>)
   814b4:	68f8      	ldr	r0, [r7, #12]
   814b6:	4798      	blx	r3
   814b8:	4603      	mov	r3, r0
   814ba:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   814bc:	687b      	ldr	r3, [r7, #4]
   814be:	68ba      	ldr	r2, [r7, #8]
   814c0:	601a      	str	r2, [r3, #0]
		return 1;	
   814c2:	2301      	movs	r3, #1
   814c4:	e013      	b.n	814ee <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   814c6:	4b0c      	ldr	r3, [pc, #48]	; (814f8 <convert_to_temp+0x88>)
   814c8:	68b8      	ldr	r0, [r7, #8]
   814ca:	4798      	blx	r3
   814cc:	4603      	mov	r3, r0
   814ce:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   814d2:	4b0c      	ldr	r3, [pc, #48]	; (81504 <convert_to_temp+0x94>)
   814d4:	4610      	mov	r0, r2
   814d6:	4798      	blx	r3
   814d8:	4603      	mov	r3, r0
   814da:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   814dc:	4b09      	ldr	r3, [pc, #36]	; (81504 <convert_to_temp+0x94>)
   814de:	68f8      	ldr	r0, [r7, #12]
   814e0:	4798      	blx	r3
   814e2:	4603      	mov	r3, r0
   814e4:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   814e6:	687b      	ldr	r3, [r7, #4]
   814e8:	68ba      	ldr	r2, [r7, #8]
   814ea:	601a      	str	r2, [r3, #0]
		return 0;
   814ec:	2300      	movs	r3, #0
	}
}
   814ee:	4618      	mov	r0, r3
   814f0:	3710      	adds	r7, #16
   814f2:	46bd      	mov	sp, r7
   814f4:	bd80      	pop	{r7, pc}
   814f6:	bf00      	nop
   814f8:	0008662d 	.word	0x0008662d
   814fc:	000866dd 	.word	0x000866dd
   81500:	00086a41 	.word	0x00086a41
   81504:	00086a69 	.word	0x00086a69

00081508 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   81508:	b480      	push	{r7}
   8150a:	b085      	sub	sp, #20
   8150c:	af00      	add	r7, sp, #0
   8150e:	4603      	mov	r3, r0
   81510:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   81512:	2300      	movs	r3, #0
   81514:	73fb      	strb	r3, [r7, #15]
   81516:	2300      	movs	r3, #0
   81518:	73bb      	strb	r3, [r7, #14]
   8151a:	2300      	movs	r3, #0
   8151c:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   8151e:	79fb      	ldrb	r3, [r7, #7]
   81520:	2b09      	cmp	r3, #9
   81522:	d919      	bls.n	81558 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   81524:	79fa      	ldrb	r2, [r7, #7]
   81526:	4b10      	ldr	r3, [pc, #64]	; (81568 <convert_to_bcd+0x60>)
   81528:	fba3 1302 	umull	r1, r3, r3, r2
   8152c:	08d9      	lsrs	r1, r3, #3
   8152e:	460b      	mov	r3, r1
   81530:	009b      	lsls	r3, r3, #2
   81532:	440b      	add	r3, r1
   81534:	005b      	lsls	r3, r3, #1
   81536:	1ad3      	subs	r3, r2, r3
   81538:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   8153a:	79fa      	ldrb	r2, [r7, #7]
   8153c:	4b0a      	ldr	r3, [pc, #40]	; (81568 <convert_to_bcd+0x60>)
   8153e:	fba3 1302 	umull	r1, r3, r3, r2
   81542:	08db      	lsrs	r3, r3, #3
   81544:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   81546:	7bfb      	ldrb	r3, [r7, #15]
   81548:	011b      	lsls	r3, r3, #4
   8154a:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   8154c:	7bfa      	ldrb	r2, [r7, #15]
   8154e:	7bbb      	ldrb	r3, [r7, #14]
   81550:	4313      	orrs	r3, r2
   81552:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   81554:	7b7b      	ldrb	r3, [r7, #13]
   81556:	e000      	b.n	8155a <convert_to_bcd+0x52>
	}
	else
		return temp;
   81558:	79fb      	ldrb	r3, [r7, #7]
}
   8155a:	4618      	mov	r0, r3
   8155c:	3714      	adds	r7, #20
   8155e:	46bd      	mov	sp, r7
   81560:	f85d 7b04 	ldr.w	r7, [sp], #4
   81564:	4770      	bx	lr
   81566:	bf00      	nop
   81568:	cccccccd 	.word	0xcccccccd

0008156c <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   8156c:	b5b0      	push	{r4, r5, r7, lr}
   8156e:	b086      	sub	sp, #24
   81570:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   81572:	4b13      	ldr	r3, [pc, #76]	; (815c0 <configure_usart+0x54>)
   81574:	463c      	mov	r4, r7
   81576:	461d      	mov	r5, r3
   81578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8157c:	e895 0003 	ldmia.w	r5, {r0, r1}
   81580:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   81584:	2011      	movs	r0, #17
   81586:	4b0f      	ldr	r3, [pc, #60]	; (815c4 <configure_usart+0x58>)
   81588:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   8158a:	4b0f      	ldr	r3, [pc, #60]	; (815c8 <configure_usart+0x5c>)
   8158c:	4798      	blx	r3
   8158e:	4603      	mov	r3, r0
   81590:	463a      	mov	r2, r7
   81592:	480e      	ldr	r0, [pc, #56]	; (815cc <configure_usart+0x60>)
   81594:	4611      	mov	r1, r2
   81596:	461a      	mov	r2, r3
   81598:	4b0d      	ldr	r3, [pc, #52]	; (815d0 <configure_usart+0x64>)
   8159a:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   8159c:	480b      	ldr	r0, [pc, #44]	; (815cc <configure_usart+0x60>)
   8159e:	f04f 31ff 	mov.w	r1, #4294967295
   815a2:	4b0c      	ldr	r3, [pc, #48]	; (815d4 <configure_usart+0x68>)
   815a4:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   815a6:	4809      	ldr	r0, [pc, #36]	; (815cc <configure_usart+0x60>)
   815a8:	4b0b      	ldr	r3, [pc, #44]	; (815d8 <configure_usart+0x6c>)
   815aa:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   815ac:	4807      	ldr	r0, [pc, #28]	; (815cc <configure_usart+0x60>)
   815ae:	4b0b      	ldr	r3, [pc, #44]	; (815dc <configure_usart+0x70>)
   815b0:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   815b2:	2011      	movs	r0, #17
   815b4:	4b0a      	ldr	r3, [pc, #40]	; (815e0 <configure_usart+0x74>)
   815b6:	4798      	blx	r3
}
   815b8:	3718      	adds	r7, #24
   815ba:	46bd      	mov	sp, r7
   815bc:	bdb0      	pop	{r4, r5, r7, pc}
   815be:	bf00      	nop
   815c0:	00086e98 	.word	0x00086e98
   815c4:	00081061 	.word	0x00081061
   815c8:	0008104d 	.word	0x0008104d
   815cc:	40098000 	.word	0x40098000
   815d0:	00082ac5 	.word	0x00082ac5
   815d4:	00082bc5 	.word	0x00082bc5
   815d8:	00082b49 	.word	0x00082b49
   815dc:	00082b79 	.word	0x00082b79
   815e0:	00080f8d 	.word	0x00080f8d

000815e4 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   815e4:	b580      	push	{r7, lr}
   815e6:	b084      	sub	sp, #16
   815e8:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   815ea:	2300      	movs	r3, #0
   815ec:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   815ee:	2300      	movs	r3, #0
   815f0:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   815f2:	4b1a      	ldr	r3, [pc, #104]	; (8165c <usart_initialize+0x78>)
   815f4:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   815f6:	4b1a      	ldr	r3, [pc, #104]	; (81660 <usart_initialize+0x7c>)
   815f8:	2200      	movs	r2, #0
   815fa:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   815fc:	2300      	movs	r3, #0
   815fe:	73fb      	strb	r3, [r7, #15]
   81600:	e006      	b.n	81610 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   81602:	7bfb      	ldrb	r3, [r7, #15]
   81604:	4a17      	ldr	r2, [pc, #92]	; (81664 <usart_initialize+0x80>)
   81606:	2100      	movs	r1, #0
   81608:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   8160a:	7bfb      	ldrb	r3, [r7, #15]
   8160c:	3301      	adds	r3, #1
   8160e:	73fb      	strb	r3, [r7, #15]
   81610:	7bfb      	ldrb	r3, [r7, #15]
   81612:	2b09      	cmp	r3, #9
   81614:	d9f5      	bls.n	81602 <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   81616:	4814      	ldr	r0, [pc, #80]	; (81668 <usart_initialize+0x84>)
   81618:	2101      	movs	r1, #1
   8161a:	4b14      	ldr	r3, [pc, #80]	; (8166c <usart_initialize+0x88>)
   8161c:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   8161e:	4812      	ldr	r0, [pc, #72]	; (81668 <usart_initialize+0x84>)
   81620:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81624:	4b12      	ldr	r3, [pc, #72]	; (81670 <usart_initialize+0x8c>)
   81626:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   81628:	4b12      	ldr	r3, [pc, #72]	; (81674 <usart_initialize+0x90>)
   8162a:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   8162c:	e00d      	b.n	8164a <usart_initialize+0x66>
	{
		character = *message_array;
   8162e:	68bb      	ldr	r3, [r7, #8]
   81630:	781b      	ldrb	r3, [r3, #0]
   81632:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   81634:	bf00      	nop
   81636:	480c      	ldr	r0, [pc, #48]	; (81668 <usart_initialize+0x84>)
   81638:	6879      	ldr	r1, [r7, #4]
   8163a:	4b0f      	ldr	r3, [pc, #60]	; (81678 <usart_initialize+0x94>)
   8163c:	4798      	blx	r3
   8163e:	4603      	mov	r3, r0
   81640:	2b00      	cmp	r3, #0
   81642:	d1f8      	bne.n	81636 <usart_initialize+0x52>
			
		message_array++;
   81644:	68bb      	ldr	r3, [r7, #8]
   81646:	3301      	adds	r3, #1
   81648:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   8164a:	68bb      	ldr	r3, [r7, #8]
   8164c:	781b      	ldrb	r3, [r3, #0]
   8164e:	2b00      	cmp	r3, #0
   81650:	d1ed      	bne.n	8162e <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   81652:	bf00      	nop
}
   81654:	3710      	adds	r7, #16
   81656:	46bd      	mov	sp, r7
   81658:	bd80      	pop	{r7, pc}
   8165a:	bf00      	nop
   8165c:	0008156d 	.word	0x0008156d
   81660:	20070460 	.word	0x20070460
   81664:	20070464 	.word	0x20070464
   81668:	40098000 	.word	0x40098000
   8166c:	00082ba9 	.word	0x00082ba9
   81670:	00082bc5 	.word	0x00082bc5
   81674:	00086eb0 	.word	0x00086eb0
   81678:	00082c31 	.word	0x00082c31

0008167c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	b082      	sub	sp, #8
   81680:	af00      	add	r7, sp, #0
   81682:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81684:	687b      	ldr	r3, [r7, #4]
   81686:	2b07      	cmp	r3, #7
   81688:	d82e      	bhi.n	816e8 <osc_enable+0x6c>
   8168a:	a201      	add	r2, pc, #4	; (adr r2, 81690 <osc_enable+0x14>)
   8168c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81690:	000816e9 	.word	0x000816e9
   81694:	000816b1 	.word	0x000816b1
   81698:	000816b9 	.word	0x000816b9
   8169c:	000816c1 	.word	0x000816c1
   816a0:	000816c9 	.word	0x000816c9
   816a4:	000816d1 	.word	0x000816d1
   816a8:	000816d9 	.word	0x000816d9
   816ac:	000816e1 	.word	0x000816e1
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   816b0:	2000      	movs	r0, #0
   816b2:	4b0f      	ldr	r3, [pc, #60]	; (816f0 <osc_enable+0x74>)
   816b4:	4798      	blx	r3
		break;
   816b6:	e017      	b.n	816e8 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   816b8:	2001      	movs	r0, #1
   816ba:	4b0d      	ldr	r3, [pc, #52]	; (816f0 <osc_enable+0x74>)
   816bc:	4798      	blx	r3
		break;
   816be:	e013      	b.n	816e8 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   816c0:	2000      	movs	r0, #0
   816c2:	4b0c      	ldr	r3, [pc, #48]	; (816f4 <osc_enable+0x78>)
   816c4:	4798      	blx	r3
		break;
   816c6:	e00f      	b.n	816e8 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   816c8:	2010      	movs	r0, #16
   816ca:	4b0a      	ldr	r3, [pc, #40]	; (816f4 <osc_enable+0x78>)
   816cc:	4798      	blx	r3
		break;
   816ce:	e00b      	b.n	816e8 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   816d0:	2020      	movs	r0, #32
   816d2:	4b08      	ldr	r3, [pc, #32]	; (816f4 <osc_enable+0x78>)
   816d4:	4798      	blx	r3
		break;
   816d6:	e007      	b.n	816e8 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   816d8:	2000      	movs	r0, #0
   816da:	4b07      	ldr	r3, [pc, #28]	; (816f8 <osc_enable+0x7c>)
   816dc:	4798      	blx	r3
		break;
   816de:	e003      	b.n	816e8 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   816e0:	2001      	movs	r0, #1
   816e2:	4b05      	ldr	r3, [pc, #20]	; (816f8 <osc_enable+0x7c>)
   816e4:	4798      	blx	r3
		break;
   816e6:	bf00      	nop
	}
}
   816e8:	3708      	adds	r7, #8
   816ea:	46bd      	mov	sp, r7
   816ec:	bd80      	pop	{r7, pc}
   816ee:	bf00      	nop
   816f0:	00082779 	.word	0x00082779
   816f4:	000827e9 	.word	0x000827e9
   816f8:	00082889 	.word	0x00082889

000816fc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   816fc:	b580      	push	{r7, lr}
   816fe:	b082      	sub	sp, #8
   81700:	af00      	add	r7, sp, #0
   81702:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81704:	687b      	ldr	r3, [r7, #4]
   81706:	2b07      	cmp	r3, #7
   81708:	d826      	bhi.n	81758 <osc_is_ready+0x5c>
   8170a:	a201      	add	r2, pc, #4	; (adr r2, 81710 <osc_is_ready+0x14>)
   8170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81710:	00081731 	.word	0x00081731
   81714:	00081735 	.word	0x00081735
   81718:	00081735 	.word	0x00081735
   8171c:	00081747 	.word	0x00081747
   81720:	00081747 	.word	0x00081747
   81724:	00081747 	.word	0x00081747
   81728:	00081747 	.word	0x00081747
   8172c:	00081747 	.word	0x00081747
	case OSC_SLCK_32K_RC:
		return 1;
   81730:	2301      	movs	r3, #1
   81732:	e012      	b.n	8175a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   81734:	4b0b      	ldr	r3, [pc, #44]	; (81764 <osc_is_ready+0x68>)
   81736:	4798      	blx	r3
   81738:	4603      	mov	r3, r0
   8173a:	2b00      	cmp	r3, #0
   8173c:	bf0c      	ite	eq
   8173e:	2300      	moveq	r3, #0
   81740:	2301      	movne	r3, #1
   81742:	b2db      	uxtb	r3, r3
   81744:	e009      	b.n	8175a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81746:	4b08      	ldr	r3, [pc, #32]	; (81768 <osc_is_ready+0x6c>)
   81748:	4798      	blx	r3
   8174a:	4603      	mov	r3, r0
   8174c:	2b00      	cmp	r3, #0
   8174e:	bf0c      	ite	eq
   81750:	2300      	moveq	r3, #0
   81752:	2301      	movne	r3, #1
   81754:	b2db      	uxtb	r3, r3
   81756:	e000      	b.n	8175a <osc_is_ready+0x5e>
	}

	return 0;
   81758:	2300      	movs	r3, #0
}
   8175a:	4618      	mov	r0, r3
   8175c:	3708      	adds	r7, #8
   8175e:	46bd      	mov	sp, r7
   81760:	bd80      	pop	{r7, pc}
   81762:	bf00      	nop
   81764:	000827b5 	.word	0x000827b5
   81768:	000828f5 	.word	0x000828f5

0008176c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8176c:	b480      	push	{r7}
   8176e:	b083      	sub	sp, #12
   81770:	af00      	add	r7, sp, #0
   81772:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81774:	687b      	ldr	r3, [r7, #4]
   81776:	2b07      	cmp	r3, #7
   81778:	d825      	bhi.n	817c6 <osc_get_rate+0x5a>
   8177a:	a201      	add	r2, pc, #4	; (adr r2, 81780 <osc_get_rate+0x14>)
   8177c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81780:	000817a1 	.word	0x000817a1
   81784:	000817a7 	.word	0x000817a7
   81788:	000817ad 	.word	0x000817ad
   8178c:	000817b3 	.word	0x000817b3
   81790:	000817b7 	.word	0x000817b7
   81794:	000817bb 	.word	0x000817bb
   81798:	000817bf 	.word	0x000817bf
   8179c:	000817c3 	.word	0x000817c3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   817a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   817a4:	e010      	b.n	817c8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   817a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   817aa:	e00d      	b.n	817c8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   817ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   817b0:	e00a      	b.n	817c8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   817b2:	4b08      	ldr	r3, [pc, #32]	; (817d4 <osc_get_rate+0x68>)
   817b4:	e008      	b.n	817c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   817b6:	4b08      	ldr	r3, [pc, #32]	; (817d8 <osc_get_rate+0x6c>)
   817b8:	e006      	b.n	817c8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   817ba:	4b08      	ldr	r3, [pc, #32]	; (817dc <osc_get_rate+0x70>)
   817bc:	e004      	b.n	817c8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   817be:	4b07      	ldr	r3, [pc, #28]	; (817dc <osc_get_rate+0x70>)
   817c0:	e002      	b.n	817c8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   817c2:	4b06      	ldr	r3, [pc, #24]	; (817dc <osc_get_rate+0x70>)
   817c4:	e000      	b.n	817c8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   817c6:	2300      	movs	r3, #0
}
   817c8:	4618      	mov	r0, r3
   817ca:	370c      	adds	r7, #12
   817cc:	46bd      	mov	sp, r7
   817ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   817d2:	4770      	bx	lr
   817d4:	003d0900 	.word	0x003d0900
   817d8:	007a1200 	.word	0x007a1200
   817dc:	00b71b00 	.word	0x00b71b00

000817e0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   817e0:	b580      	push	{r7, lr}
   817e2:	b082      	sub	sp, #8
   817e4:	af00      	add	r7, sp, #0
   817e6:	4603      	mov	r3, r0
   817e8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   817ea:	bf00      	nop
   817ec:	79fb      	ldrb	r3, [r7, #7]
   817ee:	4618      	mov	r0, r3
   817f0:	4b05      	ldr	r3, [pc, #20]	; (81808 <osc_wait_ready+0x28>)
   817f2:	4798      	blx	r3
   817f4:	4603      	mov	r3, r0
   817f6:	f083 0301 	eor.w	r3, r3, #1
   817fa:	b2db      	uxtb	r3, r3
   817fc:	2b00      	cmp	r3, #0
   817fe:	d1f5      	bne.n	817ec <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   81800:	3708      	adds	r7, #8
   81802:	46bd      	mov	sp, r7
   81804:	bd80      	pop	{r7, pc}
   81806:	bf00      	nop
   81808:	000816fd 	.word	0x000816fd

0008180c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8180c:	b580      	push	{r7, lr}
   8180e:	b086      	sub	sp, #24
   81810:	af00      	add	r7, sp, #0
   81812:	60f8      	str	r0, [r7, #12]
   81814:	607a      	str	r2, [r7, #4]
   81816:	603b      	str	r3, [r7, #0]
   81818:	460b      	mov	r3, r1
   8181a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8181c:	687b      	ldr	r3, [r7, #4]
   8181e:	2b00      	cmp	r3, #0
   81820:	d107      	bne.n	81832 <pll_config_init+0x26>
   81822:	683b      	ldr	r3, [r7, #0]
   81824:	2b00      	cmp	r3, #0
   81826:	d104      	bne.n	81832 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81828:	68fb      	ldr	r3, [r7, #12]
   8182a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8182e:	601a      	str	r2, [r3, #0]
   81830:	e019      	b.n	81866 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   81832:	7afb      	ldrb	r3, [r7, #11]
   81834:	4618      	mov	r0, r3
   81836:	4b0d      	ldr	r3, [pc, #52]	; (8186c <pll_config_init+0x60>)
   81838:	4798      	blx	r3
   8183a:	4602      	mov	r2, r0
   8183c:	687b      	ldr	r3, [r7, #4]
   8183e:	fbb2 f3f3 	udiv	r3, r2, r3
   81842:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   81844:	697b      	ldr	r3, [r7, #20]
   81846:	683a      	ldr	r2, [r7, #0]
   81848:	fb02 f303 	mul.w	r3, r2, r3
   8184c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8184e:	683b      	ldr	r3, [r7, #0]
   81850:	3b01      	subs	r3, #1
   81852:	041a      	lsls	r2, r3, #16
   81854:	4b06      	ldr	r3, [pc, #24]	; (81870 <pll_config_init+0x64>)
   81856:	4013      	ands	r3, r2
   81858:	687a      	ldr	r2, [r7, #4]
   8185a:	b2d2      	uxtb	r2, r2
   8185c:	4313      	orrs	r3, r2
   8185e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   81862:	68fb      	ldr	r3, [r7, #12]
   81864:	601a      	str	r2, [r3, #0]
	}
}
   81866:	3718      	adds	r7, #24
   81868:	46bd      	mov	sp, r7
   8186a:	bd80      	pop	{r7, pc}
   8186c:	0008176d 	.word	0x0008176d
   81870:	07ff0000 	.word	0x07ff0000

00081874 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   81874:	b580      	push	{r7, lr}
   81876:	b082      	sub	sp, #8
   81878:	af00      	add	r7, sp, #0
   8187a:	6078      	str	r0, [r7, #4]
   8187c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8187e:	683b      	ldr	r3, [r7, #0]
   81880:	2b00      	cmp	r3, #0
   81882:	d108      	bne.n	81896 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   81884:	4b08      	ldr	r3, [pc, #32]	; (818a8 <pll_enable+0x34>)
   81886:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81888:	4b08      	ldr	r3, [pc, #32]	; (818ac <pll_enable+0x38>)
   8188a:	687a      	ldr	r2, [r7, #4]
   8188c:	6812      	ldr	r2, [r2, #0]
   8188e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81892:	629a      	str	r2, [r3, #40]	; 0x28
   81894:	e005      	b.n	818a2 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   81896:	4b05      	ldr	r3, [pc, #20]	; (818ac <pll_enable+0x38>)
   81898:	687a      	ldr	r2, [r7, #4]
   8189a:	6812      	ldr	r2, [r2, #0]
   8189c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   818a0:	61da      	str	r2, [r3, #28]
	}
}
   818a2:	3708      	adds	r7, #8
   818a4:	46bd      	mov	sp, r7
   818a6:	bd80      	pop	{r7, pc}
   818a8:	00082911 	.word	0x00082911
   818ac:	400e0600 	.word	0x400e0600

000818b0 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   818b0:	b580      	push	{r7, lr}
   818b2:	b082      	sub	sp, #8
   818b4:	af00      	add	r7, sp, #0
   818b6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   818b8:	687b      	ldr	r3, [r7, #4]
   818ba:	2b00      	cmp	r3, #0
   818bc:	d103      	bne.n	818c6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   818be:	4b05      	ldr	r3, [pc, #20]	; (818d4 <pll_is_locked+0x24>)
   818c0:	4798      	blx	r3
   818c2:	4603      	mov	r3, r0
   818c4:	e002      	b.n	818cc <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   818c6:	4b04      	ldr	r3, [pc, #16]	; (818d8 <pll_is_locked+0x28>)
   818c8:	4798      	blx	r3
   818ca:	4603      	mov	r3, r0
}
   818cc:	4618      	mov	r0, r3
   818ce:	3708      	adds	r7, #8
   818d0:	46bd      	mov	sp, r7
   818d2:	bd80      	pop	{r7, pc}
   818d4:	00082929 	.word	0x00082929
   818d8:	00082945 	.word	0x00082945

000818dc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   818dc:	b580      	push	{r7, lr}
   818de:	b082      	sub	sp, #8
   818e0:	af00      	add	r7, sp, #0
   818e2:	4603      	mov	r3, r0
   818e4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   818e6:	79fb      	ldrb	r3, [r7, #7]
   818e8:	3b03      	subs	r3, #3
   818ea:	2b04      	cmp	r3, #4
   818ec:	d808      	bhi.n	81900 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   818ee:	79fb      	ldrb	r3, [r7, #7]
   818f0:	4618      	mov	r0, r3
   818f2:	4b05      	ldr	r3, [pc, #20]	; (81908 <pll_enable_source+0x2c>)
   818f4:	4798      	blx	r3
		osc_wait_ready(e_src);
   818f6:	79fb      	ldrb	r3, [r7, #7]
   818f8:	4618      	mov	r0, r3
   818fa:	4b04      	ldr	r3, [pc, #16]	; (8190c <pll_enable_source+0x30>)
   818fc:	4798      	blx	r3
		break;
   818fe:	e000      	b.n	81902 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   81900:	bf00      	nop
	}
}
   81902:	3708      	adds	r7, #8
   81904:	46bd      	mov	sp, r7
   81906:	bd80      	pop	{r7, pc}
   81908:	0008167d 	.word	0x0008167d
   8190c:	000817e1 	.word	0x000817e1

00081910 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   81910:	b580      	push	{r7, lr}
   81912:	b082      	sub	sp, #8
   81914:	af00      	add	r7, sp, #0
   81916:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81918:	bf00      	nop
   8191a:	6878      	ldr	r0, [r7, #4]
   8191c:	4b04      	ldr	r3, [pc, #16]	; (81930 <pll_wait_for_lock+0x20>)
   8191e:	4798      	blx	r3
   81920:	4603      	mov	r3, r0
   81922:	2b00      	cmp	r3, #0
   81924:	d0f9      	beq.n	8191a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   81926:	2300      	movs	r3, #0
}
   81928:	4618      	mov	r0, r3
   8192a:	3708      	adds	r7, #8
   8192c:	46bd      	mov	sp, r7
   8192e:	bd80      	pop	{r7, pc}
   81930:	000818b1 	.word	0x000818b1

00081934 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81934:	b580      	push	{r7, lr}
   81936:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81938:	2006      	movs	r0, #6
   8193a:	4b04      	ldr	r3, [pc, #16]	; (8194c <sysclk_get_main_hz+0x18>)
   8193c:	4798      	blx	r3
   8193e:	4602      	mov	r2, r0
   81940:	4613      	mov	r3, r2
   81942:	00db      	lsls	r3, r3, #3
   81944:	1a9b      	subs	r3, r3, r2
   81946:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81948:	4618      	mov	r0, r3
   8194a:	bd80      	pop	{r7, pc}
   8194c:	0008176d 	.word	0x0008176d

00081950 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81950:	b580      	push	{r7, lr}
   81952:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81954:	4b02      	ldr	r3, [pc, #8]	; (81960 <sysclk_get_cpu_hz+0x10>)
   81956:	4798      	blx	r3
   81958:	4603      	mov	r3, r0
   8195a:	085b      	lsrs	r3, r3, #1
}
   8195c:	4618      	mov	r0, r3
   8195e:	bd80      	pop	{r7, pc}
   81960:	00081935 	.word	0x00081935

00081964 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81964:	b590      	push	{r4, r7, lr}
   81966:	b083      	sub	sp, #12
   81968:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8196a:	4b10      	ldr	r3, [pc, #64]	; (819ac <sysclk_init+0x48>)
   8196c:	4798      	blx	r3
   8196e:	4603      	mov	r3, r0
   81970:	4618      	mov	r0, r3
   81972:	4b0f      	ldr	r3, [pc, #60]	; (819b0 <sysclk_init+0x4c>)
   81974:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   81976:	2006      	movs	r0, #6
   81978:	4b0e      	ldr	r3, [pc, #56]	; (819b4 <sysclk_init+0x50>)
   8197a:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8197c:	1d3b      	adds	r3, r7, #4
   8197e:	4618      	mov	r0, r3
   81980:	2106      	movs	r1, #6
   81982:	2201      	movs	r2, #1
   81984:	230e      	movs	r3, #14
   81986:	4c0c      	ldr	r4, [pc, #48]	; (819b8 <sysclk_init+0x54>)
   81988:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8198a:	1d3b      	adds	r3, r7, #4
   8198c:	4618      	mov	r0, r3
   8198e:	2100      	movs	r1, #0
   81990:	4b0a      	ldr	r3, [pc, #40]	; (819bc <sysclk_init+0x58>)
   81992:	4798      	blx	r3
		pll_wait_for_lock(0);
   81994:	2000      	movs	r0, #0
   81996:	4b0a      	ldr	r3, [pc, #40]	; (819c0 <sysclk_init+0x5c>)
   81998:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8199a:	2010      	movs	r0, #16
   8199c:	4b09      	ldr	r3, [pc, #36]	; (819c4 <sysclk_init+0x60>)
   8199e:	4798      	blx	r3
		break;
   819a0:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   819a2:	4b09      	ldr	r3, [pc, #36]	; (819c8 <sysclk_init+0x64>)
   819a4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   819a6:	370c      	adds	r7, #12
   819a8:	46bd      	mov	sp, r7
   819aa:	bd90      	pop	{r4, r7, pc}
   819ac:	00081951 	.word	0x00081951
   819b0:	00082f3d 	.word	0x00082f3d
   819b4:	000818dd 	.word	0x000818dd
   819b8:	0008180d 	.word	0x0008180d
   819bc:	00081875 	.word	0x00081875
   819c0:	00081911 	.word	0x00081911
   819c4:	000826f5 	.word	0x000826f5
   819c8:	00082dbd 	.word	0x00082dbd

000819cc <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   819cc:	b580      	push	{r7, lr}
   819ce:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   819d0:	4b16      	ldr	r3, [pc, #88]	; (81a2c <safe_board_init+0x60>)
   819d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   819d6:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   819d8:	2001      	movs	r0, #1
   819da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819de:	4b14      	ldr	r3, [pc, #80]	; (81a30 <safe_board_init+0x64>)
   819e0:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   819e2:	2000      	movs	r0, #0
   819e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   819e8:	4b11      	ldr	r3, [pc, #68]	; (81a30 <safe_board_init+0x64>)
   819ea:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   819ec:	2034      	movs	r0, #52	; 0x34
   819ee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   819f2:	4b0f      	ldr	r3, [pc, #60]	; (81a30 <safe_board_init+0x64>)
   819f4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   819f6:	2035      	movs	r0, #53	; 0x35
   819f8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   819fc:	4b0c      	ldr	r3, [pc, #48]	; (81a30 <safe_board_init+0x64>)
   819fe:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   81a00:	202f      	movs	r0, #47	; 0x2f
   81a02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a06:	4b0a      	ldr	r3, [pc, #40]	; (81a30 <safe_board_init+0x64>)
   81a08:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   81a0a:	202e      	movs	r0, #46	; 0x2e
   81a0c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a10:	4b07      	ldr	r3, [pc, #28]	; (81a30 <safe_board_init+0x64>)
   81a12:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   81a14:	208f      	movs	r0, #143	; 0x8f
   81a16:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a1a:	4b05      	ldr	r3, [pc, #20]	; (81a30 <safe_board_init+0x64>)
   81a1c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   81a1e:	2090      	movs	r0, #144	; 0x90
   81a20:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a24:	4b02      	ldr	r3, [pc, #8]	; (81a30 <safe_board_init+0x64>)
   81a26:	4798      	blx	r3
	#endif
	return;
   81a28:	bf00      	nop
}
   81a2a:	bd80      	pop	{r7, pc}
   81a2c:	400e1a50 	.word	0x400e1a50
   81a30:	000823d5 	.word	0x000823d5

00081a34 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   81a34:	b580      	push	{r7, lr}
   81a36:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   81a38:	2057      	movs	r0, #87	; 0x57
   81a3a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81a3e:	4b25      	ldr	r3, [pc, #148]	; (81ad4 <board_init+0xa0>)
   81a40:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   81a42:	2057      	movs	r0, #87	; 0x57
   81a44:	4b24      	ldr	r3, [pc, #144]	; (81ad8 <board_init+0xa4>)
   81a46:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81a48:	203b      	movs	r0, #59	; 0x3b
   81a4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a4e:	4b21      	ldr	r3, [pc, #132]	; (81ad4 <board_init+0xa0>)
   81a50:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81a52:	2055      	movs	r0, #85	; 0x55
   81a54:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a58:	4b1e      	ldr	r3, [pc, #120]	; (81ad4 <board_init+0xa0>)
   81a5a:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81a5c:	2056      	movs	r0, #86	; 0x56
   81a5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81a62:	4b1c      	ldr	r3, [pc, #112]	; (81ad4 <board_init+0xa0>)
   81a64:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81a66:	2087      	movs	r0, #135	; 0x87
   81a68:	491c      	ldr	r1, [pc, #112]	; (81adc <board_init+0xa8>)
   81a6a:	4b1a      	ldr	r3, [pc, #104]	; (81ad4 <board_init+0xa0>)
   81a6c:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81a6e:	2037      	movs	r0, #55	; 0x37
   81a70:	491b      	ldr	r1, [pc, #108]	; (81ae0 <board_init+0xac>)
   81a72:	4b18      	ldr	r3, [pc, #96]	; (81ad4 <board_init+0xa0>)
   81a74:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81a76:	481b      	ldr	r0, [pc, #108]	; (81ae4 <board_init+0xb0>)
   81a78:	f44f 7140 	mov.w	r1, #768	; 0x300
   81a7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81a80:	4b19      	ldr	r3, [pc, #100]	; (81ae8 <board_init+0xb4>)
   81a82:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81a84:	2019      	movs	r0, #25
   81a86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a8a:	4b12      	ldr	r3, [pc, #72]	; (81ad4 <board_init+0xa0>)
   81a8c:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81a8e:	201a      	movs	r0, #26
   81a90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a94:	4b0f      	ldr	r3, [pc, #60]	; (81ad4 <board_init+0xa0>)
   81a96:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81a98:	201b      	movs	r0, #27
   81a9a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81a9e:	4b0d      	ldr	r3, [pc, #52]	; (81ad4 <board_init+0xa0>)
   81aa0:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81aa2:	201c      	movs	r0, #28
   81aa4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81aa8:	4b0a      	ldr	r3, [pc, #40]	; (81ad4 <board_init+0xa0>)
   81aaa:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   81aac:	200a      	movs	r0, #10
   81aae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ab2:	4b08      	ldr	r3, [pc, #32]	; (81ad4 <board_init+0xa0>)
   81ab4:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   81ab6:	200b      	movs	r0, #11
   81ab8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81abc:	4b05      	ldr	r3, [pc, #20]	; (81ad4 <board_init+0xa0>)
   81abe:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   81ac0:	208e      	movs	r0, #142	; 0x8e
   81ac2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81ac6:	4b03      	ldr	r3, [pc, #12]	; (81ad4 <board_init+0xa0>)
   81ac8:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   81aca:	208e      	movs	r0, #142	; 0x8e
   81acc:	4b07      	ldr	r3, [pc, #28]	; (81aec <board_init+0xb8>)
   81ace:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   81ad0:	bd80      	pop	{r7, pc}
   81ad2:	bf00      	nop
   81ad4:	000823d5 	.word	0x000823d5
   81ad8:	0008230d 	.word	0x0008230d
   81adc:	28000079 	.word	0x28000079
   81ae0:	28000059 	.word	0x28000059
   81ae4:	400e0e00 	.word	0x400e0e00
   81ae8:	00082511 	.word	0x00082511
   81aec:	00082341 	.word	0x00082341

00081af0 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81af0:	b480      	push	{r7}
   81af2:	b083      	sub	sp, #12
   81af4:	af00      	add	r7, sp, #0
   81af6:	6078      	str	r0, [r7, #4]
   81af8:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   81afa:	687b      	ldr	r3, [r7, #4]
   81afc:	683a      	ldr	r2, [r7, #0]
   81afe:	601a      	str	r2, [r3, #0]
}
   81b00:	370c      	adds	r7, #12
   81b02:	46bd      	mov	sp, r7
   81b04:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b08:	4770      	bx	lr
   81b0a:	bf00      	nop

00081b0c <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81b0c:	b480      	push	{r7}
   81b0e:	b083      	sub	sp, #12
   81b10:	af00      	add	r7, sp, #0
   81b12:	6078      	str	r0, [r7, #4]
   81b14:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   81b16:	687b      	ldr	r3, [r7, #4]
   81b18:	683a      	ldr	r2, [r7, #0]
   81b1a:	605a      	str	r2, [r3, #4]
}
   81b1c:	370c      	adds	r7, #12
   81b1e:	46bd      	mov	sp, r7
   81b20:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b24:	4770      	bx	lr
   81b26:	bf00      	nop

00081b28 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   81b28:	b580      	push	{r7, lr}
   81b2a:	b082      	sub	sp, #8
   81b2c:	af00      	add	r7, sp, #0
   81b2e:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   81b30:	687b      	ldr	r3, [r7, #4]
   81b32:	685b      	ldr	r3, [r3, #4]
   81b34:	4618      	mov	r0, r3
   81b36:	4b02      	ldr	r3, [pc, #8]	; (81b40 <sn65hvd234_enable+0x18>)
   81b38:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   81b3a:	3708      	adds	r7, #8
   81b3c:	46bd      	mov	sp, r7
   81b3e:	bd80      	pop	{r7, pc}
   81b40:	0008230d 	.word	0x0008230d

00081b44 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   81b44:	b580      	push	{r7, lr}
   81b46:	b082      	sub	sp, #8
   81b48:	af00      	add	r7, sp, #0
   81b4a:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   81b4c:	687b      	ldr	r3, [r7, #4]
   81b4e:	681b      	ldr	r3, [r3, #0]
   81b50:	4618      	mov	r0, r3
   81b52:	4b02      	ldr	r3, [pc, #8]	; (81b5c <sn65hvd234_disable_low_power+0x18>)
   81b54:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   81b56:	3708      	adds	r7, #8
   81b58:	46bd      	mov	sp, r7
   81b5a:	bd80      	pop	{r7, pc}
   81b5c:	00082341 	.word	0x00082341

00081b60 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   81b60:	b580      	push	{r7, lr}
   81b62:	b08a      	sub	sp, #40	; 0x28
   81b64:	af00      	add	r7, sp, #0
   81b66:	60f8      	str	r0, [r7, #12]
   81b68:	60b9      	str	r1, [r7, #8]
   81b6a:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81b6c:	687b      	ldr	r3, [r7, #4]
   81b6e:	f246 12a8 	movw	r2, #25000	; 0x61a8
   81b72:	fb02 f203 	mul.w	r2, r2, r3
   81b76:	68bb      	ldr	r3, [r7, #8]
   81b78:	4413      	add	r3, r2
   81b7a:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   81b7c:	687b      	ldr	r3, [r7, #4]
   81b7e:	f246 11a8 	movw	r1, #25000	; 0x61a8
   81b82:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81b86:	fbb2 f3f3 	udiv	r3, r2, r3
   81b8a:	2b80      	cmp	r3, #128	; 0x80
   81b8c:	d901      	bls.n	81b92 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   81b8e:	2300      	movs	r3, #0
   81b90:	e085      	b.n	81c9e <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   81b92:	68bb      	ldr	r3, [r7, #8]
   81b94:	085a      	lsrs	r2, r3, #1
   81b96:	687b      	ldr	r3, [r7, #4]
   81b98:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81b9c:	fb01 f303 	mul.w	r3, r1, r3
   81ba0:	429a      	cmp	r2, r3
   81ba2:	d201      	bcs.n	81ba8 <can_set_baudrate+0x48>
		return 0;
   81ba4:	2300      	movs	r3, #0
   81ba6:	e07a      	b.n	81c9e <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   81ba8:	2308      	movs	r3, #8
   81baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   81bae:	f04f 33ff 	mov.w	r3, #4294967295
   81bb2:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81bb4:	2308      	movs	r3, #8
   81bb6:	77fb      	strb	r3, [r7, #31]
   81bb8:	e02b      	b.n	81c12 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   81bba:	7ffb      	ldrb	r3, [r7, #31]
   81bbc:	687a      	ldr	r2, [r7, #4]
   81bbe:	fb02 f303 	mul.w	r3, r2, r3
   81bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81bc6:	fb02 f303 	mul.w	r3, r2, r3
   81bca:	68ba      	ldr	r2, [r7, #8]
   81bcc:	fbb2 f3f3 	udiv	r3, r2, r3
   81bd0:	2b80      	cmp	r3, #128	; 0x80
   81bd2:	d81b      	bhi.n	81c0c <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   81bd4:	7ffb      	ldrb	r3, [r7, #31]
   81bd6:	687a      	ldr	r2, [r7, #4]
   81bd8:	fb02 f303 	mul.w	r3, r2, r3
   81bdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81be0:	fb02 f203 	mul.w	r2, r2, r3
   81be4:	68bb      	ldr	r3, [r7, #8]
   81be6:	fbb3 f1f2 	udiv	r1, r3, r2
   81bea:	fb02 f201 	mul.w	r2, r2, r1
   81bee:	1a9b      	subs	r3, r3, r2
   81bf0:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   81bf2:	69ba      	ldr	r2, [r7, #24]
   81bf4:	6a3b      	ldr	r3, [r7, #32]
   81bf6:	429a      	cmp	r2, r3
   81bf8:	d208      	bcs.n	81c0c <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   81bfa:	69bb      	ldr	r3, [r7, #24]
   81bfc:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   81bfe:	7ffb      	ldrb	r3, [r7, #31]
   81c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   81c04:	6a3b      	ldr	r3, [r7, #32]
   81c06:	2b00      	cmp	r3, #0
   81c08:	d100      	bne.n	81c0c <can_set_baudrate+0xac>
					break;
   81c0a:	e005      	b.n	81c18 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81c0c:	7ffb      	ldrb	r3, [r7, #31]
   81c0e:	3301      	adds	r3, #1
   81c10:	77fb      	strb	r3, [r7, #31]
   81c12:	7ffb      	ldrb	r3, [r7, #31]
   81c14:	2b19      	cmp	r3, #25
   81c16:	d9d0      	bls.n	81bba <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   81c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81c1c:	687a      	ldr	r2, [r7, #4]
   81c1e:	fb02 f303 	mul.w	r3, r2, r3
   81c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81c26:	fb02 f303 	mul.w	r3, r2, r3
   81c2a:	68ba      	ldr	r2, [r7, #8]
   81c2c:	fbb2 f3f3 	udiv	r3, r2, r3
   81c30:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   81c32:	7dfb      	ldrb	r3, [r7, #23]
   81c34:	2b01      	cmp	r3, #1
   81c36:	d801      	bhi.n	81c3c <can_set_baudrate+0xdc>
		return 0;
   81c38:	2300      	movs	r3, #0
   81c3a:	e030      	b.n	81c9e <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   81c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81c40:	f1a3 0208 	sub.w	r2, r3, #8
   81c44:	4613      	mov	r3, r2
   81c46:	005b      	lsls	r3, r3, #1
   81c48:	4413      	add	r3, r2
   81c4a:	005b      	lsls	r3, r3, #1
   81c4c:	4a16      	ldr	r2, [pc, #88]	; (81ca8 <can_set_baudrate+0x148>)
   81c4e:	4413      	add	r3, r2
   81c50:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81c52:	68f8      	ldr	r0, [r7, #12]
   81c54:	4b15      	ldr	r3, [pc, #84]	; (81cac <can_set_baudrate+0x14c>)
   81c56:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81c58:	693b      	ldr	r3, [r7, #16]
   81c5a:	78db      	ldrb	r3, [r3, #3]
   81c5c:	3b01      	subs	r3, #1
   81c5e:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81c62:	693b      	ldr	r3, [r7, #16]
   81c64:	789b      	ldrb	r3, [r3, #2]
   81c66:	3b01      	subs	r3, #1
   81c68:	011b      	lsls	r3, r3, #4
   81c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81c6e:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81c70:	693b      	ldr	r3, [r7, #16]
   81c72:	785b      	ldrb	r3, [r3, #1]
   81c74:	3b01      	subs	r3, #1
   81c76:	021b      	lsls	r3, r3, #8
   81c78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81c7c:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81c7e:	693b      	ldr	r3, [r7, #16]
   81c80:	791b      	ldrb	r3, [r3, #4]
   81c82:	3b01      	subs	r3, #1
   81c84:	031b      	lsls	r3, r3, #12
   81c86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81c8a:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81c8c:	7dfb      	ldrb	r3, [r7, #23]
   81c8e:	3b01      	subs	r3, #1
   81c90:	041b      	lsls	r3, r3, #16
   81c92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81c96:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81c98:	68fb      	ldr	r3, [r7, #12]
   81c9a:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81c9c:	2301      	movs	r3, #1
}
   81c9e:	4618      	mov	r0, r3
   81ca0:	3728      	adds	r7, #40	; 0x28
   81ca2:	46bd      	mov	sp, r7
   81ca4:	bd80      	pop	{r7, pc}
   81ca6:	bf00      	nop
   81ca8:	00086ed0 	.word	0x00086ed0
   81cac:	00081d59 	.word	0x00081d59

00081cb0 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81cb0:	b580      	push	{r7, lr}
   81cb2:	b086      	sub	sp, #24
   81cb4:	af00      	add	r7, sp, #0
   81cb6:	60f8      	str	r0, [r7, #12]
   81cb8:	60b9      	str	r1, [r7, #8]
   81cba:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   81cbc:	68f8      	ldr	r0, [r7, #12]
   81cbe:	68b9      	ldr	r1, [r7, #8]
   81cc0:	687a      	ldr	r2, [r7, #4]
   81cc2:	4b17      	ldr	r3, [pc, #92]	; (81d20 <can_init+0x70>)
   81cc4:	4798      	blx	r3
   81cc6:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   81cc8:	697b      	ldr	r3, [r7, #20]
   81cca:	2b00      	cmp	r3, #0
   81ccc:	d101      	bne.n	81cd2 <can_init+0x22>
		return 0;
   81cce:	2300      	movs	r3, #0
   81cd0:	e021      	b.n	81d16 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81cd2:	68f8      	ldr	r0, [r7, #12]
   81cd4:	4b13      	ldr	r3, [pc, #76]	; (81d24 <can_init+0x74>)
   81cd6:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   81cd8:	68f8      	ldr	r0, [r7, #12]
   81cda:	4b13      	ldr	r3, [pc, #76]	; (81d28 <can_init+0x78>)
   81cdc:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   81cde:	2300      	movs	r3, #0
   81ce0:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   81ce2:	2300      	movs	r3, #0
   81ce4:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81ce6:	e006      	b.n	81cf6 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   81ce8:	68f8      	ldr	r0, [r7, #12]
   81cea:	4b10      	ldr	r3, [pc, #64]	; (81d2c <can_init+0x7c>)
   81cec:	4798      	blx	r3
   81cee:	6178      	str	r0, [r7, #20]
		ul_tick++;
   81cf0:	693b      	ldr	r3, [r7, #16]
   81cf2:	3301      	adds	r3, #1
   81cf4:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81cf6:	697b      	ldr	r3, [r7, #20]
   81cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   81cfc:	2b00      	cmp	r3, #0
   81cfe:	d103      	bne.n	81d08 <can_init+0x58>
   81d00:	693a      	ldr	r2, [r7, #16]
   81d02:	4b0b      	ldr	r3, [pc, #44]	; (81d30 <can_init+0x80>)
   81d04:	429a      	cmp	r2, r3
   81d06:	d9ef      	bls.n	81ce8 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   81d08:	693a      	ldr	r2, [r7, #16]
   81d0a:	4b0a      	ldr	r3, [pc, #40]	; (81d34 <can_init+0x84>)
   81d0c:	429a      	cmp	r2, r3
   81d0e:	d101      	bne.n	81d14 <can_init+0x64>
		return 0;
   81d10:	2300      	movs	r3, #0
   81d12:	e000      	b.n	81d16 <can_init+0x66>
	} else {
		return 1;
   81d14:	2301      	movs	r3, #1
	}
}
   81d16:	4618      	mov	r0, r3
   81d18:	3718      	adds	r7, #24
   81d1a:	46bd      	mov	sp, r7
   81d1c:	bd80      	pop	{r7, pc}
   81d1e:	bf00      	nop
   81d20:	00081b61 	.word	0x00081b61
   81d24:	000820f1 	.word	0x000820f1
   81d28:	00081d39 	.word	0x00081d39
   81d2c:	00081db1 	.word	0x00081db1
   81d30:	0001869f 	.word	0x0001869f
   81d34:	000186a0 	.word	0x000186a0

00081d38 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   81d38:	b480      	push	{r7}
   81d3a:	b083      	sub	sp, #12
   81d3c:	af00      	add	r7, sp, #0
   81d3e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81d40:	687b      	ldr	r3, [r7, #4]
   81d42:	681b      	ldr	r3, [r3, #0]
   81d44:	f043 0201 	orr.w	r2, r3, #1
   81d48:	687b      	ldr	r3, [r7, #4]
   81d4a:	601a      	str	r2, [r3, #0]
}
   81d4c:	370c      	adds	r7, #12
   81d4e:	46bd      	mov	sp, r7
   81d50:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d54:	4770      	bx	lr
   81d56:	bf00      	nop

00081d58 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81d58:	b480      	push	{r7}
   81d5a:	b083      	sub	sp, #12
   81d5c:	af00      	add	r7, sp, #0
   81d5e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	681b      	ldr	r3, [r3, #0]
   81d64:	f023 0201 	bic.w	r2, r3, #1
   81d68:	687b      	ldr	r3, [r7, #4]
   81d6a:	601a      	str	r2, [r3, #0]
}
   81d6c:	370c      	adds	r7, #12
   81d6e:	46bd      	mov	sp, r7
   81d70:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d74:	4770      	bx	lr
   81d76:	bf00      	nop

00081d78 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81d78:	b480      	push	{r7}
   81d7a:	b083      	sub	sp, #12
   81d7c:	af00      	add	r7, sp, #0
   81d7e:	6078      	str	r0, [r7, #4]
   81d80:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   81d82:	687b      	ldr	r3, [r7, #4]
   81d84:	683a      	ldr	r2, [r7, #0]
   81d86:	605a      	str	r2, [r3, #4]
}
   81d88:	370c      	adds	r7, #12
   81d8a:	46bd      	mov	sp, r7
   81d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d90:	4770      	bx	lr
   81d92:	bf00      	nop

00081d94 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81d94:	b480      	push	{r7}
   81d96:	b083      	sub	sp, #12
   81d98:	af00      	add	r7, sp, #0
   81d9a:	6078      	str	r0, [r7, #4]
   81d9c:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81d9e:	687b      	ldr	r3, [r7, #4]
   81da0:	683a      	ldr	r2, [r7, #0]
   81da2:	609a      	str	r2, [r3, #8]
}
   81da4:	370c      	adds	r7, #12
   81da6:	46bd      	mov	sp, r7
   81da8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dac:	4770      	bx	lr
   81dae:	bf00      	nop

00081db0 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81db0:	b480      	push	{r7}
   81db2:	b083      	sub	sp, #12
   81db4:	af00      	add	r7, sp, #0
   81db6:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   81db8:	687b      	ldr	r3, [r7, #4]
   81dba:	691b      	ldr	r3, [r3, #16]
}
   81dbc:	4618      	mov	r0, r3
   81dbe:	370c      	adds	r7, #12
   81dc0:	46bd      	mov	sp, r7
   81dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dc6:	4770      	bx	lr

00081dc8 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   81dc8:	b480      	push	{r7}
   81dca:	b085      	sub	sp, #20
   81dcc:	af00      	add	r7, sp, #0
   81dce:	6078      	str	r0, [r7, #4]
   81dd0:	460b      	mov	r3, r1
   81dd2:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   81dd4:	687b      	ldr	r3, [r7, #4]
   81dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81dd8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81ddc:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   81dde:	78fa      	ldrb	r2, [r7, #3]
   81de0:	68fb      	ldr	r3, [r7, #12]
   81de2:	431a      	orrs	r2, r3
   81de4:	687b      	ldr	r3, [r7, #4]
   81de6:	625a      	str	r2, [r3, #36]	; 0x24
}
   81de8:	3714      	adds	r7, #20
   81dea:	46bd      	mov	sp, r7
   81dec:	f85d 7b04 	ldr.w	r7, [sp], #4
   81df0:	4770      	bx	lr
   81df2:	bf00      	nop

00081df4 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   81df4:	b480      	push	{r7}
   81df6:	b083      	sub	sp, #12
   81df8:	af00      	add	r7, sp, #0
   81dfa:	6078      	str	r0, [r7, #4]
   81dfc:	460b      	mov	r3, r1
   81dfe:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   81e00:	78fb      	ldrb	r3, [r7, #3]
   81e02:	687a      	ldr	r2, [r7, #4]
   81e04:	015b      	lsls	r3, r3, #5
   81e06:	4413      	add	r3, r2
   81e08:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81e0c:	681b      	ldr	r3, [r3, #0]
}
   81e0e:	4618      	mov	r0, r3
   81e10:	370c      	adds	r7, #12
   81e12:	46bd      	mov	sp, r7
   81e14:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e18:	4770      	bx	lr
   81e1a:	bf00      	nop

00081e1c <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81e1c:	b480      	push	{r7}
   81e1e:	b085      	sub	sp, #20
   81e20:	af00      	add	r7, sp, #0
   81e22:	6078      	str	r0, [r7, #4]
   81e24:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81e26:	683b      	ldr	r3, [r7, #0]
   81e28:	681b      	ldr	r3, [r3, #0]
   81e2a:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81e2c:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   81e2e:	683a      	ldr	r2, [r7, #0]
   81e30:	7992      	ldrb	r2, [r2, #6]
   81e32:	0412      	lsls	r2, r2, #16
   81e34:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81e38:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81e3c:	6879      	ldr	r1, [r7, #4]
   81e3e:	015b      	lsls	r3, r3, #5
   81e40:	440b      	add	r3, r1
   81e42:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81e46:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   81e48:	3714      	adds	r7, #20
   81e4a:	46bd      	mov	sp, r7
   81e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e50:	4770      	bx	lr
   81e52:	bf00      	nop

00081e54 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81e54:	b480      	push	{r7}
   81e56:	b085      	sub	sp, #20
   81e58:	af00      	add	r7, sp, #0
   81e5a:	6078      	str	r0, [r7, #4]
   81e5c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81e5e:	683b      	ldr	r3, [r7, #0]
   81e60:	681b      	ldr	r3, [r3, #0]
   81e62:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81e64:	683b      	ldr	r3, [r7, #0]
   81e66:	791b      	ldrb	r3, [r3, #4]
   81e68:	2b00      	cmp	r3, #0
   81e6a:	d12e      	bne.n	81eca <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81e6c:	7bfb      	ldrb	r3, [r7, #15]
   81e6e:	687a      	ldr	r2, [r7, #4]
   81e70:	3310      	adds	r3, #16
   81e72:	015b      	lsls	r3, r3, #5
   81e74:	4413      	add	r3, r2
   81e76:	2200      	movs	r2, #0
   81e78:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   81e7a:	7bfb      	ldrb	r3, [r7, #15]
   81e7c:	687a      	ldr	r2, [r7, #4]
   81e7e:	3310      	adds	r3, #16
   81e80:	015b      	lsls	r3, r3, #5
   81e82:	4413      	add	r3, r2
   81e84:	2200      	movs	r2, #0
   81e86:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81e88:	7bfb      	ldrb	r3, [r7, #15]
   81e8a:	687a      	ldr	r2, [r7, #4]
   81e8c:	015b      	lsls	r3, r3, #5
   81e8e:	4413      	add	r3, r2
   81e90:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81e94:	2200      	movs	r2, #0
   81e96:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81e98:	7bfb      	ldrb	r3, [r7, #15]
   81e9a:	687a      	ldr	r2, [r7, #4]
   81e9c:	015b      	lsls	r3, r3, #5
   81e9e:	4413      	add	r3, r2
   81ea0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81ea4:	2200      	movs	r2, #0
   81ea6:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81ea8:	7bfb      	ldrb	r3, [r7, #15]
   81eaa:	687a      	ldr	r2, [r7, #4]
   81eac:	015b      	lsls	r3, r3, #5
   81eae:	4413      	add	r3, r2
   81eb0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81eb4:	2200      	movs	r2, #0
   81eb6:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81eb8:	7bfb      	ldrb	r3, [r7, #15]
   81eba:	687a      	ldr	r2, [r7, #4]
   81ebc:	015b      	lsls	r3, r3, #5
   81ebe:	4413      	add	r3, r2
   81ec0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ec4:	2200      	movs	r2, #0
   81ec6:	605a      	str	r2, [r3, #4]
		return;
   81ec8:	e04e      	b.n	81f68 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81eca:	7bfb      	ldrb	r3, [r7, #15]
   81ecc:	7bfa      	ldrb	r2, [r7, #15]
   81ece:	6879      	ldr	r1, [r7, #4]
   81ed0:	3210      	adds	r2, #16
   81ed2:	0152      	lsls	r2, r2, #5
   81ed4:	440a      	add	r2, r1
   81ed6:	6812      	ldr	r2, [r2, #0]
   81ed8:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81edc:	683a      	ldr	r2, [r7, #0]
   81ede:	79d2      	ldrb	r2, [r2, #7]
   81ee0:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   81ee2:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81ee4:	6879      	ldr	r1, [r7, #4]
   81ee6:	3310      	adds	r3, #16
   81ee8:	015b      	lsls	r3, r3, #5
   81eea:	440b      	add	r3, r1
   81eec:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81eee:	683b      	ldr	r3, [r7, #0]
   81ef0:	795b      	ldrb	r3, [r3, #5]
   81ef2:	2b00      	cmp	r3, #0
   81ef4:	d015      	beq.n	81f22 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   81ef6:	7bfb      	ldrb	r3, [r7, #15]
   81ef8:	683a      	ldr	r2, [r7, #0]
   81efa:	68d2      	ldr	r2, [r2, #12]
   81efc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81f00:	6879      	ldr	r1, [r7, #4]
   81f02:	3310      	adds	r3, #16
   81f04:	015b      	lsls	r3, r3, #5
   81f06:	440b      	add	r3, r1
   81f08:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81f0a:	7bfb      	ldrb	r3, [r7, #15]
   81f0c:	683a      	ldr	r2, [r7, #0]
   81f0e:	6912      	ldr	r2, [r2, #16]
   81f10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81f14:	6879      	ldr	r1, [r7, #4]
   81f16:	015b      	lsls	r3, r3, #5
   81f18:	440b      	add	r3, r1
   81f1a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81f1e:	601a      	str	r2, [r3, #0]
   81f20:	e010      	b.n	81f44 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81f22:	7bfb      	ldrb	r3, [r7, #15]
   81f24:	683a      	ldr	r2, [r7, #0]
   81f26:	68d2      	ldr	r2, [r2, #12]
   81f28:	6879      	ldr	r1, [r7, #4]
   81f2a:	3310      	adds	r3, #16
   81f2c:	015b      	lsls	r3, r3, #5
   81f2e:	440b      	add	r3, r1
   81f30:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81f32:	7bfb      	ldrb	r3, [r7, #15]
   81f34:	683a      	ldr	r2, [r7, #0]
   81f36:	6912      	ldr	r2, [r2, #16]
   81f38:	6879      	ldr	r1, [r7, #4]
   81f3a:	015b      	lsls	r3, r3, #5
   81f3c:	440b      	add	r3, r1
   81f3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81f42:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81f44:	7bfb      	ldrb	r3, [r7, #15]
   81f46:	7bfa      	ldrb	r2, [r7, #15]
   81f48:	6879      	ldr	r1, [r7, #4]
   81f4a:	3210      	adds	r2, #16
   81f4c:	0152      	lsls	r2, r2, #5
   81f4e:	440a      	add	r2, r1
   81f50:	6812      	ldr	r2, [r2, #0]
   81f52:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81f56:	683a      	ldr	r2, [r7, #0]
   81f58:	7912      	ldrb	r2, [r2, #4]
   81f5a:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81f5c:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81f5e:	6879      	ldr	r1, [r7, #4]
   81f60:	3310      	adds	r3, #16
   81f62:	015b      	lsls	r3, r3, #5
   81f64:	440b      	add	r3, r1
   81f66:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81f68:	3714      	adds	r7, #20
   81f6a:	46bd      	mov	sp, r7
   81f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f70:	4770      	bx	lr
   81f72:	bf00      	nop

00081f74 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81f74:	b580      	push	{r7, lr}
   81f76:	b086      	sub	sp, #24
   81f78:	af00      	add	r7, sp, #0
   81f7a:	6078      	str	r0, [r7, #4]
   81f7c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81f7e:	2300      	movs	r3, #0
   81f80:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81f82:	683b      	ldr	r3, [r7, #0]
   81f84:	681b      	ldr	r3, [r3, #0]
   81f86:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81f88:	683b      	ldr	r3, [r7, #0]
   81f8a:	689b      	ldr	r3, [r3, #8]
   81f8c:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81f8e:	68fb      	ldr	r3, [r7, #12]
   81f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81f94:	2b00      	cmp	r3, #0
   81f96:	d006      	beq.n	81fa6 <can_mailbox_read+0x32>
   81f98:	68fb      	ldr	r3, [r7, #12]
   81f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81f9e:	2b00      	cmp	r3, #0
   81fa0:	d001      	beq.n	81fa6 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81fa2:	2302      	movs	r3, #2
   81fa4:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81fa6:	7cfb      	ldrb	r3, [r7, #19]
   81fa8:	687a      	ldr	r2, [r7, #4]
   81faa:	015b      	lsls	r3, r3, #5
   81fac:	4413      	add	r3, r2
   81fae:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81fb2:	685b      	ldr	r3, [r3, #4]
   81fb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81fb8:	683b      	ldr	r3, [r7, #0]
   81fba:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81fbc:	68fb      	ldr	r3, [r7, #12]
   81fbe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81fc2:	0c1b      	lsrs	r3, r3, #16
   81fc4:	b2da      	uxtb	r2, r3
   81fc6:	683b      	ldr	r3, [r7, #0]
   81fc8:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81fca:	7cfb      	ldrb	r3, [r7, #19]
   81fcc:	687a      	ldr	r2, [r7, #4]
   81fce:	015b      	lsls	r3, r3, #5
   81fd0:	4413      	add	r3, r2
   81fd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81fd6:	685a      	ldr	r2, [r3, #4]
   81fd8:	683b      	ldr	r3, [r7, #0]
   81fda:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81fdc:	683b      	ldr	r3, [r7, #0]
   81fde:	799b      	ldrb	r3, [r3, #6]
   81fe0:	2b04      	cmp	r3, #4
   81fe2:	d908      	bls.n	81ff6 <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81fe4:	7cfb      	ldrb	r3, [r7, #19]
   81fe6:	687a      	ldr	r2, [r7, #4]
   81fe8:	015b      	lsls	r3, r3, #5
   81fea:	4413      	add	r3, r2
   81fec:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ff0:	681a      	ldr	r2, [r3, #0]
   81ff2:	683b      	ldr	r3, [r7, #0]
   81ff4:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81ff6:	7cfb      	ldrb	r3, [r7, #19]
   81ff8:	687a      	ldr	r2, [r7, #4]
   81ffa:	015b      	lsls	r3, r3, #5
   81ffc:	4413      	add	r3, r2
   81ffe:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82002:	681a      	ldr	r2, [r3, #0]
   82004:	683b      	ldr	r3, [r7, #0]
   82006:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   82008:	683b      	ldr	r3, [r7, #0]
   8200a:	689b      	ldr	r3, [r3, #8]
   8200c:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   8200e:	68fb      	ldr	r3, [r7, #12]
   82010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82014:	2b00      	cmp	r3, #0
   82016:	d003      	beq.n	82020 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   82018:	697b      	ldr	r3, [r7, #20]
   8201a:	f043 0304 	orr.w	r3, r3, #4
   8201e:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   82020:	6878      	ldr	r0, [r7, #4]
   82022:	6839      	ldr	r1, [r7, #0]
   82024:	4b03      	ldr	r3, [pc, #12]	; (82034 <can_mailbox_read+0xc0>)
   82026:	4798      	blx	r3

	return ul_retval;
   82028:	697b      	ldr	r3, [r7, #20]
}
   8202a:	4618      	mov	r0, r3
   8202c:	3718      	adds	r7, #24
   8202e:	46bd      	mov	sp, r7
   82030:	bd80      	pop	{r7, pc}
   82032:	bf00      	nop
   82034:	00081e1d 	.word	0x00081e1d

00082038 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   82038:	b580      	push	{r7, lr}
   8203a:	b084      	sub	sp, #16
   8203c:	af00      	add	r7, sp, #0
   8203e:	6078      	str	r0, [r7, #4]
   82040:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   82042:	683b      	ldr	r3, [r7, #0]
   82044:	681b      	ldr	r3, [r3, #0]
   82046:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   82048:	7bfb      	ldrb	r3, [r7, #15]
   8204a:	6878      	ldr	r0, [r7, #4]
   8204c:	4619      	mov	r1, r3
   8204e:	4b27      	ldr	r3, [pc, #156]	; (820ec <can_mailbox_write+0xb4>)
   82050:	4798      	blx	r3
   82052:	4602      	mov	r2, r0
   82054:	683b      	ldr	r3, [r7, #0]
   82056:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   82058:	683b      	ldr	r3, [r7, #0]
   8205a:	689b      	ldr	r3, [r3, #8]
   8205c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   8205e:	68bb      	ldr	r3, [r7, #8]
   82060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   82064:	2b00      	cmp	r3, #0
   82066:	d101      	bne.n	8206c <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   82068:	2301      	movs	r3, #1
   8206a:	e03b      	b.n	820e4 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   8206c:	683b      	ldr	r3, [r7, #0]
   8206e:	795b      	ldrb	r3, [r3, #5]
   82070:	2b00      	cmp	r3, #0
   82072:	d00b      	beq.n	8208c <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   82074:	7bfb      	ldrb	r3, [r7, #15]
   82076:	683a      	ldr	r2, [r7, #0]
   82078:	6912      	ldr	r2, [r2, #16]
   8207a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8207e:	6879      	ldr	r1, [r7, #4]
   82080:	015b      	lsls	r3, r3, #5
   82082:	440b      	add	r3, r1
   82084:	f503 7302 	add.w	r3, r3, #520	; 0x208
   82088:	601a      	str	r2, [r3, #0]
   8208a:	e008      	b.n	8209e <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   8208c:	7bfb      	ldrb	r3, [r7, #15]
   8208e:	683a      	ldr	r2, [r7, #0]
   82090:	6912      	ldr	r2, [r2, #16]
   82092:	6879      	ldr	r1, [r7, #4]
   82094:	015b      	lsls	r3, r3, #5
   82096:	440b      	add	r3, r1
   82098:	f503 7302 	add.w	r3, r3, #520	; 0x208
   8209c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   8209e:	7bfb      	ldrb	r3, [r7, #15]
   820a0:	683a      	ldr	r2, [r7, #0]
   820a2:	6992      	ldr	r2, [r2, #24]
   820a4:	6879      	ldr	r1, [r7, #4]
   820a6:	015b      	lsls	r3, r3, #5
   820a8:	440b      	add	r3, r1
   820aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
   820ae:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   820b0:	683b      	ldr	r3, [r7, #0]
   820b2:	799b      	ldrb	r3, [r3, #6]
   820b4:	2b04      	cmp	r3, #4
   820b6:	d908      	bls.n	820ca <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   820b8:	7bfb      	ldrb	r3, [r7, #15]
   820ba:	683a      	ldr	r2, [r7, #0]
   820bc:	69d2      	ldr	r2, [r2, #28]
   820be:	6879      	ldr	r1, [r7, #4]
   820c0:	015b      	lsls	r3, r3, #5
   820c2:	440b      	add	r3, r1
   820c4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   820c8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   820ca:	7bfb      	ldrb	r3, [r7, #15]
   820cc:	683a      	ldr	r2, [r7, #0]
   820ce:	7992      	ldrb	r2, [r2, #6]
   820d0:	0412      	lsls	r2, r2, #16
   820d2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   820d6:	6879      	ldr	r1, [r7, #4]
   820d8:	015b      	lsls	r3, r3, #5
   820da:	440b      	add	r3, r1
   820dc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   820e0:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   820e2:	2300      	movs	r3, #0
}
   820e4:	4618      	mov	r0, r3
   820e6:	3710      	adds	r7, #16
   820e8:	46bd      	mov	sp, r7
   820ea:	bd80      	pop	{r7, pc}
   820ec:	00081df5 	.word	0x00081df5

000820f0 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   820f0:	b580      	push	{r7, lr}
   820f2:	b08c      	sub	sp, #48	; 0x30
   820f4:	af00      	add	r7, sp, #0
   820f6:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   820f8:	2300      	movs	r3, #0
   820fa:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   820fc:	2300      	movs	r3, #0
   820fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   82102:	e00d      	b.n	82120 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   82104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82108:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   8210a:	f107 030c 	add.w	r3, r7, #12
   8210e:	6878      	ldr	r0, [r7, #4]
   82110:	4619      	mov	r1, r3
   82112:	4b07      	ldr	r3, [pc, #28]	; (82130 <can_reset_all_mailbox+0x40>)
   82114:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   82116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8211a:	3301      	adds	r3, #1
   8211c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   82120:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82124:	2b07      	cmp	r3, #7
   82126:	d9ed      	bls.n	82104 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   82128:	3730      	adds	r7, #48	; 0x30
   8212a:	46bd      	mov	sp, r7
   8212c:	bd80      	pop	{r7, pc}
   8212e:	bf00      	nop
   82130:	00081e55 	.word	0x00081e55

00082134 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82134:	b480      	push	{r7}
   82136:	b085      	sub	sp, #20
   82138:	af00      	add	r7, sp, #0
   8213a:	60f8      	str	r0, [r7, #12]
   8213c:	60b9      	str	r1, [r7, #8]
   8213e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82140:	687b      	ldr	r3, [r7, #4]
   82142:	2b00      	cmp	r3, #0
   82144:	d003      	beq.n	8214e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82146:	68fb      	ldr	r3, [r7, #12]
   82148:	68ba      	ldr	r2, [r7, #8]
   8214a:	665a      	str	r2, [r3, #100]	; 0x64
   8214c:	e002      	b.n	82154 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8214e:	68fb      	ldr	r3, [r7, #12]
   82150:	68ba      	ldr	r2, [r7, #8]
   82152:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82154:	3714      	adds	r7, #20
   82156:	46bd      	mov	sp, r7
   82158:	f85d 7b04 	ldr.w	r7, [sp], #4
   8215c:	4770      	bx	lr
   8215e:	bf00      	nop

00082160 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82160:	b480      	push	{r7}
   82162:	b087      	sub	sp, #28
   82164:	af00      	add	r7, sp, #0
   82166:	60f8      	str	r0, [r7, #12]
   82168:	60b9      	str	r1, [r7, #8]
   8216a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8216c:	68fb      	ldr	r3, [r7, #12]
   8216e:	687a      	ldr	r2, [r7, #4]
   82170:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82172:	68bb      	ldr	r3, [r7, #8]
   82174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82178:	d01f      	beq.n	821ba <pio_set_peripheral+0x5a>
   8217a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8217e:	d805      	bhi.n	8218c <pio_set_peripheral+0x2c>
   82180:	2b00      	cmp	r3, #0
   82182:	d027      	beq.n	821d4 <pio_set_peripheral+0x74>
   82184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82188:	d00a      	beq.n	821a0 <pio_set_peripheral+0x40>
   8218a:	e01f      	b.n	821cc <pio_set_peripheral+0x6c>
   8218c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82190:	d020      	beq.n	821d4 <pio_set_peripheral+0x74>
   82192:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82196:	d01d      	beq.n	821d4 <pio_set_peripheral+0x74>
   82198:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8219c:	d01a      	beq.n	821d4 <pio_set_peripheral+0x74>
   8219e:	e015      	b.n	821cc <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   821a0:	68fb      	ldr	r3, [r7, #12]
   821a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   821a4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   821a6:	68fb      	ldr	r3, [r7, #12]
   821a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   821aa:	687b      	ldr	r3, [r7, #4]
   821ac:	43d9      	mvns	r1, r3
   821ae:	697b      	ldr	r3, [r7, #20]
   821b0:	400b      	ands	r3, r1
   821b2:	401a      	ands	r2, r3
   821b4:	68fb      	ldr	r3, [r7, #12]
   821b6:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   821b8:	e008      	b.n	821cc <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   821ba:	68fb      	ldr	r3, [r7, #12]
   821bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   821be:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   821c0:	687a      	ldr	r2, [r7, #4]
   821c2:	697b      	ldr	r3, [r7, #20]
   821c4:	431a      	orrs	r2, r3
   821c6:	68fb      	ldr	r3, [r7, #12]
   821c8:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   821ca:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   821cc:	68fb      	ldr	r3, [r7, #12]
   821ce:	687a      	ldr	r2, [r7, #4]
   821d0:	605a      	str	r2, [r3, #4]
   821d2:	e000      	b.n	821d6 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   821d4:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   821d6:	371c      	adds	r7, #28
   821d8:	46bd      	mov	sp, r7
   821da:	f85d 7b04 	ldr.w	r7, [sp], #4
   821de:	4770      	bx	lr

000821e0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   821e0:	b580      	push	{r7, lr}
   821e2:	b084      	sub	sp, #16
   821e4:	af00      	add	r7, sp, #0
   821e6:	60f8      	str	r0, [r7, #12]
   821e8:	60b9      	str	r1, [r7, #8]
   821ea:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   821ec:	68f8      	ldr	r0, [r7, #12]
   821ee:	68b9      	ldr	r1, [r7, #8]
   821f0:	4b18      	ldr	r3, [pc, #96]	; (82254 <pio_set_input+0x74>)
   821f2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   821f4:	687b      	ldr	r3, [r7, #4]
   821f6:	f003 0301 	and.w	r3, r3, #1
   821fa:	68f8      	ldr	r0, [r7, #12]
   821fc:	68b9      	ldr	r1, [r7, #8]
   821fe:	461a      	mov	r2, r3
   82200:	4b15      	ldr	r3, [pc, #84]	; (82258 <pio_set_input+0x78>)
   82202:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82204:	687b      	ldr	r3, [r7, #4]
   82206:	f003 030a 	and.w	r3, r3, #10
   8220a:	2b00      	cmp	r3, #0
   8220c:	d003      	beq.n	82216 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8220e:	68fb      	ldr	r3, [r7, #12]
   82210:	68ba      	ldr	r2, [r7, #8]
   82212:	621a      	str	r2, [r3, #32]
   82214:	e002      	b.n	8221c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82216:	68fb      	ldr	r3, [r7, #12]
   82218:	68ba      	ldr	r2, [r7, #8]
   8221a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8221c:	687b      	ldr	r3, [r7, #4]
   8221e:	f003 0302 	and.w	r3, r3, #2
   82222:	2b00      	cmp	r3, #0
   82224:	d004      	beq.n	82230 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82226:	68fb      	ldr	r3, [r7, #12]
   82228:	68ba      	ldr	r2, [r7, #8]
   8222a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8222e:	e008      	b.n	82242 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82230:	687b      	ldr	r3, [r7, #4]
   82232:	f003 0308 	and.w	r3, r3, #8
   82236:	2b00      	cmp	r3, #0
   82238:	d003      	beq.n	82242 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   8223a:	68fb      	ldr	r3, [r7, #12]
   8223c:	68ba      	ldr	r2, [r7, #8]
   8223e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82242:	68fb      	ldr	r3, [r7, #12]
   82244:	68ba      	ldr	r2, [r7, #8]
   82246:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82248:	68fb      	ldr	r3, [r7, #12]
   8224a:	68ba      	ldr	r2, [r7, #8]
   8224c:	601a      	str	r2, [r3, #0]
}
   8224e:	3710      	adds	r7, #16
   82250:	46bd      	mov	sp, r7
   82252:	bd80      	pop	{r7, pc}
   82254:	000822c1 	.word	0x000822c1
   82258:	00082135 	.word	0x00082135

0008225c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8225c:	b580      	push	{r7, lr}
   8225e:	b084      	sub	sp, #16
   82260:	af00      	add	r7, sp, #0
   82262:	60f8      	str	r0, [r7, #12]
   82264:	60b9      	str	r1, [r7, #8]
   82266:	607a      	str	r2, [r7, #4]
   82268:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8226a:	68f8      	ldr	r0, [r7, #12]
   8226c:	68b9      	ldr	r1, [r7, #8]
   8226e:	4b12      	ldr	r3, [pc, #72]	; (822b8 <pio_set_output+0x5c>)
   82270:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82272:	68f8      	ldr	r0, [r7, #12]
   82274:	68b9      	ldr	r1, [r7, #8]
   82276:	69ba      	ldr	r2, [r7, #24]
   82278:	4b10      	ldr	r3, [pc, #64]	; (822bc <pio_set_output+0x60>)
   8227a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8227c:	683b      	ldr	r3, [r7, #0]
   8227e:	2b00      	cmp	r3, #0
   82280:	d003      	beq.n	8228a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82282:	68fb      	ldr	r3, [r7, #12]
   82284:	68ba      	ldr	r2, [r7, #8]
   82286:	651a      	str	r2, [r3, #80]	; 0x50
   82288:	e002      	b.n	82290 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8228a:	68fb      	ldr	r3, [r7, #12]
   8228c:	68ba      	ldr	r2, [r7, #8]
   8228e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82290:	687b      	ldr	r3, [r7, #4]
   82292:	2b00      	cmp	r3, #0
   82294:	d003      	beq.n	8229e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   82296:	68fb      	ldr	r3, [r7, #12]
   82298:	68ba      	ldr	r2, [r7, #8]
   8229a:	631a      	str	r2, [r3, #48]	; 0x30
   8229c:	e002      	b.n	822a4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8229e:	68fb      	ldr	r3, [r7, #12]
   822a0:	68ba      	ldr	r2, [r7, #8]
   822a2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   822a4:	68fb      	ldr	r3, [r7, #12]
   822a6:	68ba      	ldr	r2, [r7, #8]
   822a8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   822aa:	68fb      	ldr	r3, [r7, #12]
   822ac:	68ba      	ldr	r2, [r7, #8]
   822ae:	601a      	str	r2, [r3, #0]
}
   822b0:	3710      	adds	r7, #16
   822b2:	46bd      	mov	sp, r7
   822b4:	bd80      	pop	{r7, pc}
   822b6:	bf00      	nop
   822b8:	000822c1 	.word	0x000822c1
   822bc:	00082135 	.word	0x00082135

000822c0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   822c0:	b480      	push	{r7}
   822c2:	b083      	sub	sp, #12
   822c4:	af00      	add	r7, sp, #0
   822c6:	6078      	str	r0, [r7, #4]
   822c8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   822ca:	687b      	ldr	r3, [r7, #4]
   822cc:	683a      	ldr	r2, [r7, #0]
   822ce:	645a      	str	r2, [r3, #68]	; 0x44
}
   822d0:	370c      	adds	r7, #12
   822d2:	46bd      	mov	sp, r7
   822d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   822d8:	4770      	bx	lr
   822da:	bf00      	nop

000822dc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   822dc:	b480      	push	{r7}
   822de:	b083      	sub	sp, #12
   822e0:	af00      	add	r7, sp, #0
   822e2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   822e4:	687b      	ldr	r3, [r7, #4]
   822e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   822e8:	4618      	mov	r0, r3
   822ea:	370c      	adds	r7, #12
   822ec:	46bd      	mov	sp, r7
   822ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   822f2:	4770      	bx	lr

000822f4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   822f4:	b480      	push	{r7}
   822f6:	b083      	sub	sp, #12
   822f8:	af00      	add	r7, sp, #0
   822fa:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   822fc:	687b      	ldr	r3, [r7, #4]
   822fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82300:	4618      	mov	r0, r3
   82302:	370c      	adds	r7, #12
   82304:	46bd      	mov	sp, r7
   82306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8230a:	4770      	bx	lr

0008230c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   8230c:	b480      	push	{r7}
   8230e:	b085      	sub	sp, #20
   82310:	af00      	add	r7, sp, #0
   82312:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82314:	687b      	ldr	r3, [r7, #4]
   82316:	095b      	lsrs	r3, r3, #5
   82318:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8231c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82320:	025b      	lsls	r3, r3, #9
   82322:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82324:	687b      	ldr	r3, [r7, #4]
   82326:	f003 031f 	and.w	r3, r3, #31
   8232a:	2201      	movs	r2, #1
   8232c:	fa02 f303 	lsl.w	r3, r2, r3
   82330:	461a      	mov	r2, r3
   82332:	68fb      	ldr	r3, [r7, #12]
   82334:	631a      	str	r2, [r3, #48]	; 0x30
}
   82336:	3714      	adds	r7, #20
   82338:	46bd      	mov	sp, r7
   8233a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8233e:	4770      	bx	lr

00082340 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82340:	b480      	push	{r7}
   82342:	b085      	sub	sp, #20
   82344:	af00      	add	r7, sp, #0
   82346:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82348:	687b      	ldr	r3, [r7, #4]
   8234a:	095b      	lsrs	r3, r3, #5
   8234c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82350:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82354:	025b      	lsls	r3, r3, #9
   82356:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82358:	687b      	ldr	r3, [r7, #4]
   8235a:	f003 031f 	and.w	r3, r3, #31
   8235e:	2201      	movs	r2, #1
   82360:	fa02 f303 	lsl.w	r3, r2, r3
   82364:	461a      	mov	r2, r3
   82366:	68fb      	ldr	r3, [r7, #12]
   82368:	635a      	str	r2, [r3, #52]	; 0x34
}
   8236a:	3714      	adds	r7, #20
   8236c:	46bd      	mov	sp, r7
   8236e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82372:	4770      	bx	lr

00082374 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   82374:	b480      	push	{r7}
   82376:	b085      	sub	sp, #20
   82378:	af00      	add	r7, sp, #0
   8237a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8237c:	687b      	ldr	r3, [r7, #4]
   8237e:	095b      	lsrs	r3, r3, #5
   82380:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82384:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82388:	025b      	lsls	r3, r3, #9
   8238a:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8238c:	68fb      	ldr	r3, [r7, #12]
   8238e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82390:	687b      	ldr	r3, [r7, #4]
   82392:	f003 031f 	and.w	r3, r3, #31
   82396:	2101      	movs	r1, #1
   82398:	fa01 f303 	lsl.w	r3, r1, r3
   8239c:	4013      	ands	r3, r2
   8239e:	2b00      	cmp	r3, #0
   823a0:	d009      	beq.n	823b6 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   823a2:	687b      	ldr	r3, [r7, #4]
   823a4:	f003 031f 	and.w	r3, r3, #31
   823a8:	2201      	movs	r2, #1
   823aa:	fa02 f303 	lsl.w	r3, r2, r3
   823ae:	461a      	mov	r2, r3
   823b0:	68fb      	ldr	r3, [r7, #12]
   823b2:	635a      	str	r2, [r3, #52]	; 0x34
   823b4:	e008      	b.n	823c8 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   823b6:	687b      	ldr	r3, [r7, #4]
   823b8:	f003 031f 	and.w	r3, r3, #31
   823bc:	2201      	movs	r2, #1
   823be:	fa02 f303 	lsl.w	r3, r2, r3
   823c2:	461a      	mov	r2, r3
   823c4:	68fb      	ldr	r3, [r7, #12]
   823c6:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   823c8:	3714      	adds	r7, #20
   823ca:	46bd      	mov	sp, r7
   823cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   823d0:	4770      	bx	lr
   823d2:	bf00      	nop

000823d4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   823d4:	b590      	push	{r4, r7, lr}
   823d6:	b087      	sub	sp, #28
   823d8:	af02      	add	r7, sp, #8
   823da:	6078      	str	r0, [r7, #4]
   823dc:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   823de:	687b      	ldr	r3, [r7, #4]
   823e0:	095b      	lsrs	r3, r3, #5
   823e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   823e6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   823ea:	025b      	lsls	r3, r3, #9
   823ec:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   823ee:	683b      	ldr	r3, [r7, #0]
   823f0:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   823f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823f8:	d048      	beq.n	8248c <pio_configure_pin+0xb8>
   823fa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   823fe:	d806      	bhi.n	8240e <pio_configure_pin+0x3a>
   82400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82404:	d00a      	beq.n	8241c <pio_configure_pin+0x48>
   82406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8240a:	d023      	beq.n	82454 <pio_configure_pin+0x80>
   8240c:	e070      	b.n	824f0 <pio_configure_pin+0x11c>
   8240e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82412:	d047      	beq.n	824a4 <pio_configure_pin+0xd0>
   82414:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82418:	d044      	beq.n	824a4 <pio_configure_pin+0xd0>
   8241a:	e069      	b.n	824f0 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8241c:	687b      	ldr	r3, [r7, #4]
   8241e:	f003 031f 	and.w	r3, r3, #31
   82422:	2201      	movs	r2, #1
   82424:	fa02 f303 	lsl.w	r3, r2, r3
   82428:	68f8      	ldr	r0, [r7, #12]
   8242a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8242e:	461a      	mov	r2, r3
   82430:	4b33      	ldr	r3, [pc, #204]	; (82500 <pio_configure_pin+0x12c>)
   82432:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82434:	687b      	ldr	r3, [r7, #4]
   82436:	f003 031f 	and.w	r3, r3, #31
   8243a:	2201      	movs	r2, #1
   8243c:	fa02 f303 	lsl.w	r3, r2, r3
   82440:	461a      	mov	r2, r3
   82442:	683b      	ldr	r3, [r7, #0]
   82444:	f003 0301 	and.w	r3, r3, #1
   82448:	68f8      	ldr	r0, [r7, #12]
   8244a:	4611      	mov	r1, r2
   8244c:	461a      	mov	r2, r3
   8244e:	4b2d      	ldr	r3, [pc, #180]	; (82504 <pio_configure_pin+0x130>)
   82450:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82452:	e04f      	b.n	824f4 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82454:	687b      	ldr	r3, [r7, #4]
   82456:	f003 031f 	and.w	r3, r3, #31
   8245a:	2201      	movs	r2, #1
   8245c:	fa02 f303 	lsl.w	r3, r2, r3
   82460:	68f8      	ldr	r0, [r7, #12]
   82462:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82466:	461a      	mov	r2, r3
   82468:	4b25      	ldr	r3, [pc, #148]	; (82500 <pio_configure_pin+0x12c>)
   8246a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8246c:	687b      	ldr	r3, [r7, #4]
   8246e:	f003 031f 	and.w	r3, r3, #31
   82472:	2201      	movs	r2, #1
   82474:	fa02 f303 	lsl.w	r3, r2, r3
   82478:	461a      	mov	r2, r3
   8247a:	683b      	ldr	r3, [r7, #0]
   8247c:	f003 0301 	and.w	r3, r3, #1
   82480:	68f8      	ldr	r0, [r7, #12]
   82482:	4611      	mov	r1, r2
   82484:	461a      	mov	r2, r3
   82486:	4b1f      	ldr	r3, [pc, #124]	; (82504 <pio_configure_pin+0x130>)
   82488:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8248a:	e033      	b.n	824f4 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8248c:	687b      	ldr	r3, [r7, #4]
   8248e:	f003 031f 	and.w	r3, r3, #31
   82492:	2201      	movs	r2, #1
   82494:	fa02 f303 	lsl.w	r3, r2, r3
   82498:	68f8      	ldr	r0, [r7, #12]
   8249a:	4619      	mov	r1, r3
   8249c:	683a      	ldr	r2, [r7, #0]
   8249e:	4b1a      	ldr	r3, [pc, #104]	; (82508 <pio_configure_pin+0x134>)
   824a0:	4798      	blx	r3
		break;
   824a2:	e027      	b.n	824f4 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   824a4:	687b      	ldr	r3, [r7, #4]
   824a6:	f003 031f 	and.w	r3, r3, #31
   824aa:	2201      	movs	r2, #1
   824ac:	fa02 f303 	lsl.w	r3, r2, r3
   824b0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   824b2:	683b      	ldr	r3, [r7, #0]
   824b4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   824b8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824bc:	bf14      	ite	ne
   824be:	2300      	movne	r3, #0
   824c0:	2301      	moveq	r3, #1
   824c2:	b2db      	uxtb	r3, r3
   824c4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   824c6:	683b      	ldr	r3, [r7, #0]
   824c8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   824cc:	2b00      	cmp	r3, #0
   824ce:	bf0c      	ite	eq
   824d0:	2300      	moveq	r3, #0
   824d2:	2301      	movne	r3, #1
   824d4:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   824d6:	6838      	ldr	r0, [r7, #0]
   824d8:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   824dc:	2800      	cmp	r0, #0
   824de:	bf0c      	ite	eq
   824e0:	2000      	moveq	r0, #0
   824e2:	2001      	movne	r0, #1
   824e4:	b2c0      	uxtb	r0, r0
   824e6:	9000      	str	r0, [sp, #0]
   824e8:	68f8      	ldr	r0, [r7, #12]
   824ea:	4c08      	ldr	r4, [pc, #32]	; (8250c <pio_configure_pin+0x138>)
   824ec:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   824ee:	e001      	b.n	824f4 <pio_configure_pin+0x120>

	default:
		return 0;
   824f0:	2300      	movs	r3, #0
   824f2:	e000      	b.n	824f6 <pio_configure_pin+0x122>
	}

	return 1;
   824f4:	2301      	movs	r3, #1
}
   824f6:	4618      	mov	r0, r3
   824f8:	3714      	adds	r7, #20
   824fa:	46bd      	mov	sp, r7
   824fc:	bd90      	pop	{r4, r7, pc}
   824fe:	bf00      	nop
   82500:	00082161 	.word	0x00082161
   82504:	00082135 	.word	0x00082135
   82508:	000821e1 	.word	0x000821e1
   8250c:	0008225d 	.word	0x0008225d

00082510 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82510:	b590      	push	{r4, r7, lr}
   82512:	b087      	sub	sp, #28
   82514:	af02      	add	r7, sp, #8
   82516:	60f8      	str	r0, [r7, #12]
   82518:	60b9      	str	r1, [r7, #8]
   8251a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8251c:	687b      	ldr	r3, [r7, #4]
   8251e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82522:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82526:	d02e      	beq.n	82586 <pio_configure_pin_group+0x76>
   82528:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8252c:	d806      	bhi.n	8253c <pio_configure_pin_group+0x2c>
   8252e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82532:	d00a      	beq.n	8254a <pio_configure_pin_group+0x3a>
   82534:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82538:	d016      	beq.n	82568 <pio_configure_pin_group+0x58>
   8253a:	e04a      	b.n	825d2 <pio_configure_pin_group+0xc2>
   8253c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82540:	d027      	beq.n	82592 <pio_configure_pin_group+0x82>
   82542:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82546:	d024      	beq.n	82592 <pio_configure_pin_group+0x82>
   82548:	e043      	b.n	825d2 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8254a:	68f8      	ldr	r0, [r7, #12]
   8254c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82550:	68ba      	ldr	r2, [r7, #8]
   82552:	4b23      	ldr	r3, [pc, #140]	; (825e0 <pio_configure_pin_group+0xd0>)
   82554:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82556:	687b      	ldr	r3, [r7, #4]
   82558:	f003 0301 	and.w	r3, r3, #1
   8255c:	68f8      	ldr	r0, [r7, #12]
   8255e:	68b9      	ldr	r1, [r7, #8]
   82560:	461a      	mov	r2, r3
   82562:	4b20      	ldr	r3, [pc, #128]	; (825e4 <pio_configure_pin_group+0xd4>)
   82564:	4798      	blx	r3
		break;
   82566:	e036      	b.n	825d6 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82568:	68f8      	ldr	r0, [r7, #12]
   8256a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8256e:	68ba      	ldr	r2, [r7, #8]
   82570:	4b1b      	ldr	r3, [pc, #108]	; (825e0 <pio_configure_pin_group+0xd0>)
   82572:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82574:	687b      	ldr	r3, [r7, #4]
   82576:	f003 0301 	and.w	r3, r3, #1
   8257a:	68f8      	ldr	r0, [r7, #12]
   8257c:	68b9      	ldr	r1, [r7, #8]
   8257e:	461a      	mov	r2, r3
   82580:	4b18      	ldr	r3, [pc, #96]	; (825e4 <pio_configure_pin_group+0xd4>)
   82582:	4798      	blx	r3
		break;
   82584:	e027      	b.n	825d6 <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82586:	68f8      	ldr	r0, [r7, #12]
   82588:	68b9      	ldr	r1, [r7, #8]
   8258a:	687a      	ldr	r2, [r7, #4]
   8258c:	4b16      	ldr	r3, [pc, #88]	; (825e8 <pio_configure_pin_group+0xd8>)
   8258e:	4798      	blx	r3
		break;
   82590:	e021      	b.n	825d6 <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82592:	687b      	ldr	r3, [r7, #4]
   82594:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82598:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8259c:	bf14      	ite	ne
   8259e:	2300      	movne	r3, #0
   825a0:	2301      	moveq	r3, #1
   825a2:	b2db      	uxtb	r3, r3
   825a4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   825a6:	687b      	ldr	r3, [r7, #4]
   825a8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   825ac:	2b00      	cmp	r3, #0
   825ae:	bf0c      	ite	eq
   825b0:	2300      	moveq	r3, #0
   825b2:	2301      	movne	r3, #1
   825b4:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   825b6:	6879      	ldr	r1, [r7, #4]
   825b8:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   825bc:	2900      	cmp	r1, #0
   825be:	bf0c      	ite	eq
   825c0:	2100      	moveq	r1, #0
   825c2:	2101      	movne	r1, #1
   825c4:	b2c9      	uxtb	r1, r1
   825c6:	9100      	str	r1, [sp, #0]
   825c8:	68f8      	ldr	r0, [r7, #12]
   825ca:	68b9      	ldr	r1, [r7, #8]
   825cc:	4c07      	ldr	r4, [pc, #28]	; (825ec <pio_configure_pin_group+0xdc>)
   825ce:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   825d0:	e001      	b.n	825d6 <pio_configure_pin_group+0xc6>

	default:
		return 0;
   825d2:	2300      	movs	r3, #0
   825d4:	e000      	b.n	825d8 <pio_configure_pin_group+0xc8>
	}

	return 1;
   825d6:	2301      	movs	r3, #1
}
   825d8:	4618      	mov	r0, r3
   825da:	3714      	adds	r7, #20
   825dc:	46bd      	mov	sp, r7
   825de:	bd90      	pop	{r4, r7, pc}
   825e0:	00082161 	.word	0x00082161
   825e4:	00082135 	.word	0x00082135
   825e8:	000821e1 	.word	0x000821e1
   825ec:	0008225d 	.word	0x0008225d

000825f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   825f0:	b580      	push	{r7, lr}
   825f2:	b084      	sub	sp, #16
   825f4:	af00      	add	r7, sp, #0
   825f6:	6078      	str	r0, [r7, #4]
   825f8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   825fa:	6878      	ldr	r0, [r7, #4]
   825fc:	4b22      	ldr	r3, [pc, #136]	; (82688 <pio_handler_process+0x98>)
   825fe:	4798      	blx	r3
   82600:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82602:	6878      	ldr	r0, [r7, #4]
   82604:	4b21      	ldr	r3, [pc, #132]	; (8268c <pio_handler_process+0x9c>)
   82606:	4798      	blx	r3
   82608:	4603      	mov	r3, r0
   8260a:	68fa      	ldr	r2, [r7, #12]
   8260c:	4013      	ands	r3, r2
   8260e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82610:	68fb      	ldr	r3, [r7, #12]
   82612:	2b00      	cmp	r3, #0
   82614:	d035      	beq.n	82682 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   82616:	2300      	movs	r3, #0
   82618:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8261a:	e02f      	b.n	8267c <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8261c:	4a1c      	ldr	r2, [pc, #112]	; (82690 <pio_handler_process+0xa0>)
   8261e:	68bb      	ldr	r3, [r7, #8]
   82620:	011b      	lsls	r3, r3, #4
   82622:	4413      	add	r3, r2
   82624:	681a      	ldr	r2, [r3, #0]
   82626:	683b      	ldr	r3, [r7, #0]
   82628:	429a      	cmp	r2, r3
   8262a:	d124      	bne.n	82676 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8262c:	4a18      	ldr	r2, [pc, #96]	; (82690 <pio_handler_process+0xa0>)
   8262e:	68bb      	ldr	r3, [r7, #8]
   82630:	011b      	lsls	r3, r3, #4
   82632:	4413      	add	r3, r2
   82634:	685a      	ldr	r2, [r3, #4]
   82636:	68fb      	ldr	r3, [r7, #12]
   82638:	4013      	ands	r3, r2
   8263a:	2b00      	cmp	r3, #0
   8263c:	d01b      	beq.n	82676 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8263e:	4a14      	ldr	r2, [pc, #80]	; (82690 <pio_handler_process+0xa0>)
   82640:	68bb      	ldr	r3, [r7, #8]
   82642:	011b      	lsls	r3, r3, #4
   82644:	4413      	add	r3, r2
   82646:	3308      	adds	r3, #8
   82648:	685b      	ldr	r3, [r3, #4]
   8264a:	4911      	ldr	r1, [pc, #68]	; (82690 <pio_handler_process+0xa0>)
   8264c:	68ba      	ldr	r2, [r7, #8]
   8264e:	0112      	lsls	r2, r2, #4
   82650:	440a      	add	r2, r1
   82652:	6811      	ldr	r1, [r2, #0]
   82654:	480e      	ldr	r0, [pc, #56]	; (82690 <pio_handler_process+0xa0>)
   82656:	68ba      	ldr	r2, [r7, #8]
   82658:	0112      	lsls	r2, r2, #4
   8265a:	4402      	add	r2, r0
   8265c:	6852      	ldr	r2, [r2, #4]
   8265e:	4608      	mov	r0, r1
   82660:	4611      	mov	r1, r2
   82662:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82664:	4a0a      	ldr	r2, [pc, #40]	; (82690 <pio_handler_process+0xa0>)
   82666:	68bb      	ldr	r3, [r7, #8]
   82668:	011b      	lsls	r3, r3, #4
   8266a:	4413      	add	r3, r2
   8266c:	685b      	ldr	r3, [r3, #4]
   8266e:	43db      	mvns	r3, r3
   82670:	68fa      	ldr	r2, [r7, #12]
   82672:	4013      	ands	r3, r2
   82674:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82676:	68bb      	ldr	r3, [r7, #8]
   82678:	3301      	adds	r3, #1
   8267a:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8267c:	68fb      	ldr	r3, [r7, #12]
   8267e:	2b00      	cmp	r3, #0
   82680:	d1cc      	bne.n	8261c <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   82682:	3710      	adds	r7, #16
   82684:	46bd      	mov	sp, r7
   82686:	bd80      	pop	{r7, pc}
   82688:	000822dd 	.word	0x000822dd
   8268c:	000822f5 	.word	0x000822f5
   82690:	20070474 	.word	0x20070474

00082694 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82694:	b580      	push	{r7, lr}
   82696:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82698:	4802      	ldr	r0, [pc, #8]	; (826a4 <PIOA_Handler+0x10>)
   8269a:	210b      	movs	r1, #11
   8269c:	4b02      	ldr	r3, [pc, #8]	; (826a8 <PIOA_Handler+0x14>)
   8269e:	4798      	blx	r3
}
   826a0:	bd80      	pop	{r7, pc}
   826a2:	bf00      	nop
   826a4:	400e0e00 	.word	0x400e0e00
   826a8:	000825f1 	.word	0x000825f1

000826ac <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   826ac:	b580      	push	{r7, lr}
   826ae:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   826b0:	4802      	ldr	r0, [pc, #8]	; (826bc <PIOB_Handler+0x10>)
   826b2:	210c      	movs	r1, #12
   826b4:	4b02      	ldr	r3, [pc, #8]	; (826c0 <PIOB_Handler+0x14>)
   826b6:	4798      	blx	r3
}
   826b8:	bd80      	pop	{r7, pc}
   826ba:	bf00      	nop
   826bc:	400e1000 	.word	0x400e1000
   826c0:	000825f1 	.word	0x000825f1

000826c4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   826c4:	b580      	push	{r7, lr}
   826c6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   826c8:	4802      	ldr	r0, [pc, #8]	; (826d4 <PIOC_Handler+0x10>)
   826ca:	210d      	movs	r1, #13
   826cc:	4b02      	ldr	r3, [pc, #8]	; (826d8 <PIOC_Handler+0x14>)
   826ce:	4798      	blx	r3
}
   826d0:	bd80      	pop	{r7, pc}
   826d2:	bf00      	nop
   826d4:	400e1200 	.word	0x400e1200
   826d8:	000825f1 	.word	0x000825f1

000826dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   826dc:	b580      	push	{r7, lr}
   826de:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   826e0:	4802      	ldr	r0, [pc, #8]	; (826ec <PIOD_Handler+0x10>)
   826e2:	210e      	movs	r1, #14
   826e4:	4b02      	ldr	r3, [pc, #8]	; (826f0 <PIOD_Handler+0x14>)
   826e6:	4798      	blx	r3
}
   826e8:	bd80      	pop	{r7, pc}
   826ea:	bf00      	nop
   826ec:	400e1400 	.word	0x400e1400
   826f0:	000825f1 	.word	0x000825f1

000826f4 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   826f4:	b480      	push	{r7}
   826f6:	b085      	sub	sp, #20
   826f8:	af00      	add	r7, sp, #0
   826fa:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   826fc:	4b1d      	ldr	r3, [pc, #116]	; (82774 <pmc_switch_mck_to_pllack+0x80>)
   826fe:	4a1d      	ldr	r2, [pc, #116]	; (82774 <pmc_switch_mck_to_pllack+0x80>)
   82700:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82702:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   82706:	687a      	ldr	r2, [r7, #4]
   82708:	430a      	orrs	r2, r1
   8270a:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8270c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82710:	60fb      	str	r3, [r7, #12]
   82712:	e007      	b.n	82724 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82714:	68fb      	ldr	r3, [r7, #12]
   82716:	2b00      	cmp	r3, #0
   82718:	d101      	bne.n	8271e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8271a:	2301      	movs	r3, #1
   8271c:	e023      	b.n	82766 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8271e:	68fb      	ldr	r3, [r7, #12]
   82720:	3b01      	subs	r3, #1
   82722:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82724:	4b13      	ldr	r3, [pc, #76]	; (82774 <pmc_switch_mck_to_pllack+0x80>)
   82726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82728:	f003 0308 	and.w	r3, r3, #8
   8272c:	2b00      	cmp	r3, #0
   8272e:	d0f1      	beq.n	82714 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82730:	4b10      	ldr	r3, [pc, #64]	; (82774 <pmc_switch_mck_to_pllack+0x80>)
   82732:	4a10      	ldr	r2, [pc, #64]	; (82774 <pmc_switch_mck_to_pllack+0x80>)
   82734:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82736:	f022 0203 	bic.w	r2, r2, #3
   8273a:	f042 0202 	orr.w	r2, r2, #2
   8273e:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82740:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82744:	60fb      	str	r3, [r7, #12]
   82746:	e007      	b.n	82758 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82748:	68fb      	ldr	r3, [r7, #12]
   8274a:	2b00      	cmp	r3, #0
   8274c:	d101      	bne.n	82752 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8274e:	2301      	movs	r3, #1
   82750:	e009      	b.n	82766 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82752:	68fb      	ldr	r3, [r7, #12]
   82754:	3b01      	subs	r3, #1
   82756:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82758:	4b06      	ldr	r3, [pc, #24]	; (82774 <pmc_switch_mck_to_pllack+0x80>)
   8275a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8275c:	f003 0308 	and.w	r3, r3, #8
   82760:	2b00      	cmp	r3, #0
   82762:	d0f1      	beq.n	82748 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82764:	2300      	movs	r3, #0
}
   82766:	4618      	mov	r0, r3
   82768:	3714      	adds	r7, #20
   8276a:	46bd      	mov	sp, r7
   8276c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82770:	4770      	bx	lr
   82772:	bf00      	nop
   82774:	400e0600 	.word	0x400e0600

00082778 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82778:	b480      	push	{r7}
   8277a:	b083      	sub	sp, #12
   8277c:	af00      	add	r7, sp, #0
   8277e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82780:	687b      	ldr	r3, [r7, #4]
   82782:	2b01      	cmp	r3, #1
   82784:	d107      	bne.n	82796 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   82786:	4a0a      	ldr	r2, [pc, #40]	; (827b0 <pmc_switch_sclk_to_32kxtal+0x38>)
   82788:	4b09      	ldr	r3, [pc, #36]	; (827b0 <pmc_switch_sclk_to_32kxtal+0x38>)
   8278a:	689b      	ldr	r3, [r3, #8]
   8278c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82790:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82794:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   82796:	4a06      	ldr	r2, [pc, #24]	; (827b0 <pmc_switch_sclk_to_32kxtal+0x38>)
   82798:	4b05      	ldr	r3, [pc, #20]	; (827b0 <pmc_switch_sclk_to_32kxtal+0x38>)
   8279a:	681b      	ldr	r3, [r3, #0]
   8279c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   827a0:	f043 0308 	orr.w	r3, r3, #8
   827a4:	6013      	str	r3, [r2, #0]
}
   827a6:	370c      	adds	r7, #12
   827a8:	46bd      	mov	sp, r7
   827aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   827ae:	4770      	bx	lr
   827b0:	400e1a10 	.word	0x400e1a10

000827b4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   827b4:	b480      	push	{r7}
   827b6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   827b8:	4b09      	ldr	r3, [pc, #36]	; (827e0 <pmc_osc_is_ready_32kxtal+0x2c>)
   827ba:	695b      	ldr	r3, [r3, #20]
   827bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   827c0:	2b00      	cmp	r3, #0
   827c2:	d007      	beq.n	827d4 <pmc_osc_is_ready_32kxtal+0x20>
   827c4:	4b07      	ldr	r3, [pc, #28]	; (827e4 <pmc_osc_is_ready_32kxtal+0x30>)
   827c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   827c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   827cc:	2b00      	cmp	r3, #0
   827ce:	d001      	beq.n	827d4 <pmc_osc_is_ready_32kxtal+0x20>
   827d0:	2301      	movs	r3, #1
   827d2:	e000      	b.n	827d6 <pmc_osc_is_ready_32kxtal+0x22>
   827d4:	2300      	movs	r3, #0
}
   827d6:	4618      	mov	r0, r3
   827d8:	46bd      	mov	sp, r7
   827da:	f85d 7b04 	ldr.w	r7, [sp], #4
   827de:	4770      	bx	lr
   827e0:	400e1a10 	.word	0x400e1a10
   827e4:	400e0600 	.word	0x400e0600

000827e8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   827e8:	b480      	push	{r7}
   827ea:	b085      	sub	sp, #20
   827ec:	af00      	add	r7, sp, #0
   827ee:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   827f0:	2300      	movs	r3, #0
   827f2:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   827f4:	4b21      	ldr	r3, [pc, #132]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   827f6:	6a1b      	ldr	r3, [r3, #32]
   827f8:	f003 0301 	and.w	r3, r3, #1
   827fc:	2b00      	cmp	r3, #0
   827fe:	d00e      	beq.n	8281e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82800:	4a1e      	ldr	r2, [pc, #120]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82802:	4b1e      	ldr	r3, [pc, #120]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82804:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   82806:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8280a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8280e:	6879      	ldr	r1, [r7, #4]
   82810:	430b      	orrs	r3, r1
   82812:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82816:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8281a:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8281c:	e00b      	b.n	82836 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8281e:	2301      	movs	r3, #1
   82820:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82822:	4a16      	ldr	r2, [pc, #88]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82824:	4b15      	ldr	r3, [pc, #84]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82826:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   82828:	4b15      	ldr	r3, [pc, #84]	; (82880 <pmc_switch_mainck_to_fastrc+0x98>)
   8282a:	400b      	ands	r3, r1
   8282c:	6879      	ldr	r1, [r7, #4]
   8282e:	4319      	orrs	r1, r3
   82830:	4b14      	ldr	r3, [pc, #80]	; (82884 <pmc_switch_mainck_to_fastrc+0x9c>)
   82832:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82834:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82836:	bf00      	nop
   82838:	4b10      	ldr	r3, [pc, #64]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   8283a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82840:	2b00      	cmp	r3, #0
   82842:	d0f9      	beq.n	82838 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   82844:	4a0d      	ldr	r2, [pc, #52]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82846:	4b0d      	ldr	r3, [pc, #52]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82848:	6a1b      	ldr	r3, [r3, #32]
   8284a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8284e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82852:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82856:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   82858:	68fb      	ldr	r3, [r7, #12]
   8285a:	2b00      	cmp	r3, #0
   8285c:	d009      	beq.n	82872 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8285e:	4a07      	ldr	r2, [pc, #28]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82860:	4b06      	ldr	r3, [pc, #24]	; (8287c <pmc_switch_mainck_to_fastrc+0x94>)
   82862:	6a1b      	ldr	r3, [r3, #32]
   82864:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82868:	f023 0301 	bic.w	r3, r3, #1
   8286c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82870:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   82872:	3714      	adds	r7, #20
   82874:	46bd      	mov	sp, r7
   82876:	f85d 7b04 	ldr.w	r7, [sp], #4
   8287a:	4770      	bx	lr
   8287c:	400e0600 	.word	0x400e0600
   82880:	ffc8c086 	.word	0xffc8c086
   82884:	00373f09 	.word	0x00373f09

00082888 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   82888:	b480      	push	{r7}
   8288a:	b083      	sub	sp, #12
   8288c:	af00      	add	r7, sp, #0
   8288e:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82890:	687b      	ldr	r3, [r7, #4]
   82892:	2b00      	cmp	r3, #0
   82894:	d008      	beq.n	828a8 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82896:	4912      	ldr	r1, [pc, #72]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   82898:	4b11      	ldr	r3, [pc, #68]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   8289a:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   8289c:	4a11      	ldr	r2, [pc, #68]	; (828e4 <pmc_switch_mainck_to_xtal+0x5c>)
   8289e:	401a      	ands	r2, r3
   828a0:	4b11      	ldr	r3, [pc, #68]	; (828e8 <pmc_switch_mainck_to_xtal+0x60>)
   828a2:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   828a4:	620b      	str	r3, [r1, #32]
   828a6:	e016      	b.n	828d6 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   828a8:	490d      	ldr	r1, [pc, #52]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   828aa:	4b0d      	ldr	r3, [pc, #52]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   828ac:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   828ae:	4a0f      	ldr	r2, [pc, #60]	; (828ec <pmc_switch_mainck_to_xtal+0x64>)
   828b0:	401a      	ands	r2, r3
   828b2:	4b0f      	ldr	r3, [pc, #60]	; (828f0 <pmc_switch_mainck_to_xtal+0x68>)
   828b4:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   828b6:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   828b8:	bf00      	nop
   828ba:	4b09      	ldr	r3, [pc, #36]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   828bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828be:	f003 0301 	and.w	r3, r3, #1
   828c2:	2b00      	cmp	r3, #0
   828c4:	d0f9      	beq.n	828ba <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   828c6:	4a06      	ldr	r2, [pc, #24]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   828c8:	4b05      	ldr	r3, [pc, #20]	; (828e0 <pmc_switch_mainck_to_xtal+0x58>)
   828ca:	6a1b      	ldr	r3, [r3, #32]
   828cc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   828d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   828d4:	6213      	str	r3, [r2, #32]
	}
}
   828d6:	370c      	adds	r7, #12
   828d8:	46bd      	mov	sp, r7
   828da:	f85d 7b04 	ldr.w	r7, [sp], #4
   828de:	4770      	bx	lr
   828e0:	400e0600 	.word	0x400e0600
   828e4:	fec8fffc 	.word	0xfec8fffc
   828e8:	01370002 	.word	0x01370002
   828ec:	ffc8c0fc 	.word	0xffc8c0fc
   828f0:	00373f01 	.word	0x00373f01

000828f4 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   828f4:	b480      	push	{r7}
   828f6:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   828f8:	4b04      	ldr	r3, [pc, #16]	; (8290c <pmc_osc_is_ready_mainck+0x18>)
   828fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   828fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82900:	4618      	mov	r0, r3
   82902:	46bd      	mov	sp, r7
   82904:	f85d 7b04 	ldr.w	r7, [sp], #4
   82908:	4770      	bx	lr
   8290a:	bf00      	nop
   8290c:	400e0600 	.word	0x400e0600

00082910 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82910:	b480      	push	{r7}
   82912:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82914:	4b03      	ldr	r3, [pc, #12]	; (82924 <pmc_disable_pllack+0x14>)
   82916:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8291a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8291c:	46bd      	mov	sp, r7
   8291e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82922:	4770      	bx	lr
   82924:	400e0600 	.word	0x400e0600

00082928 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82928:	b480      	push	{r7}
   8292a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8292c:	4b04      	ldr	r3, [pc, #16]	; (82940 <pmc_is_locked_pllack+0x18>)
   8292e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82930:	f003 0302 	and.w	r3, r3, #2
}
   82934:	4618      	mov	r0, r3
   82936:	46bd      	mov	sp, r7
   82938:	f85d 7b04 	ldr.w	r7, [sp], #4
   8293c:	4770      	bx	lr
   8293e:	bf00      	nop
   82940:	400e0600 	.word	0x400e0600

00082944 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82944:	b480      	push	{r7}
   82946:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82948:	4b04      	ldr	r3, [pc, #16]	; (8295c <pmc_is_locked_upll+0x18>)
   8294a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82950:	4618      	mov	r0, r3
   82952:	46bd      	mov	sp, r7
   82954:	f85d 7b04 	ldr.w	r7, [sp], #4
   82958:	4770      	bx	lr
   8295a:	bf00      	nop
   8295c:	400e0600 	.word	0x400e0600

00082960 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82960:	b480      	push	{r7}
   82962:	b083      	sub	sp, #12
   82964:	af00      	add	r7, sp, #0
   82966:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82968:	687b      	ldr	r3, [r7, #4]
   8296a:	2b2c      	cmp	r3, #44	; 0x2c
   8296c:	d901      	bls.n	82972 <pmc_enable_periph_clk+0x12>
		return 1;
   8296e:	2301      	movs	r3, #1
   82970:	e02f      	b.n	829d2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82972:	687b      	ldr	r3, [r7, #4]
   82974:	2b1f      	cmp	r3, #31
   82976:	d813      	bhi.n	829a0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82978:	4b19      	ldr	r3, [pc, #100]	; (829e0 <pmc_enable_periph_clk+0x80>)
   8297a:	699a      	ldr	r2, [r3, #24]
   8297c:	687b      	ldr	r3, [r7, #4]
   8297e:	2101      	movs	r1, #1
   82980:	fa01 f303 	lsl.w	r3, r1, r3
   82984:	401a      	ands	r2, r3
   82986:	687b      	ldr	r3, [r7, #4]
   82988:	2101      	movs	r1, #1
   8298a:	fa01 f303 	lsl.w	r3, r1, r3
   8298e:	429a      	cmp	r2, r3
   82990:	d01e      	beq.n	829d0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82992:	4b13      	ldr	r3, [pc, #76]	; (829e0 <pmc_enable_periph_clk+0x80>)
   82994:	687a      	ldr	r2, [r7, #4]
   82996:	2101      	movs	r1, #1
   82998:	fa01 f202 	lsl.w	r2, r1, r2
   8299c:	611a      	str	r2, [r3, #16]
   8299e:	e017      	b.n	829d0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   829a0:	687b      	ldr	r3, [r7, #4]
   829a2:	3b20      	subs	r3, #32
   829a4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   829a6:	4b0e      	ldr	r3, [pc, #56]	; (829e0 <pmc_enable_periph_clk+0x80>)
   829a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   829ac:	687b      	ldr	r3, [r7, #4]
   829ae:	2101      	movs	r1, #1
   829b0:	fa01 f303 	lsl.w	r3, r1, r3
   829b4:	401a      	ands	r2, r3
   829b6:	687b      	ldr	r3, [r7, #4]
   829b8:	2101      	movs	r1, #1
   829ba:	fa01 f303 	lsl.w	r3, r1, r3
   829be:	429a      	cmp	r2, r3
   829c0:	d006      	beq.n	829d0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   829c2:	4b07      	ldr	r3, [pc, #28]	; (829e0 <pmc_enable_periph_clk+0x80>)
   829c4:	687a      	ldr	r2, [r7, #4]
   829c6:	2101      	movs	r1, #1
   829c8:	fa01 f202 	lsl.w	r2, r1, r2
   829cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   829d0:	2300      	movs	r3, #0
}
   829d2:	4618      	mov	r0, r3
   829d4:	370c      	adds	r7, #12
   829d6:	46bd      	mov	sp, r7
   829d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   829dc:	4770      	bx	lr
   829de:	bf00      	nop
   829e0:	400e0600 	.word	0x400e0600

000829e4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   829e4:	b480      	push	{r7}
   829e6:	b089      	sub	sp, #36	; 0x24
   829e8:	af00      	add	r7, sp, #0
   829ea:	60f8      	str	r0, [r7, #12]
   829ec:	60b9      	str	r1, [r7, #8]
   829ee:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   829f0:	68bb      	ldr	r3, [r7, #8]
   829f2:	011a      	lsls	r2, r3, #4
   829f4:	687b      	ldr	r3, [r7, #4]
   829f6:	429a      	cmp	r2, r3
   829f8:	d802      	bhi.n	82a00 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   829fa:	2310      	movs	r3, #16
   829fc:	61fb      	str	r3, [r7, #28]
   829fe:	e001      	b.n	82a04 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   82a00:	2308      	movs	r3, #8
   82a02:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82a04:	687b      	ldr	r3, [r7, #4]
   82a06:	00da      	lsls	r2, r3, #3
   82a08:	69fb      	ldr	r3, [r7, #28]
   82a0a:	68b9      	ldr	r1, [r7, #8]
   82a0c:	fb01 f303 	mul.w	r3, r1, r3
   82a10:	085b      	lsrs	r3, r3, #1
   82a12:	441a      	add	r2, r3
   82a14:	69fb      	ldr	r3, [r7, #28]
   82a16:	68b9      	ldr	r1, [r7, #8]
   82a18:	fb01 f303 	mul.w	r3, r1, r3
   82a1c:	fbb2 f3f3 	udiv	r3, r2, r3
   82a20:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82a22:	69bb      	ldr	r3, [r7, #24]
   82a24:	08db      	lsrs	r3, r3, #3
   82a26:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   82a28:	69bb      	ldr	r3, [r7, #24]
   82a2a:	f003 0307 	and.w	r3, r3, #7
   82a2e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82a30:	697b      	ldr	r3, [r7, #20]
   82a32:	2b00      	cmp	r3, #0
   82a34:	d003      	beq.n	82a3e <usart_set_async_baudrate+0x5a>
   82a36:	697b      	ldr	r3, [r7, #20]
   82a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82a3c:	d301      	bcc.n	82a42 <usart_set_async_baudrate+0x5e>
		return 1;
   82a3e:	2301      	movs	r3, #1
   82a40:	e00f      	b.n	82a62 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   82a42:	69fb      	ldr	r3, [r7, #28]
   82a44:	2b08      	cmp	r3, #8
   82a46:	d105      	bne.n	82a54 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   82a48:	68fb      	ldr	r3, [r7, #12]
   82a4a:	685b      	ldr	r3, [r3, #4]
   82a4c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82a50:	68fb      	ldr	r3, [r7, #12]
   82a52:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82a54:	693b      	ldr	r3, [r7, #16]
   82a56:	041a      	lsls	r2, r3, #16
   82a58:	697b      	ldr	r3, [r7, #20]
   82a5a:	431a      	orrs	r2, r3
   82a5c:	68fb      	ldr	r3, [r7, #12]
   82a5e:	621a      	str	r2, [r3, #32]

	return 0;
   82a60:	2300      	movs	r3, #0
}
   82a62:	4618      	mov	r0, r3
   82a64:	3724      	adds	r7, #36	; 0x24
   82a66:	46bd      	mov	sp, r7
   82a68:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a6c:	4770      	bx	lr
   82a6e:	bf00      	nop

00082a70 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82a70:	b580      	push	{r7, lr}
   82a72:	b082      	sub	sp, #8
   82a74:	af00      	add	r7, sp, #0
   82a76:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   82a78:	6878      	ldr	r0, [r7, #4]
   82a7a:	4b0d      	ldr	r3, [pc, #52]	; (82ab0 <usart_reset+0x40>)
   82a7c:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82a7e:	687b      	ldr	r3, [r7, #4]
   82a80:	2200      	movs	r2, #0
   82a82:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82a84:	687b      	ldr	r3, [r7, #4]
   82a86:	2200      	movs	r2, #0
   82a88:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82a8a:	687b      	ldr	r3, [r7, #4]
   82a8c:	2200      	movs	r2, #0
   82a8e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   82a90:	6878      	ldr	r0, [r7, #4]
   82a92:	4b08      	ldr	r3, [pc, #32]	; (82ab4 <usart_reset+0x44>)
   82a94:	4798      	blx	r3
	usart_reset_rx(p_usart);
   82a96:	6878      	ldr	r0, [r7, #4]
   82a98:	4b07      	ldr	r3, [pc, #28]	; (82ab8 <usart_reset+0x48>)
   82a9a:	4798      	blx	r3
	usart_reset_status(p_usart);
   82a9c:	6878      	ldr	r0, [r7, #4]
   82a9e:	4b07      	ldr	r3, [pc, #28]	; (82abc <usart_reset+0x4c>)
   82aa0:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   82aa2:	6878      	ldr	r0, [r7, #4]
   82aa4:	4b06      	ldr	r3, [pc, #24]	; (82ac0 <usart_reset+0x50>)
   82aa6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82aa8:	3708      	adds	r7, #8
   82aaa:	46bd      	mov	sp, r7
   82aac:	bd80      	pop	{r7, pc}
   82aae:	bf00      	nop
   82ab0:	00082cad 	.word	0x00082cad
   82ab4:	00082b61 	.word	0x00082b61
   82ab8:	00082b91 	.word	0x00082b91
   82abc:	00082bf9 	.word	0x00082bf9
   82ac0:	00082c15 	.word	0x00082c15

00082ac4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82ac4:	b580      	push	{r7, lr}
   82ac6:	b084      	sub	sp, #16
   82ac8:	af00      	add	r7, sp, #0
   82aca:	60f8      	str	r0, [r7, #12]
   82acc:	60b9      	str	r1, [r7, #8]
   82ace:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82ad0:	68f8      	ldr	r0, [r7, #12]
   82ad2:	4b1a      	ldr	r3, [pc, #104]	; (82b3c <usart_init_rs232+0x78>)
   82ad4:	4798      	blx	r3

	ul_reg_val = 0;
   82ad6:	4b1a      	ldr	r3, [pc, #104]	; (82b40 <usart_init_rs232+0x7c>)
   82ad8:	2200      	movs	r2, #0
   82ada:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82adc:	68bb      	ldr	r3, [r7, #8]
   82ade:	2b00      	cmp	r3, #0
   82ae0:	d009      	beq.n	82af6 <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   82ae2:	68bb      	ldr	r3, [r7, #8]
   82ae4:	681b      	ldr	r3, [r3, #0]
   82ae6:	68f8      	ldr	r0, [r7, #12]
   82ae8:	4619      	mov	r1, r3
   82aea:	687a      	ldr	r2, [r7, #4]
   82aec:	4b15      	ldr	r3, [pc, #84]	; (82b44 <usart_init_rs232+0x80>)
   82aee:	4798      	blx	r3
   82af0:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82af2:	2b00      	cmp	r3, #0
   82af4:	d001      	beq.n	82afa <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82af6:	2301      	movs	r3, #1
   82af8:	e01b      	b.n	82b32 <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82afa:	68bb      	ldr	r3, [r7, #8]
   82afc:	685a      	ldr	r2, [r3, #4]
   82afe:	68bb      	ldr	r3, [r7, #8]
   82b00:	689b      	ldr	r3, [r3, #8]
   82b02:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82b04:	68bb      	ldr	r3, [r7, #8]
   82b06:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82b08:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82b0a:	68bb      	ldr	r3, [r7, #8]
   82b0c:	68db      	ldr	r3, [r3, #12]
   82b0e:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82b10:	4b0b      	ldr	r3, [pc, #44]	; (82b40 <usart_init_rs232+0x7c>)
   82b12:	681b      	ldr	r3, [r3, #0]
   82b14:	431a      	orrs	r2, r3
   82b16:	4b0a      	ldr	r3, [pc, #40]	; (82b40 <usart_init_rs232+0x7c>)
   82b18:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   82b1a:	4b09      	ldr	r3, [pc, #36]	; (82b40 <usart_init_rs232+0x7c>)
   82b1c:	681a      	ldr	r2, [r3, #0]
   82b1e:	4b08      	ldr	r3, [pc, #32]	; (82b40 <usart_init_rs232+0x7c>)
   82b20:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   82b22:	68fb      	ldr	r3, [r7, #12]
   82b24:	685a      	ldr	r2, [r3, #4]
   82b26:	4b06      	ldr	r3, [pc, #24]	; (82b40 <usart_init_rs232+0x7c>)
   82b28:	681b      	ldr	r3, [r3, #0]
   82b2a:	431a      	orrs	r2, r3
   82b2c:	68fb      	ldr	r3, [r7, #12]
   82b2e:	605a      	str	r2, [r3, #4]
	
	return 0;
   82b30:	2300      	movs	r3, #0
}
   82b32:	4618      	mov	r0, r3
   82b34:	3710      	adds	r7, #16
   82b36:	46bd      	mov	sp, r7
   82b38:	bd80      	pop	{r7, pc}
   82b3a:	bf00      	nop
   82b3c:	00082a71 	.word	0x00082a71
   82b40:	200704e4 	.word	0x200704e4
   82b44:	000829e5 	.word	0x000829e5

00082b48 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82b48:	b480      	push	{r7}
   82b4a:	b083      	sub	sp, #12
   82b4c:	af00      	add	r7, sp, #0
   82b4e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82b50:	687b      	ldr	r3, [r7, #4]
   82b52:	2240      	movs	r2, #64	; 0x40
   82b54:	601a      	str	r2, [r3, #0]
}
   82b56:	370c      	adds	r7, #12
   82b58:	46bd      	mov	sp, r7
   82b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b5e:	4770      	bx	lr

00082b60 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82b60:	b480      	push	{r7}
   82b62:	b083      	sub	sp, #12
   82b64:	af00      	add	r7, sp, #0
   82b66:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82b68:	687b      	ldr	r3, [r7, #4]
   82b6a:	2288      	movs	r2, #136	; 0x88
   82b6c:	601a      	str	r2, [r3, #0]
}
   82b6e:	370c      	adds	r7, #12
   82b70:	46bd      	mov	sp, r7
   82b72:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b76:	4770      	bx	lr

00082b78 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82b78:	b480      	push	{r7}
   82b7a:	b083      	sub	sp, #12
   82b7c:	af00      	add	r7, sp, #0
   82b7e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82b80:	687b      	ldr	r3, [r7, #4]
   82b82:	2210      	movs	r2, #16
   82b84:	601a      	str	r2, [r3, #0]
}
   82b86:	370c      	adds	r7, #12
   82b88:	46bd      	mov	sp, r7
   82b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b8e:	4770      	bx	lr

00082b90 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82b90:	b480      	push	{r7}
   82b92:	b083      	sub	sp, #12
   82b94:	af00      	add	r7, sp, #0
   82b96:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82b98:	687b      	ldr	r3, [r7, #4]
   82b9a:	2224      	movs	r2, #36	; 0x24
   82b9c:	601a      	str	r2, [r3, #0]
}
   82b9e:	370c      	adds	r7, #12
   82ba0:	46bd      	mov	sp, r7
   82ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ba6:	4770      	bx	lr

00082ba8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82ba8:	b480      	push	{r7}
   82baa:	b083      	sub	sp, #12
   82bac:	af00      	add	r7, sp, #0
   82bae:	6078      	str	r0, [r7, #4]
   82bb0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   82bb2:	687b      	ldr	r3, [r7, #4]
   82bb4:	683a      	ldr	r2, [r7, #0]
   82bb6:	609a      	str	r2, [r3, #8]
}
   82bb8:	370c      	adds	r7, #12
   82bba:	46bd      	mov	sp, r7
   82bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bc0:	4770      	bx	lr
   82bc2:	bf00      	nop

00082bc4 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82bc4:	b480      	push	{r7}
   82bc6:	b083      	sub	sp, #12
   82bc8:	af00      	add	r7, sp, #0
   82bca:	6078      	str	r0, [r7, #4]
   82bcc:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   82bce:	687b      	ldr	r3, [r7, #4]
   82bd0:	683a      	ldr	r2, [r7, #0]
   82bd2:	60da      	str	r2, [r3, #12]
}
   82bd4:	370c      	adds	r7, #12
   82bd6:	46bd      	mov	sp, r7
   82bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bdc:	4770      	bx	lr
   82bde:	bf00      	nop

00082be0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   82be0:	b480      	push	{r7}
   82be2:	b083      	sub	sp, #12
   82be4:	af00      	add	r7, sp, #0
   82be6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   82be8:	687b      	ldr	r3, [r7, #4]
   82bea:	695b      	ldr	r3, [r3, #20]
}
   82bec:	4618      	mov	r0, r3
   82bee:	370c      	adds	r7, #12
   82bf0:	46bd      	mov	sp, r7
   82bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bf6:	4770      	bx	lr

00082bf8 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82bf8:	b480      	push	{r7}
   82bfa:	b083      	sub	sp, #12
   82bfc:	af00      	add	r7, sp, #0
   82bfe:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82c00:	687b      	ldr	r3, [r7, #4]
   82c02:	f44f 7280 	mov.w	r2, #256	; 0x100
   82c06:	601a      	str	r2, [r3, #0]
}
   82c08:	370c      	adds	r7, #12
   82c0a:	46bd      	mov	sp, r7
   82c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c10:	4770      	bx	lr
   82c12:	bf00      	nop

00082c14 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82c14:	b480      	push	{r7}
   82c16:	b083      	sub	sp, #12
   82c18:	af00      	add	r7, sp, #0
   82c1a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82c1c:	687b      	ldr	r3, [r7, #4]
   82c1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82c22:	601a      	str	r2, [r3, #0]
}
   82c24:	370c      	adds	r7, #12
   82c26:	46bd      	mov	sp, r7
   82c28:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c2c:	4770      	bx	lr
   82c2e:	bf00      	nop

00082c30 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82c30:	b480      	push	{r7}
   82c32:	b083      	sub	sp, #12
   82c34:	af00      	add	r7, sp, #0
   82c36:	6078      	str	r0, [r7, #4]
   82c38:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82c3a:	687b      	ldr	r3, [r7, #4]
   82c3c:	695b      	ldr	r3, [r3, #20]
   82c3e:	f003 0302 	and.w	r3, r3, #2
   82c42:	2b00      	cmp	r3, #0
   82c44:	d101      	bne.n	82c4a <usart_write+0x1a>
		return 1;
   82c46:	2301      	movs	r3, #1
   82c48:	e005      	b.n	82c56 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82c4a:	683b      	ldr	r3, [r7, #0]
   82c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82c50:	687b      	ldr	r3, [r7, #4]
   82c52:	61da      	str	r2, [r3, #28]
	return 0;
   82c54:	2300      	movs	r3, #0
}
   82c56:	4618      	mov	r0, r3
   82c58:	370c      	adds	r7, #12
   82c5a:	46bd      	mov	sp, r7
   82c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c60:	4770      	bx	lr
   82c62:	bf00      	nop

00082c64 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   82c64:	b480      	push	{r7}
   82c66:	b085      	sub	sp, #20
   82c68:	af00      	add	r7, sp, #0
   82c6a:	6078      	str	r0, [r7, #4]
   82c6c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   82c72:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82c74:	e006      	b.n	82c84 <usart_getchar+0x20>
		if (!timeout--) {
   82c76:	68fb      	ldr	r3, [r7, #12]
   82c78:	1e5a      	subs	r2, r3, #1
   82c7a:	60fa      	str	r2, [r7, #12]
   82c7c:	2b00      	cmp	r3, #0
   82c7e:	d101      	bne.n	82c84 <usart_getchar+0x20>
			return 1;
   82c80:	2301      	movs	r3, #1
   82c82:	e00c      	b.n	82c9e <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82c84:	687b      	ldr	r3, [r7, #4]
   82c86:	695b      	ldr	r3, [r3, #20]
   82c88:	f003 0301 	and.w	r3, r3, #1
   82c8c:	2b00      	cmp	r3, #0
   82c8e:	d0f2      	beq.n	82c76 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82c90:	687b      	ldr	r3, [r7, #4]
   82c92:	699b      	ldr	r3, [r3, #24]
   82c94:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82c98:	683b      	ldr	r3, [r7, #0]
   82c9a:	601a      	str	r2, [r3, #0]

	return 0;
   82c9c:	2300      	movs	r3, #0
}
   82c9e:	4618      	mov	r0, r3
   82ca0:	3714      	adds	r7, #20
   82ca2:	46bd      	mov	sp, r7
   82ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ca8:	4770      	bx	lr
   82caa:	bf00      	nop

00082cac <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82cac:	b480      	push	{r7}
   82cae:	b083      	sub	sp, #12
   82cb0:	af00      	add	r7, sp, #0
   82cb2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   82cb4:	687b      	ldr	r3, [r7, #4]
   82cb6:	4a04      	ldr	r2, [pc, #16]	; (82cc8 <usart_disable_writeprotect+0x1c>)
   82cb8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82cbc:	370c      	adds	r7, #12
   82cbe:	46bd      	mov	sp, r7
   82cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cc4:	4770      	bx	lr
   82cc6:	bf00      	nop
   82cc8:	55534100 	.word	0x55534100

00082ccc <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   82ccc:	b480      	push	{r7}
   82cce:	b083      	sub	sp, #12
   82cd0:	af00      	add	r7, sp, #0
   82cd2:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   82cd4:	687a      	ldr	r2, [r7, #4]
   82cd6:	4b05      	ldr	r3, [pc, #20]	; (82cec <wdt_restart+0x20>)
   82cd8:	429a      	cmp	r2, r3
   82cda:	d102      	bne.n	82ce2 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   82cdc:	687b      	ldr	r3, [r7, #4]
   82cde:	4a04      	ldr	r2, [pc, #16]	; (82cf0 <wdt_restart+0x24>)
   82ce0:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   82ce2:	370c      	adds	r7, #12
   82ce4:	46bd      	mov	sp, r7
   82ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cea:	4770      	bx	lr
   82cec:	400e1a50 	.word	0x400e1a50
   82cf0:	a5000001 	.word	0xa5000001

00082cf4 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   82cf4:	b480      	push	{r7}
   82cf6:	b083      	sub	sp, #12
   82cf8:	af00      	add	r7, sp, #0
   82cfa:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   82cfc:	687b      	ldr	r3, [r7, #4]
   82cfe:	689b      	ldr	r3, [r3, #8]
}
   82d00:	4618      	mov	r0, r3
   82d02:	370c      	adds	r7, #12
   82d04:	46bd      	mov	sp, r7
   82d06:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d0a:	4770      	bx	lr

00082d0c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82d0c:	b480      	push	{r7}
   82d0e:	af00      	add	r7, sp, #0
	while (1) {
	}
   82d10:	e7fe      	b.n	82d10 <Dummy_Handler+0x4>
   82d12:	bf00      	nop

00082d14 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82d14:	b580      	push	{r7, lr}
   82d16:	b082      	sub	sp, #8
   82d18:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82d1a:	4b1e      	ldr	r3, [pc, #120]	; (82d94 <Reset_Handler+0x80>)
   82d1c:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82d1e:	4b1e      	ldr	r3, [pc, #120]	; (82d98 <Reset_Handler+0x84>)
   82d20:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82d22:	687a      	ldr	r2, [r7, #4]
   82d24:	683b      	ldr	r3, [r7, #0]
   82d26:	429a      	cmp	r2, r3
   82d28:	d00c      	beq.n	82d44 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82d2a:	e007      	b.n	82d3c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82d2c:	683b      	ldr	r3, [r7, #0]
   82d2e:	1d1a      	adds	r2, r3, #4
   82d30:	603a      	str	r2, [r7, #0]
   82d32:	687a      	ldr	r2, [r7, #4]
   82d34:	1d11      	adds	r1, r2, #4
   82d36:	6079      	str	r1, [r7, #4]
   82d38:	6812      	ldr	r2, [r2, #0]
   82d3a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82d3c:	683a      	ldr	r2, [r7, #0]
   82d3e:	4b17      	ldr	r3, [pc, #92]	; (82d9c <Reset_Handler+0x88>)
   82d40:	429a      	cmp	r2, r3
   82d42:	d3f3      	bcc.n	82d2c <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d44:	4b16      	ldr	r3, [pc, #88]	; (82da0 <Reset_Handler+0x8c>)
   82d46:	603b      	str	r3, [r7, #0]
   82d48:	e004      	b.n	82d54 <Reset_Handler+0x40>
		*pDest++ = 0;
   82d4a:	683b      	ldr	r3, [r7, #0]
   82d4c:	1d1a      	adds	r2, r3, #4
   82d4e:	603a      	str	r2, [r7, #0]
   82d50:	2200      	movs	r2, #0
   82d52:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d54:	683a      	ldr	r2, [r7, #0]
   82d56:	4b13      	ldr	r3, [pc, #76]	; (82da4 <Reset_Handler+0x90>)
   82d58:	429a      	cmp	r2, r3
   82d5a:	d3f6      	bcc.n	82d4a <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82d5c:	4b12      	ldr	r3, [pc, #72]	; (82da8 <Reset_Handler+0x94>)
   82d5e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82d60:	4a12      	ldr	r2, [pc, #72]	; (82dac <Reset_Handler+0x98>)
   82d62:	687b      	ldr	r3, [r7, #4]
   82d64:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82d6c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82d6e:	687b      	ldr	r3, [r7, #4]
   82d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82d74:	d309      	bcc.n	82d8a <Reset_Handler+0x76>
   82d76:	687a      	ldr	r2, [r7, #4]
   82d78:	4b0d      	ldr	r3, [pc, #52]	; (82db0 <Reset_Handler+0x9c>)
   82d7a:	429a      	cmp	r2, r3
   82d7c:	d805      	bhi.n	82d8a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82d7e:	4b0b      	ldr	r3, [pc, #44]	; (82dac <Reset_Handler+0x98>)
   82d80:	4a0a      	ldr	r2, [pc, #40]	; (82dac <Reset_Handler+0x98>)
   82d82:	6892      	ldr	r2, [r2, #8]
   82d84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82d88:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82d8a:	4b0a      	ldr	r3, [pc, #40]	; (82db4 <Reset_Handler+0xa0>)
   82d8c:	4798      	blx	r3

	/* Branch to main function */
	main();
   82d8e:	4b0a      	ldr	r3, [pc, #40]	; (82db8 <Reset_Handler+0xa4>)
   82d90:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82d92:	e7fe      	b.n	82d92 <Reset_Handler+0x7e>
   82d94:	00086f94 	.word	0x00086f94
   82d98:	20070000 	.word	0x20070000
   82d9c:	20070438 	.word	0x20070438
   82da0:	20070438 	.word	0x20070438
   82da4:	2007a728 	.word	0x2007a728
   82da8:	00080000 	.word	0x00080000
   82dac:	e000ed00 	.word	0xe000ed00
   82db0:	200fffff 	.word	0x200fffff
   82db4:	00086aa9 	.word	0x00086aa9
   82db8:	0008627d 	.word	0x0008627d

00082dbc <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82dbc:	b480      	push	{r7}
   82dbe:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82dc0:	4b56      	ldr	r3, [pc, #344]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82dc4:	f003 0303 	and.w	r3, r3, #3
   82dc8:	2b03      	cmp	r3, #3
   82dca:	f200 808a 	bhi.w	82ee2 <SystemCoreClockUpdate+0x126>
   82dce:	a101      	add	r1, pc, #4	; (adr r1, 82dd4 <SystemCoreClockUpdate+0x18>)
   82dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82dd4:	00082de5 	.word	0x00082de5
   82dd8:	00082e05 	.word	0x00082e05
   82ddc:	00082e55 	.word	0x00082e55
   82de0:	00082e55 	.word	0x00082e55
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82de4:	4b4e      	ldr	r3, [pc, #312]	; (82f20 <SystemCoreClockUpdate+0x164>)
   82de6:	695b      	ldr	r3, [r3, #20]
   82de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82dec:	2b00      	cmp	r3, #0
   82dee:	d004      	beq.n	82dfa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82df0:	4b4c      	ldr	r3, [pc, #304]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82df2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82df6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82df8:	e073      	b.n	82ee2 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82dfa:	4b4a      	ldr	r3, [pc, #296]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82dfc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82e00:	601a      	str	r2, [r3, #0]
		}
		break;
   82e02:	e06e      	b.n	82ee2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e04:	4b45      	ldr	r3, [pc, #276]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82e06:	6a1b      	ldr	r3, [r3, #32]
   82e08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e0c:	2b00      	cmp	r3, #0
   82e0e:	d003      	beq.n	82e18 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e10:	4b44      	ldr	r3, [pc, #272]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e12:	4a45      	ldr	r2, [pc, #276]	; (82f28 <SystemCoreClockUpdate+0x16c>)
   82e14:	601a      	str	r2, [r3, #0]
   82e16:	e01c      	b.n	82e52 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e18:	4b42      	ldr	r3, [pc, #264]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e1a:	4a44      	ldr	r2, [pc, #272]	; (82f2c <SystemCoreClockUpdate+0x170>)
   82e1c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e1e:	4b3f      	ldr	r3, [pc, #252]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82e20:	6a1b      	ldr	r3, [r3, #32]
   82e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e26:	2b10      	cmp	r3, #16
   82e28:	d004      	beq.n	82e34 <SystemCoreClockUpdate+0x78>
   82e2a:	2b20      	cmp	r3, #32
   82e2c:	d008      	beq.n	82e40 <SystemCoreClockUpdate+0x84>
   82e2e:	2b00      	cmp	r3, #0
   82e30:	d00e      	beq.n	82e50 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82e32:	e00e      	b.n	82e52 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82e34:	4b3b      	ldr	r3, [pc, #236]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e36:	681b      	ldr	r3, [r3, #0]
   82e38:	005a      	lsls	r2, r3, #1
   82e3a:	4b3a      	ldr	r3, [pc, #232]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e3c:	601a      	str	r2, [r3, #0]
				break;
   82e3e:	e008      	b.n	82e52 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82e40:	4b38      	ldr	r3, [pc, #224]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e42:	681a      	ldr	r2, [r3, #0]
   82e44:	4613      	mov	r3, r2
   82e46:	005b      	lsls	r3, r3, #1
   82e48:	441a      	add	r2, r3
   82e4a:	4b36      	ldr	r3, [pc, #216]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e4c:	601a      	str	r2, [r3, #0]
				break;
   82e4e:	e000      	b.n	82e52 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82e50:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   82e52:	e046      	b.n	82ee2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e54:	4b31      	ldr	r3, [pc, #196]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82e56:	6a1b      	ldr	r3, [r3, #32]
   82e58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82e5c:	2b00      	cmp	r3, #0
   82e5e:	d003      	beq.n	82e68 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e60:	4b30      	ldr	r3, [pc, #192]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e62:	4a31      	ldr	r2, [pc, #196]	; (82f28 <SystemCoreClockUpdate+0x16c>)
   82e64:	601a      	str	r2, [r3, #0]
   82e66:	e01c      	b.n	82ea2 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e68:	4b2e      	ldr	r3, [pc, #184]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e6a:	4a30      	ldr	r2, [pc, #192]	; (82f2c <SystemCoreClockUpdate+0x170>)
   82e6c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e6e:	4b2b      	ldr	r3, [pc, #172]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82e70:	6a1b      	ldr	r3, [r3, #32]
   82e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e76:	2b10      	cmp	r3, #16
   82e78:	d004      	beq.n	82e84 <SystemCoreClockUpdate+0xc8>
   82e7a:	2b20      	cmp	r3, #32
   82e7c:	d008      	beq.n	82e90 <SystemCoreClockUpdate+0xd4>
   82e7e:	2b00      	cmp	r3, #0
   82e80:	d00e      	beq.n	82ea0 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82e82:	e00e      	b.n	82ea2 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82e84:	4b27      	ldr	r3, [pc, #156]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e86:	681b      	ldr	r3, [r3, #0]
   82e88:	005a      	lsls	r2, r3, #1
   82e8a:	4b26      	ldr	r3, [pc, #152]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e8c:	601a      	str	r2, [r3, #0]
				break;
   82e8e:	e008      	b.n	82ea2 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82e90:	4b24      	ldr	r3, [pc, #144]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e92:	681a      	ldr	r2, [r3, #0]
   82e94:	4613      	mov	r3, r2
   82e96:	005b      	lsls	r3, r3, #1
   82e98:	441a      	add	r2, r3
   82e9a:	4b22      	ldr	r3, [pc, #136]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82e9c:	601a      	str	r2, [r3, #0]
				break;
   82e9e:	e000      	b.n	82ea2 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82ea0:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82ea2:	4b1e      	ldr	r3, [pc, #120]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ea6:	f003 0303 	and.w	r3, r3, #3
   82eaa:	2b02      	cmp	r3, #2
   82eac:	d115      	bne.n	82eda <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82eae:	4b1b      	ldr	r3, [pc, #108]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82eb2:	4b1f      	ldr	r3, [pc, #124]	; (82f30 <SystemCoreClockUpdate+0x174>)
   82eb4:	4013      	ands	r3, r2
   82eb6:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82eb8:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82eba:	4a1a      	ldr	r2, [pc, #104]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82ebc:	6812      	ldr	r2, [r2, #0]
   82ebe:	fb02 f203 	mul.w	r2, r2, r3
   82ec2:	4b18      	ldr	r3, [pc, #96]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82ec4:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82ec6:	4b17      	ldr	r3, [pc, #92]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82ec8:	681a      	ldr	r2, [r3, #0]
   82eca:	4b14      	ldr	r3, [pc, #80]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82ece:	b2db      	uxtb	r3, r3
   82ed0:	fbb2 f2f3 	udiv	r2, r2, r3
   82ed4:	4b13      	ldr	r3, [pc, #76]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82ed6:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82ed8:	e002      	b.n	82ee0 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82eda:	4b12      	ldr	r3, [pc, #72]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82edc:	4a15      	ldr	r2, [pc, #84]	; (82f34 <SystemCoreClockUpdate+0x178>)
   82ede:	601a      	str	r2, [r3, #0]
		}
		break;
   82ee0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82ee2:	4b0e      	ldr	r3, [pc, #56]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82eea:	2b70      	cmp	r3, #112	; 0x70
   82eec:	d108      	bne.n	82f00 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82eee:	4b0d      	ldr	r3, [pc, #52]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82ef0:	681a      	ldr	r2, [r3, #0]
   82ef2:	4b11      	ldr	r3, [pc, #68]	; (82f38 <SystemCoreClockUpdate+0x17c>)
   82ef4:	fba3 1302 	umull	r1, r3, r3, r2
   82ef8:	085a      	lsrs	r2, r3, #1
   82efa:	4b0a      	ldr	r3, [pc, #40]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82efc:	601a      	str	r2, [r3, #0]
   82efe:	e009      	b.n	82f14 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82f00:	4b08      	ldr	r3, [pc, #32]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82f02:	681a      	ldr	r2, [r3, #0]
   82f04:	4b05      	ldr	r3, [pc, #20]	; (82f1c <SystemCoreClockUpdate+0x160>)
   82f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82f0c:	091b      	lsrs	r3, r3, #4
   82f0e:	40da      	lsrs	r2, r3
   82f10:	4b04      	ldr	r3, [pc, #16]	; (82f24 <SystemCoreClockUpdate+0x168>)
   82f12:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82f14:	46bd      	mov	sp, r7
   82f16:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f1a:	4770      	bx	lr
   82f1c:	400e0600 	.word	0x400e0600
   82f20:	400e1a10 	.word	0x400e1a10
   82f24:	20070000 	.word	0x20070000
   82f28:	00b71b00 	.word	0x00b71b00
   82f2c:	003d0900 	.word	0x003d0900
   82f30:	07ff0000 	.word	0x07ff0000
   82f34:	0e4e1c00 	.word	0x0e4e1c00
   82f38:	aaaaaaab 	.word	0xaaaaaaab

00082f3c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82f3c:	b480      	push	{r7}
   82f3e:	b083      	sub	sp, #12
   82f40:	af00      	add	r7, sp, #0
   82f42:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82f44:	687a      	ldr	r2, [r7, #4]
   82f46:	4b1f      	ldr	r3, [pc, #124]	; (82fc4 <system_init_flash+0x88>)
   82f48:	429a      	cmp	r2, r3
   82f4a:	d806      	bhi.n	82f5a <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82f4c:	4b1e      	ldr	r3, [pc, #120]	; (82fc8 <system_init_flash+0x8c>)
   82f4e:	2200      	movs	r2, #0
   82f50:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82f52:	4b1e      	ldr	r3, [pc, #120]	; (82fcc <system_init_flash+0x90>)
   82f54:	2200      	movs	r2, #0
   82f56:	601a      	str	r2, [r3, #0]
   82f58:	e02e      	b.n	82fb8 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82f5a:	687a      	ldr	r2, [r7, #4]
   82f5c:	4b1c      	ldr	r3, [pc, #112]	; (82fd0 <system_init_flash+0x94>)
   82f5e:	429a      	cmp	r2, r3
   82f60:	d808      	bhi.n	82f74 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82f62:	4b19      	ldr	r3, [pc, #100]	; (82fc8 <system_init_flash+0x8c>)
   82f64:	f44f 7280 	mov.w	r2, #256	; 0x100
   82f68:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82f6a:	4b18      	ldr	r3, [pc, #96]	; (82fcc <system_init_flash+0x90>)
   82f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
   82f70:	601a      	str	r2, [r3, #0]
   82f72:	e021      	b.n	82fb8 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82f74:	687a      	ldr	r2, [r7, #4]
   82f76:	4b17      	ldr	r3, [pc, #92]	; (82fd4 <system_init_flash+0x98>)
   82f78:	429a      	cmp	r2, r3
   82f7a:	d808      	bhi.n	82f8e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82f7c:	4b12      	ldr	r3, [pc, #72]	; (82fc8 <system_init_flash+0x8c>)
   82f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f82:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82f84:	4b11      	ldr	r3, [pc, #68]	; (82fcc <system_init_flash+0x90>)
   82f86:	f44f 7200 	mov.w	r2, #512	; 0x200
   82f8a:	601a      	str	r2, [r3, #0]
   82f8c:	e014      	b.n	82fb8 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82f8e:	687a      	ldr	r2, [r7, #4]
   82f90:	4b11      	ldr	r3, [pc, #68]	; (82fd8 <system_init_flash+0x9c>)
   82f92:	429a      	cmp	r2, r3
   82f94:	d808      	bhi.n	82fa8 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82f96:	4b0c      	ldr	r3, [pc, #48]	; (82fc8 <system_init_flash+0x8c>)
   82f98:	f44f 7240 	mov.w	r2, #768	; 0x300
   82f9c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82f9e:	4b0b      	ldr	r3, [pc, #44]	; (82fcc <system_init_flash+0x90>)
   82fa0:	f44f 7240 	mov.w	r2, #768	; 0x300
   82fa4:	601a      	str	r2, [r3, #0]
   82fa6:	e007      	b.n	82fb8 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82fa8:	4b07      	ldr	r3, [pc, #28]	; (82fc8 <system_init_flash+0x8c>)
   82faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82fae:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82fb0:	4b06      	ldr	r3, [pc, #24]	; (82fcc <system_init_flash+0x90>)
   82fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82fb6:	601a      	str	r2, [r3, #0]
	}
}
   82fb8:	370c      	adds	r7, #12
   82fba:	46bd      	mov	sp, r7
   82fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82fc0:	4770      	bx	lr
   82fc2:	bf00      	nop
   82fc4:	0157529f 	.word	0x0157529f
   82fc8:	400e0a00 	.word	0x400e0a00
   82fcc:	400e0c00 	.word	0x400e0c00
   82fd0:	0206cc7f 	.word	0x0206cc7f
   82fd4:	0328b73f 	.word	0x0328b73f
   82fd8:	04a62f7f 	.word	0x04a62f7f

00082fdc <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82fdc:	b480      	push	{r7}
   82fde:	b083      	sub	sp, #12
   82fe0:	af00      	add	r7, sp, #0
   82fe2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82fe4:	687b      	ldr	r3, [r7, #4]
   82fe6:	f103 0208 	add.w	r2, r3, #8
   82fea:	687b      	ldr	r3, [r7, #4]
   82fec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82fee:	687b      	ldr	r3, [r7, #4]
   82ff0:	f04f 32ff 	mov.w	r2, #4294967295
   82ff4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82ff6:	687b      	ldr	r3, [r7, #4]
   82ff8:	f103 0208 	add.w	r2, r3, #8
   82ffc:	687b      	ldr	r3, [r7, #4]
   82ffe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83000:	687b      	ldr	r3, [r7, #4]
   83002:	f103 0208 	add.w	r2, r3, #8
   83006:	687b      	ldr	r3, [r7, #4]
   83008:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   8300a:	687b      	ldr	r3, [r7, #4]
   8300c:	2200      	movs	r2, #0
   8300e:	601a      	str	r2, [r3, #0]
}
   83010:	370c      	adds	r7, #12
   83012:	46bd      	mov	sp, r7
   83014:	f85d 7b04 	ldr.w	r7, [sp], #4
   83018:	4770      	bx	lr
   8301a:	bf00      	nop

0008301c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   8301c:	b480      	push	{r7}
   8301e:	b083      	sub	sp, #12
   83020:	af00      	add	r7, sp, #0
   83022:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   83024:	687b      	ldr	r3, [r7, #4]
   83026:	2200      	movs	r2, #0
   83028:	611a      	str	r2, [r3, #16]
}
   8302a:	370c      	adds	r7, #12
   8302c:	46bd      	mov	sp, r7
   8302e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83032:	4770      	bx	lr

00083034 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   83034:	b480      	push	{r7}
   83036:	b085      	sub	sp, #20
   83038:	af00      	add	r7, sp, #0
   8303a:	6078      	str	r0, [r7, #4]
   8303c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   8303e:	687b      	ldr	r3, [r7, #4]
   83040:	685b      	ldr	r3, [r3, #4]
   83042:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   83044:	683b      	ldr	r3, [r7, #0]
   83046:	68fa      	ldr	r2, [r7, #12]
   83048:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8304a:	68fb      	ldr	r3, [r7, #12]
   8304c:	689a      	ldr	r2, [r3, #8]
   8304e:	683b      	ldr	r3, [r7, #0]
   83050:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   83052:	68fb      	ldr	r3, [r7, #12]
   83054:	689b      	ldr	r3, [r3, #8]
   83056:	683a      	ldr	r2, [r7, #0]
   83058:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8305a:	68fb      	ldr	r3, [r7, #12]
   8305c:	683a      	ldr	r2, [r7, #0]
   8305e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   83060:	683b      	ldr	r3, [r7, #0]
   83062:	687a      	ldr	r2, [r7, #4]
   83064:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   83066:	687b      	ldr	r3, [r7, #4]
   83068:	681b      	ldr	r3, [r3, #0]
   8306a:	1c5a      	adds	r2, r3, #1
   8306c:	687b      	ldr	r3, [r7, #4]
   8306e:	601a      	str	r2, [r3, #0]
}
   83070:	3714      	adds	r7, #20
   83072:	46bd      	mov	sp, r7
   83074:	f85d 7b04 	ldr.w	r7, [sp], #4
   83078:	4770      	bx	lr
   8307a:	bf00      	nop

0008307c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   8307c:	b480      	push	{r7}
   8307e:	b085      	sub	sp, #20
   83080:	af00      	add	r7, sp, #0
   83082:	6078      	str	r0, [r7, #4]
   83084:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   83086:	683b      	ldr	r3, [r7, #0]
   83088:	681b      	ldr	r3, [r3, #0]
   8308a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8308c:	68bb      	ldr	r3, [r7, #8]
   8308e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83092:	d103      	bne.n	8309c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   83094:	687b      	ldr	r3, [r7, #4]
   83096:	691b      	ldr	r3, [r3, #16]
   83098:	60fb      	str	r3, [r7, #12]
   8309a:	e00c      	b.n	830b6 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   8309c:	687b      	ldr	r3, [r7, #4]
   8309e:	3308      	adds	r3, #8
   830a0:	60fb      	str	r3, [r7, #12]
   830a2:	e002      	b.n	830aa <vListInsert+0x2e>
   830a4:	68fb      	ldr	r3, [r7, #12]
   830a6:	685b      	ldr	r3, [r3, #4]
   830a8:	60fb      	str	r3, [r7, #12]
   830aa:	68fb      	ldr	r3, [r7, #12]
   830ac:	685b      	ldr	r3, [r3, #4]
   830ae:	681a      	ldr	r2, [r3, #0]
   830b0:	68bb      	ldr	r3, [r7, #8]
   830b2:	429a      	cmp	r2, r3
   830b4:	d9f6      	bls.n	830a4 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   830b6:	68fb      	ldr	r3, [r7, #12]
   830b8:	685a      	ldr	r2, [r3, #4]
   830ba:	683b      	ldr	r3, [r7, #0]
   830bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   830be:	683b      	ldr	r3, [r7, #0]
   830c0:	685b      	ldr	r3, [r3, #4]
   830c2:	683a      	ldr	r2, [r7, #0]
   830c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   830c6:	683b      	ldr	r3, [r7, #0]
   830c8:	68fa      	ldr	r2, [r7, #12]
   830ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   830cc:	68fb      	ldr	r3, [r7, #12]
   830ce:	683a      	ldr	r2, [r7, #0]
   830d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   830d2:	683b      	ldr	r3, [r7, #0]
   830d4:	687a      	ldr	r2, [r7, #4]
   830d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   830d8:	687b      	ldr	r3, [r7, #4]
   830da:	681b      	ldr	r3, [r3, #0]
   830dc:	1c5a      	adds	r2, r3, #1
   830de:	687b      	ldr	r3, [r7, #4]
   830e0:	601a      	str	r2, [r3, #0]
}
   830e2:	3714      	adds	r7, #20
   830e4:	46bd      	mov	sp, r7
   830e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   830ea:	4770      	bx	lr

000830ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   830ec:	b480      	push	{r7}
   830ee:	b085      	sub	sp, #20
   830f0:	af00      	add	r7, sp, #0
   830f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   830f4:	687b      	ldr	r3, [r7, #4]
   830f6:	691b      	ldr	r3, [r3, #16]
   830f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   830fa:	687b      	ldr	r3, [r7, #4]
   830fc:	685b      	ldr	r3, [r3, #4]
   830fe:	687a      	ldr	r2, [r7, #4]
   83100:	6892      	ldr	r2, [r2, #8]
   83102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   83104:	687b      	ldr	r3, [r7, #4]
   83106:	689b      	ldr	r3, [r3, #8]
   83108:	687a      	ldr	r2, [r7, #4]
   8310a:	6852      	ldr	r2, [r2, #4]
   8310c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8310e:	68fb      	ldr	r3, [r7, #12]
   83110:	685a      	ldr	r2, [r3, #4]
   83112:	687b      	ldr	r3, [r7, #4]
   83114:	429a      	cmp	r2, r3
   83116:	d103      	bne.n	83120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   83118:	687b      	ldr	r3, [r7, #4]
   8311a:	689a      	ldr	r2, [r3, #8]
   8311c:	68fb      	ldr	r3, [r7, #12]
   8311e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   83120:	687b      	ldr	r3, [r7, #4]
   83122:	2200      	movs	r2, #0
   83124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   83126:	68fb      	ldr	r3, [r7, #12]
   83128:	681b      	ldr	r3, [r3, #0]
   8312a:	1e5a      	subs	r2, r3, #1
   8312c:	68fb      	ldr	r3, [r7, #12]
   8312e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   83130:	68fb      	ldr	r3, [r7, #12]
   83132:	681b      	ldr	r3, [r3, #0]
}
   83134:	4618      	mov	r0, r3
   83136:	3714      	adds	r7, #20
   83138:	46bd      	mov	sp, r7
   8313a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8313e:	4770      	bx	lr

00083140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   83140:	b480      	push	{r7}
   83142:	b085      	sub	sp, #20
   83144:	af00      	add	r7, sp, #0
   83146:	60f8      	str	r0, [r7, #12]
   83148:	60b9      	str	r1, [r7, #8]
   8314a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   8314c:	68fb      	ldr	r3, [r7, #12]
   8314e:	3b04      	subs	r3, #4
   83150:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   83152:	68fb      	ldr	r3, [r7, #12]
   83154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   83158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   8315a:	68fb      	ldr	r3, [r7, #12]
   8315c:	3b04      	subs	r3, #4
   8315e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   83160:	68ba      	ldr	r2, [r7, #8]
   83162:	68fb      	ldr	r3, [r7, #12]
   83164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   83166:	68fb      	ldr	r3, [r7, #12]
   83168:	3b04      	subs	r3, #4
   8316a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   8316c:	4a09      	ldr	r2, [pc, #36]	; (83194 <pxPortInitialiseStack+0x54>)
   8316e:	68fb      	ldr	r3, [r7, #12]
   83170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   83172:	68fb      	ldr	r3, [r7, #12]
   83174:	3b14      	subs	r3, #20
   83176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   83178:	687a      	ldr	r2, [r7, #4]
   8317a:	68fb      	ldr	r3, [r7, #12]
   8317c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   8317e:	68fb      	ldr	r3, [r7, #12]
   83180:	3b20      	subs	r3, #32
   83182:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   83184:	68fb      	ldr	r3, [r7, #12]
}
   83186:	4618      	mov	r0, r3
   83188:	3714      	adds	r7, #20
   8318a:	46bd      	mov	sp, r7
   8318c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83190:	4770      	bx	lr
   83192:	bf00      	nop
   83194:	00083199 	.word	0x00083199

00083198 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   83198:	b580      	push	{r7, lr}
   8319a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   8319c:	4b05      	ldr	r3, [pc, #20]	; (831b4 <prvTaskExitError+0x1c>)
   8319e:	681b      	ldr	r3, [r3, #0]
   831a0:	f1b3 3fff 	cmp.w	r3, #4294967295
   831a4:	d002      	beq.n	831ac <prvTaskExitError+0x14>
   831a6:	4b04      	ldr	r3, [pc, #16]	; (831b8 <prvTaskExitError+0x20>)
   831a8:	4798      	blx	r3
   831aa:	e7fe      	b.n	831aa <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   831ac:	4b02      	ldr	r3, [pc, #8]	; (831b8 <prvTaskExitError+0x20>)
   831ae:	4798      	blx	r3
	for( ;; );
   831b0:	e7fe      	b.n	831b0 <prvTaskExitError+0x18>
   831b2:	bf00      	nop
   831b4:	20070004 	.word	0x20070004
   831b8:	00083365 	.word	0x00083365

000831bc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   831bc:	4b07      	ldr	r3, [pc, #28]	; (831dc <pxCurrentTCBConst2>)
   831be:	6819      	ldr	r1, [r3, #0]
   831c0:	6808      	ldr	r0, [r1, #0]
   831c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   831c6:	f380 8809 	msr	PSP, r0
   831ca:	f3bf 8f6f 	isb	sy
   831ce:	f04f 0000 	mov.w	r0, #0
   831d2:	f380 8811 	msr	BASEPRI, r0
   831d6:	f04e 0e0d 	orr.w	lr, lr, #13
   831da:	4770      	bx	lr

000831dc <pxCurrentTCBConst2>:
   831dc:	2007a508 	.word	0x2007a508

000831e0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   831e0:	4806      	ldr	r0, [pc, #24]	; (831fc <prvPortStartFirstTask+0x1c>)
   831e2:	6800      	ldr	r0, [r0, #0]
   831e4:	6800      	ldr	r0, [r0, #0]
   831e6:	f380 8808 	msr	MSP, r0
   831ea:	b662      	cpsie	i
   831ec:	b661      	cpsie	f
   831ee:	f3bf 8f4f 	dsb	sy
   831f2:	f3bf 8f6f 	isb	sy
   831f6:	df00      	svc	0
   831f8:	bf00      	nop
   831fa:	0000      	.short	0x0000
   831fc:	e000ed08 	.word	0xe000ed08

00083200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   83200:	b580      	push	{r7, lr}
   83202:	b084      	sub	sp, #16
   83204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   83206:	4b28      	ldr	r3, [pc, #160]	; (832a8 <xPortStartScheduler+0xa8>)
   83208:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   8320a:	68fb      	ldr	r3, [r7, #12]
   8320c:	781b      	ldrb	r3, [r3, #0]
   8320e:	b2db      	uxtb	r3, r3
   83210:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   83212:	68fb      	ldr	r3, [r7, #12]
   83214:	22ff      	movs	r2, #255	; 0xff
   83216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   83218:	68fb      	ldr	r3, [r7, #12]
   8321a:	781b      	ldrb	r3, [r3, #0]
   8321c:	b2db      	uxtb	r3, r3
   8321e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   83220:	79fb      	ldrb	r3, [r7, #7]
   83222:	b2db      	uxtb	r3, r3
   83224:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   83228:	b2da      	uxtb	r2, r3
   8322a:	4b20      	ldr	r3, [pc, #128]	; (832ac <xPortStartScheduler+0xac>)
   8322c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   8322e:	4b20      	ldr	r3, [pc, #128]	; (832b0 <xPortStartScheduler+0xb0>)
   83230:	2207      	movs	r2, #7
   83232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83234:	e009      	b.n	8324a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   83236:	4b1e      	ldr	r3, [pc, #120]	; (832b0 <xPortStartScheduler+0xb0>)
   83238:	681b      	ldr	r3, [r3, #0]
   8323a:	1e5a      	subs	r2, r3, #1
   8323c:	4b1c      	ldr	r3, [pc, #112]	; (832b0 <xPortStartScheduler+0xb0>)
   8323e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   83240:	79fb      	ldrb	r3, [r7, #7]
   83242:	b2db      	uxtb	r3, r3
   83244:	005b      	lsls	r3, r3, #1
   83246:	b2db      	uxtb	r3, r3
   83248:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8324a:	79fb      	ldrb	r3, [r7, #7]
   8324c:	b2db      	uxtb	r3, r3
   8324e:	b2db      	uxtb	r3, r3
   83250:	b25b      	sxtb	r3, r3
   83252:	2b00      	cmp	r3, #0
   83254:	dbef      	blt.n	83236 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   83256:	4b16      	ldr	r3, [pc, #88]	; (832b0 <xPortStartScheduler+0xb0>)
   83258:	681b      	ldr	r3, [r3, #0]
   8325a:	021a      	lsls	r2, r3, #8
   8325c:	4b14      	ldr	r3, [pc, #80]	; (832b0 <xPortStartScheduler+0xb0>)
   8325e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   83260:	4b13      	ldr	r3, [pc, #76]	; (832b0 <xPortStartScheduler+0xb0>)
   83262:	681b      	ldr	r3, [r3, #0]
   83264:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   83268:	4b11      	ldr	r3, [pc, #68]	; (832b0 <xPortStartScheduler+0xb0>)
   8326a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   8326c:	68bb      	ldr	r3, [r7, #8]
   8326e:	b2da      	uxtb	r2, r3
   83270:	68fb      	ldr	r3, [r7, #12]
   83272:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   83274:	4b0f      	ldr	r3, [pc, #60]	; (832b4 <xPortStartScheduler+0xb4>)
   83276:	4a0f      	ldr	r2, [pc, #60]	; (832b4 <xPortStartScheduler+0xb4>)
   83278:	6812      	ldr	r2, [r2, #0]
   8327a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   8327e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   83280:	4b0c      	ldr	r3, [pc, #48]	; (832b4 <xPortStartScheduler+0xb4>)
   83282:	4a0c      	ldr	r2, [pc, #48]	; (832b4 <xPortStartScheduler+0xb4>)
   83284:	6812      	ldr	r2, [r2, #0]
   83286:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8328a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   8328c:	4b0a      	ldr	r3, [pc, #40]	; (832b8 <xPortStartScheduler+0xb8>)
   8328e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   83290:	4b0a      	ldr	r3, [pc, #40]	; (832bc <xPortStartScheduler+0xbc>)
   83292:	2200      	movs	r2, #0
   83294:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   83296:	4b0a      	ldr	r3, [pc, #40]	; (832c0 <xPortStartScheduler+0xc0>)
   83298:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   8329a:	4b0a      	ldr	r3, [pc, #40]	; (832c4 <xPortStartScheduler+0xc4>)
   8329c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   8329e:	2300      	movs	r3, #0
}
   832a0:	4618      	mov	r0, r3
   832a2:	3710      	adds	r7, #16
   832a4:	46bd      	mov	sp, r7
   832a6:	bd80      	pop	{r7, pc}
   832a8:	e000e400 	.word	0xe000e400
   832ac:	200704e8 	.word	0x200704e8
   832b0:	200704ec 	.word	0x200704ec
   832b4:	e000ed20 	.word	0xe000ed20
   832b8:	000833f9 	.word	0x000833f9
   832bc:	20070004 	.word	0x20070004
   832c0:	000831e1 	.word	0x000831e1
   832c4:	00083199 	.word	0x00083199

000832c8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   832c8:	b480      	push	{r7}
   832ca:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   832cc:	4b05      	ldr	r3, [pc, #20]	; (832e4 <vPortYield+0x1c>)
   832ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   832d2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   832d4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   832d8:	f3bf 8f6f 	isb	sy
}
   832dc:	46bd      	mov	sp, r7
   832de:	f85d 7b04 	ldr.w	r7, [sp], #4
   832e2:	4770      	bx	lr
   832e4:	e000ed04 	.word	0xe000ed04

000832e8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   832e8:	b580      	push	{r7, lr}
   832ea:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   832ec:	4b0c      	ldr	r3, [pc, #48]	; (83320 <vPortEnterCritical+0x38>)
   832ee:	4798      	blx	r3
	uxCriticalNesting++;
   832f0:	4b0c      	ldr	r3, [pc, #48]	; (83324 <vPortEnterCritical+0x3c>)
   832f2:	681b      	ldr	r3, [r3, #0]
   832f4:	1c5a      	adds	r2, r3, #1
   832f6:	4b0b      	ldr	r3, [pc, #44]	; (83324 <vPortEnterCritical+0x3c>)
   832f8:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   832fa:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   832fe:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   83302:	4b08      	ldr	r3, [pc, #32]	; (83324 <vPortEnterCritical+0x3c>)
   83304:	681b      	ldr	r3, [r3, #0]
   83306:	2b01      	cmp	r3, #1
   83308:	d108      	bne.n	8331c <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   8330a:	4b07      	ldr	r3, [pc, #28]	; (83328 <vPortEnterCritical+0x40>)
   8330c:	681b      	ldr	r3, [r3, #0]
   8330e:	f003 031f 	and.w	r3, r3, #31
   83312:	2b00      	cmp	r3, #0
   83314:	d002      	beq.n	8331c <vPortEnterCritical+0x34>
   83316:	4b02      	ldr	r3, [pc, #8]	; (83320 <vPortEnterCritical+0x38>)
   83318:	4798      	blx	r3
   8331a:	e7fe      	b.n	8331a <vPortEnterCritical+0x32>
	}
}
   8331c:	bd80      	pop	{r7, pc}
   8331e:	bf00      	nop
   83320:	00083365 	.word	0x00083365
   83324:	20070004 	.word	0x20070004
   83328:	e000ed04 	.word	0xe000ed04

0008332c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   8332c:	b580      	push	{r7, lr}
   8332e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   83330:	4b09      	ldr	r3, [pc, #36]	; (83358 <vPortExitCritical+0x2c>)
   83332:	681b      	ldr	r3, [r3, #0]
   83334:	2b00      	cmp	r3, #0
   83336:	d102      	bne.n	8333e <vPortExitCritical+0x12>
   83338:	4b08      	ldr	r3, [pc, #32]	; (8335c <vPortExitCritical+0x30>)
   8333a:	4798      	blx	r3
   8333c:	e7fe      	b.n	8333c <vPortExitCritical+0x10>
	uxCriticalNesting--;
   8333e:	4b06      	ldr	r3, [pc, #24]	; (83358 <vPortExitCritical+0x2c>)
   83340:	681b      	ldr	r3, [r3, #0]
   83342:	1e5a      	subs	r2, r3, #1
   83344:	4b04      	ldr	r3, [pc, #16]	; (83358 <vPortExitCritical+0x2c>)
   83346:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   83348:	4b03      	ldr	r3, [pc, #12]	; (83358 <vPortExitCritical+0x2c>)
   8334a:	681b      	ldr	r3, [r3, #0]
   8334c:	2b00      	cmp	r3, #0
   8334e:	d102      	bne.n	83356 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   83350:	2000      	movs	r0, #0
   83352:	4b03      	ldr	r3, [pc, #12]	; (83360 <vPortExitCritical+0x34>)
   83354:	4798      	blx	r3
	}
}
   83356:	bd80      	pop	{r7, pc}
   83358:	20070004 	.word	0x20070004
   8335c:	00083365 	.word	0x00083365
   83360:	00083379 	.word	0x00083379

00083364 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   83364:	f3ef 8011 	mrs	r0, BASEPRI
   83368:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8336c:	f381 8811 	msr	BASEPRI, r1
   83370:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   83372:	2300      	movs	r3, #0
}
   83374:	4618      	mov	r0, r3
   83376:	bf00      	nop

00083378 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   83378:	f380 8811 	msr	BASEPRI, r0
   8337c:	4770      	bx	lr
   8337e:	bf00      	nop

00083380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   83380:	f3ef 8009 	mrs	r0, PSP
   83384:	f3bf 8f6f 	isb	sy
   83388:	4b0d      	ldr	r3, [pc, #52]	; (833c0 <pxCurrentTCBConst>)
   8338a:	681a      	ldr	r2, [r3, #0]
   8338c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83390:	6010      	str	r0, [r2, #0]
   83392:	e92d 4008 	stmdb	sp!, {r3, lr}
   83396:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8339a:	f380 8811 	msr	BASEPRI, r0
   8339e:	f001 f98d 	bl	846bc <vTaskSwitchContext>
   833a2:	f04f 0000 	mov.w	r0, #0
   833a6:	f380 8811 	msr	BASEPRI, r0
   833aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   833ae:	6819      	ldr	r1, [r3, #0]
   833b0:	6808      	ldr	r0, [r1, #0]
   833b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   833b6:	f380 8809 	msr	PSP, r0
   833ba:	f3bf 8f6f 	isb	sy
   833be:	4770      	bx	lr

000833c0 <pxCurrentTCBConst>:
   833c0:	2007a508 	.word	0x2007a508

000833c4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   833c4:	b580      	push	{r7, lr}
   833c6:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   833c8:	4b07      	ldr	r3, [pc, #28]	; (833e8 <SysTick_Handler+0x24>)
   833ca:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   833cc:	4b07      	ldr	r3, [pc, #28]	; (833ec <SysTick_Handler+0x28>)
   833ce:	4798      	blx	r3
   833d0:	4603      	mov	r3, r0
   833d2:	2b00      	cmp	r3, #0
   833d4:	d003      	beq.n	833de <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   833d6:	4b06      	ldr	r3, [pc, #24]	; (833f0 <SysTick_Handler+0x2c>)
   833d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   833dc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   833de:	2000      	movs	r0, #0
   833e0:	4b04      	ldr	r3, [pc, #16]	; (833f4 <SysTick_Handler+0x30>)
   833e2:	4798      	blx	r3
}
   833e4:	bd80      	pop	{r7, pc}
   833e6:	bf00      	nop
   833e8:	00083365 	.word	0x00083365
   833ec:	00084541 	.word	0x00084541
   833f0:	e000ed04 	.word	0xe000ed04
   833f4:	00083379 	.word	0x00083379

000833f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   833f8:	b480      	push	{r7}
   833fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   833fc:	4b07      	ldr	r3, [pc, #28]	; (8341c <vPortSetupTimerInterrupt+0x24>)
   833fe:	4a08      	ldr	r2, [pc, #32]	; (83420 <vPortSetupTimerInterrupt+0x28>)
   83400:	6811      	ldr	r1, [r2, #0]
   83402:	4a08      	ldr	r2, [pc, #32]	; (83424 <vPortSetupTimerInterrupt+0x2c>)
   83404:	fba2 0201 	umull	r0, r2, r2, r1
   83408:	08d2      	lsrs	r2, r2, #3
   8340a:	3a01      	subs	r2, #1
   8340c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   8340e:	4b06      	ldr	r3, [pc, #24]	; (83428 <vPortSetupTimerInterrupt+0x30>)
   83410:	2207      	movs	r2, #7
   83412:	601a      	str	r2, [r3, #0]
}
   83414:	46bd      	mov	sp, r7
   83416:	f85d 7b04 	ldr.w	r7, [sp], #4
   8341a:	4770      	bx	lr
   8341c:	e000e014 	.word	0xe000e014
   83420:	20070000 	.word	0x20070000
   83424:	cccccccd 	.word	0xcccccccd
   83428:	e000e010 	.word	0xe000e010

0008342c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   8342c:	b580      	push	{r7, lr}
   8342e:	b082      	sub	sp, #8
   83430:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   83432:	f3ef 8305 	mrs	r3, IPSR
   83436:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   83438:	687b      	ldr	r3, [r7, #4]
   8343a:	2b0f      	cmp	r3, #15
   8343c:	d90c      	bls.n	83458 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   8343e:	4a0d      	ldr	r2, [pc, #52]	; (83474 <vPortValidateInterruptPriority+0x48>)
   83440:	687b      	ldr	r3, [r7, #4]
   83442:	4413      	add	r3, r2
   83444:	781b      	ldrb	r3, [r3, #0]
   83446:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83448:	4b0b      	ldr	r3, [pc, #44]	; (83478 <vPortValidateInterruptPriority+0x4c>)
   8344a:	781b      	ldrb	r3, [r3, #0]
   8344c:	78fa      	ldrb	r2, [r7, #3]
   8344e:	429a      	cmp	r2, r3
   83450:	d202      	bcs.n	83458 <vPortValidateInterruptPriority+0x2c>
   83452:	4b0a      	ldr	r3, [pc, #40]	; (8347c <vPortValidateInterruptPriority+0x50>)
   83454:	4798      	blx	r3
   83456:	e7fe      	b.n	83456 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   83458:	4b09      	ldr	r3, [pc, #36]	; (83480 <vPortValidateInterruptPriority+0x54>)
   8345a:	681b      	ldr	r3, [r3, #0]
   8345c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   83460:	4b08      	ldr	r3, [pc, #32]	; (83484 <vPortValidateInterruptPriority+0x58>)
   83462:	681b      	ldr	r3, [r3, #0]
   83464:	429a      	cmp	r2, r3
   83466:	d902      	bls.n	8346e <vPortValidateInterruptPriority+0x42>
   83468:	4b04      	ldr	r3, [pc, #16]	; (8347c <vPortValidateInterruptPriority+0x50>)
   8346a:	4798      	blx	r3
   8346c:	e7fe      	b.n	8346c <vPortValidateInterruptPriority+0x40>
	}
   8346e:	3708      	adds	r7, #8
   83470:	46bd      	mov	sp, r7
   83472:	bd80      	pop	{r7, pc}
   83474:	e000e3f0 	.word	0xe000e3f0
   83478:	200704e8 	.word	0x200704e8
   8347c:	00083365 	.word	0x00083365
   83480:	e000ed0c 	.word	0xe000ed0c
   83484:	200704ec 	.word	0x200704ec

00083488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   83488:	b580      	push	{r7, lr}
   8348a:	b086      	sub	sp, #24
   8348c:	af00      	add	r7, sp, #0
   8348e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   83490:	2300      	movs	r3, #0
   83492:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   83494:	4b4f      	ldr	r3, [pc, #316]	; (835d4 <pvPortMalloc+0x14c>)
   83496:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   83498:	4b4f      	ldr	r3, [pc, #316]	; (835d8 <pvPortMalloc+0x150>)
   8349a:	681b      	ldr	r3, [r3, #0]
   8349c:	2b00      	cmp	r3, #0
   8349e:	d101      	bne.n	834a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   834a0:	4b4e      	ldr	r3, [pc, #312]	; (835dc <pvPortMalloc+0x154>)
   834a2:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   834a4:	4b4e      	ldr	r3, [pc, #312]	; (835e0 <pvPortMalloc+0x158>)
   834a6:	681a      	ldr	r2, [r3, #0]
   834a8:	687b      	ldr	r3, [r7, #4]
   834aa:	4013      	ands	r3, r2
   834ac:	2b00      	cmp	r3, #0
   834ae:	d17d      	bne.n	835ac <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   834b0:	687b      	ldr	r3, [r7, #4]
   834b2:	2b00      	cmp	r3, #0
   834b4:	d015      	beq.n	834e2 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   834b6:	2308      	movs	r3, #8
   834b8:	687a      	ldr	r2, [r7, #4]
   834ba:	4413      	add	r3, r2
   834bc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   834be:	687b      	ldr	r3, [r7, #4]
   834c0:	f003 0307 	and.w	r3, r3, #7
   834c4:	2b00      	cmp	r3, #0
   834c6:	d00c      	beq.n	834e2 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   834c8:	687b      	ldr	r3, [r7, #4]
   834ca:	f023 0307 	bic.w	r3, r3, #7
   834ce:	3308      	adds	r3, #8
   834d0:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   834d2:	687b      	ldr	r3, [r7, #4]
   834d4:	f003 0307 	and.w	r3, r3, #7
   834d8:	2b00      	cmp	r3, #0
   834da:	d002      	beq.n	834e2 <pvPortMalloc+0x5a>
   834dc:	4b41      	ldr	r3, [pc, #260]	; (835e4 <pvPortMalloc+0x15c>)
   834de:	4798      	blx	r3
   834e0:	e7fe      	b.n	834e0 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   834e2:	687b      	ldr	r3, [r7, #4]
   834e4:	2b00      	cmp	r3, #0
   834e6:	d061      	beq.n	835ac <pvPortMalloc+0x124>
   834e8:	4b3f      	ldr	r3, [pc, #252]	; (835e8 <pvPortMalloc+0x160>)
   834ea:	681b      	ldr	r3, [r3, #0]
   834ec:	687a      	ldr	r2, [r7, #4]
   834ee:	429a      	cmp	r2, r3
   834f0:	d85c      	bhi.n	835ac <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   834f2:	4b3e      	ldr	r3, [pc, #248]	; (835ec <pvPortMalloc+0x164>)
   834f4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   834f6:	4b3d      	ldr	r3, [pc, #244]	; (835ec <pvPortMalloc+0x164>)
   834f8:	681b      	ldr	r3, [r3, #0]
   834fa:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   834fc:	e004      	b.n	83508 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   834fe:	697b      	ldr	r3, [r7, #20]
   83500:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   83502:	697b      	ldr	r3, [r7, #20]
   83504:	681b      	ldr	r3, [r3, #0]
   83506:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83508:	697b      	ldr	r3, [r7, #20]
   8350a:	685a      	ldr	r2, [r3, #4]
   8350c:	687b      	ldr	r3, [r7, #4]
   8350e:	429a      	cmp	r2, r3
   83510:	d203      	bcs.n	8351a <pvPortMalloc+0x92>
   83512:	697b      	ldr	r3, [r7, #20]
   83514:	681b      	ldr	r3, [r3, #0]
   83516:	2b00      	cmp	r3, #0
   83518:	d1f1      	bne.n	834fe <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   8351a:	4b2f      	ldr	r3, [pc, #188]	; (835d8 <pvPortMalloc+0x150>)
   8351c:	681b      	ldr	r3, [r3, #0]
   8351e:	697a      	ldr	r2, [r7, #20]
   83520:	429a      	cmp	r2, r3
   83522:	d043      	beq.n	835ac <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   83524:	693b      	ldr	r3, [r7, #16]
   83526:	681a      	ldr	r2, [r3, #0]
   83528:	2308      	movs	r3, #8
   8352a:	4413      	add	r3, r2
   8352c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8352e:	697b      	ldr	r3, [r7, #20]
   83530:	681a      	ldr	r2, [r3, #0]
   83532:	693b      	ldr	r3, [r7, #16]
   83534:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   83536:	697b      	ldr	r3, [r7, #20]
   83538:	685a      	ldr	r2, [r3, #4]
   8353a:	687b      	ldr	r3, [r7, #4]
   8353c:	1ad2      	subs	r2, r2, r3
   8353e:	2308      	movs	r3, #8
   83540:	005b      	lsls	r3, r3, #1
   83542:	429a      	cmp	r2, r3
   83544:	d917      	bls.n	83576 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   83546:	697a      	ldr	r2, [r7, #20]
   83548:	687b      	ldr	r3, [r7, #4]
   8354a:	4413      	add	r3, r2
   8354c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8354e:	68bb      	ldr	r3, [r7, #8]
   83550:	f003 0307 	and.w	r3, r3, #7
   83554:	2b00      	cmp	r3, #0
   83556:	d002      	beq.n	8355e <pvPortMalloc+0xd6>
   83558:	4b22      	ldr	r3, [pc, #136]	; (835e4 <pvPortMalloc+0x15c>)
   8355a:	4798      	blx	r3
   8355c:	e7fe      	b.n	8355c <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8355e:	697b      	ldr	r3, [r7, #20]
   83560:	685a      	ldr	r2, [r3, #4]
   83562:	687b      	ldr	r3, [r7, #4]
   83564:	1ad2      	subs	r2, r2, r3
   83566:	68bb      	ldr	r3, [r7, #8]
   83568:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   8356a:	697b      	ldr	r3, [r7, #20]
   8356c:	687a      	ldr	r2, [r7, #4]
   8356e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   83570:	68b8      	ldr	r0, [r7, #8]
   83572:	4b1f      	ldr	r3, [pc, #124]	; (835f0 <pvPortMalloc+0x168>)
   83574:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   83576:	4b1c      	ldr	r3, [pc, #112]	; (835e8 <pvPortMalloc+0x160>)
   83578:	681a      	ldr	r2, [r3, #0]
   8357a:	697b      	ldr	r3, [r7, #20]
   8357c:	685b      	ldr	r3, [r3, #4]
   8357e:	1ad2      	subs	r2, r2, r3
   83580:	4b19      	ldr	r3, [pc, #100]	; (835e8 <pvPortMalloc+0x160>)
   83582:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   83584:	4b18      	ldr	r3, [pc, #96]	; (835e8 <pvPortMalloc+0x160>)
   83586:	681a      	ldr	r2, [r3, #0]
   83588:	4b1a      	ldr	r3, [pc, #104]	; (835f4 <pvPortMalloc+0x16c>)
   8358a:	681b      	ldr	r3, [r3, #0]
   8358c:	429a      	cmp	r2, r3
   8358e:	d203      	bcs.n	83598 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   83590:	4b15      	ldr	r3, [pc, #84]	; (835e8 <pvPortMalloc+0x160>)
   83592:	681a      	ldr	r2, [r3, #0]
   83594:	4b17      	ldr	r3, [pc, #92]	; (835f4 <pvPortMalloc+0x16c>)
   83596:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   83598:	697b      	ldr	r3, [r7, #20]
   8359a:	685a      	ldr	r2, [r3, #4]
   8359c:	4b10      	ldr	r3, [pc, #64]	; (835e0 <pvPortMalloc+0x158>)
   8359e:	681b      	ldr	r3, [r3, #0]
   835a0:	431a      	orrs	r2, r3
   835a2:	697b      	ldr	r3, [r7, #20]
   835a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   835a6:	697b      	ldr	r3, [r7, #20]
   835a8:	2200      	movs	r2, #0
   835aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   835ac:	4b12      	ldr	r3, [pc, #72]	; (835f8 <pvPortMalloc+0x170>)
   835ae:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   835b0:	68fb      	ldr	r3, [r7, #12]
   835b2:	2b00      	cmp	r3, #0
   835b4:	d101      	bne.n	835ba <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   835b6:	4b11      	ldr	r3, [pc, #68]	; (835fc <pvPortMalloc+0x174>)
   835b8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   835ba:	68fb      	ldr	r3, [r7, #12]
   835bc:	f003 0307 	and.w	r3, r3, #7
   835c0:	2b00      	cmp	r3, #0
   835c2:	d002      	beq.n	835ca <pvPortMalloc+0x142>
   835c4:	4b07      	ldr	r3, [pc, #28]	; (835e4 <pvPortMalloc+0x15c>)
   835c6:	4798      	blx	r3
   835c8:	e7fe      	b.n	835c8 <pvPortMalloc+0x140>
	return pvReturn;
   835ca:	68fb      	ldr	r3, [r7, #12]
}
   835cc:	4618      	mov	r0, r3
   835ce:	3718      	adds	r7, #24
   835d0:	46bd      	mov	sp, r7
   835d2:	bd80      	pop	{r7, pc}
   835d4:	000843d5 	.word	0x000843d5
   835d8:	2007a4f8 	.word	0x2007a4f8
   835dc:	000836a5 	.word	0x000836a5
   835e0:	2007a504 	.word	0x2007a504
   835e4:	00083365 	.word	0x00083365
   835e8:	2007a4fc 	.word	0x2007a4fc
   835ec:	2007a4f0 	.word	0x2007a4f0
   835f0:	00083769 	.word	0x00083769
   835f4:	2007a500 	.word	0x2007a500
   835f8:	000843f1 	.word	0x000843f1
   835fc:	000863c5 	.word	0x000863c5

00083600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   83600:	b580      	push	{r7, lr}
   83602:	b084      	sub	sp, #16
   83604:	af00      	add	r7, sp, #0
   83606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   83608:	687b      	ldr	r3, [r7, #4]
   8360a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   8360c:	687b      	ldr	r3, [r7, #4]
   8360e:	2b00      	cmp	r3, #0
   83610:	d038      	beq.n	83684 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   83612:	2308      	movs	r3, #8
   83614:	425b      	negs	r3, r3
   83616:	68fa      	ldr	r2, [r7, #12]
   83618:	4413      	add	r3, r2
   8361a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   8361c:	68fb      	ldr	r3, [r7, #12]
   8361e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   83620:	68bb      	ldr	r3, [r7, #8]
   83622:	685a      	ldr	r2, [r3, #4]
   83624:	4b19      	ldr	r3, [pc, #100]	; (8368c <vPortFree+0x8c>)
   83626:	681b      	ldr	r3, [r3, #0]
   83628:	4013      	ands	r3, r2
   8362a:	2b00      	cmp	r3, #0
   8362c:	d102      	bne.n	83634 <vPortFree+0x34>
   8362e:	4b18      	ldr	r3, [pc, #96]	; (83690 <vPortFree+0x90>)
   83630:	4798      	blx	r3
   83632:	e7fe      	b.n	83632 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   83634:	68bb      	ldr	r3, [r7, #8]
   83636:	681b      	ldr	r3, [r3, #0]
   83638:	2b00      	cmp	r3, #0
   8363a:	d002      	beq.n	83642 <vPortFree+0x42>
   8363c:	4b14      	ldr	r3, [pc, #80]	; (83690 <vPortFree+0x90>)
   8363e:	4798      	blx	r3
   83640:	e7fe      	b.n	83640 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   83642:	68bb      	ldr	r3, [r7, #8]
   83644:	685a      	ldr	r2, [r3, #4]
   83646:	4b11      	ldr	r3, [pc, #68]	; (8368c <vPortFree+0x8c>)
   83648:	681b      	ldr	r3, [r3, #0]
   8364a:	4013      	ands	r3, r2
   8364c:	2b00      	cmp	r3, #0
   8364e:	d019      	beq.n	83684 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   83650:	68bb      	ldr	r3, [r7, #8]
   83652:	681b      	ldr	r3, [r3, #0]
   83654:	2b00      	cmp	r3, #0
   83656:	d115      	bne.n	83684 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   83658:	68bb      	ldr	r3, [r7, #8]
   8365a:	685a      	ldr	r2, [r3, #4]
   8365c:	4b0b      	ldr	r3, [pc, #44]	; (8368c <vPortFree+0x8c>)
   8365e:	681b      	ldr	r3, [r3, #0]
   83660:	43db      	mvns	r3, r3
   83662:	401a      	ands	r2, r3
   83664:	68bb      	ldr	r3, [r7, #8]
   83666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   83668:	4b0a      	ldr	r3, [pc, #40]	; (83694 <vPortFree+0x94>)
   8366a:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   8366c:	68bb      	ldr	r3, [r7, #8]
   8366e:	685a      	ldr	r2, [r3, #4]
   83670:	4b09      	ldr	r3, [pc, #36]	; (83698 <vPortFree+0x98>)
   83672:	681b      	ldr	r3, [r3, #0]
   83674:	441a      	add	r2, r3
   83676:	4b08      	ldr	r3, [pc, #32]	; (83698 <vPortFree+0x98>)
   83678:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   8367a:	68b8      	ldr	r0, [r7, #8]
   8367c:	4b07      	ldr	r3, [pc, #28]	; (8369c <vPortFree+0x9c>)
   8367e:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   83680:	4b07      	ldr	r3, [pc, #28]	; (836a0 <vPortFree+0xa0>)
   83682:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   83684:	3710      	adds	r7, #16
   83686:	46bd      	mov	sp, r7
   83688:	bd80      	pop	{r7, pc}
   8368a:	bf00      	nop
   8368c:	2007a504 	.word	0x2007a504
   83690:	00083365 	.word	0x00083365
   83694:	000843d5 	.word	0x000843d5
   83698:	2007a4fc 	.word	0x2007a4fc
   8369c:	00083769 	.word	0x00083769
   836a0:	000843f1 	.word	0x000843f1

000836a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   836a4:	b480      	push	{r7}
   836a6:	b085      	sub	sp, #20
   836a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   836aa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   836ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   836b0:	4b27      	ldr	r3, [pc, #156]	; (83750 <prvHeapInit+0xac>)
   836b2:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   836b4:	68fb      	ldr	r3, [r7, #12]
   836b6:	f003 0307 	and.w	r3, r3, #7
   836ba:	2b00      	cmp	r3, #0
   836bc:	d00c      	beq.n	836d8 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   836be:	68fb      	ldr	r3, [r7, #12]
   836c0:	3307      	adds	r3, #7
   836c2:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   836c4:	68fb      	ldr	r3, [r7, #12]
   836c6:	f023 0307 	bic.w	r3, r3, #7
   836ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   836cc:	68ba      	ldr	r2, [r7, #8]
   836ce:	68fb      	ldr	r3, [r7, #12]
   836d0:	1ad2      	subs	r2, r2, r3
   836d2:	4b1f      	ldr	r3, [pc, #124]	; (83750 <prvHeapInit+0xac>)
   836d4:	4413      	add	r3, r2
   836d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   836d8:	68fb      	ldr	r3, [r7, #12]
   836da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   836dc:	4b1d      	ldr	r3, [pc, #116]	; (83754 <prvHeapInit+0xb0>)
   836de:	687a      	ldr	r2, [r7, #4]
   836e0:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   836e2:	4b1c      	ldr	r3, [pc, #112]	; (83754 <prvHeapInit+0xb0>)
   836e4:	2200      	movs	r2, #0
   836e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   836e8:	687a      	ldr	r2, [r7, #4]
   836ea:	68bb      	ldr	r3, [r7, #8]
   836ec:	4413      	add	r3, r2
   836ee:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   836f0:	2308      	movs	r3, #8
   836f2:	68fa      	ldr	r2, [r7, #12]
   836f4:	1ad3      	subs	r3, r2, r3
   836f6:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   836f8:	68fb      	ldr	r3, [r7, #12]
   836fa:	f023 0307 	bic.w	r3, r3, #7
   836fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   83700:	68fa      	ldr	r2, [r7, #12]
   83702:	4b15      	ldr	r3, [pc, #84]	; (83758 <prvHeapInit+0xb4>)
   83704:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   83706:	4b14      	ldr	r3, [pc, #80]	; (83758 <prvHeapInit+0xb4>)
   83708:	681b      	ldr	r3, [r3, #0]
   8370a:	2200      	movs	r2, #0
   8370c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8370e:	4b12      	ldr	r3, [pc, #72]	; (83758 <prvHeapInit+0xb4>)
   83710:	681b      	ldr	r3, [r3, #0]
   83712:	2200      	movs	r2, #0
   83714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   83716:	687b      	ldr	r3, [r7, #4]
   83718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   8371a:	683b      	ldr	r3, [r7, #0]
   8371c:	68fa      	ldr	r2, [r7, #12]
   8371e:	1ad2      	subs	r2, r2, r3
   83720:	683b      	ldr	r3, [r7, #0]
   83722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83724:	4b0c      	ldr	r3, [pc, #48]	; (83758 <prvHeapInit+0xb4>)
   83726:	681a      	ldr	r2, [r3, #0]
   83728:	683b      	ldr	r3, [r7, #0]
   8372a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8372c:	683b      	ldr	r3, [r7, #0]
   8372e:	685a      	ldr	r2, [r3, #4]
   83730:	4b0a      	ldr	r3, [pc, #40]	; (8375c <prvHeapInit+0xb8>)
   83732:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83734:	683b      	ldr	r3, [r7, #0]
   83736:	685a      	ldr	r2, [r3, #4]
   83738:	4b09      	ldr	r3, [pc, #36]	; (83760 <prvHeapInit+0xbc>)
   8373a:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   8373c:	4b09      	ldr	r3, [pc, #36]	; (83764 <prvHeapInit+0xc0>)
   8373e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   83742:	601a      	str	r2, [r3, #0]
}
   83744:	3714      	adds	r7, #20
   83746:	46bd      	mov	sp, r7
   83748:	f85d 7b04 	ldr.w	r7, [sp], #4
   8374c:	4770      	bx	lr
   8374e:	bf00      	nop
   83750:	200704f0 	.word	0x200704f0
   83754:	2007a4f0 	.word	0x2007a4f0
   83758:	2007a4f8 	.word	0x2007a4f8
   8375c:	2007a500 	.word	0x2007a500
   83760:	2007a4fc 	.word	0x2007a4fc
   83764:	2007a504 	.word	0x2007a504

00083768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   83768:	b480      	push	{r7}
   8376a:	b085      	sub	sp, #20
   8376c:	af00      	add	r7, sp, #0
   8376e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   83770:	4b27      	ldr	r3, [pc, #156]	; (83810 <prvInsertBlockIntoFreeList+0xa8>)
   83772:	60fb      	str	r3, [r7, #12]
   83774:	e002      	b.n	8377c <prvInsertBlockIntoFreeList+0x14>
   83776:	68fb      	ldr	r3, [r7, #12]
   83778:	681b      	ldr	r3, [r3, #0]
   8377a:	60fb      	str	r3, [r7, #12]
   8377c:	68fb      	ldr	r3, [r7, #12]
   8377e:	681a      	ldr	r2, [r3, #0]
   83780:	687b      	ldr	r3, [r7, #4]
   83782:	429a      	cmp	r2, r3
   83784:	d3f7      	bcc.n	83776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   83786:	68fb      	ldr	r3, [r7, #12]
   83788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   8378a:	68fb      	ldr	r3, [r7, #12]
   8378c:	685b      	ldr	r3, [r3, #4]
   8378e:	68ba      	ldr	r2, [r7, #8]
   83790:	441a      	add	r2, r3
   83792:	687b      	ldr	r3, [r7, #4]
   83794:	429a      	cmp	r2, r3
   83796:	d108      	bne.n	837aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   83798:	68fb      	ldr	r3, [r7, #12]
   8379a:	685a      	ldr	r2, [r3, #4]
   8379c:	687b      	ldr	r3, [r7, #4]
   8379e:	685b      	ldr	r3, [r3, #4]
   837a0:	441a      	add	r2, r3
   837a2:	68fb      	ldr	r3, [r7, #12]
   837a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   837a6:	68fb      	ldr	r3, [r7, #12]
   837a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   837aa:	687b      	ldr	r3, [r7, #4]
   837ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   837ae:	687b      	ldr	r3, [r7, #4]
   837b0:	685b      	ldr	r3, [r3, #4]
   837b2:	68ba      	ldr	r2, [r7, #8]
   837b4:	441a      	add	r2, r3
   837b6:	68fb      	ldr	r3, [r7, #12]
   837b8:	681b      	ldr	r3, [r3, #0]
   837ba:	429a      	cmp	r2, r3
   837bc:	d118      	bne.n	837f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   837be:	68fb      	ldr	r3, [r7, #12]
   837c0:	681a      	ldr	r2, [r3, #0]
   837c2:	4b14      	ldr	r3, [pc, #80]	; (83814 <prvInsertBlockIntoFreeList+0xac>)
   837c4:	681b      	ldr	r3, [r3, #0]
   837c6:	429a      	cmp	r2, r3
   837c8:	d00d      	beq.n	837e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   837ca:	687b      	ldr	r3, [r7, #4]
   837cc:	685a      	ldr	r2, [r3, #4]
   837ce:	68fb      	ldr	r3, [r7, #12]
   837d0:	681b      	ldr	r3, [r3, #0]
   837d2:	685b      	ldr	r3, [r3, #4]
   837d4:	441a      	add	r2, r3
   837d6:	687b      	ldr	r3, [r7, #4]
   837d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   837da:	68fb      	ldr	r3, [r7, #12]
   837dc:	681b      	ldr	r3, [r3, #0]
   837de:	681a      	ldr	r2, [r3, #0]
   837e0:	687b      	ldr	r3, [r7, #4]
   837e2:	601a      	str	r2, [r3, #0]
   837e4:	e008      	b.n	837f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   837e6:	4b0b      	ldr	r3, [pc, #44]	; (83814 <prvInsertBlockIntoFreeList+0xac>)
   837e8:	681a      	ldr	r2, [r3, #0]
   837ea:	687b      	ldr	r3, [r7, #4]
   837ec:	601a      	str	r2, [r3, #0]
   837ee:	e003      	b.n	837f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   837f0:	68fb      	ldr	r3, [r7, #12]
   837f2:	681a      	ldr	r2, [r3, #0]
   837f4:	687b      	ldr	r3, [r7, #4]
   837f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   837f8:	68fa      	ldr	r2, [r7, #12]
   837fa:	687b      	ldr	r3, [r7, #4]
   837fc:	429a      	cmp	r2, r3
   837fe:	d002      	beq.n	83806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   83800:	68fb      	ldr	r3, [r7, #12]
   83802:	687a      	ldr	r2, [r7, #4]
   83804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   83806:	3714      	adds	r7, #20
   83808:	46bd      	mov	sp, r7
   8380a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8380e:	4770      	bx	lr
   83810:	2007a4f0 	.word	0x2007a4f0
   83814:	2007a4f8 	.word	0x2007a4f8

00083818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   83818:	b580      	push	{r7, lr}
   8381a:	b084      	sub	sp, #16
   8381c:	af00      	add	r7, sp, #0
   8381e:	6078      	str	r0, [r7, #4]
   83820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83822:	687b      	ldr	r3, [r7, #4]
   83824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   83826:	68fb      	ldr	r3, [r7, #12]
   83828:	2b00      	cmp	r3, #0
   8382a:	d102      	bne.n	83832 <xQueueGenericReset+0x1a>
   8382c:	4b26      	ldr	r3, [pc, #152]	; (838c8 <xQueueGenericReset+0xb0>)
   8382e:	4798      	blx	r3
   83830:	e7fe      	b.n	83830 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   83832:	4b26      	ldr	r3, [pc, #152]	; (838cc <xQueueGenericReset+0xb4>)
   83834:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   83836:	68fb      	ldr	r3, [r7, #12]
   83838:	681a      	ldr	r2, [r3, #0]
   8383a:	68fb      	ldr	r3, [r7, #12]
   8383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8383e:	68f9      	ldr	r1, [r7, #12]
   83840:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83842:	fb01 f303 	mul.w	r3, r1, r3
   83846:	441a      	add	r2, r3
   83848:	68fb      	ldr	r3, [r7, #12]
   8384a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   8384c:	68fb      	ldr	r3, [r7, #12]
   8384e:	2200      	movs	r2, #0
   83850:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   83852:	68fb      	ldr	r3, [r7, #12]
   83854:	681a      	ldr	r2, [r3, #0]
   83856:	68fb      	ldr	r3, [r7, #12]
   83858:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   8385a:	68fb      	ldr	r3, [r7, #12]
   8385c:	681a      	ldr	r2, [r3, #0]
   8385e:	68fb      	ldr	r3, [r7, #12]
   83860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83862:	3b01      	subs	r3, #1
   83864:	68f9      	ldr	r1, [r7, #12]
   83866:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83868:	fb01 f303 	mul.w	r3, r1, r3
   8386c:	441a      	add	r2, r3
   8386e:	68fb      	ldr	r3, [r7, #12]
   83870:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   83872:	68fb      	ldr	r3, [r7, #12]
   83874:	f04f 32ff 	mov.w	r2, #4294967295
   83878:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8387a:	68fb      	ldr	r3, [r7, #12]
   8387c:	f04f 32ff 	mov.w	r2, #4294967295
   83880:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   83882:	683b      	ldr	r3, [r7, #0]
   83884:	2b00      	cmp	r3, #0
   83886:	d10e      	bne.n	838a6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83888:	68fb      	ldr	r3, [r7, #12]
   8388a:	691b      	ldr	r3, [r3, #16]
   8388c:	2b00      	cmp	r3, #0
   8388e:	d014      	beq.n	838ba <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83890:	68fb      	ldr	r3, [r7, #12]
   83892:	3310      	adds	r3, #16
   83894:	4618      	mov	r0, r3
   83896:	4b0e      	ldr	r3, [pc, #56]	; (838d0 <xQueueGenericReset+0xb8>)
   83898:	4798      	blx	r3
   8389a:	4603      	mov	r3, r0
   8389c:	2b01      	cmp	r3, #1
   8389e:	d10c      	bne.n	838ba <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   838a0:	4b0c      	ldr	r3, [pc, #48]	; (838d4 <xQueueGenericReset+0xbc>)
   838a2:	4798      	blx	r3
   838a4:	e009      	b.n	838ba <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   838a6:	68fb      	ldr	r3, [r7, #12]
   838a8:	3310      	adds	r3, #16
   838aa:	4618      	mov	r0, r3
   838ac:	4b0a      	ldr	r3, [pc, #40]	; (838d8 <xQueueGenericReset+0xc0>)
   838ae:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   838b0:	68fb      	ldr	r3, [r7, #12]
   838b2:	3324      	adds	r3, #36	; 0x24
   838b4:	4618      	mov	r0, r3
   838b6:	4b08      	ldr	r3, [pc, #32]	; (838d8 <xQueueGenericReset+0xc0>)
   838b8:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   838ba:	4b08      	ldr	r3, [pc, #32]	; (838dc <xQueueGenericReset+0xc4>)
   838bc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   838be:	2301      	movs	r3, #1
}
   838c0:	4618      	mov	r0, r3
   838c2:	3710      	adds	r7, #16
   838c4:	46bd      	mov	sp, r7
   838c6:	bd80      	pop	{r7, pc}
   838c8:	00083365 	.word	0x00083365
   838cc:	000832e9 	.word	0x000832e9
   838d0:	000848d9 	.word	0x000848d9
   838d4:	000832c9 	.word	0x000832c9
   838d8:	00082fdd 	.word	0x00082fdd
   838dc:	0008332d 	.word	0x0008332d

000838e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   838e0:	b580      	push	{r7, lr}
   838e2:	b088      	sub	sp, #32
   838e4:	af00      	add	r7, sp, #0
   838e6:	60f8      	str	r0, [r7, #12]
   838e8:	60b9      	str	r1, [r7, #8]
   838ea:	4613      	mov	r3, r2
   838ec:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   838ee:	2300      	movs	r3, #0
   838f0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   838f2:	68fb      	ldr	r3, [r7, #12]
   838f4:	2b00      	cmp	r3, #0
   838f6:	d026      	beq.n	83946 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   838f8:	204c      	movs	r0, #76	; 0x4c
   838fa:	4b18      	ldr	r3, [pc, #96]	; (8395c <xQueueGenericCreate+0x7c>)
   838fc:	4798      	blx	r3
   838fe:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   83900:	69bb      	ldr	r3, [r7, #24]
   83902:	2b00      	cmp	r3, #0
   83904:	d01f      	beq.n	83946 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83906:	68fb      	ldr	r3, [r7, #12]
   83908:	68ba      	ldr	r2, [r7, #8]
   8390a:	fb02 f303 	mul.w	r3, r2, r3
   8390e:	3301      	adds	r3, #1
   83910:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   83912:	6978      	ldr	r0, [r7, #20]
   83914:	4b11      	ldr	r3, [pc, #68]	; (8395c <xQueueGenericCreate+0x7c>)
   83916:	4798      	blx	r3
   83918:	4602      	mov	r2, r0
   8391a:	69bb      	ldr	r3, [r7, #24]
   8391c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   8391e:	69bb      	ldr	r3, [r7, #24]
   83920:	681b      	ldr	r3, [r3, #0]
   83922:	2b00      	cmp	r3, #0
   83924:	d00c      	beq.n	83940 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   83926:	69bb      	ldr	r3, [r7, #24]
   83928:	68fa      	ldr	r2, [r7, #12]
   8392a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8392c:	69bb      	ldr	r3, [r7, #24]
   8392e:	68ba      	ldr	r2, [r7, #8]
   83930:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   83932:	69b8      	ldr	r0, [r7, #24]
   83934:	2101      	movs	r1, #1
   83936:	4b0a      	ldr	r3, [pc, #40]	; (83960 <xQueueGenericCreate+0x80>)
   83938:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   8393a:	69bb      	ldr	r3, [r7, #24]
   8393c:	61fb      	str	r3, [r7, #28]
   8393e:	e002      	b.n	83946 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   83940:	69b8      	ldr	r0, [r7, #24]
   83942:	4b08      	ldr	r3, [pc, #32]	; (83964 <xQueueGenericCreate+0x84>)
   83944:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   83946:	69fb      	ldr	r3, [r7, #28]
   83948:	2b00      	cmp	r3, #0
   8394a:	d102      	bne.n	83952 <xQueueGenericCreate+0x72>
   8394c:	4b06      	ldr	r3, [pc, #24]	; (83968 <xQueueGenericCreate+0x88>)
   8394e:	4798      	blx	r3
   83950:	e7fe      	b.n	83950 <xQueueGenericCreate+0x70>

	return xReturn;
   83952:	69fb      	ldr	r3, [r7, #28]
}
   83954:	4618      	mov	r0, r3
   83956:	3720      	adds	r7, #32
   83958:	46bd      	mov	sp, r7
   8395a:	bd80      	pop	{r7, pc}
   8395c:	00083489 	.word	0x00083489
   83960:	00083819 	.word	0x00083819
   83964:	00083601 	.word	0x00083601
   83968:	00083365 	.word	0x00083365

0008396c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   8396c:	b580      	push	{r7, lr}
   8396e:	b08a      	sub	sp, #40	; 0x28
   83970:	af00      	add	r7, sp, #0
   83972:	60f8      	str	r0, [r7, #12]
   83974:	60b9      	str	r1, [r7, #8]
   83976:	607a      	str	r2, [r7, #4]
   83978:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   8397a:	2300      	movs	r3, #0
   8397c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8397e:	68fb      	ldr	r3, [r7, #12]
   83980:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83982:	6a3b      	ldr	r3, [r7, #32]
   83984:	2b00      	cmp	r3, #0
   83986:	d102      	bne.n	8398e <xQueueGenericSend+0x22>
   83988:	4b5b      	ldr	r3, [pc, #364]	; (83af8 <xQueueGenericSend+0x18c>)
   8398a:	4798      	blx	r3
   8398c:	e7fe      	b.n	8398c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8398e:	68bb      	ldr	r3, [r7, #8]
   83990:	2b00      	cmp	r3, #0
   83992:	d103      	bne.n	8399c <xQueueGenericSend+0x30>
   83994:	6a3b      	ldr	r3, [r7, #32]
   83996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83998:	2b00      	cmp	r3, #0
   8399a:	d101      	bne.n	839a0 <xQueueGenericSend+0x34>
   8399c:	2301      	movs	r3, #1
   8399e:	e000      	b.n	839a2 <xQueueGenericSend+0x36>
   839a0:	2300      	movs	r3, #0
   839a2:	2b00      	cmp	r3, #0
   839a4:	d102      	bne.n	839ac <xQueueGenericSend+0x40>
   839a6:	4b54      	ldr	r3, [pc, #336]	; (83af8 <xQueueGenericSend+0x18c>)
   839a8:	4798      	blx	r3
   839aa:	e7fe      	b.n	839aa <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   839ac:	683b      	ldr	r3, [r7, #0]
   839ae:	2b02      	cmp	r3, #2
   839b0:	d103      	bne.n	839ba <xQueueGenericSend+0x4e>
   839b2:	6a3b      	ldr	r3, [r7, #32]
   839b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   839b6:	2b01      	cmp	r3, #1
   839b8:	d101      	bne.n	839be <xQueueGenericSend+0x52>
   839ba:	2301      	movs	r3, #1
   839bc:	e000      	b.n	839c0 <xQueueGenericSend+0x54>
   839be:	2300      	movs	r3, #0
   839c0:	2b00      	cmp	r3, #0
   839c2:	d102      	bne.n	839ca <xQueueGenericSend+0x5e>
   839c4:	4b4c      	ldr	r3, [pc, #304]	; (83af8 <xQueueGenericSend+0x18c>)
   839c6:	4798      	blx	r3
   839c8:	e7fe      	b.n	839c8 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   839ca:	4b4c      	ldr	r3, [pc, #304]	; (83afc <xQueueGenericSend+0x190>)
   839cc:	4798      	blx	r3
   839ce:	4603      	mov	r3, r0
   839d0:	2b00      	cmp	r3, #0
   839d2:	d102      	bne.n	839da <xQueueGenericSend+0x6e>
   839d4:	687b      	ldr	r3, [r7, #4]
   839d6:	2b00      	cmp	r3, #0
   839d8:	d101      	bne.n	839de <xQueueGenericSend+0x72>
   839da:	2301      	movs	r3, #1
   839dc:	e000      	b.n	839e0 <xQueueGenericSend+0x74>
   839de:	2300      	movs	r3, #0
   839e0:	2b00      	cmp	r3, #0
   839e2:	d102      	bne.n	839ea <xQueueGenericSend+0x7e>
   839e4:	4b44      	ldr	r3, [pc, #272]	; (83af8 <xQueueGenericSend+0x18c>)
   839e6:	4798      	blx	r3
   839e8:	e7fe      	b.n	839e8 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   839ea:	4b45      	ldr	r3, [pc, #276]	; (83b00 <xQueueGenericSend+0x194>)
   839ec:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   839ee:	6a3b      	ldr	r3, [r7, #32]
   839f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   839f2:	6a3b      	ldr	r3, [r7, #32]
   839f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   839f6:	429a      	cmp	r2, r3
   839f8:	d302      	bcc.n	83a00 <xQueueGenericSend+0x94>
   839fa:	683b      	ldr	r3, [r7, #0]
   839fc:	2b02      	cmp	r3, #2
   839fe:	d11d      	bne.n	83a3c <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   83a00:	6a38      	ldr	r0, [r7, #32]
   83a02:	68b9      	ldr	r1, [r7, #8]
   83a04:	683a      	ldr	r2, [r7, #0]
   83a06:	4b3f      	ldr	r3, [pc, #252]	; (83b04 <xQueueGenericSend+0x198>)
   83a08:	4798      	blx	r3
   83a0a:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83a0c:	6a3b      	ldr	r3, [r7, #32]
   83a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83a10:	2b00      	cmp	r3, #0
   83a12:	d00a      	beq.n	83a2a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   83a14:	6a3b      	ldr	r3, [r7, #32]
   83a16:	3324      	adds	r3, #36	; 0x24
   83a18:	4618      	mov	r0, r3
   83a1a:	4b3b      	ldr	r3, [pc, #236]	; (83b08 <xQueueGenericSend+0x19c>)
   83a1c:	4798      	blx	r3
   83a1e:	4603      	mov	r3, r0
   83a20:	2b01      	cmp	r3, #1
   83a22:	d107      	bne.n	83a34 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   83a24:	4b39      	ldr	r3, [pc, #228]	; (83b0c <xQueueGenericSend+0x1a0>)
   83a26:	4798      	blx	r3
   83a28:	e004      	b.n	83a34 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   83a2a:	69fb      	ldr	r3, [r7, #28]
   83a2c:	2b00      	cmp	r3, #0
   83a2e:	d001      	beq.n	83a34 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83a30:	4b36      	ldr	r3, [pc, #216]	; (83b0c <xQueueGenericSend+0x1a0>)
   83a32:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   83a34:	4b36      	ldr	r3, [pc, #216]	; (83b10 <xQueueGenericSend+0x1a4>)
   83a36:	4798      	blx	r3
				return pdPASS;
   83a38:	2301      	movs	r3, #1
   83a3a:	e059      	b.n	83af0 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83a3c:	687b      	ldr	r3, [r7, #4]
   83a3e:	2b00      	cmp	r3, #0
   83a40:	d103      	bne.n	83a4a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83a42:	4b33      	ldr	r3, [pc, #204]	; (83b10 <xQueueGenericSend+0x1a4>)
   83a44:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   83a46:	2300      	movs	r3, #0
   83a48:	e052      	b.n	83af0 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   83a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83a4c:	2b00      	cmp	r3, #0
   83a4e:	d106      	bne.n	83a5e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83a50:	f107 0314 	add.w	r3, r7, #20
   83a54:	4618      	mov	r0, r3
   83a56:	4b2f      	ldr	r3, [pc, #188]	; (83b14 <xQueueGenericSend+0x1a8>)
   83a58:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83a5a:	2301      	movs	r3, #1
   83a5c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83a5e:	4b2c      	ldr	r3, [pc, #176]	; (83b10 <xQueueGenericSend+0x1a4>)
   83a60:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83a62:	4b2d      	ldr	r3, [pc, #180]	; (83b18 <xQueueGenericSend+0x1ac>)
   83a64:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83a66:	4b26      	ldr	r3, [pc, #152]	; (83b00 <xQueueGenericSend+0x194>)
   83a68:	4798      	blx	r3
   83a6a:	6a3b      	ldr	r3, [r7, #32]
   83a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83a72:	d102      	bne.n	83a7a <xQueueGenericSend+0x10e>
   83a74:	6a3b      	ldr	r3, [r7, #32]
   83a76:	2200      	movs	r2, #0
   83a78:	645a      	str	r2, [r3, #68]	; 0x44
   83a7a:	6a3b      	ldr	r3, [r7, #32]
   83a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83a82:	d102      	bne.n	83a8a <xQueueGenericSend+0x11e>
   83a84:	6a3b      	ldr	r3, [r7, #32]
   83a86:	2200      	movs	r2, #0
   83a88:	649a      	str	r2, [r3, #72]	; 0x48
   83a8a:	4b21      	ldr	r3, [pc, #132]	; (83b10 <xQueueGenericSend+0x1a4>)
   83a8c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83a8e:	f107 0214 	add.w	r2, r7, #20
   83a92:	1d3b      	adds	r3, r7, #4
   83a94:	4610      	mov	r0, r2
   83a96:	4619      	mov	r1, r3
   83a98:	4b20      	ldr	r3, [pc, #128]	; (83b1c <xQueueGenericSend+0x1b0>)
   83a9a:	4798      	blx	r3
   83a9c:	4603      	mov	r3, r0
   83a9e:	2b00      	cmp	r3, #0
   83aa0:	d11e      	bne.n	83ae0 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   83aa2:	6a38      	ldr	r0, [r7, #32]
   83aa4:	4b1e      	ldr	r3, [pc, #120]	; (83b20 <xQueueGenericSend+0x1b4>)
   83aa6:	4798      	blx	r3
   83aa8:	4603      	mov	r3, r0
   83aaa:	2b00      	cmp	r3, #0
   83aac:	d012      	beq.n	83ad4 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   83aae:	6a3b      	ldr	r3, [r7, #32]
   83ab0:	f103 0210 	add.w	r2, r3, #16
   83ab4:	687b      	ldr	r3, [r7, #4]
   83ab6:	4610      	mov	r0, r2
   83ab8:	4619      	mov	r1, r3
   83aba:	4b1a      	ldr	r3, [pc, #104]	; (83b24 <xQueueGenericSend+0x1b8>)
   83abc:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   83abe:	6a38      	ldr	r0, [r7, #32]
   83ac0:	4b19      	ldr	r3, [pc, #100]	; (83b28 <xQueueGenericSend+0x1bc>)
   83ac2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   83ac4:	4b19      	ldr	r3, [pc, #100]	; (83b2c <xQueueGenericSend+0x1c0>)
   83ac6:	4798      	blx	r3
   83ac8:	4603      	mov	r3, r0
   83aca:	2b00      	cmp	r3, #0
   83acc:	d10f      	bne.n	83aee <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   83ace:	4b0f      	ldr	r3, [pc, #60]	; (83b0c <xQueueGenericSend+0x1a0>)
   83ad0:	4798      	blx	r3
   83ad2:	e00c      	b.n	83aee <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83ad4:	6a38      	ldr	r0, [r7, #32]
   83ad6:	4b14      	ldr	r3, [pc, #80]	; (83b28 <xQueueGenericSend+0x1bc>)
   83ad8:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83ada:	4b14      	ldr	r3, [pc, #80]	; (83b2c <xQueueGenericSend+0x1c0>)
   83adc:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   83ade:	e784      	b.n	839ea <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   83ae0:	6a38      	ldr	r0, [r7, #32]
   83ae2:	4b11      	ldr	r3, [pc, #68]	; (83b28 <xQueueGenericSend+0x1bc>)
   83ae4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83ae6:	4b11      	ldr	r3, [pc, #68]	; (83b2c <xQueueGenericSend+0x1c0>)
   83ae8:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   83aea:	2300      	movs	r3, #0
   83aec:	e000      	b.n	83af0 <xQueueGenericSend+0x184>
		}
	}
   83aee:	e77c      	b.n	839ea <xQueueGenericSend+0x7e>
}
   83af0:	4618      	mov	r0, r3
   83af2:	3728      	adds	r7, #40	; 0x28
   83af4:	46bd      	mov	sp, r7
   83af6:	bd80      	pop	{r7, pc}
   83af8:	00083365 	.word	0x00083365
   83afc:	00084db1 	.word	0x00084db1
   83b00:	000832e9 	.word	0x000832e9
   83b04:	00083e29 	.word	0x00083e29
   83b08:	000848d9 	.word	0x000848d9
   83b0c:	000832c9 	.word	0x000832c9
   83b10:	0008332d 	.word	0x0008332d
   83b14:	00084999 	.word	0x00084999
   83b18:	000843d5 	.word	0x000843d5
   83b1c:	000849d1 	.word	0x000849d1
   83b20:	00084039 	.word	0x00084039
   83b24:	000847b9 	.word	0x000847b9
   83b28:	00083f5d 	.word	0x00083f5d
   83b2c:	000843f1 	.word	0x000843f1

00083b30 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83b30:	b580      	push	{r7, lr}
   83b32:	b088      	sub	sp, #32
   83b34:	af00      	add	r7, sp, #0
   83b36:	60f8      	str	r0, [r7, #12]
   83b38:	60b9      	str	r1, [r7, #8]
   83b3a:	607a      	str	r2, [r7, #4]
   83b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83b3e:	68fb      	ldr	r3, [r7, #12]
   83b40:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   83b42:	69bb      	ldr	r3, [r7, #24]
   83b44:	2b00      	cmp	r3, #0
   83b46:	d102      	bne.n	83b4e <xQueueGenericSendFromISR+0x1e>
   83b48:	4b33      	ldr	r3, [pc, #204]	; (83c18 <xQueueGenericSendFromISR+0xe8>)
   83b4a:	4798      	blx	r3
   83b4c:	e7fe      	b.n	83b4c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83b4e:	68bb      	ldr	r3, [r7, #8]
   83b50:	2b00      	cmp	r3, #0
   83b52:	d103      	bne.n	83b5c <xQueueGenericSendFromISR+0x2c>
   83b54:	69bb      	ldr	r3, [r7, #24]
   83b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83b58:	2b00      	cmp	r3, #0
   83b5a:	d101      	bne.n	83b60 <xQueueGenericSendFromISR+0x30>
   83b5c:	2301      	movs	r3, #1
   83b5e:	e000      	b.n	83b62 <xQueueGenericSendFromISR+0x32>
   83b60:	2300      	movs	r3, #0
   83b62:	2b00      	cmp	r3, #0
   83b64:	d102      	bne.n	83b6c <xQueueGenericSendFromISR+0x3c>
   83b66:	4b2c      	ldr	r3, [pc, #176]	; (83c18 <xQueueGenericSendFromISR+0xe8>)
   83b68:	4798      	blx	r3
   83b6a:	e7fe      	b.n	83b6a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83b6c:	683b      	ldr	r3, [r7, #0]
   83b6e:	2b02      	cmp	r3, #2
   83b70:	d103      	bne.n	83b7a <xQueueGenericSendFromISR+0x4a>
   83b72:	69bb      	ldr	r3, [r7, #24]
   83b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83b76:	2b01      	cmp	r3, #1
   83b78:	d101      	bne.n	83b7e <xQueueGenericSendFromISR+0x4e>
   83b7a:	2301      	movs	r3, #1
   83b7c:	e000      	b.n	83b80 <xQueueGenericSendFromISR+0x50>
   83b7e:	2300      	movs	r3, #0
   83b80:	2b00      	cmp	r3, #0
   83b82:	d102      	bne.n	83b8a <xQueueGenericSendFromISR+0x5a>
   83b84:	4b24      	ldr	r3, [pc, #144]	; (83c18 <xQueueGenericSendFromISR+0xe8>)
   83b86:	4798      	blx	r3
   83b88:	e7fe      	b.n	83b88 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   83b8a:	4b24      	ldr	r3, [pc, #144]	; (83c1c <xQueueGenericSendFromISR+0xec>)
   83b8c:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83b8e:	4b22      	ldr	r3, [pc, #136]	; (83c18 <xQueueGenericSendFromISR+0xe8>)
   83b90:	4798      	blx	r3
   83b92:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83b94:	69bb      	ldr	r3, [r7, #24]
   83b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83b98:	69bb      	ldr	r3, [r7, #24]
   83b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83b9c:	429a      	cmp	r2, r3
   83b9e:	d302      	bcc.n	83ba6 <xQueueGenericSendFromISR+0x76>
   83ba0:	683b      	ldr	r3, [r7, #0]
   83ba2:	2b02      	cmp	r3, #2
   83ba4:	d12d      	bne.n	83c02 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   83ba6:	69b8      	ldr	r0, [r7, #24]
   83ba8:	68b9      	ldr	r1, [r7, #8]
   83baa:	683a      	ldr	r2, [r7, #0]
   83bac:	4b1c      	ldr	r3, [pc, #112]	; (83c20 <xQueueGenericSendFromISR+0xf0>)
   83bae:	4798      	blx	r3
   83bb0:	4603      	mov	r3, r0
   83bb2:	2b00      	cmp	r3, #0
   83bb4:	d005      	beq.n	83bc2 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   83bb6:	687b      	ldr	r3, [r7, #4]
   83bb8:	2b00      	cmp	r3, #0
   83bba:	d002      	beq.n	83bc2 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   83bbc:	687b      	ldr	r3, [r7, #4]
   83bbe:	2201      	movs	r2, #1
   83bc0:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   83bc2:	69bb      	ldr	r3, [r7, #24]
   83bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
   83bca:	d112      	bne.n	83bf2 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83bcc:	69bb      	ldr	r3, [r7, #24]
   83bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83bd0:	2b00      	cmp	r3, #0
   83bd2:	d013      	beq.n	83bfc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83bd4:	69bb      	ldr	r3, [r7, #24]
   83bd6:	3324      	adds	r3, #36	; 0x24
   83bd8:	4618      	mov	r0, r3
   83bda:	4b12      	ldr	r3, [pc, #72]	; (83c24 <xQueueGenericSendFromISR+0xf4>)
   83bdc:	4798      	blx	r3
   83bde:	4603      	mov	r3, r0
   83be0:	2b00      	cmp	r3, #0
   83be2:	d00b      	beq.n	83bfc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   83be4:	687b      	ldr	r3, [r7, #4]
   83be6:	2b00      	cmp	r3, #0
   83be8:	d008      	beq.n	83bfc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   83bea:	687b      	ldr	r3, [r7, #4]
   83bec:	2201      	movs	r2, #1
   83bee:	601a      	str	r2, [r3, #0]
   83bf0:	e004      	b.n	83bfc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   83bf2:	69bb      	ldr	r3, [r7, #24]
   83bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83bf6:	1c5a      	adds	r2, r3, #1
   83bf8:	69bb      	ldr	r3, [r7, #24]
   83bfa:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   83bfc:	2301      	movs	r3, #1
   83bfe:	61fb      	str	r3, [r7, #28]
   83c00:	e001      	b.n	83c06 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   83c02:	2300      	movs	r3, #0
   83c04:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   83c06:	6978      	ldr	r0, [r7, #20]
   83c08:	4b07      	ldr	r3, [pc, #28]	; (83c28 <xQueueGenericSendFromISR+0xf8>)
   83c0a:	4798      	blx	r3

	return xReturn;
   83c0c:	69fb      	ldr	r3, [r7, #28]
}
   83c0e:	4618      	mov	r0, r3
   83c10:	3720      	adds	r7, #32
   83c12:	46bd      	mov	sp, r7
   83c14:	bd80      	pop	{r7, pc}
   83c16:	bf00      	nop
   83c18:	00083365 	.word	0x00083365
   83c1c:	0008342d 	.word	0x0008342d
   83c20:	00083e29 	.word	0x00083e29
   83c24:	000848d9 	.word	0x000848d9
   83c28:	00083379 	.word	0x00083379

00083c2c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   83c2c:	b580      	push	{r7, lr}
   83c2e:	b08a      	sub	sp, #40	; 0x28
   83c30:	af00      	add	r7, sp, #0
   83c32:	60f8      	str	r0, [r7, #12]
   83c34:	60b9      	str	r1, [r7, #8]
   83c36:	607a      	str	r2, [r7, #4]
   83c38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   83c3a:	2300      	movs	r3, #0
   83c3c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83c3e:	68fb      	ldr	r3, [r7, #12]
   83c40:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83c42:	6a3b      	ldr	r3, [r7, #32]
   83c44:	2b00      	cmp	r3, #0
   83c46:	d102      	bne.n	83c4e <xQueueGenericReceive+0x22>
   83c48:	4b67      	ldr	r3, [pc, #412]	; (83de8 <xQueueGenericReceive+0x1bc>)
   83c4a:	4798      	blx	r3
   83c4c:	e7fe      	b.n	83c4c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83c4e:	68bb      	ldr	r3, [r7, #8]
   83c50:	2b00      	cmp	r3, #0
   83c52:	d103      	bne.n	83c5c <xQueueGenericReceive+0x30>
   83c54:	6a3b      	ldr	r3, [r7, #32]
   83c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83c58:	2b00      	cmp	r3, #0
   83c5a:	d101      	bne.n	83c60 <xQueueGenericReceive+0x34>
   83c5c:	2301      	movs	r3, #1
   83c5e:	e000      	b.n	83c62 <xQueueGenericReceive+0x36>
   83c60:	2300      	movs	r3, #0
   83c62:	2b00      	cmp	r3, #0
   83c64:	d102      	bne.n	83c6c <xQueueGenericReceive+0x40>
   83c66:	4b60      	ldr	r3, [pc, #384]	; (83de8 <xQueueGenericReceive+0x1bc>)
   83c68:	4798      	blx	r3
   83c6a:	e7fe      	b.n	83c6a <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83c6c:	4b5f      	ldr	r3, [pc, #380]	; (83dec <xQueueGenericReceive+0x1c0>)
   83c6e:	4798      	blx	r3
   83c70:	4603      	mov	r3, r0
   83c72:	2b00      	cmp	r3, #0
   83c74:	d102      	bne.n	83c7c <xQueueGenericReceive+0x50>
   83c76:	687b      	ldr	r3, [r7, #4]
   83c78:	2b00      	cmp	r3, #0
   83c7a:	d101      	bne.n	83c80 <xQueueGenericReceive+0x54>
   83c7c:	2301      	movs	r3, #1
   83c7e:	e000      	b.n	83c82 <xQueueGenericReceive+0x56>
   83c80:	2300      	movs	r3, #0
   83c82:	2b00      	cmp	r3, #0
   83c84:	d102      	bne.n	83c8c <xQueueGenericReceive+0x60>
   83c86:	4b58      	ldr	r3, [pc, #352]	; (83de8 <xQueueGenericReceive+0x1bc>)
   83c88:	4798      	blx	r3
   83c8a:	e7fe      	b.n	83c8a <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83c8c:	4b58      	ldr	r3, [pc, #352]	; (83df0 <xQueueGenericReceive+0x1c4>)
   83c8e:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83c90:	6a3b      	ldr	r3, [r7, #32]
   83c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83c94:	2b00      	cmp	r3, #0
   83c96:	d03b      	beq.n	83d10 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   83c98:	6a3b      	ldr	r3, [r7, #32]
   83c9a:	68db      	ldr	r3, [r3, #12]
   83c9c:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83c9e:	6a38      	ldr	r0, [r7, #32]
   83ca0:	68b9      	ldr	r1, [r7, #8]
   83ca2:	4b54      	ldr	r3, [pc, #336]	; (83df4 <xQueueGenericReceive+0x1c8>)
   83ca4:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   83ca6:	683b      	ldr	r3, [r7, #0]
   83ca8:	2b00      	cmp	r3, #0
   83caa:	d11c      	bne.n	83ce6 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83cac:	6a3b      	ldr	r3, [r7, #32]
   83cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83cb0:	1e5a      	subs	r2, r3, #1
   83cb2:	6a3b      	ldr	r3, [r7, #32]
   83cb4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83cb6:	6a3b      	ldr	r3, [r7, #32]
   83cb8:	681b      	ldr	r3, [r3, #0]
   83cba:	2b00      	cmp	r3, #0
   83cbc:	d104      	bne.n	83cc8 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   83cbe:	4b4e      	ldr	r3, [pc, #312]	; (83df8 <xQueueGenericReceive+0x1cc>)
   83cc0:	4798      	blx	r3
   83cc2:	4602      	mov	r2, r0
   83cc4:	6a3b      	ldr	r3, [r7, #32]
   83cc6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83cc8:	6a3b      	ldr	r3, [r7, #32]
   83cca:	691b      	ldr	r3, [r3, #16]
   83ccc:	2b00      	cmp	r3, #0
   83cce:	d01b      	beq.n	83d08 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83cd0:	6a3b      	ldr	r3, [r7, #32]
   83cd2:	3310      	adds	r3, #16
   83cd4:	4618      	mov	r0, r3
   83cd6:	4b49      	ldr	r3, [pc, #292]	; (83dfc <xQueueGenericReceive+0x1d0>)
   83cd8:	4798      	blx	r3
   83cda:	4603      	mov	r3, r0
   83cdc:	2b01      	cmp	r3, #1
   83cde:	d113      	bne.n	83d08 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   83ce0:	4b47      	ldr	r3, [pc, #284]	; (83e00 <xQueueGenericReceive+0x1d4>)
   83ce2:	4798      	blx	r3
   83ce4:	e010      	b.n	83d08 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   83ce6:	6a3b      	ldr	r3, [r7, #32]
   83ce8:	69fa      	ldr	r2, [r7, #28]
   83cea:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83cec:	6a3b      	ldr	r3, [r7, #32]
   83cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83cf0:	2b00      	cmp	r3, #0
   83cf2:	d009      	beq.n	83d08 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83cf4:	6a3b      	ldr	r3, [r7, #32]
   83cf6:	3324      	adds	r3, #36	; 0x24
   83cf8:	4618      	mov	r0, r3
   83cfa:	4b40      	ldr	r3, [pc, #256]	; (83dfc <xQueueGenericReceive+0x1d0>)
   83cfc:	4798      	blx	r3
   83cfe:	4603      	mov	r3, r0
   83d00:	2b00      	cmp	r3, #0
   83d02:	d001      	beq.n	83d08 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   83d04:	4b3e      	ldr	r3, [pc, #248]	; (83e00 <xQueueGenericReceive+0x1d4>)
   83d06:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   83d08:	4b3e      	ldr	r3, [pc, #248]	; (83e04 <xQueueGenericReceive+0x1d8>)
   83d0a:	4798      	blx	r3
				return pdPASS;
   83d0c:	2301      	movs	r3, #1
   83d0e:	e066      	b.n	83dde <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83d10:	687b      	ldr	r3, [r7, #4]
   83d12:	2b00      	cmp	r3, #0
   83d14:	d103      	bne.n	83d1e <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83d16:	4b3b      	ldr	r3, [pc, #236]	; (83e04 <xQueueGenericReceive+0x1d8>)
   83d18:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   83d1a:	2300      	movs	r3, #0
   83d1c:	e05f      	b.n	83dde <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83d20:	2b00      	cmp	r3, #0
   83d22:	d106      	bne.n	83d32 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83d24:	f107 0314 	add.w	r3, r7, #20
   83d28:	4618      	mov	r0, r3
   83d2a:	4b37      	ldr	r3, [pc, #220]	; (83e08 <xQueueGenericReceive+0x1dc>)
   83d2c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83d2e:	2301      	movs	r3, #1
   83d30:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83d32:	4b34      	ldr	r3, [pc, #208]	; (83e04 <xQueueGenericReceive+0x1d8>)
   83d34:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83d36:	4b35      	ldr	r3, [pc, #212]	; (83e0c <xQueueGenericReceive+0x1e0>)
   83d38:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83d3a:	4b2d      	ldr	r3, [pc, #180]	; (83df0 <xQueueGenericReceive+0x1c4>)
   83d3c:	4798      	blx	r3
   83d3e:	6a3b      	ldr	r3, [r7, #32]
   83d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83d42:	f1b3 3fff 	cmp.w	r3, #4294967295
   83d46:	d102      	bne.n	83d4e <xQueueGenericReceive+0x122>
   83d48:	6a3b      	ldr	r3, [r7, #32]
   83d4a:	2200      	movs	r2, #0
   83d4c:	645a      	str	r2, [r3, #68]	; 0x44
   83d4e:	6a3b      	ldr	r3, [r7, #32]
   83d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83d52:	f1b3 3fff 	cmp.w	r3, #4294967295
   83d56:	d102      	bne.n	83d5e <xQueueGenericReceive+0x132>
   83d58:	6a3b      	ldr	r3, [r7, #32]
   83d5a:	2200      	movs	r2, #0
   83d5c:	649a      	str	r2, [r3, #72]	; 0x48
   83d5e:	4b29      	ldr	r3, [pc, #164]	; (83e04 <xQueueGenericReceive+0x1d8>)
   83d60:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83d62:	f107 0214 	add.w	r2, r7, #20
   83d66:	1d3b      	adds	r3, r7, #4
   83d68:	4610      	mov	r0, r2
   83d6a:	4619      	mov	r1, r3
   83d6c:	4b28      	ldr	r3, [pc, #160]	; (83e10 <xQueueGenericReceive+0x1e4>)
   83d6e:	4798      	blx	r3
   83d70:	4603      	mov	r3, r0
   83d72:	2b00      	cmp	r3, #0
   83d74:	d12b      	bne.n	83dce <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   83d76:	6a38      	ldr	r0, [r7, #32]
   83d78:	4b26      	ldr	r3, [pc, #152]	; (83e14 <xQueueGenericReceive+0x1e8>)
   83d7a:	4798      	blx	r3
   83d7c:	4603      	mov	r3, r0
   83d7e:	2b00      	cmp	r3, #0
   83d80:	d01f      	beq.n	83dc2 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83d82:	6a3b      	ldr	r3, [r7, #32]
   83d84:	681b      	ldr	r3, [r3, #0]
   83d86:	2b00      	cmp	r3, #0
   83d88:	d108      	bne.n	83d9c <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   83d8a:	4b19      	ldr	r3, [pc, #100]	; (83df0 <xQueueGenericReceive+0x1c4>)
   83d8c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83d8e:	6a3b      	ldr	r3, [r7, #32]
   83d90:	685b      	ldr	r3, [r3, #4]
   83d92:	4618      	mov	r0, r3
   83d94:	4b20      	ldr	r3, [pc, #128]	; (83e18 <xQueueGenericReceive+0x1ec>)
   83d96:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   83d98:	4b1a      	ldr	r3, [pc, #104]	; (83e04 <xQueueGenericReceive+0x1d8>)
   83d9a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83d9c:	6a3b      	ldr	r3, [r7, #32]
   83d9e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83da2:	687b      	ldr	r3, [r7, #4]
   83da4:	4610      	mov	r0, r2
   83da6:	4619      	mov	r1, r3
   83da8:	4b1c      	ldr	r3, [pc, #112]	; (83e1c <xQueueGenericReceive+0x1f0>)
   83daa:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83dac:	6a38      	ldr	r0, [r7, #32]
   83dae:	4b1c      	ldr	r3, [pc, #112]	; (83e20 <xQueueGenericReceive+0x1f4>)
   83db0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83db2:	4b1c      	ldr	r3, [pc, #112]	; (83e24 <xQueueGenericReceive+0x1f8>)
   83db4:	4798      	blx	r3
   83db6:	4603      	mov	r3, r0
   83db8:	2b00      	cmp	r3, #0
   83dba:	d10f      	bne.n	83ddc <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   83dbc:	4b10      	ldr	r3, [pc, #64]	; (83e00 <xQueueGenericReceive+0x1d4>)
   83dbe:	4798      	blx	r3
   83dc0:	e00c      	b.n	83ddc <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83dc2:	6a38      	ldr	r0, [r7, #32]
   83dc4:	4b16      	ldr	r3, [pc, #88]	; (83e20 <xQueueGenericReceive+0x1f4>)
   83dc6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83dc8:	4b16      	ldr	r3, [pc, #88]	; (83e24 <xQueueGenericReceive+0x1f8>)
   83dca:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   83dcc:	e75e      	b.n	83c8c <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   83dce:	6a38      	ldr	r0, [r7, #32]
   83dd0:	4b13      	ldr	r3, [pc, #76]	; (83e20 <xQueueGenericReceive+0x1f4>)
   83dd2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83dd4:	4b13      	ldr	r3, [pc, #76]	; (83e24 <xQueueGenericReceive+0x1f8>)
   83dd6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   83dd8:	2300      	movs	r3, #0
   83dda:	e000      	b.n	83dde <xQueueGenericReceive+0x1b2>
		}
	}
   83ddc:	e756      	b.n	83c8c <xQueueGenericReceive+0x60>
}
   83dde:	4618      	mov	r0, r3
   83de0:	3728      	adds	r7, #40	; 0x28
   83de2:	46bd      	mov	sp, r7
   83de4:	bd80      	pop	{r7, pc}
   83de6:	bf00      	nop
   83de8:	00083365 	.word	0x00083365
   83dec:	00084db1 	.word	0x00084db1
   83df0:	000832e9 	.word	0x000832e9
   83df4:	00083f0d 	.word	0x00083f0d
   83df8:	00084fc5 	.word	0x00084fc5
   83dfc:	000848d9 	.word	0x000848d9
   83e00:	000832c9 	.word	0x000832c9
   83e04:	0008332d 	.word	0x0008332d
   83e08:	00084999 	.word	0x00084999
   83e0c:	000843d5 	.word	0x000843d5
   83e10:	000849d1 	.word	0x000849d1
   83e14:	00084005 	.word	0x00084005
   83e18:	00084ded 	.word	0x00084ded
   83e1c:	000847b9 	.word	0x000847b9
   83e20:	00083f5d 	.word	0x00083f5d
   83e24:	000843f1 	.word	0x000843f1

00083e28 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   83e28:	b580      	push	{r7, lr}
   83e2a:	b086      	sub	sp, #24
   83e2c:	af00      	add	r7, sp, #0
   83e2e:	60f8      	str	r0, [r7, #12]
   83e30:	60b9      	str	r1, [r7, #8]
   83e32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   83e34:	2300      	movs	r3, #0
   83e36:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   83e38:	68fb      	ldr	r3, [r7, #12]
   83e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83e3c:	2b00      	cmp	r3, #0
   83e3e:	d10d      	bne.n	83e5c <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83e40:	68fb      	ldr	r3, [r7, #12]
   83e42:	681b      	ldr	r3, [r3, #0]
   83e44:	2b00      	cmp	r3, #0
   83e46:	d152      	bne.n	83eee <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   83e48:	68fb      	ldr	r3, [r7, #12]
   83e4a:	685b      	ldr	r3, [r3, #4]
   83e4c:	4618      	mov	r0, r3
   83e4e:	4b2d      	ldr	r3, [pc, #180]	; (83f04 <prvCopyDataToQueue+0xdc>)
   83e50:	4798      	blx	r3
   83e52:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   83e54:	68fb      	ldr	r3, [r7, #12]
   83e56:	2200      	movs	r2, #0
   83e58:	605a      	str	r2, [r3, #4]
   83e5a:	e048      	b.n	83eee <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83e5c:	687b      	ldr	r3, [r7, #4]
   83e5e:	2b00      	cmp	r3, #0
   83e60:	d11a      	bne.n	83e98 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83e62:	68fb      	ldr	r3, [r7, #12]
   83e64:	689a      	ldr	r2, [r3, #8]
   83e66:	68fb      	ldr	r3, [r7, #12]
   83e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83e6a:	4610      	mov	r0, r2
   83e6c:	68b9      	ldr	r1, [r7, #8]
   83e6e:	461a      	mov	r2, r3
   83e70:	4b25      	ldr	r3, [pc, #148]	; (83f08 <prvCopyDataToQueue+0xe0>)
   83e72:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83e74:	68fb      	ldr	r3, [r7, #12]
   83e76:	689a      	ldr	r2, [r3, #8]
   83e78:	68fb      	ldr	r3, [r7, #12]
   83e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83e7c:	441a      	add	r2, r3
   83e7e:	68fb      	ldr	r3, [r7, #12]
   83e80:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83e82:	68fb      	ldr	r3, [r7, #12]
   83e84:	689a      	ldr	r2, [r3, #8]
   83e86:	68fb      	ldr	r3, [r7, #12]
   83e88:	685b      	ldr	r3, [r3, #4]
   83e8a:	429a      	cmp	r2, r3
   83e8c:	d32f      	bcc.n	83eee <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83e8e:	68fb      	ldr	r3, [r7, #12]
   83e90:	681a      	ldr	r2, [r3, #0]
   83e92:	68fb      	ldr	r3, [r7, #12]
   83e94:	609a      	str	r2, [r3, #8]
   83e96:	e02a      	b.n	83eee <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83e98:	68fb      	ldr	r3, [r7, #12]
   83e9a:	68da      	ldr	r2, [r3, #12]
   83e9c:	68fb      	ldr	r3, [r7, #12]
   83e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83ea0:	4610      	mov	r0, r2
   83ea2:	68b9      	ldr	r1, [r7, #8]
   83ea4:	461a      	mov	r2, r3
   83ea6:	4b18      	ldr	r3, [pc, #96]	; (83f08 <prvCopyDataToQueue+0xe0>)
   83ea8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83eaa:	68fb      	ldr	r3, [r7, #12]
   83eac:	68da      	ldr	r2, [r3, #12]
   83eae:	68fb      	ldr	r3, [r7, #12]
   83eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83eb2:	425b      	negs	r3, r3
   83eb4:	441a      	add	r2, r3
   83eb6:	68fb      	ldr	r3, [r7, #12]
   83eb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83eba:	68fb      	ldr	r3, [r7, #12]
   83ebc:	68da      	ldr	r2, [r3, #12]
   83ebe:	68fb      	ldr	r3, [r7, #12]
   83ec0:	681b      	ldr	r3, [r3, #0]
   83ec2:	429a      	cmp	r2, r3
   83ec4:	d207      	bcs.n	83ed6 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83ec6:	68fb      	ldr	r3, [r7, #12]
   83ec8:	685a      	ldr	r2, [r3, #4]
   83eca:	68fb      	ldr	r3, [r7, #12]
   83ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83ece:	425b      	negs	r3, r3
   83ed0:	441a      	add	r2, r3
   83ed2:	68fb      	ldr	r3, [r7, #12]
   83ed4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   83ed6:	687b      	ldr	r3, [r7, #4]
   83ed8:	2b02      	cmp	r3, #2
   83eda:	d108      	bne.n	83eee <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83edc:	68fb      	ldr	r3, [r7, #12]
   83ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ee0:	2b00      	cmp	r3, #0
   83ee2:	d004      	beq.n	83eee <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   83ee4:	68fb      	ldr	r3, [r7, #12]
   83ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ee8:	1e5a      	subs	r2, r3, #1
   83eea:	68fb      	ldr	r3, [r7, #12]
   83eec:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   83eee:	68fb      	ldr	r3, [r7, #12]
   83ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ef2:	1c5a      	adds	r2, r3, #1
   83ef4:	68fb      	ldr	r3, [r7, #12]
   83ef6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83ef8:	697b      	ldr	r3, [r7, #20]
}
   83efa:	4618      	mov	r0, r3
   83efc:	3718      	adds	r7, #24
   83efe:	46bd      	mov	sp, r7
   83f00:	bd80      	pop	{r7, pc}
   83f02:	bf00      	nop
   83f04:	00084ee1 	.word	0x00084ee1
   83f08:	00086b61 	.word	0x00086b61

00083f0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83f0c:	b580      	push	{r7, lr}
   83f0e:	b082      	sub	sp, #8
   83f10:	af00      	add	r7, sp, #0
   83f12:	6078      	str	r0, [r7, #4]
   83f14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83f16:	687b      	ldr	r3, [r7, #4]
   83f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f1a:	2b00      	cmp	r3, #0
   83f1c:	d019      	beq.n	83f52 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83f1e:	687b      	ldr	r3, [r7, #4]
   83f20:	68da      	ldr	r2, [r3, #12]
   83f22:	687b      	ldr	r3, [r7, #4]
   83f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f26:	441a      	add	r2, r3
   83f28:	687b      	ldr	r3, [r7, #4]
   83f2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83f2c:	687b      	ldr	r3, [r7, #4]
   83f2e:	68da      	ldr	r2, [r3, #12]
   83f30:	687b      	ldr	r3, [r7, #4]
   83f32:	685b      	ldr	r3, [r3, #4]
   83f34:	429a      	cmp	r2, r3
   83f36:	d303      	bcc.n	83f40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83f38:	687b      	ldr	r3, [r7, #4]
   83f3a:	681a      	ldr	r2, [r3, #0]
   83f3c:	687b      	ldr	r3, [r7, #4]
   83f3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83f40:	687b      	ldr	r3, [r7, #4]
   83f42:	68da      	ldr	r2, [r3, #12]
   83f44:	687b      	ldr	r3, [r7, #4]
   83f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83f48:	6838      	ldr	r0, [r7, #0]
   83f4a:	4611      	mov	r1, r2
   83f4c:	461a      	mov	r2, r3
   83f4e:	4b02      	ldr	r3, [pc, #8]	; (83f58 <prvCopyDataFromQueue+0x4c>)
   83f50:	4798      	blx	r3
	}
}
   83f52:	3708      	adds	r7, #8
   83f54:	46bd      	mov	sp, r7
   83f56:	bd80      	pop	{r7, pc}
   83f58:	00086b61 	.word	0x00086b61

00083f5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83f5c:	b580      	push	{r7, lr}
   83f5e:	b082      	sub	sp, #8
   83f60:	af00      	add	r7, sp, #0
   83f62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83f64:	4b23      	ldr	r3, [pc, #140]	; (83ff4 <prvUnlockQueue+0x98>)
   83f66:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83f68:	e014      	b.n	83f94 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83f6a:	687b      	ldr	r3, [r7, #4]
   83f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83f6e:	2b00      	cmp	r3, #0
   83f70:	d00a      	beq.n	83f88 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83f72:	687b      	ldr	r3, [r7, #4]
   83f74:	3324      	adds	r3, #36	; 0x24
   83f76:	4618      	mov	r0, r3
   83f78:	4b1f      	ldr	r3, [pc, #124]	; (83ff8 <prvUnlockQueue+0x9c>)
   83f7a:	4798      	blx	r3
   83f7c:	4603      	mov	r3, r0
   83f7e:	2b00      	cmp	r3, #0
   83f80:	d003      	beq.n	83f8a <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83f82:	4b1e      	ldr	r3, [pc, #120]	; (83ffc <prvUnlockQueue+0xa0>)
   83f84:	4798      	blx	r3
   83f86:	e000      	b.n	83f8a <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83f88:	e008      	b.n	83f9c <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83f8a:	687b      	ldr	r3, [r7, #4]
   83f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83f8e:	1e5a      	subs	r2, r3, #1
   83f90:	687b      	ldr	r3, [r7, #4]
   83f92:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83f94:	687b      	ldr	r3, [r7, #4]
   83f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83f98:	2b00      	cmp	r3, #0
   83f9a:	dce6      	bgt.n	83f6a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83f9c:	687b      	ldr	r3, [r7, #4]
   83f9e:	f04f 32ff 	mov.w	r2, #4294967295
   83fa2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83fa4:	4b16      	ldr	r3, [pc, #88]	; (84000 <prvUnlockQueue+0xa4>)
   83fa6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83fa8:	4b12      	ldr	r3, [pc, #72]	; (83ff4 <prvUnlockQueue+0x98>)
   83faa:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83fac:	e014      	b.n	83fd8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83fae:	687b      	ldr	r3, [r7, #4]
   83fb0:	691b      	ldr	r3, [r3, #16]
   83fb2:	2b00      	cmp	r3, #0
   83fb4:	d00f      	beq.n	83fd6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83fb6:	687b      	ldr	r3, [r7, #4]
   83fb8:	3310      	adds	r3, #16
   83fba:	4618      	mov	r0, r3
   83fbc:	4b0e      	ldr	r3, [pc, #56]	; (83ff8 <prvUnlockQueue+0x9c>)
   83fbe:	4798      	blx	r3
   83fc0:	4603      	mov	r3, r0
   83fc2:	2b00      	cmp	r3, #0
   83fc4:	d001      	beq.n	83fca <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   83fc6:	4b0d      	ldr	r3, [pc, #52]	; (83ffc <prvUnlockQueue+0xa0>)
   83fc8:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83fca:	687b      	ldr	r3, [r7, #4]
   83fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83fce:	1e5a      	subs	r2, r3, #1
   83fd0:	687b      	ldr	r3, [r7, #4]
   83fd2:	645a      	str	r2, [r3, #68]	; 0x44
   83fd4:	e000      	b.n	83fd8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   83fd6:	e003      	b.n	83fe0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83fd8:	687b      	ldr	r3, [r7, #4]
   83fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83fdc:	2b00      	cmp	r3, #0
   83fde:	dce6      	bgt.n	83fae <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83fe0:	687b      	ldr	r3, [r7, #4]
   83fe2:	f04f 32ff 	mov.w	r2, #4294967295
   83fe6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83fe8:	4b05      	ldr	r3, [pc, #20]	; (84000 <prvUnlockQueue+0xa4>)
   83fea:	4798      	blx	r3
}
   83fec:	3708      	adds	r7, #8
   83fee:	46bd      	mov	sp, r7
   83ff0:	bd80      	pop	{r7, pc}
   83ff2:	bf00      	nop
   83ff4:	000832e9 	.word	0x000832e9
   83ff8:	000848d9 	.word	0x000848d9
   83ffc:	00084a81 	.word	0x00084a81
   84000:	0008332d 	.word	0x0008332d

00084004 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   84004:	b580      	push	{r7, lr}
   84006:	b084      	sub	sp, #16
   84008:	af00      	add	r7, sp, #0
   8400a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   8400c:	4b08      	ldr	r3, [pc, #32]	; (84030 <prvIsQueueEmpty+0x2c>)
   8400e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   84010:	687b      	ldr	r3, [r7, #4]
   84012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84014:	2b00      	cmp	r3, #0
   84016:	d102      	bne.n	8401e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   84018:	2301      	movs	r3, #1
   8401a:	60fb      	str	r3, [r7, #12]
   8401c:	e001      	b.n	84022 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   8401e:	2300      	movs	r3, #0
   84020:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84022:	4b04      	ldr	r3, [pc, #16]	; (84034 <prvIsQueueEmpty+0x30>)
   84024:	4798      	blx	r3

	return xReturn;
   84026:	68fb      	ldr	r3, [r7, #12]
}
   84028:	4618      	mov	r0, r3
   8402a:	3710      	adds	r7, #16
   8402c:	46bd      	mov	sp, r7
   8402e:	bd80      	pop	{r7, pc}
   84030:	000832e9 	.word	0x000832e9
   84034:	0008332d 	.word	0x0008332d

00084038 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   84038:	b580      	push	{r7, lr}
   8403a:	b084      	sub	sp, #16
   8403c:	af00      	add	r7, sp, #0
   8403e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   84040:	4b09      	ldr	r3, [pc, #36]	; (84068 <prvIsQueueFull+0x30>)
   84042:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   84044:	687b      	ldr	r3, [r7, #4]
   84046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   84048:	687b      	ldr	r3, [r7, #4]
   8404a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8404c:	429a      	cmp	r2, r3
   8404e:	d102      	bne.n	84056 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   84050:	2301      	movs	r3, #1
   84052:	60fb      	str	r3, [r7, #12]
   84054:	e001      	b.n	8405a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   84056:	2300      	movs	r3, #0
   84058:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8405a:	4b04      	ldr	r3, [pc, #16]	; (8406c <prvIsQueueFull+0x34>)
   8405c:	4798      	blx	r3

	return xReturn;
   8405e:	68fb      	ldr	r3, [r7, #12]
}
   84060:	4618      	mov	r0, r3
   84062:	3710      	adds	r7, #16
   84064:	46bd      	mov	sp, r7
   84066:	bd80      	pop	{r7, pc}
   84068:	000832e9 	.word	0x000832e9
   8406c:	0008332d 	.word	0x0008332d

00084070 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   84070:	b580      	push	{r7, lr}
   84072:	b084      	sub	sp, #16
   84074:	af00      	add	r7, sp, #0
   84076:	6078      	str	r0, [r7, #4]
   84078:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8407a:	687b      	ldr	r3, [r7, #4]
   8407c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8407e:	4b12      	ldr	r3, [pc, #72]	; (840c8 <vQueueWaitForMessageRestricted+0x58>)
   84080:	4798      	blx	r3
   84082:	68fb      	ldr	r3, [r7, #12]
   84084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84086:	f1b3 3fff 	cmp.w	r3, #4294967295
   8408a:	d102      	bne.n	84092 <vQueueWaitForMessageRestricted+0x22>
   8408c:	68fb      	ldr	r3, [r7, #12]
   8408e:	2200      	movs	r2, #0
   84090:	645a      	str	r2, [r3, #68]	; 0x44
   84092:	68fb      	ldr	r3, [r7, #12]
   84094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84096:	f1b3 3fff 	cmp.w	r3, #4294967295
   8409a:	d102      	bne.n	840a2 <vQueueWaitForMessageRestricted+0x32>
   8409c:	68fb      	ldr	r3, [r7, #12]
   8409e:	2200      	movs	r2, #0
   840a0:	649a      	str	r2, [r3, #72]	; 0x48
   840a2:	4b0a      	ldr	r3, [pc, #40]	; (840cc <vQueueWaitForMessageRestricted+0x5c>)
   840a4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   840a6:	68fb      	ldr	r3, [r7, #12]
   840a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   840aa:	2b00      	cmp	r3, #0
   840ac:	d105      	bne.n	840ba <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   840ae:	68fb      	ldr	r3, [r7, #12]
   840b0:	3324      	adds	r3, #36	; 0x24
   840b2:	4618      	mov	r0, r3
   840b4:	6839      	ldr	r1, [r7, #0]
   840b6:	4b06      	ldr	r3, [pc, #24]	; (840d0 <vQueueWaitForMessageRestricted+0x60>)
   840b8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   840ba:	68f8      	ldr	r0, [r7, #12]
   840bc:	4b05      	ldr	r3, [pc, #20]	; (840d4 <vQueueWaitForMessageRestricted+0x64>)
   840be:	4798      	blx	r3
	}
   840c0:	3710      	adds	r7, #16
   840c2:	46bd      	mov	sp, r7
   840c4:	bd80      	pop	{r7, pc}
   840c6:	bf00      	nop
   840c8:	000832e9 	.word	0x000832e9
   840cc:	0008332d 	.word	0x0008332d
   840d0:	00084859 	.word	0x00084859
   840d4:	00083f5d 	.word	0x00083f5d

000840d8 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   840d8:	b590      	push	{r4, r7, lr}
   840da:	b08b      	sub	sp, #44	; 0x2c
   840dc:	af02      	add	r7, sp, #8
   840de:	60f8      	str	r0, [r7, #12]
   840e0:	60b9      	str	r1, [r7, #8]
   840e2:	603b      	str	r3, [r7, #0]
   840e4:	4613      	mov	r3, r2
   840e6:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   840e8:	68fb      	ldr	r3, [r7, #12]
   840ea:	2b00      	cmp	r3, #0
   840ec:	d102      	bne.n	840f4 <xTaskGenericCreate+0x1c>
   840ee:	4b4b      	ldr	r3, [pc, #300]	; (8421c <xTaskGenericCreate+0x144>)
   840f0:	4798      	blx	r3
   840f2:	e7fe      	b.n	840f2 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   840f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   840f6:	2b04      	cmp	r3, #4
   840f8:	d902      	bls.n	84100 <xTaskGenericCreate+0x28>
   840fa:	4b48      	ldr	r3, [pc, #288]	; (8421c <xTaskGenericCreate+0x144>)
   840fc:	4798      	blx	r3
   840fe:	e7fe      	b.n	840fe <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   84100:	88fb      	ldrh	r3, [r7, #6]
   84102:	4618      	mov	r0, r3
   84104:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   84106:	4b46      	ldr	r3, [pc, #280]	; (84220 <xTaskGenericCreate+0x148>)
   84108:	4798      	blx	r3
   8410a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   8410c:	69bb      	ldr	r3, [r7, #24]
   8410e:	2b00      	cmp	r3, #0
   84110:	d06d      	beq.n	841ee <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   84112:	69bb      	ldr	r3, [r7, #24]
   84114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84116:	88fb      	ldrh	r3, [r7, #6]
   84118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   8411c:	3b01      	subs	r3, #1
   8411e:	009b      	lsls	r3, r3, #2
   84120:	4413      	add	r3, r2
   84122:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   84124:	697b      	ldr	r3, [r7, #20]
   84126:	f023 0307 	bic.w	r3, r3, #7
   8412a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8412c:	697b      	ldr	r3, [r7, #20]
   8412e:	f003 0307 	and.w	r3, r3, #7
   84132:	2b00      	cmp	r3, #0
   84134:	d002      	beq.n	8413c <xTaskGenericCreate+0x64>
   84136:	4b39      	ldr	r3, [pc, #228]	; (8421c <xTaskGenericCreate+0x144>)
   84138:	4798      	blx	r3
   8413a:	e7fe      	b.n	8413a <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   8413c:	88fb      	ldrh	r3, [r7, #6]
   8413e:	9300      	str	r3, [sp, #0]
   84140:	69b8      	ldr	r0, [r7, #24]
   84142:	68b9      	ldr	r1, [r7, #8]
   84144:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   84148:	4c36      	ldr	r4, [pc, #216]	; (84224 <xTaskGenericCreate+0x14c>)
   8414a:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   8414c:	6978      	ldr	r0, [r7, #20]
   8414e:	68f9      	ldr	r1, [r7, #12]
   84150:	683a      	ldr	r2, [r7, #0]
   84152:	4b35      	ldr	r3, [pc, #212]	; (84228 <xTaskGenericCreate+0x150>)
   84154:	4798      	blx	r3
   84156:	4602      	mov	r2, r0
   84158:	69bb      	ldr	r3, [r7, #24]
   8415a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   8415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8415e:	2b00      	cmp	r3, #0
   84160:	d002      	beq.n	84168 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   84162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   84164:	69ba      	ldr	r2, [r7, #24]
   84166:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   84168:	4b30      	ldr	r3, [pc, #192]	; (8422c <xTaskGenericCreate+0x154>)
   8416a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   8416c:	4b30      	ldr	r3, [pc, #192]	; (84230 <xTaskGenericCreate+0x158>)
   8416e:	681b      	ldr	r3, [r3, #0]
   84170:	1c5a      	adds	r2, r3, #1
   84172:	4b2f      	ldr	r3, [pc, #188]	; (84230 <xTaskGenericCreate+0x158>)
   84174:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   84176:	4b2f      	ldr	r3, [pc, #188]	; (84234 <xTaskGenericCreate+0x15c>)
   84178:	681b      	ldr	r3, [r3, #0]
   8417a:	2b00      	cmp	r3, #0
   8417c:	d109      	bne.n	84192 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8417e:	4b2d      	ldr	r3, [pc, #180]	; (84234 <xTaskGenericCreate+0x15c>)
   84180:	69ba      	ldr	r2, [r7, #24]
   84182:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   84184:	4b2a      	ldr	r3, [pc, #168]	; (84230 <xTaskGenericCreate+0x158>)
   84186:	681b      	ldr	r3, [r3, #0]
   84188:	2b01      	cmp	r3, #1
   8418a:	d10f      	bne.n	841ac <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   8418c:	4b2a      	ldr	r3, [pc, #168]	; (84238 <xTaskGenericCreate+0x160>)
   8418e:	4798      	blx	r3
   84190:	e00c      	b.n	841ac <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   84192:	4b2a      	ldr	r3, [pc, #168]	; (8423c <xTaskGenericCreate+0x164>)
   84194:	681b      	ldr	r3, [r3, #0]
   84196:	2b00      	cmp	r3, #0
   84198:	d108      	bne.n	841ac <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8419a:	4b26      	ldr	r3, [pc, #152]	; (84234 <xTaskGenericCreate+0x15c>)
   8419c:	681b      	ldr	r3, [r3, #0]
   8419e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   841a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   841a2:	429a      	cmp	r2, r3
   841a4:	d802      	bhi.n	841ac <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   841a6:	4b23      	ldr	r3, [pc, #140]	; (84234 <xTaskGenericCreate+0x15c>)
   841a8:	69ba      	ldr	r2, [r7, #24]
   841aa:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   841ac:	4b24      	ldr	r3, [pc, #144]	; (84240 <xTaskGenericCreate+0x168>)
   841ae:	681b      	ldr	r3, [r3, #0]
   841b0:	1c5a      	adds	r2, r3, #1
   841b2:	4b23      	ldr	r3, [pc, #140]	; (84240 <xTaskGenericCreate+0x168>)
   841b4:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   841b6:	69bb      	ldr	r3, [r7, #24]
   841b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   841ba:	2201      	movs	r2, #1
   841bc:	409a      	lsls	r2, r3
   841be:	4b21      	ldr	r3, [pc, #132]	; (84244 <xTaskGenericCreate+0x16c>)
   841c0:	681b      	ldr	r3, [r3, #0]
   841c2:	431a      	orrs	r2, r3
   841c4:	4b1f      	ldr	r3, [pc, #124]	; (84244 <xTaskGenericCreate+0x16c>)
   841c6:	601a      	str	r2, [r3, #0]
   841c8:	69bb      	ldr	r3, [r7, #24]
   841ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   841cc:	4613      	mov	r3, r2
   841ce:	009b      	lsls	r3, r3, #2
   841d0:	4413      	add	r3, r2
   841d2:	009b      	lsls	r3, r3, #2
   841d4:	4a1c      	ldr	r2, [pc, #112]	; (84248 <xTaskGenericCreate+0x170>)
   841d6:	441a      	add	r2, r3
   841d8:	69bb      	ldr	r3, [r7, #24]
   841da:	3304      	adds	r3, #4
   841dc:	4610      	mov	r0, r2
   841de:	4619      	mov	r1, r3
   841e0:	4b1a      	ldr	r3, [pc, #104]	; (8424c <xTaskGenericCreate+0x174>)
   841e2:	4798      	blx	r3

			xReturn = pdPASS;
   841e4:	2301      	movs	r3, #1
   841e6:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   841e8:	4b19      	ldr	r3, [pc, #100]	; (84250 <xTaskGenericCreate+0x178>)
   841ea:	4798      	blx	r3
   841ec:	e002      	b.n	841f4 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   841ee:	f04f 33ff 	mov.w	r3, #4294967295
   841f2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   841f4:	69fb      	ldr	r3, [r7, #28]
   841f6:	2b01      	cmp	r3, #1
   841f8:	d10b      	bne.n	84212 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   841fa:	4b10      	ldr	r3, [pc, #64]	; (8423c <xTaskGenericCreate+0x164>)
   841fc:	681b      	ldr	r3, [r3, #0]
   841fe:	2b00      	cmp	r3, #0
   84200:	d007      	beq.n	84212 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   84202:	4b0c      	ldr	r3, [pc, #48]	; (84234 <xTaskGenericCreate+0x15c>)
   84204:	681b      	ldr	r3, [r3, #0]
   84206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8420a:	429a      	cmp	r2, r3
   8420c:	d201      	bcs.n	84212 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   8420e:	4b11      	ldr	r3, [pc, #68]	; (84254 <xTaskGenericCreate+0x17c>)
   84210:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   84212:	69fb      	ldr	r3, [r7, #28]
}
   84214:	4618      	mov	r0, r3
   84216:	3724      	adds	r7, #36	; 0x24
   84218:	46bd      	mov	sp, r7
   8421a:	bd90      	pop	{r4, r7, pc}
   8421c:	00083365 	.word	0x00083365
   84220:	00084cd5 	.word	0x00084cd5
   84224:	00084ac1 	.word	0x00084ac1
   84228:	00083141 	.word	0x00083141
   8422c:	000832e9 	.word	0x000832e9
   84230:	2007a5e0 	.word	0x2007a5e0
   84234:	2007a508 	.word	0x2007a508
   84238:	00084b59 	.word	0x00084b59
   8423c:	2007a5ec 	.word	0x2007a5ec
   84240:	2007a5fc 	.word	0x2007a5fc
   84244:	2007a5e8 	.word	0x2007a5e8
   84248:	2007a50c 	.word	0x2007a50c
   8424c:	00083035 	.word	0x00083035
   84250:	0008332d 	.word	0x0008332d
   84254:	000832c9 	.word	0x000832c9

00084258 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   84258:	b580      	push	{r7, lr}
   8425a:	b086      	sub	sp, #24
   8425c:	af00      	add	r7, sp, #0
   8425e:	6078      	str	r0, [r7, #4]
   84260:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   84262:	2300      	movs	r3, #0
   84264:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   84266:	687b      	ldr	r3, [r7, #4]
   84268:	2b00      	cmp	r3, #0
   8426a:	d102      	bne.n	84272 <vTaskDelayUntil+0x1a>
   8426c:	4b2f      	ldr	r3, [pc, #188]	; (8432c <vTaskDelayUntil+0xd4>)
   8426e:	4798      	blx	r3
   84270:	e7fe      	b.n	84270 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   84272:	683b      	ldr	r3, [r7, #0]
   84274:	2b00      	cmp	r3, #0
   84276:	d102      	bne.n	8427e <vTaskDelayUntil+0x26>
   84278:	4b2c      	ldr	r3, [pc, #176]	; (8432c <vTaskDelayUntil+0xd4>)
   8427a:	4798      	blx	r3
   8427c:	e7fe      	b.n	8427c <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   8427e:	4b2c      	ldr	r3, [pc, #176]	; (84330 <vTaskDelayUntil+0xd8>)
   84280:	681b      	ldr	r3, [r3, #0]
   84282:	2b00      	cmp	r3, #0
   84284:	d002      	beq.n	8428c <vTaskDelayUntil+0x34>
   84286:	4b29      	ldr	r3, [pc, #164]	; (8432c <vTaskDelayUntil+0xd4>)
   84288:	4798      	blx	r3
   8428a:	e7fe      	b.n	8428a <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   8428c:	4b29      	ldr	r3, [pc, #164]	; (84334 <vTaskDelayUntil+0xdc>)
   8428e:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   84290:	4b29      	ldr	r3, [pc, #164]	; (84338 <vTaskDelayUntil+0xe0>)
   84292:	681b      	ldr	r3, [r3, #0]
   84294:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   84296:	687b      	ldr	r3, [r7, #4]
   84298:	681a      	ldr	r2, [r3, #0]
   8429a:	683b      	ldr	r3, [r7, #0]
   8429c:	4413      	add	r3, r2
   8429e:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   842a0:	687b      	ldr	r3, [r7, #4]
   842a2:	681a      	ldr	r2, [r3, #0]
   842a4:	693b      	ldr	r3, [r7, #16]
   842a6:	429a      	cmp	r2, r3
   842a8:	d90b      	bls.n	842c2 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   842aa:	687b      	ldr	r3, [r7, #4]
   842ac:	681a      	ldr	r2, [r3, #0]
   842ae:	68fb      	ldr	r3, [r7, #12]
   842b0:	429a      	cmp	r2, r3
   842b2:	d911      	bls.n	842d8 <vTaskDelayUntil+0x80>
   842b4:	68fa      	ldr	r2, [r7, #12]
   842b6:	693b      	ldr	r3, [r7, #16]
   842b8:	429a      	cmp	r2, r3
   842ba:	d90d      	bls.n	842d8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   842bc:	2301      	movs	r3, #1
   842be:	617b      	str	r3, [r7, #20]
   842c0:	e00a      	b.n	842d8 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   842c2:	687b      	ldr	r3, [r7, #4]
   842c4:	681a      	ldr	r2, [r3, #0]
   842c6:	68fb      	ldr	r3, [r7, #12]
   842c8:	429a      	cmp	r2, r3
   842ca:	d803      	bhi.n	842d4 <vTaskDelayUntil+0x7c>
   842cc:	68fa      	ldr	r2, [r7, #12]
   842ce:	693b      	ldr	r3, [r7, #16]
   842d0:	429a      	cmp	r2, r3
   842d2:	d901      	bls.n	842d8 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   842d4:	2301      	movs	r3, #1
   842d6:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   842d8:	687b      	ldr	r3, [r7, #4]
   842da:	68fa      	ldr	r2, [r7, #12]
   842dc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   842de:	697b      	ldr	r3, [r7, #20]
   842e0:	2b00      	cmp	r3, #0
   842e2:	d017      	beq.n	84314 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   842e4:	4b15      	ldr	r3, [pc, #84]	; (8433c <vTaskDelayUntil+0xe4>)
   842e6:	681b      	ldr	r3, [r3, #0]
   842e8:	3304      	adds	r3, #4
   842ea:	4618      	mov	r0, r3
   842ec:	4b14      	ldr	r3, [pc, #80]	; (84340 <vTaskDelayUntil+0xe8>)
   842ee:	4798      	blx	r3
   842f0:	4603      	mov	r3, r0
   842f2:	2b00      	cmp	r3, #0
   842f4:	d10b      	bne.n	8430e <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   842f6:	4b11      	ldr	r3, [pc, #68]	; (8433c <vTaskDelayUntil+0xe4>)
   842f8:	681b      	ldr	r3, [r3, #0]
   842fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   842fc:	2201      	movs	r2, #1
   842fe:	fa02 f303 	lsl.w	r3, r2, r3
   84302:	43da      	mvns	r2, r3
   84304:	4b0f      	ldr	r3, [pc, #60]	; (84344 <vTaskDelayUntil+0xec>)
   84306:	681b      	ldr	r3, [r3, #0]
   84308:	401a      	ands	r2, r3
   8430a:	4b0e      	ldr	r3, [pc, #56]	; (84344 <vTaskDelayUntil+0xec>)
   8430c:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8430e:	68f8      	ldr	r0, [r7, #12]
   84310:	4b0d      	ldr	r3, [pc, #52]	; (84348 <vTaskDelayUntil+0xf0>)
   84312:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   84314:	4b0d      	ldr	r3, [pc, #52]	; (8434c <vTaskDelayUntil+0xf4>)
   84316:	4798      	blx	r3
   84318:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8431a:	68bb      	ldr	r3, [r7, #8]
   8431c:	2b00      	cmp	r3, #0
   8431e:	d101      	bne.n	84324 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   84320:	4b0b      	ldr	r3, [pc, #44]	; (84350 <vTaskDelayUntil+0xf8>)
   84322:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84324:	3718      	adds	r7, #24
   84326:	46bd      	mov	sp, r7
   84328:	bd80      	pop	{r7, pc}
   8432a:	bf00      	nop
   8432c:	00083365 	.word	0x00083365
   84330:	2007a600 	.word	0x2007a600
   84334:	000843d5 	.word	0x000843d5
   84338:	2007a5e4 	.word	0x2007a5e4
   8433c:	2007a508 	.word	0x2007a508
   84340:	000830ed 	.word	0x000830ed
   84344:	2007a5e8 	.word	0x2007a5e8
   84348:	00084c65 	.word	0x00084c65
   8434c:	000843f1 	.word	0x000843f1
   84350:	000832c9 	.word	0x000832c9

00084354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   84354:	b590      	push	{r4, r7, lr}
   84356:	b087      	sub	sp, #28
   84358:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   8435a:	2300      	movs	r3, #0
   8435c:	9300      	str	r3, [sp, #0]
   8435e:	2300      	movs	r3, #0
   84360:	9301      	str	r3, [sp, #4]
   84362:	2300      	movs	r3, #0
   84364:	9302      	str	r3, [sp, #8]
   84366:	2300      	movs	r3, #0
   84368:	9303      	str	r3, [sp, #12]
   8436a:	4812      	ldr	r0, [pc, #72]	; (843b4 <vTaskStartScheduler+0x60>)
   8436c:	4912      	ldr	r1, [pc, #72]	; (843b8 <vTaskStartScheduler+0x64>)
   8436e:	2282      	movs	r2, #130	; 0x82
   84370:	2300      	movs	r3, #0
   84372:	4c12      	ldr	r4, [pc, #72]	; (843bc <vTaskStartScheduler+0x68>)
   84374:	47a0      	blx	r4
   84376:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   84378:	687b      	ldr	r3, [r7, #4]
   8437a:	2b01      	cmp	r3, #1
   8437c:	d102      	bne.n	84384 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   8437e:	4b10      	ldr	r3, [pc, #64]	; (843c0 <vTaskStartScheduler+0x6c>)
   84380:	4798      	blx	r3
   84382:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   84384:	687b      	ldr	r3, [r7, #4]
   84386:	2b01      	cmp	r3, #1
   84388:	d10a      	bne.n	843a0 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   8438a:	4b0e      	ldr	r3, [pc, #56]	; (843c4 <vTaskStartScheduler+0x70>)
   8438c:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   8438e:	4b0e      	ldr	r3, [pc, #56]	; (843c8 <vTaskStartScheduler+0x74>)
   84390:	2201      	movs	r2, #1
   84392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   84394:	4b0d      	ldr	r3, [pc, #52]	; (843cc <vTaskStartScheduler+0x78>)
   84396:	2200      	movs	r2, #0
   84398:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8439a:	4b0d      	ldr	r3, [pc, #52]	; (843d0 <vTaskStartScheduler+0x7c>)
   8439c:	4798      	blx	r3
   8439e:	e005      	b.n	843ac <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   843a0:	687b      	ldr	r3, [r7, #4]
   843a2:	2b00      	cmp	r3, #0
   843a4:	d102      	bne.n	843ac <vTaskStartScheduler+0x58>
   843a6:	4b07      	ldr	r3, [pc, #28]	; (843c4 <vTaskStartScheduler+0x70>)
   843a8:	4798      	blx	r3
   843aa:	e7fe      	b.n	843aa <vTaskStartScheduler+0x56>
	}
}
   843ac:	370c      	adds	r7, #12
   843ae:	46bd      	mov	sp, r7
   843b0:	bd90      	pop	{r4, r7, pc}
   843b2:	bf00      	nop
   843b4:	00084a99 	.word	0x00084a99
   843b8:	00086f3c 	.word	0x00086f3c
   843bc:	000840d9 	.word	0x000840d9
   843c0:	00084fed 	.word	0x00084fed
   843c4:	00083365 	.word	0x00083365
   843c8:	2007a5ec 	.word	0x2007a5ec
   843cc:	2007a5e4 	.word	0x2007a5e4
   843d0:	00083201 	.word	0x00083201

000843d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   843d4:	b480      	push	{r7}
   843d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   843d8:	4b04      	ldr	r3, [pc, #16]	; (843ec <vTaskSuspendAll+0x18>)
   843da:	681b      	ldr	r3, [r3, #0]
   843dc:	1c5a      	adds	r2, r3, #1
   843de:	4b03      	ldr	r3, [pc, #12]	; (843ec <vTaskSuspendAll+0x18>)
   843e0:	601a      	str	r2, [r3, #0]
}
   843e2:	46bd      	mov	sp, r7
   843e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   843e8:	4770      	bx	lr
   843ea:	bf00      	nop
   843ec:	2007a600 	.word	0x2007a600

000843f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   843f0:	b580      	push	{r7, lr}
   843f2:	b082      	sub	sp, #8
   843f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   843f6:	2300      	movs	r3, #0
   843f8:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   843fa:	4b37      	ldr	r3, [pc, #220]	; (844d8 <xTaskResumeAll+0xe8>)
   843fc:	681b      	ldr	r3, [r3, #0]
   843fe:	2b00      	cmp	r3, #0
   84400:	d102      	bne.n	84408 <xTaskResumeAll+0x18>
   84402:	4b36      	ldr	r3, [pc, #216]	; (844dc <xTaskResumeAll+0xec>)
   84404:	4798      	blx	r3
   84406:	e7fe      	b.n	84406 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   84408:	4b35      	ldr	r3, [pc, #212]	; (844e0 <xTaskResumeAll+0xf0>)
   8440a:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8440c:	4b32      	ldr	r3, [pc, #200]	; (844d8 <xTaskResumeAll+0xe8>)
   8440e:	681b      	ldr	r3, [r3, #0]
   84410:	1e5a      	subs	r2, r3, #1
   84412:	4b31      	ldr	r3, [pc, #196]	; (844d8 <xTaskResumeAll+0xe8>)
   84414:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84416:	4b30      	ldr	r3, [pc, #192]	; (844d8 <xTaskResumeAll+0xe8>)
   84418:	681b      	ldr	r3, [r3, #0]
   8441a:	2b00      	cmp	r3, #0
   8441c:	d155      	bne.n	844ca <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   8441e:	4b31      	ldr	r3, [pc, #196]	; (844e4 <xTaskResumeAll+0xf4>)
   84420:	681b      	ldr	r3, [r3, #0]
   84422:	2b00      	cmp	r3, #0
   84424:	d051      	beq.n	844ca <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84426:	e02e      	b.n	84486 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   84428:	4b2f      	ldr	r3, [pc, #188]	; (844e8 <xTaskResumeAll+0xf8>)
   8442a:	68db      	ldr	r3, [r3, #12]
   8442c:	68db      	ldr	r3, [r3, #12]
   8442e:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84430:	683b      	ldr	r3, [r7, #0]
   84432:	3318      	adds	r3, #24
   84434:	4618      	mov	r0, r3
   84436:	4b2d      	ldr	r3, [pc, #180]	; (844ec <xTaskResumeAll+0xfc>)
   84438:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8443a:	683b      	ldr	r3, [r7, #0]
   8443c:	3304      	adds	r3, #4
   8443e:	4618      	mov	r0, r3
   84440:	4b2a      	ldr	r3, [pc, #168]	; (844ec <xTaskResumeAll+0xfc>)
   84442:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   84444:	683b      	ldr	r3, [r7, #0]
   84446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84448:	2201      	movs	r2, #1
   8444a:	409a      	lsls	r2, r3
   8444c:	4b28      	ldr	r3, [pc, #160]	; (844f0 <xTaskResumeAll+0x100>)
   8444e:	681b      	ldr	r3, [r3, #0]
   84450:	431a      	orrs	r2, r3
   84452:	4b27      	ldr	r3, [pc, #156]	; (844f0 <xTaskResumeAll+0x100>)
   84454:	601a      	str	r2, [r3, #0]
   84456:	683b      	ldr	r3, [r7, #0]
   84458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8445a:	4613      	mov	r3, r2
   8445c:	009b      	lsls	r3, r3, #2
   8445e:	4413      	add	r3, r2
   84460:	009b      	lsls	r3, r3, #2
   84462:	4a24      	ldr	r2, [pc, #144]	; (844f4 <xTaskResumeAll+0x104>)
   84464:	441a      	add	r2, r3
   84466:	683b      	ldr	r3, [r7, #0]
   84468:	3304      	adds	r3, #4
   8446a:	4610      	mov	r0, r2
   8446c:	4619      	mov	r1, r3
   8446e:	4b22      	ldr	r3, [pc, #136]	; (844f8 <xTaskResumeAll+0x108>)
   84470:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84472:	683b      	ldr	r3, [r7, #0]
   84474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84476:	4b21      	ldr	r3, [pc, #132]	; (844fc <xTaskResumeAll+0x10c>)
   84478:	681b      	ldr	r3, [r3, #0]
   8447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8447c:	429a      	cmp	r2, r3
   8447e:	d302      	bcc.n	84486 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   84480:	4b1f      	ldr	r3, [pc, #124]	; (84500 <xTaskResumeAll+0x110>)
   84482:	2201      	movs	r2, #1
   84484:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84486:	4b18      	ldr	r3, [pc, #96]	; (844e8 <xTaskResumeAll+0xf8>)
   84488:	681b      	ldr	r3, [r3, #0]
   8448a:	2b00      	cmp	r3, #0
   8448c:	d1cc      	bne.n	84428 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   8448e:	4b1d      	ldr	r3, [pc, #116]	; (84504 <xTaskResumeAll+0x114>)
   84490:	681b      	ldr	r3, [r3, #0]
   84492:	2b00      	cmp	r3, #0
   84494:	d011      	beq.n	844ba <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   84496:	e00c      	b.n	844b2 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   84498:	4b1b      	ldr	r3, [pc, #108]	; (84508 <xTaskResumeAll+0x118>)
   8449a:	4798      	blx	r3
   8449c:	4603      	mov	r3, r0
   8449e:	2b00      	cmp	r3, #0
   844a0:	d002      	beq.n	844a8 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   844a2:	4b17      	ldr	r3, [pc, #92]	; (84500 <xTaskResumeAll+0x110>)
   844a4:	2201      	movs	r2, #1
   844a6:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   844a8:	4b16      	ldr	r3, [pc, #88]	; (84504 <xTaskResumeAll+0x114>)
   844aa:	681b      	ldr	r3, [r3, #0]
   844ac:	1e5a      	subs	r2, r3, #1
   844ae:	4b15      	ldr	r3, [pc, #84]	; (84504 <xTaskResumeAll+0x114>)
   844b0:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   844b2:	4b14      	ldr	r3, [pc, #80]	; (84504 <xTaskResumeAll+0x114>)
   844b4:	681b      	ldr	r3, [r3, #0]
   844b6:	2b00      	cmp	r3, #0
   844b8:	d1ee      	bne.n	84498 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   844ba:	4b11      	ldr	r3, [pc, #68]	; (84500 <xTaskResumeAll+0x110>)
   844bc:	681b      	ldr	r3, [r3, #0]
   844be:	2b01      	cmp	r3, #1
   844c0:	d103      	bne.n	844ca <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   844c2:	2301      	movs	r3, #1
   844c4:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   844c6:	4b11      	ldr	r3, [pc, #68]	; (8450c <xTaskResumeAll+0x11c>)
   844c8:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   844ca:	4b11      	ldr	r3, [pc, #68]	; (84510 <xTaskResumeAll+0x120>)
   844cc:	4798      	blx	r3

	return xAlreadyYielded;
   844ce:	687b      	ldr	r3, [r7, #4]
}
   844d0:	4618      	mov	r0, r3
   844d2:	3708      	adds	r7, #8
   844d4:	46bd      	mov	sp, r7
   844d6:	bd80      	pop	{r7, pc}
   844d8:	2007a600 	.word	0x2007a600
   844dc:	00083365 	.word	0x00083365
   844e0:	000832e9 	.word	0x000832e9
   844e4:	2007a5e0 	.word	0x2007a5e0
   844e8:	2007a5a0 	.word	0x2007a5a0
   844ec:	000830ed 	.word	0x000830ed
   844f0:	2007a5e8 	.word	0x2007a5e8
   844f4:	2007a50c 	.word	0x2007a50c
   844f8:	00083035 	.word	0x00083035
   844fc:	2007a508 	.word	0x2007a508
   84500:	2007a5f4 	.word	0x2007a5f4
   84504:	2007a5f0 	.word	0x2007a5f0
   84508:	00084541 	.word	0x00084541
   8450c:	000832c9 	.word	0x000832c9
   84510:	0008332d 	.word	0x0008332d

00084514 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   84514:	b580      	push	{r7, lr}
   84516:	b082      	sub	sp, #8
   84518:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8451a:	4b06      	ldr	r3, [pc, #24]	; (84534 <xTaskGetTickCount+0x20>)
   8451c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8451e:	4b06      	ldr	r3, [pc, #24]	; (84538 <xTaskGetTickCount+0x24>)
   84520:	681b      	ldr	r3, [r3, #0]
   84522:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   84524:	4b05      	ldr	r3, [pc, #20]	; (8453c <xTaskGetTickCount+0x28>)
   84526:	4798      	blx	r3

	return xTicks;
   84528:	687b      	ldr	r3, [r7, #4]
}
   8452a:	4618      	mov	r0, r3
   8452c:	3708      	adds	r7, #8
   8452e:	46bd      	mov	sp, r7
   84530:	bd80      	pop	{r7, pc}
   84532:	bf00      	nop
   84534:	000832e9 	.word	0x000832e9
   84538:	2007a5e4 	.word	0x2007a5e4
   8453c:	0008332d 	.word	0x0008332d

00084540 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   84540:	b580      	push	{r7, lr}
   84542:	b086      	sub	sp, #24
   84544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   84546:	2300      	movs	r3, #0
   84548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8454a:	4b4d      	ldr	r3, [pc, #308]	; (84680 <xTaskIncrementTick+0x140>)
   8454c:	681b      	ldr	r3, [r3, #0]
   8454e:	2b00      	cmp	r3, #0
   84550:	f040 8086 	bne.w	84660 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   84554:	4b4b      	ldr	r3, [pc, #300]	; (84684 <xTaskIncrementTick+0x144>)
   84556:	681b      	ldr	r3, [r3, #0]
   84558:	1c5a      	adds	r2, r3, #1
   8455a:	4b4a      	ldr	r3, [pc, #296]	; (84684 <xTaskIncrementTick+0x144>)
   8455c:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   8455e:	4b49      	ldr	r3, [pc, #292]	; (84684 <xTaskIncrementTick+0x144>)
   84560:	681b      	ldr	r3, [r3, #0]
   84562:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   84564:	693b      	ldr	r3, [r7, #16]
   84566:	2b00      	cmp	r3, #0
   84568:	d118      	bne.n	8459c <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   8456a:	4b47      	ldr	r3, [pc, #284]	; (84688 <xTaskIncrementTick+0x148>)
   8456c:	681b      	ldr	r3, [r3, #0]
   8456e:	681b      	ldr	r3, [r3, #0]
   84570:	2b00      	cmp	r3, #0
   84572:	d002      	beq.n	8457a <xTaskIncrementTick+0x3a>
   84574:	4b45      	ldr	r3, [pc, #276]	; (8468c <xTaskIncrementTick+0x14c>)
   84576:	4798      	blx	r3
   84578:	e7fe      	b.n	84578 <xTaskIncrementTick+0x38>
   8457a:	4b43      	ldr	r3, [pc, #268]	; (84688 <xTaskIncrementTick+0x148>)
   8457c:	681b      	ldr	r3, [r3, #0]
   8457e:	60fb      	str	r3, [r7, #12]
   84580:	4b43      	ldr	r3, [pc, #268]	; (84690 <xTaskIncrementTick+0x150>)
   84582:	681a      	ldr	r2, [r3, #0]
   84584:	4b40      	ldr	r3, [pc, #256]	; (84688 <xTaskIncrementTick+0x148>)
   84586:	601a      	str	r2, [r3, #0]
   84588:	4b41      	ldr	r3, [pc, #260]	; (84690 <xTaskIncrementTick+0x150>)
   8458a:	68fa      	ldr	r2, [r7, #12]
   8458c:	601a      	str	r2, [r3, #0]
   8458e:	4b41      	ldr	r3, [pc, #260]	; (84694 <xTaskIncrementTick+0x154>)
   84590:	681b      	ldr	r3, [r3, #0]
   84592:	1c5a      	adds	r2, r3, #1
   84594:	4b3f      	ldr	r3, [pc, #252]	; (84694 <xTaskIncrementTick+0x154>)
   84596:	601a      	str	r2, [r3, #0]
   84598:	4b3f      	ldr	r3, [pc, #252]	; (84698 <xTaskIncrementTick+0x158>)
   8459a:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   8459c:	4b3f      	ldr	r3, [pc, #252]	; (8469c <xTaskIncrementTick+0x15c>)
   8459e:	681b      	ldr	r3, [r3, #0]
   845a0:	693a      	ldr	r2, [r7, #16]
   845a2:	429a      	cmp	r2, r3
   845a4:	d34d      	bcc.n	84642 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   845a6:	4b38      	ldr	r3, [pc, #224]	; (84688 <xTaskIncrementTick+0x148>)
   845a8:	681b      	ldr	r3, [r3, #0]
   845aa:	681b      	ldr	r3, [r3, #0]
   845ac:	2b00      	cmp	r3, #0
   845ae:	d101      	bne.n	845b4 <xTaskIncrementTick+0x74>
   845b0:	2301      	movs	r3, #1
   845b2:	e000      	b.n	845b6 <xTaskIncrementTick+0x76>
   845b4:	2300      	movs	r3, #0
   845b6:	2b00      	cmp	r3, #0
   845b8:	d004      	beq.n	845c4 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   845ba:	4b38      	ldr	r3, [pc, #224]	; (8469c <xTaskIncrementTick+0x15c>)
   845bc:	f04f 32ff 	mov.w	r2, #4294967295
   845c0:	601a      	str	r2, [r3, #0]
						break;
   845c2:	e03e      	b.n	84642 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   845c4:	4b30      	ldr	r3, [pc, #192]	; (84688 <xTaskIncrementTick+0x148>)
   845c6:	681b      	ldr	r3, [r3, #0]
   845c8:	68db      	ldr	r3, [r3, #12]
   845ca:	68db      	ldr	r3, [r3, #12]
   845cc:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   845ce:	68bb      	ldr	r3, [r7, #8]
   845d0:	685b      	ldr	r3, [r3, #4]
   845d2:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   845d4:	693a      	ldr	r2, [r7, #16]
   845d6:	687b      	ldr	r3, [r7, #4]
   845d8:	429a      	cmp	r2, r3
   845da:	d203      	bcs.n	845e4 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   845dc:	4b2f      	ldr	r3, [pc, #188]	; (8469c <xTaskIncrementTick+0x15c>)
   845de:	687a      	ldr	r2, [r7, #4]
   845e0:	601a      	str	r2, [r3, #0]
							break;
   845e2:	e02e      	b.n	84642 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   845e4:	68bb      	ldr	r3, [r7, #8]
   845e6:	3304      	adds	r3, #4
   845e8:	4618      	mov	r0, r3
   845ea:	4b2d      	ldr	r3, [pc, #180]	; (846a0 <xTaskIncrementTick+0x160>)
   845ec:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   845ee:	68bb      	ldr	r3, [r7, #8]
   845f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   845f2:	2b00      	cmp	r3, #0
   845f4:	d004      	beq.n	84600 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   845f6:	68bb      	ldr	r3, [r7, #8]
   845f8:	3318      	adds	r3, #24
   845fa:	4618      	mov	r0, r3
   845fc:	4b28      	ldr	r3, [pc, #160]	; (846a0 <xTaskIncrementTick+0x160>)
   845fe:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   84600:	68bb      	ldr	r3, [r7, #8]
   84602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84604:	2201      	movs	r2, #1
   84606:	409a      	lsls	r2, r3
   84608:	4b26      	ldr	r3, [pc, #152]	; (846a4 <xTaskIncrementTick+0x164>)
   8460a:	681b      	ldr	r3, [r3, #0]
   8460c:	431a      	orrs	r2, r3
   8460e:	4b25      	ldr	r3, [pc, #148]	; (846a4 <xTaskIncrementTick+0x164>)
   84610:	601a      	str	r2, [r3, #0]
   84612:	68bb      	ldr	r3, [r7, #8]
   84614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84616:	4613      	mov	r3, r2
   84618:	009b      	lsls	r3, r3, #2
   8461a:	4413      	add	r3, r2
   8461c:	009b      	lsls	r3, r3, #2
   8461e:	4a22      	ldr	r2, [pc, #136]	; (846a8 <xTaskIncrementTick+0x168>)
   84620:	441a      	add	r2, r3
   84622:	68bb      	ldr	r3, [r7, #8]
   84624:	3304      	adds	r3, #4
   84626:	4610      	mov	r0, r2
   84628:	4619      	mov	r1, r3
   8462a:	4b20      	ldr	r3, [pc, #128]	; (846ac <xTaskIncrementTick+0x16c>)
   8462c:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8462e:	68bb      	ldr	r3, [r7, #8]
   84630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84632:	4b1f      	ldr	r3, [pc, #124]	; (846b0 <xTaskIncrementTick+0x170>)
   84634:	681b      	ldr	r3, [r3, #0]
   84636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84638:	429a      	cmp	r2, r3
   8463a:	d301      	bcc.n	84640 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   8463c:	2301      	movs	r3, #1
   8463e:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   84640:	e7b1      	b.n	845a6 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   84642:	4b1b      	ldr	r3, [pc, #108]	; (846b0 <xTaskIncrementTick+0x170>)
   84644:	681b      	ldr	r3, [r3, #0]
   84646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84648:	4917      	ldr	r1, [pc, #92]	; (846a8 <xTaskIncrementTick+0x168>)
   8464a:	4613      	mov	r3, r2
   8464c:	009b      	lsls	r3, r3, #2
   8464e:	4413      	add	r3, r2
   84650:	009b      	lsls	r3, r3, #2
   84652:	440b      	add	r3, r1
   84654:	681b      	ldr	r3, [r3, #0]
   84656:	2b01      	cmp	r3, #1
   84658:	d907      	bls.n	8466a <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   8465a:	2301      	movs	r3, #1
   8465c:	617b      	str	r3, [r7, #20]
   8465e:	e004      	b.n	8466a <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   84660:	4b14      	ldr	r3, [pc, #80]	; (846b4 <xTaskIncrementTick+0x174>)
   84662:	681b      	ldr	r3, [r3, #0]
   84664:	1c5a      	adds	r2, r3, #1
   84666:	4b13      	ldr	r3, [pc, #76]	; (846b4 <xTaskIncrementTick+0x174>)
   84668:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   8466a:	4b13      	ldr	r3, [pc, #76]	; (846b8 <xTaskIncrementTick+0x178>)
   8466c:	681b      	ldr	r3, [r3, #0]
   8466e:	2b00      	cmp	r3, #0
   84670:	d001      	beq.n	84676 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   84672:	2301      	movs	r3, #1
   84674:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   84676:	697b      	ldr	r3, [r7, #20]
}
   84678:	4618      	mov	r0, r3
   8467a:	3718      	adds	r7, #24
   8467c:	46bd      	mov	sp, r7
   8467e:	bd80      	pop	{r7, pc}
   84680:	2007a600 	.word	0x2007a600
   84684:	2007a5e4 	.word	0x2007a5e4
   84688:	2007a598 	.word	0x2007a598
   8468c:	00083365 	.word	0x00083365
   84690:	2007a59c 	.word	0x2007a59c
   84694:	2007a5f8 	.word	0x2007a5f8
   84698:	00084d69 	.word	0x00084d69
   8469c:	20070008 	.word	0x20070008
   846a0:	000830ed 	.word	0x000830ed
   846a4:	2007a5e8 	.word	0x2007a5e8
   846a8:	2007a50c 	.word	0x2007a50c
   846ac:	00083035 	.word	0x00083035
   846b0:	2007a508 	.word	0x2007a508
   846b4:	2007a5f0 	.word	0x2007a5f0
   846b8:	2007a5f4 	.word	0x2007a5f4

000846bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   846bc:	b580      	push	{r7, lr}
   846be:	b084      	sub	sp, #16
   846c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   846c2:	4b34      	ldr	r3, [pc, #208]	; (84794 <vTaskSwitchContext+0xd8>)
   846c4:	681b      	ldr	r3, [r3, #0]
   846c6:	2b00      	cmp	r3, #0
   846c8:	d003      	beq.n	846d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   846ca:	4b33      	ldr	r3, [pc, #204]	; (84798 <vTaskSwitchContext+0xdc>)
   846cc:	2201      	movs	r2, #1
   846ce:	601a      	str	r2, [r3, #0]
   846d0:	e05c      	b.n	8478c <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   846d2:	4b31      	ldr	r3, [pc, #196]	; (84798 <vTaskSwitchContext+0xdc>)
   846d4:	2200      	movs	r2, #0
   846d6:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   846d8:	4b30      	ldr	r3, [pc, #192]	; (8479c <vTaskSwitchContext+0xe0>)
   846da:	681b      	ldr	r3, [r3, #0]
   846dc:	681a      	ldr	r2, [r3, #0]
   846de:	4b2f      	ldr	r3, [pc, #188]	; (8479c <vTaskSwitchContext+0xe0>)
   846e0:	681b      	ldr	r3, [r3, #0]
   846e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   846e4:	429a      	cmp	r2, r3
   846e6:	d808      	bhi.n	846fa <vTaskSwitchContext+0x3e>
   846e8:	4b2c      	ldr	r3, [pc, #176]	; (8479c <vTaskSwitchContext+0xe0>)
   846ea:	681a      	ldr	r2, [r3, #0]
   846ec:	4b2b      	ldr	r3, [pc, #172]	; (8479c <vTaskSwitchContext+0xe0>)
   846ee:	681b      	ldr	r3, [r3, #0]
   846f0:	3334      	adds	r3, #52	; 0x34
   846f2:	4610      	mov	r0, r2
   846f4:	4619      	mov	r1, r3
   846f6:	4b2a      	ldr	r3, [pc, #168]	; (847a0 <vTaskSwitchContext+0xe4>)
   846f8:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   846fa:	4b28      	ldr	r3, [pc, #160]	; (8479c <vTaskSwitchContext+0xe0>)
   846fc:	681b      	ldr	r3, [r3, #0]
   846fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84700:	4618      	mov	r0, r3
   84702:	4928      	ldr	r1, [pc, #160]	; (847a4 <vTaskSwitchContext+0xe8>)
   84704:	2214      	movs	r2, #20
   84706:	4b28      	ldr	r3, [pc, #160]	; (847a8 <vTaskSwitchContext+0xec>)
   84708:	4798      	blx	r3
   8470a:	4603      	mov	r3, r0
   8470c:	2b00      	cmp	r3, #0
   8470e:	d008      	beq.n	84722 <vTaskSwitchContext+0x66>
   84710:	4b22      	ldr	r3, [pc, #136]	; (8479c <vTaskSwitchContext+0xe0>)
   84712:	681a      	ldr	r2, [r3, #0]
   84714:	4b21      	ldr	r3, [pc, #132]	; (8479c <vTaskSwitchContext+0xe0>)
   84716:	681b      	ldr	r3, [r3, #0]
   84718:	3334      	adds	r3, #52	; 0x34
   8471a:	4610      	mov	r0, r2
   8471c:	4619      	mov	r1, r3
   8471e:	4b20      	ldr	r3, [pc, #128]	; (847a0 <vTaskSwitchContext+0xe4>)
   84720:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   84722:	4b22      	ldr	r3, [pc, #136]	; (847ac <vTaskSwitchContext+0xf0>)
   84724:	681b      	ldr	r3, [r3, #0]
   84726:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   84728:	687b      	ldr	r3, [r7, #4]
   8472a:	fab3 f383 	clz	r3, r3
   8472e:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   84730:	78fb      	ldrb	r3, [r7, #3]
   84732:	f1c3 031f 	rsb	r3, r3, #31
   84736:	60fb      	str	r3, [r7, #12]
   84738:	491d      	ldr	r1, [pc, #116]	; (847b0 <vTaskSwitchContext+0xf4>)
   8473a:	68fa      	ldr	r2, [r7, #12]
   8473c:	4613      	mov	r3, r2
   8473e:	009b      	lsls	r3, r3, #2
   84740:	4413      	add	r3, r2
   84742:	009b      	lsls	r3, r3, #2
   84744:	440b      	add	r3, r1
   84746:	681b      	ldr	r3, [r3, #0]
   84748:	2b00      	cmp	r3, #0
   8474a:	d102      	bne.n	84752 <vTaskSwitchContext+0x96>
   8474c:	4b19      	ldr	r3, [pc, #100]	; (847b4 <vTaskSwitchContext+0xf8>)
   8474e:	4798      	blx	r3
   84750:	e7fe      	b.n	84750 <vTaskSwitchContext+0x94>
   84752:	68fa      	ldr	r2, [r7, #12]
   84754:	4613      	mov	r3, r2
   84756:	009b      	lsls	r3, r3, #2
   84758:	4413      	add	r3, r2
   8475a:	009b      	lsls	r3, r3, #2
   8475c:	4a14      	ldr	r2, [pc, #80]	; (847b0 <vTaskSwitchContext+0xf4>)
   8475e:	4413      	add	r3, r2
   84760:	60bb      	str	r3, [r7, #8]
   84762:	68bb      	ldr	r3, [r7, #8]
   84764:	685b      	ldr	r3, [r3, #4]
   84766:	685a      	ldr	r2, [r3, #4]
   84768:	68bb      	ldr	r3, [r7, #8]
   8476a:	605a      	str	r2, [r3, #4]
   8476c:	68bb      	ldr	r3, [r7, #8]
   8476e:	685a      	ldr	r2, [r3, #4]
   84770:	68bb      	ldr	r3, [r7, #8]
   84772:	3308      	adds	r3, #8
   84774:	429a      	cmp	r2, r3
   84776:	d104      	bne.n	84782 <vTaskSwitchContext+0xc6>
   84778:	68bb      	ldr	r3, [r7, #8]
   8477a:	685b      	ldr	r3, [r3, #4]
   8477c:	685a      	ldr	r2, [r3, #4]
   8477e:	68bb      	ldr	r3, [r7, #8]
   84780:	605a      	str	r2, [r3, #4]
   84782:	68bb      	ldr	r3, [r7, #8]
   84784:	685b      	ldr	r3, [r3, #4]
   84786:	68da      	ldr	r2, [r3, #12]
   84788:	4b04      	ldr	r3, [pc, #16]	; (8479c <vTaskSwitchContext+0xe0>)
   8478a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   8478c:	3710      	adds	r7, #16
   8478e:	46bd      	mov	sp, r7
   84790:	bd80      	pop	{r7, pc}
   84792:	bf00      	nop
   84794:	2007a600 	.word	0x2007a600
   84798:	2007a5f4 	.word	0x2007a5f4
   8479c:	2007a508 	.word	0x2007a508
   847a0:	000863d5 	.word	0x000863d5
   847a4:	00086f44 	.word	0x00086f44
   847a8:	00086af9 	.word	0x00086af9
   847ac:	2007a5e8 	.word	0x2007a5e8
   847b0:	2007a50c 	.word	0x2007a50c
   847b4:	00083365 	.word	0x00083365

000847b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   847b8:	b580      	push	{r7, lr}
   847ba:	b084      	sub	sp, #16
   847bc:	af00      	add	r7, sp, #0
   847be:	6078      	str	r0, [r7, #4]
   847c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   847c2:	687b      	ldr	r3, [r7, #4]
   847c4:	2b00      	cmp	r3, #0
   847c6:	d102      	bne.n	847ce <vTaskPlaceOnEventList+0x16>
   847c8:	4b1a      	ldr	r3, [pc, #104]	; (84834 <vTaskPlaceOnEventList+0x7c>)
   847ca:	4798      	blx	r3
   847cc:	e7fe      	b.n	847cc <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   847ce:	4b1a      	ldr	r3, [pc, #104]	; (84838 <vTaskPlaceOnEventList+0x80>)
   847d0:	681b      	ldr	r3, [r3, #0]
   847d2:	3318      	adds	r3, #24
   847d4:	6878      	ldr	r0, [r7, #4]
   847d6:	4619      	mov	r1, r3
   847d8:	4b18      	ldr	r3, [pc, #96]	; (8483c <vTaskPlaceOnEventList+0x84>)
   847da:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   847dc:	4b16      	ldr	r3, [pc, #88]	; (84838 <vTaskPlaceOnEventList+0x80>)
   847de:	681b      	ldr	r3, [r3, #0]
   847e0:	3304      	adds	r3, #4
   847e2:	4618      	mov	r0, r3
   847e4:	4b16      	ldr	r3, [pc, #88]	; (84840 <vTaskPlaceOnEventList+0x88>)
   847e6:	4798      	blx	r3
   847e8:	4603      	mov	r3, r0
   847ea:	2b00      	cmp	r3, #0
   847ec:	d10b      	bne.n	84806 <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   847ee:	4b12      	ldr	r3, [pc, #72]	; (84838 <vTaskPlaceOnEventList+0x80>)
   847f0:	681b      	ldr	r3, [r3, #0]
   847f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   847f4:	2201      	movs	r2, #1
   847f6:	fa02 f303 	lsl.w	r3, r2, r3
   847fa:	43da      	mvns	r2, r3
   847fc:	4b11      	ldr	r3, [pc, #68]	; (84844 <vTaskPlaceOnEventList+0x8c>)
   847fe:	681b      	ldr	r3, [r3, #0]
   84800:	401a      	ands	r2, r3
   84802:	4b10      	ldr	r3, [pc, #64]	; (84844 <vTaskPlaceOnEventList+0x8c>)
   84804:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   84806:	683b      	ldr	r3, [r7, #0]
   84808:	f1b3 3fff 	cmp.w	r3, #4294967295
   8480c:	d107      	bne.n	8481e <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   8480e:	4b0a      	ldr	r3, [pc, #40]	; (84838 <vTaskPlaceOnEventList+0x80>)
   84810:	681b      	ldr	r3, [r3, #0]
   84812:	3304      	adds	r3, #4
   84814:	480c      	ldr	r0, [pc, #48]	; (84848 <vTaskPlaceOnEventList+0x90>)
   84816:	4619      	mov	r1, r3
   84818:	4b0c      	ldr	r3, [pc, #48]	; (8484c <vTaskPlaceOnEventList+0x94>)
   8481a:	4798      	blx	r3
   8481c:	e007      	b.n	8482e <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   8481e:	4b0c      	ldr	r3, [pc, #48]	; (84850 <vTaskPlaceOnEventList+0x98>)
   84820:	681a      	ldr	r2, [r3, #0]
   84822:	683b      	ldr	r3, [r7, #0]
   84824:	4413      	add	r3, r2
   84826:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   84828:	68f8      	ldr	r0, [r7, #12]
   8482a:	4b0a      	ldr	r3, [pc, #40]	; (84854 <vTaskPlaceOnEventList+0x9c>)
   8482c:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   8482e:	3710      	adds	r7, #16
   84830:	46bd      	mov	sp, r7
   84832:	bd80      	pop	{r7, pc}
   84834:	00083365 	.word	0x00083365
   84838:	2007a508 	.word	0x2007a508
   8483c:	0008307d 	.word	0x0008307d
   84840:	000830ed 	.word	0x000830ed
   84844:	2007a5e8 	.word	0x2007a5e8
   84848:	2007a5cc 	.word	0x2007a5cc
   8484c:	00083035 	.word	0x00083035
   84850:	2007a5e4 	.word	0x2007a5e4
   84854:	00084c65 	.word	0x00084c65

00084858 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   84858:	b580      	push	{r7, lr}
   8485a:	b084      	sub	sp, #16
   8485c:	af00      	add	r7, sp, #0
   8485e:	6078      	str	r0, [r7, #4]
   84860:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   84862:	687b      	ldr	r3, [r7, #4]
   84864:	2b00      	cmp	r3, #0
   84866:	d102      	bne.n	8486e <vTaskPlaceOnEventListRestricted+0x16>
   84868:	4b14      	ldr	r3, [pc, #80]	; (848bc <vTaskPlaceOnEventListRestricted+0x64>)
   8486a:	4798      	blx	r3
   8486c:	e7fe      	b.n	8486c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   8486e:	4b14      	ldr	r3, [pc, #80]	; (848c0 <vTaskPlaceOnEventListRestricted+0x68>)
   84870:	681b      	ldr	r3, [r3, #0]
   84872:	3318      	adds	r3, #24
   84874:	6878      	ldr	r0, [r7, #4]
   84876:	4619      	mov	r1, r3
   84878:	4b12      	ldr	r3, [pc, #72]	; (848c4 <vTaskPlaceOnEventListRestricted+0x6c>)
   8487a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8487c:	4b10      	ldr	r3, [pc, #64]	; (848c0 <vTaskPlaceOnEventListRestricted+0x68>)
   8487e:	681b      	ldr	r3, [r3, #0]
   84880:	3304      	adds	r3, #4
   84882:	4618      	mov	r0, r3
   84884:	4b10      	ldr	r3, [pc, #64]	; (848c8 <vTaskPlaceOnEventListRestricted+0x70>)
   84886:	4798      	blx	r3
   84888:	4603      	mov	r3, r0
   8488a:	2b00      	cmp	r3, #0
   8488c:	d10b      	bne.n	848a6 <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8488e:	4b0c      	ldr	r3, [pc, #48]	; (848c0 <vTaskPlaceOnEventListRestricted+0x68>)
   84890:	681b      	ldr	r3, [r3, #0]
   84892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84894:	2201      	movs	r2, #1
   84896:	fa02 f303 	lsl.w	r3, r2, r3
   8489a:	43da      	mvns	r2, r3
   8489c:	4b0b      	ldr	r3, [pc, #44]	; (848cc <vTaskPlaceOnEventListRestricted+0x74>)
   8489e:	681b      	ldr	r3, [r3, #0]
   848a0:	401a      	ands	r2, r3
   848a2:	4b0a      	ldr	r3, [pc, #40]	; (848cc <vTaskPlaceOnEventListRestricted+0x74>)
   848a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   848a6:	4b0a      	ldr	r3, [pc, #40]	; (848d0 <vTaskPlaceOnEventListRestricted+0x78>)
   848a8:	681a      	ldr	r2, [r3, #0]
   848aa:	683b      	ldr	r3, [r7, #0]
   848ac:	4413      	add	r3, r2
   848ae:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   848b0:	68f8      	ldr	r0, [r7, #12]
   848b2:	4b08      	ldr	r3, [pc, #32]	; (848d4 <vTaskPlaceOnEventListRestricted+0x7c>)
   848b4:	4798      	blx	r3
	}
   848b6:	3710      	adds	r7, #16
   848b8:	46bd      	mov	sp, r7
   848ba:	bd80      	pop	{r7, pc}
   848bc:	00083365 	.word	0x00083365
   848c0:	2007a508 	.word	0x2007a508
   848c4:	00083035 	.word	0x00083035
   848c8:	000830ed 	.word	0x000830ed
   848cc:	2007a5e8 	.word	0x2007a5e8
   848d0:	2007a5e4 	.word	0x2007a5e4
   848d4:	00084c65 	.word	0x00084c65

000848d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   848d8:	b580      	push	{r7, lr}
   848da:	b084      	sub	sp, #16
   848dc:	af00      	add	r7, sp, #0
   848de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   848e0:	687b      	ldr	r3, [r7, #4]
   848e2:	68db      	ldr	r3, [r3, #12]
   848e4:	68db      	ldr	r3, [r3, #12]
   848e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   848e8:	68bb      	ldr	r3, [r7, #8]
   848ea:	2b00      	cmp	r3, #0
   848ec:	d102      	bne.n	848f4 <xTaskRemoveFromEventList+0x1c>
   848ee:	4b21      	ldr	r3, [pc, #132]	; (84974 <xTaskRemoveFromEventList+0x9c>)
   848f0:	4798      	blx	r3
   848f2:	e7fe      	b.n	848f2 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   848f4:	68bb      	ldr	r3, [r7, #8]
   848f6:	3318      	adds	r3, #24
   848f8:	4618      	mov	r0, r3
   848fa:	4b1f      	ldr	r3, [pc, #124]	; (84978 <xTaskRemoveFromEventList+0xa0>)
   848fc:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   848fe:	4b1f      	ldr	r3, [pc, #124]	; (8497c <xTaskRemoveFromEventList+0xa4>)
   84900:	681b      	ldr	r3, [r3, #0]
   84902:	2b00      	cmp	r3, #0
   84904:	d11c      	bne.n	84940 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   84906:	68bb      	ldr	r3, [r7, #8]
   84908:	3304      	adds	r3, #4
   8490a:	4618      	mov	r0, r3
   8490c:	4b1a      	ldr	r3, [pc, #104]	; (84978 <xTaskRemoveFromEventList+0xa0>)
   8490e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   84910:	68bb      	ldr	r3, [r7, #8]
   84912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84914:	2201      	movs	r2, #1
   84916:	409a      	lsls	r2, r3
   84918:	4b19      	ldr	r3, [pc, #100]	; (84980 <xTaskRemoveFromEventList+0xa8>)
   8491a:	681b      	ldr	r3, [r3, #0]
   8491c:	431a      	orrs	r2, r3
   8491e:	4b18      	ldr	r3, [pc, #96]	; (84980 <xTaskRemoveFromEventList+0xa8>)
   84920:	601a      	str	r2, [r3, #0]
   84922:	68bb      	ldr	r3, [r7, #8]
   84924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84926:	4613      	mov	r3, r2
   84928:	009b      	lsls	r3, r3, #2
   8492a:	4413      	add	r3, r2
   8492c:	009b      	lsls	r3, r3, #2
   8492e:	4a15      	ldr	r2, [pc, #84]	; (84984 <xTaskRemoveFromEventList+0xac>)
   84930:	441a      	add	r2, r3
   84932:	68bb      	ldr	r3, [r7, #8]
   84934:	3304      	adds	r3, #4
   84936:	4610      	mov	r0, r2
   84938:	4619      	mov	r1, r3
   8493a:	4b13      	ldr	r3, [pc, #76]	; (84988 <xTaskRemoveFromEventList+0xb0>)
   8493c:	4798      	blx	r3
   8493e:	e005      	b.n	8494c <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   84940:	68bb      	ldr	r3, [r7, #8]
   84942:	3318      	adds	r3, #24
   84944:	4811      	ldr	r0, [pc, #68]	; (8498c <xTaskRemoveFromEventList+0xb4>)
   84946:	4619      	mov	r1, r3
   84948:	4b0f      	ldr	r3, [pc, #60]	; (84988 <xTaskRemoveFromEventList+0xb0>)
   8494a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   8494c:	68bb      	ldr	r3, [r7, #8]
   8494e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84950:	4b0f      	ldr	r3, [pc, #60]	; (84990 <xTaskRemoveFromEventList+0xb8>)
   84952:	681b      	ldr	r3, [r3, #0]
   84954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84956:	429a      	cmp	r2, r3
   84958:	d905      	bls.n	84966 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   8495a:	2301      	movs	r3, #1
   8495c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   8495e:	4b0d      	ldr	r3, [pc, #52]	; (84994 <xTaskRemoveFromEventList+0xbc>)
   84960:	2201      	movs	r2, #1
   84962:	601a      	str	r2, [r3, #0]
   84964:	e001      	b.n	8496a <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   84966:	2300      	movs	r3, #0
   84968:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   8496a:	68fb      	ldr	r3, [r7, #12]
}
   8496c:	4618      	mov	r0, r3
   8496e:	3710      	adds	r7, #16
   84970:	46bd      	mov	sp, r7
   84972:	bd80      	pop	{r7, pc}
   84974:	00083365 	.word	0x00083365
   84978:	000830ed 	.word	0x000830ed
   8497c:	2007a600 	.word	0x2007a600
   84980:	2007a5e8 	.word	0x2007a5e8
   84984:	2007a50c 	.word	0x2007a50c
   84988:	00083035 	.word	0x00083035
   8498c:	2007a5a0 	.word	0x2007a5a0
   84990:	2007a508 	.word	0x2007a508
   84994:	2007a5f4 	.word	0x2007a5f4

00084998 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   84998:	b580      	push	{r7, lr}
   8499a:	b082      	sub	sp, #8
   8499c:	af00      	add	r7, sp, #0
   8499e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   849a0:	687b      	ldr	r3, [r7, #4]
   849a2:	2b00      	cmp	r3, #0
   849a4:	d102      	bne.n	849ac <vTaskSetTimeOutState+0x14>
   849a6:	4b07      	ldr	r3, [pc, #28]	; (849c4 <vTaskSetTimeOutState+0x2c>)
   849a8:	4798      	blx	r3
   849aa:	e7fe      	b.n	849aa <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   849ac:	4b06      	ldr	r3, [pc, #24]	; (849c8 <vTaskSetTimeOutState+0x30>)
   849ae:	681a      	ldr	r2, [r3, #0]
   849b0:	687b      	ldr	r3, [r7, #4]
   849b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   849b4:	4b05      	ldr	r3, [pc, #20]	; (849cc <vTaskSetTimeOutState+0x34>)
   849b6:	681a      	ldr	r2, [r3, #0]
   849b8:	687b      	ldr	r3, [r7, #4]
   849ba:	605a      	str	r2, [r3, #4]
}
   849bc:	3708      	adds	r7, #8
   849be:	46bd      	mov	sp, r7
   849c0:	bd80      	pop	{r7, pc}
   849c2:	bf00      	nop
   849c4:	00083365 	.word	0x00083365
   849c8:	2007a5f8 	.word	0x2007a5f8
   849cc:	2007a5e4 	.word	0x2007a5e4

000849d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   849d0:	b580      	push	{r7, lr}
   849d2:	b084      	sub	sp, #16
   849d4:	af00      	add	r7, sp, #0
   849d6:	6078      	str	r0, [r7, #4]
   849d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   849da:	687b      	ldr	r3, [r7, #4]
   849dc:	2b00      	cmp	r3, #0
   849de:	d102      	bne.n	849e6 <xTaskCheckForTimeOut+0x16>
   849e0:	4b21      	ldr	r3, [pc, #132]	; (84a68 <xTaskCheckForTimeOut+0x98>)
   849e2:	4798      	blx	r3
   849e4:	e7fe      	b.n	849e4 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   849e6:	683b      	ldr	r3, [r7, #0]
   849e8:	2b00      	cmp	r3, #0
   849ea:	d102      	bne.n	849f2 <xTaskCheckForTimeOut+0x22>
   849ec:	4b1e      	ldr	r3, [pc, #120]	; (84a68 <xTaskCheckForTimeOut+0x98>)
   849ee:	4798      	blx	r3
   849f0:	e7fe      	b.n	849f0 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   849f2:	4b1e      	ldr	r3, [pc, #120]	; (84a6c <xTaskCheckForTimeOut+0x9c>)
   849f4:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   849f6:	4b1e      	ldr	r3, [pc, #120]	; (84a70 <xTaskCheckForTimeOut+0xa0>)
   849f8:	681b      	ldr	r3, [r3, #0]
   849fa:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   849fc:	683b      	ldr	r3, [r7, #0]
   849fe:	681b      	ldr	r3, [r3, #0]
   84a00:	f1b3 3fff 	cmp.w	r3, #4294967295
   84a04:	d102      	bne.n	84a0c <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   84a06:	2300      	movs	r3, #0
   84a08:	60fb      	str	r3, [r7, #12]
   84a0a:	e026      	b.n	84a5a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   84a0c:	687b      	ldr	r3, [r7, #4]
   84a0e:	681a      	ldr	r2, [r3, #0]
   84a10:	4b18      	ldr	r3, [pc, #96]	; (84a74 <xTaskCheckForTimeOut+0xa4>)
   84a12:	681b      	ldr	r3, [r3, #0]
   84a14:	429a      	cmp	r2, r3
   84a16:	d007      	beq.n	84a28 <xTaskCheckForTimeOut+0x58>
   84a18:	687b      	ldr	r3, [r7, #4]
   84a1a:	685a      	ldr	r2, [r3, #4]
   84a1c:	68bb      	ldr	r3, [r7, #8]
   84a1e:	429a      	cmp	r2, r3
   84a20:	d802      	bhi.n	84a28 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   84a22:	2301      	movs	r3, #1
   84a24:	60fb      	str	r3, [r7, #12]
   84a26:	e018      	b.n	84a5a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   84a28:	687b      	ldr	r3, [r7, #4]
   84a2a:	685b      	ldr	r3, [r3, #4]
   84a2c:	68ba      	ldr	r2, [r7, #8]
   84a2e:	1ad2      	subs	r2, r2, r3
   84a30:	683b      	ldr	r3, [r7, #0]
   84a32:	681b      	ldr	r3, [r3, #0]
   84a34:	429a      	cmp	r2, r3
   84a36:	d20e      	bcs.n	84a56 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   84a38:	683b      	ldr	r3, [r7, #0]
   84a3a:	681a      	ldr	r2, [r3, #0]
   84a3c:	687b      	ldr	r3, [r7, #4]
   84a3e:	6859      	ldr	r1, [r3, #4]
   84a40:	68bb      	ldr	r3, [r7, #8]
   84a42:	1acb      	subs	r3, r1, r3
   84a44:	441a      	add	r2, r3
   84a46:	683b      	ldr	r3, [r7, #0]
   84a48:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   84a4a:	6878      	ldr	r0, [r7, #4]
   84a4c:	4b0a      	ldr	r3, [pc, #40]	; (84a78 <xTaskCheckForTimeOut+0xa8>)
   84a4e:	4798      	blx	r3
			xReturn = pdFALSE;
   84a50:	2300      	movs	r3, #0
   84a52:	60fb      	str	r3, [r7, #12]
   84a54:	e001      	b.n	84a5a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   84a56:	2301      	movs	r3, #1
   84a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84a5a:	4b08      	ldr	r3, [pc, #32]	; (84a7c <xTaskCheckForTimeOut+0xac>)
   84a5c:	4798      	blx	r3

	return xReturn;
   84a5e:	68fb      	ldr	r3, [r7, #12]
}
   84a60:	4618      	mov	r0, r3
   84a62:	3710      	adds	r7, #16
   84a64:	46bd      	mov	sp, r7
   84a66:	bd80      	pop	{r7, pc}
   84a68:	00083365 	.word	0x00083365
   84a6c:	000832e9 	.word	0x000832e9
   84a70:	2007a5e4 	.word	0x2007a5e4
   84a74:	2007a5f8 	.word	0x2007a5f8
   84a78:	00084999 	.word	0x00084999
   84a7c:	0008332d 	.word	0x0008332d

00084a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   84a80:	b480      	push	{r7}
   84a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   84a84:	4b03      	ldr	r3, [pc, #12]	; (84a94 <vTaskMissedYield+0x14>)
   84a86:	2201      	movs	r2, #1
   84a88:	601a      	str	r2, [r3, #0]
}
   84a8a:	46bd      	mov	sp, r7
   84a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   84a90:	4770      	bx	lr
   84a92:	bf00      	nop
   84a94:	2007a5f4 	.word	0x2007a5f4

00084a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   84a98:	b580      	push	{r7, lr}
   84a9a:	b082      	sub	sp, #8
   84a9c:	af00      	add	r7, sp, #0
   84a9e:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84aa0:	4b04      	ldr	r3, [pc, #16]	; (84ab4 <prvIdleTask+0x1c>)
   84aa2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   84aa4:	4b04      	ldr	r3, [pc, #16]	; (84ab8 <prvIdleTask+0x20>)
   84aa6:	681b      	ldr	r3, [r3, #0]
   84aa8:	2b01      	cmp	r3, #1
   84aaa:	d901      	bls.n	84ab0 <prvIdleTask+0x18>
			{
				taskYIELD();
   84aac:	4b03      	ldr	r3, [pc, #12]	; (84abc <prvIdleTask+0x24>)
   84aae:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   84ab0:	e7f6      	b.n	84aa0 <prvIdleTask+0x8>
   84ab2:	bf00      	nop
   84ab4:	00084bd9 	.word	0x00084bd9
   84ab8:	2007a50c 	.word	0x2007a50c
   84abc:	000832c9 	.word	0x000832c9

00084ac0 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84ac0:	b580      	push	{r7, lr}
   84ac2:	b086      	sub	sp, #24
   84ac4:	af00      	add	r7, sp, #0
   84ac6:	60f8      	str	r0, [r7, #12]
   84ac8:	60b9      	str	r1, [r7, #8]
   84aca:	607a      	str	r2, [r7, #4]
   84acc:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84ace:	2300      	movs	r3, #0
   84ad0:	617b      	str	r3, [r7, #20]
   84ad2:	e012      	b.n	84afa <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   84ad4:	68ba      	ldr	r2, [r7, #8]
   84ad6:	697b      	ldr	r3, [r7, #20]
   84ad8:	4413      	add	r3, r2
   84ada:	781a      	ldrb	r2, [r3, #0]
   84adc:	68f9      	ldr	r1, [r7, #12]
   84ade:	697b      	ldr	r3, [r7, #20]
   84ae0:	440b      	add	r3, r1
   84ae2:	3330      	adds	r3, #48	; 0x30
   84ae4:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   84ae6:	68ba      	ldr	r2, [r7, #8]
   84ae8:	697b      	ldr	r3, [r7, #20]
   84aea:	4413      	add	r3, r2
   84aec:	781b      	ldrb	r3, [r3, #0]
   84aee:	2b00      	cmp	r3, #0
   84af0:	d100      	bne.n	84af4 <prvInitialiseTCBVariables+0x34>
		{
			break;
   84af2:	e005      	b.n	84b00 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84af4:	697b      	ldr	r3, [r7, #20]
   84af6:	3301      	adds	r3, #1
   84af8:	617b      	str	r3, [r7, #20]
   84afa:	697b      	ldr	r3, [r7, #20]
   84afc:	2b09      	cmp	r3, #9
   84afe:	d9e9      	bls.n	84ad4 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   84b00:	68fb      	ldr	r3, [r7, #12]
   84b02:	2200      	movs	r2, #0
   84b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   84b08:	687b      	ldr	r3, [r7, #4]
   84b0a:	2b04      	cmp	r3, #4
   84b0c:	d901      	bls.n	84b12 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   84b0e:	2304      	movs	r3, #4
   84b10:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   84b12:	68fb      	ldr	r3, [r7, #12]
   84b14:	687a      	ldr	r2, [r7, #4]
   84b16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   84b18:	68fb      	ldr	r3, [r7, #12]
   84b1a:	687a      	ldr	r2, [r7, #4]
   84b1c:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84b1e:	68fb      	ldr	r3, [r7, #12]
   84b20:	2200      	movs	r2, #0
   84b22:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84b24:	68fb      	ldr	r3, [r7, #12]
   84b26:	3304      	adds	r3, #4
   84b28:	4618      	mov	r0, r3
   84b2a:	4b0a      	ldr	r3, [pc, #40]	; (84b54 <prvInitialiseTCBVariables+0x94>)
   84b2c:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84b2e:	68fb      	ldr	r3, [r7, #12]
   84b30:	3318      	adds	r3, #24
   84b32:	4618      	mov	r0, r3
   84b34:	4b07      	ldr	r3, [pc, #28]	; (84b54 <prvInitialiseTCBVariables+0x94>)
   84b36:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   84b38:	68fb      	ldr	r3, [r7, #12]
   84b3a:	68fa      	ldr	r2, [r7, #12]
   84b3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84b3e:	687b      	ldr	r3, [r7, #4]
   84b40:	f1c3 0205 	rsb	r2, r3, #5
   84b44:	68fb      	ldr	r3, [r7, #12]
   84b46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   84b48:	68fb      	ldr	r3, [r7, #12]
   84b4a:	68fa      	ldr	r2, [r7, #12]
   84b4c:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84b4e:	3718      	adds	r7, #24
   84b50:	46bd      	mov	sp, r7
   84b52:	bd80      	pop	{r7, pc}
   84b54:	0008301d 	.word	0x0008301d

00084b58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   84b58:	b580      	push	{r7, lr}
   84b5a:	b082      	sub	sp, #8
   84b5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84b5e:	2300      	movs	r3, #0
   84b60:	607b      	str	r3, [r7, #4]
   84b62:	e00c      	b.n	84b7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   84b64:	687a      	ldr	r2, [r7, #4]
   84b66:	4613      	mov	r3, r2
   84b68:	009b      	lsls	r3, r3, #2
   84b6a:	4413      	add	r3, r2
   84b6c:	009b      	lsls	r3, r3, #2
   84b6e:	4a11      	ldr	r2, [pc, #68]	; (84bb4 <prvInitialiseTaskLists+0x5c>)
   84b70:	4413      	add	r3, r2
   84b72:	4618      	mov	r0, r3
   84b74:	4b10      	ldr	r3, [pc, #64]	; (84bb8 <prvInitialiseTaskLists+0x60>)
   84b76:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84b78:	687b      	ldr	r3, [r7, #4]
   84b7a:	3301      	adds	r3, #1
   84b7c:	607b      	str	r3, [r7, #4]
   84b7e:	687b      	ldr	r3, [r7, #4]
   84b80:	2b04      	cmp	r3, #4
   84b82:	d9ef      	bls.n	84b64 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   84b84:	480d      	ldr	r0, [pc, #52]	; (84bbc <prvInitialiseTaskLists+0x64>)
   84b86:	4b0c      	ldr	r3, [pc, #48]	; (84bb8 <prvInitialiseTaskLists+0x60>)
   84b88:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   84b8a:	480d      	ldr	r0, [pc, #52]	; (84bc0 <prvInitialiseTaskLists+0x68>)
   84b8c:	4b0a      	ldr	r3, [pc, #40]	; (84bb8 <prvInitialiseTaskLists+0x60>)
   84b8e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84b90:	480c      	ldr	r0, [pc, #48]	; (84bc4 <prvInitialiseTaskLists+0x6c>)
   84b92:	4b09      	ldr	r3, [pc, #36]	; (84bb8 <prvInitialiseTaskLists+0x60>)
   84b94:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   84b96:	480c      	ldr	r0, [pc, #48]	; (84bc8 <prvInitialiseTaskLists+0x70>)
   84b98:	4b07      	ldr	r3, [pc, #28]	; (84bb8 <prvInitialiseTaskLists+0x60>)
   84b9a:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84b9c:	480b      	ldr	r0, [pc, #44]	; (84bcc <prvInitialiseTaskLists+0x74>)
   84b9e:	4b06      	ldr	r3, [pc, #24]	; (84bb8 <prvInitialiseTaskLists+0x60>)
   84ba0:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84ba2:	4b0b      	ldr	r3, [pc, #44]	; (84bd0 <prvInitialiseTaskLists+0x78>)
   84ba4:	4a05      	ldr	r2, [pc, #20]	; (84bbc <prvInitialiseTaskLists+0x64>)
   84ba6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   84ba8:	4b0a      	ldr	r3, [pc, #40]	; (84bd4 <prvInitialiseTaskLists+0x7c>)
   84baa:	4a05      	ldr	r2, [pc, #20]	; (84bc0 <prvInitialiseTaskLists+0x68>)
   84bac:	601a      	str	r2, [r3, #0]
}
   84bae:	3708      	adds	r7, #8
   84bb0:	46bd      	mov	sp, r7
   84bb2:	bd80      	pop	{r7, pc}
   84bb4:	2007a50c 	.word	0x2007a50c
   84bb8:	00082fdd 	.word	0x00082fdd
   84bbc:	2007a570 	.word	0x2007a570
   84bc0:	2007a584 	.word	0x2007a584
   84bc4:	2007a5a0 	.word	0x2007a5a0
   84bc8:	2007a5b4 	.word	0x2007a5b4
   84bcc:	2007a5cc 	.word	0x2007a5cc
   84bd0:	2007a598 	.word	0x2007a598
   84bd4:	2007a59c 	.word	0x2007a59c

00084bd8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   84bd8:	b580      	push	{r7, lr}
   84bda:	b082      	sub	sp, #8
   84bdc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84bde:	e028      	b.n	84c32 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   84be0:	4b17      	ldr	r3, [pc, #92]	; (84c40 <prvCheckTasksWaitingTermination+0x68>)
   84be2:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   84be4:	4b17      	ldr	r3, [pc, #92]	; (84c44 <prvCheckTasksWaitingTermination+0x6c>)
   84be6:	681b      	ldr	r3, [r3, #0]
   84be8:	2b00      	cmp	r3, #0
   84bea:	bf14      	ite	ne
   84bec:	2300      	movne	r3, #0
   84bee:	2301      	moveq	r3, #1
   84bf0:	b2db      	uxtb	r3, r3
   84bf2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   84bf4:	4b14      	ldr	r3, [pc, #80]	; (84c48 <prvCheckTasksWaitingTermination+0x70>)
   84bf6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   84bf8:	687b      	ldr	r3, [r7, #4]
   84bfa:	2b00      	cmp	r3, #0
   84bfc:	d119      	bne.n	84c32 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   84bfe:	4b13      	ldr	r3, [pc, #76]	; (84c4c <prvCheckTasksWaitingTermination+0x74>)
   84c00:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   84c02:	4b10      	ldr	r3, [pc, #64]	; (84c44 <prvCheckTasksWaitingTermination+0x6c>)
   84c04:	68db      	ldr	r3, [r3, #12]
   84c06:	68db      	ldr	r3, [r3, #12]
   84c08:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84c0a:	683b      	ldr	r3, [r7, #0]
   84c0c:	3304      	adds	r3, #4
   84c0e:	4618      	mov	r0, r3
   84c10:	4b0f      	ldr	r3, [pc, #60]	; (84c50 <prvCheckTasksWaitingTermination+0x78>)
   84c12:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   84c14:	4b0f      	ldr	r3, [pc, #60]	; (84c54 <prvCheckTasksWaitingTermination+0x7c>)
   84c16:	681b      	ldr	r3, [r3, #0]
   84c18:	1e5a      	subs	r2, r3, #1
   84c1a:	4b0e      	ldr	r3, [pc, #56]	; (84c54 <prvCheckTasksWaitingTermination+0x7c>)
   84c1c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84c1e:	4b0e      	ldr	r3, [pc, #56]	; (84c58 <prvCheckTasksWaitingTermination+0x80>)
   84c20:	681b      	ldr	r3, [r3, #0]
   84c22:	1e5a      	subs	r2, r3, #1
   84c24:	4b0c      	ldr	r3, [pc, #48]	; (84c58 <prvCheckTasksWaitingTermination+0x80>)
   84c26:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   84c28:	4b0c      	ldr	r3, [pc, #48]	; (84c5c <prvCheckTasksWaitingTermination+0x84>)
   84c2a:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84c2c:	6838      	ldr	r0, [r7, #0]
   84c2e:	4b0c      	ldr	r3, [pc, #48]	; (84c60 <prvCheckTasksWaitingTermination+0x88>)
   84c30:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84c32:	4b09      	ldr	r3, [pc, #36]	; (84c58 <prvCheckTasksWaitingTermination+0x80>)
   84c34:	681b      	ldr	r3, [r3, #0]
   84c36:	2b00      	cmp	r3, #0
   84c38:	d1d2      	bne.n	84be0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   84c3a:	3708      	adds	r7, #8
   84c3c:	46bd      	mov	sp, r7
   84c3e:	bd80      	pop	{r7, pc}
   84c40:	000843d5 	.word	0x000843d5
   84c44:	2007a5b4 	.word	0x2007a5b4
   84c48:	000843f1 	.word	0x000843f1
   84c4c:	000832e9 	.word	0x000832e9
   84c50:	000830ed 	.word	0x000830ed
   84c54:	2007a5e0 	.word	0x2007a5e0
   84c58:	2007a5c8 	.word	0x2007a5c8
   84c5c:	0008332d 	.word	0x0008332d
   84c60:	00084d45 	.word	0x00084d45

00084c64 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84c64:	b580      	push	{r7, lr}
   84c66:	b082      	sub	sp, #8
   84c68:	af00      	add	r7, sp, #0
   84c6a:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84c6c:	4b13      	ldr	r3, [pc, #76]	; (84cbc <prvAddCurrentTaskToDelayedList+0x58>)
   84c6e:	681b      	ldr	r3, [r3, #0]
   84c70:	687a      	ldr	r2, [r7, #4]
   84c72:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84c74:	4b12      	ldr	r3, [pc, #72]	; (84cc0 <prvAddCurrentTaskToDelayedList+0x5c>)
   84c76:	681b      	ldr	r3, [r3, #0]
   84c78:	687a      	ldr	r2, [r7, #4]
   84c7a:	429a      	cmp	r2, r3
   84c7c:	d209      	bcs.n	84c92 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84c7e:	4b11      	ldr	r3, [pc, #68]	; (84cc4 <prvAddCurrentTaskToDelayedList+0x60>)
   84c80:	681a      	ldr	r2, [r3, #0]
   84c82:	4b0e      	ldr	r3, [pc, #56]	; (84cbc <prvAddCurrentTaskToDelayedList+0x58>)
   84c84:	681b      	ldr	r3, [r3, #0]
   84c86:	3304      	adds	r3, #4
   84c88:	4610      	mov	r0, r2
   84c8a:	4619      	mov	r1, r3
   84c8c:	4b0e      	ldr	r3, [pc, #56]	; (84cc8 <prvAddCurrentTaskToDelayedList+0x64>)
   84c8e:	4798      	blx	r3
   84c90:	e010      	b.n	84cb4 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84c92:	4b0e      	ldr	r3, [pc, #56]	; (84ccc <prvAddCurrentTaskToDelayedList+0x68>)
   84c94:	681a      	ldr	r2, [r3, #0]
   84c96:	4b09      	ldr	r3, [pc, #36]	; (84cbc <prvAddCurrentTaskToDelayedList+0x58>)
   84c98:	681b      	ldr	r3, [r3, #0]
   84c9a:	3304      	adds	r3, #4
   84c9c:	4610      	mov	r0, r2
   84c9e:	4619      	mov	r1, r3
   84ca0:	4b09      	ldr	r3, [pc, #36]	; (84cc8 <prvAddCurrentTaskToDelayedList+0x64>)
   84ca2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84ca4:	4b0a      	ldr	r3, [pc, #40]	; (84cd0 <prvAddCurrentTaskToDelayedList+0x6c>)
   84ca6:	681b      	ldr	r3, [r3, #0]
   84ca8:	687a      	ldr	r2, [r7, #4]
   84caa:	429a      	cmp	r2, r3
   84cac:	d202      	bcs.n	84cb4 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84cae:	4b08      	ldr	r3, [pc, #32]	; (84cd0 <prvAddCurrentTaskToDelayedList+0x6c>)
   84cb0:	687a      	ldr	r2, [r7, #4]
   84cb2:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84cb4:	3708      	adds	r7, #8
   84cb6:	46bd      	mov	sp, r7
   84cb8:	bd80      	pop	{r7, pc}
   84cba:	bf00      	nop
   84cbc:	2007a508 	.word	0x2007a508
   84cc0:	2007a5e4 	.word	0x2007a5e4
   84cc4:	2007a59c 	.word	0x2007a59c
   84cc8:	0008307d 	.word	0x0008307d
   84ccc:	2007a598 	.word	0x2007a598
   84cd0:	20070008 	.word	0x20070008

00084cd4 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   84cd4:	b580      	push	{r7, lr}
   84cd6:	b084      	sub	sp, #16
   84cd8:	af00      	add	r7, sp, #0
   84cda:	4603      	mov	r3, r0
   84cdc:	6039      	str	r1, [r7, #0]
   84cde:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   84ce0:	2048      	movs	r0, #72	; 0x48
   84ce2:	4b15      	ldr	r3, [pc, #84]	; (84d38 <prvAllocateTCBAndStack+0x64>)
   84ce4:	4798      	blx	r3
   84ce6:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   84ce8:	68fb      	ldr	r3, [r7, #12]
   84cea:	2b00      	cmp	r3, #0
   84cec:	d01f      	beq.n	84d2e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84cee:	683b      	ldr	r3, [r7, #0]
   84cf0:	2b00      	cmp	r3, #0
   84cf2:	d106      	bne.n	84d02 <prvAllocateTCBAndStack+0x2e>
   84cf4:	88fb      	ldrh	r3, [r7, #6]
   84cf6:	009b      	lsls	r3, r3, #2
   84cf8:	4618      	mov	r0, r3
   84cfa:	4b0f      	ldr	r3, [pc, #60]	; (84d38 <prvAllocateTCBAndStack+0x64>)
   84cfc:	4798      	blx	r3
   84cfe:	4603      	mov	r3, r0
   84d00:	e000      	b.n	84d04 <prvAllocateTCBAndStack+0x30>
   84d02:	683b      	ldr	r3, [r7, #0]
   84d04:	68fa      	ldr	r2, [r7, #12]
   84d06:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   84d08:	68fb      	ldr	r3, [r7, #12]
   84d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84d0c:	2b00      	cmp	r3, #0
   84d0e:	d105      	bne.n	84d1c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84d10:	68f8      	ldr	r0, [r7, #12]
   84d12:	4b0a      	ldr	r3, [pc, #40]	; (84d3c <prvAllocateTCBAndStack+0x68>)
   84d14:	4798      	blx	r3
			pxNewTCB = NULL;
   84d16:	2300      	movs	r3, #0
   84d18:	60fb      	str	r3, [r7, #12]
   84d1a:	e008      	b.n	84d2e <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84d1c:	68fb      	ldr	r3, [r7, #12]
   84d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84d20:	88fb      	ldrh	r3, [r7, #6]
   84d22:	009b      	lsls	r3, r3, #2
   84d24:	4610      	mov	r0, r2
   84d26:	21a5      	movs	r1, #165	; 0xa5
   84d28:	461a      	mov	r2, r3
   84d2a:	4b05      	ldr	r3, [pc, #20]	; (84d40 <prvAllocateTCBAndStack+0x6c>)
   84d2c:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84d2e:	68fb      	ldr	r3, [r7, #12]
}
   84d30:	4618      	mov	r0, r3
   84d32:	3710      	adds	r7, #16
   84d34:	46bd      	mov	sp, r7
   84d36:	bd80      	pop	{r7, pc}
   84d38:	00083489 	.word	0x00083489
   84d3c:	00083601 	.word	0x00083601
   84d40:	00086c4d 	.word	0x00086c4d

00084d44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84d44:	b580      	push	{r7, lr}
   84d46:	b082      	sub	sp, #8
   84d48:	af00      	add	r7, sp, #0
   84d4a:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84d4c:	687b      	ldr	r3, [r7, #4]
   84d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84d50:	4618      	mov	r0, r3
   84d52:	4b04      	ldr	r3, [pc, #16]	; (84d64 <prvDeleteTCB+0x20>)
   84d54:	4798      	blx	r3
		vPortFree( pxTCB );
   84d56:	6878      	ldr	r0, [r7, #4]
   84d58:	4b02      	ldr	r3, [pc, #8]	; (84d64 <prvDeleteTCB+0x20>)
   84d5a:	4798      	blx	r3
	}
   84d5c:	3708      	adds	r7, #8
   84d5e:	46bd      	mov	sp, r7
   84d60:	bd80      	pop	{r7, pc}
   84d62:	bf00      	nop
   84d64:	00083601 	.word	0x00083601

00084d68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   84d68:	b480      	push	{r7}
   84d6a:	b083      	sub	sp, #12
   84d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84d6e:	4b0e      	ldr	r3, [pc, #56]	; (84da8 <prvResetNextTaskUnblockTime+0x40>)
   84d70:	681b      	ldr	r3, [r3, #0]
   84d72:	681b      	ldr	r3, [r3, #0]
   84d74:	2b00      	cmp	r3, #0
   84d76:	d101      	bne.n	84d7c <prvResetNextTaskUnblockTime+0x14>
   84d78:	2301      	movs	r3, #1
   84d7a:	e000      	b.n	84d7e <prvResetNextTaskUnblockTime+0x16>
   84d7c:	2300      	movs	r3, #0
   84d7e:	2b00      	cmp	r3, #0
   84d80:	d004      	beq.n	84d8c <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84d82:	4b0a      	ldr	r3, [pc, #40]	; (84dac <prvResetNextTaskUnblockTime+0x44>)
   84d84:	f04f 32ff 	mov.w	r2, #4294967295
   84d88:	601a      	str	r2, [r3, #0]
   84d8a:	e008      	b.n	84d9e <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84d8c:	4b06      	ldr	r3, [pc, #24]	; (84da8 <prvResetNextTaskUnblockTime+0x40>)
   84d8e:	681b      	ldr	r3, [r3, #0]
   84d90:	68db      	ldr	r3, [r3, #12]
   84d92:	68db      	ldr	r3, [r3, #12]
   84d94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   84d96:	687b      	ldr	r3, [r7, #4]
   84d98:	685a      	ldr	r2, [r3, #4]
   84d9a:	4b04      	ldr	r3, [pc, #16]	; (84dac <prvResetNextTaskUnblockTime+0x44>)
   84d9c:	601a      	str	r2, [r3, #0]
	}
}
   84d9e:	370c      	adds	r7, #12
   84da0:	46bd      	mov	sp, r7
   84da2:	f85d 7b04 	ldr.w	r7, [sp], #4
   84da6:	4770      	bx	lr
   84da8:	2007a598 	.word	0x2007a598
   84dac:	20070008 	.word	0x20070008

00084db0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84db0:	b480      	push	{r7}
   84db2:	b083      	sub	sp, #12
   84db4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   84db6:	4b0b      	ldr	r3, [pc, #44]	; (84de4 <xTaskGetSchedulerState+0x34>)
   84db8:	681b      	ldr	r3, [r3, #0]
   84dba:	2b00      	cmp	r3, #0
   84dbc:	d102      	bne.n	84dc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   84dbe:	2301      	movs	r3, #1
   84dc0:	607b      	str	r3, [r7, #4]
   84dc2:	e008      	b.n	84dd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84dc4:	4b08      	ldr	r3, [pc, #32]	; (84de8 <xTaskGetSchedulerState+0x38>)
   84dc6:	681b      	ldr	r3, [r3, #0]
   84dc8:	2b00      	cmp	r3, #0
   84dca:	d102      	bne.n	84dd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   84dcc:	2302      	movs	r3, #2
   84dce:	607b      	str	r3, [r7, #4]
   84dd0:	e001      	b.n	84dd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   84dd2:	2300      	movs	r3, #0
   84dd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   84dd6:	687b      	ldr	r3, [r7, #4]
	}
   84dd8:	4618      	mov	r0, r3
   84dda:	370c      	adds	r7, #12
   84ddc:	46bd      	mov	sp, r7
   84dde:	f85d 7b04 	ldr.w	r7, [sp], #4
   84de2:	4770      	bx	lr
   84de4:	2007a5ec 	.word	0x2007a5ec
   84de8:	2007a600 	.word	0x2007a600

00084dec <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   84dec:	b580      	push	{r7, lr}
   84dee:	b084      	sub	sp, #16
   84df0:	af00      	add	r7, sp, #0
   84df2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84df4:	687b      	ldr	r3, [r7, #4]
   84df6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   84df8:	687b      	ldr	r3, [r7, #4]
   84dfa:	2b00      	cmp	r3, #0
   84dfc:	d062      	beq.n	84ec4 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   84dfe:	68fb      	ldr	r3, [r7, #12]
   84e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84e02:	4b32      	ldr	r3, [pc, #200]	; (84ecc <vTaskPriorityInherit+0xe0>)
   84e04:	681b      	ldr	r3, [r3, #0]
   84e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e08:	429a      	cmp	r2, r3
   84e0a:	d25b      	bcs.n	84ec4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   84e0c:	68fb      	ldr	r3, [r7, #12]
   84e0e:	699b      	ldr	r3, [r3, #24]
   84e10:	2b00      	cmp	r3, #0
   84e12:	db06      	blt.n	84e22 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84e14:	4b2d      	ldr	r3, [pc, #180]	; (84ecc <vTaskPriorityInherit+0xe0>)
   84e16:	681b      	ldr	r3, [r3, #0]
   84e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e1a:	f1c3 0205 	rsb	r2, r3, #5
   84e1e:	68fb      	ldr	r3, [r7, #12]
   84e20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   84e22:	68fb      	ldr	r3, [r7, #12]
   84e24:	6959      	ldr	r1, [r3, #20]
   84e26:	68fb      	ldr	r3, [r7, #12]
   84e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84e2a:	4613      	mov	r3, r2
   84e2c:	009b      	lsls	r3, r3, #2
   84e2e:	4413      	add	r3, r2
   84e30:	009b      	lsls	r3, r3, #2
   84e32:	4a27      	ldr	r2, [pc, #156]	; (84ed0 <vTaskPriorityInherit+0xe4>)
   84e34:	4413      	add	r3, r2
   84e36:	4299      	cmp	r1, r3
   84e38:	d101      	bne.n	84e3e <vTaskPriorityInherit+0x52>
   84e3a:	2301      	movs	r3, #1
   84e3c:	e000      	b.n	84e40 <vTaskPriorityInherit+0x54>
   84e3e:	2300      	movs	r3, #0
   84e40:	2b00      	cmp	r3, #0
   84e42:	d03a      	beq.n	84eba <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84e44:	68fb      	ldr	r3, [r7, #12]
   84e46:	3304      	adds	r3, #4
   84e48:	4618      	mov	r0, r3
   84e4a:	4b22      	ldr	r3, [pc, #136]	; (84ed4 <vTaskPriorityInherit+0xe8>)
   84e4c:	4798      	blx	r3
   84e4e:	4603      	mov	r3, r0
   84e50:	2b00      	cmp	r3, #0
   84e52:	d115      	bne.n	84e80 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84e54:	68fb      	ldr	r3, [r7, #12]
   84e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84e58:	491d      	ldr	r1, [pc, #116]	; (84ed0 <vTaskPriorityInherit+0xe4>)
   84e5a:	4613      	mov	r3, r2
   84e5c:	009b      	lsls	r3, r3, #2
   84e5e:	4413      	add	r3, r2
   84e60:	009b      	lsls	r3, r3, #2
   84e62:	440b      	add	r3, r1
   84e64:	681b      	ldr	r3, [r3, #0]
   84e66:	2b00      	cmp	r3, #0
   84e68:	d10a      	bne.n	84e80 <vTaskPriorityInherit+0x94>
   84e6a:	68fb      	ldr	r3, [r7, #12]
   84e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e6e:	2201      	movs	r2, #1
   84e70:	fa02 f303 	lsl.w	r3, r2, r3
   84e74:	43da      	mvns	r2, r3
   84e76:	4b18      	ldr	r3, [pc, #96]	; (84ed8 <vTaskPriorityInherit+0xec>)
   84e78:	681b      	ldr	r3, [r3, #0]
   84e7a:	401a      	ands	r2, r3
   84e7c:	4b16      	ldr	r3, [pc, #88]	; (84ed8 <vTaskPriorityInherit+0xec>)
   84e7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84e80:	4b12      	ldr	r3, [pc, #72]	; (84ecc <vTaskPriorityInherit+0xe0>)
   84e82:	681b      	ldr	r3, [r3, #0]
   84e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84e86:	68fb      	ldr	r3, [r7, #12]
   84e88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   84e8a:	68fb      	ldr	r3, [r7, #12]
   84e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e8e:	2201      	movs	r2, #1
   84e90:	409a      	lsls	r2, r3
   84e92:	4b11      	ldr	r3, [pc, #68]	; (84ed8 <vTaskPriorityInherit+0xec>)
   84e94:	681b      	ldr	r3, [r3, #0]
   84e96:	431a      	orrs	r2, r3
   84e98:	4b0f      	ldr	r3, [pc, #60]	; (84ed8 <vTaskPriorityInherit+0xec>)
   84e9a:	601a      	str	r2, [r3, #0]
   84e9c:	68fb      	ldr	r3, [r7, #12]
   84e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ea0:	4613      	mov	r3, r2
   84ea2:	009b      	lsls	r3, r3, #2
   84ea4:	4413      	add	r3, r2
   84ea6:	009b      	lsls	r3, r3, #2
   84ea8:	4a09      	ldr	r2, [pc, #36]	; (84ed0 <vTaskPriorityInherit+0xe4>)
   84eaa:	441a      	add	r2, r3
   84eac:	68fb      	ldr	r3, [r7, #12]
   84eae:	3304      	adds	r3, #4
   84eb0:	4610      	mov	r0, r2
   84eb2:	4619      	mov	r1, r3
   84eb4:	4b09      	ldr	r3, [pc, #36]	; (84edc <vTaskPriorityInherit+0xf0>)
   84eb6:	4798      	blx	r3
   84eb8:	e004      	b.n	84ec4 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84eba:	4b04      	ldr	r3, [pc, #16]	; (84ecc <vTaskPriorityInherit+0xe0>)
   84ebc:	681b      	ldr	r3, [r3, #0]
   84ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ec0:	68fb      	ldr	r3, [r7, #12]
   84ec2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84ec4:	3710      	adds	r7, #16
   84ec6:	46bd      	mov	sp, r7
   84ec8:	bd80      	pop	{r7, pc}
   84eca:	bf00      	nop
   84ecc:	2007a508 	.word	0x2007a508
   84ed0:	2007a50c 	.word	0x2007a50c
   84ed4:	000830ed 	.word	0x000830ed
   84ed8:	2007a5e8 	.word	0x2007a5e8
   84edc:	00083035 	.word	0x00083035

00084ee0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   84ee0:	b580      	push	{r7, lr}
   84ee2:	b084      	sub	sp, #16
   84ee4:	af00      	add	r7, sp, #0
   84ee6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84ee8:	687b      	ldr	r3, [r7, #4]
   84eea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   84eec:	2300      	movs	r3, #0
   84eee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   84ef0:	687b      	ldr	r3, [r7, #4]
   84ef2:	2b00      	cmp	r3, #0
   84ef4:	d056      	beq.n	84fa4 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   84ef6:	68bb      	ldr	r3, [r7, #8]
   84ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84efa:	2b00      	cmp	r3, #0
   84efc:	d102      	bne.n	84f04 <xTaskPriorityDisinherit+0x24>
   84efe:	4b2c      	ldr	r3, [pc, #176]	; (84fb0 <xTaskPriorityDisinherit+0xd0>)
   84f00:	4798      	blx	r3
   84f02:	e7fe      	b.n	84f02 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   84f04:	68bb      	ldr	r3, [r7, #8]
   84f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84f08:	1e5a      	subs	r2, r3, #1
   84f0a:	68bb      	ldr	r3, [r7, #8]
   84f0c:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   84f0e:	68bb      	ldr	r3, [r7, #8]
   84f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f12:	68bb      	ldr	r3, [r7, #8]
   84f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84f16:	429a      	cmp	r2, r3
   84f18:	d044      	beq.n	84fa4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84f1a:	68bb      	ldr	r3, [r7, #8]
   84f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84f1e:	2b00      	cmp	r3, #0
   84f20:	d140      	bne.n	84fa4 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84f22:	68bb      	ldr	r3, [r7, #8]
   84f24:	3304      	adds	r3, #4
   84f26:	4618      	mov	r0, r3
   84f28:	4b22      	ldr	r3, [pc, #136]	; (84fb4 <xTaskPriorityDisinherit+0xd4>)
   84f2a:	4798      	blx	r3
   84f2c:	4603      	mov	r3, r0
   84f2e:	2b00      	cmp	r3, #0
   84f30:	d115      	bne.n	84f5e <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84f32:	68bb      	ldr	r3, [r7, #8]
   84f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f36:	4920      	ldr	r1, [pc, #128]	; (84fb8 <xTaskPriorityDisinherit+0xd8>)
   84f38:	4613      	mov	r3, r2
   84f3a:	009b      	lsls	r3, r3, #2
   84f3c:	4413      	add	r3, r2
   84f3e:	009b      	lsls	r3, r3, #2
   84f40:	440b      	add	r3, r1
   84f42:	681b      	ldr	r3, [r3, #0]
   84f44:	2b00      	cmp	r3, #0
   84f46:	d10a      	bne.n	84f5e <xTaskPriorityDisinherit+0x7e>
   84f48:	68bb      	ldr	r3, [r7, #8]
   84f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84f4c:	2201      	movs	r2, #1
   84f4e:	fa02 f303 	lsl.w	r3, r2, r3
   84f52:	43da      	mvns	r2, r3
   84f54:	4b19      	ldr	r3, [pc, #100]	; (84fbc <xTaskPriorityDisinherit+0xdc>)
   84f56:	681b      	ldr	r3, [r3, #0]
   84f58:	401a      	ands	r2, r3
   84f5a:	4b18      	ldr	r3, [pc, #96]	; (84fbc <xTaskPriorityDisinherit+0xdc>)
   84f5c:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84f5e:	68bb      	ldr	r3, [r7, #8]
   84f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84f62:	68bb      	ldr	r3, [r7, #8]
   84f64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84f66:	68bb      	ldr	r3, [r7, #8]
   84f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84f6a:	f1c3 0205 	rsb	r2, r3, #5
   84f6e:	68bb      	ldr	r3, [r7, #8]
   84f70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84f72:	68bb      	ldr	r3, [r7, #8]
   84f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84f76:	2201      	movs	r2, #1
   84f78:	409a      	lsls	r2, r3
   84f7a:	4b10      	ldr	r3, [pc, #64]	; (84fbc <xTaskPriorityDisinherit+0xdc>)
   84f7c:	681b      	ldr	r3, [r3, #0]
   84f7e:	431a      	orrs	r2, r3
   84f80:	4b0e      	ldr	r3, [pc, #56]	; (84fbc <xTaskPriorityDisinherit+0xdc>)
   84f82:	601a      	str	r2, [r3, #0]
   84f84:	68bb      	ldr	r3, [r7, #8]
   84f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f88:	4613      	mov	r3, r2
   84f8a:	009b      	lsls	r3, r3, #2
   84f8c:	4413      	add	r3, r2
   84f8e:	009b      	lsls	r3, r3, #2
   84f90:	4a09      	ldr	r2, [pc, #36]	; (84fb8 <xTaskPriorityDisinherit+0xd8>)
   84f92:	441a      	add	r2, r3
   84f94:	68bb      	ldr	r3, [r7, #8]
   84f96:	3304      	adds	r3, #4
   84f98:	4610      	mov	r0, r2
   84f9a:	4619      	mov	r1, r3
   84f9c:	4b08      	ldr	r3, [pc, #32]	; (84fc0 <xTaskPriorityDisinherit+0xe0>)
   84f9e:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84fa0:	2301      	movs	r3, #1
   84fa2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84fa4:	68fb      	ldr	r3, [r7, #12]
	}
   84fa6:	4618      	mov	r0, r3
   84fa8:	3710      	adds	r7, #16
   84faa:	46bd      	mov	sp, r7
   84fac:	bd80      	pop	{r7, pc}
   84fae:	bf00      	nop
   84fb0:	00083365 	.word	0x00083365
   84fb4:	000830ed 	.word	0x000830ed
   84fb8:	2007a50c 	.word	0x2007a50c
   84fbc:	2007a5e8 	.word	0x2007a5e8
   84fc0:	00083035 	.word	0x00083035

00084fc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84fc4:	b480      	push	{r7}
   84fc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84fc8:	4b07      	ldr	r3, [pc, #28]	; (84fe8 <pvTaskIncrementMutexHeldCount+0x24>)
   84fca:	681b      	ldr	r3, [r3, #0]
   84fcc:	2b00      	cmp	r3, #0
   84fce:	d004      	beq.n	84fda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84fd0:	4b05      	ldr	r3, [pc, #20]	; (84fe8 <pvTaskIncrementMutexHeldCount+0x24>)
   84fd2:	681b      	ldr	r3, [r3, #0]
   84fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   84fd6:	3201      	adds	r2, #1
   84fd8:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84fda:	4b03      	ldr	r3, [pc, #12]	; (84fe8 <pvTaskIncrementMutexHeldCount+0x24>)
   84fdc:	681b      	ldr	r3, [r3, #0]
	}
   84fde:	4618      	mov	r0, r3
   84fe0:	46bd      	mov	sp, r7
   84fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
   84fe6:	4770      	bx	lr
   84fe8:	2007a508 	.word	0x2007a508

00084fec <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84fec:	b590      	push	{r4, r7, lr}
   84fee:	b087      	sub	sp, #28
   84ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   84ff2:	2300      	movs	r3, #0
   84ff4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   84ff6:	4b10      	ldr	r3, [pc, #64]	; (85038 <xTimerCreateTimerTask+0x4c>)
   84ff8:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84ffa:	4b10      	ldr	r3, [pc, #64]	; (8503c <xTimerCreateTimerTask+0x50>)
   84ffc:	681b      	ldr	r3, [r3, #0]
   84ffe:	2b00      	cmp	r3, #0
   85000:	d00f      	beq.n	85022 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   85002:	2302      	movs	r3, #2
   85004:	9300      	str	r3, [sp, #0]
   85006:	2300      	movs	r3, #0
   85008:	9301      	str	r3, [sp, #4]
   8500a:	2300      	movs	r3, #0
   8500c:	9302      	str	r3, [sp, #8]
   8500e:	2300      	movs	r3, #0
   85010:	9303      	str	r3, [sp, #12]
   85012:	480b      	ldr	r0, [pc, #44]	; (85040 <xTimerCreateTimerTask+0x54>)
   85014:	490b      	ldr	r1, [pc, #44]	; (85044 <xTimerCreateTimerTask+0x58>)
   85016:	f44f 7282 	mov.w	r2, #260	; 0x104
   8501a:	2300      	movs	r3, #0
   8501c:	4c0a      	ldr	r4, [pc, #40]	; (85048 <xTimerCreateTimerTask+0x5c>)
   8501e:	47a0      	blx	r4
   85020:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   85022:	687b      	ldr	r3, [r7, #4]
   85024:	2b00      	cmp	r3, #0
   85026:	d102      	bne.n	8502e <xTimerCreateTimerTask+0x42>
   85028:	4b08      	ldr	r3, [pc, #32]	; (8504c <xTimerCreateTimerTask+0x60>)
   8502a:	4798      	blx	r3
   8502c:	e7fe      	b.n	8502c <xTimerCreateTimerTask+0x40>
	return xReturn;
   8502e:	687b      	ldr	r3, [r7, #4]
}
   85030:	4618      	mov	r0, r3
   85032:	370c      	adds	r7, #12
   85034:	46bd      	mov	sp, r7
   85036:	bd90      	pop	{r4, r7, pc}
   85038:	00085521 	.word	0x00085521
   8503c:	2007a634 	.word	0x2007a634
   85040:	00085169 	.word	0x00085169
   85044:	00086f58 	.word	0x00086f58
   85048:	000840d9 	.word	0x000840d9
   8504c:	00083365 	.word	0x00083365

00085050 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   85050:	b590      	push	{r4, r7, lr}
   85052:	b089      	sub	sp, #36	; 0x24
   85054:	af00      	add	r7, sp, #0
   85056:	60f8      	str	r0, [r7, #12]
   85058:	60b9      	str	r1, [r7, #8]
   8505a:	607a      	str	r2, [r7, #4]
   8505c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   8505e:	2300      	movs	r3, #0
   85060:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   85062:	4b1d      	ldr	r3, [pc, #116]	; (850d8 <xTimerGenericCommand+0x88>)
   85064:	681b      	ldr	r3, [r3, #0]
   85066:	2b00      	cmp	r3, #0
   85068:	d030      	beq.n	850cc <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   8506a:	68bb      	ldr	r3, [r7, #8]
   8506c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   8506e:	687b      	ldr	r3, [r7, #4]
   85070:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   85072:	68fb      	ldr	r3, [r7, #12]
   85074:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   85076:	68bb      	ldr	r3, [r7, #8]
   85078:	2b05      	cmp	r3, #5
   8507a:	dc1c      	bgt.n	850b6 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8507c:	4b17      	ldr	r3, [pc, #92]	; (850dc <xTimerGenericCommand+0x8c>)
   8507e:	4798      	blx	r3
   85080:	4603      	mov	r3, r0
   85082:	2b02      	cmp	r3, #2
   85084:	d10b      	bne.n	8509e <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   85086:	4b14      	ldr	r3, [pc, #80]	; (850d8 <xTimerGenericCommand+0x88>)
   85088:	681a      	ldr	r2, [r3, #0]
   8508a:	f107 0310 	add.w	r3, r7, #16
   8508e:	4610      	mov	r0, r2
   85090:	4619      	mov	r1, r3
   85092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85094:	2300      	movs	r3, #0
   85096:	4c12      	ldr	r4, [pc, #72]	; (850e0 <xTimerGenericCommand+0x90>)
   85098:	47a0      	blx	r4
   8509a:	61f8      	str	r0, [r7, #28]
   8509c:	e016      	b.n	850cc <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8509e:	4b0e      	ldr	r3, [pc, #56]	; (850d8 <xTimerGenericCommand+0x88>)
   850a0:	681a      	ldr	r2, [r3, #0]
   850a2:	f107 0310 	add.w	r3, r7, #16
   850a6:	4610      	mov	r0, r2
   850a8:	4619      	mov	r1, r3
   850aa:	2200      	movs	r2, #0
   850ac:	2300      	movs	r3, #0
   850ae:	4c0c      	ldr	r4, [pc, #48]	; (850e0 <xTimerGenericCommand+0x90>)
   850b0:	47a0      	blx	r4
   850b2:	61f8      	str	r0, [r7, #28]
   850b4:	e00a      	b.n	850cc <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   850b6:	4b08      	ldr	r3, [pc, #32]	; (850d8 <xTimerGenericCommand+0x88>)
   850b8:	681a      	ldr	r2, [r3, #0]
   850ba:	f107 0310 	add.w	r3, r7, #16
   850be:	4610      	mov	r0, r2
   850c0:	4619      	mov	r1, r3
   850c2:	683a      	ldr	r2, [r7, #0]
   850c4:	2300      	movs	r3, #0
   850c6:	4c07      	ldr	r4, [pc, #28]	; (850e4 <xTimerGenericCommand+0x94>)
   850c8:	47a0      	blx	r4
   850ca:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   850cc:	69fb      	ldr	r3, [r7, #28]
}
   850ce:	4618      	mov	r0, r3
   850d0:	3724      	adds	r7, #36	; 0x24
   850d2:	46bd      	mov	sp, r7
   850d4:	bd90      	pop	{r4, r7, pc}
   850d6:	bf00      	nop
   850d8:	2007a634 	.word	0x2007a634
   850dc:	00084db1 	.word	0x00084db1
   850e0:	0008396d 	.word	0x0008396d
   850e4:	00083b31 	.word	0x00083b31

000850e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   850e8:	b590      	push	{r4, r7, lr}
   850ea:	b087      	sub	sp, #28
   850ec:	af02      	add	r7, sp, #8
   850ee:	6078      	str	r0, [r7, #4]
   850f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   850f2:	4b18      	ldr	r3, [pc, #96]	; (85154 <prvProcessExpiredTimer+0x6c>)
   850f4:	681b      	ldr	r3, [r3, #0]
   850f6:	68db      	ldr	r3, [r3, #12]
   850f8:	68db      	ldr	r3, [r3, #12]
   850fa:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   850fc:	68fb      	ldr	r3, [r7, #12]
   850fe:	3304      	adds	r3, #4
   85100:	4618      	mov	r0, r3
   85102:	4b15      	ldr	r3, [pc, #84]	; (85158 <prvProcessExpiredTimer+0x70>)
   85104:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85106:	68fb      	ldr	r3, [r7, #12]
   85108:	69db      	ldr	r3, [r3, #28]
   8510a:	2b01      	cmp	r3, #1
   8510c:	d11b      	bne.n	85146 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   8510e:	68fb      	ldr	r3, [r7, #12]
   85110:	699a      	ldr	r2, [r3, #24]
   85112:	687b      	ldr	r3, [r7, #4]
   85114:	4413      	add	r3, r2
   85116:	68f8      	ldr	r0, [r7, #12]
   85118:	4619      	mov	r1, r3
   8511a:	683a      	ldr	r2, [r7, #0]
   8511c:	687b      	ldr	r3, [r7, #4]
   8511e:	4c0f      	ldr	r4, [pc, #60]	; (8515c <prvProcessExpiredTimer+0x74>)
   85120:	47a0      	blx	r4
   85122:	4603      	mov	r3, r0
   85124:	2b01      	cmp	r3, #1
   85126:	d10e      	bne.n	85146 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   85128:	2300      	movs	r3, #0
   8512a:	9300      	str	r3, [sp, #0]
   8512c:	68f8      	ldr	r0, [r7, #12]
   8512e:	2100      	movs	r1, #0
   85130:	687a      	ldr	r2, [r7, #4]
   85132:	2300      	movs	r3, #0
   85134:	4c0a      	ldr	r4, [pc, #40]	; (85160 <prvProcessExpiredTimer+0x78>)
   85136:	47a0      	blx	r4
   85138:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   8513a:	68bb      	ldr	r3, [r7, #8]
   8513c:	2b00      	cmp	r3, #0
   8513e:	d102      	bne.n	85146 <prvProcessExpiredTimer+0x5e>
   85140:	4b08      	ldr	r3, [pc, #32]	; (85164 <prvProcessExpiredTimer+0x7c>)
   85142:	4798      	blx	r3
   85144:	e7fe      	b.n	85144 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85146:	68fb      	ldr	r3, [r7, #12]
   85148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8514a:	68f8      	ldr	r0, [r7, #12]
   8514c:	4798      	blx	r3
}
   8514e:	3714      	adds	r7, #20
   85150:	46bd      	mov	sp, r7
   85152:	bd90      	pop	{r4, r7, pc}
   85154:	2007a62c 	.word	0x2007a62c
   85158:	000830ed 	.word	0x000830ed
   8515c:	000852ad 	.word	0x000852ad
   85160:	00085051 	.word	0x00085051
   85164:	00083365 	.word	0x00083365

00085168 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   85168:	b580      	push	{r7, lr}
   8516a:	b084      	sub	sp, #16
   8516c:	af00      	add	r7, sp, #0
   8516e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   85170:	f107 0308 	add.w	r3, r7, #8
   85174:	4618      	mov	r0, r3
   85176:	4b05      	ldr	r3, [pc, #20]	; (8518c <prvTimerTask+0x24>)
   85178:	4798      	blx	r3
   8517a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   8517c:	68bb      	ldr	r3, [r7, #8]
   8517e:	68f8      	ldr	r0, [r7, #12]
   85180:	4619      	mov	r1, r3
   85182:	4b03      	ldr	r3, [pc, #12]	; (85190 <prvTimerTask+0x28>)
   85184:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   85186:	4b03      	ldr	r3, [pc, #12]	; (85194 <prvTimerTask+0x2c>)
   85188:	4798      	blx	r3
	}
   8518a:	e7f1      	b.n	85170 <prvTimerTask+0x8>
   8518c:	0008521d 	.word	0x0008521d
   85190:	00085199 	.word	0x00085199
   85194:	00085335 	.word	0x00085335

00085198 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   85198:	b580      	push	{r7, lr}
   8519a:	b084      	sub	sp, #16
   8519c:	af00      	add	r7, sp, #0
   8519e:	6078      	str	r0, [r7, #4]
   851a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   851a2:	4b17      	ldr	r3, [pc, #92]	; (85200 <prvProcessTimerOrBlockTask+0x68>)
   851a4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   851a6:	f107 0308 	add.w	r3, r7, #8
   851aa:	4618      	mov	r0, r3
   851ac:	4b15      	ldr	r3, [pc, #84]	; (85204 <prvProcessTimerOrBlockTask+0x6c>)
   851ae:	4798      	blx	r3
   851b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   851b2:	68bb      	ldr	r3, [r7, #8]
   851b4:	2b00      	cmp	r3, #0
   851b6:	d11e      	bne.n	851f6 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   851b8:	683b      	ldr	r3, [r7, #0]
   851ba:	2b00      	cmp	r3, #0
   851bc:	d10a      	bne.n	851d4 <prvProcessTimerOrBlockTask+0x3c>
   851be:	687a      	ldr	r2, [r7, #4]
   851c0:	68fb      	ldr	r3, [r7, #12]
   851c2:	429a      	cmp	r2, r3
   851c4:	d806      	bhi.n	851d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   851c6:	4b10      	ldr	r3, [pc, #64]	; (85208 <prvProcessTimerOrBlockTask+0x70>)
   851c8:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   851ca:	6878      	ldr	r0, [r7, #4]
   851cc:	68f9      	ldr	r1, [r7, #12]
   851ce:	4b0f      	ldr	r3, [pc, #60]	; (8520c <prvProcessTimerOrBlockTask+0x74>)
   851d0:	4798      	blx	r3
   851d2:	e012      	b.n	851fa <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   851d4:	4b0e      	ldr	r3, [pc, #56]	; (85210 <prvProcessTimerOrBlockTask+0x78>)
   851d6:	681a      	ldr	r2, [r3, #0]
   851d8:	6879      	ldr	r1, [r7, #4]
   851da:	68fb      	ldr	r3, [r7, #12]
   851dc:	1acb      	subs	r3, r1, r3
   851de:	4610      	mov	r0, r2
   851e0:	4619      	mov	r1, r3
   851e2:	4b0c      	ldr	r3, [pc, #48]	; (85214 <prvProcessTimerOrBlockTask+0x7c>)
   851e4:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   851e6:	4b08      	ldr	r3, [pc, #32]	; (85208 <prvProcessTimerOrBlockTask+0x70>)
   851e8:	4798      	blx	r3
   851ea:	4603      	mov	r3, r0
   851ec:	2b00      	cmp	r3, #0
   851ee:	d104      	bne.n	851fa <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   851f0:	4b09      	ldr	r3, [pc, #36]	; (85218 <prvProcessTimerOrBlockTask+0x80>)
   851f2:	4798      	blx	r3
   851f4:	e001      	b.n	851fa <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   851f6:	4b04      	ldr	r3, [pc, #16]	; (85208 <prvProcessTimerOrBlockTask+0x70>)
   851f8:	4798      	blx	r3
		}
	}
}
   851fa:	3710      	adds	r7, #16
   851fc:	46bd      	mov	sp, r7
   851fe:	bd80      	pop	{r7, pc}
   85200:	000843d5 	.word	0x000843d5
   85204:	00085265 	.word	0x00085265
   85208:	000843f1 	.word	0x000843f1
   8520c:	000850e9 	.word	0x000850e9
   85210:	2007a634 	.word	0x2007a634
   85214:	00084071 	.word	0x00084071
   85218:	000832c9 	.word	0x000832c9

0008521c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   8521c:	b480      	push	{r7}
   8521e:	b085      	sub	sp, #20
   85220:	af00      	add	r7, sp, #0
   85222:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   85224:	4b0e      	ldr	r3, [pc, #56]	; (85260 <prvGetNextExpireTime+0x44>)
   85226:	681b      	ldr	r3, [r3, #0]
   85228:	681b      	ldr	r3, [r3, #0]
   8522a:	2b00      	cmp	r3, #0
   8522c:	bf14      	ite	ne
   8522e:	2300      	movne	r3, #0
   85230:	2301      	moveq	r3, #1
   85232:	b2db      	uxtb	r3, r3
   85234:	461a      	mov	r2, r3
   85236:	687b      	ldr	r3, [r7, #4]
   85238:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8523a:	687b      	ldr	r3, [r7, #4]
   8523c:	681b      	ldr	r3, [r3, #0]
   8523e:	2b00      	cmp	r3, #0
   85240:	d105      	bne.n	8524e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   85242:	4b07      	ldr	r3, [pc, #28]	; (85260 <prvGetNextExpireTime+0x44>)
   85244:	681b      	ldr	r3, [r3, #0]
   85246:	68db      	ldr	r3, [r3, #12]
   85248:	681b      	ldr	r3, [r3, #0]
   8524a:	60fb      	str	r3, [r7, #12]
   8524c:	e001      	b.n	85252 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   8524e:	2300      	movs	r3, #0
   85250:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   85252:	68fb      	ldr	r3, [r7, #12]
}
   85254:	4618      	mov	r0, r3
   85256:	3714      	adds	r7, #20
   85258:	46bd      	mov	sp, r7
   8525a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8525e:	4770      	bx	lr
   85260:	2007a62c 	.word	0x2007a62c

00085264 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   85264:	b580      	push	{r7, lr}
   85266:	b084      	sub	sp, #16
   85268:	af00      	add	r7, sp, #0
   8526a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   8526c:	4b0c      	ldr	r3, [pc, #48]	; (852a0 <prvSampleTimeNow+0x3c>)
   8526e:	4798      	blx	r3
   85270:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   85272:	4b0c      	ldr	r3, [pc, #48]	; (852a4 <prvSampleTimeNow+0x40>)
   85274:	681b      	ldr	r3, [r3, #0]
   85276:	68fa      	ldr	r2, [r7, #12]
   85278:	429a      	cmp	r2, r3
   8527a:	d205      	bcs.n	85288 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   8527c:	4b0a      	ldr	r3, [pc, #40]	; (852a8 <prvSampleTimeNow+0x44>)
   8527e:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   85280:	687b      	ldr	r3, [r7, #4]
   85282:	2201      	movs	r2, #1
   85284:	601a      	str	r2, [r3, #0]
   85286:	e002      	b.n	8528e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   85288:	687b      	ldr	r3, [r7, #4]
   8528a:	2200      	movs	r2, #0
   8528c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   8528e:	4b05      	ldr	r3, [pc, #20]	; (852a4 <prvSampleTimeNow+0x40>)
   85290:	68fa      	ldr	r2, [r7, #12]
   85292:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   85294:	68fb      	ldr	r3, [r7, #12]
}
   85296:	4618      	mov	r0, r3
   85298:	3710      	adds	r7, #16
   8529a:	46bd      	mov	sp, r7
   8529c:	bd80      	pop	{r7, pc}
   8529e:	bf00      	nop
   852a0:	00084515 	.word	0x00084515
   852a4:	2007a638 	.word	0x2007a638
   852a8:	00085461 	.word	0x00085461

000852ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   852ac:	b580      	push	{r7, lr}
   852ae:	b086      	sub	sp, #24
   852b0:	af00      	add	r7, sp, #0
   852b2:	60f8      	str	r0, [r7, #12]
   852b4:	60b9      	str	r1, [r7, #8]
   852b6:	607a      	str	r2, [r7, #4]
   852b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   852ba:	2300      	movs	r3, #0
   852bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   852be:	68fb      	ldr	r3, [r7, #12]
   852c0:	68ba      	ldr	r2, [r7, #8]
   852c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   852c4:	68fb      	ldr	r3, [r7, #12]
   852c6:	68fa      	ldr	r2, [r7, #12]
   852c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   852ca:	68ba      	ldr	r2, [r7, #8]
   852cc:	687b      	ldr	r3, [r7, #4]
   852ce:	429a      	cmp	r2, r3
   852d0:	d812      	bhi.n	852f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   852d2:	687a      	ldr	r2, [r7, #4]
   852d4:	683b      	ldr	r3, [r7, #0]
   852d6:	1ad2      	subs	r2, r2, r3
   852d8:	68fb      	ldr	r3, [r7, #12]
   852da:	699b      	ldr	r3, [r3, #24]
   852dc:	429a      	cmp	r2, r3
   852de:	d302      	bcc.n	852e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   852e0:	2301      	movs	r3, #1
   852e2:	617b      	str	r3, [r7, #20]
   852e4:	e01b      	b.n	8531e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   852e6:	4b10      	ldr	r3, [pc, #64]	; (85328 <prvInsertTimerInActiveList+0x7c>)
   852e8:	681a      	ldr	r2, [r3, #0]
   852ea:	68fb      	ldr	r3, [r7, #12]
   852ec:	3304      	adds	r3, #4
   852ee:	4610      	mov	r0, r2
   852f0:	4619      	mov	r1, r3
   852f2:	4b0e      	ldr	r3, [pc, #56]	; (8532c <prvInsertTimerInActiveList+0x80>)
   852f4:	4798      	blx	r3
   852f6:	e012      	b.n	8531e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   852f8:	687a      	ldr	r2, [r7, #4]
   852fa:	683b      	ldr	r3, [r7, #0]
   852fc:	429a      	cmp	r2, r3
   852fe:	d206      	bcs.n	8530e <prvInsertTimerInActiveList+0x62>
   85300:	68ba      	ldr	r2, [r7, #8]
   85302:	683b      	ldr	r3, [r7, #0]
   85304:	429a      	cmp	r2, r3
   85306:	d302      	bcc.n	8530e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   85308:	2301      	movs	r3, #1
   8530a:	617b      	str	r3, [r7, #20]
   8530c:	e007      	b.n	8531e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8530e:	4b08      	ldr	r3, [pc, #32]	; (85330 <prvInsertTimerInActiveList+0x84>)
   85310:	681a      	ldr	r2, [r3, #0]
   85312:	68fb      	ldr	r3, [r7, #12]
   85314:	3304      	adds	r3, #4
   85316:	4610      	mov	r0, r2
   85318:	4619      	mov	r1, r3
   8531a:	4b04      	ldr	r3, [pc, #16]	; (8532c <prvInsertTimerInActiveList+0x80>)
   8531c:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   8531e:	697b      	ldr	r3, [r7, #20]
}
   85320:	4618      	mov	r0, r3
   85322:	3718      	adds	r7, #24
   85324:	46bd      	mov	sp, r7
   85326:	bd80      	pop	{r7, pc}
   85328:	2007a630 	.word	0x2007a630
   8532c:	0008307d 	.word	0x0008307d
   85330:	2007a62c 	.word	0x2007a62c

00085334 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   85334:	b590      	push	{r4, r7, lr}
   85336:	b08b      	sub	sp, #44	; 0x2c
   85338:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   8533a:	e070      	b.n	8541e <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   8533c:	68bb      	ldr	r3, [r7, #8]
   8533e:	2b00      	cmp	r3, #0
   85340:	db6d      	blt.n	8541e <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   85342:	693b      	ldr	r3, [r7, #16]
   85344:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   85346:	69fb      	ldr	r3, [r7, #28]
   85348:	695b      	ldr	r3, [r3, #20]
   8534a:	2b00      	cmp	r3, #0
   8534c:	d004      	beq.n	85358 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8534e:	69fb      	ldr	r3, [r7, #28]
   85350:	3304      	adds	r3, #4
   85352:	4618      	mov	r0, r3
   85354:	4b3a      	ldr	r3, [pc, #232]	; (85440 <prvProcessReceivedCommands+0x10c>)
   85356:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85358:	1d3b      	adds	r3, r7, #4
   8535a:	4618      	mov	r0, r3
   8535c:	4b39      	ldr	r3, [pc, #228]	; (85444 <prvProcessReceivedCommands+0x110>)
   8535e:	4798      	blx	r3
   85360:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   85362:	68bb      	ldr	r3, [r7, #8]
   85364:	2b09      	cmp	r3, #9
   85366:	d859      	bhi.n	8541c <prvProcessReceivedCommands+0xe8>
   85368:	a201      	add	r2, pc, #4	; (adr r2, 85370 <prvProcessReceivedCommands+0x3c>)
   8536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8536e:	bf00      	nop
   85370:	00085399 	.word	0x00085399
   85374:	00085399 	.word	0x00085399
   85378:	00085399 	.word	0x00085399
   8537c:	0008541d 	.word	0x0008541d
   85380:	000853eb 	.word	0x000853eb
   85384:	00085415 	.word	0x00085415
   85388:	00085399 	.word	0x00085399
   8538c:	00085399 	.word	0x00085399
   85390:	0008541d 	.word	0x0008541d
   85394:	000853eb 	.word	0x000853eb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   85398:	68fa      	ldr	r2, [r7, #12]
   8539a:	69fb      	ldr	r3, [r7, #28]
   8539c:	699b      	ldr	r3, [r3, #24]
   8539e:	441a      	add	r2, r3
   853a0:	68fb      	ldr	r3, [r7, #12]
   853a2:	69f8      	ldr	r0, [r7, #28]
   853a4:	4611      	mov	r1, r2
   853a6:	69ba      	ldr	r2, [r7, #24]
   853a8:	4c27      	ldr	r4, [pc, #156]	; (85448 <prvProcessReceivedCommands+0x114>)
   853aa:	47a0      	blx	r4
   853ac:	4603      	mov	r3, r0
   853ae:	2b01      	cmp	r3, #1
   853b0:	d11a      	bne.n	853e8 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   853b2:	69fb      	ldr	r3, [r7, #28]
   853b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   853b6:	69f8      	ldr	r0, [r7, #28]
   853b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   853ba:	69fb      	ldr	r3, [r7, #28]
   853bc:	69db      	ldr	r3, [r3, #28]
   853be:	2b01      	cmp	r3, #1
   853c0:	d112      	bne.n	853e8 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   853c2:	68fa      	ldr	r2, [r7, #12]
   853c4:	69fb      	ldr	r3, [r7, #28]
   853c6:	699b      	ldr	r3, [r3, #24]
   853c8:	4413      	add	r3, r2
   853ca:	2200      	movs	r2, #0
   853cc:	9200      	str	r2, [sp, #0]
   853ce:	69f8      	ldr	r0, [r7, #28]
   853d0:	2100      	movs	r1, #0
   853d2:	461a      	mov	r2, r3
   853d4:	2300      	movs	r3, #0
   853d6:	4c1d      	ldr	r4, [pc, #116]	; (8544c <prvProcessReceivedCommands+0x118>)
   853d8:	47a0      	blx	r4
   853da:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   853dc:	697b      	ldr	r3, [r7, #20]
   853de:	2b00      	cmp	r3, #0
   853e0:	d102      	bne.n	853e8 <prvProcessReceivedCommands+0xb4>
   853e2:	4b1b      	ldr	r3, [pc, #108]	; (85450 <prvProcessReceivedCommands+0x11c>)
   853e4:	4798      	blx	r3
   853e6:	e7fe      	b.n	853e6 <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   853e8:	e019      	b.n	8541e <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   853ea:	68fa      	ldr	r2, [r7, #12]
   853ec:	69fb      	ldr	r3, [r7, #28]
   853ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   853f0:	69fb      	ldr	r3, [r7, #28]
   853f2:	699b      	ldr	r3, [r3, #24]
   853f4:	2b00      	cmp	r3, #0
   853f6:	d102      	bne.n	853fe <prvProcessReceivedCommands+0xca>
   853f8:	4b15      	ldr	r3, [pc, #84]	; (85450 <prvProcessReceivedCommands+0x11c>)
   853fa:	4798      	blx	r3
   853fc:	e7fe      	b.n	853fc <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   853fe:	69fb      	ldr	r3, [r7, #28]
   85400:	699a      	ldr	r2, [r3, #24]
   85402:	69bb      	ldr	r3, [r7, #24]
   85404:	4413      	add	r3, r2
   85406:	69f8      	ldr	r0, [r7, #28]
   85408:	4619      	mov	r1, r3
   8540a:	69ba      	ldr	r2, [r7, #24]
   8540c:	69bb      	ldr	r3, [r7, #24]
   8540e:	4c0e      	ldr	r4, [pc, #56]	; (85448 <prvProcessReceivedCommands+0x114>)
   85410:	47a0      	blx	r4
					break;
   85412:	e004      	b.n	8541e <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   85414:	69f8      	ldr	r0, [r7, #28]
   85416:	4b0f      	ldr	r3, [pc, #60]	; (85454 <prvProcessReceivedCommands+0x120>)
   85418:	4798      	blx	r3
					break;
   8541a:	e000      	b.n	8541e <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   8541c:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   8541e:	4b0e      	ldr	r3, [pc, #56]	; (85458 <prvProcessReceivedCommands+0x124>)
   85420:	681a      	ldr	r2, [r3, #0]
   85422:	f107 0308 	add.w	r3, r7, #8
   85426:	4610      	mov	r0, r2
   85428:	4619      	mov	r1, r3
   8542a:	2200      	movs	r2, #0
   8542c:	2300      	movs	r3, #0
   8542e:	4c0b      	ldr	r4, [pc, #44]	; (8545c <prvProcessReceivedCommands+0x128>)
   85430:	47a0      	blx	r4
   85432:	4603      	mov	r3, r0
   85434:	2b00      	cmp	r3, #0
   85436:	d181      	bne.n	8533c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   85438:	3724      	adds	r7, #36	; 0x24
   8543a:	46bd      	mov	sp, r7
   8543c:	bd90      	pop	{r4, r7, pc}
   8543e:	bf00      	nop
   85440:	000830ed 	.word	0x000830ed
   85444:	00085265 	.word	0x00085265
   85448:	000852ad 	.word	0x000852ad
   8544c:	00085051 	.word	0x00085051
   85450:	00083365 	.word	0x00083365
   85454:	00083601 	.word	0x00083601
   85458:	2007a634 	.word	0x2007a634
   8545c:	00083c2d 	.word	0x00083c2d

00085460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   85460:	b590      	push	{r4, r7, lr}
   85462:	b089      	sub	sp, #36	; 0x24
   85464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85466:	e03d      	b.n	854e4 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   85468:	4b27      	ldr	r3, [pc, #156]	; (85508 <prvSwitchTimerLists+0xa8>)
   8546a:	681b      	ldr	r3, [r3, #0]
   8546c:	68db      	ldr	r3, [r3, #12]
   8546e:	681b      	ldr	r3, [r3, #0]
   85470:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   85472:	4b25      	ldr	r3, [pc, #148]	; (85508 <prvSwitchTimerLists+0xa8>)
   85474:	681b      	ldr	r3, [r3, #0]
   85476:	68db      	ldr	r3, [r3, #12]
   85478:	68db      	ldr	r3, [r3, #12]
   8547a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   8547c:	693b      	ldr	r3, [r7, #16]
   8547e:	3304      	adds	r3, #4
   85480:	4618      	mov	r0, r3
   85482:	4b22      	ldr	r3, [pc, #136]	; (8550c <prvSwitchTimerLists+0xac>)
   85484:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85486:	693b      	ldr	r3, [r7, #16]
   85488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8548a:	6938      	ldr	r0, [r7, #16]
   8548c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   8548e:	693b      	ldr	r3, [r7, #16]
   85490:	69db      	ldr	r3, [r3, #28]
   85492:	2b01      	cmp	r3, #1
   85494:	d126      	bne.n	854e4 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   85496:	693b      	ldr	r3, [r7, #16]
   85498:	699a      	ldr	r2, [r3, #24]
   8549a:	697b      	ldr	r3, [r7, #20]
   8549c:	4413      	add	r3, r2
   8549e:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   854a0:	68fa      	ldr	r2, [r7, #12]
   854a2:	697b      	ldr	r3, [r7, #20]
   854a4:	429a      	cmp	r2, r3
   854a6:	d90e      	bls.n	854c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   854a8:	693b      	ldr	r3, [r7, #16]
   854aa:	68fa      	ldr	r2, [r7, #12]
   854ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   854ae:	693b      	ldr	r3, [r7, #16]
   854b0:	693a      	ldr	r2, [r7, #16]
   854b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   854b4:	4b14      	ldr	r3, [pc, #80]	; (85508 <prvSwitchTimerLists+0xa8>)
   854b6:	681a      	ldr	r2, [r3, #0]
   854b8:	693b      	ldr	r3, [r7, #16]
   854ba:	3304      	adds	r3, #4
   854bc:	4610      	mov	r0, r2
   854be:	4619      	mov	r1, r3
   854c0:	4b13      	ldr	r3, [pc, #76]	; (85510 <prvSwitchTimerLists+0xb0>)
   854c2:	4798      	blx	r3
   854c4:	e00e      	b.n	854e4 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   854c6:	2300      	movs	r3, #0
   854c8:	9300      	str	r3, [sp, #0]
   854ca:	6938      	ldr	r0, [r7, #16]
   854cc:	2100      	movs	r1, #0
   854ce:	697a      	ldr	r2, [r7, #20]
   854d0:	2300      	movs	r3, #0
   854d2:	4c10      	ldr	r4, [pc, #64]	; (85514 <prvSwitchTimerLists+0xb4>)
   854d4:	47a0      	blx	r4
   854d6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   854d8:	68bb      	ldr	r3, [r7, #8]
   854da:	2b00      	cmp	r3, #0
   854dc:	d102      	bne.n	854e4 <prvSwitchTimerLists+0x84>
   854de:	4b0e      	ldr	r3, [pc, #56]	; (85518 <prvSwitchTimerLists+0xb8>)
   854e0:	4798      	blx	r3
   854e2:	e7fe      	b.n	854e2 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   854e4:	4b08      	ldr	r3, [pc, #32]	; (85508 <prvSwitchTimerLists+0xa8>)
   854e6:	681b      	ldr	r3, [r3, #0]
   854e8:	681b      	ldr	r3, [r3, #0]
   854ea:	2b00      	cmp	r3, #0
   854ec:	d1bc      	bne.n	85468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   854ee:	4b06      	ldr	r3, [pc, #24]	; (85508 <prvSwitchTimerLists+0xa8>)
   854f0:	681b      	ldr	r3, [r3, #0]
   854f2:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   854f4:	4b09      	ldr	r3, [pc, #36]	; (8551c <prvSwitchTimerLists+0xbc>)
   854f6:	681a      	ldr	r2, [r3, #0]
   854f8:	4b03      	ldr	r3, [pc, #12]	; (85508 <prvSwitchTimerLists+0xa8>)
   854fa:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   854fc:	4b07      	ldr	r3, [pc, #28]	; (8551c <prvSwitchTimerLists+0xbc>)
   854fe:	687a      	ldr	r2, [r7, #4]
   85500:	601a      	str	r2, [r3, #0]
}
   85502:	371c      	adds	r7, #28
   85504:	46bd      	mov	sp, r7
   85506:	bd90      	pop	{r4, r7, pc}
   85508:	2007a62c 	.word	0x2007a62c
   8550c:	000830ed 	.word	0x000830ed
   85510:	0008307d 	.word	0x0008307d
   85514:	00085051 	.word	0x00085051
   85518:	00083365 	.word	0x00083365
   8551c:	2007a630 	.word	0x2007a630

00085520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   85520:	b580      	push	{r7, lr}
   85522:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   85524:	4b11      	ldr	r3, [pc, #68]	; (8556c <prvCheckForValidListAndQueue+0x4c>)
   85526:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   85528:	4b11      	ldr	r3, [pc, #68]	; (85570 <prvCheckForValidListAndQueue+0x50>)
   8552a:	681b      	ldr	r3, [r3, #0]
   8552c:	2b00      	cmp	r3, #0
   8552e:	d11a      	bne.n	85566 <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   85530:	4810      	ldr	r0, [pc, #64]	; (85574 <prvCheckForValidListAndQueue+0x54>)
   85532:	4b11      	ldr	r3, [pc, #68]	; (85578 <prvCheckForValidListAndQueue+0x58>)
   85534:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   85536:	4811      	ldr	r0, [pc, #68]	; (8557c <prvCheckForValidListAndQueue+0x5c>)
   85538:	4b0f      	ldr	r3, [pc, #60]	; (85578 <prvCheckForValidListAndQueue+0x58>)
   8553a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   8553c:	4b10      	ldr	r3, [pc, #64]	; (85580 <prvCheckForValidListAndQueue+0x60>)
   8553e:	4a0d      	ldr	r2, [pc, #52]	; (85574 <prvCheckForValidListAndQueue+0x54>)
   85540:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   85542:	4b10      	ldr	r3, [pc, #64]	; (85584 <prvCheckForValidListAndQueue+0x64>)
   85544:	4a0d      	ldr	r2, [pc, #52]	; (8557c <prvCheckForValidListAndQueue+0x5c>)
   85546:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   85548:	2005      	movs	r0, #5
   8554a:	210c      	movs	r1, #12
   8554c:	2200      	movs	r2, #0
   8554e:	4b0e      	ldr	r3, [pc, #56]	; (85588 <prvCheckForValidListAndQueue+0x68>)
   85550:	4798      	blx	r3
   85552:	4602      	mov	r2, r0
   85554:	4b06      	ldr	r3, [pc, #24]	; (85570 <prvCheckForValidListAndQueue+0x50>)
   85556:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   85558:	4b05      	ldr	r3, [pc, #20]	; (85570 <prvCheckForValidListAndQueue+0x50>)
   8555a:	681b      	ldr	r3, [r3, #0]
   8555c:	2b00      	cmp	r3, #0
   8555e:	d102      	bne.n	85566 <prvCheckForValidListAndQueue+0x46>
   85560:	4b0a      	ldr	r3, [pc, #40]	; (8558c <prvCheckForValidListAndQueue+0x6c>)
   85562:	4798      	blx	r3
   85564:	e7fe      	b.n	85564 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   85566:	4b0a      	ldr	r3, [pc, #40]	; (85590 <prvCheckForValidListAndQueue+0x70>)
   85568:	4798      	blx	r3
}
   8556a:	bd80      	pop	{r7, pc}
   8556c:	000832e9 	.word	0x000832e9
   85570:	2007a634 	.word	0x2007a634
   85574:	2007a604 	.word	0x2007a604
   85578:	00082fdd 	.word	0x00082fdd
   8557c:	2007a618 	.word	0x2007a618
   85580:	2007a62c 	.word	0x2007a62c
   85584:	2007a630 	.word	0x2007a630
   85588:	000838e1 	.word	0x000838e1
   8558c:	00083365 	.word	0x00083365
   85590:	0008332d 	.word	0x0008332d

00085594 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   85594:	b480      	push	{r7}
   85596:	b083      	sub	sp, #12
   85598:	af00      	add	r7, sp, #0
   8559a:	4603      	mov	r3, r0
   8559c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8559e:	4b08      	ldr	r3, [pc, #32]	; (855c0 <NVIC_EnableIRQ+0x2c>)
   855a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   855a4:	0952      	lsrs	r2, r2, #5
   855a6:	79f9      	ldrb	r1, [r7, #7]
   855a8:	f001 011f 	and.w	r1, r1, #31
   855ac:	2001      	movs	r0, #1
   855ae:	fa00 f101 	lsl.w	r1, r0, r1
   855b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   855b6:	370c      	adds	r7, #12
   855b8:	46bd      	mov	sp, r7
   855ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   855be:	4770      	bx	lr
   855c0:	e000e100 	.word	0xe000e100

000855c4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   855c4:	b480      	push	{r7}
   855c6:	b083      	sub	sp, #12
   855c8:	af00      	add	r7, sp, #0
   855ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   855cc:	687b      	ldr	r3, [r7, #4]
   855ce:	2b07      	cmp	r3, #7
   855d0:	d825      	bhi.n	8561e <osc_get_rate+0x5a>
   855d2:	a201      	add	r2, pc, #4	; (adr r2, 855d8 <osc_get_rate+0x14>)
   855d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   855d8:	000855f9 	.word	0x000855f9
   855dc:	000855ff 	.word	0x000855ff
   855e0:	00085605 	.word	0x00085605
   855e4:	0008560b 	.word	0x0008560b
   855e8:	0008560f 	.word	0x0008560f
   855ec:	00085613 	.word	0x00085613
   855f0:	00085617 	.word	0x00085617
   855f4:	0008561b 	.word	0x0008561b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   855f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   855fc:	e010      	b.n	85620 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   855fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85602:	e00d      	b.n	85620 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   85604:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85608:	e00a      	b.n	85620 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8560a:	4b08      	ldr	r3, [pc, #32]	; (8562c <osc_get_rate+0x68>)
   8560c:	e008      	b.n	85620 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8560e:	4b08      	ldr	r3, [pc, #32]	; (85630 <osc_get_rate+0x6c>)
   85610:	e006      	b.n	85620 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   85612:	4b08      	ldr	r3, [pc, #32]	; (85634 <osc_get_rate+0x70>)
   85614:	e004      	b.n	85620 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   85616:	4b07      	ldr	r3, [pc, #28]	; (85634 <osc_get_rate+0x70>)
   85618:	e002      	b.n	85620 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8561a:	4b06      	ldr	r3, [pc, #24]	; (85634 <osc_get_rate+0x70>)
   8561c:	e000      	b.n	85620 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8561e:	2300      	movs	r3, #0
}
   85620:	4618      	mov	r0, r3
   85622:	370c      	adds	r7, #12
   85624:	46bd      	mov	sp, r7
   85626:	f85d 7b04 	ldr.w	r7, [sp], #4
   8562a:	4770      	bx	lr
   8562c:	003d0900 	.word	0x003d0900
   85630:	007a1200 	.word	0x007a1200
   85634:	00b71b00 	.word	0x00b71b00

00085638 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   85638:	b580      	push	{r7, lr}
   8563a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   8563c:	2006      	movs	r0, #6
   8563e:	4b04      	ldr	r3, [pc, #16]	; (85650 <sysclk_get_main_hz+0x18>)
   85640:	4798      	blx	r3
   85642:	4602      	mov	r2, r0
   85644:	4613      	mov	r3, r2
   85646:	00db      	lsls	r3, r3, #3
   85648:	1a9b      	subs	r3, r3, r2
   8564a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8564c:	4618      	mov	r0, r3
   8564e:	bd80      	pop	{r7, pc}
   85650:	000855c5 	.word	0x000855c5

00085654 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   85654:	b580      	push	{r7, lr}
   85656:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   85658:	4b02      	ldr	r3, [pc, #8]	; (85664 <sysclk_get_cpu_hz+0x10>)
   8565a:	4798      	blx	r3
   8565c:	4603      	mov	r3, r0
   8565e:	085b      	lsrs	r3, r3, #1
}
   85660:	4618      	mov	r0, r3
   85662:	bd80      	pop	{r7, pc}
   85664:	00085639 	.word	0x00085639

00085668 <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   85668:	b580      	push	{r7, lr}
   8566a:	b082      	sub	sp, #8
   8566c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   8566e:	482b      	ldr	r0, [pc, #172]	; (8571c <CAN1_Handler+0xb4>)
   85670:	492b      	ldr	r1, [pc, #172]	; (85720 <CAN1_Handler+0xb8>)
   85672:	4b2c      	ldr	r3, [pc, #176]	; (85724 <CAN1_Handler+0xbc>)
   85674:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   85676:	482c      	ldr	r0, [pc, #176]	; (85728 <CAN1_Handler+0xc0>)
   85678:	4b2c      	ldr	r3, [pc, #176]	; (8572c <CAN1_Handler+0xc4>)
   8567a:	4798      	blx	r3
   8567c:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8567e:	683b      	ldr	r3, [r7, #0]
   85680:	b2db      	uxtb	r3, r3
   85682:	2b00      	cmp	r3, #0
   85684:	d046      	beq.n	85714 <CAN1_Handler+0xac>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85686:	2300      	movs	r3, #0
   85688:	71fb      	strb	r3, [r7, #7]
   8568a:	e040      	b.n	8570e <CAN1_Handler+0xa6>
			ul_status = can_mailbox_get_status(CAN1, i);
   8568c:	79fb      	ldrb	r3, [r7, #7]
   8568e:	4826      	ldr	r0, [pc, #152]	; (85728 <CAN1_Handler+0xc0>)
   85690:	4619      	mov	r1, r3
   85692:	4b27      	ldr	r3, [pc, #156]	; (85730 <CAN1_Handler+0xc8>)
   85694:	4798      	blx	r3
   85696:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   85698:	683b      	ldr	r3, [r7, #0]
   8569a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8569e:	2b00      	cmp	r3, #0
   856a0:	d032      	beq.n	85708 <CAN1_Handler+0xa0>
				can1_mailbox.ul_mb_idx = i;
   856a2:	79fa      	ldrb	r2, [r7, #7]
   856a4:	4b1d      	ldr	r3, [pc, #116]	; (8571c <CAN1_Handler+0xb4>)
   856a6:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   856a8:	4b1c      	ldr	r3, [pc, #112]	; (8571c <CAN1_Handler+0xb4>)
   856aa:	683a      	ldr	r2, [r7, #0]
   856ac:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   856ae:	481e      	ldr	r0, [pc, #120]	; (85728 <CAN1_Handler+0xc0>)
   856b0:	491a      	ldr	r1, [pc, #104]	; (8571c <CAN1_Handler+0xb4>)
   856b2:	4b20      	ldr	r3, [pc, #128]	; (85734 <CAN1_Handler+0xcc>)
   856b4:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   856b6:	4b19      	ldr	r3, [pc, #100]	; (8571c <CAN1_Handler+0xb4>)
   856b8:	69da      	ldr	r2, [r3, #28]
   856ba:	4b1f      	ldr	r3, [pc, #124]	; (85738 <CAN1_Handler+0xd0>)
   856bc:	429a      	cmp	r2, r3
   856be:	d107      	bne.n	856d0 <CAN1_Handler+0x68>
   856c0:	4b16      	ldr	r3, [pc, #88]	; (8571c <CAN1_Handler+0xb4>)
   856c2:	699a      	ldr	r2, [r3, #24]
   856c4:	4b1d      	ldr	r3, [pc, #116]	; (8573c <CAN1_Handler+0xd4>)
   856c6:	429a      	cmp	r2, r3
   856c8:	d102      	bne.n	856d0 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   856ca:	4b1d      	ldr	r3, [pc, #116]	; (85740 <CAN1_Handler+0xd8>)
   856cc:	2200      	movs	r2, #0
   856ce:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   856d0:	79fb      	ldrb	r3, [r7, #7]
   856d2:	4812      	ldr	r0, [pc, #72]	; (8571c <CAN1_Handler+0xb4>)
   856d4:	4619      	mov	r1, r3
   856d6:	4b1b      	ldr	r3, [pc, #108]	; (85744 <CAN1_Handler+0xdc>)
   856d8:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   856da:	4810      	ldr	r0, [pc, #64]	; (8571c <CAN1_Handler+0xb4>)
   856dc:	4912      	ldr	r1, [pc, #72]	; (85728 <CAN1_Handler+0xc0>)
   856de:	4b1a      	ldr	r3, [pc, #104]	; (85748 <CAN1_Handler+0xe0>)
   856e0:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   856e2:	79fb      	ldrb	r3, [r7, #7]
   856e4:	2b07      	cmp	r3, #7
   856e6:	d103      	bne.n	856f0 <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   856e8:	480c      	ldr	r0, [pc, #48]	; (8571c <CAN1_Handler+0xb4>)
   856ea:	490f      	ldr	r1, [pc, #60]	; (85728 <CAN1_Handler+0xc0>)
   856ec:	4b17      	ldr	r3, [pc, #92]	; (8574c <CAN1_Handler+0xe4>)
   856ee:	4798      	blx	r3

				if (i == 0)
   856f0:	79fb      	ldrb	r3, [r7, #7]
   856f2:	2b00      	cmp	r3, #0
   856f4:	d103      	bne.n	856fe <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   856f6:	4809      	ldr	r0, [pc, #36]	; (8571c <CAN1_Handler+0xb4>)
   856f8:	490b      	ldr	r1, [pc, #44]	; (85728 <CAN1_Handler+0xc0>)
   856fa:	4b15      	ldr	r3, [pc, #84]	; (85750 <CAN1_Handler+0xe8>)
   856fc:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   856fe:	4807      	ldr	r0, [pc, #28]	; (8571c <CAN1_Handler+0xb4>)
   85700:	4907      	ldr	r1, [pc, #28]	; (85720 <CAN1_Handler+0xb8>)
   85702:	4b14      	ldr	r3, [pc, #80]	; (85754 <CAN1_Handler+0xec>)
   85704:	4798      	blx	r3
				break;
   85706:	e005      	b.n	85714 <CAN1_Handler+0xac>
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85708:	79fb      	ldrb	r3, [r7, #7]
   8570a:	3301      	adds	r3, #1
   8570c:	71fb      	strb	r3, [r7, #7]
   8570e:	79fb      	ldrb	r3, [r7, #7]
   85710:	2b07      	cmp	r3, #7
   85712:	d9bb      	bls.n	8568c <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   85714:	3708      	adds	r7, #8
   85716:	46bd      	mov	sp, r7
   85718:	bd80      	pop	{r7, pc}
   8571a:	bf00      	nop
   8571c:	2007a650 	.word	0x2007a650
   85720:	2007a68c 	.word	0x2007a68c
   85724:	00085d3d 	.word	0x00085d3d
   85728:	400b8000 	.word	0x400b8000
   8572c:	00081db1 	.word	0x00081db1
   85730:	00081df5 	.word	0x00081df5
   85734:	00081f75 	.word	0x00081f75
   85738:	01234567 	.word	0x01234567
   8573c:	89abcdef 	.word	0x89abcdef
   85740:	2007a6e4 	.word	0x2007a6e4
   85744:	000859bd 	.word	0x000859bd
   85748:	000857f9 	.word	0x000857f9
   8574c:	00085859 	.word	0x00085859
   85750:	0008591d 	.word	0x0008591d
   85754:	00085dad 	.word	0x00085dad

00085758 <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   85758:	b580      	push	{r7, lr}
   8575a:	b082      	sub	sp, #8
   8575c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   8575e:	481c      	ldr	r0, [pc, #112]	; (857d0 <CAN0_Handler+0x78>)
   85760:	491c      	ldr	r1, [pc, #112]	; (857d4 <CAN0_Handler+0x7c>)
   85762:	4b1d      	ldr	r3, [pc, #116]	; (857d8 <CAN0_Handler+0x80>)
   85764:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   85766:	481d      	ldr	r0, [pc, #116]	; (857dc <CAN0_Handler+0x84>)
   85768:	4b1d      	ldr	r3, [pc, #116]	; (857e0 <CAN0_Handler+0x88>)
   8576a:	4798      	blx	r3
   8576c:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8576e:	683b      	ldr	r3, [r7, #0]
   85770:	b2db      	uxtb	r3, r3
   85772:	2b00      	cmp	r3, #0
   85774:	d029      	beq.n	857ca <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85776:	2300      	movs	r3, #0
   85778:	71fb      	strb	r3, [r7, #7]
   8577a:	e023      	b.n	857c4 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   8577c:	79fb      	ldrb	r3, [r7, #7]
   8577e:	4817      	ldr	r0, [pc, #92]	; (857dc <CAN0_Handler+0x84>)
   85780:	4619      	mov	r1, r3
   85782:	4b18      	ldr	r3, [pc, #96]	; (857e4 <CAN0_Handler+0x8c>)
   85784:	4798      	blx	r3
   85786:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   85788:	683b      	ldr	r3, [r7, #0]
   8578a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8578e:	2b00      	cmp	r3, #0
   85790:	d015      	beq.n	857be <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   85792:	79fa      	ldrb	r2, [r7, #7]
   85794:	4b0e      	ldr	r3, [pc, #56]	; (857d0 <CAN0_Handler+0x78>)
   85796:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   85798:	4b0d      	ldr	r3, [pc, #52]	; (857d0 <CAN0_Handler+0x78>)
   8579a:	683a      	ldr	r2, [r7, #0]
   8579c:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   8579e:	480f      	ldr	r0, [pc, #60]	; (857dc <CAN0_Handler+0x84>)
   857a0:	490b      	ldr	r1, [pc, #44]	; (857d0 <CAN0_Handler+0x78>)
   857a2:	4b11      	ldr	r3, [pc, #68]	; (857e8 <CAN0_Handler+0x90>)
   857a4:	4798      	blx	r3
				g_ul_recv_status = 1;
   857a6:	4b11      	ldr	r3, [pc, #68]	; (857ec <CAN0_Handler+0x94>)
   857a8:	2201      	movs	r2, #1
   857aa:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   857ac:	4808      	ldr	r0, [pc, #32]	; (857d0 <CAN0_Handler+0x78>)
   857ae:	490b      	ldr	r1, [pc, #44]	; (857dc <CAN0_Handler+0x84>)
   857b0:	4b0f      	ldr	r3, [pc, #60]	; (857f0 <CAN0_Handler+0x98>)
   857b2:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   857b4:	4806      	ldr	r0, [pc, #24]	; (857d0 <CAN0_Handler+0x78>)
   857b6:	4907      	ldr	r1, [pc, #28]	; (857d4 <CAN0_Handler+0x7c>)
   857b8:	4b0e      	ldr	r3, [pc, #56]	; (857f4 <CAN0_Handler+0x9c>)
   857ba:	4798      	blx	r3
				break;
   857bc:	e005      	b.n	857ca <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   857be:	79fb      	ldrb	r3, [r7, #7]
   857c0:	3301      	adds	r3, #1
   857c2:	71fb      	strb	r3, [r7, #7]
   857c4:	79fb      	ldrb	r3, [r7, #7]
   857c6:	2b07      	cmp	r3, #7
   857c8:	d9d8      	bls.n	8577c <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   857ca:	3708      	adds	r7, #8
   857cc:	46bd      	mov	sp, r7
   857ce:	bd80      	pop	{r7, pc}
   857d0:	2007a6bc 	.word	0x2007a6bc
   857d4:	2007a700 	.word	0x2007a700
   857d8:	00085d3d 	.word	0x00085d3d
   857dc:	400b4000 	.word	0x400b4000
   857e0:	00081db1 	.word	0x00081db1
   857e4:	00081df5 	.word	0x00081df5
   857e8:	00081f75 	.word	0x00081f75
   857ec:	2007a63c 	.word	0x2007a63c
   857f0:	000857f9 	.word	0x000857f9
   857f4:	00085dad 	.word	0x00085dad

000857f8 <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   857f8:	b580      	push	{r7, lr}
   857fa:	b086      	sub	sp, #24
   857fc:	af00      	add	r7, sp, #0
   857fe:	6078      	str	r0, [r7, #4]
   85800:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85802:	687b      	ldr	r3, [r7, #4]
   85804:	699b      	ldr	r3, [r3, #24]
   85806:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85808:	687b      	ldr	r3, [r7, #4]
   8580a:	69db      	ldr	r3, [r3, #28]
   8580c:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8580e:	693b      	ldr	r3, [r7, #16]
   85810:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85814:	0c1b      	lsrs	r3, r3, #16
   85816:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85818:	693b      	ldr	r3, [r7, #16]
   8581a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8581e:	0a1b      	lsrs	r3, r3, #8
   85820:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   85822:	7bfb      	ldrb	r3, [r7, #15]
   85824:	2b02      	cmp	r3, #2
   85826:	d105      	bne.n	85834 <debug_can_msg+0x3c>
   85828:	7bbb      	ldrb	r3, [r7, #14]
   8582a:	2b04      	cmp	r3, #4
   8582c:	d102      	bne.n	85834 <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   8582e:	2057      	movs	r0, #87	; 0x57
   85830:	4b08      	ldr	r3, [pc, #32]	; (85854 <debug_can_msg+0x5c>)
   85832:	4798      	blx	r3

	if (big_type == MT_HK)
   85834:	7bfb      	ldrb	r3, [r7, #15]
   85836:	2b01      	cmp	r3, #1
   85838:	d102      	bne.n	85840 <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   8583a:	2055      	movs	r0, #85	; 0x55
   8583c:	4b05      	ldr	r3, [pc, #20]	; (85854 <debug_can_msg+0x5c>)
   8583e:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   85840:	7bfb      	ldrb	r3, [r7, #15]
   85842:	2b00      	cmp	r3, #0
   85844:	d102      	bne.n	8584c <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   85846:	2056      	movs	r0, #86	; 0x56
   85848:	4b02      	ldr	r3, [pc, #8]	; (85854 <debug_can_msg+0x5c>)
   8584a:	4798      	blx	r3

	return;
   8584c:	bf00      	nop
}
   8584e:	3718      	adds	r7, #24
   85850:	46bd      	mov	sp, r7
   85852:	bd80      	pop	{r7, pc}
   85854:	00082375 	.word	0x00082375

00085858 <decode_can_command>:


void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   85858:	b480      	push	{r7}
   8585a:	b087      	sub	sp, #28
   8585c:	af00      	add	r7, sp, #0
   8585e:	6078      	str	r0, [r7, #4]
   85860:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85862:	687b      	ldr	r3, [r7, #4]
   85864:	699b      	ldr	r3, [r3, #24]
   85866:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85868:	687b      	ldr	r3, [r7, #4]
   8586a:	69db      	ldr	r3, [r3, #28]
   8586c:	613b      	str	r3, [r7, #16]
	uint8_t sender, destination, big_type, small_type;

	sender = (uint8_t)(uh_data_incom >> 28);
   8586e:	693b      	ldr	r3, [r7, #16]
   85870:	0f1b      	lsrs	r3, r3, #28
   85872:	73fb      	strb	r3, [r7, #15]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   85874:	693b      	ldr	r3, [r7, #16]
   85876:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   8587a:	0e1b      	lsrs	r3, r3, #24
   8587c:	73bb      	strb	r3, [r7, #14]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8587e:	693b      	ldr	r3, [r7, #16]
   85880:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85884:	0c1b      	lsrs	r3, r3, #16
   85886:	737b      	strb	r3, [r7, #13]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85888:	693b      	ldr	r3, [r7, #16]
   8588a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8588e:	0a1b      	lsrs	r3, r3, #8
   85890:	733b      	strb	r3, [r7, #12]

	if(big_type != MT_COM)
   85892:	7b7b      	ldrb	r3, [r7, #13]
   85894:	2b02      	cmp	r3, #2
   85896:	d000      	beq.n	8589a <decode_can_command+0x42>
		return;
   85898:	e02e      	b.n	858f8 <decode_can_command+0xa0>
	
	switch(small_type)	// FROM WHO
   8589a:	7b3b      	ldrb	r3, [r7, #12]
   8589c:	2b06      	cmp	r3, #6
   8589e:	d002      	beq.n	858a6 <decode_can_command+0x4e>
   858a0:	2b08      	cmp	r3, #8
   858a2:	d014      	beq.n	858ce <decode_can_command+0x76>
				default :
					break;
			}
			break;
		default :
			break;
   858a4:	e027      	b.n	858f6 <decode_can_command+0x9e>
		return;
	
	switch(small_type)	// FROM WHO
	{
		case ACK_READ:
			switch(destination)
   858a6:	7bbb      	ldrb	r3, [r7, #14]
   858a8:	2b04      	cmp	r3, #4
   858aa:	d000      	beq.n	858ae <decode_can_command+0x56>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   858ac:	e00e      	b.n	858cc <decode_can_command+0x74>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   858ae:	4b15      	ldr	r3, [pc, #84]	; (85904 <decode_can_command+0xac>)
   858b0:	781b      	ldrb	r3, [r3, #0]
   858b2:	2b00      	cmp	r3, #0
   858b4:	d009      	beq.n	858ca <decode_can_command+0x72>
					{
						hk_read_receivedf = 1;
   858b6:	4b14      	ldr	r3, [pc, #80]	; (85908 <decode_can_command+0xb0>)
   858b8:	2201      	movs	r2, #1
   858ba:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   858bc:	4b13      	ldr	r3, [pc, #76]	; (8590c <decode_can_command+0xb4>)
   858be:	693a      	ldr	r2, [r7, #16]
   858c0:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   858c2:	4b12      	ldr	r3, [pc, #72]	; (8590c <decode_can_command+0xb4>)
   858c4:	697a      	ldr	r2, [r7, #20]
   858c6:	601a      	str	r2, [r3, #0]
					}
					break;
   858c8:	e7ff      	b.n	858ca <decode_can_command+0x72>
   858ca:	bf00      	nop
				default :
					break;
			}
			break;
   858cc:	e013      	b.n	858f6 <decode_can_command+0x9e>
		case ACK_WRITE :
			switch(destination)
   858ce:	7bbb      	ldrb	r3, [r7, #14]
   858d0:	2b04      	cmp	r3, #4
   858d2:	d000      	beq.n	858d6 <decode_can_command+0x7e>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   858d4:	e00e      	b.n	858f4 <decode_can_command+0x9c>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   858d6:	4b0e      	ldr	r3, [pc, #56]	; (85910 <decode_can_command+0xb8>)
   858d8:	781b      	ldrb	r3, [r3, #0]
   858da:	2b00      	cmp	r3, #0
   858dc:	d009      	beq.n	858f2 <decode_can_command+0x9a>
					{
						hk_write_receivedf = 1;
   858de:	4b0d      	ldr	r3, [pc, #52]	; (85914 <decode_can_command+0xbc>)
   858e0:	2201      	movs	r2, #1
   858e2:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   858e4:	4b0c      	ldr	r3, [pc, #48]	; (85918 <decode_can_command+0xc0>)
   858e6:	693a      	ldr	r2, [r7, #16]
   858e8:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   858ea:	4b0b      	ldr	r3, [pc, #44]	; (85918 <decode_can_command+0xc0>)
   858ec:	697a      	ldr	r2, [r7, #20]
   858ee:	601a      	str	r2, [r3, #0]
					}
					break;
   858f0:	e7ff      	b.n	858f2 <decode_can_command+0x9a>
   858f2:	bf00      	nop
				default :
					break;
			}
			break;
   858f4:	bf00      	nop
		default :
			break;
	}
	return;
   858f6:	bf00      	nop
}
   858f8:	371c      	adds	r7, #28
   858fa:	46bd      	mov	sp, r7
   858fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   85900:	4770      	bx	lr
   85902:	bf00      	nop
   85904:	2007a6e8 	.word	0x2007a6e8
   85908:	2007a64c 	.word	0x2007a64c
   8590c:	2007a680 	.word	0x2007a680
   85910:	2007a6b0 	.word	0x2007a6b0
   85914:	2007a67d 	.word	0x2007a67d
   85918:	2007a6b4 	.word	0x2007a6b4

0008591c <alert_can_data>:

void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   8591c:	b480      	push	{r7}
   8591e:	b087      	sub	sp, #28
   85920:	af00      	add	r7, sp, #0
   85922:	6078      	str	r0, [r7, #4]
   85924:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85926:	687b      	ldr	r3, [r7, #4]
   85928:	69db      	ldr	r3, [r3, #28]
   8592a:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8592c:	687b      	ldr	r3, [r7, #4]
   8592e:	699b      	ldr	r3, [r3, #24]
   85930:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   85932:	697b      	ldr	r3, [r7, #20]
   85934:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85938:	0c1b      	lsrs	r3, r3, #16
   8593a:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   8593c:	697b      	ldr	r3, [r7, #20]
   8593e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   85942:	0a1b      	lsrs	r3, r3, #8
   85944:	73bb      	strb	r3, [r7, #14]

	if(big_type != MT_DATA)
   85946:	7bfb      	ldrb	r3, [r7, #15]
   85948:	2b00      	cmp	r3, #0
   8594a:	d000      	beq.n	8594e <alert_can_data+0x32>
		return;
   8594c:	e028      	b.n	859a0 <alert_can_data+0x84>

	switch(small_type)
   8594e:	7bbb      	ldrb	r3, [r7, #14]
   85950:	3b01      	subs	r3, #1
   85952:	2b03      	cmp	r3, #3
   85954:	d822      	bhi.n	8599c <alert_can_data+0x80>
   85956:	a201      	add	r2, pc, #4	; (adr r2, 8595c <alert_can_data+0x40>)
   85958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8595c:	0008596d 	.word	0x0008596d
   85960:	00085973 	.word	0x00085973
   85964:	00085979 	.word	0x00085979
   85968:	0008598b 	.word	0x0008598b
	{
		case SPI_TEMP1:
			glob_drf = 1;
   8596c:	4b0f      	ldr	r3, [pc, #60]	; (859ac <alert_can_data+0x90>)
   8596e:	2201      	movs	r2, #1
   85970:	701a      	strb	r2, [r3, #0]
		case COMS_PACKET:
			glob_comsf = 1;
   85972:	4b0f      	ldr	r3, [pc, #60]	; (859b0 <alert_can_data+0x94>)
   85974:	2201      	movs	r2, #1
   85976:	701a      	strb	r2, [r3, #0]
		case BATT_TOP :
			eps_data_receivedf = 1;
   85978:	4b0e      	ldr	r3, [pc, #56]	; (859b4 <alert_can_data+0x98>)
   8597a:	2201      	movs	r2, #1
   8597c:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   8597e:	4b0e      	ldr	r3, [pc, #56]	; (859b8 <alert_can_data+0x9c>)
   85980:	697a      	ldr	r2, [r7, #20]
   85982:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   85984:	4b0c      	ldr	r3, [pc, #48]	; (859b8 <alert_can_data+0x9c>)
   85986:	693a      	ldr	r2, [r7, #16]
   85988:	601a      	str	r2, [r3, #0]
		case BATT_BOTTOM :
			eps_data_receivedf = 1;
   8598a:	4b0a      	ldr	r3, [pc, #40]	; (859b4 <alert_can_data+0x98>)
   8598c:	2201      	movs	r2, #1
   8598e:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   85990:	4b09      	ldr	r3, [pc, #36]	; (859b8 <alert_can_data+0x9c>)
   85992:	697a      	ldr	r2, [r7, #20]
   85994:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   85996:	4b08      	ldr	r3, [pc, #32]	; (859b8 <alert_can_data+0x9c>)
   85998:	693a      	ldr	r2, [r7, #16]
   8599a:	601a      	str	r2, [r3, #0]
		default :
			break;
   8599c:	bf00      	nop
	}

	return;
   8599e:	bf00      	nop
}
   859a0:	371c      	adds	r7, #28
   859a2:	46bd      	mov	sp, r7
   859a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   859a8:	4770      	bx	lr
   859aa:	bf00      	nop
   859ac:	2007a670 	.word	0x2007a670
   859b0:	2007a67c 	.word	0x2007a67c
   859b4:	2007a6f0 	.word	0x2007a6f0
   859b8:	2007a6dc 	.word	0x2007a6dc

000859bc <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   859bc:	b590      	push	{r4, r7, lr}
   859be:	b087      	sub	sp, #28
   859c0:	af00      	add	r7, sp, #0
   859c2:	6078      	str	r0, [r7, #4]
   859c4:	460b      	mov	r3, r1
   859c6:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   859c8:	687b      	ldr	r3, [r7, #4]
   859ca:	699b      	ldr	r3, [r3, #24]
   859cc:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   859ce:	687b      	ldr	r3, [r7, #4]
   859d0:	69db      	ldr	r3, [r3, #28]
   859d2:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   859d4:	78fb      	ldrb	r3, [r7, #3]
   859d6:	2b07      	cmp	r3, #7
   859d8:	d873      	bhi.n	85ac2 <store_can_msg+0x106>
   859da:	a201      	add	r2, pc, #4	; (adr r2, 859e0 <store_can_msg+0x24>)
   859dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   859e0:	00085a01 	.word	0x00085a01
   859e4:	00085ac3 	.word	0x00085ac3
   859e8:	00085ac3 	.word	0x00085ac3
   859ec:	00085ac3 	.word	0x00085ac3
   859f0:	00085ac3 	.word	0x00085ac3
   859f4:	00085a31 	.word	0x00085a31
   859f8:	00085a61 	.word	0x00085a61
   859fc:	00085a91 	.word	0x00085a91
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   85a00:	4b32      	ldr	r3, [pc, #200]	; (85acc <store_can_msg+0x110>)
   85a02:	6819      	ldr	r1, [r3, #0]
   85a04:	f107 0214 	add.w	r2, r7, #20
   85a08:	f107 030c 	add.w	r3, r7, #12
   85a0c:	4608      	mov	r0, r1
   85a0e:	4611      	mov	r1, r2
   85a10:	461a      	mov	r2, r3
   85a12:	2300      	movs	r3, #0
   85a14:	4c2e      	ldr	r4, [pc, #184]	; (85ad0 <store_can_msg+0x114>)
   85a16:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   85a18:	4b2c      	ldr	r3, [pc, #176]	; (85acc <store_can_msg+0x110>)
   85a1a:	6819      	ldr	r1, [r3, #0]
   85a1c:	f107 0210 	add.w	r2, r7, #16
   85a20:	f107 030c 	add.w	r3, r7, #12
   85a24:	4608      	mov	r0, r1
   85a26:	4611      	mov	r1, r2
   85a28:	461a      	mov	r2, r3
   85a2a:	2300      	movs	r3, #0
   85a2c:	4c28      	ldr	r4, [pc, #160]	; (85ad0 <store_can_msg+0x114>)
   85a2e:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   85a30:	4b28      	ldr	r3, [pc, #160]	; (85ad4 <store_can_msg+0x118>)
   85a32:	6819      	ldr	r1, [r3, #0]
   85a34:	f107 0214 	add.w	r2, r7, #20
   85a38:	f107 030c 	add.w	r3, r7, #12
   85a3c:	4608      	mov	r0, r1
   85a3e:	4611      	mov	r1, r2
   85a40:	461a      	mov	r2, r3
   85a42:	2300      	movs	r3, #0
   85a44:	4c22      	ldr	r4, [pc, #136]	; (85ad0 <store_can_msg+0x114>)
   85a46:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   85a48:	4b22      	ldr	r3, [pc, #136]	; (85ad4 <store_can_msg+0x118>)
   85a4a:	6819      	ldr	r1, [r3, #0]
   85a4c:	f107 0210 	add.w	r2, r7, #16
   85a50:	f107 030c 	add.w	r3, r7, #12
   85a54:	4608      	mov	r0, r1
   85a56:	4611      	mov	r1, r2
   85a58:	461a      	mov	r2, r3
   85a5a:	2300      	movs	r3, #0
   85a5c:	4c1c      	ldr	r4, [pc, #112]	; (85ad0 <store_can_msg+0x114>)
   85a5e:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   85a60:	4b1d      	ldr	r3, [pc, #116]	; (85ad8 <store_can_msg+0x11c>)
   85a62:	6819      	ldr	r1, [r3, #0]
   85a64:	f107 0214 	add.w	r2, r7, #20
   85a68:	f107 030c 	add.w	r3, r7, #12
   85a6c:	4608      	mov	r0, r1
   85a6e:	4611      	mov	r1, r2
   85a70:	461a      	mov	r2, r3
   85a72:	2300      	movs	r3, #0
   85a74:	4c16      	ldr	r4, [pc, #88]	; (85ad0 <store_can_msg+0x114>)
   85a76:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   85a78:	4b17      	ldr	r3, [pc, #92]	; (85ad8 <store_can_msg+0x11c>)
   85a7a:	6819      	ldr	r1, [r3, #0]
   85a7c:	f107 0210 	add.w	r2, r7, #16
   85a80:	f107 030c 	add.w	r3, r7, #12
   85a84:	4608      	mov	r0, r1
   85a86:	4611      	mov	r1, r2
   85a88:	461a      	mov	r2, r3
   85a8a:	2300      	movs	r3, #0
   85a8c:	4c10      	ldr	r4, [pc, #64]	; (85ad0 <store_can_msg+0x114>)
   85a8e:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   85a90:	4b12      	ldr	r3, [pc, #72]	; (85adc <store_can_msg+0x120>)
   85a92:	6819      	ldr	r1, [r3, #0]
   85a94:	f107 0214 	add.w	r2, r7, #20
   85a98:	f107 030c 	add.w	r3, r7, #12
   85a9c:	4608      	mov	r0, r1
   85a9e:	4611      	mov	r1, r2
   85aa0:	461a      	mov	r2, r3
   85aa2:	2300      	movs	r3, #0
   85aa4:	4c0a      	ldr	r4, [pc, #40]	; (85ad0 <store_can_msg+0x114>)
   85aa6:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   85aa8:	4b0c      	ldr	r3, [pc, #48]	; (85adc <store_can_msg+0x120>)
   85aaa:	6819      	ldr	r1, [r3, #0]
   85aac:	f107 0210 	add.w	r2, r7, #16
   85ab0:	f107 030c 	add.w	r3, r7, #12
   85ab4:	4608      	mov	r0, r1
   85ab6:	4611      	mov	r1, r2
   85ab8:	461a      	mov	r2, r3
   85aba:	2300      	movs	r3, #0
   85abc:	4c04      	ldr	r4, [pc, #16]	; (85ad0 <store_can_msg+0x114>)
   85abe:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   85ac0:	bf00      	nop
   85ac2:	bf00      	nop
	}
	return;
}
   85ac4:	371c      	adds	r7, #28
   85ac6:	46bd      	mov	sp, r7
   85ac8:	bd90      	pop	{r4, r7, pc}
   85aca:	bf00      	nop
   85acc:	2007a688 	.word	0x2007a688
   85ad0:	00083b31 	.word	0x00083b31
   85ad4:	2007a6fc 	.word	0x2007a6fc
   85ad8:	2007a640 	.word	0x2007a640
   85adc:	2007a6ec 	.word	0x2007a6ec

00085ae0 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85ae0:	b480      	push	{r7}
   85ae2:	b083      	sub	sp, #12
   85ae4:	af00      	add	r7, sp, #0
   85ae6:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   85ae8:	687b      	ldr	r3, [r7, #4]
   85aea:	2200      	movs	r2, #0
   85aec:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   85aee:	687b      	ldr	r3, [r7, #4]
   85af0:	2200      	movs	r2, #0
   85af2:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   85af4:	687b      	ldr	r3, [r7, #4]
   85af6:	2200      	movs	r2, #0
   85af8:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   85afa:	687b      	ldr	r3, [r7, #4]
   85afc:	2200      	movs	r2, #0
   85afe:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   85b00:	687b      	ldr	r3, [r7, #4]
   85b02:	2200      	movs	r2, #0
   85b04:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   85b06:	687b      	ldr	r3, [r7, #4]
   85b08:	2200      	movs	r2, #0
   85b0a:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   85b0c:	687b      	ldr	r3, [r7, #4]
   85b0e:	2200      	movs	r2, #0
   85b10:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   85b12:	687b      	ldr	r3, [r7, #4]
   85b14:	2200      	movs	r2, #0
   85b16:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   85b18:	687b      	ldr	r3, [r7, #4]
   85b1a:	2200      	movs	r2, #0
   85b1c:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   85b1e:	687b      	ldr	r3, [r7, #4]
   85b20:	2200      	movs	r2, #0
   85b22:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   85b24:	687b      	ldr	r3, [r7, #4]
   85b26:	2200      	movs	r2, #0
   85b28:	61da      	str	r2, [r3, #28]
}
   85b2a:	370c      	adds	r7, #12
   85b2c:	46bd      	mov	sp, r7
   85b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85b32:	4770      	bx	lr

00085b34 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   85b34:	b580      	push	{r7, lr}
   85b36:	b08c      	sub	sp, #48	; 0x30
   85b38:	af00      	add	r7, sp, #0
   85b3a:	60f8      	str	r0, [r7, #12]
   85b3c:	60b9      	str	r1, [r7, #8]
   85b3e:	607a      	str	r2, [r7, #4]
   85b40:	603b      	str	r3, [r7, #0]
	*  in between each use of the CAN resource.
	*/
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   85b42:	f107 0310 	add.w	r3, r7, #16
   85b46:	481e      	ldr	r0, [pc, #120]	; (85bc0 <send_can_command+0x8c>)
   85b48:	4619      	mov	r1, r3
   85b4a:	4b1e      	ldr	r3, [pc, #120]	; (85bc4 <send_can_command+0x90>)
   85b4c:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85b4e:	481c      	ldr	r0, [pc, #112]	; (85bc0 <send_can_command+0x8c>)
   85b50:	4b1d      	ldr	r3, [pc, #116]	; (85bc8 <send_can_command+0x94>)
   85b52:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85b54:	4b1a      	ldr	r3, [pc, #104]	; (85bc0 <send_can_command+0x8c>)
   85b56:	2207      	movs	r2, #7
   85b58:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85b5a:	4b19      	ldr	r3, [pc, #100]	; (85bc0 <send_can_command+0x8c>)
   85b5c:	2203      	movs	r2, #3
   85b5e:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   85b60:	683b      	ldr	r3, [r7, #0]
   85b62:	b2da      	uxtb	r2, r3
   85b64:	4b16      	ldr	r3, [pc, #88]	; (85bc0 <send_can_command+0x8c>)
   85b66:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85b68:	4b15      	ldr	r3, [pc, #84]	; (85bc0 <send_can_command+0x8c>)
   85b6a:	2200      	movs	r2, #0
   85b6c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85b6e:	4b14      	ldr	r3, [pc, #80]	; (85bc0 <send_can_command+0x8c>)
   85b70:	2200      	movs	r2, #0
   85b72:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85b74:	4815      	ldr	r0, [pc, #84]	; (85bcc <send_can_command+0x98>)
   85b76:	4912      	ldr	r1, [pc, #72]	; (85bc0 <send_can_command+0x8c>)
   85b78:	4b15      	ldr	r3, [pc, #84]	; (85bd0 <send_can_command+0x9c>)
   85b7a:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85b7c:	687b      	ldr	r3, [r7, #4]
   85b7e:	049a      	lsls	r2, r3, #18
   85b80:	4b14      	ldr	r3, [pc, #80]	; (85bd4 <send_can_command+0xa0>)
   85b82:	4013      	ands	r3, r2
   85b84:	4a0e      	ldr	r2, [pc, #56]	; (85bc0 <send_can_command+0x8c>)
   85b86:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   85b88:	4b0d      	ldr	r3, [pc, #52]	; (85bc0 <send_can_command+0x8c>)
   85b8a:	68fa      	ldr	r2, [r7, #12]
   85b8c:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85b8e:	4b0c      	ldr	r3, [pc, #48]	; (85bc0 <send_can_command+0x8c>)
   85b90:	68ba      	ldr	r2, [r7, #8]
   85b92:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85b94:	4b0a      	ldr	r3, [pc, #40]	; (85bc0 <send_can_command+0x8c>)
   85b96:	2208      	movs	r2, #8
   85b98:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85b9a:	480c      	ldr	r0, [pc, #48]	; (85bcc <send_can_command+0x98>)
   85b9c:	4908      	ldr	r1, [pc, #32]	; (85bc0 <send_can_command+0x8c>)
   85b9e:	4b0e      	ldr	r3, [pc, #56]	; (85bd8 <send_can_command+0xa4>)
   85ba0:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   85ba2:	480a      	ldr	r0, [pc, #40]	; (85bcc <send_can_command+0x98>)
   85ba4:	2180      	movs	r1, #128	; 0x80
   85ba6:	4b0d      	ldr	r3, [pc, #52]	; (85bdc <send_can_command+0xa8>)
   85ba8:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   85baa:	f107 0310 	add.w	r3, r7, #16
   85bae:	4804      	ldr	r0, [pc, #16]	; (85bc0 <send_can_command+0x8c>)
   85bb0:	4619      	mov	r1, r3
   85bb2:	4b0b      	ldr	r3, [pc, #44]	; (85be0 <send_can_command+0xac>)
   85bb4:	4798      	blx	r3
	
	return 1;
   85bb6:	2301      	movs	r3, #1
}
   85bb8:	4618      	mov	r0, r3
   85bba:	3730      	adds	r7, #48	; 0x30
   85bbc:	46bd      	mov	sp, r7
   85bbe:	bd80      	pop	{r7, pc}
   85bc0:	2007a6bc 	.word	0x2007a6bc
   85bc4:	00085d3d 	.word	0x00085d3d
   85bc8:	00085ae1 	.word	0x00085ae1
   85bcc:	400b4000 	.word	0x400b4000
   85bd0:	00081e55 	.word	0x00081e55
   85bd4:	1ffc0000 	.word	0x1ffc0000
   85bd8:	00082039 	.word	0x00082039
   85bdc:	00081dc9 	.word	0x00081dc9
   85be0:	00085dad 	.word	0x00085dad

00085be4 <read_can_data>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85be4:	b590      	push	{r4, r7, lr}
   85be6:	b085      	sub	sp, #20
   85be8:	af00      	add	r7, sp, #0
   85bea:	60f8      	str	r0, [r7, #12]
   85bec:	60b9      	str	r1, [r7, #8]
   85bee:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85bf0:	687a      	ldr	r2, [r7, #4]
   85bf2:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85bf6:	429a      	cmp	r2, r3
   85bf8:	d111      	bne.n	85c1e <read_can_data+0x3a>
	{
		xQueueReceive(can_data_fifo, message_low, (TickType_t) 1);
   85bfa:	4b0b      	ldr	r3, [pc, #44]	; (85c28 <read_can_data+0x44>)
   85bfc:	681b      	ldr	r3, [r3, #0]
   85bfe:	4618      	mov	r0, r3
   85c00:	68b9      	ldr	r1, [r7, #8]
   85c02:	2201      	movs	r2, #1
   85c04:	2300      	movs	r3, #0
   85c06:	4c09      	ldr	r4, [pc, #36]	; (85c2c <read_can_data+0x48>)
   85c08:	47a0      	blx	r4
		xQueueReceive(can_data_fifo, message_high, (TickType_t) 1);
   85c0a:	4b07      	ldr	r3, [pc, #28]	; (85c28 <read_can_data+0x44>)
   85c0c:	681b      	ldr	r3, [r3, #0]
   85c0e:	4618      	mov	r0, r3
   85c10:	68f9      	ldr	r1, [r7, #12]
   85c12:	2201      	movs	r2, #1
   85c14:	2300      	movs	r3, #0
   85c16:	4c05      	ldr	r4, [pc, #20]	; (85c2c <read_can_data+0x48>)
   85c18:	47a0      	blx	r4
		return 1;
   85c1a:	2301      	movs	r3, #1
   85c1c:	e000      	b.n	85c20 <read_can_data+0x3c>
	}

	return 0;
   85c1e:	2300      	movs	r3, #0
}
   85c20:	4618      	mov	r0, r3
   85c22:	3714      	adds	r7, #20
   85c24:	46bd      	mov	sp, r7
   85c26:	bd90      	pop	{r4, r7, pc}
   85c28:	2007a688 	.word	0x2007a688
   85c2c:	00083c2d 	.word	0x00083c2d

00085c30 <read_can_msg>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85c30:	b590      	push	{r4, r7, lr}
   85c32:	b085      	sub	sp, #20
   85c34:	af00      	add	r7, sp, #0
   85c36:	60f8      	str	r0, [r7, #12]
   85c38:	60b9      	str	r1, [r7, #8]
   85c3a:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85c3c:	687a      	ldr	r2, [r7, #4]
   85c3e:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85c42:	429a      	cmp	r2, r3
   85c44:	d111      	bne.n	85c6a <read_can_msg+0x3a>
	{
		xQueueReceive(can_msg_fifo, message_low, (TickType_t) 1);
   85c46:	4b0b      	ldr	r3, [pc, #44]	; (85c74 <read_can_msg+0x44>)
   85c48:	681b      	ldr	r3, [r3, #0]
   85c4a:	4618      	mov	r0, r3
   85c4c:	68b9      	ldr	r1, [r7, #8]
   85c4e:	2201      	movs	r2, #1
   85c50:	2300      	movs	r3, #0
   85c52:	4c09      	ldr	r4, [pc, #36]	; (85c78 <read_can_msg+0x48>)
   85c54:	47a0      	blx	r4
		xQueueReceive(can_msg_fifo, message_high, (TickType_t) 1);
   85c56:	4b07      	ldr	r3, [pc, #28]	; (85c74 <read_can_msg+0x44>)
   85c58:	681b      	ldr	r3, [r3, #0]
   85c5a:	4618      	mov	r0, r3
   85c5c:	68f9      	ldr	r1, [r7, #12]
   85c5e:	2201      	movs	r2, #1
   85c60:	2300      	movs	r3, #0
   85c62:	4c05      	ldr	r4, [pc, #20]	; (85c78 <read_can_msg+0x48>)
   85c64:	47a0      	blx	r4
		return 1;
   85c66:	2301      	movs	r3, #1
   85c68:	e000      	b.n	85c6c <read_can_msg+0x3c>
	}

	return 0;
   85c6a:	2300      	movs	r3, #0
}
   85c6c:	4618      	mov	r0, r3
   85c6e:	3714      	adds	r7, #20
   85c70:	46bd      	mov	sp, r7
   85c72:	bd90      	pop	{r4, r7, pc}
   85c74:	2007a6fc 	.word	0x2007a6fc
   85c78:	00083c2d 	.word	0x00083c2d

00085c7c <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   85c7c:	b580      	push	{r7, lr}
   85c7e:	b08c      	sub	sp, #48	; 0x30
   85c80:	af00      	add	r7, sp, #0
   85c82:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	uint32_t high;
	uint8_t dest = (uint8_t)ID;
   85c84:	687b      	ldr	r3, [r7, #4]
   85c86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	save_can_object(&can0_mailbox, &temp_mailbox);
   85c8a:	f107 0308 	add.w	r3, r7, #8
   85c8e:	4821      	ldr	r0, [pc, #132]	; (85d14 <request_housekeeping+0x98>)
   85c90:	4619      	mov	r1, r3
   85c92:	4b21      	ldr	r3, [pc, #132]	; (85d18 <request_housekeeping+0x9c>)
   85c94:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85c96:	481f      	ldr	r0, [pc, #124]	; (85d14 <request_housekeeping+0x98>)
   85c98:	4b20      	ldr	r3, [pc, #128]	; (85d1c <request_housekeeping+0xa0>)
   85c9a:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85c9c:	4b1d      	ldr	r3, [pc, #116]	; (85d14 <request_housekeeping+0x98>)
   85c9e:	2206      	movs	r2, #6
   85ca0:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85ca2:	4b1c      	ldr	r3, [pc, #112]	; (85d14 <request_housekeeping+0x98>)
   85ca4:	2203      	movs	r2, #3
   85ca6:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85ca8:	4b1a      	ldr	r3, [pc, #104]	; (85d14 <request_housekeeping+0x98>)
   85caa:	2214      	movs	r2, #20
   85cac:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85cae:	4b19      	ldr	r3, [pc, #100]	; (85d14 <request_housekeeping+0x98>)
   85cb0:	2200      	movs	r2, #0
   85cb2:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85cb4:	4b17      	ldr	r3, [pc, #92]	; (85d14 <request_housekeeping+0x98>)
   85cb6:	2200      	movs	r2, #0
   85cb8:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85cba:	4819      	ldr	r0, [pc, #100]	; (85d20 <request_housekeeping+0xa4>)
   85cbc:	4915      	ldr	r1, [pc, #84]	; (85d14 <request_housekeeping+0x98>)
   85cbe:	4b19      	ldr	r3, [pc, #100]	; (85d24 <request_housekeeping+0xa8>)
   85cc0:	4798      	blx	r3
	
	high = high_command_generator(HK_TASK_ID, MT_COM, REQ_HK);
   85cc2:	2004      	movs	r0, #4
   85cc4:	2102      	movs	r1, #2
   85cc6:	2203      	movs	r2, #3
   85cc8:	4b17      	ldr	r3, [pc, #92]	; (85d28 <request_housekeeping+0xac>)
   85cca:	4798      	blx	r3
   85ccc:	62b8      	str	r0, [r7, #40]	; 0x28

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85cce:	687b      	ldr	r3, [r7, #4]
   85cd0:	049a      	lsls	r2, r3, #18
   85cd2:	4b16      	ldr	r3, [pc, #88]	; (85d2c <request_housekeeping+0xb0>)
   85cd4:	4013      	ands	r3, r2
   85cd6:	4a0f      	ldr	r2, [pc, #60]	; (85d14 <request_housekeeping+0x98>)
   85cd8:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = 0x00;				// shifted over to the standard frame position.
   85cda:	4b0e      	ldr	r3, [pc, #56]	; (85d14 <request_housekeeping+0x98>)
   85cdc:	2200      	movs	r2, #0
   85cde:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85ce0:	4b0c      	ldr	r3, [pc, #48]	; (85d14 <request_housekeeping+0x98>)
   85ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85ce4:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85ce6:	4b0b      	ldr	r3, [pc, #44]	; (85d14 <request_housekeeping+0x98>)
   85ce8:	2208      	movs	r2, #8
   85cea:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85cec:	480c      	ldr	r0, [pc, #48]	; (85d20 <request_housekeeping+0xa4>)
   85cee:	4909      	ldr	r1, [pc, #36]	; (85d14 <request_housekeeping+0x98>)
   85cf0:	4b0f      	ldr	r3, [pc, #60]	; (85d30 <request_housekeeping+0xb4>)
   85cf2:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   85cf4:	480a      	ldr	r0, [pc, #40]	; (85d20 <request_housekeeping+0xa4>)
   85cf6:	2140      	movs	r1, #64	; 0x40
   85cf8:	4b0e      	ldr	r3, [pc, #56]	; (85d34 <request_housekeeping+0xb8>)
   85cfa:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   85cfc:	f107 0308 	add.w	r3, r7, #8
   85d00:	4804      	ldr	r0, [pc, #16]	; (85d14 <request_housekeeping+0x98>)
   85d02:	4619      	mov	r1, r3
   85d04:	4b0c      	ldr	r3, [pc, #48]	; (85d38 <request_housekeeping+0xbc>)
   85d06:	4798      	blx	r3
		
	return 1;
   85d08:	2301      	movs	r3, #1
}
   85d0a:	4618      	mov	r0, r3
   85d0c:	3730      	adds	r7, #48	; 0x30
   85d0e:	46bd      	mov	sp, r7
   85d10:	bd80      	pop	{r7, pc}
   85d12:	bf00      	nop
   85d14:	2007a6bc 	.word	0x2007a6bc
   85d18:	00085d3d 	.word	0x00085d3d
   85d1c:	00085ae1 	.word	0x00085ae1
   85d20:	400b4000 	.word	0x400b4000
   85d24:	00081e55 	.word	0x00081e55
   85d28:	00086141 	.word	0x00086141
   85d2c:	1ffc0000 	.word	0x1ffc0000
   85d30:	00082039 	.word	0x00082039
   85d34:	00081dc9 	.word	0x00081dc9
   85d38:	00085dad 	.word	0x00085dad

00085d3c <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85d3c:	b480      	push	{r7}
   85d3e:	b083      	sub	sp, #12
   85d40:	af00      	add	r7, sp, #0
   85d42:	6078      	str	r0, [r7, #4]
   85d44:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   85d46:	687b      	ldr	r3, [r7, #4]
   85d48:	681a      	ldr	r2, [r3, #0]
   85d4a:	683b      	ldr	r3, [r7, #0]
   85d4c:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   85d4e:	687b      	ldr	r3, [r7, #4]
   85d50:	791a      	ldrb	r2, [r3, #4]
   85d52:	683b      	ldr	r3, [r7, #0]
   85d54:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   85d56:	687b      	ldr	r3, [r7, #4]
   85d58:	795a      	ldrb	r2, [r3, #5]
   85d5a:	683b      	ldr	r3, [r7, #0]
   85d5c:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   85d5e:	687b      	ldr	r3, [r7, #4]
   85d60:	799a      	ldrb	r2, [r3, #6]
   85d62:	683b      	ldr	r3, [r7, #0]
   85d64:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   85d66:	687b      	ldr	r3, [r7, #4]
   85d68:	79da      	ldrb	r2, [r3, #7]
   85d6a:	683b      	ldr	r3, [r7, #0]
   85d6c:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   85d6e:	687b      	ldr	r3, [r7, #4]
   85d70:	689a      	ldr	r2, [r3, #8]
   85d72:	683b      	ldr	r3, [r7, #0]
   85d74:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   85d76:	687b      	ldr	r3, [r7, #4]
   85d78:	68da      	ldr	r2, [r3, #12]
   85d7a:	683b      	ldr	r3, [r7, #0]
   85d7c:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   85d7e:	687b      	ldr	r3, [r7, #4]
   85d80:	691a      	ldr	r2, [r3, #16]
   85d82:	683b      	ldr	r3, [r7, #0]
   85d84:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   85d86:	687b      	ldr	r3, [r7, #4]
   85d88:	695a      	ldr	r2, [r3, #20]
   85d8a:	683b      	ldr	r3, [r7, #0]
   85d8c:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   85d8e:	687b      	ldr	r3, [r7, #4]
   85d90:	699a      	ldr	r2, [r3, #24]
   85d92:	683b      	ldr	r3, [r7, #0]
   85d94:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   85d96:	687b      	ldr	r3, [r7, #4]
   85d98:	69da      	ldr	r2, [r3, #28]
   85d9a:	683b      	ldr	r3, [r7, #0]
   85d9c:	61da      	str	r2, [r3, #28]
	
	return;
   85d9e:	bf00      	nop
}
   85da0:	370c      	adds	r7, #12
   85da2:	46bd      	mov	sp, r7
   85da4:	f85d 7b04 	ldr.w	r7, [sp], #4
   85da8:	4770      	bx	lr
   85daa:	bf00      	nop

00085dac <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85dac:	b480      	push	{r7}
   85dae:	b083      	sub	sp, #12
   85db0:	af00      	add	r7, sp, #0
   85db2:	6078      	str	r0, [r7, #4]
   85db4:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   85db6:	683b      	ldr	r3, [r7, #0]
   85db8:	681a      	ldr	r2, [r3, #0]
   85dba:	687b      	ldr	r3, [r7, #4]
   85dbc:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   85dbe:	683b      	ldr	r3, [r7, #0]
   85dc0:	791a      	ldrb	r2, [r3, #4]
   85dc2:	687b      	ldr	r3, [r7, #4]
   85dc4:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   85dc6:	683b      	ldr	r3, [r7, #0]
   85dc8:	795a      	ldrb	r2, [r3, #5]
   85dca:	687b      	ldr	r3, [r7, #4]
   85dcc:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   85dce:	683b      	ldr	r3, [r7, #0]
   85dd0:	799a      	ldrb	r2, [r3, #6]
   85dd2:	687b      	ldr	r3, [r7, #4]
   85dd4:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   85dd6:	683b      	ldr	r3, [r7, #0]
   85dd8:	79da      	ldrb	r2, [r3, #7]
   85dda:	687b      	ldr	r3, [r7, #4]
   85ddc:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   85dde:	683b      	ldr	r3, [r7, #0]
   85de0:	689a      	ldr	r2, [r3, #8]
   85de2:	687b      	ldr	r3, [r7, #4]
   85de4:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   85de6:	683b      	ldr	r3, [r7, #0]
   85de8:	68da      	ldr	r2, [r3, #12]
   85dea:	687b      	ldr	r3, [r7, #4]
   85dec:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85dee:	683b      	ldr	r3, [r7, #0]
   85df0:	691a      	ldr	r2, [r3, #16]
   85df2:	687b      	ldr	r3, [r7, #4]
   85df4:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   85df6:	683b      	ldr	r3, [r7, #0]
   85df8:	695a      	ldr	r2, [r3, #20]
   85dfa:	687b      	ldr	r3, [r7, #4]
   85dfc:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   85dfe:	683b      	ldr	r3, [r7, #0]
   85e00:	699a      	ldr	r2, [r3, #24]
   85e02:	687b      	ldr	r3, [r7, #4]
   85e04:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   85e06:	683b      	ldr	r3, [r7, #0]
   85e08:	69da      	ldr	r2, [r3, #28]
   85e0a:	687b      	ldr	r3, [r7, #4]
   85e0c:	61da      	str	r2, [r3, #28]
	
	return;
   85e0e:	bf00      	nop
}
   85e10:	370c      	adds	r7, #12
   85e12:	46bd      	mov	sp, r7
   85e14:	f85d 7b04 	ldr.w	r7, [sp], #4
   85e18:	4770      	bx	lr
   85e1a:	bf00      	nop

00085e1c <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   85e1c:	b580      	push	{r7, lr}
   85e1e:	b086      	sub	sp, #24
   85e20:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   85e22:	2301      	movs	r3, #1
   85e24:	613b      	str	r3, [r7, #16]
   85e26:	2300      	movs	r3, #0
   85e28:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   85e2a:	4853      	ldr	r0, [pc, #332]	; (85f78 <can_initialize+0x15c>)
   85e2c:	2134      	movs	r1, #52	; 0x34
   85e2e:	4b53      	ldr	r3, [pc, #332]	; (85f7c <can_initialize+0x160>)
   85e30:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   85e32:	4851      	ldr	r0, [pc, #324]	; (85f78 <can_initialize+0x15c>)
   85e34:	2135      	movs	r1, #53	; 0x35
   85e36:	4b52      	ldr	r3, [pc, #328]	; (85f80 <can_initialize+0x164>)
   85e38:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   85e3a:	484f      	ldr	r0, [pc, #316]	; (85f78 <can_initialize+0x15c>)
   85e3c:	4b51      	ldr	r3, [pc, #324]	; (85f84 <can_initialize+0x168>)
   85e3e:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   85e40:	484d      	ldr	r0, [pc, #308]	; (85f78 <can_initialize+0x15c>)
   85e42:	4b51      	ldr	r3, [pc, #324]	; (85f88 <can_initialize+0x16c>)
   85e44:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   85e46:	4851      	ldr	r0, [pc, #324]	; (85f8c <can_initialize+0x170>)
   85e48:	218f      	movs	r1, #143	; 0x8f
   85e4a:	4b4c      	ldr	r3, [pc, #304]	; (85f7c <can_initialize+0x160>)
   85e4c:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   85e4e:	484f      	ldr	r0, [pc, #316]	; (85f8c <can_initialize+0x170>)
   85e50:	2190      	movs	r1, #144	; 0x90
   85e52:	4b4b      	ldr	r3, [pc, #300]	; (85f80 <can_initialize+0x164>)
   85e54:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   85e56:	484d      	ldr	r0, [pc, #308]	; (85f8c <can_initialize+0x170>)
   85e58:	4b4a      	ldr	r3, [pc, #296]	; (85f84 <can_initialize+0x168>)
   85e5a:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   85e5c:	484b      	ldr	r0, [pc, #300]	; (85f8c <can_initialize+0x170>)
   85e5e:	4b4a      	ldr	r3, [pc, #296]	; (85f88 <can_initialize+0x16c>)
   85e60:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   85e62:	202b      	movs	r0, #43	; 0x2b
   85e64:	4b4a      	ldr	r3, [pc, #296]	; (85f90 <can_initialize+0x174>)
   85e66:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   85e68:	202c      	movs	r0, #44	; 0x2c
   85e6a:	4b49      	ldr	r3, [pc, #292]	; (85f90 <can_initialize+0x174>)
   85e6c:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   85e6e:	4b49      	ldr	r3, [pc, #292]	; (85f94 <can_initialize+0x178>)
   85e70:	4798      	blx	r3
   85e72:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85e74:	4848      	ldr	r0, [pc, #288]	; (85f98 <can_initialize+0x17c>)
   85e76:	68f9      	ldr	r1, [r7, #12]
   85e78:	22fa      	movs	r2, #250	; 0xfa
   85e7a:	4b48      	ldr	r3, [pc, #288]	; (85f9c <can_initialize+0x180>)
   85e7c:	4798      	blx	r3
   85e7e:	4603      	mov	r3, r0
   85e80:	2b00      	cmp	r3, #0
   85e82:	d074      	beq.n	85f6e <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   85e84:	4846      	ldr	r0, [pc, #280]	; (85fa0 <can_initialize+0x184>)
   85e86:	68f9      	ldr	r1, [r7, #12]
   85e88:	22fa      	movs	r2, #250	; 0xfa
   85e8a:	4b44      	ldr	r3, [pc, #272]	; (85f9c <can_initialize+0x180>)
   85e8c:	4798      	blx	r3
   85e8e:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85e90:	2b00      	cmp	r3, #0
   85e92:	d06c      	beq.n	85f6e <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85e94:	4840      	ldr	r0, [pc, #256]	; (85f98 <can_initialize+0x17c>)
   85e96:	f04f 31ff 	mov.w	r1, #4294967295
   85e9a:	4b42      	ldr	r3, [pc, #264]	; (85fa4 <can_initialize+0x188>)
   85e9c:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85e9e:	4840      	ldr	r0, [pc, #256]	; (85fa0 <can_initialize+0x184>)
   85ea0:	f04f 31ff 	mov.w	r1, #4294967295
   85ea4:	4b3f      	ldr	r3, [pc, #252]	; (85fa4 <can_initialize+0x188>)
   85ea6:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   85ea8:	202b      	movs	r0, #43	; 0x2b
   85eaa:	4b3f      	ldr	r3, [pc, #252]	; (85fa8 <can_initialize+0x18c>)
   85eac:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   85eae:	202c      	movs	r0, #44	; 0x2c
   85eb0:	4b3d      	ldr	r3, [pc, #244]	; (85fa8 <can_initialize+0x18c>)
   85eb2:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   85eb4:	4838      	ldr	r0, [pc, #224]	; (85f98 <can_initialize+0x17c>)
   85eb6:	4b3d      	ldr	r3, [pc, #244]	; (85fac <can_initialize+0x190>)
   85eb8:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   85eba:	4839      	ldr	r0, [pc, #228]	; (85fa0 <can_initialize+0x184>)
   85ebc:	4b3b      	ldr	r3, [pc, #236]	; (85fac <can_initialize+0x190>)
   85ebe:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   85ec0:	6938      	ldr	r0, [r7, #16]
   85ec2:	4b3b      	ldr	r3, [pc, #236]	; (85fb0 <can_initialize+0x194>)
   85ec4:	4798      	blx	r3
   85ec6:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   85ec8:	4b3a      	ldr	r3, [pc, #232]	; (85fb4 <can_initialize+0x198>)
   85eca:	2200      	movs	r2, #0
   85ecc:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   85ece:	4b3a      	ldr	r3, [pc, #232]	; (85fb8 <can_initialize+0x19c>)
   85ed0:	2200      	movs	r2, #0
   85ed2:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   85ed4:	4b39      	ldr	r3, [pc, #228]	; (85fbc <can_initialize+0x1a0>)
   85ed6:	2200      	movs	r2, #0
   85ed8:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   85eda:	4b39      	ldr	r3, [pc, #228]	; (85fc0 <can_initialize+0x1a4>)
   85edc:	2200      	movs	r2, #0
   85ede:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   85ee0:	4b38      	ldr	r3, [pc, #224]	; (85fc4 <can_initialize+0x1a8>)
   85ee2:	2200      	movs	r2, #0
   85ee4:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   85ee6:	4b38      	ldr	r3, [pc, #224]	; (85fc8 <can_initialize+0x1ac>)
   85ee8:	2200      	movs	r2, #0
   85eea:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85eec:	2300      	movs	r3, #0
   85eee:	617b      	str	r3, [r7, #20]
   85ef0:	e016      	b.n	85f20 <can_initialize+0x104>
		{
			glob_stored_data[i] = 0;
   85ef2:	4b36      	ldr	r3, [pc, #216]	; (85fcc <can_initialize+0x1b0>)
   85ef4:	697a      	ldr	r2, [r7, #20]
   85ef6:	2100      	movs	r1, #0
   85ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   85efc:	4b34      	ldr	r3, [pc, #208]	; (85fd0 <can_initialize+0x1b4>)
   85efe:	697a      	ldr	r2, [r7, #20]
   85f00:	2100      	movs	r1, #0
   85f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   85f06:	4b33      	ldr	r3, [pc, #204]	; (85fd4 <can_initialize+0x1b8>)
   85f08:	697a      	ldr	r2, [r7, #20]
   85f0a:	2100      	movs	r1, #0
   85f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   85f10:	4b31      	ldr	r3, [pc, #196]	; (85fd8 <can_initialize+0x1bc>)
   85f12:	697a      	ldr	r2, [r7, #20]
   85f14:	2100      	movs	r1, #0
   85f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85f1a:	697b      	ldr	r3, [r7, #20]
   85f1c:	3301      	adds	r3, #1
   85f1e:	617b      	str	r3, [r7, #20]
   85f20:	697b      	ldr	r3, [r7, #20]
   85f22:	2b01      	cmp	r3, #1
   85f24:	d9e5      	bls.n	85ef2 <can_initialize+0xd6>
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   85f26:	2364      	movs	r3, #100	; 0x64
   85f28:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   85f2a:	2304      	movs	r3, #4
   85f2c:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   85f2e:	68b8      	ldr	r0, [r7, #8]
   85f30:	6879      	ldr	r1, [r7, #4]
   85f32:	2200      	movs	r2, #0
   85f34:	4b29      	ldr	r3, [pc, #164]	; (85fdc <can_initialize+0x1c0>)
   85f36:	4798      	blx	r3
   85f38:	4602      	mov	r2, r0
   85f3a:	4b29      	ldr	r3, [pc, #164]	; (85fe0 <can_initialize+0x1c4>)
   85f3c:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   85f3e:	68b8      	ldr	r0, [r7, #8]
   85f40:	6879      	ldr	r1, [r7, #4]
   85f42:	2200      	movs	r2, #0
   85f44:	4b25      	ldr	r3, [pc, #148]	; (85fdc <can_initialize+0x1c0>)
   85f46:	4798      	blx	r3
   85f48:	4602      	mov	r2, r0
   85f4a:	4b26      	ldr	r3, [pc, #152]	; (85fe4 <can_initialize+0x1c8>)
   85f4c:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   85f4e:	68b8      	ldr	r0, [r7, #8]
   85f50:	6879      	ldr	r1, [r7, #4]
   85f52:	2200      	movs	r2, #0
   85f54:	4b21      	ldr	r3, [pc, #132]	; (85fdc <can_initialize+0x1c0>)
   85f56:	4798      	blx	r3
   85f58:	4602      	mov	r2, r0
   85f5a:	4b23      	ldr	r3, [pc, #140]	; (85fe8 <can_initialize+0x1cc>)
   85f5c:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   85f5e:	68b8      	ldr	r0, [r7, #8]
   85f60:	6879      	ldr	r1, [r7, #4]
   85f62:	2200      	movs	r2, #0
   85f64:	4b1d      	ldr	r3, [pc, #116]	; (85fdc <can_initialize+0x1c0>)
   85f66:	4798      	blx	r3
   85f68:	4602      	mov	r2, r0
   85f6a:	4b20      	ldr	r3, [pc, #128]	; (85fec <can_initialize+0x1d0>)
   85f6c:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   85f6e:	bf00      	nop
}
   85f70:	3718      	adds	r7, #24
   85f72:	46bd      	mov	sp, r7
   85f74:	bd80      	pop	{r7, pc}
   85f76:	bf00      	nop
   85f78:	2007a720 	.word	0x2007a720
   85f7c:	00081af1 	.word	0x00081af1
   85f80:	00081b0d 	.word	0x00081b0d
   85f84:	00081b45 	.word	0x00081b45
   85f88:	00081b29 	.word	0x00081b29
   85f8c:	2007a674 	.word	0x2007a674
   85f90:	00082961 	.word	0x00082961
   85f94:	00085655 	.word	0x00085655
   85f98:	400b4000 	.word	0x400b4000
   85f9c:	00081cb1 	.word	0x00081cb1
   85fa0:	400b8000 	.word	0x400b8000
   85fa4:	00081d95 	.word	0x00081d95
   85fa8:	00085595 	.word	0x00085595
   85fac:	000820f1 	.word	0x000820f1
   85fb0:	00085ff1 	.word	0x00085ff1
   85fb4:	2007a670 	.word	0x2007a670
   85fb8:	2007a67c 	.word	0x2007a67c
   85fbc:	2007a6e8 	.word	0x2007a6e8
   85fc0:	2007a64c 	.word	0x2007a64c
   85fc4:	2007a6b0 	.word	0x2007a6b0
   85fc8:	2007a67d 	.word	0x2007a67d
   85fcc:	2007a644 	.word	0x2007a644
   85fd0:	2007a6f4 	.word	0x2007a6f4
   85fd4:	2007a680 	.word	0x2007a680
   85fd8:	2007a6b4 	.word	0x2007a6b4
   85fdc:	000838e1 	.word	0x000838e1
   85fe0:	2007a688 	.word	0x2007a688
   85fe4:	2007a6fc 	.word	0x2007a6fc
   85fe8:	2007a640 	.word	0x2007a640
   85fec:	2007a6ec 	.word	0x2007a6ec

00085ff0 <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   85ff0:	b580      	push	{r7, lr}
   85ff2:	b082      	sub	sp, #8
   85ff4:	af00      	add	r7, sp, #0
   85ff6:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   85ff8:	484a      	ldr	r0, [pc, #296]	; (86124 <can_init_mailboxes+0x134>)
   85ffa:	4b4b      	ldr	r3, [pc, #300]	; (86128 <can_init_mailboxes+0x138>)
   85ffc:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85ffe:	4b49      	ldr	r3, [pc, #292]	; (86124 <can_init_mailboxes+0x134>)
   86000:	2207      	movs	r2, #7
   86002:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   86004:	4b47      	ldr	r3, [pc, #284]	; (86124 <can_init_mailboxes+0x134>)
   86006:	2203      	movs	r2, #3
   86008:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   8600a:	4b46      	ldr	r3, [pc, #280]	; (86124 <can_init_mailboxes+0x134>)
   8600c:	2205      	movs	r2, #5
   8600e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   86010:	4b44      	ldr	r3, [pc, #272]	; (86124 <can_init_mailboxes+0x134>)
   86012:	2200      	movs	r2, #0
   86014:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86016:	4b43      	ldr	r3, [pc, #268]	; (86124 <can_init_mailboxes+0x134>)
   86018:	2200      	movs	r2, #0
   8601a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8601c:	4843      	ldr	r0, [pc, #268]	; (8612c <can_init_mailboxes+0x13c>)
   8601e:	4941      	ldr	r1, [pc, #260]	; (86124 <can_init_mailboxes+0x134>)
   86020:	4b43      	ldr	r3, [pc, #268]	; (86130 <can_init_mailboxes+0x140>)
   86022:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86024:	4843      	ldr	r0, [pc, #268]	; (86134 <can_init_mailboxes+0x144>)
   86026:	4b40      	ldr	r3, [pc, #256]	; (86128 <can_init_mailboxes+0x138>)
   86028:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   8602a:	4b42      	ldr	r3, [pc, #264]	; (86134 <can_init_mailboxes+0x144>)
   8602c:	2200      	movs	r2, #0
   8602e:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   86030:	4b40      	ldr	r3, [pc, #256]	; (86134 <can_init_mailboxes+0x144>)
   86032:	2201      	movs	r2, #1
   86034:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86036:	4b3f      	ldr	r3, [pc, #252]	; (86134 <can_init_mailboxes+0x144>)
   86038:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   8603c:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   8603e:	4b3d      	ldr	r3, [pc, #244]	; (86134 <can_init_mailboxes+0x144>)
   86040:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   86044:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86046:	483c      	ldr	r0, [pc, #240]	; (86138 <can_init_mailboxes+0x148>)
   86048:	493a      	ldr	r1, [pc, #232]	; (86134 <can_init_mailboxes+0x144>)
   8604a:	4b39      	ldr	r3, [pc, #228]	; (86130 <can_init_mailboxes+0x140>)
   8604c:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8604e:	4839      	ldr	r0, [pc, #228]	; (86134 <can_init_mailboxes+0x144>)
   86050:	4b35      	ldr	r3, [pc, #212]	; (86128 <can_init_mailboxes+0x138>)
   86052:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   86054:	4b37      	ldr	r3, [pc, #220]	; (86134 <can_init_mailboxes+0x144>)
   86056:	2205      	movs	r2, #5
   86058:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8605a:	4b36      	ldr	r3, [pc, #216]	; (86134 <can_init_mailboxes+0x144>)
   8605c:	2201      	movs	r2, #1
   8605e:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86060:	4b34      	ldr	r3, [pc, #208]	; (86134 <can_init_mailboxes+0x144>)
   86062:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86066:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   86068:	4b32      	ldr	r3, [pc, #200]	; (86134 <can_init_mailboxes+0x144>)
   8606a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   8606e:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86070:	4831      	ldr	r0, [pc, #196]	; (86138 <can_init_mailboxes+0x148>)
   86072:	4930      	ldr	r1, [pc, #192]	; (86134 <can_init_mailboxes+0x144>)
   86074:	4b2e      	ldr	r3, [pc, #184]	; (86130 <can_init_mailboxes+0x140>)
   86076:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86078:	482e      	ldr	r0, [pc, #184]	; (86134 <can_init_mailboxes+0x144>)
   8607a:	4b2b      	ldr	r3, [pc, #172]	; (86128 <can_init_mailboxes+0x138>)
   8607c:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   8607e:	4b2d      	ldr	r3, [pc, #180]	; (86134 <can_init_mailboxes+0x144>)
   86080:	2206      	movs	r2, #6
   86082:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   86084:	4b2b      	ldr	r3, [pc, #172]	; (86134 <can_init_mailboxes+0x144>)
   86086:	2201      	movs	r2, #1
   86088:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8608a:	4b2a      	ldr	r3, [pc, #168]	; (86134 <can_init_mailboxes+0x144>)
   8608c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86090:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   86092:	4b28      	ldr	r3, [pc, #160]	; (86134 <can_init_mailboxes+0x144>)
   86094:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   86098:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8609a:	4827      	ldr	r0, [pc, #156]	; (86138 <can_init_mailboxes+0x148>)
   8609c:	4925      	ldr	r1, [pc, #148]	; (86134 <can_init_mailboxes+0x144>)
   8609e:	4b24      	ldr	r3, [pc, #144]	; (86130 <can_init_mailboxes+0x140>)
   860a0:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   860a2:	4824      	ldr	r0, [pc, #144]	; (86134 <can_init_mailboxes+0x144>)
   860a4:	4b20      	ldr	r3, [pc, #128]	; (86128 <can_init_mailboxes+0x138>)
   860a6:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   860a8:	4b22      	ldr	r3, [pc, #136]	; (86134 <can_init_mailboxes+0x144>)
   860aa:	2207      	movs	r2, #7
   860ac:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   860ae:	4b21      	ldr	r3, [pc, #132]	; (86134 <can_init_mailboxes+0x144>)
   860b0:	2201      	movs	r2, #1
   860b2:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   860b4:	4b1f      	ldr	r3, [pc, #124]	; (86134 <can_init_mailboxes+0x144>)
   860b6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   860ba:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   860bc:	4b1d      	ldr	r3, [pc, #116]	; (86134 <can_init_mailboxes+0x144>)
   860be:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   860c2:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   860c4:	481c      	ldr	r0, [pc, #112]	; (86138 <can_init_mailboxes+0x148>)
   860c6:	491b      	ldr	r1, [pc, #108]	; (86134 <can_init_mailboxes+0x144>)
   860c8:	4b19      	ldr	r3, [pc, #100]	; (86130 <can_init_mailboxes+0x140>)
   860ca:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   860cc:	481a      	ldr	r0, [pc, #104]	; (86138 <can_init_mailboxes+0x148>)
   860ce:	2101      	movs	r1, #1
   860d0:	4b1a      	ldr	r3, [pc, #104]	; (8613c <can_init_mailboxes+0x14c>)
   860d2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   860d4:	4818      	ldr	r0, [pc, #96]	; (86138 <can_init_mailboxes+0x148>)
   860d6:	2120      	movs	r1, #32
   860d8:	4b18      	ldr	r3, [pc, #96]	; (8613c <can_init_mailboxes+0x14c>)
   860da:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   860dc:	4816      	ldr	r0, [pc, #88]	; (86138 <can_init_mailboxes+0x148>)
   860de:	2140      	movs	r1, #64	; 0x40
   860e0:	4b16      	ldr	r3, [pc, #88]	; (8613c <can_init_mailboxes+0x14c>)
   860e2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   860e4:	4814      	ldr	r0, [pc, #80]	; (86138 <can_init_mailboxes+0x148>)
   860e6:	2180      	movs	r1, #128	; 0x80
   860e8:	4b14      	ldr	r3, [pc, #80]	; (8613c <can_init_mailboxes+0x14c>)
   860ea:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   860ec:	480d      	ldr	r0, [pc, #52]	; (86124 <can_init_mailboxes+0x134>)
   860ee:	4b0e      	ldr	r3, [pc, #56]	; (86128 <can_init_mailboxes+0x138>)
   860f0:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   860f2:	4b0c      	ldr	r3, [pc, #48]	; (86124 <can_init_mailboxes+0x134>)
   860f4:	2206      	movs	r2, #6
   860f6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   860f8:	4b0a      	ldr	r3, [pc, #40]	; (86124 <can_init_mailboxes+0x134>)
   860fa:	2203      	movs	r2, #3
   860fc:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   860fe:	4b09      	ldr	r3, [pc, #36]	; (86124 <can_init_mailboxes+0x134>)
   86100:	2214      	movs	r2, #20
   86102:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   86104:	4b07      	ldr	r3, [pc, #28]	; (86124 <can_init_mailboxes+0x134>)
   86106:	2200      	movs	r2, #0
   86108:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8610a:	4b06      	ldr	r3, [pc, #24]	; (86124 <can_init_mailboxes+0x134>)
   8610c:	2200      	movs	r2, #0
   8610e:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   86110:	4806      	ldr	r0, [pc, #24]	; (8612c <can_init_mailboxes+0x13c>)
   86112:	4904      	ldr	r1, [pc, #16]	; (86124 <can_init_mailboxes+0x134>)
   86114:	4b06      	ldr	r3, [pc, #24]	; (86130 <can_init_mailboxes+0x140>)
   86116:	4798      	blx	r3

	return 1;
   86118:	2301      	movs	r3, #1
}
   8611a:	4618      	mov	r0, r3
   8611c:	3708      	adds	r7, #8
   8611e:	46bd      	mov	sp, r7
   86120:	bd80      	pop	{r7, pc}
   86122:	bf00      	nop
   86124:	2007a6bc 	.word	0x2007a6bc
   86128:	00085ae1 	.word	0x00085ae1
   8612c:	400b4000 	.word	0x400b4000
   86130:	00081e55 	.word	0x00081e55
   86134:	2007a650 	.word	0x2007a650
   86138:	400b8000 	.word	0x400b8000
   8613c:	00081d79 	.word	0x00081d79

00086140 <high_command_generator>:

uint32_t high_command_generator(uint8_t SENDER_ID, uint8_t MessageType, uint8_t smalltype)
{
   86140:	b480      	push	{r7}
   86142:	b087      	sub	sp, #28
   86144:	af00      	add	r7, sp, #0
   86146:	4613      	mov	r3, r2
   86148:	4602      	mov	r2, r0
   8614a:	71fa      	strb	r2, [r7, #7]
   8614c:	460a      	mov	r2, r1
   8614e:	71ba      	strb	r2, [r7, #6]
   86150:	717b      	strb	r3, [r7, #5]
	uint8_t dummy_time=0x00; //Should be replaced once RTC is ready.
   86152:	2300      	movs	r3, #0
   86154:	75fb      	strb	r3, [r7, #23]
	uint32_t sender, m_type, s_type;
	
	sender = (uint32_t)SENDER_ID;
   86156:	79fb      	ldrb	r3, [r7, #7]
   86158:	613b      	str	r3, [r7, #16]
	sender = sender << 24;
   8615a:	693b      	ldr	r3, [r7, #16]
   8615c:	061b      	lsls	r3, r3, #24
   8615e:	613b      	str	r3, [r7, #16]
		
	m_type = (uint32_t)MessageType;
   86160:	79bb      	ldrb	r3, [r7, #6]
   86162:	60fb      	str	r3, [r7, #12]
	m_type = m_type << 16;
   86164:	68fb      	ldr	r3, [r7, #12]
   86166:	041b      	lsls	r3, r3, #16
   86168:	60fb      	str	r3, [r7, #12]
	
	s_type = (uint32_t)smalltype;
   8616a:	797b      	ldrb	r3, [r7, #5]
   8616c:	60bb      	str	r3, [r7, #8]
	s_type = s_type << 8;
   8616e:	68bb      	ldr	r3, [r7, #8]
   86170:	021b      	lsls	r3, r3, #8
   86172:	60bb      	str	r3, [r7, #8]
	
	return sender + m_type + s_type + dummy_time;
   86174:	693a      	ldr	r2, [r7, #16]
   86176:	68fb      	ldr	r3, [r7, #12]
   86178:	441a      	add	r2, r3
   8617a:	68bb      	ldr	r3, [r7, #8]
   8617c:	441a      	add	r2, r3
   8617e:	7dfb      	ldrb	r3, [r7, #23]
   86180:	4413      	add	r3, r2
}
   86182:	4618      	mov	r0, r3
   86184:	371c      	adds	r7, #28
   86186:	46bd      	mov	sp, r7
   86188:	f85d 7b04 	ldr.w	r7, [sp], #4
   8618c:	4770      	bx	lr
   8618e:	bf00      	nop

00086190 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   86190:	b480      	push	{r7}
   86192:	b085      	sub	sp, #20
   86194:	af00      	add	r7, sp, #0
   86196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   86198:	687b      	ldr	r3, [r7, #4]
   8619a:	f003 0307 	and.w	r3, r3, #7
   8619e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   861a0:	4b0c      	ldr	r3, [pc, #48]	; (861d4 <NVIC_SetPriorityGrouping+0x44>)
   861a2:	68db      	ldr	r3, [r3, #12]
   861a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   861a6:	68ba      	ldr	r2, [r7, #8]
   861a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   861ac:	4013      	ands	r3, r2
   861ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   861b0:	68fb      	ldr	r3, [r7, #12]
   861b2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   861b4:	68bb      	ldr	r3, [r7, #8]
   861b6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   861b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   861bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   861c0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   861c2:	4b04      	ldr	r3, [pc, #16]	; (861d4 <NVIC_SetPriorityGrouping+0x44>)
   861c4:	68ba      	ldr	r2, [r7, #8]
   861c6:	60da      	str	r2, [r3, #12]
}
   861c8:	3714      	adds	r7, #20
   861ca:	46bd      	mov	sp, r7
   861cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   861d0:	4770      	bx	lr
   861d2:	bf00      	nop
   861d4:	e000ed00 	.word	0xe000ed00

000861d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   861d8:	b480      	push	{r7}
   861da:	b083      	sub	sp, #12
   861dc:	af00      	add	r7, sp, #0
   861de:	4603      	mov	r3, r0
   861e0:	6039      	str	r1, [r7, #0]
   861e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   861e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   861e8:	2b00      	cmp	r3, #0
   861ea:	da0b      	bge.n	86204 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   861ec:	490d      	ldr	r1, [pc, #52]	; (86224 <NVIC_SetPriority+0x4c>)
   861ee:	79fb      	ldrb	r3, [r7, #7]
   861f0:	f003 030f 	and.w	r3, r3, #15
   861f4:	3b04      	subs	r3, #4
   861f6:	683a      	ldr	r2, [r7, #0]
   861f8:	b2d2      	uxtb	r2, r2
   861fa:	0112      	lsls	r2, r2, #4
   861fc:	b2d2      	uxtb	r2, r2
   861fe:	440b      	add	r3, r1
   86200:	761a      	strb	r2, [r3, #24]
   86202:	e009      	b.n	86218 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86204:	4908      	ldr	r1, [pc, #32]	; (86228 <NVIC_SetPriority+0x50>)
   86206:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8620a:	683a      	ldr	r2, [r7, #0]
   8620c:	b2d2      	uxtb	r2, r2
   8620e:	0112      	lsls	r2, r2, #4
   86210:	b2d2      	uxtb	r2, r2
   86212:	440b      	add	r3, r1
   86214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   86218:	370c      	adds	r7, #12
   8621a:	46bd      	mov	sp, r7
   8621c:	f85d 7b04 	ldr.w	r7, [sp], #4
   86220:	4770      	bx	lr
   86222:	bf00      	nop
   86224:	e000ed00 	.word	0xe000ed00
   86228:	e000e100 	.word	0xe000e100

0008622c <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   8622c:	b480      	push	{r7}
   8622e:	b083      	sub	sp, #12
   86230:	af00      	add	r7, sp, #0
   86232:	4603      	mov	r3, r0
   86234:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   86236:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8623a:	2b00      	cmp	r3, #0
   8623c:	da0a      	bge.n	86254 <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   8623e:	4a0d      	ldr	r2, [pc, #52]	; (86274 <NVIC_GetPriority+0x48>)
   86240:	79fb      	ldrb	r3, [r7, #7]
   86242:	f003 030f 	and.w	r3, r3, #15
   86246:	3b04      	subs	r3, #4
   86248:	4413      	add	r3, r2
   8624a:	7e1b      	ldrb	r3, [r3, #24]
   8624c:	b2db      	uxtb	r3, r3
   8624e:	091b      	lsrs	r3, r3, #4
   86250:	b2db      	uxtb	r3, r3
   86252:	e008      	b.n	86266 <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   86254:	4a08      	ldr	r2, [pc, #32]	; (86278 <NVIC_GetPriority+0x4c>)
   86256:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8625a:	4413      	add	r3, r2
   8625c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   86260:	b2db      	uxtb	r3, r3
   86262:	091b      	lsrs	r3, r3, #4
   86264:	b2db      	uxtb	r3, r3
}
   86266:	4618      	mov	r0, r3
   86268:	370c      	adds	r7, #12
   8626a:	46bd      	mov	sp, r7
   8626c:	f85d 7b04 	ldr.w	r7, [sp], #4
   86270:	4770      	bx	lr
   86272:	bf00      	nop
   86274:	e000ed00 	.word	0xe000ed00
   86278:	e000e100 	.word	0xe000e100

0008627c <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   8627c:	b580      	push	{r7, lr}
   8627e:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   86280:	4b0b      	ldr	r3, [pc, #44]	; (862b0 <main+0x34>)
   86282:	2200      	movs	r2, #0
   86284:	601a      	str	r2, [r3, #0]
	safe_mode();
   86286:	4b0b      	ldr	r3, [pc, #44]	; (862b4 <main+0x38>)
   86288:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   8628a:	4b0b      	ldr	r3, [pc, #44]	; (862b8 <main+0x3c>)
   8628c:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   8628e:	4b0b      	ldr	r3, [pc, #44]	; (862bc <main+0x40>)
   86290:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   86292:	4b0b      	ldr	r3, [pc, #44]	; (862c0 <main+0x44>)
   86294:	4798      	blx	r3
	
	/* Create Tasks */
	my_blink();
   86296:	4b0b      	ldr	r3, [pc, #44]	; (862c4 <main+0x48>)
   86298:	4798      	blx	r3
	housekeep();
   8629a:	4b0b      	ldr	r3, [pc, #44]	; (862c8 <main+0x4c>)
   8629c:	4798      	blx	r3
	command_loop();
   8629e:	4b0b      	ldr	r3, [pc, #44]	; (862cc <main+0x50>)
   862a0:	4798      	blx	r3
	data_test();
   862a2:	4b0b      	ldr	r3, [pc, #44]	; (862d0 <main+0x54>)
   862a4:	4798      	blx	r3
	time_update();
   862a6:	4b0b      	ldr	r3, [pc, #44]	; (862d4 <main+0x58>)
   862a8:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   862aa:	4b0b      	ldr	r3, [pc, #44]	; (862d8 <main+0x5c>)
   862ac:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   862ae:	e7fe      	b.n	862ae <main+0x32>
   862b0:	2007a6e4 	.word	0x2007a6e4
   862b4:	000862dd 	.word	0x000862dd
   862b8:	00086379 	.word	0x00086379
   862bc:	00086329 	.word	0x00086329
   862c0:	00086359 	.word	0x00086359
   862c4:	00086411 	.word	0x00086411
   862c8:	000807a5 	.word	0x000807a5
   862cc:	00080571 	.word	0x00080571
   862d0:	00080645 	.word	0x00080645
   862d4:	00080f1d 	.word	0x00080f1d
   862d8:	00084355 	.word	0x00084355

000862dc <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   862dc:	b580      	push	{r7, lr}
   862de:	b084      	sub	sp, #16
   862e0:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   862e2:	4b0b      	ldr	r3, [pc, #44]	; (86310 <safe_mode+0x34>)
   862e4:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   862e6:	2000      	movs	r0, #0
   862e8:	4b0a      	ldr	r3, [pc, #40]	; (86314 <safe_mode+0x38>)
   862ea:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   862ec:	4b0a      	ldr	r3, [pc, #40]	; (86318 <safe_mode+0x3c>)
   862ee:	4798      	blx	r3
	
	uint32_t timeOut, low, high;
	
	timeOut = 80000000;
   862f0:	4b0a      	ldr	r3, [pc, #40]	; (8631c <safe_mode+0x40>)
   862f2:	60fb      	str	r3, [r7, #12]
	
	
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   862f4:	4b0a      	ldr	r3, [pc, #40]	; (86320 <safe_mode+0x44>)
   862f6:	4798      	blx	r3
		
		
	//Debugging Stuff
	uint16_t MEM_LOCATION = 0x00080000;
   862f8:	2300      	movs	r3, #0
   862fa:	817b      	strh	r3, [r7, #10]
	size_t SIZE = 10;
   862fc:	230a      	movs	r3, #10
   862fe:	607b      	str	r3, [r7, #4]
	
	//uint32_t a;
	//a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   86300:	bf00      	nop
   86302:	4b08      	ldr	r3, [pc, #32]	; (86324 <safe_mode+0x48>)
   86304:	681b      	ldr	r3, [r3, #0]
   86306:	2b00      	cmp	r3, #0
   86308:	d1fb      	bne.n	86302 <safe_mode+0x26>
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
		*/
	}
}
   8630a:	3710      	adds	r7, #16
   8630c:	46bd      	mov	sp, r7
   8630e:	bd80      	pop	{r7, pc}
   86310:	00081965 	.word	0x00081965
   86314:	00086191 	.word	0x00086191
   86318:	000819cd 	.word	0x000819cd
   8631c:	04c4b400 	.word	0x04c4b400
   86320:	00085e1d 	.word	0x00085e1d
   86324:	2007a6e4 	.word	0x2007a6e4

00086328 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   86328:	b580      	push	{r7, lr}
   8632a:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   8632c:	4b05      	ldr	r3, [pc, #20]	; (86344 <prvSetupHardware+0x1c>)
   8632e:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   86330:	4b05      	ldr	r3, [pc, #20]	; (86348 <prvSetupHardware+0x20>)
   86332:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   86334:	4b05      	ldr	r3, [pc, #20]	; (8634c <prvSetupHardware+0x24>)
   86336:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   86338:	4b05      	ldr	r3, [pc, #20]	; (86350 <prvSetupHardware+0x28>)
   8633a:	4798      	blx	r3
	
	/* Initialize RTC registers and set the default initial time. */
	rtc_init(DS3234_INTCN);
   8633c:	2004      	movs	r0, #4
   8633e:	4b05      	ldr	r3, [pc, #20]	; (86354 <prvSetupHardware+0x2c>)
   86340:	4798      	blx	r3
}
   86342:	bd80      	pop	{r7, pc}
   86344:	00081a35 	.word	0x00081a35
   86348:	00080865 	.word	0x00080865
   8634c:	000815e5 	.word	0x000815e5
   86350:	00080ee9 	.word	0x00080ee9
   86354:	00080961 	.word	0x00080961

00086358 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   86358:	b580      	push	{r7, lr}
   8635a:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   8635c:	2001      	movs	r0, #1
   8635e:	2100      	movs	r1, #0
   86360:	2203      	movs	r2, #3
   86362:	4b03      	ldr	r3, [pc, #12]	; (86370 <prvInitializeMutexes+0x18>)
   86364:	4798      	blx	r3
   86366:	4602      	mov	r2, r0
   86368:	4b02      	ldr	r3, [pc, #8]	; (86374 <prvInitializeMutexes+0x1c>)
   8636a:	601a      	str	r2, [r3, #0]
	return;
   8636c:	bf00      	nop
}
   8636e:	bd80      	pop	{r7, pc}
   86370:	000838e1 	.word	0x000838e1
   86374:	2007a6ac 	.word	0x2007a6ac

00086378 <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   86378:	b580      	push	{r7, lr}
   8637a:	b082      	sub	sp, #8
   8637c:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   8637e:	230b      	movs	r3, #11
   86380:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   86382:	232c      	movs	r3, #44	; 0x2c
   86384:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   86386:	232b      	movs	r3, #43	; 0x2b
   86388:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   8638a:	f997 3003 	ldrsb.w	r3, [r7, #3]
   8638e:	4618      	mov	r0, r3
   86390:	6879      	ldr	r1, [r7, #4]
   86392:	4b0a      	ldr	r3, [pc, #40]	; (863bc <prvInitializeInterruptPriorities+0x44>)
   86394:	4798      	blx	r3
	
	priority = 12;	
   86396:	230c      	movs	r3, #12
   86398:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   8639a:	f997 3002 	ldrsb.w	r3, [r7, #2]
   8639e:	4618      	mov	r0, r3
   863a0:	6879      	ldr	r1, [r7, #4]
   863a2:	4b06      	ldr	r3, [pc, #24]	; (863bc <prvInitializeInterruptPriorities+0x44>)
   863a4:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   863a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
   863aa:	4618      	mov	r0, r3
   863ac:	4b04      	ldr	r3, [pc, #16]	; (863c0 <prvInitializeInterruptPriorities+0x48>)
   863ae:	4798      	blx	r3
   863b0:	6078      	str	r0, [r7, #4]
	
	return;
   863b2:	bf00      	nop
}
   863b4:	3708      	adds	r7, #8
   863b6:	46bd      	mov	sp, r7
   863b8:	bd80      	pop	{r7, pc}
   863ba:	bf00      	nop
   863bc:	000861d9 	.word	0x000861d9
   863c0:	0008622d 	.word	0x0008622d

000863c4 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   863c4:	b580      	push	{r7, lr}
   863c6:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   863c8:	4b01      	ldr	r3, [pc, #4]	; (863d0 <vApplicationMallocFailedHook+0xc>)
   863ca:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   863cc:	e7fe      	b.n	863cc <vApplicationMallocFailedHook+0x8>
   863ce:	bf00      	nop
   863d0:	00083365 	.word	0x00083365

000863d4 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   863d4:	b580      	push	{r7, lr}
   863d6:	b082      	sub	sp, #8
   863d8:	af00      	add	r7, sp, #0
   863da:	6078      	str	r0, [r7, #4]
   863dc:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   863de:	4b01      	ldr	r3, [pc, #4]	; (863e4 <vApplicationStackOverflowHook+0x10>)
   863e0:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   863e2:	e7fe      	b.n	863e2 <vApplicationStackOverflowHook+0xe>
   863e4:	00083365 	.word	0x00083365

000863e8 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   863e8:	b580      	push	{r7, lr}
   863ea:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   863ec:	4804      	ldr	r0, [pc, #16]	; (86400 <WDT_Handler+0x18>)
   863ee:	4b05      	ldr	r3, [pc, #20]	; (86404 <WDT_Handler+0x1c>)
   863f0:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   863f2:	2055      	movs	r0, #85	; 0x55
   863f4:	4b04      	ldr	r3, [pc, #16]	; (86408 <WDT_Handler+0x20>)
   863f6:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   863f8:	4801      	ldr	r0, [pc, #4]	; (86400 <WDT_Handler+0x18>)
   863fa:	4b04      	ldr	r3, [pc, #16]	; (8640c <WDT_Handler+0x24>)
   863fc:	4798      	blx	r3
}
   863fe:	bd80      	pop	{r7, pc}
   86400:	400e1a50 	.word	0x400e1a50
   86404:	00082cf5 	.word	0x00082cf5
   86408:	00082375 	.word	0x00082375
   8640c:	00082ccd 	.word	0x00082ccd

00086410 <my_blink>:

/**
 * \brief Toggles the state of the LED pin high/low.		
 */
void my_blink( void )
{		
   86410:	b590      	push	{r4, r7, lr}
   86412:	b085      	sub	sp, #20
   86414:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this file. */
		
	xTaskCreate( prvTurnOnTask,						/* The function that implements the task. */
   86416:	2301      	movs	r3, #1
   86418:	9300      	str	r3, [sp, #0]
   8641a:	2300      	movs	r3, #0
   8641c:	9301      	str	r3, [sp, #4]
   8641e:	2300      	movs	r3, #0
   86420:	9302      	str	r3, [sp, #8]
   86422:	2300      	movs	r3, #0
   86424:	9303      	str	r3, [sp, #12]
   86426:	480d      	ldr	r0, [pc, #52]	; (8645c <my_blink+0x4c>)
   86428:	490d      	ldr	r1, [pc, #52]	; (86460 <my_blink+0x50>)
   8642a:	2282      	movs	r2, #130	; 0x82
   8642c:	f241 2334 	movw	r3, #4660	; 0x1234
   86430:	4c0c      	ldr	r4, [pc, #48]	; (86464 <my_blink+0x54>)
   86432:	47a0      	blx	r4
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) TurnOn_PARAMETER, 		/* The parameter passed to the task - just to check the functionality. */
				TurnOn_TASK_PRIORITY, 				/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvTurnOffTask, 
   86434:	2301      	movs	r3, #1
   86436:	9300      	str	r3, [sp, #0]
   86438:	2300      	movs	r3, #0
   8643a:	9301      	str	r3, [sp, #4]
   8643c:	2300      	movs	r3, #0
   8643e:	9302      	str	r3, [sp, #8]
   86440:	2300      	movs	r3, #0
   86442:	9303      	str	r3, [sp, #12]
   86444:	4808      	ldr	r0, [pc, #32]	; (86468 <my_blink+0x58>)
   86446:	4909      	ldr	r1, [pc, #36]	; (8646c <my_blink+0x5c>)
   86448:	2282      	movs	r2, #130	; 0x82
   8644a:	f245 6378 	movw	r3, #22136	; 0x5678
   8644e:	4c05      	ldr	r4, [pc, #20]	; (86464 <my_blink+0x54>)
   86450:	47a0      	blx	r4
				 "OFF", 
				 configMINIMAL_STACK_SIZE, 
				 ( void * ) TurnOff_PARAMETER, 
				 TurnOn_TASK_PRIORITY, 
				 NULL );
	return;					 
   86452:	bf00      	nop
}
   86454:	3704      	adds	r7, #4
   86456:	46bd      	mov	sp, r7
   86458:	bd90      	pop	{r4, r7, pc}
   8645a:	bf00      	nop
   8645c:	00086471 	.word	0x00086471
   86460:	00086f60 	.word	0x00086f60
   86464:	000840d9 	.word	0x000840d9
   86468:	00086499 	.word	0x00086499
   8646c:	00086f64 	.word	0x00086f64

00086470 <prvTurnOnTask>:
/**
 * \brief Sets LED pin to high.
 * @param *pvParameters:	
 */
static void prvTurnOnTask( void *pvParameters )
{
   86470:	b580      	push	{r7, lr}
   86472:	b082      	sub	sp, #8
   86474:	af00      	add	r7, sp, #0
   86476:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   86478:	687a      	ldr	r2, [r7, #4]
   8647a:	f241 2334 	movw	r3, #4660	; 0x1234
   8647e:	429a      	cmp	r2, r3
   86480:	d002      	beq.n	86488 <prvTurnOnTask+0x18>
   86482:	4b03      	ldr	r3, [pc, #12]	; (86490 <prvTurnOnTask+0x20>)
   86484:	4798      	blx	r3
   86486:	e7fe      	b.n	86486 <prvTurnOnTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_high(LED0_GPIO);
   86488:	203b      	movs	r0, #59	; 0x3b
   8648a:	4b02      	ldr	r3, [pc, #8]	; (86494 <prvTurnOnTask+0x24>)
   8648c:	4798      	blx	r3
	}
   8648e:	e7fb      	b.n	86488 <prvTurnOnTask+0x18>
   86490:	00083365 	.word	0x00083365
   86494:	0008230d 	.word	0x0008230d

00086498 <prvTurnOffTask>:
/**
 * \brief Sets LED pin to low.
 * @param *pvParameters:
 */
static void prvTurnOffTask( void *pvParameters )
{
   86498:	b580      	push	{r7, lr}
   8649a:	b082      	sub	sp, #8
   8649c:	af00      	add	r7, sp, #0
   8649e:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   864a0:	687a      	ldr	r2, [r7, #4]
   864a2:	f245 6378 	movw	r3, #22136	; 0x5678
   864a6:	429a      	cmp	r2, r3
   864a8:	d002      	beq.n	864b0 <prvTurnOffTask+0x18>
   864aa:	4b03      	ldr	r3, [pc, #12]	; (864b8 <prvTurnOffTask+0x20>)
   864ac:	4798      	blx	r3
   864ae:	e7fe      	b.n	864ae <prvTurnOffTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_low(LED0_GPIO);
   864b0:	203b      	movs	r0, #59	; 0x3b
   864b2:	4b02      	ldr	r3, [pc, #8]	; (864bc <prvTurnOffTask+0x24>)
   864b4:	4798      	blx	r3
	}
   864b6:	e7fb      	b.n	864b0 <prvTurnOffTask+0x18>
   864b8:	00083365 	.word	0x00083365
   864bc:	00082341 	.word	0x00082341

000864c0 <__aeabi_frsub>:
   864c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   864c4:	e002      	b.n	864cc <__addsf3>
   864c6:	bf00      	nop

000864c8 <__aeabi_fsub>:
   864c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000864cc <__addsf3>:
   864cc:	0042      	lsls	r2, r0, #1
   864ce:	bf1f      	itttt	ne
   864d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   864d4:	ea92 0f03 	teqne	r2, r3
   864d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   864dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   864e0:	d06a      	beq.n	865b8 <__addsf3+0xec>
   864e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   864e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   864ea:	bfc1      	itttt	gt
   864ec:	18d2      	addgt	r2, r2, r3
   864ee:	4041      	eorgt	r1, r0
   864f0:	4048      	eorgt	r0, r1
   864f2:	4041      	eorgt	r1, r0
   864f4:	bfb8      	it	lt
   864f6:	425b      	neglt	r3, r3
   864f8:	2b19      	cmp	r3, #25
   864fa:	bf88      	it	hi
   864fc:	4770      	bxhi	lr
   864fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   86502:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86506:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8650a:	bf18      	it	ne
   8650c:	4240      	negne	r0, r0
   8650e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86512:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   86516:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8651a:	bf18      	it	ne
   8651c:	4249      	negne	r1, r1
   8651e:	ea92 0f03 	teq	r2, r3
   86522:	d03f      	beq.n	865a4 <__addsf3+0xd8>
   86524:	f1a2 0201 	sub.w	r2, r2, #1
   86528:	fa41 fc03 	asr.w	ip, r1, r3
   8652c:	eb10 000c 	adds.w	r0, r0, ip
   86530:	f1c3 0320 	rsb	r3, r3, #32
   86534:	fa01 f103 	lsl.w	r1, r1, r3
   86538:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8653c:	d502      	bpl.n	86544 <__addsf3+0x78>
   8653e:	4249      	negs	r1, r1
   86540:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   86544:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   86548:	d313      	bcc.n	86572 <__addsf3+0xa6>
   8654a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   8654e:	d306      	bcc.n	8655e <__addsf3+0x92>
   86550:	0840      	lsrs	r0, r0, #1
   86552:	ea4f 0131 	mov.w	r1, r1, rrx
   86556:	f102 0201 	add.w	r2, r2, #1
   8655a:	2afe      	cmp	r2, #254	; 0xfe
   8655c:	d251      	bcs.n	86602 <__addsf3+0x136>
   8655e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   86562:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86566:	bf08      	it	eq
   86568:	f020 0001 	biceq.w	r0, r0, #1
   8656c:	ea40 0003 	orr.w	r0, r0, r3
   86570:	4770      	bx	lr
   86572:	0049      	lsls	r1, r1, #1
   86574:	eb40 0000 	adc.w	r0, r0, r0
   86578:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   8657c:	f1a2 0201 	sub.w	r2, r2, #1
   86580:	d1ed      	bne.n	8655e <__addsf3+0x92>
   86582:	fab0 fc80 	clz	ip, r0
   86586:	f1ac 0c08 	sub.w	ip, ip, #8
   8658a:	ebb2 020c 	subs.w	r2, r2, ip
   8658e:	fa00 f00c 	lsl.w	r0, r0, ip
   86592:	bfaa      	itet	ge
   86594:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   86598:	4252      	neglt	r2, r2
   8659a:	4318      	orrge	r0, r3
   8659c:	bfbc      	itt	lt
   8659e:	40d0      	lsrlt	r0, r2
   865a0:	4318      	orrlt	r0, r3
   865a2:	4770      	bx	lr
   865a4:	f092 0f00 	teq	r2, #0
   865a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   865ac:	bf06      	itte	eq
   865ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   865b2:	3201      	addeq	r2, #1
   865b4:	3b01      	subne	r3, #1
   865b6:	e7b5      	b.n	86524 <__addsf3+0x58>
   865b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   865bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   865c0:	bf18      	it	ne
   865c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   865c6:	d021      	beq.n	8660c <__addsf3+0x140>
   865c8:	ea92 0f03 	teq	r2, r3
   865cc:	d004      	beq.n	865d8 <__addsf3+0x10c>
   865ce:	f092 0f00 	teq	r2, #0
   865d2:	bf08      	it	eq
   865d4:	4608      	moveq	r0, r1
   865d6:	4770      	bx	lr
   865d8:	ea90 0f01 	teq	r0, r1
   865dc:	bf1c      	itt	ne
   865de:	2000      	movne	r0, #0
   865e0:	4770      	bxne	lr
   865e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   865e6:	d104      	bne.n	865f2 <__addsf3+0x126>
   865e8:	0040      	lsls	r0, r0, #1
   865ea:	bf28      	it	cs
   865ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   865f0:	4770      	bx	lr
   865f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   865f6:	bf3c      	itt	cc
   865f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   865fc:	4770      	bxcc	lr
   865fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86602:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   86606:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8660a:	4770      	bx	lr
   8660c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   86610:	bf16      	itet	ne
   86612:	4608      	movne	r0, r1
   86614:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   86618:	4601      	movne	r1, r0
   8661a:	0242      	lsls	r2, r0, #9
   8661c:	bf06      	itte	eq
   8661e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86622:	ea90 0f01 	teqeq	r0, r1
   86626:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8662a:	4770      	bx	lr

0008662c <__aeabi_ui2f>:
   8662c:	f04f 0300 	mov.w	r3, #0
   86630:	e004      	b.n	8663c <__aeabi_i2f+0x8>
   86632:	bf00      	nop

00086634 <__aeabi_i2f>:
   86634:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   86638:	bf48      	it	mi
   8663a:	4240      	negmi	r0, r0
   8663c:	ea5f 0c00 	movs.w	ip, r0
   86640:	bf08      	it	eq
   86642:	4770      	bxeq	lr
   86644:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   86648:	4601      	mov	r1, r0
   8664a:	f04f 0000 	mov.w	r0, #0
   8664e:	e01c      	b.n	8668a <__aeabi_l2f+0x2a>

00086650 <__aeabi_ul2f>:
   86650:	ea50 0201 	orrs.w	r2, r0, r1
   86654:	bf08      	it	eq
   86656:	4770      	bxeq	lr
   86658:	f04f 0300 	mov.w	r3, #0
   8665c:	e00a      	b.n	86674 <__aeabi_l2f+0x14>
   8665e:	bf00      	nop

00086660 <__aeabi_l2f>:
   86660:	ea50 0201 	orrs.w	r2, r0, r1
   86664:	bf08      	it	eq
   86666:	4770      	bxeq	lr
   86668:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   8666c:	d502      	bpl.n	86674 <__aeabi_l2f+0x14>
   8666e:	4240      	negs	r0, r0
   86670:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86674:	ea5f 0c01 	movs.w	ip, r1
   86678:	bf02      	ittt	eq
   8667a:	4684      	moveq	ip, r0
   8667c:	4601      	moveq	r1, r0
   8667e:	2000      	moveq	r0, #0
   86680:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   86684:	bf08      	it	eq
   86686:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8668a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8668e:	fabc f28c 	clz	r2, ip
   86692:	3a08      	subs	r2, #8
   86694:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   86698:	db10      	blt.n	866bc <__aeabi_l2f+0x5c>
   8669a:	fa01 fc02 	lsl.w	ip, r1, r2
   8669e:	4463      	add	r3, ip
   866a0:	fa00 fc02 	lsl.w	ip, r0, r2
   866a4:	f1c2 0220 	rsb	r2, r2, #32
   866a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   866ac:	fa20 f202 	lsr.w	r2, r0, r2
   866b0:	eb43 0002 	adc.w	r0, r3, r2
   866b4:	bf08      	it	eq
   866b6:	f020 0001 	biceq.w	r0, r0, #1
   866ba:	4770      	bx	lr
   866bc:	f102 0220 	add.w	r2, r2, #32
   866c0:	fa01 fc02 	lsl.w	ip, r1, r2
   866c4:	f1c2 0220 	rsb	r2, r2, #32
   866c8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   866cc:	fa21 f202 	lsr.w	r2, r1, r2
   866d0:	eb43 0002 	adc.w	r0, r3, r2
   866d4:	bf08      	it	eq
   866d6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   866da:	4770      	bx	lr

000866dc <__aeabi_fmul>:
   866dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   866e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   866e4:	bf1e      	ittt	ne
   866e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   866ea:	ea92 0f0c 	teqne	r2, ip
   866ee:	ea93 0f0c 	teqne	r3, ip
   866f2:	d06f      	beq.n	867d4 <__aeabi_fmul+0xf8>
   866f4:	441a      	add	r2, r3
   866f6:	ea80 0c01 	eor.w	ip, r0, r1
   866fa:	0240      	lsls	r0, r0, #9
   866fc:	bf18      	it	ne
   866fe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86702:	d01e      	beq.n	86742 <__aeabi_fmul+0x66>
   86704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   86708:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   8670c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86710:	fba0 3101 	umull	r3, r1, r0, r1
   86714:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86718:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   8671c:	bf3e      	ittt	cc
   8671e:	0049      	lslcc	r1, r1, #1
   86720:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86724:	005b      	lslcc	r3, r3, #1
   86726:	ea40 0001 	orr.w	r0, r0, r1
   8672a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8672e:	2afd      	cmp	r2, #253	; 0xfd
   86730:	d81d      	bhi.n	8676e <__aeabi_fmul+0x92>
   86732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   86736:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8673a:	bf08      	it	eq
   8673c:	f020 0001 	biceq.w	r0, r0, #1
   86740:	4770      	bx	lr
   86742:	f090 0f00 	teq	r0, #0
   86746:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8674a:	bf08      	it	eq
   8674c:	0249      	lsleq	r1, r1, #9
   8674e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86752:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   86756:	3a7f      	subs	r2, #127	; 0x7f
   86758:	bfc2      	ittt	gt
   8675a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8675e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86762:	4770      	bxgt	lr
   86764:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86768:	f04f 0300 	mov.w	r3, #0
   8676c:	3a01      	subs	r2, #1
   8676e:	dc5d      	bgt.n	8682c <__aeabi_fmul+0x150>
   86770:	f112 0f19 	cmn.w	r2, #25
   86774:	bfdc      	itt	le
   86776:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8677a:	4770      	bxle	lr
   8677c:	f1c2 0200 	rsb	r2, r2, #0
   86780:	0041      	lsls	r1, r0, #1
   86782:	fa21 f102 	lsr.w	r1, r1, r2
   86786:	f1c2 0220 	rsb	r2, r2, #32
   8678a:	fa00 fc02 	lsl.w	ip, r0, r2
   8678e:	ea5f 0031 	movs.w	r0, r1, rrx
   86792:	f140 0000 	adc.w	r0, r0, #0
   86796:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8679a:	bf08      	it	eq
   8679c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   867a0:	4770      	bx	lr
   867a2:	f092 0f00 	teq	r2, #0
   867a6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   867aa:	bf02      	ittt	eq
   867ac:	0040      	lsleq	r0, r0, #1
   867ae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   867b2:	3a01      	subeq	r2, #1
   867b4:	d0f9      	beq.n	867aa <__aeabi_fmul+0xce>
   867b6:	ea40 000c 	orr.w	r0, r0, ip
   867ba:	f093 0f00 	teq	r3, #0
   867be:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   867c2:	bf02      	ittt	eq
   867c4:	0049      	lsleq	r1, r1, #1
   867c6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   867ca:	3b01      	subeq	r3, #1
   867cc:	d0f9      	beq.n	867c2 <__aeabi_fmul+0xe6>
   867ce:	ea41 010c 	orr.w	r1, r1, ip
   867d2:	e78f      	b.n	866f4 <__aeabi_fmul+0x18>
   867d4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   867d8:	ea92 0f0c 	teq	r2, ip
   867dc:	bf18      	it	ne
   867de:	ea93 0f0c 	teqne	r3, ip
   867e2:	d00a      	beq.n	867fa <__aeabi_fmul+0x11e>
   867e4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   867e8:	bf18      	it	ne
   867ea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   867ee:	d1d8      	bne.n	867a2 <__aeabi_fmul+0xc6>
   867f0:	ea80 0001 	eor.w	r0, r0, r1
   867f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   867f8:	4770      	bx	lr
   867fa:	f090 0f00 	teq	r0, #0
   867fe:	bf17      	itett	ne
   86800:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   86804:	4608      	moveq	r0, r1
   86806:	f091 0f00 	teqne	r1, #0
   8680a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8680e:	d014      	beq.n	8683a <__aeabi_fmul+0x15e>
   86810:	ea92 0f0c 	teq	r2, ip
   86814:	d101      	bne.n	8681a <__aeabi_fmul+0x13e>
   86816:	0242      	lsls	r2, r0, #9
   86818:	d10f      	bne.n	8683a <__aeabi_fmul+0x15e>
   8681a:	ea93 0f0c 	teq	r3, ip
   8681e:	d103      	bne.n	86828 <__aeabi_fmul+0x14c>
   86820:	024b      	lsls	r3, r1, #9
   86822:	bf18      	it	ne
   86824:	4608      	movne	r0, r1
   86826:	d108      	bne.n	8683a <__aeabi_fmul+0x15e>
   86828:	ea80 0001 	eor.w	r0, r0, r1
   8682c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86830:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86834:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86838:	4770      	bx	lr
   8683a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8683e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   86842:	4770      	bx	lr

00086844 <__aeabi_fdiv>:
   86844:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86848:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8684c:	bf1e      	ittt	ne
   8684e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86852:	ea92 0f0c 	teqne	r2, ip
   86856:	ea93 0f0c 	teqne	r3, ip
   8685a:	d069      	beq.n	86930 <__aeabi_fdiv+0xec>
   8685c:	eba2 0203 	sub.w	r2, r2, r3
   86860:	ea80 0c01 	eor.w	ip, r0, r1
   86864:	0249      	lsls	r1, r1, #9
   86866:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8686a:	d037      	beq.n	868dc <__aeabi_fdiv+0x98>
   8686c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   86870:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   86874:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   86878:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8687c:	428b      	cmp	r3, r1
   8687e:	bf38      	it	cc
   86880:	005b      	lslcc	r3, r3, #1
   86882:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   86886:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   8688a:	428b      	cmp	r3, r1
   8688c:	bf24      	itt	cs
   8688e:	1a5b      	subcs	r3, r3, r1
   86890:	ea40 000c 	orrcs.w	r0, r0, ip
   86894:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   86898:	bf24      	itt	cs
   8689a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8689e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   868a2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   868a6:	bf24      	itt	cs
   868a8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   868ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   868b0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   868b4:	bf24      	itt	cs
   868b6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   868ba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   868be:	011b      	lsls	r3, r3, #4
   868c0:	bf18      	it	ne
   868c2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   868c6:	d1e0      	bne.n	8688a <__aeabi_fdiv+0x46>
   868c8:	2afd      	cmp	r2, #253	; 0xfd
   868ca:	f63f af50 	bhi.w	8676e <__aeabi_fmul+0x92>
   868ce:	428b      	cmp	r3, r1
   868d0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   868d4:	bf08      	it	eq
   868d6:	f020 0001 	biceq.w	r0, r0, #1
   868da:	4770      	bx	lr
   868dc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   868e0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   868e4:	327f      	adds	r2, #127	; 0x7f
   868e6:	bfc2      	ittt	gt
   868e8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   868ec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   868f0:	4770      	bxgt	lr
   868f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   868f6:	f04f 0300 	mov.w	r3, #0
   868fa:	3a01      	subs	r2, #1
   868fc:	e737      	b.n	8676e <__aeabi_fmul+0x92>
   868fe:	f092 0f00 	teq	r2, #0
   86902:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86906:	bf02      	ittt	eq
   86908:	0040      	lsleq	r0, r0, #1
   8690a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8690e:	3a01      	subeq	r2, #1
   86910:	d0f9      	beq.n	86906 <__aeabi_fdiv+0xc2>
   86912:	ea40 000c 	orr.w	r0, r0, ip
   86916:	f093 0f00 	teq	r3, #0
   8691a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8691e:	bf02      	ittt	eq
   86920:	0049      	lsleq	r1, r1, #1
   86922:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86926:	3b01      	subeq	r3, #1
   86928:	d0f9      	beq.n	8691e <__aeabi_fdiv+0xda>
   8692a:	ea41 010c 	orr.w	r1, r1, ip
   8692e:	e795      	b.n	8685c <__aeabi_fdiv+0x18>
   86930:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86934:	ea92 0f0c 	teq	r2, ip
   86938:	d108      	bne.n	8694c <__aeabi_fdiv+0x108>
   8693a:	0242      	lsls	r2, r0, #9
   8693c:	f47f af7d 	bne.w	8683a <__aeabi_fmul+0x15e>
   86940:	ea93 0f0c 	teq	r3, ip
   86944:	f47f af70 	bne.w	86828 <__aeabi_fmul+0x14c>
   86948:	4608      	mov	r0, r1
   8694a:	e776      	b.n	8683a <__aeabi_fmul+0x15e>
   8694c:	ea93 0f0c 	teq	r3, ip
   86950:	d104      	bne.n	8695c <__aeabi_fdiv+0x118>
   86952:	024b      	lsls	r3, r1, #9
   86954:	f43f af4c 	beq.w	867f0 <__aeabi_fmul+0x114>
   86958:	4608      	mov	r0, r1
   8695a:	e76e      	b.n	8683a <__aeabi_fmul+0x15e>
   8695c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86960:	bf18      	it	ne
   86962:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86966:	d1ca      	bne.n	868fe <__aeabi_fdiv+0xba>
   86968:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   8696c:	f47f af5c 	bne.w	86828 <__aeabi_fmul+0x14c>
   86970:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   86974:	f47f af3c 	bne.w	867f0 <__aeabi_fmul+0x114>
   86978:	e75f      	b.n	8683a <__aeabi_fmul+0x15e>
   8697a:	bf00      	nop

0008697c <__gesf2>:
   8697c:	f04f 3cff 	mov.w	ip, #4294967295
   86980:	e006      	b.n	86990 <__cmpsf2+0x4>
   86982:	bf00      	nop

00086984 <__lesf2>:
   86984:	f04f 0c01 	mov.w	ip, #1
   86988:	e002      	b.n	86990 <__cmpsf2+0x4>
   8698a:	bf00      	nop

0008698c <__cmpsf2>:
   8698c:	f04f 0c01 	mov.w	ip, #1
   86990:	f84d cd04 	str.w	ip, [sp, #-4]!
   86994:	ea4f 0240 	mov.w	r2, r0, lsl #1
   86998:	ea4f 0341 	mov.w	r3, r1, lsl #1
   8699c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   869a0:	bf18      	it	ne
   869a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   869a6:	d011      	beq.n	869cc <__cmpsf2+0x40>
   869a8:	b001      	add	sp, #4
   869aa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   869ae:	bf18      	it	ne
   869b0:	ea90 0f01 	teqne	r0, r1
   869b4:	bf58      	it	pl
   869b6:	ebb2 0003 	subspl.w	r0, r2, r3
   869ba:	bf88      	it	hi
   869bc:	17c8      	asrhi	r0, r1, #31
   869be:	bf38      	it	cc
   869c0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   869c4:	bf18      	it	ne
   869c6:	f040 0001 	orrne.w	r0, r0, #1
   869ca:	4770      	bx	lr
   869cc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   869d0:	d102      	bne.n	869d8 <__cmpsf2+0x4c>
   869d2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   869d6:	d105      	bne.n	869e4 <__cmpsf2+0x58>
   869d8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   869dc:	d1e4      	bne.n	869a8 <__cmpsf2+0x1c>
   869de:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   869e2:	d0e1      	beq.n	869a8 <__cmpsf2+0x1c>
   869e4:	f85d 0b04 	ldr.w	r0, [sp], #4
   869e8:	4770      	bx	lr
   869ea:	bf00      	nop

000869ec <__aeabi_cfrcmple>:
   869ec:	4684      	mov	ip, r0
   869ee:	4608      	mov	r0, r1
   869f0:	4661      	mov	r1, ip
   869f2:	e7ff      	b.n	869f4 <__aeabi_cfcmpeq>

000869f4 <__aeabi_cfcmpeq>:
   869f4:	b50f      	push	{r0, r1, r2, r3, lr}
   869f6:	f7ff ffc9 	bl	8698c <__cmpsf2>
   869fa:	2800      	cmp	r0, #0
   869fc:	bf48      	it	mi
   869fe:	f110 0f00 	cmnmi.w	r0, #0
   86a02:	bd0f      	pop	{r0, r1, r2, r3, pc}

00086a04 <__aeabi_fcmpeq>:
   86a04:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a08:	f7ff fff4 	bl	869f4 <__aeabi_cfcmpeq>
   86a0c:	bf0c      	ite	eq
   86a0e:	2001      	moveq	r0, #1
   86a10:	2000      	movne	r0, #0
   86a12:	f85d fb08 	ldr.w	pc, [sp], #8
   86a16:	bf00      	nop

00086a18 <__aeabi_fcmplt>:
   86a18:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a1c:	f7ff ffea 	bl	869f4 <__aeabi_cfcmpeq>
   86a20:	bf34      	ite	cc
   86a22:	2001      	movcc	r0, #1
   86a24:	2000      	movcs	r0, #0
   86a26:	f85d fb08 	ldr.w	pc, [sp], #8
   86a2a:	bf00      	nop

00086a2c <__aeabi_fcmple>:
   86a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a30:	f7ff ffe0 	bl	869f4 <__aeabi_cfcmpeq>
   86a34:	bf94      	ite	ls
   86a36:	2001      	movls	r0, #1
   86a38:	2000      	movhi	r0, #0
   86a3a:	f85d fb08 	ldr.w	pc, [sp], #8
   86a3e:	bf00      	nop

00086a40 <__aeabi_fcmpge>:
   86a40:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a44:	f7ff ffd2 	bl	869ec <__aeabi_cfrcmple>
   86a48:	bf94      	ite	ls
   86a4a:	2001      	movls	r0, #1
   86a4c:	2000      	movhi	r0, #0
   86a4e:	f85d fb08 	ldr.w	pc, [sp], #8
   86a52:	bf00      	nop

00086a54 <__aeabi_fcmpgt>:
   86a54:	f84d ed08 	str.w	lr, [sp, #-8]!
   86a58:	f7ff ffc8 	bl	869ec <__aeabi_cfrcmple>
   86a5c:	bf34      	ite	cc
   86a5e:	2001      	movcc	r0, #1
   86a60:	2000      	movcs	r0, #0
   86a62:	f85d fb08 	ldr.w	pc, [sp], #8
   86a66:	bf00      	nop

00086a68 <__aeabi_f2uiz>:
   86a68:	0042      	lsls	r2, r0, #1
   86a6a:	d20e      	bcs.n	86a8a <__aeabi_f2uiz+0x22>
   86a6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   86a70:	d30b      	bcc.n	86a8a <__aeabi_f2uiz+0x22>
   86a72:	f04f 039e 	mov.w	r3, #158	; 0x9e
   86a76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   86a7a:	d409      	bmi.n	86a90 <__aeabi_f2uiz+0x28>
   86a7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   86a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86a84:	fa23 f002 	lsr.w	r0, r3, r2
   86a88:	4770      	bx	lr
   86a8a:	f04f 0000 	mov.w	r0, #0
   86a8e:	4770      	bx	lr
   86a90:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86a94:	d101      	bne.n	86a9a <__aeabi_f2uiz+0x32>
   86a96:	0242      	lsls	r2, r0, #9
   86a98:	d102      	bne.n	86aa0 <__aeabi_f2uiz+0x38>
   86a9a:	f04f 30ff 	mov.w	r0, #4294967295
   86a9e:	4770      	bx	lr
   86aa0:	f04f 0000 	mov.w	r0, #0
   86aa4:	4770      	bx	lr
   86aa6:	bf00      	nop

00086aa8 <__libc_init_array>:
   86aa8:	b570      	push	{r4, r5, r6, lr}
   86aaa:	4e0f      	ldr	r6, [pc, #60]	; (86ae8 <__libc_init_array+0x40>)
   86aac:	4d0f      	ldr	r5, [pc, #60]	; (86aec <__libc_init_array+0x44>)
   86aae:	1b76      	subs	r6, r6, r5
   86ab0:	10b6      	asrs	r6, r6, #2
   86ab2:	d007      	beq.n	86ac4 <__libc_init_array+0x1c>
   86ab4:	3d04      	subs	r5, #4
   86ab6:	2400      	movs	r4, #0
   86ab8:	3401      	adds	r4, #1
   86aba:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86abe:	4798      	blx	r3
   86ac0:	42a6      	cmp	r6, r4
   86ac2:	d1f9      	bne.n	86ab8 <__libc_init_array+0x10>
   86ac4:	4e0a      	ldr	r6, [pc, #40]	; (86af0 <__libc_init_array+0x48>)
   86ac6:	4d0b      	ldr	r5, [pc, #44]	; (86af4 <__libc_init_array+0x4c>)
   86ac8:	f000 fa52 	bl	86f70 <_init>
   86acc:	1b76      	subs	r6, r6, r5
   86ace:	10b6      	asrs	r6, r6, #2
   86ad0:	d008      	beq.n	86ae4 <__libc_init_array+0x3c>
   86ad2:	3d04      	subs	r5, #4
   86ad4:	2400      	movs	r4, #0
   86ad6:	3401      	adds	r4, #1
   86ad8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86adc:	4798      	blx	r3
   86ade:	42a6      	cmp	r6, r4
   86ae0:	d1f9      	bne.n	86ad6 <__libc_init_array+0x2e>
   86ae2:	bd70      	pop	{r4, r5, r6, pc}
   86ae4:	bd70      	pop	{r4, r5, r6, pc}
   86ae6:	bf00      	nop
   86ae8:	00086f7c 	.word	0x00086f7c
   86aec:	00086f7c 	.word	0x00086f7c
   86af0:	00086f84 	.word	0x00086f84
   86af4:	00086f7c 	.word	0x00086f7c

00086af8 <memcmp>:
   86af8:	2a03      	cmp	r2, #3
   86afa:	b470      	push	{r4, r5, r6}
   86afc:	d928      	bls.n	86b50 <memcmp+0x58>
   86afe:	ea40 0301 	orr.w	r3, r0, r1
   86b02:	079b      	lsls	r3, r3, #30
   86b04:	d013      	beq.n	86b2e <memcmp+0x36>
   86b06:	7805      	ldrb	r5, [r0, #0]
   86b08:	780c      	ldrb	r4, [r1, #0]
   86b0a:	42a5      	cmp	r5, r4
   86b0c:	d124      	bne.n	86b58 <memcmp+0x60>
   86b0e:	3a01      	subs	r2, #1
   86b10:	2300      	movs	r3, #0
   86b12:	e005      	b.n	86b20 <memcmp+0x28>
   86b14:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   86b18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   86b1c:	42a5      	cmp	r5, r4
   86b1e:	d11b      	bne.n	86b58 <memcmp+0x60>
   86b20:	4293      	cmp	r3, r2
   86b22:	f103 0301 	add.w	r3, r3, #1
   86b26:	d1f5      	bne.n	86b14 <memcmp+0x1c>
   86b28:	2000      	movs	r0, #0
   86b2a:	bc70      	pop	{r4, r5, r6}
   86b2c:	4770      	bx	lr
   86b2e:	460c      	mov	r4, r1
   86b30:	4603      	mov	r3, r0
   86b32:	6825      	ldr	r5, [r4, #0]
   86b34:	681e      	ldr	r6, [r3, #0]
   86b36:	4621      	mov	r1, r4
   86b38:	42ae      	cmp	r6, r5
   86b3a:	4618      	mov	r0, r3
   86b3c:	f104 0404 	add.w	r4, r4, #4
   86b40:	f103 0304 	add.w	r3, r3, #4
   86b44:	d104      	bne.n	86b50 <memcmp+0x58>
   86b46:	3a04      	subs	r2, #4
   86b48:	2a03      	cmp	r2, #3
   86b4a:	4618      	mov	r0, r3
   86b4c:	4621      	mov	r1, r4
   86b4e:	d8f0      	bhi.n	86b32 <memcmp+0x3a>
   86b50:	2a00      	cmp	r2, #0
   86b52:	d1d8      	bne.n	86b06 <memcmp+0xe>
   86b54:	4610      	mov	r0, r2
   86b56:	e7e8      	b.n	86b2a <memcmp+0x32>
   86b58:	1b28      	subs	r0, r5, r4
   86b5a:	bc70      	pop	{r4, r5, r6}
   86b5c:	4770      	bx	lr
   86b5e:	bf00      	nop

00086b60 <memcpy>:
   86b60:	4684      	mov	ip, r0
   86b62:	ea41 0300 	orr.w	r3, r1, r0
   86b66:	f013 0303 	ands.w	r3, r3, #3
   86b6a:	d149      	bne.n	86c00 <memcpy+0xa0>
   86b6c:	3a40      	subs	r2, #64	; 0x40
   86b6e:	d323      	bcc.n	86bb8 <memcpy+0x58>
   86b70:	680b      	ldr	r3, [r1, #0]
   86b72:	6003      	str	r3, [r0, #0]
   86b74:	684b      	ldr	r3, [r1, #4]
   86b76:	6043      	str	r3, [r0, #4]
   86b78:	688b      	ldr	r3, [r1, #8]
   86b7a:	6083      	str	r3, [r0, #8]
   86b7c:	68cb      	ldr	r3, [r1, #12]
   86b7e:	60c3      	str	r3, [r0, #12]
   86b80:	690b      	ldr	r3, [r1, #16]
   86b82:	6103      	str	r3, [r0, #16]
   86b84:	694b      	ldr	r3, [r1, #20]
   86b86:	6143      	str	r3, [r0, #20]
   86b88:	698b      	ldr	r3, [r1, #24]
   86b8a:	6183      	str	r3, [r0, #24]
   86b8c:	69cb      	ldr	r3, [r1, #28]
   86b8e:	61c3      	str	r3, [r0, #28]
   86b90:	6a0b      	ldr	r3, [r1, #32]
   86b92:	6203      	str	r3, [r0, #32]
   86b94:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86b96:	6243      	str	r3, [r0, #36]	; 0x24
   86b98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86b9a:	6283      	str	r3, [r0, #40]	; 0x28
   86b9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86b9e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86ba0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86ba2:	6303      	str	r3, [r0, #48]	; 0x30
   86ba4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86ba6:	6343      	str	r3, [r0, #52]	; 0x34
   86ba8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86baa:	6383      	str	r3, [r0, #56]	; 0x38
   86bac:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86bae:	63c3      	str	r3, [r0, #60]	; 0x3c
   86bb0:	3040      	adds	r0, #64	; 0x40
   86bb2:	3140      	adds	r1, #64	; 0x40
   86bb4:	3a40      	subs	r2, #64	; 0x40
   86bb6:	d2db      	bcs.n	86b70 <memcpy+0x10>
   86bb8:	3230      	adds	r2, #48	; 0x30
   86bba:	d30b      	bcc.n	86bd4 <memcpy+0x74>
   86bbc:	680b      	ldr	r3, [r1, #0]
   86bbe:	6003      	str	r3, [r0, #0]
   86bc0:	684b      	ldr	r3, [r1, #4]
   86bc2:	6043      	str	r3, [r0, #4]
   86bc4:	688b      	ldr	r3, [r1, #8]
   86bc6:	6083      	str	r3, [r0, #8]
   86bc8:	68cb      	ldr	r3, [r1, #12]
   86bca:	60c3      	str	r3, [r0, #12]
   86bcc:	3010      	adds	r0, #16
   86bce:	3110      	adds	r1, #16
   86bd0:	3a10      	subs	r2, #16
   86bd2:	d2f3      	bcs.n	86bbc <memcpy+0x5c>
   86bd4:	320c      	adds	r2, #12
   86bd6:	d305      	bcc.n	86be4 <memcpy+0x84>
   86bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   86bdc:	f840 3b04 	str.w	r3, [r0], #4
   86be0:	3a04      	subs	r2, #4
   86be2:	d2f9      	bcs.n	86bd8 <memcpy+0x78>
   86be4:	3204      	adds	r2, #4
   86be6:	d008      	beq.n	86bfa <memcpy+0x9a>
   86be8:	07d2      	lsls	r2, r2, #31
   86bea:	bf1c      	itt	ne
   86bec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86bf0:	f800 3b01 	strbne.w	r3, [r0], #1
   86bf4:	d301      	bcc.n	86bfa <memcpy+0x9a>
   86bf6:	880b      	ldrh	r3, [r1, #0]
   86bf8:	8003      	strh	r3, [r0, #0]
   86bfa:	4660      	mov	r0, ip
   86bfc:	4770      	bx	lr
   86bfe:	bf00      	nop
   86c00:	2a08      	cmp	r2, #8
   86c02:	d313      	bcc.n	86c2c <memcpy+0xcc>
   86c04:	078b      	lsls	r3, r1, #30
   86c06:	d0b1      	beq.n	86b6c <memcpy+0xc>
   86c08:	f010 0303 	ands.w	r3, r0, #3
   86c0c:	d0ae      	beq.n	86b6c <memcpy+0xc>
   86c0e:	f1c3 0304 	rsb	r3, r3, #4
   86c12:	1ad2      	subs	r2, r2, r3
   86c14:	07db      	lsls	r3, r3, #31
   86c16:	bf1c      	itt	ne
   86c18:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86c1c:	f800 3b01 	strbne.w	r3, [r0], #1
   86c20:	d3a4      	bcc.n	86b6c <memcpy+0xc>
   86c22:	f831 3b02 	ldrh.w	r3, [r1], #2
   86c26:	f820 3b02 	strh.w	r3, [r0], #2
   86c2a:	e79f      	b.n	86b6c <memcpy+0xc>
   86c2c:	3a04      	subs	r2, #4
   86c2e:	d3d9      	bcc.n	86be4 <memcpy+0x84>
   86c30:	3a01      	subs	r2, #1
   86c32:	f811 3b01 	ldrb.w	r3, [r1], #1
   86c36:	f800 3b01 	strb.w	r3, [r0], #1
   86c3a:	d2f9      	bcs.n	86c30 <memcpy+0xd0>
   86c3c:	780b      	ldrb	r3, [r1, #0]
   86c3e:	7003      	strb	r3, [r0, #0]
   86c40:	784b      	ldrb	r3, [r1, #1]
   86c42:	7043      	strb	r3, [r0, #1]
   86c44:	788b      	ldrb	r3, [r1, #2]
   86c46:	7083      	strb	r3, [r0, #2]
   86c48:	4660      	mov	r0, ip
   86c4a:	4770      	bx	lr

00086c4c <memset>:
   86c4c:	b4f0      	push	{r4, r5, r6, r7}
   86c4e:	0784      	lsls	r4, r0, #30
   86c50:	d043      	beq.n	86cda <memset+0x8e>
   86c52:	1e54      	subs	r4, r2, #1
   86c54:	2a00      	cmp	r2, #0
   86c56:	d03e      	beq.n	86cd6 <memset+0x8a>
   86c58:	b2cd      	uxtb	r5, r1
   86c5a:	4603      	mov	r3, r0
   86c5c:	e003      	b.n	86c66 <memset+0x1a>
   86c5e:	1e62      	subs	r2, r4, #1
   86c60:	2c00      	cmp	r4, #0
   86c62:	d038      	beq.n	86cd6 <memset+0x8a>
   86c64:	4614      	mov	r4, r2
   86c66:	f803 5b01 	strb.w	r5, [r3], #1
   86c6a:	079a      	lsls	r2, r3, #30
   86c6c:	d1f7      	bne.n	86c5e <memset+0x12>
   86c6e:	2c03      	cmp	r4, #3
   86c70:	d92a      	bls.n	86cc8 <memset+0x7c>
   86c72:	b2cd      	uxtb	r5, r1
   86c74:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86c78:	2c0f      	cmp	r4, #15
   86c7a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86c7e:	d915      	bls.n	86cac <memset+0x60>
   86c80:	f1a4 0710 	sub.w	r7, r4, #16
   86c84:	093f      	lsrs	r7, r7, #4
   86c86:	f103 0610 	add.w	r6, r3, #16
   86c8a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   86c8e:	461a      	mov	r2, r3
   86c90:	6015      	str	r5, [r2, #0]
   86c92:	6055      	str	r5, [r2, #4]
   86c94:	6095      	str	r5, [r2, #8]
   86c96:	60d5      	str	r5, [r2, #12]
   86c98:	3210      	adds	r2, #16
   86c9a:	42b2      	cmp	r2, r6
   86c9c:	d1f8      	bne.n	86c90 <memset+0x44>
   86c9e:	f004 040f 	and.w	r4, r4, #15
   86ca2:	3701      	adds	r7, #1
   86ca4:	2c03      	cmp	r4, #3
   86ca6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   86caa:	d90d      	bls.n	86cc8 <memset+0x7c>
   86cac:	461e      	mov	r6, r3
   86cae:	4622      	mov	r2, r4
   86cb0:	3a04      	subs	r2, #4
   86cb2:	2a03      	cmp	r2, #3
   86cb4:	f846 5b04 	str.w	r5, [r6], #4
   86cb8:	d8fa      	bhi.n	86cb0 <memset+0x64>
   86cba:	1f22      	subs	r2, r4, #4
   86cbc:	f022 0203 	bic.w	r2, r2, #3
   86cc0:	3204      	adds	r2, #4
   86cc2:	4413      	add	r3, r2
   86cc4:	f004 0403 	and.w	r4, r4, #3
   86cc8:	b12c      	cbz	r4, 86cd6 <memset+0x8a>
   86cca:	b2c9      	uxtb	r1, r1
   86ccc:	441c      	add	r4, r3
   86cce:	f803 1b01 	strb.w	r1, [r3], #1
   86cd2:	42a3      	cmp	r3, r4
   86cd4:	d1fb      	bne.n	86cce <memset+0x82>
   86cd6:	bcf0      	pop	{r4, r5, r6, r7}
   86cd8:	4770      	bx	lr
   86cda:	4614      	mov	r4, r2
   86cdc:	4603      	mov	r3, r0
   86cde:	e7c6      	b.n	86c6e <memset+0x22>

00086ce0 <register_fini>:
   86ce0:	4b02      	ldr	r3, [pc, #8]	; (86cec <register_fini+0xc>)
   86ce2:	b113      	cbz	r3, 86cea <register_fini+0xa>
   86ce4:	4802      	ldr	r0, [pc, #8]	; (86cf0 <register_fini+0x10>)
   86ce6:	f000 b805 	b.w	86cf4 <atexit>
   86cea:	4770      	bx	lr
   86cec:	00000000 	.word	0x00000000
   86cf0:	00086d01 	.word	0x00086d01

00086cf4 <atexit>:
   86cf4:	4601      	mov	r1, r0
   86cf6:	2000      	movs	r0, #0
   86cf8:	4602      	mov	r2, r0
   86cfa:	4603      	mov	r3, r0
   86cfc:	f000 b818 	b.w	86d30 <__register_exitproc>

00086d00 <__libc_fini_array>:
   86d00:	b538      	push	{r3, r4, r5, lr}
   86d02:	4d09      	ldr	r5, [pc, #36]	; (86d28 <__libc_fini_array+0x28>)
   86d04:	4c09      	ldr	r4, [pc, #36]	; (86d2c <__libc_fini_array+0x2c>)
   86d06:	1b64      	subs	r4, r4, r5
   86d08:	10a4      	asrs	r4, r4, #2
   86d0a:	bf18      	it	ne
   86d0c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   86d10:	d005      	beq.n	86d1e <__libc_fini_array+0x1e>
   86d12:	3c01      	subs	r4, #1
   86d14:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   86d18:	4798      	blx	r3
   86d1a:	2c00      	cmp	r4, #0
   86d1c:	d1f9      	bne.n	86d12 <__libc_fini_array+0x12>
   86d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86d22:	f000 b92f 	b.w	86f84 <_fini>
   86d26:	bf00      	nop
   86d28:	00086f90 	.word	0x00086f90
   86d2c:	00086f94 	.word	0x00086f94

00086d30 <__register_exitproc>:
   86d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   86d32:	4c27      	ldr	r4, [pc, #156]	; (86dd0 <__register_exitproc+0xa0>)
   86d34:	b085      	sub	sp, #20
   86d36:	6826      	ldr	r6, [r4, #0]
   86d38:	4607      	mov	r7, r0
   86d3a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   86d3e:	2c00      	cmp	r4, #0
   86d40:	d040      	beq.n	86dc4 <__register_exitproc+0x94>
   86d42:	6865      	ldr	r5, [r4, #4]
   86d44:	2d1f      	cmp	r5, #31
   86d46:	dd1e      	ble.n	86d86 <__register_exitproc+0x56>
   86d48:	4822      	ldr	r0, [pc, #136]	; (86dd4 <__register_exitproc+0xa4>)
   86d4a:	b918      	cbnz	r0, 86d54 <__register_exitproc+0x24>
   86d4c:	f04f 30ff 	mov.w	r0, #4294967295
   86d50:	b005      	add	sp, #20
   86d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86d54:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86d58:	9103      	str	r1, [sp, #12]
   86d5a:	9202      	str	r2, [sp, #8]
   86d5c:	9301      	str	r3, [sp, #4]
   86d5e:	f3af 8000 	nop.w
   86d62:	9903      	ldr	r1, [sp, #12]
   86d64:	4604      	mov	r4, r0
   86d66:	9a02      	ldr	r2, [sp, #8]
   86d68:	9b01      	ldr	r3, [sp, #4]
   86d6a:	2800      	cmp	r0, #0
   86d6c:	d0ee      	beq.n	86d4c <__register_exitproc+0x1c>
   86d6e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   86d72:	2000      	movs	r0, #0
   86d74:	6025      	str	r5, [r4, #0]
   86d76:	6060      	str	r0, [r4, #4]
   86d78:	4605      	mov	r5, r0
   86d7a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86d7e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86d82:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86d86:	b93f      	cbnz	r7, 86d98 <__register_exitproc+0x68>
   86d88:	1c6b      	adds	r3, r5, #1
   86d8a:	2000      	movs	r0, #0
   86d8c:	3502      	adds	r5, #2
   86d8e:	6063      	str	r3, [r4, #4]
   86d90:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86d94:	b005      	add	sp, #20
   86d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86d98:	2601      	movs	r6, #1
   86d9a:	40ae      	lsls	r6, r5
   86d9c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86da0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86da4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86da8:	2f02      	cmp	r7, #2
   86daa:	ea42 0206 	orr.w	r2, r2, r6
   86dae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86db2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   86db6:	d1e7      	bne.n	86d88 <__register_exitproc+0x58>
   86db8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86dbc:	431e      	orrs	r6, r3
   86dbe:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86dc2:	e7e1      	b.n	86d88 <__register_exitproc+0x58>
   86dc4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86dc8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86dcc:	e7b9      	b.n	86d42 <__register_exitproc+0x12>
   86dce:	bf00      	nop
   86dd0:	00086f6c 	.word	0x00086f6c
   86dd4:	00000000 	.word	0x00000000
   86dd8:	00004e4f 	.word	0x00004e4f
   86ddc:	00004e4f 	.word	0x00004e4f
   86de0:	00004e4f 	.word	0x00004e4f

00086de4 <ulLED>:
   86de4:	00000057 00000056 0000003b 00000055     W...V...;...U...
   86df4:	00004e4f 00006b68 6d612069 64617320     ON..hk..i am sad
   86e04:	00000000 0067736d 59530d0a 4d455453     ....msg...SYSTEM
   86e14:	52412053 4f4e2045 414e494d 53202c4c     S ARE NOMINAL, S
   86e24:	0a2e5249 0000000d 55530d0a 53595342     IR........SUBSYS
   86e34:	204d4554 504d4554 54415245 20455255     TEM TEMPERATURE 
   86e44:	00205349 0d0a4320 00000000 4f440d0a     IS . C........DO
   86e54:	554f5920 4e415720 20412054 43534942      YOU WANT A BISC
   86e64:	3f544955 00000d0a 20410d0a 5353454d     UIT?......A MESS
   86e74:	20454741 20534157 45434552 44455649     AGE WAS RECEIVED
   86e84:	4f524620 4f43204d 203a534d 00000000      FROM COMS: ....
   86e94:	00000d0a 0001c200 000000c0 00000800     ................
	...
   86eb0:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   86ec0:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00086ed0 <can_bit_time>:
   86ed0:	02020308 02094b03 43020303 0303030a     .....K.....C....
   86ee0:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86ef0:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   86f00:	05050510 06114504 47040505 06060512     .....E.....G....
   86f10:	06134304 44040606 06060714 08154604     .C.....D.....F..
   86f20:	47040606 07070716 08174404 46040708     ...G.....D.....F
   86f30:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   86f40:	00000000                                ....

00086f44 <ucExpectedStackBytes.5295>:
   86f44:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   86f54:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   86f64:	0046464f 00000043                       OFF.C...

00086f6c <_global_impure_ptr>:
   86f6c:	20070010                                ... 

00086f70 <_init>:
   86f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86f72:	bf00      	nop
   86f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86f76:	bc08      	pop	{r3}
   86f78:	469e      	mov	lr, r3
   86f7a:	4770      	bx	lr

00086f7c <__init_array_start>:
   86f7c:	00086ce1 	.word	0x00086ce1

00086f80 <__frame_dummy_init_array_entry>:
   86f80:	00080119                                ....

00086f84 <_fini>:
   86f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86f86:	bf00      	nop
   86f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86f8a:	bc08      	pop	{r3}
   86f8c:	469e      	mov	lr, r3
   86f8e:	4770      	bx	lr

00086f90 <__fini_array_start>:
   86f90:	000800f5 	.word	0x000800f5
