
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a3c  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00086a3c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a33c  20070438  00086e74  00010438  2**2
                  ALLOC
  3 .stack        00002004  2007a774  000911b0  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000ec32  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ba5  00000000  00000000  0001f0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000060ac  00000000  00000000  00021c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001100  00000000  00000000  00027d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f40  00000000  00000000  00028e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b278  00000000  00000000  00029d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015b01  00000000  00000000  00044ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00067e46  00000000  00000000  0005aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003708  00000000  00000000  000c2940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c778 	.word	0x2007c778
   80004:	00082889 	.word	0x00082889
   80008:	00082881 	.word	0x00082881
   8000c:	00082881 	.word	0x00082881
   80010:	00082881 	.word	0x00082881
   80014:	00082881 	.word	0x00082881
   80018:	00082881 	.word	0x00082881
	...
   8002c:	00082d31 	.word	0x00082d31
   80030:	00082881 	.word	0x00082881
   80034:	00000000 	.word	0x00000000
   80038:	00082ef5 	.word	0x00082ef5
   8003c:	00082f39 	.word	0x00082f39
   80040:	00082881 	.word	0x00082881
   80044:	00082881 	.word	0x00082881
   80048:	00082881 	.word	0x00082881
   8004c:	00082881 	.word	0x00082881
   80050:	00085b71 	.word	0x00085b71
   80054:	00082881 	.word	0x00082881
   80058:	00082881 	.word	0x00082881
   8005c:	00082881 	.word	0x00082881
   80060:	00082881 	.word	0x00082881
   80064:	00082881 	.word	0x00082881
   80068:	00000000 	.word	0x00000000
   8006c:	00082209 	.word	0x00082209
   80070:	00082221 	.word	0x00082221
   80074:	00082239 	.word	0x00082239
   80078:	00082251 	.word	0x00082251
	...
   80084:	00080b75 	.word	0x00080b75
   80088:	00082881 	.word	0x00082881
   8008c:	00082881 	.word	0x00082881
   80090:	00082881 	.word	0x00082881
   80094:	00082881 	.word	0x00082881
   80098:	00082881 	.word	0x00082881
   8009c:	00082881 	.word	0x00082881
   800a0:	00080905 	.word	0x00080905
   800a4:	00000000 	.word	0x00000000
   800a8:	00082881 	.word	0x00082881
   800ac:	00082881 	.word	0x00082881
   800b0:	00082881 	.word	0x00082881
   800b4:	00082881 	.word	0x00082881
   800b8:	00082881 	.word	0x00082881
   800bc:	00082881 	.word	0x00082881
   800c0:	00082881 	.word	0x00082881
   800c4:	00082881 	.word	0x00082881
   800c8:	00082881 	.word	0x00082881
   800cc:	00082881 	.word	0x00082881
   800d0:	00082881 	.word	0x00082881
   800d4:	00082881 	.word	0x00082881
   800d8:	00082881 	.word	0x00082881
   800dc:	00082881 	.word	0x00082881
   800e0:	00082881 	.word	0x00082881
   800e4:	00082881 	.word	0x00082881
   800e8:	00082881 	.word	0x00082881
   800ec:	00085281 	.word	0x00085281
   800f0:	000851dd 	.word	0x000851dd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00086a3c 	.word	0x00086a3c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086a3c 	.word	0x00086a3c
   8013c:	2007043c 	.word	0x2007043c
   80140:	00086a3c 	.word	0x00086a3c
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	000824d5 	.word	0x000824d5

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   801e0:	b580      	push	{r7, lr}
   801e2:	b086      	sub	sp, #24
   801e4:	af00      	add	r7, sp, #0
   801e6:	60f8      	str	r0, [r7, #12]
   801e8:	60b9      	str	r1, [r7, #8]
   801ea:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   801ec:	f643 2398 	movw	r3, #15000	; 0x3a98
   801f0:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   801f2:	e006      	b.n	80202 <spi_read+0x22>
		if (!timeout--) {
   801f4:	697b      	ldr	r3, [r7, #20]
   801f6:	1e5a      	subs	r2, r3, #1
   801f8:	617a      	str	r2, [r7, #20]
   801fa:	2b00      	cmp	r3, #0
   801fc:	d101      	bne.n	80202 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   801fe:	2301      	movs	r3, #1
   80200:	e01d      	b.n	8023e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80202:	68fb      	ldr	r3, [r7, #12]
   80204:	691b      	ldr	r3, [r3, #16]
   80206:	f003 0301 	and.w	r3, r3, #1
   8020a:	2b00      	cmp	r3, #0
   8020c:	d0f2      	beq.n	801f4 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8020e:	68fb      	ldr	r3, [r7, #12]
   80210:	689a      	ldr	r2, [r3, #8]
   80212:	4b0d      	ldr	r3, [pc, #52]	; (80248 <spi_read+0x68>)
   80214:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80216:	68f8      	ldr	r0, [r7, #12]
   80218:	4b0c      	ldr	r3, [pc, #48]	; (8024c <spi_read+0x6c>)
   8021a:	4798      	blx	r3
   8021c:	4603      	mov	r3, r0
   8021e:	2b00      	cmp	r3, #0
   80220:	d007      	beq.n	80232 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80222:	4b09      	ldr	r3, [pc, #36]	; (80248 <spi_read+0x68>)
   80224:	681b      	ldr	r3, [r3, #0]
   80226:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8022a:	0c1b      	lsrs	r3, r3, #16
   8022c:	b2da      	uxtb	r2, r3
   8022e:	687b      	ldr	r3, [r7, #4]
   80230:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80232:	4b05      	ldr	r3, [pc, #20]	; (80248 <spi_read+0x68>)
   80234:	681b      	ldr	r3, [r3, #0]
   80236:	b29a      	uxth	r2, r3
   80238:	68bb      	ldr	r3, [r7, #8]
   8023a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8023c:	2300      	movs	r3, #0
   8023e:	b25b      	sxtb	r3, r3
}
   80240:	4618      	mov	r0, r3
   80242:	3718      	adds	r7, #24
   80244:	46bd      	mov	sp, r7
   80246:	bd80      	pop	{r7, pc}
   80248:	20070454 	.word	0x20070454
   8024c:	00080149 	.word	0x00080149

00080250 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80250:	b580      	push	{r7, lr}
   80252:	b084      	sub	sp, #16
   80254:	af00      	add	r7, sp, #0
   80256:	6078      	str	r0, [r7, #4]
   80258:	8079      	strh	r1, [r7, #2]
   8025a:	707a      	strb	r2, [r7, #1]
   8025c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8025e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80262:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80264:	e006      	b.n	80274 <spi_write+0x24>
		if (!timeout--) {
   80266:	68fb      	ldr	r3, [r7, #12]
   80268:	1e5a      	subs	r2, r3, #1
   8026a:	60fa      	str	r2, [r7, #12]
   8026c:	2b00      	cmp	r3, #0
   8026e:	d101      	bne.n	80274 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   80270:	2301      	movs	r3, #1
   80272:	e023      	b.n	802bc <spi_write+0x6c>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80274:	687b      	ldr	r3, [r7, #4]
   80276:	691b      	ldr	r3, [r3, #16]
   80278:	f003 0302 	and.w	r3, r3, #2
   8027c:	2b00      	cmp	r3, #0
   8027e:	d0f2      	beq.n	80266 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80280:	6878      	ldr	r0, [r7, #4]
   80282:	4b11      	ldr	r3, [pc, #68]	; (802c8 <spi_write+0x78>)
   80284:	4798      	blx	r3
   80286:	4603      	mov	r3, r0
   80288:	2b00      	cmp	r3, #0
   8028a:	d00e      	beq.n	802aa <spi_write+0x5a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8028c:	887a      	ldrh	r2, [r7, #2]
   8028e:	787b      	ldrb	r3, [r7, #1]
   80290:	041b      	lsls	r3, r3, #16
   80292:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80296:	4313      	orrs	r3, r2
   80298:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   8029a:	783b      	ldrb	r3, [r7, #0]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d006      	beq.n	802ae <spi_write+0x5e>
			value |= SPI_TDR_LASTXFER;
   802a0:	68bb      	ldr	r3, [r7, #8]
   802a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802a6:	60bb      	str	r3, [r7, #8]
   802a8:	e001      	b.n	802ae <spi_write+0x5e>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   802aa:	887b      	ldrh	r3, [r7, #2]
   802ac:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802ae:	687b      	ldr	r3, [r7, #4]
   802b0:	68ba      	ldr	r2, [r7, #8]
   802b2:	60da      	str	r2, [r3, #12]
	
	pio_toggle_pin(LED0_GPIO);
   802b4:	203b      	movs	r0, #59	; 0x3b
   802b6:	4b05      	ldr	r3, [pc, #20]	; (802cc <spi_write+0x7c>)
   802b8:	4798      	blx	r3

	return SPI_OK;
   802ba:	2300      	movs	r3, #0
   802bc:	b25b      	sxtb	r3, r3
}
   802be:	4618      	mov	r0, r3
   802c0:	3710      	adds	r7, #16
   802c2:	46bd      	mov	sp, r7
   802c4:	bd80      	pop	{r7, pc}
   802c6:	bf00      	nop
   802c8:	00080149 	.word	0x00080149
   802cc:	00081ee9 	.word	0x00081ee9

000802d0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   802d0:	b480      	push	{r7}
   802d2:	b085      	sub	sp, #20
   802d4:	af00      	add	r7, sp, #0
   802d6:	60f8      	str	r0, [r7, #12]
   802d8:	60b9      	str	r1, [r7, #8]
   802da:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d00c      	beq.n	802fc <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   802e2:	68fb      	ldr	r3, [r7, #12]
   802e4:	68ba      	ldr	r2, [r7, #8]
   802e6:	320c      	adds	r2, #12
   802e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802ec:	f043 0101 	orr.w	r1, r3, #1
   802f0:	68fb      	ldr	r3, [r7, #12]
   802f2:	68ba      	ldr	r2, [r7, #8]
   802f4:	320c      	adds	r2, #12
   802f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802fa:	e00b      	b.n	80314 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   802fc:	68fb      	ldr	r3, [r7, #12]
   802fe:	68ba      	ldr	r2, [r7, #8]
   80300:	320c      	adds	r2, #12
   80302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80306:	f023 0101 	bic.w	r1, r3, #1
   8030a:	68fb      	ldr	r3, [r7, #12]
   8030c:	68ba      	ldr	r2, [r7, #8]
   8030e:	320c      	adds	r2, #12
   80310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80314:	3714      	adds	r7, #20
   80316:	46bd      	mov	sp, r7
   80318:	f85d 7b04 	ldr.w	r7, [sp], #4
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80320:	b480      	push	{r7}
   80322:	b085      	sub	sp, #20
   80324:	af00      	add	r7, sp, #0
   80326:	60f8      	str	r0, [r7, #12]
   80328:	60b9      	str	r1, [r7, #8]
   8032a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	2b00      	cmp	r3, #0
   80330:	d00c      	beq.n	8034c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80332:	68fb      	ldr	r3, [r7, #12]
   80334:	68ba      	ldr	r2, [r7, #8]
   80336:	320c      	adds	r2, #12
   80338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8033c:	f043 0102 	orr.w	r1, r3, #2
   80340:	68fb      	ldr	r3, [r7, #12]
   80342:	68ba      	ldr	r2, [r7, #8]
   80344:	320c      	adds	r2, #12
   80346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8034a:	e00b      	b.n	80364 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8034c:	68fb      	ldr	r3, [r7, #12]
   8034e:	68ba      	ldr	r2, [r7, #8]
   80350:	320c      	adds	r2, #12
   80352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80356:	f023 0102 	bic.w	r1, r3, #2
   8035a:	68fb      	ldr	r3, [r7, #12]
   8035c:	68ba      	ldr	r2, [r7, #8]
   8035e:	320c      	adds	r2, #12
   80360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80364:	3714      	adds	r7, #20
   80366:	46bd      	mov	sp, r7
   80368:	f85d 7b04 	ldr.w	r7, [sp], #4
   8036c:	4770      	bx	lr
   8036e:	bf00      	nop

00080370 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80370:	b480      	push	{r7}
   80372:	b085      	sub	sp, #20
   80374:	af00      	add	r7, sp, #0
   80376:	60f8      	str	r0, [r7, #12]
   80378:	60b9      	str	r1, [r7, #8]
   8037a:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8037c:	68fb      	ldr	r3, [r7, #12]
   8037e:	68ba      	ldr	r2, [r7, #8]
   80380:	320c      	adds	r2, #12
   80382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80386:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8038a:	68fb      	ldr	r3, [r7, #12]
   8038c:	68ba      	ldr	r2, [r7, #8]
   8038e:	320c      	adds	r2, #12
   80390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80394:	68fb      	ldr	r3, [r7, #12]
   80396:	68ba      	ldr	r2, [r7, #8]
   80398:	320c      	adds	r2, #12
   8039a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8039e:	687b      	ldr	r3, [r7, #4]
   803a0:	ea42 0103 	orr.w	r1, r2, r3
   803a4:	68fb      	ldr	r3, [r7, #12]
   803a6:	68ba      	ldr	r2, [r7, #8]
   803a8:	320c      	adds	r2, #12
   803aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803ae:	3714      	adds	r7, #20
   803b0:	46bd      	mov	sp, r7
   803b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   803b6:	4770      	bx	lr

000803b8 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   803b8:	b590      	push	{r4, r7, lr}
   803ba:	b085      	sub	sp, #20
   803bc:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   803be:	2301      	movs	r3, #1
   803c0:	9300      	str	r3, [sp, #0]
   803c2:	2300      	movs	r3, #0
   803c4:	9301      	str	r3, [sp, #4]
   803c6:	2300      	movs	r3, #0
   803c8:	9302      	str	r3, [sp, #8]
   803ca:	2300      	movs	r3, #0
   803cc:	9303      	str	r3, [sp, #12]
   803ce:	4805      	ldr	r0, [pc, #20]	; (803e4 <command_loop+0x2c>)
   803d0:	4905      	ldr	r1, [pc, #20]	; (803e8 <command_loop+0x30>)
   803d2:	2282      	movs	r2, #130	; 0x82
   803d4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   803d8:	4c04      	ldr	r4, [pc, #16]	; (803ec <command_loop+0x34>)
   803da:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   803dc:	bf00      	nop
}
   803de:	3704      	adds	r7, #4
   803e0:	46bd      	mov	sp, r7
   803e2:	bd90      	pop	{r4, r7, pc}
   803e4:	000803f1 	.word	0x000803f1
   803e8:	00086884 	.word	0x00086884
   803ec:	00083c4d 	.word	0x00083c4d

000803f0 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   803f0:	b590      	push	{r4, r7, lr}
   803f2:	b08b      	sub	sp, #44	; 0x2c
   803f4:	af00      	add	r7, sp, #0
   803f6:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   803f8:	687a      	ldr	r2, [r7, #4]
   803fa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   803fe:	429a      	cmp	r2, r3
   80400:	d002      	beq.n	80408 <prvCommandTask+0x18>
   80402:	4b18      	ldr	r3, [pc, #96]	; (80464 <prvCommandTask+0x74>)
   80404:	4798      	blx	r3
   80406:	e7fe      	b.n	80406 <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80408:	230f      	movs	r3, #15
   8040a:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   8040c:	f04f 33ff 	mov.w	r3, #4294967295
   80410:	623b      	str	r3, [r7, #32]
	high = CAN_MSG_DUMMY_DATA;
   80412:	f04f 33ff 	mov.w	r3, #4294967295
   80416:	61fb      	str	r3, [r7, #28]
	ID = SUB0_ID0;
   80418:	2314      	movs	r3, #20
   8041a:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   8041c:	230a      	movs	r3, #10
   8041e:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		
		xSemaphoreTake(Can1_Mutex, 100);		// Acquire CAN1 Mutex
   80420:	4b11      	ldr	r3, [pc, #68]	; (80468 <prvCommandTask+0x78>)
   80422:	681b      	ldr	r3, [r3, #0]
   80424:	4618      	mov	r0, r3
   80426:	2100      	movs	r1, #0
   80428:	2264      	movs	r2, #100	; 0x64
   8042a:	2300      	movs	r3, #0
   8042c:	4c0f      	ldr	r4, [pc, #60]	; (8046c <prvCommandTask+0x7c>)
   8042e:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   80430:	6a38      	ldr	r0, [r7, #32]
   80432:	69f9      	ldr	r1, [r7, #28]
   80434:	69ba      	ldr	r2, [r7, #24]
   80436:	697b      	ldr	r3, [r7, #20]
   80438:	4c0d      	ldr	r4, [pc, #52]	; (80470 <prvCommandTask+0x80>)
   8043a:	47a0      	blx	r4
   8043c:	6138      	str	r0, [r7, #16]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   8043e:	4b0a      	ldr	r3, [pc, #40]	; (80468 <prvCommandTask+0x78>)
   80440:	681b      	ldr	r3, [r3, #0]
   80442:	4618      	mov	r0, r3
   80444:	2100      	movs	r1, #0
   80446:	2200      	movs	r2, #0
   80448:	2300      	movs	r3, #0
   8044a:	4c0a      	ldr	r4, [pc, #40]	; (80474 <prvCommandTask+0x84>)
   8044c:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8044e:	4b0a      	ldr	r3, [pc, #40]	; (80478 <prvCommandTask+0x88>)
   80450:	4798      	blx	r3
   80452:	4603      	mov	r3, r0
   80454:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80456:	f107 030c 	add.w	r3, r7, #12
   8045a:	4618      	mov	r0, r3
   8045c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8045e:	4b07      	ldr	r3, [pc, #28]	; (8047c <prvCommandTask+0x8c>)
   80460:	4798      	blx	r3
	}
   80462:	e7dd      	b.n	80420 <prvCommandTask+0x30>
   80464:	00082ed9 	.word	0x00082ed9
   80468:	2007a714 	.word	0x2007a714
   8046c:	000837a1 	.word	0x000837a1
   80470:	0008550d 	.word	0x0008550d
   80474:	000834e1 	.word	0x000834e1
   80478:	00084089 	.word	0x00084089
   8047c:	00083dcd 	.word	0x00083dcd

00080480 <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   80480:	b590      	push	{r4, r7, lr}
   80482:	b085      	sub	sp, #20
   80484:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   80486:	2302      	movs	r3, #2
   80488:	9300      	str	r3, [sp, #0]
   8048a:	2300      	movs	r3, #0
   8048c:	9301      	str	r3, [sp, #4]
   8048e:	2300      	movs	r3, #0
   80490:	9302      	str	r3, [sp, #8]
   80492:	2300      	movs	r3, #0
   80494:	9303      	str	r3, [sp, #12]
   80496:	4805      	ldr	r0, [pc, #20]	; (804ac <data_test+0x2c>)
   80498:	4905      	ldr	r1, [pc, #20]	; (804b0 <data_test+0x30>)
   8049a:	2282      	movs	r2, #130	; 0x82
   8049c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   804a0:	4c04      	ldr	r4, [pc, #16]	; (804b4 <data_test+0x34>)
   804a2:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   804a4:	bf00      	nop
}
   804a6:	3704      	adds	r7, #4
   804a8:	46bd      	mov	sp, r7
   804aa:	bd90      	pop	{r4, r7, pc}
   804ac:	000804b9 	.word	0x000804b9
   804b0:	00086888 	.word	0x00086888
   804b4:	00083c4d 	.word	0x00083c4d

000804b8 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   804b8:	b590      	push	{r4, r7, lr}
   804ba:	b08b      	sub	sp, #44	; 0x2c
   804bc:	af00      	add	r7, sp, #0
   804be:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   804c0:	687a      	ldr	r2, [r7, #4]
   804c2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   804c6:	429a      	cmp	r2, r3
   804c8:	d002      	beq.n	804d0 <prvDataTask+0x18>
   804ca:	4b3d      	ldr	r3, [pc, #244]	; (805c0 <prvDataTask+0x108>)
   804cc:	4798      	blx	r3
   804ce:	e7fe      	b.n	804ce <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   804d0:	230f      	movs	r3, #15
   804d2:	627b      	str	r3, [r7, #36]	; 0x24
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	low = DATA_REQUEST;
   804d4:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804d8:	613b      	str	r3, [r7, #16]
	high = DATA_REQUEST;
   804da:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804de:	60fb      	str	r3, [r7, #12]
	ID = SUB0_ID0;
   804e0:	2314      	movs	r3, #20
   804e2:	623b      	str	r3, [r7, #32]
	PRIORITY = DATA_PRIO;
   804e4:	2319      	movs	r3, #25
   804e6:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 100);							// Acquire CAN1 Mutex
   804e8:	4b36      	ldr	r3, [pc, #216]	; (805c4 <prvDataTask+0x10c>)
   804ea:	681b      	ldr	r3, [r3, #0]
   804ec:	4618      	mov	r0, r3
   804ee:	2100      	movs	r1, #0
   804f0:	2264      	movs	r2, #100	; 0x64
   804f2:	2300      	movs	r3, #0
   804f4:	4c34      	ldr	r4, [pc, #208]	; (805c8 <prvDataTask+0x110>)
   804f6:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);				//This is the CAN API function I have written for us to use.
   804f8:	693a      	ldr	r2, [r7, #16]
   804fa:	68fb      	ldr	r3, [r7, #12]
   804fc:	4610      	mov	r0, r2
   804fe:	4619      	mov	r1, r3
   80500:	6a3a      	ldr	r2, [r7, #32]
   80502:	69fb      	ldr	r3, [r7, #28]
   80504:	4c31      	ldr	r4, [pc, #196]	; (805cc <prvDataTask+0x114>)
   80506:	47a0      	blx	r4
   80508:	61b8      	str	r0, [r7, #24]
		xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
   8050a:	4b2e      	ldr	r3, [pc, #184]	; (805c4 <prvDataTask+0x10c>)
   8050c:	681b      	ldr	r3, [r3, #0]
   8050e:	4618      	mov	r0, r3
   80510:	2100      	movs	r1, #0
   80512:	2200      	movs	r2, #0
   80514:	2300      	movs	r3, #0
   80516:	4c2e      	ldr	r4, [pc, #184]	; (805d0 <prvDataTask+0x118>)
   80518:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 15 clock cycles.
   8051a:	4b2e      	ldr	r3, [pc, #184]	; (805d4 <prvDataTask+0x11c>)
   8051c:	4798      	blx	r3
   8051e:	4603      	mov	r3, r0
   80520:	617b      	str	r3, [r7, #20]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80522:	f107 0314 	add.w	r3, r7, #20
   80526:	4618      	mov	r0, r3
   80528:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8052a:	4b2b      	ldr	r3, [pc, #172]	; (805d8 <prvDataTask+0x120>)
   8052c:	4798      	blx	r3

		xSemaphoreTake(Can1_Mutex, 1000);							// Acquire CAN1 Mutex
   8052e:	4b25      	ldr	r3, [pc, #148]	; (805c4 <prvDataTask+0x10c>)
   80530:	681b      	ldr	r3, [r3, #0]
   80532:	4618      	mov	r0, r3
   80534:	2100      	movs	r1, #0
   80536:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8053a:	2300      	movs	r3, #0
   8053c:	4c22      	ldr	r4, [pc, #136]	; (805c8 <prvDataTask+0x110>)
   8053e:	47a0      	blx	r4
		if(glob_drf)		// data reception flag;
   80540:	4b26      	ldr	r3, [pc, #152]	; (805dc <prvDataTask+0x124>)
   80542:	781b      	ldrb	r3, [r3, #0]
   80544:	2b00      	cmp	r3, #0
   80546:	d016      	beq.n	80576 <prvDataTask+0xbe>
		{
			x = read_can_data(&high, &low, 1234);
   80548:	f107 020c 	add.w	r2, r7, #12
   8054c:	f107 0310 	add.w	r3, r7, #16
   80550:	4610      	mov	r0, r2
   80552:	4619      	mov	r1, r3
   80554:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80558:	4b21      	ldr	r3, [pc, #132]	; (805e0 <prvDataTask+0x128>)
   8055a:	4798      	blx	r3
   8055c:	61b8      	str	r0, [r7, #24]

			if(x)
   8055e:	69bb      	ldr	r3, [r7, #24]
   80560:	2b00      	cmp	r3, #0
   80562:	d008      	beq.n	80576 <prvDataTask+0xbe>
			{
				glob_stored_data[1] = high;
   80564:	68fa      	ldr	r2, [r7, #12]
   80566:	4b1f      	ldr	r3, [pc, #124]	; (805e4 <prvDataTask+0x12c>)
   80568:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   8056a:	693a      	ldr	r2, [r7, #16]
   8056c:	4b1d      	ldr	r3, [pc, #116]	; (805e4 <prvDataTask+0x12c>)
   8056e:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   80570:	4b1a      	ldr	r3, [pc, #104]	; (805dc <prvDataTask+0x124>)
   80572:	2200      	movs	r2, #0
   80574:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comf)
   80576:	4b1c      	ldr	r3, [pc, #112]	; (805e8 <prvDataTask+0x130>)
   80578:	781b      	ldrb	r3, [r3, #0]
   8057a:	2b00      	cmp	r3, #0
   8057c:	d016      	beq.n	805ac <prvDataTask+0xf4>
		{
			x = read_can_msg(&high, &low, 1234);
   8057e:	f107 020c 	add.w	r2, r7, #12
   80582:	f107 0310 	add.w	r3, r7, #16
   80586:	4610      	mov	r0, r2
   80588:	4619      	mov	r1, r3
   8058a:	f240 42d2 	movw	r2, #1234	; 0x4d2
   8058e:	4b17      	ldr	r3, [pc, #92]	; (805ec <prvDataTask+0x134>)
   80590:	4798      	blx	r3
   80592:	61b8      	str	r0, [r7, #24]

			if(x)
   80594:	69bb      	ldr	r3, [r7, #24]
   80596:	2b00      	cmp	r3, #0
   80598:	d008      	beq.n	805ac <prvDataTask+0xf4>
			{
				glob_stored_message[1] = high;
   8059a:	68fa      	ldr	r2, [r7, #12]
   8059c:	4b14      	ldr	r3, [pc, #80]	; (805f0 <prvDataTask+0x138>)
   8059e:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   805a0:	693a      	ldr	r2, [r7, #16]
   805a2:	4b13      	ldr	r3, [pc, #76]	; (805f0 <prvDataTask+0x138>)
   805a4:	601a      	str	r2, [r3, #0]
				glob_comf = 0;
   805a6:	4b10      	ldr	r3, [pc, #64]	; (805e8 <prvDataTask+0x130>)
   805a8:	2200      	movs	r2, #0
   805aa:	701a      	strb	r2, [r3, #0]
			}
		}
		xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
   805ac:	4b05      	ldr	r3, [pc, #20]	; (805c4 <prvDataTask+0x10c>)
   805ae:	681b      	ldr	r3, [r3, #0]
   805b0:	4618      	mov	r0, r3
   805b2:	2100      	movs	r1, #0
   805b4:	2200      	movs	r2, #0
   805b6:	2300      	movs	r3, #0
   805b8:	4c05      	ldr	r4, [pc, #20]	; (805d0 <prvDataTask+0x118>)
   805ba:	47a0      	blx	r4
	}
   805bc:	e794      	b.n	804e8 <prvDataTask+0x30>
   805be:	bf00      	nop
   805c0:	00082ed9 	.word	0x00082ed9
   805c4:	2007a714 	.word	0x2007a714
   805c8:	000837a1 	.word	0x000837a1
   805cc:	0008550d 	.word	0x0008550d
   805d0:	000834e1 	.word	0x000834e1
   805d4:	00084089 	.word	0x00084089
   805d8:	00083dcd 	.word	0x00083dcd
   805dc:	2007a6d8 	.word	0x2007a6d8
   805e0:	000855bd 	.word	0x000855bd
   805e4:	2007a6b0 	.word	0x2007a6b0
   805e8:	2007a770 	.word	0x2007a770
   805ec:	000855f9 	.word	0x000855f9
   805f0:	2007a738 	.word	0x2007a738

000805f4 <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   805f4:	b590      	push	{r4, r7, lr}
   805f6:	b085      	sub	sp, #20
   805f8:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   805fa:	2301      	movs	r3, #1
   805fc:	9300      	str	r3, [sp, #0]
   805fe:	2300      	movs	r3, #0
   80600:	9301      	str	r3, [sp, #4]
   80602:	2300      	movs	r3, #0
   80604:	9302      	str	r3, [sp, #8]
   80606:	2300      	movs	r3, #0
   80608:	9303      	str	r3, [sp, #12]
   8060a:	4805      	ldr	r0, [pc, #20]	; (80620 <housekeep+0x2c>)
   8060c:	4905      	ldr	r1, [pc, #20]	; (80624 <housekeep+0x30>)
   8060e:	2282      	movs	r2, #130	; 0x82
   80610:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80614:	4c04      	ldr	r4, [pc, #16]	; (80628 <housekeep+0x34>)
   80616:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80618:	bf00      	nop
}
   8061a:	3704      	adds	r7, #4
   8061c:	46bd      	mov	sp, r7
   8061e:	bd90      	pop	{r4, r7, pc}
   80620:	0008062d 	.word	0x0008062d
   80624:	0008688c 	.word	0x0008688c
   80628:	00083c4d 	.word	0x00083c4d

0008062c <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   8062c:	b590      	push	{r4, r7, lr}
   8062e:	b087      	sub	sp, #28
   80630:	af00      	add	r7, sp, #0
   80632:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   80634:	687a      	ldr	r2, [r7, #4]
   80636:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8063a:	429a      	cmp	r2, r3
   8063c:	d002      	beq.n	80644 <prvHouseKeepTask+0x18>
   8063e:	4b13      	ldr	r3, [pc, #76]	; (8068c <prvHouseKeepTask+0x60>)
   80640:	4798      	blx	r3
   80642:	e7fe      	b.n	80642 <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   80644:	230f      	movs	r3, #15
   80646:	617b      	str	r3, [r7, #20]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	
	ID = SUB0_ID5;
   80648:	2319      	movs	r3, #25
   8064a:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 100);		// Acquire CAN1 Mutex
   8064c:	4b10      	ldr	r3, [pc, #64]	; (80690 <prvHouseKeepTask+0x64>)
   8064e:	681b      	ldr	r3, [r3, #0]
   80650:	4618      	mov	r0, r3
   80652:	2100      	movs	r1, #0
   80654:	2264      	movs	r2, #100	; 0x64
   80656:	2300      	movs	r3, #0
   80658:	4c0e      	ldr	r4, [pc, #56]	; (80694 <prvHouseKeepTask+0x68>)
   8065a:	47a0      	blx	r4
		x = request_housekeeping(ID);		// This is the CAN API function I have written for us to use.
   8065c:	6938      	ldr	r0, [r7, #16]
   8065e:	4b0e      	ldr	r3, [pc, #56]	; (80698 <prvHouseKeepTask+0x6c>)
   80660:	4798      	blx	r3
   80662:	60f8      	str	r0, [r7, #12]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   80664:	4b0a      	ldr	r3, [pc, #40]	; (80690 <prvHouseKeepTask+0x64>)
   80666:	681b      	ldr	r3, [r3, #0]
   80668:	4618      	mov	r0, r3
   8066a:	2100      	movs	r1, #0
   8066c:	2200      	movs	r2, #0
   8066e:	2300      	movs	r3, #0
   80670:	4c0a      	ldr	r4, [pc, #40]	; (8069c <prvHouseKeepTask+0x70>)
   80672:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   80674:	4b0a      	ldr	r3, [pc, #40]	; (806a0 <prvHouseKeepTask+0x74>)
   80676:	4798      	blx	r3
   80678:	4603      	mov	r3, r0
   8067a:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8067c:	f107 0308 	add.w	r3, r7, #8
   80680:	4618      	mov	r0, r3
   80682:	6979      	ldr	r1, [r7, #20]
   80684:	4b07      	ldr	r3, [pc, #28]	; (806a4 <prvHouseKeepTask+0x78>)
   80686:	4798      	blx	r3
	}
   80688:	e7e0      	b.n	8064c <prvHouseKeepTask+0x20>
   8068a:	bf00      	nop
   8068c:	00082ed9 	.word	0x00082ed9
   80690:	2007a714 	.word	0x2007a714
   80694:	000837a1 	.word	0x000837a1
   80698:	00085635 	.word	0x00085635
   8069c:	000834e1 	.word	0x000834e1
   806a0:	00084089 	.word	0x00084089
   806a4:	00083dcd 	.word	0x00083dcd

000806a8 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   806a8:	b580      	push	{r7, lr}
   806aa:	b082      	sub	sp, #8
   806ac:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   806ae:	2300      	movs	r3, #0
   806b0:	607b      	str	r3, [r7, #4]
   806b2:	e00f      	b.n	806d4 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   806b4:	4b0a      	ldr	r3, [pc, #40]	; (806e0 <vParTestInitialise+0x38>)
   806b6:	687a      	ldr	r2, [r7, #4]
   806b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806bc:	4618      	mov	r0, r3
   806be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806c2:	4b08      	ldr	r3, [pc, #32]	; (806e4 <vParTestInitialise+0x3c>)
   806c4:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   806c6:	6878      	ldr	r0, [r7, #4]
   806c8:	2100      	movs	r1, #0
   806ca:	4b07      	ldr	r3, [pc, #28]	; (806e8 <vParTestInitialise+0x40>)
   806cc:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   806ce:	687b      	ldr	r3, [r7, #4]
   806d0:	3301      	adds	r3, #1
   806d2:	607b      	str	r3, [r7, #4]
   806d4:	687b      	ldr	r3, [r7, #4]
   806d6:	2b03      	cmp	r3, #3
   806d8:	d9ec      	bls.n	806b4 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   806da:	3708      	adds	r7, #8
   806dc:	46bd      	mov	sp, r7
   806de:	bd80      	pop	{r7, pc}
   806e0:	00086890 	.word	0x00086890
   806e4:	00081f49 	.word	0x00081f49
   806e8:	000806ed 	.word	0x000806ed

000806ec <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   806ec:	b580      	push	{r7, lr}
   806ee:	b082      	sub	sp, #8
   806f0:	af00      	add	r7, sp, #0
   806f2:	6078      	str	r0, [r7, #4]
   806f4:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   806f6:	687b      	ldr	r3, [r7, #4]
   806f8:	2b03      	cmp	r3, #3
   806fa:	d823      	bhi.n	80744 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   806fc:	687b      	ldr	r3, [r7, #4]
   806fe:	2b00      	cmp	r3, #0
   80700:	d106      	bne.n	80710 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   80702:	683b      	ldr	r3, [r7, #0]
   80704:	2b00      	cmp	r3, #0
   80706:	bf14      	ite	ne
   80708:	2300      	movne	r3, #0
   8070a:	2301      	moveq	r3, #1
   8070c:	b2db      	uxtb	r3, r3
   8070e:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   80710:	683b      	ldr	r3, [r7, #0]
   80712:	2b00      	cmp	r3, #0
   80714:	d00b      	beq.n	8072e <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   80716:	4b0d      	ldr	r3, [pc, #52]	; (8074c <vParTestSetLED+0x60>)
   80718:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   8071a:	4b0d      	ldr	r3, [pc, #52]	; (80750 <vParTestSetLED+0x64>)
   8071c:	687a      	ldr	r2, [r7, #4]
   8071e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80722:	4618      	mov	r0, r3
   80724:	4b0b      	ldr	r3, [pc, #44]	; (80754 <vParTestSetLED+0x68>)
   80726:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80728:	4b0b      	ldr	r3, [pc, #44]	; (80758 <vParTestSetLED+0x6c>)
   8072a:	4798      	blx	r3
   8072c:	e00a      	b.n	80744 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   8072e:	4b07      	ldr	r3, [pc, #28]	; (8074c <vParTestSetLED+0x60>)
   80730:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   80732:	4b07      	ldr	r3, [pc, #28]	; (80750 <vParTestSetLED+0x64>)
   80734:	687a      	ldr	r2, [r7, #4]
   80736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8073a:	4618      	mov	r0, r3
   8073c:	4b07      	ldr	r3, [pc, #28]	; (8075c <vParTestSetLED+0x70>)
   8073e:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80740:	4b05      	ldr	r3, [pc, #20]	; (80758 <vParTestSetLED+0x6c>)
   80742:	4798      	blx	r3
		}
	}
}
   80744:	3708      	adds	r7, #8
   80746:	46bd      	mov	sp, r7
   80748:	bd80      	pop	{r7, pc}
   8074a:	bf00      	nop
   8074c:	00082e5d 	.word	0x00082e5d
   80750:	00086890 	.word	0x00086890
   80754:	00081eb5 	.word	0x00081eb5
   80758:	00082ea1 	.word	0x00082ea1
   8075c:	00081e81 	.word	0x00081e81

00080760 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80760:	b480      	push	{r7}
   80762:	b083      	sub	sp, #12
   80764:	af00      	add	r7, sp, #0
   80766:	4603      	mov	r3, r0
   80768:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8076a:	4b08      	ldr	r3, [pc, #32]	; (8078c <NVIC_EnableIRQ+0x2c>)
   8076c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80770:	0952      	lsrs	r2, r2, #5
   80772:	79f9      	ldrb	r1, [r7, #7]
   80774:	f001 011f 	and.w	r1, r1, #31
   80778:	2001      	movs	r0, #1
   8077a:	fa00 f101 	lsl.w	r1, r0, r1
   8077e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80782:	370c      	adds	r7, #12
   80784:	46bd      	mov	sp, r7
   80786:	f85d 7b04 	ldr.w	r7, [sp], #4
   8078a:	4770      	bx	lr
   8078c:	e000e100 	.word	0xe000e100

00080790 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80790:	b480      	push	{r7}
   80792:	b083      	sub	sp, #12
   80794:	af00      	add	r7, sp, #0
   80796:	4603      	mov	r3, r0
   80798:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8079a:	4b09      	ldr	r3, [pc, #36]	; (807c0 <NVIC_DisableIRQ+0x30>)
   8079c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   807a0:	0952      	lsrs	r2, r2, #5
   807a2:	79f9      	ldrb	r1, [r7, #7]
   807a4:	f001 011f 	and.w	r1, r1, #31
   807a8:	2001      	movs	r0, #1
   807aa:	fa00 f101 	lsl.w	r1, r0, r1
   807ae:	3220      	adds	r2, #32
   807b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807b4:	370c      	adds	r7, #12
   807b6:	46bd      	mov	sp, r7
   807b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   807bc:	4770      	bx	lr
   807be:	bf00      	nop
   807c0:	e000e100 	.word	0xe000e100

000807c4 <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807c4:	b480      	push	{r7}
   807c6:	b083      	sub	sp, #12
   807c8:	af00      	add	r7, sp, #0
   807ca:	4603      	mov	r3, r0
   807cc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807ce:	4b09      	ldr	r3, [pc, #36]	; (807f4 <NVIC_ClearPendingIRQ+0x30>)
   807d0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   807d4:	0952      	lsrs	r2, r2, #5
   807d6:	79f9      	ldrb	r1, [r7, #7]
   807d8:	f001 011f 	and.w	r1, r1, #31
   807dc:	2001      	movs	r0, #1
   807de:	fa00 f101 	lsl.w	r1, r0, r1
   807e2:	3260      	adds	r2, #96	; 0x60
   807e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807e8:	370c      	adds	r7, #12
   807ea:	46bd      	mov	sp, r7
   807ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   807f0:	4770      	bx	lr
   807f2:	bf00      	nop
   807f4:	e000e100 	.word	0xe000e100

000807f8 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   807f8:	b480      	push	{r7}
   807fa:	b083      	sub	sp, #12
   807fc:	af00      	add	r7, sp, #0
   807fe:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80800:	687b      	ldr	r3, [r7, #4]
   80802:	2280      	movs	r2, #128	; 0x80
   80804:	601a      	str	r2, [r3, #0]
}
   80806:	370c      	adds	r7, #12
   80808:	46bd      	mov	sp, r7
   8080a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8080e:	4770      	bx	lr

00080810 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80810:	b480      	push	{r7}
   80812:	b083      	sub	sp, #12
   80814:	af00      	add	r7, sp, #0
   80816:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80818:	687b      	ldr	r3, [r7, #4]
   8081a:	2201      	movs	r2, #1
   8081c:	601a      	str	r2, [r3, #0]
}
   8081e:	370c      	adds	r7, #12
   80820:	46bd      	mov	sp, r7
   80822:	f85d 7b04 	ldr.w	r7, [sp], #4
   80826:	4770      	bx	lr

00080828 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   80828:	b480      	push	{r7}
   8082a:	b083      	sub	sp, #12
   8082c:	af00      	add	r7, sp, #0
   8082e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80830:	687b      	ldr	r3, [r7, #4]
   80832:	2202      	movs	r2, #2
   80834:	601a      	str	r2, [r3, #0]
}
   80836:	370c      	adds	r7, #12
   80838:	46bd      	mov	sp, r7
   8083a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8083e:	4770      	bx	lr

00080840 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   80840:	b480      	push	{r7}
   80842:	b083      	sub	sp, #12
   80844:	af00      	add	r7, sp, #0
   80846:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   80848:	687b      	ldr	r3, [r7, #4]
   8084a:	685b      	ldr	r3, [r3, #4]
   8084c:	f023 0201 	bic.w	r2, r3, #1
   80850:	687b      	ldr	r3, [r7, #4]
   80852:	605a      	str	r2, [r3, #4]
}
   80854:	370c      	adds	r7, #12
   80856:	46bd      	mov	sp, r7
   80858:	f85d 7b04 	ldr.w	r7, [sp], #4
   8085c:	4770      	bx	lr
   8085e:	bf00      	nop

00080860 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80860:	b480      	push	{r7}
   80862:	b083      	sub	sp, #12
   80864:	af00      	add	r7, sp, #0
   80866:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80868:	687b      	ldr	r3, [r7, #4]
   8086a:	685b      	ldr	r3, [r3, #4]
   8086c:	f043 0210 	orr.w	r2, r3, #16
   80870:	687b      	ldr	r3, [r7, #4]
   80872:	605a      	str	r2, [r3, #4]
}
   80874:	370c      	adds	r7, #12
   80876:	46bd      	mov	sp, r7
   80878:	f85d 7b04 	ldr.w	r7, [sp], #4
   8087c:	4770      	bx	lr
   8087e:	bf00      	nop

00080880 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80880:	b480      	push	{r7}
   80882:	b083      	sub	sp, #12
   80884:	af00      	add	r7, sp, #0
   80886:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80888:	687b      	ldr	r3, [r7, #4]
   8088a:	691b      	ldr	r3, [r3, #16]
}
   8088c:	4618      	mov	r0, r3
   8088e:	370c      	adds	r7, #12
   80890:	46bd      	mov	sp, r7
   80892:	f85d 7b04 	ldr.w	r7, [sp], #4
   80896:	4770      	bx	lr

00080898 <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
   80898:	b480      	push	{r7}
   8089a:	b083      	sub	sp, #12
   8089c:	af00      	add	r7, sp, #0
   8089e:	6078      	str	r0, [r7, #4]
   808a0:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
   808a2:	687b      	ldr	r3, [r7, #4]
   808a4:	683a      	ldr	r2, [r7, #0]
   808a6:	615a      	str	r2, [r3, #20]
}
   808a8:	370c      	adds	r7, #12
   808aa:	46bd      	mov	sp, r7
   808ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   808b0:	4770      	bx	lr
   808b2:	bf00      	nop

000808b4 <spi_slave_transfer>:
 *
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
   808b4:	b590      	push	{r4, r7, lr}
   808b6:	b083      	sub	sp, #12
   808b8:	af00      	add	r7, sp, #0
   808ba:	6078      	str	r0, [r7, #4]
   808bc:	6039      	str	r1, [r7, #0]
	gs_puc_transfer_buffer = p_buf;
   808be:	4b0c      	ldr	r3, [pc, #48]	; (808f0 <spi_slave_transfer+0x3c>)
   808c0:	687a      	ldr	r2, [r7, #4]
   808c2:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_length = size;
   808c4:	4b0b      	ldr	r3, [pc, #44]	; (808f4 <spi_slave_transfer+0x40>)
   808c6:	683a      	ldr	r2, [r7, #0]
   808c8:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_index = 0;
   808ca:	4b0b      	ldr	r3, [pc, #44]	; (808f8 <spi_slave_transfer+0x44>)
   808cc:	2200      	movs	r2, #0
   808ce:	601a      	str	r2, [r3, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0,
   808d0:	4b07      	ldr	r3, [pc, #28]	; (808f0 <spi_slave_transfer+0x3c>)
   808d2:	681a      	ldr	r2, [r3, #0]
   808d4:	4b08      	ldr	r3, [pc, #32]	; (808f8 <spi_slave_transfer+0x44>)
   808d6:	681b      	ldr	r3, [r3, #0]
   808d8:	4413      	add	r3, r2
   808da:	781b      	ldrb	r3, [r3, #0]
   808dc:	4807      	ldr	r0, [pc, #28]	; (808fc <spi_slave_transfer+0x48>)
   808de:	4619      	mov	r1, r3
   808e0:	2200      	movs	r2, #0
   808e2:	2300      	movs	r3, #0
   808e4:	4c06      	ldr	r4, [pc, #24]	; (80900 <spi_slave_transfer+0x4c>)
   808e6:	47a0      	blx	r4
			0);
}
   808e8:	370c      	adds	r7, #12
   808ea:	46bd      	mov	sp, r7
   808ec:	bd90      	pop	{r4, r7, pc}
   808ee:	bf00      	nop
   808f0:	2007045c 	.word	0x2007045c
   808f4:	20070464 	.word	0x20070464
   808f8:	20070460 	.word	0x20070460
   808fc:	40008000 	.word	0x40008000
   80900:	00080251 	.word	0x00080251

00080904 <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   80904:	b580      	push	{r7, lr}
   80906:	b084      	sub	sp, #16
   80908:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   8090a:	2300      	movs	r3, #0
   8090c:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   8090e:	2300      	movs	r3, #0
   80910:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80912:	4b0c      	ldr	r3, [pc, #48]	; (80944 <SPI0_Handler+0x40>)
   80914:	607b      	str	r3, [r7, #4]
	
	//pio_toggle_pin(LED1_GPIO);

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80916:	480c      	ldr	r0, [pc, #48]	; (80948 <SPI0_Handler+0x44>)
   80918:	4b0c      	ldr	r3, [pc, #48]	; (8094c <SPI0_Handler+0x48>)
   8091a:	4798      	blx	r3
   8091c:	4603      	mov	r3, r0
   8091e:	f003 0301 	and.w	r3, r3, #1
   80922:	2b00      	cmp	r3, #0
   80924:	d00b      	beq.n	8093e <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80926:	1cfb      	adds	r3, r7, #3
   80928:	4807      	ldr	r0, [pc, #28]	; (80948 <SPI0_Handler+0x44>)
   8092a:	4909      	ldr	r1, [pc, #36]	; (80950 <SPI0_Handler+0x4c>)
   8092c:	461a      	mov	r2, r3
   8092e:	4b09      	ldr	r3, [pc, #36]	; (80954 <SPI0_Handler+0x50>)
   80930:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80932:	687b      	ldr	r3, [r7, #4]
   80934:	681b      	ldr	r3, [r3, #0]
   80936:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   8093a:	687b      	ldr	r3, [r7, #4]
   8093c:	601a      	str	r2, [r3, #0]
	}
}
   8093e:	3710      	adds	r7, #16
   80940:	46bd      	mov	sp, r7
   80942:	bd80      	pop	{r7, pc}
   80944:	4000800c 	.word	0x4000800c
   80948:	40008000 	.word	0x40008000
   8094c:	00080881 	.word	0x00080881
   80950:	200704c0 	.word	0x200704c0
   80954:	000801e1 	.word	0x000801e1

00080958 <spi_slave_initialize>:

/**
 * \brief Initialize SPI as slave.
 */
static void spi_slave_initialize(void)
{
   80958:	b580      	push	{r7, lr}
   8095a:	b082      	sub	sp, #8
   8095c:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
   8095e:	4b25      	ldr	r3, [pc, #148]	; (809f4 <spi_slave_initialize+0x9c>)
   80960:	2200      	movs	r2, #0
   80962:	601a      	str	r2, [r3, #0]
	gs_spi_status.ul_total_command_number = 0;
   80964:	4b23      	ldr	r3, [pc, #140]	; (809f4 <spi_slave_initialize+0x9c>)
   80966:	2200      	movs	r2, #0
   80968:	605a      	str	r2, [r3, #4]
	for (i = 0; i < NB_STATUS_CMD; i++) {
   8096a:	2300      	movs	r3, #0
   8096c:	607b      	str	r3, [r7, #4]
   8096e:	e008      	b.n	80982 <spi_slave_initialize+0x2a>
		gs_spi_status.ul_cmd_list[i] = 0;
   80970:	4b20      	ldr	r3, [pc, #128]	; (809f4 <spi_slave_initialize+0x9c>)
   80972:	687a      	ldr	r2, [r7, #4]
   80974:	3202      	adds	r2, #2
   80976:	2100      	movs	r1, #0
   80978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
	gs_spi_status.ul_total_command_number = 0;
	for (i = 0; i < NB_STATUS_CMD; i++) {
   8097c:	687b      	ldr	r3, [r7, #4]
   8097e:	3301      	adds	r3, #1
   80980:	607b      	str	r3, [r7, #4]
   80982:	687b      	ldr	r3, [r7, #4]
   80984:	2b13      	cmp	r3, #19
   80986:	d9f3      	bls.n	80970 <spi_slave_initialize+0x18>
		gs_spi_status.ul_cmd_list[i] = 0;
	}
	gs_ul_spi_state = SLAVE_STATE_DATA;
   80988:	4b1b      	ldr	r3, [pc, #108]	; (809f8 <spi_slave_initialize+0xa0>)
   8098a:	2202      	movs	r2, #2
   8098c:	601a      	str	r2, [r3, #0]
	gs_ul_spi_cmd = RC_SYN;
   8098e:	4b1b      	ldr	r3, [pc, #108]	; (809fc <spi_slave_initialize+0xa4>)
   80990:	4a1b      	ldr	r2, [pc, #108]	; (80a00 <spi_slave_initialize+0xa8>)
   80992:	601a      	str	r2, [r3, #0]

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_SLAVE_BASE);
   80994:	481b      	ldr	r0, [pc, #108]	; (80a04 <spi_slave_initialize+0xac>)
   80996:	4b1c      	ldr	r3, [pc, #112]	; (80a08 <spi_slave_initialize+0xb0>)
   80998:	4798      	blx	r3
	spi_disable(SPI_SLAVE_BASE);
   8099a:	481a      	ldr	r0, [pc, #104]	; (80a04 <spi_slave_initialize+0xac>)
   8099c:	4b1b      	ldr	r3, [pc, #108]	; (80a0c <spi_slave_initialize+0xb4>)
   8099e:	4798      	blx	r3
	spi_reset(SPI_SLAVE_BASE);
   809a0:	4818      	ldr	r0, [pc, #96]	; (80a04 <spi_slave_initialize+0xac>)
   809a2:	4b1b      	ldr	r3, [pc, #108]	; (80a10 <spi_slave_initialize+0xb8>)
   809a4:	4798      	blx	r3
	spi_set_slave_mode(SPI_SLAVE_BASE);
   809a6:	4817      	ldr	r0, [pc, #92]	; (80a04 <spi_slave_initialize+0xac>)
   809a8:	4b1a      	ldr	r3, [pc, #104]	; (80a14 <spi_slave_initialize+0xbc>)
   809aa:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
   809ac:	4815      	ldr	r0, [pc, #84]	; (80a04 <spi_slave_initialize+0xac>)
   809ae:	4b1a      	ldr	r3, [pc, #104]	; (80a18 <spi_slave_initialize+0xc0>)
   809b0:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
   809b2:	4814      	ldr	r0, [pc, #80]	; (80a04 <spi_slave_initialize+0xac>)
   809b4:	210e      	movs	r1, #14
   809b6:	4b19      	ldr	r3, [pc, #100]	; (80a1c <spi_slave_initialize+0xc4>)
   809b8:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   809ba:	4812      	ldr	r0, [pc, #72]	; (80a04 <spi_slave_initialize+0xac>)
   809bc:	2100      	movs	r1, #0
   809be:	2201      	movs	r2, #1
   809c0:	4b17      	ldr	r3, [pc, #92]	; (80a20 <spi_slave_initialize+0xc8>)
   809c2:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
   809c4:	480f      	ldr	r0, [pc, #60]	; (80a04 <spi_slave_initialize+0xac>)
   809c6:	2100      	movs	r1, #0
   809c8:	2200      	movs	r2, #0
   809ca:	4b16      	ldr	r3, [pc, #88]	; (80a24 <spi_slave_initialize+0xcc>)
   809cc:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
   809ce:	480d      	ldr	r0, [pc, #52]	; (80a04 <spi_slave_initialize+0xac>)
   809d0:	2100      	movs	r1, #0
   809d2:	2200      	movs	r2, #0
   809d4:	4b14      	ldr	r3, [pc, #80]	; (80a28 <spi_slave_initialize+0xd0>)
   809d6:	4798      	blx	r3
	spi_enable_interrupt(SPI_SLAVE_BASE, SPI_IER_RDRF);
   809d8:	480a      	ldr	r0, [pc, #40]	; (80a04 <spi_slave_initialize+0xac>)
   809da:	2101      	movs	r1, #1
   809dc:	4b13      	ldr	r3, [pc, #76]	; (80a2c <spi_slave_initialize+0xd4>)
   809de:	4798      	blx	r3
	spi_enable(SPI_SLAVE_BASE);
   809e0:	4808      	ldr	r0, [pc, #32]	; (80a04 <spi_slave_initialize+0xac>)
   809e2:	4b13      	ldr	r3, [pc, #76]	; (80a30 <spi_slave_initialize+0xd8>)
   809e4:	4798      	blx	r3

	/* Start waiting command. */
	spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
   809e6:	4805      	ldr	r0, [pc, #20]	; (809fc <spi_slave_initialize+0xa4>)
   809e8:	2104      	movs	r1, #4
   809ea:	4b12      	ldr	r3, [pc, #72]	; (80a34 <spi_slave_initialize+0xdc>)
   809ec:	4798      	blx	r3
}
   809ee:	3708      	adds	r7, #8
   809f0:	46bd      	mov	sp, r7
   809f2:	bd80      	pop	{r7, pc}
   809f4:	20070468 	.word	0x20070468
   809f8:	20070458 	.word	0x20070458
   809fc:	20070000 	.word	0x20070000
   80a00:	55aa55aa 	.word	0x55aa55aa
   80a04:	40008000 	.word	0x40008000
   80a08:	00080189 	.word	0x00080189
   80a0c:	00080829 	.word	0x00080829
   80a10:	000807f9 	.word	0x000807f9
   80a14:	00080841 	.word	0x00080841
   80a18:	00080861 	.word	0x00080861
   80a1c:	000801ad 	.word	0x000801ad
   80a20:	000802d1 	.word	0x000802d1
   80a24:	00080321 	.word	0x00080321
   80a28:	00080371 	.word	0x00080371
   80a2c:	00080899 	.word	0x00080899
   80a30:	00080811 	.word	0x00080811
   80a34:	000808b5 	.word	0x000808b5

00080a38 <spi_initialize>:
 * \brief Application entry point for SPI example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80a38:	b580      	push	{r7, lr}
   80a3a:	b084      	sub	sp, #16
   80a3c:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   80a3e:	2300      	movs	r3, #0
   80a40:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80a42:	4b0c      	ldr	r3, [pc, #48]	; (80a74 <spi_initialize+0x3c>)
   80a44:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   80a46:	2300      	movs	r3, #0
   80a48:	80fb      	strh	r3, [r7, #6]

	///* Initialize the SAM system. */
	//sysclk_init();
	//board_init();

	spi_slave_initialize();
   80a4a:	4b0b      	ldr	r3, [pc, #44]	; (80a78 <spi_initialize+0x40>)
   80a4c:	4798      	blx	r3
	
	*reg_ptr |= 0x00BB;
   80a4e:	68bb      	ldr	r3, [r7, #8]
   80a50:	681b      	ldr	r3, [r3, #0]
   80a52:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80a56:	68bb      	ldr	r3, [r7, #8]
   80a58:	601a      	str	r2, [r3, #0]

	/* Configure SPI interrupts for slave only. */
	NVIC_DisableIRQ(SPI_IRQn);
   80a5a:	2018      	movs	r0, #24
   80a5c:	4b07      	ldr	r3, [pc, #28]	; (80a7c <spi_initialize+0x44>)
   80a5e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
   80a60:	2018      	movs	r0, #24
   80a62:	4b07      	ldr	r3, [pc, #28]	; (80a80 <spi_initialize+0x48>)
   80a64:	4798      	blx	r3
	//NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);
   80a66:	2018      	movs	r0, #24
   80a68:	4b06      	ldr	r3, [pc, #24]	; (80a84 <spi_initialize+0x4c>)
   80a6a:	4798      	blx	r3
	//while (1) {
		//
		//*reg_ptr |= 0x00BB;
		//
		//}	// Put 0xBB in the SPI shift register.
	return;
   80a6c:	bf00      	nop
}
   80a6e:	3710      	adds	r7, #16
   80a70:	46bd      	mov	sp, r7
   80a72:	bd80      	pop	{r7, pc}
   80a74:	4000800c 	.word	0x4000800c
   80a78:	00080959 	.word	0x00080959
   80a7c:	00080791 	.word	0x00080791
   80a80:	000807c5 	.word	0x000807c5
   80a84:	00080761 	.word	0x00080761

00080a88 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80a88:	b480      	push	{r7}
   80a8a:	b083      	sub	sp, #12
   80a8c:	af00      	add	r7, sp, #0
   80a8e:	4603      	mov	r3, r0
   80a90:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a92:	4b08      	ldr	r3, [pc, #32]	; (80ab4 <NVIC_EnableIRQ+0x2c>)
   80a94:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80a98:	0952      	lsrs	r2, r2, #5
   80a9a:	79f9      	ldrb	r1, [r7, #7]
   80a9c:	f001 011f 	and.w	r1, r1, #31
   80aa0:	2001      	movs	r0, #1
   80aa2:	fa00 f101 	lsl.w	r1, r0, r1
   80aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80aaa:	370c      	adds	r7, #12
   80aac:	46bd      	mov	sp, r7
   80aae:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ab2:	4770      	bx	lr
   80ab4:	e000e100 	.word	0xe000e100

00080ab8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80ab8:	b480      	push	{r7}
   80aba:	b083      	sub	sp, #12
   80abc:	af00      	add	r7, sp, #0
   80abe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80ac0:	687b      	ldr	r3, [r7, #4]
   80ac2:	2b07      	cmp	r3, #7
   80ac4:	d825      	bhi.n	80b12 <osc_get_rate+0x5a>
   80ac6:	a201      	add	r2, pc, #4	; (adr r2, 80acc <osc_get_rate+0x14>)
   80ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80acc:	00080aed 	.word	0x00080aed
   80ad0:	00080af3 	.word	0x00080af3
   80ad4:	00080af9 	.word	0x00080af9
   80ad8:	00080aff 	.word	0x00080aff
   80adc:	00080b03 	.word	0x00080b03
   80ae0:	00080b07 	.word	0x00080b07
   80ae4:	00080b0b 	.word	0x00080b0b
   80ae8:	00080b0f 	.word	0x00080b0f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80aec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80af0:	e010      	b.n	80b14 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80af6:	e00d      	b.n	80b14 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80afc:	e00a      	b.n	80b14 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80afe:	4b08      	ldr	r3, [pc, #32]	; (80b20 <osc_get_rate+0x68>)
   80b00:	e008      	b.n	80b14 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80b02:	4b08      	ldr	r3, [pc, #32]	; (80b24 <osc_get_rate+0x6c>)
   80b04:	e006      	b.n	80b14 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80b06:	4b08      	ldr	r3, [pc, #32]	; (80b28 <osc_get_rate+0x70>)
   80b08:	e004      	b.n	80b14 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80b0a:	4b07      	ldr	r3, [pc, #28]	; (80b28 <osc_get_rate+0x70>)
   80b0c:	e002      	b.n	80b14 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80b0e:	4b06      	ldr	r3, [pc, #24]	; (80b28 <osc_get_rate+0x70>)
   80b10:	e000      	b.n	80b14 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80b12:	2300      	movs	r3, #0
}
   80b14:	4618      	mov	r0, r3
   80b16:	370c      	adds	r7, #12
   80b18:	46bd      	mov	sp, r7
   80b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b1e:	4770      	bx	lr
   80b20:	003d0900 	.word	0x003d0900
   80b24:	007a1200 	.word	0x007a1200
   80b28:	00b71b00 	.word	0x00b71b00

00080b2c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80b2c:	b580      	push	{r7, lr}
   80b2e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80b30:	2006      	movs	r0, #6
   80b32:	4b04      	ldr	r3, [pc, #16]	; (80b44 <sysclk_get_main_hz+0x18>)
   80b34:	4798      	blx	r3
   80b36:	4602      	mov	r2, r0
   80b38:	4613      	mov	r3, r2
   80b3a:	00db      	lsls	r3, r3, #3
   80b3c:	1a9b      	subs	r3, r3, r2
   80b3e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80b40:	4618      	mov	r0, r3
   80b42:	bd80      	pop	{r7, pc}
   80b44:	00080ab9 	.word	0x00080ab9

00080b48 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80b48:	b580      	push	{r7, lr}
   80b4a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80b4c:	4b02      	ldr	r3, [pc, #8]	; (80b58 <sysclk_get_cpu_hz+0x10>)
   80b4e:	4798      	blx	r3
   80b50:	4603      	mov	r3, r0
   80b52:	085b      	lsrs	r3, r3, #1
}
   80b54:	4618      	mov	r0, r3
   80b56:	bd80      	pop	{r7, pc}
   80b58:	00080b2d 	.word	0x00080b2d

00080b5c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80b5c:	b580      	push	{r7, lr}
   80b5e:	b082      	sub	sp, #8
   80b60:	af00      	add	r7, sp, #0
   80b62:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80b64:	6878      	ldr	r0, [r7, #4]
   80b66:	4b02      	ldr	r3, [pc, #8]	; (80b70 <sysclk_enable_peripheral_clock+0x14>)
   80b68:	4798      	blx	r3
}
   80b6a:	3708      	adds	r7, #8
   80b6c:	46bd      	mov	sp, r7
   80b6e:	bd80      	pop	{r7, pc}
   80b70:	000824d5 	.word	0x000824d5

00080b74 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   80b74:	b580      	push	{r7, lr}
   80b76:	b084      	sub	sp, #16
   80b78:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80b7a:	2300      	movs	r3, #0
   80b7c:	60bb      	str	r3, [r7, #8]
   80b7e:	2300      	movs	r3, #0
   80b80:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   80b82:	2300      	movs	r3, #0
   80b84:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   80b86:	2300      	movs	r3, #0
   80b88:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80b8a:	483b      	ldr	r0, [pc, #236]	; (80c78 <USART0_Handler+0x104>)
   80b8c:	4b3b      	ldr	r3, [pc, #236]	; (80c7c <USART0_Handler+0x108>)
   80b8e:	4798      	blx	r3
   80b90:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   80b92:	2058      	movs	r0, #88	; 0x58
   80b94:	4b3a      	ldr	r3, [pc, #232]	; (80c80 <USART0_Handler+0x10c>)
   80b96:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   80b98:	4b3a      	ldr	r3, [pc, #232]	; (80c84 <USART0_Handler+0x110>)
   80b9a:	781b      	ldrb	r3, [r3, #0]
   80b9c:	2b00      	cmp	r3, #0
   80b9e:	d167      	bne.n	80c70 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   80ba0:	683b      	ldr	r3, [r7, #0]
   80ba2:	f003 0301 	and.w	r3, r3, #1
   80ba6:	2b00      	cmp	r3, #0
   80ba8:	d062      	beq.n	80c70 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80baa:	4833      	ldr	r0, [pc, #204]	; (80c78 <USART0_Handler+0x104>)
   80bac:	4936      	ldr	r1, [pc, #216]	; (80c88 <USART0_Handler+0x114>)
   80bae:	4b37      	ldr	r3, [pc, #220]	; (80c8c <USART0_Handler+0x118>)
   80bb0:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   80bb2:	4b35      	ldr	r3, [pc, #212]	; (80c88 <USART0_Handler+0x114>)
   80bb4:	681b      	ldr	r3, [r3, #0]
   80bb6:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   80bb8:	68bb      	ldr	r3, [r7, #8]
   80bba:	2b31      	cmp	r3, #49	; 0x31
   80bbc:	d102      	bne.n	80bc4 <USART0_Handler+0x50>
				command_start = 1;
   80bbe:	4b34      	ldr	r3, [pc, #208]	; (80c90 <USART0_Handler+0x11c>)
   80bc0:	2201      	movs	r2, #1
   80bc2:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   80bc4:	68bb      	ldr	r3, [r7, #8]
   80bc6:	2b32      	cmp	r3, #50	; 0x32
   80bc8:	d102      	bne.n	80bd0 <USART0_Handler+0x5c>
				command_end = 1;
   80bca:	4b32      	ldr	r3, [pc, #200]	; (80c94 <USART0_Handler+0x120>)
   80bcc:	2201      	movs	r2, #1
   80bce:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   80bd0:	4b2f      	ldr	r3, [pc, #188]	; (80c90 <USART0_Handler+0x11c>)
   80bd2:	781b      	ldrb	r3, [r3, #0]
   80bd4:	2b01      	cmp	r3, #1
   80bd6:	d11e      	bne.n	80c16 <USART0_Handler+0xa2>
   80bd8:	68bb      	ldr	r3, [r7, #8]
   80bda:	2b00      	cmp	r3, #0
   80bdc:	d01b      	beq.n	80c16 <USART0_Handler+0xa2>
   80bde:	68bb      	ldr	r3, [r7, #8]
   80be0:	2b31      	cmp	r3, #49	; 0x31
   80be2:	d018      	beq.n	80c16 <USART0_Handler+0xa2>
   80be4:	68bb      	ldr	r3, [r7, #8]
   80be6:	2b32      	cmp	r3, #50	; 0x32
   80be8:	d015      	beq.n	80c16 <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80bea:	4b2b      	ldr	r3, [pc, #172]	; (80c98 <USART0_Handler+0x124>)
   80bec:	781a      	ldrb	r2, [r3, #0]
   80bee:	4b2b      	ldr	r3, [pc, #172]	; (80c9c <USART0_Handler+0x128>)
   80bf0:	fba3 1302 	umull	r1, r3, r3, r2
   80bf4:	08d9      	lsrs	r1, r3, #3
   80bf6:	460b      	mov	r3, r1
   80bf8:	009b      	lsls	r3, r3, #2
   80bfa:	440b      	add	r3, r1
   80bfc:	005b      	lsls	r3, r3, #1
   80bfe:	1ad3      	subs	r3, r2, r3
   80c00:	b2db      	uxtb	r3, r3
   80c02:	68ba      	ldr	r2, [r7, #8]
   80c04:	b2d1      	uxtb	r1, r2
   80c06:	4a26      	ldr	r2, [pc, #152]	; (80ca0 <USART0_Handler+0x12c>)
   80c08:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80c0a:	4b23      	ldr	r3, [pc, #140]	; (80c98 <USART0_Handler+0x124>)
   80c0c:	781b      	ldrb	r3, [r3, #0]
   80c0e:	3301      	adds	r3, #1
   80c10:	b2da      	uxtb	r2, r3
   80c12:	4b21      	ldr	r3, [pc, #132]	; (80c98 <USART0_Handler+0x124>)
   80c14:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   80c16:	4b1f      	ldr	r3, [pc, #124]	; (80c94 <USART0_Handler+0x120>)
   80c18:	781b      	ldrb	r3, [r3, #0]
   80c1a:	2b01      	cmp	r3, #1
   80c1c:	d11d      	bne.n	80c5a <USART0_Handler+0xe6>
   80c1e:	4b1c      	ldr	r3, [pc, #112]	; (80c90 <USART0_Handler+0x11c>)
   80c20:	781b      	ldrb	r3, [r3, #0]
   80c22:	2b01      	cmp	r3, #1
   80c24:	d119      	bne.n	80c5a <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   80c26:	4b1f      	ldr	r3, [pc, #124]	; (80ca4 <USART0_Handler+0x130>)
   80c28:	4798      	blx	r3
				command_end = 0;
   80c2a:	4b1a      	ldr	r3, [pc, #104]	; (80c94 <USART0_Handler+0x120>)
   80c2c:	2200      	movs	r2, #0
   80c2e:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80c30:	4b17      	ldr	r3, [pc, #92]	; (80c90 <USART0_Handler+0x11c>)
   80c32:	2200      	movs	r2, #0
   80c34:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   80c36:	4b18      	ldr	r3, [pc, #96]	; (80c98 <USART0_Handler+0x124>)
   80c38:	2200      	movs	r2, #0
   80c3a:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80c3c:	2300      	movs	r3, #0
   80c3e:	73bb      	strb	r3, [r7, #14]
   80c40:	e006      	b.n	80c50 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   80c42:	7bbb      	ldrb	r3, [r7, #14]
   80c44:	4a16      	ldr	r2, [pc, #88]	; (80ca0 <USART0_Handler+0x12c>)
   80c46:	2100      	movs	r1, #0
   80c48:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80c4a:	7bbb      	ldrb	r3, [r7, #14]
   80c4c:	3301      	adds	r3, #1
   80c4e:	73bb      	strb	r3, [r7, #14]
   80c50:	7bbb      	ldrb	r3, [r7, #14]
   80c52:	2b09      	cmp	r3, #9
   80c54:	d9f5      	bls.n	80c42 <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   80c56:	2301      	movs	r3, #1
   80c58:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80c5a:	7bfb      	ldrb	r3, [r7, #15]
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d105      	bne.n	80c6c <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80c60:	4b09      	ldr	r3, [pc, #36]	; (80c88 <USART0_Handler+0x114>)
   80c62:	681b      	ldr	r3, [r3, #0]
   80c64:	4804      	ldr	r0, [pc, #16]	; (80c78 <USART0_Handler+0x104>)
   80c66:	4619      	mov	r1, r3
   80c68:	4b0f      	ldr	r3, [pc, #60]	; (80ca8 <USART0_Handler+0x134>)
   80c6a:	4798      	blx	r3
					
			command_completed = 0;
   80c6c:	2300      	movs	r3, #0
   80c6e:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80c70:	3710      	adds	r7, #16
   80c72:	46bd      	mov	sp, r7
   80c74:	bd80      	pop	{r7, pc}
   80c76:	bf00      	nop
   80c78:	40098000 	.word	0x40098000
   80c7c:	00082755 	.word	0x00082755
   80c80:	00081ee9 	.word	0x00081ee9
   80c84:	200704c8 	.word	0x200704c8
   80c88:	200704c4 	.word	0x200704c4
   80c8c:	000827d9 	.word	0x000827d9
   80c90:	200704c9 	.word	0x200704c9
   80c94:	200704ca 	.word	0x200704ca
   80c98:	200704d8 	.word	0x200704d8
   80c9c:	cccccccd 	.word	0xcccccccd
   80ca0:	200704cc 	.word	0x200704cc
   80ca4:	00080cad 	.word	0x00080cad
   80ca8:	000827a5 	.word	0x000827a5

00080cac <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   80cac:	b580      	push	{r7, lr}
   80cae:	b088      	sub	sp, #32
   80cb0:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   80cb2:	2300      	movs	r3, #0
   80cb4:	61bb      	str	r3, [r7, #24]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   80cb6:	2300      	movs	r3, #0
   80cb8:	75fb      	strb	r3, [r7, #23]
	uint8_t hk = 1;
   80cba:	2301      	movs	r3, #1
   80cbc:	75bb      	strb	r3, [r7, #22]
	uint8_t sad = 1;
   80cbe:	2301      	movs	r3, #1
   80cc0:	757b      	strb	r3, [r7, #21]
	uint8_t msg = 1;
   80cc2:	2301      	movs	r3, #1
   80cc4:	753b      	strb	r3, [r7, #20]
	
	float temp = 295.0;
   80cc6:	4b78      	ldr	r3, [pc, #480]	; (80ea8 <check_command+0x1fc>)
   80cc8:	613b      	str	r3, [r7, #16]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   80cca:	2319      	movs	r3, #25
   80ccc:	73fb      	strb	r3, [r7, #15]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   80cce:	4b77      	ldr	r3, [pc, #476]	; (80eac <check_command+0x200>)
   80cd0:	60bb      	str	r3, [r7, #8]
	
	hk =  check_string(check_array);
   80cd2:	68b8      	ldr	r0, [r7, #8]
   80cd4:	4b76      	ldr	r3, [pc, #472]	; (80eb0 <check_command+0x204>)
   80cd6:	4798      	blx	r3
   80cd8:	4603      	mov	r3, r0
   80cda:	75bb      	strb	r3, [r7, #22]
	
	check_array = "i am sad";
   80cdc:	4b75      	ldr	r3, [pc, #468]	; (80eb4 <check_command+0x208>)
   80cde:	60bb      	str	r3, [r7, #8]
	
	sad = check_string(check_array);
   80ce0:	68b8      	ldr	r0, [r7, #8]
   80ce2:	4b73      	ldr	r3, [pc, #460]	; (80eb0 <check_command+0x204>)
   80ce4:	4798      	blx	r3
   80ce6:	4603      	mov	r3, r0
   80ce8:	757b      	strb	r3, [r7, #21]
	
	check_array = "msg";
   80cea:	4b73      	ldr	r3, [pc, #460]	; (80eb8 <check_command+0x20c>)
   80cec:	60bb      	str	r3, [r7, #8]
	
	msg = check_string(check_array);
   80cee:	68b8      	ldr	r0, [r7, #8]
   80cf0:	4b6f      	ldr	r3, [pc, #444]	; (80eb0 <check_command+0x204>)
   80cf2:	4798      	blx	r3
   80cf4:	4603      	mov	r3, r0
   80cf6:	753b      	strb	r3, [r7, #20]
	
	if (hk == 1)
   80cf8:	7dbb      	ldrb	r3, [r7, #22]
   80cfa:	2b01      	cmp	r3, #1
   80cfc:	d177      	bne.n	80dee <check_command+0x142>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80cfe:	4b6f      	ldr	r3, [pc, #444]	; (80ebc <check_command+0x210>)
   80d00:	61fb      	str	r3, [r7, #28]
				
		while(*message_array)
   80d02:	e00d      	b.n	80d20 <check_command+0x74>
		{
			character = *message_array;
   80d04:	69fb      	ldr	r3, [r7, #28]
   80d06:	781b      	ldrb	r3, [r3, #0]
   80d08:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80d0a:	bf00      	nop
   80d0c:	486c      	ldr	r0, [pc, #432]	; (80ec0 <check_command+0x214>)
   80d0e:	69b9      	ldr	r1, [r7, #24]
   80d10:	4b6c      	ldr	r3, [pc, #432]	; (80ec4 <check_command+0x218>)
   80d12:	4798      	blx	r3
   80d14:	4603      	mov	r3, r0
   80d16:	2b00      	cmp	r3, #0
   80d18:	d1f8      	bne.n	80d0c <check_command+0x60>
			
			message_array++;
   80d1a:	69fb      	ldr	r3, [r7, #28]
   80d1c:	3301      	adds	r3, #1
   80d1e:	61fb      	str	r3, [r7, #28]
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80d20:	69fb      	ldr	r3, [r7, #28]
   80d22:	781b      	ldrb	r3, [r3, #0]
   80d24:	2b00      	cmp	r3, #0
   80d26:	d1ed      	bne.n	80d04 <check_command+0x58>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   80d28:	4b67      	ldr	r3, [pc, #412]	; (80ec8 <check_command+0x21c>)
   80d2a:	61fb      	str	r3, [r7, #28]
		
		while(*message_array)
   80d2c:	e00d      	b.n	80d4a <check_command+0x9e>
		{
			character = *message_array;
   80d2e:	69fb      	ldr	r3, [r7, #28]
   80d30:	781b      	ldrb	r3, [r3, #0]
   80d32:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80d34:	bf00      	nop
   80d36:	4862      	ldr	r0, [pc, #392]	; (80ec0 <check_command+0x214>)
   80d38:	69b9      	ldr	r1, [r7, #24]
   80d3a:	4b62      	ldr	r3, [pc, #392]	; (80ec4 <check_command+0x218>)
   80d3c:	4798      	blx	r3
   80d3e:	4603      	mov	r3, r0
   80d40:	2b00      	cmp	r3, #0
   80d42:	d1f8      	bne.n	80d36 <check_command+0x8a>
			
			message_array++;
   80d44:	69fb      	ldr	r3, [r7, #28]
   80d46:	3301      	adds	r3, #1
   80d48:	61fb      	str	r3, [r7, #28]
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80d4a:	69fb      	ldr	r3, [r7, #28]
   80d4c:	781b      	ldrb	r3, [r3, #0]
   80d4e:	2b00      	cmp	r3, #0
   80d50:	d1ed      	bne.n	80d2e <check_command+0x82>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = (float)(can_glob_data_reg[0]);	// This is the ADC value retrieved from the subsystem.
   80d52:	4b5e      	ldr	r3, [pc, #376]	; (80ecc <check_command+0x220>)
   80d54:	681a      	ldr	r2, [r3, #0]
   80d56:	4b5e      	ldr	r3, [pc, #376]	; (80ed0 <check_command+0x224>)
   80d58:	4610      	mov	r0, r2
   80d5a:	4798      	blx	r3
   80d5c:	4603      	mov	r3, r0
   80d5e:	613b      	str	r3, [r7, #16]
			
		temp = convert_to_temp(temp);						// Temperature returned is in degrees celsius.
   80d60:	6938      	ldr	r0, [r7, #16]
   80d62:	4b5c      	ldr	r3, [pc, #368]	; (80ed4 <check_command+0x228>)
   80d64:	4798      	blx	r3
   80d66:	6138      	str	r0, [r7, #16]

		temp_int = (uint8_t)temp + 1;							// Convert the float to an integer.
   80d68:	4b5b      	ldr	r3, [pc, #364]	; (80ed8 <check_command+0x22c>)
   80d6a:	6938      	ldr	r0, [r7, #16]
   80d6c:	4798      	blx	r3
   80d6e:	4603      	mov	r3, r0
   80d70:	b2db      	uxtb	r3, r3
   80d72:	3301      	adds	r3, #1
   80d74:	73fb      	strb	r3, [r7, #15]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80d76:	7bfb      	ldrb	r3, [r7, #15]
   80d78:	4618      	mov	r0, r3
   80d7a:	4b58      	ldr	r3, [pc, #352]	; (80edc <check_command+0x230>)
   80d7c:	4798      	blx	r3
   80d7e:	4603      	mov	r3, r0
   80d80:	73fb      	strb	r3, [r7, #15]
		
		lower = temp_int << 4;
   80d82:	7bfb      	ldrb	r3, [r7, #15]
   80d84:	011b      	lsls	r3, r3, #4
   80d86:	71fb      	strb	r3, [r7, #7]
		lower = lower >> 4;
   80d88:	79fb      	ldrb	r3, [r7, #7]
   80d8a:	091b      	lsrs	r3, r3, #4
   80d8c:	71fb      	strb	r3, [r7, #7]
		upper = temp_int >> 4;
   80d8e:	7bfb      	ldrb	r3, [r7, #15]
   80d90:	091b      	lsrs	r3, r3, #4
   80d92:	71bb      	strb	r3, [r7, #6]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   80d94:	79fb      	ldrb	r3, [r7, #7]
   80d96:	3330      	adds	r3, #48	; 0x30
   80d98:	71fb      	strb	r3, [r7, #7]
		upper += (uint8_t)0x30;
   80d9a:	79bb      	ldrb	r3, [r7, #6]
   80d9c:	3330      	adds	r3, #48	; 0x30
   80d9e:	71bb      	strb	r3, [r7, #6]
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80da0:	bf00      	nop
   80da2:	79bb      	ldrb	r3, [r7, #6]
   80da4:	4846      	ldr	r0, [pc, #280]	; (80ec0 <check_command+0x214>)
   80da6:	4619      	mov	r1, r3
   80da8:	4b46      	ldr	r3, [pc, #280]	; (80ec4 <check_command+0x218>)
   80daa:	4798      	blx	r3
   80dac:	4603      	mov	r3, r0
   80dae:	2b00      	cmp	r3, #0
   80db0:	d1f7      	bne.n	80da2 <check_command+0xf6>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   80db2:	bf00      	nop
   80db4:	79fb      	ldrb	r3, [r7, #7]
   80db6:	4842      	ldr	r0, [pc, #264]	; (80ec0 <check_command+0x214>)
   80db8:	4619      	mov	r1, r3
   80dba:	4b42      	ldr	r3, [pc, #264]	; (80ec4 <check_command+0x218>)
   80dbc:	4798      	blx	r3
   80dbe:	4603      	mov	r3, r0
   80dc0:	2b00      	cmp	r3, #0
   80dc2:	d1f7      	bne.n	80db4 <check_command+0x108>
		
		message_array = " C\n\r";							// Finish the sentence.
   80dc4:	4b46      	ldr	r3, [pc, #280]	; (80ee0 <check_command+0x234>)
   80dc6:	61fb      	str	r3, [r7, #28]

		while(*message_array)
   80dc8:	e00d      	b.n	80de6 <check_command+0x13a>
		{
			character = *message_array;
   80dca:	69fb      	ldr	r3, [r7, #28]
   80dcc:	781b      	ldrb	r3, [r3, #0]
   80dce:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80dd0:	bf00      	nop
   80dd2:	483b      	ldr	r0, [pc, #236]	; (80ec0 <check_command+0x214>)
   80dd4:	69b9      	ldr	r1, [r7, #24]
   80dd6:	4b3b      	ldr	r3, [pc, #236]	; (80ec4 <check_command+0x218>)
   80dd8:	4798      	blx	r3
   80dda:	4603      	mov	r3, r0
   80ddc:	2b00      	cmp	r3, #0
   80dde:	d1f8      	bne.n	80dd2 <check_command+0x126>
			
			message_array++;
   80de0:	69fb      	ldr	r3, [r7, #28]
   80de2:	3301      	adds	r3, #1
   80de4:	61fb      	str	r3, [r7, #28]
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   80de6:	69fb      	ldr	r3, [r7, #28]
   80de8:	781b      	ldrb	r3, [r3, #0]
   80dea:	2b00      	cmp	r3, #0
   80dec:	d1ed      	bne.n	80dca <check_command+0x11e>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   80dee:	7d7b      	ldrb	r3, [r7, #21]
   80df0:	2b01      	cmp	r3, #1
   80df2:	d114      	bne.n	80e1e <check_command+0x172>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   80df4:	4b3b      	ldr	r3, [pc, #236]	; (80ee4 <check_command+0x238>)
   80df6:	61fb      	str	r3, [r7, #28]
		
		while(*message_array)
   80df8:	e00d      	b.n	80e16 <check_command+0x16a>
		{
			character = *message_array;
   80dfa:	69fb      	ldr	r3, [r7, #28]
   80dfc:	781b      	ldrb	r3, [r3, #0]
   80dfe:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e00:	bf00      	nop
   80e02:	482f      	ldr	r0, [pc, #188]	; (80ec0 <check_command+0x214>)
   80e04:	69b9      	ldr	r1, [r7, #24]
   80e06:	4b2f      	ldr	r3, [pc, #188]	; (80ec4 <check_command+0x218>)
   80e08:	4798      	blx	r3
   80e0a:	4603      	mov	r3, r0
   80e0c:	2b00      	cmp	r3, #0
   80e0e:	d1f8      	bne.n	80e02 <check_command+0x156>
			
			message_array++;
   80e10:	69fb      	ldr	r3, [r7, #28]
   80e12:	3301      	adds	r3, #1
   80e14:	61fb      	str	r3, [r7, #28]
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80e16:	69fb      	ldr	r3, [r7, #28]
   80e18:	781b      	ldrb	r3, [r3, #0]
   80e1a:	2b00      	cmp	r3, #0
   80e1c:	d1ed      	bne.n	80dfa <check_command+0x14e>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   80e1e:	7d3b      	ldrb	r3, [r7, #20]
   80e20:	2b01      	cmp	r3, #1
   80e22:	d13d      	bne.n	80ea0 <check_command+0x1f4>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   80e24:	4b30      	ldr	r3, [pc, #192]	; (80ee8 <check_command+0x23c>)
   80e26:	61fb      	str	r3, [r7, #28]
		
		while(*message_array)
   80e28:	e00d      	b.n	80e46 <check_command+0x19a>
		{
			character = *message_array;
   80e2a:	69fb      	ldr	r3, [r7, #28]
   80e2c:	781b      	ldrb	r3, [r3, #0]
   80e2e:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e30:	bf00      	nop
   80e32:	4823      	ldr	r0, [pc, #140]	; (80ec0 <check_command+0x214>)
   80e34:	69b9      	ldr	r1, [r7, #24]
   80e36:	4b23      	ldr	r3, [pc, #140]	; (80ec4 <check_command+0x218>)
   80e38:	4798      	blx	r3
   80e3a:	4603      	mov	r3, r0
   80e3c:	2b00      	cmp	r3, #0
   80e3e:	d1f8      	bne.n	80e32 <check_command+0x186>
			
			message_array++;
   80e40:	69fb      	ldr	r3, [r7, #28]
   80e42:	3301      	adds	r3, #1
   80e44:	61fb      	str	r3, [r7, #28]
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   80e46:	69fb      	ldr	r3, [r7, #28]
   80e48:	781b      	ldrb	r3, [r3, #0]
   80e4a:	2b00      	cmp	r3, #0
   80e4c:	d1ed      	bne.n	80e2a <check_command+0x17e>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(can_glob_msg_reg[0]);	// This is the ADC value retrieved from the subsystem.
   80e4e:	4b27      	ldr	r3, [pc, #156]	; (80eec <check_command+0x240>)
   80e50:	681b      	ldr	r3, [r3, #0]
   80e52:	603b      	str	r3, [r7, #0]
		temp1 = temp1 & (uint32_t)0x000000FF;
   80e54:	683b      	ldr	r3, [r7, #0]
   80e56:	b2db      	uxtb	r3, r3
   80e58:	603b      	str	r3, [r7, #0]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   80e5a:	683b      	ldr	r3, [r7, #0]
   80e5c:	2b40      	cmp	r3, #64	; 0x40
   80e5e:	d802      	bhi.n	80e66 <check_command+0x1ba>
   80e60:	683b      	ldr	r3, [r7, #0]
   80e62:	2b5a      	cmp	r3, #90	; 0x5a
   80e64:	d807      	bhi.n	80e76 <check_command+0x1ca>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   80e66:	bf00      	nop
   80e68:	4815      	ldr	r0, [pc, #84]	; (80ec0 <check_command+0x214>)
   80e6a:	6839      	ldr	r1, [r7, #0]
   80e6c:	4b15      	ldr	r3, [pc, #84]	; (80ec4 <check_command+0x218>)
   80e6e:	4798      	blx	r3
   80e70:	4603      	mov	r3, r0
   80e72:	2b00      	cmp	r3, #0
   80e74:	d1f8      	bne.n	80e68 <check_command+0x1bc>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   80e76:	4b1e      	ldr	r3, [pc, #120]	; (80ef0 <check_command+0x244>)
   80e78:	61fb      	str	r3, [r7, #28]

		while(*message_array)
   80e7a:	e00d      	b.n	80e98 <check_command+0x1ec>
		{
			character = *message_array;
   80e7c:	69fb      	ldr	r3, [r7, #28]
   80e7e:	781b      	ldrb	r3, [r3, #0]
   80e80:	61bb      	str	r3, [r7, #24]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e82:	bf00      	nop
   80e84:	480e      	ldr	r0, [pc, #56]	; (80ec0 <check_command+0x214>)
   80e86:	69b9      	ldr	r1, [r7, #24]
   80e88:	4b0e      	ldr	r3, [pc, #56]	; (80ec4 <check_command+0x218>)
   80e8a:	4798      	blx	r3
   80e8c:	4603      	mov	r3, r0
   80e8e:	2b00      	cmp	r3, #0
   80e90:	d1f8      	bne.n	80e84 <check_command+0x1d8>
			
			message_array++;
   80e92:	69fb      	ldr	r3, [r7, #28]
   80e94:	3301      	adds	r3, #1
   80e96:	61fb      	str	r3, [r7, #28]
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   80e98:	69fb      	ldr	r3, [r7, #28]
   80e9a:	781b      	ldrb	r3, [r3, #0]
   80e9c:	2b00      	cmp	r3, #0
   80e9e:	d1ed      	bne.n	80e7c <check_command+0x1d0>
			
			message_array++;
		}
	}
	
	return;
   80ea0:	bf00      	nop
}
   80ea2:	3720      	adds	r7, #32
   80ea4:	46bd      	mov	sp, r7
   80ea6:	bd80      	pop	{r7, pc}
   80ea8:	43938000 	.word	0x43938000
   80eac:	000868a0 	.word	0x000868a0
   80eb0:	00080ef5 	.word	0x00080ef5
   80eb4:	000868a4 	.word	0x000868a4
   80eb8:	000868b0 	.word	0x000868b0
   80ebc:	000868b4 	.word	0x000868b4
   80ec0:	40098000 	.word	0x40098000
   80ec4:	000827a5 	.word	0x000827a5
   80ec8:	000868d4 	.word	0x000868d4
   80ecc:	2007a6e4 	.word	0x2007a6e4
   80ed0:	000861c5 	.word	0x000861c5
   80ed4:	00080f51 	.word	0x00080f51
   80ed8:	00086515 	.word	0x00086515
   80edc:	00081089 	.word	0x00081089
   80ee0:	000868f0 	.word	0x000868f0
   80ee4:	000868f8 	.word	0x000868f8
   80ee8:	00086914 	.word	0x00086914
   80eec:	2007a70c 	.word	0x2007a70c
   80ef0:	0008693c 	.word	0x0008693c

00080ef4 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   80ef4:	b480      	push	{r7}
   80ef6:	b085      	sub	sp, #20
   80ef8:	af00      	add	r7, sp, #0
   80efa:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   80efc:	2300      	movs	r3, #0
   80efe:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   80f00:	2301      	movs	r3, #1
   80f02:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   80f04:	687b      	ldr	r3, [r7, #4]
   80f06:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   80f08:	2300      	movs	r3, #0
   80f0a:	73fb      	strb	r3, [r7, #15]
   80f0c:	e014      	b.n	80f38 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   80f0e:	68bb      	ldr	r3, [r7, #8]
   80f10:	781a      	ldrb	r2, [r3, #0]
   80f12:	7bfb      	ldrb	r3, [r7, #15]
   80f14:	490d      	ldr	r1, [pc, #52]	; (80f4c <check_string+0x58>)
   80f16:	5ccb      	ldrb	r3, [r1, r3]
   80f18:	429a      	cmp	r2, r3
   80f1a:	d002      	beq.n	80f22 <check_string+0x2e>
		{
			ret_val = 0;
   80f1c:	2300      	movs	r3, #0
   80f1e:	73bb      	strb	r3, [r7, #14]
			break;
   80f20:	e00d      	b.n	80f3e <check_string+0x4a>
		}
		if (!*temp_str)
   80f22:	68bb      	ldr	r3, [r7, #8]
   80f24:	781b      	ldrb	r3, [r3, #0]
   80f26:	2b00      	cmp	r3, #0
   80f28:	d100      	bne.n	80f2c <check_string+0x38>
			break;
   80f2a:	e008      	b.n	80f3e <check_string+0x4a>
			
		temp_str++;
   80f2c:	68bb      	ldr	r3, [r7, #8]
   80f2e:	3301      	adds	r3, #1
   80f30:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   80f32:	7bfb      	ldrb	r3, [r7, #15]
   80f34:	3301      	adds	r3, #1
   80f36:	73fb      	strb	r3, [r7, #15]
   80f38:	7bfb      	ldrb	r3, [r7, #15]
   80f3a:	2b09      	cmp	r3, #9
   80f3c:	d9e7      	bls.n	80f0e <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   80f3e:	7bbb      	ldrb	r3, [r7, #14]
}
   80f40:	4618      	mov	r0, r3
   80f42:	3714      	adds	r7, #20
   80f44:	46bd      	mov	sp, r7
   80f46:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f4a:	4770      	bx	lr
   80f4c:	200704cc 	.word	0x200704cc

00080f50 <convert_to_temp>:
/*		the ADC value acquired on the subsystem micro and converts it	*/
/*		into a temperature in degrees centigrade. The function then		*/
/*		returns this temperature as a float.							*/
/************************************************************************/
float convert_to_temp(float temp)
{
   80f50:	b590      	push	{r4, r7, lr}
   80f52:	b089      	sub	sp, #36	; 0x24
   80f54:	af00      	add	r7, sp, #0
   80f56:	6078      	str	r0, [r7, #4]
	float r_ratio, log_result = 0.0, result = 0.0;
   80f58:	f04f 0300 	mov.w	r3, #0
   80f5c:	61bb      	str	r3, [r7, #24]
   80f5e:	f04f 0300 	mov.w	r3, #0
   80f62:	613b      	str	r3, [r7, #16]
	
	int i, flag = 0;
   80f64:	2300      	movs	r3, #0
   80f66:	60fb      	str	r3, [r7, #12]
	
	r_ratio = (temp) / 1023;	// Convert ADC value to the ratio (of resistances).
   80f68:	4b3b      	ldr	r3, [pc, #236]	; (81058 <convert_to_temp+0x108>)
   80f6a:	6878      	ldr	r0, [r7, #4]
   80f6c:	493b      	ldr	r1, [pc, #236]	; (8105c <convert_to_temp+0x10c>)
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	61fb      	str	r3, [r7, #28]
	
	r_ratio = 1 / (r_ratio);	// Take the inverse.
   80f74:	4b38      	ldr	r3, [pc, #224]	; (81058 <convert_to_temp+0x108>)
   80f76:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80f7a:	69f9      	ldr	r1, [r7, #28]
   80f7c:	4798      	blx	r3
   80f7e:	4603      	mov	r3, r0
   80f80:	61fb      	str	r3, [r7, #28]
	
	r_ratio = 1 - r_ratio;		// Substract this from one in order to approximate logarithm.
   80f82:	4b37      	ldr	r3, [pc, #220]	; (81060 <convert_to_temp+0x110>)
   80f84:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   80f88:	69f9      	ldr	r1, [r7, #28]
   80f8a:	4798      	blx	r3
   80f8c:	4603      	mov	r3, r0
   80f8e:	61fb      	str	r3, [r7, #28]
	
	for (i = 1; i < 5; i++)		// Natural Logarithm approximation.
   80f90:	2301      	movs	r3, #1
   80f92:	617b      	str	r3, [r7, #20]
   80f94:	e01b      	b.n	80fce <convert_to_temp+0x7e>
	{
		if(i > 1)
   80f96:	697b      	ldr	r3, [r7, #20]
   80f98:	2b01      	cmp	r3, #1
   80f9a:	dd05      	ble.n	80fa8 <convert_to_temp+0x58>
		{
			r_ratio = r_ratio * r_ratio;
   80f9c:	4b31      	ldr	r3, [pc, #196]	; (81064 <convert_to_temp+0x114>)
   80f9e:	69f8      	ldr	r0, [r7, #28]
   80fa0:	69f9      	ldr	r1, [r7, #28]
   80fa2:	4798      	blx	r3
   80fa4:	4603      	mov	r3, r0
   80fa6:	61fb      	str	r3, [r7, #28]
		}
		
		r_ratio = r_ratio / i;
   80fa8:	4b2f      	ldr	r3, [pc, #188]	; (81068 <convert_to_temp+0x118>)
   80faa:	6978      	ldr	r0, [r7, #20]
   80fac:	4798      	blx	r3
   80fae:	4602      	mov	r2, r0
   80fb0:	4b29      	ldr	r3, [pc, #164]	; (81058 <convert_to_temp+0x108>)
   80fb2:	69f8      	ldr	r0, [r7, #28]
   80fb4:	4611      	mov	r1, r2
   80fb6:	4798      	blx	r3
   80fb8:	4603      	mov	r3, r0
   80fba:	61fb      	str	r3, [r7, #28]
		
		log_result += r_ratio;
   80fbc:	4b2b      	ldr	r3, [pc, #172]	; (8106c <convert_to_temp+0x11c>)
   80fbe:	69b8      	ldr	r0, [r7, #24]
   80fc0:	69f9      	ldr	r1, [r7, #28]
   80fc2:	4798      	blx	r3
   80fc4:	4603      	mov	r3, r0
   80fc6:	61bb      	str	r3, [r7, #24]
	
	r_ratio = 1 / (r_ratio);	// Take the inverse.
	
	r_ratio = 1 - r_ratio;		// Substract this from one in order to approximate logarithm.
	
	for (i = 1; i < 5; i++)		// Natural Logarithm approximation.
   80fc8:	697b      	ldr	r3, [r7, #20]
   80fca:	3301      	adds	r3, #1
   80fcc:	617b      	str	r3, [r7, #20]
   80fce:	697b      	ldr	r3, [r7, #20]
   80fd0:	2b04      	cmp	r3, #4
   80fd2:	dde0      	ble.n	80f96 <convert_to_temp+0x46>
		r_ratio = r_ratio / i;
		
		log_result += r_ratio;
	}
	
	result = 1 / 293.15 + log_result / 3950;
   80fd4:	4b20      	ldr	r3, [pc, #128]	; (81058 <convert_to_temp+0x108>)
   80fd6:	69b8      	ldr	r0, [r7, #24]
   80fd8:	4925      	ldr	r1, [pc, #148]	; (81070 <convert_to_temp+0x120>)
   80fda:	4798      	blx	r3
   80fdc:	4603      	mov	r3, r0
   80fde:	461a      	mov	r2, r3
   80fe0:	4b24      	ldr	r3, [pc, #144]	; (81074 <convert_to_temp+0x124>)
   80fe2:	4610      	mov	r0, r2
   80fe4:	4798      	blx	r3
   80fe6:	4602      	mov	r2, r0
   80fe8:	460b      	mov	r3, r1
   80fea:	4c23      	ldr	r4, [pc, #140]	; (81078 <convert_to_temp+0x128>)
   80fec:	4610      	mov	r0, r2
   80fee:	4619      	mov	r1, r3
   80ff0:	a315      	add	r3, pc, #84	; (adr r3, 81048 <convert_to_temp+0xf8>)
   80ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
   80ff6:	47a0      	blx	r4
   80ff8:	4602      	mov	r2, r0
   80ffa:	460b      	mov	r3, r1
   80ffc:	4c1f      	ldr	r4, [pc, #124]	; (8107c <convert_to_temp+0x12c>)
   80ffe:	4610      	mov	r0, r2
   81000:	4619      	mov	r1, r3
   81002:	47a0      	blx	r4
   81004:	4603      	mov	r3, r0
   81006:	613b      	str	r3, [r7, #16]
	
	result = 1 / result;
   81008:	4b13      	ldr	r3, [pc, #76]	; (81058 <convert_to_temp+0x108>)
   8100a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   8100e:	6939      	ldr	r1, [r7, #16]
   81010:	4798      	blx	r3
   81012:	4603      	mov	r3, r0
   81014:	613b      	str	r3, [r7, #16]
	
	result = result - 273.15;		// Degrees Celsius.
   81016:	4b17      	ldr	r3, [pc, #92]	; (81074 <convert_to_temp+0x124>)
   81018:	6938      	ldr	r0, [r7, #16]
   8101a:	4798      	blx	r3
   8101c:	4602      	mov	r2, r0
   8101e:	460b      	mov	r3, r1
   81020:	4c17      	ldr	r4, [pc, #92]	; (81080 <convert_to_temp+0x130>)
   81022:	4610      	mov	r0, r2
   81024:	4619      	mov	r1, r3
   81026:	a30a      	add	r3, pc, #40	; (adr r3, 81050 <convert_to_temp+0x100>)
   81028:	e9d3 2300 	ldrd	r2, r3, [r3]
   8102c:	47a0      	blx	r4
   8102e:	4602      	mov	r2, r0
   81030:	460b      	mov	r3, r1
   81032:	4c12      	ldr	r4, [pc, #72]	; (8107c <convert_to_temp+0x12c>)
   81034:	4610      	mov	r0, r2
   81036:	4619      	mov	r1, r3
   81038:	47a0      	blx	r4
   8103a:	4603      	mov	r3, r0
   8103c:	613b      	str	r3, [r7, #16]
	
	return result;
   8103e:	693b      	ldr	r3, [r7, #16]
}
   81040:	4618      	mov	r0, r3
   81042:	3724      	adds	r7, #36	; 0x24
   81044:	46bd      	mov	sp, r7
   81046:	bd90      	pop	{r4, r7, pc}
   81048:	5ca77e69 	.word	0x5ca77e69
   8104c:	3f6bf1da 	.word	0x3f6bf1da
   81050:	66666666 	.word	0x66666666
   81054:	40711266 	.word	0x40711266
   81058:	000863dd 	.word	0x000863dd
   8105c:	447fc000 	.word	0x447fc000
   81060:	00086061 	.word	0x00086061
   81064:	00086275 	.word	0x00086275
   81068:	000861cd 	.word	0x000861cd
   8106c:	00086065 	.word	0x00086065
   81070:	4576e000 	.word	0x4576e000
   81074:	00085f11 	.word	0x00085f11
   81078:	00085c55 	.word	0x00085c55
   8107c:	00085fb9 	.word	0x00085fb9
   81080:	00085c51 	.word	0x00085c51
   81084:	f3af 8000 	nop.w

00081088 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   81088:	b480      	push	{r7}
   8108a:	b085      	sub	sp, #20
   8108c:	af00      	add	r7, sp, #0
   8108e:	4603      	mov	r3, r0
   81090:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   81092:	2300      	movs	r3, #0
   81094:	73fb      	strb	r3, [r7, #15]
   81096:	2300      	movs	r3, #0
   81098:	73bb      	strb	r3, [r7, #14]
   8109a:	2300      	movs	r3, #0
   8109c:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   8109e:	79fb      	ldrb	r3, [r7, #7]
   810a0:	2b09      	cmp	r3, #9
   810a2:	d919      	bls.n	810d8 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   810a4:	79fa      	ldrb	r2, [r7, #7]
   810a6:	4b10      	ldr	r3, [pc, #64]	; (810e8 <convert_to_bcd+0x60>)
   810a8:	fba3 1302 	umull	r1, r3, r3, r2
   810ac:	08d9      	lsrs	r1, r3, #3
   810ae:	460b      	mov	r3, r1
   810b0:	009b      	lsls	r3, r3, #2
   810b2:	440b      	add	r3, r1
   810b4:	005b      	lsls	r3, r3, #1
   810b6:	1ad3      	subs	r3, r2, r3
   810b8:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   810ba:	79fa      	ldrb	r2, [r7, #7]
   810bc:	4b0a      	ldr	r3, [pc, #40]	; (810e8 <convert_to_bcd+0x60>)
   810be:	fba3 1302 	umull	r1, r3, r3, r2
   810c2:	08db      	lsrs	r3, r3, #3
   810c4:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   810c6:	7bfb      	ldrb	r3, [r7, #15]
   810c8:	011b      	lsls	r3, r3, #4
   810ca:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   810cc:	7bfa      	ldrb	r2, [r7, #15]
   810ce:	7bbb      	ldrb	r3, [r7, #14]
   810d0:	4313      	orrs	r3, r2
   810d2:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   810d4:	7b7b      	ldrb	r3, [r7, #13]
   810d6:	e000      	b.n	810da <convert_to_bcd+0x52>
	}
	else
		return temp;
   810d8:	79fb      	ldrb	r3, [r7, #7]
}
   810da:	4618      	mov	r0, r3
   810dc:	3714      	adds	r7, #20
   810de:	46bd      	mov	sp, r7
   810e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   810e4:	4770      	bx	lr
   810e6:	bf00      	nop
   810e8:	cccccccd 	.word	0xcccccccd

000810ec <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   810ec:	b5b0      	push	{r4, r5, r7, lr}
   810ee:	b086      	sub	sp, #24
   810f0:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   810f2:	4b13      	ldr	r3, [pc, #76]	; (81140 <configure_usart+0x54>)
   810f4:	463c      	mov	r4, r7
   810f6:	461d      	mov	r5, r3
   810f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   810fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   810fc:	e895 0003 	ldmia.w	r5, {r0, r1}
   81100:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   81104:	2011      	movs	r0, #17
   81106:	4b0f      	ldr	r3, [pc, #60]	; (81144 <configure_usart+0x58>)
   81108:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   8110a:	4b0f      	ldr	r3, [pc, #60]	; (81148 <configure_usart+0x5c>)
   8110c:	4798      	blx	r3
   8110e:	4603      	mov	r3, r0
   81110:	463a      	mov	r2, r7
   81112:	480e      	ldr	r0, [pc, #56]	; (8114c <configure_usart+0x60>)
   81114:	4611      	mov	r1, r2
   81116:	461a      	mov	r2, r3
   81118:	4b0d      	ldr	r3, [pc, #52]	; (81150 <configure_usart+0x64>)
   8111a:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   8111c:	480b      	ldr	r0, [pc, #44]	; (8114c <configure_usart+0x60>)
   8111e:	f04f 31ff 	mov.w	r1, #4294967295
   81122:	4b0c      	ldr	r3, [pc, #48]	; (81154 <configure_usart+0x68>)
   81124:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   81126:	4809      	ldr	r0, [pc, #36]	; (8114c <configure_usart+0x60>)
   81128:	4b0b      	ldr	r3, [pc, #44]	; (81158 <configure_usart+0x6c>)
   8112a:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   8112c:	4807      	ldr	r0, [pc, #28]	; (8114c <configure_usart+0x60>)
   8112e:	4b0b      	ldr	r3, [pc, #44]	; (8115c <configure_usart+0x70>)
   81130:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   81132:	2011      	movs	r0, #17
   81134:	4b0a      	ldr	r3, [pc, #40]	; (81160 <configure_usart+0x74>)
   81136:	4798      	blx	r3
}
   81138:	3718      	adds	r7, #24
   8113a:	46bd      	mov	sp, r7
   8113c:	bdb0      	pop	{r4, r5, r7, pc}
   8113e:	bf00      	nop
   81140:	00086940 	.word	0x00086940
   81144:	00080b5d 	.word	0x00080b5d
   81148:	00080b49 	.word	0x00080b49
   8114c:	40098000 	.word	0x40098000
   81150:	00082639 	.word	0x00082639
   81154:	00082739 	.word	0x00082739
   81158:	000826bd 	.word	0x000826bd
   8115c:	000826ed 	.word	0x000826ed
   81160:	00080a89 	.word	0x00080a89

00081164 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   81164:	b580      	push	{r7, lr}
   81166:	b084      	sub	sp, #16
   81168:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   8116a:	2300      	movs	r3, #0
   8116c:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   8116e:	2300      	movs	r3, #0
   81170:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   81172:	4b1a      	ldr	r3, [pc, #104]	; (811dc <usart_initialize+0x78>)
   81174:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   81176:	4b1a      	ldr	r3, [pc, #104]	; (811e0 <usart_initialize+0x7c>)
   81178:	2200      	movs	r2, #0
   8117a:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   8117c:	2300      	movs	r3, #0
   8117e:	73fb      	strb	r3, [r7, #15]
   81180:	e006      	b.n	81190 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   81182:	7bfb      	ldrb	r3, [r7, #15]
   81184:	4a17      	ldr	r2, [pc, #92]	; (811e4 <usart_initialize+0x80>)
   81186:	2100      	movs	r1, #0
   81188:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   8118a:	7bfb      	ldrb	r3, [r7, #15]
   8118c:	3301      	adds	r3, #1
   8118e:	73fb      	strb	r3, [r7, #15]
   81190:	7bfb      	ldrb	r3, [r7, #15]
   81192:	2b09      	cmp	r3, #9
   81194:	d9f5      	bls.n	81182 <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   81196:	4814      	ldr	r0, [pc, #80]	; (811e8 <usart_initialize+0x84>)
   81198:	2101      	movs	r1, #1
   8119a:	4b14      	ldr	r3, [pc, #80]	; (811ec <usart_initialize+0x88>)
   8119c:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   8119e:	4812      	ldr	r0, [pc, #72]	; (811e8 <usart_initialize+0x84>)
   811a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   811a4:	4b12      	ldr	r3, [pc, #72]	; (811f0 <usart_initialize+0x8c>)
   811a6:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   811a8:	4b12      	ldr	r3, [pc, #72]	; (811f4 <usart_initialize+0x90>)
   811aa:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   811ac:	e00d      	b.n	811ca <usart_initialize+0x66>
	{
		character = *message_array;
   811ae:	68bb      	ldr	r3, [r7, #8]
   811b0:	781b      	ldrb	r3, [r3, #0]
   811b2:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   811b4:	bf00      	nop
   811b6:	480c      	ldr	r0, [pc, #48]	; (811e8 <usart_initialize+0x84>)
   811b8:	6879      	ldr	r1, [r7, #4]
   811ba:	4b0f      	ldr	r3, [pc, #60]	; (811f8 <usart_initialize+0x94>)
   811bc:	4798      	blx	r3
   811be:	4603      	mov	r3, r0
   811c0:	2b00      	cmp	r3, #0
   811c2:	d1f8      	bne.n	811b6 <usart_initialize+0x52>
			
		message_array++;
   811c4:	68bb      	ldr	r3, [r7, #8]
   811c6:	3301      	adds	r3, #1
   811c8:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   811ca:	68bb      	ldr	r3, [r7, #8]
   811cc:	781b      	ldrb	r3, [r3, #0]
   811ce:	2b00      	cmp	r3, #0
   811d0:	d1ed      	bne.n	811ae <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   811d2:	bf00      	nop
}
   811d4:	3710      	adds	r7, #16
   811d6:	46bd      	mov	sp, r7
   811d8:	bd80      	pop	{r7, pc}
   811da:	bf00      	nop
   811dc:	000810ed 	.word	0x000810ed
   811e0:	200704c8 	.word	0x200704c8
   811e4:	200704cc 	.word	0x200704cc
   811e8:	40098000 	.word	0x40098000
   811ec:	0008271d 	.word	0x0008271d
   811f0:	00082739 	.word	0x00082739
   811f4:	00086958 	.word	0x00086958
   811f8:	000827a5 	.word	0x000827a5

000811fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   811fc:	b580      	push	{r7, lr}
   811fe:	b082      	sub	sp, #8
   81200:	af00      	add	r7, sp, #0
   81202:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81204:	687b      	ldr	r3, [r7, #4]
   81206:	2b07      	cmp	r3, #7
   81208:	d82e      	bhi.n	81268 <osc_enable+0x6c>
   8120a:	a201      	add	r2, pc, #4	; (adr r2, 81210 <osc_enable+0x14>)
   8120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81210:	00081269 	.word	0x00081269
   81214:	00081231 	.word	0x00081231
   81218:	00081239 	.word	0x00081239
   8121c:	00081241 	.word	0x00081241
   81220:	00081249 	.word	0x00081249
   81224:	00081251 	.word	0x00081251
   81228:	00081259 	.word	0x00081259
   8122c:	00081261 	.word	0x00081261
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81230:	2000      	movs	r0, #0
   81232:	4b0f      	ldr	r3, [pc, #60]	; (81270 <osc_enable+0x74>)
   81234:	4798      	blx	r3
		break;
   81236:	e017      	b.n	81268 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   81238:	2001      	movs	r0, #1
   8123a:	4b0d      	ldr	r3, [pc, #52]	; (81270 <osc_enable+0x74>)
   8123c:	4798      	blx	r3
		break;
   8123e:	e013      	b.n	81268 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   81240:	2000      	movs	r0, #0
   81242:	4b0c      	ldr	r3, [pc, #48]	; (81274 <osc_enable+0x78>)
   81244:	4798      	blx	r3
		break;
   81246:	e00f      	b.n	81268 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   81248:	2010      	movs	r0, #16
   8124a:	4b0a      	ldr	r3, [pc, #40]	; (81274 <osc_enable+0x78>)
   8124c:	4798      	blx	r3
		break;
   8124e:	e00b      	b.n	81268 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   81250:	2020      	movs	r0, #32
   81252:	4b08      	ldr	r3, [pc, #32]	; (81274 <osc_enable+0x78>)
   81254:	4798      	blx	r3
		break;
   81256:	e007      	b.n	81268 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   81258:	2000      	movs	r0, #0
   8125a:	4b07      	ldr	r3, [pc, #28]	; (81278 <osc_enable+0x7c>)
   8125c:	4798      	blx	r3
		break;
   8125e:	e003      	b.n	81268 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   81260:	2001      	movs	r0, #1
   81262:	4b05      	ldr	r3, [pc, #20]	; (81278 <osc_enable+0x7c>)
   81264:	4798      	blx	r3
		break;
   81266:	bf00      	nop
	}
}
   81268:	3708      	adds	r7, #8
   8126a:	46bd      	mov	sp, r7
   8126c:	bd80      	pop	{r7, pc}
   8126e:	bf00      	nop
   81270:	000822ed 	.word	0x000822ed
   81274:	0008235d 	.word	0x0008235d
   81278:	000823fd 	.word	0x000823fd

0008127c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   8127c:	b580      	push	{r7, lr}
   8127e:	b082      	sub	sp, #8
   81280:	af00      	add	r7, sp, #0
   81282:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81284:	687b      	ldr	r3, [r7, #4]
   81286:	2b07      	cmp	r3, #7
   81288:	d826      	bhi.n	812d8 <osc_is_ready+0x5c>
   8128a:	a201      	add	r2, pc, #4	; (adr r2, 81290 <osc_is_ready+0x14>)
   8128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81290:	000812b1 	.word	0x000812b1
   81294:	000812b5 	.word	0x000812b5
   81298:	000812b5 	.word	0x000812b5
   8129c:	000812c7 	.word	0x000812c7
   812a0:	000812c7 	.word	0x000812c7
   812a4:	000812c7 	.word	0x000812c7
   812a8:	000812c7 	.word	0x000812c7
   812ac:	000812c7 	.word	0x000812c7
	case OSC_SLCK_32K_RC:
		return 1;
   812b0:	2301      	movs	r3, #1
   812b2:	e012      	b.n	812da <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   812b4:	4b0b      	ldr	r3, [pc, #44]	; (812e4 <osc_is_ready+0x68>)
   812b6:	4798      	blx	r3
   812b8:	4603      	mov	r3, r0
   812ba:	2b00      	cmp	r3, #0
   812bc:	bf0c      	ite	eq
   812be:	2300      	moveq	r3, #0
   812c0:	2301      	movne	r3, #1
   812c2:	b2db      	uxtb	r3, r3
   812c4:	e009      	b.n	812da <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   812c6:	4b08      	ldr	r3, [pc, #32]	; (812e8 <osc_is_ready+0x6c>)
   812c8:	4798      	blx	r3
   812ca:	4603      	mov	r3, r0
   812cc:	2b00      	cmp	r3, #0
   812ce:	bf0c      	ite	eq
   812d0:	2300      	moveq	r3, #0
   812d2:	2301      	movne	r3, #1
   812d4:	b2db      	uxtb	r3, r3
   812d6:	e000      	b.n	812da <osc_is_ready+0x5e>
	}

	return 0;
   812d8:	2300      	movs	r3, #0
}
   812da:	4618      	mov	r0, r3
   812dc:	3708      	adds	r7, #8
   812de:	46bd      	mov	sp, r7
   812e0:	bd80      	pop	{r7, pc}
   812e2:	bf00      	nop
   812e4:	00082329 	.word	0x00082329
   812e8:	00082469 	.word	0x00082469

000812ec <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   812ec:	b480      	push	{r7}
   812ee:	b083      	sub	sp, #12
   812f0:	af00      	add	r7, sp, #0
   812f2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   812f4:	687b      	ldr	r3, [r7, #4]
   812f6:	2b07      	cmp	r3, #7
   812f8:	d825      	bhi.n	81346 <osc_get_rate+0x5a>
   812fa:	a201      	add	r2, pc, #4	; (adr r2, 81300 <osc_get_rate+0x14>)
   812fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81300:	00081321 	.word	0x00081321
   81304:	00081327 	.word	0x00081327
   81308:	0008132d 	.word	0x0008132d
   8130c:	00081333 	.word	0x00081333
   81310:	00081337 	.word	0x00081337
   81314:	0008133b 	.word	0x0008133b
   81318:	0008133f 	.word	0x0008133f
   8131c:	00081343 	.word	0x00081343
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81320:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81324:	e010      	b.n	81348 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8132a:	e00d      	b.n	81348 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8132c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81330:	e00a      	b.n	81348 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81332:	4b08      	ldr	r3, [pc, #32]	; (81354 <osc_get_rate+0x68>)
   81334:	e008      	b.n	81348 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81336:	4b08      	ldr	r3, [pc, #32]	; (81358 <osc_get_rate+0x6c>)
   81338:	e006      	b.n	81348 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8133a:	4b08      	ldr	r3, [pc, #32]	; (8135c <osc_get_rate+0x70>)
   8133c:	e004      	b.n	81348 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8133e:	4b07      	ldr	r3, [pc, #28]	; (8135c <osc_get_rate+0x70>)
   81340:	e002      	b.n	81348 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81342:	4b06      	ldr	r3, [pc, #24]	; (8135c <osc_get_rate+0x70>)
   81344:	e000      	b.n	81348 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81346:	2300      	movs	r3, #0
}
   81348:	4618      	mov	r0, r3
   8134a:	370c      	adds	r7, #12
   8134c:	46bd      	mov	sp, r7
   8134e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81352:	4770      	bx	lr
   81354:	003d0900 	.word	0x003d0900
   81358:	007a1200 	.word	0x007a1200
   8135c:	00b71b00 	.word	0x00b71b00

00081360 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   81360:	b580      	push	{r7, lr}
   81362:	b082      	sub	sp, #8
   81364:	af00      	add	r7, sp, #0
   81366:	4603      	mov	r3, r0
   81368:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8136a:	bf00      	nop
   8136c:	79fb      	ldrb	r3, [r7, #7]
   8136e:	4618      	mov	r0, r3
   81370:	4b05      	ldr	r3, [pc, #20]	; (81388 <osc_wait_ready+0x28>)
   81372:	4798      	blx	r3
   81374:	4603      	mov	r3, r0
   81376:	f083 0301 	eor.w	r3, r3, #1
   8137a:	b2db      	uxtb	r3, r3
   8137c:	2b00      	cmp	r3, #0
   8137e:	d1f5      	bne.n	8136c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   81380:	3708      	adds	r7, #8
   81382:	46bd      	mov	sp, r7
   81384:	bd80      	pop	{r7, pc}
   81386:	bf00      	nop
   81388:	0008127d 	.word	0x0008127d

0008138c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8138c:	b580      	push	{r7, lr}
   8138e:	b086      	sub	sp, #24
   81390:	af00      	add	r7, sp, #0
   81392:	60f8      	str	r0, [r7, #12]
   81394:	607a      	str	r2, [r7, #4]
   81396:	603b      	str	r3, [r7, #0]
   81398:	460b      	mov	r3, r1
   8139a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8139c:	687b      	ldr	r3, [r7, #4]
   8139e:	2b00      	cmp	r3, #0
   813a0:	d107      	bne.n	813b2 <pll_config_init+0x26>
   813a2:	683b      	ldr	r3, [r7, #0]
   813a4:	2b00      	cmp	r3, #0
   813a6:	d104      	bne.n	813b2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   813a8:	68fb      	ldr	r3, [r7, #12]
   813aa:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   813ae:	601a      	str	r2, [r3, #0]
   813b0:	e019      	b.n	813e6 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   813b2:	7afb      	ldrb	r3, [r7, #11]
   813b4:	4618      	mov	r0, r3
   813b6:	4b0d      	ldr	r3, [pc, #52]	; (813ec <pll_config_init+0x60>)
   813b8:	4798      	blx	r3
   813ba:	4602      	mov	r2, r0
   813bc:	687b      	ldr	r3, [r7, #4]
   813be:	fbb2 f3f3 	udiv	r3, r2, r3
   813c2:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   813c4:	697b      	ldr	r3, [r7, #20]
   813c6:	683a      	ldr	r2, [r7, #0]
   813c8:	fb02 f303 	mul.w	r3, r2, r3
   813cc:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   813ce:	683b      	ldr	r3, [r7, #0]
   813d0:	3b01      	subs	r3, #1
   813d2:	041a      	lsls	r2, r3, #16
   813d4:	4b06      	ldr	r3, [pc, #24]	; (813f0 <pll_config_init+0x64>)
   813d6:	4013      	ands	r3, r2
   813d8:	687a      	ldr	r2, [r7, #4]
   813da:	b2d2      	uxtb	r2, r2
   813dc:	4313      	orrs	r3, r2
   813de:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   813e2:	68fb      	ldr	r3, [r7, #12]
   813e4:	601a      	str	r2, [r3, #0]
	}
}
   813e6:	3718      	adds	r7, #24
   813e8:	46bd      	mov	sp, r7
   813ea:	bd80      	pop	{r7, pc}
   813ec:	000812ed 	.word	0x000812ed
   813f0:	07ff0000 	.word	0x07ff0000

000813f4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   813f4:	b580      	push	{r7, lr}
   813f6:	b082      	sub	sp, #8
   813f8:	af00      	add	r7, sp, #0
   813fa:	6078      	str	r0, [r7, #4]
   813fc:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   813fe:	683b      	ldr	r3, [r7, #0]
   81400:	2b00      	cmp	r3, #0
   81402:	d108      	bne.n	81416 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   81404:	4b08      	ldr	r3, [pc, #32]	; (81428 <pll_enable+0x34>)
   81406:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81408:	4b08      	ldr	r3, [pc, #32]	; (8142c <pll_enable+0x38>)
   8140a:	687a      	ldr	r2, [r7, #4]
   8140c:	6812      	ldr	r2, [r2, #0]
   8140e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81412:	629a      	str	r2, [r3, #40]	; 0x28
   81414:	e005      	b.n	81422 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   81416:	4b05      	ldr	r3, [pc, #20]	; (8142c <pll_enable+0x38>)
   81418:	687a      	ldr	r2, [r7, #4]
   8141a:	6812      	ldr	r2, [r2, #0]
   8141c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   81420:	61da      	str	r2, [r3, #28]
	}
}
   81422:	3708      	adds	r7, #8
   81424:	46bd      	mov	sp, r7
   81426:	bd80      	pop	{r7, pc}
   81428:	00082485 	.word	0x00082485
   8142c:	400e0600 	.word	0x400e0600

00081430 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   81430:	b580      	push	{r7, lr}
   81432:	b082      	sub	sp, #8
   81434:	af00      	add	r7, sp, #0
   81436:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   81438:	687b      	ldr	r3, [r7, #4]
   8143a:	2b00      	cmp	r3, #0
   8143c:	d103      	bne.n	81446 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8143e:	4b05      	ldr	r3, [pc, #20]	; (81454 <pll_is_locked+0x24>)
   81440:	4798      	blx	r3
   81442:	4603      	mov	r3, r0
   81444:	e002      	b.n	8144c <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   81446:	4b04      	ldr	r3, [pc, #16]	; (81458 <pll_is_locked+0x28>)
   81448:	4798      	blx	r3
   8144a:	4603      	mov	r3, r0
}
   8144c:	4618      	mov	r0, r3
   8144e:	3708      	adds	r7, #8
   81450:	46bd      	mov	sp, r7
   81452:	bd80      	pop	{r7, pc}
   81454:	0008249d 	.word	0x0008249d
   81458:	000824b9 	.word	0x000824b9

0008145c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8145c:	b580      	push	{r7, lr}
   8145e:	b082      	sub	sp, #8
   81460:	af00      	add	r7, sp, #0
   81462:	4603      	mov	r3, r0
   81464:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   81466:	79fb      	ldrb	r3, [r7, #7]
   81468:	3b03      	subs	r3, #3
   8146a:	2b04      	cmp	r3, #4
   8146c:	d808      	bhi.n	81480 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8146e:	79fb      	ldrb	r3, [r7, #7]
   81470:	4618      	mov	r0, r3
   81472:	4b05      	ldr	r3, [pc, #20]	; (81488 <pll_enable_source+0x2c>)
   81474:	4798      	blx	r3
		osc_wait_ready(e_src);
   81476:	79fb      	ldrb	r3, [r7, #7]
   81478:	4618      	mov	r0, r3
   8147a:	4b04      	ldr	r3, [pc, #16]	; (8148c <pll_enable_source+0x30>)
   8147c:	4798      	blx	r3
		break;
   8147e:	e000      	b.n	81482 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   81480:	bf00      	nop
	}
}
   81482:	3708      	adds	r7, #8
   81484:	46bd      	mov	sp, r7
   81486:	bd80      	pop	{r7, pc}
   81488:	000811fd 	.word	0x000811fd
   8148c:	00081361 	.word	0x00081361

00081490 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   81490:	b580      	push	{r7, lr}
   81492:	b082      	sub	sp, #8
   81494:	af00      	add	r7, sp, #0
   81496:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81498:	bf00      	nop
   8149a:	6878      	ldr	r0, [r7, #4]
   8149c:	4b04      	ldr	r3, [pc, #16]	; (814b0 <pll_wait_for_lock+0x20>)
   8149e:	4798      	blx	r3
   814a0:	4603      	mov	r3, r0
   814a2:	2b00      	cmp	r3, #0
   814a4:	d0f9      	beq.n	8149a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   814a6:	2300      	movs	r3, #0
}
   814a8:	4618      	mov	r0, r3
   814aa:	3708      	adds	r7, #8
   814ac:	46bd      	mov	sp, r7
   814ae:	bd80      	pop	{r7, pc}
   814b0:	00081431 	.word	0x00081431

000814b4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   814b4:	b580      	push	{r7, lr}
   814b6:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   814b8:	2006      	movs	r0, #6
   814ba:	4b04      	ldr	r3, [pc, #16]	; (814cc <sysclk_get_main_hz+0x18>)
   814bc:	4798      	blx	r3
   814be:	4602      	mov	r2, r0
   814c0:	4613      	mov	r3, r2
   814c2:	00db      	lsls	r3, r3, #3
   814c4:	1a9b      	subs	r3, r3, r2
   814c6:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   814c8:	4618      	mov	r0, r3
   814ca:	bd80      	pop	{r7, pc}
   814cc:	000812ed 	.word	0x000812ed

000814d0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   814d0:	b580      	push	{r7, lr}
   814d2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   814d4:	4b02      	ldr	r3, [pc, #8]	; (814e0 <sysclk_get_cpu_hz+0x10>)
   814d6:	4798      	blx	r3
   814d8:	4603      	mov	r3, r0
   814da:	085b      	lsrs	r3, r3, #1
}
   814dc:	4618      	mov	r0, r3
   814de:	bd80      	pop	{r7, pc}
   814e0:	000814b5 	.word	0x000814b5

000814e4 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   814e4:	b590      	push	{r4, r7, lr}
   814e6:	b083      	sub	sp, #12
   814e8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   814ea:	4b10      	ldr	r3, [pc, #64]	; (8152c <sysclk_init+0x48>)
   814ec:	4798      	blx	r3
   814ee:	4603      	mov	r3, r0
   814f0:	4618      	mov	r0, r3
   814f2:	4b0f      	ldr	r3, [pc, #60]	; (81530 <sysclk_init+0x4c>)
   814f4:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   814f6:	2006      	movs	r0, #6
   814f8:	4b0e      	ldr	r3, [pc, #56]	; (81534 <sysclk_init+0x50>)
   814fa:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   814fc:	1d3b      	adds	r3, r7, #4
   814fe:	4618      	mov	r0, r3
   81500:	2106      	movs	r1, #6
   81502:	2201      	movs	r2, #1
   81504:	230e      	movs	r3, #14
   81506:	4c0c      	ldr	r4, [pc, #48]	; (81538 <sysclk_init+0x54>)
   81508:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8150a:	1d3b      	adds	r3, r7, #4
   8150c:	4618      	mov	r0, r3
   8150e:	2100      	movs	r1, #0
   81510:	4b0a      	ldr	r3, [pc, #40]	; (8153c <sysclk_init+0x58>)
   81512:	4798      	blx	r3
		pll_wait_for_lock(0);
   81514:	2000      	movs	r0, #0
   81516:	4b0a      	ldr	r3, [pc, #40]	; (81540 <sysclk_init+0x5c>)
   81518:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8151a:	2010      	movs	r0, #16
   8151c:	4b09      	ldr	r3, [pc, #36]	; (81544 <sysclk_init+0x60>)
   8151e:	4798      	blx	r3
		break;
   81520:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81522:	4b09      	ldr	r3, [pc, #36]	; (81548 <sysclk_init+0x64>)
   81524:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   81526:	370c      	adds	r7, #12
   81528:	46bd      	mov	sp, r7
   8152a:	bd90      	pop	{r4, r7, pc}
   8152c:	000814d1 	.word	0x000814d1
   81530:	00082ab1 	.word	0x00082ab1
   81534:	0008145d 	.word	0x0008145d
   81538:	0008138d 	.word	0x0008138d
   8153c:	000813f5 	.word	0x000813f5
   81540:	00081491 	.word	0x00081491
   81544:	00082269 	.word	0x00082269
   81548:	00082931 	.word	0x00082931

0008154c <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   8154c:	b580      	push	{r7, lr}
   8154e:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81550:	4b3c      	ldr	r3, [pc, #240]	; (81644 <board_init+0xf8>)
   81552:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81556:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   81558:	2001      	movs	r0, #1
   8155a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8155e:	4b3a      	ldr	r3, [pc, #232]	; (81648 <board_init+0xfc>)
   81560:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   81562:	2000      	movs	r0, #0
   81564:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81568:	4b37      	ldr	r3, [pc, #220]	; (81648 <board_init+0xfc>)
   8156a:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   8156c:	2034      	movs	r0, #52	; 0x34
   8156e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81572:	4b35      	ldr	r3, [pc, #212]	; (81648 <board_init+0xfc>)
   81574:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   81576:	2035      	movs	r0, #53	; 0x35
   81578:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8157c:	4b32      	ldr	r3, [pc, #200]	; (81648 <board_init+0xfc>)
   8157e:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   81580:	202f      	movs	r0, #47	; 0x2f
   81582:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81586:	4b30      	ldr	r3, [pc, #192]	; (81648 <board_init+0xfc>)
   81588:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   8158a:	202e      	movs	r0, #46	; 0x2e
   8158c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81590:	4b2d      	ldr	r3, [pc, #180]	; (81648 <board_init+0xfc>)
   81592:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   81594:	208f      	movs	r0, #143	; 0x8f
   81596:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8159a:	4b2b      	ldr	r3, [pc, #172]	; (81648 <board_init+0xfc>)
   8159c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   8159e:	2090      	movs	r0, #144	; 0x90
   815a0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815a4:	4b28      	ldr	r3, [pc, #160]	; (81648 <board_init+0xfc>)
   815a6:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   815a8:	2057      	movs	r0, #87	; 0x57
   815aa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815ae:	4b26      	ldr	r3, [pc, #152]	; (81648 <board_init+0xfc>)
   815b0:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   815b2:	2057      	movs	r0, #87	; 0x57
   815b4:	4b25      	ldr	r3, [pc, #148]	; (8164c <board_init+0x100>)
   815b6:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   815b8:	203b      	movs	r0, #59	; 0x3b
   815ba:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815be:	4b22      	ldr	r3, [pc, #136]	; (81648 <board_init+0xfc>)
   815c0:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   815c2:	2055      	movs	r0, #85	; 0x55
   815c4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815c8:	4b1f      	ldr	r3, [pc, #124]	; (81648 <board_init+0xfc>)
   815ca:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   815cc:	2056      	movs	r0, #86	; 0x56
   815ce:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   815d2:	4b1d      	ldr	r3, [pc, #116]	; (81648 <board_init+0xfc>)
   815d4:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   815d6:	2087      	movs	r0, #135	; 0x87
   815d8:	491d      	ldr	r1, [pc, #116]	; (81650 <board_init+0x104>)
   815da:	4b1b      	ldr	r3, [pc, #108]	; (81648 <board_init+0xfc>)
   815dc:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   815de:	2037      	movs	r0, #55	; 0x37
   815e0:	491c      	ldr	r1, [pc, #112]	; (81654 <board_init+0x108>)
   815e2:	4b19      	ldr	r3, [pc, #100]	; (81648 <board_init+0xfc>)
   815e4:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   815e6:	481c      	ldr	r0, [pc, #112]	; (81658 <board_init+0x10c>)
   815e8:	f44f 7140 	mov.w	r1, #768	; 0x300
   815ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   815f0:	4b1a      	ldr	r3, [pc, #104]	; (8165c <board_init+0x110>)
   815f2:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   815f4:	2019      	movs	r0, #25
   815f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815fa:	4b13      	ldr	r3, [pc, #76]	; (81648 <board_init+0xfc>)
   815fc:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   815fe:	201a      	movs	r0, #26
   81600:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81604:	4b10      	ldr	r3, [pc, #64]	; (81648 <board_init+0xfc>)
   81606:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81608:	201b      	movs	r0, #27
   8160a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8160e:	4b0e      	ldr	r3, [pc, #56]	; (81648 <board_init+0xfc>)
   81610:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81612:	201c      	movs	r0, #28
   81614:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81618:	4b0b      	ldr	r3, [pc, #44]	; (81648 <board_init+0xfc>)
   8161a:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   8161c:	200a      	movs	r0, #10
   8161e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81622:	4b09      	ldr	r3, [pc, #36]	; (81648 <board_init+0xfc>)
   81624:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   81626:	200b      	movs	r0, #11
   81628:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8162c:	4b06      	ldr	r3, [pc, #24]	; (81648 <board_init+0xfc>)
   8162e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   81630:	208e      	movs	r0, #142	; 0x8e
   81632:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81636:	4b04      	ldr	r3, [pc, #16]	; (81648 <board_init+0xfc>)
   81638:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   8163a:	208e      	movs	r0, #142	; 0x8e
   8163c:	4b08      	ldr	r3, [pc, #32]	; (81660 <board_init+0x114>)
   8163e:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   81640:	bd80      	pop	{r7, pc}
   81642:	bf00      	nop
   81644:	400e1a50 	.word	0x400e1a50
   81648:	00081f49 	.word	0x00081f49
   8164c:	00081e81 	.word	0x00081e81
   81650:	28000079 	.word	0x28000079
   81654:	28000059 	.word	0x28000059
   81658:	400e0e00 	.word	0x400e0e00
   8165c:	00082085 	.word	0x00082085
   81660:	00081eb5 	.word	0x00081eb5

00081664 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81664:	b480      	push	{r7}
   81666:	b083      	sub	sp, #12
   81668:	af00      	add	r7, sp, #0
   8166a:	6078      	str	r0, [r7, #4]
   8166c:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8166e:	687b      	ldr	r3, [r7, #4]
   81670:	683a      	ldr	r2, [r7, #0]
   81672:	601a      	str	r2, [r3, #0]
}
   81674:	370c      	adds	r7, #12
   81676:	46bd      	mov	sp, r7
   81678:	f85d 7b04 	ldr.w	r7, [sp], #4
   8167c:	4770      	bx	lr
   8167e:	bf00      	nop

00081680 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81680:	b480      	push	{r7}
   81682:	b083      	sub	sp, #12
   81684:	af00      	add	r7, sp, #0
   81686:	6078      	str	r0, [r7, #4]
   81688:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8168a:	687b      	ldr	r3, [r7, #4]
   8168c:	683a      	ldr	r2, [r7, #0]
   8168e:	605a      	str	r2, [r3, #4]
}
   81690:	370c      	adds	r7, #12
   81692:	46bd      	mov	sp, r7
   81694:	f85d 7b04 	ldr.w	r7, [sp], #4
   81698:	4770      	bx	lr
   8169a:	bf00      	nop

0008169c <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   8169c:	b580      	push	{r7, lr}
   8169e:	b082      	sub	sp, #8
   816a0:	af00      	add	r7, sp, #0
   816a2:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   816a4:	687b      	ldr	r3, [r7, #4]
   816a6:	685b      	ldr	r3, [r3, #4]
   816a8:	4618      	mov	r0, r3
   816aa:	4b02      	ldr	r3, [pc, #8]	; (816b4 <sn65hvd234_enable+0x18>)
   816ac:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   816ae:	3708      	adds	r7, #8
   816b0:	46bd      	mov	sp, r7
   816b2:	bd80      	pop	{r7, pc}
   816b4:	00081e81 	.word	0x00081e81

000816b8 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   816b8:	b580      	push	{r7, lr}
   816ba:	b082      	sub	sp, #8
   816bc:	af00      	add	r7, sp, #0
   816be:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   816c0:	687b      	ldr	r3, [r7, #4]
   816c2:	681b      	ldr	r3, [r3, #0]
   816c4:	4618      	mov	r0, r3
   816c6:	4b02      	ldr	r3, [pc, #8]	; (816d0 <sn65hvd234_disable_low_power+0x18>)
   816c8:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   816ca:	3708      	adds	r7, #8
   816cc:	46bd      	mov	sp, r7
   816ce:	bd80      	pop	{r7, pc}
   816d0:	00081eb5 	.word	0x00081eb5

000816d4 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   816d4:	b580      	push	{r7, lr}
   816d6:	b08a      	sub	sp, #40	; 0x28
   816d8:	af00      	add	r7, sp, #0
   816da:	60f8      	str	r0, [r7, #12]
   816dc:	60b9      	str	r1, [r7, #8]
   816de:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   816e0:	687b      	ldr	r3, [r7, #4]
   816e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
   816e6:	fb02 f203 	mul.w	r2, r2, r3
   816ea:	68bb      	ldr	r3, [r7, #8]
   816ec:	4413      	add	r3, r2
   816ee:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   816f0:	687b      	ldr	r3, [r7, #4]
   816f2:	f246 11a8 	movw	r1, #25000	; 0x61a8
   816f6:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   816fa:	fbb2 f3f3 	udiv	r3, r2, r3
   816fe:	2b80      	cmp	r3, #128	; 0x80
   81700:	d901      	bls.n	81706 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   81702:	2300      	movs	r3, #0
   81704:	e085      	b.n	81812 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   81706:	68bb      	ldr	r3, [r7, #8]
   81708:	085a      	lsrs	r2, r3, #1
   8170a:	687b      	ldr	r3, [r7, #4]
   8170c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81710:	fb01 f303 	mul.w	r3, r1, r3
   81714:	429a      	cmp	r2, r3
   81716:	d201      	bcs.n	8171c <can_set_baudrate+0x48>
		return 0;
   81718:	2300      	movs	r3, #0
   8171a:	e07a      	b.n	81812 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   8171c:	2308      	movs	r3, #8
   8171e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   81722:	f04f 33ff 	mov.w	r3, #4294967295
   81726:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81728:	2308      	movs	r3, #8
   8172a:	77fb      	strb	r3, [r7, #31]
   8172c:	e02b      	b.n	81786 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   8172e:	7ffb      	ldrb	r3, [r7, #31]
   81730:	687a      	ldr	r2, [r7, #4]
   81732:	fb02 f303 	mul.w	r3, r2, r3
   81736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8173a:	fb02 f303 	mul.w	r3, r2, r3
   8173e:	68ba      	ldr	r2, [r7, #8]
   81740:	fbb2 f3f3 	udiv	r3, r2, r3
   81744:	2b80      	cmp	r3, #128	; 0x80
   81746:	d81b      	bhi.n	81780 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   81748:	7ffb      	ldrb	r3, [r7, #31]
   8174a:	687a      	ldr	r2, [r7, #4]
   8174c:	fb02 f303 	mul.w	r3, r2, r3
   81750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81754:	fb02 f203 	mul.w	r2, r2, r3
   81758:	68bb      	ldr	r3, [r7, #8]
   8175a:	fbb3 f1f2 	udiv	r1, r3, r2
   8175e:	fb02 f201 	mul.w	r2, r2, r1
   81762:	1a9b      	subs	r3, r3, r2
   81764:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   81766:	69ba      	ldr	r2, [r7, #24]
   81768:	6a3b      	ldr	r3, [r7, #32]
   8176a:	429a      	cmp	r2, r3
   8176c:	d208      	bcs.n	81780 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   8176e:	69bb      	ldr	r3, [r7, #24]
   81770:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   81772:	7ffb      	ldrb	r3, [r7, #31]
   81774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   81778:	6a3b      	ldr	r3, [r7, #32]
   8177a:	2b00      	cmp	r3, #0
   8177c:	d100      	bne.n	81780 <can_set_baudrate+0xac>
					break;
   8177e:	e005      	b.n	8178c <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81780:	7ffb      	ldrb	r3, [r7, #31]
   81782:	3301      	adds	r3, #1
   81784:	77fb      	strb	r3, [r7, #31]
   81786:	7ffb      	ldrb	r3, [r7, #31]
   81788:	2b19      	cmp	r3, #25
   8178a:	d9d0      	bls.n	8172e <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   8178c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81790:	687a      	ldr	r2, [r7, #4]
   81792:	fb02 f303 	mul.w	r3, r2, r3
   81796:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8179a:	fb02 f303 	mul.w	r3, r2, r3
   8179e:	68ba      	ldr	r2, [r7, #8]
   817a0:	fbb2 f3f3 	udiv	r3, r2, r3
   817a4:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   817a6:	7dfb      	ldrb	r3, [r7, #23]
   817a8:	2b01      	cmp	r3, #1
   817aa:	d801      	bhi.n	817b0 <can_set_baudrate+0xdc>
		return 0;
   817ac:	2300      	movs	r3, #0
   817ae:	e030      	b.n	81812 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   817b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   817b4:	f1a3 0208 	sub.w	r2, r3, #8
   817b8:	4613      	mov	r3, r2
   817ba:	005b      	lsls	r3, r3, #1
   817bc:	4413      	add	r3, r2
   817be:	005b      	lsls	r3, r3, #1
   817c0:	4a16      	ldr	r2, [pc, #88]	; (8181c <can_set_baudrate+0x148>)
   817c2:	4413      	add	r3, r2
   817c4:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   817c6:	68f8      	ldr	r0, [r7, #12]
   817c8:	4b15      	ldr	r3, [pc, #84]	; (81820 <can_set_baudrate+0x14c>)
   817ca:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   817cc:	693b      	ldr	r3, [r7, #16]
   817ce:	78db      	ldrb	r3, [r3, #3]
   817d0:	3b01      	subs	r3, #1
   817d2:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   817d6:	693b      	ldr	r3, [r7, #16]
   817d8:	789b      	ldrb	r3, [r3, #2]
   817da:	3b01      	subs	r3, #1
   817dc:	011b      	lsls	r3, r3, #4
   817de:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   817e2:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   817e4:	693b      	ldr	r3, [r7, #16]
   817e6:	785b      	ldrb	r3, [r3, #1]
   817e8:	3b01      	subs	r3, #1
   817ea:	021b      	lsls	r3, r3, #8
   817ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   817f0:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   817f2:	693b      	ldr	r3, [r7, #16]
   817f4:	791b      	ldrb	r3, [r3, #4]
   817f6:	3b01      	subs	r3, #1
   817f8:	031b      	lsls	r3, r3, #12
   817fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   817fe:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81800:	7dfb      	ldrb	r3, [r7, #23]
   81802:	3b01      	subs	r3, #1
   81804:	041b      	lsls	r3, r3, #16
   81806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8180a:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8180c:	68fb      	ldr	r3, [r7, #12]
   8180e:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81810:	2301      	movs	r3, #1
}
   81812:	4618      	mov	r0, r3
   81814:	3728      	adds	r7, #40	; 0x28
   81816:	46bd      	mov	sp, r7
   81818:	bd80      	pop	{r7, pc}
   8181a:	bf00      	nop
   8181c:	00086978 	.word	0x00086978
   81820:	000818cd 	.word	0x000818cd

00081824 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81824:	b580      	push	{r7, lr}
   81826:	b086      	sub	sp, #24
   81828:	af00      	add	r7, sp, #0
   8182a:	60f8      	str	r0, [r7, #12]
   8182c:	60b9      	str	r1, [r7, #8]
   8182e:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   81830:	68f8      	ldr	r0, [r7, #12]
   81832:	68b9      	ldr	r1, [r7, #8]
   81834:	687a      	ldr	r2, [r7, #4]
   81836:	4b17      	ldr	r3, [pc, #92]	; (81894 <can_init+0x70>)
   81838:	4798      	blx	r3
   8183a:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   8183c:	697b      	ldr	r3, [r7, #20]
   8183e:	2b00      	cmp	r3, #0
   81840:	d101      	bne.n	81846 <can_init+0x22>
		return 0;
   81842:	2300      	movs	r3, #0
   81844:	e021      	b.n	8188a <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81846:	68f8      	ldr	r0, [r7, #12]
   81848:	4b13      	ldr	r3, [pc, #76]	; (81898 <can_init+0x74>)
   8184a:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   8184c:	68f8      	ldr	r0, [r7, #12]
   8184e:	4b13      	ldr	r3, [pc, #76]	; (8189c <can_init+0x78>)
   81850:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   81852:	2300      	movs	r3, #0
   81854:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   81856:	2300      	movs	r3, #0
   81858:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8185a:	e006      	b.n	8186a <can_init+0x46>
		ul_flag = can_get_status(p_can);
   8185c:	68f8      	ldr	r0, [r7, #12]
   8185e:	4b10      	ldr	r3, [pc, #64]	; (818a0 <can_init+0x7c>)
   81860:	4798      	blx	r3
   81862:	6178      	str	r0, [r7, #20]
		ul_tick++;
   81864:	693b      	ldr	r3, [r7, #16]
   81866:	3301      	adds	r3, #1
   81868:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8186a:	697b      	ldr	r3, [r7, #20]
   8186c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   81870:	2b00      	cmp	r3, #0
   81872:	d103      	bne.n	8187c <can_init+0x58>
   81874:	693a      	ldr	r2, [r7, #16]
   81876:	4b0b      	ldr	r3, [pc, #44]	; (818a4 <can_init+0x80>)
   81878:	429a      	cmp	r2, r3
   8187a:	d9ef      	bls.n	8185c <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   8187c:	693a      	ldr	r2, [r7, #16]
   8187e:	4b0a      	ldr	r3, [pc, #40]	; (818a8 <can_init+0x84>)
   81880:	429a      	cmp	r2, r3
   81882:	d101      	bne.n	81888 <can_init+0x64>
		return 0;
   81884:	2300      	movs	r3, #0
   81886:	e000      	b.n	8188a <can_init+0x66>
	} else {
		return 1;
   81888:	2301      	movs	r3, #1
	}
}
   8188a:	4618      	mov	r0, r3
   8188c:	3718      	adds	r7, #24
   8188e:	46bd      	mov	sp, r7
   81890:	bd80      	pop	{r7, pc}
   81892:	bf00      	nop
   81894:	000816d5 	.word	0x000816d5
   81898:	00081c65 	.word	0x00081c65
   8189c:	000818ad 	.word	0x000818ad
   818a0:	00081925 	.word	0x00081925
   818a4:	0001869f 	.word	0x0001869f
   818a8:	000186a0 	.word	0x000186a0

000818ac <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   818ac:	b480      	push	{r7}
   818ae:	b083      	sub	sp, #12
   818b0:	af00      	add	r7, sp, #0
   818b2:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   818b4:	687b      	ldr	r3, [r7, #4]
   818b6:	681b      	ldr	r3, [r3, #0]
   818b8:	f043 0201 	orr.w	r2, r3, #1
   818bc:	687b      	ldr	r3, [r7, #4]
   818be:	601a      	str	r2, [r3, #0]
}
   818c0:	370c      	adds	r7, #12
   818c2:	46bd      	mov	sp, r7
   818c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   818c8:	4770      	bx	lr
   818ca:	bf00      	nop

000818cc <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   818cc:	b480      	push	{r7}
   818ce:	b083      	sub	sp, #12
   818d0:	af00      	add	r7, sp, #0
   818d2:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   818d4:	687b      	ldr	r3, [r7, #4]
   818d6:	681b      	ldr	r3, [r3, #0]
   818d8:	f023 0201 	bic.w	r2, r3, #1
   818dc:	687b      	ldr	r3, [r7, #4]
   818de:	601a      	str	r2, [r3, #0]
}
   818e0:	370c      	adds	r7, #12
   818e2:	46bd      	mov	sp, r7
   818e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   818e8:	4770      	bx	lr
   818ea:	bf00      	nop

000818ec <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   818ec:	b480      	push	{r7}
   818ee:	b083      	sub	sp, #12
   818f0:	af00      	add	r7, sp, #0
   818f2:	6078      	str	r0, [r7, #4]
   818f4:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   818f6:	687b      	ldr	r3, [r7, #4]
   818f8:	683a      	ldr	r2, [r7, #0]
   818fa:	605a      	str	r2, [r3, #4]
}
   818fc:	370c      	adds	r7, #12
   818fe:	46bd      	mov	sp, r7
   81900:	f85d 7b04 	ldr.w	r7, [sp], #4
   81904:	4770      	bx	lr
   81906:	bf00      	nop

00081908 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81908:	b480      	push	{r7}
   8190a:	b083      	sub	sp, #12
   8190c:	af00      	add	r7, sp, #0
   8190e:	6078      	str	r0, [r7, #4]
   81910:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81912:	687b      	ldr	r3, [r7, #4]
   81914:	683a      	ldr	r2, [r7, #0]
   81916:	609a      	str	r2, [r3, #8]
}
   81918:	370c      	adds	r7, #12
   8191a:	46bd      	mov	sp, r7
   8191c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81920:	4770      	bx	lr
   81922:	bf00      	nop

00081924 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81924:	b480      	push	{r7}
   81926:	b083      	sub	sp, #12
   81928:	af00      	add	r7, sp, #0
   8192a:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   8192c:	687b      	ldr	r3, [r7, #4]
   8192e:	691b      	ldr	r3, [r3, #16]
}
   81930:	4618      	mov	r0, r3
   81932:	370c      	adds	r7, #12
   81934:	46bd      	mov	sp, r7
   81936:	f85d 7b04 	ldr.w	r7, [sp], #4
   8193a:	4770      	bx	lr

0008193c <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   8193c:	b480      	push	{r7}
   8193e:	b085      	sub	sp, #20
   81940:	af00      	add	r7, sp, #0
   81942:	6078      	str	r0, [r7, #4]
   81944:	460b      	mov	r3, r1
   81946:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   81948:	687b      	ldr	r3, [r7, #4]
   8194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8194c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81950:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   81952:	78fa      	ldrb	r2, [r7, #3]
   81954:	68fb      	ldr	r3, [r7, #12]
   81956:	431a      	orrs	r2, r3
   81958:	687b      	ldr	r3, [r7, #4]
   8195a:	625a      	str	r2, [r3, #36]	; 0x24
}
   8195c:	3714      	adds	r7, #20
   8195e:	46bd      	mov	sp, r7
   81960:	f85d 7b04 	ldr.w	r7, [sp], #4
   81964:	4770      	bx	lr
   81966:	bf00      	nop

00081968 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   81968:	b480      	push	{r7}
   8196a:	b083      	sub	sp, #12
   8196c:	af00      	add	r7, sp, #0
   8196e:	6078      	str	r0, [r7, #4]
   81970:	460b      	mov	r3, r1
   81972:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   81974:	78fb      	ldrb	r3, [r7, #3]
   81976:	687a      	ldr	r2, [r7, #4]
   81978:	015b      	lsls	r3, r3, #5
   8197a:	4413      	add	r3, r2
   8197c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81980:	681b      	ldr	r3, [r3, #0]
}
   81982:	4618      	mov	r0, r3
   81984:	370c      	adds	r7, #12
   81986:	46bd      	mov	sp, r7
   81988:	f85d 7b04 	ldr.w	r7, [sp], #4
   8198c:	4770      	bx	lr
   8198e:	bf00      	nop

00081990 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81990:	b480      	push	{r7}
   81992:	b085      	sub	sp, #20
   81994:	af00      	add	r7, sp, #0
   81996:	6078      	str	r0, [r7, #4]
   81998:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8199a:	683b      	ldr	r3, [r7, #0]
   8199c:	681b      	ldr	r3, [r3, #0]
   8199e:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   819a0:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   819a2:	683a      	ldr	r2, [r7, #0]
   819a4:	7992      	ldrb	r2, [r2, #6]
   819a6:	0412      	lsls	r2, r2, #16
   819a8:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   819ac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   819b0:	6879      	ldr	r1, [r7, #4]
   819b2:	015b      	lsls	r3, r3, #5
   819b4:	440b      	add	r3, r1
   819b6:	f503 7306 	add.w	r3, r3, #536	; 0x218
   819ba:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   819bc:	3714      	adds	r7, #20
   819be:	46bd      	mov	sp, r7
   819c0:	f85d 7b04 	ldr.w	r7, [sp], #4
   819c4:	4770      	bx	lr
   819c6:	bf00      	nop

000819c8 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   819c8:	b480      	push	{r7}
   819ca:	b085      	sub	sp, #20
   819cc:	af00      	add	r7, sp, #0
   819ce:	6078      	str	r0, [r7, #4]
   819d0:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   819d2:	683b      	ldr	r3, [r7, #0]
   819d4:	681b      	ldr	r3, [r3, #0]
   819d6:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   819d8:	683b      	ldr	r3, [r7, #0]
   819da:	791b      	ldrb	r3, [r3, #4]
   819dc:	2b00      	cmp	r3, #0
   819de:	d12e      	bne.n	81a3e <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   819e0:	7bfb      	ldrb	r3, [r7, #15]
   819e2:	687a      	ldr	r2, [r7, #4]
   819e4:	3310      	adds	r3, #16
   819e6:	015b      	lsls	r3, r3, #5
   819e8:	4413      	add	r3, r2
   819ea:	2200      	movs	r2, #0
   819ec:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   819ee:	7bfb      	ldrb	r3, [r7, #15]
   819f0:	687a      	ldr	r2, [r7, #4]
   819f2:	3310      	adds	r3, #16
   819f4:	015b      	lsls	r3, r3, #5
   819f6:	4413      	add	r3, r2
   819f8:	2200      	movs	r2, #0
   819fa:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   819fc:	7bfb      	ldrb	r3, [r7, #15]
   819fe:	687a      	ldr	r2, [r7, #4]
   81a00:	015b      	lsls	r3, r3, #5
   81a02:	4413      	add	r3, r2
   81a04:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a08:	2200      	movs	r2, #0
   81a0a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81a0c:	7bfb      	ldrb	r3, [r7, #15]
   81a0e:	687a      	ldr	r2, [r7, #4]
   81a10:	015b      	lsls	r3, r3, #5
   81a12:	4413      	add	r3, r2
   81a14:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81a18:	2200      	movs	r2, #0
   81a1a:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81a1c:	7bfb      	ldrb	r3, [r7, #15]
   81a1e:	687a      	ldr	r2, [r7, #4]
   81a20:	015b      	lsls	r3, r3, #5
   81a22:	4413      	add	r3, r2
   81a24:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81a28:	2200      	movs	r2, #0
   81a2a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81a2c:	7bfb      	ldrb	r3, [r7, #15]
   81a2e:	687a      	ldr	r2, [r7, #4]
   81a30:	015b      	lsls	r3, r3, #5
   81a32:	4413      	add	r3, r2
   81a34:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81a38:	2200      	movs	r2, #0
   81a3a:	605a      	str	r2, [r3, #4]
		return;
   81a3c:	e04e      	b.n	81adc <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a3e:	7bfb      	ldrb	r3, [r7, #15]
   81a40:	7bfa      	ldrb	r2, [r7, #15]
   81a42:	6879      	ldr	r1, [r7, #4]
   81a44:	3210      	adds	r2, #16
   81a46:	0152      	lsls	r2, r2, #5
   81a48:	440a      	add	r2, r1
   81a4a:	6812      	ldr	r2, [r2, #0]
   81a4c:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81a50:	683a      	ldr	r2, [r7, #0]
   81a52:	79d2      	ldrb	r2, [r2, #7]
   81a54:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   81a56:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a58:	6879      	ldr	r1, [r7, #4]
   81a5a:	3310      	adds	r3, #16
   81a5c:	015b      	lsls	r3, r3, #5
   81a5e:	440b      	add	r3, r1
   81a60:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81a62:	683b      	ldr	r3, [r7, #0]
   81a64:	795b      	ldrb	r3, [r3, #5]
   81a66:	2b00      	cmp	r3, #0
   81a68:	d015      	beq.n	81a96 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   81a6a:	7bfb      	ldrb	r3, [r7, #15]
   81a6c:	683a      	ldr	r2, [r7, #0]
   81a6e:	68d2      	ldr	r2, [r2, #12]
   81a70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a74:	6879      	ldr	r1, [r7, #4]
   81a76:	3310      	adds	r3, #16
   81a78:	015b      	lsls	r3, r3, #5
   81a7a:	440b      	add	r3, r1
   81a7c:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81a7e:	7bfb      	ldrb	r3, [r7, #15]
   81a80:	683a      	ldr	r2, [r7, #0]
   81a82:	6912      	ldr	r2, [r2, #16]
   81a84:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a88:	6879      	ldr	r1, [r7, #4]
   81a8a:	015b      	lsls	r3, r3, #5
   81a8c:	440b      	add	r3, r1
   81a8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a92:	601a      	str	r2, [r3, #0]
   81a94:	e010      	b.n	81ab8 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81a96:	7bfb      	ldrb	r3, [r7, #15]
   81a98:	683a      	ldr	r2, [r7, #0]
   81a9a:	68d2      	ldr	r2, [r2, #12]
   81a9c:	6879      	ldr	r1, [r7, #4]
   81a9e:	3310      	adds	r3, #16
   81aa0:	015b      	lsls	r3, r3, #5
   81aa2:	440b      	add	r3, r1
   81aa4:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81aa6:	7bfb      	ldrb	r3, [r7, #15]
   81aa8:	683a      	ldr	r2, [r7, #0]
   81aaa:	6912      	ldr	r2, [r2, #16]
   81aac:	6879      	ldr	r1, [r7, #4]
   81aae:	015b      	lsls	r3, r3, #5
   81ab0:	440b      	add	r3, r1
   81ab2:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81ab6:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81ab8:	7bfb      	ldrb	r3, [r7, #15]
   81aba:	7bfa      	ldrb	r2, [r7, #15]
   81abc:	6879      	ldr	r1, [r7, #4]
   81abe:	3210      	adds	r2, #16
   81ac0:	0152      	lsls	r2, r2, #5
   81ac2:	440a      	add	r2, r1
   81ac4:	6812      	ldr	r2, [r2, #0]
   81ac6:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81aca:	683a      	ldr	r2, [r7, #0]
   81acc:	7912      	ldrb	r2, [r2, #4]
   81ace:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81ad0:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81ad2:	6879      	ldr	r1, [r7, #4]
   81ad4:	3310      	adds	r3, #16
   81ad6:	015b      	lsls	r3, r3, #5
   81ad8:	440b      	add	r3, r1
   81ada:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81adc:	3714      	adds	r7, #20
   81ade:	46bd      	mov	sp, r7
   81ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ae4:	4770      	bx	lr
   81ae6:	bf00      	nop

00081ae8 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81ae8:	b580      	push	{r7, lr}
   81aea:	b086      	sub	sp, #24
   81aec:	af00      	add	r7, sp, #0
   81aee:	6078      	str	r0, [r7, #4]
   81af0:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81af2:	2300      	movs	r3, #0
   81af4:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81af6:	683b      	ldr	r3, [r7, #0]
   81af8:	681b      	ldr	r3, [r3, #0]
   81afa:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81afc:	683b      	ldr	r3, [r7, #0]
   81afe:	689b      	ldr	r3, [r3, #8]
   81b00:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81b02:	68fb      	ldr	r3, [r7, #12]
   81b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81b08:	2b00      	cmp	r3, #0
   81b0a:	d006      	beq.n	81b1a <can_mailbox_read+0x32>
   81b0c:	68fb      	ldr	r3, [r7, #12]
   81b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81b12:	2b00      	cmp	r3, #0
   81b14:	d001      	beq.n	81b1a <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81b16:	2302      	movs	r3, #2
   81b18:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81b1a:	7cfb      	ldrb	r3, [r7, #19]
   81b1c:	687a      	ldr	r2, [r7, #4]
   81b1e:	015b      	lsls	r3, r3, #5
   81b20:	4413      	add	r3, r2
   81b22:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b26:	685b      	ldr	r3, [r3, #4]
   81b28:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81b2c:	683b      	ldr	r3, [r7, #0]
   81b2e:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81b30:	68fb      	ldr	r3, [r7, #12]
   81b32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81b36:	0c1b      	lsrs	r3, r3, #16
   81b38:	b2da      	uxtb	r2, r3
   81b3a:	683b      	ldr	r3, [r7, #0]
   81b3c:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81b3e:	7cfb      	ldrb	r3, [r7, #19]
   81b40:	687a      	ldr	r2, [r7, #4]
   81b42:	015b      	lsls	r3, r3, #5
   81b44:	4413      	add	r3, r2
   81b46:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81b4a:	685a      	ldr	r2, [r3, #4]
   81b4c:	683b      	ldr	r3, [r7, #0]
   81b4e:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81b50:	683b      	ldr	r3, [r7, #0]
   81b52:	799b      	ldrb	r3, [r3, #6]
   81b54:	2b04      	cmp	r3, #4
   81b56:	d908      	bls.n	81b6a <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81b58:	7cfb      	ldrb	r3, [r7, #19]
   81b5a:	687a      	ldr	r2, [r7, #4]
   81b5c:	015b      	lsls	r3, r3, #5
   81b5e:	4413      	add	r3, r2
   81b60:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81b64:	681a      	ldr	r2, [r3, #0]
   81b66:	683b      	ldr	r3, [r7, #0]
   81b68:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81b6a:	7cfb      	ldrb	r3, [r7, #19]
   81b6c:	687a      	ldr	r2, [r7, #4]
   81b6e:	015b      	lsls	r3, r3, #5
   81b70:	4413      	add	r3, r2
   81b72:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81b76:	681a      	ldr	r2, [r3, #0]
   81b78:	683b      	ldr	r3, [r7, #0]
   81b7a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81b7c:	683b      	ldr	r3, [r7, #0]
   81b7e:	689b      	ldr	r3, [r3, #8]
   81b80:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81b82:	68fb      	ldr	r3, [r7, #12]
   81b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81b88:	2b00      	cmp	r3, #0
   81b8a:	d003      	beq.n	81b94 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81b8c:	697b      	ldr	r3, [r7, #20]
   81b8e:	f043 0304 	orr.w	r3, r3, #4
   81b92:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81b94:	6878      	ldr	r0, [r7, #4]
   81b96:	6839      	ldr	r1, [r7, #0]
   81b98:	4b03      	ldr	r3, [pc, #12]	; (81ba8 <can_mailbox_read+0xc0>)
   81b9a:	4798      	blx	r3

	return ul_retval;
   81b9c:	697b      	ldr	r3, [r7, #20]
}
   81b9e:	4618      	mov	r0, r3
   81ba0:	3718      	adds	r7, #24
   81ba2:	46bd      	mov	sp, r7
   81ba4:	bd80      	pop	{r7, pc}
   81ba6:	bf00      	nop
   81ba8:	00081991 	.word	0x00081991

00081bac <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81bac:	b580      	push	{r7, lr}
   81bae:	b084      	sub	sp, #16
   81bb0:	af00      	add	r7, sp, #0
   81bb2:	6078      	str	r0, [r7, #4]
   81bb4:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81bb6:	683b      	ldr	r3, [r7, #0]
   81bb8:	681b      	ldr	r3, [r3, #0]
   81bba:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   81bbc:	7bfb      	ldrb	r3, [r7, #15]
   81bbe:	6878      	ldr	r0, [r7, #4]
   81bc0:	4619      	mov	r1, r3
   81bc2:	4b27      	ldr	r3, [pc, #156]	; (81c60 <can_mailbox_write+0xb4>)
   81bc4:	4798      	blx	r3
   81bc6:	4602      	mov	r2, r0
   81bc8:	683b      	ldr	r3, [r7, #0]
   81bca:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81bcc:	683b      	ldr	r3, [r7, #0]
   81bce:	689b      	ldr	r3, [r3, #8]
   81bd0:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   81bd2:	68bb      	ldr	r3, [r7, #8]
   81bd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81bd8:	2b00      	cmp	r3, #0
   81bda:	d101      	bne.n	81be0 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   81bdc:	2301      	movs	r3, #1
   81bde:	e03b      	b.n	81c58 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   81be0:	683b      	ldr	r3, [r7, #0]
   81be2:	795b      	ldrb	r3, [r3, #5]
   81be4:	2b00      	cmp	r3, #0
   81be6:	d00b      	beq.n	81c00 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81be8:	7bfb      	ldrb	r3, [r7, #15]
   81bea:	683a      	ldr	r2, [r7, #0]
   81bec:	6912      	ldr	r2, [r2, #16]
   81bee:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81bf2:	6879      	ldr	r1, [r7, #4]
   81bf4:	015b      	lsls	r3, r3, #5
   81bf6:	440b      	add	r3, r1
   81bf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81bfc:	601a      	str	r2, [r3, #0]
   81bfe:	e008      	b.n	81c12 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81c00:	7bfb      	ldrb	r3, [r7, #15]
   81c02:	683a      	ldr	r2, [r7, #0]
   81c04:	6912      	ldr	r2, [r2, #16]
   81c06:	6879      	ldr	r1, [r7, #4]
   81c08:	015b      	lsls	r3, r3, #5
   81c0a:	440b      	add	r3, r1
   81c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81c10:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81c12:	7bfb      	ldrb	r3, [r7, #15]
   81c14:	683a      	ldr	r2, [r7, #0]
   81c16:	6992      	ldr	r2, [r2, #24]
   81c18:	6879      	ldr	r1, [r7, #4]
   81c1a:	015b      	lsls	r3, r3, #5
   81c1c:	440b      	add	r3, r1
   81c1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81c22:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81c24:	683b      	ldr	r3, [r7, #0]
   81c26:	799b      	ldrb	r3, [r3, #6]
   81c28:	2b04      	cmp	r3, #4
   81c2a:	d908      	bls.n	81c3e <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81c2c:	7bfb      	ldrb	r3, [r7, #15]
   81c2e:	683a      	ldr	r2, [r7, #0]
   81c30:	69d2      	ldr	r2, [r2, #28]
   81c32:	6879      	ldr	r1, [r7, #4]
   81c34:	015b      	lsls	r3, r3, #5
   81c36:	440b      	add	r3, r1
   81c38:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81c3c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   81c3e:	7bfb      	ldrb	r3, [r7, #15]
   81c40:	683a      	ldr	r2, [r7, #0]
   81c42:	7992      	ldrb	r2, [r2, #6]
   81c44:	0412      	lsls	r2, r2, #16
   81c46:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81c4a:	6879      	ldr	r1, [r7, #4]
   81c4c:	015b      	lsls	r3, r3, #5
   81c4e:	440b      	add	r3, r1
   81c50:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81c54:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   81c56:	2300      	movs	r3, #0
}
   81c58:	4618      	mov	r0, r3
   81c5a:	3710      	adds	r7, #16
   81c5c:	46bd      	mov	sp, r7
   81c5e:	bd80      	pop	{r7, pc}
   81c60:	00081969 	.word	0x00081969

00081c64 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81c64:	b580      	push	{r7, lr}
   81c66:	b08c      	sub	sp, #48	; 0x30
   81c68:	af00      	add	r7, sp, #0
   81c6a:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81c6c:	2300      	movs	r3, #0
   81c6e:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81c70:	2300      	movs	r3, #0
   81c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81c76:	e00d      	b.n	81c94 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   81c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c7c:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81c7e:	f107 030c 	add.w	r3, r7, #12
   81c82:	6878      	ldr	r0, [r7, #4]
   81c84:	4619      	mov	r1, r3
   81c86:	4b07      	ldr	r3, [pc, #28]	; (81ca4 <can_reset_all_mailbox+0x40>)
   81c88:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c8e:	3301      	adds	r3, #1
   81c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c98:	2b07      	cmp	r3, #7
   81c9a:	d9ed      	bls.n	81c78 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   81c9c:	3730      	adds	r7, #48	; 0x30
   81c9e:	46bd      	mov	sp, r7
   81ca0:	bd80      	pop	{r7, pc}
   81ca2:	bf00      	nop
   81ca4:	000819c9 	.word	0x000819c9

00081ca8 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   81ca8:	b480      	push	{r7}
   81caa:	b085      	sub	sp, #20
   81cac:	af00      	add	r7, sp, #0
   81cae:	60f8      	str	r0, [r7, #12]
   81cb0:	60b9      	str	r1, [r7, #8]
   81cb2:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81cb4:	687b      	ldr	r3, [r7, #4]
   81cb6:	2b00      	cmp	r3, #0
   81cb8:	d003      	beq.n	81cc2 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81cba:	68fb      	ldr	r3, [r7, #12]
   81cbc:	68ba      	ldr	r2, [r7, #8]
   81cbe:	665a      	str	r2, [r3, #100]	; 0x64
   81cc0:	e002      	b.n	81cc8 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81cc2:	68fb      	ldr	r3, [r7, #12]
   81cc4:	68ba      	ldr	r2, [r7, #8]
   81cc6:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81cc8:	3714      	adds	r7, #20
   81cca:	46bd      	mov	sp, r7
   81ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cd0:	4770      	bx	lr
   81cd2:	bf00      	nop

00081cd4 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81cd4:	b480      	push	{r7}
   81cd6:	b087      	sub	sp, #28
   81cd8:	af00      	add	r7, sp, #0
   81cda:	60f8      	str	r0, [r7, #12]
   81cdc:	60b9      	str	r1, [r7, #8]
   81cde:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81ce0:	68fb      	ldr	r3, [r7, #12]
   81ce2:	687a      	ldr	r2, [r7, #4]
   81ce4:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81ce6:	68bb      	ldr	r3, [r7, #8]
   81ce8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81cec:	d01f      	beq.n	81d2e <pio_set_peripheral+0x5a>
   81cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81cf2:	d805      	bhi.n	81d00 <pio_set_peripheral+0x2c>
   81cf4:	2b00      	cmp	r3, #0
   81cf6:	d027      	beq.n	81d48 <pio_set_peripheral+0x74>
   81cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81cfc:	d00a      	beq.n	81d14 <pio_set_peripheral+0x40>
   81cfe:	e01f      	b.n	81d40 <pio_set_peripheral+0x6c>
   81d00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81d04:	d020      	beq.n	81d48 <pio_set_peripheral+0x74>
   81d06:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81d0a:	d01d      	beq.n	81d48 <pio_set_peripheral+0x74>
   81d0c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81d10:	d01a      	beq.n	81d48 <pio_set_peripheral+0x74>
   81d12:	e015      	b.n	81d40 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81d14:	68fb      	ldr	r3, [r7, #12]
   81d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81d18:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81d1a:	68fb      	ldr	r3, [r7, #12]
   81d1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81d1e:	687b      	ldr	r3, [r7, #4]
   81d20:	43d9      	mvns	r1, r3
   81d22:	697b      	ldr	r3, [r7, #20]
   81d24:	400b      	ands	r3, r1
   81d26:	401a      	ands	r2, r3
   81d28:	68fb      	ldr	r3, [r7, #12]
   81d2a:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81d2c:	e008      	b.n	81d40 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81d2e:	68fb      	ldr	r3, [r7, #12]
   81d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81d32:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81d34:	687a      	ldr	r2, [r7, #4]
   81d36:	697b      	ldr	r3, [r7, #20]
   81d38:	431a      	orrs	r2, r3
   81d3a:	68fb      	ldr	r3, [r7, #12]
   81d3c:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81d3e:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81d40:	68fb      	ldr	r3, [r7, #12]
   81d42:	687a      	ldr	r2, [r7, #4]
   81d44:	605a      	str	r2, [r3, #4]
   81d46:	e000      	b.n	81d4a <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81d48:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81d4a:	371c      	adds	r7, #28
   81d4c:	46bd      	mov	sp, r7
   81d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d52:	4770      	bx	lr

00081d54 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81d54:	b580      	push	{r7, lr}
   81d56:	b084      	sub	sp, #16
   81d58:	af00      	add	r7, sp, #0
   81d5a:	60f8      	str	r0, [r7, #12]
   81d5c:	60b9      	str	r1, [r7, #8]
   81d5e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81d60:	68f8      	ldr	r0, [r7, #12]
   81d62:	68b9      	ldr	r1, [r7, #8]
   81d64:	4b18      	ldr	r3, [pc, #96]	; (81dc8 <pio_set_input+0x74>)
   81d66:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   81d68:	687b      	ldr	r3, [r7, #4]
   81d6a:	f003 0301 	and.w	r3, r3, #1
   81d6e:	68f8      	ldr	r0, [r7, #12]
   81d70:	68b9      	ldr	r1, [r7, #8]
   81d72:	461a      	mov	r2, r3
   81d74:	4b15      	ldr	r3, [pc, #84]	; (81dcc <pio_set_input+0x78>)
   81d76:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	f003 030a 	and.w	r3, r3, #10
   81d7e:	2b00      	cmp	r3, #0
   81d80:	d003      	beq.n	81d8a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   81d82:	68fb      	ldr	r3, [r7, #12]
   81d84:	68ba      	ldr	r2, [r7, #8]
   81d86:	621a      	str	r2, [r3, #32]
   81d88:	e002      	b.n	81d90 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81d8a:	68fb      	ldr	r3, [r7, #12]
   81d8c:	68ba      	ldr	r2, [r7, #8]
   81d8e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81d90:	687b      	ldr	r3, [r7, #4]
   81d92:	f003 0302 	and.w	r3, r3, #2
   81d96:	2b00      	cmp	r3, #0
   81d98:	d004      	beq.n	81da4 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   81d9a:	68fb      	ldr	r3, [r7, #12]
   81d9c:	68ba      	ldr	r2, [r7, #8]
   81d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   81da2:	e008      	b.n	81db6 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81da4:	687b      	ldr	r3, [r7, #4]
   81da6:	f003 0308 	and.w	r3, r3, #8
   81daa:	2b00      	cmp	r3, #0
   81dac:	d003      	beq.n	81db6 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   81dae:	68fb      	ldr	r3, [r7, #12]
   81db0:	68ba      	ldr	r2, [r7, #8]
   81db2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81db6:	68fb      	ldr	r3, [r7, #12]
   81db8:	68ba      	ldr	r2, [r7, #8]
   81dba:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   81dbc:	68fb      	ldr	r3, [r7, #12]
   81dbe:	68ba      	ldr	r2, [r7, #8]
   81dc0:	601a      	str	r2, [r3, #0]
}
   81dc2:	3710      	adds	r7, #16
   81dc4:	46bd      	mov	sp, r7
   81dc6:	bd80      	pop	{r7, pc}
   81dc8:	00081e35 	.word	0x00081e35
   81dcc:	00081ca9 	.word	0x00081ca9

00081dd0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81dd0:	b580      	push	{r7, lr}
   81dd2:	b084      	sub	sp, #16
   81dd4:	af00      	add	r7, sp, #0
   81dd6:	60f8      	str	r0, [r7, #12]
   81dd8:	60b9      	str	r1, [r7, #8]
   81dda:	607a      	str	r2, [r7, #4]
   81ddc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   81dde:	68f8      	ldr	r0, [r7, #12]
   81de0:	68b9      	ldr	r1, [r7, #8]
   81de2:	4b12      	ldr	r3, [pc, #72]	; (81e2c <pio_set_output+0x5c>)
   81de4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81de6:	68f8      	ldr	r0, [r7, #12]
   81de8:	68b9      	ldr	r1, [r7, #8]
   81dea:	69ba      	ldr	r2, [r7, #24]
   81dec:	4b10      	ldr	r3, [pc, #64]	; (81e30 <pio_set_output+0x60>)
   81dee:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81df0:	683b      	ldr	r3, [r7, #0]
   81df2:	2b00      	cmp	r3, #0
   81df4:	d003      	beq.n	81dfe <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81df6:	68fb      	ldr	r3, [r7, #12]
   81df8:	68ba      	ldr	r2, [r7, #8]
   81dfa:	651a      	str	r2, [r3, #80]	; 0x50
   81dfc:	e002      	b.n	81e04 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81dfe:	68fb      	ldr	r3, [r7, #12]
   81e00:	68ba      	ldr	r2, [r7, #8]
   81e02:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81e04:	687b      	ldr	r3, [r7, #4]
   81e06:	2b00      	cmp	r3, #0
   81e08:	d003      	beq.n	81e12 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81e0a:	68fb      	ldr	r3, [r7, #12]
   81e0c:	68ba      	ldr	r2, [r7, #8]
   81e0e:	631a      	str	r2, [r3, #48]	; 0x30
   81e10:	e002      	b.n	81e18 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81e12:	68fb      	ldr	r3, [r7, #12]
   81e14:	68ba      	ldr	r2, [r7, #8]
   81e16:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81e18:	68fb      	ldr	r3, [r7, #12]
   81e1a:	68ba      	ldr	r2, [r7, #8]
   81e1c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81e1e:	68fb      	ldr	r3, [r7, #12]
   81e20:	68ba      	ldr	r2, [r7, #8]
   81e22:	601a      	str	r2, [r3, #0]
}
   81e24:	3710      	adds	r7, #16
   81e26:	46bd      	mov	sp, r7
   81e28:	bd80      	pop	{r7, pc}
   81e2a:	bf00      	nop
   81e2c:	00081e35 	.word	0x00081e35
   81e30:	00081ca9 	.word	0x00081ca9

00081e34 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81e34:	b480      	push	{r7}
   81e36:	b083      	sub	sp, #12
   81e38:	af00      	add	r7, sp, #0
   81e3a:	6078      	str	r0, [r7, #4]
   81e3c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81e3e:	687b      	ldr	r3, [r7, #4]
   81e40:	683a      	ldr	r2, [r7, #0]
   81e42:	645a      	str	r2, [r3, #68]	; 0x44
}
   81e44:	370c      	adds	r7, #12
   81e46:	46bd      	mov	sp, r7
   81e48:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e4c:	4770      	bx	lr
   81e4e:	bf00      	nop

00081e50 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81e50:	b480      	push	{r7}
   81e52:	b083      	sub	sp, #12
   81e54:	af00      	add	r7, sp, #0
   81e56:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   81e58:	687b      	ldr	r3, [r7, #4]
   81e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81e5c:	4618      	mov	r0, r3
   81e5e:	370c      	adds	r7, #12
   81e60:	46bd      	mov	sp, r7
   81e62:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e66:	4770      	bx	lr

00081e68 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   81e68:	b480      	push	{r7}
   81e6a:	b083      	sub	sp, #12
   81e6c:	af00      	add	r7, sp, #0
   81e6e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81e70:	687b      	ldr	r3, [r7, #4]
   81e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81e74:	4618      	mov	r0, r3
   81e76:	370c      	adds	r7, #12
   81e78:	46bd      	mov	sp, r7
   81e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e7e:	4770      	bx	lr

00081e80 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81e80:	b480      	push	{r7}
   81e82:	b085      	sub	sp, #20
   81e84:	af00      	add	r7, sp, #0
   81e86:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e88:	687b      	ldr	r3, [r7, #4]
   81e8a:	095b      	lsrs	r3, r3, #5
   81e8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e90:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e94:	025b      	lsls	r3, r3, #9
   81e96:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81e98:	687b      	ldr	r3, [r7, #4]
   81e9a:	f003 031f 	and.w	r3, r3, #31
   81e9e:	2201      	movs	r2, #1
   81ea0:	fa02 f303 	lsl.w	r3, r2, r3
   81ea4:	461a      	mov	r2, r3
   81ea6:	68fb      	ldr	r3, [r7, #12]
   81ea8:	631a      	str	r2, [r3, #48]	; 0x30
}
   81eaa:	3714      	adds	r7, #20
   81eac:	46bd      	mov	sp, r7
   81eae:	f85d 7b04 	ldr.w	r7, [sp], #4
   81eb2:	4770      	bx	lr

00081eb4 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81eb4:	b480      	push	{r7}
   81eb6:	b085      	sub	sp, #20
   81eb8:	af00      	add	r7, sp, #0
   81eba:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ebc:	687b      	ldr	r3, [r7, #4]
   81ebe:	095b      	lsrs	r3, r3, #5
   81ec0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ec4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ec8:	025b      	lsls	r3, r3, #9
   81eca:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81ecc:	687b      	ldr	r3, [r7, #4]
   81ece:	f003 031f 	and.w	r3, r3, #31
   81ed2:	2201      	movs	r2, #1
   81ed4:	fa02 f303 	lsl.w	r3, r2, r3
   81ed8:	461a      	mov	r2, r3
   81eda:	68fb      	ldr	r3, [r7, #12]
   81edc:	635a      	str	r2, [r3, #52]	; 0x34
}
   81ede:	3714      	adds	r7, #20
   81ee0:	46bd      	mov	sp, r7
   81ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ee6:	4770      	bx	lr

00081ee8 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81ee8:	b480      	push	{r7}
   81eea:	b085      	sub	sp, #20
   81eec:	af00      	add	r7, sp, #0
   81eee:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ef0:	687b      	ldr	r3, [r7, #4]
   81ef2:	095b      	lsrs	r3, r3, #5
   81ef4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ef8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81efc:	025b      	lsls	r3, r3, #9
   81efe:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81f00:	68fb      	ldr	r3, [r7, #12]
   81f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81f04:	687b      	ldr	r3, [r7, #4]
   81f06:	f003 031f 	and.w	r3, r3, #31
   81f0a:	2101      	movs	r1, #1
   81f0c:	fa01 f303 	lsl.w	r3, r1, r3
   81f10:	4013      	ands	r3, r2
   81f12:	2b00      	cmp	r3, #0
   81f14:	d009      	beq.n	81f2a <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81f16:	687b      	ldr	r3, [r7, #4]
   81f18:	f003 031f 	and.w	r3, r3, #31
   81f1c:	2201      	movs	r2, #1
   81f1e:	fa02 f303 	lsl.w	r3, r2, r3
   81f22:	461a      	mov	r2, r3
   81f24:	68fb      	ldr	r3, [r7, #12]
   81f26:	635a      	str	r2, [r3, #52]	; 0x34
   81f28:	e008      	b.n	81f3c <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81f2a:	687b      	ldr	r3, [r7, #4]
   81f2c:	f003 031f 	and.w	r3, r3, #31
   81f30:	2201      	movs	r2, #1
   81f32:	fa02 f303 	lsl.w	r3, r2, r3
   81f36:	461a      	mov	r2, r3
   81f38:	68fb      	ldr	r3, [r7, #12]
   81f3a:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81f3c:	3714      	adds	r7, #20
   81f3e:	46bd      	mov	sp, r7
   81f40:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f44:	4770      	bx	lr
   81f46:	bf00      	nop

00081f48 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81f48:	b590      	push	{r4, r7, lr}
   81f4a:	b087      	sub	sp, #28
   81f4c:	af02      	add	r7, sp, #8
   81f4e:	6078      	str	r0, [r7, #4]
   81f50:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81f52:	687b      	ldr	r3, [r7, #4]
   81f54:	095b      	lsrs	r3, r3, #5
   81f56:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f5a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f5e:	025b      	lsls	r3, r3, #9
   81f60:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81f62:	683b      	ldr	r3, [r7, #0]
   81f64:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81f68:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f6c:	d048      	beq.n	82000 <pio_configure_pin+0xb8>
   81f6e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f72:	d806      	bhi.n	81f82 <pio_configure_pin+0x3a>
   81f74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f78:	d00a      	beq.n	81f90 <pio_configure_pin+0x48>
   81f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f7e:	d023      	beq.n	81fc8 <pio_configure_pin+0x80>
   81f80:	e070      	b.n	82064 <pio_configure_pin+0x11c>
   81f82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f86:	d047      	beq.n	82018 <pio_configure_pin+0xd0>
   81f88:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f8c:	d044      	beq.n	82018 <pio_configure_pin+0xd0>
   81f8e:	e069      	b.n	82064 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f90:	687b      	ldr	r3, [r7, #4]
   81f92:	f003 031f 	and.w	r3, r3, #31
   81f96:	2201      	movs	r2, #1
   81f98:	fa02 f303 	lsl.w	r3, r2, r3
   81f9c:	68f8      	ldr	r0, [r7, #12]
   81f9e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fa2:	461a      	mov	r2, r3
   81fa4:	4b33      	ldr	r3, [pc, #204]	; (82074 <pio_configure_pin+0x12c>)
   81fa6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81fa8:	687b      	ldr	r3, [r7, #4]
   81faa:	f003 031f 	and.w	r3, r3, #31
   81fae:	2201      	movs	r2, #1
   81fb0:	fa02 f303 	lsl.w	r3, r2, r3
   81fb4:	461a      	mov	r2, r3
   81fb6:	683b      	ldr	r3, [r7, #0]
   81fb8:	f003 0301 	and.w	r3, r3, #1
   81fbc:	68f8      	ldr	r0, [r7, #12]
   81fbe:	4611      	mov	r1, r2
   81fc0:	461a      	mov	r2, r3
   81fc2:	4b2d      	ldr	r3, [pc, #180]	; (82078 <pio_configure_pin+0x130>)
   81fc4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81fc6:	e04f      	b.n	82068 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81fc8:	687b      	ldr	r3, [r7, #4]
   81fca:	f003 031f 	and.w	r3, r3, #31
   81fce:	2201      	movs	r2, #1
   81fd0:	fa02 f303 	lsl.w	r3, r2, r3
   81fd4:	68f8      	ldr	r0, [r7, #12]
   81fd6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81fda:	461a      	mov	r2, r3
   81fdc:	4b25      	ldr	r3, [pc, #148]	; (82074 <pio_configure_pin+0x12c>)
   81fde:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81fe0:	687b      	ldr	r3, [r7, #4]
   81fe2:	f003 031f 	and.w	r3, r3, #31
   81fe6:	2201      	movs	r2, #1
   81fe8:	fa02 f303 	lsl.w	r3, r2, r3
   81fec:	461a      	mov	r2, r3
   81fee:	683b      	ldr	r3, [r7, #0]
   81ff0:	f003 0301 	and.w	r3, r3, #1
   81ff4:	68f8      	ldr	r0, [r7, #12]
   81ff6:	4611      	mov	r1, r2
   81ff8:	461a      	mov	r2, r3
   81ffa:	4b1f      	ldr	r3, [pc, #124]	; (82078 <pio_configure_pin+0x130>)
   81ffc:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81ffe:	e033      	b.n	82068 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82000:	687b      	ldr	r3, [r7, #4]
   82002:	f003 031f 	and.w	r3, r3, #31
   82006:	2201      	movs	r2, #1
   82008:	fa02 f303 	lsl.w	r3, r2, r3
   8200c:	68f8      	ldr	r0, [r7, #12]
   8200e:	4619      	mov	r1, r3
   82010:	683a      	ldr	r2, [r7, #0]
   82012:	4b1a      	ldr	r3, [pc, #104]	; (8207c <pio_configure_pin+0x134>)
   82014:	4798      	blx	r3
		break;
   82016:	e027      	b.n	82068 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82018:	687b      	ldr	r3, [r7, #4]
   8201a:	f003 031f 	and.w	r3, r3, #31
   8201e:	2201      	movs	r2, #1
   82020:	fa02 f303 	lsl.w	r3, r2, r3
   82024:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82026:	683b      	ldr	r3, [r7, #0]
   82028:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8202c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82030:	bf14      	ite	ne
   82032:	2300      	movne	r3, #0
   82034:	2301      	moveq	r3, #1
   82036:	b2db      	uxtb	r3, r3
   82038:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8203a:	683b      	ldr	r3, [r7, #0]
   8203c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82040:	2b00      	cmp	r3, #0
   82042:	bf0c      	ite	eq
   82044:	2300      	moveq	r3, #0
   82046:	2301      	movne	r3, #1
   82048:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8204a:	6838      	ldr	r0, [r7, #0]
   8204c:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82050:	2800      	cmp	r0, #0
   82052:	bf0c      	ite	eq
   82054:	2000      	moveq	r0, #0
   82056:	2001      	movne	r0, #1
   82058:	b2c0      	uxtb	r0, r0
   8205a:	9000      	str	r0, [sp, #0]
   8205c:	68f8      	ldr	r0, [r7, #12]
   8205e:	4c08      	ldr	r4, [pc, #32]	; (82080 <pio_configure_pin+0x138>)
   82060:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82062:	e001      	b.n	82068 <pio_configure_pin+0x120>

	default:
		return 0;
   82064:	2300      	movs	r3, #0
   82066:	e000      	b.n	8206a <pio_configure_pin+0x122>
	}

	return 1;
   82068:	2301      	movs	r3, #1
}
   8206a:	4618      	mov	r0, r3
   8206c:	3714      	adds	r7, #20
   8206e:	46bd      	mov	sp, r7
   82070:	bd90      	pop	{r4, r7, pc}
   82072:	bf00      	nop
   82074:	00081cd5 	.word	0x00081cd5
   82078:	00081ca9 	.word	0x00081ca9
   8207c:	00081d55 	.word	0x00081d55
   82080:	00081dd1 	.word	0x00081dd1

00082084 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82084:	b590      	push	{r4, r7, lr}
   82086:	b087      	sub	sp, #28
   82088:	af02      	add	r7, sp, #8
   8208a:	60f8      	str	r0, [r7, #12]
   8208c:	60b9      	str	r1, [r7, #8]
   8208e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82090:	687b      	ldr	r3, [r7, #4]
   82092:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82096:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8209a:	d02e      	beq.n	820fa <pio_configure_pin_group+0x76>
   8209c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   820a0:	d806      	bhi.n	820b0 <pio_configure_pin_group+0x2c>
   820a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   820a6:	d00a      	beq.n	820be <pio_configure_pin_group+0x3a>
   820a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   820ac:	d016      	beq.n	820dc <pio_configure_pin_group+0x58>
   820ae:	e04a      	b.n	82146 <pio_configure_pin_group+0xc2>
   820b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   820b4:	d027      	beq.n	82106 <pio_configure_pin_group+0x82>
   820b6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   820ba:	d024      	beq.n	82106 <pio_configure_pin_group+0x82>
   820bc:	e043      	b.n	82146 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   820be:	68f8      	ldr	r0, [r7, #12]
   820c0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820c4:	68ba      	ldr	r2, [r7, #8]
   820c6:	4b23      	ldr	r3, [pc, #140]	; (82154 <pio_configure_pin_group+0xd0>)
   820c8:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   820ca:	687b      	ldr	r3, [r7, #4]
   820cc:	f003 0301 	and.w	r3, r3, #1
   820d0:	68f8      	ldr	r0, [r7, #12]
   820d2:	68b9      	ldr	r1, [r7, #8]
   820d4:	461a      	mov	r2, r3
   820d6:	4b20      	ldr	r3, [pc, #128]	; (82158 <pio_configure_pin_group+0xd4>)
   820d8:	4798      	blx	r3
		break;
   820da:	e036      	b.n	8214a <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   820dc:	68f8      	ldr	r0, [r7, #12]
   820de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   820e2:	68ba      	ldr	r2, [r7, #8]
   820e4:	4b1b      	ldr	r3, [pc, #108]	; (82154 <pio_configure_pin_group+0xd0>)
   820e6:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   820e8:	687b      	ldr	r3, [r7, #4]
   820ea:	f003 0301 	and.w	r3, r3, #1
   820ee:	68f8      	ldr	r0, [r7, #12]
   820f0:	68b9      	ldr	r1, [r7, #8]
   820f2:	461a      	mov	r2, r3
   820f4:	4b18      	ldr	r3, [pc, #96]	; (82158 <pio_configure_pin_group+0xd4>)
   820f6:	4798      	blx	r3
		break;
   820f8:	e027      	b.n	8214a <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   820fa:	68f8      	ldr	r0, [r7, #12]
   820fc:	68b9      	ldr	r1, [r7, #8]
   820fe:	687a      	ldr	r2, [r7, #4]
   82100:	4b16      	ldr	r3, [pc, #88]	; (8215c <pio_configure_pin_group+0xd8>)
   82102:	4798      	blx	r3
		break;
   82104:	e021      	b.n	8214a <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82106:	687b      	ldr	r3, [r7, #4]
   82108:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8210c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82110:	bf14      	ite	ne
   82112:	2300      	movne	r3, #0
   82114:	2301      	moveq	r3, #1
   82116:	b2db      	uxtb	r3, r3
   82118:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8211a:	687b      	ldr	r3, [r7, #4]
   8211c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82120:	2b00      	cmp	r3, #0
   82122:	bf0c      	ite	eq
   82124:	2300      	moveq	r3, #0
   82126:	2301      	movne	r3, #1
   82128:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8212a:	6879      	ldr	r1, [r7, #4]
   8212c:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82130:	2900      	cmp	r1, #0
   82132:	bf0c      	ite	eq
   82134:	2100      	moveq	r1, #0
   82136:	2101      	movne	r1, #1
   82138:	b2c9      	uxtb	r1, r1
   8213a:	9100      	str	r1, [sp, #0]
   8213c:	68f8      	ldr	r0, [r7, #12]
   8213e:	68b9      	ldr	r1, [r7, #8]
   82140:	4c07      	ldr	r4, [pc, #28]	; (82160 <pio_configure_pin_group+0xdc>)
   82142:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82144:	e001      	b.n	8214a <pio_configure_pin_group+0xc6>

	default:
		return 0;
   82146:	2300      	movs	r3, #0
   82148:	e000      	b.n	8214c <pio_configure_pin_group+0xc8>
	}

	return 1;
   8214a:	2301      	movs	r3, #1
}
   8214c:	4618      	mov	r0, r3
   8214e:	3714      	adds	r7, #20
   82150:	46bd      	mov	sp, r7
   82152:	bd90      	pop	{r4, r7, pc}
   82154:	00081cd5 	.word	0x00081cd5
   82158:	00081ca9 	.word	0x00081ca9
   8215c:	00081d55 	.word	0x00081d55
   82160:	00081dd1 	.word	0x00081dd1

00082164 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82164:	b580      	push	{r7, lr}
   82166:	b084      	sub	sp, #16
   82168:	af00      	add	r7, sp, #0
   8216a:	6078      	str	r0, [r7, #4]
   8216c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8216e:	6878      	ldr	r0, [r7, #4]
   82170:	4b22      	ldr	r3, [pc, #136]	; (821fc <pio_handler_process+0x98>)
   82172:	4798      	blx	r3
   82174:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82176:	6878      	ldr	r0, [r7, #4]
   82178:	4b21      	ldr	r3, [pc, #132]	; (82200 <pio_handler_process+0x9c>)
   8217a:	4798      	blx	r3
   8217c:	4603      	mov	r3, r0
   8217e:	68fa      	ldr	r2, [r7, #12]
   82180:	4013      	ands	r3, r2
   82182:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82184:	68fb      	ldr	r3, [r7, #12]
   82186:	2b00      	cmp	r3, #0
   82188:	d035      	beq.n	821f6 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   8218a:	2300      	movs	r3, #0
   8218c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8218e:	e02f      	b.n	821f0 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82190:	4a1c      	ldr	r2, [pc, #112]	; (82204 <pio_handler_process+0xa0>)
   82192:	68bb      	ldr	r3, [r7, #8]
   82194:	011b      	lsls	r3, r3, #4
   82196:	4413      	add	r3, r2
   82198:	681a      	ldr	r2, [r3, #0]
   8219a:	683b      	ldr	r3, [r7, #0]
   8219c:	429a      	cmp	r2, r3
   8219e:	d124      	bne.n	821ea <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   821a0:	4a18      	ldr	r2, [pc, #96]	; (82204 <pio_handler_process+0xa0>)
   821a2:	68bb      	ldr	r3, [r7, #8]
   821a4:	011b      	lsls	r3, r3, #4
   821a6:	4413      	add	r3, r2
   821a8:	685a      	ldr	r2, [r3, #4]
   821aa:	68fb      	ldr	r3, [r7, #12]
   821ac:	4013      	ands	r3, r2
   821ae:	2b00      	cmp	r3, #0
   821b0:	d01b      	beq.n	821ea <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   821b2:	4a14      	ldr	r2, [pc, #80]	; (82204 <pio_handler_process+0xa0>)
   821b4:	68bb      	ldr	r3, [r7, #8]
   821b6:	011b      	lsls	r3, r3, #4
   821b8:	4413      	add	r3, r2
   821ba:	3308      	adds	r3, #8
   821bc:	685b      	ldr	r3, [r3, #4]
   821be:	4911      	ldr	r1, [pc, #68]	; (82204 <pio_handler_process+0xa0>)
   821c0:	68ba      	ldr	r2, [r7, #8]
   821c2:	0112      	lsls	r2, r2, #4
   821c4:	440a      	add	r2, r1
   821c6:	6811      	ldr	r1, [r2, #0]
   821c8:	480e      	ldr	r0, [pc, #56]	; (82204 <pio_handler_process+0xa0>)
   821ca:	68ba      	ldr	r2, [r7, #8]
   821cc:	0112      	lsls	r2, r2, #4
   821ce:	4402      	add	r2, r0
   821d0:	6852      	ldr	r2, [r2, #4]
   821d2:	4608      	mov	r0, r1
   821d4:	4611      	mov	r1, r2
   821d6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   821d8:	4a0a      	ldr	r2, [pc, #40]	; (82204 <pio_handler_process+0xa0>)
   821da:	68bb      	ldr	r3, [r7, #8]
   821dc:	011b      	lsls	r3, r3, #4
   821de:	4413      	add	r3, r2
   821e0:	685b      	ldr	r3, [r3, #4]
   821e2:	43db      	mvns	r3, r3
   821e4:	68fa      	ldr	r2, [r7, #12]
   821e6:	4013      	ands	r3, r2
   821e8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   821ea:	68bb      	ldr	r3, [r7, #8]
   821ec:	3301      	adds	r3, #1
   821ee:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   821f0:	68fb      	ldr	r3, [r7, #12]
   821f2:	2b00      	cmp	r3, #0
   821f4:	d1cc      	bne.n	82190 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   821f6:	3710      	adds	r7, #16
   821f8:	46bd      	mov	sp, r7
   821fa:	bd80      	pop	{r7, pc}
   821fc:	00081e51 	.word	0x00081e51
   82200:	00081e69 	.word	0x00081e69
   82204:	200704dc 	.word	0x200704dc

00082208 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82208:	b580      	push	{r7, lr}
   8220a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   8220c:	4802      	ldr	r0, [pc, #8]	; (82218 <PIOA_Handler+0x10>)
   8220e:	210b      	movs	r1, #11
   82210:	4b02      	ldr	r3, [pc, #8]	; (8221c <PIOA_Handler+0x14>)
   82212:	4798      	blx	r3
}
   82214:	bd80      	pop	{r7, pc}
   82216:	bf00      	nop
   82218:	400e0e00 	.word	0x400e0e00
   8221c:	00082165 	.word	0x00082165

00082220 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82220:	b580      	push	{r7, lr}
   82222:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82224:	4802      	ldr	r0, [pc, #8]	; (82230 <PIOB_Handler+0x10>)
   82226:	210c      	movs	r1, #12
   82228:	4b02      	ldr	r3, [pc, #8]	; (82234 <PIOB_Handler+0x14>)
   8222a:	4798      	blx	r3
}
   8222c:	bd80      	pop	{r7, pc}
   8222e:	bf00      	nop
   82230:	400e1000 	.word	0x400e1000
   82234:	00082165 	.word	0x00082165

00082238 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82238:	b580      	push	{r7, lr}
   8223a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   8223c:	4802      	ldr	r0, [pc, #8]	; (82248 <PIOC_Handler+0x10>)
   8223e:	210d      	movs	r1, #13
   82240:	4b02      	ldr	r3, [pc, #8]	; (8224c <PIOC_Handler+0x14>)
   82242:	4798      	blx	r3
}
   82244:	bd80      	pop	{r7, pc}
   82246:	bf00      	nop
   82248:	400e1200 	.word	0x400e1200
   8224c:	00082165 	.word	0x00082165

00082250 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82250:	b580      	push	{r7, lr}
   82252:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   82254:	4802      	ldr	r0, [pc, #8]	; (82260 <PIOD_Handler+0x10>)
   82256:	210e      	movs	r1, #14
   82258:	4b02      	ldr	r3, [pc, #8]	; (82264 <PIOD_Handler+0x14>)
   8225a:	4798      	blx	r3
}
   8225c:	bd80      	pop	{r7, pc}
   8225e:	bf00      	nop
   82260:	400e1400 	.word	0x400e1400
   82264:	00082165 	.word	0x00082165

00082268 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82268:	b480      	push	{r7}
   8226a:	b085      	sub	sp, #20
   8226c:	af00      	add	r7, sp, #0
   8226e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82270:	4b1d      	ldr	r3, [pc, #116]	; (822e8 <pmc_switch_mck_to_pllack+0x80>)
   82272:	4a1d      	ldr	r2, [pc, #116]	; (822e8 <pmc_switch_mck_to_pllack+0x80>)
   82274:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82276:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8227a:	687a      	ldr	r2, [r7, #4]
   8227c:	430a      	orrs	r2, r1
   8227e:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82280:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82284:	60fb      	str	r3, [r7, #12]
   82286:	e007      	b.n	82298 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82288:	68fb      	ldr	r3, [r7, #12]
   8228a:	2b00      	cmp	r3, #0
   8228c:	d101      	bne.n	82292 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8228e:	2301      	movs	r3, #1
   82290:	e023      	b.n	822da <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82292:	68fb      	ldr	r3, [r7, #12]
   82294:	3b01      	subs	r3, #1
   82296:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82298:	4b13      	ldr	r3, [pc, #76]	; (822e8 <pmc_switch_mck_to_pllack+0x80>)
   8229a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8229c:	f003 0308 	and.w	r3, r3, #8
   822a0:	2b00      	cmp	r3, #0
   822a2:	d0f1      	beq.n	82288 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   822a4:	4b10      	ldr	r3, [pc, #64]	; (822e8 <pmc_switch_mck_to_pllack+0x80>)
   822a6:	4a10      	ldr	r2, [pc, #64]	; (822e8 <pmc_switch_mck_to_pllack+0x80>)
   822a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   822aa:	f022 0203 	bic.w	r2, r2, #3
   822ae:	f042 0202 	orr.w	r2, r2, #2
   822b2:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822b8:	60fb      	str	r3, [r7, #12]
   822ba:	e007      	b.n	822cc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822bc:	68fb      	ldr	r3, [r7, #12]
   822be:	2b00      	cmp	r3, #0
   822c0:	d101      	bne.n	822c6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   822c2:	2301      	movs	r3, #1
   822c4:	e009      	b.n	822da <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   822c6:	68fb      	ldr	r3, [r7, #12]
   822c8:	3b01      	subs	r3, #1
   822ca:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822cc:	4b06      	ldr	r3, [pc, #24]	; (822e8 <pmc_switch_mck_to_pllack+0x80>)
   822ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   822d0:	f003 0308 	and.w	r3, r3, #8
   822d4:	2b00      	cmp	r3, #0
   822d6:	d0f1      	beq.n	822bc <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822d8:	2300      	movs	r3, #0
}
   822da:	4618      	mov	r0, r3
   822dc:	3714      	adds	r7, #20
   822de:	46bd      	mov	sp, r7
   822e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   822e4:	4770      	bx	lr
   822e6:	bf00      	nop
   822e8:	400e0600 	.word	0x400e0600

000822ec <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   822ec:	b480      	push	{r7}
   822ee:	b083      	sub	sp, #12
   822f0:	af00      	add	r7, sp, #0
   822f2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   822f4:	687b      	ldr	r3, [r7, #4]
   822f6:	2b01      	cmp	r3, #1
   822f8:	d107      	bne.n	8230a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   822fa:	4a0a      	ldr	r2, [pc, #40]	; (82324 <pmc_switch_sclk_to_32kxtal+0x38>)
   822fc:	4b09      	ldr	r3, [pc, #36]	; (82324 <pmc_switch_sclk_to_32kxtal+0x38>)
   822fe:	689b      	ldr	r3, [r3, #8]
   82300:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82308:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8230a:	4a06      	ldr	r2, [pc, #24]	; (82324 <pmc_switch_sclk_to_32kxtal+0x38>)
   8230c:	4b05      	ldr	r3, [pc, #20]	; (82324 <pmc_switch_sclk_to_32kxtal+0x38>)
   8230e:	681b      	ldr	r3, [r3, #0]
   82310:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82314:	f043 0308 	orr.w	r3, r3, #8
   82318:	6013      	str	r3, [r2, #0]
}
   8231a:	370c      	adds	r7, #12
   8231c:	46bd      	mov	sp, r7
   8231e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82322:	4770      	bx	lr
   82324:	400e1a10 	.word	0x400e1a10

00082328 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82328:	b480      	push	{r7}
   8232a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   8232c:	4b09      	ldr	r3, [pc, #36]	; (82354 <pmc_osc_is_ready_32kxtal+0x2c>)
   8232e:	695b      	ldr	r3, [r3, #20]
   82330:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82334:	2b00      	cmp	r3, #0
   82336:	d007      	beq.n	82348 <pmc_osc_is_ready_32kxtal+0x20>
   82338:	4b07      	ldr	r3, [pc, #28]	; (82358 <pmc_osc_is_ready_32kxtal+0x30>)
   8233a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8233c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82340:	2b00      	cmp	r3, #0
   82342:	d001      	beq.n	82348 <pmc_osc_is_ready_32kxtal+0x20>
   82344:	2301      	movs	r3, #1
   82346:	e000      	b.n	8234a <pmc_osc_is_ready_32kxtal+0x22>
   82348:	2300      	movs	r3, #0
}
   8234a:	4618      	mov	r0, r3
   8234c:	46bd      	mov	sp, r7
   8234e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82352:	4770      	bx	lr
   82354:	400e1a10 	.word	0x400e1a10
   82358:	400e0600 	.word	0x400e0600

0008235c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   8235c:	b480      	push	{r7}
   8235e:	b085      	sub	sp, #20
   82360:	af00      	add	r7, sp, #0
   82362:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   82364:	2300      	movs	r3, #0
   82366:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   82368:	4b21      	ldr	r3, [pc, #132]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   8236a:	6a1b      	ldr	r3, [r3, #32]
   8236c:	f003 0301 	and.w	r3, r3, #1
   82370:	2b00      	cmp	r3, #0
   82372:	d00e      	beq.n	82392 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82374:	4a1e      	ldr	r2, [pc, #120]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   82376:	4b1e      	ldr	r3, [pc, #120]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   82378:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   8237a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8237e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   82382:	6879      	ldr	r1, [r7, #4]
   82384:	430b      	orrs	r3, r1
   82386:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8238a:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8238e:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82390:	e00b      	b.n	823aa <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   82392:	2301      	movs	r3, #1
   82394:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82396:	4a16      	ldr	r2, [pc, #88]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   82398:	4b15      	ldr	r3, [pc, #84]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   8239a:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   8239c:	4b15      	ldr	r3, [pc, #84]	; (823f4 <pmc_switch_mainck_to_fastrc+0x98>)
   8239e:	400b      	ands	r3, r1
   823a0:	6879      	ldr	r1, [r7, #4]
   823a2:	4319      	orrs	r1, r3
   823a4:	4b14      	ldr	r3, [pc, #80]	; (823f8 <pmc_switch_mainck_to_fastrc+0x9c>)
   823a6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   823a8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   823aa:	bf00      	nop
   823ac:	4b10      	ldr	r3, [pc, #64]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   823ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   823b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   823b4:	2b00      	cmp	r3, #0
   823b6:	d0f9      	beq.n	823ac <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   823b8:	4a0d      	ldr	r2, [pc, #52]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   823ba:	4b0d      	ldr	r3, [pc, #52]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   823bc:	6a1b      	ldr	r3, [r3, #32]
   823be:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   823c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   823c6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823ca:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   823cc:	68fb      	ldr	r3, [r7, #12]
   823ce:	2b00      	cmp	r3, #0
   823d0:	d009      	beq.n	823e6 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823d2:	4a07      	ldr	r2, [pc, #28]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   823d4:	4b06      	ldr	r3, [pc, #24]	; (823f0 <pmc_switch_mainck_to_fastrc+0x94>)
   823d6:	6a1b      	ldr	r3, [r3, #32]
   823d8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   823dc:	f023 0301 	bic.w	r3, r3, #1
   823e0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823e4:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   823e6:	3714      	adds	r7, #20
   823e8:	46bd      	mov	sp, r7
   823ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   823ee:	4770      	bx	lr
   823f0:	400e0600 	.word	0x400e0600
   823f4:	ffc8c086 	.word	0xffc8c086
   823f8:	00373f09 	.word	0x00373f09

000823fc <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   823fc:	b480      	push	{r7}
   823fe:	b083      	sub	sp, #12
   82400:	af00      	add	r7, sp, #0
   82402:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82404:	687b      	ldr	r3, [r7, #4]
   82406:	2b00      	cmp	r3, #0
   82408:	d008      	beq.n	8241c <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8240a:	4912      	ldr	r1, [pc, #72]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   8240c:	4b11      	ldr	r3, [pc, #68]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   8240e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82410:	4a11      	ldr	r2, [pc, #68]	; (82458 <pmc_switch_mainck_to_xtal+0x5c>)
   82412:	401a      	ands	r2, r3
   82414:	4b11      	ldr	r3, [pc, #68]	; (8245c <pmc_switch_mainck_to_xtal+0x60>)
   82416:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82418:	620b      	str	r3, [r1, #32]
   8241a:	e016      	b.n	8244a <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8241c:	490d      	ldr	r1, [pc, #52]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   8241e:	4b0d      	ldr	r3, [pc, #52]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   82420:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82422:	4a0f      	ldr	r2, [pc, #60]	; (82460 <pmc_switch_mainck_to_xtal+0x64>)
   82424:	401a      	ands	r2, r3
   82426:	4b0f      	ldr	r3, [pc, #60]	; (82464 <pmc_switch_mainck_to_xtal+0x68>)
   82428:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8242a:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8242c:	bf00      	nop
   8242e:	4b09      	ldr	r3, [pc, #36]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   82430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82432:	f003 0301 	and.w	r3, r3, #1
   82436:	2b00      	cmp	r3, #0
   82438:	d0f9      	beq.n	8242e <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8243a:	4a06      	ldr	r2, [pc, #24]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   8243c:	4b05      	ldr	r3, [pc, #20]	; (82454 <pmc_switch_mainck_to_xtal+0x58>)
   8243e:	6a1b      	ldr	r3, [r3, #32]
   82440:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82448:	6213      	str	r3, [r2, #32]
	}
}
   8244a:	370c      	adds	r7, #12
   8244c:	46bd      	mov	sp, r7
   8244e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82452:	4770      	bx	lr
   82454:	400e0600 	.word	0x400e0600
   82458:	fec8fffc 	.word	0xfec8fffc
   8245c:	01370002 	.word	0x01370002
   82460:	ffc8c0fc 	.word	0xffc8c0fc
   82464:	00373f01 	.word	0x00373f01

00082468 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82468:	b480      	push	{r7}
   8246a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8246c:	4b04      	ldr	r3, [pc, #16]	; (82480 <pmc_osc_is_ready_mainck+0x18>)
   8246e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82474:	4618      	mov	r0, r3
   82476:	46bd      	mov	sp, r7
   82478:	f85d 7b04 	ldr.w	r7, [sp], #4
   8247c:	4770      	bx	lr
   8247e:	bf00      	nop
   82480:	400e0600 	.word	0x400e0600

00082484 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82484:	b480      	push	{r7}
   82486:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82488:	4b03      	ldr	r3, [pc, #12]	; (82498 <pmc_disable_pllack+0x14>)
   8248a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8248e:	629a      	str	r2, [r3, #40]	; 0x28
}
   82490:	46bd      	mov	sp, r7
   82492:	f85d 7b04 	ldr.w	r7, [sp], #4
   82496:	4770      	bx	lr
   82498:	400e0600 	.word	0x400e0600

0008249c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8249c:	b480      	push	{r7}
   8249e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   824a0:	4b04      	ldr	r3, [pc, #16]	; (824b4 <pmc_is_locked_pllack+0x18>)
   824a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824a4:	f003 0302 	and.w	r3, r3, #2
}
   824a8:	4618      	mov	r0, r3
   824aa:	46bd      	mov	sp, r7
   824ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   824b0:	4770      	bx	lr
   824b2:	bf00      	nop
   824b4:	400e0600 	.word	0x400e0600

000824b8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   824b8:	b480      	push	{r7}
   824ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   824bc:	4b04      	ldr	r3, [pc, #16]	; (824d0 <pmc_is_locked_upll+0x18>)
   824be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   824c4:	4618      	mov	r0, r3
   824c6:	46bd      	mov	sp, r7
   824c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   824cc:	4770      	bx	lr
   824ce:	bf00      	nop
   824d0:	400e0600 	.word	0x400e0600

000824d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   824d4:	b480      	push	{r7}
   824d6:	b083      	sub	sp, #12
   824d8:	af00      	add	r7, sp, #0
   824da:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   824dc:	687b      	ldr	r3, [r7, #4]
   824de:	2b2c      	cmp	r3, #44	; 0x2c
   824e0:	d901      	bls.n	824e6 <pmc_enable_periph_clk+0x12>
		return 1;
   824e2:	2301      	movs	r3, #1
   824e4:	e02f      	b.n	82546 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   824e6:	687b      	ldr	r3, [r7, #4]
   824e8:	2b1f      	cmp	r3, #31
   824ea:	d813      	bhi.n	82514 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   824ec:	4b19      	ldr	r3, [pc, #100]	; (82554 <pmc_enable_periph_clk+0x80>)
   824ee:	699a      	ldr	r2, [r3, #24]
   824f0:	687b      	ldr	r3, [r7, #4]
   824f2:	2101      	movs	r1, #1
   824f4:	fa01 f303 	lsl.w	r3, r1, r3
   824f8:	401a      	ands	r2, r3
   824fa:	687b      	ldr	r3, [r7, #4]
   824fc:	2101      	movs	r1, #1
   824fe:	fa01 f303 	lsl.w	r3, r1, r3
   82502:	429a      	cmp	r2, r3
   82504:	d01e      	beq.n	82544 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82506:	4b13      	ldr	r3, [pc, #76]	; (82554 <pmc_enable_periph_clk+0x80>)
   82508:	687a      	ldr	r2, [r7, #4]
   8250a:	2101      	movs	r1, #1
   8250c:	fa01 f202 	lsl.w	r2, r1, r2
   82510:	611a      	str	r2, [r3, #16]
   82512:	e017      	b.n	82544 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   82514:	687b      	ldr	r3, [r7, #4]
   82516:	3b20      	subs	r3, #32
   82518:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8251a:	4b0e      	ldr	r3, [pc, #56]	; (82554 <pmc_enable_periph_clk+0x80>)
   8251c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82520:	687b      	ldr	r3, [r7, #4]
   82522:	2101      	movs	r1, #1
   82524:	fa01 f303 	lsl.w	r3, r1, r3
   82528:	401a      	ands	r2, r3
   8252a:	687b      	ldr	r3, [r7, #4]
   8252c:	2101      	movs	r1, #1
   8252e:	fa01 f303 	lsl.w	r3, r1, r3
   82532:	429a      	cmp	r2, r3
   82534:	d006      	beq.n	82544 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   82536:	4b07      	ldr	r3, [pc, #28]	; (82554 <pmc_enable_periph_clk+0x80>)
   82538:	687a      	ldr	r2, [r7, #4]
   8253a:	2101      	movs	r1, #1
   8253c:	fa01 f202 	lsl.w	r2, r1, r2
   82540:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82544:	2300      	movs	r3, #0
}
   82546:	4618      	mov	r0, r3
   82548:	370c      	adds	r7, #12
   8254a:	46bd      	mov	sp, r7
   8254c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82550:	4770      	bx	lr
   82552:	bf00      	nop
   82554:	400e0600 	.word	0x400e0600

00082558 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82558:	b480      	push	{r7}
   8255a:	b089      	sub	sp, #36	; 0x24
   8255c:	af00      	add	r7, sp, #0
   8255e:	60f8      	str	r0, [r7, #12]
   82560:	60b9      	str	r1, [r7, #8]
   82562:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82564:	68bb      	ldr	r3, [r7, #8]
   82566:	011a      	lsls	r2, r3, #4
   82568:	687b      	ldr	r3, [r7, #4]
   8256a:	429a      	cmp	r2, r3
   8256c:	d802      	bhi.n	82574 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8256e:	2310      	movs	r3, #16
   82570:	61fb      	str	r3, [r7, #28]
   82572:	e001      	b.n	82578 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   82574:	2308      	movs	r3, #8
   82576:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82578:	687b      	ldr	r3, [r7, #4]
   8257a:	00da      	lsls	r2, r3, #3
   8257c:	69fb      	ldr	r3, [r7, #28]
   8257e:	68b9      	ldr	r1, [r7, #8]
   82580:	fb01 f303 	mul.w	r3, r1, r3
   82584:	085b      	lsrs	r3, r3, #1
   82586:	441a      	add	r2, r3
   82588:	69fb      	ldr	r3, [r7, #28]
   8258a:	68b9      	ldr	r1, [r7, #8]
   8258c:	fb01 f303 	mul.w	r3, r1, r3
   82590:	fbb2 f3f3 	udiv	r3, r2, r3
   82594:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82596:	69bb      	ldr	r3, [r7, #24]
   82598:	08db      	lsrs	r3, r3, #3
   8259a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8259c:	69bb      	ldr	r3, [r7, #24]
   8259e:	f003 0307 	and.w	r3, r3, #7
   825a2:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   825a4:	697b      	ldr	r3, [r7, #20]
   825a6:	2b00      	cmp	r3, #0
   825a8:	d003      	beq.n	825b2 <usart_set_async_baudrate+0x5a>
   825aa:	697b      	ldr	r3, [r7, #20]
   825ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   825b0:	d301      	bcc.n	825b6 <usart_set_async_baudrate+0x5e>
		return 1;
   825b2:	2301      	movs	r3, #1
   825b4:	e00f      	b.n	825d6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   825b6:	69fb      	ldr	r3, [r7, #28]
   825b8:	2b08      	cmp	r3, #8
   825ba:	d105      	bne.n	825c8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   825bc:	68fb      	ldr	r3, [r7, #12]
   825be:	685b      	ldr	r3, [r3, #4]
   825c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   825c4:	68fb      	ldr	r3, [r7, #12]
   825c6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   825c8:	693b      	ldr	r3, [r7, #16]
   825ca:	041a      	lsls	r2, r3, #16
   825cc:	697b      	ldr	r3, [r7, #20]
   825ce:	431a      	orrs	r2, r3
   825d0:	68fb      	ldr	r3, [r7, #12]
   825d2:	621a      	str	r2, [r3, #32]

	return 0;
   825d4:	2300      	movs	r3, #0
}
   825d6:	4618      	mov	r0, r3
   825d8:	3724      	adds	r7, #36	; 0x24
   825da:	46bd      	mov	sp, r7
   825dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   825e0:	4770      	bx	lr
   825e2:	bf00      	nop

000825e4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   825e4:	b580      	push	{r7, lr}
   825e6:	b082      	sub	sp, #8
   825e8:	af00      	add	r7, sp, #0
   825ea:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   825ec:	6878      	ldr	r0, [r7, #4]
   825ee:	4b0d      	ldr	r3, [pc, #52]	; (82624 <usart_reset+0x40>)
   825f0:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   825f2:	687b      	ldr	r3, [r7, #4]
   825f4:	2200      	movs	r2, #0
   825f6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   825f8:	687b      	ldr	r3, [r7, #4]
   825fa:	2200      	movs	r2, #0
   825fc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   825fe:	687b      	ldr	r3, [r7, #4]
   82600:	2200      	movs	r2, #0
   82602:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   82604:	6878      	ldr	r0, [r7, #4]
   82606:	4b08      	ldr	r3, [pc, #32]	; (82628 <usart_reset+0x44>)
   82608:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8260a:	6878      	ldr	r0, [r7, #4]
   8260c:	4b07      	ldr	r3, [pc, #28]	; (8262c <usart_reset+0x48>)
   8260e:	4798      	blx	r3
	usart_reset_status(p_usart);
   82610:	6878      	ldr	r0, [r7, #4]
   82612:	4b07      	ldr	r3, [pc, #28]	; (82630 <usart_reset+0x4c>)
   82614:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   82616:	6878      	ldr	r0, [r7, #4]
   82618:	4b06      	ldr	r3, [pc, #24]	; (82634 <usart_reset+0x50>)
   8261a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   8261c:	3708      	adds	r7, #8
   8261e:	46bd      	mov	sp, r7
   82620:	bd80      	pop	{r7, pc}
   82622:	bf00      	nop
   82624:	00082821 	.word	0x00082821
   82628:	000826d5 	.word	0x000826d5
   8262c:	00082705 	.word	0x00082705
   82630:	0008276d 	.word	0x0008276d
   82634:	00082789 	.word	0x00082789

00082638 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82638:	b580      	push	{r7, lr}
   8263a:	b084      	sub	sp, #16
   8263c:	af00      	add	r7, sp, #0
   8263e:	60f8      	str	r0, [r7, #12]
   82640:	60b9      	str	r1, [r7, #8]
   82642:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82644:	68f8      	ldr	r0, [r7, #12]
   82646:	4b1a      	ldr	r3, [pc, #104]	; (826b0 <usart_init_rs232+0x78>)
   82648:	4798      	blx	r3

	ul_reg_val = 0;
   8264a:	4b1a      	ldr	r3, [pc, #104]	; (826b4 <usart_init_rs232+0x7c>)
   8264c:	2200      	movs	r2, #0
   8264e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82650:	68bb      	ldr	r3, [r7, #8]
   82652:	2b00      	cmp	r3, #0
   82654:	d009      	beq.n	8266a <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   82656:	68bb      	ldr	r3, [r7, #8]
   82658:	681b      	ldr	r3, [r3, #0]
   8265a:	68f8      	ldr	r0, [r7, #12]
   8265c:	4619      	mov	r1, r3
   8265e:	687a      	ldr	r2, [r7, #4]
   82660:	4b15      	ldr	r3, [pc, #84]	; (826b8 <usart_init_rs232+0x80>)
   82662:	4798      	blx	r3
   82664:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82666:	2b00      	cmp	r3, #0
   82668:	d001      	beq.n	8266e <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8266a:	2301      	movs	r3, #1
   8266c:	e01b      	b.n	826a6 <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8266e:	68bb      	ldr	r3, [r7, #8]
   82670:	685a      	ldr	r2, [r3, #4]
   82672:	68bb      	ldr	r3, [r7, #8]
   82674:	689b      	ldr	r3, [r3, #8]
   82676:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82678:	68bb      	ldr	r3, [r7, #8]
   8267a:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8267c:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8267e:	68bb      	ldr	r3, [r7, #8]
   82680:	68db      	ldr	r3, [r3, #12]
   82682:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82684:	4b0b      	ldr	r3, [pc, #44]	; (826b4 <usart_init_rs232+0x7c>)
   82686:	681b      	ldr	r3, [r3, #0]
   82688:	431a      	orrs	r2, r3
   8268a:	4b0a      	ldr	r3, [pc, #40]	; (826b4 <usart_init_rs232+0x7c>)
   8268c:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8268e:	4b09      	ldr	r3, [pc, #36]	; (826b4 <usart_init_rs232+0x7c>)
   82690:	681a      	ldr	r2, [r3, #0]
   82692:	4b08      	ldr	r3, [pc, #32]	; (826b4 <usart_init_rs232+0x7c>)
   82694:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   82696:	68fb      	ldr	r3, [r7, #12]
   82698:	685a      	ldr	r2, [r3, #4]
   8269a:	4b06      	ldr	r3, [pc, #24]	; (826b4 <usart_init_rs232+0x7c>)
   8269c:	681b      	ldr	r3, [r3, #0]
   8269e:	431a      	orrs	r2, r3
   826a0:	68fb      	ldr	r3, [r7, #12]
   826a2:	605a      	str	r2, [r3, #4]
	
	return 0;
   826a4:	2300      	movs	r3, #0
}
   826a6:	4618      	mov	r0, r3
   826a8:	3710      	adds	r7, #16
   826aa:	46bd      	mov	sp, r7
   826ac:	bd80      	pop	{r7, pc}
   826ae:	bf00      	nop
   826b0:	000825e5 	.word	0x000825e5
   826b4:	2007054c 	.word	0x2007054c
   826b8:	00082559 	.word	0x00082559

000826bc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   826bc:	b480      	push	{r7}
   826be:	b083      	sub	sp, #12
   826c0:	af00      	add	r7, sp, #0
   826c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   826c4:	687b      	ldr	r3, [r7, #4]
   826c6:	2240      	movs	r2, #64	; 0x40
   826c8:	601a      	str	r2, [r3, #0]
}
   826ca:	370c      	adds	r7, #12
   826cc:	46bd      	mov	sp, r7
   826ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   826d2:	4770      	bx	lr

000826d4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   826d4:	b480      	push	{r7}
   826d6:	b083      	sub	sp, #12
   826d8:	af00      	add	r7, sp, #0
   826da:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   826dc:	687b      	ldr	r3, [r7, #4]
   826de:	2288      	movs	r2, #136	; 0x88
   826e0:	601a      	str	r2, [r3, #0]
}
   826e2:	370c      	adds	r7, #12
   826e4:	46bd      	mov	sp, r7
   826e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   826ea:	4770      	bx	lr

000826ec <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   826ec:	b480      	push	{r7}
   826ee:	b083      	sub	sp, #12
   826f0:	af00      	add	r7, sp, #0
   826f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   826f4:	687b      	ldr	r3, [r7, #4]
   826f6:	2210      	movs	r2, #16
   826f8:	601a      	str	r2, [r3, #0]
}
   826fa:	370c      	adds	r7, #12
   826fc:	46bd      	mov	sp, r7
   826fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82702:	4770      	bx	lr

00082704 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82704:	b480      	push	{r7}
   82706:	b083      	sub	sp, #12
   82708:	af00      	add	r7, sp, #0
   8270a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8270c:	687b      	ldr	r3, [r7, #4]
   8270e:	2224      	movs	r2, #36	; 0x24
   82710:	601a      	str	r2, [r3, #0]
}
   82712:	370c      	adds	r7, #12
   82714:	46bd      	mov	sp, r7
   82716:	f85d 7b04 	ldr.w	r7, [sp], #4
   8271a:	4770      	bx	lr

0008271c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   8271c:	b480      	push	{r7}
   8271e:	b083      	sub	sp, #12
   82720:	af00      	add	r7, sp, #0
   82722:	6078      	str	r0, [r7, #4]
   82724:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   82726:	687b      	ldr	r3, [r7, #4]
   82728:	683a      	ldr	r2, [r7, #0]
   8272a:	609a      	str	r2, [r3, #8]
}
   8272c:	370c      	adds	r7, #12
   8272e:	46bd      	mov	sp, r7
   82730:	f85d 7b04 	ldr.w	r7, [sp], #4
   82734:	4770      	bx	lr
   82736:	bf00      	nop

00082738 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82738:	b480      	push	{r7}
   8273a:	b083      	sub	sp, #12
   8273c:	af00      	add	r7, sp, #0
   8273e:	6078      	str	r0, [r7, #4]
   82740:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   82742:	687b      	ldr	r3, [r7, #4]
   82744:	683a      	ldr	r2, [r7, #0]
   82746:	60da      	str	r2, [r3, #12]
}
   82748:	370c      	adds	r7, #12
   8274a:	46bd      	mov	sp, r7
   8274c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82750:	4770      	bx	lr
   82752:	bf00      	nop

00082754 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   82754:	b480      	push	{r7}
   82756:	b083      	sub	sp, #12
   82758:	af00      	add	r7, sp, #0
   8275a:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   8275c:	687b      	ldr	r3, [r7, #4]
   8275e:	695b      	ldr	r3, [r3, #20]
}
   82760:	4618      	mov	r0, r3
   82762:	370c      	adds	r7, #12
   82764:	46bd      	mov	sp, r7
   82766:	f85d 7b04 	ldr.w	r7, [sp], #4
   8276a:	4770      	bx	lr

0008276c <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   8276c:	b480      	push	{r7}
   8276e:	b083      	sub	sp, #12
   82770:	af00      	add	r7, sp, #0
   82772:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82774:	687b      	ldr	r3, [r7, #4]
   82776:	f44f 7280 	mov.w	r2, #256	; 0x100
   8277a:	601a      	str	r2, [r3, #0]
}
   8277c:	370c      	adds	r7, #12
   8277e:	46bd      	mov	sp, r7
   82780:	f85d 7b04 	ldr.w	r7, [sp], #4
   82784:	4770      	bx	lr
   82786:	bf00      	nop

00082788 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82788:	b480      	push	{r7}
   8278a:	b083      	sub	sp, #12
   8278c:	af00      	add	r7, sp, #0
   8278e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82790:	687b      	ldr	r3, [r7, #4]
   82792:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82796:	601a      	str	r2, [r3, #0]
}
   82798:	370c      	adds	r7, #12
   8279a:	46bd      	mov	sp, r7
   8279c:	f85d 7b04 	ldr.w	r7, [sp], #4
   827a0:	4770      	bx	lr
   827a2:	bf00      	nop

000827a4 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   827a4:	b480      	push	{r7}
   827a6:	b083      	sub	sp, #12
   827a8:	af00      	add	r7, sp, #0
   827aa:	6078      	str	r0, [r7, #4]
   827ac:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   827ae:	687b      	ldr	r3, [r7, #4]
   827b0:	695b      	ldr	r3, [r3, #20]
   827b2:	f003 0302 	and.w	r3, r3, #2
   827b6:	2b00      	cmp	r3, #0
   827b8:	d101      	bne.n	827be <usart_write+0x1a>
		return 1;
   827ba:	2301      	movs	r3, #1
   827bc:	e005      	b.n	827ca <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   827be:	683b      	ldr	r3, [r7, #0]
   827c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   827c4:	687b      	ldr	r3, [r7, #4]
   827c6:	61da      	str	r2, [r3, #28]
	return 0;
   827c8:	2300      	movs	r3, #0
}
   827ca:	4618      	mov	r0, r3
   827cc:	370c      	adds	r7, #12
   827ce:	46bd      	mov	sp, r7
   827d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   827d4:	4770      	bx	lr
   827d6:	bf00      	nop

000827d8 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   827d8:	b480      	push	{r7}
   827da:	b085      	sub	sp, #20
   827dc:	af00      	add	r7, sp, #0
   827de:	6078      	str	r0, [r7, #4]
   827e0:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   827e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   827e6:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   827e8:	e006      	b.n	827f8 <usart_getchar+0x20>
		if (!timeout--) {
   827ea:	68fb      	ldr	r3, [r7, #12]
   827ec:	1e5a      	subs	r2, r3, #1
   827ee:	60fa      	str	r2, [r7, #12]
   827f0:	2b00      	cmp	r3, #0
   827f2:	d101      	bne.n	827f8 <usart_getchar+0x20>
			return 1;
   827f4:	2301      	movs	r3, #1
   827f6:	e00c      	b.n	82812 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   827f8:	687b      	ldr	r3, [r7, #4]
   827fa:	695b      	ldr	r3, [r3, #20]
   827fc:	f003 0301 	and.w	r3, r3, #1
   82800:	2b00      	cmp	r3, #0
   82802:	d0f2      	beq.n	827ea <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82804:	687b      	ldr	r3, [r7, #4]
   82806:	699b      	ldr	r3, [r3, #24]
   82808:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8280c:	683b      	ldr	r3, [r7, #0]
   8280e:	601a      	str	r2, [r3, #0]

	return 0;
   82810:	2300      	movs	r3, #0
}
   82812:	4618      	mov	r0, r3
   82814:	3714      	adds	r7, #20
   82816:	46bd      	mov	sp, r7
   82818:	f85d 7b04 	ldr.w	r7, [sp], #4
   8281c:	4770      	bx	lr
   8281e:	bf00      	nop

00082820 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82820:	b480      	push	{r7}
   82822:	b083      	sub	sp, #12
   82824:	af00      	add	r7, sp, #0
   82826:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   82828:	687b      	ldr	r3, [r7, #4]
   8282a:	4a04      	ldr	r2, [pc, #16]	; (8283c <usart_disable_writeprotect+0x1c>)
   8282c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82830:	370c      	adds	r7, #12
   82832:	46bd      	mov	sp, r7
   82834:	f85d 7b04 	ldr.w	r7, [sp], #4
   82838:	4770      	bx	lr
   8283a:	bf00      	nop
   8283c:	55534100 	.word	0x55534100

00082840 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   82840:	b480      	push	{r7}
   82842:	b083      	sub	sp, #12
   82844:	af00      	add	r7, sp, #0
   82846:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   82848:	687a      	ldr	r2, [r7, #4]
   8284a:	4b05      	ldr	r3, [pc, #20]	; (82860 <wdt_restart+0x20>)
   8284c:	429a      	cmp	r2, r3
   8284e:	d102      	bne.n	82856 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   82850:	687b      	ldr	r3, [r7, #4]
   82852:	4a04      	ldr	r2, [pc, #16]	; (82864 <wdt_restart+0x24>)
   82854:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   82856:	370c      	adds	r7, #12
   82858:	46bd      	mov	sp, r7
   8285a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8285e:	4770      	bx	lr
   82860:	400e1a50 	.word	0x400e1a50
   82864:	a5000001 	.word	0xa5000001

00082868 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   82868:	b480      	push	{r7}
   8286a:	b083      	sub	sp, #12
   8286c:	af00      	add	r7, sp, #0
   8286e:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   82870:	687b      	ldr	r3, [r7, #4]
   82872:	689b      	ldr	r3, [r3, #8]
}
   82874:	4618      	mov	r0, r3
   82876:	370c      	adds	r7, #12
   82878:	46bd      	mov	sp, r7
   8287a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8287e:	4770      	bx	lr

00082880 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82880:	b480      	push	{r7}
   82882:	af00      	add	r7, sp, #0
	while (1) {
	}
   82884:	e7fe      	b.n	82884 <Dummy_Handler+0x4>
   82886:	bf00      	nop

00082888 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82888:	b580      	push	{r7, lr}
   8288a:	b082      	sub	sp, #8
   8288c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8288e:	4b1e      	ldr	r3, [pc, #120]	; (82908 <Reset_Handler+0x80>)
   82890:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82892:	4b1e      	ldr	r3, [pc, #120]	; (8290c <Reset_Handler+0x84>)
   82894:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82896:	687a      	ldr	r2, [r7, #4]
   82898:	683b      	ldr	r3, [r7, #0]
   8289a:	429a      	cmp	r2, r3
   8289c:	d00c      	beq.n	828b8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8289e:	e007      	b.n	828b0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   828a0:	683b      	ldr	r3, [r7, #0]
   828a2:	1d1a      	adds	r2, r3, #4
   828a4:	603a      	str	r2, [r7, #0]
   828a6:	687a      	ldr	r2, [r7, #4]
   828a8:	1d11      	adds	r1, r2, #4
   828aa:	6079      	str	r1, [r7, #4]
   828ac:	6812      	ldr	r2, [r2, #0]
   828ae:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   828b0:	683a      	ldr	r2, [r7, #0]
   828b2:	4b17      	ldr	r3, [pc, #92]	; (82910 <Reset_Handler+0x88>)
   828b4:	429a      	cmp	r2, r3
   828b6:	d3f3      	bcc.n	828a0 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828b8:	4b16      	ldr	r3, [pc, #88]	; (82914 <Reset_Handler+0x8c>)
   828ba:	603b      	str	r3, [r7, #0]
   828bc:	e004      	b.n	828c8 <Reset_Handler+0x40>
		*pDest++ = 0;
   828be:	683b      	ldr	r3, [r7, #0]
   828c0:	1d1a      	adds	r2, r3, #4
   828c2:	603a      	str	r2, [r7, #0]
   828c4:	2200      	movs	r2, #0
   828c6:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828c8:	683a      	ldr	r2, [r7, #0]
   828ca:	4b13      	ldr	r3, [pc, #76]	; (82918 <Reset_Handler+0x90>)
   828cc:	429a      	cmp	r2, r3
   828ce:	d3f6      	bcc.n	828be <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   828d0:	4b12      	ldr	r3, [pc, #72]	; (8291c <Reset_Handler+0x94>)
   828d2:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   828d4:	4a12      	ldr	r2, [pc, #72]	; (82920 <Reset_Handler+0x98>)
   828d6:	687b      	ldr	r3, [r7, #4]
   828d8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   828dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   828e0:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   828e2:	687b      	ldr	r3, [r7, #4]
   828e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   828e8:	d309      	bcc.n	828fe <Reset_Handler+0x76>
   828ea:	687a      	ldr	r2, [r7, #4]
   828ec:	4b0d      	ldr	r3, [pc, #52]	; (82924 <Reset_Handler+0x9c>)
   828ee:	429a      	cmp	r2, r3
   828f0:	d805      	bhi.n	828fe <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   828f2:	4b0b      	ldr	r3, [pc, #44]	; (82920 <Reset_Handler+0x98>)
   828f4:	4a0a      	ldr	r2, [pc, #40]	; (82920 <Reset_Handler+0x98>)
   828f6:	6892      	ldr	r2, [r2, #8]
   828f8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   828fc:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   828fe:	4b0a      	ldr	r3, [pc, #40]	; (82928 <Reset_Handler+0xa0>)
   82900:	4798      	blx	r3

	/* Branch to main function */
	main();
   82902:	4b0a      	ldr	r3, [pc, #40]	; (8292c <Reset_Handler+0xa4>)
   82904:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82906:	e7fe      	b.n	82906 <Reset_Handler+0x7e>
   82908:	00086a3c 	.word	0x00086a3c
   8290c:	20070000 	.word	0x20070000
   82910:	20070438 	.word	0x20070438
   82914:	20070438 	.word	0x20070438
   82918:	2007a774 	.word	0x2007a774
   8291c:	00080000 	.word	0x00080000
   82920:	e000ed00 	.word	0xe000ed00
   82924:	200fffff 	.word	0x200fffff
   82928:	00086555 	.word	0x00086555
   8292c:	00085aad 	.word	0x00085aad

00082930 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82930:	b480      	push	{r7}
   82932:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82934:	4b56      	ldr	r3, [pc, #344]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82938:	f003 0303 	and.w	r3, r3, #3
   8293c:	2b03      	cmp	r3, #3
   8293e:	f200 808a 	bhi.w	82a56 <SystemCoreClockUpdate+0x126>
   82942:	a101      	add	r1, pc, #4	; (adr r1, 82948 <SystemCoreClockUpdate+0x18>)
   82944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82948:	00082959 	.word	0x00082959
   8294c:	00082979 	.word	0x00082979
   82950:	000829c9 	.word	0x000829c9
   82954:	000829c9 	.word	0x000829c9
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82958:	4b4e      	ldr	r3, [pc, #312]	; (82a94 <SystemCoreClockUpdate+0x164>)
   8295a:	695b      	ldr	r3, [r3, #20]
   8295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82960:	2b00      	cmp	r3, #0
   82962:	d004      	beq.n	8296e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82964:	4b4c      	ldr	r3, [pc, #304]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82966:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8296a:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   8296c:	e073      	b.n	82a56 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8296e:	4b4a      	ldr	r3, [pc, #296]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82970:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82974:	601a      	str	r2, [r3, #0]
		}
		break;
   82976:	e06e      	b.n	82a56 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82978:	4b45      	ldr	r3, [pc, #276]	; (82a90 <SystemCoreClockUpdate+0x160>)
   8297a:	6a1b      	ldr	r3, [r3, #32]
   8297c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82980:	2b00      	cmp	r3, #0
   82982:	d003      	beq.n	8298c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82984:	4b44      	ldr	r3, [pc, #272]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82986:	4a45      	ldr	r2, [pc, #276]	; (82a9c <SystemCoreClockUpdate+0x16c>)
   82988:	601a      	str	r2, [r3, #0]
   8298a:	e01c      	b.n	829c6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8298c:	4b42      	ldr	r3, [pc, #264]	; (82a98 <SystemCoreClockUpdate+0x168>)
   8298e:	4a44      	ldr	r2, [pc, #272]	; (82aa0 <SystemCoreClockUpdate+0x170>)
   82990:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82992:	4b3f      	ldr	r3, [pc, #252]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82994:	6a1b      	ldr	r3, [r3, #32]
   82996:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8299a:	2b10      	cmp	r3, #16
   8299c:	d004      	beq.n	829a8 <SystemCoreClockUpdate+0x78>
   8299e:	2b20      	cmp	r3, #32
   829a0:	d008      	beq.n	829b4 <SystemCoreClockUpdate+0x84>
   829a2:	2b00      	cmp	r3, #0
   829a4:	d00e      	beq.n	829c4 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   829a6:	e00e      	b.n	829c6 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829a8:	4b3b      	ldr	r3, [pc, #236]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829aa:	681b      	ldr	r3, [r3, #0]
   829ac:	005a      	lsls	r2, r3, #1
   829ae:	4b3a      	ldr	r3, [pc, #232]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829b0:	601a      	str	r2, [r3, #0]
				break;
   829b2:	e008      	b.n	829c6 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   829b4:	4b38      	ldr	r3, [pc, #224]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829b6:	681a      	ldr	r2, [r3, #0]
   829b8:	4613      	mov	r3, r2
   829ba:	005b      	lsls	r3, r3, #1
   829bc:	441a      	add	r2, r3
   829be:	4b36      	ldr	r3, [pc, #216]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829c0:	601a      	str	r2, [r3, #0]
				break;
   829c2:	e000      	b.n	829c6 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   829c4:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   829c6:	e046      	b.n	82a56 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   829c8:	4b31      	ldr	r3, [pc, #196]	; (82a90 <SystemCoreClockUpdate+0x160>)
   829ca:	6a1b      	ldr	r3, [r3, #32]
   829cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   829d0:	2b00      	cmp	r3, #0
   829d2:	d003      	beq.n	829dc <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   829d4:	4b30      	ldr	r3, [pc, #192]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829d6:	4a31      	ldr	r2, [pc, #196]	; (82a9c <SystemCoreClockUpdate+0x16c>)
   829d8:	601a      	str	r2, [r3, #0]
   829da:	e01c      	b.n	82a16 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829dc:	4b2e      	ldr	r3, [pc, #184]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829de:	4a30      	ldr	r2, [pc, #192]	; (82aa0 <SystemCoreClockUpdate+0x170>)
   829e0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829e2:	4b2b      	ldr	r3, [pc, #172]	; (82a90 <SystemCoreClockUpdate+0x160>)
   829e4:	6a1b      	ldr	r3, [r3, #32]
   829e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829ea:	2b10      	cmp	r3, #16
   829ec:	d004      	beq.n	829f8 <SystemCoreClockUpdate+0xc8>
   829ee:	2b20      	cmp	r3, #32
   829f0:	d008      	beq.n	82a04 <SystemCoreClockUpdate+0xd4>
   829f2:	2b00      	cmp	r3, #0
   829f4:	d00e      	beq.n	82a14 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   829f6:	e00e      	b.n	82a16 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829f8:	4b27      	ldr	r3, [pc, #156]	; (82a98 <SystemCoreClockUpdate+0x168>)
   829fa:	681b      	ldr	r3, [r3, #0]
   829fc:	005a      	lsls	r2, r3, #1
   829fe:	4b26      	ldr	r3, [pc, #152]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a00:	601a      	str	r2, [r3, #0]
				break;
   82a02:	e008      	b.n	82a16 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a04:	4b24      	ldr	r3, [pc, #144]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a06:	681a      	ldr	r2, [r3, #0]
   82a08:	4613      	mov	r3, r2
   82a0a:	005b      	lsls	r3, r3, #1
   82a0c:	441a      	add	r2, r3
   82a0e:	4b22      	ldr	r3, [pc, #136]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a10:	601a      	str	r2, [r3, #0]
				break;
   82a12:	e000      	b.n	82a16 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82a14:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82a16:	4b1e      	ldr	r3, [pc, #120]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a1a:	f003 0303 	and.w	r3, r3, #3
   82a1e:	2b02      	cmp	r3, #2
   82a20:	d115      	bne.n	82a4e <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a22:	4b1b      	ldr	r3, [pc, #108]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82a24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82a26:	4b1f      	ldr	r3, [pc, #124]	; (82aa4 <SystemCoreClockUpdate+0x174>)
   82a28:	4013      	ands	r3, r2
   82a2a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82a2c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a2e:	4a1a      	ldr	r2, [pc, #104]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a30:	6812      	ldr	r2, [r2, #0]
   82a32:	fb02 f203 	mul.w	r2, r2, r3
   82a36:	4b18      	ldr	r3, [pc, #96]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a38:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a3a:	4b17      	ldr	r3, [pc, #92]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a3c:	681a      	ldr	r2, [r3, #0]
   82a3e:	4b14      	ldr	r3, [pc, #80]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82a42:	b2db      	uxtb	r3, r3
   82a44:	fbb2 f2f3 	udiv	r2, r2, r3
   82a48:	4b13      	ldr	r3, [pc, #76]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a4a:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82a4c:	e002      	b.n	82a54 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82a4e:	4b12      	ldr	r3, [pc, #72]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a50:	4a15      	ldr	r2, [pc, #84]	; (82aa8 <SystemCoreClockUpdate+0x178>)
   82a52:	601a      	str	r2, [r3, #0]
		}
		break;
   82a54:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82a56:	4b0e      	ldr	r3, [pc, #56]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a5e:	2b70      	cmp	r3, #112	; 0x70
   82a60:	d108      	bne.n	82a74 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82a62:	4b0d      	ldr	r3, [pc, #52]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a64:	681a      	ldr	r2, [r3, #0]
   82a66:	4b11      	ldr	r3, [pc, #68]	; (82aac <SystemCoreClockUpdate+0x17c>)
   82a68:	fba3 1302 	umull	r1, r3, r3, r2
   82a6c:	085a      	lsrs	r2, r3, #1
   82a6e:	4b0a      	ldr	r3, [pc, #40]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a70:	601a      	str	r2, [r3, #0]
   82a72:	e009      	b.n	82a88 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a74:	4b08      	ldr	r3, [pc, #32]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a76:	681a      	ldr	r2, [r3, #0]
   82a78:	4b05      	ldr	r3, [pc, #20]	; (82a90 <SystemCoreClockUpdate+0x160>)
   82a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a80:	091b      	lsrs	r3, r3, #4
   82a82:	40da      	lsrs	r2, r3
   82a84:	4b04      	ldr	r3, [pc, #16]	; (82a98 <SystemCoreClockUpdate+0x168>)
   82a86:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82a88:	46bd      	mov	sp, r7
   82a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a8e:	4770      	bx	lr
   82a90:	400e0600 	.word	0x400e0600
   82a94:	400e1a10 	.word	0x400e1a10
   82a98:	20070004 	.word	0x20070004
   82a9c:	00b71b00 	.word	0x00b71b00
   82aa0:	003d0900 	.word	0x003d0900
   82aa4:	07ff0000 	.word	0x07ff0000
   82aa8:	0e4e1c00 	.word	0x0e4e1c00
   82aac:	aaaaaaab 	.word	0xaaaaaaab

00082ab0 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82ab0:	b480      	push	{r7}
   82ab2:	b083      	sub	sp, #12
   82ab4:	af00      	add	r7, sp, #0
   82ab6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82ab8:	687a      	ldr	r2, [r7, #4]
   82aba:	4b1f      	ldr	r3, [pc, #124]	; (82b38 <system_init_flash+0x88>)
   82abc:	429a      	cmp	r2, r3
   82abe:	d806      	bhi.n	82ace <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82ac0:	4b1e      	ldr	r3, [pc, #120]	; (82b3c <system_init_flash+0x8c>)
   82ac2:	2200      	movs	r2, #0
   82ac4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82ac6:	4b1e      	ldr	r3, [pc, #120]	; (82b40 <system_init_flash+0x90>)
   82ac8:	2200      	movs	r2, #0
   82aca:	601a      	str	r2, [r3, #0]
   82acc:	e02e      	b.n	82b2c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82ace:	687a      	ldr	r2, [r7, #4]
   82ad0:	4b1c      	ldr	r3, [pc, #112]	; (82b44 <system_init_flash+0x94>)
   82ad2:	429a      	cmp	r2, r3
   82ad4:	d808      	bhi.n	82ae8 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82ad6:	4b19      	ldr	r3, [pc, #100]	; (82b3c <system_init_flash+0x8c>)
   82ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
   82adc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82ade:	4b18      	ldr	r3, [pc, #96]	; (82b40 <system_init_flash+0x90>)
   82ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
   82ae4:	601a      	str	r2, [r3, #0]
   82ae6:	e021      	b.n	82b2c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82ae8:	687a      	ldr	r2, [r7, #4]
   82aea:	4b17      	ldr	r3, [pc, #92]	; (82b48 <system_init_flash+0x98>)
   82aec:	429a      	cmp	r2, r3
   82aee:	d808      	bhi.n	82b02 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82af0:	4b12      	ldr	r3, [pc, #72]	; (82b3c <system_init_flash+0x8c>)
   82af2:	f44f 7200 	mov.w	r2, #512	; 0x200
   82af6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82af8:	4b11      	ldr	r3, [pc, #68]	; (82b40 <system_init_flash+0x90>)
   82afa:	f44f 7200 	mov.w	r2, #512	; 0x200
   82afe:	601a      	str	r2, [r3, #0]
   82b00:	e014      	b.n	82b2c <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82b02:	687a      	ldr	r2, [r7, #4]
   82b04:	4b11      	ldr	r3, [pc, #68]	; (82b4c <system_init_flash+0x9c>)
   82b06:	429a      	cmp	r2, r3
   82b08:	d808      	bhi.n	82b1c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82b0a:	4b0c      	ldr	r3, [pc, #48]	; (82b3c <system_init_flash+0x8c>)
   82b0c:	f44f 7240 	mov.w	r2, #768	; 0x300
   82b10:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82b12:	4b0b      	ldr	r3, [pc, #44]	; (82b40 <system_init_flash+0x90>)
   82b14:	f44f 7240 	mov.w	r2, #768	; 0x300
   82b18:	601a      	str	r2, [r3, #0]
   82b1a:	e007      	b.n	82b2c <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82b1c:	4b07      	ldr	r3, [pc, #28]	; (82b3c <system_init_flash+0x8c>)
   82b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82b22:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82b24:	4b06      	ldr	r3, [pc, #24]	; (82b40 <system_init_flash+0x90>)
   82b26:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82b2a:	601a      	str	r2, [r3, #0]
	}
}
   82b2c:	370c      	adds	r7, #12
   82b2e:	46bd      	mov	sp, r7
   82b30:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b34:	4770      	bx	lr
   82b36:	bf00      	nop
   82b38:	0157529f 	.word	0x0157529f
   82b3c:	400e0a00 	.word	0x400e0a00
   82b40:	400e0c00 	.word	0x400e0c00
   82b44:	0206cc7f 	.word	0x0206cc7f
   82b48:	0328b73f 	.word	0x0328b73f
   82b4c:	04a62f7f 	.word	0x04a62f7f

00082b50 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82b50:	b480      	push	{r7}
   82b52:	b083      	sub	sp, #12
   82b54:	af00      	add	r7, sp, #0
   82b56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b58:	687b      	ldr	r3, [r7, #4]
   82b5a:	f103 0208 	add.w	r2, r3, #8
   82b5e:	687b      	ldr	r3, [r7, #4]
   82b60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82b62:	687b      	ldr	r3, [r7, #4]
   82b64:	f04f 32ff 	mov.w	r2, #4294967295
   82b68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b6a:	687b      	ldr	r3, [r7, #4]
   82b6c:	f103 0208 	add.w	r2, r3, #8
   82b70:	687b      	ldr	r3, [r7, #4]
   82b72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b74:	687b      	ldr	r3, [r7, #4]
   82b76:	f103 0208 	add.w	r2, r3, #8
   82b7a:	687b      	ldr	r3, [r7, #4]
   82b7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82b7e:	687b      	ldr	r3, [r7, #4]
   82b80:	2200      	movs	r2, #0
   82b82:	601a      	str	r2, [r3, #0]
}
   82b84:	370c      	adds	r7, #12
   82b86:	46bd      	mov	sp, r7
   82b88:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b8c:	4770      	bx	lr
   82b8e:	bf00      	nop

00082b90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   82b90:	b480      	push	{r7}
   82b92:	b083      	sub	sp, #12
   82b94:	af00      	add	r7, sp, #0
   82b96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   82b98:	687b      	ldr	r3, [r7, #4]
   82b9a:	2200      	movs	r2, #0
   82b9c:	611a      	str	r2, [r3, #16]
}
   82b9e:	370c      	adds	r7, #12
   82ba0:	46bd      	mov	sp, r7
   82ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ba6:	4770      	bx	lr

00082ba8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82ba8:	b480      	push	{r7}
   82baa:	b085      	sub	sp, #20
   82bac:	af00      	add	r7, sp, #0
   82bae:	6078      	str	r0, [r7, #4]
   82bb0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82bb2:	687b      	ldr	r3, [r7, #4]
   82bb4:	685b      	ldr	r3, [r3, #4]
   82bb6:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82bb8:	683b      	ldr	r3, [r7, #0]
   82bba:	68fa      	ldr	r2, [r7, #12]
   82bbc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   82bbe:	68fb      	ldr	r3, [r7, #12]
   82bc0:	689a      	ldr	r2, [r3, #8]
   82bc2:	683b      	ldr	r3, [r7, #0]
   82bc4:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82bc6:	68fb      	ldr	r3, [r7, #12]
   82bc8:	689b      	ldr	r3, [r3, #8]
   82bca:	683a      	ldr	r2, [r7, #0]
   82bcc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   82bce:	68fb      	ldr	r3, [r7, #12]
   82bd0:	683a      	ldr	r2, [r7, #0]
   82bd2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82bd4:	683b      	ldr	r3, [r7, #0]
   82bd6:	687a      	ldr	r2, [r7, #4]
   82bd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82bda:	687b      	ldr	r3, [r7, #4]
   82bdc:	681b      	ldr	r3, [r3, #0]
   82bde:	1c5a      	adds	r2, r3, #1
   82be0:	687b      	ldr	r3, [r7, #4]
   82be2:	601a      	str	r2, [r3, #0]
}
   82be4:	3714      	adds	r7, #20
   82be6:	46bd      	mov	sp, r7
   82be8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bec:	4770      	bx	lr
   82bee:	bf00      	nop

00082bf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82bf0:	b480      	push	{r7}
   82bf2:	b085      	sub	sp, #20
   82bf4:	af00      	add	r7, sp, #0
   82bf6:	6078      	str	r0, [r7, #4]
   82bf8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   82bfa:	683b      	ldr	r3, [r7, #0]
   82bfc:	681b      	ldr	r3, [r3, #0]
   82bfe:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82c00:	68bb      	ldr	r3, [r7, #8]
   82c02:	f1b3 3fff 	cmp.w	r3, #4294967295
   82c06:	d103      	bne.n	82c10 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   82c08:	687b      	ldr	r3, [r7, #4]
   82c0a:	691b      	ldr	r3, [r3, #16]
   82c0c:	60fb      	str	r3, [r7, #12]
   82c0e:	e00c      	b.n	82c2a <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82c10:	687b      	ldr	r3, [r7, #4]
   82c12:	3308      	adds	r3, #8
   82c14:	60fb      	str	r3, [r7, #12]
   82c16:	e002      	b.n	82c1e <vListInsert+0x2e>
   82c18:	68fb      	ldr	r3, [r7, #12]
   82c1a:	685b      	ldr	r3, [r3, #4]
   82c1c:	60fb      	str	r3, [r7, #12]
   82c1e:	68fb      	ldr	r3, [r7, #12]
   82c20:	685b      	ldr	r3, [r3, #4]
   82c22:	681a      	ldr	r2, [r3, #0]
   82c24:	68bb      	ldr	r3, [r7, #8]
   82c26:	429a      	cmp	r2, r3
   82c28:	d9f6      	bls.n	82c18 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   82c2a:	68fb      	ldr	r3, [r7, #12]
   82c2c:	685a      	ldr	r2, [r3, #4]
   82c2e:	683b      	ldr	r3, [r7, #0]
   82c30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82c32:	683b      	ldr	r3, [r7, #0]
   82c34:	685b      	ldr	r3, [r3, #4]
   82c36:	683a      	ldr	r2, [r7, #0]
   82c38:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   82c3a:	683b      	ldr	r3, [r7, #0]
   82c3c:	68fa      	ldr	r2, [r7, #12]
   82c3e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82c40:	68fb      	ldr	r3, [r7, #12]
   82c42:	683a      	ldr	r2, [r7, #0]
   82c44:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82c46:	683b      	ldr	r3, [r7, #0]
   82c48:	687a      	ldr	r2, [r7, #4]
   82c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82c4c:	687b      	ldr	r3, [r7, #4]
   82c4e:	681b      	ldr	r3, [r3, #0]
   82c50:	1c5a      	adds	r2, r3, #1
   82c52:	687b      	ldr	r3, [r7, #4]
   82c54:	601a      	str	r2, [r3, #0]
}
   82c56:	3714      	adds	r7, #20
   82c58:	46bd      	mov	sp, r7
   82c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c5e:	4770      	bx	lr

00082c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82c60:	b480      	push	{r7}
   82c62:	b085      	sub	sp, #20
   82c64:	af00      	add	r7, sp, #0
   82c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82c68:	687b      	ldr	r3, [r7, #4]
   82c6a:	691b      	ldr	r3, [r3, #16]
   82c6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82c6e:	687b      	ldr	r3, [r7, #4]
   82c70:	685b      	ldr	r3, [r3, #4]
   82c72:	687a      	ldr	r2, [r7, #4]
   82c74:	6892      	ldr	r2, [r2, #8]
   82c76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82c78:	687b      	ldr	r3, [r7, #4]
   82c7a:	689b      	ldr	r3, [r3, #8]
   82c7c:	687a      	ldr	r2, [r7, #4]
   82c7e:	6852      	ldr	r2, [r2, #4]
   82c80:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82c82:	68fb      	ldr	r3, [r7, #12]
   82c84:	685a      	ldr	r2, [r3, #4]
   82c86:	687b      	ldr	r3, [r7, #4]
   82c88:	429a      	cmp	r2, r3
   82c8a:	d103      	bne.n	82c94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82c8c:	687b      	ldr	r3, [r7, #4]
   82c8e:	689a      	ldr	r2, [r3, #8]
   82c90:	68fb      	ldr	r3, [r7, #12]
   82c92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82c94:	687b      	ldr	r3, [r7, #4]
   82c96:	2200      	movs	r2, #0
   82c98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82c9a:	68fb      	ldr	r3, [r7, #12]
   82c9c:	681b      	ldr	r3, [r3, #0]
   82c9e:	1e5a      	subs	r2, r3, #1
   82ca0:	68fb      	ldr	r3, [r7, #12]
   82ca2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82ca4:	68fb      	ldr	r3, [r7, #12]
   82ca6:	681b      	ldr	r3, [r3, #0]
}
   82ca8:	4618      	mov	r0, r3
   82caa:	3714      	adds	r7, #20
   82cac:	46bd      	mov	sp, r7
   82cae:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cb2:	4770      	bx	lr

00082cb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   82cb4:	b480      	push	{r7}
   82cb6:	b085      	sub	sp, #20
   82cb8:	af00      	add	r7, sp, #0
   82cba:	60f8      	str	r0, [r7, #12]
   82cbc:	60b9      	str	r1, [r7, #8]
   82cbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   82cc0:	68fb      	ldr	r3, [r7, #12]
   82cc2:	3b04      	subs	r3, #4
   82cc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   82cc6:	68fb      	ldr	r3, [r7, #12]
   82cc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   82ccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82cce:	68fb      	ldr	r3, [r7, #12]
   82cd0:	3b04      	subs	r3, #4
   82cd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   82cd4:	68ba      	ldr	r2, [r7, #8]
   82cd6:	68fb      	ldr	r3, [r7, #12]
   82cd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82cda:	68fb      	ldr	r3, [r7, #12]
   82cdc:	3b04      	subs	r3, #4
   82cde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   82ce0:	4a09      	ldr	r2, [pc, #36]	; (82d08 <pxPortInitialiseStack+0x54>)
   82ce2:	68fb      	ldr	r3, [r7, #12]
   82ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   82ce6:	68fb      	ldr	r3, [r7, #12]
   82ce8:	3b14      	subs	r3, #20
   82cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   82cec:	687a      	ldr	r2, [r7, #4]
   82cee:	68fb      	ldr	r3, [r7, #12]
   82cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   82cf2:	68fb      	ldr	r3, [r7, #12]
   82cf4:	3b20      	subs	r3, #32
   82cf6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   82cf8:	68fb      	ldr	r3, [r7, #12]
}
   82cfa:	4618      	mov	r0, r3
   82cfc:	3714      	adds	r7, #20
   82cfe:	46bd      	mov	sp, r7
   82d00:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d04:	4770      	bx	lr
   82d06:	bf00      	nop
   82d08:	00082d0d 	.word	0x00082d0d

00082d0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   82d0c:	b580      	push	{r7, lr}
   82d0e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82d10:	4b05      	ldr	r3, [pc, #20]	; (82d28 <prvTaskExitError+0x1c>)
   82d12:	681b      	ldr	r3, [r3, #0]
   82d14:	f1b3 3fff 	cmp.w	r3, #4294967295
   82d18:	d002      	beq.n	82d20 <prvTaskExitError+0x14>
   82d1a:	4b04      	ldr	r3, [pc, #16]	; (82d2c <prvTaskExitError+0x20>)
   82d1c:	4798      	blx	r3
   82d1e:	e7fe      	b.n	82d1e <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82d20:	4b02      	ldr	r3, [pc, #8]	; (82d2c <prvTaskExitError+0x20>)
   82d22:	4798      	blx	r3
	for( ;; );
   82d24:	e7fe      	b.n	82d24 <prvTaskExitError+0x18>
   82d26:	bf00      	nop
   82d28:	20070008 	.word	0x20070008
   82d2c:	00082ed9 	.word	0x00082ed9

00082d30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82d30:	4b07      	ldr	r3, [pc, #28]	; (82d50 <pxCurrentTCBConst2>)
   82d32:	6819      	ldr	r1, [r3, #0]
   82d34:	6808      	ldr	r0, [r1, #0]
   82d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82d3a:	f380 8809 	msr	PSP, r0
   82d3e:	f3bf 8f6f 	isb	sy
   82d42:	f04f 0000 	mov.w	r0, #0
   82d46:	f380 8811 	msr	BASEPRI, r0
   82d4a:	f04e 0e0d 	orr.w	lr, lr, #13
   82d4e:	4770      	bx	lr

00082d50 <pxCurrentTCBConst2>:
   82d50:	2007a570 	.word	0x2007a570

00082d54 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   82d54:	4806      	ldr	r0, [pc, #24]	; (82d70 <prvPortStartFirstTask+0x1c>)
   82d56:	6800      	ldr	r0, [r0, #0]
   82d58:	6800      	ldr	r0, [r0, #0]
   82d5a:	f380 8808 	msr	MSP, r0
   82d5e:	b662      	cpsie	i
   82d60:	b661      	cpsie	f
   82d62:	f3bf 8f4f 	dsb	sy
   82d66:	f3bf 8f6f 	isb	sy
   82d6a:	df00      	svc	0
   82d6c:	bf00      	nop
   82d6e:	0000      	.short	0x0000
   82d70:	e000ed08 	.word	0xe000ed08

00082d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   82d74:	b580      	push	{r7, lr}
   82d76:	b084      	sub	sp, #16
   82d78:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   82d7a:	4b28      	ldr	r3, [pc, #160]	; (82e1c <xPortStartScheduler+0xa8>)
   82d7c:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   82d7e:	68fb      	ldr	r3, [r7, #12]
   82d80:	781b      	ldrb	r3, [r3, #0]
   82d82:	b2db      	uxtb	r3, r3
   82d84:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   82d86:	68fb      	ldr	r3, [r7, #12]
   82d88:	22ff      	movs	r2, #255	; 0xff
   82d8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   82d8c:	68fb      	ldr	r3, [r7, #12]
   82d8e:	781b      	ldrb	r3, [r3, #0]
   82d90:	b2db      	uxtb	r3, r3
   82d92:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   82d94:	79fb      	ldrb	r3, [r7, #7]
   82d96:	b2db      	uxtb	r3, r3
   82d98:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   82d9c:	b2da      	uxtb	r2, r3
   82d9e:	4b20      	ldr	r3, [pc, #128]	; (82e20 <xPortStartScheduler+0xac>)
   82da0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   82da2:	4b20      	ldr	r3, [pc, #128]	; (82e24 <xPortStartScheduler+0xb0>)
   82da4:	2207      	movs	r2, #7
   82da6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82da8:	e009      	b.n	82dbe <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   82daa:	4b1e      	ldr	r3, [pc, #120]	; (82e24 <xPortStartScheduler+0xb0>)
   82dac:	681b      	ldr	r3, [r3, #0]
   82dae:	1e5a      	subs	r2, r3, #1
   82db0:	4b1c      	ldr	r3, [pc, #112]	; (82e24 <xPortStartScheduler+0xb0>)
   82db2:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   82db4:	79fb      	ldrb	r3, [r7, #7]
   82db6:	b2db      	uxtb	r3, r3
   82db8:	005b      	lsls	r3, r3, #1
   82dba:	b2db      	uxtb	r3, r3
   82dbc:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82dbe:	79fb      	ldrb	r3, [r7, #7]
   82dc0:	b2db      	uxtb	r3, r3
   82dc2:	b2db      	uxtb	r3, r3
   82dc4:	b25b      	sxtb	r3, r3
   82dc6:	2b00      	cmp	r3, #0
   82dc8:	dbef      	blt.n	82daa <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   82dca:	4b16      	ldr	r3, [pc, #88]	; (82e24 <xPortStartScheduler+0xb0>)
   82dcc:	681b      	ldr	r3, [r3, #0]
   82dce:	021a      	lsls	r2, r3, #8
   82dd0:	4b14      	ldr	r3, [pc, #80]	; (82e24 <xPortStartScheduler+0xb0>)
   82dd2:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   82dd4:	4b13      	ldr	r3, [pc, #76]	; (82e24 <xPortStartScheduler+0xb0>)
   82dd6:	681b      	ldr	r3, [r3, #0]
   82dd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82ddc:	4b11      	ldr	r3, [pc, #68]	; (82e24 <xPortStartScheduler+0xb0>)
   82dde:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   82de0:	68bb      	ldr	r3, [r7, #8]
   82de2:	b2da      	uxtb	r2, r3
   82de4:	68fb      	ldr	r3, [r7, #12]
   82de6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   82de8:	4b0f      	ldr	r3, [pc, #60]	; (82e28 <xPortStartScheduler+0xb4>)
   82dea:	4a0f      	ldr	r2, [pc, #60]	; (82e28 <xPortStartScheduler+0xb4>)
   82dec:	6812      	ldr	r2, [r2, #0]
   82dee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   82df2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   82df4:	4b0c      	ldr	r3, [pc, #48]	; (82e28 <xPortStartScheduler+0xb4>)
   82df6:	4a0c      	ldr	r2, [pc, #48]	; (82e28 <xPortStartScheduler+0xb4>)
   82df8:	6812      	ldr	r2, [r2, #0]
   82dfa:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   82dfe:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82e00:	4b0a      	ldr	r3, [pc, #40]	; (82e2c <xPortStartScheduler+0xb8>)
   82e02:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82e04:	4b0a      	ldr	r3, [pc, #40]	; (82e30 <xPortStartScheduler+0xbc>)
   82e06:	2200      	movs	r2, #0
   82e08:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   82e0a:	4b0a      	ldr	r3, [pc, #40]	; (82e34 <xPortStartScheduler+0xc0>)
   82e0c:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   82e0e:	4b0a      	ldr	r3, [pc, #40]	; (82e38 <xPortStartScheduler+0xc4>)
   82e10:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   82e12:	2300      	movs	r3, #0
}
   82e14:	4618      	mov	r0, r3
   82e16:	3710      	adds	r7, #16
   82e18:	46bd      	mov	sp, r7
   82e1a:	bd80      	pop	{r7, pc}
   82e1c:	e000e400 	.word	0xe000e400
   82e20:	20070550 	.word	0x20070550
   82e24:	20070554 	.word	0x20070554
   82e28:	e000ed20 	.word	0xe000ed20
   82e2c:	00082f6d 	.word	0x00082f6d
   82e30:	20070008 	.word	0x20070008
   82e34:	00082d55 	.word	0x00082d55
   82e38:	00082d0d 	.word	0x00082d0d

00082e3c <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   82e3c:	b480      	push	{r7}
   82e3e:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82e40:	4b05      	ldr	r3, [pc, #20]	; (82e58 <vPortYield+0x1c>)
   82e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82e46:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   82e48:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82e4c:	f3bf 8f6f 	isb	sy
}
   82e50:	46bd      	mov	sp, r7
   82e52:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e56:	4770      	bx	lr
   82e58:	e000ed04 	.word	0xe000ed04

00082e5c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82e5c:	b580      	push	{r7, lr}
   82e5e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   82e60:	4b0c      	ldr	r3, [pc, #48]	; (82e94 <vPortEnterCritical+0x38>)
   82e62:	4798      	blx	r3
	uxCriticalNesting++;
   82e64:	4b0c      	ldr	r3, [pc, #48]	; (82e98 <vPortEnterCritical+0x3c>)
   82e66:	681b      	ldr	r3, [r3, #0]
   82e68:	1c5a      	adds	r2, r3, #1
   82e6a:	4b0b      	ldr	r3, [pc, #44]	; (82e98 <vPortEnterCritical+0x3c>)
   82e6c:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   82e6e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82e72:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   82e76:	4b08      	ldr	r3, [pc, #32]	; (82e98 <vPortEnterCritical+0x3c>)
   82e78:	681b      	ldr	r3, [r3, #0]
   82e7a:	2b01      	cmp	r3, #1
   82e7c:	d108      	bne.n	82e90 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   82e7e:	4b07      	ldr	r3, [pc, #28]	; (82e9c <vPortEnterCritical+0x40>)
   82e80:	681b      	ldr	r3, [r3, #0]
   82e82:	f003 031f 	and.w	r3, r3, #31
   82e86:	2b00      	cmp	r3, #0
   82e88:	d002      	beq.n	82e90 <vPortEnterCritical+0x34>
   82e8a:	4b02      	ldr	r3, [pc, #8]	; (82e94 <vPortEnterCritical+0x38>)
   82e8c:	4798      	blx	r3
   82e8e:	e7fe      	b.n	82e8e <vPortEnterCritical+0x32>
	}
}
   82e90:	bd80      	pop	{r7, pc}
   82e92:	bf00      	nop
   82e94:	00082ed9 	.word	0x00082ed9
   82e98:	20070008 	.word	0x20070008
   82e9c:	e000ed04 	.word	0xe000ed04

00082ea0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82ea0:	b580      	push	{r7, lr}
   82ea2:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   82ea4:	4b09      	ldr	r3, [pc, #36]	; (82ecc <vPortExitCritical+0x2c>)
   82ea6:	681b      	ldr	r3, [r3, #0]
   82ea8:	2b00      	cmp	r3, #0
   82eaa:	d102      	bne.n	82eb2 <vPortExitCritical+0x12>
   82eac:	4b08      	ldr	r3, [pc, #32]	; (82ed0 <vPortExitCritical+0x30>)
   82eae:	4798      	blx	r3
   82eb0:	e7fe      	b.n	82eb0 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   82eb2:	4b06      	ldr	r3, [pc, #24]	; (82ecc <vPortExitCritical+0x2c>)
   82eb4:	681b      	ldr	r3, [r3, #0]
   82eb6:	1e5a      	subs	r2, r3, #1
   82eb8:	4b04      	ldr	r3, [pc, #16]	; (82ecc <vPortExitCritical+0x2c>)
   82eba:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   82ebc:	4b03      	ldr	r3, [pc, #12]	; (82ecc <vPortExitCritical+0x2c>)
   82ebe:	681b      	ldr	r3, [r3, #0]
   82ec0:	2b00      	cmp	r3, #0
   82ec2:	d102      	bne.n	82eca <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   82ec4:	2000      	movs	r0, #0
   82ec6:	4b03      	ldr	r3, [pc, #12]	; (82ed4 <vPortExitCritical+0x34>)
   82ec8:	4798      	blx	r3
	}
}
   82eca:	bd80      	pop	{r7, pc}
   82ecc:	20070008 	.word	0x20070008
   82ed0:	00082ed9 	.word	0x00082ed9
   82ed4:	00082eed 	.word	0x00082eed

00082ed8 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82ed8:	f3ef 8011 	mrs	r0, BASEPRI
   82edc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82ee0:	f381 8811 	msr	BASEPRI, r1
   82ee4:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   82ee6:	2300      	movs	r3, #0
}
   82ee8:	4618      	mov	r0, r3
   82eea:	bf00      	nop

00082eec <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   82eec:	f380 8811 	msr	BASEPRI, r0
   82ef0:	4770      	bx	lr
   82ef2:	bf00      	nop

00082ef4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   82ef4:	f3ef 8009 	mrs	r0, PSP
   82ef8:	f3bf 8f6f 	isb	sy
   82efc:	4b0d      	ldr	r3, [pc, #52]	; (82f34 <pxCurrentTCBConst>)
   82efe:	681a      	ldr	r2, [r3, #0]
   82f00:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82f04:	6010      	str	r0, [r2, #0]
   82f06:	e92d 4008 	stmdb	sp!, {r3, lr}
   82f0a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82f0e:	f380 8811 	msr	BASEPRI, r0
   82f12:	f001 f98d 	bl	84230 <vTaskSwitchContext>
   82f16:	f04f 0000 	mov.w	r0, #0
   82f1a:	f380 8811 	msr	BASEPRI, r0
   82f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82f22:	6819      	ldr	r1, [r3, #0]
   82f24:	6808      	ldr	r0, [r1, #0]
   82f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82f2a:	f380 8809 	msr	PSP, r0
   82f2e:	f3bf 8f6f 	isb	sy
   82f32:	4770      	bx	lr

00082f34 <pxCurrentTCBConst>:
   82f34:	2007a570 	.word	0x2007a570

00082f38 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   82f38:	b580      	push	{r7, lr}
   82f3a:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82f3c:	4b07      	ldr	r3, [pc, #28]	; (82f5c <SysTick_Handler+0x24>)
   82f3e:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82f40:	4b07      	ldr	r3, [pc, #28]	; (82f60 <SysTick_Handler+0x28>)
   82f42:	4798      	blx	r3
   82f44:	4603      	mov	r3, r0
   82f46:	2b00      	cmp	r3, #0
   82f48:	d003      	beq.n	82f52 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82f4a:	4b06      	ldr	r3, [pc, #24]	; (82f64 <SysTick_Handler+0x2c>)
   82f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82f50:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   82f52:	2000      	movs	r0, #0
   82f54:	4b04      	ldr	r3, [pc, #16]	; (82f68 <SysTick_Handler+0x30>)
   82f56:	4798      	blx	r3
}
   82f58:	bd80      	pop	{r7, pc}
   82f5a:	bf00      	nop
   82f5c:	00082ed9 	.word	0x00082ed9
   82f60:	000840b5 	.word	0x000840b5
   82f64:	e000ed04 	.word	0xe000ed04
   82f68:	00082eed 	.word	0x00082eed

00082f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   82f6c:	b480      	push	{r7}
   82f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   82f70:	4b07      	ldr	r3, [pc, #28]	; (82f90 <vPortSetupTimerInterrupt+0x24>)
   82f72:	4a08      	ldr	r2, [pc, #32]	; (82f94 <vPortSetupTimerInterrupt+0x28>)
   82f74:	6811      	ldr	r1, [r2, #0]
   82f76:	4a08      	ldr	r2, [pc, #32]	; (82f98 <vPortSetupTimerInterrupt+0x2c>)
   82f78:	fba2 0201 	umull	r0, r2, r2, r1
   82f7c:	08d2      	lsrs	r2, r2, #3
   82f7e:	3a01      	subs	r2, #1
   82f80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   82f82:	4b06      	ldr	r3, [pc, #24]	; (82f9c <vPortSetupTimerInterrupt+0x30>)
   82f84:	2207      	movs	r2, #7
   82f86:	601a      	str	r2, [r3, #0]
}
   82f88:	46bd      	mov	sp, r7
   82f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f8e:	4770      	bx	lr
   82f90:	e000e014 	.word	0xe000e014
   82f94:	20070004 	.word	0x20070004
   82f98:	cccccccd 	.word	0xcccccccd
   82f9c:	e000e010 	.word	0xe000e010

00082fa0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   82fa0:	b580      	push	{r7, lr}
   82fa2:	b082      	sub	sp, #8
   82fa4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   82fa6:	f3ef 8305 	mrs	r3, IPSR
   82faa:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   82fac:	687b      	ldr	r3, [r7, #4]
   82fae:	2b0f      	cmp	r3, #15
   82fb0:	d90c      	bls.n	82fcc <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   82fb2:	4a0d      	ldr	r2, [pc, #52]	; (82fe8 <vPortValidateInterruptPriority+0x48>)
   82fb4:	687b      	ldr	r3, [r7, #4]
   82fb6:	4413      	add	r3, r2
   82fb8:	781b      	ldrb	r3, [r3, #0]
   82fba:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   82fbc:	4b0b      	ldr	r3, [pc, #44]	; (82fec <vPortValidateInterruptPriority+0x4c>)
   82fbe:	781b      	ldrb	r3, [r3, #0]
   82fc0:	78fa      	ldrb	r2, [r7, #3]
   82fc2:	429a      	cmp	r2, r3
   82fc4:	d202      	bcs.n	82fcc <vPortValidateInterruptPriority+0x2c>
   82fc6:	4b0a      	ldr	r3, [pc, #40]	; (82ff0 <vPortValidateInterruptPriority+0x50>)
   82fc8:	4798      	blx	r3
   82fca:	e7fe      	b.n	82fca <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   82fcc:	4b09      	ldr	r3, [pc, #36]	; (82ff4 <vPortValidateInterruptPriority+0x54>)
   82fce:	681b      	ldr	r3, [r3, #0]
   82fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82fd4:	4b08      	ldr	r3, [pc, #32]	; (82ff8 <vPortValidateInterruptPriority+0x58>)
   82fd6:	681b      	ldr	r3, [r3, #0]
   82fd8:	429a      	cmp	r2, r3
   82fda:	d902      	bls.n	82fe2 <vPortValidateInterruptPriority+0x42>
   82fdc:	4b04      	ldr	r3, [pc, #16]	; (82ff0 <vPortValidateInterruptPriority+0x50>)
   82fde:	4798      	blx	r3
   82fe0:	e7fe      	b.n	82fe0 <vPortValidateInterruptPriority+0x40>
	}
   82fe2:	3708      	adds	r7, #8
   82fe4:	46bd      	mov	sp, r7
   82fe6:	bd80      	pop	{r7, pc}
   82fe8:	e000e3f0 	.word	0xe000e3f0
   82fec:	20070550 	.word	0x20070550
   82ff0:	00082ed9 	.word	0x00082ed9
   82ff4:	e000ed0c 	.word	0xe000ed0c
   82ff8:	20070554 	.word	0x20070554

00082ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   82ffc:	b580      	push	{r7, lr}
   82ffe:	b086      	sub	sp, #24
   83000:	af00      	add	r7, sp, #0
   83002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   83004:	2300      	movs	r3, #0
   83006:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   83008:	4b4f      	ldr	r3, [pc, #316]	; (83148 <pvPortMalloc+0x14c>)
   8300a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   8300c:	4b4f      	ldr	r3, [pc, #316]	; (8314c <pvPortMalloc+0x150>)
   8300e:	681b      	ldr	r3, [r3, #0]
   83010:	2b00      	cmp	r3, #0
   83012:	d101      	bne.n	83018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   83014:	4b4e      	ldr	r3, [pc, #312]	; (83150 <pvPortMalloc+0x154>)
   83016:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   83018:	4b4e      	ldr	r3, [pc, #312]	; (83154 <pvPortMalloc+0x158>)
   8301a:	681a      	ldr	r2, [r3, #0]
   8301c:	687b      	ldr	r3, [r7, #4]
   8301e:	4013      	ands	r3, r2
   83020:	2b00      	cmp	r3, #0
   83022:	d17d      	bne.n	83120 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   83024:	687b      	ldr	r3, [r7, #4]
   83026:	2b00      	cmp	r3, #0
   83028:	d015      	beq.n	83056 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   8302a:	2308      	movs	r3, #8
   8302c:	687a      	ldr	r2, [r7, #4]
   8302e:	4413      	add	r3, r2
   83030:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   83032:	687b      	ldr	r3, [r7, #4]
   83034:	f003 0307 	and.w	r3, r3, #7
   83038:	2b00      	cmp	r3, #0
   8303a:	d00c      	beq.n	83056 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8303c:	687b      	ldr	r3, [r7, #4]
   8303e:	f023 0307 	bic.w	r3, r3, #7
   83042:	3308      	adds	r3, #8
   83044:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   83046:	687b      	ldr	r3, [r7, #4]
   83048:	f003 0307 	and.w	r3, r3, #7
   8304c:	2b00      	cmp	r3, #0
   8304e:	d002      	beq.n	83056 <pvPortMalloc+0x5a>
   83050:	4b41      	ldr	r3, [pc, #260]	; (83158 <pvPortMalloc+0x15c>)
   83052:	4798      	blx	r3
   83054:	e7fe      	b.n	83054 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   83056:	687b      	ldr	r3, [r7, #4]
   83058:	2b00      	cmp	r3, #0
   8305a:	d061      	beq.n	83120 <pvPortMalloc+0x124>
   8305c:	4b3f      	ldr	r3, [pc, #252]	; (8315c <pvPortMalloc+0x160>)
   8305e:	681b      	ldr	r3, [r3, #0]
   83060:	687a      	ldr	r2, [r7, #4]
   83062:	429a      	cmp	r2, r3
   83064:	d85c      	bhi.n	83120 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   83066:	4b3e      	ldr	r3, [pc, #248]	; (83160 <pvPortMalloc+0x164>)
   83068:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   8306a:	4b3d      	ldr	r3, [pc, #244]	; (83160 <pvPortMalloc+0x164>)
   8306c:	681b      	ldr	r3, [r3, #0]
   8306e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83070:	e004      	b.n	8307c <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   83072:	697b      	ldr	r3, [r7, #20]
   83074:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   83076:	697b      	ldr	r3, [r7, #20]
   83078:	681b      	ldr	r3, [r3, #0]
   8307a:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8307c:	697b      	ldr	r3, [r7, #20]
   8307e:	685a      	ldr	r2, [r3, #4]
   83080:	687b      	ldr	r3, [r7, #4]
   83082:	429a      	cmp	r2, r3
   83084:	d203      	bcs.n	8308e <pvPortMalloc+0x92>
   83086:	697b      	ldr	r3, [r7, #20]
   83088:	681b      	ldr	r3, [r3, #0]
   8308a:	2b00      	cmp	r3, #0
   8308c:	d1f1      	bne.n	83072 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   8308e:	4b2f      	ldr	r3, [pc, #188]	; (8314c <pvPortMalloc+0x150>)
   83090:	681b      	ldr	r3, [r3, #0]
   83092:	697a      	ldr	r2, [r7, #20]
   83094:	429a      	cmp	r2, r3
   83096:	d043      	beq.n	83120 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   83098:	693b      	ldr	r3, [r7, #16]
   8309a:	681a      	ldr	r2, [r3, #0]
   8309c:	2308      	movs	r3, #8
   8309e:	4413      	add	r3, r2
   830a0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   830a2:	697b      	ldr	r3, [r7, #20]
   830a4:	681a      	ldr	r2, [r3, #0]
   830a6:	693b      	ldr	r3, [r7, #16]
   830a8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   830aa:	697b      	ldr	r3, [r7, #20]
   830ac:	685a      	ldr	r2, [r3, #4]
   830ae:	687b      	ldr	r3, [r7, #4]
   830b0:	1ad2      	subs	r2, r2, r3
   830b2:	2308      	movs	r3, #8
   830b4:	005b      	lsls	r3, r3, #1
   830b6:	429a      	cmp	r2, r3
   830b8:	d917      	bls.n	830ea <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   830ba:	697a      	ldr	r2, [r7, #20]
   830bc:	687b      	ldr	r3, [r7, #4]
   830be:	4413      	add	r3, r2
   830c0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   830c2:	68bb      	ldr	r3, [r7, #8]
   830c4:	f003 0307 	and.w	r3, r3, #7
   830c8:	2b00      	cmp	r3, #0
   830ca:	d002      	beq.n	830d2 <pvPortMalloc+0xd6>
   830cc:	4b22      	ldr	r3, [pc, #136]	; (83158 <pvPortMalloc+0x15c>)
   830ce:	4798      	blx	r3
   830d0:	e7fe      	b.n	830d0 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   830d2:	697b      	ldr	r3, [r7, #20]
   830d4:	685a      	ldr	r2, [r3, #4]
   830d6:	687b      	ldr	r3, [r7, #4]
   830d8:	1ad2      	subs	r2, r2, r3
   830da:	68bb      	ldr	r3, [r7, #8]
   830dc:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   830de:	697b      	ldr	r3, [r7, #20]
   830e0:	687a      	ldr	r2, [r7, #4]
   830e2:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   830e4:	68b8      	ldr	r0, [r7, #8]
   830e6:	4b1f      	ldr	r3, [pc, #124]	; (83164 <pvPortMalloc+0x168>)
   830e8:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   830ea:	4b1c      	ldr	r3, [pc, #112]	; (8315c <pvPortMalloc+0x160>)
   830ec:	681a      	ldr	r2, [r3, #0]
   830ee:	697b      	ldr	r3, [r7, #20]
   830f0:	685b      	ldr	r3, [r3, #4]
   830f2:	1ad2      	subs	r2, r2, r3
   830f4:	4b19      	ldr	r3, [pc, #100]	; (8315c <pvPortMalloc+0x160>)
   830f6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   830f8:	4b18      	ldr	r3, [pc, #96]	; (8315c <pvPortMalloc+0x160>)
   830fa:	681a      	ldr	r2, [r3, #0]
   830fc:	4b1a      	ldr	r3, [pc, #104]	; (83168 <pvPortMalloc+0x16c>)
   830fe:	681b      	ldr	r3, [r3, #0]
   83100:	429a      	cmp	r2, r3
   83102:	d203      	bcs.n	8310c <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   83104:	4b15      	ldr	r3, [pc, #84]	; (8315c <pvPortMalloc+0x160>)
   83106:	681a      	ldr	r2, [r3, #0]
   83108:	4b17      	ldr	r3, [pc, #92]	; (83168 <pvPortMalloc+0x16c>)
   8310a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   8310c:	697b      	ldr	r3, [r7, #20]
   8310e:	685a      	ldr	r2, [r3, #4]
   83110:	4b10      	ldr	r3, [pc, #64]	; (83154 <pvPortMalloc+0x158>)
   83112:	681b      	ldr	r3, [r3, #0]
   83114:	431a      	orrs	r2, r3
   83116:	697b      	ldr	r3, [r7, #20]
   83118:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   8311a:	697b      	ldr	r3, [r7, #20]
   8311c:	2200      	movs	r2, #0
   8311e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   83120:	4b12      	ldr	r3, [pc, #72]	; (8316c <pvPortMalloc+0x170>)
   83122:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   83124:	68fb      	ldr	r3, [r7, #12]
   83126:	2b00      	cmp	r3, #0
   83128:	d101      	bne.n	8312e <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   8312a:	4b11      	ldr	r3, [pc, #68]	; (83170 <pvPortMalloc+0x174>)
   8312c:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8312e:	68fb      	ldr	r3, [r7, #12]
   83130:	f003 0307 	and.w	r3, r3, #7
   83134:	2b00      	cmp	r3, #0
   83136:	d002      	beq.n	8313e <pvPortMalloc+0x142>
   83138:	4b07      	ldr	r3, [pc, #28]	; (83158 <pvPortMalloc+0x15c>)
   8313a:	4798      	blx	r3
   8313c:	e7fe      	b.n	8313c <pvPortMalloc+0x140>
	return pvReturn;
   8313e:	68fb      	ldr	r3, [r7, #12]
}
   83140:	4618      	mov	r0, r3
   83142:	3718      	adds	r7, #24
   83144:	46bd      	mov	sp, r7
   83146:	bd80      	pop	{r7, pc}
   83148:	00083f49 	.word	0x00083f49
   8314c:	2007a560 	.word	0x2007a560
   83150:	00083219 	.word	0x00083219
   83154:	2007a56c 	.word	0x2007a56c
   83158:	00082ed9 	.word	0x00082ed9
   8315c:	2007a564 	.word	0x2007a564
   83160:	2007a558 	.word	0x2007a558
   83164:	000832dd 	.word	0x000832dd
   83168:	2007a568 	.word	0x2007a568
   8316c:	00083f65 	.word	0x00083f65
   83170:	00085b4d 	.word	0x00085b4d

00083174 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   83174:	b580      	push	{r7, lr}
   83176:	b084      	sub	sp, #16
   83178:	af00      	add	r7, sp, #0
   8317a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   8317c:	687b      	ldr	r3, [r7, #4]
   8317e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   83180:	687b      	ldr	r3, [r7, #4]
   83182:	2b00      	cmp	r3, #0
   83184:	d038      	beq.n	831f8 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   83186:	2308      	movs	r3, #8
   83188:	425b      	negs	r3, r3
   8318a:	68fa      	ldr	r2, [r7, #12]
   8318c:	4413      	add	r3, r2
   8318e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   83190:	68fb      	ldr	r3, [r7, #12]
   83192:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   83194:	68bb      	ldr	r3, [r7, #8]
   83196:	685a      	ldr	r2, [r3, #4]
   83198:	4b19      	ldr	r3, [pc, #100]	; (83200 <vPortFree+0x8c>)
   8319a:	681b      	ldr	r3, [r3, #0]
   8319c:	4013      	ands	r3, r2
   8319e:	2b00      	cmp	r3, #0
   831a0:	d102      	bne.n	831a8 <vPortFree+0x34>
   831a2:	4b18      	ldr	r3, [pc, #96]	; (83204 <vPortFree+0x90>)
   831a4:	4798      	blx	r3
   831a6:	e7fe      	b.n	831a6 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   831a8:	68bb      	ldr	r3, [r7, #8]
   831aa:	681b      	ldr	r3, [r3, #0]
   831ac:	2b00      	cmp	r3, #0
   831ae:	d002      	beq.n	831b6 <vPortFree+0x42>
   831b0:	4b14      	ldr	r3, [pc, #80]	; (83204 <vPortFree+0x90>)
   831b2:	4798      	blx	r3
   831b4:	e7fe      	b.n	831b4 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   831b6:	68bb      	ldr	r3, [r7, #8]
   831b8:	685a      	ldr	r2, [r3, #4]
   831ba:	4b11      	ldr	r3, [pc, #68]	; (83200 <vPortFree+0x8c>)
   831bc:	681b      	ldr	r3, [r3, #0]
   831be:	4013      	ands	r3, r2
   831c0:	2b00      	cmp	r3, #0
   831c2:	d019      	beq.n	831f8 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   831c4:	68bb      	ldr	r3, [r7, #8]
   831c6:	681b      	ldr	r3, [r3, #0]
   831c8:	2b00      	cmp	r3, #0
   831ca:	d115      	bne.n	831f8 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   831cc:	68bb      	ldr	r3, [r7, #8]
   831ce:	685a      	ldr	r2, [r3, #4]
   831d0:	4b0b      	ldr	r3, [pc, #44]	; (83200 <vPortFree+0x8c>)
   831d2:	681b      	ldr	r3, [r3, #0]
   831d4:	43db      	mvns	r3, r3
   831d6:	401a      	ands	r2, r3
   831d8:	68bb      	ldr	r3, [r7, #8]
   831da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   831dc:	4b0a      	ldr	r3, [pc, #40]	; (83208 <vPortFree+0x94>)
   831de:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   831e0:	68bb      	ldr	r3, [r7, #8]
   831e2:	685a      	ldr	r2, [r3, #4]
   831e4:	4b09      	ldr	r3, [pc, #36]	; (8320c <vPortFree+0x98>)
   831e6:	681b      	ldr	r3, [r3, #0]
   831e8:	441a      	add	r2, r3
   831ea:	4b08      	ldr	r3, [pc, #32]	; (8320c <vPortFree+0x98>)
   831ec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   831ee:	68b8      	ldr	r0, [r7, #8]
   831f0:	4b07      	ldr	r3, [pc, #28]	; (83210 <vPortFree+0x9c>)
   831f2:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   831f4:	4b07      	ldr	r3, [pc, #28]	; (83214 <vPortFree+0xa0>)
   831f6:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   831f8:	3710      	adds	r7, #16
   831fa:	46bd      	mov	sp, r7
   831fc:	bd80      	pop	{r7, pc}
   831fe:	bf00      	nop
   83200:	2007a56c 	.word	0x2007a56c
   83204:	00082ed9 	.word	0x00082ed9
   83208:	00083f49 	.word	0x00083f49
   8320c:	2007a564 	.word	0x2007a564
   83210:	000832dd 	.word	0x000832dd
   83214:	00083f65 	.word	0x00083f65

00083218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   83218:	b480      	push	{r7}
   8321a:	b085      	sub	sp, #20
   8321c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   8321e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   83222:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   83224:	4b27      	ldr	r3, [pc, #156]	; (832c4 <prvHeapInit+0xac>)
   83226:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   83228:	68fb      	ldr	r3, [r7, #12]
   8322a:	f003 0307 	and.w	r3, r3, #7
   8322e:	2b00      	cmp	r3, #0
   83230:	d00c      	beq.n	8324c <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   83232:	68fb      	ldr	r3, [r7, #12]
   83234:	3307      	adds	r3, #7
   83236:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83238:	68fb      	ldr	r3, [r7, #12]
   8323a:	f023 0307 	bic.w	r3, r3, #7
   8323e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   83240:	68ba      	ldr	r2, [r7, #8]
   83242:	68fb      	ldr	r3, [r7, #12]
   83244:	1ad2      	subs	r2, r2, r3
   83246:	4b1f      	ldr	r3, [pc, #124]	; (832c4 <prvHeapInit+0xac>)
   83248:	4413      	add	r3, r2
   8324a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   8324c:	68fb      	ldr	r3, [r7, #12]
   8324e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   83250:	4b1d      	ldr	r3, [pc, #116]	; (832c8 <prvHeapInit+0xb0>)
   83252:	687a      	ldr	r2, [r7, #4]
   83254:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   83256:	4b1c      	ldr	r3, [pc, #112]	; (832c8 <prvHeapInit+0xb0>)
   83258:	2200      	movs	r2, #0
   8325a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   8325c:	687a      	ldr	r2, [r7, #4]
   8325e:	68bb      	ldr	r3, [r7, #8]
   83260:	4413      	add	r3, r2
   83262:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   83264:	2308      	movs	r3, #8
   83266:	68fa      	ldr	r2, [r7, #12]
   83268:	1ad3      	subs	r3, r2, r3
   8326a:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   8326c:	68fb      	ldr	r3, [r7, #12]
   8326e:	f023 0307 	bic.w	r3, r3, #7
   83272:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   83274:	68fa      	ldr	r2, [r7, #12]
   83276:	4b15      	ldr	r3, [pc, #84]	; (832cc <prvHeapInit+0xb4>)
   83278:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   8327a:	4b14      	ldr	r3, [pc, #80]	; (832cc <prvHeapInit+0xb4>)
   8327c:	681b      	ldr	r3, [r3, #0]
   8327e:	2200      	movs	r2, #0
   83280:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   83282:	4b12      	ldr	r3, [pc, #72]	; (832cc <prvHeapInit+0xb4>)
   83284:	681b      	ldr	r3, [r3, #0]
   83286:	2200      	movs	r2, #0
   83288:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   8328a:	687b      	ldr	r3, [r7, #4]
   8328c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   8328e:	683b      	ldr	r3, [r7, #0]
   83290:	68fa      	ldr	r2, [r7, #12]
   83292:	1ad2      	subs	r2, r2, r3
   83294:	683b      	ldr	r3, [r7, #0]
   83296:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83298:	4b0c      	ldr	r3, [pc, #48]	; (832cc <prvHeapInit+0xb4>)
   8329a:	681a      	ldr	r2, [r3, #0]
   8329c:	683b      	ldr	r3, [r7, #0]
   8329e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   832a0:	683b      	ldr	r3, [r7, #0]
   832a2:	685a      	ldr	r2, [r3, #4]
   832a4:	4b0a      	ldr	r3, [pc, #40]	; (832d0 <prvHeapInit+0xb8>)
   832a6:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   832a8:	683b      	ldr	r3, [r7, #0]
   832aa:	685a      	ldr	r2, [r3, #4]
   832ac:	4b09      	ldr	r3, [pc, #36]	; (832d4 <prvHeapInit+0xbc>)
   832ae:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   832b0:	4b09      	ldr	r3, [pc, #36]	; (832d8 <prvHeapInit+0xc0>)
   832b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   832b6:	601a      	str	r2, [r3, #0]
}
   832b8:	3714      	adds	r7, #20
   832ba:	46bd      	mov	sp, r7
   832bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   832c0:	4770      	bx	lr
   832c2:	bf00      	nop
   832c4:	20070558 	.word	0x20070558
   832c8:	2007a558 	.word	0x2007a558
   832cc:	2007a560 	.word	0x2007a560
   832d0:	2007a568 	.word	0x2007a568
   832d4:	2007a564 	.word	0x2007a564
   832d8:	2007a56c 	.word	0x2007a56c

000832dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   832dc:	b480      	push	{r7}
   832de:	b085      	sub	sp, #20
   832e0:	af00      	add	r7, sp, #0
   832e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   832e4:	4b27      	ldr	r3, [pc, #156]	; (83384 <prvInsertBlockIntoFreeList+0xa8>)
   832e6:	60fb      	str	r3, [r7, #12]
   832e8:	e002      	b.n	832f0 <prvInsertBlockIntoFreeList+0x14>
   832ea:	68fb      	ldr	r3, [r7, #12]
   832ec:	681b      	ldr	r3, [r3, #0]
   832ee:	60fb      	str	r3, [r7, #12]
   832f0:	68fb      	ldr	r3, [r7, #12]
   832f2:	681a      	ldr	r2, [r3, #0]
   832f4:	687b      	ldr	r3, [r7, #4]
   832f6:	429a      	cmp	r2, r3
   832f8:	d3f7      	bcc.n	832ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   832fa:	68fb      	ldr	r3, [r7, #12]
   832fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   832fe:	68fb      	ldr	r3, [r7, #12]
   83300:	685b      	ldr	r3, [r3, #4]
   83302:	68ba      	ldr	r2, [r7, #8]
   83304:	441a      	add	r2, r3
   83306:	687b      	ldr	r3, [r7, #4]
   83308:	429a      	cmp	r2, r3
   8330a:	d108      	bne.n	8331e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8330c:	68fb      	ldr	r3, [r7, #12]
   8330e:	685a      	ldr	r2, [r3, #4]
   83310:	687b      	ldr	r3, [r7, #4]
   83312:	685b      	ldr	r3, [r3, #4]
   83314:	441a      	add	r2, r3
   83316:	68fb      	ldr	r3, [r7, #12]
   83318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   8331a:	68fb      	ldr	r3, [r7, #12]
   8331c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   8331e:	687b      	ldr	r3, [r7, #4]
   83320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   83322:	687b      	ldr	r3, [r7, #4]
   83324:	685b      	ldr	r3, [r3, #4]
   83326:	68ba      	ldr	r2, [r7, #8]
   83328:	441a      	add	r2, r3
   8332a:	68fb      	ldr	r3, [r7, #12]
   8332c:	681b      	ldr	r3, [r3, #0]
   8332e:	429a      	cmp	r2, r3
   83330:	d118      	bne.n	83364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   83332:	68fb      	ldr	r3, [r7, #12]
   83334:	681a      	ldr	r2, [r3, #0]
   83336:	4b14      	ldr	r3, [pc, #80]	; (83388 <prvInsertBlockIntoFreeList+0xac>)
   83338:	681b      	ldr	r3, [r3, #0]
   8333a:	429a      	cmp	r2, r3
   8333c:	d00d      	beq.n	8335a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8333e:	687b      	ldr	r3, [r7, #4]
   83340:	685a      	ldr	r2, [r3, #4]
   83342:	68fb      	ldr	r3, [r7, #12]
   83344:	681b      	ldr	r3, [r3, #0]
   83346:	685b      	ldr	r3, [r3, #4]
   83348:	441a      	add	r2, r3
   8334a:	687b      	ldr	r3, [r7, #4]
   8334c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8334e:	68fb      	ldr	r3, [r7, #12]
   83350:	681b      	ldr	r3, [r3, #0]
   83352:	681a      	ldr	r2, [r3, #0]
   83354:	687b      	ldr	r3, [r7, #4]
   83356:	601a      	str	r2, [r3, #0]
   83358:	e008      	b.n	8336c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8335a:	4b0b      	ldr	r3, [pc, #44]	; (83388 <prvInsertBlockIntoFreeList+0xac>)
   8335c:	681a      	ldr	r2, [r3, #0]
   8335e:	687b      	ldr	r3, [r7, #4]
   83360:	601a      	str	r2, [r3, #0]
   83362:	e003      	b.n	8336c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   83364:	68fb      	ldr	r3, [r7, #12]
   83366:	681a      	ldr	r2, [r3, #0]
   83368:	687b      	ldr	r3, [r7, #4]
   8336a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   8336c:	68fa      	ldr	r2, [r7, #12]
   8336e:	687b      	ldr	r3, [r7, #4]
   83370:	429a      	cmp	r2, r3
   83372:	d002      	beq.n	8337a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   83374:	68fb      	ldr	r3, [r7, #12]
   83376:	687a      	ldr	r2, [r7, #4]
   83378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   8337a:	3714      	adds	r7, #20
   8337c:	46bd      	mov	sp, r7
   8337e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83382:	4770      	bx	lr
   83384:	2007a558 	.word	0x2007a558
   83388:	2007a560 	.word	0x2007a560

0008338c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   8338c:	b580      	push	{r7, lr}
   8338e:	b084      	sub	sp, #16
   83390:	af00      	add	r7, sp, #0
   83392:	6078      	str	r0, [r7, #4]
   83394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83396:	687b      	ldr	r3, [r7, #4]
   83398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8339a:	68fb      	ldr	r3, [r7, #12]
   8339c:	2b00      	cmp	r3, #0
   8339e:	d102      	bne.n	833a6 <xQueueGenericReset+0x1a>
   833a0:	4b26      	ldr	r3, [pc, #152]	; (8343c <xQueueGenericReset+0xb0>)
   833a2:	4798      	blx	r3
   833a4:	e7fe      	b.n	833a4 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   833a6:	4b26      	ldr	r3, [pc, #152]	; (83440 <xQueueGenericReset+0xb4>)
   833a8:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   833aa:	68fb      	ldr	r3, [r7, #12]
   833ac:	681a      	ldr	r2, [r3, #0]
   833ae:	68fb      	ldr	r3, [r7, #12]
   833b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   833b2:	68f9      	ldr	r1, [r7, #12]
   833b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
   833b6:	fb01 f303 	mul.w	r3, r1, r3
   833ba:	441a      	add	r2, r3
   833bc:	68fb      	ldr	r3, [r7, #12]
   833be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   833c0:	68fb      	ldr	r3, [r7, #12]
   833c2:	2200      	movs	r2, #0
   833c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   833c6:	68fb      	ldr	r3, [r7, #12]
   833c8:	681a      	ldr	r2, [r3, #0]
   833ca:	68fb      	ldr	r3, [r7, #12]
   833cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   833ce:	68fb      	ldr	r3, [r7, #12]
   833d0:	681a      	ldr	r2, [r3, #0]
   833d2:	68fb      	ldr	r3, [r7, #12]
   833d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   833d6:	3b01      	subs	r3, #1
   833d8:	68f9      	ldr	r1, [r7, #12]
   833da:	6c09      	ldr	r1, [r1, #64]	; 0x40
   833dc:	fb01 f303 	mul.w	r3, r1, r3
   833e0:	441a      	add	r2, r3
   833e2:	68fb      	ldr	r3, [r7, #12]
   833e4:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   833e6:	68fb      	ldr	r3, [r7, #12]
   833e8:	f04f 32ff 	mov.w	r2, #4294967295
   833ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   833ee:	68fb      	ldr	r3, [r7, #12]
   833f0:	f04f 32ff 	mov.w	r2, #4294967295
   833f4:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   833f6:	683b      	ldr	r3, [r7, #0]
   833f8:	2b00      	cmp	r3, #0
   833fa:	d10e      	bne.n	8341a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   833fc:	68fb      	ldr	r3, [r7, #12]
   833fe:	691b      	ldr	r3, [r3, #16]
   83400:	2b00      	cmp	r3, #0
   83402:	d014      	beq.n	8342e <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83404:	68fb      	ldr	r3, [r7, #12]
   83406:	3310      	adds	r3, #16
   83408:	4618      	mov	r0, r3
   8340a:	4b0e      	ldr	r3, [pc, #56]	; (83444 <xQueueGenericReset+0xb8>)
   8340c:	4798      	blx	r3
   8340e:	4603      	mov	r3, r0
   83410:	2b01      	cmp	r3, #1
   83412:	d10c      	bne.n	8342e <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   83414:	4b0c      	ldr	r3, [pc, #48]	; (83448 <xQueueGenericReset+0xbc>)
   83416:	4798      	blx	r3
   83418:	e009      	b.n	8342e <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8341a:	68fb      	ldr	r3, [r7, #12]
   8341c:	3310      	adds	r3, #16
   8341e:	4618      	mov	r0, r3
   83420:	4b0a      	ldr	r3, [pc, #40]	; (8344c <xQueueGenericReset+0xc0>)
   83422:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   83424:	68fb      	ldr	r3, [r7, #12]
   83426:	3324      	adds	r3, #36	; 0x24
   83428:	4618      	mov	r0, r3
   8342a:	4b08      	ldr	r3, [pc, #32]	; (8344c <xQueueGenericReset+0xc0>)
   8342c:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   8342e:	4b08      	ldr	r3, [pc, #32]	; (83450 <xQueueGenericReset+0xc4>)
   83430:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   83432:	2301      	movs	r3, #1
}
   83434:	4618      	mov	r0, r3
   83436:	3710      	adds	r7, #16
   83438:	46bd      	mov	sp, r7
   8343a:	bd80      	pop	{r7, pc}
   8343c:	00082ed9 	.word	0x00082ed9
   83440:	00082e5d 	.word	0x00082e5d
   83444:	0008444d 	.word	0x0008444d
   83448:	00082e3d 	.word	0x00082e3d
   8344c:	00082b51 	.word	0x00082b51
   83450:	00082ea1 	.word	0x00082ea1

00083454 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   83454:	b580      	push	{r7, lr}
   83456:	b088      	sub	sp, #32
   83458:	af00      	add	r7, sp, #0
   8345a:	60f8      	str	r0, [r7, #12]
   8345c:	60b9      	str	r1, [r7, #8]
   8345e:	4613      	mov	r3, r2
   83460:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   83462:	2300      	movs	r3, #0
   83464:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   83466:	68fb      	ldr	r3, [r7, #12]
   83468:	2b00      	cmp	r3, #0
   8346a:	d026      	beq.n	834ba <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   8346c:	204c      	movs	r0, #76	; 0x4c
   8346e:	4b18      	ldr	r3, [pc, #96]	; (834d0 <xQueueGenericCreate+0x7c>)
   83470:	4798      	blx	r3
   83472:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   83474:	69bb      	ldr	r3, [r7, #24]
   83476:	2b00      	cmp	r3, #0
   83478:	d01f      	beq.n	834ba <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8347a:	68fb      	ldr	r3, [r7, #12]
   8347c:	68ba      	ldr	r2, [r7, #8]
   8347e:	fb02 f303 	mul.w	r3, r2, r3
   83482:	3301      	adds	r3, #1
   83484:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   83486:	6978      	ldr	r0, [r7, #20]
   83488:	4b11      	ldr	r3, [pc, #68]	; (834d0 <xQueueGenericCreate+0x7c>)
   8348a:	4798      	blx	r3
   8348c:	4602      	mov	r2, r0
   8348e:	69bb      	ldr	r3, [r7, #24]
   83490:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   83492:	69bb      	ldr	r3, [r7, #24]
   83494:	681b      	ldr	r3, [r3, #0]
   83496:	2b00      	cmp	r3, #0
   83498:	d00c      	beq.n	834b4 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8349a:	69bb      	ldr	r3, [r7, #24]
   8349c:	68fa      	ldr	r2, [r7, #12]
   8349e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   834a0:	69bb      	ldr	r3, [r7, #24]
   834a2:	68ba      	ldr	r2, [r7, #8]
   834a4:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   834a6:	69b8      	ldr	r0, [r7, #24]
   834a8:	2101      	movs	r1, #1
   834aa:	4b0a      	ldr	r3, [pc, #40]	; (834d4 <xQueueGenericCreate+0x80>)
   834ac:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   834ae:	69bb      	ldr	r3, [r7, #24]
   834b0:	61fb      	str	r3, [r7, #28]
   834b2:	e002      	b.n	834ba <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   834b4:	69b8      	ldr	r0, [r7, #24]
   834b6:	4b08      	ldr	r3, [pc, #32]	; (834d8 <xQueueGenericCreate+0x84>)
   834b8:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   834ba:	69fb      	ldr	r3, [r7, #28]
   834bc:	2b00      	cmp	r3, #0
   834be:	d102      	bne.n	834c6 <xQueueGenericCreate+0x72>
   834c0:	4b06      	ldr	r3, [pc, #24]	; (834dc <xQueueGenericCreate+0x88>)
   834c2:	4798      	blx	r3
   834c4:	e7fe      	b.n	834c4 <xQueueGenericCreate+0x70>

	return xReturn;
   834c6:	69fb      	ldr	r3, [r7, #28]
}
   834c8:	4618      	mov	r0, r3
   834ca:	3720      	adds	r7, #32
   834cc:	46bd      	mov	sp, r7
   834ce:	bd80      	pop	{r7, pc}
   834d0:	00082ffd 	.word	0x00082ffd
   834d4:	0008338d 	.word	0x0008338d
   834d8:	00083175 	.word	0x00083175
   834dc:	00082ed9 	.word	0x00082ed9

000834e0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   834e0:	b580      	push	{r7, lr}
   834e2:	b08a      	sub	sp, #40	; 0x28
   834e4:	af00      	add	r7, sp, #0
   834e6:	60f8      	str	r0, [r7, #12]
   834e8:	60b9      	str	r1, [r7, #8]
   834ea:	607a      	str	r2, [r7, #4]
   834ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   834ee:	2300      	movs	r3, #0
   834f0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   834f2:	68fb      	ldr	r3, [r7, #12]
   834f4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   834f6:	6a3b      	ldr	r3, [r7, #32]
   834f8:	2b00      	cmp	r3, #0
   834fa:	d102      	bne.n	83502 <xQueueGenericSend+0x22>
   834fc:	4b5b      	ldr	r3, [pc, #364]	; (8366c <xQueueGenericSend+0x18c>)
   834fe:	4798      	blx	r3
   83500:	e7fe      	b.n	83500 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83502:	68bb      	ldr	r3, [r7, #8]
   83504:	2b00      	cmp	r3, #0
   83506:	d103      	bne.n	83510 <xQueueGenericSend+0x30>
   83508:	6a3b      	ldr	r3, [r7, #32]
   8350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8350c:	2b00      	cmp	r3, #0
   8350e:	d101      	bne.n	83514 <xQueueGenericSend+0x34>
   83510:	2301      	movs	r3, #1
   83512:	e000      	b.n	83516 <xQueueGenericSend+0x36>
   83514:	2300      	movs	r3, #0
   83516:	2b00      	cmp	r3, #0
   83518:	d102      	bne.n	83520 <xQueueGenericSend+0x40>
   8351a:	4b54      	ldr	r3, [pc, #336]	; (8366c <xQueueGenericSend+0x18c>)
   8351c:	4798      	blx	r3
   8351e:	e7fe      	b.n	8351e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83520:	683b      	ldr	r3, [r7, #0]
   83522:	2b02      	cmp	r3, #2
   83524:	d103      	bne.n	8352e <xQueueGenericSend+0x4e>
   83526:	6a3b      	ldr	r3, [r7, #32]
   83528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8352a:	2b01      	cmp	r3, #1
   8352c:	d101      	bne.n	83532 <xQueueGenericSend+0x52>
   8352e:	2301      	movs	r3, #1
   83530:	e000      	b.n	83534 <xQueueGenericSend+0x54>
   83532:	2300      	movs	r3, #0
   83534:	2b00      	cmp	r3, #0
   83536:	d102      	bne.n	8353e <xQueueGenericSend+0x5e>
   83538:	4b4c      	ldr	r3, [pc, #304]	; (8366c <xQueueGenericSend+0x18c>)
   8353a:	4798      	blx	r3
   8353c:	e7fe      	b.n	8353c <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   8353e:	4b4c      	ldr	r3, [pc, #304]	; (83670 <xQueueGenericSend+0x190>)
   83540:	4798      	blx	r3
   83542:	4603      	mov	r3, r0
   83544:	2b00      	cmp	r3, #0
   83546:	d102      	bne.n	8354e <xQueueGenericSend+0x6e>
   83548:	687b      	ldr	r3, [r7, #4]
   8354a:	2b00      	cmp	r3, #0
   8354c:	d101      	bne.n	83552 <xQueueGenericSend+0x72>
   8354e:	2301      	movs	r3, #1
   83550:	e000      	b.n	83554 <xQueueGenericSend+0x74>
   83552:	2300      	movs	r3, #0
   83554:	2b00      	cmp	r3, #0
   83556:	d102      	bne.n	8355e <xQueueGenericSend+0x7e>
   83558:	4b44      	ldr	r3, [pc, #272]	; (8366c <xQueueGenericSend+0x18c>)
   8355a:	4798      	blx	r3
   8355c:	e7fe      	b.n	8355c <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8355e:	4b45      	ldr	r3, [pc, #276]	; (83674 <xQueueGenericSend+0x194>)
   83560:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83562:	6a3b      	ldr	r3, [r7, #32]
   83564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83566:	6a3b      	ldr	r3, [r7, #32]
   83568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8356a:	429a      	cmp	r2, r3
   8356c:	d302      	bcc.n	83574 <xQueueGenericSend+0x94>
   8356e:	683b      	ldr	r3, [r7, #0]
   83570:	2b02      	cmp	r3, #2
   83572:	d11d      	bne.n	835b0 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   83574:	6a38      	ldr	r0, [r7, #32]
   83576:	68b9      	ldr	r1, [r7, #8]
   83578:	683a      	ldr	r2, [r7, #0]
   8357a:	4b3f      	ldr	r3, [pc, #252]	; (83678 <xQueueGenericSend+0x198>)
   8357c:	4798      	blx	r3
   8357e:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83580:	6a3b      	ldr	r3, [r7, #32]
   83582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83584:	2b00      	cmp	r3, #0
   83586:	d00a      	beq.n	8359e <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   83588:	6a3b      	ldr	r3, [r7, #32]
   8358a:	3324      	adds	r3, #36	; 0x24
   8358c:	4618      	mov	r0, r3
   8358e:	4b3b      	ldr	r3, [pc, #236]	; (8367c <xQueueGenericSend+0x19c>)
   83590:	4798      	blx	r3
   83592:	4603      	mov	r3, r0
   83594:	2b01      	cmp	r3, #1
   83596:	d107      	bne.n	835a8 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   83598:	4b39      	ldr	r3, [pc, #228]	; (83680 <xQueueGenericSend+0x1a0>)
   8359a:	4798      	blx	r3
   8359c:	e004      	b.n	835a8 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   8359e:	69fb      	ldr	r3, [r7, #28]
   835a0:	2b00      	cmp	r3, #0
   835a2:	d001      	beq.n	835a8 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   835a4:	4b36      	ldr	r3, [pc, #216]	; (83680 <xQueueGenericSend+0x1a0>)
   835a6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   835a8:	4b36      	ldr	r3, [pc, #216]	; (83684 <xQueueGenericSend+0x1a4>)
   835aa:	4798      	blx	r3
				return pdPASS;
   835ac:	2301      	movs	r3, #1
   835ae:	e059      	b.n	83664 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   835b0:	687b      	ldr	r3, [r7, #4]
   835b2:	2b00      	cmp	r3, #0
   835b4:	d103      	bne.n	835be <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   835b6:	4b33      	ldr	r3, [pc, #204]	; (83684 <xQueueGenericSend+0x1a4>)
   835b8:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   835ba:	2300      	movs	r3, #0
   835bc:	e052      	b.n	83664 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   835be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   835c0:	2b00      	cmp	r3, #0
   835c2:	d106      	bne.n	835d2 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   835c4:	f107 0314 	add.w	r3, r7, #20
   835c8:	4618      	mov	r0, r3
   835ca:	4b2f      	ldr	r3, [pc, #188]	; (83688 <xQueueGenericSend+0x1a8>)
   835cc:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   835ce:	2301      	movs	r3, #1
   835d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   835d2:	4b2c      	ldr	r3, [pc, #176]	; (83684 <xQueueGenericSend+0x1a4>)
   835d4:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   835d6:	4b2d      	ldr	r3, [pc, #180]	; (8368c <xQueueGenericSend+0x1ac>)
   835d8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   835da:	4b26      	ldr	r3, [pc, #152]	; (83674 <xQueueGenericSend+0x194>)
   835dc:	4798      	blx	r3
   835de:	6a3b      	ldr	r3, [r7, #32]
   835e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   835e2:	f1b3 3fff 	cmp.w	r3, #4294967295
   835e6:	d102      	bne.n	835ee <xQueueGenericSend+0x10e>
   835e8:	6a3b      	ldr	r3, [r7, #32]
   835ea:	2200      	movs	r2, #0
   835ec:	645a      	str	r2, [r3, #68]	; 0x44
   835ee:	6a3b      	ldr	r3, [r7, #32]
   835f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   835f2:	f1b3 3fff 	cmp.w	r3, #4294967295
   835f6:	d102      	bne.n	835fe <xQueueGenericSend+0x11e>
   835f8:	6a3b      	ldr	r3, [r7, #32]
   835fa:	2200      	movs	r2, #0
   835fc:	649a      	str	r2, [r3, #72]	; 0x48
   835fe:	4b21      	ldr	r3, [pc, #132]	; (83684 <xQueueGenericSend+0x1a4>)
   83600:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83602:	f107 0214 	add.w	r2, r7, #20
   83606:	1d3b      	adds	r3, r7, #4
   83608:	4610      	mov	r0, r2
   8360a:	4619      	mov	r1, r3
   8360c:	4b20      	ldr	r3, [pc, #128]	; (83690 <xQueueGenericSend+0x1b0>)
   8360e:	4798      	blx	r3
   83610:	4603      	mov	r3, r0
   83612:	2b00      	cmp	r3, #0
   83614:	d11e      	bne.n	83654 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   83616:	6a38      	ldr	r0, [r7, #32]
   83618:	4b1e      	ldr	r3, [pc, #120]	; (83694 <xQueueGenericSend+0x1b4>)
   8361a:	4798      	blx	r3
   8361c:	4603      	mov	r3, r0
   8361e:	2b00      	cmp	r3, #0
   83620:	d012      	beq.n	83648 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   83622:	6a3b      	ldr	r3, [r7, #32]
   83624:	f103 0210 	add.w	r2, r3, #16
   83628:	687b      	ldr	r3, [r7, #4]
   8362a:	4610      	mov	r0, r2
   8362c:	4619      	mov	r1, r3
   8362e:	4b1a      	ldr	r3, [pc, #104]	; (83698 <xQueueGenericSend+0x1b8>)
   83630:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   83632:	6a38      	ldr	r0, [r7, #32]
   83634:	4b19      	ldr	r3, [pc, #100]	; (8369c <xQueueGenericSend+0x1bc>)
   83636:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   83638:	4b19      	ldr	r3, [pc, #100]	; (836a0 <xQueueGenericSend+0x1c0>)
   8363a:	4798      	blx	r3
   8363c:	4603      	mov	r3, r0
   8363e:	2b00      	cmp	r3, #0
   83640:	d10f      	bne.n	83662 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   83642:	4b0f      	ldr	r3, [pc, #60]	; (83680 <xQueueGenericSend+0x1a0>)
   83644:	4798      	blx	r3
   83646:	e00c      	b.n	83662 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83648:	6a38      	ldr	r0, [r7, #32]
   8364a:	4b14      	ldr	r3, [pc, #80]	; (8369c <xQueueGenericSend+0x1bc>)
   8364c:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8364e:	4b14      	ldr	r3, [pc, #80]	; (836a0 <xQueueGenericSend+0x1c0>)
   83650:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   83652:	e784      	b.n	8355e <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   83654:	6a38      	ldr	r0, [r7, #32]
   83656:	4b11      	ldr	r3, [pc, #68]	; (8369c <xQueueGenericSend+0x1bc>)
   83658:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8365a:	4b11      	ldr	r3, [pc, #68]	; (836a0 <xQueueGenericSend+0x1c0>)
   8365c:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8365e:	2300      	movs	r3, #0
   83660:	e000      	b.n	83664 <xQueueGenericSend+0x184>
		}
	}
   83662:	e77c      	b.n	8355e <xQueueGenericSend+0x7e>
}
   83664:	4618      	mov	r0, r3
   83666:	3728      	adds	r7, #40	; 0x28
   83668:	46bd      	mov	sp, r7
   8366a:	bd80      	pop	{r7, pc}
   8366c:	00082ed9 	.word	0x00082ed9
   83670:	00084925 	.word	0x00084925
   83674:	00082e5d 	.word	0x00082e5d
   83678:	0008399d 	.word	0x0008399d
   8367c:	0008444d 	.word	0x0008444d
   83680:	00082e3d 	.word	0x00082e3d
   83684:	00082ea1 	.word	0x00082ea1
   83688:	0008450d 	.word	0x0008450d
   8368c:	00083f49 	.word	0x00083f49
   83690:	00084545 	.word	0x00084545
   83694:	00083bad 	.word	0x00083bad
   83698:	0008432d 	.word	0x0008432d
   8369c:	00083ad1 	.word	0x00083ad1
   836a0:	00083f65 	.word	0x00083f65

000836a4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   836a4:	b580      	push	{r7, lr}
   836a6:	b088      	sub	sp, #32
   836a8:	af00      	add	r7, sp, #0
   836aa:	60f8      	str	r0, [r7, #12]
   836ac:	60b9      	str	r1, [r7, #8]
   836ae:	607a      	str	r2, [r7, #4]
   836b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   836b2:	68fb      	ldr	r3, [r7, #12]
   836b4:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   836b6:	69bb      	ldr	r3, [r7, #24]
   836b8:	2b00      	cmp	r3, #0
   836ba:	d102      	bne.n	836c2 <xQueueGenericSendFromISR+0x1e>
   836bc:	4b33      	ldr	r3, [pc, #204]	; (8378c <xQueueGenericSendFromISR+0xe8>)
   836be:	4798      	blx	r3
   836c0:	e7fe      	b.n	836c0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   836c2:	68bb      	ldr	r3, [r7, #8]
   836c4:	2b00      	cmp	r3, #0
   836c6:	d103      	bne.n	836d0 <xQueueGenericSendFromISR+0x2c>
   836c8:	69bb      	ldr	r3, [r7, #24]
   836ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   836cc:	2b00      	cmp	r3, #0
   836ce:	d101      	bne.n	836d4 <xQueueGenericSendFromISR+0x30>
   836d0:	2301      	movs	r3, #1
   836d2:	e000      	b.n	836d6 <xQueueGenericSendFromISR+0x32>
   836d4:	2300      	movs	r3, #0
   836d6:	2b00      	cmp	r3, #0
   836d8:	d102      	bne.n	836e0 <xQueueGenericSendFromISR+0x3c>
   836da:	4b2c      	ldr	r3, [pc, #176]	; (8378c <xQueueGenericSendFromISR+0xe8>)
   836dc:	4798      	blx	r3
   836de:	e7fe      	b.n	836de <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   836e0:	683b      	ldr	r3, [r7, #0]
   836e2:	2b02      	cmp	r3, #2
   836e4:	d103      	bne.n	836ee <xQueueGenericSendFromISR+0x4a>
   836e6:	69bb      	ldr	r3, [r7, #24]
   836e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   836ea:	2b01      	cmp	r3, #1
   836ec:	d101      	bne.n	836f2 <xQueueGenericSendFromISR+0x4e>
   836ee:	2301      	movs	r3, #1
   836f0:	e000      	b.n	836f4 <xQueueGenericSendFromISR+0x50>
   836f2:	2300      	movs	r3, #0
   836f4:	2b00      	cmp	r3, #0
   836f6:	d102      	bne.n	836fe <xQueueGenericSendFromISR+0x5a>
   836f8:	4b24      	ldr	r3, [pc, #144]	; (8378c <xQueueGenericSendFromISR+0xe8>)
   836fa:	4798      	blx	r3
   836fc:	e7fe      	b.n	836fc <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   836fe:	4b24      	ldr	r3, [pc, #144]	; (83790 <xQueueGenericSendFromISR+0xec>)
   83700:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83702:	4b22      	ldr	r3, [pc, #136]	; (8378c <xQueueGenericSendFromISR+0xe8>)
   83704:	4798      	blx	r3
   83706:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83708:	69bb      	ldr	r3, [r7, #24]
   8370a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8370c:	69bb      	ldr	r3, [r7, #24]
   8370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83710:	429a      	cmp	r2, r3
   83712:	d302      	bcc.n	8371a <xQueueGenericSendFromISR+0x76>
   83714:	683b      	ldr	r3, [r7, #0]
   83716:	2b02      	cmp	r3, #2
   83718:	d12d      	bne.n	83776 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   8371a:	69b8      	ldr	r0, [r7, #24]
   8371c:	68b9      	ldr	r1, [r7, #8]
   8371e:	683a      	ldr	r2, [r7, #0]
   83720:	4b1c      	ldr	r3, [pc, #112]	; (83794 <xQueueGenericSendFromISR+0xf0>)
   83722:	4798      	blx	r3
   83724:	4603      	mov	r3, r0
   83726:	2b00      	cmp	r3, #0
   83728:	d005      	beq.n	83736 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   8372a:	687b      	ldr	r3, [r7, #4]
   8372c:	2b00      	cmp	r3, #0
   8372e:	d002      	beq.n	83736 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   83730:	687b      	ldr	r3, [r7, #4]
   83732:	2201      	movs	r2, #1
   83734:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   83736:	69bb      	ldr	r3, [r7, #24]
   83738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8373a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8373e:	d112      	bne.n	83766 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83740:	69bb      	ldr	r3, [r7, #24]
   83742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83744:	2b00      	cmp	r3, #0
   83746:	d013      	beq.n	83770 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83748:	69bb      	ldr	r3, [r7, #24]
   8374a:	3324      	adds	r3, #36	; 0x24
   8374c:	4618      	mov	r0, r3
   8374e:	4b12      	ldr	r3, [pc, #72]	; (83798 <xQueueGenericSendFromISR+0xf4>)
   83750:	4798      	blx	r3
   83752:	4603      	mov	r3, r0
   83754:	2b00      	cmp	r3, #0
   83756:	d00b      	beq.n	83770 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   83758:	687b      	ldr	r3, [r7, #4]
   8375a:	2b00      	cmp	r3, #0
   8375c:	d008      	beq.n	83770 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   8375e:	687b      	ldr	r3, [r7, #4]
   83760:	2201      	movs	r2, #1
   83762:	601a      	str	r2, [r3, #0]
   83764:	e004      	b.n	83770 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   83766:	69bb      	ldr	r3, [r7, #24]
   83768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8376a:	1c5a      	adds	r2, r3, #1
   8376c:	69bb      	ldr	r3, [r7, #24]
   8376e:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   83770:	2301      	movs	r3, #1
   83772:	61fb      	str	r3, [r7, #28]
   83774:	e001      	b.n	8377a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   83776:	2300      	movs	r3, #0
   83778:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8377a:	6978      	ldr	r0, [r7, #20]
   8377c:	4b07      	ldr	r3, [pc, #28]	; (8379c <xQueueGenericSendFromISR+0xf8>)
   8377e:	4798      	blx	r3

	return xReturn;
   83780:	69fb      	ldr	r3, [r7, #28]
}
   83782:	4618      	mov	r0, r3
   83784:	3720      	adds	r7, #32
   83786:	46bd      	mov	sp, r7
   83788:	bd80      	pop	{r7, pc}
   8378a:	bf00      	nop
   8378c:	00082ed9 	.word	0x00082ed9
   83790:	00082fa1 	.word	0x00082fa1
   83794:	0008399d 	.word	0x0008399d
   83798:	0008444d 	.word	0x0008444d
   8379c:	00082eed 	.word	0x00082eed

000837a0 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   837a0:	b580      	push	{r7, lr}
   837a2:	b08a      	sub	sp, #40	; 0x28
   837a4:	af00      	add	r7, sp, #0
   837a6:	60f8      	str	r0, [r7, #12]
   837a8:	60b9      	str	r1, [r7, #8]
   837aa:	607a      	str	r2, [r7, #4]
   837ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   837ae:	2300      	movs	r3, #0
   837b0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   837b2:	68fb      	ldr	r3, [r7, #12]
   837b4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   837b6:	6a3b      	ldr	r3, [r7, #32]
   837b8:	2b00      	cmp	r3, #0
   837ba:	d102      	bne.n	837c2 <xQueueGenericReceive+0x22>
   837bc:	4b67      	ldr	r3, [pc, #412]	; (8395c <xQueueGenericReceive+0x1bc>)
   837be:	4798      	blx	r3
   837c0:	e7fe      	b.n	837c0 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   837c2:	68bb      	ldr	r3, [r7, #8]
   837c4:	2b00      	cmp	r3, #0
   837c6:	d103      	bne.n	837d0 <xQueueGenericReceive+0x30>
   837c8:	6a3b      	ldr	r3, [r7, #32]
   837ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   837cc:	2b00      	cmp	r3, #0
   837ce:	d101      	bne.n	837d4 <xQueueGenericReceive+0x34>
   837d0:	2301      	movs	r3, #1
   837d2:	e000      	b.n	837d6 <xQueueGenericReceive+0x36>
   837d4:	2300      	movs	r3, #0
   837d6:	2b00      	cmp	r3, #0
   837d8:	d102      	bne.n	837e0 <xQueueGenericReceive+0x40>
   837da:	4b60      	ldr	r3, [pc, #384]	; (8395c <xQueueGenericReceive+0x1bc>)
   837dc:	4798      	blx	r3
   837de:	e7fe      	b.n	837de <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   837e0:	4b5f      	ldr	r3, [pc, #380]	; (83960 <xQueueGenericReceive+0x1c0>)
   837e2:	4798      	blx	r3
   837e4:	4603      	mov	r3, r0
   837e6:	2b00      	cmp	r3, #0
   837e8:	d102      	bne.n	837f0 <xQueueGenericReceive+0x50>
   837ea:	687b      	ldr	r3, [r7, #4]
   837ec:	2b00      	cmp	r3, #0
   837ee:	d101      	bne.n	837f4 <xQueueGenericReceive+0x54>
   837f0:	2301      	movs	r3, #1
   837f2:	e000      	b.n	837f6 <xQueueGenericReceive+0x56>
   837f4:	2300      	movs	r3, #0
   837f6:	2b00      	cmp	r3, #0
   837f8:	d102      	bne.n	83800 <xQueueGenericReceive+0x60>
   837fa:	4b58      	ldr	r3, [pc, #352]	; (8395c <xQueueGenericReceive+0x1bc>)
   837fc:	4798      	blx	r3
   837fe:	e7fe      	b.n	837fe <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83800:	4b58      	ldr	r3, [pc, #352]	; (83964 <xQueueGenericReceive+0x1c4>)
   83802:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83804:	6a3b      	ldr	r3, [r7, #32]
   83806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83808:	2b00      	cmp	r3, #0
   8380a:	d03b      	beq.n	83884 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   8380c:	6a3b      	ldr	r3, [r7, #32]
   8380e:	68db      	ldr	r3, [r3, #12]
   83810:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83812:	6a38      	ldr	r0, [r7, #32]
   83814:	68b9      	ldr	r1, [r7, #8]
   83816:	4b54      	ldr	r3, [pc, #336]	; (83968 <xQueueGenericReceive+0x1c8>)
   83818:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8381a:	683b      	ldr	r3, [r7, #0]
   8381c:	2b00      	cmp	r3, #0
   8381e:	d11c      	bne.n	8385a <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83820:	6a3b      	ldr	r3, [r7, #32]
   83822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83824:	1e5a      	subs	r2, r3, #1
   83826:	6a3b      	ldr	r3, [r7, #32]
   83828:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8382a:	6a3b      	ldr	r3, [r7, #32]
   8382c:	681b      	ldr	r3, [r3, #0]
   8382e:	2b00      	cmp	r3, #0
   83830:	d104      	bne.n	8383c <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   83832:	4b4e      	ldr	r3, [pc, #312]	; (8396c <xQueueGenericReceive+0x1cc>)
   83834:	4798      	blx	r3
   83836:	4602      	mov	r2, r0
   83838:	6a3b      	ldr	r3, [r7, #32]
   8383a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8383c:	6a3b      	ldr	r3, [r7, #32]
   8383e:	691b      	ldr	r3, [r3, #16]
   83840:	2b00      	cmp	r3, #0
   83842:	d01b      	beq.n	8387c <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83844:	6a3b      	ldr	r3, [r7, #32]
   83846:	3310      	adds	r3, #16
   83848:	4618      	mov	r0, r3
   8384a:	4b49      	ldr	r3, [pc, #292]	; (83970 <xQueueGenericReceive+0x1d0>)
   8384c:	4798      	blx	r3
   8384e:	4603      	mov	r3, r0
   83850:	2b01      	cmp	r3, #1
   83852:	d113      	bne.n	8387c <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   83854:	4b47      	ldr	r3, [pc, #284]	; (83974 <xQueueGenericReceive+0x1d4>)
   83856:	4798      	blx	r3
   83858:	e010      	b.n	8387c <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   8385a:	6a3b      	ldr	r3, [r7, #32]
   8385c:	69fa      	ldr	r2, [r7, #28]
   8385e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83860:	6a3b      	ldr	r3, [r7, #32]
   83862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83864:	2b00      	cmp	r3, #0
   83866:	d009      	beq.n	8387c <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83868:	6a3b      	ldr	r3, [r7, #32]
   8386a:	3324      	adds	r3, #36	; 0x24
   8386c:	4618      	mov	r0, r3
   8386e:	4b40      	ldr	r3, [pc, #256]	; (83970 <xQueueGenericReceive+0x1d0>)
   83870:	4798      	blx	r3
   83872:	4603      	mov	r3, r0
   83874:	2b00      	cmp	r3, #0
   83876:	d001      	beq.n	8387c <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   83878:	4b3e      	ldr	r3, [pc, #248]	; (83974 <xQueueGenericReceive+0x1d4>)
   8387a:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   8387c:	4b3e      	ldr	r3, [pc, #248]	; (83978 <xQueueGenericReceive+0x1d8>)
   8387e:	4798      	blx	r3
				return pdPASS;
   83880:	2301      	movs	r3, #1
   83882:	e066      	b.n	83952 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83884:	687b      	ldr	r3, [r7, #4]
   83886:	2b00      	cmp	r3, #0
   83888:	d103      	bne.n	83892 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8388a:	4b3b      	ldr	r3, [pc, #236]	; (83978 <xQueueGenericReceive+0x1d8>)
   8388c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8388e:	2300      	movs	r3, #0
   83890:	e05f      	b.n	83952 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83894:	2b00      	cmp	r3, #0
   83896:	d106      	bne.n	838a6 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83898:	f107 0314 	add.w	r3, r7, #20
   8389c:	4618      	mov	r0, r3
   8389e:	4b37      	ldr	r3, [pc, #220]	; (8397c <xQueueGenericReceive+0x1dc>)
   838a0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   838a2:	2301      	movs	r3, #1
   838a4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   838a6:	4b34      	ldr	r3, [pc, #208]	; (83978 <xQueueGenericReceive+0x1d8>)
   838a8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   838aa:	4b35      	ldr	r3, [pc, #212]	; (83980 <xQueueGenericReceive+0x1e0>)
   838ac:	4798      	blx	r3
		prvLockQueue( pxQueue );
   838ae:	4b2d      	ldr	r3, [pc, #180]	; (83964 <xQueueGenericReceive+0x1c4>)
   838b0:	4798      	blx	r3
   838b2:	6a3b      	ldr	r3, [r7, #32]
   838b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   838ba:	d102      	bne.n	838c2 <xQueueGenericReceive+0x122>
   838bc:	6a3b      	ldr	r3, [r7, #32]
   838be:	2200      	movs	r2, #0
   838c0:	645a      	str	r2, [r3, #68]	; 0x44
   838c2:	6a3b      	ldr	r3, [r7, #32]
   838c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   838c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   838ca:	d102      	bne.n	838d2 <xQueueGenericReceive+0x132>
   838cc:	6a3b      	ldr	r3, [r7, #32]
   838ce:	2200      	movs	r2, #0
   838d0:	649a      	str	r2, [r3, #72]	; 0x48
   838d2:	4b29      	ldr	r3, [pc, #164]	; (83978 <xQueueGenericReceive+0x1d8>)
   838d4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   838d6:	f107 0214 	add.w	r2, r7, #20
   838da:	1d3b      	adds	r3, r7, #4
   838dc:	4610      	mov	r0, r2
   838de:	4619      	mov	r1, r3
   838e0:	4b28      	ldr	r3, [pc, #160]	; (83984 <xQueueGenericReceive+0x1e4>)
   838e2:	4798      	blx	r3
   838e4:	4603      	mov	r3, r0
   838e6:	2b00      	cmp	r3, #0
   838e8:	d12b      	bne.n	83942 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   838ea:	6a38      	ldr	r0, [r7, #32]
   838ec:	4b26      	ldr	r3, [pc, #152]	; (83988 <xQueueGenericReceive+0x1e8>)
   838ee:	4798      	blx	r3
   838f0:	4603      	mov	r3, r0
   838f2:	2b00      	cmp	r3, #0
   838f4:	d01f      	beq.n	83936 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   838f6:	6a3b      	ldr	r3, [r7, #32]
   838f8:	681b      	ldr	r3, [r3, #0]
   838fa:	2b00      	cmp	r3, #0
   838fc:	d108      	bne.n	83910 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   838fe:	4b19      	ldr	r3, [pc, #100]	; (83964 <xQueueGenericReceive+0x1c4>)
   83900:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83902:	6a3b      	ldr	r3, [r7, #32]
   83904:	685b      	ldr	r3, [r3, #4]
   83906:	4618      	mov	r0, r3
   83908:	4b20      	ldr	r3, [pc, #128]	; (8398c <xQueueGenericReceive+0x1ec>)
   8390a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   8390c:	4b1a      	ldr	r3, [pc, #104]	; (83978 <xQueueGenericReceive+0x1d8>)
   8390e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83910:	6a3b      	ldr	r3, [r7, #32]
   83912:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83916:	687b      	ldr	r3, [r7, #4]
   83918:	4610      	mov	r0, r2
   8391a:	4619      	mov	r1, r3
   8391c:	4b1c      	ldr	r3, [pc, #112]	; (83990 <xQueueGenericReceive+0x1f0>)
   8391e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83920:	6a38      	ldr	r0, [r7, #32]
   83922:	4b1c      	ldr	r3, [pc, #112]	; (83994 <xQueueGenericReceive+0x1f4>)
   83924:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83926:	4b1c      	ldr	r3, [pc, #112]	; (83998 <xQueueGenericReceive+0x1f8>)
   83928:	4798      	blx	r3
   8392a:	4603      	mov	r3, r0
   8392c:	2b00      	cmp	r3, #0
   8392e:	d10f      	bne.n	83950 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   83930:	4b10      	ldr	r3, [pc, #64]	; (83974 <xQueueGenericReceive+0x1d4>)
   83932:	4798      	blx	r3
   83934:	e00c      	b.n	83950 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83936:	6a38      	ldr	r0, [r7, #32]
   83938:	4b16      	ldr	r3, [pc, #88]	; (83994 <xQueueGenericReceive+0x1f4>)
   8393a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8393c:	4b16      	ldr	r3, [pc, #88]	; (83998 <xQueueGenericReceive+0x1f8>)
   8393e:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   83940:	e75e      	b.n	83800 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   83942:	6a38      	ldr	r0, [r7, #32]
   83944:	4b13      	ldr	r3, [pc, #76]	; (83994 <xQueueGenericReceive+0x1f4>)
   83946:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83948:	4b13      	ldr	r3, [pc, #76]	; (83998 <xQueueGenericReceive+0x1f8>)
   8394a:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   8394c:	2300      	movs	r3, #0
   8394e:	e000      	b.n	83952 <xQueueGenericReceive+0x1b2>
		}
	}
   83950:	e756      	b.n	83800 <xQueueGenericReceive+0x60>
}
   83952:	4618      	mov	r0, r3
   83954:	3728      	adds	r7, #40	; 0x28
   83956:	46bd      	mov	sp, r7
   83958:	bd80      	pop	{r7, pc}
   8395a:	bf00      	nop
   8395c:	00082ed9 	.word	0x00082ed9
   83960:	00084925 	.word	0x00084925
   83964:	00082e5d 	.word	0x00082e5d
   83968:	00083a81 	.word	0x00083a81
   8396c:	00084b39 	.word	0x00084b39
   83970:	0008444d 	.word	0x0008444d
   83974:	00082e3d 	.word	0x00082e3d
   83978:	00082ea1 	.word	0x00082ea1
   8397c:	0008450d 	.word	0x0008450d
   83980:	00083f49 	.word	0x00083f49
   83984:	00084545 	.word	0x00084545
   83988:	00083b79 	.word	0x00083b79
   8398c:	00084961 	.word	0x00084961
   83990:	0008432d 	.word	0x0008432d
   83994:	00083ad1 	.word	0x00083ad1
   83998:	00083f65 	.word	0x00083f65

0008399c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   8399c:	b580      	push	{r7, lr}
   8399e:	b086      	sub	sp, #24
   839a0:	af00      	add	r7, sp, #0
   839a2:	60f8      	str	r0, [r7, #12]
   839a4:	60b9      	str	r1, [r7, #8]
   839a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   839a8:	2300      	movs	r3, #0
   839aa:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   839ac:	68fb      	ldr	r3, [r7, #12]
   839ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839b0:	2b00      	cmp	r3, #0
   839b2:	d10d      	bne.n	839d0 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   839b4:	68fb      	ldr	r3, [r7, #12]
   839b6:	681b      	ldr	r3, [r3, #0]
   839b8:	2b00      	cmp	r3, #0
   839ba:	d152      	bne.n	83a62 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   839bc:	68fb      	ldr	r3, [r7, #12]
   839be:	685b      	ldr	r3, [r3, #4]
   839c0:	4618      	mov	r0, r3
   839c2:	4b2d      	ldr	r3, [pc, #180]	; (83a78 <prvCopyDataToQueue+0xdc>)
   839c4:	4798      	blx	r3
   839c6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   839c8:	68fb      	ldr	r3, [r7, #12]
   839ca:	2200      	movs	r2, #0
   839cc:	605a      	str	r2, [r3, #4]
   839ce:	e048      	b.n	83a62 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   839d0:	687b      	ldr	r3, [r7, #4]
   839d2:	2b00      	cmp	r3, #0
   839d4:	d11a      	bne.n	83a0c <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   839d6:	68fb      	ldr	r3, [r7, #12]
   839d8:	689a      	ldr	r2, [r3, #8]
   839da:	68fb      	ldr	r3, [r7, #12]
   839dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839de:	4610      	mov	r0, r2
   839e0:	68b9      	ldr	r1, [r7, #8]
   839e2:	461a      	mov	r2, r3
   839e4:	4b25      	ldr	r3, [pc, #148]	; (83a7c <prvCopyDataToQueue+0xe0>)
   839e6:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   839e8:	68fb      	ldr	r3, [r7, #12]
   839ea:	689a      	ldr	r2, [r3, #8]
   839ec:	68fb      	ldr	r3, [r7, #12]
   839ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839f0:	441a      	add	r2, r3
   839f2:	68fb      	ldr	r3, [r7, #12]
   839f4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   839f6:	68fb      	ldr	r3, [r7, #12]
   839f8:	689a      	ldr	r2, [r3, #8]
   839fa:	68fb      	ldr	r3, [r7, #12]
   839fc:	685b      	ldr	r3, [r3, #4]
   839fe:	429a      	cmp	r2, r3
   83a00:	d32f      	bcc.n	83a62 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83a02:	68fb      	ldr	r3, [r7, #12]
   83a04:	681a      	ldr	r2, [r3, #0]
   83a06:	68fb      	ldr	r3, [r7, #12]
   83a08:	609a      	str	r2, [r3, #8]
   83a0a:	e02a      	b.n	83a62 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83a0c:	68fb      	ldr	r3, [r7, #12]
   83a0e:	68da      	ldr	r2, [r3, #12]
   83a10:	68fb      	ldr	r3, [r7, #12]
   83a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a14:	4610      	mov	r0, r2
   83a16:	68b9      	ldr	r1, [r7, #8]
   83a18:	461a      	mov	r2, r3
   83a1a:	4b18      	ldr	r3, [pc, #96]	; (83a7c <prvCopyDataToQueue+0xe0>)
   83a1c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83a1e:	68fb      	ldr	r3, [r7, #12]
   83a20:	68da      	ldr	r2, [r3, #12]
   83a22:	68fb      	ldr	r3, [r7, #12]
   83a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a26:	425b      	negs	r3, r3
   83a28:	441a      	add	r2, r3
   83a2a:	68fb      	ldr	r3, [r7, #12]
   83a2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83a2e:	68fb      	ldr	r3, [r7, #12]
   83a30:	68da      	ldr	r2, [r3, #12]
   83a32:	68fb      	ldr	r3, [r7, #12]
   83a34:	681b      	ldr	r3, [r3, #0]
   83a36:	429a      	cmp	r2, r3
   83a38:	d207      	bcs.n	83a4a <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83a3a:	68fb      	ldr	r3, [r7, #12]
   83a3c:	685a      	ldr	r2, [r3, #4]
   83a3e:	68fb      	ldr	r3, [r7, #12]
   83a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a42:	425b      	negs	r3, r3
   83a44:	441a      	add	r2, r3
   83a46:	68fb      	ldr	r3, [r7, #12]
   83a48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   83a4a:	687b      	ldr	r3, [r7, #4]
   83a4c:	2b02      	cmp	r3, #2
   83a4e:	d108      	bne.n	83a62 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83a50:	68fb      	ldr	r3, [r7, #12]
   83a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83a54:	2b00      	cmp	r3, #0
   83a56:	d004      	beq.n	83a62 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   83a58:	68fb      	ldr	r3, [r7, #12]
   83a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83a5c:	1e5a      	subs	r2, r3, #1
   83a5e:	68fb      	ldr	r3, [r7, #12]
   83a60:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   83a62:	68fb      	ldr	r3, [r7, #12]
   83a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83a66:	1c5a      	adds	r2, r3, #1
   83a68:	68fb      	ldr	r3, [r7, #12]
   83a6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83a6c:	697b      	ldr	r3, [r7, #20]
}
   83a6e:	4618      	mov	r0, r3
   83a70:	3718      	adds	r7, #24
   83a72:	46bd      	mov	sp, r7
   83a74:	bd80      	pop	{r7, pc}
   83a76:	bf00      	nop
   83a78:	00084a55 	.word	0x00084a55
   83a7c:	0008660d 	.word	0x0008660d

00083a80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83a80:	b580      	push	{r7, lr}
   83a82:	b082      	sub	sp, #8
   83a84:	af00      	add	r7, sp, #0
   83a86:	6078      	str	r0, [r7, #4]
   83a88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83a8a:	687b      	ldr	r3, [r7, #4]
   83a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a8e:	2b00      	cmp	r3, #0
   83a90:	d019      	beq.n	83ac6 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83a92:	687b      	ldr	r3, [r7, #4]
   83a94:	68da      	ldr	r2, [r3, #12]
   83a96:	687b      	ldr	r3, [r7, #4]
   83a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a9a:	441a      	add	r2, r3
   83a9c:	687b      	ldr	r3, [r7, #4]
   83a9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83aa0:	687b      	ldr	r3, [r7, #4]
   83aa2:	68da      	ldr	r2, [r3, #12]
   83aa4:	687b      	ldr	r3, [r7, #4]
   83aa6:	685b      	ldr	r3, [r3, #4]
   83aa8:	429a      	cmp	r2, r3
   83aaa:	d303      	bcc.n	83ab4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83aac:	687b      	ldr	r3, [r7, #4]
   83aae:	681a      	ldr	r2, [r3, #0]
   83ab0:	687b      	ldr	r3, [r7, #4]
   83ab2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83ab4:	687b      	ldr	r3, [r7, #4]
   83ab6:	68da      	ldr	r2, [r3, #12]
   83ab8:	687b      	ldr	r3, [r7, #4]
   83aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83abc:	6838      	ldr	r0, [r7, #0]
   83abe:	4611      	mov	r1, r2
   83ac0:	461a      	mov	r2, r3
   83ac2:	4b02      	ldr	r3, [pc, #8]	; (83acc <prvCopyDataFromQueue+0x4c>)
   83ac4:	4798      	blx	r3
	}
}
   83ac6:	3708      	adds	r7, #8
   83ac8:	46bd      	mov	sp, r7
   83aca:	bd80      	pop	{r7, pc}
   83acc:	0008660d 	.word	0x0008660d

00083ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83ad0:	b580      	push	{r7, lr}
   83ad2:	b082      	sub	sp, #8
   83ad4:	af00      	add	r7, sp, #0
   83ad6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83ad8:	4b23      	ldr	r3, [pc, #140]	; (83b68 <prvUnlockQueue+0x98>)
   83ada:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83adc:	e014      	b.n	83b08 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83ade:	687b      	ldr	r3, [r7, #4]
   83ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83ae2:	2b00      	cmp	r3, #0
   83ae4:	d00a      	beq.n	83afc <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83ae6:	687b      	ldr	r3, [r7, #4]
   83ae8:	3324      	adds	r3, #36	; 0x24
   83aea:	4618      	mov	r0, r3
   83aec:	4b1f      	ldr	r3, [pc, #124]	; (83b6c <prvUnlockQueue+0x9c>)
   83aee:	4798      	blx	r3
   83af0:	4603      	mov	r3, r0
   83af2:	2b00      	cmp	r3, #0
   83af4:	d003      	beq.n	83afe <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83af6:	4b1e      	ldr	r3, [pc, #120]	; (83b70 <prvUnlockQueue+0xa0>)
   83af8:	4798      	blx	r3
   83afa:	e000      	b.n	83afe <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83afc:	e008      	b.n	83b10 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83afe:	687b      	ldr	r3, [r7, #4]
   83b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b02:	1e5a      	subs	r2, r3, #1
   83b04:	687b      	ldr	r3, [r7, #4]
   83b06:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83b08:	687b      	ldr	r3, [r7, #4]
   83b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b0c:	2b00      	cmp	r3, #0
   83b0e:	dce6      	bgt.n	83ade <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83b10:	687b      	ldr	r3, [r7, #4]
   83b12:	f04f 32ff 	mov.w	r2, #4294967295
   83b16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83b18:	4b16      	ldr	r3, [pc, #88]	; (83b74 <prvUnlockQueue+0xa4>)
   83b1a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83b1c:	4b12      	ldr	r3, [pc, #72]	; (83b68 <prvUnlockQueue+0x98>)
   83b1e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83b20:	e014      	b.n	83b4c <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83b22:	687b      	ldr	r3, [r7, #4]
   83b24:	691b      	ldr	r3, [r3, #16]
   83b26:	2b00      	cmp	r3, #0
   83b28:	d00f      	beq.n	83b4a <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83b2a:	687b      	ldr	r3, [r7, #4]
   83b2c:	3310      	adds	r3, #16
   83b2e:	4618      	mov	r0, r3
   83b30:	4b0e      	ldr	r3, [pc, #56]	; (83b6c <prvUnlockQueue+0x9c>)
   83b32:	4798      	blx	r3
   83b34:	4603      	mov	r3, r0
   83b36:	2b00      	cmp	r3, #0
   83b38:	d001      	beq.n	83b3e <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   83b3a:	4b0d      	ldr	r3, [pc, #52]	; (83b70 <prvUnlockQueue+0xa0>)
   83b3c:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83b3e:	687b      	ldr	r3, [r7, #4]
   83b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83b42:	1e5a      	subs	r2, r3, #1
   83b44:	687b      	ldr	r3, [r7, #4]
   83b46:	645a      	str	r2, [r3, #68]	; 0x44
   83b48:	e000      	b.n	83b4c <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   83b4a:	e003      	b.n	83b54 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83b4c:	687b      	ldr	r3, [r7, #4]
   83b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83b50:	2b00      	cmp	r3, #0
   83b52:	dce6      	bgt.n	83b22 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83b54:	687b      	ldr	r3, [r7, #4]
   83b56:	f04f 32ff 	mov.w	r2, #4294967295
   83b5a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83b5c:	4b05      	ldr	r3, [pc, #20]	; (83b74 <prvUnlockQueue+0xa4>)
   83b5e:	4798      	blx	r3
}
   83b60:	3708      	adds	r7, #8
   83b62:	46bd      	mov	sp, r7
   83b64:	bd80      	pop	{r7, pc}
   83b66:	bf00      	nop
   83b68:	00082e5d 	.word	0x00082e5d
   83b6c:	0008444d 	.word	0x0008444d
   83b70:	000845f5 	.word	0x000845f5
   83b74:	00082ea1 	.word	0x00082ea1

00083b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   83b78:	b580      	push	{r7, lr}
   83b7a:	b084      	sub	sp, #16
   83b7c:	af00      	add	r7, sp, #0
   83b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83b80:	4b08      	ldr	r3, [pc, #32]	; (83ba4 <prvIsQueueEmpty+0x2c>)
   83b82:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83b84:	687b      	ldr	r3, [r7, #4]
   83b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83b88:	2b00      	cmp	r3, #0
   83b8a:	d102      	bne.n	83b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   83b8c:	2301      	movs	r3, #1
   83b8e:	60fb      	str	r3, [r7, #12]
   83b90:	e001      	b.n	83b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   83b92:	2300      	movs	r3, #0
   83b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83b96:	4b04      	ldr	r3, [pc, #16]	; (83ba8 <prvIsQueueEmpty+0x30>)
   83b98:	4798      	blx	r3

	return xReturn;
   83b9a:	68fb      	ldr	r3, [r7, #12]
}
   83b9c:	4618      	mov	r0, r3
   83b9e:	3710      	adds	r7, #16
   83ba0:	46bd      	mov	sp, r7
   83ba2:	bd80      	pop	{r7, pc}
   83ba4:	00082e5d 	.word	0x00082e5d
   83ba8:	00082ea1 	.word	0x00082ea1

00083bac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   83bac:	b580      	push	{r7, lr}
   83bae:	b084      	sub	sp, #16
   83bb0:	af00      	add	r7, sp, #0
   83bb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83bb4:	4b09      	ldr	r3, [pc, #36]	; (83bdc <prvIsQueueFull+0x30>)
   83bb6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   83bb8:	687b      	ldr	r3, [r7, #4]
   83bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83bbc:	687b      	ldr	r3, [r7, #4]
   83bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83bc0:	429a      	cmp	r2, r3
   83bc2:	d102      	bne.n	83bca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   83bc4:	2301      	movs	r3, #1
   83bc6:	60fb      	str	r3, [r7, #12]
   83bc8:	e001      	b.n	83bce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   83bca:	2300      	movs	r3, #0
   83bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83bce:	4b04      	ldr	r3, [pc, #16]	; (83be0 <prvIsQueueFull+0x34>)
   83bd0:	4798      	blx	r3

	return xReturn;
   83bd2:	68fb      	ldr	r3, [r7, #12]
}
   83bd4:	4618      	mov	r0, r3
   83bd6:	3710      	adds	r7, #16
   83bd8:	46bd      	mov	sp, r7
   83bda:	bd80      	pop	{r7, pc}
   83bdc:	00082e5d 	.word	0x00082e5d
   83be0:	00082ea1 	.word	0x00082ea1

00083be4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   83be4:	b580      	push	{r7, lr}
   83be6:	b084      	sub	sp, #16
   83be8:	af00      	add	r7, sp, #0
   83bea:	6078      	str	r0, [r7, #4]
   83bec:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83bee:	687b      	ldr	r3, [r7, #4]
   83bf0:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   83bf2:	4b12      	ldr	r3, [pc, #72]	; (83c3c <vQueueWaitForMessageRestricted+0x58>)
   83bf4:	4798      	blx	r3
   83bf6:	68fb      	ldr	r3, [r7, #12]
   83bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
   83bfe:	d102      	bne.n	83c06 <vQueueWaitForMessageRestricted+0x22>
   83c00:	68fb      	ldr	r3, [r7, #12]
   83c02:	2200      	movs	r2, #0
   83c04:	645a      	str	r2, [r3, #68]	; 0x44
   83c06:	68fb      	ldr	r3, [r7, #12]
   83c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83c0e:	d102      	bne.n	83c16 <vQueueWaitForMessageRestricted+0x32>
   83c10:	68fb      	ldr	r3, [r7, #12]
   83c12:	2200      	movs	r2, #0
   83c14:	649a      	str	r2, [r3, #72]	; 0x48
   83c16:	4b0a      	ldr	r3, [pc, #40]	; (83c40 <vQueueWaitForMessageRestricted+0x5c>)
   83c18:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   83c1a:	68fb      	ldr	r3, [r7, #12]
   83c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83c1e:	2b00      	cmp	r3, #0
   83c20:	d105      	bne.n	83c2e <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83c22:	68fb      	ldr	r3, [r7, #12]
   83c24:	3324      	adds	r3, #36	; 0x24
   83c26:	4618      	mov	r0, r3
   83c28:	6839      	ldr	r1, [r7, #0]
   83c2a:	4b06      	ldr	r3, [pc, #24]	; (83c44 <vQueueWaitForMessageRestricted+0x60>)
   83c2c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   83c2e:	68f8      	ldr	r0, [r7, #12]
   83c30:	4b05      	ldr	r3, [pc, #20]	; (83c48 <vQueueWaitForMessageRestricted+0x64>)
   83c32:	4798      	blx	r3
	}
   83c34:	3710      	adds	r7, #16
   83c36:	46bd      	mov	sp, r7
   83c38:	bd80      	pop	{r7, pc}
   83c3a:	bf00      	nop
   83c3c:	00082e5d 	.word	0x00082e5d
   83c40:	00082ea1 	.word	0x00082ea1
   83c44:	000843cd 	.word	0x000843cd
   83c48:	00083ad1 	.word	0x00083ad1

00083c4c <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83c4c:	b590      	push	{r4, r7, lr}
   83c4e:	b08b      	sub	sp, #44	; 0x2c
   83c50:	af02      	add	r7, sp, #8
   83c52:	60f8      	str	r0, [r7, #12]
   83c54:	60b9      	str	r1, [r7, #8]
   83c56:	603b      	str	r3, [r7, #0]
   83c58:	4613      	mov	r3, r2
   83c5a:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   83c5c:	68fb      	ldr	r3, [r7, #12]
   83c5e:	2b00      	cmp	r3, #0
   83c60:	d102      	bne.n	83c68 <xTaskGenericCreate+0x1c>
   83c62:	4b4b      	ldr	r3, [pc, #300]	; (83d90 <xTaskGenericCreate+0x144>)
   83c64:	4798      	blx	r3
   83c66:	e7fe      	b.n	83c66 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   83c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83c6a:	2b04      	cmp	r3, #4
   83c6c:	d902      	bls.n	83c74 <xTaskGenericCreate+0x28>
   83c6e:	4b48      	ldr	r3, [pc, #288]	; (83d90 <xTaskGenericCreate+0x144>)
   83c70:	4798      	blx	r3
   83c72:	e7fe      	b.n	83c72 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   83c74:	88fb      	ldrh	r3, [r7, #6]
   83c76:	4618      	mov	r0, r3
   83c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   83c7a:	4b46      	ldr	r3, [pc, #280]	; (83d94 <xTaskGenericCreate+0x148>)
   83c7c:	4798      	blx	r3
   83c7e:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   83c80:	69bb      	ldr	r3, [r7, #24]
   83c82:	2b00      	cmp	r3, #0
   83c84:	d06d      	beq.n	83d62 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   83c86:	69bb      	ldr	r3, [r7, #24]
   83c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83c8a:	88fb      	ldrh	r3, [r7, #6]
   83c8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   83c90:	3b01      	subs	r3, #1
   83c92:	009b      	lsls	r3, r3, #2
   83c94:	4413      	add	r3, r2
   83c96:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   83c98:	697b      	ldr	r3, [r7, #20]
   83c9a:	f023 0307 	bic.w	r3, r3, #7
   83c9e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   83ca0:	697b      	ldr	r3, [r7, #20]
   83ca2:	f003 0307 	and.w	r3, r3, #7
   83ca6:	2b00      	cmp	r3, #0
   83ca8:	d002      	beq.n	83cb0 <xTaskGenericCreate+0x64>
   83caa:	4b39      	ldr	r3, [pc, #228]	; (83d90 <xTaskGenericCreate+0x144>)
   83cac:	4798      	blx	r3
   83cae:	e7fe      	b.n	83cae <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   83cb0:	88fb      	ldrh	r3, [r7, #6]
   83cb2:	9300      	str	r3, [sp, #0]
   83cb4:	69b8      	ldr	r0, [r7, #24]
   83cb6:	68b9      	ldr	r1, [r7, #8]
   83cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83cbc:	4c36      	ldr	r4, [pc, #216]	; (83d98 <xTaskGenericCreate+0x14c>)
   83cbe:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   83cc0:	6978      	ldr	r0, [r7, #20]
   83cc2:	68f9      	ldr	r1, [r7, #12]
   83cc4:	683a      	ldr	r2, [r7, #0]
   83cc6:	4b35      	ldr	r3, [pc, #212]	; (83d9c <xTaskGenericCreate+0x150>)
   83cc8:	4798      	blx	r3
   83cca:	4602      	mov	r2, r0
   83ccc:	69bb      	ldr	r3, [r7, #24]
   83cce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   83cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83cd2:	2b00      	cmp	r3, #0
   83cd4:	d002      	beq.n	83cdc <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   83cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83cd8:	69ba      	ldr	r2, [r7, #24]
   83cda:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   83cdc:	4b30      	ldr	r3, [pc, #192]	; (83da0 <xTaskGenericCreate+0x154>)
   83cde:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   83ce0:	4b30      	ldr	r3, [pc, #192]	; (83da4 <xTaskGenericCreate+0x158>)
   83ce2:	681b      	ldr	r3, [r3, #0]
   83ce4:	1c5a      	adds	r2, r3, #1
   83ce6:	4b2f      	ldr	r3, [pc, #188]	; (83da4 <xTaskGenericCreate+0x158>)
   83ce8:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   83cea:	4b2f      	ldr	r3, [pc, #188]	; (83da8 <xTaskGenericCreate+0x15c>)
   83cec:	681b      	ldr	r3, [r3, #0]
   83cee:	2b00      	cmp	r3, #0
   83cf0:	d109      	bne.n	83d06 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   83cf2:	4b2d      	ldr	r3, [pc, #180]	; (83da8 <xTaskGenericCreate+0x15c>)
   83cf4:	69ba      	ldr	r2, [r7, #24]
   83cf6:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   83cf8:	4b2a      	ldr	r3, [pc, #168]	; (83da4 <xTaskGenericCreate+0x158>)
   83cfa:	681b      	ldr	r3, [r3, #0]
   83cfc:	2b01      	cmp	r3, #1
   83cfe:	d10f      	bne.n	83d20 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83d00:	4b2a      	ldr	r3, [pc, #168]	; (83dac <xTaskGenericCreate+0x160>)
   83d02:	4798      	blx	r3
   83d04:	e00c      	b.n	83d20 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   83d06:	4b2a      	ldr	r3, [pc, #168]	; (83db0 <xTaskGenericCreate+0x164>)
   83d08:	681b      	ldr	r3, [r3, #0]
   83d0a:	2b00      	cmp	r3, #0
   83d0c:	d108      	bne.n	83d20 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   83d0e:	4b26      	ldr	r3, [pc, #152]	; (83da8 <xTaskGenericCreate+0x15c>)
   83d10:	681b      	ldr	r3, [r3, #0]
   83d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83d16:	429a      	cmp	r2, r3
   83d18:	d802      	bhi.n	83d20 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   83d1a:	4b23      	ldr	r3, [pc, #140]	; (83da8 <xTaskGenericCreate+0x15c>)
   83d1c:	69ba      	ldr	r2, [r7, #24]
   83d1e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83d20:	4b24      	ldr	r3, [pc, #144]	; (83db4 <xTaskGenericCreate+0x168>)
   83d22:	681b      	ldr	r3, [r3, #0]
   83d24:	1c5a      	adds	r2, r3, #1
   83d26:	4b23      	ldr	r3, [pc, #140]	; (83db4 <xTaskGenericCreate+0x168>)
   83d28:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   83d2a:	69bb      	ldr	r3, [r7, #24]
   83d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83d2e:	2201      	movs	r2, #1
   83d30:	409a      	lsls	r2, r3
   83d32:	4b21      	ldr	r3, [pc, #132]	; (83db8 <xTaskGenericCreate+0x16c>)
   83d34:	681b      	ldr	r3, [r3, #0]
   83d36:	431a      	orrs	r2, r3
   83d38:	4b1f      	ldr	r3, [pc, #124]	; (83db8 <xTaskGenericCreate+0x16c>)
   83d3a:	601a      	str	r2, [r3, #0]
   83d3c:	69bb      	ldr	r3, [r7, #24]
   83d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83d40:	4613      	mov	r3, r2
   83d42:	009b      	lsls	r3, r3, #2
   83d44:	4413      	add	r3, r2
   83d46:	009b      	lsls	r3, r3, #2
   83d48:	4a1c      	ldr	r2, [pc, #112]	; (83dbc <xTaskGenericCreate+0x170>)
   83d4a:	441a      	add	r2, r3
   83d4c:	69bb      	ldr	r3, [r7, #24]
   83d4e:	3304      	adds	r3, #4
   83d50:	4610      	mov	r0, r2
   83d52:	4619      	mov	r1, r3
   83d54:	4b1a      	ldr	r3, [pc, #104]	; (83dc0 <xTaskGenericCreate+0x174>)
   83d56:	4798      	blx	r3

			xReturn = pdPASS;
   83d58:	2301      	movs	r3, #1
   83d5a:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   83d5c:	4b19      	ldr	r3, [pc, #100]	; (83dc4 <xTaskGenericCreate+0x178>)
   83d5e:	4798      	blx	r3
   83d60:	e002      	b.n	83d68 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   83d62:	f04f 33ff 	mov.w	r3, #4294967295
   83d66:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   83d68:	69fb      	ldr	r3, [r7, #28]
   83d6a:	2b01      	cmp	r3, #1
   83d6c:	d10b      	bne.n	83d86 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   83d6e:	4b10      	ldr	r3, [pc, #64]	; (83db0 <xTaskGenericCreate+0x164>)
   83d70:	681b      	ldr	r3, [r3, #0]
   83d72:	2b00      	cmp	r3, #0
   83d74:	d007      	beq.n	83d86 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   83d76:	4b0c      	ldr	r3, [pc, #48]	; (83da8 <xTaskGenericCreate+0x15c>)
   83d78:	681b      	ldr	r3, [r3, #0]
   83d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83d7e:	429a      	cmp	r2, r3
   83d80:	d201      	bcs.n	83d86 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   83d82:	4b11      	ldr	r3, [pc, #68]	; (83dc8 <xTaskGenericCreate+0x17c>)
   83d84:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   83d86:	69fb      	ldr	r3, [r7, #28]
}
   83d88:	4618      	mov	r0, r3
   83d8a:	3724      	adds	r7, #36	; 0x24
   83d8c:	46bd      	mov	sp, r7
   83d8e:	bd90      	pop	{r4, r7, pc}
   83d90:	00082ed9 	.word	0x00082ed9
   83d94:	00084849 	.word	0x00084849
   83d98:	00084635 	.word	0x00084635
   83d9c:	00082cb5 	.word	0x00082cb5
   83da0:	00082e5d 	.word	0x00082e5d
   83da4:	2007a648 	.word	0x2007a648
   83da8:	2007a570 	.word	0x2007a570
   83dac:	000846cd 	.word	0x000846cd
   83db0:	2007a654 	.word	0x2007a654
   83db4:	2007a664 	.word	0x2007a664
   83db8:	2007a650 	.word	0x2007a650
   83dbc:	2007a574 	.word	0x2007a574
   83dc0:	00082ba9 	.word	0x00082ba9
   83dc4:	00082ea1 	.word	0x00082ea1
   83dc8:	00082e3d 	.word	0x00082e3d

00083dcc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   83dcc:	b580      	push	{r7, lr}
   83dce:	b086      	sub	sp, #24
   83dd0:	af00      	add	r7, sp, #0
   83dd2:	6078      	str	r0, [r7, #4]
   83dd4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   83dd6:	2300      	movs	r3, #0
   83dd8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   83dda:	687b      	ldr	r3, [r7, #4]
   83ddc:	2b00      	cmp	r3, #0
   83dde:	d102      	bne.n	83de6 <vTaskDelayUntil+0x1a>
   83de0:	4b2f      	ldr	r3, [pc, #188]	; (83ea0 <vTaskDelayUntil+0xd4>)
   83de2:	4798      	blx	r3
   83de4:	e7fe      	b.n	83de4 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   83de6:	683b      	ldr	r3, [r7, #0]
   83de8:	2b00      	cmp	r3, #0
   83dea:	d102      	bne.n	83df2 <vTaskDelayUntil+0x26>
   83dec:	4b2c      	ldr	r3, [pc, #176]	; (83ea0 <vTaskDelayUntil+0xd4>)
   83dee:	4798      	blx	r3
   83df0:	e7fe      	b.n	83df0 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   83df2:	4b2c      	ldr	r3, [pc, #176]	; (83ea4 <vTaskDelayUntil+0xd8>)
   83df4:	681b      	ldr	r3, [r3, #0]
   83df6:	2b00      	cmp	r3, #0
   83df8:	d002      	beq.n	83e00 <vTaskDelayUntil+0x34>
   83dfa:	4b29      	ldr	r3, [pc, #164]	; (83ea0 <vTaskDelayUntil+0xd4>)
   83dfc:	4798      	blx	r3
   83dfe:	e7fe      	b.n	83dfe <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   83e00:	4b29      	ldr	r3, [pc, #164]	; (83ea8 <vTaskDelayUntil+0xdc>)
   83e02:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   83e04:	4b29      	ldr	r3, [pc, #164]	; (83eac <vTaskDelayUntil+0xe0>)
   83e06:	681b      	ldr	r3, [r3, #0]
   83e08:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   83e0a:	687b      	ldr	r3, [r7, #4]
   83e0c:	681a      	ldr	r2, [r3, #0]
   83e0e:	683b      	ldr	r3, [r7, #0]
   83e10:	4413      	add	r3, r2
   83e12:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   83e14:	687b      	ldr	r3, [r7, #4]
   83e16:	681a      	ldr	r2, [r3, #0]
   83e18:	693b      	ldr	r3, [r7, #16]
   83e1a:	429a      	cmp	r2, r3
   83e1c:	d90b      	bls.n	83e36 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   83e1e:	687b      	ldr	r3, [r7, #4]
   83e20:	681a      	ldr	r2, [r3, #0]
   83e22:	68fb      	ldr	r3, [r7, #12]
   83e24:	429a      	cmp	r2, r3
   83e26:	d911      	bls.n	83e4c <vTaskDelayUntil+0x80>
   83e28:	68fa      	ldr	r2, [r7, #12]
   83e2a:	693b      	ldr	r3, [r7, #16]
   83e2c:	429a      	cmp	r2, r3
   83e2e:	d90d      	bls.n	83e4c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83e30:	2301      	movs	r3, #1
   83e32:	617b      	str	r3, [r7, #20]
   83e34:	e00a      	b.n	83e4c <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   83e36:	687b      	ldr	r3, [r7, #4]
   83e38:	681a      	ldr	r2, [r3, #0]
   83e3a:	68fb      	ldr	r3, [r7, #12]
   83e3c:	429a      	cmp	r2, r3
   83e3e:	d803      	bhi.n	83e48 <vTaskDelayUntil+0x7c>
   83e40:	68fa      	ldr	r2, [r7, #12]
   83e42:	693b      	ldr	r3, [r7, #16]
   83e44:	429a      	cmp	r2, r3
   83e46:	d901      	bls.n	83e4c <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83e48:	2301      	movs	r3, #1
   83e4a:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   83e4c:	687b      	ldr	r3, [r7, #4]
   83e4e:	68fa      	ldr	r2, [r7, #12]
   83e50:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   83e52:	697b      	ldr	r3, [r7, #20]
   83e54:	2b00      	cmp	r3, #0
   83e56:	d017      	beq.n	83e88 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83e58:	4b15      	ldr	r3, [pc, #84]	; (83eb0 <vTaskDelayUntil+0xe4>)
   83e5a:	681b      	ldr	r3, [r3, #0]
   83e5c:	3304      	adds	r3, #4
   83e5e:	4618      	mov	r0, r3
   83e60:	4b14      	ldr	r3, [pc, #80]	; (83eb4 <vTaskDelayUntil+0xe8>)
   83e62:	4798      	blx	r3
   83e64:	4603      	mov	r3, r0
   83e66:	2b00      	cmp	r3, #0
   83e68:	d10b      	bne.n	83e82 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83e6a:	4b11      	ldr	r3, [pc, #68]	; (83eb0 <vTaskDelayUntil+0xe4>)
   83e6c:	681b      	ldr	r3, [r3, #0]
   83e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83e70:	2201      	movs	r2, #1
   83e72:	fa02 f303 	lsl.w	r3, r2, r3
   83e76:	43da      	mvns	r2, r3
   83e78:	4b0f      	ldr	r3, [pc, #60]	; (83eb8 <vTaskDelayUntil+0xec>)
   83e7a:	681b      	ldr	r3, [r3, #0]
   83e7c:	401a      	ands	r2, r3
   83e7e:	4b0e      	ldr	r3, [pc, #56]	; (83eb8 <vTaskDelayUntil+0xec>)
   83e80:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   83e82:	68f8      	ldr	r0, [r7, #12]
   83e84:	4b0d      	ldr	r3, [pc, #52]	; (83ebc <vTaskDelayUntil+0xf0>)
   83e86:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   83e88:	4b0d      	ldr	r3, [pc, #52]	; (83ec0 <vTaskDelayUntil+0xf4>)
   83e8a:	4798      	blx	r3
   83e8c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   83e8e:	68bb      	ldr	r3, [r7, #8]
   83e90:	2b00      	cmp	r3, #0
   83e92:	d101      	bne.n	83e98 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   83e94:	4b0b      	ldr	r3, [pc, #44]	; (83ec4 <vTaskDelayUntil+0xf8>)
   83e96:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   83e98:	3718      	adds	r7, #24
   83e9a:	46bd      	mov	sp, r7
   83e9c:	bd80      	pop	{r7, pc}
   83e9e:	bf00      	nop
   83ea0:	00082ed9 	.word	0x00082ed9
   83ea4:	2007a668 	.word	0x2007a668
   83ea8:	00083f49 	.word	0x00083f49
   83eac:	2007a64c 	.word	0x2007a64c
   83eb0:	2007a570 	.word	0x2007a570
   83eb4:	00082c61 	.word	0x00082c61
   83eb8:	2007a650 	.word	0x2007a650
   83ebc:	000847d9 	.word	0x000847d9
   83ec0:	00083f65 	.word	0x00083f65
   83ec4:	00082e3d 	.word	0x00082e3d

00083ec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   83ec8:	b590      	push	{r4, r7, lr}
   83eca:	b087      	sub	sp, #28
   83ecc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   83ece:	2300      	movs	r3, #0
   83ed0:	9300      	str	r3, [sp, #0]
   83ed2:	2300      	movs	r3, #0
   83ed4:	9301      	str	r3, [sp, #4]
   83ed6:	2300      	movs	r3, #0
   83ed8:	9302      	str	r3, [sp, #8]
   83eda:	2300      	movs	r3, #0
   83edc:	9303      	str	r3, [sp, #12]
   83ede:	4812      	ldr	r0, [pc, #72]	; (83f28 <vTaskStartScheduler+0x60>)
   83ee0:	4912      	ldr	r1, [pc, #72]	; (83f2c <vTaskStartScheduler+0x64>)
   83ee2:	2282      	movs	r2, #130	; 0x82
   83ee4:	2300      	movs	r3, #0
   83ee6:	4c12      	ldr	r4, [pc, #72]	; (83f30 <vTaskStartScheduler+0x68>)
   83ee8:	47a0      	blx	r4
   83eea:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   83eec:	687b      	ldr	r3, [r7, #4]
   83eee:	2b01      	cmp	r3, #1
   83ef0:	d102      	bne.n	83ef8 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   83ef2:	4b10      	ldr	r3, [pc, #64]	; (83f34 <vTaskStartScheduler+0x6c>)
   83ef4:	4798      	blx	r3
   83ef6:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   83ef8:	687b      	ldr	r3, [r7, #4]
   83efa:	2b01      	cmp	r3, #1
   83efc:	d10a      	bne.n	83f14 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   83efe:	4b0e      	ldr	r3, [pc, #56]	; (83f38 <vTaskStartScheduler+0x70>)
   83f00:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   83f02:	4b0e      	ldr	r3, [pc, #56]	; (83f3c <vTaskStartScheduler+0x74>)
   83f04:	2201      	movs	r2, #1
   83f06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   83f08:	4b0d      	ldr	r3, [pc, #52]	; (83f40 <vTaskStartScheduler+0x78>)
   83f0a:	2200      	movs	r2, #0
   83f0c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   83f0e:	4b0d      	ldr	r3, [pc, #52]	; (83f44 <vTaskStartScheduler+0x7c>)
   83f10:	4798      	blx	r3
   83f12:	e005      	b.n	83f20 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   83f14:	687b      	ldr	r3, [r7, #4]
   83f16:	2b00      	cmp	r3, #0
   83f18:	d102      	bne.n	83f20 <vTaskStartScheduler+0x58>
   83f1a:	4b07      	ldr	r3, [pc, #28]	; (83f38 <vTaskStartScheduler+0x70>)
   83f1c:	4798      	blx	r3
   83f1e:	e7fe      	b.n	83f1e <vTaskStartScheduler+0x56>
	}
}
   83f20:	370c      	adds	r7, #12
   83f22:	46bd      	mov	sp, r7
   83f24:	bd90      	pop	{r4, r7, pc}
   83f26:	bf00      	nop
   83f28:	0008460d 	.word	0x0008460d
   83f2c:	000869e4 	.word	0x000869e4
   83f30:	00083c4d 	.word	0x00083c4d
   83f34:	00084b61 	.word	0x00084b61
   83f38:	00082ed9 	.word	0x00082ed9
   83f3c:	2007a654 	.word	0x2007a654
   83f40:	2007a64c 	.word	0x2007a64c
   83f44:	00082d75 	.word	0x00082d75

00083f48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   83f48:	b480      	push	{r7}
   83f4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   83f4c:	4b04      	ldr	r3, [pc, #16]	; (83f60 <vTaskSuspendAll+0x18>)
   83f4e:	681b      	ldr	r3, [r3, #0]
   83f50:	1c5a      	adds	r2, r3, #1
   83f52:	4b03      	ldr	r3, [pc, #12]	; (83f60 <vTaskSuspendAll+0x18>)
   83f54:	601a      	str	r2, [r3, #0]
}
   83f56:	46bd      	mov	sp, r7
   83f58:	f85d 7b04 	ldr.w	r7, [sp], #4
   83f5c:	4770      	bx	lr
   83f5e:	bf00      	nop
   83f60:	2007a668 	.word	0x2007a668

00083f64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   83f64:	b580      	push	{r7, lr}
   83f66:	b082      	sub	sp, #8
   83f68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   83f6a:	2300      	movs	r3, #0
   83f6c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   83f6e:	4b37      	ldr	r3, [pc, #220]	; (8404c <xTaskResumeAll+0xe8>)
   83f70:	681b      	ldr	r3, [r3, #0]
   83f72:	2b00      	cmp	r3, #0
   83f74:	d102      	bne.n	83f7c <xTaskResumeAll+0x18>
   83f76:	4b36      	ldr	r3, [pc, #216]	; (84050 <xTaskResumeAll+0xec>)
   83f78:	4798      	blx	r3
   83f7a:	e7fe      	b.n	83f7a <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   83f7c:	4b35      	ldr	r3, [pc, #212]	; (84054 <xTaskResumeAll+0xf0>)
   83f7e:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   83f80:	4b32      	ldr	r3, [pc, #200]	; (8404c <xTaskResumeAll+0xe8>)
   83f82:	681b      	ldr	r3, [r3, #0]
   83f84:	1e5a      	subs	r2, r3, #1
   83f86:	4b31      	ldr	r3, [pc, #196]	; (8404c <xTaskResumeAll+0xe8>)
   83f88:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83f8a:	4b30      	ldr	r3, [pc, #192]	; (8404c <xTaskResumeAll+0xe8>)
   83f8c:	681b      	ldr	r3, [r3, #0]
   83f8e:	2b00      	cmp	r3, #0
   83f90:	d155      	bne.n	8403e <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   83f92:	4b31      	ldr	r3, [pc, #196]	; (84058 <xTaskResumeAll+0xf4>)
   83f94:	681b      	ldr	r3, [r3, #0]
   83f96:	2b00      	cmp	r3, #0
   83f98:	d051      	beq.n	8403e <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f9a:	e02e      	b.n	83ffa <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   83f9c:	4b2f      	ldr	r3, [pc, #188]	; (8405c <xTaskResumeAll+0xf8>)
   83f9e:	68db      	ldr	r3, [r3, #12]
   83fa0:	68db      	ldr	r3, [r3, #12]
   83fa2:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   83fa4:	683b      	ldr	r3, [r7, #0]
   83fa6:	3318      	adds	r3, #24
   83fa8:	4618      	mov	r0, r3
   83faa:	4b2d      	ldr	r3, [pc, #180]	; (84060 <xTaskResumeAll+0xfc>)
   83fac:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   83fae:	683b      	ldr	r3, [r7, #0]
   83fb0:	3304      	adds	r3, #4
   83fb2:	4618      	mov	r0, r3
   83fb4:	4b2a      	ldr	r3, [pc, #168]	; (84060 <xTaskResumeAll+0xfc>)
   83fb6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   83fb8:	683b      	ldr	r3, [r7, #0]
   83fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83fbc:	2201      	movs	r2, #1
   83fbe:	409a      	lsls	r2, r3
   83fc0:	4b28      	ldr	r3, [pc, #160]	; (84064 <xTaskResumeAll+0x100>)
   83fc2:	681b      	ldr	r3, [r3, #0]
   83fc4:	431a      	orrs	r2, r3
   83fc6:	4b27      	ldr	r3, [pc, #156]	; (84064 <xTaskResumeAll+0x100>)
   83fc8:	601a      	str	r2, [r3, #0]
   83fca:	683b      	ldr	r3, [r7, #0]
   83fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83fce:	4613      	mov	r3, r2
   83fd0:	009b      	lsls	r3, r3, #2
   83fd2:	4413      	add	r3, r2
   83fd4:	009b      	lsls	r3, r3, #2
   83fd6:	4a24      	ldr	r2, [pc, #144]	; (84068 <xTaskResumeAll+0x104>)
   83fd8:	441a      	add	r2, r3
   83fda:	683b      	ldr	r3, [r7, #0]
   83fdc:	3304      	adds	r3, #4
   83fde:	4610      	mov	r0, r2
   83fe0:	4619      	mov	r1, r3
   83fe2:	4b22      	ldr	r3, [pc, #136]	; (8406c <xTaskResumeAll+0x108>)
   83fe4:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83fe6:	683b      	ldr	r3, [r7, #0]
   83fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83fea:	4b21      	ldr	r3, [pc, #132]	; (84070 <xTaskResumeAll+0x10c>)
   83fec:	681b      	ldr	r3, [r3, #0]
   83fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83ff0:	429a      	cmp	r2, r3
   83ff2:	d302      	bcc.n	83ffa <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   83ff4:	4b1f      	ldr	r3, [pc, #124]	; (84074 <xTaskResumeAll+0x110>)
   83ff6:	2201      	movs	r2, #1
   83ff8:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83ffa:	4b18      	ldr	r3, [pc, #96]	; (8405c <xTaskResumeAll+0xf8>)
   83ffc:	681b      	ldr	r3, [r3, #0]
   83ffe:	2b00      	cmp	r3, #0
   84000:	d1cc      	bne.n	83f9c <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   84002:	4b1d      	ldr	r3, [pc, #116]	; (84078 <xTaskResumeAll+0x114>)
   84004:	681b      	ldr	r3, [r3, #0]
   84006:	2b00      	cmp	r3, #0
   84008:	d011      	beq.n	8402e <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   8400a:	e00c      	b.n	84026 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   8400c:	4b1b      	ldr	r3, [pc, #108]	; (8407c <xTaskResumeAll+0x118>)
   8400e:	4798      	blx	r3
   84010:	4603      	mov	r3, r0
   84012:	2b00      	cmp	r3, #0
   84014:	d002      	beq.n	8401c <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   84016:	4b17      	ldr	r3, [pc, #92]	; (84074 <xTaskResumeAll+0x110>)
   84018:	2201      	movs	r2, #1
   8401a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   8401c:	4b16      	ldr	r3, [pc, #88]	; (84078 <xTaskResumeAll+0x114>)
   8401e:	681b      	ldr	r3, [r3, #0]
   84020:	1e5a      	subs	r2, r3, #1
   84022:	4b15      	ldr	r3, [pc, #84]	; (84078 <xTaskResumeAll+0x114>)
   84024:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   84026:	4b14      	ldr	r3, [pc, #80]	; (84078 <xTaskResumeAll+0x114>)
   84028:	681b      	ldr	r3, [r3, #0]
   8402a:	2b00      	cmp	r3, #0
   8402c:	d1ee      	bne.n	8400c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   8402e:	4b11      	ldr	r3, [pc, #68]	; (84074 <xTaskResumeAll+0x110>)
   84030:	681b      	ldr	r3, [r3, #0]
   84032:	2b01      	cmp	r3, #1
   84034:	d103      	bne.n	8403e <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   84036:	2301      	movs	r3, #1
   84038:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   8403a:	4b11      	ldr	r3, [pc, #68]	; (84080 <xTaskResumeAll+0x11c>)
   8403c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8403e:	4b11      	ldr	r3, [pc, #68]	; (84084 <xTaskResumeAll+0x120>)
   84040:	4798      	blx	r3

	return xAlreadyYielded;
   84042:	687b      	ldr	r3, [r7, #4]
}
   84044:	4618      	mov	r0, r3
   84046:	3708      	adds	r7, #8
   84048:	46bd      	mov	sp, r7
   8404a:	bd80      	pop	{r7, pc}
   8404c:	2007a668 	.word	0x2007a668
   84050:	00082ed9 	.word	0x00082ed9
   84054:	00082e5d 	.word	0x00082e5d
   84058:	2007a648 	.word	0x2007a648
   8405c:	2007a608 	.word	0x2007a608
   84060:	00082c61 	.word	0x00082c61
   84064:	2007a650 	.word	0x2007a650
   84068:	2007a574 	.word	0x2007a574
   8406c:	00082ba9 	.word	0x00082ba9
   84070:	2007a570 	.word	0x2007a570
   84074:	2007a65c 	.word	0x2007a65c
   84078:	2007a658 	.word	0x2007a658
   8407c:	000840b5 	.word	0x000840b5
   84080:	00082e3d 	.word	0x00082e3d
   84084:	00082ea1 	.word	0x00082ea1

00084088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   84088:	b580      	push	{r7, lr}
   8408a:	b082      	sub	sp, #8
   8408c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8408e:	4b06      	ldr	r3, [pc, #24]	; (840a8 <xTaskGetTickCount+0x20>)
   84090:	4798      	blx	r3
	{
		xTicks = xTickCount;
   84092:	4b06      	ldr	r3, [pc, #24]	; (840ac <xTaskGetTickCount+0x24>)
   84094:	681b      	ldr	r3, [r3, #0]
   84096:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   84098:	4b05      	ldr	r3, [pc, #20]	; (840b0 <xTaskGetTickCount+0x28>)
   8409a:	4798      	blx	r3

	return xTicks;
   8409c:	687b      	ldr	r3, [r7, #4]
}
   8409e:	4618      	mov	r0, r3
   840a0:	3708      	adds	r7, #8
   840a2:	46bd      	mov	sp, r7
   840a4:	bd80      	pop	{r7, pc}
   840a6:	bf00      	nop
   840a8:	00082e5d 	.word	0x00082e5d
   840ac:	2007a64c 	.word	0x2007a64c
   840b0:	00082ea1 	.word	0x00082ea1

000840b4 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   840b4:	b580      	push	{r7, lr}
   840b6:	b086      	sub	sp, #24
   840b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   840ba:	2300      	movs	r3, #0
   840bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   840be:	4b4d      	ldr	r3, [pc, #308]	; (841f4 <xTaskIncrementTick+0x140>)
   840c0:	681b      	ldr	r3, [r3, #0]
   840c2:	2b00      	cmp	r3, #0
   840c4:	f040 8086 	bne.w	841d4 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   840c8:	4b4b      	ldr	r3, [pc, #300]	; (841f8 <xTaskIncrementTick+0x144>)
   840ca:	681b      	ldr	r3, [r3, #0]
   840cc:	1c5a      	adds	r2, r3, #1
   840ce:	4b4a      	ldr	r3, [pc, #296]	; (841f8 <xTaskIncrementTick+0x144>)
   840d0:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   840d2:	4b49      	ldr	r3, [pc, #292]	; (841f8 <xTaskIncrementTick+0x144>)
   840d4:	681b      	ldr	r3, [r3, #0]
   840d6:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   840d8:	693b      	ldr	r3, [r7, #16]
   840da:	2b00      	cmp	r3, #0
   840dc:	d118      	bne.n	84110 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   840de:	4b47      	ldr	r3, [pc, #284]	; (841fc <xTaskIncrementTick+0x148>)
   840e0:	681b      	ldr	r3, [r3, #0]
   840e2:	681b      	ldr	r3, [r3, #0]
   840e4:	2b00      	cmp	r3, #0
   840e6:	d002      	beq.n	840ee <xTaskIncrementTick+0x3a>
   840e8:	4b45      	ldr	r3, [pc, #276]	; (84200 <xTaskIncrementTick+0x14c>)
   840ea:	4798      	blx	r3
   840ec:	e7fe      	b.n	840ec <xTaskIncrementTick+0x38>
   840ee:	4b43      	ldr	r3, [pc, #268]	; (841fc <xTaskIncrementTick+0x148>)
   840f0:	681b      	ldr	r3, [r3, #0]
   840f2:	60fb      	str	r3, [r7, #12]
   840f4:	4b43      	ldr	r3, [pc, #268]	; (84204 <xTaskIncrementTick+0x150>)
   840f6:	681a      	ldr	r2, [r3, #0]
   840f8:	4b40      	ldr	r3, [pc, #256]	; (841fc <xTaskIncrementTick+0x148>)
   840fa:	601a      	str	r2, [r3, #0]
   840fc:	4b41      	ldr	r3, [pc, #260]	; (84204 <xTaskIncrementTick+0x150>)
   840fe:	68fa      	ldr	r2, [r7, #12]
   84100:	601a      	str	r2, [r3, #0]
   84102:	4b41      	ldr	r3, [pc, #260]	; (84208 <xTaskIncrementTick+0x154>)
   84104:	681b      	ldr	r3, [r3, #0]
   84106:	1c5a      	adds	r2, r3, #1
   84108:	4b3f      	ldr	r3, [pc, #252]	; (84208 <xTaskIncrementTick+0x154>)
   8410a:	601a      	str	r2, [r3, #0]
   8410c:	4b3f      	ldr	r3, [pc, #252]	; (8420c <xTaskIncrementTick+0x158>)
   8410e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   84110:	4b3f      	ldr	r3, [pc, #252]	; (84210 <xTaskIncrementTick+0x15c>)
   84112:	681b      	ldr	r3, [r3, #0]
   84114:	693a      	ldr	r2, [r7, #16]
   84116:	429a      	cmp	r2, r3
   84118:	d34d      	bcc.n	841b6 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8411a:	4b38      	ldr	r3, [pc, #224]	; (841fc <xTaskIncrementTick+0x148>)
   8411c:	681b      	ldr	r3, [r3, #0]
   8411e:	681b      	ldr	r3, [r3, #0]
   84120:	2b00      	cmp	r3, #0
   84122:	d101      	bne.n	84128 <xTaskIncrementTick+0x74>
   84124:	2301      	movs	r3, #1
   84126:	e000      	b.n	8412a <xTaskIncrementTick+0x76>
   84128:	2300      	movs	r3, #0
   8412a:	2b00      	cmp	r3, #0
   8412c:	d004      	beq.n	84138 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   8412e:	4b38      	ldr	r3, [pc, #224]	; (84210 <xTaskIncrementTick+0x15c>)
   84130:	f04f 32ff 	mov.w	r2, #4294967295
   84134:	601a      	str	r2, [r3, #0]
						break;
   84136:	e03e      	b.n	841b6 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84138:	4b30      	ldr	r3, [pc, #192]	; (841fc <xTaskIncrementTick+0x148>)
   8413a:	681b      	ldr	r3, [r3, #0]
   8413c:	68db      	ldr	r3, [r3, #12]
   8413e:	68db      	ldr	r3, [r3, #12]
   84140:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   84142:	68bb      	ldr	r3, [r7, #8]
   84144:	685b      	ldr	r3, [r3, #4]
   84146:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   84148:	693a      	ldr	r2, [r7, #16]
   8414a:	687b      	ldr	r3, [r7, #4]
   8414c:	429a      	cmp	r2, r3
   8414e:	d203      	bcs.n	84158 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   84150:	4b2f      	ldr	r3, [pc, #188]	; (84210 <xTaskIncrementTick+0x15c>)
   84152:	687a      	ldr	r2, [r7, #4]
   84154:	601a      	str	r2, [r3, #0]
							break;
   84156:	e02e      	b.n	841b6 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84158:	68bb      	ldr	r3, [r7, #8]
   8415a:	3304      	adds	r3, #4
   8415c:	4618      	mov	r0, r3
   8415e:	4b2d      	ldr	r3, [pc, #180]	; (84214 <xTaskIncrementTick+0x160>)
   84160:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   84162:	68bb      	ldr	r3, [r7, #8]
   84164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84166:	2b00      	cmp	r3, #0
   84168:	d004      	beq.n	84174 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8416a:	68bb      	ldr	r3, [r7, #8]
   8416c:	3318      	adds	r3, #24
   8416e:	4618      	mov	r0, r3
   84170:	4b28      	ldr	r3, [pc, #160]	; (84214 <xTaskIncrementTick+0x160>)
   84172:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   84174:	68bb      	ldr	r3, [r7, #8]
   84176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84178:	2201      	movs	r2, #1
   8417a:	409a      	lsls	r2, r3
   8417c:	4b26      	ldr	r3, [pc, #152]	; (84218 <xTaskIncrementTick+0x164>)
   8417e:	681b      	ldr	r3, [r3, #0]
   84180:	431a      	orrs	r2, r3
   84182:	4b25      	ldr	r3, [pc, #148]	; (84218 <xTaskIncrementTick+0x164>)
   84184:	601a      	str	r2, [r3, #0]
   84186:	68bb      	ldr	r3, [r7, #8]
   84188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8418a:	4613      	mov	r3, r2
   8418c:	009b      	lsls	r3, r3, #2
   8418e:	4413      	add	r3, r2
   84190:	009b      	lsls	r3, r3, #2
   84192:	4a22      	ldr	r2, [pc, #136]	; (8421c <xTaskIncrementTick+0x168>)
   84194:	441a      	add	r2, r3
   84196:	68bb      	ldr	r3, [r7, #8]
   84198:	3304      	adds	r3, #4
   8419a:	4610      	mov	r0, r2
   8419c:	4619      	mov	r1, r3
   8419e:	4b20      	ldr	r3, [pc, #128]	; (84220 <xTaskIncrementTick+0x16c>)
   841a0:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   841a2:	68bb      	ldr	r3, [r7, #8]
   841a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   841a6:	4b1f      	ldr	r3, [pc, #124]	; (84224 <xTaskIncrementTick+0x170>)
   841a8:	681b      	ldr	r3, [r3, #0]
   841aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   841ac:	429a      	cmp	r2, r3
   841ae:	d301      	bcc.n	841b4 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   841b0:	2301      	movs	r3, #1
   841b2:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   841b4:	e7b1      	b.n	8411a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   841b6:	4b1b      	ldr	r3, [pc, #108]	; (84224 <xTaskIncrementTick+0x170>)
   841b8:	681b      	ldr	r3, [r3, #0]
   841ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   841bc:	4917      	ldr	r1, [pc, #92]	; (8421c <xTaskIncrementTick+0x168>)
   841be:	4613      	mov	r3, r2
   841c0:	009b      	lsls	r3, r3, #2
   841c2:	4413      	add	r3, r2
   841c4:	009b      	lsls	r3, r3, #2
   841c6:	440b      	add	r3, r1
   841c8:	681b      	ldr	r3, [r3, #0]
   841ca:	2b01      	cmp	r3, #1
   841cc:	d907      	bls.n	841de <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   841ce:	2301      	movs	r3, #1
   841d0:	617b      	str	r3, [r7, #20]
   841d2:	e004      	b.n	841de <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   841d4:	4b14      	ldr	r3, [pc, #80]	; (84228 <xTaskIncrementTick+0x174>)
   841d6:	681b      	ldr	r3, [r3, #0]
   841d8:	1c5a      	adds	r2, r3, #1
   841da:	4b13      	ldr	r3, [pc, #76]	; (84228 <xTaskIncrementTick+0x174>)
   841dc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   841de:	4b13      	ldr	r3, [pc, #76]	; (8422c <xTaskIncrementTick+0x178>)
   841e0:	681b      	ldr	r3, [r3, #0]
   841e2:	2b00      	cmp	r3, #0
   841e4:	d001      	beq.n	841ea <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   841e6:	2301      	movs	r3, #1
   841e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   841ea:	697b      	ldr	r3, [r7, #20]
}
   841ec:	4618      	mov	r0, r3
   841ee:	3718      	adds	r7, #24
   841f0:	46bd      	mov	sp, r7
   841f2:	bd80      	pop	{r7, pc}
   841f4:	2007a668 	.word	0x2007a668
   841f8:	2007a64c 	.word	0x2007a64c
   841fc:	2007a600 	.word	0x2007a600
   84200:	00082ed9 	.word	0x00082ed9
   84204:	2007a604 	.word	0x2007a604
   84208:	2007a660 	.word	0x2007a660
   8420c:	000848dd 	.word	0x000848dd
   84210:	2007000c 	.word	0x2007000c
   84214:	00082c61 	.word	0x00082c61
   84218:	2007a650 	.word	0x2007a650
   8421c:	2007a574 	.word	0x2007a574
   84220:	00082ba9 	.word	0x00082ba9
   84224:	2007a570 	.word	0x2007a570
   84228:	2007a658 	.word	0x2007a658
   8422c:	2007a65c 	.word	0x2007a65c

00084230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   84230:	b580      	push	{r7, lr}
   84232:	b084      	sub	sp, #16
   84234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   84236:	4b34      	ldr	r3, [pc, #208]	; (84308 <vTaskSwitchContext+0xd8>)
   84238:	681b      	ldr	r3, [r3, #0]
   8423a:	2b00      	cmp	r3, #0
   8423c:	d003      	beq.n	84246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   8423e:	4b33      	ldr	r3, [pc, #204]	; (8430c <vTaskSwitchContext+0xdc>)
   84240:	2201      	movs	r2, #1
   84242:	601a      	str	r2, [r3, #0]
   84244:	e05c      	b.n	84300 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   84246:	4b31      	ldr	r3, [pc, #196]	; (8430c <vTaskSwitchContext+0xdc>)
   84248:	2200      	movs	r2, #0
   8424a:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   8424c:	4b30      	ldr	r3, [pc, #192]	; (84310 <vTaskSwitchContext+0xe0>)
   8424e:	681b      	ldr	r3, [r3, #0]
   84250:	681a      	ldr	r2, [r3, #0]
   84252:	4b2f      	ldr	r3, [pc, #188]	; (84310 <vTaskSwitchContext+0xe0>)
   84254:	681b      	ldr	r3, [r3, #0]
   84256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84258:	429a      	cmp	r2, r3
   8425a:	d808      	bhi.n	8426e <vTaskSwitchContext+0x3e>
   8425c:	4b2c      	ldr	r3, [pc, #176]	; (84310 <vTaskSwitchContext+0xe0>)
   8425e:	681a      	ldr	r2, [r3, #0]
   84260:	4b2b      	ldr	r3, [pc, #172]	; (84310 <vTaskSwitchContext+0xe0>)
   84262:	681b      	ldr	r3, [r3, #0]
   84264:	3334      	adds	r3, #52	; 0x34
   84266:	4610      	mov	r0, r2
   84268:	4619      	mov	r1, r3
   8426a:	4b2a      	ldr	r3, [pc, #168]	; (84314 <vTaskSwitchContext+0xe4>)
   8426c:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   8426e:	4b28      	ldr	r3, [pc, #160]	; (84310 <vTaskSwitchContext+0xe0>)
   84270:	681b      	ldr	r3, [r3, #0]
   84272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84274:	4618      	mov	r0, r3
   84276:	4928      	ldr	r1, [pc, #160]	; (84318 <vTaskSwitchContext+0xe8>)
   84278:	2214      	movs	r2, #20
   8427a:	4b28      	ldr	r3, [pc, #160]	; (8431c <vTaskSwitchContext+0xec>)
   8427c:	4798      	blx	r3
   8427e:	4603      	mov	r3, r0
   84280:	2b00      	cmp	r3, #0
   84282:	d008      	beq.n	84296 <vTaskSwitchContext+0x66>
   84284:	4b22      	ldr	r3, [pc, #136]	; (84310 <vTaskSwitchContext+0xe0>)
   84286:	681a      	ldr	r2, [r3, #0]
   84288:	4b21      	ldr	r3, [pc, #132]	; (84310 <vTaskSwitchContext+0xe0>)
   8428a:	681b      	ldr	r3, [r3, #0]
   8428c:	3334      	adds	r3, #52	; 0x34
   8428e:	4610      	mov	r0, r2
   84290:	4619      	mov	r1, r3
   84292:	4b20      	ldr	r3, [pc, #128]	; (84314 <vTaskSwitchContext+0xe4>)
   84294:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   84296:	4b22      	ldr	r3, [pc, #136]	; (84320 <vTaskSwitchContext+0xf0>)
   84298:	681b      	ldr	r3, [r3, #0]
   8429a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   8429c:	687b      	ldr	r3, [r7, #4]
   8429e:	fab3 f383 	clz	r3, r3
   842a2:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   842a4:	78fb      	ldrb	r3, [r7, #3]
   842a6:	f1c3 031f 	rsb	r3, r3, #31
   842aa:	60fb      	str	r3, [r7, #12]
   842ac:	491d      	ldr	r1, [pc, #116]	; (84324 <vTaskSwitchContext+0xf4>)
   842ae:	68fa      	ldr	r2, [r7, #12]
   842b0:	4613      	mov	r3, r2
   842b2:	009b      	lsls	r3, r3, #2
   842b4:	4413      	add	r3, r2
   842b6:	009b      	lsls	r3, r3, #2
   842b8:	440b      	add	r3, r1
   842ba:	681b      	ldr	r3, [r3, #0]
   842bc:	2b00      	cmp	r3, #0
   842be:	d102      	bne.n	842c6 <vTaskSwitchContext+0x96>
   842c0:	4b19      	ldr	r3, [pc, #100]	; (84328 <vTaskSwitchContext+0xf8>)
   842c2:	4798      	blx	r3
   842c4:	e7fe      	b.n	842c4 <vTaskSwitchContext+0x94>
   842c6:	68fa      	ldr	r2, [r7, #12]
   842c8:	4613      	mov	r3, r2
   842ca:	009b      	lsls	r3, r3, #2
   842cc:	4413      	add	r3, r2
   842ce:	009b      	lsls	r3, r3, #2
   842d0:	4a14      	ldr	r2, [pc, #80]	; (84324 <vTaskSwitchContext+0xf4>)
   842d2:	4413      	add	r3, r2
   842d4:	60bb      	str	r3, [r7, #8]
   842d6:	68bb      	ldr	r3, [r7, #8]
   842d8:	685b      	ldr	r3, [r3, #4]
   842da:	685a      	ldr	r2, [r3, #4]
   842dc:	68bb      	ldr	r3, [r7, #8]
   842de:	605a      	str	r2, [r3, #4]
   842e0:	68bb      	ldr	r3, [r7, #8]
   842e2:	685a      	ldr	r2, [r3, #4]
   842e4:	68bb      	ldr	r3, [r7, #8]
   842e6:	3308      	adds	r3, #8
   842e8:	429a      	cmp	r2, r3
   842ea:	d104      	bne.n	842f6 <vTaskSwitchContext+0xc6>
   842ec:	68bb      	ldr	r3, [r7, #8]
   842ee:	685b      	ldr	r3, [r3, #4]
   842f0:	685a      	ldr	r2, [r3, #4]
   842f2:	68bb      	ldr	r3, [r7, #8]
   842f4:	605a      	str	r2, [r3, #4]
   842f6:	68bb      	ldr	r3, [r7, #8]
   842f8:	685b      	ldr	r3, [r3, #4]
   842fa:	68da      	ldr	r2, [r3, #12]
   842fc:	4b04      	ldr	r3, [pc, #16]	; (84310 <vTaskSwitchContext+0xe0>)
   842fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   84300:	3710      	adds	r7, #16
   84302:	46bd      	mov	sp, r7
   84304:	bd80      	pop	{r7, pc}
   84306:	bf00      	nop
   84308:	2007a668 	.word	0x2007a668
   8430c:	2007a65c 	.word	0x2007a65c
   84310:	2007a570 	.word	0x2007a570
   84314:	00085b5d 	.word	0x00085b5d
   84318:	000869ec 	.word	0x000869ec
   8431c:	000865a5 	.word	0x000865a5
   84320:	2007a650 	.word	0x2007a650
   84324:	2007a574 	.word	0x2007a574
   84328:	00082ed9 	.word	0x00082ed9

0008432c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   8432c:	b580      	push	{r7, lr}
   8432e:	b084      	sub	sp, #16
   84330:	af00      	add	r7, sp, #0
   84332:	6078      	str	r0, [r7, #4]
   84334:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   84336:	687b      	ldr	r3, [r7, #4]
   84338:	2b00      	cmp	r3, #0
   8433a:	d102      	bne.n	84342 <vTaskPlaceOnEventList+0x16>
   8433c:	4b1a      	ldr	r3, [pc, #104]	; (843a8 <vTaskPlaceOnEventList+0x7c>)
   8433e:	4798      	blx	r3
   84340:	e7fe      	b.n	84340 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84342:	4b1a      	ldr	r3, [pc, #104]	; (843ac <vTaskPlaceOnEventList+0x80>)
   84344:	681b      	ldr	r3, [r3, #0]
   84346:	3318      	adds	r3, #24
   84348:	6878      	ldr	r0, [r7, #4]
   8434a:	4619      	mov	r1, r3
   8434c:	4b18      	ldr	r3, [pc, #96]	; (843b0 <vTaskPlaceOnEventList+0x84>)
   8434e:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84350:	4b16      	ldr	r3, [pc, #88]	; (843ac <vTaskPlaceOnEventList+0x80>)
   84352:	681b      	ldr	r3, [r3, #0]
   84354:	3304      	adds	r3, #4
   84356:	4618      	mov	r0, r3
   84358:	4b16      	ldr	r3, [pc, #88]	; (843b4 <vTaskPlaceOnEventList+0x88>)
   8435a:	4798      	blx	r3
   8435c:	4603      	mov	r3, r0
   8435e:	2b00      	cmp	r3, #0
   84360:	d10b      	bne.n	8437a <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84362:	4b12      	ldr	r3, [pc, #72]	; (843ac <vTaskPlaceOnEventList+0x80>)
   84364:	681b      	ldr	r3, [r3, #0]
   84366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84368:	2201      	movs	r2, #1
   8436a:	fa02 f303 	lsl.w	r3, r2, r3
   8436e:	43da      	mvns	r2, r3
   84370:	4b11      	ldr	r3, [pc, #68]	; (843b8 <vTaskPlaceOnEventList+0x8c>)
   84372:	681b      	ldr	r3, [r3, #0]
   84374:	401a      	ands	r2, r3
   84376:	4b10      	ldr	r3, [pc, #64]	; (843b8 <vTaskPlaceOnEventList+0x8c>)
   84378:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8437a:	683b      	ldr	r3, [r7, #0]
   8437c:	f1b3 3fff 	cmp.w	r3, #4294967295
   84380:	d107      	bne.n	84392 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84382:	4b0a      	ldr	r3, [pc, #40]	; (843ac <vTaskPlaceOnEventList+0x80>)
   84384:	681b      	ldr	r3, [r3, #0]
   84386:	3304      	adds	r3, #4
   84388:	480c      	ldr	r0, [pc, #48]	; (843bc <vTaskPlaceOnEventList+0x90>)
   8438a:	4619      	mov	r1, r3
   8438c:	4b0c      	ldr	r3, [pc, #48]	; (843c0 <vTaskPlaceOnEventList+0x94>)
   8438e:	4798      	blx	r3
   84390:	e007      	b.n	843a2 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   84392:	4b0c      	ldr	r3, [pc, #48]	; (843c4 <vTaskPlaceOnEventList+0x98>)
   84394:	681a      	ldr	r2, [r3, #0]
   84396:	683b      	ldr	r3, [r7, #0]
   84398:	4413      	add	r3, r2
   8439a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8439c:	68f8      	ldr	r0, [r7, #12]
   8439e:	4b0a      	ldr	r3, [pc, #40]	; (843c8 <vTaskPlaceOnEventList+0x9c>)
   843a0:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   843a2:	3710      	adds	r7, #16
   843a4:	46bd      	mov	sp, r7
   843a6:	bd80      	pop	{r7, pc}
   843a8:	00082ed9 	.word	0x00082ed9
   843ac:	2007a570 	.word	0x2007a570
   843b0:	00082bf1 	.word	0x00082bf1
   843b4:	00082c61 	.word	0x00082c61
   843b8:	2007a650 	.word	0x2007a650
   843bc:	2007a634 	.word	0x2007a634
   843c0:	00082ba9 	.word	0x00082ba9
   843c4:	2007a64c 	.word	0x2007a64c
   843c8:	000847d9 	.word	0x000847d9

000843cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   843cc:	b580      	push	{r7, lr}
   843ce:	b084      	sub	sp, #16
   843d0:	af00      	add	r7, sp, #0
   843d2:	6078      	str	r0, [r7, #4]
   843d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   843d6:	687b      	ldr	r3, [r7, #4]
   843d8:	2b00      	cmp	r3, #0
   843da:	d102      	bne.n	843e2 <vTaskPlaceOnEventListRestricted+0x16>
   843dc:	4b14      	ldr	r3, [pc, #80]	; (84430 <vTaskPlaceOnEventListRestricted+0x64>)
   843de:	4798      	blx	r3
   843e0:	e7fe      	b.n	843e0 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   843e2:	4b14      	ldr	r3, [pc, #80]	; (84434 <vTaskPlaceOnEventListRestricted+0x68>)
   843e4:	681b      	ldr	r3, [r3, #0]
   843e6:	3318      	adds	r3, #24
   843e8:	6878      	ldr	r0, [r7, #4]
   843ea:	4619      	mov	r1, r3
   843ec:	4b12      	ldr	r3, [pc, #72]	; (84438 <vTaskPlaceOnEventListRestricted+0x6c>)
   843ee:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   843f0:	4b10      	ldr	r3, [pc, #64]	; (84434 <vTaskPlaceOnEventListRestricted+0x68>)
   843f2:	681b      	ldr	r3, [r3, #0]
   843f4:	3304      	adds	r3, #4
   843f6:	4618      	mov	r0, r3
   843f8:	4b10      	ldr	r3, [pc, #64]	; (8443c <vTaskPlaceOnEventListRestricted+0x70>)
   843fa:	4798      	blx	r3
   843fc:	4603      	mov	r3, r0
   843fe:	2b00      	cmp	r3, #0
   84400:	d10b      	bne.n	8441a <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84402:	4b0c      	ldr	r3, [pc, #48]	; (84434 <vTaskPlaceOnEventListRestricted+0x68>)
   84404:	681b      	ldr	r3, [r3, #0]
   84406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84408:	2201      	movs	r2, #1
   8440a:	fa02 f303 	lsl.w	r3, r2, r3
   8440e:	43da      	mvns	r2, r3
   84410:	4b0b      	ldr	r3, [pc, #44]	; (84440 <vTaskPlaceOnEventListRestricted+0x74>)
   84412:	681b      	ldr	r3, [r3, #0]
   84414:	401a      	ands	r2, r3
   84416:	4b0a      	ldr	r3, [pc, #40]	; (84440 <vTaskPlaceOnEventListRestricted+0x74>)
   84418:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8441a:	4b0a      	ldr	r3, [pc, #40]	; (84444 <vTaskPlaceOnEventListRestricted+0x78>)
   8441c:	681a      	ldr	r2, [r3, #0]
   8441e:	683b      	ldr	r3, [r7, #0]
   84420:	4413      	add	r3, r2
   84422:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   84424:	68f8      	ldr	r0, [r7, #12]
   84426:	4b08      	ldr	r3, [pc, #32]	; (84448 <vTaskPlaceOnEventListRestricted+0x7c>)
   84428:	4798      	blx	r3
	}
   8442a:	3710      	adds	r7, #16
   8442c:	46bd      	mov	sp, r7
   8442e:	bd80      	pop	{r7, pc}
   84430:	00082ed9 	.word	0x00082ed9
   84434:	2007a570 	.word	0x2007a570
   84438:	00082ba9 	.word	0x00082ba9
   8443c:	00082c61 	.word	0x00082c61
   84440:	2007a650 	.word	0x2007a650
   84444:	2007a64c 	.word	0x2007a64c
   84448:	000847d9 	.word	0x000847d9

0008444c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   8444c:	b580      	push	{r7, lr}
   8444e:	b084      	sub	sp, #16
   84450:	af00      	add	r7, sp, #0
   84452:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   84454:	687b      	ldr	r3, [r7, #4]
   84456:	68db      	ldr	r3, [r3, #12]
   84458:	68db      	ldr	r3, [r3, #12]
   8445a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   8445c:	68bb      	ldr	r3, [r7, #8]
   8445e:	2b00      	cmp	r3, #0
   84460:	d102      	bne.n	84468 <xTaskRemoveFromEventList+0x1c>
   84462:	4b21      	ldr	r3, [pc, #132]	; (844e8 <xTaskRemoveFromEventList+0x9c>)
   84464:	4798      	blx	r3
   84466:	e7fe      	b.n	84466 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   84468:	68bb      	ldr	r3, [r7, #8]
   8446a:	3318      	adds	r3, #24
   8446c:	4618      	mov	r0, r3
   8446e:	4b1f      	ldr	r3, [pc, #124]	; (844ec <xTaskRemoveFromEventList+0xa0>)
   84470:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84472:	4b1f      	ldr	r3, [pc, #124]	; (844f0 <xTaskRemoveFromEventList+0xa4>)
   84474:	681b      	ldr	r3, [r3, #0]
   84476:	2b00      	cmp	r3, #0
   84478:	d11c      	bne.n	844b4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8447a:	68bb      	ldr	r3, [r7, #8]
   8447c:	3304      	adds	r3, #4
   8447e:	4618      	mov	r0, r3
   84480:	4b1a      	ldr	r3, [pc, #104]	; (844ec <xTaskRemoveFromEventList+0xa0>)
   84482:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   84484:	68bb      	ldr	r3, [r7, #8]
   84486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84488:	2201      	movs	r2, #1
   8448a:	409a      	lsls	r2, r3
   8448c:	4b19      	ldr	r3, [pc, #100]	; (844f4 <xTaskRemoveFromEventList+0xa8>)
   8448e:	681b      	ldr	r3, [r3, #0]
   84490:	431a      	orrs	r2, r3
   84492:	4b18      	ldr	r3, [pc, #96]	; (844f4 <xTaskRemoveFromEventList+0xa8>)
   84494:	601a      	str	r2, [r3, #0]
   84496:	68bb      	ldr	r3, [r7, #8]
   84498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8449a:	4613      	mov	r3, r2
   8449c:	009b      	lsls	r3, r3, #2
   8449e:	4413      	add	r3, r2
   844a0:	009b      	lsls	r3, r3, #2
   844a2:	4a15      	ldr	r2, [pc, #84]	; (844f8 <xTaskRemoveFromEventList+0xac>)
   844a4:	441a      	add	r2, r3
   844a6:	68bb      	ldr	r3, [r7, #8]
   844a8:	3304      	adds	r3, #4
   844aa:	4610      	mov	r0, r2
   844ac:	4619      	mov	r1, r3
   844ae:	4b13      	ldr	r3, [pc, #76]	; (844fc <xTaskRemoveFromEventList+0xb0>)
   844b0:	4798      	blx	r3
   844b2:	e005      	b.n	844c0 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   844b4:	68bb      	ldr	r3, [r7, #8]
   844b6:	3318      	adds	r3, #24
   844b8:	4811      	ldr	r0, [pc, #68]	; (84500 <xTaskRemoveFromEventList+0xb4>)
   844ba:	4619      	mov	r1, r3
   844bc:	4b0f      	ldr	r3, [pc, #60]	; (844fc <xTaskRemoveFromEventList+0xb0>)
   844be:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   844c0:	68bb      	ldr	r3, [r7, #8]
   844c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   844c4:	4b0f      	ldr	r3, [pc, #60]	; (84504 <xTaskRemoveFromEventList+0xb8>)
   844c6:	681b      	ldr	r3, [r3, #0]
   844c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   844ca:	429a      	cmp	r2, r3
   844cc:	d905      	bls.n	844da <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   844ce:	2301      	movs	r3, #1
   844d0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   844d2:	4b0d      	ldr	r3, [pc, #52]	; (84508 <xTaskRemoveFromEventList+0xbc>)
   844d4:	2201      	movs	r2, #1
   844d6:	601a      	str	r2, [r3, #0]
   844d8:	e001      	b.n	844de <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   844da:	2300      	movs	r3, #0
   844dc:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   844de:	68fb      	ldr	r3, [r7, #12]
}
   844e0:	4618      	mov	r0, r3
   844e2:	3710      	adds	r7, #16
   844e4:	46bd      	mov	sp, r7
   844e6:	bd80      	pop	{r7, pc}
   844e8:	00082ed9 	.word	0x00082ed9
   844ec:	00082c61 	.word	0x00082c61
   844f0:	2007a668 	.word	0x2007a668
   844f4:	2007a650 	.word	0x2007a650
   844f8:	2007a574 	.word	0x2007a574
   844fc:	00082ba9 	.word	0x00082ba9
   84500:	2007a608 	.word	0x2007a608
   84504:	2007a570 	.word	0x2007a570
   84508:	2007a65c 	.word	0x2007a65c

0008450c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   8450c:	b580      	push	{r7, lr}
   8450e:	b082      	sub	sp, #8
   84510:	af00      	add	r7, sp, #0
   84512:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   84514:	687b      	ldr	r3, [r7, #4]
   84516:	2b00      	cmp	r3, #0
   84518:	d102      	bne.n	84520 <vTaskSetTimeOutState+0x14>
   8451a:	4b07      	ldr	r3, [pc, #28]	; (84538 <vTaskSetTimeOutState+0x2c>)
   8451c:	4798      	blx	r3
   8451e:	e7fe      	b.n	8451e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   84520:	4b06      	ldr	r3, [pc, #24]	; (8453c <vTaskSetTimeOutState+0x30>)
   84522:	681a      	ldr	r2, [r3, #0]
   84524:	687b      	ldr	r3, [r7, #4]
   84526:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   84528:	4b05      	ldr	r3, [pc, #20]	; (84540 <vTaskSetTimeOutState+0x34>)
   8452a:	681a      	ldr	r2, [r3, #0]
   8452c:	687b      	ldr	r3, [r7, #4]
   8452e:	605a      	str	r2, [r3, #4]
}
   84530:	3708      	adds	r7, #8
   84532:	46bd      	mov	sp, r7
   84534:	bd80      	pop	{r7, pc}
   84536:	bf00      	nop
   84538:	00082ed9 	.word	0x00082ed9
   8453c:	2007a660 	.word	0x2007a660
   84540:	2007a64c 	.word	0x2007a64c

00084544 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   84544:	b580      	push	{r7, lr}
   84546:	b084      	sub	sp, #16
   84548:	af00      	add	r7, sp, #0
   8454a:	6078      	str	r0, [r7, #4]
   8454c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   8454e:	687b      	ldr	r3, [r7, #4]
   84550:	2b00      	cmp	r3, #0
   84552:	d102      	bne.n	8455a <xTaskCheckForTimeOut+0x16>
   84554:	4b21      	ldr	r3, [pc, #132]	; (845dc <xTaskCheckForTimeOut+0x98>)
   84556:	4798      	blx	r3
   84558:	e7fe      	b.n	84558 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   8455a:	683b      	ldr	r3, [r7, #0]
   8455c:	2b00      	cmp	r3, #0
   8455e:	d102      	bne.n	84566 <xTaskCheckForTimeOut+0x22>
   84560:	4b1e      	ldr	r3, [pc, #120]	; (845dc <xTaskCheckForTimeOut+0x98>)
   84562:	4798      	blx	r3
   84564:	e7fe      	b.n	84564 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   84566:	4b1e      	ldr	r3, [pc, #120]	; (845e0 <xTaskCheckForTimeOut+0x9c>)
   84568:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   8456a:	4b1e      	ldr	r3, [pc, #120]	; (845e4 <xTaskCheckForTimeOut+0xa0>)
   8456c:	681b      	ldr	r3, [r3, #0]
   8456e:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   84570:	683b      	ldr	r3, [r7, #0]
   84572:	681b      	ldr	r3, [r3, #0]
   84574:	f1b3 3fff 	cmp.w	r3, #4294967295
   84578:	d102      	bne.n	84580 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   8457a:	2300      	movs	r3, #0
   8457c:	60fb      	str	r3, [r7, #12]
   8457e:	e026      	b.n	845ce <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   84580:	687b      	ldr	r3, [r7, #4]
   84582:	681a      	ldr	r2, [r3, #0]
   84584:	4b18      	ldr	r3, [pc, #96]	; (845e8 <xTaskCheckForTimeOut+0xa4>)
   84586:	681b      	ldr	r3, [r3, #0]
   84588:	429a      	cmp	r2, r3
   8458a:	d007      	beq.n	8459c <xTaskCheckForTimeOut+0x58>
   8458c:	687b      	ldr	r3, [r7, #4]
   8458e:	685a      	ldr	r2, [r3, #4]
   84590:	68bb      	ldr	r3, [r7, #8]
   84592:	429a      	cmp	r2, r3
   84594:	d802      	bhi.n	8459c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   84596:	2301      	movs	r3, #1
   84598:	60fb      	str	r3, [r7, #12]
   8459a:	e018      	b.n	845ce <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   8459c:	687b      	ldr	r3, [r7, #4]
   8459e:	685b      	ldr	r3, [r3, #4]
   845a0:	68ba      	ldr	r2, [r7, #8]
   845a2:	1ad2      	subs	r2, r2, r3
   845a4:	683b      	ldr	r3, [r7, #0]
   845a6:	681b      	ldr	r3, [r3, #0]
   845a8:	429a      	cmp	r2, r3
   845aa:	d20e      	bcs.n	845ca <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   845ac:	683b      	ldr	r3, [r7, #0]
   845ae:	681a      	ldr	r2, [r3, #0]
   845b0:	687b      	ldr	r3, [r7, #4]
   845b2:	6859      	ldr	r1, [r3, #4]
   845b4:	68bb      	ldr	r3, [r7, #8]
   845b6:	1acb      	subs	r3, r1, r3
   845b8:	441a      	add	r2, r3
   845ba:	683b      	ldr	r3, [r7, #0]
   845bc:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   845be:	6878      	ldr	r0, [r7, #4]
   845c0:	4b0a      	ldr	r3, [pc, #40]	; (845ec <xTaskCheckForTimeOut+0xa8>)
   845c2:	4798      	blx	r3
			xReturn = pdFALSE;
   845c4:	2300      	movs	r3, #0
   845c6:	60fb      	str	r3, [r7, #12]
   845c8:	e001      	b.n	845ce <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   845ca:	2301      	movs	r3, #1
   845cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   845ce:	4b08      	ldr	r3, [pc, #32]	; (845f0 <xTaskCheckForTimeOut+0xac>)
   845d0:	4798      	blx	r3

	return xReturn;
   845d2:	68fb      	ldr	r3, [r7, #12]
}
   845d4:	4618      	mov	r0, r3
   845d6:	3710      	adds	r7, #16
   845d8:	46bd      	mov	sp, r7
   845da:	bd80      	pop	{r7, pc}
   845dc:	00082ed9 	.word	0x00082ed9
   845e0:	00082e5d 	.word	0x00082e5d
   845e4:	2007a64c 	.word	0x2007a64c
   845e8:	2007a660 	.word	0x2007a660
   845ec:	0008450d 	.word	0x0008450d
   845f0:	00082ea1 	.word	0x00082ea1

000845f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   845f4:	b480      	push	{r7}
   845f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   845f8:	4b03      	ldr	r3, [pc, #12]	; (84608 <vTaskMissedYield+0x14>)
   845fa:	2201      	movs	r2, #1
   845fc:	601a      	str	r2, [r3, #0]
}
   845fe:	46bd      	mov	sp, r7
   84600:	f85d 7b04 	ldr.w	r7, [sp], #4
   84604:	4770      	bx	lr
   84606:	bf00      	nop
   84608:	2007a65c 	.word	0x2007a65c

0008460c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8460c:	b580      	push	{r7, lr}
   8460e:	b082      	sub	sp, #8
   84610:	af00      	add	r7, sp, #0
   84612:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84614:	4b04      	ldr	r3, [pc, #16]	; (84628 <prvIdleTask+0x1c>)
   84616:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   84618:	4b04      	ldr	r3, [pc, #16]	; (8462c <prvIdleTask+0x20>)
   8461a:	681b      	ldr	r3, [r3, #0]
   8461c:	2b01      	cmp	r3, #1
   8461e:	d901      	bls.n	84624 <prvIdleTask+0x18>
			{
				taskYIELD();
   84620:	4b03      	ldr	r3, [pc, #12]	; (84630 <prvIdleTask+0x24>)
   84622:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   84624:	e7f6      	b.n	84614 <prvIdleTask+0x8>
   84626:	bf00      	nop
   84628:	0008474d 	.word	0x0008474d
   8462c:	2007a574 	.word	0x2007a574
   84630:	00082e3d 	.word	0x00082e3d

00084634 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84634:	b580      	push	{r7, lr}
   84636:	b086      	sub	sp, #24
   84638:	af00      	add	r7, sp, #0
   8463a:	60f8      	str	r0, [r7, #12]
   8463c:	60b9      	str	r1, [r7, #8]
   8463e:	607a      	str	r2, [r7, #4]
   84640:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84642:	2300      	movs	r3, #0
   84644:	617b      	str	r3, [r7, #20]
   84646:	e012      	b.n	8466e <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   84648:	68ba      	ldr	r2, [r7, #8]
   8464a:	697b      	ldr	r3, [r7, #20]
   8464c:	4413      	add	r3, r2
   8464e:	781a      	ldrb	r2, [r3, #0]
   84650:	68f9      	ldr	r1, [r7, #12]
   84652:	697b      	ldr	r3, [r7, #20]
   84654:	440b      	add	r3, r1
   84656:	3330      	adds	r3, #48	; 0x30
   84658:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   8465a:	68ba      	ldr	r2, [r7, #8]
   8465c:	697b      	ldr	r3, [r7, #20]
   8465e:	4413      	add	r3, r2
   84660:	781b      	ldrb	r3, [r3, #0]
   84662:	2b00      	cmp	r3, #0
   84664:	d100      	bne.n	84668 <prvInitialiseTCBVariables+0x34>
		{
			break;
   84666:	e005      	b.n	84674 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84668:	697b      	ldr	r3, [r7, #20]
   8466a:	3301      	adds	r3, #1
   8466c:	617b      	str	r3, [r7, #20]
   8466e:	697b      	ldr	r3, [r7, #20]
   84670:	2b09      	cmp	r3, #9
   84672:	d9e9      	bls.n	84648 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   84674:	68fb      	ldr	r3, [r7, #12]
   84676:	2200      	movs	r2, #0
   84678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   8467c:	687b      	ldr	r3, [r7, #4]
   8467e:	2b04      	cmp	r3, #4
   84680:	d901      	bls.n	84686 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   84682:	2304      	movs	r3, #4
   84684:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   84686:	68fb      	ldr	r3, [r7, #12]
   84688:	687a      	ldr	r2, [r7, #4]
   8468a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   8468c:	68fb      	ldr	r3, [r7, #12]
   8468e:	687a      	ldr	r2, [r7, #4]
   84690:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84692:	68fb      	ldr	r3, [r7, #12]
   84694:	2200      	movs	r2, #0
   84696:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84698:	68fb      	ldr	r3, [r7, #12]
   8469a:	3304      	adds	r3, #4
   8469c:	4618      	mov	r0, r3
   8469e:	4b0a      	ldr	r3, [pc, #40]	; (846c8 <prvInitialiseTCBVariables+0x94>)
   846a0:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   846a2:	68fb      	ldr	r3, [r7, #12]
   846a4:	3318      	adds	r3, #24
   846a6:	4618      	mov	r0, r3
   846a8:	4b07      	ldr	r3, [pc, #28]	; (846c8 <prvInitialiseTCBVariables+0x94>)
   846aa:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   846ac:	68fb      	ldr	r3, [r7, #12]
   846ae:	68fa      	ldr	r2, [r7, #12]
   846b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   846b2:	687b      	ldr	r3, [r7, #4]
   846b4:	f1c3 0205 	rsb	r2, r3, #5
   846b8:	68fb      	ldr	r3, [r7, #12]
   846ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   846bc:	68fb      	ldr	r3, [r7, #12]
   846be:	68fa      	ldr	r2, [r7, #12]
   846c0:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   846c2:	3718      	adds	r7, #24
   846c4:	46bd      	mov	sp, r7
   846c6:	bd80      	pop	{r7, pc}
   846c8:	00082b91 	.word	0x00082b91

000846cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   846cc:	b580      	push	{r7, lr}
   846ce:	b082      	sub	sp, #8
   846d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   846d2:	2300      	movs	r3, #0
   846d4:	607b      	str	r3, [r7, #4]
   846d6:	e00c      	b.n	846f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   846d8:	687a      	ldr	r2, [r7, #4]
   846da:	4613      	mov	r3, r2
   846dc:	009b      	lsls	r3, r3, #2
   846de:	4413      	add	r3, r2
   846e0:	009b      	lsls	r3, r3, #2
   846e2:	4a11      	ldr	r2, [pc, #68]	; (84728 <prvInitialiseTaskLists+0x5c>)
   846e4:	4413      	add	r3, r2
   846e6:	4618      	mov	r0, r3
   846e8:	4b10      	ldr	r3, [pc, #64]	; (8472c <prvInitialiseTaskLists+0x60>)
   846ea:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   846ec:	687b      	ldr	r3, [r7, #4]
   846ee:	3301      	adds	r3, #1
   846f0:	607b      	str	r3, [r7, #4]
   846f2:	687b      	ldr	r3, [r7, #4]
   846f4:	2b04      	cmp	r3, #4
   846f6:	d9ef      	bls.n	846d8 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   846f8:	480d      	ldr	r0, [pc, #52]	; (84730 <prvInitialiseTaskLists+0x64>)
   846fa:	4b0c      	ldr	r3, [pc, #48]	; (8472c <prvInitialiseTaskLists+0x60>)
   846fc:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   846fe:	480d      	ldr	r0, [pc, #52]	; (84734 <prvInitialiseTaskLists+0x68>)
   84700:	4b0a      	ldr	r3, [pc, #40]	; (8472c <prvInitialiseTaskLists+0x60>)
   84702:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84704:	480c      	ldr	r0, [pc, #48]	; (84738 <prvInitialiseTaskLists+0x6c>)
   84706:	4b09      	ldr	r3, [pc, #36]	; (8472c <prvInitialiseTaskLists+0x60>)
   84708:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8470a:	480c      	ldr	r0, [pc, #48]	; (8473c <prvInitialiseTaskLists+0x70>)
   8470c:	4b07      	ldr	r3, [pc, #28]	; (8472c <prvInitialiseTaskLists+0x60>)
   8470e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84710:	480b      	ldr	r0, [pc, #44]	; (84740 <prvInitialiseTaskLists+0x74>)
   84712:	4b06      	ldr	r3, [pc, #24]	; (8472c <prvInitialiseTaskLists+0x60>)
   84714:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84716:	4b0b      	ldr	r3, [pc, #44]	; (84744 <prvInitialiseTaskLists+0x78>)
   84718:	4a05      	ldr	r2, [pc, #20]	; (84730 <prvInitialiseTaskLists+0x64>)
   8471a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8471c:	4b0a      	ldr	r3, [pc, #40]	; (84748 <prvInitialiseTaskLists+0x7c>)
   8471e:	4a05      	ldr	r2, [pc, #20]	; (84734 <prvInitialiseTaskLists+0x68>)
   84720:	601a      	str	r2, [r3, #0]
}
   84722:	3708      	adds	r7, #8
   84724:	46bd      	mov	sp, r7
   84726:	bd80      	pop	{r7, pc}
   84728:	2007a574 	.word	0x2007a574
   8472c:	00082b51 	.word	0x00082b51
   84730:	2007a5d8 	.word	0x2007a5d8
   84734:	2007a5ec 	.word	0x2007a5ec
   84738:	2007a608 	.word	0x2007a608
   8473c:	2007a61c 	.word	0x2007a61c
   84740:	2007a634 	.word	0x2007a634
   84744:	2007a600 	.word	0x2007a600
   84748:	2007a604 	.word	0x2007a604

0008474c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   8474c:	b580      	push	{r7, lr}
   8474e:	b082      	sub	sp, #8
   84750:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84752:	e028      	b.n	847a6 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   84754:	4b17      	ldr	r3, [pc, #92]	; (847b4 <prvCheckTasksWaitingTermination+0x68>)
   84756:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   84758:	4b17      	ldr	r3, [pc, #92]	; (847b8 <prvCheckTasksWaitingTermination+0x6c>)
   8475a:	681b      	ldr	r3, [r3, #0]
   8475c:	2b00      	cmp	r3, #0
   8475e:	bf14      	ite	ne
   84760:	2300      	movne	r3, #0
   84762:	2301      	moveq	r3, #1
   84764:	b2db      	uxtb	r3, r3
   84766:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   84768:	4b14      	ldr	r3, [pc, #80]	; (847bc <prvCheckTasksWaitingTermination+0x70>)
   8476a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   8476c:	687b      	ldr	r3, [r7, #4]
   8476e:	2b00      	cmp	r3, #0
   84770:	d119      	bne.n	847a6 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   84772:	4b13      	ldr	r3, [pc, #76]	; (847c0 <prvCheckTasksWaitingTermination+0x74>)
   84774:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   84776:	4b10      	ldr	r3, [pc, #64]	; (847b8 <prvCheckTasksWaitingTermination+0x6c>)
   84778:	68db      	ldr	r3, [r3, #12]
   8477a:	68db      	ldr	r3, [r3, #12]
   8477c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8477e:	683b      	ldr	r3, [r7, #0]
   84780:	3304      	adds	r3, #4
   84782:	4618      	mov	r0, r3
   84784:	4b0f      	ldr	r3, [pc, #60]	; (847c4 <prvCheckTasksWaitingTermination+0x78>)
   84786:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   84788:	4b0f      	ldr	r3, [pc, #60]	; (847c8 <prvCheckTasksWaitingTermination+0x7c>)
   8478a:	681b      	ldr	r3, [r3, #0]
   8478c:	1e5a      	subs	r2, r3, #1
   8478e:	4b0e      	ldr	r3, [pc, #56]	; (847c8 <prvCheckTasksWaitingTermination+0x7c>)
   84790:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84792:	4b0e      	ldr	r3, [pc, #56]	; (847cc <prvCheckTasksWaitingTermination+0x80>)
   84794:	681b      	ldr	r3, [r3, #0]
   84796:	1e5a      	subs	r2, r3, #1
   84798:	4b0c      	ldr	r3, [pc, #48]	; (847cc <prvCheckTasksWaitingTermination+0x80>)
   8479a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   8479c:	4b0c      	ldr	r3, [pc, #48]	; (847d0 <prvCheckTasksWaitingTermination+0x84>)
   8479e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   847a0:	6838      	ldr	r0, [r7, #0]
   847a2:	4b0c      	ldr	r3, [pc, #48]	; (847d4 <prvCheckTasksWaitingTermination+0x88>)
   847a4:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   847a6:	4b09      	ldr	r3, [pc, #36]	; (847cc <prvCheckTasksWaitingTermination+0x80>)
   847a8:	681b      	ldr	r3, [r3, #0]
   847aa:	2b00      	cmp	r3, #0
   847ac:	d1d2      	bne.n	84754 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   847ae:	3708      	adds	r7, #8
   847b0:	46bd      	mov	sp, r7
   847b2:	bd80      	pop	{r7, pc}
   847b4:	00083f49 	.word	0x00083f49
   847b8:	2007a61c 	.word	0x2007a61c
   847bc:	00083f65 	.word	0x00083f65
   847c0:	00082e5d 	.word	0x00082e5d
   847c4:	00082c61 	.word	0x00082c61
   847c8:	2007a648 	.word	0x2007a648
   847cc:	2007a630 	.word	0x2007a630
   847d0:	00082ea1 	.word	0x00082ea1
   847d4:	000848b9 	.word	0x000848b9

000847d8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   847d8:	b580      	push	{r7, lr}
   847da:	b082      	sub	sp, #8
   847dc:	af00      	add	r7, sp, #0
   847de:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   847e0:	4b13      	ldr	r3, [pc, #76]	; (84830 <prvAddCurrentTaskToDelayedList+0x58>)
   847e2:	681b      	ldr	r3, [r3, #0]
   847e4:	687a      	ldr	r2, [r7, #4]
   847e6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   847e8:	4b12      	ldr	r3, [pc, #72]	; (84834 <prvAddCurrentTaskToDelayedList+0x5c>)
   847ea:	681b      	ldr	r3, [r3, #0]
   847ec:	687a      	ldr	r2, [r7, #4]
   847ee:	429a      	cmp	r2, r3
   847f0:	d209      	bcs.n	84806 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   847f2:	4b11      	ldr	r3, [pc, #68]	; (84838 <prvAddCurrentTaskToDelayedList+0x60>)
   847f4:	681a      	ldr	r2, [r3, #0]
   847f6:	4b0e      	ldr	r3, [pc, #56]	; (84830 <prvAddCurrentTaskToDelayedList+0x58>)
   847f8:	681b      	ldr	r3, [r3, #0]
   847fa:	3304      	adds	r3, #4
   847fc:	4610      	mov	r0, r2
   847fe:	4619      	mov	r1, r3
   84800:	4b0e      	ldr	r3, [pc, #56]	; (8483c <prvAddCurrentTaskToDelayedList+0x64>)
   84802:	4798      	blx	r3
   84804:	e010      	b.n	84828 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84806:	4b0e      	ldr	r3, [pc, #56]	; (84840 <prvAddCurrentTaskToDelayedList+0x68>)
   84808:	681a      	ldr	r2, [r3, #0]
   8480a:	4b09      	ldr	r3, [pc, #36]	; (84830 <prvAddCurrentTaskToDelayedList+0x58>)
   8480c:	681b      	ldr	r3, [r3, #0]
   8480e:	3304      	adds	r3, #4
   84810:	4610      	mov	r0, r2
   84812:	4619      	mov	r1, r3
   84814:	4b09      	ldr	r3, [pc, #36]	; (8483c <prvAddCurrentTaskToDelayedList+0x64>)
   84816:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84818:	4b0a      	ldr	r3, [pc, #40]	; (84844 <prvAddCurrentTaskToDelayedList+0x6c>)
   8481a:	681b      	ldr	r3, [r3, #0]
   8481c:	687a      	ldr	r2, [r7, #4]
   8481e:	429a      	cmp	r2, r3
   84820:	d202      	bcs.n	84828 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84822:	4b08      	ldr	r3, [pc, #32]	; (84844 <prvAddCurrentTaskToDelayedList+0x6c>)
   84824:	687a      	ldr	r2, [r7, #4]
   84826:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84828:	3708      	adds	r7, #8
   8482a:	46bd      	mov	sp, r7
   8482c:	bd80      	pop	{r7, pc}
   8482e:	bf00      	nop
   84830:	2007a570 	.word	0x2007a570
   84834:	2007a64c 	.word	0x2007a64c
   84838:	2007a604 	.word	0x2007a604
   8483c:	00082bf1 	.word	0x00082bf1
   84840:	2007a600 	.word	0x2007a600
   84844:	2007000c 	.word	0x2007000c

00084848 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   84848:	b580      	push	{r7, lr}
   8484a:	b084      	sub	sp, #16
   8484c:	af00      	add	r7, sp, #0
   8484e:	4603      	mov	r3, r0
   84850:	6039      	str	r1, [r7, #0]
   84852:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   84854:	2048      	movs	r0, #72	; 0x48
   84856:	4b15      	ldr	r3, [pc, #84]	; (848ac <prvAllocateTCBAndStack+0x64>)
   84858:	4798      	blx	r3
   8485a:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   8485c:	68fb      	ldr	r3, [r7, #12]
   8485e:	2b00      	cmp	r3, #0
   84860:	d01f      	beq.n	848a2 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84862:	683b      	ldr	r3, [r7, #0]
   84864:	2b00      	cmp	r3, #0
   84866:	d106      	bne.n	84876 <prvAllocateTCBAndStack+0x2e>
   84868:	88fb      	ldrh	r3, [r7, #6]
   8486a:	009b      	lsls	r3, r3, #2
   8486c:	4618      	mov	r0, r3
   8486e:	4b0f      	ldr	r3, [pc, #60]	; (848ac <prvAllocateTCBAndStack+0x64>)
   84870:	4798      	blx	r3
   84872:	4603      	mov	r3, r0
   84874:	e000      	b.n	84878 <prvAllocateTCBAndStack+0x30>
   84876:	683b      	ldr	r3, [r7, #0]
   84878:	68fa      	ldr	r2, [r7, #12]
   8487a:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   8487c:	68fb      	ldr	r3, [r7, #12]
   8487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84880:	2b00      	cmp	r3, #0
   84882:	d105      	bne.n	84890 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84884:	68f8      	ldr	r0, [r7, #12]
   84886:	4b0a      	ldr	r3, [pc, #40]	; (848b0 <prvAllocateTCBAndStack+0x68>)
   84888:	4798      	blx	r3
			pxNewTCB = NULL;
   8488a:	2300      	movs	r3, #0
   8488c:	60fb      	str	r3, [r7, #12]
   8488e:	e008      	b.n	848a2 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84890:	68fb      	ldr	r3, [r7, #12]
   84892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84894:	88fb      	ldrh	r3, [r7, #6]
   84896:	009b      	lsls	r3, r3, #2
   84898:	4610      	mov	r0, r2
   8489a:	21a5      	movs	r1, #165	; 0xa5
   8489c:	461a      	mov	r2, r3
   8489e:	4b05      	ldr	r3, [pc, #20]	; (848b4 <prvAllocateTCBAndStack+0x6c>)
   848a0:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   848a2:	68fb      	ldr	r3, [r7, #12]
}
   848a4:	4618      	mov	r0, r3
   848a6:	3710      	adds	r7, #16
   848a8:	46bd      	mov	sp, r7
   848aa:	bd80      	pop	{r7, pc}
   848ac:	00082ffd 	.word	0x00082ffd
   848b0:	00083175 	.word	0x00083175
   848b4:	000866f9 	.word	0x000866f9

000848b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   848b8:	b580      	push	{r7, lr}
   848ba:	b082      	sub	sp, #8
   848bc:	af00      	add	r7, sp, #0
   848be:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   848c0:	687b      	ldr	r3, [r7, #4]
   848c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   848c4:	4618      	mov	r0, r3
   848c6:	4b04      	ldr	r3, [pc, #16]	; (848d8 <prvDeleteTCB+0x20>)
   848c8:	4798      	blx	r3
		vPortFree( pxTCB );
   848ca:	6878      	ldr	r0, [r7, #4]
   848cc:	4b02      	ldr	r3, [pc, #8]	; (848d8 <prvDeleteTCB+0x20>)
   848ce:	4798      	blx	r3
	}
   848d0:	3708      	adds	r7, #8
   848d2:	46bd      	mov	sp, r7
   848d4:	bd80      	pop	{r7, pc}
   848d6:	bf00      	nop
   848d8:	00083175 	.word	0x00083175

000848dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   848dc:	b480      	push	{r7}
   848de:	b083      	sub	sp, #12
   848e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   848e2:	4b0e      	ldr	r3, [pc, #56]	; (8491c <prvResetNextTaskUnblockTime+0x40>)
   848e4:	681b      	ldr	r3, [r3, #0]
   848e6:	681b      	ldr	r3, [r3, #0]
   848e8:	2b00      	cmp	r3, #0
   848ea:	d101      	bne.n	848f0 <prvResetNextTaskUnblockTime+0x14>
   848ec:	2301      	movs	r3, #1
   848ee:	e000      	b.n	848f2 <prvResetNextTaskUnblockTime+0x16>
   848f0:	2300      	movs	r3, #0
   848f2:	2b00      	cmp	r3, #0
   848f4:	d004      	beq.n	84900 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   848f6:	4b0a      	ldr	r3, [pc, #40]	; (84920 <prvResetNextTaskUnblockTime+0x44>)
   848f8:	f04f 32ff 	mov.w	r2, #4294967295
   848fc:	601a      	str	r2, [r3, #0]
   848fe:	e008      	b.n	84912 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84900:	4b06      	ldr	r3, [pc, #24]	; (8491c <prvResetNextTaskUnblockTime+0x40>)
   84902:	681b      	ldr	r3, [r3, #0]
   84904:	68db      	ldr	r3, [r3, #12]
   84906:	68db      	ldr	r3, [r3, #12]
   84908:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8490a:	687b      	ldr	r3, [r7, #4]
   8490c:	685a      	ldr	r2, [r3, #4]
   8490e:	4b04      	ldr	r3, [pc, #16]	; (84920 <prvResetNextTaskUnblockTime+0x44>)
   84910:	601a      	str	r2, [r3, #0]
	}
}
   84912:	370c      	adds	r7, #12
   84914:	46bd      	mov	sp, r7
   84916:	f85d 7b04 	ldr.w	r7, [sp], #4
   8491a:	4770      	bx	lr
   8491c:	2007a600 	.word	0x2007a600
   84920:	2007000c 	.word	0x2007000c

00084924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84924:	b480      	push	{r7}
   84926:	b083      	sub	sp, #12
   84928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8492a:	4b0b      	ldr	r3, [pc, #44]	; (84958 <xTaskGetSchedulerState+0x34>)
   8492c:	681b      	ldr	r3, [r3, #0]
   8492e:	2b00      	cmp	r3, #0
   84930:	d102      	bne.n	84938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   84932:	2301      	movs	r3, #1
   84934:	607b      	str	r3, [r7, #4]
   84936:	e008      	b.n	8494a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84938:	4b08      	ldr	r3, [pc, #32]	; (8495c <xTaskGetSchedulerState+0x38>)
   8493a:	681b      	ldr	r3, [r3, #0]
   8493c:	2b00      	cmp	r3, #0
   8493e:	d102      	bne.n	84946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   84940:	2302      	movs	r3, #2
   84942:	607b      	str	r3, [r7, #4]
   84944:	e001      	b.n	8494a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   84946:	2300      	movs	r3, #0
   84948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   8494a:	687b      	ldr	r3, [r7, #4]
	}
   8494c:	4618      	mov	r0, r3
   8494e:	370c      	adds	r7, #12
   84950:	46bd      	mov	sp, r7
   84952:	f85d 7b04 	ldr.w	r7, [sp], #4
   84956:	4770      	bx	lr
   84958:	2007a654 	.word	0x2007a654
   8495c:	2007a668 	.word	0x2007a668

00084960 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   84960:	b580      	push	{r7, lr}
   84962:	b084      	sub	sp, #16
   84964:	af00      	add	r7, sp, #0
   84966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84968:	687b      	ldr	r3, [r7, #4]
   8496a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8496c:	687b      	ldr	r3, [r7, #4]
   8496e:	2b00      	cmp	r3, #0
   84970:	d062      	beq.n	84a38 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   84972:	68fb      	ldr	r3, [r7, #12]
   84974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84976:	4b32      	ldr	r3, [pc, #200]	; (84a40 <vTaskPriorityInherit+0xe0>)
   84978:	681b      	ldr	r3, [r3, #0]
   8497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8497c:	429a      	cmp	r2, r3
   8497e:	d25b      	bcs.n	84a38 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   84980:	68fb      	ldr	r3, [r7, #12]
   84982:	699b      	ldr	r3, [r3, #24]
   84984:	2b00      	cmp	r3, #0
   84986:	db06      	blt.n	84996 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84988:	4b2d      	ldr	r3, [pc, #180]	; (84a40 <vTaskPriorityInherit+0xe0>)
   8498a:	681b      	ldr	r3, [r3, #0]
   8498c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8498e:	f1c3 0205 	rsb	r2, r3, #5
   84992:	68fb      	ldr	r3, [r7, #12]
   84994:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   84996:	68fb      	ldr	r3, [r7, #12]
   84998:	6959      	ldr	r1, [r3, #20]
   8499a:	68fb      	ldr	r3, [r7, #12]
   8499c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8499e:	4613      	mov	r3, r2
   849a0:	009b      	lsls	r3, r3, #2
   849a2:	4413      	add	r3, r2
   849a4:	009b      	lsls	r3, r3, #2
   849a6:	4a27      	ldr	r2, [pc, #156]	; (84a44 <vTaskPriorityInherit+0xe4>)
   849a8:	4413      	add	r3, r2
   849aa:	4299      	cmp	r1, r3
   849ac:	d101      	bne.n	849b2 <vTaskPriorityInherit+0x52>
   849ae:	2301      	movs	r3, #1
   849b0:	e000      	b.n	849b4 <vTaskPriorityInherit+0x54>
   849b2:	2300      	movs	r3, #0
   849b4:	2b00      	cmp	r3, #0
   849b6:	d03a      	beq.n	84a2e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   849b8:	68fb      	ldr	r3, [r7, #12]
   849ba:	3304      	adds	r3, #4
   849bc:	4618      	mov	r0, r3
   849be:	4b22      	ldr	r3, [pc, #136]	; (84a48 <vTaskPriorityInherit+0xe8>)
   849c0:	4798      	blx	r3
   849c2:	4603      	mov	r3, r0
   849c4:	2b00      	cmp	r3, #0
   849c6:	d115      	bne.n	849f4 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   849c8:	68fb      	ldr	r3, [r7, #12]
   849ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849cc:	491d      	ldr	r1, [pc, #116]	; (84a44 <vTaskPriorityInherit+0xe4>)
   849ce:	4613      	mov	r3, r2
   849d0:	009b      	lsls	r3, r3, #2
   849d2:	4413      	add	r3, r2
   849d4:	009b      	lsls	r3, r3, #2
   849d6:	440b      	add	r3, r1
   849d8:	681b      	ldr	r3, [r3, #0]
   849da:	2b00      	cmp	r3, #0
   849dc:	d10a      	bne.n	849f4 <vTaskPriorityInherit+0x94>
   849de:	68fb      	ldr	r3, [r7, #12]
   849e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   849e2:	2201      	movs	r2, #1
   849e4:	fa02 f303 	lsl.w	r3, r2, r3
   849e8:	43da      	mvns	r2, r3
   849ea:	4b18      	ldr	r3, [pc, #96]	; (84a4c <vTaskPriorityInherit+0xec>)
   849ec:	681b      	ldr	r3, [r3, #0]
   849ee:	401a      	ands	r2, r3
   849f0:	4b16      	ldr	r3, [pc, #88]	; (84a4c <vTaskPriorityInherit+0xec>)
   849f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   849f4:	4b12      	ldr	r3, [pc, #72]	; (84a40 <vTaskPriorityInherit+0xe0>)
   849f6:	681b      	ldr	r3, [r3, #0]
   849f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849fa:	68fb      	ldr	r3, [r7, #12]
   849fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   849fe:	68fb      	ldr	r3, [r7, #12]
   84a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a02:	2201      	movs	r2, #1
   84a04:	409a      	lsls	r2, r3
   84a06:	4b11      	ldr	r3, [pc, #68]	; (84a4c <vTaskPriorityInherit+0xec>)
   84a08:	681b      	ldr	r3, [r3, #0]
   84a0a:	431a      	orrs	r2, r3
   84a0c:	4b0f      	ldr	r3, [pc, #60]	; (84a4c <vTaskPriorityInherit+0xec>)
   84a0e:	601a      	str	r2, [r3, #0]
   84a10:	68fb      	ldr	r3, [r7, #12]
   84a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a14:	4613      	mov	r3, r2
   84a16:	009b      	lsls	r3, r3, #2
   84a18:	4413      	add	r3, r2
   84a1a:	009b      	lsls	r3, r3, #2
   84a1c:	4a09      	ldr	r2, [pc, #36]	; (84a44 <vTaskPriorityInherit+0xe4>)
   84a1e:	441a      	add	r2, r3
   84a20:	68fb      	ldr	r3, [r7, #12]
   84a22:	3304      	adds	r3, #4
   84a24:	4610      	mov	r0, r2
   84a26:	4619      	mov	r1, r3
   84a28:	4b09      	ldr	r3, [pc, #36]	; (84a50 <vTaskPriorityInherit+0xf0>)
   84a2a:	4798      	blx	r3
   84a2c:	e004      	b.n	84a38 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84a2e:	4b04      	ldr	r3, [pc, #16]	; (84a40 <vTaskPriorityInherit+0xe0>)
   84a30:	681b      	ldr	r3, [r3, #0]
   84a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a34:	68fb      	ldr	r3, [r7, #12]
   84a36:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84a38:	3710      	adds	r7, #16
   84a3a:	46bd      	mov	sp, r7
   84a3c:	bd80      	pop	{r7, pc}
   84a3e:	bf00      	nop
   84a40:	2007a570 	.word	0x2007a570
   84a44:	2007a574 	.word	0x2007a574
   84a48:	00082c61 	.word	0x00082c61
   84a4c:	2007a650 	.word	0x2007a650
   84a50:	00082ba9 	.word	0x00082ba9

00084a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   84a54:	b580      	push	{r7, lr}
   84a56:	b084      	sub	sp, #16
   84a58:	af00      	add	r7, sp, #0
   84a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84a5c:	687b      	ldr	r3, [r7, #4]
   84a5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   84a60:	2300      	movs	r3, #0
   84a62:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   84a64:	687b      	ldr	r3, [r7, #4]
   84a66:	2b00      	cmp	r3, #0
   84a68:	d056      	beq.n	84b18 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   84a6a:	68bb      	ldr	r3, [r7, #8]
   84a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84a6e:	2b00      	cmp	r3, #0
   84a70:	d102      	bne.n	84a78 <xTaskPriorityDisinherit+0x24>
   84a72:	4b2c      	ldr	r3, [pc, #176]	; (84b24 <xTaskPriorityDisinherit+0xd0>)
   84a74:	4798      	blx	r3
   84a76:	e7fe      	b.n	84a76 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   84a78:	68bb      	ldr	r3, [r7, #8]
   84a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84a7c:	1e5a      	subs	r2, r3, #1
   84a7e:	68bb      	ldr	r3, [r7, #8]
   84a80:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   84a82:	68bb      	ldr	r3, [r7, #8]
   84a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a86:	68bb      	ldr	r3, [r7, #8]
   84a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84a8a:	429a      	cmp	r2, r3
   84a8c:	d044      	beq.n	84b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84a8e:	68bb      	ldr	r3, [r7, #8]
   84a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84a92:	2b00      	cmp	r3, #0
   84a94:	d140      	bne.n	84b18 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84a96:	68bb      	ldr	r3, [r7, #8]
   84a98:	3304      	adds	r3, #4
   84a9a:	4618      	mov	r0, r3
   84a9c:	4b22      	ldr	r3, [pc, #136]	; (84b28 <xTaskPriorityDisinherit+0xd4>)
   84a9e:	4798      	blx	r3
   84aa0:	4603      	mov	r3, r0
   84aa2:	2b00      	cmp	r3, #0
   84aa4:	d115      	bne.n	84ad2 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84aa6:	68bb      	ldr	r3, [r7, #8]
   84aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84aaa:	4920      	ldr	r1, [pc, #128]	; (84b2c <xTaskPriorityDisinherit+0xd8>)
   84aac:	4613      	mov	r3, r2
   84aae:	009b      	lsls	r3, r3, #2
   84ab0:	4413      	add	r3, r2
   84ab2:	009b      	lsls	r3, r3, #2
   84ab4:	440b      	add	r3, r1
   84ab6:	681b      	ldr	r3, [r3, #0]
   84ab8:	2b00      	cmp	r3, #0
   84aba:	d10a      	bne.n	84ad2 <xTaskPriorityDisinherit+0x7e>
   84abc:	68bb      	ldr	r3, [r7, #8]
   84abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84ac0:	2201      	movs	r2, #1
   84ac2:	fa02 f303 	lsl.w	r3, r2, r3
   84ac6:	43da      	mvns	r2, r3
   84ac8:	4b19      	ldr	r3, [pc, #100]	; (84b30 <xTaskPriorityDisinherit+0xdc>)
   84aca:	681b      	ldr	r3, [r3, #0]
   84acc:	401a      	ands	r2, r3
   84ace:	4b18      	ldr	r3, [pc, #96]	; (84b30 <xTaskPriorityDisinherit+0xdc>)
   84ad0:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84ad2:	68bb      	ldr	r3, [r7, #8]
   84ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84ad6:	68bb      	ldr	r3, [r7, #8]
   84ad8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84ada:	68bb      	ldr	r3, [r7, #8]
   84adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84ade:	f1c3 0205 	rsb	r2, r3, #5
   84ae2:	68bb      	ldr	r3, [r7, #8]
   84ae4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84ae6:	68bb      	ldr	r3, [r7, #8]
   84ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84aea:	2201      	movs	r2, #1
   84aec:	409a      	lsls	r2, r3
   84aee:	4b10      	ldr	r3, [pc, #64]	; (84b30 <xTaskPriorityDisinherit+0xdc>)
   84af0:	681b      	ldr	r3, [r3, #0]
   84af2:	431a      	orrs	r2, r3
   84af4:	4b0e      	ldr	r3, [pc, #56]	; (84b30 <xTaskPriorityDisinherit+0xdc>)
   84af6:	601a      	str	r2, [r3, #0]
   84af8:	68bb      	ldr	r3, [r7, #8]
   84afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84afc:	4613      	mov	r3, r2
   84afe:	009b      	lsls	r3, r3, #2
   84b00:	4413      	add	r3, r2
   84b02:	009b      	lsls	r3, r3, #2
   84b04:	4a09      	ldr	r2, [pc, #36]	; (84b2c <xTaskPriorityDisinherit+0xd8>)
   84b06:	441a      	add	r2, r3
   84b08:	68bb      	ldr	r3, [r7, #8]
   84b0a:	3304      	adds	r3, #4
   84b0c:	4610      	mov	r0, r2
   84b0e:	4619      	mov	r1, r3
   84b10:	4b08      	ldr	r3, [pc, #32]	; (84b34 <xTaskPriorityDisinherit+0xe0>)
   84b12:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84b14:	2301      	movs	r3, #1
   84b16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84b18:	68fb      	ldr	r3, [r7, #12]
	}
   84b1a:	4618      	mov	r0, r3
   84b1c:	3710      	adds	r7, #16
   84b1e:	46bd      	mov	sp, r7
   84b20:	bd80      	pop	{r7, pc}
   84b22:	bf00      	nop
   84b24:	00082ed9 	.word	0x00082ed9
   84b28:	00082c61 	.word	0x00082c61
   84b2c:	2007a574 	.word	0x2007a574
   84b30:	2007a650 	.word	0x2007a650
   84b34:	00082ba9 	.word	0x00082ba9

00084b38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84b38:	b480      	push	{r7}
   84b3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84b3c:	4b07      	ldr	r3, [pc, #28]	; (84b5c <pvTaskIncrementMutexHeldCount+0x24>)
   84b3e:	681b      	ldr	r3, [r3, #0]
   84b40:	2b00      	cmp	r3, #0
   84b42:	d004      	beq.n	84b4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84b44:	4b05      	ldr	r3, [pc, #20]	; (84b5c <pvTaskIncrementMutexHeldCount+0x24>)
   84b46:	681b      	ldr	r3, [r3, #0]
   84b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   84b4a:	3201      	adds	r2, #1
   84b4c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84b4e:	4b03      	ldr	r3, [pc, #12]	; (84b5c <pvTaskIncrementMutexHeldCount+0x24>)
   84b50:	681b      	ldr	r3, [r3, #0]
	}
   84b52:	4618      	mov	r0, r3
   84b54:	46bd      	mov	sp, r7
   84b56:	f85d 7b04 	ldr.w	r7, [sp], #4
   84b5a:	4770      	bx	lr
   84b5c:	2007a570 	.word	0x2007a570

00084b60 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84b60:	b590      	push	{r4, r7, lr}
   84b62:	b087      	sub	sp, #28
   84b64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   84b66:	2300      	movs	r3, #0
   84b68:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   84b6a:	4b10      	ldr	r3, [pc, #64]	; (84bac <xTimerCreateTimerTask+0x4c>)
   84b6c:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84b6e:	4b10      	ldr	r3, [pc, #64]	; (84bb0 <xTimerCreateTimerTask+0x50>)
   84b70:	681b      	ldr	r3, [r3, #0]
   84b72:	2b00      	cmp	r3, #0
   84b74:	d00f      	beq.n	84b96 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   84b76:	2302      	movs	r3, #2
   84b78:	9300      	str	r3, [sp, #0]
   84b7a:	2300      	movs	r3, #0
   84b7c:	9301      	str	r3, [sp, #4]
   84b7e:	2300      	movs	r3, #0
   84b80:	9302      	str	r3, [sp, #8]
   84b82:	2300      	movs	r3, #0
   84b84:	9303      	str	r3, [sp, #12]
   84b86:	480b      	ldr	r0, [pc, #44]	; (84bb4 <xTimerCreateTimerTask+0x54>)
   84b88:	490b      	ldr	r1, [pc, #44]	; (84bb8 <xTimerCreateTimerTask+0x58>)
   84b8a:	f44f 7282 	mov.w	r2, #260	; 0x104
   84b8e:	2300      	movs	r3, #0
   84b90:	4c0a      	ldr	r4, [pc, #40]	; (84bbc <xTimerCreateTimerTask+0x5c>)
   84b92:	47a0      	blx	r4
   84b94:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   84b96:	687b      	ldr	r3, [r7, #4]
   84b98:	2b00      	cmp	r3, #0
   84b9a:	d102      	bne.n	84ba2 <xTimerCreateTimerTask+0x42>
   84b9c:	4b08      	ldr	r3, [pc, #32]	; (84bc0 <xTimerCreateTimerTask+0x60>)
   84b9e:	4798      	blx	r3
   84ba0:	e7fe      	b.n	84ba0 <xTimerCreateTimerTask+0x40>
	return xReturn;
   84ba2:	687b      	ldr	r3, [r7, #4]
}
   84ba4:	4618      	mov	r0, r3
   84ba6:	370c      	adds	r7, #12
   84ba8:	46bd      	mov	sp, r7
   84baa:	bd90      	pop	{r4, r7, pc}
   84bac:	00085095 	.word	0x00085095
   84bb0:	2007a69c 	.word	0x2007a69c
   84bb4:	00084cdd 	.word	0x00084cdd
   84bb8:	00086a00 	.word	0x00086a00
   84bbc:	00083c4d 	.word	0x00083c4d
   84bc0:	00082ed9 	.word	0x00082ed9

00084bc4 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   84bc4:	b590      	push	{r4, r7, lr}
   84bc6:	b089      	sub	sp, #36	; 0x24
   84bc8:	af00      	add	r7, sp, #0
   84bca:	60f8      	str	r0, [r7, #12]
   84bcc:	60b9      	str	r1, [r7, #8]
   84bce:	607a      	str	r2, [r7, #4]
   84bd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   84bd2:	2300      	movs	r3, #0
   84bd4:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   84bd6:	4b1d      	ldr	r3, [pc, #116]	; (84c4c <xTimerGenericCommand+0x88>)
   84bd8:	681b      	ldr	r3, [r3, #0]
   84bda:	2b00      	cmp	r3, #0
   84bdc:	d030      	beq.n	84c40 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   84bde:	68bb      	ldr	r3, [r7, #8]
   84be0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   84be2:	687b      	ldr	r3, [r7, #4]
   84be4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   84be6:	68fb      	ldr	r3, [r7, #12]
   84be8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   84bea:	68bb      	ldr	r3, [r7, #8]
   84bec:	2b05      	cmp	r3, #5
   84bee:	dc1c      	bgt.n	84c2a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   84bf0:	4b17      	ldr	r3, [pc, #92]	; (84c50 <xTimerGenericCommand+0x8c>)
   84bf2:	4798      	blx	r3
   84bf4:	4603      	mov	r3, r0
   84bf6:	2b02      	cmp	r3, #2
   84bf8:	d10b      	bne.n	84c12 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   84bfa:	4b14      	ldr	r3, [pc, #80]	; (84c4c <xTimerGenericCommand+0x88>)
   84bfc:	681a      	ldr	r2, [r3, #0]
   84bfe:	f107 0310 	add.w	r3, r7, #16
   84c02:	4610      	mov	r0, r2
   84c04:	4619      	mov	r1, r3
   84c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84c08:	2300      	movs	r3, #0
   84c0a:	4c12      	ldr	r4, [pc, #72]	; (84c54 <xTimerGenericCommand+0x90>)
   84c0c:	47a0      	blx	r4
   84c0e:	61f8      	str	r0, [r7, #28]
   84c10:	e016      	b.n	84c40 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84c12:	4b0e      	ldr	r3, [pc, #56]	; (84c4c <xTimerGenericCommand+0x88>)
   84c14:	681a      	ldr	r2, [r3, #0]
   84c16:	f107 0310 	add.w	r3, r7, #16
   84c1a:	4610      	mov	r0, r2
   84c1c:	4619      	mov	r1, r3
   84c1e:	2200      	movs	r2, #0
   84c20:	2300      	movs	r3, #0
   84c22:	4c0c      	ldr	r4, [pc, #48]	; (84c54 <xTimerGenericCommand+0x90>)
   84c24:	47a0      	blx	r4
   84c26:	61f8      	str	r0, [r7, #28]
   84c28:	e00a      	b.n	84c40 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   84c2a:	4b08      	ldr	r3, [pc, #32]	; (84c4c <xTimerGenericCommand+0x88>)
   84c2c:	681a      	ldr	r2, [r3, #0]
   84c2e:	f107 0310 	add.w	r3, r7, #16
   84c32:	4610      	mov	r0, r2
   84c34:	4619      	mov	r1, r3
   84c36:	683a      	ldr	r2, [r7, #0]
   84c38:	2300      	movs	r3, #0
   84c3a:	4c07      	ldr	r4, [pc, #28]	; (84c58 <xTimerGenericCommand+0x94>)
   84c3c:	47a0      	blx	r4
   84c3e:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84c40:	69fb      	ldr	r3, [r7, #28]
}
   84c42:	4618      	mov	r0, r3
   84c44:	3724      	adds	r7, #36	; 0x24
   84c46:	46bd      	mov	sp, r7
   84c48:	bd90      	pop	{r4, r7, pc}
   84c4a:	bf00      	nop
   84c4c:	2007a69c 	.word	0x2007a69c
   84c50:	00084925 	.word	0x00084925
   84c54:	000834e1 	.word	0x000834e1
   84c58:	000836a5 	.word	0x000836a5

00084c5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   84c5c:	b590      	push	{r4, r7, lr}
   84c5e:	b087      	sub	sp, #28
   84c60:	af02      	add	r7, sp, #8
   84c62:	6078      	str	r0, [r7, #4]
   84c64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84c66:	4b18      	ldr	r3, [pc, #96]	; (84cc8 <prvProcessExpiredTimer+0x6c>)
   84c68:	681b      	ldr	r3, [r3, #0]
   84c6a:	68db      	ldr	r3, [r3, #12]
   84c6c:	68db      	ldr	r3, [r3, #12]
   84c6e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84c70:	68fb      	ldr	r3, [r7, #12]
   84c72:	3304      	adds	r3, #4
   84c74:	4618      	mov	r0, r3
   84c76:	4b15      	ldr	r3, [pc, #84]	; (84ccc <prvProcessExpiredTimer+0x70>)
   84c78:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84c7a:	68fb      	ldr	r3, [r7, #12]
   84c7c:	69db      	ldr	r3, [r3, #28]
   84c7e:	2b01      	cmp	r3, #1
   84c80:	d11b      	bne.n	84cba <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   84c82:	68fb      	ldr	r3, [r7, #12]
   84c84:	699a      	ldr	r2, [r3, #24]
   84c86:	687b      	ldr	r3, [r7, #4]
   84c88:	4413      	add	r3, r2
   84c8a:	68f8      	ldr	r0, [r7, #12]
   84c8c:	4619      	mov	r1, r3
   84c8e:	683a      	ldr	r2, [r7, #0]
   84c90:	687b      	ldr	r3, [r7, #4]
   84c92:	4c0f      	ldr	r4, [pc, #60]	; (84cd0 <prvProcessExpiredTimer+0x74>)
   84c94:	47a0      	blx	r4
   84c96:	4603      	mov	r3, r0
   84c98:	2b01      	cmp	r3, #1
   84c9a:	d10e      	bne.n	84cba <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84c9c:	2300      	movs	r3, #0
   84c9e:	9300      	str	r3, [sp, #0]
   84ca0:	68f8      	ldr	r0, [r7, #12]
   84ca2:	2100      	movs	r1, #0
   84ca4:	687a      	ldr	r2, [r7, #4]
   84ca6:	2300      	movs	r3, #0
   84ca8:	4c0a      	ldr	r4, [pc, #40]	; (84cd4 <prvProcessExpiredTimer+0x78>)
   84caa:	47a0      	blx	r4
   84cac:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   84cae:	68bb      	ldr	r3, [r7, #8]
   84cb0:	2b00      	cmp	r3, #0
   84cb2:	d102      	bne.n	84cba <prvProcessExpiredTimer+0x5e>
   84cb4:	4b08      	ldr	r3, [pc, #32]	; (84cd8 <prvProcessExpiredTimer+0x7c>)
   84cb6:	4798      	blx	r3
   84cb8:	e7fe      	b.n	84cb8 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84cba:	68fb      	ldr	r3, [r7, #12]
   84cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84cbe:	68f8      	ldr	r0, [r7, #12]
   84cc0:	4798      	blx	r3
}
   84cc2:	3714      	adds	r7, #20
   84cc4:	46bd      	mov	sp, r7
   84cc6:	bd90      	pop	{r4, r7, pc}
   84cc8:	2007a694 	.word	0x2007a694
   84ccc:	00082c61 	.word	0x00082c61
   84cd0:	00084e21 	.word	0x00084e21
   84cd4:	00084bc5 	.word	0x00084bc5
   84cd8:	00082ed9 	.word	0x00082ed9

00084cdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   84cdc:	b580      	push	{r7, lr}
   84cde:	b084      	sub	sp, #16
   84ce0:	af00      	add	r7, sp, #0
   84ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   84ce4:	f107 0308 	add.w	r3, r7, #8
   84ce8:	4618      	mov	r0, r3
   84cea:	4b05      	ldr	r3, [pc, #20]	; (84d00 <prvTimerTask+0x24>)
   84cec:	4798      	blx	r3
   84cee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   84cf0:	68bb      	ldr	r3, [r7, #8]
   84cf2:	68f8      	ldr	r0, [r7, #12]
   84cf4:	4619      	mov	r1, r3
   84cf6:	4b03      	ldr	r3, [pc, #12]	; (84d04 <prvTimerTask+0x28>)
   84cf8:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   84cfa:	4b03      	ldr	r3, [pc, #12]	; (84d08 <prvTimerTask+0x2c>)
   84cfc:	4798      	blx	r3
	}
   84cfe:	e7f1      	b.n	84ce4 <prvTimerTask+0x8>
   84d00:	00084d91 	.word	0x00084d91
   84d04:	00084d0d 	.word	0x00084d0d
   84d08:	00084ea9 	.word	0x00084ea9

00084d0c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   84d0c:	b580      	push	{r7, lr}
   84d0e:	b084      	sub	sp, #16
   84d10:	af00      	add	r7, sp, #0
   84d12:	6078      	str	r0, [r7, #4]
   84d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   84d16:	4b17      	ldr	r3, [pc, #92]	; (84d74 <prvProcessTimerOrBlockTask+0x68>)
   84d18:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84d1a:	f107 0308 	add.w	r3, r7, #8
   84d1e:	4618      	mov	r0, r3
   84d20:	4b15      	ldr	r3, [pc, #84]	; (84d78 <prvProcessTimerOrBlockTask+0x6c>)
   84d22:	4798      	blx	r3
   84d24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   84d26:	68bb      	ldr	r3, [r7, #8]
   84d28:	2b00      	cmp	r3, #0
   84d2a:	d11e      	bne.n	84d6a <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   84d2c:	683b      	ldr	r3, [r7, #0]
   84d2e:	2b00      	cmp	r3, #0
   84d30:	d10a      	bne.n	84d48 <prvProcessTimerOrBlockTask+0x3c>
   84d32:	687a      	ldr	r2, [r7, #4]
   84d34:	68fb      	ldr	r3, [r7, #12]
   84d36:	429a      	cmp	r2, r3
   84d38:	d806      	bhi.n	84d48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   84d3a:	4b10      	ldr	r3, [pc, #64]	; (84d7c <prvProcessTimerOrBlockTask+0x70>)
   84d3c:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   84d3e:	6878      	ldr	r0, [r7, #4]
   84d40:	68f9      	ldr	r1, [r7, #12]
   84d42:	4b0f      	ldr	r3, [pc, #60]	; (84d80 <prvProcessTimerOrBlockTask+0x74>)
   84d44:	4798      	blx	r3
   84d46:	e012      	b.n	84d6e <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   84d48:	4b0e      	ldr	r3, [pc, #56]	; (84d84 <prvProcessTimerOrBlockTask+0x78>)
   84d4a:	681a      	ldr	r2, [r3, #0]
   84d4c:	6879      	ldr	r1, [r7, #4]
   84d4e:	68fb      	ldr	r3, [r7, #12]
   84d50:	1acb      	subs	r3, r1, r3
   84d52:	4610      	mov	r0, r2
   84d54:	4619      	mov	r1, r3
   84d56:	4b0c      	ldr	r3, [pc, #48]	; (84d88 <prvProcessTimerOrBlockTask+0x7c>)
   84d58:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   84d5a:	4b08      	ldr	r3, [pc, #32]	; (84d7c <prvProcessTimerOrBlockTask+0x70>)
   84d5c:	4798      	blx	r3
   84d5e:	4603      	mov	r3, r0
   84d60:	2b00      	cmp	r3, #0
   84d62:	d104      	bne.n	84d6e <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   84d64:	4b09      	ldr	r3, [pc, #36]	; (84d8c <prvProcessTimerOrBlockTask+0x80>)
   84d66:	4798      	blx	r3
   84d68:	e001      	b.n	84d6e <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   84d6a:	4b04      	ldr	r3, [pc, #16]	; (84d7c <prvProcessTimerOrBlockTask+0x70>)
   84d6c:	4798      	blx	r3
		}
	}
}
   84d6e:	3710      	adds	r7, #16
   84d70:	46bd      	mov	sp, r7
   84d72:	bd80      	pop	{r7, pc}
   84d74:	00083f49 	.word	0x00083f49
   84d78:	00084dd9 	.word	0x00084dd9
   84d7c:	00083f65 	.word	0x00083f65
   84d80:	00084c5d 	.word	0x00084c5d
   84d84:	2007a69c 	.word	0x2007a69c
   84d88:	00083be5 	.word	0x00083be5
   84d8c:	00082e3d 	.word	0x00082e3d

00084d90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   84d90:	b480      	push	{r7}
   84d92:	b085      	sub	sp, #20
   84d94:	af00      	add	r7, sp, #0
   84d96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   84d98:	4b0e      	ldr	r3, [pc, #56]	; (84dd4 <prvGetNextExpireTime+0x44>)
   84d9a:	681b      	ldr	r3, [r3, #0]
   84d9c:	681b      	ldr	r3, [r3, #0]
   84d9e:	2b00      	cmp	r3, #0
   84da0:	bf14      	ite	ne
   84da2:	2300      	movne	r3, #0
   84da4:	2301      	moveq	r3, #1
   84da6:	b2db      	uxtb	r3, r3
   84da8:	461a      	mov	r2, r3
   84daa:	687b      	ldr	r3, [r7, #4]
   84dac:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   84dae:	687b      	ldr	r3, [r7, #4]
   84db0:	681b      	ldr	r3, [r3, #0]
   84db2:	2b00      	cmp	r3, #0
   84db4:	d105      	bne.n	84dc2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84db6:	4b07      	ldr	r3, [pc, #28]	; (84dd4 <prvGetNextExpireTime+0x44>)
   84db8:	681b      	ldr	r3, [r3, #0]
   84dba:	68db      	ldr	r3, [r3, #12]
   84dbc:	681b      	ldr	r3, [r3, #0]
   84dbe:	60fb      	str	r3, [r7, #12]
   84dc0:	e001      	b.n	84dc6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   84dc2:	2300      	movs	r3, #0
   84dc4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   84dc6:	68fb      	ldr	r3, [r7, #12]
}
   84dc8:	4618      	mov	r0, r3
   84dca:	3714      	adds	r7, #20
   84dcc:	46bd      	mov	sp, r7
   84dce:	f85d 7b04 	ldr.w	r7, [sp], #4
   84dd2:	4770      	bx	lr
   84dd4:	2007a694 	.word	0x2007a694

00084dd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   84dd8:	b580      	push	{r7, lr}
   84dda:	b084      	sub	sp, #16
   84ddc:	af00      	add	r7, sp, #0
   84dde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   84de0:	4b0c      	ldr	r3, [pc, #48]	; (84e14 <prvSampleTimeNow+0x3c>)
   84de2:	4798      	blx	r3
   84de4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   84de6:	4b0c      	ldr	r3, [pc, #48]	; (84e18 <prvSampleTimeNow+0x40>)
   84de8:	681b      	ldr	r3, [r3, #0]
   84dea:	68fa      	ldr	r2, [r7, #12]
   84dec:	429a      	cmp	r2, r3
   84dee:	d205      	bcs.n	84dfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   84df0:	4b0a      	ldr	r3, [pc, #40]	; (84e1c <prvSampleTimeNow+0x44>)
   84df2:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   84df4:	687b      	ldr	r3, [r7, #4]
   84df6:	2201      	movs	r2, #1
   84df8:	601a      	str	r2, [r3, #0]
   84dfa:	e002      	b.n	84e02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   84dfc:	687b      	ldr	r3, [r7, #4]
   84dfe:	2200      	movs	r2, #0
   84e00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   84e02:	4b05      	ldr	r3, [pc, #20]	; (84e18 <prvSampleTimeNow+0x40>)
   84e04:	68fa      	ldr	r2, [r7, #12]
   84e06:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   84e08:	68fb      	ldr	r3, [r7, #12]
}
   84e0a:	4618      	mov	r0, r3
   84e0c:	3710      	adds	r7, #16
   84e0e:	46bd      	mov	sp, r7
   84e10:	bd80      	pop	{r7, pc}
   84e12:	bf00      	nop
   84e14:	00084089 	.word	0x00084089
   84e18:	2007a6a0 	.word	0x2007a6a0
   84e1c:	00084fd5 	.word	0x00084fd5

00084e20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   84e20:	b580      	push	{r7, lr}
   84e22:	b086      	sub	sp, #24
   84e24:	af00      	add	r7, sp, #0
   84e26:	60f8      	str	r0, [r7, #12]
   84e28:	60b9      	str	r1, [r7, #8]
   84e2a:	607a      	str	r2, [r7, #4]
   84e2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   84e2e:	2300      	movs	r3, #0
   84e30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   84e32:	68fb      	ldr	r3, [r7, #12]
   84e34:	68ba      	ldr	r2, [r7, #8]
   84e36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84e38:	68fb      	ldr	r3, [r7, #12]
   84e3a:	68fa      	ldr	r2, [r7, #12]
   84e3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   84e3e:	68ba      	ldr	r2, [r7, #8]
   84e40:	687b      	ldr	r3, [r7, #4]
   84e42:	429a      	cmp	r2, r3
   84e44:	d812      	bhi.n	84e6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   84e46:	687a      	ldr	r2, [r7, #4]
   84e48:	683b      	ldr	r3, [r7, #0]
   84e4a:	1ad2      	subs	r2, r2, r3
   84e4c:	68fb      	ldr	r3, [r7, #12]
   84e4e:	699b      	ldr	r3, [r3, #24]
   84e50:	429a      	cmp	r2, r3
   84e52:	d302      	bcc.n	84e5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   84e54:	2301      	movs	r3, #1
   84e56:	617b      	str	r3, [r7, #20]
   84e58:	e01b      	b.n	84e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   84e5a:	4b10      	ldr	r3, [pc, #64]	; (84e9c <prvInsertTimerInActiveList+0x7c>)
   84e5c:	681a      	ldr	r2, [r3, #0]
   84e5e:	68fb      	ldr	r3, [r7, #12]
   84e60:	3304      	adds	r3, #4
   84e62:	4610      	mov	r0, r2
   84e64:	4619      	mov	r1, r3
   84e66:	4b0e      	ldr	r3, [pc, #56]	; (84ea0 <prvInsertTimerInActiveList+0x80>)
   84e68:	4798      	blx	r3
   84e6a:	e012      	b.n	84e92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   84e6c:	687a      	ldr	r2, [r7, #4]
   84e6e:	683b      	ldr	r3, [r7, #0]
   84e70:	429a      	cmp	r2, r3
   84e72:	d206      	bcs.n	84e82 <prvInsertTimerInActiveList+0x62>
   84e74:	68ba      	ldr	r2, [r7, #8]
   84e76:	683b      	ldr	r3, [r7, #0]
   84e78:	429a      	cmp	r2, r3
   84e7a:	d302      	bcc.n	84e82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   84e7c:	2301      	movs	r3, #1
   84e7e:	617b      	str	r3, [r7, #20]
   84e80:	e007      	b.n	84e92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84e82:	4b08      	ldr	r3, [pc, #32]	; (84ea4 <prvInsertTimerInActiveList+0x84>)
   84e84:	681a      	ldr	r2, [r3, #0]
   84e86:	68fb      	ldr	r3, [r7, #12]
   84e88:	3304      	adds	r3, #4
   84e8a:	4610      	mov	r0, r2
   84e8c:	4619      	mov	r1, r3
   84e8e:	4b04      	ldr	r3, [pc, #16]	; (84ea0 <prvInsertTimerInActiveList+0x80>)
   84e90:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   84e92:	697b      	ldr	r3, [r7, #20]
}
   84e94:	4618      	mov	r0, r3
   84e96:	3718      	adds	r7, #24
   84e98:	46bd      	mov	sp, r7
   84e9a:	bd80      	pop	{r7, pc}
   84e9c:	2007a698 	.word	0x2007a698
   84ea0:	00082bf1 	.word	0x00082bf1
   84ea4:	2007a694 	.word	0x2007a694

00084ea8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   84ea8:	b590      	push	{r4, r7, lr}
   84eaa:	b08b      	sub	sp, #44	; 0x2c
   84eac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84eae:	e070      	b.n	84f92 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   84eb0:	68bb      	ldr	r3, [r7, #8]
   84eb2:	2b00      	cmp	r3, #0
   84eb4:	db6d      	blt.n	84f92 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   84eb6:	693b      	ldr	r3, [r7, #16]
   84eb8:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   84eba:	69fb      	ldr	r3, [r7, #28]
   84ebc:	695b      	ldr	r3, [r3, #20]
   84ebe:	2b00      	cmp	r3, #0
   84ec0:	d004      	beq.n	84ecc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84ec2:	69fb      	ldr	r3, [r7, #28]
   84ec4:	3304      	adds	r3, #4
   84ec6:	4618      	mov	r0, r3
   84ec8:	4b3a      	ldr	r3, [pc, #232]	; (84fb4 <prvProcessReceivedCommands+0x10c>)
   84eca:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84ecc:	1d3b      	adds	r3, r7, #4
   84ece:	4618      	mov	r0, r3
   84ed0:	4b39      	ldr	r3, [pc, #228]	; (84fb8 <prvProcessReceivedCommands+0x110>)
   84ed2:	4798      	blx	r3
   84ed4:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   84ed6:	68bb      	ldr	r3, [r7, #8]
   84ed8:	2b09      	cmp	r3, #9
   84eda:	d859      	bhi.n	84f90 <prvProcessReceivedCommands+0xe8>
   84edc:	a201      	add	r2, pc, #4	; (adr r2, 84ee4 <prvProcessReceivedCommands+0x3c>)
   84ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84ee2:	bf00      	nop
   84ee4:	00084f0d 	.word	0x00084f0d
   84ee8:	00084f0d 	.word	0x00084f0d
   84eec:	00084f0d 	.word	0x00084f0d
   84ef0:	00084f91 	.word	0x00084f91
   84ef4:	00084f5f 	.word	0x00084f5f
   84ef8:	00084f89 	.word	0x00084f89
   84efc:	00084f0d 	.word	0x00084f0d
   84f00:	00084f0d 	.word	0x00084f0d
   84f04:	00084f91 	.word	0x00084f91
   84f08:	00084f5f 	.word	0x00084f5f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   84f0c:	68fa      	ldr	r2, [r7, #12]
   84f0e:	69fb      	ldr	r3, [r7, #28]
   84f10:	699b      	ldr	r3, [r3, #24]
   84f12:	441a      	add	r2, r3
   84f14:	68fb      	ldr	r3, [r7, #12]
   84f16:	69f8      	ldr	r0, [r7, #28]
   84f18:	4611      	mov	r1, r2
   84f1a:	69ba      	ldr	r2, [r7, #24]
   84f1c:	4c27      	ldr	r4, [pc, #156]	; (84fbc <prvProcessReceivedCommands+0x114>)
   84f1e:	47a0      	blx	r4
   84f20:	4603      	mov	r3, r0
   84f22:	2b01      	cmp	r3, #1
   84f24:	d11a      	bne.n	84f5c <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84f26:	69fb      	ldr	r3, [r7, #28]
   84f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84f2a:	69f8      	ldr	r0, [r7, #28]
   84f2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84f2e:	69fb      	ldr	r3, [r7, #28]
   84f30:	69db      	ldr	r3, [r3, #28]
   84f32:	2b01      	cmp	r3, #1
   84f34:	d112      	bne.n	84f5c <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   84f36:	68fa      	ldr	r2, [r7, #12]
   84f38:	69fb      	ldr	r3, [r7, #28]
   84f3a:	699b      	ldr	r3, [r3, #24]
   84f3c:	4413      	add	r3, r2
   84f3e:	2200      	movs	r2, #0
   84f40:	9200      	str	r2, [sp, #0]
   84f42:	69f8      	ldr	r0, [r7, #28]
   84f44:	2100      	movs	r1, #0
   84f46:	461a      	mov	r2, r3
   84f48:	2300      	movs	r3, #0
   84f4a:	4c1d      	ldr	r4, [pc, #116]	; (84fc0 <prvProcessReceivedCommands+0x118>)
   84f4c:	47a0      	blx	r4
   84f4e:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   84f50:	697b      	ldr	r3, [r7, #20]
   84f52:	2b00      	cmp	r3, #0
   84f54:	d102      	bne.n	84f5c <prvProcessReceivedCommands+0xb4>
   84f56:	4b1b      	ldr	r3, [pc, #108]	; (84fc4 <prvProcessReceivedCommands+0x11c>)
   84f58:	4798      	blx	r3
   84f5a:	e7fe      	b.n	84f5a <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   84f5c:	e019      	b.n	84f92 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   84f5e:	68fa      	ldr	r2, [r7, #12]
   84f60:	69fb      	ldr	r3, [r7, #28]
   84f62:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   84f64:	69fb      	ldr	r3, [r7, #28]
   84f66:	699b      	ldr	r3, [r3, #24]
   84f68:	2b00      	cmp	r3, #0
   84f6a:	d102      	bne.n	84f72 <prvProcessReceivedCommands+0xca>
   84f6c:	4b15      	ldr	r3, [pc, #84]	; (84fc4 <prvProcessReceivedCommands+0x11c>)
   84f6e:	4798      	blx	r3
   84f70:	e7fe      	b.n	84f70 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   84f72:	69fb      	ldr	r3, [r7, #28]
   84f74:	699a      	ldr	r2, [r3, #24]
   84f76:	69bb      	ldr	r3, [r7, #24]
   84f78:	4413      	add	r3, r2
   84f7a:	69f8      	ldr	r0, [r7, #28]
   84f7c:	4619      	mov	r1, r3
   84f7e:	69ba      	ldr	r2, [r7, #24]
   84f80:	69bb      	ldr	r3, [r7, #24]
   84f82:	4c0e      	ldr	r4, [pc, #56]	; (84fbc <prvProcessReceivedCommands+0x114>)
   84f84:	47a0      	blx	r4
					break;
   84f86:	e004      	b.n	84f92 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   84f88:	69f8      	ldr	r0, [r7, #28]
   84f8a:	4b0f      	ldr	r3, [pc, #60]	; (84fc8 <prvProcessReceivedCommands+0x120>)
   84f8c:	4798      	blx	r3
					break;
   84f8e:	e000      	b.n	84f92 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   84f90:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84f92:	4b0e      	ldr	r3, [pc, #56]	; (84fcc <prvProcessReceivedCommands+0x124>)
   84f94:	681a      	ldr	r2, [r3, #0]
   84f96:	f107 0308 	add.w	r3, r7, #8
   84f9a:	4610      	mov	r0, r2
   84f9c:	4619      	mov	r1, r3
   84f9e:	2200      	movs	r2, #0
   84fa0:	2300      	movs	r3, #0
   84fa2:	4c0b      	ldr	r4, [pc, #44]	; (84fd0 <prvProcessReceivedCommands+0x128>)
   84fa4:	47a0      	blx	r4
   84fa6:	4603      	mov	r3, r0
   84fa8:	2b00      	cmp	r3, #0
   84faa:	d181      	bne.n	84eb0 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   84fac:	3724      	adds	r7, #36	; 0x24
   84fae:	46bd      	mov	sp, r7
   84fb0:	bd90      	pop	{r4, r7, pc}
   84fb2:	bf00      	nop
   84fb4:	00082c61 	.word	0x00082c61
   84fb8:	00084dd9 	.word	0x00084dd9
   84fbc:	00084e21 	.word	0x00084e21
   84fc0:	00084bc5 	.word	0x00084bc5
   84fc4:	00082ed9 	.word	0x00082ed9
   84fc8:	00083175 	.word	0x00083175
   84fcc:	2007a69c 	.word	0x2007a69c
   84fd0:	000837a1 	.word	0x000837a1

00084fd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   84fd4:	b590      	push	{r4, r7, lr}
   84fd6:	b089      	sub	sp, #36	; 0x24
   84fd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84fda:	e03d      	b.n	85058 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84fdc:	4b27      	ldr	r3, [pc, #156]	; (8507c <prvSwitchTimerLists+0xa8>)
   84fde:	681b      	ldr	r3, [r3, #0]
   84fe0:	68db      	ldr	r3, [r3, #12]
   84fe2:	681b      	ldr	r3, [r3, #0]
   84fe4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84fe6:	4b25      	ldr	r3, [pc, #148]	; (8507c <prvSwitchTimerLists+0xa8>)
   84fe8:	681b      	ldr	r3, [r3, #0]
   84fea:	68db      	ldr	r3, [r3, #12]
   84fec:	68db      	ldr	r3, [r3, #12]
   84fee:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84ff0:	693b      	ldr	r3, [r7, #16]
   84ff2:	3304      	adds	r3, #4
   84ff4:	4618      	mov	r0, r3
   84ff6:	4b22      	ldr	r3, [pc, #136]	; (85080 <prvSwitchTimerLists+0xac>)
   84ff8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84ffa:	693b      	ldr	r3, [r7, #16]
   84ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84ffe:	6938      	ldr	r0, [r7, #16]
   85000:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85002:	693b      	ldr	r3, [r7, #16]
   85004:	69db      	ldr	r3, [r3, #28]
   85006:	2b01      	cmp	r3, #1
   85008:	d126      	bne.n	85058 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   8500a:	693b      	ldr	r3, [r7, #16]
   8500c:	699a      	ldr	r2, [r3, #24]
   8500e:	697b      	ldr	r3, [r7, #20]
   85010:	4413      	add	r3, r2
   85012:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   85014:	68fa      	ldr	r2, [r7, #12]
   85016:	697b      	ldr	r3, [r7, #20]
   85018:	429a      	cmp	r2, r3
   8501a:	d90e      	bls.n	8503a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8501c:	693b      	ldr	r3, [r7, #16]
   8501e:	68fa      	ldr	r2, [r7, #12]
   85020:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   85022:	693b      	ldr	r3, [r7, #16]
   85024:	693a      	ldr	r2, [r7, #16]
   85026:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   85028:	4b14      	ldr	r3, [pc, #80]	; (8507c <prvSwitchTimerLists+0xa8>)
   8502a:	681a      	ldr	r2, [r3, #0]
   8502c:	693b      	ldr	r3, [r7, #16]
   8502e:	3304      	adds	r3, #4
   85030:	4610      	mov	r0, r2
   85032:	4619      	mov	r1, r3
   85034:	4b13      	ldr	r3, [pc, #76]	; (85084 <prvSwitchTimerLists+0xb0>)
   85036:	4798      	blx	r3
   85038:	e00e      	b.n	85058 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8503a:	2300      	movs	r3, #0
   8503c:	9300      	str	r3, [sp, #0]
   8503e:	6938      	ldr	r0, [r7, #16]
   85040:	2100      	movs	r1, #0
   85042:	697a      	ldr	r2, [r7, #20]
   85044:	2300      	movs	r3, #0
   85046:	4c10      	ldr	r4, [pc, #64]	; (85088 <prvSwitchTimerLists+0xb4>)
   85048:	47a0      	blx	r4
   8504a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   8504c:	68bb      	ldr	r3, [r7, #8]
   8504e:	2b00      	cmp	r3, #0
   85050:	d102      	bne.n	85058 <prvSwitchTimerLists+0x84>
   85052:	4b0e      	ldr	r3, [pc, #56]	; (8508c <prvSwitchTimerLists+0xb8>)
   85054:	4798      	blx	r3
   85056:	e7fe      	b.n	85056 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85058:	4b08      	ldr	r3, [pc, #32]	; (8507c <prvSwitchTimerLists+0xa8>)
   8505a:	681b      	ldr	r3, [r3, #0]
   8505c:	681b      	ldr	r3, [r3, #0]
   8505e:	2b00      	cmp	r3, #0
   85060:	d1bc      	bne.n	84fdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   85062:	4b06      	ldr	r3, [pc, #24]	; (8507c <prvSwitchTimerLists+0xa8>)
   85064:	681b      	ldr	r3, [r3, #0]
   85066:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   85068:	4b09      	ldr	r3, [pc, #36]	; (85090 <prvSwitchTimerLists+0xbc>)
   8506a:	681a      	ldr	r2, [r3, #0]
   8506c:	4b03      	ldr	r3, [pc, #12]	; (8507c <prvSwitchTimerLists+0xa8>)
   8506e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   85070:	4b07      	ldr	r3, [pc, #28]	; (85090 <prvSwitchTimerLists+0xbc>)
   85072:	687a      	ldr	r2, [r7, #4]
   85074:	601a      	str	r2, [r3, #0]
}
   85076:	371c      	adds	r7, #28
   85078:	46bd      	mov	sp, r7
   8507a:	bd90      	pop	{r4, r7, pc}
   8507c:	2007a694 	.word	0x2007a694
   85080:	00082c61 	.word	0x00082c61
   85084:	00082bf1 	.word	0x00082bf1
   85088:	00084bc5 	.word	0x00084bc5
   8508c:	00082ed9 	.word	0x00082ed9
   85090:	2007a698 	.word	0x2007a698

00085094 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   85094:	b580      	push	{r7, lr}
   85096:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   85098:	4b11      	ldr	r3, [pc, #68]	; (850e0 <prvCheckForValidListAndQueue+0x4c>)
   8509a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8509c:	4b11      	ldr	r3, [pc, #68]	; (850e4 <prvCheckForValidListAndQueue+0x50>)
   8509e:	681b      	ldr	r3, [r3, #0]
   850a0:	2b00      	cmp	r3, #0
   850a2:	d11a      	bne.n	850da <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   850a4:	4810      	ldr	r0, [pc, #64]	; (850e8 <prvCheckForValidListAndQueue+0x54>)
   850a6:	4b11      	ldr	r3, [pc, #68]	; (850ec <prvCheckForValidListAndQueue+0x58>)
   850a8:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   850aa:	4811      	ldr	r0, [pc, #68]	; (850f0 <prvCheckForValidListAndQueue+0x5c>)
   850ac:	4b0f      	ldr	r3, [pc, #60]	; (850ec <prvCheckForValidListAndQueue+0x58>)
   850ae:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   850b0:	4b10      	ldr	r3, [pc, #64]	; (850f4 <prvCheckForValidListAndQueue+0x60>)
   850b2:	4a0d      	ldr	r2, [pc, #52]	; (850e8 <prvCheckForValidListAndQueue+0x54>)
   850b4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   850b6:	4b10      	ldr	r3, [pc, #64]	; (850f8 <prvCheckForValidListAndQueue+0x64>)
   850b8:	4a0d      	ldr	r2, [pc, #52]	; (850f0 <prvCheckForValidListAndQueue+0x5c>)
   850ba:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   850bc:	2005      	movs	r0, #5
   850be:	210c      	movs	r1, #12
   850c0:	2200      	movs	r2, #0
   850c2:	4b0e      	ldr	r3, [pc, #56]	; (850fc <prvCheckForValidListAndQueue+0x68>)
   850c4:	4798      	blx	r3
   850c6:	4602      	mov	r2, r0
   850c8:	4b06      	ldr	r3, [pc, #24]	; (850e4 <prvCheckForValidListAndQueue+0x50>)
   850ca:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   850cc:	4b05      	ldr	r3, [pc, #20]	; (850e4 <prvCheckForValidListAndQueue+0x50>)
   850ce:	681b      	ldr	r3, [r3, #0]
   850d0:	2b00      	cmp	r3, #0
   850d2:	d102      	bne.n	850da <prvCheckForValidListAndQueue+0x46>
   850d4:	4b0a      	ldr	r3, [pc, #40]	; (85100 <prvCheckForValidListAndQueue+0x6c>)
   850d6:	4798      	blx	r3
   850d8:	e7fe      	b.n	850d8 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   850da:	4b0a      	ldr	r3, [pc, #40]	; (85104 <prvCheckForValidListAndQueue+0x70>)
   850dc:	4798      	blx	r3
}
   850de:	bd80      	pop	{r7, pc}
   850e0:	00082e5d 	.word	0x00082e5d
   850e4:	2007a69c 	.word	0x2007a69c
   850e8:	2007a66c 	.word	0x2007a66c
   850ec:	00082b51 	.word	0x00082b51
   850f0:	2007a680 	.word	0x2007a680
   850f4:	2007a694 	.word	0x2007a694
   850f8:	2007a698 	.word	0x2007a698
   850fc:	00083455 	.word	0x00083455
   85100:	00082ed9 	.word	0x00082ed9
   85104:	00082ea1 	.word	0x00082ea1

00085108 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   85108:	b480      	push	{r7}
   8510a:	b083      	sub	sp, #12
   8510c:	af00      	add	r7, sp, #0
   8510e:	4603      	mov	r3, r0
   85110:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85112:	4b08      	ldr	r3, [pc, #32]	; (85134 <NVIC_EnableIRQ+0x2c>)
   85114:	f997 2007 	ldrsb.w	r2, [r7, #7]
   85118:	0952      	lsrs	r2, r2, #5
   8511a:	79f9      	ldrb	r1, [r7, #7]
   8511c:	f001 011f 	and.w	r1, r1, #31
   85120:	2001      	movs	r0, #1
   85122:	fa00 f101 	lsl.w	r1, r0, r1
   85126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8512a:	370c      	adds	r7, #12
   8512c:	46bd      	mov	sp, r7
   8512e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85132:	4770      	bx	lr
   85134:	e000e100 	.word	0xe000e100

00085138 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   85138:	b480      	push	{r7}
   8513a:	b083      	sub	sp, #12
   8513c:	af00      	add	r7, sp, #0
   8513e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   85140:	687b      	ldr	r3, [r7, #4]
   85142:	2b07      	cmp	r3, #7
   85144:	d825      	bhi.n	85192 <osc_get_rate+0x5a>
   85146:	a201      	add	r2, pc, #4	; (adr r2, 8514c <osc_get_rate+0x14>)
   85148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8514c:	0008516d 	.word	0x0008516d
   85150:	00085173 	.word	0x00085173
   85154:	00085179 	.word	0x00085179
   85158:	0008517f 	.word	0x0008517f
   8515c:	00085183 	.word	0x00085183
   85160:	00085187 	.word	0x00085187
   85164:	0008518b 	.word	0x0008518b
   85168:	0008518f 	.word	0x0008518f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8516c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   85170:	e010      	b.n	85194 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   85172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85176:	e00d      	b.n	85194 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   85178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8517c:	e00a      	b.n	85194 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8517e:	4b08      	ldr	r3, [pc, #32]	; (851a0 <osc_get_rate+0x68>)
   85180:	e008      	b.n	85194 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   85182:	4b08      	ldr	r3, [pc, #32]	; (851a4 <osc_get_rate+0x6c>)
   85184:	e006      	b.n	85194 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   85186:	4b08      	ldr	r3, [pc, #32]	; (851a8 <osc_get_rate+0x70>)
   85188:	e004      	b.n	85194 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8518a:	4b07      	ldr	r3, [pc, #28]	; (851a8 <osc_get_rate+0x70>)
   8518c:	e002      	b.n	85194 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8518e:	4b06      	ldr	r3, [pc, #24]	; (851a8 <osc_get_rate+0x70>)
   85190:	e000      	b.n	85194 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   85192:	2300      	movs	r3, #0
}
   85194:	4618      	mov	r0, r3
   85196:	370c      	adds	r7, #12
   85198:	46bd      	mov	sp, r7
   8519a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8519e:	4770      	bx	lr
   851a0:	003d0900 	.word	0x003d0900
   851a4:	007a1200 	.word	0x007a1200
   851a8:	00b71b00 	.word	0x00b71b00

000851ac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   851ac:	b580      	push	{r7, lr}
   851ae:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   851b0:	2006      	movs	r0, #6
   851b2:	4b04      	ldr	r3, [pc, #16]	; (851c4 <sysclk_get_main_hz+0x18>)
   851b4:	4798      	blx	r3
   851b6:	4602      	mov	r2, r0
   851b8:	4613      	mov	r3, r2
   851ba:	00db      	lsls	r3, r3, #3
   851bc:	1a9b      	subs	r3, r3, r2
   851be:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   851c0:	4618      	mov	r0, r3
   851c2:	bd80      	pop	{r7, pc}
   851c4:	00085139 	.word	0x00085139

000851c8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   851c8:	b580      	push	{r7, lr}
   851ca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   851cc:	4b02      	ldr	r3, [pc, #8]	; (851d8 <sysclk_get_cpu_hz+0x10>)
   851ce:	4798      	blx	r3
   851d0:	4603      	mov	r3, r0
   851d2:	085b      	lsrs	r3, r3, #1
}
   851d4:	4618      	mov	r0, r3
   851d6:	bd80      	pop	{r7, pc}
   851d8:	000851ad 	.word	0x000851ad

000851dc <CAN1_Handler>:

/************************************************************************/
/* Default Interrupt Handler for CAN1								    */
/************************************************************************/
void CAN1_Handler(void)
{
   851dc:	b580      	push	{r7, lr}
   851de:	b082      	sub	sp, #8
   851e0:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   851e2:	481d      	ldr	r0, [pc, #116]	; (85258 <CAN1_Handler+0x7c>)
   851e4:	491d      	ldr	r1, [pc, #116]	; (8525c <CAN1_Handler+0x80>)
   851e6:	4b1e      	ldr	r3, [pc, #120]	; (85260 <CAN1_Handler+0x84>)
   851e8:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   851ea:	481e      	ldr	r0, [pc, #120]	; (85264 <CAN1_Handler+0x88>)
   851ec:	4b1e      	ldr	r3, [pc, #120]	; (85268 <CAN1_Handler+0x8c>)
   851ee:	4798      	blx	r3
   851f0:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   851f2:	683b      	ldr	r3, [r7, #0]
   851f4:	b2db      	uxtb	r3, r3
   851f6:	2b00      	cmp	r3, #0
   851f8:	d02b      	beq.n	85252 <CAN1_Handler+0x76>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   851fa:	2300      	movs	r3, #0
   851fc:	71fb      	strb	r3, [r7, #7]
   851fe:	e025      	b.n	8524c <CAN1_Handler+0x70>
			ul_status = can_mailbox_get_status(CAN1, i);
   85200:	79fb      	ldrb	r3, [r7, #7]
   85202:	4818      	ldr	r0, [pc, #96]	; (85264 <CAN1_Handler+0x88>)
   85204:	4619      	mov	r1, r3
   85206:	4b19      	ldr	r3, [pc, #100]	; (8526c <CAN1_Handler+0x90>)
   85208:	4798      	blx	r3
   8520a:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   8520c:	683b      	ldr	r3, [r7, #0]
   8520e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   85212:	2b00      	cmp	r3, #0
   85214:	d017      	beq.n	85246 <CAN1_Handler+0x6a>
				can1_mailbox.ul_mb_idx = i;
   85216:	79fa      	ldrb	r2, [r7, #7]
   85218:	4b0f      	ldr	r3, [pc, #60]	; (85258 <CAN1_Handler+0x7c>)
   8521a:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   8521c:	4b0e      	ldr	r3, [pc, #56]	; (85258 <CAN1_Handler+0x7c>)
   8521e:	683a      	ldr	r2, [r7, #0]
   85220:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   85222:	4810      	ldr	r0, [pc, #64]	; (85264 <CAN1_Handler+0x88>)
   85224:	490c      	ldr	r1, [pc, #48]	; (85258 <CAN1_Handler+0x7c>)
   85226:	4b12      	ldr	r3, [pc, #72]	; (85270 <CAN1_Handler+0x94>)
   85228:	4798      	blx	r3
				
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   8522a:	79fb      	ldrb	r3, [r7, #7]
   8522c:	480a      	ldr	r0, [pc, #40]	; (85258 <CAN1_Handler+0x7c>)
   8522e:	4619      	mov	r1, r3
   85230:	4b10      	ldr	r3, [pc, #64]	; (85274 <CAN1_Handler+0x98>)
   85232:	4798      	blx	r3
				
				/* Decode CAN Message */
				debug_can_msg(&can1_mailbox, CAN1);
   85234:	4808      	ldr	r0, [pc, #32]	; (85258 <CAN1_Handler+0x7c>)
   85236:	490b      	ldr	r1, [pc, #44]	; (85264 <CAN1_Handler+0x88>)
   85238:	4b0f      	ldr	r3, [pc, #60]	; (85278 <CAN1_Handler+0x9c>)
   8523a:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   8523c:	4806      	ldr	r0, [pc, #24]	; (85258 <CAN1_Handler+0x7c>)
   8523e:	4907      	ldr	r1, [pc, #28]	; (8525c <CAN1_Handler+0x80>)
   85240:	4b0e      	ldr	r3, [pc, #56]	; (8527c <CAN1_Handler+0xa0>)
   85242:	4798      	blx	r3
				break;
   85244:	e005      	b.n	85252 <CAN1_Handler+0x76>
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85246:	79fb      	ldrb	r3, [r7, #7]
   85248:	3301      	adds	r3, #1
   8524a:	71fb      	strb	r3, [r7, #7]
   8524c:	79fb      	ldrb	r3, [r7, #7]
   8524e:	2b07      	cmp	r3, #7
   85250:	d9d6      	bls.n	85200 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   85252:	3708      	adds	r7, #8
   85254:	46bd      	mov	sp, r7
   85256:	bd80      	pop	{r7, pc}
   85258:	2007a6b8 	.word	0x2007a6b8
   8525c:	2007a6ec 	.word	0x2007a6ec
   85260:	000856e1 	.word	0x000856e1
   85264:	400b8000 	.word	0x400b8000
   85268:	00081925 	.word	0x00081925
   8526c:	00081969 	.word	0x00081969
   85270:	00081ae9 	.word	0x00081ae9
   85274:	00085425 	.word	0x00085425
   85278:	00085321 	.word	0x00085321
   8527c:	00085751 	.word	0x00085751

00085280 <CAN0_Handler>:
/************************************************************************/
/* Default Interrupt Handler for CAN0								    */
/************************************************************************/
void CAN0_Handler(void)
{
   85280:	b580      	push	{r7, lr}
   85282:	b082      	sub	sp, #8
   85284:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   85286:	481c      	ldr	r0, [pc, #112]	; (852f8 <CAN0_Handler+0x78>)
   85288:	491c      	ldr	r1, [pc, #112]	; (852fc <CAN0_Handler+0x7c>)
   8528a:	4b1d      	ldr	r3, [pc, #116]	; (85300 <CAN0_Handler+0x80>)
   8528c:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   8528e:	481d      	ldr	r0, [pc, #116]	; (85304 <CAN0_Handler+0x84>)
   85290:	4b1d      	ldr	r3, [pc, #116]	; (85308 <CAN0_Handler+0x88>)
   85292:	4798      	blx	r3
   85294:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   85296:	683b      	ldr	r3, [r7, #0]
   85298:	b2db      	uxtb	r3, r3
   8529a:	2b00      	cmp	r3, #0
   8529c:	d029      	beq.n	852f2 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8529e:	2300      	movs	r3, #0
   852a0:	71fb      	strb	r3, [r7, #7]
   852a2:	e023      	b.n	852ec <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   852a4:	79fb      	ldrb	r3, [r7, #7]
   852a6:	4817      	ldr	r0, [pc, #92]	; (85304 <CAN0_Handler+0x84>)
   852a8:	4619      	mov	r1, r3
   852aa:	4b18      	ldr	r3, [pc, #96]	; (8530c <CAN0_Handler+0x8c>)
   852ac:	4798      	blx	r3
   852ae:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   852b0:	683b      	ldr	r3, [r7, #0]
   852b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   852b6:	2b00      	cmp	r3, #0
   852b8:	d015      	beq.n	852e6 <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   852ba:	79fa      	ldrb	r2, [r7, #7]
   852bc:	4b0e      	ldr	r3, [pc, #56]	; (852f8 <CAN0_Handler+0x78>)
   852be:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   852c0:	4b0d      	ldr	r3, [pc, #52]	; (852f8 <CAN0_Handler+0x78>)
   852c2:	683a      	ldr	r2, [r7, #0]
   852c4:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   852c6:	480f      	ldr	r0, [pc, #60]	; (85304 <CAN0_Handler+0x84>)
   852c8:	490b      	ldr	r1, [pc, #44]	; (852f8 <CAN0_Handler+0x78>)
   852ca:	4b11      	ldr	r3, [pc, #68]	; (85310 <CAN0_Handler+0x90>)
   852cc:	4798      	blx	r3
				g_ul_recv_status = 1;
   852ce:	4b11      	ldr	r3, [pc, #68]	; (85314 <CAN0_Handler+0x94>)
   852d0:	2201      	movs	r2, #1
   852d2:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   852d4:	4808      	ldr	r0, [pc, #32]	; (852f8 <CAN0_Handler+0x78>)
   852d6:	490b      	ldr	r1, [pc, #44]	; (85304 <CAN0_Handler+0x84>)
   852d8:	4b0f      	ldr	r3, [pc, #60]	; (85318 <CAN0_Handler+0x98>)
   852da:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   852dc:	4806      	ldr	r0, [pc, #24]	; (852f8 <CAN0_Handler+0x78>)
   852de:	4907      	ldr	r1, [pc, #28]	; (852fc <CAN0_Handler+0x7c>)
   852e0:	4b0e      	ldr	r3, [pc, #56]	; (8531c <CAN0_Handler+0x9c>)
   852e2:	4798      	blx	r3
				break;
   852e4:	e005      	b.n	852f2 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   852e6:	79fb      	ldrb	r3, [r7, #7]
   852e8:	3301      	adds	r3, #1
   852ea:	71fb      	strb	r3, [r7, #7]
   852ec:	79fb      	ldrb	r3, [r7, #7]
   852ee:	2b07      	cmp	r3, #7
   852f0:	d9d8      	bls.n	852a4 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   852f2:	3708      	adds	r7, #8
   852f4:	46bd      	mov	sp, r7
   852f6:	bd80      	pop	{r7, pc}
   852f8:	2007a718 	.word	0x2007a718
   852fc:	2007a740 	.word	0x2007a740
   85300:	000856e1 	.word	0x000856e1
   85304:	400b4000 	.word	0x400b4000
   85308:	00081925 	.word	0x00081925
   8530c:	00081969 	.word	0x00081969
   85310:	00081ae9 	.word	0x00081ae9
   85314:	2007a6a4 	.word	0x2007a6a4
   85318:	00085321 	.word	0x00085321
   8531c:	00085751 	.word	0x00085751

00085320 <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   85320:	b580      	push	{r7, lr}
   85322:	b084      	sub	sp, #16
   85324:	af00      	add	r7, sp, #0
   85326:	6078      	str	r0, [r7, #4]
   85328:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8532a:	687b      	ldr	r3, [r7, #4]
   8532c:	699b      	ldr	r3, [r3, #24]
   8532e:	60fb      	str	r3, [r7, #12]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85330:	687b      	ldr	r3, [r7, #4]
   85332:	69db      	ldr	r3, [r3, #28]
   85334:	60bb      	str	r3, [r7, #8]
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   85336:	68fb      	ldr	r3, [r7, #12]
   85338:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   8533c:	bf14      	ite	ne
   8533e:	2300      	movne	r3, #0
   85340:	2301      	moveq	r3, #1
   85342:	b2da      	uxtb	r2, r3
   85344:	6839      	ldr	r1, [r7, #0]
   85346:	4b33      	ldr	r3, [pc, #204]	; (85414 <debug_can_msg+0xf4>)
   85348:	4299      	cmp	r1, r3
   8534a:	bf14      	ite	ne
   8534c:	2300      	movne	r3, #0
   8534e:	2301      	moveq	r3, #1
   85350:	b2db      	uxtb	r3, r3
   85352:	4013      	ands	r3, r2
   85354:	b2db      	uxtb	r3, r3
   85356:	2b00      	cmp	r3, #0
   85358:	d002      	beq.n	85360 <debug_can_msg+0x40>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   8535a:	2057      	movs	r0, #87	; 0x57
   8535c:	4b2e      	ldr	r3, [pc, #184]	; (85418 <debug_can_msg+0xf8>)
   8535e:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN1))
   85360:	68fb      	ldr	r3, [r7, #12]
   85362:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   85366:	bf14      	ite	ne
   85368:	2300      	movne	r3, #0
   8536a:	2301      	moveq	r3, #1
   8536c:	b2da      	uxtb	r2, r3
   8536e:	6839      	ldr	r1, [r7, #0]
   85370:	4b28      	ldr	r3, [pc, #160]	; (85414 <debug_can_msg+0xf4>)
   85372:	4299      	cmp	r1, r3
   85374:	bf14      	ite	ne
   85376:	2300      	movne	r3, #0
   85378:	2301      	moveq	r3, #1
   8537a:	b2db      	uxtb	r3, r3
   8537c:	4013      	ands	r3, r2
   8537e:	b2db      	uxtb	r3, r3
   85380:	2b00      	cmp	r3, #0
   85382:	d002      	beq.n	8538a <debug_can_msg+0x6a>
	{
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   85384:	2055      	movs	r0, #85	; 0x55
   85386:	4b24      	ldr	r3, [pc, #144]	; (85418 <debug_can_msg+0xf8>)
   85388:	4798      	blx	r3
	}
	
	if ((uh_data_incom == DATA_RETURNED) & (controller == CAN1) & (glob_drf == 0))
   8538a:	68bb      	ldr	r3, [r7, #8]
   8538c:	2b55      	cmp	r3, #85	; 0x55
   8538e:	bf14      	ite	ne
   85390:	2300      	movne	r3, #0
   85392:	2301      	moveq	r3, #1
   85394:	b2da      	uxtb	r2, r3
   85396:	6839      	ldr	r1, [r7, #0]
   85398:	4b1e      	ldr	r3, [pc, #120]	; (85414 <debug_can_msg+0xf4>)
   8539a:	4299      	cmp	r1, r3
   8539c:	bf14      	ite	ne
   8539e:	2300      	movne	r3, #0
   853a0:	2301      	moveq	r3, #1
   853a2:	b2db      	uxtb	r3, r3
   853a4:	4013      	ands	r3, r2
   853a6:	b2db      	uxtb	r3, r3
   853a8:	461a      	mov	r2, r3
   853aa:	4b1c      	ldr	r3, [pc, #112]	; (8541c <debug_can_msg+0xfc>)
   853ac:	781b      	ldrb	r3, [r3, #0]
   853ae:	2b00      	cmp	r3, #0
   853b0:	bf14      	ite	ne
   853b2:	2300      	movne	r3, #0
   853b4:	2301      	moveq	r3, #1
   853b6:	b2db      	uxtb	r3, r3
   853b8:	4013      	ands	r3, r2
   853ba:	2b00      	cmp	r3, #0
   853bc:	d005      	beq.n	853ca <debug_can_msg+0xaa>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   853be:	2056      	movs	r0, #86	; 0x56
   853c0:	4b15      	ldr	r3, [pc, #84]	; (85418 <debug_can_msg+0xf8>)
   853c2:	4798      	blx	r3
		glob_drf = 1;
   853c4:	4b15      	ldr	r3, [pc, #84]	; (8541c <debug_can_msg+0xfc>)
   853c6:	2201      	movs	r2, #1
   853c8:	701a      	strb	r2, [r3, #0]
	}
	
	if ((uh_data_incom == MESSAGE_RETURNED) & (controller == CAN1) & (glob_comf == 0))
   853ca:	68bb      	ldr	r3, [r7, #8]
   853cc:	2b00      	cmp	r3, #0
   853ce:	bf14      	ite	ne
   853d0:	2300      	movne	r3, #0
   853d2:	2301      	moveq	r3, #1
   853d4:	b2da      	uxtb	r2, r3
   853d6:	6839      	ldr	r1, [r7, #0]
   853d8:	4b0e      	ldr	r3, [pc, #56]	; (85414 <debug_can_msg+0xf4>)
   853da:	4299      	cmp	r1, r3
   853dc:	bf14      	ite	ne
   853de:	2300      	movne	r3, #0
   853e0:	2301      	moveq	r3, #1
   853e2:	b2db      	uxtb	r3, r3
   853e4:	4013      	ands	r3, r2
   853e6:	b2db      	uxtb	r3, r3
   853e8:	461a      	mov	r2, r3
   853ea:	4b0d      	ldr	r3, [pc, #52]	; (85420 <debug_can_msg+0x100>)
   853ec:	781b      	ldrb	r3, [r3, #0]
   853ee:	2b00      	cmp	r3, #0
   853f0:	bf14      	ite	ne
   853f2:	2300      	movne	r3, #0
   853f4:	2301      	moveq	r3, #1
   853f6:	b2db      	uxtb	r3, r3
   853f8:	4013      	ands	r3, r2
   853fa:	2b00      	cmp	r3, #0
   853fc:	d005      	beq.n	8540a <debug_can_msg+0xea>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of a message
   853fe:	2056      	movs	r0, #86	; 0x56
   85400:	4b05      	ldr	r3, [pc, #20]	; (85418 <debug_can_msg+0xf8>)
   85402:	4798      	blx	r3
		glob_comf = 1;
   85404:	4b06      	ldr	r3, [pc, #24]	; (85420 <debug_can_msg+0x100>)
   85406:	2201      	movs	r2, #1
   85408:	701a      	strb	r2, [r3, #0]
	}

	return;
   8540a:	bf00      	nop
}
   8540c:	3710      	adds	r7, #16
   8540e:	46bd      	mov	sp, r7
   85410:	bd80      	pop	{r7, pc}
   85412:	bf00      	nop
   85414:	400b8000 	.word	0x400b8000
   85418:	00081ee9 	.word	0x00081ee9
   8541c:	2007a6d8 	.word	0x2007a6d8
   85420:	2007a770 	.word	0x2007a770

00085424 <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   85424:	b480      	push	{r7}
   85426:	b085      	sub	sp, #20
   85428:	af00      	add	r7, sp, #0
   8542a:	6078      	str	r0, [r7, #4]
   8542c:	460b      	mov	r3, r1
   8542e:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85430:	687b      	ldr	r3, [r7, #4]
   85432:	699b      	ldr	r3, [r3, #24]
   85434:	60fb      	str	r3, [r7, #12]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85436:	687b      	ldr	r3, [r7, #4]
   85438:	69db      	ldr	r3, [r3, #28]
   8543a:	60bb      	str	r3, [r7, #8]

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   8543c:	78fb      	ldrb	r3, [r7, #3]
   8543e:	2b07      	cmp	r3, #7
   85440:	d82b      	bhi.n	8549a <store_can_msg+0x76>
   85442:	a201      	add	r2, pc, #4	; (adr r2, 85448 <store_can_msg+0x24>)
   85444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85448:	00085469 	.word	0x00085469
   8544c:	0008549b 	.word	0x0008549b
   85450:	0008549b 	.word	0x0008549b
   85454:	0008549b 	.word	0x0008549b
   85458:	0008549b 	.word	0x0008549b
   8545c:	00085475 	.word	0x00085475
   85460:	00085481 	.word	0x00085481
   85464:	0008548d 	.word	0x0008548d
	{		
	case 0 :
		can_glob_data_reg[0] = ul_data_incom;		// Global CAN Data Registers.
   85468:	4b0f      	ldr	r3, [pc, #60]	; (854a8 <store_can_msg+0x84>)
   8546a:	68fa      	ldr	r2, [r7, #12]
   8546c:	601a      	str	r2, [r3, #0]
		can_glob_data_reg[1] = uh_data_incom;
   8546e:	4b0e      	ldr	r3, [pc, #56]	; (854a8 <store_can_msg+0x84>)
   85470:	68ba      	ldr	r2, [r7, #8]
   85472:	605a      	str	r2, [r3, #4]
	
	case 5 :
		can_glob_msg_reg[0] = ul_data_incom;		// Global CAN Message Registers.
   85474:	4b0d      	ldr	r3, [pc, #52]	; (854ac <store_can_msg+0x88>)
   85476:	68fa      	ldr	r2, [r7, #12]
   85478:	601a      	str	r2, [r3, #0]
		can_glob_msg_reg[1] = uh_data_incom;
   8547a:	4b0c      	ldr	r3, [pc, #48]	; (854ac <store_can_msg+0x88>)
   8547c:	68ba      	ldr	r2, [r7, #8]
   8547e:	605a      	str	r2, [r3, #4]
	
	case 6 :
		can_glob_hk_reg[0] = ul_data_incom;			// Global CAN Housekeeping Resgiters.
   85480:	4b0b      	ldr	r3, [pc, #44]	; (854b0 <store_can_msg+0x8c>)
   85482:	68fa      	ldr	r2, [r7, #12]
   85484:	601a      	str	r2, [r3, #0]
		can_glob_hk_reg[1] = uh_data_incom;
   85486:	4b0a      	ldr	r3, [pc, #40]	; (854b0 <store_can_msg+0x8c>)
   85488:	68ba      	ldr	r2, [r7, #8]
   8548a:	605a      	str	r2, [r3, #4]
	
	case 7 :
		can_glob_com_reg[0] = ul_data_incom;		// Global CAN Communications Registers.
   8548c:	4b09      	ldr	r3, [pc, #36]	; (854b4 <store_can_msg+0x90>)
   8548e:	68fa      	ldr	r2, [r7, #12]
   85490:	601a      	str	r2, [r3, #0]
		can_glob_com_reg[1] = uh_data_incom;
   85492:	4b08      	ldr	r3, [pc, #32]	; (854b4 <store_can_msg+0x90>)
   85494:	68ba      	ldr	r2, [r7, #8]
   85496:	605a      	str	r2, [r3, #4]

	default :
		return;
   85498:	bf00      	nop
   8549a:	bf00      	nop
	}
	return;
}
   8549c:	3714      	adds	r7, #20
   8549e:	46bd      	mov	sp, r7
   854a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   854a4:	4770      	bx	lr
   854a6:	bf00      	nop
   854a8:	2007a6e4 	.word	0x2007a6e4
   854ac:	2007a70c 	.word	0x2007a70c
   854b0:	2007a6a8 	.word	0x2007a6a8
   854b4:	2007a768 	.word	0x2007a768

000854b8 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   854b8:	b480      	push	{r7}
   854ba:	b083      	sub	sp, #12
   854bc:	af00      	add	r7, sp, #0
   854be:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   854c0:	687b      	ldr	r3, [r7, #4]
   854c2:	2200      	movs	r2, #0
   854c4:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   854c6:	687b      	ldr	r3, [r7, #4]
   854c8:	2200      	movs	r2, #0
   854ca:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   854cc:	687b      	ldr	r3, [r7, #4]
   854ce:	2200      	movs	r2, #0
   854d0:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   854d2:	687b      	ldr	r3, [r7, #4]
   854d4:	2200      	movs	r2, #0
   854d6:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   854d8:	687b      	ldr	r3, [r7, #4]
   854da:	2200      	movs	r2, #0
   854dc:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   854de:	687b      	ldr	r3, [r7, #4]
   854e0:	2200      	movs	r2, #0
   854e2:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   854e4:	687b      	ldr	r3, [r7, #4]
   854e6:	2200      	movs	r2, #0
   854e8:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   854ea:	687b      	ldr	r3, [r7, #4]
   854ec:	2200      	movs	r2, #0
   854ee:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   854f0:	687b      	ldr	r3, [r7, #4]
   854f2:	2200      	movs	r2, #0
   854f4:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   854f6:	687b      	ldr	r3, [r7, #4]
   854f8:	2200      	movs	r2, #0
   854fa:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   854fc:	687b      	ldr	r3, [r7, #4]
   854fe:	2200      	movs	r2, #0
   85500:	61da      	str	r2, [r3, #28]
}
   85502:	370c      	adds	r7, #12
   85504:	46bd      	mov	sp, r7
   85506:	f85d 7b04 	ldr.w	r7, [sp], #4
   8550a:	4770      	bx	lr

0008550c <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   8550c:	b580      	push	{r7, lr}
   8550e:	b08c      	sub	sp, #48	; 0x30
   85510:	af00      	add	r7, sp, #0
   85512:	60f8      	str	r0, [r7, #12]
   85514:	60b9      	str	r1, [r7, #8]
   85516:	607a      	str	r2, [r7, #4]
   85518:	603b      	str	r3, [r7, #0]
	*/
	
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   8551a:	f107 0310 	add.w	r3, r7, #16
   8551e:	481e      	ldr	r0, [pc, #120]	; (85598 <send_can_command+0x8c>)
   85520:	4619      	mov	r1, r3
   85522:	4b1e      	ldr	r3, [pc, #120]	; (8559c <send_can_command+0x90>)
   85524:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85526:	481c      	ldr	r0, [pc, #112]	; (85598 <send_can_command+0x8c>)
   85528:	4b1d      	ldr	r3, [pc, #116]	; (855a0 <send_can_command+0x94>)
   8552a:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   8552c:	4b1a      	ldr	r3, [pc, #104]	; (85598 <send_can_command+0x8c>)
   8552e:	2207      	movs	r2, #7
   85530:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85532:	4b19      	ldr	r3, [pc, #100]	; (85598 <send_can_command+0x8c>)
   85534:	2203      	movs	r2, #3
   85536:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   85538:	683b      	ldr	r3, [r7, #0]
   8553a:	b2da      	uxtb	r2, r3
   8553c:	4b16      	ldr	r3, [pc, #88]	; (85598 <send_can_command+0x8c>)
   8553e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85540:	4b15      	ldr	r3, [pc, #84]	; (85598 <send_can_command+0x8c>)
   85542:	2200      	movs	r2, #0
   85544:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85546:	4b14      	ldr	r3, [pc, #80]	; (85598 <send_can_command+0x8c>)
   85548:	2200      	movs	r2, #0
   8554a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8554c:	4815      	ldr	r0, [pc, #84]	; (855a4 <send_can_command+0x98>)
   8554e:	4912      	ldr	r1, [pc, #72]	; (85598 <send_can_command+0x8c>)
   85550:	4b15      	ldr	r3, [pc, #84]	; (855a8 <send_can_command+0x9c>)
   85552:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85554:	687b      	ldr	r3, [r7, #4]
   85556:	049a      	lsls	r2, r3, #18
   85558:	4b14      	ldr	r3, [pc, #80]	; (855ac <send_can_command+0xa0>)
   8555a:	4013      	ands	r3, r2
   8555c:	4a0e      	ldr	r2, [pc, #56]	; (85598 <send_can_command+0x8c>)
   8555e:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   85560:	4b0d      	ldr	r3, [pc, #52]	; (85598 <send_can_command+0x8c>)
   85562:	68fa      	ldr	r2, [r7, #12]
   85564:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85566:	4b0c      	ldr	r3, [pc, #48]	; (85598 <send_can_command+0x8c>)
   85568:	68ba      	ldr	r2, [r7, #8]
   8556a:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   8556c:	4b0a      	ldr	r3, [pc, #40]	; (85598 <send_can_command+0x8c>)
   8556e:	2208      	movs	r2, #8
   85570:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85572:	480c      	ldr	r0, [pc, #48]	; (855a4 <send_can_command+0x98>)
   85574:	4908      	ldr	r1, [pc, #32]	; (85598 <send_can_command+0x8c>)
   85576:	4b0e      	ldr	r3, [pc, #56]	; (855b0 <send_can_command+0xa4>)
   85578:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   8557a:	480a      	ldr	r0, [pc, #40]	; (855a4 <send_can_command+0x98>)
   8557c:	2180      	movs	r1, #128	; 0x80
   8557e:	4b0d      	ldr	r3, [pc, #52]	; (855b4 <send_can_command+0xa8>)
   85580:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   85582:	f107 0310 	add.w	r3, r7, #16
   85586:	4804      	ldr	r0, [pc, #16]	; (85598 <send_can_command+0x8c>)
   85588:	4619      	mov	r1, r3
   8558a:	4b0b      	ldr	r3, [pc, #44]	; (855b8 <send_can_command+0xac>)
   8558c:	4798      	blx	r3
	
	return 1;
   8558e:	2301      	movs	r3, #1
}
   85590:	4618      	mov	r0, r3
   85592:	3730      	adds	r7, #48	; 0x30
   85594:	46bd      	mov	sp, r7
   85596:	bd80      	pop	{r7, pc}
   85598:	2007a718 	.word	0x2007a718
   8559c:	000856e1 	.word	0x000856e1
   855a0:	000854b9 	.word	0x000854b9
   855a4:	400b4000 	.word	0x400b4000
   855a8:	000819c9 	.word	0x000819c9
   855ac:	1ffc0000 	.word	0x1ffc0000
   855b0:	00081bad 	.word	0x00081bad
   855b4:	0008193d 	.word	0x0008193d
   855b8:	00085751 	.word	0x00085751

000855bc <read_can_data>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   855bc:	b480      	push	{r7}
   855be:	b085      	sub	sp, #20
   855c0:	af00      	add	r7, sp, #0
   855c2:	60f8      	str	r0, [r7, #12]
   855c4:	60b9      	str	r1, [r7, #8]
   855c6:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   855c8:	687a      	ldr	r2, [r7, #4]
   855ca:	f240 43d2 	movw	r3, #1234	; 0x4d2
   855ce:	429a      	cmp	r2, r3
   855d0:	d109      	bne.n	855e6 <read_can_data+0x2a>
	{
		*message_high = can_glob_data_reg[1];
   855d2:	4b08      	ldr	r3, [pc, #32]	; (855f4 <read_can_data+0x38>)
   855d4:	685a      	ldr	r2, [r3, #4]
   855d6:	68fb      	ldr	r3, [r7, #12]
   855d8:	601a      	str	r2, [r3, #0]
		*message_low = can_glob_data_reg[0];
   855da:	4b06      	ldr	r3, [pc, #24]	; (855f4 <read_can_data+0x38>)
   855dc:	681a      	ldr	r2, [r3, #0]
   855de:	68bb      	ldr	r3, [r7, #8]
   855e0:	601a      	str	r2, [r3, #0]
		return 1;
   855e2:	2301      	movs	r3, #1
   855e4:	e000      	b.n	855e8 <read_can_data+0x2c>
	}

	return 0;
   855e6:	2300      	movs	r3, #0
}
   855e8:	4618      	mov	r0, r3
   855ea:	3714      	adds	r7, #20
   855ec:	46bd      	mov	sp, r7
   855ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   855f2:	4770      	bx	lr
   855f4:	2007a6e4 	.word	0x2007a6e4

000855f8 <read_can_msg>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   855f8:	b480      	push	{r7}
   855fa:	b085      	sub	sp, #20
   855fc:	af00      	add	r7, sp, #0
   855fe:	60f8      	str	r0, [r7, #12]
   85600:	60b9      	str	r1, [r7, #8]
   85602:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85604:	687a      	ldr	r2, [r7, #4]
   85606:	f240 43d2 	movw	r3, #1234	; 0x4d2
   8560a:	429a      	cmp	r2, r3
   8560c:	d109      	bne.n	85622 <read_can_msg+0x2a>
	{
		*message_high = can_glob_msg_reg[1];
   8560e:	4b08      	ldr	r3, [pc, #32]	; (85630 <read_can_msg+0x38>)
   85610:	685a      	ldr	r2, [r3, #4]
   85612:	68fb      	ldr	r3, [r7, #12]
   85614:	601a      	str	r2, [r3, #0]
		*message_low = can_glob_msg_reg[0];
   85616:	4b06      	ldr	r3, [pc, #24]	; (85630 <read_can_msg+0x38>)
   85618:	681a      	ldr	r2, [r3, #0]
   8561a:	68bb      	ldr	r3, [r7, #8]
   8561c:	601a      	str	r2, [r3, #0]
		return 1;
   8561e:	2301      	movs	r3, #1
   85620:	e000      	b.n	85624 <read_can_msg+0x2c>
	}

	return 0;
   85622:	2300      	movs	r3, #0
}
   85624:	4618      	mov	r0, r3
   85626:	3714      	adds	r7, #20
   85628:	46bd      	mov	sp, r7
   8562a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8562e:	4770      	bx	lr
   85630:	2007a70c 	.word	0x2007a70c

00085634 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   85634:	b580      	push	{r7, lr}
   85636:	b08a      	sub	sp, #40	; 0x28
   85638:	af00      	add	r7, sp, #0
   8563a:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   8563c:	f107 0308 	add.w	r3, r7, #8
   85640:	481e      	ldr	r0, [pc, #120]	; (856bc <request_housekeeping+0x88>)
   85642:	4619      	mov	r1, r3
   85644:	4b1e      	ldr	r3, [pc, #120]	; (856c0 <request_housekeeping+0x8c>)
   85646:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85648:	481c      	ldr	r0, [pc, #112]	; (856bc <request_housekeeping+0x88>)
   8564a:	4b1e      	ldr	r3, [pc, #120]	; (856c4 <request_housekeeping+0x90>)
   8564c:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   8564e:	4b1b      	ldr	r3, [pc, #108]	; (856bc <request_housekeeping+0x88>)
   85650:	2206      	movs	r2, #6
   85652:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85654:	4b19      	ldr	r3, [pc, #100]	; (856bc <request_housekeeping+0x88>)
   85656:	2203      	movs	r2, #3
   85658:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   8565a:	4b18      	ldr	r3, [pc, #96]	; (856bc <request_housekeeping+0x88>)
   8565c:	2214      	movs	r2, #20
   8565e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85660:	4b16      	ldr	r3, [pc, #88]	; (856bc <request_housekeeping+0x88>)
   85662:	2200      	movs	r2, #0
   85664:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85666:	4b15      	ldr	r3, [pc, #84]	; (856bc <request_housekeeping+0x88>)
   85668:	2200      	movs	r2, #0
   8566a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8566c:	4816      	ldr	r0, [pc, #88]	; (856c8 <request_housekeeping+0x94>)
   8566e:	4913      	ldr	r1, [pc, #76]	; (856bc <request_housekeeping+0x88>)
   85670:	4b16      	ldr	r3, [pc, #88]	; (856cc <request_housekeeping+0x98>)
   85672:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85674:	687b      	ldr	r3, [r7, #4]
   85676:	049a      	lsls	r2, r3, #18
   85678:	4b15      	ldr	r3, [pc, #84]	; (856d0 <request_housekeeping+0x9c>)
   8567a:	4013      	ands	r3, r2
   8567c:	4a0f      	ldr	r2, [pc, #60]	; (856bc <request_housekeeping+0x88>)
   8567e:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = HK_REQUEST;				// shifted over to the standard frame position.
   85680:	4b0e      	ldr	r3, [pc, #56]	; (856bc <request_housekeeping+0x88>)
   85682:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   85686:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = HK_REQUEST;
   85688:	4b0c      	ldr	r3, [pc, #48]	; (856bc <request_housekeeping+0x88>)
   8568a:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
   8568e:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85690:	4b0a      	ldr	r3, [pc, #40]	; (856bc <request_housekeeping+0x88>)
   85692:	2208      	movs	r2, #8
   85694:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85696:	480c      	ldr	r0, [pc, #48]	; (856c8 <request_housekeeping+0x94>)
   85698:	4908      	ldr	r1, [pc, #32]	; (856bc <request_housekeeping+0x88>)
   8569a:	4b0e      	ldr	r3, [pc, #56]	; (856d4 <request_housekeeping+0xa0>)
   8569c:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   8569e:	480a      	ldr	r0, [pc, #40]	; (856c8 <request_housekeeping+0x94>)
   856a0:	2140      	movs	r1, #64	; 0x40
   856a2:	4b0d      	ldr	r3, [pc, #52]	; (856d8 <request_housekeeping+0xa4>)
   856a4:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   856a6:	f107 0308 	add.w	r3, r7, #8
   856aa:	4804      	ldr	r0, [pc, #16]	; (856bc <request_housekeeping+0x88>)
   856ac:	4619      	mov	r1, r3
   856ae:	4b0b      	ldr	r3, [pc, #44]	; (856dc <request_housekeeping+0xa8>)
   856b0:	4798      	blx	r3
		
	return 1;
   856b2:	2301      	movs	r3, #1
}
   856b4:	4618      	mov	r0, r3
   856b6:	3728      	adds	r7, #40	; 0x28
   856b8:	46bd      	mov	sp, r7
   856ba:	bd80      	pop	{r7, pc}
   856bc:	2007a718 	.word	0x2007a718
   856c0:	000856e1 	.word	0x000856e1
   856c4:	000854b9 	.word	0x000854b9
   856c8:	400b4000 	.word	0x400b4000
   856cc:	000819c9 	.word	0x000819c9
   856d0:	1ffc0000 	.word	0x1ffc0000
   856d4:	00081bad 	.word	0x00081bad
   856d8:	0008193d 	.word	0x0008193d
   856dc:	00085751 	.word	0x00085751

000856e0 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   856e0:	b480      	push	{r7}
   856e2:	b083      	sub	sp, #12
   856e4:	af00      	add	r7, sp, #0
   856e6:	6078      	str	r0, [r7, #4]
   856e8:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   856ea:	687b      	ldr	r3, [r7, #4]
   856ec:	681a      	ldr	r2, [r3, #0]
   856ee:	683b      	ldr	r3, [r7, #0]
   856f0:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   856f2:	687b      	ldr	r3, [r7, #4]
   856f4:	791a      	ldrb	r2, [r3, #4]
   856f6:	683b      	ldr	r3, [r7, #0]
   856f8:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   856fa:	687b      	ldr	r3, [r7, #4]
   856fc:	795a      	ldrb	r2, [r3, #5]
   856fe:	683b      	ldr	r3, [r7, #0]
   85700:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   85702:	687b      	ldr	r3, [r7, #4]
   85704:	799a      	ldrb	r2, [r3, #6]
   85706:	683b      	ldr	r3, [r7, #0]
   85708:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   8570a:	687b      	ldr	r3, [r7, #4]
   8570c:	79da      	ldrb	r2, [r3, #7]
   8570e:	683b      	ldr	r3, [r7, #0]
   85710:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   85712:	687b      	ldr	r3, [r7, #4]
   85714:	689a      	ldr	r2, [r3, #8]
   85716:	683b      	ldr	r3, [r7, #0]
   85718:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   8571a:	687b      	ldr	r3, [r7, #4]
   8571c:	68da      	ldr	r2, [r3, #12]
   8571e:	683b      	ldr	r3, [r7, #0]
   85720:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   85722:	687b      	ldr	r3, [r7, #4]
   85724:	691a      	ldr	r2, [r3, #16]
   85726:	683b      	ldr	r3, [r7, #0]
   85728:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   8572a:	687b      	ldr	r3, [r7, #4]
   8572c:	695a      	ldr	r2, [r3, #20]
   8572e:	683b      	ldr	r3, [r7, #0]
   85730:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   85732:	687b      	ldr	r3, [r7, #4]
   85734:	699a      	ldr	r2, [r3, #24]
   85736:	683b      	ldr	r3, [r7, #0]
   85738:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   8573a:	687b      	ldr	r3, [r7, #4]
   8573c:	69da      	ldr	r2, [r3, #28]
   8573e:	683b      	ldr	r3, [r7, #0]
   85740:	61da      	str	r2, [r3, #28]
	
	return;
   85742:	bf00      	nop
}
   85744:	370c      	adds	r7, #12
   85746:	46bd      	mov	sp, r7
   85748:	f85d 7b04 	ldr.w	r7, [sp], #4
   8574c:	4770      	bx	lr
   8574e:	bf00      	nop

00085750 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85750:	b480      	push	{r7}
   85752:	b083      	sub	sp, #12
   85754:	af00      	add	r7, sp, #0
   85756:	6078      	str	r0, [r7, #4]
   85758:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   8575a:	683b      	ldr	r3, [r7, #0]
   8575c:	681a      	ldr	r2, [r3, #0]
   8575e:	687b      	ldr	r3, [r7, #4]
   85760:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   85762:	683b      	ldr	r3, [r7, #0]
   85764:	791a      	ldrb	r2, [r3, #4]
   85766:	687b      	ldr	r3, [r7, #4]
   85768:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   8576a:	683b      	ldr	r3, [r7, #0]
   8576c:	795a      	ldrb	r2, [r3, #5]
   8576e:	687b      	ldr	r3, [r7, #4]
   85770:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   85772:	683b      	ldr	r3, [r7, #0]
   85774:	799a      	ldrb	r2, [r3, #6]
   85776:	687b      	ldr	r3, [r7, #4]
   85778:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   8577a:	683b      	ldr	r3, [r7, #0]
   8577c:	79da      	ldrb	r2, [r3, #7]
   8577e:	687b      	ldr	r3, [r7, #4]
   85780:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   85782:	683b      	ldr	r3, [r7, #0]
   85784:	689a      	ldr	r2, [r3, #8]
   85786:	687b      	ldr	r3, [r7, #4]
   85788:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   8578a:	683b      	ldr	r3, [r7, #0]
   8578c:	68da      	ldr	r2, [r3, #12]
   8578e:	687b      	ldr	r3, [r7, #4]
   85790:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85792:	683b      	ldr	r3, [r7, #0]
   85794:	691a      	ldr	r2, [r3, #16]
   85796:	687b      	ldr	r3, [r7, #4]
   85798:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   8579a:	683b      	ldr	r3, [r7, #0]
   8579c:	695a      	ldr	r2, [r3, #20]
   8579e:	687b      	ldr	r3, [r7, #4]
   857a0:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   857a2:	683b      	ldr	r3, [r7, #0]
   857a4:	699a      	ldr	r2, [r3, #24]
   857a6:	687b      	ldr	r3, [r7, #4]
   857a8:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   857aa:	683b      	ldr	r3, [r7, #0]
   857ac:	69da      	ldr	r2, [r3, #28]
   857ae:	687b      	ldr	r3, [r7, #4]
   857b0:	61da      	str	r2, [r3, #28]
	
	return;
   857b2:	bf00      	nop
}
   857b4:	370c      	adds	r7, #12
   857b6:	46bd      	mov	sp, r7
   857b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   857bc:	4770      	bx	lr
   857be:	bf00      	nop

000857c0 <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   857c0:	b580      	push	{r7, lr}
   857c2:	b084      	sub	sp, #16
   857c4:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   857c6:	2301      	movs	r3, #1
   857c8:	60bb      	str	r3, [r7, #8]
   857ca:	2300      	movs	r3, #0
   857cc:	60fb      	str	r3, [r7, #12]

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   857ce:	483d      	ldr	r0, [pc, #244]	; (858c4 <can_initialize+0x104>)
   857d0:	2134      	movs	r1, #52	; 0x34
   857d2:	4b3d      	ldr	r3, [pc, #244]	; (858c8 <can_initialize+0x108>)
   857d4:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   857d6:	483b      	ldr	r0, [pc, #236]	; (858c4 <can_initialize+0x104>)
   857d8:	2135      	movs	r1, #53	; 0x35
   857da:	4b3c      	ldr	r3, [pc, #240]	; (858cc <can_initialize+0x10c>)
   857dc:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   857de:	4839      	ldr	r0, [pc, #228]	; (858c4 <can_initialize+0x104>)
   857e0:	4b3b      	ldr	r3, [pc, #236]	; (858d0 <can_initialize+0x110>)
   857e2:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   857e4:	4837      	ldr	r0, [pc, #220]	; (858c4 <can_initialize+0x104>)
   857e6:	4b3b      	ldr	r3, [pc, #236]	; (858d4 <can_initialize+0x114>)
   857e8:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   857ea:	483b      	ldr	r0, [pc, #236]	; (858d8 <can_initialize+0x118>)
   857ec:	218f      	movs	r1, #143	; 0x8f
   857ee:	4b36      	ldr	r3, [pc, #216]	; (858c8 <can_initialize+0x108>)
   857f0:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   857f2:	4839      	ldr	r0, [pc, #228]	; (858d8 <can_initialize+0x118>)
   857f4:	2190      	movs	r1, #144	; 0x90
   857f6:	4b35      	ldr	r3, [pc, #212]	; (858cc <can_initialize+0x10c>)
   857f8:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   857fa:	4837      	ldr	r0, [pc, #220]	; (858d8 <can_initialize+0x118>)
   857fc:	4b34      	ldr	r3, [pc, #208]	; (858d0 <can_initialize+0x110>)
   857fe:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   85800:	4835      	ldr	r0, [pc, #212]	; (858d8 <can_initialize+0x118>)
   85802:	4b34      	ldr	r3, [pc, #208]	; (858d4 <can_initialize+0x114>)
   85804:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   85806:	202b      	movs	r0, #43	; 0x2b
   85808:	4b34      	ldr	r3, [pc, #208]	; (858dc <can_initialize+0x11c>)
   8580a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   8580c:	202c      	movs	r0, #44	; 0x2c
   8580e:	4b33      	ldr	r3, [pc, #204]	; (858dc <can_initialize+0x11c>)
   85810:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   85812:	4b33      	ldr	r3, [pc, #204]	; (858e0 <can_initialize+0x120>)
   85814:	4798      	blx	r3
   85816:	6078      	str	r0, [r7, #4]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85818:	4832      	ldr	r0, [pc, #200]	; (858e4 <can_initialize+0x124>)
   8581a:	6879      	ldr	r1, [r7, #4]
   8581c:	22fa      	movs	r2, #250	; 0xfa
   8581e:	4b32      	ldr	r3, [pc, #200]	; (858e8 <can_initialize+0x128>)
   85820:	4798      	blx	r3
   85822:	4603      	mov	r3, r0
   85824:	2b00      	cmp	r3, #0
   85826:	d049      	beq.n	858bc <can_initialize+0xfc>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   85828:	4830      	ldr	r0, [pc, #192]	; (858ec <can_initialize+0x12c>)
   8582a:	6879      	ldr	r1, [r7, #4]
   8582c:	22fa      	movs	r2, #250	; 0xfa
   8582e:	4b2e      	ldr	r3, [pc, #184]	; (858e8 <can_initialize+0x128>)
   85830:	4798      	blx	r3
   85832:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85834:	2b00      	cmp	r3, #0
   85836:	d041      	beq.n	858bc <can_initialize+0xfc>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85838:	482a      	ldr	r0, [pc, #168]	; (858e4 <can_initialize+0x124>)
   8583a:	f04f 31ff 	mov.w	r1, #4294967295
   8583e:	4b2c      	ldr	r3, [pc, #176]	; (858f0 <can_initialize+0x130>)
   85840:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85842:	482a      	ldr	r0, [pc, #168]	; (858ec <can_initialize+0x12c>)
   85844:	f04f 31ff 	mov.w	r1, #4294967295
   85848:	4b29      	ldr	r3, [pc, #164]	; (858f0 <can_initialize+0x130>)
   8584a:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   8584c:	202b      	movs	r0, #43	; 0x2b
   8584e:	4b29      	ldr	r3, [pc, #164]	; (858f4 <can_initialize+0x134>)
   85850:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   85852:	202c      	movs	r0, #44	; 0x2c
   85854:	4b27      	ldr	r3, [pc, #156]	; (858f4 <can_initialize+0x134>)
   85856:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   85858:	4822      	ldr	r0, [pc, #136]	; (858e4 <can_initialize+0x124>)
   8585a:	4b27      	ldr	r3, [pc, #156]	; (858f8 <can_initialize+0x138>)
   8585c:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   8585e:	4823      	ldr	r0, [pc, #140]	; (858ec <can_initialize+0x12c>)
   85860:	4b25      	ldr	r3, [pc, #148]	; (858f8 <can_initialize+0x138>)
   85862:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   85864:	68b8      	ldr	r0, [r7, #8]
   85866:	4b25      	ldr	r3, [pc, #148]	; (858fc <can_initialize+0x13c>)
   85868:	4798      	blx	r3
   8586a:	60b8      	str	r0, [r7, #8]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   8586c:	4b24      	ldr	r3, [pc, #144]	; (85900 <can_initialize+0x140>)
   8586e:	2200      	movs	r2, #0
   85870:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comf = 0;
   85872:	4b24      	ldr	r3, [pc, #144]	; (85904 <can_initialize+0x144>)
   85874:	2200      	movs	r2, #0
   85876:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 8; i++)
   85878:	2300      	movs	r3, #0
   8587a:	60fb      	str	r3, [r7, #12]
   8587c:	e01b      	b.n	858b6 <can_initialize+0xf6>
		{
			can_glob_com_reg[i] = 0;
   8587e:	4b22      	ldr	r3, [pc, #136]	; (85908 <can_initialize+0x148>)
   85880:	68fa      	ldr	r2, [r7, #12]
   85882:	2100      	movs	r1, #0
   85884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			can_glob_data_reg[i] = 0;
   85888:	4b20      	ldr	r3, [pc, #128]	; (8590c <can_initialize+0x14c>)
   8588a:	68fa      	ldr	r2, [r7, #12]
   8588c:	2100      	movs	r1, #0
   8588e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			can_glob_hk_reg[i] = 0;
   85892:	4b1f      	ldr	r3, [pc, #124]	; (85910 <can_initialize+0x150>)
   85894:	68fa      	ldr	r2, [r7, #12]
   85896:	2100      	movs	r1, #0
   85898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_data[i] = 0;
   8589c:	4b1d      	ldr	r3, [pc, #116]	; (85914 <can_initialize+0x154>)
   8589e:	68fa      	ldr	r2, [r7, #12]
   858a0:	2100      	movs	r1, #0
   858a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   858a6:	4b1c      	ldr	r3, [pc, #112]	; (85918 <can_initialize+0x158>)
   858a8:	68fa      	ldr	r2, [r7, #12]
   858aa:	2100      	movs	r1, #0
   858ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		
		/* Initialize the message reception flag */
		glob_comf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 8; i++)
   858b0:	68fb      	ldr	r3, [r7, #12]
   858b2:	3301      	adds	r3, #1
   858b4:	60fb      	str	r3, [r7, #12]
   858b6:	68fb      	ldr	r3, [r7, #12]
   858b8:	2b07      	cmp	r3, #7
   858ba:	d9e0      	bls.n	8587e <can_initialize+0xbe>
			can_glob_hk_reg[i] = 0;
			glob_stored_data[i] = 0;
			glob_stored_message[i] = 0;
		}
	}
	return;
   858bc:	bf00      	nop
}
   858be:	3710      	adds	r7, #16
   858c0:	46bd      	mov	sp, r7
   858c2:	bd80      	pop	{r7, pc}
   858c4:	2007a760 	.word	0x2007a760
   858c8:	00081665 	.word	0x00081665
   858cc:	00081681 	.word	0x00081681
   858d0:	000816b9 	.word	0x000816b9
   858d4:	0008169d 	.word	0x0008169d
   858d8:	2007a6dc 	.word	0x2007a6dc
   858dc:	000824d5 	.word	0x000824d5
   858e0:	000851c9 	.word	0x000851c9
   858e4:	400b4000 	.word	0x400b4000
   858e8:	00081825 	.word	0x00081825
   858ec:	400b8000 	.word	0x400b8000
   858f0:	00081909 	.word	0x00081909
   858f4:	00085109 	.word	0x00085109
   858f8:	00081c65 	.word	0x00081c65
   858fc:	0008591d 	.word	0x0008591d
   85900:	2007a6d8 	.word	0x2007a6d8
   85904:	2007a770 	.word	0x2007a770
   85908:	2007a768 	.word	0x2007a768
   8590c:	2007a6e4 	.word	0x2007a6e4
   85910:	2007a6a8 	.word	0x2007a6a8
   85914:	2007a6b0 	.word	0x2007a6b0
   85918:	2007a738 	.word	0x2007a738

0008591c <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   8591c:	b580      	push	{r7, lr}
   8591e:	b082      	sub	sp, #8
   85920:	af00      	add	r7, sp, #0
   85922:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   85924:	4848      	ldr	r0, [pc, #288]	; (85a48 <can_init_mailboxes+0x12c>)
   85926:	4b49      	ldr	r3, [pc, #292]	; (85a4c <can_init_mailboxes+0x130>)
   85928:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   8592a:	4b47      	ldr	r3, [pc, #284]	; (85a48 <can_init_mailboxes+0x12c>)
   8592c:	2207      	movs	r2, #7
   8592e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85930:	4b45      	ldr	r3, [pc, #276]	; (85a48 <can_init_mailboxes+0x12c>)
   85932:	2203      	movs	r2, #3
   85934:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   85936:	4b44      	ldr	r3, [pc, #272]	; (85a48 <can_init_mailboxes+0x12c>)
   85938:	2205      	movs	r2, #5
   8593a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8593c:	4b42      	ldr	r3, [pc, #264]	; (85a48 <can_init_mailboxes+0x12c>)
   8593e:	2200      	movs	r2, #0
   85940:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85942:	4b41      	ldr	r3, [pc, #260]	; (85a48 <can_init_mailboxes+0x12c>)
   85944:	2200      	movs	r2, #0
   85946:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85948:	4841      	ldr	r0, [pc, #260]	; (85a50 <can_init_mailboxes+0x134>)
   8594a:	493f      	ldr	r1, [pc, #252]	; (85a48 <can_init_mailboxes+0x12c>)
   8594c:	4b41      	ldr	r3, [pc, #260]	; (85a54 <can_init_mailboxes+0x138>)
   8594e:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85950:	4841      	ldr	r0, [pc, #260]	; (85a58 <can_init_mailboxes+0x13c>)
   85952:	4b3e      	ldr	r3, [pc, #248]	; (85a4c <can_init_mailboxes+0x130>)
   85954:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   85956:	4b40      	ldr	r3, [pc, #256]	; (85a58 <can_init_mailboxes+0x13c>)
   85958:	2200      	movs	r2, #0
   8595a:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8595c:	4b3e      	ldr	r3, [pc, #248]	; (85a58 <can_init_mailboxes+0x13c>)
   8595e:	2201      	movs	r2, #1
   85960:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85962:	4b3d      	ldr	r3, [pc, #244]	; (85a58 <can_init_mailboxes+0x13c>)
   85964:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85968:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   8596a:	4b3b      	ldr	r3, [pc, #236]	; (85a58 <can_init_mailboxes+0x13c>)
   8596c:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   85970:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85972:	483a      	ldr	r0, [pc, #232]	; (85a5c <can_init_mailboxes+0x140>)
   85974:	4938      	ldr	r1, [pc, #224]	; (85a58 <can_init_mailboxes+0x13c>)
   85976:	4b37      	ldr	r3, [pc, #220]	; (85a54 <can_init_mailboxes+0x138>)
   85978:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8597a:	4837      	ldr	r0, [pc, #220]	; (85a58 <can_init_mailboxes+0x13c>)
   8597c:	4b33      	ldr	r3, [pc, #204]	; (85a4c <can_init_mailboxes+0x130>)
   8597e:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   85980:	4b35      	ldr	r3, [pc, #212]	; (85a58 <can_init_mailboxes+0x13c>)
   85982:	2205      	movs	r2, #5
   85984:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85986:	4b34      	ldr	r3, [pc, #208]	; (85a58 <can_init_mailboxes+0x13c>)
   85988:	2201      	movs	r2, #1
   8598a:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8598c:	4b32      	ldr	r3, [pc, #200]	; (85a58 <can_init_mailboxes+0x13c>)
   8598e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85992:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85994:	4b30      	ldr	r3, [pc, #192]	; (85a58 <can_init_mailboxes+0x13c>)
   85996:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   8599a:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8599c:	482f      	ldr	r0, [pc, #188]	; (85a5c <can_init_mailboxes+0x140>)
   8599e:	492e      	ldr	r1, [pc, #184]	; (85a58 <can_init_mailboxes+0x13c>)
   859a0:	4b2c      	ldr	r3, [pc, #176]	; (85a54 <can_init_mailboxes+0x138>)
   859a2:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   859a4:	482c      	ldr	r0, [pc, #176]	; (85a58 <can_init_mailboxes+0x13c>)
   859a6:	4b29      	ldr	r3, [pc, #164]	; (85a4c <can_init_mailboxes+0x130>)
   859a8:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   859aa:	4b2b      	ldr	r3, [pc, #172]	; (85a58 <can_init_mailboxes+0x13c>)
   859ac:	2206      	movs	r2, #6
   859ae:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   859b0:	4b29      	ldr	r3, [pc, #164]	; (85a58 <can_init_mailboxes+0x13c>)
   859b2:	2201      	movs	r2, #1
   859b4:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   859b6:	4b28      	ldr	r3, [pc, #160]	; (85a58 <can_init_mailboxes+0x13c>)
   859b8:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   859bc:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   859be:	4b26      	ldr	r3, [pc, #152]	; (85a58 <can_init_mailboxes+0x13c>)
   859c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   859c4:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   859c6:	4825      	ldr	r0, [pc, #148]	; (85a5c <can_init_mailboxes+0x140>)
   859c8:	4923      	ldr	r1, [pc, #140]	; (85a58 <can_init_mailboxes+0x13c>)
   859ca:	4b22      	ldr	r3, [pc, #136]	; (85a54 <can_init_mailboxes+0x138>)
   859cc:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   859ce:	4822      	ldr	r0, [pc, #136]	; (85a58 <can_init_mailboxes+0x13c>)
   859d0:	4b1e      	ldr	r3, [pc, #120]	; (85a4c <can_init_mailboxes+0x130>)
   859d2:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   859d4:	4b20      	ldr	r3, [pc, #128]	; (85a58 <can_init_mailboxes+0x13c>)
   859d6:	2207      	movs	r2, #7
   859d8:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   859da:	4b1f      	ldr	r3, [pc, #124]	; (85a58 <can_init_mailboxes+0x13c>)
   859dc:	2201      	movs	r2, #1
   859de:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   859e0:	4b1d      	ldr	r3, [pc, #116]	; (85a58 <can_init_mailboxes+0x13c>)
   859e2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   859e6:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   859e8:	4b1b      	ldr	r3, [pc, #108]	; (85a58 <can_init_mailboxes+0x13c>)
   859ea:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   859ee:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   859f0:	481a      	ldr	r0, [pc, #104]	; (85a5c <can_init_mailboxes+0x140>)
   859f2:	4919      	ldr	r1, [pc, #100]	; (85a58 <can_init_mailboxes+0x13c>)
   859f4:	4b17      	ldr	r3, [pc, #92]	; (85a54 <can_init_mailboxes+0x138>)
   859f6:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   859f8:	4818      	ldr	r0, [pc, #96]	; (85a5c <can_init_mailboxes+0x140>)
   859fa:	2101      	movs	r1, #1
   859fc:	4b18      	ldr	r3, [pc, #96]	; (85a60 <can_init_mailboxes+0x144>)
   859fe:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   85a00:	4816      	ldr	r0, [pc, #88]	; (85a5c <can_init_mailboxes+0x140>)
   85a02:	2140      	movs	r1, #64	; 0x40
   85a04:	4b16      	ldr	r3, [pc, #88]	; (85a60 <can_init_mailboxes+0x144>)
   85a06:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   85a08:	4814      	ldr	r0, [pc, #80]	; (85a5c <can_init_mailboxes+0x140>)
   85a0a:	2180      	movs	r1, #128	; 0x80
   85a0c:	4b14      	ldr	r3, [pc, #80]	; (85a60 <can_init_mailboxes+0x144>)
   85a0e:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85a10:	480d      	ldr	r0, [pc, #52]	; (85a48 <can_init_mailboxes+0x12c>)
   85a12:	4b0e      	ldr	r3, [pc, #56]	; (85a4c <can_init_mailboxes+0x130>)
   85a14:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85a16:	4b0c      	ldr	r3, [pc, #48]	; (85a48 <can_init_mailboxes+0x12c>)
   85a18:	2206      	movs	r2, #6
   85a1a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85a1c:	4b0a      	ldr	r3, [pc, #40]	; (85a48 <can_init_mailboxes+0x12c>)
   85a1e:	2203      	movs	r2, #3
   85a20:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85a22:	4b09      	ldr	r3, [pc, #36]	; (85a48 <can_init_mailboxes+0x12c>)
   85a24:	2214      	movs	r2, #20
   85a26:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85a28:	4b07      	ldr	r3, [pc, #28]	; (85a48 <can_init_mailboxes+0x12c>)
   85a2a:	2200      	movs	r2, #0
   85a2c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85a2e:	4b06      	ldr	r3, [pc, #24]	; (85a48 <can_init_mailboxes+0x12c>)
   85a30:	2200      	movs	r2, #0
   85a32:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85a34:	4806      	ldr	r0, [pc, #24]	; (85a50 <can_init_mailboxes+0x134>)
   85a36:	4904      	ldr	r1, [pc, #16]	; (85a48 <can_init_mailboxes+0x12c>)
   85a38:	4b06      	ldr	r3, [pc, #24]	; (85a54 <can_init_mailboxes+0x138>)
   85a3a:	4798      	blx	r3

	return 1;
   85a3c:	2301      	movs	r3, #1
}
   85a3e:	4618      	mov	r0, r3
   85a40:	3708      	adds	r7, #8
   85a42:	46bd      	mov	sp, r7
   85a44:	bd80      	pop	{r7, pc}
   85a46:	bf00      	nop
   85a48:	2007a718 	.word	0x2007a718
   85a4c:	000854b9 	.word	0x000854b9
   85a50:	400b4000 	.word	0x400b4000
   85a54:	000819c9 	.word	0x000819c9
   85a58:	2007a6b8 	.word	0x2007a6b8
   85a5c:	400b8000 	.word	0x400b8000
   85a60:	000818ed 	.word	0x000818ed

00085a64 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   85a64:	b480      	push	{r7}
   85a66:	b085      	sub	sp, #20
   85a68:	af00      	add	r7, sp, #0
   85a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   85a6c:	687b      	ldr	r3, [r7, #4]
   85a6e:	f003 0307 	and.w	r3, r3, #7
   85a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85a74:	4b0c      	ldr	r3, [pc, #48]	; (85aa8 <NVIC_SetPriorityGrouping+0x44>)
   85a76:	68db      	ldr	r3, [r3, #12]
   85a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   85a7a:	68ba      	ldr	r2, [r7, #8]
   85a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   85a80:	4013      	ands	r3, r2
   85a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   85a84:	68fb      	ldr	r3, [r7, #12]
   85a86:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   85a88:	68bb      	ldr	r3, [r7, #8]
   85a8a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   85a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   85a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   85a94:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   85a96:	4b04      	ldr	r3, [pc, #16]	; (85aa8 <NVIC_SetPriorityGrouping+0x44>)
   85a98:	68ba      	ldr	r2, [r7, #8]
   85a9a:	60da      	str	r2, [r3, #12]
}
   85a9c:	3714      	adds	r7, #20
   85a9e:	46bd      	mov	sp, r7
   85aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
   85aa4:	4770      	bx	lr
   85aa6:	bf00      	nop
   85aa8:	e000ed00 	.word	0xe000ed00

00085aac <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   85aac:	b580      	push	{r7, lr}
   85aae:	af00      	add	r7, sp, #0
	/* Prepare the hardware */
	prvSetupHardware();
   85ab0:	4b07      	ldr	r3, [pc, #28]	; (85ad0 <main+0x24>)
   85ab2:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   85ab4:	4b07      	ldr	r3, [pc, #28]	; (85ad4 <main+0x28>)
   85ab6:	4798      	blx	r3

	/* Create Tasks */
	my_blink();
   85ab8:	4b07      	ldr	r3, [pc, #28]	; (85ad8 <main+0x2c>)
   85aba:	4798      	blx	r3
	housekeep();
   85abc:	4b07      	ldr	r3, [pc, #28]	; (85adc <main+0x30>)
   85abe:	4798      	blx	r3
	command_loop();
   85ac0:	4b07      	ldr	r3, [pc, #28]	; (85ae0 <main+0x34>)
   85ac2:	4798      	blx	r3
	data_test();
   85ac4:	4b07      	ldr	r3, [pc, #28]	; (85ae4 <main+0x38>)
   85ac6:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   85ac8:	4b07      	ldr	r3, [pc, #28]	; (85ae8 <main+0x3c>)
   85aca:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   85acc:	e7fe      	b.n	85acc <main+0x20>
   85ace:	bf00      	nop
   85ad0:	00085aed 	.word	0x00085aed
   85ad4:	00085b2d 	.word	0x00085b2d
   85ad8:	00085b99 	.word	0x00085b99
   85adc:	000805f5 	.word	0x000805f5
   85ae0:	000803b9 	.word	0x000803b9
   85ae4:	00080481 	.word	0x00080481
   85ae8:	00083ec9 	.word	0x00083ec9

00085aec <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   85aec:	b580      	push	{r7, lr}
   85aee:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   85af0:	4b07      	ldr	r3, [pc, #28]	; (85b10 <prvSetupHardware+0x24>)
   85af2:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   85af4:	2000      	movs	r0, #0
   85af6:	4b07      	ldr	r3, [pc, #28]	; (85b14 <prvSetupHardware+0x28>)
   85af8:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   85afa:	4b07      	ldr	r3, [pc, #28]	; (85b18 <prvSetupHardware+0x2c>)
   85afc:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   85afe:	4b07      	ldr	r3, [pc, #28]	; (85b1c <prvSetupHardware+0x30>)
   85b00:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   85b02:	4b07      	ldr	r3, [pc, #28]	; (85b20 <prvSetupHardware+0x34>)
   85b04:	4798      	blx	r3
	
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   85b06:	4b07      	ldr	r3, [pc, #28]	; (85b24 <prvSetupHardware+0x38>)
   85b08:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   85b0a:	4b07      	ldr	r3, [pc, #28]	; (85b28 <prvSetupHardware+0x3c>)
   85b0c:	4798      	blx	r3
}
   85b0e:	bd80      	pop	{r7, pc}
   85b10:	000814e5 	.word	0x000814e5
   85b14:	00085a65 	.word	0x00085a65
   85b18:	0008154d 	.word	0x0008154d
   85b1c:	000806a9 	.word	0x000806a9
   85b20:	000857c1 	.word	0x000857c1
   85b24:	00081165 	.word	0x00081165
   85b28:	00080a39 	.word	0x00080a39

00085b2c <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   85b2c:	b580      	push	{r7, lr}
   85b2e:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   85b30:	2001      	movs	r0, #1
   85b32:	2100      	movs	r1, #0
   85b34:	2203      	movs	r2, #3
   85b36:	4b03      	ldr	r3, [pc, #12]	; (85b44 <prvInitializeMutexes+0x18>)
   85b38:	4798      	blx	r3
   85b3a:	4602      	mov	r2, r0
   85b3c:	4b02      	ldr	r3, [pc, #8]	; (85b48 <prvInitializeMutexes+0x1c>)
   85b3e:	601a      	str	r2, [r3, #0]
	return;
   85b40:	bf00      	nop
}
   85b42:	bd80      	pop	{r7, pc}
   85b44:	00083455 	.word	0x00083455
   85b48:	2007a714 	.word	0x2007a714

00085b4c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   85b4c:	b580      	push	{r7, lr}
   85b4e:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   85b50:	4b01      	ldr	r3, [pc, #4]	; (85b58 <vApplicationMallocFailedHook+0xc>)
   85b52:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85b54:	e7fe      	b.n	85b54 <vApplicationMallocFailedHook+0x8>
   85b56:	bf00      	nop
   85b58:	00082ed9 	.word	0x00082ed9

00085b5c <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   85b5c:	b580      	push	{r7, lr}
   85b5e:	b082      	sub	sp, #8
   85b60:	af00      	add	r7, sp, #0
   85b62:	6078      	str	r0, [r7, #4]
   85b64:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   85b66:	4b01      	ldr	r3, [pc, #4]	; (85b6c <vApplicationStackOverflowHook+0x10>)
   85b68:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85b6a:	e7fe      	b.n	85b6a <vApplicationStackOverflowHook+0xe>
   85b6c:	00082ed9 	.word	0x00082ed9

00085b70 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   85b70:	b580      	push	{r7, lr}
   85b72:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   85b74:	4804      	ldr	r0, [pc, #16]	; (85b88 <WDT_Handler+0x18>)
   85b76:	4b05      	ldr	r3, [pc, #20]	; (85b8c <WDT_Handler+0x1c>)
   85b78:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   85b7a:	2055      	movs	r0, #85	; 0x55
   85b7c:	4b04      	ldr	r3, [pc, #16]	; (85b90 <WDT_Handler+0x20>)
   85b7e:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   85b80:	4801      	ldr	r0, [pc, #4]	; (85b88 <WDT_Handler+0x18>)
   85b82:	4b04      	ldr	r3, [pc, #16]	; (85b94 <WDT_Handler+0x24>)
   85b84:	4798      	blx	r3
}
   85b86:	bd80      	pop	{r7, pc}
   85b88:	400e1a50 	.word	0x400e1a50
   85b8c:	00082869 	.word	0x00082869
   85b90:	00081ee9 	.word	0x00081ee9
   85b94:	00082841 	.word	0x00082841

00085b98 <my_blink>:

/**
 * \brief Toggles the state of the LED pin high/low.		
 */
void my_blink( void )
{		
   85b98:	b590      	push	{r4, r7, lr}
   85b9a:	b085      	sub	sp, #20
   85b9c:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this file. */
		
	xTaskCreate( prvTurnOnTask,						/* The function that implements the task. */
   85b9e:	2301      	movs	r3, #1
   85ba0:	9300      	str	r3, [sp, #0]
   85ba2:	2300      	movs	r3, #0
   85ba4:	9301      	str	r3, [sp, #4]
   85ba6:	2300      	movs	r3, #0
   85ba8:	9302      	str	r3, [sp, #8]
   85baa:	2300      	movs	r3, #0
   85bac:	9303      	str	r3, [sp, #12]
   85bae:	480d      	ldr	r0, [pc, #52]	; (85be4 <my_blink+0x4c>)
   85bb0:	490d      	ldr	r1, [pc, #52]	; (85be8 <my_blink+0x50>)
   85bb2:	2282      	movs	r2, #130	; 0x82
   85bb4:	f241 2334 	movw	r3, #4660	; 0x1234
   85bb8:	4c0c      	ldr	r4, [pc, #48]	; (85bec <my_blink+0x54>)
   85bba:	47a0      	blx	r4
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) TurnOn_PARAMETER, 		/* The parameter passed to the task - just to check the functionality. */
				TurnOn_TASK_PRIORITY, 				/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvTurnOffTask, 
   85bbc:	2301      	movs	r3, #1
   85bbe:	9300      	str	r3, [sp, #0]
   85bc0:	2300      	movs	r3, #0
   85bc2:	9301      	str	r3, [sp, #4]
   85bc4:	2300      	movs	r3, #0
   85bc6:	9302      	str	r3, [sp, #8]
   85bc8:	2300      	movs	r3, #0
   85bca:	9303      	str	r3, [sp, #12]
   85bcc:	4808      	ldr	r0, [pc, #32]	; (85bf0 <my_blink+0x58>)
   85bce:	4909      	ldr	r1, [pc, #36]	; (85bf4 <my_blink+0x5c>)
   85bd0:	2282      	movs	r2, #130	; 0x82
   85bd2:	f245 6378 	movw	r3, #22136	; 0x5678
   85bd6:	4c05      	ldr	r4, [pc, #20]	; (85bec <my_blink+0x54>)
   85bd8:	47a0      	blx	r4
				 "OFF", 
				 configMINIMAL_STACK_SIZE, 
				 ( void * ) TurnOff_PARAMETER, 
				 TurnOn_TASK_PRIORITY, 
				 NULL );
	return;					 
   85bda:	bf00      	nop
}
   85bdc:	3704      	adds	r7, #4
   85bde:	46bd      	mov	sp, r7
   85be0:	bd90      	pop	{r4, r7, pc}
   85be2:	bf00      	nop
   85be4:	00085bf9 	.word	0x00085bf9
   85be8:	00086a08 	.word	0x00086a08
   85bec:	00083c4d 	.word	0x00083c4d
   85bf0:	00085c21 	.word	0x00085c21
   85bf4:	00086a0c 	.word	0x00086a0c

00085bf8 <prvTurnOnTask>:
/**
 * \brief Sets LED pin to high.
 * @param *pvParameters:	
 */
static void prvTurnOnTask( void *pvParameters )
{
   85bf8:	b580      	push	{r7, lr}
   85bfa:	b082      	sub	sp, #8
   85bfc:	af00      	add	r7, sp, #0
   85bfe:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   85c00:	687a      	ldr	r2, [r7, #4]
   85c02:	f241 2334 	movw	r3, #4660	; 0x1234
   85c06:	429a      	cmp	r2, r3
   85c08:	d002      	beq.n	85c10 <prvTurnOnTask+0x18>
   85c0a:	4b03      	ldr	r3, [pc, #12]	; (85c18 <prvTurnOnTask+0x20>)
   85c0c:	4798      	blx	r3
   85c0e:	e7fe      	b.n	85c0e <prvTurnOnTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_high(LED0_GPIO);
   85c10:	203b      	movs	r0, #59	; 0x3b
   85c12:	4b02      	ldr	r3, [pc, #8]	; (85c1c <prvTurnOnTask+0x24>)
   85c14:	4798      	blx	r3
	}
   85c16:	e7fb      	b.n	85c10 <prvTurnOnTask+0x18>
   85c18:	00082ed9 	.word	0x00082ed9
   85c1c:	00081e81 	.word	0x00081e81

00085c20 <prvTurnOffTask>:
/**
 * \brief Sets LED pin to low.
 * @param *pvParameters:
 */
static void prvTurnOffTask( void *pvParameters )
{
   85c20:	b580      	push	{r7, lr}
   85c22:	b082      	sub	sp, #8
   85c24:	af00      	add	r7, sp, #0
   85c26:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   85c28:	687a      	ldr	r2, [r7, #4]
   85c2a:	f245 6378 	movw	r3, #22136	; 0x5678
   85c2e:	429a      	cmp	r2, r3
   85c30:	d002      	beq.n	85c38 <prvTurnOffTask+0x18>
   85c32:	4b03      	ldr	r3, [pc, #12]	; (85c40 <prvTurnOffTask+0x20>)
   85c34:	4798      	blx	r3
   85c36:	e7fe      	b.n	85c36 <prvTurnOffTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_low(LED0_GPIO);
   85c38:	203b      	movs	r0, #59	; 0x3b
   85c3a:	4b02      	ldr	r3, [pc, #8]	; (85c44 <prvTurnOffTask+0x24>)
   85c3c:	4798      	blx	r3
	}
   85c3e:	e7fb      	b.n	85c38 <prvTurnOffTask+0x18>
   85c40:	00082ed9 	.word	0x00082ed9
   85c44:	00081eb5 	.word	0x00081eb5

00085c48 <__aeabi_drsub>:
   85c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   85c4c:	e002      	b.n	85c54 <__adddf3>
   85c4e:	bf00      	nop

00085c50 <__aeabi_dsub>:
   85c50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00085c54 <__adddf3>:
   85c54:	b530      	push	{r4, r5, lr}
   85c56:	ea4f 0441 	mov.w	r4, r1, lsl #1
   85c5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   85c5e:	ea94 0f05 	teq	r4, r5
   85c62:	bf08      	it	eq
   85c64:	ea90 0f02 	teqeq	r0, r2
   85c68:	bf1f      	itttt	ne
   85c6a:	ea54 0c00 	orrsne.w	ip, r4, r0
   85c6e:	ea55 0c02 	orrsne.w	ip, r5, r2
   85c72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   85c76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85c7a:	f000 80e2 	beq.w	85e42 <__adddf3+0x1ee>
   85c7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   85c82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   85c86:	bfb8      	it	lt
   85c88:	426d      	neglt	r5, r5
   85c8a:	dd0c      	ble.n	85ca6 <__adddf3+0x52>
   85c8c:	442c      	add	r4, r5
   85c8e:	ea80 0202 	eor.w	r2, r0, r2
   85c92:	ea81 0303 	eor.w	r3, r1, r3
   85c96:	ea82 0000 	eor.w	r0, r2, r0
   85c9a:	ea83 0101 	eor.w	r1, r3, r1
   85c9e:	ea80 0202 	eor.w	r2, r0, r2
   85ca2:	ea81 0303 	eor.w	r3, r1, r3
   85ca6:	2d36      	cmp	r5, #54	; 0x36
   85ca8:	bf88      	it	hi
   85caa:	bd30      	pophi	{r4, r5, pc}
   85cac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85cb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   85cb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   85cb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   85cbc:	d002      	beq.n	85cc4 <__adddf3+0x70>
   85cbe:	4240      	negs	r0, r0
   85cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85cc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   85cc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   85ccc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   85cd0:	d002      	beq.n	85cd8 <__adddf3+0x84>
   85cd2:	4252      	negs	r2, r2
   85cd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85cd8:	ea94 0f05 	teq	r4, r5
   85cdc:	f000 80a7 	beq.w	85e2e <__adddf3+0x1da>
   85ce0:	f1a4 0401 	sub.w	r4, r4, #1
   85ce4:	f1d5 0e20 	rsbs	lr, r5, #32
   85ce8:	db0d      	blt.n	85d06 <__adddf3+0xb2>
   85cea:	fa02 fc0e 	lsl.w	ip, r2, lr
   85cee:	fa22 f205 	lsr.w	r2, r2, r5
   85cf2:	1880      	adds	r0, r0, r2
   85cf4:	f141 0100 	adc.w	r1, r1, #0
   85cf8:	fa03 f20e 	lsl.w	r2, r3, lr
   85cfc:	1880      	adds	r0, r0, r2
   85cfe:	fa43 f305 	asr.w	r3, r3, r5
   85d02:	4159      	adcs	r1, r3
   85d04:	e00e      	b.n	85d24 <__adddf3+0xd0>
   85d06:	f1a5 0520 	sub.w	r5, r5, #32
   85d0a:	f10e 0e20 	add.w	lr, lr, #32
   85d0e:	2a01      	cmp	r2, #1
   85d10:	fa03 fc0e 	lsl.w	ip, r3, lr
   85d14:	bf28      	it	cs
   85d16:	f04c 0c02 	orrcs.w	ip, ip, #2
   85d1a:	fa43 f305 	asr.w	r3, r3, r5
   85d1e:	18c0      	adds	r0, r0, r3
   85d20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   85d24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85d28:	d507      	bpl.n	85d3a <__adddf3+0xe6>
   85d2a:	f04f 0e00 	mov.w	lr, #0
   85d2e:	f1dc 0c00 	rsbs	ip, ip, #0
   85d32:	eb7e 0000 	sbcs.w	r0, lr, r0
   85d36:	eb6e 0101 	sbc.w	r1, lr, r1
   85d3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   85d3e:	d31b      	bcc.n	85d78 <__adddf3+0x124>
   85d40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   85d44:	d30c      	bcc.n	85d60 <__adddf3+0x10c>
   85d46:	0849      	lsrs	r1, r1, #1
   85d48:	ea5f 0030 	movs.w	r0, r0, rrx
   85d4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   85d50:	f104 0401 	add.w	r4, r4, #1
   85d54:	ea4f 5244 	mov.w	r2, r4, lsl #21
   85d58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   85d5c:	f080 809a 	bcs.w	85e94 <__adddf3+0x240>
   85d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   85d64:	bf08      	it	eq
   85d66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   85d6a:	f150 0000 	adcs.w	r0, r0, #0
   85d6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   85d72:	ea41 0105 	orr.w	r1, r1, r5
   85d76:	bd30      	pop	{r4, r5, pc}
   85d78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   85d7c:	4140      	adcs	r0, r0
   85d7e:	eb41 0101 	adc.w	r1, r1, r1
   85d82:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   85d86:	f1a4 0401 	sub.w	r4, r4, #1
   85d8a:	d1e9      	bne.n	85d60 <__adddf3+0x10c>
   85d8c:	f091 0f00 	teq	r1, #0
   85d90:	bf04      	itt	eq
   85d92:	4601      	moveq	r1, r0
   85d94:	2000      	moveq	r0, #0
   85d96:	fab1 f381 	clz	r3, r1
   85d9a:	bf08      	it	eq
   85d9c:	3320      	addeq	r3, #32
   85d9e:	f1a3 030b 	sub.w	r3, r3, #11
   85da2:	f1b3 0220 	subs.w	r2, r3, #32
   85da6:	da0c      	bge.n	85dc2 <__adddf3+0x16e>
   85da8:	320c      	adds	r2, #12
   85daa:	dd08      	ble.n	85dbe <__adddf3+0x16a>
   85dac:	f102 0c14 	add.w	ip, r2, #20
   85db0:	f1c2 020c 	rsb	r2, r2, #12
   85db4:	fa01 f00c 	lsl.w	r0, r1, ip
   85db8:	fa21 f102 	lsr.w	r1, r1, r2
   85dbc:	e00c      	b.n	85dd8 <__adddf3+0x184>
   85dbe:	f102 0214 	add.w	r2, r2, #20
   85dc2:	bfd8      	it	le
   85dc4:	f1c2 0c20 	rsble	ip, r2, #32
   85dc8:	fa01 f102 	lsl.w	r1, r1, r2
   85dcc:	fa20 fc0c 	lsr.w	ip, r0, ip
   85dd0:	bfdc      	itt	le
   85dd2:	ea41 010c 	orrle.w	r1, r1, ip
   85dd6:	4090      	lslle	r0, r2
   85dd8:	1ae4      	subs	r4, r4, r3
   85dda:	bfa2      	ittt	ge
   85ddc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   85de0:	4329      	orrge	r1, r5
   85de2:	bd30      	popge	{r4, r5, pc}
   85de4:	ea6f 0404 	mvn.w	r4, r4
   85de8:	3c1f      	subs	r4, #31
   85dea:	da1c      	bge.n	85e26 <__adddf3+0x1d2>
   85dec:	340c      	adds	r4, #12
   85dee:	dc0e      	bgt.n	85e0e <__adddf3+0x1ba>
   85df0:	f104 0414 	add.w	r4, r4, #20
   85df4:	f1c4 0220 	rsb	r2, r4, #32
   85df8:	fa20 f004 	lsr.w	r0, r0, r4
   85dfc:	fa01 f302 	lsl.w	r3, r1, r2
   85e00:	ea40 0003 	orr.w	r0, r0, r3
   85e04:	fa21 f304 	lsr.w	r3, r1, r4
   85e08:	ea45 0103 	orr.w	r1, r5, r3
   85e0c:	bd30      	pop	{r4, r5, pc}
   85e0e:	f1c4 040c 	rsb	r4, r4, #12
   85e12:	f1c4 0220 	rsb	r2, r4, #32
   85e16:	fa20 f002 	lsr.w	r0, r0, r2
   85e1a:	fa01 f304 	lsl.w	r3, r1, r4
   85e1e:	ea40 0003 	orr.w	r0, r0, r3
   85e22:	4629      	mov	r1, r5
   85e24:	bd30      	pop	{r4, r5, pc}
   85e26:	fa21 f004 	lsr.w	r0, r1, r4
   85e2a:	4629      	mov	r1, r5
   85e2c:	bd30      	pop	{r4, r5, pc}
   85e2e:	f094 0f00 	teq	r4, #0
   85e32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   85e36:	bf06      	itte	eq
   85e38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   85e3c:	3401      	addeq	r4, #1
   85e3e:	3d01      	subne	r5, #1
   85e40:	e74e      	b.n	85ce0 <__adddf3+0x8c>
   85e42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85e46:	bf18      	it	ne
   85e48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   85e4c:	d029      	beq.n	85ea2 <__adddf3+0x24e>
   85e4e:	ea94 0f05 	teq	r4, r5
   85e52:	bf08      	it	eq
   85e54:	ea90 0f02 	teqeq	r0, r2
   85e58:	d005      	beq.n	85e66 <__adddf3+0x212>
   85e5a:	ea54 0c00 	orrs.w	ip, r4, r0
   85e5e:	bf04      	itt	eq
   85e60:	4619      	moveq	r1, r3
   85e62:	4610      	moveq	r0, r2
   85e64:	bd30      	pop	{r4, r5, pc}
   85e66:	ea91 0f03 	teq	r1, r3
   85e6a:	bf1e      	ittt	ne
   85e6c:	2100      	movne	r1, #0
   85e6e:	2000      	movne	r0, #0
   85e70:	bd30      	popne	{r4, r5, pc}
   85e72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   85e76:	d105      	bne.n	85e84 <__adddf3+0x230>
   85e78:	0040      	lsls	r0, r0, #1
   85e7a:	4149      	adcs	r1, r1
   85e7c:	bf28      	it	cs
   85e7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   85e82:	bd30      	pop	{r4, r5, pc}
   85e84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   85e88:	bf3c      	itt	cc
   85e8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   85e8e:	bd30      	popcc	{r4, r5, pc}
   85e90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85e94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   85e98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   85e9c:	f04f 0000 	mov.w	r0, #0
   85ea0:	bd30      	pop	{r4, r5, pc}
   85ea2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   85ea6:	bf1a      	itte	ne
   85ea8:	4619      	movne	r1, r3
   85eaa:	4610      	movne	r0, r2
   85eac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   85eb0:	bf1c      	itt	ne
   85eb2:	460b      	movne	r3, r1
   85eb4:	4602      	movne	r2, r0
   85eb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   85eba:	bf06      	itte	eq
   85ebc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   85ec0:	ea91 0f03 	teqeq	r1, r3
   85ec4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   85ec8:	bd30      	pop	{r4, r5, pc}
   85eca:	bf00      	nop

00085ecc <__aeabi_ui2d>:
   85ecc:	f090 0f00 	teq	r0, #0
   85ed0:	bf04      	itt	eq
   85ed2:	2100      	moveq	r1, #0
   85ed4:	4770      	bxeq	lr
   85ed6:	b530      	push	{r4, r5, lr}
   85ed8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85edc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85ee0:	f04f 0500 	mov.w	r5, #0
   85ee4:	f04f 0100 	mov.w	r1, #0
   85ee8:	e750      	b.n	85d8c <__adddf3+0x138>
   85eea:	bf00      	nop

00085eec <__aeabi_i2d>:
   85eec:	f090 0f00 	teq	r0, #0
   85ef0:	bf04      	itt	eq
   85ef2:	2100      	moveq	r1, #0
   85ef4:	4770      	bxeq	lr
   85ef6:	b530      	push	{r4, r5, lr}
   85ef8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85efc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85f00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   85f04:	bf48      	it	mi
   85f06:	4240      	negmi	r0, r0
   85f08:	f04f 0100 	mov.w	r1, #0
   85f0c:	e73e      	b.n	85d8c <__adddf3+0x138>
   85f0e:	bf00      	nop

00085f10 <__aeabi_f2d>:
   85f10:	0042      	lsls	r2, r0, #1
   85f12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   85f16:	ea4f 0131 	mov.w	r1, r1, rrx
   85f1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   85f1e:	bf1f      	itttt	ne
   85f20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   85f24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85f28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   85f2c:	4770      	bxne	lr
   85f2e:	f092 0f00 	teq	r2, #0
   85f32:	bf14      	ite	ne
   85f34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   85f38:	4770      	bxeq	lr
   85f3a:	b530      	push	{r4, r5, lr}
   85f3c:	f44f 7460 	mov.w	r4, #896	; 0x380
   85f40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   85f44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   85f48:	e720      	b.n	85d8c <__adddf3+0x138>
   85f4a:	bf00      	nop

00085f4c <__aeabi_ul2d>:
   85f4c:	ea50 0201 	orrs.w	r2, r0, r1
   85f50:	bf08      	it	eq
   85f52:	4770      	bxeq	lr
   85f54:	b530      	push	{r4, r5, lr}
   85f56:	f04f 0500 	mov.w	r5, #0
   85f5a:	e00a      	b.n	85f72 <__aeabi_l2d+0x16>

00085f5c <__aeabi_l2d>:
   85f5c:	ea50 0201 	orrs.w	r2, r0, r1
   85f60:	bf08      	it	eq
   85f62:	4770      	bxeq	lr
   85f64:	b530      	push	{r4, r5, lr}
   85f66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   85f6a:	d502      	bpl.n	85f72 <__aeabi_l2d+0x16>
   85f6c:	4240      	negs	r0, r0
   85f6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   85f72:	f44f 6480 	mov.w	r4, #1024	; 0x400
   85f76:	f104 0432 	add.w	r4, r4, #50	; 0x32
   85f7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   85f7e:	f43f aedc 	beq.w	85d3a <__adddf3+0xe6>
   85f82:	f04f 0203 	mov.w	r2, #3
   85f86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85f8a:	bf18      	it	ne
   85f8c:	3203      	addne	r2, #3
   85f8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   85f92:	bf18      	it	ne
   85f94:	3203      	addne	r2, #3
   85f96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   85f9a:	f1c2 0320 	rsb	r3, r2, #32
   85f9e:	fa00 fc03 	lsl.w	ip, r0, r3
   85fa2:	fa20 f002 	lsr.w	r0, r0, r2
   85fa6:	fa01 fe03 	lsl.w	lr, r1, r3
   85faa:	ea40 000e 	orr.w	r0, r0, lr
   85fae:	fa21 f102 	lsr.w	r1, r1, r2
   85fb2:	4414      	add	r4, r2
   85fb4:	e6c1      	b.n	85d3a <__adddf3+0xe6>
   85fb6:	bf00      	nop

00085fb8 <__aeabi_d2f>:
   85fb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   85fbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   85fc0:	bf24      	itt	cs
   85fc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   85fc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   85fca:	d90d      	bls.n	85fe8 <__aeabi_d2f+0x30>
   85fcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   85fd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   85fd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   85fd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   85fdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   85fe0:	bf08      	it	eq
   85fe2:	f020 0001 	biceq.w	r0, r0, #1
   85fe6:	4770      	bx	lr
   85fe8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   85fec:	d121      	bne.n	86032 <__aeabi_d2f+0x7a>
   85fee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   85ff2:	bfbc      	itt	lt
   85ff4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   85ff8:	4770      	bxlt	lr
   85ffa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   85ffe:	ea4f 5252 	mov.w	r2, r2, lsr #21
   86002:	f1c2 0218 	rsb	r2, r2, #24
   86006:	f1c2 0c20 	rsb	ip, r2, #32
   8600a:	fa10 f30c 	lsls.w	r3, r0, ip
   8600e:	fa20 f002 	lsr.w	r0, r0, r2
   86012:	bf18      	it	ne
   86014:	f040 0001 	orrne.w	r0, r0, #1
   86018:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8601c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   86020:	fa03 fc0c 	lsl.w	ip, r3, ip
   86024:	ea40 000c 	orr.w	r0, r0, ip
   86028:	fa23 f302 	lsr.w	r3, r3, r2
   8602c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   86030:	e7cc      	b.n	85fcc <__aeabi_d2f+0x14>
   86032:	ea7f 5362 	mvns.w	r3, r2, asr #21
   86036:	d107      	bne.n	86048 <__aeabi_d2f+0x90>
   86038:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   8603c:	bf1e      	ittt	ne
   8603e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   86042:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   86046:	4770      	bxne	lr
   86048:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   8604c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86050:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86054:	4770      	bx	lr
   86056:	bf00      	nop

00086058 <__aeabi_frsub>:
   86058:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8605c:	e002      	b.n	86064 <__addsf3>
   8605e:	bf00      	nop

00086060 <__aeabi_fsub>:
   86060:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00086064 <__addsf3>:
   86064:	0042      	lsls	r2, r0, #1
   86066:	bf1f      	itttt	ne
   86068:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8606c:	ea92 0f03 	teqne	r2, r3
   86070:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   86074:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86078:	d06a      	beq.n	86150 <__addsf3+0xec>
   8607a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8607e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   86082:	bfc1      	itttt	gt
   86084:	18d2      	addgt	r2, r2, r3
   86086:	4041      	eorgt	r1, r0
   86088:	4048      	eorgt	r0, r1
   8608a:	4041      	eorgt	r1, r0
   8608c:	bfb8      	it	lt
   8608e:	425b      	neglt	r3, r3
   86090:	2b19      	cmp	r3, #25
   86092:	bf88      	it	hi
   86094:	4770      	bxhi	lr
   86096:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8609a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8609e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   860a2:	bf18      	it	ne
   860a4:	4240      	negne	r0, r0
   860a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   860aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   860ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   860b2:	bf18      	it	ne
   860b4:	4249      	negne	r1, r1
   860b6:	ea92 0f03 	teq	r2, r3
   860ba:	d03f      	beq.n	8613c <__addsf3+0xd8>
   860bc:	f1a2 0201 	sub.w	r2, r2, #1
   860c0:	fa41 fc03 	asr.w	ip, r1, r3
   860c4:	eb10 000c 	adds.w	r0, r0, ip
   860c8:	f1c3 0320 	rsb	r3, r3, #32
   860cc:	fa01 f103 	lsl.w	r1, r1, r3
   860d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   860d4:	d502      	bpl.n	860dc <__addsf3+0x78>
   860d6:	4249      	negs	r1, r1
   860d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   860dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   860e0:	d313      	bcc.n	8610a <__addsf3+0xa6>
   860e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   860e6:	d306      	bcc.n	860f6 <__addsf3+0x92>
   860e8:	0840      	lsrs	r0, r0, #1
   860ea:	ea4f 0131 	mov.w	r1, r1, rrx
   860ee:	f102 0201 	add.w	r2, r2, #1
   860f2:	2afe      	cmp	r2, #254	; 0xfe
   860f4:	d251      	bcs.n	8619a <__addsf3+0x136>
   860f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   860fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   860fe:	bf08      	it	eq
   86100:	f020 0001 	biceq.w	r0, r0, #1
   86104:	ea40 0003 	orr.w	r0, r0, r3
   86108:	4770      	bx	lr
   8610a:	0049      	lsls	r1, r1, #1
   8610c:	eb40 0000 	adc.w	r0, r0, r0
   86110:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   86114:	f1a2 0201 	sub.w	r2, r2, #1
   86118:	d1ed      	bne.n	860f6 <__addsf3+0x92>
   8611a:	fab0 fc80 	clz	ip, r0
   8611e:	f1ac 0c08 	sub.w	ip, ip, #8
   86122:	ebb2 020c 	subs.w	r2, r2, ip
   86126:	fa00 f00c 	lsl.w	r0, r0, ip
   8612a:	bfaa      	itet	ge
   8612c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   86130:	4252      	neglt	r2, r2
   86132:	4318      	orrge	r0, r3
   86134:	bfbc      	itt	lt
   86136:	40d0      	lsrlt	r0, r2
   86138:	4318      	orrlt	r0, r3
   8613a:	4770      	bx	lr
   8613c:	f092 0f00 	teq	r2, #0
   86140:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   86144:	bf06      	itte	eq
   86146:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   8614a:	3201      	addeq	r2, #1
   8614c:	3b01      	subne	r3, #1
   8614e:	e7b5      	b.n	860bc <__addsf3+0x58>
   86150:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86154:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86158:	bf18      	it	ne
   8615a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8615e:	d021      	beq.n	861a4 <__addsf3+0x140>
   86160:	ea92 0f03 	teq	r2, r3
   86164:	d004      	beq.n	86170 <__addsf3+0x10c>
   86166:	f092 0f00 	teq	r2, #0
   8616a:	bf08      	it	eq
   8616c:	4608      	moveq	r0, r1
   8616e:	4770      	bx	lr
   86170:	ea90 0f01 	teq	r0, r1
   86174:	bf1c      	itt	ne
   86176:	2000      	movne	r0, #0
   86178:	4770      	bxne	lr
   8617a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8617e:	d104      	bne.n	8618a <__addsf3+0x126>
   86180:	0040      	lsls	r0, r0, #1
   86182:	bf28      	it	cs
   86184:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   86188:	4770      	bx	lr
   8618a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8618e:	bf3c      	itt	cc
   86190:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   86194:	4770      	bxcc	lr
   86196:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8619a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8619e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   861a2:	4770      	bx	lr
   861a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
   861a8:	bf16      	itet	ne
   861aa:	4608      	movne	r0, r1
   861ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   861b0:	4601      	movne	r1, r0
   861b2:	0242      	lsls	r2, r0, #9
   861b4:	bf06      	itte	eq
   861b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   861ba:	ea90 0f01 	teqeq	r0, r1
   861be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   861c2:	4770      	bx	lr

000861c4 <__aeabi_ui2f>:
   861c4:	f04f 0300 	mov.w	r3, #0
   861c8:	e004      	b.n	861d4 <__aeabi_i2f+0x8>
   861ca:	bf00      	nop

000861cc <__aeabi_i2f>:
   861cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   861d0:	bf48      	it	mi
   861d2:	4240      	negmi	r0, r0
   861d4:	ea5f 0c00 	movs.w	ip, r0
   861d8:	bf08      	it	eq
   861da:	4770      	bxeq	lr
   861dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   861e0:	4601      	mov	r1, r0
   861e2:	f04f 0000 	mov.w	r0, #0
   861e6:	e01c      	b.n	86222 <__aeabi_l2f+0x2a>

000861e8 <__aeabi_ul2f>:
   861e8:	ea50 0201 	orrs.w	r2, r0, r1
   861ec:	bf08      	it	eq
   861ee:	4770      	bxeq	lr
   861f0:	f04f 0300 	mov.w	r3, #0
   861f4:	e00a      	b.n	8620c <__aeabi_l2f+0x14>
   861f6:	bf00      	nop

000861f8 <__aeabi_l2f>:
   861f8:	ea50 0201 	orrs.w	r2, r0, r1
   861fc:	bf08      	it	eq
   861fe:	4770      	bxeq	lr
   86200:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   86204:	d502      	bpl.n	8620c <__aeabi_l2f+0x14>
   86206:	4240      	negs	r0, r0
   86208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8620c:	ea5f 0c01 	movs.w	ip, r1
   86210:	bf02      	ittt	eq
   86212:	4684      	moveq	ip, r0
   86214:	4601      	moveq	r1, r0
   86216:	2000      	moveq	r0, #0
   86218:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   8621c:	bf08      	it	eq
   8621e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   86222:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   86226:	fabc f28c 	clz	r2, ip
   8622a:	3a08      	subs	r2, #8
   8622c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   86230:	db10      	blt.n	86254 <__aeabi_l2f+0x5c>
   86232:	fa01 fc02 	lsl.w	ip, r1, r2
   86236:	4463      	add	r3, ip
   86238:	fa00 fc02 	lsl.w	ip, r0, r2
   8623c:	f1c2 0220 	rsb	r2, r2, #32
   86240:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86244:	fa20 f202 	lsr.w	r2, r0, r2
   86248:	eb43 0002 	adc.w	r0, r3, r2
   8624c:	bf08      	it	eq
   8624e:	f020 0001 	biceq.w	r0, r0, #1
   86252:	4770      	bx	lr
   86254:	f102 0220 	add.w	r2, r2, #32
   86258:	fa01 fc02 	lsl.w	ip, r1, r2
   8625c:	f1c2 0220 	rsb	r2, r2, #32
   86260:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   86264:	fa21 f202 	lsr.w	r2, r1, r2
   86268:	eb43 0002 	adc.w	r0, r3, r2
   8626c:	bf08      	it	eq
   8626e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86272:	4770      	bx	lr

00086274 <__aeabi_fmul>:
   86274:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86278:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8627c:	bf1e      	ittt	ne
   8627e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86282:	ea92 0f0c 	teqne	r2, ip
   86286:	ea93 0f0c 	teqne	r3, ip
   8628a:	d06f      	beq.n	8636c <__aeabi_fmul+0xf8>
   8628c:	441a      	add	r2, r3
   8628e:	ea80 0c01 	eor.w	ip, r0, r1
   86292:	0240      	lsls	r0, r0, #9
   86294:	bf18      	it	ne
   86296:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8629a:	d01e      	beq.n	862da <__aeabi_fmul+0x66>
   8629c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   862a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   862a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   862a8:	fba0 3101 	umull	r3, r1, r0, r1
   862ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   862b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   862b4:	bf3e      	ittt	cc
   862b6:	0049      	lslcc	r1, r1, #1
   862b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   862bc:	005b      	lslcc	r3, r3, #1
   862be:	ea40 0001 	orr.w	r0, r0, r1
   862c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   862c6:	2afd      	cmp	r2, #253	; 0xfd
   862c8:	d81d      	bhi.n	86306 <__aeabi_fmul+0x92>
   862ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   862ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   862d2:	bf08      	it	eq
   862d4:	f020 0001 	biceq.w	r0, r0, #1
   862d8:	4770      	bx	lr
   862da:	f090 0f00 	teq	r0, #0
   862de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   862e2:	bf08      	it	eq
   862e4:	0249      	lsleq	r1, r1, #9
   862e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   862ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   862ee:	3a7f      	subs	r2, #127	; 0x7f
   862f0:	bfc2      	ittt	gt
   862f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   862f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   862fa:	4770      	bxgt	lr
   862fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86300:	f04f 0300 	mov.w	r3, #0
   86304:	3a01      	subs	r2, #1
   86306:	dc5d      	bgt.n	863c4 <__aeabi_fmul+0x150>
   86308:	f112 0f19 	cmn.w	r2, #25
   8630c:	bfdc      	itt	le
   8630e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   86312:	4770      	bxle	lr
   86314:	f1c2 0200 	rsb	r2, r2, #0
   86318:	0041      	lsls	r1, r0, #1
   8631a:	fa21 f102 	lsr.w	r1, r1, r2
   8631e:	f1c2 0220 	rsb	r2, r2, #32
   86322:	fa00 fc02 	lsl.w	ip, r0, r2
   86326:	ea5f 0031 	movs.w	r0, r1, rrx
   8632a:	f140 0000 	adc.w	r0, r0, #0
   8632e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   86332:	bf08      	it	eq
   86334:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86338:	4770      	bx	lr
   8633a:	f092 0f00 	teq	r2, #0
   8633e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86342:	bf02      	ittt	eq
   86344:	0040      	lsleq	r0, r0, #1
   86346:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8634a:	3a01      	subeq	r2, #1
   8634c:	d0f9      	beq.n	86342 <__aeabi_fmul+0xce>
   8634e:	ea40 000c 	orr.w	r0, r0, ip
   86352:	f093 0f00 	teq	r3, #0
   86356:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8635a:	bf02      	ittt	eq
   8635c:	0049      	lsleq	r1, r1, #1
   8635e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86362:	3b01      	subeq	r3, #1
   86364:	d0f9      	beq.n	8635a <__aeabi_fmul+0xe6>
   86366:	ea41 010c 	orr.w	r1, r1, ip
   8636a:	e78f      	b.n	8628c <__aeabi_fmul+0x18>
   8636c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86370:	ea92 0f0c 	teq	r2, ip
   86374:	bf18      	it	ne
   86376:	ea93 0f0c 	teqne	r3, ip
   8637a:	d00a      	beq.n	86392 <__aeabi_fmul+0x11e>
   8637c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86380:	bf18      	it	ne
   86382:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86386:	d1d8      	bne.n	8633a <__aeabi_fmul+0xc6>
   86388:	ea80 0001 	eor.w	r0, r0, r1
   8638c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86390:	4770      	bx	lr
   86392:	f090 0f00 	teq	r0, #0
   86396:	bf17      	itett	ne
   86398:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   8639c:	4608      	moveq	r0, r1
   8639e:	f091 0f00 	teqne	r1, #0
   863a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   863a6:	d014      	beq.n	863d2 <__aeabi_fmul+0x15e>
   863a8:	ea92 0f0c 	teq	r2, ip
   863ac:	d101      	bne.n	863b2 <__aeabi_fmul+0x13e>
   863ae:	0242      	lsls	r2, r0, #9
   863b0:	d10f      	bne.n	863d2 <__aeabi_fmul+0x15e>
   863b2:	ea93 0f0c 	teq	r3, ip
   863b6:	d103      	bne.n	863c0 <__aeabi_fmul+0x14c>
   863b8:	024b      	lsls	r3, r1, #9
   863ba:	bf18      	it	ne
   863bc:	4608      	movne	r0, r1
   863be:	d108      	bne.n	863d2 <__aeabi_fmul+0x15e>
   863c0:	ea80 0001 	eor.w	r0, r0, r1
   863c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   863c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   863cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   863d0:	4770      	bx	lr
   863d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   863d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   863da:	4770      	bx	lr

000863dc <__aeabi_fdiv>:
   863dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   863e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   863e4:	bf1e      	ittt	ne
   863e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   863ea:	ea92 0f0c 	teqne	r2, ip
   863ee:	ea93 0f0c 	teqne	r3, ip
   863f2:	d069      	beq.n	864c8 <__aeabi_fdiv+0xec>
   863f4:	eba2 0203 	sub.w	r2, r2, r3
   863f8:	ea80 0c01 	eor.w	ip, r0, r1
   863fc:	0249      	lsls	r1, r1, #9
   863fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
   86402:	d037      	beq.n	86474 <__aeabi_fdiv+0x98>
   86404:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   86408:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   8640c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   86410:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86414:	428b      	cmp	r3, r1
   86416:	bf38      	it	cc
   86418:	005b      	lslcc	r3, r3, #1
   8641a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   8641e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   86422:	428b      	cmp	r3, r1
   86424:	bf24      	itt	cs
   86426:	1a5b      	subcs	r3, r3, r1
   86428:	ea40 000c 	orrcs.w	r0, r0, ip
   8642c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   86430:	bf24      	itt	cs
   86432:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   86436:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8643a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8643e:	bf24      	itt	cs
   86440:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   86444:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86448:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   8644c:	bf24      	itt	cs
   8644e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   86452:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86456:	011b      	lsls	r3, r3, #4
   86458:	bf18      	it	ne
   8645a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8645e:	d1e0      	bne.n	86422 <__aeabi_fdiv+0x46>
   86460:	2afd      	cmp	r2, #253	; 0xfd
   86462:	f63f af50 	bhi.w	86306 <__aeabi_fmul+0x92>
   86466:	428b      	cmp	r3, r1
   86468:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8646c:	bf08      	it	eq
   8646e:	f020 0001 	biceq.w	r0, r0, #1
   86472:	4770      	bx	lr
   86474:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86478:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8647c:	327f      	adds	r2, #127	; 0x7f
   8647e:	bfc2      	ittt	gt
   86480:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86484:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86488:	4770      	bxgt	lr
   8648a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8648e:	f04f 0300 	mov.w	r3, #0
   86492:	3a01      	subs	r2, #1
   86494:	e737      	b.n	86306 <__aeabi_fmul+0x92>
   86496:	f092 0f00 	teq	r2, #0
   8649a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8649e:	bf02      	ittt	eq
   864a0:	0040      	lsleq	r0, r0, #1
   864a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   864a6:	3a01      	subeq	r2, #1
   864a8:	d0f9      	beq.n	8649e <__aeabi_fdiv+0xc2>
   864aa:	ea40 000c 	orr.w	r0, r0, ip
   864ae:	f093 0f00 	teq	r3, #0
   864b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   864b6:	bf02      	ittt	eq
   864b8:	0049      	lsleq	r1, r1, #1
   864ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   864be:	3b01      	subeq	r3, #1
   864c0:	d0f9      	beq.n	864b6 <__aeabi_fdiv+0xda>
   864c2:	ea41 010c 	orr.w	r1, r1, ip
   864c6:	e795      	b.n	863f4 <__aeabi_fdiv+0x18>
   864c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   864cc:	ea92 0f0c 	teq	r2, ip
   864d0:	d108      	bne.n	864e4 <__aeabi_fdiv+0x108>
   864d2:	0242      	lsls	r2, r0, #9
   864d4:	f47f af7d 	bne.w	863d2 <__aeabi_fmul+0x15e>
   864d8:	ea93 0f0c 	teq	r3, ip
   864dc:	f47f af70 	bne.w	863c0 <__aeabi_fmul+0x14c>
   864e0:	4608      	mov	r0, r1
   864e2:	e776      	b.n	863d2 <__aeabi_fmul+0x15e>
   864e4:	ea93 0f0c 	teq	r3, ip
   864e8:	d104      	bne.n	864f4 <__aeabi_fdiv+0x118>
   864ea:	024b      	lsls	r3, r1, #9
   864ec:	f43f af4c 	beq.w	86388 <__aeabi_fmul+0x114>
   864f0:	4608      	mov	r0, r1
   864f2:	e76e      	b.n	863d2 <__aeabi_fmul+0x15e>
   864f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   864f8:	bf18      	it	ne
   864fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   864fe:	d1ca      	bne.n	86496 <__aeabi_fdiv+0xba>
   86500:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   86504:	f47f af5c 	bne.w	863c0 <__aeabi_fmul+0x14c>
   86508:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   8650c:	f47f af3c 	bne.w	86388 <__aeabi_fmul+0x114>
   86510:	e75f      	b.n	863d2 <__aeabi_fmul+0x15e>
   86512:	bf00      	nop

00086514 <__aeabi_f2uiz>:
   86514:	0042      	lsls	r2, r0, #1
   86516:	d20e      	bcs.n	86536 <__aeabi_f2uiz+0x22>
   86518:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8651c:	d30b      	bcc.n	86536 <__aeabi_f2uiz+0x22>
   8651e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   86522:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   86526:	d409      	bmi.n	8653c <__aeabi_f2uiz+0x28>
   86528:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8652c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86530:	fa23 f002 	lsr.w	r0, r3, r2
   86534:	4770      	bx	lr
   86536:	f04f 0000 	mov.w	r0, #0
   8653a:	4770      	bx	lr
   8653c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86540:	d101      	bne.n	86546 <__aeabi_f2uiz+0x32>
   86542:	0242      	lsls	r2, r0, #9
   86544:	d102      	bne.n	8654c <__aeabi_f2uiz+0x38>
   86546:	f04f 30ff 	mov.w	r0, #4294967295
   8654a:	4770      	bx	lr
   8654c:	f04f 0000 	mov.w	r0, #0
   86550:	4770      	bx	lr
   86552:	bf00      	nop

00086554 <__libc_init_array>:
   86554:	b570      	push	{r4, r5, r6, lr}
   86556:	4e0f      	ldr	r6, [pc, #60]	; (86594 <__libc_init_array+0x40>)
   86558:	4d0f      	ldr	r5, [pc, #60]	; (86598 <__libc_init_array+0x44>)
   8655a:	1b76      	subs	r6, r6, r5
   8655c:	10b6      	asrs	r6, r6, #2
   8655e:	d007      	beq.n	86570 <__libc_init_array+0x1c>
   86560:	3d04      	subs	r5, #4
   86562:	2400      	movs	r4, #0
   86564:	3401      	adds	r4, #1
   86566:	f855 3f04 	ldr.w	r3, [r5, #4]!
   8656a:	4798      	blx	r3
   8656c:	42a6      	cmp	r6, r4
   8656e:	d1f9      	bne.n	86564 <__libc_init_array+0x10>
   86570:	4e0a      	ldr	r6, [pc, #40]	; (8659c <__libc_init_array+0x48>)
   86572:	4d0b      	ldr	r5, [pc, #44]	; (865a0 <__libc_init_array+0x4c>)
   86574:	f000 fa50 	bl	86a18 <_init>
   86578:	1b76      	subs	r6, r6, r5
   8657a:	10b6      	asrs	r6, r6, #2
   8657c:	d008      	beq.n	86590 <__libc_init_array+0x3c>
   8657e:	3d04      	subs	r5, #4
   86580:	2400      	movs	r4, #0
   86582:	3401      	adds	r4, #1
   86584:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86588:	4798      	blx	r3
   8658a:	42a6      	cmp	r6, r4
   8658c:	d1f9      	bne.n	86582 <__libc_init_array+0x2e>
   8658e:	bd70      	pop	{r4, r5, r6, pc}
   86590:	bd70      	pop	{r4, r5, r6, pc}
   86592:	bf00      	nop
   86594:	00086a24 	.word	0x00086a24
   86598:	00086a24 	.word	0x00086a24
   8659c:	00086a2c 	.word	0x00086a2c
   865a0:	00086a24 	.word	0x00086a24

000865a4 <memcmp>:
   865a4:	2a03      	cmp	r2, #3
   865a6:	b470      	push	{r4, r5, r6}
   865a8:	d928      	bls.n	865fc <memcmp+0x58>
   865aa:	ea40 0301 	orr.w	r3, r0, r1
   865ae:	079b      	lsls	r3, r3, #30
   865b0:	d013      	beq.n	865da <memcmp+0x36>
   865b2:	7805      	ldrb	r5, [r0, #0]
   865b4:	780c      	ldrb	r4, [r1, #0]
   865b6:	42a5      	cmp	r5, r4
   865b8:	d124      	bne.n	86604 <memcmp+0x60>
   865ba:	3a01      	subs	r2, #1
   865bc:	2300      	movs	r3, #0
   865be:	e005      	b.n	865cc <memcmp+0x28>
   865c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   865c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   865c8:	42a5      	cmp	r5, r4
   865ca:	d11b      	bne.n	86604 <memcmp+0x60>
   865cc:	4293      	cmp	r3, r2
   865ce:	f103 0301 	add.w	r3, r3, #1
   865d2:	d1f5      	bne.n	865c0 <memcmp+0x1c>
   865d4:	2000      	movs	r0, #0
   865d6:	bc70      	pop	{r4, r5, r6}
   865d8:	4770      	bx	lr
   865da:	460c      	mov	r4, r1
   865dc:	4603      	mov	r3, r0
   865de:	6825      	ldr	r5, [r4, #0]
   865e0:	681e      	ldr	r6, [r3, #0]
   865e2:	4621      	mov	r1, r4
   865e4:	42ae      	cmp	r6, r5
   865e6:	4618      	mov	r0, r3
   865e8:	f104 0404 	add.w	r4, r4, #4
   865ec:	f103 0304 	add.w	r3, r3, #4
   865f0:	d104      	bne.n	865fc <memcmp+0x58>
   865f2:	3a04      	subs	r2, #4
   865f4:	2a03      	cmp	r2, #3
   865f6:	4618      	mov	r0, r3
   865f8:	4621      	mov	r1, r4
   865fa:	d8f0      	bhi.n	865de <memcmp+0x3a>
   865fc:	2a00      	cmp	r2, #0
   865fe:	d1d8      	bne.n	865b2 <memcmp+0xe>
   86600:	4610      	mov	r0, r2
   86602:	e7e8      	b.n	865d6 <memcmp+0x32>
   86604:	1b28      	subs	r0, r5, r4
   86606:	bc70      	pop	{r4, r5, r6}
   86608:	4770      	bx	lr
   8660a:	bf00      	nop

0008660c <memcpy>:
   8660c:	4684      	mov	ip, r0
   8660e:	ea41 0300 	orr.w	r3, r1, r0
   86612:	f013 0303 	ands.w	r3, r3, #3
   86616:	d149      	bne.n	866ac <memcpy+0xa0>
   86618:	3a40      	subs	r2, #64	; 0x40
   8661a:	d323      	bcc.n	86664 <memcpy+0x58>
   8661c:	680b      	ldr	r3, [r1, #0]
   8661e:	6003      	str	r3, [r0, #0]
   86620:	684b      	ldr	r3, [r1, #4]
   86622:	6043      	str	r3, [r0, #4]
   86624:	688b      	ldr	r3, [r1, #8]
   86626:	6083      	str	r3, [r0, #8]
   86628:	68cb      	ldr	r3, [r1, #12]
   8662a:	60c3      	str	r3, [r0, #12]
   8662c:	690b      	ldr	r3, [r1, #16]
   8662e:	6103      	str	r3, [r0, #16]
   86630:	694b      	ldr	r3, [r1, #20]
   86632:	6143      	str	r3, [r0, #20]
   86634:	698b      	ldr	r3, [r1, #24]
   86636:	6183      	str	r3, [r0, #24]
   86638:	69cb      	ldr	r3, [r1, #28]
   8663a:	61c3      	str	r3, [r0, #28]
   8663c:	6a0b      	ldr	r3, [r1, #32]
   8663e:	6203      	str	r3, [r0, #32]
   86640:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86642:	6243      	str	r3, [r0, #36]	; 0x24
   86644:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86646:	6283      	str	r3, [r0, #40]	; 0x28
   86648:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8664a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8664c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8664e:	6303      	str	r3, [r0, #48]	; 0x30
   86650:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86652:	6343      	str	r3, [r0, #52]	; 0x34
   86654:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86656:	6383      	str	r3, [r0, #56]	; 0x38
   86658:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8665a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8665c:	3040      	adds	r0, #64	; 0x40
   8665e:	3140      	adds	r1, #64	; 0x40
   86660:	3a40      	subs	r2, #64	; 0x40
   86662:	d2db      	bcs.n	8661c <memcpy+0x10>
   86664:	3230      	adds	r2, #48	; 0x30
   86666:	d30b      	bcc.n	86680 <memcpy+0x74>
   86668:	680b      	ldr	r3, [r1, #0]
   8666a:	6003      	str	r3, [r0, #0]
   8666c:	684b      	ldr	r3, [r1, #4]
   8666e:	6043      	str	r3, [r0, #4]
   86670:	688b      	ldr	r3, [r1, #8]
   86672:	6083      	str	r3, [r0, #8]
   86674:	68cb      	ldr	r3, [r1, #12]
   86676:	60c3      	str	r3, [r0, #12]
   86678:	3010      	adds	r0, #16
   8667a:	3110      	adds	r1, #16
   8667c:	3a10      	subs	r2, #16
   8667e:	d2f3      	bcs.n	86668 <memcpy+0x5c>
   86680:	320c      	adds	r2, #12
   86682:	d305      	bcc.n	86690 <memcpy+0x84>
   86684:	f851 3b04 	ldr.w	r3, [r1], #4
   86688:	f840 3b04 	str.w	r3, [r0], #4
   8668c:	3a04      	subs	r2, #4
   8668e:	d2f9      	bcs.n	86684 <memcpy+0x78>
   86690:	3204      	adds	r2, #4
   86692:	d008      	beq.n	866a6 <memcpy+0x9a>
   86694:	07d2      	lsls	r2, r2, #31
   86696:	bf1c      	itt	ne
   86698:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8669c:	f800 3b01 	strbne.w	r3, [r0], #1
   866a0:	d301      	bcc.n	866a6 <memcpy+0x9a>
   866a2:	880b      	ldrh	r3, [r1, #0]
   866a4:	8003      	strh	r3, [r0, #0]
   866a6:	4660      	mov	r0, ip
   866a8:	4770      	bx	lr
   866aa:	bf00      	nop
   866ac:	2a08      	cmp	r2, #8
   866ae:	d313      	bcc.n	866d8 <memcpy+0xcc>
   866b0:	078b      	lsls	r3, r1, #30
   866b2:	d0b1      	beq.n	86618 <memcpy+0xc>
   866b4:	f010 0303 	ands.w	r3, r0, #3
   866b8:	d0ae      	beq.n	86618 <memcpy+0xc>
   866ba:	f1c3 0304 	rsb	r3, r3, #4
   866be:	1ad2      	subs	r2, r2, r3
   866c0:	07db      	lsls	r3, r3, #31
   866c2:	bf1c      	itt	ne
   866c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   866c8:	f800 3b01 	strbne.w	r3, [r0], #1
   866cc:	d3a4      	bcc.n	86618 <memcpy+0xc>
   866ce:	f831 3b02 	ldrh.w	r3, [r1], #2
   866d2:	f820 3b02 	strh.w	r3, [r0], #2
   866d6:	e79f      	b.n	86618 <memcpy+0xc>
   866d8:	3a04      	subs	r2, #4
   866da:	d3d9      	bcc.n	86690 <memcpy+0x84>
   866dc:	3a01      	subs	r2, #1
   866de:	f811 3b01 	ldrb.w	r3, [r1], #1
   866e2:	f800 3b01 	strb.w	r3, [r0], #1
   866e6:	d2f9      	bcs.n	866dc <memcpy+0xd0>
   866e8:	780b      	ldrb	r3, [r1, #0]
   866ea:	7003      	strb	r3, [r0, #0]
   866ec:	784b      	ldrb	r3, [r1, #1]
   866ee:	7043      	strb	r3, [r0, #1]
   866f0:	788b      	ldrb	r3, [r1, #2]
   866f2:	7083      	strb	r3, [r0, #2]
   866f4:	4660      	mov	r0, ip
   866f6:	4770      	bx	lr

000866f8 <memset>:
   866f8:	b4f0      	push	{r4, r5, r6, r7}
   866fa:	0784      	lsls	r4, r0, #30
   866fc:	d043      	beq.n	86786 <memset+0x8e>
   866fe:	1e54      	subs	r4, r2, #1
   86700:	2a00      	cmp	r2, #0
   86702:	d03e      	beq.n	86782 <memset+0x8a>
   86704:	b2cd      	uxtb	r5, r1
   86706:	4603      	mov	r3, r0
   86708:	e003      	b.n	86712 <memset+0x1a>
   8670a:	1e62      	subs	r2, r4, #1
   8670c:	2c00      	cmp	r4, #0
   8670e:	d038      	beq.n	86782 <memset+0x8a>
   86710:	4614      	mov	r4, r2
   86712:	f803 5b01 	strb.w	r5, [r3], #1
   86716:	079a      	lsls	r2, r3, #30
   86718:	d1f7      	bne.n	8670a <memset+0x12>
   8671a:	2c03      	cmp	r4, #3
   8671c:	d92a      	bls.n	86774 <memset+0x7c>
   8671e:	b2cd      	uxtb	r5, r1
   86720:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86724:	2c0f      	cmp	r4, #15
   86726:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8672a:	d915      	bls.n	86758 <memset+0x60>
   8672c:	f1a4 0710 	sub.w	r7, r4, #16
   86730:	093f      	lsrs	r7, r7, #4
   86732:	f103 0610 	add.w	r6, r3, #16
   86736:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8673a:	461a      	mov	r2, r3
   8673c:	6015      	str	r5, [r2, #0]
   8673e:	6055      	str	r5, [r2, #4]
   86740:	6095      	str	r5, [r2, #8]
   86742:	60d5      	str	r5, [r2, #12]
   86744:	3210      	adds	r2, #16
   86746:	42b2      	cmp	r2, r6
   86748:	d1f8      	bne.n	8673c <memset+0x44>
   8674a:	f004 040f 	and.w	r4, r4, #15
   8674e:	3701      	adds	r7, #1
   86750:	2c03      	cmp	r4, #3
   86752:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   86756:	d90d      	bls.n	86774 <memset+0x7c>
   86758:	461e      	mov	r6, r3
   8675a:	4622      	mov	r2, r4
   8675c:	3a04      	subs	r2, #4
   8675e:	2a03      	cmp	r2, #3
   86760:	f846 5b04 	str.w	r5, [r6], #4
   86764:	d8fa      	bhi.n	8675c <memset+0x64>
   86766:	1f22      	subs	r2, r4, #4
   86768:	f022 0203 	bic.w	r2, r2, #3
   8676c:	3204      	adds	r2, #4
   8676e:	4413      	add	r3, r2
   86770:	f004 0403 	and.w	r4, r4, #3
   86774:	b12c      	cbz	r4, 86782 <memset+0x8a>
   86776:	b2c9      	uxtb	r1, r1
   86778:	441c      	add	r4, r3
   8677a:	f803 1b01 	strb.w	r1, [r3], #1
   8677e:	42a3      	cmp	r3, r4
   86780:	d1fb      	bne.n	8677a <memset+0x82>
   86782:	bcf0      	pop	{r4, r5, r6, r7}
   86784:	4770      	bx	lr
   86786:	4614      	mov	r4, r2
   86788:	4603      	mov	r3, r0
   8678a:	e7c6      	b.n	8671a <memset+0x22>

0008678c <register_fini>:
   8678c:	4b02      	ldr	r3, [pc, #8]	; (86798 <register_fini+0xc>)
   8678e:	b113      	cbz	r3, 86796 <register_fini+0xa>
   86790:	4802      	ldr	r0, [pc, #8]	; (8679c <register_fini+0x10>)
   86792:	f000 b805 	b.w	867a0 <atexit>
   86796:	4770      	bx	lr
   86798:	00000000 	.word	0x00000000
   8679c:	000867ad 	.word	0x000867ad

000867a0 <atexit>:
   867a0:	4601      	mov	r1, r0
   867a2:	2000      	movs	r0, #0
   867a4:	4602      	mov	r2, r0
   867a6:	4603      	mov	r3, r0
   867a8:	f000 b818 	b.w	867dc <__register_exitproc>

000867ac <__libc_fini_array>:
   867ac:	b538      	push	{r3, r4, r5, lr}
   867ae:	4d09      	ldr	r5, [pc, #36]	; (867d4 <__libc_fini_array+0x28>)
   867b0:	4c09      	ldr	r4, [pc, #36]	; (867d8 <__libc_fini_array+0x2c>)
   867b2:	1b64      	subs	r4, r4, r5
   867b4:	10a4      	asrs	r4, r4, #2
   867b6:	bf18      	it	ne
   867b8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   867bc:	d005      	beq.n	867ca <__libc_fini_array+0x1e>
   867be:	3c01      	subs	r4, #1
   867c0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   867c4:	4798      	blx	r3
   867c6:	2c00      	cmp	r4, #0
   867c8:	d1f9      	bne.n	867be <__libc_fini_array+0x12>
   867ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   867ce:	f000 b92d 	b.w	86a2c <_fini>
   867d2:	bf00      	nop
   867d4:	00086a38 	.word	0x00086a38
   867d8:	00086a3c 	.word	0x00086a3c

000867dc <__register_exitproc>:
   867dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   867de:	4c27      	ldr	r4, [pc, #156]	; (8687c <__register_exitproc+0xa0>)
   867e0:	b085      	sub	sp, #20
   867e2:	6826      	ldr	r6, [r4, #0]
   867e4:	4607      	mov	r7, r0
   867e6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   867ea:	2c00      	cmp	r4, #0
   867ec:	d040      	beq.n	86870 <__register_exitproc+0x94>
   867ee:	6865      	ldr	r5, [r4, #4]
   867f0:	2d1f      	cmp	r5, #31
   867f2:	dd1e      	ble.n	86832 <__register_exitproc+0x56>
   867f4:	4822      	ldr	r0, [pc, #136]	; (86880 <__register_exitproc+0xa4>)
   867f6:	b918      	cbnz	r0, 86800 <__register_exitproc+0x24>
   867f8:	f04f 30ff 	mov.w	r0, #4294967295
   867fc:	b005      	add	sp, #20
   867fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86800:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86804:	9103      	str	r1, [sp, #12]
   86806:	9202      	str	r2, [sp, #8]
   86808:	9301      	str	r3, [sp, #4]
   8680a:	f3af 8000 	nop.w
   8680e:	9903      	ldr	r1, [sp, #12]
   86810:	4604      	mov	r4, r0
   86812:	9a02      	ldr	r2, [sp, #8]
   86814:	9b01      	ldr	r3, [sp, #4]
   86816:	2800      	cmp	r0, #0
   86818:	d0ee      	beq.n	867f8 <__register_exitproc+0x1c>
   8681a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8681e:	2000      	movs	r0, #0
   86820:	6025      	str	r5, [r4, #0]
   86822:	6060      	str	r0, [r4, #4]
   86824:	4605      	mov	r5, r0
   86826:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8682a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8682e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86832:	b93f      	cbnz	r7, 86844 <__register_exitproc+0x68>
   86834:	1c6b      	adds	r3, r5, #1
   86836:	2000      	movs	r0, #0
   86838:	3502      	adds	r5, #2
   8683a:	6063      	str	r3, [r4, #4]
   8683c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86840:	b005      	add	sp, #20
   86842:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86844:	2601      	movs	r6, #1
   86846:	40ae      	lsls	r6, r5
   86848:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8684c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86850:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86854:	2f02      	cmp	r7, #2
   86856:	ea42 0206 	orr.w	r2, r2, r6
   8685a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8685e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   86862:	d1e7      	bne.n	86834 <__register_exitproc+0x58>
   86864:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86868:	431e      	orrs	r6, r3
   8686a:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   8686e:	e7e1      	b.n	86834 <__register_exitproc+0x58>
   86870:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86874:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86878:	e7b9      	b.n	867ee <__register_exitproc+0x12>
   8687a:	bf00      	nop
   8687c:	00086a14 	.word	0x00086a14
   86880:	00000000 	.word	0x00000000
   86884:	00004e4f 	.word	0x00004e4f
   86888:	00004e4f 	.word	0x00004e4f
   8688c:	00004e4f 	.word	0x00004e4f

00086890 <ulLED>:
   86890:	00000057 00000056 0000003b 00000055     W...V...;...U...
   868a0:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   868b0:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   868c0:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   868d0:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   868e0:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   868f0:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   86900:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   86910:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   86920:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   86930:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86940:	0001c200 000000c0 00000800 00000000     ................
	...
   86958:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   86968:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00086978 <can_bit_time>:
   86978:	02020308 02094b03 43020303 0303030a     .....K.....C....
   86988:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86998:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   869a8:	05050510 06114504 47040505 06060512     .....E.....G....
   869b8:	06134304 44040606 06060714 08154604     .C.....D.....F..
   869c8:	47040606 07070716 08174404 46040708     ...G.....D.....F
   869d8:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   869e8:	00000000                                ....

000869ec <ucExpectedStackBytes.5295>:
   869ec:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   869fc:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   86a0c:	0046464f 00000043                       OFF.C...

00086a14 <_global_impure_ptr>:
   86a14:	20070010                                ... 

00086a18 <_init>:
   86a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86a1a:	bf00      	nop
   86a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86a1e:	bc08      	pop	{r3}
   86a20:	469e      	mov	lr, r3
   86a22:	4770      	bx	lr

00086a24 <__init_array_start>:
   86a24:	0008678d 	.word	0x0008678d

00086a28 <__frame_dummy_init_array_entry>:
   86a28:	00080119                                ....

00086a2c <_fini>:
   86a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86a2e:	bf00      	nop
   86a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86a32:	bc08      	pop	{r3}
   86a34:	469e      	mov	lr, r3
   86a36:	4770      	bx	lr

00086a38 <__fini_array_start>:
   86a38:	000800f5 	.word	0x000800f5
