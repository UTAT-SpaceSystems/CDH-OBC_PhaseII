
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000697c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  0008697c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a350  20070438  00086db4  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007a788  00091104  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f2af  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002be9  00000000  00000000  0001f76b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000061e4  00000000  00000000  00022354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001130  00000000  00000000  00028538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f70  00000000  00000000  00029668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b73a  00000000  00000000  0002a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015c2c  00000000  00000000  00045d12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006810c  00000000  00000000  0005b93e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000037c8  00000000  00000000  000c3a4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c788 	.word	0x2007c788
   80004:	00082809 	.word	0x00082809
   80008:	00082801 	.word	0x00082801
   8000c:	00082801 	.word	0x00082801
   80010:	00082801 	.word	0x00082801
   80014:	00082801 	.word	0x00082801
   80018:	00082801 	.word	0x00082801
	...
   8002c:	00082cb1 	.word	0x00082cb1
   80030:	00082801 	.word	0x00082801
   80034:	00000000 	.word	0x00000000
   80038:	00082e75 	.word	0x00082e75
   8003c:	00082eb9 	.word	0x00082eb9
   80040:	00082801 	.word	0x00082801
   80044:	00082801 	.word	0x00082801
   80048:	00082801 	.word	0x00082801
   8004c:	00082801 	.word	0x00082801
   80050:	00085dd5 	.word	0x00085dd5
   80054:	00082801 	.word	0x00082801
   80058:	00082801 	.word	0x00082801
   8005c:	00082801 	.word	0x00082801
   80060:	00082801 	.word	0x00082801
   80064:	00082801 	.word	0x00082801
   80068:	00000000 	.word	0x00000000
   8006c:	00082189 	.word	0x00082189
   80070:	000821a1 	.word	0x000821a1
   80074:	000821b9 	.word	0x000821b9
   80078:	000821d1 	.word	0x000821d1
	...
   80084:	00080b6d 	.word	0x00080b6d
   80088:	00082801 	.word	0x00082801
   8008c:	00082801 	.word	0x00082801
   80090:	00082801 	.word	0x00082801
   80094:	00082801 	.word	0x00082801
   80098:	00082801 	.word	0x00082801
   8009c:	00082801 	.word	0x00082801
   800a0:	000808fd 	.word	0x000808fd
   800a4:	00000000 	.word	0x00000000
   800a8:	00082801 	.word	0x00082801
   800ac:	00082801 	.word	0x00082801
   800b0:	00082801 	.word	0x00082801
   800b4:	00082801 	.word	0x00082801
   800b8:	00082801 	.word	0x00082801
   800bc:	00082801 	.word	0x00082801
   800c0:	00082801 	.word	0x00082801
   800c4:	00082801 	.word	0x00082801
   800c8:	00082801 	.word	0x00082801
   800cc:	00082801 	.word	0x00082801
   800d0:	00082801 	.word	0x00082801
   800d4:	00082801 	.word	0x00082801
   800d8:	00082801 	.word	0x00082801
   800dc:	00082801 	.word	0x00082801
   800e0:	00082801 	.word	0x00082801
   800e4:	00082801 	.word	0x00082801
   800e8:	00082801 	.word	0x00082801
   800ec:	00085229 	.word	0x00085229
   800f0:	0008515d 	.word	0x0008515d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	0008697c 	.word	0x0008697c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008697c 	.word	0x0008697c
   8013c:	2007043c 	.word	0x2007043c
   80140:	0008697c 	.word	0x0008697c
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	00082455 	.word	0x00082455

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   801e0:	b580      	push	{r7, lr}
   801e2:	b086      	sub	sp, #24
   801e4:	af00      	add	r7, sp, #0
   801e6:	60f8      	str	r0, [r7, #12]
   801e8:	60b9      	str	r1, [r7, #8]
   801ea:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   801ec:	f643 2398 	movw	r3, #15000	; 0x3a98
   801f0:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   801f2:	e006      	b.n	80202 <spi_read+0x22>
		if (!timeout--) {
   801f4:	697b      	ldr	r3, [r7, #20]
   801f6:	1e5a      	subs	r2, r3, #1
   801f8:	617a      	str	r2, [r7, #20]
   801fa:	2b00      	cmp	r3, #0
   801fc:	d101      	bne.n	80202 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   801fe:	2301      	movs	r3, #1
   80200:	e01d      	b.n	8023e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80202:	68fb      	ldr	r3, [r7, #12]
   80204:	691b      	ldr	r3, [r3, #16]
   80206:	f003 0301 	and.w	r3, r3, #1
   8020a:	2b00      	cmp	r3, #0
   8020c:	d0f2      	beq.n	801f4 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8020e:	68fb      	ldr	r3, [r7, #12]
   80210:	689a      	ldr	r2, [r3, #8]
   80212:	4b0d      	ldr	r3, [pc, #52]	; (80248 <spi_read+0x68>)
   80214:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80216:	68f8      	ldr	r0, [r7, #12]
   80218:	4b0c      	ldr	r3, [pc, #48]	; (8024c <spi_read+0x6c>)
   8021a:	4798      	blx	r3
   8021c:	4603      	mov	r3, r0
   8021e:	2b00      	cmp	r3, #0
   80220:	d007      	beq.n	80232 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80222:	4b09      	ldr	r3, [pc, #36]	; (80248 <spi_read+0x68>)
   80224:	681b      	ldr	r3, [r3, #0]
   80226:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8022a:	0c1b      	lsrs	r3, r3, #16
   8022c:	b2da      	uxtb	r2, r3
   8022e:	687b      	ldr	r3, [r7, #4]
   80230:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80232:	4b05      	ldr	r3, [pc, #20]	; (80248 <spi_read+0x68>)
   80234:	681b      	ldr	r3, [r3, #0]
   80236:	b29a      	uxth	r2, r3
   80238:	68bb      	ldr	r3, [r7, #8]
   8023a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8023c:	2300      	movs	r3, #0
   8023e:	b25b      	sxtb	r3, r3
}
   80240:	4618      	mov	r0, r3
   80242:	3718      	adds	r7, #24
   80244:	46bd      	mov	sp, r7
   80246:	bd80      	pop	{r7, pc}
   80248:	20070454 	.word	0x20070454
   8024c:	00080149 	.word	0x00080149

00080250 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80250:	b580      	push	{r7, lr}
   80252:	b084      	sub	sp, #16
   80254:	af00      	add	r7, sp, #0
   80256:	6078      	str	r0, [r7, #4]
   80258:	8079      	strh	r1, [r7, #2]
   8025a:	707a      	strb	r2, [r7, #1]
   8025c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8025e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80262:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80264:	e006      	b.n	80274 <spi_write+0x24>
		if (!timeout--) {
   80266:	68fb      	ldr	r3, [r7, #12]
   80268:	1e5a      	subs	r2, r3, #1
   8026a:	60fa      	str	r2, [r7, #12]
   8026c:	2b00      	cmp	r3, #0
   8026e:	d101      	bne.n	80274 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   80270:	2301      	movs	r3, #1
   80272:	e023      	b.n	802bc <spi_write+0x6c>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80274:	687b      	ldr	r3, [r7, #4]
   80276:	691b      	ldr	r3, [r3, #16]
   80278:	f003 0302 	and.w	r3, r3, #2
   8027c:	2b00      	cmp	r3, #0
   8027e:	d0f2      	beq.n	80266 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   80280:	6878      	ldr	r0, [r7, #4]
   80282:	4b11      	ldr	r3, [pc, #68]	; (802c8 <spi_write+0x78>)
   80284:	4798      	blx	r3
   80286:	4603      	mov	r3, r0
   80288:	2b00      	cmp	r3, #0
   8028a:	d00e      	beq.n	802aa <spi_write+0x5a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   8028c:	887a      	ldrh	r2, [r7, #2]
   8028e:	787b      	ldrb	r3, [r7, #1]
   80290:	041b      	lsls	r3, r3, #16
   80292:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80296:	4313      	orrs	r3, r2
   80298:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   8029a:	783b      	ldrb	r3, [r7, #0]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d006      	beq.n	802ae <spi_write+0x5e>
			value |= SPI_TDR_LASTXFER;
   802a0:	68bb      	ldr	r3, [r7, #8]
   802a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802a6:	60bb      	str	r3, [r7, #8]
   802a8:	e001      	b.n	802ae <spi_write+0x5e>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   802aa:	887b      	ldrh	r3, [r7, #2]
   802ac:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802ae:	687b      	ldr	r3, [r7, #4]
   802b0:	68ba      	ldr	r2, [r7, #8]
   802b2:	60da      	str	r2, [r3, #12]
	
	pio_toggle_pin(LED0_GPIO);
   802b4:	203b      	movs	r0, #59	; 0x3b
   802b6:	4b05      	ldr	r3, [pc, #20]	; (802cc <spi_write+0x7c>)
   802b8:	4798      	blx	r3

	return SPI_OK;
   802ba:	2300      	movs	r3, #0
   802bc:	b25b      	sxtb	r3, r3
}
   802be:	4618      	mov	r0, r3
   802c0:	3710      	adds	r7, #16
   802c2:	46bd      	mov	sp, r7
   802c4:	bd80      	pop	{r7, pc}
   802c6:	bf00      	nop
   802c8:	00080149 	.word	0x00080149
   802cc:	00081e69 	.word	0x00081e69

000802d0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   802d0:	b480      	push	{r7}
   802d2:	b085      	sub	sp, #20
   802d4:	af00      	add	r7, sp, #0
   802d6:	60f8      	str	r0, [r7, #12]
   802d8:	60b9      	str	r1, [r7, #8]
   802da:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d00c      	beq.n	802fc <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   802e2:	68fb      	ldr	r3, [r7, #12]
   802e4:	68ba      	ldr	r2, [r7, #8]
   802e6:	320c      	adds	r2, #12
   802e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802ec:	f043 0101 	orr.w	r1, r3, #1
   802f0:	68fb      	ldr	r3, [r7, #12]
   802f2:	68ba      	ldr	r2, [r7, #8]
   802f4:	320c      	adds	r2, #12
   802f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802fa:	e00b      	b.n	80314 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   802fc:	68fb      	ldr	r3, [r7, #12]
   802fe:	68ba      	ldr	r2, [r7, #8]
   80300:	320c      	adds	r2, #12
   80302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80306:	f023 0101 	bic.w	r1, r3, #1
   8030a:	68fb      	ldr	r3, [r7, #12]
   8030c:	68ba      	ldr	r2, [r7, #8]
   8030e:	320c      	adds	r2, #12
   80310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80314:	3714      	adds	r7, #20
   80316:	46bd      	mov	sp, r7
   80318:	f85d 7b04 	ldr.w	r7, [sp], #4
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80320:	b480      	push	{r7}
   80322:	b085      	sub	sp, #20
   80324:	af00      	add	r7, sp, #0
   80326:	60f8      	str	r0, [r7, #12]
   80328:	60b9      	str	r1, [r7, #8]
   8032a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	2b00      	cmp	r3, #0
   80330:	d00c      	beq.n	8034c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80332:	68fb      	ldr	r3, [r7, #12]
   80334:	68ba      	ldr	r2, [r7, #8]
   80336:	320c      	adds	r2, #12
   80338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8033c:	f043 0102 	orr.w	r1, r3, #2
   80340:	68fb      	ldr	r3, [r7, #12]
   80342:	68ba      	ldr	r2, [r7, #8]
   80344:	320c      	adds	r2, #12
   80346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8034a:	e00b      	b.n	80364 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8034c:	68fb      	ldr	r3, [r7, #12]
   8034e:	68ba      	ldr	r2, [r7, #8]
   80350:	320c      	adds	r2, #12
   80352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80356:	f023 0102 	bic.w	r1, r3, #2
   8035a:	68fb      	ldr	r3, [r7, #12]
   8035c:	68ba      	ldr	r2, [r7, #8]
   8035e:	320c      	adds	r2, #12
   80360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80364:	3714      	adds	r7, #20
   80366:	46bd      	mov	sp, r7
   80368:	f85d 7b04 	ldr.w	r7, [sp], #4
   8036c:	4770      	bx	lr
   8036e:	bf00      	nop

00080370 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80370:	b480      	push	{r7}
   80372:	b085      	sub	sp, #20
   80374:	af00      	add	r7, sp, #0
   80376:	60f8      	str	r0, [r7, #12]
   80378:	60b9      	str	r1, [r7, #8]
   8037a:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   8037c:	68fb      	ldr	r3, [r7, #12]
   8037e:	68ba      	ldr	r2, [r7, #8]
   80380:	320c      	adds	r2, #12
   80382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80386:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8038a:	68fb      	ldr	r3, [r7, #12]
   8038c:	68ba      	ldr	r2, [r7, #8]
   8038e:	320c      	adds	r2, #12
   80390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80394:	68fb      	ldr	r3, [r7, #12]
   80396:	68ba      	ldr	r2, [r7, #8]
   80398:	320c      	adds	r2, #12
   8039a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8039e:	687b      	ldr	r3, [r7, #4]
   803a0:	ea42 0103 	orr.w	r1, r2, r3
   803a4:	68fb      	ldr	r3, [r7, #12]
   803a6:	68ba      	ldr	r2, [r7, #8]
   803a8:	320c      	adds	r2, #12
   803aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   803ae:	3714      	adds	r7, #20
   803b0:	46bd      	mov	sp, r7
   803b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   803b6:	4770      	bx	lr

000803b8 <command_loop>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_loop( void )
{
   803b8:	b590      	push	{r4, r7, lr}
   803ba:	b085      	sub	sp, #20
   803bc:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   803be:	2301      	movs	r3, #1
   803c0:	9300      	str	r3, [sp, #0]
   803c2:	2300      	movs	r3, #0
   803c4:	9301      	str	r3, [sp, #4]
   803c6:	2300      	movs	r3, #0
   803c8:	9302      	str	r3, [sp, #8]
   803ca:	2300      	movs	r3, #0
   803cc:	9303      	str	r3, [sp, #12]
   803ce:	4805      	ldr	r0, [pc, #20]	; (803e4 <command_loop+0x2c>)
   803d0:	4905      	ldr	r1, [pc, #20]	; (803e8 <command_loop+0x30>)
   803d2:	2282      	movs	r2, #130	; 0x82
   803d4:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   803d8:	4c04      	ldr	r4, [pc, #16]	; (803ec <command_loop+0x34>)
   803da:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   803dc:	bf00      	nop
}
   803de:	3704      	adds	r7, #4
   803e0:	46bd      	mov	sp, r7
   803e2:	bd90      	pop	{r4, r7, pc}
   803e4:	000803f1 	.word	0x000803f1
   803e8:	000867c4 	.word	0x000867c4
   803ec:	00083bcd 	.word	0x00083bcd

000803f0 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   803f0:	b590      	push	{r4, r7, lr}
   803f2:	b08b      	sub	sp, #44	; 0x2c
   803f4:	af00      	add	r7, sp, #0
   803f6:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   803f8:	687a      	ldr	r2, [r7, #4]
   803fa:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   803fe:	429a      	cmp	r2, r3
   80400:	d002      	beq.n	80408 <prvCommandTask+0x18>
   80402:	4b1a      	ldr	r3, [pc, #104]	; (8046c <prvCommandTask+0x7c>)
   80404:	4798      	blx	r3
   80406:	e7fe      	b.n	80406 <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   80408:	230f      	movs	r3, #15
   8040a:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   8040c:	f04f 33ff 	mov.w	r3, #4294967295
   80410:	623b      	str	r3, [r7, #32]
	high = high_command_generator(OBC_ID, MT_COM, REQ_RESPONSE);
   80412:	20ff      	movs	r0, #255	; 0xff
   80414:	2102      	movs	r1, #2
   80416:	2201      	movs	r2, #1
   80418:	4b15      	ldr	r3, [pc, #84]	; (80470 <prvCommandTask+0x80>)
   8041a:	4798      	blx	r3
   8041c:	61f8      	str	r0, [r7, #28]
	ID = SUB0_ID0;
   8041e:	2314      	movs	r3, #20
   80420:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   80422:	2319      	movs	r3, #25
   80424:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80426:	4b13      	ldr	r3, [pc, #76]	; (80474 <prvCommandTask+0x84>)
   80428:	681b      	ldr	r3, [r3, #0]
   8042a:	4618      	mov	r0, r3
   8042c:	2100      	movs	r1, #0
   8042e:	2202      	movs	r2, #2
   80430:	2300      	movs	r3, #0
   80432:	4c11      	ldr	r4, [pc, #68]	; (80478 <prvCommandTask+0x88>)
   80434:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   80436:	6a38      	ldr	r0, [r7, #32]
   80438:	69f9      	ldr	r1, [r7, #28]
   8043a:	69ba      	ldr	r2, [r7, #24]
   8043c:	697b      	ldr	r3, [r7, #20]
   8043e:	4c0f      	ldr	r4, [pc, #60]	; (8047c <prvCommandTask+0x8c>)
   80440:	47a0      	blx	r4
   80442:	6138      	str	r0, [r7, #16]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   80444:	4b0b      	ldr	r3, [pc, #44]	; (80474 <prvCommandTask+0x84>)
   80446:	681b      	ldr	r3, [r3, #0]
   80448:	4618      	mov	r0, r3
   8044a:	2100      	movs	r1, #0
   8044c:	2200      	movs	r2, #0
   8044e:	2300      	movs	r3, #0
   80450:	4c0b      	ldr	r4, [pc, #44]	; (80480 <prvCommandTask+0x90>)
   80452:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   80454:	4b0b      	ldr	r3, [pc, #44]	; (80484 <prvCommandTask+0x94>)
   80456:	4798      	blx	r3
   80458:	4603      	mov	r3, r0
   8045a:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   8045c:	f107 030c 	add.w	r3, r7, #12
   80460:	4618      	mov	r0, r3
   80462:	6a79      	ldr	r1, [r7, #36]	; 0x24
   80464:	4b08      	ldr	r3, [pc, #32]	; (80488 <prvCommandTask+0x98>)
   80466:	4798      	blx	r3
	}
   80468:	e7dd      	b.n	80426 <prvCommandTask+0x36>
   8046a:	bf00      	nop
   8046c:	00082e59 	.word	0x00082e59
   80470:	00085b51 	.word	0x00085b51
   80474:	2007a71c 	.word	0x2007a71c
   80478:	00083721 	.word	0x00083721
   8047c:	00085569 	.word	0x00085569
   80480:	00083461 	.word	0x00083461
   80484:	00084009 	.word	0x00084009
   80488:	00083d4d 	.word	0x00083d4d

0008048c <data_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void data_test( void )
{
   8048c:	b590      	push	{r4, r7, lr}
   8048e:	b085      	sub	sp, #20
   80490:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvDataTask,					/* The function that implements the task. */
   80492:	2302      	movs	r3, #2
   80494:	9300      	str	r3, [sp, #0]
   80496:	2300      	movs	r3, #0
   80498:	9301      	str	r3, [sp, #4]
   8049a:	2300      	movs	r3, #0
   8049c:	9302      	str	r3, [sp, #8]
   8049e:	2300      	movs	r3, #0
   804a0:	9303      	str	r3, [sp, #12]
   804a2:	4805      	ldr	r0, [pc, #20]	; (804b8 <data_test+0x2c>)
   804a4:	4905      	ldr	r1, [pc, #20]	; (804bc <data_test+0x30>)
   804a6:	2282      	movs	r2, #130	; 0x82
   804a8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   804ac:	4c04      	ldr	r4, [pc, #16]	; (804c0 <data_test+0x34>)
   804ae:	47a0      	blx	r4
					"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   804b0:	bf00      	nop
}
   804b2:	3704      	adds	r7, #4
   804b4:	46bd      	mov	sp, r7
   804b6:	bd90      	pop	{r4, r7, pc}
   804b8:	000804c5 	.word	0x000804c5
   804bc:	000867c8 	.word	0x000867c8
   804c0:	00083bcd 	.word	0x00083bcd

000804c4 <prvDataTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvDataTask( void *pvParameters )
{
   804c4:	b590      	push	{r4, r7, lr}
   804c6:	b08b      	sub	sp, #44	; 0x2c
   804c8:	af00      	add	r7, sp, #0
   804ca:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   804cc:	687a      	ldr	r2, [r7, #4]
   804ce:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   804d2:	429a      	cmp	r2, r3
   804d4:	d002      	beq.n	804dc <prvDataTask+0x18>
   804d6:	4b37      	ldr	r3, [pc, #220]	; (805b4 <prvDataTask+0xf0>)
   804d8:	4798      	blx	r3
   804da:	e7fe      	b.n	804da <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   804dc:	230f      	movs	r3, #15
   804de:	627b      	str	r3, [r7, #36]	; 0x24
	
	uint32_t low, high, ID, PRIORITY, x, i;
	
	uint32_t* message, mem_ptr;
	
	ID = SUB0_ID0;
   804e0:	2314      	movs	r3, #20
   804e2:	623b      	str	r3, [r7, #32]
	PRIORITY = DATA_PRIO;
   804e4:	230a      	movs	r3, #10
   804e6:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{

		low = DATA_REQUEST;
   804e8:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   804ec:	613b      	str	r3, [r7, #16]
		high = high_command_generator(OBC_ID, MT_COM, REQ_DATA);
   804ee:	20ff      	movs	r0, #255	; 0xff
   804f0:	2102      	movs	r1, #2
   804f2:	2202      	movs	r2, #2
   804f4:	4b30      	ldr	r3, [pc, #192]	; (805b8 <prvDataTask+0xf4>)
   804f6:	4798      	blx	r3
   804f8:	4603      	mov	r3, r0
   804fa:	60fb      	str	r3, [r7, #12]
		
		xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
   804fc:	4b2f      	ldr	r3, [pc, #188]	; (805bc <prvDataTask+0xf8>)
   804fe:	681b      	ldr	r3, [r3, #0]
   80500:	4618      	mov	r0, r3
   80502:	2100      	movs	r1, #0
   80504:	2202      	movs	r2, #2
   80506:	2300      	movs	r3, #0
   80508:	4c2d      	ldr	r4, [pc, #180]	; (805c0 <prvDataTask+0xfc>)
   8050a:	47a0      	blx	r4
		x = send_can_command(low, high, ID, PRIORITY);				//This is the CAN API function I have written for us to use.
   8050c:	693a      	ldr	r2, [r7, #16]
   8050e:	68fb      	ldr	r3, [r7, #12]
   80510:	4610      	mov	r0, r2
   80512:	4619      	mov	r1, r3
   80514:	6a3a      	ldr	r2, [r7, #32]
   80516:	69fb      	ldr	r3, [r7, #28]
   80518:	4c2a      	ldr	r4, [pc, #168]	; (805c4 <prvDataTask+0x100>)
   8051a:	47a0      	blx	r4
   8051c:	61b8      	str	r0, [r7, #24]
		xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
   8051e:	4b27      	ldr	r3, [pc, #156]	; (805bc <prvDataTask+0xf8>)
   80520:	681b      	ldr	r3, [r3, #0]
   80522:	4618      	mov	r0, r3
   80524:	2100      	movs	r1, #0
   80526:	2200      	movs	r2, #0
   80528:	2300      	movs	r3, #0
   8052a:	4c27      	ldr	r4, [pc, #156]	; (805c8 <prvDataTask+0x104>)
   8052c:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();						// Delay for 15 clock cycles.
   8052e:	4b27      	ldr	r3, [pc, #156]	; (805cc <prvDataTask+0x108>)
   80530:	4798      	blx	r3
   80532:	4603      	mov	r3, r0
   80534:	617b      	str	r3, [r7, #20]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80536:	f107 0314 	add.w	r3, r7, #20
   8053a:	4618      	mov	r0, r3
   8053c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8053e:	4b24      	ldr	r3, [pc, #144]	; (805d0 <prvDataTask+0x10c>)
   80540:	4798      	blx	r3

		//xSemaphoreTake(Can1_Mutex, 2);							// Acquire CAN1 Mutex
		if(glob_drf)		// data reception flag;
   80542:	4b24      	ldr	r3, [pc, #144]	; (805d4 <prvDataTask+0x110>)
   80544:	781b      	ldrb	r3, [r3, #0]
   80546:	2b00      	cmp	r3, #0
   80548:	d016      	beq.n	80578 <prvDataTask+0xb4>
		{
			x = read_can_data(&high, &low, 1234);
   8054a:	f107 020c 	add.w	r2, r7, #12
   8054e:	f107 0310 	add.w	r3, r7, #16
   80552:	4610      	mov	r0, r2
   80554:	4619      	mov	r1, r3
   80556:	f240 42d2 	movw	r2, #1234	; 0x4d2
   8055a:	4b1f      	ldr	r3, [pc, #124]	; (805d8 <prvDataTask+0x114>)
   8055c:	4798      	blx	r3
   8055e:	61b8      	str	r0, [r7, #24]

			if(x)
   80560:	69bb      	ldr	r3, [r7, #24]
   80562:	2b00      	cmp	r3, #0
   80564:	d008      	beq.n	80578 <prvDataTask+0xb4>
			{
				glob_stored_data[1] = high;
   80566:	68fa      	ldr	r2, [r7, #12]
   80568:	4b1c      	ldr	r3, [pc, #112]	; (805dc <prvDataTask+0x118>)
   8056a:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   8056c:	693a      	ldr	r2, [r7, #16]
   8056e:	4b1b      	ldr	r3, [pc, #108]	; (805dc <prvDataTask+0x118>)
   80570:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   80572:	4b18      	ldr	r3, [pc, #96]	; (805d4 <prvDataTask+0x110>)
   80574:	2200      	movs	r2, #0
   80576:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comf)
   80578:	4b19      	ldr	r3, [pc, #100]	; (805e0 <prvDataTask+0x11c>)
   8057a:	781b      	ldrb	r3, [r3, #0]
   8057c:	2b00      	cmp	r3, #0
   8057e:	d017      	beq.n	805b0 <prvDataTask+0xec>
		{
			x = read_can_msg(&high, &low, 1234);
   80580:	f107 020c 	add.w	r2, r7, #12
   80584:	f107 0310 	add.w	r3, r7, #16
   80588:	4610      	mov	r0, r2
   8058a:	4619      	mov	r1, r3
   8058c:	f240 42d2 	movw	r2, #1234	; 0x4d2
   80590:	4b14      	ldr	r3, [pc, #80]	; (805e4 <prvDataTask+0x120>)
   80592:	4798      	blx	r3
   80594:	61b8      	str	r0, [r7, #24]

			if(x)
   80596:	69bb      	ldr	r3, [r7, #24]
   80598:	2b00      	cmp	r3, #0
   8059a:	d009      	beq.n	805b0 <prvDataTask+0xec>
			{
				glob_stored_message[1] = high;
   8059c:	68fa      	ldr	r2, [r7, #12]
   8059e:	4b12      	ldr	r3, [pc, #72]	; (805e8 <prvDataTask+0x124>)
   805a0:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   805a2:	693a      	ldr	r2, [r7, #16]
   805a4:	4b10      	ldr	r3, [pc, #64]	; (805e8 <prvDataTask+0x124>)
   805a6:	601a      	str	r2, [r3, #0]
				glob_comf = 0;
   805a8:	4b0d      	ldr	r3, [pc, #52]	; (805e0 <prvDataTask+0x11c>)
   805aa:	2200      	movs	r2, #0
   805ac:	701a      	strb	r2, [r3, #0]
			}
		}
		//xSemaphoreGive(Can1_Mutex);								// Release CAN1 Mutex
	}
   805ae:	e79b      	b.n	804e8 <prvDataTask+0x24>
   805b0:	e79a      	b.n	804e8 <prvDataTask+0x24>
   805b2:	bf00      	nop
   805b4:	00082e59 	.word	0x00082e59
   805b8:	00085b51 	.word	0x00085b51
   805bc:	2007a71c 	.word	0x2007a71c
   805c0:	00083721 	.word	0x00083721
   805c4:	00085569 	.word	0x00085569
   805c8:	00083461 	.word	0x00083461
   805cc:	00084009 	.word	0x00084009
   805d0:	00083d4d 	.word	0x00083d4d
   805d4:	2007a6dc 	.word	0x2007a6dc
   805d8:	00085619 	.word	0x00085619
   805dc:	2007a6b4 	.word	0x2007a6b4
   805e0:	2007a784 	.word	0x2007a784
   805e4:	00085665 	.word	0x00085665
   805e8:	2007a748 	.word	0x2007a748

000805ec <housekeep>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void housekeep( void )
{
   805ec:	b590      	push	{r4, r7, lr}
   805ee:	b085      	sub	sp, #20
   805f0:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvHouseKeepTask,					/* The function that implements the task. */
   805f2:	2301      	movs	r3, #1
   805f4:	9300      	str	r3, [sp, #0]
   805f6:	2300      	movs	r3, #0
   805f8:	9301      	str	r3, [sp, #4]
   805fa:	2300      	movs	r3, #0
   805fc:	9302      	str	r3, [sp, #8]
   805fe:	2300      	movs	r3, #0
   80600:	9303      	str	r3, [sp, #12]
   80602:	4805      	ldr	r0, [pc, #20]	; (80618 <housekeep+0x2c>)
   80604:	4905      	ldr	r1, [pc, #20]	; (8061c <housekeep+0x30>)
   80606:	2282      	movs	r2, #130	; 0x82
   80608:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   8060c:	4c04      	ldr	r4, [pc, #16]	; (80620 <housekeep+0x34>)
   8060e:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80610:	bf00      	nop
}
   80612:	3704      	adds	r7, #4
   80614:	46bd      	mov	sp, r7
   80616:	bd90      	pop	{r4, r7, pc}
   80618:	00080625 	.word	0x00080625
   8061c:	000867cc 	.word	0x000867cc
   80620:	00083bcd 	.word	0x00083bcd

00080624 <prvHouseKeepTask>:
/*				HOUSEKEEPING TASK		                                */
/*	The sole purpose of this task is to send a housekeeping request to	*/
/*	MOB5 on the ATMEGA32M1 which is being supported by the STK600.		*/
/************************************************************************/
static void prvHouseKeepTask(void *pvParameters )
{
   80624:	b590      	push	{r4, r7, lr}
   80626:	b087      	sub	sp, #28
   80628:	af00      	add	r7, sp, #0
   8062a:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == HK_PARAMETER );
   8062c:	687a      	ldr	r2, [r7, #4]
   8062e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80632:	429a      	cmp	r2, r3
   80634:	d002      	beq.n	8063c <prvHouseKeepTask+0x18>
   80636:	4b13      	ldr	r3, [pc, #76]	; (80684 <prvHouseKeepTask+0x60>)
   80638:	4798      	blx	r3
   8063a:	e7fe      	b.n	8063a <prvHouseKeepTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	// Number entered here corresponds to the number of ticks we should wait.
   8063c:	230f      	movs	r3, #15
   8063e:	617b      	str	r3, [r7, #20]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t ID, x;
	
	ID = SUB0_ID5;
   80640:	2319      	movs	r3, #25
   80642:	613b      	str	r3, [r7, #16]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		xSemaphoreTake(Can1_Mutex, 2);		// Acquire CAN1 Mutex
   80644:	4b10      	ldr	r3, [pc, #64]	; (80688 <prvHouseKeepTask+0x64>)
   80646:	681b      	ldr	r3, [r3, #0]
   80648:	4618      	mov	r0, r3
   8064a:	2100      	movs	r1, #0
   8064c:	2202      	movs	r2, #2
   8064e:	2300      	movs	r3, #0
   80650:	4c0e      	ldr	r4, [pc, #56]	; (8068c <prvHouseKeepTask+0x68>)
   80652:	47a0      	blx	r4
		x = request_housekeeping(ID);		// This is the CAN API function I have written for us to use.
   80654:	6938      	ldr	r0, [r7, #16]
   80656:	4b0e      	ldr	r3, [pc, #56]	; (80690 <prvHouseKeepTask+0x6c>)
   80658:	4798      	blx	r3
   8065a:	60f8      	str	r0, [r7, #12]
		xSemaphoreGive(Can1_Mutex);			// Release CAN1 Mutex
   8065c:	4b0a      	ldr	r3, [pc, #40]	; (80688 <prvHouseKeepTask+0x64>)
   8065e:	681b      	ldr	r3, [r3, #0]
   80660:	4618      	mov	r0, r3
   80662:	2100      	movs	r1, #0
   80664:	2200      	movs	r2, #0
   80666:	2300      	movs	r3, #0
   80668:	4c0a      	ldr	r4, [pc, #40]	; (80694 <prvHouseKeepTask+0x70>)
   8066a:	47a0      	blx	r4
		
		xLastWakeTime = xTaskGetTickCount();
   8066c:	4b0a      	ldr	r3, [pc, #40]	; (80698 <prvHouseKeepTask+0x74>)
   8066e:	4798      	blx	r3
   80670:	4603      	mov	r3, r0
   80672:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   80674:	f107 0308 	add.w	r3, r7, #8
   80678:	4618      	mov	r0, r3
   8067a:	6979      	ldr	r1, [r7, #20]
   8067c:	4b07      	ldr	r3, [pc, #28]	; (8069c <prvHouseKeepTask+0x78>)
   8067e:	4798      	blx	r3
	}
   80680:	e7e0      	b.n	80644 <prvHouseKeepTask+0x20>
   80682:	bf00      	nop
   80684:	00082e59 	.word	0x00082e59
   80688:	2007a71c 	.word	0x2007a71c
   8068c:	00083721 	.word	0x00083721
   80690:	000856b1 	.word	0x000856b1
   80694:	00083461 	.word	0x00083461
   80698:	00084009 	.word	0x00084009
   8069c:	00083d4d 	.word	0x00083d4d

000806a0 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   806a0:	b580      	push	{r7, lr}
   806a2:	b082      	sub	sp, #8
   806a4:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   806a6:	2300      	movs	r3, #0
   806a8:	607b      	str	r3, [r7, #4]
   806aa:	e00f      	b.n	806cc <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   806ac:	4b0a      	ldr	r3, [pc, #40]	; (806d8 <vParTestInitialise+0x38>)
   806ae:	687a      	ldr	r2, [r7, #4]
   806b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   806b4:	4618      	mov	r0, r3
   806b6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   806ba:	4b08      	ldr	r3, [pc, #32]	; (806dc <vParTestInitialise+0x3c>)
   806bc:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   806be:	6878      	ldr	r0, [r7, #4]
   806c0:	2100      	movs	r1, #0
   806c2:	4b07      	ldr	r3, [pc, #28]	; (806e0 <vParTestInitialise+0x40>)
   806c4:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   806c6:	687b      	ldr	r3, [r7, #4]
   806c8:	3301      	adds	r3, #1
   806ca:	607b      	str	r3, [r7, #4]
   806cc:	687b      	ldr	r3, [r7, #4]
   806ce:	2b03      	cmp	r3, #3
   806d0:	d9ec      	bls.n	806ac <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   806d2:	3708      	adds	r7, #8
   806d4:	46bd      	mov	sp, r7
   806d6:	bd80      	pop	{r7, pc}
   806d8:	000867d0 	.word	0x000867d0
   806dc:	00081ec9 	.word	0x00081ec9
   806e0:	000806e5 	.word	0x000806e5

000806e4 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   806e4:	b580      	push	{r7, lr}
   806e6:	b082      	sub	sp, #8
   806e8:	af00      	add	r7, sp, #0
   806ea:	6078      	str	r0, [r7, #4]
   806ec:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   806ee:	687b      	ldr	r3, [r7, #4]
   806f0:	2b03      	cmp	r3, #3
   806f2:	d823      	bhi.n	8073c <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   806f4:	687b      	ldr	r3, [r7, #4]
   806f6:	2b00      	cmp	r3, #0
   806f8:	d106      	bne.n	80708 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   806fa:	683b      	ldr	r3, [r7, #0]
   806fc:	2b00      	cmp	r3, #0
   806fe:	bf14      	ite	ne
   80700:	2300      	movne	r3, #0
   80702:	2301      	moveq	r3, #1
   80704:	b2db      	uxtb	r3, r3
   80706:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   80708:	683b      	ldr	r3, [r7, #0]
   8070a:	2b00      	cmp	r3, #0
   8070c:	d00b      	beq.n	80726 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   8070e:	4b0d      	ldr	r3, [pc, #52]	; (80744 <vParTestSetLED+0x60>)
   80710:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   80712:	4b0d      	ldr	r3, [pc, #52]	; (80748 <vParTestSetLED+0x64>)
   80714:	687a      	ldr	r2, [r7, #4]
   80716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8071a:	4618      	mov	r0, r3
   8071c:	4b0b      	ldr	r3, [pc, #44]	; (8074c <vParTestSetLED+0x68>)
   8071e:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80720:	4b0b      	ldr	r3, [pc, #44]	; (80750 <vParTestSetLED+0x6c>)
   80722:	4798      	blx	r3
   80724:	e00a      	b.n	8073c <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   80726:	4b07      	ldr	r3, [pc, #28]	; (80744 <vParTestSetLED+0x60>)
   80728:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   8072a:	4b07      	ldr	r3, [pc, #28]	; (80748 <vParTestSetLED+0x64>)
   8072c:	687a      	ldr	r2, [r7, #4]
   8072e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80732:	4618      	mov	r0, r3
   80734:	4b07      	ldr	r3, [pc, #28]	; (80754 <vParTestSetLED+0x70>)
   80736:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80738:	4b05      	ldr	r3, [pc, #20]	; (80750 <vParTestSetLED+0x6c>)
   8073a:	4798      	blx	r3
		}
	}
}
   8073c:	3708      	adds	r7, #8
   8073e:	46bd      	mov	sp, r7
   80740:	bd80      	pop	{r7, pc}
   80742:	bf00      	nop
   80744:	00082ddd 	.word	0x00082ddd
   80748:	000867d0 	.word	0x000867d0
   8074c:	00081e35 	.word	0x00081e35
   80750:	00082e21 	.word	0x00082e21
   80754:	00081e01 	.word	0x00081e01

00080758 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80758:	b480      	push	{r7}
   8075a:	b083      	sub	sp, #12
   8075c:	af00      	add	r7, sp, #0
   8075e:	4603      	mov	r3, r0
   80760:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80762:	4b08      	ldr	r3, [pc, #32]	; (80784 <NVIC_EnableIRQ+0x2c>)
   80764:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80768:	0952      	lsrs	r2, r2, #5
   8076a:	79f9      	ldrb	r1, [r7, #7]
   8076c:	f001 011f 	and.w	r1, r1, #31
   80770:	2001      	movs	r0, #1
   80772:	fa00 f101 	lsl.w	r1, r0, r1
   80776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8077a:	370c      	adds	r7, #12
   8077c:	46bd      	mov	sp, r7
   8077e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80782:	4770      	bx	lr
   80784:	e000e100 	.word	0xe000e100

00080788 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80788:	b480      	push	{r7}
   8078a:	b083      	sub	sp, #12
   8078c:	af00      	add	r7, sp, #0
   8078e:	4603      	mov	r3, r0
   80790:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80792:	4b09      	ldr	r3, [pc, #36]	; (807b8 <NVIC_DisableIRQ+0x30>)
   80794:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80798:	0952      	lsrs	r2, r2, #5
   8079a:	79f9      	ldrb	r1, [r7, #7]
   8079c:	f001 011f 	and.w	r1, r1, #31
   807a0:	2001      	movs	r0, #1
   807a2:	fa00 f101 	lsl.w	r1, r0, r1
   807a6:	3220      	adds	r2, #32
   807a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807ac:	370c      	adds	r7, #12
   807ae:	46bd      	mov	sp, r7
   807b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   807b4:	4770      	bx	lr
   807b6:	bf00      	nop
   807b8:	e000e100 	.word	0xe000e100

000807bc <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   807bc:	b480      	push	{r7}
   807be:	b083      	sub	sp, #12
   807c0:	af00      	add	r7, sp, #0
   807c2:	4603      	mov	r3, r0
   807c4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807c6:	4b09      	ldr	r3, [pc, #36]	; (807ec <NVIC_ClearPendingIRQ+0x30>)
   807c8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   807cc:	0952      	lsrs	r2, r2, #5
   807ce:	79f9      	ldrb	r1, [r7, #7]
   807d0:	f001 011f 	and.w	r1, r1, #31
   807d4:	2001      	movs	r0, #1
   807d6:	fa00 f101 	lsl.w	r1, r0, r1
   807da:	3260      	adds	r2, #96	; 0x60
   807dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   807e0:	370c      	adds	r7, #12
   807e2:	46bd      	mov	sp, r7
   807e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   807e8:	4770      	bx	lr
   807ea:	bf00      	nop
   807ec:	e000e100 	.word	0xe000e100

000807f0 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   807f0:	b480      	push	{r7}
   807f2:	b083      	sub	sp, #12
   807f4:	af00      	add	r7, sp, #0
   807f6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   807f8:	687b      	ldr	r3, [r7, #4]
   807fa:	2280      	movs	r2, #128	; 0x80
   807fc:	601a      	str	r2, [r3, #0]
}
   807fe:	370c      	adds	r7, #12
   80800:	46bd      	mov	sp, r7
   80802:	f85d 7b04 	ldr.w	r7, [sp], #4
   80806:	4770      	bx	lr

00080808 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80808:	b480      	push	{r7}
   8080a:	b083      	sub	sp, #12
   8080c:	af00      	add	r7, sp, #0
   8080e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80810:	687b      	ldr	r3, [r7, #4]
   80812:	2201      	movs	r2, #1
   80814:	601a      	str	r2, [r3, #0]
}
   80816:	370c      	adds	r7, #12
   80818:	46bd      	mov	sp, r7
   8081a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8081e:	4770      	bx	lr

00080820 <spi_disable>:
 * should check TX_EMPTY before disabling SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable(Spi *p_spi)
{
   80820:	b480      	push	{r7}
   80822:	b083      	sub	sp, #12
   80824:	af00      	add	r7, sp, #0
   80826:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
   80828:	687b      	ldr	r3, [r7, #4]
   8082a:	2202      	movs	r2, #2
   8082c:	601a      	str	r2, [r3, #0]
}
   8082e:	370c      	adds	r7, #12
   80830:	46bd      	mov	sp, r7
   80832:	f85d 7b04 	ldr.w	r7, [sp], #4
   80836:	4770      	bx	lr

00080838 <spi_set_slave_mode>:
 * \brief Set SPI to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_slave_mode(Spi *p_spi)
{
   80838:	b480      	push	{r7}
   8083a:	b083      	sub	sp, #12
   8083c:	af00      	add	r7, sp, #0
   8083e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_MSTR);
   80840:	687b      	ldr	r3, [r7, #4]
   80842:	685b      	ldr	r3, [r3, #4]
   80844:	f023 0201 	bic.w	r2, r3, #1
   80848:	687b      	ldr	r3, [r7, #4]
   8084a:	605a      	str	r2, [r3, #4]
}
   8084c:	370c      	adds	r7, #12
   8084e:	46bd      	mov	sp, r7
   80850:	f85d 7b04 	ldr.w	r7, [sp], #4
   80854:	4770      	bx	lr
   80856:	bf00      	nop

00080858 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80858:	b480      	push	{r7}
   8085a:	b083      	sub	sp, #12
   8085c:	af00      	add	r7, sp, #0
   8085e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80860:	687b      	ldr	r3, [r7, #4]
   80862:	685b      	ldr	r3, [r3, #4]
   80864:	f043 0210 	orr.w	r2, r3, #16
   80868:	687b      	ldr	r3, [r7, #4]
   8086a:	605a      	str	r2, [r3, #4]
}
   8086c:	370c      	adds	r7, #12
   8086e:	46bd      	mov	sp, r7
   80870:	f85d 7b04 	ldr.w	r7, [sp], #4
   80874:	4770      	bx	lr
   80876:	bf00      	nop

00080878 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80878:	b480      	push	{r7}
   8087a:	b083      	sub	sp, #12
   8087c:	af00      	add	r7, sp, #0
   8087e:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80880:	687b      	ldr	r3, [r7, #4]
   80882:	691b      	ldr	r3, [r3, #16]
}
   80884:	4618      	mov	r0, r3
   80886:	370c      	adds	r7, #12
   80888:	46bd      	mov	sp, r7
   8088a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8088e:	4770      	bx	lr

00080890 <spi_enable_interrupt>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
   80890:	b480      	push	{r7}
   80892:	b083      	sub	sp, #12
   80894:	af00      	add	r7, sp, #0
   80896:	6078      	str	r0, [r7, #4]
   80898:	6039      	str	r1, [r7, #0]
	p_spi->SPI_IER = ul_sources;
   8089a:	687b      	ldr	r3, [r7, #4]
   8089c:	683a      	ldr	r2, [r7, #0]
   8089e:	615a      	str	r2, [r3, #20]
}
   808a0:	370c      	adds	r7, #12
   808a2:	46bd      	mov	sp, r7
   808a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   808a8:	4770      	bx	lr
   808aa:	bf00      	nop

000808ac <spi_slave_transfer>:
 *
 * \param p_buf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
static void spi_slave_transfer(void *p_buf, uint32_t size)
{
   808ac:	b590      	push	{r4, r7, lr}
   808ae:	b083      	sub	sp, #12
   808b0:	af00      	add	r7, sp, #0
   808b2:	6078      	str	r0, [r7, #4]
   808b4:	6039      	str	r1, [r7, #0]
	gs_puc_transfer_buffer = p_buf;
   808b6:	4b0c      	ldr	r3, [pc, #48]	; (808e8 <spi_slave_transfer+0x3c>)
   808b8:	687a      	ldr	r2, [r7, #4]
   808ba:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_length = size;
   808bc:	4b0b      	ldr	r3, [pc, #44]	; (808ec <spi_slave_transfer+0x40>)
   808be:	683a      	ldr	r2, [r7, #0]
   808c0:	601a      	str	r2, [r3, #0]
	gs_ul_transfer_index = 0;
   808c2:	4b0b      	ldr	r3, [pc, #44]	; (808f0 <spi_slave_transfer+0x44>)
   808c4:	2200      	movs	r2, #0
   808c6:	601a      	str	r2, [r3, #0]
	spi_write(SPI_SLAVE_BASE, gs_puc_transfer_buffer[gs_ul_transfer_index], 0,
   808c8:	4b07      	ldr	r3, [pc, #28]	; (808e8 <spi_slave_transfer+0x3c>)
   808ca:	681a      	ldr	r2, [r3, #0]
   808cc:	4b08      	ldr	r3, [pc, #32]	; (808f0 <spi_slave_transfer+0x44>)
   808ce:	681b      	ldr	r3, [r3, #0]
   808d0:	4413      	add	r3, r2
   808d2:	781b      	ldrb	r3, [r3, #0]
   808d4:	4807      	ldr	r0, [pc, #28]	; (808f4 <spi_slave_transfer+0x48>)
   808d6:	4619      	mov	r1, r3
   808d8:	2200      	movs	r2, #0
   808da:	2300      	movs	r3, #0
   808dc:	4c06      	ldr	r4, [pc, #24]	; (808f8 <spi_slave_transfer+0x4c>)
   808de:	47a0      	blx	r4
			0);
}
   808e0:	370c      	adds	r7, #12
   808e2:	46bd      	mov	sp, r7
   808e4:	bd90      	pop	{r4, r7, pc}
   808e6:	bf00      	nop
   808e8:	2007045c 	.word	0x2007045c
   808ec:	20070464 	.word	0x20070464
   808f0:	20070460 	.word	0x20070460
   808f4:	40008000 	.word	0x40008000
   808f8:	00080251 	.word	0x00080251

000808fc <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   808fc:	b580      	push	{r7, lr}
   808fe:	b084      	sub	sp, #16
   80900:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   80902:	2300      	movs	r3, #0
   80904:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   80906:	2300      	movs	r3, #0
   80908:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   8090a:	4b0c      	ldr	r3, [pc, #48]	; (8093c <SPI0_Handler+0x40>)
   8090c:	607b      	str	r3, [r7, #4]
	
	//pio_toggle_pin(LED1_GPIO);

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   8090e:	480c      	ldr	r0, [pc, #48]	; (80940 <SPI0_Handler+0x44>)
   80910:	4b0c      	ldr	r3, [pc, #48]	; (80944 <SPI0_Handler+0x48>)
   80912:	4798      	blx	r3
   80914:	4603      	mov	r3, r0
   80916:	f003 0301 	and.w	r3, r3, #1
   8091a:	2b00      	cmp	r3, #0
   8091c:	d00b      	beq.n	80936 <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   8091e:	1cfb      	adds	r3, r7, #3
   80920:	4807      	ldr	r0, [pc, #28]	; (80940 <SPI0_Handler+0x44>)
   80922:	4909      	ldr	r1, [pc, #36]	; (80948 <SPI0_Handler+0x4c>)
   80924:	461a      	mov	r2, r3
   80926:	4b09      	ldr	r3, [pc, #36]	; (8094c <SPI0_Handler+0x50>)
   80928:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   8092a:	687b      	ldr	r3, [r7, #4]
   8092c:	681b      	ldr	r3, [r3, #0]
   8092e:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80932:	687b      	ldr	r3, [r7, #4]
   80934:	601a      	str	r2, [r3, #0]
	}
}
   80936:	3710      	adds	r7, #16
   80938:	46bd      	mov	sp, r7
   8093a:	bd80      	pop	{r7, pc}
   8093c:	4000800c 	.word	0x4000800c
   80940:	40008000 	.word	0x40008000
   80944:	00080879 	.word	0x00080879
   80948:	200704c0 	.word	0x200704c0
   8094c:	000801e1 	.word	0x000801e1

00080950 <spi_slave_initialize>:

/**
 * \brief Initialize SPI as slave.
 */
static void spi_slave_initialize(void)
{
   80950:	b580      	push	{r7, lr}
   80952:	b082      	sub	sp, #8
   80954:	af00      	add	r7, sp, #0
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
   80956:	4b25      	ldr	r3, [pc, #148]	; (809ec <spi_slave_initialize+0x9c>)
   80958:	2200      	movs	r2, #0
   8095a:	601a      	str	r2, [r3, #0]
	gs_spi_status.ul_total_command_number = 0;
   8095c:	4b23      	ldr	r3, [pc, #140]	; (809ec <spi_slave_initialize+0x9c>)
   8095e:	2200      	movs	r2, #0
   80960:	605a      	str	r2, [r3, #4]
	for (i = 0; i < NB_STATUS_CMD; i++) {
   80962:	2300      	movs	r3, #0
   80964:	607b      	str	r3, [r7, #4]
   80966:	e008      	b.n	8097a <spi_slave_initialize+0x2a>
		gs_spi_status.ul_cmd_list[i] = 0;
   80968:	4b20      	ldr	r3, [pc, #128]	; (809ec <spi_slave_initialize+0x9c>)
   8096a:	687a      	ldr	r2, [r7, #4]
   8096c:	3202      	adds	r2, #2
   8096e:	2100      	movs	r1, #0
   80970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	uint32_t i;

	/* Reset status */
	gs_spi_status.ul_total_block_number = 0;
	gs_spi_status.ul_total_command_number = 0;
	for (i = 0; i < NB_STATUS_CMD; i++) {
   80974:	687b      	ldr	r3, [r7, #4]
   80976:	3301      	adds	r3, #1
   80978:	607b      	str	r3, [r7, #4]
   8097a:	687b      	ldr	r3, [r7, #4]
   8097c:	2b13      	cmp	r3, #19
   8097e:	d9f3      	bls.n	80968 <spi_slave_initialize+0x18>
		gs_spi_status.ul_cmd_list[i] = 0;
	}
	gs_ul_spi_state = SLAVE_STATE_DATA;
   80980:	4b1b      	ldr	r3, [pc, #108]	; (809f0 <spi_slave_initialize+0xa0>)
   80982:	2202      	movs	r2, #2
   80984:	601a      	str	r2, [r3, #0]
	gs_ul_spi_cmd = RC_SYN;
   80986:	4b1b      	ldr	r3, [pc, #108]	; (809f4 <spi_slave_initialize+0xa4>)
   80988:	4a1b      	ldr	r2, [pc, #108]	; (809f8 <spi_slave_initialize+0xa8>)
   8098a:	601a      	str	r2, [r3, #0]

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_SLAVE_BASE);
   8098c:	481b      	ldr	r0, [pc, #108]	; (809fc <spi_slave_initialize+0xac>)
   8098e:	4b1c      	ldr	r3, [pc, #112]	; (80a00 <spi_slave_initialize+0xb0>)
   80990:	4798      	blx	r3
	spi_disable(SPI_SLAVE_BASE);
   80992:	481a      	ldr	r0, [pc, #104]	; (809fc <spi_slave_initialize+0xac>)
   80994:	4b1b      	ldr	r3, [pc, #108]	; (80a04 <spi_slave_initialize+0xb4>)
   80996:	4798      	blx	r3
	spi_reset(SPI_SLAVE_BASE);
   80998:	4818      	ldr	r0, [pc, #96]	; (809fc <spi_slave_initialize+0xac>)
   8099a:	4b1b      	ldr	r3, [pc, #108]	; (80a08 <spi_slave_initialize+0xb8>)
   8099c:	4798      	blx	r3
	spi_set_slave_mode(SPI_SLAVE_BASE);
   8099e:	4817      	ldr	r0, [pc, #92]	; (809fc <spi_slave_initialize+0xac>)
   809a0:	4b1a      	ldr	r3, [pc, #104]	; (80a0c <spi_slave_initialize+0xbc>)
   809a2:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_SLAVE_BASE);
   809a4:	4815      	ldr	r0, [pc, #84]	; (809fc <spi_slave_initialize+0xac>)
   809a6:	4b1a      	ldr	r3, [pc, #104]	; (80a10 <spi_slave_initialize+0xc0>)
   809a8:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(SPI_SLAVE_BASE, SPI_CHIP_PCS);
   809aa:	4814      	ldr	r0, [pc, #80]	; (809fc <spi_slave_initialize+0xac>)
   809ac:	210e      	movs	r1, #14
   809ae:	4b19      	ldr	r3, [pc, #100]	; (80a14 <spi_slave_initialize+0xc4>)
   809b0:	4798      	blx	r3
	spi_set_clock_polarity(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   809b2:	4812      	ldr	r0, [pc, #72]	; (809fc <spi_slave_initialize+0xac>)
   809b4:	2100      	movs	r1, #0
   809b6:	2201      	movs	r2, #1
   809b8:	4b17      	ldr	r3, [pc, #92]	; (80a18 <spi_slave_initialize+0xc8>)
   809ba:	4798      	blx	r3
	spi_set_clock_phase(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
   809bc:	480f      	ldr	r0, [pc, #60]	; (809fc <spi_slave_initialize+0xac>)
   809be:	2100      	movs	r1, #0
   809c0:	2200      	movs	r2, #0
   809c2:	4b16      	ldr	r3, [pc, #88]	; (80a1c <spi_slave_initialize+0xcc>)
   809c4:	4798      	blx	r3
	spi_set_bits_per_transfer(SPI_SLAVE_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_8_BIT);
   809c6:	480d      	ldr	r0, [pc, #52]	; (809fc <spi_slave_initialize+0xac>)
   809c8:	2100      	movs	r1, #0
   809ca:	2200      	movs	r2, #0
   809cc:	4b14      	ldr	r3, [pc, #80]	; (80a20 <spi_slave_initialize+0xd0>)
   809ce:	4798      	blx	r3
	spi_enable_interrupt(SPI_SLAVE_BASE, SPI_IER_RDRF);
   809d0:	480a      	ldr	r0, [pc, #40]	; (809fc <spi_slave_initialize+0xac>)
   809d2:	2101      	movs	r1, #1
   809d4:	4b13      	ldr	r3, [pc, #76]	; (80a24 <spi_slave_initialize+0xd4>)
   809d6:	4798      	blx	r3
	spi_enable(SPI_SLAVE_BASE);
   809d8:	4808      	ldr	r0, [pc, #32]	; (809fc <spi_slave_initialize+0xac>)
   809da:	4b13      	ldr	r3, [pc, #76]	; (80a28 <spi_slave_initialize+0xd8>)
   809dc:	4798      	blx	r3

	/* Start waiting command. */
	spi_slave_transfer(&gs_ul_spi_cmd, sizeof(gs_ul_spi_cmd));
   809de:	4805      	ldr	r0, [pc, #20]	; (809f4 <spi_slave_initialize+0xa4>)
   809e0:	2104      	movs	r1, #4
   809e2:	4b12      	ldr	r3, [pc, #72]	; (80a2c <spi_slave_initialize+0xdc>)
   809e4:	4798      	blx	r3
}
   809e6:	3708      	adds	r7, #8
   809e8:	46bd      	mov	sp, r7
   809ea:	bd80      	pop	{r7, pc}
   809ec:	20070468 	.word	0x20070468
   809f0:	20070458 	.word	0x20070458
   809f4:	20070000 	.word	0x20070000
   809f8:	55aa55aa 	.word	0x55aa55aa
   809fc:	40008000 	.word	0x40008000
   80a00:	00080189 	.word	0x00080189
   80a04:	00080821 	.word	0x00080821
   80a08:	000807f1 	.word	0x000807f1
   80a0c:	00080839 	.word	0x00080839
   80a10:	00080859 	.word	0x00080859
   80a14:	000801ad 	.word	0x000801ad
   80a18:	000802d1 	.word	0x000802d1
   80a1c:	00080321 	.word	0x00080321
   80a20:	00080371 	.word	0x00080371
   80a24:	00080891 	.word	0x00080891
   80a28:	00080809 	.word	0x00080809
   80a2c:	000808ad 	.word	0x000808ad

00080a30 <spi_initialize>:
 * \brief Application entry point for SPI example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80a30:	b580      	push	{r7, lr}
   80a32:	b084      	sub	sp, #16
   80a34:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   80a36:	2300      	movs	r3, #0
   80a38:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80a3a:	4b0c      	ldr	r3, [pc, #48]	; (80a6c <spi_initialize+0x3c>)
   80a3c:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   80a3e:	2300      	movs	r3, #0
   80a40:	80fb      	strh	r3, [r7, #6]

	///* Initialize the SAM system. */
	//sysclk_init();
	//board_init();

	spi_slave_initialize();
   80a42:	4b0b      	ldr	r3, [pc, #44]	; (80a70 <spi_initialize+0x40>)
   80a44:	4798      	blx	r3
	
	*reg_ptr |= 0x00BB;
   80a46:	68bb      	ldr	r3, [r7, #8]
   80a48:	681b      	ldr	r3, [r3, #0]
   80a4a:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80a4e:	68bb      	ldr	r3, [r7, #8]
   80a50:	601a      	str	r2, [r3, #0]

	/* Configure SPI interrupts for slave only. */
	NVIC_DisableIRQ(SPI_IRQn);
   80a52:	2018      	movs	r0, #24
   80a54:	4b07      	ldr	r3, [pc, #28]	; (80a74 <spi_initialize+0x44>)
   80a56:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
   80a58:	2018      	movs	r0, #24
   80a5a:	4b07      	ldr	r3, [pc, #28]	; (80a78 <spi_initialize+0x48>)
   80a5c:	4798      	blx	r3
	//NVIC_SetPriority(SPI_IRQn, 0);
	NVIC_EnableIRQ(SPI_IRQn);
   80a5e:	2018      	movs	r0, #24
   80a60:	4b06      	ldr	r3, [pc, #24]	; (80a7c <spi_initialize+0x4c>)
   80a62:	4798      	blx	r3
	//while (1) {
		//
		//*reg_ptr |= 0x00BB;
		//
		//}	// Put 0xBB in the SPI shift register.
	return;
   80a64:	bf00      	nop
}
   80a66:	3710      	adds	r7, #16
   80a68:	46bd      	mov	sp, r7
   80a6a:	bd80      	pop	{r7, pc}
   80a6c:	4000800c 	.word	0x4000800c
   80a70:	00080951 	.word	0x00080951
   80a74:	00080789 	.word	0x00080789
   80a78:	000807bd 	.word	0x000807bd
   80a7c:	00080759 	.word	0x00080759

00080a80 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80a80:	b480      	push	{r7}
   80a82:	b083      	sub	sp, #12
   80a84:	af00      	add	r7, sp, #0
   80a86:	4603      	mov	r3, r0
   80a88:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a8a:	4b08      	ldr	r3, [pc, #32]	; (80aac <NVIC_EnableIRQ+0x2c>)
   80a8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80a90:	0952      	lsrs	r2, r2, #5
   80a92:	79f9      	ldrb	r1, [r7, #7]
   80a94:	f001 011f 	and.w	r1, r1, #31
   80a98:	2001      	movs	r0, #1
   80a9a:	fa00 f101 	lsl.w	r1, r0, r1
   80a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80aa2:	370c      	adds	r7, #12
   80aa4:	46bd      	mov	sp, r7
   80aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80aaa:	4770      	bx	lr
   80aac:	e000e100 	.word	0xe000e100

00080ab0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80ab0:	b480      	push	{r7}
   80ab2:	b083      	sub	sp, #12
   80ab4:	af00      	add	r7, sp, #0
   80ab6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80ab8:	687b      	ldr	r3, [r7, #4]
   80aba:	2b07      	cmp	r3, #7
   80abc:	d825      	bhi.n	80b0a <osc_get_rate+0x5a>
   80abe:	a201      	add	r2, pc, #4	; (adr r2, 80ac4 <osc_get_rate+0x14>)
   80ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ac4:	00080ae5 	.word	0x00080ae5
   80ac8:	00080aeb 	.word	0x00080aeb
   80acc:	00080af1 	.word	0x00080af1
   80ad0:	00080af7 	.word	0x00080af7
   80ad4:	00080afb 	.word	0x00080afb
   80ad8:	00080aff 	.word	0x00080aff
   80adc:	00080b03 	.word	0x00080b03
   80ae0:	00080b07 	.word	0x00080b07
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80ae4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80ae8:	e010      	b.n	80b0c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80aee:	e00d      	b.n	80b0c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80af4:	e00a      	b.n	80b0c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80af6:	4b08      	ldr	r3, [pc, #32]	; (80b18 <osc_get_rate+0x68>)
   80af8:	e008      	b.n	80b0c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80afa:	4b08      	ldr	r3, [pc, #32]	; (80b1c <osc_get_rate+0x6c>)
   80afc:	e006      	b.n	80b0c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80afe:	4b08      	ldr	r3, [pc, #32]	; (80b20 <osc_get_rate+0x70>)
   80b00:	e004      	b.n	80b0c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80b02:	4b07      	ldr	r3, [pc, #28]	; (80b20 <osc_get_rate+0x70>)
   80b04:	e002      	b.n	80b0c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80b06:	4b06      	ldr	r3, [pc, #24]	; (80b20 <osc_get_rate+0x70>)
   80b08:	e000      	b.n	80b0c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80b0a:	2300      	movs	r3, #0
}
   80b0c:	4618      	mov	r0, r3
   80b0e:	370c      	adds	r7, #12
   80b10:	46bd      	mov	sp, r7
   80b12:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b16:	4770      	bx	lr
   80b18:	003d0900 	.word	0x003d0900
   80b1c:	007a1200 	.word	0x007a1200
   80b20:	00b71b00 	.word	0x00b71b00

00080b24 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80b24:	b580      	push	{r7, lr}
   80b26:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80b28:	2006      	movs	r0, #6
   80b2a:	4b04      	ldr	r3, [pc, #16]	; (80b3c <sysclk_get_main_hz+0x18>)
   80b2c:	4798      	blx	r3
   80b2e:	4602      	mov	r2, r0
   80b30:	4613      	mov	r3, r2
   80b32:	00db      	lsls	r3, r3, #3
   80b34:	1a9b      	subs	r3, r3, r2
   80b36:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80b38:	4618      	mov	r0, r3
   80b3a:	bd80      	pop	{r7, pc}
   80b3c:	00080ab1 	.word	0x00080ab1

00080b40 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80b40:	b580      	push	{r7, lr}
   80b42:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80b44:	4b02      	ldr	r3, [pc, #8]	; (80b50 <sysclk_get_cpu_hz+0x10>)
   80b46:	4798      	blx	r3
   80b48:	4603      	mov	r3, r0
   80b4a:	085b      	lsrs	r3, r3, #1
}
   80b4c:	4618      	mov	r0, r3
   80b4e:	bd80      	pop	{r7, pc}
   80b50:	00080b25 	.word	0x00080b25

00080b54 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80b54:	b580      	push	{r7, lr}
   80b56:	b082      	sub	sp, #8
   80b58:	af00      	add	r7, sp, #0
   80b5a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80b5c:	6878      	ldr	r0, [r7, #4]
   80b5e:	4b02      	ldr	r3, [pc, #8]	; (80b68 <sysclk_enable_peripheral_clock+0x14>)
   80b60:	4798      	blx	r3
}
   80b62:	3708      	adds	r7, #8
   80b64:	46bd      	mov	sp, r7
   80b66:	bd80      	pop	{r7, pc}
   80b68:	00082455 	.word	0x00082455

00080b6c <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   80b6c:	b580      	push	{r7, lr}
   80b6e:	b084      	sub	sp, #16
   80b70:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80b72:	2300      	movs	r3, #0
   80b74:	60bb      	str	r3, [r7, #8]
   80b76:	2300      	movs	r3, #0
   80b78:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   80b7a:	2300      	movs	r3, #0
   80b7c:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   80b7e:	2300      	movs	r3, #0
   80b80:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80b82:	483b      	ldr	r0, [pc, #236]	; (80c70 <USART0_Handler+0x104>)
   80b84:	4b3b      	ldr	r3, [pc, #236]	; (80c74 <USART0_Handler+0x108>)
   80b86:	4798      	blx	r3
   80b88:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   80b8a:	2058      	movs	r0, #88	; 0x58
   80b8c:	4b3a      	ldr	r3, [pc, #232]	; (80c78 <USART0_Handler+0x10c>)
   80b8e:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   80b90:	4b3a      	ldr	r3, [pc, #232]	; (80c7c <USART0_Handler+0x110>)
   80b92:	781b      	ldrb	r3, [r3, #0]
   80b94:	2b00      	cmp	r3, #0
   80b96:	d167      	bne.n	80c68 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   80b98:	683b      	ldr	r3, [r7, #0]
   80b9a:	f003 0301 	and.w	r3, r3, #1
   80b9e:	2b00      	cmp	r3, #0
   80ba0:	d062      	beq.n	80c68 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80ba2:	4833      	ldr	r0, [pc, #204]	; (80c70 <USART0_Handler+0x104>)
   80ba4:	4936      	ldr	r1, [pc, #216]	; (80c80 <USART0_Handler+0x114>)
   80ba6:	4b37      	ldr	r3, [pc, #220]	; (80c84 <USART0_Handler+0x118>)
   80ba8:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   80baa:	4b35      	ldr	r3, [pc, #212]	; (80c80 <USART0_Handler+0x114>)
   80bac:	681b      	ldr	r3, [r3, #0]
   80bae:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   80bb0:	68bb      	ldr	r3, [r7, #8]
   80bb2:	2b31      	cmp	r3, #49	; 0x31
   80bb4:	d102      	bne.n	80bbc <USART0_Handler+0x50>
				command_start = 1;
   80bb6:	4b34      	ldr	r3, [pc, #208]	; (80c88 <USART0_Handler+0x11c>)
   80bb8:	2201      	movs	r2, #1
   80bba:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   80bbc:	68bb      	ldr	r3, [r7, #8]
   80bbe:	2b32      	cmp	r3, #50	; 0x32
   80bc0:	d102      	bne.n	80bc8 <USART0_Handler+0x5c>
				command_end = 1;
   80bc2:	4b32      	ldr	r3, [pc, #200]	; (80c8c <USART0_Handler+0x120>)
   80bc4:	2201      	movs	r2, #1
   80bc6:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   80bc8:	4b2f      	ldr	r3, [pc, #188]	; (80c88 <USART0_Handler+0x11c>)
   80bca:	781b      	ldrb	r3, [r3, #0]
   80bcc:	2b01      	cmp	r3, #1
   80bce:	d11e      	bne.n	80c0e <USART0_Handler+0xa2>
   80bd0:	68bb      	ldr	r3, [r7, #8]
   80bd2:	2b00      	cmp	r3, #0
   80bd4:	d01b      	beq.n	80c0e <USART0_Handler+0xa2>
   80bd6:	68bb      	ldr	r3, [r7, #8]
   80bd8:	2b31      	cmp	r3, #49	; 0x31
   80bda:	d018      	beq.n	80c0e <USART0_Handler+0xa2>
   80bdc:	68bb      	ldr	r3, [r7, #8]
   80bde:	2b32      	cmp	r3, #50	; 0x32
   80be0:	d015      	beq.n	80c0e <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80be2:	4b2b      	ldr	r3, [pc, #172]	; (80c90 <USART0_Handler+0x124>)
   80be4:	781a      	ldrb	r2, [r3, #0]
   80be6:	4b2b      	ldr	r3, [pc, #172]	; (80c94 <USART0_Handler+0x128>)
   80be8:	fba3 1302 	umull	r1, r3, r3, r2
   80bec:	08d9      	lsrs	r1, r3, #3
   80bee:	460b      	mov	r3, r1
   80bf0:	009b      	lsls	r3, r3, #2
   80bf2:	440b      	add	r3, r1
   80bf4:	005b      	lsls	r3, r3, #1
   80bf6:	1ad3      	subs	r3, r2, r3
   80bf8:	b2db      	uxtb	r3, r3
   80bfa:	68ba      	ldr	r2, [r7, #8]
   80bfc:	b2d1      	uxtb	r1, r2
   80bfe:	4a26      	ldr	r2, [pc, #152]	; (80c98 <USART0_Handler+0x12c>)
   80c00:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80c02:	4b23      	ldr	r3, [pc, #140]	; (80c90 <USART0_Handler+0x124>)
   80c04:	781b      	ldrb	r3, [r3, #0]
   80c06:	3301      	adds	r3, #1
   80c08:	b2da      	uxtb	r2, r3
   80c0a:	4b21      	ldr	r3, [pc, #132]	; (80c90 <USART0_Handler+0x124>)
   80c0c:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   80c0e:	4b1f      	ldr	r3, [pc, #124]	; (80c8c <USART0_Handler+0x120>)
   80c10:	781b      	ldrb	r3, [r3, #0]
   80c12:	2b01      	cmp	r3, #1
   80c14:	d11d      	bne.n	80c52 <USART0_Handler+0xe6>
   80c16:	4b1c      	ldr	r3, [pc, #112]	; (80c88 <USART0_Handler+0x11c>)
   80c18:	781b      	ldrb	r3, [r3, #0]
   80c1a:	2b01      	cmp	r3, #1
   80c1c:	d119      	bne.n	80c52 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   80c1e:	4b1f      	ldr	r3, [pc, #124]	; (80c9c <USART0_Handler+0x130>)
   80c20:	4798      	blx	r3
				command_end = 0;
   80c22:	4b1a      	ldr	r3, [pc, #104]	; (80c8c <USART0_Handler+0x120>)
   80c24:	2200      	movs	r2, #0
   80c26:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80c28:	4b17      	ldr	r3, [pc, #92]	; (80c88 <USART0_Handler+0x11c>)
   80c2a:	2200      	movs	r2, #0
   80c2c:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   80c2e:	4b18      	ldr	r3, [pc, #96]	; (80c90 <USART0_Handler+0x124>)
   80c30:	2200      	movs	r2, #0
   80c32:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80c34:	2300      	movs	r3, #0
   80c36:	73bb      	strb	r3, [r7, #14]
   80c38:	e006      	b.n	80c48 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   80c3a:	7bbb      	ldrb	r3, [r7, #14]
   80c3c:	4a16      	ldr	r2, [pc, #88]	; (80c98 <USART0_Handler+0x12c>)
   80c3e:	2100      	movs	r1, #0
   80c40:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80c42:	7bbb      	ldrb	r3, [r7, #14]
   80c44:	3301      	adds	r3, #1
   80c46:	73bb      	strb	r3, [r7, #14]
   80c48:	7bbb      	ldrb	r3, [r7, #14]
   80c4a:	2b09      	cmp	r3, #9
   80c4c:	d9f5      	bls.n	80c3a <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   80c4e:	2301      	movs	r3, #1
   80c50:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80c52:	7bfb      	ldrb	r3, [r7, #15]
   80c54:	2b00      	cmp	r3, #0
   80c56:	d105      	bne.n	80c64 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80c58:	4b09      	ldr	r3, [pc, #36]	; (80c80 <USART0_Handler+0x114>)
   80c5a:	681b      	ldr	r3, [r3, #0]
   80c5c:	4804      	ldr	r0, [pc, #16]	; (80c70 <USART0_Handler+0x104>)
   80c5e:	4619      	mov	r1, r3
   80c60:	4b0f      	ldr	r3, [pc, #60]	; (80ca0 <USART0_Handler+0x134>)
   80c62:	4798      	blx	r3
					
			command_completed = 0;
   80c64:	2300      	movs	r3, #0
   80c66:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80c68:	3710      	adds	r7, #16
   80c6a:	46bd      	mov	sp, r7
   80c6c:	bd80      	pop	{r7, pc}
   80c6e:	bf00      	nop
   80c70:	40098000 	.word	0x40098000
   80c74:	000826d5 	.word	0x000826d5
   80c78:	00081e69 	.word	0x00081e69
   80c7c:	200704c8 	.word	0x200704c8
   80c80:	200704c4 	.word	0x200704c4
   80c84:	00082759 	.word	0x00082759
   80c88:	200704c9 	.word	0x200704c9
   80c8c:	200704ca 	.word	0x200704ca
   80c90:	200704d8 	.word	0x200704d8
   80c94:	cccccccd 	.word	0xcccccccd
   80c98:	200704cc 	.word	0x200704cc
   80c9c:	00080ca5 	.word	0x00080ca5
   80ca0:	00082725 	.word	0x00082725

00080ca4 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   80ca4:	b580      	push	{r7, lr}
   80ca6:	b08a      	sub	sp, #40	; 0x28
   80ca8:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   80caa:	2300      	movs	r3, #0
   80cac:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   80cae:	2301      	movs	r3, #1
   80cb0:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   80cb2:	2300      	movs	r3, #0
   80cb4:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   80cb6:	2301      	movs	r3, #1
   80cb8:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   80cba:	2301      	movs	r3, #1
   80cbc:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   80cbe:	2301      	movs	r3, #1
   80cc0:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   80cc2:	f240 1327 	movw	r3, #295	; 0x127
   80cc6:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   80cc8:	2319      	movs	r3, #25
   80cca:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   80ccc:	4b7e      	ldr	r3, [pc, #504]	; (80ec8 <check_command+0x224>)
   80cce:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   80cd0:	6938      	ldr	r0, [r7, #16]
   80cd2:	4b7e      	ldr	r3, [pc, #504]	; (80ecc <check_command+0x228>)
   80cd4:	4798      	blx	r3
   80cd6:	4603      	mov	r3, r0
   80cd8:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   80cda:	4b7d      	ldr	r3, [pc, #500]	; (80ed0 <check_command+0x22c>)
   80cdc:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   80cde:	6938      	ldr	r0, [r7, #16]
   80ce0:	4b7a      	ldr	r3, [pc, #488]	; (80ecc <check_command+0x228>)
   80ce2:	4798      	blx	r3
   80ce4:	4603      	mov	r3, r0
   80ce6:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   80ce8:	4b7a      	ldr	r3, [pc, #488]	; (80ed4 <check_command+0x230>)
   80cea:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   80cec:	6938      	ldr	r0, [r7, #16]
   80cee:	4b77      	ldr	r3, [pc, #476]	; (80ecc <check_command+0x228>)
   80cf0:	4798      	blx	r3
   80cf2:	4603      	mov	r3, r0
   80cf4:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   80cf6:	7ebb      	ldrb	r3, [r7, #26]
   80cf8:	2b01      	cmp	r3, #1
   80cfa:	f040 8088 	bne.w	80e0e <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80cfe:	4b76      	ldr	r3, [pc, #472]	; (80ed8 <check_command+0x234>)
   80d00:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   80d02:	e00d      	b.n	80d20 <check_command+0x7c>
		{
			character = *message_array;
   80d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d06:	781b      	ldrb	r3, [r3, #0]
   80d08:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80d0a:	bf00      	nop
   80d0c:	4873      	ldr	r0, [pc, #460]	; (80edc <check_command+0x238>)
   80d0e:	6a39      	ldr	r1, [r7, #32]
   80d10:	4b73      	ldr	r3, [pc, #460]	; (80ee0 <check_command+0x23c>)
   80d12:	4798      	blx	r3
   80d14:	4603      	mov	r3, r0
   80d16:	2b00      	cmp	r3, #0
   80d18:	d1f8      	bne.n	80d0c <check_command+0x68>
			
			message_array++;
   80d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d1c:	3301      	adds	r3, #1
   80d1e:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d22:	781b      	ldrb	r3, [r3, #0]
   80d24:	2b00      	cmp	r3, #0
   80d26:	d1ed      	bne.n	80d04 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   80d28:	4b6e      	ldr	r3, [pc, #440]	; (80ee4 <check_command+0x240>)
   80d2a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80d2c:	e00d      	b.n	80d4a <check_command+0xa6>
		{
			character = *message_array;
   80d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d30:	781b      	ldrb	r3, [r3, #0]
   80d32:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80d34:	bf00      	nop
   80d36:	4869      	ldr	r0, [pc, #420]	; (80edc <check_command+0x238>)
   80d38:	6a39      	ldr	r1, [r7, #32]
   80d3a:	4b69      	ldr	r3, [pc, #420]	; (80ee0 <check_command+0x23c>)
   80d3c:	4798      	blx	r3
   80d3e:	4603      	mov	r3, r0
   80d40:	2b00      	cmp	r3, #0
   80d42:	d1f8      	bne.n	80d36 <check_command+0x92>
			
			message_array++;
   80d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d46:	3301      	adds	r3, #1
   80d48:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d4c:	781b      	ldrb	r3, [r3, #0]
   80d4e:	2b00      	cmp	r3, #0
   80d50:	d1ed      	bne.n	80d2e <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = can_glob_data_reg[0];						// This is the ADC value retrieved from the subsystem.
   80d52:	4b65      	ldr	r3, [pc, #404]	; (80ee8 <check_command+0x244>)
   80d54:	681b      	ldr	r3, [r3, #0]
   80d56:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   80d58:	1d3b      	adds	r3, r7, #4
   80d5a:	4618      	mov	r0, r3
   80d5c:	4b63      	ldr	r3, [pc, #396]	; (80eec <check_command+0x248>)
   80d5e:	4798      	blx	r3
   80d60:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   80d62:	687b      	ldr	r3, [r7, #4]
   80d64:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80d66:	7dfb      	ldrb	r3, [r7, #23]
   80d68:	4618      	mov	r0, r3
   80d6a:	4b61      	ldr	r3, [pc, #388]	; (80ef0 <check_command+0x24c>)
   80d6c:	4798      	blx	r3
   80d6e:	4603      	mov	r3, r0
   80d70:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   80d72:	7dfb      	ldrb	r3, [r7, #23]
   80d74:	011b      	lsls	r3, r3, #4
   80d76:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   80d78:	7bfb      	ldrb	r3, [r7, #15]
   80d7a:	091b      	lsrs	r3, r3, #4
   80d7c:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   80d7e:	7dfb      	ldrb	r3, [r7, #23]
   80d80:	091b      	lsrs	r3, r3, #4
   80d82:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   80d84:	7bfb      	ldrb	r3, [r7, #15]
   80d86:	3330      	adds	r3, #48	; 0x30
   80d88:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   80d8a:	7bbb      	ldrb	r3, [r7, #14]
   80d8c:	3330      	adds	r3, #48	; 0x30
   80d8e:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   80d90:	69fb      	ldr	r3, [r7, #28]
   80d92:	2b00      	cmp	r3, #0
   80d94:	d00a      	beq.n	80dac <check_command+0x108>
		{
			character = 0x2B;
   80d96:	232b      	movs	r3, #43	; 0x2b
   80d98:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   80d9a:	bf00      	nop
   80d9c:	484f      	ldr	r0, [pc, #316]	; (80edc <check_command+0x238>)
   80d9e:	6a39      	ldr	r1, [r7, #32]
   80da0:	4b4f      	ldr	r3, [pc, #316]	; (80ee0 <check_command+0x23c>)
   80da2:	4798      	blx	r3
   80da4:	4603      	mov	r3, r0
   80da6:	2b00      	cmp	r3, #0
   80da8:	d1f8      	bne.n	80d9c <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80daa:	e009      	b.n	80dc0 <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   80dac:	232d      	movs	r3, #45	; 0x2d
   80dae:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   80db0:	bf00      	nop
   80db2:	484a      	ldr	r0, [pc, #296]	; (80edc <check_command+0x238>)
   80db4:	6a39      	ldr	r1, [r7, #32]
   80db6:	4b4a      	ldr	r3, [pc, #296]	; (80ee0 <check_command+0x23c>)
   80db8:	4798      	blx	r3
   80dba:	4603      	mov	r3, r0
   80dbc:	2b00      	cmp	r3, #0
   80dbe:	d1f8      	bne.n	80db2 <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80dc0:	bf00      	nop
   80dc2:	7bbb      	ldrb	r3, [r7, #14]
   80dc4:	4845      	ldr	r0, [pc, #276]	; (80edc <check_command+0x238>)
   80dc6:	4619      	mov	r1, r3
   80dc8:	4b45      	ldr	r3, [pc, #276]	; (80ee0 <check_command+0x23c>)
   80dca:	4798      	blx	r3
   80dcc:	4603      	mov	r3, r0
   80dce:	2b00      	cmp	r3, #0
   80dd0:	d1f7      	bne.n	80dc2 <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   80dd2:	bf00      	nop
   80dd4:	7bfb      	ldrb	r3, [r7, #15]
   80dd6:	4841      	ldr	r0, [pc, #260]	; (80edc <check_command+0x238>)
   80dd8:	4619      	mov	r1, r3
   80dda:	4b41      	ldr	r3, [pc, #260]	; (80ee0 <check_command+0x23c>)
   80ddc:	4798      	blx	r3
   80dde:	4603      	mov	r3, r0
   80de0:	2b00      	cmp	r3, #0
   80de2:	d1f7      	bne.n	80dd4 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   80de4:	4b43      	ldr	r3, [pc, #268]	; (80ef4 <check_command+0x250>)
   80de6:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80de8:	e00d      	b.n	80e06 <check_command+0x162>
		{
			character = *message_array;
   80dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80dec:	781b      	ldrb	r3, [r3, #0]
   80dee:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80df0:	bf00      	nop
   80df2:	483a      	ldr	r0, [pc, #232]	; (80edc <check_command+0x238>)
   80df4:	6a39      	ldr	r1, [r7, #32]
   80df6:	4b3a      	ldr	r3, [pc, #232]	; (80ee0 <check_command+0x23c>)
   80df8:	4798      	blx	r3
   80dfa:	4603      	mov	r3, r0
   80dfc:	2b00      	cmp	r3, #0
   80dfe:	d1f8      	bne.n	80df2 <check_command+0x14e>
			
			message_array++;
   80e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e02:	3301      	adds	r3, #1
   80e04:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   80e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e08:	781b      	ldrb	r3, [r3, #0]
   80e0a:	2b00      	cmp	r3, #0
   80e0c:	d1ed      	bne.n	80dea <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   80e0e:	7e7b      	ldrb	r3, [r7, #25]
   80e10:	2b01      	cmp	r3, #1
   80e12:	d114      	bne.n	80e3e <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   80e14:	4b38      	ldr	r3, [pc, #224]	; (80ef8 <check_command+0x254>)
   80e16:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e18:	e00d      	b.n	80e36 <check_command+0x192>
		{
			character = *message_array;
   80e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e1c:	781b      	ldrb	r3, [r3, #0]
   80e1e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e20:	bf00      	nop
   80e22:	482e      	ldr	r0, [pc, #184]	; (80edc <check_command+0x238>)
   80e24:	6a39      	ldr	r1, [r7, #32]
   80e26:	4b2e      	ldr	r3, [pc, #184]	; (80ee0 <check_command+0x23c>)
   80e28:	4798      	blx	r3
   80e2a:	4603      	mov	r3, r0
   80e2c:	2b00      	cmp	r3, #0
   80e2e:	d1f8      	bne.n	80e22 <check_command+0x17e>
			
			message_array++;
   80e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e32:	3301      	adds	r3, #1
   80e34:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e38:	781b      	ldrb	r3, [r3, #0]
   80e3a:	2b00      	cmp	r3, #0
   80e3c:	d1ed      	bne.n	80e1a <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   80e3e:	7e3b      	ldrb	r3, [r7, #24]
   80e40:	2b01      	cmp	r3, #1
   80e42:	d13d      	bne.n	80ec0 <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   80e44:	4b2d      	ldr	r3, [pc, #180]	; (80efc <check_command+0x258>)
   80e46:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e48:	e00d      	b.n	80e66 <check_command+0x1c2>
		{
			character = *message_array;
   80e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e4c:	781b      	ldrb	r3, [r3, #0]
   80e4e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e50:	bf00      	nop
   80e52:	4822      	ldr	r0, [pc, #136]	; (80edc <check_command+0x238>)
   80e54:	6a39      	ldr	r1, [r7, #32]
   80e56:	4b22      	ldr	r3, [pc, #136]	; (80ee0 <check_command+0x23c>)
   80e58:	4798      	blx	r3
   80e5a:	4603      	mov	r3, r0
   80e5c:	2b00      	cmp	r3, #0
   80e5e:	d1f8      	bne.n	80e52 <check_command+0x1ae>
			
			message_array++;
   80e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e62:	3301      	adds	r3, #1
   80e64:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   80e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e68:	781b      	ldrb	r3, [r3, #0]
   80e6a:	2b00      	cmp	r3, #0
   80e6c:	d1ed      	bne.n	80e4a <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(can_glob_msg_reg[0]);	// This is the ADC value retrieved from the subsystem.
   80e6e:	4b24      	ldr	r3, [pc, #144]	; (80f00 <check_command+0x25c>)
   80e70:	681b      	ldr	r3, [r3, #0]
   80e72:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   80e74:	68bb      	ldr	r3, [r7, #8]
   80e76:	b2db      	uxtb	r3, r3
   80e78:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   80e7a:	68bb      	ldr	r3, [r7, #8]
   80e7c:	2b40      	cmp	r3, #64	; 0x40
   80e7e:	d802      	bhi.n	80e86 <check_command+0x1e2>
   80e80:	68bb      	ldr	r3, [r7, #8]
   80e82:	2b5a      	cmp	r3, #90	; 0x5a
   80e84:	d807      	bhi.n	80e96 <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   80e86:	bf00      	nop
   80e88:	4814      	ldr	r0, [pc, #80]	; (80edc <check_command+0x238>)
   80e8a:	68b9      	ldr	r1, [r7, #8]
   80e8c:	4b14      	ldr	r3, [pc, #80]	; (80ee0 <check_command+0x23c>)
   80e8e:	4798      	blx	r3
   80e90:	4603      	mov	r3, r0
   80e92:	2b00      	cmp	r3, #0
   80e94:	d1f8      	bne.n	80e88 <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   80e96:	4b1b      	ldr	r3, [pc, #108]	; (80f04 <check_command+0x260>)
   80e98:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80e9a:	e00d      	b.n	80eb8 <check_command+0x214>
		{
			character = *message_array;
   80e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e9e:	781b      	ldrb	r3, [r3, #0]
   80ea0:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80ea2:	bf00      	nop
   80ea4:	480d      	ldr	r0, [pc, #52]	; (80edc <check_command+0x238>)
   80ea6:	6a39      	ldr	r1, [r7, #32]
   80ea8:	4b0d      	ldr	r3, [pc, #52]	; (80ee0 <check_command+0x23c>)
   80eaa:	4798      	blx	r3
   80eac:	4603      	mov	r3, r0
   80eae:	2b00      	cmp	r3, #0
   80eb0:	d1f8      	bne.n	80ea4 <check_command+0x200>
			
			message_array++;
   80eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80eb4:	3301      	adds	r3, #1
   80eb6:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   80eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80eba:	781b      	ldrb	r3, [r3, #0]
   80ebc:	2b00      	cmp	r3, #0
   80ebe:	d1ed      	bne.n	80e9c <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   80ec0:	bf00      	nop
}
   80ec2:	3728      	adds	r7, #40	; 0x28
   80ec4:	46bd      	mov	sp, r7
   80ec6:	bd80      	pop	{r7, pc}
   80ec8:	000867e0 	.word	0x000867e0
   80ecc:	00080f09 	.word	0x00080f09
   80ed0:	000867e4 	.word	0x000867e4
   80ed4:	000867f0 	.word	0x000867f0
   80ed8:	000867f4 	.word	0x000867f4
   80edc:	40098000 	.word	0x40098000
   80ee0:	00082725 	.word	0x00082725
   80ee4:	00086814 	.word	0x00086814
   80ee8:	2007a6e8 	.word	0x2007a6e8
   80eec:	00080f65 	.word	0x00080f65
   80ef0:	00080ffd 	.word	0x00080ffd
   80ef4:	00086830 	.word	0x00086830
   80ef8:	00086838 	.word	0x00086838
   80efc:	00086854 	.word	0x00086854
   80f00:	2007a714 	.word	0x2007a714
   80f04:	0008687c 	.word	0x0008687c

00080f08 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   80f08:	b480      	push	{r7}
   80f0a:	b085      	sub	sp, #20
   80f0c:	af00      	add	r7, sp, #0
   80f0e:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   80f10:	2300      	movs	r3, #0
   80f12:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   80f14:	2301      	movs	r3, #1
   80f16:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   80f18:	687b      	ldr	r3, [r7, #4]
   80f1a:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   80f1c:	2300      	movs	r3, #0
   80f1e:	73fb      	strb	r3, [r7, #15]
   80f20:	e014      	b.n	80f4c <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   80f22:	68bb      	ldr	r3, [r7, #8]
   80f24:	781a      	ldrb	r2, [r3, #0]
   80f26:	7bfb      	ldrb	r3, [r7, #15]
   80f28:	490d      	ldr	r1, [pc, #52]	; (80f60 <check_string+0x58>)
   80f2a:	5ccb      	ldrb	r3, [r1, r3]
   80f2c:	429a      	cmp	r2, r3
   80f2e:	d002      	beq.n	80f36 <check_string+0x2e>
		{
			ret_val = 0;
   80f30:	2300      	movs	r3, #0
   80f32:	73bb      	strb	r3, [r7, #14]
			break;
   80f34:	e00d      	b.n	80f52 <check_string+0x4a>
		}
		if (!*temp_str)
   80f36:	68bb      	ldr	r3, [r7, #8]
   80f38:	781b      	ldrb	r3, [r3, #0]
   80f3a:	2b00      	cmp	r3, #0
   80f3c:	d100      	bne.n	80f40 <check_string+0x38>
			break;
   80f3e:	e008      	b.n	80f52 <check_string+0x4a>
			
		temp_str++;
   80f40:	68bb      	ldr	r3, [r7, #8]
   80f42:	3301      	adds	r3, #1
   80f44:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   80f46:	7bfb      	ldrb	r3, [r7, #15]
   80f48:	3301      	adds	r3, #1
   80f4a:	73fb      	strb	r3, [r7, #15]
   80f4c:	7bfb      	ldrb	r3, [r7, #15]
   80f4e:	2b09      	cmp	r3, #9
   80f50:	d9e7      	bls.n	80f22 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   80f52:	7bbb      	ldrb	r3, [r7, #14]
}
   80f54:	4618      	mov	r0, r3
   80f56:	3714      	adds	r7, #20
   80f58:	46bd      	mov	sp, r7
   80f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f5e:	4770      	bx	lr
   80f60:	200704cc 	.word	0x200704cc

00080f64 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   80f64:	b580      	push	{r7, lr}
   80f66:	b084      	sub	sp, #16
   80f68:	af00      	add	r7, sp, #0
   80f6a:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   80f6c:	f04f 0300 	mov.w	r3, #0
   80f70:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   80f72:	687b      	ldr	r3, [r7, #4]
   80f74:	681b      	ldr	r3, [r3, #0]
   80f76:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   80f78:	68bb      	ldr	r3, [r7, #8]
   80f7a:	089b      	lsrs	r3, r3, #2
   80f7c:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   80f7e:	4b1b      	ldr	r3, [pc, #108]	; (80fec <convert_to_temp+0x88>)
   80f80:	68b8      	ldr	r0, [r7, #8]
   80f82:	4798      	blx	r3
   80f84:	4603      	mov	r3, r0
   80f86:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   80f88:	4b19      	ldr	r3, [pc, #100]	; (80ff0 <convert_to_temp+0x8c>)
   80f8a:	68f8      	ldr	r0, [r7, #12]
   80f8c:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   80f90:	4798      	blx	r3
   80f92:	4603      	mov	r3, r0
   80f94:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   80f96:	4b17      	ldr	r3, [pc, #92]	; (80ff4 <convert_to_temp+0x90>)
   80f98:	68f8      	ldr	r0, [r7, #12]
   80f9a:	f04f 0100 	mov.w	r1, #0
   80f9e:	4798      	blx	r3
   80fa0:	4603      	mov	r3, r0
   80fa2:	2b00      	cmp	r3, #0
   80fa4:	d009      	beq.n	80fba <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   80fa6:	4b14      	ldr	r3, [pc, #80]	; (80ff8 <convert_to_temp+0x94>)
   80fa8:	68f8      	ldr	r0, [r7, #12]
   80faa:	4798      	blx	r3
   80fac:	4603      	mov	r3, r0
   80fae:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   80fb0:	687b      	ldr	r3, [r7, #4]
   80fb2:	68ba      	ldr	r2, [r7, #8]
   80fb4:	601a      	str	r2, [r3, #0]
		return 1;	
   80fb6:	2301      	movs	r3, #1
   80fb8:	e013      	b.n	80fe2 <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   80fba:	4b0c      	ldr	r3, [pc, #48]	; (80fec <convert_to_temp+0x88>)
   80fbc:	68b8      	ldr	r0, [r7, #8]
   80fbe:	4798      	blx	r3
   80fc0:	4603      	mov	r3, r0
   80fc2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   80fc6:	4b0c      	ldr	r3, [pc, #48]	; (80ff8 <convert_to_temp+0x94>)
   80fc8:	4610      	mov	r0, r2
   80fca:	4798      	blx	r3
   80fcc:	4603      	mov	r3, r0
   80fce:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   80fd0:	4b09      	ldr	r3, [pc, #36]	; (80ff8 <convert_to_temp+0x94>)
   80fd2:	68f8      	ldr	r0, [r7, #12]
   80fd4:	4798      	blx	r3
   80fd6:	4603      	mov	r3, r0
   80fd8:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   80fda:	687b      	ldr	r3, [r7, #4]
   80fdc:	68ba      	ldr	r2, [r7, #8]
   80fde:	601a      	str	r2, [r3, #0]
		return 0;
   80fe0:	2300      	movs	r3, #0
	}
}
   80fe2:	4618      	mov	r0, r3
   80fe4:	3710      	adds	r7, #16
   80fe6:	46bd      	mov	sp, r7
   80fe8:	bd80      	pop	{r7, pc}
   80fea:	bf00      	nop
   80fec:	00086019 	.word	0x00086019
   80ff0:	000860c9 	.word	0x000860c9
   80ff4:	0008642d 	.word	0x0008642d
   80ff8:	00086455 	.word	0x00086455

00080ffc <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   80ffc:	b480      	push	{r7}
   80ffe:	b085      	sub	sp, #20
   81000:	af00      	add	r7, sp, #0
   81002:	4603      	mov	r3, r0
   81004:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   81006:	2300      	movs	r3, #0
   81008:	73fb      	strb	r3, [r7, #15]
   8100a:	2300      	movs	r3, #0
   8100c:	73bb      	strb	r3, [r7, #14]
   8100e:	2300      	movs	r3, #0
   81010:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   81012:	79fb      	ldrb	r3, [r7, #7]
   81014:	2b09      	cmp	r3, #9
   81016:	d919      	bls.n	8104c <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   81018:	79fa      	ldrb	r2, [r7, #7]
   8101a:	4b10      	ldr	r3, [pc, #64]	; (8105c <convert_to_bcd+0x60>)
   8101c:	fba3 1302 	umull	r1, r3, r3, r2
   81020:	08d9      	lsrs	r1, r3, #3
   81022:	460b      	mov	r3, r1
   81024:	009b      	lsls	r3, r3, #2
   81026:	440b      	add	r3, r1
   81028:	005b      	lsls	r3, r3, #1
   8102a:	1ad3      	subs	r3, r2, r3
   8102c:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   8102e:	79fa      	ldrb	r2, [r7, #7]
   81030:	4b0a      	ldr	r3, [pc, #40]	; (8105c <convert_to_bcd+0x60>)
   81032:	fba3 1302 	umull	r1, r3, r3, r2
   81036:	08db      	lsrs	r3, r3, #3
   81038:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   8103a:	7bfb      	ldrb	r3, [r7, #15]
   8103c:	011b      	lsls	r3, r3, #4
   8103e:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   81040:	7bfa      	ldrb	r2, [r7, #15]
   81042:	7bbb      	ldrb	r3, [r7, #14]
   81044:	4313      	orrs	r3, r2
   81046:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   81048:	7b7b      	ldrb	r3, [r7, #13]
   8104a:	e000      	b.n	8104e <convert_to_bcd+0x52>
	}
	else
		return temp;
   8104c:	79fb      	ldrb	r3, [r7, #7]
}
   8104e:	4618      	mov	r0, r3
   81050:	3714      	adds	r7, #20
   81052:	46bd      	mov	sp, r7
   81054:	f85d 7b04 	ldr.w	r7, [sp], #4
   81058:	4770      	bx	lr
   8105a:	bf00      	nop
   8105c:	cccccccd 	.word	0xcccccccd

00081060 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   81060:	b5b0      	push	{r4, r5, r7, lr}
   81062:	b086      	sub	sp, #24
   81064:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   81066:	4b13      	ldr	r3, [pc, #76]	; (810b4 <configure_usart+0x54>)
   81068:	463c      	mov	r4, r7
   8106a:	461d      	mov	r5, r3
   8106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   81070:	e895 0003 	ldmia.w	r5, {r0, r1}
   81074:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   81078:	2011      	movs	r0, #17
   8107a:	4b0f      	ldr	r3, [pc, #60]	; (810b8 <configure_usart+0x58>)
   8107c:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   8107e:	4b0f      	ldr	r3, [pc, #60]	; (810bc <configure_usart+0x5c>)
   81080:	4798      	blx	r3
   81082:	4603      	mov	r3, r0
   81084:	463a      	mov	r2, r7
   81086:	480e      	ldr	r0, [pc, #56]	; (810c0 <configure_usart+0x60>)
   81088:	4611      	mov	r1, r2
   8108a:	461a      	mov	r2, r3
   8108c:	4b0d      	ldr	r3, [pc, #52]	; (810c4 <configure_usart+0x64>)
   8108e:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   81090:	480b      	ldr	r0, [pc, #44]	; (810c0 <configure_usart+0x60>)
   81092:	f04f 31ff 	mov.w	r1, #4294967295
   81096:	4b0c      	ldr	r3, [pc, #48]	; (810c8 <configure_usart+0x68>)
   81098:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   8109a:	4809      	ldr	r0, [pc, #36]	; (810c0 <configure_usart+0x60>)
   8109c:	4b0b      	ldr	r3, [pc, #44]	; (810cc <configure_usart+0x6c>)
   8109e:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   810a0:	4807      	ldr	r0, [pc, #28]	; (810c0 <configure_usart+0x60>)
   810a2:	4b0b      	ldr	r3, [pc, #44]	; (810d0 <configure_usart+0x70>)
   810a4:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   810a6:	2011      	movs	r0, #17
   810a8:	4b0a      	ldr	r3, [pc, #40]	; (810d4 <configure_usart+0x74>)
   810aa:	4798      	blx	r3
}
   810ac:	3718      	adds	r7, #24
   810ae:	46bd      	mov	sp, r7
   810b0:	bdb0      	pop	{r4, r5, r7, pc}
   810b2:	bf00      	nop
   810b4:	00086880 	.word	0x00086880
   810b8:	00080b55 	.word	0x00080b55
   810bc:	00080b41 	.word	0x00080b41
   810c0:	40098000 	.word	0x40098000
   810c4:	000825b9 	.word	0x000825b9
   810c8:	000826b9 	.word	0x000826b9
   810cc:	0008263d 	.word	0x0008263d
   810d0:	0008266d 	.word	0x0008266d
   810d4:	00080a81 	.word	0x00080a81

000810d8 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   810d8:	b580      	push	{r7, lr}
   810da:	b084      	sub	sp, #16
   810dc:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   810de:	2300      	movs	r3, #0
   810e0:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   810e2:	2300      	movs	r3, #0
   810e4:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   810e6:	4b1a      	ldr	r3, [pc, #104]	; (81150 <usart_initialize+0x78>)
   810e8:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   810ea:	4b1a      	ldr	r3, [pc, #104]	; (81154 <usart_initialize+0x7c>)
   810ec:	2200      	movs	r2, #0
   810ee:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   810f0:	2300      	movs	r3, #0
   810f2:	73fb      	strb	r3, [r7, #15]
   810f4:	e006      	b.n	81104 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   810f6:	7bfb      	ldrb	r3, [r7, #15]
   810f8:	4a17      	ldr	r2, [pc, #92]	; (81158 <usart_initialize+0x80>)
   810fa:	2100      	movs	r1, #0
   810fc:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   810fe:	7bfb      	ldrb	r3, [r7, #15]
   81100:	3301      	adds	r3, #1
   81102:	73fb      	strb	r3, [r7, #15]
   81104:	7bfb      	ldrb	r3, [r7, #15]
   81106:	2b09      	cmp	r3, #9
   81108:	d9f5      	bls.n	810f6 <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   8110a:	4814      	ldr	r0, [pc, #80]	; (8115c <usart_initialize+0x84>)
   8110c:	2101      	movs	r1, #1
   8110e:	4b14      	ldr	r3, [pc, #80]	; (81160 <usart_initialize+0x88>)
   81110:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   81112:	4812      	ldr	r0, [pc, #72]	; (8115c <usart_initialize+0x84>)
   81114:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81118:	4b12      	ldr	r3, [pc, #72]	; (81164 <usart_initialize+0x8c>)
   8111a:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   8111c:	4b12      	ldr	r3, [pc, #72]	; (81168 <usart_initialize+0x90>)
   8111e:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   81120:	e00d      	b.n	8113e <usart_initialize+0x66>
	{
		character = *message_array;
   81122:	68bb      	ldr	r3, [r7, #8]
   81124:	781b      	ldrb	r3, [r3, #0]
   81126:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   81128:	bf00      	nop
   8112a:	480c      	ldr	r0, [pc, #48]	; (8115c <usart_initialize+0x84>)
   8112c:	6879      	ldr	r1, [r7, #4]
   8112e:	4b0f      	ldr	r3, [pc, #60]	; (8116c <usart_initialize+0x94>)
   81130:	4798      	blx	r3
   81132:	4603      	mov	r3, r0
   81134:	2b00      	cmp	r3, #0
   81136:	d1f8      	bne.n	8112a <usart_initialize+0x52>
			
		message_array++;
   81138:	68bb      	ldr	r3, [r7, #8]
   8113a:	3301      	adds	r3, #1
   8113c:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   8113e:	68bb      	ldr	r3, [r7, #8]
   81140:	781b      	ldrb	r3, [r3, #0]
   81142:	2b00      	cmp	r3, #0
   81144:	d1ed      	bne.n	81122 <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   81146:	bf00      	nop
}
   81148:	3710      	adds	r7, #16
   8114a:	46bd      	mov	sp, r7
   8114c:	bd80      	pop	{r7, pc}
   8114e:	bf00      	nop
   81150:	00081061 	.word	0x00081061
   81154:	200704c8 	.word	0x200704c8
   81158:	200704cc 	.word	0x200704cc
   8115c:	40098000 	.word	0x40098000
   81160:	0008269d 	.word	0x0008269d
   81164:	000826b9 	.word	0x000826b9
   81168:	00086898 	.word	0x00086898
   8116c:	00082725 	.word	0x00082725

00081170 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   81170:	b580      	push	{r7, lr}
   81172:	b082      	sub	sp, #8
   81174:	af00      	add	r7, sp, #0
   81176:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81178:	687b      	ldr	r3, [r7, #4]
   8117a:	2b07      	cmp	r3, #7
   8117c:	d82e      	bhi.n	811dc <osc_enable+0x6c>
   8117e:	a201      	add	r2, pc, #4	; (adr r2, 81184 <osc_enable+0x14>)
   81180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81184:	000811dd 	.word	0x000811dd
   81188:	000811a5 	.word	0x000811a5
   8118c:	000811ad 	.word	0x000811ad
   81190:	000811b5 	.word	0x000811b5
   81194:	000811bd 	.word	0x000811bd
   81198:	000811c5 	.word	0x000811c5
   8119c:	000811cd 	.word	0x000811cd
   811a0:	000811d5 	.word	0x000811d5
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   811a4:	2000      	movs	r0, #0
   811a6:	4b0f      	ldr	r3, [pc, #60]	; (811e4 <osc_enable+0x74>)
   811a8:	4798      	blx	r3
		break;
   811aa:	e017      	b.n	811dc <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   811ac:	2001      	movs	r0, #1
   811ae:	4b0d      	ldr	r3, [pc, #52]	; (811e4 <osc_enable+0x74>)
   811b0:	4798      	blx	r3
		break;
   811b2:	e013      	b.n	811dc <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   811b4:	2000      	movs	r0, #0
   811b6:	4b0c      	ldr	r3, [pc, #48]	; (811e8 <osc_enable+0x78>)
   811b8:	4798      	blx	r3
		break;
   811ba:	e00f      	b.n	811dc <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   811bc:	2010      	movs	r0, #16
   811be:	4b0a      	ldr	r3, [pc, #40]	; (811e8 <osc_enable+0x78>)
   811c0:	4798      	blx	r3
		break;
   811c2:	e00b      	b.n	811dc <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   811c4:	2020      	movs	r0, #32
   811c6:	4b08      	ldr	r3, [pc, #32]	; (811e8 <osc_enable+0x78>)
   811c8:	4798      	blx	r3
		break;
   811ca:	e007      	b.n	811dc <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   811cc:	2000      	movs	r0, #0
   811ce:	4b07      	ldr	r3, [pc, #28]	; (811ec <osc_enable+0x7c>)
   811d0:	4798      	blx	r3
		break;
   811d2:	e003      	b.n	811dc <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   811d4:	2001      	movs	r0, #1
   811d6:	4b05      	ldr	r3, [pc, #20]	; (811ec <osc_enable+0x7c>)
   811d8:	4798      	blx	r3
		break;
   811da:	bf00      	nop
	}
}
   811dc:	3708      	adds	r7, #8
   811de:	46bd      	mov	sp, r7
   811e0:	bd80      	pop	{r7, pc}
   811e2:	bf00      	nop
   811e4:	0008226d 	.word	0x0008226d
   811e8:	000822dd 	.word	0x000822dd
   811ec:	0008237d 	.word	0x0008237d

000811f0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   811f0:	b580      	push	{r7, lr}
   811f2:	b082      	sub	sp, #8
   811f4:	af00      	add	r7, sp, #0
   811f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   811f8:	687b      	ldr	r3, [r7, #4]
   811fa:	2b07      	cmp	r3, #7
   811fc:	d826      	bhi.n	8124c <osc_is_ready+0x5c>
   811fe:	a201      	add	r2, pc, #4	; (adr r2, 81204 <osc_is_ready+0x14>)
   81200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81204:	00081225 	.word	0x00081225
   81208:	00081229 	.word	0x00081229
   8120c:	00081229 	.word	0x00081229
   81210:	0008123b 	.word	0x0008123b
   81214:	0008123b 	.word	0x0008123b
   81218:	0008123b 	.word	0x0008123b
   8121c:	0008123b 	.word	0x0008123b
   81220:	0008123b 	.word	0x0008123b
	case OSC_SLCK_32K_RC:
		return 1;
   81224:	2301      	movs	r3, #1
   81226:	e012      	b.n	8124e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   81228:	4b0b      	ldr	r3, [pc, #44]	; (81258 <osc_is_ready+0x68>)
   8122a:	4798      	blx	r3
   8122c:	4603      	mov	r3, r0
   8122e:	2b00      	cmp	r3, #0
   81230:	bf0c      	ite	eq
   81232:	2300      	moveq	r3, #0
   81234:	2301      	movne	r3, #1
   81236:	b2db      	uxtb	r3, r3
   81238:	e009      	b.n	8124e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8123a:	4b08      	ldr	r3, [pc, #32]	; (8125c <osc_is_ready+0x6c>)
   8123c:	4798      	blx	r3
   8123e:	4603      	mov	r3, r0
   81240:	2b00      	cmp	r3, #0
   81242:	bf0c      	ite	eq
   81244:	2300      	moveq	r3, #0
   81246:	2301      	movne	r3, #1
   81248:	b2db      	uxtb	r3, r3
   8124a:	e000      	b.n	8124e <osc_is_ready+0x5e>
	}

	return 0;
   8124c:	2300      	movs	r3, #0
}
   8124e:	4618      	mov	r0, r3
   81250:	3708      	adds	r7, #8
   81252:	46bd      	mov	sp, r7
   81254:	bd80      	pop	{r7, pc}
   81256:	bf00      	nop
   81258:	000822a9 	.word	0x000822a9
   8125c:	000823e9 	.word	0x000823e9

00081260 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81260:	b480      	push	{r7}
   81262:	b083      	sub	sp, #12
   81264:	af00      	add	r7, sp, #0
   81266:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81268:	687b      	ldr	r3, [r7, #4]
   8126a:	2b07      	cmp	r3, #7
   8126c:	d825      	bhi.n	812ba <osc_get_rate+0x5a>
   8126e:	a201      	add	r2, pc, #4	; (adr r2, 81274 <osc_get_rate+0x14>)
   81270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81274:	00081295 	.word	0x00081295
   81278:	0008129b 	.word	0x0008129b
   8127c:	000812a1 	.word	0x000812a1
   81280:	000812a7 	.word	0x000812a7
   81284:	000812ab 	.word	0x000812ab
   81288:	000812af 	.word	0x000812af
   8128c:	000812b3 	.word	0x000812b3
   81290:	000812b7 	.word	0x000812b7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81294:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81298:	e010      	b.n	812bc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8129a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8129e:	e00d      	b.n	812bc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   812a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   812a4:	e00a      	b.n	812bc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   812a6:	4b08      	ldr	r3, [pc, #32]	; (812c8 <osc_get_rate+0x68>)
   812a8:	e008      	b.n	812bc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   812aa:	4b08      	ldr	r3, [pc, #32]	; (812cc <osc_get_rate+0x6c>)
   812ac:	e006      	b.n	812bc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   812ae:	4b08      	ldr	r3, [pc, #32]	; (812d0 <osc_get_rate+0x70>)
   812b0:	e004      	b.n	812bc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   812b2:	4b07      	ldr	r3, [pc, #28]	; (812d0 <osc_get_rate+0x70>)
   812b4:	e002      	b.n	812bc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   812b6:	4b06      	ldr	r3, [pc, #24]	; (812d0 <osc_get_rate+0x70>)
   812b8:	e000      	b.n	812bc <osc_get_rate+0x5c>
#endif
	}

	return 0;
   812ba:	2300      	movs	r3, #0
}
   812bc:	4618      	mov	r0, r3
   812be:	370c      	adds	r7, #12
   812c0:	46bd      	mov	sp, r7
   812c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   812c6:	4770      	bx	lr
   812c8:	003d0900 	.word	0x003d0900
   812cc:	007a1200 	.word	0x007a1200
   812d0:	00b71b00 	.word	0x00b71b00

000812d4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   812d4:	b580      	push	{r7, lr}
   812d6:	b082      	sub	sp, #8
   812d8:	af00      	add	r7, sp, #0
   812da:	4603      	mov	r3, r0
   812dc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   812de:	bf00      	nop
   812e0:	79fb      	ldrb	r3, [r7, #7]
   812e2:	4618      	mov	r0, r3
   812e4:	4b05      	ldr	r3, [pc, #20]	; (812fc <osc_wait_ready+0x28>)
   812e6:	4798      	blx	r3
   812e8:	4603      	mov	r3, r0
   812ea:	f083 0301 	eor.w	r3, r3, #1
   812ee:	b2db      	uxtb	r3, r3
   812f0:	2b00      	cmp	r3, #0
   812f2:	d1f5      	bne.n	812e0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   812f4:	3708      	adds	r7, #8
   812f6:	46bd      	mov	sp, r7
   812f8:	bd80      	pop	{r7, pc}
   812fa:	bf00      	nop
   812fc:	000811f1 	.word	0x000811f1

00081300 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   81300:	b580      	push	{r7, lr}
   81302:	b086      	sub	sp, #24
   81304:	af00      	add	r7, sp, #0
   81306:	60f8      	str	r0, [r7, #12]
   81308:	607a      	str	r2, [r7, #4]
   8130a:	603b      	str	r3, [r7, #0]
   8130c:	460b      	mov	r3, r1
   8130e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   81310:	687b      	ldr	r3, [r7, #4]
   81312:	2b00      	cmp	r3, #0
   81314:	d107      	bne.n	81326 <pll_config_init+0x26>
   81316:	683b      	ldr	r3, [r7, #0]
   81318:	2b00      	cmp	r3, #0
   8131a:	d104      	bne.n	81326 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8131c:	68fb      	ldr	r3, [r7, #12]
   8131e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   81322:	601a      	str	r2, [r3, #0]
   81324:	e019      	b.n	8135a <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   81326:	7afb      	ldrb	r3, [r7, #11]
   81328:	4618      	mov	r0, r3
   8132a:	4b0d      	ldr	r3, [pc, #52]	; (81360 <pll_config_init+0x60>)
   8132c:	4798      	blx	r3
   8132e:	4602      	mov	r2, r0
   81330:	687b      	ldr	r3, [r7, #4]
   81332:	fbb2 f3f3 	udiv	r3, r2, r3
   81336:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   81338:	697b      	ldr	r3, [r7, #20]
   8133a:	683a      	ldr	r2, [r7, #0]
   8133c:	fb02 f303 	mul.w	r3, r2, r3
   81340:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   81342:	683b      	ldr	r3, [r7, #0]
   81344:	3b01      	subs	r3, #1
   81346:	041a      	lsls	r2, r3, #16
   81348:	4b06      	ldr	r3, [pc, #24]	; (81364 <pll_config_init+0x64>)
   8134a:	4013      	ands	r3, r2
   8134c:	687a      	ldr	r2, [r7, #4]
   8134e:	b2d2      	uxtb	r2, r2
   81350:	4313      	orrs	r3, r2
   81352:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   81356:	68fb      	ldr	r3, [r7, #12]
   81358:	601a      	str	r2, [r3, #0]
	}
}
   8135a:	3718      	adds	r7, #24
   8135c:	46bd      	mov	sp, r7
   8135e:	bd80      	pop	{r7, pc}
   81360:	00081261 	.word	0x00081261
   81364:	07ff0000 	.word	0x07ff0000

00081368 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   81368:	b580      	push	{r7, lr}
   8136a:	b082      	sub	sp, #8
   8136c:	af00      	add	r7, sp, #0
   8136e:	6078      	str	r0, [r7, #4]
   81370:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   81372:	683b      	ldr	r3, [r7, #0]
   81374:	2b00      	cmp	r3, #0
   81376:	d108      	bne.n	8138a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   81378:	4b08      	ldr	r3, [pc, #32]	; (8139c <pll_enable+0x34>)
   8137a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8137c:	4b08      	ldr	r3, [pc, #32]	; (813a0 <pll_enable+0x38>)
   8137e:	687a      	ldr	r2, [r7, #4]
   81380:	6812      	ldr	r2, [r2, #0]
   81382:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81386:	629a      	str	r2, [r3, #40]	; 0x28
   81388:	e005      	b.n	81396 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8138a:	4b05      	ldr	r3, [pc, #20]	; (813a0 <pll_enable+0x38>)
   8138c:	687a      	ldr	r2, [r7, #4]
   8138e:	6812      	ldr	r2, [r2, #0]
   81390:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   81394:	61da      	str	r2, [r3, #28]
	}
}
   81396:	3708      	adds	r7, #8
   81398:	46bd      	mov	sp, r7
   8139a:	bd80      	pop	{r7, pc}
   8139c:	00082405 	.word	0x00082405
   813a0:	400e0600 	.word	0x400e0600

000813a4 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   813a4:	b580      	push	{r7, lr}
   813a6:	b082      	sub	sp, #8
   813a8:	af00      	add	r7, sp, #0
   813aa:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   813ac:	687b      	ldr	r3, [r7, #4]
   813ae:	2b00      	cmp	r3, #0
   813b0:	d103      	bne.n	813ba <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   813b2:	4b05      	ldr	r3, [pc, #20]	; (813c8 <pll_is_locked+0x24>)
   813b4:	4798      	blx	r3
   813b6:	4603      	mov	r3, r0
   813b8:	e002      	b.n	813c0 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   813ba:	4b04      	ldr	r3, [pc, #16]	; (813cc <pll_is_locked+0x28>)
   813bc:	4798      	blx	r3
   813be:	4603      	mov	r3, r0
}
   813c0:	4618      	mov	r0, r3
   813c2:	3708      	adds	r7, #8
   813c4:	46bd      	mov	sp, r7
   813c6:	bd80      	pop	{r7, pc}
   813c8:	0008241d 	.word	0x0008241d
   813cc:	00082439 	.word	0x00082439

000813d0 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   813d0:	b580      	push	{r7, lr}
   813d2:	b082      	sub	sp, #8
   813d4:	af00      	add	r7, sp, #0
   813d6:	4603      	mov	r3, r0
   813d8:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   813da:	79fb      	ldrb	r3, [r7, #7]
   813dc:	3b03      	subs	r3, #3
   813de:	2b04      	cmp	r3, #4
   813e0:	d808      	bhi.n	813f4 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   813e2:	79fb      	ldrb	r3, [r7, #7]
   813e4:	4618      	mov	r0, r3
   813e6:	4b05      	ldr	r3, [pc, #20]	; (813fc <pll_enable_source+0x2c>)
   813e8:	4798      	blx	r3
		osc_wait_ready(e_src);
   813ea:	79fb      	ldrb	r3, [r7, #7]
   813ec:	4618      	mov	r0, r3
   813ee:	4b04      	ldr	r3, [pc, #16]	; (81400 <pll_enable_source+0x30>)
   813f0:	4798      	blx	r3
		break;
   813f2:	e000      	b.n	813f6 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   813f4:	bf00      	nop
	}
}
   813f6:	3708      	adds	r7, #8
   813f8:	46bd      	mov	sp, r7
   813fa:	bd80      	pop	{r7, pc}
   813fc:	00081171 	.word	0x00081171
   81400:	000812d5 	.word	0x000812d5

00081404 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   81404:	b580      	push	{r7, lr}
   81406:	b082      	sub	sp, #8
   81408:	af00      	add	r7, sp, #0
   8140a:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8140c:	bf00      	nop
   8140e:	6878      	ldr	r0, [r7, #4]
   81410:	4b04      	ldr	r3, [pc, #16]	; (81424 <pll_wait_for_lock+0x20>)
   81412:	4798      	blx	r3
   81414:	4603      	mov	r3, r0
   81416:	2b00      	cmp	r3, #0
   81418:	d0f9      	beq.n	8140e <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8141a:	2300      	movs	r3, #0
}
   8141c:	4618      	mov	r0, r3
   8141e:	3708      	adds	r7, #8
   81420:	46bd      	mov	sp, r7
   81422:	bd80      	pop	{r7, pc}
   81424:	000813a5 	.word	0x000813a5

00081428 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81428:	b580      	push	{r7, lr}
   8142a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   8142c:	2006      	movs	r0, #6
   8142e:	4b04      	ldr	r3, [pc, #16]	; (81440 <sysclk_get_main_hz+0x18>)
   81430:	4798      	blx	r3
   81432:	4602      	mov	r2, r0
   81434:	4613      	mov	r3, r2
   81436:	00db      	lsls	r3, r3, #3
   81438:	1a9b      	subs	r3, r3, r2
   8143a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8143c:	4618      	mov	r0, r3
   8143e:	bd80      	pop	{r7, pc}
   81440:	00081261 	.word	0x00081261

00081444 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81444:	b580      	push	{r7, lr}
   81446:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81448:	4b02      	ldr	r3, [pc, #8]	; (81454 <sysclk_get_cpu_hz+0x10>)
   8144a:	4798      	blx	r3
   8144c:	4603      	mov	r3, r0
   8144e:	085b      	lsrs	r3, r3, #1
}
   81450:	4618      	mov	r0, r3
   81452:	bd80      	pop	{r7, pc}
   81454:	00081429 	.word	0x00081429

00081458 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81458:	b590      	push	{r4, r7, lr}
   8145a:	b083      	sub	sp, #12
   8145c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8145e:	4b10      	ldr	r3, [pc, #64]	; (814a0 <sysclk_init+0x48>)
   81460:	4798      	blx	r3
   81462:	4603      	mov	r3, r0
   81464:	4618      	mov	r0, r3
   81466:	4b0f      	ldr	r3, [pc, #60]	; (814a4 <sysclk_init+0x4c>)
   81468:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8146a:	2006      	movs	r0, #6
   8146c:	4b0e      	ldr	r3, [pc, #56]	; (814a8 <sysclk_init+0x50>)
   8146e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   81470:	1d3b      	adds	r3, r7, #4
   81472:	4618      	mov	r0, r3
   81474:	2106      	movs	r1, #6
   81476:	2201      	movs	r2, #1
   81478:	230e      	movs	r3, #14
   8147a:	4c0c      	ldr	r4, [pc, #48]	; (814ac <sysclk_init+0x54>)
   8147c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8147e:	1d3b      	adds	r3, r7, #4
   81480:	4618      	mov	r0, r3
   81482:	2100      	movs	r1, #0
   81484:	4b0a      	ldr	r3, [pc, #40]	; (814b0 <sysclk_init+0x58>)
   81486:	4798      	blx	r3
		pll_wait_for_lock(0);
   81488:	2000      	movs	r0, #0
   8148a:	4b0a      	ldr	r3, [pc, #40]	; (814b4 <sysclk_init+0x5c>)
   8148c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8148e:	2010      	movs	r0, #16
   81490:	4b09      	ldr	r3, [pc, #36]	; (814b8 <sysclk_init+0x60>)
   81492:	4798      	blx	r3
		break;
   81494:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81496:	4b09      	ldr	r3, [pc, #36]	; (814bc <sysclk_init+0x64>)
   81498:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8149a:	370c      	adds	r7, #12
   8149c:	46bd      	mov	sp, r7
   8149e:	bd90      	pop	{r4, r7, pc}
   814a0:	00081445 	.word	0x00081445
   814a4:	00082a31 	.word	0x00082a31
   814a8:	000813d1 	.word	0x000813d1
   814ac:	00081301 	.word	0x00081301
   814b0:	00081369 	.word	0x00081369
   814b4:	00081405 	.word	0x00081405
   814b8:	000821e9 	.word	0x000821e9
   814bc:	000828b1 	.word	0x000828b1

000814c0 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   814c0:	b580      	push	{r7, lr}
   814c2:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   814c4:	4b16      	ldr	r3, [pc, #88]	; (81520 <safe_board_init+0x60>)
   814c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   814ca:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   814cc:	2001      	movs	r0, #1
   814ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814d2:	4b14      	ldr	r3, [pc, #80]	; (81524 <safe_board_init+0x64>)
   814d4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   814d6:	2000      	movs	r0, #0
   814d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814dc:	4b11      	ldr	r3, [pc, #68]	; (81524 <safe_board_init+0x64>)
   814de:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   814e0:	2034      	movs	r0, #52	; 0x34
   814e2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   814e6:	4b0f      	ldr	r3, [pc, #60]	; (81524 <safe_board_init+0x64>)
   814e8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   814ea:	2035      	movs	r0, #53	; 0x35
   814ec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   814f0:	4b0c      	ldr	r3, [pc, #48]	; (81524 <safe_board_init+0x64>)
   814f2:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   814f4:	202f      	movs	r0, #47	; 0x2f
   814f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   814fa:	4b0a      	ldr	r3, [pc, #40]	; (81524 <safe_board_init+0x64>)
   814fc:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   814fe:	202e      	movs	r0, #46	; 0x2e
   81500:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81504:	4b07      	ldr	r3, [pc, #28]	; (81524 <safe_board_init+0x64>)
   81506:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   81508:	208f      	movs	r0, #143	; 0x8f
   8150a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8150e:	4b05      	ldr	r3, [pc, #20]	; (81524 <safe_board_init+0x64>)
   81510:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   81512:	2090      	movs	r0, #144	; 0x90
   81514:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81518:	4b02      	ldr	r3, [pc, #8]	; (81524 <safe_board_init+0x64>)
   8151a:	4798      	blx	r3
	#endif
	return;
   8151c:	bf00      	nop
}
   8151e:	bd80      	pop	{r7, pc}
   81520:	400e1a50 	.word	0x400e1a50
   81524:	00081ec9 	.word	0x00081ec9

00081528 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   81528:	b580      	push	{r7, lr}
   8152a:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   8152c:	2057      	movs	r0, #87	; 0x57
   8152e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81532:	4b25      	ldr	r3, [pc, #148]	; (815c8 <board_init+0xa0>)
   81534:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   81536:	2057      	movs	r0, #87	; 0x57
   81538:	4b24      	ldr	r3, [pc, #144]	; (815cc <board_init+0xa4>)
   8153a:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8153c:	203b      	movs	r0, #59	; 0x3b
   8153e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81542:	4b21      	ldr	r3, [pc, #132]	; (815c8 <board_init+0xa0>)
   81544:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81546:	2055      	movs	r0, #85	; 0x55
   81548:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8154c:	4b1e      	ldr	r3, [pc, #120]	; (815c8 <board_init+0xa0>)
   8154e:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81550:	2056      	movs	r0, #86	; 0x56
   81552:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81556:	4b1c      	ldr	r3, [pc, #112]	; (815c8 <board_init+0xa0>)
   81558:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8155a:	2087      	movs	r0, #135	; 0x87
   8155c:	491c      	ldr	r1, [pc, #112]	; (815d0 <board_init+0xa8>)
   8155e:	4b1a      	ldr	r3, [pc, #104]	; (815c8 <board_init+0xa0>)
   81560:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81562:	2037      	movs	r0, #55	; 0x37
   81564:	491b      	ldr	r1, [pc, #108]	; (815d4 <board_init+0xac>)
   81566:	4b18      	ldr	r3, [pc, #96]	; (815c8 <board_init+0xa0>)
   81568:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8156a:	481b      	ldr	r0, [pc, #108]	; (815d8 <board_init+0xb0>)
   8156c:	f44f 7140 	mov.w	r1, #768	; 0x300
   81570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81574:	4b19      	ldr	r3, [pc, #100]	; (815dc <board_init+0xb4>)
   81576:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81578:	2019      	movs	r0, #25
   8157a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8157e:	4b12      	ldr	r3, [pc, #72]	; (815c8 <board_init+0xa0>)
   81580:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   81582:	201a      	movs	r0, #26
   81584:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81588:	4b0f      	ldr	r3, [pc, #60]	; (815c8 <board_init+0xa0>)
   8158a:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   8158c:	201b      	movs	r0, #27
   8158e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81592:	4b0d      	ldr	r3, [pc, #52]	; (815c8 <board_init+0xa0>)
   81594:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81596:	201c      	movs	r0, #28
   81598:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8159c:	4b0a      	ldr	r3, [pc, #40]	; (815c8 <board_init+0xa0>)
   8159e:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   815a0:	200a      	movs	r0, #10
   815a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815a6:	4b08      	ldr	r3, [pc, #32]	; (815c8 <board_init+0xa0>)
   815a8:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   815aa:	200b      	movs	r0, #11
   815ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815b0:	4b05      	ldr	r3, [pc, #20]	; (815c8 <board_init+0xa0>)
   815b2:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   815b4:	208e      	movs	r0, #142	; 0x8e
   815b6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815ba:	4b03      	ldr	r3, [pc, #12]	; (815c8 <board_init+0xa0>)
   815bc:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   815be:	208e      	movs	r0, #142	; 0x8e
   815c0:	4b07      	ldr	r3, [pc, #28]	; (815e0 <board_init+0xb8>)
   815c2:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   815c4:	bd80      	pop	{r7, pc}
   815c6:	bf00      	nop
   815c8:	00081ec9 	.word	0x00081ec9
   815cc:	00081e01 	.word	0x00081e01
   815d0:	28000079 	.word	0x28000079
   815d4:	28000059 	.word	0x28000059
   815d8:	400e0e00 	.word	0x400e0e00
   815dc:	00082005 	.word	0x00082005
   815e0:	00081e35 	.word	0x00081e35

000815e4 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   815e4:	b480      	push	{r7}
   815e6:	b083      	sub	sp, #12
   815e8:	af00      	add	r7, sp, #0
   815ea:	6078      	str	r0, [r7, #4]
   815ec:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   815ee:	687b      	ldr	r3, [r7, #4]
   815f0:	683a      	ldr	r2, [r7, #0]
   815f2:	601a      	str	r2, [r3, #0]
}
   815f4:	370c      	adds	r7, #12
   815f6:	46bd      	mov	sp, r7
   815f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   815fc:	4770      	bx	lr
   815fe:	bf00      	nop

00081600 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81600:	b480      	push	{r7}
   81602:	b083      	sub	sp, #12
   81604:	af00      	add	r7, sp, #0
   81606:	6078      	str	r0, [r7, #4]
   81608:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8160a:	687b      	ldr	r3, [r7, #4]
   8160c:	683a      	ldr	r2, [r7, #0]
   8160e:	605a      	str	r2, [r3, #4]
}
   81610:	370c      	adds	r7, #12
   81612:	46bd      	mov	sp, r7
   81614:	f85d 7b04 	ldr.w	r7, [sp], #4
   81618:	4770      	bx	lr
   8161a:	bf00      	nop

0008161c <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   8161c:	b580      	push	{r7, lr}
   8161e:	b082      	sub	sp, #8
   81620:	af00      	add	r7, sp, #0
   81622:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   81624:	687b      	ldr	r3, [r7, #4]
   81626:	685b      	ldr	r3, [r3, #4]
   81628:	4618      	mov	r0, r3
   8162a:	4b02      	ldr	r3, [pc, #8]	; (81634 <sn65hvd234_enable+0x18>)
   8162c:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   8162e:	3708      	adds	r7, #8
   81630:	46bd      	mov	sp, r7
   81632:	bd80      	pop	{r7, pc}
   81634:	00081e01 	.word	0x00081e01

00081638 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   81638:	b580      	push	{r7, lr}
   8163a:	b082      	sub	sp, #8
   8163c:	af00      	add	r7, sp, #0
   8163e:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   81640:	687b      	ldr	r3, [r7, #4]
   81642:	681b      	ldr	r3, [r3, #0]
   81644:	4618      	mov	r0, r3
   81646:	4b02      	ldr	r3, [pc, #8]	; (81650 <sn65hvd234_disable_low_power+0x18>)
   81648:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   8164a:	3708      	adds	r7, #8
   8164c:	46bd      	mov	sp, r7
   8164e:	bd80      	pop	{r7, pc}
   81650:	00081e35 	.word	0x00081e35

00081654 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   81654:	b580      	push	{r7, lr}
   81656:	b08a      	sub	sp, #40	; 0x28
   81658:	af00      	add	r7, sp, #0
   8165a:	60f8      	str	r0, [r7, #12]
   8165c:	60b9      	str	r1, [r7, #8]
   8165e:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81660:	687b      	ldr	r3, [r7, #4]
   81662:	f246 12a8 	movw	r2, #25000	; 0x61a8
   81666:	fb02 f203 	mul.w	r2, r2, r3
   8166a:	68bb      	ldr	r3, [r7, #8]
   8166c:	4413      	add	r3, r2
   8166e:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   81670:	687b      	ldr	r3, [r7, #4]
   81672:	f246 11a8 	movw	r1, #25000	; 0x61a8
   81676:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   8167a:	fbb2 f3f3 	udiv	r3, r2, r3
   8167e:	2b80      	cmp	r3, #128	; 0x80
   81680:	d901      	bls.n	81686 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   81682:	2300      	movs	r3, #0
   81684:	e085      	b.n	81792 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   81686:	68bb      	ldr	r3, [r7, #8]
   81688:	085a      	lsrs	r2, r3, #1
   8168a:	687b      	ldr	r3, [r7, #4]
   8168c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81690:	fb01 f303 	mul.w	r3, r1, r3
   81694:	429a      	cmp	r2, r3
   81696:	d201      	bcs.n	8169c <can_set_baudrate+0x48>
		return 0;
   81698:	2300      	movs	r3, #0
   8169a:	e07a      	b.n	81792 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   8169c:	2308      	movs	r3, #8
   8169e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   816a2:	f04f 33ff 	mov.w	r3, #4294967295
   816a6:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   816a8:	2308      	movs	r3, #8
   816aa:	77fb      	strb	r3, [r7, #31]
   816ac:	e02b      	b.n	81706 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   816ae:	7ffb      	ldrb	r3, [r7, #31]
   816b0:	687a      	ldr	r2, [r7, #4]
   816b2:	fb02 f303 	mul.w	r3, r2, r3
   816b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   816ba:	fb02 f303 	mul.w	r3, r2, r3
   816be:	68ba      	ldr	r2, [r7, #8]
   816c0:	fbb2 f3f3 	udiv	r3, r2, r3
   816c4:	2b80      	cmp	r3, #128	; 0x80
   816c6:	d81b      	bhi.n	81700 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   816c8:	7ffb      	ldrb	r3, [r7, #31]
   816ca:	687a      	ldr	r2, [r7, #4]
   816cc:	fb02 f303 	mul.w	r3, r2, r3
   816d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   816d4:	fb02 f203 	mul.w	r2, r2, r3
   816d8:	68bb      	ldr	r3, [r7, #8]
   816da:	fbb3 f1f2 	udiv	r1, r3, r2
   816de:	fb02 f201 	mul.w	r2, r2, r1
   816e2:	1a9b      	subs	r3, r3, r2
   816e4:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   816e6:	69ba      	ldr	r2, [r7, #24]
   816e8:	6a3b      	ldr	r3, [r7, #32]
   816ea:	429a      	cmp	r2, r3
   816ec:	d208      	bcs.n	81700 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   816ee:	69bb      	ldr	r3, [r7, #24]
   816f0:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   816f2:	7ffb      	ldrb	r3, [r7, #31]
   816f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   816f8:	6a3b      	ldr	r3, [r7, #32]
   816fa:	2b00      	cmp	r3, #0
   816fc:	d100      	bne.n	81700 <can_set_baudrate+0xac>
					break;
   816fe:	e005      	b.n	8170c <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81700:	7ffb      	ldrb	r3, [r7, #31]
   81702:	3301      	adds	r3, #1
   81704:	77fb      	strb	r3, [r7, #31]
   81706:	7ffb      	ldrb	r3, [r7, #31]
   81708:	2b19      	cmp	r3, #25
   8170a:	d9d0      	bls.n	816ae <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   8170c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81710:	687a      	ldr	r2, [r7, #4]
   81712:	fb02 f303 	mul.w	r3, r2, r3
   81716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8171a:	fb02 f303 	mul.w	r3, r2, r3
   8171e:	68ba      	ldr	r2, [r7, #8]
   81720:	fbb2 f3f3 	udiv	r3, r2, r3
   81724:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   81726:	7dfb      	ldrb	r3, [r7, #23]
   81728:	2b01      	cmp	r3, #1
   8172a:	d801      	bhi.n	81730 <can_set_baudrate+0xdc>
		return 0;
   8172c:	2300      	movs	r3, #0
   8172e:	e030      	b.n	81792 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   81730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81734:	f1a3 0208 	sub.w	r2, r3, #8
   81738:	4613      	mov	r3, r2
   8173a:	005b      	lsls	r3, r3, #1
   8173c:	4413      	add	r3, r2
   8173e:	005b      	lsls	r3, r3, #1
   81740:	4a16      	ldr	r2, [pc, #88]	; (8179c <can_set_baudrate+0x148>)
   81742:	4413      	add	r3, r2
   81744:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81746:	68f8      	ldr	r0, [r7, #12]
   81748:	4b15      	ldr	r3, [pc, #84]	; (817a0 <can_set_baudrate+0x14c>)
   8174a:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8174c:	693b      	ldr	r3, [r7, #16]
   8174e:	78db      	ldrb	r3, [r3, #3]
   81750:	3b01      	subs	r3, #1
   81752:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81756:	693b      	ldr	r3, [r7, #16]
   81758:	789b      	ldrb	r3, [r3, #2]
   8175a:	3b01      	subs	r3, #1
   8175c:	011b      	lsls	r3, r3, #4
   8175e:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81762:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81764:	693b      	ldr	r3, [r7, #16]
   81766:	785b      	ldrb	r3, [r3, #1]
   81768:	3b01      	subs	r3, #1
   8176a:	021b      	lsls	r3, r3, #8
   8176c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81770:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81772:	693b      	ldr	r3, [r7, #16]
   81774:	791b      	ldrb	r3, [r3, #4]
   81776:	3b01      	subs	r3, #1
   81778:	031b      	lsls	r3, r3, #12
   8177a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   8177e:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81780:	7dfb      	ldrb	r3, [r7, #23]
   81782:	3b01      	subs	r3, #1
   81784:	041b      	lsls	r3, r3, #16
   81786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8178a:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8178c:	68fb      	ldr	r3, [r7, #12]
   8178e:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81790:	2301      	movs	r3, #1
}
   81792:	4618      	mov	r0, r3
   81794:	3728      	adds	r7, #40	; 0x28
   81796:	46bd      	mov	sp, r7
   81798:	bd80      	pop	{r7, pc}
   8179a:	bf00      	nop
   8179c:	000868b8 	.word	0x000868b8
   817a0:	0008184d 	.word	0x0008184d

000817a4 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   817a4:	b580      	push	{r7, lr}
   817a6:	b086      	sub	sp, #24
   817a8:	af00      	add	r7, sp, #0
   817aa:	60f8      	str	r0, [r7, #12]
   817ac:	60b9      	str	r1, [r7, #8]
   817ae:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   817b0:	68f8      	ldr	r0, [r7, #12]
   817b2:	68b9      	ldr	r1, [r7, #8]
   817b4:	687a      	ldr	r2, [r7, #4]
   817b6:	4b17      	ldr	r3, [pc, #92]	; (81814 <can_init+0x70>)
   817b8:	4798      	blx	r3
   817ba:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   817bc:	697b      	ldr	r3, [r7, #20]
   817be:	2b00      	cmp	r3, #0
   817c0:	d101      	bne.n	817c6 <can_init+0x22>
		return 0;
   817c2:	2300      	movs	r3, #0
   817c4:	e021      	b.n	8180a <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   817c6:	68f8      	ldr	r0, [r7, #12]
   817c8:	4b13      	ldr	r3, [pc, #76]	; (81818 <can_init+0x74>)
   817ca:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   817cc:	68f8      	ldr	r0, [r7, #12]
   817ce:	4b13      	ldr	r3, [pc, #76]	; (8181c <can_init+0x78>)
   817d0:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   817d2:	2300      	movs	r3, #0
   817d4:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   817d6:	2300      	movs	r3, #0
   817d8:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   817da:	e006      	b.n	817ea <can_init+0x46>
		ul_flag = can_get_status(p_can);
   817dc:	68f8      	ldr	r0, [r7, #12]
   817de:	4b10      	ldr	r3, [pc, #64]	; (81820 <can_init+0x7c>)
   817e0:	4798      	blx	r3
   817e2:	6178      	str	r0, [r7, #20]
		ul_tick++;
   817e4:	693b      	ldr	r3, [r7, #16]
   817e6:	3301      	adds	r3, #1
   817e8:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   817ea:	697b      	ldr	r3, [r7, #20]
   817ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   817f0:	2b00      	cmp	r3, #0
   817f2:	d103      	bne.n	817fc <can_init+0x58>
   817f4:	693a      	ldr	r2, [r7, #16]
   817f6:	4b0b      	ldr	r3, [pc, #44]	; (81824 <can_init+0x80>)
   817f8:	429a      	cmp	r2, r3
   817fa:	d9ef      	bls.n	817dc <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   817fc:	693a      	ldr	r2, [r7, #16]
   817fe:	4b0a      	ldr	r3, [pc, #40]	; (81828 <can_init+0x84>)
   81800:	429a      	cmp	r2, r3
   81802:	d101      	bne.n	81808 <can_init+0x64>
		return 0;
   81804:	2300      	movs	r3, #0
   81806:	e000      	b.n	8180a <can_init+0x66>
	} else {
		return 1;
   81808:	2301      	movs	r3, #1
	}
}
   8180a:	4618      	mov	r0, r3
   8180c:	3718      	adds	r7, #24
   8180e:	46bd      	mov	sp, r7
   81810:	bd80      	pop	{r7, pc}
   81812:	bf00      	nop
   81814:	00081655 	.word	0x00081655
   81818:	00081be5 	.word	0x00081be5
   8181c:	0008182d 	.word	0x0008182d
   81820:	000818a5 	.word	0x000818a5
   81824:	0001869f 	.word	0x0001869f
   81828:	000186a0 	.word	0x000186a0

0008182c <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   8182c:	b480      	push	{r7}
   8182e:	b083      	sub	sp, #12
   81830:	af00      	add	r7, sp, #0
   81832:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81834:	687b      	ldr	r3, [r7, #4]
   81836:	681b      	ldr	r3, [r3, #0]
   81838:	f043 0201 	orr.w	r2, r3, #1
   8183c:	687b      	ldr	r3, [r7, #4]
   8183e:	601a      	str	r2, [r3, #0]
}
   81840:	370c      	adds	r7, #12
   81842:	46bd      	mov	sp, r7
   81844:	f85d 7b04 	ldr.w	r7, [sp], #4
   81848:	4770      	bx	lr
   8184a:	bf00      	nop

0008184c <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   8184c:	b480      	push	{r7}
   8184e:	b083      	sub	sp, #12
   81850:	af00      	add	r7, sp, #0
   81852:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81854:	687b      	ldr	r3, [r7, #4]
   81856:	681b      	ldr	r3, [r3, #0]
   81858:	f023 0201 	bic.w	r2, r3, #1
   8185c:	687b      	ldr	r3, [r7, #4]
   8185e:	601a      	str	r2, [r3, #0]
}
   81860:	370c      	adds	r7, #12
   81862:	46bd      	mov	sp, r7
   81864:	f85d 7b04 	ldr.w	r7, [sp], #4
   81868:	4770      	bx	lr
   8186a:	bf00      	nop

0008186c <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   8186c:	b480      	push	{r7}
   8186e:	b083      	sub	sp, #12
   81870:	af00      	add	r7, sp, #0
   81872:	6078      	str	r0, [r7, #4]
   81874:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   81876:	687b      	ldr	r3, [r7, #4]
   81878:	683a      	ldr	r2, [r7, #0]
   8187a:	605a      	str	r2, [r3, #4]
}
   8187c:	370c      	adds	r7, #12
   8187e:	46bd      	mov	sp, r7
   81880:	f85d 7b04 	ldr.w	r7, [sp], #4
   81884:	4770      	bx	lr
   81886:	bf00      	nop

00081888 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81888:	b480      	push	{r7}
   8188a:	b083      	sub	sp, #12
   8188c:	af00      	add	r7, sp, #0
   8188e:	6078      	str	r0, [r7, #4]
   81890:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81892:	687b      	ldr	r3, [r7, #4]
   81894:	683a      	ldr	r2, [r7, #0]
   81896:	609a      	str	r2, [r3, #8]
}
   81898:	370c      	adds	r7, #12
   8189a:	46bd      	mov	sp, r7
   8189c:	f85d 7b04 	ldr.w	r7, [sp], #4
   818a0:	4770      	bx	lr
   818a2:	bf00      	nop

000818a4 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   818a4:	b480      	push	{r7}
   818a6:	b083      	sub	sp, #12
   818a8:	af00      	add	r7, sp, #0
   818aa:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   818ac:	687b      	ldr	r3, [r7, #4]
   818ae:	691b      	ldr	r3, [r3, #16]
}
   818b0:	4618      	mov	r0, r3
   818b2:	370c      	adds	r7, #12
   818b4:	46bd      	mov	sp, r7
   818b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   818ba:	4770      	bx	lr

000818bc <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   818bc:	b480      	push	{r7}
   818be:	b085      	sub	sp, #20
   818c0:	af00      	add	r7, sp, #0
   818c2:	6078      	str	r0, [r7, #4]
   818c4:	460b      	mov	r3, r1
   818c6:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   818c8:	687b      	ldr	r3, [r7, #4]
   818ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   818cc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   818d0:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   818d2:	78fa      	ldrb	r2, [r7, #3]
   818d4:	68fb      	ldr	r3, [r7, #12]
   818d6:	431a      	orrs	r2, r3
   818d8:	687b      	ldr	r3, [r7, #4]
   818da:	625a      	str	r2, [r3, #36]	; 0x24
}
   818dc:	3714      	adds	r7, #20
   818de:	46bd      	mov	sp, r7
   818e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   818e4:	4770      	bx	lr
   818e6:	bf00      	nop

000818e8 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   818e8:	b480      	push	{r7}
   818ea:	b083      	sub	sp, #12
   818ec:	af00      	add	r7, sp, #0
   818ee:	6078      	str	r0, [r7, #4]
   818f0:	460b      	mov	r3, r1
   818f2:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   818f4:	78fb      	ldrb	r3, [r7, #3]
   818f6:	687a      	ldr	r2, [r7, #4]
   818f8:	015b      	lsls	r3, r3, #5
   818fa:	4413      	add	r3, r2
   818fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81900:	681b      	ldr	r3, [r3, #0]
}
   81902:	4618      	mov	r0, r3
   81904:	370c      	adds	r7, #12
   81906:	46bd      	mov	sp, r7
   81908:	f85d 7b04 	ldr.w	r7, [sp], #4
   8190c:	4770      	bx	lr
   8190e:	bf00      	nop

00081910 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81910:	b480      	push	{r7}
   81912:	b085      	sub	sp, #20
   81914:	af00      	add	r7, sp, #0
   81916:	6078      	str	r0, [r7, #4]
   81918:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8191a:	683b      	ldr	r3, [r7, #0]
   8191c:	681b      	ldr	r3, [r3, #0]
   8191e:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81920:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   81922:	683a      	ldr	r2, [r7, #0]
   81924:	7992      	ldrb	r2, [r2, #6]
   81926:	0412      	lsls	r2, r2, #16
   81928:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   8192c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81930:	6879      	ldr	r1, [r7, #4]
   81932:	015b      	lsls	r3, r3, #5
   81934:	440b      	add	r3, r1
   81936:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8193a:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   8193c:	3714      	adds	r7, #20
   8193e:	46bd      	mov	sp, r7
   81940:	f85d 7b04 	ldr.w	r7, [sp], #4
   81944:	4770      	bx	lr
   81946:	bf00      	nop

00081948 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81948:	b480      	push	{r7}
   8194a:	b085      	sub	sp, #20
   8194c:	af00      	add	r7, sp, #0
   8194e:	6078      	str	r0, [r7, #4]
   81950:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81952:	683b      	ldr	r3, [r7, #0]
   81954:	681b      	ldr	r3, [r3, #0]
   81956:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81958:	683b      	ldr	r3, [r7, #0]
   8195a:	791b      	ldrb	r3, [r3, #4]
   8195c:	2b00      	cmp	r3, #0
   8195e:	d12e      	bne.n	819be <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81960:	7bfb      	ldrb	r3, [r7, #15]
   81962:	687a      	ldr	r2, [r7, #4]
   81964:	3310      	adds	r3, #16
   81966:	015b      	lsls	r3, r3, #5
   81968:	4413      	add	r3, r2
   8196a:	2200      	movs	r2, #0
   8196c:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   8196e:	7bfb      	ldrb	r3, [r7, #15]
   81970:	687a      	ldr	r2, [r7, #4]
   81972:	3310      	adds	r3, #16
   81974:	015b      	lsls	r3, r3, #5
   81976:	4413      	add	r3, r2
   81978:	2200      	movs	r2, #0
   8197a:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   8197c:	7bfb      	ldrb	r3, [r7, #15]
   8197e:	687a      	ldr	r2, [r7, #4]
   81980:	015b      	lsls	r3, r3, #5
   81982:	4413      	add	r3, r2
   81984:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81988:	2200      	movs	r2, #0
   8198a:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   8198c:	7bfb      	ldrb	r3, [r7, #15]
   8198e:	687a      	ldr	r2, [r7, #4]
   81990:	015b      	lsls	r3, r3, #5
   81992:	4413      	add	r3, r2
   81994:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81998:	2200      	movs	r2, #0
   8199a:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   8199c:	7bfb      	ldrb	r3, [r7, #15]
   8199e:	687a      	ldr	r2, [r7, #4]
   819a0:	015b      	lsls	r3, r3, #5
   819a2:	4413      	add	r3, r2
   819a4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   819a8:	2200      	movs	r2, #0
   819aa:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   819ac:	7bfb      	ldrb	r3, [r7, #15]
   819ae:	687a      	ldr	r2, [r7, #4]
   819b0:	015b      	lsls	r3, r3, #5
   819b2:	4413      	add	r3, r2
   819b4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   819b8:	2200      	movs	r2, #0
   819ba:	605a      	str	r2, [r3, #4]
		return;
   819bc:	e04e      	b.n	81a5c <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   819be:	7bfb      	ldrb	r3, [r7, #15]
   819c0:	7bfa      	ldrb	r2, [r7, #15]
   819c2:	6879      	ldr	r1, [r7, #4]
   819c4:	3210      	adds	r2, #16
   819c6:	0152      	lsls	r2, r2, #5
   819c8:	440a      	add	r2, r1
   819ca:	6812      	ldr	r2, [r2, #0]
   819cc:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   819d0:	683a      	ldr	r2, [r7, #0]
   819d2:	79d2      	ldrb	r2, [r2, #7]
   819d4:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   819d6:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   819d8:	6879      	ldr	r1, [r7, #4]
   819da:	3310      	adds	r3, #16
   819dc:	015b      	lsls	r3, r3, #5
   819de:	440b      	add	r3, r1
   819e0:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   819e2:	683b      	ldr	r3, [r7, #0]
   819e4:	795b      	ldrb	r3, [r3, #5]
   819e6:	2b00      	cmp	r3, #0
   819e8:	d015      	beq.n	81a16 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   819ea:	7bfb      	ldrb	r3, [r7, #15]
   819ec:	683a      	ldr	r2, [r7, #0]
   819ee:	68d2      	ldr	r2, [r2, #12]
   819f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   819f4:	6879      	ldr	r1, [r7, #4]
   819f6:	3310      	adds	r3, #16
   819f8:	015b      	lsls	r3, r3, #5
   819fa:	440b      	add	r3, r1
   819fc:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   819fe:	7bfb      	ldrb	r3, [r7, #15]
   81a00:	683a      	ldr	r2, [r7, #0]
   81a02:	6912      	ldr	r2, [r2, #16]
   81a04:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81a08:	6879      	ldr	r1, [r7, #4]
   81a0a:	015b      	lsls	r3, r3, #5
   81a0c:	440b      	add	r3, r1
   81a0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a12:	601a      	str	r2, [r3, #0]
   81a14:	e010      	b.n	81a38 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81a16:	7bfb      	ldrb	r3, [r7, #15]
   81a18:	683a      	ldr	r2, [r7, #0]
   81a1a:	68d2      	ldr	r2, [r2, #12]
   81a1c:	6879      	ldr	r1, [r7, #4]
   81a1e:	3310      	adds	r3, #16
   81a20:	015b      	lsls	r3, r3, #5
   81a22:	440b      	add	r3, r1
   81a24:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81a26:	7bfb      	ldrb	r3, [r7, #15]
   81a28:	683a      	ldr	r2, [r7, #0]
   81a2a:	6912      	ldr	r2, [r2, #16]
   81a2c:	6879      	ldr	r1, [r7, #4]
   81a2e:	015b      	lsls	r3, r3, #5
   81a30:	440b      	add	r3, r1
   81a32:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a36:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a38:	7bfb      	ldrb	r3, [r7, #15]
   81a3a:	7bfa      	ldrb	r2, [r7, #15]
   81a3c:	6879      	ldr	r1, [r7, #4]
   81a3e:	3210      	adds	r2, #16
   81a40:	0152      	lsls	r2, r2, #5
   81a42:	440a      	add	r2, r1
   81a44:	6812      	ldr	r2, [r2, #0]
   81a46:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81a4a:	683a      	ldr	r2, [r7, #0]
   81a4c:	7912      	ldrb	r2, [r2, #4]
   81a4e:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81a50:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a52:	6879      	ldr	r1, [r7, #4]
   81a54:	3310      	adds	r3, #16
   81a56:	015b      	lsls	r3, r3, #5
   81a58:	440b      	add	r3, r1
   81a5a:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81a5c:	3714      	adds	r7, #20
   81a5e:	46bd      	mov	sp, r7
   81a60:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a64:	4770      	bx	lr
   81a66:	bf00      	nop

00081a68 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81a68:	b580      	push	{r7, lr}
   81a6a:	b086      	sub	sp, #24
   81a6c:	af00      	add	r7, sp, #0
   81a6e:	6078      	str	r0, [r7, #4]
   81a70:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81a72:	2300      	movs	r3, #0
   81a74:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81a76:	683b      	ldr	r3, [r7, #0]
   81a78:	681b      	ldr	r3, [r3, #0]
   81a7a:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81a7c:	683b      	ldr	r3, [r7, #0]
   81a7e:	689b      	ldr	r3, [r3, #8]
   81a80:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81a82:	68fb      	ldr	r3, [r7, #12]
   81a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81a88:	2b00      	cmp	r3, #0
   81a8a:	d006      	beq.n	81a9a <can_mailbox_read+0x32>
   81a8c:	68fb      	ldr	r3, [r7, #12]
   81a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81a92:	2b00      	cmp	r3, #0
   81a94:	d001      	beq.n	81a9a <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81a96:	2302      	movs	r3, #2
   81a98:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81a9a:	7cfb      	ldrb	r3, [r7, #19]
   81a9c:	687a      	ldr	r2, [r7, #4]
   81a9e:	015b      	lsls	r3, r3, #5
   81aa0:	4413      	add	r3, r2
   81aa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81aa6:	685b      	ldr	r3, [r3, #4]
   81aa8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81aac:	683b      	ldr	r3, [r7, #0]
   81aae:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81ab0:	68fb      	ldr	r3, [r7, #12]
   81ab2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81ab6:	0c1b      	lsrs	r3, r3, #16
   81ab8:	b2da      	uxtb	r2, r3
   81aba:	683b      	ldr	r3, [r7, #0]
   81abc:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81abe:	7cfb      	ldrb	r3, [r7, #19]
   81ac0:	687a      	ldr	r2, [r7, #4]
   81ac2:	015b      	lsls	r3, r3, #5
   81ac4:	4413      	add	r3, r2
   81ac6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81aca:	685a      	ldr	r2, [r3, #4]
   81acc:	683b      	ldr	r3, [r7, #0]
   81ace:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81ad0:	683b      	ldr	r3, [r7, #0]
   81ad2:	799b      	ldrb	r3, [r3, #6]
   81ad4:	2b04      	cmp	r3, #4
   81ad6:	d908      	bls.n	81aea <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81ad8:	7cfb      	ldrb	r3, [r7, #19]
   81ada:	687a      	ldr	r2, [r7, #4]
   81adc:	015b      	lsls	r3, r3, #5
   81ade:	4413      	add	r3, r2
   81ae0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ae4:	681a      	ldr	r2, [r3, #0]
   81ae6:	683b      	ldr	r3, [r7, #0]
   81ae8:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81aea:	7cfb      	ldrb	r3, [r7, #19]
   81aec:	687a      	ldr	r2, [r7, #4]
   81aee:	015b      	lsls	r3, r3, #5
   81af0:	4413      	add	r3, r2
   81af2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81af6:	681a      	ldr	r2, [r3, #0]
   81af8:	683b      	ldr	r3, [r7, #0]
   81afa:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81afc:	683b      	ldr	r3, [r7, #0]
   81afe:	689b      	ldr	r3, [r3, #8]
   81b00:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81b02:	68fb      	ldr	r3, [r7, #12]
   81b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81b08:	2b00      	cmp	r3, #0
   81b0a:	d003      	beq.n	81b14 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81b0c:	697b      	ldr	r3, [r7, #20]
   81b0e:	f043 0304 	orr.w	r3, r3, #4
   81b12:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81b14:	6878      	ldr	r0, [r7, #4]
   81b16:	6839      	ldr	r1, [r7, #0]
   81b18:	4b03      	ldr	r3, [pc, #12]	; (81b28 <can_mailbox_read+0xc0>)
   81b1a:	4798      	blx	r3

	return ul_retval;
   81b1c:	697b      	ldr	r3, [r7, #20]
}
   81b1e:	4618      	mov	r0, r3
   81b20:	3718      	adds	r7, #24
   81b22:	46bd      	mov	sp, r7
   81b24:	bd80      	pop	{r7, pc}
   81b26:	bf00      	nop
   81b28:	00081911 	.word	0x00081911

00081b2c <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81b2c:	b580      	push	{r7, lr}
   81b2e:	b084      	sub	sp, #16
   81b30:	af00      	add	r7, sp, #0
   81b32:	6078      	str	r0, [r7, #4]
   81b34:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81b36:	683b      	ldr	r3, [r7, #0]
   81b38:	681b      	ldr	r3, [r3, #0]
   81b3a:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   81b3c:	7bfb      	ldrb	r3, [r7, #15]
   81b3e:	6878      	ldr	r0, [r7, #4]
   81b40:	4619      	mov	r1, r3
   81b42:	4b27      	ldr	r3, [pc, #156]	; (81be0 <can_mailbox_write+0xb4>)
   81b44:	4798      	blx	r3
   81b46:	4602      	mov	r2, r0
   81b48:	683b      	ldr	r3, [r7, #0]
   81b4a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81b4c:	683b      	ldr	r3, [r7, #0]
   81b4e:	689b      	ldr	r3, [r3, #8]
   81b50:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   81b52:	68bb      	ldr	r3, [r7, #8]
   81b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81b58:	2b00      	cmp	r3, #0
   81b5a:	d101      	bne.n	81b60 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   81b5c:	2301      	movs	r3, #1
   81b5e:	e03b      	b.n	81bd8 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   81b60:	683b      	ldr	r3, [r7, #0]
   81b62:	795b      	ldrb	r3, [r3, #5]
   81b64:	2b00      	cmp	r3, #0
   81b66:	d00b      	beq.n	81b80 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81b68:	7bfb      	ldrb	r3, [r7, #15]
   81b6a:	683a      	ldr	r2, [r7, #0]
   81b6c:	6912      	ldr	r2, [r2, #16]
   81b6e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81b72:	6879      	ldr	r1, [r7, #4]
   81b74:	015b      	lsls	r3, r3, #5
   81b76:	440b      	add	r3, r1
   81b78:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b7c:	601a      	str	r2, [r3, #0]
   81b7e:	e008      	b.n	81b92 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81b80:	7bfb      	ldrb	r3, [r7, #15]
   81b82:	683a      	ldr	r2, [r7, #0]
   81b84:	6912      	ldr	r2, [r2, #16]
   81b86:	6879      	ldr	r1, [r7, #4]
   81b88:	015b      	lsls	r3, r3, #5
   81b8a:	440b      	add	r3, r1
   81b8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b90:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81b92:	7bfb      	ldrb	r3, [r7, #15]
   81b94:	683a      	ldr	r2, [r7, #0]
   81b96:	6992      	ldr	r2, [r2, #24]
   81b98:	6879      	ldr	r1, [r7, #4]
   81b9a:	015b      	lsls	r3, r3, #5
   81b9c:	440b      	add	r3, r1
   81b9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81ba2:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81ba4:	683b      	ldr	r3, [r7, #0]
   81ba6:	799b      	ldrb	r3, [r3, #6]
   81ba8:	2b04      	cmp	r3, #4
   81baa:	d908      	bls.n	81bbe <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81bac:	7bfb      	ldrb	r3, [r7, #15]
   81bae:	683a      	ldr	r2, [r7, #0]
   81bb0:	69d2      	ldr	r2, [r2, #28]
   81bb2:	6879      	ldr	r1, [r7, #4]
   81bb4:	015b      	lsls	r3, r3, #5
   81bb6:	440b      	add	r3, r1
   81bb8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81bbc:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   81bbe:	7bfb      	ldrb	r3, [r7, #15]
   81bc0:	683a      	ldr	r2, [r7, #0]
   81bc2:	7992      	ldrb	r2, [r2, #6]
   81bc4:	0412      	lsls	r2, r2, #16
   81bc6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81bca:	6879      	ldr	r1, [r7, #4]
   81bcc:	015b      	lsls	r3, r3, #5
   81bce:	440b      	add	r3, r1
   81bd0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81bd4:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   81bd6:	2300      	movs	r3, #0
}
   81bd8:	4618      	mov	r0, r3
   81bda:	3710      	adds	r7, #16
   81bdc:	46bd      	mov	sp, r7
   81bde:	bd80      	pop	{r7, pc}
   81be0:	000818e9 	.word	0x000818e9

00081be4 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81be4:	b580      	push	{r7, lr}
   81be6:	b08c      	sub	sp, #48	; 0x30
   81be8:	af00      	add	r7, sp, #0
   81bea:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81bec:	2300      	movs	r3, #0
   81bee:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81bf0:	2300      	movs	r3, #0
   81bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81bf6:	e00d      	b.n	81c14 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   81bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81bfc:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81bfe:	f107 030c 	add.w	r3, r7, #12
   81c02:	6878      	ldr	r0, [r7, #4]
   81c04:	4619      	mov	r1, r3
   81c06:	4b07      	ldr	r3, [pc, #28]	; (81c24 <can_reset_all_mailbox+0x40>)
   81c08:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c0e:	3301      	adds	r3, #1
   81c10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c18:	2b07      	cmp	r3, #7
   81c1a:	d9ed      	bls.n	81bf8 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   81c1c:	3730      	adds	r7, #48	; 0x30
   81c1e:	46bd      	mov	sp, r7
   81c20:	bd80      	pop	{r7, pc}
   81c22:	bf00      	nop
   81c24:	00081949 	.word	0x00081949

00081c28 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   81c28:	b480      	push	{r7}
   81c2a:	b085      	sub	sp, #20
   81c2c:	af00      	add	r7, sp, #0
   81c2e:	60f8      	str	r0, [r7, #12]
   81c30:	60b9      	str	r1, [r7, #8]
   81c32:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81c34:	687b      	ldr	r3, [r7, #4]
   81c36:	2b00      	cmp	r3, #0
   81c38:	d003      	beq.n	81c42 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81c3a:	68fb      	ldr	r3, [r7, #12]
   81c3c:	68ba      	ldr	r2, [r7, #8]
   81c3e:	665a      	str	r2, [r3, #100]	; 0x64
   81c40:	e002      	b.n	81c48 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81c42:	68fb      	ldr	r3, [r7, #12]
   81c44:	68ba      	ldr	r2, [r7, #8]
   81c46:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81c48:	3714      	adds	r7, #20
   81c4a:	46bd      	mov	sp, r7
   81c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c50:	4770      	bx	lr
   81c52:	bf00      	nop

00081c54 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81c54:	b480      	push	{r7}
   81c56:	b087      	sub	sp, #28
   81c58:	af00      	add	r7, sp, #0
   81c5a:	60f8      	str	r0, [r7, #12]
   81c5c:	60b9      	str	r1, [r7, #8]
   81c5e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81c60:	68fb      	ldr	r3, [r7, #12]
   81c62:	687a      	ldr	r2, [r7, #4]
   81c64:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81c66:	68bb      	ldr	r3, [r7, #8]
   81c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c6c:	d01f      	beq.n	81cae <pio_set_peripheral+0x5a>
   81c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81c72:	d805      	bhi.n	81c80 <pio_set_peripheral+0x2c>
   81c74:	2b00      	cmp	r3, #0
   81c76:	d027      	beq.n	81cc8 <pio_set_peripheral+0x74>
   81c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81c7c:	d00a      	beq.n	81c94 <pio_set_peripheral+0x40>
   81c7e:	e01f      	b.n	81cc0 <pio_set_peripheral+0x6c>
   81c80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81c84:	d020      	beq.n	81cc8 <pio_set_peripheral+0x74>
   81c86:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81c8a:	d01d      	beq.n	81cc8 <pio_set_peripheral+0x74>
   81c8c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81c90:	d01a      	beq.n	81cc8 <pio_set_peripheral+0x74>
   81c92:	e015      	b.n	81cc0 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81c94:	68fb      	ldr	r3, [r7, #12]
   81c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81c98:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81c9a:	68fb      	ldr	r3, [r7, #12]
   81c9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81c9e:	687b      	ldr	r3, [r7, #4]
   81ca0:	43d9      	mvns	r1, r3
   81ca2:	697b      	ldr	r3, [r7, #20]
   81ca4:	400b      	ands	r3, r1
   81ca6:	401a      	ands	r2, r3
   81ca8:	68fb      	ldr	r3, [r7, #12]
   81caa:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81cac:	e008      	b.n	81cc0 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81cae:	68fb      	ldr	r3, [r7, #12]
   81cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81cb2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81cb4:	687a      	ldr	r2, [r7, #4]
   81cb6:	697b      	ldr	r3, [r7, #20]
   81cb8:	431a      	orrs	r2, r3
   81cba:	68fb      	ldr	r3, [r7, #12]
   81cbc:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81cbe:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81cc0:	68fb      	ldr	r3, [r7, #12]
   81cc2:	687a      	ldr	r2, [r7, #4]
   81cc4:	605a      	str	r2, [r3, #4]
   81cc6:	e000      	b.n	81cca <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81cc8:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81cca:	371c      	adds	r7, #28
   81ccc:	46bd      	mov	sp, r7
   81cce:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cd2:	4770      	bx	lr

00081cd4 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81cd4:	b580      	push	{r7, lr}
   81cd6:	b084      	sub	sp, #16
   81cd8:	af00      	add	r7, sp, #0
   81cda:	60f8      	str	r0, [r7, #12]
   81cdc:	60b9      	str	r1, [r7, #8]
   81cde:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81ce0:	68f8      	ldr	r0, [r7, #12]
   81ce2:	68b9      	ldr	r1, [r7, #8]
   81ce4:	4b18      	ldr	r3, [pc, #96]	; (81d48 <pio_set_input+0x74>)
   81ce6:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   81ce8:	687b      	ldr	r3, [r7, #4]
   81cea:	f003 0301 	and.w	r3, r3, #1
   81cee:	68f8      	ldr	r0, [r7, #12]
   81cf0:	68b9      	ldr	r1, [r7, #8]
   81cf2:	461a      	mov	r2, r3
   81cf4:	4b15      	ldr	r3, [pc, #84]	; (81d4c <pio_set_input+0x78>)
   81cf6:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81cf8:	687b      	ldr	r3, [r7, #4]
   81cfa:	f003 030a 	and.w	r3, r3, #10
   81cfe:	2b00      	cmp	r3, #0
   81d00:	d003      	beq.n	81d0a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   81d02:	68fb      	ldr	r3, [r7, #12]
   81d04:	68ba      	ldr	r2, [r7, #8]
   81d06:	621a      	str	r2, [r3, #32]
   81d08:	e002      	b.n	81d10 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81d0a:	68fb      	ldr	r3, [r7, #12]
   81d0c:	68ba      	ldr	r2, [r7, #8]
   81d0e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81d10:	687b      	ldr	r3, [r7, #4]
   81d12:	f003 0302 	and.w	r3, r3, #2
   81d16:	2b00      	cmp	r3, #0
   81d18:	d004      	beq.n	81d24 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   81d1a:	68fb      	ldr	r3, [r7, #12]
   81d1c:	68ba      	ldr	r2, [r7, #8]
   81d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   81d22:	e008      	b.n	81d36 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81d24:	687b      	ldr	r3, [r7, #4]
   81d26:	f003 0308 	and.w	r3, r3, #8
   81d2a:	2b00      	cmp	r3, #0
   81d2c:	d003      	beq.n	81d36 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   81d2e:	68fb      	ldr	r3, [r7, #12]
   81d30:	68ba      	ldr	r2, [r7, #8]
   81d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81d36:	68fb      	ldr	r3, [r7, #12]
   81d38:	68ba      	ldr	r2, [r7, #8]
   81d3a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   81d3c:	68fb      	ldr	r3, [r7, #12]
   81d3e:	68ba      	ldr	r2, [r7, #8]
   81d40:	601a      	str	r2, [r3, #0]
}
   81d42:	3710      	adds	r7, #16
   81d44:	46bd      	mov	sp, r7
   81d46:	bd80      	pop	{r7, pc}
   81d48:	00081db5 	.word	0x00081db5
   81d4c:	00081c29 	.word	0x00081c29

00081d50 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81d50:	b580      	push	{r7, lr}
   81d52:	b084      	sub	sp, #16
   81d54:	af00      	add	r7, sp, #0
   81d56:	60f8      	str	r0, [r7, #12]
   81d58:	60b9      	str	r1, [r7, #8]
   81d5a:	607a      	str	r2, [r7, #4]
   81d5c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   81d5e:	68f8      	ldr	r0, [r7, #12]
   81d60:	68b9      	ldr	r1, [r7, #8]
   81d62:	4b12      	ldr	r3, [pc, #72]	; (81dac <pio_set_output+0x5c>)
   81d64:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81d66:	68f8      	ldr	r0, [r7, #12]
   81d68:	68b9      	ldr	r1, [r7, #8]
   81d6a:	69ba      	ldr	r2, [r7, #24]
   81d6c:	4b10      	ldr	r3, [pc, #64]	; (81db0 <pio_set_output+0x60>)
   81d6e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81d70:	683b      	ldr	r3, [r7, #0]
   81d72:	2b00      	cmp	r3, #0
   81d74:	d003      	beq.n	81d7e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81d76:	68fb      	ldr	r3, [r7, #12]
   81d78:	68ba      	ldr	r2, [r7, #8]
   81d7a:	651a      	str	r2, [r3, #80]	; 0x50
   81d7c:	e002      	b.n	81d84 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81d7e:	68fb      	ldr	r3, [r7, #12]
   81d80:	68ba      	ldr	r2, [r7, #8]
   81d82:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81d84:	687b      	ldr	r3, [r7, #4]
   81d86:	2b00      	cmp	r3, #0
   81d88:	d003      	beq.n	81d92 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81d8a:	68fb      	ldr	r3, [r7, #12]
   81d8c:	68ba      	ldr	r2, [r7, #8]
   81d8e:	631a      	str	r2, [r3, #48]	; 0x30
   81d90:	e002      	b.n	81d98 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81d92:	68fb      	ldr	r3, [r7, #12]
   81d94:	68ba      	ldr	r2, [r7, #8]
   81d96:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81d98:	68fb      	ldr	r3, [r7, #12]
   81d9a:	68ba      	ldr	r2, [r7, #8]
   81d9c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81d9e:	68fb      	ldr	r3, [r7, #12]
   81da0:	68ba      	ldr	r2, [r7, #8]
   81da2:	601a      	str	r2, [r3, #0]
}
   81da4:	3710      	adds	r7, #16
   81da6:	46bd      	mov	sp, r7
   81da8:	bd80      	pop	{r7, pc}
   81daa:	bf00      	nop
   81dac:	00081db5 	.word	0x00081db5
   81db0:	00081c29 	.word	0x00081c29

00081db4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81db4:	b480      	push	{r7}
   81db6:	b083      	sub	sp, #12
   81db8:	af00      	add	r7, sp, #0
   81dba:	6078      	str	r0, [r7, #4]
   81dbc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81dbe:	687b      	ldr	r3, [r7, #4]
   81dc0:	683a      	ldr	r2, [r7, #0]
   81dc2:	645a      	str	r2, [r3, #68]	; 0x44
}
   81dc4:	370c      	adds	r7, #12
   81dc6:	46bd      	mov	sp, r7
   81dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dcc:	4770      	bx	lr
   81dce:	bf00      	nop

00081dd0 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81dd0:	b480      	push	{r7}
   81dd2:	b083      	sub	sp, #12
   81dd4:	af00      	add	r7, sp, #0
   81dd6:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   81dd8:	687b      	ldr	r3, [r7, #4]
   81dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81ddc:	4618      	mov	r0, r3
   81dde:	370c      	adds	r7, #12
   81de0:	46bd      	mov	sp, r7
   81de2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81de6:	4770      	bx	lr

00081de8 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   81de8:	b480      	push	{r7}
   81dea:	b083      	sub	sp, #12
   81dec:	af00      	add	r7, sp, #0
   81dee:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81df0:	687b      	ldr	r3, [r7, #4]
   81df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81df4:	4618      	mov	r0, r3
   81df6:	370c      	adds	r7, #12
   81df8:	46bd      	mov	sp, r7
   81dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   81dfe:	4770      	bx	lr

00081e00 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81e00:	b480      	push	{r7}
   81e02:	b085      	sub	sp, #20
   81e04:	af00      	add	r7, sp, #0
   81e06:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e08:	687b      	ldr	r3, [r7, #4]
   81e0a:	095b      	lsrs	r3, r3, #5
   81e0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e10:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e14:	025b      	lsls	r3, r3, #9
   81e16:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81e18:	687b      	ldr	r3, [r7, #4]
   81e1a:	f003 031f 	and.w	r3, r3, #31
   81e1e:	2201      	movs	r2, #1
   81e20:	fa02 f303 	lsl.w	r3, r2, r3
   81e24:	461a      	mov	r2, r3
   81e26:	68fb      	ldr	r3, [r7, #12]
   81e28:	631a      	str	r2, [r3, #48]	; 0x30
}
   81e2a:	3714      	adds	r7, #20
   81e2c:	46bd      	mov	sp, r7
   81e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e32:	4770      	bx	lr

00081e34 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81e34:	b480      	push	{r7}
   81e36:	b085      	sub	sp, #20
   81e38:	af00      	add	r7, sp, #0
   81e3a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e3c:	687b      	ldr	r3, [r7, #4]
   81e3e:	095b      	lsrs	r3, r3, #5
   81e40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e44:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e48:	025b      	lsls	r3, r3, #9
   81e4a:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81e4c:	687b      	ldr	r3, [r7, #4]
   81e4e:	f003 031f 	and.w	r3, r3, #31
   81e52:	2201      	movs	r2, #1
   81e54:	fa02 f303 	lsl.w	r3, r2, r3
   81e58:	461a      	mov	r2, r3
   81e5a:	68fb      	ldr	r3, [r7, #12]
   81e5c:	635a      	str	r2, [r3, #52]	; 0x34
}
   81e5e:	3714      	adds	r7, #20
   81e60:	46bd      	mov	sp, r7
   81e62:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e66:	4770      	bx	lr

00081e68 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81e68:	b480      	push	{r7}
   81e6a:	b085      	sub	sp, #20
   81e6c:	af00      	add	r7, sp, #0
   81e6e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e70:	687b      	ldr	r3, [r7, #4]
   81e72:	095b      	lsrs	r3, r3, #5
   81e74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e78:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e7c:	025b      	lsls	r3, r3, #9
   81e7e:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81e80:	68fb      	ldr	r3, [r7, #12]
   81e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81e84:	687b      	ldr	r3, [r7, #4]
   81e86:	f003 031f 	and.w	r3, r3, #31
   81e8a:	2101      	movs	r1, #1
   81e8c:	fa01 f303 	lsl.w	r3, r1, r3
   81e90:	4013      	ands	r3, r2
   81e92:	2b00      	cmp	r3, #0
   81e94:	d009      	beq.n	81eaa <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81e96:	687b      	ldr	r3, [r7, #4]
   81e98:	f003 031f 	and.w	r3, r3, #31
   81e9c:	2201      	movs	r2, #1
   81e9e:	fa02 f303 	lsl.w	r3, r2, r3
   81ea2:	461a      	mov	r2, r3
   81ea4:	68fb      	ldr	r3, [r7, #12]
   81ea6:	635a      	str	r2, [r3, #52]	; 0x34
   81ea8:	e008      	b.n	81ebc <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81eaa:	687b      	ldr	r3, [r7, #4]
   81eac:	f003 031f 	and.w	r3, r3, #31
   81eb0:	2201      	movs	r2, #1
   81eb2:	fa02 f303 	lsl.w	r3, r2, r3
   81eb6:	461a      	mov	r2, r3
   81eb8:	68fb      	ldr	r3, [r7, #12]
   81eba:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81ebc:	3714      	adds	r7, #20
   81ebe:	46bd      	mov	sp, r7
   81ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ec4:	4770      	bx	lr
   81ec6:	bf00      	nop

00081ec8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81ec8:	b590      	push	{r4, r7, lr}
   81eca:	b087      	sub	sp, #28
   81ecc:	af02      	add	r7, sp, #8
   81ece:	6078      	str	r0, [r7, #4]
   81ed0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ed2:	687b      	ldr	r3, [r7, #4]
   81ed4:	095b      	lsrs	r3, r3, #5
   81ed6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81eda:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ede:	025b      	lsls	r3, r3, #9
   81ee0:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81ee2:	683b      	ldr	r3, [r7, #0]
   81ee4:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81ee8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81eec:	d048      	beq.n	81f80 <pio_configure_pin+0xb8>
   81eee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ef2:	d806      	bhi.n	81f02 <pio_configure_pin+0x3a>
   81ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ef8:	d00a      	beq.n	81f10 <pio_configure_pin+0x48>
   81efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81efe:	d023      	beq.n	81f48 <pio_configure_pin+0x80>
   81f00:	e070      	b.n	81fe4 <pio_configure_pin+0x11c>
   81f02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f06:	d047      	beq.n	81f98 <pio_configure_pin+0xd0>
   81f08:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f0c:	d044      	beq.n	81f98 <pio_configure_pin+0xd0>
   81f0e:	e069      	b.n	81fe4 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f10:	687b      	ldr	r3, [r7, #4]
   81f12:	f003 031f 	and.w	r3, r3, #31
   81f16:	2201      	movs	r2, #1
   81f18:	fa02 f303 	lsl.w	r3, r2, r3
   81f1c:	68f8      	ldr	r0, [r7, #12]
   81f1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f22:	461a      	mov	r2, r3
   81f24:	4b33      	ldr	r3, [pc, #204]	; (81ff4 <pio_configure_pin+0x12c>)
   81f26:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81f28:	687b      	ldr	r3, [r7, #4]
   81f2a:	f003 031f 	and.w	r3, r3, #31
   81f2e:	2201      	movs	r2, #1
   81f30:	fa02 f303 	lsl.w	r3, r2, r3
   81f34:	461a      	mov	r2, r3
   81f36:	683b      	ldr	r3, [r7, #0]
   81f38:	f003 0301 	and.w	r3, r3, #1
   81f3c:	68f8      	ldr	r0, [r7, #12]
   81f3e:	4611      	mov	r1, r2
   81f40:	461a      	mov	r2, r3
   81f42:	4b2d      	ldr	r3, [pc, #180]	; (81ff8 <pio_configure_pin+0x130>)
   81f44:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81f46:	e04f      	b.n	81fe8 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81f48:	687b      	ldr	r3, [r7, #4]
   81f4a:	f003 031f 	and.w	r3, r3, #31
   81f4e:	2201      	movs	r2, #1
   81f50:	fa02 f303 	lsl.w	r3, r2, r3
   81f54:	68f8      	ldr	r0, [r7, #12]
   81f56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f5a:	461a      	mov	r2, r3
   81f5c:	4b25      	ldr	r3, [pc, #148]	; (81ff4 <pio_configure_pin+0x12c>)
   81f5e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81f60:	687b      	ldr	r3, [r7, #4]
   81f62:	f003 031f 	and.w	r3, r3, #31
   81f66:	2201      	movs	r2, #1
   81f68:	fa02 f303 	lsl.w	r3, r2, r3
   81f6c:	461a      	mov	r2, r3
   81f6e:	683b      	ldr	r3, [r7, #0]
   81f70:	f003 0301 	and.w	r3, r3, #1
   81f74:	68f8      	ldr	r0, [r7, #12]
   81f76:	4611      	mov	r1, r2
   81f78:	461a      	mov	r2, r3
   81f7a:	4b1f      	ldr	r3, [pc, #124]	; (81ff8 <pio_configure_pin+0x130>)
   81f7c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81f7e:	e033      	b.n	81fe8 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81f80:	687b      	ldr	r3, [r7, #4]
   81f82:	f003 031f 	and.w	r3, r3, #31
   81f86:	2201      	movs	r2, #1
   81f88:	fa02 f303 	lsl.w	r3, r2, r3
   81f8c:	68f8      	ldr	r0, [r7, #12]
   81f8e:	4619      	mov	r1, r3
   81f90:	683a      	ldr	r2, [r7, #0]
   81f92:	4b1a      	ldr	r3, [pc, #104]	; (81ffc <pio_configure_pin+0x134>)
   81f94:	4798      	blx	r3
		break;
   81f96:	e027      	b.n	81fe8 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f98:	687b      	ldr	r3, [r7, #4]
   81f9a:	f003 031f 	and.w	r3, r3, #31
   81f9e:	2201      	movs	r2, #1
   81fa0:	fa02 f303 	lsl.w	r3, r2, r3
   81fa4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81fa6:	683b      	ldr	r3, [r7, #0]
   81fa8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fac:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81fb0:	bf14      	ite	ne
   81fb2:	2300      	movne	r3, #0
   81fb4:	2301      	moveq	r3, #1
   81fb6:	b2db      	uxtb	r3, r3
   81fb8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   81fba:	683b      	ldr	r3, [r7, #0]
   81fbc:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fc0:	2b00      	cmp	r3, #0
   81fc2:	bf0c      	ite	eq
   81fc4:	2300      	moveq	r3, #0
   81fc6:	2301      	movne	r3, #1
   81fc8:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   81fca:	6838      	ldr	r0, [r7, #0]
   81fcc:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81fd0:	2800      	cmp	r0, #0
   81fd2:	bf0c      	ite	eq
   81fd4:	2000      	moveq	r0, #0
   81fd6:	2001      	movne	r0, #1
   81fd8:	b2c0      	uxtb	r0, r0
   81fda:	9000      	str	r0, [sp, #0]
   81fdc:	68f8      	ldr	r0, [r7, #12]
   81fde:	4c08      	ldr	r4, [pc, #32]	; (82000 <pio_configure_pin+0x138>)
   81fe0:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81fe2:	e001      	b.n	81fe8 <pio_configure_pin+0x120>

	default:
		return 0;
   81fe4:	2300      	movs	r3, #0
   81fe6:	e000      	b.n	81fea <pio_configure_pin+0x122>
	}

	return 1;
   81fe8:	2301      	movs	r3, #1
}
   81fea:	4618      	mov	r0, r3
   81fec:	3714      	adds	r7, #20
   81fee:	46bd      	mov	sp, r7
   81ff0:	bd90      	pop	{r4, r7, pc}
   81ff2:	bf00      	nop
   81ff4:	00081c55 	.word	0x00081c55
   81ff8:	00081c29 	.word	0x00081c29
   81ffc:	00081cd5 	.word	0x00081cd5
   82000:	00081d51 	.word	0x00081d51

00082004 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82004:	b590      	push	{r4, r7, lr}
   82006:	b087      	sub	sp, #28
   82008:	af02      	add	r7, sp, #8
   8200a:	60f8      	str	r0, [r7, #12]
   8200c:	60b9      	str	r1, [r7, #8]
   8200e:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82010:	687b      	ldr	r3, [r7, #4]
   82012:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82016:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8201a:	d02e      	beq.n	8207a <pio_configure_pin_group+0x76>
   8201c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82020:	d806      	bhi.n	82030 <pio_configure_pin_group+0x2c>
   82022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82026:	d00a      	beq.n	8203e <pio_configure_pin_group+0x3a>
   82028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8202c:	d016      	beq.n	8205c <pio_configure_pin_group+0x58>
   8202e:	e04a      	b.n	820c6 <pio_configure_pin_group+0xc2>
   82030:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82034:	d027      	beq.n	82086 <pio_configure_pin_group+0x82>
   82036:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8203a:	d024      	beq.n	82086 <pio_configure_pin_group+0x82>
   8203c:	e043      	b.n	820c6 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8203e:	68f8      	ldr	r0, [r7, #12]
   82040:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82044:	68ba      	ldr	r2, [r7, #8]
   82046:	4b23      	ldr	r3, [pc, #140]	; (820d4 <pio_configure_pin_group+0xd0>)
   82048:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8204a:	687b      	ldr	r3, [r7, #4]
   8204c:	f003 0301 	and.w	r3, r3, #1
   82050:	68f8      	ldr	r0, [r7, #12]
   82052:	68b9      	ldr	r1, [r7, #8]
   82054:	461a      	mov	r2, r3
   82056:	4b20      	ldr	r3, [pc, #128]	; (820d8 <pio_configure_pin_group+0xd4>)
   82058:	4798      	blx	r3
		break;
   8205a:	e036      	b.n	820ca <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8205c:	68f8      	ldr	r0, [r7, #12]
   8205e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82062:	68ba      	ldr	r2, [r7, #8]
   82064:	4b1b      	ldr	r3, [pc, #108]	; (820d4 <pio_configure_pin_group+0xd0>)
   82066:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82068:	687b      	ldr	r3, [r7, #4]
   8206a:	f003 0301 	and.w	r3, r3, #1
   8206e:	68f8      	ldr	r0, [r7, #12]
   82070:	68b9      	ldr	r1, [r7, #8]
   82072:	461a      	mov	r2, r3
   82074:	4b18      	ldr	r3, [pc, #96]	; (820d8 <pio_configure_pin_group+0xd4>)
   82076:	4798      	blx	r3
		break;
   82078:	e027      	b.n	820ca <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8207a:	68f8      	ldr	r0, [r7, #12]
   8207c:	68b9      	ldr	r1, [r7, #8]
   8207e:	687a      	ldr	r2, [r7, #4]
   82080:	4b16      	ldr	r3, [pc, #88]	; (820dc <pio_configure_pin_group+0xd8>)
   82082:	4798      	blx	r3
		break;
   82084:	e021      	b.n	820ca <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82086:	687b      	ldr	r3, [r7, #4]
   82088:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8208c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82090:	bf14      	ite	ne
   82092:	2300      	movne	r3, #0
   82094:	2301      	moveq	r3, #1
   82096:	b2db      	uxtb	r3, r3
   82098:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8209a:	687b      	ldr	r3, [r7, #4]
   8209c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   820a0:	2b00      	cmp	r3, #0
   820a2:	bf0c      	ite	eq
   820a4:	2300      	moveq	r3, #0
   820a6:	2301      	movne	r3, #1
   820a8:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   820aa:	6879      	ldr	r1, [r7, #4]
   820ac:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   820b0:	2900      	cmp	r1, #0
   820b2:	bf0c      	ite	eq
   820b4:	2100      	moveq	r1, #0
   820b6:	2101      	movne	r1, #1
   820b8:	b2c9      	uxtb	r1, r1
   820ba:	9100      	str	r1, [sp, #0]
   820bc:	68f8      	ldr	r0, [r7, #12]
   820be:	68b9      	ldr	r1, [r7, #8]
   820c0:	4c07      	ldr	r4, [pc, #28]	; (820e0 <pio_configure_pin_group+0xdc>)
   820c2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   820c4:	e001      	b.n	820ca <pio_configure_pin_group+0xc6>

	default:
		return 0;
   820c6:	2300      	movs	r3, #0
   820c8:	e000      	b.n	820cc <pio_configure_pin_group+0xc8>
	}

	return 1;
   820ca:	2301      	movs	r3, #1
}
   820cc:	4618      	mov	r0, r3
   820ce:	3714      	adds	r7, #20
   820d0:	46bd      	mov	sp, r7
   820d2:	bd90      	pop	{r4, r7, pc}
   820d4:	00081c55 	.word	0x00081c55
   820d8:	00081c29 	.word	0x00081c29
   820dc:	00081cd5 	.word	0x00081cd5
   820e0:	00081d51 	.word	0x00081d51

000820e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   820e4:	b580      	push	{r7, lr}
   820e6:	b084      	sub	sp, #16
   820e8:	af00      	add	r7, sp, #0
   820ea:	6078      	str	r0, [r7, #4]
   820ec:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   820ee:	6878      	ldr	r0, [r7, #4]
   820f0:	4b22      	ldr	r3, [pc, #136]	; (8217c <pio_handler_process+0x98>)
   820f2:	4798      	blx	r3
   820f4:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   820f6:	6878      	ldr	r0, [r7, #4]
   820f8:	4b21      	ldr	r3, [pc, #132]	; (82180 <pio_handler_process+0x9c>)
   820fa:	4798      	blx	r3
   820fc:	4603      	mov	r3, r0
   820fe:	68fa      	ldr	r2, [r7, #12]
   82100:	4013      	ands	r3, r2
   82102:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82104:	68fb      	ldr	r3, [r7, #12]
   82106:	2b00      	cmp	r3, #0
   82108:	d035      	beq.n	82176 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   8210a:	2300      	movs	r3, #0
   8210c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8210e:	e02f      	b.n	82170 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82110:	4a1c      	ldr	r2, [pc, #112]	; (82184 <pio_handler_process+0xa0>)
   82112:	68bb      	ldr	r3, [r7, #8]
   82114:	011b      	lsls	r3, r3, #4
   82116:	4413      	add	r3, r2
   82118:	681a      	ldr	r2, [r3, #0]
   8211a:	683b      	ldr	r3, [r7, #0]
   8211c:	429a      	cmp	r2, r3
   8211e:	d124      	bne.n	8216a <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82120:	4a18      	ldr	r2, [pc, #96]	; (82184 <pio_handler_process+0xa0>)
   82122:	68bb      	ldr	r3, [r7, #8]
   82124:	011b      	lsls	r3, r3, #4
   82126:	4413      	add	r3, r2
   82128:	685a      	ldr	r2, [r3, #4]
   8212a:	68fb      	ldr	r3, [r7, #12]
   8212c:	4013      	ands	r3, r2
   8212e:	2b00      	cmp	r3, #0
   82130:	d01b      	beq.n	8216a <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82132:	4a14      	ldr	r2, [pc, #80]	; (82184 <pio_handler_process+0xa0>)
   82134:	68bb      	ldr	r3, [r7, #8]
   82136:	011b      	lsls	r3, r3, #4
   82138:	4413      	add	r3, r2
   8213a:	3308      	adds	r3, #8
   8213c:	685b      	ldr	r3, [r3, #4]
   8213e:	4911      	ldr	r1, [pc, #68]	; (82184 <pio_handler_process+0xa0>)
   82140:	68ba      	ldr	r2, [r7, #8]
   82142:	0112      	lsls	r2, r2, #4
   82144:	440a      	add	r2, r1
   82146:	6811      	ldr	r1, [r2, #0]
   82148:	480e      	ldr	r0, [pc, #56]	; (82184 <pio_handler_process+0xa0>)
   8214a:	68ba      	ldr	r2, [r7, #8]
   8214c:	0112      	lsls	r2, r2, #4
   8214e:	4402      	add	r2, r0
   82150:	6852      	ldr	r2, [r2, #4]
   82152:	4608      	mov	r0, r1
   82154:	4611      	mov	r1, r2
   82156:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82158:	4a0a      	ldr	r2, [pc, #40]	; (82184 <pio_handler_process+0xa0>)
   8215a:	68bb      	ldr	r3, [r7, #8]
   8215c:	011b      	lsls	r3, r3, #4
   8215e:	4413      	add	r3, r2
   82160:	685b      	ldr	r3, [r3, #4]
   82162:	43db      	mvns	r3, r3
   82164:	68fa      	ldr	r2, [r7, #12]
   82166:	4013      	ands	r3, r2
   82168:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8216a:	68bb      	ldr	r3, [r7, #8]
   8216c:	3301      	adds	r3, #1
   8216e:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82170:	68fb      	ldr	r3, [r7, #12]
   82172:	2b00      	cmp	r3, #0
   82174:	d1cc      	bne.n	82110 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   82176:	3710      	adds	r7, #16
   82178:	46bd      	mov	sp, r7
   8217a:	bd80      	pop	{r7, pc}
   8217c:	00081dd1 	.word	0x00081dd1
   82180:	00081de9 	.word	0x00081de9
   82184:	200704dc 	.word	0x200704dc

00082188 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82188:	b580      	push	{r7, lr}
   8218a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   8218c:	4802      	ldr	r0, [pc, #8]	; (82198 <PIOA_Handler+0x10>)
   8218e:	210b      	movs	r1, #11
   82190:	4b02      	ldr	r3, [pc, #8]	; (8219c <PIOA_Handler+0x14>)
   82192:	4798      	blx	r3
}
   82194:	bd80      	pop	{r7, pc}
   82196:	bf00      	nop
   82198:	400e0e00 	.word	0x400e0e00
   8219c:	000820e5 	.word	0x000820e5

000821a0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   821a0:	b580      	push	{r7, lr}
   821a2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   821a4:	4802      	ldr	r0, [pc, #8]	; (821b0 <PIOB_Handler+0x10>)
   821a6:	210c      	movs	r1, #12
   821a8:	4b02      	ldr	r3, [pc, #8]	; (821b4 <PIOB_Handler+0x14>)
   821aa:	4798      	blx	r3
}
   821ac:	bd80      	pop	{r7, pc}
   821ae:	bf00      	nop
   821b0:	400e1000 	.word	0x400e1000
   821b4:	000820e5 	.word	0x000820e5

000821b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   821b8:	b580      	push	{r7, lr}
   821ba:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   821bc:	4802      	ldr	r0, [pc, #8]	; (821c8 <PIOC_Handler+0x10>)
   821be:	210d      	movs	r1, #13
   821c0:	4b02      	ldr	r3, [pc, #8]	; (821cc <PIOC_Handler+0x14>)
   821c2:	4798      	blx	r3
}
   821c4:	bd80      	pop	{r7, pc}
   821c6:	bf00      	nop
   821c8:	400e1200 	.word	0x400e1200
   821cc:	000820e5 	.word	0x000820e5

000821d0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   821d0:	b580      	push	{r7, lr}
   821d2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   821d4:	4802      	ldr	r0, [pc, #8]	; (821e0 <PIOD_Handler+0x10>)
   821d6:	210e      	movs	r1, #14
   821d8:	4b02      	ldr	r3, [pc, #8]	; (821e4 <PIOD_Handler+0x14>)
   821da:	4798      	blx	r3
}
   821dc:	bd80      	pop	{r7, pc}
   821de:	bf00      	nop
   821e0:	400e1400 	.word	0x400e1400
   821e4:	000820e5 	.word	0x000820e5

000821e8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   821e8:	b480      	push	{r7}
   821ea:	b085      	sub	sp, #20
   821ec:	af00      	add	r7, sp, #0
   821ee:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   821f0:	4b1d      	ldr	r3, [pc, #116]	; (82268 <pmc_switch_mck_to_pllack+0x80>)
   821f2:	4a1d      	ldr	r2, [pc, #116]	; (82268 <pmc_switch_mck_to_pllack+0x80>)
   821f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
   821f6:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   821fa:	687a      	ldr	r2, [r7, #4]
   821fc:	430a      	orrs	r2, r1
   821fe:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82200:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82204:	60fb      	str	r3, [r7, #12]
   82206:	e007      	b.n	82218 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82208:	68fb      	ldr	r3, [r7, #12]
   8220a:	2b00      	cmp	r3, #0
   8220c:	d101      	bne.n	82212 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8220e:	2301      	movs	r3, #1
   82210:	e023      	b.n	8225a <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82212:	68fb      	ldr	r3, [r7, #12]
   82214:	3b01      	subs	r3, #1
   82216:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82218:	4b13      	ldr	r3, [pc, #76]	; (82268 <pmc_switch_mck_to_pllack+0x80>)
   8221a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8221c:	f003 0308 	and.w	r3, r3, #8
   82220:	2b00      	cmp	r3, #0
   82222:	d0f1      	beq.n	82208 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82224:	4b10      	ldr	r3, [pc, #64]	; (82268 <pmc_switch_mck_to_pllack+0x80>)
   82226:	4a10      	ldr	r2, [pc, #64]	; (82268 <pmc_switch_mck_to_pllack+0x80>)
   82228:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8222a:	f022 0203 	bic.w	r2, r2, #3
   8222e:	f042 0202 	orr.w	r2, r2, #2
   82232:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82234:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82238:	60fb      	str	r3, [r7, #12]
   8223a:	e007      	b.n	8224c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8223c:	68fb      	ldr	r3, [r7, #12]
   8223e:	2b00      	cmp	r3, #0
   82240:	d101      	bne.n	82246 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82242:	2301      	movs	r3, #1
   82244:	e009      	b.n	8225a <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82246:	68fb      	ldr	r3, [r7, #12]
   82248:	3b01      	subs	r3, #1
   8224a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8224c:	4b06      	ldr	r3, [pc, #24]	; (82268 <pmc_switch_mck_to_pllack+0x80>)
   8224e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82250:	f003 0308 	and.w	r3, r3, #8
   82254:	2b00      	cmp	r3, #0
   82256:	d0f1      	beq.n	8223c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82258:	2300      	movs	r3, #0
}
   8225a:	4618      	mov	r0, r3
   8225c:	3714      	adds	r7, #20
   8225e:	46bd      	mov	sp, r7
   82260:	f85d 7b04 	ldr.w	r7, [sp], #4
   82264:	4770      	bx	lr
   82266:	bf00      	nop
   82268:	400e0600 	.word	0x400e0600

0008226c <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8226c:	b480      	push	{r7}
   8226e:	b083      	sub	sp, #12
   82270:	af00      	add	r7, sp, #0
   82272:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82274:	687b      	ldr	r3, [r7, #4]
   82276:	2b01      	cmp	r3, #1
   82278:	d107      	bne.n	8228a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   8227a:	4a0a      	ldr	r2, [pc, #40]	; (822a4 <pmc_switch_sclk_to_32kxtal+0x38>)
   8227c:	4b09      	ldr	r3, [pc, #36]	; (822a4 <pmc_switch_sclk_to_32kxtal+0x38>)
   8227e:	689b      	ldr	r3, [r3, #8]
   82280:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82288:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8228a:	4a06      	ldr	r2, [pc, #24]	; (822a4 <pmc_switch_sclk_to_32kxtal+0x38>)
   8228c:	4b05      	ldr	r3, [pc, #20]	; (822a4 <pmc_switch_sclk_to_32kxtal+0x38>)
   8228e:	681b      	ldr	r3, [r3, #0]
   82290:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82294:	f043 0308 	orr.w	r3, r3, #8
   82298:	6013      	str	r3, [r2, #0]
}
   8229a:	370c      	adds	r7, #12
   8229c:	46bd      	mov	sp, r7
   8229e:	f85d 7b04 	ldr.w	r7, [sp], #4
   822a2:	4770      	bx	lr
   822a4:	400e1a10 	.word	0x400e1a10

000822a8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   822a8:	b480      	push	{r7}
   822aa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   822ac:	4b09      	ldr	r3, [pc, #36]	; (822d4 <pmc_osc_is_ready_32kxtal+0x2c>)
   822ae:	695b      	ldr	r3, [r3, #20]
   822b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   822b4:	2b00      	cmp	r3, #0
   822b6:	d007      	beq.n	822c8 <pmc_osc_is_ready_32kxtal+0x20>
   822b8:	4b07      	ldr	r3, [pc, #28]	; (822d8 <pmc_osc_is_ready_32kxtal+0x30>)
   822ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   822bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   822c0:	2b00      	cmp	r3, #0
   822c2:	d001      	beq.n	822c8 <pmc_osc_is_ready_32kxtal+0x20>
   822c4:	2301      	movs	r3, #1
   822c6:	e000      	b.n	822ca <pmc_osc_is_ready_32kxtal+0x22>
   822c8:	2300      	movs	r3, #0
}
   822ca:	4618      	mov	r0, r3
   822cc:	46bd      	mov	sp, r7
   822ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   822d2:	4770      	bx	lr
   822d4:	400e1a10 	.word	0x400e1a10
   822d8:	400e0600 	.word	0x400e0600

000822dc <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   822dc:	b480      	push	{r7}
   822de:	b085      	sub	sp, #20
   822e0:	af00      	add	r7, sp, #0
   822e2:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   822e4:	2300      	movs	r3, #0
   822e6:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   822e8:	4b21      	ldr	r3, [pc, #132]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   822ea:	6a1b      	ldr	r3, [r3, #32]
   822ec:	f003 0301 	and.w	r3, r3, #1
   822f0:	2b00      	cmp	r3, #0
   822f2:	d00e      	beq.n	82312 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   822f4:	4a1e      	ldr	r2, [pc, #120]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   822f6:	4b1e      	ldr	r3, [pc, #120]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   822f8:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   822fa:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   822fe:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   82302:	6879      	ldr	r1, [r7, #4]
   82304:	430b      	orrs	r3, r1
   82306:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8230a:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8230e:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82310:	e00b      	b.n	8232a <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   82312:	2301      	movs	r3, #1
   82314:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82316:	4a16      	ldr	r2, [pc, #88]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   82318:	4b15      	ldr	r3, [pc, #84]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   8231a:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   8231c:	4b15      	ldr	r3, [pc, #84]	; (82374 <pmc_switch_mainck_to_fastrc+0x98>)
   8231e:	400b      	ands	r3, r1
   82320:	6879      	ldr	r1, [r7, #4]
   82322:	4319      	orrs	r1, r3
   82324:	4b14      	ldr	r3, [pc, #80]	; (82378 <pmc_switch_mainck_to_fastrc+0x9c>)
   82326:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82328:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8232a:	bf00      	nop
   8232c:	4b10      	ldr	r3, [pc, #64]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   8232e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82334:	2b00      	cmp	r3, #0
   82336:	d0f9      	beq.n	8232c <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   82338:	4a0d      	ldr	r2, [pc, #52]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   8233a:	4b0d      	ldr	r3, [pc, #52]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   8233c:	6a1b      	ldr	r3, [r3, #32]
   8233e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82346:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8234a:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   8234c:	68fb      	ldr	r3, [r7, #12]
   8234e:	2b00      	cmp	r3, #0
   82350:	d009      	beq.n	82366 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82352:	4a07      	ldr	r2, [pc, #28]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   82354:	4b06      	ldr	r3, [pc, #24]	; (82370 <pmc_switch_mainck_to_fastrc+0x94>)
   82356:	6a1b      	ldr	r3, [r3, #32]
   82358:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8235c:	f023 0301 	bic.w	r3, r3, #1
   82360:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82364:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   82366:	3714      	adds	r7, #20
   82368:	46bd      	mov	sp, r7
   8236a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8236e:	4770      	bx	lr
   82370:	400e0600 	.word	0x400e0600
   82374:	ffc8c086 	.word	0xffc8c086
   82378:	00373f09 	.word	0x00373f09

0008237c <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   8237c:	b480      	push	{r7}
   8237e:	b083      	sub	sp, #12
   82380:	af00      	add	r7, sp, #0
   82382:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82384:	687b      	ldr	r3, [r7, #4]
   82386:	2b00      	cmp	r3, #0
   82388:	d008      	beq.n	8239c <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8238a:	4912      	ldr	r1, [pc, #72]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   8238c:	4b11      	ldr	r3, [pc, #68]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   8238e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82390:	4a11      	ldr	r2, [pc, #68]	; (823d8 <pmc_switch_mainck_to_xtal+0x5c>)
   82392:	401a      	ands	r2, r3
   82394:	4b11      	ldr	r3, [pc, #68]	; (823dc <pmc_switch_mainck_to_xtal+0x60>)
   82396:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82398:	620b      	str	r3, [r1, #32]
   8239a:	e016      	b.n	823ca <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8239c:	490d      	ldr	r1, [pc, #52]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   8239e:	4b0d      	ldr	r3, [pc, #52]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   823a0:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   823a2:	4a0f      	ldr	r2, [pc, #60]	; (823e0 <pmc_switch_mainck_to_xtal+0x64>)
   823a4:	401a      	ands	r2, r3
   823a6:	4b0f      	ldr	r3, [pc, #60]	; (823e4 <pmc_switch_mainck_to_xtal+0x68>)
   823a8:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   823aa:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   823ac:	bf00      	nop
   823ae:	4b09      	ldr	r3, [pc, #36]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   823b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   823b2:	f003 0301 	and.w	r3, r3, #1
   823b6:	2b00      	cmp	r3, #0
   823b8:	d0f9      	beq.n	823ae <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   823ba:	4a06      	ldr	r2, [pc, #24]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   823bc:	4b05      	ldr	r3, [pc, #20]	; (823d4 <pmc_switch_mainck_to_xtal+0x58>)
   823be:	6a1b      	ldr	r3, [r3, #32]
   823c0:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   823c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   823c8:	6213      	str	r3, [r2, #32]
	}
}
   823ca:	370c      	adds	r7, #12
   823cc:	46bd      	mov	sp, r7
   823ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   823d2:	4770      	bx	lr
   823d4:	400e0600 	.word	0x400e0600
   823d8:	fec8fffc 	.word	0xfec8fffc
   823dc:	01370002 	.word	0x01370002
   823e0:	ffc8c0fc 	.word	0xffc8c0fc
   823e4:	00373f01 	.word	0x00373f01

000823e8 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   823e8:	b480      	push	{r7}
   823ea:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   823ec:	4b04      	ldr	r3, [pc, #16]	; (82400 <pmc_osc_is_ready_mainck+0x18>)
   823ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   823f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   823f4:	4618      	mov	r0, r3
   823f6:	46bd      	mov	sp, r7
   823f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   823fc:	4770      	bx	lr
   823fe:	bf00      	nop
   82400:	400e0600 	.word	0x400e0600

00082404 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82404:	b480      	push	{r7}
   82406:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82408:	4b03      	ldr	r3, [pc, #12]	; (82418 <pmc_disable_pllack+0x14>)
   8240a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8240e:	629a      	str	r2, [r3, #40]	; 0x28
}
   82410:	46bd      	mov	sp, r7
   82412:	f85d 7b04 	ldr.w	r7, [sp], #4
   82416:	4770      	bx	lr
   82418:	400e0600 	.word	0x400e0600

0008241c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8241c:	b480      	push	{r7}
   8241e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82420:	4b04      	ldr	r3, [pc, #16]	; (82434 <pmc_is_locked_pllack+0x18>)
   82422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82424:	f003 0302 	and.w	r3, r3, #2
}
   82428:	4618      	mov	r0, r3
   8242a:	46bd      	mov	sp, r7
   8242c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82430:	4770      	bx	lr
   82432:	bf00      	nop
   82434:	400e0600 	.word	0x400e0600

00082438 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82438:	b480      	push	{r7}
   8243a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8243c:	4b04      	ldr	r3, [pc, #16]	; (82450 <pmc_is_locked_upll+0x18>)
   8243e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82440:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82444:	4618      	mov	r0, r3
   82446:	46bd      	mov	sp, r7
   82448:	f85d 7b04 	ldr.w	r7, [sp], #4
   8244c:	4770      	bx	lr
   8244e:	bf00      	nop
   82450:	400e0600 	.word	0x400e0600

00082454 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82454:	b480      	push	{r7}
   82456:	b083      	sub	sp, #12
   82458:	af00      	add	r7, sp, #0
   8245a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8245c:	687b      	ldr	r3, [r7, #4]
   8245e:	2b2c      	cmp	r3, #44	; 0x2c
   82460:	d901      	bls.n	82466 <pmc_enable_periph_clk+0x12>
		return 1;
   82462:	2301      	movs	r3, #1
   82464:	e02f      	b.n	824c6 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82466:	687b      	ldr	r3, [r7, #4]
   82468:	2b1f      	cmp	r3, #31
   8246a:	d813      	bhi.n	82494 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8246c:	4b19      	ldr	r3, [pc, #100]	; (824d4 <pmc_enable_periph_clk+0x80>)
   8246e:	699a      	ldr	r2, [r3, #24]
   82470:	687b      	ldr	r3, [r7, #4]
   82472:	2101      	movs	r1, #1
   82474:	fa01 f303 	lsl.w	r3, r1, r3
   82478:	401a      	ands	r2, r3
   8247a:	687b      	ldr	r3, [r7, #4]
   8247c:	2101      	movs	r1, #1
   8247e:	fa01 f303 	lsl.w	r3, r1, r3
   82482:	429a      	cmp	r2, r3
   82484:	d01e      	beq.n	824c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82486:	4b13      	ldr	r3, [pc, #76]	; (824d4 <pmc_enable_periph_clk+0x80>)
   82488:	687a      	ldr	r2, [r7, #4]
   8248a:	2101      	movs	r1, #1
   8248c:	fa01 f202 	lsl.w	r2, r1, r2
   82490:	611a      	str	r2, [r3, #16]
   82492:	e017      	b.n	824c4 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   82494:	687b      	ldr	r3, [r7, #4]
   82496:	3b20      	subs	r3, #32
   82498:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8249a:	4b0e      	ldr	r3, [pc, #56]	; (824d4 <pmc_enable_periph_clk+0x80>)
   8249c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   824a0:	687b      	ldr	r3, [r7, #4]
   824a2:	2101      	movs	r1, #1
   824a4:	fa01 f303 	lsl.w	r3, r1, r3
   824a8:	401a      	ands	r2, r3
   824aa:	687b      	ldr	r3, [r7, #4]
   824ac:	2101      	movs	r1, #1
   824ae:	fa01 f303 	lsl.w	r3, r1, r3
   824b2:	429a      	cmp	r2, r3
   824b4:	d006      	beq.n	824c4 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   824b6:	4b07      	ldr	r3, [pc, #28]	; (824d4 <pmc_enable_periph_clk+0x80>)
   824b8:	687a      	ldr	r2, [r7, #4]
   824ba:	2101      	movs	r1, #1
   824bc:	fa01 f202 	lsl.w	r2, r1, r2
   824c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   824c4:	2300      	movs	r3, #0
}
   824c6:	4618      	mov	r0, r3
   824c8:	370c      	adds	r7, #12
   824ca:	46bd      	mov	sp, r7
   824cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   824d0:	4770      	bx	lr
   824d2:	bf00      	nop
   824d4:	400e0600 	.word	0x400e0600

000824d8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   824d8:	b480      	push	{r7}
   824da:	b089      	sub	sp, #36	; 0x24
   824dc:	af00      	add	r7, sp, #0
   824de:	60f8      	str	r0, [r7, #12]
   824e0:	60b9      	str	r1, [r7, #8]
   824e2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   824e4:	68bb      	ldr	r3, [r7, #8]
   824e6:	011a      	lsls	r2, r3, #4
   824e8:	687b      	ldr	r3, [r7, #4]
   824ea:	429a      	cmp	r2, r3
   824ec:	d802      	bhi.n	824f4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   824ee:	2310      	movs	r3, #16
   824f0:	61fb      	str	r3, [r7, #28]
   824f2:	e001      	b.n	824f8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   824f4:	2308      	movs	r3, #8
   824f6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   824f8:	687b      	ldr	r3, [r7, #4]
   824fa:	00da      	lsls	r2, r3, #3
   824fc:	69fb      	ldr	r3, [r7, #28]
   824fe:	68b9      	ldr	r1, [r7, #8]
   82500:	fb01 f303 	mul.w	r3, r1, r3
   82504:	085b      	lsrs	r3, r3, #1
   82506:	441a      	add	r2, r3
   82508:	69fb      	ldr	r3, [r7, #28]
   8250a:	68b9      	ldr	r1, [r7, #8]
   8250c:	fb01 f303 	mul.w	r3, r1, r3
   82510:	fbb2 f3f3 	udiv	r3, r2, r3
   82514:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82516:	69bb      	ldr	r3, [r7, #24]
   82518:	08db      	lsrs	r3, r3, #3
   8251a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8251c:	69bb      	ldr	r3, [r7, #24]
   8251e:	f003 0307 	and.w	r3, r3, #7
   82522:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82524:	697b      	ldr	r3, [r7, #20]
   82526:	2b00      	cmp	r3, #0
   82528:	d003      	beq.n	82532 <usart_set_async_baudrate+0x5a>
   8252a:	697b      	ldr	r3, [r7, #20]
   8252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82530:	d301      	bcc.n	82536 <usart_set_async_baudrate+0x5e>
		return 1;
   82532:	2301      	movs	r3, #1
   82534:	e00f      	b.n	82556 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   82536:	69fb      	ldr	r3, [r7, #28]
   82538:	2b08      	cmp	r3, #8
   8253a:	d105      	bne.n	82548 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   8253c:	68fb      	ldr	r3, [r7, #12]
   8253e:	685b      	ldr	r3, [r3, #4]
   82540:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82544:	68fb      	ldr	r3, [r7, #12]
   82546:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82548:	693b      	ldr	r3, [r7, #16]
   8254a:	041a      	lsls	r2, r3, #16
   8254c:	697b      	ldr	r3, [r7, #20]
   8254e:	431a      	orrs	r2, r3
   82550:	68fb      	ldr	r3, [r7, #12]
   82552:	621a      	str	r2, [r3, #32]

	return 0;
   82554:	2300      	movs	r3, #0
}
   82556:	4618      	mov	r0, r3
   82558:	3724      	adds	r7, #36	; 0x24
   8255a:	46bd      	mov	sp, r7
   8255c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82560:	4770      	bx	lr
   82562:	bf00      	nop

00082564 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82564:	b580      	push	{r7, lr}
   82566:	b082      	sub	sp, #8
   82568:	af00      	add	r7, sp, #0
   8256a:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   8256c:	6878      	ldr	r0, [r7, #4]
   8256e:	4b0d      	ldr	r3, [pc, #52]	; (825a4 <usart_reset+0x40>)
   82570:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82572:	687b      	ldr	r3, [r7, #4]
   82574:	2200      	movs	r2, #0
   82576:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82578:	687b      	ldr	r3, [r7, #4]
   8257a:	2200      	movs	r2, #0
   8257c:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8257e:	687b      	ldr	r3, [r7, #4]
   82580:	2200      	movs	r2, #0
   82582:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   82584:	6878      	ldr	r0, [r7, #4]
   82586:	4b08      	ldr	r3, [pc, #32]	; (825a8 <usart_reset+0x44>)
   82588:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8258a:	6878      	ldr	r0, [r7, #4]
   8258c:	4b07      	ldr	r3, [pc, #28]	; (825ac <usart_reset+0x48>)
   8258e:	4798      	blx	r3
	usart_reset_status(p_usart);
   82590:	6878      	ldr	r0, [r7, #4]
   82592:	4b07      	ldr	r3, [pc, #28]	; (825b0 <usart_reset+0x4c>)
   82594:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   82596:	6878      	ldr	r0, [r7, #4]
   82598:	4b06      	ldr	r3, [pc, #24]	; (825b4 <usart_reset+0x50>)
   8259a:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   8259c:	3708      	adds	r7, #8
   8259e:	46bd      	mov	sp, r7
   825a0:	bd80      	pop	{r7, pc}
   825a2:	bf00      	nop
   825a4:	000827a1 	.word	0x000827a1
   825a8:	00082655 	.word	0x00082655
   825ac:	00082685 	.word	0x00082685
   825b0:	000826ed 	.word	0x000826ed
   825b4:	00082709 	.word	0x00082709

000825b8 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   825b8:	b580      	push	{r7, lr}
   825ba:	b084      	sub	sp, #16
   825bc:	af00      	add	r7, sp, #0
   825be:	60f8      	str	r0, [r7, #12]
   825c0:	60b9      	str	r1, [r7, #8]
   825c2:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   825c4:	68f8      	ldr	r0, [r7, #12]
   825c6:	4b1a      	ldr	r3, [pc, #104]	; (82630 <usart_init_rs232+0x78>)
   825c8:	4798      	blx	r3

	ul_reg_val = 0;
   825ca:	4b1a      	ldr	r3, [pc, #104]	; (82634 <usart_init_rs232+0x7c>)
   825cc:	2200      	movs	r2, #0
   825ce:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   825d0:	68bb      	ldr	r3, [r7, #8]
   825d2:	2b00      	cmp	r3, #0
   825d4:	d009      	beq.n	825ea <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   825d6:	68bb      	ldr	r3, [r7, #8]
   825d8:	681b      	ldr	r3, [r3, #0]
   825da:	68f8      	ldr	r0, [r7, #12]
   825dc:	4619      	mov	r1, r3
   825de:	687a      	ldr	r2, [r7, #4]
   825e0:	4b15      	ldr	r3, [pc, #84]	; (82638 <usart_init_rs232+0x80>)
   825e2:	4798      	blx	r3
   825e4:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   825e6:	2b00      	cmp	r3, #0
   825e8:	d001      	beq.n	825ee <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   825ea:	2301      	movs	r3, #1
   825ec:	e01b      	b.n	82626 <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   825ee:	68bb      	ldr	r3, [r7, #8]
   825f0:	685a      	ldr	r2, [r3, #4]
   825f2:	68bb      	ldr	r3, [r7, #8]
   825f4:	689b      	ldr	r3, [r3, #8]
   825f6:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   825f8:	68bb      	ldr	r3, [r7, #8]
   825fa:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   825fc:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   825fe:	68bb      	ldr	r3, [r7, #8]
   82600:	68db      	ldr	r3, [r3, #12]
   82602:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82604:	4b0b      	ldr	r3, [pc, #44]	; (82634 <usart_init_rs232+0x7c>)
   82606:	681b      	ldr	r3, [r3, #0]
   82608:	431a      	orrs	r2, r3
   8260a:	4b0a      	ldr	r3, [pc, #40]	; (82634 <usart_init_rs232+0x7c>)
   8260c:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8260e:	4b09      	ldr	r3, [pc, #36]	; (82634 <usart_init_rs232+0x7c>)
   82610:	681a      	ldr	r2, [r3, #0]
   82612:	4b08      	ldr	r3, [pc, #32]	; (82634 <usart_init_rs232+0x7c>)
   82614:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   82616:	68fb      	ldr	r3, [r7, #12]
   82618:	685a      	ldr	r2, [r3, #4]
   8261a:	4b06      	ldr	r3, [pc, #24]	; (82634 <usart_init_rs232+0x7c>)
   8261c:	681b      	ldr	r3, [r3, #0]
   8261e:	431a      	orrs	r2, r3
   82620:	68fb      	ldr	r3, [r7, #12]
   82622:	605a      	str	r2, [r3, #4]
	
	return 0;
   82624:	2300      	movs	r3, #0
}
   82626:	4618      	mov	r0, r3
   82628:	3710      	adds	r7, #16
   8262a:	46bd      	mov	sp, r7
   8262c:	bd80      	pop	{r7, pc}
   8262e:	bf00      	nop
   82630:	00082565 	.word	0x00082565
   82634:	2007054c 	.word	0x2007054c
   82638:	000824d9 	.word	0x000824d9

0008263c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   8263c:	b480      	push	{r7}
   8263e:	b083      	sub	sp, #12
   82640:	af00      	add	r7, sp, #0
   82642:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82644:	687b      	ldr	r3, [r7, #4]
   82646:	2240      	movs	r2, #64	; 0x40
   82648:	601a      	str	r2, [r3, #0]
}
   8264a:	370c      	adds	r7, #12
   8264c:	46bd      	mov	sp, r7
   8264e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82652:	4770      	bx	lr

00082654 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82654:	b480      	push	{r7}
   82656:	b083      	sub	sp, #12
   82658:	af00      	add	r7, sp, #0
   8265a:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8265c:	687b      	ldr	r3, [r7, #4]
   8265e:	2288      	movs	r2, #136	; 0x88
   82660:	601a      	str	r2, [r3, #0]
}
   82662:	370c      	adds	r7, #12
   82664:	46bd      	mov	sp, r7
   82666:	f85d 7b04 	ldr.w	r7, [sp], #4
   8266a:	4770      	bx	lr

0008266c <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   8266c:	b480      	push	{r7}
   8266e:	b083      	sub	sp, #12
   82670:	af00      	add	r7, sp, #0
   82672:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82674:	687b      	ldr	r3, [r7, #4]
   82676:	2210      	movs	r2, #16
   82678:	601a      	str	r2, [r3, #0]
}
   8267a:	370c      	adds	r7, #12
   8267c:	46bd      	mov	sp, r7
   8267e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82682:	4770      	bx	lr

00082684 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82684:	b480      	push	{r7}
   82686:	b083      	sub	sp, #12
   82688:	af00      	add	r7, sp, #0
   8268a:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8268c:	687b      	ldr	r3, [r7, #4]
   8268e:	2224      	movs	r2, #36	; 0x24
   82690:	601a      	str	r2, [r3, #0]
}
   82692:	370c      	adds	r7, #12
   82694:	46bd      	mov	sp, r7
   82696:	f85d 7b04 	ldr.w	r7, [sp], #4
   8269a:	4770      	bx	lr

0008269c <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   8269c:	b480      	push	{r7}
   8269e:	b083      	sub	sp, #12
   826a0:	af00      	add	r7, sp, #0
   826a2:	6078      	str	r0, [r7, #4]
   826a4:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   826a6:	687b      	ldr	r3, [r7, #4]
   826a8:	683a      	ldr	r2, [r7, #0]
   826aa:	609a      	str	r2, [r3, #8]
}
   826ac:	370c      	adds	r7, #12
   826ae:	46bd      	mov	sp, r7
   826b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   826b4:	4770      	bx	lr
   826b6:	bf00      	nop

000826b8 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   826b8:	b480      	push	{r7}
   826ba:	b083      	sub	sp, #12
   826bc:	af00      	add	r7, sp, #0
   826be:	6078      	str	r0, [r7, #4]
   826c0:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   826c2:	687b      	ldr	r3, [r7, #4]
   826c4:	683a      	ldr	r2, [r7, #0]
   826c6:	60da      	str	r2, [r3, #12]
}
   826c8:	370c      	adds	r7, #12
   826ca:	46bd      	mov	sp, r7
   826cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   826d0:	4770      	bx	lr
   826d2:	bf00      	nop

000826d4 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   826d4:	b480      	push	{r7}
   826d6:	b083      	sub	sp, #12
   826d8:	af00      	add	r7, sp, #0
   826da:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   826dc:	687b      	ldr	r3, [r7, #4]
   826de:	695b      	ldr	r3, [r3, #20]
}
   826e0:	4618      	mov	r0, r3
   826e2:	370c      	adds	r7, #12
   826e4:	46bd      	mov	sp, r7
   826e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   826ea:	4770      	bx	lr

000826ec <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   826ec:	b480      	push	{r7}
   826ee:	b083      	sub	sp, #12
   826f0:	af00      	add	r7, sp, #0
   826f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   826f4:	687b      	ldr	r3, [r7, #4]
   826f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   826fa:	601a      	str	r2, [r3, #0]
}
   826fc:	370c      	adds	r7, #12
   826fe:	46bd      	mov	sp, r7
   82700:	f85d 7b04 	ldr.w	r7, [sp], #4
   82704:	4770      	bx	lr
   82706:	bf00      	nop

00082708 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82708:	b480      	push	{r7}
   8270a:	b083      	sub	sp, #12
   8270c:	af00      	add	r7, sp, #0
   8270e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82710:	687b      	ldr	r3, [r7, #4]
   82712:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82716:	601a      	str	r2, [r3, #0]
}
   82718:	370c      	adds	r7, #12
   8271a:	46bd      	mov	sp, r7
   8271c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82720:	4770      	bx	lr
   82722:	bf00      	nop

00082724 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82724:	b480      	push	{r7}
   82726:	b083      	sub	sp, #12
   82728:	af00      	add	r7, sp, #0
   8272a:	6078      	str	r0, [r7, #4]
   8272c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8272e:	687b      	ldr	r3, [r7, #4]
   82730:	695b      	ldr	r3, [r3, #20]
   82732:	f003 0302 	and.w	r3, r3, #2
   82736:	2b00      	cmp	r3, #0
   82738:	d101      	bne.n	8273e <usart_write+0x1a>
		return 1;
   8273a:	2301      	movs	r3, #1
   8273c:	e005      	b.n	8274a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8273e:	683b      	ldr	r3, [r7, #0]
   82740:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82744:	687b      	ldr	r3, [r7, #4]
   82746:	61da      	str	r2, [r3, #28]
	return 0;
   82748:	2300      	movs	r3, #0
}
   8274a:	4618      	mov	r0, r3
   8274c:	370c      	adds	r7, #12
   8274e:	46bd      	mov	sp, r7
   82750:	f85d 7b04 	ldr.w	r7, [sp], #4
   82754:	4770      	bx	lr
   82756:	bf00      	nop

00082758 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   82758:	b480      	push	{r7}
   8275a:	b085      	sub	sp, #20
   8275c:	af00      	add	r7, sp, #0
   8275e:	6078      	str	r0, [r7, #4]
   82760:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   82766:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82768:	e006      	b.n	82778 <usart_getchar+0x20>
		if (!timeout--) {
   8276a:	68fb      	ldr	r3, [r7, #12]
   8276c:	1e5a      	subs	r2, r3, #1
   8276e:	60fa      	str	r2, [r7, #12]
   82770:	2b00      	cmp	r3, #0
   82772:	d101      	bne.n	82778 <usart_getchar+0x20>
			return 1;
   82774:	2301      	movs	r3, #1
   82776:	e00c      	b.n	82792 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82778:	687b      	ldr	r3, [r7, #4]
   8277a:	695b      	ldr	r3, [r3, #20]
   8277c:	f003 0301 	and.w	r3, r3, #1
   82780:	2b00      	cmp	r3, #0
   82782:	d0f2      	beq.n	8276a <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82784:	687b      	ldr	r3, [r7, #4]
   82786:	699b      	ldr	r3, [r3, #24]
   82788:	f3c3 0208 	ubfx	r2, r3, #0, #9
   8278c:	683b      	ldr	r3, [r7, #0]
   8278e:	601a      	str	r2, [r3, #0]

	return 0;
   82790:	2300      	movs	r3, #0
}
   82792:	4618      	mov	r0, r3
   82794:	3714      	adds	r7, #20
   82796:	46bd      	mov	sp, r7
   82798:	f85d 7b04 	ldr.w	r7, [sp], #4
   8279c:	4770      	bx	lr
   8279e:	bf00      	nop

000827a0 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   827a0:	b480      	push	{r7}
   827a2:	b083      	sub	sp, #12
   827a4:	af00      	add	r7, sp, #0
   827a6:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   827a8:	687b      	ldr	r3, [r7, #4]
   827aa:	4a04      	ldr	r2, [pc, #16]	; (827bc <usart_disable_writeprotect+0x1c>)
   827ac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   827b0:	370c      	adds	r7, #12
   827b2:	46bd      	mov	sp, r7
   827b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   827b8:	4770      	bx	lr
   827ba:	bf00      	nop
   827bc:	55534100 	.word	0x55534100

000827c0 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   827c0:	b480      	push	{r7}
   827c2:	b083      	sub	sp, #12
   827c4:	af00      	add	r7, sp, #0
   827c6:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   827c8:	687a      	ldr	r2, [r7, #4]
   827ca:	4b05      	ldr	r3, [pc, #20]	; (827e0 <wdt_restart+0x20>)
   827cc:	429a      	cmp	r2, r3
   827ce:	d102      	bne.n	827d6 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   827d0:	687b      	ldr	r3, [r7, #4]
   827d2:	4a04      	ldr	r2, [pc, #16]	; (827e4 <wdt_restart+0x24>)
   827d4:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   827d6:	370c      	adds	r7, #12
   827d8:	46bd      	mov	sp, r7
   827da:	f85d 7b04 	ldr.w	r7, [sp], #4
   827de:	4770      	bx	lr
   827e0:	400e1a50 	.word	0x400e1a50
   827e4:	a5000001 	.word	0xa5000001

000827e8 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   827e8:	b480      	push	{r7}
   827ea:	b083      	sub	sp, #12
   827ec:	af00      	add	r7, sp, #0
   827ee:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   827f0:	687b      	ldr	r3, [r7, #4]
   827f2:	689b      	ldr	r3, [r3, #8]
}
   827f4:	4618      	mov	r0, r3
   827f6:	370c      	adds	r7, #12
   827f8:	46bd      	mov	sp, r7
   827fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   827fe:	4770      	bx	lr

00082800 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82800:	b480      	push	{r7}
   82802:	af00      	add	r7, sp, #0
	while (1) {
	}
   82804:	e7fe      	b.n	82804 <Dummy_Handler+0x4>
   82806:	bf00      	nop

00082808 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82808:	b580      	push	{r7, lr}
   8280a:	b082      	sub	sp, #8
   8280c:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8280e:	4b1e      	ldr	r3, [pc, #120]	; (82888 <Reset_Handler+0x80>)
   82810:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82812:	4b1e      	ldr	r3, [pc, #120]	; (8288c <Reset_Handler+0x84>)
   82814:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82816:	687a      	ldr	r2, [r7, #4]
   82818:	683b      	ldr	r3, [r7, #0]
   8281a:	429a      	cmp	r2, r3
   8281c:	d00c      	beq.n	82838 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8281e:	e007      	b.n	82830 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82820:	683b      	ldr	r3, [r7, #0]
   82822:	1d1a      	adds	r2, r3, #4
   82824:	603a      	str	r2, [r7, #0]
   82826:	687a      	ldr	r2, [r7, #4]
   82828:	1d11      	adds	r1, r2, #4
   8282a:	6079      	str	r1, [r7, #4]
   8282c:	6812      	ldr	r2, [r2, #0]
   8282e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82830:	683a      	ldr	r2, [r7, #0]
   82832:	4b17      	ldr	r3, [pc, #92]	; (82890 <Reset_Handler+0x88>)
   82834:	429a      	cmp	r2, r3
   82836:	d3f3      	bcc.n	82820 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82838:	4b16      	ldr	r3, [pc, #88]	; (82894 <Reset_Handler+0x8c>)
   8283a:	603b      	str	r3, [r7, #0]
   8283c:	e004      	b.n	82848 <Reset_Handler+0x40>
		*pDest++ = 0;
   8283e:	683b      	ldr	r3, [r7, #0]
   82840:	1d1a      	adds	r2, r3, #4
   82842:	603a      	str	r2, [r7, #0]
   82844:	2200      	movs	r2, #0
   82846:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82848:	683a      	ldr	r2, [r7, #0]
   8284a:	4b13      	ldr	r3, [pc, #76]	; (82898 <Reset_Handler+0x90>)
   8284c:	429a      	cmp	r2, r3
   8284e:	d3f6      	bcc.n	8283e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82850:	4b12      	ldr	r3, [pc, #72]	; (8289c <Reset_Handler+0x94>)
   82852:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82854:	4a12      	ldr	r2, [pc, #72]	; (828a0 <Reset_Handler+0x98>)
   82856:	687b      	ldr	r3, [r7, #4]
   82858:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8285c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82860:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82862:	687b      	ldr	r3, [r7, #4]
   82864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82868:	d309      	bcc.n	8287e <Reset_Handler+0x76>
   8286a:	687a      	ldr	r2, [r7, #4]
   8286c:	4b0d      	ldr	r3, [pc, #52]	; (828a4 <Reset_Handler+0x9c>)
   8286e:	429a      	cmp	r2, r3
   82870:	d805      	bhi.n	8287e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82872:	4b0b      	ldr	r3, [pc, #44]	; (828a0 <Reset_Handler+0x98>)
   82874:	4a0a      	ldr	r2, [pc, #40]	; (828a0 <Reset_Handler+0x98>)
   82876:	6892      	ldr	r2, [r2, #8]
   82878:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8287c:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8287e:	4b0a      	ldr	r3, [pc, #40]	; (828a8 <Reset_Handler+0xa0>)
   82880:	4798      	blx	r3

	/* Branch to main function */
	main();
   82882:	4b0a      	ldr	r3, [pc, #40]	; (828ac <Reset_Handler+0xa4>)
   82884:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82886:	e7fe      	b.n	82886 <Reset_Handler+0x7e>
   82888:	0008697c 	.word	0x0008697c
   8288c:	20070000 	.word	0x20070000
   82890:	20070438 	.word	0x20070438
   82894:	20070438 	.word	0x20070438
   82898:	2007a788 	.word	0x2007a788
   8289c:	00080000 	.word	0x00080000
   828a0:	e000ed00 	.word	0xe000ed00
   828a4:	200fffff 	.word	0x200fffff
   828a8:	00086495 	.word	0x00086495
   828ac:	00085c8d 	.word	0x00085c8d

000828b0 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   828b0:	b480      	push	{r7}
   828b2:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   828b4:	4b56      	ldr	r3, [pc, #344]	; (82a10 <SystemCoreClockUpdate+0x160>)
   828b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   828b8:	f003 0303 	and.w	r3, r3, #3
   828bc:	2b03      	cmp	r3, #3
   828be:	f200 808a 	bhi.w	829d6 <SystemCoreClockUpdate+0x126>
   828c2:	a101      	add	r1, pc, #4	; (adr r1, 828c8 <SystemCoreClockUpdate+0x18>)
   828c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   828c8:	000828d9 	.word	0x000828d9
   828cc:	000828f9 	.word	0x000828f9
   828d0:	00082949 	.word	0x00082949
   828d4:	00082949 	.word	0x00082949
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   828d8:	4b4e      	ldr	r3, [pc, #312]	; (82a14 <SystemCoreClockUpdate+0x164>)
   828da:	695b      	ldr	r3, [r3, #20]
   828dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   828e0:	2b00      	cmp	r3, #0
   828e2:	d004      	beq.n	828ee <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   828e4:	4b4c      	ldr	r3, [pc, #304]	; (82a18 <SystemCoreClockUpdate+0x168>)
   828e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   828ea:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   828ec:	e073      	b.n	829d6 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   828ee:	4b4a      	ldr	r3, [pc, #296]	; (82a18 <SystemCoreClockUpdate+0x168>)
   828f0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   828f4:	601a      	str	r2, [r3, #0]
		}
		break;
   828f6:	e06e      	b.n	829d6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   828f8:	4b45      	ldr	r3, [pc, #276]	; (82a10 <SystemCoreClockUpdate+0x160>)
   828fa:	6a1b      	ldr	r3, [r3, #32]
   828fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82900:	2b00      	cmp	r3, #0
   82902:	d003      	beq.n	8290c <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82904:	4b44      	ldr	r3, [pc, #272]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82906:	4a45      	ldr	r2, [pc, #276]	; (82a1c <SystemCoreClockUpdate+0x16c>)
   82908:	601a      	str	r2, [r3, #0]
   8290a:	e01c      	b.n	82946 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8290c:	4b42      	ldr	r3, [pc, #264]	; (82a18 <SystemCoreClockUpdate+0x168>)
   8290e:	4a44      	ldr	r2, [pc, #272]	; (82a20 <SystemCoreClockUpdate+0x170>)
   82910:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82912:	4b3f      	ldr	r3, [pc, #252]	; (82a10 <SystemCoreClockUpdate+0x160>)
   82914:	6a1b      	ldr	r3, [r3, #32]
   82916:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8291a:	2b10      	cmp	r3, #16
   8291c:	d004      	beq.n	82928 <SystemCoreClockUpdate+0x78>
   8291e:	2b20      	cmp	r3, #32
   82920:	d008      	beq.n	82934 <SystemCoreClockUpdate+0x84>
   82922:	2b00      	cmp	r3, #0
   82924:	d00e      	beq.n	82944 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82926:	e00e      	b.n	82946 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82928:	4b3b      	ldr	r3, [pc, #236]	; (82a18 <SystemCoreClockUpdate+0x168>)
   8292a:	681b      	ldr	r3, [r3, #0]
   8292c:	005a      	lsls	r2, r3, #1
   8292e:	4b3a      	ldr	r3, [pc, #232]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82930:	601a      	str	r2, [r3, #0]
				break;
   82932:	e008      	b.n	82946 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82934:	4b38      	ldr	r3, [pc, #224]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82936:	681a      	ldr	r2, [r3, #0]
   82938:	4613      	mov	r3, r2
   8293a:	005b      	lsls	r3, r3, #1
   8293c:	441a      	add	r2, r3
   8293e:	4b36      	ldr	r3, [pc, #216]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82940:	601a      	str	r2, [r3, #0]
				break;
   82942:	e000      	b.n	82946 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82944:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   82946:	e046      	b.n	829d6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82948:	4b31      	ldr	r3, [pc, #196]	; (82a10 <SystemCoreClockUpdate+0x160>)
   8294a:	6a1b      	ldr	r3, [r3, #32]
   8294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82950:	2b00      	cmp	r3, #0
   82952:	d003      	beq.n	8295c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82954:	4b30      	ldr	r3, [pc, #192]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82956:	4a31      	ldr	r2, [pc, #196]	; (82a1c <SystemCoreClockUpdate+0x16c>)
   82958:	601a      	str	r2, [r3, #0]
   8295a:	e01c      	b.n	82996 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8295c:	4b2e      	ldr	r3, [pc, #184]	; (82a18 <SystemCoreClockUpdate+0x168>)
   8295e:	4a30      	ldr	r2, [pc, #192]	; (82a20 <SystemCoreClockUpdate+0x170>)
   82960:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82962:	4b2b      	ldr	r3, [pc, #172]	; (82a10 <SystemCoreClockUpdate+0x160>)
   82964:	6a1b      	ldr	r3, [r3, #32]
   82966:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8296a:	2b10      	cmp	r3, #16
   8296c:	d004      	beq.n	82978 <SystemCoreClockUpdate+0xc8>
   8296e:	2b20      	cmp	r3, #32
   82970:	d008      	beq.n	82984 <SystemCoreClockUpdate+0xd4>
   82972:	2b00      	cmp	r3, #0
   82974:	d00e      	beq.n	82994 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82976:	e00e      	b.n	82996 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82978:	4b27      	ldr	r3, [pc, #156]	; (82a18 <SystemCoreClockUpdate+0x168>)
   8297a:	681b      	ldr	r3, [r3, #0]
   8297c:	005a      	lsls	r2, r3, #1
   8297e:	4b26      	ldr	r3, [pc, #152]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82980:	601a      	str	r2, [r3, #0]
				break;
   82982:	e008      	b.n	82996 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82984:	4b24      	ldr	r3, [pc, #144]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82986:	681a      	ldr	r2, [r3, #0]
   82988:	4613      	mov	r3, r2
   8298a:	005b      	lsls	r3, r3, #1
   8298c:	441a      	add	r2, r3
   8298e:	4b22      	ldr	r3, [pc, #136]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82990:	601a      	str	r2, [r3, #0]
				break;
   82992:	e000      	b.n	82996 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82994:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82996:	4b1e      	ldr	r3, [pc, #120]	; (82a10 <SystemCoreClockUpdate+0x160>)
   82998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8299a:	f003 0303 	and.w	r3, r3, #3
   8299e:	2b02      	cmp	r3, #2
   829a0:	d115      	bne.n	829ce <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829a2:	4b1b      	ldr	r3, [pc, #108]	; (82a10 <SystemCoreClockUpdate+0x160>)
   829a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   829a6:	4b1f      	ldr	r3, [pc, #124]	; (82a24 <SystemCoreClockUpdate+0x174>)
   829a8:	4013      	ands	r3, r2
   829aa:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   829ac:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829ae:	4a1a      	ldr	r2, [pc, #104]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829b0:	6812      	ldr	r2, [r2, #0]
   829b2:	fb02 f203 	mul.w	r2, r2, r3
   829b6:	4b18      	ldr	r3, [pc, #96]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829b8:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   829ba:	4b17      	ldr	r3, [pc, #92]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829bc:	681a      	ldr	r2, [r3, #0]
   829be:	4b14      	ldr	r3, [pc, #80]	; (82a10 <SystemCoreClockUpdate+0x160>)
   829c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   829c2:	b2db      	uxtb	r3, r3
   829c4:	fbb2 f2f3 	udiv	r2, r2, r3
   829c8:	4b13      	ldr	r3, [pc, #76]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829ca:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   829cc:	e002      	b.n	829d4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   829ce:	4b12      	ldr	r3, [pc, #72]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829d0:	4a15      	ldr	r2, [pc, #84]	; (82a28 <SystemCoreClockUpdate+0x178>)
   829d2:	601a      	str	r2, [r3, #0]
		}
		break;
   829d4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   829d6:	4b0e      	ldr	r3, [pc, #56]	; (82a10 <SystemCoreClockUpdate+0x160>)
   829d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829da:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829de:	2b70      	cmp	r3, #112	; 0x70
   829e0:	d108      	bne.n	829f4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   829e2:	4b0d      	ldr	r3, [pc, #52]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829e4:	681a      	ldr	r2, [r3, #0]
   829e6:	4b11      	ldr	r3, [pc, #68]	; (82a2c <SystemCoreClockUpdate+0x17c>)
   829e8:	fba3 1302 	umull	r1, r3, r3, r2
   829ec:	085a      	lsrs	r2, r3, #1
   829ee:	4b0a      	ldr	r3, [pc, #40]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829f0:	601a      	str	r2, [r3, #0]
   829f2:	e009      	b.n	82a08 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   829f4:	4b08      	ldr	r3, [pc, #32]	; (82a18 <SystemCoreClockUpdate+0x168>)
   829f6:	681a      	ldr	r2, [r3, #0]
   829f8:	4b05      	ldr	r3, [pc, #20]	; (82a10 <SystemCoreClockUpdate+0x160>)
   829fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a00:	091b      	lsrs	r3, r3, #4
   82a02:	40da      	lsrs	r2, r3
   82a04:	4b04      	ldr	r3, [pc, #16]	; (82a18 <SystemCoreClockUpdate+0x168>)
   82a06:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82a08:	46bd      	mov	sp, r7
   82a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a0e:	4770      	bx	lr
   82a10:	400e0600 	.word	0x400e0600
   82a14:	400e1a10 	.word	0x400e1a10
   82a18:	20070004 	.word	0x20070004
   82a1c:	00b71b00 	.word	0x00b71b00
   82a20:	003d0900 	.word	0x003d0900
   82a24:	07ff0000 	.word	0x07ff0000
   82a28:	0e4e1c00 	.word	0x0e4e1c00
   82a2c:	aaaaaaab 	.word	0xaaaaaaab

00082a30 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82a30:	b480      	push	{r7}
   82a32:	b083      	sub	sp, #12
   82a34:	af00      	add	r7, sp, #0
   82a36:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82a38:	687a      	ldr	r2, [r7, #4]
   82a3a:	4b1f      	ldr	r3, [pc, #124]	; (82ab8 <system_init_flash+0x88>)
   82a3c:	429a      	cmp	r2, r3
   82a3e:	d806      	bhi.n	82a4e <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82a40:	4b1e      	ldr	r3, [pc, #120]	; (82abc <system_init_flash+0x8c>)
   82a42:	2200      	movs	r2, #0
   82a44:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82a46:	4b1e      	ldr	r3, [pc, #120]	; (82ac0 <system_init_flash+0x90>)
   82a48:	2200      	movs	r2, #0
   82a4a:	601a      	str	r2, [r3, #0]
   82a4c:	e02e      	b.n	82aac <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82a4e:	687a      	ldr	r2, [r7, #4]
   82a50:	4b1c      	ldr	r3, [pc, #112]	; (82ac4 <system_init_flash+0x94>)
   82a52:	429a      	cmp	r2, r3
   82a54:	d808      	bhi.n	82a68 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82a56:	4b19      	ldr	r3, [pc, #100]	; (82abc <system_init_flash+0x8c>)
   82a58:	f44f 7280 	mov.w	r2, #256	; 0x100
   82a5c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82a5e:	4b18      	ldr	r3, [pc, #96]	; (82ac0 <system_init_flash+0x90>)
   82a60:	f44f 7280 	mov.w	r2, #256	; 0x100
   82a64:	601a      	str	r2, [r3, #0]
   82a66:	e021      	b.n	82aac <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82a68:	687a      	ldr	r2, [r7, #4]
   82a6a:	4b17      	ldr	r3, [pc, #92]	; (82ac8 <system_init_flash+0x98>)
   82a6c:	429a      	cmp	r2, r3
   82a6e:	d808      	bhi.n	82a82 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82a70:	4b12      	ldr	r3, [pc, #72]	; (82abc <system_init_flash+0x8c>)
   82a72:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a76:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82a78:	4b11      	ldr	r3, [pc, #68]	; (82ac0 <system_init_flash+0x90>)
   82a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a7e:	601a      	str	r2, [r3, #0]
   82a80:	e014      	b.n	82aac <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82a82:	687a      	ldr	r2, [r7, #4]
   82a84:	4b11      	ldr	r3, [pc, #68]	; (82acc <system_init_flash+0x9c>)
   82a86:	429a      	cmp	r2, r3
   82a88:	d808      	bhi.n	82a9c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82a8a:	4b0c      	ldr	r3, [pc, #48]	; (82abc <system_init_flash+0x8c>)
   82a8c:	f44f 7240 	mov.w	r2, #768	; 0x300
   82a90:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82a92:	4b0b      	ldr	r3, [pc, #44]	; (82ac0 <system_init_flash+0x90>)
   82a94:	f44f 7240 	mov.w	r2, #768	; 0x300
   82a98:	601a      	str	r2, [r3, #0]
   82a9a:	e007      	b.n	82aac <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82a9c:	4b07      	ldr	r3, [pc, #28]	; (82abc <system_init_flash+0x8c>)
   82a9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82aa2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82aa4:	4b06      	ldr	r3, [pc, #24]	; (82ac0 <system_init_flash+0x90>)
   82aa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82aaa:	601a      	str	r2, [r3, #0]
	}
}
   82aac:	370c      	adds	r7, #12
   82aae:	46bd      	mov	sp, r7
   82ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ab4:	4770      	bx	lr
   82ab6:	bf00      	nop
   82ab8:	0157529f 	.word	0x0157529f
   82abc:	400e0a00 	.word	0x400e0a00
   82ac0:	400e0c00 	.word	0x400e0c00
   82ac4:	0206cc7f 	.word	0x0206cc7f
   82ac8:	0328b73f 	.word	0x0328b73f
   82acc:	04a62f7f 	.word	0x04a62f7f

00082ad0 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82ad0:	b480      	push	{r7}
   82ad2:	b083      	sub	sp, #12
   82ad4:	af00      	add	r7, sp, #0
   82ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82ad8:	687b      	ldr	r3, [r7, #4]
   82ada:	f103 0208 	add.w	r2, r3, #8
   82ade:	687b      	ldr	r3, [r7, #4]
   82ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82ae2:	687b      	ldr	r3, [r7, #4]
   82ae4:	f04f 32ff 	mov.w	r2, #4294967295
   82ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82aea:	687b      	ldr	r3, [r7, #4]
   82aec:	f103 0208 	add.w	r2, r3, #8
   82af0:	687b      	ldr	r3, [r7, #4]
   82af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82af4:	687b      	ldr	r3, [r7, #4]
   82af6:	f103 0208 	add.w	r2, r3, #8
   82afa:	687b      	ldr	r3, [r7, #4]
   82afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82afe:	687b      	ldr	r3, [r7, #4]
   82b00:	2200      	movs	r2, #0
   82b02:	601a      	str	r2, [r3, #0]
}
   82b04:	370c      	adds	r7, #12
   82b06:	46bd      	mov	sp, r7
   82b08:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b0c:	4770      	bx	lr
   82b0e:	bf00      	nop

00082b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   82b10:	b480      	push	{r7}
   82b12:	b083      	sub	sp, #12
   82b14:	af00      	add	r7, sp, #0
   82b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   82b18:	687b      	ldr	r3, [r7, #4]
   82b1a:	2200      	movs	r2, #0
   82b1c:	611a      	str	r2, [r3, #16]
}
   82b1e:	370c      	adds	r7, #12
   82b20:	46bd      	mov	sp, r7
   82b22:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b26:	4770      	bx	lr

00082b28 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82b28:	b480      	push	{r7}
   82b2a:	b085      	sub	sp, #20
   82b2c:	af00      	add	r7, sp, #0
   82b2e:	6078      	str	r0, [r7, #4]
   82b30:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82b32:	687b      	ldr	r3, [r7, #4]
   82b34:	685b      	ldr	r3, [r3, #4]
   82b36:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82b38:	683b      	ldr	r3, [r7, #0]
   82b3a:	68fa      	ldr	r2, [r7, #12]
   82b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   82b3e:	68fb      	ldr	r3, [r7, #12]
   82b40:	689a      	ldr	r2, [r3, #8]
   82b42:	683b      	ldr	r3, [r7, #0]
   82b44:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82b46:	68fb      	ldr	r3, [r7, #12]
   82b48:	689b      	ldr	r3, [r3, #8]
   82b4a:	683a      	ldr	r2, [r7, #0]
   82b4c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   82b4e:	68fb      	ldr	r3, [r7, #12]
   82b50:	683a      	ldr	r2, [r7, #0]
   82b52:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82b54:	683b      	ldr	r3, [r7, #0]
   82b56:	687a      	ldr	r2, [r7, #4]
   82b58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82b5a:	687b      	ldr	r3, [r7, #4]
   82b5c:	681b      	ldr	r3, [r3, #0]
   82b5e:	1c5a      	adds	r2, r3, #1
   82b60:	687b      	ldr	r3, [r7, #4]
   82b62:	601a      	str	r2, [r3, #0]
}
   82b64:	3714      	adds	r7, #20
   82b66:	46bd      	mov	sp, r7
   82b68:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b6c:	4770      	bx	lr
   82b6e:	bf00      	nop

00082b70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82b70:	b480      	push	{r7}
   82b72:	b085      	sub	sp, #20
   82b74:	af00      	add	r7, sp, #0
   82b76:	6078      	str	r0, [r7, #4]
   82b78:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   82b7a:	683b      	ldr	r3, [r7, #0]
   82b7c:	681b      	ldr	r3, [r3, #0]
   82b7e:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82b80:	68bb      	ldr	r3, [r7, #8]
   82b82:	f1b3 3fff 	cmp.w	r3, #4294967295
   82b86:	d103      	bne.n	82b90 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   82b88:	687b      	ldr	r3, [r7, #4]
   82b8a:	691b      	ldr	r3, [r3, #16]
   82b8c:	60fb      	str	r3, [r7, #12]
   82b8e:	e00c      	b.n	82baa <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b90:	687b      	ldr	r3, [r7, #4]
   82b92:	3308      	adds	r3, #8
   82b94:	60fb      	str	r3, [r7, #12]
   82b96:	e002      	b.n	82b9e <vListInsert+0x2e>
   82b98:	68fb      	ldr	r3, [r7, #12]
   82b9a:	685b      	ldr	r3, [r3, #4]
   82b9c:	60fb      	str	r3, [r7, #12]
   82b9e:	68fb      	ldr	r3, [r7, #12]
   82ba0:	685b      	ldr	r3, [r3, #4]
   82ba2:	681a      	ldr	r2, [r3, #0]
   82ba4:	68bb      	ldr	r3, [r7, #8]
   82ba6:	429a      	cmp	r2, r3
   82ba8:	d9f6      	bls.n	82b98 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   82baa:	68fb      	ldr	r3, [r7, #12]
   82bac:	685a      	ldr	r2, [r3, #4]
   82bae:	683b      	ldr	r3, [r7, #0]
   82bb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82bb2:	683b      	ldr	r3, [r7, #0]
   82bb4:	685b      	ldr	r3, [r3, #4]
   82bb6:	683a      	ldr	r2, [r7, #0]
   82bb8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   82bba:	683b      	ldr	r3, [r7, #0]
   82bbc:	68fa      	ldr	r2, [r7, #12]
   82bbe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82bc0:	68fb      	ldr	r3, [r7, #12]
   82bc2:	683a      	ldr	r2, [r7, #0]
   82bc4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82bc6:	683b      	ldr	r3, [r7, #0]
   82bc8:	687a      	ldr	r2, [r7, #4]
   82bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82bcc:	687b      	ldr	r3, [r7, #4]
   82bce:	681b      	ldr	r3, [r3, #0]
   82bd0:	1c5a      	adds	r2, r3, #1
   82bd2:	687b      	ldr	r3, [r7, #4]
   82bd4:	601a      	str	r2, [r3, #0]
}
   82bd6:	3714      	adds	r7, #20
   82bd8:	46bd      	mov	sp, r7
   82bda:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bde:	4770      	bx	lr

00082be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82be0:	b480      	push	{r7}
   82be2:	b085      	sub	sp, #20
   82be4:	af00      	add	r7, sp, #0
   82be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82be8:	687b      	ldr	r3, [r7, #4]
   82bea:	691b      	ldr	r3, [r3, #16]
   82bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82bee:	687b      	ldr	r3, [r7, #4]
   82bf0:	685b      	ldr	r3, [r3, #4]
   82bf2:	687a      	ldr	r2, [r7, #4]
   82bf4:	6892      	ldr	r2, [r2, #8]
   82bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82bf8:	687b      	ldr	r3, [r7, #4]
   82bfa:	689b      	ldr	r3, [r3, #8]
   82bfc:	687a      	ldr	r2, [r7, #4]
   82bfe:	6852      	ldr	r2, [r2, #4]
   82c00:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82c02:	68fb      	ldr	r3, [r7, #12]
   82c04:	685a      	ldr	r2, [r3, #4]
   82c06:	687b      	ldr	r3, [r7, #4]
   82c08:	429a      	cmp	r2, r3
   82c0a:	d103      	bne.n	82c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82c0c:	687b      	ldr	r3, [r7, #4]
   82c0e:	689a      	ldr	r2, [r3, #8]
   82c10:	68fb      	ldr	r3, [r7, #12]
   82c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82c14:	687b      	ldr	r3, [r7, #4]
   82c16:	2200      	movs	r2, #0
   82c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82c1a:	68fb      	ldr	r3, [r7, #12]
   82c1c:	681b      	ldr	r3, [r3, #0]
   82c1e:	1e5a      	subs	r2, r3, #1
   82c20:	68fb      	ldr	r3, [r7, #12]
   82c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82c24:	68fb      	ldr	r3, [r7, #12]
   82c26:	681b      	ldr	r3, [r3, #0]
}
   82c28:	4618      	mov	r0, r3
   82c2a:	3714      	adds	r7, #20
   82c2c:	46bd      	mov	sp, r7
   82c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c32:	4770      	bx	lr

00082c34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   82c34:	b480      	push	{r7}
   82c36:	b085      	sub	sp, #20
   82c38:	af00      	add	r7, sp, #0
   82c3a:	60f8      	str	r0, [r7, #12]
   82c3c:	60b9      	str	r1, [r7, #8]
   82c3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   82c40:	68fb      	ldr	r3, [r7, #12]
   82c42:	3b04      	subs	r3, #4
   82c44:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   82c46:	68fb      	ldr	r3, [r7, #12]
   82c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   82c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82c4e:	68fb      	ldr	r3, [r7, #12]
   82c50:	3b04      	subs	r3, #4
   82c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   82c54:	68ba      	ldr	r2, [r7, #8]
   82c56:	68fb      	ldr	r3, [r7, #12]
   82c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82c5a:	68fb      	ldr	r3, [r7, #12]
   82c5c:	3b04      	subs	r3, #4
   82c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   82c60:	4a09      	ldr	r2, [pc, #36]	; (82c88 <pxPortInitialiseStack+0x54>)
   82c62:	68fb      	ldr	r3, [r7, #12]
   82c64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   82c66:	68fb      	ldr	r3, [r7, #12]
   82c68:	3b14      	subs	r3, #20
   82c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   82c6c:	687a      	ldr	r2, [r7, #4]
   82c6e:	68fb      	ldr	r3, [r7, #12]
   82c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   82c72:	68fb      	ldr	r3, [r7, #12]
   82c74:	3b20      	subs	r3, #32
   82c76:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   82c78:	68fb      	ldr	r3, [r7, #12]
}
   82c7a:	4618      	mov	r0, r3
   82c7c:	3714      	adds	r7, #20
   82c7e:	46bd      	mov	sp, r7
   82c80:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c84:	4770      	bx	lr
   82c86:	bf00      	nop
   82c88:	00082c8d 	.word	0x00082c8d

00082c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   82c8c:	b580      	push	{r7, lr}
   82c8e:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82c90:	4b05      	ldr	r3, [pc, #20]	; (82ca8 <prvTaskExitError+0x1c>)
   82c92:	681b      	ldr	r3, [r3, #0]
   82c94:	f1b3 3fff 	cmp.w	r3, #4294967295
   82c98:	d002      	beq.n	82ca0 <prvTaskExitError+0x14>
   82c9a:	4b04      	ldr	r3, [pc, #16]	; (82cac <prvTaskExitError+0x20>)
   82c9c:	4798      	blx	r3
   82c9e:	e7fe      	b.n	82c9e <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82ca0:	4b02      	ldr	r3, [pc, #8]	; (82cac <prvTaskExitError+0x20>)
   82ca2:	4798      	blx	r3
	for( ;; );
   82ca4:	e7fe      	b.n	82ca4 <prvTaskExitError+0x18>
   82ca6:	bf00      	nop
   82ca8:	20070008 	.word	0x20070008
   82cac:	00082e59 	.word	0x00082e59

00082cb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82cb0:	4b07      	ldr	r3, [pc, #28]	; (82cd0 <pxCurrentTCBConst2>)
   82cb2:	6819      	ldr	r1, [r3, #0]
   82cb4:	6808      	ldr	r0, [r1, #0]
   82cb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82cba:	f380 8809 	msr	PSP, r0
   82cbe:	f3bf 8f6f 	isb	sy
   82cc2:	f04f 0000 	mov.w	r0, #0
   82cc6:	f380 8811 	msr	BASEPRI, r0
   82cca:	f04e 0e0d 	orr.w	lr, lr, #13
   82cce:	4770      	bx	lr

00082cd0 <pxCurrentTCBConst2>:
   82cd0:	2007a570 	.word	0x2007a570

00082cd4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   82cd4:	4806      	ldr	r0, [pc, #24]	; (82cf0 <prvPortStartFirstTask+0x1c>)
   82cd6:	6800      	ldr	r0, [r0, #0]
   82cd8:	6800      	ldr	r0, [r0, #0]
   82cda:	f380 8808 	msr	MSP, r0
   82cde:	b662      	cpsie	i
   82ce0:	b661      	cpsie	f
   82ce2:	f3bf 8f4f 	dsb	sy
   82ce6:	f3bf 8f6f 	isb	sy
   82cea:	df00      	svc	0
   82cec:	bf00      	nop
   82cee:	0000      	.short	0x0000
   82cf0:	e000ed08 	.word	0xe000ed08

00082cf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   82cf4:	b580      	push	{r7, lr}
   82cf6:	b084      	sub	sp, #16
   82cf8:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   82cfa:	4b28      	ldr	r3, [pc, #160]	; (82d9c <xPortStartScheduler+0xa8>)
   82cfc:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   82cfe:	68fb      	ldr	r3, [r7, #12]
   82d00:	781b      	ldrb	r3, [r3, #0]
   82d02:	b2db      	uxtb	r3, r3
   82d04:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   82d06:	68fb      	ldr	r3, [r7, #12]
   82d08:	22ff      	movs	r2, #255	; 0xff
   82d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   82d0c:	68fb      	ldr	r3, [r7, #12]
   82d0e:	781b      	ldrb	r3, [r3, #0]
   82d10:	b2db      	uxtb	r3, r3
   82d12:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   82d14:	79fb      	ldrb	r3, [r7, #7]
   82d16:	b2db      	uxtb	r3, r3
   82d18:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   82d1c:	b2da      	uxtb	r2, r3
   82d1e:	4b20      	ldr	r3, [pc, #128]	; (82da0 <xPortStartScheduler+0xac>)
   82d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   82d22:	4b20      	ldr	r3, [pc, #128]	; (82da4 <xPortStartScheduler+0xb0>)
   82d24:	2207      	movs	r2, #7
   82d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82d28:	e009      	b.n	82d3e <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   82d2a:	4b1e      	ldr	r3, [pc, #120]	; (82da4 <xPortStartScheduler+0xb0>)
   82d2c:	681b      	ldr	r3, [r3, #0]
   82d2e:	1e5a      	subs	r2, r3, #1
   82d30:	4b1c      	ldr	r3, [pc, #112]	; (82da4 <xPortStartScheduler+0xb0>)
   82d32:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   82d34:	79fb      	ldrb	r3, [r7, #7]
   82d36:	b2db      	uxtb	r3, r3
   82d38:	005b      	lsls	r3, r3, #1
   82d3a:	b2db      	uxtb	r3, r3
   82d3c:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82d3e:	79fb      	ldrb	r3, [r7, #7]
   82d40:	b2db      	uxtb	r3, r3
   82d42:	b2db      	uxtb	r3, r3
   82d44:	b25b      	sxtb	r3, r3
   82d46:	2b00      	cmp	r3, #0
   82d48:	dbef      	blt.n	82d2a <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   82d4a:	4b16      	ldr	r3, [pc, #88]	; (82da4 <xPortStartScheduler+0xb0>)
   82d4c:	681b      	ldr	r3, [r3, #0]
   82d4e:	021a      	lsls	r2, r3, #8
   82d50:	4b14      	ldr	r3, [pc, #80]	; (82da4 <xPortStartScheduler+0xb0>)
   82d52:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   82d54:	4b13      	ldr	r3, [pc, #76]	; (82da4 <xPortStartScheduler+0xb0>)
   82d56:	681b      	ldr	r3, [r3, #0]
   82d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82d5c:	4b11      	ldr	r3, [pc, #68]	; (82da4 <xPortStartScheduler+0xb0>)
   82d5e:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   82d60:	68bb      	ldr	r3, [r7, #8]
   82d62:	b2da      	uxtb	r2, r3
   82d64:	68fb      	ldr	r3, [r7, #12]
   82d66:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   82d68:	4b0f      	ldr	r3, [pc, #60]	; (82da8 <xPortStartScheduler+0xb4>)
   82d6a:	4a0f      	ldr	r2, [pc, #60]	; (82da8 <xPortStartScheduler+0xb4>)
   82d6c:	6812      	ldr	r2, [r2, #0]
   82d6e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   82d72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   82d74:	4b0c      	ldr	r3, [pc, #48]	; (82da8 <xPortStartScheduler+0xb4>)
   82d76:	4a0c      	ldr	r2, [pc, #48]	; (82da8 <xPortStartScheduler+0xb4>)
   82d78:	6812      	ldr	r2, [r2, #0]
   82d7a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   82d7e:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82d80:	4b0a      	ldr	r3, [pc, #40]	; (82dac <xPortStartScheduler+0xb8>)
   82d82:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82d84:	4b0a      	ldr	r3, [pc, #40]	; (82db0 <xPortStartScheduler+0xbc>)
   82d86:	2200      	movs	r2, #0
   82d88:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   82d8a:	4b0a      	ldr	r3, [pc, #40]	; (82db4 <xPortStartScheduler+0xc0>)
   82d8c:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   82d8e:	4b0a      	ldr	r3, [pc, #40]	; (82db8 <xPortStartScheduler+0xc4>)
   82d90:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   82d92:	2300      	movs	r3, #0
}
   82d94:	4618      	mov	r0, r3
   82d96:	3710      	adds	r7, #16
   82d98:	46bd      	mov	sp, r7
   82d9a:	bd80      	pop	{r7, pc}
   82d9c:	e000e400 	.word	0xe000e400
   82da0:	20070550 	.word	0x20070550
   82da4:	20070554 	.word	0x20070554
   82da8:	e000ed20 	.word	0xe000ed20
   82dac:	00082eed 	.word	0x00082eed
   82db0:	20070008 	.word	0x20070008
   82db4:	00082cd5 	.word	0x00082cd5
   82db8:	00082c8d 	.word	0x00082c8d

00082dbc <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   82dbc:	b480      	push	{r7}
   82dbe:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82dc0:	4b05      	ldr	r3, [pc, #20]	; (82dd8 <vPortYield+0x1c>)
   82dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82dc6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   82dc8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82dcc:	f3bf 8f6f 	isb	sy
}
   82dd0:	46bd      	mov	sp, r7
   82dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dd6:	4770      	bx	lr
   82dd8:	e000ed04 	.word	0xe000ed04

00082ddc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82ddc:	b580      	push	{r7, lr}
   82dde:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   82de0:	4b0c      	ldr	r3, [pc, #48]	; (82e14 <vPortEnterCritical+0x38>)
   82de2:	4798      	blx	r3
	uxCriticalNesting++;
   82de4:	4b0c      	ldr	r3, [pc, #48]	; (82e18 <vPortEnterCritical+0x3c>)
   82de6:	681b      	ldr	r3, [r3, #0]
   82de8:	1c5a      	adds	r2, r3, #1
   82dea:	4b0b      	ldr	r3, [pc, #44]	; (82e18 <vPortEnterCritical+0x3c>)
   82dec:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   82dee:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82df2:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   82df6:	4b08      	ldr	r3, [pc, #32]	; (82e18 <vPortEnterCritical+0x3c>)
   82df8:	681b      	ldr	r3, [r3, #0]
   82dfa:	2b01      	cmp	r3, #1
   82dfc:	d108      	bne.n	82e10 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   82dfe:	4b07      	ldr	r3, [pc, #28]	; (82e1c <vPortEnterCritical+0x40>)
   82e00:	681b      	ldr	r3, [r3, #0]
   82e02:	f003 031f 	and.w	r3, r3, #31
   82e06:	2b00      	cmp	r3, #0
   82e08:	d002      	beq.n	82e10 <vPortEnterCritical+0x34>
   82e0a:	4b02      	ldr	r3, [pc, #8]	; (82e14 <vPortEnterCritical+0x38>)
   82e0c:	4798      	blx	r3
   82e0e:	e7fe      	b.n	82e0e <vPortEnterCritical+0x32>
	}
}
   82e10:	bd80      	pop	{r7, pc}
   82e12:	bf00      	nop
   82e14:	00082e59 	.word	0x00082e59
   82e18:	20070008 	.word	0x20070008
   82e1c:	e000ed04 	.word	0xe000ed04

00082e20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82e20:	b580      	push	{r7, lr}
   82e22:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   82e24:	4b09      	ldr	r3, [pc, #36]	; (82e4c <vPortExitCritical+0x2c>)
   82e26:	681b      	ldr	r3, [r3, #0]
   82e28:	2b00      	cmp	r3, #0
   82e2a:	d102      	bne.n	82e32 <vPortExitCritical+0x12>
   82e2c:	4b08      	ldr	r3, [pc, #32]	; (82e50 <vPortExitCritical+0x30>)
   82e2e:	4798      	blx	r3
   82e30:	e7fe      	b.n	82e30 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   82e32:	4b06      	ldr	r3, [pc, #24]	; (82e4c <vPortExitCritical+0x2c>)
   82e34:	681b      	ldr	r3, [r3, #0]
   82e36:	1e5a      	subs	r2, r3, #1
   82e38:	4b04      	ldr	r3, [pc, #16]	; (82e4c <vPortExitCritical+0x2c>)
   82e3a:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   82e3c:	4b03      	ldr	r3, [pc, #12]	; (82e4c <vPortExitCritical+0x2c>)
   82e3e:	681b      	ldr	r3, [r3, #0]
   82e40:	2b00      	cmp	r3, #0
   82e42:	d102      	bne.n	82e4a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   82e44:	2000      	movs	r0, #0
   82e46:	4b03      	ldr	r3, [pc, #12]	; (82e54 <vPortExitCritical+0x34>)
   82e48:	4798      	blx	r3
	}
}
   82e4a:	bd80      	pop	{r7, pc}
   82e4c:	20070008 	.word	0x20070008
   82e50:	00082e59 	.word	0x00082e59
   82e54:	00082e6d 	.word	0x00082e6d

00082e58 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82e58:	f3ef 8011 	mrs	r0, BASEPRI
   82e5c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82e60:	f381 8811 	msr	BASEPRI, r1
   82e64:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   82e66:	2300      	movs	r3, #0
}
   82e68:	4618      	mov	r0, r3
   82e6a:	bf00      	nop

00082e6c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   82e6c:	f380 8811 	msr	BASEPRI, r0
   82e70:	4770      	bx	lr
   82e72:	bf00      	nop

00082e74 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   82e74:	f3ef 8009 	mrs	r0, PSP
   82e78:	f3bf 8f6f 	isb	sy
   82e7c:	4b0d      	ldr	r3, [pc, #52]	; (82eb4 <pxCurrentTCBConst>)
   82e7e:	681a      	ldr	r2, [r3, #0]
   82e80:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82e84:	6010      	str	r0, [r2, #0]
   82e86:	e92d 4008 	stmdb	sp!, {r3, lr}
   82e8a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82e8e:	f380 8811 	msr	BASEPRI, r0
   82e92:	f001 f98d 	bl	841b0 <vTaskSwitchContext>
   82e96:	f04f 0000 	mov.w	r0, #0
   82e9a:	f380 8811 	msr	BASEPRI, r0
   82e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82ea2:	6819      	ldr	r1, [r3, #0]
   82ea4:	6808      	ldr	r0, [r1, #0]
   82ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82eaa:	f380 8809 	msr	PSP, r0
   82eae:	f3bf 8f6f 	isb	sy
   82eb2:	4770      	bx	lr

00082eb4 <pxCurrentTCBConst>:
   82eb4:	2007a570 	.word	0x2007a570

00082eb8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   82eb8:	b580      	push	{r7, lr}
   82eba:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82ebc:	4b07      	ldr	r3, [pc, #28]	; (82edc <SysTick_Handler+0x24>)
   82ebe:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82ec0:	4b07      	ldr	r3, [pc, #28]	; (82ee0 <SysTick_Handler+0x28>)
   82ec2:	4798      	blx	r3
   82ec4:	4603      	mov	r3, r0
   82ec6:	2b00      	cmp	r3, #0
   82ec8:	d003      	beq.n	82ed2 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82eca:	4b06      	ldr	r3, [pc, #24]	; (82ee4 <SysTick_Handler+0x2c>)
   82ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82ed0:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   82ed2:	2000      	movs	r0, #0
   82ed4:	4b04      	ldr	r3, [pc, #16]	; (82ee8 <SysTick_Handler+0x30>)
   82ed6:	4798      	blx	r3
}
   82ed8:	bd80      	pop	{r7, pc}
   82eda:	bf00      	nop
   82edc:	00082e59 	.word	0x00082e59
   82ee0:	00084035 	.word	0x00084035
   82ee4:	e000ed04 	.word	0xe000ed04
   82ee8:	00082e6d 	.word	0x00082e6d

00082eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   82eec:	b480      	push	{r7}
   82eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   82ef0:	4b07      	ldr	r3, [pc, #28]	; (82f10 <vPortSetupTimerInterrupt+0x24>)
   82ef2:	4a08      	ldr	r2, [pc, #32]	; (82f14 <vPortSetupTimerInterrupt+0x28>)
   82ef4:	6811      	ldr	r1, [r2, #0]
   82ef6:	4a08      	ldr	r2, [pc, #32]	; (82f18 <vPortSetupTimerInterrupt+0x2c>)
   82ef8:	fba2 0201 	umull	r0, r2, r2, r1
   82efc:	08d2      	lsrs	r2, r2, #3
   82efe:	3a01      	subs	r2, #1
   82f00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   82f02:	4b06      	ldr	r3, [pc, #24]	; (82f1c <vPortSetupTimerInterrupt+0x30>)
   82f04:	2207      	movs	r2, #7
   82f06:	601a      	str	r2, [r3, #0]
}
   82f08:	46bd      	mov	sp, r7
   82f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f0e:	4770      	bx	lr
   82f10:	e000e014 	.word	0xe000e014
   82f14:	20070004 	.word	0x20070004
   82f18:	cccccccd 	.word	0xcccccccd
   82f1c:	e000e010 	.word	0xe000e010

00082f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   82f20:	b580      	push	{r7, lr}
   82f22:	b082      	sub	sp, #8
   82f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   82f26:	f3ef 8305 	mrs	r3, IPSR
   82f2a:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   82f2c:	687b      	ldr	r3, [r7, #4]
   82f2e:	2b0f      	cmp	r3, #15
   82f30:	d90c      	bls.n	82f4c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   82f32:	4a0d      	ldr	r2, [pc, #52]	; (82f68 <vPortValidateInterruptPriority+0x48>)
   82f34:	687b      	ldr	r3, [r7, #4]
   82f36:	4413      	add	r3, r2
   82f38:	781b      	ldrb	r3, [r3, #0]
   82f3a:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   82f3c:	4b0b      	ldr	r3, [pc, #44]	; (82f6c <vPortValidateInterruptPriority+0x4c>)
   82f3e:	781b      	ldrb	r3, [r3, #0]
   82f40:	78fa      	ldrb	r2, [r7, #3]
   82f42:	429a      	cmp	r2, r3
   82f44:	d202      	bcs.n	82f4c <vPortValidateInterruptPriority+0x2c>
   82f46:	4b0a      	ldr	r3, [pc, #40]	; (82f70 <vPortValidateInterruptPriority+0x50>)
   82f48:	4798      	blx	r3
   82f4a:	e7fe      	b.n	82f4a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   82f4c:	4b09      	ldr	r3, [pc, #36]	; (82f74 <vPortValidateInterruptPriority+0x54>)
   82f4e:	681b      	ldr	r3, [r3, #0]
   82f50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82f54:	4b08      	ldr	r3, [pc, #32]	; (82f78 <vPortValidateInterruptPriority+0x58>)
   82f56:	681b      	ldr	r3, [r3, #0]
   82f58:	429a      	cmp	r2, r3
   82f5a:	d902      	bls.n	82f62 <vPortValidateInterruptPriority+0x42>
   82f5c:	4b04      	ldr	r3, [pc, #16]	; (82f70 <vPortValidateInterruptPriority+0x50>)
   82f5e:	4798      	blx	r3
   82f60:	e7fe      	b.n	82f60 <vPortValidateInterruptPriority+0x40>
	}
   82f62:	3708      	adds	r7, #8
   82f64:	46bd      	mov	sp, r7
   82f66:	bd80      	pop	{r7, pc}
   82f68:	e000e3f0 	.word	0xe000e3f0
   82f6c:	20070550 	.word	0x20070550
   82f70:	00082e59 	.word	0x00082e59
   82f74:	e000ed0c 	.word	0xe000ed0c
   82f78:	20070554 	.word	0x20070554

00082f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   82f7c:	b580      	push	{r7, lr}
   82f7e:	b086      	sub	sp, #24
   82f80:	af00      	add	r7, sp, #0
   82f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82f84:	2300      	movs	r3, #0
   82f86:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   82f88:	4b4f      	ldr	r3, [pc, #316]	; (830c8 <pvPortMalloc+0x14c>)
   82f8a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   82f8c:	4b4f      	ldr	r3, [pc, #316]	; (830cc <pvPortMalloc+0x150>)
   82f8e:	681b      	ldr	r3, [r3, #0]
   82f90:	2b00      	cmp	r3, #0
   82f92:	d101      	bne.n	82f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   82f94:	4b4e      	ldr	r3, [pc, #312]	; (830d0 <pvPortMalloc+0x154>)
   82f96:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   82f98:	4b4e      	ldr	r3, [pc, #312]	; (830d4 <pvPortMalloc+0x158>)
   82f9a:	681a      	ldr	r2, [r3, #0]
   82f9c:	687b      	ldr	r3, [r7, #4]
   82f9e:	4013      	ands	r3, r2
   82fa0:	2b00      	cmp	r3, #0
   82fa2:	d17d      	bne.n	830a0 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   82fa4:	687b      	ldr	r3, [r7, #4]
   82fa6:	2b00      	cmp	r3, #0
   82fa8:	d015      	beq.n	82fd6 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   82faa:	2308      	movs	r3, #8
   82fac:	687a      	ldr	r2, [r7, #4]
   82fae:	4413      	add	r3, r2
   82fb0:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   82fb2:	687b      	ldr	r3, [r7, #4]
   82fb4:	f003 0307 	and.w	r3, r3, #7
   82fb8:	2b00      	cmp	r3, #0
   82fba:	d00c      	beq.n	82fd6 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   82fbc:	687b      	ldr	r3, [r7, #4]
   82fbe:	f023 0307 	bic.w	r3, r3, #7
   82fc2:	3308      	adds	r3, #8
   82fc4:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   82fc6:	687b      	ldr	r3, [r7, #4]
   82fc8:	f003 0307 	and.w	r3, r3, #7
   82fcc:	2b00      	cmp	r3, #0
   82fce:	d002      	beq.n	82fd6 <pvPortMalloc+0x5a>
   82fd0:	4b41      	ldr	r3, [pc, #260]	; (830d8 <pvPortMalloc+0x15c>)
   82fd2:	4798      	blx	r3
   82fd4:	e7fe      	b.n	82fd4 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   82fd6:	687b      	ldr	r3, [r7, #4]
   82fd8:	2b00      	cmp	r3, #0
   82fda:	d061      	beq.n	830a0 <pvPortMalloc+0x124>
   82fdc:	4b3f      	ldr	r3, [pc, #252]	; (830dc <pvPortMalloc+0x160>)
   82fde:	681b      	ldr	r3, [r3, #0]
   82fe0:	687a      	ldr	r2, [r7, #4]
   82fe2:	429a      	cmp	r2, r3
   82fe4:	d85c      	bhi.n	830a0 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   82fe6:	4b3e      	ldr	r3, [pc, #248]	; (830e0 <pvPortMalloc+0x164>)
   82fe8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   82fea:	4b3d      	ldr	r3, [pc, #244]	; (830e0 <pvPortMalloc+0x164>)
   82fec:	681b      	ldr	r3, [r3, #0]
   82fee:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82ff0:	e004      	b.n	82ffc <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   82ff2:	697b      	ldr	r3, [r7, #20]
   82ff4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   82ff6:	697b      	ldr	r3, [r7, #20]
   82ff8:	681b      	ldr	r3, [r3, #0]
   82ffa:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82ffc:	697b      	ldr	r3, [r7, #20]
   82ffe:	685a      	ldr	r2, [r3, #4]
   83000:	687b      	ldr	r3, [r7, #4]
   83002:	429a      	cmp	r2, r3
   83004:	d203      	bcs.n	8300e <pvPortMalloc+0x92>
   83006:	697b      	ldr	r3, [r7, #20]
   83008:	681b      	ldr	r3, [r3, #0]
   8300a:	2b00      	cmp	r3, #0
   8300c:	d1f1      	bne.n	82ff2 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   8300e:	4b2f      	ldr	r3, [pc, #188]	; (830cc <pvPortMalloc+0x150>)
   83010:	681b      	ldr	r3, [r3, #0]
   83012:	697a      	ldr	r2, [r7, #20]
   83014:	429a      	cmp	r2, r3
   83016:	d043      	beq.n	830a0 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   83018:	693b      	ldr	r3, [r7, #16]
   8301a:	681a      	ldr	r2, [r3, #0]
   8301c:	2308      	movs	r3, #8
   8301e:	4413      	add	r3, r2
   83020:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   83022:	697b      	ldr	r3, [r7, #20]
   83024:	681a      	ldr	r2, [r3, #0]
   83026:	693b      	ldr	r3, [r7, #16]
   83028:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8302a:	697b      	ldr	r3, [r7, #20]
   8302c:	685a      	ldr	r2, [r3, #4]
   8302e:	687b      	ldr	r3, [r7, #4]
   83030:	1ad2      	subs	r2, r2, r3
   83032:	2308      	movs	r3, #8
   83034:	005b      	lsls	r3, r3, #1
   83036:	429a      	cmp	r2, r3
   83038:	d917      	bls.n	8306a <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   8303a:	697a      	ldr	r2, [r7, #20]
   8303c:	687b      	ldr	r3, [r7, #4]
   8303e:	4413      	add	r3, r2
   83040:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   83042:	68bb      	ldr	r3, [r7, #8]
   83044:	f003 0307 	and.w	r3, r3, #7
   83048:	2b00      	cmp	r3, #0
   8304a:	d002      	beq.n	83052 <pvPortMalloc+0xd6>
   8304c:	4b22      	ldr	r3, [pc, #136]	; (830d8 <pvPortMalloc+0x15c>)
   8304e:	4798      	blx	r3
   83050:	e7fe      	b.n	83050 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   83052:	697b      	ldr	r3, [r7, #20]
   83054:	685a      	ldr	r2, [r3, #4]
   83056:	687b      	ldr	r3, [r7, #4]
   83058:	1ad2      	subs	r2, r2, r3
   8305a:	68bb      	ldr	r3, [r7, #8]
   8305c:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   8305e:	697b      	ldr	r3, [r7, #20]
   83060:	687a      	ldr	r2, [r7, #4]
   83062:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   83064:	68b8      	ldr	r0, [r7, #8]
   83066:	4b1f      	ldr	r3, [pc, #124]	; (830e4 <pvPortMalloc+0x168>)
   83068:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   8306a:	4b1c      	ldr	r3, [pc, #112]	; (830dc <pvPortMalloc+0x160>)
   8306c:	681a      	ldr	r2, [r3, #0]
   8306e:	697b      	ldr	r3, [r7, #20]
   83070:	685b      	ldr	r3, [r3, #4]
   83072:	1ad2      	subs	r2, r2, r3
   83074:	4b19      	ldr	r3, [pc, #100]	; (830dc <pvPortMalloc+0x160>)
   83076:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   83078:	4b18      	ldr	r3, [pc, #96]	; (830dc <pvPortMalloc+0x160>)
   8307a:	681a      	ldr	r2, [r3, #0]
   8307c:	4b1a      	ldr	r3, [pc, #104]	; (830e8 <pvPortMalloc+0x16c>)
   8307e:	681b      	ldr	r3, [r3, #0]
   83080:	429a      	cmp	r2, r3
   83082:	d203      	bcs.n	8308c <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   83084:	4b15      	ldr	r3, [pc, #84]	; (830dc <pvPortMalloc+0x160>)
   83086:	681a      	ldr	r2, [r3, #0]
   83088:	4b17      	ldr	r3, [pc, #92]	; (830e8 <pvPortMalloc+0x16c>)
   8308a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   8308c:	697b      	ldr	r3, [r7, #20]
   8308e:	685a      	ldr	r2, [r3, #4]
   83090:	4b10      	ldr	r3, [pc, #64]	; (830d4 <pvPortMalloc+0x158>)
   83092:	681b      	ldr	r3, [r3, #0]
   83094:	431a      	orrs	r2, r3
   83096:	697b      	ldr	r3, [r7, #20]
   83098:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   8309a:	697b      	ldr	r3, [r7, #20]
   8309c:	2200      	movs	r2, #0
   8309e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   830a0:	4b12      	ldr	r3, [pc, #72]	; (830ec <pvPortMalloc+0x170>)
   830a2:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   830a4:	68fb      	ldr	r3, [r7, #12]
   830a6:	2b00      	cmp	r3, #0
   830a8:	d101      	bne.n	830ae <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   830aa:	4b11      	ldr	r3, [pc, #68]	; (830f0 <pvPortMalloc+0x174>)
   830ac:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   830ae:	68fb      	ldr	r3, [r7, #12]
   830b0:	f003 0307 	and.w	r3, r3, #7
   830b4:	2b00      	cmp	r3, #0
   830b6:	d002      	beq.n	830be <pvPortMalloc+0x142>
   830b8:	4b07      	ldr	r3, [pc, #28]	; (830d8 <pvPortMalloc+0x15c>)
   830ba:	4798      	blx	r3
   830bc:	e7fe      	b.n	830bc <pvPortMalloc+0x140>
	return pvReturn;
   830be:	68fb      	ldr	r3, [r7, #12]
}
   830c0:	4618      	mov	r0, r3
   830c2:	3718      	adds	r7, #24
   830c4:	46bd      	mov	sp, r7
   830c6:	bd80      	pop	{r7, pc}
   830c8:	00083ec9 	.word	0x00083ec9
   830cc:	2007a560 	.word	0x2007a560
   830d0:	00083199 	.word	0x00083199
   830d4:	2007a56c 	.word	0x2007a56c
   830d8:	00082e59 	.word	0x00082e59
   830dc:	2007a564 	.word	0x2007a564
   830e0:	2007a558 	.word	0x2007a558
   830e4:	0008325d 	.word	0x0008325d
   830e8:	2007a568 	.word	0x2007a568
   830ec:	00083ee5 	.word	0x00083ee5
   830f0:	00085db1 	.word	0x00085db1

000830f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   830f4:	b580      	push	{r7, lr}
   830f6:	b084      	sub	sp, #16
   830f8:	af00      	add	r7, sp, #0
   830fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   830fc:	687b      	ldr	r3, [r7, #4]
   830fe:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   83100:	687b      	ldr	r3, [r7, #4]
   83102:	2b00      	cmp	r3, #0
   83104:	d038      	beq.n	83178 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   83106:	2308      	movs	r3, #8
   83108:	425b      	negs	r3, r3
   8310a:	68fa      	ldr	r2, [r7, #12]
   8310c:	4413      	add	r3, r2
   8310e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   83110:	68fb      	ldr	r3, [r7, #12]
   83112:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   83114:	68bb      	ldr	r3, [r7, #8]
   83116:	685a      	ldr	r2, [r3, #4]
   83118:	4b19      	ldr	r3, [pc, #100]	; (83180 <vPortFree+0x8c>)
   8311a:	681b      	ldr	r3, [r3, #0]
   8311c:	4013      	ands	r3, r2
   8311e:	2b00      	cmp	r3, #0
   83120:	d102      	bne.n	83128 <vPortFree+0x34>
   83122:	4b18      	ldr	r3, [pc, #96]	; (83184 <vPortFree+0x90>)
   83124:	4798      	blx	r3
   83126:	e7fe      	b.n	83126 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   83128:	68bb      	ldr	r3, [r7, #8]
   8312a:	681b      	ldr	r3, [r3, #0]
   8312c:	2b00      	cmp	r3, #0
   8312e:	d002      	beq.n	83136 <vPortFree+0x42>
   83130:	4b14      	ldr	r3, [pc, #80]	; (83184 <vPortFree+0x90>)
   83132:	4798      	blx	r3
   83134:	e7fe      	b.n	83134 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   83136:	68bb      	ldr	r3, [r7, #8]
   83138:	685a      	ldr	r2, [r3, #4]
   8313a:	4b11      	ldr	r3, [pc, #68]	; (83180 <vPortFree+0x8c>)
   8313c:	681b      	ldr	r3, [r3, #0]
   8313e:	4013      	ands	r3, r2
   83140:	2b00      	cmp	r3, #0
   83142:	d019      	beq.n	83178 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   83144:	68bb      	ldr	r3, [r7, #8]
   83146:	681b      	ldr	r3, [r3, #0]
   83148:	2b00      	cmp	r3, #0
   8314a:	d115      	bne.n	83178 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   8314c:	68bb      	ldr	r3, [r7, #8]
   8314e:	685a      	ldr	r2, [r3, #4]
   83150:	4b0b      	ldr	r3, [pc, #44]	; (83180 <vPortFree+0x8c>)
   83152:	681b      	ldr	r3, [r3, #0]
   83154:	43db      	mvns	r3, r3
   83156:	401a      	ands	r2, r3
   83158:	68bb      	ldr	r3, [r7, #8]
   8315a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   8315c:	4b0a      	ldr	r3, [pc, #40]	; (83188 <vPortFree+0x94>)
   8315e:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   83160:	68bb      	ldr	r3, [r7, #8]
   83162:	685a      	ldr	r2, [r3, #4]
   83164:	4b09      	ldr	r3, [pc, #36]	; (8318c <vPortFree+0x98>)
   83166:	681b      	ldr	r3, [r3, #0]
   83168:	441a      	add	r2, r3
   8316a:	4b08      	ldr	r3, [pc, #32]	; (8318c <vPortFree+0x98>)
   8316c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   8316e:	68b8      	ldr	r0, [r7, #8]
   83170:	4b07      	ldr	r3, [pc, #28]	; (83190 <vPortFree+0x9c>)
   83172:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   83174:	4b07      	ldr	r3, [pc, #28]	; (83194 <vPortFree+0xa0>)
   83176:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   83178:	3710      	adds	r7, #16
   8317a:	46bd      	mov	sp, r7
   8317c:	bd80      	pop	{r7, pc}
   8317e:	bf00      	nop
   83180:	2007a56c 	.word	0x2007a56c
   83184:	00082e59 	.word	0x00082e59
   83188:	00083ec9 	.word	0x00083ec9
   8318c:	2007a564 	.word	0x2007a564
   83190:	0008325d 	.word	0x0008325d
   83194:	00083ee5 	.word	0x00083ee5

00083198 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   83198:	b480      	push	{r7}
   8319a:	b085      	sub	sp, #20
   8319c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   8319e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   831a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   831a4:	4b27      	ldr	r3, [pc, #156]	; (83244 <prvHeapInit+0xac>)
   831a6:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   831a8:	68fb      	ldr	r3, [r7, #12]
   831aa:	f003 0307 	and.w	r3, r3, #7
   831ae:	2b00      	cmp	r3, #0
   831b0:	d00c      	beq.n	831cc <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   831b2:	68fb      	ldr	r3, [r7, #12]
   831b4:	3307      	adds	r3, #7
   831b6:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   831b8:	68fb      	ldr	r3, [r7, #12]
   831ba:	f023 0307 	bic.w	r3, r3, #7
   831be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   831c0:	68ba      	ldr	r2, [r7, #8]
   831c2:	68fb      	ldr	r3, [r7, #12]
   831c4:	1ad2      	subs	r2, r2, r3
   831c6:	4b1f      	ldr	r3, [pc, #124]	; (83244 <prvHeapInit+0xac>)
   831c8:	4413      	add	r3, r2
   831ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   831cc:	68fb      	ldr	r3, [r7, #12]
   831ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   831d0:	4b1d      	ldr	r3, [pc, #116]	; (83248 <prvHeapInit+0xb0>)
   831d2:	687a      	ldr	r2, [r7, #4]
   831d4:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   831d6:	4b1c      	ldr	r3, [pc, #112]	; (83248 <prvHeapInit+0xb0>)
   831d8:	2200      	movs	r2, #0
   831da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   831dc:	687a      	ldr	r2, [r7, #4]
   831de:	68bb      	ldr	r3, [r7, #8]
   831e0:	4413      	add	r3, r2
   831e2:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   831e4:	2308      	movs	r3, #8
   831e6:	68fa      	ldr	r2, [r7, #12]
   831e8:	1ad3      	subs	r3, r2, r3
   831ea:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   831ec:	68fb      	ldr	r3, [r7, #12]
   831ee:	f023 0307 	bic.w	r3, r3, #7
   831f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   831f4:	68fa      	ldr	r2, [r7, #12]
   831f6:	4b15      	ldr	r3, [pc, #84]	; (8324c <prvHeapInit+0xb4>)
   831f8:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   831fa:	4b14      	ldr	r3, [pc, #80]	; (8324c <prvHeapInit+0xb4>)
   831fc:	681b      	ldr	r3, [r3, #0]
   831fe:	2200      	movs	r2, #0
   83200:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   83202:	4b12      	ldr	r3, [pc, #72]	; (8324c <prvHeapInit+0xb4>)
   83204:	681b      	ldr	r3, [r3, #0]
   83206:	2200      	movs	r2, #0
   83208:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   8320a:	687b      	ldr	r3, [r7, #4]
   8320c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   8320e:	683b      	ldr	r3, [r7, #0]
   83210:	68fa      	ldr	r2, [r7, #12]
   83212:	1ad2      	subs	r2, r2, r3
   83214:	683b      	ldr	r3, [r7, #0]
   83216:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83218:	4b0c      	ldr	r3, [pc, #48]	; (8324c <prvHeapInit+0xb4>)
   8321a:	681a      	ldr	r2, [r3, #0]
   8321c:	683b      	ldr	r3, [r7, #0]
   8321e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83220:	683b      	ldr	r3, [r7, #0]
   83222:	685a      	ldr	r2, [r3, #4]
   83224:	4b0a      	ldr	r3, [pc, #40]	; (83250 <prvHeapInit+0xb8>)
   83226:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83228:	683b      	ldr	r3, [r7, #0]
   8322a:	685a      	ldr	r2, [r3, #4]
   8322c:	4b09      	ldr	r3, [pc, #36]	; (83254 <prvHeapInit+0xbc>)
   8322e:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   83230:	4b09      	ldr	r3, [pc, #36]	; (83258 <prvHeapInit+0xc0>)
   83232:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   83236:	601a      	str	r2, [r3, #0]
}
   83238:	3714      	adds	r7, #20
   8323a:	46bd      	mov	sp, r7
   8323c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83240:	4770      	bx	lr
   83242:	bf00      	nop
   83244:	20070558 	.word	0x20070558
   83248:	2007a558 	.word	0x2007a558
   8324c:	2007a560 	.word	0x2007a560
   83250:	2007a568 	.word	0x2007a568
   83254:	2007a564 	.word	0x2007a564
   83258:	2007a56c 	.word	0x2007a56c

0008325c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   8325c:	b480      	push	{r7}
   8325e:	b085      	sub	sp, #20
   83260:	af00      	add	r7, sp, #0
   83262:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   83264:	4b27      	ldr	r3, [pc, #156]	; (83304 <prvInsertBlockIntoFreeList+0xa8>)
   83266:	60fb      	str	r3, [r7, #12]
   83268:	e002      	b.n	83270 <prvInsertBlockIntoFreeList+0x14>
   8326a:	68fb      	ldr	r3, [r7, #12]
   8326c:	681b      	ldr	r3, [r3, #0]
   8326e:	60fb      	str	r3, [r7, #12]
   83270:	68fb      	ldr	r3, [r7, #12]
   83272:	681a      	ldr	r2, [r3, #0]
   83274:	687b      	ldr	r3, [r7, #4]
   83276:	429a      	cmp	r2, r3
   83278:	d3f7      	bcc.n	8326a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   8327a:	68fb      	ldr	r3, [r7, #12]
   8327c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   8327e:	68fb      	ldr	r3, [r7, #12]
   83280:	685b      	ldr	r3, [r3, #4]
   83282:	68ba      	ldr	r2, [r7, #8]
   83284:	441a      	add	r2, r3
   83286:	687b      	ldr	r3, [r7, #4]
   83288:	429a      	cmp	r2, r3
   8328a:	d108      	bne.n	8329e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8328c:	68fb      	ldr	r3, [r7, #12]
   8328e:	685a      	ldr	r2, [r3, #4]
   83290:	687b      	ldr	r3, [r7, #4]
   83292:	685b      	ldr	r3, [r3, #4]
   83294:	441a      	add	r2, r3
   83296:	68fb      	ldr	r3, [r7, #12]
   83298:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   8329a:	68fb      	ldr	r3, [r7, #12]
   8329c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   8329e:	687b      	ldr	r3, [r7, #4]
   832a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   832a2:	687b      	ldr	r3, [r7, #4]
   832a4:	685b      	ldr	r3, [r3, #4]
   832a6:	68ba      	ldr	r2, [r7, #8]
   832a8:	441a      	add	r2, r3
   832aa:	68fb      	ldr	r3, [r7, #12]
   832ac:	681b      	ldr	r3, [r3, #0]
   832ae:	429a      	cmp	r2, r3
   832b0:	d118      	bne.n	832e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   832b2:	68fb      	ldr	r3, [r7, #12]
   832b4:	681a      	ldr	r2, [r3, #0]
   832b6:	4b14      	ldr	r3, [pc, #80]	; (83308 <prvInsertBlockIntoFreeList+0xac>)
   832b8:	681b      	ldr	r3, [r3, #0]
   832ba:	429a      	cmp	r2, r3
   832bc:	d00d      	beq.n	832da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   832be:	687b      	ldr	r3, [r7, #4]
   832c0:	685a      	ldr	r2, [r3, #4]
   832c2:	68fb      	ldr	r3, [r7, #12]
   832c4:	681b      	ldr	r3, [r3, #0]
   832c6:	685b      	ldr	r3, [r3, #4]
   832c8:	441a      	add	r2, r3
   832ca:	687b      	ldr	r3, [r7, #4]
   832cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   832ce:	68fb      	ldr	r3, [r7, #12]
   832d0:	681b      	ldr	r3, [r3, #0]
   832d2:	681a      	ldr	r2, [r3, #0]
   832d4:	687b      	ldr	r3, [r7, #4]
   832d6:	601a      	str	r2, [r3, #0]
   832d8:	e008      	b.n	832ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   832da:	4b0b      	ldr	r3, [pc, #44]	; (83308 <prvInsertBlockIntoFreeList+0xac>)
   832dc:	681a      	ldr	r2, [r3, #0]
   832de:	687b      	ldr	r3, [r7, #4]
   832e0:	601a      	str	r2, [r3, #0]
   832e2:	e003      	b.n	832ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   832e4:	68fb      	ldr	r3, [r7, #12]
   832e6:	681a      	ldr	r2, [r3, #0]
   832e8:	687b      	ldr	r3, [r7, #4]
   832ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   832ec:	68fa      	ldr	r2, [r7, #12]
   832ee:	687b      	ldr	r3, [r7, #4]
   832f0:	429a      	cmp	r2, r3
   832f2:	d002      	beq.n	832fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   832f4:	68fb      	ldr	r3, [r7, #12]
   832f6:	687a      	ldr	r2, [r7, #4]
   832f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   832fa:	3714      	adds	r7, #20
   832fc:	46bd      	mov	sp, r7
   832fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   83302:	4770      	bx	lr
   83304:	2007a558 	.word	0x2007a558
   83308:	2007a560 	.word	0x2007a560

0008330c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   8330c:	b580      	push	{r7, lr}
   8330e:	b084      	sub	sp, #16
   83310:	af00      	add	r7, sp, #0
   83312:	6078      	str	r0, [r7, #4]
   83314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83316:	687b      	ldr	r3, [r7, #4]
   83318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8331a:	68fb      	ldr	r3, [r7, #12]
   8331c:	2b00      	cmp	r3, #0
   8331e:	d102      	bne.n	83326 <xQueueGenericReset+0x1a>
   83320:	4b26      	ldr	r3, [pc, #152]	; (833bc <xQueueGenericReset+0xb0>)
   83322:	4798      	blx	r3
   83324:	e7fe      	b.n	83324 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   83326:	4b26      	ldr	r3, [pc, #152]	; (833c0 <xQueueGenericReset+0xb4>)
   83328:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8332a:	68fb      	ldr	r3, [r7, #12]
   8332c:	681a      	ldr	r2, [r3, #0]
   8332e:	68fb      	ldr	r3, [r7, #12]
   83330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83332:	68f9      	ldr	r1, [r7, #12]
   83334:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83336:	fb01 f303 	mul.w	r3, r1, r3
   8333a:	441a      	add	r2, r3
   8333c:	68fb      	ldr	r3, [r7, #12]
   8333e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   83340:	68fb      	ldr	r3, [r7, #12]
   83342:	2200      	movs	r2, #0
   83344:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   83346:	68fb      	ldr	r3, [r7, #12]
   83348:	681a      	ldr	r2, [r3, #0]
   8334a:	68fb      	ldr	r3, [r7, #12]
   8334c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   8334e:	68fb      	ldr	r3, [r7, #12]
   83350:	681a      	ldr	r2, [r3, #0]
   83352:	68fb      	ldr	r3, [r7, #12]
   83354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83356:	3b01      	subs	r3, #1
   83358:	68f9      	ldr	r1, [r7, #12]
   8335a:	6c09      	ldr	r1, [r1, #64]	; 0x40
   8335c:	fb01 f303 	mul.w	r3, r1, r3
   83360:	441a      	add	r2, r3
   83362:	68fb      	ldr	r3, [r7, #12]
   83364:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   83366:	68fb      	ldr	r3, [r7, #12]
   83368:	f04f 32ff 	mov.w	r2, #4294967295
   8336c:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8336e:	68fb      	ldr	r3, [r7, #12]
   83370:	f04f 32ff 	mov.w	r2, #4294967295
   83374:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   83376:	683b      	ldr	r3, [r7, #0]
   83378:	2b00      	cmp	r3, #0
   8337a:	d10e      	bne.n	8339a <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8337c:	68fb      	ldr	r3, [r7, #12]
   8337e:	691b      	ldr	r3, [r3, #16]
   83380:	2b00      	cmp	r3, #0
   83382:	d014      	beq.n	833ae <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83384:	68fb      	ldr	r3, [r7, #12]
   83386:	3310      	adds	r3, #16
   83388:	4618      	mov	r0, r3
   8338a:	4b0e      	ldr	r3, [pc, #56]	; (833c4 <xQueueGenericReset+0xb8>)
   8338c:	4798      	blx	r3
   8338e:	4603      	mov	r3, r0
   83390:	2b01      	cmp	r3, #1
   83392:	d10c      	bne.n	833ae <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   83394:	4b0c      	ldr	r3, [pc, #48]	; (833c8 <xQueueGenericReset+0xbc>)
   83396:	4798      	blx	r3
   83398:	e009      	b.n	833ae <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   8339a:	68fb      	ldr	r3, [r7, #12]
   8339c:	3310      	adds	r3, #16
   8339e:	4618      	mov	r0, r3
   833a0:	4b0a      	ldr	r3, [pc, #40]	; (833cc <xQueueGenericReset+0xc0>)
   833a2:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   833a4:	68fb      	ldr	r3, [r7, #12]
   833a6:	3324      	adds	r3, #36	; 0x24
   833a8:	4618      	mov	r0, r3
   833aa:	4b08      	ldr	r3, [pc, #32]	; (833cc <xQueueGenericReset+0xc0>)
   833ac:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   833ae:	4b08      	ldr	r3, [pc, #32]	; (833d0 <xQueueGenericReset+0xc4>)
   833b0:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   833b2:	2301      	movs	r3, #1
}
   833b4:	4618      	mov	r0, r3
   833b6:	3710      	adds	r7, #16
   833b8:	46bd      	mov	sp, r7
   833ba:	bd80      	pop	{r7, pc}
   833bc:	00082e59 	.word	0x00082e59
   833c0:	00082ddd 	.word	0x00082ddd
   833c4:	000843cd 	.word	0x000843cd
   833c8:	00082dbd 	.word	0x00082dbd
   833cc:	00082ad1 	.word	0x00082ad1
   833d0:	00082e21 	.word	0x00082e21

000833d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   833d4:	b580      	push	{r7, lr}
   833d6:	b088      	sub	sp, #32
   833d8:	af00      	add	r7, sp, #0
   833da:	60f8      	str	r0, [r7, #12]
   833dc:	60b9      	str	r1, [r7, #8]
   833de:	4613      	mov	r3, r2
   833e0:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   833e2:	2300      	movs	r3, #0
   833e4:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   833e6:	68fb      	ldr	r3, [r7, #12]
   833e8:	2b00      	cmp	r3, #0
   833ea:	d026      	beq.n	8343a <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   833ec:	204c      	movs	r0, #76	; 0x4c
   833ee:	4b18      	ldr	r3, [pc, #96]	; (83450 <xQueueGenericCreate+0x7c>)
   833f0:	4798      	blx	r3
   833f2:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   833f4:	69bb      	ldr	r3, [r7, #24]
   833f6:	2b00      	cmp	r3, #0
   833f8:	d01f      	beq.n	8343a <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   833fa:	68fb      	ldr	r3, [r7, #12]
   833fc:	68ba      	ldr	r2, [r7, #8]
   833fe:	fb02 f303 	mul.w	r3, r2, r3
   83402:	3301      	adds	r3, #1
   83404:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   83406:	6978      	ldr	r0, [r7, #20]
   83408:	4b11      	ldr	r3, [pc, #68]	; (83450 <xQueueGenericCreate+0x7c>)
   8340a:	4798      	blx	r3
   8340c:	4602      	mov	r2, r0
   8340e:	69bb      	ldr	r3, [r7, #24]
   83410:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   83412:	69bb      	ldr	r3, [r7, #24]
   83414:	681b      	ldr	r3, [r3, #0]
   83416:	2b00      	cmp	r3, #0
   83418:	d00c      	beq.n	83434 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8341a:	69bb      	ldr	r3, [r7, #24]
   8341c:	68fa      	ldr	r2, [r7, #12]
   8341e:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   83420:	69bb      	ldr	r3, [r7, #24]
   83422:	68ba      	ldr	r2, [r7, #8]
   83424:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   83426:	69b8      	ldr	r0, [r7, #24]
   83428:	2101      	movs	r1, #1
   8342a:	4b0a      	ldr	r3, [pc, #40]	; (83454 <xQueueGenericCreate+0x80>)
   8342c:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   8342e:	69bb      	ldr	r3, [r7, #24]
   83430:	61fb      	str	r3, [r7, #28]
   83432:	e002      	b.n	8343a <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   83434:	69b8      	ldr	r0, [r7, #24]
   83436:	4b08      	ldr	r3, [pc, #32]	; (83458 <xQueueGenericCreate+0x84>)
   83438:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8343a:	69fb      	ldr	r3, [r7, #28]
   8343c:	2b00      	cmp	r3, #0
   8343e:	d102      	bne.n	83446 <xQueueGenericCreate+0x72>
   83440:	4b06      	ldr	r3, [pc, #24]	; (8345c <xQueueGenericCreate+0x88>)
   83442:	4798      	blx	r3
   83444:	e7fe      	b.n	83444 <xQueueGenericCreate+0x70>

	return xReturn;
   83446:	69fb      	ldr	r3, [r7, #28]
}
   83448:	4618      	mov	r0, r3
   8344a:	3720      	adds	r7, #32
   8344c:	46bd      	mov	sp, r7
   8344e:	bd80      	pop	{r7, pc}
   83450:	00082f7d 	.word	0x00082f7d
   83454:	0008330d 	.word	0x0008330d
   83458:	000830f5 	.word	0x000830f5
   8345c:	00082e59 	.word	0x00082e59

00083460 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   83460:	b580      	push	{r7, lr}
   83462:	b08a      	sub	sp, #40	; 0x28
   83464:	af00      	add	r7, sp, #0
   83466:	60f8      	str	r0, [r7, #12]
   83468:	60b9      	str	r1, [r7, #8]
   8346a:	607a      	str	r2, [r7, #4]
   8346c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   8346e:	2300      	movs	r3, #0
   83470:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83472:	68fb      	ldr	r3, [r7, #12]
   83474:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83476:	6a3b      	ldr	r3, [r7, #32]
   83478:	2b00      	cmp	r3, #0
   8347a:	d102      	bne.n	83482 <xQueueGenericSend+0x22>
   8347c:	4b5b      	ldr	r3, [pc, #364]	; (835ec <xQueueGenericSend+0x18c>)
   8347e:	4798      	blx	r3
   83480:	e7fe      	b.n	83480 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83482:	68bb      	ldr	r3, [r7, #8]
   83484:	2b00      	cmp	r3, #0
   83486:	d103      	bne.n	83490 <xQueueGenericSend+0x30>
   83488:	6a3b      	ldr	r3, [r7, #32]
   8348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8348c:	2b00      	cmp	r3, #0
   8348e:	d101      	bne.n	83494 <xQueueGenericSend+0x34>
   83490:	2301      	movs	r3, #1
   83492:	e000      	b.n	83496 <xQueueGenericSend+0x36>
   83494:	2300      	movs	r3, #0
   83496:	2b00      	cmp	r3, #0
   83498:	d102      	bne.n	834a0 <xQueueGenericSend+0x40>
   8349a:	4b54      	ldr	r3, [pc, #336]	; (835ec <xQueueGenericSend+0x18c>)
   8349c:	4798      	blx	r3
   8349e:	e7fe      	b.n	8349e <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   834a0:	683b      	ldr	r3, [r7, #0]
   834a2:	2b02      	cmp	r3, #2
   834a4:	d103      	bne.n	834ae <xQueueGenericSend+0x4e>
   834a6:	6a3b      	ldr	r3, [r7, #32]
   834a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   834aa:	2b01      	cmp	r3, #1
   834ac:	d101      	bne.n	834b2 <xQueueGenericSend+0x52>
   834ae:	2301      	movs	r3, #1
   834b0:	e000      	b.n	834b4 <xQueueGenericSend+0x54>
   834b2:	2300      	movs	r3, #0
   834b4:	2b00      	cmp	r3, #0
   834b6:	d102      	bne.n	834be <xQueueGenericSend+0x5e>
   834b8:	4b4c      	ldr	r3, [pc, #304]	; (835ec <xQueueGenericSend+0x18c>)
   834ba:	4798      	blx	r3
   834bc:	e7fe      	b.n	834bc <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   834be:	4b4c      	ldr	r3, [pc, #304]	; (835f0 <xQueueGenericSend+0x190>)
   834c0:	4798      	blx	r3
   834c2:	4603      	mov	r3, r0
   834c4:	2b00      	cmp	r3, #0
   834c6:	d102      	bne.n	834ce <xQueueGenericSend+0x6e>
   834c8:	687b      	ldr	r3, [r7, #4]
   834ca:	2b00      	cmp	r3, #0
   834cc:	d101      	bne.n	834d2 <xQueueGenericSend+0x72>
   834ce:	2301      	movs	r3, #1
   834d0:	e000      	b.n	834d4 <xQueueGenericSend+0x74>
   834d2:	2300      	movs	r3, #0
   834d4:	2b00      	cmp	r3, #0
   834d6:	d102      	bne.n	834de <xQueueGenericSend+0x7e>
   834d8:	4b44      	ldr	r3, [pc, #272]	; (835ec <xQueueGenericSend+0x18c>)
   834da:	4798      	blx	r3
   834dc:	e7fe      	b.n	834dc <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   834de:	4b45      	ldr	r3, [pc, #276]	; (835f4 <xQueueGenericSend+0x194>)
   834e0:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   834e2:	6a3b      	ldr	r3, [r7, #32]
   834e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   834e6:	6a3b      	ldr	r3, [r7, #32]
   834e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   834ea:	429a      	cmp	r2, r3
   834ec:	d302      	bcc.n	834f4 <xQueueGenericSend+0x94>
   834ee:	683b      	ldr	r3, [r7, #0]
   834f0:	2b02      	cmp	r3, #2
   834f2:	d11d      	bne.n	83530 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   834f4:	6a38      	ldr	r0, [r7, #32]
   834f6:	68b9      	ldr	r1, [r7, #8]
   834f8:	683a      	ldr	r2, [r7, #0]
   834fa:	4b3f      	ldr	r3, [pc, #252]	; (835f8 <xQueueGenericSend+0x198>)
   834fc:	4798      	blx	r3
   834fe:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83500:	6a3b      	ldr	r3, [r7, #32]
   83502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83504:	2b00      	cmp	r3, #0
   83506:	d00a      	beq.n	8351e <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   83508:	6a3b      	ldr	r3, [r7, #32]
   8350a:	3324      	adds	r3, #36	; 0x24
   8350c:	4618      	mov	r0, r3
   8350e:	4b3b      	ldr	r3, [pc, #236]	; (835fc <xQueueGenericSend+0x19c>)
   83510:	4798      	blx	r3
   83512:	4603      	mov	r3, r0
   83514:	2b01      	cmp	r3, #1
   83516:	d107      	bne.n	83528 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   83518:	4b39      	ldr	r3, [pc, #228]	; (83600 <xQueueGenericSend+0x1a0>)
   8351a:	4798      	blx	r3
   8351c:	e004      	b.n	83528 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   8351e:	69fb      	ldr	r3, [r7, #28]
   83520:	2b00      	cmp	r3, #0
   83522:	d001      	beq.n	83528 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83524:	4b36      	ldr	r3, [pc, #216]	; (83600 <xQueueGenericSend+0x1a0>)
   83526:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   83528:	4b36      	ldr	r3, [pc, #216]	; (83604 <xQueueGenericSend+0x1a4>)
   8352a:	4798      	blx	r3
				return pdPASS;
   8352c:	2301      	movs	r3, #1
   8352e:	e059      	b.n	835e4 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83530:	687b      	ldr	r3, [r7, #4]
   83532:	2b00      	cmp	r3, #0
   83534:	d103      	bne.n	8353e <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83536:	4b33      	ldr	r3, [pc, #204]	; (83604 <xQueueGenericSend+0x1a4>)
   83538:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8353a:	2300      	movs	r3, #0
   8353c:	e052      	b.n	835e4 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   8353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83540:	2b00      	cmp	r3, #0
   83542:	d106      	bne.n	83552 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83544:	f107 0314 	add.w	r3, r7, #20
   83548:	4618      	mov	r0, r3
   8354a:	4b2f      	ldr	r3, [pc, #188]	; (83608 <xQueueGenericSend+0x1a8>)
   8354c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8354e:	2301      	movs	r3, #1
   83550:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83552:	4b2c      	ldr	r3, [pc, #176]	; (83604 <xQueueGenericSend+0x1a4>)
   83554:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83556:	4b2d      	ldr	r3, [pc, #180]	; (8360c <xQueueGenericSend+0x1ac>)
   83558:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8355a:	4b26      	ldr	r3, [pc, #152]	; (835f4 <xQueueGenericSend+0x194>)
   8355c:	4798      	blx	r3
   8355e:	6a3b      	ldr	r3, [r7, #32]
   83560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83562:	f1b3 3fff 	cmp.w	r3, #4294967295
   83566:	d102      	bne.n	8356e <xQueueGenericSend+0x10e>
   83568:	6a3b      	ldr	r3, [r7, #32]
   8356a:	2200      	movs	r2, #0
   8356c:	645a      	str	r2, [r3, #68]	; 0x44
   8356e:	6a3b      	ldr	r3, [r7, #32]
   83570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83572:	f1b3 3fff 	cmp.w	r3, #4294967295
   83576:	d102      	bne.n	8357e <xQueueGenericSend+0x11e>
   83578:	6a3b      	ldr	r3, [r7, #32]
   8357a:	2200      	movs	r2, #0
   8357c:	649a      	str	r2, [r3, #72]	; 0x48
   8357e:	4b21      	ldr	r3, [pc, #132]	; (83604 <xQueueGenericSend+0x1a4>)
   83580:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83582:	f107 0214 	add.w	r2, r7, #20
   83586:	1d3b      	adds	r3, r7, #4
   83588:	4610      	mov	r0, r2
   8358a:	4619      	mov	r1, r3
   8358c:	4b20      	ldr	r3, [pc, #128]	; (83610 <xQueueGenericSend+0x1b0>)
   8358e:	4798      	blx	r3
   83590:	4603      	mov	r3, r0
   83592:	2b00      	cmp	r3, #0
   83594:	d11e      	bne.n	835d4 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   83596:	6a38      	ldr	r0, [r7, #32]
   83598:	4b1e      	ldr	r3, [pc, #120]	; (83614 <xQueueGenericSend+0x1b4>)
   8359a:	4798      	blx	r3
   8359c:	4603      	mov	r3, r0
   8359e:	2b00      	cmp	r3, #0
   835a0:	d012      	beq.n	835c8 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   835a2:	6a3b      	ldr	r3, [r7, #32]
   835a4:	f103 0210 	add.w	r2, r3, #16
   835a8:	687b      	ldr	r3, [r7, #4]
   835aa:	4610      	mov	r0, r2
   835ac:	4619      	mov	r1, r3
   835ae:	4b1a      	ldr	r3, [pc, #104]	; (83618 <xQueueGenericSend+0x1b8>)
   835b0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   835b2:	6a38      	ldr	r0, [r7, #32]
   835b4:	4b19      	ldr	r3, [pc, #100]	; (8361c <xQueueGenericSend+0x1bc>)
   835b6:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   835b8:	4b19      	ldr	r3, [pc, #100]	; (83620 <xQueueGenericSend+0x1c0>)
   835ba:	4798      	blx	r3
   835bc:	4603      	mov	r3, r0
   835be:	2b00      	cmp	r3, #0
   835c0:	d10f      	bne.n	835e2 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   835c2:	4b0f      	ldr	r3, [pc, #60]	; (83600 <xQueueGenericSend+0x1a0>)
   835c4:	4798      	blx	r3
   835c6:	e00c      	b.n	835e2 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   835c8:	6a38      	ldr	r0, [r7, #32]
   835ca:	4b14      	ldr	r3, [pc, #80]	; (8361c <xQueueGenericSend+0x1bc>)
   835cc:	4798      	blx	r3
				( void ) xTaskResumeAll();
   835ce:	4b14      	ldr	r3, [pc, #80]	; (83620 <xQueueGenericSend+0x1c0>)
   835d0:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   835d2:	e784      	b.n	834de <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   835d4:	6a38      	ldr	r0, [r7, #32]
   835d6:	4b11      	ldr	r3, [pc, #68]	; (8361c <xQueueGenericSend+0x1bc>)
   835d8:	4798      	blx	r3
			( void ) xTaskResumeAll();
   835da:	4b11      	ldr	r3, [pc, #68]	; (83620 <xQueueGenericSend+0x1c0>)
   835dc:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   835de:	2300      	movs	r3, #0
   835e0:	e000      	b.n	835e4 <xQueueGenericSend+0x184>
		}
	}
   835e2:	e77c      	b.n	834de <xQueueGenericSend+0x7e>
}
   835e4:	4618      	mov	r0, r3
   835e6:	3728      	adds	r7, #40	; 0x28
   835e8:	46bd      	mov	sp, r7
   835ea:	bd80      	pop	{r7, pc}
   835ec:	00082e59 	.word	0x00082e59
   835f0:	000848a5 	.word	0x000848a5
   835f4:	00082ddd 	.word	0x00082ddd
   835f8:	0008391d 	.word	0x0008391d
   835fc:	000843cd 	.word	0x000843cd
   83600:	00082dbd 	.word	0x00082dbd
   83604:	00082e21 	.word	0x00082e21
   83608:	0008448d 	.word	0x0008448d
   8360c:	00083ec9 	.word	0x00083ec9
   83610:	000844c5 	.word	0x000844c5
   83614:	00083b2d 	.word	0x00083b2d
   83618:	000842ad 	.word	0x000842ad
   8361c:	00083a51 	.word	0x00083a51
   83620:	00083ee5 	.word	0x00083ee5

00083624 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83624:	b580      	push	{r7, lr}
   83626:	b088      	sub	sp, #32
   83628:	af00      	add	r7, sp, #0
   8362a:	60f8      	str	r0, [r7, #12]
   8362c:	60b9      	str	r1, [r7, #8]
   8362e:	607a      	str	r2, [r7, #4]
   83630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83632:	68fb      	ldr	r3, [r7, #12]
   83634:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   83636:	69bb      	ldr	r3, [r7, #24]
   83638:	2b00      	cmp	r3, #0
   8363a:	d102      	bne.n	83642 <xQueueGenericSendFromISR+0x1e>
   8363c:	4b33      	ldr	r3, [pc, #204]	; (8370c <xQueueGenericSendFromISR+0xe8>)
   8363e:	4798      	blx	r3
   83640:	e7fe      	b.n	83640 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83642:	68bb      	ldr	r3, [r7, #8]
   83644:	2b00      	cmp	r3, #0
   83646:	d103      	bne.n	83650 <xQueueGenericSendFromISR+0x2c>
   83648:	69bb      	ldr	r3, [r7, #24]
   8364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8364c:	2b00      	cmp	r3, #0
   8364e:	d101      	bne.n	83654 <xQueueGenericSendFromISR+0x30>
   83650:	2301      	movs	r3, #1
   83652:	e000      	b.n	83656 <xQueueGenericSendFromISR+0x32>
   83654:	2300      	movs	r3, #0
   83656:	2b00      	cmp	r3, #0
   83658:	d102      	bne.n	83660 <xQueueGenericSendFromISR+0x3c>
   8365a:	4b2c      	ldr	r3, [pc, #176]	; (8370c <xQueueGenericSendFromISR+0xe8>)
   8365c:	4798      	blx	r3
   8365e:	e7fe      	b.n	8365e <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   83660:	683b      	ldr	r3, [r7, #0]
   83662:	2b02      	cmp	r3, #2
   83664:	d103      	bne.n	8366e <xQueueGenericSendFromISR+0x4a>
   83666:	69bb      	ldr	r3, [r7, #24]
   83668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8366a:	2b01      	cmp	r3, #1
   8366c:	d101      	bne.n	83672 <xQueueGenericSendFromISR+0x4e>
   8366e:	2301      	movs	r3, #1
   83670:	e000      	b.n	83674 <xQueueGenericSendFromISR+0x50>
   83672:	2300      	movs	r3, #0
   83674:	2b00      	cmp	r3, #0
   83676:	d102      	bne.n	8367e <xQueueGenericSendFromISR+0x5a>
   83678:	4b24      	ldr	r3, [pc, #144]	; (8370c <xQueueGenericSendFromISR+0xe8>)
   8367a:	4798      	blx	r3
   8367c:	e7fe      	b.n	8367c <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8367e:	4b24      	ldr	r3, [pc, #144]	; (83710 <xQueueGenericSendFromISR+0xec>)
   83680:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83682:	4b22      	ldr	r3, [pc, #136]	; (8370c <xQueueGenericSendFromISR+0xe8>)
   83684:	4798      	blx	r3
   83686:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83688:	69bb      	ldr	r3, [r7, #24]
   8368a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8368c:	69bb      	ldr	r3, [r7, #24]
   8368e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83690:	429a      	cmp	r2, r3
   83692:	d302      	bcc.n	8369a <xQueueGenericSendFromISR+0x76>
   83694:	683b      	ldr	r3, [r7, #0]
   83696:	2b02      	cmp	r3, #2
   83698:	d12d      	bne.n	836f6 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   8369a:	69b8      	ldr	r0, [r7, #24]
   8369c:	68b9      	ldr	r1, [r7, #8]
   8369e:	683a      	ldr	r2, [r7, #0]
   836a0:	4b1c      	ldr	r3, [pc, #112]	; (83714 <xQueueGenericSendFromISR+0xf0>)
   836a2:	4798      	blx	r3
   836a4:	4603      	mov	r3, r0
   836a6:	2b00      	cmp	r3, #0
   836a8:	d005      	beq.n	836b6 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   836aa:	687b      	ldr	r3, [r7, #4]
   836ac:	2b00      	cmp	r3, #0
   836ae:	d002      	beq.n	836b6 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   836b0:	687b      	ldr	r3, [r7, #4]
   836b2:	2201      	movs	r2, #1
   836b4:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   836b6:	69bb      	ldr	r3, [r7, #24]
   836b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   836ba:	f1b3 3fff 	cmp.w	r3, #4294967295
   836be:	d112      	bne.n	836e6 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   836c0:	69bb      	ldr	r3, [r7, #24]
   836c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   836c4:	2b00      	cmp	r3, #0
   836c6:	d013      	beq.n	836f0 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   836c8:	69bb      	ldr	r3, [r7, #24]
   836ca:	3324      	adds	r3, #36	; 0x24
   836cc:	4618      	mov	r0, r3
   836ce:	4b12      	ldr	r3, [pc, #72]	; (83718 <xQueueGenericSendFromISR+0xf4>)
   836d0:	4798      	blx	r3
   836d2:	4603      	mov	r3, r0
   836d4:	2b00      	cmp	r3, #0
   836d6:	d00b      	beq.n	836f0 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   836d8:	687b      	ldr	r3, [r7, #4]
   836da:	2b00      	cmp	r3, #0
   836dc:	d008      	beq.n	836f0 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   836de:	687b      	ldr	r3, [r7, #4]
   836e0:	2201      	movs	r2, #1
   836e2:	601a      	str	r2, [r3, #0]
   836e4:	e004      	b.n	836f0 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   836e6:	69bb      	ldr	r3, [r7, #24]
   836e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   836ea:	1c5a      	adds	r2, r3, #1
   836ec:	69bb      	ldr	r3, [r7, #24]
   836ee:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   836f0:	2301      	movs	r3, #1
   836f2:	61fb      	str	r3, [r7, #28]
   836f4:	e001      	b.n	836fa <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   836f6:	2300      	movs	r3, #0
   836f8:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   836fa:	6978      	ldr	r0, [r7, #20]
   836fc:	4b07      	ldr	r3, [pc, #28]	; (8371c <xQueueGenericSendFromISR+0xf8>)
   836fe:	4798      	blx	r3

	return xReturn;
   83700:	69fb      	ldr	r3, [r7, #28]
}
   83702:	4618      	mov	r0, r3
   83704:	3720      	adds	r7, #32
   83706:	46bd      	mov	sp, r7
   83708:	bd80      	pop	{r7, pc}
   8370a:	bf00      	nop
   8370c:	00082e59 	.word	0x00082e59
   83710:	00082f21 	.word	0x00082f21
   83714:	0008391d 	.word	0x0008391d
   83718:	000843cd 	.word	0x000843cd
   8371c:	00082e6d 	.word	0x00082e6d

00083720 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   83720:	b580      	push	{r7, lr}
   83722:	b08a      	sub	sp, #40	; 0x28
   83724:	af00      	add	r7, sp, #0
   83726:	60f8      	str	r0, [r7, #12]
   83728:	60b9      	str	r1, [r7, #8]
   8372a:	607a      	str	r2, [r7, #4]
   8372c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   8372e:	2300      	movs	r3, #0
   83730:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83732:	68fb      	ldr	r3, [r7, #12]
   83734:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83736:	6a3b      	ldr	r3, [r7, #32]
   83738:	2b00      	cmp	r3, #0
   8373a:	d102      	bne.n	83742 <xQueueGenericReceive+0x22>
   8373c:	4b67      	ldr	r3, [pc, #412]	; (838dc <xQueueGenericReceive+0x1bc>)
   8373e:	4798      	blx	r3
   83740:	e7fe      	b.n	83740 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83742:	68bb      	ldr	r3, [r7, #8]
   83744:	2b00      	cmp	r3, #0
   83746:	d103      	bne.n	83750 <xQueueGenericReceive+0x30>
   83748:	6a3b      	ldr	r3, [r7, #32]
   8374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8374c:	2b00      	cmp	r3, #0
   8374e:	d101      	bne.n	83754 <xQueueGenericReceive+0x34>
   83750:	2301      	movs	r3, #1
   83752:	e000      	b.n	83756 <xQueueGenericReceive+0x36>
   83754:	2300      	movs	r3, #0
   83756:	2b00      	cmp	r3, #0
   83758:	d102      	bne.n	83760 <xQueueGenericReceive+0x40>
   8375a:	4b60      	ldr	r3, [pc, #384]	; (838dc <xQueueGenericReceive+0x1bc>)
   8375c:	4798      	blx	r3
   8375e:	e7fe      	b.n	8375e <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83760:	4b5f      	ldr	r3, [pc, #380]	; (838e0 <xQueueGenericReceive+0x1c0>)
   83762:	4798      	blx	r3
   83764:	4603      	mov	r3, r0
   83766:	2b00      	cmp	r3, #0
   83768:	d102      	bne.n	83770 <xQueueGenericReceive+0x50>
   8376a:	687b      	ldr	r3, [r7, #4]
   8376c:	2b00      	cmp	r3, #0
   8376e:	d101      	bne.n	83774 <xQueueGenericReceive+0x54>
   83770:	2301      	movs	r3, #1
   83772:	e000      	b.n	83776 <xQueueGenericReceive+0x56>
   83774:	2300      	movs	r3, #0
   83776:	2b00      	cmp	r3, #0
   83778:	d102      	bne.n	83780 <xQueueGenericReceive+0x60>
   8377a:	4b58      	ldr	r3, [pc, #352]	; (838dc <xQueueGenericReceive+0x1bc>)
   8377c:	4798      	blx	r3
   8377e:	e7fe      	b.n	8377e <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83780:	4b58      	ldr	r3, [pc, #352]	; (838e4 <xQueueGenericReceive+0x1c4>)
   83782:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83784:	6a3b      	ldr	r3, [r7, #32]
   83786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83788:	2b00      	cmp	r3, #0
   8378a:	d03b      	beq.n	83804 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   8378c:	6a3b      	ldr	r3, [r7, #32]
   8378e:	68db      	ldr	r3, [r3, #12]
   83790:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83792:	6a38      	ldr	r0, [r7, #32]
   83794:	68b9      	ldr	r1, [r7, #8]
   83796:	4b54      	ldr	r3, [pc, #336]	; (838e8 <xQueueGenericReceive+0x1c8>)
   83798:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   8379a:	683b      	ldr	r3, [r7, #0]
   8379c:	2b00      	cmp	r3, #0
   8379e:	d11c      	bne.n	837da <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   837a0:	6a3b      	ldr	r3, [r7, #32]
   837a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   837a4:	1e5a      	subs	r2, r3, #1
   837a6:	6a3b      	ldr	r3, [r7, #32]
   837a8:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   837aa:	6a3b      	ldr	r3, [r7, #32]
   837ac:	681b      	ldr	r3, [r3, #0]
   837ae:	2b00      	cmp	r3, #0
   837b0:	d104      	bne.n	837bc <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   837b2:	4b4e      	ldr	r3, [pc, #312]	; (838ec <xQueueGenericReceive+0x1cc>)
   837b4:	4798      	blx	r3
   837b6:	4602      	mov	r2, r0
   837b8:	6a3b      	ldr	r3, [r7, #32]
   837ba:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   837bc:	6a3b      	ldr	r3, [r7, #32]
   837be:	691b      	ldr	r3, [r3, #16]
   837c0:	2b00      	cmp	r3, #0
   837c2:	d01b      	beq.n	837fc <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   837c4:	6a3b      	ldr	r3, [r7, #32]
   837c6:	3310      	adds	r3, #16
   837c8:	4618      	mov	r0, r3
   837ca:	4b49      	ldr	r3, [pc, #292]	; (838f0 <xQueueGenericReceive+0x1d0>)
   837cc:	4798      	blx	r3
   837ce:	4603      	mov	r3, r0
   837d0:	2b01      	cmp	r3, #1
   837d2:	d113      	bne.n	837fc <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   837d4:	4b47      	ldr	r3, [pc, #284]	; (838f4 <xQueueGenericReceive+0x1d4>)
   837d6:	4798      	blx	r3
   837d8:	e010      	b.n	837fc <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   837da:	6a3b      	ldr	r3, [r7, #32]
   837dc:	69fa      	ldr	r2, [r7, #28]
   837de:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   837e0:	6a3b      	ldr	r3, [r7, #32]
   837e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   837e4:	2b00      	cmp	r3, #0
   837e6:	d009      	beq.n	837fc <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   837e8:	6a3b      	ldr	r3, [r7, #32]
   837ea:	3324      	adds	r3, #36	; 0x24
   837ec:	4618      	mov	r0, r3
   837ee:	4b40      	ldr	r3, [pc, #256]	; (838f0 <xQueueGenericReceive+0x1d0>)
   837f0:	4798      	blx	r3
   837f2:	4603      	mov	r3, r0
   837f4:	2b00      	cmp	r3, #0
   837f6:	d001      	beq.n	837fc <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   837f8:	4b3e      	ldr	r3, [pc, #248]	; (838f4 <xQueueGenericReceive+0x1d4>)
   837fa:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   837fc:	4b3e      	ldr	r3, [pc, #248]	; (838f8 <xQueueGenericReceive+0x1d8>)
   837fe:	4798      	blx	r3
				return pdPASS;
   83800:	2301      	movs	r3, #1
   83802:	e066      	b.n	838d2 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83804:	687b      	ldr	r3, [r7, #4]
   83806:	2b00      	cmp	r3, #0
   83808:	d103      	bne.n	83812 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8380a:	4b3b      	ldr	r3, [pc, #236]	; (838f8 <xQueueGenericReceive+0x1d8>)
   8380c:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8380e:	2300      	movs	r3, #0
   83810:	e05f      	b.n	838d2 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83814:	2b00      	cmp	r3, #0
   83816:	d106      	bne.n	83826 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83818:	f107 0314 	add.w	r3, r7, #20
   8381c:	4618      	mov	r0, r3
   8381e:	4b37      	ldr	r3, [pc, #220]	; (838fc <xQueueGenericReceive+0x1dc>)
   83820:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83822:	2301      	movs	r3, #1
   83824:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83826:	4b34      	ldr	r3, [pc, #208]	; (838f8 <xQueueGenericReceive+0x1d8>)
   83828:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8382a:	4b35      	ldr	r3, [pc, #212]	; (83900 <xQueueGenericReceive+0x1e0>)
   8382c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8382e:	4b2d      	ldr	r3, [pc, #180]	; (838e4 <xQueueGenericReceive+0x1c4>)
   83830:	4798      	blx	r3
   83832:	6a3b      	ldr	r3, [r7, #32]
   83834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83836:	f1b3 3fff 	cmp.w	r3, #4294967295
   8383a:	d102      	bne.n	83842 <xQueueGenericReceive+0x122>
   8383c:	6a3b      	ldr	r3, [r7, #32]
   8383e:	2200      	movs	r2, #0
   83840:	645a      	str	r2, [r3, #68]	; 0x44
   83842:	6a3b      	ldr	r3, [r7, #32]
   83844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83846:	f1b3 3fff 	cmp.w	r3, #4294967295
   8384a:	d102      	bne.n	83852 <xQueueGenericReceive+0x132>
   8384c:	6a3b      	ldr	r3, [r7, #32]
   8384e:	2200      	movs	r2, #0
   83850:	649a      	str	r2, [r3, #72]	; 0x48
   83852:	4b29      	ldr	r3, [pc, #164]	; (838f8 <xQueueGenericReceive+0x1d8>)
   83854:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83856:	f107 0214 	add.w	r2, r7, #20
   8385a:	1d3b      	adds	r3, r7, #4
   8385c:	4610      	mov	r0, r2
   8385e:	4619      	mov	r1, r3
   83860:	4b28      	ldr	r3, [pc, #160]	; (83904 <xQueueGenericReceive+0x1e4>)
   83862:	4798      	blx	r3
   83864:	4603      	mov	r3, r0
   83866:	2b00      	cmp	r3, #0
   83868:	d12b      	bne.n	838c2 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   8386a:	6a38      	ldr	r0, [r7, #32]
   8386c:	4b26      	ldr	r3, [pc, #152]	; (83908 <xQueueGenericReceive+0x1e8>)
   8386e:	4798      	blx	r3
   83870:	4603      	mov	r3, r0
   83872:	2b00      	cmp	r3, #0
   83874:	d01f      	beq.n	838b6 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83876:	6a3b      	ldr	r3, [r7, #32]
   83878:	681b      	ldr	r3, [r3, #0]
   8387a:	2b00      	cmp	r3, #0
   8387c:	d108      	bne.n	83890 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   8387e:	4b19      	ldr	r3, [pc, #100]	; (838e4 <xQueueGenericReceive+0x1c4>)
   83880:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83882:	6a3b      	ldr	r3, [r7, #32]
   83884:	685b      	ldr	r3, [r3, #4]
   83886:	4618      	mov	r0, r3
   83888:	4b20      	ldr	r3, [pc, #128]	; (8390c <xQueueGenericReceive+0x1ec>)
   8388a:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   8388c:	4b1a      	ldr	r3, [pc, #104]	; (838f8 <xQueueGenericReceive+0x1d8>)
   8388e:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83890:	6a3b      	ldr	r3, [r7, #32]
   83892:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83896:	687b      	ldr	r3, [r7, #4]
   83898:	4610      	mov	r0, r2
   8389a:	4619      	mov	r1, r3
   8389c:	4b1c      	ldr	r3, [pc, #112]	; (83910 <xQueueGenericReceive+0x1f0>)
   8389e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   838a0:	6a38      	ldr	r0, [r7, #32]
   838a2:	4b1c      	ldr	r3, [pc, #112]	; (83914 <xQueueGenericReceive+0x1f4>)
   838a4:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   838a6:	4b1c      	ldr	r3, [pc, #112]	; (83918 <xQueueGenericReceive+0x1f8>)
   838a8:	4798      	blx	r3
   838aa:	4603      	mov	r3, r0
   838ac:	2b00      	cmp	r3, #0
   838ae:	d10f      	bne.n	838d0 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   838b0:	4b10      	ldr	r3, [pc, #64]	; (838f4 <xQueueGenericReceive+0x1d4>)
   838b2:	4798      	blx	r3
   838b4:	e00c      	b.n	838d0 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   838b6:	6a38      	ldr	r0, [r7, #32]
   838b8:	4b16      	ldr	r3, [pc, #88]	; (83914 <xQueueGenericReceive+0x1f4>)
   838ba:	4798      	blx	r3
				( void ) xTaskResumeAll();
   838bc:	4b16      	ldr	r3, [pc, #88]	; (83918 <xQueueGenericReceive+0x1f8>)
   838be:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   838c0:	e75e      	b.n	83780 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   838c2:	6a38      	ldr	r0, [r7, #32]
   838c4:	4b13      	ldr	r3, [pc, #76]	; (83914 <xQueueGenericReceive+0x1f4>)
   838c6:	4798      	blx	r3
			( void ) xTaskResumeAll();
   838c8:	4b13      	ldr	r3, [pc, #76]	; (83918 <xQueueGenericReceive+0x1f8>)
   838ca:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   838cc:	2300      	movs	r3, #0
   838ce:	e000      	b.n	838d2 <xQueueGenericReceive+0x1b2>
		}
	}
   838d0:	e756      	b.n	83780 <xQueueGenericReceive+0x60>
}
   838d2:	4618      	mov	r0, r3
   838d4:	3728      	adds	r7, #40	; 0x28
   838d6:	46bd      	mov	sp, r7
   838d8:	bd80      	pop	{r7, pc}
   838da:	bf00      	nop
   838dc:	00082e59 	.word	0x00082e59
   838e0:	000848a5 	.word	0x000848a5
   838e4:	00082ddd 	.word	0x00082ddd
   838e8:	00083a01 	.word	0x00083a01
   838ec:	00084ab9 	.word	0x00084ab9
   838f0:	000843cd 	.word	0x000843cd
   838f4:	00082dbd 	.word	0x00082dbd
   838f8:	00082e21 	.word	0x00082e21
   838fc:	0008448d 	.word	0x0008448d
   83900:	00083ec9 	.word	0x00083ec9
   83904:	000844c5 	.word	0x000844c5
   83908:	00083af9 	.word	0x00083af9
   8390c:	000848e1 	.word	0x000848e1
   83910:	000842ad 	.word	0x000842ad
   83914:	00083a51 	.word	0x00083a51
   83918:	00083ee5 	.word	0x00083ee5

0008391c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   8391c:	b580      	push	{r7, lr}
   8391e:	b086      	sub	sp, #24
   83920:	af00      	add	r7, sp, #0
   83922:	60f8      	str	r0, [r7, #12]
   83924:	60b9      	str	r1, [r7, #8]
   83926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   83928:	2300      	movs	r3, #0
   8392a:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   8392c:	68fb      	ldr	r3, [r7, #12]
   8392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83930:	2b00      	cmp	r3, #0
   83932:	d10d      	bne.n	83950 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83934:	68fb      	ldr	r3, [r7, #12]
   83936:	681b      	ldr	r3, [r3, #0]
   83938:	2b00      	cmp	r3, #0
   8393a:	d152      	bne.n	839e2 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   8393c:	68fb      	ldr	r3, [r7, #12]
   8393e:	685b      	ldr	r3, [r3, #4]
   83940:	4618      	mov	r0, r3
   83942:	4b2d      	ldr	r3, [pc, #180]	; (839f8 <prvCopyDataToQueue+0xdc>)
   83944:	4798      	blx	r3
   83946:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   83948:	68fb      	ldr	r3, [r7, #12]
   8394a:	2200      	movs	r2, #0
   8394c:	605a      	str	r2, [r3, #4]
   8394e:	e048      	b.n	839e2 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83950:	687b      	ldr	r3, [r7, #4]
   83952:	2b00      	cmp	r3, #0
   83954:	d11a      	bne.n	8398c <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83956:	68fb      	ldr	r3, [r7, #12]
   83958:	689a      	ldr	r2, [r3, #8]
   8395a:	68fb      	ldr	r3, [r7, #12]
   8395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8395e:	4610      	mov	r0, r2
   83960:	68b9      	ldr	r1, [r7, #8]
   83962:	461a      	mov	r2, r3
   83964:	4b25      	ldr	r3, [pc, #148]	; (839fc <prvCopyDataToQueue+0xe0>)
   83966:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83968:	68fb      	ldr	r3, [r7, #12]
   8396a:	689a      	ldr	r2, [r3, #8]
   8396c:	68fb      	ldr	r3, [r7, #12]
   8396e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83970:	441a      	add	r2, r3
   83972:	68fb      	ldr	r3, [r7, #12]
   83974:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83976:	68fb      	ldr	r3, [r7, #12]
   83978:	689a      	ldr	r2, [r3, #8]
   8397a:	68fb      	ldr	r3, [r7, #12]
   8397c:	685b      	ldr	r3, [r3, #4]
   8397e:	429a      	cmp	r2, r3
   83980:	d32f      	bcc.n	839e2 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83982:	68fb      	ldr	r3, [r7, #12]
   83984:	681a      	ldr	r2, [r3, #0]
   83986:	68fb      	ldr	r3, [r7, #12]
   83988:	609a      	str	r2, [r3, #8]
   8398a:	e02a      	b.n	839e2 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8398c:	68fb      	ldr	r3, [r7, #12]
   8398e:	68da      	ldr	r2, [r3, #12]
   83990:	68fb      	ldr	r3, [r7, #12]
   83992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83994:	4610      	mov	r0, r2
   83996:	68b9      	ldr	r1, [r7, #8]
   83998:	461a      	mov	r2, r3
   8399a:	4b18      	ldr	r3, [pc, #96]	; (839fc <prvCopyDataToQueue+0xe0>)
   8399c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   8399e:	68fb      	ldr	r3, [r7, #12]
   839a0:	68da      	ldr	r2, [r3, #12]
   839a2:	68fb      	ldr	r3, [r7, #12]
   839a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839a6:	425b      	negs	r3, r3
   839a8:	441a      	add	r2, r3
   839aa:	68fb      	ldr	r3, [r7, #12]
   839ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   839ae:	68fb      	ldr	r3, [r7, #12]
   839b0:	68da      	ldr	r2, [r3, #12]
   839b2:	68fb      	ldr	r3, [r7, #12]
   839b4:	681b      	ldr	r3, [r3, #0]
   839b6:	429a      	cmp	r2, r3
   839b8:	d207      	bcs.n	839ca <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   839ba:	68fb      	ldr	r3, [r7, #12]
   839bc:	685a      	ldr	r2, [r3, #4]
   839be:	68fb      	ldr	r3, [r7, #12]
   839c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839c2:	425b      	negs	r3, r3
   839c4:	441a      	add	r2, r3
   839c6:	68fb      	ldr	r3, [r7, #12]
   839c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   839ca:	687b      	ldr	r3, [r7, #4]
   839cc:	2b02      	cmp	r3, #2
   839ce:	d108      	bne.n	839e2 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   839d0:	68fb      	ldr	r3, [r7, #12]
   839d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   839d4:	2b00      	cmp	r3, #0
   839d6:	d004      	beq.n	839e2 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   839d8:	68fb      	ldr	r3, [r7, #12]
   839da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   839dc:	1e5a      	subs	r2, r3, #1
   839de:	68fb      	ldr	r3, [r7, #12]
   839e0:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   839e2:	68fb      	ldr	r3, [r7, #12]
   839e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   839e6:	1c5a      	adds	r2, r3, #1
   839e8:	68fb      	ldr	r3, [r7, #12]
   839ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   839ec:	697b      	ldr	r3, [r7, #20]
}
   839ee:	4618      	mov	r0, r3
   839f0:	3718      	adds	r7, #24
   839f2:	46bd      	mov	sp, r7
   839f4:	bd80      	pop	{r7, pc}
   839f6:	bf00      	nop
   839f8:	000849d5 	.word	0x000849d5
   839fc:	0008654d 	.word	0x0008654d

00083a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83a00:	b580      	push	{r7, lr}
   83a02:	b082      	sub	sp, #8
   83a04:	af00      	add	r7, sp, #0
   83a06:	6078      	str	r0, [r7, #4]
   83a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83a0a:	687b      	ldr	r3, [r7, #4]
   83a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a0e:	2b00      	cmp	r3, #0
   83a10:	d019      	beq.n	83a46 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83a12:	687b      	ldr	r3, [r7, #4]
   83a14:	68da      	ldr	r2, [r3, #12]
   83a16:	687b      	ldr	r3, [r7, #4]
   83a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a1a:	441a      	add	r2, r3
   83a1c:	687b      	ldr	r3, [r7, #4]
   83a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83a20:	687b      	ldr	r3, [r7, #4]
   83a22:	68da      	ldr	r2, [r3, #12]
   83a24:	687b      	ldr	r3, [r7, #4]
   83a26:	685b      	ldr	r3, [r3, #4]
   83a28:	429a      	cmp	r2, r3
   83a2a:	d303      	bcc.n	83a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83a2c:	687b      	ldr	r3, [r7, #4]
   83a2e:	681a      	ldr	r2, [r3, #0]
   83a30:	687b      	ldr	r3, [r7, #4]
   83a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83a34:	687b      	ldr	r3, [r7, #4]
   83a36:	68da      	ldr	r2, [r3, #12]
   83a38:	687b      	ldr	r3, [r7, #4]
   83a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a3c:	6838      	ldr	r0, [r7, #0]
   83a3e:	4611      	mov	r1, r2
   83a40:	461a      	mov	r2, r3
   83a42:	4b02      	ldr	r3, [pc, #8]	; (83a4c <prvCopyDataFromQueue+0x4c>)
   83a44:	4798      	blx	r3
	}
}
   83a46:	3708      	adds	r7, #8
   83a48:	46bd      	mov	sp, r7
   83a4a:	bd80      	pop	{r7, pc}
   83a4c:	0008654d 	.word	0x0008654d

00083a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83a50:	b580      	push	{r7, lr}
   83a52:	b082      	sub	sp, #8
   83a54:	af00      	add	r7, sp, #0
   83a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83a58:	4b23      	ldr	r3, [pc, #140]	; (83ae8 <prvUnlockQueue+0x98>)
   83a5a:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83a5c:	e014      	b.n	83a88 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83a5e:	687b      	ldr	r3, [r7, #4]
   83a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83a62:	2b00      	cmp	r3, #0
   83a64:	d00a      	beq.n	83a7c <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83a66:	687b      	ldr	r3, [r7, #4]
   83a68:	3324      	adds	r3, #36	; 0x24
   83a6a:	4618      	mov	r0, r3
   83a6c:	4b1f      	ldr	r3, [pc, #124]	; (83aec <prvUnlockQueue+0x9c>)
   83a6e:	4798      	blx	r3
   83a70:	4603      	mov	r3, r0
   83a72:	2b00      	cmp	r3, #0
   83a74:	d003      	beq.n	83a7e <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83a76:	4b1e      	ldr	r3, [pc, #120]	; (83af0 <prvUnlockQueue+0xa0>)
   83a78:	4798      	blx	r3
   83a7a:	e000      	b.n	83a7e <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83a7c:	e008      	b.n	83a90 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83a7e:	687b      	ldr	r3, [r7, #4]
   83a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a82:	1e5a      	subs	r2, r3, #1
   83a84:	687b      	ldr	r3, [r7, #4]
   83a86:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83a88:	687b      	ldr	r3, [r7, #4]
   83a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a8c:	2b00      	cmp	r3, #0
   83a8e:	dce6      	bgt.n	83a5e <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83a90:	687b      	ldr	r3, [r7, #4]
   83a92:	f04f 32ff 	mov.w	r2, #4294967295
   83a96:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83a98:	4b16      	ldr	r3, [pc, #88]	; (83af4 <prvUnlockQueue+0xa4>)
   83a9a:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83a9c:	4b12      	ldr	r3, [pc, #72]	; (83ae8 <prvUnlockQueue+0x98>)
   83a9e:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83aa0:	e014      	b.n	83acc <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83aa2:	687b      	ldr	r3, [r7, #4]
   83aa4:	691b      	ldr	r3, [r3, #16]
   83aa6:	2b00      	cmp	r3, #0
   83aa8:	d00f      	beq.n	83aca <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83aaa:	687b      	ldr	r3, [r7, #4]
   83aac:	3310      	adds	r3, #16
   83aae:	4618      	mov	r0, r3
   83ab0:	4b0e      	ldr	r3, [pc, #56]	; (83aec <prvUnlockQueue+0x9c>)
   83ab2:	4798      	blx	r3
   83ab4:	4603      	mov	r3, r0
   83ab6:	2b00      	cmp	r3, #0
   83ab8:	d001      	beq.n	83abe <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   83aba:	4b0d      	ldr	r3, [pc, #52]	; (83af0 <prvUnlockQueue+0xa0>)
   83abc:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83abe:	687b      	ldr	r3, [r7, #4]
   83ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83ac2:	1e5a      	subs	r2, r3, #1
   83ac4:	687b      	ldr	r3, [r7, #4]
   83ac6:	645a      	str	r2, [r3, #68]	; 0x44
   83ac8:	e000      	b.n	83acc <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   83aca:	e003      	b.n	83ad4 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83acc:	687b      	ldr	r3, [r7, #4]
   83ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83ad0:	2b00      	cmp	r3, #0
   83ad2:	dce6      	bgt.n	83aa2 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83ad4:	687b      	ldr	r3, [r7, #4]
   83ad6:	f04f 32ff 	mov.w	r2, #4294967295
   83ada:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83adc:	4b05      	ldr	r3, [pc, #20]	; (83af4 <prvUnlockQueue+0xa4>)
   83ade:	4798      	blx	r3
}
   83ae0:	3708      	adds	r7, #8
   83ae2:	46bd      	mov	sp, r7
   83ae4:	bd80      	pop	{r7, pc}
   83ae6:	bf00      	nop
   83ae8:	00082ddd 	.word	0x00082ddd
   83aec:	000843cd 	.word	0x000843cd
   83af0:	00084575 	.word	0x00084575
   83af4:	00082e21 	.word	0x00082e21

00083af8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   83af8:	b580      	push	{r7, lr}
   83afa:	b084      	sub	sp, #16
   83afc:	af00      	add	r7, sp, #0
   83afe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83b00:	4b08      	ldr	r3, [pc, #32]	; (83b24 <prvIsQueueEmpty+0x2c>)
   83b02:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83b04:	687b      	ldr	r3, [r7, #4]
   83b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83b08:	2b00      	cmp	r3, #0
   83b0a:	d102      	bne.n	83b12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   83b0c:	2301      	movs	r3, #1
   83b0e:	60fb      	str	r3, [r7, #12]
   83b10:	e001      	b.n	83b16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   83b12:	2300      	movs	r3, #0
   83b14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83b16:	4b04      	ldr	r3, [pc, #16]	; (83b28 <prvIsQueueEmpty+0x30>)
   83b18:	4798      	blx	r3

	return xReturn;
   83b1a:	68fb      	ldr	r3, [r7, #12]
}
   83b1c:	4618      	mov	r0, r3
   83b1e:	3710      	adds	r7, #16
   83b20:	46bd      	mov	sp, r7
   83b22:	bd80      	pop	{r7, pc}
   83b24:	00082ddd 	.word	0x00082ddd
   83b28:	00082e21 	.word	0x00082e21

00083b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   83b2c:	b580      	push	{r7, lr}
   83b2e:	b084      	sub	sp, #16
   83b30:	af00      	add	r7, sp, #0
   83b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83b34:	4b09      	ldr	r3, [pc, #36]	; (83b5c <prvIsQueueFull+0x30>)
   83b36:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   83b38:	687b      	ldr	r3, [r7, #4]
   83b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83b3c:	687b      	ldr	r3, [r7, #4]
   83b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83b40:	429a      	cmp	r2, r3
   83b42:	d102      	bne.n	83b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   83b44:	2301      	movs	r3, #1
   83b46:	60fb      	str	r3, [r7, #12]
   83b48:	e001      	b.n	83b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   83b4a:	2300      	movs	r3, #0
   83b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83b4e:	4b04      	ldr	r3, [pc, #16]	; (83b60 <prvIsQueueFull+0x34>)
   83b50:	4798      	blx	r3

	return xReturn;
   83b52:	68fb      	ldr	r3, [r7, #12]
}
   83b54:	4618      	mov	r0, r3
   83b56:	3710      	adds	r7, #16
   83b58:	46bd      	mov	sp, r7
   83b5a:	bd80      	pop	{r7, pc}
   83b5c:	00082ddd 	.word	0x00082ddd
   83b60:	00082e21 	.word	0x00082e21

00083b64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   83b64:	b580      	push	{r7, lr}
   83b66:	b084      	sub	sp, #16
   83b68:	af00      	add	r7, sp, #0
   83b6a:	6078      	str	r0, [r7, #4]
   83b6c:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83b6e:	687b      	ldr	r3, [r7, #4]
   83b70:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   83b72:	4b12      	ldr	r3, [pc, #72]	; (83bbc <vQueueWaitForMessageRestricted+0x58>)
   83b74:	4798      	blx	r3
   83b76:	68fb      	ldr	r3, [r7, #12]
   83b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b7e:	d102      	bne.n	83b86 <vQueueWaitForMessageRestricted+0x22>
   83b80:	68fb      	ldr	r3, [r7, #12]
   83b82:	2200      	movs	r2, #0
   83b84:	645a      	str	r2, [r3, #68]	; 0x44
   83b86:	68fb      	ldr	r3, [r7, #12]
   83b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b8e:	d102      	bne.n	83b96 <vQueueWaitForMessageRestricted+0x32>
   83b90:	68fb      	ldr	r3, [r7, #12]
   83b92:	2200      	movs	r2, #0
   83b94:	649a      	str	r2, [r3, #72]	; 0x48
   83b96:	4b0a      	ldr	r3, [pc, #40]	; (83bc0 <vQueueWaitForMessageRestricted+0x5c>)
   83b98:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   83b9a:	68fb      	ldr	r3, [r7, #12]
   83b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83b9e:	2b00      	cmp	r3, #0
   83ba0:	d105      	bne.n	83bae <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83ba2:	68fb      	ldr	r3, [r7, #12]
   83ba4:	3324      	adds	r3, #36	; 0x24
   83ba6:	4618      	mov	r0, r3
   83ba8:	6839      	ldr	r1, [r7, #0]
   83baa:	4b06      	ldr	r3, [pc, #24]	; (83bc4 <vQueueWaitForMessageRestricted+0x60>)
   83bac:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   83bae:	68f8      	ldr	r0, [r7, #12]
   83bb0:	4b05      	ldr	r3, [pc, #20]	; (83bc8 <vQueueWaitForMessageRestricted+0x64>)
   83bb2:	4798      	blx	r3
	}
   83bb4:	3710      	adds	r7, #16
   83bb6:	46bd      	mov	sp, r7
   83bb8:	bd80      	pop	{r7, pc}
   83bba:	bf00      	nop
   83bbc:	00082ddd 	.word	0x00082ddd
   83bc0:	00082e21 	.word	0x00082e21
   83bc4:	0008434d 	.word	0x0008434d
   83bc8:	00083a51 	.word	0x00083a51

00083bcc <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83bcc:	b590      	push	{r4, r7, lr}
   83bce:	b08b      	sub	sp, #44	; 0x2c
   83bd0:	af02      	add	r7, sp, #8
   83bd2:	60f8      	str	r0, [r7, #12]
   83bd4:	60b9      	str	r1, [r7, #8]
   83bd6:	603b      	str	r3, [r7, #0]
   83bd8:	4613      	mov	r3, r2
   83bda:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   83bdc:	68fb      	ldr	r3, [r7, #12]
   83bde:	2b00      	cmp	r3, #0
   83be0:	d102      	bne.n	83be8 <xTaskGenericCreate+0x1c>
   83be2:	4b4b      	ldr	r3, [pc, #300]	; (83d10 <xTaskGenericCreate+0x144>)
   83be4:	4798      	blx	r3
   83be6:	e7fe      	b.n	83be6 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   83be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83bea:	2b04      	cmp	r3, #4
   83bec:	d902      	bls.n	83bf4 <xTaskGenericCreate+0x28>
   83bee:	4b48      	ldr	r3, [pc, #288]	; (83d10 <xTaskGenericCreate+0x144>)
   83bf0:	4798      	blx	r3
   83bf2:	e7fe      	b.n	83bf2 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   83bf4:	88fb      	ldrh	r3, [r7, #6]
   83bf6:	4618      	mov	r0, r3
   83bf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   83bfa:	4b46      	ldr	r3, [pc, #280]	; (83d14 <xTaskGenericCreate+0x148>)
   83bfc:	4798      	blx	r3
   83bfe:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   83c00:	69bb      	ldr	r3, [r7, #24]
   83c02:	2b00      	cmp	r3, #0
   83c04:	d06d      	beq.n	83ce2 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   83c06:	69bb      	ldr	r3, [r7, #24]
   83c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83c0a:	88fb      	ldrh	r3, [r7, #6]
   83c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   83c10:	3b01      	subs	r3, #1
   83c12:	009b      	lsls	r3, r3, #2
   83c14:	4413      	add	r3, r2
   83c16:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   83c18:	697b      	ldr	r3, [r7, #20]
   83c1a:	f023 0307 	bic.w	r3, r3, #7
   83c1e:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   83c20:	697b      	ldr	r3, [r7, #20]
   83c22:	f003 0307 	and.w	r3, r3, #7
   83c26:	2b00      	cmp	r3, #0
   83c28:	d002      	beq.n	83c30 <xTaskGenericCreate+0x64>
   83c2a:	4b39      	ldr	r3, [pc, #228]	; (83d10 <xTaskGenericCreate+0x144>)
   83c2c:	4798      	blx	r3
   83c2e:	e7fe      	b.n	83c2e <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   83c30:	88fb      	ldrh	r3, [r7, #6]
   83c32:	9300      	str	r3, [sp, #0]
   83c34:	69b8      	ldr	r0, [r7, #24]
   83c36:	68b9      	ldr	r1, [r7, #8]
   83c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83c3c:	4c36      	ldr	r4, [pc, #216]	; (83d18 <xTaskGenericCreate+0x14c>)
   83c3e:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   83c40:	6978      	ldr	r0, [r7, #20]
   83c42:	68f9      	ldr	r1, [r7, #12]
   83c44:	683a      	ldr	r2, [r7, #0]
   83c46:	4b35      	ldr	r3, [pc, #212]	; (83d1c <xTaskGenericCreate+0x150>)
   83c48:	4798      	blx	r3
   83c4a:	4602      	mov	r2, r0
   83c4c:	69bb      	ldr	r3, [r7, #24]
   83c4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   83c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83c52:	2b00      	cmp	r3, #0
   83c54:	d002      	beq.n	83c5c <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   83c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83c58:	69ba      	ldr	r2, [r7, #24]
   83c5a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   83c5c:	4b30      	ldr	r3, [pc, #192]	; (83d20 <xTaskGenericCreate+0x154>)
   83c5e:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   83c60:	4b30      	ldr	r3, [pc, #192]	; (83d24 <xTaskGenericCreate+0x158>)
   83c62:	681b      	ldr	r3, [r3, #0]
   83c64:	1c5a      	adds	r2, r3, #1
   83c66:	4b2f      	ldr	r3, [pc, #188]	; (83d24 <xTaskGenericCreate+0x158>)
   83c68:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   83c6a:	4b2f      	ldr	r3, [pc, #188]	; (83d28 <xTaskGenericCreate+0x15c>)
   83c6c:	681b      	ldr	r3, [r3, #0]
   83c6e:	2b00      	cmp	r3, #0
   83c70:	d109      	bne.n	83c86 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   83c72:	4b2d      	ldr	r3, [pc, #180]	; (83d28 <xTaskGenericCreate+0x15c>)
   83c74:	69ba      	ldr	r2, [r7, #24]
   83c76:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   83c78:	4b2a      	ldr	r3, [pc, #168]	; (83d24 <xTaskGenericCreate+0x158>)
   83c7a:	681b      	ldr	r3, [r3, #0]
   83c7c:	2b01      	cmp	r3, #1
   83c7e:	d10f      	bne.n	83ca0 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83c80:	4b2a      	ldr	r3, [pc, #168]	; (83d2c <xTaskGenericCreate+0x160>)
   83c82:	4798      	blx	r3
   83c84:	e00c      	b.n	83ca0 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   83c86:	4b2a      	ldr	r3, [pc, #168]	; (83d30 <xTaskGenericCreate+0x164>)
   83c88:	681b      	ldr	r3, [r3, #0]
   83c8a:	2b00      	cmp	r3, #0
   83c8c:	d108      	bne.n	83ca0 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   83c8e:	4b26      	ldr	r3, [pc, #152]	; (83d28 <xTaskGenericCreate+0x15c>)
   83c90:	681b      	ldr	r3, [r3, #0]
   83c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83c96:	429a      	cmp	r2, r3
   83c98:	d802      	bhi.n	83ca0 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   83c9a:	4b23      	ldr	r3, [pc, #140]	; (83d28 <xTaskGenericCreate+0x15c>)
   83c9c:	69ba      	ldr	r2, [r7, #24]
   83c9e:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83ca0:	4b24      	ldr	r3, [pc, #144]	; (83d34 <xTaskGenericCreate+0x168>)
   83ca2:	681b      	ldr	r3, [r3, #0]
   83ca4:	1c5a      	adds	r2, r3, #1
   83ca6:	4b23      	ldr	r3, [pc, #140]	; (83d34 <xTaskGenericCreate+0x168>)
   83ca8:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   83caa:	69bb      	ldr	r3, [r7, #24]
   83cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83cae:	2201      	movs	r2, #1
   83cb0:	409a      	lsls	r2, r3
   83cb2:	4b21      	ldr	r3, [pc, #132]	; (83d38 <xTaskGenericCreate+0x16c>)
   83cb4:	681b      	ldr	r3, [r3, #0]
   83cb6:	431a      	orrs	r2, r3
   83cb8:	4b1f      	ldr	r3, [pc, #124]	; (83d38 <xTaskGenericCreate+0x16c>)
   83cba:	601a      	str	r2, [r3, #0]
   83cbc:	69bb      	ldr	r3, [r7, #24]
   83cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83cc0:	4613      	mov	r3, r2
   83cc2:	009b      	lsls	r3, r3, #2
   83cc4:	4413      	add	r3, r2
   83cc6:	009b      	lsls	r3, r3, #2
   83cc8:	4a1c      	ldr	r2, [pc, #112]	; (83d3c <xTaskGenericCreate+0x170>)
   83cca:	441a      	add	r2, r3
   83ccc:	69bb      	ldr	r3, [r7, #24]
   83cce:	3304      	adds	r3, #4
   83cd0:	4610      	mov	r0, r2
   83cd2:	4619      	mov	r1, r3
   83cd4:	4b1a      	ldr	r3, [pc, #104]	; (83d40 <xTaskGenericCreate+0x174>)
   83cd6:	4798      	blx	r3

			xReturn = pdPASS;
   83cd8:	2301      	movs	r3, #1
   83cda:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   83cdc:	4b19      	ldr	r3, [pc, #100]	; (83d44 <xTaskGenericCreate+0x178>)
   83cde:	4798      	blx	r3
   83ce0:	e002      	b.n	83ce8 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   83ce2:	f04f 33ff 	mov.w	r3, #4294967295
   83ce6:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   83ce8:	69fb      	ldr	r3, [r7, #28]
   83cea:	2b01      	cmp	r3, #1
   83cec:	d10b      	bne.n	83d06 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   83cee:	4b10      	ldr	r3, [pc, #64]	; (83d30 <xTaskGenericCreate+0x164>)
   83cf0:	681b      	ldr	r3, [r3, #0]
   83cf2:	2b00      	cmp	r3, #0
   83cf4:	d007      	beq.n	83d06 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   83cf6:	4b0c      	ldr	r3, [pc, #48]	; (83d28 <xTaskGenericCreate+0x15c>)
   83cf8:	681b      	ldr	r3, [r3, #0]
   83cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83cfe:	429a      	cmp	r2, r3
   83d00:	d201      	bcs.n	83d06 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   83d02:	4b11      	ldr	r3, [pc, #68]	; (83d48 <xTaskGenericCreate+0x17c>)
   83d04:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   83d06:	69fb      	ldr	r3, [r7, #28]
}
   83d08:	4618      	mov	r0, r3
   83d0a:	3724      	adds	r7, #36	; 0x24
   83d0c:	46bd      	mov	sp, r7
   83d0e:	bd90      	pop	{r4, r7, pc}
   83d10:	00082e59 	.word	0x00082e59
   83d14:	000847c9 	.word	0x000847c9
   83d18:	000845b5 	.word	0x000845b5
   83d1c:	00082c35 	.word	0x00082c35
   83d20:	00082ddd 	.word	0x00082ddd
   83d24:	2007a648 	.word	0x2007a648
   83d28:	2007a570 	.word	0x2007a570
   83d2c:	0008464d 	.word	0x0008464d
   83d30:	2007a654 	.word	0x2007a654
   83d34:	2007a664 	.word	0x2007a664
   83d38:	2007a650 	.word	0x2007a650
   83d3c:	2007a574 	.word	0x2007a574
   83d40:	00082b29 	.word	0x00082b29
   83d44:	00082e21 	.word	0x00082e21
   83d48:	00082dbd 	.word	0x00082dbd

00083d4c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   83d4c:	b580      	push	{r7, lr}
   83d4e:	b086      	sub	sp, #24
   83d50:	af00      	add	r7, sp, #0
   83d52:	6078      	str	r0, [r7, #4]
   83d54:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   83d56:	2300      	movs	r3, #0
   83d58:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   83d5a:	687b      	ldr	r3, [r7, #4]
   83d5c:	2b00      	cmp	r3, #0
   83d5e:	d102      	bne.n	83d66 <vTaskDelayUntil+0x1a>
   83d60:	4b2f      	ldr	r3, [pc, #188]	; (83e20 <vTaskDelayUntil+0xd4>)
   83d62:	4798      	blx	r3
   83d64:	e7fe      	b.n	83d64 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   83d66:	683b      	ldr	r3, [r7, #0]
   83d68:	2b00      	cmp	r3, #0
   83d6a:	d102      	bne.n	83d72 <vTaskDelayUntil+0x26>
   83d6c:	4b2c      	ldr	r3, [pc, #176]	; (83e20 <vTaskDelayUntil+0xd4>)
   83d6e:	4798      	blx	r3
   83d70:	e7fe      	b.n	83d70 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   83d72:	4b2c      	ldr	r3, [pc, #176]	; (83e24 <vTaskDelayUntil+0xd8>)
   83d74:	681b      	ldr	r3, [r3, #0]
   83d76:	2b00      	cmp	r3, #0
   83d78:	d002      	beq.n	83d80 <vTaskDelayUntil+0x34>
   83d7a:	4b29      	ldr	r3, [pc, #164]	; (83e20 <vTaskDelayUntil+0xd4>)
   83d7c:	4798      	blx	r3
   83d7e:	e7fe      	b.n	83d7e <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   83d80:	4b29      	ldr	r3, [pc, #164]	; (83e28 <vTaskDelayUntil+0xdc>)
   83d82:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   83d84:	4b29      	ldr	r3, [pc, #164]	; (83e2c <vTaskDelayUntil+0xe0>)
   83d86:	681b      	ldr	r3, [r3, #0]
   83d88:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   83d8a:	687b      	ldr	r3, [r7, #4]
   83d8c:	681a      	ldr	r2, [r3, #0]
   83d8e:	683b      	ldr	r3, [r7, #0]
   83d90:	4413      	add	r3, r2
   83d92:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   83d94:	687b      	ldr	r3, [r7, #4]
   83d96:	681a      	ldr	r2, [r3, #0]
   83d98:	693b      	ldr	r3, [r7, #16]
   83d9a:	429a      	cmp	r2, r3
   83d9c:	d90b      	bls.n	83db6 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   83d9e:	687b      	ldr	r3, [r7, #4]
   83da0:	681a      	ldr	r2, [r3, #0]
   83da2:	68fb      	ldr	r3, [r7, #12]
   83da4:	429a      	cmp	r2, r3
   83da6:	d911      	bls.n	83dcc <vTaskDelayUntil+0x80>
   83da8:	68fa      	ldr	r2, [r7, #12]
   83daa:	693b      	ldr	r3, [r7, #16]
   83dac:	429a      	cmp	r2, r3
   83dae:	d90d      	bls.n	83dcc <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83db0:	2301      	movs	r3, #1
   83db2:	617b      	str	r3, [r7, #20]
   83db4:	e00a      	b.n	83dcc <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   83db6:	687b      	ldr	r3, [r7, #4]
   83db8:	681a      	ldr	r2, [r3, #0]
   83dba:	68fb      	ldr	r3, [r7, #12]
   83dbc:	429a      	cmp	r2, r3
   83dbe:	d803      	bhi.n	83dc8 <vTaskDelayUntil+0x7c>
   83dc0:	68fa      	ldr	r2, [r7, #12]
   83dc2:	693b      	ldr	r3, [r7, #16]
   83dc4:	429a      	cmp	r2, r3
   83dc6:	d901      	bls.n	83dcc <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   83dc8:	2301      	movs	r3, #1
   83dca:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   83dcc:	687b      	ldr	r3, [r7, #4]
   83dce:	68fa      	ldr	r2, [r7, #12]
   83dd0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   83dd2:	697b      	ldr	r3, [r7, #20]
   83dd4:	2b00      	cmp	r3, #0
   83dd6:	d017      	beq.n	83e08 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83dd8:	4b15      	ldr	r3, [pc, #84]	; (83e30 <vTaskDelayUntil+0xe4>)
   83dda:	681b      	ldr	r3, [r3, #0]
   83ddc:	3304      	adds	r3, #4
   83dde:	4618      	mov	r0, r3
   83de0:	4b14      	ldr	r3, [pc, #80]	; (83e34 <vTaskDelayUntil+0xe8>)
   83de2:	4798      	blx	r3
   83de4:	4603      	mov	r3, r0
   83de6:	2b00      	cmp	r3, #0
   83de8:	d10b      	bne.n	83e02 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83dea:	4b11      	ldr	r3, [pc, #68]	; (83e30 <vTaskDelayUntil+0xe4>)
   83dec:	681b      	ldr	r3, [r3, #0]
   83dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83df0:	2201      	movs	r2, #1
   83df2:	fa02 f303 	lsl.w	r3, r2, r3
   83df6:	43da      	mvns	r2, r3
   83df8:	4b0f      	ldr	r3, [pc, #60]	; (83e38 <vTaskDelayUntil+0xec>)
   83dfa:	681b      	ldr	r3, [r3, #0]
   83dfc:	401a      	ands	r2, r3
   83dfe:	4b0e      	ldr	r3, [pc, #56]	; (83e38 <vTaskDelayUntil+0xec>)
   83e00:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   83e02:	68f8      	ldr	r0, [r7, #12]
   83e04:	4b0d      	ldr	r3, [pc, #52]	; (83e3c <vTaskDelayUntil+0xf0>)
   83e06:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   83e08:	4b0d      	ldr	r3, [pc, #52]	; (83e40 <vTaskDelayUntil+0xf4>)
   83e0a:	4798      	blx	r3
   83e0c:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   83e0e:	68bb      	ldr	r3, [r7, #8]
   83e10:	2b00      	cmp	r3, #0
   83e12:	d101      	bne.n	83e18 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   83e14:	4b0b      	ldr	r3, [pc, #44]	; (83e44 <vTaskDelayUntil+0xf8>)
   83e16:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   83e18:	3718      	adds	r7, #24
   83e1a:	46bd      	mov	sp, r7
   83e1c:	bd80      	pop	{r7, pc}
   83e1e:	bf00      	nop
   83e20:	00082e59 	.word	0x00082e59
   83e24:	2007a668 	.word	0x2007a668
   83e28:	00083ec9 	.word	0x00083ec9
   83e2c:	2007a64c 	.word	0x2007a64c
   83e30:	2007a570 	.word	0x2007a570
   83e34:	00082be1 	.word	0x00082be1
   83e38:	2007a650 	.word	0x2007a650
   83e3c:	00084759 	.word	0x00084759
   83e40:	00083ee5 	.word	0x00083ee5
   83e44:	00082dbd 	.word	0x00082dbd

00083e48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   83e48:	b590      	push	{r4, r7, lr}
   83e4a:	b087      	sub	sp, #28
   83e4c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   83e4e:	2300      	movs	r3, #0
   83e50:	9300      	str	r3, [sp, #0]
   83e52:	2300      	movs	r3, #0
   83e54:	9301      	str	r3, [sp, #4]
   83e56:	2300      	movs	r3, #0
   83e58:	9302      	str	r3, [sp, #8]
   83e5a:	2300      	movs	r3, #0
   83e5c:	9303      	str	r3, [sp, #12]
   83e5e:	4812      	ldr	r0, [pc, #72]	; (83ea8 <vTaskStartScheduler+0x60>)
   83e60:	4912      	ldr	r1, [pc, #72]	; (83eac <vTaskStartScheduler+0x64>)
   83e62:	2282      	movs	r2, #130	; 0x82
   83e64:	2300      	movs	r3, #0
   83e66:	4c12      	ldr	r4, [pc, #72]	; (83eb0 <vTaskStartScheduler+0x68>)
   83e68:	47a0      	blx	r4
   83e6a:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   83e6c:	687b      	ldr	r3, [r7, #4]
   83e6e:	2b01      	cmp	r3, #1
   83e70:	d102      	bne.n	83e78 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   83e72:	4b10      	ldr	r3, [pc, #64]	; (83eb4 <vTaskStartScheduler+0x6c>)
   83e74:	4798      	blx	r3
   83e76:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   83e78:	687b      	ldr	r3, [r7, #4]
   83e7a:	2b01      	cmp	r3, #1
   83e7c:	d10a      	bne.n	83e94 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   83e7e:	4b0e      	ldr	r3, [pc, #56]	; (83eb8 <vTaskStartScheduler+0x70>)
   83e80:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   83e82:	4b0e      	ldr	r3, [pc, #56]	; (83ebc <vTaskStartScheduler+0x74>)
   83e84:	2201      	movs	r2, #1
   83e86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   83e88:	4b0d      	ldr	r3, [pc, #52]	; (83ec0 <vTaskStartScheduler+0x78>)
   83e8a:	2200      	movs	r2, #0
   83e8c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   83e8e:	4b0d      	ldr	r3, [pc, #52]	; (83ec4 <vTaskStartScheduler+0x7c>)
   83e90:	4798      	blx	r3
   83e92:	e005      	b.n	83ea0 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   83e94:	687b      	ldr	r3, [r7, #4]
   83e96:	2b00      	cmp	r3, #0
   83e98:	d102      	bne.n	83ea0 <vTaskStartScheduler+0x58>
   83e9a:	4b07      	ldr	r3, [pc, #28]	; (83eb8 <vTaskStartScheduler+0x70>)
   83e9c:	4798      	blx	r3
   83e9e:	e7fe      	b.n	83e9e <vTaskStartScheduler+0x56>
	}
}
   83ea0:	370c      	adds	r7, #12
   83ea2:	46bd      	mov	sp, r7
   83ea4:	bd90      	pop	{r4, r7, pc}
   83ea6:	bf00      	nop
   83ea8:	0008458d 	.word	0x0008458d
   83eac:	00086924 	.word	0x00086924
   83eb0:	00083bcd 	.word	0x00083bcd
   83eb4:	00084ae1 	.word	0x00084ae1
   83eb8:	00082e59 	.word	0x00082e59
   83ebc:	2007a654 	.word	0x2007a654
   83ec0:	2007a64c 	.word	0x2007a64c
   83ec4:	00082cf5 	.word	0x00082cf5

00083ec8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   83ec8:	b480      	push	{r7}
   83eca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   83ecc:	4b04      	ldr	r3, [pc, #16]	; (83ee0 <vTaskSuspendAll+0x18>)
   83ece:	681b      	ldr	r3, [r3, #0]
   83ed0:	1c5a      	adds	r2, r3, #1
   83ed2:	4b03      	ldr	r3, [pc, #12]	; (83ee0 <vTaskSuspendAll+0x18>)
   83ed4:	601a      	str	r2, [r3, #0]
}
   83ed6:	46bd      	mov	sp, r7
   83ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
   83edc:	4770      	bx	lr
   83ede:	bf00      	nop
   83ee0:	2007a668 	.word	0x2007a668

00083ee4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   83ee4:	b580      	push	{r7, lr}
   83ee6:	b082      	sub	sp, #8
   83ee8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   83eea:	2300      	movs	r3, #0
   83eec:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   83eee:	4b37      	ldr	r3, [pc, #220]	; (83fcc <xTaskResumeAll+0xe8>)
   83ef0:	681b      	ldr	r3, [r3, #0]
   83ef2:	2b00      	cmp	r3, #0
   83ef4:	d102      	bne.n	83efc <xTaskResumeAll+0x18>
   83ef6:	4b36      	ldr	r3, [pc, #216]	; (83fd0 <xTaskResumeAll+0xec>)
   83ef8:	4798      	blx	r3
   83efa:	e7fe      	b.n	83efa <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   83efc:	4b35      	ldr	r3, [pc, #212]	; (83fd4 <xTaskResumeAll+0xf0>)
   83efe:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   83f00:	4b32      	ldr	r3, [pc, #200]	; (83fcc <xTaskResumeAll+0xe8>)
   83f02:	681b      	ldr	r3, [r3, #0]
   83f04:	1e5a      	subs	r2, r3, #1
   83f06:	4b31      	ldr	r3, [pc, #196]	; (83fcc <xTaskResumeAll+0xe8>)
   83f08:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83f0a:	4b30      	ldr	r3, [pc, #192]	; (83fcc <xTaskResumeAll+0xe8>)
   83f0c:	681b      	ldr	r3, [r3, #0]
   83f0e:	2b00      	cmp	r3, #0
   83f10:	d155      	bne.n	83fbe <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   83f12:	4b31      	ldr	r3, [pc, #196]	; (83fd8 <xTaskResumeAll+0xf4>)
   83f14:	681b      	ldr	r3, [r3, #0]
   83f16:	2b00      	cmp	r3, #0
   83f18:	d051      	beq.n	83fbe <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f1a:	e02e      	b.n	83f7a <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   83f1c:	4b2f      	ldr	r3, [pc, #188]	; (83fdc <xTaskResumeAll+0xf8>)
   83f1e:	68db      	ldr	r3, [r3, #12]
   83f20:	68db      	ldr	r3, [r3, #12]
   83f22:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   83f24:	683b      	ldr	r3, [r7, #0]
   83f26:	3318      	adds	r3, #24
   83f28:	4618      	mov	r0, r3
   83f2a:	4b2d      	ldr	r3, [pc, #180]	; (83fe0 <xTaskResumeAll+0xfc>)
   83f2c:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   83f2e:	683b      	ldr	r3, [r7, #0]
   83f30:	3304      	adds	r3, #4
   83f32:	4618      	mov	r0, r3
   83f34:	4b2a      	ldr	r3, [pc, #168]	; (83fe0 <xTaskResumeAll+0xfc>)
   83f36:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   83f38:	683b      	ldr	r3, [r7, #0]
   83f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f3c:	2201      	movs	r2, #1
   83f3e:	409a      	lsls	r2, r3
   83f40:	4b28      	ldr	r3, [pc, #160]	; (83fe4 <xTaskResumeAll+0x100>)
   83f42:	681b      	ldr	r3, [r3, #0]
   83f44:	431a      	orrs	r2, r3
   83f46:	4b27      	ldr	r3, [pc, #156]	; (83fe4 <xTaskResumeAll+0x100>)
   83f48:	601a      	str	r2, [r3, #0]
   83f4a:	683b      	ldr	r3, [r7, #0]
   83f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f4e:	4613      	mov	r3, r2
   83f50:	009b      	lsls	r3, r3, #2
   83f52:	4413      	add	r3, r2
   83f54:	009b      	lsls	r3, r3, #2
   83f56:	4a24      	ldr	r2, [pc, #144]	; (83fe8 <xTaskResumeAll+0x104>)
   83f58:	441a      	add	r2, r3
   83f5a:	683b      	ldr	r3, [r7, #0]
   83f5c:	3304      	adds	r3, #4
   83f5e:	4610      	mov	r0, r2
   83f60:	4619      	mov	r1, r3
   83f62:	4b22      	ldr	r3, [pc, #136]	; (83fec <xTaskResumeAll+0x108>)
   83f64:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83f66:	683b      	ldr	r3, [r7, #0]
   83f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f6a:	4b21      	ldr	r3, [pc, #132]	; (83ff0 <xTaskResumeAll+0x10c>)
   83f6c:	681b      	ldr	r3, [r3, #0]
   83f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f70:	429a      	cmp	r2, r3
   83f72:	d302      	bcc.n	83f7a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   83f74:	4b1f      	ldr	r3, [pc, #124]	; (83ff4 <xTaskResumeAll+0x110>)
   83f76:	2201      	movs	r2, #1
   83f78:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f7a:	4b18      	ldr	r3, [pc, #96]	; (83fdc <xTaskResumeAll+0xf8>)
   83f7c:	681b      	ldr	r3, [r3, #0]
   83f7e:	2b00      	cmp	r3, #0
   83f80:	d1cc      	bne.n	83f1c <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   83f82:	4b1d      	ldr	r3, [pc, #116]	; (83ff8 <xTaskResumeAll+0x114>)
   83f84:	681b      	ldr	r3, [r3, #0]
   83f86:	2b00      	cmp	r3, #0
   83f88:	d011      	beq.n	83fae <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83f8a:	e00c      	b.n	83fa6 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   83f8c:	4b1b      	ldr	r3, [pc, #108]	; (83ffc <xTaskResumeAll+0x118>)
   83f8e:	4798      	blx	r3
   83f90:	4603      	mov	r3, r0
   83f92:	2b00      	cmp	r3, #0
   83f94:	d002      	beq.n	83f9c <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   83f96:	4b17      	ldr	r3, [pc, #92]	; (83ff4 <xTaskResumeAll+0x110>)
   83f98:	2201      	movs	r2, #1
   83f9a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   83f9c:	4b16      	ldr	r3, [pc, #88]	; (83ff8 <xTaskResumeAll+0x114>)
   83f9e:	681b      	ldr	r3, [r3, #0]
   83fa0:	1e5a      	subs	r2, r3, #1
   83fa2:	4b15      	ldr	r3, [pc, #84]	; (83ff8 <xTaskResumeAll+0x114>)
   83fa4:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83fa6:	4b14      	ldr	r3, [pc, #80]	; (83ff8 <xTaskResumeAll+0x114>)
   83fa8:	681b      	ldr	r3, [r3, #0]
   83faa:	2b00      	cmp	r3, #0
   83fac:	d1ee      	bne.n	83f8c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   83fae:	4b11      	ldr	r3, [pc, #68]	; (83ff4 <xTaskResumeAll+0x110>)
   83fb0:	681b      	ldr	r3, [r3, #0]
   83fb2:	2b01      	cmp	r3, #1
   83fb4:	d103      	bne.n	83fbe <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   83fb6:	2301      	movs	r3, #1
   83fb8:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   83fba:	4b11      	ldr	r3, [pc, #68]	; (84000 <xTaskResumeAll+0x11c>)
   83fbc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83fbe:	4b11      	ldr	r3, [pc, #68]	; (84004 <xTaskResumeAll+0x120>)
   83fc0:	4798      	blx	r3

	return xAlreadyYielded;
   83fc2:	687b      	ldr	r3, [r7, #4]
}
   83fc4:	4618      	mov	r0, r3
   83fc6:	3708      	adds	r7, #8
   83fc8:	46bd      	mov	sp, r7
   83fca:	bd80      	pop	{r7, pc}
   83fcc:	2007a668 	.word	0x2007a668
   83fd0:	00082e59 	.word	0x00082e59
   83fd4:	00082ddd 	.word	0x00082ddd
   83fd8:	2007a648 	.word	0x2007a648
   83fdc:	2007a608 	.word	0x2007a608
   83fe0:	00082be1 	.word	0x00082be1
   83fe4:	2007a650 	.word	0x2007a650
   83fe8:	2007a574 	.word	0x2007a574
   83fec:	00082b29 	.word	0x00082b29
   83ff0:	2007a570 	.word	0x2007a570
   83ff4:	2007a65c 	.word	0x2007a65c
   83ff8:	2007a658 	.word	0x2007a658
   83ffc:	00084035 	.word	0x00084035
   84000:	00082dbd 	.word	0x00082dbd
   84004:	00082e21 	.word	0x00082e21

00084008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   84008:	b580      	push	{r7, lr}
   8400a:	b082      	sub	sp, #8
   8400c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8400e:	4b06      	ldr	r3, [pc, #24]	; (84028 <xTaskGetTickCount+0x20>)
   84010:	4798      	blx	r3
	{
		xTicks = xTickCount;
   84012:	4b06      	ldr	r3, [pc, #24]	; (8402c <xTaskGetTickCount+0x24>)
   84014:	681b      	ldr	r3, [r3, #0]
   84016:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   84018:	4b05      	ldr	r3, [pc, #20]	; (84030 <xTaskGetTickCount+0x28>)
   8401a:	4798      	blx	r3

	return xTicks;
   8401c:	687b      	ldr	r3, [r7, #4]
}
   8401e:	4618      	mov	r0, r3
   84020:	3708      	adds	r7, #8
   84022:	46bd      	mov	sp, r7
   84024:	bd80      	pop	{r7, pc}
   84026:	bf00      	nop
   84028:	00082ddd 	.word	0x00082ddd
   8402c:	2007a64c 	.word	0x2007a64c
   84030:	00082e21 	.word	0x00082e21

00084034 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   84034:	b580      	push	{r7, lr}
   84036:	b086      	sub	sp, #24
   84038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8403a:	2300      	movs	r3, #0
   8403c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8403e:	4b4d      	ldr	r3, [pc, #308]	; (84174 <xTaskIncrementTick+0x140>)
   84040:	681b      	ldr	r3, [r3, #0]
   84042:	2b00      	cmp	r3, #0
   84044:	f040 8086 	bne.w	84154 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   84048:	4b4b      	ldr	r3, [pc, #300]	; (84178 <xTaskIncrementTick+0x144>)
   8404a:	681b      	ldr	r3, [r3, #0]
   8404c:	1c5a      	adds	r2, r3, #1
   8404e:	4b4a      	ldr	r3, [pc, #296]	; (84178 <xTaskIncrementTick+0x144>)
   84050:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   84052:	4b49      	ldr	r3, [pc, #292]	; (84178 <xTaskIncrementTick+0x144>)
   84054:	681b      	ldr	r3, [r3, #0]
   84056:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   84058:	693b      	ldr	r3, [r7, #16]
   8405a:	2b00      	cmp	r3, #0
   8405c:	d118      	bne.n	84090 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   8405e:	4b47      	ldr	r3, [pc, #284]	; (8417c <xTaskIncrementTick+0x148>)
   84060:	681b      	ldr	r3, [r3, #0]
   84062:	681b      	ldr	r3, [r3, #0]
   84064:	2b00      	cmp	r3, #0
   84066:	d002      	beq.n	8406e <xTaskIncrementTick+0x3a>
   84068:	4b45      	ldr	r3, [pc, #276]	; (84180 <xTaskIncrementTick+0x14c>)
   8406a:	4798      	blx	r3
   8406c:	e7fe      	b.n	8406c <xTaskIncrementTick+0x38>
   8406e:	4b43      	ldr	r3, [pc, #268]	; (8417c <xTaskIncrementTick+0x148>)
   84070:	681b      	ldr	r3, [r3, #0]
   84072:	60fb      	str	r3, [r7, #12]
   84074:	4b43      	ldr	r3, [pc, #268]	; (84184 <xTaskIncrementTick+0x150>)
   84076:	681a      	ldr	r2, [r3, #0]
   84078:	4b40      	ldr	r3, [pc, #256]	; (8417c <xTaskIncrementTick+0x148>)
   8407a:	601a      	str	r2, [r3, #0]
   8407c:	4b41      	ldr	r3, [pc, #260]	; (84184 <xTaskIncrementTick+0x150>)
   8407e:	68fa      	ldr	r2, [r7, #12]
   84080:	601a      	str	r2, [r3, #0]
   84082:	4b41      	ldr	r3, [pc, #260]	; (84188 <xTaskIncrementTick+0x154>)
   84084:	681b      	ldr	r3, [r3, #0]
   84086:	1c5a      	adds	r2, r3, #1
   84088:	4b3f      	ldr	r3, [pc, #252]	; (84188 <xTaskIncrementTick+0x154>)
   8408a:	601a      	str	r2, [r3, #0]
   8408c:	4b3f      	ldr	r3, [pc, #252]	; (8418c <xTaskIncrementTick+0x158>)
   8408e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   84090:	4b3f      	ldr	r3, [pc, #252]	; (84190 <xTaskIncrementTick+0x15c>)
   84092:	681b      	ldr	r3, [r3, #0]
   84094:	693a      	ldr	r2, [r7, #16]
   84096:	429a      	cmp	r2, r3
   84098:	d34d      	bcc.n	84136 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8409a:	4b38      	ldr	r3, [pc, #224]	; (8417c <xTaskIncrementTick+0x148>)
   8409c:	681b      	ldr	r3, [r3, #0]
   8409e:	681b      	ldr	r3, [r3, #0]
   840a0:	2b00      	cmp	r3, #0
   840a2:	d101      	bne.n	840a8 <xTaskIncrementTick+0x74>
   840a4:	2301      	movs	r3, #1
   840a6:	e000      	b.n	840aa <xTaskIncrementTick+0x76>
   840a8:	2300      	movs	r3, #0
   840aa:	2b00      	cmp	r3, #0
   840ac:	d004      	beq.n	840b8 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   840ae:	4b38      	ldr	r3, [pc, #224]	; (84190 <xTaskIncrementTick+0x15c>)
   840b0:	f04f 32ff 	mov.w	r2, #4294967295
   840b4:	601a      	str	r2, [r3, #0]
						break;
   840b6:	e03e      	b.n	84136 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   840b8:	4b30      	ldr	r3, [pc, #192]	; (8417c <xTaskIncrementTick+0x148>)
   840ba:	681b      	ldr	r3, [r3, #0]
   840bc:	68db      	ldr	r3, [r3, #12]
   840be:	68db      	ldr	r3, [r3, #12]
   840c0:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   840c2:	68bb      	ldr	r3, [r7, #8]
   840c4:	685b      	ldr	r3, [r3, #4]
   840c6:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   840c8:	693a      	ldr	r2, [r7, #16]
   840ca:	687b      	ldr	r3, [r7, #4]
   840cc:	429a      	cmp	r2, r3
   840ce:	d203      	bcs.n	840d8 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   840d0:	4b2f      	ldr	r3, [pc, #188]	; (84190 <xTaskIncrementTick+0x15c>)
   840d2:	687a      	ldr	r2, [r7, #4]
   840d4:	601a      	str	r2, [r3, #0]
							break;
   840d6:	e02e      	b.n	84136 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   840d8:	68bb      	ldr	r3, [r7, #8]
   840da:	3304      	adds	r3, #4
   840dc:	4618      	mov	r0, r3
   840de:	4b2d      	ldr	r3, [pc, #180]	; (84194 <xTaskIncrementTick+0x160>)
   840e0:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   840e2:	68bb      	ldr	r3, [r7, #8]
   840e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840e6:	2b00      	cmp	r3, #0
   840e8:	d004      	beq.n	840f4 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   840ea:	68bb      	ldr	r3, [r7, #8]
   840ec:	3318      	adds	r3, #24
   840ee:	4618      	mov	r0, r3
   840f0:	4b28      	ldr	r3, [pc, #160]	; (84194 <xTaskIncrementTick+0x160>)
   840f2:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   840f4:	68bb      	ldr	r3, [r7, #8]
   840f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   840f8:	2201      	movs	r2, #1
   840fa:	409a      	lsls	r2, r3
   840fc:	4b26      	ldr	r3, [pc, #152]	; (84198 <xTaskIncrementTick+0x164>)
   840fe:	681b      	ldr	r3, [r3, #0]
   84100:	431a      	orrs	r2, r3
   84102:	4b25      	ldr	r3, [pc, #148]	; (84198 <xTaskIncrementTick+0x164>)
   84104:	601a      	str	r2, [r3, #0]
   84106:	68bb      	ldr	r3, [r7, #8]
   84108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8410a:	4613      	mov	r3, r2
   8410c:	009b      	lsls	r3, r3, #2
   8410e:	4413      	add	r3, r2
   84110:	009b      	lsls	r3, r3, #2
   84112:	4a22      	ldr	r2, [pc, #136]	; (8419c <xTaskIncrementTick+0x168>)
   84114:	441a      	add	r2, r3
   84116:	68bb      	ldr	r3, [r7, #8]
   84118:	3304      	adds	r3, #4
   8411a:	4610      	mov	r0, r2
   8411c:	4619      	mov	r1, r3
   8411e:	4b20      	ldr	r3, [pc, #128]	; (841a0 <xTaskIncrementTick+0x16c>)
   84120:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84122:	68bb      	ldr	r3, [r7, #8]
   84124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84126:	4b1f      	ldr	r3, [pc, #124]	; (841a4 <xTaskIncrementTick+0x170>)
   84128:	681b      	ldr	r3, [r3, #0]
   8412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8412c:	429a      	cmp	r2, r3
   8412e:	d301      	bcc.n	84134 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   84130:	2301      	movs	r3, #1
   84132:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   84134:	e7b1      	b.n	8409a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   84136:	4b1b      	ldr	r3, [pc, #108]	; (841a4 <xTaskIncrementTick+0x170>)
   84138:	681b      	ldr	r3, [r3, #0]
   8413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8413c:	4917      	ldr	r1, [pc, #92]	; (8419c <xTaskIncrementTick+0x168>)
   8413e:	4613      	mov	r3, r2
   84140:	009b      	lsls	r3, r3, #2
   84142:	4413      	add	r3, r2
   84144:	009b      	lsls	r3, r3, #2
   84146:	440b      	add	r3, r1
   84148:	681b      	ldr	r3, [r3, #0]
   8414a:	2b01      	cmp	r3, #1
   8414c:	d907      	bls.n	8415e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   8414e:	2301      	movs	r3, #1
   84150:	617b      	str	r3, [r7, #20]
   84152:	e004      	b.n	8415e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   84154:	4b14      	ldr	r3, [pc, #80]	; (841a8 <xTaskIncrementTick+0x174>)
   84156:	681b      	ldr	r3, [r3, #0]
   84158:	1c5a      	adds	r2, r3, #1
   8415a:	4b13      	ldr	r3, [pc, #76]	; (841a8 <xTaskIncrementTick+0x174>)
   8415c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   8415e:	4b13      	ldr	r3, [pc, #76]	; (841ac <xTaskIncrementTick+0x178>)
   84160:	681b      	ldr	r3, [r3, #0]
   84162:	2b00      	cmp	r3, #0
   84164:	d001      	beq.n	8416a <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   84166:	2301      	movs	r3, #1
   84168:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8416a:	697b      	ldr	r3, [r7, #20]
}
   8416c:	4618      	mov	r0, r3
   8416e:	3718      	adds	r7, #24
   84170:	46bd      	mov	sp, r7
   84172:	bd80      	pop	{r7, pc}
   84174:	2007a668 	.word	0x2007a668
   84178:	2007a64c 	.word	0x2007a64c
   8417c:	2007a600 	.word	0x2007a600
   84180:	00082e59 	.word	0x00082e59
   84184:	2007a604 	.word	0x2007a604
   84188:	2007a660 	.word	0x2007a660
   8418c:	0008485d 	.word	0x0008485d
   84190:	2007000c 	.word	0x2007000c
   84194:	00082be1 	.word	0x00082be1
   84198:	2007a650 	.word	0x2007a650
   8419c:	2007a574 	.word	0x2007a574
   841a0:	00082b29 	.word	0x00082b29
   841a4:	2007a570 	.word	0x2007a570
   841a8:	2007a658 	.word	0x2007a658
   841ac:	2007a65c 	.word	0x2007a65c

000841b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   841b0:	b580      	push	{r7, lr}
   841b2:	b084      	sub	sp, #16
   841b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   841b6:	4b34      	ldr	r3, [pc, #208]	; (84288 <vTaskSwitchContext+0xd8>)
   841b8:	681b      	ldr	r3, [r3, #0]
   841ba:	2b00      	cmp	r3, #0
   841bc:	d003      	beq.n	841c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   841be:	4b33      	ldr	r3, [pc, #204]	; (8428c <vTaskSwitchContext+0xdc>)
   841c0:	2201      	movs	r2, #1
   841c2:	601a      	str	r2, [r3, #0]
   841c4:	e05c      	b.n	84280 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   841c6:	4b31      	ldr	r3, [pc, #196]	; (8428c <vTaskSwitchContext+0xdc>)
   841c8:	2200      	movs	r2, #0
   841ca:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   841cc:	4b30      	ldr	r3, [pc, #192]	; (84290 <vTaskSwitchContext+0xe0>)
   841ce:	681b      	ldr	r3, [r3, #0]
   841d0:	681a      	ldr	r2, [r3, #0]
   841d2:	4b2f      	ldr	r3, [pc, #188]	; (84290 <vTaskSwitchContext+0xe0>)
   841d4:	681b      	ldr	r3, [r3, #0]
   841d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841d8:	429a      	cmp	r2, r3
   841da:	d808      	bhi.n	841ee <vTaskSwitchContext+0x3e>
   841dc:	4b2c      	ldr	r3, [pc, #176]	; (84290 <vTaskSwitchContext+0xe0>)
   841de:	681a      	ldr	r2, [r3, #0]
   841e0:	4b2b      	ldr	r3, [pc, #172]	; (84290 <vTaskSwitchContext+0xe0>)
   841e2:	681b      	ldr	r3, [r3, #0]
   841e4:	3334      	adds	r3, #52	; 0x34
   841e6:	4610      	mov	r0, r2
   841e8:	4619      	mov	r1, r3
   841ea:	4b2a      	ldr	r3, [pc, #168]	; (84294 <vTaskSwitchContext+0xe4>)
   841ec:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   841ee:	4b28      	ldr	r3, [pc, #160]	; (84290 <vTaskSwitchContext+0xe0>)
   841f0:	681b      	ldr	r3, [r3, #0]
   841f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841f4:	4618      	mov	r0, r3
   841f6:	4928      	ldr	r1, [pc, #160]	; (84298 <vTaskSwitchContext+0xe8>)
   841f8:	2214      	movs	r2, #20
   841fa:	4b28      	ldr	r3, [pc, #160]	; (8429c <vTaskSwitchContext+0xec>)
   841fc:	4798      	blx	r3
   841fe:	4603      	mov	r3, r0
   84200:	2b00      	cmp	r3, #0
   84202:	d008      	beq.n	84216 <vTaskSwitchContext+0x66>
   84204:	4b22      	ldr	r3, [pc, #136]	; (84290 <vTaskSwitchContext+0xe0>)
   84206:	681a      	ldr	r2, [r3, #0]
   84208:	4b21      	ldr	r3, [pc, #132]	; (84290 <vTaskSwitchContext+0xe0>)
   8420a:	681b      	ldr	r3, [r3, #0]
   8420c:	3334      	adds	r3, #52	; 0x34
   8420e:	4610      	mov	r0, r2
   84210:	4619      	mov	r1, r3
   84212:	4b20      	ldr	r3, [pc, #128]	; (84294 <vTaskSwitchContext+0xe4>)
   84214:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   84216:	4b22      	ldr	r3, [pc, #136]	; (842a0 <vTaskSwitchContext+0xf0>)
   84218:	681b      	ldr	r3, [r3, #0]
   8421a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   8421c:	687b      	ldr	r3, [r7, #4]
   8421e:	fab3 f383 	clz	r3, r3
   84222:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   84224:	78fb      	ldrb	r3, [r7, #3]
   84226:	f1c3 031f 	rsb	r3, r3, #31
   8422a:	60fb      	str	r3, [r7, #12]
   8422c:	491d      	ldr	r1, [pc, #116]	; (842a4 <vTaskSwitchContext+0xf4>)
   8422e:	68fa      	ldr	r2, [r7, #12]
   84230:	4613      	mov	r3, r2
   84232:	009b      	lsls	r3, r3, #2
   84234:	4413      	add	r3, r2
   84236:	009b      	lsls	r3, r3, #2
   84238:	440b      	add	r3, r1
   8423a:	681b      	ldr	r3, [r3, #0]
   8423c:	2b00      	cmp	r3, #0
   8423e:	d102      	bne.n	84246 <vTaskSwitchContext+0x96>
   84240:	4b19      	ldr	r3, [pc, #100]	; (842a8 <vTaskSwitchContext+0xf8>)
   84242:	4798      	blx	r3
   84244:	e7fe      	b.n	84244 <vTaskSwitchContext+0x94>
   84246:	68fa      	ldr	r2, [r7, #12]
   84248:	4613      	mov	r3, r2
   8424a:	009b      	lsls	r3, r3, #2
   8424c:	4413      	add	r3, r2
   8424e:	009b      	lsls	r3, r3, #2
   84250:	4a14      	ldr	r2, [pc, #80]	; (842a4 <vTaskSwitchContext+0xf4>)
   84252:	4413      	add	r3, r2
   84254:	60bb      	str	r3, [r7, #8]
   84256:	68bb      	ldr	r3, [r7, #8]
   84258:	685b      	ldr	r3, [r3, #4]
   8425a:	685a      	ldr	r2, [r3, #4]
   8425c:	68bb      	ldr	r3, [r7, #8]
   8425e:	605a      	str	r2, [r3, #4]
   84260:	68bb      	ldr	r3, [r7, #8]
   84262:	685a      	ldr	r2, [r3, #4]
   84264:	68bb      	ldr	r3, [r7, #8]
   84266:	3308      	adds	r3, #8
   84268:	429a      	cmp	r2, r3
   8426a:	d104      	bne.n	84276 <vTaskSwitchContext+0xc6>
   8426c:	68bb      	ldr	r3, [r7, #8]
   8426e:	685b      	ldr	r3, [r3, #4]
   84270:	685a      	ldr	r2, [r3, #4]
   84272:	68bb      	ldr	r3, [r7, #8]
   84274:	605a      	str	r2, [r3, #4]
   84276:	68bb      	ldr	r3, [r7, #8]
   84278:	685b      	ldr	r3, [r3, #4]
   8427a:	68da      	ldr	r2, [r3, #12]
   8427c:	4b04      	ldr	r3, [pc, #16]	; (84290 <vTaskSwitchContext+0xe0>)
   8427e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   84280:	3710      	adds	r7, #16
   84282:	46bd      	mov	sp, r7
   84284:	bd80      	pop	{r7, pc}
   84286:	bf00      	nop
   84288:	2007a668 	.word	0x2007a668
   8428c:	2007a65c 	.word	0x2007a65c
   84290:	2007a570 	.word	0x2007a570
   84294:	00085dc1 	.word	0x00085dc1
   84298:	0008692c 	.word	0x0008692c
   8429c:	000864e5 	.word	0x000864e5
   842a0:	2007a650 	.word	0x2007a650
   842a4:	2007a574 	.word	0x2007a574
   842a8:	00082e59 	.word	0x00082e59

000842ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   842ac:	b580      	push	{r7, lr}
   842ae:	b084      	sub	sp, #16
   842b0:	af00      	add	r7, sp, #0
   842b2:	6078      	str	r0, [r7, #4]
   842b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   842b6:	687b      	ldr	r3, [r7, #4]
   842b8:	2b00      	cmp	r3, #0
   842ba:	d102      	bne.n	842c2 <vTaskPlaceOnEventList+0x16>
   842bc:	4b1a      	ldr	r3, [pc, #104]	; (84328 <vTaskPlaceOnEventList+0x7c>)
   842be:	4798      	blx	r3
   842c0:	e7fe      	b.n	842c0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   842c2:	4b1a      	ldr	r3, [pc, #104]	; (8432c <vTaskPlaceOnEventList+0x80>)
   842c4:	681b      	ldr	r3, [r3, #0]
   842c6:	3318      	adds	r3, #24
   842c8:	6878      	ldr	r0, [r7, #4]
   842ca:	4619      	mov	r1, r3
   842cc:	4b18      	ldr	r3, [pc, #96]	; (84330 <vTaskPlaceOnEventList+0x84>)
   842ce:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   842d0:	4b16      	ldr	r3, [pc, #88]	; (8432c <vTaskPlaceOnEventList+0x80>)
   842d2:	681b      	ldr	r3, [r3, #0]
   842d4:	3304      	adds	r3, #4
   842d6:	4618      	mov	r0, r3
   842d8:	4b16      	ldr	r3, [pc, #88]	; (84334 <vTaskPlaceOnEventList+0x88>)
   842da:	4798      	blx	r3
   842dc:	4603      	mov	r3, r0
   842de:	2b00      	cmp	r3, #0
   842e0:	d10b      	bne.n	842fa <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   842e2:	4b12      	ldr	r3, [pc, #72]	; (8432c <vTaskPlaceOnEventList+0x80>)
   842e4:	681b      	ldr	r3, [r3, #0]
   842e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   842e8:	2201      	movs	r2, #1
   842ea:	fa02 f303 	lsl.w	r3, r2, r3
   842ee:	43da      	mvns	r2, r3
   842f0:	4b11      	ldr	r3, [pc, #68]	; (84338 <vTaskPlaceOnEventList+0x8c>)
   842f2:	681b      	ldr	r3, [r3, #0]
   842f4:	401a      	ands	r2, r3
   842f6:	4b10      	ldr	r3, [pc, #64]	; (84338 <vTaskPlaceOnEventList+0x8c>)
   842f8:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   842fa:	683b      	ldr	r3, [r7, #0]
   842fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   84300:	d107      	bne.n	84312 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84302:	4b0a      	ldr	r3, [pc, #40]	; (8432c <vTaskPlaceOnEventList+0x80>)
   84304:	681b      	ldr	r3, [r3, #0]
   84306:	3304      	adds	r3, #4
   84308:	480c      	ldr	r0, [pc, #48]	; (8433c <vTaskPlaceOnEventList+0x90>)
   8430a:	4619      	mov	r1, r3
   8430c:	4b0c      	ldr	r3, [pc, #48]	; (84340 <vTaskPlaceOnEventList+0x94>)
   8430e:	4798      	blx	r3
   84310:	e007      	b.n	84322 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   84312:	4b0c      	ldr	r3, [pc, #48]	; (84344 <vTaskPlaceOnEventList+0x98>)
   84314:	681a      	ldr	r2, [r3, #0]
   84316:	683b      	ldr	r3, [r7, #0]
   84318:	4413      	add	r3, r2
   8431a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8431c:	68f8      	ldr	r0, [r7, #12]
   8431e:	4b0a      	ldr	r3, [pc, #40]	; (84348 <vTaskPlaceOnEventList+0x9c>)
   84320:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   84322:	3710      	adds	r7, #16
   84324:	46bd      	mov	sp, r7
   84326:	bd80      	pop	{r7, pc}
   84328:	00082e59 	.word	0x00082e59
   8432c:	2007a570 	.word	0x2007a570
   84330:	00082b71 	.word	0x00082b71
   84334:	00082be1 	.word	0x00082be1
   84338:	2007a650 	.word	0x2007a650
   8433c:	2007a634 	.word	0x2007a634
   84340:	00082b29 	.word	0x00082b29
   84344:	2007a64c 	.word	0x2007a64c
   84348:	00084759 	.word	0x00084759

0008434c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   8434c:	b580      	push	{r7, lr}
   8434e:	b084      	sub	sp, #16
   84350:	af00      	add	r7, sp, #0
   84352:	6078      	str	r0, [r7, #4]
   84354:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   84356:	687b      	ldr	r3, [r7, #4]
   84358:	2b00      	cmp	r3, #0
   8435a:	d102      	bne.n	84362 <vTaskPlaceOnEventListRestricted+0x16>
   8435c:	4b14      	ldr	r3, [pc, #80]	; (843b0 <vTaskPlaceOnEventListRestricted+0x64>)
   8435e:	4798      	blx	r3
   84360:	e7fe      	b.n	84360 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84362:	4b14      	ldr	r3, [pc, #80]	; (843b4 <vTaskPlaceOnEventListRestricted+0x68>)
   84364:	681b      	ldr	r3, [r3, #0]
   84366:	3318      	adds	r3, #24
   84368:	6878      	ldr	r0, [r7, #4]
   8436a:	4619      	mov	r1, r3
   8436c:	4b12      	ldr	r3, [pc, #72]	; (843b8 <vTaskPlaceOnEventListRestricted+0x6c>)
   8436e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84370:	4b10      	ldr	r3, [pc, #64]	; (843b4 <vTaskPlaceOnEventListRestricted+0x68>)
   84372:	681b      	ldr	r3, [r3, #0]
   84374:	3304      	adds	r3, #4
   84376:	4618      	mov	r0, r3
   84378:	4b10      	ldr	r3, [pc, #64]	; (843bc <vTaskPlaceOnEventListRestricted+0x70>)
   8437a:	4798      	blx	r3
   8437c:	4603      	mov	r3, r0
   8437e:	2b00      	cmp	r3, #0
   84380:	d10b      	bne.n	8439a <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84382:	4b0c      	ldr	r3, [pc, #48]	; (843b4 <vTaskPlaceOnEventListRestricted+0x68>)
   84384:	681b      	ldr	r3, [r3, #0]
   84386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84388:	2201      	movs	r2, #1
   8438a:	fa02 f303 	lsl.w	r3, r2, r3
   8438e:	43da      	mvns	r2, r3
   84390:	4b0b      	ldr	r3, [pc, #44]	; (843c0 <vTaskPlaceOnEventListRestricted+0x74>)
   84392:	681b      	ldr	r3, [r3, #0]
   84394:	401a      	ands	r2, r3
   84396:	4b0a      	ldr	r3, [pc, #40]	; (843c0 <vTaskPlaceOnEventListRestricted+0x74>)
   84398:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8439a:	4b0a      	ldr	r3, [pc, #40]	; (843c4 <vTaskPlaceOnEventListRestricted+0x78>)
   8439c:	681a      	ldr	r2, [r3, #0]
   8439e:	683b      	ldr	r3, [r7, #0]
   843a0:	4413      	add	r3, r2
   843a2:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   843a4:	68f8      	ldr	r0, [r7, #12]
   843a6:	4b08      	ldr	r3, [pc, #32]	; (843c8 <vTaskPlaceOnEventListRestricted+0x7c>)
   843a8:	4798      	blx	r3
	}
   843aa:	3710      	adds	r7, #16
   843ac:	46bd      	mov	sp, r7
   843ae:	bd80      	pop	{r7, pc}
   843b0:	00082e59 	.word	0x00082e59
   843b4:	2007a570 	.word	0x2007a570
   843b8:	00082b29 	.word	0x00082b29
   843bc:	00082be1 	.word	0x00082be1
   843c0:	2007a650 	.word	0x2007a650
   843c4:	2007a64c 	.word	0x2007a64c
   843c8:	00084759 	.word	0x00084759

000843cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   843cc:	b580      	push	{r7, lr}
   843ce:	b084      	sub	sp, #16
   843d0:	af00      	add	r7, sp, #0
   843d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   843d4:	687b      	ldr	r3, [r7, #4]
   843d6:	68db      	ldr	r3, [r3, #12]
   843d8:	68db      	ldr	r3, [r3, #12]
   843da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   843dc:	68bb      	ldr	r3, [r7, #8]
   843de:	2b00      	cmp	r3, #0
   843e0:	d102      	bne.n	843e8 <xTaskRemoveFromEventList+0x1c>
   843e2:	4b21      	ldr	r3, [pc, #132]	; (84468 <xTaskRemoveFromEventList+0x9c>)
   843e4:	4798      	blx	r3
   843e6:	e7fe      	b.n	843e6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   843e8:	68bb      	ldr	r3, [r7, #8]
   843ea:	3318      	adds	r3, #24
   843ec:	4618      	mov	r0, r3
   843ee:	4b1f      	ldr	r3, [pc, #124]	; (8446c <xTaskRemoveFromEventList+0xa0>)
   843f0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   843f2:	4b1f      	ldr	r3, [pc, #124]	; (84470 <xTaskRemoveFromEventList+0xa4>)
   843f4:	681b      	ldr	r3, [r3, #0]
   843f6:	2b00      	cmp	r3, #0
   843f8:	d11c      	bne.n	84434 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   843fa:	68bb      	ldr	r3, [r7, #8]
   843fc:	3304      	adds	r3, #4
   843fe:	4618      	mov	r0, r3
   84400:	4b1a      	ldr	r3, [pc, #104]	; (8446c <xTaskRemoveFromEventList+0xa0>)
   84402:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   84404:	68bb      	ldr	r3, [r7, #8]
   84406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84408:	2201      	movs	r2, #1
   8440a:	409a      	lsls	r2, r3
   8440c:	4b19      	ldr	r3, [pc, #100]	; (84474 <xTaskRemoveFromEventList+0xa8>)
   8440e:	681b      	ldr	r3, [r3, #0]
   84410:	431a      	orrs	r2, r3
   84412:	4b18      	ldr	r3, [pc, #96]	; (84474 <xTaskRemoveFromEventList+0xa8>)
   84414:	601a      	str	r2, [r3, #0]
   84416:	68bb      	ldr	r3, [r7, #8]
   84418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8441a:	4613      	mov	r3, r2
   8441c:	009b      	lsls	r3, r3, #2
   8441e:	4413      	add	r3, r2
   84420:	009b      	lsls	r3, r3, #2
   84422:	4a15      	ldr	r2, [pc, #84]	; (84478 <xTaskRemoveFromEventList+0xac>)
   84424:	441a      	add	r2, r3
   84426:	68bb      	ldr	r3, [r7, #8]
   84428:	3304      	adds	r3, #4
   8442a:	4610      	mov	r0, r2
   8442c:	4619      	mov	r1, r3
   8442e:	4b13      	ldr	r3, [pc, #76]	; (8447c <xTaskRemoveFromEventList+0xb0>)
   84430:	4798      	blx	r3
   84432:	e005      	b.n	84440 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   84434:	68bb      	ldr	r3, [r7, #8]
   84436:	3318      	adds	r3, #24
   84438:	4811      	ldr	r0, [pc, #68]	; (84480 <xTaskRemoveFromEventList+0xb4>)
   8443a:	4619      	mov	r1, r3
   8443c:	4b0f      	ldr	r3, [pc, #60]	; (8447c <xTaskRemoveFromEventList+0xb0>)
   8443e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   84440:	68bb      	ldr	r3, [r7, #8]
   84442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84444:	4b0f      	ldr	r3, [pc, #60]	; (84484 <xTaskRemoveFromEventList+0xb8>)
   84446:	681b      	ldr	r3, [r3, #0]
   84448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8444a:	429a      	cmp	r2, r3
   8444c:	d905      	bls.n	8445a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   8444e:	2301      	movs	r3, #1
   84450:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   84452:	4b0d      	ldr	r3, [pc, #52]	; (84488 <xTaskRemoveFromEventList+0xbc>)
   84454:	2201      	movs	r2, #1
   84456:	601a      	str	r2, [r3, #0]
   84458:	e001      	b.n	8445e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8445a:	2300      	movs	r3, #0
   8445c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   8445e:	68fb      	ldr	r3, [r7, #12]
}
   84460:	4618      	mov	r0, r3
   84462:	3710      	adds	r7, #16
   84464:	46bd      	mov	sp, r7
   84466:	bd80      	pop	{r7, pc}
   84468:	00082e59 	.word	0x00082e59
   8446c:	00082be1 	.word	0x00082be1
   84470:	2007a668 	.word	0x2007a668
   84474:	2007a650 	.word	0x2007a650
   84478:	2007a574 	.word	0x2007a574
   8447c:	00082b29 	.word	0x00082b29
   84480:	2007a608 	.word	0x2007a608
   84484:	2007a570 	.word	0x2007a570
   84488:	2007a65c 	.word	0x2007a65c

0008448c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   8448c:	b580      	push	{r7, lr}
   8448e:	b082      	sub	sp, #8
   84490:	af00      	add	r7, sp, #0
   84492:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   84494:	687b      	ldr	r3, [r7, #4]
   84496:	2b00      	cmp	r3, #0
   84498:	d102      	bne.n	844a0 <vTaskSetTimeOutState+0x14>
   8449a:	4b07      	ldr	r3, [pc, #28]	; (844b8 <vTaskSetTimeOutState+0x2c>)
   8449c:	4798      	blx	r3
   8449e:	e7fe      	b.n	8449e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   844a0:	4b06      	ldr	r3, [pc, #24]	; (844bc <vTaskSetTimeOutState+0x30>)
   844a2:	681a      	ldr	r2, [r3, #0]
   844a4:	687b      	ldr	r3, [r7, #4]
   844a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   844a8:	4b05      	ldr	r3, [pc, #20]	; (844c0 <vTaskSetTimeOutState+0x34>)
   844aa:	681a      	ldr	r2, [r3, #0]
   844ac:	687b      	ldr	r3, [r7, #4]
   844ae:	605a      	str	r2, [r3, #4]
}
   844b0:	3708      	adds	r7, #8
   844b2:	46bd      	mov	sp, r7
   844b4:	bd80      	pop	{r7, pc}
   844b6:	bf00      	nop
   844b8:	00082e59 	.word	0x00082e59
   844bc:	2007a660 	.word	0x2007a660
   844c0:	2007a64c 	.word	0x2007a64c

000844c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   844c4:	b580      	push	{r7, lr}
   844c6:	b084      	sub	sp, #16
   844c8:	af00      	add	r7, sp, #0
   844ca:	6078      	str	r0, [r7, #4]
   844cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   844ce:	687b      	ldr	r3, [r7, #4]
   844d0:	2b00      	cmp	r3, #0
   844d2:	d102      	bne.n	844da <xTaskCheckForTimeOut+0x16>
   844d4:	4b21      	ldr	r3, [pc, #132]	; (8455c <xTaskCheckForTimeOut+0x98>)
   844d6:	4798      	blx	r3
   844d8:	e7fe      	b.n	844d8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   844da:	683b      	ldr	r3, [r7, #0]
   844dc:	2b00      	cmp	r3, #0
   844de:	d102      	bne.n	844e6 <xTaskCheckForTimeOut+0x22>
   844e0:	4b1e      	ldr	r3, [pc, #120]	; (8455c <xTaskCheckForTimeOut+0x98>)
   844e2:	4798      	blx	r3
   844e4:	e7fe      	b.n	844e4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   844e6:	4b1e      	ldr	r3, [pc, #120]	; (84560 <xTaskCheckForTimeOut+0x9c>)
   844e8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   844ea:	4b1e      	ldr	r3, [pc, #120]	; (84564 <xTaskCheckForTimeOut+0xa0>)
   844ec:	681b      	ldr	r3, [r3, #0]
   844ee:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   844f0:	683b      	ldr	r3, [r7, #0]
   844f2:	681b      	ldr	r3, [r3, #0]
   844f4:	f1b3 3fff 	cmp.w	r3, #4294967295
   844f8:	d102      	bne.n	84500 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   844fa:	2300      	movs	r3, #0
   844fc:	60fb      	str	r3, [r7, #12]
   844fe:	e026      	b.n	8454e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   84500:	687b      	ldr	r3, [r7, #4]
   84502:	681a      	ldr	r2, [r3, #0]
   84504:	4b18      	ldr	r3, [pc, #96]	; (84568 <xTaskCheckForTimeOut+0xa4>)
   84506:	681b      	ldr	r3, [r3, #0]
   84508:	429a      	cmp	r2, r3
   8450a:	d007      	beq.n	8451c <xTaskCheckForTimeOut+0x58>
   8450c:	687b      	ldr	r3, [r7, #4]
   8450e:	685a      	ldr	r2, [r3, #4]
   84510:	68bb      	ldr	r3, [r7, #8]
   84512:	429a      	cmp	r2, r3
   84514:	d802      	bhi.n	8451c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   84516:	2301      	movs	r3, #1
   84518:	60fb      	str	r3, [r7, #12]
   8451a:	e018      	b.n	8454e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   8451c:	687b      	ldr	r3, [r7, #4]
   8451e:	685b      	ldr	r3, [r3, #4]
   84520:	68ba      	ldr	r2, [r7, #8]
   84522:	1ad2      	subs	r2, r2, r3
   84524:	683b      	ldr	r3, [r7, #0]
   84526:	681b      	ldr	r3, [r3, #0]
   84528:	429a      	cmp	r2, r3
   8452a:	d20e      	bcs.n	8454a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   8452c:	683b      	ldr	r3, [r7, #0]
   8452e:	681a      	ldr	r2, [r3, #0]
   84530:	687b      	ldr	r3, [r7, #4]
   84532:	6859      	ldr	r1, [r3, #4]
   84534:	68bb      	ldr	r3, [r7, #8]
   84536:	1acb      	subs	r3, r1, r3
   84538:	441a      	add	r2, r3
   8453a:	683b      	ldr	r3, [r7, #0]
   8453c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8453e:	6878      	ldr	r0, [r7, #4]
   84540:	4b0a      	ldr	r3, [pc, #40]	; (8456c <xTaskCheckForTimeOut+0xa8>)
   84542:	4798      	blx	r3
			xReturn = pdFALSE;
   84544:	2300      	movs	r3, #0
   84546:	60fb      	str	r3, [r7, #12]
   84548:	e001      	b.n	8454e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   8454a:	2301      	movs	r3, #1
   8454c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8454e:	4b08      	ldr	r3, [pc, #32]	; (84570 <xTaskCheckForTimeOut+0xac>)
   84550:	4798      	blx	r3

	return xReturn;
   84552:	68fb      	ldr	r3, [r7, #12]
}
   84554:	4618      	mov	r0, r3
   84556:	3710      	adds	r7, #16
   84558:	46bd      	mov	sp, r7
   8455a:	bd80      	pop	{r7, pc}
   8455c:	00082e59 	.word	0x00082e59
   84560:	00082ddd 	.word	0x00082ddd
   84564:	2007a64c 	.word	0x2007a64c
   84568:	2007a660 	.word	0x2007a660
   8456c:	0008448d 	.word	0x0008448d
   84570:	00082e21 	.word	0x00082e21

00084574 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   84574:	b480      	push	{r7}
   84576:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   84578:	4b03      	ldr	r3, [pc, #12]	; (84588 <vTaskMissedYield+0x14>)
   8457a:	2201      	movs	r2, #1
   8457c:	601a      	str	r2, [r3, #0]
}
   8457e:	46bd      	mov	sp, r7
   84580:	f85d 7b04 	ldr.w	r7, [sp], #4
   84584:	4770      	bx	lr
   84586:	bf00      	nop
   84588:	2007a65c 	.word	0x2007a65c

0008458c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8458c:	b580      	push	{r7, lr}
   8458e:	b082      	sub	sp, #8
   84590:	af00      	add	r7, sp, #0
   84592:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84594:	4b04      	ldr	r3, [pc, #16]	; (845a8 <prvIdleTask+0x1c>)
   84596:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   84598:	4b04      	ldr	r3, [pc, #16]	; (845ac <prvIdleTask+0x20>)
   8459a:	681b      	ldr	r3, [r3, #0]
   8459c:	2b01      	cmp	r3, #1
   8459e:	d901      	bls.n	845a4 <prvIdleTask+0x18>
			{
				taskYIELD();
   845a0:	4b03      	ldr	r3, [pc, #12]	; (845b0 <prvIdleTask+0x24>)
   845a2:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   845a4:	e7f6      	b.n	84594 <prvIdleTask+0x8>
   845a6:	bf00      	nop
   845a8:	000846cd 	.word	0x000846cd
   845ac:	2007a574 	.word	0x2007a574
   845b0:	00082dbd 	.word	0x00082dbd

000845b4 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   845b4:	b580      	push	{r7, lr}
   845b6:	b086      	sub	sp, #24
   845b8:	af00      	add	r7, sp, #0
   845ba:	60f8      	str	r0, [r7, #12]
   845bc:	60b9      	str	r1, [r7, #8]
   845be:	607a      	str	r2, [r7, #4]
   845c0:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   845c2:	2300      	movs	r3, #0
   845c4:	617b      	str	r3, [r7, #20]
   845c6:	e012      	b.n	845ee <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   845c8:	68ba      	ldr	r2, [r7, #8]
   845ca:	697b      	ldr	r3, [r7, #20]
   845cc:	4413      	add	r3, r2
   845ce:	781a      	ldrb	r2, [r3, #0]
   845d0:	68f9      	ldr	r1, [r7, #12]
   845d2:	697b      	ldr	r3, [r7, #20]
   845d4:	440b      	add	r3, r1
   845d6:	3330      	adds	r3, #48	; 0x30
   845d8:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   845da:	68ba      	ldr	r2, [r7, #8]
   845dc:	697b      	ldr	r3, [r7, #20]
   845de:	4413      	add	r3, r2
   845e0:	781b      	ldrb	r3, [r3, #0]
   845e2:	2b00      	cmp	r3, #0
   845e4:	d100      	bne.n	845e8 <prvInitialiseTCBVariables+0x34>
		{
			break;
   845e6:	e005      	b.n	845f4 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   845e8:	697b      	ldr	r3, [r7, #20]
   845ea:	3301      	adds	r3, #1
   845ec:	617b      	str	r3, [r7, #20]
   845ee:	697b      	ldr	r3, [r7, #20]
   845f0:	2b09      	cmp	r3, #9
   845f2:	d9e9      	bls.n	845c8 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   845f4:	68fb      	ldr	r3, [r7, #12]
   845f6:	2200      	movs	r2, #0
   845f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   845fc:	687b      	ldr	r3, [r7, #4]
   845fe:	2b04      	cmp	r3, #4
   84600:	d901      	bls.n	84606 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   84602:	2304      	movs	r3, #4
   84604:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   84606:	68fb      	ldr	r3, [r7, #12]
   84608:	687a      	ldr	r2, [r7, #4]
   8460a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   8460c:	68fb      	ldr	r3, [r7, #12]
   8460e:	687a      	ldr	r2, [r7, #4]
   84610:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84612:	68fb      	ldr	r3, [r7, #12]
   84614:	2200      	movs	r2, #0
   84616:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84618:	68fb      	ldr	r3, [r7, #12]
   8461a:	3304      	adds	r3, #4
   8461c:	4618      	mov	r0, r3
   8461e:	4b0a      	ldr	r3, [pc, #40]	; (84648 <prvInitialiseTCBVariables+0x94>)
   84620:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84622:	68fb      	ldr	r3, [r7, #12]
   84624:	3318      	adds	r3, #24
   84626:	4618      	mov	r0, r3
   84628:	4b07      	ldr	r3, [pc, #28]	; (84648 <prvInitialiseTCBVariables+0x94>)
   8462a:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8462c:	68fb      	ldr	r3, [r7, #12]
   8462e:	68fa      	ldr	r2, [r7, #12]
   84630:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84632:	687b      	ldr	r3, [r7, #4]
   84634:	f1c3 0205 	rsb	r2, r3, #5
   84638:	68fb      	ldr	r3, [r7, #12]
   8463a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8463c:	68fb      	ldr	r3, [r7, #12]
   8463e:	68fa      	ldr	r2, [r7, #12]
   84640:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84642:	3718      	adds	r7, #24
   84644:	46bd      	mov	sp, r7
   84646:	bd80      	pop	{r7, pc}
   84648:	00082b11 	.word	0x00082b11

0008464c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   8464c:	b580      	push	{r7, lr}
   8464e:	b082      	sub	sp, #8
   84650:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84652:	2300      	movs	r3, #0
   84654:	607b      	str	r3, [r7, #4]
   84656:	e00c      	b.n	84672 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   84658:	687a      	ldr	r2, [r7, #4]
   8465a:	4613      	mov	r3, r2
   8465c:	009b      	lsls	r3, r3, #2
   8465e:	4413      	add	r3, r2
   84660:	009b      	lsls	r3, r3, #2
   84662:	4a11      	ldr	r2, [pc, #68]	; (846a8 <prvInitialiseTaskLists+0x5c>)
   84664:	4413      	add	r3, r2
   84666:	4618      	mov	r0, r3
   84668:	4b10      	ldr	r3, [pc, #64]	; (846ac <prvInitialiseTaskLists+0x60>)
   8466a:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   8466c:	687b      	ldr	r3, [r7, #4]
   8466e:	3301      	adds	r3, #1
   84670:	607b      	str	r3, [r7, #4]
   84672:	687b      	ldr	r3, [r7, #4]
   84674:	2b04      	cmp	r3, #4
   84676:	d9ef      	bls.n	84658 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   84678:	480d      	ldr	r0, [pc, #52]	; (846b0 <prvInitialiseTaskLists+0x64>)
   8467a:	4b0c      	ldr	r3, [pc, #48]	; (846ac <prvInitialiseTaskLists+0x60>)
   8467c:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   8467e:	480d      	ldr	r0, [pc, #52]	; (846b4 <prvInitialiseTaskLists+0x68>)
   84680:	4b0a      	ldr	r3, [pc, #40]	; (846ac <prvInitialiseTaskLists+0x60>)
   84682:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84684:	480c      	ldr	r0, [pc, #48]	; (846b8 <prvInitialiseTaskLists+0x6c>)
   84686:	4b09      	ldr	r3, [pc, #36]	; (846ac <prvInitialiseTaskLists+0x60>)
   84688:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8468a:	480c      	ldr	r0, [pc, #48]	; (846bc <prvInitialiseTaskLists+0x70>)
   8468c:	4b07      	ldr	r3, [pc, #28]	; (846ac <prvInitialiseTaskLists+0x60>)
   8468e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84690:	480b      	ldr	r0, [pc, #44]	; (846c0 <prvInitialiseTaskLists+0x74>)
   84692:	4b06      	ldr	r3, [pc, #24]	; (846ac <prvInitialiseTaskLists+0x60>)
   84694:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84696:	4b0b      	ldr	r3, [pc, #44]	; (846c4 <prvInitialiseTaskLists+0x78>)
   84698:	4a05      	ldr	r2, [pc, #20]	; (846b0 <prvInitialiseTaskLists+0x64>)
   8469a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8469c:	4b0a      	ldr	r3, [pc, #40]	; (846c8 <prvInitialiseTaskLists+0x7c>)
   8469e:	4a05      	ldr	r2, [pc, #20]	; (846b4 <prvInitialiseTaskLists+0x68>)
   846a0:	601a      	str	r2, [r3, #0]
}
   846a2:	3708      	adds	r7, #8
   846a4:	46bd      	mov	sp, r7
   846a6:	bd80      	pop	{r7, pc}
   846a8:	2007a574 	.word	0x2007a574
   846ac:	00082ad1 	.word	0x00082ad1
   846b0:	2007a5d8 	.word	0x2007a5d8
   846b4:	2007a5ec 	.word	0x2007a5ec
   846b8:	2007a608 	.word	0x2007a608
   846bc:	2007a61c 	.word	0x2007a61c
   846c0:	2007a634 	.word	0x2007a634
   846c4:	2007a600 	.word	0x2007a600
   846c8:	2007a604 	.word	0x2007a604

000846cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   846cc:	b580      	push	{r7, lr}
   846ce:	b082      	sub	sp, #8
   846d0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   846d2:	e028      	b.n	84726 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   846d4:	4b17      	ldr	r3, [pc, #92]	; (84734 <prvCheckTasksWaitingTermination+0x68>)
   846d6:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   846d8:	4b17      	ldr	r3, [pc, #92]	; (84738 <prvCheckTasksWaitingTermination+0x6c>)
   846da:	681b      	ldr	r3, [r3, #0]
   846dc:	2b00      	cmp	r3, #0
   846de:	bf14      	ite	ne
   846e0:	2300      	movne	r3, #0
   846e2:	2301      	moveq	r3, #1
   846e4:	b2db      	uxtb	r3, r3
   846e6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   846e8:	4b14      	ldr	r3, [pc, #80]	; (8473c <prvCheckTasksWaitingTermination+0x70>)
   846ea:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   846ec:	687b      	ldr	r3, [r7, #4]
   846ee:	2b00      	cmp	r3, #0
   846f0:	d119      	bne.n	84726 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   846f2:	4b13      	ldr	r3, [pc, #76]	; (84740 <prvCheckTasksWaitingTermination+0x74>)
   846f4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   846f6:	4b10      	ldr	r3, [pc, #64]	; (84738 <prvCheckTasksWaitingTermination+0x6c>)
   846f8:	68db      	ldr	r3, [r3, #12]
   846fa:	68db      	ldr	r3, [r3, #12]
   846fc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   846fe:	683b      	ldr	r3, [r7, #0]
   84700:	3304      	adds	r3, #4
   84702:	4618      	mov	r0, r3
   84704:	4b0f      	ldr	r3, [pc, #60]	; (84744 <prvCheckTasksWaitingTermination+0x78>)
   84706:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   84708:	4b0f      	ldr	r3, [pc, #60]	; (84748 <prvCheckTasksWaitingTermination+0x7c>)
   8470a:	681b      	ldr	r3, [r3, #0]
   8470c:	1e5a      	subs	r2, r3, #1
   8470e:	4b0e      	ldr	r3, [pc, #56]	; (84748 <prvCheckTasksWaitingTermination+0x7c>)
   84710:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84712:	4b0e      	ldr	r3, [pc, #56]	; (8474c <prvCheckTasksWaitingTermination+0x80>)
   84714:	681b      	ldr	r3, [r3, #0]
   84716:	1e5a      	subs	r2, r3, #1
   84718:	4b0c      	ldr	r3, [pc, #48]	; (8474c <prvCheckTasksWaitingTermination+0x80>)
   8471a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   8471c:	4b0c      	ldr	r3, [pc, #48]	; (84750 <prvCheckTasksWaitingTermination+0x84>)
   8471e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84720:	6838      	ldr	r0, [r7, #0]
   84722:	4b0c      	ldr	r3, [pc, #48]	; (84754 <prvCheckTasksWaitingTermination+0x88>)
   84724:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84726:	4b09      	ldr	r3, [pc, #36]	; (8474c <prvCheckTasksWaitingTermination+0x80>)
   84728:	681b      	ldr	r3, [r3, #0]
   8472a:	2b00      	cmp	r3, #0
   8472c:	d1d2      	bne.n	846d4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   8472e:	3708      	adds	r7, #8
   84730:	46bd      	mov	sp, r7
   84732:	bd80      	pop	{r7, pc}
   84734:	00083ec9 	.word	0x00083ec9
   84738:	2007a61c 	.word	0x2007a61c
   8473c:	00083ee5 	.word	0x00083ee5
   84740:	00082ddd 	.word	0x00082ddd
   84744:	00082be1 	.word	0x00082be1
   84748:	2007a648 	.word	0x2007a648
   8474c:	2007a630 	.word	0x2007a630
   84750:	00082e21 	.word	0x00082e21
   84754:	00084839 	.word	0x00084839

00084758 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84758:	b580      	push	{r7, lr}
   8475a:	b082      	sub	sp, #8
   8475c:	af00      	add	r7, sp, #0
   8475e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84760:	4b13      	ldr	r3, [pc, #76]	; (847b0 <prvAddCurrentTaskToDelayedList+0x58>)
   84762:	681b      	ldr	r3, [r3, #0]
   84764:	687a      	ldr	r2, [r7, #4]
   84766:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84768:	4b12      	ldr	r3, [pc, #72]	; (847b4 <prvAddCurrentTaskToDelayedList+0x5c>)
   8476a:	681b      	ldr	r3, [r3, #0]
   8476c:	687a      	ldr	r2, [r7, #4]
   8476e:	429a      	cmp	r2, r3
   84770:	d209      	bcs.n	84786 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84772:	4b11      	ldr	r3, [pc, #68]	; (847b8 <prvAddCurrentTaskToDelayedList+0x60>)
   84774:	681a      	ldr	r2, [r3, #0]
   84776:	4b0e      	ldr	r3, [pc, #56]	; (847b0 <prvAddCurrentTaskToDelayedList+0x58>)
   84778:	681b      	ldr	r3, [r3, #0]
   8477a:	3304      	adds	r3, #4
   8477c:	4610      	mov	r0, r2
   8477e:	4619      	mov	r1, r3
   84780:	4b0e      	ldr	r3, [pc, #56]	; (847bc <prvAddCurrentTaskToDelayedList+0x64>)
   84782:	4798      	blx	r3
   84784:	e010      	b.n	847a8 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84786:	4b0e      	ldr	r3, [pc, #56]	; (847c0 <prvAddCurrentTaskToDelayedList+0x68>)
   84788:	681a      	ldr	r2, [r3, #0]
   8478a:	4b09      	ldr	r3, [pc, #36]	; (847b0 <prvAddCurrentTaskToDelayedList+0x58>)
   8478c:	681b      	ldr	r3, [r3, #0]
   8478e:	3304      	adds	r3, #4
   84790:	4610      	mov	r0, r2
   84792:	4619      	mov	r1, r3
   84794:	4b09      	ldr	r3, [pc, #36]	; (847bc <prvAddCurrentTaskToDelayedList+0x64>)
   84796:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84798:	4b0a      	ldr	r3, [pc, #40]	; (847c4 <prvAddCurrentTaskToDelayedList+0x6c>)
   8479a:	681b      	ldr	r3, [r3, #0]
   8479c:	687a      	ldr	r2, [r7, #4]
   8479e:	429a      	cmp	r2, r3
   847a0:	d202      	bcs.n	847a8 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   847a2:	4b08      	ldr	r3, [pc, #32]	; (847c4 <prvAddCurrentTaskToDelayedList+0x6c>)
   847a4:	687a      	ldr	r2, [r7, #4]
   847a6:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   847a8:	3708      	adds	r7, #8
   847aa:	46bd      	mov	sp, r7
   847ac:	bd80      	pop	{r7, pc}
   847ae:	bf00      	nop
   847b0:	2007a570 	.word	0x2007a570
   847b4:	2007a64c 	.word	0x2007a64c
   847b8:	2007a604 	.word	0x2007a604
   847bc:	00082b71 	.word	0x00082b71
   847c0:	2007a600 	.word	0x2007a600
   847c4:	2007000c 	.word	0x2007000c

000847c8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   847c8:	b580      	push	{r7, lr}
   847ca:	b084      	sub	sp, #16
   847cc:	af00      	add	r7, sp, #0
   847ce:	4603      	mov	r3, r0
   847d0:	6039      	str	r1, [r7, #0]
   847d2:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   847d4:	2048      	movs	r0, #72	; 0x48
   847d6:	4b15      	ldr	r3, [pc, #84]	; (8482c <prvAllocateTCBAndStack+0x64>)
   847d8:	4798      	blx	r3
   847da:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   847dc:	68fb      	ldr	r3, [r7, #12]
   847de:	2b00      	cmp	r3, #0
   847e0:	d01f      	beq.n	84822 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   847e2:	683b      	ldr	r3, [r7, #0]
   847e4:	2b00      	cmp	r3, #0
   847e6:	d106      	bne.n	847f6 <prvAllocateTCBAndStack+0x2e>
   847e8:	88fb      	ldrh	r3, [r7, #6]
   847ea:	009b      	lsls	r3, r3, #2
   847ec:	4618      	mov	r0, r3
   847ee:	4b0f      	ldr	r3, [pc, #60]	; (8482c <prvAllocateTCBAndStack+0x64>)
   847f0:	4798      	blx	r3
   847f2:	4603      	mov	r3, r0
   847f4:	e000      	b.n	847f8 <prvAllocateTCBAndStack+0x30>
   847f6:	683b      	ldr	r3, [r7, #0]
   847f8:	68fa      	ldr	r2, [r7, #12]
   847fa:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   847fc:	68fb      	ldr	r3, [r7, #12]
   847fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84800:	2b00      	cmp	r3, #0
   84802:	d105      	bne.n	84810 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84804:	68f8      	ldr	r0, [r7, #12]
   84806:	4b0a      	ldr	r3, [pc, #40]	; (84830 <prvAllocateTCBAndStack+0x68>)
   84808:	4798      	blx	r3
			pxNewTCB = NULL;
   8480a:	2300      	movs	r3, #0
   8480c:	60fb      	str	r3, [r7, #12]
   8480e:	e008      	b.n	84822 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84810:	68fb      	ldr	r3, [r7, #12]
   84812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84814:	88fb      	ldrh	r3, [r7, #6]
   84816:	009b      	lsls	r3, r3, #2
   84818:	4610      	mov	r0, r2
   8481a:	21a5      	movs	r1, #165	; 0xa5
   8481c:	461a      	mov	r2, r3
   8481e:	4b05      	ldr	r3, [pc, #20]	; (84834 <prvAllocateTCBAndStack+0x6c>)
   84820:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84822:	68fb      	ldr	r3, [r7, #12]
}
   84824:	4618      	mov	r0, r3
   84826:	3710      	adds	r7, #16
   84828:	46bd      	mov	sp, r7
   8482a:	bd80      	pop	{r7, pc}
   8482c:	00082f7d 	.word	0x00082f7d
   84830:	000830f5 	.word	0x000830f5
   84834:	00086639 	.word	0x00086639

00084838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84838:	b580      	push	{r7, lr}
   8483a:	b082      	sub	sp, #8
   8483c:	af00      	add	r7, sp, #0
   8483e:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84840:	687b      	ldr	r3, [r7, #4]
   84842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84844:	4618      	mov	r0, r3
   84846:	4b04      	ldr	r3, [pc, #16]	; (84858 <prvDeleteTCB+0x20>)
   84848:	4798      	blx	r3
		vPortFree( pxTCB );
   8484a:	6878      	ldr	r0, [r7, #4]
   8484c:	4b02      	ldr	r3, [pc, #8]	; (84858 <prvDeleteTCB+0x20>)
   8484e:	4798      	blx	r3
	}
   84850:	3708      	adds	r7, #8
   84852:	46bd      	mov	sp, r7
   84854:	bd80      	pop	{r7, pc}
   84856:	bf00      	nop
   84858:	000830f5 	.word	0x000830f5

0008485c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   8485c:	b480      	push	{r7}
   8485e:	b083      	sub	sp, #12
   84860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84862:	4b0e      	ldr	r3, [pc, #56]	; (8489c <prvResetNextTaskUnblockTime+0x40>)
   84864:	681b      	ldr	r3, [r3, #0]
   84866:	681b      	ldr	r3, [r3, #0]
   84868:	2b00      	cmp	r3, #0
   8486a:	d101      	bne.n	84870 <prvResetNextTaskUnblockTime+0x14>
   8486c:	2301      	movs	r3, #1
   8486e:	e000      	b.n	84872 <prvResetNextTaskUnblockTime+0x16>
   84870:	2300      	movs	r3, #0
   84872:	2b00      	cmp	r3, #0
   84874:	d004      	beq.n	84880 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84876:	4b0a      	ldr	r3, [pc, #40]	; (848a0 <prvResetNextTaskUnblockTime+0x44>)
   84878:	f04f 32ff 	mov.w	r2, #4294967295
   8487c:	601a      	str	r2, [r3, #0]
   8487e:	e008      	b.n	84892 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84880:	4b06      	ldr	r3, [pc, #24]	; (8489c <prvResetNextTaskUnblockTime+0x40>)
   84882:	681b      	ldr	r3, [r3, #0]
   84884:	68db      	ldr	r3, [r3, #12]
   84886:	68db      	ldr	r3, [r3, #12]
   84888:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8488a:	687b      	ldr	r3, [r7, #4]
   8488c:	685a      	ldr	r2, [r3, #4]
   8488e:	4b04      	ldr	r3, [pc, #16]	; (848a0 <prvResetNextTaskUnblockTime+0x44>)
   84890:	601a      	str	r2, [r3, #0]
	}
}
   84892:	370c      	adds	r7, #12
   84894:	46bd      	mov	sp, r7
   84896:	f85d 7b04 	ldr.w	r7, [sp], #4
   8489a:	4770      	bx	lr
   8489c:	2007a600 	.word	0x2007a600
   848a0:	2007000c 	.word	0x2007000c

000848a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   848a4:	b480      	push	{r7}
   848a6:	b083      	sub	sp, #12
   848a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   848aa:	4b0b      	ldr	r3, [pc, #44]	; (848d8 <xTaskGetSchedulerState+0x34>)
   848ac:	681b      	ldr	r3, [r3, #0]
   848ae:	2b00      	cmp	r3, #0
   848b0:	d102      	bne.n	848b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   848b2:	2301      	movs	r3, #1
   848b4:	607b      	str	r3, [r7, #4]
   848b6:	e008      	b.n	848ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   848b8:	4b08      	ldr	r3, [pc, #32]	; (848dc <xTaskGetSchedulerState+0x38>)
   848ba:	681b      	ldr	r3, [r3, #0]
   848bc:	2b00      	cmp	r3, #0
   848be:	d102      	bne.n	848c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   848c0:	2302      	movs	r3, #2
   848c2:	607b      	str	r3, [r7, #4]
   848c4:	e001      	b.n	848ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   848c6:	2300      	movs	r3, #0
   848c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   848ca:	687b      	ldr	r3, [r7, #4]
	}
   848cc:	4618      	mov	r0, r3
   848ce:	370c      	adds	r7, #12
   848d0:	46bd      	mov	sp, r7
   848d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   848d6:	4770      	bx	lr
   848d8:	2007a654 	.word	0x2007a654
   848dc:	2007a668 	.word	0x2007a668

000848e0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   848e0:	b580      	push	{r7, lr}
   848e2:	b084      	sub	sp, #16
   848e4:	af00      	add	r7, sp, #0
   848e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   848e8:	687b      	ldr	r3, [r7, #4]
   848ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   848ec:	687b      	ldr	r3, [r7, #4]
   848ee:	2b00      	cmp	r3, #0
   848f0:	d062      	beq.n	849b8 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   848f2:	68fb      	ldr	r3, [r7, #12]
   848f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   848f6:	4b32      	ldr	r3, [pc, #200]	; (849c0 <vTaskPriorityInherit+0xe0>)
   848f8:	681b      	ldr	r3, [r3, #0]
   848fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   848fc:	429a      	cmp	r2, r3
   848fe:	d25b      	bcs.n	849b8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   84900:	68fb      	ldr	r3, [r7, #12]
   84902:	699b      	ldr	r3, [r3, #24]
   84904:	2b00      	cmp	r3, #0
   84906:	db06      	blt.n	84916 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84908:	4b2d      	ldr	r3, [pc, #180]	; (849c0 <vTaskPriorityInherit+0xe0>)
   8490a:	681b      	ldr	r3, [r3, #0]
   8490c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8490e:	f1c3 0205 	rsb	r2, r3, #5
   84912:	68fb      	ldr	r3, [r7, #12]
   84914:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   84916:	68fb      	ldr	r3, [r7, #12]
   84918:	6959      	ldr	r1, [r3, #20]
   8491a:	68fb      	ldr	r3, [r7, #12]
   8491c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8491e:	4613      	mov	r3, r2
   84920:	009b      	lsls	r3, r3, #2
   84922:	4413      	add	r3, r2
   84924:	009b      	lsls	r3, r3, #2
   84926:	4a27      	ldr	r2, [pc, #156]	; (849c4 <vTaskPriorityInherit+0xe4>)
   84928:	4413      	add	r3, r2
   8492a:	4299      	cmp	r1, r3
   8492c:	d101      	bne.n	84932 <vTaskPriorityInherit+0x52>
   8492e:	2301      	movs	r3, #1
   84930:	e000      	b.n	84934 <vTaskPriorityInherit+0x54>
   84932:	2300      	movs	r3, #0
   84934:	2b00      	cmp	r3, #0
   84936:	d03a      	beq.n	849ae <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84938:	68fb      	ldr	r3, [r7, #12]
   8493a:	3304      	adds	r3, #4
   8493c:	4618      	mov	r0, r3
   8493e:	4b22      	ldr	r3, [pc, #136]	; (849c8 <vTaskPriorityInherit+0xe8>)
   84940:	4798      	blx	r3
   84942:	4603      	mov	r3, r0
   84944:	2b00      	cmp	r3, #0
   84946:	d115      	bne.n	84974 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84948:	68fb      	ldr	r3, [r7, #12]
   8494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8494c:	491d      	ldr	r1, [pc, #116]	; (849c4 <vTaskPriorityInherit+0xe4>)
   8494e:	4613      	mov	r3, r2
   84950:	009b      	lsls	r3, r3, #2
   84952:	4413      	add	r3, r2
   84954:	009b      	lsls	r3, r3, #2
   84956:	440b      	add	r3, r1
   84958:	681b      	ldr	r3, [r3, #0]
   8495a:	2b00      	cmp	r3, #0
   8495c:	d10a      	bne.n	84974 <vTaskPriorityInherit+0x94>
   8495e:	68fb      	ldr	r3, [r7, #12]
   84960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84962:	2201      	movs	r2, #1
   84964:	fa02 f303 	lsl.w	r3, r2, r3
   84968:	43da      	mvns	r2, r3
   8496a:	4b18      	ldr	r3, [pc, #96]	; (849cc <vTaskPriorityInherit+0xec>)
   8496c:	681b      	ldr	r3, [r3, #0]
   8496e:	401a      	ands	r2, r3
   84970:	4b16      	ldr	r3, [pc, #88]	; (849cc <vTaskPriorityInherit+0xec>)
   84972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84974:	4b12      	ldr	r3, [pc, #72]	; (849c0 <vTaskPriorityInherit+0xe0>)
   84976:	681b      	ldr	r3, [r3, #0]
   84978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8497a:	68fb      	ldr	r3, [r7, #12]
   8497c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   8497e:	68fb      	ldr	r3, [r7, #12]
   84980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84982:	2201      	movs	r2, #1
   84984:	409a      	lsls	r2, r3
   84986:	4b11      	ldr	r3, [pc, #68]	; (849cc <vTaskPriorityInherit+0xec>)
   84988:	681b      	ldr	r3, [r3, #0]
   8498a:	431a      	orrs	r2, r3
   8498c:	4b0f      	ldr	r3, [pc, #60]	; (849cc <vTaskPriorityInherit+0xec>)
   8498e:	601a      	str	r2, [r3, #0]
   84990:	68fb      	ldr	r3, [r7, #12]
   84992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84994:	4613      	mov	r3, r2
   84996:	009b      	lsls	r3, r3, #2
   84998:	4413      	add	r3, r2
   8499a:	009b      	lsls	r3, r3, #2
   8499c:	4a09      	ldr	r2, [pc, #36]	; (849c4 <vTaskPriorityInherit+0xe4>)
   8499e:	441a      	add	r2, r3
   849a0:	68fb      	ldr	r3, [r7, #12]
   849a2:	3304      	adds	r3, #4
   849a4:	4610      	mov	r0, r2
   849a6:	4619      	mov	r1, r3
   849a8:	4b09      	ldr	r3, [pc, #36]	; (849d0 <vTaskPriorityInherit+0xf0>)
   849aa:	4798      	blx	r3
   849ac:	e004      	b.n	849b8 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   849ae:	4b04      	ldr	r3, [pc, #16]	; (849c0 <vTaskPriorityInherit+0xe0>)
   849b0:	681b      	ldr	r3, [r3, #0]
   849b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849b4:	68fb      	ldr	r3, [r7, #12]
   849b6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   849b8:	3710      	adds	r7, #16
   849ba:	46bd      	mov	sp, r7
   849bc:	bd80      	pop	{r7, pc}
   849be:	bf00      	nop
   849c0:	2007a570 	.word	0x2007a570
   849c4:	2007a574 	.word	0x2007a574
   849c8:	00082be1 	.word	0x00082be1
   849cc:	2007a650 	.word	0x2007a650
   849d0:	00082b29 	.word	0x00082b29

000849d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   849d4:	b580      	push	{r7, lr}
   849d6:	b084      	sub	sp, #16
   849d8:	af00      	add	r7, sp, #0
   849da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   849dc:	687b      	ldr	r3, [r7, #4]
   849de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   849e0:	2300      	movs	r3, #0
   849e2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   849e4:	687b      	ldr	r3, [r7, #4]
   849e6:	2b00      	cmp	r3, #0
   849e8:	d056      	beq.n	84a98 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   849ea:	68bb      	ldr	r3, [r7, #8]
   849ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   849ee:	2b00      	cmp	r3, #0
   849f0:	d102      	bne.n	849f8 <xTaskPriorityDisinherit+0x24>
   849f2:	4b2c      	ldr	r3, [pc, #176]	; (84aa4 <xTaskPriorityDisinherit+0xd0>)
   849f4:	4798      	blx	r3
   849f6:	e7fe      	b.n	849f6 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   849f8:	68bb      	ldr	r3, [r7, #8]
   849fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   849fc:	1e5a      	subs	r2, r3, #1
   849fe:	68bb      	ldr	r3, [r7, #8]
   84a00:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   84a02:	68bb      	ldr	r3, [r7, #8]
   84a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a06:	68bb      	ldr	r3, [r7, #8]
   84a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84a0a:	429a      	cmp	r2, r3
   84a0c:	d044      	beq.n	84a98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84a0e:	68bb      	ldr	r3, [r7, #8]
   84a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84a12:	2b00      	cmp	r3, #0
   84a14:	d140      	bne.n	84a98 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84a16:	68bb      	ldr	r3, [r7, #8]
   84a18:	3304      	adds	r3, #4
   84a1a:	4618      	mov	r0, r3
   84a1c:	4b22      	ldr	r3, [pc, #136]	; (84aa8 <xTaskPriorityDisinherit+0xd4>)
   84a1e:	4798      	blx	r3
   84a20:	4603      	mov	r3, r0
   84a22:	2b00      	cmp	r3, #0
   84a24:	d115      	bne.n	84a52 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84a26:	68bb      	ldr	r3, [r7, #8]
   84a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a2a:	4920      	ldr	r1, [pc, #128]	; (84aac <xTaskPriorityDisinherit+0xd8>)
   84a2c:	4613      	mov	r3, r2
   84a2e:	009b      	lsls	r3, r3, #2
   84a30:	4413      	add	r3, r2
   84a32:	009b      	lsls	r3, r3, #2
   84a34:	440b      	add	r3, r1
   84a36:	681b      	ldr	r3, [r3, #0]
   84a38:	2b00      	cmp	r3, #0
   84a3a:	d10a      	bne.n	84a52 <xTaskPriorityDisinherit+0x7e>
   84a3c:	68bb      	ldr	r3, [r7, #8]
   84a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a40:	2201      	movs	r2, #1
   84a42:	fa02 f303 	lsl.w	r3, r2, r3
   84a46:	43da      	mvns	r2, r3
   84a48:	4b19      	ldr	r3, [pc, #100]	; (84ab0 <xTaskPriorityDisinherit+0xdc>)
   84a4a:	681b      	ldr	r3, [r3, #0]
   84a4c:	401a      	ands	r2, r3
   84a4e:	4b18      	ldr	r3, [pc, #96]	; (84ab0 <xTaskPriorityDisinherit+0xdc>)
   84a50:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84a52:	68bb      	ldr	r3, [r7, #8]
   84a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84a56:	68bb      	ldr	r3, [r7, #8]
   84a58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84a5a:	68bb      	ldr	r3, [r7, #8]
   84a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a5e:	f1c3 0205 	rsb	r2, r3, #5
   84a62:	68bb      	ldr	r3, [r7, #8]
   84a64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84a66:	68bb      	ldr	r3, [r7, #8]
   84a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a6a:	2201      	movs	r2, #1
   84a6c:	409a      	lsls	r2, r3
   84a6e:	4b10      	ldr	r3, [pc, #64]	; (84ab0 <xTaskPriorityDisinherit+0xdc>)
   84a70:	681b      	ldr	r3, [r3, #0]
   84a72:	431a      	orrs	r2, r3
   84a74:	4b0e      	ldr	r3, [pc, #56]	; (84ab0 <xTaskPriorityDisinherit+0xdc>)
   84a76:	601a      	str	r2, [r3, #0]
   84a78:	68bb      	ldr	r3, [r7, #8]
   84a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a7c:	4613      	mov	r3, r2
   84a7e:	009b      	lsls	r3, r3, #2
   84a80:	4413      	add	r3, r2
   84a82:	009b      	lsls	r3, r3, #2
   84a84:	4a09      	ldr	r2, [pc, #36]	; (84aac <xTaskPriorityDisinherit+0xd8>)
   84a86:	441a      	add	r2, r3
   84a88:	68bb      	ldr	r3, [r7, #8]
   84a8a:	3304      	adds	r3, #4
   84a8c:	4610      	mov	r0, r2
   84a8e:	4619      	mov	r1, r3
   84a90:	4b08      	ldr	r3, [pc, #32]	; (84ab4 <xTaskPriorityDisinherit+0xe0>)
   84a92:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84a94:	2301      	movs	r3, #1
   84a96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84a98:	68fb      	ldr	r3, [r7, #12]
	}
   84a9a:	4618      	mov	r0, r3
   84a9c:	3710      	adds	r7, #16
   84a9e:	46bd      	mov	sp, r7
   84aa0:	bd80      	pop	{r7, pc}
   84aa2:	bf00      	nop
   84aa4:	00082e59 	.word	0x00082e59
   84aa8:	00082be1 	.word	0x00082be1
   84aac:	2007a574 	.word	0x2007a574
   84ab0:	2007a650 	.word	0x2007a650
   84ab4:	00082b29 	.word	0x00082b29

00084ab8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84ab8:	b480      	push	{r7}
   84aba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84abc:	4b07      	ldr	r3, [pc, #28]	; (84adc <pvTaskIncrementMutexHeldCount+0x24>)
   84abe:	681b      	ldr	r3, [r3, #0]
   84ac0:	2b00      	cmp	r3, #0
   84ac2:	d004      	beq.n	84ace <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84ac4:	4b05      	ldr	r3, [pc, #20]	; (84adc <pvTaskIncrementMutexHeldCount+0x24>)
   84ac6:	681b      	ldr	r3, [r3, #0]
   84ac8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   84aca:	3201      	adds	r2, #1
   84acc:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84ace:	4b03      	ldr	r3, [pc, #12]	; (84adc <pvTaskIncrementMutexHeldCount+0x24>)
   84ad0:	681b      	ldr	r3, [r3, #0]
	}
   84ad2:	4618      	mov	r0, r3
   84ad4:	46bd      	mov	sp, r7
   84ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
   84ada:	4770      	bx	lr
   84adc:	2007a570 	.word	0x2007a570

00084ae0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84ae0:	b590      	push	{r4, r7, lr}
   84ae2:	b087      	sub	sp, #28
   84ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   84ae6:	2300      	movs	r3, #0
   84ae8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   84aea:	4b10      	ldr	r3, [pc, #64]	; (84b2c <xTimerCreateTimerTask+0x4c>)
   84aec:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84aee:	4b10      	ldr	r3, [pc, #64]	; (84b30 <xTimerCreateTimerTask+0x50>)
   84af0:	681b      	ldr	r3, [r3, #0]
   84af2:	2b00      	cmp	r3, #0
   84af4:	d00f      	beq.n	84b16 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   84af6:	2302      	movs	r3, #2
   84af8:	9300      	str	r3, [sp, #0]
   84afa:	2300      	movs	r3, #0
   84afc:	9301      	str	r3, [sp, #4]
   84afe:	2300      	movs	r3, #0
   84b00:	9302      	str	r3, [sp, #8]
   84b02:	2300      	movs	r3, #0
   84b04:	9303      	str	r3, [sp, #12]
   84b06:	480b      	ldr	r0, [pc, #44]	; (84b34 <xTimerCreateTimerTask+0x54>)
   84b08:	490b      	ldr	r1, [pc, #44]	; (84b38 <xTimerCreateTimerTask+0x58>)
   84b0a:	f44f 7282 	mov.w	r2, #260	; 0x104
   84b0e:	2300      	movs	r3, #0
   84b10:	4c0a      	ldr	r4, [pc, #40]	; (84b3c <xTimerCreateTimerTask+0x5c>)
   84b12:	47a0      	blx	r4
   84b14:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   84b16:	687b      	ldr	r3, [r7, #4]
   84b18:	2b00      	cmp	r3, #0
   84b1a:	d102      	bne.n	84b22 <xTimerCreateTimerTask+0x42>
   84b1c:	4b08      	ldr	r3, [pc, #32]	; (84b40 <xTimerCreateTimerTask+0x60>)
   84b1e:	4798      	blx	r3
   84b20:	e7fe      	b.n	84b20 <xTimerCreateTimerTask+0x40>
	return xReturn;
   84b22:	687b      	ldr	r3, [r7, #4]
}
   84b24:	4618      	mov	r0, r3
   84b26:	370c      	adds	r7, #12
   84b28:	46bd      	mov	sp, r7
   84b2a:	bd90      	pop	{r4, r7, pc}
   84b2c:	00085015 	.word	0x00085015
   84b30:	2007a69c 	.word	0x2007a69c
   84b34:	00084c5d 	.word	0x00084c5d
   84b38:	00086940 	.word	0x00086940
   84b3c:	00083bcd 	.word	0x00083bcd
   84b40:	00082e59 	.word	0x00082e59

00084b44 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   84b44:	b590      	push	{r4, r7, lr}
   84b46:	b089      	sub	sp, #36	; 0x24
   84b48:	af00      	add	r7, sp, #0
   84b4a:	60f8      	str	r0, [r7, #12]
   84b4c:	60b9      	str	r1, [r7, #8]
   84b4e:	607a      	str	r2, [r7, #4]
   84b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   84b52:	2300      	movs	r3, #0
   84b54:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   84b56:	4b1d      	ldr	r3, [pc, #116]	; (84bcc <xTimerGenericCommand+0x88>)
   84b58:	681b      	ldr	r3, [r3, #0]
   84b5a:	2b00      	cmp	r3, #0
   84b5c:	d030      	beq.n	84bc0 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   84b5e:	68bb      	ldr	r3, [r7, #8]
   84b60:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   84b62:	687b      	ldr	r3, [r7, #4]
   84b64:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   84b66:	68fb      	ldr	r3, [r7, #12]
   84b68:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   84b6a:	68bb      	ldr	r3, [r7, #8]
   84b6c:	2b05      	cmp	r3, #5
   84b6e:	dc1c      	bgt.n	84baa <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   84b70:	4b17      	ldr	r3, [pc, #92]	; (84bd0 <xTimerGenericCommand+0x8c>)
   84b72:	4798      	blx	r3
   84b74:	4603      	mov	r3, r0
   84b76:	2b02      	cmp	r3, #2
   84b78:	d10b      	bne.n	84b92 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   84b7a:	4b14      	ldr	r3, [pc, #80]	; (84bcc <xTimerGenericCommand+0x88>)
   84b7c:	681a      	ldr	r2, [r3, #0]
   84b7e:	f107 0310 	add.w	r3, r7, #16
   84b82:	4610      	mov	r0, r2
   84b84:	4619      	mov	r1, r3
   84b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84b88:	2300      	movs	r3, #0
   84b8a:	4c12      	ldr	r4, [pc, #72]	; (84bd4 <xTimerGenericCommand+0x90>)
   84b8c:	47a0      	blx	r4
   84b8e:	61f8      	str	r0, [r7, #28]
   84b90:	e016      	b.n	84bc0 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84b92:	4b0e      	ldr	r3, [pc, #56]	; (84bcc <xTimerGenericCommand+0x88>)
   84b94:	681a      	ldr	r2, [r3, #0]
   84b96:	f107 0310 	add.w	r3, r7, #16
   84b9a:	4610      	mov	r0, r2
   84b9c:	4619      	mov	r1, r3
   84b9e:	2200      	movs	r2, #0
   84ba0:	2300      	movs	r3, #0
   84ba2:	4c0c      	ldr	r4, [pc, #48]	; (84bd4 <xTimerGenericCommand+0x90>)
   84ba4:	47a0      	blx	r4
   84ba6:	61f8      	str	r0, [r7, #28]
   84ba8:	e00a      	b.n	84bc0 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   84baa:	4b08      	ldr	r3, [pc, #32]	; (84bcc <xTimerGenericCommand+0x88>)
   84bac:	681a      	ldr	r2, [r3, #0]
   84bae:	f107 0310 	add.w	r3, r7, #16
   84bb2:	4610      	mov	r0, r2
   84bb4:	4619      	mov	r1, r3
   84bb6:	683a      	ldr	r2, [r7, #0]
   84bb8:	2300      	movs	r3, #0
   84bba:	4c07      	ldr	r4, [pc, #28]	; (84bd8 <xTimerGenericCommand+0x94>)
   84bbc:	47a0      	blx	r4
   84bbe:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84bc0:	69fb      	ldr	r3, [r7, #28]
}
   84bc2:	4618      	mov	r0, r3
   84bc4:	3724      	adds	r7, #36	; 0x24
   84bc6:	46bd      	mov	sp, r7
   84bc8:	bd90      	pop	{r4, r7, pc}
   84bca:	bf00      	nop
   84bcc:	2007a69c 	.word	0x2007a69c
   84bd0:	000848a5 	.word	0x000848a5
   84bd4:	00083461 	.word	0x00083461
   84bd8:	00083625 	.word	0x00083625

00084bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   84bdc:	b590      	push	{r4, r7, lr}
   84bde:	b087      	sub	sp, #28
   84be0:	af02      	add	r7, sp, #8
   84be2:	6078      	str	r0, [r7, #4]
   84be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84be6:	4b18      	ldr	r3, [pc, #96]	; (84c48 <prvProcessExpiredTimer+0x6c>)
   84be8:	681b      	ldr	r3, [r3, #0]
   84bea:	68db      	ldr	r3, [r3, #12]
   84bec:	68db      	ldr	r3, [r3, #12]
   84bee:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84bf0:	68fb      	ldr	r3, [r7, #12]
   84bf2:	3304      	adds	r3, #4
   84bf4:	4618      	mov	r0, r3
   84bf6:	4b15      	ldr	r3, [pc, #84]	; (84c4c <prvProcessExpiredTimer+0x70>)
   84bf8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84bfa:	68fb      	ldr	r3, [r7, #12]
   84bfc:	69db      	ldr	r3, [r3, #28]
   84bfe:	2b01      	cmp	r3, #1
   84c00:	d11b      	bne.n	84c3a <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   84c02:	68fb      	ldr	r3, [r7, #12]
   84c04:	699a      	ldr	r2, [r3, #24]
   84c06:	687b      	ldr	r3, [r7, #4]
   84c08:	4413      	add	r3, r2
   84c0a:	68f8      	ldr	r0, [r7, #12]
   84c0c:	4619      	mov	r1, r3
   84c0e:	683a      	ldr	r2, [r7, #0]
   84c10:	687b      	ldr	r3, [r7, #4]
   84c12:	4c0f      	ldr	r4, [pc, #60]	; (84c50 <prvProcessExpiredTimer+0x74>)
   84c14:	47a0      	blx	r4
   84c16:	4603      	mov	r3, r0
   84c18:	2b01      	cmp	r3, #1
   84c1a:	d10e      	bne.n	84c3a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84c1c:	2300      	movs	r3, #0
   84c1e:	9300      	str	r3, [sp, #0]
   84c20:	68f8      	ldr	r0, [r7, #12]
   84c22:	2100      	movs	r1, #0
   84c24:	687a      	ldr	r2, [r7, #4]
   84c26:	2300      	movs	r3, #0
   84c28:	4c0a      	ldr	r4, [pc, #40]	; (84c54 <prvProcessExpiredTimer+0x78>)
   84c2a:	47a0      	blx	r4
   84c2c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   84c2e:	68bb      	ldr	r3, [r7, #8]
   84c30:	2b00      	cmp	r3, #0
   84c32:	d102      	bne.n	84c3a <prvProcessExpiredTimer+0x5e>
   84c34:	4b08      	ldr	r3, [pc, #32]	; (84c58 <prvProcessExpiredTimer+0x7c>)
   84c36:	4798      	blx	r3
   84c38:	e7fe      	b.n	84c38 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84c3a:	68fb      	ldr	r3, [r7, #12]
   84c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84c3e:	68f8      	ldr	r0, [r7, #12]
   84c40:	4798      	blx	r3
}
   84c42:	3714      	adds	r7, #20
   84c44:	46bd      	mov	sp, r7
   84c46:	bd90      	pop	{r4, r7, pc}
   84c48:	2007a694 	.word	0x2007a694
   84c4c:	00082be1 	.word	0x00082be1
   84c50:	00084da1 	.word	0x00084da1
   84c54:	00084b45 	.word	0x00084b45
   84c58:	00082e59 	.word	0x00082e59

00084c5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   84c5c:	b580      	push	{r7, lr}
   84c5e:	b084      	sub	sp, #16
   84c60:	af00      	add	r7, sp, #0
   84c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   84c64:	f107 0308 	add.w	r3, r7, #8
   84c68:	4618      	mov	r0, r3
   84c6a:	4b05      	ldr	r3, [pc, #20]	; (84c80 <prvTimerTask+0x24>)
   84c6c:	4798      	blx	r3
   84c6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   84c70:	68bb      	ldr	r3, [r7, #8]
   84c72:	68f8      	ldr	r0, [r7, #12]
   84c74:	4619      	mov	r1, r3
   84c76:	4b03      	ldr	r3, [pc, #12]	; (84c84 <prvTimerTask+0x28>)
   84c78:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   84c7a:	4b03      	ldr	r3, [pc, #12]	; (84c88 <prvTimerTask+0x2c>)
   84c7c:	4798      	blx	r3
	}
   84c7e:	e7f1      	b.n	84c64 <prvTimerTask+0x8>
   84c80:	00084d11 	.word	0x00084d11
   84c84:	00084c8d 	.word	0x00084c8d
   84c88:	00084e29 	.word	0x00084e29

00084c8c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   84c8c:	b580      	push	{r7, lr}
   84c8e:	b084      	sub	sp, #16
   84c90:	af00      	add	r7, sp, #0
   84c92:	6078      	str	r0, [r7, #4]
   84c94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   84c96:	4b17      	ldr	r3, [pc, #92]	; (84cf4 <prvProcessTimerOrBlockTask+0x68>)
   84c98:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84c9a:	f107 0308 	add.w	r3, r7, #8
   84c9e:	4618      	mov	r0, r3
   84ca0:	4b15      	ldr	r3, [pc, #84]	; (84cf8 <prvProcessTimerOrBlockTask+0x6c>)
   84ca2:	4798      	blx	r3
   84ca4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   84ca6:	68bb      	ldr	r3, [r7, #8]
   84ca8:	2b00      	cmp	r3, #0
   84caa:	d11e      	bne.n	84cea <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   84cac:	683b      	ldr	r3, [r7, #0]
   84cae:	2b00      	cmp	r3, #0
   84cb0:	d10a      	bne.n	84cc8 <prvProcessTimerOrBlockTask+0x3c>
   84cb2:	687a      	ldr	r2, [r7, #4]
   84cb4:	68fb      	ldr	r3, [r7, #12]
   84cb6:	429a      	cmp	r2, r3
   84cb8:	d806      	bhi.n	84cc8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   84cba:	4b10      	ldr	r3, [pc, #64]	; (84cfc <prvProcessTimerOrBlockTask+0x70>)
   84cbc:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   84cbe:	6878      	ldr	r0, [r7, #4]
   84cc0:	68f9      	ldr	r1, [r7, #12]
   84cc2:	4b0f      	ldr	r3, [pc, #60]	; (84d00 <prvProcessTimerOrBlockTask+0x74>)
   84cc4:	4798      	blx	r3
   84cc6:	e012      	b.n	84cee <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   84cc8:	4b0e      	ldr	r3, [pc, #56]	; (84d04 <prvProcessTimerOrBlockTask+0x78>)
   84cca:	681a      	ldr	r2, [r3, #0]
   84ccc:	6879      	ldr	r1, [r7, #4]
   84cce:	68fb      	ldr	r3, [r7, #12]
   84cd0:	1acb      	subs	r3, r1, r3
   84cd2:	4610      	mov	r0, r2
   84cd4:	4619      	mov	r1, r3
   84cd6:	4b0c      	ldr	r3, [pc, #48]	; (84d08 <prvProcessTimerOrBlockTask+0x7c>)
   84cd8:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   84cda:	4b08      	ldr	r3, [pc, #32]	; (84cfc <prvProcessTimerOrBlockTask+0x70>)
   84cdc:	4798      	blx	r3
   84cde:	4603      	mov	r3, r0
   84ce0:	2b00      	cmp	r3, #0
   84ce2:	d104      	bne.n	84cee <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   84ce4:	4b09      	ldr	r3, [pc, #36]	; (84d0c <prvProcessTimerOrBlockTask+0x80>)
   84ce6:	4798      	blx	r3
   84ce8:	e001      	b.n	84cee <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   84cea:	4b04      	ldr	r3, [pc, #16]	; (84cfc <prvProcessTimerOrBlockTask+0x70>)
   84cec:	4798      	blx	r3
		}
	}
}
   84cee:	3710      	adds	r7, #16
   84cf0:	46bd      	mov	sp, r7
   84cf2:	bd80      	pop	{r7, pc}
   84cf4:	00083ec9 	.word	0x00083ec9
   84cf8:	00084d59 	.word	0x00084d59
   84cfc:	00083ee5 	.word	0x00083ee5
   84d00:	00084bdd 	.word	0x00084bdd
   84d04:	2007a69c 	.word	0x2007a69c
   84d08:	00083b65 	.word	0x00083b65
   84d0c:	00082dbd 	.word	0x00082dbd

00084d10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   84d10:	b480      	push	{r7}
   84d12:	b085      	sub	sp, #20
   84d14:	af00      	add	r7, sp, #0
   84d16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   84d18:	4b0e      	ldr	r3, [pc, #56]	; (84d54 <prvGetNextExpireTime+0x44>)
   84d1a:	681b      	ldr	r3, [r3, #0]
   84d1c:	681b      	ldr	r3, [r3, #0]
   84d1e:	2b00      	cmp	r3, #0
   84d20:	bf14      	ite	ne
   84d22:	2300      	movne	r3, #0
   84d24:	2301      	moveq	r3, #1
   84d26:	b2db      	uxtb	r3, r3
   84d28:	461a      	mov	r2, r3
   84d2a:	687b      	ldr	r3, [r7, #4]
   84d2c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   84d2e:	687b      	ldr	r3, [r7, #4]
   84d30:	681b      	ldr	r3, [r3, #0]
   84d32:	2b00      	cmp	r3, #0
   84d34:	d105      	bne.n	84d42 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84d36:	4b07      	ldr	r3, [pc, #28]	; (84d54 <prvGetNextExpireTime+0x44>)
   84d38:	681b      	ldr	r3, [r3, #0]
   84d3a:	68db      	ldr	r3, [r3, #12]
   84d3c:	681b      	ldr	r3, [r3, #0]
   84d3e:	60fb      	str	r3, [r7, #12]
   84d40:	e001      	b.n	84d46 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   84d42:	2300      	movs	r3, #0
   84d44:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   84d46:	68fb      	ldr	r3, [r7, #12]
}
   84d48:	4618      	mov	r0, r3
   84d4a:	3714      	adds	r7, #20
   84d4c:	46bd      	mov	sp, r7
   84d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84d52:	4770      	bx	lr
   84d54:	2007a694 	.word	0x2007a694

00084d58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   84d58:	b580      	push	{r7, lr}
   84d5a:	b084      	sub	sp, #16
   84d5c:	af00      	add	r7, sp, #0
   84d5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   84d60:	4b0c      	ldr	r3, [pc, #48]	; (84d94 <prvSampleTimeNow+0x3c>)
   84d62:	4798      	blx	r3
   84d64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   84d66:	4b0c      	ldr	r3, [pc, #48]	; (84d98 <prvSampleTimeNow+0x40>)
   84d68:	681b      	ldr	r3, [r3, #0]
   84d6a:	68fa      	ldr	r2, [r7, #12]
   84d6c:	429a      	cmp	r2, r3
   84d6e:	d205      	bcs.n	84d7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   84d70:	4b0a      	ldr	r3, [pc, #40]	; (84d9c <prvSampleTimeNow+0x44>)
   84d72:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   84d74:	687b      	ldr	r3, [r7, #4]
   84d76:	2201      	movs	r2, #1
   84d78:	601a      	str	r2, [r3, #0]
   84d7a:	e002      	b.n	84d82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   84d7c:	687b      	ldr	r3, [r7, #4]
   84d7e:	2200      	movs	r2, #0
   84d80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   84d82:	4b05      	ldr	r3, [pc, #20]	; (84d98 <prvSampleTimeNow+0x40>)
   84d84:	68fa      	ldr	r2, [r7, #12]
   84d86:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   84d88:	68fb      	ldr	r3, [r7, #12]
}
   84d8a:	4618      	mov	r0, r3
   84d8c:	3710      	adds	r7, #16
   84d8e:	46bd      	mov	sp, r7
   84d90:	bd80      	pop	{r7, pc}
   84d92:	bf00      	nop
   84d94:	00084009 	.word	0x00084009
   84d98:	2007a6a0 	.word	0x2007a6a0
   84d9c:	00084f55 	.word	0x00084f55

00084da0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   84da0:	b580      	push	{r7, lr}
   84da2:	b086      	sub	sp, #24
   84da4:	af00      	add	r7, sp, #0
   84da6:	60f8      	str	r0, [r7, #12]
   84da8:	60b9      	str	r1, [r7, #8]
   84daa:	607a      	str	r2, [r7, #4]
   84dac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   84dae:	2300      	movs	r3, #0
   84db0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   84db2:	68fb      	ldr	r3, [r7, #12]
   84db4:	68ba      	ldr	r2, [r7, #8]
   84db6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84db8:	68fb      	ldr	r3, [r7, #12]
   84dba:	68fa      	ldr	r2, [r7, #12]
   84dbc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   84dbe:	68ba      	ldr	r2, [r7, #8]
   84dc0:	687b      	ldr	r3, [r7, #4]
   84dc2:	429a      	cmp	r2, r3
   84dc4:	d812      	bhi.n	84dec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   84dc6:	687a      	ldr	r2, [r7, #4]
   84dc8:	683b      	ldr	r3, [r7, #0]
   84dca:	1ad2      	subs	r2, r2, r3
   84dcc:	68fb      	ldr	r3, [r7, #12]
   84dce:	699b      	ldr	r3, [r3, #24]
   84dd0:	429a      	cmp	r2, r3
   84dd2:	d302      	bcc.n	84dda <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   84dd4:	2301      	movs	r3, #1
   84dd6:	617b      	str	r3, [r7, #20]
   84dd8:	e01b      	b.n	84e12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   84dda:	4b10      	ldr	r3, [pc, #64]	; (84e1c <prvInsertTimerInActiveList+0x7c>)
   84ddc:	681a      	ldr	r2, [r3, #0]
   84dde:	68fb      	ldr	r3, [r7, #12]
   84de0:	3304      	adds	r3, #4
   84de2:	4610      	mov	r0, r2
   84de4:	4619      	mov	r1, r3
   84de6:	4b0e      	ldr	r3, [pc, #56]	; (84e20 <prvInsertTimerInActiveList+0x80>)
   84de8:	4798      	blx	r3
   84dea:	e012      	b.n	84e12 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   84dec:	687a      	ldr	r2, [r7, #4]
   84dee:	683b      	ldr	r3, [r7, #0]
   84df0:	429a      	cmp	r2, r3
   84df2:	d206      	bcs.n	84e02 <prvInsertTimerInActiveList+0x62>
   84df4:	68ba      	ldr	r2, [r7, #8]
   84df6:	683b      	ldr	r3, [r7, #0]
   84df8:	429a      	cmp	r2, r3
   84dfa:	d302      	bcc.n	84e02 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   84dfc:	2301      	movs	r3, #1
   84dfe:	617b      	str	r3, [r7, #20]
   84e00:	e007      	b.n	84e12 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84e02:	4b08      	ldr	r3, [pc, #32]	; (84e24 <prvInsertTimerInActiveList+0x84>)
   84e04:	681a      	ldr	r2, [r3, #0]
   84e06:	68fb      	ldr	r3, [r7, #12]
   84e08:	3304      	adds	r3, #4
   84e0a:	4610      	mov	r0, r2
   84e0c:	4619      	mov	r1, r3
   84e0e:	4b04      	ldr	r3, [pc, #16]	; (84e20 <prvInsertTimerInActiveList+0x80>)
   84e10:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   84e12:	697b      	ldr	r3, [r7, #20]
}
   84e14:	4618      	mov	r0, r3
   84e16:	3718      	adds	r7, #24
   84e18:	46bd      	mov	sp, r7
   84e1a:	bd80      	pop	{r7, pc}
   84e1c:	2007a698 	.word	0x2007a698
   84e20:	00082b71 	.word	0x00082b71
   84e24:	2007a694 	.word	0x2007a694

00084e28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   84e28:	b590      	push	{r4, r7, lr}
   84e2a:	b08b      	sub	sp, #44	; 0x2c
   84e2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84e2e:	e070      	b.n	84f12 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   84e30:	68bb      	ldr	r3, [r7, #8]
   84e32:	2b00      	cmp	r3, #0
   84e34:	db6d      	blt.n	84f12 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   84e36:	693b      	ldr	r3, [r7, #16]
   84e38:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   84e3a:	69fb      	ldr	r3, [r7, #28]
   84e3c:	695b      	ldr	r3, [r3, #20]
   84e3e:	2b00      	cmp	r3, #0
   84e40:	d004      	beq.n	84e4c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84e42:	69fb      	ldr	r3, [r7, #28]
   84e44:	3304      	adds	r3, #4
   84e46:	4618      	mov	r0, r3
   84e48:	4b3a      	ldr	r3, [pc, #232]	; (84f34 <prvProcessReceivedCommands+0x10c>)
   84e4a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84e4c:	1d3b      	adds	r3, r7, #4
   84e4e:	4618      	mov	r0, r3
   84e50:	4b39      	ldr	r3, [pc, #228]	; (84f38 <prvProcessReceivedCommands+0x110>)
   84e52:	4798      	blx	r3
   84e54:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   84e56:	68bb      	ldr	r3, [r7, #8]
   84e58:	2b09      	cmp	r3, #9
   84e5a:	d859      	bhi.n	84f10 <prvProcessReceivedCommands+0xe8>
   84e5c:	a201      	add	r2, pc, #4	; (adr r2, 84e64 <prvProcessReceivedCommands+0x3c>)
   84e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84e62:	bf00      	nop
   84e64:	00084e8d 	.word	0x00084e8d
   84e68:	00084e8d 	.word	0x00084e8d
   84e6c:	00084e8d 	.word	0x00084e8d
   84e70:	00084f11 	.word	0x00084f11
   84e74:	00084edf 	.word	0x00084edf
   84e78:	00084f09 	.word	0x00084f09
   84e7c:	00084e8d 	.word	0x00084e8d
   84e80:	00084e8d 	.word	0x00084e8d
   84e84:	00084f11 	.word	0x00084f11
   84e88:	00084edf 	.word	0x00084edf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   84e8c:	68fa      	ldr	r2, [r7, #12]
   84e8e:	69fb      	ldr	r3, [r7, #28]
   84e90:	699b      	ldr	r3, [r3, #24]
   84e92:	441a      	add	r2, r3
   84e94:	68fb      	ldr	r3, [r7, #12]
   84e96:	69f8      	ldr	r0, [r7, #28]
   84e98:	4611      	mov	r1, r2
   84e9a:	69ba      	ldr	r2, [r7, #24]
   84e9c:	4c27      	ldr	r4, [pc, #156]	; (84f3c <prvProcessReceivedCommands+0x114>)
   84e9e:	47a0      	blx	r4
   84ea0:	4603      	mov	r3, r0
   84ea2:	2b01      	cmp	r3, #1
   84ea4:	d11a      	bne.n	84edc <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84ea6:	69fb      	ldr	r3, [r7, #28]
   84ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84eaa:	69f8      	ldr	r0, [r7, #28]
   84eac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84eae:	69fb      	ldr	r3, [r7, #28]
   84eb0:	69db      	ldr	r3, [r3, #28]
   84eb2:	2b01      	cmp	r3, #1
   84eb4:	d112      	bne.n	84edc <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   84eb6:	68fa      	ldr	r2, [r7, #12]
   84eb8:	69fb      	ldr	r3, [r7, #28]
   84eba:	699b      	ldr	r3, [r3, #24]
   84ebc:	4413      	add	r3, r2
   84ebe:	2200      	movs	r2, #0
   84ec0:	9200      	str	r2, [sp, #0]
   84ec2:	69f8      	ldr	r0, [r7, #28]
   84ec4:	2100      	movs	r1, #0
   84ec6:	461a      	mov	r2, r3
   84ec8:	2300      	movs	r3, #0
   84eca:	4c1d      	ldr	r4, [pc, #116]	; (84f40 <prvProcessReceivedCommands+0x118>)
   84ecc:	47a0      	blx	r4
   84ece:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   84ed0:	697b      	ldr	r3, [r7, #20]
   84ed2:	2b00      	cmp	r3, #0
   84ed4:	d102      	bne.n	84edc <prvProcessReceivedCommands+0xb4>
   84ed6:	4b1b      	ldr	r3, [pc, #108]	; (84f44 <prvProcessReceivedCommands+0x11c>)
   84ed8:	4798      	blx	r3
   84eda:	e7fe      	b.n	84eda <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   84edc:	e019      	b.n	84f12 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   84ede:	68fa      	ldr	r2, [r7, #12]
   84ee0:	69fb      	ldr	r3, [r7, #28]
   84ee2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   84ee4:	69fb      	ldr	r3, [r7, #28]
   84ee6:	699b      	ldr	r3, [r3, #24]
   84ee8:	2b00      	cmp	r3, #0
   84eea:	d102      	bne.n	84ef2 <prvProcessReceivedCommands+0xca>
   84eec:	4b15      	ldr	r3, [pc, #84]	; (84f44 <prvProcessReceivedCommands+0x11c>)
   84eee:	4798      	blx	r3
   84ef0:	e7fe      	b.n	84ef0 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   84ef2:	69fb      	ldr	r3, [r7, #28]
   84ef4:	699a      	ldr	r2, [r3, #24]
   84ef6:	69bb      	ldr	r3, [r7, #24]
   84ef8:	4413      	add	r3, r2
   84efa:	69f8      	ldr	r0, [r7, #28]
   84efc:	4619      	mov	r1, r3
   84efe:	69ba      	ldr	r2, [r7, #24]
   84f00:	69bb      	ldr	r3, [r7, #24]
   84f02:	4c0e      	ldr	r4, [pc, #56]	; (84f3c <prvProcessReceivedCommands+0x114>)
   84f04:	47a0      	blx	r4
					break;
   84f06:	e004      	b.n	84f12 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   84f08:	69f8      	ldr	r0, [r7, #28]
   84f0a:	4b0f      	ldr	r3, [pc, #60]	; (84f48 <prvProcessReceivedCommands+0x120>)
   84f0c:	4798      	blx	r3
					break;
   84f0e:	e000      	b.n	84f12 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   84f10:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84f12:	4b0e      	ldr	r3, [pc, #56]	; (84f4c <prvProcessReceivedCommands+0x124>)
   84f14:	681a      	ldr	r2, [r3, #0]
   84f16:	f107 0308 	add.w	r3, r7, #8
   84f1a:	4610      	mov	r0, r2
   84f1c:	4619      	mov	r1, r3
   84f1e:	2200      	movs	r2, #0
   84f20:	2300      	movs	r3, #0
   84f22:	4c0b      	ldr	r4, [pc, #44]	; (84f50 <prvProcessReceivedCommands+0x128>)
   84f24:	47a0      	blx	r4
   84f26:	4603      	mov	r3, r0
   84f28:	2b00      	cmp	r3, #0
   84f2a:	d181      	bne.n	84e30 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   84f2c:	3724      	adds	r7, #36	; 0x24
   84f2e:	46bd      	mov	sp, r7
   84f30:	bd90      	pop	{r4, r7, pc}
   84f32:	bf00      	nop
   84f34:	00082be1 	.word	0x00082be1
   84f38:	00084d59 	.word	0x00084d59
   84f3c:	00084da1 	.word	0x00084da1
   84f40:	00084b45 	.word	0x00084b45
   84f44:	00082e59 	.word	0x00082e59
   84f48:	000830f5 	.word	0x000830f5
   84f4c:	2007a69c 	.word	0x2007a69c
   84f50:	00083721 	.word	0x00083721

00084f54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   84f54:	b590      	push	{r4, r7, lr}
   84f56:	b089      	sub	sp, #36	; 0x24
   84f58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84f5a:	e03d      	b.n	84fd8 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f5c:	4b27      	ldr	r3, [pc, #156]	; (84ffc <prvSwitchTimerLists+0xa8>)
   84f5e:	681b      	ldr	r3, [r3, #0]
   84f60:	68db      	ldr	r3, [r3, #12]
   84f62:	681b      	ldr	r3, [r3, #0]
   84f64:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f66:	4b25      	ldr	r3, [pc, #148]	; (84ffc <prvSwitchTimerLists+0xa8>)
   84f68:	681b      	ldr	r3, [r3, #0]
   84f6a:	68db      	ldr	r3, [r3, #12]
   84f6c:	68db      	ldr	r3, [r3, #12]
   84f6e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84f70:	693b      	ldr	r3, [r7, #16]
   84f72:	3304      	adds	r3, #4
   84f74:	4618      	mov	r0, r3
   84f76:	4b22      	ldr	r3, [pc, #136]	; (85000 <prvSwitchTimerLists+0xac>)
   84f78:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84f7a:	693b      	ldr	r3, [r7, #16]
   84f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84f7e:	6938      	ldr	r0, [r7, #16]
   84f80:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84f82:	693b      	ldr	r3, [r7, #16]
   84f84:	69db      	ldr	r3, [r3, #28]
   84f86:	2b01      	cmp	r3, #1
   84f88:	d126      	bne.n	84fd8 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   84f8a:	693b      	ldr	r3, [r7, #16]
   84f8c:	699a      	ldr	r2, [r3, #24]
   84f8e:	697b      	ldr	r3, [r7, #20]
   84f90:	4413      	add	r3, r2
   84f92:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   84f94:	68fa      	ldr	r2, [r7, #12]
   84f96:	697b      	ldr	r3, [r7, #20]
   84f98:	429a      	cmp	r2, r3
   84f9a:	d90e      	bls.n	84fba <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   84f9c:	693b      	ldr	r3, [r7, #16]
   84f9e:	68fa      	ldr	r2, [r7, #12]
   84fa0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84fa2:	693b      	ldr	r3, [r7, #16]
   84fa4:	693a      	ldr	r2, [r7, #16]
   84fa6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84fa8:	4b14      	ldr	r3, [pc, #80]	; (84ffc <prvSwitchTimerLists+0xa8>)
   84faa:	681a      	ldr	r2, [r3, #0]
   84fac:	693b      	ldr	r3, [r7, #16]
   84fae:	3304      	adds	r3, #4
   84fb0:	4610      	mov	r0, r2
   84fb2:	4619      	mov	r1, r3
   84fb4:	4b13      	ldr	r3, [pc, #76]	; (85004 <prvSwitchTimerLists+0xb0>)
   84fb6:	4798      	blx	r3
   84fb8:	e00e      	b.n	84fd8 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84fba:	2300      	movs	r3, #0
   84fbc:	9300      	str	r3, [sp, #0]
   84fbe:	6938      	ldr	r0, [r7, #16]
   84fc0:	2100      	movs	r1, #0
   84fc2:	697a      	ldr	r2, [r7, #20]
   84fc4:	2300      	movs	r3, #0
   84fc6:	4c10      	ldr	r4, [pc, #64]	; (85008 <prvSwitchTimerLists+0xb4>)
   84fc8:	47a0      	blx	r4
   84fca:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   84fcc:	68bb      	ldr	r3, [r7, #8]
   84fce:	2b00      	cmp	r3, #0
   84fd0:	d102      	bne.n	84fd8 <prvSwitchTimerLists+0x84>
   84fd2:	4b0e      	ldr	r3, [pc, #56]	; (8500c <prvSwitchTimerLists+0xb8>)
   84fd4:	4798      	blx	r3
   84fd6:	e7fe      	b.n	84fd6 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84fd8:	4b08      	ldr	r3, [pc, #32]	; (84ffc <prvSwitchTimerLists+0xa8>)
   84fda:	681b      	ldr	r3, [r3, #0]
   84fdc:	681b      	ldr	r3, [r3, #0]
   84fde:	2b00      	cmp	r3, #0
   84fe0:	d1bc      	bne.n	84f5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   84fe2:	4b06      	ldr	r3, [pc, #24]	; (84ffc <prvSwitchTimerLists+0xa8>)
   84fe4:	681b      	ldr	r3, [r3, #0]
   84fe6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   84fe8:	4b09      	ldr	r3, [pc, #36]	; (85010 <prvSwitchTimerLists+0xbc>)
   84fea:	681a      	ldr	r2, [r3, #0]
   84fec:	4b03      	ldr	r3, [pc, #12]	; (84ffc <prvSwitchTimerLists+0xa8>)
   84fee:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   84ff0:	4b07      	ldr	r3, [pc, #28]	; (85010 <prvSwitchTimerLists+0xbc>)
   84ff2:	687a      	ldr	r2, [r7, #4]
   84ff4:	601a      	str	r2, [r3, #0]
}
   84ff6:	371c      	adds	r7, #28
   84ff8:	46bd      	mov	sp, r7
   84ffa:	bd90      	pop	{r4, r7, pc}
   84ffc:	2007a694 	.word	0x2007a694
   85000:	00082be1 	.word	0x00082be1
   85004:	00082b71 	.word	0x00082b71
   85008:	00084b45 	.word	0x00084b45
   8500c:	00082e59 	.word	0x00082e59
   85010:	2007a698 	.word	0x2007a698

00085014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   85014:	b580      	push	{r7, lr}
   85016:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   85018:	4b11      	ldr	r3, [pc, #68]	; (85060 <prvCheckForValidListAndQueue+0x4c>)
   8501a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8501c:	4b11      	ldr	r3, [pc, #68]	; (85064 <prvCheckForValidListAndQueue+0x50>)
   8501e:	681b      	ldr	r3, [r3, #0]
   85020:	2b00      	cmp	r3, #0
   85022:	d11a      	bne.n	8505a <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   85024:	4810      	ldr	r0, [pc, #64]	; (85068 <prvCheckForValidListAndQueue+0x54>)
   85026:	4b11      	ldr	r3, [pc, #68]	; (8506c <prvCheckForValidListAndQueue+0x58>)
   85028:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   8502a:	4811      	ldr	r0, [pc, #68]	; (85070 <prvCheckForValidListAndQueue+0x5c>)
   8502c:	4b0f      	ldr	r3, [pc, #60]	; (8506c <prvCheckForValidListAndQueue+0x58>)
   8502e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   85030:	4b10      	ldr	r3, [pc, #64]	; (85074 <prvCheckForValidListAndQueue+0x60>)
   85032:	4a0d      	ldr	r2, [pc, #52]	; (85068 <prvCheckForValidListAndQueue+0x54>)
   85034:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   85036:	4b10      	ldr	r3, [pc, #64]	; (85078 <prvCheckForValidListAndQueue+0x64>)
   85038:	4a0d      	ldr	r2, [pc, #52]	; (85070 <prvCheckForValidListAndQueue+0x5c>)
   8503a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   8503c:	2005      	movs	r0, #5
   8503e:	210c      	movs	r1, #12
   85040:	2200      	movs	r2, #0
   85042:	4b0e      	ldr	r3, [pc, #56]	; (8507c <prvCheckForValidListAndQueue+0x68>)
   85044:	4798      	blx	r3
   85046:	4602      	mov	r2, r0
   85048:	4b06      	ldr	r3, [pc, #24]	; (85064 <prvCheckForValidListAndQueue+0x50>)
   8504a:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   8504c:	4b05      	ldr	r3, [pc, #20]	; (85064 <prvCheckForValidListAndQueue+0x50>)
   8504e:	681b      	ldr	r3, [r3, #0]
   85050:	2b00      	cmp	r3, #0
   85052:	d102      	bne.n	8505a <prvCheckForValidListAndQueue+0x46>
   85054:	4b0a      	ldr	r3, [pc, #40]	; (85080 <prvCheckForValidListAndQueue+0x6c>)
   85056:	4798      	blx	r3
   85058:	e7fe      	b.n	85058 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8505a:	4b0a      	ldr	r3, [pc, #40]	; (85084 <prvCheckForValidListAndQueue+0x70>)
   8505c:	4798      	blx	r3
}
   8505e:	bd80      	pop	{r7, pc}
   85060:	00082ddd 	.word	0x00082ddd
   85064:	2007a69c 	.word	0x2007a69c
   85068:	2007a66c 	.word	0x2007a66c
   8506c:	00082ad1 	.word	0x00082ad1
   85070:	2007a680 	.word	0x2007a680
   85074:	2007a694 	.word	0x2007a694
   85078:	2007a698 	.word	0x2007a698
   8507c:	000833d5 	.word	0x000833d5
   85080:	00082e59 	.word	0x00082e59
   85084:	00082e21 	.word	0x00082e21

00085088 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   85088:	b480      	push	{r7}
   8508a:	b083      	sub	sp, #12
   8508c:	af00      	add	r7, sp, #0
   8508e:	4603      	mov	r3, r0
   85090:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85092:	4b08      	ldr	r3, [pc, #32]	; (850b4 <NVIC_EnableIRQ+0x2c>)
   85094:	f997 2007 	ldrsb.w	r2, [r7, #7]
   85098:	0952      	lsrs	r2, r2, #5
   8509a:	79f9      	ldrb	r1, [r7, #7]
   8509c:	f001 011f 	and.w	r1, r1, #31
   850a0:	2001      	movs	r0, #1
   850a2:	fa00 f101 	lsl.w	r1, r0, r1
   850a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   850aa:	370c      	adds	r7, #12
   850ac:	46bd      	mov	sp, r7
   850ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   850b2:	4770      	bx	lr
   850b4:	e000e100 	.word	0xe000e100

000850b8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   850b8:	b480      	push	{r7}
   850ba:	b083      	sub	sp, #12
   850bc:	af00      	add	r7, sp, #0
   850be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   850c0:	687b      	ldr	r3, [r7, #4]
   850c2:	2b07      	cmp	r3, #7
   850c4:	d825      	bhi.n	85112 <osc_get_rate+0x5a>
   850c6:	a201      	add	r2, pc, #4	; (adr r2, 850cc <osc_get_rate+0x14>)
   850c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   850cc:	000850ed 	.word	0x000850ed
   850d0:	000850f3 	.word	0x000850f3
   850d4:	000850f9 	.word	0x000850f9
   850d8:	000850ff 	.word	0x000850ff
   850dc:	00085103 	.word	0x00085103
   850e0:	00085107 	.word	0x00085107
   850e4:	0008510b 	.word	0x0008510b
   850e8:	0008510f 	.word	0x0008510f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   850ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   850f0:	e010      	b.n	85114 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   850f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   850f6:	e00d      	b.n	85114 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   850f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   850fc:	e00a      	b.n	85114 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   850fe:	4b08      	ldr	r3, [pc, #32]	; (85120 <osc_get_rate+0x68>)
   85100:	e008      	b.n	85114 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   85102:	4b08      	ldr	r3, [pc, #32]	; (85124 <osc_get_rate+0x6c>)
   85104:	e006      	b.n	85114 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   85106:	4b08      	ldr	r3, [pc, #32]	; (85128 <osc_get_rate+0x70>)
   85108:	e004      	b.n	85114 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8510a:	4b07      	ldr	r3, [pc, #28]	; (85128 <osc_get_rate+0x70>)
   8510c:	e002      	b.n	85114 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8510e:	4b06      	ldr	r3, [pc, #24]	; (85128 <osc_get_rate+0x70>)
   85110:	e000      	b.n	85114 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   85112:	2300      	movs	r3, #0
}
   85114:	4618      	mov	r0, r3
   85116:	370c      	adds	r7, #12
   85118:	46bd      	mov	sp, r7
   8511a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8511e:	4770      	bx	lr
   85120:	003d0900 	.word	0x003d0900
   85124:	007a1200 	.word	0x007a1200
   85128:	00b71b00 	.word	0x00b71b00

0008512c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8512c:	b580      	push	{r7, lr}
   8512e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   85130:	2006      	movs	r0, #6
   85132:	4b04      	ldr	r3, [pc, #16]	; (85144 <sysclk_get_main_hz+0x18>)
   85134:	4798      	blx	r3
   85136:	4602      	mov	r2, r0
   85138:	4613      	mov	r3, r2
   8513a:	00db      	lsls	r3, r3, #3
   8513c:	1a9b      	subs	r3, r3, r2
   8513e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   85140:	4618      	mov	r0, r3
   85142:	bd80      	pop	{r7, pc}
   85144:	000850b9 	.word	0x000850b9

00085148 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   85148:	b580      	push	{r7, lr}
   8514a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   8514c:	4b02      	ldr	r3, [pc, #8]	; (85158 <sysclk_get_cpu_hz+0x10>)
   8514e:	4798      	blx	r3
   85150:	4603      	mov	r3, r0
   85152:	085b      	lsrs	r3, r3, #1
}
   85154:	4618      	mov	r0, r3
   85156:	bd80      	pop	{r7, pc}
   85158:	0008512d 	.word	0x0008512d

0008515c <CAN1_Handler>:

/************************************************************************/
/* Default Interrupt Handler for CAN1								    */
/************************************************************************/
void CAN1_Handler(void)
{
   8515c:	b580      	push	{r7, lr}
   8515e:	b082      	sub	sp, #8
   85160:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   85162:	4824      	ldr	r0, [pc, #144]	; (851f4 <CAN1_Handler+0x98>)
   85164:	4924      	ldr	r1, [pc, #144]	; (851f8 <CAN1_Handler+0x9c>)
   85166:	4b25      	ldr	r3, [pc, #148]	; (851fc <CAN1_Handler+0xa0>)
   85168:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   8516a:	4825      	ldr	r0, [pc, #148]	; (85200 <CAN1_Handler+0xa4>)
   8516c:	4b25      	ldr	r3, [pc, #148]	; (85204 <CAN1_Handler+0xa8>)
   8516e:	4798      	blx	r3
   85170:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   85172:	683b      	ldr	r3, [r7, #0]
   85174:	b2db      	uxtb	r3, r3
   85176:	2b00      	cmp	r3, #0
   85178:	d038      	beq.n	851ec <CAN1_Handler+0x90>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8517a:	2300      	movs	r3, #0
   8517c:	71fb      	strb	r3, [r7, #7]
   8517e:	e032      	b.n	851e6 <CAN1_Handler+0x8a>
			ul_status = can_mailbox_get_status(CAN1, i);
   85180:	79fb      	ldrb	r3, [r7, #7]
   85182:	481f      	ldr	r0, [pc, #124]	; (85200 <CAN1_Handler+0xa4>)
   85184:	4619      	mov	r1, r3
   85186:	4b20      	ldr	r3, [pc, #128]	; (85208 <CAN1_Handler+0xac>)
   85188:	4798      	blx	r3
   8518a:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   8518c:	683b      	ldr	r3, [r7, #0]
   8518e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   85192:	2b00      	cmp	r3, #0
   85194:	d024      	beq.n	851e0 <CAN1_Handler+0x84>
				can1_mailbox.ul_mb_idx = i;
   85196:	79fa      	ldrb	r2, [r7, #7]
   85198:	4b16      	ldr	r3, [pc, #88]	; (851f4 <CAN1_Handler+0x98>)
   8519a:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   8519c:	4b15      	ldr	r3, [pc, #84]	; (851f4 <CAN1_Handler+0x98>)
   8519e:	683a      	ldr	r2, [r7, #0]
   851a0:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   851a2:	4817      	ldr	r0, [pc, #92]	; (85200 <CAN1_Handler+0xa4>)
   851a4:	4913      	ldr	r1, [pc, #76]	; (851f4 <CAN1_Handler+0x98>)
   851a6:	4b19      	ldr	r3, [pc, #100]	; (8520c <CAN1_Handler+0xb0>)
   851a8:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   851aa:	4b12      	ldr	r3, [pc, #72]	; (851f4 <CAN1_Handler+0x98>)
   851ac:	69da      	ldr	r2, [r3, #28]
   851ae:	4b18      	ldr	r3, [pc, #96]	; (85210 <CAN1_Handler+0xb4>)
   851b0:	429a      	cmp	r2, r3
   851b2:	d107      	bne.n	851c4 <CAN1_Handler+0x68>
   851b4:	4b0f      	ldr	r3, [pc, #60]	; (851f4 <CAN1_Handler+0x98>)
   851b6:	699a      	ldr	r2, [r3, #24]
   851b8:	4b16      	ldr	r3, [pc, #88]	; (85214 <CAN1_Handler+0xb8>)
   851ba:	429a      	cmp	r2, r3
   851bc:	d102      	bne.n	851c4 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   851be:	4b16      	ldr	r3, [pc, #88]	; (85218 <CAN1_Handler+0xbc>)
   851c0:	2200      	movs	r2, #0
   851c2:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   851c4:	79fb      	ldrb	r3, [r7, #7]
   851c6:	480b      	ldr	r0, [pc, #44]	; (851f4 <CAN1_Handler+0x98>)
   851c8:	4619      	mov	r1, r3
   851ca:	4b14      	ldr	r3, [pc, #80]	; (8521c <CAN1_Handler+0xc0>)
   851cc:	4798      	blx	r3
				
				/* Decode CAN Message */
				debug_can_msg(&can1_mailbox, CAN1);
   851ce:	4809      	ldr	r0, [pc, #36]	; (851f4 <CAN1_Handler+0x98>)
   851d0:	490b      	ldr	r1, [pc, #44]	; (85200 <CAN1_Handler+0xa4>)
   851d2:	4b13      	ldr	r3, [pc, #76]	; (85220 <CAN1_Handler+0xc4>)
   851d4:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   851d6:	4807      	ldr	r0, [pc, #28]	; (851f4 <CAN1_Handler+0x98>)
   851d8:	4907      	ldr	r1, [pc, #28]	; (851f8 <CAN1_Handler+0x9c>)
   851da:	4b12      	ldr	r3, [pc, #72]	; (85224 <CAN1_Handler+0xc8>)
   851dc:	4798      	blx	r3
				break;
   851de:	e005      	b.n	851ec <CAN1_Handler+0x90>
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   851e0:	79fb      	ldrb	r3, [r7, #7]
   851e2:	3301      	adds	r3, #1
   851e4:	71fb      	strb	r3, [r7, #7]
   851e6:	79fb      	ldrb	r3, [r7, #7]
   851e8:	2b07      	cmp	r3, #7
   851ea:	d9c9      	bls.n	85180 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   851ec:	3708      	adds	r7, #8
   851ee:	46bd      	mov	sp, r7
   851f0:	bd80      	pop	{r7, pc}
   851f2:	bf00      	nop
   851f4:	2007a6bc 	.word	0x2007a6bc
   851f8:	2007a6f4 	.word	0x2007a6f4
   851fc:	00085769 	.word	0x00085769
   85200:	400b8000 	.word	0x400b8000
   85204:	000818a5 	.word	0x000818a5
   85208:	000818e9 	.word	0x000818e9
   8520c:	00081a69 	.word	0x00081a69
   85210:	01234567 	.word	0x01234567
   85214:	89abcdef 	.word	0x89abcdef
   85218:	2007a740 	.word	0x2007a740
   8521c:	000853f1 	.word	0x000853f1
   85220:	000852c9 	.word	0x000852c9
   85224:	000857d9 	.word	0x000857d9

00085228 <CAN0_Handler>:
/************************************************************************/
/* Default Interrupt Handler for CAN0								    */
/************************************************************************/
void CAN0_Handler(void)
{
   85228:	b580      	push	{r7, lr}
   8522a:	b082      	sub	sp, #8
   8522c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   8522e:	481c      	ldr	r0, [pc, #112]	; (852a0 <CAN0_Handler+0x78>)
   85230:	491c      	ldr	r1, [pc, #112]	; (852a4 <CAN0_Handler+0x7c>)
   85232:	4b1d      	ldr	r3, [pc, #116]	; (852a8 <CAN0_Handler+0x80>)
   85234:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   85236:	481d      	ldr	r0, [pc, #116]	; (852ac <CAN0_Handler+0x84>)
   85238:	4b1d      	ldr	r3, [pc, #116]	; (852b0 <CAN0_Handler+0x88>)
   8523a:	4798      	blx	r3
   8523c:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8523e:	683b      	ldr	r3, [r7, #0]
   85240:	b2db      	uxtb	r3, r3
   85242:	2b00      	cmp	r3, #0
   85244:	d029      	beq.n	8529a <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   85246:	2300      	movs	r3, #0
   85248:	71fb      	strb	r3, [r7, #7]
   8524a:	e023      	b.n	85294 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   8524c:	79fb      	ldrb	r3, [r7, #7]
   8524e:	4817      	ldr	r0, [pc, #92]	; (852ac <CAN0_Handler+0x84>)
   85250:	4619      	mov	r1, r3
   85252:	4b18      	ldr	r3, [pc, #96]	; (852b4 <CAN0_Handler+0x8c>)
   85254:	4798      	blx	r3
   85256:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   85258:	683b      	ldr	r3, [r7, #0]
   8525a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8525e:	2b00      	cmp	r3, #0
   85260:	d015      	beq.n	8528e <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   85262:	79fa      	ldrb	r2, [r7, #7]
   85264:	4b0e      	ldr	r3, [pc, #56]	; (852a0 <CAN0_Handler+0x78>)
   85266:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   85268:	4b0d      	ldr	r3, [pc, #52]	; (852a0 <CAN0_Handler+0x78>)
   8526a:	683a      	ldr	r2, [r7, #0]
   8526c:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   8526e:	480f      	ldr	r0, [pc, #60]	; (852ac <CAN0_Handler+0x84>)
   85270:	490b      	ldr	r1, [pc, #44]	; (852a0 <CAN0_Handler+0x78>)
   85272:	4b11      	ldr	r3, [pc, #68]	; (852b8 <CAN0_Handler+0x90>)
   85274:	4798      	blx	r3
				g_ul_recv_status = 1;
   85276:	4b11      	ldr	r3, [pc, #68]	; (852bc <CAN0_Handler+0x94>)
   85278:	2201      	movs	r2, #1
   8527a:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   8527c:	4808      	ldr	r0, [pc, #32]	; (852a0 <CAN0_Handler+0x78>)
   8527e:	490b      	ldr	r1, [pc, #44]	; (852ac <CAN0_Handler+0x84>)
   85280:	4b0f      	ldr	r3, [pc, #60]	; (852c0 <CAN0_Handler+0x98>)
   85282:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   85284:	4806      	ldr	r0, [pc, #24]	; (852a0 <CAN0_Handler+0x78>)
   85286:	4907      	ldr	r1, [pc, #28]	; (852a4 <CAN0_Handler+0x7c>)
   85288:	4b0e      	ldr	r3, [pc, #56]	; (852c4 <CAN0_Handler+0x9c>)
   8528a:	4798      	blx	r3
				break;
   8528c:	e005      	b.n	8529a <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8528e:	79fb      	ldrb	r3, [r7, #7]
   85290:	3301      	adds	r3, #1
   85292:	71fb      	strb	r3, [r7, #7]
   85294:	79fb      	ldrb	r3, [r7, #7]
   85296:	2b07      	cmp	r3, #7
   85298:	d9d8      	bls.n	8524c <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   8529a:	3708      	adds	r7, #8
   8529c:	46bd      	mov	sp, r7
   8529e:	bd80      	pop	{r7, pc}
   852a0:	2007a720 	.word	0x2007a720
   852a4:	2007a754 	.word	0x2007a754
   852a8:	00085769 	.word	0x00085769
   852ac:	400b4000 	.word	0x400b4000
   852b0:	000818a5 	.word	0x000818a5
   852b4:	000818e9 	.word	0x000818e9
   852b8:	00081a69 	.word	0x00081a69
   852bc:	2007a6a4 	.word	0x2007a6a4
   852c0:	000852c9 	.word	0x000852c9
   852c4:	000857d9 	.word	0x000857d9

000852c8 <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   852c8:	b580      	push	{r7, lr}
   852ca:	b086      	sub	sp, #24
   852cc:	af00      	add	r7, sp, #0
   852ce:	6078      	str	r0, [r7, #4]
   852d0:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   852d2:	687b      	ldr	r3, [r7, #4]
   852d4:	699b      	ldr	r3, [r3, #24]
   852d6:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   852d8:	687b      	ldr	r3, [r7, #4]
   852da:	69db      	ldr	r3, [r3, #28]
   852dc:	613b      	str	r3, [r7, #16]
	float temp;
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   852de:	697b      	ldr	r3, [r7, #20]
   852e0:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   852e4:	bf14      	ite	ne
   852e6:	2300      	movne	r3, #0
   852e8:	2301      	moveq	r3, #1
   852ea:	b2da      	uxtb	r2, r3
   852ec:	6839      	ldr	r1, [r7, #0]
   852ee:	4b3a      	ldr	r3, [pc, #232]	; (853d8 <debug_can_msg+0x110>)
   852f0:	4299      	cmp	r1, r3
   852f2:	bf14      	ite	ne
   852f4:	2300      	movne	r3, #0
   852f6:	2301      	moveq	r3, #1
   852f8:	b2db      	uxtb	r3, r3
   852fa:	4013      	ands	r3, r2
   852fc:	b2db      	uxtb	r3, r3
   852fe:	2b00      	cmp	r3, #0
   85300:	d002      	beq.n	85308 <debug_can_msg+0x40>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   85302:	2057      	movs	r0, #87	; 0x57
   85304:	4b35      	ldr	r3, [pc, #212]	; (853dc <debug_can_msg+0x114>)
   85306:	4798      	blx	r3
	}
	
	if ((ul_data_incom == HK_RETURNED) & (controller == CAN1))
   85308:	697b      	ldr	r3, [r7, #20]
   8530a:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
   8530e:	bf14      	ite	ne
   85310:	2300      	movne	r3, #0
   85312:	2301      	moveq	r3, #1
   85314:	b2da      	uxtb	r2, r3
   85316:	6839      	ldr	r1, [r7, #0]
   85318:	4b2f      	ldr	r3, [pc, #188]	; (853d8 <debug_can_msg+0x110>)
   8531a:	4299      	cmp	r1, r3
   8531c:	bf14      	ite	ne
   8531e:	2300      	movne	r3, #0
   85320:	2301      	moveq	r3, #1
   85322:	b2db      	uxtb	r3, r3
   85324:	4013      	ands	r3, r2
   85326:	b2db      	uxtb	r3, r3
   85328:	2b00      	cmp	r3, #0
   8532a:	d002      	beq.n	85332 <debug_can_msg+0x6a>
	{
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   8532c:	2055      	movs	r0, #85	; 0x55
   8532e:	4b2b      	ldr	r3, [pc, #172]	; (853dc <debug_can_msg+0x114>)
   85330:	4798      	blx	r3
	}
	
	if ((uh_data_incom == DATA_RETURNED) & (controller == CAN1) & (glob_drf == 0))
   85332:	693b      	ldr	r3, [r7, #16]
   85334:	2b55      	cmp	r3, #85	; 0x55
   85336:	bf14      	ite	ne
   85338:	2300      	movne	r3, #0
   8533a:	2301      	moveq	r3, #1
   8533c:	b2da      	uxtb	r2, r3
   8533e:	6839      	ldr	r1, [r7, #0]
   85340:	4b25      	ldr	r3, [pc, #148]	; (853d8 <debug_can_msg+0x110>)
   85342:	4299      	cmp	r1, r3
   85344:	bf14      	ite	ne
   85346:	2300      	movne	r3, #0
   85348:	2301      	moveq	r3, #1
   8534a:	b2db      	uxtb	r3, r3
   8534c:	4013      	ands	r3, r2
   8534e:	b2db      	uxtb	r3, r3
   85350:	461a      	mov	r2, r3
   85352:	4b23      	ldr	r3, [pc, #140]	; (853e0 <debug_can_msg+0x118>)
   85354:	781b      	ldrb	r3, [r3, #0]
   85356:	2b00      	cmp	r3, #0
   85358:	bf14      	ite	ne
   8535a:	2300      	movne	r3, #0
   8535c:	2301      	moveq	r3, #1
   8535e:	b2db      	uxtb	r3, r3
   85360:	4013      	ands	r3, r2
   85362:	2b00      	cmp	r3, #0
   85364:	d014      	beq.n	85390 <debug_can_msg+0xc8>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   85366:	2056      	movs	r0, #86	; 0x56
   85368:	4b1c      	ldr	r3, [pc, #112]	; (853dc <debug_can_msg+0x114>)
   8536a:	4798      	blx	r3
		
		ul_data_incom = ul_data_incom >> 2;
   8536c:	697b      	ldr	r3, [r7, #20]
   8536e:	089b      	lsrs	r3, r3, #2
   85370:	617b      	str	r3, [r7, #20]
		
		temp = (float)ul_data_incom;
   85372:	4b1c      	ldr	r3, [pc, #112]	; (853e4 <debug_can_msg+0x11c>)
   85374:	6978      	ldr	r0, [r7, #20]
   85376:	4798      	blx	r3
   85378:	4603      	mov	r3, r0
   8537a:	60fb      	str	r3, [r7, #12]
		
		temp = temp * 0.03125;
   8537c:	4b1a      	ldr	r3, [pc, #104]	; (853e8 <debug_can_msg+0x120>)
   8537e:	68f8      	ldr	r0, [r7, #12]
   85380:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   85384:	4798      	blx	r3
   85386:	4603      	mov	r3, r0
   85388:	60fb      	str	r3, [r7, #12]
		
		temp = temp;
		
		glob_drf = 1;
   8538a:	4b15      	ldr	r3, [pc, #84]	; (853e0 <debug_can_msg+0x118>)
   8538c:	2201      	movs	r2, #1
   8538e:	701a      	strb	r2, [r3, #0]
	}
	
	if ((uh_data_incom == MESSAGE_RETURNED) & (controller == CAN1) & (glob_comf == 0))
   85390:	693b      	ldr	r3, [r7, #16]
   85392:	2b00      	cmp	r3, #0
   85394:	bf14      	ite	ne
   85396:	2300      	movne	r3, #0
   85398:	2301      	moveq	r3, #1
   8539a:	b2da      	uxtb	r2, r3
   8539c:	6839      	ldr	r1, [r7, #0]
   8539e:	4b0e      	ldr	r3, [pc, #56]	; (853d8 <debug_can_msg+0x110>)
   853a0:	4299      	cmp	r1, r3
   853a2:	bf14      	ite	ne
   853a4:	2300      	movne	r3, #0
   853a6:	2301      	moveq	r3, #1
   853a8:	b2db      	uxtb	r3, r3
   853aa:	4013      	ands	r3, r2
   853ac:	b2db      	uxtb	r3, r3
   853ae:	461a      	mov	r2, r3
   853b0:	4b0e      	ldr	r3, [pc, #56]	; (853ec <debug_can_msg+0x124>)
   853b2:	781b      	ldrb	r3, [r3, #0]
   853b4:	2b00      	cmp	r3, #0
   853b6:	bf14      	ite	ne
   853b8:	2300      	movne	r3, #0
   853ba:	2301      	moveq	r3, #1
   853bc:	b2db      	uxtb	r3, r3
   853be:	4013      	ands	r3, r2
   853c0:	2b00      	cmp	r3, #0
   853c2:	d005      	beq.n	853d0 <debug_can_msg+0x108>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of a message
   853c4:	2056      	movs	r0, #86	; 0x56
   853c6:	4b05      	ldr	r3, [pc, #20]	; (853dc <debug_can_msg+0x114>)
   853c8:	4798      	blx	r3
		glob_comf = 1;
   853ca:	4b08      	ldr	r3, [pc, #32]	; (853ec <debug_can_msg+0x124>)
   853cc:	2201      	movs	r2, #1
   853ce:	701a      	strb	r2, [r3, #0]
	}

	return;
   853d0:	bf00      	nop
}
   853d2:	3718      	adds	r7, #24
   853d4:	46bd      	mov	sp, r7
   853d6:	bd80      	pop	{r7, pc}
   853d8:	400b8000 	.word	0x400b8000
   853dc:	00081e69 	.word	0x00081e69
   853e0:	2007a6dc 	.word	0x2007a6dc
   853e4:	00086019 	.word	0x00086019
   853e8:	000860c9 	.word	0x000860c9
   853ec:	2007a784 	.word	0x2007a784

000853f0 <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   853f0:	b590      	push	{r4, r7, lr}
   853f2:	b087      	sub	sp, #28
   853f4:	af00      	add	r7, sp, #0
   853f6:	6078      	str	r0, [r7, #4]
   853f8:	460b      	mov	r3, r1
   853fa:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   853fc:	687b      	ldr	r3, [r7, #4]
   853fe:	699b      	ldr	r3, [r3, #24]
   85400:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85402:	687b      	ldr	r3, [r7, #4]
   85404:	69db      	ldr	r3, [r3, #28]
   85406:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   85408:	78fb      	ldrb	r3, [r7, #3]
   8540a:	2b07      	cmp	r3, #7
   8540c:	d873      	bhi.n	854f6 <store_can_msg+0x106>
   8540e:	a201      	add	r2, pc, #4	; (adr r2, 85414 <store_can_msg+0x24>)
   85410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85414:	00085435 	.word	0x00085435
   85418:	000854f7 	.word	0x000854f7
   8541c:	000854f7 	.word	0x000854f7
   85420:	000854f7 	.word	0x000854f7
   85424:	000854f7 	.word	0x000854f7
   85428:	00085465 	.word	0x00085465
   8542c:	00085495 	.word	0x00085495
   85430:	000854c5 	.word	0x000854c5
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   85434:	4b32      	ldr	r3, [pc, #200]	; (85500 <store_can_msg+0x110>)
   85436:	6819      	ldr	r1, [r3, #0]
   85438:	f107 0214 	add.w	r2, r7, #20
   8543c:	f107 030c 	add.w	r3, r7, #12
   85440:	4608      	mov	r0, r1
   85442:	4611      	mov	r1, r2
   85444:	461a      	mov	r2, r3
   85446:	2300      	movs	r3, #0
   85448:	4c2e      	ldr	r4, [pc, #184]	; (85504 <store_can_msg+0x114>)
   8544a:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   8544c:	4b2c      	ldr	r3, [pc, #176]	; (85500 <store_can_msg+0x110>)
   8544e:	6819      	ldr	r1, [r3, #0]
   85450:	f107 0210 	add.w	r2, r7, #16
   85454:	f107 030c 	add.w	r3, r7, #12
   85458:	4608      	mov	r0, r1
   8545a:	4611      	mov	r1, r2
   8545c:	461a      	mov	r2, r3
   8545e:	2300      	movs	r3, #0
   85460:	4c28      	ldr	r4, [pc, #160]	; (85504 <store_can_msg+0x114>)
   85462:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   85464:	4b28      	ldr	r3, [pc, #160]	; (85508 <store_can_msg+0x118>)
   85466:	6819      	ldr	r1, [r3, #0]
   85468:	f107 0214 	add.w	r2, r7, #20
   8546c:	f107 030c 	add.w	r3, r7, #12
   85470:	4608      	mov	r0, r1
   85472:	4611      	mov	r1, r2
   85474:	461a      	mov	r2, r3
   85476:	2300      	movs	r3, #0
   85478:	4c22      	ldr	r4, [pc, #136]	; (85504 <store_can_msg+0x114>)
   8547a:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   8547c:	4b22      	ldr	r3, [pc, #136]	; (85508 <store_can_msg+0x118>)
   8547e:	6819      	ldr	r1, [r3, #0]
   85480:	f107 0210 	add.w	r2, r7, #16
   85484:	f107 030c 	add.w	r3, r7, #12
   85488:	4608      	mov	r0, r1
   8548a:	4611      	mov	r1, r2
   8548c:	461a      	mov	r2, r3
   8548e:	2300      	movs	r3, #0
   85490:	4c1c      	ldr	r4, [pc, #112]	; (85504 <store_can_msg+0x114>)
   85492:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   85494:	4b1d      	ldr	r3, [pc, #116]	; (8550c <store_can_msg+0x11c>)
   85496:	6819      	ldr	r1, [r3, #0]
   85498:	f107 0214 	add.w	r2, r7, #20
   8549c:	f107 030c 	add.w	r3, r7, #12
   854a0:	4608      	mov	r0, r1
   854a2:	4611      	mov	r1, r2
   854a4:	461a      	mov	r2, r3
   854a6:	2300      	movs	r3, #0
   854a8:	4c16      	ldr	r4, [pc, #88]	; (85504 <store_can_msg+0x114>)
   854aa:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   854ac:	4b17      	ldr	r3, [pc, #92]	; (8550c <store_can_msg+0x11c>)
   854ae:	6819      	ldr	r1, [r3, #0]
   854b0:	f107 0210 	add.w	r2, r7, #16
   854b4:	f107 030c 	add.w	r3, r7, #12
   854b8:	4608      	mov	r0, r1
   854ba:	4611      	mov	r1, r2
   854bc:	461a      	mov	r2, r3
   854be:	2300      	movs	r3, #0
   854c0:	4c10      	ldr	r4, [pc, #64]	; (85504 <store_can_msg+0x114>)
   854c2:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);
   854c4:	4b12      	ldr	r3, [pc, #72]	; (85510 <store_can_msg+0x120>)
   854c6:	6819      	ldr	r1, [r3, #0]
   854c8:	f107 0214 	add.w	r2, r7, #20
   854cc:	f107 030c 	add.w	r3, r7, #12
   854d0:	4608      	mov	r0, r1
   854d2:	4611      	mov	r1, r2
   854d4:	461a      	mov	r2, r3
   854d6:	2300      	movs	r3, #0
   854d8:	4c0a      	ldr	r4, [pc, #40]	; (85504 <store_can_msg+0x114>)
   854da:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   854dc:	4b0c      	ldr	r3, [pc, #48]	; (85510 <store_can_msg+0x120>)
   854de:	6819      	ldr	r1, [r3, #0]
   854e0:	f107 0210 	add.w	r2, r7, #16
   854e4:	f107 030c 	add.w	r3, r7, #12
   854e8:	4608      	mov	r0, r1
   854ea:	4611      	mov	r1, r2
   854ec:	461a      	mov	r2, r3
   854ee:	2300      	movs	r3, #0
   854f0:	4c04      	ldr	r4, [pc, #16]	; (85504 <store_can_msg+0x114>)
   854f2:	47a0      	blx	r4

	default :
		return;
   854f4:	bf00      	nop
   854f6:	bf00      	nop
	}
	return;
}
   854f8:	371c      	adds	r7, #28
   854fa:	46bd      	mov	sp, r7
   854fc:	bd90      	pop	{r4, r7, pc}
   854fe:	bf00      	nop
   85500:	2007a6f0 	.word	0x2007a6f0
   85504:	00083625 	.word	0x00083625
   85508:	2007a750 	.word	0x2007a750
   8550c:	2007a6b0 	.word	0x2007a6b0
   85510:	2007a744 	.word	0x2007a744

00085514 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85514:	b480      	push	{r7}
   85516:	b083      	sub	sp, #12
   85518:	af00      	add	r7, sp, #0
   8551a:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   8551c:	687b      	ldr	r3, [r7, #4]
   8551e:	2200      	movs	r2, #0
   85520:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   85522:	687b      	ldr	r3, [r7, #4]
   85524:	2200      	movs	r2, #0
   85526:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   85528:	687b      	ldr	r3, [r7, #4]
   8552a:	2200      	movs	r2, #0
   8552c:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   8552e:	687b      	ldr	r3, [r7, #4]
   85530:	2200      	movs	r2, #0
   85532:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   85534:	687b      	ldr	r3, [r7, #4]
   85536:	2200      	movs	r2, #0
   85538:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   8553a:	687b      	ldr	r3, [r7, #4]
   8553c:	2200      	movs	r2, #0
   8553e:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   85540:	687b      	ldr	r3, [r7, #4]
   85542:	2200      	movs	r2, #0
   85544:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   85546:	687b      	ldr	r3, [r7, #4]
   85548:	2200      	movs	r2, #0
   8554a:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   8554c:	687b      	ldr	r3, [r7, #4]
   8554e:	2200      	movs	r2, #0
   85550:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   85552:	687b      	ldr	r3, [r7, #4]
   85554:	2200      	movs	r2, #0
   85556:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   85558:	687b      	ldr	r3, [r7, #4]
   8555a:	2200      	movs	r2, #0
   8555c:	61da      	str	r2, [r3, #28]
}
   8555e:	370c      	adds	r7, #12
   85560:	46bd      	mov	sp, r7
   85562:	f85d 7b04 	ldr.w	r7, [sp], #4
   85566:	4770      	bx	lr

00085568 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   85568:	b580      	push	{r7, lr}
   8556a:	b08c      	sub	sp, #48	; 0x30
   8556c:	af00      	add	r7, sp, #0
   8556e:	60f8      	str	r0, [r7, #12]
   85570:	60b9      	str	r1, [r7, #8]
   85572:	607a      	str	r2, [r7, #4]
   85574:	603b      	str	r3, [r7, #0]
	*  in between each use of the CAN resource.
	*/
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   85576:	f107 0310 	add.w	r3, r7, #16
   8557a:	481e      	ldr	r0, [pc, #120]	; (855f4 <send_can_command+0x8c>)
   8557c:	4619      	mov	r1, r3
   8557e:	4b1e      	ldr	r3, [pc, #120]	; (855f8 <send_can_command+0x90>)
   85580:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85582:	481c      	ldr	r0, [pc, #112]	; (855f4 <send_can_command+0x8c>)
   85584:	4b1d      	ldr	r3, [pc, #116]	; (855fc <send_can_command+0x94>)
   85586:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85588:	4b1a      	ldr	r3, [pc, #104]	; (855f4 <send_can_command+0x8c>)
   8558a:	2207      	movs	r2, #7
   8558c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   8558e:	4b19      	ldr	r3, [pc, #100]	; (855f4 <send_can_command+0x8c>)
   85590:	2203      	movs	r2, #3
   85592:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;		//Transmission Priority (Can be Changed dynamically)
   85594:	683b      	ldr	r3, [r7, #0]
   85596:	b2da      	uxtb	r2, r3
   85598:	4b16      	ldr	r3, [pc, #88]	; (855f4 <send_can_command+0x8c>)
   8559a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8559c:	4b15      	ldr	r3, [pc, #84]	; (855f4 <send_can_command+0x8c>)
   8559e:	2200      	movs	r2, #0
   855a0:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   855a2:	4b14      	ldr	r3, [pc, #80]	; (855f4 <send_can_command+0x8c>)
   855a4:	2200      	movs	r2, #0
   855a6:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   855a8:	4815      	ldr	r0, [pc, #84]	; (85600 <send_can_command+0x98>)
   855aa:	4912      	ldr	r1, [pc, #72]	; (855f4 <send_can_command+0x8c>)
   855ac:	4b15      	ldr	r3, [pc, #84]	; (85604 <send_can_command+0x9c>)
   855ae:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   855b0:	687b      	ldr	r3, [r7, #4]
   855b2:	049a      	lsls	r2, r3, #18
   855b4:	4b14      	ldr	r3, [pc, #80]	; (85608 <send_can_command+0xa0>)
   855b6:	4013      	ands	r3, r2
   855b8:	4a0e      	ldr	r2, [pc, #56]	; (855f4 <send_can_command+0x8c>)
   855ba:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   855bc:	4b0d      	ldr	r3, [pc, #52]	; (855f4 <send_can_command+0x8c>)
   855be:	68fa      	ldr	r2, [r7, #12]
   855c0:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   855c2:	4b0c      	ldr	r3, [pc, #48]	; (855f4 <send_can_command+0x8c>)
   855c4:	68ba      	ldr	r2, [r7, #8]
   855c6:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   855c8:	4b0a      	ldr	r3, [pc, #40]	; (855f4 <send_can_command+0x8c>)
   855ca:	2208      	movs	r2, #8
   855cc:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   855ce:	480c      	ldr	r0, [pc, #48]	; (85600 <send_can_command+0x98>)
   855d0:	4908      	ldr	r1, [pc, #32]	; (855f4 <send_can_command+0x8c>)
   855d2:	4b0e      	ldr	r3, [pc, #56]	; (8560c <send_can_command+0xa4>)
   855d4:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   855d6:	480a      	ldr	r0, [pc, #40]	; (85600 <send_can_command+0x98>)
   855d8:	2180      	movs	r1, #128	; 0x80
   855da:	4b0d      	ldr	r3, [pc, #52]	; (85610 <send_can_command+0xa8>)
   855dc:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   855de:	f107 0310 	add.w	r3, r7, #16
   855e2:	4804      	ldr	r0, [pc, #16]	; (855f4 <send_can_command+0x8c>)
   855e4:	4619      	mov	r1, r3
   855e6:	4b0b      	ldr	r3, [pc, #44]	; (85614 <send_can_command+0xac>)
   855e8:	4798      	blx	r3
	
	return 1;
   855ea:	2301      	movs	r3, #1
}
   855ec:	4618      	mov	r0, r3
   855ee:	3730      	adds	r7, #48	; 0x30
   855f0:	46bd      	mov	sp, r7
   855f2:	bd80      	pop	{r7, pc}
   855f4:	2007a720 	.word	0x2007a720
   855f8:	00085769 	.word	0x00085769
   855fc:	00085515 	.word	0x00085515
   85600:	400b4000 	.word	0x400b4000
   85604:	00081949 	.word	0x00081949
   85608:	1ffc0000 	.word	0x1ffc0000
   8560c:	00081b2d 	.word	0x00081b2d
   85610:	000818bd 	.word	0x000818bd
   85614:	000857d9 	.word	0x000857d9

00085618 <read_can_data>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85618:	b590      	push	{r4, r7, lr}
   8561a:	b085      	sub	sp, #20
   8561c:	af00      	add	r7, sp, #0
   8561e:	60f8      	str	r0, [r7, #12]
   85620:	60b9      	str	r1, [r7, #8]
   85622:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85624:	687a      	ldr	r2, [r7, #4]
   85626:	f240 43d2 	movw	r3, #1234	; 0x4d2
   8562a:	429a      	cmp	r2, r3
   8562c:	d111      	bne.n	85652 <read_can_data+0x3a>
	{
		xQueueReceive(can_data_fifo, message_low, (TickType_t) 1);
   8562e:	4b0b      	ldr	r3, [pc, #44]	; (8565c <read_can_data+0x44>)
   85630:	681b      	ldr	r3, [r3, #0]
   85632:	4618      	mov	r0, r3
   85634:	68b9      	ldr	r1, [r7, #8]
   85636:	2201      	movs	r2, #1
   85638:	2300      	movs	r3, #0
   8563a:	4c09      	ldr	r4, [pc, #36]	; (85660 <read_can_data+0x48>)
   8563c:	47a0      	blx	r4
		xQueueReceive(can_data_fifo, message_high, (TickType_t) 1);
   8563e:	4b07      	ldr	r3, [pc, #28]	; (8565c <read_can_data+0x44>)
   85640:	681b      	ldr	r3, [r3, #0]
   85642:	4618      	mov	r0, r3
   85644:	68f9      	ldr	r1, [r7, #12]
   85646:	2201      	movs	r2, #1
   85648:	2300      	movs	r3, #0
   8564a:	4c05      	ldr	r4, [pc, #20]	; (85660 <read_can_data+0x48>)
   8564c:	47a0      	blx	r4
		return 1;
   8564e:	2301      	movs	r3, #1
   85650:	e000      	b.n	85654 <read_can_data+0x3c>
	}

	return 0;
   85652:	2300      	movs	r3, #0
}
   85654:	4618      	mov	r0, r3
   85656:	3714      	adds	r7, #20
   85658:	46bd      	mov	sp, r7
   8565a:	bd90      	pop	{r4, r7, pc}
   8565c:	2007a6f0 	.word	0x2007a6f0
   85660:	00083721 	.word	0x00083721

00085664 <read_can_msg>:
/*		The function returns 1 is the operation was successful, 		*/
/*		otherwise it returns 0.
/************************************************************************/

uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85664:	b590      	push	{r4, r7, lr}
   85666:	b085      	sub	sp, #20
   85668:	af00      	add	r7, sp, #0
   8566a:	60f8      	str	r0, [r7, #12]
   8566c:	60b9      	str	r1, [r7, #8]
   8566e:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.

	if (access_code == 1234)
   85670:	687a      	ldr	r2, [r7, #4]
   85672:	f240 43d2 	movw	r3, #1234	; 0x4d2
   85676:	429a      	cmp	r2, r3
   85678:	d111      	bne.n	8569e <read_can_msg+0x3a>
	{
		xQueueReceive(can_msg_fifo, message_low, (TickType_t) 1);
   8567a:	4b0b      	ldr	r3, [pc, #44]	; (856a8 <read_can_msg+0x44>)
   8567c:	681b      	ldr	r3, [r3, #0]
   8567e:	4618      	mov	r0, r3
   85680:	68b9      	ldr	r1, [r7, #8]
   85682:	2201      	movs	r2, #1
   85684:	2300      	movs	r3, #0
   85686:	4c09      	ldr	r4, [pc, #36]	; (856ac <read_can_msg+0x48>)
   85688:	47a0      	blx	r4
		xQueueReceive(can_msg_fifo, message_high, (TickType_t) 1);
   8568a:	4b07      	ldr	r3, [pc, #28]	; (856a8 <read_can_msg+0x44>)
   8568c:	681b      	ldr	r3, [r3, #0]
   8568e:	4618      	mov	r0, r3
   85690:	68f9      	ldr	r1, [r7, #12]
   85692:	2201      	movs	r2, #1
   85694:	2300      	movs	r3, #0
   85696:	4c05      	ldr	r4, [pc, #20]	; (856ac <read_can_msg+0x48>)
   85698:	47a0      	blx	r4
		return 1;
   8569a:	2301      	movs	r3, #1
   8569c:	e000      	b.n	856a0 <read_can_msg+0x3c>
	}

	return 0;
   8569e:	2300      	movs	r3, #0
}
   856a0:	4618      	mov	r0, r3
   856a2:	3714      	adds	r7, #20
   856a4:	46bd      	mov	sp, r7
   856a6:	bd90      	pop	{r4, r7, pc}
   856a8:	2007a750 	.word	0x2007a750
   856ac:	00083721 	.word	0x00083721

000856b0 <request_housekeeping>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t request_housekeeping(uint32_t ID)
{
   856b0:	b580      	push	{r7, lr}
   856b2:	b08c      	sub	sp, #48	; 0x30
   856b4:	af00      	add	r7, sp, #0
   856b6:	6078      	str	r0, [r7, #4]
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	uint32_t high;
	save_can_object(&can0_mailbox, &temp_mailbox);
   856b8:	f107 030c 	add.w	r3, r7, #12
   856bc:	4820      	ldr	r0, [pc, #128]	; (85740 <request_housekeeping+0x90>)
   856be:	4619      	mov	r1, r3
   856c0:	4b20      	ldr	r3, [pc, #128]	; (85744 <request_housekeeping+0x94>)
   856c2:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   856c4:	481e      	ldr	r0, [pc, #120]	; (85740 <request_housekeeping+0x90>)
   856c6:	4b20      	ldr	r3, [pc, #128]	; (85748 <request_housekeeping+0x98>)
   856c8:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   856ca:	4b1d      	ldr	r3, [pc, #116]	; (85740 <request_housekeeping+0x90>)
   856cc:	2206      	movs	r2, #6
   856ce:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   856d0:	4b1b      	ldr	r3, [pc, #108]	; (85740 <request_housekeeping+0x90>)
   856d2:	2203      	movs	r2, #3
   856d4:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   856d6:	4b1a      	ldr	r3, [pc, #104]	; (85740 <request_housekeeping+0x90>)
   856d8:	2214      	movs	r2, #20
   856da:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   856dc:	4b18      	ldr	r3, [pc, #96]	; (85740 <request_housekeeping+0x90>)
   856de:	2200      	movs	r2, #0
   856e0:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   856e2:	4b17      	ldr	r3, [pc, #92]	; (85740 <request_housekeeping+0x90>)
   856e4:	2200      	movs	r2, #0
   856e6:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   856e8:	4818      	ldr	r0, [pc, #96]	; (8574c <request_housekeeping+0x9c>)
   856ea:	4915      	ldr	r1, [pc, #84]	; (85740 <request_housekeeping+0x90>)
   856ec:	4b18      	ldr	r3, [pc, #96]	; (85750 <request_housekeeping+0xa0>)
   856ee:	4798      	blx	r3
	
	high = high_command_generator(OBC_ID, MT_COM, REQ_HK);
   856f0:	20ff      	movs	r0, #255	; 0xff
   856f2:	2102      	movs	r1, #2
   856f4:	2203      	movs	r2, #3
   856f6:	4b17      	ldr	r3, [pc, #92]	; (85754 <request_housekeeping+0xa4>)
   856f8:	4798      	blx	r3
   856fa:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   856fc:	687b      	ldr	r3, [r7, #4]
   856fe:	049a      	lsls	r2, r3, #18
   85700:	4b15      	ldr	r3, [pc, #84]	; (85758 <request_housekeeping+0xa8>)
   85702:	4013      	ands	r3, r2
   85704:	4a0e      	ldr	r2, [pc, #56]	; (85740 <request_housekeeping+0x90>)
   85706:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = 0x00;				// shifted over to the standard frame position.
   85708:	4b0d      	ldr	r3, [pc, #52]	; (85740 <request_housekeeping+0x90>)
   8570a:	2200      	movs	r2, #0
   8570c:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   8570e:	4b0c      	ldr	r3, [pc, #48]	; (85740 <request_housekeeping+0x90>)
   85710:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   85712:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85714:	4b0a      	ldr	r3, [pc, #40]	; (85740 <request_housekeeping+0x90>)
   85716:	2208      	movs	r2, #8
   85718:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   8571a:	480c      	ldr	r0, [pc, #48]	; (8574c <request_housekeeping+0x9c>)
   8571c:	4908      	ldr	r1, [pc, #32]	; (85740 <request_housekeeping+0x90>)
   8571e:	4b0f      	ldr	r3, [pc, #60]	; (8575c <request_housekeeping+0xac>)
   85720:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB6);
   85722:	480a      	ldr	r0, [pc, #40]	; (8574c <request_housekeeping+0x9c>)
   85724:	2140      	movs	r1, #64	; 0x40
   85726:	4b0e      	ldr	r3, [pc, #56]	; (85760 <request_housekeeping+0xb0>)
   85728:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   8572a:	f107 030c 	add.w	r3, r7, #12
   8572e:	4804      	ldr	r0, [pc, #16]	; (85740 <request_housekeeping+0x90>)
   85730:	4619      	mov	r1, r3
   85732:	4b0c      	ldr	r3, [pc, #48]	; (85764 <request_housekeeping+0xb4>)
   85734:	4798      	blx	r3
		
	return 1;
   85736:	2301      	movs	r3, #1
}
   85738:	4618      	mov	r0, r3
   8573a:	3730      	adds	r7, #48	; 0x30
   8573c:	46bd      	mov	sp, r7
   8573e:	bd80      	pop	{r7, pc}
   85740:	2007a720 	.word	0x2007a720
   85744:	00085769 	.word	0x00085769
   85748:	00085515 	.word	0x00085515
   8574c:	400b4000 	.word	0x400b4000
   85750:	00081949 	.word	0x00081949
   85754:	00085b51 	.word	0x00085b51
   85758:	1ffc0000 	.word	0x1ffc0000
   8575c:	00081b2d 	.word	0x00081b2d
   85760:	000818bd 	.word	0x000818bd
   85764:	000857d9 	.word	0x000857d9

00085768 <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85768:	b480      	push	{r7}
   8576a:	b083      	sub	sp, #12
   8576c:	af00      	add	r7, sp, #0
   8576e:	6078      	str	r0, [r7, #4]
   85770:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   85772:	687b      	ldr	r3, [r7, #4]
   85774:	681a      	ldr	r2, [r3, #0]
   85776:	683b      	ldr	r3, [r7, #0]
   85778:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   8577a:	687b      	ldr	r3, [r7, #4]
   8577c:	791a      	ldrb	r2, [r3, #4]
   8577e:	683b      	ldr	r3, [r7, #0]
   85780:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   85782:	687b      	ldr	r3, [r7, #4]
   85784:	795a      	ldrb	r2, [r3, #5]
   85786:	683b      	ldr	r3, [r7, #0]
   85788:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   8578a:	687b      	ldr	r3, [r7, #4]
   8578c:	799a      	ldrb	r2, [r3, #6]
   8578e:	683b      	ldr	r3, [r7, #0]
   85790:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   85792:	687b      	ldr	r3, [r7, #4]
   85794:	79da      	ldrb	r2, [r3, #7]
   85796:	683b      	ldr	r3, [r7, #0]
   85798:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   8579a:	687b      	ldr	r3, [r7, #4]
   8579c:	689a      	ldr	r2, [r3, #8]
   8579e:	683b      	ldr	r3, [r7, #0]
   857a0:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   857a2:	687b      	ldr	r3, [r7, #4]
   857a4:	68da      	ldr	r2, [r3, #12]
   857a6:	683b      	ldr	r3, [r7, #0]
   857a8:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   857aa:	687b      	ldr	r3, [r7, #4]
   857ac:	691a      	ldr	r2, [r3, #16]
   857ae:	683b      	ldr	r3, [r7, #0]
   857b0:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   857b2:	687b      	ldr	r3, [r7, #4]
   857b4:	695a      	ldr	r2, [r3, #20]
   857b6:	683b      	ldr	r3, [r7, #0]
   857b8:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   857ba:	687b      	ldr	r3, [r7, #4]
   857bc:	699a      	ldr	r2, [r3, #24]
   857be:	683b      	ldr	r3, [r7, #0]
   857c0:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   857c2:	687b      	ldr	r3, [r7, #4]
   857c4:	69da      	ldr	r2, [r3, #28]
   857c6:	683b      	ldr	r3, [r7, #0]
   857c8:	61da      	str	r2, [r3, #28]
	
	return;
   857ca:	bf00      	nop
}
   857cc:	370c      	adds	r7, #12
   857ce:	46bd      	mov	sp, r7
   857d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   857d4:	4770      	bx	lr
   857d6:	bf00      	nop

000857d8 <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   857d8:	b480      	push	{r7}
   857da:	b083      	sub	sp, #12
   857dc:	af00      	add	r7, sp, #0
   857de:	6078      	str	r0, [r7, #4]
   857e0:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   857e2:	683b      	ldr	r3, [r7, #0]
   857e4:	681a      	ldr	r2, [r3, #0]
   857e6:	687b      	ldr	r3, [r7, #4]
   857e8:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   857ea:	683b      	ldr	r3, [r7, #0]
   857ec:	791a      	ldrb	r2, [r3, #4]
   857ee:	687b      	ldr	r3, [r7, #4]
   857f0:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   857f2:	683b      	ldr	r3, [r7, #0]
   857f4:	795a      	ldrb	r2, [r3, #5]
   857f6:	687b      	ldr	r3, [r7, #4]
   857f8:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   857fa:	683b      	ldr	r3, [r7, #0]
   857fc:	799a      	ldrb	r2, [r3, #6]
   857fe:	687b      	ldr	r3, [r7, #4]
   85800:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   85802:	683b      	ldr	r3, [r7, #0]
   85804:	79da      	ldrb	r2, [r3, #7]
   85806:	687b      	ldr	r3, [r7, #4]
   85808:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   8580a:	683b      	ldr	r3, [r7, #0]
   8580c:	689a      	ldr	r2, [r3, #8]
   8580e:	687b      	ldr	r3, [r7, #4]
   85810:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   85812:	683b      	ldr	r3, [r7, #0]
   85814:	68da      	ldr	r2, [r3, #12]
   85816:	687b      	ldr	r3, [r7, #4]
   85818:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   8581a:	683b      	ldr	r3, [r7, #0]
   8581c:	691a      	ldr	r2, [r3, #16]
   8581e:	687b      	ldr	r3, [r7, #4]
   85820:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   85822:	683b      	ldr	r3, [r7, #0]
   85824:	695a      	ldr	r2, [r3, #20]
   85826:	687b      	ldr	r3, [r7, #4]
   85828:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   8582a:	683b      	ldr	r3, [r7, #0]
   8582c:	699a      	ldr	r2, [r3, #24]
   8582e:	687b      	ldr	r3, [r7, #4]
   85830:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   85832:	683b      	ldr	r3, [r7, #0]
   85834:	69da      	ldr	r2, [r3, #28]
   85836:	687b      	ldr	r3, [r7, #4]
   85838:	61da      	str	r2, [r3, #28]
	
	return;
   8583a:	bf00      	nop
}
   8583c:	370c      	adds	r7, #12
   8583e:	46bd      	mov	sp, r7
   85840:	f85d 7b04 	ldr.w	r7, [sp], #4
   85844:	4770      	bx	lr
   85846:	bf00      	nop

00085848 <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   85848:	b580      	push	{r7, lr}
   8584a:	b086      	sub	sp, #24
   8584c:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   8584e:	2301      	movs	r3, #1
   85850:	613b      	str	r3, [r7, #16]
   85852:	2300      	movs	r3, #0
   85854:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   85856:	484f      	ldr	r0, [pc, #316]	; (85994 <can_initialize+0x14c>)
   85858:	2134      	movs	r1, #52	; 0x34
   8585a:	4b4f      	ldr	r3, [pc, #316]	; (85998 <can_initialize+0x150>)
   8585c:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   8585e:	484d      	ldr	r0, [pc, #308]	; (85994 <can_initialize+0x14c>)
   85860:	2135      	movs	r1, #53	; 0x35
   85862:	4b4e      	ldr	r3, [pc, #312]	; (8599c <can_initialize+0x154>)
   85864:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   85866:	484b      	ldr	r0, [pc, #300]	; (85994 <can_initialize+0x14c>)
   85868:	4b4d      	ldr	r3, [pc, #308]	; (859a0 <can_initialize+0x158>)
   8586a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   8586c:	4849      	ldr	r0, [pc, #292]	; (85994 <can_initialize+0x14c>)
   8586e:	4b4d      	ldr	r3, [pc, #308]	; (859a4 <can_initialize+0x15c>)
   85870:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   85872:	484d      	ldr	r0, [pc, #308]	; (859a8 <can_initialize+0x160>)
   85874:	218f      	movs	r1, #143	; 0x8f
   85876:	4b48      	ldr	r3, [pc, #288]	; (85998 <can_initialize+0x150>)
   85878:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   8587a:	484b      	ldr	r0, [pc, #300]	; (859a8 <can_initialize+0x160>)
   8587c:	2190      	movs	r1, #144	; 0x90
   8587e:	4b47      	ldr	r3, [pc, #284]	; (8599c <can_initialize+0x154>)
   85880:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   85882:	4849      	ldr	r0, [pc, #292]	; (859a8 <can_initialize+0x160>)
   85884:	4b46      	ldr	r3, [pc, #280]	; (859a0 <can_initialize+0x158>)
   85886:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   85888:	4847      	ldr	r0, [pc, #284]	; (859a8 <can_initialize+0x160>)
   8588a:	4b46      	ldr	r3, [pc, #280]	; (859a4 <can_initialize+0x15c>)
   8588c:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8588e:	202b      	movs	r0, #43	; 0x2b
   85890:	4b46      	ldr	r3, [pc, #280]	; (859ac <can_initialize+0x164>)
   85892:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   85894:	202c      	movs	r0, #44	; 0x2c
   85896:	4b45      	ldr	r3, [pc, #276]	; (859ac <can_initialize+0x164>)
   85898:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   8589a:	4b45      	ldr	r3, [pc, #276]	; (859b0 <can_initialize+0x168>)
   8589c:	4798      	blx	r3
   8589e:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   858a0:	4844      	ldr	r0, [pc, #272]	; (859b4 <can_initialize+0x16c>)
   858a2:	68f9      	ldr	r1, [r7, #12]
   858a4:	22fa      	movs	r2, #250	; 0xfa
   858a6:	4b44      	ldr	r3, [pc, #272]	; (859b8 <can_initialize+0x170>)
   858a8:	4798      	blx	r3
   858aa:	4603      	mov	r3, r0
   858ac:	2b00      	cmp	r3, #0
   858ae:	d06d      	beq.n	8598c <can_initialize+0x144>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   858b0:	4842      	ldr	r0, [pc, #264]	; (859bc <can_initialize+0x174>)
   858b2:	68f9      	ldr	r1, [r7, #12]
   858b4:	22fa      	movs	r2, #250	; 0xfa
   858b6:	4b40      	ldr	r3, [pc, #256]	; (859b8 <can_initialize+0x170>)
   858b8:	4798      	blx	r3
   858ba:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   858bc:	2b00      	cmp	r3, #0
   858be:	d065      	beq.n	8598c <can_initialize+0x144>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   858c0:	483c      	ldr	r0, [pc, #240]	; (859b4 <can_initialize+0x16c>)
   858c2:	f04f 31ff 	mov.w	r1, #4294967295
   858c6:	4b3e      	ldr	r3, [pc, #248]	; (859c0 <can_initialize+0x178>)
   858c8:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   858ca:	483c      	ldr	r0, [pc, #240]	; (859bc <can_initialize+0x174>)
   858cc:	f04f 31ff 	mov.w	r1, #4294967295
   858d0:	4b3b      	ldr	r3, [pc, #236]	; (859c0 <can_initialize+0x178>)
   858d2:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   858d4:	202b      	movs	r0, #43	; 0x2b
   858d6:	4b3b      	ldr	r3, [pc, #236]	; (859c4 <can_initialize+0x17c>)
   858d8:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   858da:	202c      	movs	r0, #44	; 0x2c
   858dc:	4b39      	ldr	r3, [pc, #228]	; (859c4 <can_initialize+0x17c>)
   858de:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   858e0:	4834      	ldr	r0, [pc, #208]	; (859b4 <can_initialize+0x16c>)
   858e2:	4b39      	ldr	r3, [pc, #228]	; (859c8 <can_initialize+0x180>)
   858e4:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   858e6:	4835      	ldr	r0, [pc, #212]	; (859bc <can_initialize+0x174>)
   858e8:	4b37      	ldr	r3, [pc, #220]	; (859c8 <can_initialize+0x180>)
   858ea:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   858ec:	6938      	ldr	r0, [r7, #16]
   858ee:	4b37      	ldr	r3, [pc, #220]	; (859cc <can_initialize+0x184>)
   858f0:	4798      	blx	r3
   858f2:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   858f4:	4b36      	ldr	r3, [pc, #216]	; (859d0 <can_initialize+0x188>)
   858f6:	2200      	movs	r2, #0
   858f8:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comf = 0;
   858fa:	4b36      	ldr	r3, [pc, #216]	; (859d4 <can_initialize+0x18c>)
   858fc:	2200      	movs	r2, #0
   858fe:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 8; i++)
   85900:	2300      	movs	r3, #0
   85902:	617b      	str	r3, [r7, #20]
   85904:	e01b      	b.n	8593e <can_initialize+0xf6>
		{
			can_glob_com_reg[i] = 0;
   85906:	4b34      	ldr	r3, [pc, #208]	; (859d8 <can_initialize+0x190>)
   85908:	697a      	ldr	r2, [r7, #20]
   8590a:	2100      	movs	r1, #0
   8590c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			can_glob_data_reg[i] = 0;
   85910:	4b32      	ldr	r3, [pc, #200]	; (859dc <can_initialize+0x194>)
   85912:	697a      	ldr	r2, [r7, #20]
   85914:	2100      	movs	r1, #0
   85916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			can_glob_hk_reg[i] = 0;
   8591a:	4b31      	ldr	r3, [pc, #196]	; (859e0 <can_initialize+0x198>)
   8591c:	697a      	ldr	r2, [r7, #20]
   8591e:	2100      	movs	r1, #0
   85920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_data[i] = 0;
   85924:	4b2f      	ldr	r3, [pc, #188]	; (859e4 <can_initialize+0x19c>)
   85926:	697a      	ldr	r2, [r7, #20]
   85928:	2100      	movs	r1, #0
   8592a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   8592e:	4b2e      	ldr	r3, [pc, #184]	; (859e8 <can_initialize+0x1a0>)
   85930:	697a      	ldr	r2, [r7, #20]
   85932:	2100      	movs	r1, #0
   85934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		
		/* Initialize the message reception flag */
		glob_comf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 8; i++)
   85938:	697b      	ldr	r3, [r7, #20]
   8593a:	3301      	adds	r3, #1
   8593c:	617b      	str	r3, [r7, #20]
   8593e:	697b      	ldr	r3, [r7, #20]
   85940:	2b07      	cmp	r3, #7
   85942:	d9e0      	bls.n	85906 <can_initialize+0xbe>
			glob_stored_data[i] = 0;
			glob_stored_message[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   85944:	2364      	movs	r3, #100	; 0x64
   85946:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   85948:	2304      	movs	r3, #4
   8594a:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   8594c:	68b8      	ldr	r0, [r7, #8]
   8594e:	6879      	ldr	r1, [r7, #4]
   85950:	2200      	movs	r2, #0
   85952:	4b26      	ldr	r3, [pc, #152]	; (859ec <can_initialize+0x1a4>)
   85954:	4798      	blx	r3
   85956:	4602      	mov	r2, r0
   85958:	4b25      	ldr	r3, [pc, #148]	; (859f0 <can_initialize+0x1a8>)
   8595a:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   8595c:	68b8      	ldr	r0, [r7, #8]
   8595e:	6879      	ldr	r1, [r7, #4]
   85960:	2200      	movs	r2, #0
   85962:	4b22      	ldr	r3, [pc, #136]	; (859ec <can_initialize+0x1a4>)
   85964:	4798      	blx	r3
   85966:	4602      	mov	r2, r0
   85968:	4b22      	ldr	r3, [pc, #136]	; (859f4 <can_initialize+0x1ac>)
   8596a:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   8596c:	68b8      	ldr	r0, [r7, #8]
   8596e:	6879      	ldr	r1, [r7, #4]
   85970:	2200      	movs	r2, #0
   85972:	4b1e      	ldr	r3, [pc, #120]	; (859ec <can_initialize+0x1a4>)
   85974:	4798      	blx	r3
   85976:	4602      	mov	r2, r0
   85978:	4b1f      	ldr	r3, [pc, #124]	; (859f8 <can_initialize+0x1b0>)
   8597a:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   8597c:	68b8      	ldr	r0, [r7, #8]
   8597e:	6879      	ldr	r1, [r7, #4]
   85980:	2200      	movs	r2, #0
   85982:	4b1a      	ldr	r3, [pc, #104]	; (859ec <can_initialize+0x1a4>)
   85984:	4798      	blx	r3
   85986:	4602      	mov	r2, r0
   85988:	4b1c      	ldr	r3, [pc, #112]	; (859fc <can_initialize+0x1b4>)
   8598a:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   8598c:	bf00      	nop
}
   8598e:	3718      	adds	r7, #24
   85990:	46bd      	mov	sp, r7
   85992:	bd80      	pop	{r7, pc}
   85994:	2007a774 	.word	0x2007a774
   85998:	000815e5 	.word	0x000815e5
   8599c:	00081601 	.word	0x00081601
   859a0:	00081639 	.word	0x00081639
   859a4:	0008161d 	.word	0x0008161d
   859a8:	2007a6e0 	.word	0x2007a6e0
   859ac:	00082455 	.word	0x00082455
   859b0:	00085149 	.word	0x00085149
   859b4:	400b4000 	.word	0x400b4000
   859b8:	000817a5 	.word	0x000817a5
   859bc:	400b8000 	.word	0x400b8000
   859c0:	00081889 	.word	0x00081889
   859c4:	00085089 	.word	0x00085089
   859c8:	00081be5 	.word	0x00081be5
   859cc:	00085a01 	.word	0x00085a01
   859d0:	2007a6dc 	.word	0x2007a6dc
   859d4:	2007a784 	.word	0x2007a784
   859d8:	2007a77c 	.word	0x2007a77c
   859dc:	2007a6e8 	.word	0x2007a6e8
   859e0:	2007a6a8 	.word	0x2007a6a8
   859e4:	2007a6b4 	.word	0x2007a6b4
   859e8:	2007a748 	.word	0x2007a748
   859ec:	000833d5 	.word	0x000833d5
   859f0:	2007a6f0 	.word	0x2007a6f0
   859f4:	2007a750 	.word	0x2007a750
   859f8:	2007a6b0 	.word	0x2007a6b0
   859fc:	2007a744 	.word	0x2007a744

00085a00 <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   85a00:	b580      	push	{r7, lr}
   85a02:	b082      	sub	sp, #8
   85a04:	af00      	add	r7, sp, #0
   85a06:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   85a08:	484a      	ldr	r0, [pc, #296]	; (85b34 <can_init_mailboxes+0x134>)
   85a0a:	4b4b      	ldr	r3, [pc, #300]	; (85b38 <can_init_mailboxes+0x138>)
   85a0c:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85a0e:	4b49      	ldr	r3, [pc, #292]	; (85b34 <can_init_mailboxes+0x134>)
   85a10:	2207      	movs	r2, #7
   85a12:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85a14:	4b47      	ldr	r3, [pc, #284]	; (85b34 <can_init_mailboxes+0x134>)
   85a16:	2203      	movs	r2, #3
   85a18:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   85a1a:	4b46      	ldr	r3, [pc, #280]	; (85b34 <can_init_mailboxes+0x134>)
   85a1c:	2205      	movs	r2, #5
   85a1e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85a20:	4b44      	ldr	r3, [pc, #272]	; (85b34 <can_init_mailboxes+0x134>)
   85a22:	2200      	movs	r2, #0
   85a24:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85a26:	4b43      	ldr	r3, [pc, #268]	; (85b34 <can_init_mailboxes+0x134>)
   85a28:	2200      	movs	r2, #0
   85a2a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85a2c:	4843      	ldr	r0, [pc, #268]	; (85b3c <can_init_mailboxes+0x13c>)
   85a2e:	4941      	ldr	r1, [pc, #260]	; (85b34 <can_init_mailboxes+0x134>)
   85a30:	4b43      	ldr	r3, [pc, #268]	; (85b40 <can_init_mailboxes+0x140>)
   85a32:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a34:	4843      	ldr	r0, [pc, #268]	; (85b44 <can_init_mailboxes+0x144>)
   85a36:	4b40      	ldr	r3, [pc, #256]	; (85b38 <can_init_mailboxes+0x138>)
   85a38:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   85a3a:	4b42      	ldr	r3, [pc, #264]	; (85b44 <can_init_mailboxes+0x144>)
   85a3c:	2200      	movs	r2, #0
   85a3e:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85a40:	4b40      	ldr	r3, [pc, #256]	; (85b44 <can_init_mailboxes+0x144>)
   85a42:	2201      	movs	r2, #1
   85a44:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85a46:	4b3f      	ldr	r3, [pc, #252]	; (85b44 <can_init_mailboxes+0x144>)
   85a48:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85a4c:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85a4e:	4b3d      	ldr	r3, [pc, #244]	; (85b44 <can_init_mailboxes+0x144>)
   85a50:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   85a54:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85a56:	483c      	ldr	r0, [pc, #240]	; (85b48 <can_init_mailboxes+0x148>)
   85a58:	493a      	ldr	r1, [pc, #232]	; (85b44 <can_init_mailboxes+0x144>)
   85a5a:	4b39      	ldr	r3, [pc, #228]	; (85b40 <can_init_mailboxes+0x140>)
   85a5c:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a5e:	4839      	ldr	r0, [pc, #228]	; (85b44 <can_init_mailboxes+0x144>)
   85a60:	4b35      	ldr	r3, [pc, #212]	; (85b38 <can_init_mailboxes+0x138>)
   85a62:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   85a64:	4b37      	ldr	r3, [pc, #220]	; (85b44 <can_init_mailboxes+0x144>)
   85a66:	2205      	movs	r2, #5
   85a68:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85a6a:	4b36      	ldr	r3, [pc, #216]	; (85b44 <can_init_mailboxes+0x144>)
   85a6c:	2201      	movs	r2, #1
   85a6e:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85a70:	4b34      	ldr	r3, [pc, #208]	; (85b44 <can_init_mailboxes+0x144>)
   85a72:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85a76:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85a78:	4b32      	ldr	r3, [pc, #200]	; (85b44 <can_init_mailboxes+0x144>)
   85a7a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   85a7e:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85a80:	4831      	ldr	r0, [pc, #196]	; (85b48 <can_init_mailboxes+0x148>)
   85a82:	4930      	ldr	r1, [pc, #192]	; (85b44 <can_init_mailboxes+0x144>)
   85a84:	4b2e      	ldr	r3, [pc, #184]	; (85b40 <can_init_mailboxes+0x140>)
   85a86:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85a88:	482e      	ldr	r0, [pc, #184]	; (85b44 <can_init_mailboxes+0x144>)
   85a8a:	4b2b      	ldr	r3, [pc, #172]	; (85b38 <can_init_mailboxes+0x138>)
   85a8c:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   85a8e:	4b2d      	ldr	r3, [pc, #180]	; (85b44 <can_init_mailboxes+0x144>)
   85a90:	2206      	movs	r2, #6
   85a92:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85a94:	4b2b      	ldr	r3, [pc, #172]	; (85b44 <can_init_mailboxes+0x144>)
   85a96:	2201      	movs	r2, #1
   85a98:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85a9a:	4b2a      	ldr	r3, [pc, #168]	; (85b44 <can_init_mailboxes+0x144>)
   85a9c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85aa0:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   85aa2:	4b28      	ldr	r3, [pc, #160]	; (85b44 <can_init_mailboxes+0x144>)
   85aa4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   85aa8:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85aaa:	4827      	ldr	r0, [pc, #156]	; (85b48 <can_init_mailboxes+0x148>)
   85aac:	4925      	ldr	r1, [pc, #148]	; (85b44 <can_init_mailboxes+0x144>)
   85aae:	4b24      	ldr	r3, [pc, #144]	; (85b40 <can_init_mailboxes+0x140>)
   85ab0:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85ab2:	4824      	ldr	r0, [pc, #144]	; (85b44 <can_init_mailboxes+0x144>)
   85ab4:	4b20      	ldr	r3, [pc, #128]	; (85b38 <can_init_mailboxes+0x138>)
   85ab6:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   85ab8:	4b22      	ldr	r3, [pc, #136]	; (85b44 <can_init_mailboxes+0x144>)
   85aba:	2207      	movs	r2, #7
   85abc:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85abe:	4b21      	ldr	r3, [pc, #132]	; (85b44 <can_init_mailboxes+0x144>)
   85ac0:	2201      	movs	r2, #1
   85ac2:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85ac4:	4b1f      	ldr	r3, [pc, #124]	; (85b44 <can_init_mailboxes+0x144>)
   85ac6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85aca:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   85acc:	4b1d      	ldr	r3, [pc, #116]	; (85b44 <can_init_mailboxes+0x144>)
   85ace:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   85ad2:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85ad4:	481c      	ldr	r0, [pc, #112]	; (85b48 <can_init_mailboxes+0x148>)
   85ad6:	491b      	ldr	r1, [pc, #108]	; (85b44 <can_init_mailboxes+0x144>)
   85ad8:	4b19      	ldr	r3, [pc, #100]	; (85b40 <can_init_mailboxes+0x140>)
   85ada:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   85adc:	481a      	ldr	r0, [pc, #104]	; (85b48 <can_init_mailboxes+0x148>)
   85ade:	2101      	movs	r1, #1
   85ae0:	4b1a      	ldr	r3, [pc, #104]	; (85b4c <can_init_mailboxes+0x14c>)
   85ae2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   85ae4:	4818      	ldr	r0, [pc, #96]	; (85b48 <can_init_mailboxes+0x148>)
   85ae6:	2120      	movs	r1, #32
   85ae8:	4b18      	ldr	r3, [pc, #96]	; (85b4c <can_init_mailboxes+0x14c>)
   85aea:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   85aec:	4816      	ldr	r0, [pc, #88]	; (85b48 <can_init_mailboxes+0x148>)
   85aee:	2140      	movs	r1, #64	; 0x40
   85af0:	4b16      	ldr	r3, [pc, #88]	; (85b4c <can_init_mailboxes+0x14c>)
   85af2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   85af4:	4814      	ldr	r0, [pc, #80]	; (85b48 <can_init_mailboxes+0x148>)
   85af6:	2180      	movs	r1, #128	; 0x80
   85af8:	4b14      	ldr	r3, [pc, #80]	; (85b4c <can_init_mailboxes+0x14c>)
   85afa:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85afc:	480d      	ldr	r0, [pc, #52]	; (85b34 <can_init_mailboxes+0x134>)
   85afe:	4b0e      	ldr	r3, [pc, #56]	; (85b38 <can_init_mailboxes+0x138>)
   85b00:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85b02:	4b0c      	ldr	r3, [pc, #48]	; (85b34 <can_init_mailboxes+0x134>)
   85b04:	2206      	movs	r2, #6
   85b06:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85b08:	4b0a      	ldr	r3, [pc, #40]	; (85b34 <can_init_mailboxes+0x134>)
   85b0a:	2203      	movs	r2, #3
   85b0c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85b0e:	4b09      	ldr	r3, [pc, #36]	; (85b34 <can_init_mailboxes+0x134>)
   85b10:	2214      	movs	r2, #20
   85b12:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85b14:	4b07      	ldr	r3, [pc, #28]	; (85b34 <can_init_mailboxes+0x134>)
   85b16:	2200      	movs	r2, #0
   85b18:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85b1a:	4b06      	ldr	r3, [pc, #24]	; (85b34 <can_init_mailboxes+0x134>)
   85b1c:	2200      	movs	r2, #0
   85b1e:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85b20:	4806      	ldr	r0, [pc, #24]	; (85b3c <can_init_mailboxes+0x13c>)
   85b22:	4904      	ldr	r1, [pc, #16]	; (85b34 <can_init_mailboxes+0x134>)
   85b24:	4b06      	ldr	r3, [pc, #24]	; (85b40 <can_init_mailboxes+0x140>)
   85b26:	4798      	blx	r3

	return 1;
   85b28:	2301      	movs	r3, #1
}
   85b2a:	4618      	mov	r0, r3
   85b2c:	3708      	adds	r7, #8
   85b2e:	46bd      	mov	sp, r7
   85b30:	bd80      	pop	{r7, pc}
   85b32:	bf00      	nop
   85b34:	2007a720 	.word	0x2007a720
   85b38:	00085515 	.word	0x00085515
   85b3c:	400b4000 	.word	0x400b4000
   85b40:	00081949 	.word	0x00081949
   85b44:	2007a6bc 	.word	0x2007a6bc
   85b48:	400b8000 	.word	0x400b8000
   85b4c:	0008186d 	.word	0x0008186d

00085b50 <high_command_generator>:

uint32_t high_command_generator(uint8_t SENDER_ID, uint8_t MessageType, uint8_t smalltype)
{
   85b50:	b480      	push	{r7}
   85b52:	b087      	sub	sp, #28
   85b54:	af00      	add	r7, sp, #0
   85b56:	4613      	mov	r3, r2
   85b58:	4602      	mov	r2, r0
   85b5a:	71fa      	strb	r2, [r7, #7]
   85b5c:	460a      	mov	r2, r1
   85b5e:	71ba      	strb	r2, [r7, #6]
   85b60:	717b      	strb	r3, [r7, #5]
	uint8_t dummy_time=0x00; //Should be replaced once RTC is ready.
   85b62:	2300      	movs	r3, #0
   85b64:	75fb      	strb	r3, [r7, #23]
	uint32_t sender, m_type, s_type;
	
	sender = (uint32_t)SENDER_ID;
   85b66:	79fb      	ldrb	r3, [r7, #7]
   85b68:	613b      	str	r3, [r7, #16]
	sender = sender << 24;
   85b6a:	693b      	ldr	r3, [r7, #16]
   85b6c:	061b      	lsls	r3, r3, #24
   85b6e:	613b      	str	r3, [r7, #16]
	
	m_type = (uint32_t)MessageType;
   85b70:	79bb      	ldrb	r3, [r7, #6]
   85b72:	60fb      	str	r3, [r7, #12]
	m_type = m_type << 16;
   85b74:	68fb      	ldr	r3, [r7, #12]
   85b76:	041b      	lsls	r3, r3, #16
   85b78:	60fb      	str	r3, [r7, #12]
	
	s_type = (uint32_t)smalltype;
   85b7a:	797b      	ldrb	r3, [r7, #5]
   85b7c:	60bb      	str	r3, [r7, #8]
	s_type = s_type << 8;
   85b7e:	68bb      	ldr	r3, [r7, #8]
   85b80:	021b      	lsls	r3, r3, #8
   85b82:	60bb      	str	r3, [r7, #8]
	
	return sender + m_type + s_type + dummy_time;
   85b84:	693a      	ldr	r2, [r7, #16]
   85b86:	68fb      	ldr	r3, [r7, #12]
   85b88:	441a      	add	r2, r3
   85b8a:	68bb      	ldr	r3, [r7, #8]
   85b8c:	441a      	add	r2, r3
   85b8e:	7dfb      	ldrb	r3, [r7, #23]
   85b90:	4413      	add	r3, r2
}
   85b92:	4618      	mov	r0, r3
   85b94:	371c      	adds	r7, #28
   85b96:	46bd      	mov	sp, r7
   85b98:	f85d 7b04 	ldr.w	r7, [sp], #4
   85b9c:	4770      	bx	lr
   85b9e:	bf00      	nop

00085ba0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   85ba0:	b480      	push	{r7}
   85ba2:	b085      	sub	sp, #20
   85ba4:	af00      	add	r7, sp, #0
   85ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   85ba8:	687b      	ldr	r3, [r7, #4]
   85baa:	f003 0307 	and.w	r3, r3, #7
   85bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85bb0:	4b0c      	ldr	r3, [pc, #48]	; (85be4 <NVIC_SetPriorityGrouping+0x44>)
   85bb2:	68db      	ldr	r3, [r3, #12]
   85bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   85bb6:	68ba      	ldr	r2, [r7, #8]
   85bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   85bbc:	4013      	ands	r3, r2
   85bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   85bc0:	68fb      	ldr	r3, [r7, #12]
   85bc2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   85bc4:	68bb      	ldr	r3, [r7, #8]
   85bc6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   85bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   85bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   85bd0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   85bd2:	4b04      	ldr	r3, [pc, #16]	; (85be4 <NVIC_SetPriorityGrouping+0x44>)
   85bd4:	68ba      	ldr	r2, [r7, #8]
   85bd6:	60da      	str	r2, [r3, #12]
}
   85bd8:	3714      	adds	r7, #20
   85bda:	46bd      	mov	sp, r7
   85bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
   85be0:	4770      	bx	lr
   85be2:	bf00      	nop
   85be4:	e000ed00 	.word	0xe000ed00

00085be8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   85be8:	b480      	push	{r7}
   85bea:	b083      	sub	sp, #12
   85bec:	af00      	add	r7, sp, #0
   85bee:	4603      	mov	r3, r0
   85bf0:	6039      	str	r1, [r7, #0]
   85bf2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   85bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85bf8:	2b00      	cmp	r3, #0
   85bfa:	da0b      	bge.n	85c14 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   85bfc:	490d      	ldr	r1, [pc, #52]	; (85c34 <NVIC_SetPriority+0x4c>)
   85bfe:	79fb      	ldrb	r3, [r7, #7]
   85c00:	f003 030f 	and.w	r3, r3, #15
   85c04:	3b04      	subs	r3, #4
   85c06:	683a      	ldr	r2, [r7, #0]
   85c08:	b2d2      	uxtb	r2, r2
   85c0a:	0112      	lsls	r2, r2, #4
   85c0c:	b2d2      	uxtb	r2, r2
   85c0e:	440b      	add	r3, r1
   85c10:	761a      	strb	r2, [r3, #24]
   85c12:	e009      	b.n	85c28 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   85c14:	4908      	ldr	r1, [pc, #32]	; (85c38 <NVIC_SetPriority+0x50>)
   85c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85c1a:	683a      	ldr	r2, [r7, #0]
   85c1c:	b2d2      	uxtb	r2, r2
   85c1e:	0112      	lsls	r2, r2, #4
   85c20:	b2d2      	uxtb	r2, r2
   85c22:	440b      	add	r3, r1
   85c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   85c28:	370c      	adds	r7, #12
   85c2a:	46bd      	mov	sp, r7
   85c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   85c30:	4770      	bx	lr
   85c32:	bf00      	nop
   85c34:	e000ed00 	.word	0xe000ed00
   85c38:	e000e100 	.word	0xe000e100

00085c3c <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   85c3c:	b480      	push	{r7}
   85c3e:	b083      	sub	sp, #12
   85c40:	af00      	add	r7, sp, #0
   85c42:	4603      	mov	r3, r0
   85c44:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   85c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85c4a:	2b00      	cmp	r3, #0
   85c4c:	da0a      	bge.n	85c64 <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   85c4e:	4a0d      	ldr	r2, [pc, #52]	; (85c84 <NVIC_GetPriority+0x48>)
   85c50:	79fb      	ldrb	r3, [r7, #7]
   85c52:	f003 030f 	and.w	r3, r3, #15
   85c56:	3b04      	subs	r3, #4
   85c58:	4413      	add	r3, r2
   85c5a:	7e1b      	ldrb	r3, [r3, #24]
   85c5c:	b2db      	uxtb	r3, r3
   85c5e:	091b      	lsrs	r3, r3, #4
   85c60:	b2db      	uxtb	r3, r3
   85c62:	e008      	b.n	85c76 <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   85c64:	4a08      	ldr	r2, [pc, #32]	; (85c88 <NVIC_GetPriority+0x4c>)
   85c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85c6a:	4413      	add	r3, r2
   85c6c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   85c70:	b2db      	uxtb	r3, r3
   85c72:	091b      	lsrs	r3, r3, #4
   85c74:	b2db      	uxtb	r3, r3
}
   85c76:	4618      	mov	r0, r3
   85c78:	370c      	adds	r7, #12
   85c7a:	46bd      	mov	sp, r7
   85c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   85c80:	4770      	bx	lr
   85c82:	bf00      	nop
   85c84:	e000ed00 	.word	0xe000ed00
   85c88:	e000e100 	.word	0xe000e100

00085c8c <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   85c8c:	b580      	push	{r7, lr}
   85c8e:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   85c90:	4b0a      	ldr	r3, [pc, #40]	; (85cbc <main+0x30>)
   85c92:	2200      	movs	r2, #0
   85c94:	601a      	str	r2, [r3, #0]
	safe_mode();
   85c96:	4b0a      	ldr	r3, [pc, #40]	; (85cc0 <main+0x34>)
   85c98:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   85c9a:	4b0a      	ldr	r3, [pc, #40]	; (85cc4 <main+0x38>)
   85c9c:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   85c9e:	4b0a      	ldr	r3, [pc, #40]	; (85cc8 <main+0x3c>)
   85ca0:	4798      	blx	r3
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   85ca2:	4b0a      	ldr	r3, [pc, #40]	; (85ccc <main+0x40>)
   85ca4:	4798      	blx	r3
	
	/* Create Tasks */
	my_blink();
   85ca6:	4b0a      	ldr	r3, [pc, #40]	; (85cd0 <main+0x44>)
   85ca8:	4798      	blx	r3
	housekeep();
   85caa:	4b0a      	ldr	r3, [pc, #40]	; (85cd4 <main+0x48>)
   85cac:	4798      	blx	r3
	command_loop();
   85cae:	4b0a      	ldr	r3, [pc, #40]	; (85cd8 <main+0x4c>)
   85cb0:	4798      	blx	r3
	data_test();
   85cb2:	4b0a      	ldr	r3, [pc, #40]	; (85cdc <main+0x50>)
   85cb4:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   85cb6:	4b0a      	ldr	r3, [pc, #40]	; (85ce0 <main+0x54>)
   85cb8:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   85cba:	e7fe      	b.n	85cba <main+0x2e>
   85cbc:	2007a740 	.word	0x2007a740
   85cc0:	00085ce5 	.word	0x00085ce5
   85cc4:	00085d65 	.word	0x00085d65
   85cc8:	00085d1d 	.word	0x00085d1d
   85ccc:	00085d45 	.word	0x00085d45
   85cd0:	00085dfd 	.word	0x00085dfd
   85cd4:	000805ed 	.word	0x000805ed
   85cd8:	000803b9 	.word	0x000803b9
   85cdc:	0008048d 	.word	0x0008048d
   85ce0:	00083e49 	.word	0x00083e49

00085ce4 <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   85ce4:	b580      	push	{r7, lr}
   85ce6:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   85ce8:	4b07      	ldr	r3, [pc, #28]	; (85d08 <safe_mode+0x24>)
   85cea:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   85cec:	2000      	movs	r0, #0
   85cee:	4b07      	ldr	r3, [pc, #28]	; (85d0c <safe_mode+0x28>)
   85cf0:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   85cf2:	4b07      	ldr	r3, [pc, #28]	; (85d10 <safe_mode+0x2c>)
   85cf4:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   85cf6:	4b07      	ldr	r3, [pc, #28]	; (85d14 <safe_mode+0x30>)
   85cf8:	4798      	blx	r3
		// We're good, SAFE_MODE = 0
		
	// else	
		//send_can_command(result_of_hash, to_coms);
	
	while(SAFE_MODE){}		// We should remain here until this variable is updated
   85cfa:	bf00      	nop
   85cfc:	4b06      	ldr	r3, [pc, #24]	; (85d18 <safe_mode+0x34>)
   85cfe:	681b      	ldr	r3, [r3, #0]
   85d00:	2b00      	cmp	r3, #0
   85d02:	d1fb      	bne.n	85cfc <safe_mode+0x18>
							// by the interrupt.
}
   85d04:	bd80      	pop	{r7, pc}
   85d06:	bf00      	nop
   85d08:	00081459 	.word	0x00081459
   85d0c:	00085ba1 	.word	0x00085ba1
   85d10:	000814c1 	.word	0x000814c1
   85d14:	00085849 	.word	0x00085849
   85d18:	2007a740 	.word	0x2007a740

00085d1c <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   85d1c:	b580      	push	{r7, lr}
   85d1e:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   85d20:	4b04      	ldr	r3, [pc, #16]	; (85d34 <prvSetupHardware+0x18>)
   85d22:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   85d24:	4b04      	ldr	r3, [pc, #16]	; (85d38 <prvSetupHardware+0x1c>)
   85d26:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   85d28:	4b04      	ldr	r3, [pc, #16]	; (85d3c <prvSetupHardware+0x20>)
   85d2a:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   85d2c:	4b04      	ldr	r3, [pc, #16]	; (85d40 <prvSetupHardware+0x24>)
   85d2e:	4798      	blx	r3
}
   85d30:	bd80      	pop	{r7, pc}
   85d32:	bf00      	nop
   85d34:	00081529 	.word	0x00081529
   85d38:	000806a1 	.word	0x000806a1
   85d3c:	000810d9 	.word	0x000810d9
   85d40:	00080a31 	.word	0x00080a31

00085d44 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   85d44:	b580      	push	{r7, lr}
   85d46:	af00      	add	r7, sp, #0
	Can1_Mutex = xSemaphoreCreateBinary();
   85d48:	2001      	movs	r0, #1
   85d4a:	2100      	movs	r1, #0
   85d4c:	2203      	movs	r2, #3
   85d4e:	4b03      	ldr	r3, [pc, #12]	; (85d5c <prvInitializeMutexes+0x18>)
   85d50:	4798      	blx	r3
   85d52:	4602      	mov	r2, r0
   85d54:	4b02      	ldr	r3, [pc, #8]	; (85d60 <prvInitializeMutexes+0x1c>)
   85d56:	601a      	str	r2, [r3, #0]
	return;
   85d58:	bf00      	nop
}
   85d5a:	bd80      	pop	{r7, pc}
   85d5c:	000833d5 	.word	0x000833d5
   85d60:	2007a71c 	.word	0x2007a71c

00085d64 <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   85d64:	b580      	push	{r7, lr}
   85d66:	b082      	sub	sp, #8
   85d68:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   85d6a:	230b      	movs	r3, #11
   85d6c:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   85d6e:	232c      	movs	r3, #44	; 0x2c
   85d70:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   85d72:	232b      	movs	r3, #43	; 0x2b
   85d74:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   85d76:	f997 3003 	ldrsb.w	r3, [r7, #3]
   85d7a:	4618      	mov	r0, r3
   85d7c:	6879      	ldr	r1, [r7, #4]
   85d7e:	4b0a      	ldr	r3, [pc, #40]	; (85da8 <prvInitializeInterruptPriorities+0x44>)
   85d80:	4798      	blx	r3
	
	priority = 12;	
   85d82:	230c      	movs	r3, #12
   85d84:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   85d86:	f997 3002 	ldrsb.w	r3, [r7, #2]
   85d8a:	4618      	mov	r0, r3
   85d8c:	6879      	ldr	r1, [r7, #4]
   85d8e:	4b06      	ldr	r3, [pc, #24]	; (85da8 <prvInitializeInterruptPriorities+0x44>)
   85d90:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   85d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
   85d96:	4618      	mov	r0, r3
   85d98:	4b04      	ldr	r3, [pc, #16]	; (85dac <prvInitializeInterruptPriorities+0x48>)
   85d9a:	4798      	blx	r3
   85d9c:	6078      	str	r0, [r7, #4]
	
	return;
   85d9e:	bf00      	nop
}
   85da0:	3708      	adds	r7, #8
   85da2:	46bd      	mov	sp, r7
   85da4:	bd80      	pop	{r7, pc}
   85da6:	bf00      	nop
   85da8:	00085be9 	.word	0x00085be9
   85dac:	00085c3d 	.word	0x00085c3d

00085db0 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   85db0:	b580      	push	{r7, lr}
   85db2:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   85db4:	4b01      	ldr	r3, [pc, #4]	; (85dbc <vApplicationMallocFailedHook+0xc>)
   85db6:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85db8:	e7fe      	b.n	85db8 <vApplicationMallocFailedHook+0x8>
   85dba:	bf00      	nop
   85dbc:	00082e59 	.word	0x00082e59

00085dc0 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   85dc0:	b580      	push	{r7, lr}
   85dc2:	b082      	sub	sp, #8
   85dc4:	af00      	add	r7, sp, #0
   85dc6:	6078      	str	r0, [r7, #4]
   85dc8:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   85dca:	4b01      	ldr	r3, [pc, #4]	; (85dd0 <vApplicationStackOverflowHook+0x10>)
   85dcc:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85dce:	e7fe      	b.n	85dce <vApplicationStackOverflowHook+0xe>
   85dd0:	00082e59 	.word	0x00082e59

00085dd4 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   85dd4:	b580      	push	{r7, lr}
   85dd6:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   85dd8:	4804      	ldr	r0, [pc, #16]	; (85dec <WDT_Handler+0x18>)
   85dda:	4b05      	ldr	r3, [pc, #20]	; (85df0 <WDT_Handler+0x1c>)
   85ddc:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   85dde:	2055      	movs	r0, #85	; 0x55
   85de0:	4b04      	ldr	r3, [pc, #16]	; (85df4 <WDT_Handler+0x20>)
   85de2:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   85de4:	4801      	ldr	r0, [pc, #4]	; (85dec <WDT_Handler+0x18>)
   85de6:	4b04      	ldr	r3, [pc, #16]	; (85df8 <WDT_Handler+0x24>)
   85de8:	4798      	blx	r3
}
   85dea:	bd80      	pop	{r7, pc}
   85dec:	400e1a50 	.word	0x400e1a50
   85df0:	000827e9 	.word	0x000827e9
   85df4:	00081e69 	.word	0x00081e69
   85df8:	000827c1 	.word	0x000827c1

00085dfc <my_blink>:

/**
 * \brief Toggles the state of the LED pin high/low.		
 */
void my_blink( void )
{		
   85dfc:	b590      	push	{r4, r7, lr}
   85dfe:	b085      	sub	sp, #20
   85e00:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this file. */
		
	xTaskCreate( prvTurnOnTask,						/* The function that implements the task. */
   85e02:	2301      	movs	r3, #1
   85e04:	9300      	str	r3, [sp, #0]
   85e06:	2300      	movs	r3, #0
   85e08:	9301      	str	r3, [sp, #4]
   85e0a:	2300      	movs	r3, #0
   85e0c:	9302      	str	r3, [sp, #8]
   85e0e:	2300      	movs	r3, #0
   85e10:	9303      	str	r3, [sp, #12]
   85e12:	480d      	ldr	r0, [pc, #52]	; (85e48 <my_blink+0x4c>)
   85e14:	490d      	ldr	r1, [pc, #52]	; (85e4c <my_blink+0x50>)
   85e16:	2282      	movs	r2, #130	; 0x82
   85e18:	f241 2334 	movw	r3, #4660	; 0x1234
   85e1c:	4c0c      	ldr	r4, [pc, #48]	; (85e50 <my_blink+0x54>)
   85e1e:	47a0      	blx	r4
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) TurnOn_PARAMETER, 		/* The parameter passed to the task - just to check the functionality. */
				TurnOn_TASK_PRIORITY, 				/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */

	xTaskCreate( prvTurnOffTask, 
   85e20:	2301      	movs	r3, #1
   85e22:	9300      	str	r3, [sp, #0]
   85e24:	2300      	movs	r3, #0
   85e26:	9301      	str	r3, [sp, #4]
   85e28:	2300      	movs	r3, #0
   85e2a:	9302      	str	r3, [sp, #8]
   85e2c:	2300      	movs	r3, #0
   85e2e:	9303      	str	r3, [sp, #12]
   85e30:	4808      	ldr	r0, [pc, #32]	; (85e54 <my_blink+0x58>)
   85e32:	4909      	ldr	r1, [pc, #36]	; (85e58 <my_blink+0x5c>)
   85e34:	2282      	movs	r2, #130	; 0x82
   85e36:	f245 6378 	movw	r3, #22136	; 0x5678
   85e3a:	4c05      	ldr	r4, [pc, #20]	; (85e50 <my_blink+0x54>)
   85e3c:	47a0      	blx	r4
				 "OFF", 
				 configMINIMAL_STACK_SIZE, 
				 ( void * ) TurnOff_PARAMETER, 
				 TurnOn_TASK_PRIORITY, 
				 NULL );
	return;					 
   85e3e:	bf00      	nop
}
   85e40:	3704      	adds	r7, #4
   85e42:	46bd      	mov	sp, r7
   85e44:	bd90      	pop	{r4, r7, pc}
   85e46:	bf00      	nop
   85e48:	00085e5d 	.word	0x00085e5d
   85e4c:	00086948 	.word	0x00086948
   85e50:	00083bcd 	.word	0x00083bcd
   85e54:	00085e85 	.word	0x00085e85
   85e58:	0008694c 	.word	0x0008694c

00085e5c <prvTurnOnTask>:
/**
 * \brief Sets LED pin to high.
 * @param *pvParameters:	
 */
static void prvTurnOnTask( void *pvParameters )
{
   85e5c:	b580      	push	{r7, lr}
   85e5e:	b082      	sub	sp, #8
   85e60:	af00      	add	r7, sp, #0
   85e62:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOn_PARAMETER );
   85e64:	687a      	ldr	r2, [r7, #4]
   85e66:	f241 2334 	movw	r3, #4660	; 0x1234
   85e6a:	429a      	cmp	r2, r3
   85e6c:	d002      	beq.n	85e74 <prvTurnOnTask+0x18>
   85e6e:	4b03      	ldr	r3, [pc, #12]	; (85e7c <prvTurnOnTask+0x20>)
   85e70:	4798      	blx	r3
   85e72:	e7fe      	b.n	85e72 <prvTurnOnTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_high(LED0_GPIO);
   85e74:	203b      	movs	r0, #59	; 0x3b
   85e76:	4b02      	ldr	r3, [pc, #8]	; (85e80 <prvTurnOnTask+0x24>)
   85e78:	4798      	blx	r3
	}
   85e7a:	e7fb      	b.n	85e74 <prvTurnOnTask+0x18>
   85e7c:	00082e59 	.word	0x00082e59
   85e80:	00081e01 	.word	0x00081e01

00085e84 <prvTurnOffTask>:
/**
 * \brief Sets LED pin to low.
 * @param *pvParameters:
 */
static void prvTurnOffTask( void *pvParameters )
{
   85e84:	b580      	push	{r7, lr}
   85e86:	b082      	sub	sp, #8
   85e88:	af00      	add	r7, sp, #0
   85e8a:	6078      	str	r0, [r7, #4]
	// Check the task parameter is as expected. 
	configASSERT( ( ( unsigned long ) pvParameters ) == TurnOff_PARAMETER );
   85e8c:	687a      	ldr	r2, [r7, #4]
   85e8e:	f245 6378 	movw	r3, #22136	; 0x5678
   85e92:	429a      	cmp	r2, r3
   85e94:	d002      	beq.n	85e9c <prvTurnOffTask+0x18>
   85e96:	4b03      	ldr	r3, [pc, #12]	; (85ea4 <prvTurnOffTask+0x20>)
   85e98:	4798      	blx	r3
   85e9a:	e7fe      	b.n	85e9a <prvTurnOffTask+0x16>

	/* @non-terminating@ */
	for( ;; )
	{
		gpio_set_pin_low(LED0_GPIO);
   85e9c:	203b      	movs	r0, #59	; 0x3b
   85e9e:	4b02      	ldr	r3, [pc, #8]	; (85ea8 <prvTurnOffTask+0x24>)
   85ea0:	4798      	blx	r3
	}
   85ea2:	e7fb      	b.n	85e9c <prvTurnOffTask+0x18>
   85ea4:	00082e59 	.word	0x00082e59
   85ea8:	00081e35 	.word	0x00081e35

00085eac <__aeabi_frsub>:
   85eac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   85eb0:	e002      	b.n	85eb8 <__addsf3>
   85eb2:	bf00      	nop

00085eb4 <__aeabi_fsub>:
   85eb4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00085eb8 <__addsf3>:
   85eb8:	0042      	lsls	r2, r0, #1
   85eba:	bf1f      	itttt	ne
   85ebc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   85ec0:	ea92 0f03 	teqne	r2, r3
   85ec4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   85ec8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85ecc:	d06a      	beq.n	85fa4 <__addsf3+0xec>
   85ece:	ea4f 6212 	mov.w	r2, r2, lsr #24
   85ed2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   85ed6:	bfc1      	itttt	gt
   85ed8:	18d2      	addgt	r2, r2, r3
   85eda:	4041      	eorgt	r1, r0
   85edc:	4048      	eorgt	r0, r1
   85ede:	4041      	eorgt	r1, r0
   85ee0:	bfb8      	it	lt
   85ee2:	425b      	neglt	r3, r3
   85ee4:	2b19      	cmp	r3, #25
   85ee6:	bf88      	it	hi
   85ee8:	4770      	bxhi	lr
   85eea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   85eee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85ef2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   85ef6:	bf18      	it	ne
   85ef8:	4240      	negne	r0, r0
   85efa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   85efe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   85f02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   85f06:	bf18      	it	ne
   85f08:	4249      	negne	r1, r1
   85f0a:	ea92 0f03 	teq	r2, r3
   85f0e:	d03f      	beq.n	85f90 <__addsf3+0xd8>
   85f10:	f1a2 0201 	sub.w	r2, r2, #1
   85f14:	fa41 fc03 	asr.w	ip, r1, r3
   85f18:	eb10 000c 	adds.w	r0, r0, ip
   85f1c:	f1c3 0320 	rsb	r3, r3, #32
   85f20:	fa01 f103 	lsl.w	r1, r1, r3
   85f24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85f28:	d502      	bpl.n	85f30 <__addsf3+0x78>
   85f2a:	4249      	negs	r1, r1
   85f2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   85f30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   85f34:	d313      	bcc.n	85f5e <__addsf3+0xa6>
   85f36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   85f3a:	d306      	bcc.n	85f4a <__addsf3+0x92>
   85f3c:	0840      	lsrs	r0, r0, #1
   85f3e:	ea4f 0131 	mov.w	r1, r1, rrx
   85f42:	f102 0201 	add.w	r2, r2, #1
   85f46:	2afe      	cmp	r2, #254	; 0xfe
   85f48:	d251      	bcs.n	85fee <__addsf3+0x136>
   85f4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   85f4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   85f52:	bf08      	it	eq
   85f54:	f020 0001 	biceq.w	r0, r0, #1
   85f58:	ea40 0003 	orr.w	r0, r0, r3
   85f5c:	4770      	bx	lr
   85f5e:	0049      	lsls	r1, r1, #1
   85f60:	eb40 0000 	adc.w	r0, r0, r0
   85f64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   85f68:	f1a2 0201 	sub.w	r2, r2, #1
   85f6c:	d1ed      	bne.n	85f4a <__addsf3+0x92>
   85f6e:	fab0 fc80 	clz	ip, r0
   85f72:	f1ac 0c08 	sub.w	ip, ip, #8
   85f76:	ebb2 020c 	subs.w	r2, r2, ip
   85f7a:	fa00 f00c 	lsl.w	r0, r0, ip
   85f7e:	bfaa      	itet	ge
   85f80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   85f84:	4252      	neglt	r2, r2
   85f86:	4318      	orrge	r0, r3
   85f88:	bfbc      	itt	lt
   85f8a:	40d0      	lsrlt	r0, r2
   85f8c:	4318      	orrlt	r0, r3
   85f8e:	4770      	bx	lr
   85f90:	f092 0f00 	teq	r2, #0
   85f94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   85f98:	bf06      	itte	eq
   85f9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   85f9e:	3201      	addeq	r2, #1
   85fa0:	3b01      	subne	r3, #1
   85fa2:	e7b5      	b.n	85f10 <__addsf3+0x58>
   85fa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
   85fa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   85fac:	bf18      	it	ne
   85fae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   85fb2:	d021      	beq.n	85ff8 <__addsf3+0x140>
   85fb4:	ea92 0f03 	teq	r2, r3
   85fb8:	d004      	beq.n	85fc4 <__addsf3+0x10c>
   85fba:	f092 0f00 	teq	r2, #0
   85fbe:	bf08      	it	eq
   85fc0:	4608      	moveq	r0, r1
   85fc2:	4770      	bx	lr
   85fc4:	ea90 0f01 	teq	r0, r1
   85fc8:	bf1c      	itt	ne
   85fca:	2000      	movne	r0, #0
   85fcc:	4770      	bxne	lr
   85fce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   85fd2:	d104      	bne.n	85fde <__addsf3+0x126>
   85fd4:	0040      	lsls	r0, r0, #1
   85fd6:	bf28      	it	cs
   85fd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   85fdc:	4770      	bx	lr
   85fde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   85fe2:	bf3c      	itt	cc
   85fe4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   85fe8:	4770      	bxcc	lr
   85fea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   85fee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   85ff2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   85ff6:	4770      	bx	lr
   85ff8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   85ffc:	bf16      	itet	ne
   85ffe:	4608      	movne	r0, r1
   86000:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   86004:	4601      	movne	r1, r0
   86006:	0242      	lsls	r2, r0, #9
   86008:	bf06      	itte	eq
   8600a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8600e:	ea90 0f01 	teqeq	r0, r1
   86012:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   86016:	4770      	bx	lr

00086018 <__aeabi_ui2f>:
   86018:	f04f 0300 	mov.w	r3, #0
   8601c:	e004      	b.n	86028 <__aeabi_i2f+0x8>
   8601e:	bf00      	nop

00086020 <__aeabi_i2f>:
   86020:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   86024:	bf48      	it	mi
   86026:	4240      	negmi	r0, r0
   86028:	ea5f 0c00 	movs.w	ip, r0
   8602c:	bf08      	it	eq
   8602e:	4770      	bxeq	lr
   86030:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   86034:	4601      	mov	r1, r0
   86036:	f04f 0000 	mov.w	r0, #0
   8603a:	e01c      	b.n	86076 <__aeabi_l2f+0x2a>

0008603c <__aeabi_ul2f>:
   8603c:	ea50 0201 	orrs.w	r2, r0, r1
   86040:	bf08      	it	eq
   86042:	4770      	bxeq	lr
   86044:	f04f 0300 	mov.w	r3, #0
   86048:	e00a      	b.n	86060 <__aeabi_l2f+0x14>
   8604a:	bf00      	nop

0008604c <__aeabi_l2f>:
   8604c:	ea50 0201 	orrs.w	r2, r0, r1
   86050:	bf08      	it	eq
   86052:	4770      	bxeq	lr
   86054:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   86058:	d502      	bpl.n	86060 <__aeabi_l2f+0x14>
   8605a:	4240      	negs	r0, r0
   8605c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86060:	ea5f 0c01 	movs.w	ip, r1
   86064:	bf02      	ittt	eq
   86066:	4684      	moveq	ip, r0
   86068:	4601      	moveq	r1, r0
   8606a:	2000      	moveq	r0, #0
   8606c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   86070:	bf08      	it	eq
   86072:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   86076:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   8607a:	fabc f28c 	clz	r2, ip
   8607e:	3a08      	subs	r2, #8
   86080:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   86084:	db10      	blt.n	860a8 <__aeabi_l2f+0x5c>
   86086:	fa01 fc02 	lsl.w	ip, r1, r2
   8608a:	4463      	add	r3, ip
   8608c:	fa00 fc02 	lsl.w	ip, r0, r2
   86090:	f1c2 0220 	rsb	r2, r2, #32
   86094:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86098:	fa20 f202 	lsr.w	r2, r0, r2
   8609c:	eb43 0002 	adc.w	r0, r3, r2
   860a0:	bf08      	it	eq
   860a2:	f020 0001 	biceq.w	r0, r0, #1
   860a6:	4770      	bx	lr
   860a8:	f102 0220 	add.w	r2, r2, #32
   860ac:	fa01 fc02 	lsl.w	ip, r1, r2
   860b0:	f1c2 0220 	rsb	r2, r2, #32
   860b4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   860b8:	fa21 f202 	lsr.w	r2, r1, r2
   860bc:	eb43 0002 	adc.w	r0, r3, r2
   860c0:	bf08      	it	eq
   860c2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   860c6:	4770      	bx	lr

000860c8 <__aeabi_fmul>:
   860c8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   860cc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   860d0:	bf1e      	ittt	ne
   860d2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   860d6:	ea92 0f0c 	teqne	r2, ip
   860da:	ea93 0f0c 	teqne	r3, ip
   860de:	d06f      	beq.n	861c0 <__aeabi_fmul+0xf8>
   860e0:	441a      	add	r2, r3
   860e2:	ea80 0c01 	eor.w	ip, r0, r1
   860e6:	0240      	lsls	r0, r0, #9
   860e8:	bf18      	it	ne
   860ea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   860ee:	d01e      	beq.n	8612e <__aeabi_fmul+0x66>
   860f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   860f4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   860f8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   860fc:	fba0 3101 	umull	r3, r1, r0, r1
   86100:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86104:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   86108:	bf3e      	ittt	cc
   8610a:	0049      	lslcc	r1, r1, #1
   8610c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86110:	005b      	lslcc	r3, r3, #1
   86112:	ea40 0001 	orr.w	r0, r0, r1
   86116:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   8611a:	2afd      	cmp	r2, #253	; 0xfd
   8611c:	d81d      	bhi.n	8615a <__aeabi_fmul+0x92>
   8611e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   86122:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86126:	bf08      	it	eq
   86128:	f020 0001 	biceq.w	r0, r0, #1
   8612c:	4770      	bx	lr
   8612e:	f090 0f00 	teq	r0, #0
   86132:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86136:	bf08      	it	eq
   86138:	0249      	lsleq	r1, r1, #9
   8613a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8613e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   86142:	3a7f      	subs	r2, #127	; 0x7f
   86144:	bfc2      	ittt	gt
   86146:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8614a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   8614e:	4770      	bxgt	lr
   86150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86154:	f04f 0300 	mov.w	r3, #0
   86158:	3a01      	subs	r2, #1
   8615a:	dc5d      	bgt.n	86218 <__aeabi_fmul+0x150>
   8615c:	f112 0f19 	cmn.w	r2, #25
   86160:	bfdc      	itt	le
   86162:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   86166:	4770      	bxle	lr
   86168:	f1c2 0200 	rsb	r2, r2, #0
   8616c:	0041      	lsls	r1, r0, #1
   8616e:	fa21 f102 	lsr.w	r1, r1, r2
   86172:	f1c2 0220 	rsb	r2, r2, #32
   86176:	fa00 fc02 	lsl.w	ip, r0, r2
   8617a:	ea5f 0031 	movs.w	r0, r1, rrx
   8617e:	f140 0000 	adc.w	r0, r0, #0
   86182:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   86186:	bf08      	it	eq
   86188:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8618c:	4770      	bx	lr
   8618e:	f092 0f00 	teq	r2, #0
   86192:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86196:	bf02      	ittt	eq
   86198:	0040      	lsleq	r0, r0, #1
   8619a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8619e:	3a01      	subeq	r2, #1
   861a0:	d0f9      	beq.n	86196 <__aeabi_fmul+0xce>
   861a2:	ea40 000c 	orr.w	r0, r0, ip
   861a6:	f093 0f00 	teq	r3, #0
   861aa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   861ae:	bf02      	ittt	eq
   861b0:	0049      	lsleq	r1, r1, #1
   861b2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   861b6:	3b01      	subeq	r3, #1
   861b8:	d0f9      	beq.n	861ae <__aeabi_fmul+0xe6>
   861ba:	ea41 010c 	orr.w	r1, r1, ip
   861be:	e78f      	b.n	860e0 <__aeabi_fmul+0x18>
   861c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   861c4:	ea92 0f0c 	teq	r2, ip
   861c8:	bf18      	it	ne
   861ca:	ea93 0f0c 	teqne	r3, ip
   861ce:	d00a      	beq.n	861e6 <__aeabi_fmul+0x11e>
   861d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   861d4:	bf18      	it	ne
   861d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   861da:	d1d8      	bne.n	8618e <__aeabi_fmul+0xc6>
   861dc:	ea80 0001 	eor.w	r0, r0, r1
   861e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   861e4:	4770      	bx	lr
   861e6:	f090 0f00 	teq	r0, #0
   861ea:	bf17      	itett	ne
   861ec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   861f0:	4608      	moveq	r0, r1
   861f2:	f091 0f00 	teqne	r1, #0
   861f6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   861fa:	d014      	beq.n	86226 <__aeabi_fmul+0x15e>
   861fc:	ea92 0f0c 	teq	r2, ip
   86200:	d101      	bne.n	86206 <__aeabi_fmul+0x13e>
   86202:	0242      	lsls	r2, r0, #9
   86204:	d10f      	bne.n	86226 <__aeabi_fmul+0x15e>
   86206:	ea93 0f0c 	teq	r3, ip
   8620a:	d103      	bne.n	86214 <__aeabi_fmul+0x14c>
   8620c:	024b      	lsls	r3, r1, #9
   8620e:	bf18      	it	ne
   86210:	4608      	movne	r0, r1
   86212:	d108      	bne.n	86226 <__aeabi_fmul+0x15e>
   86214:	ea80 0001 	eor.w	r0, r0, r1
   86218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8621c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86224:	4770      	bx	lr
   86226:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8622a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8622e:	4770      	bx	lr

00086230 <__aeabi_fdiv>:
   86230:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86234:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86238:	bf1e      	ittt	ne
   8623a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8623e:	ea92 0f0c 	teqne	r2, ip
   86242:	ea93 0f0c 	teqne	r3, ip
   86246:	d069      	beq.n	8631c <__aeabi_fdiv+0xec>
   86248:	eba2 0203 	sub.w	r2, r2, r3
   8624c:	ea80 0c01 	eor.w	ip, r0, r1
   86250:	0249      	lsls	r1, r1, #9
   86252:	ea4f 2040 	mov.w	r0, r0, lsl #9
   86256:	d037      	beq.n	862c8 <__aeabi_fdiv+0x98>
   86258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   8625c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   86260:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   86264:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86268:	428b      	cmp	r3, r1
   8626a:	bf38      	it	cc
   8626c:	005b      	lslcc	r3, r3, #1
   8626e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   86272:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   86276:	428b      	cmp	r3, r1
   86278:	bf24      	itt	cs
   8627a:	1a5b      	subcs	r3, r3, r1
   8627c:	ea40 000c 	orrcs.w	r0, r0, ip
   86280:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   86284:	bf24      	itt	cs
   86286:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   8628a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8628e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   86292:	bf24      	itt	cs
   86294:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   86298:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8629c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   862a0:	bf24      	itt	cs
   862a2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   862a6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   862aa:	011b      	lsls	r3, r3, #4
   862ac:	bf18      	it	ne
   862ae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   862b2:	d1e0      	bne.n	86276 <__aeabi_fdiv+0x46>
   862b4:	2afd      	cmp	r2, #253	; 0xfd
   862b6:	f63f af50 	bhi.w	8615a <__aeabi_fmul+0x92>
   862ba:	428b      	cmp	r3, r1
   862bc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   862c0:	bf08      	it	eq
   862c2:	f020 0001 	biceq.w	r0, r0, #1
   862c6:	4770      	bx	lr
   862c8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   862cc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   862d0:	327f      	adds	r2, #127	; 0x7f
   862d2:	bfc2      	ittt	gt
   862d4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   862d8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   862dc:	4770      	bxgt	lr
   862de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   862e2:	f04f 0300 	mov.w	r3, #0
   862e6:	3a01      	subs	r2, #1
   862e8:	e737      	b.n	8615a <__aeabi_fmul+0x92>
   862ea:	f092 0f00 	teq	r2, #0
   862ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   862f2:	bf02      	ittt	eq
   862f4:	0040      	lsleq	r0, r0, #1
   862f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   862fa:	3a01      	subeq	r2, #1
   862fc:	d0f9      	beq.n	862f2 <__aeabi_fdiv+0xc2>
   862fe:	ea40 000c 	orr.w	r0, r0, ip
   86302:	f093 0f00 	teq	r3, #0
   86306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8630a:	bf02      	ittt	eq
   8630c:	0049      	lsleq	r1, r1, #1
   8630e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86312:	3b01      	subeq	r3, #1
   86314:	d0f9      	beq.n	8630a <__aeabi_fdiv+0xda>
   86316:	ea41 010c 	orr.w	r1, r1, ip
   8631a:	e795      	b.n	86248 <__aeabi_fdiv+0x18>
   8631c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86320:	ea92 0f0c 	teq	r2, ip
   86324:	d108      	bne.n	86338 <__aeabi_fdiv+0x108>
   86326:	0242      	lsls	r2, r0, #9
   86328:	f47f af7d 	bne.w	86226 <__aeabi_fmul+0x15e>
   8632c:	ea93 0f0c 	teq	r3, ip
   86330:	f47f af70 	bne.w	86214 <__aeabi_fmul+0x14c>
   86334:	4608      	mov	r0, r1
   86336:	e776      	b.n	86226 <__aeabi_fmul+0x15e>
   86338:	ea93 0f0c 	teq	r3, ip
   8633c:	d104      	bne.n	86348 <__aeabi_fdiv+0x118>
   8633e:	024b      	lsls	r3, r1, #9
   86340:	f43f af4c 	beq.w	861dc <__aeabi_fmul+0x114>
   86344:	4608      	mov	r0, r1
   86346:	e76e      	b.n	86226 <__aeabi_fmul+0x15e>
   86348:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8634c:	bf18      	it	ne
   8634e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86352:	d1ca      	bne.n	862ea <__aeabi_fdiv+0xba>
   86354:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   86358:	f47f af5c 	bne.w	86214 <__aeabi_fmul+0x14c>
   8635c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   86360:	f47f af3c 	bne.w	861dc <__aeabi_fmul+0x114>
   86364:	e75f      	b.n	86226 <__aeabi_fmul+0x15e>
   86366:	bf00      	nop

00086368 <__gesf2>:
   86368:	f04f 3cff 	mov.w	ip, #4294967295
   8636c:	e006      	b.n	8637c <__cmpsf2+0x4>
   8636e:	bf00      	nop

00086370 <__lesf2>:
   86370:	f04f 0c01 	mov.w	ip, #1
   86374:	e002      	b.n	8637c <__cmpsf2+0x4>
   86376:	bf00      	nop

00086378 <__cmpsf2>:
   86378:	f04f 0c01 	mov.w	ip, #1
   8637c:	f84d cd04 	str.w	ip, [sp, #-4]!
   86380:	ea4f 0240 	mov.w	r2, r0, lsl #1
   86384:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86388:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   8638c:	bf18      	it	ne
   8638e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86392:	d011      	beq.n	863b8 <__cmpsf2+0x40>
   86394:	b001      	add	sp, #4
   86396:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   8639a:	bf18      	it	ne
   8639c:	ea90 0f01 	teqne	r0, r1
   863a0:	bf58      	it	pl
   863a2:	ebb2 0003 	subspl.w	r0, r2, r3
   863a6:	bf88      	it	hi
   863a8:	17c8      	asrhi	r0, r1, #31
   863aa:	bf38      	it	cc
   863ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   863b0:	bf18      	it	ne
   863b2:	f040 0001 	orrne.w	r0, r0, #1
   863b6:	4770      	bx	lr
   863b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   863bc:	d102      	bne.n	863c4 <__cmpsf2+0x4c>
   863be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   863c2:	d105      	bne.n	863d0 <__cmpsf2+0x58>
   863c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   863c8:	d1e4      	bne.n	86394 <__cmpsf2+0x1c>
   863ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   863ce:	d0e1      	beq.n	86394 <__cmpsf2+0x1c>
   863d0:	f85d 0b04 	ldr.w	r0, [sp], #4
   863d4:	4770      	bx	lr
   863d6:	bf00      	nop

000863d8 <__aeabi_cfrcmple>:
   863d8:	4684      	mov	ip, r0
   863da:	4608      	mov	r0, r1
   863dc:	4661      	mov	r1, ip
   863de:	e7ff      	b.n	863e0 <__aeabi_cfcmpeq>

000863e0 <__aeabi_cfcmpeq>:
   863e0:	b50f      	push	{r0, r1, r2, r3, lr}
   863e2:	f7ff ffc9 	bl	86378 <__cmpsf2>
   863e6:	2800      	cmp	r0, #0
   863e8:	bf48      	it	mi
   863ea:	f110 0f00 	cmnmi.w	r0, #0
   863ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

000863f0 <__aeabi_fcmpeq>:
   863f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   863f4:	f7ff fff4 	bl	863e0 <__aeabi_cfcmpeq>
   863f8:	bf0c      	ite	eq
   863fa:	2001      	moveq	r0, #1
   863fc:	2000      	movne	r0, #0
   863fe:	f85d fb08 	ldr.w	pc, [sp], #8
   86402:	bf00      	nop

00086404 <__aeabi_fcmplt>:
   86404:	f84d ed08 	str.w	lr, [sp, #-8]!
   86408:	f7ff ffea 	bl	863e0 <__aeabi_cfcmpeq>
   8640c:	bf34      	ite	cc
   8640e:	2001      	movcc	r0, #1
   86410:	2000      	movcs	r0, #0
   86412:	f85d fb08 	ldr.w	pc, [sp], #8
   86416:	bf00      	nop

00086418 <__aeabi_fcmple>:
   86418:	f84d ed08 	str.w	lr, [sp, #-8]!
   8641c:	f7ff ffe0 	bl	863e0 <__aeabi_cfcmpeq>
   86420:	bf94      	ite	ls
   86422:	2001      	movls	r0, #1
   86424:	2000      	movhi	r0, #0
   86426:	f85d fb08 	ldr.w	pc, [sp], #8
   8642a:	bf00      	nop

0008642c <__aeabi_fcmpge>:
   8642c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86430:	f7ff ffd2 	bl	863d8 <__aeabi_cfrcmple>
   86434:	bf94      	ite	ls
   86436:	2001      	movls	r0, #1
   86438:	2000      	movhi	r0, #0
   8643a:	f85d fb08 	ldr.w	pc, [sp], #8
   8643e:	bf00      	nop

00086440 <__aeabi_fcmpgt>:
   86440:	f84d ed08 	str.w	lr, [sp, #-8]!
   86444:	f7ff ffc8 	bl	863d8 <__aeabi_cfrcmple>
   86448:	bf34      	ite	cc
   8644a:	2001      	movcc	r0, #1
   8644c:	2000      	movcs	r0, #0
   8644e:	f85d fb08 	ldr.w	pc, [sp], #8
   86452:	bf00      	nop

00086454 <__aeabi_f2uiz>:
   86454:	0042      	lsls	r2, r0, #1
   86456:	d20e      	bcs.n	86476 <__aeabi_f2uiz+0x22>
   86458:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   8645c:	d30b      	bcc.n	86476 <__aeabi_f2uiz+0x22>
   8645e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   86462:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   86466:	d409      	bmi.n	8647c <__aeabi_f2uiz+0x28>
   86468:	ea4f 2300 	mov.w	r3, r0, lsl #8
   8646c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86470:	fa23 f002 	lsr.w	r0, r3, r2
   86474:	4770      	bx	lr
   86476:	f04f 0000 	mov.w	r0, #0
   8647a:	4770      	bx	lr
   8647c:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86480:	d101      	bne.n	86486 <__aeabi_f2uiz+0x32>
   86482:	0242      	lsls	r2, r0, #9
   86484:	d102      	bne.n	8648c <__aeabi_f2uiz+0x38>
   86486:	f04f 30ff 	mov.w	r0, #4294967295
   8648a:	4770      	bx	lr
   8648c:	f04f 0000 	mov.w	r0, #0
   86490:	4770      	bx	lr
   86492:	bf00      	nop

00086494 <__libc_init_array>:
   86494:	b570      	push	{r4, r5, r6, lr}
   86496:	4e0f      	ldr	r6, [pc, #60]	; (864d4 <__libc_init_array+0x40>)
   86498:	4d0f      	ldr	r5, [pc, #60]	; (864d8 <__libc_init_array+0x44>)
   8649a:	1b76      	subs	r6, r6, r5
   8649c:	10b6      	asrs	r6, r6, #2
   8649e:	d007      	beq.n	864b0 <__libc_init_array+0x1c>
   864a0:	3d04      	subs	r5, #4
   864a2:	2400      	movs	r4, #0
   864a4:	3401      	adds	r4, #1
   864a6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   864aa:	4798      	blx	r3
   864ac:	42a6      	cmp	r6, r4
   864ae:	d1f9      	bne.n	864a4 <__libc_init_array+0x10>
   864b0:	4e0a      	ldr	r6, [pc, #40]	; (864dc <__libc_init_array+0x48>)
   864b2:	4d0b      	ldr	r5, [pc, #44]	; (864e0 <__libc_init_array+0x4c>)
   864b4:	f000 fa50 	bl	86958 <_init>
   864b8:	1b76      	subs	r6, r6, r5
   864ba:	10b6      	asrs	r6, r6, #2
   864bc:	d008      	beq.n	864d0 <__libc_init_array+0x3c>
   864be:	3d04      	subs	r5, #4
   864c0:	2400      	movs	r4, #0
   864c2:	3401      	adds	r4, #1
   864c4:	f855 3f04 	ldr.w	r3, [r5, #4]!
   864c8:	4798      	blx	r3
   864ca:	42a6      	cmp	r6, r4
   864cc:	d1f9      	bne.n	864c2 <__libc_init_array+0x2e>
   864ce:	bd70      	pop	{r4, r5, r6, pc}
   864d0:	bd70      	pop	{r4, r5, r6, pc}
   864d2:	bf00      	nop
   864d4:	00086964 	.word	0x00086964
   864d8:	00086964 	.word	0x00086964
   864dc:	0008696c 	.word	0x0008696c
   864e0:	00086964 	.word	0x00086964

000864e4 <memcmp>:
   864e4:	2a03      	cmp	r2, #3
   864e6:	b470      	push	{r4, r5, r6}
   864e8:	d928      	bls.n	8653c <memcmp+0x58>
   864ea:	ea40 0301 	orr.w	r3, r0, r1
   864ee:	079b      	lsls	r3, r3, #30
   864f0:	d013      	beq.n	8651a <memcmp+0x36>
   864f2:	7805      	ldrb	r5, [r0, #0]
   864f4:	780c      	ldrb	r4, [r1, #0]
   864f6:	42a5      	cmp	r5, r4
   864f8:	d124      	bne.n	86544 <memcmp+0x60>
   864fa:	3a01      	subs	r2, #1
   864fc:	2300      	movs	r3, #0
   864fe:	e005      	b.n	8650c <memcmp+0x28>
   86500:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   86504:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   86508:	42a5      	cmp	r5, r4
   8650a:	d11b      	bne.n	86544 <memcmp+0x60>
   8650c:	4293      	cmp	r3, r2
   8650e:	f103 0301 	add.w	r3, r3, #1
   86512:	d1f5      	bne.n	86500 <memcmp+0x1c>
   86514:	2000      	movs	r0, #0
   86516:	bc70      	pop	{r4, r5, r6}
   86518:	4770      	bx	lr
   8651a:	460c      	mov	r4, r1
   8651c:	4603      	mov	r3, r0
   8651e:	6825      	ldr	r5, [r4, #0]
   86520:	681e      	ldr	r6, [r3, #0]
   86522:	4621      	mov	r1, r4
   86524:	42ae      	cmp	r6, r5
   86526:	4618      	mov	r0, r3
   86528:	f104 0404 	add.w	r4, r4, #4
   8652c:	f103 0304 	add.w	r3, r3, #4
   86530:	d104      	bne.n	8653c <memcmp+0x58>
   86532:	3a04      	subs	r2, #4
   86534:	2a03      	cmp	r2, #3
   86536:	4618      	mov	r0, r3
   86538:	4621      	mov	r1, r4
   8653a:	d8f0      	bhi.n	8651e <memcmp+0x3a>
   8653c:	2a00      	cmp	r2, #0
   8653e:	d1d8      	bne.n	864f2 <memcmp+0xe>
   86540:	4610      	mov	r0, r2
   86542:	e7e8      	b.n	86516 <memcmp+0x32>
   86544:	1b28      	subs	r0, r5, r4
   86546:	bc70      	pop	{r4, r5, r6}
   86548:	4770      	bx	lr
   8654a:	bf00      	nop

0008654c <memcpy>:
   8654c:	4684      	mov	ip, r0
   8654e:	ea41 0300 	orr.w	r3, r1, r0
   86552:	f013 0303 	ands.w	r3, r3, #3
   86556:	d149      	bne.n	865ec <memcpy+0xa0>
   86558:	3a40      	subs	r2, #64	; 0x40
   8655a:	d323      	bcc.n	865a4 <memcpy+0x58>
   8655c:	680b      	ldr	r3, [r1, #0]
   8655e:	6003      	str	r3, [r0, #0]
   86560:	684b      	ldr	r3, [r1, #4]
   86562:	6043      	str	r3, [r0, #4]
   86564:	688b      	ldr	r3, [r1, #8]
   86566:	6083      	str	r3, [r0, #8]
   86568:	68cb      	ldr	r3, [r1, #12]
   8656a:	60c3      	str	r3, [r0, #12]
   8656c:	690b      	ldr	r3, [r1, #16]
   8656e:	6103      	str	r3, [r0, #16]
   86570:	694b      	ldr	r3, [r1, #20]
   86572:	6143      	str	r3, [r0, #20]
   86574:	698b      	ldr	r3, [r1, #24]
   86576:	6183      	str	r3, [r0, #24]
   86578:	69cb      	ldr	r3, [r1, #28]
   8657a:	61c3      	str	r3, [r0, #28]
   8657c:	6a0b      	ldr	r3, [r1, #32]
   8657e:	6203      	str	r3, [r0, #32]
   86580:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86582:	6243      	str	r3, [r0, #36]	; 0x24
   86584:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86586:	6283      	str	r3, [r0, #40]	; 0x28
   86588:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8658a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8658c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8658e:	6303      	str	r3, [r0, #48]	; 0x30
   86590:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86592:	6343      	str	r3, [r0, #52]	; 0x34
   86594:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86596:	6383      	str	r3, [r0, #56]	; 0x38
   86598:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8659a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8659c:	3040      	adds	r0, #64	; 0x40
   8659e:	3140      	adds	r1, #64	; 0x40
   865a0:	3a40      	subs	r2, #64	; 0x40
   865a2:	d2db      	bcs.n	8655c <memcpy+0x10>
   865a4:	3230      	adds	r2, #48	; 0x30
   865a6:	d30b      	bcc.n	865c0 <memcpy+0x74>
   865a8:	680b      	ldr	r3, [r1, #0]
   865aa:	6003      	str	r3, [r0, #0]
   865ac:	684b      	ldr	r3, [r1, #4]
   865ae:	6043      	str	r3, [r0, #4]
   865b0:	688b      	ldr	r3, [r1, #8]
   865b2:	6083      	str	r3, [r0, #8]
   865b4:	68cb      	ldr	r3, [r1, #12]
   865b6:	60c3      	str	r3, [r0, #12]
   865b8:	3010      	adds	r0, #16
   865ba:	3110      	adds	r1, #16
   865bc:	3a10      	subs	r2, #16
   865be:	d2f3      	bcs.n	865a8 <memcpy+0x5c>
   865c0:	320c      	adds	r2, #12
   865c2:	d305      	bcc.n	865d0 <memcpy+0x84>
   865c4:	f851 3b04 	ldr.w	r3, [r1], #4
   865c8:	f840 3b04 	str.w	r3, [r0], #4
   865cc:	3a04      	subs	r2, #4
   865ce:	d2f9      	bcs.n	865c4 <memcpy+0x78>
   865d0:	3204      	adds	r2, #4
   865d2:	d008      	beq.n	865e6 <memcpy+0x9a>
   865d4:	07d2      	lsls	r2, r2, #31
   865d6:	bf1c      	itt	ne
   865d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   865dc:	f800 3b01 	strbne.w	r3, [r0], #1
   865e0:	d301      	bcc.n	865e6 <memcpy+0x9a>
   865e2:	880b      	ldrh	r3, [r1, #0]
   865e4:	8003      	strh	r3, [r0, #0]
   865e6:	4660      	mov	r0, ip
   865e8:	4770      	bx	lr
   865ea:	bf00      	nop
   865ec:	2a08      	cmp	r2, #8
   865ee:	d313      	bcc.n	86618 <memcpy+0xcc>
   865f0:	078b      	lsls	r3, r1, #30
   865f2:	d0b1      	beq.n	86558 <memcpy+0xc>
   865f4:	f010 0303 	ands.w	r3, r0, #3
   865f8:	d0ae      	beq.n	86558 <memcpy+0xc>
   865fa:	f1c3 0304 	rsb	r3, r3, #4
   865fe:	1ad2      	subs	r2, r2, r3
   86600:	07db      	lsls	r3, r3, #31
   86602:	bf1c      	itt	ne
   86604:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86608:	f800 3b01 	strbne.w	r3, [r0], #1
   8660c:	d3a4      	bcc.n	86558 <memcpy+0xc>
   8660e:	f831 3b02 	ldrh.w	r3, [r1], #2
   86612:	f820 3b02 	strh.w	r3, [r0], #2
   86616:	e79f      	b.n	86558 <memcpy+0xc>
   86618:	3a04      	subs	r2, #4
   8661a:	d3d9      	bcc.n	865d0 <memcpy+0x84>
   8661c:	3a01      	subs	r2, #1
   8661e:	f811 3b01 	ldrb.w	r3, [r1], #1
   86622:	f800 3b01 	strb.w	r3, [r0], #1
   86626:	d2f9      	bcs.n	8661c <memcpy+0xd0>
   86628:	780b      	ldrb	r3, [r1, #0]
   8662a:	7003      	strb	r3, [r0, #0]
   8662c:	784b      	ldrb	r3, [r1, #1]
   8662e:	7043      	strb	r3, [r0, #1]
   86630:	788b      	ldrb	r3, [r1, #2]
   86632:	7083      	strb	r3, [r0, #2]
   86634:	4660      	mov	r0, ip
   86636:	4770      	bx	lr

00086638 <memset>:
   86638:	b4f0      	push	{r4, r5, r6, r7}
   8663a:	0784      	lsls	r4, r0, #30
   8663c:	d043      	beq.n	866c6 <memset+0x8e>
   8663e:	1e54      	subs	r4, r2, #1
   86640:	2a00      	cmp	r2, #0
   86642:	d03e      	beq.n	866c2 <memset+0x8a>
   86644:	b2cd      	uxtb	r5, r1
   86646:	4603      	mov	r3, r0
   86648:	e003      	b.n	86652 <memset+0x1a>
   8664a:	1e62      	subs	r2, r4, #1
   8664c:	2c00      	cmp	r4, #0
   8664e:	d038      	beq.n	866c2 <memset+0x8a>
   86650:	4614      	mov	r4, r2
   86652:	f803 5b01 	strb.w	r5, [r3], #1
   86656:	079a      	lsls	r2, r3, #30
   86658:	d1f7      	bne.n	8664a <memset+0x12>
   8665a:	2c03      	cmp	r4, #3
   8665c:	d92a      	bls.n	866b4 <memset+0x7c>
   8665e:	b2cd      	uxtb	r5, r1
   86660:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86664:	2c0f      	cmp	r4, #15
   86666:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8666a:	d915      	bls.n	86698 <memset+0x60>
   8666c:	f1a4 0710 	sub.w	r7, r4, #16
   86670:	093f      	lsrs	r7, r7, #4
   86672:	f103 0610 	add.w	r6, r3, #16
   86676:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   8667a:	461a      	mov	r2, r3
   8667c:	6015      	str	r5, [r2, #0]
   8667e:	6055      	str	r5, [r2, #4]
   86680:	6095      	str	r5, [r2, #8]
   86682:	60d5      	str	r5, [r2, #12]
   86684:	3210      	adds	r2, #16
   86686:	42b2      	cmp	r2, r6
   86688:	d1f8      	bne.n	8667c <memset+0x44>
   8668a:	f004 040f 	and.w	r4, r4, #15
   8668e:	3701      	adds	r7, #1
   86690:	2c03      	cmp	r4, #3
   86692:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   86696:	d90d      	bls.n	866b4 <memset+0x7c>
   86698:	461e      	mov	r6, r3
   8669a:	4622      	mov	r2, r4
   8669c:	3a04      	subs	r2, #4
   8669e:	2a03      	cmp	r2, #3
   866a0:	f846 5b04 	str.w	r5, [r6], #4
   866a4:	d8fa      	bhi.n	8669c <memset+0x64>
   866a6:	1f22      	subs	r2, r4, #4
   866a8:	f022 0203 	bic.w	r2, r2, #3
   866ac:	3204      	adds	r2, #4
   866ae:	4413      	add	r3, r2
   866b0:	f004 0403 	and.w	r4, r4, #3
   866b4:	b12c      	cbz	r4, 866c2 <memset+0x8a>
   866b6:	b2c9      	uxtb	r1, r1
   866b8:	441c      	add	r4, r3
   866ba:	f803 1b01 	strb.w	r1, [r3], #1
   866be:	42a3      	cmp	r3, r4
   866c0:	d1fb      	bne.n	866ba <memset+0x82>
   866c2:	bcf0      	pop	{r4, r5, r6, r7}
   866c4:	4770      	bx	lr
   866c6:	4614      	mov	r4, r2
   866c8:	4603      	mov	r3, r0
   866ca:	e7c6      	b.n	8665a <memset+0x22>

000866cc <register_fini>:
   866cc:	4b02      	ldr	r3, [pc, #8]	; (866d8 <register_fini+0xc>)
   866ce:	b113      	cbz	r3, 866d6 <register_fini+0xa>
   866d0:	4802      	ldr	r0, [pc, #8]	; (866dc <register_fini+0x10>)
   866d2:	f000 b805 	b.w	866e0 <atexit>
   866d6:	4770      	bx	lr
   866d8:	00000000 	.word	0x00000000
   866dc:	000866ed 	.word	0x000866ed

000866e0 <atexit>:
   866e0:	4601      	mov	r1, r0
   866e2:	2000      	movs	r0, #0
   866e4:	4602      	mov	r2, r0
   866e6:	4603      	mov	r3, r0
   866e8:	f000 b818 	b.w	8671c <__register_exitproc>

000866ec <__libc_fini_array>:
   866ec:	b538      	push	{r3, r4, r5, lr}
   866ee:	4d09      	ldr	r5, [pc, #36]	; (86714 <__libc_fini_array+0x28>)
   866f0:	4c09      	ldr	r4, [pc, #36]	; (86718 <__libc_fini_array+0x2c>)
   866f2:	1b64      	subs	r4, r4, r5
   866f4:	10a4      	asrs	r4, r4, #2
   866f6:	bf18      	it	ne
   866f8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   866fc:	d005      	beq.n	8670a <__libc_fini_array+0x1e>
   866fe:	3c01      	subs	r4, #1
   86700:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   86704:	4798      	blx	r3
   86706:	2c00      	cmp	r4, #0
   86708:	d1f9      	bne.n	866fe <__libc_fini_array+0x12>
   8670a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8670e:	f000 b92d 	b.w	8696c <_fini>
   86712:	bf00      	nop
   86714:	00086978 	.word	0x00086978
   86718:	0008697c 	.word	0x0008697c

0008671c <__register_exitproc>:
   8671c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8671e:	4c27      	ldr	r4, [pc, #156]	; (867bc <__register_exitproc+0xa0>)
   86720:	b085      	sub	sp, #20
   86722:	6826      	ldr	r6, [r4, #0]
   86724:	4607      	mov	r7, r0
   86726:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8672a:	2c00      	cmp	r4, #0
   8672c:	d040      	beq.n	867b0 <__register_exitproc+0x94>
   8672e:	6865      	ldr	r5, [r4, #4]
   86730:	2d1f      	cmp	r5, #31
   86732:	dd1e      	ble.n	86772 <__register_exitproc+0x56>
   86734:	4822      	ldr	r0, [pc, #136]	; (867c0 <__register_exitproc+0xa4>)
   86736:	b918      	cbnz	r0, 86740 <__register_exitproc+0x24>
   86738:	f04f 30ff 	mov.w	r0, #4294967295
   8673c:	b005      	add	sp, #20
   8673e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86740:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86744:	9103      	str	r1, [sp, #12]
   86746:	9202      	str	r2, [sp, #8]
   86748:	9301      	str	r3, [sp, #4]
   8674a:	f3af 8000 	nop.w
   8674e:	9903      	ldr	r1, [sp, #12]
   86750:	4604      	mov	r4, r0
   86752:	9a02      	ldr	r2, [sp, #8]
   86754:	9b01      	ldr	r3, [sp, #4]
   86756:	2800      	cmp	r0, #0
   86758:	d0ee      	beq.n	86738 <__register_exitproc+0x1c>
   8675a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8675e:	2000      	movs	r0, #0
   86760:	6025      	str	r5, [r4, #0]
   86762:	6060      	str	r0, [r4, #4]
   86764:	4605      	mov	r5, r0
   86766:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8676a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8676e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86772:	b93f      	cbnz	r7, 86784 <__register_exitproc+0x68>
   86774:	1c6b      	adds	r3, r5, #1
   86776:	2000      	movs	r0, #0
   86778:	3502      	adds	r5, #2
   8677a:	6063      	str	r3, [r4, #4]
   8677c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86780:	b005      	add	sp, #20
   86782:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86784:	2601      	movs	r6, #1
   86786:	40ae      	lsls	r6, r5
   86788:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   8678c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86790:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86794:	2f02      	cmp	r7, #2
   86796:	ea42 0206 	orr.w	r2, r2, r6
   8679a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8679e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   867a2:	d1e7      	bne.n	86774 <__register_exitproc+0x58>
   867a4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   867a8:	431e      	orrs	r6, r3
   867aa:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   867ae:	e7e1      	b.n	86774 <__register_exitproc+0x58>
   867b0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   867b4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   867b8:	e7b9      	b.n	8672e <__register_exitproc+0x12>
   867ba:	bf00      	nop
   867bc:	00086954 	.word	0x00086954
   867c0:	00000000 	.word	0x00000000
   867c4:	00004e4f 	.word	0x00004e4f
   867c8:	00004e4f 	.word	0x00004e4f
   867cc:	00004e4f 	.word	0x00004e4f

000867d0 <ulLED>:
   867d0:	00000057 00000056 0000003b 00000055     W...V...;...U...
   867e0:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   867f0:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   86800:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   86810:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   86820:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   86830:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   86840:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   86850:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   86860:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   86870:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86880:	0001c200 000000c0 00000800 00000000     ................
	...
   86898:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   868a8:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

000868b8 <can_bit_time>:
   868b8:	02020308 02094b03 43020303 0303030a     .....K.....C....
   868c8:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   868d8:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   868e8:	05050510 06114504 47040505 06060512     .....E.....G....
   868f8:	06134304 44040606 06060714 08154604     .C.....D.....F..
   86908:	47040606 07070716 08174404 46040708     ...G.....D.....F
   86918:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   86928:	00000000                                ....

0008692c <ucExpectedStackBytes.5295>:
   8692c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   8693c:	a5a5a5a5 20726d54 00637653 00004e4f     ....Tmr Svc.ON..
   8694c:	0046464f 00000043                       OFF.C...

00086954 <_global_impure_ptr>:
   86954:	20070010                                ... 

00086958 <_init>:
   86958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8695a:	bf00      	nop
   8695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8695e:	bc08      	pop	{r3}
   86960:	469e      	mov	lr, r3
   86962:	4770      	bx	lr

00086964 <__init_array_start>:
   86964:	000866cd 	.word	0x000866cd

00086968 <__frame_dummy_init_array_entry>:
   86968:	00080119                                ....

0008696c <_fini>:
   8696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8696e:	bf00      	nop
   86970:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86972:	bc08      	pop	{r3}
   86974:	469e      	mov	lr, r3
   86976:	4770      	bx	lr

00086978 <__fini_array_start>:
   86978:	000800f5 	.word	0x000800f5
