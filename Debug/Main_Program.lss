
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000077a0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000877a0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000c6fc  20070438  00087bd8  00010438  2**2
                  ALLOC
  3 .stack        00002004  2007cb34  000942d4  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000febf  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c6a  00000000  00000000  0002037b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006858  00000000  00000000  00022fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001218  00000000  00000000  0002983d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001058  00000000  00000000  0002aa55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001ae3d  00000000  00000000  0002baad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001538f  00000000  00000000  000468ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00068a05  00000000  00000000  0005bc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003b58  00000000  00000000  000c4680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007eb38 	.word	0x2007eb38
   80004:	00083855 	.word	0x00083855
   80008:	0008384d 	.word	0x0008384d
   8000c:	0008384d 	.word	0x0008384d
   80010:	0008384d 	.word	0x0008384d
   80014:	0008384d 	.word	0x0008384d
   80018:	0008384d 	.word	0x0008384d
	...
   8002c:	00083cfd 	.word	0x00083cfd
   80030:	0008384d 	.word	0x0008384d
   80034:	00000000 	.word	0x00000000
   80038:	00083ec1 	.word	0x00083ec1
   8003c:	00083f05 	.word	0x00083f05
   80040:	0008384d 	.word	0x0008384d
   80044:	0008384d 	.word	0x0008384d
   80048:	0008384d 	.word	0x0008384d
   8004c:	0008384d 	.word	0x0008384d
   80050:	00086cb9 	.word	0x00086cb9
   80054:	0008384d 	.word	0x0008384d
   80058:	0008384d 	.word	0x0008384d
   8005c:	0008384d 	.word	0x0008384d
   80060:	0008384d 	.word	0x0008384d
   80064:	0008384d 	.word	0x0008384d
   80068:	00000000 	.word	0x00000000
   8006c:	000831d5 	.word	0x000831d5
   80070:	000831ed 	.word	0x000831ed
   80074:	00083205 	.word	0x00083205
   80078:	0008321d 	.word	0x0008321d
	...
   80084:	00081c61 	.word	0x00081c61
   80088:	0008384d 	.word	0x0008384d
   8008c:	0008384d 	.word	0x0008384d
   80090:	0008384d 	.word	0x0008384d
   80094:	0008384d 	.word	0x0008384d
   80098:	0008384d 	.word	0x0008384d
   8009c:	0008384d 	.word	0x0008384d
   800a0:	00081669 	.word	0x00081669
   800a4:	00000000 	.word	0x00000000
   800a8:	0008384d 	.word	0x0008384d
   800ac:	0008384d 	.word	0x0008384d
   800b0:	0008384d 	.word	0x0008384d
   800b4:	0008384d 	.word	0x0008384d
   800b8:	0008384d 	.word	0x0008384d
   800bc:	0008384d 	.word	0x0008384d
   800c0:	0008384d 	.word	0x0008384d
   800c4:	0008384d 	.word	0x0008384d
   800c8:	0008384d 	.word	0x0008384d
   800cc:	0008384d 	.word	0x0008384d
   800d0:	0008384d 	.word	0x0008384d
   800d4:	0008384d 	.word	0x0008384d
   800d8:	0008384d 	.word	0x0008384d
   800dc:	0008384d 	.word	0x0008384d
   800e0:	0008384d 	.word	0x0008384d
   800e4:	0008384d 	.word	0x0008384d
   800e8:	0008384d 	.word	0x0008384d
   800ec:	00086299 	.word	0x00086299
   800f0:	000861a9 	.word	0x000861a9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	000877a0 	.word	0x000877a0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000877a0 	.word	0x000877a0
   8013c:	2007043c 	.word	0x2007043c
   80140:	000877a0 	.word	0x000877a0
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	000834a1 	.word	0x000834a1

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80280:	b580      	push	{r7, lr}
   80282:	b084      	sub	sp, #16
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
   80288:	8079      	strh	r1, [r7, #2]
   8028a:	707a      	strb	r2, [r7, #1]
   8028c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8028e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80292:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80294:	e006      	b.n	802a4 <spi_write+0x24>
		if (!timeout--) {
   80296:	68fb      	ldr	r3, [r7, #12]
   80298:	1e5a      	subs	r2, r3, #1
   8029a:	60fa      	str	r2, [r7, #12]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d101      	bne.n	802a4 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   802a0:	2301      	movs	r3, #1
   802a2:	e020      	b.n	802e6 <spi_write+0x66>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	691b      	ldr	r3, [r3, #16]
   802a8:	f003 0302 	and.w	r3, r3, #2
   802ac:	2b00      	cmp	r3, #0
   802ae:	d0f2      	beq.n	80296 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) 
   802b0:	6878      	ldr	r0, [r7, #4]
   802b2:	4b0f      	ldr	r3, [pc, #60]	; (802f0 <spi_write+0x70>)
   802b4:	4798      	blx	r3
   802b6:	4603      	mov	r3, r0
   802b8:	2b00      	cmp	r3, #0
   802ba:	d00e      	beq.n	802da <spi_write+0x5a>
		{
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   802bc:	887a      	ldrh	r2, [r7, #2]
   802be:	787b      	ldrb	r3, [r7, #1]
   802c0:	041b      	lsls	r3, r3, #16
   802c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   802c6:	4313      	orrs	r3, r2
   802c8:	60bb      	str	r3, [r7, #8]
		if (uc_last) 
   802ca:	783b      	ldrb	r3, [r7, #0]
   802cc:	2b00      	cmp	r3, #0
   802ce:	d006      	beq.n	802de <spi_write+0x5e>
		{
			value |= SPI_TDR_LASTXFER;
   802d0:	68bb      	ldr	r3, [r7, #8]
   802d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802d6:	60bb      	str	r3, [r7, #8]
   802d8:	e001      	b.n	802de <spi_write+0x5e>
		}
	}	
	else 
	{
		value = SPI_TDR_TD(us_data);
   802da:	887b      	ldrh	r3, [r7, #2]
   802dc:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802de:	687b      	ldr	r3, [r7, #4]
   802e0:	68ba      	ldr	r2, [r7, #8]
   802e2:	60da      	str	r2, [r3, #12]
	
	//pio_toggle_pin(LED0_GPIO);

	return SPI_OK;
   802e4:	2300      	movs	r3, #0
   802e6:	b25b      	sxtb	r3, r3
}
   802e8:	4618      	mov	r0, r3
   802ea:	3710      	adds	r7, #16
   802ec:	46bd      	mov	sp, r7
   802ee:	bd80      	pop	{r7, pc}
   802f0:	00080149 	.word	0x00080149

000802f4 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   802f4:	b480      	push	{r7}
   802f6:	b085      	sub	sp, #20
   802f8:	af00      	add	r7, sp, #0
   802fa:	60f8      	str	r0, [r7, #12]
   802fc:	60b9      	str	r1, [r7, #8]
   802fe:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   80300:	687b      	ldr	r3, [r7, #4]
   80302:	2b00      	cmp	r3, #0
   80304:	d00c      	beq.n	80320 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80306:	68fb      	ldr	r3, [r7, #12]
   80308:	68ba      	ldr	r2, [r7, #8]
   8030a:	320c      	adds	r2, #12
   8030c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80310:	f043 0101 	orr.w	r1, r3, #1
   80314:	68fb      	ldr	r3, [r7, #12]
   80316:	68ba      	ldr	r2, [r7, #8]
   80318:	320c      	adds	r2, #12
   8031a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8031e:	e00b      	b.n	80338 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   80320:	68fb      	ldr	r3, [r7, #12]
   80322:	68ba      	ldr	r2, [r7, #8]
   80324:	320c      	adds	r2, #12
   80326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8032a:	f023 0101 	bic.w	r1, r3, #1
   8032e:	68fb      	ldr	r3, [r7, #12]
   80330:	68ba      	ldr	r2, [r7, #8]
   80332:	320c      	adds	r2, #12
   80334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80338:	3714      	adds	r7, #20
   8033a:	46bd      	mov	sp, r7
   8033c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80340:	4770      	bx	lr
   80342:	bf00      	nop

00080344 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80344:	b480      	push	{r7}
   80346:	b085      	sub	sp, #20
   80348:	af00      	add	r7, sp, #0
   8034a:	60f8      	str	r0, [r7, #12]
   8034c:	60b9      	str	r1, [r7, #8]
   8034e:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   80350:	687b      	ldr	r3, [r7, #4]
   80352:	2b00      	cmp	r3, #0
   80354:	d00c      	beq.n	80370 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80356:	68fb      	ldr	r3, [r7, #12]
   80358:	68ba      	ldr	r2, [r7, #8]
   8035a:	320c      	adds	r2, #12
   8035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80360:	f043 0102 	orr.w	r1, r3, #2
   80364:	68fb      	ldr	r3, [r7, #12]
   80366:	68ba      	ldr	r2, [r7, #8]
   80368:	320c      	adds	r2, #12
   8036a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8036e:	e00b      	b.n	80388 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   80370:	68fb      	ldr	r3, [r7, #12]
   80372:	68ba      	ldr	r2, [r7, #8]
   80374:	320c      	adds	r2, #12
   80376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8037a:	f023 0102 	bic.w	r1, r3, #2
   8037e:	68fb      	ldr	r3, [r7, #12]
   80380:	68ba      	ldr	r2, [r7, #8]
   80382:	320c      	adds	r2, #12
   80384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80388:	3714      	adds	r7, #20
   8038a:	46bd      	mov	sp, r7
   8038c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80390:	4770      	bx	lr
   80392:	bf00      	nop

00080394 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   80394:	b480      	push	{r7}
   80396:	b085      	sub	sp, #20
   80398:	af00      	add	r7, sp, #0
   8039a:	60f8      	str	r0, [r7, #12]
   8039c:	60b9      	str	r1, [r7, #8]
   8039e:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   803a0:	687b      	ldr	r3, [r7, #4]
   803a2:	2b04      	cmp	r3, #4
   803a4:	d118      	bne.n	803d8 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803a6:	68fb      	ldr	r3, [r7, #12]
   803a8:	68ba      	ldr	r2, [r7, #8]
   803aa:	320c      	adds	r2, #12
   803ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803b0:	f023 0108 	bic.w	r1, r3, #8
   803b4:	68fb      	ldr	r3, [r7, #12]
   803b6:	68ba      	ldr	r2, [r7, #8]
   803b8:	320c      	adds	r2, #12
   803ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   803be:	68fb      	ldr	r3, [r7, #12]
   803c0:	68ba      	ldr	r2, [r7, #8]
   803c2:	320c      	adds	r2, #12
   803c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803c8:	f043 0104 	orr.w	r1, r3, #4
   803cc:	68fb      	ldr	r3, [r7, #12]
   803ce:	68ba      	ldr	r2, [r7, #8]
   803d0:	320c      	adds	r2, #12
   803d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   803d6:	e02a      	b.n	8042e <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	2b00      	cmp	r3, #0
   803dc:	d118      	bne.n	80410 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803de:	68fb      	ldr	r3, [r7, #12]
   803e0:	68ba      	ldr	r2, [r7, #8]
   803e2:	320c      	adds	r2, #12
   803e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803e8:	f023 0108 	bic.w	r1, r3, #8
   803ec:	68fb      	ldr	r3, [r7, #12]
   803ee:	68ba      	ldr	r2, [r7, #8]
   803f0:	320c      	adds	r2, #12
   803f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   803f6:	68fb      	ldr	r3, [r7, #12]
   803f8:	68ba      	ldr	r2, [r7, #8]
   803fa:	320c      	adds	r2, #12
   803fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80400:	f023 0104 	bic.w	r1, r3, #4
   80404:	68fb      	ldr	r3, [r7, #12]
   80406:	68ba      	ldr	r2, [r7, #8]
   80408:	320c      	adds	r2, #12
   8040a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8040e:	e00e      	b.n	8042e <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   80410:	687b      	ldr	r3, [r7, #4]
   80412:	2b08      	cmp	r3, #8
   80414:	d10b      	bne.n	8042e <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80416:	68fb      	ldr	r3, [r7, #12]
   80418:	68ba      	ldr	r2, [r7, #8]
   8041a:	320c      	adds	r2, #12
   8041c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80420:	f043 0108 	orr.w	r1, r3, #8
   80424:	68fb      	ldr	r3, [r7, #12]
   80426:	68ba      	ldr	r2, [r7, #8]
   80428:	320c      	adds	r2, #12
   8042a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   8042e:	3714      	adds	r7, #20
   80430:	46bd      	mov	sp, r7
   80432:	f85d 7b04 	ldr.w	r7, [sp], #4
   80436:	4770      	bx	lr

00080438 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80438:	b480      	push	{r7}
   8043a:	b085      	sub	sp, #20
   8043c:	af00      	add	r7, sp, #0
   8043e:	60f8      	str	r0, [r7, #12]
   80440:	60b9      	str	r1, [r7, #8]
   80442:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80444:	68fb      	ldr	r3, [r7, #12]
   80446:	68ba      	ldr	r2, [r7, #8]
   80448:	320c      	adds	r2, #12
   8044a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8044e:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   80452:	68fb      	ldr	r3, [r7, #12]
   80454:	68ba      	ldr	r2, [r7, #8]
   80456:	320c      	adds	r2, #12
   80458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   8045c:	68fb      	ldr	r3, [r7, #12]
   8045e:	68ba      	ldr	r2, [r7, #8]
   80460:	320c      	adds	r2, #12
   80462:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80466:	687b      	ldr	r3, [r7, #4]
   80468:	ea42 0103 	orr.w	r1, r2, r3
   8046c:	68fb      	ldr	r3, [r7, #12]
   8046e:	68ba      	ldr	r2, [r7, #8]
   80470:	320c      	adds	r2, #12
   80472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80476:	3714      	adds	r7, #20
   80478:	46bd      	mov	sp, r7
   8047a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8047e:	4770      	bx	lr

00080480 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   80480:	b480      	push	{r7}
   80482:	b085      	sub	sp, #20
   80484:	af00      	add	r7, sp, #0
   80486:	6078      	str	r0, [r7, #4]
   80488:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   8048a:	683a      	ldr	r2, [r7, #0]
   8048c:	687b      	ldr	r3, [r7, #4]
   8048e:	4413      	add	r3, r2
   80490:	1e5a      	subs	r2, r3, #1
   80492:	687b      	ldr	r3, [r7, #4]
   80494:	fbb2 f3f3 	udiv	r3, r2, r3
   80498:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   8049a:	68fb      	ldr	r3, [r7, #12]
   8049c:	2b00      	cmp	r3, #0
   8049e:	dd02      	ble.n	804a6 <spi_calc_baudrate_div+0x26>
   804a0:	68fb      	ldr	r3, [r7, #12]
   804a2:	2bff      	cmp	r3, #255	; 0xff
   804a4:	dd02      	ble.n	804ac <spi_calc_baudrate_div+0x2c>
		return -1;
   804a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   804aa:	e001      	b.n	804b0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   804ac:	68fb      	ldr	r3, [r7, #12]
   804ae:	b29b      	uxth	r3, r3
   804b0:	b21b      	sxth	r3, r3
}
   804b2:	4618      	mov	r0, r3
   804b4:	3714      	adds	r7, #20
   804b6:	46bd      	mov	sp, r7
   804b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   804bc:	4770      	bx	lr
   804be:	bf00      	nop

000804c0 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   804c0:	b480      	push	{r7}
   804c2:	b085      	sub	sp, #20
   804c4:	af00      	add	r7, sp, #0
   804c6:	60f8      	str	r0, [r7, #12]
   804c8:	60b9      	str	r1, [r7, #8]
   804ca:	4613      	mov	r3, r2
   804cc:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   804ce:	68fb      	ldr	r3, [r7, #12]
   804d0:	68ba      	ldr	r2, [r7, #8]
   804d2:	320c      	adds	r2, #12
   804d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804d8:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   804dc:	68fb      	ldr	r3, [r7, #12]
   804de:	68ba      	ldr	r2, [r7, #8]
   804e0:	320c      	adds	r2, #12
   804e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	68ba      	ldr	r2, [r7, #8]
   804ea:	320c      	adds	r2, #12
   804ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804f0:	79fb      	ldrb	r3, [r7, #7]
   804f2:	021b      	lsls	r3, r3, #8
   804f4:	b29b      	uxth	r3, r3
   804f6:	ea42 0103 	orr.w	r1, r2, r3
   804fa:	68fb      	ldr	r3, [r7, #12]
   804fc:	68ba      	ldr	r2, [r7, #8]
   804fe:	320c      	adds	r2, #12
   80500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80504:	3714      	adds	r7, #20
   80506:	46bd      	mov	sp, r7
   80508:	f85d 7b04 	ldr.w	r7, [sp], #4
   8050c:	4770      	bx	lr
   8050e:	bf00      	nop

00080510 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   80510:	b480      	push	{r7}
   80512:	b085      	sub	sp, #20
   80514:	af00      	add	r7, sp, #0
   80516:	60f8      	str	r0, [r7, #12]
   80518:	60b9      	str	r1, [r7, #8]
   8051a:	71fa      	strb	r2, [r7, #7]
   8051c:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8051e:	68fb      	ldr	r3, [r7, #12]
   80520:	68ba      	ldr	r2, [r7, #8]
   80522:	320c      	adds	r2, #12
   80524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80528:	b299      	uxth	r1, r3
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	68ba      	ldr	r2, [r7, #8]
   8052e:	320c      	adds	r2, #12
   80530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80534:	68fb      	ldr	r3, [r7, #12]
   80536:	68ba      	ldr	r2, [r7, #8]
   80538:	320c      	adds	r2, #12
   8053a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8053e:	79fb      	ldrb	r3, [r7, #7]
   80540:	041b      	lsls	r3, r3, #16
   80542:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   80546:	79bb      	ldrb	r3, [r7, #6]
   80548:	061b      	lsls	r3, r3, #24
   8054a:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   8054c:	ea42 0103 	orr.w	r1, r2, r3
   80550:	68fb      	ldr	r3, [r7, #12]
   80552:	68ba      	ldr	r2, [r7, #8]
   80554:	320c      	adds	r2, #12
   80556:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   8055a:	3714      	adds	r7, #20
   8055c:	46bd      	mov	sp, r7
   8055e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80562:	4770      	bx	lr

00080564 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   80564:	b580      	push	{r7, lr}
   80566:	b082      	sub	sp, #8
   80568:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8056a:	2300      	movs	r3, #0
   8056c:	607b      	str	r3, [r7, #4]
   8056e:	e00f      	b.n	80590 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   80570:	4b0a      	ldr	r3, [pc, #40]	; (8059c <vParTestInitialise+0x38>)
   80572:	687a      	ldr	r2, [r7, #4]
   80574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80578:	4618      	mov	r0, r3
   8057a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8057e:	4b08      	ldr	r3, [pc, #32]	; (805a0 <vParTestInitialise+0x3c>)
   80580:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   80582:	6878      	ldr	r0, [r7, #4]
   80584:	2100      	movs	r1, #0
   80586:	4b07      	ldr	r3, [pc, #28]	; (805a4 <vParTestInitialise+0x40>)
   80588:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8058a:	687b      	ldr	r3, [r7, #4]
   8058c:	3301      	adds	r3, #1
   8058e:	607b      	str	r3, [r7, #4]
   80590:	687b      	ldr	r3, [r7, #4]
   80592:	2b03      	cmp	r3, #3
   80594:	d9ec      	bls.n	80570 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   80596:	3708      	adds	r7, #8
   80598:	46bd      	mov	sp, r7
   8059a:	bd80      	pop	{r7, pc}
   8059c:	000875f8 	.word	0x000875f8
   805a0:	00082f15 	.word	0x00082f15
   805a4:	000805a9 	.word	0x000805a9

000805a8 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   805a8:	b580      	push	{r7, lr}
   805aa:	b082      	sub	sp, #8
   805ac:	af00      	add	r7, sp, #0
   805ae:	6078      	str	r0, [r7, #4]
   805b0:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   805b2:	687b      	ldr	r3, [r7, #4]
   805b4:	2b03      	cmp	r3, #3
   805b6:	d823      	bhi.n	80600 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   805b8:	687b      	ldr	r3, [r7, #4]
   805ba:	2b00      	cmp	r3, #0
   805bc:	d106      	bne.n	805cc <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   805be:	683b      	ldr	r3, [r7, #0]
   805c0:	2b00      	cmp	r3, #0
   805c2:	bf14      	ite	ne
   805c4:	2300      	movne	r3, #0
   805c6:	2301      	moveq	r3, #1
   805c8:	b2db      	uxtb	r3, r3
   805ca:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   805cc:	683b      	ldr	r3, [r7, #0]
   805ce:	2b00      	cmp	r3, #0
   805d0:	d00b      	beq.n	805ea <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   805d2:	4b0d      	ldr	r3, [pc, #52]	; (80608 <vParTestSetLED+0x60>)
   805d4:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   805d6:	4b0d      	ldr	r3, [pc, #52]	; (8060c <vParTestSetLED+0x64>)
   805d8:	687a      	ldr	r2, [r7, #4]
   805da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   805de:	4618      	mov	r0, r3
   805e0:	4b0b      	ldr	r3, [pc, #44]	; (80610 <vParTestSetLED+0x68>)
   805e2:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   805e4:	4b0b      	ldr	r3, [pc, #44]	; (80614 <vParTestSetLED+0x6c>)
   805e6:	4798      	blx	r3
   805e8:	e00a      	b.n	80600 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   805ea:	4b07      	ldr	r3, [pc, #28]	; (80608 <vParTestSetLED+0x60>)
   805ec:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   805ee:	4b07      	ldr	r3, [pc, #28]	; (8060c <vParTestSetLED+0x64>)
   805f0:	687a      	ldr	r2, [r7, #4]
   805f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   805f6:	4618      	mov	r0, r3
   805f8:	4b07      	ldr	r3, [pc, #28]	; (80618 <vParTestSetLED+0x70>)
   805fa:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   805fc:	4b05      	ldr	r3, [pc, #20]	; (80614 <vParTestSetLED+0x6c>)
   805fe:	4798      	blx	r3
		}
	}
}
   80600:	3708      	adds	r7, #8
   80602:	46bd      	mov	sp, r7
   80604:	bd80      	pop	{r7, pc}
   80606:	bf00      	nop
   80608:	00083e29 	.word	0x00083e29
   8060c:	000875f8 	.word	0x000875f8
   80610:	00082e81 	.word	0x00082e81
   80614:	00083e6d 	.word	0x00083e6d
   80618:	00082e4d 	.word	0x00082e4d

0008061c <spimem_initialize>:
/* @return: None.														*/
/************************************************************************/

// NOTE: The initialization procedure needs to be repeated for each SPi Mem Chip.
void spimem_initialize(void)
{
   8061c:	b580      	push	{r7, lr}
   8061e:	b084      	sub	sp, #16
   80620:	af00      	add	r7, sp, #0
	uint16_t dumbuf[2], i;
	uint8_t check;
	uint32_t timeout = 7 * 84000000;
   80622:	4b37      	ldr	r3, [pc, #220]	; (80700 <spimem_initialize+0xe4>)
   80624:	60bb      	str	r3, [r7, #8]
	
	gpio_set_pin_low(SPI0_MEM1_HOLD);	// Turn "holding" off.
   80626:	2015      	movs	r0, #21
   80628:	4b36      	ldr	r3, [pc, #216]	; (80704 <spimem_initialize+0xe8>)
   8062a:	4798      	blx	r3
	gpio_set_pin_low(SPI0_MEM1_WP);	// Turn write protection off.
   8062c:	2033      	movs	r0, #51	; 0x33
   8062e:	4b35      	ldr	r3, [pc, #212]	; (80704 <spimem_initialize+0xe8>)
   80630:	4798      	blx	r3
	gpio_set_pin_high(SPI0_MEM2_HOLD);	// Turn "holding" off.
   80632:	2020      	movs	r0, #32
   80634:	4b34      	ldr	r3, [pc, #208]	; (80708 <spimem_initialize+0xec>)
   80636:	4798      	blx	r3
	gpio_set_pin_high(SPI0_MEM2_WP);	// Turn write protection off.
   80638:	201c      	movs	r0, #28
   8063a:	4b33      	ldr	r3, [pc, #204]	; (80708 <spimem_initialize+0xec>)
   8063c:	4798      	blx	r3
	
	dumbuf[0] = WREN;						// Write-Enable Command.
   8063e:	2306      	movs	r3, #6
   80640:	803b      	strh	r3, [r7, #0]
	spi_master_transfer(dumbuf, 1, 2);
   80642:	463b      	mov	r3, r7
   80644:	4618      	mov	r0, r3
   80646:	2101      	movs	r1, #1
   80648:	2202      	movs	r2, #2
   8064a:	4b30      	ldr	r3, [pc, #192]	; (8070c <spimem_initialize+0xf0>)
   8064c:	4798      	blx	r3
	
	check = get_spimem_status_h(2);
   8064e:	2002      	movs	r0, #2
   80650:	4b2f      	ldr	r3, [pc, #188]	; (80710 <spimem_initialize+0xf4>)
   80652:	4798      	blx	r3
   80654:	4603      	mov	r3, r0
   80656:	71fb      	strb	r3, [r7, #7]
	check = check & 0x03;
   80658:	79fb      	ldrb	r3, [r7, #7]
   8065a:	f003 0303 	and.w	r3, r3, #3
   8065e:	71fb      	strb	r3, [r7, #7]
	if(check != 0x02)
   80660:	79fb      	ldrb	r3, [r7, #7]
   80662:	2b02      	cmp	r3, #2
   80664:	d000      	beq.n	80668 <spimem_initialize+0x4c>
		return;
   80666:	e047      	b.n	806f8 <spimem_initialize+0xdc>
	
	dumbuf[0] = WREN;
   80668:	2306      	movs	r3, #6
   8066a:	803b      	strh	r3, [r7, #0]
	dumbuf[1] = CE;							// Chip-Erase (this operation can take up to 7s.
   8066c:	23c7      	movs	r3, #199	; 0xc7
   8066e:	807b      	strh	r3, [r7, #2]
	spi_master_transfer(dumbuf, 2, 2);
   80670:	463b      	mov	r3, r7
   80672:	4618      	mov	r0, r3
   80674:	2102      	movs	r1, #2
   80676:	2202      	movs	r2, #2
   80678:	4b24      	ldr	r3, [pc, #144]	; (8070c <spimem_initialize+0xf0>)
   8067a:	4798      	blx	r3
	delay_s(14);
   8067c:	200e      	movs	r0, #14
   8067e:	4b25      	ldr	r3, [pc, #148]	; (80714 <spimem_initialize+0xf8>)
   80680:	4798      	blx	r3
		
	check = check_if_wip(2);
   80682:	2002      	movs	r0, #2
   80684:	4b24      	ldr	r3, [pc, #144]	; (80718 <spimem_initialize+0xfc>)
   80686:	4798      	blx	r3
   80688:	4603      	mov	r3, r0
   8068a:	71fb      	strb	r3, [r7, #7]
	
	if(check == 1)
   8068c:	79fb      	ldrb	r3, [r7, #7]
   8068e:	2b01      	cmp	r3, #1
   80690:	d100      	bne.n	80694 <spimem_initialize+0x78>
		return;								// FAILURE_RECOVERY
   80692:	e031      	b.n	806f8 <spimem_initialize+0xdc>
		
	dumbuf[0] = WREN;						// Write-Enable Command.
   80694:	2306      	movs	r3, #6
   80696:	803b      	strh	r3, [r7, #0]
	spi_master_transfer(dumbuf, 1, 2);
   80698:	463b      	mov	r3, r7
   8069a:	4618      	mov	r0, r3
   8069c:	2101      	movs	r1, #1
   8069e:	2202      	movs	r2, #2
   806a0:	4b1a      	ldr	r3, [pc, #104]	; (8070c <spimem_initialize+0xf0>)
   806a2:	4798      	blx	r3
	
	check = get_spimem_status_h(2);
   806a4:	2002      	movs	r0, #2
   806a6:	4b1a      	ldr	r3, [pc, #104]	; (80710 <spimem_initialize+0xf4>)
   806a8:	4798      	blx	r3
   806aa:	4603      	mov	r3, r0
   806ac:	71fb      	strb	r3, [r7, #7]
	check = check & 0x03;
   806ae:	79fb      	ldrb	r3, [r7, #7]
   806b0:	f003 0303 	and.w	r3, r3, #3
   806b4:	71fb      	strb	r3, [r7, #7]
	if(check != 0x02)
   806b6:	79fb      	ldrb	r3, [r7, #7]
   806b8:	2b02      	cmp	r3, #2
   806ba:	d000      	beq.n	806be <spimem_initialize+0xa2>
		return;
   806bc:	e01c      	b.n	806f8 <spimem_initialize+0xdc>
	
	for (i = 0; i < 128; i++)
   806be:	2300      	movs	r3, #0
   806c0:	81fb      	strh	r3, [r7, #14]
   806c2:	e007      	b.n	806d4 <spimem_initialize+0xb8>
	{
		spi_bit_map[i] = 0;				// Initialize the bitmap
   806c4:	89fa      	ldrh	r2, [r7, #14]
   806c6:	4b15      	ldr	r3, [pc, #84]	; (8071c <spimem_initialize+0x100>)
   806c8:	2100      	movs	r1, #0
   806ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	check = get_spimem_status_h(2);
	check = check & 0x03;
	if(check != 0x02)
		return;
	
	for (i = 0; i < 128; i++)
   806ce:	89fb      	ldrh	r3, [r7, #14]
   806d0:	3301      	adds	r3, #1
   806d2:	81fb      	strh	r3, [r7, #14]
   806d4:	89fb      	ldrh	r3, [r7, #14]
   806d6:	2b7f      	cmp	r3, #127	; 0x7f
   806d8:	d9f4      	bls.n	806c4 <spimem_initialize+0xa8>
	{
		spi_bit_map[i] = 0;				// Initialize the bitmap
	}

	for (i = 0; i < 4096; i++)
   806da:	2300      	movs	r3, #0
   806dc:	81fb      	strh	r3, [r7, #14]
   806de:	e006      	b.n	806ee <spimem_initialize+0xd2>
	{
		spi_mem_buff[i] = 0;			// Initialize the memory buffer.
   806e0:	89fb      	ldrh	r3, [r7, #14]
   806e2:	4a0f      	ldr	r2, [pc, #60]	; (80720 <spimem_initialize+0x104>)
   806e4:	2100      	movs	r1, #0
   806e6:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < 128; i++)
	{
		spi_bit_map[i] = 0;				// Initialize the bitmap
	}

	for (i = 0; i < 4096; i++)
   806e8:	89fb      	ldrh	r3, [r7, #14]
   806ea:	3301      	adds	r3, #1
   806ec:	81fb      	strh	r3, [r7, #14]
   806ee:	89fb      	ldrh	r3, [r7, #14]
   806f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   806f4:	d3f4      	bcc.n	806e0 <spimem_initialize+0xc4>
	{
		spi_mem_buff[i] = 0;			// Initialize the memory buffer.
	}
	return;
   806f6:	bf00      	nop
}
   806f8:	3710      	adds	r7, #16
   806fa:	46bd      	mov	sp, r7
   806fc:	bd80      	pop	{r7, pc}
   806fe:	bf00      	nop
   80700:	230c2b00 	.word	0x230c2b00
   80704:	00082e81 	.word	0x00082e81
   80708:	00082e4d 	.word	0x00082e4d
   8070c:	00081879 	.word	0x00081879
   80710:	00080cd5 	.word	0x00080cd5
   80714:	00081ae9 	.word	0x00081ae9
   80718:	00080f25 	.word	0x00080f25
   8071c:	2007a72c 	.word	0x2007a72c
   80720:	2007a934 	.word	0x2007a934

00080724 <spimem_write>:
/* @NOTE: This function first attempts to acquire the mutex for SPI0	*/
/* it will block for a maximum of 1 Tick, if SPI0 is still occupied		*/
/* after that, the funciton returns -1.									*/
/************************************************************************/
int spimem_write(uint8_t spi_chip, uint32_t addr, uint8_t* data_buff, uint32_t size)
{
   80724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80728:	b08f      	sub	sp, #60	; 0x3c
   8072a:	af00      	add	r7, sp, #0
   8072c:	60b9      	str	r1, [r7, #8]
   8072e:	607a      	str	r2, [r7, #4]
   80730:	603b      	str	r3, [r7, #0]
   80732:	4603      	mov	r3, r0
   80734:	73fb      	strb	r3, [r7, #15]
   80736:	466b      	mov	r3, sp
   80738:	461e      	mov	r6, r3
	uint32_t i, size1, size2, low, dirty = 0, page, sect_num, check;
   8073a:	2300      	movs	r3, #0
   8073c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t msg_buff[size + 5];
   8073e:	683b      	ldr	r3, [r7, #0]
   80740:	1d59      	adds	r1, r3, #5
   80742:	460b      	mov	r3, r1
   80744:	3b01      	subs	r3, #1
   80746:	627b      	str	r3, [r7, #36]	; 0x24
   80748:	460a      	mov	r2, r1
   8074a:	f04f 0300 	mov.w	r3, #0
   8074e:	ea4f 1903 	mov.w	r9, r3, lsl #4
   80752:	ea49 7912 	orr.w	r9, r9, r2, lsr #28
   80756:	ea4f 1802 	mov.w	r8, r2, lsl #4
   8075a:	460a      	mov	r2, r1
   8075c:	f04f 0300 	mov.w	r3, #0
   80760:	011d      	lsls	r5, r3, #4
   80762:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
   80766:	0114      	lsls	r4, r2, #4
   80768:	004b      	lsls	r3, r1, #1
   8076a:	3301      	adds	r3, #1
   8076c:	3307      	adds	r3, #7
   8076e:	08db      	lsrs	r3, r3, #3
   80770:	00db      	lsls	r3, r3, #3
   80772:	ebad 0d03 	sub.w	sp, sp, r3
   80776:	466b      	mov	r3, sp
   80778:	3301      	adds	r3, #1
   8077a:	085b      	lsrs	r3, r3, #1
   8077c:	005b      	lsls	r3, r3, #1
   8077e:	623b      	str	r3, [r7, #32]
	msg_buff[0] = WREN;
   80780:	6a3b      	ldr	r3, [r7, #32]
   80782:	2206      	movs	r2, #6
   80784:	801a      	strh	r2, [r3, #0]
	msg_buff[1] = PP;
   80786:	6a3b      	ldr	r3, [r7, #32]
   80788:	2202      	movs	r2, #2
   8078a:	805a      	strh	r2, [r3, #2]
	
	if (size > 256)				// Invalid size to write.
   8078c:	683b      	ldr	r3, [r7, #0]
   8078e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   80792:	d902      	bls.n	8079a <spimem_write+0x76>
		return -1;
   80794:	f04f 33ff 	mov.w	r3, #4294967295
   80798:	e122      	b.n	809e0 <spimem_write+0x2bc>
	if (addr > 0xFFFFF)			// Invalid address to write to.
   8079a:	68bb      	ldr	r3, [r7, #8]
   8079c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   807a0:	d302      	bcc.n	807a8 <spimem_write+0x84>
		return -1;
   807a2:	f04f 33ff 	mov.w	r3, #4294967295
   807a6:	e11b      	b.n	809e0 <spimem_write+0x2bc>
	
	low = addr & 0x000000FF;
   807a8:	68bb      	ldr	r3, [r7, #8]
   807aa:	b2db      	uxtb	r3, r3
   807ac:	61fb      	str	r3, [r7, #28]
	if ((size + low) > 256)		// Requested write flows into a second page.
   807ae:	683a      	ldr	r2, [r7, #0]
   807b0:	69fb      	ldr	r3, [r7, #28]
   807b2:	4413      	add	r3, r2
   807b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   807b8:	d908      	bls.n	807cc <spimem_write+0xa8>
	{
		size1 = 256 - low;
   807ba:	69fb      	ldr	r3, [r7, #28]
   807bc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
   807c0:	633b      	str	r3, [r7, #48]	; 0x30
		size2 = size - size1;
   807c2:	683a      	ldr	r2, [r7, #0]
   807c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   807c6:	1ad3      	subs	r3, r2, r3
   807c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   807ca:	e003      	b.n	807d4 <spimem_write+0xb0>
	}
	else
	{
		size1 = size;
   807cc:	683b      	ldr	r3, [r7, #0]
   807ce:	633b      	str	r3, [r7, #48]	; 0x30
		size2 = 0;
   807d0:	2300      	movs	r3, #0
   807d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if ((addr + (size - 1)) > 0xFFFFF)	// Address too high, can't write all requested bytes.
   807d4:	683a      	ldr	r2, [r7, #0]
   807d6:	68bb      	ldr	r3, [r7, #8]
   807d8:	4413      	add	r3, r2
   807da:	3b01      	subs	r3, #1
   807dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   807e0:	d305      	bcc.n	807ee <spimem_write+0xca>
	{
		size1 = 256 - low;
   807e2:	69fb      	ldr	r3, [r7, #28]
   807e4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
   807e8:	633b      	str	r3, [r7, #48]	; 0x30
		size2 = 0;
   807ea:	2300      	movs	r3, #0
   807ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (xSemaphoreTake(Spi0_Mutex, (TickType_t) 1) == pdTRUE)	// Only Block for a single tick.
   807ee:	4b7f      	ldr	r3, [pc, #508]	; (809ec <spimem_write+0x2c8>)
   807f0:	681b      	ldr	r3, [r3, #0]
   807f2:	4618      	mov	r0, r3
   807f4:	2100      	movs	r1, #0
   807f6:	2201      	movs	r2, #1
   807f8:	2300      	movs	r3, #0
   807fa:	4c7d      	ldr	r4, [pc, #500]	; (809f0 <spimem_write+0x2cc>)
   807fc:	47a0      	blx	r4
   807fe:	4603      	mov	r3, r0
   80800:	2b01      	cmp	r3, #1
   80802:	f040 80eb 	bne.w	809dc <spimem_write+0x2b8>
	{
		check = check_if_wip(spi_chip);
   80806:	7bfb      	ldrb	r3, [r7, #15]
   80808:	4618      	mov	r0, r3
   8080a:	4b7a      	ldr	r3, [pc, #488]	; (809f4 <spimem_write+0x2d0>)
   8080c:	4798      	blx	r3
   8080e:	61b8      	str	r0, [r7, #24]
		if(check == 1)
   80810:	69bb      	ldr	r3, [r7, #24]
   80812:	2b01      	cmp	r3, #1
   80814:	d102      	bne.n	8081c <spimem_write+0xf8>
			return -1;
   80816:	f04f 33ff 	mov.w	r3, #4294967295
   8081a:	e0e1      	b.n	809e0 <spimem_write+0x2bc>
			
		page = get_page(addr);
   8081c:	68b8      	ldr	r0, [r7, #8]
   8081e:	4b76      	ldr	r3, [pc, #472]	; (809f8 <spimem_write+0x2d4>)
   80820:	4798      	blx	r3
   80822:	6178      	str	r0, [r7, #20]
		dirty = check_page(page);
   80824:	6978      	ldr	r0, [r7, #20]
   80826:	4b75      	ldr	r3, [pc, #468]	; (809fc <spimem_write+0x2d8>)
   80828:	4798      	blx	r3
   8082a:	62b8      	str	r0, [r7, #40]	; 0x28
		if(dirty)
   8082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8082e:	2b00      	cmp	r3, #0
   80830:	d01b      	beq.n	8086a <spimem_write+0x146>
		{
			sect_num = get_sector(addr);
   80832:	68b8      	ldr	r0, [r7, #8]
   80834:	4b72      	ldr	r3, [pc, #456]	; (80a00 <spimem_write+0x2dc>)
   80836:	4798      	blx	r3
   80838:	6138      	str	r0, [r7, #16]
			check = load_sector_into_spibuffer(spi_chip, sect_num);			// if check != 4096, FAILURE_RECOVERY.
   8083a:	7bfb      	ldrb	r3, [r7, #15]
   8083c:	4618      	mov	r0, r3
   8083e:	6939      	ldr	r1, [r7, #16]
   80840:	4b70      	ldr	r3, [pc, #448]	; (80a04 <spimem_write+0x2e0>)
   80842:	4798      	blx	r3
   80844:	61b8      	str	r0, [r7, #24]
			check = update_spibuffer_with_new_page(addr, data_buff, size1);	// if check != size1, FAILURE_RECOVERY.
   80846:	68b8      	ldr	r0, [r7, #8]
   80848:	6879      	ldr	r1, [r7, #4]
   8084a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   8084c:	4b6e      	ldr	r3, [pc, #440]	; (80a08 <spimem_write+0x2e4>)
   8084e:	4798      	blx	r3
   80850:	61b8      	str	r0, [r7, #24]
			check = erase_sector_on_chip(spi_chip, sect_num);				// FAILURE_RECOVERY
   80852:	7bfb      	ldrb	r3, [r7, #15]
   80854:	4618      	mov	r0, r3
   80856:	6939      	ldr	r1, [r7, #16]
   80858:	4b6c      	ldr	r3, [pc, #432]	; (80a0c <spimem_write+0x2e8>)
   8085a:	4798      	blx	r3
   8085c:	61b8      	str	r0, [r7, #24]
			check = write_sector_back_to_spimem(spi_chip);					// FAILURE_RECOVERY
   8085e:	7bfb      	ldrb	r3, [r7, #15]
   80860:	4618      	mov	r0, r3
   80862:	4b6b      	ldr	r3, [pc, #428]	; (80a10 <spimem_write+0x2ec>)
   80864:	4798      	blx	r3
   80866:	61b8      	str	r0, [r7, #24]
   80868:	e037      	b.n	808da <spimem_write+0x1b6>
		}
		else
		{
			msg_buff[2] = (uint16_t)((addr & 0x000F0000) >> 16);
   8086a:	68bb      	ldr	r3, [r7, #8]
   8086c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80870:	0c1b      	lsrs	r3, r3, #16
   80872:	b29a      	uxth	r2, r3
   80874:	6a3b      	ldr	r3, [r7, #32]
   80876:	809a      	strh	r2, [r3, #4]
			msg_buff[3] = (uint16_t)((addr & 0x0000FF00) >> 8);
   80878:	68bb      	ldr	r3, [r7, #8]
   8087a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8087e:	0a1b      	lsrs	r3, r3, #8
   80880:	b29a      	uxth	r2, r3
   80882:	6a3b      	ldr	r3, [r7, #32]
   80884:	80da      	strh	r2, [r3, #6]
			msg_buff[4] = (uint16_t)(addr & 0x000000FF);
   80886:	68bb      	ldr	r3, [r7, #8]
   80888:	b29b      	uxth	r3, r3
   8088a:	b2db      	uxtb	r3, r3
   8088c:	b29a      	uxth	r2, r3
   8088e:	6a3b      	ldr	r3, [r7, #32]
   80890:	811a      	strh	r2, [r3, #8]

			for (i = 5; i < (size1 + 5); i++)
   80892:	2305      	movs	r3, #5
   80894:	637b      	str	r3, [r7, #52]	; 0x34
   80896:	e00c      	b.n	808b2 <spimem_write+0x18e>
			{
				msg_buff[i] = (uint16_t)(*(data_buff + (i - 5)));
   80898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8089a:	3b05      	subs	r3, #5
   8089c:	687a      	ldr	r2, [r7, #4]
   8089e:	4413      	add	r3, r2
   808a0:	781b      	ldrb	r3, [r3, #0]
   808a2:	4619      	mov	r1, r3
   808a4:	6a3b      	ldr	r3, [r7, #32]
   808a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   808a8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		{
			msg_buff[2] = (uint16_t)((addr & 0x000F0000) >> 16);
			msg_buff[3] = (uint16_t)((addr & 0x0000FF00) >> 8);
			msg_buff[4] = (uint16_t)(addr & 0x000000FF);

			for (i = 5; i < (size1 + 5); i++)
   808ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   808ae:	3301      	adds	r3, #1
   808b0:	637b      	str	r3, [r7, #52]	; 0x34
   808b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   808b4:	1d5a      	adds	r2, r3, #5
   808b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   808b8:	429a      	cmp	r2, r3
   808ba:	d8ed      	bhi.n	80898 <spimem_write+0x174>
			{
				msg_buff[i] = (uint16_t)(*(data_buff + (i - 5)));
			}
			/* Transfer commands and data to the memory chip */
			spi_master_transfer(msg_buff, (size1 + 5), spi_chip);
   808bc:	6a39      	ldr	r1, [r7, #32]
   808be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   808c0:	1d5a      	adds	r2, r3, #5
   808c2:	7bfb      	ldrb	r3, [r7, #15]
   808c4:	4608      	mov	r0, r1
   808c6:	4611      	mov	r1, r2
   808c8:	461a      	mov	r2, r3
   808ca:	4b52      	ldr	r3, [pc, #328]	; (80a14 <spimem_write+0x2f0>)
   808cc:	4798      	blx	r3

			set_page_dirty(page);	// Page has been written to, set dirty.
   808ce:	6978      	ldr	r0, [r7, #20]
   808d0:	4b51      	ldr	r3, [pc, #324]	; (80a18 <spimem_write+0x2f4>)
   808d2:	4798      	blx	r3

			delay_ms(10);			// Internal Write Time for the SPI Memory Chip.		
   808d4:	200a      	movs	r0, #10
   808d6:	4b51      	ldr	r3, [pc, #324]	; (80a1c <spimem_write+0x2f8>)
   808d8:	4798      	blx	r3
		}
		
		if(size2)	// Requested write flows into a second page.
   808da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   808dc:	2b00      	cmp	r3, #0
   808de:	d071      	beq.n	809c4 <spimem_write+0x2a0>
		{
			page = get_page(addr);
   808e0:	68b8      	ldr	r0, [r7, #8]
   808e2:	4b45      	ldr	r3, [pc, #276]	; (809f8 <spimem_write+0x2d4>)
   808e4:	4798      	blx	r3
   808e6:	6178      	str	r0, [r7, #20]
			dirty = check_page(page);
   808e8:	6978      	ldr	r0, [r7, #20]
   808ea:	4b44      	ldr	r3, [pc, #272]	; (809fc <spimem_write+0x2d8>)
   808ec:	4798      	blx	r3
   808ee:	62b8      	str	r0, [r7, #40]	; 0x28
			if(dirty)
   808f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808f2:	2b00      	cmp	r3, #0
   808f4:	d01e      	beq.n	80934 <spimem_write+0x210>
			{
				sect_num = get_sector(addr);
   808f6:	68b8      	ldr	r0, [r7, #8]
   808f8:	4b41      	ldr	r3, [pc, #260]	; (80a00 <spimem_write+0x2dc>)
   808fa:	4798      	blx	r3
   808fc:	6138      	str	r0, [r7, #16]
				check = load_sector_into_spibuffer(spi_chip, sect_num);						// if check != 4096, FAILURE_RECOVERY.
   808fe:	7bfb      	ldrb	r3, [r7, #15]
   80900:	4618      	mov	r0, r3
   80902:	6939      	ldr	r1, [r7, #16]
   80904:	4b3f      	ldr	r3, [pc, #252]	; (80a04 <spimem_write+0x2e0>)
   80906:	4798      	blx	r3
   80908:	61b8      	str	r0, [r7, #24]
				check = update_spibuffer_with_new_page(addr, (data_buff + size1), size2);	// if check != size1, FAILURE_RECOVERY.
   8090a:	687a      	ldr	r2, [r7, #4]
   8090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8090e:	4413      	add	r3, r2
   80910:	68b8      	ldr	r0, [r7, #8]
   80912:	4619      	mov	r1, r3
   80914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   80916:	4b3c      	ldr	r3, [pc, #240]	; (80a08 <spimem_write+0x2e4>)
   80918:	4798      	blx	r3
   8091a:	61b8      	str	r0, [r7, #24]
				check = erase_sector_on_chip(spi_chip, sect_num);				// FAILURE_RECOVERY
   8091c:	7bfb      	ldrb	r3, [r7, #15]
   8091e:	4618      	mov	r0, r3
   80920:	6939      	ldr	r1, [r7, #16]
   80922:	4b3a      	ldr	r3, [pc, #232]	; (80a0c <spimem_write+0x2e8>)
   80924:	4798      	blx	r3
   80926:	61b8      	str	r0, [r7, #24]
				check = write_sector_back_to_spimem(spi_chip);					// FAILURE_RECOVERY
   80928:	7bfb      	ldrb	r3, [r7, #15]
   8092a:	4618      	mov	r0, r3
   8092c:	4b38      	ldr	r3, [pc, #224]	; (80a10 <spimem_write+0x2ec>)
   8092e:	4798      	blx	r3
   80930:	61b8      	str	r0, [r7, #24]
   80932:	e047      	b.n	809c4 <spimem_write+0x2a0>

			}
			else
			{
				msg_buff[0] = WREN;
   80934:	6a3b      	ldr	r3, [r7, #32]
   80936:	2206      	movs	r2, #6
   80938:	801a      	strh	r2, [r3, #0]
				msg_buff[1] = PP;
   8093a:	6a3b      	ldr	r3, [r7, #32]
   8093c:	2202      	movs	r2, #2
   8093e:	805a      	strh	r2, [r3, #2]
				msg_buff[2] = (uint16_t)(((addr + size1) & 0x000F0000) >> 16);
   80940:	68ba      	ldr	r2, [r7, #8]
   80942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80944:	4413      	add	r3, r2
   80946:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8094a:	0c1b      	lsrs	r3, r3, #16
   8094c:	b29a      	uxth	r2, r3
   8094e:	6a3b      	ldr	r3, [r7, #32]
   80950:	809a      	strh	r2, [r3, #4]
				msg_buff[3] = (uint16_t)(((addr + size1) & 0x0000FF00) >> 8);
   80952:	68ba      	ldr	r2, [r7, #8]
   80954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80956:	4413      	add	r3, r2
   80958:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8095c:	0a1b      	lsrs	r3, r3, #8
   8095e:	b29a      	uxth	r2, r3
   80960:	6a3b      	ldr	r3, [r7, #32]
   80962:	80da      	strh	r2, [r3, #6]
				msg_buff[4] = (uint16_t)((addr + size1) & 0x000000FF);
   80964:	68bb      	ldr	r3, [r7, #8]
   80966:	b29a      	uxth	r2, r3
   80968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8096a:	b29b      	uxth	r3, r3
   8096c:	4413      	add	r3, r2
   8096e:	b29b      	uxth	r3, r3
   80970:	b2db      	uxtb	r3, r3
   80972:	b29a      	uxth	r2, r3
   80974:	6a3b      	ldr	r3, [r7, #32]
   80976:	811a      	strh	r2, [r3, #8]

				for (i = 5; i < (size2 + 5); i++)
   80978:	2305      	movs	r3, #5
   8097a:	637b      	str	r3, [r7, #52]	; 0x34
   8097c:	e00e      	b.n	8099c <spimem_write+0x278>
				{
					msg_buff[i] = (uint16_t)*((data_buff + size1) + (i - 5));
   8097e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80982:	4413      	add	r3, r2
   80984:	3b05      	subs	r3, #5
   80986:	687a      	ldr	r2, [r7, #4]
   80988:	4413      	add	r3, r2
   8098a:	781b      	ldrb	r3, [r3, #0]
   8098c:	4619      	mov	r1, r3
   8098e:	6a3b      	ldr	r3, [r7, #32]
   80990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   80992:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				msg_buff[1] = PP;
				msg_buff[2] = (uint16_t)(((addr + size1) & 0x000F0000) >> 16);
				msg_buff[3] = (uint16_t)(((addr + size1) & 0x0000FF00) >> 8);
				msg_buff[4] = (uint16_t)((addr + size1) & 0x000000FF);

				for (i = 5; i < (size2 + 5); i++)
   80996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80998:	3301      	adds	r3, #1
   8099a:	637b      	str	r3, [r7, #52]	; 0x34
   8099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8099e:	1d5a      	adds	r2, r3, #5
   809a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   809a2:	429a      	cmp	r2, r3
   809a4:	d8eb      	bhi.n	8097e <spimem_write+0x25a>
				{
					msg_buff[i] = (uint16_t)*((data_buff + size1) + (i - 5));
				}
				/* Transfer commands and data to the memory chip */
				spi_master_transfer(msg_buff, (size2 + 5), spi_chip);
   809a6:	6a39      	ldr	r1, [r7, #32]
   809a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   809aa:	1d5a      	adds	r2, r3, #5
   809ac:	7bfb      	ldrb	r3, [r7, #15]
   809ae:	4608      	mov	r0, r1
   809b0:	4611      	mov	r1, r2
   809b2:	461a      	mov	r2, r3
   809b4:	4b17      	ldr	r3, [pc, #92]	; (80a14 <spimem_write+0x2f0>)
   809b6:	4798      	blx	r3

				set_page_dirty(page);	// Page has been written to, set dirty.
   809b8:	6978      	ldr	r0, [r7, #20]
   809ba:	4b17      	ldr	r3, [pc, #92]	; (80a18 <spimem_write+0x2f4>)
   809bc:	4798      	blx	r3

				delay_ms(10);			// Internal Write Time for the SPI Memory Chip.	
   809be:	200a      	movs	r0, #10
   809c0:	4b16      	ldr	r3, [pc, #88]	; (80a1c <spimem_write+0x2f8>)
   809c2:	4798      	blx	r3
			}
		}
		
		xSemaphoreGive(Spi0_Mutex);
   809c4:	4b09      	ldr	r3, [pc, #36]	; (809ec <spimem_write+0x2c8>)
   809c6:	681b      	ldr	r3, [r3, #0]
   809c8:	4618      	mov	r0, r3
   809ca:	2100      	movs	r1, #0
   809cc:	2200      	movs	r2, #0
   809ce:	2300      	movs	r3, #0
   809d0:	4c13      	ldr	r4, [pc, #76]	; (80a20 <spimem_write+0x2fc>)
   809d2:	47a0      	blx	r4
		return (size1 + size2);	
   809d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   809d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   809d8:	4413      	add	r3, r2
   809da:	e001      	b.n	809e0 <spimem_write+0x2bc>
	}

	else
		return -1;												// SPI0 is currently being used or there is an error.
   809dc:	f04f 33ff 	mov.w	r3, #4294967295
   809e0:	46b5      	mov	sp, r6


}
   809e2:	4618      	mov	r0, r3
   809e4:	373c      	adds	r7, #60	; 0x3c
   809e6:	46bd      	mov	sp, r7
   809e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   809ec:	2007a930 	.word	0x2007a930
   809f0:	0008476d 	.word	0x0008476d
   809f4:	00080f25 	.word	0x00080f25
   809f8:	00080ca5 	.word	0x00080ca5
   809fc:	00080c59 	.word	0x00080c59
   80a00:	00080cbd 	.word	0x00080cbd
   80a04:	00080b9d 	.word	0x00080b9d
   80a08:	00080be9 	.word	0x00080be9
   80a0c:	00080d5d 	.word	0x00080d5d
   80a10:	00080ded 	.word	0x00080ded
   80a14:	00081879 	.word	0x00081879
   80a18:	00080d09 	.word	0x00080d09
   80a1c:	00081b19 	.word	0x00081b19
   80a20:	000844ad 	.word	0x000844ad

00080a24 <spimem_read_h>:
/* @purpose: Read from the SPI memory chip.								*/
/* @NOTE: This function is a helper and is ONLY to be used within a 	*/
/* section of code which has acquired the Spi0_Mutex.					*/
/************************************************************************/
static int spimem_read_h(uint32_t spi_chip, uint32_t addr, uint8_t* read_buff, uint32_t size)
{
   80a24:	b580      	push	{r7, lr}
   80a26:	b086      	sub	sp, #24
   80a28:	af00      	add	r7, sp, #0
   80a2a:	60f8      	str	r0, [r7, #12]
   80a2c:	60b9      	str	r1, [r7, #8]
   80a2e:	607a      	str	r2, [r7, #4]
   80a30:	603b      	str	r3, [r7, #0]
	uint16_t dumbuf[4];

	if (addr > 0xFFFFF)										// Invalid address to write to.
   80a32:	68bb      	ldr	r3, [r7, #8]
   80a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80a38:	d302      	bcc.n	80a40 <spimem_read_h+0x1c>
		return -1;
   80a3a:	f04f 33ff 	mov.w	r3, #4294967295
   80a3e:	e037      	b.n	80ab0 <spimem_read_h+0x8c>
	if ((addr + size - 1) > 0xFFFFF)
   80a40:	68ba      	ldr	r2, [r7, #8]
   80a42:	683b      	ldr	r3, [r7, #0]
   80a44:	4413      	add	r3, r2
   80a46:	3b01      	subs	r3, #1
   80a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80a4c:	d305      	bcc.n	80a5a <spimem_read_h+0x36>
		size = 0xFFFFF - size;
   80a4e:	683b      	ldr	r3, [r7, #0]
   80a50:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
   80a54:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80a58:	603b      	str	r3, [r7, #0]

	dumbuf[0] = RD;
   80a5a:	2303      	movs	r3, #3
   80a5c:	823b      	strh	r3, [r7, #16]
	dumbuf[1] = (uint16_t)((addr & 0x000F0000) >> 16);
   80a5e:	68bb      	ldr	r3, [r7, #8]
   80a60:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80a64:	0c1b      	lsrs	r3, r3, #16
   80a66:	b29b      	uxth	r3, r3
   80a68:	827b      	strh	r3, [r7, #18]
	dumbuf[2] = (uint16_t)((addr & 0x0000FF00) >> 8);
   80a6a:	68bb      	ldr	r3, [r7, #8]
   80a6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   80a70:	0a1b      	lsrs	r3, r3, #8
   80a72:	b29b      	uxth	r3, r3
   80a74:	82bb      	strh	r3, [r7, #20]
	dumbuf[3] = (uint16_t)(addr & 0x000000FF);
   80a76:	68bb      	ldr	r3, [r7, #8]
   80a78:	b29b      	uxth	r3, r3
   80a7a:	b2db      	uxtb	r3, r3
   80a7c:	b29b      	uxth	r3, r3
   80a7e:	82fb      	strh	r3, [r7, #22]

	if(check_if_wip(spi_chip) != 0)							// A write is still in effect, FAILURE_RECOVERY
   80a80:	68f8      	ldr	r0, [r7, #12]
   80a82:	4b0d      	ldr	r3, [pc, #52]	; (80ab8 <spimem_read_h+0x94>)
   80a84:	4798      	blx	r3
   80a86:	4603      	mov	r3, r0
   80a88:	2b00      	cmp	r3, #0
   80a8a:	d002      	beq.n	80a92 <spimem_read_h+0x6e>
		return -1;
   80a8c:	f04f 33ff 	mov.w	r3, #4294967295
   80a90:	e00e      	b.n	80ab0 <spimem_read_h+0x8c>

	spi_master_transfer_keepcslow(dumbuf, 4, spi_chip);	// Keeps CS low so that read may begin immediately.
   80a92:	68fb      	ldr	r3, [r7, #12]
   80a94:	b2db      	uxtb	r3, r3
   80a96:	f107 0210 	add.w	r2, r7, #16
   80a9a:	4610      	mov	r0, r2
   80a9c:	2104      	movs	r1, #4
   80a9e:	461a      	mov	r2, r3
   80aa0:	4b06      	ldr	r3, [pc, #24]	; (80abc <spimem_read_h+0x98>)
   80aa2:	4798      	blx	r3

	spi_master_read(read_buff, size, spi_chip);
   80aa4:	6878      	ldr	r0, [r7, #4]
   80aa6:	6839      	ldr	r1, [r7, #0]
   80aa8:	68fa      	ldr	r2, [r7, #12]
   80aaa:	4b05      	ldr	r3, [pc, #20]	; (80ac0 <spimem_read_h+0x9c>)
   80aac:	4798      	blx	r3

	return size;
   80aae:	683b      	ldr	r3, [r7, #0]
}
   80ab0:	4618      	mov	r0, r3
   80ab2:	3718      	adds	r7, #24
   80ab4:	46bd      	mov	sp, r7
   80ab6:	bd80      	pop	{r7, pc}
   80ab8:	00080f25 	.word	0x00080f25
   80abc:	000819bd 	.word	0x000819bd
   80ac0:	00081a5d 	.word	0x00081a5d

00080ac4 <spimem_read>:
/* @NOTE: This function first attempts to acquire the mutex for SPI0	*/
/* it will block for a maximum of 1 Tick, if SPI0 is still occupied		*/
/* after that, the funciton returns -1.									*/
/************************************************************************/
int spimem_read(uint32_t spi_chip, uint32_t addr, uint8_t* read_buff, uint32_t size)
{
   80ac4:	b590      	push	{r4, r7, lr}
   80ac6:	b087      	sub	sp, #28
   80ac8:	af00      	add	r7, sp, #0
   80aca:	60f8      	str	r0, [r7, #12]
   80acc:	60b9      	str	r1, [r7, #8]
   80ace:	607a      	str	r2, [r7, #4]
   80ad0:	603b      	str	r3, [r7, #0]
	uint16_t dumbuf[4];

	if (addr > 0xFFFFF)										// Invalid address to write to.
   80ad2:	68bb      	ldr	r3, [r7, #8]
   80ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80ad8:	d302      	bcc.n	80ae0 <spimem_read+0x1c>
		return -1;
   80ada:	f04f 33ff 	mov.w	r3, #4294967295
   80ade:	e04d      	b.n	80b7c <spimem_read+0xb8>
	if ((addr + size - 1) > 0xFFFFF)						// Read would overflow highest address, read less.
   80ae0:	68ba      	ldr	r2, [r7, #8]
   80ae2:	683b      	ldr	r3, [r7, #0]
   80ae4:	4413      	add	r3, r2
   80ae6:	3b01      	subs	r3, #1
   80ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80aec:	d305      	bcc.n	80afa <spimem_read+0x36>
		size = 0xFFFFF - size;
   80aee:	683b      	ldr	r3, [r7, #0]
   80af0:	f5c3 237f 	rsb	r3, r3, #1044480	; 0xff000
   80af4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80af8:	603b      	str	r3, [r7, #0]

	if (xSemaphoreTake(Spi0_Mutex, (TickType_t) 1) == pdTRUE)	// Only Block for a single tick.
   80afa:	4b22      	ldr	r3, [pc, #136]	; (80b84 <spimem_read+0xc0>)
   80afc:	681b      	ldr	r3, [r3, #0]
   80afe:	4618      	mov	r0, r3
   80b00:	2100      	movs	r1, #0
   80b02:	2201      	movs	r2, #1
   80b04:	2300      	movs	r3, #0
   80b06:	4c20      	ldr	r4, [pc, #128]	; (80b88 <spimem_read+0xc4>)
   80b08:	47a0      	blx	r4
   80b0a:	4603      	mov	r3, r0
   80b0c:	2b01      	cmp	r3, #1
   80b0e:	d133      	bne.n	80b78 <spimem_read+0xb4>
	{
		dumbuf[0] = RD;
   80b10:	2303      	movs	r3, #3
   80b12:	823b      	strh	r3, [r7, #16]
		dumbuf[1] = (uint16_t)((addr & 0x000F0000) >> 16);
   80b14:	68bb      	ldr	r3, [r7, #8]
   80b16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80b1a:	0c1b      	lsrs	r3, r3, #16
   80b1c:	b29b      	uxth	r3, r3
   80b1e:	827b      	strh	r3, [r7, #18]
		dumbuf[2] = (uint16_t)((addr & 0x0000FF00) >> 8);
   80b20:	68bb      	ldr	r3, [r7, #8]
   80b22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   80b26:	0a1b      	lsrs	r3, r3, #8
   80b28:	b29b      	uxth	r3, r3
   80b2a:	82bb      	strh	r3, [r7, #20]
		dumbuf[3] = (uint16_t)(addr & 0x000000FF);
   80b2c:	68bb      	ldr	r3, [r7, #8]
   80b2e:	b29b      	uxth	r3, r3
   80b30:	b2db      	uxtb	r3, r3
   80b32:	b29b      	uxth	r3, r3
   80b34:	82fb      	strh	r3, [r7, #22]

		if(check_if_wip(spi_chip) != 0)							// A write is still in effect, FAILURE_RECOVERY.
   80b36:	68f8      	ldr	r0, [r7, #12]
   80b38:	4b14      	ldr	r3, [pc, #80]	; (80b8c <spimem_read+0xc8>)
   80b3a:	4798      	blx	r3
   80b3c:	4603      	mov	r3, r0
   80b3e:	2b00      	cmp	r3, #0
   80b40:	d002      	beq.n	80b48 <spimem_read+0x84>
			return -1;
   80b42:	f04f 33ff 	mov.w	r3, #4294967295
   80b46:	e019      	b.n	80b7c <spimem_read+0xb8>

		spi_master_transfer_keepcslow(dumbuf, 4, spi_chip);	// Keeps CS low so that read may begin immediately.
   80b48:	68fb      	ldr	r3, [r7, #12]
   80b4a:	b2db      	uxtb	r3, r3
   80b4c:	f107 0210 	add.w	r2, r7, #16
   80b50:	4610      	mov	r0, r2
   80b52:	2104      	movs	r1, #4
   80b54:	461a      	mov	r2, r3
   80b56:	4b0e      	ldr	r3, [pc, #56]	; (80b90 <spimem_read+0xcc>)
   80b58:	4798      	blx	r3

		spi_master_read(read_buff, size, spi_chip);
   80b5a:	6878      	ldr	r0, [r7, #4]
   80b5c:	6839      	ldr	r1, [r7, #0]
   80b5e:	68fa      	ldr	r2, [r7, #12]
   80b60:	4b0c      	ldr	r3, [pc, #48]	; (80b94 <spimem_read+0xd0>)
   80b62:	4798      	blx	r3

		xSemaphoreGive(Spi0_Mutex);
   80b64:	4b07      	ldr	r3, [pc, #28]	; (80b84 <spimem_read+0xc0>)
   80b66:	681b      	ldr	r3, [r3, #0]
   80b68:	4618      	mov	r0, r3
   80b6a:	2100      	movs	r1, #0
   80b6c:	2200      	movs	r2, #0
   80b6e:	2300      	movs	r3, #0
   80b70:	4c09      	ldr	r4, [pc, #36]	; (80b98 <spimem_read+0xd4>)
   80b72:	47a0      	blx	r4
		return size;
   80b74:	683b      	ldr	r3, [r7, #0]
   80b76:	e001      	b.n	80b7c <spimem_read+0xb8>
	}
	else
		return -1;												// SPI0 is currently being used or there is an error.
   80b78:	f04f 33ff 	mov.w	r3, #4294967295
}
   80b7c:	4618      	mov	r0, r3
   80b7e:	371c      	adds	r7, #28
   80b80:	46bd      	mov	sp, r7
   80b82:	bd90      	pop	{r4, r7, pc}
   80b84:	2007a930 	.word	0x2007a930
   80b88:	0008476d 	.word	0x0008476d
   80b8c:	00080f25 	.word	0x00080f25
   80b90:	000819bd 	.word	0x000819bd
   80b94:	00081a5d 	.word	0x00081a5d
   80b98:	000844ad 	.word	0x000844ad

00080b9c <load_sector_into_spibuffer>:
/* -erase operation. Loads 4kB from SPI_CHIP into spi_mem_buffer		*/
/* @NOTE: This function is a helper and is ONLY to be used within a 	*/
/* section of code which has acquired the Spi0_Mutex.					*/
/************************************************************************/
uint32_t load_sector_into_spibuffer(uint32_t spi_chip, uint32_t sect_num)
{
   80b9c:	b590      	push	{r4, r7, lr}
   80b9e:	b085      	sub	sp, #20
   80ba0:	af00      	add	r7, sp, #0
   80ba2:	6078      	str	r0, [r7, #4]
   80ba4:	6039      	str	r1, [r7, #0]
	uint32_t addr, read;

	if(sect_num > 255)				// Invalid sector to request a write to.
   80ba6:	683b      	ldr	r3, [r7, #0]
   80ba8:	2bff      	cmp	r3, #255	; 0xff
   80baa:	d902      	bls.n	80bb2 <load_sector_into_spibuffer+0x16>
		return -1;
   80bac:	f04f 33ff 	mov.w	r3, #4294967295
   80bb0:	e00f      	b.n	80bd2 <load_sector_into_spibuffer+0x36>

	addr = sect_num << 12;
   80bb2:	683b      	ldr	r3, [r7, #0]
   80bb4:	031b      	lsls	r3, r3, #12
   80bb6:	60fb      	str	r3, [r7, #12]

	read = spimem_read_h(spi_chip, addr, spi_mem_buff, 4096);
   80bb8:	6878      	ldr	r0, [r7, #4]
   80bba:	68f9      	ldr	r1, [r7, #12]
   80bbc:	4a07      	ldr	r2, [pc, #28]	; (80bdc <load_sector_into_spibuffer+0x40>)
   80bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   80bc2:	4c07      	ldr	r4, [pc, #28]	; (80be0 <load_sector_into_spibuffer+0x44>)
   80bc4:	47a0      	blx	r4
   80bc6:	4603      	mov	r3, r0
   80bc8:	60bb      	str	r3, [r7, #8]
	spi_mem_buff_sect_num = sect_num;
   80bca:	4b06      	ldr	r3, [pc, #24]	; (80be4 <load_sector_into_spibuffer+0x48>)
   80bcc:	683a      	ldr	r2, [r7, #0]
   80bce:	601a      	str	r2, [r3, #0]

	return read;
   80bd0:	68bb      	ldr	r3, [r7, #8]
}
   80bd2:	4618      	mov	r0, r3
   80bd4:	3714      	adds	r7, #20
   80bd6:	46bd      	mov	sp, r7
   80bd8:	bd90      	pop	{r4, r7, pc}
   80bda:	bf00      	nop
   80bdc:	2007a934 	.word	0x2007a934
   80be0:	00080a25 	.word	0x00080a25
   80be4:	2007a92c 	.word	0x2007a92c

00080be8 <update_spibuffer_with_new_page>:
/* currently loaded into memory.										*/
/* @NOTE: even though this is a 16-bit variable, we are only using the 	*/
/* lower 8 bits.														*/
/************************************************************************/
uint32_t update_spibuffer_with_new_page(uint32_t addr, uint8_t* data_buff, uint32_t size)
{
   80be8:	b580      	push	{r7, lr}
   80bea:	b088      	sub	sp, #32
   80bec:	af00      	add	r7, sp, #0
   80bee:	60f8      	str	r0, [r7, #12]
   80bf0:	60b9      	str	r1, [r7, #8]
   80bf2:	607a      	str	r2, [r7, #4]
	uint32_t sect_num, page_num, index, i;

	page_num = get_page(addr);
   80bf4:	68f8      	ldr	r0, [r7, #12]
   80bf6:	4b15      	ldr	r3, [pc, #84]	; (80c4c <update_spibuffer_with_new_page+0x64>)
   80bf8:	4798      	blx	r3
   80bfa:	61b8      	str	r0, [r7, #24]
	sect_num = page_num << 4;		// Get the sector number that we wish to write to.
   80bfc:	69bb      	ldr	r3, [r7, #24]
   80bfe:	011b      	lsls	r3, r3, #4
   80c00:	617b      	str	r3, [r7, #20]
	index = addr & 0x00000FFF;
   80c02:	68fb      	ldr	r3, [r7, #12]
   80c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
   80c08:	613b      	str	r3, [r7, #16]

	if(sect_num != spi_mem_buff_sect_num)	// The desired page write does not belong to the sector currently in memory.
   80c0a:	4b11      	ldr	r3, [pc, #68]	; (80c50 <update_spibuffer_with_new_page+0x68>)
   80c0c:	681b      	ldr	r3, [r3, #0]
   80c0e:	697a      	ldr	r2, [r7, #20]
   80c10:	429a      	cmp	r2, r3
   80c12:	d002      	beq.n	80c1a <update_spibuffer_with_new_page+0x32>
		return -1;
   80c14:	f04f 33ff 	mov.w	r3, #4294967295
   80c18:	e013      	b.n	80c42 <update_spibuffer_with_new_page+0x5a>

	for (i = 0; i < size; i++)
   80c1a:	2300      	movs	r3, #0
   80c1c:	61fb      	str	r3, [r7, #28]
   80c1e:	e00b      	b.n	80c38 <update_spibuffer_with_new_page+0x50>
	{
		spi_mem_buff[index + i] = *(data_buff + i);
   80c20:	693a      	ldr	r2, [r7, #16]
   80c22:	69fb      	ldr	r3, [r7, #28]
   80c24:	4413      	add	r3, r2
   80c26:	68b9      	ldr	r1, [r7, #8]
   80c28:	69fa      	ldr	r2, [r7, #28]
   80c2a:	440a      	add	r2, r1
   80c2c:	7811      	ldrb	r1, [r2, #0]
   80c2e:	4a09      	ldr	r2, [pc, #36]	; (80c54 <update_spibuffer_with_new_page+0x6c>)
   80c30:	54d1      	strb	r1, [r2, r3]
	index = addr & 0x00000FFF;

	if(sect_num != spi_mem_buff_sect_num)	// The desired page write does not belong to the sector currently in memory.
		return -1;

	for (i = 0; i < size; i++)
   80c32:	69fb      	ldr	r3, [r7, #28]
   80c34:	3301      	adds	r3, #1
   80c36:	61fb      	str	r3, [r7, #28]
   80c38:	69fa      	ldr	r2, [r7, #28]
   80c3a:	687b      	ldr	r3, [r7, #4]
   80c3c:	429a      	cmp	r2, r3
   80c3e:	d3ef      	bcc.n	80c20 <update_spibuffer_with_new_page+0x38>
	{
		spi_mem_buff[index + i] = *(data_buff + i);
	}

	return 1;
   80c40:	2301      	movs	r3, #1
}
   80c42:	4618      	mov	r0, r3
   80c44:	3720      	adds	r7, #32
   80c46:	46bd      	mov	sp, r7
   80c48:	bd80      	pop	{r7, pc}
   80c4a:	bf00      	nop
   80c4c:	00080ca5 	.word	0x00080ca5
   80c50:	2007a92c 	.word	0x2007a92c
   80c54:	2007a934 	.word	0x2007a934

00080c58 <check_page>:
/* @param: page_num: The page that we would like to see the status of.	*/
/* @purpose: This function either returns 1 or 0 to indicate a dirty or */
/* a clean page respectively.											*/
/************************************************************************/
uint32_t check_page(uint32_t page_num)
{
   80c58:	b480      	push	{r7}
   80c5a:	b085      	sub	sp, #20
   80c5c:	af00      	add	r7, sp, #0
   80c5e:	6078      	str	r0, [r7, #4]
	uint32_t byte_offset, integer_number;
	if (page_num > 0xFFF)					// Invalid Page Number
   80c60:	687b      	ldr	r3, [r7, #4]
   80c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   80c66:	d302      	bcc.n	80c6e <check_page+0x16>
	return  -1;
   80c68:	f04f 33ff 	mov.w	r3, #4294967295
   80c6c:	e012      	b.n	80c94 <check_page+0x3c>
	byte_offset = page_num % 32;
   80c6e:	687b      	ldr	r3, [r7, #4]
   80c70:	f003 031f 	and.w	r3, r3, #31
   80c74:	60fb      	str	r3, [r7, #12]
	integer_number = page_num / 32;
   80c76:	687b      	ldr	r3, [r7, #4]
   80c78:	095b      	lsrs	r3, r3, #5
   80c7a:	60bb      	str	r3, [r7, #8]
	
	return (spi_bit_map[integer_number] & (1 << byte_offset)) >> byte_offset;
   80c7c:	4b08      	ldr	r3, [pc, #32]	; (80ca0 <check_page+0x48>)
   80c7e:	68ba      	ldr	r2, [r7, #8]
   80c80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80c84:	68fb      	ldr	r3, [r7, #12]
   80c86:	2101      	movs	r1, #1
   80c88:	fa01 f303 	lsl.w	r3, r1, r3
   80c8c:	401a      	ands	r2, r3
   80c8e:	68fb      	ldr	r3, [r7, #12]
   80c90:	fa22 f303 	lsr.w	r3, r2, r3
}
   80c94:	4618      	mov	r0, r3
   80c96:	3714      	adds	r7, #20
   80c98:	46bd      	mov	sp, r7
   80c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c9e:	4770      	bx	lr
   80ca0:	2007a72c 	.word	0x2007a72c

00080ca4 <get_page>:
/* @param: addr: unaltered 24-bit address to the SPI-CHIP.				*/
/* @purpose: This function returns the page number of the address which	*/
/* was requested.														*/
/************************************************************************/
uint32_t get_page(uint32_t addr)
{
   80ca4:	b480      	push	{r7}
   80ca6:	b083      	sub	sp, #12
   80ca8:	af00      	add	r7, sp, #0
   80caa:	6078      	str	r0, [r7, #4]
	return (addr >> 8);
   80cac:	687b      	ldr	r3, [r7, #4]
   80cae:	0a1b      	lsrs	r3, r3, #8
}
   80cb0:	4618      	mov	r0, r3
   80cb2:	370c      	adds	r7, #12
   80cb4:	46bd      	mov	sp, r7
   80cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cba:	4770      	bx	lr

00080cbc <get_sector>:
/* @param: addr: unaltered 24-bit address to the SPI-CHIP.				*/
/* @purpose: This function returns the sector number of the address 	*/
/* which was requested.													*/
/************************************************************************/
uint32_t get_sector(uint32_t addr)
{
   80cbc:	b480      	push	{r7}
   80cbe:	b083      	sub	sp, #12
   80cc0:	af00      	add	r7, sp, #0
   80cc2:	6078      	str	r0, [r7, #4]
	return (addr >> 12);
   80cc4:	687b      	ldr	r3, [r7, #4]
   80cc6:	0b1b      	lsrs	r3, r3, #12
}
   80cc8:	4618      	mov	r0, r3
   80cca:	370c      	adds	r7, #12
   80ccc:	46bd      	mov	sp, r7
   80cce:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cd2:	4770      	bx	lr

00080cd4 <get_spimem_status_h>:
/* memory chip that was requested.										*/
/* @NOTE: This function is a helper and is ONLY to be used within a 	*/
/* section of code which has acquired the Spi0_Mutex.					*/
/************************************************************************/
static uint8_t get_spimem_status_h(uint32_t spi_chip)
{
   80cd4:	b580      	push	{r7, lr}
   80cd6:	b084      	sub	sp, #16
   80cd8:	af00      	add	r7, sp, #0
   80cda:	6078      	str	r0, [r7, #4]
	uint16_t dumbuf[2];
	dumbuf[0] = RSR;											// Read Status Register.
   80cdc:	2305      	movs	r3, #5
   80cde:	81bb      	strh	r3, [r7, #12]
	dumbuf[1] = 0x00;
   80ce0:	2300      	movs	r3, #0
   80ce2:	81fb      	strh	r3, [r7, #14]

	spi_master_transfer(dumbuf, 2, (uint8_t)spi_chip);
   80ce4:	687b      	ldr	r3, [r7, #4]
   80ce6:	b2db      	uxtb	r3, r3
   80ce8:	f107 020c 	add.w	r2, r7, #12
   80cec:	4610      	mov	r0, r2
   80cee:	2102      	movs	r1, #2
   80cf0:	461a      	mov	r2, r3
   80cf2:	4b04      	ldr	r3, [pc, #16]	; (80d04 <get_spimem_status_h+0x30>)
   80cf4:	4798      	blx	r3
	return (uint8_t)dumbuf[1];						// Status of the Chip is returned.
   80cf6:	89fb      	ldrh	r3, [r7, #14]
   80cf8:	b2db      	uxtb	r3, r3
}
   80cfa:	4618      	mov	r0, r3
   80cfc:	3710      	adds	r7, #16
   80cfe:	46bd      	mov	sp, r7
   80d00:	bd80      	pop	{r7, pc}
   80d02:	bf00      	nop
   80d04:	00081879 	.word	0x00081879

00080d08 <set_page_dirty>:
/* within the bitmap.													*/
/* @return: -1 == Failure, 1 == Success.								*/
/* @purpose: This function is used to set a page "DIRTY" within BitMap  */
/************************************************************************/
uint32_t set_page_dirty(uint32_t page_num)
{	
   80d08:	b480      	push	{r7}
   80d0a:	b085      	sub	sp, #20
   80d0c:	af00      	add	r7, sp, #0
   80d0e:	6078      	str	r0, [r7, #4]
	uint32_t byte_offset, integer_number;
	if (page_num > 0xFFF)					// Invalid Page Number
   80d10:	687b      	ldr	r3, [r7, #4]
   80d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   80d16:	d302      	bcc.n	80d1e <set_page_dirty+0x16>
		return  -1;
   80d18:	f04f 33ff 	mov.w	r3, #4294967295
   80d1c:	e015      	b.n	80d4a <set_page_dirty+0x42>
	byte_offset = page_num % 32;
   80d1e:	687b      	ldr	r3, [r7, #4]
   80d20:	f003 031f 	and.w	r3, r3, #31
   80d24:	60fb      	str	r3, [r7, #12]
	integer_number = page_num / 32;
   80d26:	687b      	ldr	r3, [r7, #4]
   80d28:	095b      	lsrs	r3, r3, #5
   80d2a:	60bb      	str	r3, [r7, #8]
	
	spi_bit_map[integer_number] |= (1 << byte_offset);
   80d2c:	4b0a      	ldr	r3, [pc, #40]	; (80d58 <set_page_dirty+0x50>)
   80d2e:	68ba      	ldr	r2, [r7, #8]
   80d30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80d34:	68fb      	ldr	r3, [r7, #12]
   80d36:	2101      	movs	r1, #1
   80d38:	fa01 f303 	lsl.w	r3, r1, r3
   80d3c:	ea42 0103 	orr.w	r1, r2, r3
   80d40:	4b05      	ldr	r3, [pc, #20]	; (80d58 <set_page_dirty+0x50>)
   80d42:	68ba      	ldr	r2, [r7, #8]
   80d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	return 1;
   80d48:	2301      	movs	r3, #1
}
   80d4a:	4618      	mov	r0, r3
   80d4c:	3714      	adds	r7, #20
   80d4e:	46bd      	mov	sp, r7
   80d50:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d54:	4770      	bx	lr
   80d56:	bf00      	nop
   80d58:	2007a72c 	.word	0x2007a72c

00080d5c <erase_sector_on_chip>:
/* a SPI memory chip.													*/
/* @NOTE: This function is a helper and is ONLY to be used within a 	*/
/* section of code which has acquired the Spi0_Mutex.					*/
/************************************************************************/
uint32_t erase_sector_on_chip(uint32_t spi_chip, uint32_t sect_num)
{
   80d5c:	b590      	push	{r4, r7, lr}
   80d5e:	b087      	sub	sp, #28
   80d60:	af00      	add	r7, sp, #0
   80d62:	6078      	str	r0, [r7, #4]
   80d64:	6039      	str	r1, [r7, #0]
	uint16_t msg_buff[5];
	uint32_t addr;

	if(sect_num > 0xFF)							// Invalid Sector Number
   80d66:	683b      	ldr	r3, [r7, #0]
   80d68:	2bff      	cmp	r3, #255	; 0xff
   80d6a:	d902      	bls.n	80d72 <erase_sector_on_chip+0x16>
		return -1;
   80d6c:	f04f 33ff 	mov.w	r3, #4294967295
   80d70:	e030      	b.n	80dd4 <erase_sector_on_chip+0x78>

	if(check_if_wip(spi_chip) != 0)
   80d72:	6878      	ldr	r0, [r7, #4]
   80d74:	4b19      	ldr	r3, [pc, #100]	; (80ddc <erase_sector_on_chip+0x80>)
   80d76:	4798      	blx	r3
   80d78:	4603      	mov	r3, r0
   80d7a:	2b00      	cmp	r3, #0
   80d7c:	d002      	beq.n	80d84 <erase_sector_on_chip+0x28>
		return -1;								// SPI_CHIP is currently tied up or dead, return FAILURE.
   80d7e:	f04f 33ff 	mov.w	r3, #4294967295
   80d82:	e027      	b.n	80dd4 <erase_sector_on_chip+0x78>
		
	addr = sect_num << 12;
   80d84:	683b      	ldr	r3, [r7, #0]
   80d86:	031b      	lsls	r3, r3, #12
   80d88:	617b      	str	r3, [r7, #20]

	msg_buff[0] = WREN;
   80d8a:	2306      	movs	r3, #6
   80d8c:	813b      	strh	r3, [r7, #8]
	msg_buff[1] = SE;
   80d8e:	2320      	movs	r3, #32
   80d90:	817b      	strh	r3, [r7, #10]
	msg_buff[2] = (uint8_t)((addr & 0x000F0000) >> 16);
   80d92:	697b      	ldr	r3, [r7, #20]
   80d94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80d98:	0c1b      	lsrs	r3, r3, #16
   80d9a:	b2db      	uxtb	r3, r3
   80d9c:	81bb      	strh	r3, [r7, #12]
	msg_buff[3] = (uint8_t)((addr & 0x0000FF00) >> 8);
   80d9e:	697b      	ldr	r3, [r7, #20]
   80da0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   80da4:	0a1b      	lsrs	r3, r3, #8
   80da6:	b2db      	uxtb	r3, r3
   80da8:	81fb      	strh	r3, [r7, #14]
	msg_buff[4] = (uint8_t)(addr & 0x000000FF);
   80daa:	697b      	ldr	r3, [r7, #20]
   80dac:	b2db      	uxtb	r3, r3
   80dae:	823b      	strh	r3, [r7, #16]

	spi_master_transfer(&msg_buff, 5, spi_chip);
   80db0:	687b      	ldr	r3, [r7, #4]
   80db2:	b2db      	uxtb	r3, r3
   80db4:	f107 0208 	add.w	r2, r7, #8
   80db8:	4610      	mov	r0, r2
   80dba:	2105      	movs	r1, #5
   80dbc:	461a      	mov	r2, r3
   80dbe:	4b08      	ldr	r3, [pc, #32]	; (80de0 <erase_sector_on_chip+0x84>)
   80dc0:	4798      	blx	r3

	xSemaphoreGive(Spi0_Mutex);
   80dc2:	4b08      	ldr	r3, [pc, #32]	; (80de4 <erase_sector_on_chip+0x88>)
   80dc4:	681b      	ldr	r3, [r3, #0]
   80dc6:	4618      	mov	r0, r3
   80dc8:	2100      	movs	r1, #0
   80dca:	2200      	movs	r2, #0
   80dcc:	2300      	movs	r3, #0
   80dce:	4c06      	ldr	r4, [pc, #24]	; (80de8 <erase_sector_on_chip+0x8c>)
   80dd0:	47a0      	blx	r4
	return 1;									// Erase Operation Succeeded.	
   80dd2:	2301      	movs	r3, #1
}
   80dd4:	4618      	mov	r0, r3
   80dd6:	371c      	adds	r7, #28
   80dd8:	46bd      	mov	sp, r7
   80dda:	bd90      	pop	{r4, r7, pc}
   80ddc:	00080f25 	.word	0x00080f25
   80de0:	00081879 	.word	0x00081879
   80de4:	2007a930 	.word	0x2007a930
   80de8:	000844ad 	.word	0x000844ad

00080dec <write_sector_back_to_spimem>:
/* back into memory. (The typical sequence is load-erase-writeback      */
/* @NOTE: This function is a helper and is ONLY to be used within a 	*/
/* section of code which has acquired the Spi0_Mutex.					*/
/************************************************************************/
uint32_t write_sector_back_to_spimem(uint32_t spi_chip)
{
   80dec:	b580      	push	{r7, lr}
   80dee:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   80df2:	af00      	add	r7, sp, #0
   80df4:	1d3b      	adds	r3, r7, #4
   80df6:	6018      	str	r0, [r3, #0]
	uint16_t msg_buff[271];
	uint32_t addr, i, j;

	if(check_if_wip(spi_chip) != 0)
   80df8:	1d3b      	adds	r3, r7, #4
   80dfa:	6818      	ldr	r0, [r3, #0]
   80dfc:	4b44      	ldr	r3, [pc, #272]	; (80f10 <write_sector_back_to_spimem+0x124>)
   80dfe:	4798      	blx	r3
   80e00:	4603      	mov	r3, r0
   80e02:	2b00      	cmp	r3, #0
   80e04:	d002      	beq.n	80e0c <write_sector_back_to_spimem+0x20>
		return -1;									// SPI_CHIP is currently tied up or dead, return FAILURE.
   80e06:	f04f 33ff 	mov.w	r3, #4294967295
   80e0a:	e07b      	b.n	80f04 <write_sector_back_to_spimem+0x118>

	addr = spi_mem_buff_sect_num << 12;
   80e0c:	4b41      	ldr	r3, [pc, #260]	; (80f14 <write_sector_back_to_spimem+0x128>)
   80e0e:	681b      	ldr	r3, [r3, #0]
   80e10:	031b      	lsls	r3, r3, #12
   80e12:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

	for (i = 0; i < 16; i++)						// Write the Buffer back, 1 page at a time.
   80e16:	2300      	movs	r3, #0
   80e18:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
   80e1c:	e06b      	b.n	80ef6 <write_sector_back_to_spimem+0x10a>
	{
		msg_buff[0] = WREN;
   80e1e:	f107 030c 	add.w	r3, r7, #12
   80e22:	2206      	movs	r2, #6
   80e24:	801a      	strh	r2, [r3, #0]
		msg_buff[1] = PP;
   80e26:	f107 030c 	add.w	r3, r7, #12
   80e2a:	2202      	movs	r2, #2
   80e2c:	805a      	strh	r2, [r3, #2]
		msg_buff[2] = (uint16_t)(((addr + 256 * i) & 0x000F0000) >> 16);
   80e2e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80e32:	021a      	lsls	r2, r3, #8
   80e34:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
   80e38:	4413      	add	r3, r2
   80e3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80e3e:	0c1b      	lsrs	r3, r3, #16
   80e40:	b29a      	uxth	r2, r3
   80e42:	f107 030c 	add.w	r3, r7, #12
   80e46:	809a      	strh	r2, [r3, #4]
		msg_buff[3] = (uint16_t)(((addr + 256 * i) & 0x0000FF00) >> 8);
   80e48:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80e4c:	021a      	lsls	r2, r3, #8
   80e4e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
   80e52:	4413      	add	r3, r2
   80e54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   80e58:	0a1b      	lsrs	r3, r3, #8
   80e5a:	b29a      	uxth	r2, r3
   80e5c:	f107 030c 	add.w	r3, r7, #12
   80e60:	80da      	strh	r2, [r3, #6]
		msg_buff[4] = (uint16_t)((addr + 256 * i) & 0x000000FF);
   80e62:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
   80e66:	b29a      	uxth	r2, r3
   80e68:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80e6c:	b29b      	uxth	r3, r3
   80e6e:	021b      	lsls	r3, r3, #8
   80e70:	b29b      	uxth	r3, r3
   80e72:	4413      	add	r3, r2
   80e74:	b29b      	uxth	r3, r3
   80e76:	b2db      	uxtb	r3, r3
   80e78:	b29a      	uxth	r2, r3
   80e7a:	f107 030c 	add.w	r3, r7, #12
   80e7e:	811a      	strh	r2, [r3, #8]

		for (j = 5; j < 271; j++)
   80e80:	2305      	movs	r3, #5
   80e82:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
   80e86:	e013      	b.n	80eb0 <write_sector_back_to_spimem+0xc4>
		{
			msg_buff[j] = spi_mem_buff[256 * i + j];
   80e88:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80e8c:	021a      	lsls	r2, r3, #8
   80e8e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
   80e92:	4413      	add	r3, r2
   80e94:	4a20      	ldr	r2, [pc, #128]	; (80f18 <write_sector_back_to_spimem+0x12c>)
   80e96:	5cd3      	ldrb	r3, [r2, r3]
   80e98:	4619      	mov	r1, r3
   80e9a:	f107 030c 	add.w	r3, r7, #12
   80e9e:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
   80ea2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		msg_buff[1] = PP;
		msg_buff[2] = (uint16_t)(((addr + 256 * i) & 0x000F0000) >> 16);
		msg_buff[3] = (uint16_t)(((addr + 256 * i) & 0x0000FF00) >> 8);
		msg_buff[4] = (uint16_t)((addr + 256 * i) & 0x000000FF);

		for (j = 5; j < 271; j++)
   80ea6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
   80eaa:	3301      	adds	r3, #1
   80eac:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
   80eb0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
   80eb4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   80eb8:	d9e6      	bls.n	80e88 <write_sector_back_to_spimem+0x9c>
		{
			msg_buff[j] = spi_mem_buff[256 * i + j];
		}

		spi_master_transfer(&msg_buff, 271, spi_chip);
   80eba:	1d3b      	adds	r3, r7, #4
   80ebc:	681b      	ldr	r3, [r3, #0]
   80ebe:	b2db      	uxtb	r3, r3
   80ec0:	f107 020c 	add.w	r2, r7, #12
   80ec4:	4610      	mov	r0, r2
   80ec6:	f240 110f 	movw	r1, #271	; 0x10f
   80eca:	461a      	mov	r2, r3
   80ecc:	4b13      	ldr	r3, [pc, #76]	; (80f1c <write_sector_back_to_spimem+0x130>)
   80ece:	4798      	blx	r3

		if(check_if_wip(spi_chip) != 0)
   80ed0:	1d3b      	adds	r3, r7, #4
   80ed2:	6818      	ldr	r0, [r3, #0]
   80ed4:	4b0e      	ldr	r3, [pc, #56]	; (80f10 <write_sector_back_to_spimem+0x124>)
   80ed6:	4798      	blx	r3
   80ed8:	4603      	mov	r3, r0
   80eda:	2b00      	cmp	r3, #0
   80edc:	d003      	beq.n	80ee6 <write_sector_back_to_spimem+0xfa>
			return i * 256;							// Write operation took too long, return number of bytes transferred.
   80ede:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80ee2:	021b      	lsls	r3, r3, #8
   80ee4:	e00e      	b.n	80f04 <write_sector_back_to_spimem+0x118>
			
		delay_us(100);								
   80ee6:	2064      	movs	r0, #100	; 0x64
   80ee8:	4b0d      	ldr	r3, [pc, #52]	; (80f20 <write_sector_back_to_spimem+0x134>)
   80eea:	4798      	blx	r3
	if(check_if_wip(spi_chip) != 0)
		return -1;									// SPI_CHIP is currently tied up or dead, return FAILURE.

	addr = spi_mem_buff_sect_num << 12;

	for (i = 0; i < 16; i++)						// Write the Buffer back, 1 page at a time.
   80eec:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80ef0:	3301      	adds	r3, #1
   80ef2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
   80ef6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80efa:	2b0f      	cmp	r3, #15
   80efc:	d98f      	bls.n	80e1e <write_sector_back_to_spimem+0x32>
		if(check_if_wip(spi_chip) != 0)
			return i * 256;							// Write operation took too long, return number of bytes transferred.
			
		delay_us(100);								
	}
	return i * 256;								    // Return the number of bytes which were written to SPI memory.							
   80efe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
   80f02:	021b      	lsls	r3, r3, #8
}
   80f04:	4618      	mov	r0, r3
   80f06:	f507 770e 	add.w	r7, r7, #568	; 0x238
   80f0a:	46bd      	mov	sp, r7
   80f0c:	bd80      	pop	{r7, pc}
   80f0e:	bf00      	nop
   80f10:	00080f25 	.word	0x00080f25
   80f14:	2007a92c 	.word	0x2007a92c
   80f18:	2007a934 	.word	0x2007a934
   80f1c:	00081879 	.word	0x00081879
   80f20:	00081b49 	.word	0x00081b49

00080f24 <check_if_wip>:
/* length of a single page-write operation)								*/
/* @NOTE: This function is ONLY to be used during SPIMEM initialization	*/
/* or when the SPI0 Mutex has already been acquired.					*/
/************************************************************************/
uint32_t check_if_wip(uint32_t spi_chip)
{
   80f24:	b580      	push	{r7, lr}
   80f26:	b086      	sub	sp, #24
   80f28:	af00      	add	r7, sp, #0
   80f2a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint32_t timeout = 100;						// ~10ms timeout.
   80f2c:	2364      	movs	r3, #100	; 0x64
   80f2e:	613b      	str	r3, [r7, #16]
	uint32_t ret_val = -1;;
   80f30:	f04f 33ff 	mov.w	r3, #4294967295
   80f34:	60fb      	str	r3, [r7, #12]

	status = get_spimem_status_h(spi_chip);
   80f36:	6878      	ldr	r0, [r7, #4]
   80f38:	4b18      	ldr	r3, [pc, #96]	; (80f9c <check_if_wip+0x78>)
   80f3a:	4798      	blx	r3
   80f3c:	4603      	mov	r3, r0
   80f3e:	75fb      	strb	r3, [r7, #23]
	status = status & 0x01;
   80f40:	7dfb      	ldrb	r3, [r7, #23]
   80f42:	f003 0301 	and.w	r3, r3, #1
   80f46:	75fb      	strb	r3, [r7, #23]
	
	while((status != 0x00) && (timeout--))			// Wait for WIP to be zero (Write-In-Progess)
   80f48:	e00b      	b.n	80f62 <check_if_wip+0x3e>
	{
		status = get_spimem_status_h(spi_chip);
   80f4a:	6878      	ldr	r0, [r7, #4]
   80f4c:	4b13      	ldr	r3, [pc, #76]	; (80f9c <check_if_wip+0x78>)
   80f4e:	4798      	blx	r3
   80f50:	4603      	mov	r3, r0
   80f52:	75fb      	strb	r3, [r7, #23]
		status = status & 0x01;
   80f54:	7dfb      	ldrb	r3, [r7, #23]
   80f56:	f003 0301 	and.w	r3, r3, #1
   80f5a:	75fb      	strb	r3, [r7, #23]
		delay_us(100);
   80f5c:	2064      	movs	r0, #100	; 0x64
   80f5e:	4b10      	ldr	r3, [pc, #64]	; (80fa0 <check_if_wip+0x7c>)
   80f60:	4798      	blx	r3
	uint32_t ret_val = -1;;

	status = get_spimem_status_h(spi_chip);
	status = status & 0x01;
	
	while((status != 0x00) && (timeout--))			// Wait for WIP to be zero (Write-In-Progess)
   80f62:	7dfb      	ldrb	r3, [r7, #23]
   80f64:	2b00      	cmp	r3, #0
   80f66:	d004      	beq.n	80f72 <check_if_wip+0x4e>
   80f68:	693b      	ldr	r3, [r7, #16]
   80f6a:	1e5a      	subs	r2, r3, #1
   80f6c:	613a      	str	r2, [r7, #16]
   80f6e:	2b00      	cmp	r3, #0
   80f70:	d1eb      	bne.n	80f4a <check_if_wip+0x26>
		status = get_spimem_status_h(spi_chip);
		status = status & 0x01;
		delay_us(100);
	}
	
	if((status == 0x01) || (!timeout))				// Waiting took too long, return FAILURE.
   80f72:	7dfb      	ldrb	r3, [r7, #23]
   80f74:	2b01      	cmp	r3, #1
   80f76:	d002      	beq.n	80f7e <check_if_wip+0x5a>
   80f78:	693b      	ldr	r3, [r7, #16]
   80f7a:	2b00      	cmp	r3, #0
   80f7c:	d101      	bne.n	80f82 <check_if_wip+0x5e>
		return ret_val;
   80f7e:	68fb      	ldr	r3, [r7, #12]
   80f80:	e007      	b.n	80f92 <check_if_wip+0x6e>
		
	if(status == 0x00)								// No Write in Progress, return 0.
   80f82:	7dfb      	ldrb	r3, [r7, #23]
   80f84:	2b00      	cmp	r3, #0
   80f86:	d103      	bne.n	80f90 <check_if_wip+0x6c>
	{
		ret_val = 0;
   80f88:	2300      	movs	r3, #0
   80f8a:	60fb      	str	r3, [r7, #12]
		return ret_val;
   80f8c:	68fb      	ldr	r3, [r7, #12]
   80f8e:	e000      	b.n	80f92 <check_if_wip+0x6e>
	}
	else
		return ret_val;
   80f90:	68fb      	ldr	r3, [r7, #12]
}
   80f92:	4618      	mov	r0, r3
   80f94:	3718      	adds	r7, #24
   80f96:	46bd      	mov	sp, r7
   80f98:	bd80      	pop	{r7, pc}
   80f9a:	bf00      	nop
   80f9c:	00080cd5 	.word	0x00080cd5
   80fa0:	00081b49 	.word	0x00081b49

00080fa4 <spimemtest>:
/* SPIMEMTEST 															*/
/* @Purpose: This function is simply used to create the spimemtesttask  */
/* in main.c															*/
/************************************************************************/
void spimemtest( void )
{
   80fa4:	b590      	push	{r4, r7, lr}
   80fa6:	b085      	sub	sp, #20
   80fa8:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this
	file. */
	xTaskCreate( prvspimemtestTask,					/* The function that implements the task. */
   80faa:	2302      	movs	r3, #2
   80fac:	9300      	str	r3, [sp, #0]
   80fae:	2300      	movs	r3, #0
   80fb0:	9301      	str	r3, [sp, #4]
   80fb2:	2300      	movs	r3, #0
   80fb4:	9302      	str	r3, [sp, #8]
   80fb6:	2300      	movs	r3, #0
   80fb8:	9303      	str	r3, [sp, #12]
   80fba:	4805      	ldr	r0, [pc, #20]	; (80fd0 <spimemtest+0x2c>)
   80fbc:	4905      	ldr	r1, [pc, #20]	; (80fd4 <spimemtest+0x30>)
   80fbe:	2282      	movs	r2, #130	; 0x82
   80fc0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80fc4:	4c04      	ldr	r4, [pc, #16]	; (80fd8 <spimemtest+0x34>)
   80fc6:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80fc8:	bf00      	nop
}
   80fca:	3704      	adds	r7, #4
   80fcc:	46bd      	mov	sp, r7
   80fce:	bd90      	pop	{r4, r7, pc}
   80fd0:	00080fdd 	.word	0x00080fdd
   80fd4:	00087608 	.word	0x00087608
   80fd8:	00084c19 	.word	0x00084c19

00080fdc <prvspimemtestTask>:
/*				PRVSPIMEMTESTTASK		                                */
/*	The sole purpose of this task is to test the functionality of our	*/
/* code for the spi memory chips which is contained in spimem.c/.h		*/
/************************************************************************/
static void prvspimemtestTask(void *pvParameters )
{
   80fdc:	b580      	push	{r7, lr}
   80fde:	b086      	sub	sp, #24
   80fe0:	af00      	add	r7, sp, #0
   80fe2:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == SMT_PARAMETER );
   80fe4:	687a      	ldr	r2, [r7, #4]
   80fe6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80fea:	429a      	cmp	r2, r3
   80fec:	d002      	beq.n	80ff4 <prvspimemtestTask+0x18>
   80fee:	4b29      	ldr	r3, [pc, #164]	; (81094 <prvspimemtestTask+0xb8>)
   80ff0:	4798      	blx	r3
   80ff2:	e7fe      	b.n	80ff2 <prvspimemtestTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 250;	// Number entered here corresponds to the number of ticks we should wait.
   80ff4:	23fa      	movs	r3, #250	; 0xfa
   80ff6:	613b      	str	r3, [r7, #16]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	uint32_t i;

	for(i = 0; i < 4096; i++)			// Fill up the test buffer with something we can verify.
   80ff8:	2300      	movs	r3, #0
   80ffa:	617b      	str	r3, [r7, #20]
   80ffc:	e008      	b.n	81010 <prvspimemtestTask+0x34>
	{
		spi_mem_buff[i] = (uint8_t)(i % 256);
   80ffe:	697b      	ldr	r3, [r7, #20]
   81000:	b2da      	uxtb	r2, r3
   81002:	4925      	ldr	r1, [pc, #148]	; (81098 <prvspimemtestTask+0xbc>)
   81004:	697b      	ldr	r3, [r7, #20]
   81006:	440b      	add	r3, r1
   81008:	701a      	strb	r2, [r3, #0]
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 250;	// Number entered here corresponds to the number of ticks we should wait.
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	uint32_t i;

	for(i = 0; i < 4096; i++)			// Fill up the test buffer with something we can verify.
   8100a:	697b      	ldr	r3, [r7, #20]
   8100c:	3301      	adds	r3, #1
   8100e:	617b      	str	r3, [r7, #20]
   81010:	697b      	ldr	r3, [r7, #20]
   81012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   81016:	d3f2      	bcc.n	80ffe <prvspimemtestTask+0x22>
	{
		spi_mem_buff[i] = (uint8_t)(i % 256);
	}

	for(i = 0; i < 256; i++)
   81018:	2300      	movs	r3, #0
   8101a:	617b      	str	r3, [r7, #20]
   8101c:	e008      	b.n	81030 <prvspimemtestTask+0x54>
	{
		test_page1[i] = (uint8_t)i;
   8101e:	697b      	ldr	r3, [r7, #20]
   81020:	b2da      	uxtb	r2, r3
   81022:	491e      	ldr	r1, [pc, #120]	; (8109c <prvspimemtestTask+0xc0>)
   81024:	697b      	ldr	r3, [r7, #20]
   81026:	440b      	add	r3, r1
   81028:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 4096; i++)			// Fill up the test buffer with something we can verify.
	{
		spi_mem_buff[i] = (uint8_t)(i % 256);
	}

	for(i = 0; i < 256; i++)
   8102a:	697b      	ldr	r3, [r7, #20]
   8102c:	3301      	adds	r3, #1
   8102e:	617b      	str	r3, [r7, #20]
   81030:	697b      	ldr	r3, [r7, #20]
   81032:	2bff      	cmp	r3, #255	; 0xff
   81034:	d9f3      	bls.n	8101e <prvspimemtestTask+0x42>
	{
		test_page1[i] = (uint8_t)i;
	}

	for(i = 0; i < 256; i++)
   81036:	2300      	movs	r3, #0
   81038:	617b      	str	r3, [r7, #20]
   8103a:	e007      	b.n	8104c <prvspimemtestTask+0x70>
	{
		test_page2[i] = 0;
   8103c:	4a18      	ldr	r2, [pc, #96]	; (810a0 <prvspimemtestTask+0xc4>)
   8103e:	697b      	ldr	r3, [r7, #20]
   81040:	4413      	add	r3, r2
   81042:	2200      	movs	r2, #0
   81044:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 256; i++)
	{
		test_page1[i] = (uint8_t)i;
	}

	for(i = 0; i < 256; i++)
   81046:	697b      	ldr	r3, [r7, #20]
   81048:	3301      	adds	r3, #1
   8104a:	617b      	str	r3, [r7, #20]
   8104c:	697b      	ldr	r3, [r7, #20]
   8104e:	2bff      	cmp	r3, #255	; 0xff
   81050:	d9f4      	bls.n	8103c <prvspimemtestTask+0x60>
	}

	/* @non-terminating@ */	
	for( ;; )
	{
		test1_SimpleWriteAndRead(2);
   81052:	2002      	movs	r0, #2
   81054:	4b13      	ldr	r3, [pc, #76]	; (810a4 <prvspimemtestTask+0xc8>)
   81056:	4798      	blx	r3

		test2_SectorEraseAndRead(2);
   81058:	2002      	movs	r0, #2
   8105a:	4b13      	ldr	r3, [pc, #76]	; (810a8 <prvspimemtestTask+0xcc>)
   8105c:	4798      	blx	r3

		test3_SectorWriteAndRead(2);
   8105e:	2002      	movs	r0, #2
   81060:	4b12      	ldr	r3, [pc, #72]	; (810ac <prvspimemtestTask+0xd0>)
   81062:	4798      	blx	r3

		test4_SectorEraseAndRead(2);
   81064:	2002      	movs	r0, #2
   81066:	4b12      	ldr	r3, [pc, #72]	; (810b0 <prvspimemtestTask+0xd4>)
   81068:	4798      	blx	r3

		test5_BoundaryWriteAndRead(2);
   8106a:	2002      	movs	r0, #2
   8106c:	4b11      	ldr	r3, [pc, #68]	; (810b4 <prvspimemtestTask+0xd8>)
   8106e:	4798      	blx	r3

		test6_WriteDirtyPageAndRead(2);
   81070:	2002      	movs	r0, #2
   81072:	4b11      	ldr	r3, [pc, #68]	; (810b8 <prvspimemtestTask+0xdc>)
   81074:	4798      	blx	r3

		test7_WriteDirtyPageAndReadAtBoundary(2);
   81076:	2002      	movs	r0, #2
   81078:	4b10      	ldr	r3, [pc, #64]	; (810bc <prvspimemtestTask+0xe0>)
   8107a:	4798      	blx	r3

		xLastWakeTime = xTaskGetTickCount();
   8107c:	4b10      	ldr	r3, [pc, #64]	; (810c0 <prvspimemtestTask+0xe4>)
   8107e:	4798      	blx	r3
   81080:	4603      	mov	r3, r0
   81082:	60fb      	str	r3, [r7, #12]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   81084:	f107 030c 	add.w	r3, r7, #12
   81088:	4618      	mov	r0, r3
   8108a:	6939      	ldr	r1, [r7, #16]
   8108c:	4b0d      	ldr	r3, [pc, #52]	; (810c4 <prvspimemtestTask+0xe8>)
   8108e:	4798      	blx	r3
	}
   81090:	e7df      	b.n	81052 <prvspimemtestTask+0x76>
   81092:	bf00      	nop
   81094:	00083ea5 	.word	0x00083ea5
   81098:	2007a934 	.word	0x2007a934
   8109c:	2007ca34 	.word	0x2007ca34
   810a0:	2007c934 	.word	0x2007c934
   810a4:	000810c9 	.word	0x000810c9
   810a8:	0008115d 	.word	0x0008115d
   810ac:	000811f1 	.word	0x000811f1
   810b0:	0008128d 	.word	0x0008128d
   810b4:	00081321 	.word	0x00081321
   810b8:	000813b5 	.word	0x000813b5
   810bc:	00081449 	.word	0x00081449
   810c0:	00085055 	.word	0x00085055
   810c4:	00084d99 	.word	0x00084d99

000810c8 <test1_SimpleWriteAndRead>:
}
/*-----------------------------------------------------------*/

static void test1_SimpleWriteAndRead(uint8_t spi_chip)
{
   810c8:	b590      	push	{r4, r7, lr}
   810ca:	b089      	sub	sp, #36	; 0x24
   810cc:	af00      	add	r7, sp, #0
   810ce:	4603      	mov	r3, r0
   810d0:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x00000;
   810d2:	2300      	movs	r3, #0
   810d4:	617b      	str	r3, [r7, #20]
	int x, y, z;
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to a single page in chip 2.
   810d6:	79fb      	ldrb	r3, [r7, #7]
   810d8:	4618      	mov	r0, r3
   810da:	6979      	ldr	r1, [r7, #20]
   810dc:	4a1a      	ldr	r2, [pc, #104]	; (81148 <test1_SimpleWriteAndRead+0x80>)
   810de:	f44f 7380 	mov.w	r3, #256	; 0x100
   810e2:	4c1a      	ldr	r4, [pc, #104]	; (8114c <test1_SimpleWriteAndRead+0x84>)
   810e4:	47a0      	blx	r4
   810e6:	6138      	str	r0, [r7, #16]
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.
   810e8:	79fb      	ldrb	r3, [r7, #7]
   810ea:	4618      	mov	r0, r3
   810ec:	6979      	ldr	r1, [r7, #20]
   810ee:	4a18      	ldr	r2, [pc, #96]	; (81150 <test1_SimpleWriteAndRead+0x88>)
   810f0:	f44f 7380 	mov.w	r3, #256	; 0x100
   810f4:	4c17      	ldr	r4, [pc, #92]	; (81154 <test1_SimpleWriteAndRead+0x8c>)
   810f6:	47a0      	blx	r4
   810f8:	60f8      	str	r0, [r7, #12]

	for(i = 0; i < 256; i++)
   810fa:	2300      	movs	r3, #0
   810fc:	61bb      	str	r3, [r7, #24]
   810fe:	e00e      	b.n	8111e <test1_SimpleWriteAndRead+0x56>
	{
		if(test_page1[i] != test_page2[i])
   81100:	4a11      	ldr	r2, [pc, #68]	; (81148 <test1_SimpleWriteAndRead+0x80>)
   81102:	69bb      	ldr	r3, [r7, #24]
   81104:	4413      	add	r3, r2
   81106:	781a      	ldrb	r2, [r3, #0]
   81108:	4911      	ldr	r1, [pc, #68]	; (81150 <test1_SimpleWriteAndRead+0x88>)
   8110a:	69bb      	ldr	r3, [r7, #24]
   8110c:	440b      	add	r3, r1
   8110e:	781b      	ldrb	r3, [r3, #0]
   81110:	429a      	cmp	r2, r3
   81112:	d001      	beq.n	81118 <test1_SimpleWriteAndRead+0x50>
			z = 1;											// z = 1 is the arrays are not equal.
   81114:	2301      	movs	r3, #1
   81116:	61fb      	str	r3, [r7, #28]
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to a single page in chip 2.
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.

	for(i = 0; i < 256; i++)
   81118:	69bb      	ldr	r3, [r7, #24]
   8111a:	3301      	adds	r3, #1
   8111c:	61bb      	str	r3, [r7, #24]
   8111e:	69bb      	ldr	r3, [r7, #24]
   81120:	2bff      	cmp	r3, #255	; 0xff
   81122:	d9ed      	bls.n	81100 <test1_SimpleWriteAndRead+0x38>
		if(test_page1[i] != test_page2[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   81124:	693b      	ldr	r3, [r7, #16]
   81126:	f1b3 3fff 	cmp.w	r3, #4294967295
   8112a:	d006      	beq.n	8113a <test1_SimpleWriteAndRead+0x72>
   8112c:	68fb      	ldr	r3, [r7, #12]
   8112e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81132:	d002      	beq.n	8113a <test1_SimpleWriteAndRead+0x72>
   81134:	69fb      	ldr	r3, [r7, #28]
   81136:	2b01      	cmp	r3, #1
   81138:	d102      	bne.n	81140 <test1_SimpleWriteAndRead+0x78>
		pio_toggle_pin(LED3_GPIO);							// Test 1 Failed.
   8113a:	2057      	movs	r0, #87	; 0x57
   8113c:	4b06      	ldr	r3, [pc, #24]	; (81158 <test1_SimpleWriteAndRead+0x90>)
   8113e:	4798      	blx	r3

	return;
   81140:	bf00      	nop
}
   81142:	3724      	adds	r7, #36	; 0x24
   81144:	46bd      	mov	sp, r7
   81146:	bd90      	pop	{r4, r7, pc}
   81148:	2007ca34 	.word	0x2007ca34
   8114c:	00080725 	.word	0x00080725
   81150:	2007c934 	.word	0x2007c934
   81154:	00080ac5 	.word	0x00080ac5
   81158:	00082eb5 	.word	0x00082eb5

0008115c <test2_SectorEraseAndRead>:

static void test2_SectorEraseAndRead(uint8_t spi_chip)
{
   8115c:	b590      	push	{r4, r7, lr}
   8115e:	b089      	sub	sp, #36	; 0x24
   81160:	af00      	add	r7, sp, #0
   81162:	4603      	mov	r3, r0
   81164:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x00000;
   81166:	2300      	movs	r3, #0
   81168:	617b      	str	r3, [r7, #20]
	uint32_t temp;
	int x, y, z;
	uint32_t i;

	temp = erase_sector_on_chip(spi_chip, 0);
   8116a:	79fb      	ldrb	r3, [r7, #7]
   8116c:	4618      	mov	r0, r3
   8116e:	2100      	movs	r1, #0
   81170:	4b1a      	ldr	r3, [pc, #104]	; (811dc <test2_SectorEraseAndRead+0x80>)
   81172:	4798      	blx	r3
   81174:	6138      	str	r0, [r7, #16]
	x = (int)temp;
   81176:	693b      	ldr	r3, [r7, #16]
   81178:	60fb      	str	r3, [r7, #12]
	y = spimem_read(spi_chip, rand_addr, spi_test_buffer, 4096);		// Read it back.
   8117a:	79fb      	ldrb	r3, [r7, #7]
   8117c:	4618      	mov	r0, r3
   8117e:	6979      	ldr	r1, [r7, #20]
   81180:	4a17      	ldr	r2, [pc, #92]	; (811e0 <test2_SectorEraseAndRead+0x84>)
   81182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81186:	4c17      	ldr	r4, [pc, #92]	; (811e4 <test2_SectorEraseAndRead+0x88>)
   81188:	47a0      	blx	r4
   8118a:	60b8      	str	r0, [r7, #8]

	for(i = 0; i < 4096; i++)
   8118c:	2300      	movs	r3, #0
   8118e:	61bb      	str	r3, [r7, #24]
   81190:	e00e      	b.n	811b0 <test2_SectorEraseAndRead+0x54>
	{
		if(spi_mem_buff[i] != spi_test_buffer[i])
   81192:	4a15      	ldr	r2, [pc, #84]	; (811e8 <test2_SectorEraseAndRead+0x8c>)
   81194:	69bb      	ldr	r3, [r7, #24]
   81196:	4413      	add	r3, r2
   81198:	781a      	ldrb	r2, [r3, #0]
   8119a:	4911      	ldr	r1, [pc, #68]	; (811e0 <test2_SectorEraseAndRead+0x84>)
   8119c:	69bb      	ldr	r3, [r7, #24]
   8119e:	440b      	add	r3, r1
   811a0:	781b      	ldrb	r3, [r3, #0]
   811a2:	429a      	cmp	r2, r3
   811a4:	d001      	beq.n	811aa <test2_SectorEraseAndRead+0x4e>
			z = 1;											// z = 1 is the arrays are not equal.
   811a6:	2301      	movs	r3, #1
   811a8:	61fb      	str	r3, [r7, #28]

	temp = erase_sector_on_chip(spi_chip, 0);
	x = (int)temp;
	y = spimem_read(spi_chip, rand_addr, spi_test_buffer, 4096);		// Read it back.

	for(i = 0; i < 4096; i++)
   811aa:	69bb      	ldr	r3, [r7, #24]
   811ac:	3301      	adds	r3, #1
   811ae:	61bb      	str	r3, [r7, #24]
   811b0:	69bb      	ldr	r3, [r7, #24]
   811b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   811b6:	d3ec      	bcc.n	81192 <test2_SectorEraseAndRead+0x36>
		if(spi_mem_buff[i] != spi_test_buffer[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   811b8:	68fb      	ldr	r3, [r7, #12]
   811ba:	f1b3 3fff 	cmp.w	r3, #4294967295
   811be:	d006      	beq.n	811ce <test2_SectorEraseAndRead+0x72>
   811c0:	68bb      	ldr	r3, [r7, #8]
   811c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   811c6:	d002      	beq.n	811ce <test2_SectorEraseAndRead+0x72>
   811c8:	69fb      	ldr	r3, [r7, #28]
   811ca:	2b01      	cmp	r3, #1
   811cc:	d102      	bne.n	811d4 <test2_SectorEraseAndRead+0x78>
		pio_toggle_pin(LED3_GPIO);							// Test 2 Failed.
   811ce:	2057      	movs	r0, #87	; 0x57
   811d0:	4b06      	ldr	r3, [pc, #24]	; (811ec <test2_SectorEraseAndRead+0x90>)
   811d2:	4798      	blx	r3

	return;
   811d4:	bf00      	nop
}
   811d6:	3724      	adds	r7, #36	; 0x24
   811d8:	46bd      	mov	sp, r7
   811da:	bd90      	pop	{r4, r7, pc}
   811dc:	00080d5d 	.word	0x00080d5d
   811e0:	2007b934 	.word	0x2007b934
   811e4:	00080ac5 	.word	0x00080ac5
   811e8:	2007a934 	.word	0x2007a934
   811ec:	00082eb5 	.word	0x00082eb5

000811f0 <test3_SectorWriteAndRead>:

static void test3_SectorWriteAndRead(uint8_t spi_chip)
{
   811f0:	b590      	push	{r4, r7, lr}
   811f2:	b089      	sub	sp, #36	; 0x24
   811f4:	af00      	add	r7, sp, #0
   811f6:	4603      	mov	r3, r0
   811f8:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x00000;
   811fa:	2300      	movs	r3, #0
   811fc:	617b      	str	r3, [r7, #20]
	uint32_t temp;
	int x, y, z;
	uint32_t i;

	spi_mem_buff_sect_num = 0;
   811fe:	4b1d      	ldr	r3, [pc, #116]	; (81274 <test3_SectorWriteAndRead+0x84>)
   81200:	2200      	movs	r2, #0
   81202:	601a      	str	r2, [r3, #0]
	temp = write_sector_back_to_spimem(spi_chip);						// write spimem_buffer contents to chip.
   81204:	79fb      	ldrb	r3, [r7, #7]
   81206:	4618      	mov	r0, r3
   81208:	4b1b      	ldr	r3, [pc, #108]	; (81278 <test3_SectorWriteAndRead+0x88>)
   8120a:	4798      	blx	r3
   8120c:	6138      	str	r0, [r7, #16]
	x = (int)temp;
   8120e:	693b      	ldr	r3, [r7, #16]
   81210:	60fb      	str	r3, [r7, #12]
	y = spimem_read(spi_chip, rand_addr, spi_test_buffer, 4096);		// Read it back.
   81212:	79fb      	ldrb	r3, [r7, #7]
   81214:	4618      	mov	r0, r3
   81216:	6979      	ldr	r1, [r7, #20]
   81218:	4a18      	ldr	r2, [pc, #96]	; (8127c <test3_SectorWriteAndRead+0x8c>)
   8121a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8121e:	4c18      	ldr	r4, [pc, #96]	; (81280 <test3_SectorWriteAndRead+0x90>)
   81220:	47a0      	blx	r4
   81222:	60b8      	str	r0, [r7, #8]

	for(i = 0; i < 4096; i++)
   81224:	2300      	movs	r3, #0
   81226:	61bb      	str	r3, [r7, #24]
   81228:	e00e      	b.n	81248 <test3_SectorWriteAndRead+0x58>
	{
		if(spi_mem_buff[i] != spi_test_buffer[i])
   8122a:	4a16      	ldr	r2, [pc, #88]	; (81284 <test3_SectorWriteAndRead+0x94>)
   8122c:	69bb      	ldr	r3, [r7, #24]
   8122e:	4413      	add	r3, r2
   81230:	781a      	ldrb	r2, [r3, #0]
   81232:	4912      	ldr	r1, [pc, #72]	; (8127c <test3_SectorWriteAndRead+0x8c>)
   81234:	69bb      	ldr	r3, [r7, #24]
   81236:	440b      	add	r3, r1
   81238:	781b      	ldrb	r3, [r3, #0]
   8123a:	429a      	cmp	r2, r3
   8123c:	d001      	beq.n	81242 <test3_SectorWriteAndRead+0x52>
			z = 1;											// z = 1 is the arrays are not equal.
   8123e:	2301      	movs	r3, #1
   81240:	61fb      	str	r3, [r7, #28]
	spi_mem_buff_sect_num = 0;
	temp = write_sector_back_to_spimem(spi_chip);						// write spimem_buffer contents to chip.
	x = (int)temp;
	y = spimem_read(spi_chip, rand_addr, spi_test_buffer, 4096);		// Read it back.

	for(i = 0; i < 4096; i++)
   81242:	69bb      	ldr	r3, [r7, #24]
   81244:	3301      	adds	r3, #1
   81246:	61bb      	str	r3, [r7, #24]
   81248:	69bb      	ldr	r3, [r7, #24]
   8124a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   8124e:	d3ec      	bcc.n	8122a <test3_SectorWriteAndRead+0x3a>
		if(spi_mem_buff[i] != spi_test_buffer[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   81250:	68fb      	ldr	r3, [r7, #12]
   81252:	f1b3 3fff 	cmp.w	r3, #4294967295
   81256:	d006      	beq.n	81266 <test3_SectorWriteAndRead+0x76>
   81258:	68bb      	ldr	r3, [r7, #8]
   8125a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8125e:	d002      	beq.n	81266 <test3_SectorWriteAndRead+0x76>
   81260:	69fb      	ldr	r3, [r7, #28]
   81262:	2b01      	cmp	r3, #1
   81264:	d102      	bne.n	8126c <test3_SectorWriteAndRead+0x7c>
		pio_toggle_pin(LED3_GPIO);							// Test 3 Failed.
   81266:	2057      	movs	r0, #87	; 0x57
   81268:	4b07      	ldr	r3, [pc, #28]	; (81288 <test3_SectorWriteAndRead+0x98>)
   8126a:	4798      	blx	r3

	return;
   8126c:	bf00      	nop
}
   8126e:	3724      	adds	r7, #36	; 0x24
   81270:	46bd      	mov	sp, r7
   81272:	bd90      	pop	{r4, r7, pc}
   81274:	2007a92c 	.word	0x2007a92c
   81278:	00080ded 	.word	0x00080ded
   8127c:	2007b934 	.word	0x2007b934
   81280:	00080ac5 	.word	0x00080ac5
   81284:	2007a934 	.word	0x2007a934
   81288:	00082eb5 	.word	0x00082eb5

0008128c <test4_SectorEraseAndRead>:

static void test4_SectorEraseAndRead(uint8_t spi_chip)
{
   8128c:	b590      	push	{r4, r7, lr}
   8128e:	b089      	sub	sp, #36	; 0x24
   81290:	af00      	add	r7, sp, #0
   81292:	4603      	mov	r3, r0
   81294:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x00000;
   81296:	2300      	movs	r3, #0
   81298:	617b      	str	r3, [r7, #20]
	uint32_t temp;
	int x, y, z;
	uint32_t i;

	temp = erase_sector_on_chip(spi_chip, 0);
   8129a:	79fb      	ldrb	r3, [r7, #7]
   8129c:	4618      	mov	r0, r3
   8129e:	2100      	movs	r1, #0
   812a0:	4b1a      	ldr	r3, [pc, #104]	; (8130c <test4_SectorEraseAndRead+0x80>)
   812a2:	4798      	blx	r3
   812a4:	6138      	str	r0, [r7, #16]
	x = (int)temp;
   812a6:	693b      	ldr	r3, [r7, #16]
   812a8:	60fb      	str	r3, [r7, #12]
	y = spimem_read(spi_chip, rand_addr, spi_test_buffer, 4096);		// Read it back.
   812aa:	79fb      	ldrb	r3, [r7, #7]
   812ac:	4618      	mov	r0, r3
   812ae:	6979      	ldr	r1, [r7, #20]
   812b0:	4a17      	ldr	r2, [pc, #92]	; (81310 <test4_SectorEraseAndRead+0x84>)
   812b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   812b6:	4c17      	ldr	r4, [pc, #92]	; (81314 <test4_SectorEraseAndRead+0x88>)
   812b8:	47a0      	blx	r4
   812ba:	60b8      	str	r0, [r7, #8]

	for(i = 0; i < 4096; i++)
   812bc:	2300      	movs	r3, #0
   812be:	61bb      	str	r3, [r7, #24]
   812c0:	e00e      	b.n	812e0 <test4_SectorEraseAndRead+0x54>
	{
		if(spi_mem_buff[i] != spi_test_buffer[i])
   812c2:	4a15      	ldr	r2, [pc, #84]	; (81318 <test4_SectorEraseAndRead+0x8c>)
   812c4:	69bb      	ldr	r3, [r7, #24]
   812c6:	4413      	add	r3, r2
   812c8:	781a      	ldrb	r2, [r3, #0]
   812ca:	4911      	ldr	r1, [pc, #68]	; (81310 <test4_SectorEraseAndRead+0x84>)
   812cc:	69bb      	ldr	r3, [r7, #24]
   812ce:	440b      	add	r3, r1
   812d0:	781b      	ldrb	r3, [r3, #0]
   812d2:	429a      	cmp	r2, r3
   812d4:	d001      	beq.n	812da <test4_SectorEraseAndRead+0x4e>
			z = 1;											// z = 1 is the arrays are not equal.
   812d6:	2301      	movs	r3, #1
   812d8:	61fb      	str	r3, [r7, #28]

	temp = erase_sector_on_chip(spi_chip, 0);
	x = (int)temp;
	y = spimem_read(spi_chip, rand_addr, spi_test_buffer, 4096);		// Read it back.

	for(i = 0; i < 4096; i++)
   812da:	69bb      	ldr	r3, [r7, #24]
   812dc:	3301      	adds	r3, #1
   812de:	61bb      	str	r3, [r7, #24]
   812e0:	69bb      	ldr	r3, [r7, #24]
   812e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   812e6:	d3ec      	bcc.n	812c2 <test4_SectorEraseAndRead+0x36>
		if(spi_mem_buff[i] != spi_test_buffer[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   812e8:	68fb      	ldr	r3, [r7, #12]
   812ea:	f1b3 3fff 	cmp.w	r3, #4294967295
   812ee:	d006      	beq.n	812fe <test4_SectorEraseAndRead+0x72>
   812f0:	68bb      	ldr	r3, [r7, #8]
   812f2:	f1b3 3fff 	cmp.w	r3, #4294967295
   812f6:	d002      	beq.n	812fe <test4_SectorEraseAndRead+0x72>
   812f8:	69fb      	ldr	r3, [r7, #28]
   812fa:	2b01      	cmp	r3, #1
   812fc:	d102      	bne.n	81304 <test4_SectorEraseAndRead+0x78>
		pio_toggle_pin(LED3_GPIO);							// Test 4 Failed.
   812fe:	2057      	movs	r0, #87	; 0x57
   81300:	4b06      	ldr	r3, [pc, #24]	; (8131c <test4_SectorEraseAndRead+0x90>)
   81302:	4798      	blx	r3

	return;
   81304:	bf00      	nop
}
   81306:	3724      	adds	r7, #36	; 0x24
   81308:	46bd      	mov	sp, r7
   8130a:	bd90      	pop	{r4, r7, pc}
   8130c:	00080d5d 	.word	0x00080d5d
   81310:	2007b934 	.word	0x2007b934
   81314:	00080ac5 	.word	0x00080ac5
   81318:	2007a934 	.word	0x2007a934
   8131c:	00082eb5 	.word	0x00082eb5

00081320 <test5_BoundaryWriteAndRead>:

static void test5_BoundaryWriteAndRead(uint8_t spi_chip)
{
   81320:	b590      	push	{r4, r7, lr}
   81322:	b089      	sub	sp, #36	; 0x24
   81324:	af00      	add	r7, sp, #0
   81326:	4603      	mov	r3, r0
   81328:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x0000F;
   8132a:	230f      	movs	r3, #15
   8132c:	617b      	str	r3, [r7, #20]
	int x, y, z;
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to 2 pages in chip 2.
   8132e:	79fb      	ldrb	r3, [r7, #7]
   81330:	4618      	mov	r0, r3
   81332:	6979      	ldr	r1, [r7, #20]
   81334:	4a1a      	ldr	r2, [pc, #104]	; (813a0 <test5_BoundaryWriteAndRead+0x80>)
   81336:	f44f 7380 	mov.w	r3, #256	; 0x100
   8133a:	4c1a      	ldr	r4, [pc, #104]	; (813a4 <test5_BoundaryWriteAndRead+0x84>)
   8133c:	47a0      	blx	r4
   8133e:	6138      	str	r0, [r7, #16]
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.
   81340:	79fb      	ldrb	r3, [r7, #7]
   81342:	4618      	mov	r0, r3
   81344:	6979      	ldr	r1, [r7, #20]
   81346:	4a18      	ldr	r2, [pc, #96]	; (813a8 <test5_BoundaryWriteAndRead+0x88>)
   81348:	f44f 7380 	mov.w	r3, #256	; 0x100
   8134c:	4c17      	ldr	r4, [pc, #92]	; (813ac <test5_BoundaryWriteAndRead+0x8c>)
   8134e:	47a0      	blx	r4
   81350:	60f8      	str	r0, [r7, #12]

	for(i = 0; i < 256; i++)
   81352:	2300      	movs	r3, #0
   81354:	61bb      	str	r3, [r7, #24]
   81356:	e00e      	b.n	81376 <test5_BoundaryWriteAndRead+0x56>
	{
		if(test_page1[i] != test_page2[i])
   81358:	4a11      	ldr	r2, [pc, #68]	; (813a0 <test5_BoundaryWriteAndRead+0x80>)
   8135a:	69bb      	ldr	r3, [r7, #24]
   8135c:	4413      	add	r3, r2
   8135e:	781a      	ldrb	r2, [r3, #0]
   81360:	4911      	ldr	r1, [pc, #68]	; (813a8 <test5_BoundaryWriteAndRead+0x88>)
   81362:	69bb      	ldr	r3, [r7, #24]
   81364:	440b      	add	r3, r1
   81366:	781b      	ldrb	r3, [r3, #0]
   81368:	429a      	cmp	r2, r3
   8136a:	d001      	beq.n	81370 <test5_BoundaryWriteAndRead+0x50>
			z = 1;											// z = 1 is the arrays are not equal.
   8136c:	2301      	movs	r3, #1
   8136e:	61fb      	str	r3, [r7, #28]
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to 2 pages in chip 2.
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.

	for(i = 0; i < 256; i++)
   81370:	69bb      	ldr	r3, [r7, #24]
   81372:	3301      	adds	r3, #1
   81374:	61bb      	str	r3, [r7, #24]
   81376:	69bb      	ldr	r3, [r7, #24]
   81378:	2bff      	cmp	r3, #255	; 0xff
   8137a:	d9ed      	bls.n	81358 <test5_BoundaryWriteAndRead+0x38>
		if(test_page1[i] != test_page2[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   8137c:	693b      	ldr	r3, [r7, #16]
   8137e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81382:	d006      	beq.n	81392 <test5_BoundaryWriteAndRead+0x72>
   81384:	68fb      	ldr	r3, [r7, #12]
   81386:	f1b3 3fff 	cmp.w	r3, #4294967295
   8138a:	d002      	beq.n	81392 <test5_BoundaryWriteAndRead+0x72>
   8138c:	69fb      	ldr	r3, [r7, #28]
   8138e:	2b01      	cmp	r3, #1
   81390:	d102      	bne.n	81398 <test5_BoundaryWriteAndRead+0x78>
		pio_toggle_pin(LED3_GPIO);							// Test 5 Failed.
   81392:	2057      	movs	r0, #87	; 0x57
   81394:	4b06      	ldr	r3, [pc, #24]	; (813b0 <test5_BoundaryWriteAndRead+0x90>)
   81396:	4798      	blx	r3

	return;
   81398:	bf00      	nop
}
   8139a:	3724      	adds	r7, #36	; 0x24
   8139c:	46bd      	mov	sp, r7
   8139e:	bd90      	pop	{r4, r7, pc}
   813a0:	2007ca34 	.word	0x2007ca34
   813a4:	00080725 	.word	0x00080725
   813a8:	2007c934 	.word	0x2007c934
   813ac:	00080ac5 	.word	0x00080ac5
   813b0:	00082eb5 	.word	0x00082eb5

000813b4 <test6_WriteDirtyPageAndRead>:

static void test6_WriteDirtyPageAndRead(uint8_t spi_chip)
{
   813b4:	b590      	push	{r4, r7, lr}
   813b6:	b089      	sub	sp, #36	; 0x24
   813b8:	af00      	add	r7, sp, #0
   813ba:	4603      	mov	r3, r0
   813bc:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x00000;
   813be:	2300      	movs	r3, #0
   813c0:	617b      	str	r3, [r7, #20]
	int x, y, z;
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to 2 pages in chip 2.
   813c2:	79fb      	ldrb	r3, [r7, #7]
   813c4:	4618      	mov	r0, r3
   813c6:	6979      	ldr	r1, [r7, #20]
   813c8:	4a1a      	ldr	r2, [pc, #104]	; (81434 <test6_WriteDirtyPageAndRead+0x80>)
   813ca:	f44f 7380 	mov.w	r3, #256	; 0x100
   813ce:	4c1a      	ldr	r4, [pc, #104]	; (81438 <test6_WriteDirtyPageAndRead+0x84>)
   813d0:	47a0      	blx	r4
   813d2:	6138      	str	r0, [r7, #16]
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.
   813d4:	79fb      	ldrb	r3, [r7, #7]
   813d6:	4618      	mov	r0, r3
   813d8:	6979      	ldr	r1, [r7, #20]
   813da:	4a18      	ldr	r2, [pc, #96]	; (8143c <test6_WriteDirtyPageAndRead+0x88>)
   813dc:	f44f 7380 	mov.w	r3, #256	; 0x100
   813e0:	4c17      	ldr	r4, [pc, #92]	; (81440 <test6_WriteDirtyPageAndRead+0x8c>)
   813e2:	47a0      	blx	r4
   813e4:	60f8      	str	r0, [r7, #12]

	for(i = 0; i < 256; i++)
   813e6:	2300      	movs	r3, #0
   813e8:	61bb      	str	r3, [r7, #24]
   813ea:	e00e      	b.n	8140a <test6_WriteDirtyPageAndRead+0x56>
	{
		if(test_page1[i] != test_page2[i])
   813ec:	4a11      	ldr	r2, [pc, #68]	; (81434 <test6_WriteDirtyPageAndRead+0x80>)
   813ee:	69bb      	ldr	r3, [r7, #24]
   813f0:	4413      	add	r3, r2
   813f2:	781a      	ldrb	r2, [r3, #0]
   813f4:	4911      	ldr	r1, [pc, #68]	; (8143c <test6_WriteDirtyPageAndRead+0x88>)
   813f6:	69bb      	ldr	r3, [r7, #24]
   813f8:	440b      	add	r3, r1
   813fa:	781b      	ldrb	r3, [r3, #0]
   813fc:	429a      	cmp	r2, r3
   813fe:	d001      	beq.n	81404 <test6_WriteDirtyPageAndRead+0x50>
			z = 1;											// z = 1 is the arrays are not equal.
   81400:	2301      	movs	r3, #1
   81402:	61fb      	str	r3, [r7, #28]
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to 2 pages in chip 2.
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.

	for(i = 0; i < 256; i++)
   81404:	69bb      	ldr	r3, [r7, #24]
   81406:	3301      	adds	r3, #1
   81408:	61bb      	str	r3, [r7, #24]
   8140a:	69bb      	ldr	r3, [r7, #24]
   8140c:	2bff      	cmp	r3, #255	; 0xff
   8140e:	d9ed      	bls.n	813ec <test6_WriteDirtyPageAndRead+0x38>
		if(test_page1[i] != test_page2[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   81410:	693b      	ldr	r3, [r7, #16]
   81412:	f1b3 3fff 	cmp.w	r3, #4294967295
   81416:	d006      	beq.n	81426 <test6_WriteDirtyPageAndRead+0x72>
   81418:	68fb      	ldr	r3, [r7, #12]
   8141a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8141e:	d002      	beq.n	81426 <test6_WriteDirtyPageAndRead+0x72>
   81420:	69fb      	ldr	r3, [r7, #28]
   81422:	2b01      	cmp	r3, #1
   81424:	d102      	bne.n	8142c <test6_WriteDirtyPageAndRead+0x78>
		pio_toggle_pin(LED3_GPIO);							// Test 6 Failed.
   81426:	2057      	movs	r0, #87	; 0x57
   81428:	4b06      	ldr	r3, [pc, #24]	; (81444 <test6_WriteDirtyPageAndRead+0x90>)
   8142a:	4798      	blx	r3

	return;	
   8142c:	bf00      	nop
}
   8142e:	3724      	adds	r7, #36	; 0x24
   81430:	46bd      	mov	sp, r7
   81432:	bd90      	pop	{r4, r7, pc}
   81434:	2007ca34 	.word	0x2007ca34
   81438:	00080725 	.word	0x00080725
   8143c:	2007c934 	.word	0x2007c934
   81440:	00080ac5 	.word	0x00080ac5
   81444:	00082eb5 	.word	0x00082eb5

00081448 <test7_WriteDirtyPageAndReadAtBoundary>:

static void test7_WriteDirtyPageAndReadAtBoundary(uint8_t spi_chip)
{
   81448:	b590      	push	{r4, r7, lr}
   8144a:	b089      	sub	sp, #36	; 0x24
   8144c:	af00      	add	r7, sp, #0
   8144e:	4603      	mov	r3, r0
   81450:	71fb      	strb	r3, [r7, #7]
	uint32_t rand_addr = 0x00000;
   81452:	2300      	movs	r3, #0
   81454:	617b      	str	r3, [r7, #20]
	int x, y, z;
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to 2 pages in chip 2.
   81456:	79fb      	ldrb	r3, [r7, #7]
   81458:	4618      	mov	r0, r3
   8145a:	6979      	ldr	r1, [r7, #20]
   8145c:	4a1a      	ldr	r2, [pc, #104]	; (814c8 <test7_WriteDirtyPageAndReadAtBoundary+0x80>)
   8145e:	f44f 7380 	mov.w	r3, #256	; 0x100
   81462:	4c1a      	ldr	r4, [pc, #104]	; (814cc <test7_WriteDirtyPageAndReadAtBoundary+0x84>)
   81464:	47a0      	blx	r4
   81466:	6138      	str	r0, [r7, #16]
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.
   81468:	79fb      	ldrb	r3, [r7, #7]
   8146a:	4618      	mov	r0, r3
   8146c:	6979      	ldr	r1, [r7, #20]
   8146e:	4a18      	ldr	r2, [pc, #96]	; (814d0 <test7_WriteDirtyPageAndReadAtBoundary+0x88>)
   81470:	f44f 7380 	mov.w	r3, #256	; 0x100
   81474:	4c17      	ldr	r4, [pc, #92]	; (814d4 <test7_WriteDirtyPageAndReadAtBoundary+0x8c>)
   81476:	47a0      	blx	r4
   81478:	60f8      	str	r0, [r7, #12]

	for(i = 0; i < 256; i++)
   8147a:	2300      	movs	r3, #0
   8147c:	61bb      	str	r3, [r7, #24]
   8147e:	e00e      	b.n	8149e <test7_WriteDirtyPageAndReadAtBoundary+0x56>
	{
		if(test_page1[i] != test_page2[i])
   81480:	4a11      	ldr	r2, [pc, #68]	; (814c8 <test7_WriteDirtyPageAndReadAtBoundary+0x80>)
   81482:	69bb      	ldr	r3, [r7, #24]
   81484:	4413      	add	r3, r2
   81486:	781a      	ldrb	r2, [r3, #0]
   81488:	4911      	ldr	r1, [pc, #68]	; (814d0 <test7_WriteDirtyPageAndReadAtBoundary+0x88>)
   8148a:	69bb      	ldr	r3, [r7, #24]
   8148c:	440b      	add	r3, r1
   8148e:	781b      	ldrb	r3, [r3, #0]
   81490:	429a      	cmp	r2, r3
   81492:	d001      	beq.n	81498 <test7_WriteDirtyPageAndReadAtBoundary+0x50>
			z = 1;											// z = 1 is the arrays are not equal.
   81494:	2301      	movs	r3, #1
   81496:	61fb      	str	r3, [r7, #28]
	uint32_t i;

	x = spimem_write(spi_chip, rand_addr, test_page1, 256);		// Write 256 Bytes to 2 pages in chip 2.
	y = spimem_read(spi_chip, rand_addr, test_page2, 256);			// Read it back.

	for(i = 0; i < 256; i++)
   81498:	69bb      	ldr	r3, [r7, #24]
   8149a:	3301      	adds	r3, #1
   8149c:	61bb      	str	r3, [r7, #24]
   8149e:	69bb      	ldr	r3, [r7, #24]
   814a0:	2bff      	cmp	r3, #255	; 0xff
   814a2:	d9ed      	bls.n	81480 <test7_WriteDirtyPageAndReadAtBoundary+0x38>
		if(test_page1[i] != test_page2[i])
			z = 1;											// z = 1 is the arrays are not equal.
	}

	// SET BREAKPOINT AT PIO_TOGGLE_PIN.
	if((x == -1) || (y == -1) || (z == 1))
   814a4:	693b      	ldr	r3, [r7, #16]
   814a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   814aa:	d006      	beq.n	814ba <test7_WriteDirtyPageAndReadAtBoundary+0x72>
   814ac:	68fb      	ldr	r3, [r7, #12]
   814ae:	f1b3 3fff 	cmp.w	r3, #4294967295
   814b2:	d002      	beq.n	814ba <test7_WriteDirtyPageAndReadAtBoundary+0x72>
   814b4:	69fb      	ldr	r3, [r7, #28]
   814b6:	2b01      	cmp	r3, #1
   814b8:	d102      	bne.n	814c0 <test7_WriteDirtyPageAndReadAtBoundary+0x78>
		pio_toggle_pin(LED3_GPIO);							// Test 7 Failed.
   814ba:	2057      	movs	r0, #87	; 0x57
   814bc:	4b06      	ldr	r3, [pc, #24]	; (814d8 <test7_WriteDirtyPageAndReadAtBoundary+0x90>)
   814be:	4798      	blx	r3

	return;	
   814c0:	bf00      	nop
}
   814c2:	3724      	adds	r7, #36	; 0x24
   814c4:	46bd      	mov	sp, r7
   814c6:	bd90      	pop	{r4, r7, pc}
   814c8:	2007ca34 	.word	0x2007ca34
   814cc:	00080725 	.word	0x00080725
   814d0:	2007c934 	.word	0x2007c934
   814d4:	00080ac5 	.word	0x00080ac5
   814d8:	00082eb5 	.word	0x00082eb5

000814dc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   814dc:	b480      	push	{r7}
   814de:	b083      	sub	sp, #12
   814e0:	af00      	add	r7, sp, #0
   814e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   814e4:	687b      	ldr	r3, [r7, #4]
   814e6:	2b07      	cmp	r3, #7
   814e8:	d825      	bhi.n	81536 <osc_get_rate+0x5a>
   814ea:	a201      	add	r2, pc, #4	; (adr r2, 814f0 <osc_get_rate+0x14>)
   814ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814f0:	00081511 	.word	0x00081511
   814f4:	00081517 	.word	0x00081517
   814f8:	0008151d 	.word	0x0008151d
   814fc:	00081523 	.word	0x00081523
   81500:	00081527 	.word	0x00081527
   81504:	0008152b 	.word	0x0008152b
   81508:	0008152f 	.word	0x0008152f
   8150c:	00081533 	.word	0x00081533
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81510:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81514:	e010      	b.n	81538 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8151a:	e00d      	b.n	81538 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8151c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81520:	e00a      	b.n	81538 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81522:	4b08      	ldr	r3, [pc, #32]	; (81544 <osc_get_rate+0x68>)
   81524:	e008      	b.n	81538 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81526:	4b08      	ldr	r3, [pc, #32]	; (81548 <osc_get_rate+0x6c>)
   81528:	e006      	b.n	81538 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8152a:	4b08      	ldr	r3, [pc, #32]	; (8154c <osc_get_rate+0x70>)
   8152c:	e004      	b.n	81538 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8152e:	4b07      	ldr	r3, [pc, #28]	; (8154c <osc_get_rate+0x70>)
   81530:	e002      	b.n	81538 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81532:	4b06      	ldr	r3, [pc, #24]	; (8154c <osc_get_rate+0x70>)
   81534:	e000      	b.n	81538 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81536:	2300      	movs	r3, #0
}
   81538:	4618      	mov	r0, r3
   8153a:	370c      	adds	r7, #12
   8153c:	46bd      	mov	sp, r7
   8153e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81542:	4770      	bx	lr
   81544:	003d0900 	.word	0x003d0900
   81548:	007a1200 	.word	0x007a1200
   8154c:	00b71b00 	.word	0x00b71b00

00081550 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81550:	b580      	push	{r7, lr}
   81552:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81554:	2006      	movs	r0, #6
   81556:	4b04      	ldr	r3, [pc, #16]	; (81568 <sysclk_get_main_hz+0x18>)
   81558:	4798      	blx	r3
   8155a:	4602      	mov	r2, r0
   8155c:	4613      	mov	r3, r2
   8155e:	00db      	lsls	r3, r3, #3
   81560:	1a9b      	subs	r3, r3, r2
   81562:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81564:	4618      	mov	r0, r3
   81566:	bd80      	pop	{r7, pc}
   81568:	000814dd 	.word	0x000814dd

0008156c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8156c:	b580      	push	{r7, lr}
   8156e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81570:	4b02      	ldr	r3, [pc, #8]	; (8157c <sysclk_get_cpu_hz+0x10>)
   81572:	4798      	blx	r3
   81574:	4603      	mov	r3, r0
   81576:	085b      	lsrs	r3, r3, #1
}
   81578:	4618      	mov	r0, r3
   8157a:	bd80      	pop	{r7, pc}
   8157c:	00081551 	.word	0x00081551

00081580 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   81580:	b480      	push	{r7}
   81582:	b083      	sub	sp, #12
   81584:	af00      	add	r7, sp, #0
   81586:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   81588:	687b      	ldr	r3, [r7, #4]
   8158a:	2280      	movs	r2, #128	; 0x80
   8158c:	601a      	str	r2, [r3, #0]
}
   8158e:	370c      	adds	r7, #12
   81590:	46bd      	mov	sp, r7
   81592:	f85d 7b04 	ldr.w	r7, [sp], #4
   81596:	4770      	bx	lr

00081598 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   81598:	b480      	push	{r7}
   8159a:	b083      	sub	sp, #12
   8159c:	af00      	add	r7, sp, #0
   8159e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   815a0:	687b      	ldr	r3, [r7, #4]
   815a2:	2201      	movs	r2, #1
   815a4:	601a      	str	r2, [r3, #0]
}
   815a6:	370c      	adds	r7, #12
   815a8:	46bd      	mov	sp, r7
   815aa:	f85d 7b04 	ldr.w	r7, [sp], #4
   815ae:	4770      	bx	lr

000815b0 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   815b0:	b480      	push	{r7}
   815b2:	b083      	sub	sp, #12
   815b4:	af00      	add	r7, sp, #0
   815b6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   815b8:	687b      	ldr	r3, [r7, #4]
   815ba:	685b      	ldr	r3, [r3, #4]
   815bc:	f043 0201 	orr.w	r2, r3, #1
   815c0:	687b      	ldr	r3, [r7, #4]
   815c2:	605a      	str	r2, [r3, #4]
}
   815c4:	370c      	adds	r7, #12
   815c6:	46bd      	mov	sp, r7
   815c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   815cc:	4770      	bx	lr
   815ce:	bf00      	nop

000815d0 <spi_set_variable_peripheral_select>:
 * Peripheral Chip Select can be controlled by SPI_TDR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
   815d0:	b480      	push	{r7}
   815d2:	b083      	sub	sp, #12
   815d4:	af00      	add	r7, sp, #0
   815d6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_PS;
   815d8:	687b      	ldr	r3, [r7, #4]
   815da:	685b      	ldr	r3, [r3, #4]
   815dc:	f043 0202 	orr.w	r2, r3, #2
   815e0:	687b      	ldr	r3, [r7, #4]
   815e2:	605a      	str	r2, [r3, #4]
}
   815e4:	370c      	adds	r7, #12
   815e6:	46bd      	mov	sp, r7
   815e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   815ec:	4770      	bx	lr
   815ee:	bf00      	nop

000815f0 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   815f0:	b480      	push	{r7}
   815f2:	b083      	sub	sp, #12
   815f4:	af00      	add	r7, sp, #0
   815f6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   815f8:	687b      	ldr	r3, [r7, #4]
   815fa:	685b      	ldr	r3, [r3, #4]
   815fc:	f023 0204 	bic.w	r2, r3, #4
   81600:	687b      	ldr	r3, [r7, #4]
   81602:	605a      	str	r2, [r3, #4]
}
   81604:	370c      	adds	r7, #12
   81606:	46bd      	mov	sp, r7
   81608:	f85d 7b04 	ldr.w	r7, [sp], #4
   8160c:	4770      	bx	lr
   8160e:	bf00      	nop

00081610 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   81610:	b480      	push	{r7}
   81612:	b083      	sub	sp, #12
   81614:	af00      	add	r7, sp, #0
   81616:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   81618:	687b      	ldr	r3, [r7, #4]
   8161a:	685b      	ldr	r3, [r3, #4]
   8161c:	f043 0210 	orr.w	r2, r3, #16
   81620:	687b      	ldr	r3, [r7, #4]
   81622:	605a      	str	r2, [r3, #4]
}
   81624:	370c      	adds	r7, #12
   81626:	46bd      	mov	sp, r7
   81628:	f85d 7b04 	ldr.w	r7, [sp], #4
   8162c:	4770      	bx	lr
   8162e:	bf00      	nop

00081630 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   81630:	b480      	push	{r7}
   81632:	b083      	sub	sp, #12
   81634:	af00      	add	r7, sp, #0
   81636:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   81638:	687b      	ldr	r3, [r7, #4]
   8163a:	685b      	ldr	r3, [r3, #4]
   8163c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   81640:	687b      	ldr	r3, [r7, #4]
   81642:	605a      	str	r2, [r3, #4]
}
   81644:	370c      	adds	r7, #12
   81646:	46bd      	mov	sp, r7
   81648:	f85d 7b04 	ldr.w	r7, [sp], #4
   8164c:	4770      	bx	lr
   8164e:	bf00      	nop

00081650 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   81650:	b480      	push	{r7}
   81652:	b083      	sub	sp, #12
   81654:	af00      	add	r7, sp, #0
   81656:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   81658:	687b      	ldr	r3, [r7, #4]
   8165a:	691b      	ldr	r3, [r3, #16]
}
   8165c:	4618      	mov	r0, r3
   8165e:	370c      	adds	r7, #12
   81660:	46bd      	mov	sp, r7
   81662:	f85d 7b04 	ldr.w	r7, [sp], #4
   81666:	4770      	bx	lr

00081668 <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   81668:	b580      	push	{r7, lr}
   8166a:	b082      	sub	sp, #8
   8166c:	af00      	add	r7, sp, #0
	static uint16_t data;
	uint8_t uc_pcs;
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   8166e:	4b0c      	ldr	r3, [pc, #48]	; (816a0 <SPI0_Handler+0x38>)
   81670:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   81672:	480c      	ldr	r0, [pc, #48]	; (816a4 <SPI0_Handler+0x3c>)
   81674:	4b0c      	ldr	r3, [pc, #48]	; (816a8 <SPI0_Handler+0x40>)
   81676:	4798      	blx	r3
   81678:	4603      	mov	r3, r0
   8167a:	f003 0301 	and.w	r3, r3, #1
   8167e:	2b00      	cmp	r3, #0
   81680:	d00b      	beq.n	8169a <SPI0_Handler+0x32>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   81682:	1cfb      	adds	r3, r7, #3
   81684:	4807      	ldr	r0, [pc, #28]	; (816a4 <SPI0_Handler+0x3c>)
   81686:	4909      	ldr	r1, [pc, #36]	; (816ac <SPI0_Handler+0x44>)
   81688:	461a      	mov	r2, r3
   8168a:	4b09      	ldr	r3, [pc, #36]	; (816b0 <SPI0_Handler+0x48>)
   8168c:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   8168e:	687b      	ldr	r3, [r7, #4]
   81690:	681b      	ldr	r3, [r3, #0]
   81692:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   81696:	687b      	ldr	r3, [r7, #4]
   81698:	601a      	str	r2, [r3, #0]
	}
}
   8169a:	3708      	adds	r7, #8
   8169c:	46bd      	mov	sp, r7
   8169e:	bd80      	pop	{r7, pc}
   816a0:	4000800c 	.word	0x4000800c
   816a4:	40008000 	.word	0x40008000
   816a8:	00081651 	.word	0x00081651
   816ac:	20070458 	.word	0x20070458
   816b0:	00080211 	.word	0x00080211

000816b4 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   816b4:	b590      	push	{r4, r7, lr}
   816b6:	b085      	sub	sp, #20
   816b8:	af00      	add	r7, sp, #0
	/* Configure an SPI peripheral. */
	uint32_t spi_chip_sel, spi_clk_freq, spi_clk_pol, spi_clk_pha;
	spi_enable_clock(SPI_MASTER_BASE);
   816ba:	4859      	ldr	r0, [pc, #356]	; (81820 <spi_master_initialize+0x16c>)
   816bc:	4b59      	ldr	r3, [pc, #356]	; (81824 <spi_master_initialize+0x170>)
   816be:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   816c0:	4857      	ldr	r0, [pc, #348]	; (81820 <spi_master_initialize+0x16c>)
   816c2:	4b59      	ldr	r3, [pc, #356]	; (81828 <spi_master_initialize+0x174>)
   816c4:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   816c6:	4856      	ldr	r0, [pc, #344]	; (81820 <spi_master_initialize+0x16c>)
   816c8:	4b58      	ldr	r3, [pc, #352]	; (8182c <spi_master_initialize+0x178>)
   816ca:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   816cc:	4854      	ldr	r0, [pc, #336]	; (81820 <spi_master_initialize+0x16c>)
   816ce:	4b58      	ldr	r3, [pc, #352]	; (81830 <spi_master_initialize+0x17c>)
   816d0:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   816d2:	4853      	ldr	r0, [pc, #332]	; (81820 <spi_master_initialize+0x16c>)
   816d4:	4b57      	ldr	r3, [pc, #348]	; (81834 <spi_master_initialize+0x180>)
   816d6:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, spi_get_pcs(2));	// This sets the value of PCS within the Mode Register.
   816d8:	4851      	ldr	r0, [pc, #324]	; (81820 <spi_master_initialize+0x16c>)
   816da:	210b      	movs	r1, #11
   816dc:	4b56      	ldr	r3, [pc, #344]	; (81838 <spi_master_initialize+0x184>)
   816de:	4798      	blx	r3
	spi_set_variable_peripheral_select(SPI_MASTER_BASE);					// PCS needs to be set within each transfer (PCS within SPI_TDR).
   816e0:	484f      	ldr	r0, [pc, #316]	; (81820 <spi_master_initialize+0x16c>)
   816e2:	4b56      	ldr	r3, [pc, #344]	; (8183c <spi_master_initialize+0x188>)
   816e4:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);					// Each CS is to be connected to a single device.
   816e6:	484e      	ldr	r0, [pc, #312]	; (81820 <spi_master_initialize+0x16c>)
   816e8:	4b55      	ldr	r3, [pc, #340]	; (81840 <spi_master_initialize+0x18c>)
   816ea:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   816ec:	484c      	ldr	r0, [pc, #304]	; (81820 <spi_master_initialize+0x16c>)
   816ee:	2100      	movs	r1, #0
   816f0:	4b54      	ldr	r3, [pc, #336]	; (81844 <spi_master_initialize+0x190>)
   816f2:	4798      	blx	r3

	/* Set communication parameters for CS0	*/
	spi_chip_sel = 0;
   816f4:	2300      	movs	r3, #0
   816f6:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 100000;	// SPI CLK for RTC = 100kHz.
   816f8:	4b53      	ldr	r3, [pc, #332]	; (81848 <spi_master_initialize+0x194>)
   816fa:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   816fc:	2301      	movs	r3, #1
   816fe:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   81700:	2300      	movs	r3, #0
   81702:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   81704:	4846      	ldr	r0, [pc, #280]	; (81820 <spi_master_initialize+0x16c>)
   81706:	68f9      	ldr	r1, [r7, #12]
   81708:	2200      	movs	r2, #0
   8170a:	2302      	movs	r3, #2
   8170c:	4c4f      	ldr	r4, [pc, #316]	; (8184c <spi_master_initialize+0x198>)
   8170e:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_16_BIT);
   81710:	4843      	ldr	r0, [pc, #268]	; (81820 <spi_master_initialize+0x16c>)
   81712:	68f9      	ldr	r1, [r7, #12]
   81714:	2280      	movs	r2, #128	; 0x80
   81716:	4b4e      	ldr	r3, [pc, #312]	; (81850 <spi_master_initialize+0x19c>)
   81718:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   8171a:	4b4e      	ldr	r3, [pc, #312]	; (81854 <spi_master_initialize+0x1a0>)
   8171c:	4798      	blx	r3
   8171e:	4603      	mov	r3, r0
   81720:	68b8      	ldr	r0, [r7, #8]
   81722:	4619      	mov	r1, r3
   81724:	4b4c      	ldr	r3, [pc, #304]	; (81858 <spi_master_initialize+0x1a4>)
   81726:	4798      	blx	r3
   81728:	4603      	mov	r3, r0
   8172a:	b2db      	uxtb	r3, r3
   8172c:	483c      	ldr	r0, [pc, #240]	; (81820 <spi_master_initialize+0x16c>)
   8172e:	68f9      	ldr	r1, [r7, #12]
   81730:	461a      	mov	r2, r3
   81732:	4b4a      	ldr	r3, [pc, #296]	; (8185c <spi_master_initialize+0x1a8>)
   81734:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);		// CS rises after SPI transfers have completed.
   81736:	483a      	ldr	r0, [pc, #232]	; (81820 <spi_master_initialize+0x16c>)
   81738:	68f9      	ldr	r1, [r7, #12]
   8173a:	2204      	movs	r2, #4
   8173c:	4b48      	ldr	r3, [pc, #288]	; (81860 <spi_master_initialize+0x1ac>)
   8173e:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   81740:	4837      	ldr	r0, [pc, #220]	; (81820 <spi_master_initialize+0x16c>)
   81742:	68f9      	ldr	r1, [r7, #12]
   81744:	687a      	ldr	r2, [r7, #4]
   81746:	4b47      	ldr	r3, [pc, #284]	; (81864 <spi_master_initialize+0x1b0>)
   81748:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   8174a:	4835      	ldr	r0, [pc, #212]	; (81820 <spi_master_initialize+0x16c>)
   8174c:	68f9      	ldr	r1, [r7, #12]
   8174e:	683a      	ldr	r2, [r7, #0]
   81750:	4b45      	ldr	r3, [pc, #276]	; (81868 <spi_master_initialize+0x1b4>)
   81752:	4798      	blx	r3
	
	/* Set communication parameters for CS1	*/
	spi_chip_sel = 1;
   81754:	2301      	movs	r3, #1
   81756:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 2000000;	// SPI CLK for RTC = 4MHz.
   81758:	4b44      	ldr	r3, [pc, #272]	; (8186c <spi_master_initialize+0x1b8>)
   8175a:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 0;
   8175c:	2300      	movs	r3, #0
   8175e:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   81760:	2300      	movs	r3, #0
   81762:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   81764:	482e      	ldr	r0, [pc, #184]	; (81820 <spi_master_initialize+0x16c>)
   81766:	68f9      	ldr	r1, [r7, #12]
   81768:	2200      	movs	r2, #0
   8176a:	2302      	movs	r3, #2
   8176c:	4c37      	ldr	r4, [pc, #220]	; (8184c <spi_master_initialize+0x198>)
   8176e:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   81770:	482b      	ldr	r0, [pc, #172]	; (81820 <spi_master_initialize+0x16c>)
   81772:	68f9      	ldr	r1, [r7, #12]
   81774:	2200      	movs	r2, #0
   81776:	4b36      	ldr	r3, [pc, #216]	; (81850 <spi_master_initialize+0x19c>)
   81778:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   8177a:	4b36      	ldr	r3, [pc, #216]	; (81854 <spi_master_initialize+0x1a0>)
   8177c:	4798      	blx	r3
   8177e:	4603      	mov	r3, r0
   81780:	68b8      	ldr	r0, [r7, #8]
   81782:	4619      	mov	r1, r3
   81784:	4b34      	ldr	r3, [pc, #208]	; (81858 <spi_master_initialize+0x1a4>)
   81786:	4798      	blx	r3
   81788:	4603      	mov	r3, r0
   8178a:	b2db      	uxtb	r3, r3
   8178c:	4824      	ldr	r0, [pc, #144]	; (81820 <spi_master_initialize+0x16c>)
   8178e:	68f9      	ldr	r1, [r7, #12]
   81790:	461a      	mov	r2, r3
   81792:	4b32      	ldr	r3, [pc, #200]	; (8185c <spi_master_initialize+0x1a8>)
   81794:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);
   81796:	4822      	ldr	r0, [pc, #136]	; (81820 <spi_master_initialize+0x16c>)
   81798:	68f9      	ldr	r1, [r7, #12]
   8179a:	2204      	movs	r2, #4
   8179c:	4b30      	ldr	r3, [pc, #192]	; (81860 <spi_master_initialize+0x1ac>)
   8179e:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   817a0:	481f      	ldr	r0, [pc, #124]	; (81820 <spi_master_initialize+0x16c>)
   817a2:	68f9      	ldr	r1, [r7, #12]
   817a4:	687a      	ldr	r2, [r7, #4]
   817a6:	4b2f      	ldr	r3, [pc, #188]	; (81864 <spi_master_initialize+0x1b0>)
   817a8:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   817aa:	481d      	ldr	r0, [pc, #116]	; (81820 <spi_master_initialize+0x16c>)
   817ac:	68f9      	ldr	r1, [r7, #12]
   817ae:	683a      	ldr	r2, [r7, #0]
   817b0:	4b2d      	ldr	r3, [pc, #180]	; (81868 <spi_master_initialize+0x1b4>)
   817b2:	4798      	blx	r3
	
	/* Set communication parameters for CS2	*/
	spi_chip_sel = 2;
   817b4:	2302      	movs	r3, #2
   817b6:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 40000000;	// SPI CLK for MEM2 = 40MHz.
   817b8:	4b2d      	ldr	r3, [pc, #180]	; (81870 <spi_master_initialize+0x1bc>)
   817ba:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   817bc:	2301      	movs	r3, #1
   817be:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   817c0:	2300      	movs	r3, #0
   817c2:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   817c4:	4816      	ldr	r0, [pc, #88]	; (81820 <spi_master_initialize+0x16c>)
   817c6:	68f9      	ldr	r1, [r7, #12]
   817c8:	2200      	movs	r2, #0
   817ca:	2302      	movs	r3, #2
   817cc:	4c1f      	ldr	r4, [pc, #124]	; (8184c <spi_master_initialize+0x198>)
   817ce:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   817d0:	4813      	ldr	r0, [pc, #76]	; (81820 <spi_master_initialize+0x16c>)
   817d2:	68f9      	ldr	r1, [r7, #12]
   817d4:	2200      	movs	r2, #0
   817d6:	4b1e      	ldr	r3, [pc, #120]	; (81850 <spi_master_initialize+0x19c>)
   817d8:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz()));
   817da:	4b1e      	ldr	r3, [pc, #120]	; (81854 <spi_master_initialize+0x1a0>)
   817dc:	4798      	blx	r3
   817de:	4603      	mov	r3, r0
   817e0:	68b8      	ldr	r0, [r7, #8]
   817e2:	4619      	mov	r1, r3
   817e4:	4b1c      	ldr	r3, [pc, #112]	; (81858 <spi_master_initialize+0x1a4>)
   817e6:	4798      	blx	r3
   817e8:	4603      	mov	r3, r0
   817ea:	b2db      	uxtb	r3, r3
   817ec:	480c      	ldr	r0, [pc, #48]	; (81820 <spi_master_initialize+0x16c>)
   817ee:	68f9      	ldr	r1, [r7, #12]
   817f0:	461a      	mov	r2, r3
   817f2:	4b1a      	ldr	r3, [pc, #104]	; (8185c <spi_master_initialize+0x1a8>)
   817f4:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_KEEP_LOW);
   817f6:	480a      	ldr	r0, [pc, #40]	; (81820 <spi_master_initialize+0x16c>)
   817f8:	68f9      	ldr	r1, [r7, #12]
   817fa:	2208      	movs	r2, #8
   817fc:	4b18      	ldr	r3, [pc, #96]	; (81860 <spi_master_initialize+0x1ac>)
   817fe:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   81800:	4807      	ldr	r0, [pc, #28]	; (81820 <spi_master_initialize+0x16c>)
   81802:	68f9      	ldr	r1, [r7, #12]
   81804:	687a      	ldr	r2, [r7, #4]
   81806:	4b17      	ldr	r3, [pc, #92]	; (81864 <spi_master_initialize+0x1b0>)
   81808:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   8180a:	4805      	ldr	r0, [pc, #20]	; (81820 <spi_master_initialize+0x16c>)
   8180c:	68f9      	ldr	r1, [r7, #12]
   8180e:	683a      	ldr	r2, [r7, #0]
   81810:	4b15      	ldr	r3, [pc, #84]	; (81868 <spi_master_initialize+0x1b4>)
   81812:	4798      	blx	r3
	
	/* Enable SPI Communication */
	spi_enable(SPI_MASTER_BASE);
   81814:	4802      	ldr	r0, [pc, #8]	; (81820 <spi_master_initialize+0x16c>)
   81816:	4b17      	ldr	r3, [pc, #92]	; (81874 <spi_master_initialize+0x1c0>)
   81818:	4798      	blx	r3
}
   8181a:	3714      	adds	r7, #20
   8181c:	46bd      	mov	sp, r7
   8181e:	bd90      	pop	{r4, r7, pc}
   81820:	40008000 	.word	0x40008000
   81824:	00080189 	.word	0x00080189
   81828:	00081581 	.word	0x00081581
   8182c:	000815b1 	.word	0x000815b1
   81830:	00081611 	.word	0x00081611
   81834:	00081631 	.word	0x00081631
   81838:	000801ad 	.word	0x000801ad
   8183c:	000815d1 	.word	0x000815d1
   81840:	000815f1 	.word	0x000815f1
   81844:	000801e1 	.word	0x000801e1
   81848:	000186a0 	.word	0x000186a0
   8184c:	00080511 	.word	0x00080511
   81850:	00080439 	.word	0x00080439
   81854:	0008156d 	.word	0x0008156d
   81858:	00080481 	.word	0x00080481
   8185c:	000804c1 	.word	0x000804c1
   81860:	00080395 	.word	0x00080395
   81864:	000802f5 	.word	0x000802f5
   81868:	00080345 	.word	0x00080345
   8186c:	001e8480 	.word	0x001e8480
   81870:	02625a00 	.word	0x02625a00
   81874:	00081599 	.word	0x00081599

00081878 <spi_master_transfer>:
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
void spi_master_transfer(void *p_buf, uint32_t size, uint8_t chip_sel)
{
   81878:	b590      	push	{r4, r7, lr}
   8187a:	b089      	sub	sp, #36	; 0x24
   8187c:	af00      	add	r7, sp, #0
   8187e:	60f8      	str	r0, [r7, #12]
   81880:	60b9      	str	r1, [r7, #8]
   81882:	4613      	mov	r3, r2
   81884:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0;
   81886:	2300      	movs	r3, #0
   81888:	61fb      	str	r3, [r7, #28]
	uint8_t* pcs;
	*pcs = spi_get_pcs(chip_sel);
   8188a:	79fb      	ldrb	r3, [r7, #7]
   8188c:	2201      	movs	r2, #1
   8188e:	fa02 f303 	lsl.w	r3, r2, r3
   81892:	b2db      	uxtb	r3, r3
   81894:	43db      	mvns	r3, r3
   81896:	b2db      	uxtb	r3, r3
   81898:	f003 030f 	and.w	r3, r3, #15
   8189c:	b2da      	uxtb	r2, r3
   8189e:	69bb      	ldr	r3, [r7, #24]
   818a0:	701a      	strb	r2, [r3, #0]
	uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   818a2:	68fb      	ldr	r3, [r7, #12]
   818a4:	617b      	str	r3, [r7, #20]
	
	if(size == 1)	// Only transfer a single message.
   818a6:	68bb      	ldr	r3, [r7, #8]
   818a8:	2b01      	cmp	r3, #1
   818aa:	d123      	bne.n	818f4 <spi_master_transfer+0x7c>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], *pcs, 1);
   818ac:	69fb      	ldr	r3, [r7, #28]
   818ae:	005b      	lsls	r3, r3, #1
   818b0:	697a      	ldr	r2, [r7, #20]
   818b2:	4413      	add	r3, r2
   818b4:	881a      	ldrh	r2, [r3, #0]
   818b6:	69bb      	ldr	r3, [r7, #24]
   818b8:	781b      	ldrb	r3, [r3, #0]
   818ba:	483c      	ldr	r0, [pc, #240]	; (819ac <spi_master_transfer+0x134>)
   818bc:	4611      	mov	r1, r2
   818be:	461a      	mov	r2, r3
   818c0:	2301      	movs	r3, #1
   818c2:	4c3b      	ldr	r4, [pc, #236]	; (819b0 <spi_master_transfer+0x138>)
   818c4:	47a0      	blx	r4
		// The last parameter above tells SPI whether this is the last byte to be transferred.
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   818c6:	bf00      	nop
   818c8:	4838      	ldr	r0, [pc, #224]	; (819ac <spi_master_transfer+0x134>)
   818ca:	4b3a      	ldr	r3, [pc, #232]	; (819b4 <spi_master_transfer+0x13c>)
   818cc:	4798      	blx	r3
   818ce:	4603      	mov	r3, r0
   818d0:	f003 0301 	and.w	r3, r3, #1
   818d4:	2b00      	cmp	r3, #0
   818d6:	d0f7      	beq.n	818c8 <spi_master_transfer+0x50>
		spi_read(SPI_MASTER_BASE, &data, pcs);
   818d8:	f107 0312 	add.w	r3, r7, #18
   818dc:	4833      	ldr	r0, [pc, #204]	; (819ac <spi_master_transfer+0x134>)
   818de:	4619      	mov	r1, r3
   818e0:	69ba      	ldr	r2, [r7, #24]
   818e2:	4b35      	ldr	r3, [pc, #212]	; (819b8 <spi_master_transfer+0x140>)
   818e4:	4798      	blx	r3
		p_buffer[i] = data;
   818e6:	69fb      	ldr	r3, [r7, #28]
   818e8:	005b      	lsls	r3, r3, #1
   818ea:	697a      	ldr	r2, [r7, #20]
   818ec:	4413      	add	r3, r2
   818ee:	8a7a      	ldrh	r2, [r7, #18]
   818f0:	801a      	strh	r2, [r3, #0]
		return;
   818f2:	e057      	b.n	819a4 <spi_master_transfer+0x12c>
	}
	
	// Keep CS low for the duration of the transfer, set high @ end.
	for (i = 0; i < (size - 1); i++) 
   818f4:	2300      	movs	r3, #0
   818f6:	61fb      	str	r3, [r7, #28]
   818f8:	e025      	b.n	81946 <spi_master_transfer+0xce>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], *pcs, 0);	
   818fa:	69fb      	ldr	r3, [r7, #28]
   818fc:	005b      	lsls	r3, r3, #1
   818fe:	697a      	ldr	r2, [r7, #20]
   81900:	4413      	add	r3, r2
   81902:	881a      	ldrh	r2, [r3, #0]
   81904:	69bb      	ldr	r3, [r7, #24]
   81906:	781b      	ldrb	r3, [r3, #0]
   81908:	4828      	ldr	r0, [pc, #160]	; (819ac <spi_master_transfer+0x134>)
   8190a:	4611      	mov	r1, r2
   8190c:	461a      	mov	r2, r3
   8190e:	2300      	movs	r3, #0
   81910:	4c27      	ldr	r4, [pc, #156]	; (819b0 <spi_master_transfer+0x138>)
   81912:	47a0      	blx	r4
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   81914:	bf00      	nop
   81916:	4825      	ldr	r0, [pc, #148]	; (819ac <spi_master_transfer+0x134>)
   81918:	4b26      	ldr	r3, [pc, #152]	; (819b4 <spi_master_transfer+0x13c>)
   8191a:	4798      	blx	r3
   8191c:	4603      	mov	r3, r0
   8191e:	f003 0301 	and.w	r3, r3, #1
   81922:	2b00      	cmp	r3, #0
   81924:	d0f7      	beq.n	81916 <spi_master_transfer+0x9e>
		spi_read(SPI_MASTER_BASE, &data, pcs);
   81926:	f107 0312 	add.w	r3, r7, #18
   8192a:	4820      	ldr	r0, [pc, #128]	; (819ac <spi_master_transfer+0x134>)
   8192c:	4619      	mov	r1, r3
   8192e:	69ba      	ldr	r2, [r7, #24]
   81930:	4b21      	ldr	r3, [pc, #132]	; (819b8 <spi_master_transfer+0x140>)
   81932:	4798      	blx	r3
		p_buffer[i] = data;
   81934:	69fb      	ldr	r3, [r7, #28]
   81936:	005b      	lsls	r3, r3, #1
   81938:	697a      	ldr	r2, [r7, #20]
   8193a:	4413      	add	r3, r2
   8193c:	8a7a      	ldrh	r2, [r7, #18]
   8193e:	801a      	strh	r2, [r3, #0]
		p_buffer[i] = data;
		return;
	}
	
	// Keep CS low for the duration of the transfer, set high @ end.
	for (i = 0; i < (size - 1); i++) 
   81940:	69fb      	ldr	r3, [r7, #28]
   81942:	3301      	adds	r3, #1
   81944:	61fb      	str	r3, [r7, #28]
   81946:	68bb      	ldr	r3, [r7, #8]
   81948:	1e5a      	subs	r2, r3, #1
   8194a:	69fb      	ldr	r3, [r7, #28]
   8194c:	429a      	cmp	r2, r3
   8194e:	d8d4      	bhi.n	818fa <spi_master_transfer+0x82>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, pcs);
		p_buffer[i] = data;
	}
	spi_write(SPI_MASTER_BASE, p_buffer[(size - 1)], *pcs, 1);
   81950:	68bb      	ldr	r3, [r7, #8]
   81952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   81956:	3b01      	subs	r3, #1
   81958:	005b      	lsls	r3, r3, #1
   8195a:	697a      	ldr	r2, [r7, #20]
   8195c:	4413      	add	r3, r2
   8195e:	881a      	ldrh	r2, [r3, #0]
   81960:	69bb      	ldr	r3, [r7, #24]
   81962:	781b      	ldrb	r3, [r3, #0]
   81964:	4811      	ldr	r0, [pc, #68]	; (819ac <spi_master_transfer+0x134>)
   81966:	4611      	mov	r1, r2
   81968:	461a      	mov	r2, r3
   8196a:	2301      	movs	r3, #1
   8196c:	4c10      	ldr	r4, [pc, #64]	; (819b0 <spi_master_transfer+0x138>)
   8196e:	47a0      	blx	r4
	/* Wait transfer done. */
	while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   81970:	bf00      	nop
   81972:	480e      	ldr	r0, [pc, #56]	; (819ac <spi_master_transfer+0x134>)
   81974:	4b0f      	ldr	r3, [pc, #60]	; (819b4 <spi_master_transfer+0x13c>)
   81976:	4798      	blx	r3
   81978:	4603      	mov	r3, r0
   8197a:	f003 0301 	and.w	r3, r3, #1
   8197e:	2b00      	cmp	r3, #0
   81980:	d0f7      	beq.n	81972 <spi_master_transfer+0xfa>
	spi_read(SPI_MASTER_BASE, &data, pcs);
   81982:	f107 0312 	add.w	r3, r7, #18
   81986:	4809      	ldr	r0, [pc, #36]	; (819ac <spi_master_transfer+0x134>)
   81988:	4619      	mov	r1, r3
   8198a:	69ba      	ldr	r2, [r7, #24]
   8198c:	4b0a      	ldr	r3, [pc, #40]	; (819b8 <spi_master_transfer+0x140>)
   8198e:	4798      	blx	r3
	p_buffer[(size - 1)] = data;
   81990:	68bb      	ldr	r3, [r7, #8]
   81992:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
   81996:	3b01      	subs	r3, #1
   81998:	005b      	lsls	r3, r3, #1
   8199a:	697a      	ldr	r2, [r7, #20]
   8199c:	4413      	add	r3, r2
   8199e:	8a7a      	ldrh	r2, [r7, #18]
   819a0:	801a      	strh	r2, [r3, #0]
	return;
   819a2:	bf00      	nop
}
   819a4:	3724      	adds	r7, #36	; 0x24
   819a6:	46bd      	mov	sp, r7
   819a8:	bd90      	pop	{r4, r7, pc}
   819aa:	bf00      	nop
   819ac:	40008000 	.word	0x40008000
   819b0:	00080281 	.word	0x00080281
   819b4:	00081651 	.word	0x00081651
   819b8:	00080211 	.word	0x00080211

000819bc <spi_master_transfer_keepcslow>:

void spi_master_transfer_keepcslow(void *p_buf, uint32_t size, uint8_t chip_sel)
{
   819bc:	b590      	push	{r4, r7, lr}
   819be:	b089      	sub	sp, #36	; 0x24
   819c0:	af00      	add	r7, sp, #0
   819c2:	60f8      	str	r0, [r7, #12]
   819c4:	60b9      	str	r1, [r7, #8]
   819c6:	4613      	mov	r3, r2
   819c8:	71fb      	strb	r3, [r7, #7]
	uint32_t i = 0;
   819ca:	2300      	movs	r3, #0
   819cc:	61fb      	str	r3, [r7, #28]
	uint8_t* pcs;
	*pcs = spi_get_pcs(chip_sel);
   819ce:	79fb      	ldrb	r3, [r7, #7]
   819d0:	2201      	movs	r2, #1
   819d2:	fa02 f303 	lsl.w	r3, r2, r3
   819d6:	b2db      	uxtb	r3, r3
   819d8:	43db      	mvns	r3, r3
   819da:	b2db      	uxtb	r3, r3
   819dc:	f003 030f 	and.w	r3, r3, #15
   819e0:	b2da      	uxtb	r2, r3
   819e2:	69bb      	ldr	r3, [r7, #24]
   819e4:	701a      	strb	r2, [r3, #0]
	uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   819e6:	68fb      	ldr	r3, [r7, #12]
   819e8:	617b      	str	r3, [r7, #20]
		
	// Keep CS low for the duration of the transfer, keep low @ end.
	for (i = 0; i < size; i++) 
   819ea:	2300      	movs	r3, #0
   819ec:	61fb      	str	r3, [r7, #28]
   819ee:	e025      	b.n	81a3c <spi_master_transfer_keepcslow+0x80>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], *pcs, 0);	
   819f0:	69fb      	ldr	r3, [r7, #28]
   819f2:	005b      	lsls	r3, r3, #1
   819f4:	697a      	ldr	r2, [r7, #20]
   819f6:	4413      	add	r3, r2
   819f8:	881a      	ldrh	r2, [r3, #0]
   819fa:	69bb      	ldr	r3, [r7, #24]
   819fc:	781b      	ldrb	r3, [r3, #0]
   819fe:	4813      	ldr	r0, [pc, #76]	; (81a4c <spi_master_transfer_keepcslow+0x90>)
   81a00:	4611      	mov	r1, r2
   81a02:	461a      	mov	r2, r3
   81a04:	2300      	movs	r3, #0
   81a06:	4c12      	ldr	r4, [pc, #72]	; (81a50 <spi_master_transfer_keepcslow+0x94>)
   81a08:	47a0      	blx	r4
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   81a0a:	bf00      	nop
   81a0c:	480f      	ldr	r0, [pc, #60]	; (81a4c <spi_master_transfer_keepcslow+0x90>)
   81a0e:	4b11      	ldr	r3, [pc, #68]	; (81a54 <spi_master_transfer_keepcslow+0x98>)
   81a10:	4798      	blx	r3
   81a12:	4603      	mov	r3, r0
   81a14:	f003 0301 	and.w	r3, r3, #1
   81a18:	2b00      	cmp	r3, #0
   81a1a:	d0f7      	beq.n	81a0c <spi_master_transfer_keepcslow+0x50>
		spi_read(SPI_MASTER_BASE, &data, pcs);
   81a1c:	f107 0312 	add.w	r3, r7, #18
   81a20:	480a      	ldr	r0, [pc, #40]	; (81a4c <spi_master_transfer_keepcslow+0x90>)
   81a22:	4619      	mov	r1, r3
   81a24:	69ba      	ldr	r2, [r7, #24]
   81a26:	4b0c      	ldr	r3, [pc, #48]	; (81a58 <spi_master_transfer_keepcslow+0x9c>)
   81a28:	4798      	blx	r3
		p_buffer[i] = data;
   81a2a:	69fb      	ldr	r3, [r7, #28]
   81a2c:	005b      	lsls	r3, r3, #1
   81a2e:	697a      	ldr	r2, [r7, #20]
   81a30:	4413      	add	r3, r2
   81a32:	8a7a      	ldrh	r2, [r7, #18]
   81a34:	801a      	strh	r2, [r3, #0]
	uint16_t *p_buffer;

	p_buffer = p_buf;
		
	// Keep CS low for the duration of the transfer, keep low @ end.
	for (i = 0; i < size; i++) 
   81a36:	69fb      	ldr	r3, [r7, #28]
   81a38:	3301      	adds	r3, #1
   81a3a:	61fb      	str	r3, [r7, #28]
   81a3c:	69fa      	ldr	r2, [r7, #28]
   81a3e:	68bb      	ldr	r3, [r7, #8]
   81a40:	429a      	cmp	r2, r3
   81a42:	d3d5      	bcc.n	819f0 <spi_master_transfer_keepcslow+0x34>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, pcs);
		p_buffer[i] = data;
	}
	return;
   81a44:	bf00      	nop
}
   81a46:	3724      	adds	r7, #36	; 0x24
   81a48:	46bd      	mov	sp, r7
   81a4a:	bd90      	pop	{r4, r7, pc}
   81a4c:	40008000 	.word	0x40008000
   81a50:	00080281 	.word	0x00080281
   81a54:	00081651 	.word	0x00081651
   81a58:	00080211 	.word	0x00080211

00081a5c <spi_master_read>:

void spi_master_read(void *p_buf, uint32_t size, uint32_t chip_sel)
{
   81a5c:	b580      	push	{r7, lr}
   81a5e:	b088      	sub	sp, #32
   81a60:	af00      	add	r7, sp, #0
   81a62:	60f8      	str	r0, [r7, #12]
   81a64:	60b9      	str	r1, [r7, #8]
   81a66:	607a      	str	r2, [r7, #4]
	uint32_t i;
	uint8_t* pcs;
	*pcs = spi_get_pcs(chip_sel);
   81a68:	687b      	ldr	r3, [r7, #4]
   81a6a:	2201      	movs	r2, #1
   81a6c:	fa02 f303 	lsl.w	r3, r2, r3
   81a70:	b2db      	uxtb	r3, r3
   81a72:	43db      	mvns	r3, r3
   81a74:	b2db      	uxtb	r3, r3
   81a76:	f003 030f 	and.w	r3, r3, #15
   81a7a:	b2da      	uxtb	r2, r3
   81a7c:	69bb      	ldr	r3, [r7, #24]
   81a7e:	701a      	strb	r2, [r3, #0]
	uint16_t data;
	uint16_t *p_buffer;
	p_buffer = p_buf;
   81a80:	68fb      	ldr	r3, [r7, #12]
   81a82:	617b      	str	r3, [r7, #20]

	for (i = 0; i < size; i++)
   81a84:	2300      	movs	r3, #0
   81a86:	61fb      	str	r3, [r7, #28]
   81a88:	e018      	b.n	81abc <spi_master_read+0x60>
	{
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   81a8a:	bf00      	nop
   81a8c:	480f      	ldr	r0, [pc, #60]	; (81acc <spi_master_read+0x70>)
   81a8e:	4b10      	ldr	r3, [pc, #64]	; (81ad0 <spi_master_read+0x74>)
   81a90:	4798      	blx	r3
   81a92:	4603      	mov	r3, r0
   81a94:	f003 0301 	and.w	r3, r3, #1
   81a98:	2b00      	cmp	r3, #0
   81a9a:	d0f7      	beq.n	81a8c <spi_master_read+0x30>
		spi_read(SPI_MASTER_BASE, &data, pcs);
   81a9c:	f107 0312 	add.w	r3, r7, #18
   81aa0:	480a      	ldr	r0, [pc, #40]	; (81acc <spi_master_read+0x70>)
   81aa2:	4619      	mov	r1, r3
   81aa4:	69ba      	ldr	r2, [r7, #24]
   81aa6:	4b0b      	ldr	r3, [pc, #44]	; (81ad4 <spi_master_read+0x78>)
   81aa8:	4798      	blx	r3
		p_buffer[i] = data;
   81aaa:	69fb      	ldr	r3, [r7, #28]
   81aac:	005b      	lsls	r3, r3, #1
   81aae:	697a      	ldr	r2, [r7, #20]
   81ab0:	4413      	add	r3, r2
   81ab2:	8a7a      	ldrh	r2, [r7, #18]
   81ab4:	801a      	strh	r2, [r3, #0]
	*pcs = spi_get_pcs(chip_sel);
	uint16_t data;
	uint16_t *p_buffer;
	p_buffer = p_buf;

	for (i = 0; i < size; i++)
   81ab6:	69fb      	ldr	r3, [r7, #28]
   81ab8:	3301      	adds	r3, #1
   81aba:	61fb      	str	r3, [r7, #28]
   81abc:	69fa      	ldr	r2, [r7, #28]
   81abe:	68bb      	ldr	r3, [r7, #8]
   81ac0:	429a      	cmp	r2, r3
   81ac2:	d3e2      	bcc.n	81a8a <spi_master_read+0x2e>
	{
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, pcs);
		p_buffer[i] = data;
	}
}
   81ac4:	3720      	adds	r7, #32
   81ac6:	46bd      	mov	sp, r7
   81ac8:	bd80      	pop	{r7, pc}
   81aca:	bf00      	nop
   81acc:	40008000 	.word	0x40008000
   81ad0:	00081651 	.word	0x00081651
   81ad4:	00080211 	.word	0x00080211

00081ad8 <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   81ad8:	b580      	push	{r7, lr}
   81ada:	af00      	add	r7, sp, #0
	//uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
		
	//*reg_ptr |= 0x00BB;
	//spi_slave_initialize();
	spi_master_initialize();
   81adc:	4b01      	ldr	r3, [pc, #4]	; (81ae4 <spi_initialize+0xc>)
   81ade:	4798      	blx	r3

	return;
   81ae0:	bf00      	nop
}
   81ae2:	bd80      	pop	{r7, pc}
   81ae4:	000816b5 	.word	0x000816b5

00081ae8 <delay_s>:
*
*/
#include "time.h"

void delay_s(uint32_t s)
{
   81ae8:	b480      	push	{r7}
   81aea:	b085      	sub	sp, #20
   81aec:	af00      	add	r7, sp, #0
   81aee:	6078      	str	r0, [r7, #4]
	uint32_t timeout = s * 8400000;	// NUmber of clock cycles needed.
   81af0:	687b      	ldr	r3, [r7, #4]
   81af2:	4a08      	ldr	r2, [pc, #32]	; (81b14 <delay_s+0x2c>)
   81af4:	fb02 f303 	mul.w	r3, r2, r3
   81af8:	60fb      	str	r3, [r7, #12]
	while(timeout--){ }
   81afa:	bf00      	nop
   81afc:	68fb      	ldr	r3, [r7, #12]
   81afe:	1e5a      	subs	r2, r3, #1
   81b00:	60fa      	str	r2, [r7, #12]
   81b02:	2b00      	cmp	r3, #0
   81b04:	d1fa      	bne.n	81afc <delay_s+0x14>
	return;
   81b06:	bf00      	nop
}
   81b08:	3714      	adds	r7, #20
   81b0a:	46bd      	mov	sp, r7
   81b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b10:	4770      	bx	lr
   81b12:	bf00      	nop
   81b14:	00802c80 	.word	0x00802c80

00081b18 <delay_ms>:

void delay_ms(uint32_t ms)
{
   81b18:	b480      	push	{r7}
   81b1a:	b085      	sub	sp, #20
   81b1c:	af00      	add	r7, sp, #0
   81b1e:	6078      	str	r0, [r7, #4]
	uint32_t timeout = ms * 84000;	// Number of clock cycles needed 
   81b20:	687b      	ldr	r3, [r7, #4]
   81b22:	4a08      	ldr	r2, [pc, #32]	; (81b44 <delay_ms+0x2c>)
   81b24:	fb02 f303 	mul.w	r3, r2, r3
   81b28:	60fb      	str	r3, [r7, #12]
	while(timeout--){ }
   81b2a:	bf00      	nop
   81b2c:	68fb      	ldr	r3, [r7, #12]
   81b2e:	1e5a      	subs	r2, r3, #1
   81b30:	60fa      	str	r2, [r7, #12]
   81b32:	2b00      	cmp	r3, #0
   81b34:	d1fa      	bne.n	81b2c <delay_ms+0x14>
	return;
   81b36:	bf00      	nop
}
   81b38:	3714      	adds	r7, #20
   81b3a:	46bd      	mov	sp, r7
   81b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b40:	4770      	bx	lr
   81b42:	bf00      	nop
   81b44:	00014820 	.word	0x00014820

00081b48 <delay_us>:

void delay_us(uint32_t us)
{
   81b48:	b480      	push	{r7}
   81b4a:	b085      	sub	sp, #20
   81b4c:	af00      	add	r7, sp, #0
   81b4e:	6078      	str	r0, [r7, #4]
	uint32_t timeout = us * 84;	// Number of clock cycles needed
   81b50:	687b      	ldr	r3, [r7, #4]
   81b52:	2254      	movs	r2, #84	; 0x54
   81b54:	fb02 f303 	mul.w	r3, r2, r3
   81b58:	60fb      	str	r3, [r7, #12]
	while(timeout--){ }
   81b5a:	bf00      	nop
   81b5c:	68fb      	ldr	r3, [r7, #12]
   81b5e:	1e5a      	subs	r2, r3, #1
   81b60:	60fa      	str	r2, [r7, #12]
   81b62:	2b00      	cmp	r3, #0
   81b64:	d1fa      	bne.n	81b5c <delay_us+0x14>
	return;
   81b66:	bf00      	nop
}
   81b68:	3714      	adds	r7, #20
   81b6a:	46bd      	mov	sp, r7
   81b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b70:	4770      	bx	lr
   81b72:	bf00      	nop

00081b74 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81b74:	b480      	push	{r7}
   81b76:	b083      	sub	sp, #12
   81b78:	af00      	add	r7, sp, #0
   81b7a:	4603      	mov	r3, r0
   81b7c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81b7e:	4b08      	ldr	r3, [pc, #32]	; (81ba0 <NVIC_EnableIRQ+0x2c>)
   81b80:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81b84:	0952      	lsrs	r2, r2, #5
   81b86:	79f9      	ldrb	r1, [r7, #7]
   81b88:	f001 011f 	and.w	r1, r1, #31
   81b8c:	2001      	movs	r0, #1
   81b8e:	fa00 f101 	lsl.w	r1, r0, r1
   81b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   81b96:	370c      	adds	r7, #12
   81b98:	46bd      	mov	sp, r7
   81b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b9e:	4770      	bx	lr
   81ba0:	e000e100 	.word	0xe000e100

00081ba4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81ba4:	b480      	push	{r7}
   81ba6:	b083      	sub	sp, #12
   81ba8:	af00      	add	r7, sp, #0
   81baa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81bac:	687b      	ldr	r3, [r7, #4]
   81bae:	2b07      	cmp	r3, #7
   81bb0:	d825      	bhi.n	81bfe <osc_get_rate+0x5a>
   81bb2:	a201      	add	r2, pc, #4	; (adr r2, 81bb8 <osc_get_rate+0x14>)
   81bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81bb8:	00081bd9 	.word	0x00081bd9
   81bbc:	00081bdf 	.word	0x00081bdf
   81bc0:	00081be5 	.word	0x00081be5
   81bc4:	00081beb 	.word	0x00081beb
   81bc8:	00081bef 	.word	0x00081bef
   81bcc:	00081bf3 	.word	0x00081bf3
   81bd0:	00081bf7 	.word	0x00081bf7
   81bd4:	00081bfb 	.word	0x00081bfb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81bd8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81bdc:	e010      	b.n	81c00 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81be2:	e00d      	b.n	81c00 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81be8:	e00a      	b.n	81c00 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81bea:	4b08      	ldr	r3, [pc, #32]	; (81c0c <osc_get_rate+0x68>)
   81bec:	e008      	b.n	81c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81bee:	4b08      	ldr	r3, [pc, #32]	; (81c10 <osc_get_rate+0x6c>)
   81bf0:	e006      	b.n	81c00 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81bf2:	4b08      	ldr	r3, [pc, #32]	; (81c14 <osc_get_rate+0x70>)
   81bf4:	e004      	b.n	81c00 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81bf6:	4b07      	ldr	r3, [pc, #28]	; (81c14 <osc_get_rate+0x70>)
   81bf8:	e002      	b.n	81c00 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81bfa:	4b06      	ldr	r3, [pc, #24]	; (81c14 <osc_get_rate+0x70>)
   81bfc:	e000      	b.n	81c00 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81bfe:	2300      	movs	r3, #0
}
   81c00:	4618      	mov	r0, r3
   81c02:	370c      	adds	r7, #12
   81c04:	46bd      	mov	sp, r7
   81c06:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c0a:	4770      	bx	lr
   81c0c:	003d0900 	.word	0x003d0900
   81c10:	007a1200 	.word	0x007a1200
   81c14:	00b71b00 	.word	0x00b71b00

00081c18 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81c18:	b580      	push	{r7, lr}
   81c1a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81c1c:	2006      	movs	r0, #6
   81c1e:	4b04      	ldr	r3, [pc, #16]	; (81c30 <sysclk_get_main_hz+0x18>)
   81c20:	4798      	blx	r3
   81c22:	4602      	mov	r2, r0
   81c24:	4613      	mov	r3, r2
   81c26:	00db      	lsls	r3, r3, #3
   81c28:	1a9b      	subs	r3, r3, r2
   81c2a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81c2c:	4618      	mov	r0, r3
   81c2e:	bd80      	pop	{r7, pc}
   81c30:	00081ba5 	.word	0x00081ba5

00081c34 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81c34:	b580      	push	{r7, lr}
   81c36:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81c38:	4b02      	ldr	r3, [pc, #8]	; (81c44 <sysclk_get_cpu_hz+0x10>)
   81c3a:	4798      	blx	r3
   81c3c:	4603      	mov	r3, r0
   81c3e:	085b      	lsrs	r3, r3, #1
}
   81c40:	4618      	mov	r0, r3
   81c42:	bd80      	pop	{r7, pc}
   81c44:	00081c19 	.word	0x00081c19

00081c48 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81c48:	b580      	push	{r7, lr}
   81c4a:	b082      	sub	sp, #8
   81c4c:	af00      	add	r7, sp, #0
   81c4e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81c50:	6878      	ldr	r0, [r7, #4]
   81c52:	4b02      	ldr	r3, [pc, #8]	; (81c5c <sysclk_enable_peripheral_clock+0x14>)
   81c54:	4798      	blx	r3
}
   81c56:	3708      	adds	r7, #8
   81c58:	46bd      	mov	sp, r7
   81c5a:	bd80      	pop	{r7, pc}
   81c5c:	000834a1 	.word	0x000834a1

00081c60 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   81c60:	b580      	push	{r7, lr}
   81c62:	b084      	sub	sp, #16
   81c64:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   81c66:	2300      	movs	r3, #0
   81c68:	60bb      	str	r3, [r7, #8]
   81c6a:	2300      	movs	r3, #0
   81c6c:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   81c6e:	2300      	movs	r3, #0
   81c70:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   81c72:	2300      	movs	r3, #0
   81c74:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   81c76:	483b      	ldr	r0, [pc, #236]	; (81d64 <USART0_Handler+0x104>)
   81c78:	4b3b      	ldr	r3, [pc, #236]	; (81d68 <USART0_Handler+0x108>)
   81c7a:	4798      	blx	r3
   81c7c:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   81c7e:	2058      	movs	r0, #88	; 0x58
   81c80:	4b3a      	ldr	r3, [pc, #232]	; (81d6c <USART0_Handler+0x10c>)
   81c82:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   81c84:	4b3a      	ldr	r3, [pc, #232]	; (81d70 <USART0_Handler+0x110>)
   81c86:	781b      	ldrb	r3, [r3, #0]
   81c88:	2b00      	cmp	r3, #0
   81c8a:	d167      	bne.n	81d5c <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   81c8c:	683b      	ldr	r3, [r7, #0]
   81c8e:	f003 0301 	and.w	r3, r3, #1
   81c92:	2b00      	cmp	r3, #0
   81c94:	d062      	beq.n	81d5c <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   81c96:	4833      	ldr	r0, [pc, #204]	; (81d64 <USART0_Handler+0x104>)
   81c98:	4936      	ldr	r1, [pc, #216]	; (81d74 <USART0_Handler+0x114>)
   81c9a:	4b37      	ldr	r3, [pc, #220]	; (81d78 <USART0_Handler+0x118>)
   81c9c:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   81c9e:	4b35      	ldr	r3, [pc, #212]	; (81d74 <USART0_Handler+0x114>)
   81ca0:	681b      	ldr	r3, [r3, #0]
   81ca2:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   81ca4:	68bb      	ldr	r3, [r7, #8]
   81ca6:	2b31      	cmp	r3, #49	; 0x31
   81ca8:	d102      	bne.n	81cb0 <USART0_Handler+0x50>
				command_start = 1;
   81caa:	4b34      	ldr	r3, [pc, #208]	; (81d7c <USART0_Handler+0x11c>)
   81cac:	2201      	movs	r2, #1
   81cae:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   81cb0:	68bb      	ldr	r3, [r7, #8]
   81cb2:	2b32      	cmp	r3, #50	; 0x32
   81cb4:	d102      	bne.n	81cbc <USART0_Handler+0x5c>
				command_end = 1;
   81cb6:	4b32      	ldr	r3, [pc, #200]	; (81d80 <USART0_Handler+0x120>)
   81cb8:	2201      	movs	r2, #1
   81cba:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   81cbc:	4b2f      	ldr	r3, [pc, #188]	; (81d7c <USART0_Handler+0x11c>)
   81cbe:	781b      	ldrb	r3, [r3, #0]
   81cc0:	2b01      	cmp	r3, #1
   81cc2:	d11e      	bne.n	81d02 <USART0_Handler+0xa2>
   81cc4:	68bb      	ldr	r3, [r7, #8]
   81cc6:	2b00      	cmp	r3, #0
   81cc8:	d01b      	beq.n	81d02 <USART0_Handler+0xa2>
   81cca:	68bb      	ldr	r3, [r7, #8]
   81ccc:	2b31      	cmp	r3, #49	; 0x31
   81cce:	d018      	beq.n	81d02 <USART0_Handler+0xa2>
   81cd0:	68bb      	ldr	r3, [r7, #8]
   81cd2:	2b32      	cmp	r3, #50	; 0x32
   81cd4:	d015      	beq.n	81d02 <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   81cd6:	4b2b      	ldr	r3, [pc, #172]	; (81d84 <USART0_Handler+0x124>)
   81cd8:	781a      	ldrb	r2, [r3, #0]
   81cda:	4b2b      	ldr	r3, [pc, #172]	; (81d88 <USART0_Handler+0x128>)
   81cdc:	fba3 1302 	umull	r1, r3, r3, r2
   81ce0:	08d9      	lsrs	r1, r3, #3
   81ce2:	460b      	mov	r3, r1
   81ce4:	009b      	lsls	r3, r3, #2
   81ce6:	440b      	add	r3, r1
   81ce8:	005b      	lsls	r3, r3, #1
   81cea:	1ad3      	subs	r3, r2, r3
   81cec:	b2db      	uxtb	r3, r3
   81cee:	68ba      	ldr	r2, [r7, #8]
   81cf0:	b2d1      	uxtb	r1, r2
   81cf2:	4a26      	ldr	r2, [pc, #152]	; (81d8c <USART0_Handler+0x12c>)
   81cf4:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   81cf6:	4b23      	ldr	r3, [pc, #140]	; (81d84 <USART0_Handler+0x124>)
   81cf8:	781b      	ldrb	r3, [r3, #0]
   81cfa:	3301      	adds	r3, #1
   81cfc:	b2da      	uxtb	r2, r3
   81cfe:	4b21      	ldr	r3, [pc, #132]	; (81d84 <USART0_Handler+0x124>)
   81d00:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   81d02:	4b1f      	ldr	r3, [pc, #124]	; (81d80 <USART0_Handler+0x120>)
   81d04:	781b      	ldrb	r3, [r3, #0]
   81d06:	2b01      	cmp	r3, #1
   81d08:	d11d      	bne.n	81d46 <USART0_Handler+0xe6>
   81d0a:	4b1c      	ldr	r3, [pc, #112]	; (81d7c <USART0_Handler+0x11c>)
   81d0c:	781b      	ldrb	r3, [r3, #0]
   81d0e:	2b01      	cmp	r3, #1
   81d10:	d119      	bne.n	81d46 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   81d12:	4b1f      	ldr	r3, [pc, #124]	; (81d90 <USART0_Handler+0x130>)
   81d14:	4798      	blx	r3
				command_end = 0;
   81d16:	4b1a      	ldr	r3, [pc, #104]	; (81d80 <USART0_Handler+0x120>)
   81d18:	2200      	movs	r2, #0
   81d1a:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   81d1c:	4b17      	ldr	r3, [pc, #92]	; (81d7c <USART0_Handler+0x11c>)
   81d1e:	2200      	movs	r2, #0
   81d20:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   81d22:	4b18      	ldr	r3, [pc, #96]	; (81d84 <USART0_Handler+0x124>)
   81d24:	2200      	movs	r2, #0
   81d26:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   81d28:	2300      	movs	r3, #0
   81d2a:	73bb      	strb	r3, [r7, #14]
   81d2c:	e006      	b.n	81d3c <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   81d2e:	7bbb      	ldrb	r3, [r7, #14]
   81d30:	4a16      	ldr	r2, [pc, #88]	; (81d8c <USART0_Handler+0x12c>)
   81d32:	2100      	movs	r1, #0
   81d34:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   81d36:	7bbb      	ldrb	r3, [r7, #14]
   81d38:	3301      	adds	r3, #1
   81d3a:	73bb      	strb	r3, [r7, #14]
   81d3c:	7bbb      	ldrb	r3, [r7, #14]
   81d3e:	2b09      	cmp	r3, #9
   81d40:	d9f5      	bls.n	81d2e <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   81d42:	2301      	movs	r3, #1
   81d44:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   81d46:	7bfb      	ldrb	r3, [r7, #15]
   81d48:	2b00      	cmp	r3, #0
   81d4a:	d105      	bne.n	81d58 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   81d4c:	4b09      	ldr	r3, [pc, #36]	; (81d74 <USART0_Handler+0x114>)
   81d4e:	681b      	ldr	r3, [r3, #0]
   81d50:	4804      	ldr	r0, [pc, #16]	; (81d64 <USART0_Handler+0x104>)
   81d52:	4619      	mov	r1, r3
   81d54:	4b0f      	ldr	r3, [pc, #60]	; (81d94 <USART0_Handler+0x134>)
   81d56:	4798      	blx	r3
					
			command_completed = 0;
   81d58:	2300      	movs	r3, #0
   81d5a:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   81d5c:	3710      	adds	r7, #16
   81d5e:	46bd      	mov	sp, r7
   81d60:	bd80      	pop	{r7, pc}
   81d62:	bf00      	nop
   81d64:	40098000 	.word	0x40098000
   81d68:	00083721 	.word	0x00083721
   81d6c:	00082eb5 	.word	0x00082eb5
   81d70:	20070460 	.word	0x20070460
   81d74:	2007045c 	.word	0x2007045c
   81d78:	000837a5 	.word	0x000837a5
   81d7c:	20070461 	.word	0x20070461
   81d80:	20070462 	.word	0x20070462
   81d84:	20070470 	.word	0x20070470
   81d88:	cccccccd 	.word	0xcccccccd
   81d8c:	20070464 	.word	0x20070464
   81d90:	00081d99 	.word	0x00081d99
   81d94:	00083771 	.word	0x00083771

00081d98 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   81d98:	b580      	push	{r7, lr}
   81d9a:	b08a      	sub	sp, #40	; 0x28
   81d9c:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   81d9e:	2300      	movs	r3, #0
   81da0:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   81da2:	2301      	movs	r3, #1
   81da4:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   81da6:	2300      	movs	r3, #0
   81da8:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   81daa:	2301      	movs	r3, #1
   81dac:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   81dae:	2301      	movs	r3, #1
   81db0:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   81db2:	2301      	movs	r3, #1
   81db4:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   81db6:	f240 1327 	movw	r3, #295	; 0x127
   81dba:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   81dbc:	2319      	movs	r3, #25
   81dbe:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   81dc0:	4b7e      	ldr	r3, [pc, #504]	; (81fbc <check_command+0x224>)
   81dc2:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   81dc4:	6938      	ldr	r0, [r7, #16]
   81dc6:	4b7e      	ldr	r3, [pc, #504]	; (81fc0 <check_command+0x228>)
   81dc8:	4798      	blx	r3
   81dca:	4603      	mov	r3, r0
   81dcc:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   81dce:	4b7d      	ldr	r3, [pc, #500]	; (81fc4 <check_command+0x22c>)
   81dd0:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   81dd2:	6938      	ldr	r0, [r7, #16]
   81dd4:	4b7a      	ldr	r3, [pc, #488]	; (81fc0 <check_command+0x228>)
   81dd6:	4798      	blx	r3
   81dd8:	4603      	mov	r3, r0
   81dda:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   81ddc:	4b7a      	ldr	r3, [pc, #488]	; (81fc8 <check_command+0x230>)
   81dde:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   81de0:	6938      	ldr	r0, [r7, #16]
   81de2:	4b77      	ldr	r3, [pc, #476]	; (81fc0 <check_command+0x228>)
   81de4:	4798      	blx	r3
   81de6:	4603      	mov	r3, r0
   81de8:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   81dea:	7ebb      	ldrb	r3, [r7, #26]
   81dec:	2b01      	cmp	r3, #1
   81dee:	f040 8088 	bne.w	81f02 <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   81df2:	4b76      	ldr	r3, [pc, #472]	; (81fcc <check_command+0x234>)
   81df4:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   81df6:	e00d      	b.n	81e14 <check_command+0x7c>
		{
			character = *message_array;
   81df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81dfa:	781b      	ldrb	r3, [r3, #0]
   81dfc:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81dfe:	bf00      	nop
   81e00:	4873      	ldr	r0, [pc, #460]	; (81fd0 <check_command+0x238>)
   81e02:	6a39      	ldr	r1, [r7, #32]
   81e04:	4b73      	ldr	r3, [pc, #460]	; (81fd4 <check_command+0x23c>)
   81e06:	4798      	blx	r3
   81e08:	4603      	mov	r3, r0
   81e0a:	2b00      	cmp	r3, #0
   81e0c:	d1f8      	bne.n	81e00 <check_command+0x68>
			
			message_array++;
   81e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e10:	3301      	adds	r3, #1
   81e12:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   81e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e16:	781b      	ldrb	r3, [r3, #0]
   81e18:	2b00      	cmp	r3, #0
   81e1a:	d1ed      	bne.n	81df8 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   81e1c:	4b6e      	ldr	r3, [pc, #440]	; (81fd8 <check_command+0x240>)
   81e1e:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81e20:	e00d      	b.n	81e3e <check_command+0xa6>
		{
			character = *message_array;
   81e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e24:	781b      	ldrb	r3, [r3, #0]
   81e26:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81e28:	bf00      	nop
   81e2a:	4869      	ldr	r0, [pc, #420]	; (81fd0 <check_command+0x238>)
   81e2c:	6a39      	ldr	r1, [r7, #32]
   81e2e:	4b69      	ldr	r3, [pc, #420]	; (81fd4 <check_command+0x23c>)
   81e30:	4798      	blx	r3
   81e32:	4603      	mov	r3, r0
   81e34:	2b00      	cmp	r3, #0
   81e36:	d1f8      	bne.n	81e2a <check_command+0x92>
			
			message_array++;
   81e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e3a:	3301      	adds	r3, #1
   81e3c:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   81e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81e40:	781b      	ldrb	r3, [r3, #0]
   81e42:	2b00      	cmp	r3, #0
   81e44:	d1ed      	bne.n	81e22 <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   81e46:	4b65      	ldr	r3, [pc, #404]	; (81fdc <check_command+0x244>)
   81e48:	681b      	ldr	r3, [r3, #0]
   81e4a:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   81e4c:	1d3b      	adds	r3, r7, #4
   81e4e:	4618      	mov	r0, r3
   81e50:	4b63      	ldr	r3, [pc, #396]	; (81fe0 <check_command+0x248>)
   81e52:	4798      	blx	r3
   81e54:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   81e56:	687b      	ldr	r3, [r7, #4]
   81e58:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   81e5a:	7dfb      	ldrb	r3, [r7, #23]
   81e5c:	4618      	mov	r0, r3
   81e5e:	4b61      	ldr	r3, [pc, #388]	; (81fe4 <check_command+0x24c>)
   81e60:	4798      	blx	r3
   81e62:	4603      	mov	r3, r0
   81e64:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   81e66:	7dfb      	ldrb	r3, [r7, #23]
   81e68:	011b      	lsls	r3, r3, #4
   81e6a:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   81e6c:	7bfb      	ldrb	r3, [r7, #15]
   81e6e:	091b      	lsrs	r3, r3, #4
   81e70:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   81e72:	7dfb      	ldrb	r3, [r7, #23]
   81e74:	091b      	lsrs	r3, r3, #4
   81e76:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   81e78:	7bfb      	ldrb	r3, [r7, #15]
   81e7a:	3330      	adds	r3, #48	; 0x30
   81e7c:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   81e7e:	7bbb      	ldrb	r3, [r7, #14]
   81e80:	3330      	adds	r3, #48	; 0x30
   81e82:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   81e84:	69fb      	ldr	r3, [r7, #28]
   81e86:	2b00      	cmp	r3, #0
   81e88:	d00a      	beq.n	81ea0 <check_command+0x108>
		{
			character = 0x2B;
   81e8a:	232b      	movs	r3, #43	; 0x2b
   81e8c:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   81e8e:	bf00      	nop
   81e90:	484f      	ldr	r0, [pc, #316]	; (81fd0 <check_command+0x238>)
   81e92:	6a39      	ldr	r1, [r7, #32]
   81e94:	4b4f      	ldr	r3, [pc, #316]	; (81fd4 <check_command+0x23c>)
   81e96:	4798      	blx	r3
   81e98:	4603      	mov	r3, r0
   81e9a:	2b00      	cmp	r3, #0
   81e9c:	d1f8      	bne.n	81e90 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   81e9e:	e009      	b.n	81eb4 <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   81ea0:	232d      	movs	r3, #45	; 0x2d
   81ea2:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   81ea4:	bf00      	nop
   81ea6:	484a      	ldr	r0, [pc, #296]	; (81fd0 <check_command+0x238>)
   81ea8:	6a39      	ldr	r1, [r7, #32]
   81eaa:	4b4a      	ldr	r3, [pc, #296]	; (81fd4 <check_command+0x23c>)
   81eac:	4798      	blx	r3
   81eae:	4603      	mov	r3, r0
   81eb0:	2b00      	cmp	r3, #0
   81eb2:	d1f8      	bne.n	81ea6 <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   81eb4:	bf00      	nop
   81eb6:	7bbb      	ldrb	r3, [r7, #14]
   81eb8:	4845      	ldr	r0, [pc, #276]	; (81fd0 <check_command+0x238>)
   81eba:	4619      	mov	r1, r3
   81ebc:	4b45      	ldr	r3, [pc, #276]	; (81fd4 <check_command+0x23c>)
   81ebe:	4798      	blx	r3
   81ec0:	4603      	mov	r3, r0
   81ec2:	2b00      	cmp	r3, #0
   81ec4:	d1f7      	bne.n	81eb6 <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   81ec6:	bf00      	nop
   81ec8:	7bfb      	ldrb	r3, [r7, #15]
   81eca:	4841      	ldr	r0, [pc, #260]	; (81fd0 <check_command+0x238>)
   81ecc:	4619      	mov	r1, r3
   81ece:	4b41      	ldr	r3, [pc, #260]	; (81fd4 <check_command+0x23c>)
   81ed0:	4798      	blx	r3
   81ed2:	4603      	mov	r3, r0
   81ed4:	2b00      	cmp	r3, #0
   81ed6:	d1f7      	bne.n	81ec8 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   81ed8:	4b43      	ldr	r3, [pc, #268]	; (81fe8 <check_command+0x250>)
   81eda:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   81edc:	e00d      	b.n	81efa <check_command+0x162>
		{
			character = *message_array;
   81ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ee0:	781b      	ldrb	r3, [r3, #0]
   81ee2:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81ee4:	bf00      	nop
   81ee6:	483a      	ldr	r0, [pc, #232]	; (81fd0 <check_command+0x238>)
   81ee8:	6a39      	ldr	r1, [r7, #32]
   81eea:	4b3a      	ldr	r3, [pc, #232]	; (81fd4 <check_command+0x23c>)
   81eec:	4798      	blx	r3
   81eee:	4603      	mov	r3, r0
   81ef0:	2b00      	cmp	r3, #0
   81ef2:	d1f8      	bne.n	81ee6 <check_command+0x14e>
			
			message_array++;
   81ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81ef6:	3301      	adds	r3, #1
   81ef8:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   81efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81efc:	781b      	ldrb	r3, [r3, #0]
   81efe:	2b00      	cmp	r3, #0
   81f00:	d1ed      	bne.n	81ede <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   81f02:	7e7b      	ldrb	r3, [r7, #25]
   81f04:	2b01      	cmp	r3, #1
   81f06:	d114      	bne.n	81f32 <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   81f08:	4b38      	ldr	r3, [pc, #224]	; (81fec <check_command+0x254>)
   81f0a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81f0c:	e00d      	b.n	81f2a <check_command+0x192>
		{
			character = *message_array;
   81f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f10:	781b      	ldrb	r3, [r3, #0]
   81f12:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81f14:	bf00      	nop
   81f16:	482e      	ldr	r0, [pc, #184]	; (81fd0 <check_command+0x238>)
   81f18:	6a39      	ldr	r1, [r7, #32]
   81f1a:	4b2e      	ldr	r3, [pc, #184]	; (81fd4 <check_command+0x23c>)
   81f1c:	4798      	blx	r3
   81f1e:	4603      	mov	r3, r0
   81f20:	2b00      	cmp	r3, #0
   81f22:	d1f8      	bne.n	81f16 <check_command+0x17e>
			
			message_array++;
   81f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f26:	3301      	adds	r3, #1
   81f28:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   81f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f2c:	781b      	ldrb	r3, [r3, #0]
   81f2e:	2b00      	cmp	r3, #0
   81f30:	d1ed      	bne.n	81f0e <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   81f32:	7e3b      	ldrb	r3, [r7, #24]
   81f34:	2b01      	cmp	r3, #1
   81f36:	d13d      	bne.n	81fb4 <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   81f38:	4b2d      	ldr	r3, [pc, #180]	; (81ff0 <check_command+0x258>)
   81f3a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   81f3c:	e00d      	b.n	81f5a <check_command+0x1c2>
		{
			character = *message_array;
   81f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f40:	781b      	ldrb	r3, [r3, #0]
   81f42:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81f44:	bf00      	nop
   81f46:	4822      	ldr	r0, [pc, #136]	; (81fd0 <check_command+0x238>)
   81f48:	6a39      	ldr	r1, [r7, #32]
   81f4a:	4b22      	ldr	r3, [pc, #136]	; (81fd4 <check_command+0x23c>)
   81f4c:	4798      	blx	r3
   81f4e:	4603      	mov	r3, r0
   81f50:	2b00      	cmp	r3, #0
   81f52:	d1f8      	bne.n	81f46 <check_command+0x1ae>
			
			message_array++;
   81f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f56:	3301      	adds	r3, #1
   81f58:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   81f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f5c:	781b      	ldrb	r3, [r3, #0]
   81f5e:	2b00      	cmp	r3, #0
   81f60:	d1ed      	bne.n	81f3e <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   81f62:	4b24      	ldr	r3, [pc, #144]	; (81ff4 <check_command+0x25c>)
   81f64:	681b      	ldr	r3, [r3, #0]
   81f66:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   81f68:	68bb      	ldr	r3, [r7, #8]
   81f6a:	b2db      	uxtb	r3, r3
   81f6c:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   81f6e:	68bb      	ldr	r3, [r7, #8]
   81f70:	2b40      	cmp	r3, #64	; 0x40
   81f72:	d802      	bhi.n	81f7a <check_command+0x1e2>
   81f74:	68bb      	ldr	r3, [r7, #8]
   81f76:	2b5a      	cmp	r3, #90	; 0x5a
   81f78:	d807      	bhi.n	81f8a <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   81f7a:	bf00      	nop
   81f7c:	4814      	ldr	r0, [pc, #80]	; (81fd0 <check_command+0x238>)
   81f7e:	68b9      	ldr	r1, [r7, #8]
   81f80:	4b14      	ldr	r3, [pc, #80]	; (81fd4 <check_command+0x23c>)
   81f82:	4798      	blx	r3
   81f84:	4603      	mov	r3, r0
   81f86:	2b00      	cmp	r3, #0
   81f88:	d1f8      	bne.n	81f7c <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   81f8a:	4b1b      	ldr	r3, [pc, #108]	; (81ff8 <check_command+0x260>)
   81f8c:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   81f8e:	e00d      	b.n	81fac <check_command+0x214>
		{
			character = *message_array;
   81f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81f92:	781b      	ldrb	r3, [r3, #0]
   81f94:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81f96:	bf00      	nop
   81f98:	480d      	ldr	r0, [pc, #52]	; (81fd0 <check_command+0x238>)
   81f9a:	6a39      	ldr	r1, [r7, #32]
   81f9c:	4b0d      	ldr	r3, [pc, #52]	; (81fd4 <check_command+0x23c>)
   81f9e:	4798      	blx	r3
   81fa0:	4603      	mov	r3, r0
   81fa2:	2b00      	cmp	r3, #0
   81fa4:	d1f8      	bne.n	81f98 <check_command+0x200>
			
			message_array++;
   81fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81fa8:	3301      	adds	r3, #1
   81faa:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   81fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81fae:	781b      	ldrb	r3, [r3, #0]
   81fb0:	2b00      	cmp	r3, #0
   81fb2:	d1ed      	bne.n	81f90 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   81fb4:	bf00      	nop
}
   81fb6:	3728      	adds	r7, #40	; 0x28
   81fb8:	46bd      	mov	sp, r7
   81fba:	bd80      	pop	{r7, pc}
   81fbc:	0008760c 	.word	0x0008760c
   81fc0:	00081ffd 	.word	0x00081ffd
   81fc4:	00087610 	.word	0x00087610
   81fc8:	0008761c 	.word	0x0008761c
   81fcc:	00087620 	.word	0x00087620
   81fd0:	40098000 	.word	0x40098000
   81fd4:	00083771 	.word	0x00083771
   81fd8:	00087640 	.word	0x00087640
   81fdc:	2007a640 	.word	0x2007a640
   81fe0:	00082059 	.word	0x00082059
   81fe4:	000820f1 	.word	0x000820f1
   81fe8:	0008765c 	.word	0x0008765c
   81fec:	00087664 	.word	0x00087664
   81ff0:	00087680 	.word	0x00087680
   81ff4:	2007a6f8 	.word	0x2007a6f8
   81ff8:	000876a8 	.word	0x000876a8

00081ffc <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   81ffc:	b480      	push	{r7}
   81ffe:	b085      	sub	sp, #20
   82000:	af00      	add	r7, sp, #0
   82002:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   82004:	2300      	movs	r3, #0
   82006:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   82008:	2301      	movs	r3, #1
   8200a:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   8200c:	687b      	ldr	r3, [r7, #4]
   8200e:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   82010:	2300      	movs	r3, #0
   82012:	73fb      	strb	r3, [r7, #15]
   82014:	e014      	b.n	82040 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   82016:	68bb      	ldr	r3, [r7, #8]
   82018:	781a      	ldrb	r2, [r3, #0]
   8201a:	7bfb      	ldrb	r3, [r7, #15]
   8201c:	490d      	ldr	r1, [pc, #52]	; (82054 <check_string+0x58>)
   8201e:	5ccb      	ldrb	r3, [r1, r3]
   82020:	429a      	cmp	r2, r3
   82022:	d002      	beq.n	8202a <check_string+0x2e>
		{
			ret_val = 0;
   82024:	2300      	movs	r3, #0
   82026:	73bb      	strb	r3, [r7, #14]
			break;
   82028:	e00d      	b.n	82046 <check_string+0x4a>
		}
		if (!*temp_str)
   8202a:	68bb      	ldr	r3, [r7, #8]
   8202c:	781b      	ldrb	r3, [r3, #0]
   8202e:	2b00      	cmp	r3, #0
   82030:	d100      	bne.n	82034 <check_string+0x38>
			break;
   82032:	e008      	b.n	82046 <check_string+0x4a>
			
		temp_str++;
   82034:	68bb      	ldr	r3, [r7, #8]
   82036:	3301      	adds	r3, #1
   82038:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   8203a:	7bfb      	ldrb	r3, [r7, #15]
   8203c:	3301      	adds	r3, #1
   8203e:	73fb      	strb	r3, [r7, #15]
   82040:	7bfb      	ldrb	r3, [r7, #15]
   82042:	2b09      	cmp	r3, #9
   82044:	d9e7      	bls.n	82016 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   82046:	7bbb      	ldrb	r3, [r7, #14]
}
   82048:	4618      	mov	r0, r3
   8204a:	3714      	adds	r7, #20
   8204c:	46bd      	mov	sp, r7
   8204e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82052:	4770      	bx	lr
   82054:	20070464 	.word	0x20070464

00082058 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   82058:	b580      	push	{r7, lr}
   8205a:	b084      	sub	sp, #16
   8205c:	af00      	add	r7, sp, #0
   8205e:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   82060:	f04f 0300 	mov.w	r3, #0
   82064:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   82066:	687b      	ldr	r3, [r7, #4]
   82068:	681b      	ldr	r3, [r3, #0]
   8206a:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   8206c:	68bb      	ldr	r3, [r7, #8]
   8206e:	089b      	lsrs	r3, r3, #2
   82070:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   82072:	4b1b      	ldr	r3, [pc, #108]	; (820e0 <convert_to_temp+0x88>)
   82074:	68b8      	ldr	r0, [r7, #8]
   82076:	4798      	blx	r3
   82078:	4603      	mov	r3, r0
   8207a:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   8207c:	4b19      	ldr	r3, [pc, #100]	; (820e4 <convert_to_temp+0x8c>)
   8207e:	68f8      	ldr	r0, [r7, #12]
   82080:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   82084:	4798      	blx	r3
   82086:	4603      	mov	r3, r0
   82088:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   8208a:	4b17      	ldr	r3, [pc, #92]	; (820e8 <convert_to_temp+0x90>)
   8208c:	68f8      	ldr	r0, [r7, #12]
   8208e:	f04f 0100 	mov.w	r1, #0
   82092:	4798      	blx	r3
   82094:	4603      	mov	r3, r0
   82096:	2b00      	cmp	r3, #0
   82098:	d009      	beq.n	820ae <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   8209a:	4b14      	ldr	r3, [pc, #80]	; (820ec <convert_to_temp+0x94>)
   8209c:	68f8      	ldr	r0, [r7, #12]
   8209e:	4798      	blx	r3
   820a0:	4603      	mov	r3, r0
   820a2:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   820a4:	687b      	ldr	r3, [r7, #4]
   820a6:	68ba      	ldr	r2, [r7, #8]
   820a8:	601a      	str	r2, [r3, #0]
		return 1;	
   820aa:	2301      	movs	r3, #1
   820ac:	e013      	b.n	820d6 <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   820ae:	4b0c      	ldr	r3, [pc, #48]	; (820e0 <convert_to_temp+0x88>)
   820b0:	68b8      	ldr	r0, [r7, #8]
   820b2:	4798      	blx	r3
   820b4:	4603      	mov	r3, r0
   820b6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   820ba:	4b0c      	ldr	r3, [pc, #48]	; (820ec <convert_to_temp+0x94>)
   820bc:	4610      	mov	r0, r2
   820be:	4798      	blx	r3
   820c0:	4603      	mov	r3, r0
   820c2:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   820c4:	4b09      	ldr	r3, [pc, #36]	; (820ec <convert_to_temp+0x94>)
   820c6:	68f8      	ldr	r0, [r7, #12]
   820c8:	4798      	blx	r3
   820ca:	4603      	mov	r3, r0
   820cc:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   820ce:	687b      	ldr	r3, [r7, #4]
   820d0:	68ba      	ldr	r2, [r7, #8]
   820d2:	601a      	str	r2, [r3, #0]
		return 0;
   820d4:	2300      	movs	r3, #0
	}
}
   820d6:	4618      	mov	r0, r3
   820d8:	3710      	adds	r7, #16
   820da:	46bd      	mov	sp, r7
   820dc:	bd80      	pop	{r7, pc}
   820de:	bf00      	nop
   820e0:	00086e4d 	.word	0x00086e4d
   820e4:	00086efd 	.word	0x00086efd
   820e8:	00087261 	.word	0x00087261
   820ec:	00087289 	.word	0x00087289

000820f0 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   820f0:	b480      	push	{r7}
   820f2:	b085      	sub	sp, #20
   820f4:	af00      	add	r7, sp, #0
   820f6:	4603      	mov	r3, r0
   820f8:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   820fa:	2300      	movs	r3, #0
   820fc:	73fb      	strb	r3, [r7, #15]
   820fe:	2300      	movs	r3, #0
   82100:	73bb      	strb	r3, [r7, #14]
   82102:	2300      	movs	r3, #0
   82104:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   82106:	79fb      	ldrb	r3, [r7, #7]
   82108:	2b09      	cmp	r3, #9
   8210a:	d919      	bls.n	82140 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   8210c:	79fa      	ldrb	r2, [r7, #7]
   8210e:	4b10      	ldr	r3, [pc, #64]	; (82150 <convert_to_bcd+0x60>)
   82110:	fba3 1302 	umull	r1, r3, r3, r2
   82114:	08d9      	lsrs	r1, r3, #3
   82116:	460b      	mov	r3, r1
   82118:	009b      	lsls	r3, r3, #2
   8211a:	440b      	add	r3, r1
   8211c:	005b      	lsls	r3, r3, #1
   8211e:	1ad3      	subs	r3, r2, r3
   82120:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   82122:	79fa      	ldrb	r2, [r7, #7]
   82124:	4b0a      	ldr	r3, [pc, #40]	; (82150 <convert_to_bcd+0x60>)
   82126:	fba3 1302 	umull	r1, r3, r3, r2
   8212a:	08db      	lsrs	r3, r3, #3
   8212c:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   8212e:	7bfb      	ldrb	r3, [r7, #15]
   82130:	011b      	lsls	r3, r3, #4
   82132:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   82134:	7bfa      	ldrb	r2, [r7, #15]
   82136:	7bbb      	ldrb	r3, [r7, #14]
   82138:	4313      	orrs	r3, r2
   8213a:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   8213c:	7b7b      	ldrb	r3, [r7, #13]
   8213e:	e000      	b.n	82142 <convert_to_bcd+0x52>
	}
	else
		return temp;
   82140:	79fb      	ldrb	r3, [r7, #7]
}
   82142:	4618      	mov	r0, r3
   82144:	3714      	adds	r7, #20
   82146:	46bd      	mov	sp, r7
   82148:	f85d 7b04 	ldr.w	r7, [sp], #4
   8214c:	4770      	bx	lr
   8214e:	bf00      	nop
   82150:	cccccccd 	.word	0xcccccccd

00082154 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   82154:	b5b0      	push	{r4, r5, r7, lr}
   82156:	b086      	sub	sp, #24
   82158:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   8215a:	4b13      	ldr	r3, [pc, #76]	; (821a8 <configure_usart+0x54>)
   8215c:	463c      	mov	r4, r7
   8215e:	461d      	mov	r5, r3
   82160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   82162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   82164:	e895 0003 	ldmia.w	r5, {r0, r1}
   82168:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   8216c:	2011      	movs	r0, #17
   8216e:	4b0f      	ldr	r3, [pc, #60]	; (821ac <configure_usart+0x58>)
   82170:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   82172:	4b0f      	ldr	r3, [pc, #60]	; (821b0 <configure_usart+0x5c>)
   82174:	4798      	blx	r3
   82176:	4603      	mov	r3, r0
   82178:	463a      	mov	r2, r7
   8217a:	480e      	ldr	r0, [pc, #56]	; (821b4 <configure_usart+0x60>)
   8217c:	4611      	mov	r1, r2
   8217e:	461a      	mov	r2, r3
   82180:	4b0d      	ldr	r3, [pc, #52]	; (821b8 <configure_usart+0x64>)
   82182:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   82184:	480b      	ldr	r0, [pc, #44]	; (821b4 <configure_usart+0x60>)
   82186:	f04f 31ff 	mov.w	r1, #4294967295
   8218a:	4b0c      	ldr	r3, [pc, #48]	; (821bc <configure_usart+0x68>)
   8218c:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   8218e:	4809      	ldr	r0, [pc, #36]	; (821b4 <configure_usart+0x60>)
   82190:	4b0b      	ldr	r3, [pc, #44]	; (821c0 <configure_usart+0x6c>)
   82192:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   82194:	4807      	ldr	r0, [pc, #28]	; (821b4 <configure_usart+0x60>)
   82196:	4b0b      	ldr	r3, [pc, #44]	; (821c4 <configure_usart+0x70>)
   82198:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   8219a:	2011      	movs	r0, #17
   8219c:	4b0a      	ldr	r3, [pc, #40]	; (821c8 <configure_usart+0x74>)
   8219e:	4798      	blx	r3
}
   821a0:	3718      	adds	r7, #24
   821a2:	46bd      	mov	sp, r7
   821a4:	bdb0      	pop	{r4, r5, r7, pc}
   821a6:	bf00      	nop
   821a8:	000876ac 	.word	0x000876ac
   821ac:	00081c49 	.word	0x00081c49
   821b0:	00081c35 	.word	0x00081c35
   821b4:	40098000 	.word	0x40098000
   821b8:	00083605 	.word	0x00083605
   821bc:	00083705 	.word	0x00083705
   821c0:	00083689 	.word	0x00083689
   821c4:	000836b9 	.word	0x000836b9
   821c8:	00081b75 	.word	0x00081b75

000821cc <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   821cc:	b580      	push	{r7, lr}
   821ce:	b084      	sub	sp, #16
   821d0:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   821d2:	2300      	movs	r3, #0
   821d4:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   821d6:	2300      	movs	r3, #0
   821d8:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   821da:	4b1a      	ldr	r3, [pc, #104]	; (82244 <usart_initialize+0x78>)
   821dc:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   821de:	4b1a      	ldr	r3, [pc, #104]	; (82248 <usart_initialize+0x7c>)
   821e0:	2200      	movs	r2, #0
   821e2:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   821e4:	2300      	movs	r3, #0
   821e6:	73fb      	strb	r3, [r7, #15]
   821e8:	e006      	b.n	821f8 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   821ea:	7bfb      	ldrb	r3, [r7, #15]
   821ec:	4a17      	ldr	r2, [pc, #92]	; (8224c <usart_initialize+0x80>)
   821ee:	2100      	movs	r1, #0
   821f0:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   821f2:	7bfb      	ldrb	r3, [r7, #15]
   821f4:	3301      	adds	r3, #1
   821f6:	73fb      	strb	r3, [r7, #15]
   821f8:	7bfb      	ldrb	r3, [r7, #15]
   821fa:	2b09      	cmp	r3, #9
   821fc:	d9f5      	bls.n	821ea <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   821fe:	4814      	ldr	r0, [pc, #80]	; (82250 <usart_initialize+0x84>)
   82200:	2101      	movs	r1, #1
   82202:	4b14      	ldr	r3, [pc, #80]	; (82254 <usart_initialize+0x88>)
   82204:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   82206:	4812      	ldr	r0, [pc, #72]	; (82250 <usart_initialize+0x84>)
   82208:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8220c:	4b12      	ldr	r3, [pc, #72]	; (82258 <usart_initialize+0x8c>)
   8220e:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   82210:	4b12      	ldr	r3, [pc, #72]	; (8225c <usart_initialize+0x90>)
   82212:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   82214:	e00d      	b.n	82232 <usart_initialize+0x66>
	{
		character = *message_array;
   82216:	68bb      	ldr	r3, [r7, #8]
   82218:	781b      	ldrb	r3, [r3, #0]
   8221a:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   8221c:	bf00      	nop
   8221e:	480c      	ldr	r0, [pc, #48]	; (82250 <usart_initialize+0x84>)
   82220:	6879      	ldr	r1, [r7, #4]
   82222:	4b0f      	ldr	r3, [pc, #60]	; (82260 <usart_initialize+0x94>)
   82224:	4798      	blx	r3
   82226:	4603      	mov	r3, r0
   82228:	2b00      	cmp	r3, #0
   8222a:	d1f8      	bne.n	8221e <usart_initialize+0x52>
			
		message_array++;
   8222c:	68bb      	ldr	r3, [r7, #8]
   8222e:	3301      	adds	r3, #1
   82230:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   82232:	68bb      	ldr	r3, [r7, #8]
   82234:	781b      	ldrb	r3, [r3, #0]
   82236:	2b00      	cmp	r3, #0
   82238:	d1ed      	bne.n	82216 <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   8223a:	bf00      	nop
}
   8223c:	3710      	adds	r7, #16
   8223e:	46bd      	mov	sp, r7
   82240:	bd80      	pop	{r7, pc}
   82242:	bf00      	nop
   82244:	00082155 	.word	0x00082155
   82248:	20070460 	.word	0x20070460
   8224c:	20070464 	.word	0x20070464
   82250:	40098000 	.word	0x40098000
   82254:	000836e9 	.word	0x000836e9
   82258:	00083705 	.word	0x00083705
   8225c:	000876c4 	.word	0x000876c4
   82260:	00083771 	.word	0x00083771

00082264 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82264:	b580      	push	{r7, lr}
   82266:	b082      	sub	sp, #8
   82268:	af00      	add	r7, sp, #0
   8226a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8226c:	687b      	ldr	r3, [r7, #4]
   8226e:	2b07      	cmp	r3, #7
   82270:	d82e      	bhi.n	822d0 <osc_enable+0x6c>
   82272:	a201      	add	r2, pc, #4	; (adr r2, 82278 <osc_enable+0x14>)
   82274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82278:	000822d1 	.word	0x000822d1
   8227c:	00082299 	.word	0x00082299
   82280:	000822a1 	.word	0x000822a1
   82284:	000822a9 	.word	0x000822a9
   82288:	000822b1 	.word	0x000822b1
   8228c:	000822b9 	.word	0x000822b9
   82290:	000822c1 	.word	0x000822c1
   82294:	000822c9 	.word	0x000822c9
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82298:	2000      	movs	r0, #0
   8229a:	4b0f      	ldr	r3, [pc, #60]	; (822d8 <osc_enable+0x74>)
   8229c:	4798      	blx	r3
		break;
   8229e:	e017      	b.n	822d0 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   822a0:	2001      	movs	r0, #1
   822a2:	4b0d      	ldr	r3, [pc, #52]	; (822d8 <osc_enable+0x74>)
   822a4:	4798      	blx	r3
		break;
   822a6:	e013      	b.n	822d0 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   822a8:	2000      	movs	r0, #0
   822aa:	4b0c      	ldr	r3, [pc, #48]	; (822dc <osc_enable+0x78>)
   822ac:	4798      	blx	r3
		break;
   822ae:	e00f      	b.n	822d0 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   822b0:	2010      	movs	r0, #16
   822b2:	4b0a      	ldr	r3, [pc, #40]	; (822dc <osc_enable+0x78>)
   822b4:	4798      	blx	r3
		break;
   822b6:	e00b      	b.n	822d0 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   822b8:	2020      	movs	r0, #32
   822ba:	4b08      	ldr	r3, [pc, #32]	; (822dc <osc_enable+0x78>)
   822bc:	4798      	blx	r3
		break;
   822be:	e007      	b.n	822d0 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   822c0:	2000      	movs	r0, #0
   822c2:	4b07      	ldr	r3, [pc, #28]	; (822e0 <osc_enable+0x7c>)
   822c4:	4798      	blx	r3
		break;
   822c6:	e003      	b.n	822d0 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   822c8:	2001      	movs	r0, #1
   822ca:	4b05      	ldr	r3, [pc, #20]	; (822e0 <osc_enable+0x7c>)
   822cc:	4798      	blx	r3
		break;
   822ce:	bf00      	nop
	}
}
   822d0:	3708      	adds	r7, #8
   822d2:	46bd      	mov	sp, r7
   822d4:	bd80      	pop	{r7, pc}
   822d6:	bf00      	nop
   822d8:	000832b9 	.word	0x000832b9
   822dc:	00083329 	.word	0x00083329
   822e0:	000833c9 	.word	0x000833c9

000822e4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   822e4:	b580      	push	{r7, lr}
   822e6:	b082      	sub	sp, #8
   822e8:	af00      	add	r7, sp, #0
   822ea:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   822ec:	687b      	ldr	r3, [r7, #4]
   822ee:	2b07      	cmp	r3, #7
   822f0:	d826      	bhi.n	82340 <osc_is_ready+0x5c>
   822f2:	a201      	add	r2, pc, #4	; (adr r2, 822f8 <osc_is_ready+0x14>)
   822f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   822f8:	00082319 	.word	0x00082319
   822fc:	0008231d 	.word	0x0008231d
   82300:	0008231d 	.word	0x0008231d
   82304:	0008232f 	.word	0x0008232f
   82308:	0008232f 	.word	0x0008232f
   8230c:	0008232f 	.word	0x0008232f
   82310:	0008232f 	.word	0x0008232f
   82314:	0008232f 	.word	0x0008232f
	case OSC_SLCK_32K_RC:
		return 1;
   82318:	2301      	movs	r3, #1
   8231a:	e012      	b.n	82342 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8231c:	4b0b      	ldr	r3, [pc, #44]	; (8234c <osc_is_ready+0x68>)
   8231e:	4798      	blx	r3
   82320:	4603      	mov	r3, r0
   82322:	2b00      	cmp	r3, #0
   82324:	bf0c      	ite	eq
   82326:	2300      	moveq	r3, #0
   82328:	2301      	movne	r3, #1
   8232a:	b2db      	uxtb	r3, r3
   8232c:	e009      	b.n	82342 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8232e:	4b08      	ldr	r3, [pc, #32]	; (82350 <osc_is_ready+0x6c>)
   82330:	4798      	blx	r3
   82332:	4603      	mov	r3, r0
   82334:	2b00      	cmp	r3, #0
   82336:	bf0c      	ite	eq
   82338:	2300      	moveq	r3, #0
   8233a:	2301      	movne	r3, #1
   8233c:	b2db      	uxtb	r3, r3
   8233e:	e000      	b.n	82342 <osc_is_ready+0x5e>
	}

	return 0;
   82340:	2300      	movs	r3, #0
}
   82342:	4618      	mov	r0, r3
   82344:	3708      	adds	r7, #8
   82346:	46bd      	mov	sp, r7
   82348:	bd80      	pop	{r7, pc}
   8234a:	bf00      	nop
   8234c:	000832f5 	.word	0x000832f5
   82350:	00083435 	.word	0x00083435

00082354 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82354:	b480      	push	{r7}
   82356:	b083      	sub	sp, #12
   82358:	af00      	add	r7, sp, #0
   8235a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8235c:	687b      	ldr	r3, [r7, #4]
   8235e:	2b07      	cmp	r3, #7
   82360:	d825      	bhi.n	823ae <osc_get_rate+0x5a>
   82362:	a201      	add	r2, pc, #4	; (adr r2, 82368 <osc_get_rate+0x14>)
   82364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82368:	00082389 	.word	0x00082389
   8236c:	0008238f 	.word	0x0008238f
   82370:	00082395 	.word	0x00082395
   82374:	0008239b 	.word	0x0008239b
   82378:	0008239f 	.word	0x0008239f
   8237c:	000823a3 	.word	0x000823a3
   82380:	000823a7 	.word	0x000823a7
   82384:	000823ab 	.word	0x000823ab
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82388:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8238c:	e010      	b.n	823b0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8238e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82392:	e00d      	b.n	823b0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82394:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82398:	e00a      	b.n	823b0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8239a:	4b08      	ldr	r3, [pc, #32]	; (823bc <osc_get_rate+0x68>)
   8239c:	e008      	b.n	823b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8239e:	4b08      	ldr	r3, [pc, #32]	; (823c0 <osc_get_rate+0x6c>)
   823a0:	e006      	b.n	823b0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   823a2:	4b08      	ldr	r3, [pc, #32]	; (823c4 <osc_get_rate+0x70>)
   823a4:	e004      	b.n	823b0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   823a6:	4b07      	ldr	r3, [pc, #28]	; (823c4 <osc_get_rate+0x70>)
   823a8:	e002      	b.n	823b0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   823aa:	4b06      	ldr	r3, [pc, #24]	; (823c4 <osc_get_rate+0x70>)
   823ac:	e000      	b.n	823b0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   823ae:	2300      	movs	r3, #0
}
   823b0:	4618      	mov	r0, r3
   823b2:	370c      	adds	r7, #12
   823b4:	46bd      	mov	sp, r7
   823b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   823ba:	4770      	bx	lr
   823bc:	003d0900 	.word	0x003d0900
   823c0:	007a1200 	.word	0x007a1200
   823c4:	00b71b00 	.word	0x00b71b00

000823c8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   823c8:	b580      	push	{r7, lr}
   823ca:	b082      	sub	sp, #8
   823cc:	af00      	add	r7, sp, #0
   823ce:	4603      	mov	r3, r0
   823d0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   823d2:	bf00      	nop
   823d4:	79fb      	ldrb	r3, [r7, #7]
   823d6:	4618      	mov	r0, r3
   823d8:	4b05      	ldr	r3, [pc, #20]	; (823f0 <osc_wait_ready+0x28>)
   823da:	4798      	blx	r3
   823dc:	4603      	mov	r3, r0
   823de:	f083 0301 	eor.w	r3, r3, #1
   823e2:	b2db      	uxtb	r3, r3
   823e4:	2b00      	cmp	r3, #0
   823e6:	d1f5      	bne.n	823d4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   823e8:	3708      	adds	r7, #8
   823ea:	46bd      	mov	sp, r7
   823ec:	bd80      	pop	{r7, pc}
   823ee:	bf00      	nop
   823f0:	000822e5 	.word	0x000822e5

000823f4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   823f4:	b580      	push	{r7, lr}
   823f6:	b086      	sub	sp, #24
   823f8:	af00      	add	r7, sp, #0
   823fa:	60f8      	str	r0, [r7, #12]
   823fc:	607a      	str	r2, [r7, #4]
   823fe:	603b      	str	r3, [r7, #0]
   82400:	460b      	mov	r3, r1
   82402:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82404:	687b      	ldr	r3, [r7, #4]
   82406:	2b00      	cmp	r3, #0
   82408:	d107      	bne.n	8241a <pll_config_init+0x26>
   8240a:	683b      	ldr	r3, [r7, #0]
   8240c:	2b00      	cmp	r3, #0
   8240e:	d104      	bne.n	8241a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82410:	68fb      	ldr	r3, [r7, #12]
   82412:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82416:	601a      	str	r2, [r3, #0]
   82418:	e019      	b.n	8244e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8241a:	7afb      	ldrb	r3, [r7, #11]
   8241c:	4618      	mov	r0, r3
   8241e:	4b0d      	ldr	r3, [pc, #52]	; (82454 <pll_config_init+0x60>)
   82420:	4798      	blx	r3
   82422:	4602      	mov	r2, r0
   82424:	687b      	ldr	r3, [r7, #4]
   82426:	fbb2 f3f3 	udiv	r3, r2, r3
   8242a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   8242c:	697b      	ldr	r3, [r7, #20]
   8242e:	683a      	ldr	r2, [r7, #0]
   82430:	fb02 f303 	mul.w	r3, r2, r3
   82434:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82436:	683b      	ldr	r3, [r7, #0]
   82438:	3b01      	subs	r3, #1
   8243a:	041a      	lsls	r2, r3, #16
   8243c:	4b06      	ldr	r3, [pc, #24]	; (82458 <pll_config_init+0x64>)
   8243e:	4013      	ands	r3, r2
   82440:	687a      	ldr	r2, [r7, #4]
   82442:	b2d2      	uxtb	r2, r2
   82444:	4313      	orrs	r3, r2
   82446:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8244a:	68fb      	ldr	r3, [r7, #12]
   8244c:	601a      	str	r2, [r3, #0]
	}
}
   8244e:	3718      	adds	r7, #24
   82450:	46bd      	mov	sp, r7
   82452:	bd80      	pop	{r7, pc}
   82454:	00082355 	.word	0x00082355
   82458:	07ff0000 	.word	0x07ff0000

0008245c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8245c:	b580      	push	{r7, lr}
   8245e:	b082      	sub	sp, #8
   82460:	af00      	add	r7, sp, #0
   82462:	6078      	str	r0, [r7, #4]
   82464:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   82466:	683b      	ldr	r3, [r7, #0]
   82468:	2b00      	cmp	r3, #0
   8246a:	d108      	bne.n	8247e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8246c:	4b08      	ldr	r3, [pc, #32]	; (82490 <pll_enable+0x34>)
   8246e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82470:	4b08      	ldr	r3, [pc, #32]	; (82494 <pll_enable+0x38>)
   82472:	687a      	ldr	r2, [r7, #4]
   82474:	6812      	ldr	r2, [r2, #0]
   82476:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   8247a:	629a      	str	r2, [r3, #40]	; 0x28
   8247c:	e005      	b.n	8248a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8247e:	4b05      	ldr	r3, [pc, #20]	; (82494 <pll_enable+0x38>)
   82480:	687a      	ldr	r2, [r7, #4]
   82482:	6812      	ldr	r2, [r2, #0]
   82484:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   82488:	61da      	str	r2, [r3, #28]
	}
}
   8248a:	3708      	adds	r7, #8
   8248c:	46bd      	mov	sp, r7
   8248e:	bd80      	pop	{r7, pc}
   82490:	00083451 	.word	0x00083451
   82494:	400e0600 	.word	0x400e0600

00082498 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82498:	b580      	push	{r7, lr}
   8249a:	b082      	sub	sp, #8
   8249c:	af00      	add	r7, sp, #0
   8249e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   824a0:	687b      	ldr	r3, [r7, #4]
   824a2:	2b00      	cmp	r3, #0
   824a4:	d103      	bne.n	824ae <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   824a6:	4b05      	ldr	r3, [pc, #20]	; (824bc <pll_is_locked+0x24>)
   824a8:	4798      	blx	r3
   824aa:	4603      	mov	r3, r0
   824ac:	e002      	b.n	824b4 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   824ae:	4b04      	ldr	r3, [pc, #16]	; (824c0 <pll_is_locked+0x28>)
   824b0:	4798      	blx	r3
   824b2:	4603      	mov	r3, r0
}
   824b4:	4618      	mov	r0, r3
   824b6:	3708      	adds	r7, #8
   824b8:	46bd      	mov	sp, r7
   824ba:	bd80      	pop	{r7, pc}
   824bc:	00083469 	.word	0x00083469
   824c0:	00083485 	.word	0x00083485

000824c4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   824c4:	b580      	push	{r7, lr}
   824c6:	b082      	sub	sp, #8
   824c8:	af00      	add	r7, sp, #0
   824ca:	4603      	mov	r3, r0
   824cc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   824ce:	79fb      	ldrb	r3, [r7, #7]
   824d0:	3b03      	subs	r3, #3
   824d2:	2b04      	cmp	r3, #4
   824d4:	d808      	bhi.n	824e8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   824d6:	79fb      	ldrb	r3, [r7, #7]
   824d8:	4618      	mov	r0, r3
   824da:	4b05      	ldr	r3, [pc, #20]	; (824f0 <pll_enable_source+0x2c>)
   824dc:	4798      	blx	r3
		osc_wait_ready(e_src);
   824de:	79fb      	ldrb	r3, [r7, #7]
   824e0:	4618      	mov	r0, r3
   824e2:	4b04      	ldr	r3, [pc, #16]	; (824f4 <pll_enable_source+0x30>)
   824e4:	4798      	blx	r3
		break;
   824e6:	e000      	b.n	824ea <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   824e8:	bf00      	nop
	}
}
   824ea:	3708      	adds	r7, #8
   824ec:	46bd      	mov	sp, r7
   824ee:	bd80      	pop	{r7, pc}
   824f0:	00082265 	.word	0x00082265
   824f4:	000823c9 	.word	0x000823c9

000824f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   824f8:	b580      	push	{r7, lr}
   824fa:	b082      	sub	sp, #8
   824fc:	af00      	add	r7, sp, #0
   824fe:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82500:	bf00      	nop
   82502:	6878      	ldr	r0, [r7, #4]
   82504:	4b04      	ldr	r3, [pc, #16]	; (82518 <pll_wait_for_lock+0x20>)
   82506:	4798      	blx	r3
   82508:	4603      	mov	r3, r0
   8250a:	2b00      	cmp	r3, #0
   8250c:	d0f9      	beq.n	82502 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8250e:	2300      	movs	r3, #0
}
   82510:	4618      	mov	r0, r3
   82512:	3708      	adds	r7, #8
   82514:	46bd      	mov	sp, r7
   82516:	bd80      	pop	{r7, pc}
   82518:	00082499 	.word	0x00082499

0008251c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8251c:	b580      	push	{r7, lr}
   8251e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   82520:	2006      	movs	r0, #6
   82522:	4b04      	ldr	r3, [pc, #16]	; (82534 <sysclk_get_main_hz+0x18>)
   82524:	4798      	blx	r3
   82526:	4602      	mov	r2, r0
   82528:	4613      	mov	r3, r2
   8252a:	00db      	lsls	r3, r3, #3
   8252c:	1a9b      	subs	r3, r3, r2
   8252e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82530:	4618      	mov	r0, r3
   82532:	bd80      	pop	{r7, pc}
   82534:	00082355 	.word	0x00082355

00082538 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82538:	b580      	push	{r7, lr}
   8253a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   8253c:	4b02      	ldr	r3, [pc, #8]	; (82548 <sysclk_get_cpu_hz+0x10>)
   8253e:	4798      	blx	r3
   82540:	4603      	mov	r3, r0
   82542:	085b      	lsrs	r3, r3, #1
}
   82544:	4618      	mov	r0, r3
   82546:	bd80      	pop	{r7, pc}
   82548:	0008251d 	.word	0x0008251d

0008254c <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8254c:	b590      	push	{r4, r7, lr}
   8254e:	b083      	sub	sp, #12
   82550:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82552:	4b10      	ldr	r3, [pc, #64]	; (82594 <sysclk_init+0x48>)
   82554:	4798      	blx	r3
   82556:	4603      	mov	r3, r0
   82558:	4618      	mov	r0, r3
   8255a:	4b0f      	ldr	r3, [pc, #60]	; (82598 <sysclk_init+0x4c>)
   8255c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8255e:	2006      	movs	r0, #6
   82560:	4b0e      	ldr	r3, [pc, #56]	; (8259c <sysclk_init+0x50>)
   82562:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82564:	1d3b      	adds	r3, r7, #4
   82566:	4618      	mov	r0, r3
   82568:	2106      	movs	r1, #6
   8256a:	2201      	movs	r2, #1
   8256c:	230e      	movs	r3, #14
   8256e:	4c0c      	ldr	r4, [pc, #48]	; (825a0 <sysclk_init+0x54>)
   82570:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82572:	1d3b      	adds	r3, r7, #4
   82574:	4618      	mov	r0, r3
   82576:	2100      	movs	r1, #0
   82578:	4b0a      	ldr	r3, [pc, #40]	; (825a4 <sysclk_init+0x58>)
   8257a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8257c:	2000      	movs	r0, #0
   8257e:	4b0a      	ldr	r3, [pc, #40]	; (825a8 <sysclk_init+0x5c>)
   82580:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82582:	2010      	movs	r0, #16
   82584:	4b09      	ldr	r3, [pc, #36]	; (825ac <sysclk_init+0x60>)
   82586:	4798      	blx	r3
		break;
   82588:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8258a:	4b09      	ldr	r3, [pc, #36]	; (825b0 <sysclk_init+0x64>)
   8258c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8258e:	370c      	adds	r7, #12
   82590:	46bd      	mov	sp, r7
   82592:	bd90      	pop	{r4, r7, pc}
   82594:	00082539 	.word	0x00082539
   82598:	00083a7d 	.word	0x00083a7d
   8259c:	000824c5 	.word	0x000824c5
   825a0:	000823f5 	.word	0x000823f5
   825a4:	0008245d 	.word	0x0008245d
   825a8:	000824f9 	.word	0x000824f9
   825ac:	00083235 	.word	0x00083235
   825b0:	000838fd 	.word	0x000838fd

000825b4 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   825b4:	b580      	push	{r7, lr}
   825b6:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   825b8:	4b16      	ldr	r3, [pc, #88]	; (82614 <safe_board_init+0x60>)
   825ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   825be:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   825c0:	2001      	movs	r0, #1
   825c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825c6:	4b14      	ldr	r3, [pc, #80]	; (82618 <safe_board_init+0x64>)
   825c8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   825ca:	2000      	movs	r0, #0
   825cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825d0:	4b11      	ldr	r3, [pc, #68]	; (82618 <safe_board_init+0x64>)
   825d2:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   825d4:	2034      	movs	r0, #52	; 0x34
   825d6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   825da:	4b0f      	ldr	r3, [pc, #60]	; (82618 <safe_board_init+0x64>)
   825dc:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   825de:	2035      	movs	r0, #53	; 0x35
   825e0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   825e4:	4b0c      	ldr	r3, [pc, #48]	; (82618 <safe_board_init+0x64>)
   825e6:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   825e8:	202f      	movs	r0, #47	; 0x2f
   825ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825ee:	4b0a      	ldr	r3, [pc, #40]	; (82618 <safe_board_init+0x64>)
   825f0:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   825f2:	202e      	movs	r0, #46	; 0x2e
   825f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825f8:	4b07      	ldr	r3, [pc, #28]	; (82618 <safe_board_init+0x64>)
   825fa:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   825fc:	208f      	movs	r0, #143	; 0x8f
   825fe:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82602:	4b05      	ldr	r3, [pc, #20]	; (82618 <safe_board_init+0x64>)
   82604:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   82606:	2090      	movs	r0, #144	; 0x90
   82608:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8260c:	4b02      	ldr	r3, [pc, #8]	; (82618 <safe_board_init+0x64>)
   8260e:	4798      	blx	r3
	#endif
	return;
   82610:	bf00      	nop
}
   82612:	bd80      	pop	{r7, pc}
   82614:	400e1a50 	.word	0x400e1a50
   82618:	00082f15 	.word	0x00082f15

0008261c <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   8261c:	b580      	push	{r7, lr}
   8261e:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   82620:	2057      	movs	r0, #87	; 0x57
   82622:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82626:	4b34      	ldr	r3, [pc, #208]	; (826f8 <board_init+0xdc>)
   82628:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   8262a:	2057      	movs	r0, #87	; 0x57
   8262c:	4b33      	ldr	r3, [pc, #204]	; (826fc <board_init+0xe0>)
   8262e:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82630:	203b      	movs	r0, #59	; 0x3b
   82632:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82636:	4b30      	ldr	r3, [pc, #192]	; (826f8 <board_init+0xdc>)
   82638:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8263a:	2055      	movs	r0, #85	; 0x55
   8263c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82640:	4b2d      	ldr	r3, [pc, #180]	; (826f8 <board_init+0xdc>)
   82642:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82644:	2056      	movs	r0, #86	; 0x56
   82646:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8264a:	4b2b      	ldr	r3, [pc, #172]	; (826f8 <board_init+0xdc>)
   8264c:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8264e:	2087      	movs	r0, #135	; 0x87
   82650:	492b      	ldr	r1, [pc, #172]	; (82700 <board_init+0xe4>)
   82652:	4b29      	ldr	r3, [pc, #164]	; (826f8 <board_init+0xdc>)
   82654:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82656:	2037      	movs	r0, #55	; 0x37
   82658:	492a      	ldr	r1, [pc, #168]	; (82704 <board_init+0xe8>)
   8265a:	4b27      	ldr	r3, [pc, #156]	; (826f8 <board_init+0xdc>)
   8265c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8265e:	482a      	ldr	r0, [pc, #168]	; (82708 <board_init+0xec>)
   82660:	f44f 7140 	mov.w	r1, #768	; 0x300
   82664:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82668:	4b28      	ldr	r3, [pc, #160]	; (8270c <board_init+0xf0>)
   8266a:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   8266c:	2019      	movs	r0, #25
   8266e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82672:	4b21      	ldr	r3, [pc, #132]	; (826f8 <board_init+0xdc>)
   82674:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   82676:	201a      	movs	r0, #26
   82678:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8267c:	4b1e      	ldr	r3, [pc, #120]	; (826f8 <board_init+0xdc>)
   8267e:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   82680:	201b      	movs	r0, #27
   82682:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82686:	4b1c      	ldr	r3, [pc, #112]	; (826f8 <board_init+0xdc>)
   82688:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   8268a:	201c      	movs	r0, #28
   8268c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82690:	4b19      	ldr	r3, [pc, #100]	; (826f8 <board_init+0xdc>)
   82692:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS1
#       if defined(CONF_BOARD_SPI0_NPCS1_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS1_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS1_GPIO,
   82694:	2034      	movs	r0, #52	; 0x34
   82696:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8269a:	4b17      	ldr	r3, [pc, #92]	; (826f8 <board_init+0xdc>)
   8269c:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS2
#       if defined(CONF_BOARD_SPI0_NPCS2_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS2_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS2_GPIO,
   8269e:	2035      	movs	r0, #53	; 0x35
   826a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   826a4:	4b14      	ldr	r3, [pc, #80]	; (826f8 <board_init+0xdc>)
   826a6:	4798      	blx	r3
					SPI0_NPCS3_PA31_FLAGS);
#       endif
#   endif

#	ifdef CONF_SPI_MEM2
		gpio_configure_pin(SPI0_MEM2_HOLD, SPI0_MEM2_HOLD_FLAGS);
   826a8:	2020      	movs	r0, #32
   826aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   826ae:	4b12      	ldr	r3, [pc, #72]	; (826f8 <board_init+0xdc>)
   826b0:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM2_WP, SPI0_MEM2_WP_FLAGS);
   826b2:	201c      	movs	r0, #28
   826b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   826b8:	4b0f      	ldr	r3, [pc, #60]	; (826f8 <board_init+0xdc>)
   826ba:	4798      	blx	r3
#	endif

#	ifdef CONF_SPI_MEM1
		gpio_configure_pin(SPI0_MEM1_HOLD, SPI0_MEM1_HOLD_FLAGS);
   826bc:	2015      	movs	r0, #21
   826be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   826c2:	4b0d      	ldr	r3, [pc, #52]	; (826f8 <board_init+0xdc>)
   826c4:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM1_WP, SPI0_MEM1_WP_FLAGS);
   826c6:	2033      	movs	r0, #51	; 0x33
   826c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   826cc:	4b0a      	ldr	r3, [pc, #40]	; (826f8 <board_init+0xdc>)
   826ce:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   826d0:	200a      	movs	r0, #10
   826d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   826d6:	4b08      	ldr	r3, [pc, #32]	; (826f8 <board_init+0xdc>)
   826d8:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   826da:	200b      	movs	r0, #11
   826dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   826e0:	4b05      	ldr	r3, [pc, #20]	; (826f8 <board_init+0xdc>)
   826e2:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   826e4:	208e      	movs	r0, #142	; 0x8e
   826e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   826ea:	4b03      	ldr	r3, [pc, #12]	; (826f8 <board_init+0xdc>)
   826ec:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   826ee:	208e      	movs	r0, #142	; 0x8e
   826f0:	4b07      	ldr	r3, [pc, #28]	; (82710 <board_init+0xf4>)
   826f2:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   826f4:	bd80      	pop	{r7, pc}
   826f6:	bf00      	nop
   826f8:	00082f15 	.word	0x00082f15
   826fc:	00082e4d 	.word	0x00082e4d
   82700:	28000079 	.word	0x28000079
   82704:	28000059 	.word	0x28000059
   82708:	400e0e00 	.word	0x400e0e00
   8270c:	00083051 	.word	0x00083051
   82710:	00082e81 	.word	0x00082e81

00082714 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   82714:	b480      	push	{r7}
   82716:	b083      	sub	sp, #12
   82718:	af00      	add	r7, sp, #0
   8271a:	6078      	str	r0, [r7, #4]
   8271c:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8271e:	687b      	ldr	r3, [r7, #4]
   82720:	683a      	ldr	r2, [r7, #0]
   82722:	601a      	str	r2, [r3, #0]
}
   82724:	370c      	adds	r7, #12
   82726:	46bd      	mov	sp, r7
   82728:	f85d 7b04 	ldr.w	r7, [sp], #4
   8272c:	4770      	bx	lr
   8272e:	bf00      	nop

00082730 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   82730:	b480      	push	{r7}
   82732:	b083      	sub	sp, #12
   82734:	af00      	add	r7, sp, #0
   82736:	6078      	str	r0, [r7, #4]
   82738:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8273a:	687b      	ldr	r3, [r7, #4]
   8273c:	683a      	ldr	r2, [r7, #0]
   8273e:	605a      	str	r2, [r3, #4]
}
   82740:	370c      	adds	r7, #12
   82742:	46bd      	mov	sp, r7
   82744:	f85d 7b04 	ldr.w	r7, [sp], #4
   82748:	4770      	bx	lr
   8274a:	bf00      	nop

0008274c <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   8274c:	b580      	push	{r7, lr}
   8274e:	b082      	sub	sp, #8
   82750:	af00      	add	r7, sp, #0
   82752:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   82754:	687b      	ldr	r3, [r7, #4]
   82756:	685b      	ldr	r3, [r3, #4]
   82758:	4618      	mov	r0, r3
   8275a:	4b02      	ldr	r3, [pc, #8]	; (82764 <sn65hvd234_enable+0x18>)
   8275c:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   8275e:	3708      	adds	r7, #8
   82760:	46bd      	mov	sp, r7
   82762:	bd80      	pop	{r7, pc}
   82764:	00082e4d 	.word	0x00082e4d

00082768 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   82768:	b580      	push	{r7, lr}
   8276a:	b082      	sub	sp, #8
   8276c:	af00      	add	r7, sp, #0
   8276e:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   82770:	687b      	ldr	r3, [r7, #4]
   82772:	681b      	ldr	r3, [r3, #0]
   82774:	4618      	mov	r0, r3
   82776:	4b02      	ldr	r3, [pc, #8]	; (82780 <sn65hvd234_disable_low_power+0x18>)
   82778:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   8277a:	3708      	adds	r7, #8
   8277c:	46bd      	mov	sp, r7
   8277e:	bd80      	pop	{r7, pc}
   82780:	00082e81 	.word	0x00082e81

00082784 <can_set_baudrate>:
   82784:	b580      	push	{r7, lr}
   82786:	b08a      	sub	sp, #40	; 0x28
   82788:	af00      	add	r7, sp, #0
   8278a:	60f8      	str	r0, [r7, #12]
   8278c:	60b9      	str	r1, [r7, #8]
   8278e:	607a      	str	r2, [r7, #4]
   82790:	687b      	ldr	r3, [r7, #4]
   82792:	f246 12a8 	movw	r2, #25000	; 0x61a8
   82796:	fb02 f203 	mul.w	r2, r2, r3
   8279a:	68bb      	ldr	r3, [r7, #8]
   8279c:	4413      	add	r3, r2
   8279e:	1e5a      	subs	r2, r3, #1
   827a0:	687b      	ldr	r3, [r7, #4]
   827a2:	f246 11a8 	movw	r1, #25000	; 0x61a8
   827a6:	fb01 f303 	mul.w	r3, r1, r3
   827aa:	fbb2 f3f3 	udiv	r3, r2, r3
   827ae:	2b80      	cmp	r3, #128	; 0x80
   827b0:	d901      	bls.n	827b6 <can_set_baudrate+0x32>
   827b2:	2300      	movs	r3, #0
   827b4:	e085      	b.n	828c2 <can_set_baudrate+0x13e>
   827b6:	68bb      	ldr	r3, [r7, #8]
   827b8:	085a      	lsrs	r2, r3, #1
   827ba:	687b      	ldr	r3, [r7, #4]
   827bc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   827c0:	fb01 f303 	mul.w	r3, r1, r3
   827c4:	429a      	cmp	r2, r3
   827c6:	d201      	bcs.n	827cc <can_set_baudrate+0x48>
   827c8:	2300      	movs	r3, #0
   827ca:	e07a      	b.n	828c2 <can_set_baudrate+0x13e>
   827cc:	2308      	movs	r3, #8
   827ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   827d2:	f04f 33ff 	mov.w	r3, #4294967295
   827d6:	623b      	str	r3, [r7, #32]
   827d8:	2308      	movs	r3, #8
   827da:	77fb      	strb	r3, [r7, #31]
   827dc:	e02b      	b.n	82836 <can_set_baudrate+0xb2>
   827de:	7ffb      	ldrb	r3, [r7, #31]
   827e0:	687a      	ldr	r2, [r7, #4]
   827e2:	fb02 f303 	mul.w	r3, r2, r3
   827e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   827ea:	fb02 f303 	mul.w	r3, r2, r3
   827ee:	68ba      	ldr	r2, [r7, #8]
   827f0:	fbb2 f3f3 	udiv	r3, r2, r3
   827f4:	2b80      	cmp	r3, #128	; 0x80
   827f6:	d81b      	bhi.n	82830 <can_set_baudrate+0xac>
   827f8:	7ffb      	ldrb	r3, [r7, #31]
   827fa:	687a      	ldr	r2, [r7, #4]
   827fc:	fb02 f303 	mul.w	r3, r2, r3
   82800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82804:	fb02 f203 	mul.w	r2, r2, r3
   82808:	68bb      	ldr	r3, [r7, #8]
   8280a:	fbb3 f1f2 	udiv	r1, r3, r2
   8280e:	fb02 f201 	mul.w	r2, r2, r1
   82812:	1a9b      	subs	r3, r3, r2
   82814:	61bb      	str	r3, [r7, #24]
   82816:	69ba      	ldr	r2, [r7, #24]
   82818:	6a3b      	ldr	r3, [r7, #32]
   8281a:	429a      	cmp	r2, r3
   8281c:	d208      	bcs.n	82830 <can_set_baudrate+0xac>
   8281e:	69bb      	ldr	r3, [r7, #24]
   82820:	623b      	str	r3, [r7, #32]
   82822:	7ffb      	ldrb	r3, [r7, #31]
   82824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   82828:	6a3b      	ldr	r3, [r7, #32]
   8282a:	2b00      	cmp	r3, #0
   8282c:	d100      	bne.n	82830 <can_set_baudrate+0xac>
   8282e:	e005      	b.n	8283c <can_set_baudrate+0xb8>
   82830:	7ffb      	ldrb	r3, [r7, #31]
   82832:	3301      	adds	r3, #1
   82834:	77fb      	strb	r3, [r7, #31]
   82836:	7ffb      	ldrb	r3, [r7, #31]
   82838:	2b19      	cmp	r3, #25
   8283a:	d9d0      	bls.n	827de <can_set_baudrate+0x5a>
   8283c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   82840:	687a      	ldr	r2, [r7, #4]
   82842:	fb02 f303 	mul.w	r3, r2, r3
   82846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8284a:	fb02 f303 	mul.w	r3, r2, r3
   8284e:	68ba      	ldr	r2, [r7, #8]
   82850:	fbb2 f3f3 	udiv	r3, r2, r3
   82854:	75fb      	strb	r3, [r7, #23]
   82856:	7dfb      	ldrb	r3, [r7, #23]
   82858:	2b01      	cmp	r3, #1
   8285a:	d801      	bhi.n	82860 <can_set_baudrate+0xdc>
   8285c:	2300      	movs	r3, #0
   8285e:	e030      	b.n	828c2 <can_set_baudrate+0x13e>
   82860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   82864:	f1a3 0208 	sub.w	r2, r3, #8
   82868:	4613      	mov	r3, r2
   8286a:	005b      	lsls	r3, r3, #1
   8286c:	4413      	add	r3, r2
   8286e:	005b      	lsls	r3, r3, #1
   82870:	4a16      	ldr	r2, [pc, #88]	; (828cc <can_set_baudrate+0x148>)
   82872:	4413      	add	r3, r2
   82874:	613b      	str	r3, [r7, #16]
   82876:	68f8      	ldr	r0, [r7, #12]
   82878:	4b15      	ldr	r3, [pc, #84]	; (828d0 <can_set_baudrate+0x14c>)
   8287a:	4798      	blx	r3
   8287c:	693b      	ldr	r3, [r7, #16]
   8287e:	78db      	ldrb	r3, [r3, #3]
   82880:	3b01      	subs	r3, #1
   82882:	f003 0207 	and.w	r2, r3, #7
   82886:	693b      	ldr	r3, [r7, #16]
   82888:	789b      	ldrb	r3, [r3, #2]
   8288a:	3b01      	subs	r3, #1
   8288c:	011b      	lsls	r3, r3, #4
   8288e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82892:	431a      	orrs	r2, r3
   82894:	693b      	ldr	r3, [r7, #16]
   82896:	785b      	ldrb	r3, [r3, #1]
   82898:	3b01      	subs	r3, #1
   8289a:	021b      	lsls	r3, r3, #8
   8289c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   828a0:	431a      	orrs	r2, r3
   828a2:	693b      	ldr	r3, [r7, #16]
   828a4:	791b      	ldrb	r3, [r3, #4]
   828a6:	3b01      	subs	r3, #1
   828a8:	031b      	lsls	r3, r3, #12
   828aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   828ae:	431a      	orrs	r2, r3
   828b0:	7dfb      	ldrb	r3, [r7, #23]
   828b2:	3b01      	subs	r3, #1
   828b4:	041b      	lsls	r3, r3, #16
   828b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   828ba:	431a      	orrs	r2, r3
   828bc:	68fb      	ldr	r3, [r7, #12]
   828be:	615a      	str	r2, [r3, #20]
   828c0:	2301      	movs	r3, #1
   828c2:	4618      	mov	r0, r3
   828c4:	3728      	adds	r7, #40	; 0x28
   828c6:	46bd      	mov	sp, r7
   828c8:	bd80      	pop	{r7, pc}
   828ca:	bf00      	nop
   828cc:	000876e4 	.word	0x000876e4
   828d0:	0008297d 	.word	0x0008297d

000828d4 <can_init>:
   828d4:	b580      	push	{r7, lr}
   828d6:	b086      	sub	sp, #24
   828d8:	af00      	add	r7, sp, #0
   828da:	60f8      	str	r0, [r7, #12]
   828dc:	60b9      	str	r1, [r7, #8]
   828de:	607a      	str	r2, [r7, #4]
   828e0:	68f8      	ldr	r0, [r7, #12]
   828e2:	68b9      	ldr	r1, [r7, #8]
   828e4:	687a      	ldr	r2, [r7, #4]
   828e6:	4b17      	ldr	r3, [pc, #92]	; (82944 <can_init+0x70>)
   828e8:	4798      	blx	r3
   828ea:	6178      	str	r0, [r7, #20]
   828ec:	697b      	ldr	r3, [r7, #20]
   828ee:	2b00      	cmp	r3, #0
   828f0:	d101      	bne.n	828f6 <can_init+0x22>
   828f2:	2300      	movs	r3, #0
   828f4:	e021      	b.n	8293a <can_init+0x66>
   828f6:	68f8      	ldr	r0, [r7, #12]
   828f8:	4b13      	ldr	r3, [pc, #76]	; (82948 <can_init+0x74>)
   828fa:	4798      	blx	r3
   828fc:	68f8      	ldr	r0, [r7, #12]
   828fe:	4b13      	ldr	r3, [pc, #76]	; (8294c <can_init+0x78>)
   82900:	4798      	blx	r3
   82902:	2300      	movs	r3, #0
   82904:	617b      	str	r3, [r7, #20]
   82906:	2300      	movs	r3, #0
   82908:	613b      	str	r3, [r7, #16]
   8290a:	e006      	b.n	8291a <can_init+0x46>
   8290c:	68f8      	ldr	r0, [r7, #12]
   8290e:	4b10      	ldr	r3, [pc, #64]	; (82950 <can_init+0x7c>)
   82910:	4798      	blx	r3
   82912:	6178      	str	r0, [r7, #20]
   82914:	693b      	ldr	r3, [r7, #16]
   82916:	3301      	adds	r3, #1
   82918:	613b      	str	r3, [r7, #16]
   8291a:	697b      	ldr	r3, [r7, #20]
   8291c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   82920:	2b00      	cmp	r3, #0
   82922:	d103      	bne.n	8292c <can_init+0x58>
   82924:	693a      	ldr	r2, [r7, #16]
   82926:	4b0b      	ldr	r3, [pc, #44]	; (82954 <can_init+0x80>)
   82928:	429a      	cmp	r2, r3
   8292a:	d9ef      	bls.n	8290c <can_init+0x38>
   8292c:	693a      	ldr	r2, [r7, #16]
   8292e:	4b0a      	ldr	r3, [pc, #40]	; (82958 <can_init+0x84>)
   82930:	429a      	cmp	r2, r3
   82932:	d101      	bne.n	82938 <can_init+0x64>
   82934:	2300      	movs	r3, #0
   82936:	e000      	b.n	8293a <can_init+0x66>
   82938:	2301      	movs	r3, #1
   8293a:	4618      	mov	r0, r3
   8293c:	3718      	adds	r7, #24
   8293e:	46bd      	mov	sp, r7
   82940:	bd80      	pop	{r7, pc}
   82942:	bf00      	nop
   82944:	00082785 	.word	0x00082785
   82948:	00082c31 	.word	0x00082c31
   8294c:	0008295d 	.word	0x0008295d
   82950:	000829d5 	.word	0x000829d5
   82954:	0001869f 	.word	0x0001869f
   82958:	000186a0 	.word	0x000186a0

0008295c <can_enable>:
   8295c:	b480      	push	{r7}
   8295e:	b083      	sub	sp, #12
   82960:	af00      	add	r7, sp, #0
   82962:	6078      	str	r0, [r7, #4]
   82964:	687b      	ldr	r3, [r7, #4]
   82966:	681b      	ldr	r3, [r3, #0]
   82968:	f043 0201 	orr.w	r2, r3, #1
   8296c:	687b      	ldr	r3, [r7, #4]
   8296e:	601a      	str	r2, [r3, #0]
   82970:	370c      	adds	r7, #12
   82972:	46bd      	mov	sp, r7
   82974:	f85d 7b04 	ldr.w	r7, [sp], #4
   82978:	4770      	bx	lr
   8297a:	bf00      	nop

0008297c <can_disable>:
   8297c:	b480      	push	{r7}
   8297e:	b083      	sub	sp, #12
   82980:	af00      	add	r7, sp, #0
   82982:	6078      	str	r0, [r7, #4]
   82984:	687b      	ldr	r3, [r7, #4]
   82986:	681b      	ldr	r3, [r3, #0]
   82988:	f023 0201 	bic.w	r2, r3, #1
   8298c:	687b      	ldr	r3, [r7, #4]
   8298e:	601a      	str	r2, [r3, #0]
   82990:	370c      	adds	r7, #12
   82992:	46bd      	mov	sp, r7
   82994:	f85d 7b04 	ldr.w	r7, [sp], #4
   82998:	4770      	bx	lr
   8299a:	bf00      	nop

0008299c <can_enable_interrupt>:
   8299c:	b480      	push	{r7}
   8299e:	b083      	sub	sp, #12
   829a0:	af00      	add	r7, sp, #0
   829a2:	6078      	str	r0, [r7, #4]
   829a4:	6039      	str	r1, [r7, #0]
   829a6:	687b      	ldr	r3, [r7, #4]
   829a8:	683a      	ldr	r2, [r7, #0]
   829aa:	605a      	str	r2, [r3, #4]
   829ac:	370c      	adds	r7, #12
   829ae:	46bd      	mov	sp, r7
   829b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   829b4:	4770      	bx	lr
   829b6:	bf00      	nop

000829b8 <can_disable_interrupt>:
   829b8:	b480      	push	{r7}
   829ba:	b083      	sub	sp, #12
   829bc:	af00      	add	r7, sp, #0
   829be:	6078      	str	r0, [r7, #4]
   829c0:	6039      	str	r1, [r7, #0]
   829c2:	687b      	ldr	r3, [r7, #4]
   829c4:	683a      	ldr	r2, [r7, #0]
   829c6:	609a      	str	r2, [r3, #8]
   829c8:	370c      	adds	r7, #12
   829ca:	46bd      	mov	sp, r7
   829cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   829d0:	4770      	bx	lr
   829d2:	bf00      	nop

000829d4 <can_get_status>:
   829d4:	b480      	push	{r7}
   829d6:	b083      	sub	sp, #12
   829d8:	af00      	add	r7, sp, #0
   829da:	6078      	str	r0, [r7, #4]
   829dc:	687b      	ldr	r3, [r7, #4]
   829de:	691b      	ldr	r3, [r3, #16]
   829e0:	4618      	mov	r0, r3
   829e2:	370c      	adds	r7, #12
   829e4:	46bd      	mov	sp, r7
   829e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   829ea:	4770      	bx	lr

000829ec <can_mailbox_get_status>:
   829ec:	b480      	push	{r7}
   829ee:	b083      	sub	sp, #12
   829f0:	af00      	add	r7, sp, #0
   829f2:	6078      	str	r0, [r7, #4]
   829f4:	460b      	mov	r3, r1
   829f6:	70fb      	strb	r3, [r7, #3]
   829f8:	78fb      	ldrb	r3, [r7, #3]
   829fa:	687a      	ldr	r2, [r7, #4]
   829fc:	015b      	lsls	r3, r3, #5
   829fe:	4413      	add	r3, r2
   82a00:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82a04:	681b      	ldr	r3, [r3, #0]
   82a06:	4618      	mov	r0, r3
   82a08:	370c      	adds	r7, #12
   82a0a:	46bd      	mov	sp, r7
   82a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a10:	4770      	bx	lr
   82a12:	bf00      	nop

00082a14 <can_mailbox_send_transfer_cmd>:
   82a14:	b480      	push	{r7}
   82a16:	b085      	sub	sp, #20
   82a18:	af00      	add	r7, sp, #0
   82a1a:	6078      	str	r0, [r7, #4]
   82a1c:	6039      	str	r1, [r7, #0]
   82a1e:	683b      	ldr	r3, [r7, #0]
   82a20:	681b      	ldr	r3, [r3, #0]
   82a22:	73fb      	strb	r3, [r7, #15]
   82a24:	7bfb      	ldrb	r3, [r7, #15]
   82a26:	683a      	ldr	r2, [r7, #0]
   82a28:	7992      	ldrb	r2, [r2, #6]
   82a2a:	0412      	lsls	r2, r2, #16
   82a2c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   82a30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   82a34:	6879      	ldr	r1, [r7, #4]
   82a36:	015b      	lsls	r3, r3, #5
   82a38:	440b      	add	r3, r1
   82a3a:	f503 7306 	add.w	r3, r3, #536	; 0x218
   82a3e:	605a      	str	r2, [r3, #4]
   82a40:	3714      	adds	r7, #20
   82a42:	46bd      	mov	sp, r7
   82a44:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a48:	4770      	bx	lr
   82a4a:	bf00      	nop

00082a4c <can_mailbox_init>:
   82a4c:	b480      	push	{r7}
   82a4e:	b085      	sub	sp, #20
   82a50:	af00      	add	r7, sp, #0
   82a52:	6078      	str	r0, [r7, #4]
   82a54:	6039      	str	r1, [r7, #0]
   82a56:	683b      	ldr	r3, [r7, #0]
   82a58:	681b      	ldr	r3, [r3, #0]
   82a5a:	73fb      	strb	r3, [r7, #15]
   82a5c:	683b      	ldr	r3, [r7, #0]
   82a5e:	791b      	ldrb	r3, [r3, #4]
   82a60:	2b00      	cmp	r3, #0
   82a62:	d12e      	bne.n	82ac2 <can_mailbox_init+0x76>
   82a64:	7bfb      	ldrb	r3, [r7, #15]
   82a66:	687a      	ldr	r2, [r7, #4]
   82a68:	3310      	adds	r3, #16
   82a6a:	015b      	lsls	r3, r3, #5
   82a6c:	4413      	add	r3, r2
   82a6e:	2200      	movs	r2, #0
   82a70:	601a      	str	r2, [r3, #0]
   82a72:	7bfb      	ldrb	r3, [r7, #15]
   82a74:	687a      	ldr	r2, [r7, #4]
   82a76:	3310      	adds	r3, #16
   82a78:	015b      	lsls	r3, r3, #5
   82a7a:	4413      	add	r3, r2
   82a7c:	2200      	movs	r2, #0
   82a7e:	605a      	str	r2, [r3, #4]
   82a80:	7bfb      	ldrb	r3, [r7, #15]
   82a82:	687a      	ldr	r2, [r7, #4]
   82a84:	015b      	lsls	r3, r3, #5
   82a86:	4413      	add	r3, r2
   82a88:	f503 7302 	add.w	r3, r3, #520	; 0x208
   82a8c:	2200      	movs	r2, #0
   82a8e:	601a      	str	r2, [r3, #0]
   82a90:	7bfb      	ldrb	r3, [r7, #15]
   82a92:	687a      	ldr	r2, [r7, #4]
   82a94:	015b      	lsls	r3, r3, #5
   82a96:	4413      	add	r3, r2
   82a98:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82a9c:	2200      	movs	r2, #0
   82a9e:	605a      	str	r2, [r3, #4]
   82aa0:	7bfb      	ldrb	r3, [r7, #15]
   82aa2:	687a      	ldr	r2, [r7, #4]
   82aa4:	015b      	lsls	r3, r3, #5
   82aa6:	4413      	add	r3, r2
   82aa8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   82aac:	2200      	movs	r2, #0
   82aae:	601a      	str	r2, [r3, #0]
   82ab0:	7bfb      	ldrb	r3, [r7, #15]
   82ab2:	687a      	ldr	r2, [r7, #4]
   82ab4:	015b      	lsls	r3, r3, #5
   82ab6:	4413      	add	r3, r2
   82ab8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   82abc:	2200      	movs	r2, #0
   82abe:	605a      	str	r2, [r3, #4]
   82ac0:	e04e      	b.n	82b60 <can_mailbox_init+0x114>
   82ac2:	7bfb      	ldrb	r3, [r7, #15]
   82ac4:	7bfa      	ldrb	r2, [r7, #15]
   82ac6:	6879      	ldr	r1, [r7, #4]
   82ac8:	3210      	adds	r2, #16
   82aca:	0152      	lsls	r2, r2, #5
   82acc:	440a      	add	r2, r1
   82ace:	6812      	ldr	r2, [r2, #0]
   82ad0:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
   82ad4:	683a      	ldr	r2, [r7, #0]
   82ad6:	79d2      	ldrb	r2, [r2, #7]
   82ad8:	0412      	lsls	r2, r2, #16
   82ada:	430a      	orrs	r2, r1
   82adc:	6879      	ldr	r1, [r7, #4]
   82ade:	3310      	adds	r3, #16
   82ae0:	015b      	lsls	r3, r3, #5
   82ae2:	440b      	add	r3, r1
   82ae4:	601a      	str	r2, [r3, #0]
   82ae6:	683b      	ldr	r3, [r7, #0]
   82ae8:	795b      	ldrb	r3, [r3, #5]
   82aea:	2b00      	cmp	r3, #0
   82aec:	d015      	beq.n	82b1a <can_mailbox_init+0xce>
   82aee:	7bfb      	ldrb	r3, [r7, #15]
   82af0:	683a      	ldr	r2, [r7, #0]
   82af2:	68d2      	ldr	r2, [r2, #12]
   82af4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82af8:	6879      	ldr	r1, [r7, #4]
   82afa:	3310      	adds	r3, #16
   82afc:	015b      	lsls	r3, r3, #5
   82afe:	440b      	add	r3, r1
   82b00:	605a      	str	r2, [r3, #4]
   82b02:	7bfb      	ldrb	r3, [r7, #15]
   82b04:	683a      	ldr	r2, [r7, #0]
   82b06:	6912      	ldr	r2, [r2, #16]
   82b08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82b0c:	6879      	ldr	r1, [r7, #4]
   82b0e:	015b      	lsls	r3, r3, #5
   82b10:	440b      	add	r3, r1
   82b12:	f503 7302 	add.w	r3, r3, #520	; 0x208
   82b16:	601a      	str	r2, [r3, #0]
   82b18:	e010      	b.n	82b3c <can_mailbox_init+0xf0>
   82b1a:	7bfb      	ldrb	r3, [r7, #15]
   82b1c:	683a      	ldr	r2, [r7, #0]
   82b1e:	68d2      	ldr	r2, [r2, #12]
   82b20:	6879      	ldr	r1, [r7, #4]
   82b22:	3310      	adds	r3, #16
   82b24:	015b      	lsls	r3, r3, #5
   82b26:	440b      	add	r3, r1
   82b28:	605a      	str	r2, [r3, #4]
   82b2a:	7bfb      	ldrb	r3, [r7, #15]
   82b2c:	683a      	ldr	r2, [r7, #0]
   82b2e:	6912      	ldr	r2, [r2, #16]
   82b30:	6879      	ldr	r1, [r7, #4]
   82b32:	015b      	lsls	r3, r3, #5
   82b34:	440b      	add	r3, r1
   82b36:	f503 7302 	add.w	r3, r3, #520	; 0x208
   82b3a:	601a      	str	r2, [r3, #0]
   82b3c:	7bfb      	ldrb	r3, [r7, #15]
   82b3e:	7bfa      	ldrb	r2, [r7, #15]
   82b40:	6879      	ldr	r1, [r7, #4]
   82b42:	3210      	adds	r2, #16
   82b44:	0152      	lsls	r2, r2, #5
   82b46:	440a      	add	r2, r1
   82b48:	6812      	ldr	r2, [r2, #0]
   82b4a:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
   82b4e:	683a      	ldr	r2, [r7, #0]
   82b50:	7912      	ldrb	r2, [r2, #4]
   82b52:	0612      	lsls	r2, r2, #24
   82b54:	430a      	orrs	r2, r1
   82b56:	6879      	ldr	r1, [r7, #4]
   82b58:	3310      	adds	r3, #16
   82b5a:	015b      	lsls	r3, r3, #5
   82b5c:	440b      	add	r3, r1
   82b5e:	601a      	str	r2, [r3, #0]
   82b60:	3714      	adds	r7, #20
   82b62:	46bd      	mov	sp, r7
   82b64:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b68:	4770      	bx	lr
   82b6a:	bf00      	nop

00082b6c <can_mailbox_read>:
   82b6c:	b580      	push	{r7, lr}
   82b6e:	b086      	sub	sp, #24
   82b70:	af00      	add	r7, sp, #0
   82b72:	6078      	str	r0, [r7, #4]
   82b74:	6039      	str	r1, [r7, #0]
   82b76:	2300      	movs	r3, #0
   82b78:	617b      	str	r3, [r7, #20]
   82b7a:	683b      	ldr	r3, [r7, #0]
   82b7c:	681b      	ldr	r3, [r3, #0]
   82b7e:	74fb      	strb	r3, [r7, #19]
   82b80:	683b      	ldr	r3, [r7, #0]
   82b82:	689b      	ldr	r3, [r3, #8]
   82b84:	60fb      	str	r3, [r7, #12]
   82b86:	68fb      	ldr	r3, [r7, #12]
   82b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   82b8c:	2b00      	cmp	r3, #0
   82b8e:	d006      	beq.n	82b9e <can_mailbox_read+0x32>
   82b90:	68fb      	ldr	r3, [r7, #12]
   82b92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82b96:	2b00      	cmp	r3, #0
   82b98:	d001      	beq.n	82b9e <can_mailbox_read+0x32>
   82b9a:	2302      	movs	r3, #2
   82b9c:	617b      	str	r3, [r7, #20]
   82b9e:	7cfb      	ldrb	r3, [r7, #19]
   82ba0:	687a      	ldr	r2, [r7, #4]
   82ba2:	015b      	lsls	r3, r3, #5
   82ba4:	4413      	add	r3, r2
   82ba6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   82baa:	685b      	ldr	r3, [r3, #4]
   82bac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82bb0:	683b      	ldr	r3, [r7, #0]
   82bb2:	615a      	str	r2, [r3, #20]
   82bb4:	68fb      	ldr	r3, [r7, #12]
   82bb6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   82bba:	0c1b      	lsrs	r3, r3, #16
   82bbc:	b2da      	uxtb	r2, r3
   82bbe:	683b      	ldr	r3, [r7, #0]
   82bc0:	719a      	strb	r2, [r3, #6]
   82bc2:	7cfb      	ldrb	r3, [r7, #19]
   82bc4:	687a      	ldr	r2, [r7, #4]
   82bc6:	015b      	lsls	r3, r3, #5
   82bc8:	4413      	add	r3, r2
   82bca:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82bce:	685a      	ldr	r2, [r3, #4]
   82bd0:	683b      	ldr	r3, [r7, #0]
   82bd2:	619a      	str	r2, [r3, #24]
   82bd4:	683b      	ldr	r3, [r7, #0]
   82bd6:	799b      	ldrb	r3, [r3, #6]
   82bd8:	2b04      	cmp	r3, #4
   82bda:	d908      	bls.n	82bee <can_mailbox_read+0x82>
   82bdc:	7cfb      	ldrb	r3, [r7, #19]
   82bde:	687a      	ldr	r2, [r7, #4]
   82be0:	015b      	lsls	r3, r3, #5
   82be2:	4413      	add	r3, r2
   82be4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   82be8:	681a      	ldr	r2, [r3, #0]
   82bea:	683b      	ldr	r3, [r7, #0]
   82bec:	61da      	str	r2, [r3, #28]
   82bee:	7cfb      	ldrb	r3, [r7, #19]
   82bf0:	687a      	ldr	r2, [r7, #4]
   82bf2:	015b      	lsls	r3, r3, #5
   82bf4:	4413      	add	r3, r2
   82bf6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   82bfa:	681a      	ldr	r2, [r3, #0]
   82bfc:	683b      	ldr	r3, [r7, #0]
   82bfe:	609a      	str	r2, [r3, #8]
   82c00:	683b      	ldr	r3, [r7, #0]
   82c02:	689b      	ldr	r3, [r3, #8]
   82c04:	60fb      	str	r3, [r7, #12]
   82c06:	68fb      	ldr	r3, [r7, #12]
   82c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82c0c:	2b00      	cmp	r3, #0
   82c0e:	d003      	beq.n	82c18 <can_mailbox_read+0xac>
   82c10:	697b      	ldr	r3, [r7, #20]
   82c12:	f043 0304 	orr.w	r3, r3, #4
   82c16:	617b      	str	r3, [r7, #20]
   82c18:	6878      	ldr	r0, [r7, #4]
   82c1a:	6839      	ldr	r1, [r7, #0]
   82c1c:	4b03      	ldr	r3, [pc, #12]	; (82c2c <can_mailbox_read+0xc0>)
   82c1e:	4798      	blx	r3
   82c20:	697b      	ldr	r3, [r7, #20]
   82c22:	4618      	mov	r0, r3
   82c24:	3718      	adds	r7, #24
   82c26:	46bd      	mov	sp, r7
   82c28:	bd80      	pop	{r7, pc}
   82c2a:	bf00      	nop
   82c2c:	00082a15 	.word	0x00082a15

00082c30 <can_reset_all_mailbox>:
   82c30:	b580      	push	{r7, lr}
   82c32:	b08c      	sub	sp, #48	; 0x30
   82c34:	af00      	add	r7, sp, #0
   82c36:	6078      	str	r0, [r7, #4]
   82c38:	2300      	movs	r3, #0
   82c3a:	743b      	strb	r3, [r7, #16]
   82c3c:	2300      	movs	r3, #0
   82c3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   82c42:	e00d      	b.n	82c60 <can_reset_all_mailbox+0x30>
   82c44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82c48:	60fb      	str	r3, [r7, #12]
   82c4a:	f107 030c 	add.w	r3, r7, #12
   82c4e:	6878      	ldr	r0, [r7, #4]
   82c50:	4619      	mov	r1, r3
   82c52:	4b07      	ldr	r3, [pc, #28]	; (82c70 <can_reset_all_mailbox+0x40>)
   82c54:	4798      	blx	r3
   82c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82c5a:	3301      	adds	r3, #1
   82c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   82c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   82c64:	2b07      	cmp	r3, #7
   82c66:	d9ed      	bls.n	82c44 <can_reset_all_mailbox+0x14>
   82c68:	3730      	adds	r7, #48	; 0x30
   82c6a:	46bd      	mov	sp, r7
   82c6c:	bd80      	pop	{r7, pc}
   82c6e:	bf00      	nop
   82c70:	00082a4d 	.word	0x00082a4d

00082c74 <pio_pull_up>:
   82c74:	b480      	push	{r7}
   82c76:	b085      	sub	sp, #20
   82c78:	af00      	add	r7, sp, #0
   82c7a:	60f8      	str	r0, [r7, #12]
   82c7c:	60b9      	str	r1, [r7, #8]
   82c7e:	607a      	str	r2, [r7, #4]
   82c80:	687b      	ldr	r3, [r7, #4]
   82c82:	2b00      	cmp	r3, #0
   82c84:	d003      	beq.n	82c8e <pio_pull_up+0x1a>
   82c86:	68fb      	ldr	r3, [r7, #12]
   82c88:	68ba      	ldr	r2, [r7, #8]
   82c8a:	665a      	str	r2, [r3, #100]	; 0x64
   82c8c:	e002      	b.n	82c94 <pio_pull_up+0x20>
   82c8e:	68fb      	ldr	r3, [r7, #12]
   82c90:	68ba      	ldr	r2, [r7, #8]
   82c92:	661a      	str	r2, [r3, #96]	; 0x60
   82c94:	3714      	adds	r7, #20
   82c96:	46bd      	mov	sp, r7
   82c98:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c9c:	4770      	bx	lr
   82c9e:	bf00      	nop

00082ca0 <pio_set_peripheral>:
   82ca0:	b480      	push	{r7}
   82ca2:	b087      	sub	sp, #28
   82ca4:	af00      	add	r7, sp, #0
   82ca6:	60f8      	str	r0, [r7, #12]
   82ca8:	60b9      	str	r1, [r7, #8]
   82caa:	607a      	str	r2, [r7, #4]
   82cac:	68fb      	ldr	r3, [r7, #12]
   82cae:	687a      	ldr	r2, [r7, #4]
   82cb0:	645a      	str	r2, [r3, #68]	; 0x44
   82cb2:	68bb      	ldr	r3, [r7, #8]
   82cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82cb8:	d01f      	beq.n	82cfa <pio_set_peripheral+0x5a>
   82cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82cbe:	d805      	bhi.n	82ccc <pio_set_peripheral+0x2c>
   82cc0:	2b00      	cmp	r3, #0
   82cc2:	d027      	beq.n	82d14 <pio_set_peripheral+0x74>
   82cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82cc8:	d00a      	beq.n	82ce0 <pio_set_peripheral+0x40>
   82cca:	e01f      	b.n	82d0c <pio_set_peripheral+0x6c>
   82ccc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82cd0:	d020      	beq.n	82d14 <pio_set_peripheral+0x74>
   82cd2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82cd6:	d01d      	beq.n	82d14 <pio_set_peripheral+0x74>
   82cd8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82cdc:	d01a      	beq.n	82d14 <pio_set_peripheral+0x74>
   82cde:	e015      	b.n	82d0c <pio_set_peripheral+0x6c>
   82ce0:	68fb      	ldr	r3, [r7, #12]
   82ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82ce4:	617b      	str	r3, [r7, #20]
   82ce6:	68fb      	ldr	r3, [r7, #12]
   82ce8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82cea:	687b      	ldr	r3, [r7, #4]
   82cec:	43d9      	mvns	r1, r3
   82cee:	697b      	ldr	r3, [r7, #20]
   82cf0:	400b      	ands	r3, r1
   82cf2:	401a      	ands	r2, r3
   82cf4:	68fb      	ldr	r3, [r7, #12]
   82cf6:	671a      	str	r2, [r3, #112]	; 0x70
   82cf8:	e008      	b.n	82d0c <pio_set_peripheral+0x6c>
   82cfa:	68fb      	ldr	r3, [r7, #12]
   82cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82cfe:	617b      	str	r3, [r7, #20]
   82d00:	687a      	ldr	r2, [r7, #4]
   82d02:	697b      	ldr	r3, [r7, #20]
   82d04:	431a      	orrs	r2, r3
   82d06:	68fb      	ldr	r3, [r7, #12]
   82d08:	671a      	str	r2, [r3, #112]	; 0x70
   82d0a:	bf00      	nop
   82d0c:	68fb      	ldr	r3, [r7, #12]
   82d0e:	687a      	ldr	r2, [r7, #4]
   82d10:	605a      	str	r2, [r3, #4]
   82d12:	e000      	b.n	82d16 <pio_set_peripheral+0x76>
   82d14:	bf00      	nop
   82d16:	371c      	adds	r7, #28
   82d18:	46bd      	mov	sp, r7
   82d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d1e:	4770      	bx	lr

00082d20 <pio_set_input>:
   82d20:	b580      	push	{r7, lr}
   82d22:	b084      	sub	sp, #16
   82d24:	af00      	add	r7, sp, #0
   82d26:	60f8      	str	r0, [r7, #12]
   82d28:	60b9      	str	r1, [r7, #8]
   82d2a:	607a      	str	r2, [r7, #4]
   82d2c:	68f8      	ldr	r0, [r7, #12]
   82d2e:	68b9      	ldr	r1, [r7, #8]
   82d30:	4b18      	ldr	r3, [pc, #96]	; (82d94 <pio_set_input+0x74>)
   82d32:	4798      	blx	r3
   82d34:	687b      	ldr	r3, [r7, #4]
   82d36:	f003 0301 	and.w	r3, r3, #1
   82d3a:	68f8      	ldr	r0, [r7, #12]
   82d3c:	68b9      	ldr	r1, [r7, #8]
   82d3e:	461a      	mov	r2, r3
   82d40:	4b15      	ldr	r3, [pc, #84]	; (82d98 <pio_set_input+0x78>)
   82d42:	4798      	blx	r3
   82d44:	687b      	ldr	r3, [r7, #4]
   82d46:	f003 030a 	and.w	r3, r3, #10
   82d4a:	2b00      	cmp	r3, #0
   82d4c:	d003      	beq.n	82d56 <pio_set_input+0x36>
   82d4e:	68fb      	ldr	r3, [r7, #12]
   82d50:	68ba      	ldr	r2, [r7, #8]
   82d52:	621a      	str	r2, [r3, #32]
   82d54:	e002      	b.n	82d5c <pio_set_input+0x3c>
   82d56:	68fb      	ldr	r3, [r7, #12]
   82d58:	68ba      	ldr	r2, [r7, #8]
   82d5a:	625a      	str	r2, [r3, #36]	; 0x24
   82d5c:	687b      	ldr	r3, [r7, #4]
   82d5e:	f003 0302 	and.w	r3, r3, #2
   82d62:	2b00      	cmp	r3, #0
   82d64:	d004      	beq.n	82d70 <pio_set_input+0x50>
   82d66:	68fb      	ldr	r3, [r7, #12]
   82d68:	68ba      	ldr	r2, [r7, #8]
   82d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82d6e:	e008      	b.n	82d82 <pio_set_input+0x62>
   82d70:	687b      	ldr	r3, [r7, #4]
   82d72:	f003 0308 	and.w	r3, r3, #8
   82d76:	2b00      	cmp	r3, #0
   82d78:	d003      	beq.n	82d82 <pio_set_input+0x62>
   82d7a:	68fb      	ldr	r3, [r7, #12]
   82d7c:	68ba      	ldr	r2, [r7, #8]
   82d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82d82:	68fb      	ldr	r3, [r7, #12]
   82d84:	68ba      	ldr	r2, [r7, #8]
   82d86:	615a      	str	r2, [r3, #20]
   82d88:	68fb      	ldr	r3, [r7, #12]
   82d8a:	68ba      	ldr	r2, [r7, #8]
   82d8c:	601a      	str	r2, [r3, #0]
   82d8e:	3710      	adds	r7, #16
   82d90:	46bd      	mov	sp, r7
   82d92:	bd80      	pop	{r7, pc}
   82d94:	00082e01 	.word	0x00082e01
   82d98:	00082c75 	.word	0x00082c75

00082d9c <pio_set_output>:
   82d9c:	b580      	push	{r7, lr}
   82d9e:	b084      	sub	sp, #16
   82da0:	af00      	add	r7, sp, #0
   82da2:	60f8      	str	r0, [r7, #12]
   82da4:	60b9      	str	r1, [r7, #8]
   82da6:	607a      	str	r2, [r7, #4]
   82da8:	603b      	str	r3, [r7, #0]
   82daa:	68f8      	ldr	r0, [r7, #12]
   82dac:	68b9      	ldr	r1, [r7, #8]
   82dae:	4b12      	ldr	r3, [pc, #72]	; (82df8 <pio_set_output+0x5c>)
   82db0:	4798      	blx	r3
   82db2:	68f8      	ldr	r0, [r7, #12]
   82db4:	68b9      	ldr	r1, [r7, #8]
   82db6:	69ba      	ldr	r2, [r7, #24]
   82db8:	4b10      	ldr	r3, [pc, #64]	; (82dfc <pio_set_output+0x60>)
   82dba:	4798      	blx	r3
   82dbc:	683b      	ldr	r3, [r7, #0]
   82dbe:	2b00      	cmp	r3, #0
   82dc0:	d003      	beq.n	82dca <pio_set_output+0x2e>
   82dc2:	68fb      	ldr	r3, [r7, #12]
   82dc4:	68ba      	ldr	r2, [r7, #8]
   82dc6:	651a      	str	r2, [r3, #80]	; 0x50
   82dc8:	e002      	b.n	82dd0 <pio_set_output+0x34>
   82dca:	68fb      	ldr	r3, [r7, #12]
   82dcc:	68ba      	ldr	r2, [r7, #8]
   82dce:	655a      	str	r2, [r3, #84]	; 0x54
   82dd0:	687b      	ldr	r3, [r7, #4]
   82dd2:	2b00      	cmp	r3, #0
   82dd4:	d003      	beq.n	82dde <pio_set_output+0x42>
   82dd6:	68fb      	ldr	r3, [r7, #12]
   82dd8:	68ba      	ldr	r2, [r7, #8]
   82dda:	631a      	str	r2, [r3, #48]	; 0x30
   82ddc:	e002      	b.n	82de4 <pio_set_output+0x48>
   82dde:	68fb      	ldr	r3, [r7, #12]
   82de0:	68ba      	ldr	r2, [r7, #8]
   82de2:	635a      	str	r2, [r3, #52]	; 0x34
   82de4:	68fb      	ldr	r3, [r7, #12]
   82de6:	68ba      	ldr	r2, [r7, #8]
   82de8:	611a      	str	r2, [r3, #16]
   82dea:	68fb      	ldr	r3, [r7, #12]
   82dec:	68ba      	ldr	r2, [r7, #8]
   82dee:	601a      	str	r2, [r3, #0]
   82df0:	3710      	adds	r7, #16
   82df2:	46bd      	mov	sp, r7
   82df4:	bd80      	pop	{r7, pc}
   82df6:	bf00      	nop
   82df8:	00082e01 	.word	0x00082e01
   82dfc:	00082c75 	.word	0x00082c75

00082e00 <pio_disable_interrupt>:
   82e00:	b480      	push	{r7}
   82e02:	b083      	sub	sp, #12
   82e04:	af00      	add	r7, sp, #0
   82e06:	6078      	str	r0, [r7, #4]
   82e08:	6039      	str	r1, [r7, #0]
   82e0a:	687b      	ldr	r3, [r7, #4]
   82e0c:	683a      	ldr	r2, [r7, #0]
   82e0e:	645a      	str	r2, [r3, #68]	; 0x44
   82e10:	370c      	adds	r7, #12
   82e12:	46bd      	mov	sp, r7
   82e14:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e18:	4770      	bx	lr
   82e1a:	bf00      	nop

00082e1c <pio_get_interrupt_status>:
   82e1c:	b480      	push	{r7}
   82e1e:	b083      	sub	sp, #12
   82e20:	af00      	add	r7, sp, #0
   82e22:	6078      	str	r0, [r7, #4]
   82e24:	687b      	ldr	r3, [r7, #4]
   82e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   82e28:	4618      	mov	r0, r3
   82e2a:	370c      	adds	r7, #12
   82e2c:	46bd      	mov	sp, r7
   82e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e32:	4770      	bx	lr

00082e34 <pio_get_interrupt_mask>:
   82e34:	b480      	push	{r7}
   82e36:	b083      	sub	sp, #12
   82e38:	af00      	add	r7, sp, #0
   82e3a:	6078      	str	r0, [r7, #4]
   82e3c:	687b      	ldr	r3, [r7, #4]
   82e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82e40:	4618      	mov	r0, r3
   82e42:	370c      	adds	r7, #12
   82e44:	46bd      	mov	sp, r7
   82e46:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e4a:	4770      	bx	lr

00082e4c <pio_set_pin_high>:
   82e4c:	b480      	push	{r7}
   82e4e:	b085      	sub	sp, #20
   82e50:	af00      	add	r7, sp, #0
   82e52:	6078      	str	r0, [r7, #4]
   82e54:	687b      	ldr	r3, [r7, #4]
   82e56:	095b      	lsrs	r3, r3, #5
   82e58:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82e5c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82e60:	025b      	lsls	r3, r3, #9
   82e62:	60fb      	str	r3, [r7, #12]
   82e64:	687b      	ldr	r3, [r7, #4]
   82e66:	f003 031f 	and.w	r3, r3, #31
   82e6a:	2201      	movs	r2, #1
   82e6c:	fa02 f303 	lsl.w	r3, r2, r3
   82e70:	461a      	mov	r2, r3
   82e72:	68fb      	ldr	r3, [r7, #12]
   82e74:	631a      	str	r2, [r3, #48]	; 0x30
   82e76:	3714      	adds	r7, #20
   82e78:	46bd      	mov	sp, r7
   82e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e7e:	4770      	bx	lr

00082e80 <pio_set_pin_low>:
   82e80:	b480      	push	{r7}
   82e82:	b085      	sub	sp, #20
   82e84:	af00      	add	r7, sp, #0
   82e86:	6078      	str	r0, [r7, #4]
   82e88:	687b      	ldr	r3, [r7, #4]
   82e8a:	095b      	lsrs	r3, r3, #5
   82e8c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82e90:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82e94:	025b      	lsls	r3, r3, #9
   82e96:	60fb      	str	r3, [r7, #12]
   82e98:	687b      	ldr	r3, [r7, #4]
   82e9a:	f003 031f 	and.w	r3, r3, #31
   82e9e:	2201      	movs	r2, #1
   82ea0:	fa02 f303 	lsl.w	r3, r2, r3
   82ea4:	461a      	mov	r2, r3
   82ea6:	68fb      	ldr	r3, [r7, #12]
   82ea8:	635a      	str	r2, [r3, #52]	; 0x34
   82eaa:	3714      	adds	r7, #20
   82eac:	46bd      	mov	sp, r7
   82eae:	f85d 7b04 	ldr.w	r7, [sp], #4
   82eb2:	4770      	bx	lr

00082eb4 <pio_toggle_pin>:
   82eb4:	b480      	push	{r7}
   82eb6:	b085      	sub	sp, #20
   82eb8:	af00      	add	r7, sp, #0
   82eba:	6078      	str	r0, [r7, #4]
   82ebc:	687b      	ldr	r3, [r7, #4]
   82ebe:	095b      	lsrs	r3, r3, #5
   82ec0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82ec4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82ec8:	025b      	lsls	r3, r3, #9
   82eca:	60fb      	str	r3, [r7, #12]
   82ecc:	68fb      	ldr	r3, [r7, #12]
   82ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82ed0:	687b      	ldr	r3, [r7, #4]
   82ed2:	f003 031f 	and.w	r3, r3, #31
   82ed6:	2101      	movs	r1, #1
   82ed8:	fa01 f303 	lsl.w	r3, r1, r3
   82edc:	4013      	ands	r3, r2
   82ede:	2b00      	cmp	r3, #0
   82ee0:	d009      	beq.n	82ef6 <pio_toggle_pin+0x42>
   82ee2:	687b      	ldr	r3, [r7, #4]
   82ee4:	f003 031f 	and.w	r3, r3, #31
   82ee8:	2201      	movs	r2, #1
   82eea:	fa02 f303 	lsl.w	r3, r2, r3
   82eee:	461a      	mov	r2, r3
   82ef0:	68fb      	ldr	r3, [r7, #12]
   82ef2:	635a      	str	r2, [r3, #52]	; 0x34
   82ef4:	e008      	b.n	82f08 <pio_toggle_pin+0x54>
   82ef6:	687b      	ldr	r3, [r7, #4]
   82ef8:	f003 031f 	and.w	r3, r3, #31
   82efc:	2201      	movs	r2, #1
   82efe:	fa02 f303 	lsl.w	r3, r2, r3
   82f02:	461a      	mov	r2, r3
   82f04:	68fb      	ldr	r3, [r7, #12]
   82f06:	631a      	str	r2, [r3, #48]	; 0x30
   82f08:	3714      	adds	r7, #20
   82f0a:	46bd      	mov	sp, r7
   82f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f10:	4770      	bx	lr
   82f12:	bf00      	nop

00082f14 <pio_configure_pin>:
   82f14:	b590      	push	{r4, r7, lr}
   82f16:	b087      	sub	sp, #28
   82f18:	af02      	add	r7, sp, #8
   82f1a:	6078      	str	r0, [r7, #4]
   82f1c:	6039      	str	r1, [r7, #0]
   82f1e:	687b      	ldr	r3, [r7, #4]
   82f20:	095b      	lsrs	r3, r3, #5
   82f22:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82f26:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82f2a:	025b      	lsls	r3, r3, #9
   82f2c:	60fb      	str	r3, [r7, #12]
   82f2e:	683b      	ldr	r3, [r7, #0]
   82f30:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82f34:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82f38:	d048      	beq.n	82fcc <pio_configure_pin+0xb8>
   82f3a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82f3e:	d806      	bhi.n	82f4e <pio_configure_pin+0x3a>
   82f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82f44:	d00a      	beq.n	82f5c <pio_configure_pin+0x48>
   82f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82f4a:	d023      	beq.n	82f94 <pio_configure_pin+0x80>
   82f4c:	e070      	b.n	83030 <pio_configure_pin+0x11c>
   82f4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82f52:	d047      	beq.n	82fe4 <pio_configure_pin+0xd0>
   82f54:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82f58:	d044      	beq.n	82fe4 <pio_configure_pin+0xd0>
   82f5a:	e069      	b.n	83030 <pio_configure_pin+0x11c>
   82f5c:	687b      	ldr	r3, [r7, #4]
   82f5e:	f003 031f 	and.w	r3, r3, #31
   82f62:	2201      	movs	r2, #1
   82f64:	fa02 f303 	lsl.w	r3, r2, r3
   82f68:	68f8      	ldr	r0, [r7, #12]
   82f6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82f6e:	461a      	mov	r2, r3
   82f70:	4b33      	ldr	r3, [pc, #204]	; (83040 <pio_configure_pin+0x12c>)
   82f72:	4798      	blx	r3
   82f74:	687b      	ldr	r3, [r7, #4]
   82f76:	f003 031f 	and.w	r3, r3, #31
   82f7a:	2201      	movs	r2, #1
   82f7c:	fa02 f303 	lsl.w	r3, r2, r3
   82f80:	461a      	mov	r2, r3
   82f82:	683b      	ldr	r3, [r7, #0]
   82f84:	f003 0301 	and.w	r3, r3, #1
   82f88:	68f8      	ldr	r0, [r7, #12]
   82f8a:	4611      	mov	r1, r2
   82f8c:	461a      	mov	r2, r3
   82f8e:	4b2d      	ldr	r3, [pc, #180]	; (83044 <pio_configure_pin+0x130>)
   82f90:	4798      	blx	r3
   82f92:	e04f      	b.n	83034 <pio_configure_pin+0x120>
   82f94:	687b      	ldr	r3, [r7, #4]
   82f96:	f003 031f 	and.w	r3, r3, #31
   82f9a:	2201      	movs	r2, #1
   82f9c:	fa02 f303 	lsl.w	r3, r2, r3
   82fa0:	68f8      	ldr	r0, [r7, #12]
   82fa2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82fa6:	461a      	mov	r2, r3
   82fa8:	4b25      	ldr	r3, [pc, #148]	; (83040 <pio_configure_pin+0x12c>)
   82faa:	4798      	blx	r3
   82fac:	687b      	ldr	r3, [r7, #4]
   82fae:	f003 031f 	and.w	r3, r3, #31
   82fb2:	2201      	movs	r2, #1
   82fb4:	fa02 f303 	lsl.w	r3, r2, r3
   82fb8:	461a      	mov	r2, r3
   82fba:	683b      	ldr	r3, [r7, #0]
   82fbc:	f003 0301 	and.w	r3, r3, #1
   82fc0:	68f8      	ldr	r0, [r7, #12]
   82fc2:	4611      	mov	r1, r2
   82fc4:	461a      	mov	r2, r3
   82fc6:	4b1f      	ldr	r3, [pc, #124]	; (83044 <pio_configure_pin+0x130>)
   82fc8:	4798      	blx	r3
   82fca:	e033      	b.n	83034 <pio_configure_pin+0x120>
   82fcc:	687b      	ldr	r3, [r7, #4]
   82fce:	f003 031f 	and.w	r3, r3, #31
   82fd2:	2201      	movs	r2, #1
   82fd4:	fa02 f303 	lsl.w	r3, r2, r3
   82fd8:	68f8      	ldr	r0, [r7, #12]
   82fda:	4619      	mov	r1, r3
   82fdc:	683a      	ldr	r2, [r7, #0]
   82fde:	4b1a      	ldr	r3, [pc, #104]	; (83048 <pio_configure_pin+0x134>)
   82fe0:	4798      	blx	r3
   82fe2:	e027      	b.n	83034 <pio_configure_pin+0x120>
   82fe4:	687b      	ldr	r3, [r7, #4]
   82fe6:	f003 031f 	and.w	r3, r3, #31
   82fea:	2201      	movs	r2, #1
   82fec:	fa02 f303 	lsl.w	r3, r2, r3
   82ff0:	4619      	mov	r1, r3
   82ff2:	683b      	ldr	r3, [r7, #0]
   82ff4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   82ff8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82ffc:	bf14      	ite	ne
   82ffe:	2300      	movne	r3, #0
   83000:	2301      	moveq	r3, #1
   83002:	b2db      	uxtb	r3, r3
   83004:	461a      	mov	r2, r3
   83006:	683b      	ldr	r3, [r7, #0]
   83008:	f003 0304 	and.w	r3, r3, #4
   8300c:	2b00      	cmp	r3, #0
   8300e:	bf0c      	ite	eq
   83010:	2300      	moveq	r3, #0
   83012:	2301      	movne	r3, #1
   83014:	b2db      	uxtb	r3, r3
   83016:	6838      	ldr	r0, [r7, #0]
   83018:	f000 0001 	and.w	r0, r0, #1
   8301c:	2800      	cmp	r0, #0
   8301e:	bf0c      	ite	eq
   83020:	2000      	moveq	r0, #0
   83022:	2001      	movne	r0, #1
   83024:	b2c0      	uxtb	r0, r0
   83026:	9000      	str	r0, [sp, #0]
   83028:	68f8      	ldr	r0, [r7, #12]
   8302a:	4c08      	ldr	r4, [pc, #32]	; (8304c <pio_configure_pin+0x138>)
   8302c:	47a0      	blx	r4
   8302e:	e001      	b.n	83034 <pio_configure_pin+0x120>
   83030:	2300      	movs	r3, #0
   83032:	e000      	b.n	83036 <pio_configure_pin+0x122>
   83034:	2301      	movs	r3, #1
   83036:	4618      	mov	r0, r3
   83038:	3714      	adds	r7, #20
   8303a:	46bd      	mov	sp, r7
   8303c:	bd90      	pop	{r4, r7, pc}
   8303e:	bf00      	nop
   83040:	00082ca1 	.word	0x00082ca1
   83044:	00082c75 	.word	0x00082c75
   83048:	00082d21 	.word	0x00082d21
   8304c:	00082d9d 	.word	0x00082d9d

00083050 <pio_configure_pin_group>:
   83050:	b590      	push	{r4, r7, lr}
   83052:	b087      	sub	sp, #28
   83054:	af02      	add	r7, sp, #8
   83056:	60f8      	str	r0, [r7, #12]
   83058:	60b9      	str	r1, [r7, #8]
   8305a:	607a      	str	r2, [r7, #4]
   8305c:	687b      	ldr	r3, [r7, #4]
   8305e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83062:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83066:	d02e      	beq.n	830c6 <pio_configure_pin_group+0x76>
   83068:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8306c:	d806      	bhi.n	8307c <pio_configure_pin_group+0x2c>
   8306e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83072:	d00a      	beq.n	8308a <pio_configure_pin_group+0x3a>
   83074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83078:	d016      	beq.n	830a8 <pio_configure_pin_group+0x58>
   8307a:	e04a      	b.n	83112 <pio_configure_pin_group+0xc2>
   8307c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83080:	d027      	beq.n	830d2 <pio_configure_pin_group+0x82>
   83082:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83086:	d024      	beq.n	830d2 <pio_configure_pin_group+0x82>
   83088:	e043      	b.n	83112 <pio_configure_pin_group+0xc2>
   8308a:	68f8      	ldr	r0, [r7, #12]
   8308c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83090:	68ba      	ldr	r2, [r7, #8]
   83092:	4b23      	ldr	r3, [pc, #140]	; (83120 <pio_configure_pin_group+0xd0>)
   83094:	4798      	blx	r3
   83096:	687b      	ldr	r3, [r7, #4]
   83098:	f003 0301 	and.w	r3, r3, #1
   8309c:	68f8      	ldr	r0, [r7, #12]
   8309e:	68b9      	ldr	r1, [r7, #8]
   830a0:	461a      	mov	r2, r3
   830a2:	4b20      	ldr	r3, [pc, #128]	; (83124 <pio_configure_pin_group+0xd4>)
   830a4:	4798      	blx	r3
   830a6:	e036      	b.n	83116 <pio_configure_pin_group+0xc6>
   830a8:	68f8      	ldr	r0, [r7, #12]
   830aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   830ae:	68ba      	ldr	r2, [r7, #8]
   830b0:	4b1b      	ldr	r3, [pc, #108]	; (83120 <pio_configure_pin_group+0xd0>)
   830b2:	4798      	blx	r3
   830b4:	687b      	ldr	r3, [r7, #4]
   830b6:	f003 0301 	and.w	r3, r3, #1
   830ba:	68f8      	ldr	r0, [r7, #12]
   830bc:	68b9      	ldr	r1, [r7, #8]
   830be:	461a      	mov	r2, r3
   830c0:	4b18      	ldr	r3, [pc, #96]	; (83124 <pio_configure_pin_group+0xd4>)
   830c2:	4798      	blx	r3
   830c4:	e027      	b.n	83116 <pio_configure_pin_group+0xc6>
   830c6:	68f8      	ldr	r0, [r7, #12]
   830c8:	68b9      	ldr	r1, [r7, #8]
   830ca:	687a      	ldr	r2, [r7, #4]
   830cc:	4b16      	ldr	r3, [pc, #88]	; (83128 <pio_configure_pin_group+0xd8>)
   830ce:	4798      	blx	r3
   830d0:	e021      	b.n	83116 <pio_configure_pin_group+0xc6>
   830d2:	687b      	ldr	r3, [r7, #4]
   830d4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
   830d8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   830dc:	bf14      	ite	ne
   830de:	2300      	movne	r3, #0
   830e0:	2301      	moveq	r3, #1
   830e2:	b2db      	uxtb	r3, r3
   830e4:	461a      	mov	r2, r3
   830e6:	687b      	ldr	r3, [r7, #4]
   830e8:	f003 0304 	and.w	r3, r3, #4
   830ec:	2b00      	cmp	r3, #0
   830ee:	bf0c      	ite	eq
   830f0:	2300      	moveq	r3, #0
   830f2:	2301      	movne	r3, #1
   830f4:	b2db      	uxtb	r3, r3
   830f6:	6879      	ldr	r1, [r7, #4]
   830f8:	f001 0101 	and.w	r1, r1, #1
   830fc:	2900      	cmp	r1, #0
   830fe:	bf0c      	ite	eq
   83100:	2100      	moveq	r1, #0
   83102:	2101      	movne	r1, #1
   83104:	b2c9      	uxtb	r1, r1
   83106:	9100      	str	r1, [sp, #0]
   83108:	68f8      	ldr	r0, [r7, #12]
   8310a:	68b9      	ldr	r1, [r7, #8]
   8310c:	4c07      	ldr	r4, [pc, #28]	; (8312c <pio_configure_pin_group+0xdc>)
   8310e:	47a0      	blx	r4
   83110:	e001      	b.n	83116 <pio_configure_pin_group+0xc6>
   83112:	2300      	movs	r3, #0
   83114:	e000      	b.n	83118 <pio_configure_pin_group+0xc8>
   83116:	2301      	movs	r3, #1
   83118:	4618      	mov	r0, r3
   8311a:	3714      	adds	r7, #20
   8311c:	46bd      	mov	sp, r7
   8311e:	bd90      	pop	{r4, r7, pc}
   83120:	00082ca1 	.word	0x00082ca1
   83124:	00082c75 	.word	0x00082c75
   83128:	00082d21 	.word	0x00082d21
   8312c:	00082d9d 	.word	0x00082d9d

00083130 <pio_handler_process>:
   83130:	b580      	push	{r7, lr}
   83132:	b084      	sub	sp, #16
   83134:	af00      	add	r7, sp, #0
   83136:	6078      	str	r0, [r7, #4]
   83138:	6039      	str	r1, [r7, #0]
   8313a:	6878      	ldr	r0, [r7, #4]
   8313c:	4b22      	ldr	r3, [pc, #136]	; (831c8 <pio_handler_process+0x98>)
   8313e:	4798      	blx	r3
   83140:	60f8      	str	r0, [r7, #12]
   83142:	6878      	ldr	r0, [r7, #4]
   83144:	4b21      	ldr	r3, [pc, #132]	; (831cc <pio_handler_process+0x9c>)
   83146:	4798      	blx	r3
   83148:	4603      	mov	r3, r0
   8314a:	68fa      	ldr	r2, [r7, #12]
   8314c:	4013      	ands	r3, r2
   8314e:	60fb      	str	r3, [r7, #12]
   83150:	68fb      	ldr	r3, [r7, #12]
   83152:	2b00      	cmp	r3, #0
   83154:	d035      	beq.n	831c2 <pio_handler_process+0x92>
   83156:	2300      	movs	r3, #0
   83158:	60bb      	str	r3, [r7, #8]
   8315a:	e02f      	b.n	831bc <pio_handler_process+0x8c>
   8315c:	4a1c      	ldr	r2, [pc, #112]	; (831d0 <pio_handler_process+0xa0>)
   8315e:	68bb      	ldr	r3, [r7, #8]
   83160:	011b      	lsls	r3, r3, #4
   83162:	4413      	add	r3, r2
   83164:	681a      	ldr	r2, [r3, #0]
   83166:	683b      	ldr	r3, [r7, #0]
   83168:	429a      	cmp	r2, r3
   8316a:	d124      	bne.n	831b6 <pio_handler_process+0x86>
   8316c:	4a18      	ldr	r2, [pc, #96]	; (831d0 <pio_handler_process+0xa0>)
   8316e:	68bb      	ldr	r3, [r7, #8]
   83170:	011b      	lsls	r3, r3, #4
   83172:	4413      	add	r3, r2
   83174:	685a      	ldr	r2, [r3, #4]
   83176:	68fb      	ldr	r3, [r7, #12]
   83178:	4013      	ands	r3, r2
   8317a:	2b00      	cmp	r3, #0
   8317c:	d01b      	beq.n	831b6 <pio_handler_process+0x86>
   8317e:	4a14      	ldr	r2, [pc, #80]	; (831d0 <pio_handler_process+0xa0>)
   83180:	68bb      	ldr	r3, [r7, #8]
   83182:	011b      	lsls	r3, r3, #4
   83184:	4413      	add	r3, r2
   83186:	3308      	adds	r3, #8
   83188:	685b      	ldr	r3, [r3, #4]
   8318a:	4911      	ldr	r1, [pc, #68]	; (831d0 <pio_handler_process+0xa0>)
   8318c:	68ba      	ldr	r2, [r7, #8]
   8318e:	0112      	lsls	r2, r2, #4
   83190:	440a      	add	r2, r1
   83192:	6811      	ldr	r1, [r2, #0]
   83194:	480e      	ldr	r0, [pc, #56]	; (831d0 <pio_handler_process+0xa0>)
   83196:	68ba      	ldr	r2, [r7, #8]
   83198:	0112      	lsls	r2, r2, #4
   8319a:	4402      	add	r2, r0
   8319c:	6852      	ldr	r2, [r2, #4]
   8319e:	4608      	mov	r0, r1
   831a0:	4611      	mov	r1, r2
   831a2:	4798      	blx	r3
   831a4:	4a0a      	ldr	r2, [pc, #40]	; (831d0 <pio_handler_process+0xa0>)
   831a6:	68bb      	ldr	r3, [r7, #8]
   831a8:	011b      	lsls	r3, r3, #4
   831aa:	4413      	add	r3, r2
   831ac:	685b      	ldr	r3, [r3, #4]
   831ae:	43db      	mvns	r3, r3
   831b0:	68fa      	ldr	r2, [r7, #12]
   831b2:	4013      	ands	r3, r2
   831b4:	60fb      	str	r3, [r7, #12]
   831b6:	68bb      	ldr	r3, [r7, #8]
   831b8:	3301      	adds	r3, #1
   831ba:	60bb      	str	r3, [r7, #8]
   831bc:	68fb      	ldr	r3, [r7, #12]
   831be:	2b00      	cmp	r3, #0
   831c0:	d1cc      	bne.n	8315c <pio_handler_process+0x2c>
   831c2:	3710      	adds	r7, #16
   831c4:	46bd      	mov	sp, r7
   831c6:	bd80      	pop	{r7, pc}
   831c8:	00082e1d 	.word	0x00082e1d
   831cc:	00082e35 	.word	0x00082e35
   831d0:	20070474 	.word	0x20070474

000831d4 <PIOA_Handler>:
   831d4:	b580      	push	{r7, lr}
   831d6:	af00      	add	r7, sp, #0
   831d8:	4802      	ldr	r0, [pc, #8]	; (831e4 <PIOA_Handler+0x10>)
   831da:	210b      	movs	r1, #11
   831dc:	4b02      	ldr	r3, [pc, #8]	; (831e8 <PIOA_Handler+0x14>)
   831de:	4798      	blx	r3
   831e0:	bd80      	pop	{r7, pc}
   831e2:	bf00      	nop
   831e4:	400e0e00 	.word	0x400e0e00
   831e8:	00083131 	.word	0x00083131

000831ec <PIOB_Handler>:
   831ec:	b580      	push	{r7, lr}
   831ee:	af00      	add	r7, sp, #0
   831f0:	4802      	ldr	r0, [pc, #8]	; (831fc <PIOB_Handler+0x10>)
   831f2:	210c      	movs	r1, #12
   831f4:	4b02      	ldr	r3, [pc, #8]	; (83200 <PIOB_Handler+0x14>)
   831f6:	4798      	blx	r3
   831f8:	bd80      	pop	{r7, pc}
   831fa:	bf00      	nop
   831fc:	400e1000 	.word	0x400e1000
   83200:	00083131 	.word	0x00083131

00083204 <PIOC_Handler>:
   83204:	b580      	push	{r7, lr}
   83206:	af00      	add	r7, sp, #0
   83208:	4802      	ldr	r0, [pc, #8]	; (83214 <PIOC_Handler+0x10>)
   8320a:	210d      	movs	r1, #13
   8320c:	4b02      	ldr	r3, [pc, #8]	; (83218 <PIOC_Handler+0x14>)
   8320e:	4798      	blx	r3
   83210:	bd80      	pop	{r7, pc}
   83212:	bf00      	nop
   83214:	400e1200 	.word	0x400e1200
   83218:	00083131 	.word	0x00083131

0008321c <PIOD_Handler>:
   8321c:	b580      	push	{r7, lr}
   8321e:	af00      	add	r7, sp, #0
   83220:	4802      	ldr	r0, [pc, #8]	; (8322c <PIOD_Handler+0x10>)
   83222:	210e      	movs	r1, #14
   83224:	4b02      	ldr	r3, [pc, #8]	; (83230 <PIOD_Handler+0x14>)
   83226:	4798      	blx	r3
   83228:	bd80      	pop	{r7, pc}
   8322a:	bf00      	nop
   8322c:	400e1400 	.word	0x400e1400
   83230:	00083131 	.word	0x00083131

00083234 <pmc_switch_mck_to_pllack>:
   83234:	b480      	push	{r7}
   83236:	b085      	sub	sp, #20
   83238:	af00      	add	r7, sp, #0
   8323a:	6078      	str	r0, [r7, #4]
   8323c:	4b1d      	ldr	r3, [pc, #116]	; (832b4 <pmc_switch_mck_to_pllack+0x80>)
   8323e:	4a1d      	ldr	r2, [pc, #116]	; (832b4 <pmc_switch_mck_to_pllack+0x80>)
   83240:	6b12      	ldr	r2, [r2, #48]	; 0x30
   83242:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   83246:	687a      	ldr	r2, [r7, #4]
   83248:	430a      	orrs	r2, r1
   8324a:	631a      	str	r2, [r3, #48]	; 0x30
   8324c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83250:	60fb      	str	r3, [r7, #12]
   83252:	e007      	b.n	83264 <pmc_switch_mck_to_pllack+0x30>
   83254:	68fb      	ldr	r3, [r7, #12]
   83256:	2b00      	cmp	r3, #0
   83258:	d101      	bne.n	8325e <pmc_switch_mck_to_pllack+0x2a>
   8325a:	2301      	movs	r3, #1
   8325c:	e023      	b.n	832a6 <pmc_switch_mck_to_pllack+0x72>
   8325e:	68fb      	ldr	r3, [r7, #12]
   83260:	3b01      	subs	r3, #1
   83262:	60fb      	str	r3, [r7, #12]
   83264:	4b13      	ldr	r3, [pc, #76]	; (832b4 <pmc_switch_mck_to_pllack+0x80>)
   83266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83268:	f003 0308 	and.w	r3, r3, #8
   8326c:	2b00      	cmp	r3, #0
   8326e:	d0f1      	beq.n	83254 <pmc_switch_mck_to_pllack+0x20>
   83270:	4b10      	ldr	r3, [pc, #64]	; (832b4 <pmc_switch_mck_to_pllack+0x80>)
   83272:	4a10      	ldr	r2, [pc, #64]	; (832b4 <pmc_switch_mck_to_pllack+0x80>)
   83274:	6b12      	ldr	r2, [r2, #48]	; 0x30
   83276:	f022 0203 	bic.w	r2, r2, #3
   8327a:	f042 0202 	orr.w	r2, r2, #2
   8327e:	631a      	str	r2, [r3, #48]	; 0x30
   83280:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83284:	60fb      	str	r3, [r7, #12]
   83286:	e007      	b.n	83298 <pmc_switch_mck_to_pllack+0x64>
   83288:	68fb      	ldr	r3, [r7, #12]
   8328a:	2b00      	cmp	r3, #0
   8328c:	d101      	bne.n	83292 <pmc_switch_mck_to_pllack+0x5e>
   8328e:	2301      	movs	r3, #1
   83290:	e009      	b.n	832a6 <pmc_switch_mck_to_pllack+0x72>
   83292:	68fb      	ldr	r3, [r7, #12]
   83294:	3b01      	subs	r3, #1
   83296:	60fb      	str	r3, [r7, #12]
   83298:	4b06      	ldr	r3, [pc, #24]	; (832b4 <pmc_switch_mck_to_pllack+0x80>)
   8329a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8329c:	f003 0308 	and.w	r3, r3, #8
   832a0:	2b00      	cmp	r3, #0
   832a2:	d0f1      	beq.n	83288 <pmc_switch_mck_to_pllack+0x54>
   832a4:	2300      	movs	r3, #0
   832a6:	4618      	mov	r0, r3
   832a8:	3714      	adds	r7, #20
   832aa:	46bd      	mov	sp, r7
   832ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   832b0:	4770      	bx	lr
   832b2:	bf00      	nop
   832b4:	400e0600 	.word	0x400e0600

000832b8 <pmc_switch_sclk_to_32kxtal>:
   832b8:	b480      	push	{r7}
   832ba:	b083      	sub	sp, #12
   832bc:	af00      	add	r7, sp, #0
   832be:	6078      	str	r0, [r7, #4]
   832c0:	687b      	ldr	r3, [r7, #4]
   832c2:	2b01      	cmp	r3, #1
   832c4:	d107      	bne.n	832d6 <pmc_switch_sclk_to_32kxtal+0x1e>
   832c6:	4a0a      	ldr	r2, [pc, #40]	; (832f0 <pmc_switch_sclk_to_32kxtal+0x38>)
   832c8:	4b09      	ldr	r3, [pc, #36]	; (832f0 <pmc_switch_sclk_to_32kxtal+0x38>)
   832ca:	689b      	ldr	r3, [r3, #8]
   832cc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   832d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   832d4:	6093      	str	r3, [r2, #8]
   832d6:	4a06      	ldr	r2, [pc, #24]	; (832f0 <pmc_switch_sclk_to_32kxtal+0x38>)
   832d8:	4b05      	ldr	r3, [pc, #20]	; (832f0 <pmc_switch_sclk_to_32kxtal+0x38>)
   832da:	681b      	ldr	r3, [r3, #0]
   832dc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   832e0:	f043 0308 	orr.w	r3, r3, #8
   832e4:	6013      	str	r3, [r2, #0]
   832e6:	370c      	adds	r7, #12
   832e8:	46bd      	mov	sp, r7
   832ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   832ee:	4770      	bx	lr
   832f0:	400e1a10 	.word	0x400e1a10

000832f4 <pmc_osc_is_ready_32kxtal>:
   832f4:	b480      	push	{r7}
   832f6:	af00      	add	r7, sp, #0
   832f8:	4b09      	ldr	r3, [pc, #36]	; (83320 <pmc_osc_is_ready_32kxtal+0x2c>)
   832fa:	695b      	ldr	r3, [r3, #20]
   832fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83300:	2b00      	cmp	r3, #0
   83302:	d007      	beq.n	83314 <pmc_osc_is_ready_32kxtal+0x20>
   83304:	4b07      	ldr	r3, [pc, #28]	; (83324 <pmc_osc_is_ready_32kxtal+0x30>)
   83306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83308:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8330c:	2b00      	cmp	r3, #0
   8330e:	d001      	beq.n	83314 <pmc_osc_is_ready_32kxtal+0x20>
   83310:	2301      	movs	r3, #1
   83312:	e000      	b.n	83316 <pmc_osc_is_ready_32kxtal+0x22>
   83314:	2300      	movs	r3, #0
   83316:	4618      	mov	r0, r3
   83318:	46bd      	mov	sp, r7
   8331a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8331e:	4770      	bx	lr
   83320:	400e1a10 	.word	0x400e1a10
   83324:	400e0600 	.word	0x400e0600

00083328 <pmc_switch_mainck_to_fastrc>:
   83328:	b480      	push	{r7}
   8332a:	b085      	sub	sp, #20
   8332c:	af00      	add	r7, sp, #0
   8332e:	6078      	str	r0, [r7, #4]
   83330:	2300      	movs	r3, #0
   83332:	60fb      	str	r3, [r7, #12]
   83334:	4b21      	ldr	r3, [pc, #132]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83336:	6a1b      	ldr	r3, [r3, #32]
   83338:	f003 0301 	and.w	r3, r3, #1
   8333c:	2b00      	cmp	r3, #0
   8333e:	d00e      	beq.n	8335e <pmc_switch_mainck_to_fastrc+0x36>
   83340:	4a1e      	ldr	r2, [pc, #120]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83342:	4b1e      	ldr	r3, [pc, #120]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83344:	6a1b      	ldr	r3, [r3, #32]
   83346:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8334a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8334e:	6879      	ldr	r1, [r7, #4]
   83350:	430b      	orrs	r3, r1
   83352:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83356:	f043 0308 	orr.w	r3, r3, #8
   8335a:	6213      	str	r3, [r2, #32]
   8335c:	e00b      	b.n	83376 <pmc_switch_mainck_to_fastrc+0x4e>
   8335e:	2301      	movs	r3, #1
   83360:	60fb      	str	r3, [r7, #12]
   83362:	4a16      	ldr	r2, [pc, #88]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83364:	4b15      	ldr	r3, [pc, #84]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83366:	6a19      	ldr	r1, [r3, #32]
   83368:	4b15      	ldr	r3, [pc, #84]	; (833c0 <pmc_switch_mainck_to_fastrc+0x98>)
   8336a:	400b      	ands	r3, r1
   8336c:	6879      	ldr	r1, [r7, #4]
   8336e:	4319      	orrs	r1, r3
   83370:	4b14      	ldr	r3, [pc, #80]	; (833c4 <pmc_switch_mainck_to_fastrc+0x9c>)
   83372:	430b      	orrs	r3, r1
   83374:	6213      	str	r3, [r2, #32]
   83376:	bf00      	nop
   83378:	4b10      	ldr	r3, [pc, #64]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   8337a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83380:	2b00      	cmp	r3, #0
   83382:	d0f9      	beq.n	83378 <pmc_switch_mainck_to_fastrc+0x50>
   83384:	4a0d      	ldr	r2, [pc, #52]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83386:	4b0d      	ldr	r3, [pc, #52]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   83388:	6a1b      	ldr	r3, [r3, #32]
   8338a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8338e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83392:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83396:	6213      	str	r3, [r2, #32]
   83398:	68fb      	ldr	r3, [r7, #12]
   8339a:	2b00      	cmp	r3, #0
   8339c:	d009      	beq.n	833b2 <pmc_switch_mainck_to_fastrc+0x8a>
   8339e:	4a07      	ldr	r2, [pc, #28]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   833a0:	4b06      	ldr	r3, [pc, #24]	; (833bc <pmc_switch_mainck_to_fastrc+0x94>)
   833a2:	6a1b      	ldr	r3, [r3, #32]
   833a4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   833a8:	f023 0301 	bic.w	r3, r3, #1
   833ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   833b0:	6213      	str	r3, [r2, #32]
   833b2:	3714      	adds	r7, #20
   833b4:	46bd      	mov	sp, r7
   833b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   833ba:	4770      	bx	lr
   833bc:	400e0600 	.word	0x400e0600
   833c0:	ffc8c086 	.word	0xffc8c086
   833c4:	00373f09 	.word	0x00373f09

000833c8 <pmc_switch_mainck_to_xtal>:
   833c8:	b480      	push	{r7}
   833ca:	b083      	sub	sp, #12
   833cc:	af00      	add	r7, sp, #0
   833ce:	6078      	str	r0, [r7, #4]
   833d0:	687b      	ldr	r3, [r7, #4]
   833d2:	2b00      	cmp	r3, #0
   833d4:	d008      	beq.n	833e8 <pmc_switch_mainck_to_xtal+0x20>
   833d6:	4912      	ldr	r1, [pc, #72]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   833d8:	4b11      	ldr	r3, [pc, #68]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   833da:	6a1b      	ldr	r3, [r3, #32]
   833dc:	4a11      	ldr	r2, [pc, #68]	; (83424 <pmc_switch_mainck_to_xtal+0x5c>)
   833de:	401a      	ands	r2, r3
   833e0:	4b11      	ldr	r3, [pc, #68]	; (83428 <pmc_switch_mainck_to_xtal+0x60>)
   833e2:	4313      	orrs	r3, r2
   833e4:	620b      	str	r3, [r1, #32]
   833e6:	e016      	b.n	83416 <pmc_switch_mainck_to_xtal+0x4e>
   833e8:	490d      	ldr	r1, [pc, #52]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   833ea:	4b0d      	ldr	r3, [pc, #52]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   833ec:	6a1b      	ldr	r3, [r3, #32]
   833ee:	4a0f      	ldr	r2, [pc, #60]	; (8342c <pmc_switch_mainck_to_xtal+0x64>)
   833f0:	401a      	ands	r2, r3
   833f2:	4b0f      	ldr	r3, [pc, #60]	; (83430 <pmc_switch_mainck_to_xtal+0x68>)
   833f4:	4313      	orrs	r3, r2
   833f6:	620b      	str	r3, [r1, #32]
   833f8:	bf00      	nop
   833fa:	4b09      	ldr	r3, [pc, #36]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   833fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   833fe:	f003 0301 	and.w	r3, r3, #1
   83402:	2b00      	cmp	r3, #0
   83404:	d0f9      	beq.n	833fa <pmc_switch_mainck_to_xtal+0x32>
   83406:	4a06      	ldr	r2, [pc, #24]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   83408:	4b05      	ldr	r3, [pc, #20]	; (83420 <pmc_switch_mainck_to_xtal+0x58>)
   8340a:	6a1b      	ldr	r3, [r3, #32]
   8340c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83414:	6213      	str	r3, [r2, #32]
   83416:	370c      	adds	r7, #12
   83418:	46bd      	mov	sp, r7
   8341a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8341e:	4770      	bx	lr
   83420:	400e0600 	.word	0x400e0600
   83424:	fec8fffc 	.word	0xfec8fffc
   83428:	01370002 	.word	0x01370002
   8342c:	ffc8c0fc 	.word	0xffc8c0fc
   83430:	00373f01 	.word	0x00373f01

00083434 <pmc_osc_is_ready_mainck>:
   83434:	b480      	push	{r7}
   83436:	af00      	add	r7, sp, #0
   83438:	4b04      	ldr	r3, [pc, #16]	; (8344c <pmc_osc_is_ready_mainck+0x18>)
   8343a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   83440:	4618      	mov	r0, r3
   83442:	46bd      	mov	sp, r7
   83444:	f85d 7b04 	ldr.w	r7, [sp], #4
   83448:	4770      	bx	lr
   8344a:	bf00      	nop
   8344c:	400e0600 	.word	0x400e0600

00083450 <pmc_disable_pllack>:
   83450:	b480      	push	{r7}
   83452:	af00      	add	r7, sp, #0
   83454:	4b03      	ldr	r3, [pc, #12]	; (83464 <pmc_disable_pllack+0x14>)
   83456:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8345a:	629a      	str	r2, [r3, #40]	; 0x28
   8345c:	46bd      	mov	sp, r7
   8345e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83462:	4770      	bx	lr
   83464:	400e0600 	.word	0x400e0600

00083468 <pmc_is_locked_pllack>:
   83468:	b480      	push	{r7}
   8346a:	af00      	add	r7, sp, #0
   8346c:	4b04      	ldr	r3, [pc, #16]	; (83480 <pmc_is_locked_pllack+0x18>)
   8346e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83470:	f003 0302 	and.w	r3, r3, #2
   83474:	4618      	mov	r0, r3
   83476:	46bd      	mov	sp, r7
   83478:	f85d 7b04 	ldr.w	r7, [sp], #4
   8347c:	4770      	bx	lr
   8347e:	bf00      	nop
   83480:	400e0600 	.word	0x400e0600

00083484 <pmc_is_locked_upll>:
   83484:	b480      	push	{r7}
   83486:	af00      	add	r7, sp, #0
   83488:	4b04      	ldr	r3, [pc, #16]	; (8349c <pmc_is_locked_upll+0x18>)
   8348a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
   83490:	4618      	mov	r0, r3
   83492:	46bd      	mov	sp, r7
   83494:	f85d 7b04 	ldr.w	r7, [sp], #4
   83498:	4770      	bx	lr
   8349a:	bf00      	nop
   8349c:	400e0600 	.word	0x400e0600

000834a0 <pmc_enable_periph_clk>:
   834a0:	b480      	push	{r7}
   834a2:	b083      	sub	sp, #12
   834a4:	af00      	add	r7, sp, #0
   834a6:	6078      	str	r0, [r7, #4]
   834a8:	687b      	ldr	r3, [r7, #4]
   834aa:	2b2c      	cmp	r3, #44	; 0x2c
   834ac:	d901      	bls.n	834b2 <pmc_enable_periph_clk+0x12>
   834ae:	2301      	movs	r3, #1
   834b0:	e02f      	b.n	83512 <pmc_enable_periph_clk+0x72>
   834b2:	687b      	ldr	r3, [r7, #4]
   834b4:	2b1f      	cmp	r3, #31
   834b6:	d813      	bhi.n	834e0 <pmc_enable_periph_clk+0x40>
   834b8:	4b19      	ldr	r3, [pc, #100]	; (83520 <pmc_enable_periph_clk+0x80>)
   834ba:	699a      	ldr	r2, [r3, #24]
   834bc:	687b      	ldr	r3, [r7, #4]
   834be:	2101      	movs	r1, #1
   834c0:	fa01 f303 	lsl.w	r3, r1, r3
   834c4:	401a      	ands	r2, r3
   834c6:	687b      	ldr	r3, [r7, #4]
   834c8:	2101      	movs	r1, #1
   834ca:	fa01 f303 	lsl.w	r3, r1, r3
   834ce:	429a      	cmp	r2, r3
   834d0:	d01e      	beq.n	83510 <pmc_enable_periph_clk+0x70>
   834d2:	4b13      	ldr	r3, [pc, #76]	; (83520 <pmc_enable_periph_clk+0x80>)
   834d4:	687a      	ldr	r2, [r7, #4]
   834d6:	2101      	movs	r1, #1
   834d8:	fa01 f202 	lsl.w	r2, r1, r2
   834dc:	611a      	str	r2, [r3, #16]
   834de:	e017      	b.n	83510 <pmc_enable_periph_clk+0x70>
   834e0:	687b      	ldr	r3, [r7, #4]
   834e2:	3b20      	subs	r3, #32
   834e4:	607b      	str	r3, [r7, #4]
   834e6:	4b0e      	ldr	r3, [pc, #56]	; (83520 <pmc_enable_periph_clk+0x80>)
   834e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   834ec:	687b      	ldr	r3, [r7, #4]
   834ee:	2101      	movs	r1, #1
   834f0:	fa01 f303 	lsl.w	r3, r1, r3
   834f4:	401a      	ands	r2, r3
   834f6:	687b      	ldr	r3, [r7, #4]
   834f8:	2101      	movs	r1, #1
   834fa:	fa01 f303 	lsl.w	r3, r1, r3
   834fe:	429a      	cmp	r2, r3
   83500:	d006      	beq.n	83510 <pmc_enable_periph_clk+0x70>
   83502:	4b07      	ldr	r3, [pc, #28]	; (83520 <pmc_enable_periph_clk+0x80>)
   83504:	687a      	ldr	r2, [r7, #4]
   83506:	2101      	movs	r1, #1
   83508:	fa01 f202 	lsl.w	r2, r1, r2
   8350c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   83510:	2300      	movs	r3, #0
   83512:	4618      	mov	r0, r3
   83514:	370c      	adds	r7, #12
   83516:	46bd      	mov	sp, r7
   83518:	f85d 7b04 	ldr.w	r7, [sp], #4
   8351c:	4770      	bx	lr
   8351e:	bf00      	nop
   83520:	400e0600 	.word	0x400e0600

00083524 <usart_set_async_baudrate>:
   83524:	b480      	push	{r7}
   83526:	b089      	sub	sp, #36	; 0x24
   83528:	af00      	add	r7, sp, #0
   8352a:	60f8      	str	r0, [r7, #12]
   8352c:	60b9      	str	r1, [r7, #8]
   8352e:	607a      	str	r2, [r7, #4]
   83530:	68bb      	ldr	r3, [r7, #8]
   83532:	011a      	lsls	r2, r3, #4
   83534:	687b      	ldr	r3, [r7, #4]
   83536:	429a      	cmp	r2, r3
   83538:	d802      	bhi.n	83540 <usart_set_async_baudrate+0x1c>
   8353a:	2310      	movs	r3, #16
   8353c:	61fb      	str	r3, [r7, #28]
   8353e:	e001      	b.n	83544 <usart_set_async_baudrate+0x20>
   83540:	2308      	movs	r3, #8
   83542:	61fb      	str	r3, [r7, #28]
   83544:	687b      	ldr	r3, [r7, #4]
   83546:	00da      	lsls	r2, r3, #3
   83548:	69fb      	ldr	r3, [r7, #28]
   8354a:	68b9      	ldr	r1, [r7, #8]
   8354c:	fb01 f303 	mul.w	r3, r1, r3
   83550:	085b      	lsrs	r3, r3, #1
   83552:	441a      	add	r2, r3
   83554:	69fb      	ldr	r3, [r7, #28]
   83556:	68b9      	ldr	r1, [r7, #8]
   83558:	fb01 f303 	mul.w	r3, r1, r3
   8355c:	fbb2 f3f3 	udiv	r3, r2, r3
   83560:	61bb      	str	r3, [r7, #24]
   83562:	69bb      	ldr	r3, [r7, #24]
   83564:	08db      	lsrs	r3, r3, #3
   83566:	617b      	str	r3, [r7, #20]
   83568:	69bb      	ldr	r3, [r7, #24]
   8356a:	f003 0307 	and.w	r3, r3, #7
   8356e:	613b      	str	r3, [r7, #16]
   83570:	697b      	ldr	r3, [r7, #20]
   83572:	2b00      	cmp	r3, #0
   83574:	d003      	beq.n	8357e <usart_set_async_baudrate+0x5a>
   83576:	697b      	ldr	r3, [r7, #20]
   83578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8357c:	d301      	bcc.n	83582 <usart_set_async_baudrate+0x5e>
   8357e:	2301      	movs	r3, #1
   83580:	e00f      	b.n	835a2 <usart_set_async_baudrate+0x7e>
   83582:	69fb      	ldr	r3, [r7, #28]
   83584:	2b08      	cmp	r3, #8
   83586:	d105      	bne.n	83594 <usart_set_async_baudrate+0x70>
   83588:	68fb      	ldr	r3, [r7, #12]
   8358a:	685b      	ldr	r3, [r3, #4]
   8358c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   83590:	68fb      	ldr	r3, [r7, #12]
   83592:	605a      	str	r2, [r3, #4]
   83594:	693b      	ldr	r3, [r7, #16]
   83596:	041a      	lsls	r2, r3, #16
   83598:	697b      	ldr	r3, [r7, #20]
   8359a:	431a      	orrs	r2, r3
   8359c:	68fb      	ldr	r3, [r7, #12]
   8359e:	621a      	str	r2, [r3, #32]
   835a0:	2300      	movs	r3, #0
   835a2:	4618      	mov	r0, r3
   835a4:	3724      	adds	r7, #36	; 0x24
   835a6:	46bd      	mov	sp, r7
   835a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   835ac:	4770      	bx	lr
   835ae:	bf00      	nop

000835b0 <usart_reset>:
   835b0:	b580      	push	{r7, lr}
   835b2:	b082      	sub	sp, #8
   835b4:	af00      	add	r7, sp, #0
   835b6:	6078      	str	r0, [r7, #4]
   835b8:	6878      	ldr	r0, [r7, #4]
   835ba:	4b0d      	ldr	r3, [pc, #52]	; (835f0 <usart_reset+0x40>)
   835bc:	4798      	blx	r3
   835be:	687b      	ldr	r3, [r7, #4]
   835c0:	2200      	movs	r2, #0
   835c2:	605a      	str	r2, [r3, #4]
   835c4:	687b      	ldr	r3, [r7, #4]
   835c6:	2200      	movs	r2, #0
   835c8:	625a      	str	r2, [r3, #36]	; 0x24
   835ca:	687b      	ldr	r3, [r7, #4]
   835cc:	2200      	movs	r2, #0
   835ce:	629a      	str	r2, [r3, #40]	; 0x28
   835d0:	6878      	ldr	r0, [r7, #4]
   835d2:	4b08      	ldr	r3, [pc, #32]	; (835f4 <usart_reset+0x44>)
   835d4:	4798      	blx	r3
   835d6:	6878      	ldr	r0, [r7, #4]
   835d8:	4b07      	ldr	r3, [pc, #28]	; (835f8 <usart_reset+0x48>)
   835da:	4798      	blx	r3
   835dc:	6878      	ldr	r0, [r7, #4]
   835de:	4b07      	ldr	r3, [pc, #28]	; (835fc <usart_reset+0x4c>)
   835e0:	4798      	blx	r3
   835e2:	6878      	ldr	r0, [r7, #4]
   835e4:	4b06      	ldr	r3, [pc, #24]	; (83600 <usart_reset+0x50>)
   835e6:	4798      	blx	r3
   835e8:	3708      	adds	r7, #8
   835ea:	46bd      	mov	sp, r7
   835ec:	bd80      	pop	{r7, pc}
   835ee:	bf00      	nop
   835f0:	000837ed 	.word	0x000837ed
   835f4:	000836a1 	.word	0x000836a1
   835f8:	000836d1 	.word	0x000836d1
   835fc:	00083739 	.word	0x00083739
   83600:	00083755 	.word	0x00083755

00083604 <usart_init_rs232>:
   83604:	b580      	push	{r7, lr}
   83606:	b084      	sub	sp, #16
   83608:	af00      	add	r7, sp, #0
   8360a:	60f8      	str	r0, [r7, #12]
   8360c:	60b9      	str	r1, [r7, #8]
   8360e:	607a      	str	r2, [r7, #4]
   83610:	68f8      	ldr	r0, [r7, #12]
   83612:	4b1a      	ldr	r3, [pc, #104]	; (8367c <usart_init_rs232+0x78>)
   83614:	4798      	blx	r3
   83616:	4b1a      	ldr	r3, [pc, #104]	; (83680 <usart_init_rs232+0x7c>)
   83618:	2200      	movs	r2, #0
   8361a:	601a      	str	r2, [r3, #0]
   8361c:	68bb      	ldr	r3, [r7, #8]
   8361e:	2b00      	cmp	r3, #0
   83620:	d009      	beq.n	83636 <usart_init_rs232+0x32>
   83622:	68bb      	ldr	r3, [r7, #8]
   83624:	681b      	ldr	r3, [r3, #0]
   83626:	68f8      	ldr	r0, [r7, #12]
   83628:	4619      	mov	r1, r3
   8362a:	687a      	ldr	r2, [r7, #4]
   8362c:	4b15      	ldr	r3, [pc, #84]	; (83684 <usart_init_rs232+0x80>)
   8362e:	4798      	blx	r3
   83630:	4603      	mov	r3, r0
   83632:	2b00      	cmp	r3, #0
   83634:	d001      	beq.n	8363a <usart_init_rs232+0x36>
   83636:	2301      	movs	r3, #1
   83638:	e01b      	b.n	83672 <usart_init_rs232+0x6e>
   8363a:	68bb      	ldr	r3, [r7, #8]
   8363c:	685a      	ldr	r2, [r3, #4]
   8363e:	68bb      	ldr	r3, [r7, #8]
   83640:	689b      	ldr	r3, [r3, #8]
   83642:	431a      	orrs	r2, r3
   83644:	68bb      	ldr	r3, [r7, #8]
   83646:	691b      	ldr	r3, [r3, #16]
   83648:	431a      	orrs	r2, r3
   8364a:	68bb      	ldr	r3, [r7, #8]
   8364c:	68db      	ldr	r3, [r3, #12]
   8364e:	431a      	orrs	r2, r3
   83650:	4b0b      	ldr	r3, [pc, #44]	; (83680 <usart_init_rs232+0x7c>)
   83652:	681b      	ldr	r3, [r3, #0]
   83654:	431a      	orrs	r2, r3
   83656:	4b0a      	ldr	r3, [pc, #40]	; (83680 <usart_init_rs232+0x7c>)
   83658:	601a      	str	r2, [r3, #0]
   8365a:	4b09      	ldr	r3, [pc, #36]	; (83680 <usart_init_rs232+0x7c>)
   8365c:	681a      	ldr	r2, [r3, #0]
   8365e:	4b08      	ldr	r3, [pc, #32]	; (83680 <usart_init_rs232+0x7c>)
   83660:	601a      	str	r2, [r3, #0]
   83662:	68fb      	ldr	r3, [r7, #12]
   83664:	685a      	ldr	r2, [r3, #4]
   83666:	4b06      	ldr	r3, [pc, #24]	; (83680 <usart_init_rs232+0x7c>)
   83668:	681b      	ldr	r3, [r3, #0]
   8366a:	431a      	orrs	r2, r3
   8366c:	68fb      	ldr	r3, [r7, #12]
   8366e:	605a      	str	r2, [r3, #4]
   83670:	2300      	movs	r3, #0
   83672:	4618      	mov	r0, r3
   83674:	3710      	adds	r7, #16
   83676:	46bd      	mov	sp, r7
   83678:	bd80      	pop	{r7, pc}
   8367a:	bf00      	nop
   8367c:	000835b1 	.word	0x000835b1
   83680:	200704e4 	.word	0x200704e4
   83684:	00083525 	.word	0x00083525

00083688 <usart_enable_tx>:
   83688:	b480      	push	{r7}
   8368a:	b083      	sub	sp, #12
   8368c:	af00      	add	r7, sp, #0
   8368e:	6078      	str	r0, [r7, #4]
   83690:	687b      	ldr	r3, [r7, #4]
   83692:	2240      	movs	r2, #64	; 0x40
   83694:	601a      	str	r2, [r3, #0]
   83696:	370c      	adds	r7, #12
   83698:	46bd      	mov	sp, r7
   8369a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8369e:	4770      	bx	lr

000836a0 <usart_reset_tx>:
   836a0:	b480      	push	{r7}
   836a2:	b083      	sub	sp, #12
   836a4:	af00      	add	r7, sp, #0
   836a6:	6078      	str	r0, [r7, #4]
   836a8:	687b      	ldr	r3, [r7, #4]
   836aa:	2288      	movs	r2, #136	; 0x88
   836ac:	601a      	str	r2, [r3, #0]
   836ae:	370c      	adds	r7, #12
   836b0:	46bd      	mov	sp, r7
   836b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   836b6:	4770      	bx	lr

000836b8 <usart_enable_rx>:
   836b8:	b480      	push	{r7}
   836ba:	b083      	sub	sp, #12
   836bc:	af00      	add	r7, sp, #0
   836be:	6078      	str	r0, [r7, #4]
   836c0:	687b      	ldr	r3, [r7, #4]
   836c2:	2210      	movs	r2, #16
   836c4:	601a      	str	r2, [r3, #0]
   836c6:	370c      	adds	r7, #12
   836c8:	46bd      	mov	sp, r7
   836ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   836ce:	4770      	bx	lr

000836d0 <usart_reset_rx>:
   836d0:	b480      	push	{r7}
   836d2:	b083      	sub	sp, #12
   836d4:	af00      	add	r7, sp, #0
   836d6:	6078      	str	r0, [r7, #4]
   836d8:	687b      	ldr	r3, [r7, #4]
   836da:	2224      	movs	r2, #36	; 0x24
   836dc:	601a      	str	r2, [r3, #0]
   836de:	370c      	adds	r7, #12
   836e0:	46bd      	mov	sp, r7
   836e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   836e6:	4770      	bx	lr

000836e8 <usart_enable_interrupt>:
   836e8:	b480      	push	{r7}
   836ea:	b083      	sub	sp, #12
   836ec:	af00      	add	r7, sp, #0
   836ee:	6078      	str	r0, [r7, #4]
   836f0:	6039      	str	r1, [r7, #0]
   836f2:	687b      	ldr	r3, [r7, #4]
   836f4:	683a      	ldr	r2, [r7, #0]
   836f6:	609a      	str	r2, [r3, #8]
   836f8:	370c      	adds	r7, #12
   836fa:	46bd      	mov	sp, r7
   836fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   83700:	4770      	bx	lr
   83702:	bf00      	nop

00083704 <usart_disable_interrupt>:
   83704:	b480      	push	{r7}
   83706:	b083      	sub	sp, #12
   83708:	af00      	add	r7, sp, #0
   8370a:	6078      	str	r0, [r7, #4]
   8370c:	6039      	str	r1, [r7, #0]
   8370e:	687b      	ldr	r3, [r7, #4]
   83710:	683a      	ldr	r2, [r7, #0]
   83712:	60da      	str	r2, [r3, #12]
   83714:	370c      	adds	r7, #12
   83716:	46bd      	mov	sp, r7
   83718:	f85d 7b04 	ldr.w	r7, [sp], #4
   8371c:	4770      	bx	lr
   8371e:	bf00      	nop

00083720 <usart_get_status>:
   83720:	b480      	push	{r7}
   83722:	b083      	sub	sp, #12
   83724:	af00      	add	r7, sp, #0
   83726:	6078      	str	r0, [r7, #4]
   83728:	687b      	ldr	r3, [r7, #4]
   8372a:	695b      	ldr	r3, [r3, #20]
   8372c:	4618      	mov	r0, r3
   8372e:	370c      	adds	r7, #12
   83730:	46bd      	mov	sp, r7
   83732:	f85d 7b04 	ldr.w	r7, [sp], #4
   83736:	4770      	bx	lr

00083738 <usart_reset_status>:
   83738:	b480      	push	{r7}
   8373a:	b083      	sub	sp, #12
   8373c:	af00      	add	r7, sp, #0
   8373e:	6078      	str	r0, [r7, #4]
   83740:	687b      	ldr	r3, [r7, #4]
   83742:	f44f 7280 	mov.w	r2, #256	; 0x100
   83746:	601a      	str	r2, [r3, #0]
   83748:	370c      	adds	r7, #12
   8374a:	46bd      	mov	sp, r7
   8374c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83750:	4770      	bx	lr
   83752:	bf00      	nop

00083754 <usart_drive_RTS_pin_high>:
   83754:	b480      	push	{r7}
   83756:	b083      	sub	sp, #12
   83758:	af00      	add	r7, sp, #0
   8375a:	6078      	str	r0, [r7, #4]
   8375c:	687b      	ldr	r3, [r7, #4]
   8375e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   83762:	601a      	str	r2, [r3, #0]
   83764:	370c      	adds	r7, #12
   83766:	46bd      	mov	sp, r7
   83768:	f85d 7b04 	ldr.w	r7, [sp], #4
   8376c:	4770      	bx	lr
   8376e:	bf00      	nop

00083770 <usart_write>:
   83770:	b480      	push	{r7}
   83772:	b083      	sub	sp, #12
   83774:	af00      	add	r7, sp, #0
   83776:	6078      	str	r0, [r7, #4]
   83778:	6039      	str	r1, [r7, #0]
   8377a:	687b      	ldr	r3, [r7, #4]
   8377c:	695b      	ldr	r3, [r3, #20]
   8377e:	f003 0302 	and.w	r3, r3, #2
   83782:	2b00      	cmp	r3, #0
   83784:	d101      	bne.n	8378a <usart_write+0x1a>
   83786:	2301      	movs	r3, #1
   83788:	e005      	b.n	83796 <usart_write+0x26>
   8378a:	683b      	ldr	r3, [r7, #0]
   8378c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   83790:	687b      	ldr	r3, [r7, #4]
   83792:	61da      	str	r2, [r3, #28]
   83794:	2300      	movs	r3, #0
   83796:	4618      	mov	r0, r3
   83798:	370c      	adds	r7, #12
   8379a:	46bd      	mov	sp, r7
   8379c:	f85d 7b04 	ldr.w	r7, [sp], #4
   837a0:	4770      	bx	lr
   837a2:	bf00      	nop

000837a4 <usart_getchar>:
   837a4:	b480      	push	{r7}
   837a6:	b085      	sub	sp, #20
   837a8:	af00      	add	r7, sp, #0
   837aa:	6078      	str	r0, [r7, #4]
   837ac:	6039      	str	r1, [r7, #0]
   837ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   837b2:	60fb      	str	r3, [r7, #12]
   837b4:	e006      	b.n	837c4 <usart_getchar+0x20>
   837b6:	68fb      	ldr	r3, [r7, #12]
   837b8:	1e5a      	subs	r2, r3, #1
   837ba:	60fa      	str	r2, [r7, #12]
   837bc:	2b00      	cmp	r3, #0
   837be:	d101      	bne.n	837c4 <usart_getchar+0x20>
   837c0:	2301      	movs	r3, #1
   837c2:	e00c      	b.n	837de <usart_getchar+0x3a>
   837c4:	687b      	ldr	r3, [r7, #4]
   837c6:	695b      	ldr	r3, [r3, #20]
   837c8:	f003 0301 	and.w	r3, r3, #1
   837cc:	2b00      	cmp	r3, #0
   837ce:	d0f2      	beq.n	837b6 <usart_getchar+0x12>
   837d0:	687b      	ldr	r3, [r7, #4]
   837d2:	699b      	ldr	r3, [r3, #24]
   837d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   837d8:	683b      	ldr	r3, [r7, #0]
   837da:	601a      	str	r2, [r3, #0]
   837dc:	2300      	movs	r3, #0
   837de:	4618      	mov	r0, r3
   837e0:	3714      	adds	r7, #20
   837e2:	46bd      	mov	sp, r7
   837e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   837e8:	4770      	bx	lr
   837ea:	bf00      	nop

000837ec <usart_disable_writeprotect>:
   837ec:	b480      	push	{r7}
   837ee:	b083      	sub	sp, #12
   837f0:	af00      	add	r7, sp, #0
   837f2:	6078      	str	r0, [r7, #4]
   837f4:	687b      	ldr	r3, [r7, #4]
   837f6:	4a04      	ldr	r2, [pc, #16]	; (83808 <usart_disable_writeprotect+0x1c>)
   837f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   837fc:	370c      	adds	r7, #12
   837fe:	46bd      	mov	sp, r7
   83800:	f85d 7b04 	ldr.w	r7, [sp], #4
   83804:	4770      	bx	lr
   83806:	bf00      	nop
   83808:	55534100 	.word	0x55534100

0008380c <wdt_restart>:
   8380c:	b480      	push	{r7}
   8380e:	b083      	sub	sp, #12
   83810:	af00      	add	r7, sp, #0
   83812:	6078      	str	r0, [r7, #4]
   83814:	687a      	ldr	r2, [r7, #4]
   83816:	4b05      	ldr	r3, [pc, #20]	; (8382c <wdt_restart+0x20>)
   83818:	429a      	cmp	r2, r3
   8381a:	d102      	bne.n	83822 <wdt_restart+0x16>
   8381c:	687b      	ldr	r3, [r7, #4]
   8381e:	4a04      	ldr	r2, [pc, #16]	; (83830 <wdt_restart+0x24>)
   83820:	601a      	str	r2, [r3, #0]
   83822:	370c      	adds	r7, #12
   83824:	46bd      	mov	sp, r7
   83826:	f85d 7b04 	ldr.w	r7, [sp], #4
   8382a:	4770      	bx	lr
   8382c:	400e1a50 	.word	0x400e1a50
   83830:	a5000001 	.word	0xa5000001

00083834 <wdt_get_status>:
   83834:	b480      	push	{r7}
   83836:	b083      	sub	sp, #12
   83838:	af00      	add	r7, sp, #0
   8383a:	6078      	str	r0, [r7, #4]
   8383c:	687b      	ldr	r3, [r7, #4]
   8383e:	689b      	ldr	r3, [r3, #8]
   83840:	4618      	mov	r0, r3
   83842:	370c      	adds	r7, #12
   83844:	46bd      	mov	sp, r7
   83846:	f85d 7b04 	ldr.w	r7, [sp], #4
   8384a:	4770      	bx	lr

0008384c <Dummy_Handler>:
   8384c:	b480      	push	{r7}
   8384e:	af00      	add	r7, sp, #0
   83850:	e7fe      	b.n	83850 <Dummy_Handler+0x4>
   83852:	bf00      	nop

00083854 <Reset_Handler>:
   83854:	b580      	push	{r7, lr}
   83856:	b082      	sub	sp, #8
   83858:	af00      	add	r7, sp, #0
   8385a:	4b1e      	ldr	r3, [pc, #120]	; (838d4 <Reset_Handler+0x80>)
   8385c:	607b      	str	r3, [r7, #4]
   8385e:	4b1e      	ldr	r3, [pc, #120]	; (838d8 <Reset_Handler+0x84>)
   83860:	603b      	str	r3, [r7, #0]
   83862:	687a      	ldr	r2, [r7, #4]
   83864:	683b      	ldr	r3, [r7, #0]
   83866:	429a      	cmp	r2, r3
   83868:	d00c      	beq.n	83884 <Reset_Handler+0x30>
   8386a:	e007      	b.n	8387c <Reset_Handler+0x28>
   8386c:	683b      	ldr	r3, [r7, #0]
   8386e:	1d1a      	adds	r2, r3, #4
   83870:	603a      	str	r2, [r7, #0]
   83872:	687a      	ldr	r2, [r7, #4]
   83874:	1d11      	adds	r1, r2, #4
   83876:	6079      	str	r1, [r7, #4]
   83878:	6812      	ldr	r2, [r2, #0]
   8387a:	601a      	str	r2, [r3, #0]
   8387c:	683a      	ldr	r2, [r7, #0]
   8387e:	4b17      	ldr	r3, [pc, #92]	; (838dc <Reset_Handler+0x88>)
   83880:	429a      	cmp	r2, r3
   83882:	d3f3      	bcc.n	8386c <Reset_Handler+0x18>
   83884:	4b16      	ldr	r3, [pc, #88]	; (838e0 <Reset_Handler+0x8c>)
   83886:	603b      	str	r3, [r7, #0]
   83888:	e004      	b.n	83894 <Reset_Handler+0x40>
   8388a:	683b      	ldr	r3, [r7, #0]
   8388c:	1d1a      	adds	r2, r3, #4
   8388e:	603a      	str	r2, [r7, #0]
   83890:	2200      	movs	r2, #0
   83892:	601a      	str	r2, [r3, #0]
   83894:	683a      	ldr	r2, [r7, #0]
   83896:	4b13      	ldr	r3, [pc, #76]	; (838e4 <Reset_Handler+0x90>)
   83898:	429a      	cmp	r2, r3
   8389a:	d3f6      	bcc.n	8388a <Reset_Handler+0x36>
   8389c:	4b12      	ldr	r3, [pc, #72]	; (838e8 <Reset_Handler+0x94>)
   8389e:	607b      	str	r3, [r7, #4]
   838a0:	4a12      	ldr	r2, [pc, #72]	; (838ec <Reset_Handler+0x98>)
   838a2:	687b      	ldr	r3, [r7, #4]
   838a4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   838a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   838ac:	6093      	str	r3, [r2, #8]
   838ae:	687b      	ldr	r3, [r7, #4]
   838b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   838b4:	d309      	bcc.n	838ca <Reset_Handler+0x76>
   838b6:	687a      	ldr	r2, [r7, #4]
   838b8:	4b0d      	ldr	r3, [pc, #52]	; (838f0 <Reset_Handler+0x9c>)
   838ba:	429a      	cmp	r2, r3
   838bc:	d805      	bhi.n	838ca <Reset_Handler+0x76>
   838be:	4b0b      	ldr	r3, [pc, #44]	; (838ec <Reset_Handler+0x98>)
   838c0:	4a0a      	ldr	r2, [pc, #40]	; (838ec <Reset_Handler+0x98>)
   838c2:	6892      	ldr	r2, [r2, #8]
   838c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   838c8:	609a      	str	r2, [r3, #8]
   838ca:	4b0a      	ldr	r3, [pc, #40]	; (838f4 <Reset_Handler+0xa0>)
   838cc:	4798      	blx	r3
   838ce:	4b0a      	ldr	r3, [pc, #40]	; (838f8 <Reset_Handler+0xa4>)
   838d0:	4798      	blx	r3
   838d2:	e7fe      	b.n	838d2 <Reset_Handler+0x7e>
   838d4:	000877a0 	.word	0x000877a0
   838d8:	20070000 	.word	0x20070000
   838dc:	20070438 	.word	0x20070438
   838e0:	20070438 	.word	0x20070438
   838e4:	2007cb34 	.word	0x2007cb34
   838e8:	00080000 	.word	0x00080000
   838ec:	e000ed00 	.word	0xe000ed00
   838f0:	200fffff 	.word	0x200fffff
   838f4:	000872c9 	.word	0x000872c9
   838f8:	00086b49 	.word	0x00086b49

000838fc <SystemCoreClockUpdate>:
   838fc:	b480      	push	{r7}
   838fe:	af00      	add	r7, sp, #0
   83900:	4b56      	ldr	r3, [pc, #344]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83904:	f003 0303 	and.w	r3, r3, #3
   83908:	2b03      	cmp	r3, #3
   8390a:	f200 808a 	bhi.w	83a22 <SystemCoreClockUpdate+0x126>
   8390e:	a101      	add	r1, pc, #4	; (adr r1, 83914 <SystemCoreClockUpdate+0x18>)
   83910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   83914:	00083925 	.word	0x00083925
   83918:	00083945 	.word	0x00083945
   8391c:	00083995 	.word	0x00083995
   83920:	00083995 	.word	0x00083995
   83924:	4b4e      	ldr	r3, [pc, #312]	; (83a60 <SystemCoreClockUpdate+0x164>)
   83926:	695b      	ldr	r3, [r3, #20]
   83928:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8392c:	2b00      	cmp	r3, #0
   8392e:	d004      	beq.n	8393a <SystemCoreClockUpdate+0x3e>
   83930:	4b4c      	ldr	r3, [pc, #304]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83936:	601a      	str	r2, [r3, #0]
   83938:	e073      	b.n	83a22 <SystemCoreClockUpdate+0x126>
   8393a:	4b4a      	ldr	r3, [pc, #296]	; (83a64 <SystemCoreClockUpdate+0x168>)
   8393c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83940:	601a      	str	r2, [r3, #0]
   83942:	e06e      	b.n	83a22 <SystemCoreClockUpdate+0x126>
   83944:	4b45      	ldr	r3, [pc, #276]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83946:	6a1b      	ldr	r3, [r3, #32]
   83948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8394c:	2b00      	cmp	r3, #0
   8394e:	d003      	beq.n	83958 <SystemCoreClockUpdate+0x5c>
   83950:	4b44      	ldr	r3, [pc, #272]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83952:	4a45      	ldr	r2, [pc, #276]	; (83a68 <SystemCoreClockUpdate+0x16c>)
   83954:	601a      	str	r2, [r3, #0]
   83956:	e01c      	b.n	83992 <SystemCoreClockUpdate+0x96>
   83958:	4b42      	ldr	r3, [pc, #264]	; (83a64 <SystemCoreClockUpdate+0x168>)
   8395a:	4a44      	ldr	r2, [pc, #272]	; (83a6c <SystemCoreClockUpdate+0x170>)
   8395c:	601a      	str	r2, [r3, #0]
   8395e:	4b3f      	ldr	r3, [pc, #252]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83960:	6a1b      	ldr	r3, [r3, #32]
   83962:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83966:	2b10      	cmp	r3, #16
   83968:	d004      	beq.n	83974 <SystemCoreClockUpdate+0x78>
   8396a:	2b20      	cmp	r3, #32
   8396c:	d008      	beq.n	83980 <SystemCoreClockUpdate+0x84>
   8396e:	2b00      	cmp	r3, #0
   83970:	d00e      	beq.n	83990 <SystemCoreClockUpdate+0x94>
   83972:	e00e      	b.n	83992 <SystemCoreClockUpdate+0x96>
   83974:	4b3b      	ldr	r3, [pc, #236]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83976:	681b      	ldr	r3, [r3, #0]
   83978:	005a      	lsls	r2, r3, #1
   8397a:	4b3a      	ldr	r3, [pc, #232]	; (83a64 <SystemCoreClockUpdate+0x168>)
   8397c:	601a      	str	r2, [r3, #0]
   8397e:	e008      	b.n	83992 <SystemCoreClockUpdate+0x96>
   83980:	4b38      	ldr	r3, [pc, #224]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83982:	681a      	ldr	r2, [r3, #0]
   83984:	4613      	mov	r3, r2
   83986:	005b      	lsls	r3, r3, #1
   83988:	441a      	add	r2, r3
   8398a:	4b36      	ldr	r3, [pc, #216]	; (83a64 <SystemCoreClockUpdate+0x168>)
   8398c:	601a      	str	r2, [r3, #0]
   8398e:	e000      	b.n	83992 <SystemCoreClockUpdate+0x96>
   83990:	bf00      	nop
   83992:	e046      	b.n	83a22 <SystemCoreClockUpdate+0x126>
   83994:	4b31      	ldr	r3, [pc, #196]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83996:	6a1b      	ldr	r3, [r3, #32]
   83998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8399c:	2b00      	cmp	r3, #0
   8399e:	d003      	beq.n	839a8 <SystemCoreClockUpdate+0xac>
   839a0:	4b30      	ldr	r3, [pc, #192]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839a2:	4a31      	ldr	r2, [pc, #196]	; (83a68 <SystemCoreClockUpdate+0x16c>)
   839a4:	601a      	str	r2, [r3, #0]
   839a6:	e01c      	b.n	839e2 <SystemCoreClockUpdate+0xe6>
   839a8:	4b2e      	ldr	r3, [pc, #184]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839aa:	4a30      	ldr	r2, [pc, #192]	; (83a6c <SystemCoreClockUpdate+0x170>)
   839ac:	601a      	str	r2, [r3, #0]
   839ae:	4b2b      	ldr	r3, [pc, #172]	; (83a5c <SystemCoreClockUpdate+0x160>)
   839b0:	6a1b      	ldr	r3, [r3, #32]
   839b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   839b6:	2b10      	cmp	r3, #16
   839b8:	d004      	beq.n	839c4 <SystemCoreClockUpdate+0xc8>
   839ba:	2b20      	cmp	r3, #32
   839bc:	d008      	beq.n	839d0 <SystemCoreClockUpdate+0xd4>
   839be:	2b00      	cmp	r3, #0
   839c0:	d00e      	beq.n	839e0 <SystemCoreClockUpdate+0xe4>
   839c2:	e00e      	b.n	839e2 <SystemCoreClockUpdate+0xe6>
   839c4:	4b27      	ldr	r3, [pc, #156]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839c6:	681b      	ldr	r3, [r3, #0]
   839c8:	005a      	lsls	r2, r3, #1
   839ca:	4b26      	ldr	r3, [pc, #152]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839cc:	601a      	str	r2, [r3, #0]
   839ce:	e008      	b.n	839e2 <SystemCoreClockUpdate+0xe6>
   839d0:	4b24      	ldr	r3, [pc, #144]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839d2:	681a      	ldr	r2, [r3, #0]
   839d4:	4613      	mov	r3, r2
   839d6:	005b      	lsls	r3, r3, #1
   839d8:	441a      	add	r2, r3
   839da:	4b22      	ldr	r3, [pc, #136]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839dc:	601a      	str	r2, [r3, #0]
   839de:	e000      	b.n	839e2 <SystemCoreClockUpdate+0xe6>
   839e0:	bf00      	nop
   839e2:	4b1e      	ldr	r3, [pc, #120]	; (83a5c <SystemCoreClockUpdate+0x160>)
   839e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   839e6:	f003 0303 	and.w	r3, r3, #3
   839ea:	2b02      	cmp	r3, #2
   839ec:	d115      	bne.n	83a1a <SystemCoreClockUpdate+0x11e>
   839ee:	4b1b      	ldr	r3, [pc, #108]	; (83a5c <SystemCoreClockUpdate+0x160>)
   839f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   839f2:	4b1f      	ldr	r3, [pc, #124]	; (83a70 <SystemCoreClockUpdate+0x174>)
   839f4:	4013      	ands	r3, r2
   839f6:	0c1b      	lsrs	r3, r3, #16
   839f8:	3301      	adds	r3, #1
   839fa:	4a1a      	ldr	r2, [pc, #104]	; (83a64 <SystemCoreClockUpdate+0x168>)
   839fc:	6812      	ldr	r2, [r2, #0]
   839fe:	fb02 f203 	mul.w	r2, r2, r3
   83a02:	4b18      	ldr	r3, [pc, #96]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a04:	601a      	str	r2, [r3, #0]
   83a06:	4b17      	ldr	r3, [pc, #92]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a08:	681a      	ldr	r2, [r3, #0]
   83a0a:	4b14      	ldr	r3, [pc, #80]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83a0e:	b2db      	uxtb	r3, r3
   83a10:	fbb2 f2f3 	udiv	r2, r2, r3
   83a14:	4b13      	ldr	r3, [pc, #76]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a16:	601a      	str	r2, [r3, #0]
   83a18:	e002      	b.n	83a20 <SystemCoreClockUpdate+0x124>
   83a1a:	4b12      	ldr	r3, [pc, #72]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a1c:	4a15      	ldr	r2, [pc, #84]	; (83a74 <SystemCoreClockUpdate+0x178>)
   83a1e:	601a      	str	r2, [r3, #0]
   83a20:	bf00      	nop
   83a22:	4b0e      	ldr	r3, [pc, #56]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83a2a:	2b70      	cmp	r3, #112	; 0x70
   83a2c:	d108      	bne.n	83a40 <SystemCoreClockUpdate+0x144>
   83a2e:	4b0d      	ldr	r3, [pc, #52]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a30:	681a      	ldr	r2, [r3, #0]
   83a32:	4b11      	ldr	r3, [pc, #68]	; (83a78 <SystemCoreClockUpdate+0x17c>)
   83a34:	fba3 1302 	umull	r1, r3, r3, r2
   83a38:	085a      	lsrs	r2, r3, #1
   83a3a:	4b0a      	ldr	r3, [pc, #40]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a3c:	601a      	str	r2, [r3, #0]
   83a3e:	e009      	b.n	83a54 <SystemCoreClockUpdate+0x158>
   83a40:	4b08      	ldr	r3, [pc, #32]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a42:	681a      	ldr	r2, [r3, #0]
   83a44:	4b05      	ldr	r3, [pc, #20]	; (83a5c <SystemCoreClockUpdate+0x160>)
   83a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83a48:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83a4c:	091b      	lsrs	r3, r3, #4
   83a4e:	40da      	lsrs	r2, r3
   83a50:	4b04      	ldr	r3, [pc, #16]	; (83a64 <SystemCoreClockUpdate+0x168>)
   83a52:	601a      	str	r2, [r3, #0]
   83a54:	46bd      	mov	sp, r7
   83a56:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a5a:	4770      	bx	lr
   83a5c:	400e0600 	.word	0x400e0600
   83a60:	400e1a10 	.word	0x400e1a10
   83a64:	20070000 	.word	0x20070000
   83a68:	00b71b00 	.word	0x00b71b00
   83a6c:	003d0900 	.word	0x003d0900
   83a70:	07ff0000 	.word	0x07ff0000
   83a74:	0e4e1c00 	.word	0x0e4e1c00
   83a78:	aaaaaaab 	.word	0xaaaaaaab

00083a7c <system_init_flash>:
   83a7c:	b480      	push	{r7}
   83a7e:	b083      	sub	sp, #12
   83a80:	af00      	add	r7, sp, #0
   83a82:	6078      	str	r0, [r7, #4]
   83a84:	687a      	ldr	r2, [r7, #4]
   83a86:	4b1f      	ldr	r3, [pc, #124]	; (83b04 <system_init_flash+0x88>)
   83a88:	429a      	cmp	r2, r3
   83a8a:	d806      	bhi.n	83a9a <system_init_flash+0x1e>
   83a8c:	4b1e      	ldr	r3, [pc, #120]	; (83b08 <system_init_flash+0x8c>)
   83a8e:	2200      	movs	r2, #0
   83a90:	601a      	str	r2, [r3, #0]
   83a92:	4b1e      	ldr	r3, [pc, #120]	; (83b0c <system_init_flash+0x90>)
   83a94:	2200      	movs	r2, #0
   83a96:	601a      	str	r2, [r3, #0]
   83a98:	e02e      	b.n	83af8 <system_init_flash+0x7c>
   83a9a:	687a      	ldr	r2, [r7, #4]
   83a9c:	4b1c      	ldr	r3, [pc, #112]	; (83b10 <system_init_flash+0x94>)
   83a9e:	429a      	cmp	r2, r3
   83aa0:	d808      	bhi.n	83ab4 <system_init_flash+0x38>
   83aa2:	4b19      	ldr	r3, [pc, #100]	; (83b08 <system_init_flash+0x8c>)
   83aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
   83aa8:	601a      	str	r2, [r3, #0]
   83aaa:	4b18      	ldr	r3, [pc, #96]	; (83b0c <system_init_flash+0x90>)
   83aac:	f44f 7280 	mov.w	r2, #256	; 0x100
   83ab0:	601a      	str	r2, [r3, #0]
   83ab2:	e021      	b.n	83af8 <system_init_flash+0x7c>
   83ab4:	687a      	ldr	r2, [r7, #4]
   83ab6:	4b17      	ldr	r3, [pc, #92]	; (83b14 <system_init_flash+0x98>)
   83ab8:	429a      	cmp	r2, r3
   83aba:	d808      	bhi.n	83ace <system_init_flash+0x52>
   83abc:	4b12      	ldr	r3, [pc, #72]	; (83b08 <system_init_flash+0x8c>)
   83abe:	f44f 7200 	mov.w	r2, #512	; 0x200
   83ac2:	601a      	str	r2, [r3, #0]
   83ac4:	4b11      	ldr	r3, [pc, #68]	; (83b0c <system_init_flash+0x90>)
   83ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
   83aca:	601a      	str	r2, [r3, #0]
   83acc:	e014      	b.n	83af8 <system_init_flash+0x7c>
   83ace:	687a      	ldr	r2, [r7, #4]
   83ad0:	4b11      	ldr	r3, [pc, #68]	; (83b18 <system_init_flash+0x9c>)
   83ad2:	429a      	cmp	r2, r3
   83ad4:	d808      	bhi.n	83ae8 <system_init_flash+0x6c>
   83ad6:	4b0c      	ldr	r3, [pc, #48]	; (83b08 <system_init_flash+0x8c>)
   83ad8:	f44f 7240 	mov.w	r2, #768	; 0x300
   83adc:	601a      	str	r2, [r3, #0]
   83ade:	4b0b      	ldr	r3, [pc, #44]	; (83b0c <system_init_flash+0x90>)
   83ae0:	f44f 7240 	mov.w	r2, #768	; 0x300
   83ae4:	601a      	str	r2, [r3, #0]
   83ae6:	e007      	b.n	83af8 <system_init_flash+0x7c>
   83ae8:	4b07      	ldr	r3, [pc, #28]	; (83b08 <system_init_flash+0x8c>)
   83aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83aee:	601a      	str	r2, [r3, #0]
   83af0:	4b06      	ldr	r3, [pc, #24]	; (83b0c <system_init_flash+0x90>)
   83af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83af6:	601a      	str	r2, [r3, #0]
   83af8:	370c      	adds	r7, #12
   83afa:	46bd      	mov	sp, r7
   83afc:	f85d 7b04 	ldr.w	r7, [sp], #4
   83b00:	4770      	bx	lr
   83b02:	bf00      	nop
   83b04:	0157529f 	.word	0x0157529f
   83b08:	400e0a00 	.word	0x400e0a00
   83b0c:	400e0c00 	.word	0x400e0c00
   83b10:	0206cc7f 	.word	0x0206cc7f
   83b14:	0328b73f 	.word	0x0328b73f
   83b18:	04a62f7f 	.word	0x04a62f7f

00083b1c <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   83b1c:	b480      	push	{r7}
   83b1e:	b083      	sub	sp, #12
   83b20:	af00      	add	r7, sp, #0
   83b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83b24:	687b      	ldr	r3, [r7, #4]
   83b26:	f103 0208 	add.w	r2, r3, #8
   83b2a:	687b      	ldr	r3, [r7, #4]
   83b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   83b2e:	687b      	ldr	r3, [r7, #4]
   83b30:	f04f 32ff 	mov.w	r2, #4294967295
   83b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83b36:	687b      	ldr	r3, [r7, #4]
   83b38:	f103 0208 	add.w	r2, r3, #8
   83b3c:	687b      	ldr	r3, [r7, #4]
   83b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83b40:	687b      	ldr	r3, [r7, #4]
   83b42:	f103 0208 	add.w	r2, r3, #8
   83b46:	687b      	ldr	r3, [r7, #4]
   83b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   83b4a:	687b      	ldr	r3, [r7, #4]
   83b4c:	2200      	movs	r2, #0
   83b4e:	601a      	str	r2, [r3, #0]
}
   83b50:	370c      	adds	r7, #12
   83b52:	46bd      	mov	sp, r7
   83b54:	f85d 7b04 	ldr.w	r7, [sp], #4
   83b58:	4770      	bx	lr
   83b5a:	bf00      	nop

00083b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   83b5c:	b480      	push	{r7}
   83b5e:	b083      	sub	sp, #12
   83b60:	af00      	add	r7, sp, #0
   83b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   83b64:	687b      	ldr	r3, [r7, #4]
   83b66:	2200      	movs	r2, #0
   83b68:	611a      	str	r2, [r3, #16]
}
   83b6a:	370c      	adds	r7, #12
   83b6c:	46bd      	mov	sp, r7
   83b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83b72:	4770      	bx	lr

00083b74 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   83b74:	b480      	push	{r7}
   83b76:	b085      	sub	sp, #20
   83b78:	af00      	add	r7, sp, #0
   83b7a:	6078      	str	r0, [r7, #4]
   83b7c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   83b7e:	687b      	ldr	r3, [r7, #4]
   83b80:	685b      	ldr	r3, [r3, #4]
   83b82:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   83b84:	683b      	ldr	r3, [r7, #0]
   83b86:	68fa      	ldr	r2, [r7, #12]
   83b88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   83b8a:	68fb      	ldr	r3, [r7, #12]
   83b8c:	689a      	ldr	r2, [r3, #8]
   83b8e:	683b      	ldr	r3, [r7, #0]
   83b90:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   83b92:	68fb      	ldr	r3, [r7, #12]
   83b94:	689b      	ldr	r3, [r3, #8]
   83b96:	683a      	ldr	r2, [r7, #0]
   83b98:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   83b9a:	68fb      	ldr	r3, [r7, #12]
   83b9c:	683a      	ldr	r2, [r7, #0]
   83b9e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   83ba0:	683b      	ldr	r3, [r7, #0]
   83ba2:	687a      	ldr	r2, [r7, #4]
   83ba4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   83ba6:	687b      	ldr	r3, [r7, #4]
   83ba8:	681b      	ldr	r3, [r3, #0]
   83baa:	1c5a      	adds	r2, r3, #1
   83bac:	687b      	ldr	r3, [r7, #4]
   83bae:	601a      	str	r2, [r3, #0]
}
   83bb0:	3714      	adds	r7, #20
   83bb2:	46bd      	mov	sp, r7
   83bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   83bb8:	4770      	bx	lr
   83bba:	bf00      	nop

00083bbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   83bbc:	b480      	push	{r7}
   83bbe:	b085      	sub	sp, #20
   83bc0:	af00      	add	r7, sp, #0
   83bc2:	6078      	str	r0, [r7, #4]
   83bc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   83bc6:	683b      	ldr	r3, [r7, #0]
   83bc8:	681b      	ldr	r3, [r3, #0]
   83bca:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   83bcc:	68bb      	ldr	r3, [r7, #8]
   83bce:	f1b3 3fff 	cmp.w	r3, #4294967295
   83bd2:	d103      	bne.n	83bdc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   83bd4:	687b      	ldr	r3, [r7, #4]
   83bd6:	691b      	ldr	r3, [r3, #16]
   83bd8:	60fb      	str	r3, [r7, #12]
   83bda:	e00c      	b.n	83bf6 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   83bdc:	687b      	ldr	r3, [r7, #4]
   83bde:	3308      	adds	r3, #8
   83be0:	60fb      	str	r3, [r7, #12]
   83be2:	e002      	b.n	83bea <vListInsert+0x2e>
   83be4:	68fb      	ldr	r3, [r7, #12]
   83be6:	685b      	ldr	r3, [r3, #4]
   83be8:	60fb      	str	r3, [r7, #12]
   83bea:	68fb      	ldr	r3, [r7, #12]
   83bec:	685b      	ldr	r3, [r3, #4]
   83bee:	681a      	ldr	r2, [r3, #0]
   83bf0:	68bb      	ldr	r3, [r7, #8]
   83bf2:	429a      	cmp	r2, r3
   83bf4:	d9f6      	bls.n	83be4 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   83bf6:	68fb      	ldr	r3, [r7, #12]
   83bf8:	685a      	ldr	r2, [r3, #4]
   83bfa:	683b      	ldr	r3, [r7, #0]
   83bfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   83bfe:	683b      	ldr	r3, [r7, #0]
   83c00:	685b      	ldr	r3, [r3, #4]
   83c02:	683a      	ldr	r2, [r7, #0]
   83c04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   83c06:	683b      	ldr	r3, [r7, #0]
   83c08:	68fa      	ldr	r2, [r7, #12]
   83c0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   83c0c:	68fb      	ldr	r3, [r7, #12]
   83c0e:	683a      	ldr	r2, [r7, #0]
   83c10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   83c12:	683b      	ldr	r3, [r7, #0]
   83c14:	687a      	ldr	r2, [r7, #4]
   83c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   83c18:	687b      	ldr	r3, [r7, #4]
   83c1a:	681b      	ldr	r3, [r3, #0]
   83c1c:	1c5a      	adds	r2, r3, #1
   83c1e:	687b      	ldr	r3, [r7, #4]
   83c20:	601a      	str	r2, [r3, #0]
}
   83c22:	3714      	adds	r7, #20
   83c24:	46bd      	mov	sp, r7
   83c26:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c2a:	4770      	bx	lr

00083c2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   83c2c:	b480      	push	{r7}
   83c2e:	b085      	sub	sp, #20
   83c30:	af00      	add	r7, sp, #0
   83c32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   83c34:	687b      	ldr	r3, [r7, #4]
   83c36:	691b      	ldr	r3, [r3, #16]
   83c38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   83c3a:	687b      	ldr	r3, [r7, #4]
   83c3c:	685b      	ldr	r3, [r3, #4]
   83c3e:	687a      	ldr	r2, [r7, #4]
   83c40:	6892      	ldr	r2, [r2, #8]
   83c42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   83c44:	687b      	ldr	r3, [r7, #4]
   83c46:	689b      	ldr	r3, [r3, #8]
   83c48:	687a      	ldr	r2, [r7, #4]
   83c4a:	6852      	ldr	r2, [r2, #4]
   83c4c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   83c4e:	68fb      	ldr	r3, [r7, #12]
   83c50:	685a      	ldr	r2, [r3, #4]
   83c52:	687b      	ldr	r3, [r7, #4]
   83c54:	429a      	cmp	r2, r3
   83c56:	d103      	bne.n	83c60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   83c58:	687b      	ldr	r3, [r7, #4]
   83c5a:	689a      	ldr	r2, [r3, #8]
   83c5c:	68fb      	ldr	r3, [r7, #12]
   83c5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   83c60:	687b      	ldr	r3, [r7, #4]
   83c62:	2200      	movs	r2, #0
   83c64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   83c66:	68fb      	ldr	r3, [r7, #12]
   83c68:	681b      	ldr	r3, [r3, #0]
   83c6a:	1e5a      	subs	r2, r3, #1
   83c6c:	68fb      	ldr	r3, [r7, #12]
   83c6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   83c70:	68fb      	ldr	r3, [r7, #12]
   83c72:	681b      	ldr	r3, [r3, #0]
}
   83c74:	4618      	mov	r0, r3
   83c76:	3714      	adds	r7, #20
   83c78:	46bd      	mov	sp, r7
   83c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c7e:	4770      	bx	lr

00083c80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   83c80:	b480      	push	{r7}
   83c82:	b085      	sub	sp, #20
   83c84:	af00      	add	r7, sp, #0
   83c86:	60f8      	str	r0, [r7, #12]
   83c88:	60b9      	str	r1, [r7, #8]
   83c8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   83c8c:	68fb      	ldr	r3, [r7, #12]
   83c8e:	3b04      	subs	r3, #4
   83c90:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   83c92:	68fb      	ldr	r3, [r7, #12]
   83c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   83c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   83c9a:	68fb      	ldr	r3, [r7, #12]
   83c9c:	3b04      	subs	r3, #4
   83c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   83ca0:	68ba      	ldr	r2, [r7, #8]
   83ca2:	68fb      	ldr	r3, [r7, #12]
   83ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   83ca6:	68fb      	ldr	r3, [r7, #12]
   83ca8:	3b04      	subs	r3, #4
   83caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   83cac:	4a09      	ldr	r2, [pc, #36]	; (83cd4 <pxPortInitialiseStack+0x54>)
   83cae:	68fb      	ldr	r3, [r7, #12]
   83cb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   83cb2:	68fb      	ldr	r3, [r7, #12]
   83cb4:	3b14      	subs	r3, #20
   83cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   83cb8:	687a      	ldr	r2, [r7, #4]
   83cba:	68fb      	ldr	r3, [r7, #12]
   83cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   83cbe:	68fb      	ldr	r3, [r7, #12]
   83cc0:	3b20      	subs	r3, #32
   83cc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   83cc4:	68fb      	ldr	r3, [r7, #12]
}
   83cc6:	4618      	mov	r0, r3
   83cc8:	3714      	adds	r7, #20
   83cca:	46bd      	mov	sp, r7
   83ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   83cd0:	4770      	bx	lr
   83cd2:	bf00      	nop
   83cd4:	00083cd9 	.word	0x00083cd9

00083cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   83cd8:	b580      	push	{r7, lr}
   83cda:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   83cdc:	4b05      	ldr	r3, [pc, #20]	; (83cf4 <prvTaskExitError+0x1c>)
   83cde:	681b      	ldr	r3, [r3, #0]
   83ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
   83ce4:	d002      	beq.n	83cec <prvTaskExitError+0x14>
   83ce6:	4b04      	ldr	r3, [pc, #16]	; (83cf8 <prvTaskExitError+0x20>)
   83ce8:	4798      	blx	r3
   83cea:	e7fe      	b.n	83cea <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   83cec:	4b02      	ldr	r3, [pc, #8]	; (83cf8 <prvTaskExitError+0x20>)
   83cee:	4798      	blx	r3
	for( ;; );
   83cf0:	e7fe      	b.n	83cf0 <prvTaskExitError+0x18>
   83cf2:	bf00      	nop
   83cf4:	20070004 	.word	0x20070004
   83cf8:	00083ea5 	.word	0x00083ea5

00083cfc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   83cfc:	4b07      	ldr	r3, [pc, #28]	; (83d1c <pxCurrentTCBConst2>)
   83cfe:	6819      	ldr	r1, [r3, #0]
   83d00:	6808      	ldr	r0, [r1, #0]
   83d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83d06:	f380 8809 	msr	PSP, r0
   83d0a:	f3bf 8f6f 	isb	sy
   83d0e:	f04f 0000 	mov.w	r0, #0
   83d12:	f380 8811 	msr	BASEPRI, r0
   83d16:	f04e 0e0d 	orr.w	lr, lr, #13
   83d1a:	4770      	bx	lr

00083d1c <pxCurrentTCBConst2>:
   83d1c:	2007a508 	.word	0x2007a508

00083d20 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   83d20:	4806      	ldr	r0, [pc, #24]	; (83d3c <prvPortStartFirstTask+0x1c>)
   83d22:	6800      	ldr	r0, [r0, #0]
   83d24:	6800      	ldr	r0, [r0, #0]
   83d26:	f380 8808 	msr	MSP, r0
   83d2a:	b662      	cpsie	i
   83d2c:	b661      	cpsie	f
   83d2e:	f3bf 8f4f 	dsb	sy
   83d32:	f3bf 8f6f 	isb	sy
   83d36:	df00      	svc	0
   83d38:	bf00      	nop
   83d3a:	0000      	.short	0x0000
   83d3c:	e000ed08 	.word	0xe000ed08

00083d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   83d40:	b580      	push	{r7, lr}
   83d42:	b084      	sub	sp, #16
   83d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   83d46:	4b28      	ldr	r3, [pc, #160]	; (83de8 <xPortStartScheduler+0xa8>)
   83d48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   83d4a:	68fb      	ldr	r3, [r7, #12]
   83d4c:	781b      	ldrb	r3, [r3, #0]
   83d4e:	b2db      	uxtb	r3, r3
   83d50:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   83d52:	68fb      	ldr	r3, [r7, #12]
   83d54:	22ff      	movs	r2, #255	; 0xff
   83d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   83d58:	68fb      	ldr	r3, [r7, #12]
   83d5a:	781b      	ldrb	r3, [r3, #0]
   83d5c:	b2db      	uxtb	r3, r3
   83d5e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   83d60:	79fb      	ldrb	r3, [r7, #7]
   83d62:	b2db      	uxtb	r3, r3
   83d64:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   83d68:	b2da      	uxtb	r2, r3
   83d6a:	4b20      	ldr	r3, [pc, #128]	; (83dec <xPortStartScheduler+0xac>)
   83d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   83d6e:	4b20      	ldr	r3, [pc, #128]	; (83df0 <xPortStartScheduler+0xb0>)
   83d70:	2207      	movs	r2, #7
   83d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83d74:	e009      	b.n	83d8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   83d76:	4b1e      	ldr	r3, [pc, #120]	; (83df0 <xPortStartScheduler+0xb0>)
   83d78:	681b      	ldr	r3, [r3, #0]
   83d7a:	1e5a      	subs	r2, r3, #1
   83d7c:	4b1c      	ldr	r3, [pc, #112]	; (83df0 <xPortStartScheduler+0xb0>)
   83d7e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   83d80:	79fb      	ldrb	r3, [r7, #7]
   83d82:	b2db      	uxtb	r3, r3
   83d84:	005b      	lsls	r3, r3, #1
   83d86:	b2db      	uxtb	r3, r3
   83d88:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83d8a:	79fb      	ldrb	r3, [r7, #7]
   83d8c:	b2db      	uxtb	r3, r3
   83d8e:	b2db      	uxtb	r3, r3
   83d90:	b25b      	sxtb	r3, r3
   83d92:	2b00      	cmp	r3, #0
   83d94:	dbef      	blt.n	83d76 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   83d96:	4b16      	ldr	r3, [pc, #88]	; (83df0 <xPortStartScheduler+0xb0>)
   83d98:	681b      	ldr	r3, [r3, #0]
   83d9a:	021a      	lsls	r2, r3, #8
   83d9c:	4b14      	ldr	r3, [pc, #80]	; (83df0 <xPortStartScheduler+0xb0>)
   83d9e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   83da0:	4b13      	ldr	r3, [pc, #76]	; (83df0 <xPortStartScheduler+0xb0>)
   83da2:	681b      	ldr	r3, [r3, #0]
   83da4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   83da8:	4b11      	ldr	r3, [pc, #68]	; (83df0 <xPortStartScheduler+0xb0>)
   83daa:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   83dac:	68bb      	ldr	r3, [r7, #8]
   83dae:	b2da      	uxtb	r2, r3
   83db0:	68fb      	ldr	r3, [r7, #12]
   83db2:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   83db4:	4b0f      	ldr	r3, [pc, #60]	; (83df4 <xPortStartScheduler+0xb4>)
   83db6:	4a0f      	ldr	r2, [pc, #60]	; (83df4 <xPortStartScheduler+0xb4>)
   83db8:	6812      	ldr	r2, [r2, #0]
   83dba:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   83dbe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   83dc0:	4b0c      	ldr	r3, [pc, #48]	; (83df4 <xPortStartScheduler+0xb4>)
   83dc2:	4a0c      	ldr	r2, [pc, #48]	; (83df4 <xPortStartScheduler+0xb4>)
   83dc4:	6812      	ldr	r2, [r2, #0]
   83dc6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   83dca:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   83dcc:	4b0a      	ldr	r3, [pc, #40]	; (83df8 <xPortStartScheduler+0xb8>)
   83dce:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   83dd0:	4b0a      	ldr	r3, [pc, #40]	; (83dfc <xPortStartScheduler+0xbc>)
   83dd2:	2200      	movs	r2, #0
   83dd4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   83dd6:	4b0a      	ldr	r3, [pc, #40]	; (83e00 <xPortStartScheduler+0xc0>)
   83dd8:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   83dda:	4b0a      	ldr	r3, [pc, #40]	; (83e04 <xPortStartScheduler+0xc4>)
   83ddc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   83dde:	2300      	movs	r3, #0
}
   83de0:	4618      	mov	r0, r3
   83de2:	3710      	adds	r7, #16
   83de4:	46bd      	mov	sp, r7
   83de6:	bd80      	pop	{r7, pc}
   83de8:	e000e400 	.word	0xe000e400
   83dec:	200704e8 	.word	0x200704e8
   83df0:	200704ec 	.word	0x200704ec
   83df4:	e000ed20 	.word	0xe000ed20
   83df8:	00083f39 	.word	0x00083f39
   83dfc:	20070004 	.word	0x20070004
   83e00:	00083d21 	.word	0x00083d21
   83e04:	00083cd9 	.word	0x00083cd9

00083e08 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   83e08:	b480      	push	{r7}
   83e0a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   83e0c:	4b05      	ldr	r3, [pc, #20]	; (83e24 <vPortYield+0x1c>)
   83e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   83e12:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   83e14:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   83e18:	f3bf 8f6f 	isb	sy
}
   83e1c:	46bd      	mov	sp, r7
   83e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83e22:	4770      	bx	lr
   83e24:	e000ed04 	.word	0xe000ed04

00083e28 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   83e28:	b580      	push	{r7, lr}
   83e2a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   83e2c:	4b0c      	ldr	r3, [pc, #48]	; (83e60 <vPortEnterCritical+0x38>)
   83e2e:	4798      	blx	r3
	uxCriticalNesting++;
   83e30:	4b0c      	ldr	r3, [pc, #48]	; (83e64 <vPortEnterCritical+0x3c>)
   83e32:	681b      	ldr	r3, [r3, #0]
   83e34:	1c5a      	adds	r2, r3, #1
   83e36:	4b0b      	ldr	r3, [pc, #44]	; (83e64 <vPortEnterCritical+0x3c>)
   83e38:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   83e3a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   83e3e:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   83e42:	4b08      	ldr	r3, [pc, #32]	; (83e64 <vPortEnterCritical+0x3c>)
   83e44:	681b      	ldr	r3, [r3, #0]
   83e46:	2b01      	cmp	r3, #1
   83e48:	d108      	bne.n	83e5c <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   83e4a:	4b07      	ldr	r3, [pc, #28]	; (83e68 <vPortEnterCritical+0x40>)
   83e4c:	681b      	ldr	r3, [r3, #0]
   83e4e:	f003 031f 	and.w	r3, r3, #31
   83e52:	2b00      	cmp	r3, #0
   83e54:	d002      	beq.n	83e5c <vPortEnterCritical+0x34>
   83e56:	4b02      	ldr	r3, [pc, #8]	; (83e60 <vPortEnterCritical+0x38>)
   83e58:	4798      	blx	r3
   83e5a:	e7fe      	b.n	83e5a <vPortEnterCritical+0x32>
	}
}
   83e5c:	bd80      	pop	{r7, pc}
   83e5e:	bf00      	nop
   83e60:	00083ea5 	.word	0x00083ea5
   83e64:	20070004 	.word	0x20070004
   83e68:	e000ed04 	.word	0xe000ed04

00083e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   83e6c:	b580      	push	{r7, lr}
   83e6e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   83e70:	4b09      	ldr	r3, [pc, #36]	; (83e98 <vPortExitCritical+0x2c>)
   83e72:	681b      	ldr	r3, [r3, #0]
   83e74:	2b00      	cmp	r3, #0
   83e76:	d102      	bne.n	83e7e <vPortExitCritical+0x12>
   83e78:	4b08      	ldr	r3, [pc, #32]	; (83e9c <vPortExitCritical+0x30>)
   83e7a:	4798      	blx	r3
   83e7c:	e7fe      	b.n	83e7c <vPortExitCritical+0x10>
	uxCriticalNesting--;
   83e7e:	4b06      	ldr	r3, [pc, #24]	; (83e98 <vPortExitCritical+0x2c>)
   83e80:	681b      	ldr	r3, [r3, #0]
   83e82:	1e5a      	subs	r2, r3, #1
   83e84:	4b04      	ldr	r3, [pc, #16]	; (83e98 <vPortExitCritical+0x2c>)
   83e86:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   83e88:	4b03      	ldr	r3, [pc, #12]	; (83e98 <vPortExitCritical+0x2c>)
   83e8a:	681b      	ldr	r3, [r3, #0]
   83e8c:	2b00      	cmp	r3, #0
   83e8e:	d102      	bne.n	83e96 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   83e90:	2000      	movs	r0, #0
   83e92:	4b03      	ldr	r3, [pc, #12]	; (83ea0 <vPortExitCritical+0x34>)
   83e94:	4798      	blx	r3
	}
}
   83e96:	bd80      	pop	{r7, pc}
   83e98:	20070004 	.word	0x20070004
   83e9c:	00083ea5 	.word	0x00083ea5
   83ea0:	00083eb9 	.word	0x00083eb9

00083ea4 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   83ea4:	f3ef 8011 	mrs	r0, BASEPRI
   83ea8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   83eac:	f381 8811 	msr	BASEPRI, r1
   83eb0:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   83eb2:	2300      	movs	r3, #0
}
   83eb4:	4618      	mov	r0, r3
   83eb6:	bf00      	nop

00083eb8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   83eb8:	f380 8811 	msr	BASEPRI, r0
   83ebc:	4770      	bx	lr
   83ebe:	bf00      	nop

00083ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   83ec0:	f3ef 8009 	mrs	r0, PSP
   83ec4:	f3bf 8f6f 	isb	sy
   83ec8:	4b0d      	ldr	r3, [pc, #52]	; (83f00 <pxCurrentTCBConst>)
   83eca:	681a      	ldr	r2, [r3, #0]
   83ecc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ed0:	6010      	str	r0, [r2, #0]
   83ed2:	e92d 4008 	stmdb	sp!, {r3, lr}
   83ed6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   83eda:	f380 8811 	msr	BASEPRI, r0
   83ede:	f001 f98d 	bl	851fc <vTaskSwitchContext>
   83ee2:	f04f 0000 	mov.w	r0, #0
   83ee6:	f380 8811 	msr	BASEPRI, r0
   83eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   83eee:	6819      	ldr	r1, [r3, #0]
   83ef0:	6808      	ldr	r0, [r1, #0]
   83ef2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   83ef6:	f380 8809 	msr	PSP, r0
   83efa:	f3bf 8f6f 	isb	sy
   83efe:	4770      	bx	lr

00083f00 <pxCurrentTCBConst>:
   83f00:	2007a508 	.word	0x2007a508

00083f04 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   83f04:	b580      	push	{r7, lr}
   83f06:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   83f08:	4b07      	ldr	r3, [pc, #28]	; (83f28 <SysTick_Handler+0x24>)
   83f0a:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   83f0c:	4b07      	ldr	r3, [pc, #28]	; (83f2c <SysTick_Handler+0x28>)
   83f0e:	4798      	blx	r3
   83f10:	4603      	mov	r3, r0
   83f12:	2b00      	cmp	r3, #0
   83f14:	d003      	beq.n	83f1e <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   83f16:	4b06      	ldr	r3, [pc, #24]	; (83f30 <SysTick_Handler+0x2c>)
   83f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   83f1c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   83f1e:	2000      	movs	r0, #0
   83f20:	4b04      	ldr	r3, [pc, #16]	; (83f34 <SysTick_Handler+0x30>)
   83f22:	4798      	blx	r3
}
   83f24:	bd80      	pop	{r7, pc}
   83f26:	bf00      	nop
   83f28:	00083ea5 	.word	0x00083ea5
   83f2c:	00085081 	.word	0x00085081
   83f30:	e000ed04 	.word	0xe000ed04
   83f34:	00083eb9 	.word	0x00083eb9

00083f38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   83f38:	b480      	push	{r7}
   83f3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   83f3c:	4b07      	ldr	r3, [pc, #28]	; (83f5c <vPortSetupTimerInterrupt+0x24>)
   83f3e:	4a08      	ldr	r2, [pc, #32]	; (83f60 <vPortSetupTimerInterrupt+0x28>)
   83f40:	6811      	ldr	r1, [r2, #0]
   83f42:	4a08      	ldr	r2, [pc, #32]	; (83f64 <vPortSetupTimerInterrupt+0x2c>)
   83f44:	fba2 0201 	umull	r0, r2, r2, r1
   83f48:	0992      	lsrs	r2, r2, #6
   83f4a:	3a01      	subs	r2, #1
   83f4c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   83f4e:	4b06      	ldr	r3, [pc, #24]	; (83f68 <vPortSetupTimerInterrupt+0x30>)
   83f50:	2207      	movs	r2, #7
   83f52:	601a      	str	r2, [r3, #0]
}
   83f54:	46bd      	mov	sp, r7
   83f56:	f85d 7b04 	ldr.w	r7, [sp], #4
   83f5a:	4770      	bx	lr
   83f5c:	e000e014 	.word	0xe000e014
   83f60:	20070000 	.word	0x20070000
   83f64:	10624dd3 	.word	0x10624dd3
   83f68:	e000e010 	.word	0xe000e010

00083f6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   83f6c:	b580      	push	{r7, lr}
   83f6e:	b082      	sub	sp, #8
   83f70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   83f72:	f3ef 8305 	mrs	r3, IPSR
   83f76:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   83f78:	687b      	ldr	r3, [r7, #4]
   83f7a:	2b0f      	cmp	r3, #15
   83f7c:	d90c      	bls.n	83f98 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   83f7e:	4a0d      	ldr	r2, [pc, #52]	; (83fb4 <vPortValidateInterruptPriority+0x48>)
   83f80:	687b      	ldr	r3, [r7, #4]
   83f82:	4413      	add	r3, r2
   83f84:	781b      	ldrb	r3, [r3, #0]
   83f86:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83f88:	4b0b      	ldr	r3, [pc, #44]	; (83fb8 <vPortValidateInterruptPriority+0x4c>)
   83f8a:	781b      	ldrb	r3, [r3, #0]
   83f8c:	78fa      	ldrb	r2, [r7, #3]
   83f8e:	429a      	cmp	r2, r3
   83f90:	d202      	bcs.n	83f98 <vPortValidateInterruptPriority+0x2c>
   83f92:	4b0a      	ldr	r3, [pc, #40]	; (83fbc <vPortValidateInterruptPriority+0x50>)
   83f94:	4798      	blx	r3
   83f96:	e7fe      	b.n	83f96 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   83f98:	4b09      	ldr	r3, [pc, #36]	; (83fc0 <vPortValidateInterruptPriority+0x54>)
   83f9a:	681b      	ldr	r3, [r3, #0]
   83f9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   83fa0:	4b08      	ldr	r3, [pc, #32]	; (83fc4 <vPortValidateInterruptPriority+0x58>)
   83fa2:	681b      	ldr	r3, [r3, #0]
   83fa4:	429a      	cmp	r2, r3
   83fa6:	d902      	bls.n	83fae <vPortValidateInterruptPriority+0x42>
   83fa8:	4b04      	ldr	r3, [pc, #16]	; (83fbc <vPortValidateInterruptPriority+0x50>)
   83faa:	4798      	blx	r3
   83fac:	e7fe      	b.n	83fac <vPortValidateInterruptPriority+0x40>
	}
   83fae:	3708      	adds	r7, #8
   83fb0:	46bd      	mov	sp, r7
   83fb2:	bd80      	pop	{r7, pc}
   83fb4:	e000e3f0 	.word	0xe000e3f0
   83fb8:	200704e8 	.word	0x200704e8
   83fbc:	00083ea5 	.word	0x00083ea5
   83fc0:	e000ed0c 	.word	0xe000ed0c
   83fc4:	200704ec 	.word	0x200704ec

00083fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   83fc8:	b580      	push	{r7, lr}
   83fca:	b086      	sub	sp, #24
   83fcc:	af00      	add	r7, sp, #0
   83fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   83fd0:	2300      	movs	r3, #0
   83fd2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   83fd4:	4b4f      	ldr	r3, [pc, #316]	; (84114 <pvPortMalloc+0x14c>)
   83fd6:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   83fd8:	4b4f      	ldr	r3, [pc, #316]	; (84118 <pvPortMalloc+0x150>)
   83fda:	681b      	ldr	r3, [r3, #0]
   83fdc:	2b00      	cmp	r3, #0
   83fde:	d101      	bne.n	83fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   83fe0:	4b4e      	ldr	r3, [pc, #312]	; (8411c <pvPortMalloc+0x154>)
   83fe2:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   83fe4:	4b4e      	ldr	r3, [pc, #312]	; (84120 <pvPortMalloc+0x158>)
   83fe6:	681a      	ldr	r2, [r3, #0]
   83fe8:	687b      	ldr	r3, [r7, #4]
   83fea:	4013      	ands	r3, r2
   83fec:	2b00      	cmp	r3, #0
   83fee:	d17d      	bne.n	840ec <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   83ff0:	687b      	ldr	r3, [r7, #4]
   83ff2:	2b00      	cmp	r3, #0
   83ff4:	d015      	beq.n	84022 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   83ff6:	2308      	movs	r3, #8
   83ff8:	687a      	ldr	r2, [r7, #4]
   83ffa:	4413      	add	r3, r2
   83ffc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   83ffe:	687b      	ldr	r3, [r7, #4]
   84000:	f003 0307 	and.w	r3, r3, #7
   84004:	2b00      	cmp	r3, #0
   84006:	d00c      	beq.n	84022 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   84008:	687b      	ldr	r3, [r7, #4]
   8400a:	f023 0307 	bic.w	r3, r3, #7
   8400e:	3308      	adds	r3, #8
   84010:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   84012:	687b      	ldr	r3, [r7, #4]
   84014:	f003 0307 	and.w	r3, r3, #7
   84018:	2b00      	cmp	r3, #0
   8401a:	d002      	beq.n	84022 <pvPortMalloc+0x5a>
   8401c:	4b41      	ldr	r3, [pc, #260]	; (84124 <pvPortMalloc+0x15c>)
   8401e:	4798      	blx	r3
   84020:	e7fe      	b.n	84020 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   84022:	687b      	ldr	r3, [r7, #4]
   84024:	2b00      	cmp	r3, #0
   84026:	d061      	beq.n	840ec <pvPortMalloc+0x124>
   84028:	4b3f      	ldr	r3, [pc, #252]	; (84128 <pvPortMalloc+0x160>)
   8402a:	681b      	ldr	r3, [r3, #0]
   8402c:	687a      	ldr	r2, [r7, #4]
   8402e:	429a      	cmp	r2, r3
   84030:	d85c      	bhi.n	840ec <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   84032:	4b3e      	ldr	r3, [pc, #248]	; (8412c <pvPortMalloc+0x164>)
   84034:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   84036:	4b3d      	ldr	r3, [pc, #244]	; (8412c <pvPortMalloc+0x164>)
   84038:	681b      	ldr	r3, [r3, #0]
   8403a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8403c:	e004      	b.n	84048 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   8403e:	697b      	ldr	r3, [r7, #20]
   84040:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   84042:	697b      	ldr	r3, [r7, #20]
   84044:	681b      	ldr	r3, [r3, #0]
   84046:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   84048:	697b      	ldr	r3, [r7, #20]
   8404a:	685a      	ldr	r2, [r3, #4]
   8404c:	687b      	ldr	r3, [r7, #4]
   8404e:	429a      	cmp	r2, r3
   84050:	d203      	bcs.n	8405a <pvPortMalloc+0x92>
   84052:	697b      	ldr	r3, [r7, #20]
   84054:	681b      	ldr	r3, [r3, #0]
   84056:	2b00      	cmp	r3, #0
   84058:	d1f1      	bne.n	8403e <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   8405a:	4b2f      	ldr	r3, [pc, #188]	; (84118 <pvPortMalloc+0x150>)
   8405c:	681b      	ldr	r3, [r3, #0]
   8405e:	697a      	ldr	r2, [r7, #20]
   84060:	429a      	cmp	r2, r3
   84062:	d043      	beq.n	840ec <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   84064:	693b      	ldr	r3, [r7, #16]
   84066:	681a      	ldr	r2, [r3, #0]
   84068:	2308      	movs	r3, #8
   8406a:	4413      	add	r3, r2
   8406c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8406e:	697b      	ldr	r3, [r7, #20]
   84070:	681a      	ldr	r2, [r3, #0]
   84072:	693b      	ldr	r3, [r7, #16]
   84074:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   84076:	697b      	ldr	r3, [r7, #20]
   84078:	685a      	ldr	r2, [r3, #4]
   8407a:	687b      	ldr	r3, [r7, #4]
   8407c:	1ad2      	subs	r2, r2, r3
   8407e:	2308      	movs	r3, #8
   84080:	005b      	lsls	r3, r3, #1
   84082:	429a      	cmp	r2, r3
   84084:	d917      	bls.n	840b6 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   84086:	697a      	ldr	r2, [r7, #20]
   84088:	687b      	ldr	r3, [r7, #4]
   8408a:	4413      	add	r3, r2
   8408c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8408e:	68bb      	ldr	r3, [r7, #8]
   84090:	f003 0307 	and.w	r3, r3, #7
   84094:	2b00      	cmp	r3, #0
   84096:	d002      	beq.n	8409e <pvPortMalloc+0xd6>
   84098:	4b22      	ldr	r3, [pc, #136]	; (84124 <pvPortMalloc+0x15c>)
   8409a:	4798      	blx	r3
   8409c:	e7fe      	b.n	8409c <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8409e:	697b      	ldr	r3, [r7, #20]
   840a0:	685a      	ldr	r2, [r3, #4]
   840a2:	687b      	ldr	r3, [r7, #4]
   840a4:	1ad2      	subs	r2, r2, r3
   840a6:	68bb      	ldr	r3, [r7, #8]
   840a8:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   840aa:	697b      	ldr	r3, [r7, #20]
   840ac:	687a      	ldr	r2, [r7, #4]
   840ae:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   840b0:	68b8      	ldr	r0, [r7, #8]
   840b2:	4b1f      	ldr	r3, [pc, #124]	; (84130 <pvPortMalloc+0x168>)
   840b4:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   840b6:	4b1c      	ldr	r3, [pc, #112]	; (84128 <pvPortMalloc+0x160>)
   840b8:	681a      	ldr	r2, [r3, #0]
   840ba:	697b      	ldr	r3, [r7, #20]
   840bc:	685b      	ldr	r3, [r3, #4]
   840be:	1ad2      	subs	r2, r2, r3
   840c0:	4b19      	ldr	r3, [pc, #100]	; (84128 <pvPortMalloc+0x160>)
   840c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   840c4:	4b18      	ldr	r3, [pc, #96]	; (84128 <pvPortMalloc+0x160>)
   840c6:	681a      	ldr	r2, [r3, #0]
   840c8:	4b1a      	ldr	r3, [pc, #104]	; (84134 <pvPortMalloc+0x16c>)
   840ca:	681b      	ldr	r3, [r3, #0]
   840cc:	429a      	cmp	r2, r3
   840ce:	d203      	bcs.n	840d8 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   840d0:	4b15      	ldr	r3, [pc, #84]	; (84128 <pvPortMalloc+0x160>)
   840d2:	681a      	ldr	r2, [r3, #0]
   840d4:	4b17      	ldr	r3, [pc, #92]	; (84134 <pvPortMalloc+0x16c>)
   840d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   840d8:	697b      	ldr	r3, [r7, #20]
   840da:	685a      	ldr	r2, [r3, #4]
   840dc:	4b10      	ldr	r3, [pc, #64]	; (84120 <pvPortMalloc+0x158>)
   840de:	681b      	ldr	r3, [r3, #0]
   840e0:	431a      	orrs	r2, r3
   840e2:	697b      	ldr	r3, [r7, #20]
   840e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   840e6:	697b      	ldr	r3, [r7, #20]
   840e8:	2200      	movs	r2, #0
   840ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   840ec:	4b12      	ldr	r3, [pc, #72]	; (84138 <pvPortMalloc+0x170>)
   840ee:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   840f0:	68fb      	ldr	r3, [r7, #12]
   840f2:	2b00      	cmp	r3, #0
   840f4:	d101      	bne.n	840fa <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   840f6:	4b11      	ldr	r3, [pc, #68]	; (8413c <pvPortMalloc+0x174>)
   840f8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   840fa:	68fb      	ldr	r3, [r7, #12]
   840fc:	f003 0307 	and.w	r3, r3, #7
   84100:	2b00      	cmp	r3, #0
   84102:	d002      	beq.n	8410a <pvPortMalloc+0x142>
   84104:	4b07      	ldr	r3, [pc, #28]	; (84124 <pvPortMalloc+0x15c>)
   84106:	4798      	blx	r3
   84108:	e7fe      	b.n	84108 <pvPortMalloc+0x140>
	return pvReturn;
   8410a:	68fb      	ldr	r3, [r7, #12]
}
   8410c:	4618      	mov	r0, r3
   8410e:	3718      	adds	r7, #24
   84110:	46bd      	mov	sp, r7
   84112:	bd80      	pop	{r7, pc}
   84114:	00084f15 	.word	0x00084f15
   84118:	2007a4f8 	.word	0x2007a4f8
   8411c:	000841e5 	.word	0x000841e5
   84120:	2007a504 	.word	0x2007a504
   84124:	00083ea5 	.word	0x00083ea5
   84128:	2007a4fc 	.word	0x2007a4fc
   8412c:	2007a4f0 	.word	0x2007a4f0
   84130:	000842a9 	.word	0x000842a9
   84134:	2007a500 	.word	0x2007a500
   84138:	00084f31 	.word	0x00084f31
   8413c:	00086c95 	.word	0x00086c95

00084140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   84140:	b580      	push	{r7, lr}
   84142:	b084      	sub	sp, #16
   84144:	af00      	add	r7, sp, #0
   84146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   84148:	687b      	ldr	r3, [r7, #4]
   8414a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   8414c:	687b      	ldr	r3, [r7, #4]
   8414e:	2b00      	cmp	r3, #0
   84150:	d038      	beq.n	841c4 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   84152:	2308      	movs	r3, #8
   84154:	425b      	negs	r3, r3
   84156:	68fa      	ldr	r2, [r7, #12]
   84158:	4413      	add	r3, r2
   8415a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   8415c:	68fb      	ldr	r3, [r7, #12]
   8415e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   84160:	68bb      	ldr	r3, [r7, #8]
   84162:	685a      	ldr	r2, [r3, #4]
   84164:	4b19      	ldr	r3, [pc, #100]	; (841cc <vPortFree+0x8c>)
   84166:	681b      	ldr	r3, [r3, #0]
   84168:	4013      	ands	r3, r2
   8416a:	2b00      	cmp	r3, #0
   8416c:	d102      	bne.n	84174 <vPortFree+0x34>
   8416e:	4b18      	ldr	r3, [pc, #96]	; (841d0 <vPortFree+0x90>)
   84170:	4798      	blx	r3
   84172:	e7fe      	b.n	84172 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   84174:	68bb      	ldr	r3, [r7, #8]
   84176:	681b      	ldr	r3, [r3, #0]
   84178:	2b00      	cmp	r3, #0
   8417a:	d002      	beq.n	84182 <vPortFree+0x42>
   8417c:	4b14      	ldr	r3, [pc, #80]	; (841d0 <vPortFree+0x90>)
   8417e:	4798      	blx	r3
   84180:	e7fe      	b.n	84180 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   84182:	68bb      	ldr	r3, [r7, #8]
   84184:	685a      	ldr	r2, [r3, #4]
   84186:	4b11      	ldr	r3, [pc, #68]	; (841cc <vPortFree+0x8c>)
   84188:	681b      	ldr	r3, [r3, #0]
   8418a:	4013      	ands	r3, r2
   8418c:	2b00      	cmp	r3, #0
   8418e:	d019      	beq.n	841c4 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   84190:	68bb      	ldr	r3, [r7, #8]
   84192:	681b      	ldr	r3, [r3, #0]
   84194:	2b00      	cmp	r3, #0
   84196:	d115      	bne.n	841c4 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   84198:	68bb      	ldr	r3, [r7, #8]
   8419a:	685a      	ldr	r2, [r3, #4]
   8419c:	4b0b      	ldr	r3, [pc, #44]	; (841cc <vPortFree+0x8c>)
   8419e:	681b      	ldr	r3, [r3, #0]
   841a0:	43db      	mvns	r3, r3
   841a2:	401a      	ands	r2, r3
   841a4:	68bb      	ldr	r3, [r7, #8]
   841a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   841a8:	4b0a      	ldr	r3, [pc, #40]	; (841d4 <vPortFree+0x94>)
   841aa:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   841ac:	68bb      	ldr	r3, [r7, #8]
   841ae:	685a      	ldr	r2, [r3, #4]
   841b0:	4b09      	ldr	r3, [pc, #36]	; (841d8 <vPortFree+0x98>)
   841b2:	681b      	ldr	r3, [r3, #0]
   841b4:	441a      	add	r2, r3
   841b6:	4b08      	ldr	r3, [pc, #32]	; (841d8 <vPortFree+0x98>)
   841b8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   841ba:	68b8      	ldr	r0, [r7, #8]
   841bc:	4b07      	ldr	r3, [pc, #28]	; (841dc <vPortFree+0x9c>)
   841be:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   841c0:	4b07      	ldr	r3, [pc, #28]	; (841e0 <vPortFree+0xa0>)
   841c2:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   841c4:	3710      	adds	r7, #16
   841c6:	46bd      	mov	sp, r7
   841c8:	bd80      	pop	{r7, pc}
   841ca:	bf00      	nop
   841cc:	2007a504 	.word	0x2007a504
   841d0:	00083ea5 	.word	0x00083ea5
   841d4:	00084f15 	.word	0x00084f15
   841d8:	2007a4fc 	.word	0x2007a4fc
   841dc:	000842a9 	.word	0x000842a9
   841e0:	00084f31 	.word	0x00084f31

000841e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   841e4:	b480      	push	{r7}
   841e6:	b085      	sub	sp, #20
   841e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   841ea:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   841ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   841f0:	4b27      	ldr	r3, [pc, #156]	; (84290 <prvHeapInit+0xac>)
   841f2:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   841f4:	68fb      	ldr	r3, [r7, #12]
   841f6:	f003 0307 	and.w	r3, r3, #7
   841fa:	2b00      	cmp	r3, #0
   841fc:	d00c      	beq.n	84218 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   841fe:	68fb      	ldr	r3, [r7, #12]
   84200:	3307      	adds	r3, #7
   84202:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   84204:	68fb      	ldr	r3, [r7, #12]
   84206:	f023 0307 	bic.w	r3, r3, #7
   8420a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   8420c:	68ba      	ldr	r2, [r7, #8]
   8420e:	68fb      	ldr	r3, [r7, #12]
   84210:	1ad2      	subs	r2, r2, r3
   84212:	4b1f      	ldr	r3, [pc, #124]	; (84290 <prvHeapInit+0xac>)
   84214:	4413      	add	r3, r2
   84216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   84218:	68fb      	ldr	r3, [r7, #12]
   8421a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   8421c:	4b1d      	ldr	r3, [pc, #116]	; (84294 <prvHeapInit+0xb0>)
   8421e:	687a      	ldr	r2, [r7, #4]
   84220:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   84222:	4b1c      	ldr	r3, [pc, #112]	; (84294 <prvHeapInit+0xb0>)
   84224:	2200      	movs	r2, #0
   84226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   84228:	687a      	ldr	r2, [r7, #4]
   8422a:	68bb      	ldr	r3, [r7, #8]
   8422c:	4413      	add	r3, r2
   8422e:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   84230:	2308      	movs	r3, #8
   84232:	68fa      	ldr	r2, [r7, #12]
   84234:	1ad3      	subs	r3, r2, r3
   84236:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   84238:	68fb      	ldr	r3, [r7, #12]
   8423a:	f023 0307 	bic.w	r3, r3, #7
   8423e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   84240:	68fa      	ldr	r2, [r7, #12]
   84242:	4b15      	ldr	r3, [pc, #84]	; (84298 <prvHeapInit+0xb4>)
   84244:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   84246:	4b14      	ldr	r3, [pc, #80]	; (84298 <prvHeapInit+0xb4>)
   84248:	681b      	ldr	r3, [r3, #0]
   8424a:	2200      	movs	r2, #0
   8424c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8424e:	4b12      	ldr	r3, [pc, #72]	; (84298 <prvHeapInit+0xb4>)
   84250:	681b      	ldr	r3, [r3, #0]
   84252:	2200      	movs	r2, #0
   84254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   84256:	687b      	ldr	r3, [r7, #4]
   84258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   8425a:	683b      	ldr	r3, [r7, #0]
   8425c:	68fa      	ldr	r2, [r7, #12]
   8425e:	1ad2      	subs	r2, r2, r3
   84260:	683b      	ldr	r3, [r7, #0]
   84262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   84264:	4b0c      	ldr	r3, [pc, #48]	; (84298 <prvHeapInit+0xb4>)
   84266:	681a      	ldr	r2, [r3, #0]
   84268:	683b      	ldr	r3, [r7, #0]
   8426a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8426c:	683b      	ldr	r3, [r7, #0]
   8426e:	685a      	ldr	r2, [r3, #4]
   84270:	4b0a      	ldr	r3, [pc, #40]	; (8429c <prvHeapInit+0xb8>)
   84272:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   84274:	683b      	ldr	r3, [r7, #0]
   84276:	685a      	ldr	r2, [r3, #4]
   84278:	4b09      	ldr	r3, [pc, #36]	; (842a0 <prvHeapInit+0xbc>)
   8427a:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   8427c:	4b09      	ldr	r3, [pc, #36]	; (842a4 <prvHeapInit+0xc0>)
   8427e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   84282:	601a      	str	r2, [r3, #0]
}
   84284:	3714      	adds	r7, #20
   84286:	46bd      	mov	sp, r7
   84288:	f85d 7b04 	ldr.w	r7, [sp], #4
   8428c:	4770      	bx	lr
   8428e:	bf00      	nop
   84290:	200704f0 	.word	0x200704f0
   84294:	2007a4f0 	.word	0x2007a4f0
   84298:	2007a4f8 	.word	0x2007a4f8
   8429c:	2007a500 	.word	0x2007a500
   842a0:	2007a4fc 	.word	0x2007a4fc
   842a4:	2007a504 	.word	0x2007a504

000842a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   842a8:	b480      	push	{r7}
   842aa:	b085      	sub	sp, #20
   842ac:	af00      	add	r7, sp, #0
   842ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   842b0:	4b27      	ldr	r3, [pc, #156]	; (84350 <prvInsertBlockIntoFreeList+0xa8>)
   842b2:	60fb      	str	r3, [r7, #12]
   842b4:	e002      	b.n	842bc <prvInsertBlockIntoFreeList+0x14>
   842b6:	68fb      	ldr	r3, [r7, #12]
   842b8:	681b      	ldr	r3, [r3, #0]
   842ba:	60fb      	str	r3, [r7, #12]
   842bc:	68fb      	ldr	r3, [r7, #12]
   842be:	681a      	ldr	r2, [r3, #0]
   842c0:	687b      	ldr	r3, [r7, #4]
   842c2:	429a      	cmp	r2, r3
   842c4:	d3f7      	bcc.n	842b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   842c6:	68fb      	ldr	r3, [r7, #12]
   842c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   842ca:	68fb      	ldr	r3, [r7, #12]
   842cc:	685b      	ldr	r3, [r3, #4]
   842ce:	68ba      	ldr	r2, [r7, #8]
   842d0:	441a      	add	r2, r3
   842d2:	687b      	ldr	r3, [r7, #4]
   842d4:	429a      	cmp	r2, r3
   842d6:	d108      	bne.n	842ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   842d8:	68fb      	ldr	r3, [r7, #12]
   842da:	685a      	ldr	r2, [r3, #4]
   842dc:	687b      	ldr	r3, [r7, #4]
   842de:	685b      	ldr	r3, [r3, #4]
   842e0:	441a      	add	r2, r3
   842e2:	68fb      	ldr	r3, [r7, #12]
   842e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   842e6:	68fb      	ldr	r3, [r7, #12]
   842e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   842ea:	687b      	ldr	r3, [r7, #4]
   842ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   842ee:	687b      	ldr	r3, [r7, #4]
   842f0:	685b      	ldr	r3, [r3, #4]
   842f2:	68ba      	ldr	r2, [r7, #8]
   842f4:	441a      	add	r2, r3
   842f6:	68fb      	ldr	r3, [r7, #12]
   842f8:	681b      	ldr	r3, [r3, #0]
   842fa:	429a      	cmp	r2, r3
   842fc:	d118      	bne.n	84330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   842fe:	68fb      	ldr	r3, [r7, #12]
   84300:	681a      	ldr	r2, [r3, #0]
   84302:	4b14      	ldr	r3, [pc, #80]	; (84354 <prvInsertBlockIntoFreeList+0xac>)
   84304:	681b      	ldr	r3, [r3, #0]
   84306:	429a      	cmp	r2, r3
   84308:	d00d      	beq.n	84326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8430a:	687b      	ldr	r3, [r7, #4]
   8430c:	685a      	ldr	r2, [r3, #4]
   8430e:	68fb      	ldr	r3, [r7, #12]
   84310:	681b      	ldr	r3, [r3, #0]
   84312:	685b      	ldr	r3, [r3, #4]
   84314:	441a      	add	r2, r3
   84316:	687b      	ldr	r3, [r7, #4]
   84318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8431a:	68fb      	ldr	r3, [r7, #12]
   8431c:	681b      	ldr	r3, [r3, #0]
   8431e:	681a      	ldr	r2, [r3, #0]
   84320:	687b      	ldr	r3, [r7, #4]
   84322:	601a      	str	r2, [r3, #0]
   84324:	e008      	b.n	84338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   84326:	4b0b      	ldr	r3, [pc, #44]	; (84354 <prvInsertBlockIntoFreeList+0xac>)
   84328:	681a      	ldr	r2, [r3, #0]
   8432a:	687b      	ldr	r3, [r7, #4]
   8432c:	601a      	str	r2, [r3, #0]
   8432e:	e003      	b.n	84338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   84330:	68fb      	ldr	r3, [r7, #12]
   84332:	681a      	ldr	r2, [r3, #0]
   84334:	687b      	ldr	r3, [r7, #4]
   84336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   84338:	68fa      	ldr	r2, [r7, #12]
   8433a:	687b      	ldr	r3, [r7, #4]
   8433c:	429a      	cmp	r2, r3
   8433e:	d002      	beq.n	84346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   84340:	68fb      	ldr	r3, [r7, #12]
   84342:	687a      	ldr	r2, [r7, #4]
   84344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   84346:	3714      	adds	r7, #20
   84348:	46bd      	mov	sp, r7
   8434a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8434e:	4770      	bx	lr
   84350:	2007a4f0 	.word	0x2007a4f0
   84354:	2007a4f8 	.word	0x2007a4f8

00084358 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   84358:	b580      	push	{r7, lr}
   8435a:	b084      	sub	sp, #16
   8435c:	af00      	add	r7, sp, #0
   8435e:	6078      	str	r0, [r7, #4]
   84360:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   84362:	687b      	ldr	r3, [r7, #4]
   84364:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   84366:	68fb      	ldr	r3, [r7, #12]
   84368:	2b00      	cmp	r3, #0
   8436a:	d102      	bne.n	84372 <xQueueGenericReset+0x1a>
   8436c:	4b26      	ldr	r3, [pc, #152]	; (84408 <xQueueGenericReset+0xb0>)
   8436e:	4798      	blx	r3
   84370:	e7fe      	b.n	84370 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   84372:	4b26      	ldr	r3, [pc, #152]	; (8440c <xQueueGenericReset+0xb4>)
   84374:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   84376:	68fb      	ldr	r3, [r7, #12]
   84378:	681a      	ldr	r2, [r3, #0]
   8437a:	68fb      	ldr	r3, [r7, #12]
   8437c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8437e:	68f9      	ldr	r1, [r7, #12]
   84380:	6c09      	ldr	r1, [r1, #64]	; 0x40
   84382:	fb01 f303 	mul.w	r3, r1, r3
   84386:	441a      	add	r2, r3
   84388:	68fb      	ldr	r3, [r7, #12]
   8438a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   8438c:	68fb      	ldr	r3, [r7, #12]
   8438e:	2200      	movs	r2, #0
   84390:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   84392:	68fb      	ldr	r3, [r7, #12]
   84394:	681a      	ldr	r2, [r3, #0]
   84396:	68fb      	ldr	r3, [r7, #12]
   84398:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   8439a:	68fb      	ldr	r3, [r7, #12]
   8439c:	681a      	ldr	r2, [r3, #0]
   8439e:	68fb      	ldr	r3, [r7, #12]
   843a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   843a2:	3b01      	subs	r3, #1
   843a4:	68f9      	ldr	r1, [r7, #12]
   843a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
   843a8:	fb01 f303 	mul.w	r3, r1, r3
   843ac:	441a      	add	r2, r3
   843ae:	68fb      	ldr	r3, [r7, #12]
   843b0:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   843b2:	68fb      	ldr	r3, [r7, #12]
   843b4:	f04f 32ff 	mov.w	r2, #4294967295
   843b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   843ba:	68fb      	ldr	r3, [r7, #12]
   843bc:	f04f 32ff 	mov.w	r2, #4294967295
   843c0:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   843c2:	683b      	ldr	r3, [r7, #0]
   843c4:	2b00      	cmp	r3, #0
   843c6:	d10e      	bne.n	843e6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   843c8:	68fb      	ldr	r3, [r7, #12]
   843ca:	691b      	ldr	r3, [r3, #16]
   843cc:	2b00      	cmp	r3, #0
   843ce:	d014      	beq.n	843fa <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   843d0:	68fb      	ldr	r3, [r7, #12]
   843d2:	3310      	adds	r3, #16
   843d4:	4618      	mov	r0, r3
   843d6:	4b0e      	ldr	r3, [pc, #56]	; (84410 <xQueueGenericReset+0xb8>)
   843d8:	4798      	blx	r3
   843da:	4603      	mov	r3, r0
   843dc:	2b01      	cmp	r3, #1
   843de:	d10c      	bne.n	843fa <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   843e0:	4b0c      	ldr	r3, [pc, #48]	; (84414 <xQueueGenericReset+0xbc>)
   843e2:	4798      	blx	r3
   843e4:	e009      	b.n	843fa <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   843e6:	68fb      	ldr	r3, [r7, #12]
   843e8:	3310      	adds	r3, #16
   843ea:	4618      	mov	r0, r3
   843ec:	4b0a      	ldr	r3, [pc, #40]	; (84418 <xQueueGenericReset+0xc0>)
   843ee:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   843f0:	68fb      	ldr	r3, [r7, #12]
   843f2:	3324      	adds	r3, #36	; 0x24
   843f4:	4618      	mov	r0, r3
   843f6:	4b08      	ldr	r3, [pc, #32]	; (84418 <xQueueGenericReset+0xc0>)
   843f8:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   843fa:	4b08      	ldr	r3, [pc, #32]	; (8441c <xQueueGenericReset+0xc4>)
   843fc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   843fe:	2301      	movs	r3, #1
}
   84400:	4618      	mov	r0, r3
   84402:	3710      	adds	r7, #16
   84404:	46bd      	mov	sp, r7
   84406:	bd80      	pop	{r7, pc}
   84408:	00083ea5 	.word	0x00083ea5
   8440c:	00083e29 	.word	0x00083e29
   84410:	00085419 	.word	0x00085419
   84414:	00083e09 	.word	0x00083e09
   84418:	00083b1d 	.word	0x00083b1d
   8441c:	00083e6d 	.word	0x00083e6d

00084420 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   84420:	b580      	push	{r7, lr}
   84422:	b088      	sub	sp, #32
   84424:	af00      	add	r7, sp, #0
   84426:	60f8      	str	r0, [r7, #12]
   84428:	60b9      	str	r1, [r7, #8]
   8442a:	4613      	mov	r3, r2
   8442c:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   8442e:	2300      	movs	r3, #0
   84430:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   84432:	68fb      	ldr	r3, [r7, #12]
   84434:	2b00      	cmp	r3, #0
   84436:	d026      	beq.n	84486 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   84438:	204c      	movs	r0, #76	; 0x4c
   8443a:	4b18      	ldr	r3, [pc, #96]	; (8449c <xQueueGenericCreate+0x7c>)
   8443c:	4798      	blx	r3
   8443e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   84440:	69bb      	ldr	r3, [r7, #24]
   84442:	2b00      	cmp	r3, #0
   84444:	d01f      	beq.n	84486 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84446:	68fb      	ldr	r3, [r7, #12]
   84448:	68ba      	ldr	r2, [r7, #8]
   8444a:	fb02 f303 	mul.w	r3, r2, r3
   8444e:	3301      	adds	r3, #1
   84450:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   84452:	6978      	ldr	r0, [r7, #20]
   84454:	4b11      	ldr	r3, [pc, #68]	; (8449c <xQueueGenericCreate+0x7c>)
   84456:	4798      	blx	r3
   84458:	4602      	mov	r2, r0
   8445a:	69bb      	ldr	r3, [r7, #24]
   8445c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   8445e:	69bb      	ldr	r3, [r7, #24]
   84460:	681b      	ldr	r3, [r3, #0]
   84462:	2b00      	cmp	r3, #0
   84464:	d00c      	beq.n	84480 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   84466:	69bb      	ldr	r3, [r7, #24]
   84468:	68fa      	ldr	r2, [r7, #12]
   8446a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8446c:	69bb      	ldr	r3, [r7, #24]
   8446e:	68ba      	ldr	r2, [r7, #8]
   84470:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   84472:	69b8      	ldr	r0, [r7, #24]
   84474:	2101      	movs	r1, #1
   84476:	4b0a      	ldr	r3, [pc, #40]	; (844a0 <xQueueGenericCreate+0x80>)
   84478:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   8447a:	69bb      	ldr	r3, [r7, #24]
   8447c:	61fb      	str	r3, [r7, #28]
   8447e:	e002      	b.n	84486 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   84480:	69b8      	ldr	r0, [r7, #24]
   84482:	4b08      	ldr	r3, [pc, #32]	; (844a4 <xQueueGenericCreate+0x84>)
   84484:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   84486:	69fb      	ldr	r3, [r7, #28]
   84488:	2b00      	cmp	r3, #0
   8448a:	d102      	bne.n	84492 <xQueueGenericCreate+0x72>
   8448c:	4b06      	ldr	r3, [pc, #24]	; (844a8 <xQueueGenericCreate+0x88>)
   8448e:	4798      	blx	r3
   84490:	e7fe      	b.n	84490 <xQueueGenericCreate+0x70>

	return xReturn;
   84492:	69fb      	ldr	r3, [r7, #28]
}
   84494:	4618      	mov	r0, r3
   84496:	3720      	adds	r7, #32
   84498:	46bd      	mov	sp, r7
   8449a:	bd80      	pop	{r7, pc}
   8449c:	00083fc9 	.word	0x00083fc9
   844a0:	00084359 	.word	0x00084359
   844a4:	00084141 	.word	0x00084141
   844a8:	00083ea5 	.word	0x00083ea5

000844ac <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   844ac:	b580      	push	{r7, lr}
   844ae:	b08a      	sub	sp, #40	; 0x28
   844b0:	af00      	add	r7, sp, #0
   844b2:	60f8      	str	r0, [r7, #12]
   844b4:	60b9      	str	r1, [r7, #8]
   844b6:	607a      	str	r2, [r7, #4]
   844b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   844ba:	2300      	movs	r3, #0
   844bc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   844be:	68fb      	ldr	r3, [r7, #12]
   844c0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   844c2:	6a3b      	ldr	r3, [r7, #32]
   844c4:	2b00      	cmp	r3, #0
   844c6:	d102      	bne.n	844ce <xQueueGenericSend+0x22>
   844c8:	4b5b      	ldr	r3, [pc, #364]	; (84638 <xQueueGenericSend+0x18c>)
   844ca:	4798      	blx	r3
   844cc:	e7fe      	b.n	844cc <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   844ce:	68bb      	ldr	r3, [r7, #8]
   844d0:	2b00      	cmp	r3, #0
   844d2:	d103      	bne.n	844dc <xQueueGenericSend+0x30>
   844d4:	6a3b      	ldr	r3, [r7, #32]
   844d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   844d8:	2b00      	cmp	r3, #0
   844da:	d101      	bne.n	844e0 <xQueueGenericSend+0x34>
   844dc:	2301      	movs	r3, #1
   844de:	e000      	b.n	844e2 <xQueueGenericSend+0x36>
   844e0:	2300      	movs	r3, #0
   844e2:	2b00      	cmp	r3, #0
   844e4:	d102      	bne.n	844ec <xQueueGenericSend+0x40>
   844e6:	4b54      	ldr	r3, [pc, #336]	; (84638 <xQueueGenericSend+0x18c>)
   844e8:	4798      	blx	r3
   844ea:	e7fe      	b.n	844ea <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   844ec:	683b      	ldr	r3, [r7, #0]
   844ee:	2b02      	cmp	r3, #2
   844f0:	d103      	bne.n	844fa <xQueueGenericSend+0x4e>
   844f2:	6a3b      	ldr	r3, [r7, #32]
   844f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   844f6:	2b01      	cmp	r3, #1
   844f8:	d101      	bne.n	844fe <xQueueGenericSend+0x52>
   844fa:	2301      	movs	r3, #1
   844fc:	e000      	b.n	84500 <xQueueGenericSend+0x54>
   844fe:	2300      	movs	r3, #0
   84500:	2b00      	cmp	r3, #0
   84502:	d102      	bne.n	8450a <xQueueGenericSend+0x5e>
   84504:	4b4c      	ldr	r3, [pc, #304]	; (84638 <xQueueGenericSend+0x18c>)
   84506:	4798      	blx	r3
   84508:	e7fe      	b.n	84508 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   8450a:	4b4c      	ldr	r3, [pc, #304]	; (8463c <xQueueGenericSend+0x190>)
   8450c:	4798      	blx	r3
   8450e:	4603      	mov	r3, r0
   84510:	2b00      	cmp	r3, #0
   84512:	d102      	bne.n	8451a <xQueueGenericSend+0x6e>
   84514:	687b      	ldr	r3, [r7, #4]
   84516:	2b00      	cmp	r3, #0
   84518:	d101      	bne.n	8451e <xQueueGenericSend+0x72>
   8451a:	2301      	movs	r3, #1
   8451c:	e000      	b.n	84520 <xQueueGenericSend+0x74>
   8451e:	2300      	movs	r3, #0
   84520:	2b00      	cmp	r3, #0
   84522:	d102      	bne.n	8452a <xQueueGenericSend+0x7e>
   84524:	4b44      	ldr	r3, [pc, #272]	; (84638 <xQueueGenericSend+0x18c>)
   84526:	4798      	blx	r3
   84528:	e7fe      	b.n	84528 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8452a:	4b45      	ldr	r3, [pc, #276]	; (84640 <xQueueGenericSend+0x194>)
   8452c:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   8452e:	6a3b      	ldr	r3, [r7, #32]
   84530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   84532:	6a3b      	ldr	r3, [r7, #32]
   84534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   84536:	429a      	cmp	r2, r3
   84538:	d302      	bcc.n	84540 <xQueueGenericSend+0x94>
   8453a:	683b      	ldr	r3, [r7, #0]
   8453c:	2b02      	cmp	r3, #2
   8453e:	d11d      	bne.n	8457c <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   84540:	6a38      	ldr	r0, [r7, #32]
   84542:	68b9      	ldr	r1, [r7, #8]
   84544:	683a      	ldr	r2, [r7, #0]
   84546:	4b3f      	ldr	r3, [pc, #252]	; (84644 <xQueueGenericSend+0x198>)
   84548:	4798      	blx	r3
   8454a:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8454c:	6a3b      	ldr	r3, [r7, #32]
   8454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84550:	2b00      	cmp	r3, #0
   84552:	d00a      	beq.n	8456a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   84554:	6a3b      	ldr	r3, [r7, #32]
   84556:	3324      	adds	r3, #36	; 0x24
   84558:	4618      	mov	r0, r3
   8455a:	4b3b      	ldr	r3, [pc, #236]	; (84648 <xQueueGenericSend+0x19c>)
   8455c:	4798      	blx	r3
   8455e:	4603      	mov	r3, r0
   84560:	2b01      	cmp	r3, #1
   84562:	d107      	bne.n	84574 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   84564:	4b39      	ldr	r3, [pc, #228]	; (8464c <xQueueGenericSend+0x1a0>)
   84566:	4798      	blx	r3
   84568:	e004      	b.n	84574 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   8456a:	69fb      	ldr	r3, [r7, #28]
   8456c:	2b00      	cmp	r3, #0
   8456e:	d001      	beq.n	84574 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   84570:	4b36      	ldr	r3, [pc, #216]	; (8464c <xQueueGenericSend+0x1a0>)
   84572:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   84574:	4b36      	ldr	r3, [pc, #216]	; (84650 <xQueueGenericSend+0x1a4>)
   84576:	4798      	blx	r3
				return pdPASS;
   84578:	2301      	movs	r3, #1
   8457a:	e059      	b.n	84630 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   8457c:	687b      	ldr	r3, [r7, #4]
   8457e:	2b00      	cmp	r3, #0
   84580:	d103      	bne.n	8458a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   84582:	4b33      	ldr	r3, [pc, #204]	; (84650 <xQueueGenericSend+0x1a4>)
   84584:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   84586:	2300      	movs	r3, #0
   84588:	e052      	b.n	84630 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   8458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8458c:	2b00      	cmp	r3, #0
   8458e:	d106      	bne.n	8459e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   84590:	f107 0314 	add.w	r3, r7, #20
   84594:	4618      	mov	r0, r3
   84596:	4b2f      	ldr	r3, [pc, #188]	; (84654 <xQueueGenericSend+0x1a8>)
   84598:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8459a:	2301      	movs	r3, #1
   8459c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   8459e:	4b2c      	ldr	r3, [pc, #176]	; (84650 <xQueueGenericSend+0x1a4>)
   845a0:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   845a2:	4b2d      	ldr	r3, [pc, #180]	; (84658 <xQueueGenericSend+0x1ac>)
   845a4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   845a6:	4b26      	ldr	r3, [pc, #152]	; (84640 <xQueueGenericSend+0x194>)
   845a8:	4798      	blx	r3
   845aa:	6a3b      	ldr	r3, [r7, #32]
   845ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   845ae:	f1b3 3fff 	cmp.w	r3, #4294967295
   845b2:	d102      	bne.n	845ba <xQueueGenericSend+0x10e>
   845b4:	6a3b      	ldr	r3, [r7, #32]
   845b6:	2200      	movs	r2, #0
   845b8:	645a      	str	r2, [r3, #68]	; 0x44
   845ba:	6a3b      	ldr	r3, [r7, #32]
   845bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   845be:	f1b3 3fff 	cmp.w	r3, #4294967295
   845c2:	d102      	bne.n	845ca <xQueueGenericSend+0x11e>
   845c4:	6a3b      	ldr	r3, [r7, #32]
   845c6:	2200      	movs	r2, #0
   845c8:	649a      	str	r2, [r3, #72]	; 0x48
   845ca:	4b21      	ldr	r3, [pc, #132]	; (84650 <xQueueGenericSend+0x1a4>)
   845cc:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   845ce:	f107 0214 	add.w	r2, r7, #20
   845d2:	1d3b      	adds	r3, r7, #4
   845d4:	4610      	mov	r0, r2
   845d6:	4619      	mov	r1, r3
   845d8:	4b20      	ldr	r3, [pc, #128]	; (8465c <xQueueGenericSend+0x1b0>)
   845da:	4798      	blx	r3
   845dc:	4603      	mov	r3, r0
   845de:	2b00      	cmp	r3, #0
   845e0:	d11e      	bne.n	84620 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   845e2:	6a38      	ldr	r0, [r7, #32]
   845e4:	4b1e      	ldr	r3, [pc, #120]	; (84660 <xQueueGenericSend+0x1b4>)
   845e6:	4798      	blx	r3
   845e8:	4603      	mov	r3, r0
   845ea:	2b00      	cmp	r3, #0
   845ec:	d012      	beq.n	84614 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   845ee:	6a3b      	ldr	r3, [r7, #32]
   845f0:	f103 0210 	add.w	r2, r3, #16
   845f4:	687b      	ldr	r3, [r7, #4]
   845f6:	4610      	mov	r0, r2
   845f8:	4619      	mov	r1, r3
   845fa:	4b1a      	ldr	r3, [pc, #104]	; (84664 <xQueueGenericSend+0x1b8>)
   845fc:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   845fe:	6a38      	ldr	r0, [r7, #32]
   84600:	4b19      	ldr	r3, [pc, #100]	; (84668 <xQueueGenericSend+0x1bc>)
   84602:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   84604:	4b19      	ldr	r3, [pc, #100]	; (8466c <xQueueGenericSend+0x1c0>)
   84606:	4798      	blx	r3
   84608:	4603      	mov	r3, r0
   8460a:	2b00      	cmp	r3, #0
   8460c:	d10f      	bne.n	8462e <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   8460e:	4b0f      	ldr	r3, [pc, #60]	; (8464c <xQueueGenericSend+0x1a0>)
   84610:	4798      	blx	r3
   84612:	e00c      	b.n	8462e <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   84614:	6a38      	ldr	r0, [r7, #32]
   84616:	4b14      	ldr	r3, [pc, #80]	; (84668 <xQueueGenericSend+0x1bc>)
   84618:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8461a:	4b14      	ldr	r3, [pc, #80]	; (8466c <xQueueGenericSend+0x1c0>)
   8461c:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   8461e:	e784      	b.n	8452a <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   84620:	6a38      	ldr	r0, [r7, #32]
   84622:	4b11      	ldr	r3, [pc, #68]	; (84668 <xQueueGenericSend+0x1bc>)
   84624:	4798      	blx	r3
			( void ) xTaskResumeAll();
   84626:	4b11      	ldr	r3, [pc, #68]	; (8466c <xQueueGenericSend+0x1c0>)
   84628:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8462a:	2300      	movs	r3, #0
   8462c:	e000      	b.n	84630 <xQueueGenericSend+0x184>
		}
	}
   8462e:	e77c      	b.n	8452a <xQueueGenericSend+0x7e>
}
   84630:	4618      	mov	r0, r3
   84632:	3728      	adds	r7, #40	; 0x28
   84634:	46bd      	mov	sp, r7
   84636:	bd80      	pop	{r7, pc}
   84638:	00083ea5 	.word	0x00083ea5
   8463c:	000858f1 	.word	0x000858f1
   84640:	00083e29 	.word	0x00083e29
   84644:	00084969 	.word	0x00084969
   84648:	00085419 	.word	0x00085419
   8464c:	00083e09 	.word	0x00083e09
   84650:	00083e6d 	.word	0x00083e6d
   84654:	000854d9 	.word	0x000854d9
   84658:	00084f15 	.word	0x00084f15
   8465c:	00085511 	.word	0x00085511
   84660:	00084b79 	.word	0x00084b79
   84664:	000852f9 	.word	0x000852f9
   84668:	00084a9d 	.word	0x00084a9d
   8466c:	00084f31 	.word	0x00084f31

00084670 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   84670:	b580      	push	{r7, lr}
   84672:	b088      	sub	sp, #32
   84674:	af00      	add	r7, sp, #0
   84676:	60f8      	str	r0, [r7, #12]
   84678:	60b9      	str	r1, [r7, #8]
   8467a:	607a      	str	r2, [r7, #4]
   8467c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8467e:	68fb      	ldr	r3, [r7, #12]
   84680:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   84682:	69bb      	ldr	r3, [r7, #24]
   84684:	2b00      	cmp	r3, #0
   84686:	d102      	bne.n	8468e <xQueueGenericSendFromISR+0x1e>
   84688:	4b33      	ldr	r3, [pc, #204]	; (84758 <xQueueGenericSendFromISR+0xe8>)
   8468a:	4798      	blx	r3
   8468c:	e7fe      	b.n	8468c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8468e:	68bb      	ldr	r3, [r7, #8]
   84690:	2b00      	cmp	r3, #0
   84692:	d103      	bne.n	8469c <xQueueGenericSendFromISR+0x2c>
   84694:	69bb      	ldr	r3, [r7, #24]
   84696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84698:	2b00      	cmp	r3, #0
   8469a:	d101      	bne.n	846a0 <xQueueGenericSendFromISR+0x30>
   8469c:	2301      	movs	r3, #1
   8469e:	e000      	b.n	846a2 <xQueueGenericSendFromISR+0x32>
   846a0:	2300      	movs	r3, #0
   846a2:	2b00      	cmp	r3, #0
   846a4:	d102      	bne.n	846ac <xQueueGenericSendFromISR+0x3c>
   846a6:	4b2c      	ldr	r3, [pc, #176]	; (84758 <xQueueGenericSendFromISR+0xe8>)
   846a8:	4798      	blx	r3
   846aa:	e7fe      	b.n	846aa <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   846ac:	683b      	ldr	r3, [r7, #0]
   846ae:	2b02      	cmp	r3, #2
   846b0:	d103      	bne.n	846ba <xQueueGenericSendFromISR+0x4a>
   846b2:	69bb      	ldr	r3, [r7, #24]
   846b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   846b6:	2b01      	cmp	r3, #1
   846b8:	d101      	bne.n	846be <xQueueGenericSendFromISR+0x4e>
   846ba:	2301      	movs	r3, #1
   846bc:	e000      	b.n	846c0 <xQueueGenericSendFromISR+0x50>
   846be:	2300      	movs	r3, #0
   846c0:	2b00      	cmp	r3, #0
   846c2:	d102      	bne.n	846ca <xQueueGenericSendFromISR+0x5a>
   846c4:	4b24      	ldr	r3, [pc, #144]	; (84758 <xQueueGenericSendFromISR+0xe8>)
   846c6:	4798      	blx	r3
   846c8:	e7fe      	b.n	846c8 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   846ca:	4b24      	ldr	r3, [pc, #144]	; (8475c <xQueueGenericSendFromISR+0xec>)
   846cc:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   846ce:	4b22      	ldr	r3, [pc, #136]	; (84758 <xQueueGenericSendFromISR+0xe8>)
   846d0:	4798      	blx	r3
   846d2:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   846d4:	69bb      	ldr	r3, [r7, #24]
   846d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   846d8:	69bb      	ldr	r3, [r7, #24]
   846da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   846dc:	429a      	cmp	r2, r3
   846de:	d302      	bcc.n	846e6 <xQueueGenericSendFromISR+0x76>
   846e0:	683b      	ldr	r3, [r7, #0]
   846e2:	2b02      	cmp	r3, #2
   846e4:	d12d      	bne.n	84742 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   846e6:	69b8      	ldr	r0, [r7, #24]
   846e8:	68b9      	ldr	r1, [r7, #8]
   846ea:	683a      	ldr	r2, [r7, #0]
   846ec:	4b1c      	ldr	r3, [pc, #112]	; (84760 <xQueueGenericSendFromISR+0xf0>)
   846ee:	4798      	blx	r3
   846f0:	4603      	mov	r3, r0
   846f2:	2b00      	cmp	r3, #0
   846f4:	d005      	beq.n	84702 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   846f6:	687b      	ldr	r3, [r7, #4]
   846f8:	2b00      	cmp	r3, #0
   846fa:	d002      	beq.n	84702 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   846fc:	687b      	ldr	r3, [r7, #4]
   846fe:	2201      	movs	r2, #1
   84700:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   84702:	69bb      	ldr	r3, [r7, #24]
   84704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84706:	f1b3 3fff 	cmp.w	r3, #4294967295
   8470a:	d112      	bne.n	84732 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8470c:	69bb      	ldr	r3, [r7, #24]
   8470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84710:	2b00      	cmp	r3, #0
   84712:	d013      	beq.n	8473c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   84714:	69bb      	ldr	r3, [r7, #24]
   84716:	3324      	adds	r3, #36	; 0x24
   84718:	4618      	mov	r0, r3
   8471a:	4b12      	ldr	r3, [pc, #72]	; (84764 <xQueueGenericSendFromISR+0xf4>)
   8471c:	4798      	blx	r3
   8471e:	4603      	mov	r3, r0
   84720:	2b00      	cmp	r3, #0
   84722:	d00b      	beq.n	8473c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   84724:	687b      	ldr	r3, [r7, #4]
   84726:	2b00      	cmp	r3, #0
   84728:	d008      	beq.n	8473c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   8472a:	687b      	ldr	r3, [r7, #4]
   8472c:	2201      	movs	r2, #1
   8472e:	601a      	str	r2, [r3, #0]
   84730:	e004      	b.n	8473c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   84732:	69bb      	ldr	r3, [r7, #24]
   84734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84736:	1c5a      	adds	r2, r3, #1
   84738:	69bb      	ldr	r3, [r7, #24]
   8473a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   8473c:	2301      	movs	r3, #1
   8473e:	61fb      	str	r3, [r7, #28]
   84740:	e001      	b.n	84746 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   84742:	2300      	movs	r3, #0
   84744:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   84746:	6978      	ldr	r0, [r7, #20]
   84748:	4b07      	ldr	r3, [pc, #28]	; (84768 <xQueueGenericSendFromISR+0xf8>)
   8474a:	4798      	blx	r3

	return xReturn;
   8474c:	69fb      	ldr	r3, [r7, #28]
}
   8474e:	4618      	mov	r0, r3
   84750:	3720      	adds	r7, #32
   84752:	46bd      	mov	sp, r7
   84754:	bd80      	pop	{r7, pc}
   84756:	bf00      	nop
   84758:	00083ea5 	.word	0x00083ea5
   8475c:	00083f6d 	.word	0x00083f6d
   84760:	00084969 	.word	0x00084969
   84764:	00085419 	.word	0x00085419
   84768:	00083eb9 	.word	0x00083eb9

0008476c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   8476c:	b580      	push	{r7, lr}
   8476e:	b08a      	sub	sp, #40	; 0x28
   84770:	af00      	add	r7, sp, #0
   84772:	60f8      	str	r0, [r7, #12]
   84774:	60b9      	str	r1, [r7, #8]
   84776:	607a      	str	r2, [r7, #4]
   84778:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   8477a:	2300      	movs	r3, #0
   8477c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8477e:	68fb      	ldr	r3, [r7, #12]
   84780:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   84782:	6a3b      	ldr	r3, [r7, #32]
   84784:	2b00      	cmp	r3, #0
   84786:	d102      	bne.n	8478e <xQueueGenericReceive+0x22>
   84788:	4b67      	ldr	r3, [pc, #412]	; (84928 <xQueueGenericReceive+0x1bc>)
   8478a:	4798      	blx	r3
   8478c:	e7fe      	b.n	8478c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8478e:	68bb      	ldr	r3, [r7, #8]
   84790:	2b00      	cmp	r3, #0
   84792:	d103      	bne.n	8479c <xQueueGenericReceive+0x30>
   84794:	6a3b      	ldr	r3, [r7, #32]
   84796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84798:	2b00      	cmp	r3, #0
   8479a:	d101      	bne.n	847a0 <xQueueGenericReceive+0x34>
   8479c:	2301      	movs	r3, #1
   8479e:	e000      	b.n	847a2 <xQueueGenericReceive+0x36>
   847a0:	2300      	movs	r3, #0
   847a2:	2b00      	cmp	r3, #0
   847a4:	d102      	bne.n	847ac <xQueueGenericReceive+0x40>
   847a6:	4b60      	ldr	r3, [pc, #384]	; (84928 <xQueueGenericReceive+0x1bc>)
   847a8:	4798      	blx	r3
   847aa:	e7fe      	b.n	847aa <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   847ac:	4b5f      	ldr	r3, [pc, #380]	; (8492c <xQueueGenericReceive+0x1c0>)
   847ae:	4798      	blx	r3
   847b0:	4603      	mov	r3, r0
   847b2:	2b00      	cmp	r3, #0
   847b4:	d102      	bne.n	847bc <xQueueGenericReceive+0x50>
   847b6:	687b      	ldr	r3, [r7, #4]
   847b8:	2b00      	cmp	r3, #0
   847ba:	d101      	bne.n	847c0 <xQueueGenericReceive+0x54>
   847bc:	2301      	movs	r3, #1
   847be:	e000      	b.n	847c2 <xQueueGenericReceive+0x56>
   847c0:	2300      	movs	r3, #0
   847c2:	2b00      	cmp	r3, #0
   847c4:	d102      	bne.n	847cc <xQueueGenericReceive+0x60>
   847c6:	4b58      	ldr	r3, [pc, #352]	; (84928 <xQueueGenericReceive+0x1bc>)
   847c8:	4798      	blx	r3
   847ca:	e7fe      	b.n	847ca <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   847cc:	4b58      	ldr	r3, [pc, #352]	; (84930 <xQueueGenericReceive+0x1c4>)
   847ce:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   847d0:	6a3b      	ldr	r3, [r7, #32]
   847d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   847d4:	2b00      	cmp	r3, #0
   847d6:	d03b      	beq.n	84850 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   847d8:	6a3b      	ldr	r3, [r7, #32]
   847da:	68db      	ldr	r3, [r3, #12]
   847dc:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   847de:	6a38      	ldr	r0, [r7, #32]
   847e0:	68b9      	ldr	r1, [r7, #8]
   847e2:	4b54      	ldr	r3, [pc, #336]	; (84934 <xQueueGenericReceive+0x1c8>)
   847e4:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   847e6:	683b      	ldr	r3, [r7, #0]
   847e8:	2b00      	cmp	r3, #0
   847ea:	d11c      	bne.n	84826 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   847ec:	6a3b      	ldr	r3, [r7, #32]
   847ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   847f0:	1e5a      	subs	r2, r3, #1
   847f2:	6a3b      	ldr	r3, [r7, #32]
   847f4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   847f6:	6a3b      	ldr	r3, [r7, #32]
   847f8:	681b      	ldr	r3, [r3, #0]
   847fa:	2b00      	cmp	r3, #0
   847fc:	d104      	bne.n	84808 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   847fe:	4b4e      	ldr	r3, [pc, #312]	; (84938 <xQueueGenericReceive+0x1cc>)
   84800:	4798      	blx	r3
   84802:	4602      	mov	r2, r0
   84804:	6a3b      	ldr	r3, [r7, #32]
   84806:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   84808:	6a3b      	ldr	r3, [r7, #32]
   8480a:	691b      	ldr	r3, [r3, #16]
   8480c:	2b00      	cmp	r3, #0
   8480e:	d01b      	beq.n	84848 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   84810:	6a3b      	ldr	r3, [r7, #32]
   84812:	3310      	adds	r3, #16
   84814:	4618      	mov	r0, r3
   84816:	4b49      	ldr	r3, [pc, #292]	; (8493c <xQueueGenericReceive+0x1d0>)
   84818:	4798      	blx	r3
   8481a:	4603      	mov	r3, r0
   8481c:	2b01      	cmp	r3, #1
   8481e:	d113      	bne.n	84848 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   84820:	4b47      	ldr	r3, [pc, #284]	; (84940 <xQueueGenericReceive+0x1d4>)
   84822:	4798      	blx	r3
   84824:	e010      	b.n	84848 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   84826:	6a3b      	ldr	r3, [r7, #32]
   84828:	69fa      	ldr	r2, [r7, #28]
   8482a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8482c:	6a3b      	ldr	r3, [r7, #32]
   8482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84830:	2b00      	cmp	r3, #0
   84832:	d009      	beq.n	84848 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   84834:	6a3b      	ldr	r3, [r7, #32]
   84836:	3324      	adds	r3, #36	; 0x24
   84838:	4618      	mov	r0, r3
   8483a:	4b40      	ldr	r3, [pc, #256]	; (8493c <xQueueGenericReceive+0x1d0>)
   8483c:	4798      	blx	r3
   8483e:	4603      	mov	r3, r0
   84840:	2b00      	cmp	r3, #0
   84842:	d001      	beq.n	84848 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   84844:	4b3e      	ldr	r3, [pc, #248]	; (84940 <xQueueGenericReceive+0x1d4>)
   84846:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   84848:	4b3e      	ldr	r3, [pc, #248]	; (84944 <xQueueGenericReceive+0x1d8>)
   8484a:	4798      	blx	r3
				return pdPASS;
   8484c:	2301      	movs	r3, #1
   8484e:	e066      	b.n	8491e <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   84850:	687b      	ldr	r3, [r7, #4]
   84852:	2b00      	cmp	r3, #0
   84854:	d103      	bne.n	8485e <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   84856:	4b3b      	ldr	r3, [pc, #236]	; (84944 <xQueueGenericReceive+0x1d8>)
   84858:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8485a:	2300      	movs	r3, #0
   8485c:	e05f      	b.n	8491e <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   8485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   84860:	2b00      	cmp	r3, #0
   84862:	d106      	bne.n	84872 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   84864:	f107 0314 	add.w	r3, r7, #20
   84868:	4618      	mov	r0, r3
   8486a:	4b37      	ldr	r3, [pc, #220]	; (84948 <xQueueGenericReceive+0x1dc>)
   8486c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8486e:	2301      	movs	r3, #1
   84870:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   84872:	4b34      	ldr	r3, [pc, #208]	; (84944 <xQueueGenericReceive+0x1d8>)
   84874:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   84876:	4b35      	ldr	r3, [pc, #212]	; (8494c <xQueueGenericReceive+0x1e0>)
   84878:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8487a:	4b2d      	ldr	r3, [pc, #180]	; (84930 <xQueueGenericReceive+0x1c4>)
   8487c:	4798      	blx	r3
   8487e:	6a3b      	ldr	r3, [r7, #32]
   84880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84882:	f1b3 3fff 	cmp.w	r3, #4294967295
   84886:	d102      	bne.n	8488e <xQueueGenericReceive+0x122>
   84888:	6a3b      	ldr	r3, [r7, #32]
   8488a:	2200      	movs	r2, #0
   8488c:	645a      	str	r2, [r3, #68]	; 0x44
   8488e:	6a3b      	ldr	r3, [r7, #32]
   84890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84892:	f1b3 3fff 	cmp.w	r3, #4294967295
   84896:	d102      	bne.n	8489e <xQueueGenericReceive+0x132>
   84898:	6a3b      	ldr	r3, [r7, #32]
   8489a:	2200      	movs	r2, #0
   8489c:	649a      	str	r2, [r3, #72]	; 0x48
   8489e:	4b29      	ldr	r3, [pc, #164]	; (84944 <xQueueGenericReceive+0x1d8>)
   848a0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   848a2:	f107 0214 	add.w	r2, r7, #20
   848a6:	1d3b      	adds	r3, r7, #4
   848a8:	4610      	mov	r0, r2
   848aa:	4619      	mov	r1, r3
   848ac:	4b28      	ldr	r3, [pc, #160]	; (84950 <xQueueGenericReceive+0x1e4>)
   848ae:	4798      	blx	r3
   848b0:	4603      	mov	r3, r0
   848b2:	2b00      	cmp	r3, #0
   848b4:	d12b      	bne.n	8490e <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   848b6:	6a38      	ldr	r0, [r7, #32]
   848b8:	4b26      	ldr	r3, [pc, #152]	; (84954 <xQueueGenericReceive+0x1e8>)
   848ba:	4798      	blx	r3
   848bc:	4603      	mov	r3, r0
   848be:	2b00      	cmp	r3, #0
   848c0:	d01f      	beq.n	84902 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   848c2:	6a3b      	ldr	r3, [r7, #32]
   848c4:	681b      	ldr	r3, [r3, #0]
   848c6:	2b00      	cmp	r3, #0
   848c8:	d108      	bne.n	848dc <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   848ca:	4b19      	ldr	r3, [pc, #100]	; (84930 <xQueueGenericReceive+0x1c4>)
   848cc:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   848ce:	6a3b      	ldr	r3, [r7, #32]
   848d0:	685b      	ldr	r3, [r3, #4]
   848d2:	4618      	mov	r0, r3
   848d4:	4b20      	ldr	r3, [pc, #128]	; (84958 <xQueueGenericReceive+0x1ec>)
   848d6:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   848d8:	4b1a      	ldr	r3, [pc, #104]	; (84944 <xQueueGenericReceive+0x1d8>)
   848da:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   848dc:	6a3b      	ldr	r3, [r7, #32]
   848de:	f103 0224 	add.w	r2, r3, #36	; 0x24
   848e2:	687b      	ldr	r3, [r7, #4]
   848e4:	4610      	mov	r0, r2
   848e6:	4619      	mov	r1, r3
   848e8:	4b1c      	ldr	r3, [pc, #112]	; (8495c <xQueueGenericReceive+0x1f0>)
   848ea:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   848ec:	6a38      	ldr	r0, [r7, #32]
   848ee:	4b1c      	ldr	r3, [pc, #112]	; (84960 <xQueueGenericReceive+0x1f4>)
   848f0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   848f2:	4b1c      	ldr	r3, [pc, #112]	; (84964 <xQueueGenericReceive+0x1f8>)
   848f4:	4798      	blx	r3
   848f6:	4603      	mov	r3, r0
   848f8:	2b00      	cmp	r3, #0
   848fa:	d10f      	bne.n	8491c <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   848fc:	4b10      	ldr	r3, [pc, #64]	; (84940 <xQueueGenericReceive+0x1d4>)
   848fe:	4798      	blx	r3
   84900:	e00c      	b.n	8491c <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   84902:	6a38      	ldr	r0, [r7, #32]
   84904:	4b16      	ldr	r3, [pc, #88]	; (84960 <xQueueGenericReceive+0x1f4>)
   84906:	4798      	blx	r3
				( void ) xTaskResumeAll();
   84908:	4b16      	ldr	r3, [pc, #88]	; (84964 <xQueueGenericReceive+0x1f8>)
   8490a:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   8490c:	e75e      	b.n	847cc <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8490e:	6a38      	ldr	r0, [r7, #32]
   84910:	4b13      	ldr	r3, [pc, #76]	; (84960 <xQueueGenericReceive+0x1f4>)
   84912:	4798      	blx	r3
			( void ) xTaskResumeAll();
   84914:	4b13      	ldr	r3, [pc, #76]	; (84964 <xQueueGenericReceive+0x1f8>)
   84916:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   84918:	2300      	movs	r3, #0
   8491a:	e000      	b.n	8491e <xQueueGenericReceive+0x1b2>
		}
	}
   8491c:	e756      	b.n	847cc <xQueueGenericReceive+0x60>
}
   8491e:	4618      	mov	r0, r3
   84920:	3728      	adds	r7, #40	; 0x28
   84922:	46bd      	mov	sp, r7
   84924:	bd80      	pop	{r7, pc}
   84926:	bf00      	nop
   84928:	00083ea5 	.word	0x00083ea5
   8492c:	000858f1 	.word	0x000858f1
   84930:	00083e29 	.word	0x00083e29
   84934:	00084a4d 	.word	0x00084a4d
   84938:	00085b05 	.word	0x00085b05
   8493c:	00085419 	.word	0x00085419
   84940:	00083e09 	.word	0x00083e09
   84944:	00083e6d 	.word	0x00083e6d
   84948:	000854d9 	.word	0x000854d9
   8494c:	00084f15 	.word	0x00084f15
   84950:	00085511 	.word	0x00085511
   84954:	00084b45 	.word	0x00084b45
   84958:	0008592d 	.word	0x0008592d
   8495c:	000852f9 	.word	0x000852f9
   84960:	00084a9d 	.word	0x00084a9d
   84964:	00084f31 	.word	0x00084f31

00084968 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   84968:	b580      	push	{r7, lr}
   8496a:	b086      	sub	sp, #24
   8496c:	af00      	add	r7, sp, #0
   8496e:	60f8      	str	r0, [r7, #12]
   84970:	60b9      	str	r1, [r7, #8]
   84972:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   84974:	2300      	movs	r3, #0
   84976:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   84978:	68fb      	ldr	r3, [r7, #12]
   8497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8497c:	2b00      	cmp	r3, #0
   8497e:	d10d      	bne.n	8499c <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   84980:	68fb      	ldr	r3, [r7, #12]
   84982:	681b      	ldr	r3, [r3, #0]
   84984:	2b00      	cmp	r3, #0
   84986:	d152      	bne.n	84a2e <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   84988:	68fb      	ldr	r3, [r7, #12]
   8498a:	685b      	ldr	r3, [r3, #4]
   8498c:	4618      	mov	r0, r3
   8498e:	4b2d      	ldr	r3, [pc, #180]	; (84a44 <prvCopyDataToQueue+0xdc>)
   84990:	4798      	blx	r3
   84992:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   84994:	68fb      	ldr	r3, [r7, #12]
   84996:	2200      	movs	r2, #0
   84998:	605a      	str	r2, [r3, #4]
   8499a:	e048      	b.n	84a2e <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   8499c:	687b      	ldr	r3, [r7, #4]
   8499e:	2b00      	cmp	r3, #0
   849a0:	d11a      	bne.n	849d8 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   849a2:	68fb      	ldr	r3, [r7, #12]
   849a4:	689a      	ldr	r2, [r3, #8]
   849a6:	68fb      	ldr	r3, [r7, #12]
   849a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   849aa:	4610      	mov	r0, r2
   849ac:	68b9      	ldr	r1, [r7, #8]
   849ae:	461a      	mov	r2, r3
   849b0:	4b25      	ldr	r3, [pc, #148]	; (84a48 <prvCopyDataToQueue+0xe0>)
   849b2:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   849b4:	68fb      	ldr	r3, [r7, #12]
   849b6:	689a      	ldr	r2, [r3, #8]
   849b8:	68fb      	ldr	r3, [r7, #12]
   849ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   849bc:	441a      	add	r2, r3
   849be:	68fb      	ldr	r3, [r7, #12]
   849c0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   849c2:	68fb      	ldr	r3, [r7, #12]
   849c4:	689a      	ldr	r2, [r3, #8]
   849c6:	68fb      	ldr	r3, [r7, #12]
   849c8:	685b      	ldr	r3, [r3, #4]
   849ca:	429a      	cmp	r2, r3
   849cc:	d32f      	bcc.n	84a2e <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   849ce:	68fb      	ldr	r3, [r7, #12]
   849d0:	681a      	ldr	r2, [r3, #0]
   849d2:	68fb      	ldr	r3, [r7, #12]
   849d4:	609a      	str	r2, [r3, #8]
   849d6:	e02a      	b.n	84a2e <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   849d8:	68fb      	ldr	r3, [r7, #12]
   849da:	68da      	ldr	r2, [r3, #12]
   849dc:	68fb      	ldr	r3, [r7, #12]
   849de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   849e0:	4610      	mov	r0, r2
   849e2:	68b9      	ldr	r1, [r7, #8]
   849e4:	461a      	mov	r2, r3
   849e6:	4b18      	ldr	r3, [pc, #96]	; (84a48 <prvCopyDataToQueue+0xe0>)
   849e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   849ea:	68fb      	ldr	r3, [r7, #12]
   849ec:	68da      	ldr	r2, [r3, #12]
   849ee:	68fb      	ldr	r3, [r7, #12]
   849f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   849f2:	425b      	negs	r3, r3
   849f4:	441a      	add	r2, r3
   849f6:	68fb      	ldr	r3, [r7, #12]
   849f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   849fa:	68fb      	ldr	r3, [r7, #12]
   849fc:	68da      	ldr	r2, [r3, #12]
   849fe:	68fb      	ldr	r3, [r7, #12]
   84a00:	681b      	ldr	r3, [r3, #0]
   84a02:	429a      	cmp	r2, r3
   84a04:	d207      	bcs.n	84a16 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   84a06:	68fb      	ldr	r3, [r7, #12]
   84a08:	685a      	ldr	r2, [r3, #4]
   84a0a:	68fb      	ldr	r3, [r7, #12]
   84a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84a0e:	425b      	negs	r3, r3
   84a10:	441a      	add	r2, r3
   84a12:	68fb      	ldr	r3, [r7, #12]
   84a14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   84a16:	687b      	ldr	r3, [r7, #4]
   84a18:	2b02      	cmp	r3, #2
   84a1a:	d108      	bne.n	84a2e <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   84a1c:	68fb      	ldr	r3, [r7, #12]
   84a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84a20:	2b00      	cmp	r3, #0
   84a22:	d004      	beq.n	84a2e <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   84a24:	68fb      	ldr	r3, [r7, #12]
   84a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84a28:	1e5a      	subs	r2, r3, #1
   84a2a:	68fb      	ldr	r3, [r7, #12]
   84a2c:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   84a2e:	68fb      	ldr	r3, [r7, #12]
   84a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84a32:	1c5a      	adds	r2, r3, #1
   84a34:	68fb      	ldr	r3, [r7, #12]
   84a36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   84a38:	697b      	ldr	r3, [r7, #20]
}
   84a3a:	4618      	mov	r0, r3
   84a3c:	3718      	adds	r7, #24
   84a3e:	46bd      	mov	sp, r7
   84a40:	bd80      	pop	{r7, pc}
   84a42:	bf00      	nop
   84a44:	00085a21 	.word	0x00085a21
   84a48:	00087381 	.word	0x00087381

00084a4c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   84a4c:	b580      	push	{r7, lr}
   84a4e:	b082      	sub	sp, #8
   84a50:	af00      	add	r7, sp, #0
   84a52:	6078      	str	r0, [r7, #4]
   84a54:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   84a56:	687b      	ldr	r3, [r7, #4]
   84a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84a5a:	2b00      	cmp	r3, #0
   84a5c:	d019      	beq.n	84a92 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   84a5e:	687b      	ldr	r3, [r7, #4]
   84a60:	68da      	ldr	r2, [r3, #12]
   84a62:	687b      	ldr	r3, [r7, #4]
   84a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84a66:	441a      	add	r2, r3
   84a68:	687b      	ldr	r3, [r7, #4]
   84a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   84a6c:	687b      	ldr	r3, [r7, #4]
   84a6e:	68da      	ldr	r2, [r3, #12]
   84a70:	687b      	ldr	r3, [r7, #4]
   84a72:	685b      	ldr	r3, [r3, #4]
   84a74:	429a      	cmp	r2, r3
   84a76:	d303      	bcc.n	84a80 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   84a78:	687b      	ldr	r3, [r7, #4]
   84a7a:	681a      	ldr	r2, [r3, #0]
   84a7c:	687b      	ldr	r3, [r7, #4]
   84a7e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   84a80:	687b      	ldr	r3, [r7, #4]
   84a82:	68da      	ldr	r2, [r3, #12]
   84a84:	687b      	ldr	r3, [r7, #4]
   84a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84a88:	6838      	ldr	r0, [r7, #0]
   84a8a:	4611      	mov	r1, r2
   84a8c:	461a      	mov	r2, r3
   84a8e:	4b02      	ldr	r3, [pc, #8]	; (84a98 <prvCopyDataFromQueue+0x4c>)
   84a90:	4798      	blx	r3
	}
}
   84a92:	3708      	adds	r7, #8
   84a94:	46bd      	mov	sp, r7
   84a96:	bd80      	pop	{r7, pc}
   84a98:	00087381 	.word	0x00087381

00084a9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   84a9c:	b580      	push	{r7, lr}
   84a9e:	b082      	sub	sp, #8
   84aa0:	af00      	add	r7, sp, #0
   84aa2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   84aa4:	4b23      	ldr	r3, [pc, #140]	; (84b34 <prvUnlockQueue+0x98>)
   84aa6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   84aa8:	e014      	b.n	84ad4 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   84aaa:	687b      	ldr	r3, [r7, #4]
   84aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84aae:	2b00      	cmp	r3, #0
   84ab0:	d00a      	beq.n	84ac8 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   84ab2:	687b      	ldr	r3, [r7, #4]
   84ab4:	3324      	adds	r3, #36	; 0x24
   84ab6:	4618      	mov	r0, r3
   84ab8:	4b1f      	ldr	r3, [pc, #124]	; (84b38 <prvUnlockQueue+0x9c>)
   84aba:	4798      	blx	r3
   84abc:	4603      	mov	r3, r0
   84abe:	2b00      	cmp	r3, #0
   84ac0:	d003      	beq.n	84aca <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   84ac2:	4b1e      	ldr	r3, [pc, #120]	; (84b3c <prvUnlockQueue+0xa0>)
   84ac4:	4798      	blx	r3
   84ac6:	e000      	b.n	84aca <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   84ac8:	e008      	b.n	84adc <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   84aca:	687b      	ldr	r3, [r7, #4]
   84acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84ace:	1e5a      	subs	r2, r3, #1
   84ad0:	687b      	ldr	r3, [r7, #4]
   84ad2:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   84ad4:	687b      	ldr	r3, [r7, #4]
   84ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84ad8:	2b00      	cmp	r3, #0
   84ada:	dce6      	bgt.n	84aaa <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   84adc:	687b      	ldr	r3, [r7, #4]
   84ade:	f04f 32ff 	mov.w	r2, #4294967295
   84ae2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   84ae4:	4b16      	ldr	r3, [pc, #88]	; (84b40 <prvUnlockQueue+0xa4>)
   84ae6:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   84ae8:	4b12      	ldr	r3, [pc, #72]	; (84b34 <prvUnlockQueue+0x98>)
   84aea:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   84aec:	e014      	b.n	84b18 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   84aee:	687b      	ldr	r3, [r7, #4]
   84af0:	691b      	ldr	r3, [r3, #16]
   84af2:	2b00      	cmp	r3, #0
   84af4:	d00f      	beq.n	84b16 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   84af6:	687b      	ldr	r3, [r7, #4]
   84af8:	3310      	adds	r3, #16
   84afa:	4618      	mov	r0, r3
   84afc:	4b0e      	ldr	r3, [pc, #56]	; (84b38 <prvUnlockQueue+0x9c>)
   84afe:	4798      	blx	r3
   84b00:	4603      	mov	r3, r0
   84b02:	2b00      	cmp	r3, #0
   84b04:	d001      	beq.n	84b0a <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   84b06:	4b0d      	ldr	r3, [pc, #52]	; (84b3c <prvUnlockQueue+0xa0>)
   84b08:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   84b0a:	687b      	ldr	r3, [r7, #4]
   84b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84b0e:	1e5a      	subs	r2, r3, #1
   84b10:	687b      	ldr	r3, [r7, #4]
   84b12:	645a      	str	r2, [r3, #68]	; 0x44
   84b14:	e000      	b.n	84b18 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   84b16:	e003      	b.n	84b20 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   84b18:	687b      	ldr	r3, [r7, #4]
   84b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84b1c:	2b00      	cmp	r3, #0
   84b1e:	dce6      	bgt.n	84aee <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   84b20:	687b      	ldr	r3, [r7, #4]
   84b22:	f04f 32ff 	mov.w	r2, #4294967295
   84b26:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   84b28:	4b05      	ldr	r3, [pc, #20]	; (84b40 <prvUnlockQueue+0xa4>)
   84b2a:	4798      	blx	r3
}
   84b2c:	3708      	adds	r7, #8
   84b2e:	46bd      	mov	sp, r7
   84b30:	bd80      	pop	{r7, pc}
   84b32:	bf00      	nop
   84b34:	00083e29 	.word	0x00083e29
   84b38:	00085419 	.word	0x00085419
   84b3c:	000855c1 	.word	0x000855c1
   84b40:	00083e6d 	.word	0x00083e6d

00084b44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   84b44:	b580      	push	{r7, lr}
   84b46:	b084      	sub	sp, #16
   84b48:	af00      	add	r7, sp, #0
   84b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   84b4c:	4b08      	ldr	r3, [pc, #32]	; (84b70 <prvIsQueueEmpty+0x2c>)
   84b4e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   84b50:	687b      	ldr	r3, [r7, #4]
   84b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84b54:	2b00      	cmp	r3, #0
   84b56:	d102      	bne.n	84b5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   84b58:	2301      	movs	r3, #1
   84b5a:	60fb      	str	r3, [r7, #12]
   84b5c:	e001      	b.n	84b62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   84b5e:	2300      	movs	r3, #0
   84b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84b62:	4b04      	ldr	r3, [pc, #16]	; (84b74 <prvIsQueueEmpty+0x30>)
   84b64:	4798      	blx	r3

	return xReturn;
   84b66:	68fb      	ldr	r3, [r7, #12]
}
   84b68:	4618      	mov	r0, r3
   84b6a:	3710      	adds	r7, #16
   84b6c:	46bd      	mov	sp, r7
   84b6e:	bd80      	pop	{r7, pc}
   84b70:	00083e29 	.word	0x00083e29
   84b74:	00083e6d 	.word	0x00083e6d

00084b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   84b78:	b580      	push	{r7, lr}
   84b7a:	b084      	sub	sp, #16
   84b7c:	af00      	add	r7, sp, #0
   84b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   84b80:	4b09      	ldr	r3, [pc, #36]	; (84ba8 <prvIsQueueFull+0x30>)
   84b82:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   84b84:	687b      	ldr	r3, [r7, #4]
   84b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   84b88:	687b      	ldr	r3, [r7, #4]
   84b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   84b8c:	429a      	cmp	r2, r3
   84b8e:	d102      	bne.n	84b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   84b90:	2301      	movs	r3, #1
   84b92:	60fb      	str	r3, [r7, #12]
   84b94:	e001      	b.n	84b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   84b96:	2300      	movs	r3, #0
   84b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   84b9a:	4b04      	ldr	r3, [pc, #16]	; (84bac <prvIsQueueFull+0x34>)
   84b9c:	4798      	blx	r3

	return xReturn;
   84b9e:	68fb      	ldr	r3, [r7, #12]
}
   84ba0:	4618      	mov	r0, r3
   84ba2:	3710      	adds	r7, #16
   84ba4:	46bd      	mov	sp, r7
   84ba6:	bd80      	pop	{r7, pc}
   84ba8:	00083e29 	.word	0x00083e29
   84bac:	00083e6d 	.word	0x00083e6d

00084bb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   84bb0:	b580      	push	{r7, lr}
   84bb2:	b084      	sub	sp, #16
   84bb4:	af00      	add	r7, sp, #0
   84bb6:	6078      	str	r0, [r7, #4]
   84bb8:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   84bba:	687b      	ldr	r3, [r7, #4]
   84bbc:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   84bbe:	4b12      	ldr	r3, [pc, #72]	; (84c08 <vQueueWaitForMessageRestricted+0x58>)
   84bc0:	4798      	blx	r3
   84bc2:	68fb      	ldr	r3, [r7, #12]
   84bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
   84bca:	d102      	bne.n	84bd2 <vQueueWaitForMessageRestricted+0x22>
   84bcc:	68fb      	ldr	r3, [r7, #12]
   84bce:	2200      	movs	r2, #0
   84bd0:	645a      	str	r2, [r3, #68]	; 0x44
   84bd2:	68fb      	ldr	r3, [r7, #12]
   84bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   84bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   84bda:	d102      	bne.n	84be2 <vQueueWaitForMessageRestricted+0x32>
   84bdc:	68fb      	ldr	r3, [r7, #12]
   84bde:	2200      	movs	r2, #0
   84be0:	649a      	str	r2, [r3, #72]	; 0x48
   84be2:	4b0a      	ldr	r3, [pc, #40]	; (84c0c <vQueueWaitForMessageRestricted+0x5c>)
   84be4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   84be6:	68fb      	ldr	r3, [r7, #12]
   84be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   84bea:	2b00      	cmp	r3, #0
   84bec:	d105      	bne.n	84bfa <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   84bee:	68fb      	ldr	r3, [r7, #12]
   84bf0:	3324      	adds	r3, #36	; 0x24
   84bf2:	4618      	mov	r0, r3
   84bf4:	6839      	ldr	r1, [r7, #0]
   84bf6:	4b06      	ldr	r3, [pc, #24]	; (84c10 <vQueueWaitForMessageRestricted+0x60>)
   84bf8:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   84bfa:	68f8      	ldr	r0, [r7, #12]
   84bfc:	4b05      	ldr	r3, [pc, #20]	; (84c14 <vQueueWaitForMessageRestricted+0x64>)
   84bfe:	4798      	blx	r3
	}
   84c00:	3710      	adds	r7, #16
   84c02:	46bd      	mov	sp, r7
   84c04:	bd80      	pop	{r7, pc}
   84c06:	bf00      	nop
   84c08:	00083e29 	.word	0x00083e29
   84c0c:	00083e6d 	.word	0x00083e6d
   84c10:	00085399 	.word	0x00085399
   84c14:	00084a9d 	.word	0x00084a9d

00084c18 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84c18:	b590      	push	{r4, r7, lr}
   84c1a:	b08b      	sub	sp, #44	; 0x2c
   84c1c:	af02      	add	r7, sp, #8
   84c1e:	60f8      	str	r0, [r7, #12]
   84c20:	60b9      	str	r1, [r7, #8]
   84c22:	603b      	str	r3, [r7, #0]
   84c24:	4613      	mov	r3, r2
   84c26:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   84c28:	68fb      	ldr	r3, [r7, #12]
   84c2a:	2b00      	cmp	r3, #0
   84c2c:	d102      	bne.n	84c34 <xTaskGenericCreate+0x1c>
   84c2e:	4b4b      	ldr	r3, [pc, #300]	; (84d5c <xTaskGenericCreate+0x144>)
   84c30:	4798      	blx	r3
   84c32:	e7fe      	b.n	84c32 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   84c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84c36:	2b04      	cmp	r3, #4
   84c38:	d902      	bls.n	84c40 <xTaskGenericCreate+0x28>
   84c3a:	4b48      	ldr	r3, [pc, #288]	; (84d5c <xTaskGenericCreate+0x144>)
   84c3c:	4798      	blx	r3
   84c3e:	e7fe      	b.n	84c3e <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   84c40:	88fb      	ldrh	r3, [r7, #6]
   84c42:	4618      	mov	r0, r3
   84c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   84c46:	4b46      	ldr	r3, [pc, #280]	; (84d60 <xTaskGenericCreate+0x148>)
   84c48:	4798      	blx	r3
   84c4a:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   84c4c:	69bb      	ldr	r3, [r7, #24]
   84c4e:	2b00      	cmp	r3, #0
   84c50:	d06d      	beq.n	84d2e <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   84c52:	69bb      	ldr	r3, [r7, #24]
   84c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84c56:	88fb      	ldrh	r3, [r7, #6]
   84c58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   84c5c:	3b01      	subs	r3, #1
   84c5e:	009b      	lsls	r3, r3, #2
   84c60:	4413      	add	r3, r2
   84c62:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   84c64:	697b      	ldr	r3, [r7, #20]
   84c66:	f023 0307 	bic.w	r3, r3, #7
   84c6a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   84c6c:	697b      	ldr	r3, [r7, #20]
   84c6e:	f003 0307 	and.w	r3, r3, #7
   84c72:	2b00      	cmp	r3, #0
   84c74:	d002      	beq.n	84c7c <xTaskGenericCreate+0x64>
   84c76:	4b39      	ldr	r3, [pc, #228]	; (84d5c <xTaskGenericCreate+0x144>)
   84c78:	4798      	blx	r3
   84c7a:	e7fe      	b.n	84c7a <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   84c7c:	88fb      	ldrh	r3, [r7, #6]
   84c7e:	9300      	str	r3, [sp, #0]
   84c80:	69b8      	ldr	r0, [r7, #24]
   84c82:	68b9      	ldr	r1, [r7, #8]
   84c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   84c88:	4c36      	ldr	r4, [pc, #216]	; (84d64 <xTaskGenericCreate+0x14c>)
   84c8a:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   84c8c:	6978      	ldr	r0, [r7, #20]
   84c8e:	68f9      	ldr	r1, [r7, #12]
   84c90:	683a      	ldr	r2, [r7, #0]
   84c92:	4b35      	ldr	r3, [pc, #212]	; (84d68 <xTaskGenericCreate+0x150>)
   84c94:	4798      	blx	r3
   84c96:	4602      	mov	r2, r0
   84c98:	69bb      	ldr	r3, [r7, #24]
   84c9a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   84c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   84c9e:	2b00      	cmp	r3, #0
   84ca0:	d002      	beq.n	84ca8 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   84ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   84ca4:	69ba      	ldr	r2, [r7, #24]
   84ca6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   84ca8:	4b30      	ldr	r3, [pc, #192]	; (84d6c <xTaskGenericCreate+0x154>)
   84caa:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   84cac:	4b30      	ldr	r3, [pc, #192]	; (84d70 <xTaskGenericCreate+0x158>)
   84cae:	681b      	ldr	r3, [r3, #0]
   84cb0:	1c5a      	adds	r2, r3, #1
   84cb2:	4b2f      	ldr	r3, [pc, #188]	; (84d70 <xTaskGenericCreate+0x158>)
   84cb4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   84cb6:	4b2f      	ldr	r3, [pc, #188]	; (84d74 <xTaskGenericCreate+0x15c>)
   84cb8:	681b      	ldr	r3, [r3, #0]
   84cba:	2b00      	cmp	r3, #0
   84cbc:	d109      	bne.n	84cd2 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   84cbe:	4b2d      	ldr	r3, [pc, #180]	; (84d74 <xTaskGenericCreate+0x15c>)
   84cc0:	69ba      	ldr	r2, [r7, #24]
   84cc2:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   84cc4:	4b2a      	ldr	r3, [pc, #168]	; (84d70 <xTaskGenericCreate+0x158>)
   84cc6:	681b      	ldr	r3, [r3, #0]
   84cc8:	2b01      	cmp	r3, #1
   84cca:	d10f      	bne.n	84cec <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   84ccc:	4b2a      	ldr	r3, [pc, #168]	; (84d78 <xTaskGenericCreate+0x160>)
   84cce:	4798      	blx	r3
   84cd0:	e00c      	b.n	84cec <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   84cd2:	4b2a      	ldr	r3, [pc, #168]	; (84d7c <xTaskGenericCreate+0x164>)
   84cd4:	681b      	ldr	r3, [r3, #0]
   84cd6:	2b00      	cmp	r3, #0
   84cd8:	d108      	bne.n	84cec <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   84cda:	4b26      	ldr	r3, [pc, #152]	; (84d74 <xTaskGenericCreate+0x15c>)
   84cdc:	681b      	ldr	r3, [r3, #0]
   84cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84ce2:	429a      	cmp	r2, r3
   84ce4:	d802      	bhi.n	84cec <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   84ce6:	4b23      	ldr	r3, [pc, #140]	; (84d74 <xTaskGenericCreate+0x15c>)
   84ce8:	69ba      	ldr	r2, [r7, #24]
   84cea:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   84cec:	4b24      	ldr	r3, [pc, #144]	; (84d80 <xTaskGenericCreate+0x168>)
   84cee:	681b      	ldr	r3, [r3, #0]
   84cf0:	1c5a      	adds	r2, r3, #1
   84cf2:	4b23      	ldr	r3, [pc, #140]	; (84d80 <xTaskGenericCreate+0x168>)
   84cf4:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   84cf6:	69bb      	ldr	r3, [r7, #24]
   84cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84cfa:	2201      	movs	r2, #1
   84cfc:	409a      	lsls	r2, r3
   84cfe:	4b21      	ldr	r3, [pc, #132]	; (84d84 <xTaskGenericCreate+0x16c>)
   84d00:	681b      	ldr	r3, [r3, #0]
   84d02:	431a      	orrs	r2, r3
   84d04:	4b1f      	ldr	r3, [pc, #124]	; (84d84 <xTaskGenericCreate+0x16c>)
   84d06:	601a      	str	r2, [r3, #0]
   84d08:	69bb      	ldr	r3, [r7, #24]
   84d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84d0c:	4613      	mov	r3, r2
   84d0e:	009b      	lsls	r3, r3, #2
   84d10:	4413      	add	r3, r2
   84d12:	009b      	lsls	r3, r3, #2
   84d14:	4a1c      	ldr	r2, [pc, #112]	; (84d88 <xTaskGenericCreate+0x170>)
   84d16:	441a      	add	r2, r3
   84d18:	69bb      	ldr	r3, [r7, #24]
   84d1a:	3304      	adds	r3, #4
   84d1c:	4610      	mov	r0, r2
   84d1e:	4619      	mov	r1, r3
   84d20:	4b1a      	ldr	r3, [pc, #104]	; (84d8c <xTaskGenericCreate+0x174>)
   84d22:	4798      	blx	r3

			xReturn = pdPASS;
   84d24:	2301      	movs	r3, #1
   84d26:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   84d28:	4b19      	ldr	r3, [pc, #100]	; (84d90 <xTaskGenericCreate+0x178>)
   84d2a:	4798      	blx	r3
   84d2c:	e002      	b.n	84d34 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   84d2e:	f04f 33ff 	mov.w	r3, #4294967295
   84d32:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   84d34:	69fb      	ldr	r3, [r7, #28]
   84d36:	2b01      	cmp	r3, #1
   84d38:	d10b      	bne.n	84d52 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   84d3a:	4b10      	ldr	r3, [pc, #64]	; (84d7c <xTaskGenericCreate+0x164>)
   84d3c:	681b      	ldr	r3, [r3, #0]
   84d3e:	2b00      	cmp	r3, #0
   84d40:	d007      	beq.n	84d52 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   84d42:	4b0c      	ldr	r3, [pc, #48]	; (84d74 <xTaskGenericCreate+0x15c>)
   84d44:	681b      	ldr	r3, [r3, #0]
   84d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84d4a:	429a      	cmp	r2, r3
   84d4c:	d201      	bcs.n	84d52 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   84d4e:	4b11      	ldr	r3, [pc, #68]	; (84d94 <xTaskGenericCreate+0x17c>)
   84d50:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   84d52:	69fb      	ldr	r3, [r7, #28]
}
   84d54:	4618      	mov	r0, r3
   84d56:	3724      	adds	r7, #36	; 0x24
   84d58:	46bd      	mov	sp, r7
   84d5a:	bd90      	pop	{r4, r7, pc}
   84d5c:	00083ea5 	.word	0x00083ea5
   84d60:	00085815 	.word	0x00085815
   84d64:	00085601 	.word	0x00085601
   84d68:	00083c81 	.word	0x00083c81
   84d6c:	00083e29 	.word	0x00083e29
   84d70:	2007a5e0 	.word	0x2007a5e0
   84d74:	2007a508 	.word	0x2007a508
   84d78:	00085699 	.word	0x00085699
   84d7c:	2007a5ec 	.word	0x2007a5ec
   84d80:	2007a5fc 	.word	0x2007a5fc
   84d84:	2007a5e8 	.word	0x2007a5e8
   84d88:	2007a50c 	.word	0x2007a50c
   84d8c:	00083b75 	.word	0x00083b75
   84d90:	00083e6d 	.word	0x00083e6d
   84d94:	00083e09 	.word	0x00083e09

00084d98 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   84d98:	b580      	push	{r7, lr}
   84d9a:	b086      	sub	sp, #24
   84d9c:	af00      	add	r7, sp, #0
   84d9e:	6078      	str	r0, [r7, #4]
   84da0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   84da2:	2300      	movs	r3, #0
   84da4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   84da6:	687b      	ldr	r3, [r7, #4]
   84da8:	2b00      	cmp	r3, #0
   84daa:	d102      	bne.n	84db2 <vTaskDelayUntil+0x1a>
   84dac:	4b2f      	ldr	r3, [pc, #188]	; (84e6c <vTaskDelayUntil+0xd4>)
   84dae:	4798      	blx	r3
   84db0:	e7fe      	b.n	84db0 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   84db2:	683b      	ldr	r3, [r7, #0]
   84db4:	2b00      	cmp	r3, #0
   84db6:	d102      	bne.n	84dbe <vTaskDelayUntil+0x26>
   84db8:	4b2c      	ldr	r3, [pc, #176]	; (84e6c <vTaskDelayUntil+0xd4>)
   84dba:	4798      	blx	r3
   84dbc:	e7fe      	b.n	84dbc <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   84dbe:	4b2c      	ldr	r3, [pc, #176]	; (84e70 <vTaskDelayUntil+0xd8>)
   84dc0:	681b      	ldr	r3, [r3, #0]
   84dc2:	2b00      	cmp	r3, #0
   84dc4:	d002      	beq.n	84dcc <vTaskDelayUntil+0x34>
   84dc6:	4b29      	ldr	r3, [pc, #164]	; (84e6c <vTaskDelayUntil+0xd4>)
   84dc8:	4798      	blx	r3
   84dca:	e7fe      	b.n	84dca <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   84dcc:	4b29      	ldr	r3, [pc, #164]	; (84e74 <vTaskDelayUntil+0xdc>)
   84dce:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   84dd0:	4b29      	ldr	r3, [pc, #164]	; (84e78 <vTaskDelayUntil+0xe0>)
   84dd2:	681b      	ldr	r3, [r3, #0]
   84dd4:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   84dd6:	687b      	ldr	r3, [r7, #4]
   84dd8:	681a      	ldr	r2, [r3, #0]
   84dda:	683b      	ldr	r3, [r7, #0]
   84ddc:	4413      	add	r3, r2
   84dde:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   84de0:	687b      	ldr	r3, [r7, #4]
   84de2:	681a      	ldr	r2, [r3, #0]
   84de4:	693b      	ldr	r3, [r7, #16]
   84de6:	429a      	cmp	r2, r3
   84de8:	d90b      	bls.n	84e02 <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   84dea:	687b      	ldr	r3, [r7, #4]
   84dec:	681a      	ldr	r2, [r3, #0]
   84dee:	68fb      	ldr	r3, [r7, #12]
   84df0:	429a      	cmp	r2, r3
   84df2:	d911      	bls.n	84e18 <vTaskDelayUntil+0x80>
   84df4:	68fa      	ldr	r2, [r7, #12]
   84df6:	693b      	ldr	r3, [r7, #16]
   84df8:	429a      	cmp	r2, r3
   84dfa:	d90d      	bls.n	84e18 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   84dfc:	2301      	movs	r3, #1
   84dfe:	617b      	str	r3, [r7, #20]
   84e00:	e00a      	b.n	84e18 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   84e02:	687b      	ldr	r3, [r7, #4]
   84e04:	681a      	ldr	r2, [r3, #0]
   84e06:	68fb      	ldr	r3, [r7, #12]
   84e08:	429a      	cmp	r2, r3
   84e0a:	d803      	bhi.n	84e14 <vTaskDelayUntil+0x7c>
   84e0c:	68fa      	ldr	r2, [r7, #12]
   84e0e:	693b      	ldr	r3, [r7, #16]
   84e10:	429a      	cmp	r2, r3
   84e12:	d901      	bls.n	84e18 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   84e14:	2301      	movs	r3, #1
   84e16:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   84e18:	687b      	ldr	r3, [r7, #4]
   84e1a:	68fa      	ldr	r2, [r7, #12]
   84e1c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   84e1e:	697b      	ldr	r3, [r7, #20]
   84e20:	2b00      	cmp	r3, #0
   84e22:	d017      	beq.n	84e54 <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84e24:	4b15      	ldr	r3, [pc, #84]	; (84e7c <vTaskDelayUntil+0xe4>)
   84e26:	681b      	ldr	r3, [r3, #0]
   84e28:	3304      	adds	r3, #4
   84e2a:	4618      	mov	r0, r3
   84e2c:	4b14      	ldr	r3, [pc, #80]	; (84e80 <vTaskDelayUntil+0xe8>)
   84e2e:	4798      	blx	r3
   84e30:	4603      	mov	r3, r0
   84e32:	2b00      	cmp	r3, #0
   84e34:	d10b      	bne.n	84e4e <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84e36:	4b11      	ldr	r3, [pc, #68]	; (84e7c <vTaskDelayUntil+0xe4>)
   84e38:	681b      	ldr	r3, [r3, #0]
   84e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e3c:	2201      	movs	r2, #1
   84e3e:	fa02 f303 	lsl.w	r3, r2, r3
   84e42:	43da      	mvns	r2, r3
   84e44:	4b0f      	ldr	r3, [pc, #60]	; (84e84 <vTaskDelayUntil+0xec>)
   84e46:	681b      	ldr	r3, [r3, #0]
   84e48:	401a      	ands	r2, r3
   84e4a:	4b0e      	ldr	r3, [pc, #56]	; (84e84 <vTaskDelayUntil+0xec>)
   84e4c:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   84e4e:	68f8      	ldr	r0, [r7, #12]
   84e50:	4b0d      	ldr	r3, [pc, #52]	; (84e88 <vTaskDelayUntil+0xf0>)
   84e52:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   84e54:	4b0d      	ldr	r3, [pc, #52]	; (84e8c <vTaskDelayUntil+0xf4>)
   84e56:	4798      	blx	r3
   84e58:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   84e5a:	68bb      	ldr	r3, [r7, #8]
   84e5c:	2b00      	cmp	r3, #0
   84e5e:	d101      	bne.n	84e64 <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   84e60:	4b0b      	ldr	r3, [pc, #44]	; (84e90 <vTaskDelayUntil+0xf8>)
   84e62:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84e64:	3718      	adds	r7, #24
   84e66:	46bd      	mov	sp, r7
   84e68:	bd80      	pop	{r7, pc}
   84e6a:	bf00      	nop
   84e6c:	00083ea5 	.word	0x00083ea5
   84e70:	2007a600 	.word	0x2007a600
   84e74:	00084f15 	.word	0x00084f15
   84e78:	2007a5e4 	.word	0x2007a5e4
   84e7c:	2007a508 	.word	0x2007a508
   84e80:	00083c2d 	.word	0x00083c2d
   84e84:	2007a5e8 	.word	0x2007a5e8
   84e88:	000857a5 	.word	0x000857a5
   84e8c:	00084f31 	.word	0x00084f31
   84e90:	00083e09 	.word	0x00083e09

00084e94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   84e94:	b590      	push	{r4, r7, lr}
   84e96:	b087      	sub	sp, #28
   84e98:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   84e9a:	2300      	movs	r3, #0
   84e9c:	9300      	str	r3, [sp, #0]
   84e9e:	2300      	movs	r3, #0
   84ea0:	9301      	str	r3, [sp, #4]
   84ea2:	2300      	movs	r3, #0
   84ea4:	9302      	str	r3, [sp, #8]
   84ea6:	2300      	movs	r3, #0
   84ea8:	9303      	str	r3, [sp, #12]
   84eaa:	4812      	ldr	r0, [pc, #72]	; (84ef4 <vTaskStartScheduler+0x60>)
   84eac:	4912      	ldr	r1, [pc, #72]	; (84ef8 <vTaskStartScheduler+0x64>)
   84eae:	2282      	movs	r2, #130	; 0x82
   84eb0:	2300      	movs	r3, #0
   84eb2:	4c12      	ldr	r4, [pc, #72]	; (84efc <vTaskStartScheduler+0x68>)
   84eb4:	47a0      	blx	r4
   84eb6:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   84eb8:	687b      	ldr	r3, [r7, #4]
   84eba:	2b01      	cmp	r3, #1
   84ebc:	d102      	bne.n	84ec4 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   84ebe:	4b10      	ldr	r3, [pc, #64]	; (84f00 <vTaskStartScheduler+0x6c>)
   84ec0:	4798      	blx	r3
   84ec2:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   84ec4:	687b      	ldr	r3, [r7, #4]
   84ec6:	2b01      	cmp	r3, #1
   84ec8:	d10a      	bne.n	84ee0 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   84eca:	4b0e      	ldr	r3, [pc, #56]	; (84f04 <vTaskStartScheduler+0x70>)
   84ecc:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   84ece:	4b0e      	ldr	r3, [pc, #56]	; (84f08 <vTaskStartScheduler+0x74>)
   84ed0:	2201      	movs	r2, #1
   84ed2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   84ed4:	4b0d      	ldr	r3, [pc, #52]	; (84f0c <vTaskStartScheduler+0x78>)
   84ed6:	2200      	movs	r2, #0
   84ed8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   84eda:	4b0d      	ldr	r3, [pc, #52]	; (84f10 <vTaskStartScheduler+0x7c>)
   84edc:	4798      	blx	r3
   84ede:	e005      	b.n	84eec <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   84ee0:	687b      	ldr	r3, [r7, #4]
   84ee2:	2b00      	cmp	r3, #0
   84ee4:	d102      	bne.n	84eec <vTaskStartScheduler+0x58>
   84ee6:	4b07      	ldr	r3, [pc, #28]	; (84f04 <vTaskStartScheduler+0x70>)
   84ee8:	4798      	blx	r3
   84eea:	e7fe      	b.n	84eea <vTaskStartScheduler+0x56>
	}
}
   84eec:	370c      	adds	r7, #12
   84eee:	46bd      	mov	sp, r7
   84ef0:	bd90      	pop	{r4, r7, pc}
   84ef2:	bf00      	nop
   84ef4:	000855d9 	.word	0x000855d9
   84ef8:	00087750 	.word	0x00087750
   84efc:	00084c19 	.word	0x00084c19
   84f00:	00085b2d 	.word	0x00085b2d
   84f04:	00083ea5 	.word	0x00083ea5
   84f08:	2007a5ec 	.word	0x2007a5ec
   84f0c:	2007a5e4 	.word	0x2007a5e4
   84f10:	00083d41 	.word	0x00083d41

00084f14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   84f14:	b480      	push	{r7}
   84f16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   84f18:	4b04      	ldr	r3, [pc, #16]	; (84f2c <vTaskSuspendAll+0x18>)
   84f1a:	681b      	ldr	r3, [r3, #0]
   84f1c:	1c5a      	adds	r2, r3, #1
   84f1e:	4b03      	ldr	r3, [pc, #12]	; (84f2c <vTaskSuspendAll+0x18>)
   84f20:	601a      	str	r2, [r3, #0]
}
   84f22:	46bd      	mov	sp, r7
   84f24:	f85d 7b04 	ldr.w	r7, [sp], #4
   84f28:	4770      	bx	lr
   84f2a:	bf00      	nop
   84f2c:	2007a600 	.word	0x2007a600

00084f30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   84f30:	b580      	push	{r7, lr}
   84f32:	b082      	sub	sp, #8
   84f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   84f36:	2300      	movs	r3, #0
   84f38:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   84f3a:	4b37      	ldr	r3, [pc, #220]	; (85018 <xTaskResumeAll+0xe8>)
   84f3c:	681b      	ldr	r3, [r3, #0]
   84f3e:	2b00      	cmp	r3, #0
   84f40:	d102      	bne.n	84f48 <xTaskResumeAll+0x18>
   84f42:	4b36      	ldr	r3, [pc, #216]	; (8501c <xTaskResumeAll+0xec>)
   84f44:	4798      	blx	r3
   84f46:	e7fe      	b.n	84f46 <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   84f48:	4b35      	ldr	r3, [pc, #212]	; (85020 <xTaskResumeAll+0xf0>)
   84f4a:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   84f4c:	4b32      	ldr	r3, [pc, #200]	; (85018 <xTaskResumeAll+0xe8>)
   84f4e:	681b      	ldr	r3, [r3, #0]
   84f50:	1e5a      	subs	r2, r3, #1
   84f52:	4b31      	ldr	r3, [pc, #196]	; (85018 <xTaskResumeAll+0xe8>)
   84f54:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84f56:	4b30      	ldr	r3, [pc, #192]	; (85018 <xTaskResumeAll+0xe8>)
   84f58:	681b      	ldr	r3, [r3, #0]
   84f5a:	2b00      	cmp	r3, #0
   84f5c:	d155      	bne.n	8500a <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   84f5e:	4b31      	ldr	r3, [pc, #196]	; (85024 <xTaskResumeAll+0xf4>)
   84f60:	681b      	ldr	r3, [r3, #0]
   84f62:	2b00      	cmp	r3, #0
   84f64:	d051      	beq.n	8500a <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84f66:	e02e      	b.n	84fc6 <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   84f68:	4b2f      	ldr	r3, [pc, #188]	; (85028 <xTaskResumeAll+0xf8>)
   84f6a:	68db      	ldr	r3, [r3, #12]
   84f6c:	68db      	ldr	r3, [r3, #12]
   84f6e:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84f70:	683b      	ldr	r3, [r7, #0]
   84f72:	3318      	adds	r3, #24
   84f74:	4618      	mov	r0, r3
   84f76:	4b2d      	ldr	r3, [pc, #180]	; (8502c <xTaskResumeAll+0xfc>)
   84f78:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84f7a:	683b      	ldr	r3, [r7, #0]
   84f7c:	3304      	adds	r3, #4
   84f7e:	4618      	mov	r0, r3
   84f80:	4b2a      	ldr	r3, [pc, #168]	; (8502c <xTaskResumeAll+0xfc>)
   84f82:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   84f84:	683b      	ldr	r3, [r7, #0]
   84f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84f88:	2201      	movs	r2, #1
   84f8a:	409a      	lsls	r2, r3
   84f8c:	4b28      	ldr	r3, [pc, #160]	; (85030 <xTaskResumeAll+0x100>)
   84f8e:	681b      	ldr	r3, [r3, #0]
   84f90:	431a      	orrs	r2, r3
   84f92:	4b27      	ldr	r3, [pc, #156]	; (85030 <xTaskResumeAll+0x100>)
   84f94:	601a      	str	r2, [r3, #0]
   84f96:	683b      	ldr	r3, [r7, #0]
   84f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84f9a:	4613      	mov	r3, r2
   84f9c:	009b      	lsls	r3, r3, #2
   84f9e:	4413      	add	r3, r2
   84fa0:	009b      	lsls	r3, r3, #2
   84fa2:	4a24      	ldr	r2, [pc, #144]	; (85034 <xTaskResumeAll+0x104>)
   84fa4:	441a      	add	r2, r3
   84fa6:	683b      	ldr	r3, [r7, #0]
   84fa8:	3304      	adds	r3, #4
   84faa:	4610      	mov	r0, r2
   84fac:	4619      	mov	r1, r3
   84fae:	4b22      	ldr	r3, [pc, #136]	; (85038 <xTaskResumeAll+0x108>)
   84fb0:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84fb2:	683b      	ldr	r3, [r7, #0]
   84fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84fb6:	4b21      	ldr	r3, [pc, #132]	; (8503c <xTaskResumeAll+0x10c>)
   84fb8:	681b      	ldr	r3, [r3, #0]
   84fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84fbc:	429a      	cmp	r2, r3
   84fbe:	d302      	bcc.n	84fc6 <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   84fc0:	4b1f      	ldr	r3, [pc, #124]	; (85040 <xTaskResumeAll+0x110>)
   84fc2:	2201      	movs	r2, #1
   84fc4:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   84fc6:	4b18      	ldr	r3, [pc, #96]	; (85028 <xTaskResumeAll+0xf8>)
   84fc8:	681b      	ldr	r3, [r3, #0]
   84fca:	2b00      	cmp	r3, #0
   84fcc:	d1cc      	bne.n	84f68 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   84fce:	4b1d      	ldr	r3, [pc, #116]	; (85044 <xTaskResumeAll+0x114>)
   84fd0:	681b      	ldr	r3, [r3, #0]
   84fd2:	2b00      	cmp	r3, #0
   84fd4:	d011      	beq.n	84ffa <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   84fd6:	e00c      	b.n	84ff2 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   84fd8:	4b1b      	ldr	r3, [pc, #108]	; (85048 <xTaskResumeAll+0x118>)
   84fda:	4798      	blx	r3
   84fdc:	4603      	mov	r3, r0
   84fde:	2b00      	cmp	r3, #0
   84fe0:	d002      	beq.n	84fe8 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   84fe2:	4b17      	ldr	r3, [pc, #92]	; (85040 <xTaskResumeAll+0x110>)
   84fe4:	2201      	movs	r2, #1
   84fe6:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   84fe8:	4b16      	ldr	r3, [pc, #88]	; (85044 <xTaskResumeAll+0x114>)
   84fea:	681b      	ldr	r3, [r3, #0]
   84fec:	1e5a      	subs	r2, r3, #1
   84fee:	4b15      	ldr	r3, [pc, #84]	; (85044 <xTaskResumeAll+0x114>)
   84ff0:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   84ff2:	4b14      	ldr	r3, [pc, #80]	; (85044 <xTaskResumeAll+0x114>)
   84ff4:	681b      	ldr	r3, [r3, #0]
   84ff6:	2b00      	cmp	r3, #0
   84ff8:	d1ee      	bne.n	84fd8 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   84ffa:	4b11      	ldr	r3, [pc, #68]	; (85040 <xTaskResumeAll+0x110>)
   84ffc:	681b      	ldr	r3, [r3, #0]
   84ffe:	2b01      	cmp	r3, #1
   85000:	d103      	bne.n	8500a <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   85002:	2301      	movs	r3, #1
   85004:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   85006:	4b11      	ldr	r3, [pc, #68]	; (8504c <xTaskResumeAll+0x11c>)
   85008:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8500a:	4b11      	ldr	r3, [pc, #68]	; (85050 <xTaskResumeAll+0x120>)
   8500c:	4798      	blx	r3

	return xAlreadyYielded;
   8500e:	687b      	ldr	r3, [r7, #4]
}
   85010:	4618      	mov	r0, r3
   85012:	3708      	adds	r7, #8
   85014:	46bd      	mov	sp, r7
   85016:	bd80      	pop	{r7, pc}
   85018:	2007a600 	.word	0x2007a600
   8501c:	00083ea5 	.word	0x00083ea5
   85020:	00083e29 	.word	0x00083e29
   85024:	2007a5e0 	.word	0x2007a5e0
   85028:	2007a5a0 	.word	0x2007a5a0
   8502c:	00083c2d 	.word	0x00083c2d
   85030:	2007a5e8 	.word	0x2007a5e8
   85034:	2007a50c 	.word	0x2007a50c
   85038:	00083b75 	.word	0x00083b75
   8503c:	2007a508 	.word	0x2007a508
   85040:	2007a5f4 	.word	0x2007a5f4
   85044:	2007a5f0 	.word	0x2007a5f0
   85048:	00085081 	.word	0x00085081
   8504c:	00083e09 	.word	0x00083e09
   85050:	00083e6d 	.word	0x00083e6d

00085054 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   85054:	b580      	push	{r7, lr}
   85056:	b082      	sub	sp, #8
   85058:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   8505a:	4b06      	ldr	r3, [pc, #24]	; (85074 <xTaskGetTickCount+0x20>)
   8505c:	4798      	blx	r3
	{
		xTicks = xTickCount;
   8505e:	4b06      	ldr	r3, [pc, #24]	; (85078 <xTaskGetTickCount+0x24>)
   85060:	681b      	ldr	r3, [r3, #0]
   85062:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   85064:	4b05      	ldr	r3, [pc, #20]	; (8507c <xTaskGetTickCount+0x28>)
   85066:	4798      	blx	r3

	return xTicks;
   85068:	687b      	ldr	r3, [r7, #4]
}
   8506a:	4618      	mov	r0, r3
   8506c:	3708      	adds	r7, #8
   8506e:	46bd      	mov	sp, r7
   85070:	bd80      	pop	{r7, pc}
   85072:	bf00      	nop
   85074:	00083e29 	.word	0x00083e29
   85078:	2007a5e4 	.word	0x2007a5e4
   8507c:	00083e6d 	.word	0x00083e6d

00085080 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   85080:	b580      	push	{r7, lr}
   85082:	b086      	sub	sp, #24
   85084:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   85086:	2300      	movs	r3, #0
   85088:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8508a:	4b4d      	ldr	r3, [pc, #308]	; (851c0 <xTaskIncrementTick+0x140>)
   8508c:	681b      	ldr	r3, [r3, #0]
   8508e:	2b00      	cmp	r3, #0
   85090:	f040 8086 	bne.w	851a0 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   85094:	4b4b      	ldr	r3, [pc, #300]	; (851c4 <xTaskIncrementTick+0x144>)
   85096:	681b      	ldr	r3, [r3, #0]
   85098:	1c5a      	adds	r2, r3, #1
   8509a:	4b4a      	ldr	r3, [pc, #296]	; (851c4 <xTaskIncrementTick+0x144>)
   8509c:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   8509e:	4b49      	ldr	r3, [pc, #292]	; (851c4 <xTaskIncrementTick+0x144>)
   850a0:	681b      	ldr	r3, [r3, #0]
   850a2:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   850a4:	693b      	ldr	r3, [r7, #16]
   850a6:	2b00      	cmp	r3, #0
   850a8:	d118      	bne.n	850dc <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   850aa:	4b47      	ldr	r3, [pc, #284]	; (851c8 <xTaskIncrementTick+0x148>)
   850ac:	681b      	ldr	r3, [r3, #0]
   850ae:	681b      	ldr	r3, [r3, #0]
   850b0:	2b00      	cmp	r3, #0
   850b2:	d002      	beq.n	850ba <xTaskIncrementTick+0x3a>
   850b4:	4b45      	ldr	r3, [pc, #276]	; (851cc <xTaskIncrementTick+0x14c>)
   850b6:	4798      	blx	r3
   850b8:	e7fe      	b.n	850b8 <xTaskIncrementTick+0x38>
   850ba:	4b43      	ldr	r3, [pc, #268]	; (851c8 <xTaskIncrementTick+0x148>)
   850bc:	681b      	ldr	r3, [r3, #0]
   850be:	60fb      	str	r3, [r7, #12]
   850c0:	4b43      	ldr	r3, [pc, #268]	; (851d0 <xTaskIncrementTick+0x150>)
   850c2:	681a      	ldr	r2, [r3, #0]
   850c4:	4b40      	ldr	r3, [pc, #256]	; (851c8 <xTaskIncrementTick+0x148>)
   850c6:	601a      	str	r2, [r3, #0]
   850c8:	4b41      	ldr	r3, [pc, #260]	; (851d0 <xTaskIncrementTick+0x150>)
   850ca:	68fa      	ldr	r2, [r7, #12]
   850cc:	601a      	str	r2, [r3, #0]
   850ce:	4b41      	ldr	r3, [pc, #260]	; (851d4 <xTaskIncrementTick+0x154>)
   850d0:	681b      	ldr	r3, [r3, #0]
   850d2:	1c5a      	adds	r2, r3, #1
   850d4:	4b3f      	ldr	r3, [pc, #252]	; (851d4 <xTaskIncrementTick+0x154>)
   850d6:	601a      	str	r2, [r3, #0]
   850d8:	4b3f      	ldr	r3, [pc, #252]	; (851d8 <xTaskIncrementTick+0x158>)
   850da:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   850dc:	4b3f      	ldr	r3, [pc, #252]	; (851dc <xTaskIncrementTick+0x15c>)
   850de:	681b      	ldr	r3, [r3, #0]
   850e0:	693a      	ldr	r2, [r7, #16]
   850e2:	429a      	cmp	r2, r3
   850e4:	d34d      	bcc.n	85182 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   850e6:	4b38      	ldr	r3, [pc, #224]	; (851c8 <xTaskIncrementTick+0x148>)
   850e8:	681b      	ldr	r3, [r3, #0]
   850ea:	681b      	ldr	r3, [r3, #0]
   850ec:	2b00      	cmp	r3, #0
   850ee:	d101      	bne.n	850f4 <xTaskIncrementTick+0x74>
   850f0:	2301      	movs	r3, #1
   850f2:	e000      	b.n	850f6 <xTaskIncrementTick+0x76>
   850f4:	2300      	movs	r3, #0
   850f6:	2b00      	cmp	r3, #0
   850f8:	d004      	beq.n	85104 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   850fa:	4b38      	ldr	r3, [pc, #224]	; (851dc <xTaskIncrementTick+0x15c>)
   850fc:	f04f 32ff 	mov.w	r2, #4294967295
   85100:	601a      	str	r2, [r3, #0]
						break;
   85102:	e03e      	b.n	85182 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   85104:	4b30      	ldr	r3, [pc, #192]	; (851c8 <xTaskIncrementTick+0x148>)
   85106:	681b      	ldr	r3, [r3, #0]
   85108:	68db      	ldr	r3, [r3, #12]
   8510a:	68db      	ldr	r3, [r3, #12]
   8510c:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8510e:	68bb      	ldr	r3, [r7, #8]
   85110:	685b      	ldr	r3, [r3, #4]
   85112:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   85114:	693a      	ldr	r2, [r7, #16]
   85116:	687b      	ldr	r3, [r7, #4]
   85118:	429a      	cmp	r2, r3
   8511a:	d203      	bcs.n	85124 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   8511c:	4b2f      	ldr	r3, [pc, #188]	; (851dc <xTaskIncrementTick+0x15c>)
   8511e:	687a      	ldr	r2, [r7, #4]
   85120:	601a      	str	r2, [r3, #0]
							break;
   85122:	e02e      	b.n	85182 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   85124:	68bb      	ldr	r3, [r7, #8]
   85126:	3304      	adds	r3, #4
   85128:	4618      	mov	r0, r3
   8512a:	4b2d      	ldr	r3, [pc, #180]	; (851e0 <xTaskIncrementTick+0x160>)
   8512c:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   8512e:	68bb      	ldr	r3, [r7, #8]
   85130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   85132:	2b00      	cmp	r3, #0
   85134:	d004      	beq.n	85140 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   85136:	68bb      	ldr	r3, [r7, #8]
   85138:	3318      	adds	r3, #24
   8513a:	4618      	mov	r0, r3
   8513c:	4b28      	ldr	r3, [pc, #160]	; (851e0 <xTaskIncrementTick+0x160>)
   8513e:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   85140:	68bb      	ldr	r3, [r7, #8]
   85142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85144:	2201      	movs	r2, #1
   85146:	409a      	lsls	r2, r3
   85148:	4b26      	ldr	r3, [pc, #152]	; (851e4 <xTaskIncrementTick+0x164>)
   8514a:	681b      	ldr	r3, [r3, #0]
   8514c:	431a      	orrs	r2, r3
   8514e:	4b25      	ldr	r3, [pc, #148]	; (851e4 <xTaskIncrementTick+0x164>)
   85150:	601a      	str	r2, [r3, #0]
   85152:	68bb      	ldr	r3, [r7, #8]
   85154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85156:	4613      	mov	r3, r2
   85158:	009b      	lsls	r3, r3, #2
   8515a:	4413      	add	r3, r2
   8515c:	009b      	lsls	r3, r3, #2
   8515e:	4a22      	ldr	r2, [pc, #136]	; (851e8 <xTaskIncrementTick+0x168>)
   85160:	441a      	add	r2, r3
   85162:	68bb      	ldr	r3, [r7, #8]
   85164:	3304      	adds	r3, #4
   85166:	4610      	mov	r0, r2
   85168:	4619      	mov	r1, r3
   8516a:	4b20      	ldr	r3, [pc, #128]	; (851ec <xTaskIncrementTick+0x16c>)
   8516c:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8516e:	68bb      	ldr	r3, [r7, #8]
   85170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85172:	4b1f      	ldr	r3, [pc, #124]	; (851f0 <xTaskIncrementTick+0x170>)
   85174:	681b      	ldr	r3, [r3, #0]
   85176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85178:	429a      	cmp	r2, r3
   8517a:	d301      	bcc.n	85180 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   8517c:	2301      	movs	r3, #1
   8517e:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   85180:	e7b1      	b.n	850e6 <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   85182:	4b1b      	ldr	r3, [pc, #108]	; (851f0 <xTaskIncrementTick+0x170>)
   85184:	681b      	ldr	r3, [r3, #0]
   85186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85188:	4917      	ldr	r1, [pc, #92]	; (851e8 <xTaskIncrementTick+0x168>)
   8518a:	4613      	mov	r3, r2
   8518c:	009b      	lsls	r3, r3, #2
   8518e:	4413      	add	r3, r2
   85190:	009b      	lsls	r3, r3, #2
   85192:	440b      	add	r3, r1
   85194:	681b      	ldr	r3, [r3, #0]
   85196:	2b01      	cmp	r3, #1
   85198:	d907      	bls.n	851aa <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   8519a:	2301      	movs	r3, #1
   8519c:	617b      	str	r3, [r7, #20]
   8519e:	e004      	b.n	851aa <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   851a0:	4b14      	ldr	r3, [pc, #80]	; (851f4 <xTaskIncrementTick+0x174>)
   851a2:	681b      	ldr	r3, [r3, #0]
   851a4:	1c5a      	adds	r2, r3, #1
   851a6:	4b13      	ldr	r3, [pc, #76]	; (851f4 <xTaskIncrementTick+0x174>)
   851a8:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   851aa:	4b13      	ldr	r3, [pc, #76]	; (851f8 <xTaskIncrementTick+0x178>)
   851ac:	681b      	ldr	r3, [r3, #0]
   851ae:	2b00      	cmp	r3, #0
   851b0:	d001      	beq.n	851b6 <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   851b2:	2301      	movs	r3, #1
   851b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   851b6:	697b      	ldr	r3, [r7, #20]
}
   851b8:	4618      	mov	r0, r3
   851ba:	3718      	adds	r7, #24
   851bc:	46bd      	mov	sp, r7
   851be:	bd80      	pop	{r7, pc}
   851c0:	2007a600 	.word	0x2007a600
   851c4:	2007a5e4 	.word	0x2007a5e4
   851c8:	2007a598 	.word	0x2007a598
   851cc:	00083ea5 	.word	0x00083ea5
   851d0:	2007a59c 	.word	0x2007a59c
   851d4:	2007a5f8 	.word	0x2007a5f8
   851d8:	000858a9 	.word	0x000858a9
   851dc:	20070008 	.word	0x20070008
   851e0:	00083c2d 	.word	0x00083c2d
   851e4:	2007a5e8 	.word	0x2007a5e8
   851e8:	2007a50c 	.word	0x2007a50c
   851ec:	00083b75 	.word	0x00083b75
   851f0:	2007a508 	.word	0x2007a508
   851f4:	2007a5f0 	.word	0x2007a5f0
   851f8:	2007a5f4 	.word	0x2007a5f4

000851fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   851fc:	b580      	push	{r7, lr}
   851fe:	b084      	sub	sp, #16
   85200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   85202:	4b34      	ldr	r3, [pc, #208]	; (852d4 <vTaskSwitchContext+0xd8>)
   85204:	681b      	ldr	r3, [r3, #0]
   85206:	2b00      	cmp	r3, #0
   85208:	d003      	beq.n	85212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   8520a:	4b33      	ldr	r3, [pc, #204]	; (852d8 <vTaskSwitchContext+0xdc>)
   8520c:	2201      	movs	r2, #1
   8520e:	601a      	str	r2, [r3, #0]
   85210:	e05c      	b.n	852cc <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   85212:	4b31      	ldr	r3, [pc, #196]	; (852d8 <vTaskSwitchContext+0xdc>)
   85214:	2200      	movs	r2, #0
   85216:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   85218:	4b30      	ldr	r3, [pc, #192]	; (852dc <vTaskSwitchContext+0xe0>)
   8521a:	681b      	ldr	r3, [r3, #0]
   8521c:	681a      	ldr	r2, [r3, #0]
   8521e:	4b2f      	ldr	r3, [pc, #188]	; (852dc <vTaskSwitchContext+0xe0>)
   85220:	681b      	ldr	r3, [r3, #0]
   85222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85224:	429a      	cmp	r2, r3
   85226:	d808      	bhi.n	8523a <vTaskSwitchContext+0x3e>
   85228:	4b2c      	ldr	r3, [pc, #176]	; (852dc <vTaskSwitchContext+0xe0>)
   8522a:	681a      	ldr	r2, [r3, #0]
   8522c:	4b2b      	ldr	r3, [pc, #172]	; (852dc <vTaskSwitchContext+0xe0>)
   8522e:	681b      	ldr	r3, [r3, #0]
   85230:	3334      	adds	r3, #52	; 0x34
   85232:	4610      	mov	r0, r2
   85234:	4619      	mov	r1, r3
   85236:	4b2a      	ldr	r3, [pc, #168]	; (852e0 <vTaskSwitchContext+0xe4>)
   85238:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   8523a:	4b28      	ldr	r3, [pc, #160]	; (852dc <vTaskSwitchContext+0xe0>)
   8523c:	681b      	ldr	r3, [r3, #0]
   8523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85240:	4618      	mov	r0, r3
   85242:	4928      	ldr	r1, [pc, #160]	; (852e4 <vTaskSwitchContext+0xe8>)
   85244:	2214      	movs	r2, #20
   85246:	4b28      	ldr	r3, [pc, #160]	; (852e8 <vTaskSwitchContext+0xec>)
   85248:	4798      	blx	r3
   8524a:	4603      	mov	r3, r0
   8524c:	2b00      	cmp	r3, #0
   8524e:	d008      	beq.n	85262 <vTaskSwitchContext+0x66>
   85250:	4b22      	ldr	r3, [pc, #136]	; (852dc <vTaskSwitchContext+0xe0>)
   85252:	681a      	ldr	r2, [r3, #0]
   85254:	4b21      	ldr	r3, [pc, #132]	; (852dc <vTaskSwitchContext+0xe0>)
   85256:	681b      	ldr	r3, [r3, #0]
   85258:	3334      	adds	r3, #52	; 0x34
   8525a:	4610      	mov	r0, r2
   8525c:	4619      	mov	r1, r3
   8525e:	4b20      	ldr	r3, [pc, #128]	; (852e0 <vTaskSwitchContext+0xe4>)
   85260:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   85262:	4b22      	ldr	r3, [pc, #136]	; (852ec <vTaskSwitchContext+0xf0>)
   85264:	681b      	ldr	r3, [r3, #0]
   85266:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   85268:	687b      	ldr	r3, [r7, #4]
   8526a:	fab3 f383 	clz	r3, r3
   8526e:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   85270:	78fb      	ldrb	r3, [r7, #3]
   85272:	f1c3 031f 	rsb	r3, r3, #31
   85276:	60fb      	str	r3, [r7, #12]
   85278:	491d      	ldr	r1, [pc, #116]	; (852f0 <vTaskSwitchContext+0xf4>)
   8527a:	68fa      	ldr	r2, [r7, #12]
   8527c:	4613      	mov	r3, r2
   8527e:	009b      	lsls	r3, r3, #2
   85280:	4413      	add	r3, r2
   85282:	009b      	lsls	r3, r3, #2
   85284:	440b      	add	r3, r1
   85286:	681b      	ldr	r3, [r3, #0]
   85288:	2b00      	cmp	r3, #0
   8528a:	d102      	bne.n	85292 <vTaskSwitchContext+0x96>
   8528c:	4b19      	ldr	r3, [pc, #100]	; (852f4 <vTaskSwitchContext+0xf8>)
   8528e:	4798      	blx	r3
   85290:	e7fe      	b.n	85290 <vTaskSwitchContext+0x94>
   85292:	68fa      	ldr	r2, [r7, #12]
   85294:	4613      	mov	r3, r2
   85296:	009b      	lsls	r3, r3, #2
   85298:	4413      	add	r3, r2
   8529a:	009b      	lsls	r3, r3, #2
   8529c:	4a14      	ldr	r2, [pc, #80]	; (852f0 <vTaskSwitchContext+0xf4>)
   8529e:	4413      	add	r3, r2
   852a0:	60bb      	str	r3, [r7, #8]
   852a2:	68bb      	ldr	r3, [r7, #8]
   852a4:	685b      	ldr	r3, [r3, #4]
   852a6:	685a      	ldr	r2, [r3, #4]
   852a8:	68bb      	ldr	r3, [r7, #8]
   852aa:	605a      	str	r2, [r3, #4]
   852ac:	68bb      	ldr	r3, [r7, #8]
   852ae:	685a      	ldr	r2, [r3, #4]
   852b0:	68bb      	ldr	r3, [r7, #8]
   852b2:	3308      	adds	r3, #8
   852b4:	429a      	cmp	r2, r3
   852b6:	d104      	bne.n	852c2 <vTaskSwitchContext+0xc6>
   852b8:	68bb      	ldr	r3, [r7, #8]
   852ba:	685b      	ldr	r3, [r3, #4]
   852bc:	685a      	ldr	r2, [r3, #4]
   852be:	68bb      	ldr	r3, [r7, #8]
   852c0:	605a      	str	r2, [r3, #4]
   852c2:	68bb      	ldr	r3, [r7, #8]
   852c4:	685b      	ldr	r3, [r3, #4]
   852c6:	68da      	ldr	r2, [r3, #12]
   852c8:	4b04      	ldr	r3, [pc, #16]	; (852dc <vTaskSwitchContext+0xe0>)
   852ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   852cc:	3710      	adds	r7, #16
   852ce:	46bd      	mov	sp, r7
   852d0:	bd80      	pop	{r7, pc}
   852d2:	bf00      	nop
   852d4:	2007a600 	.word	0x2007a600
   852d8:	2007a5f4 	.word	0x2007a5f4
   852dc:	2007a508 	.word	0x2007a508
   852e0:	00086ca5 	.word	0x00086ca5
   852e4:	00087758 	.word	0x00087758
   852e8:	00087319 	.word	0x00087319
   852ec:	2007a5e8 	.word	0x2007a5e8
   852f0:	2007a50c 	.word	0x2007a50c
   852f4:	00083ea5 	.word	0x00083ea5

000852f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   852f8:	b580      	push	{r7, lr}
   852fa:	b084      	sub	sp, #16
   852fc:	af00      	add	r7, sp, #0
   852fe:	6078      	str	r0, [r7, #4]
   85300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   85302:	687b      	ldr	r3, [r7, #4]
   85304:	2b00      	cmp	r3, #0
   85306:	d102      	bne.n	8530e <vTaskPlaceOnEventList+0x16>
   85308:	4b1a      	ldr	r3, [pc, #104]	; (85374 <vTaskPlaceOnEventList+0x7c>)
   8530a:	4798      	blx	r3
   8530c:	e7fe      	b.n	8530c <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   8530e:	4b1a      	ldr	r3, [pc, #104]	; (85378 <vTaskPlaceOnEventList+0x80>)
   85310:	681b      	ldr	r3, [r3, #0]
   85312:	3318      	adds	r3, #24
   85314:	6878      	ldr	r0, [r7, #4]
   85316:	4619      	mov	r1, r3
   85318:	4b18      	ldr	r3, [pc, #96]	; (8537c <vTaskPlaceOnEventList+0x84>)
   8531a:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8531c:	4b16      	ldr	r3, [pc, #88]	; (85378 <vTaskPlaceOnEventList+0x80>)
   8531e:	681b      	ldr	r3, [r3, #0]
   85320:	3304      	adds	r3, #4
   85322:	4618      	mov	r0, r3
   85324:	4b16      	ldr	r3, [pc, #88]	; (85380 <vTaskPlaceOnEventList+0x88>)
   85326:	4798      	blx	r3
   85328:	4603      	mov	r3, r0
   8532a:	2b00      	cmp	r3, #0
   8532c:	d10b      	bne.n	85346 <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8532e:	4b12      	ldr	r3, [pc, #72]	; (85378 <vTaskPlaceOnEventList+0x80>)
   85330:	681b      	ldr	r3, [r3, #0]
   85332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85334:	2201      	movs	r2, #1
   85336:	fa02 f303 	lsl.w	r3, r2, r3
   8533a:	43da      	mvns	r2, r3
   8533c:	4b11      	ldr	r3, [pc, #68]	; (85384 <vTaskPlaceOnEventList+0x8c>)
   8533e:	681b      	ldr	r3, [r3, #0]
   85340:	401a      	ands	r2, r3
   85342:	4b10      	ldr	r3, [pc, #64]	; (85384 <vTaskPlaceOnEventList+0x8c>)
   85344:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   85346:	683b      	ldr	r3, [r7, #0]
   85348:	f1b3 3fff 	cmp.w	r3, #4294967295
   8534c:	d107      	bne.n	8535e <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   8534e:	4b0a      	ldr	r3, [pc, #40]	; (85378 <vTaskPlaceOnEventList+0x80>)
   85350:	681b      	ldr	r3, [r3, #0]
   85352:	3304      	adds	r3, #4
   85354:	480c      	ldr	r0, [pc, #48]	; (85388 <vTaskPlaceOnEventList+0x90>)
   85356:	4619      	mov	r1, r3
   85358:	4b0c      	ldr	r3, [pc, #48]	; (8538c <vTaskPlaceOnEventList+0x94>)
   8535a:	4798      	blx	r3
   8535c:	e007      	b.n	8536e <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   8535e:	4b0c      	ldr	r3, [pc, #48]	; (85390 <vTaskPlaceOnEventList+0x98>)
   85360:	681a      	ldr	r2, [r3, #0]
   85362:	683b      	ldr	r3, [r7, #0]
   85364:	4413      	add	r3, r2
   85366:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   85368:	68f8      	ldr	r0, [r7, #12]
   8536a:	4b0a      	ldr	r3, [pc, #40]	; (85394 <vTaskPlaceOnEventList+0x9c>)
   8536c:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   8536e:	3710      	adds	r7, #16
   85370:	46bd      	mov	sp, r7
   85372:	bd80      	pop	{r7, pc}
   85374:	00083ea5 	.word	0x00083ea5
   85378:	2007a508 	.word	0x2007a508
   8537c:	00083bbd 	.word	0x00083bbd
   85380:	00083c2d 	.word	0x00083c2d
   85384:	2007a5e8 	.word	0x2007a5e8
   85388:	2007a5cc 	.word	0x2007a5cc
   8538c:	00083b75 	.word	0x00083b75
   85390:	2007a5e4 	.word	0x2007a5e4
   85394:	000857a5 	.word	0x000857a5

00085398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   85398:	b580      	push	{r7, lr}
   8539a:	b084      	sub	sp, #16
   8539c:	af00      	add	r7, sp, #0
   8539e:	6078      	str	r0, [r7, #4]
   853a0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   853a2:	687b      	ldr	r3, [r7, #4]
   853a4:	2b00      	cmp	r3, #0
   853a6:	d102      	bne.n	853ae <vTaskPlaceOnEventListRestricted+0x16>
   853a8:	4b14      	ldr	r3, [pc, #80]	; (853fc <vTaskPlaceOnEventListRestricted+0x64>)
   853aa:	4798      	blx	r3
   853ac:	e7fe      	b.n	853ac <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   853ae:	4b14      	ldr	r3, [pc, #80]	; (85400 <vTaskPlaceOnEventListRestricted+0x68>)
   853b0:	681b      	ldr	r3, [r3, #0]
   853b2:	3318      	adds	r3, #24
   853b4:	6878      	ldr	r0, [r7, #4]
   853b6:	4619      	mov	r1, r3
   853b8:	4b12      	ldr	r3, [pc, #72]	; (85404 <vTaskPlaceOnEventListRestricted+0x6c>)
   853ba:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   853bc:	4b10      	ldr	r3, [pc, #64]	; (85400 <vTaskPlaceOnEventListRestricted+0x68>)
   853be:	681b      	ldr	r3, [r3, #0]
   853c0:	3304      	adds	r3, #4
   853c2:	4618      	mov	r0, r3
   853c4:	4b10      	ldr	r3, [pc, #64]	; (85408 <vTaskPlaceOnEventListRestricted+0x70>)
   853c6:	4798      	blx	r3
   853c8:	4603      	mov	r3, r0
   853ca:	2b00      	cmp	r3, #0
   853cc:	d10b      	bne.n	853e6 <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   853ce:	4b0c      	ldr	r3, [pc, #48]	; (85400 <vTaskPlaceOnEventListRestricted+0x68>)
   853d0:	681b      	ldr	r3, [r3, #0]
   853d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   853d4:	2201      	movs	r2, #1
   853d6:	fa02 f303 	lsl.w	r3, r2, r3
   853da:	43da      	mvns	r2, r3
   853dc:	4b0b      	ldr	r3, [pc, #44]	; (8540c <vTaskPlaceOnEventListRestricted+0x74>)
   853de:	681b      	ldr	r3, [r3, #0]
   853e0:	401a      	ands	r2, r3
   853e2:	4b0a      	ldr	r3, [pc, #40]	; (8540c <vTaskPlaceOnEventListRestricted+0x74>)
   853e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   853e6:	4b0a      	ldr	r3, [pc, #40]	; (85410 <vTaskPlaceOnEventListRestricted+0x78>)
   853e8:	681a      	ldr	r2, [r3, #0]
   853ea:	683b      	ldr	r3, [r7, #0]
   853ec:	4413      	add	r3, r2
   853ee:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   853f0:	68f8      	ldr	r0, [r7, #12]
   853f2:	4b08      	ldr	r3, [pc, #32]	; (85414 <vTaskPlaceOnEventListRestricted+0x7c>)
   853f4:	4798      	blx	r3
	}
   853f6:	3710      	adds	r7, #16
   853f8:	46bd      	mov	sp, r7
   853fa:	bd80      	pop	{r7, pc}
   853fc:	00083ea5 	.word	0x00083ea5
   85400:	2007a508 	.word	0x2007a508
   85404:	00083b75 	.word	0x00083b75
   85408:	00083c2d 	.word	0x00083c2d
   8540c:	2007a5e8 	.word	0x2007a5e8
   85410:	2007a5e4 	.word	0x2007a5e4
   85414:	000857a5 	.word	0x000857a5

00085418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   85418:	b580      	push	{r7, lr}
   8541a:	b084      	sub	sp, #16
   8541c:	af00      	add	r7, sp, #0
   8541e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   85420:	687b      	ldr	r3, [r7, #4]
   85422:	68db      	ldr	r3, [r3, #12]
   85424:	68db      	ldr	r3, [r3, #12]
   85426:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   85428:	68bb      	ldr	r3, [r7, #8]
   8542a:	2b00      	cmp	r3, #0
   8542c:	d102      	bne.n	85434 <xTaskRemoveFromEventList+0x1c>
   8542e:	4b21      	ldr	r3, [pc, #132]	; (854b4 <xTaskRemoveFromEventList+0x9c>)
   85430:	4798      	blx	r3
   85432:	e7fe      	b.n	85432 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   85434:	68bb      	ldr	r3, [r7, #8]
   85436:	3318      	adds	r3, #24
   85438:	4618      	mov	r0, r3
   8543a:	4b1f      	ldr	r3, [pc, #124]	; (854b8 <xTaskRemoveFromEventList+0xa0>)
   8543c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8543e:	4b1f      	ldr	r3, [pc, #124]	; (854bc <xTaskRemoveFromEventList+0xa4>)
   85440:	681b      	ldr	r3, [r3, #0]
   85442:	2b00      	cmp	r3, #0
   85444:	d11c      	bne.n	85480 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   85446:	68bb      	ldr	r3, [r7, #8]
   85448:	3304      	adds	r3, #4
   8544a:	4618      	mov	r0, r3
   8544c:	4b1a      	ldr	r3, [pc, #104]	; (854b8 <xTaskRemoveFromEventList+0xa0>)
   8544e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   85450:	68bb      	ldr	r3, [r7, #8]
   85452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85454:	2201      	movs	r2, #1
   85456:	409a      	lsls	r2, r3
   85458:	4b19      	ldr	r3, [pc, #100]	; (854c0 <xTaskRemoveFromEventList+0xa8>)
   8545a:	681b      	ldr	r3, [r3, #0]
   8545c:	431a      	orrs	r2, r3
   8545e:	4b18      	ldr	r3, [pc, #96]	; (854c0 <xTaskRemoveFromEventList+0xa8>)
   85460:	601a      	str	r2, [r3, #0]
   85462:	68bb      	ldr	r3, [r7, #8]
   85464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85466:	4613      	mov	r3, r2
   85468:	009b      	lsls	r3, r3, #2
   8546a:	4413      	add	r3, r2
   8546c:	009b      	lsls	r3, r3, #2
   8546e:	4a15      	ldr	r2, [pc, #84]	; (854c4 <xTaskRemoveFromEventList+0xac>)
   85470:	441a      	add	r2, r3
   85472:	68bb      	ldr	r3, [r7, #8]
   85474:	3304      	adds	r3, #4
   85476:	4610      	mov	r0, r2
   85478:	4619      	mov	r1, r3
   8547a:	4b13      	ldr	r3, [pc, #76]	; (854c8 <xTaskRemoveFromEventList+0xb0>)
   8547c:	4798      	blx	r3
   8547e:	e005      	b.n	8548c <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   85480:	68bb      	ldr	r3, [r7, #8]
   85482:	3318      	adds	r3, #24
   85484:	4811      	ldr	r0, [pc, #68]	; (854cc <xTaskRemoveFromEventList+0xb4>)
   85486:	4619      	mov	r1, r3
   85488:	4b0f      	ldr	r3, [pc, #60]	; (854c8 <xTaskRemoveFromEventList+0xb0>)
   8548a:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   8548c:	68bb      	ldr	r3, [r7, #8]
   8548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85490:	4b0f      	ldr	r3, [pc, #60]	; (854d0 <xTaskRemoveFromEventList+0xb8>)
   85492:	681b      	ldr	r3, [r3, #0]
   85494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85496:	429a      	cmp	r2, r3
   85498:	d905      	bls.n	854a6 <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   8549a:	2301      	movs	r3, #1
   8549c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   8549e:	4b0d      	ldr	r3, [pc, #52]	; (854d4 <xTaskRemoveFromEventList+0xbc>)
   854a0:	2201      	movs	r2, #1
   854a2:	601a      	str	r2, [r3, #0]
   854a4:	e001      	b.n	854aa <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   854a6:	2300      	movs	r3, #0
   854a8:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   854aa:	68fb      	ldr	r3, [r7, #12]
}
   854ac:	4618      	mov	r0, r3
   854ae:	3710      	adds	r7, #16
   854b0:	46bd      	mov	sp, r7
   854b2:	bd80      	pop	{r7, pc}
   854b4:	00083ea5 	.word	0x00083ea5
   854b8:	00083c2d 	.word	0x00083c2d
   854bc:	2007a600 	.word	0x2007a600
   854c0:	2007a5e8 	.word	0x2007a5e8
   854c4:	2007a50c 	.word	0x2007a50c
   854c8:	00083b75 	.word	0x00083b75
   854cc:	2007a5a0 	.word	0x2007a5a0
   854d0:	2007a508 	.word	0x2007a508
   854d4:	2007a5f4 	.word	0x2007a5f4

000854d8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   854d8:	b580      	push	{r7, lr}
   854da:	b082      	sub	sp, #8
   854dc:	af00      	add	r7, sp, #0
   854de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   854e0:	687b      	ldr	r3, [r7, #4]
   854e2:	2b00      	cmp	r3, #0
   854e4:	d102      	bne.n	854ec <vTaskSetTimeOutState+0x14>
   854e6:	4b07      	ldr	r3, [pc, #28]	; (85504 <vTaskSetTimeOutState+0x2c>)
   854e8:	4798      	blx	r3
   854ea:	e7fe      	b.n	854ea <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   854ec:	4b06      	ldr	r3, [pc, #24]	; (85508 <vTaskSetTimeOutState+0x30>)
   854ee:	681a      	ldr	r2, [r3, #0]
   854f0:	687b      	ldr	r3, [r7, #4]
   854f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   854f4:	4b05      	ldr	r3, [pc, #20]	; (8550c <vTaskSetTimeOutState+0x34>)
   854f6:	681a      	ldr	r2, [r3, #0]
   854f8:	687b      	ldr	r3, [r7, #4]
   854fa:	605a      	str	r2, [r3, #4]
}
   854fc:	3708      	adds	r7, #8
   854fe:	46bd      	mov	sp, r7
   85500:	bd80      	pop	{r7, pc}
   85502:	bf00      	nop
   85504:	00083ea5 	.word	0x00083ea5
   85508:	2007a5f8 	.word	0x2007a5f8
   8550c:	2007a5e4 	.word	0x2007a5e4

00085510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   85510:	b580      	push	{r7, lr}
   85512:	b084      	sub	sp, #16
   85514:	af00      	add	r7, sp, #0
   85516:	6078      	str	r0, [r7, #4]
   85518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   8551a:	687b      	ldr	r3, [r7, #4]
   8551c:	2b00      	cmp	r3, #0
   8551e:	d102      	bne.n	85526 <xTaskCheckForTimeOut+0x16>
   85520:	4b21      	ldr	r3, [pc, #132]	; (855a8 <xTaskCheckForTimeOut+0x98>)
   85522:	4798      	blx	r3
   85524:	e7fe      	b.n	85524 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   85526:	683b      	ldr	r3, [r7, #0]
   85528:	2b00      	cmp	r3, #0
   8552a:	d102      	bne.n	85532 <xTaskCheckForTimeOut+0x22>
   8552c:	4b1e      	ldr	r3, [pc, #120]	; (855a8 <xTaskCheckForTimeOut+0x98>)
   8552e:	4798      	blx	r3
   85530:	e7fe      	b.n	85530 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   85532:	4b1e      	ldr	r3, [pc, #120]	; (855ac <xTaskCheckForTimeOut+0x9c>)
   85534:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   85536:	4b1e      	ldr	r3, [pc, #120]	; (855b0 <xTaskCheckForTimeOut+0xa0>)
   85538:	681b      	ldr	r3, [r3, #0]
   8553a:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   8553c:	683b      	ldr	r3, [r7, #0]
   8553e:	681b      	ldr	r3, [r3, #0]
   85540:	f1b3 3fff 	cmp.w	r3, #4294967295
   85544:	d102      	bne.n	8554c <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   85546:	2300      	movs	r3, #0
   85548:	60fb      	str	r3, [r7, #12]
   8554a:	e026      	b.n	8559a <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   8554c:	687b      	ldr	r3, [r7, #4]
   8554e:	681a      	ldr	r2, [r3, #0]
   85550:	4b18      	ldr	r3, [pc, #96]	; (855b4 <xTaskCheckForTimeOut+0xa4>)
   85552:	681b      	ldr	r3, [r3, #0]
   85554:	429a      	cmp	r2, r3
   85556:	d007      	beq.n	85568 <xTaskCheckForTimeOut+0x58>
   85558:	687b      	ldr	r3, [r7, #4]
   8555a:	685a      	ldr	r2, [r3, #4]
   8555c:	68bb      	ldr	r3, [r7, #8]
   8555e:	429a      	cmp	r2, r3
   85560:	d802      	bhi.n	85568 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   85562:	2301      	movs	r3, #1
   85564:	60fb      	str	r3, [r7, #12]
   85566:	e018      	b.n	8559a <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   85568:	687b      	ldr	r3, [r7, #4]
   8556a:	685b      	ldr	r3, [r3, #4]
   8556c:	68ba      	ldr	r2, [r7, #8]
   8556e:	1ad2      	subs	r2, r2, r3
   85570:	683b      	ldr	r3, [r7, #0]
   85572:	681b      	ldr	r3, [r3, #0]
   85574:	429a      	cmp	r2, r3
   85576:	d20e      	bcs.n	85596 <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   85578:	683b      	ldr	r3, [r7, #0]
   8557a:	681a      	ldr	r2, [r3, #0]
   8557c:	687b      	ldr	r3, [r7, #4]
   8557e:	6859      	ldr	r1, [r3, #4]
   85580:	68bb      	ldr	r3, [r7, #8]
   85582:	1acb      	subs	r3, r1, r3
   85584:	441a      	add	r2, r3
   85586:	683b      	ldr	r3, [r7, #0]
   85588:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8558a:	6878      	ldr	r0, [r7, #4]
   8558c:	4b0a      	ldr	r3, [pc, #40]	; (855b8 <xTaskCheckForTimeOut+0xa8>)
   8558e:	4798      	blx	r3
			xReturn = pdFALSE;
   85590:	2300      	movs	r3, #0
   85592:	60fb      	str	r3, [r7, #12]
   85594:	e001      	b.n	8559a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   85596:	2301      	movs	r3, #1
   85598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8559a:	4b08      	ldr	r3, [pc, #32]	; (855bc <xTaskCheckForTimeOut+0xac>)
   8559c:	4798      	blx	r3

	return xReturn;
   8559e:	68fb      	ldr	r3, [r7, #12]
}
   855a0:	4618      	mov	r0, r3
   855a2:	3710      	adds	r7, #16
   855a4:	46bd      	mov	sp, r7
   855a6:	bd80      	pop	{r7, pc}
   855a8:	00083ea5 	.word	0x00083ea5
   855ac:	00083e29 	.word	0x00083e29
   855b0:	2007a5e4 	.word	0x2007a5e4
   855b4:	2007a5f8 	.word	0x2007a5f8
   855b8:	000854d9 	.word	0x000854d9
   855bc:	00083e6d 	.word	0x00083e6d

000855c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   855c0:	b480      	push	{r7}
   855c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   855c4:	4b03      	ldr	r3, [pc, #12]	; (855d4 <vTaskMissedYield+0x14>)
   855c6:	2201      	movs	r2, #1
   855c8:	601a      	str	r2, [r3, #0]
}
   855ca:	46bd      	mov	sp, r7
   855cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   855d0:	4770      	bx	lr
   855d2:	bf00      	nop
   855d4:	2007a5f4 	.word	0x2007a5f4

000855d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   855d8:	b580      	push	{r7, lr}
   855da:	b082      	sub	sp, #8
   855dc:	af00      	add	r7, sp, #0
   855de:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   855e0:	4b04      	ldr	r3, [pc, #16]	; (855f4 <prvIdleTask+0x1c>)
   855e2:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   855e4:	4b04      	ldr	r3, [pc, #16]	; (855f8 <prvIdleTask+0x20>)
   855e6:	681b      	ldr	r3, [r3, #0]
   855e8:	2b01      	cmp	r3, #1
   855ea:	d901      	bls.n	855f0 <prvIdleTask+0x18>
			{
				taskYIELD();
   855ec:	4b03      	ldr	r3, [pc, #12]	; (855fc <prvIdleTask+0x24>)
   855ee:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   855f0:	e7f6      	b.n	855e0 <prvIdleTask+0x8>
   855f2:	bf00      	nop
   855f4:	00085719 	.word	0x00085719
   855f8:	2007a50c 	.word	0x2007a50c
   855fc:	00083e09 	.word	0x00083e09

00085600 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   85600:	b580      	push	{r7, lr}
   85602:	b086      	sub	sp, #24
   85604:	af00      	add	r7, sp, #0
   85606:	60f8      	str	r0, [r7, #12]
   85608:	60b9      	str	r1, [r7, #8]
   8560a:	607a      	str	r2, [r7, #4]
   8560c:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   8560e:	2300      	movs	r3, #0
   85610:	617b      	str	r3, [r7, #20]
   85612:	e012      	b.n	8563a <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   85614:	68ba      	ldr	r2, [r7, #8]
   85616:	697b      	ldr	r3, [r7, #20]
   85618:	4413      	add	r3, r2
   8561a:	781a      	ldrb	r2, [r3, #0]
   8561c:	68f9      	ldr	r1, [r7, #12]
   8561e:	697b      	ldr	r3, [r7, #20]
   85620:	440b      	add	r3, r1
   85622:	3330      	adds	r3, #48	; 0x30
   85624:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   85626:	68ba      	ldr	r2, [r7, #8]
   85628:	697b      	ldr	r3, [r7, #20]
   8562a:	4413      	add	r3, r2
   8562c:	781b      	ldrb	r3, [r3, #0]
   8562e:	2b00      	cmp	r3, #0
   85630:	d100      	bne.n	85634 <prvInitialiseTCBVariables+0x34>
		{
			break;
   85632:	e005      	b.n	85640 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   85634:	697b      	ldr	r3, [r7, #20]
   85636:	3301      	adds	r3, #1
   85638:	617b      	str	r3, [r7, #20]
   8563a:	697b      	ldr	r3, [r7, #20]
   8563c:	2b09      	cmp	r3, #9
   8563e:	d9e9      	bls.n	85614 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   85640:	68fb      	ldr	r3, [r7, #12]
   85642:	2200      	movs	r2, #0
   85644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   85648:	687b      	ldr	r3, [r7, #4]
   8564a:	2b04      	cmp	r3, #4
   8564c:	d901      	bls.n	85652 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   8564e:	2304      	movs	r3, #4
   85650:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   85652:	68fb      	ldr	r3, [r7, #12]
   85654:	687a      	ldr	r2, [r7, #4]
   85656:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   85658:	68fb      	ldr	r3, [r7, #12]
   8565a:	687a      	ldr	r2, [r7, #4]
   8565c:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   8565e:	68fb      	ldr	r3, [r7, #12]
   85660:	2200      	movs	r2, #0
   85662:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   85664:	68fb      	ldr	r3, [r7, #12]
   85666:	3304      	adds	r3, #4
   85668:	4618      	mov	r0, r3
   8566a:	4b0a      	ldr	r3, [pc, #40]	; (85694 <prvInitialiseTCBVariables+0x94>)
   8566c:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   8566e:	68fb      	ldr	r3, [r7, #12]
   85670:	3318      	adds	r3, #24
   85672:	4618      	mov	r0, r3
   85674:	4b07      	ldr	r3, [pc, #28]	; (85694 <prvInitialiseTCBVariables+0x94>)
   85676:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   85678:	68fb      	ldr	r3, [r7, #12]
   8567a:	68fa      	ldr	r2, [r7, #12]
   8567c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8567e:	687b      	ldr	r3, [r7, #4]
   85680:	f1c3 0205 	rsb	r2, r3, #5
   85684:	68fb      	ldr	r3, [r7, #12]
   85686:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   85688:	68fb      	ldr	r3, [r7, #12]
   8568a:	68fa      	ldr	r2, [r7, #12]
   8568c:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   8568e:	3718      	adds	r7, #24
   85690:	46bd      	mov	sp, r7
   85692:	bd80      	pop	{r7, pc}
   85694:	00083b5d 	.word	0x00083b5d

00085698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   85698:	b580      	push	{r7, lr}
   8569a:	b082      	sub	sp, #8
   8569c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   8569e:	2300      	movs	r3, #0
   856a0:	607b      	str	r3, [r7, #4]
   856a2:	e00c      	b.n	856be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   856a4:	687a      	ldr	r2, [r7, #4]
   856a6:	4613      	mov	r3, r2
   856a8:	009b      	lsls	r3, r3, #2
   856aa:	4413      	add	r3, r2
   856ac:	009b      	lsls	r3, r3, #2
   856ae:	4a11      	ldr	r2, [pc, #68]	; (856f4 <prvInitialiseTaskLists+0x5c>)
   856b0:	4413      	add	r3, r2
   856b2:	4618      	mov	r0, r3
   856b4:	4b10      	ldr	r3, [pc, #64]	; (856f8 <prvInitialiseTaskLists+0x60>)
   856b6:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   856b8:	687b      	ldr	r3, [r7, #4]
   856ba:	3301      	adds	r3, #1
   856bc:	607b      	str	r3, [r7, #4]
   856be:	687b      	ldr	r3, [r7, #4]
   856c0:	2b04      	cmp	r3, #4
   856c2:	d9ef      	bls.n	856a4 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   856c4:	480d      	ldr	r0, [pc, #52]	; (856fc <prvInitialiseTaskLists+0x64>)
   856c6:	4b0c      	ldr	r3, [pc, #48]	; (856f8 <prvInitialiseTaskLists+0x60>)
   856c8:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   856ca:	480d      	ldr	r0, [pc, #52]	; (85700 <prvInitialiseTaskLists+0x68>)
   856cc:	4b0a      	ldr	r3, [pc, #40]	; (856f8 <prvInitialiseTaskLists+0x60>)
   856ce:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   856d0:	480c      	ldr	r0, [pc, #48]	; (85704 <prvInitialiseTaskLists+0x6c>)
   856d2:	4b09      	ldr	r3, [pc, #36]	; (856f8 <prvInitialiseTaskLists+0x60>)
   856d4:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   856d6:	480c      	ldr	r0, [pc, #48]	; (85708 <prvInitialiseTaskLists+0x70>)
   856d8:	4b07      	ldr	r3, [pc, #28]	; (856f8 <prvInitialiseTaskLists+0x60>)
   856da:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   856dc:	480b      	ldr	r0, [pc, #44]	; (8570c <prvInitialiseTaskLists+0x74>)
   856de:	4b06      	ldr	r3, [pc, #24]	; (856f8 <prvInitialiseTaskLists+0x60>)
   856e0:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   856e2:	4b0b      	ldr	r3, [pc, #44]	; (85710 <prvInitialiseTaskLists+0x78>)
   856e4:	4a05      	ldr	r2, [pc, #20]	; (856fc <prvInitialiseTaskLists+0x64>)
   856e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   856e8:	4b0a      	ldr	r3, [pc, #40]	; (85714 <prvInitialiseTaskLists+0x7c>)
   856ea:	4a05      	ldr	r2, [pc, #20]	; (85700 <prvInitialiseTaskLists+0x68>)
   856ec:	601a      	str	r2, [r3, #0]
}
   856ee:	3708      	adds	r7, #8
   856f0:	46bd      	mov	sp, r7
   856f2:	bd80      	pop	{r7, pc}
   856f4:	2007a50c 	.word	0x2007a50c
   856f8:	00083b1d 	.word	0x00083b1d
   856fc:	2007a570 	.word	0x2007a570
   85700:	2007a584 	.word	0x2007a584
   85704:	2007a5a0 	.word	0x2007a5a0
   85708:	2007a5b4 	.word	0x2007a5b4
   8570c:	2007a5cc 	.word	0x2007a5cc
   85710:	2007a598 	.word	0x2007a598
   85714:	2007a59c 	.word	0x2007a59c

00085718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   85718:	b580      	push	{r7, lr}
   8571a:	b082      	sub	sp, #8
   8571c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   8571e:	e028      	b.n	85772 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   85720:	4b17      	ldr	r3, [pc, #92]	; (85780 <prvCheckTasksWaitingTermination+0x68>)
   85722:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   85724:	4b17      	ldr	r3, [pc, #92]	; (85784 <prvCheckTasksWaitingTermination+0x6c>)
   85726:	681b      	ldr	r3, [r3, #0]
   85728:	2b00      	cmp	r3, #0
   8572a:	bf14      	ite	ne
   8572c:	2300      	movne	r3, #0
   8572e:	2301      	moveq	r3, #1
   85730:	b2db      	uxtb	r3, r3
   85732:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   85734:	4b14      	ldr	r3, [pc, #80]	; (85788 <prvCheckTasksWaitingTermination+0x70>)
   85736:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   85738:	687b      	ldr	r3, [r7, #4]
   8573a:	2b00      	cmp	r3, #0
   8573c:	d119      	bne.n	85772 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   8573e:	4b13      	ldr	r3, [pc, #76]	; (8578c <prvCheckTasksWaitingTermination+0x74>)
   85740:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   85742:	4b10      	ldr	r3, [pc, #64]	; (85784 <prvCheckTasksWaitingTermination+0x6c>)
   85744:	68db      	ldr	r3, [r3, #12]
   85746:	68db      	ldr	r3, [r3, #12]
   85748:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8574a:	683b      	ldr	r3, [r7, #0]
   8574c:	3304      	adds	r3, #4
   8574e:	4618      	mov	r0, r3
   85750:	4b0f      	ldr	r3, [pc, #60]	; (85790 <prvCheckTasksWaitingTermination+0x78>)
   85752:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   85754:	4b0f      	ldr	r3, [pc, #60]	; (85794 <prvCheckTasksWaitingTermination+0x7c>)
   85756:	681b      	ldr	r3, [r3, #0]
   85758:	1e5a      	subs	r2, r3, #1
   8575a:	4b0e      	ldr	r3, [pc, #56]	; (85794 <prvCheckTasksWaitingTermination+0x7c>)
   8575c:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   8575e:	4b0e      	ldr	r3, [pc, #56]	; (85798 <prvCheckTasksWaitingTermination+0x80>)
   85760:	681b      	ldr	r3, [r3, #0]
   85762:	1e5a      	subs	r2, r3, #1
   85764:	4b0c      	ldr	r3, [pc, #48]	; (85798 <prvCheckTasksWaitingTermination+0x80>)
   85766:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   85768:	4b0c      	ldr	r3, [pc, #48]	; (8579c <prvCheckTasksWaitingTermination+0x84>)
   8576a:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   8576c:	6838      	ldr	r0, [r7, #0]
   8576e:	4b0c      	ldr	r3, [pc, #48]	; (857a0 <prvCheckTasksWaitingTermination+0x88>)
   85770:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   85772:	4b09      	ldr	r3, [pc, #36]	; (85798 <prvCheckTasksWaitingTermination+0x80>)
   85774:	681b      	ldr	r3, [r3, #0]
   85776:	2b00      	cmp	r3, #0
   85778:	d1d2      	bne.n	85720 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   8577a:	3708      	adds	r7, #8
   8577c:	46bd      	mov	sp, r7
   8577e:	bd80      	pop	{r7, pc}
   85780:	00084f15 	.word	0x00084f15
   85784:	2007a5b4 	.word	0x2007a5b4
   85788:	00084f31 	.word	0x00084f31
   8578c:	00083e29 	.word	0x00083e29
   85790:	00083c2d 	.word	0x00083c2d
   85794:	2007a5e0 	.word	0x2007a5e0
   85798:	2007a5c8 	.word	0x2007a5c8
   8579c:	00083e6d 	.word	0x00083e6d
   857a0:	00085885 	.word	0x00085885

000857a4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   857a4:	b580      	push	{r7, lr}
   857a6:	b082      	sub	sp, #8
   857a8:	af00      	add	r7, sp, #0
   857aa:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   857ac:	4b13      	ldr	r3, [pc, #76]	; (857fc <prvAddCurrentTaskToDelayedList+0x58>)
   857ae:	681b      	ldr	r3, [r3, #0]
   857b0:	687a      	ldr	r2, [r7, #4]
   857b2:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   857b4:	4b12      	ldr	r3, [pc, #72]	; (85800 <prvAddCurrentTaskToDelayedList+0x5c>)
   857b6:	681b      	ldr	r3, [r3, #0]
   857b8:	687a      	ldr	r2, [r7, #4]
   857ba:	429a      	cmp	r2, r3
   857bc:	d209      	bcs.n	857d2 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   857be:	4b11      	ldr	r3, [pc, #68]	; (85804 <prvAddCurrentTaskToDelayedList+0x60>)
   857c0:	681a      	ldr	r2, [r3, #0]
   857c2:	4b0e      	ldr	r3, [pc, #56]	; (857fc <prvAddCurrentTaskToDelayedList+0x58>)
   857c4:	681b      	ldr	r3, [r3, #0]
   857c6:	3304      	adds	r3, #4
   857c8:	4610      	mov	r0, r2
   857ca:	4619      	mov	r1, r3
   857cc:	4b0e      	ldr	r3, [pc, #56]	; (85808 <prvAddCurrentTaskToDelayedList+0x64>)
   857ce:	4798      	blx	r3
   857d0:	e010      	b.n	857f4 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   857d2:	4b0e      	ldr	r3, [pc, #56]	; (8580c <prvAddCurrentTaskToDelayedList+0x68>)
   857d4:	681a      	ldr	r2, [r3, #0]
   857d6:	4b09      	ldr	r3, [pc, #36]	; (857fc <prvAddCurrentTaskToDelayedList+0x58>)
   857d8:	681b      	ldr	r3, [r3, #0]
   857da:	3304      	adds	r3, #4
   857dc:	4610      	mov	r0, r2
   857de:	4619      	mov	r1, r3
   857e0:	4b09      	ldr	r3, [pc, #36]	; (85808 <prvAddCurrentTaskToDelayedList+0x64>)
   857e2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   857e4:	4b0a      	ldr	r3, [pc, #40]	; (85810 <prvAddCurrentTaskToDelayedList+0x6c>)
   857e6:	681b      	ldr	r3, [r3, #0]
   857e8:	687a      	ldr	r2, [r7, #4]
   857ea:	429a      	cmp	r2, r3
   857ec:	d202      	bcs.n	857f4 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   857ee:	4b08      	ldr	r3, [pc, #32]	; (85810 <prvAddCurrentTaskToDelayedList+0x6c>)
   857f0:	687a      	ldr	r2, [r7, #4]
   857f2:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   857f4:	3708      	adds	r7, #8
   857f6:	46bd      	mov	sp, r7
   857f8:	bd80      	pop	{r7, pc}
   857fa:	bf00      	nop
   857fc:	2007a508 	.word	0x2007a508
   85800:	2007a5e4 	.word	0x2007a5e4
   85804:	2007a59c 	.word	0x2007a59c
   85808:	00083bbd 	.word	0x00083bbd
   8580c:	2007a598 	.word	0x2007a598
   85810:	20070008 	.word	0x20070008

00085814 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   85814:	b580      	push	{r7, lr}
   85816:	b084      	sub	sp, #16
   85818:	af00      	add	r7, sp, #0
   8581a:	4603      	mov	r3, r0
   8581c:	6039      	str	r1, [r7, #0]
   8581e:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   85820:	2048      	movs	r0, #72	; 0x48
   85822:	4b15      	ldr	r3, [pc, #84]	; (85878 <prvAllocateTCBAndStack+0x64>)
   85824:	4798      	blx	r3
   85826:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   85828:	68fb      	ldr	r3, [r7, #12]
   8582a:	2b00      	cmp	r3, #0
   8582c:	d01f      	beq.n	8586e <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8582e:	683b      	ldr	r3, [r7, #0]
   85830:	2b00      	cmp	r3, #0
   85832:	d106      	bne.n	85842 <prvAllocateTCBAndStack+0x2e>
   85834:	88fb      	ldrh	r3, [r7, #6]
   85836:	009b      	lsls	r3, r3, #2
   85838:	4618      	mov	r0, r3
   8583a:	4b0f      	ldr	r3, [pc, #60]	; (85878 <prvAllocateTCBAndStack+0x64>)
   8583c:	4798      	blx	r3
   8583e:	4603      	mov	r3, r0
   85840:	e000      	b.n	85844 <prvAllocateTCBAndStack+0x30>
   85842:	683b      	ldr	r3, [r7, #0]
   85844:	68fa      	ldr	r2, [r7, #12]
   85846:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   85848:	68fb      	ldr	r3, [r7, #12]
   8584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8584c:	2b00      	cmp	r3, #0
   8584e:	d105      	bne.n	8585c <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   85850:	68f8      	ldr	r0, [r7, #12]
   85852:	4b0a      	ldr	r3, [pc, #40]	; (8587c <prvAllocateTCBAndStack+0x68>)
   85854:	4798      	blx	r3
			pxNewTCB = NULL;
   85856:	2300      	movs	r3, #0
   85858:	60fb      	str	r3, [r7, #12]
   8585a:	e008      	b.n	8586e <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   8585c:	68fb      	ldr	r3, [r7, #12]
   8585e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   85860:	88fb      	ldrh	r3, [r7, #6]
   85862:	009b      	lsls	r3, r3, #2
   85864:	4610      	mov	r0, r2
   85866:	21a5      	movs	r1, #165	; 0xa5
   85868:	461a      	mov	r2, r3
   8586a:	4b05      	ldr	r3, [pc, #20]	; (85880 <prvAllocateTCBAndStack+0x6c>)
   8586c:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   8586e:	68fb      	ldr	r3, [r7, #12]
}
   85870:	4618      	mov	r0, r3
   85872:	3710      	adds	r7, #16
   85874:	46bd      	mov	sp, r7
   85876:	bd80      	pop	{r7, pc}
   85878:	00083fc9 	.word	0x00083fc9
   8587c:	00084141 	.word	0x00084141
   85880:	0008746d 	.word	0x0008746d

00085884 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   85884:	b580      	push	{r7, lr}
   85886:	b082      	sub	sp, #8
   85888:	af00      	add	r7, sp, #0
   8588a:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   8588c:	687b      	ldr	r3, [r7, #4]
   8588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85890:	4618      	mov	r0, r3
   85892:	4b04      	ldr	r3, [pc, #16]	; (858a4 <prvDeleteTCB+0x20>)
   85894:	4798      	blx	r3
		vPortFree( pxTCB );
   85896:	6878      	ldr	r0, [r7, #4]
   85898:	4b02      	ldr	r3, [pc, #8]	; (858a4 <prvDeleteTCB+0x20>)
   8589a:	4798      	blx	r3
	}
   8589c:	3708      	adds	r7, #8
   8589e:	46bd      	mov	sp, r7
   858a0:	bd80      	pop	{r7, pc}
   858a2:	bf00      	nop
   858a4:	00084141 	.word	0x00084141

000858a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   858a8:	b480      	push	{r7}
   858aa:	b083      	sub	sp, #12
   858ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   858ae:	4b0e      	ldr	r3, [pc, #56]	; (858e8 <prvResetNextTaskUnblockTime+0x40>)
   858b0:	681b      	ldr	r3, [r3, #0]
   858b2:	681b      	ldr	r3, [r3, #0]
   858b4:	2b00      	cmp	r3, #0
   858b6:	d101      	bne.n	858bc <prvResetNextTaskUnblockTime+0x14>
   858b8:	2301      	movs	r3, #1
   858ba:	e000      	b.n	858be <prvResetNextTaskUnblockTime+0x16>
   858bc:	2300      	movs	r3, #0
   858be:	2b00      	cmp	r3, #0
   858c0:	d004      	beq.n	858cc <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   858c2:	4b0a      	ldr	r3, [pc, #40]	; (858ec <prvResetNextTaskUnblockTime+0x44>)
   858c4:	f04f 32ff 	mov.w	r2, #4294967295
   858c8:	601a      	str	r2, [r3, #0]
   858ca:	e008      	b.n	858de <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   858cc:	4b06      	ldr	r3, [pc, #24]	; (858e8 <prvResetNextTaskUnblockTime+0x40>)
   858ce:	681b      	ldr	r3, [r3, #0]
   858d0:	68db      	ldr	r3, [r3, #12]
   858d2:	68db      	ldr	r3, [r3, #12]
   858d4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   858d6:	687b      	ldr	r3, [r7, #4]
   858d8:	685a      	ldr	r2, [r3, #4]
   858da:	4b04      	ldr	r3, [pc, #16]	; (858ec <prvResetNextTaskUnblockTime+0x44>)
   858dc:	601a      	str	r2, [r3, #0]
	}
}
   858de:	370c      	adds	r7, #12
   858e0:	46bd      	mov	sp, r7
   858e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   858e6:	4770      	bx	lr
   858e8:	2007a598 	.word	0x2007a598
   858ec:	20070008 	.word	0x20070008

000858f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   858f0:	b480      	push	{r7}
   858f2:	b083      	sub	sp, #12
   858f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   858f6:	4b0b      	ldr	r3, [pc, #44]	; (85924 <xTaskGetSchedulerState+0x34>)
   858f8:	681b      	ldr	r3, [r3, #0]
   858fa:	2b00      	cmp	r3, #0
   858fc:	d102      	bne.n	85904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   858fe:	2301      	movs	r3, #1
   85900:	607b      	str	r3, [r7, #4]
   85902:	e008      	b.n	85916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   85904:	4b08      	ldr	r3, [pc, #32]	; (85928 <xTaskGetSchedulerState+0x38>)
   85906:	681b      	ldr	r3, [r3, #0]
   85908:	2b00      	cmp	r3, #0
   8590a:	d102      	bne.n	85912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   8590c:	2302      	movs	r3, #2
   8590e:	607b      	str	r3, [r7, #4]
   85910:	e001      	b.n	85916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   85912:	2300      	movs	r3, #0
   85914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   85916:	687b      	ldr	r3, [r7, #4]
	}
   85918:	4618      	mov	r0, r3
   8591a:	370c      	adds	r7, #12
   8591c:	46bd      	mov	sp, r7
   8591e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85922:	4770      	bx	lr
   85924:	2007a5ec 	.word	0x2007a5ec
   85928:	2007a600 	.word	0x2007a600

0008592c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   8592c:	b580      	push	{r7, lr}
   8592e:	b084      	sub	sp, #16
   85930:	af00      	add	r7, sp, #0
   85932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   85934:	687b      	ldr	r3, [r7, #4]
   85936:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   85938:	687b      	ldr	r3, [r7, #4]
   8593a:	2b00      	cmp	r3, #0
   8593c:	d062      	beq.n	85a04 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8593e:	68fb      	ldr	r3, [r7, #12]
   85940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85942:	4b32      	ldr	r3, [pc, #200]	; (85a0c <vTaskPriorityInherit+0xe0>)
   85944:	681b      	ldr	r3, [r3, #0]
   85946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85948:	429a      	cmp	r2, r3
   8594a:	d25b      	bcs.n	85a04 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   8594c:	68fb      	ldr	r3, [r7, #12]
   8594e:	699b      	ldr	r3, [r3, #24]
   85950:	2b00      	cmp	r3, #0
   85952:	db06      	blt.n	85962 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   85954:	4b2d      	ldr	r3, [pc, #180]	; (85a0c <vTaskPriorityInherit+0xe0>)
   85956:	681b      	ldr	r3, [r3, #0]
   85958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8595a:	f1c3 0205 	rsb	r2, r3, #5
   8595e:	68fb      	ldr	r3, [r7, #12]
   85960:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   85962:	68fb      	ldr	r3, [r7, #12]
   85964:	6959      	ldr	r1, [r3, #20]
   85966:	68fb      	ldr	r3, [r7, #12]
   85968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8596a:	4613      	mov	r3, r2
   8596c:	009b      	lsls	r3, r3, #2
   8596e:	4413      	add	r3, r2
   85970:	009b      	lsls	r3, r3, #2
   85972:	4a27      	ldr	r2, [pc, #156]	; (85a10 <vTaskPriorityInherit+0xe4>)
   85974:	4413      	add	r3, r2
   85976:	4299      	cmp	r1, r3
   85978:	d101      	bne.n	8597e <vTaskPriorityInherit+0x52>
   8597a:	2301      	movs	r3, #1
   8597c:	e000      	b.n	85980 <vTaskPriorityInherit+0x54>
   8597e:	2300      	movs	r3, #0
   85980:	2b00      	cmp	r3, #0
   85982:	d03a      	beq.n	859fa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   85984:	68fb      	ldr	r3, [r7, #12]
   85986:	3304      	adds	r3, #4
   85988:	4618      	mov	r0, r3
   8598a:	4b22      	ldr	r3, [pc, #136]	; (85a14 <vTaskPriorityInherit+0xe8>)
   8598c:	4798      	blx	r3
   8598e:	4603      	mov	r3, r0
   85990:	2b00      	cmp	r3, #0
   85992:	d115      	bne.n	859c0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   85994:	68fb      	ldr	r3, [r7, #12]
   85996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85998:	491d      	ldr	r1, [pc, #116]	; (85a10 <vTaskPriorityInherit+0xe4>)
   8599a:	4613      	mov	r3, r2
   8599c:	009b      	lsls	r3, r3, #2
   8599e:	4413      	add	r3, r2
   859a0:	009b      	lsls	r3, r3, #2
   859a2:	440b      	add	r3, r1
   859a4:	681b      	ldr	r3, [r3, #0]
   859a6:	2b00      	cmp	r3, #0
   859a8:	d10a      	bne.n	859c0 <vTaskPriorityInherit+0x94>
   859aa:	68fb      	ldr	r3, [r7, #12]
   859ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   859ae:	2201      	movs	r2, #1
   859b0:	fa02 f303 	lsl.w	r3, r2, r3
   859b4:	43da      	mvns	r2, r3
   859b6:	4b18      	ldr	r3, [pc, #96]	; (85a18 <vTaskPriorityInherit+0xec>)
   859b8:	681b      	ldr	r3, [r3, #0]
   859ba:	401a      	ands	r2, r3
   859bc:	4b16      	ldr	r3, [pc, #88]	; (85a18 <vTaskPriorityInherit+0xec>)
   859be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   859c0:	4b12      	ldr	r3, [pc, #72]	; (85a0c <vTaskPriorityInherit+0xe0>)
   859c2:	681b      	ldr	r3, [r3, #0]
   859c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   859c6:	68fb      	ldr	r3, [r7, #12]
   859c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   859ca:	68fb      	ldr	r3, [r7, #12]
   859cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   859ce:	2201      	movs	r2, #1
   859d0:	409a      	lsls	r2, r3
   859d2:	4b11      	ldr	r3, [pc, #68]	; (85a18 <vTaskPriorityInherit+0xec>)
   859d4:	681b      	ldr	r3, [r3, #0]
   859d6:	431a      	orrs	r2, r3
   859d8:	4b0f      	ldr	r3, [pc, #60]	; (85a18 <vTaskPriorityInherit+0xec>)
   859da:	601a      	str	r2, [r3, #0]
   859dc:	68fb      	ldr	r3, [r7, #12]
   859de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   859e0:	4613      	mov	r3, r2
   859e2:	009b      	lsls	r3, r3, #2
   859e4:	4413      	add	r3, r2
   859e6:	009b      	lsls	r3, r3, #2
   859e8:	4a09      	ldr	r2, [pc, #36]	; (85a10 <vTaskPriorityInherit+0xe4>)
   859ea:	441a      	add	r2, r3
   859ec:	68fb      	ldr	r3, [r7, #12]
   859ee:	3304      	adds	r3, #4
   859f0:	4610      	mov	r0, r2
   859f2:	4619      	mov	r1, r3
   859f4:	4b09      	ldr	r3, [pc, #36]	; (85a1c <vTaskPriorityInherit+0xf0>)
   859f6:	4798      	blx	r3
   859f8:	e004      	b.n	85a04 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   859fa:	4b04      	ldr	r3, [pc, #16]	; (85a0c <vTaskPriorityInherit+0xe0>)
   859fc:	681b      	ldr	r3, [r3, #0]
   859fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85a00:	68fb      	ldr	r3, [r7, #12]
   85a02:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   85a04:	3710      	adds	r7, #16
   85a06:	46bd      	mov	sp, r7
   85a08:	bd80      	pop	{r7, pc}
   85a0a:	bf00      	nop
   85a0c:	2007a508 	.word	0x2007a508
   85a10:	2007a50c 	.word	0x2007a50c
   85a14:	00083c2d 	.word	0x00083c2d
   85a18:	2007a5e8 	.word	0x2007a5e8
   85a1c:	00083b75 	.word	0x00083b75

00085a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   85a20:	b580      	push	{r7, lr}
   85a22:	b084      	sub	sp, #16
   85a24:	af00      	add	r7, sp, #0
   85a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   85a28:	687b      	ldr	r3, [r7, #4]
   85a2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   85a2c:	2300      	movs	r3, #0
   85a2e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   85a30:	687b      	ldr	r3, [r7, #4]
   85a32:	2b00      	cmp	r3, #0
   85a34:	d056      	beq.n	85ae4 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   85a36:	68bb      	ldr	r3, [r7, #8]
   85a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   85a3a:	2b00      	cmp	r3, #0
   85a3c:	d102      	bne.n	85a44 <xTaskPriorityDisinherit+0x24>
   85a3e:	4b2c      	ldr	r3, [pc, #176]	; (85af0 <xTaskPriorityDisinherit+0xd0>)
   85a40:	4798      	blx	r3
   85a42:	e7fe      	b.n	85a42 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   85a44:	68bb      	ldr	r3, [r7, #8]
   85a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   85a48:	1e5a      	subs	r2, r3, #1
   85a4a:	68bb      	ldr	r3, [r7, #8]
   85a4c:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   85a4e:	68bb      	ldr	r3, [r7, #8]
   85a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85a52:	68bb      	ldr	r3, [r7, #8]
   85a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   85a56:	429a      	cmp	r2, r3
   85a58:	d044      	beq.n	85ae4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   85a5a:	68bb      	ldr	r3, [r7, #8]
   85a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   85a5e:	2b00      	cmp	r3, #0
   85a60:	d140      	bne.n	85ae4 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   85a62:	68bb      	ldr	r3, [r7, #8]
   85a64:	3304      	adds	r3, #4
   85a66:	4618      	mov	r0, r3
   85a68:	4b22      	ldr	r3, [pc, #136]	; (85af4 <xTaskPriorityDisinherit+0xd4>)
   85a6a:	4798      	blx	r3
   85a6c:	4603      	mov	r3, r0
   85a6e:	2b00      	cmp	r3, #0
   85a70:	d115      	bne.n	85a9e <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   85a72:	68bb      	ldr	r3, [r7, #8]
   85a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85a76:	4920      	ldr	r1, [pc, #128]	; (85af8 <xTaskPriorityDisinherit+0xd8>)
   85a78:	4613      	mov	r3, r2
   85a7a:	009b      	lsls	r3, r3, #2
   85a7c:	4413      	add	r3, r2
   85a7e:	009b      	lsls	r3, r3, #2
   85a80:	440b      	add	r3, r1
   85a82:	681b      	ldr	r3, [r3, #0]
   85a84:	2b00      	cmp	r3, #0
   85a86:	d10a      	bne.n	85a9e <xTaskPriorityDisinherit+0x7e>
   85a88:	68bb      	ldr	r3, [r7, #8]
   85a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85a8c:	2201      	movs	r2, #1
   85a8e:	fa02 f303 	lsl.w	r3, r2, r3
   85a92:	43da      	mvns	r2, r3
   85a94:	4b19      	ldr	r3, [pc, #100]	; (85afc <xTaskPriorityDisinherit+0xdc>)
   85a96:	681b      	ldr	r3, [r3, #0]
   85a98:	401a      	ands	r2, r3
   85a9a:	4b18      	ldr	r3, [pc, #96]	; (85afc <xTaskPriorityDisinherit+0xdc>)
   85a9c:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   85a9e:	68bb      	ldr	r3, [r7, #8]
   85aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   85aa2:	68bb      	ldr	r3, [r7, #8]
   85aa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   85aa6:	68bb      	ldr	r3, [r7, #8]
   85aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85aaa:	f1c3 0205 	rsb	r2, r3, #5
   85aae:	68bb      	ldr	r3, [r7, #8]
   85ab0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   85ab2:	68bb      	ldr	r3, [r7, #8]
   85ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85ab6:	2201      	movs	r2, #1
   85ab8:	409a      	lsls	r2, r3
   85aba:	4b10      	ldr	r3, [pc, #64]	; (85afc <xTaskPriorityDisinherit+0xdc>)
   85abc:	681b      	ldr	r3, [r3, #0]
   85abe:	431a      	orrs	r2, r3
   85ac0:	4b0e      	ldr	r3, [pc, #56]	; (85afc <xTaskPriorityDisinherit+0xdc>)
   85ac2:	601a      	str	r2, [r3, #0]
   85ac4:	68bb      	ldr	r3, [r7, #8]
   85ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   85ac8:	4613      	mov	r3, r2
   85aca:	009b      	lsls	r3, r3, #2
   85acc:	4413      	add	r3, r2
   85ace:	009b      	lsls	r3, r3, #2
   85ad0:	4a09      	ldr	r2, [pc, #36]	; (85af8 <xTaskPriorityDisinherit+0xd8>)
   85ad2:	441a      	add	r2, r3
   85ad4:	68bb      	ldr	r3, [r7, #8]
   85ad6:	3304      	adds	r3, #4
   85ad8:	4610      	mov	r0, r2
   85ada:	4619      	mov	r1, r3
   85adc:	4b08      	ldr	r3, [pc, #32]	; (85b00 <xTaskPriorityDisinherit+0xe0>)
   85ade:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   85ae0:	2301      	movs	r3, #1
   85ae2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   85ae4:	68fb      	ldr	r3, [r7, #12]
	}
   85ae6:	4618      	mov	r0, r3
   85ae8:	3710      	adds	r7, #16
   85aea:	46bd      	mov	sp, r7
   85aec:	bd80      	pop	{r7, pc}
   85aee:	bf00      	nop
   85af0:	00083ea5 	.word	0x00083ea5
   85af4:	00083c2d 	.word	0x00083c2d
   85af8:	2007a50c 	.word	0x2007a50c
   85afc:	2007a5e8 	.word	0x2007a5e8
   85b00:	00083b75 	.word	0x00083b75

00085b04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   85b04:	b480      	push	{r7}
   85b06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   85b08:	4b07      	ldr	r3, [pc, #28]	; (85b28 <pvTaskIncrementMutexHeldCount+0x24>)
   85b0a:	681b      	ldr	r3, [r3, #0]
   85b0c:	2b00      	cmp	r3, #0
   85b0e:	d004      	beq.n	85b1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   85b10:	4b05      	ldr	r3, [pc, #20]	; (85b28 <pvTaskIncrementMutexHeldCount+0x24>)
   85b12:	681b      	ldr	r3, [r3, #0]
   85b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   85b16:	3201      	adds	r2, #1
   85b18:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   85b1a:	4b03      	ldr	r3, [pc, #12]	; (85b28 <pvTaskIncrementMutexHeldCount+0x24>)
   85b1c:	681b      	ldr	r3, [r3, #0]
	}
   85b1e:	4618      	mov	r0, r3
   85b20:	46bd      	mov	sp, r7
   85b22:	f85d 7b04 	ldr.w	r7, [sp], #4
   85b26:	4770      	bx	lr
   85b28:	2007a508 	.word	0x2007a508

00085b2c <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   85b2c:	b590      	push	{r4, r7, lr}
   85b2e:	b087      	sub	sp, #28
   85b30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   85b32:	2300      	movs	r3, #0
   85b34:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   85b36:	4b10      	ldr	r3, [pc, #64]	; (85b78 <xTimerCreateTimerTask+0x4c>)
   85b38:	4798      	blx	r3

	if( xTimerQueue != NULL )
   85b3a:	4b10      	ldr	r3, [pc, #64]	; (85b7c <xTimerCreateTimerTask+0x50>)
   85b3c:	681b      	ldr	r3, [r3, #0]
   85b3e:	2b00      	cmp	r3, #0
   85b40:	d00f      	beq.n	85b62 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   85b42:	2302      	movs	r3, #2
   85b44:	9300      	str	r3, [sp, #0]
   85b46:	2300      	movs	r3, #0
   85b48:	9301      	str	r3, [sp, #4]
   85b4a:	2300      	movs	r3, #0
   85b4c:	9302      	str	r3, [sp, #8]
   85b4e:	2300      	movs	r3, #0
   85b50:	9303      	str	r3, [sp, #12]
   85b52:	480b      	ldr	r0, [pc, #44]	; (85b80 <xTimerCreateTimerTask+0x54>)
   85b54:	490b      	ldr	r1, [pc, #44]	; (85b84 <xTimerCreateTimerTask+0x58>)
   85b56:	f44f 7282 	mov.w	r2, #260	; 0x104
   85b5a:	2300      	movs	r3, #0
   85b5c:	4c0a      	ldr	r4, [pc, #40]	; (85b88 <xTimerCreateTimerTask+0x5c>)
   85b5e:	47a0      	blx	r4
   85b60:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   85b62:	687b      	ldr	r3, [r7, #4]
   85b64:	2b00      	cmp	r3, #0
   85b66:	d102      	bne.n	85b6e <xTimerCreateTimerTask+0x42>
   85b68:	4b08      	ldr	r3, [pc, #32]	; (85b8c <xTimerCreateTimerTask+0x60>)
   85b6a:	4798      	blx	r3
   85b6c:	e7fe      	b.n	85b6c <xTimerCreateTimerTask+0x40>
	return xReturn;
   85b6e:	687b      	ldr	r3, [r7, #4]
}
   85b70:	4618      	mov	r0, r3
   85b72:	370c      	adds	r7, #12
   85b74:	46bd      	mov	sp, r7
   85b76:	bd90      	pop	{r4, r7, pc}
   85b78:	00086061 	.word	0x00086061
   85b7c:	2007a634 	.word	0x2007a634
   85b80:	00085ca9 	.word	0x00085ca9
   85b84:	0008776c 	.word	0x0008776c
   85b88:	00084c19 	.word	0x00084c19
   85b8c:	00083ea5 	.word	0x00083ea5

00085b90 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   85b90:	b590      	push	{r4, r7, lr}
   85b92:	b089      	sub	sp, #36	; 0x24
   85b94:	af00      	add	r7, sp, #0
   85b96:	60f8      	str	r0, [r7, #12]
   85b98:	60b9      	str	r1, [r7, #8]
   85b9a:	607a      	str	r2, [r7, #4]
   85b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   85b9e:	2300      	movs	r3, #0
   85ba0:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   85ba2:	4b1d      	ldr	r3, [pc, #116]	; (85c18 <xTimerGenericCommand+0x88>)
   85ba4:	681b      	ldr	r3, [r3, #0]
   85ba6:	2b00      	cmp	r3, #0
   85ba8:	d030      	beq.n	85c0c <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   85baa:	68bb      	ldr	r3, [r7, #8]
   85bac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   85bae:	687b      	ldr	r3, [r7, #4]
   85bb0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   85bb2:	68fb      	ldr	r3, [r7, #12]
   85bb4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   85bb6:	68bb      	ldr	r3, [r7, #8]
   85bb8:	2b05      	cmp	r3, #5
   85bba:	dc1c      	bgt.n	85bf6 <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   85bbc:	4b17      	ldr	r3, [pc, #92]	; (85c1c <xTimerGenericCommand+0x8c>)
   85bbe:	4798      	blx	r3
   85bc0:	4603      	mov	r3, r0
   85bc2:	2b02      	cmp	r3, #2
   85bc4:	d10b      	bne.n	85bde <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   85bc6:	4b14      	ldr	r3, [pc, #80]	; (85c18 <xTimerGenericCommand+0x88>)
   85bc8:	681a      	ldr	r2, [r3, #0]
   85bca:	f107 0310 	add.w	r3, r7, #16
   85bce:	4610      	mov	r0, r2
   85bd0:	4619      	mov	r1, r3
   85bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85bd4:	2300      	movs	r3, #0
   85bd6:	4c12      	ldr	r4, [pc, #72]	; (85c20 <xTimerGenericCommand+0x90>)
   85bd8:	47a0      	blx	r4
   85bda:	61f8      	str	r0, [r7, #28]
   85bdc:	e016      	b.n	85c0c <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   85bde:	4b0e      	ldr	r3, [pc, #56]	; (85c18 <xTimerGenericCommand+0x88>)
   85be0:	681a      	ldr	r2, [r3, #0]
   85be2:	f107 0310 	add.w	r3, r7, #16
   85be6:	4610      	mov	r0, r2
   85be8:	4619      	mov	r1, r3
   85bea:	2200      	movs	r2, #0
   85bec:	2300      	movs	r3, #0
   85bee:	4c0c      	ldr	r4, [pc, #48]	; (85c20 <xTimerGenericCommand+0x90>)
   85bf0:	47a0      	blx	r4
   85bf2:	61f8      	str	r0, [r7, #28]
   85bf4:	e00a      	b.n	85c0c <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   85bf6:	4b08      	ldr	r3, [pc, #32]	; (85c18 <xTimerGenericCommand+0x88>)
   85bf8:	681a      	ldr	r2, [r3, #0]
   85bfa:	f107 0310 	add.w	r3, r7, #16
   85bfe:	4610      	mov	r0, r2
   85c00:	4619      	mov	r1, r3
   85c02:	683a      	ldr	r2, [r7, #0]
   85c04:	2300      	movs	r3, #0
   85c06:	4c07      	ldr	r4, [pc, #28]	; (85c24 <xTimerGenericCommand+0x94>)
   85c08:	47a0      	blx	r4
   85c0a:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   85c0c:	69fb      	ldr	r3, [r7, #28]
}
   85c0e:	4618      	mov	r0, r3
   85c10:	3724      	adds	r7, #36	; 0x24
   85c12:	46bd      	mov	sp, r7
   85c14:	bd90      	pop	{r4, r7, pc}
   85c16:	bf00      	nop
   85c18:	2007a634 	.word	0x2007a634
   85c1c:	000858f1 	.word	0x000858f1
   85c20:	000844ad 	.word	0x000844ad
   85c24:	00084671 	.word	0x00084671

00085c28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   85c28:	b590      	push	{r4, r7, lr}
   85c2a:	b087      	sub	sp, #28
   85c2c:	af02      	add	r7, sp, #8
   85c2e:	6078      	str	r0, [r7, #4]
   85c30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   85c32:	4b18      	ldr	r3, [pc, #96]	; (85c94 <prvProcessExpiredTimer+0x6c>)
   85c34:	681b      	ldr	r3, [r3, #0]
   85c36:	68db      	ldr	r3, [r3, #12]
   85c38:	68db      	ldr	r3, [r3, #12]
   85c3a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85c3c:	68fb      	ldr	r3, [r7, #12]
   85c3e:	3304      	adds	r3, #4
   85c40:	4618      	mov	r0, r3
   85c42:	4b15      	ldr	r3, [pc, #84]	; (85c98 <prvProcessExpiredTimer+0x70>)
   85c44:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85c46:	68fb      	ldr	r3, [r7, #12]
   85c48:	69db      	ldr	r3, [r3, #28]
   85c4a:	2b01      	cmp	r3, #1
   85c4c:	d11b      	bne.n	85c86 <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   85c4e:	68fb      	ldr	r3, [r7, #12]
   85c50:	699a      	ldr	r2, [r3, #24]
   85c52:	687b      	ldr	r3, [r7, #4]
   85c54:	4413      	add	r3, r2
   85c56:	68f8      	ldr	r0, [r7, #12]
   85c58:	4619      	mov	r1, r3
   85c5a:	683a      	ldr	r2, [r7, #0]
   85c5c:	687b      	ldr	r3, [r7, #4]
   85c5e:	4c0f      	ldr	r4, [pc, #60]	; (85c9c <prvProcessExpiredTimer+0x74>)
   85c60:	47a0      	blx	r4
   85c62:	4603      	mov	r3, r0
   85c64:	2b01      	cmp	r3, #1
   85c66:	d10e      	bne.n	85c86 <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   85c68:	2300      	movs	r3, #0
   85c6a:	9300      	str	r3, [sp, #0]
   85c6c:	68f8      	ldr	r0, [r7, #12]
   85c6e:	2100      	movs	r1, #0
   85c70:	687a      	ldr	r2, [r7, #4]
   85c72:	2300      	movs	r3, #0
   85c74:	4c0a      	ldr	r4, [pc, #40]	; (85ca0 <prvProcessExpiredTimer+0x78>)
   85c76:	47a0      	blx	r4
   85c78:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   85c7a:	68bb      	ldr	r3, [r7, #8]
   85c7c:	2b00      	cmp	r3, #0
   85c7e:	d102      	bne.n	85c86 <prvProcessExpiredTimer+0x5e>
   85c80:	4b08      	ldr	r3, [pc, #32]	; (85ca4 <prvProcessExpiredTimer+0x7c>)
   85c82:	4798      	blx	r3
   85c84:	e7fe      	b.n	85c84 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85c86:	68fb      	ldr	r3, [r7, #12]
   85c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   85c8a:	68f8      	ldr	r0, [r7, #12]
   85c8c:	4798      	blx	r3
}
   85c8e:	3714      	adds	r7, #20
   85c90:	46bd      	mov	sp, r7
   85c92:	bd90      	pop	{r4, r7, pc}
   85c94:	2007a62c 	.word	0x2007a62c
   85c98:	00083c2d 	.word	0x00083c2d
   85c9c:	00085ded 	.word	0x00085ded
   85ca0:	00085b91 	.word	0x00085b91
   85ca4:	00083ea5 	.word	0x00083ea5

00085ca8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   85ca8:	b580      	push	{r7, lr}
   85caa:	b084      	sub	sp, #16
   85cac:	af00      	add	r7, sp, #0
   85cae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   85cb0:	f107 0308 	add.w	r3, r7, #8
   85cb4:	4618      	mov	r0, r3
   85cb6:	4b05      	ldr	r3, [pc, #20]	; (85ccc <prvTimerTask+0x24>)
   85cb8:	4798      	blx	r3
   85cba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   85cbc:	68bb      	ldr	r3, [r7, #8]
   85cbe:	68f8      	ldr	r0, [r7, #12]
   85cc0:	4619      	mov	r1, r3
   85cc2:	4b03      	ldr	r3, [pc, #12]	; (85cd0 <prvTimerTask+0x28>)
   85cc4:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   85cc6:	4b03      	ldr	r3, [pc, #12]	; (85cd4 <prvTimerTask+0x2c>)
   85cc8:	4798      	blx	r3
	}
   85cca:	e7f1      	b.n	85cb0 <prvTimerTask+0x8>
   85ccc:	00085d5d 	.word	0x00085d5d
   85cd0:	00085cd9 	.word	0x00085cd9
   85cd4:	00085e75 	.word	0x00085e75

00085cd8 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   85cd8:	b580      	push	{r7, lr}
   85cda:	b084      	sub	sp, #16
   85cdc:	af00      	add	r7, sp, #0
   85cde:	6078      	str	r0, [r7, #4]
   85ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   85ce2:	4b17      	ldr	r3, [pc, #92]	; (85d40 <prvProcessTimerOrBlockTask+0x68>)
   85ce4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85ce6:	f107 0308 	add.w	r3, r7, #8
   85cea:	4618      	mov	r0, r3
   85cec:	4b15      	ldr	r3, [pc, #84]	; (85d44 <prvProcessTimerOrBlockTask+0x6c>)
   85cee:	4798      	blx	r3
   85cf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   85cf2:	68bb      	ldr	r3, [r7, #8]
   85cf4:	2b00      	cmp	r3, #0
   85cf6:	d11e      	bne.n	85d36 <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   85cf8:	683b      	ldr	r3, [r7, #0]
   85cfa:	2b00      	cmp	r3, #0
   85cfc:	d10a      	bne.n	85d14 <prvProcessTimerOrBlockTask+0x3c>
   85cfe:	687a      	ldr	r2, [r7, #4]
   85d00:	68fb      	ldr	r3, [r7, #12]
   85d02:	429a      	cmp	r2, r3
   85d04:	d806      	bhi.n	85d14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   85d06:	4b10      	ldr	r3, [pc, #64]	; (85d48 <prvProcessTimerOrBlockTask+0x70>)
   85d08:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   85d0a:	6878      	ldr	r0, [r7, #4]
   85d0c:	68f9      	ldr	r1, [r7, #12]
   85d0e:	4b0f      	ldr	r3, [pc, #60]	; (85d4c <prvProcessTimerOrBlockTask+0x74>)
   85d10:	4798      	blx	r3
   85d12:	e012      	b.n	85d3a <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   85d14:	4b0e      	ldr	r3, [pc, #56]	; (85d50 <prvProcessTimerOrBlockTask+0x78>)
   85d16:	681a      	ldr	r2, [r3, #0]
   85d18:	6879      	ldr	r1, [r7, #4]
   85d1a:	68fb      	ldr	r3, [r7, #12]
   85d1c:	1acb      	subs	r3, r1, r3
   85d1e:	4610      	mov	r0, r2
   85d20:	4619      	mov	r1, r3
   85d22:	4b0c      	ldr	r3, [pc, #48]	; (85d54 <prvProcessTimerOrBlockTask+0x7c>)
   85d24:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   85d26:	4b08      	ldr	r3, [pc, #32]	; (85d48 <prvProcessTimerOrBlockTask+0x70>)
   85d28:	4798      	blx	r3
   85d2a:	4603      	mov	r3, r0
   85d2c:	2b00      	cmp	r3, #0
   85d2e:	d104      	bne.n	85d3a <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   85d30:	4b09      	ldr	r3, [pc, #36]	; (85d58 <prvProcessTimerOrBlockTask+0x80>)
   85d32:	4798      	blx	r3
   85d34:	e001      	b.n	85d3a <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   85d36:	4b04      	ldr	r3, [pc, #16]	; (85d48 <prvProcessTimerOrBlockTask+0x70>)
   85d38:	4798      	blx	r3
		}
	}
}
   85d3a:	3710      	adds	r7, #16
   85d3c:	46bd      	mov	sp, r7
   85d3e:	bd80      	pop	{r7, pc}
   85d40:	00084f15 	.word	0x00084f15
   85d44:	00085da5 	.word	0x00085da5
   85d48:	00084f31 	.word	0x00084f31
   85d4c:	00085c29 	.word	0x00085c29
   85d50:	2007a634 	.word	0x2007a634
   85d54:	00084bb1 	.word	0x00084bb1
   85d58:	00083e09 	.word	0x00083e09

00085d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   85d5c:	b480      	push	{r7}
   85d5e:	b085      	sub	sp, #20
   85d60:	af00      	add	r7, sp, #0
   85d62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   85d64:	4b0e      	ldr	r3, [pc, #56]	; (85da0 <prvGetNextExpireTime+0x44>)
   85d66:	681b      	ldr	r3, [r3, #0]
   85d68:	681b      	ldr	r3, [r3, #0]
   85d6a:	2b00      	cmp	r3, #0
   85d6c:	bf14      	ite	ne
   85d6e:	2300      	movne	r3, #0
   85d70:	2301      	moveq	r3, #1
   85d72:	b2db      	uxtb	r3, r3
   85d74:	461a      	mov	r2, r3
   85d76:	687b      	ldr	r3, [r7, #4]
   85d78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   85d7a:	687b      	ldr	r3, [r7, #4]
   85d7c:	681b      	ldr	r3, [r3, #0]
   85d7e:	2b00      	cmp	r3, #0
   85d80:	d105      	bne.n	85d8e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   85d82:	4b07      	ldr	r3, [pc, #28]	; (85da0 <prvGetNextExpireTime+0x44>)
   85d84:	681b      	ldr	r3, [r3, #0]
   85d86:	68db      	ldr	r3, [r3, #12]
   85d88:	681b      	ldr	r3, [r3, #0]
   85d8a:	60fb      	str	r3, [r7, #12]
   85d8c:	e001      	b.n	85d92 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   85d8e:	2300      	movs	r3, #0
   85d90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   85d92:	68fb      	ldr	r3, [r7, #12]
}
   85d94:	4618      	mov	r0, r3
   85d96:	3714      	adds	r7, #20
   85d98:	46bd      	mov	sp, r7
   85d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
   85d9e:	4770      	bx	lr
   85da0:	2007a62c 	.word	0x2007a62c

00085da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   85da4:	b580      	push	{r7, lr}
   85da6:	b084      	sub	sp, #16
   85da8:	af00      	add	r7, sp, #0
   85daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   85dac:	4b0c      	ldr	r3, [pc, #48]	; (85de0 <prvSampleTimeNow+0x3c>)
   85dae:	4798      	blx	r3
   85db0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   85db2:	4b0c      	ldr	r3, [pc, #48]	; (85de4 <prvSampleTimeNow+0x40>)
   85db4:	681b      	ldr	r3, [r3, #0]
   85db6:	68fa      	ldr	r2, [r7, #12]
   85db8:	429a      	cmp	r2, r3
   85dba:	d205      	bcs.n	85dc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   85dbc:	4b0a      	ldr	r3, [pc, #40]	; (85de8 <prvSampleTimeNow+0x44>)
   85dbe:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   85dc0:	687b      	ldr	r3, [r7, #4]
   85dc2:	2201      	movs	r2, #1
   85dc4:	601a      	str	r2, [r3, #0]
   85dc6:	e002      	b.n	85dce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   85dc8:	687b      	ldr	r3, [r7, #4]
   85dca:	2200      	movs	r2, #0
   85dcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   85dce:	4b05      	ldr	r3, [pc, #20]	; (85de4 <prvSampleTimeNow+0x40>)
   85dd0:	68fa      	ldr	r2, [r7, #12]
   85dd2:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   85dd4:	68fb      	ldr	r3, [r7, #12]
}
   85dd6:	4618      	mov	r0, r3
   85dd8:	3710      	adds	r7, #16
   85dda:	46bd      	mov	sp, r7
   85ddc:	bd80      	pop	{r7, pc}
   85dde:	bf00      	nop
   85de0:	00085055 	.word	0x00085055
   85de4:	2007a638 	.word	0x2007a638
   85de8:	00085fa1 	.word	0x00085fa1

00085dec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   85dec:	b580      	push	{r7, lr}
   85dee:	b086      	sub	sp, #24
   85df0:	af00      	add	r7, sp, #0
   85df2:	60f8      	str	r0, [r7, #12]
   85df4:	60b9      	str	r1, [r7, #8]
   85df6:	607a      	str	r2, [r7, #4]
   85df8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   85dfa:	2300      	movs	r3, #0
   85dfc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   85dfe:	68fb      	ldr	r3, [r7, #12]
   85e00:	68ba      	ldr	r2, [r7, #8]
   85e02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   85e04:	68fb      	ldr	r3, [r7, #12]
   85e06:	68fa      	ldr	r2, [r7, #12]
   85e08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   85e0a:	68ba      	ldr	r2, [r7, #8]
   85e0c:	687b      	ldr	r3, [r7, #4]
   85e0e:	429a      	cmp	r2, r3
   85e10:	d812      	bhi.n	85e38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   85e12:	687a      	ldr	r2, [r7, #4]
   85e14:	683b      	ldr	r3, [r7, #0]
   85e16:	1ad2      	subs	r2, r2, r3
   85e18:	68fb      	ldr	r3, [r7, #12]
   85e1a:	699b      	ldr	r3, [r3, #24]
   85e1c:	429a      	cmp	r2, r3
   85e1e:	d302      	bcc.n	85e26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   85e20:	2301      	movs	r3, #1
   85e22:	617b      	str	r3, [r7, #20]
   85e24:	e01b      	b.n	85e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   85e26:	4b10      	ldr	r3, [pc, #64]	; (85e68 <prvInsertTimerInActiveList+0x7c>)
   85e28:	681a      	ldr	r2, [r3, #0]
   85e2a:	68fb      	ldr	r3, [r7, #12]
   85e2c:	3304      	adds	r3, #4
   85e2e:	4610      	mov	r0, r2
   85e30:	4619      	mov	r1, r3
   85e32:	4b0e      	ldr	r3, [pc, #56]	; (85e6c <prvInsertTimerInActiveList+0x80>)
   85e34:	4798      	blx	r3
   85e36:	e012      	b.n	85e5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   85e38:	687a      	ldr	r2, [r7, #4]
   85e3a:	683b      	ldr	r3, [r7, #0]
   85e3c:	429a      	cmp	r2, r3
   85e3e:	d206      	bcs.n	85e4e <prvInsertTimerInActiveList+0x62>
   85e40:	68ba      	ldr	r2, [r7, #8]
   85e42:	683b      	ldr	r3, [r7, #0]
   85e44:	429a      	cmp	r2, r3
   85e46:	d302      	bcc.n	85e4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   85e48:	2301      	movs	r3, #1
   85e4a:	617b      	str	r3, [r7, #20]
   85e4c:	e007      	b.n	85e5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   85e4e:	4b08      	ldr	r3, [pc, #32]	; (85e70 <prvInsertTimerInActiveList+0x84>)
   85e50:	681a      	ldr	r2, [r3, #0]
   85e52:	68fb      	ldr	r3, [r7, #12]
   85e54:	3304      	adds	r3, #4
   85e56:	4610      	mov	r0, r2
   85e58:	4619      	mov	r1, r3
   85e5a:	4b04      	ldr	r3, [pc, #16]	; (85e6c <prvInsertTimerInActiveList+0x80>)
   85e5c:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   85e5e:	697b      	ldr	r3, [r7, #20]
}
   85e60:	4618      	mov	r0, r3
   85e62:	3718      	adds	r7, #24
   85e64:	46bd      	mov	sp, r7
   85e66:	bd80      	pop	{r7, pc}
   85e68:	2007a630 	.word	0x2007a630
   85e6c:	00083bbd 	.word	0x00083bbd
   85e70:	2007a62c 	.word	0x2007a62c

00085e74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   85e74:	b590      	push	{r4, r7, lr}
   85e76:	b08b      	sub	sp, #44	; 0x2c
   85e78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   85e7a:	e070      	b.n	85f5e <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   85e7c:	68bb      	ldr	r3, [r7, #8]
   85e7e:	2b00      	cmp	r3, #0
   85e80:	db6d      	blt.n	85f5e <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   85e82:	693b      	ldr	r3, [r7, #16]
   85e84:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   85e86:	69fb      	ldr	r3, [r7, #28]
   85e88:	695b      	ldr	r3, [r3, #20]
   85e8a:	2b00      	cmp	r3, #0
   85e8c:	d004      	beq.n	85e98 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85e8e:	69fb      	ldr	r3, [r7, #28]
   85e90:	3304      	adds	r3, #4
   85e92:	4618      	mov	r0, r3
   85e94:	4b3a      	ldr	r3, [pc, #232]	; (85f80 <prvProcessReceivedCommands+0x10c>)
   85e96:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   85e98:	1d3b      	adds	r3, r7, #4
   85e9a:	4618      	mov	r0, r3
   85e9c:	4b39      	ldr	r3, [pc, #228]	; (85f84 <prvProcessReceivedCommands+0x110>)
   85e9e:	4798      	blx	r3
   85ea0:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   85ea2:	68bb      	ldr	r3, [r7, #8]
   85ea4:	2b09      	cmp	r3, #9
   85ea6:	d859      	bhi.n	85f5c <prvProcessReceivedCommands+0xe8>
   85ea8:	a201      	add	r2, pc, #4	; (adr r2, 85eb0 <prvProcessReceivedCommands+0x3c>)
   85eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85eae:	bf00      	nop
   85eb0:	00085ed9 	.word	0x00085ed9
   85eb4:	00085ed9 	.word	0x00085ed9
   85eb8:	00085ed9 	.word	0x00085ed9
   85ebc:	00085f5d 	.word	0x00085f5d
   85ec0:	00085f2b 	.word	0x00085f2b
   85ec4:	00085f55 	.word	0x00085f55
   85ec8:	00085ed9 	.word	0x00085ed9
   85ecc:	00085ed9 	.word	0x00085ed9
   85ed0:	00085f5d 	.word	0x00085f5d
   85ed4:	00085f2b 	.word	0x00085f2b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   85ed8:	68fa      	ldr	r2, [r7, #12]
   85eda:	69fb      	ldr	r3, [r7, #28]
   85edc:	699b      	ldr	r3, [r3, #24]
   85ede:	441a      	add	r2, r3
   85ee0:	68fb      	ldr	r3, [r7, #12]
   85ee2:	69f8      	ldr	r0, [r7, #28]
   85ee4:	4611      	mov	r1, r2
   85ee6:	69ba      	ldr	r2, [r7, #24]
   85ee8:	4c27      	ldr	r4, [pc, #156]	; (85f88 <prvProcessReceivedCommands+0x114>)
   85eea:	47a0      	blx	r4
   85eec:	4603      	mov	r3, r0
   85eee:	2b01      	cmp	r3, #1
   85ef0:	d11a      	bne.n	85f28 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85ef2:	69fb      	ldr	r3, [r7, #28]
   85ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   85ef6:	69f8      	ldr	r0, [r7, #28]
   85ef8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85efa:	69fb      	ldr	r3, [r7, #28]
   85efc:	69db      	ldr	r3, [r3, #28]
   85efe:	2b01      	cmp	r3, #1
   85f00:	d112      	bne.n	85f28 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   85f02:	68fa      	ldr	r2, [r7, #12]
   85f04:	69fb      	ldr	r3, [r7, #28]
   85f06:	699b      	ldr	r3, [r3, #24]
   85f08:	4413      	add	r3, r2
   85f0a:	2200      	movs	r2, #0
   85f0c:	9200      	str	r2, [sp, #0]
   85f0e:	69f8      	ldr	r0, [r7, #28]
   85f10:	2100      	movs	r1, #0
   85f12:	461a      	mov	r2, r3
   85f14:	2300      	movs	r3, #0
   85f16:	4c1d      	ldr	r4, [pc, #116]	; (85f8c <prvProcessReceivedCommands+0x118>)
   85f18:	47a0      	blx	r4
   85f1a:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   85f1c:	697b      	ldr	r3, [r7, #20]
   85f1e:	2b00      	cmp	r3, #0
   85f20:	d102      	bne.n	85f28 <prvProcessReceivedCommands+0xb4>
   85f22:	4b1b      	ldr	r3, [pc, #108]	; (85f90 <prvProcessReceivedCommands+0x11c>)
   85f24:	4798      	blx	r3
   85f26:	e7fe      	b.n	85f26 <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   85f28:	e019      	b.n	85f5e <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   85f2a:	68fa      	ldr	r2, [r7, #12]
   85f2c:	69fb      	ldr	r3, [r7, #28]
   85f2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   85f30:	69fb      	ldr	r3, [r7, #28]
   85f32:	699b      	ldr	r3, [r3, #24]
   85f34:	2b00      	cmp	r3, #0
   85f36:	d102      	bne.n	85f3e <prvProcessReceivedCommands+0xca>
   85f38:	4b15      	ldr	r3, [pc, #84]	; (85f90 <prvProcessReceivedCommands+0x11c>)
   85f3a:	4798      	blx	r3
   85f3c:	e7fe      	b.n	85f3c <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   85f3e:	69fb      	ldr	r3, [r7, #28]
   85f40:	699a      	ldr	r2, [r3, #24]
   85f42:	69bb      	ldr	r3, [r7, #24]
   85f44:	4413      	add	r3, r2
   85f46:	69f8      	ldr	r0, [r7, #28]
   85f48:	4619      	mov	r1, r3
   85f4a:	69ba      	ldr	r2, [r7, #24]
   85f4c:	69bb      	ldr	r3, [r7, #24]
   85f4e:	4c0e      	ldr	r4, [pc, #56]	; (85f88 <prvProcessReceivedCommands+0x114>)
   85f50:	47a0      	blx	r4
					break;
   85f52:	e004      	b.n	85f5e <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   85f54:	69f8      	ldr	r0, [r7, #28]
   85f56:	4b0f      	ldr	r3, [pc, #60]	; (85f94 <prvProcessReceivedCommands+0x120>)
   85f58:	4798      	blx	r3
					break;
   85f5a:	e000      	b.n	85f5e <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   85f5c:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   85f5e:	4b0e      	ldr	r3, [pc, #56]	; (85f98 <prvProcessReceivedCommands+0x124>)
   85f60:	681a      	ldr	r2, [r3, #0]
   85f62:	f107 0308 	add.w	r3, r7, #8
   85f66:	4610      	mov	r0, r2
   85f68:	4619      	mov	r1, r3
   85f6a:	2200      	movs	r2, #0
   85f6c:	2300      	movs	r3, #0
   85f6e:	4c0b      	ldr	r4, [pc, #44]	; (85f9c <prvProcessReceivedCommands+0x128>)
   85f70:	47a0      	blx	r4
   85f72:	4603      	mov	r3, r0
   85f74:	2b00      	cmp	r3, #0
   85f76:	d181      	bne.n	85e7c <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   85f78:	3724      	adds	r7, #36	; 0x24
   85f7a:	46bd      	mov	sp, r7
   85f7c:	bd90      	pop	{r4, r7, pc}
   85f7e:	bf00      	nop
   85f80:	00083c2d 	.word	0x00083c2d
   85f84:	00085da5 	.word	0x00085da5
   85f88:	00085ded 	.word	0x00085ded
   85f8c:	00085b91 	.word	0x00085b91
   85f90:	00083ea5 	.word	0x00083ea5
   85f94:	00084141 	.word	0x00084141
   85f98:	2007a634 	.word	0x2007a634
   85f9c:	0008476d 	.word	0x0008476d

00085fa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   85fa0:	b590      	push	{r4, r7, lr}
   85fa2:	b089      	sub	sp, #36	; 0x24
   85fa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   85fa6:	e03d      	b.n	86024 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   85fa8:	4b27      	ldr	r3, [pc, #156]	; (86048 <prvSwitchTimerLists+0xa8>)
   85faa:	681b      	ldr	r3, [r3, #0]
   85fac:	68db      	ldr	r3, [r3, #12]
   85fae:	681b      	ldr	r3, [r3, #0]
   85fb0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   85fb2:	4b25      	ldr	r3, [pc, #148]	; (86048 <prvSwitchTimerLists+0xa8>)
   85fb4:	681b      	ldr	r3, [r3, #0]
   85fb6:	68db      	ldr	r3, [r3, #12]
   85fb8:	68db      	ldr	r3, [r3, #12]
   85fba:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85fbc:	693b      	ldr	r3, [r7, #16]
   85fbe:	3304      	adds	r3, #4
   85fc0:	4618      	mov	r0, r3
   85fc2:	4b22      	ldr	r3, [pc, #136]	; (8604c <prvSwitchTimerLists+0xac>)
   85fc4:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   85fc6:	693b      	ldr	r3, [r7, #16]
   85fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   85fca:	6938      	ldr	r0, [r7, #16]
   85fcc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85fce:	693b      	ldr	r3, [r7, #16]
   85fd0:	69db      	ldr	r3, [r3, #28]
   85fd2:	2b01      	cmp	r3, #1
   85fd4:	d126      	bne.n	86024 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   85fd6:	693b      	ldr	r3, [r7, #16]
   85fd8:	699a      	ldr	r2, [r3, #24]
   85fda:	697b      	ldr	r3, [r7, #20]
   85fdc:	4413      	add	r3, r2
   85fde:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   85fe0:	68fa      	ldr	r2, [r7, #12]
   85fe2:	697b      	ldr	r3, [r7, #20]
   85fe4:	429a      	cmp	r2, r3
   85fe6:	d90e      	bls.n	86006 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   85fe8:	693b      	ldr	r3, [r7, #16]
   85fea:	68fa      	ldr	r2, [r7, #12]
   85fec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   85fee:	693b      	ldr	r3, [r7, #16]
   85ff0:	693a      	ldr	r2, [r7, #16]
   85ff2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   85ff4:	4b14      	ldr	r3, [pc, #80]	; (86048 <prvSwitchTimerLists+0xa8>)
   85ff6:	681a      	ldr	r2, [r3, #0]
   85ff8:	693b      	ldr	r3, [r7, #16]
   85ffa:	3304      	adds	r3, #4
   85ffc:	4610      	mov	r0, r2
   85ffe:	4619      	mov	r1, r3
   86000:	4b13      	ldr	r3, [pc, #76]	; (86050 <prvSwitchTimerLists+0xb0>)
   86002:	4798      	blx	r3
   86004:	e00e      	b.n	86024 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   86006:	2300      	movs	r3, #0
   86008:	9300      	str	r3, [sp, #0]
   8600a:	6938      	ldr	r0, [r7, #16]
   8600c:	2100      	movs	r1, #0
   8600e:	697a      	ldr	r2, [r7, #20]
   86010:	2300      	movs	r3, #0
   86012:	4c10      	ldr	r4, [pc, #64]	; (86054 <prvSwitchTimerLists+0xb4>)
   86014:	47a0      	blx	r4
   86016:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   86018:	68bb      	ldr	r3, [r7, #8]
   8601a:	2b00      	cmp	r3, #0
   8601c:	d102      	bne.n	86024 <prvSwitchTimerLists+0x84>
   8601e:	4b0e      	ldr	r3, [pc, #56]	; (86058 <prvSwitchTimerLists+0xb8>)
   86020:	4798      	blx	r3
   86022:	e7fe      	b.n	86022 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   86024:	4b08      	ldr	r3, [pc, #32]	; (86048 <prvSwitchTimerLists+0xa8>)
   86026:	681b      	ldr	r3, [r3, #0]
   86028:	681b      	ldr	r3, [r3, #0]
   8602a:	2b00      	cmp	r3, #0
   8602c:	d1bc      	bne.n	85fa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   8602e:	4b06      	ldr	r3, [pc, #24]	; (86048 <prvSwitchTimerLists+0xa8>)
   86030:	681b      	ldr	r3, [r3, #0]
   86032:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   86034:	4b09      	ldr	r3, [pc, #36]	; (8605c <prvSwitchTimerLists+0xbc>)
   86036:	681a      	ldr	r2, [r3, #0]
   86038:	4b03      	ldr	r3, [pc, #12]	; (86048 <prvSwitchTimerLists+0xa8>)
   8603a:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   8603c:	4b07      	ldr	r3, [pc, #28]	; (8605c <prvSwitchTimerLists+0xbc>)
   8603e:	687a      	ldr	r2, [r7, #4]
   86040:	601a      	str	r2, [r3, #0]
}
   86042:	371c      	adds	r7, #28
   86044:	46bd      	mov	sp, r7
   86046:	bd90      	pop	{r4, r7, pc}
   86048:	2007a62c 	.word	0x2007a62c
   8604c:	00083c2d 	.word	0x00083c2d
   86050:	00083bbd 	.word	0x00083bbd
   86054:	00085b91 	.word	0x00085b91
   86058:	00083ea5 	.word	0x00083ea5
   8605c:	2007a630 	.word	0x2007a630

00086060 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   86060:	b580      	push	{r7, lr}
   86062:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   86064:	4b11      	ldr	r3, [pc, #68]	; (860ac <prvCheckForValidListAndQueue+0x4c>)
   86066:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   86068:	4b11      	ldr	r3, [pc, #68]	; (860b0 <prvCheckForValidListAndQueue+0x50>)
   8606a:	681b      	ldr	r3, [r3, #0]
   8606c:	2b00      	cmp	r3, #0
   8606e:	d11a      	bne.n	860a6 <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   86070:	4810      	ldr	r0, [pc, #64]	; (860b4 <prvCheckForValidListAndQueue+0x54>)
   86072:	4b11      	ldr	r3, [pc, #68]	; (860b8 <prvCheckForValidListAndQueue+0x58>)
   86074:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   86076:	4811      	ldr	r0, [pc, #68]	; (860bc <prvCheckForValidListAndQueue+0x5c>)
   86078:	4b0f      	ldr	r3, [pc, #60]	; (860b8 <prvCheckForValidListAndQueue+0x58>)
   8607a:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   8607c:	4b10      	ldr	r3, [pc, #64]	; (860c0 <prvCheckForValidListAndQueue+0x60>)
   8607e:	4a0d      	ldr	r2, [pc, #52]	; (860b4 <prvCheckForValidListAndQueue+0x54>)
   86080:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   86082:	4b10      	ldr	r3, [pc, #64]	; (860c4 <prvCheckForValidListAndQueue+0x64>)
   86084:	4a0d      	ldr	r2, [pc, #52]	; (860bc <prvCheckForValidListAndQueue+0x5c>)
   86086:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   86088:	2005      	movs	r0, #5
   8608a:	210c      	movs	r1, #12
   8608c:	2200      	movs	r2, #0
   8608e:	4b0e      	ldr	r3, [pc, #56]	; (860c8 <prvCheckForValidListAndQueue+0x68>)
   86090:	4798      	blx	r3
   86092:	4602      	mov	r2, r0
   86094:	4b06      	ldr	r3, [pc, #24]	; (860b0 <prvCheckForValidListAndQueue+0x50>)
   86096:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   86098:	4b05      	ldr	r3, [pc, #20]	; (860b0 <prvCheckForValidListAndQueue+0x50>)
   8609a:	681b      	ldr	r3, [r3, #0]
   8609c:	2b00      	cmp	r3, #0
   8609e:	d102      	bne.n	860a6 <prvCheckForValidListAndQueue+0x46>
   860a0:	4b0a      	ldr	r3, [pc, #40]	; (860cc <prvCheckForValidListAndQueue+0x6c>)
   860a2:	4798      	blx	r3
   860a4:	e7fe      	b.n	860a4 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   860a6:	4b0a      	ldr	r3, [pc, #40]	; (860d0 <prvCheckForValidListAndQueue+0x70>)
   860a8:	4798      	blx	r3
}
   860aa:	bd80      	pop	{r7, pc}
   860ac:	00083e29 	.word	0x00083e29
   860b0:	2007a634 	.word	0x2007a634
   860b4:	2007a604 	.word	0x2007a604
   860b8:	00083b1d 	.word	0x00083b1d
   860bc:	2007a618 	.word	0x2007a618
   860c0:	2007a62c 	.word	0x2007a62c
   860c4:	2007a630 	.word	0x2007a630
   860c8:	00084421 	.word	0x00084421
   860cc:	00083ea5 	.word	0x00083ea5
   860d0:	00083e6d 	.word	0x00083e6d

000860d4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   860d4:	b480      	push	{r7}
   860d6:	b083      	sub	sp, #12
   860d8:	af00      	add	r7, sp, #0
   860da:	4603      	mov	r3, r0
   860dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   860de:	4b08      	ldr	r3, [pc, #32]	; (86100 <NVIC_EnableIRQ+0x2c>)
   860e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   860e4:	0952      	lsrs	r2, r2, #5
   860e6:	79f9      	ldrb	r1, [r7, #7]
   860e8:	f001 011f 	and.w	r1, r1, #31
   860ec:	2001      	movs	r0, #1
   860ee:	fa00 f101 	lsl.w	r1, r0, r1
   860f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   860f6:	370c      	adds	r7, #12
   860f8:	46bd      	mov	sp, r7
   860fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   860fe:	4770      	bx	lr
   86100:	e000e100 	.word	0xe000e100

00086104 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   86104:	b480      	push	{r7}
   86106:	b083      	sub	sp, #12
   86108:	af00      	add	r7, sp, #0
   8610a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8610c:	687b      	ldr	r3, [r7, #4]
   8610e:	2b07      	cmp	r3, #7
   86110:	d825      	bhi.n	8615e <osc_get_rate+0x5a>
   86112:	a201      	add	r2, pc, #4	; (adr r2, 86118 <osc_get_rate+0x14>)
   86114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86118:	00086139 	.word	0x00086139
   8611c:	0008613f 	.word	0x0008613f
   86120:	00086145 	.word	0x00086145
   86124:	0008614b 	.word	0x0008614b
   86128:	0008614f 	.word	0x0008614f
   8612c:	00086153 	.word	0x00086153
   86130:	00086157 	.word	0x00086157
   86134:	0008615b 	.word	0x0008615b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   86138:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8613c:	e010      	b.n	86160 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8613e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   86142:	e00d      	b.n	86160 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   86144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   86148:	e00a      	b.n	86160 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8614a:	4b08      	ldr	r3, [pc, #32]	; (8616c <osc_get_rate+0x68>)
   8614c:	e008      	b.n	86160 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8614e:	4b08      	ldr	r3, [pc, #32]	; (86170 <osc_get_rate+0x6c>)
   86150:	e006      	b.n	86160 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   86152:	4b08      	ldr	r3, [pc, #32]	; (86174 <osc_get_rate+0x70>)
   86154:	e004      	b.n	86160 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   86156:	4b07      	ldr	r3, [pc, #28]	; (86174 <osc_get_rate+0x70>)
   86158:	e002      	b.n	86160 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8615a:	4b06      	ldr	r3, [pc, #24]	; (86174 <osc_get_rate+0x70>)
   8615c:	e000      	b.n	86160 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8615e:	2300      	movs	r3, #0
}
   86160:	4618      	mov	r0, r3
   86162:	370c      	adds	r7, #12
   86164:	46bd      	mov	sp, r7
   86166:	f85d 7b04 	ldr.w	r7, [sp], #4
   8616a:	4770      	bx	lr
   8616c:	003d0900 	.word	0x003d0900
   86170:	007a1200 	.word	0x007a1200
   86174:	00b71b00 	.word	0x00b71b00

00086178 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   86178:	b580      	push	{r7, lr}
   8617a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   8617c:	2006      	movs	r0, #6
   8617e:	4b04      	ldr	r3, [pc, #16]	; (86190 <sysclk_get_main_hz+0x18>)
   86180:	4798      	blx	r3
   86182:	4602      	mov	r2, r0
   86184:	4613      	mov	r3, r2
   86186:	00db      	lsls	r3, r3, #3
   86188:	1a9b      	subs	r3, r3, r2
   8618a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8618c:	4618      	mov	r0, r3
   8618e:	bd80      	pop	{r7, pc}
   86190:	00086105 	.word	0x00086105

00086194 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   86194:	b580      	push	{r7, lr}
   86196:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   86198:	4b02      	ldr	r3, [pc, #8]	; (861a4 <sysclk_get_cpu_hz+0x10>)
   8619a:	4798      	blx	r3
   8619c:	4603      	mov	r3, r0
   8619e:	085b      	lsrs	r3, r3, #1
}
   861a0:	4618      	mov	r0, r3
   861a2:	bd80      	pop	{r7, pc}
   861a4:	00086179 	.word	0x00086179

000861a8 <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   861a8:	b580      	push	{r7, lr}
   861aa:	b082      	sub	sp, #8
   861ac:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   861ae:	482b      	ldr	r0, [pc, #172]	; (8625c <CAN1_Handler+0xb4>)
   861b0:	492b      	ldr	r1, [pc, #172]	; (86260 <CAN1_Handler+0xb8>)
   861b2:	4b2c      	ldr	r3, [pc, #176]	; (86264 <CAN1_Handler+0xbc>)
   861b4:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   861b6:	482c      	ldr	r0, [pc, #176]	; (86268 <CAN1_Handler+0xc0>)
   861b8:	4b2c      	ldr	r3, [pc, #176]	; (8626c <CAN1_Handler+0xc4>)
   861ba:	4798      	blx	r3
   861bc:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) 
   861be:	683b      	ldr	r3, [r7, #0]
   861c0:	b2db      	uxtb	r3, r3
   861c2:	2b00      	cmp	r3, #0
   861c4:	d046      	beq.n	86254 <CAN1_Handler+0xac>
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   861c6:	2300      	movs	r3, #0
   861c8:	71fb      	strb	r3, [r7, #7]
   861ca:	e040      	b.n	8624e <CAN1_Handler+0xa6>
		{
			ul_status = can_mailbox_get_status(CAN1, i);
   861cc:	79fb      	ldrb	r3, [r7, #7]
   861ce:	4826      	ldr	r0, [pc, #152]	; (86268 <CAN1_Handler+0xc0>)
   861d0:	4619      	mov	r1, r3
   861d2:	4b27      	ldr	r3, [pc, #156]	; (86270 <CAN1_Handler+0xc8>)
   861d4:	4798      	blx	r3
   861d6:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) 
   861d8:	683b      	ldr	r3, [r7, #0]
   861da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   861de:	2b00      	cmp	r3, #0
   861e0:	d032      	beq.n	86248 <CAN1_Handler+0xa0>
			{
				can1_mailbox.ul_mb_idx = i;
   861e2:	79fa      	ldrb	r2, [r7, #7]
   861e4:	4b1d      	ldr	r3, [pc, #116]	; (8625c <CAN1_Handler+0xb4>)
   861e6:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   861e8:	4b1c      	ldr	r3, [pc, #112]	; (8625c <CAN1_Handler+0xb4>)
   861ea:	683a      	ldr	r2, [r7, #0]
   861ec:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   861ee:	481e      	ldr	r0, [pc, #120]	; (86268 <CAN1_Handler+0xc0>)
   861f0:	491a      	ldr	r1, [pc, #104]	; (8625c <CAN1_Handler+0xb4>)
   861f2:	4b20      	ldr	r3, [pc, #128]	; (86274 <CAN1_Handler+0xcc>)
   861f4:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   861f6:	4b19      	ldr	r3, [pc, #100]	; (8625c <CAN1_Handler+0xb4>)
   861f8:	69da      	ldr	r2, [r3, #28]
   861fa:	4b1f      	ldr	r3, [pc, #124]	; (86278 <CAN1_Handler+0xd0>)
   861fc:	429a      	cmp	r2, r3
   861fe:	d107      	bne.n	86210 <CAN1_Handler+0x68>
   86200:	4b16      	ldr	r3, [pc, #88]	; (8625c <CAN1_Handler+0xb4>)
   86202:	699a      	ldr	r2, [r3, #24]
   86204:	4b1d      	ldr	r3, [pc, #116]	; (8627c <CAN1_Handler+0xd4>)
   86206:	429a      	cmp	r2, r3
   86208:	d102      	bne.n	86210 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   8620a:	4b1d      	ldr	r3, [pc, #116]	; (86280 <CAN1_Handler+0xd8>)
   8620c:	2200      	movs	r2, #0
   8620e:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   86210:	79fb      	ldrb	r3, [r7, #7]
   86212:	4812      	ldr	r0, [pc, #72]	; (8625c <CAN1_Handler+0xb4>)
   86214:	4619      	mov	r1, r3
   86216:	4b1b      	ldr	r3, [pc, #108]	; (86284 <CAN1_Handler+0xdc>)
   86218:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   8621a:	4810      	ldr	r0, [pc, #64]	; (8625c <CAN1_Handler+0xb4>)
   8621c:	4912      	ldr	r1, [pc, #72]	; (86268 <CAN1_Handler+0xc0>)
   8621e:	4b1a      	ldr	r3, [pc, #104]	; (86288 <CAN1_Handler+0xe0>)
   86220:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   86222:	79fb      	ldrb	r3, [r7, #7]
   86224:	2b07      	cmp	r3, #7
   86226:	d103      	bne.n	86230 <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   86228:	480c      	ldr	r0, [pc, #48]	; (8625c <CAN1_Handler+0xb4>)
   8622a:	490f      	ldr	r1, [pc, #60]	; (86268 <CAN1_Handler+0xc0>)
   8622c:	4b17      	ldr	r3, [pc, #92]	; (8628c <CAN1_Handler+0xe4>)
   8622e:	4798      	blx	r3

				if (i == 0)
   86230:	79fb      	ldrb	r3, [r7, #7]
   86232:	2b00      	cmp	r3, #0
   86234:	d103      	bne.n	8623e <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   86236:	4809      	ldr	r0, [pc, #36]	; (8625c <CAN1_Handler+0xb4>)
   86238:	490b      	ldr	r1, [pc, #44]	; (86268 <CAN1_Handler+0xc0>)
   8623a:	4b15      	ldr	r3, [pc, #84]	; (86290 <CAN1_Handler+0xe8>)
   8623c:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   8623e:	4807      	ldr	r0, [pc, #28]	; (8625c <CAN1_Handler+0xb4>)
   86240:	4907      	ldr	r1, [pc, #28]	; (86260 <CAN1_Handler+0xb8>)
   86242:	4b14      	ldr	r3, [pc, #80]	; (86294 <CAN1_Handler+0xec>)
   86244:	4798      	blx	r3
				break;
   86246:	e005      	b.n	86254 <CAN1_Handler+0xac>
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) 
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   86248:	79fb      	ldrb	r3, [r7, #7]
   8624a:	3301      	adds	r3, #1
   8624c:	71fb      	strb	r3, [r7, #7]
   8624e:	79fb      	ldrb	r3, [r7, #7]
   86250:	2b07      	cmp	r3, #7
   86252:	d9bb      	bls.n	861cc <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   86254:	3708      	adds	r7, #8
   86256:	46bd      	mov	sp, r7
   86258:	bd80      	pop	{r7, pc}
   8625a:	bf00      	nop
   8625c:	2007a64c 	.word	0x2007a64c
   86260:	2007a688 	.word	0x2007a688
   86264:	00086639 	.word	0x00086639
   86268:	400b8000 	.word	0x400b8000
   8626c:	000829d5 	.word	0x000829d5
   86270:	000829ed 	.word	0x000829ed
   86274:	00082b6d 	.word	0x00082b6d
   86278:	01234567 	.word	0x01234567
   8627c:	89abcdef 	.word	0x89abcdef
   86280:	2007a6e4 	.word	0x2007a6e4
   86284:	000864bd 	.word	0x000864bd
   86288:	000862f9 	.word	0x000862f9
   8628c:	00086359 	.word	0x00086359
   86290:	0008641d 	.word	0x0008641d
   86294:	000866a9 	.word	0x000866a9

00086298 <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   86298:	b580      	push	{r7, lr}
   8629a:	b082      	sub	sp, #8
   8629c:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
   8629e:	4812      	ldr	r0, [pc, #72]	; (862e8 <CAN0_Handler+0x50>)
   862a0:	4b12      	ldr	r3, [pc, #72]	; (862ec <CAN0_Handler+0x54>)
   862a2:	4798      	blx	r3
   862a4:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) 
   862a6:	683b      	ldr	r3, [r7, #0]
   862a8:	b2db      	uxtb	r3, r3
   862aa:	2b00      	cmp	r3, #0
   862ac:	d018      	beq.n	862e0 <CAN0_Handler+0x48>
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   862ae:	2300      	movs	r3, #0
   862b0:	71fb      	strb	r3, [r7, #7]
   862b2:	e012      	b.n	862da <CAN0_Handler+0x42>
		{
			ul_status = can_mailbox_get_status(CAN0, i);
   862b4:	79fb      	ldrb	r3, [r7, #7]
   862b6:	480c      	ldr	r0, [pc, #48]	; (862e8 <CAN0_Handler+0x50>)
   862b8:	4619      	mov	r1, r3
   862ba:	4b0d      	ldr	r3, [pc, #52]	; (862f0 <CAN0_Handler+0x58>)
   862bc:	4798      	blx	r3
   862be:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) 
   862c0:	683b      	ldr	r3, [r7, #0]
   862c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   862c6:	2b00      	cmp	r3, #0
   862c8:	d004      	beq.n	862d4 <CAN0_Handler+0x3c>
			{
				transmit_complete[i] = 1;		// Indicate that a transmission has completed.
   862ca:	79fb      	ldrb	r3, [r7, #7]
   862cc:	4a09      	ldr	r2, [pc, #36]	; (862f4 <CAN0_Handler+0x5c>)
   862ce:	2101      	movs	r1, #1
   862d0:	54d1      	strb	r1, [r2, r3]
				//assert(g_ul_recv_status); ***implement assert here.
				break;
   862d2:	e005      	b.n	862e0 <CAN0_Handler+0x48>
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) 
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   862d4:	79fb      	ldrb	r3, [r7, #7]
   862d6:	3301      	adds	r3, #1
   862d8:	71fb      	strb	r3, [r7, #7]
   862da:	79fb      	ldrb	r3, [r7, #7]
   862dc:	2b07      	cmp	r3, #7
   862de:	d9e9      	bls.n	862b4 <CAN0_Handler+0x1c>
				//assert(g_ul_recv_status); ***implement assert here.
				break;
			}
		}
	}
}
   862e0:	3708      	adds	r7, #8
   862e2:	46bd      	mov	sp, r7
   862e4:	bd80      	pop	{r7, pc}
   862e6:	bf00      	nop
   862e8:	400b4000 	.word	0x400b4000
   862ec:	000829d5 	.word	0x000829d5
   862f0:	000829ed 	.word	0x000829ed
   862f4:	2007a6a8 	.word	0x2007a6a8

000862f8 <debug_can_msg>:
/************************************************************************/
/* DEBUG CAN MESSAGE 													*/
/* USED FOR debugging 													*/
/************************************************************************/
void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   862f8:	b580      	push	{r7, lr}
   862fa:	b086      	sub	sp, #24
   862fc:	af00      	add	r7, sp, #0
   862fe:	6078      	str	r0, [r7, #4]
   86300:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   86302:	687b      	ldr	r3, [r7, #4]
   86304:	699b      	ldr	r3, [r3, #24]
   86306:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   86308:	687b      	ldr	r3, [r7, #4]
   8630a:	69db      	ldr	r3, [r3, #28]
   8630c:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8630e:	693b      	ldr	r3, [r7, #16]
   86310:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   86314:	0c1b      	lsrs	r3, r3, #16
   86316:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   86318:	693b      	ldr	r3, [r7, #16]
   8631a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8631e:	0a1b      	lsrs	r3, r3, #8
   86320:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   86322:	7bfb      	ldrb	r3, [r7, #15]
   86324:	2b02      	cmp	r3, #2
   86326:	d105      	bne.n	86334 <debug_can_msg+0x3c>
   86328:	7bbb      	ldrb	r3, [r7, #14]
   8632a:	2b04      	cmp	r3, #4
   8632c:	d102      	bne.n	86334 <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   8632e:	2057      	movs	r0, #87	; 0x57
   86330:	4b08      	ldr	r3, [pc, #32]	; (86354 <debug_can_msg+0x5c>)
   86332:	4798      	blx	r3

	if (big_type == MT_HK)
   86334:	7bfb      	ldrb	r3, [r7, #15]
   86336:	2b01      	cmp	r3, #1
   86338:	d102      	bne.n	86340 <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   8633a:	2055      	movs	r0, #85	; 0x55
   8633c:	4b05      	ldr	r3, [pc, #20]	; (86354 <debug_can_msg+0x5c>)
   8633e:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   86340:	7bfb      	ldrb	r3, [r7, #15]
   86342:	2b00      	cmp	r3, #0
   86344:	d102      	bne.n	8634c <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   86346:	2056      	movs	r0, #86	; 0x56
   86348:	4b02      	ldr	r3, [pc, #8]	; (86354 <debug_can_msg+0x5c>)
   8634a:	4798      	blx	r3

	return;
   8634c:	bf00      	nop
}
   8634e:	3718      	adds	r7, #24
   86350:	46bd      	mov	sp, r7
   86352:	bd80      	pop	{r7, pc}
   86354:	00082eb5 	.word	0x00082eb5

00086358 <decode_can_command>:
/* @param: *controller: used to verify authenticity						*/
/* @Purpose: This function decodes commands which are received and 		*/
/* performs different actions based on what was received. 				*/
/************************************************************************/
void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   86358:	b480      	push	{r7}
   8635a:	b087      	sub	sp, #28
   8635c:	af00      	add	r7, sp, #0
   8635e:	6078      	str	r0, [r7, #4]
   86360:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   86362:	687b      	ldr	r3, [r7, #4]
   86364:	699b      	ldr	r3, [r3, #24]
   86366:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   86368:	687b      	ldr	r3, [r7, #4]
   8636a:	69db      	ldr	r3, [r3, #28]
   8636c:	613b      	str	r3, [r7, #16]
	uint8_t sender, destination, big_type, small_type;

	sender = (uint8_t)(uh_data_incom >> 28);
   8636e:	693b      	ldr	r3, [r7, #16]
   86370:	0f1b      	lsrs	r3, r3, #28
   86372:	73fb      	strb	r3, [r7, #15]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   86374:	693b      	ldr	r3, [r7, #16]
   86376:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   8637a:	0e1b      	lsrs	r3, r3, #24
   8637c:	73bb      	strb	r3, [r7, #14]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8637e:	693b      	ldr	r3, [r7, #16]
   86380:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   86384:	0c1b      	lsrs	r3, r3, #16
   86386:	737b      	strb	r3, [r7, #13]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   86388:	693b      	ldr	r3, [r7, #16]
   8638a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8638e:	0a1b      	lsrs	r3, r3, #8
   86390:	733b      	strb	r3, [r7, #12]

	if(big_type != MT_COM)
   86392:	7b7b      	ldrb	r3, [r7, #13]
   86394:	2b02      	cmp	r3, #2
   86396:	d000      	beq.n	8639a <decode_can_command+0x42>
		return;
   86398:	e02e      	b.n	863f8 <decode_can_command+0xa0>
	
	switch(small_type)	// FROM WHO
   8639a:	7b3b      	ldrb	r3, [r7, #12]
   8639c:	2b06      	cmp	r3, #6
   8639e:	d002      	beq.n	863a6 <decode_can_command+0x4e>
   863a0:	2b08      	cmp	r3, #8
   863a2:	d014      	beq.n	863ce <decode_can_command+0x76>
				default :
					break;
			}
			break;
		default :
			break;
   863a4:	e027      	b.n	863f6 <decode_can_command+0x9e>
		return;
	
	switch(small_type)	// FROM WHO
	{
		case ACK_READ:
			switch(destination)
   863a6:	7bbb      	ldrb	r3, [r7, #14]
   863a8:	2b04      	cmp	r3, #4
   863aa:	d000      	beq.n	863ae <decode_can_command+0x56>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   863ac:	e00e      	b.n	863cc <decode_can_command+0x74>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   863ae:	4b15      	ldr	r3, [pc, #84]	; (86404 <decode_can_command+0xac>)
   863b0:	781b      	ldrb	r3, [r3, #0]
   863b2:	2b00      	cmp	r3, #0
   863b4:	d009      	beq.n	863ca <decode_can_command+0x72>
					{
						hk_read_receivedf = 1;
   863b6:	4b14      	ldr	r3, [pc, #80]	; (86408 <decode_can_command+0xb0>)
   863b8:	2201      	movs	r2, #1
   863ba:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   863bc:	4b13      	ldr	r3, [pc, #76]	; (8640c <decode_can_command+0xb4>)
   863be:	693a      	ldr	r2, [r7, #16]
   863c0:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   863c2:	4b12      	ldr	r3, [pc, #72]	; (8640c <decode_can_command+0xb4>)
   863c4:	697a      	ldr	r2, [r7, #20]
   863c6:	601a      	str	r2, [r3, #0]
					}
					break;
   863c8:	e7ff      	b.n	863ca <decode_can_command+0x72>
   863ca:	bf00      	nop
				default :
					break;
			}
			break;
   863cc:	e013      	b.n	863f6 <decode_can_command+0x9e>
		case ACK_WRITE :
			switch(destination)
   863ce:	7bbb      	ldrb	r3, [r7, #14]
   863d0:	2b04      	cmp	r3, #4
   863d2:	d000      	beq.n	863d6 <decode_can_command+0x7e>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   863d4:	e00e      	b.n	863f4 <decode_can_command+0x9c>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   863d6:	4b0e      	ldr	r3, [pc, #56]	; (86410 <decode_can_command+0xb8>)
   863d8:	781b      	ldrb	r3, [r3, #0]
   863da:	2b00      	cmp	r3, #0
   863dc:	d009      	beq.n	863f2 <decode_can_command+0x9a>
					{
						hk_write_receivedf = 1;
   863de:	4b0d      	ldr	r3, [pc, #52]	; (86414 <decode_can_command+0xbc>)
   863e0:	2201      	movs	r2, #1
   863e2:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   863e4:	4b0c      	ldr	r3, [pc, #48]	; (86418 <decode_can_command+0xc0>)
   863e6:	693a      	ldr	r2, [r7, #16]
   863e8:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   863ea:	4b0b      	ldr	r3, [pc, #44]	; (86418 <decode_can_command+0xc0>)
   863ec:	697a      	ldr	r2, [r7, #20]
   863ee:	601a      	str	r2, [r3, #0]
					}
					break;
   863f0:	e7ff      	b.n	863f2 <decode_can_command+0x9a>
   863f2:	bf00      	nop
				default :
					break;
			}
			break;
   863f4:	bf00      	nop
		default :
			break;
	}
	return;
   863f6:	bf00      	nop
}
   863f8:	371c      	adds	r7, #28
   863fa:	46bd      	mov	sp, r7
   863fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   86400:	4770      	bx	lr
   86402:	bf00      	nop
   86404:	2007a6e8 	.word	0x2007a6e8
   86408:	2007a648 	.word	0x2007a648
   8640c:	2007a67c 	.word	0x2007a67c
   86410:	2007a6b0 	.word	0x2007a6b0
   86414:	2007a679 	.word	0x2007a679
   86418:	2007a6b4 	.word	0x2007a6b4

0008641c <alert_can_data>:
/* @param: *controller: To be used to verify that the request was genuin*/
/* @Purpose: This function sets flags which let process know that they 	*/
/* have data waiting for them. 											*/
/************************************************************************/
void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   8641c:	b480      	push	{r7}
   8641e:	b087      	sub	sp, #28
   86420:	af00      	add	r7, sp, #0
   86422:	6078      	str	r0, [r7, #4]
   86424:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   86426:	687b      	ldr	r3, [r7, #4]
   86428:	69db      	ldr	r3, [r3, #28]
   8642a:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8642c:	687b      	ldr	r3, [r7, #4]
   8642e:	699b      	ldr	r3, [r3, #24]
   86430:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   86432:	697b      	ldr	r3, [r7, #20]
   86434:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   86438:	0c1b      	lsrs	r3, r3, #16
   8643a:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   8643c:	697b      	ldr	r3, [r7, #20]
   8643e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   86442:	0a1b      	lsrs	r3, r3, #8
   86444:	73bb      	strb	r3, [r7, #14]

	if(big_type != MT_DATA)
   86446:	7bfb      	ldrb	r3, [r7, #15]
   86448:	2b00      	cmp	r3, #0
   8644a:	d000      	beq.n	8644e <alert_can_data+0x32>
		return;
   8644c:	e028      	b.n	864a0 <alert_can_data+0x84>

	switch(small_type) // Name of sensor will be in the small type.
   8644e:	7bbb      	ldrb	r3, [r7, #14]
   86450:	3b01      	subs	r3, #1
   86452:	2b03      	cmp	r3, #3
   86454:	d822      	bhi.n	8649c <alert_can_data+0x80>
   86456:	a201      	add	r2, pc, #4	; (adr r2, 8645c <alert_can_data+0x40>)
   86458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8645c:	0008646d 	.word	0x0008646d
   86460:	00086473 	.word	0x00086473
   86464:	00086479 	.word	0x00086479
   86468:	0008648b 	.word	0x0008648b
	{
		case SPI_TEMP1:
			glob_drf = 1;
   8646c:	4b0f      	ldr	r3, [pc, #60]	; (864ac <alert_can_data+0x90>)
   8646e:	2201      	movs	r2, #1
   86470:	701a      	strb	r2, [r3, #0]
		case COMS_PACKET:
			glob_comsf = 1;
   86472:	4b0f      	ldr	r3, [pc, #60]	; (864b0 <alert_can_data+0x94>)
   86474:	2201      	movs	r2, #1
   86476:	701a      	strb	r2, [r3, #0]
		case BATT_TOP :
			eps_data_receivedf = 1;
   86478:	4b0e      	ldr	r3, [pc, #56]	; (864b4 <alert_can_data+0x98>)
   8647a:	2201      	movs	r2, #1
   8647c:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   8647e:	4b0e      	ldr	r3, [pc, #56]	; (864b8 <alert_can_data+0x9c>)
   86480:	697a      	ldr	r2, [r7, #20]
   86482:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   86484:	4b0c      	ldr	r3, [pc, #48]	; (864b8 <alert_can_data+0x9c>)
   86486:	693a      	ldr	r2, [r7, #16]
   86488:	601a      	str	r2, [r3, #0]
		case BATT_BOTTOM :
			eps_data_receivedf = 1;
   8648a:	4b0a      	ldr	r3, [pc, #40]	; (864b4 <alert_can_data+0x98>)
   8648c:	2201      	movs	r2, #1
   8648e:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   86490:	4b09      	ldr	r3, [pc, #36]	; (864b8 <alert_can_data+0x9c>)
   86492:	697a      	ldr	r2, [r7, #20]
   86494:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   86496:	4b08      	ldr	r3, [pc, #32]	; (864b8 <alert_can_data+0x9c>)
   86498:	693a      	ldr	r2, [r7, #16]
   8649a:	601a      	str	r2, [r3, #0]
		default :
			break;
   8649c:	bf00      	nop
	}

	return;
   8649e:	bf00      	nop
}
   864a0:	371c      	adds	r7, #28
   864a2:	46bd      	mov	sp, r7
   864a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   864a8:	4770      	bx	lr
   864aa:	bf00      	nop
   864ac:	2007a66c 	.word	0x2007a66c
   864b0:	2007a678 	.word	0x2007a678
   864b4:	2007a6f0 	.word	0x2007a6f0
   864b8:	2007a6dc 	.word	0x2007a6dc

000864bc <store_can_msg>:
/* @param: mb: The mailbox from which the message was received. 		*/
/* @Purpose: This function takes a message which was received and stores*/
/* in the proper FIFO in memory.										*/
/************************************************************************/
void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   864bc:	b590      	push	{r4, r7, lr}
   864be:	b087      	sub	sp, #28
   864c0:	af00      	add	r7, sp, #0
   864c2:	6078      	str	r0, [r7, #4]
   864c4:	460b      	mov	r3, r1
   864c6:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   864c8:	687b      	ldr	r3, [r7, #4]
   864ca:	699b      	ldr	r3, [r3, #24]
   864cc:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   864ce:	687b      	ldr	r3, [r7, #4]
   864d0:	69db      	ldr	r3, [r3, #28]
   864d2:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   864d4:	78fb      	ldrb	r3, [r7, #3]
   864d6:	2b07      	cmp	r3, #7
   864d8:	d873      	bhi.n	865c2 <store_can_msg+0x106>
   864da:	a201      	add	r2, pc, #4	; (adr r2, 864e0 <store_can_msg+0x24>)
   864dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   864e0:	00086501 	.word	0x00086501
   864e4:	000865c3 	.word	0x000865c3
   864e8:	000865c3 	.word	0x000865c3
   864ec:	000865c3 	.word	0x000865c3
   864f0:	000865c3 	.word	0x000865c3
   864f4:	00086531 	.word	0x00086531
   864f8:	00086561 	.word	0x00086561
   864fc:	00086591 	.word	0x00086591
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   86500:	4b32      	ldr	r3, [pc, #200]	; (865cc <store_can_msg+0x110>)
   86502:	6819      	ldr	r1, [r3, #0]
   86504:	f107 0214 	add.w	r2, r7, #20
   86508:	f107 030c 	add.w	r3, r7, #12
   8650c:	4608      	mov	r0, r1
   8650e:	4611      	mov	r1, r2
   86510:	461a      	mov	r2, r3
   86512:	2300      	movs	r3, #0
   86514:	4c2e      	ldr	r4, [pc, #184]	; (865d0 <store_can_msg+0x114>)
   86516:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   86518:	4b2c      	ldr	r3, [pc, #176]	; (865cc <store_can_msg+0x110>)
   8651a:	6819      	ldr	r1, [r3, #0]
   8651c:	f107 0210 	add.w	r2, r7, #16
   86520:	f107 030c 	add.w	r3, r7, #12
   86524:	4608      	mov	r0, r1
   86526:	4611      	mov	r1, r2
   86528:	461a      	mov	r2, r3
   8652a:	2300      	movs	r3, #0
   8652c:	4c28      	ldr	r4, [pc, #160]	; (865d0 <store_can_msg+0x114>)
   8652e:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   86530:	4b28      	ldr	r3, [pc, #160]	; (865d4 <store_can_msg+0x118>)
   86532:	6819      	ldr	r1, [r3, #0]
   86534:	f107 0214 	add.w	r2, r7, #20
   86538:	f107 030c 	add.w	r3, r7, #12
   8653c:	4608      	mov	r0, r1
   8653e:	4611      	mov	r1, r2
   86540:	461a      	mov	r2, r3
   86542:	2300      	movs	r3, #0
   86544:	4c22      	ldr	r4, [pc, #136]	; (865d0 <store_can_msg+0x114>)
   86546:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   86548:	4b22      	ldr	r3, [pc, #136]	; (865d4 <store_can_msg+0x118>)
   8654a:	6819      	ldr	r1, [r3, #0]
   8654c:	f107 0210 	add.w	r2, r7, #16
   86550:	f107 030c 	add.w	r3, r7, #12
   86554:	4608      	mov	r0, r1
   86556:	4611      	mov	r1, r2
   86558:	461a      	mov	r2, r3
   8655a:	2300      	movs	r3, #0
   8655c:	4c1c      	ldr	r4, [pc, #112]	; (865d0 <store_can_msg+0x114>)
   8655e:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   86560:	4b1d      	ldr	r3, [pc, #116]	; (865d8 <store_can_msg+0x11c>)
   86562:	6819      	ldr	r1, [r3, #0]
   86564:	f107 0214 	add.w	r2, r7, #20
   86568:	f107 030c 	add.w	r3, r7, #12
   8656c:	4608      	mov	r0, r1
   8656e:	4611      	mov	r1, r2
   86570:	461a      	mov	r2, r3
   86572:	2300      	movs	r3, #0
   86574:	4c16      	ldr	r4, [pc, #88]	; (865d0 <store_can_msg+0x114>)
   86576:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   86578:	4b17      	ldr	r3, [pc, #92]	; (865d8 <store_can_msg+0x11c>)
   8657a:	6819      	ldr	r1, [r3, #0]
   8657c:	f107 0210 	add.w	r2, r7, #16
   86580:	f107 030c 	add.w	r3, r7, #12
   86584:	4608      	mov	r0, r1
   86586:	4611      	mov	r1, r2
   86588:	461a      	mov	r2, r3
   8658a:	2300      	movs	r3, #0
   8658c:	4c10      	ldr	r4, [pc, #64]	; (865d0 <store_can_msg+0x114>)
   8658e:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   86590:	4b12      	ldr	r3, [pc, #72]	; (865dc <store_can_msg+0x120>)
   86592:	6819      	ldr	r1, [r3, #0]
   86594:	f107 0214 	add.w	r2, r7, #20
   86598:	f107 030c 	add.w	r3, r7, #12
   8659c:	4608      	mov	r0, r1
   8659e:	4611      	mov	r1, r2
   865a0:	461a      	mov	r2, r3
   865a2:	2300      	movs	r3, #0
   865a4:	4c0a      	ldr	r4, [pc, #40]	; (865d0 <store_can_msg+0x114>)
   865a6:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   865a8:	4b0c      	ldr	r3, [pc, #48]	; (865dc <store_can_msg+0x120>)
   865aa:	6819      	ldr	r1, [r3, #0]
   865ac:	f107 0210 	add.w	r2, r7, #16
   865b0:	f107 030c 	add.w	r3, r7, #12
   865b4:	4608      	mov	r0, r1
   865b6:	4611      	mov	r1, r2
   865b8:	461a      	mov	r2, r3
   865ba:	2300      	movs	r3, #0
   865bc:	4c04      	ldr	r4, [pc, #16]	; (865d0 <store_can_msg+0x114>)
   865be:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   865c0:	bf00      	nop
   865c2:	bf00      	nop
	}
	return;
}
   865c4:	371c      	adds	r7, #28
   865c6:	46bd      	mov	sp, r7
   865c8:	bd90      	pop	{r4, r7, pc}
   865ca:	bf00      	nop
   865cc:	2007a684 	.word	0x2007a684
   865d0:	00084671 	.word	0x00084671
   865d4:	2007a700 	.word	0x2007a700
   865d8:	2007a63c 	.word	0x2007a63c
   865dc:	2007a6ec 	.word	0x2007a6ec

000865e0 <reset_mailbox_conf>:
/* RESET_MAILBOX_CONF 		                                            */
/* @param: *p_mailbox: the mailbox object to be reset. 					*/
/* @Purpose: This function resets the attributes of object p_mailbox.	*/
/************************************************************************/
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   865e0:	b480      	push	{r7}
   865e2:	b083      	sub	sp, #12
   865e4:	af00      	add	r7, sp, #0
   865e6:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   865e8:	687b      	ldr	r3, [r7, #4]
   865ea:	2200      	movs	r2, #0
   865ec:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   865ee:	687b      	ldr	r3, [r7, #4]
   865f0:	2200      	movs	r2, #0
   865f2:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   865f4:	687b      	ldr	r3, [r7, #4]
   865f6:	2200      	movs	r2, #0
   865f8:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   865fa:	687b      	ldr	r3, [r7, #4]
   865fc:	2200      	movs	r2, #0
   865fe:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   86600:	687b      	ldr	r3, [r7, #4]
   86602:	2200      	movs	r2, #0
   86604:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   86606:	687b      	ldr	r3, [r7, #4]
   86608:	2200      	movs	r2, #0
   8660a:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   8660c:	687b      	ldr	r3, [r7, #4]
   8660e:	2200      	movs	r2, #0
   86610:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   86612:	687b      	ldr	r3, [r7, #4]
   86614:	2200      	movs	r2, #0
   86616:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   86618:	687b      	ldr	r3, [r7, #4]
   8661a:	2200      	movs	r2, #0
   8661c:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   8661e:	687b      	ldr	r3, [r7, #4]
   86620:	2200      	movs	r2, #0
   86622:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   86624:	687b      	ldr	r3, [r7, #4]
   86626:	2200      	movs	r2, #0
   86628:	61da      	str	r2, [r3, #28]

	return;
   8662a:	bf00      	nop
}
   8662c:	370c      	adds	r7, #12
   8662e:	46bd      	mov	sp, r7
   86630:	f85d 7b04 	ldr.w	r7, [sp], #4
   86634:	4770      	bx	lr
   86636:	bf00      	nop

00086638 <save_can_object>:
/* the one that enables the functionality you want.						*/
/* @Purpose: The function takes all the attributes of the original		*/
/* object and stores them in the temp object.							*/
/************************************************************************/
void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   86638:	b480      	push	{r7}
   8663a:	b083      	sub	sp, #12
   8663c:	af00      	add	r7, sp, #0
   8663e:	6078      	str	r0, [r7, #4]
   86640:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   86642:	687b      	ldr	r3, [r7, #4]
   86644:	681a      	ldr	r2, [r3, #0]
   86646:	683b      	ldr	r3, [r7, #0]
   86648:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   8664a:	687b      	ldr	r3, [r7, #4]
   8664c:	791a      	ldrb	r2, [r3, #4]
   8664e:	683b      	ldr	r3, [r7, #0]
   86650:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   86652:	687b      	ldr	r3, [r7, #4]
   86654:	795a      	ldrb	r2, [r3, #5]
   86656:	683b      	ldr	r3, [r7, #0]
   86658:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   8665a:	687b      	ldr	r3, [r7, #4]
   8665c:	799a      	ldrb	r2, [r3, #6]
   8665e:	683b      	ldr	r3, [r7, #0]
   86660:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   86662:	687b      	ldr	r3, [r7, #4]
   86664:	79da      	ldrb	r2, [r3, #7]
   86666:	683b      	ldr	r3, [r7, #0]
   86668:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   8666a:	687b      	ldr	r3, [r7, #4]
   8666c:	689a      	ldr	r2, [r3, #8]
   8666e:	683b      	ldr	r3, [r7, #0]
   86670:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   86672:	687b      	ldr	r3, [r7, #4]
   86674:	68da      	ldr	r2, [r3, #12]
   86676:	683b      	ldr	r3, [r7, #0]
   86678:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   8667a:	687b      	ldr	r3, [r7, #4]
   8667c:	691a      	ldr	r2, [r3, #16]
   8667e:	683b      	ldr	r3, [r7, #0]
   86680:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   86682:	687b      	ldr	r3, [r7, #4]
   86684:	695a      	ldr	r2, [r3, #20]
   86686:	683b      	ldr	r3, [r7, #0]
   86688:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   8668a:	687b      	ldr	r3, [r7, #4]
   8668c:	699a      	ldr	r2, [r3, #24]
   8668e:	683b      	ldr	r3, [r7, #0]
   86690:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   86692:	687b      	ldr	r3, [r7, #4]
   86694:	69da      	ldr	r2, [r3, #28]
   86696:	683b      	ldr	r3, [r7, #0]
   86698:	61da      	str	r2, [r3, #28]
	
	return;
   8669a:	bf00      	nop
}
   8669c:	370c      	adds	r7, #12
   8669e:	46bd      	mov	sp, r7
   866a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   866a4:	4770      	bx	lr
   866a6:	bf00      	nop

000866a8 <restore_can_object>:
/* @param: *temp: A pointer to what was the temporary CAN object.		*/
/* @Purpose: This function replaces all the attributes of the "original"*/
/* object with all the attributes in the "temp" object.					*/
/************************************************************************/
void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   866a8:	b480      	push	{r7}
   866aa:	b083      	sub	sp, #12
   866ac:	af00      	add	r7, sp, #0
   866ae:	6078      	str	r0, [r7, #4]
   866b0:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   866b2:	683b      	ldr	r3, [r7, #0]
   866b4:	681a      	ldr	r2, [r3, #0]
   866b6:	687b      	ldr	r3, [r7, #4]
   866b8:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   866ba:	683b      	ldr	r3, [r7, #0]
   866bc:	791a      	ldrb	r2, [r3, #4]
   866be:	687b      	ldr	r3, [r7, #4]
   866c0:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   866c2:	683b      	ldr	r3, [r7, #0]
   866c4:	795a      	ldrb	r2, [r3, #5]
   866c6:	687b      	ldr	r3, [r7, #4]
   866c8:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   866ca:	683b      	ldr	r3, [r7, #0]
   866cc:	799a      	ldrb	r2, [r3, #6]
   866ce:	687b      	ldr	r3, [r7, #4]
   866d0:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   866d2:	683b      	ldr	r3, [r7, #0]
   866d4:	79da      	ldrb	r2, [r3, #7]
   866d6:	687b      	ldr	r3, [r7, #4]
   866d8:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   866da:	683b      	ldr	r3, [r7, #0]
   866dc:	689a      	ldr	r2, [r3, #8]
   866de:	687b      	ldr	r3, [r7, #4]
   866e0:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   866e2:	683b      	ldr	r3, [r7, #0]
   866e4:	68da      	ldr	r2, [r3, #12]
   866e6:	687b      	ldr	r3, [r7, #4]
   866e8:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   866ea:	683b      	ldr	r3, [r7, #0]
   866ec:	691a      	ldr	r2, [r3, #16]
   866ee:	687b      	ldr	r3, [r7, #4]
   866f0:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   866f2:	683b      	ldr	r3, [r7, #0]
   866f4:	695a      	ldr	r2, [r3, #20]
   866f6:	687b      	ldr	r3, [r7, #4]
   866f8:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   866fa:	683b      	ldr	r3, [r7, #0]
   866fc:	699a      	ldr	r2, [r3, #24]
   866fe:	687b      	ldr	r3, [r7, #4]
   86700:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   86702:	683b      	ldr	r3, [r7, #0]
   86704:	69da      	ldr	r2, [r3, #28]
   86706:	687b      	ldr	r3, [r7, #4]
   86708:	61da      	str	r2, [r3, #28]
	
	return;
   8670a:	bf00      	nop
}
   8670c:	370c      	adds	r7, #12
   8670e:	46bd      	mov	sp, r7
   86710:	f85d 7b04 	ldr.w	r7, [sp], #4
   86714:	4770      	bx	lr
   86716:	bf00      	nop

00086718 <can_initialize>:
/* CAN_INITIALIZE 			                                            */
/* @Purpose: Initializes and enables CAN0 & CAN1 controllers and clocks.*/
/* CAN0/CAN1 mailboxes are reset and interrupts are disabled.			*/
/************************************************************************/
void can_initialize(void)
{
   86718:	b580      	push	{r7, lr}
   8671a:	b086      	sub	sp, #24
   8671c:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   8671e:	2301      	movs	r3, #1
   86720:	613b      	str	r3, [r7, #16]
   86722:	2300      	movs	r3, #0
   86724:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   86726:	485a      	ldr	r0, [pc, #360]	; (86890 <can_initialize+0x178>)
   86728:	2134      	movs	r1, #52	; 0x34
   8672a:	4b5a      	ldr	r3, [pc, #360]	; (86894 <can_initialize+0x17c>)
   8672c:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   8672e:	4858      	ldr	r0, [pc, #352]	; (86890 <can_initialize+0x178>)
   86730:	2135      	movs	r1, #53	; 0x35
   86732:	4b59      	ldr	r3, [pc, #356]	; (86898 <can_initialize+0x180>)
   86734:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   86736:	4856      	ldr	r0, [pc, #344]	; (86890 <can_initialize+0x178>)
   86738:	4b58      	ldr	r3, [pc, #352]	; (8689c <can_initialize+0x184>)
   8673a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   8673c:	4854      	ldr	r0, [pc, #336]	; (86890 <can_initialize+0x178>)
   8673e:	4b58      	ldr	r3, [pc, #352]	; (868a0 <can_initialize+0x188>)
   86740:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   86742:	4858      	ldr	r0, [pc, #352]	; (868a4 <can_initialize+0x18c>)
   86744:	218f      	movs	r1, #143	; 0x8f
   86746:	4b53      	ldr	r3, [pc, #332]	; (86894 <can_initialize+0x17c>)
   86748:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   8674a:	4856      	ldr	r0, [pc, #344]	; (868a4 <can_initialize+0x18c>)
   8674c:	2190      	movs	r1, #144	; 0x90
   8674e:	4b52      	ldr	r3, [pc, #328]	; (86898 <can_initialize+0x180>)
   86750:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   86752:	4854      	ldr	r0, [pc, #336]	; (868a4 <can_initialize+0x18c>)
   86754:	4b51      	ldr	r3, [pc, #324]	; (8689c <can_initialize+0x184>)
   86756:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   86758:	4852      	ldr	r0, [pc, #328]	; (868a4 <can_initialize+0x18c>)
   8675a:	4b51      	ldr	r3, [pc, #324]	; (868a0 <can_initialize+0x188>)
   8675c:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8675e:	202b      	movs	r0, #43	; 0x2b
   86760:	4b51      	ldr	r3, [pc, #324]	; (868a8 <can_initialize+0x190>)
   86762:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   86764:	202c      	movs	r0, #44	; 0x2c
   86766:	4b50      	ldr	r3, [pc, #320]	; (868a8 <can_initialize+0x190>)
   86768:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   8676a:	4b50      	ldr	r3, [pc, #320]	; (868ac <can_initialize+0x194>)
   8676c:	4798      	blx	r3
   8676e:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   86770:	484f      	ldr	r0, [pc, #316]	; (868b0 <can_initialize+0x198>)
   86772:	68f9      	ldr	r1, [r7, #12]
   86774:	22fa      	movs	r2, #250	; 0xfa
   86776:	4b4f      	ldr	r3, [pc, #316]	; (868b4 <can_initialize+0x19c>)
   86778:	4798      	blx	r3
   8677a:	4603      	mov	r3, r0
   8677c:	2b00      	cmp	r3, #0
   8677e:	f000 8083 	beq.w	86888 <can_initialize+0x170>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   86782:	484d      	ldr	r0, [pc, #308]	; (868b8 <can_initialize+0x1a0>)
   86784:	68f9      	ldr	r1, [r7, #12]
   86786:	22fa      	movs	r2, #250	; 0xfa
   86788:	4b4a      	ldr	r3, [pc, #296]	; (868b4 <can_initialize+0x19c>)
   8678a:	4798      	blx	r3
   8678c:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   8678e:	2b00      	cmp	r3, #0
   86790:	d07a      	beq.n	86888 <can_initialize+0x170>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   86792:	4847      	ldr	r0, [pc, #284]	; (868b0 <can_initialize+0x198>)
   86794:	f04f 31ff 	mov.w	r1, #4294967295
   86798:	4b48      	ldr	r3, [pc, #288]	; (868bc <can_initialize+0x1a4>)
   8679a:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8679c:	4846      	ldr	r0, [pc, #280]	; (868b8 <can_initialize+0x1a0>)
   8679e:	f04f 31ff 	mov.w	r1, #4294967295
   867a2:	4b46      	ldr	r3, [pc, #280]	; (868bc <can_initialize+0x1a4>)
   867a4:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   867a6:	202b      	movs	r0, #43	; 0x2b
   867a8:	4b45      	ldr	r3, [pc, #276]	; (868c0 <can_initialize+0x1a8>)
   867aa:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   867ac:	202c      	movs	r0, #44	; 0x2c
   867ae:	4b44      	ldr	r3, [pc, #272]	; (868c0 <can_initialize+0x1a8>)
   867b0:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   867b2:	483f      	ldr	r0, [pc, #252]	; (868b0 <can_initialize+0x198>)
   867b4:	4b43      	ldr	r3, [pc, #268]	; (868c4 <can_initialize+0x1ac>)
   867b6:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   867b8:	483f      	ldr	r0, [pc, #252]	; (868b8 <can_initialize+0x1a0>)
   867ba:	4b42      	ldr	r3, [pc, #264]	; (868c4 <can_initialize+0x1ac>)
   867bc:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   867be:	6938      	ldr	r0, [r7, #16]
   867c0:	4b41      	ldr	r3, [pc, #260]	; (868c8 <can_initialize+0x1b0>)
   867c2:	4798      	blx	r3
   867c4:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   867c6:	4b41      	ldr	r3, [pc, #260]	; (868cc <can_initialize+0x1b4>)
   867c8:	2200      	movs	r2, #0
   867ca:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   867cc:	4b40      	ldr	r3, [pc, #256]	; (868d0 <can_initialize+0x1b8>)
   867ce:	2200      	movs	r2, #0
   867d0:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   867d2:	4b40      	ldr	r3, [pc, #256]	; (868d4 <can_initialize+0x1bc>)
   867d4:	2200      	movs	r2, #0
   867d6:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   867d8:	4b3f      	ldr	r3, [pc, #252]	; (868d8 <can_initialize+0x1c0>)
   867da:	2200      	movs	r2, #0
   867dc:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   867de:	4b3f      	ldr	r3, [pc, #252]	; (868dc <can_initialize+0x1c4>)
   867e0:	2200      	movs	r2, #0
   867e2:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   867e4:	4b3e      	ldr	r3, [pc, #248]	; (868e0 <can_initialize+0x1c8>)
   867e6:	2200      	movs	r2, #0
   867e8:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   867ea:	2300      	movs	r3, #0
   867ec:	617b      	str	r3, [r7, #20]
   867ee:	e016      	b.n	8681e <can_initialize+0x106>
		{
			glob_stored_data[i] = 0;
   867f0:	4b3c      	ldr	r3, [pc, #240]	; (868e4 <can_initialize+0x1cc>)
   867f2:	697a      	ldr	r2, [r7, #20]
   867f4:	2100      	movs	r1, #0
   867f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   867fa:	4b3b      	ldr	r3, [pc, #236]	; (868e8 <can_initialize+0x1d0>)
   867fc:	697a      	ldr	r2, [r7, #20]
   867fe:	2100      	movs	r1, #0
   86800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   86804:	4b39      	ldr	r3, [pc, #228]	; (868ec <can_initialize+0x1d4>)
   86806:	697a      	ldr	r2, [r7, #20]
   86808:	2100      	movs	r1, #0
   8680a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   8680e:	4b38      	ldr	r3, [pc, #224]	; (868f0 <can_initialize+0x1d8>)
   86810:	697a      	ldr	r2, [r7, #20]
   86812:	2100      	movs	r1, #0
   86814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   86818:	697b      	ldr	r3, [r7, #20]
   8681a:	3301      	adds	r3, #1
   8681c:	617b      	str	r3, [r7, #20]
   8681e:	697b      	ldr	r3, [r7, #20]
   86820:	2b01      	cmp	r3, #1
   86822:	d9e5      	bls.n	867f0 <can_initialize+0xd8>
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   86824:	2364      	movs	r3, #100	; 0x64
   86826:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   86828:	2304      	movs	r3, #4
   8682a:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   8682c:	68b8      	ldr	r0, [r7, #8]
   8682e:	6879      	ldr	r1, [r7, #4]
   86830:	2200      	movs	r2, #0
   86832:	4b30      	ldr	r3, [pc, #192]	; (868f4 <can_initialize+0x1dc>)
   86834:	4798      	blx	r3
   86836:	4602      	mov	r2, r0
   86838:	4b2f      	ldr	r3, [pc, #188]	; (868f8 <can_initialize+0x1e0>)
   8683a:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   8683c:	68b8      	ldr	r0, [r7, #8]
   8683e:	6879      	ldr	r1, [r7, #4]
   86840:	2200      	movs	r2, #0
   86842:	4b2c      	ldr	r3, [pc, #176]	; (868f4 <can_initialize+0x1dc>)
   86844:	4798      	blx	r3
   86846:	4602      	mov	r2, r0
   86848:	4b2c      	ldr	r3, [pc, #176]	; (868fc <can_initialize+0x1e4>)
   8684a:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   8684c:	68b8      	ldr	r0, [r7, #8]
   8684e:	6879      	ldr	r1, [r7, #4]
   86850:	2200      	movs	r2, #0
   86852:	4b28      	ldr	r3, [pc, #160]	; (868f4 <can_initialize+0x1dc>)
   86854:	4798      	blx	r3
   86856:	4602      	mov	r2, r0
   86858:	4b29      	ldr	r3, [pc, #164]	; (86900 <can_initialize+0x1e8>)
   8685a:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   8685c:	68b8      	ldr	r0, [r7, #8]
   8685e:	6879      	ldr	r1, [r7, #4]
   86860:	2200      	movs	r2, #0
   86862:	4b24      	ldr	r3, [pc, #144]	; (868f4 <can_initialize+0x1dc>)
   86864:	4798      	blx	r3
   86866:	4602      	mov	r2, r0
   86868:	4b26      	ldr	r3, [pc, #152]	; (86904 <can_initialize+0x1ec>)
   8686a:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */

		for (i = 0; i < 8; i++)
   8686c:	2300      	movs	r3, #0
   8686e:	617b      	str	r3, [r7, #20]
   86870:	e007      	b.n	86882 <can_initialize+0x16a>
		{
			transmit_complete[i] = 0;
   86872:	4a25      	ldr	r2, [pc, #148]	; (86908 <can_initialize+0x1f0>)
   86874:	697b      	ldr	r3, [r7, #20]
   86876:	4413      	add	r3, r2
   86878:	2200      	movs	r2, #0
   8687a:	701a      	strb	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
		can_com_fifo = xQueueCreate(fifo_length, item_size);
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */

		for (i = 0; i < 8; i++)
   8687c:	697b      	ldr	r3, [r7, #20]
   8687e:	3301      	adds	r3, #1
   86880:	617b      	str	r3, [r7, #20]
   86882:	697b      	ldr	r3, [r7, #20]
   86884:	2b07      	cmp	r3, #7
   86886:	d9f4      	bls.n	86872 <can_initialize+0x15a>
		{
			transmit_complete[i] = 0;
		}

	}
	return;
   86888:	bf00      	nop
}
   8688a:	3718      	adds	r7, #24
   8688c:	46bd      	mov	sp, r7
   8688e:	bd80      	pop	{r7, pc}
   86890:	2007a724 	.word	0x2007a724
   86894:	00082715 	.word	0x00082715
   86898:	00082731 	.word	0x00082731
   8689c:	00082769 	.word	0x00082769
   868a0:	0008274d 	.word	0x0008274d
   868a4:	2007a670 	.word	0x2007a670
   868a8:	000834a1 	.word	0x000834a1
   868ac:	00086195 	.word	0x00086195
   868b0:	400b4000 	.word	0x400b4000
   868b4:	000828d5 	.word	0x000828d5
   868b8:	400b8000 	.word	0x400b8000
   868bc:	000829b9 	.word	0x000829b9
   868c0:	000860d5 	.word	0x000860d5
   868c4:	00082c31 	.word	0x00082c31
   868c8:	0008690d 	.word	0x0008690d
   868cc:	2007a66c 	.word	0x2007a66c
   868d0:	2007a678 	.word	0x2007a678
   868d4:	2007a6e8 	.word	0x2007a6e8
   868d8:	2007a648 	.word	0x2007a648
   868dc:	2007a6b0 	.word	0x2007a6b0
   868e0:	2007a679 	.word	0x2007a679
   868e4:	2007a640 	.word	0x2007a640
   868e8:	2007a6f8 	.word	0x2007a6f8
   868ec:	2007a67c 	.word	0x2007a67c
   868f0:	2007a6b4 	.word	0x2007a6b4
   868f4:	00084421 	.word	0x00084421
   868f8:	2007a684 	.word	0x2007a684
   868fc:	2007a700 	.word	0x2007a700
   86900:	2007a63c 	.word	0x2007a63c
   86904:	2007a6ec 	.word	0x2007a6ec
   86908:	2007a6a8 	.word	0x2007a6a8

0008690c <can_init_mailboxes>:
/* @param: x: simply meant to be to confirm that this function was 		*/
/* called naturally.													*/
/* @Purpose: This function initializes the CAN mailboxes for use.		*/
/************************************************************************/
uint32_t can_init_mailboxes(uint32_t x)
{
   8690c:	b580      	push	{r7, lr}
   8690e:	b082      	sub	sp, #8
   86910:	af00      	add	r7, sp, #0
   86912:	6078      	str	r0, [r7, #4]
	//configASSERT(x);	//Check if this function was called naturally.

	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */
	/* CAN0 MB7 == COMMAND/MSG MB				*/	
	reset_mailbox_conf(&can0_mailbox);
   86914:	484a      	ldr	r0, [pc, #296]	; (86a40 <can_init_mailboxes+0x134>)
   86916:	4b4b      	ldr	r3, [pc, #300]	; (86a44 <can_init_mailboxes+0x138>)
   86918:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   8691a:	4b49      	ldr	r3, [pc, #292]	; (86a40 <can_init_mailboxes+0x134>)
   8691c:	2207      	movs	r2, #7
   8691e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   86920:	4b47      	ldr	r3, [pc, #284]	; (86a40 <can_init_mailboxes+0x134>)
   86922:	2203      	movs	r2, #3
   86924:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 10;		//Transmission Priority (Can be Changed dynamically)
   86926:	4b46      	ldr	r3, [pc, #280]	; (86a40 <can_init_mailboxes+0x134>)
   86928:	220a      	movs	r2, #10
   8692a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8692c:	4b44      	ldr	r3, [pc, #272]	; (86a40 <can_init_mailboxes+0x134>)
   8692e:	2200      	movs	r2, #0
   86930:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86932:	4b43      	ldr	r3, [pc, #268]	; (86a40 <can_init_mailboxes+0x134>)
   86934:	2200      	movs	r2, #0
   86936:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   86938:	4843      	ldr	r0, [pc, #268]	; (86a48 <can_init_mailboxes+0x13c>)
   8693a:	4941      	ldr	r1, [pc, #260]	; (86a40 <can_init_mailboxes+0x134>)
   8693c:	4b43      	ldr	r3, [pc, #268]	; (86a4c <can_init_mailboxes+0x140>)
   8693e:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86940:	4843      	ldr	r0, [pc, #268]	; (86a50 <can_init_mailboxes+0x144>)
   86942:	4b40      	ldr	r3, [pc, #256]	; (86a44 <can_init_mailboxes+0x138>)
   86944:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   86946:	4b42      	ldr	r3, [pc, #264]	; (86a50 <can_init_mailboxes+0x144>)
   86948:	2200      	movs	r2, #0
   8694a:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8694c:	4b40      	ldr	r3, [pc, #256]	; (86a50 <can_init_mailboxes+0x144>)
   8694e:	2201      	movs	r2, #1
   86950:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   86952:	4b3f      	ldr	r3, [pc, #252]	; (86a50 <can_init_mailboxes+0x144>)
   86954:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86958:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   8695a:	4b3d      	ldr	r3, [pc, #244]	; (86a50 <can_init_mailboxes+0x144>)
   8695c:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   86960:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   86962:	483c      	ldr	r0, [pc, #240]	; (86a54 <can_init_mailboxes+0x148>)
   86964:	493a      	ldr	r1, [pc, #232]	; (86a50 <can_init_mailboxes+0x144>)
   86966:	4b39      	ldr	r3, [pc, #228]	; (86a4c <can_init_mailboxes+0x140>)
   86968:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8696a:	4839      	ldr	r0, [pc, #228]	; (86a50 <can_init_mailboxes+0x144>)
   8696c:	4b35      	ldr	r3, [pc, #212]	; (86a44 <can_init_mailboxes+0x138>)
   8696e:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   86970:	4b37      	ldr	r3, [pc, #220]	; (86a50 <can_init_mailboxes+0x144>)
   86972:	2205      	movs	r2, #5
   86974:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   86976:	4b36      	ldr	r3, [pc, #216]	; (86a50 <can_init_mailboxes+0x144>)
   86978:	2201      	movs	r2, #1
   8697a:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8697c:	4b34      	ldr	r3, [pc, #208]	; (86a50 <can_init_mailboxes+0x144>)
   8697e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   86982:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   86984:	4b32      	ldr	r3, [pc, #200]	; (86a50 <can_init_mailboxes+0x144>)
   86986:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   8698a:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8698c:	4831      	ldr	r0, [pc, #196]	; (86a54 <can_init_mailboxes+0x148>)
   8698e:	4930      	ldr	r1, [pc, #192]	; (86a50 <can_init_mailboxes+0x144>)
   86990:	4b2e      	ldr	r3, [pc, #184]	; (86a4c <can_init_mailboxes+0x140>)
   86992:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   86994:	482e      	ldr	r0, [pc, #184]	; (86a50 <can_init_mailboxes+0x144>)
   86996:	4b2b      	ldr	r3, [pc, #172]	; (86a44 <can_init_mailboxes+0x138>)
   86998:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   8699a:	4b2d      	ldr	r3, [pc, #180]	; (86a50 <can_init_mailboxes+0x144>)
   8699c:	2206      	movs	r2, #6
   8699e:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   869a0:	4b2b      	ldr	r3, [pc, #172]	; (86a50 <can_init_mailboxes+0x144>)
   869a2:	2201      	movs	r2, #1
   869a4:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   869a6:	4b2a      	ldr	r3, [pc, #168]	; (86a50 <can_init_mailboxes+0x144>)
   869a8:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   869ac:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   869ae:	4b28      	ldr	r3, [pc, #160]	; (86a50 <can_init_mailboxes+0x144>)
   869b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   869b4:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   869b6:	4827      	ldr	r0, [pc, #156]	; (86a54 <can_init_mailboxes+0x148>)
   869b8:	4925      	ldr	r1, [pc, #148]	; (86a50 <can_init_mailboxes+0x144>)
   869ba:	4b24      	ldr	r3, [pc, #144]	; (86a4c <can_init_mailboxes+0x140>)
   869bc:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   869be:	4824      	ldr	r0, [pc, #144]	; (86a50 <can_init_mailboxes+0x144>)
   869c0:	4b20      	ldr	r3, [pc, #128]	; (86a44 <can_init_mailboxes+0x138>)
   869c2:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   869c4:	4b22      	ldr	r3, [pc, #136]	; (86a50 <can_init_mailboxes+0x144>)
   869c6:	2207      	movs	r2, #7
   869c8:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   869ca:	4b21      	ldr	r3, [pc, #132]	; (86a50 <can_init_mailboxes+0x144>)
   869cc:	2201      	movs	r2, #1
   869ce:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   869d0:	4b1f      	ldr	r3, [pc, #124]	; (86a50 <can_init_mailboxes+0x144>)
   869d2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   869d6:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   869d8:	4b1d      	ldr	r3, [pc, #116]	; (86a50 <can_init_mailboxes+0x144>)
   869da:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   869de:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   869e0:	481c      	ldr	r0, [pc, #112]	; (86a54 <can_init_mailboxes+0x148>)
   869e2:	491b      	ldr	r1, [pc, #108]	; (86a50 <can_init_mailboxes+0x144>)
   869e4:	4b19      	ldr	r3, [pc, #100]	; (86a4c <can_init_mailboxes+0x140>)
   869e6:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   869e8:	4815      	ldr	r0, [pc, #84]	; (86a40 <can_init_mailboxes+0x134>)
   869ea:	4b16      	ldr	r3, [pc, #88]	; (86a44 <can_init_mailboxes+0x138>)
   869ec:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   869ee:	4b14      	ldr	r3, [pc, #80]	; (86a40 <can_init_mailboxes+0x134>)
   869f0:	2206      	movs	r2, #6
   869f2:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   869f4:	4b12      	ldr	r3, [pc, #72]	; (86a40 <can_init_mailboxes+0x134>)
   869f6:	2203      	movs	r2, #3
   869f8:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   869fa:	4b11      	ldr	r3, [pc, #68]	; (86a40 <can_init_mailboxes+0x134>)
   869fc:	2214      	movs	r2, #20
   869fe:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   86a00:	4b0f      	ldr	r3, [pc, #60]	; (86a40 <can_init_mailboxes+0x134>)
   86a02:	2200      	movs	r2, #0
   86a04:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   86a06:	4b0e      	ldr	r3, [pc, #56]	; (86a40 <can_init_mailboxes+0x134>)
   86a08:	2200      	movs	r2, #0
   86a0a:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   86a0c:	480e      	ldr	r0, [pc, #56]	; (86a48 <can_init_mailboxes+0x13c>)
   86a0e:	490c      	ldr	r1, [pc, #48]	; (86a40 <can_init_mailboxes+0x134>)
   86a10:	4b0e      	ldr	r3, [pc, #56]	; (86a4c <can_init_mailboxes+0x140>)
   86a12:	4798      	blx	r3

	can_enable_interrupt(CAN1, CAN_IER_MB0);
   86a14:	480f      	ldr	r0, [pc, #60]	; (86a54 <can_init_mailboxes+0x148>)
   86a16:	2101      	movs	r1, #1
   86a18:	4b0f      	ldr	r3, [pc, #60]	; (86a58 <can_init_mailboxes+0x14c>)
   86a1a:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   86a1c:	480d      	ldr	r0, [pc, #52]	; (86a54 <can_init_mailboxes+0x148>)
   86a1e:	2120      	movs	r1, #32
   86a20:	4b0d      	ldr	r3, [pc, #52]	; (86a58 <can_init_mailboxes+0x14c>)
   86a22:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   86a24:	480b      	ldr	r0, [pc, #44]	; (86a54 <can_init_mailboxes+0x148>)
   86a26:	2140      	movs	r1, #64	; 0x40
   86a28:	4b0b      	ldr	r3, [pc, #44]	; (86a58 <can_init_mailboxes+0x14c>)
   86a2a:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   86a2c:	4809      	ldr	r0, [pc, #36]	; (86a54 <can_init_mailboxes+0x148>)
   86a2e:	2180      	movs	r1, #128	; 0x80
   86a30:	4b09      	ldr	r3, [pc, #36]	; (86a58 <can_init_mailboxes+0x14c>)
   86a32:	4798      	blx	r3
	


	return 1;
   86a34:	2301      	movs	r3, #1
}
   86a36:	4618      	mov	r0, r3
   86a38:	3708      	adds	r7, #8
   86a3a:	46bd      	mov	sp, r7
   86a3c:	bd80      	pop	{r7, pc}
   86a3e:	bf00      	nop
   86a40:	2007a6bc 	.word	0x2007a6bc
   86a44:	000865e1 	.word	0x000865e1
   86a48:	400b4000 	.word	0x400b4000
   86a4c:	00082a4d 	.word	0x00082a4d
   86a50:	2007a64c 	.word	0x2007a64c
   86a54:	400b8000 	.word	0x400b8000
   86a58:	0008299d 	.word	0x0008299d

00086a5c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   86a5c:	b480      	push	{r7}
   86a5e:	b085      	sub	sp, #20
   86a60:	af00      	add	r7, sp, #0
   86a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   86a64:	687b      	ldr	r3, [r7, #4]
   86a66:	f003 0307 	and.w	r3, r3, #7
   86a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   86a6c:	4b0c      	ldr	r3, [pc, #48]	; (86aa0 <NVIC_SetPriorityGrouping+0x44>)
   86a6e:	68db      	ldr	r3, [r3, #12]
   86a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   86a72:	68ba      	ldr	r2, [r7, #8]
   86a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   86a78:	4013      	ands	r3, r2
   86a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   86a7c:	68fb      	ldr	r3, [r7, #12]
   86a7e:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   86a80:	68bb      	ldr	r3, [r7, #8]
   86a82:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   86a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   86a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   86a8c:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   86a8e:	4b04      	ldr	r3, [pc, #16]	; (86aa0 <NVIC_SetPriorityGrouping+0x44>)
   86a90:	68ba      	ldr	r2, [r7, #8]
   86a92:	60da      	str	r2, [r3, #12]
}
   86a94:	3714      	adds	r7, #20
   86a96:	46bd      	mov	sp, r7
   86a98:	f85d 7b04 	ldr.w	r7, [sp], #4
   86a9c:	4770      	bx	lr
   86a9e:	bf00      	nop
   86aa0:	e000ed00 	.word	0xe000ed00

00086aa4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   86aa4:	b480      	push	{r7}
   86aa6:	b083      	sub	sp, #12
   86aa8:	af00      	add	r7, sp, #0
   86aaa:	4603      	mov	r3, r0
   86aac:	6039      	str	r1, [r7, #0]
   86aae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   86ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86ab4:	2b00      	cmp	r3, #0
   86ab6:	da0b      	bge.n	86ad0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   86ab8:	490d      	ldr	r1, [pc, #52]	; (86af0 <NVIC_SetPriority+0x4c>)
   86aba:	79fb      	ldrb	r3, [r7, #7]
   86abc:	f003 030f 	and.w	r3, r3, #15
   86ac0:	3b04      	subs	r3, #4
   86ac2:	683a      	ldr	r2, [r7, #0]
   86ac4:	b2d2      	uxtb	r2, r2
   86ac6:	0112      	lsls	r2, r2, #4
   86ac8:	b2d2      	uxtb	r2, r2
   86aca:	440b      	add	r3, r1
   86acc:	761a      	strb	r2, [r3, #24]
   86ace:	e009      	b.n	86ae4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   86ad0:	4908      	ldr	r1, [pc, #32]	; (86af4 <NVIC_SetPriority+0x50>)
   86ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86ad6:	683a      	ldr	r2, [r7, #0]
   86ad8:	b2d2      	uxtb	r2, r2
   86ada:	0112      	lsls	r2, r2, #4
   86adc:	b2d2      	uxtb	r2, r2
   86ade:	440b      	add	r3, r1
   86ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   86ae4:	370c      	adds	r7, #12
   86ae6:	46bd      	mov	sp, r7
   86ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
   86aec:	4770      	bx	lr
   86aee:	bf00      	nop
   86af0:	e000ed00 	.word	0xe000ed00
   86af4:	e000e100 	.word	0xe000e100

00086af8 <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   86af8:	b480      	push	{r7}
   86afa:	b083      	sub	sp, #12
   86afc:	af00      	add	r7, sp, #0
   86afe:	4603      	mov	r3, r0
   86b00:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   86b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86b06:	2b00      	cmp	r3, #0
   86b08:	da0a      	bge.n	86b20 <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   86b0a:	4a0d      	ldr	r2, [pc, #52]	; (86b40 <NVIC_GetPriority+0x48>)
   86b0c:	79fb      	ldrb	r3, [r7, #7]
   86b0e:	f003 030f 	and.w	r3, r3, #15
   86b12:	3b04      	subs	r3, #4
   86b14:	4413      	add	r3, r2
   86b16:	7e1b      	ldrb	r3, [r3, #24]
   86b18:	b2db      	uxtb	r3, r3
   86b1a:	091b      	lsrs	r3, r3, #4
   86b1c:	b2db      	uxtb	r3, r3
   86b1e:	e008      	b.n	86b32 <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   86b20:	4a08      	ldr	r2, [pc, #32]	; (86b44 <NVIC_GetPriority+0x4c>)
   86b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86b26:	4413      	add	r3, r2
   86b28:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   86b2c:	b2db      	uxtb	r3, r3
   86b2e:	091b      	lsrs	r3, r3, #4
   86b30:	b2db      	uxtb	r3, r3
}
   86b32:	4618      	mov	r0, r3
   86b34:	370c      	adds	r7, #12
   86b36:	46bd      	mov	sp, r7
   86b38:	f85d 7b04 	ldr.w	r7, [sp], #4
   86b3c:	4770      	bx	lr
   86b3e:	bf00      	nop
   86b40:	e000ed00 	.word	0xe000ed00
   86b44:	e000e100 	.word	0xe000e100

00086b48 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   86b48:	b580      	push	{r7, lr}
   86b4a:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   86b4c:	4b06      	ldr	r3, [pc, #24]	; (86b68 <main+0x20>)
   86b4e:	2200      	movs	r2, #0
   86b50:	601a      	str	r2, [r3, #0]
	safe_mode();
   86b52:	4b06      	ldr	r3, [pc, #24]	; (86b6c <main+0x24>)
   86b54:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   86b56:	4b06      	ldr	r3, [pc, #24]	; (86b70 <main+0x28>)
   86b58:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   86b5a:	4b06      	ldr	r3, [pc, #24]	; (86b74 <main+0x2c>)
   86b5c:	4798      	blx	r3
	//my_blink();
	//command_loop();
	//housekeep();
	//data_test();
	//time_update();
	spimemtest();
   86b5e:	4b06      	ldr	r3, [pc, #24]	; (86b78 <main+0x30>)
   86b60:	4798      	blx	r3
	
	/* Start Scheduler */
	vTaskStartScheduler();
   86b62:	4b06      	ldr	r3, [pc, #24]	; (86b7c <main+0x34>)
   86b64:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   86b66:	e7fe      	b.n	86b66 <main+0x1e>
   86b68:	2007a6e4 	.word	0x2007a6e4
   86b6c:	00086b81 	.word	0x00086b81
   86b70:	00086c49 	.word	0x00086c49
   86b74:	00086bc1 	.word	0x00086bc1
   86b78:	00080fa5 	.word	0x00080fa5
   86b7c:	00084e95 	.word	0x00084e95

00086b80 <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   86b80:	b580      	push	{r7, lr}
   86b82:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   86b84:	4b08      	ldr	r3, [pc, #32]	; (86ba8 <safe_mode+0x28>)
   86b86:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   86b88:	2000      	movs	r0, #0
   86b8a:	4b08      	ldr	r3, [pc, #32]	; (86bac <safe_mode+0x2c>)
   86b8c:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   86b8e:	4b08      	ldr	r3, [pc, #32]	; (86bb0 <safe_mode+0x30>)
   86b90:	4798      	blx	r3
	//uint32_t timeOut, low, high;
	
	//timeOut = 80000000;
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   86b92:	4b08      	ldr	r3, [pc, #32]	; (86bb4 <safe_mode+0x34>)
   86b94:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   86b96:	4b08      	ldr	r3, [pc, #32]	; (86bb8 <safe_mode+0x38>)
   86b98:	4798      	blx	r3
	
	//uint32_t a;
	//a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   86b9a:	bf00      	nop
   86b9c:	4b07      	ldr	r3, [pc, #28]	; (86bbc <safe_mode+0x3c>)
   86b9e:	681b      	ldr	r3, [r3, #0]
   86ba0:	2b00      	cmp	r3, #0
   86ba2:	d1fb      	bne.n	86b9c <safe_mode+0x1c>
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
		*/
	}
}
   86ba4:	bd80      	pop	{r7, pc}
   86ba6:	bf00      	nop
   86ba8:	0008254d 	.word	0x0008254d
   86bac:	00086a5d 	.word	0x00086a5d
   86bb0:	000825b5 	.word	0x000825b5
   86bb4:	00086bf1 	.word	0x00086bf1
   86bb8:	00086719 	.word	0x00086719
   86bbc:	2007a6e4 	.word	0x2007a6e4

00086bc0 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   86bc0:	b580      	push	{r7, lr}
   86bc2:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   86bc4:	4b05      	ldr	r3, [pc, #20]	; (86bdc <prvSetupHardware+0x1c>)
   86bc6:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   86bc8:	4b05      	ldr	r3, [pc, #20]	; (86be0 <prvSetupHardware+0x20>)
   86bca:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   86bcc:	4b05      	ldr	r3, [pc, #20]	; (86be4 <prvSetupHardware+0x24>)
   86bce:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   86bd0:	4b05      	ldr	r3, [pc, #20]	; (86be8 <prvSetupHardware+0x28>)
   86bd2:	4798      	blx	r3
	
	/* Initialize RTC registers and set the default initial time. */
	//rtc_init(DS3234_INTCN);
	
	/* Initialize the SPI memory chips	*/
	spimem_initialize();
   86bd4:	4b05      	ldr	r3, [pc, #20]	; (86bec <prvSetupHardware+0x2c>)
   86bd6:	4798      	blx	r3
	
	/* Initialize SPI Memory Chips								  */
	
	
}
   86bd8:	bd80      	pop	{r7, pc}
   86bda:	bf00      	nop
   86bdc:	0008261d 	.word	0x0008261d
   86be0:	00080565 	.word	0x00080565
   86be4:	000821cd 	.word	0x000821cd
   86be8:	00081ad9 	.word	0x00081ad9
   86bec:	0008061d 	.word	0x0008061d

00086bf0 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   86bf0:	b598      	push	{r3, r4, r7, lr}
   86bf2:	af00      	add	r7, sp, #0
	Can0_Mutex = xSemaphoreCreateBinary();
   86bf4:	2001      	movs	r0, #1
   86bf6:	2100      	movs	r1, #0
   86bf8:	2203      	movs	r2, #3
   86bfa:	4b0f      	ldr	r3, [pc, #60]	; (86c38 <prvInitializeMutexes+0x48>)
   86bfc:	4798      	blx	r3
   86bfe:	4602      	mov	r2, r0
   86c00:	4b0e      	ldr	r3, [pc, #56]	; (86c3c <prvInitializeMutexes+0x4c>)
   86c02:	601a      	str	r2, [r3, #0]
	Spi0_Mutex = xSemaphoreCreateBinary();
   86c04:	2001      	movs	r0, #1
   86c06:	2100      	movs	r1, #0
   86c08:	2203      	movs	r2, #3
   86c0a:	4b0b      	ldr	r3, [pc, #44]	; (86c38 <prvInitializeMutexes+0x48>)
   86c0c:	4798      	blx	r3
   86c0e:	4602      	mov	r2, r0
   86c10:	4b0b      	ldr	r3, [pc, #44]	; (86c40 <prvInitializeMutexes+0x50>)
   86c12:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(Can0_Mutex);
   86c14:	4b09      	ldr	r3, [pc, #36]	; (86c3c <prvInitializeMutexes+0x4c>)
   86c16:	681b      	ldr	r3, [r3, #0]
   86c18:	4618      	mov	r0, r3
   86c1a:	2100      	movs	r1, #0
   86c1c:	2200      	movs	r2, #0
   86c1e:	2300      	movs	r3, #0
   86c20:	4c08      	ldr	r4, [pc, #32]	; (86c44 <prvInitializeMutexes+0x54>)
   86c22:	47a0      	blx	r4
	xSemaphoreGive(Spi0_Mutex);
   86c24:	4b06      	ldr	r3, [pc, #24]	; (86c40 <prvInitializeMutexes+0x50>)
   86c26:	681b      	ldr	r3, [r3, #0]
   86c28:	4618      	mov	r0, r3
   86c2a:	2100      	movs	r1, #0
   86c2c:	2200      	movs	r2, #0
   86c2e:	2300      	movs	r3, #0
   86c30:	4c04      	ldr	r4, [pc, #16]	; (86c44 <prvInitializeMutexes+0x54>)
   86c32:	47a0      	blx	r4
	return;
   86c34:	bf00      	nop
}
   86c36:	bd98      	pop	{r3, r4, r7, pc}
   86c38:	00084421 	.word	0x00084421
   86c3c:	2007a6f4 	.word	0x2007a6f4
   86c40:	2007a930 	.word	0x2007a930
   86c44:	000844ad 	.word	0x000844ad

00086c48 <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   86c48:	b580      	push	{r7, lr}
   86c4a:	b082      	sub	sp, #8
   86c4c:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   86c4e:	230b      	movs	r3, #11
   86c50:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   86c52:	232c      	movs	r3, #44	; 0x2c
   86c54:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   86c56:	232b      	movs	r3, #43	; 0x2b
   86c58:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   86c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
   86c5e:	4618      	mov	r0, r3
   86c60:	6879      	ldr	r1, [r7, #4]
   86c62:	4b0a      	ldr	r3, [pc, #40]	; (86c8c <prvInitializeInterruptPriorities+0x44>)
   86c64:	4798      	blx	r3
	
	priority = 12;	
   86c66:	230c      	movs	r3, #12
   86c68:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   86c6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
   86c6e:	4618      	mov	r0, r3
   86c70:	6879      	ldr	r1, [r7, #4]
   86c72:	4b06      	ldr	r3, [pc, #24]	; (86c8c <prvInitializeInterruptPriorities+0x44>)
   86c74:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   86c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
   86c7a:	4618      	mov	r0, r3
   86c7c:	4b04      	ldr	r3, [pc, #16]	; (86c90 <prvInitializeInterruptPriorities+0x48>)
   86c7e:	4798      	blx	r3
   86c80:	6078      	str	r0, [r7, #4]
	
	return;
   86c82:	bf00      	nop
}
   86c84:	3708      	adds	r7, #8
   86c86:	46bd      	mov	sp, r7
   86c88:	bd80      	pop	{r7, pc}
   86c8a:	bf00      	nop
   86c8c:	00086aa5 	.word	0x00086aa5
   86c90:	00086af9 	.word	0x00086af9

00086c94 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   86c94:	b580      	push	{r7, lr}
   86c96:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   86c98:	4b01      	ldr	r3, [pc, #4]	; (86ca0 <vApplicationMallocFailedHook+0xc>)
   86c9a:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   86c9c:	e7fe      	b.n	86c9c <vApplicationMallocFailedHook+0x8>
   86c9e:	bf00      	nop
   86ca0:	00083ea5 	.word	0x00083ea5

00086ca4 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   86ca4:	b580      	push	{r7, lr}
   86ca6:	b082      	sub	sp, #8
   86ca8:	af00      	add	r7, sp, #0
   86caa:	6078      	str	r0, [r7, #4]
   86cac:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   86cae:	4b01      	ldr	r3, [pc, #4]	; (86cb4 <vApplicationStackOverflowHook+0x10>)
   86cb0:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   86cb2:	e7fe      	b.n	86cb2 <vApplicationStackOverflowHook+0xe>
   86cb4:	00083ea5 	.word	0x00083ea5

00086cb8 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   86cb8:	b580      	push	{r7, lr}
   86cba:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   86cbc:	4804      	ldr	r0, [pc, #16]	; (86cd0 <WDT_Handler+0x18>)
   86cbe:	4b05      	ldr	r3, [pc, #20]	; (86cd4 <WDT_Handler+0x1c>)
   86cc0:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   86cc2:	2055      	movs	r0, #85	; 0x55
   86cc4:	4b04      	ldr	r3, [pc, #16]	; (86cd8 <WDT_Handler+0x20>)
   86cc6:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   86cc8:	4801      	ldr	r0, [pc, #4]	; (86cd0 <WDT_Handler+0x18>)
   86cca:	4b04      	ldr	r3, [pc, #16]	; (86cdc <WDT_Handler+0x24>)
   86ccc:	4798      	blx	r3
}
   86cce:	bd80      	pop	{r7, pc}
   86cd0:	400e1a50 	.word	0x400e1a50
   86cd4:	00083835 	.word	0x00083835
   86cd8:	00082eb5 	.word	0x00082eb5
   86cdc:	0008380d 	.word	0x0008380d

00086ce0 <__aeabi_frsub>:
   86ce0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   86ce4:	e002      	b.n	86cec <__addsf3>
   86ce6:	bf00      	nop

00086ce8 <__aeabi_fsub>:
   86ce8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00086cec <__addsf3>:
   86cec:	0042      	lsls	r2, r0, #1
   86cee:	bf1f      	itttt	ne
   86cf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   86cf4:	ea92 0f03 	teqne	r2, r3
   86cf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   86cfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86d00:	d06a      	beq.n	86dd8 <__addsf3+0xec>
   86d02:	ea4f 6212 	mov.w	r2, r2, lsr #24
   86d06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   86d0a:	bfc1      	itttt	gt
   86d0c:	18d2      	addgt	r2, r2, r3
   86d0e:	4041      	eorgt	r1, r0
   86d10:	4048      	eorgt	r0, r1
   86d12:	4041      	eorgt	r1, r0
   86d14:	bfb8      	it	lt
   86d16:	425b      	neglt	r3, r3
   86d18:	2b19      	cmp	r3, #25
   86d1a:	bf88      	it	hi
   86d1c:	4770      	bxhi	lr
   86d1e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   86d22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86d26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   86d2a:	bf18      	it	ne
   86d2c:	4240      	negne	r0, r0
   86d2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86d32:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   86d36:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   86d3a:	bf18      	it	ne
   86d3c:	4249      	negne	r1, r1
   86d3e:	ea92 0f03 	teq	r2, r3
   86d42:	d03f      	beq.n	86dc4 <__addsf3+0xd8>
   86d44:	f1a2 0201 	sub.w	r2, r2, #1
   86d48:	fa41 fc03 	asr.w	ip, r1, r3
   86d4c:	eb10 000c 	adds.w	r0, r0, ip
   86d50:	f1c3 0320 	rsb	r3, r3, #32
   86d54:	fa01 f103 	lsl.w	r1, r1, r3
   86d58:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86d5c:	d502      	bpl.n	86d64 <__addsf3+0x78>
   86d5e:	4249      	negs	r1, r1
   86d60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   86d64:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   86d68:	d313      	bcc.n	86d92 <__addsf3+0xa6>
   86d6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   86d6e:	d306      	bcc.n	86d7e <__addsf3+0x92>
   86d70:	0840      	lsrs	r0, r0, #1
   86d72:	ea4f 0131 	mov.w	r1, r1, rrx
   86d76:	f102 0201 	add.w	r2, r2, #1
   86d7a:	2afe      	cmp	r2, #254	; 0xfe
   86d7c:	d251      	bcs.n	86e22 <__addsf3+0x136>
   86d7e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   86d82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86d86:	bf08      	it	eq
   86d88:	f020 0001 	biceq.w	r0, r0, #1
   86d8c:	ea40 0003 	orr.w	r0, r0, r3
   86d90:	4770      	bx	lr
   86d92:	0049      	lsls	r1, r1, #1
   86d94:	eb40 0000 	adc.w	r0, r0, r0
   86d98:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   86d9c:	f1a2 0201 	sub.w	r2, r2, #1
   86da0:	d1ed      	bne.n	86d7e <__addsf3+0x92>
   86da2:	fab0 fc80 	clz	ip, r0
   86da6:	f1ac 0c08 	sub.w	ip, ip, #8
   86daa:	ebb2 020c 	subs.w	r2, r2, ip
   86dae:	fa00 f00c 	lsl.w	r0, r0, ip
   86db2:	bfaa      	itet	ge
   86db4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   86db8:	4252      	neglt	r2, r2
   86dba:	4318      	orrge	r0, r3
   86dbc:	bfbc      	itt	lt
   86dbe:	40d0      	lsrlt	r0, r2
   86dc0:	4318      	orrlt	r0, r3
   86dc2:	4770      	bx	lr
   86dc4:	f092 0f00 	teq	r2, #0
   86dc8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   86dcc:	bf06      	itte	eq
   86dce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   86dd2:	3201      	addeq	r2, #1
   86dd4:	3b01      	subne	r3, #1
   86dd6:	e7b5      	b.n	86d44 <__addsf3+0x58>
   86dd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86ddc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86de0:	bf18      	it	ne
   86de2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86de6:	d021      	beq.n	86e2c <__addsf3+0x140>
   86de8:	ea92 0f03 	teq	r2, r3
   86dec:	d004      	beq.n	86df8 <__addsf3+0x10c>
   86dee:	f092 0f00 	teq	r2, #0
   86df2:	bf08      	it	eq
   86df4:	4608      	moveq	r0, r1
   86df6:	4770      	bx	lr
   86df8:	ea90 0f01 	teq	r0, r1
   86dfc:	bf1c      	itt	ne
   86dfe:	2000      	movne	r0, #0
   86e00:	4770      	bxne	lr
   86e02:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   86e06:	d104      	bne.n	86e12 <__addsf3+0x126>
   86e08:	0040      	lsls	r0, r0, #1
   86e0a:	bf28      	it	cs
   86e0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   86e10:	4770      	bx	lr
   86e12:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   86e16:	bf3c      	itt	cc
   86e18:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   86e1c:	4770      	bxcc	lr
   86e1e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86e22:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   86e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86e2a:	4770      	bx	lr
   86e2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
   86e30:	bf16      	itet	ne
   86e32:	4608      	movne	r0, r1
   86e34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   86e38:	4601      	movne	r1, r0
   86e3a:	0242      	lsls	r2, r0, #9
   86e3c:	bf06      	itte	eq
   86e3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86e42:	ea90 0f01 	teqeq	r0, r1
   86e46:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   86e4a:	4770      	bx	lr

00086e4c <__aeabi_ui2f>:
   86e4c:	f04f 0300 	mov.w	r3, #0
   86e50:	e004      	b.n	86e5c <__aeabi_i2f+0x8>
   86e52:	bf00      	nop

00086e54 <__aeabi_i2f>:
   86e54:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   86e58:	bf48      	it	mi
   86e5a:	4240      	negmi	r0, r0
   86e5c:	ea5f 0c00 	movs.w	ip, r0
   86e60:	bf08      	it	eq
   86e62:	4770      	bxeq	lr
   86e64:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   86e68:	4601      	mov	r1, r0
   86e6a:	f04f 0000 	mov.w	r0, #0
   86e6e:	e01c      	b.n	86eaa <__aeabi_l2f+0x2a>

00086e70 <__aeabi_ul2f>:
   86e70:	ea50 0201 	orrs.w	r2, r0, r1
   86e74:	bf08      	it	eq
   86e76:	4770      	bxeq	lr
   86e78:	f04f 0300 	mov.w	r3, #0
   86e7c:	e00a      	b.n	86e94 <__aeabi_l2f+0x14>
   86e7e:	bf00      	nop

00086e80 <__aeabi_l2f>:
   86e80:	ea50 0201 	orrs.w	r2, r0, r1
   86e84:	bf08      	it	eq
   86e86:	4770      	bxeq	lr
   86e88:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   86e8c:	d502      	bpl.n	86e94 <__aeabi_l2f+0x14>
   86e8e:	4240      	negs	r0, r0
   86e90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   86e94:	ea5f 0c01 	movs.w	ip, r1
   86e98:	bf02      	ittt	eq
   86e9a:	4684      	moveq	ip, r0
   86e9c:	4601      	moveq	r1, r0
   86e9e:	2000      	moveq	r0, #0
   86ea0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   86ea4:	bf08      	it	eq
   86ea6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   86eaa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   86eae:	fabc f28c 	clz	r2, ip
   86eb2:	3a08      	subs	r2, #8
   86eb4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   86eb8:	db10      	blt.n	86edc <__aeabi_l2f+0x5c>
   86eba:	fa01 fc02 	lsl.w	ip, r1, r2
   86ebe:	4463      	add	r3, ip
   86ec0:	fa00 fc02 	lsl.w	ip, r0, r2
   86ec4:	f1c2 0220 	rsb	r2, r2, #32
   86ec8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86ecc:	fa20 f202 	lsr.w	r2, r0, r2
   86ed0:	eb43 0002 	adc.w	r0, r3, r2
   86ed4:	bf08      	it	eq
   86ed6:	f020 0001 	biceq.w	r0, r0, #1
   86eda:	4770      	bx	lr
   86edc:	f102 0220 	add.w	r2, r2, #32
   86ee0:	fa01 fc02 	lsl.w	ip, r1, r2
   86ee4:	f1c2 0220 	rsb	r2, r2, #32
   86ee8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   86eec:	fa21 f202 	lsr.w	r2, r1, r2
   86ef0:	eb43 0002 	adc.w	r0, r3, r2
   86ef4:	bf08      	it	eq
   86ef6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86efa:	4770      	bx	lr

00086efc <__aeabi_fmul>:
   86efc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86f00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86f04:	bf1e      	ittt	ne
   86f06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86f0a:	ea92 0f0c 	teqne	r2, ip
   86f0e:	ea93 0f0c 	teqne	r3, ip
   86f12:	d06f      	beq.n	86ff4 <__aeabi_fmul+0xf8>
   86f14:	441a      	add	r2, r3
   86f16:	ea80 0c01 	eor.w	ip, r0, r1
   86f1a:	0240      	lsls	r0, r0, #9
   86f1c:	bf18      	it	ne
   86f1e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86f22:	d01e      	beq.n	86f62 <__aeabi_fmul+0x66>
   86f24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   86f28:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   86f2c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86f30:	fba0 3101 	umull	r3, r1, r0, r1
   86f34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   86f38:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   86f3c:	bf3e      	ittt	cc
   86f3e:	0049      	lslcc	r1, r1, #1
   86f40:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86f44:	005b      	lslcc	r3, r3, #1
   86f46:	ea40 0001 	orr.w	r0, r0, r1
   86f4a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   86f4e:	2afd      	cmp	r2, #253	; 0xfd
   86f50:	d81d      	bhi.n	86f8e <__aeabi_fmul+0x92>
   86f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   86f56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86f5a:	bf08      	it	eq
   86f5c:	f020 0001 	biceq.w	r0, r0, #1
   86f60:	4770      	bx	lr
   86f62:	f090 0f00 	teq	r0, #0
   86f66:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86f6a:	bf08      	it	eq
   86f6c:	0249      	lsleq	r1, r1, #9
   86f6e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86f72:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   86f76:	3a7f      	subs	r2, #127	; 0x7f
   86f78:	bfc2      	ittt	gt
   86f7a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86f7e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86f82:	4770      	bxgt	lr
   86f84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86f88:	f04f 0300 	mov.w	r3, #0
   86f8c:	3a01      	subs	r2, #1
   86f8e:	dc5d      	bgt.n	8704c <__aeabi_fmul+0x150>
   86f90:	f112 0f19 	cmn.w	r2, #25
   86f94:	bfdc      	itt	le
   86f96:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   86f9a:	4770      	bxle	lr
   86f9c:	f1c2 0200 	rsb	r2, r2, #0
   86fa0:	0041      	lsls	r1, r0, #1
   86fa2:	fa21 f102 	lsr.w	r1, r1, r2
   86fa6:	f1c2 0220 	rsb	r2, r2, #32
   86faa:	fa00 fc02 	lsl.w	ip, r0, r2
   86fae:	ea5f 0031 	movs.w	r0, r1, rrx
   86fb2:	f140 0000 	adc.w	r0, r0, #0
   86fb6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   86fba:	bf08      	it	eq
   86fbc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86fc0:	4770      	bx	lr
   86fc2:	f092 0f00 	teq	r2, #0
   86fc6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86fca:	bf02      	ittt	eq
   86fcc:	0040      	lsleq	r0, r0, #1
   86fce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86fd2:	3a01      	subeq	r2, #1
   86fd4:	d0f9      	beq.n	86fca <__aeabi_fmul+0xce>
   86fd6:	ea40 000c 	orr.w	r0, r0, ip
   86fda:	f093 0f00 	teq	r3, #0
   86fde:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86fe2:	bf02      	ittt	eq
   86fe4:	0049      	lsleq	r1, r1, #1
   86fe6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86fea:	3b01      	subeq	r3, #1
   86fec:	d0f9      	beq.n	86fe2 <__aeabi_fmul+0xe6>
   86fee:	ea41 010c 	orr.w	r1, r1, ip
   86ff2:	e78f      	b.n	86f14 <__aeabi_fmul+0x18>
   86ff4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86ff8:	ea92 0f0c 	teq	r2, ip
   86ffc:	bf18      	it	ne
   86ffe:	ea93 0f0c 	teqne	r3, ip
   87002:	d00a      	beq.n	8701a <__aeabi_fmul+0x11e>
   87004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   87008:	bf18      	it	ne
   8700a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   8700e:	d1d8      	bne.n	86fc2 <__aeabi_fmul+0xc6>
   87010:	ea80 0001 	eor.w	r0, r0, r1
   87014:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   87018:	4770      	bx	lr
   8701a:	f090 0f00 	teq	r0, #0
   8701e:	bf17      	itett	ne
   87020:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   87024:	4608      	moveq	r0, r1
   87026:	f091 0f00 	teqne	r1, #0
   8702a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   8702e:	d014      	beq.n	8705a <__aeabi_fmul+0x15e>
   87030:	ea92 0f0c 	teq	r2, ip
   87034:	d101      	bne.n	8703a <__aeabi_fmul+0x13e>
   87036:	0242      	lsls	r2, r0, #9
   87038:	d10f      	bne.n	8705a <__aeabi_fmul+0x15e>
   8703a:	ea93 0f0c 	teq	r3, ip
   8703e:	d103      	bne.n	87048 <__aeabi_fmul+0x14c>
   87040:	024b      	lsls	r3, r1, #9
   87042:	bf18      	it	ne
   87044:	4608      	movne	r0, r1
   87046:	d108      	bne.n	8705a <__aeabi_fmul+0x15e>
   87048:	ea80 0001 	eor.w	r0, r0, r1
   8704c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   87050:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   87054:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   87058:	4770      	bx	lr
   8705a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8705e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   87062:	4770      	bx	lr

00087064 <__aeabi_fdiv>:
   87064:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87068:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8706c:	bf1e      	ittt	ne
   8706e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   87072:	ea92 0f0c 	teqne	r2, ip
   87076:	ea93 0f0c 	teqne	r3, ip
   8707a:	d069      	beq.n	87150 <__aeabi_fdiv+0xec>
   8707c:	eba2 0203 	sub.w	r2, r2, r3
   87080:	ea80 0c01 	eor.w	ip, r0, r1
   87084:	0249      	lsls	r1, r1, #9
   87086:	ea4f 2040 	mov.w	r0, r0, lsl #9
   8708a:	d037      	beq.n	870fc <__aeabi_fdiv+0x98>
   8708c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   87090:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   87094:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   87098:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8709c:	428b      	cmp	r3, r1
   8709e:	bf38      	it	cc
   870a0:	005b      	lslcc	r3, r3, #1
   870a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   870a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   870aa:	428b      	cmp	r3, r1
   870ac:	bf24      	itt	cs
   870ae:	1a5b      	subcs	r3, r3, r1
   870b0:	ea40 000c 	orrcs.w	r0, r0, ip
   870b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   870b8:	bf24      	itt	cs
   870ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   870be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   870c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   870c6:	bf24      	itt	cs
   870c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   870cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   870d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   870d4:	bf24      	itt	cs
   870d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   870da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   870de:	011b      	lsls	r3, r3, #4
   870e0:	bf18      	it	ne
   870e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   870e6:	d1e0      	bne.n	870aa <__aeabi_fdiv+0x46>
   870e8:	2afd      	cmp	r2, #253	; 0xfd
   870ea:	f63f af50 	bhi.w	86f8e <__aeabi_fmul+0x92>
   870ee:	428b      	cmp	r3, r1
   870f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   870f4:	bf08      	it	eq
   870f6:	f020 0001 	biceq.w	r0, r0, #1
   870fa:	4770      	bx	lr
   870fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   87100:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   87104:	327f      	adds	r2, #127	; 0x7f
   87106:	bfc2      	ittt	gt
   87108:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   8710c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   87110:	4770      	bxgt	lr
   87112:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   87116:	f04f 0300 	mov.w	r3, #0
   8711a:	3a01      	subs	r2, #1
   8711c:	e737      	b.n	86f8e <__aeabi_fmul+0x92>
   8711e:	f092 0f00 	teq	r2, #0
   87122:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   87126:	bf02      	ittt	eq
   87128:	0040      	lsleq	r0, r0, #1
   8712a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   8712e:	3a01      	subeq	r2, #1
   87130:	d0f9      	beq.n	87126 <__aeabi_fdiv+0xc2>
   87132:	ea40 000c 	orr.w	r0, r0, ip
   87136:	f093 0f00 	teq	r3, #0
   8713a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8713e:	bf02      	ittt	eq
   87140:	0049      	lsleq	r1, r1, #1
   87142:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   87146:	3b01      	subeq	r3, #1
   87148:	d0f9      	beq.n	8713e <__aeabi_fdiv+0xda>
   8714a:	ea41 010c 	orr.w	r1, r1, ip
   8714e:	e795      	b.n	8707c <__aeabi_fdiv+0x18>
   87150:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   87154:	ea92 0f0c 	teq	r2, ip
   87158:	d108      	bne.n	8716c <__aeabi_fdiv+0x108>
   8715a:	0242      	lsls	r2, r0, #9
   8715c:	f47f af7d 	bne.w	8705a <__aeabi_fmul+0x15e>
   87160:	ea93 0f0c 	teq	r3, ip
   87164:	f47f af70 	bne.w	87048 <__aeabi_fmul+0x14c>
   87168:	4608      	mov	r0, r1
   8716a:	e776      	b.n	8705a <__aeabi_fmul+0x15e>
   8716c:	ea93 0f0c 	teq	r3, ip
   87170:	d104      	bne.n	8717c <__aeabi_fdiv+0x118>
   87172:	024b      	lsls	r3, r1, #9
   87174:	f43f af4c 	beq.w	87010 <__aeabi_fmul+0x114>
   87178:	4608      	mov	r0, r1
   8717a:	e76e      	b.n	8705a <__aeabi_fmul+0x15e>
   8717c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   87180:	bf18      	it	ne
   87182:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   87186:	d1ca      	bne.n	8711e <__aeabi_fdiv+0xba>
   87188:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   8718c:	f47f af5c 	bne.w	87048 <__aeabi_fmul+0x14c>
   87190:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   87194:	f47f af3c 	bne.w	87010 <__aeabi_fmul+0x114>
   87198:	e75f      	b.n	8705a <__aeabi_fmul+0x15e>
   8719a:	bf00      	nop

0008719c <__gesf2>:
   8719c:	f04f 3cff 	mov.w	ip, #4294967295
   871a0:	e006      	b.n	871b0 <__cmpsf2+0x4>
   871a2:	bf00      	nop

000871a4 <__lesf2>:
   871a4:	f04f 0c01 	mov.w	ip, #1
   871a8:	e002      	b.n	871b0 <__cmpsf2+0x4>
   871aa:	bf00      	nop

000871ac <__cmpsf2>:
   871ac:	f04f 0c01 	mov.w	ip, #1
   871b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   871b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   871b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
   871bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   871c0:	bf18      	it	ne
   871c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   871c6:	d011      	beq.n	871ec <__cmpsf2+0x40>
   871c8:	b001      	add	sp, #4
   871ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   871ce:	bf18      	it	ne
   871d0:	ea90 0f01 	teqne	r0, r1
   871d4:	bf58      	it	pl
   871d6:	ebb2 0003 	subspl.w	r0, r2, r3
   871da:	bf88      	it	hi
   871dc:	17c8      	asrhi	r0, r1, #31
   871de:	bf38      	it	cc
   871e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   871e4:	bf18      	it	ne
   871e6:	f040 0001 	orrne.w	r0, r0, #1
   871ea:	4770      	bx	lr
   871ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   871f0:	d102      	bne.n	871f8 <__cmpsf2+0x4c>
   871f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   871f6:	d105      	bne.n	87204 <__cmpsf2+0x58>
   871f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   871fc:	d1e4      	bne.n	871c8 <__cmpsf2+0x1c>
   871fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   87202:	d0e1      	beq.n	871c8 <__cmpsf2+0x1c>
   87204:	f85d 0b04 	ldr.w	r0, [sp], #4
   87208:	4770      	bx	lr
   8720a:	bf00      	nop

0008720c <__aeabi_cfrcmple>:
   8720c:	4684      	mov	ip, r0
   8720e:	4608      	mov	r0, r1
   87210:	4661      	mov	r1, ip
   87212:	e7ff      	b.n	87214 <__aeabi_cfcmpeq>

00087214 <__aeabi_cfcmpeq>:
   87214:	b50f      	push	{r0, r1, r2, r3, lr}
   87216:	f7ff ffc9 	bl	871ac <__cmpsf2>
   8721a:	2800      	cmp	r0, #0
   8721c:	bf48      	it	mi
   8721e:	f110 0f00 	cmnmi.w	r0, #0
   87222:	bd0f      	pop	{r0, r1, r2, r3, pc}

00087224 <__aeabi_fcmpeq>:
   87224:	f84d ed08 	str.w	lr, [sp, #-8]!
   87228:	f7ff fff4 	bl	87214 <__aeabi_cfcmpeq>
   8722c:	bf0c      	ite	eq
   8722e:	2001      	moveq	r0, #1
   87230:	2000      	movne	r0, #0
   87232:	f85d fb08 	ldr.w	pc, [sp], #8
   87236:	bf00      	nop

00087238 <__aeabi_fcmplt>:
   87238:	f84d ed08 	str.w	lr, [sp, #-8]!
   8723c:	f7ff ffea 	bl	87214 <__aeabi_cfcmpeq>
   87240:	bf34      	ite	cc
   87242:	2001      	movcc	r0, #1
   87244:	2000      	movcs	r0, #0
   87246:	f85d fb08 	ldr.w	pc, [sp], #8
   8724a:	bf00      	nop

0008724c <__aeabi_fcmple>:
   8724c:	f84d ed08 	str.w	lr, [sp, #-8]!
   87250:	f7ff ffe0 	bl	87214 <__aeabi_cfcmpeq>
   87254:	bf94      	ite	ls
   87256:	2001      	movls	r0, #1
   87258:	2000      	movhi	r0, #0
   8725a:	f85d fb08 	ldr.w	pc, [sp], #8
   8725e:	bf00      	nop

00087260 <__aeabi_fcmpge>:
   87260:	f84d ed08 	str.w	lr, [sp, #-8]!
   87264:	f7ff ffd2 	bl	8720c <__aeabi_cfrcmple>
   87268:	bf94      	ite	ls
   8726a:	2001      	movls	r0, #1
   8726c:	2000      	movhi	r0, #0
   8726e:	f85d fb08 	ldr.w	pc, [sp], #8
   87272:	bf00      	nop

00087274 <__aeabi_fcmpgt>:
   87274:	f84d ed08 	str.w	lr, [sp, #-8]!
   87278:	f7ff ffc8 	bl	8720c <__aeabi_cfrcmple>
   8727c:	bf34      	ite	cc
   8727e:	2001      	movcc	r0, #1
   87280:	2000      	movcs	r0, #0
   87282:	f85d fb08 	ldr.w	pc, [sp], #8
   87286:	bf00      	nop

00087288 <__aeabi_f2uiz>:
   87288:	0042      	lsls	r2, r0, #1
   8728a:	d20e      	bcs.n	872aa <__aeabi_f2uiz+0x22>
   8728c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   87290:	d30b      	bcc.n	872aa <__aeabi_f2uiz+0x22>
   87292:	f04f 039e 	mov.w	r3, #158	; 0x9e
   87296:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   8729a:	d409      	bmi.n	872b0 <__aeabi_f2uiz+0x28>
   8729c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   872a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   872a4:	fa23 f002 	lsr.w	r0, r3, r2
   872a8:	4770      	bx	lr
   872aa:	f04f 0000 	mov.w	r0, #0
   872ae:	4770      	bx	lr
   872b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
   872b4:	d101      	bne.n	872ba <__aeabi_f2uiz+0x32>
   872b6:	0242      	lsls	r2, r0, #9
   872b8:	d102      	bne.n	872c0 <__aeabi_f2uiz+0x38>
   872ba:	f04f 30ff 	mov.w	r0, #4294967295
   872be:	4770      	bx	lr
   872c0:	f04f 0000 	mov.w	r0, #0
   872c4:	4770      	bx	lr
   872c6:	bf00      	nop

000872c8 <__libc_init_array>:
   872c8:	b570      	push	{r4, r5, r6, lr}
   872ca:	4e0f      	ldr	r6, [pc, #60]	; (87308 <__libc_init_array+0x40>)
   872cc:	4d0f      	ldr	r5, [pc, #60]	; (8730c <__libc_init_array+0x44>)
   872ce:	1b76      	subs	r6, r6, r5
   872d0:	10b6      	asrs	r6, r6, #2
   872d2:	d007      	beq.n	872e4 <__libc_init_array+0x1c>
   872d4:	3d04      	subs	r5, #4
   872d6:	2400      	movs	r4, #0
   872d8:	3401      	adds	r4, #1
   872da:	f855 3f04 	ldr.w	r3, [r5, #4]!
   872de:	4798      	blx	r3
   872e0:	42a6      	cmp	r6, r4
   872e2:	d1f9      	bne.n	872d8 <__libc_init_array+0x10>
   872e4:	4e0a      	ldr	r6, [pc, #40]	; (87310 <__libc_init_array+0x48>)
   872e6:	4d0b      	ldr	r5, [pc, #44]	; (87314 <__libc_init_array+0x4c>)
   872e8:	f000 fa48 	bl	8777c <_init>
   872ec:	1b76      	subs	r6, r6, r5
   872ee:	10b6      	asrs	r6, r6, #2
   872f0:	d008      	beq.n	87304 <__libc_init_array+0x3c>
   872f2:	3d04      	subs	r5, #4
   872f4:	2400      	movs	r4, #0
   872f6:	3401      	adds	r4, #1
   872f8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   872fc:	4798      	blx	r3
   872fe:	42a6      	cmp	r6, r4
   87300:	d1f9      	bne.n	872f6 <__libc_init_array+0x2e>
   87302:	bd70      	pop	{r4, r5, r6, pc}
   87304:	bd70      	pop	{r4, r5, r6, pc}
   87306:	bf00      	nop
   87308:	00087788 	.word	0x00087788
   8730c:	00087788 	.word	0x00087788
   87310:	00087790 	.word	0x00087790
   87314:	00087788 	.word	0x00087788

00087318 <memcmp>:
   87318:	2a03      	cmp	r2, #3
   8731a:	b470      	push	{r4, r5, r6}
   8731c:	d928      	bls.n	87370 <memcmp+0x58>
   8731e:	ea40 0301 	orr.w	r3, r0, r1
   87322:	079b      	lsls	r3, r3, #30
   87324:	d013      	beq.n	8734e <memcmp+0x36>
   87326:	7805      	ldrb	r5, [r0, #0]
   87328:	780c      	ldrb	r4, [r1, #0]
   8732a:	42a5      	cmp	r5, r4
   8732c:	d124      	bne.n	87378 <memcmp+0x60>
   8732e:	3a01      	subs	r2, #1
   87330:	2300      	movs	r3, #0
   87332:	e005      	b.n	87340 <memcmp+0x28>
   87334:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   87338:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   8733c:	42a5      	cmp	r5, r4
   8733e:	d11b      	bne.n	87378 <memcmp+0x60>
   87340:	4293      	cmp	r3, r2
   87342:	f103 0301 	add.w	r3, r3, #1
   87346:	d1f5      	bne.n	87334 <memcmp+0x1c>
   87348:	2000      	movs	r0, #0
   8734a:	bc70      	pop	{r4, r5, r6}
   8734c:	4770      	bx	lr
   8734e:	460c      	mov	r4, r1
   87350:	4603      	mov	r3, r0
   87352:	6825      	ldr	r5, [r4, #0]
   87354:	681e      	ldr	r6, [r3, #0]
   87356:	4621      	mov	r1, r4
   87358:	42ae      	cmp	r6, r5
   8735a:	4618      	mov	r0, r3
   8735c:	f104 0404 	add.w	r4, r4, #4
   87360:	f103 0304 	add.w	r3, r3, #4
   87364:	d104      	bne.n	87370 <memcmp+0x58>
   87366:	3a04      	subs	r2, #4
   87368:	2a03      	cmp	r2, #3
   8736a:	4618      	mov	r0, r3
   8736c:	4621      	mov	r1, r4
   8736e:	d8f0      	bhi.n	87352 <memcmp+0x3a>
   87370:	2a00      	cmp	r2, #0
   87372:	d1d8      	bne.n	87326 <memcmp+0xe>
   87374:	4610      	mov	r0, r2
   87376:	e7e8      	b.n	8734a <memcmp+0x32>
   87378:	1b28      	subs	r0, r5, r4
   8737a:	bc70      	pop	{r4, r5, r6}
   8737c:	4770      	bx	lr
   8737e:	bf00      	nop

00087380 <memcpy>:
   87380:	4684      	mov	ip, r0
   87382:	ea41 0300 	orr.w	r3, r1, r0
   87386:	f013 0303 	ands.w	r3, r3, #3
   8738a:	d149      	bne.n	87420 <memcpy+0xa0>
   8738c:	3a40      	subs	r2, #64	; 0x40
   8738e:	d323      	bcc.n	873d8 <memcpy+0x58>
   87390:	680b      	ldr	r3, [r1, #0]
   87392:	6003      	str	r3, [r0, #0]
   87394:	684b      	ldr	r3, [r1, #4]
   87396:	6043      	str	r3, [r0, #4]
   87398:	688b      	ldr	r3, [r1, #8]
   8739a:	6083      	str	r3, [r0, #8]
   8739c:	68cb      	ldr	r3, [r1, #12]
   8739e:	60c3      	str	r3, [r0, #12]
   873a0:	690b      	ldr	r3, [r1, #16]
   873a2:	6103      	str	r3, [r0, #16]
   873a4:	694b      	ldr	r3, [r1, #20]
   873a6:	6143      	str	r3, [r0, #20]
   873a8:	698b      	ldr	r3, [r1, #24]
   873aa:	6183      	str	r3, [r0, #24]
   873ac:	69cb      	ldr	r3, [r1, #28]
   873ae:	61c3      	str	r3, [r0, #28]
   873b0:	6a0b      	ldr	r3, [r1, #32]
   873b2:	6203      	str	r3, [r0, #32]
   873b4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   873b6:	6243      	str	r3, [r0, #36]	; 0x24
   873b8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   873ba:	6283      	str	r3, [r0, #40]	; 0x28
   873bc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   873be:	62c3      	str	r3, [r0, #44]	; 0x2c
   873c0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   873c2:	6303      	str	r3, [r0, #48]	; 0x30
   873c4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   873c6:	6343      	str	r3, [r0, #52]	; 0x34
   873c8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   873ca:	6383      	str	r3, [r0, #56]	; 0x38
   873cc:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   873ce:	63c3      	str	r3, [r0, #60]	; 0x3c
   873d0:	3040      	adds	r0, #64	; 0x40
   873d2:	3140      	adds	r1, #64	; 0x40
   873d4:	3a40      	subs	r2, #64	; 0x40
   873d6:	d2db      	bcs.n	87390 <memcpy+0x10>
   873d8:	3230      	adds	r2, #48	; 0x30
   873da:	d30b      	bcc.n	873f4 <memcpy+0x74>
   873dc:	680b      	ldr	r3, [r1, #0]
   873de:	6003      	str	r3, [r0, #0]
   873e0:	684b      	ldr	r3, [r1, #4]
   873e2:	6043      	str	r3, [r0, #4]
   873e4:	688b      	ldr	r3, [r1, #8]
   873e6:	6083      	str	r3, [r0, #8]
   873e8:	68cb      	ldr	r3, [r1, #12]
   873ea:	60c3      	str	r3, [r0, #12]
   873ec:	3010      	adds	r0, #16
   873ee:	3110      	adds	r1, #16
   873f0:	3a10      	subs	r2, #16
   873f2:	d2f3      	bcs.n	873dc <memcpy+0x5c>
   873f4:	320c      	adds	r2, #12
   873f6:	d305      	bcc.n	87404 <memcpy+0x84>
   873f8:	f851 3b04 	ldr.w	r3, [r1], #4
   873fc:	f840 3b04 	str.w	r3, [r0], #4
   87400:	3a04      	subs	r2, #4
   87402:	d2f9      	bcs.n	873f8 <memcpy+0x78>
   87404:	3204      	adds	r2, #4
   87406:	d008      	beq.n	8741a <memcpy+0x9a>
   87408:	07d2      	lsls	r2, r2, #31
   8740a:	bf1c      	itt	ne
   8740c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   87410:	f800 3b01 	strbne.w	r3, [r0], #1
   87414:	d301      	bcc.n	8741a <memcpy+0x9a>
   87416:	880b      	ldrh	r3, [r1, #0]
   87418:	8003      	strh	r3, [r0, #0]
   8741a:	4660      	mov	r0, ip
   8741c:	4770      	bx	lr
   8741e:	bf00      	nop
   87420:	2a08      	cmp	r2, #8
   87422:	d313      	bcc.n	8744c <memcpy+0xcc>
   87424:	078b      	lsls	r3, r1, #30
   87426:	d0b1      	beq.n	8738c <memcpy+0xc>
   87428:	f010 0303 	ands.w	r3, r0, #3
   8742c:	d0ae      	beq.n	8738c <memcpy+0xc>
   8742e:	f1c3 0304 	rsb	r3, r3, #4
   87432:	1ad2      	subs	r2, r2, r3
   87434:	07db      	lsls	r3, r3, #31
   87436:	bf1c      	itt	ne
   87438:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8743c:	f800 3b01 	strbne.w	r3, [r0], #1
   87440:	d3a4      	bcc.n	8738c <memcpy+0xc>
   87442:	f831 3b02 	ldrh.w	r3, [r1], #2
   87446:	f820 3b02 	strh.w	r3, [r0], #2
   8744a:	e79f      	b.n	8738c <memcpy+0xc>
   8744c:	3a04      	subs	r2, #4
   8744e:	d3d9      	bcc.n	87404 <memcpy+0x84>
   87450:	3a01      	subs	r2, #1
   87452:	f811 3b01 	ldrb.w	r3, [r1], #1
   87456:	f800 3b01 	strb.w	r3, [r0], #1
   8745a:	d2f9      	bcs.n	87450 <memcpy+0xd0>
   8745c:	780b      	ldrb	r3, [r1, #0]
   8745e:	7003      	strb	r3, [r0, #0]
   87460:	784b      	ldrb	r3, [r1, #1]
   87462:	7043      	strb	r3, [r0, #1]
   87464:	788b      	ldrb	r3, [r1, #2]
   87466:	7083      	strb	r3, [r0, #2]
   87468:	4660      	mov	r0, ip
   8746a:	4770      	bx	lr

0008746c <memset>:
   8746c:	b4f0      	push	{r4, r5, r6, r7}
   8746e:	0784      	lsls	r4, r0, #30
   87470:	d043      	beq.n	874fa <memset+0x8e>
   87472:	1e54      	subs	r4, r2, #1
   87474:	2a00      	cmp	r2, #0
   87476:	d03e      	beq.n	874f6 <memset+0x8a>
   87478:	b2cd      	uxtb	r5, r1
   8747a:	4603      	mov	r3, r0
   8747c:	e003      	b.n	87486 <memset+0x1a>
   8747e:	1e62      	subs	r2, r4, #1
   87480:	2c00      	cmp	r4, #0
   87482:	d038      	beq.n	874f6 <memset+0x8a>
   87484:	4614      	mov	r4, r2
   87486:	f803 5b01 	strb.w	r5, [r3], #1
   8748a:	079a      	lsls	r2, r3, #30
   8748c:	d1f7      	bne.n	8747e <memset+0x12>
   8748e:	2c03      	cmp	r4, #3
   87490:	d92a      	bls.n	874e8 <memset+0x7c>
   87492:	b2cd      	uxtb	r5, r1
   87494:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   87498:	2c0f      	cmp	r4, #15
   8749a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8749e:	d915      	bls.n	874cc <memset+0x60>
   874a0:	f1a4 0710 	sub.w	r7, r4, #16
   874a4:	093f      	lsrs	r7, r7, #4
   874a6:	f103 0610 	add.w	r6, r3, #16
   874aa:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   874ae:	461a      	mov	r2, r3
   874b0:	6015      	str	r5, [r2, #0]
   874b2:	6055      	str	r5, [r2, #4]
   874b4:	6095      	str	r5, [r2, #8]
   874b6:	60d5      	str	r5, [r2, #12]
   874b8:	3210      	adds	r2, #16
   874ba:	42b2      	cmp	r2, r6
   874bc:	d1f8      	bne.n	874b0 <memset+0x44>
   874be:	f004 040f 	and.w	r4, r4, #15
   874c2:	3701      	adds	r7, #1
   874c4:	2c03      	cmp	r4, #3
   874c6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   874ca:	d90d      	bls.n	874e8 <memset+0x7c>
   874cc:	461e      	mov	r6, r3
   874ce:	4622      	mov	r2, r4
   874d0:	3a04      	subs	r2, #4
   874d2:	2a03      	cmp	r2, #3
   874d4:	f846 5b04 	str.w	r5, [r6], #4
   874d8:	d8fa      	bhi.n	874d0 <memset+0x64>
   874da:	1f22      	subs	r2, r4, #4
   874dc:	f022 0203 	bic.w	r2, r2, #3
   874e0:	3204      	adds	r2, #4
   874e2:	4413      	add	r3, r2
   874e4:	f004 0403 	and.w	r4, r4, #3
   874e8:	b12c      	cbz	r4, 874f6 <memset+0x8a>
   874ea:	b2c9      	uxtb	r1, r1
   874ec:	441c      	add	r4, r3
   874ee:	f803 1b01 	strb.w	r1, [r3], #1
   874f2:	42a3      	cmp	r3, r4
   874f4:	d1fb      	bne.n	874ee <memset+0x82>
   874f6:	bcf0      	pop	{r4, r5, r6, r7}
   874f8:	4770      	bx	lr
   874fa:	4614      	mov	r4, r2
   874fc:	4603      	mov	r3, r0
   874fe:	e7c6      	b.n	8748e <memset+0x22>

00087500 <register_fini>:
   87500:	4b02      	ldr	r3, [pc, #8]	; (8750c <register_fini+0xc>)
   87502:	b113      	cbz	r3, 8750a <register_fini+0xa>
   87504:	4802      	ldr	r0, [pc, #8]	; (87510 <register_fini+0x10>)
   87506:	f000 b805 	b.w	87514 <atexit>
   8750a:	4770      	bx	lr
   8750c:	00000000 	.word	0x00000000
   87510:	00087521 	.word	0x00087521

00087514 <atexit>:
   87514:	4601      	mov	r1, r0
   87516:	2000      	movs	r0, #0
   87518:	4602      	mov	r2, r0
   8751a:	4603      	mov	r3, r0
   8751c:	f000 b818 	b.w	87550 <__register_exitproc>

00087520 <__libc_fini_array>:
   87520:	b538      	push	{r3, r4, r5, lr}
   87522:	4d09      	ldr	r5, [pc, #36]	; (87548 <__libc_fini_array+0x28>)
   87524:	4c09      	ldr	r4, [pc, #36]	; (8754c <__libc_fini_array+0x2c>)
   87526:	1b64      	subs	r4, r4, r5
   87528:	10a4      	asrs	r4, r4, #2
   8752a:	bf18      	it	ne
   8752c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   87530:	d005      	beq.n	8753e <__libc_fini_array+0x1e>
   87532:	3c01      	subs	r4, #1
   87534:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   87538:	4798      	blx	r3
   8753a:	2c00      	cmp	r4, #0
   8753c:	d1f9      	bne.n	87532 <__libc_fini_array+0x12>
   8753e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   87542:	f000 b925 	b.w	87790 <_fini>
   87546:	bf00      	nop
   87548:	0008779c 	.word	0x0008779c
   8754c:	000877a0 	.word	0x000877a0

00087550 <__register_exitproc>:
   87550:	b5f0      	push	{r4, r5, r6, r7, lr}
   87552:	4c27      	ldr	r4, [pc, #156]	; (875f0 <__register_exitproc+0xa0>)
   87554:	b085      	sub	sp, #20
   87556:	6826      	ldr	r6, [r4, #0]
   87558:	4607      	mov	r7, r0
   8755a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8755e:	2c00      	cmp	r4, #0
   87560:	d040      	beq.n	875e4 <__register_exitproc+0x94>
   87562:	6865      	ldr	r5, [r4, #4]
   87564:	2d1f      	cmp	r5, #31
   87566:	dd1e      	ble.n	875a6 <__register_exitproc+0x56>
   87568:	4822      	ldr	r0, [pc, #136]	; (875f4 <__register_exitproc+0xa4>)
   8756a:	b918      	cbnz	r0, 87574 <__register_exitproc+0x24>
   8756c:	f04f 30ff 	mov.w	r0, #4294967295
   87570:	b005      	add	sp, #20
   87572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87574:	f44f 70c8 	mov.w	r0, #400	; 0x190
   87578:	9103      	str	r1, [sp, #12]
   8757a:	9202      	str	r2, [sp, #8]
   8757c:	9301      	str	r3, [sp, #4]
   8757e:	f3af 8000 	nop.w
   87582:	9903      	ldr	r1, [sp, #12]
   87584:	4604      	mov	r4, r0
   87586:	9a02      	ldr	r2, [sp, #8]
   87588:	9b01      	ldr	r3, [sp, #4]
   8758a:	2800      	cmp	r0, #0
   8758c:	d0ee      	beq.n	8756c <__register_exitproc+0x1c>
   8758e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   87592:	2000      	movs	r0, #0
   87594:	6025      	str	r5, [r4, #0]
   87596:	6060      	str	r0, [r4, #4]
   87598:	4605      	mov	r5, r0
   8759a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8759e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   875a2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   875a6:	b93f      	cbnz	r7, 875b8 <__register_exitproc+0x68>
   875a8:	1c6b      	adds	r3, r5, #1
   875aa:	2000      	movs	r0, #0
   875ac:	3502      	adds	r5, #2
   875ae:	6063      	str	r3, [r4, #4]
   875b0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   875b4:	b005      	add	sp, #20
   875b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   875b8:	2601      	movs	r6, #1
   875ba:	40ae      	lsls	r6, r5
   875bc:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   875c0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   875c4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   875c8:	2f02      	cmp	r7, #2
   875ca:	ea42 0206 	orr.w	r2, r2, r6
   875ce:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   875d2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   875d6:	d1e7      	bne.n	875a8 <__register_exitproc+0x58>
   875d8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   875dc:	431e      	orrs	r6, r3
   875de:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   875e2:	e7e1      	b.n	875a8 <__register_exitproc+0x58>
   875e4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   875e8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   875ec:	e7b9      	b.n	87562 <__register_exitproc+0x12>
   875ee:	bf00      	nop
   875f0:	00087778 	.word	0x00087778
   875f4:	00000000 	.word	0x00000000

000875f8 <ulLED>:
   875f8:	00000057 00000056 0000003b 00000055     W...V...;...U...
   87608:	00004e4f 00006b68 6d612069 64617320     ON..hk..i am sad
   87618:	00000000 0067736d 59530d0a 4d455453     ....msg...SYSTEM
   87628:	52412053 4f4e2045 414e494d 53202c4c     S ARE NOMINAL, S
   87638:	0a2e5249 0000000d 55530d0a 53595342     IR........SUBSYS
   87648:	204d4554 504d4554 54415245 20455255     TEM TEMPERATURE 
   87658:	00205349 0d0a4320 00000000 4f440d0a     IS . C........DO
   87668:	554f5920 4e415720 20412054 43534942      YOU WANT A BISC
   87678:	3f544955 00000d0a 20410d0a 5353454d     UIT?......A MESS
   87688:	20454741 20534157 45434552 44455649     AGE WAS RECEIVED
   87698:	4f524620 4f43204d 203a534d 00000000      FROM COMS: ....
   876a8:	00000d0a 0001c200 000000c0 00000800     ................
	...
   876c4:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   876d4:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

000876e4 <can_bit_time>:
   876e4:	02020308 02094b03 43020303 0303030a     .....K.....C....
   876f4:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   87704:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   87714:	05050510 06114504 47040505 06060512     .....E.....G....
   87724:	06134304 44040606 06060714 08154604     .C.....D.....F..
   87734:	47040606 07070716 08174404 46040708     ...G.....D.....F
   87744:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   87754:	00000000                                ....

00087758 <ucExpectedStackBytes.5295>:
   87758:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   87768:	a5a5a5a5 20726d54 00637653 00000043     ....Tmr Svc.C...

00087778 <_global_impure_ptr>:
   87778:	20070010                                ... 

0008777c <_init>:
   8777c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8777e:	bf00      	nop
   87780:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87782:	bc08      	pop	{r3}
   87784:	469e      	mov	lr, r3
   87786:	4770      	bx	lr

00087788 <__init_array_start>:
   87788:	00087501 	.word	0x00087501

0008778c <__frame_dummy_init_array_entry>:
   8778c:	00080119                                ....

00087790 <_fini>:
   87790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87792:	bf00      	nop
   87794:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87796:	bc08      	pop	{r3}
   87798:	469e      	mov	lr, r3
   8779a:	4770      	bx	lr

0008779c <__fini_array_start>:
   8779c:	000800f5 	.word	0x000800f5
