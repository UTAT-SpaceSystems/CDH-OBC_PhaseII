
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006af4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00086af4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000b734  20070438  00086f2c  00010438  2**2
                  ALLOC
  3 .stack        00002004  2007bb6c  00092660  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   000107cb  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bd3  00000000  00000000  00020c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000064f5  00000000  00000000  0002385a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001170  00000000  00000000  00029d4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fd0  00000000  00000000  0002aebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019cd8  00000000  00000000  0002be8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00014443  00000000  00000000  00045b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064f2f  00000000  00000000  00059faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000395c  00000000  00000000  000beedc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007db70 	.word	0x2007db70
   80004:	000828f5 	.word	0x000828f5
   80008:	000828ed 	.word	0x000828ed
   8000c:	000828ed 	.word	0x000828ed
   80010:	000828ed 	.word	0x000828ed
   80014:	000828ed 	.word	0x000828ed
   80018:	000828ed 	.word	0x000828ed
	...
   8002c:	00082d9d 	.word	0x00082d9d
   80030:	000828ed 	.word	0x000828ed
   80034:	00000000 	.word	0x00000000
   80038:	00082f61 	.word	0x00082f61
   8003c:	00082fa5 	.word	0x00082fa5
   80040:	000828ed 	.word	0x000828ed
   80044:	000828ed 	.word	0x000828ed
   80048:	000828ed 	.word	0x000828ed
   8004c:	000828ed 	.word	0x000828ed
   80050:	0008600d 	.word	0x0008600d
   80054:	000828ed 	.word	0x000828ed
   80058:	000828ed 	.word	0x000828ed
   8005c:	000828ed 	.word	0x000828ed
   80060:	000828ed 	.word	0x000828ed
   80064:	000828ed 	.word	0x000828ed
   80068:	00000000 	.word	0x00000000
   8006c:	0008223d 	.word	0x0008223d
   80070:	00082255 	.word	0x00082255
   80074:	0008226d 	.word	0x0008226d
   80078:	00082285 	.word	0x00082285
	...
   80084:	00080b59 	.word	0x00080b59
   80088:	000828ed 	.word	0x000828ed
   8008c:	000828ed 	.word	0x000828ed
   80090:	000828ed 	.word	0x000828ed
   80094:	000828ed 	.word	0x000828ed
   80098:	000828ed 	.word	0x000828ed
   8009c:	000828ed 	.word	0x000828ed
   800a0:	0008084d 	.word	0x0008084d
   800a4:	00000000 	.word	0x00000000
   800a8:	000828ed 	.word	0x000828ed
   800ac:	000828ed 	.word	0x000828ed
   800b0:	000828ed 	.word	0x000828ed
   800b4:	000828ed 	.word	0x000828ed
   800b8:	000828ed 	.word	0x000828ed
   800bc:	000828ed 	.word	0x000828ed
   800c0:	000828ed 	.word	0x000828ed
   800c4:	000828ed 	.word	0x000828ed
   800c8:	000828ed 	.word	0x000828ed
   800cc:	000828ed 	.word	0x000828ed
   800d0:	000828ed 	.word	0x000828ed
   800d4:	000828ed 	.word	0x000828ed
   800d8:	000828ed 	.word	0x000828ed
   800dc:	000828ed 	.word	0x000828ed
   800e0:	000828ed 	.word	0x000828ed
   800e4:	000828ed 	.word	0x000828ed
   800e8:	000828ed 	.word	0x000828ed
   800ec:	0008523d 	.word	0x0008523d
   800f0:	0008514d 	.word	0x0008514d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00086af4 	.word	0x00086af4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00086af4 	.word	0x00086af4
   8013c:	2007043c 	.word	0x2007043c
   80140:	00086af4 	.word	0x00086af4
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	00082509 	.word	0x00082509

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80280:	b480      	push	{r7}
   80282:	b085      	sub	sp, #20
   80284:	af00      	add	r7, sp, #0
   80286:	60f8      	str	r0, [r7, #12]
   80288:	60b9      	str	r1, [r7, #8]
   8028a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8028c:	687b      	ldr	r3, [r7, #4]
   8028e:	2b00      	cmp	r3, #0
   80290:	d00c      	beq.n	802ac <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80292:	68fb      	ldr	r3, [r7, #12]
   80294:	68ba      	ldr	r2, [r7, #8]
   80296:	320c      	adds	r2, #12
   80298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8029c:	f043 0101 	orr.w	r1, r3, #1
   802a0:	68fb      	ldr	r3, [r7, #12]
   802a2:	68ba      	ldr	r2, [r7, #8]
   802a4:	320c      	adds	r2, #12
   802a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802aa:	e00b      	b.n	802c4 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   802ac:	68fb      	ldr	r3, [r7, #12]
   802ae:	68ba      	ldr	r2, [r7, #8]
   802b0:	320c      	adds	r2, #12
   802b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802b6:	f023 0101 	bic.w	r1, r3, #1
   802ba:	68fb      	ldr	r3, [r7, #12]
   802bc:	68ba      	ldr	r2, [r7, #8]
   802be:	320c      	adds	r2, #12
   802c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   802c4:	3714      	adds	r7, #20
   802c6:	46bd      	mov	sp, r7
   802c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   802cc:	4770      	bx	lr
   802ce:	bf00      	nop

000802d0 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   802d0:	b480      	push	{r7}
   802d2:	b085      	sub	sp, #20
   802d4:	af00      	add	r7, sp, #0
   802d6:	60f8      	str	r0, [r7, #12]
   802d8:	60b9      	str	r1, [r7, #8]
   802da:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d00c      	beq.n	802fc <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   802e2:	68fb      	ldr	r3, [r7, #12]
   802e4:	68ba      	ldr	r2, [r7, #8]
   802e6:	320c      	adds	r2, #12
   802e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802ec:	f043 0102 	orr.w	r1, r3, #2
   802f0:	68fb      	ldr	r3, [r7, #12]
   802f2:	68ba      	ldr	r2, [r7, #8]
   802f4:	320c      	adds	r2, #12
   802f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802fa:	e00b      	b.n	80314 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   802fc:	68fb      	ldr	r3, [r7, #12]
   802fe:	68ba      	ldr	r2, [r7, #8]
   80300:	320c      	adds	r2, #12
   80302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80306:	f023 0102 	bic.w	r1, r3, #2
   8030a:	68fb      	ldr	r3, [r7, #12]
   8030c:	68ba      	ldr	r2, [r7, #8]
   8030e:	320c      	adds	r2, #12
   80310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80314:	3714      	adds	r7, #20
   80316:	46bd      	mov	sp, r7
   80318:	f85d 7b04 	ldr.w	r7, [sp], #4
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   80320:	b480      	push	{r7}
   80322:	b085      	sub	sp, #20
   80324:	af00      	add	r7, sp, #0
   80326:	60f8      	str	r0, [r7, #12]
   80328:	60b9      	str	r1, [r7, #8]
   8032a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	2b04      	cmp	r3, #4
   80330:	d118      	bne.n	80364 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80332:	68fb      	ldr	r3, [r7, #12]
   80334:	68ba      	ldr	r2, [r7, #8]
   80336:	320c      	adds	r2, #12
   80338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8033c:	f023 0108 	bic.w	r1, r3, #8
   80340:	68fb      	ldr	r3, [r7, #12]
   80342:	68ba      	ldr	r2, [r7, #8]
   80344:	320c      	adds	r2, #12
   80346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   8034a:	68fb      	ldr	r3, [r7, #12]
   8034c:	68ba      	ldr	r2, [r7, #8]
   8034e:	320c      	adds	r2, #12
   80350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80354:	f043 0104 	orr.w	r1, r3, #4
   80358:	68fb      	ldr	r3, [r7, #12]
   8035a:	68ba      	ldr	r2, [r7, #8]
   8035c:	320c      	adds	r2, #12
   8035e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   80362:	e02a      	b.n	803ba <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80364:	687b      	ldr	r3, [r7, #4]
   80366:	2b00      	cmp	r3, #0
   80368:	d118      	bne.n	8039c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   8036a:	68fb      	ldr	r3, [r7, #12]
   8036c:	68ba      	ldr	r2, [r7, #8]
   8036e:	320c      	adds	r2, #12
   80370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80374:	f023 0108 	bic.w	r1, r3, #8
   80378:	68fb      	ldr	r3, [r7, #12]
   8037a:	68ba      	ldr	r2, [r7, #8]
   8037c:	320c      	adds	r2, #12
   8037e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80382:	68fb      	ldr	r3, [r7, #12]
   80384:	68ba      	ldr	r2, [r7, #8]
   80386:	320c      	adds	r2, #12
   80388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8038c:	f023 0104 	bic.w	r1, r3, #4
   80390:	68fb      	ldr	r3, [r7, #12]
   80392:	68ba      	ldr	r2, [r7, #8]
   80394:	320c      	adds	r2, #12
   80396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8039a:	e00e      	b.n	803ba <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b08      	cmp	r3, #8
   803a0:	d10b      	bne.n	803ba <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   803a2:	68fb      	ldr	r3, [r7, #12]
   803a4:	68ba      	ldr	r2, [r7, #8]
   803a6:	320c      	adds	r2, #12
   803a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803ac:	f043 0108 	orr.w	r1, r3, #8
   803b0:	68fb      	ldr	r3, [r7, #12]
   803b2:	68ba      	ldr	r2, [r7, #8]
   803b4:	320c      	adds	r2, #12
   803b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   803ba:	3714      	adds	r7, #20
   803bc:	46bd      	mov	sp, r7
   803be:	f85d 7b04 	ldr.w	r7, [sp], #4
   803c2:	4770      	bx	lr

000803c4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   803c4:	b480      	push	{r7}
   803c6:	b085      	sub	sp, #20
   803c8:	af00      	add	r7, sp, #0
   803ca:	60f8      	str	r0, [r7, #12]
   803cc:	60b9      	str	r1, [r7, #8]
   803ce:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   803d0:	68fb      	ldr	r3, [r7, #12]
   803d2:	68ba      	ldr	r2, [r7, #8]
   803d4:	320c      	adds	r2, #12
   803d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803da:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   803de:	68fb      	ldr	r3, [r7, #12]
   803e0:	68ba      	ldr	r2, [r7, #8]
   803e2:	320c      	adds	r2, #12
   803e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   803e8:	68fb      	ldr	r3, [r7, #12]
   803ea:	68ba      	ldr	r2, [r7, #8]
   803ec:	320c      	adds	r2, #12
   803ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   803f2:	687b      	ldr	r3, [r7, #4]
   803f4:	ea42 0103 	orr.w	r1, r2, r3
   803f8:	68fb      	ldr	r3, [r7, #12]
   803fa:	68ba      	ldr	r2, [r7, #8]
   803fc:	320c      	adds	r2, #12
   803fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80402:	3714      	adds	r7, #20
   80404:	46bd      	mov	sp, r7
   80406:	f85d 7b04 	ldr.w	r7, [sp], #4
   8040a:	4770      	bx	lr

0008040c <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   8040c:	b480      	push	{r7}
   8040e:	b085      	sub	sp, #20
   80410:	af00      	add	r7, sp, #0
   80412:	6078      	str	r0, [r7, #4]
   80414:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   80416:	683a      	ldr	r2, [r7, #0]
   80418:	687b      	ldr	r3, [r7, #4]
   8041a:	4413      	add	r3, r2
   8041c:	1e5a      	subs	r2, r3, #1
   8041e:	687b      	ldr	r3, [r7, #4]
   80420:	fbb2 f3f3 	udiv	r3, r2, r3
   80424:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   80426:	68fb      	ldr	r3, [r7, #12]
   80428:	2b00      	cmp	r3, #0
   8042a:	dd02      	ble.n	80432 <spi_calc_baudrate_div+0x26>
   8042c:	68fb      	ldr	r3, [r7, #12]
   8042e:	2bff      	cmp	r3, #255	; 0xff
   80430:	dd02      	ble.n	80438 <spi_calc_baudrate_div+0x2c>
		return -1;
   80432:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80436:	e001      	b.n	8043c <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   80438:	68fb      	ldr	r3, [r7, #12]
   8043a:	b29b      	uxth	r3, r3
   8043c:	b21b      	sxth	r3, r3
}
   8043e:	4618      	mov	r0, r3
   80440:	3714      	adds	r7, #20
   80442:	46bd      	mov	sp, r7
   80444:	f85d 7b04 	ldr.w	r7, [sp], #4
   80448:	4770      	bx	lr
   8044a:	bf00      	nop

0008044c <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   8044c:	b480      	push	{r7}
   8044e:	b085      	sub	sp, #20
   80450:	af00      	add	r7, sp, #0
   80452:	60f8      	str	r0, [r7, #12]
   80454:	60b9      	str	r1, [r7, #8]
   80456:	4613      	mov	r3, r2
   80458:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8045a:	68fb      	ldr	r3, [r7, #12]
   8045c:	68ba      	ldr	r2, [r7, #8]
   8045e:	320c      	adds	r2, #12
   80460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80464:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   80468:	68fb      	ldr	r3, [r7, #12]
   8046a:	68ba      	ldr	r2, [r7, #8]
   8046c:	320c      	adds	r2, #12
   8046e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80472:	68fb      	ldr	r3, [r7, #12]
   80474:	68ba      	ldr	r2, [r7, #8]
   80476:	320c      	adds	r2, #12
   80478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8047c:	79fb      	ldrb	r3, [r7, #7]
   8047e:	021b      	lsls	r3, r3, #8
   80480:	b29b      	uxth	r3, r3
   80482:	ea42 0103 	orr.w	r1, r2, r3
   80486:	68fb      	ldr	r3, [r7, #12]
   80488:	68ba      	ldr	r2, [r7, #8]
   8048a:	320c      	adds	r2, #12
   8048c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80490:	3714      	adds	r7, #20
   80492:	46bd      	mov	sp, r7
   80494:	f85d 7b04 	ldr.w	r7, [sp], #4
   80498:	4770      	bx	lr
   8049a:	bf00      	nop

0008049c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8049c:	b480      	push	{r7}
   8049e:	b085      	sub	sp, #20
   804a0:	af00      	add	r7, sp, #0
   804a2:	60f8      	str	r0, [r7, #12]
   804a4:	60b9      	str	r1, [r7, #8]
   804a6:	71fa      	strb	r2, [r7, #7]
   804a8:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	68ba      	ldr	r2, [r7, #8]
   804ae:	320c      	adds	r2, #12
   804b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804b4:	b299      	uxth	r1, r3
   804b6:	68fb      	ldr	r3, [r7, #12]
   804b8:	68ba      	ldr	r2, [r7, #8]
   804ba:	320c      	adds	r2, #12
   804bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   804c0:	68fb      	ldr	r3, [r7, #12]
   804c2:	68ba      	ldr	r2, [r7, #8]
   804c4:	320c      	adds	r2, #12
   804c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804ca:	79fb      	ldrb	r3, [r7, #7]
   804cc:	041b      	lsls	r3, r3, #16
   804ce:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   804d2:	79bb      	ldrb	r3, [r7, #6]
   804d4:	061b      	lsls	r3, r3, #24
   804d6:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   804d8:	ea42 0103 	orr.w	r1, r2, r3
   804dc:	68fb      	ldr	r3, [r7, #12]
   804de:	68ba      	ldr	r2, [r7, #8]
   804e0:	320c      	adds	r2, #12
   804e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   804e6:	3714      	adds	r7, #20
   804e8:	46bd      	mov	sp, r7
   804ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   804ee:	4770      	bx	lr

000804f0 <data_test>:
/* DATA_TEST	 														*/
/* @Purpose: This function is simply used to create the data task below	*/
/* in main.c															*/
/************************************************************************/
void data_test( void )
{
   804f0:	b590      	push	{r4, r7, lr}
   804f2:	b085      	sub	sp, #20
   804f4:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this
	file. */
	xTaskCreate( prvDataTask,					/* The function that implements the task. */
   804f6:	2301      	movs	r3, #1
   804f8:	9300      	str	r3, [sp, #0]
   804fa:	2300      	movs	r3, #0
   804fc:	9301      	str	r3, [sp, #4]
   804fe:	2300      	movs	r3, #0
   80500:	9302      	str	r3, [sp, #8]
   80502:	2300      	movs	r3, #0
   80504:	9303      	str	r3, [sp, #12]
   80506:	4805      	ldr	r0, [pc, #20]	; (8051c <data_test+0x2c>)
   80508:	4905      	ldr	r1, [pc, #20]	; (80520 <data_test+0x30>)
   8050a:	2282      	movs	r2, #130	; 0x82
   8050c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80510:	4c04      	ldr	r4, [pc, #16]	; (80524 <data_test+0x34>)
   80512:	47a0      	blx	r4
				"ON", 								/* The text name assigned to the task - for debug only as it is not used by the kernel. */
				configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
				( void * ) DATA_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
				Data_TASK_PRIORITY, 			/* The priority assigned to the task. */
				NULL );								/* The task handle is not required, so NULL is passed. */
	return;
   80514:	bf00      	nop
}
   80516:	3704      	adds	r7, #4
   80518:	46bd      	mov	sp, r7
   8051a:	bd90      	pop	{r4, r7, pc}
   8051c:	00080529 	.word	0x00080529
   80520:	0008694c 	.word	0x0008694c
   80524:	00083cb9 	.word	0x00083cb9

00080528 <prvDataTask>:
/* @purpose: This task is used to demonstrate how sensor data or the	*/
/* like can be															*/
/* requested from an SSM and then sent to the OBC.						*/
/************************************************************************/
static void prvDataTask( void *pvParameters )
{
   80528:	b590      	push	{r4, r7, lr}
   8052a:	b08d      	sub	sp, #52	; 0x34
   8052c:	af02      	add	r7, sp, #8
   8052e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == DATA_PARAMETER );
   80530:	687a      	ldr	r2, [r7, #4]
   80532:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80536:	429a      	cmp	r2, r3
   80538:	d002      	beq.n	80540 <prvDataTask+0x18>
   8053a:	4b2b      	ldr	r3, [pc, #172]	; (805e8 <prvDataTask+0xc0>)
   8053c:	4798      	blx	r3
   8053e:	e7fe      	b.n	8053e <prvDataTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 100;	//Number entered here corresponds to the number of ticks we should wait.
   80540:	2364      	movs	r3, #100	; 0x64
   80542:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, PRIORITY, i;
	uint8_t byte_four = SPI_TEMP1;
   80544:	2301      	movs	r3, #1
   80546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	int x;
	PRIORITY = DATA_PRIO;
   8054a:	230a      	movs	r3, #10
   8054c:	61fb      	str	r3, [r7, #28]
	
	/* @non-terminating@ */	
	for( ;; )
	{
		low = DATA_REQUEST;
   8054e:	f04f 3355 	mov.w	r3, #1431655765	; 0x55555555
   80552:	613b      	str	r3, [r7, #16]
		//x = send_can_command(low, byte_four, OBC_ID, EPS_ID, REQ_DATA, PRIORITY);				// Request response from COMS.
		x = send_can_command(low, byte_four, OBC_ID, COMS_ID, REQ_DATA, PRIORITY);				// Request response from EPS.
   80554:	693a      	ldr	r2, [r7, #16]
   80556:	69fb      	ldr	r3, [r7, #28]
   80558:	b2d9      	uxtb	r1, r3
   8055a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8055e:	2002      	movs	r0, #2
   80560:	9000      	str	r0, [sp, #0]
   80562:	9101      	str	r1, [sp, #4]
   80564:	4610      	mov	r0, r2
   80566:	4619      	mov	r1, r3
   80568:	2203      	movs	r2, #3
   8056a:	2300      	movs	r3, #0
   8056c:	4c1f      	ldr	r4, [pc, #124]	; (805ec <prvDataTask+0xc4>)
   8056e:	47a0      	blx	r4
   80570:	61b8      	str	r0, [r7, #24]
		//x = send_can_command(low, byte_four, OBC_ID, PAY_ID, REQ_DATA, PRIORITY);				// Request response from PAY.					

		if(glob_drf)		// data reception flag;
   80572:	4b1f      	ldr	r3, [pc, #124]	; (805f0 <prvDataTask+0xc8>)
   80574:	781b      	ldrb	r3, [r3, #0]
   80576:	2b00      	cmp	r3, #0
   80578:	d017      	beq.n	805aa <prvDataTask+0x82>
		{
			x = read_can_data(&high, &low, 1234);
   8057a:	f107 020c 	add.w	r2, r7, #12
   8057e:	f107 0310 	add.w	r3, r7, #16
   80582:	4610      	mov	r0, r2
   80584:	4619      	mov	r1, r3
   80586:	f240 42d2 	movw	r2, #1234	; 0x4d2
   8058a:	4b1a      	ldr	r3, [pc, #104]	; (805f4 <prvDataTask+0xcc>)
   8058c:	4798      	blx	r3
   8058e:	4603      	mov	r3, r0
   80590:	61bb      	str	r3, [r7, #24]
			// ** Modify this code so that it checks the small types first.
			if(x)
   80592:	69bb      	ldr	r3, [r7, #24]
   80594:	2b00      	cmp	r3, #0
   80596:	d008      	beq.n	805aa <prvDataTask+0x82>
			{
				glob_stored_data[1] = high;
   80598:	68fa      	ldr	r2, [r7, #12]
   8059a:	4b17      	ldr	r3, [pc, #92]	; (805f8 <prvDataTask+0xd0>)
   8059c:	605a      	str	r2, [r3, #4]
				glob_stored_data[0] = low;
   8059e:	693a      	ldr	r2, [r7, #16]
   805a0:	4b15      	ldr	r3, [pc, #84]	; (805f8 <prvDataTask+0xd0>)
   805a2:	601a      	str	r2, [r3, #0]
				glob_drf = 0;
   805a4:	4b12      	ldr	r3, [pc, #72]	; (805f0 <prvDataTask+0xc8>)
   805a6:	2200      	movs	r2, #0
   805a8:	701a      	strb	r2, [r3, #0]
			}
		}
		
		if(glob_comsf)
   805aa:	4b14      	ldr	r3, [pc, #80]	; (805fc <prvDataTask+0xd4>)
   805ac:	781b      	ldrb	r3, [r3, #0]
   805ae:	2b00      	cmp	r3, #0
   805b0:	d018      	beq.n	805e4 <prvDataTask+0xbc>
		{
			x = read_can_msg(&high, &low, 1234);
   805b2:	f107 020c 	add.w	r2, r7, #12
   805b6:	f107 0310 	add.w	r3, r7, #16
   805ba:	4610      	mov	r0, r2
   805bc:	4619      	mov	r1, r3
   805be:	f240 42d2 	movw	r2, #1234	; 0x4d2
   805c2:	4b0f      	ldr	r3, [pc, #60]	; (80600 <prvDataTask+0xd8>)
   805c4:	4798      	blx	r3
   805c6:	4603      	mov	r3, r0
   805c8:	61bb      	str	r3, [r7, #24]

			if(x)
   805ca:	69bb      	ldr	r3, [r7, #24]
   805cc:	2b00      	cmp	r3, #0
   805ce:	d009      	beq.n	805e4 <prvDataTask+0xbc>
			{
				glob_stored_message[1] = high;
   805d0:	68fa      	ldr	r2, [r7, #12]
   805d2:	4b0c      	ldr	r3, [pc, #48]	; (80604 <prvDataTask+0xdc>)
   805d4:	605a      	str	r2, [r3, #4]
				glob_stored_message[0] = low;
   805d6:	693a      	ldr	r2, [r7, #16]
   805d8:	4b0a      	ldr	r3, [pc, #40]	; (80604 <prvDataTask+0xdc>)
   805da:	601a      	str	r2, [r3, #0]
				glob_comsf = 0;
   805dc:	4b07      	ldr	r3, [pc, #28]	; (805fc <prvDataTask+0xd4>)
   805de:	2200      	movs	r2, #0
   805e0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
   805e2:	e7b4      	b.n	8054e <prvDataTask+0x26>
   805e4:	e7b3      	b.n	8054e <prvDataTask+0x26>
   805e6:	bf00      	nop
   805e8:	00082f45 	.word	0x00082f45
   805ec:	00085721 	.word	0x00085721
   805f0:	2007a678 	.word	0x2007a678
   805f4:	000857d1 	.word	0x000857d1
   805f8:	2007a64c 	.word	0x2007a64c
   805fc:	2007a67b 	.word	0x2007a67b
   80600:	00085839 	.word	0x00085839
   80604:	2007a724 	.word	0x2007a724

00080608 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   80608:	b580      	push	{r7, lr}
   8060a:	b082      	sub	sp, #8
   8060c:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8060e:	2300      	movs	r3, #0
   80610:	607b      	str	r3, [r7, #4]
   80612:	e00f      	b.n	80634 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   80614:	4b0a      	ldr	r3, [pc, #40]	; (80640 <vParTestInitialise+0x38>)
   80616:	687a      	ldr	r2, [r7, #4]
   80618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8061c:	4618      	mov	r0, r3
   8061e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80622:	4b08      	ldr	r3, [pc, #32]	; (80644 <vParTestInitialise+0x3c>)
   80624:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   80626:	6878      	ldr	r0, [r7, #4]
   80628:	2100      	movs	r1, #0
   8062a:	4b07      	ldr	r3, [pc, #28]	; (80648 <vParTestInitialise+0x40>)
   8062c:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8062e:	687b      	ldr	r3, [r7, #4]
   80630:	3301      	adds	r3, #1
   80632:	607b      	str	r3, [r7, #4]
   80634:	687b      	ldr	r3, [r7, #4]
   80636:	2b03      	cmp	r3, #3
   80638:	d9ec      	bls.n	80614 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   8063a:	3708      	adds	r7, #8
   8063c:	46bd      	mov	sp, r7
   8063e:	bd80      	pop	{r7, pc}
   80640:	00086950 	.word	0x00086950
   80644:	00081f7d 	.word	0x00081f7d
   80648:	0008064d 	.word	0x0008064d

0008064c <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   8064c:	b580      	push	{r7, lr}
   8064e:	b082      	sub	sp, #8
   80650:	af00      	add	r7, sp, #0
   80652:	6078      	str	r0, [r7, #4]
   80654:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   80656:	687b      	ldr	r3, [r7, #4]
   80658:	2b03      	cmp	r3, #3
   8065a:	d823      	bhi.n	806a4 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   8065c:	687b      	ldr	r3, [r7, #4]
   8065e:	2b00      	cmp	r3, #0
   80660:	d106      	bne.n	80670 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   80662:	683b      	ldr	r3, [r7, #0]
   80664:	2b00      	cmp	r3, #0
   80666:	bf14      	ite	ne
   80668:	2300      	movne	r3, #0
   8066a:	2301      	moveq	r3, #1
   8066c:	b2db      	uxtb	r3, r3
   8066e:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   80670:	683b      	ldr	r3, [r7, #0]
   80672:	2b00      	cmp	r3, #0
   80674:	d00b      	beq.n	8068e <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   80676:	4b0d      	ldr	r3, [pc, #52]	; (806ac <vParTestSetLED+0x60>)
   80678:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   8067a:	4b0d      	ldr	r3, [pc, #52]	; (806b0 <vParTestSetLED+0x64>)
   8067c:	687a      	ldr	r2, [r7, #4]
   8067e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80682:	4618      	mov	r0, r3
   80684:	4b0b      	ldr	r3, [pc, #44]	; (806b4 <vParTestSetLED+0x68>)
   80686:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80688:	4b0b      	ldr	r3, [pc, #44]	; (806b8 <vParTestSetLED+0x6c>)
   8068a:	4798      	blx	r3
   8068c:	e00a      	b.n	806a4 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   8068e:	4b07      	ldr	r3, [pc, #28]	; (806ac <vParTestSetLED+0x60>)
   80690:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   80692:	4b07      	ldr	r3, [pc, #28]	; (806b0 <vParTestSetLED+0x64>)
   80694:	687a      	ldr	r2, [r7, #4]
   80696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8069a:	4618      	mov	r0, r3
   8069c:	4b07      	ldr	r3, [pc, #28]	; (806bc <vParTestSetLED+0x70>)
   8069e:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   806a0:	4b05      	ldr	r3, [pc, #20]	; (806b8 <vParTestSetLED+0x6c>)
   806a2:	4798      	blx	r3
		}
	}
}
   806a4:	3708      	adds	r7, #8
   806a6:	46bd      	mov	sp, r7
   806a8:	bd80      	pop	{r7, pc}
   806aa:	bf00      	nop
   806ac:	00082ec9 	.word	0x00082ec9
   806b0:	00086950 	.word	0x00086950
   806b4:	00081ee9 	.word	0x00081ee9
   806b8:	00082f0d 	.word	0x00082f0d
   806bc:	00081eb5 	.word	0x00081eb5

000806c0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   806c0:	b480      	push	{r7}
   806c2:	b083      	sub	sp, #12
   806c4:	af00      	add	r7, sp, #0
   806c6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   806c8:	687b      	ldr	r3, [r7, #4]
   806ca:	2b07      	cmp	r3, #7
   806cc:	d825      	bhi.n	8071a <osc_get_rate+0x5a>
   806ce:	a201      	add	r2, pc, #4	; (adr r2, 806d4 <osc_get_rate+0x14>)
   806d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   806d4:	000806f5 	.word	0x000806f5
   806d8:	000806fb 	.word	0x000806fb
   806dc:	00080701 	.word	0x00080701
   806e0:	00080707 	.word	0x00080707
   806e4:	0008070b 	.word	0x0008070b
   806e8:	0008070f 	.word	0x0008070f
   806ec:	00080713 	.word	0x00080713
   806f0:	00080717 	.word	0x00080717
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   806f4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   806f8:	e010      	b.n	8071c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   806fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   806fe:	e00d      	b.n	8071c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80704:	e00a      	b.n	8071c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80706:	4b08      	ldr	r3, [pc, #32]	; (80728 <osc_get_rate+0x68>)
   80708:	e008      	b.n	8071c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8070a:	4b08      	ldr	r3, [pc, #32]	; (8072c <osc_get_rate+0x6c>)
   8070c:	e006      	b.n	8071c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8070e:	4b08      	ldr	r3, [pc, #32]	; (80730 <osc_get_rate+0x70>)
   80710:	e004      	b.n	8071c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80712:	4b07      	ldr	r3, [pc, #28]	; (80730 <osc_get_rate+0x70>)
   80714:	e002      	b.n	8071c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80716:	4b06      	ldr	r3, [pc, #24]	; (80730 <osc_get_rate+0x70>)
   80718:	e000      	b.n	8071c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8071a:	2300      	movs	r3, #0
}
   8071c:	4618      	mov	r0, r3
   8071e:	370c      	adds	r7, #12
   80720:	46bd      	mov	sp, r7
   80722:	f85d 7b04 	ldr.w	r7, [sp], #4
   80726:	4770      	bx	lr
   80728:	003d0900 	.word	0x003d0900
   8072c:	007a1200 	.word	0x007a1200
   80730:	00b71b00 	.word	0x00b71b00

00080734 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80734:	b580      	push	{r7, lr}
   80736:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80738:	2006      	movs	r0, #6
   8073a:	4b04      	ldr	r3, [pc, #16]	; (8074c <sysclk_get_main_hz+0x18>)
   8073c:	4798      	blx	r3
   8073e:	4602      	mov	r2, r0
   80740:	4613      	mov	r3, r2
   80742:	00db      	lsls	r3, r3, #3
   80744:	1a9b      	subs	r3, r3, r2
   80746:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80748:	4618      	mov	r0, r3
   8074a:	bd80      	pop	{r7, pc}
   8074c:	000806c1 	.word	0x000806c1

00080750 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80750:	b580      	push	{r7, lr}
   80752:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80754:	4b02      	ldr	r3, [pc, #8]	; (80760 <sysclk_get_cpu_hz+0x10>)
   80756:	4798      	blx	r3
   80758:	4603      	mov	r3, r0
   8075a:	085b      	lsrs	r3, r3, #1
}
   8075c:	4618      	mov	r0, r3
   8075e:	bd80      	pop	{r7, pc}
   80760:	00080735 	.word	0x00080735

00080764 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80764:	b480      	push	{r7}
   80766:	b083      	sub	sp, #12
   80768:	af00      	add	r7, sp, #0
   8076a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   8076c:	687b      	ldr	r3, [r7, #4]
   8076e:	2280      	movs	r2, #128	; 0x80
   80770:	601a      	str	r2, [r3, #0]
}
   80772:	370c      	adds	r7, #12
   80774:	46bd      	mov	sp, r7
   80776:	f85d 7b04 	ldr.w	r7, [sp], #4
   8077a:	4770      	bx	lr

0008077c <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   8077c:	b480      	push	{r7}
   8077e:	b083      	sub	sp, #12
   80780:	af00      	add	r7, sp, #0
   80782:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80784:	687b      	ldr	r3, [r7, #4]
   80786:	2201      	movs	r2, #1
   80788:	601a      	str	r2, [r3, #0]
}
   8078a:	370c      	adds	r7, #12
   8078c:	46bd      	mov	sp, r7
   8078e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80792:	4770      	bx	lr

00080794 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80794:	b480      	push	{r7}
   80796:	b083      	sub	sp, #12
   80798:	af00      	add	r7, sp, #0
   8079a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8079c:	687b      	ldr	r3, [r7, #4]
   8079e:	685b      	ldr	r3, [r3, #4]
   807a0:	f043 0201 	orr.w	r2, r3, #1
   807a4:	687b      	ldr	r3, [r7, #4]
   807a6:	605a      	str	r2, [r3, #4]
}
   807a8:	370c      	adds	r7, #12
   807aa:	46bd      	mov	sp, r7
   807ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   807b0:	4770      	bx	lr
   807b2:	bf00      	nop

000807b4 <spi_set_variable_peripheral_select>:
 * Peripheral Chip Select can be controlled by SPI_TDR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
   807b4:	b480      	push	{r7}
   807b6:	b083      	sub	sp, #12
   807b8:	af00      	add	r7, sp, #0
   807ba:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_PS;
   807bc:	687b      	ldr	r3, [r7, #4]
   807be:	685b      	ldr	r3, [r3, #4]
   807c0:	f043 0202 	orr.w	r2, r3, #2
   807c4:	687b      	ldr	r3, [r7, #4]
   807c6:	605a      	str	r2, [r3, #4]
}
   807c8:	370c      	adds	r7, #12
   807ca:	46bd      	mov	sp, r7
   807cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   807d0:	4770      	bx	lr
   807d2:	bf00      	nop

000807d4 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   807d4:	b480      	push	{r7}
   807d6:	b083      	sub	sp, #12
   807d8:	af00      	add	r7, sp, #0
   807da:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   807dc:	687b      	ldr	r3, [r7, #4]
   807de:	685b      	ldr	r3, [r3, #4]
   807e0:	f023 0204 	bic.w	r2, r3, #4
   807e4:	687b      	ldr	r3, [r7, #4]
   807e6:	605a      	str	r2, [r3, #4]
}
   807e8:	370c      	adds	r7, #12
   807ea:	46bd      	mov	sp, r7
   807ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   807f0:	4770      	bx	lr
   807f2:	bf00      	nop

000807f4 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   807f4:	b480      	push	{r7}
   807f6:	b083      	sub	sp, #12
   807f8:	af00      	add	r7, sp, #0
   807fa:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   807fc:	687b      	ldr	r3, [r7, #4]
   807fe:	685b      	ldr	r3, [r3, #4]
   80800:	f043 0210 	orr.w	r2, r3, #16
   80804:	687b      	ldr	r3, [r7, #4]
   80806:	605a      	str	r2, [r3, #4]
}
   80808:	370c      	adds	r7, #12
   8080a:	46bd      	mov	sp, r7
   8080c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80810:	4770      	bx	lr
   80812:	bf00      	nop

00080814 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   80814:	b480      	push	{r7}
   80816:	b083      	sub	sp, #12
   80818:	af00      	add	r7, sp, #0
   8081a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   8081c:	687b      	ldr	r3, [r7, #4]
   8081e:	685b      	ldr	r3, [r3, #4]
   80820:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   80824:	687b      	ldr	r3, [r7, #4]
   80826:	605a      	str	r2, [r3, #4]
}
   80828:	370c      	adds	r7, #12
   8082a:	46bd      	mov	sp, r7
   8082c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80830:	4770      	bx	lr
   80832:	bf00      	nop

00080834 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80834:	b480      	push	{r7}
   80836:	b083      	sub	sp, #12
   80838:	af00      	add	r7, sp, #0
   8083a:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   8083c:	687b      	ldr	r3, [r7, #4]
   8083e:	691b      	ldr	r3, [r3, #16]
}
   80840:	4618      	mov	r0, r3
   80842:	370c      	adds	r7, #12
   80844:	46bd      	mov	sp, r7
   80846:	f85d 7b04 	ldr.w	r7, [sp], #4
   8084a:	4770      	bx	lr

0008084c <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   8084c:	b580      	push	{r7, lr}
   8084e:	b082      	sub	sp, #8
   80850:	af00      	add	r7, sp, #0
	static uint16_t data;
	uint8_t uc_pcs;
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80852:	4b0c      	ldr	r3, [pc, #48]	; (80884 <SPI0_Handler+0x38>)
   80854:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80856:	480c      	ldr	r0, [pc, #48]	; (80888 <SPI0_Handler+0x3c>)
   80858:	4b0c      	ldr	r3, [pc, #48]	; (8088c <SPI0_Handler+0x40>)
   8085a:	4798      	blx	r3
   8085c:	4603      	mov	r3, r0
   8085e:	f003 0301 	and.w	r3, r3, #1
   80862:	2b00      	cmp	r3, #0
   80864:	d00b      	beq.n	8087e <SPI0_Handler+0x32>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80866:	1cfb      	adds	r3, r7, #3
   80868:	4807      	ldr	r0, [pc, #28]	; (80888 <SPI0_Handler+0x3c>)
   8086a:	4909      	ldr	r1, [pc, #36]	; (80890 <SPI0_Handler+0x44>)
   8086c:	461a      	mov	r2, r3
   8086e:	4b09      	ldr	r3, [pc, #36]	; (80894 <SPI0_Handler+0x48>)
   80870:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80872:	687b      	ldr	r3, [r7, #4]
   80874:	681b      	ldr	r3, [r3, #0]
   80876:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   8087a:	687b      	ldr	r3, [r7, #4]
   8087c:	601a      	str	r2, [r3, #0]
	}
}
   8087e:	3708      	adds	r7, #8
   80880:	46bd      	mov	sp, r7
   80882:	bd80      	pop	{r7, pc}
   80884:	4000800c 	.word	0x4000800c
   80888:	40008000 	.word	0x40008000
   8088c:	00080835 	.word	0x00080835
   80890:	20070458 	.word	0x20070458
   80894:	00080211 	.word	0x00080211

00080898 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   80898:	b590      	push	{r4, r7, lr}
   8089a:	b085      	sub	sp, #20
   8089c:	af00      	add	r7, sp, #0
	/* Configure an SPI peripheral. */
	uint32_t spi_chip_sel, spi_clk_freq, spi_clk_pol, spi_clk_pha;
	spi_enable_clock(SPI_MASTER_BASE);
   8089e:	4859      	ldr	r0, [pc, #356]	; (80a04 <spi_master_initialize+0x16c>)
   808a0:	4b59      	ldr	r3, [pc, #356]	; (80a08 <spi_master_initialize+0x170>)
   808a2:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   808a4:	4857      	ldr	r0, [pc, #348]	; (80a04 <spi_master_initialize+0x16c>)
   808a6:	4b59      	ldr	r3, [pc, #356]	; (80a0c <spi_master_initialize+0x174>)
   808a8:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   808aa:	4856      	ldr	r0, [pc, #344]	; (80a04 <spi_master_initialize+0x16c>)
   808ac:	4b58      	ldr	r3, [pc, #352]	; (80a10 <spi_master_initialize+0x178>)
   808ae:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   808b0:	4854      	ldr	r0, [pc, #336]	; (80a04 <spi_master_initialize+0x16c>)
   808b2:	4b58      	ldr	r3, [pc, #352]	; (80a14 <spi_master_initialize+0x17c>)
   808b4:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   808b6:	4853      	ldr	r0, [pc, #332]	; (80a04 <spi_master_initialize+0x16c>)
   808b8:	4b57      	ldr	r3, [pc, #348]	; (80a18 <spi_master_initialize+0x180>)
   808ba:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, spi_get_pcs(2));	// This sets the value of PCS within the Mode Register.
   808bc:	4851      	ldr	r0, [pc, #324]	; (80a04 <spi_master_initialize+0x16c>)
   808be:	210b      	movs	r1, #11
   808c0:	4b56      	ldr	r3, [pc, #344]	; (80a1c <spi_master_initialize+0x184>)
   808c2:	4798      	blx	r3
	spi_set_variable_peripheral_select(SPI_MASTER_BASE);					// PCS needs to be set within each transfer (PCS within SPI_TDR).
   808c4:	484f      	ldr	r0, [pc, #316]	; (80a04 <spi_master_initialize+0x16c>)
   808c6:	4b56      	ldr	r3, [pc, #344]	; (80a20 <spi_master_initialize+0x188>)
   808c8:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);					// Each CS is to be connected to a single device.
   808ca:	484e      	ldr	r0, [pc, #312]	; (80a04 <spi_master_initialize+0x16c>)
   808cc:	4b55      	ldr	r3, [pc, #340]	; (80a24 <spi_master_initialize+0x18c>)
   808ce:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   808d0:	484c      	ldr	r0, [pc, #304]	; (80a04 <spi_master_initialize+0x16c>)
   808d2:	2100      	movs	r1, #0
   808d4:	4b54      	ldr	r3, [pc, #336]	; (80a28 <spi_master_initialize+0x190>)
   808d6:	4798      	blx	r3

	/* Set communication parameters for CS0	*/
	spi_chip_sel = 0;
   808d8:	2300      	movs	r3, #0
   808da:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 100000;	// SPI CLK for RTC = 100kHz.
   808dc:	4b53      	ldr	r3, [pc, #332]	; (80a2c <spi_master_initialize+0x194>)
   808de:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   808e0:	2301      	movs	r3, #1
   808e2:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   808e4:	2300      	movs	r3, #0
   808e6:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   808e8:	4846      	ldr	r0, [pc, #280]	; (80a04 <spi_master_initialize+0x16c>)
   808ea:	68f9      	ldr	r1, [r7, #12]
   808ec:	2200      	movs	r2, #0
   808ee:	2302      	movs	r3, #2
   808f0:	4c4f      	ldr	r4, [pc, #316]	; (80a30 <spi_master_initialize+0x198>)
   808f2:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_16_BIT);
   808f4:	4843      	ldr	r0, [pc, #268]	; (80a04 <spi_master_initialize+0x16c>)
   808f6:	68f9      	ldr	r1, [r7, #12]
   808f8:	2280      	movs	r2, #128	; 0x80
   808fa:	4b4e      	ldr	r3, [pc, #312]	; (80a34 <spi_master_initialize+0x19c>)
   808fc:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   808fe:	4b4e      	ldr	r3, [pc, #312]	; (80a38 <spi_master_initialize+0x1a0>)
   80900:	4798      	blx	r3
   80902:	4603      	mov	r3, r0
   80904:	68b8      	ldr	r0, [r7, #8]
   80906:	4619      	mov	r1, r3
   80908:	4b4c      	ldr	r3, [pc, #304]	; (80a3c <spi_master_initialize+0x1a4>)
   8090a:	4798      	blx	r3
   8090c:	4603      	mov	r3, r0
   8090e:	b2db      	uxtb	r3, r3
   80910:	483c      	ldr	r0, [pc, #240]	; (80a04 <spi_master_initialize+0x16c>)
   80912:	68f9      	ldr	r1, [r7, #12]
   80914:	461a      	mov	r2, r3
   80916:	4b4a      	ldr	r3, [pc, #296]	; (80a40 <spi_master_initialize+0x1a8>)
   80918:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);		// CS rises after SPI transfers have completed.
   8091a:	483a      	ldr	r0, [pc, #232]	; (80a04 <spi_master_initialize+0x16c>)
   8091c:	68f9      	ldr	r1, [r7, #12]
   8091e:	2204      	movs	r2, #4
   80920:	4b48      	ldr	r3, [pc, #288]	; (80a44 <spi_master_initialize+0x1ac>)
   80922:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80924:	4837      	ldr	r0, [pc, #220]	; (80a04 <spi_master_initialize+0x16c>)
   80926:	68f9      	ldr	r1, [r7, #12]
   80928:	687a      	ldr	r2, [r7, #4]
   8092a:	4b47      	ldr	r3, [pc, #284]	; (80a48 <spi_master_initialize+0x1b0>)
   8092c:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   8092e:	4835      	ldr	r0, [pc, #212]	; (80a04 <spi_master_initialize+0x16c>)
   80930:	68f9      	ldr	r1, [r7, #12]
   80932:	683a      	ldr	r2, [r7, #0]
   80934:	4b45      	ldr	r3, [pc, #276]	; (80a4c <spi_master_initialize+0x1b4>)
   80936:	4798      	blx	r3
	
	/* Set communication parameters for CS1	*/
	spi_chip_sel = 1;
   80938:	2301      	movs	r3, #1
   8093a:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 2000000;	// SPI CLK for RTC = 4MHz.
   8093c:	4b44      	ldr	r3, [pc, #272]	; (80a50 <spi_master_initialize+0x1b8>)
   8093e:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 0;
   80940:	2300      	movs	r3, #0
   80942:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80944:	2300      	movs	r3, #0
   80946:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80948:	482e      	ldr	r0, [pc, #184]	; (80a04 <spi_master_initialize+0x16c>)
   8094a:	68f9      	ldr	r1, [r7, #12]
   8094c:	2200      	movs	r2, #0
   8094e:	2302      	movs	r3, #2
   80950:	4c37      	ldr	r4, [pc, #220]	; (80a30 <spi_master_initialize+0x198>)
   80952:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   80954:	482b      	ldr	r0, [pc, #172]	; (80a04 <spi_master_initialize+0x16c>)
   80956:	68f9      	ldr	r1, [r7, #12]
   80958:	2200      	movs	r2, #0
   8095a:	4b36      	ldr	r3, [pc, #216]	; (80a34 <spi_master_initialize+0x19c>)
   8095c:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   8095e:	4b36      	ldr	r3, [pc, #216]	; (80a38 <spi_master_initialize+0x1a0>)
   80960:	4798      	blx	r3
   80962:	4603      	mov	r3, r0
   80964:	68b8      	ldr	r0, [r7, #8]
   80966:	4619      	mov	r1, r3
   80968:	4b34      	ldr	r3, [pc, #208]	; (80a3c <spi_master_initialize+0x1a4>)
   8096a:	4798      	blx	r3
   8096c:	4603      	mov	r3, r0
   8096e:	b2db      	uxtb	r3, r3
   80970:	4824      	ldr	r0, [pc, #144]	; (80a04 <spi_master_initialize+0x16c>)
   80972:	68f9      	ldr	r1, [r7, #12]
   80974:	461a      	mov	r2, r3
   80976:	4b32      	ldr	r3, [pc, #200]	; (80a40 <spi_master_initialize+0x1a8>)
   80978:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);
   8097a:	4822      	ldr	r0, [pc, #136]	; (80a04 <spi_master_initialize+0x16c>)
   8097c:	68f9      	ldr	r1, [r7, #12]
   8097e:	2204      	movs	r2, #4
   80980:	4b30      	ldr	r3, [pc, #192]	; (80a44 <spi_master_initialize+0x1ac>)
   80982:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80984:	481f      	ldr	r0, [pc, #124]	; (80a04 <spi_master_initialize+0x16c>)
   80986:	68f9      	ldr	r1, [r7, #12]
   80988:	687a      	ldr	r2, [r7, #4]
   8098a:	4b2f      	ldr	r3, [pc, #188]	; (80a48 <spi_master_initialize+0x1b0>)
   8098c:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   8098e:	481d      	ldr	r0, [pc, #116]	; (80a04 <spi_master_initialize+0x16c>)
   80990:	68f9      	ldr	r1, [r7, #12]
   80992:	683a      	ldr	r2, [r7, #0]
   80994:	4b2d      	ldr	r3, [pc, #180]	; (80a4c <spi_master_initialize+0x1b4>)
   80996:	4798      	blx	r3
	
	/* Set communication parameters for CS2	*/
	spi_chip_sel = 2;
   80998:	2302      	movs	r3, #2
   8099a:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 44000000;	// SPI CLK for MEM2 = 44MHz.
   8099c:	4b2d      	ldr	r3, [pc, #180]	; (80a54 <spi_master_initialize+0x1bc>)
   8099e:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   809a0:	2301      	movs	r3, #1
   809a2:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   809a4:	2300      	movs	r3, #0
   809a6:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   809a8:	4816      	ldr	r0, [pc, #88]	; (80a04 <spi_master_initialize+0x16c>)
   809aa:	68f9      	ldr	r1, [r7, #12]
   809ac:	2200      	movs	r2, #0
   809ae:	2302      	movs	r3, #2
   809b0:	4c1f      	ldr	r4, [pc, #124]	; (80a30 <spi_master_initialize+0x198>)
   809b2:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   809b4:	4813      	ldr	r0, [pc, #76]	; (80a04 <spi_master_initialize+0x16c>)
   809b6:	68f9      	ldr	r1, [r7, #12]
   809b8:	2200      	movs	r2, #0
   809ba:	4b1e      	ldr	r3, [pc, #120]	; (80a34 <spi_master_initialize+0x19c>)
   809bc:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz()));
   809be:	4b1e      	ldr	r3, [pc, #120]	; (80a38 <spi_master_initialize+0x1a0>)
   809c0:	4798      	blx	r3
   809c2:	4603      	mov	r3, r0
   809c4:	68b8      	ldr	r0, [r7, #8]
   809c6:	4619      	mov	r1, r3
   809c8:	4b1c      	ldr	r3, [pc, #112]	; (80a3c <spi_master_initialize+0x1a4>)
   809ca:	4798      	blx	r3
   809cc:	4603      	mov	r3, r0
   809ce:	b2db      	uxtb	r3, r3
   809d0:	480c      	ldr	r0, [pc, #48]	; (80a04 <spi_master_initialize+0x16c>)
   809d2:	68f9      	ldr	r1, [r7, #12]
   809d4:	461a      	mov	r2, r3
   809d6:	4b1a      	ldr	r3, [pc, #104]	; (80a40 <spi_master_initialize+0x1a8>)
   809d8:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_KEEP_LOW);
   809da:	480a      	ldr	r0, [pc, #40]	; (80a04 <spi_master_initialize+0x16c>)
   809dc:	68f9      	ldr	r1, [r7, #12]
   809de:	2208      	movs	r2, #8
   809e0:	4b18      	ldr	r3, [pc, #96]	; (80a44 <spi_master_initialize+0x1ac>)
   809e2:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   809e4:	4807      	ldr	r0, [pc, #28]	; (80a04 <spi_master_initialize+0x16c>)
   809e6:	68f9      	ldr	r1, [r7, #12]
   809e8:	687a      	ldr	r2, [r7, #4]
   809ea:	4b17      	ldr	r3, [pc, #92]	; (80a48 <spi_master_initialize+0x1b0>)
   809ec:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   809ee:	4805      	ldr	r0, [pc, #20]	; (80a04 <spi_master_initialize+0x16c>)
   809f0:	68f9      	ldr	r1, [r7, #12]
   809f2:	683a      	ldr	r2, [r7, #0]
   809f4:	4b15      	ldr	r3, [pc, #84]	; (80a4c <spi_master_initialize+0x1b4>)
   809f6:	4798      	blx	r3
	
	/* Enable SPI Communication */
	spi_enable(SPI_MASTER_BASE);
   809f8:	4802      	ldr	r0, [pc, #8]	; (80a04 <spi_master_initialize+0x16c>)
   809fa:	4b17      	ldr	r3, [pc, #92]	; (80a58 <spi_master_initialize+0x1c0>)
   809fc:	4798      	blx	r3
}
   809fe:	3714      	adds	r7, #20
   80a00:	46bd      	mov	sp, r7
   80a02:	bd90      	pop	{r4, r7, pc}
   80a04:	40008000 	.word	0x40008000
   80a08:	00080189 	.word	0x00080189
   80a0c:	00080765 	.word	0x00080765
   80a10:	00080795 	.word	0x00080795
   80a14:	000807f5 	.word	0x000807f5
   80a18:	00080815 	.word	0x00080815
   80a1c:	000801ad 	.word	0x000801ad
   80a20:	000807b5 	.word	0x000807b5
   80a24:	000807d5 	.word	0x000807d5
   80a28:	000801e1 	.word	0x000801e1
   80a2c:	000186a0 	.word	0x000186a0
   80a30:	0008049d 	.word	0x0008049d
   80a34:	000803c5 	.word	0x000803c5
   80a38:	00080751 	.word	0x00080751
   80a3c:	0008040d 	.word	0x0008040d
   80a40:	0008044d 	.word	0x0008044d
   80a44:	00080321 	.word	0x00080321
   80a48:	00080281 	.word	0x00080281
   80a4c:	000802d1 	.word	0x000802d1
   80a50:	001e8480 	.word	0x001e8480
   80a54:	029f6300 	.word	0x029f6300
   80a58:	0008077d 	.word	0x0008077d

00080a5c <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80a5c:	b580      	push	{r7, lr}
   80a5e:	af00      	add	r7, sp, #0
	//uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
		
	//*reg_ptr |= 0x00BB;
	//spi_slave_initialize();
	spi_master_initialize();
   80a60:	4b01      	ldr	r3, [pc, #4]	; (80a68 <spi_initialize+0xc>)
   80a62:	4798      	blx	r3

	return;
   80a64:	bf00      	nop
}
   80a66:	bd80      	pop	{r7, pc}
   80a68:	00080899 	.word	0x00080899

00080a6c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80a6c:	b480      	push	{r7}
   80a6e:	b083      	sub	sp, #12
   80a70:	af00      	add	r7, sp, #0
   80a72:	4603      	mov	r3, r0
   80a74:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80a76:	4b08      	ldr	r3, [pc, #32]	; (80a98 <NVIC_EnableIRQ+0x2c>)
   80a78:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80a7c:	0952      	lsrs	r2, r2, #5
   80a7e:	79f9      	ldrb	r1, [r7, #7]
   80a80:	f001 011f 	and.w	r1, r1, #31
   80a84:	2001      	movs	r0, #1
   80a86:	fa00 f101 	lsl.w	r1, r0, r1
   80a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80a8e:	370c      	adds	r7, #12
   80a90:	46bd      	mov	sp, r7
   80a92:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a96:	4770      	bx	lr
   80a98:	e000e100 	.word	0xe000e100

00080a9c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80a9c:	b480      	push	{r7}
   80a9e:	b083      	sub	sp, #12
   80aa0:	af00      	add	r7, sp, #0
   80aa2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80aa4:	687b      	ldr	r3, [r7, #4]
   80aa6:	2b07      	cmp	r3, #7
   80aa8:	d825      	bhi.n	80af6 <osc_get_rate+0x5a>
   80aaa:	a201      	add	r2, pc, #4	; (adr r2, 80ab0 <osc_get_rate+0x14>)
   80aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80ab0:	00080ad1 	.word	0x00080ad1
   80ab4:	00080ad7 	.word	0x00080ad7
   80ab8:	00080add 	.word	0x00080add
   80abc:	00080ae3 	.word	0x00080ae3
   80ac0:	00080ae7 	.word	0x00080ae7
   80ac4:	00080aeb 	.word	0x00080aeb
   80ac8:	00080aef 	.word	0x00080aef
   80acc:	00080af3 	.word	0x00080af3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80ad0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80ad4:	e010      	b.n	80af8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ada:	e00d      	b.n	80af8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80adc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80ae0:	e00a      	b.n	80af8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80ae2:	4b08      	ldr	r3, [pc, #32]	; (80b04 <osc_get_rate+0x68>)
   80ae4:	e008      	b.n	80af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80ae6:	4b08      	ldr	r3, [pc, #32]	; (80b08 <osc_get_rate+0x6c>)
   80ae8:	e006      	b.n	80af8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80aea:	4b08      	ldr	r3, [pc, #32]	; (80b0c <osc_get_rate+0x70>)
   80aec:	e004      	b.n	80af8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80aee:	4b07      	ldr	r3, [pc, #28]	; (80b0c <osc_get_rate+0x70>)
   80af0:	e002      	b.n	80af8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80af2:	4b06      	ldr	r3, [pc, #24]	; (80b0c <osc_get_rate+0x70>)
   80af4:	e000      	b.n	80af8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80af6:	2300      	movs	r3, #0
}
   80af8:	4618      	mov	r0, r3
   80afa:	370c      	adds	r7, #12
   80afc:	46bd      	mov	sp, r7
   80afe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80b02:	4770      	bx	lr
   80b04:	003d0900 	.word	0x003d0900
   80b08:	007a1200 	.word	0x007a1200
   80b0c:	00b71b00 	.word	0x00b71b00

00080b10 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80b10:	b580      	push	{r7, lr}
   80b12:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80b14:	2006      	movs	r0, #6
   80b16:	4b04      	ldr	r3, [pc, #16]	; (80b28 <sysclk_get_main_hz+0x18>)
   80b18:	4798      	blx	r3
   80b1a:	4602      	mov	r2, r0
   80b1c:	4613      	mov	r3, r2
   80b1e:	00db      	lsls	r3, r3, #3
   80b20:	1a9b      	subs	r3, r3, r2
   80b22:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80b24:	4618      	mov	r0, r3
   80b26:	bd80      	pop	{r7, pc}
   80b28:	00080a9d 	.word	0x00080a9d

00080b2c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80b2c:	b580      	push	{r7, lr}
   80b2e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80b30:	4b02      	ldr	r3, [pc, #8]	; (80b3c <sysclk_get_cpu_hz+0x10>)
   80b32:	4798      	blx	r3
   80b34:	4603      	mov	r3, r0
   80b36:	085b      	lsrs	r3, r3, #1
}
   80b38:	4618      	mov	r0, r3
   80b3a:	bd80      	pop	{r7, pc}
   80b3c:	00080b11 	.word	0x00080b11

00080b40 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80b40:	b580      	push	{r7, lr}
   80b42:	b082      	sub	sp, #8
   80b44:	af00      	add	r7, sp, #0
   80b46:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80b48:	6878      	ldr	r0, [r7, #4]
   80b4a:	4b02      	ldr	r3, [pc, #8]	; (80b54 <sysclk_enable_peripheral_clock+0x14>)
   80b4c:	4798      	blx	r3
}
   80b4e:	3708      	adds	r7, #8
   80b50:	46bd      	mov	sp, r7
   80b52:	bd80      	pop	{r7, pc}
   80b54:	00082509 	.word	0x00082509

00080b58 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   80b58:	b580      	push	{r7, lr}
   80b5a:	b084      	sub	sp, #16
   80b5c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80b5e:	2300      	movs	r3, #0
   80b60:	60bb      	str	r3, [r7, #8]
   80b62:	2300      	movs	r3, #0
   80b64:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   80b66:	2300      	movs	r3, #0
   80b68:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   80b6a:	2300      	movs	r3, #0
   80b6c:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80b6e:	483b      	ldr	r0, [pc, #236]	; (80c5c <USART0_Handler+0x104>)
   80b70:	4b3b      	ldr	r3, [pc, #236]	; (80c60 <USART0_Handler+0x108>)
   80b72:	4798      	blx	r3
   80b74:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   80b76:	2058      	movs	r0, #88	; 0x58
   80b78:	4b3a      	ldr	r3, [pc, #232]	; (80c64 <USART0_Handler+0x10c>)
   80b7a:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   80b7c:	4b3a      	ldr	r3, [pc, #232]	; (80c68 <USART0_Handler+0x110>)
   80b7e:	781b      	ldrb	r3, [r3, #0]
   80b80:	2b00      	cmp	r3, #0
   80b82:	d167      	bne.n	80c54 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   80b84:	683b      	ldr	r3, [r7, #0]
   80b86:	f003 0301 	and.w	r3, r3, #1
   80b8a:	2b00      	cmp	r3, #0
   80b8c:	d062      	beq.n	80c54 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80b8e:	4833      	ldr	r0, [pc, #204]	; (80c5c <USART0_Handler+0x104>)
   80b90:	4936      	ldr	r1, [pc, #216]	; (80c6c <USART0_Handler+0x114>)
   80b92:	4b37      	ldr	r3, [pc, #220]	; (80c70 <USART0_Handler+0x118>)
   80b94:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   80b96:	4b35      	ldr	r3, [pc, #212]	; (80c6c <USART0_Handler+0x114>)
   80b98:	681b      	ldr	r3, [r3, #0]
   80b9a:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   80b9c:	68bb      	ldr	r3, [r7, #8]
   80b9e:	2b31      	cmp	r3, #49	; 0x31
   80ba0:	d102      	bne.n	80ba8 <USART0_Handler+0x50>
				command_start = 1;
   80ba2:	4b34      	ldr	r3, [pc, #208]	; (80c74 <USART0_Handler+0x11c>)
   80ba4:	2201      	movs	r2, #1
   80ba6:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   80ba8:	68bb      	ldr	r3, [r7, #8]
   80baa:	2b32      	cmp	r3, #50	; 0x32
   80bac:	d102      	bne.n	80bb4 <USART0_Handler+0x5c>
				command_end = 1;
   80bae:	4b32      	ldr	r3, [pc, #200]	; (80c78 <USART0_Handler+0x120>)
   80bb0:	2201      	movs	r2, #1
   80bb2:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   80bb4:	4b2f      	ldr	r3, [pc, #188]	; (80c74 <USART0_Handler+0x11c>)
   80bb6:	781b      	ldrb	r3, [r3, #0]
   80bb8:	2b01      	cmp	r3, #1
   80bba:	d11e      	bne.n	80bfa <USART0_Handler+0xa2>
   80bbc:	68bb      	ldr	r3, [r7, #8]
   80bbe:	2b00      	cmp	r3, #0
   80bc0:	d01b      	beq.n	80bfa <USART0_Handler+0xa2>
   80bc2:	68bb      	ldr	r3, [r7, #8]
   80bc4:	2b31      	cmp	r3, #49	; 0x31
   80bc6:	d018      	beq.n	80bfa <USART0_Handler+0xa2>
   80bc8:	68bb      	ldr	r3, [r7, #8]
   80bca:	2b32      	cmp	r3, #50	; 0x32
   80bcc:	d015      	beq.n	80bfa <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80bce:	4b2b      	ldr	r3, [pc, #172]	; (80c7c <USART0_Handler+0x124>)
   80bd0:	781a      	ldrb	r2, [r3, #0]
   80bd2:	4b2b      	ldr	r3, [pc, #172]	; (80c80 <USART0_Handler+0x128>)
   80bd4:	fba3 1302 	umull	r1, r3, r3, r2
   80bd8:	08d9      	lsrs	r1, r3, #3
   80bda:	460b      	mov	r3, r1
   80bdc:	009b      	lsls	r3, r3, #2
   80bde:	440b      	add	r3, r1
   80be0:	005b      	lsls	r3, r3, #1
   80be2:	1ad3      	subs	r3, r2, r3
   80be4:	b2db      	uxtb	r3, r3
   80be6:	68ba      	ldr	r2, [r7, #8]
   80be8:	b2d1      	uxtb	r1, r2
   80bea:	4a26      	ldr	r2, [pc, #152]	; (80c84 <USART0_Handler+0x12c>)
   80bec:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80bee:	4b23      	ldr	r3, [pc, #140]	; (80c7c <USART0_Handler+0x124>)
   80bf0:	781b      	ldrb	r3, [r3, #0]
   80bf2:	3301      	adds	r3, #1
   80bf4:	b2da      	uxtb	r2, r3
   80bf6:	4b21      	ldr	r3, [pc, #132]	; (80c7c <USART0_Handler+0x124>)
   80bf8:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   80bfa:	4b1f      	ldr	r3, [pc, #124]	; (80c78 <USART0_Handler+0x120>)
   80bfc:	781b      	ldrb	r3, [r3, #0]
   80bfe:	2b01      	cmp	r3, #1
   80c00:	d11d      	bne.n	80c3e <USART0_Handler+0xe6>
   80c02:	4b1c      	ldr	r3, [pc, #112]	; (80c74 <USART0_Handler+0x11c>)
   80c04:	781b      	ldrb	r3, [r3, #0]
   80c06:	2b01      	cmp	r3, #1
   80c08:	d119      	bne.n	80c3e <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   80c0a:	4b1f      	ldr	r3, [pc, #124]	; (80c88 <USART0_Handler+0x130>)
   80c0c:	4798      	blx	r3
				command_end = 0;
   80c0e:	4b1a      	ldr	r3, [pc, #104]	; (80c78 <USART0_Handler+0x120>)
   80c10:	2200      	movs	r2, #0
   80c12:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80c14:	4b17      	ldr	r3, [pc, #92]	; (80c74 <USART0_Handler+0x11c>)
   80c16:	2200      	movs	r2, #0
   80c18:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   80c1a:	4b18      	ldr	r3, [pc, #96]	; (80c7c <USART0_Handler+0x124>)
   80c1c:	2200      	movs	r2, #0
   80c1e:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80c20:	2300      	movs	r3, #0
   80c22:	73bb      	strb	r3, [r7, #14]
   80c24:	e006      	b.n	80c34 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   80c26:	7bbb      	ldrb	r3, [r7, #14]
   80c28:	4a16      	ldr	r2, [pc, #88]	; (80c84 <USART0_Handler+0x12c>)
   80c2a:	2100      	movs	r1, #0
   80c2c:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80c2e:	7bbb      	ldrb	r3, [r7, #14]
   80c30:	3301      	adds	r3, #1
   80c32:	73bb      	strb	r3, [r7, #14]
   80c34:	7bbb      	ldrb	r3, [r7, #14]
   80c36:	2b09      	cmp	r3, #9
   80c38:	d9f5      	bls.n	80c26 <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   80c3a:	2301      	movs	r3, #1
   80c3c:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80c3e:	7bfb      	ldrb	r3, [r7, #15]
   80c40:	2b00      	cmp	r3, #0
   80c42:	d105      	bne.n	80c50 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80c44:	4b09      	ldr	r3, [pc, #36]	; (80c6c <USART0_Handler+0x114>)
   80c46:	681b      	ldr	r3, [r3, #0]
   80c48:	4804      	ldr	r0, [pc, #16]	; (80c5c <USART0_Handler+0x104>)
   80c4a:	4619      	mov	r1, r3
   80c4c:	4b0f      	ldr	r3, [pc, #60]	; (80c8c <USART0_Handler+0x134>)
   80c4e:	4798      	blx	r3
					
			command_completed = 0;
   80c50:	2300      	movs	r3, #0
   80c52:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80c54:	3710      	adds	r7, #16
   80c56:	46bd      	mov	sp, r7
   80c58:	bd80      	pop	{r7, pc}
   80c5a:	bf00      	nop
   80c5c:	40098000 	.word	0x40098000
   80c60:	00082789 	.word	0x00082789
   80c64:	00081f1d 	.word	0x00081f1d
   80c68:	20070460 	.word	0x20070460
   80c6c:	2007045c 	.word	0x2007045c
   80c70:	0008280d 	.word	0x0008280d
   80c74:	20070461 	.word	0x20070461
   80c78:	20070462 	.word	0x20070462
   80c7c:	20070470 	.word	0x20070470
   80c80:	cccccccd 	.word	0xcccccccd
   80c84:	20070464 	.word	0x20070464
   80c88:	00080c91 	.word	0x00080c91
   80c8c:	000827d9 	.word	0x000827d9

00080c90 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   80c90:	b580      	push	{r7, lr}
   80c92:	b08a      	sub	sp, #40	; 0x28
   80c94:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   80c96:	2300      	movs	r3, #0
   80c98:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   80c9a:	2301      	movs	r3, #1
   80c9c:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   80c9e:	2300      	movs	r3, #0
   80ca0:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   80ca2:	2301      	movs	r3, #1
   80ca4:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   80ca6:	2301      	movs	r3, #1
   80ca8:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   80caa:	2301      	movs	r3, #1
   80cac:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   80cae:	f240 1327 	movw	r3, #295	; 0x127
   80cb2:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   80cb4:	2319      	movs	r3, #25
   80cb6:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   80cb8:	4b7e      	ldr	r3, [pc, #504]	; (80eb4 <check_command+0x224>)
   80cba:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   80cbc:	6938      	ldr	r0, [r7, #16]
   80cbe:	4b7e      	ldr	r3, [pc, #504]	; (80eb8 <check_command+0x228>)
   80cc0:	4798      	blx	r3
   80cc2:	4603      	mov	r3, r0
   80cc4:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   80cc6:	4b7d      	ldr	r3, [pc, #500]	; (80ebc <check_command+0x22c>)
   80cc8:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   80cca:	6938      	ldr	r0, [r7, #16]
   80ccc:	4b7a      	ldr	r3, [pc, #488]	; (80eb8 <check_command+0x228>)
   80cce:	4798      	blx	r3
   80cd0:	4603      	mov	r3, r0
   80cd2:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   80cd4:	4b7a      	ldr	r3, [pc, #488]	; (80ec0 <check_command+0x230>)
   80cd6:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   80cd8:	6938      	ldr	r0, [r7, #16]
   80cda:	4b77      	ldr	r3, [pc, #476]	; (80eb8 <check_command+0x228>)
   80cdc:	4798      	blx	r3
   80cde:	4603      	mov	r3, r0
   80ce0:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   80ce2:	7ebb      	ldrb	r3, [r7, #26]
   80ce4:	2b01      	cmp	r3, #1
   80ce6:	f040 8088 	bne.w	80dfa <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80cea:	4b76      	ldr	r3, [pc, #472]	; (80ec4 <check_command+0x234>)
   80cec:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   80cee:	e00d      	b.n	80d0c <check_command+0x7c>
		{
			character = *message_array;
   80cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80cf2:	781b      	ldrb	r3, [r3, #0]
   80cf4:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80cf6:	bf00      	nop
   80cf8:	4873      	ldr	r0, [pc, #460]	; (80ec8 <check_command+0x238>)
   80cfa:	6a39      	ldr	r1, [r7, #32]
   80cfc:	4b73      	ldr	r3, [pc, #460]	; (80ecc <check_command+0x23c>)
   80cfe:	4798      	blx	r3
   80d00:	4603      	mov	r3, r0
   80d02:	2b00      	cmp	r3, #0
   80d04:	d1f8      	bne.n	80cf8 <check_command+0x68>
			
			message_array++;
   80d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d08:	3301      	adds	r3, #1
   80d0a:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d0e:	781b      	ldrb	r3, [r3, #0]
   80d10:	2b00      	cmp	r3, #0
   80d12:	d1ed      	bne.n	80cf0 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   80d14:	4b6e      	ldr	r3, [pc, #440]	; (80ed0 <check_command+0x240>)
   80d16:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80d18:	e00d      	b.n	80d36 <check_command+0xa6>
		{
			character = *message_array;
   80d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d1c:	781b      	ldrb	r3, [r3, #0]
   80d1e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80d20:	bf00      	nop
   80d22:	4869      	ldr	r0, [pc, #420]	; (80ec8 <check_command+0x238>)
   80d24:	6a39      	ldr	r1, [r7, #32]
   80d26:	4b69      	ldr	r3, [pc, #420]	; (80ecc <check_command+0x23c>)
   80d28:	4798      	blx	r3
   80d2a:	4603      	mov	r3, r0
   80d2c:	2b00      	cmp	r3, #0
   80d2e:	d1f8      	bne.n	80d22 <check_command+0x92>
			
			message_array++;
   80d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d32:	3301      	adds	r3, #1
   80d34:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80d38:	781b      	ldrb	r3, [r3, #0]
   80d3a:	2b00      	cmp	r3, #0
   80d3c:	d1ed      	bne.n	80d1a <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   80d3e:	4b65      	ldr	r3, [pc, #404]	; (80ed4 <check_command+0x244>)
   80d40:	681b      	ldr	r3, [r3, #0]
   80d42:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   80d44:	1d3b      	adds	r3, r7, #4
   80d46:	4618      	mov	r0, r3
   80d48:	4b63      	ldr	r3, [pc, #396]	; (80ed8 <check_command+0x248>)
   80d4a:	4798      	blx	r3
   80d4c:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   80d4e:	687b      	ldr	r3, [r7, #4]
   80d50:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80d52:	7dfb      	ldrb	r3, [r7, #23]
   80d54:	4618      	mov	r0, r3
   80d56:	4b61      	ldr	r3, [pc, #388]	; (80edc <check_command+0x24c>)
   80d58:	4798      	blx	r3
   80d5a:	4603      	mov	r3, r0
   80d5c:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   80d5e:	7dfb      	ldrb	r3, [r7, #23]
   80d60:	011b      	lsls	r3, r3, #4
   80d62:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   80d64:	7bfb      	ldrb	r3, [r7, #15]
   80d66:	091b      	lsrs	r3, r3, #4
   80d68:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   80d6a:	7dfb      	ldrb	r3, [r7, #23]
   80d6c:	091b      	lsrs	r3, r3, #4
   80d6e:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   80d70:	7bfb      	ldrb	r3, [r7, #15]
   80d72:	3330      	adds	r3, #48	; 0x30
   80d74:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   80d76:	7bbb      	ldrb	r3, [r7, #14]
   80d78:	3330      	adds	r3, #48	; 0x30
   80d7a:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   80d7c:	69fb      	ldr	r3, [r7, #28]
   80d7e:	2b00      	cmp	r3, #0
   80d80:	d00a      	beq.n	80d98 <check_command+0x108>
		{
			character = 0x2B;
   80d82:	232b      	movs	r3, #43	; 0x2b
   80d84:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   80d86:	bf00      	nop
   80d88:	484f      	ldr	r0, [pc, #316]	; (80ec8 <check_command+0x238>)
   80d8a:	6a39      	ldr	r1, [r7, #32]
   80d8c:	4b4f      	ldr	r3, [pc, #316]	; (80ecc <check_command+0x23c>)
   80d8e:	4798      	blx	r3
   80d90:	4603      	mov	r3, r0
   80d92:	2b00      	cmp	r3, #0
   80d94:	d1f8      	bne.n	80d88 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80d96:	e009      	b.n	80dac <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   80d98:	232d      	movs	r3, #45	; 0x2d
   80d9a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   80d9c:	bf00      	nop
   80d9e:	484a      	ldr	r0, [pc, #296]	; (80ec8 <check_command+0x238>)
   80da0:	6a39      	ldr	r1, [r7, #32]
   80da2:	4b4a      	ldr	r3, [pc, #296]	; (80ecc <check_command+0x23c>)
   80da4:	4798      	blx	r3
   80da6:	4603      	mov	r3, r0
   80da8:	2b00      	cmp	r3, #0
   80daa:	d1f8      	bne.n	80d9e <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80dac:	bf00      	nop
   80dae:	7bbb      	ldrb	r3, [r7, #14]
   80db0:	4845      	ldr	r0, [pc, #276]	; (80ec8 <check_command+0x238>)
   80db2:	4619      	mov	r1, r3
   80db4:	4b45      	ldr	r3, [pc, #276]	; (80ecc <check_command+0x23c>)
   80db6:	4798      	blx	r3
   80db8:	4603      	mov	r3, r0
   80dba:	2b00      	cmp	r3, #0
   80dbc:	d1f7      	bne.n	80dae <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   80dbe:	bf00      	nop
   80dc0:	7bfb      	ldrb	r3, [r7, #15]
   80dc2:	4841      	ldr	r0, [pc, #260]	; (80ec8 <check_command+0x238>)
   80dc4:	4619      	mov	r1, r3
   80dc6:	4b41      	ldr	r3, [pc, #260]	; (80ecc <check_command+0x23c>)
   80dc8:	4798      	blx	r3
   80dca:	4603      	mov	r3, r0
   80dcc:	2b00      	cmp	r3, #0
   80dce:	d1f7      	bne.n	80dc0 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   80dd0:	4b43      	ldr	r3, [pc, #268]	; (80ee0 <check_command+0x250>)
   80dd2:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80dd4:	e00d      	b.n	80df2 <check_command+0x162>
		{
			character = *message_array;
   80dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80dd8:	781b      	ldrb	r3, [r3, #0]
   80dda:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80ddc:	bf00      	nop
   80dde:	483a      	ldr	r0, [pc, #232]	; (80ec8 <check_command+0x238>)
   80de0:	6a39      	ldr	r1, [r7, #32]
   80de2:	4b3a      	ldr	r3, [pc, #232]	; (80ecc <check_command+0x23c>)
   80de4:	4798      	blx	r3
   80de6:	4603      	mov	r3, r0
   80de8:	2b00      	cmp	r3, #0
   80dea:	d1f8      	bne.n	80dde <check_command+0x14e>
			
			message_array++;
   80dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80dee:	3301      	adds	r3, #1
   80df0:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   80df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80df4:	781b      	ldrb	r3, [r3, #0]
   80df6:	2b00      	cmp	r3, #0
   80df8:	d1ed      	bne.n	80dd6 <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   80dfa:	7e7b      	ldrb	r3, [r7, #25]
   80dfc:	2b01      	cmp	r3, #1
   80dfe:	d114      	bne.n	80e2a <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   80e00:	4b38      	ldr	r3, [pc, #224]	; (80ee4 <check_command+0x254>)
   80e02:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e04:	e00d      	b.n	80e22 <check_command+0x192>
		{
			character = *message_array;
   80e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e08:	781b      	ldrb	r3, [r3, #0]
   80e0a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e0c:	bf00      	nop
   80e0e:	482e      	ldr	r0, [pc, #184]	; (80ec8 <check_command+0x238>)
   80e10:	6a39      	ldr	r1, [r7, #32]
   80e12:	4b2e      	ldr	r3, [pc, #184]	; (80ecc <check_command+0x23c>)
   80e14:	4798      	blx	r3
   80e16:	4603      	mov	r3, r0
   80e18:	2b00      	cmp	r3, #0
   80e1a:	d1f8      	bne.n	80e0e <check_command+0x17e>
			
			message_array++;
   80e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e1e:	3301      	adds	r3, #1
   80e20:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e24:	781b      	ldrb	r3, [r3, #0]
   80e26:	2b00      	cmp	r3, #0
   80e28:	d1ed      	bne.n	80e06 <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   80e2a:	7e3b      	ldrb	r3, [r7, #24]
   80e2c:	2b01      	cmp	r3, #1
   80e2e:	d13d      	bne.n	80eac <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   80e30:	4b2d      	ldr	r3, [pc, #180]	; (80ee8 <check_command+0x258>)
   80e32:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e34:	e00d      	b.n	80e52 <check_command+0x1c2>
		{
			character = *message_array;
   80e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e38:	781b      	ldrb	r3, [r3, #0]
   80e3a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e3c:	bf00      	nop
   80e3e:	4822      	ldr	r0, [pc, #136]	; (80ec8 <check_command+0x238>)
   80e40:	6a39      	ldr	r1, [r7, #32]
   80e42:	4b22      	ldr	r3, [pc, #136]	; (80ecc <check_command+0x23c>)
   80e44:	4798      	blx	r3
   80e46:	4603      	mov	r3, r0
   80e48:	2b00      	cmp	r3, #0
   80e4a:	d1f8      	bne.n	80e3e <check_command+0x1ae>
			
			message_array++;
   80e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e4e:	3301      	adds	r3, #1
   80e50:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   80e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e54:	781b      	ldrb	r3, [r3, #0]
   80e56:	2b00      	cmp	r3, #0
   80e58:	d1ed      	bne.n	80e36 <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   80e5a:	4b24      	ldr	r3, [pc, #144]	; (80eec <check_command+0x25c>)
   80e5c:	681b      	ldr	r3, [r3, #0]
   80e5e:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   80e60:	68bb      	ldr	r3, [r7, #8]
   80e62:	b2db      	uxtb	r3, r3
   80e64:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   80e66:	68bb      	ldr	r3, [r7, #8]
   80e68:	2b40      	cmp	r3, #64	; 0x40
   80e6a:	d802      	bhi.n	80e72 <check_command+0x1e2>
   80e6c:	68bb      	ldr	r3, [r7, #8]
   80e6e:	2b5a      	cmp	r3, #90	; 0x5a
   80e70:	d807      	bhi.n	80e82 <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   80e72:	bf00      	nop
   80e74:	4814      	ldr	r0, [pc, #80]	; (80ec8 <check_command+0x238>)
   80e76:	68b9      	ldr	r1, [r7, #8]
   80e78:	4b14      	ldr	r3, [pc, #80]	; (80ecc <check_command+0x23c>)
   80e7a:	4798      	blx	r3
   80e7c:	4603      	mov	r3, r0
   80e7e:	2b00      	cmp	r3, #0
   80e80:	d1f8      	bne.n	80e74 <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   80e82:	4b1b      	ldr	r3, [pc, #108]	; (80ef0 <check_command+0x260>)
   80e84:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80e86:	e00d      	b.n	80ea4 <check_command+0x214>
		{
			character = *message_array;
   80e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e8a:	781b      	ldrb	r3, [r3, #0]
   80e8c:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e8e:	bf00      	nop
   80e90:	480d      	ldr	r0, [pc, #52]	; (80ec8 <check_command+0x238>)
   80e92:	6a39      	ldr	r1, [r7, #32]
   80e94:	4b0d      	ldr	r3, [pc, #52]	; (80ecc <check_command+0x23c>)
   80e96:	4798      	blx	r3
   80e98:	4603      	mov	r3, r0
   80e9a:	2b00      	cmp	r3, #0
   80e9c:	d1f8      	bne.n	80e90 <check_command+0x200>
			
			message_array++;
   80e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80ea0:	3301      	adds	r3, #1
   80ea2:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   80ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80ea6:	781b      	ldrb	r3, [r3, #0]
   80ea8:	2b00      	cmp	r3, #0
   80eaa:	d1ed      	bne.n	80e88 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   80eac:	bf00      	nop
}
   80eae:	3728      	adds	r7, #40	; 0x28
   80eb0:	46bd      	mov	sp, r7
   80eb2:	bd80      	pop	{r7, pc}
   80eb4:	00086960 	.word	0x00086960
   80eb8:	00080ef5 	.word	0x00080ef5
   80ebc:	00086964 	.word	0x00086964
   80ec0:	00086970 	.word	0x00086970
   80ec4:	00086974 	.word	0x00086974
   80ec8:	40098000 	.word	0x40098000
   80ecc:	000827d9 	.word	0x000827d9
   80ed0:	00086994 	.word	0x00086994
   80ed4:	2007a64c 	.word	0x2007a64c
   80ed8:	00080f51 	.word	0x00080f51
   80edc:	00080fe9 	.word	0x00080fe9
   80ee0:	000869b0 	.word	0x000869b0
   80ee4:	000869b8 	.word	0x000869b8
   80ee8:	000869d4 	.word	0x000869d4
   80eec:	2007a724 	.word	0x2007a724
   80ef0:	000869fc 	.word	0x000869fc

00080ef4 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   80ef4:	b480      	push	{r7}
   80ef6:	b085      	sub	sp, #20
   80ef8:	af00      	add	r7, sp, #0
   80efa:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   80efc:	2300      	movs	r3, #0
   80efe:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   80f00:	2301      	movs	r3, #1
   80f02:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   80f04:	687b      	ldr	r3, [r7, #4]
   80f06:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   80f08:	2300      	movs	r3, #0
   80f0a:	73fb      	strb	r3, [r7, #15]
   80f0c:	e014      	b.n	80f38 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   80f0e:	68bb      	ldr	r3, [r7, #8]
   80f10:	781a      	ldrb	r2, [r3, #0]
   80f12:	7bfb      	ldrb	r3, [r7, #15]
   80f14:	490d      	ldr	r1, [pc, #52]	; (80f4c <check_string+0x58>)
   80f16:	5ccb      	ldrb	r3, [r1, r3]
   80f18:	429a      	cmp	r2, r3
   80f1a:	d002      	beq.n	80f22 <check_string+0x2e>
		{
			ret_val = 0;
   80f1c:	2300      	movs	r3, #0
   80f1e:	73bb      	strb	r3, [r7, #14]
			break;
   80f20:	e00d      	b.n	80f3e <check_string+0x4a>
		}
		if (!*temp_str)
   80f22:	68bb      	ldr	r3, [r7, #8]
   80f24:	781b      	ldrb	r3, [r3, #0]
   80f26:	2b00      	cmp	r3, #0
   80f28:	d100      	bne.n	80f2c <check_string+0x38>
			break;
   80f2a:	e008      	b.n	80f3e <check_string+0x4a>
			
		temp_str++;
   80f2c:	68bb      	ldr	r3, [r7, #8]
   80f2e:	3301      	adds	r3, #1
   80f30:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   80f32:	7bfb      	ldrb	r3, [r7, #15]
   80f34:	3301      	adds	r3, #1
   80f36:	73fb      	strb	r3, [r7, #15]
   80f38:	7bfb      	ldrb	r3, [r7, #15]
   80f3a:	2b09      	cmp	r3, #9
   80f3c:	d9e7      	bls.n	80f0e <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   80f3e:	7bbb      	ldrb	r3, [r7, #14]
}
   80f40:	4618      	mov	r0, r3
   80f42:	3714      	adds	r7, #20
   80f44:	46bd      	mov	sp, r7
   80f46:	f85d 7b04 	ldr.w	r7, [sp], #4
   80f4a:	4770      	bx	lr
   80f4c:	20070464 	.word	0x20070464

00080f50 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   80f50:	b580      	push	{r7, lr}
   80f52:	b084      	sub	sp, #16
   80f54:	af00      	add	r7, sp, #0
   80f56:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   80f58:	f04f 0300 	mov.w	r3, #0
   80f5c:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   80f5e:	687b      	ldr	r3, [r7, #4]
   80f60:	681b      	ldr	r3, [r3, #0]
   80f62:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   80f64:	68bb      	ldr	r3, [r7, #8]
   80f66:	089b      	lsrs	r3, r3, #2
   80f68:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   80f6a:	4b1b      	ldr	r3, [pc, #108]	; (80fd8 <convert_to_temp+0x88>)
   80f6c:	68b8      	ldr	r0, [r7, #8]
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   80f74:	4b19      	ldr	r3, [pc, #100]	; (80fdc <convert_to_temp+0x8c>)
   80f76:	68f8      	ldr	r0, [r7, #12]
   80f78:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   80f7c:	4798      	blx	r3
   80f7e:	4603      	mov	r3, r0
   80f80:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   80f82:	4b17      	ldr	r3, [pc, #92]	; (80fe0 <convert_to_temp+0x90>)
   80f84:	68f8      	ldr	r0, [r7, #12]
   80f86:	f04f 0100 	mov.w	r1, #0
   80f8a:	4798      	blx	r3
   80f8c:	4603      	mov	r3, r0
   80f8e:	2b00      	cmp	r3, #0
   80f90:	d009      	beq.n	80fa6 <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   80f92:	4b14      	ldr	r3, [pc, #80]	; (80fe4 <convert_to_temp+0x94>)
   80f94:	68f8      	ldr	r0, [r7, #12]
   80f96:	4798      	blx	r3
   80f98:	4603      	mov	r3, r0
   80f9a:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   80f9c:	687b      	ldr	r3, [r7, #4]
   80f9e:	68ba      	ldr	r2, [r7, #8]
   80fa0:	601a      	str	r2, [r3, #0]
		return 1;	
   80fa2:	2301      	movs	r3, #1
   80fa4:	e013      	b.n	80fce <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   80fa6:	4b0c      	ldr	r3, [pc, #48]	; (80fd8 <convert_to_temp+0x88>)
   80fa8:	68b8      	ldr	r0, [r7, #8]
   80faa:	4798      	blx	r3
   80fac:	4603      	mov	r3, r0
   80fae:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   80fb2:	4b0c      	ldr	r3, [pc, #48]	; (80fe4 <convert_to_temp+0x94>)
   80fb4:	4610      	mov	r0, r2
   80fb6:	4798      	blx	r3
   80fb8:	4603      	mov	r3, r0
   80fba:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   80fbc:	4b09      	ldr	r3, [pc, #36]	; (80fe4 <convert_to_temp+0x94>)
   80fbe:	68f8      	ldr	r0, [r7, #12]
   80fc0:	4798      	blx	r3
   80fc2:	4603      	mov	r3, r0
   80fc4:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   80fc6:	687b      	ldr	r3, [r7, #4]
   80fc8:	68ba      	ldr	r2, [r7, #8]
   80fca:	601a      	str	r2, [r3, #0]
		return 0;
   80fcc:	2300      	movs	r3, #0
	}
}
   80fce:	4618      	mov	r0, r3
   80fd0:	3710      	adds	r7, #16
   80fd2:	46bd      	mov	sp, r7
   80fd4:	bd80      	pop	{r7, pc}
   80fd6:	bf00      	nop
   80fd8:	000861a1 	.word	0x000861a1
   80fdc:	00086251 	.word	0x00086251
   80fe0:	000865b5 	.word	0x000865b5
   80fe4:	000865dd 	.word	0x000865dd

00080fe8 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   80fe8:	b480      	push	{r7}
   80fea:	b085      	sub	sp, #20
   80fec:	af00      	add	r7, sp, #0
   80fee:	4603      	mov	r3, r0
   80ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   80ff2:	2300      	movs	r3, #0
   80ff4:	73fb      	strb	r3, [r7, #15]
   80ff6:	2300      	movs	r3, #0
   80ff8:	73bb      	strb	r3, [r7, #14]
   80ffa:	2300      	movs	r3, #0
   80ffc:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   80ffe:	79fb      	ldrb	r3, [r7, #7]
   81000:	2b09      	cmp	r3, #9
   81002:	d919      	bls.n	81038 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   81004:	79fa      	ldrb	r2, [r7, #7]
   81006:	4b10      	ldr	r3, [pc, #64]	; (81048 <convert_to_bcd+0x60>)
   81008:	fba3 1302 	umull	r1, r3, r3, r2
   8100c:	08d9      	lsrs	r1, r3, #3
   8100e:	460b      	mov	r3, r1
   81010:	009b      	lsls	r3, r3, #2
   81012:	440b      	add	r3, r1
   81014:	005b      	lsls	r3, r3, #1
   81016:	1ad3      	subs	r3, r2, r3
   81018:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   8101a:	79fa      	ldrb	r2, [r7, #7]
   8101c:	4b0a      	ldr	r3, [pc, #40]	; (81048 <convert_to_bcd+0x60>)
   8101e:	fba3 1302 	umull	r1, r3, r3, r2
   81022:	08db      	lsrs	r3, r3, #3
   81024:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   81026:	7bfb      	ldrb	r3, [r7, #15]
   81028:	011b      	lsls	r3, r3, #4
   8102a:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   8102c:	7bfa      	ldrb	r2, [r7, #15]
   8102e:	7bbb      	ldrb	r3, [r7, #14]
   81030:	4313      	orrs	r3, r2
   81032:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   81034:	7b7b      	ldrb	r3, [r7, #13]
   81036:	e000      	b.n	8103a <convert_to_bcd+0x52>
	}
	else
		return temp;
   81038:	79fb      	ldrb	r3, [r7, #7]
}
   8103a:	4618      	mov	r0, r3
   8103c:	3714      	adds	r7, #20
   8103e:	46bd      	mov	sp, r7
   81040:	f85d 7b04 	ldr.w	r7, [sp], #4
   81044:	4770      	bx	lr
   81046:	bf00      	nop
   81048:	cccccccd 	.word	0xcccccccd

0008104c <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   8104c:	b5b0      	push	{r4, r5, r7, lr}
   8104e:	b086      	sub	sp, #24
   81050:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   81052:	4b13      	ldr	r3, [pc, #76]	; (810a0 <configure_usart+0x54>)
   81054:	463c      	mov	r4, r7
   81056:	461d      	mov	r5, r3
   81058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8105a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   8105c:	e895 0003 	ldmia.w	r5, {r0, r1}
   81060:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   81064:	2011      	movs	r0, #17
   81066:	4b0f      	ldr	r3, [pc, #60]	; (810a4 <configure_usart+0x58>)
   81068:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   8106a:	4b0f      	ldr	r3, [pc, #60]	; (810a8 <configure_usart+0x5c>)
   8106c:	4798      	blx	r3
   8106e:	4603      	mov	r3, r0
   81070:	463a      	mov	r2, r7
   81072:	480e      	ldr	r0, [pc, #56]	; (810ac <configure_usart+0x60>)
   81074:	4611      	mov	r1, r2
   81076:	461a      	mov	r2, r3
   81078:	4b0d      	ldr	r3, [pc, #52]	; (810b0 <configure_usart+0x64>)
   8107a:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   8107c:	480b      	ldr	r0, [pc, #44]	; (810ac <configure_usart+0x60>)
   8107e:	f04f 31ff 	mov.w	r1, #4294967295
   81082:	4b0c      	ldr	r3, [pc, #48]	; (810b4 <configure_usart+0x68>)
   81084:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   81086:	4809      	ldr	r0, [pc, #36]	; (810ac <configure_usart+0x60>)
   81088:	4b0b      	ldr	r3, [pc, #44]	; (810b8 <configure_usart+0x6c>)
   8108a:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   8108c:	4807      	ldr	r0, [pc, #28]	; (810ac <configure_usart+0x60>)
   8108e:	4b0b      	ldr	r3, [pc, #44]	; (810bc <configure_usart+0x70>)
   81090:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   81092:	2011      	movs	r0, #17
   81094:	4b0a      	ldr	r3, [pc, #40]	; (810c0 <configure_usart+0x74>)
   81096:	4798      	blx	r3
}
   81098:	3718      	adds	r7, #24
   8109a:	46bd      	mov	sp, r7
   8109c:	bdb0      	pop	{r4, r5, r7, pc}
   8109e:	bf00      	nop
   810a0:	00086a00 	.word	0x00086a00
   810a4:	00080b41 	.word	0x00080b41
   810a8:	00080b2d 	.word	0x00080b2d
   810ac:	40098000 	.word	0x40098000
   810b0:	0008266d 	.word	0x0008266d
   810b4:	0008276d 	.word	0x0008276d
   810b8:	000826f1 	.word	0x000826f1
   810bc:	00082721 	.word	0x00082721
   810c0:	00080a6d 	.word	0x00080a6d

000810c4 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   810c4:	b580      	push	{r7, lr}
   810c6:	b084      	sub	sp, #16
   810c8:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   810ca:	2300      	movs	r3, #0
   810cc:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   810ce:	2300      	movs	r3, #0
   810d0:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   810d2:	4b1a      	ldr	r3, [pc, #104]	; (8113c <usart_initialize+0x78>)
   810d4:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   810d6:	4b1a      	ldr	r3, [pc, #104]	; (81140 <usart_initialize+0x7c>)
   810d8:	2200      	movs	r2, #0
   810da:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   810dc:	2300      	movs	r3, #0
   810de:	73fb      	strb	r3, [r7, #15]
   810e0:	e006      	b.n	810f0 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   810e2:	7bfb      	ldrb	r3, [r7, #15]
   810e4:	4a17      	ldr	r2, [pc, #92]	; (81144 <usart_initialize+0x80>)
   810e6:	2100      	movs	r1, #0
   810e8:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   810ea:	7bfb      	ldrb	r3, [r7, #15]
   810ec:	3301      	adds	r3, #1
   810ee:	73fb      	strb	r3, [r7, #15]
   810f0:	7bfb      	ldrb	r3, [r7, #15]
   810f2:	2b09      	cmp	r3, #9
   810f4:	d9f5      	bls.n	810e2 <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   810f6:	4814      	ldr	r0, [pc, #80]	; (81148 <usart_initialize+0x84>)
   810f8:	2101      	movs	r1, #1
   810fa:	4b14      	ldr	r3, [pc, #80]	; (8114c <usart_initialize+0x88>)
   810fc:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   810fe:	4812      	ldr	r0, [pc, #72]	; (81148 <usart_initialize+0x84>)
   81100:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81104:	4b12      	ldr	r3, [pc, #72]	; (81150 <usart_initialize+0x8c>)
   81106:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   81108:	4b12      	ldr	r3, [pc, #72]	; (81154 <usart_initialize+0x90>)
   8110a:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   8110c:	e00d      	b.n	8112a <usart_initialize+0x66>
	{
		character = *message_array;
   8110e:	68bb      	ldr	r3, [r7, #8]
   81110:	781b      	ldrb	r3, [r3, #0]
   81112:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   81114:	bf00      	nop
   81116:	480c      	ldr	r0, [pc, #48]	; (81148 <usart_initialize+0x84>)
   81118:	6879      	ldr	r1, [r7, #4]
   8111a:	4b0f      	ldr	r3, [pc, #60]	; (81158 <usart_initialize+0x94>)
   8111c:	4798      	blx	r3
   8111e:	4603      	mov	r3, r0
   81120:	2b00      	cmp	r3, #0
   81122:	d1f8      	bne.n	81116 <usart_initialize+0x52>
			
		message_array++;
   81124:	68bb      	ldr	r3, [r7, #8]
   81126:	3301      	adds	r3, #1
   81128:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   8112a:	68bb      	ldr	r3, [r7, #8]
   8112c:	781b      	ldrb	r3, [r3, #0]
   8112e:	2b00      	cmp	r3, #0
   81130:	d1ed      	bne.n	8110e <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   81132:	bf00      	nop
}
   81134:	3710      	adds	r7, #16
   81136:	46bd      	mov	sp, r7
   81138:	bd80      	pop	{r7, pc}
   8113a:	bf00      	nop
   8113c:	0008104d 	.word	0x0008104d
   81140:	20070460 	.word	0x20070460
   81144:	20070464 	.word	0x20070464
   81148:	40098000 	.word	0x40098000
   8114c:	00082751 	.word	0x00082751
   81150:	0008276d 	.word	0x0008276d
   81154:	00086a18 	.word	0x00086a18
   81158:	000827d9 	.word	0x000827d9

0008115c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   8115c:	b580      	push	{r7, lr}
   8115e:	b082      	sub	sp, #8
   81160:	af00      	add	r7, sp, #0
   81162:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81164:	687b      	ldr	r3, [r7, #4]
   81166:	2b07      	cmp	r3, #7
   81168:	d82e      	bhi.n	811c8 <osc_enable+0x6c>
   8116a:	a201      	add	r2, pc, #4	; (adr r2, 81170 <osc_enable+0x14>)
   8116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81170:	000811c9 	.word	0x000811c9
   81174:	00081191 	.word	0x00081191
   81178:	00081199 	.word	0x00081199
   8117c:	000811a1 	.word	0x000811a1
   81180:	000811a9 	.word	0x000811a9
   81184:	000811b1 	.word	0x000811b1
   81188:	000811b9 	.word	0x000811b9
   8118c:	000811c1 	.word	0x000811c1
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81190:	2000      	movs	r0, #0
   81192:	4b0f      	ldr	r3, [pc, #60]	; (811d0 <osc_enable+0x74>)
   81194:	4798      	blx	r3
		break;
   81196:	e017      	b.n	811c8 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   81198:	2001      	movs	r0, #1
   8119a:	4b0d      	ldr	r3, [pc, #52]	; (811d0 <osc_enable+0x74>)
   8119c:	4798      	blx	r3
		break;
   8119e:	e013      	b.n	811c8 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   811a0:	2000      	movs	r0, #0
   811a2:	4b0c      	ldr	r3, [pc, #48]	; (811d4 <osc_enable+0x78>)
   811a4:	4798      	blx	r3
		break;
   811a6:	e00f      	b.n	811c8 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   811a8:	2010      	movs	r0, #16
   811aa:	4b0a      	ldr	r3, [pc, #40]	; (811d4 <osc_enable+0x78>)
   811ac:	4798      	blx	r3
		break;
   811ae:	e00b      	b.n	811c8 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   811b0:	2020      	movs	r0, #32
   811b2:	4b08      	ldr	r3, [pc, #32]	; (811d4 <osc_enable+0x78>)
   811b4:	4798      	blx	r3
		break;
   811b6:	e007      	b.n	811c8 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   811b8:	2000      	movs	r0, #0
   811ba:	4b07      	ldr	r3, [pc, #28]	; (811d8 <osc_enable+0x7c>)
   811bc:	4798      	blx	r3
		break;
   811be:	e003      	b.n	811c8 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   811c0:	2001      	movs	r0, #1
   811c2:	4b05      	ldr	r3, [pc, #20]	; (811d8 <osc_enable+0x7c>)
   811c4:	4798      	blx	r3
		break;
   811c6:	bf00      	nop
	}
}
   811c8:	3708      	adds	r7, #8
   811ca:	46bd      	mov	sp, r7
   811cc:	bd80      	pop	{r7, pc}
   811ce:	bf00      	nop
   811d0:	00082321 	.word	0x00082321
   811d4:	00082391 	.word	0x00082391
   811d8:	00082431 	.word	0x00082431

000811dc <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   811dc:	b580      	push	{r7, lr}
   811de:	b082      	sub	sp, #8
   811e0:	af00      	add	r7, sp, #0
   811e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   811e4:	687b      	ldr	r3, [r7, #4]
   811e6:	2b07      	cmp	r3, #7
   811e8:	d826      	bhi.n	81238 <osc_is_ready+0x5c>
   811ea:	a201      	add	r2, pc, #4	; (adr r2, 811f0 <osc_is_ready+0x14>)
   811ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   811f0:	00081211 	.word	0x00081211
   811f4:	00081215 	.word	0x00081215
   811f8:	00081215 	.word	0x00081215
   811fc:	00081227 	.word	0x00081227
   81200:	00081227 	.word	0x00081227
   81204:	00081227 	.word	0x00081227
   81208:	00081227 	.word	0x00081227
   8120c:	00081227 	.word	0x00081227
	case OSC_SLCK_32K_RC:
		return 1;
   81210:	2301      	movs	r3, #1
   81212:	e012      	b.n	8123a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   81214:	4b0b      	ldr	r3, [pc, #44]	; (81244 <osc_is_ready+0x68>)
   81216:	4798      	blx	r3
   81218:	4603      	mov	r3, r0
   8121a:	2b00      	cmp	r3, #0
   8121c:	bf0c      	ite	eq
   8121e:	2300      	moveq	r3, #0
   81220:	2301      	movne	r3, #1
   81222:	b2db      	uxtb	r3, r3
   81224:	e009      	b.n	8123a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81226:	4b08      	ldr	r3, [pc, #32]	; (81248 <osc_is_ready+0x6c>)
   81228:	4798      	blx	r3
   8122a:	4603      	mov	r3, r0
   8122c:	2b00      	cmp	r3, #0
   8122e:	bf0c      	ite	eq
   81230:	2300      	moveq	r3, #0
   81232:	2301      	movne	r3, #1
   81234:	b2db      	uxtb	r3, r3
   81236:	e000      	b.n	8123a <osc_is_ready+0x5e>
	}

	return 0;
   81238:	2300      	movs	r3, #0
}
   8123a:	4618      	mov	r0, r3
   8123c:	3708      	adds	r7, #8
   8123e:	46bd      	mov	sp, r7
   81240:	bd80      	pop	{r7, pc}
   81242:	bf00      	nop
   81244:	0008235d 	.word	0x0008235d
   81248:	0008249d 	.word	0x0008249d

0008124c <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8124c:	b480      	push	{r7}
   8124e:	b083      	sub	sp, #12
   81250:	af00      	add	r7, sp, #0
   81252:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81254:	687b      	ldr	r3, [r7, #4]
   81256:	2b07      	cmp	r3, #7
   81258:	d825      	bhi.n	812a6 <osc_get_rate+0x5a>
   8125a:	a201      	add	r2, pc, #4	; (adr r2, 81260 <osc_get_rate+0x14>)
   8125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81260:	00081281 	.word	0x00081281
   81264:	00081287 	.word	0x00081287
   81268:	0008128d 	.word	0x0008128d
   8126c:	00081293 	.word	0x00081293
   81270:	00081297 	.word	0x00081297
   81274:	0008129b 	.word	0x0008129b
   81278:	0008129f 	.word	0x0008129f
   8127c:	000812a3 	.word	0x000812a3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81280:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81284:	e010      	b.n	812a8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8128a:	e00d      	b.n	812a8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8128c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81290:	e00a      	b.n	812a8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81292:	4b08      	ldr	r3, [pc, #32]	; (812b4 <osc_get_rate+0x68>)
   81294:	e008      	b.n	812a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81296:	4b08      	ldr	r3, [pc, #32]	; (812b8 <osc_get_rate+0x6c>)
   81298:	e006      	b.n	812a8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8129a:	4b08      	ldr	r3, [pc, #32]	; (812bc <osc_get_rate+0x70>)
   8129c:	e004      	b.n	812a8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8129e:	4b07      	ldr	r3, [pc, #28]	; (812bc <osc_get_rate+0x70>)
   812a0:	e002      	b.n	812a8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   812a2:	4b06      	ldr	r3, [pc, #24]	; (812bc <osc_get_rate+0x70>)
   812a4:	e000      	b.n	812a8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   812a6:	2300      	movs	r3, #0
}
   812a8:	4618      	mov	r0, r3
   812aa:	370c      	adds	r7, #12
   812ac:	46bd      	mov	sp, r7
   812ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   812b2:	4770      	bx	lr
   812b4:	003d0900 	.word	0x003d0900
   812b8:	007a1200 	.word	0x007a1200
   812bc:	00b71b00 	.word	0x00b71b00

000812c0 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   812c0:	b580      	push	{r7, lr}
   812c2:	b082      	sub	sp, #8
   812c4:	af00      	add	r7, sp, #0
   812c6:	4603      	mov	r3, r0
   812c8:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   812ca:	bf00      	nop
   812cc:	79fb      	ldrb	r3, [r7, #7]
   812ce:	4618      	mov	r0, r3
   812d0:	4b05      	ldr	r3, [pc, #20]	; (812e8 <osc_wait_ready+0x28>)
   812d2:	4798      	blx	r3
   812d4:	4603      	mov	r3, r0
   812d6:	f083 0301 	eor.w	r3, r3, #1
   812da:	b2db      	uxtb	r3, r3
   812dc:	2b00      	cmp	r3, #0
   812de:	d1f5      	bne.n	812cc <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   812e0:	3708      	adds	r7, #8
   812e2:	46bd      	mov	sp, r7
   812e4:	bd80      	pop	{r7, pc}
   812e6:	bf00      	nop
   812e8:	000811dd 	.word	0x000811dd

000812ec <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   812ec:	b580      	push	{r7, lr}
   812ee:	b086      	sub	sp, #24
   812f0:	af00      	add	r7, sp, #0
   812f2:	60f8      	str	r0, [r7, #12]
   812f4:	607a      	str	r2, [r7, #4]
   812f6:	603b      	str	r3, [r7, #0]
   812f8:	460b      	mov	r3, r1
   812fa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   812fc:	687b      	ldr	r3, [r7, #4]
   812fe:	2b00      	cmp	r3, #0
   81300:	d107      	bne.n	81312 <pll_config_init+0x26>
   81302:	683b      	ldr	r3, [r7, #0]
   81304:	2b00      	cmp	r3, #0
   81306:	d104      	bne.n	81312 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81308:	68fb      	ldr	r3, [r7, #12]
   8130a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8130e:	601a      	str	r2, [r3, #0]
   81310:	e019      	b.n	81346 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   81312:	7afb      	ldrb	r3, [r7, #11]
   81314:	4618      	mov	r0, r3
   81316:	4b0d      	ldr	r3, [pc, #52]	; (8134c <pll_config_init+0x60>)
   81318:	4798      	blx	r3
   8131a:	4602      	mov	r2, r0
   8131c:	687b      	ldr	r3, [r7, #4]
   8131e:	fbb2 f3f3 	udiv	r3, r2, r3
   81322:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   81324:	697b      	ldr	r3, [r7, #20]
   81326:	683a      	ldr	r2, [r7, #0]
   81328:	fb02 f303 	mul.w	r3, r2, r3
   8132c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8132e:	683b      	ldr	r3, [r7, #0]
   81330:	3b01      	subs	r3, #1
   81332:	041a      	lsls	r2, r3, #16
   81334:	4b06      	ldr	r3, [pc, #24]	; (81350 <pll_config_init+0x64>)
   81336:	4013      	ands	r3, r2
   81338:	687a      	ldr	r2, [r7, #4]
   8133a:	b2d2      	uxtb	r2, r2
   8133c:	4313      	orrs	r3, r2
   8133e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   81342:	68fb      	ldr	r3, [r7, #12]
   81344:	601a      	str	r2, [r3, #0]
	}
}
   81346:	3718      	adds	r7, #24
   81348:	46bd      	mov	sp, r7
   8134a:	bd80      	pop	{r7, pc}
   8134c:	0008124d 	.word	0x0008124d
   81350:	07ff0000 	.word	0x07ff0000

00081354 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   81354:	b580      	push	{r7, lr}
   81356:	b082      	sub	sp, #8
   81358:	af00      	add	r7, sp, #0
   8135a:	6078      	str	r0, [r7, #4]
   8135c:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   8135e:	683b      	ldr	r3, [r7, #0]
   81360:	2b00      	cmp	r3, #0
   81362:	d108      	bne.n	81376 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   81364:	4b08      	ldr	r3, [pc, #32]	; (81388 <pll_enable+0x34>)
   81366:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81368:	4b08      	ldr	r3, [pc, #32]	; (8138c <pll_enable+0x38>)
   8136a:	687a      	ldr	r2, [r7, #4]
   8136c:	6812      	ldr	r2, [r2, #0]
   8136e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81372:	629a      	str	r2, [r3, #40]	; 0x28
   81374:	e005      	b.n	81382 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   81376:	4b05      	ldr	r3, [pc, #20]	; (8138c <pll_enable+0x38>)
   81378:	687a      	ldr	r2, [r7, #4]
   8137a:	6812      	ldr	r2, [r2, #0]
   8137c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   81380:	61da      	str	r2, [r3, #28]
	}
}
   81382:	3708      	adds	r7, #8
   81384:	46bd      	mov	sp, r7
   81386:	bd80      	pop	{r7, pc}
   81388:	000824b9 	.word	0x000824b9
   8138c:	400e0600 	.word	0x400e0600

00081390 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   81390:	b580      	push	{r7, lr}
   81392:	b082      	sub	sp, #8
   81394:	af00      	add	r7, sp, #0
   81396:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   81398:	687b      	ldr	r3, [r7, #4]
   8139a:	2b00      	cmp	r3, #0
   8139c:	d103      	bne.n	813a6 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8139e:	4b05      	ldr	r3, [pc, #20]	; (813b4 <pll_is_locked+0x24>)
   813a0:	4798      	blx	r3
   813a2:	4603      	mov	r3, r0
   813a4:	e002      	b.n	813ac <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   813a6:	4b04      	ldr	r3, [pc, #16]	; (813b8 <pll_is_locked+0x28>)
   813a8:	4798      	blx	r3
   813aa:	4603      	mov	r3, r0
}
   813ac:	4618      	mov	r0, r3
   813ae:	3708      	adds	r7, #8
   813b0:	46bd      	mov	sp, r7
   813b2:	bd80      	pop	{r7, pc}
   813b4:	000824d1 	.word	0x000824d1
   813b8:	000824ed 	.word	0x000824ed

000813bc <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   813bc:	b580      	push	{r7, lr}
   813be:	b082      	sub	sp, #8
   813c0:	af00      	add	r7, sp, #0
   813c2:	4603      	mov	r3, r0
   813c4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   813c6:	79fb      	ldrb	r3, [r7, #7]
   813c8:	3b03      	subs	r3, #3
   813ca:	2b04      	cmp	r3, #4
   813cc:	d808      	bhi.n	813e0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   813ce:	79fb      	ldrb	r3, [r7, #7]
   813d0:	4618      	mov	r0, r3
   813d2:	4b05      	ldr	r3, [pc, #20]	; (813e8 <pll_enable_source+0x2c>)
   813d4:	4798      	blx	r3
		osc_wait_ready(e_src);
   813d6:	79fb      	ldrb	r3, [r7, #7]
   813d8:	4618      	mov	r0, r3
   813da:	4b04      	ldr	r3, [pc, #16]	; (813ec <pll_enable_source+0x30>)
   813dc:	4798      	blx	r3
		break;
   813de:	e000      	b.n	813e2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   813e0:	bf00      	nop
	}
}
   813e2:	3708      	adds	r7, #8
   813e4:	46bd      	mov	sp, r7
   813e6:	bd80      	pop	{r7, pc}
   813e8:	0008115d 	.word	0x0008115d
   813ec:	000812c1 	.word	0x000812c1

000813f0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   813f0:	b580      	push	{r7, lr}
   813f2:	b082      	sub	sp, #8
   813f4:	af00      	add	r7, sp, #0
   813f6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   813f8:	bf00      	nop
   813fa:	6878      	ldr	r0, [r7, #4]
   813fc:	4b04      	ldr	r3, [pc, #16]	; (81410 <pll_wait_for_lock+0x20>)
   813fe:	4798      	blx	r3
   81400:	4603      	mov	r3, r0
   81402:	2b00      	cmp	r3, #0
   81404:	d0f9      	beq.n	813fa <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   81406:	2300      	movs	r3, #0
}
   81408:	4618      	mov	r0, r3
   8140a:	3708      	adds	r7, #8
   8140c:	46bd      	mov	sp, r7
   8140e:	bd80      	pop	{r7, pc}
   81410:	00081391 	.word	0x00081391

00081414 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81414:	b580      	push	{r7, lr}
   81416:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81418:	2006      	movs	r0, #6
   8141a:	4b04      	ldr	r3, [pc, #16]	; (8142c <sysclk_get_main_hz+0x18>)
   8141c:	4798      	blx	r3
   8141e:	4602      	mov	r2, r0
   81420:	4613      	mov	r3, r2
   81422:	00db      	lsls	r3, r3, #3
   81424:	1a9b      	subs	r3, r3, r2
   81426:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81428:	4618      	mov	r0, r3
   8142a:	bd80      	pop	{r7, pc}
   8142c:	0008124d 	.word	0x0008124d

00081430 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81430:	b580      	push	{r7, lr}
   81432:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81434:	4b02      	ldr	r3, [pc, #8]	; (81440 <sysclk_get_cpu_hz+0x10>)
   81436:	4798      	blx	r3
   81438:	4603      	mov	r3, r0
   8143a:	085b      	lsrs	r3, r3, #1
}
   8143c:	4618      	mov	r0, r3
   8143e:	bd80      	pop	{r7, pc}
   81440:	00081415 	.word	0x00081415

00081444 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81444:	b590      	push	{r4, r7, lr}
   81446:	b083      	sub	sp, #12
   81448:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8144a:	4b10      	ldr	r3, [pc, #64]	; (8148c <sysclk_init+0x48>)
   8144c:	4798      	blx	r3
   8144e:	4603      	mov	r3, r0
   81450:	4618      	mov	r0, r3
   81452:	4b0f      	ldr	r3, [pc, #60]	; (81490 <sysclk_init+0x4c>)
   81454:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   81456:	2006      	movs	r0, #6
   81458:	4b0e      	ldr	r3, [pc, #56]	; (81494 <sysclk_init+0x50>)
   8145a:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8145c:	1d3b      	adds	r3, r7, #4
   8145e:	4618      	mov	r0, r3
   81460:	2106      	movs	r1, #6
   81462:	2201      	movs	r2, #1
   81464:	230e      	movs	r3, #14
   81466:	4c0c      	ldr	r4, [pc, #48]	; (81498 <sysclk_init+0x54>)
   81468:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8146a:	1d3b      	adds	r3, r7, #4
   8146c:	4618      	mov	r0, r3
   8146e:	2100      	movs	r1, #0
   81470:	4b0a      	ldr	r3, [pc, #40]	; (8149c <sysclk_init+0x58>)
   81472:	4798      	blx	r3
		pll_wait_for_lock(0);
   81474:	2000      	movs	r0, #0
   81476:	4b0a      	ldr	r3, [pc, #40]	; (814a0 <sysclk_init+0x5c>)
   81478:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8147a:	2010      	movs	r0, #16
   8147c:	4b09      	ldr	r3, [pc, #36]	; (814a4 <sysclk_init+0x60>)
   8147e:	4798      	blx	r3
		break;
   81480:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81482:	4b09      	ldr	r3, [pc, #36]	; (814a8 <sysclk_init+0x64>)
   81484:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   81486:	370c      	adds	r7, #12
   81488:	46bd      	mov	sp, r7
   8148a:	bd90      	pop	{r4, r7, pc}
   8148c:	00081431 	.word	0x00081431
   81490:	00082b1d 	.word	0x00082b1d
   81494:	000813bd 	.word	0x000813bd
   81498:	000812ed 	.word	0x000812ed
   8149c:	00081355 	.word	0x00081355
   814a0:	000813f1 	.word	0x000813f1
   814a4:	0008229d 	.word	0x0008229d
   814a8:	0008299d 	.word	0x0008299d

000814ac <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   814ac:	b480      	push	{r7}
   814ae:	b083      	sub	sp, #12
   814b0:	af00      	add	r7, sp, #0
   814b2:	4603      	mov	r3, r0
   814b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   814b6:	4b08      	ldr	r3, [pc, #32]	; (814d8 <NVIC_EnableIRQ+0x2c>)
   814b8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   814bc:	0952      	lsrs	r2, r2, #5
   814be:	79f9      	ldrb	r1, [r7, #7]
   814c0:	f001 011f 	and.w	r1, r1, #31
   814c4:	2001      	movs	r0, #1
   814c6:	fa00 f101 	lsl.w	r1, r0, r1
   814ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   814ce:	370c      	adds	r7, #12
   814d0:	46bd      	mov	sp, r7
   814d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   814d6:	4770      	bx	lr
   814d8:	e000e100 	.word	0xe000e100

000814dc <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   814dc:	b480      	push	{r7}
   814de:	b083      	sub	sp, #12
   814e0:	af00      	add	r7, sp, #0
   814e2:	4603      	mov	r3, r0
   814e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   814e6:	4b09      	ldr	r3, [pc, #36]	; (8150c <NVIC_DisableIRQ+0x30>)
   814e8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   814ec:	0952      	lsrs	r2, r2, #5
   814ee:	79f9      	ldrb	r1, [r7, #7]
   814f0:	f001 011f 	and.w	r1, r1, #31
   814f4:	2001      	movs	r0, #1
   814f6:	fa00 f101 	lsl.w	r1, r0, r1
   814fa:	3220      	adds	r2, #32
   814fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   81500:	370c      	adds	r7, #12
   81502:	46bd      	mov	sp, r7
   81504:	f85d 7b04 	ldr.w	r7, [sp], #4
   81508:	4770      	bx	lr
   8150a:	bf00      	nop
   8150c:	e000e100 	.word	0xe000e100

00081510 <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81510:	b480      	push	{r7}
   81512:	b083      	sub	sp, #12
   81514:	af00      	add	r7, sp, #0
   81516:	4603      	mov	r3, r0
   81518:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8151a:	4b09      	ldr	r3, [pc, #36]	; (81540 <NVIC_ClearPendingIRQ+0x30>)
   8151c:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81520:	0952      	lsrs	r2, r2, #5
   81522:	79f9      	ldrb	r1, [r7, #7]
   81524:	f001 011f 	and.w	r1, r1, #31
   81528:	2001      	movs	r0, #1
   8152a:	fa00 f101 	lsl.w	r1, r0, r1
   8152e:	3260      	adds	r2, #96	; 0x60
   81530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   81534:	370c      	adds	r7, #12
   81536:	46bd      	mov	sp, r7
   81538:	f85d 7b04 	ldr.w	r7, [sp], #4
   8153c:	4770      	bx	lr
   8153e:	bf00      	nop
   81540:	e000e100 	.word	0xe000e100

00081544 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81544:	b480      	push	{r7}
   81546:	b083      	sub	sp, #12
   81548:	af00      	add	r7, sp, #0
   8154a:	4603      	mov	r3, r0
   8154c:	6039      	str	r1, [r7, #0]
   8154e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81550:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81554:	2b00      	cmp	r3, #0
   81556:	da0b      	bge.n	81570 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81558:	490d      	ldr	r1, [pc, #52]	; (81590 <NVIC_SetPriority+0x4c>)
   8155a:	79fb      	ldrb	r3, [r7, #7]
   8155c:	f003 030f 	and.w	r3, r3, #15
   81560:	3b04      	subs	r3, #4
   81562:	683a      	ldr	r2, [r7, #0]
   81564:	b2d2      	uxtb	r2, r2
   81566:	0112      	lsls	r2, r2, #4
   81568:	b2d2      	uxtb	r2, r2
   8156a:	440b      	add	r3, r1
   8156c:	761a      	strb	r2, [r3, #24]
   8156e:	e009      	b.n	81584 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81570:	4908      	ldr	r1, [pc, #32]	; (81594 <NVIC_SetPriority+0x50>)
   81572:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81576:	683a      	ldr	r2, [r7, #0]
   81578:	b2d2      	uxtb	r2, r2
   8157a:	0112      	lsls	r2, r2, #4
   8157c:	b2d2      	uxtb	r2, r2
   8157e:	440b      	add	r3, r1
   81580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81584:	370c      	adds	r7, #12
   81586:	46bd      	mov	sp, r7
   81588:	f85d 7b04 	ldr.w	r7, [sp], #4
   8158c:	4770      	bx	lr
   8158e:	bf00      	nop
   81590:	e000ed00 	.word	0xe000ed00
   81594:	e000e100 	.word	0xe000e100

00081598 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   81598:	b590      	push	{r4, r7, lr}
   8159a:	b083      	sub	sp, #12
   8159c:	af00      	add	r7, sp, #0

	#endif

	#ifdef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Configure WDT to trigger an interrupt (or reset). */
	wdt_mode = WDT_MR_WDFIEN |  /* Enable WDT fault interrupt. */
   8159e:	4b1d      	ldr	r3, [pc, #116]	; (81614 <safe_board_init+0x7c>)
   815a0:	607b      	str	r3, [r7, #4]
	WDT_MR_WDRPROC |  /* WDT fault resets processor only. */
	WDT_MR_WDIDLEHLT |
	WDT_MR_WDRSTEN;   /* WDT stops in idle state. */

	wdt_timer = 125;
   815a2:	237d      	movs	r3, #125	; 0x7d
   815a4:	603b      	str	r3, [r7, #0]

	/* Initialize WDT with the given parameters. */
	wdt_init(WDT, wdt_mode, wdt_timer, wdt_timer);
   815a6:	683b      	ldr	r3, [r7, #0]
   815a8:	b29a      	uxth	r2, r3
   815aa:	683b      	ldr	r3, [r7, #0]
   815ac:	b29b      	uxth	r3, r3
   815ae:	481a      	ldr	r0, [pc, #104]	; (81618 <safe_board_init+0x80>)
   815b0:	6879      	ldr	r1, [r7, #4]
   815b2:	4c1a      	ldr	r4, [pc, #104]	; (8161c <safe_board_init+0x84>)
   815b4:	47a0      	blx	r4

	/* Configure and enable WDT interrupt. */
	NVIC_DisableIRQ(WDT_IRQn);
   815b6:	2004      	movs	r0, #4
   815b8:	4b19      	ldr	r3, [pc, #100]	; (81620 <safe_board_init+0x88>)
   815ba:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
   815bc:	2004      	movs	r0, #4
   815be:	4b19      	ldr	r3, [pc, #100]	; (81624 <safe_board_init+0x8c>)
   815c0:	4798      	blx	r3
	NVIC_SetPriority(WDT_IRQn, 0);
   815c2:	2004      	movs	r0, #4
   815c4:	2100      	movs	r1, #0
   815c6:	4b18      	ldr	r3, [pc, #96]	; (81628 <safe_board_init+0x90>)
   815c8:	4798      	blx	r3
	NVIC_EnableIRQ(WDT_IRQn);
   815ca:	2004      	movs	r0, #4
   815cc:	4b17      	ldr	r3, [pc, #92]	; (8162c <safe_board_init+0x94>)
   815ce:	4798      	blx	r3
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   815d0:	2001      	movs	r0, #1
   815d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815d6:	4b16      	ldr	r3, [pc, #88]	; (81630 <safe_board_init+0x98>)
   815d8:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   815da:	2000      	movs	r0, #0
   815dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815e0:	4b13      	ldr	r3, [pc, #76]	; (81630 <safe_board_init+0x98>)
   815e2:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   815e4:	2034      	movs	r0, #52	; 0x34
   815e6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815ea:	4b11      	ldr	r3, [pc, #68]	; (81630 <safe_board_init+0x98>)
   815ec:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   815ee:	2035      	movs	r0, #53	; 0x35
   815f0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   815f4:	4b0e      	ldr	r3, [pc, #56]	; (81630 <safe_board_init+0x98>)
   815f6:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   815f8:	202f      	movs	r0, #47	; 0x2f
   815fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815fe:	4b0c      	ldr	r3, [pc, #48]	; (81630 <safe_board_init+0x98>)
   81600:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   81602:	202e      	movs	r0, #46	; 0x2e
   81604:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81608:	4b09      	ldr	r3, [pc, #36]	; (81630 <safe_board_init+0x98>)
   8160a:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	//gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
	//gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
	#endif
	return;
   8160c:	bf00      	nop
}
   8160e:	370c      	adds	r7, #12
   81610:	46bd      	mov	sp, r7
   81612:	bd90      	pop	{r4, r7, pc}
   81614:	20007000 	.word	0x20007000
   81618:	400e1a50 	.word	0x400e1a50
   8161c:	00082875 	.word	0x00082875
   81620:	000814dd 	.word	0x000814dd
   81624:	00081511 	.word	0x00081511
   81628:	00081545 	.word	0x00081545
   8162c:	000814ad 	.word	0x000814ad
   81630:	00081f7d 	.word	0x00081f7d

00081634 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   81634:	b580      	push	{r7, lr}
   81636:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   81638:	2057      	movs	r0, #87	; 0x57
   8163a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8163e:	4b2e      	ldr	r3, [pc, #184]	; (816f8 <board_init+0xc4>)
   81640:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   81642:	2057      	movs	r0, #87	; 0x57
   81644:	4b2d      	ldr	r3, [pc, #180]	; (816fc <board_init+0xc8>)
   81646:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81648:	203b      	movs	r0, #59	; 0x3b
   8164a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8164e:	4b2a      	ldr	r3, [pc, #168]	; (816f8 <board_init+0xc4>)
   81650:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81652:	2055      	movs	r0, #85	; 0x55
   81654:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81658:	4b27      	ldr	r3, [pc, #156]	; (816f8 <board_init+0xc4>)
   8165a:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8165c:	2056      	movs	r0, #86	; 0x56
   8165e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81662:	4b25      	ldr	r3, [pc, #148]	; (816f8 <board_init+0xc4>)
   81664:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81666:	4826      	ldr	r0, [pc, #152]	; (81700 <board_init+0xcc>)
   81668:	f44f 7140 	mov.w	r1, #768	; 0x300
   8166c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   81670:	4b24      	ldr	r3, [pc, #144]	; (81704 <board_init+0xd0>)
   81672:	4798      	blx	r3
	//gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
//#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   81674:	2019      	movs	r0, #25
   81676:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8167a:	4b1f      	ldr	r3, [pc, #124]	; (816f8 <board_init+0xc4>)
   8167c:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   8167e:	201a      	movs	r0, #26
   81680:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81684:	4b1c      	ldr	r3, [pc, #112]	; (816f8 <board_init+0xc4>)
   81686:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   81688:	201b      	movs	r0, #27
   8168a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8168e:	4b1a      	ldr	r3, [pc, #104]	; (816f8 <board_init+0xc4>)
   81690:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   81692:	201c      	movs	r0, #28
   81694:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81698:	4b17      	ldr	r3, [pc, #92]	; (816f8 <board_init+0xc4>)
   8169a:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS1
#       if defined(CONF_BOARD_SPI0_NPCS1_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS1_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS1_GPIO,
   8169c:	2034      	movs	r0, #52	; 0x34
   8169e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816a2:	4b15      	ldr	r3, [pc, #84]	; (816f8 <board_init+0xc4>)
   816a4:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS2
#       if defined(CONF_BOARD_SPI0_NPCS2_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS2_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS2_GPIO,
   816a6:	2035      	movs	r0, #53	; 0x35
   816a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816ac:	4b12      	ldr	r3, [pc, #72]	; (816f8 <board_init+0xc4>)
   816ae:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS3
#       if defined(CONF_BOARD_SPI0_NPCS3_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS3_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS3_GPIO,
   816b0:	2037      	movs	r0, #55	; 0x37
   816b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816b6:	4b10      	ldr	r3, [pc, #64]	; (816f8 <board_init+0xc4>)
   816b8:	4798      	blx	r3
					SPI0_NPCS3_PA31_FLAGS);
#       endif
#   endif

#	ifdef CONF_SPI_MEM2
		gpio_configure_pin(SPI0_MEM2_HOLD, SPI0_MEM2_HOLD_FLAGS);
   816ba:	2020      	movs	r0, #32
   816bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816c0:	4b0d      	ldr	r3, [pc, #52]	; (816f8 <board_init+0xc4>)
   816c2:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM2_WP, SPI0_MEM2_WP_FLAGS);
   816c4:	201c      	movs	r0, #28
   816c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816ca:	4b0b      	ldr	r3, [pc, #44]	; (816f8 <board_init+0xc4>)
   816cc:	4798      	blx	r3
#	endif

#	ifdef CONF_SPI_MEM1
		gpio_configure_pin(SPI0_MEM1_HOLD, SPI0_MEM1_HOLD_FLAGS);
   816ce:	2015      	movs	r0, #21
   816d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816d4:	4b08      	ldr	r3, [pc, #32]	; (816f8 <board_init+0xc4>)
   816d6:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM1_WP, SPI0_MEM1_WP_FLAGS);
   816d8:	2033      	movs	r0, #51	; 0x33
   816da:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   816de:	4b06      	ldr	r3, [pc, #24]	; (816f8 <board_init+0xc4>)
   816e0:	4798      	blx	r3

#endif // #ifdef CONF_BOARD_SPI0

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   816e2:	200a      	movs	r0, #10
   816e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816e8:	4b03      	ldr	r3, [pc, #12]	; (816f8 <board_init+0xc4>)
   816ea:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   816ec:	200b      	movs	r0, #11
   816ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816f2:	4b01      	ldr	r3, [pc, #4]	; (816f8 <board_init+0xc4>)
   816f4:	4798      	blx	r3
#endif

}
   816f6:	bd80      	pop	{r7, pc}
   816f8:	00081f7d 	.word	0x00081f7d
   816fc:	00081eb5 	.word	0x00081eb5
   81700:	400e0e00 	.word	0x400e0e00
   81704:	000820b9 	.word	0x000820b9

00081708 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   81708:	b580      	push	{r7, lr}
   8170a:	b08a      	sub	sp, #40	; 0x28
   8170c:	af00      	add	r7, sp, #0
   8170e:	60f8      	str	r0, [r7, #12]
   81710:	60b9      	str	r1, [r7, #8]
   81712:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81714:	687b      	ldr	r3, [r7, #4]
   81716:	f246 12a8 	movw	r2, #25000	; 0x61a8
   8171a:	fb02 f203 	mul.w	r2, r2, r3
   8171e:	68bb      	ldr	r3, [r7, #8]
   81720:	4413      	add	r3, r2
   81722:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   81724:	687b      	ldr	r3, [r7, #4]
   81726:	f246 11a8 	movw	r1, #25000	; 0x61a8
   8172a:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   8172e:	fbb2 f3f3 	udiv	r3, r2, r3
   81732:	2b80      	cmp	r3, #128	; 0x80
   81734:	d901      	bls.n	8173a <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   81736:	2300      	movs	r3, #0
   81738:	e085      	b.n	81846 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   8173a:	68bb      	ldr	r3, [r7, #8]
   8173c:	085a      	lsrs	r2, r3, #1
   8173e:	687b      	ldr	r3, [r7, #4]
   81740:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   81744:	fb01 f303 	mul.w	r3, r1, r3
   81748:	429a      	cmp	r2, r3
   8174a:	d201      	bcs.n	81750 <can_set_baudrate+0x48>
		return 0;
   8174c:	2300      	movs	r3, #0
   8174e:	e07a      	b.n	81846 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   81750:	2308      	movs	r3, #8
   81752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   81756:	f04f 33ff 	mov.w	r3, #4294967295
   8175a:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   8175c:	2308      	movs	r3, #8
   8175e:	77fb      	strb	r3, [r7, #31]
   81760:	e02b      	b.n	817ba <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   81762:	7ffb      	ldrb	r3, [r7, #31]
   81764:	687a      	ldr	r2, [r7, #4]
   81766:	fb02 f303 	mul.w	r3, r2, r3
   8176a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8176e:	fb02 f303 	mul.w	r3, r2, r3
   81772:	68ba      	ldr	r2, [r7, #8]
   81774:	fbb2 f3f3 	udiv	r3, r2, r3
   81778:	2b80      	cmp	r3, #128	; 0x80
   8177a:	d81b      	bhi.n	817b4 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   8177c:	7ffb      	ldrb	r3, [r7, #31]
   8177e:	687a      	ldr	r2, [r7, #4]
   81780:	fb02 f303 	mul.w	r3, r2, r3
   81784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81788:	fb02 f203 	mul.w	r2, r2, r3
   8178c:	68bb      	ldr	r3, [r7, #8]
   8178e:	fbb3 f1f2 	udiv	r1, r3, r2
   81792:	fb02 f201 	mul.w	r2, r2, r1
   81796:	1a9b      	subs	r3, r3, r2
   81798:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   8179a:	69ba      	ldr	r2, [r7, #24]
   8179c:	6a3b      	ldr	r3, [r7, #32]
   8179e:	429a      	cmp	r2, r3
   817a0:	d208      	bcs.n	817b4 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   817a2:	69bb      	ldr	r3, [r7, #24]
   817a4:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   817a6:	7ffb      	ldrb	r3, [r7, #31]
   817a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   817ac:	6a3b      	ldr	r3, [r7, #32]
   817ae:	2b00      	cmp	r3, #0
   817b0:	d100      	bne.n	817b4 <can_set_baudrate+0xac>
					break;
   817b2:	e005      	b.n	817c0 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   817b4:	7ffb      	ldrb	r3, [r7, #31]
   817b6:	3301      	adds	r3, #1
   817b8:	77fb      	strb	r3, [r7, #31]
   817ba:	7ffb      	ldrb	r3, [r7, #31]
   817bc:	2b19      	cmp	r3, #25
   817be:	d9d0      	bls.n	81762 <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   817c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   817c4:	687a      	ldr	r2, [r7, #4]
   817c6:	fb02 f303 	mul.w	r3, r2, r3
   817ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   817ce:	fb02 f303 	mul.w	r3, r2, r3
   817d2:	68ba      	ldr	r2, [r7, #8]
   817d4:	fbb2 f3f3 	udiv	r3, r2, r3
   817d8:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   817da:	7dfb      	ldrb	r3, [r7, #23]
   817dc:	2b01      	cmp	r3, #1
   817de:	d801      	bhi.n	817e4 <can_set_baudrate+0xdc>
		return 0;
   817e0:	2300      	movs	r3, #0
   817e2:	e030      	b.n	81846 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   817e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   817e8:	f1a3 0208 	sub.w	r2, r3, #8
   817ec:	4613      	mov	r3, r2
   817ee:	005b      	lsls	r3, r3, #1
   817f0:	4413      	add	r3, r2
   817f2:	005b      	lsls	r3, r3, #1
   817f4:	4a16      	ldr	r2, [pc, #88]	; (81850 <can_set_baudrate+0x148>)
   817f6:	4413      	add	r3, r2
   817f8:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   817fa:	68f8      	ldr	r0, [r7, #12]
   817fc:	4b15      	ldr	r3, [pc, #84]	; (81854 <can_set_baudrate+0x14c>)
   817fe:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81800:	693b      	ldr	r3, [r7, #16]
   81802:	78db      	ldrb	r3, [r3, #3]
   81804:	3b01      	subs	r3, #1
   81806:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   8180a:	693b      	ldr	r3, [r7, #16]
   8180c:	789b      	ldrb	r3, [r3, #2]
   8180e:	3b01      	subs	r3, #1
   81810:	011b      	lsls	r3, r3, #4
   81812:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81816:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81818:	693b      	ldr	r3, [r7, #16]
   8181a:	785b      	ldrb	r3, [r3, #1]
   8181c:	3b01      	subs	r3, #1
   8181e:	021b      	lsls	r3, r3, #8
   81820:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81824:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81826:	693b      	ldr	r3, [r7, #16]
   81828:	791b      	ldrb	r3, [r3, #4]
   8182a:	3b01      	subs	r3, #1
   8182c:	031b      	lsls	r3, r3, #12
   8182e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81832:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81834:	7dfb      	ldrb	r3, [r7, #23]
   81836:	3b01      	subs	r3, #1
   81838:	041b      	lsls	r3, r3, #16
   8183a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   8183e:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81840:	68fb      	ldr	r3, [r7, #12]
   81842:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81844:	2301      	movs	r3, #1
}
   81846:	4618      	mov	r0, r3
   81848:	3728      	adds	r7, #40	; 0x28
   8184a:	46bd      	mov	sp, r7
   8184c:	bd80      	pop	{r7, pc}
   8184e:	bf00      	nop
   81850:	00086a38 	.word	0x00086a38
   81854:	00081901 	.word	0x00081901

00081858 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81858:	b580      	push	{r7, lr}
   8185a:	b086      	sub	sp, #24
   8185c:	af00      	add	r7, sp, #0
   8185e:	60f8      	str	r0, [r7, #12]
   81860:	60b9      	str	r1, [r7, #8]
   81862:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   81864:	68f8      	ldr	r0, [r7, #12]
   81866:	68b9      	ldr	r1, [r7, #8]
   81868:	687a      	ldr	r2, [r7, #4]
   8186a:	4b17      	ldr	r3, [pc, #92]	; (818c8 <can_init+0x70>)
   8186c:	4798      	blx	r3
   8186e:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   81870:	697b      	ldr	r3, [r7, #20]
   81872:	2b00      	cmp	r3, #0
   81874:	d101      	bne.n	8187a <can_init+0x22>
		return 0;
   81876:	2300      	movs	r3, #0
   81878:	e021      	b.n	818be <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   8187a:	68f8      	ldr	r0, [r7, #12]
   8187c:	4b13      	ldr	r3, [pc, #76]	; (818cc <can_init+0x74>)
   8187e:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   81880:	68f8      	ldr	r0, [r7, #12]
   81882:	4b13      	ldr	r3, [pc, #76]	; (818d0 <can_init+0x78>)
   81884:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   81886:	2300      	movs	r3, #0
   81888:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   8188a:	2300      	movs	r3, #0
   8188c:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8188e:	e006      	b.n	8189e <can_init+0x46>
		ul_flag = can_get_status(p_can);
   81890:	68f8      	ldr	r0, [r7, #12]
   81892:	4b10      	ldr	r3, [pc, #64]	; (818d4 <can_init+0x7c>)
   81894:	4798      	blx	r3
   81896:	6178      	str	r0, [r7, #20]
		ul_tick++;
   81898:	693b      	ldr	r3, [r7, #16]
   8189a:	3301      	adds	r3, #1
   8189c:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8189e:	697b      	ldr	r3, [r7, #20]
   818a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   818a4:	2b00      	cmp	r3, #0
   818a6:	d103      	bne.n	818b0 <can_init+0x58>
   818a8:	693a      	ldr	r2, [r7, #16]
   818aa:	4b0b      	ldr	r3, [pc, #44]	; (818d8 <can_init+0x80>)
   818ac:	429a      	cmp	r2, r3
   818ae:	d9ef      	bls.n	81890 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   818b0:	693a      	ldr	r2, [r7, #16]
   818b2:	4b0a      	ldr	r3, [pc, #40]	; (818dc <can_init+0x84>)
   818b4:	429a      	cmp	r2, r3
   818b6:	d101      	bne.n	818bc <can_init+0x64>
		return 0;
   818b8:	2300      	movs	r3, #0
   818ba:	e000      	b.n	818be <can_init+0x66>
	} else {
		return 1;
   818bc:	2301      	movs	r3, #1
	}
}
   818be:	4618      	mov	r0, r3
   818c0:	3718      	adds	r7, #24
   818c2:	46bd      	mov	sp, r7
   818c4:	bd80      	pop	{r7, pc}
   818c6:	bf00      	nop
   818c8:	00081709 	.word	0x00081709
   818cc:	00081c99 	.word	0x00081c99
   818d0:	000818e1 	.word	0x000818e1
   818d4:	00081959 	.word	0x00081959
   818d8:	0001869f 	.word	0x0001869f
   818dc:	000186a0 	.word	0x000186a0

000818e0 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   818e0:	b480      	push	{r7}
   818e2:	b083      	sub	sp, #12
   818e4:	af00      	add	r7, sp, #0
   818e6:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   818e8:	687b      	ldr	r3, [r7, #4]
   818ea:	681b      	ldr	r3, [r3, #0]
   818ec:	f043 0201 	orr.w	r2, r3, #1
   818f0:	687b      	ldr	r3, [r7, #4]
   818f2:	601a      	str	r2, [r3, #0]
}
   818f4:	370c      	adds	r7, #12
   818f6:	46bd      	mov	sp, r7
   818f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   818fc:	4770      	bx	lr
   818fe:	bf00      	nop

00081900 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81900:	b480      	push	{r7}
   81902:	b083      	sub	sp, #12
   81904:	af00      	add	r7, sp, #0
   81906:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81908:	687b      	ldr	r3, [r7, #4]
   8190a:	681b      	ldr	r3, [r3, #0]
   8190c:	f023 0201 	bic.w	r2, r3, #1
   81910:	687b      	ldr	r3, [r7, #4]
   81912:	601a      	str	r2, [r3, #0]
}
   81914:	370c      	adds	r7, #12
   81916:	46bd      	mov	sp, r7
   81918:	f85d 7b04 	ldr.w	r7, [sp], #4
   8191c:	4770      	bx	lr
   8191e:	bf00      	nop

00081920 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81920:	b480      	push	{r7}
   81922:	b083      	sub	sp, #12
   81924:	af00      	add	r7, sp, #0
   81926:	6078      	str	r0, [r7, #4]
   81928:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   8192a:	687b      	ldr	r3, [r7, #4]
   8192c:	683a      	ldr	r2, [r7, #0]
   8192e:	605a      	str	r2, [r3, #4]
}
   81930:	370c      	adds	r7, #12
   81932:	46bd      	mov	sp, r7
   81934:	f85d 7b04 	ldr.w	r7, [sp], #4
   81938:	4770      	bx	lr
   8193a:	bf00      	nop

0008193c <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   8193c:	b480      	push	{r7}
   8193e:	b083      	sub	sp, #12
   81940:	af00      	add	r7, sp, #0
   81942:	6078      	str	r0, [r7, #4]
   81944:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81946:	687b      	ldr	r3, [r7, #4]
   81948:	683a      	ldr	r2, [r7, #0]
   8194a:	609a      	str	r2, [r3, #8]
}
   8194c:	370c      	adds	r7, #12
   8194e:	46bd      	mov	sp, r7
   81950:	f85d 7b04 	ldr.w	r7, [sp], #4
   81954:	4770      	bx	lr
   81956:	bf00      	nop

00081958 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81958:	b480      	push	{r7}
   8195a:	b083      	sub	sp, #12
   8195c:	af00      	add	r7, sp, #0
   8195e:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   81960:	687b      	ldr	r3, [r7, #4]
   81962:	691b      	ldr	r3, [r3, #16]
}
   81964:	4618      	mov	r0, r3
   81966:	370c      	adds	r7, #12
   81968:	46bd      	mov	sp, r7
   8196a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8196e:	4770      	bx	lr

00081970 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   81970:	b480      	push	{r7}
   81972:	b085      	sub	sp, #20
   81974:	af00      	add	r7, sp, #0
   81976:	6078      	str	r0, [r7, #4]
   81978:	460b      	mov	r3, r1
   8197a:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   8197c:	687b      	ldr	r3, [r7, #4]
   8197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81980:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81984:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   81986:	78fa      	ldrb	r2, [r7, #3]
   81988:	68fb      	ldr	r3, [r7, #12]
   8198a:	431a      	orrs	r2, r3
   8198c:	687b      	ldr	r3, [r7, #4]
   8198e:	625a      	str	r2, [r3, #36]	; 0x24
}
   81990:	3714      	adds	r7, #20
   81992:	46bd      	mov	sp, r7
   81994:	f85d 7b04 	ldr.w	r7, [sp], #4
   81998:	4770      	bx	lr
   8199a:	bf00      	nop

0008199c <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   8199c:	b480      	push	{r7}
   8199e:	b083      	sub	sp, #12
   819a0:	af00      	add	r7, sp, #0
   819a2:	6078      	str	r0, [r7, #4]
   819a4:	460b      	mov	r3, r1
   819a6:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   819a8:	78fb      	ldrb	r3, [r7, #3]
   819aa:	687a      	ldr	r2, [r7, #4]
   819ac:	015b      	lsls	r3, r3, #5
   819ae:	4413      	add	r3, r2
   819b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   819b4:	681b      	ldr	r3, [r3, #0]
}
   819b6:	4618      	mov	r0, r3
   819b8:	370c      	adds	r7, #12
   819ba:	46bd      	mov	sp, r7
   819bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   819c0:	4770      	bx	lr
   819c2:	bf00      	nop

000819c4 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   819c4:	b480      	push	{r7}
   819c6:	b085      	sub	sp, #20
   819c8:	af00      	add	r7, sp, #0
   819ca:	6078      	str	r0, [r7, #4]
   819cc:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   819ce:	683b      	ldr	r3, [r7, #0]
   819d0:	681b      	ldr	r3, [r3, #0]
   819d2:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   819d4:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   819d6:	683a      	ldr	r2, [r7, #0]
   819d8:	7992      	ldrb	r2, [r2, #6]
   819da:	0412      	lsls	r2, r2, #16
   819dc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   819e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   819e4:	6879      	ldr	r1, [r7, #4]
   819e6:	015b      	lsls	r3, r3, #5
   819e8:	440b      	add	r3, r1
   819ea:	f503 7306 	add.w	r3, r3, #536	; 0x218
   819ee:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   819f0:	3714      	adds	r7, #20
   819f2:	46bd      	mov	sp, r7
   819f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   819f8:	4770      	bx	lr
   819fa:	bf00      	nop

000819fc <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   819fc:	b480      	push	{r7}
   819fe:	b085      	sub	sp, #20
   81a00:	af00      	add	r7, sp, #0
   81a02:	6078      	str	r0, [r7, #4]
   81a04:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81a06:	683b      	ldr	r3, [r7, #0]
   81a08:	681b      	ldr	r3, [r3, #0]
   81a0a:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81a0c:	683b      	ldr	r3, [r7, #0]
   81a0e:	791b      	ldrb	r3, [r3, #4]
   81a10:	2b00      	cmp	r3, #0
   81a12:	d12e      	bne.n	81a72 <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81a14:	7bfb      	ldrb	r3, [r7, #15]
   81a16:	687a      	ldr	r2, [r7, #4]
   81a18:	3310      	adds	r3, #16
   81a1a:	015b      	lsls	r3, r3, #5
   81a1c:	4413      	add	r3, r2
   81a1e:	2200      	movs	r2, #0
   81a20:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   81a22:	7bfb      	ldrb	r3, [r7, #15]
   81a24:	687a      	ldr	r2, [r7, #4]
   81a26:	3310      	adds	r3, #16
   81a28:	015b      	lsls	r3, r3, #5
   81a2a:	4413      	add	r3, r2
   81a2c:	2200      	movs	r2, #0
   81a2e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81a30:	7bfb      	ldrb	r3, [r7, #15]
   81a32:	687a      	ldr	r2, [r7, #4]
   81a34:	015b      	lsls	r3, r3, #5
   81a36:	4413      	add	r3, r2
   81a38:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81a3c:	2200      	movs	r2, #0
   81a3e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81a40:	7bfb      	ldrb	r3, [r7, #15]
   81a42:	687a      	ldr	r2, [r7, #4]
   81a44:	015b      	lsls	r3, r3, #5
   81a46:	4413      	add	r3, r2
   81a48:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81a4c:	2200      	movs	r2, #0
   81a4e:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81a50:	7bfb      	ldrb	r3, [r7, #15]
   81a52:	687a      	ldr	r2, [r7, #4]
   81a54:	015b      	lsls	r3, r3, #5
   81a56:	4413      	add	r3, r2
   81a58:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81a5c:	2200      	movs	r2, #0
   81a5e:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81a60:	7bfb      	ldrb	r3, [r7, #15]
   81a62:	687a      	ldr	r2, [r7, #4]
   81a64:	015b      	lsls	r3, r3, #5
   81a66:	4413      	add	r3, r2
   81a68:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81a6c:	2200      	movs	r2, #0
   81a6e:	605a      	str	r2, [r3, #4]
		return;
   81a70:	e04e      	b.n	81b10 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a72:	7bfb      	ldrb	r3, [r7, #15]
   81a74:	7bfa      	ldrb	r2, [r7, #15]
   81a76:	6879      	ldr	r1, [r7, #4]
   81a78:	3210      	adds	r2, #16
   81a7a:	0152      	lsls	r2, r2, #5
   81a7c:	440a      	add	r2, r1
   81a7e:	6812      	ldr	r2, [r2, #0]
   81a80:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81a84:	683a      	ldr	r2, [r7, #0]
   81a86:	79d2      	ldrb	r2, [r2, #7]
   81a88:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   81a8a:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81a8c:	6879      	ldr	r1, [r7, #4]
   81a8e:	3310      	adds	r3, #16
   81a90:	015b      	lsls	r3, r3, #5
   81a92:	440b      	add	r3, r1
   81a94:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81a96:	683b      	ldr	r3, [r7, #0]
   81a98:	795b      	ldrb	r3, [r3, #5]
   81a9a:	2b00      	cmp	r3, #0
   81a9c:	d015      	beq.n	81aca <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   81a9e:	7bfb      	ldrb	r3, [r7, #15]
   81aa0:	683a      	ldr	r2, [r7, #0]
   81aa2:	68d2      	ldr	r2, [r2, #12]
   81aa4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81aa8:	6879      	ldr	r1, [r7, #4]
   81aaa:	3310      	adds	r3, #16
   81aac:	015b      	lsls	r3, r3, #5
   81aae:	440b      	add	r3, r1
   81ab0:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81ab2:	7bfb      	ldrb	r3, [r7, #15]
   81ab4:	683a      	ldr	r2, [r7, #0]
   81ab6:	6912      	ldr	r2, [r2, #16]
   81ab8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81abc:	6879      	ldr	r1, [r7, #4]
   81abe:	015b      	lsls	r3, r3, #5
   81ac0:	440b      	add	r3, r1
   81ac2:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81ac6:	601a      	str	r2, [r3, #0]
   81ac8:	e010      	b.n	81aec <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81aca:	7bfb      	ldrb	r3, [r7, #15]
   81acc:	683a      	ldr	r2, [r7, #0]
   81ace:	68d2      	ldr	r2, [r2, #12]
   81ad0:	6879      	ldr	r1, [r7, #4]
   81ad2:	3310      	adds	r3, #16
   81ad4:	015b      	lsls	r3, r3, #5
   81ad6:	440b      	add	r3, r1
   81ad8:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81ada:	7bfb      	ldrb	r3, [r7, #15]
   81adc:	683a      	ldr	r2, [r7, #0]
   81ade:	6912      	ldr	r2, [r2, #16]
   81ae0:	6879      	ldr	r1, [r7, #4]
   81ae2:	015b      	lsls	r3, r3, #5
   81ae4:	440b      	add	r3, r1
   81ae6:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81aea:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81aec:	7bfb      	ldrb	r3, [r7, #15]
   81aee:	7bfa      	ldrb	r2, [r7, #15]
   81af0:	6879      	ldr	r1, [r7, #4]
   81af2:	3210      	adds	r2, #16
   81af4:	0152      	lsls	r2, r2, #5
   81af6:	440a      	add	r2, r1
   81af8:	6812      	ldr	r2, [r2, #0]
   81afa:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81afe:	683a      	ldr	r2, [r7, #0]
   81b00:	7912      	ldrb	r2, [r2, #4]
   81b02:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81b04:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81b06:	6879      	ldr	r1, [r7, #4]
   81b08:	3310      	adds	r3, #16
   81b0a:	015b      	lsls	r3, r3, #5
   81b0c:	440b      	add	r3, r1
   81b0e:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81b10:	3714      	adds	r7, #20
   81b12:	46bd      	mov	sp, r7
   81b14:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b18:	4770      	bx	lr
   81b1a:	bf00      	nop

00081b1c <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81b1c:	b580      	push	{r7, lr}
   81b1e:	b086      	sub	sp, #24
   81b20:	af00      	add	r7, sp, #0
   81b22:	6078      	str	r0, [r7, #4]
   81b24:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81b26:	2300      	movs	r3, #0
   81b28:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81b2a:	683b      	ldr	r3, [r7, #0]
   81b2c:	681b      	ldr	r3, [r3, #0]
   81b2e:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81b30:	683b      	ldr	r3, [r7, #0]
   81b32:	689b      	ldr	r3, [r3, #8]
   81b34:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81b36:	68fb      	ldr	r3, [r7, #12]
   81b38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81b3c:	2b00      	cmp	r3, #0
   81b3e:	d006      	beq.n	81b4e <can_mailbox_read+0x32>
   81b40:	68fb      	ldr	r3, [r7, #12]
   81b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81b46:	2b00      	cmp	r3, #0
   81b48:	d001      	beq.n	81b4e <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81b4a:	2302      	movs	r3, #2
   81b4c:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81b4e:	7cfb      	ldrb	r3, [r7, #19]
   81b50:	687a      	ldr	r2, [r7, #4]
   81b52:	015b      	lsls	r3, r3, #5
   81b54:	4413      	add	r3, r2
   81b56:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b5a:	685b      	ldr	r3, [r3, #4]
   81b5c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81b60:	683b      	ldr	r3, [r7, #0]
   81b62:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81b64:	68fb      	ldr	r3, [r7, #12]
   81b66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81b6a:	0c1b      	lsrs	r3, r3, #16
   81b6c:	b2da      	uxtb	r2, r3
   81b6e:	683b      	ldr	r3, [r7, #0]
   81b70:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81b72:	7cfb      	ldrb	r3, [r7, #19]
   81b74:	687a      	ldr	r2, [r7, #4]
   81b76:	015b      	lsls	r3, r3, #5
   81b78:	4413      	add	r3, r2
   81b7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81b7e:	685a      	ldr	r2, [r3, #4]
   81b80:	683b      	ldr	r3, [r7, #0]
   81b82:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81b84:	683b      	ldr	r3, [r7, #0]
   81b86:	799b      	ldrb	r3, [r3, #6]
   81b88:	2b04      	cmp	r3, #4
   81b8a:	d908      	bls.n	81b9e <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81b8c:	7cfb      	ldrb	r3, [r7, #19]
   81b8e:	687a      	ldr	r2, [r7, #4]
   81b90:	015b      	lsls	r3, r3, #5
   81b92:	4413      	add	r3, r2
   81b94:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81b98:	681a      	ldr	r2, [r3, #0]
   81b9a:	683b      	ldr	r3, [r7, #0]
   81b9c:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81b9e:	7cfb      	ldrb	r3, [r7, #19]
   81ba0:	687a      	ldr	r2, [r7, #4]
   81ba2:	015b      	lsls	r3, r3, #5
   81ba4:	4413      	add	r3, r2
   81ba6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81baa:	681a      	ldr	r2, [r3, #0]
   81bac:	683b      	ldr	r3, [r7, #0]
   81bae:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81bb0:	683b      	ldr	r3, [r7, #0]
   81bb2:	689b      	ldr	r3, [r3, #8]
   81bb4:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81bb6:	68fb      	ldr	r3, [r7, #12]
   81bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81bbc:	2b00      	cmp	r3, #0
   81bbe:	d003      	beq.n	81bc8 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81bc0:	697b      	ldr	r3, [r7, #20]
   81bc2:	f043 0304 	orr.w	r3, r3, #4
   81bc6:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81bc8:	6878      	ldr	r0, [r7, #4]
   81bca:	6839      	ldr	r1, [r7, #0]
   81bcc:	4b03      	ldr	r3, [pc, #12]	; (81bdc <can_mailbox_read+0xc0>)
   81bce:	4798      	blx	r3

	return ul_retval;
   81bd0:	697b      	ldr	r3, [r7, #20]
}
   81bd2:	4618      	mov	r0, r3
   81bd4:	3718      	adds	r7, #24
   81bd6:	46bd      	mov	sp, r7
   81bd8:	bd80      	pop	{r7, pc}
   81bda:	bf00      	nop
   81bdc:	000819c5 	.word	0x000819c5

00081be0 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81be0:	b580      	push	{r7, lr}
   81be2:	b084      	sub	sp, #16
   81be4:	af00      	add	r7, sp, #0
   81be6:	6078      	str	r0, [r7, #4]
   81be8:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81bea:	683b      	ldr	r3, [r7, #0]
   81bec:	681b      	ldr	r3, [r3, #0]
   81bee:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   81bf0:	7bfb      	ldrb	r3, [r7, #15]
   81bf2:	6878      	ldr	r0, [r7, #4]
   81bf4:	4619      	mov	r1, r3
   81bf6:	4b27      	ldr	r3, [pc, #156]	; (81c94 <can_mailbox_write+0xb4>)
   81bf8:	4798      	blx	r3
   81bfa:	4602      	mov	r2, r0
   81bfc:	683b      	ldr	r3, [r7, #0]
   81bfe:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81c00:	683b      	ldr	r3, [r7, #0]
   81c02:	689b      	ldr	r3, [r3, #8]
   81c04:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   81c06:	68bb      	ldr	r3, [r7, #8]
   81c08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81c0c:	2b00      	cmp	r3, #0
   81c0e:	d101      	bne.n	81c14 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   81c10:	2301      	movs	r3, #1
   81c12:	e03b      	b.n	81c8c <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   81c14:	683b      	ldr	r3, [r7, #0]
   81c16:	795b      	ldrb	r3, [r3, #5]
   81c18:	2b00      	cmp	r3, #0
   81c1a:	d00b      	beq.n	81c34 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81c1c:	7bfb      	ldrb	r3, [r7, #15]
   81c1e:	683a      	ldr	r2, [r7, #0]
   81c20:	6912      	ldr	r2, [r2, #16]
   81c22:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81c26:	6879      	ldr	r1, [r7, #4]
   81c28:	015b      	lsls	r3, r3, #5
   81c2a:	440b      	add	r3, r1
   81c2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81c30:	601a      	str	r2, [r3, #0]
   81c32:	e008      	b.n	81c46 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81c34:	7bfb      	ldrb	r3, [r7, #15]
   81c36:	683a      	ldr	r2, [r7, #0]
   81c38:	6912      	ldr	r2, [r2, #16]
   81c3a:	6879      	ldr	r1, [r7, #4]
   81c3c:	015b      	lsls	r3, r3, #5
   81c3e:	440b      	add	r3, r1
   81c40:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81c44:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81c46:	7bfb      	ldrb	r3, [r7, #15]
   81c48:	683a      	ldr	r2, [r7, #0]
   81c4a:	6992      	ldr	r2, [r2, #24]
   81c4c:	6879      	ldr	r1, [r7, #4]
   81c4e:	015b      	lsls	r3, r3, #5
   81c50:	440b      	add	r3, r1
   81c52:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81c56:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81c58:	683b      	ldr	r3, [r7, #0]
   81c5a:	799b      	ldrb	r3, [r3, #6]
   81c5c:	2b04      	cmp	r3, #4
   81c5e:	d908      	bls.n	81c72 <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81c60:	7bfb      	ldrb	r3, [r7, #15]
   81c62:	683a      	ldr	r2, [r7, #0]
   81c64:	69d2      	ldr	r2, [r2, #28]
   81c66:	6879      	ldr	r1, [r7, #4]
   81c68:	015b      	lsls	r3, r3, #5
   81c6a:	440b      	add	r3, r1
   81c6c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81c70:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   81c72:	7bfb      	ldrb	r3, [r7, #15]
   81c74:	683a      	ldr	r2, [r7, #0]
   81c76:	7992      	ldrb	r2, [r2, #6]
   81c78:	0412      	lsls	r2, r2, #16
   81c7a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81c7e:	6879      	ldr	r1, [r7, #4]
   81c80:	015b      	lsls	r3, r3, #5
   81c82:	440b      	add	r3, r1
   81c84:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81c88:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   81c8a:	2300      	movs	r3, #0
}
   81c8c:	4618      	mov	r0, r3
   81c8e:	3710      	adds	r7, #16
   81c90:	46bd      	mov	sp, r7
   81c92:	bd80      	pop	{r7, pc}
   81c94:	0008199d 	.word	0x0008199d

00081c98 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81c98:	b580      	push	{r7, lr}
   81c9a:	b08c      	sub	sp, #48	; 0x30
   81c9c:	af00      	add	r7, sp, #0
   81c9e:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81ca0:	2300      	movs	r3, #0
   81ca2:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81ca4:	2300      	movs	r3, #0
   81ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81caa:	e00d      	b.n	81cc8 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   81cac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81cb0:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81cb2:	f107 030c 	add.w	r3, r7, #12
   81cb6:	6878      	ldr	r0, [r7, #4]
   81cb8:	4619      	mov	r1, r3
   81cba:	4b07      	ldr	r3, [pc, #28]	; (81cd8 <can_reset_all_mailbox+0x40>)
   81cbc:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81cc2:	3301      	adds	r3, #1
   81cc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81ccc:	2b07      	cmp	r3, #7
   81cce:	d9ed      	bls.n	81cac <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   81cd0:	3730      	adds	r7, #48	; 0x30
   81cd2:	46bd      	mov	sp, r7
   81cd4:	bd80      	pop	{r7, pc}
   81cd6:	bf00      	nop
   81cd8:	000819fd 	.word	0x000819fd

00081cdc <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   81cdc:	b480      	push	{r7}
   81cde:	b085      	sub	sp, #20
   81ce0:	af00      	add	r7, sp, #0
   81ce2:	60f8      	str	r0, [r7, #12]
   81ce4:	60b9      	str	r1, [r7, #8]
   81ce6:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81ce8:	687b      	ldr	r3, [r7, #4]
   81cea:	2b00      	cmp	r3, #0
   81cec:	d003      	beq.n	81cf6 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81cee:	68fb      	ldr	r3, [r7, #12]
   81cf0:	68ba      	ldr	r2, [r7, #8]
   81cf2:	665a      	str	r2, [r3, #100]	; 0x64
   81cf4:	e002      	b.n	81cfc <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81cf6:	68fb      	ldr	r3, [r7, #12]
   81cf8:	68ba      	ldr	r2, [r7, #8]
   81cfa:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81cfc:	3714      	adds	r7, #20
   81cfe:	46bd      	mov	sp, r7
   81d00:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d04:	4770      	bx	lr
   81d06:	bf00      	nop

00081d08 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81d08:	b480      	push	{r7}
   81d0a:	b087      	sub	sp, #28
   81d0c:	af00      	add	r7, sp, #0
   81d0e:	60f8      	str	r0, [r7, #12]
   81d10:	60b9      	str	r1, [r7, #8]
   81d12:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81d14:	68fb      	ldr	r3, [r7, #12]
   81d16:	687a      	ldr	r2, [r7, #4]
   81d18:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81d1a:	68bb      	ldr	r3, [r7, #8]
   81d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81d20:	d01f      	beq.n	81d62 <pio_set_peripheral+0x5a>
   81d22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81d26:	d805      	bhi.n	81d34 <pio_set_peripheral+0x2c>
   81d28:	2b00      	cmp	r3, #0
   81d2a:	d027      	beq.n	81d7c <pio_set_peripheral+0x74>
   81d2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81d30:	d00a      	beq.n	81d48 <pio_set_peripheral+0x40>
   81d32:	e01f      	b.n	81d74 <pio_set_peripheral+0x6c>
   81d34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81d38:	d020      	beq.n	81d7c <pio_set_peripheral+0x74>
   81d3a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81d3e:	d01d      	beq.n	81d7c <pio_set_peripheral+0x74>
   81d40:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81d44:	d01a      	beq.n	81d7c <pio_set_peripheral+0x74>
   81d46:	e015      	b.n	81d74 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81d48:	68fb      	ldr	r3, [r7, #12]
   81d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81d4c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81d4e:	68fb      	ldr	r3, [r7, #12]
   81d50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81d52:	687b      	ldr	r3, [r7, #4]
   81d54:	43d9      	mvns	r1, r3
   81d56:	697b      	ldr	r3, [r7, #20]
   81d58:	400b      	ands	r3, r1
   81d5a:	401a      	ands	r2, r3
   81d5c:	68fb      	ldr	r3, [r7, #12]
   81d5e:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81d60:	e008      	b.n	81d74 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81d62:	68fb      	ldr	r3, [r7, #12]
   81d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81d66:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81d68:	687a      	ldr	r2, [r7, #4]
   81d6a:	697b      	ldr	r3, [r7, #20]
   81d6c:	431a      	orrs	r2, r3
   81d6e:	68fb      	ldr	r3, [r7, #12]
   81d70:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81d72:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81d74:	68fb      	ldr	r3, [r7, #12]
   81d76:	687a      	ldr	r2, [r7, #4]
   81d78:	605a      	str	r2, [r3, #4]
   81d7a:	e000      	b.n	81d7e <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81d7c:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81d7e:	371c      	adds	r7, #28
   81d80:	46bd      	mov	sp, r7
   81d82:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d86:	4770      	bx	lr

00081d88 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81d88:	b580      	push	{r7, lr}
   81d8a:	b084      	sub	sp, #16
   81d8c:	af00      	add	r7, sp, #0
   81d8e:	60f8      	str	r0, [r7, #12]
   81d90:	60b9      	str	r1, [r7, #8]
   81d92:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81d94:	68f8      	ldr	r0, [r7, #12]
   81d96:	68b9      	ldr	r1, [r7, #8]
   81d98:	4b18      	ldr	r3, [pc, #96]	; (81dfc <pio_set_input+0x74>)
   81d9a:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   81d9c:	687b      	ldr	r3, [r7, #4]
   81d9e:	f003 0301 	and.w	r3, r3, #1
   81da2:	68f8      	ldr	r0, [r7, #12]
   81da4:	68b9      	ldr	r1, [r7, #8]
   81da6:	461a      	mov	r2, r3
   81da8:	4b15      	ldr	r3, [pc, #84]	; (81e00 <pio_set_input+0x78>)
   81daa:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81dac:	687b      	ldr	r3, [r7, #4]
   81dae:	f003 030a 	and.w	r3, r3, #10
   81db2:	2b00      	cmp	r3, #0
   81db4:	d003      	beq.n	81dbe <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   81db6:	68fb      	ldr	r3, [r7, #12]
   81db8:	68ba      	ldr	r2, [r7, #8]
   81dba:	621a      	str	r2, [r3, #32]
   81dbc:	e002      	b.n	81dc4 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81dbe:	68fb      	ldr	r3, [r7, #12]
   81dc0:	68ba      	ldr	r2, [r7, #8]
   81dc2:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81dc4:	687b      	ldr	r3, [r7, #4]
   81dc6:	f003 0302 	and.w	r3, r3, #2
   81dca:	2b00      	cmp	r3, #0
   81dcc:	d004      	beq.n	81dd8 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   81dce:	68fb      	ldr	r3, [r7, #12]
   81dd0:	68ba      	ldr	r2, [r7, #8]
   81dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   81dd6:	e008      	b.n	81dea <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81dd8:	687b      	ldr	r3, [r7, #4]
   81dda:	f003 0308 	and.w	r3, r3, #8
   81dde:	2b00      	cmp	r3, #0
   81de0:	d003      	beq.n	81dea <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   81de2:	68fb      	ldr	r3, [r7, #12]
   81de4:	68ba      	ldr	r2, [r7, #8]
   81de6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81dea:	68fb      	ldr	r3, [r7, #12]
   81dec:	68ba      	ldr	r2, [r7, #8]
   81dee:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   81df0:	68fb      	ldr	r3, [r7, #12]
   81df2:	68ba      	ldr	r2, [r7, #8]
   81df4:	601a      	str	r2, [r3, #0]
}
   81df6:	3710      	adds	r7, #16
   81df8:	46bd      	mov	sp, r7
   81dfa:	bd80      	pop	{r7, pc}
   81dfc:	00081e69 	.word	0x00081e69
   81e00:	00081cdd 	.word	0x00081cdd

00081e04 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81e04:	b580      	push	{r7, lr}
   81e06:	b084      	sub	sp, #16
   81e08:	af00      	add	r7, sp, #0
   81e0a:	60f8      	str	r0, [r7, #12]
   81e0c:	60b9      	str	r1, [r7, #8]
   81e0e:	607a      	str	r2, [r7, #4]
   81e10:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   81e12:	68f8      	ldr	r0, [r7, #12]
   81e14:	68b9      	ldr	r1, [r7, #8]
   81e16:	4b12      	ldr	r3, [pc, #72]	; (81e60 <pio_set_output+0x5c>)
   81e18:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81e1a:	68f8      	ldr	r0, [r7, #12]
   81e1c:	68b9      	ldr	r1, [r7, #8]
   81e1e:	69ba      	ldr	r2, [r7, #24]
   81e20:	4b10      	ldr	r3, [pc, #64]	; (81e64 <pio_set_output+0x60>)
   81e22:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81e24:	683b      	ldr	r3, [r7, #0]
   81e26:	2b00      	cmp	r3, #0
   81e28:	d003      	beq.n	81e32 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81e2a:	68fb      	ldr	r3, [r7, #12]
   81e2c:	68ba      	ldr	r2, [r7, #8]
   81e2e:	651a      	str	r2, [r3, #80]	; 0x50
   81e30:	e002      	b.n	81e38 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81e32:	68fb      	ldr	r3, [r7, #12]
   81e34:	68ba      	ldr	r2, [r7, #8]
   81e36:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81e38:	687b      	ldr	r3, [r7, #4]
   81e3a:	2b00      	cmp	r3, #0
   81e3c:	d003      	beq.n	81e46 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81e3e:	68fb      	ldr	r3, [r7, #12]
   81e40:	68ba      	ldr	r2, [r7, #8]
   81e42:	631a      	str	r2, [r3, #48]	; 0x30
   81e44:	e002      	b.n	81e4c <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81e46:	68fb      	ldr	r3, [r7, #12]
   81e48:	68ba      	ldr	r2, [r7, #8]
   81e4a:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81e4c:	68fb      	ldr	r3, [r7, #12]
   81e4e:	68ba      	ldr	r2, [r7, #8]
   81e50:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81e52:	68fb      	ldr	r3, [r7, #12]
   81e54:	68ba      	ldr	r2, [r7, #8]
   81e56:	601a      	str	r2, [r3, #0]
}
   81e58:	3710      	adds	r7, #16
   81e5a:	46bd      	mov	sp, r7
   81e5c:	bd80      	pop	{r7, pc}
   81e5e:	bf00      	nop
   81e60:	00081e69 	.word	0x00081e69
   81e64:	00081cdd 	.word	0x00081cdd

00081e68 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81e68:	b480      	push	{r7}
   81e6a:	b083      	sub	sp, #12
   81e6c:	af00      	add	r7, sp, #0
   81e6e:	6078      	str	r0, [r7, #4]
   81e70:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81e72:	687b      	ldr	r3, [r7, #4]
   81e74:	683a      	ldr	r2, [r7, #0]
   81e76:	645a      	str	r2, [r3, #68]	; 0x44
}
   81e78:	370c      	adds	r7, #12
   81e7a:	46bd      	mov	sp, r7
   81e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e80:	4770      	bx	lr
   81e82:	bf00      	nop

00081e84 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81e84:	b480      	push	{r7}
   81e86:	b083      	sub	sp, #12
   81e88:	af00      	add	r7, sp, #0
   81e8a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   81e8c:	687b      	ldr	r3, [r7, #4]
   81e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81e90:	4618      	mov	r0, r3
   81e92:	370c      	adds	r7, #12
   81e94:	46bd      	mov	sp, r7
   81e96:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e9a:	4770      	bx	lr

00081e9c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   81e9c:	b480      	push	{r7}
   81e9e:	b083      	sub	sp, #12
   81ea0:	af00      	add	r7, sp, #0
   81ea2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81ea4:	687b      	ldr	r3, [r7, #4]
   81ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81ea8:	4618      	mov	r0, r3
   81eaa:	370c      	adds	r7, #12
   81eac:	46bd      	mov	sp, r7
   81eae:	f85d 7b04 	ldr.w	r7, [sp], #4
   81eb2:	4770      	bx	lr

00081eb4 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81eb4:	b480      	push	{r7}
   81eb6:	b085      	sub	sp, #20
   81eb8:	af00      	add	r7, sp, #0
   81eba:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ebc:	687b      	ldr	r3, [r7, #4]
   81ebe:	095b      	lsrs	r3, r3, #5
   81ec0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ec4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ec8:	025b      	lsls	r3, r3, #9
   81eca:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81ecc:	687b      	ldr	r3, [r7, #4]
   81ece:	f003 031f 	and.w	r3, r3, #31
   81ed2:	2201      	movs	r2, #1
   81ed4:	fa02 f303 	lsl.w	r3, r2, r3
   81ed8:	461a      	mov	r2, r3
   81eda:	68fb      	ldr	r3, [r7, #12]
   81edc:	631a      	str	r2, [r3, #48]	; 0x30
}
   81ede:	3714      	adds	r7, #20
   81ee0:	46bd      	mov	sp, r7
   81ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ee6:	4770      	bx	lr

00081ee8 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81ee8:	b480      	push	{r7}
   81eea:	b085      	sub	sp, #20
   81eec:	af00      	add	r7, sp, #0
   81eee:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ef0:	687b      	ldr	r3, [r7, #4]
   81ef2:	095b      	lsrs	r3, r3, #5
   81ef4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ef8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81efc:	025b      	lsls	r3, r3, #9
   81efe:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81f00:	687b      	ldr	r3, [r7, #4]
   81f02:	f003 031f 	and.w	r3, r3, #31
   81f06:	2201      	movs	r2, #1
   81f08:	fa02 f303 	lsl.w	r3, r2, r3
   81f0c:	461a      	mov	r2, r3
   81f0e:	68fb      	ldr	r3, [r7, #12]
   81f10:	635a      	str	r2, [r3, #52]	; 0x34
}
   81f12:	3714      	adds	r7, #20
   81f14:	46bd      	mov	sp, r7
   81f16:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f1a:	4770      	bx	lr

00081f1c <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81f1c:	b480      	push	{r7}
   81f1e:	b085      	sub	sp, #20
   81f20:	af00      	add	r7, sp, #0
   81f22:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81f24:	687b      	ldr	r3, [r7, #4]
   81f26:	095b      	lsrs	r3, r3, #5
   81f28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f2c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f30:	025b      	lsls	r3, r3, #9
   81f32:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81f34:	68fb      	ldr	r3, [r7, #12]
   81f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81f38:	687b      	ldr	r3, [r7, #4]
   81f3a:	f003 031f 	and.w	r3, r3, #31
   81f3e:	2101      	movs	r1, #1
   81f40:	fa01 f303 	lsl.w	r3, r1, r3
   81f44:	4013      	ands	r3, r2
   81f46:	2b00      	cmp	r3, #0
   81f48:	d009      	beq.n	81f5e <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81f4a:	687b      	ldr	r3, [r7, #4]
   81f4c:	f003 031f 	and.w	r3, r3, #31
   81f50:	2201      	movs	r2, #1
   81f52:	fa02 f303 	lsl.w	r3, r2, r3
   81f56:	461a      	mov	r2, r3
   81f58:	68fb      	ldr	r3, [r7, #12]
   81f5a:	635a      	str	r2, [r3, #52]	; 0x34
   81f5c:	e008      	b.n	81f70 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81f5e:	687b      	ldr	r3, [r7, #4]
   81f60:	f003 031f 	and.w	r3, r3, #31
   81f64:	2201      	movs	r2, #1
   81f66:	fa02 f303 	lsl.w	r3, r2, r3
   81f6a:	461a      	mov	r2, r3
   81f6c:	68fb      	ldr	r3, [r7, #12]
   81f6e:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81f70:	3714      	adds	r7, #20
   81f72:	46bd      	mov	sp, r7
   81f74:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f78:	4770      	bx	lr
   81f7a:	bf00      	nop

00081f7c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81f7c:	b590      	push	{r4, r7, lr}
   81f7e:	b087      	sub	sp, #28
   81f80:	af02      	add	r7, sp, #8
   81f82:	6078      	str	r0, [r7, #4]
   81f84:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81f86:	687b      	ldr	r3, [r7, #4]
   81f88:	095b      	lsrs	r3, r3, #5
   81f8a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f8e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f92:	025b      	lsls	r3, r3, #9
   81f94:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81f96:	683b      	ldr	r3, [r7, #0]
   81f98:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81f9c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81fa0:	d048      	beq.n	82034 <pio_configure_pin+0xb8>
   81fa2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81fa6:	d806      	bhi.n	81fb6 <pio_configure_pin+0x3a>
   81fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81fac:	d00a      	beq.n	81fc4 <pio_configure_pin+0x48>
   81fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81fb2:	d023      	beq.n	81ffc <pio_configure_pin+0x80>
   81fb4:	e070      	b.n	82098 <pio_configure_pin+0x11c>
   81fb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81fba:	d047      	beq.n	8204c <pio_configure_pin+0xd0>
   81fbc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81fc0:	d044      	beq.n	8204c <pio_configure_pin+0xd0>
   81fc2:	e069      	b.n	82098 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81fc4:	687b      	ldr	r3, [r7, #4]
   81fc6:	f003 031f 	and.w	r3, r3, #31
   81fca:	2201      	movs	r2, #1
   81fcc:	fa02 f303 	lsl.w	r3, r2, r3
   81fd0:	68f8      	ldr	r0, [r7, #12]
   81fd2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fd6:	461a      	mov	r2, r3
   81fd8:	4b33      	ldr	r3, [pc, #204]	; (820a8 <pio_configure_pin+0x12c>)
   81fda:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81fdc:	687b      	ldr	r3, [r7, #4]
   81fde:	f003 031f 	and.w	r3, r3, #31
   81fe2:	2201      	movs	r2, #1
   81fe4:	fa02 f303 	lsl.w	r3, r2, r3
   81fe8:	461a      	mov	r2, r3
   81fea:	683b      	ldr	r3, [r7, #0]
   81fec:	f003 0301 	and.w	r3, r3, #1
   81ff0:	68f8      	ldr	r0, [r7, #12]
   81ff2:	4611      	mov	r1, r2
   81ff4:	461a      	mov	r2, r3
   81ff6:	4b2d      	ldr	r3, [pc, #180]	; (820ac <pio_configure_pin+0x130>)
   81ff8:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81ffa:	e04f      	b.n	8209c <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81ffc:	687b      	ldr	r3, [r7, #4]
   81ffe:	f003 031f 	and.w	r3, r3, #31
   82002:	2201      	movs	r2, #1
   82004:	fa02 f303 	lsl.w	r3, r2, r3
   82008:	68f8      	ldr	r0, [r7, #12]
   8200a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8200e:	461a      	mov	r2, r3
   82010:	4b25      	ldr	r3, [pc, #148]	; (820a8 <pio_configure_pin+0x12c>)
   82012:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82014:	687b      	ldr	r3, [r7, #4]
   82016:	f003 031f 	and.w	r3, r3, #31
   8201a:	2201      	movs	r2, #1
   8201c:	fa02 f303 	lsl.w	r3, r2, r3
   82020:	461a      	mov	r2, r3
   82022:	683b      	ldr	r3, [r7, #0]
   82024:	f003 0301 	and.w	r3, r3, #1
   82028:	68f8      	ldr	r0, [r7, #12]
   8202a:	4611      	mov	r1, r2
   8202c:	461a      	mov	r2, r3
   8202e:	4b1f      	ldr	r3, [pc, #124]	; (820ac <pio_configure_pin+0x130>)
   82030:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82032:	e033      	b.n	8209c <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82034:	687b      	ldr	r3, [r7, #4]
   82036:	f003 031f 	and.w	r3, r3, #31
   8203a:	2201      	movs	r2, #1
   8203c:	fa02 f303 	lsl.w	r3, r2, r3
   82040:	68f8      	ldr	r0, [r7, #12]
   82042:	4619      	mov	r1, r3
   82044:	683a      	ldr	r2, [r7, #0]
   82046:	4b1a      	ldr	r3, [pc, #104]	; (820b0 <pio_configure_pin+0x134>)
   82048:	4798      	blx	r3
		break;
   8204a:	e027      	b.n	8209c <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8204c:	687b      	ldr	r3, [r7, #4]
   8204e:	f003 031f 	and.w	r3, r3, #31
   82052:	2201      	movs	r2, #1
   82054:	fa02 f303 	lsl.w	r3, r2, r3
   82058:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8205a:	683b      	ldr	r3, [r7, #0]
   8205c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82060:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82064:	bf14      	ite	ne
   82066:	2300      	movne	r3, #0
   82068:	2301      	moveq	r3, #1
   8206a:	b2db      	uxtb	r3, r3
   8206c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8206e:	683b      	ldr	r3, [r7, #0]
   82070:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82074:	2b00      	cmp	r3, #0
   82076:	bf0c      	ite	eq
   82078:	2300      	moveq	r3, #0
   8207a:	2301      	movne	r3, #1
   8207c:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8207e:	6838      	ldr	r0, [r7, #0]
   82080:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82084:	2800      	cmp	r0, #0
   82086:	bf0c      	ite	eq
   82088:	2000      	moveq	r0, #0
   8208a:	2001      	movne	r0, #1
   8208c:	b2c0      	uxtb	r0, r0
   8208e:	9000      	str	r0, [sp, #0]
   82090:	68f8      	ldr	r0, [r7, #12]
   82092:	4c08      	ldr	r4, [pc, #32]	; (820b4 <pio_configure_pin+0x138>)
   82094:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82096:	e001      	b.n	8209c <pio_configure_pin+0x120>

	default:
		return 0;
   82098:	2300      	movs	r3, #0
   8209a:	e000      	b.n	8209e <pio_configure_pin+0x122>
	}

	return 1;
   8209c:	2301      	movs	r3, #1
}
   8209e:	4618      	mov	r0, r3
   820a0:	3714      	adds	r7, #20
   820a2:	46bd      	mov	sp, r7
   820a4:	bd90      	pop	{r4, r7, pc}
   820a6:	bf00      	nop
   820a8:	00081d09 	.word	0x00081d09
   820ac:	00081cdd 	.word	0x00081cdd
   820b0:	00081d89 	.word	0x00081d89
   820b4:	00081e05 	.word	0x00081e05

000820b8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   820b8:	b590      	push	{r4, r7, lr}
   820ba:	b087      	sub	sp, #28
   820bc:	af02      	add	r7, sp, #8
   820be:	60f8      	str	r0, [r7, #12]
   820c0:	60b9      	str	r1, [r7, #8]
   820c2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   820c4:	687b      	ldr	r3, [r7, #4]
   820c6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   820ca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   820ce:	d02e      	beq.n	8212e <pio_configure_pin_group+0x76>
   820d0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   820d4:	d806      	bhi.n	820e4 <pio_configure_pin_group+0x2c>
   820d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   820da:	d00a      	beq.n	820f2 <pio_configure_pin_group+0x3a>
   820dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   820e0:	d016      	beq.n	82110 <pio_configure_pin_group+0x58>
   820e2:	e04a      	b.n	8217a <pio_configure_pin_group+0xc2>
   820e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   820e8:	d027      	beq.n	8213a <pio_configure_pin_group+0x82>
   820ea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   820ee:	d024      	beq.n	8213a <pio_configure_pin_group+0x82>
   820f0:	e043      	b.n	8217a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   820f2:	68f8      	ldr	r0, [r7, #12]
   820f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820f8:	68ba      	ldr	r2, [r7, #8]
   820fa:	4b23      	ldr	r3, [pc, #140]	; (82188 <pio_configure_pin_group+0xd0>)
   820fc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   820fe:	687b      	ldr	r3, [r7, #4]
   82100:	f003 0301 	and.w	r3, r3, #1
   82104:	68f8      	ldr	r0, [r7, #12]
   82106:	68b9      	ldr	r1, [r7, #8]
   82108:	461a      	mov	r2, r3
   8210a:	4b20      	ldr	r3, [pc, #128]	; (8218c <pio_configure_pin_group+0xd4>)
   8210c:	4798      	blx	r3
		break;
   8210e:	e036      	b.n	8217e <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82110:	68f8      	ldr	r0, [r7, #12]
   82112:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82116:	68ba      	ldr	r2, [r7, #8]
   82118:	4b1b      	ldr	r3, [pc, #108]	; (82188 <pio_configure_pin_group+0xd0>)
   8211a:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   8211c:	687b      	ldr	r3, [r7, #4]
   8211e:	f003 0301 	and.w	r3, r3, #1
   82122:	68f8      	ldr	r0, [r7, #12]
   82124:	68b9      	ldr	r1, [r7, #8]
   82126:	461a      	mov	r2, r3
   82128:	4b18      	ldr	r3, [pc, #96]	; (8218c <pio_configure_pin_group+0xd4>)
   8212a:	4798      	blx	r3
		break;
   8212c:	e027      	b.n	8217e <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8212e:	68f8      	ldr	r0, [r7, #12]
   82130:	68b9      	ldr	r1, [r7, #8]
   82132:	687a      	ldr	r2, [r7, #4]
   82134:	4b16      	ldr	r3, [pc, #88]	; (82190 <pio_configure_pin_group+0xd8>)
   82136:	4798      	blx	r3
		break;
   82138:	e021      	b.n	8217e <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8213a:	687b      	ldr	r3, [r7, #4]
   8213c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82140:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82144:	bf14      	ite	ne
   82146:	2300      	movne	r3, #0
   82148:	2301      	moveq	r3, #1
   8214a:	b2db      	uxtb	r3, r3
   8214c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8214e:	687b      	ldr	r3, [r7, #4]
   82150:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82154:	2b00      	cmp	r3, #0
   82156:	bf0c      	ite	eq
   82158:	2300      	moveq	r3, #0
   8215a:	2301      	movne	r3, #1
   8215c:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   8215e:	6879      	ldr	r1, [r7, #4]
   82160:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82164:	2900      	cmp	r1, #0
   82166:	bf0c      	ite	eq
   82168:	2100      	moveq	r1, #0
   8216a:	2101      	movne	r1, #1
   8216c:	b2c9      	uxtb	r1, r1
   8216e:	9100      	str	r1, [sp, #0]
   82170:	68f8      	ldr	r0, [r7, #12]
   82172:	68b9      	ldr	r1, [r7, #8]
   82174:	4c07      	ldr	r4, [pc, #28]	; (82194 <pio_configure_pin_group+0xdc>)
   82176:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82178:	e001      	b.n	8217e <pio_configure_pin_group+0xc6>

	default:
		return 0;
   8217a:	2300      	movs	r3, #0
   8217c:	e000      	b.n	82180 <pio_configure_pin_group+0xc8>
	}

	return 1;
   8217e:	2301      	movs	r3, #1
}
   82180:	4618      	mov	r0, r3
   82182:	3714      	adds	r7, #20
   82184:	46bd      	mov	sp, r7
   82186:	bd90      	pop	{r4, r7, pc}
   82188:	00081d09 	.word	0x00081d09
   8218c:	00081cdd 	.word	0x00081cdd
   82190:	00081d89 	.word	0x00081d89
   82194:	00081e05 	.word	0x00081e05

00082198 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82198:	b580      	push	{r7, lr}
   8219a:	b084      	sub	sp, #16
   8219c:	af00      	add	r7, sp, #0
   8219e:	6078      	str	r0, [r7, #4]
   821a0:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   821a2:	6878      	ldr	r0, [r7, #4]
   821a4:	4b22      	ldr	r3, [pc, #136]	; (82230 <pio_handler_process+0x98>)
   821a6:	4798      	blx	r3
   821a8:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   821aa:	6878      	ldr	r0, [r7, #4]
   821ac:	4b21      	ldr	r3, [pc, #132]	; (82234 <pio_handler_process+0x9c>)
   821ae:	4798      	blx	r3
   821b0:	4603      	mov	r3, r0
   821b2:	68fa      	ldr	r2, [r7, #12]
   821b4:	4013      	ands	r3, r2
   821b6:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   821b8:	68fb      	ldr	r3, [r7, #12]
   821ba:	2b00      	cmp	r3, #0
   821bc:	d035      	beq.n	8222a <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   821be:	2300      	movs	r3, #0
   821c0:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   821c2:	e02f      	b.n	82224 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   821c4:	4a1c      	ldr	r2, [pc, #112]	; (82238 <pio_handler_process+0xa0>)
   821c6:	68bb      	ldr	r3, [r7, #8]
   821c8:	011b      	lsls	r3, r3, #4
   821ca:	4413      	add	r3, r2
   821cc:	681a      	ldr	r2, [r3, #0]
   821ce:	683b      	ldr	r3, [r7, #0]
   821d0:	429a      	cmp	r2, r3
   821d2:	d124      	bne.n	8221e <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   821d4:	4a18      	ldr	r2, [pc, #96]	; (82238 <pio_handler_process+0xa0>)
   821d6:	68bb      	ldr	r3, [r7, #8]
   821d8:	011b      	lsls	r3, r3, #4
   821da:	4413      	add	r3, r2
   821dc:	685a      	ldr	r2, [r3, #4]
   821de:	68fb      	ldr	r3, [r7, #12]
   821e0:	4013      	ands	r3, r2
   821e2:	2b00      	cmp	r3, #0
   821e4:	d01b      	beq.n	8221e <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   821e6:	4a14      	ldr	r2, [pc, #80]	; (82238 <pio_handler_process+0xa0>)
   821e8:	68bb      	ldr	r3, [r7, #8]
   821ea:	011b      	lsls	r3, r3, #4
   821ec:	4413      	add	r3, r2
   821ee:	3308      	adds	r3, #8
   821f0:	685b      	ldr	r3, [r3, #4]
   821f2:	4911      	ldr	r1, [pc, #68]	; (82238 <pio_handler_process+0xa0>)
   821f4:	68ba      	ldr	r2, [r7, #8]
   821f6:	0112      	lsls	r2, r2, #4
   821f8:	440a      	add	r2, r1
   821fa:	6811      	ldr	r1, [r2, #0]
   821fc:	480e      	ldr	r0, [pc, #56]	; (82238 <pio_handler_process+0xa0>)
   821fe:	68ba      	ldr	r2, [r7, #8]
   82200:	0112      	lsls	r2, r2, #4
   82202:	4402      	add	r2, r0
   82204:	6852      	ldr	r2, [r2, #4]
   82206:	4608      	mov	r0, r1
   82208:	4611      	mov	r1, r2
   8220a:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8220c:	4a0a      	ldr	r2, [pc, #40]	; (82238 <pio_handler_process+0xa0>)
   8220e:	68bb      	ldr	r3, [r7, #8]
   82210:	011b      	lsls	r3, r3, #4
   82212:	4413      	add	r3, r2
   82214:	685b      	ldr	r3, [r3, #4]
   82216:	43db      	mvns	r3, r3
   82218:	68fa      	ldr	r2, [r7, #12]
   8221a:	4013      	ands	r3, r2
   8221c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8221e:	68bb      	ldr	r3, [r7, #8]
   82220:	3301      	adds	r3, #1
   82222:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82224:	68fb      	ldr	r3, [r7, #12]
   82226:	2b00      	cmp	r3, #0
   82228:	d1cc      	bne.n	821c4 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   8222a:	3710      	adds	r7, #16
   8222c:	46bd      	mov	sp, r7
   8222e:	bd80      	pop	{r7, pc}
   82230:	00081e85 	.word	0x00081e85
   82234:	00081e9d 	.word	0x00081e9d
   82238:	20070474 	.word	0x20070474

0008223c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8223c:	b580      	push	{r7, lr}
   8223e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82240:	4802      	ldr	r0, [pc, #8]	; (8224c <PIOA_Handler+0x10>)
   82242:	210b      	movs	r1, #11
   82244:	4b02      	ldr	r3, [pc, #8]	; (82250 <PIOA_Handler+0x14>)
   82246:	4798      	blx	r3
}
   82248:	bd80      	pop	{r7, pc}
   8224a:	bf00      	nop
   8224c:	400e0e00 	.word	0x400e0e00
   82250:	00082199 	.word	0x00082199

00082254 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82254:	b580      	push	{r7, lr}
   82256:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   82258:	4802      	ldr	r0, [pc, #8]	; (82264 <PIOB_Handler+0x10>)
   8225a:	210c      	movs	r1, #12
   8225c:	4b02      	ldr	r3, [pc, #8]	; (82268 <PIOB_Handler+0x14>)
   8225e:	4798      	blx	r3
}
   82260:	bd80      	pop	{r7, pc}
   82262:	bf00      	nop
   82264:	400e1000 	.word	0x400e1000
   82268:	00082199 	.word	0x00082199

0008226c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8226c:	b580      	push	{r7, lr}
   8226e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   82270:	4802      	ldr	r0, [pc, #8]	; (8227c <PIOC_Handler+0x10>)
   82272:	210d      	movs	r1, #13
   82274:	4b02      	ldr	r3, [pc, #8]	; (82280 <PIOC_Handler+0x14>)
   82276:	4798      	blx	r3
}
   82278:	bd80      	pop	{r7, pc}
   8227a:	bf00      	nop
   8227c:	400e1200 	.word	0x400e1200
   82280:	00082199 	.word	0x00082199

00082284 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82284:	b580      	push	{r7, lr}
   82286:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   82288:	4802      	ldr	r0, [pc, #8]	; (82294 <PIOD_Handler+0x10>)
   8228a:	210e      	movs	r1, #14
   8228c:	4b02      	ldr	r3, [pc, #8]	; (82298 <PIOD_Handler+0x14>)
   8228e:	4798      	blx	r3
}
   82290:	bd80      	pop	{r7, pc}
   82292:	bf00      	nop
   82294:	400e1400 	.word	0x400e1400
   82298:	00082199 	.word	0x00082199

0008229c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   8229c:	b480      	push	{r7}
   8229e:	b085      	sub	sp, #20
   822a0:	af00      	add	r7, sp, #0
   822a2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   822a4:	4b1d      	ldr	r3, [pc, #116]	; (8231c <pmc_switch_mck_to_pllack+0x80>)
   822a6:	4a1d      	ldr	r2, [pc, #116]	; (8231c <pmc_switch_mck_to_pllack+0x80>)
   822a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
   822aa:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   822ae:	687a      	ldr	r2, [r7, #4]
   822b0:	430a      	orrs	r2, r1
   822b2:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822b8:	60fb      	str	r3, [r7, #12]
   822ba:	e007      	b.n	822cc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822bc:	68fb      	ldr	r3, [r7, #12]
   822be:	2b00      	cmp	r3, #0
   822c0:	d101      	bne.n	822c6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   822c2:	2301      	movs	r3, #1
   822c4:	e023      	b.n	8230e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   822c6:	68fb      	ldr	r3, [r7, #12]
   822c8:	3b01      	subs	r3, #1
   822ca:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822cc:	4b13      	ldr	r3, [pc, #76]	; (8231c <pmc_switch_mck_to_pllack+0x80>)
   822ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   822d0:	f003 0308 	and.w	r3, r3, #8
   822d4:	2b00      	cmp	r3, #0
   822d6:	d0f1      	beq.n	822bc <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   822d8:	4b10      	ldr	r3, [pc, #64]	; (8231c <pmc_switch_mck_to_pllack+0x80>)
   822da:	4a10      	ldr	r2, [pc, #64]	; (8231c <pmc_switch_mck_to_pllack+0x80>)
   822dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
   822de:	f022 0203 	bic.w	r2, r2, #3
   822e2:	f042 0202 	orr.w	r2, r2, #2
   822e6:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822ec:	60fb      	str	r3, [r7, #12]
   822ee:	e007      	b.n	82300 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822f0:	68fb      	ldr	r3, [r7, #12]
   822f2:	2b00      	cmp	r3, #0
   822f4:	d101      	bne.n	822fa <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   822f6:	2301      	movs	r3, #1
   822f8:	e009      	b.n	8230e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   822fa:	68fb      	ldr	r3, [r7, #12]
   822fc:	3b01      	subs	r3, #1
   822fe:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82300:	4b06      	ldr	r3, [pc, #24]	; (8231c <pmc_switch_mck_to_pllack+0x80>)
   82302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82304:	f003 0308 	and.w	r3, r3, #8
   82308:	2b00      	cmp	r3, #0
   8230a:	d0f1      	beq.n	822f0 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8230c:	2300      	movs	r3, #0
}
   8230e:	4618      	mov	r0, r3
   82310:	3714      	adds	r7, #20
   82312:	46bd      	mov	sp, r7
   82314:	f85d 7b04 	ldr.w	r7, [sp], #4
   82318:	4770      	bx	lr
   8231a:	bf00      	nop
   8231c:	400e0600 	.word	0x400e0600

00082320 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82320:	b480      	push	{r7}
   82322:	b083      	sub	sp, #12
   82324:	af00      	add	r7, sp, #0
   82326:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82328:	687b      	ldr	r3, [r7, #4]
   8232a:	2b01      	cmp	r3, #1
   8232c:	d107      	bne.n	8233e <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   8232e:	4a0a      	ldr	r2, [pc, #40]	; (82358 <pmc_switch_sclk_to_32kxtal+0x38>)
   82330:	4b09      	ldr	r3, [pc, #36]	; (82358 <pmc_switch_sclk_to_32kxtal+0x38>)
   82332:	689b      	ldr	r3, [r3, #8]
   82334:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8233c:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8233e:	4a06      	ldr	r2, [pc, #24]	; (82358 <pmc_switch_sclk_to_32kxtal+0x38>)
   82340:	4b05      	ldr	r3, [pc, #20]	; (82358 <pmc_switch_sclk_to_32kxtal+0x38>)
   82342:	681b      	ldr	r3, [r3, #0]
   82344:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82348:	f043 0308 	orr.w	r3, r3, #8
   8234c:	6013      	str	r3, [r2, #0]
}
   8234e:	370c      	adds	r7, #12
   82350:	46bd      	mov	sp, r7
   82352:	f85d 7b04 	ldr.w	r7, [sp], #4
   82356:	4770      	bx	lr
   82358:	400e1a10 	.word	0x400e1a10

0008235c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   8235c:	b480      	push	{r7}
   8235e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82360:	4b09      	ldr	r3, [pc, #36]	; (82388 <pmc_osc_is_ready_32kxtal+0x2c>)
   82362:	695b      	ldr	r3, [r3, #20]
   82364:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82368:	2b00      	cmp	r3, #0
   8236a:	d007      	beq.n	8237c <pmc_osc_is_ready_32kxtal+0x20>
   8236c:	4b07      	ldr	r3, [pc, #28]	; (8238c <pmc_osc_is_ready_32kxtal+0x30>)
   8236e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82370:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82374:	2b00      	cmp	r3, #0
   82376:	d001      	beq.n	8237c <pmc_osc_is_ready_32kxtal+0x20>
   82378:	2301      	movs	r3, #1
   8237a:	e000      	b.n	8237e <pmc_osc_is_ready_32kxtal+0x22>
   8237c:	2300      	movs	r3, #0
}
   8237e:	4618      	mov	r0, r3
   82380:	46bd      	mov	sp, r7
   82382:	f85d 7b04 	ldr.w	r7, [sp], #4
   82386:	4770      	bx	lr
   82388:	400e1a10 	.word	0x400e1a10
   8238c:	400e0600 	.word	0x400e0600

00082390 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82390:	b480      	push	{r7}
   82392:	b085      	sub	sp, #20
   82394:	af00      	add	r7, sp, #0
   82396:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   82398:	2300      	movs	r3, #0
   8239a:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   8239c:	4b21      	ldr	r3, [pc, #132]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   8239e:	6a1b      	ldr	r3, [r3, #32]
   823a0:	f003 0301 	and.w	r3, r3, #1
   823a4:	2b00      	cmp	r3, #0
   823a6:	d00e      	beq.n	823c6 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   823a8:	4a1e      	ldr	r2, [pc, #120]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823aa:	4b1e      	ldr	r3, [pc, #120]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823ac:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   823ae:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   823b2:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   823b6:	6879      	ldr	r1, [r7, #4]
   823b8:	430b      	orrs	r3, r1
   823ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823be:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   823c2:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   823c4:	e00b      	b.n	823de <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   823c6:	2301      	movs	r3, #1
   823c8:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   823ca:	4a16      	ldr	r2, [pc, #88]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823cc:	4b15      	ldr	r3, [pc, #84]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823ce:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   823d0:	4b15      	ldr	r3, [pc, #84]	; (82428 <pmc_switch_mainck_to_fastrc+0x98>)
   823d2:	400b      	ands	r3, r1
   823d4:	6879      	ldr	r1, [r7, #4]
   823d6:	4319      	orrs	r1, r3
   823d8:	4b14      	ldr	r3, [pc, #80]	; (8242c <pmc_switch_mainck_to_fastrc+0x9c>)
   823da:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   823dc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   823de:	bf00      	nop
   823e0:	4b10      	ldr	r3, [pc, #64]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   823e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   823e8:	2b00      	cmp	r3, #0
   823ea:	d0f9      	beq.n	823e0 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   823ec:	4a0d      	ldr	r2, [pc, #52]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823ee:	4b0d      	ldr	r3, [pc, #52]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   823f0:	6a1b      	ldr	r3, [r3, #32]
   823f2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   823f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   823fa:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823fe:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   82400:	68fb      	ldr	r3, [r7, #12]
   82402:	2b00      	cmp	r3, #0
   82404:	d009      	beq.n	8241a <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82406:	4a07      	ldr	r2, [pc, #28]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   82408:	4b06      	ldr	r3, [pc, #24]	; (82424 <pmc_switch_mainck_to_fastrc+0x94>)
   8240a:	6a1b      	ldr	r3, [r3, #32]
   8240c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82410:	f023 0301 	bic.w	r3, r3, #1
   82414:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82418:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   8241a:	3714      	adds	r7, #20
   8241c:	46bd      	mov	sp, r7
   8241e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82422:	4770      	bx	lr
   82424:	400e0600 	.word	0x400e0600
   82428:	ffc8c086 	.word	0xffc8c086
   8242c:	00373f09 	.word	0x00373f09

00082430 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   82430:	b480      	push	{r7}
   82432:	b083      	sub	sp, #12
   82434:	af00      	add	r7, sp, #0
   82436:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82438:	687b      	ldr	r3, [r7, #4]
   8243a:	2b00      	cmp	r3, #0
   8243c:	d008      	beq.n	82450 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8243e:	4912      	ldr	r1, [pc, #72]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82440:	4b11      	ldr	r3, [pc, #68]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82442:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82444:	4a11      	ldr	r2, [pc, #68]	; (8248c <pmc_switch_mainck_to_xtal+0x5c>)
   82446:	401a      	ands	r2, r3
   82448:	4b11      	ldr	r3, [pc, #68]	; (82490 <pmc_switch_mainck_to_xtal+0x60>)
   8244a:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8244c:	620b      	str	r3, [r1, #32]
   8244e:	e016      	b.n	8247e <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82450:	490d      	ldr	r1, [pc, #52]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82452:	4b0d      	ldr	r3, [pc, #52]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82454:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82456:	4a0f      	ldr	r2, [pc, #60]	; (82494 <pmc_switch_mainck_to_xtal+0x64>)
   82458:	401a      	ands	r2, r3
   8245a:	4b0f      	ldr	r3, [pc, #60]	; (82498 <pmc_switch_mainck_to_xtal+0x68>)
   8245c:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8245e:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82460:	bf00      	nop
   82462:	4b09      	ldr	r3, [pc, #36]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82466:	f003 0301 	and.w	r3, r3, #1
   8246a:	2b00      	cmp	r3, #0
   8246c:	d0f9      	beq.n	82462 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8246e:	4a06      	ldr	r2, [pc, #24]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82470:	4b05      	ldr	r3, [pc, #20]	; (82488 <pmc_switch_mainck_to_xtal+0x58>)
   82472:	6a1b      	ldr	r3, [r3, #32]
   82474:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8247c:	6213      	str	r3, [r2, #32]
	}
}
   8247e:	370c      	adds	r7, #12
   82480:	46bd      	mov	sp, r7
   82482:	f85d 7b04 	ldr.w	r7, [sp], #4
   82486:	4770      	bx	lr
   82488:	400e0600 	.word	0x400e0600
   8248c:	fec8fffc 	.word	0xfec8fffc
   82490:	01370002 	.word	0x01370002
   82494:	ffc8c0fc 	.word	0xffc8c0fc
   82498:	00373f01 	.word	0x00373f01

0008249c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   8249c:	b480      	push	{r7}
   8249e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   824a0:	4b04      	ldr	r3, [pc, #16]	; (824b4 <pmc_osc_is_ready_mainck+0x18>)
   824a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   824a8:	4618      	mov	r0, r3
   824aa:	46bd      	mov	sp, r7
   824ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   824b0:	4770      	bx	lr
   824b2:	bf00      	nop
   824b4:	400e0600 	.word	0x400e0600

000824b8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   824b8:	b480      	push	{r7}
   824ba:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   824bc:	4b03      	ldr	r3, [pc, #12]	; (824cc <pmc_disable_pllack+0x14>)
   824be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   824c2:	629a      	str	r2, [r3, #40]	; 0x28
}
   824c4:	46bd      	mov	sp, r7
   824c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   824ca:	4770      	bx	lr
   824cc:	400e0600 	.word	0x400e0600

000824d0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   824d0:	b480      	push	{r7}
   824d2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   824d4:	4b04      	ldr	r3, [pc, #16]	; (824e8 <pmc_is_locked_pllack+0x18>)
   824d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824d8:	f003 0302 	and.w	r3, r3, #2
}
   824dc:	4618      	mov	r0, r3
   824de:	46bd      	mov	sp, r7
   824e0:	f85d 7b04 	ldr.w	r7, [sp], #4
   824e4:	4770      	bx	lr
   824e6:	bf00      	nop
   824e8:	400e0600 	.word	0x400e0600

000824ec <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   824ec:	b480      	push	{r7}
   824ee:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   824f0:	4b04      	ldr	r3, [pc, #16]	; (82504 <pmc_is_locked_upll+0x18>)
   824f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   824f8:	4618      	mov	r0, r3
   824fa:	46bd      	mov	sp, r7
   824fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82500:	4770      	bx	lr
   82502:	bf00      	nop
   82504:	400e0600 	.word	0x400e0600

00082508 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82508:	b480      	push	{r7}
   8250a:	b083      	sub	sp, #12
   8250c:	af00      	add	r7, sp, #0
   8250e:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82510:	687b      	ldr	r3, [r7, #4]
   82512:	2b2c      	cmp	r3, #44	; 0x2c
   82514:	d901      	bls.n	8251a <pmc_enable_periph_clk+0x12>
		return 1;
   82516:	2301      	movs	r3, #1
   82518:	e02f      	b.n	8257a <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   8251a:	687b      	ldr	r3, [r7, #4]
   8251c:	2b1f      	cmp	r3, #31
   8251e:	d813      	bhi.n	82548 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82520:	4b19      	ldr	r3, [pc, #100]	; (82588 <pmc_enable_periph_clk+0x80>)
   82522:	699a      	ldr	r2, [r3, #24]
   82524:	687b      	ldr	r3, [r7, #4]
   82526:	2101      	movs	r1, #1
   82528:	fa01 f303 	lsl.w	r3, r1, r3
   8252c:	401a      	ands	r2, r3
   8252e:	687b      	ldr	r3, [r7, #4]
   82530:	2101      	movs	r1, #1
   82532:	fa01 f303 	lsl.w	r3, r1, r3
   82536:	429a      	cmp	r2, r3
   82538:	d01e      	beq.n	82578 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   8253a:	4b13      	ldr	r3, [pc, #76]	; (82588 <pmc_enable_periph_clk+0x80>)
   8253c:	687a      	ldr	r2, [r7, #4]
   8253e:	2101      	movs	r1, #1
   82540:	fa01 f202 	lsl.w	r2, r1, r2
   82544:	611a      	str	r2, [r3, #16]
   82546:	e017      	b.n	82578 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   82548:	687b      	ldr	r3, [r7, #4]
   8254a:	3b20      	subs	r3, #32
   8254c:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8254e:	4b0e      	ldr	r3, [pc, #56]	; (82588 <pmc_enable_periph_clk+0x80>)
   82550:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82554:	687b      	ldr	r3, [r7, #4]
   82556:	2101      	movs	r1, #1
   82558:	fa01 f303 	lsl.w	r3, r1, r3
   8255c:	401a      	ands	r2, r3
   8255e:	687b      	ldr	r3, [r7, #4]
   82560:	2101      	movs	r1, #1
   82562:	fa01 f303 	lsl.w	r3, r1, r3
   82566:	429a      	cmp	r2, r3
   82568:	d006      	beq.n	82578 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8256a:	4b07      	ldr	r3, [pc, #28]	; (82588 <pmc_enable_periph_clk+0x80>)
   8256c:	687a      	ldr	r2, [r7, #4]
   8256e:	2101      	movs	r1, #1
   82570:	fa01 f202 	lsl.w	r2, r1, r2
   82574:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82578:	2300      	movs	r3, #0
}
   8257a:	4618      	mov	r0, r3
   8257c:	370c      	adds	r7, #12
   8257e:	46bd      	mov	sp, r7
   82580:	f85d 7b04 	ldr.w	r7, [sp], #4
   82584:	4770      	bx	lr
   82586:	bf00      	nop
   82588:	400e0600 	.word	0x400e0600

0008258c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8258c:	b480      	push	{r7}
   8258e:	b089      	sub	sp, #36	; 0x24
   82590:	af00      	add	r7, sp, #0
   82592:	60f8      	str	r0, [r7, #12]
   82594:	60b9      	str	r1, [r7, #8]
   82596:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82598:	68bb      	ldr	r3, [r7, #8]
   8259a:	011a      	lsls	r2, r3, #4
   8259c:	687b      	ldr	r3, [r7, #4]
   8259e:	429a      	cmp	r2, r3
   825a0:	d802      	bhi.n	825a8 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   825a2:	2310      	movs	r3, #16
   825a4:	61fb      	str	r3, [r7, #28]
   825a6:	e001      	b.n	825ac <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   825a8:	2308      	movs	r3, #8
   825aa:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   825ac:	687b      	ldr	r3, [r7, #4]
   825ae:	00da      	lsls	r2, r3, #3
   825b0:	69fb      	ldr	r3, [r7, #28]
   825b2:	68b9      	ldr	r1, [r7, #8]
   825b4:	fb01 f303 	mul.w	r3, r1, r3
   825b8:	085b      	lsrs	r3, r3, #1
   825ba:	441a      	add	r2, r3
   825bc:	69fb      	ldr	r3, [r7, #28]
   825be:	68b9      	ldr	r1, [r7, #8]
   825c0:	fb01 f303 	mul.w	r3, r1, r3
   825c4:	fbb2 f3f3 	udiv	r3, r2, r3
   825c8:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   825ca:	69bb      	ldr	r3, [r7, #24]
   825cc:	08db      	lsrs	r3, r3, #3
   825ce:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   825d0:	69bb      	ldr	r3, [r7, #24]
   825d2:	f003 0307 	and.w	r3, r3, #7
   825d6:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   825d8:	697b      	ldr	r3, [r7, #20]
   825da:	2b00      	cmp	r3, #0
   825dc:	d003      	beq.n	825e6 <usart_set_async_baudrate+0x5a>
   825de:	697b      	ldr	r3, [r7, #20]
   825e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   825e4:	d301      	bcc.n	825ea <usart_set_async_baudrate+0x5e>
		return 1;
   825e6:	2301      	movs	r3, #1
   825e8:	e00f      	b.n	8260a <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   825ea:	69fb      	ldr	r3, [r7, #28]
   825ec:	2b08      	cmp	r3, #8
   825ee:	d105      	bne.n	825fc <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   825f0:	68fb      	ldr	r3, [r7, #12]
   825f2:	685b      	ldr	r3, [r3, #4]
   825f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   825f8:	68fb      	ldr	r3, [r7, #12]
   825fa:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   825fc:	693b      	ldr	r3, [r7, #16]
   825fe:	041a      	lsls	r2, r3, #16
   82600:	697b      	ldr	r3, [r7, #20]
   82602:	431a      	orrs	r2, r3
   82604:	68fb      	ldr	r3, [r7, #12]
   82606:	621a      	str	r2, [r3, #32]

	return 0;
   82608:	2300      	movs	r3, #0
}
   8260a:	4618      	mov	r0, r3
   8260c:	3724      	adds	r7, #36	; 0x24
   8260e:	46bd      	mov	sp, r7
   82610:	f85d 7b04 	ldr.w	r7, [sp], #4
   82614:	4770      	bx	lr
   82616:	bf00      	nop

00082618 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82618:	b580      	push	{r7, lr}
   8261a:	b082      	sub	sp, #8
   8261c:	af00      	add	r7, sp, #0
   8261e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   82620:	6878      	ldr	r0, [r7, #4]
   82622:	4b0d      	ldr	r3, [pc, #52]	; (82658 <usart_reset+0x40>)
   82624:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82626:	687b      	ldr	r3, [r7, #4]
   82628:	2200      	movs	r2, #0
   8262a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   8262c:	687b      	ldr	r3, [r7, #4]
   8262e:	2200      	movs	r2, #0
   82630:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82632:	687b      	ldr	r3, [r7, #4]
   82634:	2200      	movs	r2, #0
   82636:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   82638:	6878      	ldr	r0, [r7, #4]
   8263a:	4b08      	ldr	r3, [pc, #32]	; (8265c <usart_reset+0x44>)
   8263c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8263e:	6878      	ldr	r0, [r7, #4]
   82640:	4b07      	ldr	r3, [pc, #28]	; (82660 <usart_reset+0x48>)
   82642:	4798      	blx	r3
	usart_reset_status(p_usart);
   82644:	6878      	ldr	r0, [r7, #4]
   82646:	4b07      	ldr	r3, [pc, #28]	; (82664 <usart_reset+0x4c>)
   82648:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   8264a:	6878      	ldr	r0, [r7, #4]
   8264c:	4b06      	ldr	r3, [pc, #24]	; (82668 <usart_reset+0x50>)
   8264e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82650:	3708      	adds	r7, #8
   82652:	46bd      	mov	sp, r7
   82654:	bd80      	pop	{r7, pc}
   82656:	bf00      	nop
   82658:	00082855 	.word	0x00082855
   8265c:	00082709 	.word	0x00082709
   82660:	00082739 	.word	0x00082739
   82664:	000827a1 	.word	0x000827a1
   82668:	000827bd 	.word	0x000827bd

0008266c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   8266c:	b580      	push	{r7, lr}
   8266e:	b084      	sub	sp, #16
   82670:	af00      	add	r7, sp, #0
   82672:	60f8      	str	r0, [r7, #12]
   82674:	60b9      	str	r1, [r7, #8]
   82676:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82678:	68f8      	ldr	r0, [r7, #12]
   8267a:	4b1a      	ldr	r3, [pc, #104]	; (826e4 <usart_init_rs232+0x78>)
   8267c:	4798      	blx	r3

	ul_reg_val = 0;
   8267e:	4b1a      	ldr	r3, [pc, #104]	; (826e8 <usart_init_rs232+0x7c>)
   82680:	2200      	movs	r2, #0
   82682:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82684:	68bb      	ldr	r3, [r7, #8]
   82686:	2b00      	cmp	r3, #0
   82688:	d009      	beq.n	8269e <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   8268a:	68bb      	ldr	r3, [r7, #8]
   8268c:	681b      	ldr	r3, [r3, #0]
   8268e:	68f8      	ldr	r0, [r7, #12]
   82690:	4619      	mov	r1, r3
   82692:	687a      	ldr	r2, [r7, #4]
   82694:	4b15      	ldr	r3, [pc, #84]	; (826ec <usart_init_rs232+0x80>)
   82696:	4798      	blx	r3
   82698:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   8269a:	2b00      	cmp	r3, #0
   8269c:	d001      	beq.n	826a2 <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8269e:	2301      	movs	r3, #1
   826a0:	e01b      	b.n	826da <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   826a2:	68bb      	ldr	r3, [r7, #8]
   826a4:	685a      	ldr	r2, [r3, #4]
   826a6:	68bb      	ldr	r3, [r7, #8]
   826a8:	689b      	ldr	r3, [r3, #8]
   826aa:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   826ac:	68bb      	ldr	r3, [r7, #8]
   826ae:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   826b0:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   826b2:	68bb      	ldr	r3, [r7, #8]
   826b4:	68db      	ldr	r3, [r3, #12]
   826b6:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   826b8:	4b0b      	ldr	r3, [pc, #44]	; (826e8 <usart_init_rs232+0x7c>)
   826ba:	681b      	ldr	r3, [r3, #0]
   826bc:	431a      	orrs	r2, r3
   826be:	4b0a      	ldr	r3, [pc, #40]	; (826e8 <usart_init_rs232+0x7c>)
   826c0:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   826c2:	4b09      	ldr	r3, [pc, #36]	; (826e8 <usart_init_rs232+0x7c>)
   826c4:	681a      	ldr	r2, [r3, #0]
   826c6:	4b08      	ldr	r3, [pc, #32]	; (826e8 <usart_init_rs232+0x7c>)
   826c8:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   826ca:	68fb      	ldr	r3, [r7, #12]
   826cc:	685a      	ldr	r2, [r3, #4]
   826ce:	4b06      	ldr	r3, [pc, #24]	; (826e8 <usart_init_rs232+0x7c>)
   826d0:	681b      	ldr	r3, [r3, #0]
   826d2:	431a      	orrs	r2, r3
   826d4:	68fb      	ldr	r3, [r7, #12]
   826d6:	605a      	str	r2, [r3, #4]
	
	return 0;
   826d8:	2300      	movs	r3, #0
}
   826da:	4618      	mov	r0, r3
   826dc:	3710      	adds	r7, #16
   826de:	46bd      	mov	sp, r7
   826e0:	bd80      	pop	{r7, pc}
   826e2:	bf00      	nop
   826e4:	00082619 	.word	0x00082619
   826e8:	200704e4 	.word	0x200704e4
   826ec:	0008258d 	.word	0x0008258d

000826f0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   826f0:	b480      	push	{r7}
   826f2:	b083      	sub	sp, #12
   826f4:	af00      	add	r7, sp, #0
   826f6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   826f8:	687b      	ldr	r3, [r7, #4]
   826fa:	2240      	movs	r2, #64	; 0x40
   826fc:	601a      	str	r2, [r3, #0]
}
   826fe:	370c      	adds	r7, #12
   82700:	46bd      	mov	sp, r7
   82702:	f85d 7b04 	ldr.w	r7, [sp], #4
   82706:	4770      	bx	lr

00082708 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82708:	b480      	push	{r7}
   8270a:	b083      	sub	sp, #12
   8270c:	af00      	add	r7, sp, #0
   8270e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82710:	687b      	ldr	r3, [r7, #4]
   82712:	2288      	movs	r2, #136	; 0x88
   82714:	601a      	str	r2, [r3, #0]
}
   82716:	370c      	adds	r7, #12
   82718:	46bd      	mov	sp, r7
   8271a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8271e:	4770      	bx	lr

00082720 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82720:	b480      	push	{r7}
   82722:	b083      	sub	sp, #12
   82724:	af00      	add	r7, sp, #0
   82726:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82728:	687b      	ldr	r3, [r7, #4]
   8272a:	2210      	movs	r2, #16
   8272c:	601a      	str	r2, [r3, #0]
}
   8272e:	370c      	adds	r7, #12
   82730:	46bd      	mov	sp, r7
   82732:	f85d 7b04 	ldr.w	r7, [sp], #4
   82736:	4770      	bx	lr

00082738 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82738:	b480      	push	{r7}
   8273a:	b083      	sub	sp, #12
   8273c:	af00      	add	r7, sp, #0
   8273e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82740:	687b      	ldr	r3, [r7, #4]
   82742:	2224      	movs	r2, #36	; 0x24
   82744:	601a      	str	r2, [r3, #0]
}
   82746:	370c      	adds	r7, #12
   82748:	46bd      	mov	sp, r7
   8274a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8274e:	4770      	bx	lr

00082750 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82750:	b480      	push	{r7}
   82752:	b083      	sub	sp, #12
   82754:	af00      	add	r7, sp, #0
   82756:	6078      	str	r0, [r7, #4]
   82758:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   8275a:	687b      	ldr	r3, [r7, #4]
   8275c:	683a      	ldr	r2, [r7, #0]
   8275e:	609a      	str	r2, [r3, #8]
}
   82760:	370c      	adds	r7, #12
   82762:	46bd      	mov	sp, r7
   82764:	f85d 7b04 	ldr.w	r7, [sp], #4
   82768:	4770      	bx	lr
   8276a:	bf00      	nop

0008276c <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   8276c:	b480      	push	{r7}
   8276e:	b083      	sub	sp, #12
   82770:	af00      	add	r7, sp, #0
   82772:	6078      	str	r0, [r7, #4]
   82774:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   82776:	687b      	ldr	r3, [r7, #4]
   82778:	683a      	ldr	r2, [r7, #0]
   8277a:	60da      	str	r2, [r3, #12]
}
   8277c:	370c      	adds	r7, #12
   8277e:	46bd      	mov	sp, r7
   82780:	f85d 7b04 	ldr.w	r7, [sp], #4
   82784:	4770      	bx	lr
   82786:	bf00      	nop

00082788 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   82788:	b480      	push	{r7}
   8278a:	b083      	sub	sp, #12
   8278c:	af00      	add	r7, sp, #0
   8278e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   82790:	687b      	ldr	r3, [r7, #4]
   82792:	695b      	ldr	r3, [r3, #20]
}
   82794:	4618      	mov	r0, r3
   82796:	370c      	adds	r7, #12
   82798:	46bd      	mov	sp, r7
   8279a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8279e:	4770      	bx	lr

000827a0 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   827a0:	b480      	push	{r7}
   827a2:	b083      	sub	sp, #12
   827a4:	af00      	add	r7, sp, #0
   827a6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   827a8:	687b      	ldr	r3, [r7, #4]
   827aa:	f44f 7280 	mov.w	r2, #256	; 0x100
   827ae:	601a      	str	r2, [r3, #0]
}
   827b0:	370c      	adds	r7, #12
   827b2:	46bd      	mov	sp, r7
   827b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   827b8:	4770      	bx	lr
   827ba:	bf00      	nop

000827bc <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   827bc:	b480      	push	{r7}
   827be:	b083      	sub	sp, #12
   827c0:	af00      	add	r7, sp, #0
   827c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   827c4:	687b      	ldr	r3, [r7, #4]
   827c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   827ca:	601a      	str	r2, [r3, #0]
}
   827cc:	370c      	adds	r7, #12
   827ce:	46bd      	mov	sp, r7
   827d0:	f85d 7b04 	ldr.w	r7, [sp], #4
   827d4:	4770      	bx	lr
   827d6:	bf00      	nop

000827d8 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   827d8:	b480      	push	{r7}
   827da:	b083      	sub	sp, #12
   827dc:	af00      	add	r7, sp, #0
   827de:	6078      	str	r0, [r7, #4]
   827e0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   827e2:	687b      	ldr	r3, [r7, #4]
   827e4:	695b      	ldr	r3, [r3, #20]
   827e6:	f003 0302 	and.w	r3, r3, #2
   827ea:	2b00      	cmp	r3, #0
   827ec:	d101      	bne.n	827f2 <usart_write+0x1a>
		return 1;
   827ee:	2301      	movs	r3, #1
   827f0:	e005      	b.n	827fe <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   827f2:	683b      	ldr	r3, [r7, #0]
   827f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   827f8:	687b      	ldr	r3, [r7, #4]
   827fa:	61da      	str	r2, [r3, #28]
	return 0;
   827fc:	2300      	movs	r3, #0
}
   827fe:	4618      	mov	r0, r3
   82800:	370c      	adds	r7, #12
   82802:	46bd      	mov	sp, r7
   82804:	f85d 7b04 	ldr.w	r7, [sp], #4
   82808:	4770      	bx	lr
   8280a:	bf00      	nop

0008280c <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   8280c:	b480      	push	{r7}
   8280e:	b085      	sub	sp, #20
   82810:	af00      	add	r7, sp, #0
   82812:	6078      	str	r0, [r7, #4]
   82814:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82816:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8281a:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8281c:	e006      	b.n	8282c <usart_getchar+0x20>
		if (!timeout--) {
   8281e:	68fb      	ldr	r3, [r7, #12]
   82820:	1e5a      	subs	r2, r3, #1
   82822:	60fa      	str	r2, [r7, #12]
   82824:	2b00      	cmp	r3, #0
   82826:	d101      	bne.n	8282c <usart_getchar+0x20>
			return 1;
   82828:	2301      	movs	r3, #1
   8282a:	e00c      	b.n	82846 <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8282c:	687b      	ldr	r3, [r7, #4]
   8282e:	695b      	ldr	r3, [r3, #20]
   82830:	f003 0301 	and.w	r3, r3, #1
   82834:	2b00      	cmp	r3, #0
   82836:	d0f2      	beq.n	8281e <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82838:	687b      	ldr	r3, [r7, #4]
   8283a:	699b      	ldr	r3, [r3, #24]
   8283c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82840:	683b      	ldr	r3, [r7, #0]
   82842:	601a      	str	r2, [r3, #0]

	return 0;
   82844:	2300      	movs	r3, #0
}
   82846:	4618      	mov	r0, r3
   82848:	3714      	adds	r7, #20
   8284a:	46bd      	mov	sp, r7
   8284c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82850:	4770      	bx	lr
   82852:	bf00      	nop

00082854 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82854:	b480      	push	{r7}
   82856:	b083      	sub	sp, #12
   82858:	af00      	add	r7, sp, #0
   8285a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   8285c:	687b      	ldr	r3, [r7, #4]
   8285e:	4a04      	ldr	r2, [pc, #16]	; (82870 <usart_disable_writeprotect+0x1c>)
   82860:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82864:	370c      	adds	r7, #12
   82866:	46bd      	mov	sp, r7
   82868:	f85d 7b04 	ldr.w	r7, [sp], #4
   8286c:	4770      	bx	lr
   8286e:	bf00      	nop
   82870:	55534100 	.word	0x55534100

00082874 <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
   82874:	b480      	push	{r7}
   82876:	b085      	sub	sp, #20
   82878:	af00      	add	r7, sp, #0
   8287a:	60f8      	str	r0, [r7, #12]
   8287c:	60b9      	str	r1, [r7, #8]
   8287e:	80fa      	strh	r2, [r7, #6]
   82880:	80bb      	strh	r3, [r7, #4]
	p_wdt->WDT_MR = ul_mode |
   82882:	88fb      	ldrh	r3, [r7, #6]
   82884:	f3c3 020b 	ubfx	r2, r3, #0, #12
   82888:	68bb      	ldr	r3, [r7, #8]
   8288a:	431a      	orrs	r2, r3
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
   8288c:	88bb      	ldrh	r3, [r7, #4]
   8288e:	041b      	lsls	r3, r3, #16
   82890:	4619      	mov	r1, r3
   82892:	4b05      	ldr	r3, [pc, #20]	; (828a8 <wdt_init+0x34>)
   82894:	400b      	ands	r3, r1
   82896:	431a      	orrs	r2, r3
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
	p_wdt->WDT_MR = ul_mode |
   82898:	68fb      	ldr	r3, [r7, #12]
   8289a:	605a      	str	r2, [r3, #4]
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
}
   8289c:	3714      	adds	r7, #20
   8289e:	46bd      	mov	sp, r7
   828a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   828a4:	4770      	bx	lr
   828a6:	bf00      	nop
   828a8:	0fff0000 	.word	0x0fff0000

000828ac <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   828ac:	b480      	push	{r7}
   828ae:	b083      	sub	sp, #12
   828b0:	af00      	add	r7, sp, #0
   828b2:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   828b4:	687a      	ldr	r2, [r7, #4]
   828b6:	4b05      	ldr	r3, [pc, #20]	; (828cc <wdt_restart+0x20>)
   828b8:	429a      	cmp	r2, r3
   828ba:	d102      	bne.n	828c2 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   828bc:	687b      	ldr	r3, [r7, #4]
   828be:	4a04      	ldr	r2, [pc, #16]	; (828d0 <wdt_restart+0x24>)
   828c0:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   828c2:	370c      	adds	r7, #12
   828c4:	46bd      	mov	sp, r7
   828c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   828ca:	4770      	bx	lr
   828cc:	400e1a50 	.word	0x400e1a50
   828d0:	a5000001 	.word	0xa5000001

000828d4 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   828d4:	b480      	push	{r7}
   828d6:	b083      	sub	sp, #12
   828d8:	af00      	add	r7, sp, #0
   828da:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   828dc:	687b      	ldr	r3, [r7, #4]
   828de:	689b      	ldr	r3, [r3, #8]
}
   828e0:	4618      	mov	r0, r3
   828e2:	370c      	adds	r7, #12
   828e4:	46bd      	mov	sp, r7
   828e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   828ea:	4770      	bx	lr

000828ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   828ec:	b480      	push	{r7}
   828ee:	af00      	add	r7, sp, #0
	while (1) {
	}
   828f0:	e7fe      	b.n	828f0 <Dummy_Handler+0x4>
   828f2:	bf00      	nop

000828f4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   828f4:	b580      	push	{r7, lr}
   828f6:	b082      	sub	sp, #8
   828f8:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   828fa:	4b1e      	ldr	r3, [pc, #120]	; (82974 <Reset_Handler+0x80>)
   828fc:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   828fe:	4b1e      	ldr	r3, [pc, #120]	; (82978 <Reset_Handler+0x84>)
   82900:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82902:	687a      	ldr	r2, [r7, #4]
   82904:	683b      	ldr	r3, [r7, #0]
   82906:	429a      	cmp	r2, r3
   82908:	d00c      	beq.n	82924 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8290a:	e007      	b.n	8291c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   8290c:	683b      	ldr	r3, [r7, #0]
   8290e:	1d1a      	adds	r2, r3, #4
   82910:	603a      	str	r2, [r7, #0]
   82912:	687a      	ldr	r2, [r7, #4]
   82914:	1d11      	adds	r1, r2, #4
   82916:	6079      	str	r1, [r7, #4]
   82918:	6812      	ldr	r2, [r2, #0]
   8291a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8291c:	683a      	ldr	r2, [r7, #0]
   8291e:	4b17      	ldr	r3, [pc, #92]	; (8297c <Reset_Handler+0x88>)
   82920:	429a      	cmp	r2, r3
   82922:	d3f3      	bcc.n	8290c <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82924:	4b16      	ldr	r3, [pc, #88]	; (82980 <Reset_Handler+0x8c>)
   82926:	603b      	str	r3, [r7, #0]
   82928:	e004      	b.n	82934 <Reset_Handler+0x40>
		*pDest++ = 0;
   8292a:	683b      	ldr	r3, [r7, #0]
   8292c:	1d1a      	adds	r2, r3, #4
   8292e:	603a      	str	r2, [r7, #0]
   82930:	2200      	movs	r2, #0
   82932:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82934:	683a      	ldr	r2, [r7, #0]
   82936:	4b13      	ldr	r3, [pc, #76]	; (82984 <Reset_Handler+0x90>)
   82938:	429a      	cmp	r2, r3
   8293a:	d3f6      	bcc.n	8292a <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   8293c:	4b12      	ldr	r3, [pc, #72]	; (82988 <Reset_Handler+0x94>)
   8293e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82940:	4a12      	ldr	r2, [pc, #72]	; (8298c <Reset_Handler+0x98>)
   82942:	687b      	ldr	r3, [r7, #4]
   82944:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82948:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8294c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8294e:	687b      	ldr	r3, [r7, #4]
   82950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82954:	d309      	bcc.n	8296a <Reset_Handler+0x76>
   82956:	687a      	ldr	r2, [r7, #4]
   82958:	4b0d      	ldr	r3, [pc, #52]	; (82990 <Reset_Handler+0x9c>)
   8295a:	429a      	cmp	r2, r3
   8295c:	d805      	bhi.n	8296a <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8295e:	4b0b      	ldr	r3, [pc, #44]	; (8298c <Reset_Handler+0x98>)
   82960:	4a0a      	ldr	r2, [pc, #40]	; (8298c <Reset_Handler+0x98>)
   82962:	6892      	ldr	r2, [r2, #8]
   82964:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82968:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8296a:	4b0a      	ldr	r3, [pc, #40]	; (82994 <Reset_Handler+0xa0>)
   8296c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8296e:	4b0a      	ldr	r3, [pc, #40]	; (82998 <Reset_Handler+0xa4>)
   82970:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82972:	e7fe      	b.n	82972 <Reset_Handler+0x7e>
   82974:	00086af4 	.word	0x00086af4
   82978:	20070000 	.word	0x20070000
   8297c:	20070438 	.word	0x20070438
   82980:	20070438 	.word	0x20070438
   82984:	2007bb6c 	.word	0x2007bb6c
   82988:	00080000 	.word	0x00080000
   8298c:	e000ed00 	.word	0xe000ed00
   82990:	200fffff 	.word	0x200fffff
   82994:	0008661d 	.word	0x0008661d
   82998:	00085ea5 	.word	0x00085ea5

0008299c <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   8299c:	b480      	push	{r7}
   8299e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   829a0:	4b56      	ldr	r3, [pc, #344]	; (82afc <SystemCoreClockUpdate+0x160>)
   829a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829a4:	f003 0303 	and.w	r3, r3, #3
   829a8:	2b03      	cmp	r3, #3
   829aa:	f200 808a 	bhi.w	82ac2 <SystemCoreClockUpdate+0x126>
   829ae:	a101      	add	r1, pc, #4	; (adr r1, 829b4 <SystemCoreClockUpdate+0x18>)
   829b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   829b4:	000829c5 	.word	0x000829c5
   829b8:	000829e5 	.word	0x000829e5
   829bc:	00082a35 	.word	0x00082a35
   829c0:	00082a35 	.word	0x00082a35
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   829c4:	4b4e      	ldr	r3, [pc, #312]	; (82b00 <SystemCoreClockUpdate+0x164>)
   829c6:	695b      	ldr	r3, [r3, #20]
   829c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   829cc:	2b00      	cmp	r3, #0
   829ce:	d004      	beq.n	829da <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   829d0:	4b4c      	ldr	r3, [pc, #304]	; (82b04 <SystemCoreClockUpdate+0x168>)
   829d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   829d6:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   829d8:	e073      	b.n	82ac2 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   829da:	4b4a      	ldr	r3, [pc, #296]	; (82b04 <SystemCoreClockUpdate+0x168>)
   829dc:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   829e0:	601a      	str	r2, [r3, #0]
		}
		break;
   829e2:	e06e      	b.n	82ac2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   829e4:	4b45      	ldr	r3, [pc, #276]	; (82afc <SystemCoreClockUpdate+0x160>)
   829e6:	6a1b      	ldr	r3, [r3, #32]
   829e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   829ec:	2b00      	cmp	r3, #0
   829ee:	d003      	beq.n	829f8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   829f0:	4b44      	ldr	r3, [pc, #272]	; (82b04 <SystemCoreClockUpdate+0x168>)
   829f2:	4a45      	ldr	r2, [pc, #276]	; (82b08 <SystemCoreClockUpdate+0x16c>)
   829f4:	601a      	str	r2, [r3, #0]
   829f6:	e01c      	b.n	82a32 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829f8:	4b42      	ldr	r3, [pc, #264]	; (82b04 <SystemCoreClockUpdate+0x168>)
   829fa:	4a44      	ldr	r2, [pc, #272]	; (82b0c <SystemCoreClockUpdate+0x170>)
   829fc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829fe:	4b3f      	ldr	r3, [pc, #252]	; (82afc <SystemCoreClockUpdate+0x160>)
   82a00:	6a1b      	ldr	r3, [r3, #32]
   82a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a06:	2b10      	cmp	r3, #16
   82a08:	d004      	beq.n	82a14 <SystemCoreClockUpdate+0x78>
   82a0a:	2b20      	cmp	r3, #32
   82a0c:	d008      	beq.n	82a20 <SystemCoreClockUpdate+0x84>
   82a0e:	2b00      	cmp	r3, #0
   82a10:	d00e      	beq.n	82a30 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82a12:	e00e      	b.n	82a32 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a14:	4b3b      	ldr	r3, [pc, #236]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a16:	681b      	ldr	r3, [r3, #0]
   82a18:	005a      	lsls	r2, r3, #1
   82a1a:	4b3a      	ldr	r3, [pc, #232]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a1c:	601a      	str	r2, [r3, #0]
				break;
   82a1e:	e008      	b.n	82a32 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a20:	4b38      	ldr	r3, [pc, #224]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a22:	681a      	ldr	r2, [r3, #0]
   82a24:	4613      	mov	r3, r2
   82a26:	005b      	lsls	r3, r3, #1
   82a28:	441a      	add	r2, r3
   82a2a:	4b36      	ldr	r3, [pc, #216]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a2c:	601a      	str	r2, [r3, #0]
				break;
   82a2e:	e000      	b.n	82a32 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82a30:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   82a32:	e046      	b.n	82ac2 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a34:	4b31      	ldr	r3, [pc, #196]	; (82afc <SystemCoreClockUpdate+0x160>)
   82a36:	6a1b      	ldr	r3, [r3, #32]
   82a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82a3c:	2b00      	cmp	r3, #0
   82a3e:	d003      	beq.n	82a48 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a40:	4b30      	ldr	r3, [pc, #192]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a42:	4a31      	ldr	r2, [pc, #196]	; (82b08 <SystemCoreClockUpdate+0x16c>)
   82a44:	601a      	str	r2, [r3, #0]
   82a46:	e01c      	b.n	82a82 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82a48:	4b2e      	ldr	r3, [pc, #184]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a4a:	4a30      	ldr	r2, [pc, #192]	; (82b0c <SystemCoreClockUpdate+0x170>)
   82a4c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82a4e:	4b2b      	ldr	r3, [pc, #172]	; (82afc <SystemCoreClockUpdate+0x160>)
   82a50:	6a1b      	ldr	r3, [r3, #32]
   82a52:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a56:	2b10      	cmp	r3, #16
   82a58:	d004      	beq.n	82a64 <SystemCoreClockUpdate+0xc8>
   82a5a:	2b20      	cmp	r3, #32
   82a5c:	d008      	beq.n	82a70 <SystemCoreClockUpdate+0xd4>
   82a5e:	2b00      	cmp	r3, #0
   82a60:	d00e      	beq.n	82a80 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82a62:	e00e      	b.n	82a82 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a64:	4b27      	ldr	r3, [pc, #156]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a66:	681b      	ldr	r3, [r3, #0]
   82a68:	005a      	lsls	r2, r3, #1
   82a6a:	4b26      	ldr	r3, [pc, #152]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a6c:	601a      	str	r2, [r3, #0]
				break;
   82a6e:	e008      	b.n	82a82 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a70:	4b24      	ldr	r3, [pc, #144]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a72:	681a      	ldr	r2, [r3, #0]
   82a74:	4613      	mov	r3, r2
   82a76:	005b      	lsls	r3, r3, #1
   82a78:	441a      	add	r2, r3
   82a7a:	4b22      	ldr	r3, [pc, #136]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a7c:	601a      	str	r2, [r3, #0]
				break;
   82a7e:	e000      	b.n	82a82 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82a80:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82a82:	4b1e      	ldr	r3, [pc, #120]	; (82afc <SystemCoreClockUpdate+0x160>)
   82a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a86:	f003 0303 	and.w	r3, r3, #3
   82a8a:	2b02      	cmp	r3, #2
   82a8c:	d115      	bne.n	82aba <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a8e:	4b1b      	ldr	r3, [pc, #108]	; (82afc <SystemCoreClockUpdate+0x160>)
   82a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82a92:	4b1f      	ldr	r3, [pc, #124]	; (82b10 <SystemCoreClockUpdate+0x174>)
   82a94:	4013      	ands	r3, r2
   82a96:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82a98:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a9a:	4a1a      	ldr	r2, [pc, #104]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82a9c:	6812      	ldr	r2, [r2, #0]
   82a9e:	fb02 f203 	mul.w	r2, r2, r3
   82aa2:	4b18      	ldr	r3, [pc, #96]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82aa4:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82aa6:	4b17      	ldr	r3, [pc, #92]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82aa8:	681a      	ldr	r2, [r3, #0]
   82aaa:	4b14      	ldr	r3, [pc, #80]	; (82afc <SystemCoreClockUpdate+0x160>)
   82aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82aae:	b2db      	uxtb	r3, r3
   82ab0:	fbb2 f2f3 	udiv	r2, r2, r3
   82ab4:	4b13      	ldr	r3, [pc, #76]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82ab6:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82ab8:	e002      	b.n	82ac0 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82aba:	4b12      	ldr	r3, [pc, #72]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82abc:	4a15      	ldr	r2, [pc, #84]	; (82b14 <SystemCoreClockUpdate+0x178>)
   82abe:	601a      	str	r2, [r3, #0]
		}
		break;
   82ac0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82ac2:	4b0e      	ldr	r3, [pc, #56]	; (82afc <SystemCoreClockUpdate+0x160>)
   82ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ac6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82aca:	2b70      	cmp	r3, #112	; 0x70
   82acc:	d108      	bne.n	82ae0 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82ace:	4b0d      	ldr	r3, [pc, #52]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82ad0:	681a      	ldr	r2, [r3, #0]
   82ad2:	4b11      	ldr	r3, [pc, #68]	; (82b18 <SystemCoreClockUpdate+0x17c>)
   82ad4:	fba3 1302 	umull	r1, r3, r3, r2
   82ad8:	085a      	lsrs	r2, r3, #1
   82ada:	4b0a      	ldr	r3, [pc, #40]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82adc:	601a      	str	r2, [r3, #0]
   82ade:	e009      	b.n	82af4 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82ae0:	4b08      	ldr	r3, [pc, #32]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82ae2:	681a      	ldr	r2, [r3, #0]
   82ae4:	4b05      	ldr	r3, [pc, #20]	; (82afc <SystemCoreClockUpdate+0x160>)
   82ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82aec:	091b      	lsrs	r3, r3, #4
   82aee:	40da      	lsrs	r2, r3
   82af0:	4b04      	ldr	r3, [pc, #16]	; (82b04 <SystemCoreClockUpdate+0x168>)
   82af2:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82af4:	46bd      	mov	sp, r7
   82af6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82afa:	4770      	bx	lr
   82afc:	400e0600 	.word	0x400e0600
   82b00:	400e1a10 	.word	0x400e1a10
   82b04:	20070000 	.word	0x20070000
   82b08:	00b71b00 	.word	0x00b71b00
   82b0c:	003d0900 	.word	0x003d0900
   82b10:	07ff0000 	.word	0x07ff0000
   82b14:	0e4e1c00 	.word	0x0e4e1c00
   82b18:	aaaaaaab 	.word	0xaaaaaaab

00082b1c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82b1c:	b480      	push	{r7}
   82b1e:	b083      	sub	sp, #12
   82b20:	af00      	add	r7, sp, #0
   82b22:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82b24:	687a      	ldr	r2, [r7, #4]
   82b26:	4b1f      	ldr	r3, [pc, #124]	; (82ba4 <system_init_flash+0x88>)
   82b28:	429a      	cmp	r2, r3
   82b2a:	d806      	bhi.n	82b3a <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82b2c:	4b1e      	ldr	r3, [pc, #120]	; (82ba8 <system_init_flash+0x8c>)
   82b2e:	2200      	movs	r2, #0
   82b30:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82b32:	4b1e      	ldr	r3, [pc, #120]	; (82bac <system_init_flash+0x90>)
   82b34:	2200      	movs	r2, #0
   82b36:	601a      	str	r2, [r3, #0]
   82b38:	e02e      	b.n	82b98 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82b3a:	687a      	ldr	r2, [r7, #4]
   82b3c:	4b1c      	ldr	r3, [pc, #112]	; (82bb0 <system_init_flash+0x94>)
   82b3e:	429a      	cmp	r2, r3
   82b40:	d808      	bhi.n	82b54 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82b42:	4b19      	ldr	r3, [pc, #100]	; (82ba8 <system_init_flash+0x8c>)
   82b44:	f44f 7280 	mov.w	r2, #256	; 0x100
   82b48:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82b4a:	4b18      	ldr	r3, [pc, #96]	; (82bac <system_init_flash+0x90>)
   82b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
   82b50:	601a      	str	r2, [r3, #0]
   82b52:	e021      	b.n	82b98 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82b54:	687a      	ldr	r2, [r7, #4]
   82b56:	4b17      	ldr	r3, [pc, #92]	; (82bb4 <system_init_flash+0x98>)
   82b58:	429a      	cmp	r2, r3
   82b5a:	d808      	bhi.n	82b6e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82b5c:	4b12      	ldr	r3, [pc, #72]	; (82ba8 <system_init_flash+0x8c>)
   82b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b62:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82b64:	4b11      	ldr	r3, [pc, #68]	; (82bac <system_init_flash+0x90>)
   82b66:	f44f 7200 	mov.w	r2, #512	; 0x200
   82b6a:	601a      	str	r2, [r3, #0]
   82b6c:	e014      	b.n	82b98 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82b6e:	687a      	ldr	r2, [r7, #4]
   82b70:	4b11      	ldr	r3, [pc, #68]	; (82bb8 <system_init_flash+0x9c>)
   82b72:	429a      	cmp	r2, r3
   82b74:	d808      	bhi.n	82b88 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82b76:	4b0c      	ldr	r3, [pc, #48]	; (82ba8 <system_init_flash+0x8c>)
   82b78:	f44f 7240 	mov.w	r2, #768	; 0x300
   82b7c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82b7e:	4b0b      	ldr	r3, [pc, #44]	; (82bac <system_init_flash+0x90>)
   82b80:	f44f 7240 	mov.w	r2, #768	; 0x300
   82b84:	601a      	str	r2, [r3, #0]
   82b86:	e007      	b.n	82b98 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82b88:	4b07      	ldr	r3, [pc, #28]	; (82ba8 <system_init_flash+0x8c>)
   82b8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82b8e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82b90:	4b06      	ldr	r3, [pc, #24]	; (82bac <system_init_flash+0x90>)
   82b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82b96:	601a      	str	r2, [r3, #0]
	}
}
   82b98:	370c      	adds	r7, #12
   82b9a:	46bd      	mov	sp, r7
   82b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ba0:	4770      	bx	lr
   82ba2:	bf00      	nop
   82ba4:	0157529f 	.word	0x0157529f
   82ba8:	400e0a00 	.word	0x400e0a00
   82bac:	400e0c00 	.word	0x400e0c00
   82bb0:	0206cc7f 	.word	0x0206cc7f
   82bb4:	0328b73f 	.word	0x0328b73f
   82bb8:	04a62f7f 	.word	0x04a62f7f

00082bbc <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82bbc:	b480      	push	{r7}
   82bbe:	b083      	sub	sp, #12
   82bc0:	af00      	add	r7, sp, #0
   82bc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82bc4:	687b      	ldr	r3, [r7, #4]
   82bc6:	f103 0208 	add.w	r2, r3, #8
   82bca:	687b      	ldr	r3, [r7, #4]
   82bcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82bce:	687b      	ldr	r3, [r7, #4]
   82bd0:	f04f 32ff 	mov.w	r2, #4294967295
   82bd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82bd6:	687b      	ldr	r3, [r7, #4]
   82bd8:	f103 0208 	add.w	r2, r3, #8
   82bdc:	687b      	ldr	r3, [r7, #4]
   82bde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82be0:	687b      	ldr	r3, [r7, #4]
   82be2:	f103 0208 	add.w	r2, r3, #8
   82be6:	687b      	ldr	r3, [r7, #4]
   82be8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82bea:	687b      	ldr	r3, [r7, #4]
   82bec:	2200      	movs	r2, #0
   82bee:	601a      	str	r2, [r3, #0]
}
   82bf0:	370c      	adds	r7, #12
   82bf2:	46bd      	mov	sp, r7
   82bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bf8:	4770      	bx	lr
   82bfa:	bf00      	nop

00082bfc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   82bfc:	b480      	push	{r7}
   82bfe:	b083      	sub	sp, #12
   82c00:	af00      	add	r7, sp, #0
   82c02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   82c04:	687b      	ldr	r3, [r7, #4]
   82c06:	2200      	movs	r2, #0
   82c08:	611a      	str	r2, [r3, #16]
}
   82c0a:	370c      	adds	r7, #12
   82c0c:	46bd      	mov	sp, r7
   82c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c12:	4770      	bx	lr

00082c14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82c14:	b480      	push	{r7}
   82c16:	b085      	sub	sp, #20
   82c18:	af00      	add	r7, sp, #0
   82c1a:	6078      	str	r0, [r7, #4]
   82c1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82c1e:	687b      	ldr	r3, [r7, #4]
   82c20:	685b      	ldr	r3, [r3, #4]
   82c22:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82c24:	683b      	ldr	r3, [r7, #0]
   82c26:	68fa      	ldr	r2, [r7, #12]
   82c28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   82c2a:	68fb      	ldr	r3, [r7, #12]
   82c2c:	689a      	ldr	r2, [r3, #8]
   82c2e:	683b      	ldr	r3, [r7, #0]
   82c30:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82c32:	68fb      	ldr	r3, [r7, #12]
   82c34:	689b      	ldr	r3, [r3, #8]
   82c36:	683a      	ldr	r2, [r7, #0]
   82c38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   82c3a:	68fb      	ldr	r3, [r7, #12]
   82c3c:	683a      	ldr	r2, [r7, #0]
   82c3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82c40:	683b      	ldr	r3, [r7, #0]
   82c42:	687a      	ldr	r2, [r7, #4]
   82c44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82c46:	687b      	ldr	r3, [r7, #4]
   82c48:	681b      	ldr	r3, [r3, #0]
   82c4a:	1c5a      	adds	r2, r3, #1
   82c4c:	687b      	ldr	r3, [r7, #4]
   82c4e:	601a      	str	r2, [r3, #0]
}
   82c50:	3714      	adds	r7, #20
   82c52:	46bd      	mov	sp, r7
   82c54:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c58:	4770      	bx	lr
   82c5a:	bf00      	nop

00082c5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82c5c:	b480      	push	{r7}
   82c5e:	b085      	sub	sp, #20
   82c60:	af00      	add	r7, sp, #0
   82c62:	6078      	str	r0, [r7, #4]
   82c64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   82c66:	683b      	ldr	r3, [r7, #0]
   82c68:	681b      	ldr	r3, [r3, #0]
   82c6a:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82c6c:	68bb      	ldr	r3, [r7, #8]
   82c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82c72:	d103      	bne.n	82c7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   82c74:	687b      	ldr	r3, [r7, #4]
   82c76:	691b      	ldr	r3, [r3, #16]
   82c78:	60fb      	str	r3, [r7, #12]
   82c7a:	e00c      	b.n	82c96 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82c7c:	687b      	ldr	r3, [r7, #4]
   82c7e:	3308      	adds	r3, #8
   82c80:	60fb      	str	r3, [r7, #12]
   82c82:	e002      	b.n	82c8a <vListInsert+0x2e>
   82c84:	68fb      	ldr	r3, [r7, #12]
   82c86:	685b      	ldr	r3, [r3, #4]
   82c88:	60fb      	str	r3, [r7, #12]
   82c8a:	68fb      	ldr	r3, [r7, #12]
   82c8c:	685b      	ldr	r3, [r3, #4]
   82c8e:	681a      	ldr	r2, [r3, #0]
   82c90:	68bb      	ldr	r3, [r7, #8]
   82c92:	429a      	cmp	r2, r3
   82c94:	d9f6      	bls.n	82c84 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   82c96:	68fb      	ldr	r3, [r7, #12]
   82c98:	685a      	ldr	r2, [r3, #4]
   82c9a:	683b      	ldr	r3, [r7, #0]
   82c9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82c9e:	683b      	ldr	r3, [r7, #0]
   82ca0:	685b      	ldr	r3, [r3, #4]
   82ca2:	683a      	ldr	r2, [r7, #0]
   82ca4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   82ca6:	683b      	ldr	r3, [r7, #0]
   82ca8:	68fa      	ldr	r2, [r7, #12]
   82caa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82cac:	68fb      	ldr	r3, [r7, #12]
   82cae:	683a      	ldr	r2, [r7, #0]
   82cb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82cb2:	683b      	ldr	r3, [r7, #0]
   82cb4:	687a      	ldr	r2, [r7, #4]
   82cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82cb8:	687b      	ldr	r3, [r7, #4]
   82cba:	681b      	ldr	r3, [r3, #0]
   82cbc:	1c5a      	adds	r2, r3, #1
   82cbe:	687b      	ldr	r3, [r7, #4]
   82cc0:	601a      	str	r2, [r3, #0]
}
   82cc2:	3714      	adds	r7, #20
   82cc4:	46bd      	mov	sp, r7
   82cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82cca:	4770      	bx	lr

00082ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82ccc:	b480      	push	{r7}
   82cce:	b085      	sub	sp, #20
   82cd0:	af00      	add	r7, sp, #0
   82cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82cd4:	687b      	ldr	r3, [r7, #4]
   82cd6:	691b      	ldr	r3, [r3, #16]
   82cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82cda:	687b      	ldr	r3, [r7, #4]
   82cdc:	685b      	ldr	r3, [r3, #4]
   82cde:	687a      	ldr	r2, [r7, #4]
   82ce0:	6892      	ldr	r2, [r2, #8]
   82ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82ce4:	687b      	ldr	r3, [r7, #4]
   82ce6:	689b      	ldr	r3, [r3, #8]
   82ce8:	687a      	ldr	r2, [r7, #4]
   82cea:	6852      	ldr	r2, [r2, #4]
   82cec:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82cee:	68fb      	ldr	r3, [r7, #12]
   82cf0:	685a      	ldr	r2, [r3, #4]
   82cf2:	687b      	ldr	r3, [r7, #4]
   82cf4:	429a      	cmp	r2, r3
   82cf6:	d103      	bne.n	82d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82cf8:	687b      	ldr	r3, [r7, #4]
   82cfa:	689a      	ldr	r2, [r3, #8]
   82cfc:	68fb      	ldr	r3, [r7, #12]
   82cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82d00:	687b      	ldr	r3, [r7, #4]
   82d02:	2200      	movs	r2, #0
   82d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82d06:	68fb      	ldr	r3, [r7, #12]
   82d08:	681b      	ldr	r3, [r3, #0]
   82d0a:	1e5a      	subs	r2, r3, #1
   82d0c:	68fb      	ldr	r3, [r7, #12]
   82d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82d10:	68fb      	ldr	r3, [r7, #12]
   82d12:	681b      	ldr	r3, [r3, #0]
}
   82d14:	4618      	mov	r0, r3
   82d16:	3714      	adds	r7, #20
   82d18:	46bd      	mov	sp, r7
   82d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d1e:	4770      	bx	lr

00082d20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   82d20:	b480      	push	{r7}
   82d22:	b085      	sub	sp, #20
   82d24:	af00      	add	r7, sp, #0
   82d26:	60f8      	str	r0, [r7, #12]
   82d28:	60b9      	str	r1, [r7, #8]
   82d2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   82d2c:	68fb      	ldr	r3, [r7, #12]
   82d2e:	3b04      	subs	r3, #4
   82d30:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   82d32:	68fb      	ldr	r3, [r7, #12]
   82d34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   82d38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82d3a:	68fb      	ldr	r3, [r7, #12]
   82d3c:	3b04      	subs	r3, #4
   82d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   82d40:	68ba      	ldr	r2, [r7, #8]
   82d42:	68fb      	ldr	r3, [r7, #12]
   82d44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82d46:	68fb      	ldr	r3, [r7, #12]
   82d48:	3b04      	subs	r3, #4
   82d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   82d4c:	4a09      	ldr	r2, [pc, #36]	; (82d74 <pxPortInitialiseStack+0x54>)
   82d4e:	68fb      	ldr	r3, [r7, #12]
   82d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   82d52:	68fb      	ldr	r3, [r7, #12]
   82d54:	3b14      	subs	r3, #20
   82d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   82d58:	687a      	ldr	r2, [r7, #4]
   82d5a:	68fb      	ldr	r3, [r7, #12]
   82d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   82d5e:	68fb      	ldr	r3, [r7, #12]
   82d60:	3b20      	subs	r3, #32
   82d62:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   82d64:	68fb      	ldr	r3, [r7, #12]
}
   82d66:	4618      	mov	r0, r3
   82d68:	3714      	adds	r7, #20
   82d6a:	46bd      	mov	sp, r7
   82d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d70:	4770      	bx	lr
   82d72:	bf00      	nop
   82d74:	00082d79 	.word	0x00082d79

00082d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   82d78:	b580      	push	{r7, lr}
   82d7a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82d7c:	4b05      	ldr	r3, [pc, #20]	; (82d94 <prvTaskExitError+0x1c>)
   82d7e:	681b      	ldr	r3, [r3, #0]
   82d80:	f1b3 3fff 	cmp.w	r3, #4294967295
   82d84:	d002      	beq.n	82d8c <prvTaskExitError+0x14>
   82d86:	4b04      	ldr	r3, [pc, #16]	; (82d98 <prvTaskExitError+0x20>)
   82d88:	4798      	blx	r3
   82d8a:	e7fe      	b.n	82d8a <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82d8c:	4b02      	ldr	r3, [pc, #8]	; (82d98 <prvTaskExitError+0x20>)
   82d8e:	4798      	blx	r3
	for( ;; );
   82d90:	e7fe      	b.n	82d90 <prvTaskExitError+0x18>
   82d92:	bf00      	nop
   82d94:	20070004 	.word	0x20070004
   82d98:	00082f45 	.word	0x00082f45

00082d9c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82d9c:	4b07      	ldr	r3, [pc, #28]	; (82dbc <pxCurrentTCBConst2>)
   82d9e:	6819      	ldr	r1, [r3, #0]
   82da0:	6808      	ldr	r0, [r1, #0]
   82da2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82da6:	f380 8809 	msr	PSP, r0
   82daa:	f3bf 8f6f 	isb	sy
   82dae:	f04f 0000 	mov.w	r0, #0
   82db2:	f380 8811 	msr	BASEPRI, r0
   82db6:	f04e 0e0d 	orr.w	lr, lr, #13
   82dba:	4770      	bx	lr

00082dbc <pxCurrentTCBConst2>:
   82dbc:	2007a508 	.word	0x2007a508

00082dc0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   82dc0:	4806      	ldr	r0, [pc, #24]	; (82ddc <prvPortStartFirstTask+0x1c>)
   82dc2:	6800      	ldr	r0, [r0, #0]
   82dc4:	6800      	ldr	r0, [r0, #0]
   82dc6:	f380 8808 	msr	MSP, r0
   82dca:	b662      	cpsie	i
   82dcc:	b661      	cpsie	f
   82dce:	f3bf 8f4f 	dsb	sy
   82dd2:	f3bf 8f6f 	isb	sy
   82dd6:	df00      	svc	0
   82dd8:	bf00      	nop
   82dda:	0000      	.short	0x0000
   82ddc:	e000ed08 	.word	0xe000ed08

00082de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   82de0:	b580      	push	{r7, lr}
   82de2:	b084      	sub	sp, #16
   82de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   82de6:	4b28      	ldr	r3, [pc, #160]	; (82e88 <xPortStartScheduler+0xa8>)
   82de8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   82dea:	68fb      	ldr	r3, [r7, #12]
   82dec:	781b      	ldrb	r3, [r3, #0]
   82dee:	b2db      	uxtb	r3, r3
   82df0:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   82df2:	68fb      	ldr	r3, [r7, #12]
   82df4:	22ff      	movs	r2, #255	; 0xff
   82df6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   82df8:	68fb      	ldr	r3, [r7, #12]
   82dfa:	781b      	ldrb	r3, [r3, #0]
   82dfc:	b2db      	uxtb	r3, r3
   82dfe:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   82e00:	79fb      	ldrb	r3, [r7, #7]
   82e02:	b2db      	uxtb	r3, r3
   82e04:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   82e08:	b2da      	uxtb	r2, r3
   82e0a:	4b20      	ldr	r3, [pc, #128]	; (82e8c <xPortStartScheduler+0xac>)
   82e0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   82e0e:	4b20      	ldr	r3, [pc, #128]	; (82e90 <xPortStartScheduler+0xb0>)
   82e10:	2207      	movs	r2, #7
   82e12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82e14:	e009      	b.n	82e2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   82e16:	4b1e      	ldr	r3, [pc, #120]	; (82e90 <xPortStartScheduler+0xb0>)
   82e18:	681b      	ldr	r3, [r3, #0]
   82e1a:	1e5a      	subs	r2, r3, #1
   82e1c:	4b1c      	ldr	r3, [pc, #112]	; (82e90 <xPortStartScheduler+0xb0>)
   82e1e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   82e20:	79fb      	ldrb	r3, [r7, #7]
   82e22:	b2db      	uxtb	r3, r3
   82e24:	005b      	lsls	r3, r3, #1
   82e26:	b2db      	uxtb	r3, r3
   82e28:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   82e2a:	79fb      	ldrb	r3, [r7, #7]
   82e2c:	b2db      	uxtb	r3, r3
   82e2e:	b2db      	uxtb	r3, r3
   82e30:	b25b      	sxtb	r3, r3
   82e32:	2b00      	cmp	r3, #0
   82e34:	dbef      	blt.n	82e16 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   82e36:	4b16      	ldr	r3, [pc, #88]	; (82e90 <xPortStartScheduler+0xb0>)
   82e38:	681b      	ldr	r3, [r3, #0]
   82e3a:	021a      	lsls	r2, r3, #8
   82e3c:	4b14      	ldr	r3, [pc, #80]	; (82e90 <xPortStartScheduler+0xb0>)
   82e3e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   82e40:	4b13      	ldr	r3, [pc, #76]	; (82e90 <xPortStartScheduler+0xb0>)
   82e42:	681b      	ldr	r3, [r3, #0]
   82e44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82e48:	4b11      	ldr	r3, [pc, #68]	; (82e90 <xPortStartScheduler+0xb0>)
   82e4a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   82e4c:	68bb      	ldr	r3, [r7, #8]
   82e4e:	b2da      	uxtb	r2, r3
   82e50:	68fb      	ldr	r3, [r7, #12]
   82e52:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   82e54:	4b0f      	ldr	r3, [pc, #60]	; (82e94 <xPortStartScheduler+0xb4>)
   82e56:	4a0f      	ldr	r2, [pc, #60]	; (82e94 <xPortStartScheduler+0xb4>)
   82e58:	6812      	ldr	r2, [r2, #0]
   82e5a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   82e5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   82e60:	4b0c      	ldr	r3, [pc, #48]	; (82e94 <xPortStartScheduler+0xb4>)
   82e62:	4a0c      	ldr	r2, [pc, #48]	; (82e94 <xPortStartScheduler+0xb4>)
   82e64:	6812      	ldr	r2, [r2, #0]
   82e66:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   82e6a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   82e6c:	4b0a      	ldr	r3, [pc, #40]	; (82e98 <xPortStartScheduler+0xb8>)
   82e6e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   82e70:	4b0a      	ldr	r3, [pc, #40]	; (82e9c <xPortStartScheduler+0xbc>)
   82e72:	2200      	movs	r2, #0
   82e74:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   82e76:	4b0a      	ldr	r3, [pc, #40]	; (82ea0 <xPortStartScheduler+0xc0>)
   82e78:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   82e7a:	4b0a      	ldr	r3, [pc, #40]	; (82ea4 <xPortStartScheduler+0xc4>)
   82e7c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   82e7e:	2300      	movs	r3, #0
}
   82e80:	4618      	mov	r0, r3
   82e82:	3710      	adds	r7, #16
   82e84:	46bd      	mov	sp, r7
   82e86:	bd80      	pop	{r7, pc}
   82e88:	e000e400 	.word	0xe000e400
   82e8c:	200704e8 	.word	0x200704e8
   82e90:	200704ec 	.word	0x200704ec
   82e94:	e000ed20 	.word	0xe000ed20
   82e98:	00082fd9 	.word	0x00082fd9
   82e9c:	20070004 	.word	0x20070004
   82ea0:	00082dc1 	.word	0x00082dc1
   82ea4:	00082d79 	.word	0x00082d79

00082ea8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   82ea8:	b480      	push	{r7}
   82eaa:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82eac:	4b05      	ldr	r3, [pc, #20]	; (82ec4 <vPortYield+0x1c>)
   82eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82eb2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   82eb4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82eb8:	f3bf 8f6f 	isb	sy
}
   82ebc:	46bd      	mov	sp, r7
   82ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ec2:	4770      	bx	lr
   82ec4:	e000ed04 	.word	0xe000ed04

00082ec8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82ec8:	b580      	push	{r7, lr}
   82eca:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   82ecc:	4b0c      	ldr	r3, [pc, #48]	; (82f00 <vPortEnterCritical+0x38>)
   82ece:	4798      	blx	r3
	uxCriticalNesting++;
   82ed0:	4b0c      	ldr	r3, [pc, #48]	; (82f04 <vPortEnterCritical+0x3c>)
   82ed2:	681b      	ldr	r3, [r3, #0]
   82ed4:	1c5a      	adds	r2, r3, #1
   82ed6:	4b0b      	ldr	r3, [pc, #44]	; (82f04 <vPortEnterCritical+0x3c>)
   82ed8:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   82eda:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82ede:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   82ee2:	4b08      	ldr	r3, [pc, #32]	; (82f04 <vPortEnterCritical+0x3c>)
   82ee4:	681b      	ldr	r3, [r3, #0]
   82ee6:	2b01      	cmp	r3, #1
   82ee8:	d108      	bne.n	82efc <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   82eea:	4b07      	ldr	r3, [pc, #28]	; (82f08 <vPortEnterCritical+0x40>)
   82eec:	681b      	ldr	r3, [r3, #0]
   82eee:	f003 031f 	and.w	r3, r3, #31
   82ef2:	2b00      	cmp	r3, #0
   82ef4:	d002      	beq.n	82efc <vPortEnterCritical+0x34>
   82ef6:	4b02      	ldr	r3, [pc, #8]	; (82f00 <vPortEnterCritical+0x38>)
   82ef8:	4798      	blx	r3
   82efa:	e7fe      	b.n	82efa <vPortEnterCritical+0x32>
	}
}
   82efc:	bd80      	pop	{r7, pc}
   82efe:	bf00      	nop
   82f00:	00082f45 	.word	0x00082f45
   82f04:	20070004 	.word	0x20070004
   82f08:	e000ed04 	.word	0xe000ed04

00082f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82f0c:	b580      	push	{r7, lr}
   82f0e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   82f10:	4b09      	ldr	r3, [pc, #36]	; (82f38 <vPortExitCritical+0x2c>)
   82f12:	681b      	ldr	r3, [r3, #0]
   82f14:	2b00      	cmp	r3, #0
   82f16:	d102      	bne.n	82f1e <vPortExitCritical+0x12>
   82f18:	4b08      	ldr	r3, [pc, #32]	; (82f3c <vPortExitCritical+0x30>)
   82f1a:	4798      	blx	r3
   82f1c:	e7fe      	b.n	82f1c <vPortExitCritical+0x10>
	uxCriticalNesting--;
   82f1e:	4b06      	ldr	r3, [pc, #24]	; (82f38 <vPortExitCritical+0x2c>)
   82f20:	681b      	ldr	r3, [r3, #0]
   82f22:	1e5a      	subs	r2, r3, #1
   82f24:	4b04      	ldr	r3, [pc, #16]	; (82f38 <vPortExitCritical+0x2c>)
   82f26:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   82f28:	4b03      	ldr	r3, [pc, #12]	; (82f38 <vPortExitCritical+0x2c>)
   82f2a:	681b      	ldr	r3, [r3, #0]
   82f2c:	2b00      	cmp	r3, #0
   82f2e:	d102      	bne.n	82f36 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   82f30:	2000      	movs	r0, #0
   82f32:	4b03      	ldr	r3, [pc, #12]	; (82f40 <vPortExitCritical+0x34>)
   82f34:	4798      	blx	r3
	}
}
   82f36:	bd80      	pop	{r7, pc}
   82f38:	20070004 	.word	0x20070004
   82f3c:	00082f45 	.word	0x00082f45
   82f40:	00082f59 	.word	0x00082f59

00082f44 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82f44:	f3ef 8011 	mrs	r0, BASEPRI
   82f48:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82f4c:	f381 8811 	msr	BASEPRI, r1
   82f50:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   82f52:	2300      	movs	r3, #0
}
   82f54:	4618      	mov	r0, r3
   82f56:	bf00      	nop

00082f58 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   82f58:	f380 8811 	msr	BASEPRI, r0
   82f5c:	4770      	bx	lr
   82f5e:	bf00      	nop

00082f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   82f60:	f3ef 8009 	mrs	r0, PSP
   82f64:	f3bf 8f6f 	isb	sy
   82f68:	4b0d      	ldr	r3, [pc, #52]	; (82fa0 <pxCurrentTCBConst>)
   82f6a:	681a      	ldr	r2, [r3, #0]
   82f6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82f70:	6010      	str	r0, [r2, #0]
   82f72:	e92d 4008 	stmdb	sp!, {r3, lr}
   82f76:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82f7a:	f380 8811 	msr	BASEPRI, r0
   82f7e:	f001 f90f 	bl	841a0 <vTaskSwitchContext>
   82f82:	f04f 0000 	mov.w	r0, #0
   82f86:	f380 8811 	msr	BASEPRI, r0
   82f8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82f8e:	6819      	ldr	r1, [r3, #0]
   82f90:	6808      	ldr	r0, [r1, #0]
   82f92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82f96:	f380 8809 	msr	PSP, r0
   82f9a:	f3bf 8f6f 	isb	sy
   82f9e:	4770      	bx	lr

00082fa0 <pxCurrentTCBConst>:
   82fa0:	2007a508 	.word	0x2007a508

00082fa4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   82fa4:	b580      	push	{r7, lr}
   82fa6:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82fa8:	4b07      	ldr	r3, [pc, #28]	; (82fc8 <SysTick_Handler+0x24>)
   82faa:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82fac:	4b07      	ldr	r3, [pc, #28]	; (82fcc <SysTick_Handler+0x28>)
   82fae:	4798      	blx	r3
   82fb0:	4603      	mov	r3, r0
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	d003      	beq.n	82fbe <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82fb6:	4b06      	ldr	r3, [pc, #24]	; (82fd0 <SysTick_Handler+0x2c>)
   82fb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82fbc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   82fbe:	2000      	movs	r0, #0
   82fc0:	4b04      	ldr	r3, [pc, #16]	; (82fd4 <SysTick_Handler+0x30>)
   82fc2:	4798      	blx	r3
}
   82fc4:	bd80      	pop	{r7, pc}
   82fc6:	bf00      	nop
   82fc8:	00082f45 	.word	0x00082f45
   82fcc:	00084025 	.word	0x00084025
   82fd0:	e000ed04 	.word	0xe000ed04
   82fd4:	00082f59 	.word	0x00082f59

00082fd8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   82fd8:	b480      	push	{r7}
   82fda:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   82fdc:	4b07      	ldr	r3, [pc, #28]	; (82ffc <vPortSetupTimerInterrupt+0x24>)
   82fde:	4a08      	ldr	r2, [pc, #32]	; (83000 <vPortSetupTimerInterrupt+0x28>)
   82fe0:	6811      	ldr	r1, [r2, #0]
   82fe2:	4a08      	ldr	r2, [pc, #32]	; (83004 <vPortSetupTimerInterrupt+0x2c>)
   82fe4:	fba2 0201 	umull	r0, r2, r2, r1
   82fe8:	0992      	lsrs	r2, r2, #6
   82fea:	3a01      	subs	r2, #1
   82fec:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   82fee:	4b06      	ldr	r3, [pc, #24]	; (83008 <vPortSetupTimerInterrupt+0x30>)
   82ff0:	2207      	movs	r2, #7
   82ff2:	601a      	str	r2, [r3, #0]
}
   82ff4:	46bd      	mov	sp, r7
   82ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ffa:	4770      	bx	lr
   82ffc:	e000e014 	.word	0xe000e014
   83000:	20070000 	.word	0x20070000
   83004:	10624dd3 	.word	0x10624dd3
   83008:	e000e010 	.word	0xe000e010

0008300c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   8300c:	b580      	push	{r7, lr}
   8300e:	b082      	sub	sp, #8
   83010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   83012:	f3ef 8305 	mrs	r3, IPSR
   83016:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   83018:	687b      	ldr	r3, [r7, #4]
   8301a:	2b0f      	cmp	r3, #15
   8301c:	d90c      	bls.n	83038 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   8301e:	4a0d      	ldr	r2, [pc, #52]	; (83054 <vPortValidateInterruptPriority+0x48>)
   83020:	687b      	ldr	r3, [r7, #4]
   83022:	4413      	add	r3, r2
   83024:	781b      	ldrb	r3, [r3, #0]
   83026:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83028:	4b0b      	ldr	r3, [pc, #44]	; (83058 <vPortValidateInterruptPriority+0x4c>)
   8302a:	781b      	ldrb	r3, [r3, #0]
   8302c:	78fa      	ldrb	r2, [r7, #3]
   8302e:	429a      	cmp	r2, r3
   83030:	d202      	bcs.n	83038 <vPortValidateInterruptPriority+0x2c>
   83032:	4b0a      	ldr	r3, [pc, #40]	; (8305c <vPortValidateInterruptPriority+0x50>)
   83034:	4798      	blx	r3
   83036:	e7fe      	b.n	83036 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   83038:	4b09      	ldr	r3, [pc, #36]	; (83060 <vPortValidateInterruptPriority+0x54>)
   8303a:	681b      	ldr	r3, [r3, #0]
   8303c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   83040:	4b08      	ldr	r3, [pc, #32]	; (83064 <vPortValidateInterruptPriority+0x58>)
   83042:	681b      	ldr	r3, [r3, #0]
   83044:	429a      	cmp	r2, r3
   83046:	d902      	bls.n	8304e <vPortValidateInterruptPriority+0x42>
   83048:	4b04      	ldr	r3, [pc, #16]	; (8305c <vPortValidateInterruptPriority+0x50>)
   8304a:	4798      	blx	r3
   8304c:	e7fe      	b.n	8304c <vPortValidateInterruptPriority+0x40>
	}
   8304e:	3708      	adds	r7, #8
   83050:	46bd      	mov	sp, r7
   83052:	bd80      	pop	{r7, pc}
   83054:	e000e3f0 	.word	0xe000e3f0
   83058:	200704e8 	.word	0x200704e8
   8305c:	00082f45 	.word	0x00082f45
   83060:	e000ed0c 	.word	0xe000ed0c
   83064:	200704ec 	.word	0x200704ec

00083068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   83068:	b580      	push	{r7, lr}
   8306a:	b086      	sub	sp, #24
   8306c:	af00      	add	r7, sp, #0
   8306e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   83070:	2300      	movs	r3, #0
   83072:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   83074:	4b4f      	ldr	r3, [pc, #316]	; (831b4 <pvPortMalloc+0x14c>)
   83076:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   83078:	4b4f      	ldr	r3, [pc, #316]	; (831b8 <pvPortMalloc+0x150>)
   8307a:	681b      	ldr	r3, [r3, #0]
   8307c:	2b00      	cmp	r3, #0
   8307e:	d101      	bne.n	83084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   83080:	4b4e      	ldr	r3, [pc, #312]	; (831bc <pvPortMalloc+0x154>)
   83082:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   83084:	4b4e      	ldr	r3, [pc, #312]	; (831c0 <pvPortMalloc+0x158>)
   83086:	681a      	ldr	r2, [r3, #0]
   83088:	687b      	ldr	r3, [r7, #4]
   8308a:	4013      	ands	r3, r2
   8308c:	2b00      	cmp	r3, #0
   8308e:	d17d      	bne.n	8318c <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   83090:	687b      	ldr	r3, [r7, #4]
   83092:	2b00      	cmp	r3, #0
   83094:	d015      	beq.n	830c2 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   83096:	2308      	movs	r3, #8
   83098:	687a      	ldr	r2, [r7, #4]
   8309a:	4413      	add	r3, r2
   8309c:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   8309e:	687b      	ldr	r3, [r7, #4]
   830a0:	f003 0307 	and.w	r3, r3, #7
   830a4:	2b00      	cmp	r3, #0
   830a6:	d00c      	beq.n	830c2 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   830a8:	687b      	ldr	r3, [r7, #4]
   830aa:	f023 0307 	bic.w	r3, r3, #7
   830ae:	3308      	adds	r3, #8
   830b0:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   830b2:	687b      	ldr	r3, [r7, #4]
   830b4:	f003 0307 	and.w	r3, r3, #7
   830b8:	2b00      	cmp	r3, #0
   830ba:	d002      	beq.n	830c2 <pvPortMalloc+0x5a>
   830bc:	4b41      	ldr	r3, [pc, #260]	; (831c4 <pvPortMalloc+0x15c>)
   830be:	4798      	blx	r3
   830c0:	e7fe      	b.n	830c0 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   830c2:	687b      	ldr	r3, [r7, #4]
   830c4:	2b00      	cmp	r3, #0
   830c6:	d061      	beq.n	8318c <pvPortMalloc+0x124>
   830c8:	4b3f      	ldr	r3, [pc, #252]	; (831c8 <pvPortMalloc+0x160>)
   830ca:	681b      	ldr	r3, [r3, #0]
   830cc:	687a      	ldr	r2, [r7, #4]
   830ce:	429a      	cmp	r2, r3
   830d0:	d85c      	bhi.n	8318c <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   830d2:	4b3e      	ldr	r3, [pc, #248]	; (831cc <pvPortMalloc+0x164>)
   830d4:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   830d6:	4b3d      	ldr	r3, [pc, #244]	; (831cc <pvPortMalloc+0x164>)
   830d8:	681b      	ldr	r3, [r3, #0]
   830da:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   830dc:	e004      	b.n	830e8 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   830de:	697b      	ldr	r3, [r7, #20]
   830e0:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   830e2:	697b      	ldr	r3, [r7, #20]
   830e4:	681b      	ldr	r3, [r3, #0]
   830e6:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   830e8:	697b      	ldr	r3, [r7, #20]
   830ea:	685a      	ldr	r2, [r3, #4]
   830ec:	687b      	ldr	r3, [r7, #4]
   830ee:	429a      	cmp	r2, r3
   830f0:	d203      	bcs.n	830fa <pvPortMalloc+0x92>
   830f2:	697b      	ldr	r3, [r7, #20]
   830f4:	681b      	ldr	r3, [r3, #0]
   830f6:	2b00      	cmp	r3, #0
   830f8:	d1f1      	bne.n	830de <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   830fa:	4b2f      	ldr	r3, [pc, #188]	; (831b8 <pvPortMalloc+0x150>)
   830fc:	681b      	ldr	r3, [r3, #0]
   830fe:	697a      	ldr	r2, [r7, #20]
   83100:	429a      	cmp	r2, r3
   83102:	d043      	beq.n	8318c <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   83104:	693b      	ldr	r3, [r7, #16]
   83106:	681a      	ldr	r2, [r3, #0]
   83108:	2308      	movs	r3, #8
   8310a:	4413      	add	r3, r2
   8310c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   8310e:	697b      	ldr	r3, [r7, #20]
   83110:	681a      	ldr	r2, [r3, #0]
   83112:	693b      	ldr	r3, [r7, #16]
   83114:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   83116:	697b      	ldr	r3, [r7, #20]
   83118:	685a      	ldr	r2, [r3, #4]
   8311a:	687b      	ldr	r3, [r7, #4]
   8311c:	1ad2      	subs	r2, r2, r3
   8311e:	2308      	movs	r3, #8
   83120:	005b      	lsls	r3, r3, #1
   83122:	429a      	cmp	r2, r3
   83124:	d917      	bls.n	83156 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   83126:	697a      	ldr	r2, [r7, #20]
   83128:	687b      	ldr	r3, [r7, #4]
   8312a:	4413      	add	r3, r2
   8312c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8312e:	68bb      	ldr	r3, [r7, #8]
   83130:	f003 0307 	and.w	r3, r3, #7
   83134:	2b00      	cmp	r3, #0
   83136:	d002      	beq.n	8313e <pvPortMalloc+0xd6>
   83138:	4b22      	ldr	r3, [pc, #136]	; (831c4 <pvPortMalloc+0x15c>)
   8313a:	4798      	blx	r3
   8313c:	e7fe      	b.n	8313c <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   8313e:	697b      	ldr	r3, [r7, #20]
   83140:	685a      	ldr	r2, [r3, #4]
   83142:	687b      	ldr	r3, [r7, #4]
   83144:	1ad2      	subs	r2, r2, r3
   83146:	68bb      	ldr	r3, [r7, #8]
   83148:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   8314a:	697b      	ldr	r3, [r7, #20]
   8314c:	687a      	ldr	r2, [r7, #4]
   8314e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   83150:	68b8      	ldr	r0, [r7, #8]
   83152:	4b1f      	ldr	r3, [pc, #124]	; (831d0 <pvPortMalloc+0x168>)
   83154:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   83156:	4b1c      	ldr	r3, [pc, #112]	; (831c8 <pvPortMalloc+0x160>)
   83158:	681a      	ldr	r2, [r3, #0]
   8315a:	697b      	ldr	r3, [r7, #20]
   8315c:	685b      	ldr	r3, [r3, #4]
   8315e:	1ad2      	subs	r2, r2, r3
   83160:	4b19      	ldr	r3, [pc, #100]	; (831c8 <pvPortMalloc+0x160>)
   83162:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   83164:	4b18      	ldr	r3, [pc, #96]	; (831c8 <pvPortMalloc+0x160>)
   83166:	681a      	ldr	r2, [r3, #0]
   83168:	4b1a      	ldr	r3, [pc, #104]	; (831d4 <pvPortMalloc+0x16c>)
   8316a:	681b      	ldr	r3, [r3, #0]
   8316c:	429a      	cmp	r2, r3
   8316e:	d203      	bcs.n	83178 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   83170:	4b15      	ldr	r3, [pc, #84]	; (831c8 <pvPortMalloc+0x160>)
   83172:	681a      	ldr	r2, [r3, #0]
   83174:	4b17      	ldr	r3, [pc, #92]	; (831d4 <pvPortMalloc+0x16c>)
   83176:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   83178:	697b      	ldr	r3, [r7, #20]
   8317a:	685a      	ldr	r2, [r3, #4]
   8317c:	4b10      	ldr	r3, [pc, #64]	; (831c0 <pvPortMalloc+0x158>)
   8317e:	681b      	ldr	r3, [r3, #0]
   83180:	431a      	orrs	r2, r3
   83182:	697b      	ldr	r3, [r7, #20]
   83184:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   83186:	697b      	ldr	r3, [r7, #20]
   83188:	2200      	movs	r2, #0
   8318a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   8318c:	4b12      	ldr	r3, [pc, #72]	; (831d8 <pvPortMalloc+0x170>)
   8318e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   83190:	68fb      	ldr	r3, [r7, #12]
   83192:	2b00      	cmp	r3, #0
   83194:	d101      	bne.n	8319a <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   83196:	4b11      	ldr	r3, [pc, #68]	; (831dc <pvPortMalloc+0x174>)
   83198:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   8319a:	68fb      	ldr	r3, [r7, #12]
   8319c:	f003 0307 	and.w	r3, r3, #7
   831a0:	2b00      	cmp	r3, #0
   831a2:	d002      	beq.n	831aa <pvPortMalloc+0x142>
   831a4:	4b07      	ldr	r3, [pc, #28]	; (831c4 <pvPortMalloc+0x15c>)
   831a6:	4798      	blx	r3
   831a8:	e7fe      	b.n	831a8 <pvPortMalloc+0x140>
	return pvReturn;
   831aa:	68fb      	ldr	r3, [r7, #12]
}
   831ac:	4618      	mov	r0, r3
   831ae:	3718      	adds	r7, #24
   831b0:	46bd      	mov	sp, r7
   831b2:	bd80      	pop	{r7, pc}
   831b4:	00083eb9 	.word	0x00083eb9
   831b8:	2007a4f8 	.word	0x2007a4f8
   831bc:	00083285 	.word	0x00083285
   831c0:	2007a504 	.word	0x2007a504
   831c4:	00082f45 	.word	0x00082f45
   831c8:	2007a4fc 	.word	0x2007a4fc
   831cc:	2007a4f0 	.word	0x2007a4f0
   831d0:	00083349 	.word	0x00083349
   831d4:	2007a500 	.word	0x2007a500
   831d8:	00083ed5 	.word	0x00083ed5
   831dc:	00085fe9 	.word	0x00085fe9

000831e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   831e0:	b580      	push	{r7, lr}
   831e2:	b084      	sub	sp, #16
   831e4:	af00      	add	r7, sp, #0
   831e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   831e8:	687b      	ldr	r3, [r7, #4]
   831ea:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   831ec:	687b      	ldr	r3, [r7, #4]
   831ee:	2b00      	cmp	r3, #0
   831f0:	d038      	beq.n	83264 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   831f2:	2308      	movs	r3, #8
   831f4:	425b      	negs	r3, r3
   831f6:	68fa      	ldr	r2, [r7, #12]
   831f8:	4413      	add	r3, r2
   831fa:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   831fc:	68fb      	ldr	r3, [r7, #12]
   831fe:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   83200:	68bb      	ldr	r3, [r7, #8]
   83202:	685a      	ldr	r2, [r3, #4]
   83204:	4b19      	ldr	r3, [pc, #100]	; (8326c <vPortFree+0x8c>)
   83206:	681b      	ldr	r3, [r3, #0]
   83208:	4013      	ands	r3, r2
   8320a:	2b00      	cmp	r3, #0
   8320c:	d102      	bne.n	83214 <vPortFree+0x34>
   8320e:	4b18      	ldr	r3, [pc, #96]	; (83270 <vPortFree+0x90>)
   83210:	4798      	blx	r3
   83212:	e7fe      	b.n	83212 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   83214:	68bb      	ldr	r3, [r7, #8]
   83216:	681b      	ldr	r3, [r3, #0]
   83218:	2b00      	cmp	r3, #0
   8321a:	d002      	beq.n	83222 <vPortFree+0x42>
   8321c:	4b14      	ldr	r3, [pc, #80]	; (83270 <vPortFree+0x90>)
   8321e:	4798      	blx	r3
   83220:	e7fe      	b.n	83220 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   83222:	68bb      	ldr	r3, [r7, #8]
   83224:	685a      	ldr	r2, [r3, #4]
   83226:	4b11      	ldr	r3, [pc, #68]	; (8326c <vPortFree+0x8c>)
   83228:	681b      	ldr	r3, [r3, #0]
   8322a:	4013      	ands	r3, r2
   8322c:	2b00      	cmp	r3, #0
   8322e:	d019      	beq.n	83264 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   83230:	68bb      	ldr	r3, [r7, #8]
   83232:	681b      	ldr	r3, [r3, #0]
   83234:	2b00      	cmp	r3, #0
   83236:	d115      	bne.n	83264 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   83238:	68bb      	ldr	r3, [r7, #8]
   8323a:	685a      	ldr	r2, [r3, #4]
   8323c:	4b0b      	ldr	r3, [pc, #44]	; (8326c <vPortFree+0x8c>)
   8323e:	681b      	ldr	r3, [r3, #0]
   83240:	43db      	mvns	r3, r3
   83242:	401a      	ands	r2, r3
   83244:	68bb      	ldr	r3, [r7, #8]
   83246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   83248:	4b0a      	ldr	r3, [pc, #40]	; (83274 <vPortFree+0x94>)
   8324a:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   8324c:	68bb      	ldr	r3, [r7, #8]
   8324e:	685a      	ldr	r2, [r3, #4]
   83250:	4b09      	ldr	r3, [pc, #36]	; (83278 <vPortFree+0x98>)
   83252:	681b      	ldr	r3, [r3, #0]
   83254:	441a      	add	r2, r3
   83256:	4b08      	ldr	r3, [pc, #32]	; (83278 <vPortFree+0x98>)
   83258:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   8325a:	68b8      	ldr	r0, [r7, #8]
   8325c:	4b07      	ldr	r3, [pc, #28]	; (8327c <vPortFree+0x9c>)
   8325e:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   83260:	4b07      	ldr	r3, [pc, #28]	; (83280 <vPortFree+0xa0>)
   83262:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   83264:	3710      	adds	r7, #16
   83266:	46bd      	mov	sp, r7
   83268:	bd80      	pop	{r7, pc}
   8326a:	bf00      	nop
   8326c:	2007a504 	.word	0x2007a504
   83270:	00082f45 	.word	0x00082f45
   83274:	00083eb9 	.word	0x00083eb9
   83278:	2007a4fc 	.word	0x2007a4fc
   8327c:	00083349 	.word	0x00083349
   83280:	00083ed5 	.word	0x00083ed5

00083284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   83284:	b480      	push	{r7}
   83286:	b085      	sub	sp, #20
   83288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   8328a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   8328e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   83290:	4b27      	ldr	r3, [pc, #156]	; (83330 <prvHeapInit+0xac>)
   83292:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   83294:	68fb      	ldr	r3, [r7, #12]
   83296:	f003 0307 	and.w	r3, r3, #7
   8329a:	2b00      	cmp	r3, #0
   8329c:	d00c      	beq.n	832b8 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   8329e:	68fb      	ldr	r3, [r7, #12]
   832a0:	3307      	adds	r3, #7
   832a2:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   832a4:	68fb      	ldr	r3, [r7, #12]
   832a6:	f023 0307 	bic.w	r3, r3, #7
   832aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   832ac:	68ba      	ldr	r2, [r7, #8]
   832ae:	68fb      	ldr	r3, [r7, #12]
   832b0:	1ad2      	subs	r2, r2, r3
   832b2:	4b1f      	ldr	r3, [pc, #124]	; (83330 <prvHeapInit+0xac>)
   832b4:	4413      	add	r3, r2
   832b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   832b8:	68fb      	ldr	r3, [r7, #12]
   832ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   832bc:	4b1d      	ldr	r3, [pc, #116]	; (83334 <prvHeapInit+0xb0>)
   832be:	687a      	ldr	r2, [r7, #4]
   832c0:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   832c2:	4b1c      	ldr	r3, [pc, #112]	; (83334 <prvHeapInit+0xb0>)
   832c4:	2200      	movs	r2, #0
   832c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   832c8:	687a      	ldr	r2, [r7, #4]
   832ca:	68bb      	ldr	r3, [r7, #8]
   832cc:	4413      	add	r3, r2
   832ce:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   832d0:	2308      	movs	r3, #8
   832d2:	68fa      	ldr	r2, [r7, #12]
   832d4:	1ad3      	subs	r3, r2, r3
   832d6:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   832d8:	68fb      	ldr	r3, [r7, #12]
   832da:	f023 0307 	bic.w	r3, r3, #7
   832de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   832e0:	68fa      	ldr	r2, [r7, #12]
   832e2:	4b15      	ldr	r3, [pc, #84]	; (83338 <prvHeapInit+0xb4>)
   832e4:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   832e6:	4b14      	ldr	r3, [pc, #80]	; (83338 <prvHeapInit+0xb4>)
   832e8:	681b      	ldr	r3, [r3, #0]
   832ea:	2200      	movs	r2, #0
   832ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   832ee:	4b12      	ldr	r3, [pc, #72]	; (83338 <prvHeapInit+0xb4>)
   832f0:	681b      	ldr	r3, [r3, #0]
   832f2:	2200      	movs	r2, #0
   832f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   832f6:	687b      	ldr	r3, [r7, #4]
   832f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   832fa:	683b      	ldr	r3, [r7, #0]
   832fc:	68fa      	ldr	r2, [r7, #12]
   832fe:	1ad2      	subs	r2, r2, r3
   83300:	683b      	ldr	r3, [r7, #0]
   83302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83304:	4b0c      	ldr	r3, [pc, #48]	; (83338 <prvHeapInit+0xb4>)
   83306:	681a      	ldr	r2, [r3, #0]
   83308:	683b      	ldr	r3, [r7, #0]
   8330a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8330c:	683b      	ldr	r3, [r7, #0]
   8330e:	685a      	ldr	r2, [r3, #4]
   83310:	4b0a      	ldr	r3, [pc, #40]	; (8333c <prvHeapInit+0xb8>)
   83312:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83314:	683b      	ldr	r3, [r7, #0]
   83316:	685a      	ldr	r2, [r3, #4]
   83318:	4b09      	ldr	r3, [pc, #36]	; (83340 <prvHeapInit+0xbc>)
   8331a:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   8331c:	4b09      	ldr	r3, [pc, #36]	; (83344 <prvHeapInit+0xc0>)
   8331e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   83322:	601a      	str	r2, [r3, #0]
}
   83324:	3714      	adds	r7, #20
   83326:	46bd      	mov	sp, r7
   83328:	f85d 7b04 	ldr.w	r7, [sp], #4
   8332c:	4770      	bx	lr
   8332e:	bf00      	nop
   83330:	200704f0 	.word	0x200704f0
   83334:	2007a4f0 	.word	0x2007a4f0
   83338:	2007a4f8 	.word	0x2007a4f8
   8333c:	2007a500 	.word	0x2007a500
   83340:	2007a4fc 	.word	0x2007a4fc
   83344:	2007a504 	.word	0x2007a504

00083348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   83348:	b480      	push	{r7}
   8334a:	b085      	sub	sp, #20
   8334c:	af00      	add	r7, sp, #0
   8334e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   83350:	4b27      	ldr	r3, [pc, #156]	; (833f0 <prvInsertBlockIntoFreeList+0xa8>)
   83352:	60fb      	str	r3, [r7, #12]
   83354:	e002      	b.n	8335c <prvInsertBlockIntoFreeList+0x14>
   83356:	68fb      	ldr	r3, [r7, #12]
   83358:	681b      	ldr	r3, [r3, #0]
   8335a:	60fb      	str	r3, [r7, #12]
   8335c:	68fb      	ldr	r3, [r7, #12]
   8335e:	681a      	ldr	r2, [r3, #0]
   83360:	687b      	ldr	r3, [r7, #4]
   83362:	429a      	cmp	r2, r3
   83364:	d3f7      	bcc.n	83356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   83366:	68fb      	ldr	r3, [r7, #12]
   83368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   8336a:	68fb      	ldr	r3, [r7, #12]
   8336c:	685b      	ldr	r3, [r3, #4]
   8336e:	68ba      	ldr	r2, [r7, #8]
   83370:	441a      	add	r2, r3
   83372:	687b      	ldr	r3, [r7, #4]
   83374:	429a      	cmp	r2, r3
   83376:	d108      	bne.n	8338a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   83378:	68fb      	ldr	r3, [r7, #12]
   8337a:	685a      	ldr	r2, [r3, #4]
   8337c:	687b      	ldr	r3, [r7, #4]
   8337e:	685b      	ldr	r3, [r3, #4]
   83380:	441a      	add	r2, r3
   83382:	68fb      	ldr	r3, [r7, #12]
   83384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   83386:	68fb      	ldr	r3, [r7, #12]
   83388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   8338a:	687b      	ldr	r3, [r7, #4]
   8338c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   8338e:	687b      	ldr	r3, [r7, #4]
   83390:	685b      	ldr	r3, [r3, #4]
   83392:	68ba      	ldr	r2, [r7, #8]
   83394:	441a      	add	r2, r3
   83396:	68fb      	ldr	r3, [r7, #12]
   83398:	681b      	ldr	r3, [r3, #0]
   8339a:	429a      	cmp	r2, r3
   8339c:	d118      	bne.n	833d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8339e:	68fb      	ldr	r3, [r7, #12]
   833a0:	681a      	ldr	r2, [r3, #0]
   833a2:	4b14      	ldr	r3, [pc, #80]	; (833f4 <prvInsertBlockIntoFreeList+0xac>)
   833a4:	681b      	ldr	r3, [r3, #0]
   833a6:	429a      	cmp	r2, r3
   833a8:	d00d      	beq.n	833c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   833aa:	687b      	ldr	r3, [r7, #4]
   833ac:	685a      	ldr	r2, [r3, #4]
   833ae:	68fb      	ldr	r3, [r7, #12]
   833b0:	681b      	ldr	r3, [r3, #0]
   833b2:	685b      	ldr	r3, [r3, #4]
   833b4:	441a      	add	r2, r3
   833b6:	687b      	ldr	r3, [r7, #4]
   833b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   833ba:	68fb      	ldr	r3, [r7, #12]
   833bc:	681b      	ldr	r3, [r3, #0]
   833be:	681a      	ldr	r2, [r3, #0]
   833c0:	687b      	ldr	r3, [r7, #4]
   833c2:	601a      	str	r2, [r3, #0]
   833c4:	e008      	b.n	833d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   833c6:	4b0b      	ldr	r3, [pc, #44]	; (833f4 <prvInsertBlockIntoFreeList+0xac>)
   833c8:	681a      	ldr	r2, [r3, #0]
   833ca:	687b      	ldr	r3, [r7, #4]
   833cc:	601a      	str	r2, [r3, #0]
   833ce:	e003      	b.n	833d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   833d0:	68fb      	ldr	r3, [r7, #12]
   833d2:	681a      	ldr	r2, [r3, #0]
   833d4:	687b      	ldr	r3, [r7, #4]
   833d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   833d8:	68fa      	ldr	r2, [r7, #12]
   833da:	687b      	ldr	r3, [r7, #4]
   833dc:	429a      	cmp	r2, r3
   833de:	d002      	beq.n	833e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   833e0:	68fb      	ldr	r3, [r7, #12]
   833e2:	687a      	ldr	r2, [r7, #4]
   833e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   833e6:	3714      	adds	r7, #20
   833e8:	46bd      	mov	sp, r7
   833ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   833ee:	4770      	bx	lr
   833f0:	2007a4f0 	.word	0x2007a4f0
   833f4:	2007a4f8 	.word	0x2007a4f8

000833f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   833f8:	b580      	push	{r7, lr}
   833fa:	b084      	sub	sp, #16
   833fc:	af00      	add	r7, sp, #0
   833fe:	6078      	str	r0, [r7, #4]
   83400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83402:	687b      	ldr	r3, [r7, #4]
   83404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   83406:	68fb      	ldr	r3, [r7, #12]
   83408:	2b00      	cmp	r3, #0
   8340a:	d102      	bne.n	83412 <xQueueGenericReset+0x1a>
   8340c:	4b26      	ldr	r3, [pc, #152]	; (834a8 <xQueueGenericReset+0xb0>)
   8340e:	4798      	blx	r3
   83410:	e7fe      	b.n	83410 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   83412:	4b26      	ldr	r3, [pc, #152]	; (834ac <xQueueGenericReset+0xb4>)
   83414:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   83416:	68fb      	ldr	r3, [r7, #12]
   83418:	681a      	ldr	r2, [r3, #0]
   8341a:	68fb      	ldr	r3, [r7, #12]
   8341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8341e:	68f9      	ldr	r1, [r7, #12]
   83420:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83422:	fb01 f303 	mul.w	r3, r1, r3
   83426:	441a      	add	r2, r3
   83428:	68fb      	ldr	r3, [r7, #12]
   8342a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   8342c:	68fb      	ldr	r3, [r7, #12]
   8342e:	2200      	movs	r2, #0
   83430:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   83432:	68fb      	ldr	r3, [r7, #12]
   83434:	681a      	ldr	r2, [r3, #0]
   83436:	68fb      	ldr	r3, [r7, #12]
   83438:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   8343a:	68fb      	ldr	r3, [r7, #12]
   8343c:	681a      	ldr	r2, [r3, #0]
   8343e:	68fb      	ldr	r3, [r7, #12]
   83440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83442:	3b01      	subs	r3, #1
   83444:	68f9      	ldr	r1, [r7, #12]
   83446:	6c09      	ldr	r1, [r1, #64]	; 0x40
   83448:	fb01 f303 	mul.w	r3, r1, r3
   8344c:	441a      	add	r2, r3
   8344e:	68fb      	ldr	r3, [r7, #12]
   83450:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   83452:	68fb      	ldr	r3, [r7, #12]
   83454:	f04f 32ff 	mov.w	r2, #4294967295
   83458:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8345a:	68fb      	ldr	r3, [r7, #12]
   8345c:	f04f 32ff 	mov.w	r2, #4294967295
   83460:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   83462:	683b      	ldr	r3, [r7, #0]
   83464:	2b00      	cmp	r3, #0
   83466:	d10e      	bne.n	83486 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83468:	68fb      	ldr	r3, [r7, #12]
   8346a:	691b      	ldr	r3, [r3, #16]
   8346c:	2b00      	cmp	r3, #0
   8346e:	d014      	beq.n	8349a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83470:	68fb      	ldr	r3, [r7, #12]
   83472:	3310      	adds	r3, #16
   83474:	4618      	mov	r0, r3
   83476:	4b0e      	ldr	r3, [pc, #56]	; (834b0 <xQueueGenericReset+0xb8>)
   83478:	4798      	blx	r3
   8347a:	4603      	mov	r3, r0
   8347c:	2b01      	cmp	r3, #1
   8347e:	d10c      	bne.n	8349a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   83480:	4b0c      	ldr	r3, [pc, #48]	; (834b4 <xQueueGenericReset+0xbc>)
   83482:	4798      	blx	r3
   83484:	e009      	b.n	8349a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   83486:	68fb      	ldr	r3, [r7, #12]
   83488:	3310      	adds	r3, #16
   8348a:	4618      	mov	r0, r3
   8348c:	4b0a      	ldr	r3, [pc, #40]	; (834b8 <xQueueGenericReset+0xc0>)
   8348e:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   83490:	68fb      	ldr	r3, [r7, #12]
   83492:	3324      	adds	r3, #36	; 0x24
   83494:	4618      	mov	r0, r3
   83496:	4b08      	ldr	r3, [pc, #32]	; (834b8 <xQueueGenericReset+0xc0>)
   83498:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   8349a:	4b08      	ldr	r3, [pc, #32]	; (834bc <xQueueGenericReset+0xc4>)
   8349c:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   8349e:	2301      	movs	r3, #1
}
   834a0:	4618      	mov	r0, r3
   834a2:	3710      	adds	r7, #16
   834a4:	46bd      	mov	sp, r7
   834a6:	bd80      	pop	{r7, pc}
   834a8:	00082f45 	.word	0x00082f45
   834ac:	00082ec9 	.word	0x00082ec9
   834b0:	000843bd 	.word	0x000843bd
   834b4:	00082ea9 	.word	0x00082ea9
   834b8:	00082bbd 	.word	0x00082bbd
   834bc:	00082f0d 	.word	0x00082f0d

000834c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   834c0:	b580      	push	{r7, lr}
   834c2:	b088      	sub	sp, #32
   834c4:	af00      	add	r7, sp, #0
   834c6:	60f8      	str	r0, [r7, #12]
   834c8:	60b9      	str	r1, [r7, #8]
   834ca:	4613      	mov	r3, r2
   834cc:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   834ce:	2300      	movs	r3, #0
   834d0:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   834d2:	68fb      	ldr	r3, [r7, #12]
   834d4:	2b00      	cmp	r3, #0
   834d6:	d026      	beq.n	83526 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   834d8:	204c      	movs	r0, #76	; 0x4c
   834da:	4b18      	ldr	r3, [pc, #96]	; (8353c <xQueueGenericCreate+0x7c>)
   834dc:	4798      	blx	r3
   834de:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   834e0:	69bb      	ldr	r3, [r7, #24]
   834e2:	2b00      	cmp	r3, #0
   834e4:	d01f      	beq.n	83526 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   834e6:	68fb      	ldr	r3, [r7, #12]
   834e8:	68ba      	ldr	r2, [r7, #8]
   834ea:	fb02 f303 	mul.w	r3, r2, r3
   834ee:	3301      	adds	r3, #1
   834f0:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   834f2:	6978      	ldr	r0, [r7, #20]
   834f4:	4b11      	ldr	r3, [pc, #68]	; (8353c <xQueueGenericCreate+0x7c>)
   834f6:	4798      	blx	r3
   834f8:	4602      	mov	r2, r0
   834fa:	69bb      	ldr	r3, [r7, #24]
   834fc:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   834fe:	69bb      	ldr	r3, [r7, #24]
   83500:	681b      	ldr	r3, [r3, #0]
   83502:	2b00      	cmp	r3, #0
   83504:	d00c      	beq.n	83520 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   83506:	69bb      	ldr	r3, [r7, #24]
   83508:	68fa      	ldr	r2, [r7, #12]
   8350a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8350c:	69bb      	ldr	r3, [r7, #24]
   8350e:	68ba      	ldr	r2, [r7, #8]
   83510:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   83512:	69b8      	ldr	r0, [r7, #24]
   83514:	2101      	movs	r1, #1
   83516:	4b0a      	ldr	r3, [pc, #40]	; (83540 <xQueueGenericCreate+0x80>)
   83518:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   8351a:	69bb      	ldr	r3, [r7, #24]
   8351c:	61fb      	str	r3, [r7, #28]
   8351e:	e002      	b.n	83526 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   83520:	69b8      	ldr	r0, [r7, #24]
   83522:	4b08      	ldr	r3, [pc, #32]	; (83544 <xQueueGenericCreate+0x84>)
   83524:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   83526:	69fb      	ldr	r3, [r7, #28]
   83528:	2b00      	cmp	r3, #0
   8352a:	d102      	bne.n	83532 <xQueueGenericCreate+0x72>
   8352c:	4b06      	ldr	r3, [pc, #24]	; (83548 <xQueueGenericCreate+0x88>)
   8352e:	4798      	blx	r3
   83530:	e7fe      	b.n	83530 <xQueueGenericCreate+0x70>

	return xReturn;
   83532:	69fb      	ldr	r3, [r7, #28]
}
   83534:	4618      	mov	r0, r3
   83536:	3720      	adds	r7, #32
   83538:	46bd      	mov	sp, r7
   8353a:	bd80      	pop	{r7, pc}
   8353c:	00083069 	.word	0x00083069
   83540:	000833f9 	.word	0x000833f9
   83544:	000831e1 	.word	0x000831e1
   83548:	00082f45 	.word	0x00082f45

0008354c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   8354c:	b580      	push	{r7, lr}
   8354e:	b08a      	sub	sp, #40	; 0x28
   83550:	af00      	add	r7, sp, #0
   83552:	60f8      	str	r0, [r7, #12]
   83554:	60b9      	str	r1, [r7, #8]
   83556:	607a      	str	r2, [r7, #4]
   83558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   8355a:	2300      	movs	r3, #0
   8355c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8355e:	68fb      	ldr	r3, [r7, #12]
   83560:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83562:	6a3b      	ldr	r3, [r7, #32]
   83564:	2b00      	cmp	r3, #0
   83566:	d102      	bne.n	8356e <xQueueGenericSend+0x22>
   83568:	4b5b      	ldr	r3, [pc, #364]	; (836d8 <xQueueGenericSend+0x18c>)
   8356a:	4798      	blx	r3
   8356c:	e7fe      	b.n	8356c <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8356e:	68bb      	ldr	r3, [r7, #8]
   83570:	2b00      	cmp	r3, #0
   83572:	d103      	bne.n	8357c <xQueueGenericSend+0x30>
   83574:	6a3b      	ldr	r3, [r7, #32]
   83576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83578:	2b00      	cmp	r3, #0
   8357a:	d101      	bne.n	83580 <xQueueGenericSend+0x34>
   8357c:	2301      	movs	r3, #1
   8357e:	e000      	b.n	83582 <xQueueGenericSend+0x36>
   83580:	2300      	movs	r3, #0
   83582:	2b00      	cmp	r3, #0
   83584:	d102      	bne.n	8358c <xQueueGenericSend+0x40>
   83586:	4b54      	ldr	r3, [pc, #336]	; (836d8 <xQueueGenericSend+0x18c>)
   83588:	4798      	blx	r3
   8358a:	e7fe      	b.n	8358a <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8358c:	683b      	ldr	r3, [r7, #0]
   8358e:	2b02      	cmp	r3, #2
   83590:	d103      	bne.n	8359a <xQueueGenericSend+0x4e>
   83592:	6a3b      	ldr	r3, [r7, #32]
   83594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83596:	2b01      	cmp	r3, #1
   83598:	d101      	bne.n	8359e <xQueueGenericSend+0x52>
   8359a:	2301      	movs	r3, #1
   8359c:	e000      	b.n	835a0 <xQueueGenericSend+0x54>
   8359e:	2300      	movs	r3, #0
   835a0:	2b00      	cmp	r3, #0
   835a2:	d102      	bne.n	835aa <xQueueGenericSend+0x5e>
   835a4:	4b4c      	ldr	r3, [pc, #304]	; (836d8 <xQueueGenericSend+0x18c>)
   835a6:	4798      	blx	r3
   835a8:	e7fe      	b.n	835a8 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   835aa:	4b4c      	ldr	r3, [pc, #304]	; (836dc <xQueueGenericSend+0x190>)
   835ac:	4798      	blx	r3
   835ae:	4603      	mov	r3, r0
   835b0:	2b00      	cmp	r3, #0
   835b2:	d102      	bne.n	835ba <xQueueGenericSend+0x6e>
   835b4:	687b      	ldr	r3, [r7, #4]
   835b6:	2b00      	cmp	r3, #0
   835b8:	d101      	bne.n	835be <xQueueGenericSend+0x72>
   835ba:	2301      	movs	r3, #1
   835bc:	e000      	b.n	835c0 <xQueueGenericSend+0x74>
   835be:	2300      	movs	r3, #0
   835c0:	2b00      	cmp	r3, #0
   835c2:	d102      	bne.n	835ca <xQueueGenericSend+0x7e>
   835c4:	4b44      	ldr	r3, [pc, #272]	; (836d8 <xQueueGenericSend+0x18c>)
   835c6:	4798      	blx	r3
   835c8:	e7fe      	b.n	835c8 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   835ca:	4b45      	ldr	r3, [pc, #276]	; (836e0 <xQueueGenericSend+0x194>)
   835cc:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   835ce:	6a3b      	ldr	r3, [r7, #32]
   835d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   835d2:	6a3b      	ldr	r3, [r7, #32]
   835d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   835d6:	429a      	cmp	r2, r3
   835d8:	d302      	bcc.n	835e0 <xQueueGenericSend+0x94>
   835da:	683b      	ldr	r3, [r7, #0]
   835dc:	2b02      	cmp	r3, #2
   835de:	d11d      	bne.n	8361c <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   835e0:	6a38      	ldr	r0, [r7, #32]
   835e2:	68b9      	ldr	r1, [r7, #8]
   835e4:	683a      	ldr	r2, [r7, #0]
   835e6:	4b3f      	ldr	r3, [pc, #252]	; (836e4 <xQueueGenericSend+0x198>)
   835e8:	4798      	blx	r3
   835ea:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   835ec:	6a3b      	ldr	r3, [r7, #32]
   835ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   835f0:	2b00      	cmp	r3, #0
   835f2:	d00a      	beq.n	8360a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   835f4:	6a3b      	ldr	r3, [r7, #32]
   835f6:	3324      	adds	r3, #36	; 0x24
   835f8:	4618      	mov	r0, r3
   835fa:	4b3b      	ldr	r3, [pc, #236]	; (836e8 <xQueueGenericSend+0x19c>)
   835fc:	4798      	blx	r3
   835fe:	4603      	mov	r3, r0
   83600:	2b01      	cmp	r3, #1
   83602:	d107      	bne.n	83614 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   83604:	4b39      	ldr	r3, [pc, #228]	; (836ec <xQueueGenericSend+0x1a0>)
   83606:	4798      	blx	r3
   83608:	e004      	b.n	83614 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   8360a:	69fb      	ldr	r3, [r7, #28]
   8360c:	2b00      	cmp	r3, #0
   8360e:	d001      	beq.n	83614 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83610:	4b36      	ldr	r3, [pc, #216]	; (836ec <xQueueGenericSend+0x1a0>)
   83612:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   83614:	4b36      	ldr	r3, [pc, #216]	; (836f0 <xQueueGenericSend+0x1a4>)
   83616:	4798      	blx	r3
				return pdPASS;
   83618:	2301      	movs	r3, #1
   8361a:	e059      	b.n	836d0 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   8361c:	687b      	ldr	r3, [r7, #4]
   8361e:	2b00      	cmp	r3, #0
   83620:	d103      	bne.n	8362a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83622:	4b33      	ldr	r3, [pc, #204]	; (836f0 <xQueueGenericSend+0x1a4>)
   83624:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   83626:	2300      	movs	r3, #0
   83628:	e052      	b.n	836d0 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   8362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8362c:	2b00      	cmp	r3, #0
   8362e:	d106      	bne.n	8363e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83630:	f107 0314 	add.w	r3, r7, #20
   83634:	4618      	mov	r0, r3
   83636:	4b2f      	ldr	r3, [pc, #188]	; (836f4 <xQueueGenericSend+0x1a8>)
   83638:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8363a:	2301      	movs	r3, #1
   8363c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   8363e:	4b2c      	ldr	r3, [pc, #176]	; (836f0 <xQueueGenericSend+0x1a4>)
   83640:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83642:	4b2d      	ldr	r3, [pc, #180]	; (836f8 <xQueueGenericSend+0x1ac>)
   83644:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83646:	4b26      	ldr	r3, [pc, #152]	; (836e0 <xQueueGenericSend+0x194>)
   83648:	4798      	blx	r3
   8364a:	6a3b      	ldr	r3, [r7, #32]
   8364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8364e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83652:	d102      	bne.n	8365a <xQueueGenericSend+0x10e>
   83654:	6a3b      	ldr	r3, [r7, #32]
   83656:	2200      	movs	r2, #0
   83658:	645a      	str	r2, [r3, #68]	; 0x44
   8365a:	6a3b      	ldr	r3, [r7, #32]
   8365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8365e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83662:	d102      	bne.n	8366a <xQueueGenericSend+0x11e>
   83664:	6a3b      	ldr	r3, [r7, #32]
   83666:	2200      	movs	r2, #0
   83668:	649a      	str	r2, [r3, #72]	; 0x48
   8366a:	4b21      	ldr	r3, [pc, #132]	; (836f0 <xQueueGenericSend+0x1a4>)
   8366c:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8366e:	f107 0214 	add.w	r2, r7, #20
   83672:	1d3b      	adds	r3, r7, #4
   83674:	4610      	mov	r0, r2
   83676:	4619      	mov	r1, r3
   83678:	4b20      	ldr	r3, [pc, #128]	; (836fc <xQueueGenericSend+0x1b0>)
   8367a:	4798      	blx	r3
   8367c:	4603      	mov	r3, r0
   8367e:	2b00      	cmp	r3, #0
   83680:	d11e      	bne.n	836c0 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   83682:	6a38      	ldr	r0, [r7, #32]
   83684:	4b1e      	ldr	r3, [pc, #120]	; (83700 <xQueueGenericSend+0x1b4>)
   83686:	4798      	blx	r3
   83688:	4603      	mov	r3, r0
   8368a:	2b00      	cmp	r3, #0
   8368c:	d012      	beq.n	836b4 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8368e:	6a3b      	ldr	r3, [r7, #32]
   83690:	f103 0210 	add.w	r2, r3, #16
   83694:	687b      	ldr	r3, [r7, #4]
   83696:	4610      	mov	r0, r2
   83698:	4619      	mov	r1, r3
   8369a:	4b1a      	ldr	r3, [pc, #104]	; (83704 <xQueueGenericSend+0x1b8>)
   8369c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   8369e:	6a38      	ldr	r0, [r7, #32]
   836a0:	4b19      	ldr	r3, [pc, #100]	; (83708 <xQueueGenericSend+0x1bc>)
   836a2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   836a4:	4b19      	ldr	r3, [pc, #100]	; (8370c <xQueueGenericSend+0x1c0>)
   836a6:	4798      	blx	r3
   836a8:	4603      	mov	r3, r0
   836aa:	2b00      	cmp	r3, #0
   836ac:	d10f      	bne.n	836ce <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   836ae:	4b0f      	ldr	r3, [pc, #60]	; (836ec <xQueueGenericSend+0x1a0>)
   836b0:	4798      	blx	r3
   836b2:	e00c      	b.n	836ce <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   836b4:	6a38      	ldr	r0, [r7, #32]
   836b6:	4b14      	ldr	r3, [pc, #80]	; (83708 <xQueueGenericSend+0x1bc>)
   836b8:	4798      	blx	r3
				( void ) xTaskResumeAll();
   836ba:	4b14      	ldr	r3, [pc, #80]	; (8370c <xQueueGenericSend+0x1c0>)
   836bc:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   836be:	e784      	b.n	835ca <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   836c0:	6a38      	ldr	r0, [r7, #32]
   836c2:	4b11      	ldr	r3, [pc, #68]	; (83708 <xQueueGenericSend+0x1bc>)
   836c4:	4798      	blx	r3
			( void ) xTaskResumeAll();
   836c6:	4b11      	ldr	r3, [pc, #68]	; (8370c <xQueueGenericSend+0x1c0>)
   836c8:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   836ca:	2300      	movs	r3, #0
   836cc:	e000      	b.n	836d0 <xQueueGenericSend+0x184>
		}
	}
   836ce:	e77c      	b.n	835ca <xQueueGenericSend+0x7e>
}
   836d0:	4618      	mov	r0, r3
   836d2:	3728      	adds	r7, #40	; 0x28
   836d4:	46bd      	mov	sp, r7
   836d6:	bd80      	pop	{r7, pc}
   836d8:	00082f45 	.word	0x00082f45
   836dc:	00084895 	.word	0x00084895
   836e0:	00082ec9 	.word	0x00082ec9
   836e4:	00083a09 	.word	0x00083a09
   836e8:	000843bd 	.word	0x000843bd
   836ec:	00082ea9 	.word	0x00082ea9
   836f0:	00082f0d 	.word	0x00082f0d
   836f4:	0008447d 	.word	0x0008447d
   836f8:	00083eb9 	.word	0x00083eb9
   836fc:	000844b5 	.word	0x000844b5
   83700:	00083c19 	.word	0x00083c19
   83704:	0008429d 	.word	0x0008429d
   83708:	00083b3d 	.word	0x00083b3d
   8370c:	00083ed5 	.word	0x00083ed5

00083710 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83710:	b580      	push	{r7, lr}
   83712:	b088      	sub	sp, #32
   83714:	af00      	add	r7, sp, #0
   83716:	60f8      	str	r0, [r7, #12]
   83718:	60b9      	str	r1, [r7, #8]
   8371a:	607a      	str	r2, [r7, #4]
   8371c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8371e:	68fb      	ldr	r3, [r7, #12]
   83720:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   83722:	69bb      	ldr	r3, [r7, #24]
   83724:	2b00      	cmp	r3, #0
   83726:	d102      	bne.n	8372e <xQueueGenericSendFromISR+0x1e>
   83728:	4b33      	ldr	r3, [pc, #204]	; (837f8 <xQueueGenericSendFromISR+0xe8>)
   8372a:	4798      	blx	r3
   8372c:	e7fe      	b.n	8372c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8372e:	68bb      	ldr	r3, [r7, #8]
   83730:	2b00      	cmp	r3, #0
   83732:	d103      	bne.n	8373c <xQueueGenericSendFromISR+0x2c>
   83734:	69bb      	ldr	r3, [r7, #24]
   83736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83738:	2b00      	cmp	r3, #0
   8373a:	d101      	bne.n	83740 <xQueueGenericSendFromISR+0x30>
   8373c:	2301      	movs	r3, #1
   8373e:	e000      	b.n	83742 <xQueueGenericSendFromISR+0x32>
   83740:	2300      	movs	r3, #0
   83742:	2b00      	cmp	r3, #0
   83744:	d102      	bne.n	8374c <xQueueGenericSendFromISR+0x3c>
   83746:	4b2c      	ldr	r3, [pc, #176]	; (837f8 <xQueueGenericSendFromISR+0xe8>)
   83748:	4798      	blx	r3
   8374a:	e7fe      	b.n	8374a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8374c:	683b      	ldr	r3, [r7, #0]
   8374e:	2b02      	cmp	r3, #2
   83750:	d103      	bne.n	8375a <xQueueGenericSendFromISR+0x4a>
   83752:	69bb      	ldr	r3, [r7, #24]
   83754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83756:	2b01      	cmp	r3, #1
   83758:	d101      	bne.n	8375e <xQueueGenericSendFromISR+0x4e>
   8375a:	2301      	movs	r3, #1
   8375c:	e000      	b.n	83760 <xQueueGenericSendFromISR+0x50>
   8375e:	2300      	movs	r3, #0
   83760:	2b00      	cmp	r3, #0
   83762:	d102      	bne.n	8376a <xQueueGenericSendFromISR+0x5a>
   83764:	4b24      	ldr	r3, [pc, #144]	; (837f8 <xQueueGenericSendFromISR+0xe8>)
   83766:	4798      	blx	r3
   83768:	e7fe      	b.n	83768 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   8376a:	4b24      	ldr	r3, [pc, #144]	; (837fc <xQueueGenericSendFromISR+0xec>)
   8376c:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8376e:	4b22      	ldr	r3, [pc, #136]	; (837f8 <xQueueGenericSendFromISR+0xe8>)
   83770:	4798      	blx	r3
   83772:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83774:	69bb      	ldr	r3, [r7, #24]
   83776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83778:	69bb      	ldr	r3, [r7, #24]
   8377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8377c:	429a      	cmp	r2, r3
   8377e:	d302      	bcc.n	83786 <xQueueGenericSendFromISR+0x76>
   83780:	683b      	ldr	r3, [r7, #0]
   83782:	2b02      	cmp	r3, #2
   83784:	d12d      	bne.n	837e2 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   83786:	69b8      	ldr	r0, [r7, #24]
   83788:	68b9      	ldr	r1, [r7, #8]
   8378a:	683a      	ldr	r2, [r7, #0]
   8378c:	4b1c      	ldr	r3, [pc, #112]	; (83800 <xQueueGenericSendFromISR+0xf0>)
   8378e:	4798      	blx	r3
   83790:	4603      	mov	r3, r0
   83792:	2b00      	cmp	r3, #0
   83794:	d005      	beq.n	837a2 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   83796:	687b      	ldr	r3, [r7, #4]
   83798:	2b00      	cmp	r3, #0
   8379a:	d002      	beq.n	837a2 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   8379c:	687b      	ldr	r3, [r7, #4]
   8379e:	2201      	movs	r2, #1
   837a0:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   837a2:	69bb      	ldr	r3, [r7, #24]
   837a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   837a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   837aa:	d112      	bne.n	837d2 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   837ac:	69bb      	ldr	r3, [r7, #24]
   837ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   837b0:	2b00      	cmp	r3, #0
   837b2:	d013      	beq.n	837dc <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   837b4:	69bb      	ldr	r3, [r7, #24]
   837b6:	3324      	adds	r3, #36	; 0x24
   837b8:	4618      	mov	r0, r3
   837ba:	4b12      	ldr	r3, [pc, #72]	; (83804 <xQueueGenericSendFromISR+0xf4>)
   837bc:	4798      	blx	r3
   837be:	4603      	mov	r3, r0
   837c0:	2b00      	cmp	r3, #0
   837c2:	d00b      	beq.n	837dc <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   837c4:	687b      	ldr	r3, [r7, #4]
   837c6:	2b00      	cmp	r3, #0
   837c8:	d008      	beq.n	837dc <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   837ca:	687b      	ldr	r3, [r7, #4]
   837cc:	2201      	movs	r2, #1
   837ce:	601a      	str	r2, [r3, #0]
   837d0:	e004      	b.n	837dc <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   837d2:	69bb      	ldr	r3, [r7, #24]
   837d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   837d6:	1c5a      	adds	r2, r3, #1
   837d8:	69bb      	ldr	r3, [r7, #24]
   837da:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   837dc:	2301      	movs	r3, #1
   837de:	61fb      	str	r3, [r7, #28]
   837e0:	e001      	b.n	837e6 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   837e2:	2300      	movs	r3, #0
   837e4:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   837e6:	6978      	ldr	r0, [r7, #20]
   837e8:	4b07      	ldr	r3, [pc, #28]	; (83808 <xQueueGenericSendFromISR+0xf8>)
   837ea:	4798      	blx	r3

	return xReturn;
   837ec:	69fb      	ldr	r3, [r7, #28]
}
   837ee:	4618      	mov	r0, r3
   837f0:	3720      	adds	r7, #32
   837f2:	46bd      	mov	sp, r7
   837f4:	bd80      	pop	{r7, pc}
   837f6:	bf00      	nop
   837f8:	00082f45 	.word	0x00082f45
   837fc:	0008300d 	.word	0x0008300d
   83800:	00083a09 	.word	0x00083a09
   83804:	000843bd 	.word	0x000843bd
   83808:	00082f59 	.word	0x00082f59

0008380c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   8380c:	b580      	push	{r7, lr}
   8380e:	b08a      	sub	sp, #40	; 0x28
   83810:	af00      	add	r7, sp, #0
   83812:	60f8      	str	r0, [r7, #12]
   83814:	60b9      	str	r1, [r7, #8]
   83816:	607a      	str	r2, [r7, #4]
   83818:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   8381a:	2300      	movs	r3, #0
   8381c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8381e:	68fb      	ldr	r3, [r7, #12]
   83820:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83822:	6a3b      	ldr	r3, [r7, #32]
   83824:	2b00      	cmp	r3, #0
   83826:	d102      	bne.n	8382e <xQueueGenericReceive+0x22>
   83828:	4b67      	ldr	r3, [pc, #412]	; (839c8 <xQueueGenericReceive+0x1bc>)
   8382a:	4798      	blx	r3
   8382c:	e7fe      	b.n	8382c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8382e:	68bb      	ldr	r3, [r7, #8]
   83830:	2b00      	cmp	r3, #0
   83832:	d103      	bne.n	8383c <xQueueGenericReceive+0x30>
   83834:	6a3b      	ldr	r3, [r7, #32]
   83836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83838:	2b00      	cmp	r3, #0
   8383a:	d101      	bne.n	83840 <xQueueGenericReceive+0x34>
   8383c:	2301      	movs	r3, #1
   8383e:	e000      	b.n	83842 <xQueueGenericReceive+0x36>
   83840:	2300      	movs	r3, #0
   83842:	2b00      	cmp	r3, #0
   83844:	d102      	bne.n	8384c <xQueueGenericReceive+0x40>
   83846:	4b60      	ldr	r3, [pc, #384]	; (839c8 <xQueueGenericReceive+0x1bc>)
   83848:	4798      	blx	r3
   8384a:	e7fe      	b.n	8384a <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   8384c:	4b5f      	ldr	r3, [pc, #380]	; (839cc <xQueueGenericReceive+0x1c0>)
   8384e:	4798      	blx	r3
   83850:	4603      	mov	r3, r0
   83852:	2b00      	cmp	r3, #0
   83854:	d102      	bne.n	8385c <xQueueGenericReceive+0x50>
   83856:	687b      	ldr	r3, [r7, #4]
   83858:	2b00      	cmp	r3, #0
   8385a:	d101      	bne.n	83860 <xQueueGenericReceive+0x54>
   8385c:	2301      	movs	r3, #1
   8385e:	e000      	b.n	83862 <xQueueGenericReceive+0x56>
   83860:	2300      	movs	r3, #0
   83862:	2b00      	cmp	r3, #0
   83864:	d102      	bne.n	8386c <xQueueGenericReceive+0x60>
   83866:	4b58      	ldr	r3, [pc, #352]	; (839c8 <xQueueGenericReceive+0x1bc>)
   83868:	4798      	blx	r3
   8386a:	e7fe      	b.n	8386a <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   8386c:	4b58      	ldr	r3, [pc, #352]	; (839d0 <xQueueGenericReceive+0x1c4>)
   8386e:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83870:	6a3b      	ldr	r3, [r7, #32]
   83872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83874:	2b00      	cmp	r3, #0
   83876:	d03b      	beq.n	838f0 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   83878:	6a3b      	ldr	r3, [r7, #32]
   8387a:	68db      	ldr	r3, [r3, #12]
   8387c:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8387e:	6a38      	ldr	r0, [r7, #32]
   83880:	68b9      	ldr	r1, [r7, #8]
   83882:	4b54      	ldr	r3, [pc, #336]	; (839d4 <xQueueGenericReceive+0x1c8>)
   83884:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   83886:	683b      	ldr	r3, [r7, #0]
   83888:	2b00      	cmp	r3, #0
   8388a:	d11c      	bne.n	838c6 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   8388c:	6a3b      	ldr	r3, [r7, #32]
   8388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83890:	1e5a      	subs	r2, r3, #1
   83892:	6a3b      	ldr	r3, [r7, #32]
   83894:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83896:	6a3b      	ldr	r3, [r7, #32]
   83898:	681b      	ldr	r3, [r3, #0]
   8389a:	2b00      	cmp	r3, #0
   8389c:	d104      	bne.n	838a8 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   8389e:	4b4e      	ldr	r3, [pc, #312]	; (839d8 <xQueueGenericReceive+0x1cc>)
   838a0:	4798      	blx	r3
   838a2:	4602      	mov	r2, r0
   838a4:	6a3b      	ldr	r3, [r7, #32]
   838a6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   838a8:	6a3b      	ldr	r3, [r7, #32]
   838aa:	691b      	ldr	r3, [r3, #16]
   838ac:	2b00      	cmp	r3, #0
   838ae:	d01b      	beq.n	838e8 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   838b0:	6a3b      	ldr	r3, [r7, #32]
   838b2:	3310      	adds	r3, #16
   838b4:	4618      	mov	r0, r3
   838b6:	4b49      	ldr	r3, [pc, #292]	; (839dc <xQueueGenericReceive+0x1d0>)
   838b8:	4798      	blx	r3
   838ba:	4603      	mov	r3, r0
   838bc:	2b01      	cmp	r3, #1
   838be:	d113      	bne.n	838e8 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   838c0:	4b47      	ldr	r3, [pc, #284]	; (839e0 <xQueueGenericReceive+0x1d4>)
   838c2:	4798      	blx	r3
   838c4:	e010      	b.n	838e8 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   838c6:	6a3b      	ldr	r3, [r7, #32]
   838c8:	69fa      	ldr	r2, [r7, #28]
   838ca:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   838cc:	6a3b      	ldr	r3, [r7, #32]
   838ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   838d0:	2b00      	cmp	r3, #0
   838d2:	d009      	beq.n	838e8 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   838d4:	6a3b      	ldr	r3, [r7, #32]
   838d6:	3324      	adds	r3, #36	; 0x24
   838d8:	4618      	mov	r0, r3
   838da:	4b40      	ldr	r3, [pc, #256]	; (839dc <xQueueGenericReceive+0x1d0>)
   838dc:	4798      	blx	r3
   838de:	4603      	mov	r3, r0
   838e0:	2b00      	cmp	r3, #0
   838e2:	d001      	beq.n	838e8 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   838e4:	4b3e      	ldr	r3, [pc, #248]	; (839e0 <xQueueGenericReceive+0x1d4>)
   838e6:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   838e8:	4b3e      	ldr	r3, [pc, #248]	; (839e4 <xQueueGenericReceive+0x1d8>)
   838ea:	4798      	blx	r3
				return pdPASS;
   838ec:	2301      	movs	r3, #1
   838ee:	e066      	b.n	839be <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   838f0:	687b      	ldr	r3, [r7, #4]
   838f2:	2b00      	cmp	r3, #0
   838f4:	d103      	bne.n	838fe <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   838f6:	4b3b      	ldr	r3, [pc, #236]	; (839e4 <xQueueGenericReceive+0x1d8>)
   838f8:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   838fa:	2300      	movs	r3, #0
   838fc:	e05f      	b.n	839be <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   838fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83900:	2b00      	cmp	r3, #0
   83902:	d106      	bne.n	83912 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83904:	f107 0314 	add.w	r3, r7, #20
   83908:	4618      	mov	r0, r3
   8390a:	4b37      	ldr	r3, [pc, #220]	; (839e8 <xQueueGenericReceive+0x1dc>)
   8390c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8390e:	2301      	movs	r3, #1
   83910:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83912:	4b34      	ldr	r3, [pc, #208]	; (839e4 <xQueueGenericReceive+0x1d8>)
   83914:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83916:	4b35      	ldr	r3, [pc, #212]	; (839ec <xQueueGenericReceive+0x1e0>)
   83918:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8391a:	4b2d      	ldr	r3, [pc, #180]	; (839d0 <xQueueGenericReceive+0x1c4>)
   8391c:	4798      	blx	r3
   8391e:	6a3b      	ldr	r3, [r7, #32]
   83920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83922:	f1b3 3fff 	cmp.w	r3, #4294967295
   83926:	d102      	bne.n	8392e <xQueueGenericReceive+0x122>
   83928:	6a3b      	ldr	r3, [r7, #32]
   8392a:	2200      	movs	r2, #0
   8392c:	645a      	str	r2, [r3, #68]	; 0x44
   8392e:	6a3b      	ldr	r3, [r7, #32]
   83930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83932:	f1b3 3fff 	cmp.w	r3, #4294967295
   83936:	d102      	bne.n	8393e <xQueueGenericReceive+0x132>
   83938:	6a3b      	ldr	r3, [r7, #32]
   8393a:	2200      	movs	r2, #0
   8393c:	649a      	str	r2, [r3, #72]	; 0x48
   8393e:	4b29      	ldr	r3, [pc, #164]	; (839e4 <xQueueGenericReceive+0x1d8>)
   83940:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83942:	f107 0214 	add.w	r2, r7, #20
   83946:	1d3b      	adds	r3, r7, #4
   83948:	4610      	mov	r0, r2
   8394a:	4619      	mov	r1, r3
   8394c:	4b28      	ldr	r3, [pc, #160]	; (839f0 <xQueueGenericReceive+0x1e4>)
   8394e:	4798      	blx	r3
   83950:	4603      	mov	r3, r0
   83952:	2b00      	cmp	r3, #0
   83954:	d12b      	bne.n	839ae <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   83956:	6a38      	ldr	r0, [r7, #32]
   83958:	4b26      	ldr	r3, [pc, #152]	; (839f4 <xQueueGenericReceive+0x1e8>)
   8395a:	4798      	blx	r3
   8395c:	4603      	mov	r3, r0
   8395e:	2b00      	cmp	r3, #0
   83960:	d01f      	beq.n	839a2 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83962:	6a3b      	ldr	r3, [r7, #32]
   83964:	681b      	ldr	r3, [r3, #0]
   83966:	2b00      	cmp	r3, #0
   83968:	d108      	bne.n	8397c <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   8396a:	4b19      	ldr	r3, [pc, #100]	; (839d0 <xQueueGenericReceive+0x1c4>)
   8396c:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8396e:	6a3b      	ldr	r3, [r7, #32]
   83970:	685b      	ldr	r3, [r3, #4]
   83972:	4618      	mov	r0, r3
   83974:	4b20      	ldr	r3, [pc, #128]	; (839f8 <xQueueGenericReceive+0x1ec>)
   83976:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   83978:	4b1a      	ldr	r3, [pc, #104]	; (839e4 <xQueueGenericReceive+0x1d8>)
   8397a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8397c:	6a3b      	ldr	r3, [r7, #32]
   8397e:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83982:	687b      	ldr	r3, [r7, #4]
   83984:	4610      	mov	r0, r2
   83986:	4619      	mov	r1, r3
   83988:	4b1c      	ldr	r3, [pc, #112]	; (839fc <xQueueGenericReceive+0x1f0>)
   8398a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8398c:	6a38      	ldr	r0, [r7, #32]
   8398e:	4b1c      	ldr	r3, [pc, #112]	; (83a00 <xQueueGenericReceive+0x1f4>)
   83990:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83992:	4b1c      	ldr	r3, [pc, #112]	; (83a04 <xQueueGenericReceive+0x1f8>)
   83994:	4798      	blx	r3
   83996:	4603      	mov	r3, r0
   83998:	2b00      	cmp	r3, #0
   8399a:	d10f      	bne.n	839bc <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   8399c:	4b10      	ldr	r3, [pc, #64]	; (839e0 <xQueueGenericReceive+0x1d4>)
   8399e:	4798      	blx	r3
   839a0:	e00c      	b.n	839bc <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   839a2:	6a38      	ldr	r0, [r7, #32]
   839a4:	4b16      	ldr	r3, [pc, #88]	; (83a00 <xQueueGenericReceive+0x1f4>)
   839a6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   839a8:	4b16      	ldr	r3, [pc, #88]	; (83a04 <xQueueGenericReceive+0x1f8>)
   839aa:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   839ac:	e75e      	b.n	8386c <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   839ae:	6a38      	ldr	r0, [r7, #32]
   839b0:	4b13      	ldr	r3, [pc, #76]	; (83a00 <xQueueGenericReceive+0x1f4>)
   839b2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   839b4:	4b13      	ldr	r3, [pc, #76]	; (83a04 <xQueueGenericReceive+0x1f8>)
   839b6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   839b8:	2300      	movs	r3, #0
   839ba:	e000      	b.n	839be <xQueueGenericReceive+0x1b2>
		}
	}
   839bc:	e756      	b.n	8386c <xQueueGenericReceive+0x60>
}
   839be:	4618      	mov	r0, r3
   839c0:	3728      	adds	r7, #40	; 0x28
   839c2:	46bd      	mov	sp, r7
   839c4:	bd80      	pop	{r7, pc}
   839c6:	bf00      	nop
   839c8:	00082f45 	.word	0x00082f45
   839cc:	00084895 	.word	0x00084895
   839d0:	00082ec9 	.word	0x00082ec9
   839d4:	00083aed 	.word	0x00083aed
   839d8:	00084aa9 	.word	0x00084aa9
   839dc:	000843bd 	.word	0x000843bd
   839e0:	00082ea9 	.word	0x00082ea9
   839e4:	00082f0d 	.word	0x00082f0d
   839e8:	0008447d 	.word	0x0008447d
   839ec:	00083eb9 	.word	0x00083eb9
   839f0:	000844b5 	.word	0x000844b5
   839f4:	00083be5 	.word	0x00083be5
   839f8:	000848d1 	.word	0x000848d1
   839fc:	0008429d 	.word	0x0008429d
   83a00:	00083b3d 	.word	0x00083b3d
   83a04:	00083ed5 	.word	0x00083ed5

00083a08 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   83a08:	b580      	push	{r7, lr}
   83a0a:	b086      	sub	sp, #24
   83a0c:	af00      	add	r7, sp, #0
   83a0e:	60f8      	str	r0, [r7, #12]
   83a10:	60b9      	str	r1, [r7, #8]
   83a12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   83a14:	2300      	movs	r3, #0
   83a16:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   83a18:	68fb      	ldr	r3, [r7, #12]
   83a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a1c:	2b00      	cmp	r3, #0
   83a1e:	d10d      	bne.n	83a3c <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83a20:	68fb      	ldr	r3, [r7, #12]
   83a22:	681b      	ldr	r3, [r3, #0]
   83a24:	2b00      	cmp	r3, #0
   83a26:	d152      	bne.n	83ace <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   83a28:	68fb      	ldr	r3, [r7, #12]
   83a2a:	685b      	ldr	r3, [r3, #4]
   83a2c:	4618      	mov	r0, r3
   83a2e:	4b2d      	ldr	r3, [pc, #180]	; (83ae4 <prvCopyDataToQueue+0xdc>)
   83a30:	4798      	blx	r3
   83a32:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   83a34:	68fb      	ldr	r3, [r7, #12]
   83a36:	2200      	movs	r2, #0
   83a38:	605a      	str	r2, [r3, #4]
   83a3a:	e048      	b.n	83ace <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83a3c:	687b      	ldr	r3, [r7, #4]
   83a3e:	2b00      	cmp	r3, #0
   83a40:	d11a      	bne.n	83a78 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83a42:	68fb      	ldr	r3, [r7, #12]
   83a44:	689a      	ldr	r2, [r3, #8]
   83a46:	68fb      	ldr	r3, [r7, #12]
   83a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a4a:	4610      	mov	r0, r2
   83a4c:	68b9      	ldr	r1, [r7, #8]
   83a4e:	461a      	mov	r2, r3
   83a50:	4b25      	ldr	r3, [pc, #148]	; (83ae8 <prvCopyDataToQueue+0xe0>)
   83a52:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83a54:	68fb      	ldr	r3, [r7, #12]
   83a56:	689a      	ldr	r2, [r3, #8]
   83a58:	68fb      	ldr	r3, [r7, #12]
   83a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a5c:	441a      	add	r2, r3
   83a5e:	68fb      	ldr	r3, [r7, #12]
   83a60:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83a62:	68fb      	ldr	r3, [r7, #12]
   83a64:	689a      	ldr	r2, [r3, #8]
   83a66:	68fb      	ldr	r3, [r7, #12]
   83a68:	685b      	ldr	r3, [r3, #4]
   83a6a:	429a      	cmp	r2, r3
   83a6c:	d32f      	bcc.n	83ace <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83a6e:	68fb      	ldr	r3, [r7, #12]
   83a70:	681a      	ldr	r2, [r3, #0]
   83a72:	68fb      	ldr	r3, [r7, #12]
   83a74:	609a      	str	r2, [r3, #8]
   83a76:	e02a      	b.n	83ace <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83a78:	68fb      	ldr	r3, [r7, #12]
   83a7a:	68da      	ldr	r2, [r3, #12]
   83a7c:	68fb      	ldr	r3, [r7, #12]
   83a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a80:	4610      	mov	r0, r2
   83a82:	68b9      	ldr	r1, [r7, #8]
   83a84:	461a      	mov	r2, r3
   83a86:	4b18      	ldr	r3, [pc, #96]	; (83ae8 <prvCopyDataToQueue+0xe0>)
   83a88:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83a8a:	68fb      	ldr	r3, [r7, #12]
   83a8c:	68da      	ldr	r2, [r3, #12]
   83a8e:	68fb      	ldr	r3, [r7, #12]
   83a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83a92:	425b      	negs	r3, r3
   83a94:	441a      	add	r2, r3
   83a96:	68fb      	ldr	r3, [r7, #12]
   83a98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83a9a:	68fb      	ldr	r3, [r7, #12]
   83a9c:	68da      	ldr	r2, [r3, #12]
   83a9e:	68fb      	ldr	r3, [r7, #12]
   83aa0:	681b      	ldr	r3, [r3, #0]
   83aa2:	429a      	cmp	r2, r3
   83aa4:	d207      	bcs.n	83ab6 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83aa6:	68fb      	ldr	r3, [r7, #12]
   83aa8:	685a      	ldr	r2, [r3, #4]
   83aaa:	68fb      	ldr	r3, [r7, #12]
   83aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83aae:	425b      	negs	r3, r3
   83ab0:	441a      	add	r2, r3
   83ab2:	68fb      	ldr	r3, [r7, #12]
   83ab4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   83ab6:	687b      	ldr	r3, [r7, #4]
   83ab8:	2b02      	cmp	r3, #2
   83aba:	d108      	bne.n	83ace <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83abc:	68fb      	ldr	r3, [r7, #12]
   83abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ac0:	2b00      	cmp	r3, #0
   83ac2:	d004      	beq.n	83ace <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   83ac4:	68fb      	ldr	r3, [r7, #12]
   83ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ac8:	1e5a      	subs	r2, r3, #1
   83aca:	68fb      	ldr	r3, [r7, #12]
   83acc:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   83ace:	68fb      	ldr	r3, [r7, #12]
   83ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ad2:	1c5a      	adds	r2, r3, #1
   83ad4:	68fb      	ldr	r3, [r7, #12]
   83ad6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83ad8:	697b      	ldr	r3, [r7, #20]
}
   83ada:	4618      	mov	r0, r3
   83adc:	3718      	adds	r7, #24
   83ade:	46bd      	mov	sp, r7
   83ae0:	bd80      	pop	{r7, pc}
   83ae2:	bf00      	nop
   83ae4:	000849c5 	.word	0x000849c5
   83ae8:	000866d5 	.word	0x000866d5

00083aec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83aec:	b580      	push	{r7, lr}
   83aee:	b082      	sub	sp, #8
   83af0:	af00      	add	r7, sp, #0
   83af2:	6078      	str	r0, [r7, #4]
   83af4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83af6:	687b      	ldr	r3, [r7, #4]
   83af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83afa:	2b00      	cmp	r3, #0
   83afc:	d019      	beq.n	83b32 <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83afe:	687b      	ldr	r3, [r7, #4]
   83b00:	68da      	ldr	r2, [r3, #12]
   83b02:	687b      	ldr	r3, [r7, #4]
   83b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83b06:	441a      	add	r2, r3
   83b08:	687b      	ldr	r3, [r7, #4]
   83b0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83b0c:	687b      	ldr	r3, [r7, #4]
   83b0e:	68da      	ldr	r2, [r3, #12]
   83b10:	687b      	ldr	r3, [r7, #4]
   83b12:	685b      	ldr	r3, [r3, #4]
   83b14:	429a      	cmp	r2, r3
   83b16:	d303      	bcc.n	83b20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83b18:	687b      	ldr	r3, [r7, #4]
   83b1a:	681a      	ldr	r2, [r3, #0]
   83b1c:	687b      	ldr	r3, [r7, #4]
   83b1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83b20:	687b      	ldr	r3, [r7, #4]
   83b22:	68da      	ldr	r2, [r3, #12]
   83b24:	687b      	ldr	r3, [r7, #4]
   83b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83b28:	6838      	ldr	r0, [r7, #0]
   83b2a:	4611      	mov	r1, r2
   83b2c:	461a      	mov	r2, r3
   83b2e:	4b02      	ldr	r3, [pc, #8]	; (83b38 <prvCopyDataFromQueue+0x4c>)
   83b30:	4798      	blx	r3
	}
}
   83b32:	3708      	adds	r7, #8
   83b34:	46bd      	mov	sp, r7
   83b36:	bd80      	pop	{r7, pc}
   83b38:	000866d5 	.word	0x000866d5

00083b3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83b3c:	b580      	push	{r7, lr}
   83b3e:	b082      	sub	sp, #8
   83b40:	af00      	add	r7, sp, #0
   83b42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83b44:	4b23      	ldr	r3, [pc, #140]	; (83bd4 <prvUnlockQueue+0x98>)
   83b46:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83b48:	e014      	b.n	83b74 <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83b4a:	687b      	ldr	r3, [r7, #4]
   83b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83b4e:	2b00      	cmp	r3, #0
   83b50:	d00a      	beq.n	83b68 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83b52:	687b      	ldr	r3, [r7, #4]
   83b54:	3324      	adds	r3, #36	; 0x24
   83b56:	4618      	mov	r0, r3
   83b58:	4b1f      	ldr	r3, [pc, #124]	; (83bd8 <prvUnlockQueue+0x9c>)
   83b5a:	4798      	blx	r3
   83b5c:	4603      	mov	r3, r0
   83b5e:	2b00      	cmp	r3, #0
   83b60:	d003      	beq.n	83b6a <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83b62:	4b1e      	ldr	r3, [pc, #120]	; (83bdc <prvUnlockQueue+0xa0>)
   83b64:	4798      	blx	r3
   83b66:	e000      	b.n	83b6a <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83b68:	e008      	b.n	83b7c <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83b6a:	687b      	ldr	r3, [r7, #4]
   83b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b6e:	1e5a      	subs	r2, r3, #1
   83b70:	687b      	ldr	r3, [r7, #4]
   83b72:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83b74:	687b      	ldr	r3, [r7, #4]
   83b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b78:	2b00      	cmp	r3, #0
   83b7a:	dce6      	bgt.n	83b4a <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83b7c:	687b      	ldr	r3, [r7, #4]
   83b7e:	f04f 32ff 	mov.w	r2, #4294967295
   83b82:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83b84:	4b16      	ldr	r3, [pc, #88]	; (83be0 <prvUnlockQueue+0xa4>)
   83b86:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83b88:	4b12      	ldr	r3, [pc, #72]	; (83bd4 <prvUnlockQueue+0x98>)
   83b8a:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83b8c:	e014      	b.n	83bb8 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83b8e:	687b      	ldr	r3, [r7, #4]
   83b90:	691b      	ldr	r3, [r3, #16]
   83b92:	2b00      	cmp	r3, #0
   83b94:	d00f      	beq.n	83bb6 <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83b96:	687b      	ldr	r3, [r7, #4]
   83b98:	3310      	adds	r3, #16
   83b9a:	4618      	mov	r0, r3
   83b9c:	4b0e      	ldr	r3, [pc, #56]	; (83bd8 <prvUnlockQueue+0x9c>)
   83b9e:	4798      	blx	r3
   83ba0:	4603      	mov	r3, r0
   83ba2:	2b00      	cmp	r3, #0
   83ba4:	d001      	beq.n	83baa <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   83ba6:	4b0d      	ldr	r3, [pc, #52]	; (83bdc <prvUnlockQueue+0xa0>)
   83ba8:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83baa:	687b      	ldr	r3, [r7, #4]
   83bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83bae:	1e5a      	subs	r2, r3, #1
   83bb0:	687b      	ldr	r3, [r7, #4]
   83bb2:	645a      	str	r2, [r3, #68]	; 0x44
   83bb4:	e000      	b.n	83bb8 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   83bb6:	e003      	b.n	83bc0 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83bb8:	687b      	ldr	r3, [r7, #4]
   83bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83bbc:	2b00      	cmp	r3, #0
   83bbe:	dce6      	bgt.n	83b8e <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83bc0:	687b      	ldr	r3, [r7, #4]
   83bc2:	f04f 32ff 	mov.w	r2, #4294967295
   83bc6:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83bc8:	4b05      	ldr	r3, [pc, #20]	; (83be0 <prvUnlockQueue+0xa4>)
   83bca:	4798      	blx	r3
}
   83bcc:	3708      	adds	r7, #8
   83bce:	46bd      	mov	sp, r7
   83bd0:	bd80      	pop	{r7, pc}
   83bd2:	bf00      	nop
   83bd4:	00082ec9 	.word	0x00082ec9
   83bd8:	000843bd 	.word	0x000843bd
   83bdc:	00084565 	.word	0x00084565
   83be0:	00082f0d 	.word	0x00082f0d

00083be4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   83be4:	b580      	push	{r7, lr}
   83be6:	b084      	sub	sp, #16
   83be8:	af00      	add	r7, sp, #0
   83bea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83bec:	4b08      	ldr	r3, [pc, #32]	; (83c10 <prvIsQueueEmpty+0x2c>)
   83bee:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83bf0:	687b      	ldr	r3, [r7, #4]
   83bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83bf4:	2b00      	cmp	r3, #0
   83bf6:	d102      	bne.n	83bfe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   83bf8:	2301      	movs	r3, #1
   83bfa:	60fb      	str	r3, [r7, #12]
   83bfc:	e001      	b.n	83c02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   83bfe:	2300      	movs	r3, #0
   83c00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83c02:	4b04      	ldr	r3, [pc, #16]	; (83c14 <prvIsQueueEmpty+0x30>)
   83c04:	4798      	blx	r3

	return xReturn;
   83c06:	68fb      	ldr	r3, [r7, #12]
}
   83c08:	4618      	mov	r0, r3
   83c0a:	3710      	adds	r7, #16
   83c0c:	46bd      	mov	sp, r7
   83c0e:	bd80      	pop	{r7, pc}
   83c10:	00082ec9 	.word	0x00082ec9
   83c14:	00082f0d 	.word	0x00082f0d

00083c18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   83c18:	b580      	push	{r7, lr}
   83c1a:	b084      	sub	sp, #16
   83c1c:	af00      	add	r7, sp, #0
   83c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83c20:	4b09      	ldr	r3, [pc, #36]	; (83c48 <prvIsQueueFull+0x30>)
   83c22:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   83c24:	687b      	ldr	r3, [r7, #4]
   83c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83c28:	687b      	ldr	r3, [r7, #4]
   83c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83c2c:	429a      	cmp	r2, r3
   83c2e:	d102      	bne.n	83c36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   83c30:	2301      	movs	r3, #1
   83c32:	60fb      	str	r3, [r7, #12]
   83c34:	e001      	b.n	83c3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   83c36:	2300      	movs	r3, #0
   83c38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83c3a:	4b04      	ldr	r3, [pc, #16]	; (83c4c <prvIsQueueFull+0x34>)
   83c3c:	4798      	blx	r3

	return xReturn;
   83c3e:	68fb      	ldr	r3, [r7, #12]
}
   83c40:	4618      	mov	r0, r3
   83c42:	3710      	adds	r7, #16
   83c44:	46bd      	mov	sp, r7
   83c46:	bd80      	pop	{r7, pc}
   83c48:	00082ec9 	.word	0x00082ec9
   83c4c:	00082f0d 	.word	0x00082f0d

00083c50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   83c50:	b580      	push	{r7, lr}
   83c52:	b084      	sub	sp, #16
   83c54:	af00      	add	r7, sp, #0
   83c56:	6078      	str	r0, [r7, #4]
   83c58:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83c5a:	687b      	ldr	r3, [r7, #4]
   83c5c:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   83c5e:	4b12      	ldr	r3, [pc, #72]	; (83ca8 <vQueueWaitForMessageRestricted+0x58>)
   83c60:	4798      	blx	r3
   83c62:	68fb      	ldr	r3, [r7, #12]
   83c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83c66:	f1b3 3fff 	cmp.w	r3, #4294967295
   83c6a:	d102      	bne.n	83c72 <vQueueWaitForMessageRestricted+0x22>
   83c6c:	68fb      	ldr	r3, [r7, #12]
   83c6e:	2200      	movs	r2, #0
   83c70:	645a      	str	r2, [r3, #68]	; 0x44
   83c72:	68fb      	ldr	r3, [r7, #12]
   83c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83c76:	f1b3 3fff 	cmp.w	r3, #4294967295
   83c7a:	d102      	bne.n	83c82 <vQueueWaitForMessageRestricted+0x32>
   83c7c:	68fb      	ldr	r3, [r7, #12]
   83c7e:	2200      	movs	r2, #0
   83c80:	649a      	str	r2, [r3, #72]	; 0x48
   83c82:	4b0a      	ldr	r3, [pc, #40]	; (83cac <vQueueWaitForMessageRestricted+0x5c>)
   83c84:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   83c86:	68fb      	ldr	r3, [r7, #12]
   83c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83c8a:	2b00      	cmp	r3, #0
   83c8c:	d105      	bne.n	83c9a <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83c8e:	68fb      	ldr	r3, [r7, #12]
   83c90:	3324      	adds	r3, #36	; 0x24
   83c92:	4618      	mov	r0, r3
   83c94:	6839      	ldr	r1, [r7, #0]
   83c96:	4b06      	ldr	r3, [pc, #24]	; (83cb0 <vQueueWaitForMessageRestricted+0x60>)
   83c98:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   83c9a:	68f8      	ldr	r0, [r7, #12]
   83c9c:	4b05      	ldr	r3, [pc, #20]	; (83cb4 <vQueueWaitForMessageRestricted+0x64>)
   83c9e:	4798      	blx	r3
	}
   83ca0:	3710      	adds	r7, #16
   83ca2:	46bd      	mov	sp, r7
   83ca4:	bd80      	pop	{r7, pc}
   83ca6:	bf00      	nop
   83ca8:	00082ec9 	.word	0x00082ec9
   83cac:	00082f0d 	.word	0x00082f0d
   83cb0:	0008433d 	.word	0x0008433d
   83cb4:	00083b3d 	.word	0x00083b3d

00083cb8 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83cb8:	b590      	push	{r4, r7, lr}
   83cba:	b08b      	sub	sp, #44	; 0x2c
   83cbc:	af02      	add	r7, sp, #8
   83cbe:	60f8      	str	r0, [r7, #12]
   83cc0:	60b9      	str	r1, [r7, #8]
   83cc2:	603b      	str	r3, [r7, #0]
   83cc4:	4613      	mov	r3, r2
   83cc6:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   83cc8:	68fb      	ldr	r3, [r7, #12]
   83cca:	2b00      	cmp	r3, #0
   83ccc:	d102      	bne.n	83cd4 <xTaskGenericCreate+0x1c>
   83cce:	4b4b      	ldr	r3, [pc, #300]	; (83dfc <xTaskGenericCreate+0x144>)
   83cd0:	4798      	blx	r3
   83cd2:	e7fe      	b.n	83cd2 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   83cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83cd6:	2b04      	cmp	r3, #4
   83cd8:	d902      	bls.n	83ce0 <xTaskGenericCreate+0x28>
   83cda:	4b48      	ldr	r3, [pc, #288]	; (83dfc <xTaskGenericCreate+0x144>)
   83cdc:	4798      	blx	r3
   83cde:	e7fe      	b.n	83cde <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   83ce0:	88fb      	ldrh	r3, [r7, #6]
   83ce2:	4618      	mov	r0, r3
   83ce4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   83ce6:	4b46      	ldr	r3, [pc, #280]	; (83e00 <xTaskGenericCreate+0x148>)
   83ce8:	4798      	blx	r3
   83cea:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   83cec:	69bb      	ldr	r3, [r7, #24]
   83cee:	2b00      	cmp	r3, #0
   83cf0:	d06d      	beq.n	83dce <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   83cf2:	69bb      	ldr	r3, [r7, #24]
   83cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83cf6:	88fb      	ldrh	r3, [r7, #6]
   83cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   83cfc:	3b01      	subs	r3, #1
   83cfe:	009b      	lsls	r3, r3, #2
   83d00:	4413      	add	r3, r2
   83d02:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   83d04:	697b      	ldr	r3, [r7, #20]
   83d06:	f023 0307 	bic.w	r3, r3, #7
   83d0a:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   83d0c:	697b      	ldr	r3, [r7, #20]
   83d0e:	f003 0307 	and.w	r3, r3, #7
   83d12:	2b00      	cmp	r3, #0
   83d14:	d002      	beq.n	83d1c <xTaskGenericCreate+0x64>
   83d16:	4b39      	ldr	r3, [pc, #228]	; (83dfc <xTaskGenericCreate+0x144>)
   83d18:	4798      	blx	r3
   83d1a:	e7fe      	b.n	83d1a <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   83d1c:	88fb      	ldrh	r3, [r7, #6]
   83d1e:	9300      	str	r3, [sp, #0]
   83d20:	69b8      	ldr	r0, [r7, #24]
   83d22:	68b9      	ldr	r1, [r7, #8]
   83d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83d28:	4c36      	ldr	r4, [pc, #216]	; (83e04 <xTaskGenericCreate+0x14c>)
   83d2a:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   83d2c:	6978      	ldr	r0, [r7, #20]
   83d2e:	68f9      	ldr	r1, [r7, #12]
   83d30:	683a      	ldr	r2, [r7, #0]
   83d32:	4b35      	ldr	r3, [pc, #212]	; (83e08 <xTaskGenericCreate+0x150>)
   83d34:	4798      	blx	r3
   83d36:	4602      	mov	r2, r0
   83d38:	69bb      	ldr	r3, [r7, #24]
   83d3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   83d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83d3e:	2b00      	cmp	r3, #0
   83d40:	d002      	beq.n	83d48 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   83d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83d44:	69ba      	ldr	r2, [r7, #24]
   83d46:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   83d48:	4b30      	ldr	r3, [pc, #192]	; (83e0c <xTaskGenericCreate+0x154>)
   83d4a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   83d4c:	4b30      	ldr	r3, [pc, #192]	; (83e10 <xTaskGenericCreate+0x158>)
   83d4e:	681b      	ldr	r3, [r3, #0]
   83d50:	1c5a      	adds	r2, r3, #1
   83d52:	4b2f      	ldr	r3, [pc, #188]	; (83e10 <xTaskGenericCreate+0x158>)
   83d54:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   83d56:	4b2f      	ldr	r3, [pc, #188]	; (83e14 <xTaskGenericCreate+0x15c>)
   83d58:	681b      	ldr	r3, [r3, #0]
   83d5a:	2b00      	cmp	r3, #0
   83d5c:	d109      	bne.n	83d72 <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   83d5e:	4b2d      	ldr	r3, [pc, #180]	; (83e14 <xTaskGenericCreate+0x15c>)
   83d60:	69ba      	ldr	r2, [r7, #24]
   83d62:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   83d64:	4b2a      	ldr	r3, [pc, #168]	; (83e10 <xTaskGenericCreate+0x158>)
   83d66:	681b      	ldr	r3, [r3, #0]
   83d68:	2b01      	cmp	r3, #1
   83d6a:	d10f      	bne.n	83d8c <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83d6c:	4b2a      	ldr	r3, [pc, #168]	; (83e18 <xTaskGenericCreate+0x160>)
   83d6e:	4798      	blx	r3
   83d70:	e00c      	b.n	83d8c <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   83d72:	4b2a      	ldr	r3, [pc, #168]	; (83e1c <xTaskGenericCreate+0x164>)
   83d74:	681b      	ldr	r3, [r3, #0]
   83d76:	2b00      	cmp	r3, #0
   83d78:	d108      	bne.n	83d8c <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   83d7a:	4b26      	ldr	r3, [pc, #152]	; (83e14 <xTaskGenericCreate+0x15c>)
   83d7c:	681b      	ldr	r3, [r3, #0]
   83d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83d82:	429a      	cmp	r2, r3
   83d84:	d802      	bhi.n	83d8c <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   83d86:	4b23      	ldr	r3, [pc, #140]	; (83e14 <xTaskGenericCreate+0x15c>)
   83d88:	69ba      	ldr	r2, [r7, #24]
   83d8a:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83d8c:	4b24      	ldr	r3, [pc, #144]	; (83e20 <xTaskGenericCreate+0x168>)
   83d8e:	681b      	ldr	r3, [r3, #0]
   83d90:	1c5a      	adds	r2, r3, #1
   83d92:	4b23      	ldr	r3, [pc, #140]	; (83e20 <xTaskGenericCreate+0x168>)
   83d94:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   83d96:	69bb      	ldr	r3, [r7, #24]
   83d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83d9a:	2201      	movs	r2, #1
   83d9c:	409a      	lsls	r2, r3
   83d9e:	4b21      	ldr	r3, [pc, #132]	; (83e24 <xTaskGenericCreate+0x16c>)
   83da0:	681b      	ldr	r3, [r3, #0]
   83da2:	431a      	orrs	r2, r3
   83da4:	4b1f      	ldr	r3, [pc, #124]	; (83e24 <xTaskGenericCreate+0x16c>)
   83da6:	601a      	str	r2, [r3, #0]
   83da8:	69bb      	ldr	r3, [r7, #24]
   83daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83dac:	4613      	mov	r3, r2
   83dae:	009b      	lsls	r3, r3, #2
   83db0:	4413      	add	r3, r2
   83db2:	009b      	lsls	r3, r3, #2
   83db4:	4a1c      	ldr	r2, [pc, #112]	; (83e28 <xTaskGenericCreate+0x170>)
   83db6:	441a      	add	r2, r3
   83db8:	69bb      	ldr	r3, [r7, #24]
   83dba:	3304      	adds	r3, #4
   83dbc:	4610      	mov	r0, r2
   83dbe:	4619      	mov	r1, r3
   83dc0:	4b1a      	ldr	r3, [pc, #104]	; (83e2c <xTaskGenericCreate+0x174>)
   83dc2:	4798      	blx	r3

			xReturn = pdPASS;
   83dc4:	2301      	movs	r3, #1
   83dc6:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   83dc8:	4b19      	ldr	r3, [pc, #100]	; (83e30 <xTaskGenericCreate+0x178>)
   83dca:	4798      	blx	r3
   83dcc:	e002      	b.n	83dd4 <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   83dce:	f04f 33ff 	mov.w	r3, #4294967295
   83dd2:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   83dd4:	69fb      	ldr	r3, [r7, #28]
   83dd6:	2b01      	cmp	r3, #1
   83dd8:	d10b      	bne.n	83df2 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   83dda:	4b10      	ldr	r3, [pc, #64]	; (83e1c <xTaskGenericCreate+0x164>)
   83ddc:	681b      	ldr	r3, [r3, #0]
   83dde:	2b00      	cmp	r3, #0
   83de0:	d007      	beq.n	83df2 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   83de2:	4b0c      	ldr	r3, [pc, #48]	; (83e14 <xTaskGenericCreate+0x15c>)
   83de4:	681b      	ldr	r3, [r3, #0]
   83de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83dea:	429a      	cmp	r2, r3
   83dec:	d201      	bcs.n	83df2 <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   83dee:	4b11      	ldr	r3, [pc, #68]	; (83e34 <xTaskGenericCreate+0x17c>)
   83df0:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   83df2:	69fb      	ldr	r3, [r7, #28]
}
   83df4:	4618      	mov	r0, r3
   83df6:	3724      	adds	r7, #36	; 0x24
   83df8:	46bd      	mov	sp, r7
   83dfa:	bd90      	pop	{r4, r7, pc}
   83dfc:	00082f45 	.word	0x00082f45
   83e00:	000847b9 	.word	0x000847b9
   83e04:	000845a5 	.word	0x000845a5
   83e08:	00082d21 	.word	0x00082d21
   83e0c:	00082ec9 	.word	0x00082ec9
   83e10:	2007a5e0 	.word	0x2007a5e0
   83e14:	2007a508 	.word	0x2007a508
   83e18:	0008463d 	.word	0x0008463d
   83e1c:	2007a5ec 	.word	0x2007a5ec
   83e20:	2007a5fc 	.word	0x2007a5fc
   83e24:	2007a5e8 	.word	0x2007a5e8
   83e28:	2007a50c 	.word	0x2007a50c
   83e2c:	00082c15 	.word	0x00082c15
   83e30:	00082f0d 	.word	0x00082f0d
   83e34:	00082ea9 	.word	0x00082ea9

00083e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   83e38:	b590      	push	{r4, r7, lr}
   83e3a:	b087      	sub	sp, #28
   83e3c:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   83e3e:	2300      	movs	r3, #0
   83e40:	9300      	str	r3, [sp, #0]
   83e42:	2300      	movs	r3, #0
   83e44:	9301      	str	r3, [sp, #4]
   83e46:	2300      	movs	r3, #0
   83e48:	9302      	str	r3, [sp, #8]
   83e4a:	2300      	movs	r3, #0
   83e4c:	9303      	str	r3, [sp, #12]
   83e4e:	4812      	ldr	r0, [pc, #72]	; (83e98 <vTaskStartScheduler+0x60>)
   83e50:	4912      	ldr	r1, [pc, #72]	; (83e9c <vTaskStartScheduler+0x64>)
   83e52:	2282      	movs	r2, #130	; 0x82
   83e54:	2300      	movs	r3, #0
   83e56:	4c12      	ldr	r4, [pc, #72]	; (83ea0 <vTaskStartScheduler+0x68>)
   83e58:	47a0      	blx	r4
   83e5a:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   83e5c:	687b      	ldr	r3, [r7, #4]
   83e5e:	2b01      	cmp	r3, #1
   83e60:	d102      	bne.n	83e68 <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   83e62:	4b10      	ldr	r3, [pc, #64]	; (83ea4 <vTaskStartScheduler+0x6c>)
   83e64:	4798      	blx	r3
   83e66:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   83e68:	687b      	ldr	r3, [r7, #4]
   83e6a:	2b01      	cmp	r3, #1
   83e6c:	d10a      	bne.n	83e84 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   83e6e:	4b0e      	ldr	r3, [pc, #56]	; (83ea8 <vTaskStartScheduler+0x70>)
   83e70:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   83e72:	4b0e      	ldr	r3, [pc, #56]	; (83eac <vTaskStartScheduler+0x74>)
   83e74:	2201      	movs	r2, #1
   83e76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   83e78:	4b0d      	ldr	r3, [pc, #52]	; (83eb0 <vTaskStartScheduler+0x78>)
   83e7a:	2200      	movs	r2, #0
   83e7c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   83e7e:	4b0d      	ldr	r3, [pc, #52]	; (83eb4 <vTaskStartScheduler+0x7c>)
   83e80:	4798      	blx	r3
   83e82:	e005      	b.n	83e90 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   83e84:	687b      	ldr	r3, [r7, #4]
   83e86:	2b00      	cmp	r3, #0
   83e88:	d102      	bne.n	83e90 <vTaskStartScheduler+0x58>
   83e8a:	4b07      	ldr	r3, [pc, #28]	; (83ea8 <vTaskStartScheduler+0x70>)
   83e8c:	4798      	blx	r3
   83e8e:	e7fe      	b.n	83e8e <vTaskStartScheduler+0x56>
	}
}
   83e90:	370c      	adds	r7, #12
   83e92:	46bd      	mov	sp, r7
   83e94:	bd90      	pop	{r4, r7, pc}
   83e96:	bf00      	nop
   83e98:	0008457d 	.word	0x0008457d
   83e9c:	00086aa4 	.word	0x00086aa4
   83ea0:	00083cb9 	.word	0x00083cb9
   83ea4:	00084ad1 	.word	0x00084ad1
   83ea8:	00082f45 	.word	0x00082f45
   83eac:	2007a5ec 	.word	0x2007a5ec
   83eb0:	2007a5e4 	.word	0x2007a5e4
   83eb4:	00082de1 	.word	0x00082de1

00083eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   83eb8:	b480      	push	{r7}
   83eba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   83ebc:	4b04      	ldr	r3, [pc, #16]	; (83ed0 <vTaskSuspendAll+0x18>)
   83ebe:	681b      	ldr	r3, [r3, #0]
   83ec0:	1c5a      	adds	r2, r3, #1
   83ec2:	4b03      	ldr	r3, [pc, #12]	; (83ed0 <vTaskSuspendAll+0x18>)
   83ec4:	601a      	str	r2, [r3, #0]
}
   83ec6:	46bd      	mov	sp, r7
   83ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
   83ecc:	4770      	bx	lr
   83ece:	bf00      	nop
   83ed0:	2007a600 	.word	0x2007a600

00083ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   83ed4:	b580      	push	{r7, lr}
   83ed6:	b082      	sub	sp, #8
   83ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   83eda:	2300      	movs	r3, #0
   83edc:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   83ede:	4b37      	ldr	r3, [pc, #220]	; (83fbc <xTaskResumeAll+0xe8>)
   83ee0:	681b      	ldr	r3, [r3, #0]
   83ee2:	2b00      	cmp	r3, #0
   83ee4:	d102      	bne.n	83eec <xTaskResumeAll+0x18>
   83ee6:	4b36      	ldr	r3, [pc, #216]	; (83fc0 <xTaskResumeAll+0xec>)
   83ee8:	4798      	blx	r3
   83eea:	e7fe      	b.n	83eea <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   83eec:	4b35      	ldr	r3, [pc, #212]	; (83fc4 <xTaskResumeAll+0xf0>)
   83eee:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   83ef0:	4b32      	ldr	r3, [pc, #200]	; (83fbc <xTaskResumeAll+0xe8>)
   83ef2:	681b      	ldr	r3, [r3, #0]
   83ef4:	1e5a      	subs	r2, r3, #1
   83ef6:	4b31      	ldr	r3, [pc, #196]	; (83fbc <xTaskResumeAll+0xe8>)
   83ef8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83efa:	4b30      	ldr	r3, [pc, #192]	; (83fbc <xTaskResumeAll+0xe8>)
   83efc:	681b      	ldr	r3, [r3, #0]
   83efe:	2b00      	cmp	r3, #0
   83f00:	d155      	bne.n	83fae <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   83f02:	4b31      	ldr	r3, [pc, #196]	; (83fc8 <xTaskResumeAll+0xf4>)
   83f04:	681b      	ldr	r3, [r3, #0]
   83f06:	2b00      	cmp	r3, #0
   83f08:	d051      	beq.n	83fae <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f0a:	e02e      	b.n	83f6a <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   83f0c:	4b2f      	ldr	r3, [pc, #188]	; (83fcc <xTaskResumeAll+0xf8>)
   83f0e:	68db      	ldr	r3, [r3, #12]
   83f10:	68db      	ldr	r3, [r3, #12]
   83f12:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   83f14:	683b      	ldr	r3, [r7, #0]
   83f16:	3318      	adds	r3, #24
   83f18:	4618      	mov	r0, r3
   83f1a:	4b2d      	ldr	r3, [pc, #180]	; (83fd0 <xTaskResumeAll+0xfc>)
   83f1c:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   83f1e:	683b      	ldr	r3, [r7, #0]
   83f20:	3304      	adds	r3, #4
   83f22:	4618      	mov	r0, r3
   83f24:	4b2a      	ldr	r3, [pc, #168]	; (83fd0 <xTaskResumeAll+0xfc>)
   83f26:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   83f28:	683b      	ldr	r3, [r7, #0]
   83f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f2c:	2201      	movs	r2, #1
   83f2e:	409a      	lsls	r2, r3
   83f30:	4b28      	ldr	r3, [pc, #160]	; (83fd4 <xTaskResumeAll+0x100>)
   83f32:	681b      	ldr	r3, [r3, #0]
   83f34:	431a      	orrs	r2, r3
   83f36:	4b27      	ldr	r3, [pc, #156]	; (83fd4 <xTaskResumeAll+0x100>)
   83f38:	601a      	str	r2, [r3, #0]
   83f3a:	683b      	ldr	r3, [r7, #0]
   83f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f3e:	4613      	mov	r3, r2
   83f40:	009b      	lsls	r3, r3, #2
   83f42:	4413      	add	r3, r2
   83f44:	009b      	lsls	r3, r3, #2
   83f46:	4a24      	ldr	r2, [pc, #144]	; (83fd8 <xTaskResumeAll+0x104>)
   83f48:	441a      	add	r2, r3
   83f4a:	683b      	ldr	r3, [r7, #0]
   83f4c:	3304      	adds	r3, #4
   83f4e:	4610      	mov	r0, r2
   83f50:	4619      	mov	r1, r3
   83f52:	4b22      	ldr	r3, [pc, #136]	; (83fdc <xTaskResumeAll+0x108>)
   83f54:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83f56:	683b      	ldr	r3, [r7, #0]
   83f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83f5a:	4b21      	ldr	r3, [pc, #132]	; (83fe0 <xTaskResumeAll+0x10c>)
   83f5c:	681b      	ldr	r3, [r3, #0]
   83f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83f60:	429a      	cmp	r2, r3
   83f62:	d302      	bcc.n	83f6a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   83f64:	4b1f      	ldr	r3, [pc, #124]	; (83fe4 <xTaskResumeAll+0x110>)
   83f66:	2201      	movs	r2, #1
   83f68:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   83f6a:	4b18      	ldr	r3, [pc, #96]	; (83fcc <xTaskResumeAll+0xf8>)
   83f6c:	681b      	ldr	r3, [r3, #0]
   83f6e:	2b00      	cmp	r3, #0
   83f70:	d1cc      	bne.n	83f0c <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   83f72:	4b1d      	ldr	r3, [pc, #116]	; (83fe8 <xTaskResumeAll+0x114>)
   83f74:	681b      	ldr	r3, [r3, #0]
   83f76:	2b00      	cmp	r3, #0
   83f78:	d011      	beq.n	83f9e <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83f7a:	e00c      	b.n	83f96 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   83f7c:	4b1b      	ldr	r3, [pc, #108]	; (83fec <xTaskResumeAll+0x118>)
   83f7e:	4798      	blx	r3
   83f80:	4603      	mov	r3, r0
   83f82:	2b00      	cmp	r3, #0
   83f84:	d002      	beq.n	83f8c <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   83f86:	4b17      	ldr	r3, [pc, #92]	; (83fe4 <xTaskResumeAll+0x110>)
   83f88:	2201      	movs	r2, #1
   83f8a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   83f8c:	4b16      	ldr	r3, [pc, #88]	; (83fe8 <xTaskResumeAll+0x114>)
   83f8e:	681b      	ldr	r3, [r3, #0]
   83f90:	1e5a      	subs	r2, r3, #1
   83f92:	4b15      	ldr	r3, [pc, #84]	; (83fe8 <xTaskResumeAll+0x114>)
   83f94:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83f96:	4b14      	ldr	r3, [pc, #80]	; (83fe8 <xTaskResumeAll+0x114>)
   83f98:	681b      	ldr	r3, [r3, #0]
   83f9a:	2b00      	cmp	r3, #0
   83f9c:	d1ee      	bne.n	83f7c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   83f9e:	4b11      	ldr	r3, [pc, #68]	; (83fe4 <xTaskResumeAll+0x110>)
   83fa0:	681b      	ldr	r3, [r3, #0]
   83fa2:	2b01      	cmp	r3, #1
   83fa4:	d103      	bne.n	83fae <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   83fa6:	2301      	movs	r3, #1
   83fa8:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   83faa:	4b11      	ldr	r3, [pc, #68]	; (83ff0 <xTaskResumeAll+0x11c>)
   83fac:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83fae:	4b11      	ldr	r3, [pc, #68]	; (83ff4 <xTaskResumeAll+0x120>)
   83fb0:	4798      	blx	r3

	return xAlreadyYielded;
   83fb2:	687b      	ldr	r3, [r7, #4]
}
   83fb4:	4618      	mov	r0, r3
   83fb6:	3708      	adds	r7, #8
   83fb8:	46bd      	mov	sp, r7
   83fba:	bd80      	pop	{r7, pc}
   83fbc:	2007a600 	.word	0x2007a600
   83fc0:	00082f45 	.word	0x00082f45
   83fc4:	00082ec9 	.word	0x00082ec9
   83fc8:	2007a5e0 	.word	0x2007a5e0
   83fcc:	2007a5a0 	.word	0x2007a5a0
   83fd0:	00082ccd 	.word	0x00082ccd
   83fd4:	2007a5e8 	.word	0x2007a5e8
   83fd8:	2007a50c 	.word	0x2007a50c
   83fdc:	00082c15 	.word	0x00082c15
   83fe0:	2007a508 	.word	0x2007a508
   83fe4:	2007a5f4 	.word	0x2007a5f4
   83fe8:	2007a5f0 	.word	0x2007a5f0
   83fec:	00084025 	.word	0x00084025
   83ff0:	00082ea9 	.word	0x00082ea9
   83ff4:	00082f0d 	.word	0x00082f0d

00083ff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   83ff8:	b580      	push	{r7, lr}
   83ffa:	b082      	sub	sp, #8
   83ffc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   83ffe:	4b06      	ldr	r3, [pc, #24]	; (84018 <xTaskGetTickCount+0x20>)
   84000:	4798      	blx	r3
	{
		xTicks = xTickCount;
   84002:	4b06      	ldr	r3, [pc, #24]	; (8401c <xTaskGetTickCount+0x24>)
   84004:	681b      	ldr	r3, [r3, #0]
   84006:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   84008:	4b05      	ldr	r3, [pc, #20]	; (84020 <xTaskGetTickCount+0x28>)
   8400a:	4798      	blx	r3

	return xTicks;
   8400c:	687b      	ldr	r3, [r7, #4]
}
   8400e:	4618      	mov	r0, r3
   84010:	3708      	adds	r7, #8
   84012:	46bd      	mov	sp, r7
   84014:	bd80      	pop	{r7, pc}
   84016:	bf00      	nop
   84018:	00082ec9 	.word	0x00082ec9
   8401c:	2007a5e4 	.word	0x2007a5e4
   84020:	00082f0d 	.word	0x00082f0d

00084024 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   84024:	b580      	push	{r7, lr}
   84026:	b086      	sub	sp, #24
   84028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8402a:	2300      	movs	r3, #0
   8402c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8402e:	4b4d      	ldr	r3, [pc, #308]	; (84164 <xTaskIncrementTick+0x140>)
   84030:	681b      	ldr	r3, [r3, #0]
   84032:	2b00      	cmp	r3, #0
   84034:	f040 8086 	bne.w	84144 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   84038:	4b4b      	ldr	r3, [pc, #300]	; (84168 <xTaskIncrementTick+0x144>)
   8403a:	681b      	ldr	r3, [r3, #0]
   8403c:	1c5a      	adds	r2, r3, #1
   8403e:	4b4a      	ldr	r3, [pc, #296]	; (84168 <xTaskIncrementTick+0x144>)
   84040:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   84042:	4b49      	ldr	r3, [pc, #292]	; (84168 <xTaskIncrementTick+0x144>)
   84044:	681b      	ldr	r3, [r3, #0]
   84046:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   84048:	693b      	ldr	r3, [r7, #16]
   8404a:	2b00      	cmp	r3, #0
   8404c:	d118      	bne.n	84080 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   8404e:	4b47      	ldr	r3, [pc, #284]	; (8416c <xTaskIncrementTick+0x148>)
   84050:	681b      	ldr	r3, [r3, #0]
   84052:	681b      	ldr	r3, [r3, #0]
   84054:	2b00      	cmp	r3, #0
   84056:	d002      	beq.n	8405e <xTaskIncrementTick+0x3a>
   84058:	4b45      	ldr	r3, [pc, #276]	; (84170 <xTaskIncrementTick+0x14c>)
   8405a:	4798      	blx	r3
   8405c:	e7fe      	b.n	8405c <xTaskIncrementTick+0x38>
   8405e:	4b43      	ldr	r3, [pc, #268]	; (8416c <xTaskIncrementTick+0x148>)
   84060:	681b      	ldr	r3, [r3, #0]
   84062:	60fb      	str	r3, [r7, #12]
   84064:	4b43      	ldr	r3, [pc, #268]	; (84174 <xTaskIncrementTick+0x150>)
   84066:	681a      	ldr	r2, [r3, #0]
   84068:	4b40      	ldr	r3, [pc, #256]	; (8416c <xTaskIncrementTick+0x148>)
   8406a:	601a      	str	r2, [r3, #0]
   8406c:	4b41      	ldr	r3, [pc, #260]	; (84174 <xTaskIncrementTick+0x150>)
   8406e:	68fa      	ldr	r2, [r7, #12]
   84070:	601a      	str	r2, [r3, #0]
   84072:	4b41      	ldr	r3, [pc, #260]	; (84178 <xTaskIncrementTick+0x154>)
   84074:	681b      	ldr	r3, [r3, #0]
   84076:	1c5a      	adds	r2, r3, #1
   84078:	4b3f      	ldr	r3, [pc, #252]	; (84178 <xTaskIncrementTick+0x154>)
   8407a:	601a      	str	r2, [r3, #0]
   8407c:	4b3f      	ldr	r3, [pc, #252]	; (8417c <xTaskIncrementTick+0x158>)
   8407e:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   84080:	4b3f      	ldr	r3, [pc, #252]	; (84180 <xTaskIncrementTick+0x15c>)
   84082:	681b      	ldr	r3, [r3, #0]
   84084:	693a      	ldr	r2, [r7, #16]
   84086:	429a      	cmp	r2, r3
   84088:	d34d      	bcc.n	84126 <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8408a:	4b38      	ldr	r3, [pc, #224]	; (8416c <xTaskIncrementTick+0x148>)
   8408c:	681b      	ldr	r3, [r3, #0]
   8408e:	681b      	ldr	r3, [r3, #0]
   84090:	2b00      	cmp	r3, #0
   84092:	d101      	bne.n	84098 <xTaskIncrementTick+0x74>
   84094:	2301      	movs	r3, #1
   84096:	e000      	b.n	8409a <xTaskIncrementTick+0x76>
   84098:	2300      	movs	r3, #0
   8409a:	2b00      	cmp	r3, #0
   8409c:	d004      	beq.n	840a8 <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   8409e:	4b38      	ldr	r3, [pc, #224]	; (84180 <xTaskIncrementTick+0x15c>)
   840a0:	f04f 32ff 	mov.w	r2, #4294967295
   840a4:	601a      	str	r2, [r3, #0]
						break;
   840a6:	e03e      	b.n	84126 <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   840a8:	4b30      	ldr	r3, [pc, #192]	; (8416c <xTaskIncrementTick+0x148>)
   840aa:	681b      	ldr	r3, [r3, #0]
   840ac:	68db      	ldr	r3, [r3, #12]
   840ae:	68db      	ldr	r3, [r3, #12]
   840b0:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   840b2:	68bb      	ldr	r3, [r7, #8]
   840b4:	685b      	ldr	r3, [r3, #4]
   840b6:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   840b8:	693a      	ldr	r2, [r7, #16]
   840ba:	687b      	ldr	r3, [r7, #4]
   840bc:	429a      	cmp	r2, r3
   840be:	d203      	bcs.n	840c8 <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   840c0:	4b2f      	ldr	r3, [pc, #188]	; (84180 <xTaskIncrementTick+0x15c>)
   840c2:	687a      	ldr	r2, [r7, #4]
   840c4:	601a      	str	r2, [r3, #0]
							break;
   840c6:	e02e      	b.n	84126 <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   840c8:	68bb      	ldr	r3, [r7, #8]
   840ca:	3304      	adds	r3, #4
   840cc:	4618      	mov	r0, r3
   840ce:	4b2d      	ldr	r3, [pc, #180]	; (84184 <xTaskIncrementTick+0x160>)
   840d0:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   840d2:	68bb      	ldr	r3, [r7, #8]
   840d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   840d6:	2b00      	cmp	r3, #0
   840d8:	d004      	beq.n	840e4 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   840da:	68bb      	ldr	r3, [r7, #8]
   840dc:	3318      	adds	r3, #24
   840de:	4618      	mov	r0, r3
   840e0:	4b28      	ldr	r3, [pc, #160]	; (84184 <xTaskIncrementTick+0x160>)
   840e2:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   840e4:	68bb      	ldr	r3, [r7, #8]
   840e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   840e8:	2201      	movs	r2, #1
   840ea:	409a      	lsls	r2, r3
   840ec:	4b26      	ldr	r3, [pc, #152]	; (84188 <xTaskIncrementTick+0x164>)
   840ee:	681b      	ldr	r3, [r3, #0]
   840f0:	431a      	orrs	r2, r3
   840f2:	4b25      	ldr	r3, [pc, #148]	; (84188 <xTaskIncrementTick+0x164>)
   840f4:	601a      	str	r2, [r3, #0]
   840f6:	68bb      	ldr	r3, [r7, #8]
   840f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   840fa:	4613      	mov	r3, r2
   840fc:	009b      	lsls	r3, r3, #2
   840fe:	4413      	add	r3, r2
   84100:	009b      	lsls	r3, r3, #2
   84102:	4a22      	ldr	r2, [pc, #136]	; (8418c <xTaskIncrementTick+0x168>)
   84104:	441a      	add	r2, r3
   84106:	68bb      	ldr	r3, [r7, #8]
   84108:	3304      	adds	r3, #4
   8410a:	4610      	mov	r0, r2
   8410c:	4619      	mov	r1, r3
   8410e:	4b20      	ldr	r3, [pc, #128]	; (84190 <xTaskIncrementTick+0x16c>)
   84110:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84112:	68bb      	ldr	r3, [r7, #8]
   84114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84116:	4b1f      	ldr	r3, [pc, #124]	; (84194 <xTaskIncrementTick+0x170>)
   84118:	681b      	ldr	r3, [r3, #0]
   8411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8411c:	429a      	cmp	r2, r3
   8411e:	d301      	bcc.n	84124 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   84120:	2301      	movs	r3, #1
   84122:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   84124:	e7b1      	b.n	8408a <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   84126:	4b1b      	ldr	r3, [pc, #108]	; (84194 <xTaskIncrementTick+0x170>)
   84128:	681b      	ldr	r3, [r3, #0]
   8412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8412c:	4917      	ldr	r1, [pc, #92]	; (8418c <xTaskIncrementTick+0x168>)
   8412e:	4613      	mov	r3, r2
   84130:	009b      	lsls	r3, r3, #2
   84132:	4413      	add	r3, r2
   84134:	009b      	lsls	r3, r3, #2
   84136:	440b      	add	r3, r1
   84138:	681b      	ldr	r3, [r3, #0]
   8413a:	2b01      	cmp	r3, #1
   8413c:	d907      	bls.n	8414e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   8413e:	2301      	movs	r3, #1
   84140:	617b      	str	r3, [r7, #20]
   84142:	e004      	b.n	8414e <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   84144:	4b14      	ldr	r3, [pc, #80]	; (84198 <xTaskIncrementTick+0x174>)
   84146:	681b      	ldr	r3, [r3, #0]
   84148:	1c5a      	adds	r2, r3, #1
   8414a:	4b13      	ldr	r3, [pc, #76]	; (84198 <xTaskIncrementTick+0x174>)
   8414c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   8414e:	4b13      	ldr	r3, [pc, #76]	; (8419c <xTaskIncrementTick+0x178>)
   84150:	681b      	ldr	r3, [r3, #0]
   84152:	2b00      	cmp	r3, #0
   84154:	d001      	beq.n	8415a <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   84156:	2301      	movs	r3, #1
   84158:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8415a:	697b      	ldr	r3, [r7, #20]
}
   8415c:	4618      	mov	r0, r3
   8415e:	3718      	adds	r7, #24
   84160:	46bd      	mov	sp, r7
   84162:	bd80      	pop	{r7, pc}
   84164:	2007a600 	.word	0x2007a600
   84168:	2007a5e4 	.word	0x2007a5e4
   8416c:	2007a598 	.word	0x2007a598
   84170:	00082f45 	.word	0x00082f45
   84174:	2007a59c 	.word	0x2007a59c
   84178:	2007a5f8 	.word	0x2007a5f8
   8417c:	0008484d 	.word	0x0008484d
   84180:	20070008 	.word	0x20070008
   84184:	00082ccd 	.word	0x00082ccd
   84188:	2007a5e8 	.word	0x2007a5e8
   8418c:	2007a50c 	.word	0x2007a50c
   84190:	00082c15 	.word	0x00082c15
   84194:	2007a508 	.word	0x2007a508
   84198:	2007a5f0 	.word	0x2007a5f0
   8419c:	2007a5f4 	.word	0x2007a5f4

000841a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   841a0:	b580      	push	{r7, lr}
   841a2:	b084      	sub	sp, #16
   841a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   841a6:	4b34      	ldr	r3, [pc, #208]	; (84278 <vTaskSwitchContext+0xd8>)
   841a8:	681b      	ldr	r3, [r3, #0]
   841aa:	2b00      	cmp	r3, #0
   841ac:	d003      	beq.n	841b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   841ae:	4b33      	ldr	r3, [pc, #204]	; (8427c <vTaskSwitchContext+0xdc>)
   841b0:	2201      	movs	r2, #1
   841b2:	601a      	str	r2, [r3, #0]
   841b4:	e05c      	b.n	84270 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   841b6:	4b31      	ldr	r3, [pc, #196]	; (8427c <vTaskSwitchContext+0xdc>)
   841b8:	2200      	movs	r2, #0
   841ba:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   841bc:	4b30      	ldr	r3, [pc, #192]	; (84280 <vTaskSwitchContext+0xe0>)
   841be:	681b      	ldr	r3, [r3, #0]
   841c0:	681a      	ldr	r2, [r3, #0]
   841c2:	4b2f      	ldr	r3, [pc, #188]	; (84280 <vTaskSwitchContext+0xe0>)
   841c4:	681b      	ldr	r3, [r3, #0]
   841c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841c8:	429a      	cmp	r2, r3
   841ca:	d808      	bhi.n	841de <vTaskSwitchContext+0x3e>
   841cc:	4b2c      	ldr	r3, [pc, #176]	; (84280 <vTaskSwitchContext+0xe0>)
   841ce:	681a      	ldr	r2, [r3, #0]
   841d0:	4b2b      	ldr	r3, [pc, #172]	; (84280 <vTaskSwitchContext+0xe0>)
   841d2:	681b      	ldr	r3, [r3, #0]
   841d4:	3334      	adds	r3, #52	; 0x34
   841d6:	4610      	mov	r0, r2
   841d8:	4619      	mov	r1, r3
   841da:	4b2a      	ldr	r3, [pc, #168]	; (84284 <vTaskSwitchContext+0xe4>)
   841dc:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   841de:	4b28      	ldr	r3, [pc, #160]	; (84280 <vTaskSwitchContext+0xe0>)
   841e0:	681b      	ldr	r3, [r3, #0]
   841e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   841e4:	4618      	mov	r0, r3
   841e6:	4928      	ldr	r1, [pc, #160]	; (84288 <vTaskSwitchContext+0xe8>)
   841e8:	2214      	movs	r2, #20
   841ea:	4b28      	ldr	r3, [pc, #160]	; (8428c <vTaskSwitchContext+0xec>)
   841ec:	4798      	blx	r3
   841ee:	4603      	mov	r3, r0
   841f0:	2b00      	cmp	r3, #0
   841f2:	d008      	beq.n	84206 <vTaskSwitchContext+0x66>
   841f4:	4b22      	ldr	r3, [pc, #136]	; (84280 <vTaskSwitchContext+0xe0>)
   841f6:	681a      	ldr	r2, [r3, #0]
   841f8:	4b21      	ldr	r3, [pc, #132]	; (84280 <vTaskSwitchContext+0xe0>)
   841fa:	681b      	ldr	r3, [r3, #0]
   841fc:	3334      	adds	r3, #52	; 0x34
   841fe:	4610      	mov	r0, r2
   84200:	4619      	mov	r1, r3
   84202:	4b20      	ldr	r3, [pc, #128]	; (84284 <vTaskSwitchContext+0xe4>)
   84204:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   84206:	4b22      	ldr	r3, [pc, #136]	; (84290 <vTaskSwitchContext+0xf0>)
   84208:	681b      	ldr	r3, [r3, #0]
   8420a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   8420c:	687b      	ldr	r3, [r7, #4]
   8420e:	fab3 f383 	clz	r3, r3
   84212:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   84214:	78fb      	ldrb	r3, [r7, #3]
   84216:	f1c3 031f 	rsb	r3, r3, #31
   8421a:	60fb      	str	r3, [r7, #12]
   8421c:	491d      	ldr	r1, [pc, #116]	; (84294 <vTaskSwitchContext+0xf4>)
   8421e:	68fa      	ldr	r2, [r7, #12]
   84220:	4613      	mov	r3, r2
   84222:	009b      	lsls	r3, r3, #2
   84224:	4413      	add	r3, r2
   84226:	009b      	lsls	r3, r3, #2
   84228:	440b      	add	r3, r1
   8422a:	681b      	ldr	r3, [r3, #0]
   8422c:	2b00      	cmp	r3, #0
   8422e:	d102      	bne.n	84236 <vTaskSwitchContext+0x96>
   84230:	4b19      	ldr	r3, [pc, #100]	; (84298 <vTaskSwitchContext+0xf8>)
   84232:	4798      	blx	r3
   84234:	e7fe      	b.n	84234 <vTaskSwitchContext+0x94>
   84236:	68fa      	ldr	r2, [r7, #12]
   84238:	4613      	mov	r3, r2
   8423a:	009b      	lsls	r3, r3, #2
   8423c:	4413      	add	r3, r2
   8423e:	009b      	lsls	r3, r3, #2
   84240:	4a14      	ldr	r2, [pc, #80]	; (84294 <vTaskSwitchContext+0xf4>)
   84242:	4413      	add	r3, r2
   84244:	60bb      	str	r3, [r7, #8]
   84246:	68bb      	ldr	r3, [r7, #8]
   84248:	685b      	ldr	r3, [r3, #4]
   8424a:	685a      	ldr	r2, [r3, #4]
   8424c:	68bb      	ldr	r3, [r7, #8]
   8424e:	605a      	str	r2, [r3, #4]
   84250:	68bb      	ldr	r3, [r7, #8]
   84252:	685a      	ldr	r2, [r3, #4]
   84254:	68bb      	ldr	r3, [r7, #8]
   84256:	3308      	adds	r3, #8
   84258:	429a      	cmp	r2, r3
   8425a:	d104      	bne.n	84266 <vTaskSwitchContext+0xc6>
   8425c:	68bb      	ldr	r3, [r7, #8]
   8425e:	685b      	ldr	r3, [r3, #4]
   84260:	685a      	ldr	r2, [r3, #4]
   84262:	68bb      	ldr	r3, [r7, #8]
   84264:	605a      	str	r2, [r3, #4]
   84266:	68bb      	ldr	r3, [r7, #8]
   84268:	685b      	ldr	r3, [r3, #4]
   8426a:	68da      	ldr	r2, [r3, #12]
   8426c:	4b04      	ldr	r3, [pc, #16]	; (84280 <vTaskSwitchContext+0xe0>)
   8426e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   84270:	3710      	adds	r7, #16
   84272:	46bd      	mov	sp, r7
   84274:	bd80      	pop	{r7, pc}
   84276:	bf00      	nop
   84278:	2007a600 	.word	0x2007a600
   8427c:	2007a5f4 	.word	0x2007a5f4
   84280:	2007a508 	.word	0x2007a508
   84284:	00085ff9 	.word	0x00085ff9
   84288:	00086aac 	.word	0x00086aac
   8428c:	0008666d 	.word	0x0008666d
   84290:	2007a5e8 	.word	0x2007a5e8
   84294:	2007a50c 	.word	0x2007a50c
   84298:	00082f45 	.word	0x00082f45

0008429c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   8429c:	b580      	push	{r7, lr}
   8429e:	b084      	sub	sp, #16
   842a0:	af00      	add	r7, sp, #0
   842a2:	6078      	str	r0, [r7, #4]
   842a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   842a6:	687b      	ldr	r3, [r7, #4]
   842a8:	2b00      	cmp	r3, #0
   842aa:	d102      	bne.n	842b2 <vTaskPlaceOnEventList+0x16>
   842ac:	4b1a      	ldr	r3, [pc, #104]	; (84318 <vTaskPlaceOnEventList+0x7c>)
   842ae:	4798      	blx	r3
   842b0:	e7fe      	b.n	842b0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   842b2:	4b1a      	ldr	r3, [pc, #104]	; (8431c <vTaskPlaceOnEventList+0x80>)
   842b4:	681b      	ldr	r3, [r3, #0]
   842b6:	3318      	adds	r3, #24
   842b8:	6878      	ldr	r0, [r7, #4]
   842ba:	4619      	mov	r1, r3
   842bc:	4b18      	ldr	r3, [pc, #96]	; (84320 <vTaskPlaceOnEventList+0x84>)
   842be:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   842c0:	4b16      	ldr	r3, [pc, #88]	; (8431c <vTaskPlaceOnEventList+0x80>)
   842c2:	681b      	ldr	r3, [r3, #0]
   842c4:	3304      	adds	r3, #4
   842c6:	4618      	mov	r0, r3
   842c8:	4b16      	ldr	r3, [pc, #88]	; (84324 <vTaskPlaceOnEventList+0x88>)
   842ca:	4798      	blx	r3
   842cc:	4603      	mov	r3, r0
   842ce:	2b00      	cmp	r3, #0
   842d0:	d10b      	bne.n	842ea <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   842d2:	4b12      	ldr	r3, [pc, #72]	; (8431c <vTaskPlaceOnEventList+0x80>)
   842d4:	681b      	ldr	r3, [r3, #0]
   842d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   842d8:	2201      	movs	r2, #1
   842da:	fa02 f303 	lsl.w	r3, r2, r3
   842de:	43da      	mvns	r2, r3
   842e0:	4b11      	ldr	r3, [pc, #68]	; (84328 <vTaskPlaceOnEventList+0x8c>)
   842e2:	681b      	ldr	r3, [r3, #0]
   842e4:	401a      	ands	r2, r3
   842e6:	4b10      	ldr	r3, [pc, #64]	; (84328 <vTaskPlaceOnEventList+0x8c>)
   842e8:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   842ea:	683b      	ldr	r3, [r7, #0]
   842ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   842f0:	d107      	bne.n	84302 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   842f2:	4b0a      	ldr	r3, [pc, #40]	; (8431c <vTaskPlaceOnEventList+0x80>)
   842f4:	681b      	ldr	r3, [r3, #0]
   842f6:	3304      	adds	r3, #4
   842f8:	480c      	ldr	r0, [pc, #48]	; (8432c <vTaskPlaceOnEventList+0x90>)
   842fa:	4619      	mov	r1, r3
   842fc:	4b0c      	ldr	r3, [pc, #48]	; (84330 <vTaskPlaceOnEventList+0x94>)
   842fe:	4798      	blx	r3
   84300:	e007      	b.n	84312 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   84302:	4b0c      	ldr	r3, [pc, #48]	; (84334 <vTaskPlaceOnEventList+0x98>)
   84304:	681a      	ldr	r2, [r3, #0]
   84306:	683b      	ldr	r3, [r7, #0]
   84308:	4413      	add	r3, r2
   8430a:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8430c:	68f8      	ldr	r0, [r7, #12]
   8430e:	4b0a      	ldr	r3, [pc, #40]	; (84338 <vTaskPlaceOnEventList+0x9c>)
   84310:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   84312:	3710      	adds	r7, #16
   84314:	46bd      	mov	sp, r7
   84316:	bd80      	pop	{r7, pc}
   84318:	00082f45 	.word	0x00082f45
   8431c:	2007a508 	.word	0x2007a508
   84320:	00082c5d 	.word	0x00082c5d
   84324:	00082ccd 	.word	0x00082ccd
   84328:	2007a5e8 	.word	0x2007a5e8
   8432c:	2007a5cc 	.word	0x2007a5cc
   84330:	00082c15 	.word	0x00082c15
   84334:	2007a5e4 	.word	0x2007a5e4
   84338:	00084749 	.word	0x00084749

0008433c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   8433c:	b580      	push	{r7, lr}
   8433e:	b084      	sub	sp, #16
   84340:	af00      	add	r7, sp, #0
   84342:	6078      	str	r0, [r7, #4]
   84344:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   84346:	687b      	ldr	r3, [r7, #4]
   84348:	2b00      	cmp	r3, #0
   8434a:	d102      	bne.n	84352 <vTaskPlaceOnEventListRestricted+0x16>
   8434c:	4b14      	ldr	r3, [pc, #80]	; (843a0 <vTaskPlaceOnEventListRestricted+0x64>)
   8434e:	4798      	blx	r3
   84350:	e7fe      	b.n	84350 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84352:	4b14      	ldr	r3, [pc, #80]	; (843a4 <vTaskPlaceOnEventListRestricted+0x68>)
   84354:	681b      	ldr	r3, [r3, #0]
   84356:	3318      	adds	r3, #24
   84358:	6878      	ldr	r0, [r7, #4]
   8435a:	4619      	mov	r1, r3
   8435c:	4b12      	ldr	r3, [pc, #72]	; (843a8 <vTaskPlaceOnEventListRestricted+0x6c>)
   8435e:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84360:	4b10      	ldr	r3, [pc, #64]	; (843a4 <vTaskPlaceOnEventListRestricted+0x68>)
   84362:	681b      	ldr	r3, [r3, #0]
   84364:	3304      	adds	r3, #4
   84366:	4618      	mov	r0, r3
   84368:	4b10      	ldr	r3, [pc, #64]	; (843ac <vTaskPlaceOnEventListRestricted+0x70>)
   8436a:	4798      	blx	r3
   8436c:	4603      	mov	r3, r0
   8436e:	2b00      	cmp	r3, #0
   84370:	d10b      	bne.n	8438a <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84372:	4b0c      	ldr	r3, [pc, #48]	; (843a4 <vTaskPlaceOnEventListRestricted+0x68>)
   84374:	681b      	ldr	r3, [r3, #0]
   84376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84378:	2201      	movs	r2, #1
   8437a:	fa02 f303 	lsl.w	r3, r2, r3
   8437e:	43da      	mvns	r2, r3
   84380:	4b0b      	ldr	r3, [pc, #44]	; (843b0 <vTaskPlaceOnEventListRestricted+0x74>)
   84382:	681b      	ldr	r3, [r3, #0]
   84384:	401a      	ands	r2, r3
   84386:	4b0a      	ldr	r3, [pc, #40]	; (843b0 <vTaskPlaceOnEventListRestricted+0x74>)
   84388:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8438a:	4b0a      	ldr	r3, [pc, #40]	; (843b4 <vTaskPlaceOnEventListRestricted+0x78>)
   8438c:	681a      	ldr	r2, [r3, #0]
   8438e:	683b      	ldr	r3, [r7, #0]
   84390:	4413      	add	r3, r2
   84392:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   84394:	68f8      	ldr	r0, [r7, #12]
   84396:	4b08      	ldr	r3, [pc, #32]	; (843b8 <vTaskPlaceOnEventListRestricted+0x7c>)
   84398:	4798      	blx	r3
	}
   8439a:	3710      	adds	r7, #16
   8439c:	46bd      	mov	sp, r7
   8439e:	bd80      	pop	{r7, pc}
   843a0:	00082f45 	.word	0x00082f45
   843a4:	2007a508 	.word	0x2007a508
   843a8:	00082c15 	.word	0x00082c15
   843ac:	00082ccd 	.word	0x00082ccd
   843b0:	2007a5e8 	.word	0x2007a5e8
   843b4:	2007a5e4 	.word	0x2007a5e4
   843b8:	00084749 	.word	0x00084749

000843bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   843bc:	b580      	push	{r7, lr}
   843be:	b084      	sub	sp, #16
   843c0:	af00      	add	r7, sp, #0
   843c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   843c4:	687b      	ldr	r3, [r7, #4]
   843c6:	68db      	ldr	r3, [r3, #12]
   843c8:	68db      	ldr	r3, [r3, #12]
   843ca:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   843cc:	68bb      	ldr	r3, [r7, #8]
   843ce:	2b00      	cmp	r3, #0
   843d0:	d102      	bne.n	843d8 <xTaskRemoveFromEventList+0x1c>
   843d2:	4b21      	ldr	r3, [pc, #132]	; (84458 <xTaskRemoveFromEventList+0x9c>)
   843d4:	4798      	blx	r3
   843d6:	e7fe      	b.n	843d6 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   843d8:	68bb      	ldr	r3, [r7, #8]
   843da:	3318      	adds	r3, #24
   843dc:	4618      	mov	r0, r3
   843de:	4b1f      	ldr	r3, [pc, #124]	; (8445c <xTaskRemoveFromEventList+0xa0>)
   843e0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   843e2:	4b1f      	ldr	r3, [pc, #124]	; (84460 <xTaskRemoveFromEventList+0xa4>)
   843e4:	681b      	ldr	r3, [r3, #0]
   843e6:	2b00      	cmp	r3, #0
   843e8:	d11c      	bne.n	84424 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   843ea:	68bb      	ldr	r3, [r7, #8]
   843ec:	3304      	adds	r3, #4
   843ee:	4618      	mov	r0, r3
   843f0:	4b1a      	ldr	r3, [pc, #104]	; (8445c <xTaskRemoveFromEventList+0xa0>)
   843f2:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   843f4:	68bb      	ldr	r3, [r7, #8]
   843f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   843f8:	2201      	movs	r2, #1
   843fa:	409a      	lsls	r2, r3
   843fc:	4b19      	ldr	r3, [pc, #100]	; (84464 <xTaskRemoveFromEventList+0xa8>)
   843fe:	681b      	ldr	r3, [r3, #0]
   84400:	431a      	orrs	r2, r3
   84402:	4b18      	ldr	r3, [pc, #96]	; (84464 <xTaskRemoveFromEventList+0xa8>)
   84404:	601a      	str	r2, [r3, #0]
   84406:	68bb      	ldr	r3, [r7, #8]
   84408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8440a:	4613      	mov	r3, r2
   8440c:	009b      	lsls	r3, r3, #2
   8440e:	4413      	add	r3, r2
   84410:	009b      	lsls	r3, r3, #2
   84412:	4a15      	ldr	r2, [pc, #84]	; (84468 <xTaskRemoveFromEventList+0xac>)
   84414:	441a      	add	r2, r3
   84416:	68bb      	ldr	r3, [r7, #8]
   84418:	3304      	adds	r3, #4
   8441a:	4610      	mov	r0, r2
   8441c:	4619      	mov	r1, r3
   8441e:	4b13      	ldr	r3, [pc, #76]	; (8446c <xTaskRemoveFromEventList+0xb0>)
   84420:	4798      	blx	r3
   84422:	e005      	b.n	84430 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   84424:	68bb      	ldr	r3, [r7, #8]
   84426:	3318      	adds	r3, #24
   84428:	4811      	ldr	r0, [pc, #68]	; (84470 <xTaskRemoveFromEventList+0xb4>)
   8442a:	4619      	mov	r1, r3
   8442c:	4b0f      	ldr	r3, [pc, #60]	; (8446c <xTaskRemoveFromEventList+0xb0>)
   8442e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   84430:	68bb      	ldr	r3, [r7, #8]
   84432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84434:	4b0f      	ldr	r3, [pc, #60]	; (84474 <xTaskRemoveFromEventList+0xb8>)
   84436:	681b      	ldr	r3, [r3, #0]
   84438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8443a:	429a      	cmp	r2, r3
   8443c:	d905      	bls.n	8444a <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   8443e:	2301      	movs	r3, #1
   84440:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   84442:	4b0d      	ldr	r3, [pc, #52]	; (84478 <xTaskRemoveFromEventList+0xbc>)
   84444:	2201      	movs	r2, #1
   84446:	601a      	str	r2, [r3, #0]
   84448:	e001      	b.n	8444e <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8444a:	2300      	movs	r3, #0
   8444c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   8444e:	68fb      	ldr	r3, [r7, #12]
}
   84450:	4618      	mov	r0, r3
   84452:	3710      	adds	r7, #16
   84454:	46bd      	mov	sp, r7
   84456:	bd80      	pop	{r7, pc}
   84458:	00082f45 	.word	0x00082f45
   8445c:	00082ccd 	.word	0x00082ccd
   84460:	2007a600 	.word	0x2007a600
   84464:	2007a5e8 	.word	0x2007a5e8
   84468:	2007a50c 	.word	0x2007a50c
   8446c:	00082c15 	.word	0x00082c15
   84470:	2007a5a0 	.word	0x2007a5a0
   84474:	2007a508 	.word	0x2007a508
   84478:	2007a5f4 	.word	0x2007a5f4

0008447c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   8447c:	b580      	push	{r7, lr}
   8447e:	b082      	sub	sp, #8
   84480:	af00      	add	r7, sp, #0
   84482:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   84484:	687b      	ldr	r3, [r7, #4]
   84486:	2b00      	cmp	r3, #0
   84488:	d102      	bne.n	84490 <vTaskSetTimeOutState+0x14>
   8448a:	4b07      	ldr	r3, [pc, #28]	; (844a8 <vTaskSetTimeOutState+0x2c>)
   8448c:	4798      	blx	r3
   8448e:	e7fe      	b.n	8448e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   84490:	4b06      	ldr	r3, [pc, #24]	; (844ac <vTaskSetTimeOutState+0x30>)
   84492:	681a      	ldr	r2, [r3, #0]
   84494:	687b      	ldr	r3, [r7, #4]
   84496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   84498:	4b05      	ldr	r3, [pc, #20]	; (844b0 <vTaskSetTimeOutState+0x34>)
   8449a:	681a      	ldr	r2, [r3, #0]
   8449c:	687b      	ldr	r3, [r7, #4]
   8449e:	605a      	str	r2, [r3, #4]
}
   844a0:	3708      	adds	r7, #8
   844a2:	46bd      	mov	sp, r7
   844a4:	bd80      	pop	{r7, pc}
   844a6:	bf00      	nop
   844a8:	00082f45 	.word	0x00082f45
   844ac:	2007a5f8 	.word	0x2007a5f8
   844b0:	2007a5e4 	.word	0x2007a5e4

000844b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   844b4:	b580      	push	{r7, lr}
   844b6:	b084      	sub	sp, #16
   844b8:	af00      	add	r7, sp, #0
   844ba:	6078      	str	r0, [r7, #4]
   844bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   844be:	687b      	ldr	r3, [r7, #4]
   844c0:	2b00      	cmp	r3, #0
   844c2:	d102      	bne.n	844ca <xTaskCheckForTimeOut+0x16>
   844c4:	4b21      	ldr	r3, [pc, #132]	; (8454c <xTaskCheckForTimeOut+0x98>)
   844c6:	4798      	blx	r3
   844c8:	e7fe      	b.n	844c8 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   844ca:	683b      	ldr	r3, [r7, #0]
   844cc:	2b00      	cmp	r3, #0
   844ce:	d102      	bne.n	844d6 <xTaskCheckForTimeOut+0x22>
   844d0:	4b1e      	ldr	r3, [pc, #120]	; (8454c <xTaskCheckForTimeOut+0x98>)
   844d2:	4798      	blx	r3
   844d4:	e7fe      	b.n	844d4 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   844d6:	4b1e      	ldr	r3, [pc, #120]	; (84550 <xTaskCheckForTimeOut+0x9c>)
   844d8:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   844da:	4b1e      	ldr	r3, [pc, #120]	; (84554 <xTaskCheckForTimeOut+0xa0>)
   844dc:	681b      	ldr	r3, [r3, #0]
   844de:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   844e0:	683b      	ldr	r3, [r7, #0]
   844e2:	681b      	ldr	r3, [r3, #0]
   844e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   844e8:	d102      	bne.n	844f0 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   844ea:	2300      	movs	r3, #0
   844ec:	60fb      	str	r3, [r7, #12]
   844ee:	e026      	b.n	8453e <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   844f0:	687b      	ldr	r3, [r7, #4]
   844f2:	681a      	ldr	r2, [r3, #0]
   844f4:	4b18      	ldr	r3, [pc, #96]	; (84558 <xTaskCheckForTimeOut+0xa4>)
   844f6:	681b      	ldr	r3, [r3, #0]
   844f8:	429a      	cmp	r2, r3
   844fa:	d007      	beq.n	8450c <xTaskCheckForTimeOut+0x58>
   844fc:	687b      	ldr	r3, [r7, #4]
   844fe:	685a      	ldr	r2, [r3, #4]
   84500:	68bb      	ldr	r3, [r7, #8]
   84502:	429a      	cmp	r2, r3
   84504:	d802      	bhi.n	8450c <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   84506:	2301      	movs	r3, #1
   84508:	60fb      	str	r3, [r7, #12]
   8450a:	e018      	b.n	8453e <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   8450c:	687b      	ldr	r3, [r7, #4]
   8450e:	685b      	ldr	r3, [r3, #4]
   84510:	68ba      	ldr	r2, [r7, #8]
   84512:	1ad2      	subs	r2, r2, r3
   84514:	683b      	ldr	r3, [r7, #0]
   84516:	681b      	ldr	r3, [r3, #0]
   84518:	429a      	cmp	r2, r3
   8451a:	d20e      	bcs.n	8453a <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   8451c:	683b      	ldr	r3, [r7, #0]
   8451e:	681a      	ldr	r2, [r3, #0]
   84520:	687b      	ldr	r3, [r7, #4]
   84522:	6859      	ldr	r1, [r3, #4]
   84524:	68bb      	ldr	r3, [r7, #8]
   84526:	1acb      	subs	r3, r1, r3
   84528:	441a      	add	r2, r3
   8452a:	683b      	ldr	r3, [r7, #0]
   8452c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8452e:	6878      	ldr	r0, [r7, #4]
   84530:	4b0a      	ldr	r3, [pc, #40]	; (8455c <xTaskCheckForTimeOut+0xa8>)
   84532:	4798      	blx	r3
			xReturn = pdFALSE;
   84534:	2300      	movs	r3, #0
   84536:	60fb      	str	r3, [r7, #12]
   84538:	e001      	b.n	8453e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   8453a:	2301      	movs	r3, #1
   8453c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   8453e:	4b08      	ldr	r3, [pc, #32]	; (84560 <xTaskCheckForTimeOut+0xac>)
   84540:	4798      	blx	r3

	return xReturn;
   84542:	68fb      	ldr	r3, [r7, #12]
}
   84544:	4618      	mov	r0, r3
   84546:	3710      	adds	r7, #16
   84548:	46bd      	mov	sp, r7
   8454a:	bd80      	pop	{r7, pc}
   8454c:	00082f45 	.word	0x00082f45
   84550:	00082ec9 	.word	0x00082ec9
   84554:	2007a5e4 	.word	0x2007a5e4
   84558:	2007a5f8 	.word	0x2007a5f8
   8455c:	0008447d 	.word	0x0008447d
   84560:	00082f0d 	.word	0x00082f0d

00084564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   84564:	b480      	push	{r7}
   84566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   84568:	4b03      	ldr	r3, [pc, #12]	; (84578 <vTaskMissedYield+0x14>)
   8456a:	2201      	movs	r2, #1
   8456c:	601a      	str	r2, [r3, #0]
}
   8456e:	46bd      	mov	sp, r7
   84570:	f85d 7b04 	ldr.w	r7, [sp], #4
   84574:	4770      	bx	lr
   84576:	bf00      	nop
   84578:	2007a5f4 	.word	0x2007a5f4

0008457c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   8457c:	b580      	push	{r7, lr}
   8457e:	b082      	sub	sp, #8
   84580:	af00      	add	r7, sp, #0
   84582:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   84584:	4b04      	ldr	r3, [pc, #16]	; (84598 <prvIdleTask+0x1c>)
   84586:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   84588:	4b04      	ldr	r3, [pc, #16]	; (8459c <prvIdleTask+0x20>)
   8458a:	681b      	ldr	r3, [r3, #0]
   8458c:	2b01      	cmp	r3, #1
   8458e:	d901      	bls.n	84594 <prvIdleTask+0x18>
			{
				taskYIELD();
   84590:	4b03      	ldr	r3, [pc, #12]	; (845a0 <prvIdleTask+0x24>)
   84592:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   84594:	e7f6      	b.n	84584 <prvIdleTask+0x8>
   84596:	bf00      	nop
   84598:	000846bd 	.word	0x000846bd
   8459c:	2007a50c 	.word	0x2007a50c
   845a0:	00082ea9 	.word	0x00082ea9

000845a4 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   845a4:	b580      	push	{r7, lr}
   845a6:	b086      	sub	sp, #24
   845a8:	af00      	add	r7, sp, #0
   845aa:	60f8      	str	r0, [r7, #12]
   845ac:	60b9      	str	r1, [r7, #8]
   845ae:	607a      	str	r2, [r7, #4]
   845b0:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   845b2:	2300      	movs	r3, #0
   845b4:	617b      	str	r3, [r7, #20]
   845b6:	e012      	b.n	845de <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   845b8:	68ba      	ldr	r2, [r7, #8]
   845ba:	697b      	ldr	r3, [r7, #20]
   845bc:	4413      	add	r3, r2
   845be:	781a      	ldrb	r2, [r3, #0]
   845c0:	68f9      	ldr	r1, [r7, #12]
   845c2:	697b      	ldr	r3, [r7, #20]
   845c4:	440b      	add	r3, r1
   845c6:	3330      	adds	r3, #48	; 0x30
   845c8:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   845ca:	68ba      	ldr	r2, [r7, #8]
   845cc:	697b      	ldr	r3, [r7, #20]
   845ce:	4413      	add	r3, r2
   845d0:	781b      	ldrb	r3, [r3, #0]
   845d2:	2b00      	cmp	r3, #0
   845d4:	d100      	bne.n	845d8 <prvInitialiseTCBVariables+0x34>
		{
			break;
   845d6:	e005      	b.n	845e4 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   845d8:	697b      	ldr	r3, [r7, #20]
   845da:	3301      	adds	r3, #1
   845dc:	617b      	str	r3, [r7, #20]
   845de:	697b      	ldr	r3, [r7, #20]
   845e0:	2b09      	cmp	r3, #9
   845e2:	d9e9      	bls.n	845b8 <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   845e4:	68fb      	ldr	r3, [r7, #12]
   845e6:	2200      	movs	r2, #0
   845e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   845ec:	687b      	ldr	r3, [r7, #4]
   845ee:	2b04      	cmp	r3, #4
   845f0:	d901      	bls.n	845f6 <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   845f2:	2304      	movs	r3, #4
   845f4:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   845f6:	68fb      	ldr	r3, [r7, #12]
   845f8:	687a      	ldr	r2, [r7, #4]
   845fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   845fc:	68fb      	ldr	r3, [r7, #12]
   845fe:	687a      	ldr	r2, [r7, #4]
   84600:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84602:	68fb      	ldr	r3, [r7, #12]
   84604:	2200      	movs	r2, #0
   84606:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   84608:	68fb      	ldr	r3, [r7, #12]
   8460a:	3304      	adds	r3, #4
   8460c:	4618      	mov	r0, r3
   8460e:	4b0a      	ldr	r3, [pc, #40]	; (84638 <prvInitialiseTCBVariables+0x94>)
   84610:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84612:	68fb      	ldr	r3, [r7, #12]
   84614:	3318      	adds	r3, #24
   84616:	4618      	mov	r0, r3
   84618:	4b07      	ldr	r3, [pc, #28]	; (84638 <prvInitialiseTCBVariables+0x94>)
   8461a:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8461c:	68fb      	ldr	r3, [r7, #12]
   8461e:	68fa      	ldr	r2, [r7, #12]
   84620:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84622:	687b      	ldr	r3, [r7, #4]
   84624:	f1c3 0205 	rsb	r2, r3, #5
   84628:	68fb      	ldr	r3, [r7, #12]
   8462a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   8462c:	68fb      	ldr	r3, [r7, #12]
   8462e:	68fa      	ldr	r2, [r7, #12]
   84630:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84632:	3718      	adds	r7, #24
   84634:	46bd      	mov	sp, r7
   84636:	bd80      	pop	{r7, pc}
   84638:	00082bfd 	.word	0x00082bfd

0008463c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   8463c:	b580      	push	{r7, lr}
   8463e:	b082      	sub	sp, #8
   84640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   84642:	2300      	movs	r3, #0
   84644:	607b      	str	r3, [r7, #4]
   84646:	e00c      	b.n	84662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   84648:	687a      	ldr	r2, [r7, #4]
   8464a:	4613      	mov	r3, r2
   8464c:	009b      	lsls	r3, r3, #2
   8464e:	4413      	add	r3, r2
   84650:	009b      	lsls	r3, r3, #2
   84652:	4a11      	ldr	r2, [pc, #68]	; (84698 <prvInitialiseTaskLists+0x5c>)
   84654:	4413      	add	r3, r2
   84656:	4618      	mov	r0, r3
   84658:	4b10      	ldr	r3, [pc, #64]	; (8469c <prvInitialiseTaskLists+0x60>)
   8465a:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   8465c:	687b      	ldr	r3, [r7, #4]
   8465e:	3301      	adds	r3, #1
   84660:	607b      	str	r3, [r7, #4]
   84662:	687b      	ldr	r3, [r7, #4]
   84664:	2b04      	cmp	r3, #4
   84666:	d9ef      	bls.n	84648 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   84668:	480d      	ldr	r0, [pc, #52]	; (846a0 <prvInitialiseTaskLists+0x64>)
   8466a:	4b0c      	ldr	r3, [pc, #48]	; (8469c <prvInitialiseTaskLists+0x60>)
   8466c:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   8466e:	480d      	ldr	r0, [pc, #52]	; (846a4 <prvInitialiseTaskLists+0x68>)
   84670:	4b0a      	ldr	r3, [pc, #40]	; (8469c <prvInitialiseTaskLists+0x60>)
   84672:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   84674:	480c      	ldr	r0, [pc, #48]	; (846a8 <prvInitialiseTaskLists+0x6c>)
   84676:	4b09      	ldr	r3, [pc, #36]	; (8469c <prvInitialiseTaskLists+0x60>)
   84678:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8467a:	480c      	ldr	r0, [pc, #48]	; (846ac <prvInitialiseTaskLists+0x70>)
   8467c:	4b07      	ldr	r3, [pc, #28]	; (8469c <prvInitialiseTaskLists+0x60>)
   8467e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   84680:	480b      	ldr	r0, [pc, #44]	; (846b0 <prvInitialiseTaskLists+0x74>)
   84682:	4b06      	ldr	r3, [pc, #24]	; (8469c <prvInitialiseTaskLists+0x60>)
   84684:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   84686:	4b0b      	ldr	r3, [pc, #44]	; (846b4 <prvInitialiseTaskLists+0x78>)
   84688:	4a05      	ldr	r2, [pc, #20]	; (846a0 <prvInitialiseTaskLists+0x64>)
   8468a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8468c:	4b0a      	ldr	r3, [pc, #40]	; (846b8 <prvInitialiseTaskLists+0x7c>)
   8468e:	4a05      	ldr	r2, [pc, #20]	; (846a4 <prvInitialiseTaskLists+0x68>)
   84690:	601a      	str	r2, [r3, #0]
}
   84692:	3708      	adds	r7, #8
   84694:	46bd      	mov	sp, r7
   84696:	bd80      	pop	{r7, pc}
   84698:	2007a50c 	.word	0x2007a50c
   8469c:	00082bbd 	.word	0x00082bbd
   846a0:	2007a570 	.word	0x2007a570
   846a4:	2007a584 	.word	0x2007a584
   846a8:	2007a5a0 	.word	0x2007a5a0
   846ac:	2007a5b4 	.word	0x2007a5b4
   846b0:	2007a5cc 	.word	0x2007a5cc
   846b4:	2007a598 	.word	0x2007a598
   846b8:	2007a59c 	.word	0x2007a59c

000846bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   846bc:	b580      	push	{r7, lr}
   846be:	b082      	sub	sp, #8
   846c0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   846c2:	e028      	b.n	84716 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   846c4:	4b17      	ldr	r3, [pc, #92]	; (84724 <prvCheckTasksWaitingTermination+0x68>)
   846c6:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   846c8:	4b17      	ldr	r3, [pc, #92]	; (84728 <prvCheckTasksWaitingTermination+0x6c>)
   846ca:	681b      	ldr	r3, [r3, #0]
   846cc:	2b00      	cmp	r3, #0
   846ce:	bf14      	ite	ne
   846d0:	2300      	movne	r3, #0
   846d2:	2301      	moveq	r3, #1
   846d4:	b2db      	uxtb	r3, r3
   846d6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   846d8:	4b14      	ldr	r3, [pc, #80]	; (8472c <prvCheckTasksWaitingTermination+0x70>)
   846da:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   846dc:	687b      	ldr	r3, [r7, #4]
   846de:	2b00      	cmp	r3, #0
   846e0:	d119      	bne.n	84716 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   846e2:	4b13      	ldr	r3, [pc, #76]	; (84730 <prvCheckTasksWaitingTermination+0x74>)
   846e4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   846e6:	4b10      	ldr	r3, [pc, #64]	; (84728 <prvCheckTasksWaitingTermination+0x6c>)
   846e8:	68db      	ldr	r3, [r3, #12]
   846ea:	68db      	ldr	r3, [r3, #12]
   846ec:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   846ee:	683b      	ldr	r3, [r7, #0]
   846f0:	3304      	adds	r3, #4
   846f2:	4618      	mov	r0, r3
   846f4:	4b0f      	ldr	r3, [pc, #60]	; (84734 <prvCheckTasksWaitingTermination+0x78>)
   846f6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   846f8:	4b0f      	ldr	r3, [pc, #60]	; (84738 <prvCheckTasksWaitingTermination+0x7c>)
   846fa:	681b      	ldr	r3, [r3, #0]
   846fc:	1e5a      	subs	r2, r3, #1
   846fe:	4b0e      	ldr	r3, [pc, #56]	; (84738 <prvCheckTasksWaitingTermination+0x7c>)
   84700:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84702:	4b0e      	ldr	r3, [pc, #56]	; (8473c <prvCheckTasksWaitingTermination+0x80>)
   84704:	681b      	ldr	r3, [r3, #0]
   84706:	1e5a      	subs	r2, r3, #1
   84708:	4b0c      	ldr	r3, [pc, #48]	; (8473c <prvCheckTasksWaitingTermination+0x80>)
   8470a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   8470c:	4b0c      	ldr	r3, [pc, #48]	; (84740 <prvCheckTasksWaitingTermination+0x84>)
   8470e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84710:	6838      	ldr	r0, [r7, #0]
   84712:	4b0c      	ldr	r3, [pc, #48]	; (84744 <prvCheckTasksWaitingTermination+0x88>)
   84714:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84716:	4b09      	ldr	r3, [pc, #36]	; (8473c <prvCheckTasksWaitingTermination+0x80>)
   84718:	681b      	ldr	r3, [r3, #0]
   8471a:	2b00      	cmp	r3, #0
   8471c:	d1d2      	bne.n	846c4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   8471e:	3708      	adds	r7, #8
   84720:	46bd      	mov	sp, r7
   84722:	bd80      	pop	{r7, pc}
   84724:	00083eb9 	.word	0x00083eb9
   84728:	2007a5b4 	.word	0x2007a5b4
   8472c:	00083ed5 	.word	0x00083ed5
   84730:	00082ec9 	.word	0x00082ec9
   84734:	00082ccd 	.word	0x00082ccd
   84738:	2007a5e0 	.word	0x2007a5e0
   8473c:	2007a5c8 	.word	0x2007a5c8
   84740:	00082f0d 	.word	0x00082f0d
   84744:	00084829 	.word	0x00084829

00084748 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84748:	b580      	push	{r7, lr}
   8474a:	b082      	sub	sp, #8
   8474c:	af00      	add	r7, sp, #0
   8474e:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84750:	4b13      	ldr	r3, [pc, #76]	; (847a0 <prvAddCurrentTaskToDelayedList+0x58>)
   84752:	681b      	ldr	r3, [r3, #0]
   84754:	687a      	ldr	r2, [r7, #4]
   84756:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84758:	4b12      	ldr	r3, [pc, #72]	; (847a4 <prvAddCurrentTaskToDelayedList+0x5c>)
   8475a:	681b      	ldr	r3, [r3, #0]
   8475c:	687a      	ldr	r2, [r7, #4]
   8475e:	429a      	cmp	r2, r3
   84760:	d209      	bcs.n	84776 <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84762:	4b11      	ldr	r3, [pc, #68]	; (847a8 <prvAddCurrentTaskToDelayedList+0x60>)
   84764:	681a      	ldr	r2, [r3, #0]
   84766:	4b0e      	ldr	r3, [pc, #56]	; (847a0 <prvAddCurrentTaskToDelayedList+0x58>)
   84768:	681b      	ldr	r3, [r3, #0]
   8476a:	3304      	adds	r3, #4
   8476c:	4610      	mov	r0, r2
   8476e:	4619      	mov	r1, r3
   84770:	4b0e      	ldr	r3, [pc, #56]	; (847ac <prvAddCurrentTaskToDelayedList+0x64>)
   84772:	4798      	blx	r3
   84774:	e010      	b.n	84798 <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84776:	4b0e      	ldr	r3, [pc, #56]	; (847b0 <prvAddCurrentTaskToDelayedList+0x68>)
   84778:	681a      	ldr	r2, [r3, #0]
   8477a:	4b09      	ldr	r3, [pc, #36]	; (847a0 <prvAddCurrentTaskToDelayedList+0x58>)
   8477c:	681b      	ldr	r3, [r3, #0]
   8477e:	3304      	adds	r3, #4
   84780:	4610      	mov	r0, r2
   84782:	4619      	mov	r1, r3
   84784:	4b09      	ldr	r3, [pc, #36]	; (847ac <prvAddCurrentTaskToDelayedList+0x64>)
   84786:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84788:	4b0a      	ldr	r3, [pc, #40]	; (847b4 <prvAddCurrentTaskToDelayedList+0x6c>)
   8478a:	681b      	ldr	r3, [r3, #0]
   8478c:	687a      	ldr	r2, [r7, #4]
   8478e:	429a      	cmp	r2, r3
   84790:	d202      	bcs.n	84798 <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84792:	4b08      	ldr	r3, [pc, #32]	; (847b4 <prvAddCurrentTaskToDelayedList+0x6c>)
   84794:	687a      	ldr	r2, [r7, #4]
   84796:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84798:	3708      	adds	r7, #8
   8479a:	46bd      	mov	sp, r7
   8479c:	bd80      	pop	{r7, pc}
   8479e:	bf00      	nop
   847a0:	2007a508 	.word	0x2007a508
   847a4:	2007a5e4 	.word	0x2007a5e4
   847a8:	2007a59c 	.word	0x2007a59c
   847ac:	00082c5d 	.word	0x00082c5d
   847b0:	2007a598 	.word	0x2007a598
   847b4:	20070008 	.word	0x20070008

000847b8 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   847b8:	b580      	push	{r7, lr}
   847ba:	b084      	sub	sp, #16
   847bc:	af00      	add	r7, sp, #0
   847be:	4603      	mov	r3, r0
   847c0:	6039      	str	r1, [r7, #0]
   847c2:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   847c4:	2048      	movs	r0, #72	; 0x48
   847c6:	4b15      	ldr	r3, [pc, #84]	; (8481c <prvAllocateTCBAndStack+0x64>)
   847c8:	4798      	blx	r3
   847ca:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   847cc:	68fb      	ldr	r3, [r7, #12]
   847ce:	2b00      	cmp	r3, #0
   847d0:	d01f      	beq.n	84812 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   847d2:	683b      	ldr	r3, [r7, #0]
   847d4:	2b00      	cmp	r3, #0
   847d6:	d106      	bne.n	847e6 <prvAllocateTCBAndStack+0x2e>
   847d8:	88fb      	ldrh	r3, [r7, #6]
   847da:	009b      	lsls	r3, r3, #2
   847dc:	4618      	mov	r0, r3
   847de:	4b0f      	ldr	r3, [pc, #60]	; (8481c <prvAllocateTCBAndStack+0x64>)
   847e0:	4798      	blx	r3
   847e2:	4603      	mov	r3, r0
   847e4:	e000      	b.n	847e8 <prvAllocateTCBAndStack+0x30>
   847e6:	683b      	ldr	r3, [r7, #0]
   847e8:	68fa      	ldr	r2, [r7, #12]
   847ea:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   847ec:	68fb      	ldr	r3, [r7, #12]
   847ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   847f0:	2b00      	cmp	r3, #0
   847f2:	d105      	bne.n	84800 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   847f4:	68f8      	ldr	r0, [r7, #12]
   847f6:	4b0a      	ldr	r3, [pc, #40]	; (84820 <prvAllocateTCBAndStack+0x68>)
   847f8:	4798      	blx	r3
			pxNewTCB = NULL;
   847fa:	2300      	movs	r3, #0
   847fc:	60fb      	str	r3, [r7, #12]
   847fe:	e008      	b.n	84812 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84800:	68fb      	ldr	r3, [r7, #12]
   84802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84804:	88fb      	ldrh	r3, [r7, #6]
   84806:	009b      	lsls	r3, r3, #2
   84808:	4610      	mov	r0, r2
   8480a:	21a5      	movs	r1, #165	; 0xa5
   8480c:	461a      	mov	r2, r3
   8480e:	4b05      	ldr	r3, [pc, #20]	; (84824 <prvAllocateTCBAndStack+0x6c>)
   84810:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84812:	68fb      	ldr	r3, [r7, #12]
}
   84814:	4618      	mov	r0, r3
   84816:	3710      	adds	r7, #16
   84818:	46bd      	mov	sp, r7
   8481a:	bd80      	pop	{r7, pc}
   8481c:	00083069 	.word	0x00083069
   84820:	000831e1 	.word	0x000831e1
   84824:	000867c1 	.word	0x000867c1

00084828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84828:	b580      	push	{r7, lr}
   8482a:	b082      	sub	sp, #8
   8482c:	af00      	add	r7, sp, #0
   8482e:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84830:	687b      	ldr	r3, [r7, #4]
   84832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84834:	4618      	mov	r0, r3
   84836:	4b04      	ldr	r3, [pc, #16]	; (84848 <prvDeleteTCB+0x20>)
   84838:	4798      	blx	r3
		vPortFree( pxTCB );
   8483a:	6878      	ldr	r0, [r7, #4]
   8483c:	4b02      	ldr	r3, [pc, #8]	; (84848 <prvDeleteTCB+0x20>)
   8483e:	4798      	blx	r3
	}
   84840:	3708      	adds	r7, #8
   84842:	46bd      	mov	sp, r7
   84844:	bd80      	pop	{r7, pc}
   84846:	bf00      	nop
   84848:	000831e1 	.word	0x000831e1

0008484c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   8484c:	b480      	push	{r7}
   8484e:	b083      	sub	sp, #12
   84850:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84852:	4b0e      	ldr	r3, [pc, #56]	; (8488c <prvResetNextTaskUnblockTime+0x40>)
   84854:	681b      	ldr	r3, [r3, #0]
   84856:	681b      	ldr	r3, [r3, #0]
   84858:	2b00      	cmp	r3, #0
   8485a:	d101      	bne.n	84860 <prvResetNextTaskUnblockTime+0x14>
   8485c:	2301      	movs	r3, #1
   8485e:	e000      	b.n	84862 <prvResetNextTaskUnblockTime+0x16>
   84860:	2300      	movs	r3, #0
   84862:	2b00      	cmp	r3, #0
   84864:	d004      	beq.n	84870 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84866:	4b0a      	ldr	r3, [pc, #40]	; (84890 <prvResetNextTaskUnblockTime+0x44>)
   84868:	f04f 32ff 	mov.w	r2, #4294967295
   8486c:	601a      	str	r2, [r3, #0]
   8486e:	e008      	b.n	84882 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84870:	4b06      	ldr	r3, [pc, #24]	; (8488c <prvResetNextTaskUnblockTime+0x40>)
   84872:	681b      	ldr	r3, [r3, #0]
   84874:	68db      	ldr	r3, [r3, #12]
   84876:	68db      	ldr	r3, [r3, #12]
   84878:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8487a:	687b      	ldr	r3, [r7, #4]
   8487c:	685a      	ldr	r2, [r3, #4]
   8487e:	4b04      	ldr	r3, [pc, #16]	; (84890 <prvResetNextTaskUnblockTime+0x44>)
   84880:	601a      	str	r2, [r3, #0]
	}
}
   84882:	370c      	adds	r7, #12
   84884:	46bd      	mov	sp, r7
   84886:	f85d 7b04 	ldr.w	r7, [sp], #4
   8488a:	4770      	bx	lr
   8488c:	2007a598 	.word	0x2007a598
   84890:	20070008 	.word	0x20070008

00084894 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84894:	b480      	push	{r7}
   84896:	b083      	sub	sp, #12
   84898:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8489a:	4b0b      	ldr	r3, [pc, #44]	; (848c8 <xTaskGetSchedulerState+0x34>)
   8489c:	681b      	ldr	r3, [r3, #0]
   8489e:	2b00      	cmp	r3, #0
   848a0:	d102      	bne.n	848a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   848a2:	2301      	movs	r3, #1
   848a4:	607b      	str	r3, [r7, #4]
   848a6:	e008      	b.n	848ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   848a8:	4b08      	ldr	r3, [pc, #32]	; (848cc <xTaskGetSchedulerState+0x38>)
   848aa:	681b      	ldr	r3, [r3, #0]
   848ac:	2b00      	cmp	r3, #0
   848ae:	d102      	bne.n	848b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   848b0:	2302      	movs	r3, #2
   848b2:	607b      	str	r3, [r7, #4]
   848b4:	e001      	b.n	848ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   848b6:	2300      	movs	r3, #0
   848b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   848ba:	687b      	ldr	r3, [r7, #4]
	}
   848bc:	4618      	mov	r0, r3
   848be:	370c      	adds	r7, #12
   848c0:	46bd      	mov	sp, r7
   848c2:	f85d 7b04 	ldr.w	r7, [sp], #4
   848c6:	4770      	bx	lr
   848c8:	2007a5ec 	.word	0x2007a5ec
   848cc:	2007a600 	.word	0x2007a600

000848d0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   848d0:	b580      	push	{r7, lr}
   848d2:	b084      	sub	sp, #16
   848d4:	af00      	add	r7, sp, #0
   848d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   848d8:	687b      	ldr	r3, [r7, #4]
   848da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   848dc:	687b      	ldr	r3, [r7, #4]
   848de:	2b00      	cmp	r3, #0
   848e0:	d062      	beq.n	849a8 <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   848e2:	68fb      	ldr	r3, [r7, #12]
   848e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   848e6:	4b32      	ldr	r3, [pc, #200]	; (849b0 <vTaskPriorityInherit+0xe0>)
   848e8:	681b      	ldr	r3, [r3, #0]
   848ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   848ec:	429a      	cmp	r2, r3
   848ee:	d25b      	bcs.n	849a8 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   848f0:	68fb      	ldr	r3, [r7, #12]
   848f2:	699b      	ldr	r3, [r3, #24]
   848f4:	2b00      	cmp	r3, #0
   848f6:	db06      	blt.n	84906 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   848f8:	4b2d      	ldr	r3, [pc, #180]	; (849b0 <vTaskPriorityInherit+0xe0>)
   848fa:	681b      	ldr	r3, [r3, #0]
   848fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   848fe:	f1c3 0205 	rsb	r2, r3, #5
   84902:	68fb      	ldr	r3, [r7, #12]
   84904:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   84906:	68fb      	ldr	r3, [r7, #12]
   84908:	6959      	ldr	r1, [r3, #20]
   8490a:	68fb      	ldr	r3, [r7, #12]
   8490c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8490e:	4613      	mov	r3, r2
   84910:	009b      	lsls	r3, r3, #2
   84912:	4413      	add	r3, r2
   84914:	009b      	lsls	r3, r3, #2
   84916:	4a27      	ldr	r2, [pc, #156]	; (849b4 <vTaskPriorityInherit+0xe4>)
   84918:	4413      	add	r3, r2
   8491a:	4299      	cmp	r1, r3
   8491c:	d101      	bne.n	84922 <vTaskPriorityInherit+0x52>
   8491e:	2301      	movs	r3, #1
   84920:	e000      	b.n	84924 <vTaskPriorityInherit+0x54>
   84922:	2300      	movs	r3, #0
   84924:	2b00      	cmp	r3, #0
   84926:	d03a      	beq.n	8499e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84928:	68fb      	ldr	r3, [r7, #12]
   8492a:	3304      	adds	r3, #4
   8492c:	4618      	mov	r0, r3
   8492e:	4b22      	ldr	r3, [pc, #136]	; (849b8 <vTaskPriorityInherit+0xe8>)
   84930:	4798      	blx	r3
   84932:	4603      	mov	r3, r0
   84934:	2b00      	cmp	r3, #0
   84936:	d115      	bne.n	84964 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84938:	68fb      	ldr	r3, [r7, #12]
   8493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8493c:	491d      	ldr	r1, [pc, #116]	; (849b4 <vTaskPriorityInherit+0xe4>)
   8493e:	4613      	mov	r3, r2
   84940:	009b      	lsls	r3, r3, #2
   84942:	4413      	add	r3, r2
   84944:	009b      	lsls	r3, r3, #2
   84946:	440b      	add	r3, r1
   84948:	681b      	ldr	r3, [r3, #0]
   8494a:	2b00      	cmp	r3, #0
   8494c:	d10a      	bne.n	84964 <vTaskPriorityInherit+0x94>
   8494e:	68fb      	ldr	r3, [r7, #12]
   84950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84952:	2201      	movs	r2, #1
   84954:	fa02 f303 	lsl.w	r3, r2, r3
   84958:	43da      	mvns	r2, r3
   8495a:	4b18      	ldr	r3, [pc, #96]	; (849bc <vTaskPriorityInherit+0xec>)
   8495c:	681b      	ldr	r3, [r3, #0]
   8495e:	401a      	ands	r2, r3
   84960:	4b16      	ldr	r3, [pc, #88]	; (849bc <vTaskPriorityInherit+0xec>)
   84962:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84964:	4b12      	ldr	r3, [pc, #72]	; (849b0 <vTaskPriorityInherit+0xe0>)
   84966:	681b      	ldr	r3, [r3, #0]
   84968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8496a:	68fb      	ldr	r3, [r7, #12]
   8496c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   8496e:	68fb      	ldr	r3, [r7, #12]
   84970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84972:	2201      	movs	r2, #1
   84974:	409a      	lsls	r2, r3
   84976:	4b11      	ldr	r3, [pc, #68]	; (849bc <vTaskPriorityInherit+0xec>)
   84978:	681b      	ldr	r3, [r3, #0]
   8497a:	431a      	orrs	r2, r3
   8497c:	4b0f      	ldr	r3, [pc, #60]	; (849bc <vTaskPriorityInherit+0xec>)
   8497e:	601a      	str	r2, [r3, #0]
   84980:	68fb      	ldr	r3, [r7, #12]
   84982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84984:	4613      	mov	r3, r2
   84986:	009b      	lsls	r3, r3, #2
   84988:	4413      	add	r3, r2
   8498a:	009b      	lsls	r3, r3, #2
   8498c:	4a09      	ldr	r2, [pc, #36]	; (849b4 <vTaskPriorityInherit+0xe4>)
   8498e:	441a      	add	r2, r3
   84990:	68fb      	ldr	r3, [r7, #12]
   84992:	3304      	adds	r3, #4
   84994:	4610      	mov	r0, r2
   84996:	4619      	mov	r1, r3
   84998:	4b09      	ldr	r3, [pc, #36]	; (849c0 <vTaskPriorityInherit+0xf0>)
   8499a:	4798      	blx	r3
   8499c:	e004      	b.n	849a8 <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8499e:	4b04      	ldr	r3, [pc, #16]	; (849b0 <vTaskPriorityInherit+0xe0>)
   849a0:	681b      	ldr	r3, [r3, #0]
   849a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849a4:	68fb      	ldr	r3, [r7, #12]
   849a6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   849a8:	3710      	adds	r7, #16
   849aa:	46bd      	mov	sp, r7
   849ac:	bd80      	pop	{r7, pc}
   849ae:	bf00      	nop
   849b0:	2007a508 	.word	0x2007a508
   849b4:	2007a50c 	.word	0x2007a50c
   849b8:	00082ccd 	.word	0x00082ccd
   849bc:	2007a5e8 	.word	0x2007a5e8
   849c0:	00082c15 	.word	0x00082c15

000849c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   849c4:	b580      	push	{r7, lr}
   849c6:	b084      	sub	sp, #16
   849c8:	af00      	add	r7, sp, #0
   849ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   849cc:	687b      	ldr	r3, [r7, #4]
   849ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   849d0:	2300      	movs	r3, #0
   849d2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   849d4:	687b      	ldr	r3, [r7, #4]
   849d6:	2b00      	cmp	r3, #0
   849d8:	d056      	beq.n	84a88 <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   849da:	68bb      	ldr	r3, [r7, #8]
   849dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   849de:	2b00      	cmp	r3, #0
   849e0:	d102      	bne.n	849e8 <xTaskPriorityDisinherit+0x24>
   849e2:	4b2c      	ldr	r3, [pc, #176]	; (84a94 <xTaskPriorityDisinherit+0xd0>)
   849e4:	4798      	blx	r3
   849e6:	e7fe      	b.n	849e6 <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   849e8:	68bb      	ldr	r3, [r7, #8]
   849ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   849ec:	1e5a      	subs	r2, r3, #1
   849ee:	68bb      	ldr	r3, [r7, #8]
   849f0:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   849f2:	68bb      	ldr	r3, [r7, #8]
   849f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   849f6:	68bb      	ldr	r3, [r7, #8]
   849f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   849fa:	429a      	cmp	r2, r3
   849fc:	d044      	beq.n	84a88 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   849fe:	68bb      	ldr	r3, [r7, #8]
   84a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84a02:	2b00      	cmp	r3, #0
   84a04:	d140      	bne.n	84a88 <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84a06:	68bb      	ldr	r3, [r7, #8]
   84a08:	3304      	adds	r3, #4
   84a0a:	4618      	mov	r0, r3
   84a0c:	4b22      	ldr	r3, [pc, #136]	; (84a98 <xTaskPriorityDisinherit+0xd4>)
   84a0e:	4798      	blx	r3
   84a10:	4603      	mov	r3, r0
   84a12:	2b00      	cmp	r3, #0
   84a14:	d115      	bne.n	84a42 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84a16:	68bb      	ldr	r3, [r7, #8]
   84a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a1a:	4920      	ldr	r1, [pc, #128]	; (84a9c <xTaskPriorityDisinherit+0xd8>)
   84a1c:	4613      	mov	r3, r2
   84a1e:	009b      	lsls	r3, r3, #2
   84a20:	4413      	add	r3, r2
   84a22:	009b      	lsls	r3, r3, #2
   84a24:	440b      	add	r3, r1
   84a26:	681b      	ldr	r3, [r3, #0]
   84a28:	2b00      	cmp	r3, #0
   84a2a:	d10a      	bne.n	84a42 <xTaskPriorityDisinherit+0x7e>
   84a2c:	68bb      	ldr	r3, [r7, #8]
   84a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a30:	2201      	movs	r2, #1
   84a32:	fa02 f303 	lsl.w	r3, r2, r3
   84a36:	43da      	mvns	r2, r3
   84a38:	4b19      	ldr	r3, [pc, #100]	; (84aa0 <xTaskPriorityDisinherit+0xdc>)
   84a3a:	681b      	ldr	r3, [r3, #0]
   84a3c:	401a      	ands	r2, r3
   84a3e:	4b18      	ldr	r3, [pc, #96]	; (84aa0 <xTaskPriorityDisinherit+0xdc>)
   84a40:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84a42:	68bb      	ldr	r3, [r7, #8]
   84a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84a46:	68bb      	ldr	r3, [r7, #8]
   84a48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84a4a:	68bb      	ldr	r3, [r7, #8]
   84a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a4e:	f1c3 0205 	rsb	r2, r3, #5
   84a52:	68bb      	ldr	r3, [r7, #8]
   84a54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84a56:	68bb      	ldr	r3, [r7, #8]
   84a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84a5a:	2201      	movs	r2, #1
   84a5c:	409a      	lsls	r2, r3
   84a5e:	4b10      	ldr	r3, [pc, #64]	; (84aa0 <xTaskPriorityDisinherit+0xdc>)
   84a60:	681b      	ldr	r3, [r3, #0]
   84a62:	431a      	orrs	r2, r3
   84a64:	4b0e      	ldr	r3, [pc, #56]	; (84aa0 <xTaskPriorityDisinherit+0xdc>)
   84a66:	601a      	str	r2, [r3, #0]
   84a68:	68bb      	ldr	r3, [r7, #8]
   84a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84a6c:	4613      	mov	r3, r2
   84a6e:	009b      	lsls	r3, r3, #2
   84a70:	4413      	add	r3, r2
   84a72:	009b      	lsls	r3, r3, #2
   84a74:	4a09      	ldr	r2, [pc, #36]	; (84a9c <xTaskPriorityDisinherit+0xd8>)
   84a76:	441a      	add	r2, r3
   84a78:	68bb      	ldr	r3, [r7, #8]
   84a7a:	3304      	adds	r3, #4
   84a7c:	4610      	mov	r0, r2
   84a7e:	4619      	mov	r1, r3
   84a80:	4b08      	ldr	r3, [pc, #32]	; (84aa4 <xTaskPriorityDisinherit+0xe0>)
   84a82:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84a84:	2301      	movs	r3, #1
   84a86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84a88:	68fb      	ldr	r3, [r7, #12]
	}
   84a8a:	4618      	mov	r0, r3
   84a8c:	3710      	adds	r7, #16
   84a8e:	46bd      	mov	sp, r7
   84a90:	bd80      	pop	{r7, pc}
   84a92:	bf00      	nop
   84a94:	00082f45 	.word	0x00082f45
   84a98:	00082ccd 	.word	0x00082ccd
   84a9c:	2007a50c 	.word	0x2007a50c
   84aa0:	2007a5e8 	.word	0x2007a5e8
   84aa4:	00082c15 	.word	0x00082c15

00084aa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84aa8:	b480      	push	{r7}
   84aaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84aac:	4b07      	ldr	r3, [pc, #28]	; (84acc <pvTaskIncrementMutexHeldCount+0x24>)
   84aae:	681b      	ldr	r3, [r3, #0]
   84ab0:	2b00      	cmp	r3, #0
   84ab2:	d004      	beq.n	84abe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84ab4:	4b05      	ldr	r3, [pc, #20]	; (84acc <pvTaskIncrementMutexHeldCount+0x24>)
   84ab6:	681b      	ldr	r3, [r3, #0]
   84ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   84aba:	3201      	adds	r2, #1
   84abc:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84abe:	4b03      	ldr	r3, [pc, #12]	; (84acc <pvTaskIncrementMutexHeldCount+0x24>)
   84ac0:	681b      	ldr	r3, [r3, #0]
	}
   84ac2:	4618      	mov	r0, r3
   84ac4:	46bd      	mov	sp, r7
   84ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
   84aca:	4770      	bx	lr
   84acc:	2007a508 	.word	0x2007a508

00084ad0 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84ad0:	b590      	push	{r4, r7, lr}
   84ad2:	b087      	sub	sp, #28
   84ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   84ad6:	2300      	movs	r3, #0
   84ad8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   84ada:	4b10      	ldr	r3, [pc, #64]	; (84b1c <xTimerCreateTimerTask+0x4c>)
   84adc:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84ade:	4b10      	ldr	r3, [pc, #64]	; (84b20 <xTimerCreateTimerTask+0x50>)
   84ae0:	681b      	ldr	r3, [r3, #0]
   84ae2:	2b00      	cmp	r3, #0
   84ae4:	d00f      	beq.n	84b06 <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   84ae6:	2302      	movs	r3, #2
   84ae8:	9300      	str	r3, [sp, #0]
   84aea:	2300      	movs	r3, #0
   84aec:	9301      	str	r3, [sp, #4]
   84aee:	2300      	movs	r3, #0
   84af0:	9302      	str	r3, [sp, #8]
   84af2:	2300      	movs	r3, #0
   84af4:	9303      	str	r3, [sp, #12]
   84af6:	480b      	ldr	r0, [pc, #44]	; (84b24 <xTimerCreateTimerTask+0x54>)
   84af8:	490b      	ldr	r1, [pc, #44]	; (84b28 <xTimerCreateTimerTask+0x58>)
   84afa:	f44f 7282 	mov.w	r2, #260	; 0x104
   84afe:	2300      	movs	r3, #0
   84b00:	4c0a      	ldr	r4, [pc, #40]	; (84b2c <xTimerCreateTimerTask+0x5c>)
   84b02:	47a0      	blx	r4
   84b04:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   84b06:	687b      	ldr	r3, [r7, #4]
   84b08:	2b00      	cmp	r3, #0
   84b0a:	d102      	bne.n	84b12 <xTimerCreateTimerTask+0x42>
   84b0c:	4b08      	ldr	r3, [pc, #32]	; (84b30 <xTimerCreateTimerTask+0x60>)
   84b0e:	4798      	blx	r3
   84b10:	e7fe      	b.n	84b10 <xTimerCreateTimerTask+0x40>
	return xReturn;
   84b12:	687b      	ldr	r3, [r7, #4]
}
   84b14:	4618      	mov	r0, r3
   84b16:	370c      	adds	r7, #12
   84b18:	46bd      	mov	sp, r7
   84b1a:	bd90      	pop	{r4, r7, pc}
   84b1c:	00085005 	.word	0x00085005
   84b20:	2007a634 	.word	0x2007a634
   84b24:	00084c4d 	.word	0x00084c4d
   84b28:	00086ac0 	.word	0x00086ac0
   84b2c:	00083cb9 	.word	0x00083cb9
   84b30:	00082f45 	.word	0x00082f45

00084b34 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   84b34:	b590      	push	{r4, r7, lr}
   84b36:	b089      	sub	sp, #36	; 0x24
   84b38:	af00      	add	r7, sp, #0
   84b3a:	60f8      	str	r0, [r7, #12]
   84b3c:	60b9      	str	r1, [r7, #8]
   84b3e:	607a      	str	r2, [r7, #4]
   84b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   84b42:	2300      	movs	r3, #0
   84b44:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   84b46:	4b1d      	ldr	r3, [pc, #116]	; (84bbc <xTimerGenericCommand+0x88>)
   84b48:	681b      	ldr	r3, [r3, #0]
   84b4a:	2b00      	cmp	r3, #0
   84b4c:	d030      	beq.n	84bb0 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   84b4e:	68bb      	ldr	r3, [r7, #8]
   84b50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   84b52:	687b      	ldr	r3, [r7, #4]
   84b54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   84b56:	68fb      	ldr	r3, [r7, #12]
   84b58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   84b5a:	68bb      	ldr	r3, [r7, #8]
   84b5c:	2b05      	cmp	r3, #5
   84b5e:	dc1c      	bgt.n	84b9a <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   84b60:	4b17      	ldr	r3, [pc, #92]	; (84bc0 <xTimerGenericCommand+0x8c>)
   84b62:	4798      	blx	r3
   84b64:	4603      	mov	r3, r0
   84b66:	2b02      	cmp	r3, #2
   84b68:	d10b      	bne.n	84b82 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   84b6a:	4b14      	ldr	r3, [pc, #80]	; (84bbc <xTimerGenericCommand+0x88>)
   84b6c:	681a      	ldr	r2, [r3, #0]
   84b6e:	f107 0310 	add.w	r3, r7, #16
   84b72:	4610      	mov	r0, r2
   84b74:	4619      	mov	r1, r3
   84b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84b78:	2300      	movs	r3, #0
   84b7a:	4c12      	ldr	r4, [pc, #72]	; (84bc4 <xTimerGenericCommand+0x90>)
   84b7c:	47a0      	blx	r4
   84b7e:	61f8      	str	r0, [r7, #28]
   84b80:	e016      	b.n	84bb0 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84b82:	4b0e      	ldr	r3, [pc, #56]	; (84bbc <xTimerGenericCommand+0x88>)
   84b84:	681a      	ldr	r2, [r3, #0]
   84b86:	f107 0310 	add.w	r3, r7, #16
   84b8a:	4610      	mov	r0, r2
   84b8c:	4619      	mov	r1, r3
   84b8e:	2200      	movs	r2, #0
   84b90:	2300      	movs	r3, #0
   84b92:	4c0c      	ldr	r4, [pc, #48]	; (84bc4 <xTimerGenericCommand+0x90>)
   84b94:	47a0      	blx	r4
   84b96:	61f8      	str	r0, [r7, #28]
   84b98:	e00a      	b.n	84bb0 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   84b9a:	4b08      	ldr	r3, [pc, #32]	; (84bbc <xTimerGenericCommand+0x88>)
   84b9c:	681a      	ldr	r2, [r3, #0]
   84b9e:	f107 0310 	add.w	r3, r7, #16
   84ba2:	4610      	mov	r0, r2
   84ba4:	4619      	mov	r1, r3
   84ba6:	683a      	ldr	r2, [r7, #0]
   84ba8:	2300      	movs	r3, #0
   84baa:	4c07      	ldr	r4, [pc, #28]	; (84bc8 <xTimerGenericCommand+0x94>)
   84bac:	47a0      	blx	r4
   84bae:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84bb0:	69fb      	ldr	r3, [r7, #28]
}
   84bb2:	4618      	mov	r0, r3
   84bb4:	3724      	adds	r7, #36	; 0x24
   84bb6:	46bd      	mov	sp, r7
   84bb8:	bd90      	pop	{r4, r7, pc}
   84bba:	bf00      	nop
   84bbc:	2007a634 	.word	0x2007a634
   84bc0:	00084895 	.word	0x00084895
   84bc4:	0008354d 	.word	0x0008354d
   84bc8:	00083711 	.word	0x00083711

00084bcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   84bcc:	b590      	push	{r4, r7, lr}
   84bce:	b087      	sub	sp, #28
   84bd0:	af02      	add	r7, sp, #8
   84bd2:	6078      	str	r0, [r7, #4]
   84bd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84bd6:	4b18      	ldr	r3, [pc, #96]	; (84c38 <prvProcessExpiredTimer+0x6c>)
   84bd8:	681b      	ldr	r3, [r3, #0]
   84bda:	68db      	ldr	r3, [r3, #12]
   84bdc:	68db      	ldr	r3, [r3, #12]
   84bde:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84be0:	68fb      	ldr	r3, [r7, #12]
   84be2:	3304      	adds	r3, #4
   84be4:	4618      	mov	r0, r3
   84be6:	4b15      	ldr	r3, [pc, #84]	; (84c3c <prvProcessExpiredTimer+0x70>)
   84be8:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84bea:	68fb      	ldr	r3, [r7, #12]
   84bec:	69db      	ldr	r3, [r3, #28]
   84bee:	2b01      	cmp	r3, #1
   84bf0:	d11b      	bne.n	84c2a <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   84bf2:	68fb      	ldr	r3, [r7, #12]
   84bf4:	699a      	ldr	r2, [r3, #24]
   84bf6:	687b      	ldr	r3, [r7, #4]
   84bf8:	4413      	add	r3, r2
   84bfa:	68f8      	ldr	r0, [r7, #12]
   84bfc:	4619      	mov	r1, r3
   84bfe:	683a      	ldr	r2, [r7, #0]
   84c00:	687b      	ldr	r3, [r7, #4]
   84c02:	4c0f      	ldr	r4, [pc, #60]	; (84c40 <prvProcessExpiredTimer+0x74>)
   84c04:	47a0      	blx	r4
   84c06:	4603      	mov	r3, r0
   84c08:	2b01      	cmp	r3, #1
   84c0a:	d10e      	bne.n	84c2a <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84c0c:	2300      	movs	r3, #0
   84c0e:	9300      	str	r3, [sp, #0]
   84c10:	68f8      	ldr	r0, [r7, #12]
   84c12:	2100      	movs	r1, #0
   84c14:	687a      	ldr	r2, [r7, #4]
   84c16:	2300      	movs	r3, #0
   84c18:	4c0a      	ldr	r4, [pc, #40]	; (84c44 <prvProcessExpiredTimer+0x78>)
   84c1a:	47a0      	blx	r4
   84c1c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   84c1e:	68bb      	ldr	r3, [r7, #8]
   84c20:	2b00      	cmp	r3, #0
   84c22:	d102      	bne.n	84c2a <prvProcessExpiredTimer+0x5e>
   84c24:	4b08      	ldr	r3, [pc, #32]	; (84c48 <prvProcessExpiredTimer+0x7c>)
   84c26:	4798      	blx	r3
   84c28:	e7fe      	b.n	84c28 <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84c2a:	68fb      	ldr	r3, [r7, #12]
   84c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84c2e:	68f8      	ldr	r0, [r7, #12]
   84c30:	4798      	blx	r3
}
   84c32:	3714      	adds	r7, #20
   84c34:	46bd      	mov	sp, r7
   84c36:	bd90      	pop	{r4, r7, pc}
   84c38:	2007a62c 	.word	0x2007a62c
   84c3c:	00082ccd 	.word	0x00082ccd
   84c40:	00084d91 	.word	0x00084d91
   84c44:	00084b35 	.word	0x00084b35
   84c48:	00082f45 	.word	0x00082f45

00084c4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   84c4c:	b580      	push	{r7, lr}
   84c4e:	b084      	sub	sp, #16
   84c50:	af00      	add	r7, sp, #0
   84c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   84c54:	f107 0308 	add.w	r3, r7, #8
   84c58:	4618      	mov	r0, r3
   84c5a:	4b05      	ldr	r3, [pc, #20]	; (84c70 <prvTimerTask+0x24>)
   84c5c:	4798      	blx	r3
   84c5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   84c60:	68bb      	ldr	r3, [r7, #8]
   84c62:	68f8      	ldr	r0, [r7, #12]
   84c64:	4619      	mov	r1, r3
   84c66:	4b03      	ldr	r3, [pc, #12]	; (84c74 <prvTimerTask+0x28>)
   84c68:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   84c6a:	4b03      	ldr	r3, [pc, #12]	; (84c78 <prvTimerTask+0x2c>)
   84c6c:	4798      	blx	r3
	}
   84c6e:	e7f1      	b.n	84c54 <prvTimerTask+0x8>
   84c70:	00084d01 	.word	0x00084d01
   84c74:	00084c7d 	.word	0x00084c7d
   84c78:	00084e19 	.word	0x00084e19

00084c7c <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   84c7c:	b580      	push	{r7, lr}
   84c7e:	b084      	sub	sp, #16
   84c80:	af00      	add	r7, sp, #0
   84c82:	6078      	str	r0, [r7, #4]
   84c84:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   84c86:	4b17      	ldr	r3, [pc, #92]	; (84ce4 <prvProcessTimerOrBlockTask+0x68>)
   84c88:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84c8a:	f107 0308 	add.w	r3, r7, #8
   84c8e:	4618      	mov	r0, r3
   84c90:	4b15      	ldr	r3, [pc, #84]	; (84ce8 <prvProcessTimerOrBlockTask+0x6c>)
   84c92:	4798      	blx	r3
   84c94:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   84c96:	68bb      	ldr	r3, [r7, #8]
   84c98:	2b00      	cmp	r3, #0
   84c9a:	d11e      	bne.n	84cda <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   84c9c:	683b      	ldr	r3, [r7, #0]
   84c9e:	2b00      	cmp	r3, #0
   84ca0:	d10a      	bne.n	84cb8 <prvProcessTimerOrBlockTask+0x3c>
   84ca2:	687a      	ldr	r2, [r7, #4]
   84ca4:	68fb      	ldr	r3, [r7, #12]
   84ca6:	429a      	cmp	r2, r3
   84ca8:	d806      	bhi.n	84cb8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   84caa:	4b10      	ldr	r3, [pc, #64]	; (84cec <prvProcessTimerOrBlockTask+0x70>)
   84cac:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   84cae:	6878      	ldr	r0, [r7, #4]
   84cb0:	68f9      	ldr	r1, [r7, #12]
   84cb2:	4b0f      	ldr	r3, [pc, #60]	; (84cf0 <prvProcessTimerOrBlockTask+0x74>)
   84cb4:	4798      	blx	r3
   84cb6:	e012      	b.n	84cde <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   84cb8:	4b0e      	ldr	r3, [pc, #56]	; (84cf4 <prvProcessTimerOrBlockTask+0x78>)
   84cba:	681a      	ldr	r2, [r3, #0]
   84cbc:	6879      	ldr	r1, [r7, #4]
   84cbe:	68fb      	ldr	r3, [r7, #12]
   84cc0:	1acb      	subs	r3, r1, r3
   84cc2:	4610      	mov	r0, r2
   84cc4:	4619      	mov	r1, r3
   84cc6:	4b0c      	ldr	r3, [pc, #48]	; (84cf8 <prvProcessTimerOrBlockTask+0x7c>)
   84cc8:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   84cca:	4b08      	ldr	r3, [pc, #32]	; (84cec <prvProcessTimerOrBlockTask+0x70>)
   84ccc:	4798      	blx	r3
   84cce:	4603      	mov	r3, r0
   84cd0:	2b00      	cmp	r3, #0
   84cd2:	d104      	bne.n	84cde <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   84cd4:	4b09      	ldr	r3, [pc, #36]	; (84cfc <prvProcessTimerOrBlockTask+0x80>)
   84cd6:	4798      	blx	r3
   84cd8:	e001      	b.n	84cde <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   84cda:	4b04      	ldr	r3, [pc, #16]	; (84cec <prvProcessTimerOrBlockTask+0x70>)
   84cdc:	4798      	blx	r3
		}
	}
}
   84cde:	3710      	adds	r7, #16
   84ce0:	46bd      	mov	sp, r7
   84ce2:	bd80      	pop	{r7, pc}
   84ce4:	00083eb9 	.word	0x00083eb9
   84ce8:	00084d49 	.word	0x00084d49
   84cec:	00083ed5 	.word	0x00083ed5
   84cf0:	00084bcd 	.word	0x00084bcd
   84cf4:	2007a634 	.word	0x2007a634
   84cf8:	00083c51 	.word	0x00083c51
   84cfc:	00082ea9 	.word	0x00082ea9

00084d00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   84d00:	b480      	push	{r7}
   84d02:	b085      	sub	sp, #20
   84d04:	af00      	add	r7, sp, #0
   84d06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   84d08:	4b0e      	ldr	r3, [pc, #56]	; (84d44 <prvGetNextExpireTime+0x44>)
   84d0a:	681b      	ldr	r3, [r3, #0]
   84d0c:	681b      	ldr	r3, [r3, #0]
   84d0e:	2b00      	cmp	r3, #0
   84d10:	bf14      	ite	ne
   84d12:	2300      	movne	r3, #0
   84d14:	2301      	moveq	r3, #1
   84d16:	b2db      	uxtb	r3, r3
   84d18:	461a      	mov	r2, r3
   84d1a:	687b      	ldr	r3, [r7, #4]
   84d1c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   84d1e:	687b      	ldr	r3, [r7, #4]
   84d20:	681b      	ldr	r3, [r3, #0]
   84d22:	2b00      	cmp	r3, #0
   84d24:	d105      	bne.n	84d32 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84d26:	4b07      	ldr	r3, [pc, #28]	; (84d44 <prvGetNextExpireTime+0x44>)
   84d28:	681b      	ldr	r3, [r3, #0]
   84d2a:	68db      	ldr	r3, [r3, #12]
   84d2c:	681b      	ldr	r3, [r3, #0]
   84d2e:	60fb      	str	r3, [r7, #12]
   84d30:	e001      	b.n	84d36 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   84d32:	2300      	movs	r3, #0
   84d34:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   84d36:	68fb      	ldr	r3, [r7, #12]
}
   84d38:	4618      	mov	r0, r3
   84d3a:	3714      	adds	r7, #20
   84d3c:	46bd      	mov	sp, r7
   84d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
   84d42:	4770      	bx	lr
   84d44:	2007a62c 	.word	0x2007a62c

00084d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   84d48:	b580      	push	{r7, lr}
   84d4a:	b084      	sub	sp, #16
   84d4c:	af00      	add	r7, sp, #0
   84d4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   84d50:	4b0c      	ldr	r3, [pc, #48]	; (84d84 <prvSampleTimeNow+0x3c>)
   84d52:	4798      	blx	r3
   84d54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   84d56:	4b0c      	ldr	r3, [pc, #48]	; (84d88 <prvSampleTimeNow+0x40>)
   84d58:	681b      	ldr	r3, [r3, #0]
   84d5a:	68fa      	ldr	r2, [r7, #12]
   84d5c:	429a      	cmp	r2, r3
   84d5e:	d205      	bcs.n	84d6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   84d60:	4b0a      	ldr	r3, [pc, #40]	; (84d8c <prvSampleTimeNow+0x44>)
   84d62:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   84d64:	687b      	ldr	r3, [r7, #4]
   84d66:	2201      	movs	r2, #1
   84d68:	601a      	str	r2, [r3, #0]
   84d6a:	e002      	b.n	84d72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   84d6c:	687b      	ldr	r3, [r7, #4]
   84d6e:	2200      	movs	r2, #0
   84d70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   84d72:	4b05      	ldr	r3, [pc, #20]	; (84d88 <prvSampleTimeNow+0x40>)
   84d74:	68fa      	ldr	r2, [r7, #12]
   84d76:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   84d78:	68fb      	ldr	r3, [r7, #12]
}
   84d7a:	4618      	mov	r0, r3
   84d7c:	3710      	adds	r7, #16
   84d7e:	46bd      	mov	sp, r7
   84d80:	bd80      	pop	{r7, pc}
   84d82:	bf00      	nop
   84d84:	00083ff9 	.word	0x00083ff9
   84d88:	2007a638 	.word	0x2007a638
   84d8c:	00084f45 	.word	0x00084f45

00084d90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   84d90:	b580      	push	{r7, lr}
   84d92:	b086      	sub	sp, #24
   84d94:	af00      	add	r7, sp, #0
   84d96:	60f8      	str	r0, [r7, #12]
   84d98:	60b9      	str	r1, [r7, #8]
   84d9a:	607a      	str	r2, [r7, #4]
   84d9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   84d9e:	2300      	movs	r3, #0
   84da0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   84da2:	68fb      	ldr	r3, [r7, #12]
   84da4:	68ba      	ldr	r2, [r7, #8]
   84da6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84da8:	68fb      	ldr	r3, [r7, #12]
   84daa:	68fa      	ldr	r2, [r7, #12]
   84dac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   84dae:	68ba      	ldr	r2, [r7, #8]
   84db0:	687b      	ldr	r3, [r7, #4]
   84db2:	429a      	cmp	r2, r3
   84db4:	d812      	bhi.n	84ddc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   84db6:	687a      	ldr	r2, [r7, #4]
   84db8:	683b      	ldr	r3, [r7, #0]
   84dba:	1ad2      	subs	r2, r2, r3
   84dbc:	68fb      	ldr	r3, [r7, #12]
   84dbe:	699b      	ldr	r3, [r3, #24]
   84dc0:	429a      	cmp	r2, r3
   84dc2:	d302      	bcc.n	84dca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   84dc4:	2301      	movs	r3, #1
   84dc6:	617b      	str	r3, [r7, #20]
   84dc8:	e01b      	b.n	84e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   84dca:	4b10      	ldr	r3, [pc, #64]	; (84e0c <prvInsertTimerInActiveList+0x7c>)
   84dcc:	681a      	ldr	r2, [r3, #0]
   84dce:	68fb      	ldr	r3, [r7, #12]
   84dd0:	3304      	adds	r3, #4
   84dd2:	4610      	mov	r0, r2
   84dd4:	4619      	mov	r1, r3
   84dd6:	4b0e      	ldr	r3, [pc, #56]	; (84e10 <prvInsertTimerInActiveList+0x80>)
   84dd8:	4798      	blx	r3
   84dda:	e012      	b.n	84e02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   84ddc:	687a      	ldr	r2, [r7, #4]
   84dde:	683b      	ldr	r3, [r7, #0]
   84de0:	429a      	cmp	r2, r3
   84de2:	d206      	bcs.n	84df2 <prvInsertTimerInActiveList+0x62>
   84de4:	68ba      	ldr	r2, [r7, #8]
   84de6:	683b      	ldr	r3, [r7, #0]
   84de8:	429a      	cmp	r2, r3
   84dea:	d302      	bcc.n	84df2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   84dec:	2301      	movs	r3, #1
   84dee:	617b      	str	r3, [r7, #20]
   84df0:	e007      	b.n	84e02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84df2:	4b08      	ldr	r3, [pc, #32]	; (84e14 <prvInsertTimerInActiveList+0x84>)
   84df4:	681a      	ldr	r2, [r3, #0]
   84df6:	68fb      	ldr	r3, [r7, #12]
   84df8:	3304      	adds	r3, #4
   84dfa:	4610      	mov	r0, r2
   84dfc:	4619      	mov	r1, r3
   84dfe:	4b04      	ldr	r3, [pc, #16]	; (84e10 <prvInsertTimerInActiveList+0x80>)
   84e00:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   84e02:	697b      	ldr	r3, [r7, #20]
}
   84e04:	4618      	mov	r0, r3
   84e06:	3718      	adds	r7, #24
   84e08:	46bd      	mov	sp, r7
   84e0a:	bd80      	pop	{r7, pc}
   84e0c:	2007a630 	.word	0x2007a630
   84e10:	00082c5d 	.word	0x00082c5d
   84e14:	2007a62c 	.word	0x2007a62c

00084e18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   84e18:	b590      	push	{r4, r7, lr}
   84e1a:	b08b      	sub	sp, #44	; 0x2c
   84e1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84e1e:	e070      	b.n	84f02 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   84e20:	68bb      	ldr	r3, [r7, #8]
   84e22:	2b00      	cmp	r3, #0
   84e24:	db6d      	blt.n	84f02 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   84e26:	693b      	ldr	r3, [r7, #16]
   84e28:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   84e2a:	69fb      	ldr	r3, [r7, #28]
   84e2c:	695b      	ldr	r3, [r3, #20]
   84e2e:	2b00      	cmp	r3, #0
   84e30:	d004      	beq.n	84e3c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84e32:	69fb      	ldr	r3, [r7, #28]
   84e34:	3304      	adds	r3, #4
   84e36:	4618      	mov	r0, r3
   84e38:	4b3a      	ldr	r3, [pc, #232]	; (84f24 <prvProcessReceivedCommands+0x10c>)
   84e3a:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84e3c:	1d3b      	adds	r3, r7, #4
   84e3e:	4618      	mov	r0, r3
   84e40:	4b39      	ldr	r3, [pc, #228]	; (84f28 <prvProcessReceivedCommands+0x110>)
   84e42:	4798      	blx	r3
   84e44:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   84e46:	68bb      	ldr	r3, [r7, #8]
   84e48:	2b09      	cmp	r3, #9
   84e4a:	d859      	bhi.n	84f00 <prvProcessReceivedCommands+0xe8>
   84e4c:	a201      	add	r2, pc, #4	; (adr r2, 84e54 <prvProcessReceivedCommands+0x3c>)
   84e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84e52:	bf00      	nop
   84e54:	00084e7d 	.word	0x00084e7d
   84e58:	00084e7d 	.word	0x00084e7d
   84e5c:	00084e7d 	.word	0x00084e7d
   84e60:	00084f01 	.word	0x00084f01
   84e64:	00084ecf 	.word	0x00084ecf
   84e68:	00084ef9 	.word	0x00084ef9
   84e6c:	00084e7d 	.word	0x00084e7d
   84e70:	00084e7d 	.word	0x00084e7d
   84e74:	00084f01 	.word	0x00084f01
   84e78:	00084ecf 	.word	0x00084ecf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   84e7c:	68fa      	ldr	r2, [r7, #12]
   84e7e:	69fb      	ldr	r3, [r7, #28]
   84e80:	699b      	ldr	r3, [r3, #24]
   84e82:	441a      	add	r2, r3
   84e84:	68fb      	ldr	r3, [r7, #12]
   84e86:	69f8      	ldr	r0, [r7, #28]
   84e88:	4611      	mov	r1, r2
   84e8a:	69ba      	ldr	r2, [r7, #24]
   84e8c:	4c27      	ldr	r4, [pc, #156]	; (84f2c <prvProcessReceivedCommands+0x114>)
   84e8e:	47a0      	blx	r4
   84e90:	4603      	mov	r3, r0
   84e92:	2b01      	cmp	r3, #1
   84e94:	d11a      	bne.n	84ecc <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84e96:	69fb      	ldr	r3, [r7, #28]
   84e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84e9a:	69f8      	ldr	r0, [r7, #28]
   84e9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84e9e:	69fb      	ldr	r3, [r7, #28]
   84ea0:	69db      	ldr	r3, [r3, #28]
   84ea2:	2b01      	cmp	r3, #1
   84ea4:	d112      	bne.n	84ecc <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   84ea6:	68fa      	ldr	r2, [r7, #12]
   84ea8:	69fb      	ldr	r3, [r7, #28]
   84eaa:	699b      	ldr	r3, [r3, #24]
   84eac:	4413      	add	r3, r2
   84eae:	2200      	movs	r2, #0
   84eb0:	9200      	str	r2, [sp, #0]
   84eb2:	69f8      	ldr	r0, [r7, #28]
   84eb4:	2100      	movs	r1, #0
   84eb6:	461a      	mov	r2, r3
   84eb8:	2300      	movs	r3, #0
   84eba:	4c1d      	ldr	r4, [pc, #116]	; (84f30 <prvProcessReceivedCommands+0x118>)
   84ebc:	47a0      	blx	r4
   84ebe:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   84ec0:	697b      	ldr	r3, [r7, #20]
   84ec2:	2b00      	cmp	r3, #0
   84ec4:	d102      	bne.n	84ecc <prvProcessReceivedCommands+0xb4>
   84ec6:	4b1b      	ldr	r3, [pc, #108]	; (84f34 <prvProcessReceivedCommands+0x11c>)
   84ec8:	4798      	blx	r3
   84eca:	e7fe      	b.n	84eca <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   84ecc:	e019      	b.n	84f02 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   84ece:	68fa      	ldr	r2, [r7, #12]
   84ed0:	69fb      	ldr	r3, [r7, #28]
   84ed2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   84ed4:	69fb      	ldr	r3, [r7, #28]
   84ed6:	699b      	ldr	r3, [r3, #24]
   84ed8:	2b00      	cmp	r3, #0
   84eda:	d102      	bne.n	84ee2 <prvProcessReceivedCommands+0xca>
   84edc:	4b15      	ldr	r3, [pc, #84]	; (84f34 <prvProcessReceivedCommands+0x11c>)
   84ede:	4798      	blx	r3
   84ee0:	e7fe      	b.n	84ee0 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   84ee2:	69fb      	ldr	r3, [r7, #28]
   84ee4:	699a      	ldr	r2, [r3, #24]
   84ee6:	69bb      	ldr	r3, [r7, #24]
   84ee8:	4413      	add	r3, r2
   84eea:	69f8      	ldr	r0, [r7, #28]
   84eec:	4619      	mov	r1, r3
   84eee:	69ba      	ldr	r2, [r7, #24]
   84ef0:	69bb      	ldr	r3, [r7, #24]
   84ef2:	4c0e      	ldr	r4, [pc, #56]	; (84f2c <prvProcessReceivedCommands+0x114>)
   84ef4:	47a0      	blx	r4
					break;
   84ef6:	e004      	b.n	84f02 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   84ef8:	69f8      	ldr	r0, [r7, #28]
   84efa:	4b0f      	ldr	r3, [pc, #60]	; (84f38 <prvProcessReceivedCommands+0x120>)
   84efc:	4798      	blx	r3
					break;
   84efe:	e000      	b.n	84f02 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   84f00:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   84f02:	4b0e      	ldr	r3, [pc, #56]	; (84f3c <prvProcessReceivedCommands+0x124>)
   84f04:	681a      	ldr	r2, [r3, #0]
   84f06:	f107 0308 	add.w	r3, r7, #8
   84f0a:	4610      	mov	r0, r2
   84f0c:	4619      	mov	r1, r3
   84f0e:	2200      	movs	r2, #0
   84f10:	2300      	movs	r3, #0
   84f12:	4c0b      	ldr	r4, [pc, #44]	; (84f40 <prvProcessReceivedCommands+0x128>)
   84f14:	47a0      	blx	r4
   84f16:	4603      	mov	r3, r0
   84f18:	2b00      	cmp	r3, #0
   84f1a:	d181      	bne.n	84e20 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   84f1c:	3724      	adds	r7, #36	; 0x24
   84f1e:	46bd      	mov	sp, r7
   84f20:	bd90      	pop	{r4, r7, pc}
   84f22:	bf00      	nop
   84f24:	00082ccd 	.word	0x00082ccd
   84f28:	00084d49 	.word	0x00084d49
   84f2c:	00084d91 	.word	0x00084d91
   84f30:	00084b35 	.word	0x00084b35
   84f34:	00082f45 	.word	0x00082f45
   84f38:	000831e1 	.word	0x000831e1
   84f3c:	2007a634 	.word	0x2007a634
   84f40:	0008380d 	.word	0x0008380d

00084f44 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   84f44:	b590      	push	{r4, r7, lr}
   84f46:	b089      	sub	sp, #36	; 0x24
   84f48:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84f4a:	e03d      	b.n	84fc8 <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f4c:	4b27      	ldr	r3, [pc, #156]	; (84fec <prvSwitchTimerLists+0xa8>)
   84f4e:	681b      	ldr	r3, [r3, #0]
   84f50:	68db      	ldr	r3, [r3, #12]
   84f52:	681b      	ldr	r3, [r3, #0]
   84f54:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f56:	4b25      	ldr	r3, [pc, #148]	; (84fec <prvSwitchTimerLists+0xa8>)
   84f58:	681b      	ldr	r3, [r3, #0]
   84f5a:	68db      	ldr	r3, [r3, #12]
   84f5c:	68db      	ldr	r3, [r3, #12]
   84f5e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84f60:	693b      	ldr	r3, [r7, #16]
   84f62:	3304      	adds	r3, #4
   84f64:	4618      	mov	r0, r3
   84f66:	4b22      	ldr	r3, [pc, #136]	; (84ff0 <prvSwitchTimerLists+0xac>)
   84f68:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84f6a:	693b      	ldr	r3, [r7, #16]
   84f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84f6e:	6938      	ldr	r0, [r7, #16]
   84f70:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84f72:	693b      	ldr	r3, [r7, #16]
   84f74:	69db      	ldr	r3, [r3, #28]
   84f76:	2b01      	cmp	r3, #1
   84f78:	d126      	bne.n	84fc8 <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   84f7a:	693b      	ldr	r3, [r7, #16]
   84f7c:	699a      	ldr	r2, [r3, #24]
   84f7e:	697b      	ldr	r3, [r7, #20]
   84f80:	4413      	add	r3, r2
   84f82:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   84f84:	68fa      	ldr	r2, [r7, #12]
   84f86:	697b      	ldr	r3, [r7, #20]
   84f88:	429a      	cmp	r2, r3
   84f8a:	d90e      	bls.n	84faa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   84f8c:	693b      	ldr	r3, [r7, #16]
   84f8e:	68fa      	ldr	r2, [r7, #12]
   84f90:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   84f92:	693b      	ldr	r3, [r7, #16]
   84f94:	693a      	ldr	r2, [r7, #16]
   84f96:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   84f98:	4b14      	ldr	r3, [pc, #80]	; (84fec <prvSwitchTimerLists+0xa8>)
   84f9a:	681a      	ldr	r2, [r3, #0]
   84f9c:	693b      	ldr	r3, [r7, #16]
   84f9e:	3304      	adds	r3, #4
   84fa0:	4610      	mov	r0, r2
   84fa2:	4619      	mov	r1, r3
   84fa4:	4b13      	ldr	r3, [pc, #76]	; (84ff4 <prvSwitchTimerLists+0xb0>)
   84fa6:	4798      	blx	r3
   84fa8:	e00e      	b.n	84fc8 <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84faa:	2300      	movs	r3, #0
   84fac:	9300      	str	r3, [sp, #0]
   84fae:	6938      	ldr	r0, [r7, #16]
   84fb0:	2100      	movs	r1, #0
   84fb2:	697a      	ldr	r2, [r7, #20]
   84fb4:	2300      	movs	r3, #0
   84fb6:	4c10      	ldr	r4, [pc, #64]	; (84ff8 <prvSwitchTimerLists+0xb4>)
   84fb8:	47a0      	blx	r4
   84fba:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   84fbc:	68bb      	ldr	r3, [r7, #8]
   84fbe:	2b00      	cmp	r3, #0
   84fc0:	d102      	bne.n	84fc8 <prvSwitchTimerLists+0x84>
   84fc2:	4b0e      	ldr	r3, [pc, #56]	; (84ffc <prvSwitchTimerLists+0xb8>)
   84fc4:	4798      	blx	r3
   84fc6:	e7fe      	b.n	84fc6 <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   84fc8:	4b08      	ldr	r3, [pc, #32]	; (84fec <prvSwitchTimerLists+0xa8>)
   84fca:	681b      	ldr	r3, [r3, #0]
   84fcc:	681b      	ldr	r3, [r3, #0]
   84fce:	2b00      	cmp	r3, #0
   84fd0:	d1bc      	bne.n	84f4c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   84fd2:	4b06      	ldr	r3, [pc, #24]	; (84fec <prvSwitchTimerLists+0xa8>)
   84fd4:	681b      	ldr	r3, [r3, #0]
   84fd6:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   84fd8:	4b09      	ldr	r3, [pc, #36]	; (85000 <prvSwitchTimerLists+0xbc>)
   84fda:	681a      	ldr	r2, [r3, #0]
   84fdc:	4b03      	ldr	r3, [pc, #12]	; (84fec <prvSwitchTimerLists+0xa8>)
   84fde:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   84fe0:	4b07      	ldr	r3, [pc, #28]	; (85000 <prvSwitchTimerLists+0xbc>)
   84fe2:	687a      	ldr	r2, [r7, #4]
   84fe4:	601a      	str	r2, [r3, #0]
}
   84fe6:	371c      	adds	r7, #28
   84fe8:	46bd      	mov	sp, r7
   84fea:	bd90      	pop	{r4, r7, pc}
   84fec:	2007a62c 	.word	0x2007a62c
   84ff0:	00082ccd 	.word	0x00082ccd
   84ff4:	00082c5d 	.word	0x00082c5d
   84ff8:	00084b35 	.word	0x00084b35
   84ffc:	00082f45 	.word	0x00082f45
   85000:	2007a630 	.word	0x2007a630

00085004 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   85004:	b580      	push	{r7, lr}
   85006:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   85008:	4b11      	ldr	r3, [pc, #68]	; (85050 <prvCheckForValidListAndQueue+0x4c>)
   8500a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   8500c:	4b11      	ldr	r3, [pc, #68]	; (85054 <prvCheckForValidListAndQueue+0x50>)
   8500e:	681b      	ldr	r3, [r3, #0]
   85010:	2b00      	cmp	r3, #0
   85012:	d11a      	bne.n	8504a <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   85014:	4810      	ldr	r0, [pc, #64]	; (85058 <prvCheckForValidListAndQueue+0x54>)
   85016:	4b11      	ldr	r3, [pc, #68]	; (8505c <prvCheckForValidListAndQueue+0x58>)
   85018:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   8501a:	4811      	ldr	r0, [pc, #68]	; (85060 <prvCheckForValidListAndQueue+0x5c>)
   8501c:	4b0f      	ldr	r3, [pc, #60]	; (8505c <prvCheckForValidListAndQueue+0x58>)
   8501e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   85020:	4b10      	ldr	r3, [pc, #64]	; (85064 <prvCheckForValidListAndQueue+0x60>)
   85022:	4a0d      	ldr	r2, [pc, #52]	; (85058 <prvCheckForValidListAndQueue+0x54>)
   85024:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   85026:	4b10      	ldr	r3, [pc, #64]	; (85068 <prvCheckForValidListAndQueue+0x64>)
   85028:	4a0d      	ldr	r2, [pc, #52]	; (85060 <prvCheckForValidListAndQueue+0x5c>)
   8502a:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   8502c:	2005      	movs	r0, #5
   8502e:	210c      	movs	r1, #12
   85030:	2200      	movs	r2, #0
   85032:	4b0e      	ldr	r3, [pc, #56]	; (8506c <prvCheckForValidListAndQueue+0x68>)
   85034:	4798      	blx	r3
   85036:	4602      	mov	r2, r0
   85038:	4b06      	ldr	r3, [pc, #24]	; (85054 <prvCheckForValidListAndQueue+0x50>)
   8503a:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   8503c:	4b05      	ldr	r3, [pc, #20]	; (85054 <prvCheckForValidListAndQueue+0x50>)
   8503e:	681b      	ldr	r3, [r3, #0]
   85040:	2b00      	cmp	r3, #0
   85042:	d102      	bne.n	8504a <prvCheckForValidListAndQueue+0x46>
   85044:	4b0a      	ldr	r3, [pc, #40]	; (85070 <prvCheckForValidListAndQueue+0x6c>)
   85046:	4798      	blx	r3
   85048:	e7fe      	b.n	85048 <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8504a:	4b0a      	ldr	r3, [pc, #40]	; (85074 <prvCheckForValidListAndQueue+0x70>)
   8504c:	4798      	blx	r3
}
   8504e:	bd80      	pop	{r7, pc}
   85050:	00082ec9 	.word	0x00082ec9
   85054:	2007a634 	.word	0x2007a634
   85058:	2007a604 	.word	0x2007a604
   8505c:	00082bbd 	.word	0x00082bbd
   85060:	2007a618 	.word	0x2007a618
   85064:	2007a62c 	.word	0x2007a62c
   85068:	2007a630 	.word	0x2007a630
   8506c:	000834c1 	.word	0x000834c1
   85070:	00082f45 	.word	0x00082f45
   85074:	00082f0d 	.word	0x00082f0d

00085078 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   85078:	b480      	push	{r7}
   8507a:	b083      	sub	sp, #12
   8507c:	af00      	add	r7, sp, #0
   8507e:	4603      	mov	r3, r0
   85080:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   85082:	4b08      	ldr	r3, [pc, #32]	; (850a4 <NVIC_EnableIRQ+0x2c>)
   85084:	f997 2007 	ldrsb.w	r2, [r7, #7]
   85088:	0952      	lsrs	r2, r2, #5
   8508a:	79f9      	ldrb	r1, [r7, #7]
   8508c:	f001 011f 	and.w	r1, r1, #31
   85090:	2001      	movs	r0, #1
   85092:	fa00 f101 	lsl.w	r1, r0, r1
   85096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8509a:	370c      	adds	r7, #12
   8509c:	46bd      	mov	sp, r7
   8509e:	f85d 7b04 	ldr.w	r7, [sp], #4
   850a2:	4770      	bx	lr
   850a4:	e000e100 	.word	0xe000e100

000850a8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   850a8:	b480      	push	{r7}
   850aa:	b083      	sub	sp, #12
   850ac:	af00      	add	r7, sp, #0
   850ae:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   850b0:	687b      	ldr	r3, [r7, #4]
   850b2:	2b07      	cmp	r3, #7
   850b4:	d825      	bhi.n	85102 <osc_get_rate+0x5a>
   850b6:	a201      	add	r2, pc, #4	; (adr r2, 850bc <osc_get_rate+0x14>)
   850b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   850bc:	000850dd 	.word	0x000850dd
   850c0:	000850e3 	.word	0x000850e3
   850c4:	000850e9 	.word	0x000850e9
   850c8:	000850ef 	.word	0x000850ef
   850cc:	000850f3 	.word	0x000850f3
   850d0:	000850f7 	.word	0x000850f7
   850d4:	000850fb 	.word	0x000850fb
   850d8:	000850ff 	.word	0x000850ff
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   850dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   850e0:	e010      	b.n	85104 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   850e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   850e6:	e00d      	b.n	85104 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   850e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   850ec:	e00a      	b.n	85104 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   850ee:	4b08      	ldr	r3, [pc, #32]	; (85110 <osc_get_rate+0x68>)
   850f0:	e008      	b.n	85104 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   850f2:	4b08      	ldr	r3, [pc, #32]	; (85114 <osc_get_rate+0x6c>)
   850f4:	e006      	b.n	85104 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   850f6:	4b08      	ldr	r3, [pc, #32]	; (85118 <osc_get_rate+0x70>)
   850f8:	e004      	b.n	85104 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   850fa:	4b07      	ldr	r3, [pc, #28]	; (85118 <osc_get_rate+0x70>)
   850fc:	e002      	b.n	85104 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   850fe:	4b06      	ldr	r3, [pc, #24]	; (85118 <osc_get_rate+0x70>)
   85100:	e000      	b.n	85104 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   85102:	2300      	movs	r3, #0
}
   85104:	4618      	mov	r0, r3
   85106:	370c      	adds	r7, #12
   85108:	46bd      	mov	sp, r7
   8510a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8510e:	4770      	bx	lr
   85110:	003d0900 	.word	0x003d0900
   85114:	007a1200 	.word	0x007a1200
   85118:	00b71b00 	.word	0x00b71b00

0008511c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8511c:	b580      	push	{r7, lr}
   8511e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   85120:	2006      	movs	r0, #6
   85122:	4b04      	ldr	r3, [pc, #16]	; (85134 <sysclk_get_main_hz+0x18>)
   85124:	4798      	blx	r3
   85126:	4602      	mov	r2, r0
   85128:	4613      	mov	r3, r2
   8512a:	00db      	lsls	r3, r3, #3
   8512c:	1a9b      	subs	r3, r3, r2
   8512e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   85130:	4618      	mov	r0, r3
   85132:	bd80      	pop	{r7, pc}
   85134:	000850a9 	.word	0x000850a9

00085138 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   85138:	b580      	push	{r7, lr}
   8513a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   8513c:	4b02      	ldr	r3, [pc, #8]	; (85148 <sysclk_get_cpu_hz+0x10>)
   8513e:	4798      	blx	r3
   85140:	4603      	mov	r3, r0
   85142:	085b      	lsrs	r3, r3, #1
}
   85144:	4618      	mov	r0, r3
   85146:	bd80      	pop	{r7, pc}
   85148:	0008511d 	.word	0x0008511d

0008514c <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   8514c:	b580      	push	{r7, lr}
   8514e:	b082      	sub	sp, #8
   85150:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   85152:	482b      	ldr	r0, [pc, #172]	; (85200 <CAN1_Handler+0xb4>)
   85154:	492b      	ldr	r1, [pc, #172]	; (85204 <CAN1_Handler+0xb8>)
   85156:	4b2c      	ldr	r3, [pc, #176]	; (85208 <CAN1_Handler+0xbc>)
   85158:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   8515a:	482c      	ldr	r0, [pc, #176]	; (8520c <CAN1_Handler+0xc0>)
   8515c:	4b2c      	ldr	r3, [pc, #176]	; (85210 <CAN1_Handler+0xc4>)
   8515e:	4798      	blx	r3
   85160:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) 
   85162:	683b      	ldr	r3, [r7, #0]
   85164:	b2db      	uxtb	r3, r3
   85166:	2b00      	cmp	r3, #0
   85168:	d046      	beq.n	851f8 <CAN1_Handler+0xac>
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   8516a:	2300      	movs	r3, #0
   8516c:	71fb      	strb	r3, [r7, #7]
   8516e:	e040      	b.n	851f2 <CAN1_Handler+0xa6>
		{
			ul_status = can_mailbox_get_status(CAN1, i);
   85170:	79fb      	ldrb	r3, [r7, #7]
   85172:	4826      	ldr	r0, [pc, #152]	; (8520c <CAN1_Handler+0xc0>)
   85174:	4619      	mov	r1, r3
   85176:	4b27      	ldr	r3, [pc, #156]	; (85214 <CAN1_Handler+0xc8>)
   85178:	4798      	blx	r3
   8517a:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) 
   8517c:	683b      	ldr	r3, [r7, #0]
   8517e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   85182:	2b00      	cmp	r3, #0
   85184:	d032      	beq.n	851ec <CAN1_Handler+0xa0>
			{
				can1_mailbox.ul_mb_idx = i;
   85186:	79fa      	ldrb	r2, [r7, #7]
   85188:	4b1d      	ldr	r3, [pc, #116]	; (85200 <CAN1_Handler+0xb4>)
   8518a:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   8518c:	4b1c      	ldr	r3, [pc, #112]	; (85200 <CAN1_Handler+0xb4>)
   8518e:	683a      	ldr	r2, [r7, #0]
   85190:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   85192:	481e      	ldr	r0, [pc, #120]	; (8520c <CAN1_Handler+0xc0>)
   85194:	491a      	ldr	r1, [pc, #104]	; (85200 <CAN1_Handler+0xb4>)
   85196:	4b20      	ldr	r3, [pc, #128]	; (85218 <CAN1_Handler+0xcc>)
   85198:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   8519a:	4b19      	ldr	r3, [pc, #100]	; (85200 <CAN1_Handler+0xb4>)
   8519c:	69da      	ldr	r2, [r3, #28]
   8519e:	4b1f      	ldr	r3, [pc, #124]	; (8521c <CAN1_Handler+0xd0>)
   851a0:	429a      	cmp	r2, r3
   851a2:	d107      	bne.n	851b4 <CAN1_Handler+0x68>
   851a4:	4b16      	ldr	r3, [pc, #88]	; (85200 <CAN1_Handler+0xb4>)
   851a6:	699a      	ldr	r2, [r3, #24]
   851a8:	4b1d      	ldr	r3, [pc, #116]	; (85220 <CAN1_Handler+0xd4>)
   851aa:	429a      	cmp	r2, r3
   851ac:	d102      	bne.n	851b4 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   851ae:	4b1d      	ldr	r3, [pc, #116]	; (85224 <CAN1_Handler+0xd8>)
   851b0:	2200      	movs	r2, #0
   851b2:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   851b4:	79fb      	ldrb	r3, [r7, #7]
   851b6:	4812      	ldr	r0, [pc, #72]	; (85200 <CAN1_Handler+0xb4>)
   851b8:	4619      	mov	r1, r3
   851ba:	4b1b      	ldr	r3, [pc, #108]	; (85228 <CAN1_Handler+0xdc>)
   851bc:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   851be:	4810      	ldr	r0, [pc, #64]	; (85200 <CAN1_Handler+0xb4>)
   851c0:	4912      	ldr	r1, [pc, #72]	; (8520c <CAN1_Handler+0xc0>)
   851c2:	4b1a      	ldr	r3, [pc, #104]	; (8522c <CAN1_Handler+0xe0>)
   851c4:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   851c6:	79fb      	ldrb	r3, [r7, #7]
   851c8:	2b07      	cmp	r3, #7
   851ca:	d103      	bne.n	851d4 <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   851cc:	480c      	ldr	r0, [pc, #48]	; (85200 <CAN1_Handler+0xb4>)
   851ce:	490f      	ldr	r1, [pc, #60]	; (8520c <CAN1_Handler+0xc0>)
   851d0:	4b17      	ldr	r3, [pc, #92]	; (85230 <CAN1_Handler+0xe4>)
   851d2:	4798      	blx	r3

				if (i == 0)
   851d4:	79fb      	ldrb	r3, [r7, #7]
   851d6:	2b00      	cmp	r3, #0
   851d8:	d103      	bne.n	851e2 <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   851da:	4809      	ldr	r0, [pc, #36]	; (85200 <CAN1_Handler+0xb4>)
   851dc:	490b      	ldr	r1, [pc, #44]	; (8520c <CAN1_Handler+0xc0>)
   851de:	4b15      	ldr	r3, [pc, #84]	; (85234 <CAN1_Handler+0xe8>)
   851e0:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   851e2:	4807      	ldr	r0, [pc, #28]	; (85200 <CAN1_Handler+0xb4>)
   851e4:	4907      	ldr	r1, [pc, #28]	; (85204 <CAN1_Handler+0xb8>)
   851e6:	4b14      	ldr	r3, [pc, #80]	; (85238 <CAN1_Handler+0xec>)
   851e8:	4798      	blx	r3
				break;
   851ea:	e005      	b.n	851f8 <CAN1_Handler+0xac>
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) 
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   851ec:	79fb      	ldrb	r3, [r7, #7]
   851ee:	3301      	adds	r3, #1
   851f0:	71fb      	strb	r3, [r7, #7]
   851f2:	79fb      	ldrb	r3, [r7, #7]
   851f4:	2b07      	cmp	r3, #7
   851f6:	d9bb      	bls.n	85170 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   851f8:	3708      	adds	r7, #8
   851fa:	46bd      	mov	sp, r7
   851fc:	bd80      	pop	{r7, pc}
   851fe:	bf00      	nop
   85200:	2007a658 	.word	0x2007a658
   85204:	2007a694 	.word	0x2007a694
   85208:	000858a1 	.word	0x000858a1
   8520c:	400b8000 	.word	0x400b8000
   85210:	00081959 	.word	0x00081959
   85214:	0008199d 	.word	0x0008199d
   85218:	00081b1d 	.word	0x00081b1d
   8521c:	01234567 	.word	0x01234567
   85220:	89abcdef 	.word	0x89abcdef
   85224:	2007a700 	.word	0x2007a700
   85228:	0008550d 	.word	0x0008550d
   8522c:	00085291 	.word	0x00085291
   85230:	000852f1 	.word	0x000852f1
   85234:	00085445 	.word	0x00085445
   85238:	00085911 	.word	0x00085911

0008523c <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   8523c:	b580      	push	{r7, lr}
   8523e:	b082      	sub	sp, #8
   85240:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
   85242:	4810      	ldr	r0, [pc, #64]	; (85284 <CAN0_Handler+0x48>)
   85244:	4b10      	ldr	r3, [pc, #64]	; (85288 <CAN0_Handler+0x4c>)
   85246:	4798      	blx	r3
   85248:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) 
   8524a:	683b      	ldr	r3, [r7, #0]
   8524c:	b2db      	uxtb	r3, r3
   8524e:	2b00      	cmp	r3, #0
   85250:	d014      	beq.n	8527c <CAN0_Handler+0x40>
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   85252:	2300      	movs	r3, #0
   85254:	71fb      	strb	r3, [r7, #7]
   85256:	e00e      	b.n	85276 <CAN0_Handler+0x3a>
		{
			ul_status = can_mailbox_get_status(CAN0, i);
   85258:	79fb      	ldrb	r3, [r7, #7]
   8525a:	480a      	ldr	r0, [pc, #40]	; (85284 <CAN0_Handler+0x48>)
   8525c:	4619      	mov	r1, r3
   8525e:	4b0b      	ldr	r3, [pc, #44]	; (8528c <CAN0_Handler+0x50>)
   85260:	4798      	blx	r3
   85262:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) 
   85264:	683b      	ldr	r3, [r7, #0]
   85266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8526a:	2b00      	cmp	r3, #0
   8526c:	d000      	beq.n	85270 <CAN0_Handler+0x34>
			{
				//assert(g_ul_recv_status); ***implement assert here.
				break;
   8526e:	e005      	b.n	8527c <CAN0_Handler+0x40>
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) 
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   85270:	79fb      	ldrb	r3, [r7, #7]
   85272:	3301      	adds	r3, #1
   85274:	71fb      	strb	r3, [r7, #7]
   85276:	79fb      	ldrb	r3, [r7, #7]
   85278:	2b07      	cmp	r3, #7
   8527a:	d9ed      	bls.n	85258 <CAN0_Handler+0x1c>
				//assert(g_ul_recv_status); ***implement assert here.
				break;
			}
		}
	}
}
   8527c:	3708      	adds	r7, #8
   8527e:	46bd      	mov	sp, r7
   85280:	bd80      	pop	{r7, pc}
   85282:	bf00      	nop
   85284:	400b4000 	.word	0x400b4000
   85288:	00081959 	.word	0x00081959
   8528c:	0008199d 	.word	0x0008199d

00085290 <debug_can_msg>:
/************************************************************************/
/* DEBUG CAN MESSAGE 													*/
/* USED FOR debugging 													*/
/************************************************************************/
void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   85290:	b580      	push	{r7, lr}
   85292:	b086      	sub	sp, #24
   85294:	af00      	add	r7, sp, #0
   85296:	6078      	str	r0, [r7, #4]
   85298:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8529a:	687b      	ldr	r3, [r7, #4]
   8529c:	699b      	ldr	r3, [r3, #24]
   8529e:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   852a0:	687b      	ldr	r3, [r7, #4]
   852a2:	69db      	ldr	r3, [r3, #28]
   852a4:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   852a6:	693b      	ldr	r3, [r7, #16]
   852a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   852ac:	0c1b      	lsrs	r3, r3, #16
   852ae:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   852b0:	693b      	ldr	r3, [r7, #16]
   852b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   852b6:	0a1b      	lsrs	r3, r3, #8
   852b8:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   852ba:	7bfb      	ldrb	r3, [r7, #15]
   852bc:	2b02      	cmp	r3, #2
   852be:	d105      	bne.n	852cc <debug_can_msg+0x3c>
   852c0:	7bbb      	ldrb	r3, [r7, #14]
   852c2:	2b04      	cmp	r3, #4
   852c4:	d102      	bne.n	852cc <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   852c6:	2057      	movs	r0, #87	; 0x57
   852c8:	4b08      	ldr	r3, [pc, #32]	; (852ec <debug_can_msg+0x5c>)
   852ca:	4798      	blx	r3

	if (big_type == MT_HK)
   852cc:	7bfb      	ldrb	r3, [r7, #15]
   852ce:	2b01      	cmp	r3, #1
   852d0:	d102      	bne.n	852d8 <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   852d2:	2055      	movs	r0, #85	; 0x55
   852d4:	4b05      	ldr	r3, [pc, #20]	; (852ec <debug_can_msg+0x5c>)
   852d6:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   852d8:	7bfb      	ldrb	r3, [r7, #15]
   852da:	2b00      	cmp	r3, #0
   852dc:	d102      	bne.n	852e4 <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   852de:	2056      	movs	r0, #86	; 0x56
   852e0:	4b02      	ldr	r3, [pc, #8]	; (852ec <debug_can_msg+0x5c>)
   852e2:	4798      	blx	r3

	return;
   852e4:	bf00      	nop
}
   852e6:	3718      	adds	r7, #24
   852e8:	46bd      	mov	sp, r7
   852ea:	bd80      	pop	{r7, pc}
   852ec:	00081f1d 	.word	0x00081f1d

000852f0 <decode_can_command>:
/* @param: *controller: used to verify authenticity						*/
/* @Purpose: This function decodes commands which are received and 		*/
/* performs different actions based on what was received. 				*/
/************************************************************************/
void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   852f0:	b590      	push	{r4, r7, lr}
   852f2:	b087      	sub	sp, #28
   852f4:	af00      	add	r7, sp, #0
   852f6:	6078      	str	r0, [r7, #4]
   852f8:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   852fa:	687b      	ldr	r3, [r7, #4]
   852fc:	699b      	ldr	r3, [r3, #24]
   852fe:	613b      	str	r3, [r7, #16]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85300:	687b      	ldr	r3, [r7, #4]
   85302:	69db      	ldr	r3, [r3, #28]
   85304:	60fb      	str	r3, [r7, #12]
	uint8_t sender, destination, big_type, small_type;
	BaseType_t wake_task;	// Not needed here.

	sender = (uint8_t)(uh_data_incom >> 28);
   85306:	68fb      	ldr	r3, [r7, #12]
   85308:	0f1b      	lsrs	r3, r3, #28
   8530a:	75fb      	strb	r3, [r7, #23]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   8530c:	68fb      	ldr	r3, [r7, #12]
   8530e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   85312:	0e1b      	lsrs	r3, r3, #24
   85314:	75bb      	strb	r3, [r7, #22]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   85316:	68fb      	ldr	r3, [r7, #12]
   85318:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   8531c:	0c1b      	lsrs	r3, r3, #16
   8531e:	757b      	strb	r3, [r7, #21]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85320:	68fb      	ldr	r3, [r7, #12]
   85322:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   85326:	0a1b      	lsrs	r3, r3, #8
   85328:	753b      	strb	r3, [r7, #20]

	if(big_type != MT_COM)
   8532a:	7d7b      	ldrb	r3, [r7, #21]
   8532c:	2b02      	cmp	r3, #2
   8532e:	d000      	beq.n	85332 <decode_can_command+0x42>
		return;
   85330:	e06f      	b.n	85412 <decode_can_command+0x122>
	
	switch(small_type)	// FROM WHO
   85332:	7d3b      	ldrb	r3, [r7, #20]
   85334:	3b06      	subs	r3, #6
   85336:	2b0d      	cmp	r3, #13
   85338:	d869      	bhi.n	8540e <decode_can_command+0x11e>
   8533a:	a201      	add	r2, pc, #4	; (adr r2, 85340 <decode_can_command+0x50>)
   8533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85340:	00085379 	.word	0x00085379
   85344:	0008540f 	.word	0x0008540f
   85348:	000853a1 	.word	0x000853a1
   8534c:	0008540f 	.word	0x0008540f
   85350:	0008540f 	.word	0x0008540f
   85354:	0008540f 	.word	0x0008540f
   85358:	0008540f 	.word	0x0008540f
   8535c:	0008540f 	.word	0x0008540f
   85360:	000853c9 	.word	0x000853c9
   85364:	0008540f 	.word	0x0008540f
   85368:	00085407 	.word	0x00085407
   8536c:	000853f9 	.word	0x000853f9
   85370:	0008540f 	.word	0x0008540f
   85374:	000853fd 	.word	0x000853fd
	{
		case ACK_READ:
			switch(destination)
   85378:	7dbb      	ldrb	r3, [r7, #22]
   8537a:	2b04      	cmp	r3, #4
   8537c:	d000      	beq.n	85380 <decode_can_command+0x90>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   8537e:	e00e      	b.n	8539e <decode_can_command+0xae>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   85380:	4b25      	ldr	r3, [pc, #148]	; (85418 <decode_can_command+0x128>)
   85382:	781b      	ldrb	r3, [r3, #0]
   85384:	2b00      	cmp	r3, #0
   85386:	d009      	beq.n	8539c <decode_can_command+0xac>
					{
						hk_read_receivedf = 1;
   85388:	4b24      	ldr	r3, [pc, #144]	; (8541c <decode_can_command+0x12c>)
   8538a:	2201      	movs	r2, #1
   8538c:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   8538e:	68fa      	ldr	r2, [r7, #12]
   85390:	4b23      	ldr	r3, [pc, #140]	; (85420 <decode_can_command+0x130>)
   85392:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   85394:	693a      	ldr	r2, [r7, #16]
   85396:	4b22      	ldr	r3, [pc, #136]	; (85420 <decode_can_command+0x130>)
   85398:	601a      	str	r2, [r3, #0]
					}
					break;
   8539a:	e7ff      	b.n	8539c <decode_can_command+0xac>
   8539c:	bf00      	nop
				default :
					break;
			}
			break;
   8539e:	e037      	b.n	85410 <decode_can_command+0x120>
		case ACK_WRITE :
			switch(destination)
   853a0:	7dbb      	ldrb	r3, [r7, #22]
   853a2:	2b04      	cmp	r3, #4
   853a4:	d000      	beq.n	853a8 <decode_can_command+0xb8>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   853a6:	e00e      	b.n	853c6 <decode_can_command+0xd6>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   853a8:	4b1e      	ldr	r3, [pc, #120]	; (85424 <decode_can_command+0x134>)
   853aa:	781b      	ldrb	r3, [r3, #0]
   853ac:	2b00      	cmp	r3, #0
   853ae:	d009      	beq.n	853c4 <decode_can_command+0xd4>
					{
						hk_write_receivedf = 1;
   853b0:	4b1d      	ldr	r3, [pc, #116]	; (85428 <decode_can_command+0x138>)
   853b2:	2201      	movs	r2, #1
   853b4:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   853b6:	68fa      	ldr	r2, [r7, #12]
   853b8:	4b1c      	ldr	r3, [pc, #112]	; (8542c <decode_can_command+0x13c>)
   853ba:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   853bc:	693a      	ldr	r2, [r7, #16]
   853be:	4b1b      	ldr	r3, [pc, #108]	; (8542c <decode_can_command+0x13c>)
   853c0:	601a      	str	r2, [r3, #0]
					}
					break;
   853c2:	e7ff      	b.n	853c4 <decode_can_command+0xd4>
   853c4:	bf00      	nop
				default :
					break;
			}
			break;
   853c6:	e023      	b.n	85410 <decode_can_command+0x120>
		case SEND_TC:
			xQueueSendToBackFromISR(tc_msg_fifo, &ul_data_incom, &wake_task);		// Telecommand reception FIFO.
   853c8:	4b19      	ldr	r3, [pc, #100]	; (85430 <decode_can_command+0x140>)
   853ca:	6819      	ldr	r1, [r3, #0]
   853cc:	f107 0210 	add.w	r2, r7, #16
   853d0:	f107 0308 	add.w	r3, r7, #8
   853d4:	4608      	mov	r0, r1
   853d6:	4611      	mov	r1, r2
   853d8:	461a      	mov	r2, r3
   853da:	2300      	movs	r3, #0
   853dc:	4c15      	ldr	r4, [pc, #84]	; (85434 <decode_can_command+0x144>)
   853de:	47a0      	blx	r4
			xQueueSendToBackFromISR(tc_msg_fifo, &uh_data_incom, &wake_task);
   853e0:	4b13      	ldr	r3, [pc, #76]	; (85430 <decode_can_command+0x140>)
   853e2:	6819      	ldr	r1, [r3, #0]
   853e4:	f107 020c 	add.w	r2, r7, #12
   853e8:	f107 0308 	add.w	r3, r7, #8
   853ec:	4608      	mov	r0, r1
   853ee:	4611      	mov	r1, r2
   853f0:	461a      	mov	r2, r3
   853f2:	2300      	movs	r3, #0
   853f4:	4c0f      	ldr	r4, [pc, #60]	; (85434 <decode_can_command+0x144>)
   853f6:	47a0      	blx	r4
		case TC_PACKET_READY:
			start_tc_packet();
   853f8:	4b0f      	ldr	r3, [pc, #60]	; (85438 <decode_can_command+0x148>)
   853fa:	4798      	blx	r3
		case TM_TRANSACTION_RESP:
			tm_transfer_completef = (uint8_t)(ul_data_incom & 0x000000FF);
   853fc:	693b      	ldr	r3, [r7, #16]
   853fe:	b2da      	uxtb	r2, r3
   85400:	4b0e      	ldr	r3, [pc, #56]	; (8543c <decode_can_command+0x14c>)
   85402:	701a      	strb	r2, [r3, #0]
			break;
   85404:	e004      	b.n	85410 <decode_can_command+0x120>
		case OK_START_TM_PACKET:
			start_tm_transferf = 1;
   85406:	4b0e      	ldr	r3, [pc, #56]	; (85440 <decode_can_command+0x150>)
   85408:	2201      	movs	r2, #1
   8540a:	701a      	strb	r2, [r3, #0]
			break;
   8540c:	e000      	b.n	85410 <decode_can_command+0x120>
		default :
			break;
   8540e:	bf00      	nop
	}
	return;
   85410:	bf00      	nop
}
   85412:	371c      	adds	r7, #28
   85414:	46bd      	mov	sp, r7
   85416:	bd90      	pop	{r4, r7, pc}
   85418:	2007a70d 	.word	0x2007a70d
   8541c:	2007a654 	.word	0x2007a654
   85420:	2007a688 	.word	0x2007a688
   85424:	2007a6c0 	.word	0x2007a6c0
   85428:	2007a67c 	.word	0x2007a67c
   8542c:	2007a6cc 	.word	0x2007a6cc
   85430:	2007a708 	.word	0x2007a708
   85434:	00083711 	.word	0x00083711
   85438:	00085d75 	.word	0x00085d75
   8543c:	2007a704 	.word	0x2007a704
   85440:	2007a67a 	.word	0x2007a67a

00085444 <alert_can_data>:
/* @param: *controller: To be used to verify that the request was genuin*/
/* @Purpose: This function sets flags which let process know that they 	*/
/* have data waiting for them. 											*/
/************************************************************************/
void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   85444:	b480      	push	{r7}
   85446:	b087      	sub	sp, #28
   85448:	af00      	add	r7, sp, #0
   8544a:	6078      	str	r0, [r7, #4]
   8544c:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   8544e:	687b      	ldr	r3, [r7, #4]
   85450:	69db      	ldr	r3, [r3, #28]
   85452:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85454:	687b      	ldr	r3, [r7, #4]
   85456:	699b      	ldr	r3, [r3, #24]
   85458:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type, destination;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8545a:	697b      	ldr	r3, [r7, #20]
   8545c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85460:	0c1b      	lsrs	r3, r3, #16
   85462:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85464:	697b      	ldr	r3, [r7, #20]
   85466:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8546a:	0a1b      	lsrs	r3, r3, #8
   8546c:	73bb      	strb	r3, [r7, #14]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   8546e:	697b      	ldr	r3, [r7, #20]
   85470:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   85474:	0e1b      	lsrs	r3, r3, #24
   85476:	737b      	strb	r3, [r7, #13]

	if(big_type != MT_DATA)
   85478:	7bfb      	ldrb	r3, [r7, #15]
   8547a:	2b00      	cmp	r3, #0
   8547c:	d000      	beq.n	85480 <alert_can_data+0x3c>
		return;
   8547e:	e02f      	b.n	854e0 <alert_can_data+0x9c>
	
	if(small_type == SPI_TEMP1)
   85480:	7bbb      	ldrb	r3, [r7, #14]
   85482:	2b01      	cmp	r3, #1
   85484:	d102      	bne.n	8548c <alert_can_data+0x48>
		glob_drf = 1;
   85486:	4b19      	ldr	r3, [pc, #100]	; (854ec <alert_can_data+0xa8>)
   85488:	2201      	movs	r2, #1
   8548a:	701a      	strb	r2, [r3, #0]
		
	if(small_type == COMS_PACKET)
   8548c:	7bbb      	ldrb	r3, [r7, #14]
   8548e:	2b02      	cmp	r3, #2
   85490:	d102      	bne.n	85498 <alert_can_data+0x54>
		glob_comsf = 1;
   85492:	4b17      	ldr	r3, [pc, #92]	; (854f0 <alert_can_data+0xac>)
   85494:	2201      	movs	r2, #1
   85496:	701a      	strb	r2, [r3, #0]
		
	switch(destination)
   85498:	7b7b      	ldrb	r3, [r7, #13]
   8549a:	2b08      	cmp	r3, #8
   8549c:	d004      	beq.n	854a8 <alert_can_data+0x64>
   8549e:	2b09      	cmp	r3, #9
   854a0:	d014      	beq.n	854cc <alert_can_data+0x88>
   854a2:	2b07      	cmp	r3, #7
   854a4:	d009      	beq.n	854ba <alert_can_data+0x76>
		case PAY_TASK_ID:
			pay_data_receivedf = 1;
			pay_data_receive[1] = uh_data_incom;
			pay_data_receive[0] = ul_data_incom;
		default:
			return;	
   854a6:	e01b      	b.n	854e0 <alert_can_data+0x9c>
		glob_comsf = 1;
		
	switch(destination)
	{
		case EPS_TASK_ID:
			eps_data_receivedf = 1;
   854a8:	4b12      	ldr	r3, [pc, #72]	; (854f4 <alert_can_data+0xb0>)
   854aa:	2201      	movs	r2, #1
   854ac:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   854ae:	4b12      	ldr	r3, [pc, #72]	; (854f8 <alert_can_data+0xb4>)
   854b0:	697a      	ldr	r2, [r7, #20]
   854b2:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   854b4:	4b10      	ldr	r3, [pc, #64]	; (854f8 <alert_can_data+0xb4>)
   854b6:	693a      	ldr	r2, [r7, #16]
   854b8:	601a      	str	r2, [r3, #0]
		case COMS_TASK_ID:
			coms_data_receivedf = 1;
   854ba:	4b10      	ldr	r3, [pc, #64]	; (854fc <alert_can_data+0xb8>)
   854bc:	2201      	movs	r2, #1
   854be:	701a      	strb	r2, [r3, #0]
			coms_data_receive[1] = uh_data_incom;
   854c0:	4b0f      	ldr	r3, [pc, #60]	; (85500 <alert_can_data+0xbc>)
   854c2:	697a      	ldr	r2, [r7, #20]
   854c4:	605a      	str	r2, [r3, #4]
			coms_data_receive[0] = ul_data_incom;
   854c6:	4b0e      	ldr	r3, [pc, #56]	; (85500 <alert_can_data+0xbc>)
   854c8:	693a      	ldr	r2, [r7, #16]
   854ca:	601a      	str	r2, [r3, #0]
		case PAY_TASK_ID:
			pay_data_receivedf = 1;
   854cc:	4b0d      	ldr	r3, [pc, #52]	; (85504 <alert_can_data+0xc0>)
   854ce:	2201      	movs	r2, #1
   854d0:	701a      	strb	r2, [r3, #0]
			pay_data_receive[1] = uh_data_incom;
   854d2:	4b0d      	ldr	r3, [pc, #52]	; (85508 <alert_can_data+0xc4>)
   854d4:	697a      	ldr	r2, [r7, #20]
   854d6:	605a      	str	r2, [r3, #4]
			pay_data_receive[0] = ul_data_incom;
   854d8:	4b0b      	ldr	r3, [pc, #44]	; (85508 <alert_can_data+0xc4>)
   854da:	693a      	ldr	r2, [r7, #16]
   854dc:	601a      	str	r2, [r3, #0]
		default:
			return;	
   854de:	bf00      	nop
	}
	return;
}
   854e0:	371c      	adds	r7, #28
   854e2:	46bd      	mov	sp, r7
   854e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   854e8:	4770      	bx	lr
   854ea:	bf00      	nop
   854ec:	2007a678 	.word	0x2007a678
   854f0:	2007a67b 	.word	0x2007a67b
   854f4:	2007a714 	.word	0x2007a714
   854f8:	2007a6f4 	.word	0x2007a6f4
   854fc:	2007a679 	.word	0x2007a679
   85500:	2007a6b8 	.word	0x2007a6b8
   85504:	2007a71c 	.word	0x2007a71c
   85508:	2007a6c4 	.word	0x2007a6c4

0008550c <store_can_msg>:
/* @param: mb: The mailbox from which the message was received. 		*/
/* @Purpose: This function takes a message which was received and stores*/
/* in the proper FIFO in memory.										*/
/************************************************************************/
void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   8550c:	b590      	push	{r4, r7, lr}
   8550e:	b087      	sub	sp, #28
   85510:	af00      	add	r7, sp, #0
   85512:	6078      	str	r0, [r7, #4]
   85514:	460b      	mov	r3, r1
   85516:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   85518:	687b      	ldr	r3, [r7, #4]
   8551a:	699b      	ldr	r3, [r3, #24]
   8551c:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   8551e:	687b      	ldr	r3, [r7, #4]
   85520:	69db      	ldr	r3, [r3, #28]
   85522:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed here.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   85524:	78fb      	ldrb	r3, [r7, #3]
   85526:	2b07      	cmp	r3, #7
   85528:	d873      	bhi.n	85612 <store_can_msg+0x106>
   8552a:	a201      	add	r2, pc, #4	; (adr r2, 85530 <store_can_msg+0x24>)
   8552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85530:	00085551 	.word	0x00085551
   85534:	00085613 	.word	0x00085613
   85538:	00085613 	.word	0x00085613
   8553c:	00085613 	.word	0x00085613
   85540:	00085613 	.word	0x00085613
   85544:	00085581 	.word	0x00085581
   85548:	000855b1 	.word	0x000855b1
   8554c:	000855e1 	.word	0x000855e1
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   85550:	4b32      	ldr	r3, [pc, #200]	; (8561c <store_can_msg+0x110>)
   85552:	6819      	ldr	r1, [r3, #0]
   85554:	f107 0214 	add.w	r2, r7, #20
   85558:	f107 030c 	add.w	r3, r7, #12
   8555c:	4608      	mov	r0, r1
   8555e:	4611      	mov	r1, r2
   85560:	461a      	mov	r2, r3
   85562:	2300      	movs	r3, #0
   85564:	4c2e      	ldr	r4, [pc, #184]	; (85620 <store_can_msg+0x114>)
   85566:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   85568:	4b2c      	ldr	r3, [pc, #176]	; (8561c <store_can_msg+0x110>)
   8556a:	6819      	ldr	r1, [r3, #0]
   8556c:	f107 0210 	add.w	r2, r7, #16
   85570:	f107 030c 	add.w	r3, r7, #12
   85574:	4608      	mov	r0, r1
   85576:	4611      	mov	r1, r2
   85578:	461a      	mov	r2, r3
   8557a:	2300      	movs	r3, #0
   8557c:	4c28      	ldr	r4, [pc, #160]	; (85620 <store_can_msg+0x114>)
   8557e:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   85580:	4b28      	ldr	r3, [pc, #160]	; (85624 <store_can_msg+0x118>)
   85582:	6819      	ldr	r1, [r3, #0]
   85584:	f107 0214 	add.w	r2, r7, #20
   85588:	f107 030c 	add.w	r3, r7, #12
   8558c:	4608      	mov	r0, r1
   8558e:	4611      	mov	r1, r2
   85590:	461a      	mov	r2, r3
   85592:	2300      	movs	r3, #0
   85594:	4c22      	ldr	r4, [pc, #136]	; (85620 <store_can_msg+0x114>)
   85596:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   85598:	4b22      	ldr	r3, [pc, #136]	; (85624 <store_can_msg+0x118>)
   8559a:	6819      	ldr	r1, [r3, #0]
   8559c:	f107 0210 	add.w	r2, r7, #16
   855a0:	f107 030c 	add.w	r3, r7, #12
   855a4:	4608      	mov	r0, r1
   855a6:	4611      	mov	r1, r2
   855a8:	461a      	mov	r2, r3
   855aa:	2300      	movs	r3, #0
   855ac:	4c1c      	ldr	r4, [pc, #112]	; (85620 <store_can_msg+0x114>)
   855ae:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   855b0:	4b1d      	ldr	r3, [pc, #116]	; (85628 <store_can_msg+0x11c>)
   855b2:	6819      	ldr	r1, [r3, #0]
   855b4:	f107 0214 	add.w	r2, r7, #20
   855b8:	f107 030c 	add.w	r3, r7, #12
   855bc:	4608      	mov	r0, r1
   855be:	4611      	mov	r1, r2
   855c0:	461a      	mov	r2, r3
   855c2:	2300      	movs	r3, #0
   855c4:	4c16      	ldr	r4, [pc, #88]	; (85620 <store_can_msg+0x114>)
   855c6:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   855c8:	4b17      	ldr	r3, [pc, #92]	; (85628 <store_can_msg+0x11c>)
   855ca:	6819      	ldr	r1, [r3, #0]
   855cc:	f107 0210 	add.w	r2, r7, #16
   855d0:	f107 030c 	add.w	r3, r7, #12
   855d4:	4608      	mov	r0, r1
   855d6:	4611      	mov	r1, r2
   855d8:	461a      	mov	r2, r3
   855da:	2300      	movs	r3, #0
   855dc:	4c10      	ldr	r4, [pc, #64]	; (85620 <store_can_msg+0x114>)
   855de:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   855e0:	4b12      	ldr	r3, [pc, #72]	; (8562c <store_can_msg+0x120>)
   855e2:	6819      	ldr	r1, [r3, #0]
   855e4:	f107 0214 	add.w	r2, r7, #20
   855e8:	f107 030c 	add.w	r3, r7, #12
   855ec:	4608      	mov	r0, r1
   855ee:	4611      	mov	r1, r2
   855f0:	461a      	mov	r2, r3
   855f2:	2300      	movs	r3, #0
   855f4:	4c0a      	ldr	r4, [pc, #40]	; (85620 <store_can_msg+0x114>)
   855f6:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   855f8:	4b0c      	ldr	r3, [pc, #48]	; (8562c <store_can_msg+0x120>)
   855fa:	6819      	ldr	r1, [r3, #0]
   855fc:	f107 0210 	add.w	r2, r7, #16
   85600:	f107 030c 	add.w	r3, r7, #12
   85604:	4608      	mov	r0, r1
   85606:	4611      	mov	r1, r2
   85608:	461a      	mov	r2, r3
   8560a:	2300      	movs	r3, #0
   8560c:	4c04      	ldr	r4, [pc, #16]	; (85620 <store_can_msg+0x114>)
   8560e:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   85610:	bf00      	nop
   85612:	bf00      	nop
	}
	return;
}
   85614:	371c      	adds	r7, #28
   85616:	46bd      	mov	sp, r7
   85618:	bd90      	pop	{r4, r7, pc}
   8561a:	bf00      	nop
   8561c:	2007a690 	.word	0x2007a690
   85620:	00083711 	.word	0x00083711
   85624:	2007a72c 	.word	0x2007a72c
   85628:	2007a648 	.word	0x2007a648
   8562c:	2007a710 	.word	0x2007a710

00085630 <reset_mailbox_conf>:
/* RESET_MAILBOX_CONF 		                                            */
/* @param: *p_mailbox: the mailbox object to be reset. 					*/
/* @Purpose: This function resets the attributes of object p_mailbox.	*/
/************************************************************************/
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85630:	b480      	push	{r7}
   85632:	b083      	sub	sp, #12
   85634:	af00      	add	r7, sp, #0
   85636:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   85638:	687b      	ldr	r3, [r7, #4]
   8563a:	2200      	movs	r2, #0
   8563c:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   8563e:	687b      	ldr	r3, [r7, #4]
   85640:	2200      	movs	r2, #0
   85642:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   85644:	687b      	ldr	r3, [r7, #4]
   85646:	2200      	movs	r2, #0
   85648:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   8564a:	687b      	ldr	r3, [r7, #4]
   8564c:	2200      	movs	r2, #0
   8564e:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   85650:	687b      	ldr	r3, [r7, #4]
   85652:	2200      	movs	r2, #0
   85654:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   85656:	687b      	ldr	r3, [r7, #4]
   85658:	2200      	movs	r2, #0
   8565a:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   8565c:	687b      	ldr	r3, [r7, #4]
   8565e:	2200      	movs	r2, #0
   85660:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   85662:	687b      	ldr	r3, [r7, #4]
   85664:	2200      	movs	r2, #0
   85666:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   85668:	687b      	ldr	r3, [r7, #4]
   8566a:	2200      	movs	r2, #0
   8566c:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   8566e:	687b      	ldr	r3, [r7, #4]
   85670:	2200      	movs	r2, #0
   85672:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   85674:	687b      	ldr	r3, [r7, #4]
   85676:	2200      	movs	r2, #0
   85678:	61da      	str	r2, [r3, #28]

	return;
   8567a:	bf00      	nop
}
   8567c:	370c      	adds	r7, #12
   8567e:	46bd      	mov	sp, r7
   85680:	f85d 7b04 	ldr.w	r7, [sp], #4
   85684:	4770      	bx	lr
   85686:	bf00      	nop

00085688 <send_can_command_h>:
/* @NOTE: 1 != Success (Necessarily) 									*/
/* @NOTE: This is a helper function, it is only to be used in sections  */
/* of code where the Can0_Mutex has been acquired.						*/
/************************************************************************/
uint32_t send_can_command_h(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   85688:	b580      	push	{r7, lr}
   8568a:	b086      	sub	sp, #24
   8568c:	af00      	add	r7, sp, #0
   8568e:	60f8      	str	r0, [r7, #12]
   85690:	60b9      	str	r1, [r7, #8]
   85692:	607a      	str	r2, [r7, #4]
   85694:	603b      	str	r3, [r7, #0]
	uint32_t timeout = 8400;		// ~ 100 us timeout.
   85696:	f242 03d0 	movw	r3, #8400	; 0x20d0
   8569a:	617b      	str	r3, [r7, #20]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   8569c:	4819      	ldr	r0, [pc, #100]	; (85704 <send_can_command_h+0x7c>)
   8569e:	4b1a      	ldr	r3, [pc, #104]	; (85708 <send_can_command_h+0x80>)
   856a0:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;						//Mailbox Number 7
   856a2:	4b18      	ldr	r3, [pc, #96]	; (85704 <send_can_command_h+0x7c>)
   856a4:	2207      	movs	r2, #7
   856a6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   856a8:	4b16      	ldr	r3, [pc, #88]	; (85704 <send_can_command_h+0x7c>)
   856aa:	2203      	movs	r2, #3
   856ac:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;				//Transmission Priority (Can be Changed dynamically)
   856ae:	683b      	ldr	r3, [r7, #0]
   856b0:	b2da      	uxtb	r2, r3
   856b2:	4b14      	ldr	r3, [pc, #80]	; (85704 <send_can_command_h+0x7c>)
   856b4:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   856b6:	4b13      	ldr	r3, [pc, #76]	; (85704 <send_can_command_h+0x7c>)
   856b8:	2200      	movs	r2, #0
   856ba:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   856bc:	4b11      	ldr	r3, [pc, #68]	; (85704 <send_can_command_h+0x7c>)
   856be:	2200      	movs	r2, #0
   856c0:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   856c2:	4812      	ldr	r0, [pc, #72]	; (8570c <send_can_command_h+0x84>)
   856c4:	490f      	ldr	r1, [pc, #60]	; (85704 <send_can_command_h+0x7c>)
   856c6:	4b12      	ldr	r3, [pc, #72]	; (85710 <send_can_command_h+0x88>)
   856c8:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   856ca:	687b      	ldr	r3, [r7, #4]
   856cc:	049a      	lsls	r2, r3, #18
   856ce:	4b11      	ldr	r3, [pc, #68]	; (85714 <send_can_command_h+0x8c>)
   856d0:	4013      	ands	r3, r2
   856d2:	4a0c      	ldr	r2, [pc, #48]	; (85704 <send_can_command_h+0x7c>)
   856d4:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   856d6:	4b0b      	ldr	r3, [pc, #44]	; (85704 <send_can_command_h+0x7c>)
   856d8:	68fa      	ldr	r2, [r7, #12]
   856da:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   856dc:	4b09      	ldr	r3, [pc, #36]	; (85704 <send_can_command_h+0x7c>)
   856de:	68ba      	ldr	r2, [r7, #8]
   856e0:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   856e2:	4b08      	ldr	r3, [pc, #32]	; (85704 <send_can_command_h+0x7c>)
   856e4:	2208      	movs	r2, #8
   856e6:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   856e8:	4808      	ldr	r0, [pc, #32]	; (8570c <send_can_command_h+0x84>)
   856ea:	4906      	ldr	r1, [pc, #24]	; (85704 <send_can_command_h+0x7c>)
   856ec:	4b0a      	ldr	r3, [pc, #40]	; (85718 <send_can_command_h+0x90>)
   856ee:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   856f0:	4806      	ldr	r0, [pc, #24]	; (8570c <send_can_command_h+0x84>)
   856f2:	2180      	movs	r1, #128	; 0x80
   856f4:	4b09      	ldr	r3, [pc, #36]	; (8571c <send_can_command_h+0x94>)
   856f6:	4798      	blx	r3
	
	return 0;
   856f8:	2300      	movs	r3, #0
}
   856fa:	4618      	mov	r0, r3
   856fc:	3718      	adds	r7, #24
   856fe:	46bd      	mov	sp, r7
   85700:	bd80      	pop	{r7, pc}
   85702:	bf00      	nop
   85704:	2007a6d4 	.word	0x2007a6d4
   85708:	00085631 	.word	0x00085631
   8570c:	400b4000 	.word	0x400b4000
   85710:	000819fd 	.word	0x000819fd
   85714:	1ffc0000 	.word	0x1ffc0000
   85718:	00081be1 	.word	0x00081be1
   8571c:	00081971 	.word	0x00081971

00085720 <send_can_command>:
/* @Purpose: This function sends an 8 byte message to the SSM chosen. 	*/
/* @return: 1 == completed, (<=0) == failure.							*/
/* @NOTE: 1 != Success (Necessarily) 									*/
/************************************************************************/
int send_can_command(uint32_t low, uint8_t byte_four, uint8_t sender_id, uint8_t ssm_id, uint8_t smalltype, uint8_t priority)
{	
   85720:	b590      	push	{r4, r7, lr}
   85722:	b087      	sub	sp, #28
   85724:	af00      	add	r7, sp, #0
   85726:	6078      	str	r0, [r7, #4]
   85728:	70f9      	strb	r1, [r7, #3]
   8572a:	70ba      	strb	r2, [r7, #2]
   8572c:	707b      	strb	r3, [r7, #1]
	uint32_t timeout = 8400;		// ~ 100 us timeout.
   8572e:	f242 03d0 	movw	r3, #8400	; 0x20d0
   85732:	60fb      	str	r3, [r7, #12]
	uint32_t id, ret_val, high;
	
	if(ssm_id == COMS_ID)
   85734:	787b      	ldrb	r3, [r7, #1]
   85736:	2b00      	cmp	r3, #0
   85738:	d101      	bne.n	8573e <send_can_command+0x1e>
		id = SUB0_ID0;
   8573a:	2314      	movs	r3, #20
   8573c:	617b      	str	r3, [r7, #20]
	if(ssm_id == EPS_ID)
   8573e:	787b      	ldrb	r3, [r7, #1]
   85740:	2b01      	cmp	r3, #1
   85742:	d101      	bne.n	85748 <send_can_command+0x28>
		id = SUB1_ID0;
   85744:	231a      	movs	r3, #26
   85746:	617b      	str	r3, [r7, #20]
	if(ssm_id == PAY_ID)
   85748:	787b      	ldrb	r3, [r7, #1]
   8574a:	2b02      	cmp	r3, #2
   8574c:	d101      	bne.n	85752 <send_can_command+0x32>
		id = SUB2_ID0;
   8574e:	2320      	movs	r3, #32
   85750:	617b      	str	r3, [r7, #20]
		
	high = high_command_generator(sender_id, ssm_id, MT_COM, smalltype);
   85752:	78b9      	ldrb	r1, [r7, #2]
   85754:	787a      	ldrb	r2, [r7, #1]
   85756:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   8575a:	4608      	mov	r0, r1
   8575c:	4611      	mov	r1, r2
   8575e:	2202      	movs	r2, #2
   85760:	4c16      	ldr	r4, [pc, #88]	; (857bc <send_can_command+0x9c>)
   85762:	47a0      	blx	r4
   85764:	6138      	str	r0, [r7, #16]
	if(byte_four)
   85766:	78fb      	ldrb	r3, [r7, #3]
   85768:	2b00      	cmp	r3, #0
   8576a:	d003      	beq.n	85774 <send_can_command+0x54>
		high &= (uint32_t)byte_four;
   8576c:	78fb      	ldrb	r3, [r7, #3]
   8576e:	693a      	ldr	r2, [r7, #16]
   85770:	4013      	ands	r3, r2
   85772:	613b      	str	r3, [r7, #16]

	if (xSemaphoreTake(Can0_Mutex, (TickType_t) 1) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   85774:	4b12      	ldr	r3, [pc, #72]	; (857c0 <send_can_command+0xa0>)
   85776:	681b      	ldr	r3, [r3, #0]
   85778:	4618      	mov	r0, r3
   8577a:	2100      	movs	r1, #0
   8577c:	2201      	movs	r2, #1
   8577e:	2300      	movs	r3, #0
   85780:	4c10      	ldr	r4, [pc, #64]	; (857c4 <send_can_command+0xa4>)
   85782:	47a0      	blx	r4
   85784:	4603      	mov	r3, r0
   85786:	2b01      	cmp	r3, #1
   85788:	d111      	bne.n	857ae <send_can_command+0x8e>
	{
		ret_val = send_can_command_h(low, high, id, priority);
   8578a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   8578e:	6878      	ldr	r0, [r7, #4]
   85790:	6939      	ldr	r1, [r7, #16]
   85792:	697a      	ldr	r2, [r7, #20]
   85794:	4c0c      	ldr	r4, [pc, #48]	; (857c8 <send_can_command+0xa8>)
   85796:	47a0      	blx	r4
   85798:	60b8      	str	r0, [r7, #8]
		xSemaphoreGive(Can0_Mutex);
   8579a:	4b09      	ldr	r3, [pc, #36]	; (857c0 <send_can_command+0xa0>)
   8579c:	681b      	ldr	r3, [r3, #0]
   8579e:	4618      	mov	r0, r3
   857a0:	2100      	movs	r1, #0
   857a2:	2200      	movs	r2, #0
   857a4:	2300      	movs	r3, #0
   857a6:	4c09      	ldr	r4, [pc, #36]	; (857cc <send_can_command+0xac>)
   857a8:	47a0      	blx	r4
		return (int)ret_val;
   857aa:	68bb      	ldr	r3, [r7, #8]
   857ac:	e001      	b.n	857b2 <send_can_command+0x92>
	}
	
	else
		return -1;												// CAN0 is currently busy, or something has gone wrong.
   857ae:	f04f 33ff 	mov.w	r3, #4294967295
}
   857b2:	4618      	mov	r0, r3
   857b4:	371c      	adds	r7, #28
   857b6:	46bd      	mov	sp, r7
   857b8:	bd90      	pop	{r4, r7, pc}
   857ba:	bf00      	nop
   857bc:	00085d25 	.word	0x00085d25
   857c0:	2007a718 	.word	0x2007a718
   857c4:	0008380d 	.word	0x0008380d
   857c8:	00085689 	.word	0x00085689
   857cc:	0008354d 	.word	0x0008354d

000857d0 <read_can_data>:
/* @Purpose: This function returns a CAN message curerntly residing in 	*/
/* the can_data_fifo queue. 											*/
/* @return: 1 == successful, 0 == failure.								*/
/************************************************************************/
uint32_t read_can_data(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   857d0:	b590      	push	{r4, r7, lr}
   857d2:	b085      	sub	sp, #20
   857d4:	af00      	add	r7, sp, #0
   857d6:	60f8      	str	r0, [r7, #12]
   857d8:	60b9      	str	r1, [r7, #8]
   857da:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.
	if (access_code == 1234)
   857dc:	687a      	ldr	r2, [r7, #4]
   857de:	f240 43d2 	movw	r3, #1234	; 0x4d2
   857e2:	429a      	cmp	r2, r3
   857e4:	d11d      	bne.n	85822 <read_can_data+0x52>
	{
		if(xQueueReceive(can_data_fifo, message_low, (TickType_t) 1) == pdTRUE)
   857e6:	4b12      	ldr	r3, [pc, #72]	; (85830 <read_can_data+0x60>)
   857e8:	681b      	ldr	r3, [r3, #0]
   857ea:	4618      	mov	r0, r3
   857ec:	68b9      	ldr	r1, [r7, #8]
   857ee:	2201      	movs	r2, #1
   857f0:	2300      	movs	r3, #0
   857f2:	4c10      	ldr	r4, [pc, #64]	; (85834 <read_can_data+0x64>)
   857f4:	47a0      	blx	r4
   857f6:	4603      	mov	r3, r0
   857f8:	2b01      	cmp	r3, #1
   857fa:	d10f      	bne.n	8581c <read_can_data+0x4c>
		{
			if(xQueueReceive(can_data_fifo, message_high, (TickType_t) 1) == pdTRUE)
   857fc:	4b0c      	ldr	r3, [pc, #48]	; (85830 <read_can_data+0x60>)
   857fe:	681b      	ldr	r3, [r3, #0]
   85800:	4618      	mov	r0, r3
   85802:	68f9      	ldr	r1, [r7, #12]
   85804:	2201      	movs	r2, #1
   85806:	2300      	movs	r3, #0
   85808:	4c0a      	ldr	r4, [pc, #40]	; (85834 <read_can_data+0x64>)
   8580a:	47a0      	blx	r4
   8580c:	4603      	mov	r3, r0
   8580e:	2b01      	cmp	r3, #1
   85810:	d101      	bne.n	85816 <read_can_data+0x46>
			{
				return 1;
   85812:	2301      	movs	r3, #1
   85814:	e007      	b.n	85826 <read_can_data+0x56>
			}
			else
				return -1;
   85816:	f04f 33ff 	mov.w	r3, #4294967295
   8581a:	e004      	b.n	85826 <read_can_data+0x56>
		}
		else
			return -1;
   8581c:	f04f 33ff 	mov.w	r3, #4294967295
   85820:	e001      	b.n	85826 <read_can_data+0x56>
	}
	return -1;
   85822:	f04f 33ff 	mov.w	r3, #4294967295
}
   85826:	4618      	mov	r0, r3
   85828:	3714      	adds	r7, #20
   8582a:	46bd      	mov	sp, r7
   8582c:	bd90      	pop	{r4, r7, pc}
   8582e:	bf00      	nop
   85830:	2007a690 	.word	0x2007a690
   85834:	0008380d 	.word	0x0008380d

00085838 <read_can_msg>:
/* @Purpose: This function returns a CAN message curerntly residing in 	*/
/* the can_msg_fifo queue. 												*/
/* @return: 1 == successful, 0 == failure.								*/
/************************************************************************/
uint32_t read_can_msg(uint32_t* message_high, uint32_t* message_low, uint32_t access_code)
{
   85838:	b590      	push	{r4, r7, lr}
   8583a:	b085      	sub	sp, #20
   8583c:	af00      	add	r7, sp, #0
   8583e:	60f8      	str	r0, [r7, #12]
   85840:	60b9      	str	r1, [r7, #8]
   85842:	607a      	str	r2, [r7, #4]
	// *** Implement an assert here on access_code.
	if (access_code == 1234)
   85844:	687a      	ldr	r2, [r7, #4]
   85846:	f240 43d2 	movw	r3, #1234	; 0x4d2
   8584a:	429a      	cmp	r2, r3
   8584c:	d11d      	bne.n	8588a <read_can_msg+0x52>
	{
		if(xQueueReceive(can_msg_fifo, message_low, (TickType_t) 1) == pdTRUE)
   8584e:	4b12      	ldr	r3, [pc, #72]	; (85898 <read_can_msg+0x60>)
   85850:	681b      	ldr	r3, [r3, #0]
   85852:	4618      	mov	r0, r3
   85854:	68b9      	ldr	r1, [r7, #8]
   85856:	2201      	movs	r2, #1
   85858:	2300      	movs	r3, #0
   8585a:	4c10      	ldr	r4, [pc, #64]	; (8589c <read_can_msg+0x64>)
   8585c:	47a0      	blx	r4
   8585e:	4603      	mov	r3, r0
   85860:	2b01      	cmp	r3, #1
   85862:	d10f      	bne.n	85884 <read_can_msg+0x4c>
		{
			if(xQueueReceive(can_msg_fifo, message_high, (TickType_t) 1) == pdTRUE)
   85864:	4b0c      	ldr	r3, [pc, #48]	; (85898 <read_can_msg+0x60>)
   85866:	681b      	ldr	r3, [r3, #0]
   85868:	4618      	mov	r0, r3
   8586a:	68f9      	ldr	r1, [r7, #12]
   8586c:	2201      	movs	r2, #1
   8586e:	2300      	movs	r3, #0
   85870:	4c0a      	ldr	r4, [pc, #40]	; (8589c <read_can_msg+0x64>)
   85872:	47a0      	blx	r4
   85874:	4603      	mov	r3, r0
   85876:	2b01      	cmp	r3, #1
   85878:	d101      	bne.n	8587e <read_can_msg+0x46>
			{
				return 1;
   8587a:	2301      	movs	r3, #1
   8587c:	e007      	b.n	8588e <read_can_msg+0x56>
			}
			else
				return -1;
   8587e:	f04f 33ff 	mov.w	r3, #4294967295
   85882:	e004      	b.n	8588e <read_can_msg+0x56>
		}
		else
			return -1;
   85884:	f04f 33ff 	mov.w	r3, #4294967295
   85888:	e001      	b.n	8588e <read_can_msg+0x56>
	}
	return -1;
   8588a:	f04f 33ff 	mov.w	r3, #4294967295
}
   8588e:	4618      	mov	r0, r3
   85890:	3714      	adds	r7, #20
   85892:	46bd      	mov	sp, r7
   85894:	bd90      	pop	{r4, r7, pc}
   85896:	bf00      	nop
   85898:	2007a72c 	.word	0x2007a72c
   8589c:	0008380d 	.word	0x0008380d

000858a0 <save_can_object>:
/* the one that enables the functionality you want.						*/
/* @Purpose: The function takes all the attributes of the original		*/
/* object and stores them in the temp object.							*/
/************************************************************************/
void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   858a0:	b480      	push	{r7}
   858a2:	b083      	sub	sp, #12
   858a4:	af00      	add	r7, sp, #0
   858a6:	6078      	str	r0, [r7, #4]
   858a8:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   858aa:	687b      	ldr	r3, [r7, #4]
   858ac:	681a      	ldr	r2, [r3, #0]
   858ae:	683b      	ldr	r3, [r7, #0]
   858b0:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   858b2:	687b      	ldr	r3, [r7, #4]
   858b4:	791a      	ldrb	r2, [r3, #4]
   858b6:	683b      	ldr	r3, [r7, #0]
   858b8:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   858ba:	687b      	ldr	r3, [r7, #4]
   858bc:	795a      	ldrb	r2, [r3, #5]
   858be:	683b      	ldr	r3, [r7, #0]
   858c0:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   858c2:	687b      	ldr	r3, [r7, #4]
   858c4:	799a      	ldrb	r2, [r3, #6]
   858c6:	683b      	ldr	r3, [r7, #0]
   858c8:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   858ca:	687b      	ldr	r3, [r7, #4]
   858cc:	79da      	ldrb	r2, [r3, #7]
   858ce:	683b      	ldr	r3, [r7, #0]
   858d0:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   858d2:	687b      	ldr	r3, [r7, #4]
   858d4:	689a      	ldr	r2, [r3, #8]
   858d6:	683b      	ldr	r3, [r7, #0]
   858d8:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   858da:	687b      	ldr	r3, [r7, #4]
   858dc:	68da      	ldr	r2, [r3, #12]
   858de:	683b      	ldr	r3, [r7, #0]
   858e0:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   858e2:	687b      	ldr	r3, [r7, #4]
   858e4:	691a      	ldr	r2, [r3, #16]
   858e6:	683b      	ldr	r3, [r7, #0]
   858e8:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   858ea:	687b      	ldr	r3, [r7, #4]
   858ec:	695a      	ldr	r2, [r3, #20]
   858ee:	683b      	ldr	r3, [r7, #0]
   858f0:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   858f2:	687b      	ldr	r3, [r7, #4]
   858f4:	699a      	ldr	r2, [r3, #24]
   858f6:	683b      	ldr	r3, [r7, #0]
   858f8:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   858fa:	687b      	ldr	r3, [r7, #4]
   858fc:	69da      	ldr	r2, [r3, #28]
   858fe:	683b      	ldr	r3, [r7, #0]
   85900:	61da      	str	r2, [r3, #28]
	
	return;
   85902:	bf00      	nop
}
   85904:	370c      	adds	r7, #12
   85906:	46bd      	mov	sp, r7
   85908:	f85d 7b04 	ldr.w	r7, [sp], #4
   8590c:	4770      	bx	lr
   8590e:	bf00      	nop

00085910 <restore_can_object>:
/* @param: *temp: A pointer to what was the temporary CAN object.		*/
/* @Purpose: This function replaces all the attributes of the "original"*/
/* object with all the attributes in the "temp" object.					*/
/************************************************************************/
void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85910:	b480      	push	{r7}
   85912:	b083      	sub	sp, #12
   85914:	af00      	add	r7, sp, #0
   85916:	6078      	str	r0, [r7, #4]
   85918:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   8591a:	683b      	ldr	r3, [r7, #0]
   8591c:	681a      	ldr	r2, [r3, #0]
   8591e:	687b      	ldr	r3, [r7, #4]
   85920:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   85922:	683b      	ldr	r3, [r7, #0]
   85924:	791a      	ldrb	r2, [r3, #4]
   85926:	687b      	ldr	r3, [r7, #4]
   85928:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   8592a:	683b      	ldr	r3, [r7, #0]
   8592c:	795a      	ldrb	r2, [r3, #5]
   8592e:	687b      	ldr	r3, [r7, #4]
   85930:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   85932:	683b      	ldr	r3, [r7, #0]
   85934:	799a      	ldrb	r2, [r3, #6]
   85936:	687b      	ldr	r3, [r7, #4]
   85938:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   8593a:	683b      	ldr	r3, [r7, #0]
   8593c:	79da      	ldrb	r2, [r3, #7]
   8593e:	687b      	ldr	r3, [r7, #4]
   85940:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   85942:	683b      	ldr	r3, [r7, #0]
   85944:	689a      	ldr	r2, [r3, #8]
   85946:	687b      	ldr	r3, [r7, #4]
   85948:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   8594a:	683b      	ldr	r3, [r7, #0]
   8594c:	68da      	ldr	r2, [r3, #12]
   8594e:	687b      	ldr	r3, [r7, #4]
   85950:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85952:	683b      	ldr	r3, [r7, #0]
   85954:	691a      	ldr	r2, [r3, #16]
   85956:	687b      	ldr	r3, [r7, #4]
   85958:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   8595a:	683b      	ldr	r3, [r7, #0]
   8595c:	695a      	ldr	r2, [r3, #20]
   8595e:	687b      	ldr	r3, [r7, #4]
   85960:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   85962:	683b      	ldr	r3, [r7, #0]
   85964:	699a      	ldr	r2, [r3, #24]
   85966:	687b      	ldr	r3, [r7, #4]
   85968:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   8596a:	683b      	ldr	r3, [r7, #0]
   8596c:	69da      	ldr	r2, [r3, #28]
   8596e:	687b      	ldr	r3, [r7, #4]
   85970:	61da      	str	r2, [r3, #28]
	
	return;
   85972:	bf00      	nop
}
   85974:	370c      	adds	r7, #12
   85976:	46bd      	mov	sp, r7
   85978:	f85d 7b04 	ldr.w	r7, [sp], #4
   8597c:	4770      	bx	lr
   8597e:	bf00      	nop

00085980 <can_initialize>:
/* CAN_INITIALIZE 			                                            */
/* @Purpose: Initializes and enables CAN0 & CAN1 controllers and clocks.*/
/* CAN0/CAN1 mailboxes are reset and interrupts are disabled.			*/
/************************************************************************/
void can_initialize(void)
{
   85980:	b580      	push	{r7, lr}
   85982:	b086      	sub	sp, #24
   85984:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   85986:	2301      	movs	r3, #1
   85988:	613b      	str	r3, [r7, #16]
   8598a:	2300      	movs	r3, #0
   8598c:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8598e:	202b      	movs	r0, #43	; 0x2b
   85990:	4b6d      	ldr	r3, [pc, #436]	; (85b48 <can_initialize+0x1c8>)
   85992:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   85994:	202c      	movs	r0, #44	; 0x2c
   85996:	4b6c      	ldr	r3, [pc, #432]	; (85b48 <can_initialize+0x1c8>)
   85998:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   8599a:	4b6c      	ldr	r3, [pc, #432]	; (85b4c <can_initialize+0x1cc>)
   8599c:	4798      	blx	r3
   8599e:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   859a0:	486b      	ldr	r0, [pc, #428]	; (85b50 <can_initialize+0x1d0>)
   859a2:	68f9      	ldr	r1, [r7, #12]
   859a4:	22fa      	movs	r2, #250	; 0xfa
   859a6:	4b6b      	ldr	r3, [pc, #428]	; (85b54 <can_initialize+0x1d4>)
   859a8:	4798      	blx	r3
   859aa:	4603      	mov	r3, r0
   859ac:	2b00      	cmp	r3, #0
   859ae:	f000 80c7 	beq.w	85b40 <can_initialize+0x1c0>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   859b2:	4869      	ldr	r0, [pc, #420]	; (85b58 <can_initialize+0x1d8>)
   859b4:	68f9      	ldr	r1, [r7, #12]
   859b6:	22fa      	movs	r2, #250	; 0xfa
   859b8:	4b66      	ldr	r3, [pc, #408]	; (85b54 <can_initialize+0x1d4>)
   859ba:	4798      	blx	r3
   859bc:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   859be:	2b00      	cmp	r3, #0
   859c0:	f000 80be 	beq.w	85b40 <can_initialize+0x1c0>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   859c4:	4862      	ldr	r0, [pc, #392]	; (85b50 <can_initialize+0x1d0>)
   859c6:	f04f 31ff 	mov.w	r1, #4294967295
   859ca:	4b64      	ldr	r3, [pc, #400]	; (85b5c <can_initialize+0x1dc>)
   859cc:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   859ce:	4862      	ldr	r0, [pc, #392]	; (85b58 <can_initialize+0x1d8>)
   859d0:	f04f 31ff 	mov.w	r1, #4294967295
   859d4:	4b61      	ldr	r3, [pc, #388]	; (85b5c <can_initialize+0x1dc>)
   859d6:	4798      	blx	r3

		NVIC_EnableIRQ(CAN1_IRQn);
   859d8:	202c      	movs	r0, #44	; 0x2c
   859da:	4b61      	ldr	r3, [pc, #388]	; (85b60 <can_initialize+0x1e0>)
   859dc:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   859de:	485c      	ldr	r0, [pc, #368]	; (85b50 <can_initialize+0x1d0>)
   859e0:	4b60      	ldr	r3, [pc, #384]	; (85b64 <can_initialize+0x1e4>)
   859e2:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   859e4:	485c      	ldr	r0, [pc, #368]	; (85b58 <can_initialize+0x1d8>)
   859e6:	4b5f      	ldr	r3, [pc, #380]	; (85b64 <can_initialize+0x1e4>)
   859e8:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   859ea:	6938      	ldr	r0, [r7, #16]
   859ec:	4b5e      	ldr	r3, [pc, #376]	; (85b68 <can_initialize+0x1e8>)
   859ee:	4798      	blx	r3
   859f0:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   859f2:	4b5e      	ldr	r3, [pc, #376]	; (85b6c <can_initialize+0x1ec>)
   859f4:	2200      	movs	r2, #0
   859f6:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   859f8:	4b5d      	ldr	r3, [pc, #372]	; (85b70 <can_initialize+0x1f0>)
   859fa:	2200      	movs	r2, #0
   859fc:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   859fe:	4b5d      	ldr	r3, [pc, #372]	; (85b74 <can_initialize+0x1f4>)
   85a00:	2200      	movs	r2, #0
   85a02:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   85a04:	4b5c      	ldr	r3, [pc, #368]	; (85b78 <can_initialize+0x1f8>)
   85a06:	2200      	movs	r2, #0
   85a08:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   85a0a:	4b5c      	ldr	r3, [pc, #368]	; (85b7c <can_initialize+0x1fc>)
   85a0c:	2200      	movs	r2, #0
   85a0e:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   85a10:	4b5b      	ldr	r3, [pc, #364]	; (85b80 <can_initialize+0x200>)
   85a12:	2200      	movs	r2, #0
   85a14:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85a16:	2300      	movs	r3, #0
   85a18:	617b      	str	r3, [r7, #20]
   85a1a:	e016      	b.n	85a4a <can_initialize+0xca>
		{
			glob_stored_data[i] = 0;
   85a1c:	4b59      	ldr	r3, [pc, #356]	; (85b84 <can_initialize+0x204>)
   85a1e:	697a      	ldr	r2, [r7, #20]
   85a20:	2100      	movs	r1, #0
   85a22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   85a26:	4b58      	ldr	r3, [pc, #352]	; (85b88 <can_initialize+0x208>)
   85a28:	697a      	ldr	r2, [r7, #20]
   85a2a:	2100      	movs	r1, #0
   85a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   85a30:	4b56      	ldr	r3, [pc, #344]	; (85b8c <can_initialize+0x20c>)
   85a32:	697a      	ldr	r2, [r7, #20]
   85a34:	2100      	movs	r1, #0
   85a36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   85a3a:	4b55      	ldr	r3, [pc, #340]	; (85b90 <can_initialize+0x210>)
   85a3c:	697a      	ldr	r2, [r7, #20]
   85a3e:	2100      	movs	r1, #0
   85a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85a44:	697b      	ldr	r3, [r7, #20]
   85a46:	3301      	adds	r3, #1
   85a48:	617b      	str	r3, [r7, #20]
   85a4a:	697b      	ldr	r3, [r7, #20]
   85a4c:	2b01      	cmp	r3, #1
   85a4e:	d9e5      	bls.n	85a1c <can_initialize+0x9c>
			glob_stored_message[i] = 0;
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}

		tm_transfer_completef = 0;
   85a50:	4b50      	ldr	r3, [pc, #320]	; (85b94 <can_initialize+0x214>)
   85a52:	2200      	movs	r2, #0
   85a54:	701a      	strb	r2, [r3, #0]
		start_tm_transferf = 0;
   85a56:	4b50      	ldr	r3, [pc, #320]	; (85b98 <can_initialize+0x218>)
   85a58:	2200      	movs	r2, #0
   85a5a:	701a      	strb	r2, [r3, #0]
		current_tc_fullf = 0;
   85a5c:	4b4f      	ldr	r3, [pc, #316]	; (85b9c <can_initialize+0x21c>)
   85a5e:	2200      	movs	r2, #0
   85a60:	701a      	strb	r2, [r3, #0]
		receiving_tcf = 0;
   85a62:	4b4f      	ldr	r3, [pc, #316]	; (85ba0 <can_initialize+0x220>)
   85a64:	2200      	movs	r2, #0
   85a66:	701a      	strb	r2, [r3, #0]
		
		/* Initialize global CAN FIFOs					*/
		fifo_length = 100;		// Max number of items in the FIFO.
   85a68:	2364      	movs	r3, #100	; 0x64
   85a6a:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items.
   85a6c:	2304      	movs	r3, #4
   85a6e:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   85a70:	68b8      	ldr	r0, [r7, #8]
   85a72:	6879      	ldr	r1, [r7, #4]
   85a74:	2200      	movs	r2, #0
   85a76:	4b4b      	ldr	r3, [pc, #300]	; (85ba4 <can_initialize+0x224>)
   85a78:	4798      	blx	r3
   85a7a:	4602      	mov	r2, r0
   85a7c:	4b4a      	ldr	r3, [pc, #296]	; (85ba8 <can_initialize+0x228>)
   85a7e:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   85a80:	68b8      	ldr	r0, [r7, #8]
   85a82:	6879      	ldr	r1, [r7, #4]
   85a84:	2200      	movs	r2, #0
   85a86:	4b47      	ldr	r3, [pc, #284]	; (85ba4 <can_initialize+0x224>)
   85a88:	4798      	blx	r3
   85a8a:	4602      	mov	r2, r0
   85a8c:	4b47      	ldr	r3, [pc, #284]	; (85bac <can_initialize+0x22c>)
   85a8e:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   85a90:	68b8      	ldr	r0, [r7, #8]
   85a92:	6879      	ldr	r1, [r7, #4]
   85a94:	2200      	movs	r2, #0
   85a96:	4b43      	ldr	r3, [pc, #268]	; (85ba4 <can_initialize+0x224>)
   85a98:	4798      	blx	r3
   85a9a:	4602      	mov	r2, r0
   85a9c:	4b44      	ldr	r3, [pc, #272]	; (85bb0 <can_initialize+0x230>)
   85a9e:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   85aa0:	68b8      	ldr	r0, [r7, #8]
   85aa2:	6879      	ldr	r1, [r7, #4]
   85aa4:	2200      	movs	r2, #0
   85aa6:	4b3f      	ldr	r3, [pc, #252]	; (85ba4 <can_initialize+0x224>)
   85aa8:	4798      	blx	r3
   85aaa:	4602      	mov	r2, r0
   85aac:	4b41      	ldr	r3, [pc, #260]	; (85bb4 <can_initialize+0x234>)
   85aae:	601a      	str	r2, [r3, #0]
		tc_msg_fifo = xQueueCreate(fifo_length, item_size);
   85ab0:	68b8      	ldr	r0, [r7, #8]
   85ab2:	6879      	ldr	r1, [r7, #4]
   85ab4:	2200      	movs	r2, #0
   85ab6:	4b3b      	ldr	r3, [pc, #236]	; (85ba4 <can_initialize+0x224>)
   85ab8:	4798      	blx	r3
   85aba:	4602      	mov	r2, r0
   85abc:	4b3e      	ldr	r3, [pc, #248]	; (85bb8 <can_initialize+0x238>)
   85abe:	601a      	str	r2, [r3, #0]

		/* Initialize global PUS Packet FIFOs			*/
		fifo_length = 4;			// Max number of items in the FIFO.
   85ac0:	2304      	movs	r3, #4
   85ac2:	60bb      	str	r3, [r7, #8]
		item_size = 147;			// Number of bytes in the items
   85ac4:	2393      	movs	r3, #147	; 0x93
   85ac6:	607b      	str	r3, [r7, #4]
		hk_to_obc_fifo = xQueueCreate(fifo_length, item_size);
   85ac8:	68b8      	ldr	r0, [r7, #8]
   85aca:	6879      	ldr	r1, [r7, #4]
   85acc:	2200      	movs	r2, #0
   85ace:	4b35      	ldr	r3, [pc, #212]	; (85ba4 <can_initialize+0x224>)
   85ad0:	4798      	blx	r3
   85ad2:	4602      	mov	r2, r0
   85ad4:	4b39      	ldr	r3, [pc, #228]	; (85bbc <can_initialize+0x23c>)
   85ad6:	601a      	str	r2, [r3, #0]
		mem_to_obc_fifo = xQueueCreate(fifo_length, item_size);
   85ad8:	68b8      	ldr	r0, [r7, #8]
   85ada:	6879      	ldr	r1, [r7, #4]
   85adc:	2200      	movs	r2, #0
   85ade:	4b31      	ldr	r3, [pc, #196]	; (85ba4 <can_initialize+0x224>)
   85ae0:	4798      	blx	r3
   85ae2:	4602      	mov	r2, r0
   85ae4:	4b36      	ldr	r3, [pc, #216]	; (85bc0 <can_initialize+0x240>)
   85ae6:	601a      	str	r2, [r3, #0]
		fifo_length = 4;
   85ae8:	2304      	movs	r3, #4
   85aea:	60bb      	str	r3, [r7, #8]
		item_size = 4;
   85aec:	2304      	movs	r3, #4
   85aee:	607b      	str	r3, [r7, #4]
		time_to_obc_fifo = xQueueCreate(fifo_length, item_size);
   85af0:	68b8      	ldr	r0, [r7, #8]
   85af2:	6879      	ldr	r1, [r7, #4]
   85af4:	2200      	movs	r2, #0
   85af6:	4b2b      	ldr	r3, [pc, #172]	; (85ba4 <can_initialize+0x224>)
   85af8:	4798      	blx	r3
   85afa:	4602      	mov	r2, r0
   85afc:	4b31      	ldr	r3, [pc, #196]	; (85bc4 <can_initialize+0x244>)
   85afe:	601a      	str	r2, [r3, #0]

		/* Initialize global Command FIFOs				*/
		fifo_length = 4;
   85b00:	2304      	movs	r3, #4
   85b02:	60bb      	str	r3, [r7, #8]
		item_size = 147;
   85b04:	2393      	movs	r3, #147	; 0x93
   85b06:	607b      	str	r3, [r7, #4]
		obc_to_hk_fifo = xQueueCreate(fifo_length, item_size);
   85b08:	68b8      	ldr	r0, [r7, #8]
   85b0a:	6879      	ldr	r1, [r7, #4]
   85b0c:	2200      	movs	r2, #0
   85b0e:	4b25      	ldr	r3, [pc, #148]	; (85ba4 <can_initialize+0x224>)
   85b10:	4798      	blx	r3
   85b12:	4602      	mov	r2, r0
   85b14:	4b2c      	ldr	r3, [pc, #176]	; (85bc8 <can_initialize+0x248>)
   85b16:	601a      	str	r2, [r3, #0]
		obc_to_mem_fifo = xQueueCreate(fifo_length, item_size);
   85b18:	68b8      	ldr	r0, [r7, #8]
   85b1a:	6879      	ldr	r1, [r7, #4]
   85b1c:	2200      	movs	r2, #0
   85b1e:	4b21      	ldr	r3, [pc, #132]	; (85ba4 <can_initialize+0x224>)
   85b20:	4798      	blx	r3
   85b22:	4602      	mov	r2, r0
   85b24:	4b29      	ldr	r3, [pc, #164]	; (85bcc <can_initialize+0x24c>)
   85b26:	601a      	str	r2, [r3, #0]
		fifo_length	 = 4;
   85b28:	2304      	movs	r3, #4
   85b2a:	60bb      	str	r3, [r7, #8]
		item_size = 2;
   85b2c:	2302      	movs	r3, #2
   85b2e:	607b      	str	r3, [r7, #4]
		obc_to_time_fifo = xQueueCreate(fifo_length, item_size);
   85b30:	68b8      	ldr	r0, [r7, #8]
   85b32:	6879      	ldr	r1, [r7, #4]
   85b34:	2200      	movs	r2, #0
   85b36:	4b1b      	ldr	r3, [pc, #108]	; (85ba4 <can_initialize+0x224>)
   85b38:	4798      	blx	r3
   85b3a:	4602      	mov	r2, r0
   85b3c:	4b24      	ldr	r3, [pc, #144]	; (85bd0 <can_initialize+0x250>)
   85b3e:	601a      	str	r2, [r3, #0]

		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   85b40:	bf00      	nop
}
   85b42:	3718      	adds	r7, #24
   85b44:	46bd      	mov	sp, r7
   85b46:	bd80      	pop	{r7, pc}
   85b48:	00082509 	.word	0x00082509
   85b4c:	00085139 	.word	0x00085139
   85b50:	400b4000 	.word	0x400b4000
   85b54:	00081859 	.word	0x00081859
   85b58:	400b8000 	.word	0x400b8000
   85b5c:	0008193d 	.word	0x0008193d
   85b60:	00085079 	.word	0x00085079
   85b64:	00081c99 	.word	0x00081c99
   85b68:	00085bd5 	.word	0x00085bd5
   85b6c:	2007a678 	.word	0x2007a678
   85b70:	2007a67b 	.word	0x2007a67b
   85b74:	2007a70d 	.word	0x2007a70d
   85b78:	2007a654 	.word	0x2007a654
   85b7c:	2007a6c0 	.word	0x2007a6c0
   85b80:	2007a67c 	.word	0x2007a67c
   85b84:	2007a64c 	.word	0x2007a64c
   85b88:	2007a724 	.word	0x2007a724
   85b8c:	2007a688 	.word	0x2007a688
   85b90:	2007a6cc 	.word	0x2007a6cc
   85b94:	2007a704 	.word	0x2007a704
   85b98:	2007a67a 	.word	0x2007a67a
   85b9c:	2007a63c 	.word	0x2007a63c
   85ba0:	2007a644 	.word	0x2007a644
   85ba4:	000834c1 	.word	0x000834c1
   85ba8:	2007a690 	.word	0x2007a690
   85bac:	2007a72c 	.word	0x2007a72c
   85bb0:	2007a648 	.word	0x2007a648
   85bb4:	2007a710 	.word	0x2007a710
   85bb8:	2007a708 	.word	0x2007a708
   85bbc:	2007a6b4 	.word	0x2007a6b4
   85bc0:	2007a750 	.word	0x2007a750
   85bc4:	2007a6fc 	.word	0x2007a6fc
   85bc8:	2007a640 	.word	0x2007a640
   85bcc:	2007a720 	.word	0x2007a720
   85bd0:	2007a754 	.word	0x2007a754

00085bd4 <can_init_mailboxes>:
/* @param: x: simply meant to be to confirm that this function was 		*/
/* called naturally.													*/
/* @Purpose: This function initializes the CAN mailboxes for use.		*/
/************************************************************************/
uint32_t can_init_mailboxes(uint32_t x)
{
   85bd4:	b580      	push	{r7, lr}
   85bd6:	b082      	sub	sp, #8
   85bd8:	af00      	add	r7, sp, #0
   85bda:	6078      	str	r0, [r7, #4]
	//configASSERT(x);	//Check if this function was called naturally.

	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */
	/* CAN0 MB7 == COMMAND/MSG MB				*/	
	reset_mailbox_conf(&can0_mailbox);
   85bdc:	484a      	ldr	r0, [pc, #296]	; (85d08 <can_init_mailboxes+0x134>)
   85bde:	4b4b      	ldr	r3, [pc, #300]	; (85d0c <can_init_mailboxes+0x138>)
   85be0:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85be2:	4b49      	ldr	r3, [pc, #292]	; (85d08 <can_init_mailboxes+0x134>)
   85be4:	2207      	movs	r2, #7
   85be6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85be8:	4b47      	ldr	r3, [pc, #284]	; (85d08 <can_init_mailboxes+0x134>)
   85bea:	2203      	movs	r2, #3
   85bec:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 10;		//Transmission Priority (Can be Changed dynamically)
   85bee:	4b46      	ldr	r3, [pc, #280]	; (85d08 <can_init_mailboxes+0x134>)
   85bf0:	220a      	movs	r2, #10
   85bf2:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85bf4:	4b44      	ldr	r3, [pc, #272]	; (85d08 <can_init_mailboxes+0x134>)
   85bf6:	2200      	movs	r2, #0
   85bf8:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85bfa:	4b43      	ldr	r3, [pc, #268]	; (85d08 <can_init_mailboxes+0x134>)
   85bfc:	2200      	movs	r2, #0
   85bfe:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85c00:	4843      	ldr	r0, [pc, #268]	; (85d10 <can_init_mailboxes+0x13c>)
   85c02:	4941      	ldr	r1, [pc, #260]	; (85d08 <can_init_mailboxes+0x134>)
   85c04:	4b43      	ldr	r3, [pc, #268]	; (85d14 <can_init_mailboxes+0x140>)
   85c06:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85c08:	4843      	ldr	r0, [pc, #268]	; (85d18 <can_init_mailboxes+0x144>)
   85c0a:	4b40      	ldr	r3, [pc, #256]	; (85d0c <can_init_mailboxes+0x138>)
   85c0c:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   85c0e:	4b42      	ldr	r3, [pc, #264]	; (85d18 <can_init_mailboxes+0x144>)
   85c10:	2200      	movs	r2, #0
   85c12:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85c14:	4b40      	ldr	r3, [pc, #256]	; (85d18 <can_init_mailboxes+0x144>)
   85c16:	2201      	movs	r2, #1
   85c18:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85c1a:	4b3f      	ldr	r3, [pc, #252]	; (85d18 <can_init_mailboxes+0x144>)
   85c1c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85c20:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85c22:	4b3d      	ldr	r3, [pc, #244]	; (85d18 <can_init_mailboxes+0x144>)
   85c24:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   85c28:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85c2a:	483c      	ldr	r0, [pc, #240]	; (85d1c <can_init_mailboxes+0x148>)
   85c2c:	493a      	ldr	r1, [pc, #232]	; (85d18 <can_init_mailboxes+0x144>)
   85c2e:	4b39      	ldr	r3, [pc, #228]	; (85d14 <can_init_mailboxes+0x140>)
   85c30:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85c32:	4839      	ldr	r0, [pc, #228]	; (85d18 <can_init_mailboxes+0x144>)
   85c34:	4b35      	ldr	r3, [pc, #212]	; (85d0c <can_init_mailboxes+0x138>)
   85c36:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   85c38:	4b37      	ldr	r3, [pc, #220]	; (85d18 <can_init_mailboxes+0x144>)
   85c3a:	2205      	movs	r2, #5
   85c3c:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85c3e:	4b36      	ldr	r3, [pc, #216]	; (85d18 <can_init_mailboxes+0x144>)
   85c40:	2201      	movs	r2, #1
   85c42:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85c44:	4b34      	ldr	r3, [pc, #208]	; (85d18 <can_init_mailboxes+0x144>)
   85c46:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85c4a:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85c4c:	4b32      	ldr	r3, [pc, #200]	; (85d18 <can_init_mailboxes+0x144>)
   85c4e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   85c52:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85c54:	4831      	ldr	r0, [pc, #196]	; (85d1c <can_init_mailboxes+0x148>)
   85c56:	4930      	ldr	r1, [pc, #192]	; (85d18 <can_init_mailboxes+0x144>)
   85c58:	4b2e      	ldr	r3, [pc, #184]	; (85d14 <can_init_mailboxes+0x140>)
   85c5a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85c5c:	482e      	ldr	r0, [pc, #184]	; (85d18 <can_init_mailboxes+0x144>)
   85c5e:	4b2b      	ldr	r3, [pc, #172]	; (85d0c <can_init_mailboxes+0x138>)
   85c60:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   85c62:	4b2d      	ldr	r3, [pc, #180]	; (85d18 <can_init_mailboxes+0x144>)
   85c64:	2206      	movs	r2, #6
   85c66:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85c68:	4b2b      	ldr	r3, [pc, #172]	; (85d18 <can_init_mailboxes+0x144>)
   85c6a:	2201      	movs	r2, #1
   85c6c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85c6e:	4b2a      	ldr	r3, [pc, #168]	; (85d18 <can_init_mailboxes+0x144>)
   85c70:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85c74:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   85c76:	4b28      	ldr	r3, [pc, #160]	; (85d18 <can_init_mailboxes+0x144>)
   85c78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   85c7c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85c7e:	4827      	ldr	r0, [pc, #156]	; (85d1c <can_init_mailboxes+0x148>)
   85c80:	4925      	ldr	r1, [pc, #148]	; (85d18 <can_init_mailboxes+0x144>)
   85c82:	4b24      	ldr	r3, [pc, #144]	; (85d14 <can_init_mailboxes+0x140>)
   85c84:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85c86:	4824      	ldr	r0, [pc, #144]	; (85d18 <can_init_mailboxes+0x144>)
   85c88:	4b20      	ldr	r3, [pc, #128]	; (85d0c <can_init_mailboxes+0x138>)
   85c8a:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   85c8c:	4b22      	ldr	r3, [pc, #136]	; (85d18 <can_init_mailboxes+0x144>)
   85c8e:	2207      	movs	r2, #7
   85c90:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85c92:	4b21      	ldr	r3, [pc, #132]	; (85d18 <can_init_mailboxes+0x144>)
   85c94:	2201      	movs	r2, #1
   85c96:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85c98:	4b1f      	ldr	r3, [pc, #124]	; (85d18 <can_init_mailboxes+0x144>)
   85c9a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85c9e:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   85ca0:	4b1d      	ldr	r3, [pc, #116]	; (85d18 <can_init_mailboxes+0x144>)
   85ca2:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   85ca6:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85ca8:	481c      	ldr	r0, [pc, #112]	; (85d1c <can_init_mailboxes+0x148>)
   85caa:	491b      	ldr	r1, [pc, #108]	; (85d18 <can_init_mailboxes+0x144>)
   85cac:	4b19      	ldr	r3, [pc, #100]	; (85d14 <can_init_mailboxes+0x140>)
   85cae:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85cb0:	4815      	ldr	r0, [pc, #84]	; (85d08 <can_init_mailboxes+0x134>)
   85cb2:	4b16      	ldr	r3, [pc, #88]	; (85d0c <can_init_mailboxes+0x138>)
   85cb4:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85cb6:	4b14      	ldr	r3, [pc, #80]	; (85d08 <can_init_mailboxes+0x134>)
   85cb8:	2206      	movs	r2, #6
   85cba:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85cbc:	4b12      	ldr	r3, [pc, #72]	; (85d08 <can_init_mailboxes+0x134>)
   85cbe:	2203      	movs	r2, #3
   85cc0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85cc2:	4b11      	ldr	r3, [pc, #68]	; (85d08 <can_init_mailboxes+0x134>)
   85cc4:	2214      	movs	r2, #20
   85cc6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85cc8:	4b0f      	ldr	r3, [pc, #60]	; (85d08 <can_init_mailboxes+0x134>)
   85cca:	2200      	movs	r2, #0
   85ccc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85cce:	4b0e      	ldr	r3, [pc, #56]	; (85d08 <can_init_mailboxes+0x134>)
   85cd0:	2200      	movs	r2, #0
   85cd2:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85cd4:	480e      	ldr	r0, [pc, #56]	; (85d10 <can_init_mailboxes+0x13c>)
   85cd6:	490c      	ldr	r1, [pc, #48]	; (85d08 <can_init_mailboxes+0x134>)
   85cd8:	4b0e      	ldr	r3, [pc, #56]	; (85d14 <can_init_mailboxes+0x140>)
   85cda:	4798      	blx	r3

	can_enable_interrupt(CAN1, CAN_IER_MB0);
   85cdc:	480f      	ldr	r0, [pc, #60]	; (85d1c <can_init_mailboxes+0x148>)
   85cde:	2101      	movs	r1, #1
   85ce0:	4b0f      	ldr	r3, [pc, #60]	; (85d20 <can_init_mailboxes+0x14c>)
   85ce2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   85ce4:	480d      	ldr	r0, [pc, #52]	; (85d1c <can_init_mailboxes+0x148>)
   85ce6:	2120      	movs	r1, #32
   85ce8:	4b0d      	ldr	r3, [pc, #52]	; (85d20 <can_init_mailboxes+0x14c>)
   85cea:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   85cec:	480b      	ldr	r0, [pc, #44]	; (85d1c <can_init_mailboxes+0x148>)
   85cee:	2140      	movs	r1, #64	; 0x40
   85cf0:	4b0b      	ldr	r3, [pc, #44]	; (85d20 <can_init_mailboxes+0x14c>)
   85cf2:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   85cf4:	4809      	ldr	r0, [pc, #36]	; (85d1c <can_init_mailboxes+0x148>)
   85cf6:	2180      	movs	r1, #128	; 0x80
   85cf8:	4b09      	ldr	r3, [pc, #36]	; (85d20 <can_init_mailboxes+0x14c>)
   85cfa:	4798      	blx	r3
	
	return 1;
   85cfc:	2301      	movs	r3, #1
}
   85cfe:	4618      	mov	r0, r3
   85d00:	3708      	adds	r7, #8
   85d02:	46bd      	mov	sp, r7
   85d04:	bd80      	pop	{r7, pc}
   85d06:	bf00      	nop
   85d08:	2007a6d4 	.word	0x2007a6d4
   85d0c:	00085631 	.word	0x00085631
   85d10:	400b4000 	.word	0x400b4000
   85d14:	000819fd 	.word	0x000819fd
   85d18:	2007a658 	.word	0x2007a658
   85d1c:	400b8000 	.word	0x400b8000
   85d20:	00081921 	.word	0x00081921

00085d24 <high_command_generator>:
/* the one that enables the functionality you want.						*/
/* @Purpose: This function is used to generate the upper 4 bytes of all */
/* CAN messages as per the new structure. 								*/
/************************************************************************/
uint32_t high_command_generator(uint8_t sender_id, uint8_t ssm_id, uint8_t MessageType, uint8_t smalltype)
{
   85d24:	b480      	push	{r7}
   85d26:	b087      	sub	sp, #28
   85d28:	af00      	add	r7, sp, #0
   85d2a:	71f8      	strb	r0, [r7, #7]
   85d2c:	71b9      	strb	r1, [r7, #6]
   85d2e:	717a      	strb	r2, [r7, #5]
   85d30:	713b      	strb	r3, [r7, #4]
	uint32_t sender, m_type, s_type, destination;
	
	sender = (uint32_t)sender_id;
   85d32:	79fb      	ldrb	r3, [r7, #7]
   85d34:	617b      	str	r3, [r7, #20]
	sender = sender << 28;
   85d36:	697b      	ldr	r3, [r7, #20]
   85d38:	071b      	lsls	r3, r3, #28
   85d3a:	617b      	str	r3, [r7, #20]
	
	destination = (uint32_t)ssm_id;
   85d3c:	79bb      	ldrb	r3, [r7, #6]
   85d3e:	613b      	str	r3, [r7, #16]
	destination = destination << 24;
   85d40:	693b      	ldr	r3, [r7, #16]
   85d42:	061b      	lsls	r3, r3, #24
   85d44:	613b      	str	r3, [r7, #16]
		
	m_type = (uint32_t)MessageType;
   85d46:	797b      	ldrb	r3, [r7, #5]
   85d48:	60fb      	str	r3, [r7, #12]
	m_type = m_type << 16;
   85d4a:	68fb      	ldr	r3, [r7, #12]
   85d4c:	041b      	lsls	r3, r3, #16
   85d4e:	60fb      	str	r3, [r7, #12]
	
	s_type = (uint32_t)smalltype;
   85d50:	793b      	ldrb	r3, [r7, #4]
   85d52:	60bb      	str	r3, [r7, #8]
	s_type = s_type << 8;
   85d54:	68bb      	ldr	r3, [r7, #8]
   85d56:	021b      	lsls	r3, r3, #8
   85d58:	60bb      	str	r3, [r7, #8]
	
	return sender + destination + m_type + s_type;
   85d5a:	697a      	ldr	r2, [r7, #20]
   85d5c:	693b      	ldr	r3, [r7, #16]
   85d5e:	441a      	add	r2, r3
   85d60:	68fb      	ldr	r3, [r7, #12]
   85d62:	441a      	add	r2, r3
   85d64:	68bb      	ldr	r3, [r7, #8]
   85d66:	4413      	add	r3, r2
}
   85d68:	4618      	mov	r0, r3
   85d6a:	371c      	adds	r7, #28
   85d6c:	46bd      	mov	sp, r7
   85d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85d72:	4770      	bx	lr

00085d74 <start_tc_packet>:
		return -1;					// CAN0 is currently busy or something has gone wrong.
}

// Let the SSM know that you're ready for a TC packet.
static void start_tc_packet(void)
{
   85d74:	b590      	push	{r4, r7, lr}
   85d76:	b083      	sub	sp, #12
   85d78:	af02      	add	r7, sp, #8
	if((!receiving_tcf) && (!current_tc_fullf))
   85d7a:	4b0c      	ldr	r3, [pc, #48]	; (85dac <start_tc_packet+0x38>)
   85d7c:	781b      	ldrb	r3, [r3, #0]
   85d7e:	2b00      	cmp	r3, #0
   85d80:	d10d      	bne.n	85d9e <start_tc_packet+0x2a>
   85d82:	4b0b      	ldr	r3, [pc, #44]	; (85db0 <start_tc_packet+0x3c>)
   85d84:	781b      	ldrb	r3, [r3, #0]
   85d86:	2b00      	cmp	r3, #0
   85d88:	d109      	bne.n	85d9e <start_tc_packet+0x2a>
	{
		send_can_command(0x00, 0x00, OBC_PACKET_ROUTER_ID, COMS_ID, OK_START_TC_PACKET, COMMAND_PRIO);		
   85d8a:	2312      	movs	r3, #18
   85d8c:	9300      	str	r3, [sp, #0]
   85d8e:	2319      	movs	r3, #25
   85d90:	9301      	str	r3, [sp, #4]
   85d92:	2000      	movs	r0, #0
   85d94:	2100      	movs	r1, #0
   85d96:	220a      	movs	r2, #10
   85d98:	2300      	movs	r3, #0
   85d9a:	4c06      	ldr	r4, [pc, #24]	; (85db4 <start_tc_packet+0x40>)
   85d9c:	47a0      	blx	r4
	}
	receiving_tcf = 1;
   85d9e:	4b03      	ldr	r3, [pc, #12]	; (85dac <start_tc_packet+0x38>)
   85da0:	2201      	movs	r2, #1
   85da2:	701a      	strb	r2, [r3, #0]
	return;
   85da4:	bf00      	nop
}
   85da6:	3704      	adds	r7, #4
   85da8:	46bd      	mov	sp, r7
   85daa:	bd90      	pop	{r4, r7, pc}
   85dac:	2007a644 	.word	0x2007a644
   85db0:	2007a63c 	.word	0x2007a63c
   85db4:	00085721 	.word	0x00085721

00085db8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   85db8:	b480      	push	{r7}
   85dba:	b085      	sub	sp, #20
   85dbc:	af00      	add	r7, sp, #0
   85dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   85dc0:	687b      	ldr	r3, [r7, #4]
   85dc2:	f003 0307 	and.w	r3, r3, #7
   85dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   85dc8:	4b0c      	ldr	r3, [pc, #48]	; (85dfc <NVIC_SetPriorityGrouping+0x44>)
   85dca:	68db      	ldr	r3, [r3, #12]
   85dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   85dce:	68ba      	ldr	r2, [r7, #8]
   85dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   85dd4:	4013      	ands	r3, r2
   85dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   85dd8:	68fb      	ldr	r3, [r7, #12]
   85dda:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   85ddc:	68bb      	ldr	r3, [r7, #8]
   85dde:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   85de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   85de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   85de8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   85dea:	4b04      	ldr	r3, [pc, #16]	; (85dfc <NVIC_SetPriorityGrouping+0x44>)
   85dec:	68ba      	ldr	r2, [r7, #8]
   85dee:	60da      	str	r2, [r3, #12]
}
   85df0:	3714      	adds	r7, #20
   85df2:	46bd      	mov	sp, r7
   85df4:	f85d 7b04 	ldr.w	r7, [sp], #4
   85df8:	4770      	bx	lr
   85dfa:	bf00      	nop
   85dfc:	e000ed00 	.word	0xe000ed00

00085e00 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   85e00:	b480      	push	{r7}
   85e02:	b083      	sub	sp, #12
   85e04:	af00      	add	r7, sp, #0
   85e06:	4603      	mov	r3, r0
   85e08:	6039      	str	r1, [r7, #0]
   85e0a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   85e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85e10:	2b00      	cmp	r3, #0
   85e12:	da0b      	bge.n	85e2c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   85e14:	490d      	ldr	r1, [pc, #52]	; (85e4c <NVIC_SetPriority+0x4c>)
   85e16:	79fb      	ldrb	r3, [r7, #7]
   85e18:	f003 030f 	and.w	r3, r3, #15
   85e1c:	3b04      	subs	r3, #4
   85e1e:	683a      	ldr	r2, [r7, #0]
   85e20:	b2d2      	uxtb	r2, r2
   85e22:	0112      	lsls	r2, r2, #4
   85e24:	b2d2      	uxtb	r2, r2
   85e26:	440b      	add	r3, r1
   85e28:	761a      	strb	r2, [r3, #24]
   85e2a:	e009      	b.n	85e40 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   85e2c:	4908      	ldr	r1, [pc, #32]	; (85e50 <NVIC_SetPriority+0x50>)
   85e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85e32:	683a      	ldr	r2, [r7, #0]
   85e34:	b2d2      	uxtb	r2, r2
   85e36:	0112      	lsls	r2, r2, #4
   85e38:	b2d2      	uxtb	r2, r2
   85e3a:	440b      	add	r3, r1
   85e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   85e40:	370c      	adds	r7, #12
   85e42:	46bd      	mov	sp, r7
   85e44:	f85d 7b04 	ldr.w	r7, [sp], #4
   85e48:	4770      	bx	lr
   85e4a:	bf00      	nop
   85e4c:	e000ed00 	.word	0xe000ed00
   85e50:	e000e100 	.word	0xe000e100

00085e54 <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   85e54:	b480      	push	{r7}
   85e56:	b083      	sub	sp, #12
   85e58:	af00      	add	r7, sp, #0
   85e5a:	4603      	mov	r3, r0
   85e5c:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   85e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85e62:	2b00      	cmp	r3, #0
   85e64:	da0a      	bge.n	85e7c <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   85e66:	4a0d      	ldr	r2, [pc, #52]	; (85e9c <NVIC_GetPriority+0x48>)
   85e68:	79fb      	ldrb	r3, [r7, #7]
   85e6a:	f003 030f 	and.w	r3, r3, #15
   85e6e:	3b04      	subs	r3, #4
   85e70:	4413      	add	r3, r2
   85e72:	7e1b      	ldrb	r3, [r3, #24]
   85e74:	b2db      	uxtb	r3, r3
   85e76:	091b      	lsrs	r3, r3, #4
   85e78:	b2db      	uxtb	r3, r3
   85e7a:	e008      	b.n	85e8e <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   85e7c:	4a08      	ldr	r2, [pc, #32]	; (85ea0 <NVIC_GetPriority+0x4c>)
   85e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   85e82:	4413      	add	r3, r2
   85e84:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   85e88:	b2db      	uxtb	r3, r3
   85e8a:	091b      	lsrs	r3, r3, #4
   85e8c:	b2db      	uxtb	r3, r3
}
   85e8e:	4618      	mov	r0, r3
   85e90:	370c      	adds	r7, #12
   85e92:	46bd      	mov	sp, r7
   85e94:	f85d 7b04 	ldr.w	r7, [sp], #4
   85e98:	4770      	bx	lr
   85e9a:	bf00      	nop
   85e9c:	e000ed00 	.word	0xe000ed00
   85ea0:	e000e100 	.word	0xe000e100

00085ea4 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   85ea4:	b580      	push	{r7, lr}
   85ea6:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   85ea8:	4b06      	ldr	r3, [pc, #24]	; (85ec4 <main+0x20>)
   85eaa:	2200      	movs	r2, #0
   85eac:	601a      	str	r2, [r3, #0]
	safe_mode();
   85eae:	4b06      	ldr	r3, [pc, #24]	; (85ec8 <main+0x24>)
   85eb0:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   85eb2:	4b06      	ldr	r3, [pc, #24]	; (85ecc <main+0x28>)
   85eb4:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   85eb6:	4b06      	ldr	r3, [pc, #24]	; (85ed0 <main+0x2c>)
   85eb8:	4798      	blx	r3
		
	/* Create Tasks */
	//command_loop();
	//housekeep();
	data_test();
   85eba:	4b06      	ldr	r3, [pc, #24]	; (85ed4 <main+0x30>)
   85ebc:	4798      	blx	r3
	//memory_wash();
	//eps();
	//wdt_reset();
	
	/* Start Scheduler */
	vTaskStartScheduler();
   85ebe:	4b06      	ldr	r3, [pc, #24]	; (85ed8 <main+0x34>)
   85ec0:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   85ec2:	e7fe      	b.n	85ec2 <main+0x1e>
   85ec4:	2007a700 	.word	0x2007a700
   85ec8:	00085edd 	.word	0x00085edd
   85ecc:	00085f9d 	.word	0x00085f9d
   85ed0:	00085f1d 	.word	0x00085f1d
   85ed4:	000804f1 	.word	0x000804f1
   85ed8:	00083e39 	.word	0x00083e39

00085edc <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   85edc:	b580      	push	{r7, lr}
   85ede:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   85ee0:	4b08      	ldr	r3, [pc, #32]	; (85f04 <safe_mode+0x28>)
   85ee2:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   85ee4:	2000      	movs	r0, #0
   85ee6:	4b08      	ldr	r3, [pc, #32]	; (85f08 <safe_mode+0x2c>)
   85ee8:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   85eea:	4b08      	ldr	r3, [pc, #32]	; (85f0c <safe_mode+0x30>)
   85eec:	4798      	blx	r3
	//uint32_t timeOut, low, high;
	
	//timeOut = 80000000;
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   85eee:	4b08      	ldr	r3, [pc, #32]	; (85f10 <safe_mode+0x34>)
   85ef0:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   85ef2:	4b08      	ldr	r3, [pc, #32]	; (85f14 <safe_mode+0x38>)
   85ef4:	4798      	blx	r3
	
	//uint32_t a;
	//a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   85ef6:	bf00      	nop
   85ef8:	4b07      	ldr	r3, [pc, #28]	; (85f18 <safe_mode+0x3c>)
   85efa:	681b      	ldr	r3, [r3, #0]
   85efc:	2b00      	cmp	r3, #0
   85efe:	d1fb      	bne.n	85ef8 <safe_mode+0x1c>
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
		*/
	}
}
   85f00:	bd80      	pop	{r7, pc}
   85f02:	bf00      	nop
   85f04:	00081445 	.word	0x00081445
   85f08:	00085db9 	.word	0x00085db9
   85f0c:	00081599 	.word	0x00081599
   85f10:	00085f45 	.word	0x00085f45
   85f14:	00085981 	.word	0x00085981
   85f18:	2007a700 	.word	0x2007a700

00085f1c <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   85f1c:	b580      	push	{r7, lr}
   85f1e:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   85f20:	4b04      	ldr	r3, [pc, #16]	; (85f34 <prvSetupHardware+0x18>)
   85f22:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   85f24:	4b04      	ldr	r3, [pc, #16]	; (85f38 <prvSetupHardware+0x1c>)
   85f26:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   85f28:	4b04      	ldr	r3, [pc, #16]	; (85f3c <prvSetupHardware+0x20>)
   85f2a:	4798      	blx	r3
	
	/* Initialize SPI related registers and functions. */
	spi_initialize();
   85f2c:	4b04      	ldr	r3, [pc, #16]	; (85f40 <prvSetupHardware+0x24>)
   85f2e:	4798      	blx	r3
	//rtc_init(DS3234_INTCN);
	
	/* Initialize the SPI memory chips	*/
	//spimem_initialize();
	
}
   85f30:	bd80      	pop	{r7, pc}
   85f32:	bf00      	nop
   85f34:	00081635 	.word	0x00081635
   85f38:	00080609 	.word	0x00080609
   85f3c:	000810c5 	.word	0x000810c5
   85f40:	00080a5d 	.word	0x00080a5d

00085f44 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   85f44:	b598      	push	{r3, r4, r7, lr}
   85f46:	af00      	add	r7, sp, #0
	Can0_Mutex = xSemaphoreCreateBinary();
   85f48:	2001      	movs	r0, #1
   85f4a:	2100      	movs	r1, #0
   85f4c:	2203      	movs	r2, #3
   85f4e:	4b0f      	ldr	r3, [pc, #60]	; (85f8c <prvInitializeMutexes+0x48>)
   85f50:	4798      	blx	r3
   85f52:	4602      	mov	r2, r0
   85f54:	4b0e      	ldr	r3, [pc, #56]	; (85f90 <prvInitializeMutexes+0x4c>)
   85f56:	601a      	str	r2, [r3, #0]
	Spi0_Mutex = xSemaphoreCreateBinary();
   85f58:	2001      	movs	r0, #1
   85f5a:	2100      	movs	r1, #0
   85f5c:	2203      	movs	r2, #3
   85f5e:	4b0b      	ldr	r3, [pc, #44]	; (85f8c <prvInitializeMutexes+0x48>)
   85f60:	4798      	blx	r3
   85f62:	4602      	mov	r2, r0
   85f64:	4b0b      	ldr	r3, [pc, #44]	; (85f94 <prvInitializeMutexes+0x50>)
   85f66:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(Can0_Mutex);
   85f68:	4b09      	ldr	r3, [pc, #36]	; (85f90 <prvInitializeMutexes+0x4c>)
   85f6a:	681b      	ldr	r3, [r3, #0]
   85f6c:	4618      	mov	r0, r3
   85f6e:	2100      	movs	r1, #0
   85f70:	2200      	movs	r2, #0
   85f72:	2300      	movs	r3, #0
   85f74:	4c08      	ldr	r4, [pc, #32]	; (85f98 <prvInitializeMutexes+0x54>)
   85f76:	47a0      	blx	r4
	xSemaphoreGive(Spi0_Mutex);
   85f78:	4b06      	ldr	r3, [pc, #24]	; (85f94 <prvInitializeMutexes+0x50>)
   85f7a:	681b      	ldr	r3, [r3, #0]
   85f7c:	4618      	mov	r0, r3
   85f7e:	2100      	movs	r1, #0
   85f80:	2200      	movs	r2, #0
   85f82:	2300      	movs	r3, #0
   85f84:	4c04      	ldr	r4, [pc, #16]	; (85f98 <prvInitializeMutexes+0x54>)
   85f86:	47a0      	blx	r4
	return;
   85f88:	bf00      	nop
}
   85f8a:	bd98      	pop	{r3, r4, r7, pc}
   85f8c:	000834c1 	.word	0x000834c1
   85f90:	2007a718 	.word	0x2007a718
   85f94:	2007ab68 	.word	0x2007ab68
   85f98:	0008354d 	.word	0x0008354d

00085f9c <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   85f9c:	b580      	push	{r7, lr}
   85f9e:	b082      	sub	sp, #8
   85fa0:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   85fa2:	230b      	movs	r3, #11
   85fa4:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   85fa6:	232c      	movs	r3, #44	; 0x2c
   85fa8:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   85faa:	232b      	movs	r3, #43	; 0x2b
   85fac:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   85fae:	f997 3003 	ldrsb.w	r3, [r7, #3]
   85fb2:	4618      	mov	r0, r3
   85fb4:	6879      	ldr	r1, [r7, #4]
   85fb6:	4b0a      	ldr	r3, [pc, #40]	; (85fe0 <prvInitializeInterruptPriorities+0x44>)
   85fb8:	4798      	blx	r3
	
	priority = 12;	
   85fba:	230c      	movs	r3, #12
   85fbc:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   85fbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
   85fc2:	4618      	mov	r0, r3
   85fc4:	6879      	ldr	r1, [r7, #4]
   85fc6:	4b06      	ldr	r3, [pc, #24]	; (85fe0 <prvInitializeInterruptPriorities+0x44>)
   85fc8:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   85fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
   85fce:	4618      	mov	r0, r3
   85fd0:	4b04      	ldr	r3, [pc, #16]	; (85fe4 <prvInitializeInterruptPriorities+0x48>)
   85fd2:	4798      	blx	r3
   85fd4:	6078      	str	r0, [r7, #4]
	
	return;
   85fd6:	bf00      	nop
}
   85fd8:	3708      	adds	r7, #8
   85fda:	46bd      	mov	sp, r7
   85fdc:	bd80      	pop	{r7, pc}
   85fde:	bf00      	nop
   85fe0:	00085e01 	.word	0x00085e01
   85fe4:	00085e55 	.word	0x00085e55

00085fe8 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   85fe8:	b580      	push	{r7, lr}
   85fea:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   85fec:	4b01      	ldr	r3, [pc, #4]	; (85ff4 <vApplicationMallocFailedHook+0xc>)
   85fee:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   85ff0:	e7fe      	b.n	85ff0 <vApplicationMallocFailedHook+0x8>
   85ff2:	bf00      	nop
   85ff4:	00082f45 	.word	0x00082f45

00085ff8 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   85ff8:	b580      	push	{r7, lr}
   85ffa:	b082      	sub	sp, #8
   85ffc:	af00      	add	r7, sp, #0
   85ffe:	6078      	str	r0, [r7, #4]
   86000:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   86002:	4b01      	ldr	r3, [pc, #4]	; (86008 <vApplicationStackOverflowHook+0x10>)
   86004:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   86006:	e7fe      	b.n	86006 <vApplicationStackOverflowHook+0xe>
   86008:	00082f45 	.word	0x00082f45

0008600c <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   8600c:	b580      	push	{r7, lr}
   8600e:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   86010:	4804      	ldr	r0, [pc, #16]	; (86024 <WDT_Handler+0x18>)
   86012:	4b05      	ldr	r3, [pc, #20]	; (86028 <WDT_Handler+0x1c>)
   86014:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   86016:	2055      	movs	r0, #85	; 0x55
   86018:	4b04      	ldr	r3, [pc, #16]	; (8602c <WDT_Handler+0x20>)
   8601a:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   8601c:	4801      	ldr	r0, [pc, #4]	; (86024 <WDT_Handler+0x18>)
   8601e:	4b04      	ldr	r3, [pc, #16]	; (86030 <WDT_Handler+0x24>)
   86020:	4798      	blx	r3
}
   86022:	bd80      	pop	{r7, pc}
   86024:	400e1a50 	.word	0x400e1a50
   86028:	000828d5 	.word	0x000828d5
   8602c:	00081f1d 	.word	0x00081f1d
   86030:	000828ad 	.word	0x000828ad

00086034 <__aeabi_frsub>:
   86034:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   86038:	e002      	b.n	86040 <__addsf3>
   8603a:	bf00      	nop

0008603c <__aeabi_fsub>:
   8603c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00086040 <__addsf3>:
   86040:	0042      	lsls	r2, r0, #1
   86042:	bf1f      	itttt	ne
   86044:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   86048:	ea92 0f03 	teqne	r2, r3
   8604c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   86050:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86054:	d06a      	beq.n	8612c <__addsf3+0xec>
   86056:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8605a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8605e:	bfc1      	itttt	gt
   86060:	18d2      	addgt	r2, r2, r3
   86062:	4041      	eorgt	r1, r0
   86064:	4048      	eorgt	r0, r1
   86066:	4041      	eorgt	r1, r0
   86068:	bfb8      	it	lt
   8606a:	425b      	neglt	r3, r3
   8606c:	2b19      	cmp	r3, #25
   8606e:	bf88      	it	hi
   86070:	4770      	bxhi	lr
   86072:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   86076:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8607a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8607e:	bf18      	it	ne
   86080:	4240      	negne	r0, r0
   86082:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86086:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8608a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8608e:	bf18      	it	ne
   86090:	4249      	negne	r1, r1
   86092:	ea92 0f03 	teq	r2, r3
   86096:	d03f      	beq.n	86118 <__addsf3+0xd8>
   86098:	f1a2 0201 	sub.w	r2, r2, #1
   8609c:	fa41 fc03 	asr.w	ip, r1, r3
   860a0:	eb10 000c 	adds.w	r0, r0, ip
   860a4:	f1c3 0320 	rsb	r3, r3, #32
   860a8:	fa01 f103 	lsl.w	r1, r1, r3
   860ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   860b0:	d502      	bpl.n	860b8 <__addsf3+0x78>
   860b2:	4249      	negs	r1, r1
   860b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   860b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   860bc:	d313      	bcc.n	860e6 <__addsf3+0xa6>
   860be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   860c2:	d306      	bcc.n	860d2 <__addsf3+0x92>
   860c4:	0840      	lsrs	r0, r0, #1
   860c6:	ea4f 0131 	mov.w	r1, r1, rrx
   860ca:	f102 0201 	add.w	r2, r2, #1
   860ce:	2afe      	cmp	r2, #254	; 0xfe
   860d0:	d251      	bcs.n	86176 <__addsf3+0x136>
   860d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   860d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   860da:	bf08      	it	eq
   860dc:	f020 0001 	biceq.w	r0, r0, #1
   860e0:	ea40 0003 	orr.w	r0, r0, r3
   860e4:	4770      	bx	lr
   860e6:	0049      	lsls	r1, r1, #1
   860e8:	eb40 0000 	adc.w	r0, r0, r0
   860ec:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   860f0:	f1a2 0201 	sub.w	r2, r2, #1
   860f4:	d1ed      	bne.n	860d2 <__addsf3+0x92>
   860f6:	fab0 fc80 	clz	ip, r0
   860fa:	f1ac 0c08 	sub.w	ip, ip, #8
   860fe:	ebb2 020c 	subs.w	r2, r2, ip
   86102:	fa00 f00c 	lsl.w	r0, r0, ip
   86106:	bfaa      	itet	ge
   86108:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8610c:	4252      	neglt	r2, r2
   8610e:	4318      	orrge	r0, r3
   86110:	bfbc      	itt	lt
   86112:	40d0      	lsrlt	r0, r2
   86114:	4318      	orrlt	r0, r3
   86116:	4770      	bx	lr
   86118:	f092 0f00 	teq	r2, #0
   8611c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   86120:	bf06      	itte	eq
   86122:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   86126:	3201      	addeq	r2, #1
   86128:	3b01      	subne	r3, #1
   8612a:	e7b5      	b.n	86098 <__addsf3+0x58>
   8612c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86130:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86134:	bf18      	it	ne
   86136:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8613a:	d021      	beq.n	86180 <__addsf3+0x140>
   8613c:	ea92 0f03 	teq	r2, r3
   86140:	d004      	beq.n	8614c <__addsf3+0x10c>
   86142:	f092 0f00 	teq	r2, #0
   86146:	bf08      	it	eq
   86148:	4608      	moveq	r0, r1
   8614a:	4770      	bx	lr
   8614c:	ea90 0f01 	teq	r0, r1
   86150:	bf1c      	itt	ne
   86152:	2000      	movne	r0, #0
   86154:	4770      	bxne	lr
   86156:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8615a:	d104      	bne.n	86166 <__addsf3+0x126>
   8615c:	0040      	lsls	r0, r0, #1
   8615e:	bf28      	it	cs
   86160:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   86164:	4770      	bx	lr
   86166:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8616a:	bf3c      	itt	cc
   8616c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   86170:	4770      	bxcc	lr
   86172:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86176:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8617a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8617e:	4770      	bx	lr
   86180:	ea7f 6222 	mvns.w	r2, r2, asr #24
   86184:	bf16      	itet	ne
   86186:	4608      	movne	r0, r1
   86188:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8618c:	4601      	movne	r1, r0
   8618e:	0242      	lsls	r2, r0, #9
   86190:	bf06      	itte	eq
   86192:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86196:	ea90 0f01 	teqeq	r0, r1
   8619a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8619e:	4770      	bx	lr

000861a0 <__aeabi_ui2f>:
   861a0:	f04f 0300 	mov.w	r3, #0
   861a4:	e004      	b.n	861b0 <__aeabi_i2f+0x8>
   861a6:	bf00      	nop

000861a8 <__aeabi_i2f>:
   861a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   861ac:	bf48      	it	mi
   861ae:	4240      	negmi	r0, r0
   861b0:	ea5f 0c00 	movs.w	ip, r0
   861b4:	bf08      	it	eq
   861b6:	4770      	bxeq	lr
   861b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   861bc:	4601      	mov	r1, r0
   861be:	f04f 0000 	mov.w	r0, #0
   861c2:	e01c      	b.n	861fe <__aeabi_l2f+0x2a>

000861c4 <__aeabi_ul2f>:
   861c4:	ea50 0201 	orrs.w	r2, r0, r1
   861c8:	bf08      	it	eq
   861ca:	4770      	bxeq	lr
   861cc:	f04f 0300 	mov.w	r3, #0
   861d0:	e00a      	b.n	861e8 <__aeabi_l2f+0x14>
   861d2:	bf00      	nop

000861d4 <__aeabi_l2f>:
   861d4:	ea50 0201 	orrs.w	r2, r0, r1
   861d8:	bf08      	it	eq
   861da:	4770      	bxeq	lr
   861dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   861e0:	d502      	bpl.n	861e8 <__aeabi_l2f+0x14>
   861e2:	4240      	negs	r0, r0
   861e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   861e8:	ea5f 0c01 	movs.w	ip, r1
   861ec:	bf02      	ittt	eq
   861ee:	4684      	moveq	ip, r0
   861f0:	4601      	moveq	r1, r0
   861f2:	2000      	moveq	r0, #0
   861f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   861f8:	bf08      	it	eq
   861fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   861fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   86202:	fabc f28c 	clz	r2, ip
   86206:	3a08      	subs	r2, #8
   86208:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8620c:	db10      	blt.n	86230 <__aeabi_l2f+0x5c>
   8620e:	fa01 fc02 	lsl.w	ip, r1, r2
   86212:	4463      	add	r3, ip
   86214:	fa00 fc02 	lsl.w	ip, r0, r2
   86218:	f1c2 0220 	rsb	r2, r2, #32
   8621c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   86220:	fa20 f202 	lsr.w	r2, r0, r2
   86224:	eb43 0002 	adc.w	r0, r3, r2
   86228:	bf08      	it	eq
   8622a:	f020 0001 	biceq.w	r0, r0, #1
   8622e:	4770      	bx	lr
   86230:	f102 0220 	add.w	r2, r2, #32
   86234:	fa01 fc02 	lsl.w	ip, r1, r2
   86238:	f1c2 0220 	rsb	r2, r2, #32
   8623c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   86240:	fa21 f202 	lsr.w	r2, r1, r2
   86244:	eb43 0002 	adc.w	r0, r3, r2
   86248:	bf08      	it	eq
   8624a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8624e:	4770      	bx	lr

00086250 <__aeabi_fmul>:
   86250:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86254:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86258:	bf1e      	ittt	ne
   8625a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8625e:	ea92 0f0c 	teqne	r2, ip
   86262:	ea93 0f0c 	teqne	r3, ip
   86266:	d06f      	beq.n	86348 <__aeabi_fmul+0xf8>
   86268:	441a      	add	r2, r3
   8626a:	ea80 0c01 	eor.w	ip, r0, r1
   8626e:	0240      	lsls	r0, r0, #9
   86270:	bf18      	it	ne
   86272:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86276:	d01e      	beq.n	862b6 <__aeabi_fmul+0x66>
   86278:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8627c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   86280:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86284:	fba0 3101 	umull	r3, r1, r0, r1
   86288:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8628c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   86290:	bf3e      	ittt	cc
   86292:	0049      	lslcc	r1, r1, #1
   86294:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86298:	005b      	lslcc	r3, r3, #1
   8629a:	ea40 0001 	orr.w	r0, r0, r1
   8629e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   862a2:	2afd      	cmp	r2, #253	; 0xfd
   862a4:	d81d      	bhi.n	862e2 <__aeabi_fmul+0x92>
   862a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   862aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   862ae:	bf08      	it	eq
   862b0:	f020 0001 	biceq.w	r0, r0, #1
   862b4:	4770      	bx	lr
   862b6:	f090 0f00 	teq	r0, #0
   862ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   862be:	bf08      	it	eq
   862c0:	0249      	lsleq	r1, r1, #9
   862c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   862c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   862ca:	3a7f      	subs	r2, #127	; 0x7f
   862cc:	bfc2      	ittt	gt
   862ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   862d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   862d6:	4770      	bxgt	lr
   862d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   862dc:	f04f 0300 	mov.w	r3, #0
   862e0:	3a01      	subs	r2, #1
   862e2:	dc5d      	bgt.n	863a0 <__aeabi_fmul+0x150>
   862e4:	f112 0f19 	cmn.w	r2, #25
   862e8:	bfdc      	itt	le
   862ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   862ee:	4770      	bxle	lr
   862f0:	f1c2 0200 	rsb	r2, r2, #0
   862f4:	0041      	lsls	r1, r0, #1
   862f6:	fa21 f102 	lsr.w	r1, r1, r2
   862fa:	f1c2 0220 	rsb	r2, r2, #32
   862fe:	fa00 fc02 	lsl.w	ip, r0, r2
   86302:	ea5f 0031 	movs.w	r0, r1, rrx
   86306:	f140 0000 	adc.w	r0, r0, #0
   8630a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8630e:	bf08      	it	eq
   86310:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   86314:	4770      	bx	lr
   86316:	f092 0f00 	teq	r2, #0
   8631a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8631e:	bf02      	ittt	eq
   86320:	0040      	lsleq	r0, r0, #1
   86322:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86326:	3a01      	subeq	r2, #1
   86328:	d0f9      	beq.n	8631e <__aeabi_fmul+0xce>
   8632a:	ea40 000c 	orr.w	r0, r0, ip
   8632e:	f093 0f00 	teq	r3, #0
   86332:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86336:	bf02      	ittt	eq
   86338:	0049      	lsleq	r1, r1, #1
   8633a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8633e:	3b01      	subeq	r3, #1
   86340:	d0f9      	beq.n	86336 <__aeabi_fmul+0xe6>
   86342:	ea41 010c 	orr.w	r1, r1, ip
   86346:	e78f      	b.n	86268 <__aeabi_fmul+0x18>
   86348:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8634c:	ea92 0f0c 	teq	r2, ip
   86350:	bf18      	it	ne
   86352:	ea93 0f0c 	teqne	r3, ip
   86356:	d00a      	beq.n	8636e <__aeabi_fmul+0x11e>
   86358:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8635c:	bf18      	it	ne
   8635e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86362:	d1d8      	bne.n	86316 <__aeabi_fmul+0xc6>
   86364:	ea80 0001 	eor.w	r0, r0, r1
   86368:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8636c:	4770      	bx	lr
   8636e:	f090 0f00 	teq	r0, #0
   86372:	bf17      	itett	ne
   86374:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   86378:	4608      	moveq	r0, r1
   8637a:	f091 0f00 	teqne	r1, #0
   8637e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   86382:	d014      	beq.n	863ae <__aeabi_fmul+0x15e>
   86384:	ea92 0f0c 	teq	r2, ip
   86388:	d101      	bne.n	8638e <__aeabi_fmul+0x13e>
   8638a:	0242      	lsls	r2, r0, #9
   8638c:	d10f      	bne.n	863ae <__aeabi_fmul+0x15e>
   8638e:	ea93 0f0c 	teq	r3, ip
   86392:	d103      	bne.n	8639c <__aeabi_fmul+0x14c>
   86394:	024b      	lsls	r3, r1, #9
   86396:	bf18      	it	ne
   86398:	4608      	movne	r0, r1
   8639a:	d108      	bne.n	863ae <__aeabi_fmul+0x15e>
   8639c:	ea80 0001 	eor.w	r0, r0, r1
   863a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   863a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   863a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   863ac:	4770      	bx	lr
   863ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   863b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   863b6:	4770      	bx	lr

000863b8 <__aeabi_fdiv>:
   863b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   863bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   863c0:	bf1e      	ittt	ne
   863c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   863c6:	ea92 0f0c 	teqne	r2, ip
   863ca:	ea93 0f0c 	teqne	r3, ip
   863ce:	d069      	beq.n	864a4 <__aeabi_fdiv+0xec>
   863d0:	eba2 0203 	sub.w	r2, r2, r3
   863d4:	ea80 0c01 	eor.w	ip, r0, r1
   863d8:	0249      	lsls	r1, r1, #9
   863da:	ea4f 2040 	mov.w	r0, r0, lsl #9
   863de:	d037      	beq.n	86450 <__aeabi_fdiv+0x98>
   863e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   863e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   863e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   863ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   863f0:	428b      	cmp	r3, r1
   863f2:	bf38      	it	cc
   863f4:	005b      	lslcc	r3, r3, #1
   863f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   863fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   863fe:	428b      	cmp	r3, r1
   86400:	bf24      	itt	cs
   86402:	1a5b      	subcs	r3, r3, r1
   86404:	ea40 000c 	orrcs.w	r0, r0, ip
   86408:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   8640c:	bf24      	itt	cs
   8640e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   86412:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   86416:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   8641a:	bf24      	itt	cs
   8641c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   86420:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   86424:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   86428:	bf24      	itt	cs
   8642a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   8642e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86432:	011b      	lsls	r3, r3, #4
   86434:	bf18      	it	ne
   86436:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   8643a:	d1e0      	bne.n	863fe <__aeabi_fdiv+0x46>
   8643c:	2afd      	cmp	r2, #253	; 0xfd
   8643e:	f63f af50 	bhi.w	862e2 <__aeabi_fmul+0x92>
   86442:	428b      	cmp	r3, r1
   86444:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86448:	bf08      	it	eq
   8644a:	f020 0001 	biceq.w	r0, r0, #1
   8644e:	4770      	bx	lr
   86450:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86454:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86458:	327f      	adds	r2, #127	; 0x7f
   8645a:	bfc2      	ittt	gt
   8645c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86460:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86464:	4770      	bxgt	lr
   86466:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8646a:	f04f 0300 	mov.w	r3, #0
   8646e:	3a01      	subs	r2, #1
   86470:	e737      	b.n	862e2 <__aeabi_fmul+0x92>
   86472:	f092 0f00 	teq	r2, #0
   86476:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8647a:	bf02      	ittt	eq
   8647c:	0040      	lsleq	r0, r0, #1
   8647e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86482:	3a01      	subeq	r2, #1
   86484:	d0f9      	beq.n	8647a <__aeabi_fdiv+0xc2>
   86486:	ea40 000c 	orr.w	r0, r0, ip
   8648a:	f093 0f00 	teq	r3, #0
   8648e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86492:	bf02      	ittt	eq
   86494:	0049      	lsleq	r1, r1, #1
   86496:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8649a:	3b01      	subeq	r3, #1
   8649c:	d0f9      	beq.n	86492 <__aeabi_fdiv+0xda>
   8649e:	ea41 010c 	orr.w	r1, r1, ip
   864a2:	e795      	b.n	863d0 <__aeabi_fdiv+0x18>
   864a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   864a8:	ea92 0f0c 	teq	r2, ip
   864ac:	d108      	bne.n	864c0 <__aeabi_fdiv+0x108>
   864ae:	0242      	lsls	r2, r0, #9
   864b0:	f47f af7d 	bne.w	863ae <__aeabi_fmul+0x15e>
   864b4:	ea93 0f0c 	teq	r3, ip
   864b8:	f47f af70 	bne.w	8639c <__aeabi_fmul+0x14c>
   864bc:	4608      	mov	r0, r1
   864be:	e776      	b.n	863ae <__aeabi_fmul+0x15e>
   864c0:	ea93 0f0c 	teq	r3, ip
   864c4:	d104      	bne.n	864d0 <__aeabi_fdiv+0x118>
   864c6:	024b      	lsls	r3, r1, #9
   864c8:	f43f af4c 	beq.w	86364 <__aeabi_fmul+0x114>
   864cc:	4608      	mov	r0, r1
   864ce:	e76e      	b.n	863ae <__aeabi_fmul+0x15e>
   864d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   864d4:	bf18      	it	ne
   864d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   864da:	d1ca      	bne.n	86472 <__aeabi_fdiv+0xba>
   864dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   864e0:	f47f af5c 	bne.w	8639c <__aeabi_fmul+0x14c>
   864e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   864e8:	f47f af3c 	bne.w	86364 <__aeabi_fmul+0x114>
   864ec:	e75f      	b.n	863ae <__aeabi_fmul+0x15e>
   864ee:	bf00      	nop

000864f0 <__gesf2>:
   864f0:	f04f 3cff 	mov.w	ip, #4294967295
   864f4:	e006      	b.n	86504 <__cmpsf2+0x4>
   864f6:	bf00      	nop

000864f8 <__lesf2>:
   864f8:	f04f 0c01 	mov.w	ip, #1
   864fc:	e002      	b.n	86504 <__cmpsf2+0x4>
   864fe:	bf00      	nop

00086500 <__cmpsf2>:
   86500:	f04f 0c01 	mov.w	ip, #1
   86504:	f84d cd04 	str.w	ip, [sp, #-4]!
   86508:	ea4f 0240 	mov.w	r2, r0, lsl #1
   8650c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86510:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86514:	bf18      	it	ne
   86516:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8651a:	d011      	beq.n	86540 <__cmpsf2+0x40>
   8651c:	b001      	add	sp, #4
   8651e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   86522:	bf18      	it	ne
   86524:	ea90 0f01 	teqne	r0, r1
   86528:	bf58      	it	pl
   8652a:	ebb2 0003 	subspl.w	r0, r2, r3
   8652e:	bf88      	it	hi
   86530:	17c8      	asrhi	r0, r1, #31
   86532:	bf38      	it	cc
   86534:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   86538:	bf18      	it	ne
   8653a:	f040 0001 	orrne.w	r0, r0, #1
   8653e:	4770      	bx	lr
   86540:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86544:	d102      	bne.n	8654c <__cmpsf2+0x4c>
   86546:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   8654a:	d105      	bne.n	86558 <__cmpsf2+0x58>
   8654c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   86550:	d1e4      	bne.n	8651c <__cmpsf2+0x1c>
   86552:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   86556:	d0e1      	beq.n	8651c <__cmpsf2+0x1c>
   86558:	f85d 0b04 	ldr.w	r0, [sp], #4
   8655c:	4770      	bx	lr
   8655e:	bf00      	nop

00086560 <__aeabi_cfrcmple>:
   86560:	4684      	mov	ip, r0
   86562:	4608      	mov	r0, r1
   86564:	4661      	mov	r1, ip
   86566:	e7ff      	b.n	86568 <__aeabi_cfcmpeq>

00086568 <__aeabi_cfcmpeq>:
   86568:	b50f      	push	{r0, r1, r2, r3, lr}
   8656a:	f7ff ffc9 	bl	86500 <__cmpsf2>
   8656e:	2800      	cmp	r0, #0
   86570:	bf48      	it	mi
   86572:	f110 0f00 	cmnmi.w	r0, #0
   86576:	bd0f      	pop	{r0, r1, r2, r3, pc}

00086578 <__aeabi_fcmpeq>:
   86578:	f84d ed08 	str.w	lr, [sp, #-8]!
   8657c:	f7ff fff4 	bl	86568 <__aeabi_cfcmpeq>
   86580:	bf0c      	ite	eq
   86582:	2001      	moveq	r0, #1
   86584:	2000      	movne	r0, #0
   86586:	f85d fb08 	ldr.w	pc, [sp], #8
   8658a:	bf00      	nop

0008658c <__aeabi_fcmplt>:
   8658c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86590:	f7ff ffea 	bl	86568 <__aeabi_cfcmpeq>
   86594:	bf34      	ite	cc
   86596:	2001      	movcc	r0, #1
   86598:	2000      	movcs	r0, #0
   8659a:	f85d fb08 	ldr.w	pc, [sp], #8
   8659e:	bf00      	nop

000865a0 <__aeabi_fcmple>:
   865a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   865a4:	f7ff ffe0 	bl	86568 <__aeabi_cfcmpeq>
   865a8:	bf94      	ite	ls
   865aa:	2001      	movls	r0, #1
   865ac:	2000      	movhi	r0, #0
   865ae:	f85d fb08 	ldr.w	pc, [sp], #8
   865b2:	bf00      	nop

000865b4 <__aeabi_fcmpge>:
   865b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   865b8:	f7ff ffd2 	bl	86560 <__aeabi_cfrcmple>
   865bc:	bf94      	ite	ls
   865be:	2001      	movls	r0, #1
   865c0:	2000      	movhi	r0, #0
   865c2:	f85d fb08 	ldr.w	pc, [sp], #8
   865c6:	bf00      	nop

000865c8 <__aeabi_fcmpgt>:
   865c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   865cc:	f7ff ffc8 	bl	86560 <__aeabi_cfrcmple>
   865d0:	bf34      	ite	cc
   865d2:	2001      	movcc	r0, #1
   865d4:	2000      	movcs	r0, #0
   865d6:	f85d fb08 	ldr.w	pc, [sp], #8
   865da:	bf00      	nop

000865dc <__aeabi_f2uiz>:
   865dc:	0042      	lsls	r2, r0, #1
   865de:	d20e      	bcs.n	865fe <__aeabi_f2uiz+0x22>
   865e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   865e4:	d30b      	bcc.n	865fe <__aeabi_f2uiz+0x22>
   865e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   865ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   865ee:	d409      	bmi.n	86604 <__aeabi_f2uiz+0x28>
   865f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   865f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   865f8:	fa23 f002 	lsr.w	r0, r3, r2
   865fc:	4770      	bx	lr
   865fe:	f04f 0000 	mov.w	r0, #0
   86602:	4770      	bx	lr
   86604:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86608:	d101      	bne.n	8660e <__aeabi_f2uiz+0x32>
   8660a:	0242      	lsls	r2, r0, #9
   8660c:	d102      	bne.n	86614 <__aeabi_f2uiz+0x38>
   8660e:	f04f 30ff 	mov.w	r0, #4294967295
   86612:	4770      	bx	lr
   86614:	f04f 0000 	mov.w	r0, #0
   86618:	4770      	bx	lr
   8661a:	bf00      	nop

0008661c <__libc_init_array>:
   8661c:	b570      	push	{r4, r5, r6, lr}
   8661e:	4e0f      	ldr	r6, [pc, #60]	; (8665c <__libc_init_array+0x40>)
   86620:	4d0f      	ldr	r5, [pc, #60]	; (86660 <__libc_init_array+0x44>)
   86622:	1b76      	subs	r6, r6, r5
   86624:	10b6      	asrs	r6, r6, #2
   86626:	d007      	beq.n	86638 <__libc_init_array+0x1c>
   86628:	3d04      	subs	r5, #4
   8662a:	2400      	movs	r4, #0
   8662c:	3401      	adds	r4, #1
   8662e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86632:	4798      	blx	r3
   86634:	42a6      	cmp	r6, r4
   86636:	d1f9      	bne.n	8662c <__libc_init_array+0x10>
   86638:	4e0a      	ldr	r6, [pc, #40]	; (86664 <__libc_init_array+0x48>)
   8663a:	4d0b      	ldr	r5, [pc, #44]	; (86668 <__libc_init_array+0x4c>)
   8663c:	f000 fa48 	bl	86ad0 <_init>
   86640:	1b76      	subs	r6, r6, r5
   86642:	10b6      	asrs	r6, r6, #2
   86644:	d008      	beq.n	86658 <__libc_init_array+0x3c>
   86646:	3d04      	subs	r5, #4
   86648:	2400      	movs	r4, #0
   8664a:	3401      	adds	r4, #1
   8664c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86650:	4798      	blx	r3
   86652:	42a6      	cmp	r6, r4
   86654:	d1f9      	bne.n	8664a <__libc_init_array+0x2e>
   86656:	bd70      	pop	{r4, r5, r6, pc}
   86658:	bd70      	pop	{r4, r5, r6, pc}
   8665a:	bf00      	nop
   8665c:	00086adc 	.word	0x00086adc
   86660:	00086adc 	.word	0x00086adc
   86664:	00086ae4 	.word	0x00086ae4
   86668:	00086adc 	.word	0x00086adc

0008666c <memcmp>:
   8666c:	2a03      	cmp	r2, #3
   8666e:	b470      	push	{r4, r5, r6}
   86670:	d928      	bls.n	866c4 <memcmp+0x58>
   86672:	ea40 0301 	orr.w	r3, r0, r1
   86676:	079b      	lsls	r3, r3, #30
   86678:	d013      	beq.n	866a2 <memcmp+0x36>
   8667a:	7805      	ldrb	r5, [r0, #0]
   8667c:	780c      	ldrb	r4, [r1, #0]
   8667e:	42a5      	cmp	r5, r4
   86680:	d124      	bne.n	866cc <memcmp+0x60>
   86682:	3a01      	subs	r2, #1
   86684:	2300      	movs	r3, #0
   86686:	e005      	b.n	86694 <memcmp+0x28>
   86688:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   8668c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   86690:	42a5      	cmp	r5, r4
   86692:	d11b      	bne.n	866cc <memcmp+0x60>
   86694:	4293      	cmp	r3, r2
   86696:	f103 0301 	add.w	r3, r3, #1
   8669a:	d1f5      	bne.n	86688 <memcmp+0x1c>
   8669c:	2000      	movs	r0, #0
   8669e:	bc70      	pop	{r4, r5, r6}
   866a0:	4770      	bx	lr
   866a2:	460c      	mov	r4, r1
   866a4:	4603      	mov	r3, r0
   866a6:	6825      	ldr	r5, [r4, #0]
   866a8:	681e      	ldr	r6, [r3, #0]
   866aa:	4621      	mov	r1, r4
   866ac:	42ae      	cmp	r6, r5
   866ae:	4618      	mov	r0, r3
   866b0:	f104 0404 	add.w	r4, r4, #4
   866b4:	f103 0304 	add.w	r3, r3, #4
   866b8:	d104      	bne.n	866c4 <memcmp+0x58>
   866ba:	3a04      	subs	r2, #4
   866bc:	2a03      	cmp	r2, #3
   866be:	4618      	mov	r0, r3
   866c0:	4621      	mov	r1, r4
   866c2:	d8f0      	bhi.n	866a6 <memcmp+0x3a>
   866c4:	2a00      	cmp	r2, #0
   866c6:	d1d8      	bne.n	8667a <memcmp+0xe>
   866c8:	4610      	mov	r0, r2
   866ca:	e7e8      	b.n	8669e <memcmp+0x32>
   866cc:	1b28      	subs	r0, r5, r4
   866ce:	bc70      	pop	{r4, r5, r6}
   866d0:	4770      	bx	lr
   866d2:	bf00      	nop

000866d4 <memcpy>:
   866d4:	4684      	mov	ip, r0
   866d6:	ea41 0300 	orr.w	r3, r1, r0
   866da:	f013 0303 	ands.w	r3, r3, #3
   866de:	d149      	bne.n	86774 <memcpy+0xa0>
   866e0:	3a40      	subs	r2, #64	; 0x40
   866e2:	d323      	bcc.n	8672c <memcpy+0x58>
   866e4:	680b      	ldr	r3, [r1, #0]
   866e6:	6003      	str	r3, [r0, #0]
   866e8:	684b      	ldr	r3, [r1, #4]
   866ea:	6043      	str	r3, [r0, #4]
   866ec:	688b      	ldr	r3, [r1, #8]
   866ee:	6083      	str	r3, [r0, #8]
   866f0:	68cb      	ldr	r3, [r1, #12]
   866f2:	60c3      	str	r3, [r0, #12]
   866f4:	690b      	ldr	r3, [r1, #16]
   866f6:	6103      	str	r3, [r0, #16]
   866f8:	694b      	ldr	r3, [r1, #20]
   866fa:	6143      	str	r3, [r0, #20]
   866fc:	698b      	ldr	r3, [r1, #24]
   866fe:	6183      	str	r3, [r0, #24]
   86700:	69cb      	ldr	r3, [r1, #28]
   86702:	61c3      	str	r3, [r0, #28]
   86704:	6a0b      	ldr	r3, [r1, #32]
   86706:	6203      	str	r3, [r0, #32]
   86708:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8670a:	6243      	str	r3, [r0, #36]	; 0x24
   8670c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8670e:	6283      	str	r3, [r0, #40]	; 0x28
   86710:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86712:	62c3      	str	r3, [r0, #44]	; 0x2c
   86714:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86716:	6303      	str	r3, [r0, #48]	; 0x30
   86718:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8671a:	6343      	str	r3, [r0, #52]	; 0x34
   8671c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8671e:	6383      	str	r3, [r0, #56]	; 0x38
   86720:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86722:	63c3      	str	r3, [r0, #60]	; 0x3c
   86724:	3040      	adds	r0, #64	; 0x40
   86726:	3140      	adds	r1, #64	; 0x40
   86728:	3a40      	subs	r2, #64	; 0x40
   8672a:	d2db      	bcs.n	866e4 <memcpy+0x10>
   8672c:	3230      	adds	r2, #48	; 0x30
   8672e:	d30b      	bcc.n	86748 <memcpy+0x74>
   86730:	680b      	ldr	r3, [r1, #0]
   86732:	6003      	str	r3, [r0, #0]
   86734:	684b      	ldr	r3, [r1, #4]
   86736:	6043      	str	r3, [r0, #4]
   86738:	688b      	ldr	r3, [r1, #8]
   8673a:	6083      	str	r3, [r0, #8]
   8673c:	68cb      	ldr	r3, [r1, #12]
   8673e:	60c3      	str	r3, [r0, #12]
   86740:	3010      	adds	r0, #16
   86742:	3110      	adds	r1, #16
   86744:	3a10      	subs	r2, #16
   86746:	d2f3      	bcs.n	86730 <memcpy+0x5c>
   86748:	320c      	adds	r2, #12
   8674a:	d305      	bcc.n	86758 <memcpy+0x84>
   8674c:	f851 3b04 	ldr.w	r3, [r1], #4
   86750:	f840 3b04 	str.w	r3, [r0], #4
   86754:	3a04      	subs	r2, #4
   86756:	d2f9      	bcs.n	8674c <memcpy+0x78>
   86758:	3204      	adds	r2, #4
   8675a:	d008      	beq.n	8676e <memcpy+0x9a>
   8675c:	07d2      	lsls	r2, r2, #31
   8675e:	bf1c      	itt	ne
   86760:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86764:	f800 3b01 	strbne.w	r3, [r0], #1
   86768:	d301      	bcc.n	8676e <memcpy+0x9a>
   8676a:	880b      	ldrh	r3, [r1, #0]
   8676c:	8003      	strh	r3, [r0, #0]
   8676e:	4660      	mov	r0, ip
   86770:	4770      	bx	lr
   86772:	bf00      	nop
   86774:	2a08      	cmp	r2, #8
   86776:	d313      	bcc.n	867a0 <memcpy+0xcc>
   86778:	078b      	lsls	r3, r1, #30
   8677a:	d0b1      	beq.n	866e0 <memcpy+0xc>
   8677c:	f010 0303 	ands.w	r3, r0, #3
   86780:	d0ae      	beq.n	866e0 <memcpy+0xc>
   86782:	f1c3 0304 	rsb	r3, r3, #4
   86786:	1ad2      	subs	r2, r2, r3
   86788:	07db      	lsls	r3, r3, #31
   8678a:	bf1c      	itt	ne
   8678c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86790:	f800 3b01 	strbne.w	r3, [r0], #1
   86794:	d3a4      	bcc.n	866e0 <memcpy+0xc>
   86796:	f831 3b02 	ldrh.w	r3, [r1], #2
   8679a:	f820 3b02 	strh.w	r3, [r0], #2
   8679e:	e79f      	b.n	866e0 <memcpy+0xc>
   867a0:	3a04      	subs	r2, #4
   867a2:	d3d9      	bcc.n	86758 <memcpy+0x84>
   867a4:	3a01      	subs	r2, #1
   867a6:	f811 3b01 	ldrb.w	r3, [r1], #1
   867aa:	f800 3b01 	strb.w	r3, [r0], #1
   867ae:	d2f9      	bcs.n	867a4 <memcpy+0xd0>
   867b0:	780b      	ldrb	r3, [r1, #0]
   867b2:	7003      	strb	r3, [r0, #0]
   867b4:	784b      	ldrb	r3, [r1, #1]
   867b6:	7043      	strb	r3, [r0, #1]
   867b8:	788b      	ldrb	r3, [r1, #2]
   867ba:	7083      	strb	r3, [r0, #2]
   867bc:	4660      	mov	r0, ip
   867be:	4770      	bx	lr

000867c0 <memset>:
   867c0:	b4f0      	push	{r4, r5, r6, r7}
   867c2:	0784      	lsls	r4, r0, #30
   867c4:	d043      	beq.n	8684e <memset+0x8e>
   867c6:	1e54      	subs	r4, r2, #1
   867c8:	2a00      	cmp	r2, #0
   867ca:	d03e      	beq.n	8684a <memset+0x8a>
   867cc:	b2cd      	uxtb	r5, r1
   867ce:	4603      	mov	r3, r0
   867d0:	e003      	b.n	867da <memset+0x1a>
   867d2:	1e62      	subs	r2, r4, #1
   867d4:	2c00      	cmp	r4, #0
   867d6:	d038      	beq.n	8684a <memset+0x8a>
   867d8:	4614      	mov	r4, r2
   867da:	f803 5b01 	strb.w	r5, [r3], #1
   867de:	079a      	lsls	r2, r3, #30
   867e0:	d1f7      	bne.n	867d2 <memset+0x12>
   867e2:	2c03      	cmp	r4, #3
   867e4:	d92a      	bls.n	8683c <memset+0x7c>
   867e6:	b2cd      	uxtb	r5, r1
   867e8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   867ec:	2c0f      	cmp	r4, #15
   867ee:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   867f2:	d915      	bls.n	86820 <memset+0x60>
   867f4:	f1a4 0710 	sub.w	r7, r4, #16
   867f8:	093f      	lsrs	r7, r7, #4
   867fa:	f103 0610 	add.w	r6, r3, #16
   867fe:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   86802:	461a      	mov	r2, r3
   86804:	6015      	str	r5, [r2, #0]
   86806:	6055      	str	r5, [r2, #4]
   86808:	6095      	str	r5, [r2, #8]
   8680a:	60d5      	str	r5, [r2, #12]
   8680c:	3210      	adds	r2, #16
   8680e:	42b2      	cmp	r2, r6
   86810:	d1f8      	bne.n	86804 <memset+0x44>
   86812:	f004 040f 	and.w	r4, r4, #15
   86816:	3701      	adds	r7, #1
   86818:	2c03      	cmp	r4, #3
   8681a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   8681e:	d90d      	bls.n	8683c <memset+0x7c>
   86820:	461e      	mov	r6, r3
   86822:	4622      	mov	r2, r4
   86824:	3a04      	subs	r2, #4
   86826:	2a03      	cmp	r2, #3
   86828:	f846 5b04 	str.w	r5, [r6], #4
   8682c:	d8fa      	bhi.n	86824 <memset+0x64>
   8682e:	1f22      	subs	r2, r4, #4
   86830:	f022 0203 	bic.w	r2, r2, #3
   86834:	3204      	adds	r2, #4
   86836:	4413      	add	r3, r2
   86838:	f004 0403 	and.w	r4, r4, #3
   8683c:	b12c      	cbz	r4, 8684a <memset+0x8a>
   8683e:	b2c9      	uxtb	r1, r1
   86840:	441c      	add	r4, r3
   86842:	f803 1b01 	strb.w	r1, [r3], #1
   86846:	42a3      	cmp	r3, r4
   86848:	d1fb      	bne.n	86842 <memset+0x82>
   8684a:	bcf0      	pop	{r4, r5, r6, r7}
   8684c:	4770      	bx	lr
   8684e:	4614      	mov	r4, r2
   86850:	4603      	mov	r3, r0
   86852:	e7c6      	b.n	867e2 <memset+0x22>

00086854 <register_fini>:
   86854:	4b02      	ldr	r3, [pc, #8]	; (86860 <register_fini+0xc>)
   86856:	b113      	cbz	r3, 8685e <register_fini+0xa>
   86858:	4802      	ldr	r0, [pc, #8]	; (86864 <register_fini+0x10>)
   8685a:	f000 b805 	b.w	86868 <atexit>
   8685e:	4770      	bx	lr
   86860:	00000000 	.word	0x00000000
   86864:	00086875 	.word	0x00086875

00086868 <atexit>:
   86868:	4601      	mov	r1, r0
   8686a:	2000      	movs	r0, #0
   8686c:	4602      	mov	r2, r0
   8686e:	4603      	mov	r3, r0
   86870:	f000 b818 	b.w	868a4 <__register_exitproc>

00086874 <__libc_fini_array>:
   86874:	b538      	push	{r3, r4, r5, lr}
   86876:	4d09      	ldr	r5, [pc, #36]	; (8689c <__libc_fini_array+0x28>)
   86878:	4c09      	ldr	r4, [pc, #36]	; (868a0 <__libc_fini_array+0x2c>)
   8687a:	1b64      	subs	r4, r4, r5
   8687c:	10a4      	asrs	r4, r4, #2
   8687e:	bf18      	it	ne
   86880:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   86884:	d005      	beq.n	86892 <__libc_fini_array+0x1e>
   86886:	3c01      	subs	r4, #1
   86888:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8688c:	4798      	blx	r3
   8688e:	2c00      	cmp	r4, #0
   86890:	d1f9      	bne.n	86886 <__libc_fini_array+0x12>
   86892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86896:	f000 b925 	b.w	86ae4 <_fini>
   8689a:	bf00      	nop
   8689c:	00086af0 	.word	0x00086af0
   868a0:	00086af4 	.word	0x00086af4

000868a4 <__register_exitproc>:
   868a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   868a6:	4c27      	ldr	r4, [pc, #156]	; (86944 <__register_exitproc+0xa0>)
   868a8:	b085      	sub	sp, #20
   868aa:	6826      	ldr	r6, [r4, #0]
   868ac:	4607      	mov	r7, r0
   868ae:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   868b2:	2c00      	cmp	r4, #0
   868b4:	d040      	beq.n	86938 <__register_exitproc+0x94>
   868b6:	6865      	ldr	r5, [r4, #4]
   868b8:	2d1f      	cmp	r5, #31
   868ba:	dd1e      	ble.n	868fa <__register_exitproc+0x56>
   868bc:	4822      	ldr	r0, [pc, #136]	; (86948 <__register_exitproc+0xa4>)
   868be:	b918      	cbnz	r0, 868c8 <__register_exitproc+0x24>
   868c0:	f04f 30ff 	mov.w	r0, #4294967295
   868c4:	b005      	add	sp, #20
   868c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   868c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   868cc:	9103      	str	r1, [sp, #12]
   868ce:	9202      	str	r2, [sp, #8]
   868d0:	9301      	str	r3, [sp, #4]
   868d2:	f3af 8000 	nop.w
   868d6:	9903      	ldr	r1, [sp, #12]
   868d8:	4604      	mov	r4, r0
   868da:	9a02      	ldr	r2, [sp, #8]
   868dc:	9b01      	ldr	r3, [sp, #4]
   868de:	2800      	cmp	r0, #0
   868e0:	d0ee      	beq.n	868c0 <__register_exitproc+0x1c>
   868e2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   868e6:	2000      	movs	r0, #0
   868e8:	6025      	str	r5, [r4, #0]
   868ea:	6060      	str	r0, [r4, #4]
   868ec:	4605      	mov	r5, r0
   868ee:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   868f2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   868f6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   868fa:	b93f      	cbnz	r7, 8690c <__register_exitproc+0x68>
   868fc:	1c6b      	adds	r3, r5, #1
   868fe:	2000      	movs	r0, #0
   86900:	3502      	adds	r5, #2
   86902:	6063      	str	r3, [r4, #4]
   86904:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86908:	b005      	add	sp, #20
   8690a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8690c:	2601      	movs	r6, #1
   8690e:	40ae      	lsls	r6, r5
   86910:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86914:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86918:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8691c:	2f02      	cmp	r7, #2
   8691e:	ea42 0206 	orr.w	r2, r2, r6
   86922:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86926:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   8692a:	d1e7      	bne.n	868fc <__register_exitproc+0x58>
   8692c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86930:	431e      	orrs	r6, r3
   86932:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86936:	e7e1      	b.n	868fc <__register_exitproc+0x58>
   86938:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   8693c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86940:	e7b9      	b.n	868b6 <__register_exitproc+0x12>
   86942:	bf00      	nop
   86944:	00086acc 	.word	0x00086acc
   86948:	00000000 	.word	0x00000000
   8694c:	00004e4f 	.word	0x00004e4f

00086950 <ulLED>:
   86950:	00000057 00000056 0000003b 00000055     W...V...;...U...
   86960:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   86970:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   86980:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   86990:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   869a0:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   869b0:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   869c0:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   869d0:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   869e0:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   869f0:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86a00:	0001c200 000000c0 00000800 00000000     ................
	...
   86a18:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   86a28:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00086a38 <can_bit_time>:
   86a38:	02020308 02094b03 43020303 0303030a     .....K.....C....
   86a48:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   86a58:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   86a68:	05050510 06114504 47040505 06060512     .....E.....G....
   86a78:	06134304 44040606 06060714 08154604     .C.....D.....F..
   86a88:	47040606 07070716 08174404 46040708     ...G.....D.....F
   86a98:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   86aa8:	00000000                                ....

00086aac <ucExpectedStackBytes.5295>:
   86aac:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   86abc:	a5a5a5a5 20726d54 00637653 00000043     ....Tmr Svc.C...

00086acc <_global_impure_ptr>:
   86acc:	20070010                                ... 

00086ad0 <_init>:
   86ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ad2:	bf00      	nop
   86ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86ad6:	bc08      	pop	{r3}
   86ad8:	469e      	mov	lr, r3
   86ada:	4770      	bx	lr

00086adc <__init_array_start>:
   86adc:	00086855 	.word	0x00086855

00086ae0 <__frame_dummy_init_array_entry>:
   86ae0:	00080119                                ....

00086ae4 <_fini>:
   86ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ae6:	bf00      	nop
   86ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86aea:	bc08      	pop	{r3}
   86aec:	469e      	mov	lr, r3
   86aee:	4770      	bx	lr

00086af0 <__fini_array_start>:
   86af0:	000800f5 	.word	0x000800f5
