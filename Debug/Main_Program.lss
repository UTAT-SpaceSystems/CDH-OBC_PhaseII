
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005020  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00085020  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a25c  20070438  00085458  00010438  2**2
                  ALLOC
  3 .stack        00002004  2007a694  0008f6b4  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000e795  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002896  00000000  00000000  0001ec51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006048  00000000  00000000  000214e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010a8  00000000  00000000  0002752f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000f18  00000000  00000000  000285d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a900  00000000  00000000  000294ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000137a9  00000000  00000000  00043def  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00067f93  00000000  00000000  00057598  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003678  00000000  00000000  000bf52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c698 	.word	0x2007c698
   80004:	00082871 	.word	0x00082871
   80008:	00082869 	.word	0x00082869
   8000c:	00082869 	.word	0x00082869
   80010:	00082869 	.word	0x00082869
   80014:	00082869 	.word	0x00082869
   80018:	00082869 	.word	0x00082869
	...
   8002c:	00082c15 	.word	0x00082c15
   80030:	00082869 	.word	0x00082869
   80034:	00000000 	.word	0x00000000
   80038:	00082cf1 	.word	0x00082cf1
   8003c:	00082d35 	.word	0x00082d35
   80040:	00082869 	.word	0x00082869
   80044:	00082869 	.word	0x00082869
   80048:	00082869 	.word	0x00082869
   8004c:	00082869 	.word	0x00082869
   80050:	000845e1 	.word	0x000845e1
   80054:	00082869 	.word	0x00082869
   80058:	00082869 	.word	0x00082869
   8005c:	00082869 	.word	0x00082869
   80060:	00082869 	.word	0x00082869
   80064:	00082869 	.word	0x00082869
   80068:	00000000 	.word	0x00000000
   8006c:	000821f1 	.word	0x000821f1
   80070:	00082209 	.word	0x00082209
   80074:	00082221 	.word	0x00082221
   80078:	00082239 	.word	0x00082239
	...
   80084:	00080cb9 	.word	0x00080cb9
   80088:	00082869 	.word	0x00082869
   8008c:	00082869 	.word	0x00082869
   80090:	00082869 	.word	0x00082869
   80094:	00082869 	.word	0x00082869
   80098:	00082869 	.word	0x00082869
   8009c:	00082869 	.word	0x00082869
   800a0:	000809dd 	.word	0x000809dd
   800a4:	00000000 	.word	0x00000000
   800a8:	00082869 	.word	0x00082869
   800ac:	00082869 	.word	0x00082869
   800b0:	00082869 	.word	0x00082869
   800b4:	00082869 	.word	0x00082869
   800b8:	00082869 	.word	0x00082869
   800bc:	00082869 	.word	0x00082869
   800c0:	00082869 	.word	0x00082869
   800c4:	00082869 	.word	0x00082869
   800c8:	00082869 	.word	0x00082869
   800cc:	00082869 	.word	0x00082869
   800d0:	00082869 	.word	0x00082869
   800d4:	00082869 	.word	0x00082869
   800d8:	00082869 	.word	0x00082869
   800dc:	00082869 	.word	0x00082869
   800e0:	00082869 	.word	0x00082869
   800e4:	00082869 	.word	0x00082869
   800e8:	00082869 	.word	0x00082869
   800ec:	00083bf1 	.word	0x00083bf1
   800f0:	00083b01 	.word	0x00083b01

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00085020 	.word	0x00085020

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085020 	.word	0x00085020
   8013c:	2007043c 	.word	0x2007043c
   80140:	00085020 	.word	0x00085020
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	000824bd 	.word	0x000824bd

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   80280:	b580      	push	{r7, lr}
   80282:	b084      	sub	sp, #16
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
   80288:	8079      	strh	r1, [r7, #2]
   8028a:	707a      	strb	r2, [r7, #1]
   8028c:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   8028e:	f643 2398 	movw	r3, #15000	; 0x3a98
   80292:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   80294:	e006      	b.n	802a4 <spi_write+0x24>
		if (!timeout--) {
   80296:	68fb      	ldr	r3, [r7, #12]
   80298:	1e5a      	subs	r2, r3, #1
   8029a:	60fa      	str	r2, [r7, #12]
   8029c:	2b00      	cmp	r3, #0
   8029e:	d101      	bne.n	802a4 <spi_write+0x24>
			return SPI_ERROR_TIMEOUT;
   802a0:	2301      	movs	r3, #1
   802a2:	e023      	b.n	802ec <spi_write+0x6c>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   802a4:	687b      	ldr	r3, [r7, #4]
   802a6:	691b      	ldr	r3, [r3, #16]
   802a8:	f003 0302 	and.w	r3, r3, #2
   802ac:	2b00      	cmp	r3, #0
   802ae:	d0f2      	beq.n	80296 <spi_write+0x16>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   802b0:	6878      	ldr	r0, [r7, #4]
   802b2:	4b11      	ldr	r3, [pc, #68]	; (802f8 <spi_write+0x78>)
   802b4:	4798      	blx	r3
   802b6:	4603      	mov	r3, r0
   802b8:	2b00      	cmp	r3, #0
   802ba:	d00e      	beq.n	802da <spi_write+0x5a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   802bc:	887a      	ldrh	r2, [r7, #2]
   802be:	787b      	ldrb	r3, [r7, #1]
   802c0:	041b      	lsls	r3, r3, #16
   802c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   802c6:	4313      	orrs	r3, r2
   802c8:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   802ca:	783b      	ldrb	r3, [r7, #0]
   802cc:	2b00      	cmp	r3, #0
   802ce:	d006      	beq.n	802de <spi_write+0x5e>
			value |= SPI_TDR_LASTXFER;
   802d0:	68bb      	ldr	r3, [r7, #8]
   802d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   802d6:	60bb      	str	r3, [r7, #8]
   802d8:	e001      	b.n	802de <spi_write+0x5e>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   802da:	887b      	ldrh	r3, [r7, #2]
   802dc:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   802de:	687b      	ldr	r3, [r7, #4]
   802e0:	68ba      	ldr	r2, [r7, #8]
   802e2:	60da      	str	r2, [r3, #12]
	
	pio_toggle_pin(LED0_GPIO);
   802e4:	203b      	movs	r0, #59	; 0x3b
   802e6:	4b05      	ldr	r3, [pc, #20]	; (802fc <spi_write+0x7c>)
   802e8:	4798      	blx	r3

	return SPI_OK;
   802ea:	2300      	movs	r3, #0
   802ec:	b25b      	sxtb	r3, r3
}
   802ee:	4618      	mov	r0, r3
   802f0:	3710      	adds	r7, #16
   802f2:	46bd      	mov	sp, r7
   802f4:	bd80      	pop	{r7, pc}
   802f6:	bf00      	nop
   802f8:	00080149 	.word	0x00080149
   802fc:	00081ed1 	.word	0x00081ed1

00080300 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80300:	b480      	push	{r7}
   80302:	b085      	sub	sp, #20
   80304:	af00      	add	r7, sp, #0
   80306:	60f8      	str	r0, [r7, #12]
   80308:	60b9      	str	r1, [r7, #8]
   8030a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8030c:	687b      	ldr	r3, [r7, #4]
   8030e:	2b00      	cmp	r3, #0
   80310:	d00c      	beq.n	8032c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80312:	68fb      	ldr	r3, [r7, #12]
   80314:	68ba      	ldr	r2, [r7, #8]
   80316:	320c      	adds	r2, #12
   80318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8031c:	f043 0101 	orr.w	r1, r3, #1
   80320:	68fb      	ldr	r3, [r7, #12]
   80322:	68ba      	ldr	r2, [r7, #8]
   80324:	320c      	adds	r2, #12
   80326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8032a:	e00b      	b.n	80344 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   8032c:	68fb      	ldr	r3, [r7, #12]
   8032e:	68ba      	ldr	r2, [r7, #8]
   80330:	320c      	adds	r2, #12
   80332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80336:	f023 0101 	bic.w	r1, r3, #1
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	68ba      	ldr	r2, [r7, #8]
   8033e:	320c      	adds	r2, #12
   80340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80344:	3714      	adds	r7, #20
   80346:	46bd      	mov	sp, r7
   80348:	f85d 7b04 	ldr.w	r7, [sp], #4
   8034c:	4770      	bx	lr
   8034e:	bf00      	nop

00080350 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   80350:	b480      	push	{r7}
   80352:	b085      	sub	sp, #20
   80354:	af00      	add	r7, sp, #0
   80356:	60f8      	str	r0, [r7, #12]
   80358:	60b9      	str	r1, [r7, #8]
   8035a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   8035c:	687b      	ldr	r3, [r7, #4]
   8035e:	2b00      	cmp	r3, #0
   80360:	d00c      	beq.n	8037c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   80362:	68fb      	ldr	r3, [r7, #12]
   80364:	68ba      	ldr	r2, [r7, #8]
   80366:	320c      	adds	r2, #12
   80368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8036c:	f043 0102 	orr.w	r1, r3, #2
   80370:	68fb      	ldr	r3, [r7, #12]
   80372:	68ba      	ldr	r2, [r7, #8]
   80374:	320c      	adds	r2, #12
   80376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8037a:	e00b      	b.n	80394 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   8037c:	68fb      	ldr	r3, [r7, #12]
   8037e:	68ba      	ldr	r2, [r7, #8]
   80380:	320c      	adds	r2, #12
   80382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80386:	f023 0102 	bic.w	r1, r3, #2
   8038a:	68fb      	ldr	r3, [r7, #12]
   8038c:	68ba      	ldr	r2, [r7, #8]
   8038e:	320c      	adds	r2, #12
   80390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80394:	3714      	adds	r7, #20
   80396:	46bd      	mov	sp, r7
   80398:	f85d 7b04 	ldr.w	r7, [sp], #4
   8039c:	4770      	bx	lr
   8039e:	bf00      	nop

000803a0 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   803a0:	b480      	push	{r7}
   803a2:	b085      	sub	sp, #20
   803a4:	af00      	add	r7, sp, #0
   803a6:	60f8      	str	r0, [r7, #12]
   803a8:	60b9      	str	r1, [r7, #8]
   803aa:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   803ac:	687b      	ldr	r3, [r7, #4]
   803ae:	2b04      	cmp	r3, #4
   803b0:	d118      	bne.n	803e4 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803b2:	68fb      	ldr	r3, [r7, #12]
   803b4:	68ba      	ldr	r2, [r7, #8]
   803b6:	320c      	adds	r2, #12
   803b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803bc:	f023 0108 	bic.w	r1, r3, #8
   803c0:	68fb      	ldr	r3, [r7, #12]
   803c2:	68ba      	ldr	r2, [r7, #8]
   803c4:	320c      	adds	r2, #12
   803c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   803ca:	68fb      	ldr	r3, [r7, #12]
   803cc:	68ba      	ldr	r2, [r7, #8]
   803ce:	320c      	adds	r2, #12
   803d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803d4:	f043 0104 	orr.w	r1, r3, #4
   803d8:	68fb      	ldr	r3, [r7, #12]
   803da:	68ba      	ldr	r2, [r7, #8]
   803dc:	320c      	adds	r2, #12
   803de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   803e2:	e02a      	b.n	8043a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   803e4:	687b      	ldr	r3, [r7, #4]
   803e6:	2b00      	cmp	r3, #0
   803e8:	d118      	bne.n	8041c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   803ea:	68fb      	ldr	r3, [r7, #12]
   803ec:	68ba      	ldr	r2, [r7, #8]
   803ee:	320c      	adds	r2, #12
   803f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803f4:	f023 0108 	bic.w	r1, r3, #8
   803f8:	68fb      	ldr	r3, [r7, #12]
   803fa:	68ba      	ldr	r2, [r7, #8]
   803fc:	320c      	adds	r2, #12
   803fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80402:	68fb      	ldr	r3, [r7, #12]
   80404:	68ba      	ldr	r2, [r7, #8]
   80406:	320c      	adds	r2, #12
   80408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8040c:	f023 0104 	bic.w	r1, r3, #4
   80410:	68fb      	ldr	r3, [r7, #12]
   80412:	68ba      	ldr	r2, [r7, #8]
   80414:	320c      	adds	r2, #12
   80416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8041a:	e00e      	b.n	8043a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8041c:	687b      	ldr	r3, [r7, #4]
   8041e:	2b08      	cmp	r3, #8
   80420:	d10b      	bne.n	8043a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   80422:	68fb      	ldr	r3, [r7, #12]
   80424:	68ba      	ldr	r2, [r7, #8]
   80426:	320c      	adds	r2, #12
   80428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8042c:	f043 0108 	orr.w	r1, r3, #8
   80430:	68fb      	ldr	r3, [r7, #12]
   80432:	68ba      	ldr	r2, [r7, #8]
   80434:	320c      	adds	r2, #12
   80436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   8043a:	3714      	adds	r7, #20
   8043c:	46bd      	mov	sp, r7
   8043e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80442:	4770      	bx	lr

00080444 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   80444:	b480      	push	{r7}
   80446:	b085      	sub	sp, #20
   80448:	af00      	add	r7, sp, #0
   8044a:	60f8      	str	r0, [r7, #12]
   8044c:	60b9      	str	r1, [r7, #8]
   8044e:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   80450:	68fb      	ldr	r3, [r7, #12]
   80452:	68ba      	ldr	r2, [r7, #8]
   80454:	320c      	adds	r2, #12
   80456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8045a:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   8045e:	68fb      	ldr	r3, [r7, #12]
   80460:	68ba      	ldr	r2, [r7, #8]
   80462:	320c      	adds	r2, #12
   80464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   80468:	68fb      	ldr	r3, [r7, #12]
   8046a:	68ba      	ldr	r2, [r7, #8]
   8046c:	320c      	adds	r2, #12
   8046e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   80472:	687b      	ldr	r3, [r7, #4]
   80474:	ea42 0103 	orr.w	r1, r2, r3
   80478:	68fb      	ldr	r3, [r7, #12]
   8047a:	68ba      	ldr	r2, [r7, #8]
   8047c:	320c      	adds	r2, #12
   8047e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80482:	3714      	adds	r7, #20
   80484:	46bd      	mov	sp, r7
   80486:	f85d 7b04 	ldr.w	r7, [sp], #4
   8048a:	4770      	bx	lr

0008048c <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   8048c:	b480      	push	{r7}
   8048e:	b085      	sub	sp, #20
   80490:	af00      	add	r7, sp, #0
   80492:	6078      	str	r0, [r7, #4]
   80494:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   80496:	683a      	ldr	r2, [r7, #0]
   80498:	687b      	ldr	r3, [r7, #4]
   8049a:	4413      	add	r3, r2
   8049c:	1e5a      	subs	r2, r3, #1
   8049e:	687b      	ldr	r3, [r7, #4]
   804a0:	fbb2 f3f3 	udiv	r3, r2, r3
   804a4:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   804a6:	68fb      	ldr	r3, [r7, #12]
   804a8:	2b00      	cmp	r3, #0
   804aa:	dd02      	ble.n	804b2 <spi_calc_baudrate_div+0x26>
   804ac:	68fb      	ldr	r3, [r7, #12]
   804ae:	2bff      	cmp	r3, #255	; 0xff
   804b0:	dd02      	ble.n	804b8 <spi_calc_baudrate_div+0x2c>
		return -1;
   804b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   804b6:	e001      	b.n	804bc <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   804b8:	68fb      	ldr	r3, [r7, #12]
   804ba:	b29b      	uxth	r3, r3
   804bc:	b21b      	sxth	r3, r3
}
   804be:	4618      	mov	r0, r3
   804c0:	3714      	adds	r7, #20
   804c2:	46bd      	mov	sp, r7
   804c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   804c8:	4770      	bx	lr
   804ca:	bf00      	nop

000804cc <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   804cc:	b480      	push	{r7}
   804ce:	b085      	sub	sp, #20
   804d0:	af00      	add	r7, sp, #0
   804d2:	60f8      	str	r0, [r7, #12]
   804d4:	60b9      	str	r1, [r7, #8]
   804d6:	4613      	mov	r3, r2
   804d8:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   804da:	68fb      	ldr	r3, [r7, #12]
   804dc:	68ba      	ldr	r2, [r7, #8]
   804de:	320c      	adds	r2, #12
   804e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804e4:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   804e8:	68fb      	ldr	r3, [r7, #12]
   804ea:	68ba      	ldr	r2, [r7, #8]
   804ec:	320c      	adds	r2, #12
   804ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   804f2:	68fb      	ldr	r3, [r7, #12]
   804f4:	68ba      	ldr	r2, [r7, #8]
   804f6:	320c      	adds	r2, #12
   804f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804fc:	79fb      	ldrb	r3, [r7, #7]
   804fe:	021b      	lsls	r3, r3, #8
   80500:	b29b      	uxth	r3, r3
   80502:	ea42 0103 	orr.w	r1, r2, r3
   80506:	68fb      	ldr	r3, [r7, #12]
   80508:	68ba      	ldr	r2, [r7, #8]
   8050a:	320c      	adds	r2, #12
   8050c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80510:	3714      	adds	r7, #20
   80512:	46bd      	mov	sp, r7
   80514:	f85d 7b04 	ldr.w	r7, [sp], #4
   80518:	4770      	bx	lr
   8051a:	bf00      	nop

0008051c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8051c:	b480      	push	{r7}
   8051e:	b085      	sub	sp, #20
   80520:	af00      	add	r7, sp, #0
   80522:	60f8      	str	r0, [r7, #12]
   80524:	60b9      	str	r1, [r7, #8]
   80526:	71fa      	strb	r2, [r7, #7]
   80528:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	68ba      	ldr	r2, [r7, #8]
   8052e:	320c      	adds	r2, #12
   80530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80534:	b299      	uxth	r1, r3
   80536:	68fb      	ldr	r3, [r7, #12]
   80538:	68ba      	ldr	r2, [r7, #8]
   8053a:	320c      	adds	r2, #12
   8053c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80540:	68fb      	ldr	r3, [r7, #12]
   80542:	68ba      	ldr	r2, [r7, #8]
   80544:	320c      	adds	r2, #12
   80546:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8054a:	79fb      	ldrb	r3, [r7, #7]
   8054c:	041b      	lsls	r3, r3, #16
   8054e:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   80552:	79bb      	ldrb	r3, [r7, #6]
   80554:	061b      	lsls	r3, r3, #24
   80556:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   80558:	ea42 0103 	orr.w	r1, r2, r3
   8055c:	68fb      	ldr	r3, [r7, #12]
   8055e:	68ba      	ldr	r2, [r7, #8]
   80560:	320c      	adds	r2, #12
   80562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   80566:	3714      	adds	r7, #20
   80568:	46bd      	mov	sp, r7
   8056a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8056e:	4770      	bx	lr

00080570 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   80570:	b580      	push	{r7, lr}
   80572:	b082      	sub	sp, #8
   80574:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   80576:	2300      	movs	r3, #0
   80578:	607b      	str	r3, [r7, #4]
   8057a:	e00f      	b.n	8059c <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   8057c:	4b0a      	ldr	r3, [pc, #40]	; (805a8 <vParTestInitialise+0x38>)
   8057e:	687a      	ldr	r2, [r7, #4]
   80580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80584:	4618      	mov	r0, r3
   80586:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8058a:	4b08      	ldr	r3, [pc, #32]	; (805ac <vParTestInitialise+0x3c>)
   8058c:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8058e:	6878      	ldr	r0, [r7, #4]
   80590:	2100      	movs	r1, #0
   80592:	4b07      	ldr	r3, [pc, #28]	; (805b0 <vParTestInitialise+0x40>)
   80594:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   80596:	687b      	ldr	r3, [r7, #4]
   80598:	3301      	adds	r3, #1
   8059a:	607b      	str	r3, [r7, #4]
   8059c:	687b      	ldr	r3, [r7, #4]
   8059e:	2b03      	cmp	r3, #3
   805a0:	d9ec      	bls.n	8057c <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   805a2:	3708      	adds	r7, #8
   805a4:	46bd      	mov	sp, r7
   805a6:	bd80      	pop	{r7, pc}
   805a8:	00084e8c 	.word	0x00084e8c
   805ac:	00081f31 	.word	0x00081f31
   805b0:	000805b5 	.word	0x000805b5

000805b4 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   805b4:	b580      	push	{r7, lr}
   805b6:	b082      	sub	sp, #8
   805b8:	af00      	add	r7, sp, #0
   805ba:	6078      	str	r0, [r7, #4]
   805bc:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   805be:	687b      	ldr	r3, [r7, #4]
   805c0:	2b03      	cmp	r3, #3
   805c2:	d823      	bhi.n	8060c <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   805c4:	687b      	ldr	r3, [r7, #4]
   805c6:	2b00      	cmp	r3, #0
   805c8:	d106      	bne.n	805d8 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   805ca:	683b      	ldr	r3, [r7, #0]
   805cc:	2b00      	cmp	r3, #0
   805ce:	bf14      	ite	ne
   805d0:	2300      	movne	r3, #0
   805d2:	2301      	moveq	r3, #1
   805d4:	b2db      	uxtb	r3, r3
   805d6:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   805d8:	683b      	ldr	r3, [r7, #0]
   805da:	2b00      	cmp	r3, #0
   805dc:	d00b      	beq.n	805f6 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   805de:	4b0d      	ldr	r3, [pc, #52]	; (80614 <vParTestSetLED+0x60>)
   805e0:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   805e2:	4b0d      	ldr	r3, [pc, #52]	; (80618 <vParTestSetLED+0x64>)
   805e4:	687a      	ldr	r2, [r7, #4]
   805e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   805ea:	4618      	mov	r0, r3
   805ec:	4b0b      	ldr	r3, [pc, #44]	; (8061c <vParTestSetLED+0x68>)
   805ee:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   805f0:	4b0b      	ldr	r3, [pc, #44]	; (80620 <vParTestSetLED+0x6c>)
   805f2:	4798      	blx	r3
   805f4:	e00a      	b.n	8060c <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   805f6:	4b07      	ldr	r3, [pc, #28]	; (80614 <vParTestSetLED+0x60>)
   805f8:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   805fa:	4b07      	ldr	r3, [pc, #28]	; (80618 <vParTestSetLED+0x64>)
   805fc:	687a      	ldr	r2, [r7, #4]
   805fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80602:	4618      	mov	r0, r3
   80604:	4b07      	ldr	r3, [pc, #28]	; (80624 <vParTestSetLED+0x70>)
   80606:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   80608:	4b05      	ldr	r3, [pc, #20]	; (80620 <vParTestSetLED+0x6c>)
   8060a:	4798      	blx	r3
		}
	}
}
   8060c:	3708      	adds	r7, #8
   8060e:	46bd      	mov	sp, r7
   80610:	bd80      	pop	{r7, pc}
   80612:	bf00      	nop
   80614:	00082c59 	.word	0x00082c59
   80618:	00084e8c 	.word	0x00084e8c
   8061c:	00081e9d 	.word	0x00081e9d
   80620:	00082c9d 	.word	0x00082c9d
   80624:	00081e69 	.word	0x00081e69

00080628 <dectobcd>:

/** 
 * \brief Decimal to binary coded decimal conversion
 */
static uint8_t dectobcd(uint8_t val)
{
   80628:	b480      	push	{r7}
   8062a:	b083      	sub	sp, #12
   8062c:	af00      	add	r7, sp, #0
   8062e:	4603      	mov	r3, r0
   80630:	71fb      	strb	r3, [r7, #7]
	return ((val / 10 * 16) + (val % 10));
   80632:	79fa      	ldrb	r2, [r7, #7]
   80634:	4b0c      	ldr	r3, [pc, #48]	; (80668 <dectobcd+0x40>)
   80636:	fba3 1302 	umull	r1, r3, r3, r2
   8063a:	08db      	lsrs	r3, r3, #3
   8063c:	b2db      	uxtb	r3, r3
   8063e:	011b      	lsls	r3, r3, #4
   80640:	b2d8      	uxtb	r0, r3
   80642:	79fa      	ldrb	r2, [r7, #7]
   80644:	4b08      	ldr	r3, [pc, #32]	; (80668 <dectobcd+0x40>)
   80646:	fba3 1302 	umull	r1, r3, r3, r2
   8064a:	08d9      	lsrs	r1, r3, #3
   8064c:	460b      	mov	r3, r1
   8064e:	009b      	lsls	r3, r3, #2
   80650:	440b      	add	r3, r1
   80652:	005b      	lsls	r3, r3, #1
   80654:	1ad3      	subs	r3, r2, r3
   80656:	b2db      	uxtb	r3, r3
   80658:	4403      	add	r3, r0
   8065a:	b2db      	uxtb	r3, r3
}
   8065c:	4618      	mov	r0, r3
   8065e:	370c      	adds	r7, #12
   80660:	46bd      	mov	sp, r7
   80662:	f85d 7b04 	ldr.w	r7, [sp], #4
   80666:	4770      	bx	lr
   80668:	cccccccd 	.word	0xcccccccd

0008066c <bcdtodec>:

/** 
 * \brief Binary coded decimal to decimal conversion
 */
static uint8_t bcdtodec(uint8_t val)
{
   8066c:	b480      	push	{r7}
   8066e:	b083      	sub	sp, #12
   80670:	af00      	add	r7, sp, #0
   80672:	4603      	mov	r3, r0
   80674:	71fb      	strb	r3, [r7, #7]
	return ((val / 16 * 10) + (val % 16));
   80676:	79fb      	ldrb	r3, [r7, #7]
   80678:	091b      	lsrs	r3, r3, #4
   8067a:	b2db      	uxtb	r3, r3
   8067c:	461a      	mov	r2, r3
   8067e:	0092      	lsls	r2, r2, #2
   80680:	4413      	add	r3, r2
   80682:	005b      	lsls	r3, r3, #1
   80684:	b2da      	uxtb	r2, r3
   80686:	79fb      	ldrb	r3, [r7, #7]
   80688:	f003 030f 	and.w	r3, r3, #15
   8068c:	b2db      	uxtb	r3, r3
   8068e:	4413      	add	r3, r2
   80690:	b2db      	uxtb	r3, r3
}
   80692:	4618      	mov	r0, r3
   80694:	370c      	adds	r7, #12
   80696:	46bd      	mov	sp, r7
   80698:	f85d 7b04 	ldr.w	r7, [sp], #4
   8069c:	4770      	bx	lr
   8069e:	bf00      	nop

000806a0 <rtc_init>:
 *  setting the time-date to 00:00:00 01/01/0000
 *
 * \param ctrl_reg_val The byte to set the control register to
 */
void rtc_init(uint16_t ctrl_reg_val)
{			
   806a0:	b580      	push	{r7, lr}
   806a2:	b084      	sub	sp, #16
   806a4:	af00      	add	r7, sp, #0
   806a6:	4603      	mov	r3, r0
   806a8:	80fb      	strh	r3, [r7, #6]
    rtc_set_creg(ctrl_reg_val);
   806aa:	88fb      	ldrh	r3, [r7, #6]
   806ac:	4618      	mov	r0, r3
   806ae:	4b0c      	ldr	r3, [pc, #48]	; (806e0 <rtc_init+0x40>)
   806b0:	4798      	blx	r3
	
	struct timestamp initial_time;

	initial_time.sec = 0x00;
   806b2:	2300      	movs	r3, #0
   806b4:	723b      	strb	r3, [r7, #8]
	initial_time.minute = 0x00;
   806b6:	2300      	movs	r3, #0
   806b8:	727b      	strb	r3, [r7, #9]
	initial_time.hour = 0x00;
   806ba:	2300      	movs	r3, #0
   806bc:	72bb      	strb	r3, [r7, #10]
	initial_time.mday = 0x01;
   806be:	2301      	movs	r3, #1
   806c0:	733b      	strb	r3, [r7, #12]
	initial_time.wday = 0x01;
   806c2:	2301      	movs	r3, #1
   806c4:	72fb      	strb	r3, [r7, #11]
	initial_time.mon = 0x01;
   806c6:	2301      	movs	r3, #1
   806c8:	737b      	strb	r3, [r7, #13]
	initial_time.year = 0x00;
   806ca:	2300      	movs	r3, #0
   806cc:	81fb      	strh	r3, [r7, #14]
	
	rtc_set(initial_time);
   806ce:	f107 0308 	add.w	r3, r7, #8
   806d2:	e893 0003 	ldmia.w	r3, {r0, r1}
   806d6:	4b03      	ldr	r3, [pc, #12]	; (806e4 <rtc_init+0x44>)
   806d8:	4798      	blx	r3
}
   806da:	3710      	adds	r7, #16
   806dc:	46bd      	mov	sp, r7
   806de:	bd80      	pop	{r7, pc}
   806e0:	00080831 	.word	0x00080831
   806e4:	000806e9 	.word	0x000806e9

000806e8 <rtc_set>:
 * \brief Set the time and date of the RTC to a specified value.
 *
 * \param t The time struct containing the new time/date to update to.
 */
void rtc_set(struct timestamp t)
{
   806e8:	b580      	push	{r7, lr}
   806ea:	b088      	sub	sp, #32
   806ec:	af00      	add	r7, sp, #0
   806ee:	463b      	mov	r3, r7
   806f0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t time_date[7] = { t.sec, t.minute, t.hour, t.wday, t.mday, t.mon, t.year };
   806f4:	783b      	ldrb	r3, [r7, #0]
   806f6:	743b      	strb	r3, [r7, #16]
   806f8:	787b      	ldrb	r3, [r7, #1]
   806fa:	747b      	strb	r3, [r7, #17]
   806fc:	78bb      	ldrb	r3, [r7, #2]
   806fe:	74bb      	strb	r3, [r7, #18]
   80700:	78fb      	ldrb	r3, [r7, #3]
   80702:	74fb      	strb	r3, [r7, #19]
   80704:	793b      	ldrb	r3, [r7, #4]
   80706:	753b      	strb	r3, [r7, #20]
   80708:	797b      	ldrb	r3, [r7, #5]
   8070a:	757b      	strb	r3, [r7, #21]
   8070c:	88fb      	ldrh	r3, [r7, #6]
   8070e:	b2db      	uxtb	r3, r3
   80710:	75bb      	strb	r3, [r7, #22]
    uint8_t i, century;
	uint16_t message, buffer_0, buffer_1, buffer_2;

    for (i = 0; i < 7; i++) 
   80712:	2300      	movs	r3, #0
   80714:	77fb      	strb	r3, [r7, #31]
   80716:	e01f      	b.n	80758 <rtc_set+0x70>
	{
		// Convert data and prepare message to send
		buffer_0 = i + 0x80;
   80718:	7ffb      	ldrb	r3, [r7, #31]
   8071a:	b29b      	uxth	r3, r3
   8071c:	3380      	adds	r3, #128	; 0x80
   8071e:	83bb      	strh	r3, [r7, #28]
		buffer_2 = dectobcd(time_date[i]);
   80720:	7ffb      	ldrb	r3, [r7, #31]
   80722:	f107 0220 	add.w	r2, r7, #32
   80726:	4413      	add	r3, r2
   80728:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   8072c:	4618      	mov	r0, r3
   8072e:	4b0d      	ldr	r3, [pc, #52]	; (80764 <rtc_set+0x7c>)
   80730:	4798      	blx	r3
   80732:	4603      	mov	r3, r0
   80734:	837b      	strh	r3, [r7, #26]
		
		message = (buffer_0 << 8) | buffer_2;
   80736:	8bbb      	ldrh	r3, [r7, #28]
   80738:	021b      	lsls	r3, r3, #8
   8073a:	b29a      	uxth	r2, r3
   8073c:	8b7b      	ldrh	r3, [r7, #26]
   8073e:	4313      	orrs	r3, r2
   80740:	b29b      	uxth	r3, r3
   80742:	b29b      	uxth	r3, r3
   80744:	81fb      	strh	r3, [r7, #14]
		spi_master_transfer(&message, 1);
   80746:	f107 030e 	add.w	r3, r7, #14
   8074a:	4618      	mov	r0, r3
   8074c:	2101      	movs	r1, #1
   8074e:	4b06      	ldr	r3, [pc, #24]	; (80768 <rtc_set+0x80>)
   80750:	4798      	blx	r3
{
	uint8_t time_date[7] = { t.sec, t.minute, t.hour, t.wday, t.mday, t.mon, t.year };
    uint8_t i, century;
	uint16_t message, buffer_0, buffer_1, buffer_2;

    for (i = 0; i < 7; i++) 
   80752:	7ffb      	ldrb	r3, [r7, #31]
   80754:	3301      	adds	r3, #1
   80756:	77fb      	strb	r3, [r7, #31]
   80758:	7ffb      	ldrb	r3, [r7, #31]
   8075a:	2b06      	cmp	r3, #6
   8075c:	d9dc      	bls.n	80718 <rtc_set+0x30>
		buffer_2 = dectobcd(time_date[i]);
		
		message = (buffer_0 << 8) | buffer_2;
		spi_master_transfer(&message, 1);
    }
}
   8075e:	3720      	adds	r7, #32
   80760:	46bd      	mov	sp, r7
   80762:	bd80      	pop	{r7, pc}
   80764:	00080629 	.word	0x00080629
   80768:	00080b19 	.word	0x00080b19

0008076c <rtc_get>:
 *
 * \param t Pointer to an empty timestamp struct that will contain
 *  the values retrieved from the RTC. 
 */
void rtc_get(struct timestamp *t)
{	
   8076c:	b590      	push	{r4, r7, lr}
   8076e:	b087      	sub	sp, #28
   80770:	af00      	add	r7, sp, #0
   80772:	6078      	str	r0, [r7, #4]
    uint8_t time_date[7];        // second, minute, hour, day of week, day of month, month, year
    uint8_t i, ret_val, century = 0;
   80774:	2300      	movs	r3, #0
   80776:	75bb      	strb	r3, [r7, #22]
    uint16_t year_full, message;
	
    for (i = 0; i < 7; i++) 
   80778:	2300      	movs	r3, #0
   8077a:	75fb      	strb	r3, [r7, #23]
   8077c:	e01d      	b.n	807ba <rtc_get+0x4e>
	{
		// Message contains the register address then an empty byte to flush it out
		message = i + 0x00;
   8077e:	7dfb      	ldrb	r3, [r7, #23]
   80780:	b29b      	uxth	r3, r3
   80782:	817b      	strh	r3, [r7, #10]
		message = message << 8;
   80784:	897b      	ldrh	r3, [r7, #10]
   80786:	021b      	lsls	r3, r3, #8
   80788:	b29b      	uxth	r3, r3
   8078a:	817b      	strh	r3, [r7, #10]

		spi_master_transfer(&message, 1);
   8078c:	f107 030a 	add.w	r3, r7, #10
   80790:	4618      	mov	r0, r3
   80792:	2101      	movs	r1, #1
   80794:	4b17      	ldr	r3, [pc, #92]	; (807f4 <rtc_get+0x88>)
   80796:	4798      	blx	r3
		
		// Get the value flushed out of the register
		ret_val = (uint8_t) message;
   80798:	897b      	ldrh	r3, [r7, #10]
   8079a:	757b      	strb	r3, [r7, #21]
		time_date[i] = bcdtodec(ret_val);	
   8079c:	7dfc      	ldrb	r4, [r7, #23]
   8079e:	7d7b      	ldrb	r3, [r7, #21]
   807a0:	4618      	mov	r0, r3
   807a2:	4b15      	ldr	r3, [pc, #84]	; (807f8 <rtc_get+0x8c>)
   807a4:	4798      	blx	r3
   807a6:	4603      	mov	r3, r0
   807a8:	461a      	mov	r2, r3
   807aa:	f107 0318 	add.w	r3, r7, #24
   807ae:	4423      	add	r3, r4
   807b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
{	
    uint8_t time_date[7];        // second, minute, hour, day of week, day of month, month, year
    uint8_t i, ret_val, century = 0;
    uint16_t year_full, message;
	
    for (i = 0; i < 7; i++) 
   807b4:	7dfb      	ldrb	r3, [r7, #23]
   807b6:	3301      	adds	r3, #1
   807b8:	75fb      	strb	r3, [r7, #23]
   807ba:	7dfb      	ldrb	r3, [r7, #23]
   807bc:	2b06      	cmp	r3, #6
   807be:	d9de      	bls.n	8077e <rtc_get+0x12>
		ret_val = (uint8_t) message;
		time_date[i] = bcdtodec(ret_val);	
    }

	// Store values into timestamp provided
    t->sec = time_date[0];
   807c0:	7b3a      	ldrb	r2, [r7, #12]
   807c2:	687b      	ldr	r3, [r7, #4]
   807c4:	701a      	strb	r2, [r3, #0]
    t->minute = time_date[1];
   807c6:	7b7a      	ldrb	r2, [r7, #13]
   807c8:	687b      	ldr	r3, [r7, #4]
   807ca:	705a      	strb	r2, [r3, #1]
    t->hour = time_date[2];
   807cc:	7bba      	ldrb	r2, [r7, #14]
   807ce:	687b      	ldr	r3, [r7, #4]
   807d0:	709a      	strb	r2, [r3, #2]
	t->wday = time_date[3];
   807d2:	7bfa      	ldrb	r2, [r7, #15]
   807d4:	687b      	ldr	r3, [r7, #4]
   807d6:	70da      	strb	r2, [r3, #3]
    t->mday = time_date[4];
   807d8:	7c3a      	ldrb	r2, [r7, #16]
   807da:	687b      	ldr	r3, [r7, #4]
   807dc:	711a      	strb	r2, [r3, #4]
    t->mon = time_date[5];
   807de:	7c7a      	ldrb	r2, [r7, #17]
   807e0:	687b      	ldr	r3, [r7, #4]
   807e2:	715a      	strb	r2, [r3, #5]
    t->year = time_date[6]; 
   807e4:	7cbb      	ldrb	r3, [r7, #18]
   807e6:	461a      	mov	r2, r3
   807e8:	687b      	ldr	r3, [r7, #4]
   807ea:	80da      	strh	r2, [r3, #6]
}
   807ec:	371c      	adds	r7, #28
   807ee:	46bd      	mov	sp, r7
   807f0:	bd90      	pop	{r4, r7, pc}
   807f2:	bf00      	nop
   807f4:	00080b19 	.word	0x00080b19
   807f8:	0008066d 	.word	0x0008066d

000807fc <rtc_set_addr>:
 *
 * \param addr RTC register address
 * \param val  New register value
 */
void rtc_set_addr(uint16_t addr, uint16_t val)
{
   807fc:	b580      	push	{r7, lr}
   807fe:	b084      	sub	sp, #16
   80800:	af00      	add	r7, sp, #0
   80802:	4602      	mov	r2, r0
   80804:	460b      	mov	r3, r1
   80806:	80fa      	strh	r2, [r7, #6]
   80808:	80bb      	strh	r3, [r7, #4]
	uint16_t message = (addr << 8) | val;
   8080a:	88fb      	ldrh	r3, [r7, #6]
   8080c:	021b      	lsls	r3, r3, #8
   8080e:	b29a      	uxth	r2, r3
   80810:	88bb      	ldrh	r3, [r7, #4]
   80812:	4313      	orrs	r3, r2
   80814:	b29b      	uxth	r3, r3
   80816:	b29b      	uxth	r3, r3
   80818:	81fb      	strh	r3, [r7, #14]
	spi_master_transfer(&message, 1);
   8081a:	f107 030e 	add.w	r3, r7, #14
   8081e:	4618      	mov	r0, r3
   80820:	2101      	movs	r1, #1
   80822:	4b02      	ldr	r3, [pc, #8]	; (8082c <rtc_set_addr+0x30>)
   80824:	4798      	blx	r3
}
   80826:	3710      	adds	r7, #16
   80828:	46bd      	mov	sp, r7
   8082a:	bd80      	pop	{r7, pc}
   8082c:	00080b19 	.word	0x00080b19

00080830 <rtc_set_creg>:
 * bit2 INTCN  Interrupt control (1 for use of the alarms and to disable square wave)
 * bit1 A2IE   Alarm1 interrupt enable (1 to enable)
 * bit0 A1IE   Alarm0 interrupt enable (1 to enable)
 */
void rtc_set_creg(uint16_t val)
{
   80830:	b580      	push	{r7, lr}
   80832:	b082      	sub	sp, #8
   80834:	af00      	add	r7, sp, #0
   80836:	4603      	mov	r3, r0
   80838:	80fb      	strh	r3, [r7, #6]
    rtc_set_addr(DS3234_CREG_WRITE, val);
   8083a:	88fb      	ldrh	r3, [r7, #6]
   8083c:	208e      	movs	r0, #142	; 0x8e
   8083e:	4619      	mov	r1, r3
   80840:	4b02      	ldr	r3, [pc, #8]	; (8084c <rtc_set_creg+0x1c>)
   80842:	4798      	blx	r3
}
   80844:	3708      	adds	r7, #8
   80846:	46bd      	mov	sp, r7
   80848:	bd80      	pop	{r7, pc}
   8084a:	bf00      	nop
   8084c:	000807fd 	.word	0x000807fd

00080850 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80850:	b480      	push	{r7}
   80852:	b083      	sub	sp, #12
   80854:	af00      	add	r7, sp, #0
   80856:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80858:	687b      	ldr	r3, [r7, #4]
   8085a:	2b07      	cmp	r3, #7
   8085c:	d825      	bhi.n	808aa <osc_get_rate+0x5a>
   8085e:	a201      	add	r2, pc, #4	; (adr r2, 80864 <osc_get_rate+0x14>)
   80860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80864:	00080885 	.word	0x00080885
   80868:	0008088b 	.word	0x0008088b
   8086c:	00080891 	.word	0x00080891
   80870:	00080897 	.word	0x00080897
   80874:	0008089b 	.word	0x0008089b
   80878:	0008089f 	.word	0x0008089f
   8087c:	000808a3 	.word	0x000808a3
   80880:	000808a7 	.word	0x000808a7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80884:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80888:	e010      	b.n	808ac <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8088a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8088e:	e00d      	b.n	808ac <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80894:	e00a      	b.n	808ac <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80896:	4b08      	ldr	r3, [pc, #32]	; (808b8 <osc_get_rate+0x68>)
   80898:	e008      	b.n	808ac <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8089a:	4b08      	ldr	r3, [pc, #32]	; (808bc <osc_get_rate+0x6c>)
   8089c:	e006      	b.n	808ac <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8089e:	4b08      	ldr	r3, [pc, #32]	; (808c0 <osc_get_rate+0x70>)
   808a0:	e004      	b.n	808ac <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   808a2:	4b07      	ldr	r3, [pc, #28]	; (808c0 <osc_get_rate+0x70>)
   808a4:	e002      	b.n	808ac <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   808a6:	4b06      	ldr	r3, [pc, #24]	; (808c0 <osc_get_rate+0x70>)
   808a8:	e000      	b.n	808ac <osc_get_rate+0x5c>
#endif
	}

	return 0;
   808aa:	2300      	movs	r3, #0
}
   808ac:	4618      	mov	r0, r3
   808ae:	370c      	adds	r7, #12
   808b0:	46bd      	mov	sp, r7
   808b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   808b6:	4770      	bx	lr
   808b8:	003d0900 	.word	0x003d0900
   808bc:	007a1200 	.word	0x007a1200
   808c0:	00b71b00 	.word	0x00b71b00

000808c4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   808c4:	b580      	push	{r7, lr}
   808c6:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   808c8:	2006      	movs	r0, #6
   808ca:	4b04      	ldr	r3, [pc, #16]	; (808dc <sysclk_get_main_hz+0x18>)
   808cc:	4798      	blx	r3
   808ce:	4602      	mov	r2, r0
   808d0:	4613      	mov	r3, r2
   808d2:	00db      	lsls	r3, r3, #3
   808d4:	1a9b      	subs	r3, r3, r2
   808d6:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   808d8:	4618      	mov	r0, r3
   808da:	bd80      	pop	{r7, pc}
   808dc:	00080851 	.word	0x00080851

000808e0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   808e0:	b580      	push	{r7, lr}
   808e2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   808e4:	4b02      	ldr	r3, [pc, #8]	; (808f0 <sysclk_get_cpu_hz+0x10>)
   808e6:	4798      	blx	r3
   808e8:	4603      	mov	r3, r0
   808ea:	085b      	lsrs	r3, r3, #1
}
   808ec:	4618      	mov	r0, r3
   808ee:	bd80      	pop	{r7, pc}
   808f0:	000808c5 	.word	0x000808c5

000808f4 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   808f4:	b480      	push	{r7}
   808f6:	b083      	sub	sp, #12
   808f8:	af00      	add	r7, sp, #0
   808fa:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   808fc:	687b      	ldr	r3, [r7, #4]
   808fe:	2280      	movs	r2, #128	; 0x80
   80900:	601a      	str	r2, [r3, #0]
}
   80902:	370c      	adds	r7, #12
   80904:	46bd      	mov	sp, r7
   80906:	f85d 7b04 	ldr.w	r7, [sp], #4
   8090a:	4770      	bx	lr

0008090c <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   8090c:	b480      	push	{r7}
   8090e:	b083      	sub	sp, #12
   80910:	af00      	add	r7, sp, #0
   80912:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80914:	687b      	ldr	r3, [r7, #4]
   80916:	2201      	movs	r2, #1
   80918:	601a      	str	r2, [r3, #0]
}
   8091a:	370c      	adds	r7, #12
   8091c:	46bd      	mov	sp, r7
   8091e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80922:	4770      	bx	lr

00080924 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80924:	b480      	push	{r7}
   80926:	b083      	sub	sp, #12
   80928:	af00      	add	r7, sp, #0
   8092a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   8092c:	687b      	ldr	r3, [r7, #4]
   8092e:	685b      	ldr	r3, [r3, #4]
   80930:	f043 0201 	orr.w	r2, r3, #1
   80934:	687b      	ldr	r3, [r7, #4]
   80936:	605a      	str	r2, [r3, #4]
}
   80938:	370c      	adds	r7, #12
   8093a:	46bd      	mov	sp, r7
   8093c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80940:	4770      	bx	lr
   80942:	bf00      	nop

00080944 <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
   80944:	b480      	push	{r7}
   80946:	b083      	sub	sp, #12
   80948:	af00      	add	r7, sp, #0
   8094a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
   8094c:	687b      	ldr	r3, [r7, #4]
   8094e:	685b      	ldr	r3, [r3, #4]
   80950:	f023 0202 	bic.w	r2, r3, #2
   80954:	687b      	ldr	r3, [r7, #4]
   80956:	605a      	str	r2, [r3, #4]
}
   80958:	370c      	adds	r7, #12
   8095a:	46bd      	mov	sp, r7
   8095c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80960:	4770      	bx	lr
   80962:	bf00      	nop

00080964 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   80964:	b480      	push	{r7}
   80966:	b083      	sub	sp, #12
   80968:	af00      	add	r7, sp, #0
   8096a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   8096c:	687b      	ldr	r3, [r7, #4]
   8096e:	685b      	ldr	r3, [r3, #4]
   80970:	f023 0204 	bic.w	r2, r3, #4
   80974:	687b      	ldr	r3, [r7, #4]
   80976:	605a      	str	r2, [r3, #4]
}
   80978:	370c      	adds	r7, #12
   8097a:	46bd      	mov	sp, r7
   8097c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80980:	4770      	bx	lr
   80982:	bf00      	nop

00080984 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80984:	b480      	push	{r7}
   80986:	b083      	sub	sp, #12
   80988:	af00      	add	r7, sp, #0
   8098a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8098c:	687b      	ldr	r3, [r7, #4]
   8098e:	685b      	ldr	r3, [r3, #4]
   80990:	f043 0210 	orr.w	r2, r3, #16
   80994:	687b      	ldr	r3, [r7, #4]
   80996:	605a      	str	r2, [r3, #4]
}
   80998:	370c      	adds	r7, #12
   8099a:	46bd      	mov	sp, r7
   8099c:	f85d 7b04 	ldr.w	r7, [sp], #4
   809a0:	4770      	bx	lr
   809a2:	bf00      	nop

000809a4 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   809a4:	b480      	push	{r7}
   809a6:	b083      	sub	sp, #12
   809a8:	af00      	add	r7, sp, #0
   809aa:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   809ac:	687b      	ldr	r3, [r7, #4]
   809ae:	685b      	ldr	r3, [r3, #4]
   809b0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   809b4:	687b      	ldr	r3, [r7, #4]
   809b6:	605a      	str	r2, [r3, #4]
}
   809b8:	370c      	adds	r7, #12
   809ba:	46bd      	mov	sp, r7
   809bc:	f85d 7b04 	ldr.w	r7, [sp], #4
   809c0:	4770      	bx	lr
   809c2:	bf00      	nop

000809c4 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   809c4:	b480      	push	{r7}
   809c6:	b083      	sub	sp, #12
   809c8:	af00      	add	r7, sp, #0
   809ca:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   809cc:	687b      	ldr	r3, [r7, #4]
   809ce:	691b      	ldr	r3, [r3, #16]
}
   809d0:	4618      	mov	r0, r3
   809d2:	370c      	adds	r7, #12
   809d4:	46bd      	mov	sp, r7
   809d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   809da:	4770      	bx	lr

000809dc <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   809dc:	b580      	push	{r7, lr}
   809de:	b084      	sub	sp, #16
   809e0:	af00      	add	r7, sp, #0
	uint32_t new_cmd = 0;
   809e2:	2300      	movs	r3, #0
   809e4:	60fb      	str	r3, [r7, #12]
	static uint16_t data;
	uint8_t uc_pcs;
	uint8_t ret_val = 0;
   809e6:	2300      	movs	r3, #0
   809e8:	72fb      	strb	r3, [r7, #11]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   809ea:	4b0c      	ldr	r3, [pc, #48]	; (80a1c <SPI0_Handler+0x40>)
   809ec:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   809ee:	480c      	ldr	r0, [pc, #48]	; (80a20 <SPI0_Handler+0x44>)
   809f0:	4b0c      	ldr	r3, [pc, #48]	; (80a24 <SPI0_Handler+0x48>)
   809f2:	4798      	blx	r3
   809f4:	4603      	mov	r3, r0
   809f6:	f003 0301 	and.w	r3, r3, #1
   809fa:	2b00      	cmp	r3, #0
   809fc:	d00b      	beq.n	80a16 <SPI0_Handler+0x3a>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   809fe:	1cfb      	adds	r3, r7, #3
   80a00:	4807      	ldr	r0, [pc, #28]	; (80a20 <SPI0_Handler+0x44>)
   80a02:	4909      	ldr	r1, [pc, #36]	; (80a28 <SPI0_Handler+0x4c>)
   80a04:	461a      	mov	r2, r3
   80a06:	4b09      	ldr	r3, [pc, #36]	; (80a2c <SPI0_Handler+0x50>)
   80a08:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80a0a:	687b      	ldr	r3, [r7, #4]
   80a0c:	681b      	ldr	r3, [r3, #0]
   80a0e:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80a12:	687b      	ldr	r3, [r7, #4]
   80a14:	601a      	str	r2, [r3, #0]
	}
}
   80a16:	3710      	adds	r7, #16
   80a18:	46bd      	mov	sp, r7
   80a1a:	bd80      	pop	{r7, pc}
   80a1c:	4000800c 	.word	0x4000800c
   80a20:	40008000 	.word	0x40008000
   80a24:	000809c5 	.word	0x000809c5
   80a28:	20070458 	.word	0x20070458
   80a2c:	00080211 	.word	0x00080211

00080a30 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   80a30:	b598      	push	{r3, r4, r7, lr}
   80a32:	af00      	add	r7, sp, #0

	/* Configure an SPI peripheral. */
	spi_enable_clock(SPI_MASTER_BASE);
   80a34:	4824      	ldr	r0, [pc, #144]	; (80ac8 <spi_master_initialize+0x98>)
   80a36:	4b25      	ldr	r3, [pc, #148]	; (80acc <spi_master_initialize+0x9c>)
   80a38:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   80a3a:	4823      	ldr	r0, [pc, #140]	; (80ac8 <spi_master_initialize+0x98>)
   80a3c:	4b24      	ldr	r3, [pc, #144]	; (80ad0 <spi_master_initialize+0xa0>)
   80a3e:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   80a40:	4821      	ldr	r0, [pc, #132]	; (80ac8 <spi_master_initialize+0x98>)
   80a42:	4b24      	ldr	r3, [pc, #144]	; (80ad4 <spi_master_initialize+0xa4>)
   80a44:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   80a46:	4820      	ldr	r0, [pc, #128]	; (80ac8 <spi_master_initialize+0x98>)
   80a48:	4b23      	ldr	r3, [pc, #140]	; (80ad8 <spi_master_initialize+0xa8>)
   80a4a:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   80a4c:	481e      	ldr	r0, [pc, #120]	; (80ac8 <spi_master_initialize+0x98>)
   80a4e:	4b23      	ldr	r3, [pc, #140]	; (80adc <spi_master_initialize+0xac>)
   80a50:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
   80a52:	481d      	ldr	r0, [pc, #116]	; (80ac8 <spi_master_initialize+0x98>)
   80a54:	210e      	movs	r1, #14
   80a56:	4b22      	ldr	r3, [pc, #136]	; (80ae0 <spi_master_initialize+0xb0>)
   80a58:	4798      	blx	r3
	spi_set_fixed_peripheral_select(SPI_MASTER_BASE);
   80a5a:	481b      	ldr	r0, [pc, #108]	; (80ac8 <spi_master_initialize+0x98>)
   80a5c:	4b21      	ldr	r3, [pc, #132]	; (80ae4 <spi_master_initialize+0xb4>)
   80a5e:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);
   80a60:	4819      	ldr	r0, [pc, #100]	; (80ac8 <spi_master_initialize+0x98>)
   80a62:	4b21      	ldr	r3, [pc, #132]	; (80ae8 <spi_master_initialize+0xb8>)
   80a64:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   80a66:	4818      	ldr	r0, [pc, #96]	; (80ac8 <spi_master_initialize+0x98>)
   80a68:	2100      	movs	r1, #0
   80a6a:	4b20      	ldr	r3, [pc, #128]	; (80aec <spi_master_initialize+0xbc>)
   80a6c:	4798      	blx	r3

	spi_set_transfer_delay(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_DLYBS,
   80a6e:	4816      	ldr	r0, [pc, #88]	; (80ac8 <spi_master_initialize+0x98>)
   80a70:	2100      	movs	r1, #0
   80a72:	2245      	movs	r2, #69	; 0x45
   80a74:	2302      	movs	r3, #2
   80a76:	4c1e      	ldr	r4, [pc, #120]	; (80af0 <spi_master_initialize+0xc0>)
   80a78:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CSR_BITS_16_BIT);
   80a7a:	4813      	ldr	r0, [pc, #76]	; (80ac8 <spi_master_initialize+0x98>)
   80a7c:	2100      	movs	r1, #0
   80a7e:	2280      	movs	r2, #128	; 0x80
   80a80:	4b1c      	ldr	r3, [pc, #112]	; (80af4 <spi_master_initialize+0xc4>)
   80a82:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, SPI_CHIP_SEL, spi_calc_baudrate_div(SPI_CLK_FREQ, sysclk_get_cpu_hz())); 
   80a84:	4b1c      	ldr	r3, [pc, #112]	; (80af8 <spi_master_initialize+0xc8>)
   80a86:	4798      	blx	r3
   80a88:	4603      	mov	r3, r0
   80a8a:	481c      	ldr	r0, [pc, #112]	; (80afc <spi_master_initialize+0xcc>)
   80a8c:	4619      	mov	r1, r3
   80a8e:	4b1c      	ldr	r3, [pc, #112]	; (80b00 <spi_master_initialize+0xd0>)
   80a90:	4798      	blx	r3
   80a92:	4603      	mov	r3, r0
   80a94:	b2db      	uxtb	r3, r3
   80a96:	480c      	ldr	r0, [pc, #48]	; (80ac8 <spi_master_initialize+0x98>)
   80a98:	2100      	movs	r1, #0
   80a9a:	461a      	mov	r2, r3
   80a9c:	4b19      	ldr	r3, [pc, #100]	; (80b04 <spi_master_initialize+0xd4>)
   80a9e:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CS_RISE_FORCED);
   80aa0:	4809      	ldr	r0, [pc, #36]	; (80ac8 <spi_master_initialize+0x98>)
   80aa2:	2100      	movs	r1, #0
   80aa4:	2204      	movs	r2, #4
   80aa6:	4b18      	ldr	r3, [pc, #96]	; (80b08 <spi_master_initialize+0xd8>)
   80aa8:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_POLARITY);
   80aaa:	4807      	ldr	r0, [pc, #28]	; (80ac8 <spi_master_initialize+0x98>)
   80aac:	2100      	movs	r1, #0
   80aae:	2201      	movs	r2, #1
   80ab0:	4b16      	ldr	r3, [pc, #88]	; (80b0c <spi_master_initialize+0xdc>)
   80ab2:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, SPI_CHIP_SEL, SPI_CLK_PHASE);
   80ab4:	4804      	ldr	r0, [pc, #16]	; (80ac8 <spi_master_initialize+0x98>)
   80ab6:	2100      	movs	r1, #0
   80ab8:	2200      	movs	r2, #0
   80aba:	4b15      	ldr	r3, [pc, #84]	; (80b10 <spi_master_initialize+0xe0>)
   80abc:	4798      	blx	r3
	spi_enable(SPI_MASTER_BASE);
   80abe:	4802      	ldr	r0, [pc, #8]	; (80ac8 <spi_master_initialize+0x98>)
   80ac0:	4b14      	ldr	r3, [pc, #80]	; (80b14 <spi_master_initialize+0xe4>)
   80ac2:	4798      	blx	r3
}
   80ac4:	bd98      	pop	{r3, r4, r7, pc}
   80ac6:	bf00      	nop
   80ac8:	40008000 	.word	0x40008000
   80acc:	00080189 	.word	0x00080189
   80ad0:	000808f5 	.word	0x000808f5
   80ad4:	00080925 	.word	0x00080925
   80ad8:	00080985 	.word	0x00080985
   80adc:	000809a5 	.word	0x000809a5
   80ae0:	000801ad 	.word	0x000801ad
   80ae4:	00080945 	.word	0x00080945
   80ae8:	00080965 	.word	0x00080965
   80aec:	000801e1 	.word	0x000801e1
   80af0:	0008051d 	.word	0x0008051d
   80af4:	00080445 	.word	0x00080445
   80af8:	000808e1 	.word	0x000808e1
   80afc:	003d0900 	.word	0x003d0900
   80b00:	0008048d 	.word	0x0008048d
   80b04:	000804cd 	.word	0x000804cd
   80b08:	000803a1 	.word	0x000803a1
   80b0c:	00080301 	.word	0x00080301
   80b10:	00080351 	.word	0x00080351
   80b14:	0008090d 	.word	0x0008090d

00080b18 <spi_master_transfer>:
 *
 * \param pbuf Pointer to buffer to transfer.
 * \param size Size of the buffer.
 */
void spi_master_transfer(void *p_buf, uint32_t size)
{
   80b18:	b590      	push	{r4, r7, lr}
   80b1a:	b087      	sub	sp, #28
   80b1c:	af00      	add	r7, sp, #0
   80b1e:	6078      	str	r0, [r7, #4]
   80b20:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs; // SPI Master operating in fixed CS mode so uc_pcs doesn't need to take on a value
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   80b22:	687b      	ldr	r3, [r7, #4]
   80b24:	613b      	str	r3, [r7, #16]
	
	for (i = 0; i < size; i++) 
   80b26:	2300      	movs	r3, #0
   80b28:	617b      	str	r3, [r7, #20]
   80b2a:	e024      	b.n	80b76 <spi_master_transfer+0x5e>
	{
		spi_write(SPI_MASTER_BASE, p_buffer[i], 0, 0);
   80b2c:	697b      	ldr	r3, [r7, #20]
   80b2e:	005b      	lsls	r3, r3, #1
   80b30:	693a      	ldr	r2, [r7, #16]
   80b32:	4413      	add	r3, r2
   80b34:	881b      	ldrh	r3, [r3, #0]
   80b36:	4813      	ldr	r0, [pc, #76]	; (80b84 <spi_master_transfer+0x6c>)
   80b38:	4619      	mov	r1, r3
   80b3a:	2200      	movs	r2, #0
   80b3c:	2300      	movs	r3, #0
   80b3e:	4c12      	ldr	r4, [pc, #72]	; (80b88 <spi_master_transfer+0x70>)
   80b40:	47a0      	blx	r4
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
   80b42:	bf00      	nop
   80b44:	480f      	ldr	r0, [pc, #60]	; (80b84 <spi_master_transfer+0x6c>)
   80b46:	4b11      	ldr	r3, [pc, #68]	; (80b8c <spi_master_transfer+0x74>)
   80b48:	4798      	blx	r3
   80b4a:	4603      	mov	r3, r0
   80b4c:	f003 0301 	and.w	r3, r3, #1
   80b50:	2b00      	cmp	r3, #0
   80b52:	d0f7      	beq.n	80b44 <spi_master_transfer+0x2c>
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
   80b54:	f107 030f 	add.w	r3, r7, #15
   80b58:	480a      	ldr	r0, [pc, #40]	; (80b84 <spi_master_transfer+0x6c>)
   80b5a:	490d      	ldr	r1, [pc, #52]	; (80b90 <spi_master_transfer+0x78>)
   80b5c:	461a      	mov	r2, r3
   80b5e:	4b0d      	ldr	r3, [pc, #52]	; (80b94 <spi_master_transfer+0x7c>)
   80b60:	4798      	blx	r3
		p_buffer[i] = data;
   80b62:	697b      	ldr	r3, [r7, #20]
   80b64:	005b      	lsls	r3, r3, #1
   80b66:	693a      	ldr	r2, [r7, #16]
   80b68:	4413      	add	r3, r2
   80b6a:	4a09      	ldr	r2, [pc, #36]	; (80b90 <spi_master_transfer+0x78>)
   80b6c:	8812      	ldrh	r2, [r2, #0]
   80b6e:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;
	
	for (i = 0; i < size; i++) 
   80b70:	697b      	ldr	r3, [r7, #20]
   80b72:	3301      	adds	r3, #1
   80b74:	617b      	str	r3, [r7, #20]
   80b76:	697a      	ldr	r2, [r7, #20]
   80b78:	683b      	ldr	r3, [r7, #0]
   80b7a:	429a      	cmp	r2, r3
   80b7c:	d3d6      	bcc.n	80b2c <spi_master_transfer+0x14>
		/* Wait transfer done. */
		while ((spi_read_status(SPI_MASTER_BASE) & SPI_SR_RDRF) == 0);
		spi_read(SPI_MASTER_BASE, &data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   80b7e:	371c      	adds	r7, #28
   80b80:	46bd      	mov	sp, r7
   80b82:	bd90      	pop	{r4, r7, pc}
   80b84:	40008000 	.word	0x40008000
   80b88:	00080281 	.word	0x00080281
   80b8c:	000809c5 	.word	0x000809c5
   80b90:	2007045a 	.word	0x2007045a
   80b94:	00080211 	.word	0x00080211

00080b98 <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80b98:	b580      	push	{r7, lr}
   80b9a:	b084      	sub	sp, #16
   80b9c:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	uint8_t ret_val = 0;
   80b9e:	2300      	movs	r3, #0
   80ba0:	73fb      	strb	r3, [r7, #15]
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80ba2:	4b08      	ldr	r3, [pc, #32]	; (80bc4 <spi_initialize+0x2c>)
   80ba4:	60bb      	str	r3, [r7, #8]
	uint16_t data = 0;
   80ba6:	2300      	movs	r3, #0
   80ba8:	80fb      	strh	r3, [r7, #6]

//	spi_slave_initialize();
	
	*reg_ptr |= 0x00BB;
   80baa:	68bb      	ldr	r3, [r7, #8]
   80bac:	681b      	ldr	r3, [r3, #0]
   80bae:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80bb2:	68bb      	ldr	r3, [r7, #8]
   80bb4:	601a      	str	r2, [r3, #0]
//	NVIC_DisableIRQ(SPI_IRQn);
//	NVIC_ClearPendingIRQ(SPI_IRQn);
//	NVIC_SetPriority(SPI_IRQn, 0);
//	NVIC_EnableIRQ(SPI_IRQn);

	spi_master_initialize();
   80bb6:	4b04      	ldr	r3, [pc, #16]	; (80bc8 <spi_initialize+0x30>)
   80bb8:	4798      	blx	r3
	//while (1) {
		//
		//*reg_ptr |= 0x00BB;
		//
		//}	// Put 0xBB in the SPI shift register.
	return;
   80bba:	bf00      	nop
}
   80bbc:	3710      	adds	r7, #16
   80bbe:	46bd      	mov	sp, r7
   80bc0:	bd80      	pop	{r7, pc}
   80bc2:	bf00      	nop
   80bc4:	4000800c 	.word	0x4000800c
   80bc8:	00080a31 	.word	0x00080a31

00080bcc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80bcc:	b480      	push	{r7}
   80bce:	b083      	sub	sp, #12
   80bd0:	af00      	add	r7, sp, #0
   80bd2:	4603      	mov	r3, r0
   80bd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80bd6:	4b08      	ldr	r3, [pc, #32]	; (80bf8 <NVIC_EnableIRQ+0x2c>)
   80bd8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80bdc:	0952      	lsrs	r2, r2, #5
   80bde:	79f9      	ldrb	r1, [r7, #7]
   80be0:	f001 011f 	and.w	r1, r1, #31
   80be4:	2001      	movs	r0, #1
   80be6:	fa00 f101 	lsl.w	r1, r0, r1
   80bea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80bee:	370c      	adds	r7, #12
   80bf0:	46bd      	mov	sp, r7
   80bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
   80bf6:	4770      	bx	lr
   80bf8:	e000e100 	.word	0xe000e100

00080bfc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80bfc:	b480      	push	{r7}
   80bfe:	b083      	sub	sp, #12
   80c00:	af00      	add	r7, sp, #0
   80c02:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80c04:	687b      	ldr	r3, [r7, #4]
   80c06:	2b07      	cmp	r3, #7
   80c08:	d825      	bhi.n	80c56 <osc_get_rate+0x5a>
   80c0a:	a201      	add	r2, pc, #4	; (adr r2, 80c10 <osc_get_rate+0x14>)
   80c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80c10:	00080c31 	.word	0x00080c31
   80c14:	00080c37 	.word	0x00080c37
   80c18:	00080c3d 	.word	0x00080c3d
   80c1c:	00080c43 	.word	0x00080c43
   80c20:	00080c47 	.word	0x00080c47
   80c24:	00080c4b 	.word	0x00080c4b
   80c28:	00080c4f 	.word	0x00080c4f
   80c2c:	00080c53 	.word	0x00080c53
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80c30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80c34:	e010      	b.n	80c58 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80c3a:	e00d      	b.n	80c58 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80c40:	e00a      	b.n	80c58 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80c42:	4b08      	ldr	r3, [pc, #32]	; (80c64 <osc_get_rate+0x68>)
   80c44:	e008      	b.n	80c58 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80c46:	4b08      	ldr	r3, [pc, #32]	; (80c68 <osc_get_rate+0x6c>)
   80c48:	e006      	b.n	80c58 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80c4a:	4b08      	ldr	r3, [pc, #32]	; (80c6c <osc_get_rate+0x70>)
   80c4c:	e004      	b.n	80c58 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80c4e:	4b07      	ldr	r3, [pc, #28]	; (80c6c <osc_get_rate+0x70>)
   80c50:	e002      	b.n	80c58 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80c52:	4b06      	ldr	r3, [pc, #24]	; (80c6c <osc_get_rate+0x70>)
   80c54:	e000      	b.n	80c58 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80c56:	2300      	movs	r3, #0
}
   80c58:	4618      	mov	r0, r3
   80c5a:	370c      	adds	r7, #12
   80c5c:	46bd      	mov	sp, r7
   80c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c62:	4770      	bx	lr
   80c64:	003d0900 	.word	0x003d0900
   80c68:	007a1200 	.word	0x007a1200
   80c6c:	00b71b00 	.word	0x00b71b00

00080c70 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80c70:	b580      	push	{r7, lr}
   80c72:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80c74:	2006      	movs	r0, #6
   80c76:	4b04      	ldr	r3, [pc, #16]	; (80c88 <sysclk_get_main_hz+0x18>)
   80c78:	4798      	blx	r3
   80c7a:	4602      	mov	r2, r0
   80c7c:	4613      	mov	r3, r2
   80c7e:	00db      	lsls	r3, r3, #3
   80c80:	1a9b      	subs	r3, r3, r2
   80c82:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80c84:	4618      	mov	r0, r3
   80c86:	bd80      	pop	{r7, pc}
   80c88:	00080bfd 	.word	0x00080bfd

00080c8c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80c8c:	b580      	push	{r7, lr}
   80c8e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80c90:	4b02      	ldr	r3, [pc, #8]	; (80c9c <sysclk_get_cpu_hz+0x10>)
   80c92:	4798      	blx	r3
   80c94:	4603      	mov	r3, r0
   80c96:	085b      	lsrs	r3, r3, #1
}
   80c98:	4618      	mov	r0, r3
   80c9a:	bd80      	pop	{r7, pc}
   80c9c:	00080c71 	.word	0x00080c71

00080ca0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80ca0:	b580      	push	{r7, lr}
   80ca2:	b082      	sub	sp, #8
   80ca4:	af00      	add	r7, sp, #0
   80ca6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80ca8:	6878      	ldr	r0, [r7, #4]
   80caa:	4b02      	ldr	r3, [pc, #8]	; (80cb4 <sysclk_enable_peripheral_clock+0x14>)
   80cac:	4798      	blx	r3
}
   80cae:	3708      	adds	r7, #8
   80cb0:	46bd      	mov	sp, r7
   80cb2:	bd80      	pop	{r7, pc}
   80cb4:	000824bd 	.word	0x000824bd

00080cb8 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   80cb8:	b580      	push	{r7, lr}
   80cba:	b084      	sub	sp, #16
   80cbc:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80cbe:	2300      	movs	r3, #0
   80cc0:	60bb      	str	r3, [r7, #8]
   80cc2:	2300      	movs	r3, #0
   80cc4:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   80cc6:	2300      	movs	r3, #0
   80cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   80cca:	2300      	movs	r3, #0
   80ccc:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80cce:	483b      	ldr	r0, [pc, #236]	; (80dbc <USART0_Handler+0x104>)
   80cd0:	4b3b      	ldr	r3, [pc, #236]	; (80dc0 <USART0_Handler+0x108>)
   80cd2:	4798      	blx	r3
   80cd4:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   80cd6:	2058      	movs	r0, #88	; 0x58
   80cd8:	4b3a      	ldr	r3, [pc, #232]	; (80dc4 <USART0_Handler+0x10c>)
   80cda:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   80cdc:	4b3a      	ldr	r3, [pc, #232]	; (80dc8 <USART0_Handler+0x110>)
   80cde:	781b      	ldrb	r3, [r3, #0]
   80ce0:	2b00      	cmp	r3, #0
   80ce2:	d167      	bne.n	80db4 <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   80ce4:	683b      	ldr	r3, [r7, #0]
   80ce6:	f003 0301 	and.w	r3, r3, #1
   80cea:	2b00      	cmp	r3, #0
   80cec:	d062      	beq.n	80db4 <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80cee:	4833      	ldr	r0, [pc, #204]	; (80dbc <USART0_Handler+0x104>)
   80cf0:	4936      	ldr	r1, [pc, #216]	; (80dcc <USART0_Handler+0x114>)
   80cf2:	4b37      	ldr	r3, [pc, #220]	; (80dd0 <USART0_Handler+0x118>)
   80cf4:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   80cf6:	4b35      	ldr	r3, [pc, #212]	; (80dcc <USART0_Handler+0x114>)
   80cf8:	681b      	ldr	r3, [r3, #0]
   80cfa:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   80cfc:	68bb      	ldr	r3, [r7, #8]
   80cfe:	2b31      	cmp	r3, #49	; 0x31
   80d00:	d102      	bne.n	80d08 <USART0_Handler+0x50>
				command_start = 1;
   80d02:	4b34      	ldr	r3, [pc, #208]	; (80dd4 <USART0_Handler+0x11c>)
   80d04:	2201      	movs	r2, #1
   80d06:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   80d08:	68bb      	ldr	r3, [r7, #8]
   80d0a:	2b32      	cmp	r3, #50	; 0x32
   80d0c:	d102      	bne.n	80d14 <USART0_Handler+0x5c>
				command_end = 1;
   80d0e:	4b32      	ldr	r3, [pc, #200]	; (80dd8 <USART0_Handler+0x120>)
   80d10:	2201      	movs	r2, #1
   80d12:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   80d14:	4b2f      	ldr	r3, [pc, #188]	; (80dd4 <USART0_Handler+0x11c>)
   80d16:	781b      	ldrb	r3, [r3, #0]
   80d18:	2b01      	cmp	r3, #1
   80d1a:	d11e      	bne.n	80d5a <USART0_Handler+0xa2>
   80d1c:	68bb      	ldr	r3, [r7, #8]
   80d1e:	2b00      	cmp	r3, #0
   80d20:	d01b      	beq.n	80d5a <USART0_Handler+0xa2>
   80d22:	68bb      	ldr	r3, [r7, #8]
   80d24:	2b31      	cmp	r3, #49	; 0x31
   80d26:	d018      	beq.n	80d5a <USART0_Handler+0xa2>
   80d28:	68bb      	ldr	r3, [r7, #8]
   80d2a:	2b32      	cmp	r3, #50	; 0x32
   80d2c:	d015      	beq.n	80d5a <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80d2e:	4b2b      	ldr	r3, [pc, #172]	; (80ddc <USART0_Handler+0x124>)
   80d30:	781a      	ldrb	r2, [r3, #0]
   80d32:	4b2b      	ldr	r3, [pc, #172]	; (80de0 <USART0_Handler+0x128>)
   80d34:	fba3 1302 	umull	r1, r3, r3, r2
   80d38:	08d9      	lsrs	r1, r3, #3
   80d3a:	460b      	mov	r3, r1
   80d3c:	009b      	lsls	r3, r3, #2
   80d3e:	440b      	add	r3, r1
   80d40:	005b      	lsls	r3, r3, #1
   80d42:	1ad3      	subs	r3, r2, r3
   80d44:	b2db      	uxtb	r3, r3
   80d46:	68ba      	ldr	r2, [r7, #8]
   80d48:	b2d1      	uxtb	r1, r2
   80d4a:	4a26      	ldr	r2, [pc, #152]	; (80de4 <USART0_Handler+0x12c>)
   80d4c:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80d4e:	4b23      	ldr	r3, [pc, #140]	; (80ddc <USART0_Handler+0x124>)
   80d50:	781b      	ldrb	r3, [r3, #0]
   80d52:	3301      	adds	r3, #1
   80d54:	b2da      	uxtb	r2, r3
   80d56:	4b21      	ldr	r3, [pc, #132]	; (80ddc <USART0_Handler+0x124>)
   80d58:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   80d5a:	4b1f      	ldr	r3, [pc, #124]	; (80dd8 <USART0_Handler+0x120>)
   80d5c:	781b      	ldrb	r3, [r3, #0]
   80d5e:	2b01      	cmp	r3, #1
   80d60:	d11d      	bne.n	80d9e <USART0_Handler+0xe6>
   80d62:	4b1c      	ldr	r3, [pc, #112]	; (80dd4 <USART0_Handler+0x11c>)
   80d64:	781b      	ldrb	r3, [r3, #0]
   80d66:	2b01      	cmp	r3, #1
   80d68:	d119      	bne.n	80d9e <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   80d6a:	4b1f      	ldr	r3, [pc, #124]	; (80de8 <USART0_Handler+0x130>)
   80d6c:	4798      	blx	r3
				command_end = 0;
   80d6e:	4b1a      	ldr	r3, [pc, #104]	; (80dd8 <USART0_Handler+0x120>)
   80d70:	2200      	movs	r2, #0
   80d72:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80d74:	4b17      	ldr	r3, [pc, #92]	; (80dd4 <USART0_Handler+0x11c>)
   80d76:	2200      	movs	r2, #0
   80d78:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   80d7a:	4b18      	ldr	r3, [pc, #96]	; (80ddc <USART0_Handler+0x124>)
   80d7c:	2200      	movs	r2, #0
   80d7e:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80d80:	2300      	movs	r3, #0
   80d82:	73bb      	strb	r3, [r7, #14]
   80d84:	e006      	b.n	80d94 <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   80d86:	7bbb      	ldrb	r3, [r7, #14]
   80d88:	4a16      	ldr	r2, [pc, #88]	; (80de4 <USART0_Handler+0x12c>)
   80d8a:	2100      	movs	r1, #0
   80d8c:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80d8e:	7bbb      	ldrb	r3, [r7, #14]
   80d90:	3301      	adds	r3, #1
   80d92:	73bb      	strb	r3, [r7, #14]
   80d94:	7bbb      	ldrb	r3, [r7, #14]
   80d96:	2b09      	cmp	r3, #9
   80d98:	d9f5      	bls.n	80d86 <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   80d9a:	2301      	movs	r3, #1
   80d9c:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80d9e:	7bfb      	ldrb	r3, [r7, #15]
   80da0:	2b00      	cmp	r3, #0
   80da2:	d105      	bne.n	80db0 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80da4:	4b09      	ldr	r3, [pc, #36]	; (80dcc <USART0_Handler+0x114>)
   80da6:	681b      	ldr	r3, [r3, #0]
   80da8:	4804      	ldr	r0, [pc, #16]	; (80dbc <USART0_Handler+0x104>)
   80daa:	4619      	mov	r1, r3
   80dac:	4b0f      	ldr	r3, [pc, #60]	; (80dec <USART0_Handler+0x134>)
   80dae:	4798      	blx	r3
					
			command_completed = 0;
   80db0:	2300      	movs	r3, #0
   80db2:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80db4:	3710      	adds	r7, #16
   80db6:	46bd      	mov	sp, r7
   80db8:	bd80      	pop	{r7, pc}
   80dba:	bf00      	nop
   80dbc:	40098000 	.word	0x40098000
   80dc0:	0008273d 	.word	0x0008273d
   80dc4:	00081ed1 	.word	0x00081ed1
   80dc8:	20070460 	.word	0x20070460
   80dcc:	2007045c 	.word	0x2007045c
   80dd0:	000827c1 	.word	0x000827c1
   80dd4:	20070461 	.word	0x20070461
   80dd8:	20070462 	.word	0x20070462
   80ddc:	20070470 	.word	0x20070470
   80de0:	cccccccd 	.word	0xcccccccd
   80de4:	20070464 	.word	0x20070464
   80de8:	00080df1 	.word	0x00080df1
   80dec:	0008278d 	.word	0x0008278d

00080df0 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   80df0:	b580      	push	{r7, lr}
   80df2:	b08a      	sub	sp, #40	; 0x28
   80df4:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   80df6:	2300      	movs	r3, #0
   80df8:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   80dfa:	2301      	movs	r3, #1
   80dfc:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   80dfe:	2300      	movs	r3, #0
   80e00:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   80e02:	2301      	movs	r3, #1
   80e04:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   80e06:	2301      	movs	r3, #1
   80e08:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   80e0a:	2301      	movs	r3, #1
   80e0c:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   80e0e:	f240 1327 	movw	r3, #295	; 0x127
   80e12:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   80e14:	2319      	movs	r3, #25
   80e16:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   80e18:	4b7e      	ldr	r3, [pc, #504]	; (81014 <check_command+0x224>)
   80e1a:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   80e1c:	6938      	ldr	r0, [r7, #16]
   80e1e:	4b7e      	ldr	r3, [pc, #504]	; (81018 <check_command+0x228>)
   80e20:	4798      	blx	r3
   80e22:	4603      	mov	r3, r0
   80e24:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   80e26:	4b7d      	ldr	r3, [pc, #500]	; (8101c <check_command+0x22c>)
   80e28:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   80e2a:	6938      	ldr	r0, [r7, #16]
   80e2c:	4b7a      	ldr	r3, [pc, #488]	; (81018 <check_command+0x228>)
   80e2e:	4798      	blx	r3
   80e30:	4603      	mov	r3, r0
   80e32:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   80e34:	4b7a      	ldr	r3, [pc, #488]	; (81020 <check_command+0x230>)
   80e36:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   80e38:	6938      	ldr	r0, [r7, #16]
   80e3a:	4b77      	ldr	r3, [pc, #476]	; (81018 <check_command+0x228>)
   80e3c:	4798      	blx	r3
   80e3e:	4603      	mov	r3, r0
   80e40:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   80e42:	7ebb      	ldrb	r3, [r7, #26]
   80e44:	2b01      	cmp	r3, #1
   80e46:	f040 8088 	bne.w	80f5a <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80e4a:	4b76      	ldr	r3, [pc, #472]	; (81024 <check_command+0x234>)
   80e4c:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   80e4e:	e00d      	b.n	80e6c <check_command+0x7c>
		{
			character = *message_array;
   80e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e52:	781b      	ldrb	r3, [r3, #0]
   80e54:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e56:	bf00      	nop
   80e58:	4873      	ldr	r0, [pc, #460]	; (81028 <check_command+0x238>)
   80e5a:	6a39      	ldr	r1, [r7, #32]
   80e5c:	4b73      	ldr	r3, [pc, #460]	; (8102c <check_command+0x23c>)
   80e5e:	4798      	blx	r3
   80e60:	4603      	mov	r3, r0
   80e62:	2b00      	cmp	r3, #0
   80e64:	d1f8      	bne.n	80e58 <check_command+0x68>
			
			message_array++;
   80e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e68:	3301      	adds	r3, #1
   80e6a:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e6e:	781b      	ldrb	r3, [r3, #0]
   80e70:	2b00      	cmp	r3, #0
   80e72:	d1ed      	bne.n	80e50 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   80e74:	4b6e      	ldr	r3, [pc, #440]	; (81030 <check_command+0x240>)
   80e76:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80e78:	e00d      	b.n	80e96 <check_command+0xa6>
		{
			character = *message_array;
   80e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e7c:	781b      	ldrb	r3, [r3, #0]
   80e7e:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80e80:	bf00      	nop
   80e82:	4869      	ldr	r0, [pc, #420]	; (81028 <check_command+0x238>)
   80e84:	6a39      	ldr	r1, [r7, #32]
   80e86:	4b69      	ldr	r3, [pc, #420]	; (8102c <check_command+0x23c>)
   80e88:	4798      	blx	r3
   80e8a:	4603      	mov	r3, r0
   80e8c:	2b00      	cmp	r3, #0
   80e8e:	d1f8      	bne.n	80e82 <check_command+0x92>
			
			message_array++;
   80e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e92:	3301      	adds	r3, #1
   80e94:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80e98:	781b      	ldrb	r3, [r3, #0]
   80e9a:	2b00      	cmp	r3, #0
   80e9c:	d1ed      	bne.n	80e7a <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   80e9e:	4b65      	ldr	r3, [pc, #404]	; (81034 <check_command+0x244>)
   80ea0:	681b      	ldr	r3, [r3, #0]
   80ea2:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   80ea4:	1d3b      	adds	r3, r7, #4
   80ea6:	4618      	mov	r0, r3
   80ea8:	4b63      	ldr	r3, [pc, #396]	; (81038 <check_command+0x248>)
   80eaa:	4798      	blx	r3
   80eac:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   80eae:	687b      	ldr	r3, [r7, #4]
   80eb0:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80eb2:	7dfb      	ldrb	r3, [r7, #23]
   80eb4:	4618      	mov	r0, r3
   80eb6:	4b61      	ldr	r3, [pc, #388]	; (8103c <check_command+0x24c>)
   80eb8:	4798      	blx	r3
   80eba:	4603      	mov	r3, r0
   80ebc:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   80ebe:	7dfb      	ldrb	r3, [r7, #23]
   80ec0:	011b      	lsls	r3, r3, #4
   80ec2:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   80ec4:	7bfb      	ldrb	r3, [r7, #15]
   80ec6:	091b      	lsrs	r3, r3, #4
   80ec8:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   80eca:	7dfb      	ldrb	r3, [r7, #23]
   80ecc:	091b      	lsrs	r3, r3, #4
   80ece:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   80ed0:	7bfb      	ldrb	r3, [r7, #15]
   80ed2:	3330      	adds	r3, #48	; 0x30
   80ed4:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   80ed6:	7bbb      	ldrb	r3, [r7, #14]
   80ed8:	3330      	adds	r3, #48	; 0x30
   80eda:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   80edc:	69fb      	ldr	r3, [r7, #28]
   80ede:	2b00      	cmp	r3, #0
   80ee0:	d00a      	beq.n	80ef8 <check_command+0x108>
		{
			character = 0x2B;
   80ee2:	232b      	movs	r3, #43	; 0x2b
   80ee4:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   80ee6:	bf00      	nop
   80ee8:	484f      	ldr	r0, [pc, #316]	; (81028 <check_command+0x238>)
   80eea:	6a39      	ldr	r1, [r7, #32]
   80eec:	4b4f      	ldr	r3, [pc, #316]	; (8102c <check_command+0x23c>)
   80eee:	4798      	blx	r3
   80ef0:	4603      	mov	r3, r0
   80ef2:	2b00      	cmp	r3, #0
   80ef4:	d1f8      	bne.n	80ee8 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80ef6:	e009      	b.n	80f0c <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   80ef8:	232d      	movs	r3, #45	; 0x2d
   80efa:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   80efc:	bf00      	nop
   80efe:	484a      	ldr	r0, [pc, #296]	; (81028 <check_command+0x238>)
   80f00:	6a39      	ldr	r1, [r7, #32]
   80f02:	4b4a      	ldr	r3, [pc, #296]	; (8102c <check_command+0x23c>)
   80f04:	4798      	blx	r3
   80f06:	4603      	mov	r3, r0
   80f08:	2b00      	cmp	r3, #0
   80f0a:	d1f8      	bne.n	80efe <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80f0c:	bf00      	nop
   80f0e:	7bbb      	ldrb	r3, [r7, #14]
   80f10:	4845      	ldr	r0, [pc, #276]	; (81028 <check_command+0x238>)
   80f12:	4619      	mov	r1, r3
   80f14:	4b45      	ldr	r3, [pc, #276]	; (8102c <check_command+0x23c>)
   80f16:	4798      	blx	r3
   80f18:	4603      	mov	r3, r0
   80f1a:	2b00      	cmp	r3, #0
   80f1c:	d1f7      	bne.n	80f0e <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   80f1e:	bf00      	nop
   80f20:	7bfb      	ldrb	r3, [r7, #15]
   80f22:	4841      	ldr	r0, [pc, #260]	; (81028 <check_command+0x238>)
   80f24:	4619      	mov	r1, r3
   80f26:	4b41      	ldr	r3, [pc, #260]	; (8102c <check_command+0x23c>)
   80f28:	4798      	blx	r3
   80f2a:	4603      	mov	r3, r0
   80f2c:	2b00      	cmp	r3, #0
   80f2e:	d1f7      	bne.n	80f20 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   80f30:	4b43      	ldr	r3, [pc, #268]	; (81040 <check_command+0x250>)
   80f32:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80f34:	e00d      	b.n	80f52 <check_command+0x162>
		{
			character = *message_array;
   80f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f38:	781b      	ldrb	r3, [r3, #0]
   80f3a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80f3c:	bf00      	nop
   80f3e:	483a      	ldr	r0, [pc, #232]	; (81028 <check_command+0x238>)
   80f40:	6a39      	ldr	r1, [r7, #32]
   80f42:	4b3a      	ldr	r3, [pc, #232]	; (8102c <check_command+0x23c>)
   80f44:	4798      	blx	r3
   80f46:	4603      	mov	r3, r0
   80f48:	2b00      	cmp	r3, #0
   80f4a:	d1f8      	bne.n	80f3e <check_command+0x14e>
			
			message_array++;
   80f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f4e:	3301      	adds	r3, #1
   80f50:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   80f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f54:	781b      	ldrb	r3, [r3, #0]
   80f56:	2b00      	cmp	r3, #0
   80f58:	d1ed      	bne.n	80f36 <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   80f5a:	7e7b      	ldrb	r3, [r7, #25]
   80f5c:	2b01      	cmp	r3, #1
   80f5e:	d114      	bne.n	80f8a <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   80f60:	4b38      	ldr	r3, [pc, #224]	; (81044 <check_command+0x254>)
   80f62:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80f64:	e00d      	b.n	80f82 <check_command+0x192>
		{
			character = *message_array;
   80f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f68:	781b      	ldrb	r3, [r3, #0]
   80f6a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80f6c:	bf00      	nop
   80f6e:	482e      	ldr	r0, [pc, #184]	; (81028 <check_command+0x238>)
   80f70:	6a39      	ldr	r1, [r7, #32]
   80f72:	4b2e      	ldr	r3, [pc, #184]	; (8102c <check_command+0x23c>)
   80f74:	4798      	blx	r3
   80f76:	4603      	mov	r3, r0
   80f78:	2b00      	cmp	r3, #0
   80f7a:	d1f8      	bne.n	80f6e <check_command+0x17e>
			
			message_array++;
   80f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f7e:	3301      	adds	r3, #1
   80f80:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   80f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f84:	781b      	ldrb	r3, [r3, #0]
   80f86:	2b00      	cmp	r3, #0
   80f88:	d1ed      	bne.n	80f66 <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   80f8a:	7e3b      	ldrb	r3, [r7, #24]
   80f8c:	2b01      	cmp	r3, #1
   80f8e:	d13d      	bne.n	8100c <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   80f90:	4b2d      	ldr	r3, [pc, #180]	; (81048 <check_command+0x258>)
   80f92:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80f94:	e00d      	b.n	80fb2 <check_command+0x1c2>
		{
			character = *message_array;
   80f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f98:	781b      	ldrb	r3, [r3, #0]
   80f9a:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80f9c:	bf00      	nop
   80f9e:	4822      	ldr	r0, [pc, #136]	; (81028 <check_command+0x238>)
   80fa0:	6a39      	ldr	r1, [r7, #32]
   80fa2:	4b22      	ldr	r3, [pc, #136]	; (8102c <check_command+0x23c>)
   80fa4:	4798      	blx	r3
   80fa6:	4603      	mov	r3, r0
   80fa8:	2b00      	cmp	r3, #0
   80faa:	d1f8      	bne.n	80f9e <check_command+0x1ae>
			
			message_array++;
   80fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fae:	3301      	adds	r3, #1
   80fb0:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   80fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fb4:	781b      	ldrb	r3, [r3, #0]
   80fb6:	2b00      	cmp	r3, #0
   80fb8:	d1ed      	bne.n	80f96 <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   80fba:	4b24      	ldr	r3, [pc, #144]	; (8104c <check_command+0x25c>)
   80fbc:	681b      	ldr	r3, [r3, #0]
   80fbe:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   80fc0:	68bb      	ldr	r3, [r7, #8]
   80fc2:	b2db      	uxtb	r3, r3
   80fc4:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   80fc6:	68bb      	ldr	r3, [r7, #8]
   80fc8:	2b40      	cmp	r3, #64	; 0x40
   80fca:	d802      	bhi.n	80fd2 <check_command+0x1e2>
   80fcc:	68bb      	ldr	r3, [r7, #8]
   80fce:	2b5a      	cmp	r3, #90	; 0x5a
   80fd0:	d807      	bhi.n	80fe2 <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   80fd2:	bf00      	nop
   80fd4:	4814      	ldr	r0, [pc, #80]	; (81028 <check_command+0x238>)
   80fd6:	68b9      	ldr	r1, [r7, #8]
   80fd8:	4b14      	ldr	r3, [pc, #80]	; (8102c <check_command+0x23c>)
   80fda:	4798      	blx	r3
   80fdc:	4603      	mov	r3, r0
   80fde:	2b00      	cmp	r3, #0
   80fe0:	d1f8      	bne.n	80fd4 <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   80fe2:	4b1b      	ldr	r3, [pc, #108]	; (81050 <check_command+0x260>)
   80fe4:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   80fe6:	e00d      	b.n	81004 <check_command+0x214>
		{
			character = *message_array;
   80fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fea:	781b      	ldrb	r3, [r3, #0]
   80fec:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80fee:	bf00      	nop
   80ff0:	480d      	ldr	r0, [pc, #52]	; (81028 <check_command+0x238>)
   80ff2:	6a39      	ldr	r1, [r7, #32]
   80ff4:	4b0d      	ldr	r3, [pc, #52]	; (8102c <check_command+0x23c>)
   80ff6:	4798      	blx	r3
   80ff8:	4603      	mov	r3, r0
   80ffa:	2b00      	cmp	r3, #0
   80ffc:	d1f8      	bne.n	80ff0 <check_command+0x200>
			
			message_array++;
   80ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81000:	3301      	adds	r3, #1
   81002:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   81004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81006:	781b      	ldrb	r3, [r3, #0]
   81008:	2b00      	cmp	r3, #0
   8100a:	d1ed      	bne.n	80fe8 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   8100c:	bf00      	nop
}
   8100e:	3728      	adds	r7, #40	; 0x28
   81010:	46bd      	mov	sp, r7
   81012:	bd80      	pop	{r7, pc}
   81014:	00084e9c 	.word	0x00084e9c
   81018:	00081055 	.word	0x00081055
   8101c:	00084ea0 	.word	0x00084ea0
   81020:	00084eac 	.word	0x00084eac
   81024:	00084eb0 	.word	0x00084eb0
   81028:	40098000 	.word	0x40098000
   8102c:	0008278d 	.word	0x0008278d
   81030:	00084ed0 	.word	0x00084ed0
   81034:	2007a5b0 	.word	0x2007a5b0
   81038:	000810b1 	.word	0x000810b1
   8103c:	00081149 	.word	0x00081149
   81040:	00084eec 	.word	0x00084eec
   81044:	00084ef4 	.word	0x00084ef4
   81048:	00084f10 	.word	0x00084f10
   8104c:	2007a660 	.word	0x2007a660
   81050:	00084f38 	.word	0x00084f38

00081054 <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   81054:	b480      	push	{r7}
   81056:	b085      	sub	sp, #20
   81058:	af00      	add	r7, sp, #0
   8105a:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   8105c:	2300      	movs	r3, #0
   8105e:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   81060:	2301      	movs	r3, #1
   81062:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   81064:	687b      	ldr	r3, [r7, #4]
   81066:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   81068:	2300      	movs	r3, #0
   8106a:	73fb      	strb	r3, [r7, #15]
   8106c:	e014      	b.n	81098 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   8106e:	68bb      	ldr	r3, [r7, #8]
   81070:	781a      	ldrb	r2, [r3, #0]
   81072:	7bfb      	ldrb	r3, [r7, #15]
   81074:	490d      	ldr	r1, [pc, #52]	; (810ac <check_string+0x58>)
   81076:	5ccb      	ldrb	r3, [r1, r3]
   81078:	429a      	cmp	r2, r3
   8107a:	d002      	beq.n	81082 <check_string+0x2e>
		{
			ret_val = 0;
   8107c:	2300      	movs	r3, #0
   8107e:	73bb      	strb	r3, [r7, #14]
			break;
   81080:	e00d      	b.n	8109e <check_string+0x4a>
		}
		if (!*temp_str)
   81082:	68bb      	ldr	r3, [r7, #8]
   81084:	781b      	ldrb	r3, [r3, #0]
   81086:	2b00      	cmp	r3, #0
   81088:	d100      	bne.n	8108c <check_string+0x38>
			break;
   8108a:	e008      	b.n	8109e <check_string+0x4a>
			
		temp_str++;
   8108c:	68bb      	ldr	r3, [r7, #8]
   8108e:	3301      	adds	r3, #1
   81090:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   81092:	7bfb      	ldrb	r3, [r7, #15]
   81094:	3301      	adds	r3, #1
   81096:	73fb      	strb	r3, [r7, #15]
   81098:	7bfb      	ldrb	r3, [r7, #15]
   8109a:	2b09      	cmp	r3, #9
   8109c:	d9e7      	bls.n	8106e <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   8109e:	7bbb      	ldrb	r3, [r7, #14]
}
   810a0:	4618      	mov	r0, r3
   810a2:	3714      	adds	r7, #20
   810a4:	46bd      	mov	sp, r7
   810a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   810aa:	4770      	bx	lr
   810ac:	20070464 	.word	0x20070464

000810b0 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   810b0:	b580      	push	{r7, lr}
   810b2:	b084      	sub	sp, #16
   810b4:	af00      	add	r7, sp, #0
   810b6:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   810b8:	f04f 0300 	mov.w	r3, #0
   810bc:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   810be:	687b      	ldr	r3, [r7, #4]
   810c0:	681b      	ldr	r3, [r3, #0]
   810c2:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   810c4:	68bb      	ldr	r3, [r7, #8]
   810c6:	089b      	lsrs	r3, r3, #2
   810c8:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   810ca:	4b1b      	ldr	r3, [pc, #108]	; (81138 <convert_to_temp+0x88>)
   810cc:	68b8      	ldr	r0, [r7, #8]
   810ce:	4798      	blx	r3
   810d0:	4603      	mov	r3, r0
   810d2:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   810d4:	4b19      	ldr	r3, [pc, #100]	; (8113c <convert_to_temp+0x8c>)
   810d6:	68f8      	ldr	r0, [r7, #12]
   810d8:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   810dc:	4798      	blx	r3
   810de:	4603      	mov	r3, r0
   810e0:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   810e2:	4b17      	ldr	r3, [pc, #92]	; (81140 <convert_to_temp+0x90>)
   810e4:	68f8      	ldr	r0, [r7, #12]
   810e6:	f04f 0100 	mov.w	r1, #0
   810ea:	4798      	blx	r3
   810ec:	4603      	mov	r3, r0
   810ee:	2b00      	cmp	r3, #0
   810f0:	d009      	beq.n	81106 <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   810f2:	4b14      	ldr	r3, [pc, #80]	; (81144 <convert_to_temp+0x94>)
   810f4:	68f8      	ldr	r0, [r7, #12]
   810f6:	4798      	blx	r3
   810f8:	4603      	mov	r3, r0
   810fa:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   810fc:	687b      	ldr	r3, [r7, #4]
   810fe:	68ba      	ldr	r2, [r7, #8]
   81100:	601a      	str	r2, [r3, #0]
		return 1;	
   81102:	2301      	movs	r3, #1
   81104:	e013      	b.n	8112e <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   81106:	4b0c      	ldr	r3, [pc, #48]	; (81138 <convert_to_temp+0x88>)
   81108:	68b8      	ldr	r0, [r7, #8]
   8110a:	4798      	blx	r3
   8110c:	4603      	mov	r3, r0
   8110e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   81112:	4b0c      	ldr	r3, [pc, #48]	; (81144 <convert_to_temp+0x94>)
   81114:	4610      	mov	r0, r2
   81116:	4798      	blx	r3
   81118:	4603      	mov	r3, r0
   8111a:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   8111c:	4b09      	ldr	r3, [pc, #36]	; (81144 <convert_to_temp+0x94>)
   8111e:	68f8      	ldr	r0, [r7, #12]
   81120:	4798      	blx	r3
   81122:	4603      	mov	r3, r0
   81124:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   81126:	687b      	ldr	r3, [r7, #4]
   81128:	68ba      	ldr	r2, [r7, #8]
   8112a:	601a      	str	r2, [r3, #0]
		return 0;
   8112c:	2300      	movs	r3, #0
	}
}
   8112e:	4618      	mov	r0, r3
   81130:	3710      	adds	r7, #16
   81132:	46bd      	mov	sp, r7
   81134:	bd80      	pop	{r7, pc}
   81136:	bf00      	nop
   81138:	00084775 	.word	0x00084775
   8113c:	00084825 	.word	0x00084825
   81140:	00084b89 	.word	0x00084b89
   81144:	00084bb1 	.word	0x00084bb1

00081148 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   81148:	b480      	push	{r7}
   8114a:	b085      	sub	sp, #20
   8114c:	af00      	add	r7, sp, #0
   8114e:	4603      	mov	r3, r0
   81150:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   81152:	2300      	movs	r3, #0
   81154:	73fb      	strb	r3, [r7, #15]
   81156:	2300      	movs	r3, #0
   81158:	73bb      	strb	r3, [r7, #14]
   8115a:	2300      	movs	r3, #0
   8115c:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   8115e:	79fb      	ldrb	r3, [r7, #7]
   81160:	2b09      	cmp	r3, #9
   81162:	d919      	bls.n	81198 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   81164:	79fa      	ldrb	r2, [r7, #7]
   81166:	4b10      	ldr	r3, [pc, #64]	; (811a8 <convert_to_bcd+0x60>)
   81168:	fba3 1302 	umull	r1, r3, r3, r2
   8116c:	08d9      	lsrs	r1, r3, #3
   8116e:	460b      	mov	r3, r1
   81170:	009b      	lsls	r3, r3, #2
   81172:	440b      	add	r3, r1
   81174:	005b      	lsls	r3, r3, #1
   81176:	1ad3      	subs	r3, r2, r3
   81178:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   8117a:	79fa      	ldrb	r2, [r7, #7]
   8117c:	4b0a      	ldr	r3, [pc, #40]	; (811a8 <convert_to_bcd+0x60>)
   8117e:	fba3 1302 	umull	r1, r3, r3, r2
   81182:	08db      	lsrs	r3, r3, #3
   81184:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   81186:	7bfb      	ldrb	r3, [r7, #15]
   81188:	011b      	lsls	r3, r3, #4
   8118a:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   8118c:	7bfa      	ldrb	r2, [r7, #15]
   8118e:	7bbb      	ldrb	r3, [r7, #14]
   81190:	4313      	orrs	r3, r2
   81192:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   81194:	7b7b      	ldrb	r3, [r7, #13]
   81196:	e000      	b.n	8119a <convert_to_bcd+0x52>
	}
	else
		return temp;
   81198:	79fb      	ldrb	r3, [r7, #7]
}
   8119a:	4618      	mov	r0, r3
   8119c:	3714      	adds	r7, #20
   8119e:	46bd      	mov	sp, r7
   811a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   811a4:	4770      	bx	lr
   811a6:	bf00      	nop
   811a8:	cccccccd 	.word	0xcccccccd

000811ac <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   811ac:	b5b0      	push	{r4, r5, r7, lr}
   811ae:	b086      	sub	sp, #24
   811b0:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   811b2:	4b13      	ldr	r3, [pc, #76]	; (81200 <configure_usart+0x54>)
   811b4:	463c      	mov	r4, r7
   811b6:	461d      	mov	r5, r3
   811b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   811ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   811bc:	e895 0003 	ldmia.w	r5, {r0, r1}
   811c0:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   811c4:	2011      	movs	r0, #17
   811c6:	4b0f      	ldr	r3, [pc, #60]	; (81204 <configure_usart+0x58>)
   811c8:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   811ca:	4b0f      	ldr	r3, [pc, #60]	; (81208 <configure_usart+0x5c>)
   811cc:	4798      	blx	r3
   811ce:	4603      	mov	r3, r0
   811d0:	463a      	mov	r2, r7
   811d2:	480e      	ldr	r0, [pc, #56]	; (8120c <configure_usart+0x60>)
   811d4:	4611      	mov	r1, r2
   811d6:	461a      	mov	r2, r3
   811d8:	4b0d      	ldr	r3, [pc, #52]	; (81210 <configure_usart+0x64>)
   811da:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   811dc:	480b      	ldr	r0, [pc, #44]	; (8120c <configure_usart+0x60>)
   811de:	f04f 31ff 	mov.w	r1, #4294967295
   811e2:	4b0c      	ldr	r3, [pc, #48]	; (81214 <configure_usart+0x68>)
   811e4:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   811e6:	4809      	ldr	r0, [pc, #36]	; (8120c <configure_usart+0x60>)
   811e8:	4b0b      	ldr	r3, [pc, #44]	; (81218 <configure_usart+0x6c>)
   811ea:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   811ec:	4807      	ldr	r0, [pc, #28]	; (8120c <configure_usart+0x60>)
   811ee:	4b0b      	ldr	r3, [pc, #44]	; (8121c <configure_usart+0x70>)
   811f0:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   811f2:	2011      	movs	r0, #17
   811f4:	4b0a      	ldr	r3, [pc, #40]	; (81220 <configure_usart+0x74>)
   811f6:	4798      	blx	r3
}
   811f8:	3718      	adds	r7, #24
   811fa:	46bd      	mov	sp, r7
   811fc:	bdb0      	pop	{r4, r5, r7, pc}
   811fe:	bf00      	nop
   81200:	00084f3c 	.word	0x00084f3c
   81204:	00080ca1 	.word	0x00080ca1
   81208:	00080c8d 	.word	0x00080c8d
   8120c:	40098000 	.word	0x40098000
   81210:	00082621 	.word	0x00082621
   81214:	00082721 	.word	0x00082721
   81218:	000826a5 	.word	0x000826a5
   8121c:	000826d5 	.word	0x000826d5
   81220:	00080bcd 	.word	0x00080bcd

00081224 <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   81224:	b580      	push	{r7, lr}
   81226:	b084      	sub	sp, #16
   81228:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   8122a:	2300      	movs	r3, #0
   8122c:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   8122e:	2300      	movs	r3, #0
   81230:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   81232:	4b1a      	ldr	r3, [pc, #104]	; (8129c <usart_initialize+0x78>)
   81234:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   81236:	4b1a      	ldr	r3, [pc, #104]	; (812a0 <usart_initialize+0x7c>)
   81238:	2200      	movs	r2, #0
   8123a:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   8123c:	2300      	movs	r3, #0
   8123e:	73fb      	strb	r3, [r7, #15]
   81240:	e006      	b.n	81250 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   81242:	7bfb      	ldrb	r3, [r7, #15]
   81244:	4a17      	ldr	r2, [pc, #92]	; (812a4 <usart_initialize+0x80>)
   81246:	2100      	movs	r1, #0
   81248:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   8124a:	7bfb      	ldrb	r3, [r7, #15]
   8124c:	3301      	adds	r3, #1
   8124e:	73fb      	strb	r3, [r7, #15]
   81250:	7bfb      	ldrb	r3, [r7, #15]
   81252:	2b09      	cmp	r3, #9
   81254:	d9f5      	bls.n	81242 <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   81256:	4814      	ldr	r0, [pc, #80]	; (812a8 <usart_initialize+0x84>)
   81258:	2101      	movs	r1, #1
   8125a:	4b14      	ldr	r3, [pc, #80]	; (812ac <usart_initialize+0x88>)
   8125c:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   8125e:	4812      	ldr	r0, [pc, #72]	; (812a8 <usart_initialize+0x84>)
   81260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81264:	4b12      	ldr	r3, [pc, #72]	; (812b0 <usart_initialize+0x8c>)
   81266:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   81268:	4b12      	ldr	r3, [pc, #72]	; (812b4 <usart_initialize+0x90>)
   8126a:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   8126c:	e00d      	b.n	8128a <usart_initialize+0x66>
	{
		character = *message_array;
   8126e:	68bb      	ldr	r3, [r7, #8]
   81270:	781b      	ldrb	r3, [r3, #0]
   81272:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   81274:	bf00      	nop
   81276:	480c      	ldr	r0, [pc, #48]	; (812a8 <usart_initialize+0x84>)
   81278:	6879      	ldr	r1, [r7, #4]
   8127a:	4b0f      	ldr	r3, [pc, #60]	; (812b8 <usart_initialize+0x94>)
   8127c:	4798      	blx	r3
   8127e:	4603      	mov	r3, r0
   81280:	2b00      	cmp	r3, #0
   81282:	d1f8      	bne.n	81276 <usart_initialize+0x52>
			
		message_array++;
   81284:	68bb      	ldr	r3, [r7, #8]
   81286:	3301      	adds	r3, #1
   81288:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   8128a:	68bb      	ldr	r3, [r7, #8]
   8128c:	781b      	ldrb	r3, [r3, #0]
   8128e:	2b00      	cmp	r3, #0
   81290:	d1ed      	bne.n	8126e <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   81292:	bf00      	nop
}
   81294:	3710      	adds	r7, #16
   81296:	46bd      	mov	sp, r7
   81298:	bd80      	pop	{r7, pc}
   8129a:	bf00      	nop
   8129c:	000811ad 	.word	0x000811ad
   812a0:	20070460 	.word	0x20070460
   812a4:	20070464 	.word	0x20070464
   812a8:	40098000 	.word	0x40098000
   812ac:	00082705 	.word	0x00082705
   812b0:	00082721 	.word	0x00082721
   812b4:	00084f54 	.word	0x00084f54
   812b8:	0008278d 	.word	0x0008278d

000812bc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   812bc:	b580      	push	{r7, lr}
   812be:	b082      	sub	sp, #8
   812c0:	af00      	add	r7, sp, #0
   812c2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   812c4:	687b      	ldr	r3, [r7, #4]
   812c6:	2b07      	cmp	r3, #7
   812c8:	d82e      	bhi.n	81328 <osc_enable+0x6c>
   812ca:	a201      	add	r2, pc, #4	; (adr r2, 812d0 <osc_enable+0x14>)
   812cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   812d0:	00081329 	.word	0x00081329
   812d4:	000812f1 	.word	0x000812f1
   812d8:	000812f9 	.word	0x000812f9
   812dc:	00081301 	.word	0x00081301
   812e0:	00081309 	.word	0x00081309
   812e4:	00081311 	.word	0x00081311
   812e8:	00081319 	.word	0x00081319
   812ec:	00081321 	.word	0x00081321
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   812f0:	2000      	movs	r0, #0
   812f2:	4b0f      	ldr	r3, [pc, #60]	; (81330 <osc_enable+0x74>)
   812f4:	4798      	blx	r3
		break;
   812f6:	e017      	b.n	81328 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   812f8:	2001      	movs	r0, #1
   812fa:	4b0d      	ldr	r3, [pc, #52]	; (81330 <osc_enable+0x74>)
   812fc:	4798      	blx	r3
		break;
   812fe:	e013      	b.n	81328 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   81300:	2000      	movs	r0, #0
   81302:	4b0c      	ldr	r3, [pc, #48]	; (81334 <osc_enable+0x78>)
   81304:	4798      	blx	r3
		break;
   81306:	e00f      	b.n	81328 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   81308:	2010      	movs	r0, #16
   8130a:	4b0a      	ldr	r3, [pc, #40]	; (81334 <osc_enable+0x78>)
   8130c:	4798      	blx	r3
		break;
   8130e:	e00b      	b.n	81328 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   81310:	2020      	movs	r0, #32
   81312:	4b08      	ldr	r3, [pc, #32]	; (81334 <osc_enable+0x78>)
   81314:	4798      	blx	r3
		break;
   81316:	e007      	b.n	81328 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   81318:	2000      	movs	r0, #0
   8131a:	4b07      	ldr	r3, [pc, #28]	; (81338 <osc_enable+0x7c>)
   8131c:	4798      	blx	r3
		break;
   8131e:	e003      	b.n	81328 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   81320:	2001      	movs	r0, #1
   81322:	4b05      	ldr	r3, [pc, #20]	; (81338 <osc_enable+0x7c>)
   81324:	4798      	blx	r3
		break;
   81326:	bf00      	nop
	}
}
   81328:	3708      	adds	r7, #8
   8132a:	46bd      	mov	sp, r7
   8132c:	bd80      	pop	{r7, pc}
   8132e:	bf00      	nop
   81330:	000822d5 	.word	0x000822d5
   81334:	00082345 	.word	0x00082345
   81338:	000823e5 	.word	0x000823e5

0008133c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   8133c:	b580      	push	{r7, lr}
   8133e:	b082      	sub	sp, #8
   81340:	af00      	add	r7, sp, #0
   81342:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81344:	687b      	ldr	r3, [r7, #4]
   81346:	2b07      	cmp	r3, #7
   81348:	d826      	bhi.n	81398 <osc_is_ready+0x5c>
   8134a:	a201      	add	r2, pc, #4	; (adr r2, 81350 <osc_is_ready+0x14>)
   8134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81350:	00081371 	.word	0x00081371
   81354:	00081375 	.word	0x00081375
   81358:	00081375 	.word	0x00081375
   8135c:	00081387 	.word	0x00081387
   81360:	00081387 	.word	0x00081387
   81364:	00081387 	.word	0x00081387
   81368:	00081387 	.word	0x00081387
   8136c:	00081387 	.word	0x00081387
	case OSC_SLCK_32K_RC:
		return 1;
   81370:	2301      	movs	r3, #1
   81372:	e012      	b.n	8139a <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   81374:	4b0b      	ldr	r3, [pc, #44]	; (813a4 <osc_is_ready+0x68>)
   81376:	4798      	blx	r3
   81378:	4603      	mov	r3, r0
   8137a:	2b00      	cmp	r3, #0
   8137c:	bf0c      	ite	eq
   8137e:	2300      	moveq	r3, #0
   81380:	2301      	movne	r3, #1
   81382:	b2db      	uxtb	r3, r3
   81384:	e009      	b.n	8139a <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81386:	4b08      	ldr	r3, [pc, #32]	; (813a8 <osc_is_ready+0x6c>)
   81388:	4798      	blx	r3
   8138a:	4603      	mov	r3, r0
   8138c:	2b00      	cmp	r3, #0
   8138e:	bf0c      	ite	eq
   81390:	2300      	moveq	r3, #0
   81392:	2301      	movne	r3, #1
   81394:	b2db      	uxtb	r3, r3
   81396:	e000      	b.n	8139a <osc_is_ready+0x5e>
	}

	return 0;
   81398:	2300      	movs	r3, #0
}
   8139a:	4618      	mov	r0, r3
   8139c:	3708      	adds	r7, #8
   8139e:	46bd      	mov	sp, r7
   813a0:	bd80      	pop	{r7, pc}
   813a2:	bf00      	nop
   813a4:	00082311 	.word	0x00082311
   813a8:	00082451 	.word	0x00082451

000813ac <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   813ac:	b480      	push	{r7}
   813ae:	b083      	sub	sp, #12
   813b0:	af00      	add	r7, sp, #0
   813b2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   813b4:	687b      	ldr	r3, [r7, #4]
   813b6:	2b07      	cmp	r3, #7
   813b8:	d825      	bhi.n	81406 <osc_get_rate+0x5a>
   813ba:	a201      	add	r2, pc, #4	; (adr r2, 813c0 <osc_get_rate+0x14>)
   813bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813c0:	000813e1 	.word	0x000813e1
   813c4:	000813e7 	.word	0x000813e7
   813c8:	000813ed 	.word	0x000813ed
   813cc:	000813f3 	.word	0x000813f3
   813d0:	000813f7 	.word	0x000813f7
   813d4:	000813fb 	.word	0x000813fb
   813d8:	000813ff 	.word	0x000813ff
   813dc:	00081403 	.word	0x00081403
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   813e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   813e4:	e010      	b.n	81408 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   813e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   813ea:	e00d      	b.n	81408 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   813ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   813f0:	e00a      	b.n	81408 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   813f2:	4b08      	ldr	r3, [pc, #32]	; (81414 <osc_get_rate+0x68>)
   813f4:	e008      	b.n	81408 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   813f6:	4b08      	ldr	r3, [pc, #32]	; (81418 <osc_get_rate+0x6c>)
   813f8:	e006      	b.n	81408 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   813fa:	4b08      	ldr	r3, [pc, #32]	; (8141c <osc_get_rate+0x70>)
   813fc:	e004      	b.n	81408 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   813fe:	4b07      	ldr	r3, [pc, #28]	; (8141c <osc_get_rate+0x70>)
   81400:	e002      	b.n	81408 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81402:	4b06      	ldr	r3, [pc, #24]	; (8141c <osc_get_rate+0x70>)
   81404:	e000      	b.n	81408 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81406:	2300      	movs	r3, #0
}
   81408:	4618      	mov	r0, r3
   8140a:	370c      	adds	r7, #12
   8140c:	46bd      	mov	sp, r7
   8140e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81412:	4770      	bx	lr
   81414:	003d0900 	.word	0x003d0900
   81418:	007a1200 	.word	0x007a1200
   8141c:	00b71b00 	.word	0x00b71b00

00081420 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   81420:	b580      	push	{r7, lr}
   81422:	b082      	sub	sp, #8
   81424:	af00      	add	r7, sp, #0
   81426:	4603      	mov	r3, r0
   81428:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8142a:	bf00      	nop
   8142c:	79fb      	ldrb	r3, [r7, #7]
   8142e:	4618      	mov	r0, r3
   81430:	4b05      	ldr	r3, [pc, #20]	; (81448 <osc_wait_ready+0x28>)
   81432:	4798      	blx	r3
   81434:	4603      	mov	r3, r0
   81436:	f083 0301 	eor.w	r3, r3, #1
   8143a:	b2db      	uxtb	r3, r3
   8143c:	2b00      	cmp	r3, #0
   8143e:	d1f5      	bne.n	8142c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   81440:	3708      	adds	r7, #8
   81442:	46bd      	mov	sp, r7
   81444:	bd80      	pop	{r7, pc}
   81446:	bf00      	nop
   81448:	0008133d 	.word	0x0008133d

0008144c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8144c:	b580      	push	{r7, lr}
   8144e:	b086      	sub	sp, #24
   81450:	af00      	add	r7, sp, #0
   81452:	60f8      	str	r0, [r7, #12]
   81454:	607a      	str	r2, [r7, #4]
   81456:	603b      	str	r3, [r7, #0]
   81458:	460b      	mov	r3, r1
   8145a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8145c:	687b      	ldr	r3, [r7, #4]
   8145e:	2b00      	cmp	r3, #0
   81460:	d107      	bne.n	81472 <pll_config_init+0x26>
   81462:	683b      	ldr	r3, [r7, #0]
   81464:	2b00      	cmp	r3, #0
   81466:	d104      	bne.n	81472 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81468:	68fb      	ldr	r3, [r7, #12]
   8146a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8146e:	601a      	str	r2, [r3, #0]
   81470:	e019      	b.n	814a6 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   81472:	7afb      	ldrb	r3, [r7, #11]
   81474:	4618      	mov	r0, r3
   81476:	4b0d      	ldr	r3, [pc, #52]	; (814ac <pll_config_init+0x60>)
   81478:	4798      	blx	r3
   8147a:	4602      	mov	r2, r0
   8147c:	687b      	ldr	r3, [r7, #4]
   8147e:	fbb2 f3f3 	udiv	r3, r2, r3
   81482:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   81484:	697b      	ldr	r3, [r7, #20]
   81486:	683a      	ldr	r2, [r7, #0]
   81488:	fb02 f303 	mul.w	r3, r2, r3
   8148c:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   8148e:	683b      	ldr	r3, [r7, #0]
   81490:	3b01      	subs	r3, #1
   81492:	041a      	lsls	r2, r3, #16
   81494:	4b06      	ldr	r3, [pc, #24]	; (814b0 <pll_config_init+0x64>)
   81496:	4013      	ands	r3, r2
   81498:	687a      	ldr	r2, [r7, #4]
   8149a:	b2d2      	uxtb	r2, r2
   8149c:	4313      	orrs	r3, r2
   8149e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   814a2:	68fb      	ldr	r3, [r7, #12]
   814a4:	601a      	str	r2, [r3, #0]
	}
}
   814a6:	3718      	adds	r7, #24
   814a8:	46bd      	mov	sp, r7
   814aa:	bd80      	pop	{r7, pc}
   814ac:	000813ad 	.word	0x000813ad
   814b0:	07ff0000 	.word	0x07ff0000

000814b4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   814b4:	b580      	push	{r7, lr}
   814b6:	b082      	sub	sp, #8
   814b8:	af00      	add	r7, sp, #0
   814ba:	6078      	str	r0, [r7, #4]
   814bc:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   814be:	683b      	ldr	r3, [r7, #0]
   814c0:	2b00      	cmp	r3, #0
   814c2:	d108      	bne.n	814d6 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   814c4:	4b08      	ldr	r3, [pc, #32]	; (814e8 <pll_enable+0x34>)
   814c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   814c8:	4b08      	ldr	r3, [pc, #32]	; (814ec <pll_enable+0x38>)
   814ca:	687a      	ldr	r2, [r7, #4]
   814cc:	6812      	ldr	r2, [r2, #0]
   814ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   814d2:	629a      	str	r2, [r3, #40]	; 0x28
   814d4:	e005      	b.n	814e2 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   814d6:	4b05      	ldr	r3, [pc, #20]	; (814ec <pll_enable+0x38>)
   814d8:	687a      	ldr	r2, [r7, #4]
   814da:	6812      	ldr	r2, [r2, #0]
   814dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   814e0:	61da      	str	r2, [r3, #28]
	}
}
   814e2:	3708      	adds	r7, #8
   814e4:	46bd      	mov	sp, r7
   814e6:	bd80      	pop	{r7, pc}
   814e8:	0008246d 	.word	0x0008246d
   814ec:	400e0600 	.word	0x400e0600

000814f0 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   814f0:	b580      	push	{r7, lr}
   814f2:	b082      	sub	sp, #8
   814f4:	af00      	add	r7, sp, #0
   814f6:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   814f8:	687b      	ldr	r3, [r7, #4]
   814fa:	2b00      	cmp	r3, #0
   814fc:	d103      	bne.n	81506 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   814fe:	4b05      	ldr	r3, [pc, #20]	; (81514 <pll_is_locked+0x24>)
   81500:	4798      	blx	r3
   81502:	4603      	mov	r3, r0
   81504:	e002      	b.n	8150c <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   81506:	4b04      	ldr	r3, [pc, #16]	; (81518 <pll_is_locked+0x28>)
   81508:	4798      	blx	r3
   8150a:	4603      	mov	r3, r0
}
   8150c:	4618      	mov	r0, r3
   8150e:	3708      	adds	r7, #8
   81510:	46bd      	mov	sp, r7
   81512:	bd80      	pop	{r7, pc}
   81514:	00082485 	.word	0x00082485
   81518:	000824a1 	.word	0x000824a1

0008151c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8151c:	b580      	push	{r7, lr}
   8151e:	b082      	sub	sp, #8
   81520:	af00      	add	r7, sp, #0
   81522:	4603      	mov	r3, r0
   81524:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   81526:	79fb      	ldrb	r3, [r7, #7]
   81528:	3b03      	subs	r3, #3
   8152a:	2b04      	cmp	r3, #4
   8152c:	d808      	bhi.n	81540 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8152e:	79fb      	ldrb	r3, [r7, #7]
   81530:	4618      	mov	r0, r3
   81532:	4b05      	ldr	r3, [pc, #20]	; (81548 <pll_enable_source+0x2c>)
   81534:	4798      	blx	r3
		osc_wait_ready(e_src);
   81536:	79fb      	ldrb	r3, [r7, #7]
   81538:	4618      	mov	r0, r3
   8153a:	4b04      	ldr	r3, [pc, #16]	; (8154c <pll_enable_source+0x30>)
   8153c:	4798      	blx	r3
		break;
   8153e:	e000      	b.n	81542 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   81540:	bf00      	nop
	}
}
   81542:	3708      	adds	r7, #8
   81544:	46bd      	mov	sp, r7
   81546:	bd80      	pop	{r7, pc}
   81548:	000812bd 	.word	0x000812bd
   8154c:	00081421 	.word	0x00081421

00081550 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   81550:	b580      	push	{r7, lr}
   81552:	b082      	sub	sp, #8
   81554:	af00      	add	r7, sp, #0
   81556:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81558:	bf00      	nop
   8155a:	6878      	ldr	r0, [r7, #4]
   8155c:	4b04      	ldr	r3, [pc, #16]	; (81570 <pll_wait_for_lock+0x20>)
   8155e:	4798      	blx	r3
   81560:	4603      	mov	r3, r0
   81562:	2b00      	cmp	r3, #0
   81564:	d0f9      	beq.n	8155a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   81566:	2300      	movs	r3, #0
}
   81568:	4618      	mov	r0, r3
   8156a:	3708      	adds	r7, #8
   8156c:	46bd      	mov	sp, r7
   8156e:	bd80      	pop	{r7, pc}
   81570:	000814f1 	.word	0x000814f1

00081574 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81574:	b580      	push	{r7, lr}
   81576:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81578:	2006      	movs	r0, #6
   8157a:	4b04      	ldr	r3, [pc, #16]	; (8158c <sysclk_get_main_hz+0x18>)
   8157c:	4798      	blx	r3
   8157e:	4602      	mov	r2, r0
   81580:	4613      	mov	r3, r2
   81582:	00db      	lsls	r3, r3, #3
   81584:	1a9b      	subs	r3, r3, r2
   81586:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81588:	4618      	mov	r0, r3
   8158a:	bd80      	pop	{r7, pc}
   8158c:	000813ad 	.word	0x000813ad

00081590 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81590:	b580      	push	{r7, lr}
   81592:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   81594:	4b02      	ldr	r3, [pc, #8]	; (815a0 <sysclk_get_cpu_hz+0x10>)
   81596:	4798      	blx	r3
   81598:	4603      	mov	r3, r0
   8159a:	085b      	lsrs	r3, r3, #1
}
   8159c:	4618      	mov	r0, r3
   8159e:	bd80      	pop	{r7, pc}
   815a0:	00081575 	.word	0x00081575

000815a4 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   815a4:	b590      	push	{r4, r7, lr}
   815a6:	b083      	sub	sp, #12
   815a8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   815aa:	4b10      	ldr	r3, [pc, #64]	; (815ec <sysclk_init+0x48>)
   815ac:	4798      	blx	r3
   815ae:	4603      	mov	r3, r0
   815b0:	4618      	mov	r0, r3
   815b2:	4b0f      	ldr	r3, [pc, #60]	; (815f0 <sysclk_init+0x4c>)
   815b4:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   815b6:	2006      	movs	r0, #6
   815b8:	4b0e      	ldr	r3, [pc, #56]	; (815f4 <sysclk_init+0x50>)
   815ba:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   815bc:	1d3b      	adds	r3, r7, #4
   815be:	4618      	mov	r0, r3
   815c0:	2106      	movs	r1, #6
   815c2:	2201      	movs	r2, #1
   815c4:	230e      	movs	r3, #14
   815c6:	4c0c      	ldr	r4, [pc, #48]	; (815f8 <sysclk_init+0x54>)
   815c8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   815ca:	1d3b      	adds	r3, r7, #4
   815cc:	4618      	mov	r0, r3
   815ce:	2100      	movs	r1, #0
   815d0:	4b0a      	ldr	r3, [pc, #40]	; (815fc <sysclk_init+0x58>)
   815d2:	4798      	blx	r3
		pll_wait_for_lock(0);
   815d4:	2000      	movs	r0, #0
   815d6:	4b0a      	ldr	r3, [pc, #40]	; (81600 <sysclk_init+0x5c>)
   815d8:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   815da:	2010      	movs	r0, #16
   815dc:	4b09      	ldr	r3, [pc, #36]	; (81604 <sysclk_init+0x60>)
   815de:	4798      	blx	r3
		break;
   815e0:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   815e2:	4b09      	ldr	r3, [pc, #36]	; (81608 <sysclk_init+0x64>)
   815e4:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   815e6:	370c      	adds	r7, #12
   815e8:	46bd      	mov	sp, r7
   815ea:	bd90      	pop	{r4, r7, pc}
   815ec:	00081591 	.word	0x00081591
   815f0:	00082a99 	.word	0x00082a99
   815f4:	0008151d 	.word	0x0008151d
   815f8:	0008144d 	.word	0x0008144d
   815fc:	000814b5 	.word	0x000814b5
   81600:	00081551 	.word	0x00081551
   81604:	00082251 	.word	0x00082251
   81608:	00082919 	.word	0x00082919

0008160c <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   8160c:	b580      	push	{r7, lr}
   8160e:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

	#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81610:	4b16      	ldr	r3, [pc, #88]	; (8166c <safe_board_init+0x60>)
   81612:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81616:	605a      	str	r2, [r3, #4]
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   81618:	2001      	movs	r0, #1
   8161a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8161e:	4b14      	ldr	r3, [pc, #80]	; (81670 <safe_board_init+0x64>)
   81620:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   81622:	2000      	movs	r0, #0
   81624:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81628:	4b11      	ldr	r3, [pc, #68]	; (81670 <safe_board_init+0x64>)
   8162a:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   8162c:	2034      	movs	r0, #52	; 0x34
   8162e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81632:	4b0f      	ldr	r3, [pc, #60]	; (81670 <safe_board_init+0x64>)
   81634:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   81636:	2035      	movs	r0, #53	; 0x35
   81638:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8163c:	4b0c      	ldr	r3, [pc, #48]	; (81670 <safe_board_init+0x64>)
   8163e:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   81640:	202f      	movs	r0, #47	; 0x2f
   81642:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81646:	4b0a      	ldr	r3, [pc, #40]	; (81670 <safe_board_init+0x64>)
   81648:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   8164a:	202e      	movs	r0, #46	; 0x2e
   8164c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81650:	4b07      	ldr	r3, [pc, #28]	; (81670 <safe_board_init+0x64>)
   81652:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   81654:	208f      	movs	r0, #143	; 0x8f
   81656:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8165a:	4b05      	ldr	r3, [pc, #20]	; (81670 <safe_board_init+0x64>)
   8165c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   8165e:	2090      	movs	r0, #144	; 0x90
   81660:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81664:	4b02      	ldr	r3, [pc, #8]	; (81670 <safe_board_init+0x64>)
   81666:	4798      	blx	r3
	#endif
	return;
   81668:	bf00      	nop
}
   8166a:	bd80      	pop	{r7, pc}
   8166c:	400e1a50 	.word	0x400e1a50
   81670:	00081f31 	.word	0x00081f31

00081674 <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   81674:	b580      	push	{r7, lr}
   81676:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   81678:	2057      	movs	r0, #87	; 0x57
   8167a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8167e:	4b25      	ldr	r3, [pc, #148]	; (81714 <board_init+0xa0>)
   81680:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   81682:	2057      	movs	r0, #87	; 0x57
   81684:	4b24      	ldr	r3, [pc, #144]	; (81718 <board_init+0xa4>)
   81686:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81688:	203b      	movs	r0, #59	; 0x3b
   8168a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8168e:	4b21      	ldr	r3, [pc, #132]	; (81714 <board_init+0xa0>)
   81690:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81692:	2055      	movs	r0, #85	; 0x55
   81694:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81698:	4b1e      	ldr	r3, [pc, #120]	; (81714 <board_init+0xa0>)
   8169a:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8169c:	2056      	movs	r0, #86	; 0x56
   8169e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   816a2:	4b1c      	ldr	r3, [pc, #112]	; (81714 <board_init+0xa0>)
   816a4:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   816a6:	2087      	movs	r0, #135	; 0x87
   816a8:	491c      	ldr	r1, [pc, #112]	; (8171c <board_init+0xa8>)
   816aa:	4b1a      	ldr	r3, [pc, #104]	; (81714 <board_init+0xa0>)
   816ac:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   816ae:	2037      	movs	r0, #55	; 0x37
   816b0:	491b      	ldr	r1, [pc, #108]	; (81720 <board_init+0xac>)
   816b2:	4b18      	ldr	r3, [pc, #96]	; (81714 <board_init+0xa0>)
   816b4:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   816b6:	481b      	ldr	r0, [pc, #108]	; (81724 <board_init+0xb0>)
   816b8:	f44f 7140 	mov.w	r1, #768	; 0x300
   816bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   816c0:	4b19      	ldr	r3, [pc, #100]	; (81728 <board_init+0xb4>)
   816c2:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   816c4:	2019      	movs	r0, #25
   816c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816ca:	4b12      	ldr	r3, [pc, #72]	; (81714 <board_init+0xa0>)
   816cc:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   816ce:	201a      	movs	r0, #26
   816d0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816d4:	4b0f      	ldr	r3, [pc, #60]	; (81714 <board_init+0xa0>)
   816d6:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   816d8:	201b      	movs	r0, #27
   816da:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816de:	4b0d      	ldr	r3, [pc, #52]	; (81714 <board_init+0xa0>)
   816e0:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   816e2:	201c      	movs	r0, #28
   816e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816e8:	4b0a      	ldr	r3, [pc, #40]	; (81714 <board_init+0xa0>)
   816ea:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   816ec:	200a      	movs	r0, #10
   816ee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816f2:	4b08      	ldr	r3, [pc, #32]	; (81714 <board_init+0xa0>)
   816f4:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   816f6:	200b      	movs	r0, #11
   816f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   816fc:	4b05      	ldr	r3, [pc, #20]	; (81714 <board_init+0xa0>)
   816fe:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   81700:	208e      	movs	r0, #142	; 0x8e
   81702:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81706:	4b03      	ldr	r3, [pc, #12]	; (81714 <board_init+0xa0>)
   81708:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   8170a:	208e      	movs	r0, #142	; 0x8e
   8170c:	4b07      	ldr	r3, [pc, #28]	; (8172c <board_init+0xb8>)
   8170e:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   81710:	bd80      	pop	{r7, pc}
   81712:	bf00      	nop
   81714:	00081f31 	.word	0x00081f31
   81718:	00081e69 	.word	0x00081e69
   8171c:	28000079 	.word	0x28000079
   81720:	28000059 	.word	0x28000059
   81724:	400e0e00 	.word	0x400e0e00
   81728:	0008206d 	.word	0x0008206d
   8172c:	00081e9d 	.word	0x00081e9d

00081730 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   81730:	b480      	push	{r7}
   81732:	b083      	sub	sp, #12
   81734:	af00      	add	r7, sp, #0
   81736:	6078      	str	r0, [r7, #4]
   81738:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8173a:	687b      	ldr	r3, [r7, #4]
   8173c:	683a      	ldr	r2, [r7, #0]
   8173e:	601a      	str	r2, [r3, #0]
}
   81740:	370c      	adds	r7, #12
   81742:	46bd      	mov	sp, r7
   81744:	f85d 7b04 	ldr.w	r7, [sp], #4
   81748:	4770      	bx	lr
   8174a:	bf00      	nop

0008174c <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   8174c:	b480      	push	{r7}
   8174e:	b083      	sub	sp, #12
   81750:	af00      	add	r7, sp, #0
   81752:	6078      	str	r0, [r7, #4]
   81754:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   81756:	687b      	ldr	r3, [r7, #4]
   81758:	683a      	ldr	r2, [r7, #0]
   8175a:	605a      	str	r2, [r3, #4]
}
   8175c:	370c      	adds	r7, #12
   8175e:	46bd      	mov	sp, r7
   81760:	f85d 7b04 	ldr.w	r7, [sp], #4
   81764:	4770      	bx	lr
   81766:	bf00      	nop

00081768 <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   81768:	b580      	push	{r7, lr}
   8176a:	b082      	sub	sp, #8
   8176c:	af00      	add	r7, sp, #0
   8176e:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   81770:	687b      	ldr	r3, [r7, #4]
   81772:	685b      	ldr	r3, [r3, #4]
   81774:	4618      	mov	r0, r3
   81776:	4b02      	ldr	r3, [pc, #8]	; (81780 <sn65hvd234_enable+0x18>)
   81778:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   8177a:	3708      	adds	r7, #8
   8177c:	46bd      	mov	sp, r7
   8177e:	bd80      	pop	{r7, pc}
   81780:	00081e69 	.word	0x00081e69

00081784 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   81784:	b580      	push	{r7, lr}
   81786:	b082      	sub	sp, #8
   81788:	af00      	add	r7, sp, #0
   8178a:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   8178c:	687b      	ldr	r3, [r7, #4]
   8178e:	681b      	ldr	r3, [r3, #0]
   81790:	4618      	mov	r0, r3
   81792:	4b02      	ldr	r3, [pc, #8]	; (8179c <sn65hvd234_disable_low_power+0x18>)
   81794:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   81796:	3708      	adds	r7, #8
   81798:	46bd      	mov	sp, r7
   8179a:	bd80      	pop	{r7, pc}
   8179c:	00081e9d 	.word	0x00081e9d

000817a0 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   817a0:	b580      	push	{r7, lr}
   817a2:	b08a      	sub	sp, #40	; 0x28
   817a4:	af00      	add	r7, sp, #0
   817a6:	60f8      	str	r0, [r7, #12]
   817a8:	60b9      	str	r1, [r7, #8]
   817aa:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   817ac:	687b      	ldr	r3, [r7, #4]
   817ae:	f246 12a8 	movw	r2, #25000	; 0x61a8
   817b2:	fb02 f203 	mul.w	r2, r2, r3
   817b6:	68bb      	ldr	r3, [r7, #8]
   817b8:	4413      	add	r3, r2
   817ba:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   817bc:	687b      	ldr	r3, [r7, #4]
   817be:	f246 11a8 	movw	r1, #25000	; 0x61a8
   817c2:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   817c6:	fbb2 f3f3 	udiv	r3, r2, r3
   817ca:	2b80      	cmp	r3, #128	; 0x80
   817cc:	d901      	bls.n	817d2 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   817ce:	2300      	movs	r3, #0
   817d0:	e085      	b.n	818de <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   817d2:	68bb      	ldr	r3, [r7, #8]
   817d4:	085a      	lsrs	r2, r3, #1
   817d6:	687b      	ldr	r3, [r7, #4]
   817d8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   817dc:	fb01 f303 	mul.w	r3, r1, r3
   817e0:	429a      	cmp	r2, r3
   817e2:	d201      	bcs.n	817e8 <can_set_baudrate+0x48>
		return 0;
   817e4:	2300      	movs	r3, #0
   817e6:	e07a      	b.n	818de <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   817e8:	2308      	movs	r3, #8
   817ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   817ee:	f04f 33ff 	mov.w	r3, #4294967295
   817f2:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   817f4:	2308      	movs	r3, #8
   817f6:	77fb      	strb	r3, [r7, #31]
   817f8:	e02b      	b.n	81852 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   817fa:	7ffb      	ldrb	r3, [r7, #31]
   817fc:	687a      	ldr	r2, [r7, #4]
   817fe:	fb02 f303 	mul.w	r3, r2, r3
   81802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81806:	fb02 f303 	mul.w	r3, r2, r3
   8180a:	68ba      	ldr	r2, [r7, #8]
   8180c:	fbb2 f3f3 	udiv	r3, r2, r3
   81810:	2b80      	cmp	r3, #128	; 0x80
   81812:	d81b      	bhi.n	8184c <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   81814:	7ffb      	ldrb	r3, [r7, #31]
   81816:	687a      	ldr	r2, [r7, #4]
   81818:	fb02 f303 	mul.w	r3, r2, r3
   8181c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81820:	fb02 f203 	mul.w	r2, r2, r3
   81824:	68bb      	ldr	r3, [r7, #8]
   81826:	fbb3 f1f2 	udiv	r1, r3, r2
   8182a:	fb02 f201 	mul.w	r2, r2, r1
   8182e:	1a9b      	subs	r3, r3, r2
   81830:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   81832:	69ba      	ldr	r2, [r7, #24]
   81834:	6a3b      	ldr	r3, [r7, #32]
   81836:	429a      	cmp	r2, r3
   81838:	d208      	bcs.n	8184c <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   8183a:	69bb      	ldr	r3, [r7, #24]
   8183c:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   8183e:	7ffb      	ldrb	r3, [r7, #31]
   81840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   81844:	6a3b      	ldr	r3, [r7, #32]
   81846:	2b00      	cmp	r3, #0
   81848:	d100      	bne.n	8184c <can_set_baudrate+0xac>
					break;
   8184a:	e005      	b.n	81858 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   8184c:	7ffb      	ldrb	r3, [r7, #31]
   8184e:	3301      	adds	r3, #1
   81850:	77fb      	strb	r3, [r7, #31]
   81852:	7ffb      	ldrb	r3, [r7, #31]
   81854:	2b19      	cmp	r3, #25
   81856:	d9d0      	bls.n	817fa <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   81858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   8185c:	687a      	ldr	r2, [r7, #4]
   8185e:	fb02 f303 	mul.w	r3, r2, r3
   81862:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81866:	fb02 f303 	mul.w	r3, r2, r3
   8186a:	68ba      	ldr	r2, [r7, #8]
   8186c:	fbb2 f3f3 	udiv	r3, r2, r3
   81870:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   81872:	7dfb      	ldrb	r3, [r7, #23]
   81874:	2b01      	cmp	r3, #1
   81876:	d801      	bhi.n	8187c <can_set_baudrate+0xdc>
		return 0;
   81878:	2300      	movs	r3, #0
   8187a:	e030      	b.n	818de <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   8187c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81880:	f1a3 0208 	sub.w	r2, r3, #8
   81884:	4613      	mov	r3, r2
   81886:	005b      	lsls	r3, r3, #1
   81888:	4413      	add	r3, r2
   8188a:	005b      	lsls	r3, r3, #1
   8188c:	4a16      	ldr	r2, [pc, #88]	; (818e8 <can_set_baudrate+0x148>)
   8188e:	4413      	add	r3, r2
   81890:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81892:	68f8      	ldr	r0, [r7, #12]
   81894:	4b15      	ldr	r3, [pc, #84]	; (818ec <can_set_baudrate+0x14c>)
   81896:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81898:	693b      	ldr	r3, [r7, #16]
   8189a:	78db      	ldrb	r3, [r3, #3]
   8189c:	3b01      	subs	r3, #1
   8189e:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   818a2:	693b      	ldr	r3, [r7, #16]
   818a4:	789b      	ldrb	r3, [r3, #2]
   818a6:	3b01      	subs	r3, #1
   818a8:	011b      	lsls	r3, r3, #4
   818aa:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   818ae:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   818b0:	693b      	ldr	r3, [r7, #16]
   818b2:	785b      	ldrb	r3, [r3, #1]
   818b4:	3b01      	subs	r3, #1
   818b6:	021b      	lsls	r3, r3, #8
   818b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   818bc:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   818be:	693b      	ldr	r3, [r7, #16]
   818c0:	791b      	ldrb	r3, [r3, #4]
   818c2:	3b01      	subs	r3, #1
   818c4:	031b      	lsls	r3, r3, #12
   818c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   818ca:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   818cc:	7dfb      	ldrb	r3, [r7, #23]
   818ce:	3b01      	subs	r3, #1
   818d0:	041b      	lsls	r3, r3, #16
   818d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   818d6:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   818d8:	68fb      	ldr	r3, [r7, #12]
   818da:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   818dc:	2301      	movs	r3, #1
}
   818de:	4618      	mov	r0, r3
   818e0:	3728      	adds	r7, #40	; 0x28
   818e2:	46bd      	mov	sp, r7
   818e4:	bd80      	pop	{r7, pc}
   818e6:	bf00      	nop
   818e8:	00084f74 	.word	0x00084f74
   818ec:	00081999 	.word	0x00081999

000818f0 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   818f0:	b580      	push	{r7, lr}
   818f2:	b086      	sub	sp, #24
   818f4:	af00      	add	r7, sp, #0
   818f6:	60f8      	str	r0, [r7, #12]
   818f8:	60b9      	str	r1, [r7, #8]
   818fa:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   818fc:	68f8      	ldr	r0, [r7, #12]
   818fe:	68b9      	ldr	r1, [r7, #8]
   81900:	687a      	ldr	r2, [r7, #4]
   81902:	4b17      	ldr	r3, [pc, #92]	; (81960 <can_init+0x70>)
   81904:	4798      	blx	r3
   81906:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   81908:	697b      	ldr	r3, [r7, #20]
   8190a:	2b00      	cmp	r3, #0
   8190c:	d101      	bne.n	81912 <can_init+0x22>
		return 0;
   8190e:	2300      	movs	r3, #0
   81910:	e021      	b.n	81956 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81912:	68f8      	ldr	r0, [r7, #12]
   81914:	4b13      	ldr	r3, [pc, #76]	; (81964 <can_init+0x74>)
   81916:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   81918:	68f8      	ldr	r0, [r7, #12]
   8191a:	4b13      	ldr	r3, [pc, #76]	; (81968 <can_init+0x78>)
   8191c:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8191e:	2300      	movs	r3, #0
   81920:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   81922:	2300      	movs	r3, #0
   81924:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81926:	e006      	b.n	81936 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   81928:	68f8      	ldr	r0, [r7, #12]
   8192a:	4b10      	ldr	r3, [pc, #64]	; (8196c <can_init+0x7c>)
   8192c:	4798      	blx	r3
   8192e:	6178      	str	r0, [r7, #20]
		ul_tick++;
   81930:	693b      	ldr	r3, [r7, #16]
   81932:	3301      	adds	r3, #1
   81934:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81936:	697b      	ldr	r3, [r7, #20]
   81938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   8193c:	2b00      	cmp	r3, #0
   8193e:	d103      	bne.n	81948 <can_init+0x58>
   81940:	693a      	ldr	r2, [r7, #16]
   81942:	4b0b      	ldr	r3, [pc, #44]	; (81970 <can_init+0x80>)
   81944:	429a      	cmp	r2, r3
   81946:	d9ef      	bls.n	81928 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   81948:	693a      	ldr	r2, [r7, #16]
   8194a:	4b0a      	ldr	r3, [pc, #40]	; (81974 <can_init+0x84>)
   8194c:	429a      	cmp	r2, r3
   8194e:	d101      	bne.n	81954 <can_init+0x64>
		return 0;
   81950:	2300      	movs	r3, #0
   81952:	e000      	b.n	81956 <can_init+0x66>
	} else {
		return 1;
   81954:	2301      	movs	r3, #1
	}
}
   81956:	4618      	mov	r0, r3
   81958:	3718      	adds	r7, #24
   8195a:	46bd      	mov	sp, r7
   8195c:	bd80      	pop	{r7, pc}
   8195e:	bf00      	nop
   81960:	000817a1 	.word	0x000817a1
   81964:	00081c4d 	.word	0x00081c4d
   81968:	00081979 	.word	0x00081979
   8196c:	000819f1 	.word	0x000819f1
   81970:	0001869f 	.word	0x0001869f
   81974:	000186a0 	.word	0x000186a0

00081978 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   81978:	b480      	push	{r7}
   8197a:	b083      	sub	sp, #12
   8197c:	af00      	add	r7, sp, #0
   8197e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81980:	687b      	ldr	r3, [r7, #4]
   81982:	681b      	ldr	r3, [r3, #0]
   81984:	f043 0201 	orr.w	r2, r3, #1
   81988:	687b      	ldr	r3, [r7, #4]
   8198a:	601a      	str	r2, [r3, #0]
}
   8198c:	370c      	adds	r7, #12
   8198e:	46bd      	mov	sp, r7
   81990:	f85d 7b04 	ldr.w	r7, [sp], #4
   81994:	4770      	bx	lr
   81996:	bf00      	nop

00081998 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81998:	b480      	push	{r7}
   8199a:	b083      	sub	sp, #12
   8199c:	af00      	add	r7, sp, #0
   8199e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   819a0:	687b      	ldr	r3, [r7, #4]
   819a2:	681b      	ldr	r3, [r3, #0]
   819a4:	f023 0201 	bic.w	r2, r3, #1
   819a8:	687b      	ldr	r3, [r7, #4]
   819aa:	601a      	str	r2, [r3, #0]
}
   819ac:	370c      	adds	r7, #12
   819ae:	46bd      	mov	sp, r7
   819b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   819b4:	4770      	bx	lr
   819b6:	bf00      	nop

000819b8 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   819b8:	b480      	push	{r7}
   819ba:	b083      	sub	sp, #12
   819bc:	af00      	add	r7, sp, #0
   819be:	6078      	str	r0, [r7, #4]
   819c0:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   819c2:	687b      	ldr	r3, [r7, #4]
   819c4:	683a      	ldr	r2, [r7, #0]
   819c6:	605a      	str	r2, [r3, #4]
}
   819c8:	370c      	adds	r7, #12
   819ca:	46bd      	mov	sp, r7
   819cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   819d0:	4770      	bx	lr
   819d2:	bf00      	nop

000819d4 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   819d4:	b480      	push	{r7}
   819d6:	b083      	sub	sp, #12
   819d8:	af00      	add	r7, sp, #0
   819da:	6078      	str	r0, [r7, #4]
   819dc:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   819de:	687b      	ldr	r3, [r7, #4]
   819e0:	683a      	ldr	r2, [r7, #0]
   819e2:	609a      	str	r2, [r3, #8]
}
   819e4:	370c      	adds	r7, #12
   819e6:	46bd      	mov	sp, r7
   819e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   819ec:	4770      	bx	lr
   819ee:	bf00      	nop

000819f0 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   819f0:	b480      	push	{r7}
   819f2:	b083      	sub	sp, #12
   819f4:	af00      	add	r7, sp, #0
   819f6:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   819f8:	687b      	ldr	r3, [r7, #4]
   819fa:	691b      	ldr	r3, [r3, #16]
}
   819fc:	4618      	mov	r0, r3
   819fe:	370c      	adds	r7, #12
   81a00:	46bd      	mov	sp, r7
   81a02:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a06:	4770      	bx	lr

00081a08 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   81a08:	b480      	push	{r7}
   81a0a:	b083      	sub	sp, #12
   81a0c:	af00      	add	r7, sp, #0
   81a0e:	6078      	str	r0, [r7, #4]
   81a10:	460b      	mov	r3, r1
   81a12:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   81a14:	78fb      	ldrb	r3, [r7, #3]
   81a16:	687a      	ldr	r2, [r7, #4]
   81a18:	015b      	lsls	r3, r3, #5
   81a1a:	4413      	add	r3, r2
   81a1c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81a20:	681b      	ldr	r3, [r3, #0]
}
   81a22:	4618      	mov	r0, r3
   81a24:	370c      	adds	r7, #12
   81a26:	46bd      	mov	sp, r7
   81a28:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a2c:	4770      	bx	lr
   81a2e:	bf00      	nop

00081a30 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81a30:	b480      	push	{r7}
   81a32:	b085      	sub	sp, #20
   81a34:	af00      	add	r7, sp, #0
   81a36:	6078      	str	r0, [r7, #4]
   81a38:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81a3a:	683b      	ldr	r3, [r7, #0]
   81a3c:	681b      	ldr	r3, [r3, #0]
   81a3e:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81a40:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   81a42:	683a      	ldr	r2, [r7, #0]
   81a44:	7992      	ldrb	r2, [r2, #6]
   81a46:	0412      	lsls	r2, r2, #16
   81a48:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81a4c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81a50:	6879      	ldr	r1, [r7, #4]
   81a52:	015b      	lsls	r3, r3, #5
   81a54:	440b      	add	r3, r1
   81a56:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81a5a:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   81a5c:	3714      	adds	r7, #20
   81a5e:	46bd      	mov	sp, r7
   81a60:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a64:	4770      	bx	lr
   81a66:	bf00      	nop

00081a68 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81a68:	b480      	push	{r7}
   81a6a:	b085      	sub	sp, #20
   81a6c:	af00      	add	r7, sp, #0
   81a6e:	6078      	str	r0, [r7, #4]
   81a70:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81a72:	683b      	ldr	r3, [r7, #0]
   81a74:	681b      	ldr	r3, [r3, #0]
   81a76:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81a78:	683b      	ldr	r3, [r7, #0]
   81a7a:	791b      	ldrb	r3, [r3, #4]
   81a7c:	2b00      	cmp	r3, #0
   81a7e:	d12e      	bne.n	81ade <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81a80:	7bfb      	ldrb	r3, [r7, #15]
   81a82:	687a      	ldr	r2, [r7, #4]
   81a84:	3310      	adds	r3, #16
   81a86:	015b      	lsls	r3, r3, #5
   81a88:	4413      	add	r3, r2
   81a8a:	2200      	movs	r2, #0
   81a8c:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   81a8e:	7bfb      	ldrb	r3, [r7, #15]
   81a90:	687a      	ldr	r2, [r7, #4]
   81a92:	3310      	adds	r3, #16
   81a94:	015b      	lsls	r3, r3, #5
   81a96:	4413      	add	r3, r2
   81a98:	2200      	movs	r2, #0
   81a9a:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81a9c:	7bfb      	ldrb	r3, [r7, #15]
   81a9e:	687a      	ldr	r2, [r7, #4]
   81aa0:	015b      	lsls	r3, r3, #5
   81aa2:	4413      	add	r3, r2
   81aa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81aa8:	2200      	movs	r2, #0
   81aaa:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81aac:	7bfb      	ldrb	r3, [r7, #15]
   81aae:	687a      	ldr	r2, [r7, #4]
   81ab0:	015b      	lsls	r3, r3, #5
   81ab2:	4413      	add	r3, r2
   81ab4:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81ab8:	2200      	movs	r2, #0
   81aba:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81abc:	7bfb      	ldrb	r3, [r7, #15]
   81abe:	687a      	ldr	r2, [r7, #4]
   81ac0:	015b      	lsls	r3, r3, #5
   81ac2:	4413      	add	r3, r2
   81ac4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ac8:	2200      	movs	r2, #0
   81aca:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81acc:	7bfb      	ldrb	r3, [r7, #15]
   81ace:	687a      	ldr	r2, [r7, #4]
   81ad0:	015b      	lsls	r3, r3, #5
   81ad2:	4413      	add	r3, r2
   81ad4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ad8:	2200      	movs	r2, #0
   81ada:	605a      	str	r2, [r3, #4]
		return;
   81adc:	e04e      	b.n	81b7c <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81ade:	7bfb      	ldrb	r3, [r7, #15]
   81ae0:	7bfa      	ldrb	r2, [r7, #15]
   81ae2:	6879      	ldr	r1, [r7, #4]
   81ae4:	3210      	adds	r2, #16
   81ae6:	0152      	lsls	r2, r2, #5
   81ae8:	440a      	add	r2, r1
   81aea:	6812      	ldr	r2, [r2, #0]
   81aec:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81af0:	683a      	ldr	r2, [r7, #0]
   81af2:	79d2      	ldrb	r2, [r2, #7]
   81af4:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   81af6:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81af8:	6879      	ldr	r1, [r7, #4]
   81afa:	3310      	adds	r3, #16
   81afc:	015b      	lsls	r3, r3, #5
   81afe:	440b      	add	r3, r1
   81b00:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81b02:	683b      	ldr	r3, [r7, #0]
   81b04:	795b      	ldrb	r3, [r3, #5]
   81b06:	2b00      	cmp	r3, #0
   81b08:	d015      	beq.n	81b36 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   81b0a:	7bfb      	ldrb	r3, [r7, #15]
   81b0c:	683a      	ldr	r2, [r7, #0]
   81b0e:	68d2      	ldr	r2, [r2, #12]
   81b10:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81b14:	6879      	ldr	r1, [r7, #4]
   81b16:	3310      	adds	r3, #16
   81b18:	015b      	lsls	r3, r3, #5
   81b1a:	440b      	add	r3, r1
   81b1c:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81b1e:	7bfb      	ldrb	r3, [r7, #15]
   81b20:	683a      	ldr	r2, [r7, #0]
   81b22:	6912      	ldr	r2, [r2, #16]
   81b24:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81b28:	6879      	ldr	r1, [r7, #4]
   81b2a:	015b      	lsls	r3, r3, #5
   81b2c:	440b      	add	r3, r1
   81b2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b32:	601a      	str	r2, [r3, #0]
   81b34:	e010      	b.n	81b58 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81b36:	7bfb      	ldrb	r3, [r7, #15]
   81b38:	683a      	ldr	r2, [r7, #0]
   81b3a:	68d2      	ldr	r2, [r2, #12]
   81b3c:	6879      	ldr	r1, [r7, #4]
   81b3e:	3310      	adds	r3, #16
   81b40:	015b      	lsls	r3, r3, #5
   81b42:	440b      	add	r3, r1
   81b44:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81b46:	7bfb      	ldrb	r3, [r7, #15]
   81b48:	683a      	ldr	r2, [r7, #0]
   81b4a:	6912      	ldr	r2, [r2, #16]
   81b4c:	6879      	ldr	r1, [r7, #4]
   81b4e:	015b      	lsls	r3, r3, #5
   81b50:	440b      	add	r3, r1
   81b52:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81b56:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81b58:	7bfb      	ldrb	r3, [r7, #15]
   81b5a:	7bfa      	ldrb	r2, [r7, #15]
   81b5c:	6879      	ldr	r1, [r7, #4]
   81b5e:	3210      	adds	r2, #16
   81b60:	0152      	lsls	r2, r2, #5
   81b62:	440a      	add	r2, r1
   81b64:	6812      	ldr	r2, [r2, #0]
   81b66:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81b6a:	683a      	ldr	r2, [r7, #0]
   81b6c:	7912      	ldrb	r2, [r2, #4]
   81b6e:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81b70:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81b72:	6879      	ldr	r1, [r7, #4]
   81b74:	3310      	adds	r3, #16
   81b76:	015b      	lsls	r3, r3, #5
   81b78:	440b      	add	r3, r1
   81b7a:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81b7c:	3714      	adds	r7, #20
   81b7e:	46bd      	mov	sp, r7
   81b80:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b84:	4770      	bx	lr
   81b86:	bf00      	nop

00081b88 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81b88:	b580      	push	{r7, lr}
   81b8a:	b086      	sub	sp, #24
   81b8c:	af00      	add	r7, sp, #0
   81b8e:	6078      	str	r0, [r7, #4]
   81b90:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81b92:	2300      	movs	r3, #0
   81b94:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81b96:	683b      	ldr	r3, [r7, #0]
   81b98:	681b      	ldr	r3, [r3, #0]
   81b9a:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81b9c:	683b      	ldr	r3, [r7, #0]
   81b9e:	689b      	ldr	r3, [r3, #8]
   81ba0:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81ba2:	68fb      	ldr	r3, [r7, #12]
   81ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81ba8:	2b00      	cmp	r3, #0
   81baa:	d006      	beq.n	81bba <can_mailbox_read+0x32>
   81bac:	68fb      	ldr	r3, [r7, #12]
   81bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81bb2:	2b00      	cmp	r3, #0
   81bb4:	d001      	beq.n	81bba <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81bb6:	2302      	movs	r3, #2
   81bb8:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81bba:	7cfb      	ldrb	r3, [r7, #19]
   81bbc:	687a      	ldr	r2, [r7, #4]
   81bbe:	015b      	lsls	r3, r3, #5
   81bc0:	4413      	add	r3, r2
   81bc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81bc6:	685b      	ldr	r3, [r3, #4]
   81bc8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81bcc:	683b      	ldr	r3, [r7, #0]
   81bce:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81bd0:	68fb      	ldr	r3, [r7, #12]
   81bd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81bd6:	0c1b      	lsrs	r3, r3, #16
   81bd8:	b2da      	uxtb	r2, r3
   81bda:	683b      	ldr	r3, [r7, #0]
   81bdc:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81bde:	7cfb      	ldrb	r3, [r7, #19]
   81be0:	687a      	ldr	r2, [r7, #4]
   81be2:	015b      	lsls	r3, r3, #5
   81be4:	4413      	add	r3, r2
   81be6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81bea:	685a      	ldr	r2, [r3, #4]
   81bec:	683b      	ldr	r3, [r7, #0]
   81bee:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81bf0:	683b      	ldr	r3, [r7, #0]
   81bf2:	799b      	ldrb	r3, [r3, #6]
   81bf4:	2b04      	cmp	r3, #4
   81bf6:	d908      	bls.n	81c0a <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81bf8:	7cfb      	ldrb	r3, [r7, #19]
   81bfa:	687a      	ldr	r2, [r7, #4]
   81bfc:	015b      	lsls	r3, r3, #5
   81bfe:	4413      	add	r3, r2
   81c00:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81c04:	681a      	ldr	r2, [r3, #0]
   81c06:	683b      	ldr	r3, [r7, #0]
   81c08:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81c0a:	7cfb      	ldrb	r3, [r7, #19]
   81c0c:	687a      	ldr	r2, [r7, #4]
   81c0e:	015b      	lsls	r3, r3, #5
   81c10:	4413      	add	r3, r2
   81c12:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81c16:	681a      	ldr	r2, [r3, #0]
   81c18:	683b      	ldr	r3, [r7, #0]
   81c1a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81c1c:	683b      	ldr	r3, [r7, #0]
   81c1e:	689b      	ldr	r3, [r3, #8]
   81c20:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81c22:	68fb      	ldr	r3, [r7, #12]
   81c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81c28:	2b00      	cmp	r3, #0
   81c2a:	d003      	beq.n	81c34 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81c2c:	697b      	ldr	r3, [r7, #20]
   81c2e:	f043 0304 	orr.w	r3, r3, #4
   81c32:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81c34:	6878      	ldr	r0, [r7, #4]
   81c36:	6839      	ldr	r1, [r7, #0]
   81c38:	4b03      	ldr	r3, [pc, #12]	; (81c48 <can_mailbox_read+0xc0>)
   81c3a:	4798      	blx	r3

	return ul_retval;
   81c3c:	697b      	ldr	r3, [r7, #20]
}
   81c3e:	4618      	mov	r0, r3
   81c40:	3718      	adds	r7, #24
   81c42:	46bd      	mov	sp, r7
   81c44:	bd80      	pop	{r7, pc}
   81c46:	bf00      	nop
   81c48:	00081a31 	.word	0x00081a31

00081c4c <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81c4c:	b580      	push	{r7, lr}
   81c4e:	b08c      	sub	sp, #48	; 0x30
   81c50:	af00      	add	r7, sp, #0
   81c52:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81c54:	2300      	movs	r3, #0
   81c56:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81c58:	2300      	movs	r3, #0
   81c5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81c5e:	e00d      	b.n	81c7c <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   81c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c64:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81c66:	f107 030c 	add.w	r3, r7, #12
   81c6a:	6878      	ldr	r0, [r7, #4]
   81c6c:	4619      	mov	r1, r3
   81c6e:	4b07      	ldr	r3, [pc, #28]	; (81c8c <can_reset_all_mailbox+0x40>)
   81c70:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c76:	3301      	adds	r3, #1
   81c78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81c80:	2b07      	cmp	r3, #7
   81c82:	d9ed      	bls.n	81c60 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   81c84:	3730      	adds	r7, #48	; 0x30
   81c86:	46bd      	mov	sp, r7
   81c88:	bd80      	pop	{r7, pc}
   81c8a:	bf00      	nop
   81c8c:	00081a69 	.word	0x00081a69

00081c90 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   81c90:	b480      	push	{r7}
   81c92:	b085      	sub	sp, #20
   81c94:	af00      	add	r7, sp, #0
   81c96:	60f8      	str	r0, [r7, #12]
   81c98:	60b9      	str	r1, [r7, #8]
   81c9a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81c9c:	687b      	ldr	r3, [r7, #4]
   81c9e:	2b00      	cmp	r3, #0
   81ca0:	d003      	beq.n	81caa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81ca2:	68fb      	ldr	r3, [r7, #12]
   81ca4:	68ba      	ldr	r2, [r7, #8]
   81ca6:	665a      	str	r2, [r3, #100]	; 0x64
   81ca8:	e002      	b.n	81cb0 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81caa:	68fb      	ldr	r3, [r7, #12]
   81cac:	68ba      	ldr	r2, [r7, #8]
   81cae:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81cb0:	3714      	adds	r7, #20
   81cb2:	46bd      	mov	sp, r7
   81cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   81cb8:	4770      	bx	lr
   81cba:	bf00      	nop

00081cbc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81cbc:	b480      	push	{r7}
   81cbe:	b087      	sub	sp, #28
   81cc0:	af00      	add	r7, sp, #0
   81cc2:	60f8      	str	r0, [r7, #12]
   81cc4:	60b9      	str	r1, [r7, #8]
   81cc6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81cc8:	68fb      	ldr	r3, [r7, #12]
   81cca:	687a      	ldr	r2, [r7, #4]
   81ccc:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81cce:	68bb      	ldr	r3, [r7, #8]
   81cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81cd4:	d01f      	beq.n	81d16 <pio_set_peripheral+0x5a>
   81cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81cda:	d805      	bhi.n	81ce8 <pio_set_peripheral+0x2c>
   81cdc:	2b00      	cmp	r3, #0
   81cde:	d027      	beq.n	81d30 <pio_set_peripheral+0x74>
   81ce0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ce4:	d00a      	beq.n	81cfc <pio_set_peripheral+0x40>
   81ce6:	e01f      	b.n	81d28 <pio_set_peripheral+0x6c>
   81ce8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81cec:	d020      	beq.n	81d30 <pio_set_peripheral+0x74>
   81cee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81cf2:	d01d      	beq.n	81d30 <pio_set_peripheral+0x74>
   81cf4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81cf8:	d01a      	beq.n	81d30 <pio_set_peripheral+0x74>
   81cfa:	e015      	b.n	81d28 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81cfc:	68fb      	ldr	r3, [r7, #12]
   81cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81d00:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81d02:	68fb      	ldr	r3, [r7, #12]
   81d04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81d06:	687b      	ldr	r3, [r7, #4]
   81d08:	43d9      	mvns	r1, r3
   81d0a:	697b      	ldr	r3, [r7, #20]
   81d0c:	400b      	ands	r3, r1
   81d0e:	401a      	ands	r2, r3
   81d10:	68fb      	ldr	r3, [r7, #12]
   81d12:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81d14:	e008      	b.n	81d28 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81d16:	68fb      	ldr	r3, [r7, #12]
   81d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81d1a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81d1c:	687a      	ldr	r2, [r7, #4]
   81d1e:	697b      	ldr	r3, [r7, #20]
   81d20:	431a      	orrs	r2, r3
   81d22:	68fb      	ldr	r3, [r7, #12]
   81d24:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81d26:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81d28:	68fb      	ldr	r3, [r7, #12]
   81d2a:	687a      	ldr	r2, [r7, #4]
   81d2c:	605a      	str	r2, [r3, #4]
   81d2e:	e000      	b.n	81d32 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81d30:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81d32:	371c      	adds	r7, #28
   81d34:	46bd      	mov	sp, r7
   81d36:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d3a:	4770      	bx	lr

00081d3c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81d3c:	b580      	push	{r7, lr}
   81d3e:	b084      	sub	sp, #16
   81d40:	af00      	add	r7, sp, #0
   81d42:	60f8      	str	r0, [r7, #12]
   81d44:	60b9      	str	r1, [r7, #8]
   81d46:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81d48:	68f8      	ldr	r0, [r7, #12]
   81d4a:	68b9      	ldr	r1, [r7, #8]
   81d4c:	4b18      	ldr	r3, [pc, #96]	; (81db0 <pio_set_input+0x74>)
   81d4e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   81d50:	687b      	ldr	r3, [r7, #4]
   81d52:	f003 0301 	and.w	r3, r3, #1
   81d56:	68f8      	ldr	r0, [r7, #12]
   81d58:	68b9      	ldr	r1, [r7, #8]
   81d5a:	461a      	mov	r2, r3
   81d5c:	4b15      	ldr	r3, [pc, #84]	; (81db4 <pio_set_input+0x78>)
   81d5e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	f003 030a 	and.w	r3, r3, #10
   81d66:	2b00      	cmp	r3, #0
   81d68:	d003      	beq.n	81d72 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   81d6a:	68fb      	ldr	r3, [r7, #12]
   81d6c:	68ba      	ldr	r2, [r7, #8]
   81d6e:	621a      	str	r2, [r3, #32]
   81d70:	e002      	b.n	81d78 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81d72:	68fb      	ldr	r3, [r7, #12]
   81d74:	68ba      	ldr	r2, [r7, #8]
   81d76:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81d78:	687b      	ldr	r3, [r7, #4]
   81d7a:	f003 0302 	and.w	r3, r3, #2
   81d7e:	2b00      	cmp	r3, #0
   81d80:	d004      	beq.n	81d8c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   81d82:	68fb      	ldr	r3, [r7, #12]
   81d84:	68ba      	ldr	r2, [r7, #8]
   81d86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   81d8a:	e008      	b.n	81d9e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81d8c:	687b      	ldr	r3, [r7, #4]
   81d8e:	f003 0308 	and.w	r3, r3, #8
   81d92:	2b00      	cmp	r3, #0
   81d94:	d003      	beq.n	81d9e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   81d96:	68fb      	ldr	r3, [r7, #12]
   81d98:	68ba      	ldr	r2, [r7, #8]
   81d9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81d9e:	68fb      	ldr	r3, [r7, #12]
   81da0:	68ba      	ldr	r2, [r7, #8]
   81da2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   81da4:	68fb      	ldr	r3, [r7, #12]
   81da6:	68ba      	ldr	r2, [r7, #8]
   81da8:	601a      	str	r2, [r3, #0]
}
   81daa:	3710      	adds	r7, #16
   81dac:	46bd      	mov	sp, r7
   81dae:	bd80      	pop	{r7, pc}
   81db0:	00081e1d 	.word	0x00081e1d
   81db4:	00081c91 	.word	0x00081c91

00081db8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81db8:	b580      	push	{r7, lr}
   81dba:	b084      	sub	sp, #16
   81dbc:	af00      	add	r7, sp, #0
   81dbe:	60f8      	str	r0, [r7, #12]
   81dc0:	60b9      	str	r1, [r7, #8]
   81dc2:	607a      	str	r2, [r7, #4]
   81dc4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   81dc6:	68f8      	ldr	r0, [r7, #12]
   81dc8:	68b9      	ldr	r1, [r7, #8]
   81dca:	4b12      	ldr	r3, [pc, #72]	; (81e14 <pio_set_output+0x5c>)
   81dcc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   81dce:	68f8      	ldr	r0, [r7, #12]
   81dd0:	68b9      	ldr	r1, [r7, #8]
   81dd2:	69ba      	ldr	r2, [r7, #24]
   81dd4:	4b10      	ldr	r3, [pc, #64]	; (81e18 <pio_set_output+0x60>)
   81dd6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81dd8:	683b      	ldr	r3, [r7, #0]
   81dda:	2b00      	cmp	r3, #0
   81ddc:	d003      	beq.n	81de6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   81dde:	68fb      	ldr	r3, [r7, #12]
   81de0:	68ba      	ldr	r2, [r7, #8]
   81de2:	651a      	str	r2, [r3, #80]	; 0x50
   81de4:	e002      	b.n	81dec <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81de6:	68fb      	ldr	r3, [r7, #12]
   81de8:	68ba      	ldr	r2, [r7, #8]
   81dea:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81dec:	687b      	ldr	r3, [r7, #4]
   81dee:	2b00      	cmp	r3, #0
   81df0:	d003      	beq.n	81dfa <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   81df2:	68fb      	ldr	r3, [r7, #12]
   81df4:	68ba      	ldr	r2, [r7, #8]
   81df6:	631a      	str	r2, [r3, #48]	; 0x30
   81df8:	e002      	b.n	81e00 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81dfa:	68fb      	ldr	r3, [r7, #12]
   81dfc:	68ba      	ldr	r2, [r7, #8]
   81dfe:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81e00:	68fb      	ldr	r3, [r7, #12]
   81e02:	68ba      	ldr	r2, [r7, #8]
   81e04:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   81e06:	68fb      	ldr	r3, [r7, #12]
   81e08:	68ba      	ldr	r2, [r7, #8]
   81e0a:	601a      	str	r2, [r3, #0]
}
   81e0c:	3710      	adds	r7, #16
   81e0e:	46bd      	mov	sp, r7
   81e10:	bd80      	pop	{r7, pc}
   81e12:	bf00      	nop
   81e14:	00081e1d 	.word	0x00081e1d
   81e18:	00081c91 	.word	0x00081c91

00081e1c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   81e1c:	b480      	push	{r7}
   81e1e:	b083      	sub	sp, #12
   81e20:	af00      	add	r7, sp, #0
   81e22:	6078      	str	r0, [r7, #4]
   81e24:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   81e26:	687b      	ldr	r3, [r7, #4]
   81e28:	683a      	ldr	r2, [r7, #0]
   81e2a:	645a      	str	r2, [r3, #68]	; 0x44
}
   81e2c:	370c      	adds	r7, #12
   81e2e:	46bd      	mov	sp, r7
   81e30:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e34:	4770      	bx	lr
   81e36:	bf00      	nop

00081e38 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   81e38:	b480      	push	{r7}
   81e3a:	b083      	sub	sp, #12
   81e3c:	af00      	add	r7, sp, #0
   81e3e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   81e40:	687b      	ldr	r3, [r7, #4]
   81e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   81e44:	4618      	mov	r0, r3
   81e46:	370c      	adds	r7, #12
   81e48:	46bd      	mov	sp, r7
   81e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e4e:	4770      	bx	lr

00081e50 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   81e50:	b480      	push	{r7}
   81e52:	b083      	sub	sp, #12
   81e54:	af00      	add	r7, sp, #0
   81e56:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   81e58:	687b      	ldr	r3, [r7, #4]
   81e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   81e5c:	4618      	mov	r0, r3
   81e5e:	370c      	adds	r7, #12
   81e60:	46bd      	mov	sp, r7
   81e62:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e66:	4770      	bx	lr

00081e68 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   81e68:	b480      	push	{r7}
   81e6a:	b085      	sub	sp, #20
   81e6c:	af00      	add	r7, sp, #0
   81e6e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e70:	687b      	ldr	r3, [r7, #4]
   81e72:	095b      	lsrs	r3, r3, #5
   81e74:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e78:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e7c:	025b      	lsls	r3, r3, #9
   81e7e:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81e80:	687b      	ldr	r3, [r7, #4]
   81e82:	f003 031f 	and.w	r3, r3, #31
   81e86:	2201      	movs	r2, #1
   81e88:	fa02 f303 	lsl.w	r3, r2, r3
   81e8c:	461a      	mov	r2, r3
   81e8e:	68fb      	ldr	r3, [r7, #12]
   81e90:	631a      	str	r2, [r3, #48]	; 0x30
}
   81e92:	3714      	adds	r7, #20
   81e94:	46bd      	mov	sp, r7
   81e96:	f85d 7b04 	ldr.w	r7, [sp], #4
   81e9a:	4770      	bx	lr

00081e9c <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   81e9c:	b480      	push	{r7}
   81e9e:	b085      	sub	sp, #20
   81ea0:	af00      	add	r7, sp, #0
   81ea2:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ea4:	687b      	ldr	r3, [r7, #4]
   81ea6:	095b      	lsrs	r3, r3, #5
   81ea8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81eac:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81eb0:	025b      	lsls	r3, r3, #9
   81eb2:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81eb4:	687b      	ldr	r3, [r7, #4]
   81eb6:	f003 031f 	and.w	r3, r3, #31
   81eba:	2201      	movs	r2, #1
   81ebc:	fa02 f303 	lsl.w	r3, r2, r3
   81ec0:	461a      	mov	r2, r3
   81ec2:	68fb      	ldr	r3, [r7, #12]
   81ec4:	635a      	str	r2, [r3, #52]	; 0x34
}
   81ec6:	3714      	adds	r7, #20
   81ec8:	46bd      	mov	sp, r7
   81eca:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ece:	4770      	bx	lr

00081ed0 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   81ed0:	b480      	push	{r7}
   81ed2:	b085      	sub	sp, #20
   81ed4:	af00      	add	r7, sp, #0
   81ed6:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ed8:	687b      	ldr	r3, [r7, #4]
   81eda:	095b      	lsrs	r3, r3, #5
   81edc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ee0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ee4:	025b      	lsls	r3, r3, #9
   81ee6:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   81ee8:	68fb      	ldr	r3, [r7, #12]
   81eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   81eec:	687b      	ldr	r3, [r7, #4]
   81eee:	f003 031f 	and.w	r3, r3, #31
   81ef2:	2101      	movs	r1, #1
   81ef4:	fa01 f303 	lsl.w	r3, r1, r3
   81ef8:	4013      	ands	r3, r2
   81efa:	2b00      	cmp	r3, #0
   81efc:	d009      	beq.n	81f12 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81efe:	687b      	ldr	r3, [r7, #4]
   81f00:	f003 031f 	and.w	r3, r3, #31
   81f04:	2201      	movs	r2, #1
   81f06:	fa02 f303 	lsl.w	r3, r2, r3
   81f0a:	461a      	mov	r2, r3
   81f0c:	68fb      	ldr	r3, [r7, #12]
   81f0e:	635a      	str	r2, [r3, #52]	; 0x34
   81f10:	e008      	b.n	81f24 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81f12:	687b      	ldr	r3, [r7, #4]
   81f14:	f003 031f 	and.w	r3, r3, #31
   81f18:	2201      	movs	r2, #1
   81f1a:	fa02 f303 	lsl.w	r3, r2, r3
   81f1e:	461a      	mov	r2, r3
   81f20:	68fb      	ldr	r3, [r7, #12]
   81f22:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   81f24:	3714      	adds	r7, #20
   81f26:	46bd      	mov	sp, r7
   81f28:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f2c:	4770      	bx	lr
   81f2e:	bf00      	nop

00081f30 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81f30:	b590      	push	{r4, r7, lr}
   81f32:	b087      	sub	sp, #28
   81f34:	af02      	add	r7, sp, #8
   81f36:	6078      	str	r0, [r7, #4]
   81f38:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81f3a:	687b      	ldr	r3, [r7, #4]
   81f3c:	095b      	lsrs	r3, r3, #5
   81f3e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f42:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f46:	025b      	lsls	r3, r3, #9
   81f48:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81f4a:	683b      	ldr	r3, [r7, #0]
   81f4c:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   81f50:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f54:	d048      	beq.n	81fe8 <pio_configure_pin+0xb8>
   81f56:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f5a:	d806      	bhi.n	81f6a <pio_configure_pin+0x3a>
   81f5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f60:	d00a      	beq.n	81f78 <pio_configure_pin+0x48>
   81f62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f66:	d023      	beq.n	81fb0 <pio_configure_pin+0x80>
   81f68:	e070      	b.n	8204c <pio_configure_pin+0x11c>
   81f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f6e:	d047      	beq.n	82000 <pio_configure_pin+0xd0>
   81f70:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f74:	d044      	beq.n	82000 <pio_configure_pin+0xd0>
   81f76:	e069      	b.n	8204c <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f78:	687b      	ldr	r3, [r7, #4]
   81f7a:	f003 031f 	and.w	r3, r3, #31
   81f7e:	2201      	movs	r2, #1
   81f80:	fa02 f303 	lsl.w	r3, r2, r3
   81f84:	68f8      	ldr	r0, [r7, #12]
   81f86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f8a:	461a      	mov	r2, r3
   81f8c:	4b33      	ldr	r3, [pc, #204]	; (8205c <pio_configure_pin+0x12c>)
   81f8e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81f90:	687b      	ldr	r3, [r7, #4]
   81f92:	f003 031f 	and.w	r3, r3, #31
   81f96:	2201      	movs	r2, #1
   81f98:	fa02 f303 	lsl.w	r3, r2, r3
   81f9c:	461a      	mov	r2, r3
   81f9e:	683b      	ldr	r3, [r7, #0]
   81fa0:	f003 0301 	and.w	r3, r3, #1
   81fa4:	68f8      	ldr	r0, [r7, #12]
   81fa6:	4611      	mov	r1, r2
   81fa8:	461a      	mov	r2, r3
   81faa:	4b2d      	ldr	r3, [pc, #180]	; (82060 <pio_configure_pin+0x130>)
   81fac:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81fae:	e04f      	b.n	82050 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81fb0:	687b      	ldr	r3, [r7, #4]
   81fb2:	f003 031f 	and.w	r3, r3, #31
   81fb6:	2201      	movs	r2, #1
   81fb8:	fa02 f303 	lsl.w	r3, r2, r3
   81fbc:	68f8      	ldr	r0, [r7, #12]
   81fbe:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81fc2:	461a      	mov	r2, r3
   81fc4:	4b25      	ldr	r3, [pc, #148]	; (8205c <pio_configure_pin+0x12c>)
   81fc6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   81fc8:	687b      	ldr	r3, [r7, #4]
   81fca:	f003 031f 	and.w	r3, r3, #31
   81fce:	2201      	movs	r2, #1
   81fd0:	fa02 f303 	lsl.w	r3, r2, r3
   81fd4:	461a      	mov	r2, r3
   81fd6:	683b      	ldr	r3, [r7, #0]
   81fd8:	f003 0301 	and.w	r3, r3, #1
   81fdc:	68f8      	ldr	r0, [r7, #12]
   81fde:	4611      	mov	r1, r2
   81fe0:	461a      	mov	r2, r3
   81fe2:	4b1f      	ldr	r3, [pc, #124]	; (82060 <pio_configure_pin+0x130>)
   81fe4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   81fe6:	e033      	b.n	82050 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81fe8:	687b      	ldr	r3, [r7, #4]
   81fea:	f003 031f 	and.w	r3, r3, #31
   81fee:	2201      	movs	r2, #1
   81ff0:	fa02 f303 	lsl.w	r3, r2, r3
   81ff4:	68f8      	ldr	r0, [r7, #12]
   81ff6:	4619      	mov	r1, r3
   81ff8:	683a      	ldr	r2, [r7, #0]
   81ffa:	4b1a      	ldr	r3, [pc, #104]	; (82064 <pio_configure_pin+0x134>)
   81ffc:	4798      	blx	r3
		break;
   81ffe:	e027      	b.n	82050 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82000:	687b      	ldr	r3, [r7, #4]
   82002:	f003 031f 	and.w	r3, r3, #31
   82006:	2201      	movs	r2, #1
   82008:	fa02 f303 	lsl.w	r3, r2, r3
   8200c:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8200e:	683b      	ldr	r3, [r7, #0]
   82010:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82014:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82018:	bf14      	ite	ne
   8201a:	2300      	movne	r3, #0
   8201c:	2301      	moveq	r3, #1
   8201e:	b2db      	uxtb	r3, r3
   82020:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82022:	683b      	ldr	r3, [r7, #0]
   82024:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82028:	2b00      	cmp	r3, #0
   8202a:	bf0c      	ite	eq
   8202c:	2300      	moveq	r3, #0
   8202e:	2301      	movne	r3, #1
   82030:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82032:	6838      	ldr	r0, [r7, #0]
   82034:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82038:	2800      	cmp	r0, #0
   8203a:	bf0c      	ite	eq
   8203c:	2000      	moveq	r0, #0
   8203e:	2001      	movne	r0, #1
   82040:	b2c0      	uxtb	r0, r0
   82042:	9000      	str	r0, [sp, #0]
   82044:	68f8      	ldr	r0, [r7, #12]
   82046:	4c08      	ldr	r4, [pc, #32]	; (82068 <pio_configure_pin+0x138>)
   82048:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8204a:	e001      	b.n	82050 <pio_configure_pin+0x120>

	default:
		return 0;
   8204c:	2300      	movs	r3, #0
   8204e:	e000      	b.n	82052 <pio_configure_pin+0x122>
	}

	return 1;
   82050:	2301      	movs	r3, #1
}
   82052:	4618      	mov	r0, r3
   82054:	3714      	adds	r7, #20
   82056:	46bd      	mov	sp, r7
   82058:	bd90      	pop	{r4, r7, pc}
   8205a:	bf00      	nop
   8205c:	00081cbd 	.word	0x00081cbd
   82060:	00081c91 	.word	0x00081c91
   82064:	00081d3d 	.word	0x00081d3d
   82068:	00081db9 	.word	0x00081db9

0008206c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8206c:	b590      	push	{r4, r7, lr}
   8206e:	b087      	sub	sp, #28
   82070:	af02      	add	r7, sp, #8
   82072:	60f8      	str	r0, [r7, #12]
   82074:	60b9      	str	r1, [r7, #8]
   82076:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82078:	687b      	ldr	r3, [r7, #4]
   8207a:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   8207e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82082:	d02e      	beq.n	820e2 <pio_configure_pin_group+0x76>
   82084:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82088:	d806      	bhi.n	82098 <pio_configure_pin_group+0x2c>
   8208a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8208e:	d00a      	beq.n	820a6 <pio_configure_pin_group+0x3a>
   82090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82094:	d016      	beq.n	820c4 <pio_configure_pin_group+0x58>
   82096:	e04a      	b.n	8212e <pio_configure_pin_group+0xc2>
   82098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8209c:	d027      	beq.n	820ee <pio_configure_pin_group+0x82>
   8209e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   820a2:	d024      	beq.n	820ee <pio_configure_pin_group+0x82>
   820a4:	e043      	b.n	8212e <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   820a6:	68f8      	ldr	r0, [r7, #12]
   820a8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820ac:	68ba      	ldr	r2, [r7, #8]
   820ae:	4b23      	ldr	r3, [pc, #140]	; (8213c <pio_configure_pin_group+0xd0>)
   820b0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   820b2:	687b      	ldr	r3, [r7, #4]
   820b4:	f003 0301 	and.w	r3, r3, #1
   820b8:	68f8      	ldr	r0, [r7, #12]
   820ba:	68b9      	ldr	r1, [r7, #8]
   820bc:	461a      	mov	r2, r3
   820be:	4b20      	ldr	r3, [pc, #128]	; (82140 <pio_configure_pin_group+0xd4>)
   820c0:	4798      	blx	r3
		break;
   820c2:	e036      	b.n	82132 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   820c4:	68f8      	ldr	r0, [r7, #12]
   820c6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   820ca:	68ba      	ldr	r2, [r7, #8]
   820cc:	4b1b      	ldr	r3, [pc, #108]	; (8213c <pio_configure_pin_group+0xd0>)
   820ce:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   820d0:	687b      	ldr	r3, [r7, #4]
   820d2:	f003 0301 	and.w	r3, r3, #1
   820d6:	68f8      	ldr	r0, [r7, #12]
   820d8:	68b9      	ldr	r1, [r7, #8]
   820da:	461a      	mov	r2, r3
   820dc:	4b18      	ldr	r3, [pc, #96]	; (82140 <pio_configure_pin_group+0xd4>)
   820de:	4798      	blx	r3
		break;
   820e0:	e027      	b.n	82132 <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   820e2:	68f8      	ldr	r0, [r7, #12]
   820e4:	68b9      	ldr	r1, [r7, #8]
   820e6:	687a      	ldr	r2, [r7, #4]
   820e8:	4b16      	ldr	r3, [pc, #88]	; (82144 <pio_configure_pin_group+0xd8>)
   820ea:	4798      	blx	r3
		break;
   820ec:	e021      	b.n	82132 <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   820ee:	687b      	ldr	r3, [r7, #4]
   820f0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   820f4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   820f8:	bf14      	ite	ne
   820fa:	2300      	movne	r3, #0
   820fc:	2301      	moveq	r3, #1
   820fe:	b2db      	uxtb	r3, r3
   82100:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82102:	687b      	ldr	r3, [r7, #4]
   82104:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82108:	2b00      	cmp	r3, #0
   8210a:	bf0c      	ite	eq
   8210c:	2300      	moveq	r3, #0
   8210e:	2301      	movne	r3, #1
   82110:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82112:	6879      	ldr	r1, [r7, #4]
   82114:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82118:	2900      	cmp	r1, #0
   8211a:	bf0c      	ite	eq
   8211c:	2100      	moveq	r1, #0
   8211e:	2101      	movne	r1, #1
   82120:	b2c9      	uxtb	r1, r1
   82122:	9100      	str	r1, [sp, #0]
   82124:	68f8      	ldr	r0, [r7, #12]
   82126:	68b9      	ldr	r1, [r7, #8]
   82128:	4c07      	ldr	r4, [pc, #28]	; (82148 <pio_configure_pin_group+0xdc>)
   8212a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8212c:	e001      	b.n	82132 <pio_configure_pin_group+0xc6>

	default:
		return 0;
   8212e:	2300      	movs	r3, #0
   82130:	e000      	b.n	82134 <pio_configure_pin_group+0xc8>
	}

	return 1;
   82132:	2301      	movs	r3, #1
}
   82134:	4618      	mov	r0, r3
   82136:	3714      	adds	r7, #20
   82138:	46bd      	mov	sp, r7
   8213a:	bd90      	pop	{r4, r7, pc}
   8213c:	00081cbd 	.word	0x00081cbd
   82140:	00081c91 	.word	0x00081c91
   82144:	00081d3d 	.word	0x00081d3d
   82148:	00081db9 	.word	0x00081db9

0008214c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8214c:	b580      	push	{r7, lr}
   8214e:	b084      	sub	sp, #16
   82150:	af00      	add	r7, sp, #0
   82152:	6078      	str	r0, [r7, #4]
   82154:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82156:	6878      	ldr	r0, [r7, #4]
   82158:	4b22      	ldr	r3, [pc, #136]	; (821e4 <pio_handler_process+0x98>)
   8215a:	4798      	blx	r3
   8215c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   8215e:	6878      	ldr	r0, [r7, #4]
   82160:	4b21      	ldr	r3, [pc, #132]	; (821e8 <pio_handler_process+0x9c>)
   82162:	4798      	blx	r3
   82164:	4603      	mov	r3, r0
   82166:	68fa      	ldr	r2, [r7, #12]
   82168:	4013      	ands	r3, r2
   8216a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   8216c:	68fb      	ldr	r3, [r7, #12]
   8216e:	2b00      	cmp	r3, #0
   82170:	d035      	beq.n	821de <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   82172:	2300      	movs	r3, #0
   82174:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82176:	e02f      	b.n	821d8 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82178:	4a1c      	ldr	r2, [pc, #112]	; (821ec <pio_handler_process+0xa0>)
   8217a:	68bb      	ldr	r3, [r7, #8]
   8217c:	011b      	lsls	r3, r3, #4
   8217e:	4413      	add	r3, r2
   82180:	681a      	ldr	r2, [r3, #0]
   82182:	683b      	ldr	r3, [r7, #0]
   82184:	429a      	cmp	r2, r3
   82186:	d124      	bne.n	821d2 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82188:	4a18      	ldr	r2, [pc, #96]	; (821ec <pio_handler_process+0xa0>)
   8218a:	68bb      	ldr	r3, [r7, #8]
   8218c:	011b      	lsls	r3, r3, #4
   8218e:	4413      	add	r3, r2
   82190:	685a      	ldr	r2, [r3, #4]
   82192:	68fb      	ldr	r3, [r7, #12]
   82194:	4013      	ands	r3, r2
   82196:	2b00      	cmp	r3, #0
   82198:	d01b      	beq.n	821d2 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8219a:	4a14      	ldr	r2, [pc, #80]	; (821ec <pio_handler_process+0xa0>)
   8219c:	68bb      	ldr	r3, [r7, #8]
   8219e:	011b      	lsls	r3, r3, #4
   821a0:	4413      	add	r3, r2
   821a2:	3308      	adds	r3, #8
   821a4:	685b      	ldr	r3, [r3, #4]
   821a6:	4911      	ldr	r1, [pc, #68]	; (821ec <pio_handler_process+0xa0>)
   821a8:	68ba      	ldr	r2, [r7, #8]
   821aa:	0112      	lsls	r2, r2, #4
   821ac:	440a      	add	r2, r1
   821ae:	6811      	ldr	r1, [r2, #0]
   821b0:	480e      	ldr	r0, [pc, #56]	; (821ec <pio_handler_process+0xa0>)
   821b2:	68ba      	ldr	r2, [r7, #8]
   821b4:	0112      	lsls	r2, r2, #4
   821b6:	4402      	add	r2, r0
   821b8:	6852      	ldr	r2, [r2, #4]
   821ba:	4608      	mov	r0, r1
   821bc:	4611      	mov	r1, r2
   821be:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   821c0:	4a0a      	ldr	r2, [pc, #40]	; (821ec <pio_handler_process+0xa0>)
   821c2:	68bb      	ldr	r3, [r7, #8]
   821c4:	011b      	lsls	r3, r3, #4
   821c6:	4413      	add	r3, r2
   821c8:	685b      	ldr	r3, [r3, #4]
   821ca:	43db      	mvns	r3, r3
   821cc:	68fa      	ldr	r2, [r7, #12]
   821ce:	4013      	ands	r3, r2
   821d0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   821d2:	68bb      	ldr	r3, [r7, #8]
   821d4:	3301      	adds	r3, #1
   821d6:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   821d8:	68fb      	ldr	r3, [r7, #12]
   821da:	2b00      	cmp	r3, #0
   821dc:	d1cc      	bne.n	82178 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   821de:	3710      	adds	r7, #16
   821e0:	46bd      	mov	sp, r7
   821e2:	bd80      	pop	{r7, pc}
   821e4:	00081e39 	.word	0x00081e39
   821e8:	00081e51 	.word	0x00081e51
   821ec:	20070474 	.word	0x20070474

000821f0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   821f0:	b580      	push	{r7, lr}
   821f2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   821f4:	4802      	ldr	r0, [pc, #8]	; (82200 <PIOA_Handler+0x10>)
   821f6:	210b      	movs	r1, #11
   821f8:	4b02      	ldr	r3, [pc, #8]	; (82204 <PIOA_Handler+0x14>)
   821fa:	4798      	blx	r3
}
   821fc:	bd80      	pop	{r7, pc}
   821fe:	bf00      	nop
   82200:	400e0e00 	.word	0x400e0e00
   82204:	0008214d 	.word	0x0008214d

00082208 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82208:	b580      	push	{r7, lr}
   8220a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   8220c:	4802      	ldr	r0, [pc, #8]	; (82218 <PIOB_Handler+0x10>)
   8220e:	210c      	movs	r1, #12
   82210:	4b02      	ldr	r3, [pc, #8]	; (8221c <PIOB_Handler+0x14>)
   82212:	4798      	blx	r3
}
   82214:	bd80      	pop	{r7, pc}
   82216:	bf00      	nop
   82218:	400e1000 	.word	0x400e1000
   8221c:	0008214d 	.word	0x0008214d

00082220 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82220:	b580      	push	{r7, lr}
   82222:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   82224:	4802      	ldr	r0, [pc, #8]	; (82230 <PIOC_Handler+0x10>)
   82226:	210d      	movs	r1, #13
   82228:	4b02      	ldr	r3, [pc, #8]	; (82234 <PIOC_Handler+0x14>)
   8222a:	4798      	blx	r3
}
   8222c:	bd80      	pop	{r7, pc}
   8222e:	bf00      	nop
   82230:	400e1200 	.word	0x400e1200
   82234:	0008214d 	.word	0x0008214d

00082238 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82238:	b580      	push	{r7, lr}
   8223a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   8223c:	4802      	ldr	r0, [pc, #8]	; (82248 <PIOD_Handler+0x10>)
   8223e:	210e      	movs	r1, #14
   82240:	4b02      	ldr	r3, [pc, #8]	; (8224c <PIOD_Handler+0x14>)
   82242:	4798      	blx	r3
}
   82244:	bd80      	pop	{r7, pc}
   82246:	bf00      	nop
   82248:	400e1400 	.word	0x400e1400
   8224c:	0008214d 	.word	0x0008214d

00082250 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82250:	b480      	push	{r7}
   82252:	b085      	sub	sp, #20
   82254:	af00      	add	r7, sp, #0
   82256:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82258:	4b1d      	ldr	r3, [pc, #116]	; (822d0 <pmc_switch_mck_to_pllack+0x80>)
   8225a:	4a1d      	ldr	r2, [pc, #116]	; (822d0 <pmc_switch_mck_to_pllack+0x80>)
   8225c:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8225e:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   82262:	687a      	ldr	r2, [r7, #4]
   82264:	430a      	orrs	r2, r1
   82266:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82268:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8226c:	60fb      	str	r3, [r7, #12]
   8226e:	e007      	b.n	82280 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82270:	68fb      	ldr	r3, [r7, #12]
   82272:	2b00      	cmp	r3, #0
   82274:	d101      	bne.n	8227a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82276:	2301      	movs	r3, #1
   82278:	e023      	b.n	822c2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8227a:	68fb      	ldr	r3, [r7, #12]
   8227c:	3b01      	subs	r3, #1
   8227e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82280:	4b13      	ldr	r3, [pc, #76]	; (822d0 <pmc_switch_mck_to_pllack+0x80>)
   82282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82284:	f003 0308 	and.w	r3, r3, #8
   82288:	2b00      	cmp	r3, #0
   8228a:	d0f1      	beq.n	82270 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8228c:	4b10      	ldr	r3, [pc, #64]	; (822d0 <pmc_switch_mck_to_pllack+0x80>)
   8228e:	4a10      	ldr	r2, [pc, #64]	; (822d0 <pmc_switch_mck_to_pllack+0x80>)
   82290:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82292:	f022 0203 	bic.w	r2, r2, #3
   82296:	f042 0202 	orr.w	r2, r2, #2
   8229a:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8229c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   822a0:	60fb      	str	r3, [r7, #12]
   822a2:	e007      	b.n	822b4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   822a4:	68fb      	ldr	r3, [r7, #12]
   822a6:	2b00      	cmp	r3, #0
   822a8:	d101      	bne.n	822ae <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   822aa:	2301      	movs	r3, #1
   822ac:	e009      	b.n	822c2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   822ae:	68fb      	ldr	r3, [r7, #12]
   822b0:	3b01      	subs	r3, #1
   822b2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   822b4:	4b06      	ldr	r3, [pc, #24]	; (822d0 <pmc_switch_mck_to_pllack+0x80>)
   822b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   822b8:	f003 0308 	and.w	r3, r3, #8
   822bc:	2b00      	cmp	r3, #0
   822be:	d0f1      	beq.n	822a4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   822c0:	2300      	movs	r3, #0
}
   822c2:	4618      	mov	r0, r3
   822c4:	3714      	adds	r7, #20
   822c6:	46bd      	mov	sp, r7
   822c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   822cc:	4770      	bx	lr
   822ce:	bf00      	nop
   822d0:	400e0600 	.word	0x400e0600

000822d4 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   822d4:	b480      	push	{r7}
   822d6:	b083      	sub	sp, #12
   822d8:	af00      	add	r7, sp, #0
   822da:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   822dc:	687b      	ldr	r3, [r7, #4]
   822de:	2b01      	cmp	r3, #1
   822e0:	d107      	bne.n	822f2 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   822e2:	4a0a      	ldr	r2, [pc, #40]	; (8230c <pmc_switch_sclk_to_32kxtal+0x38>)
   822e4:	4b09      	ldr	r3, [pc, #36]	; (8230c <pmc_switch_sclk_to_32kxtal+0x38>)
   822e6:	689b      	ldr	r3, [r3, #8]
   822e8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   822ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   822f0:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   822f2:	4a06      	ldr	r2, [pc, #24]	; (8230c <pmc_switch_sclk_to_32kxtal+0x38>)
   822f4:	4b05      	ldr	r3, [pc, #20]	; (8230c <pmc_switch_sclk_to_32kxtal+0x38>)
   822f6:	681b      	ldr	r3, [r3, #0]
   822f8:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   822fc:	f043 0308 	orr.w	r3, r3, #8
   82300:	6013      	str	r3, [r2, #0]
}
   82302:	370c      	adds	r7, #12
   82304:	46bd      	mov	sp, r7
   82306:	f85d 7b04 	ldr.w	r7, [sp], #4
   8230a:	4770      	bx	lr
   8230c:	400e1a10 	.word	0x400e1a10

00082310 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82310:	b480      	push	{r7}
   82312:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82314:	4b09      	ldr	r3, [pc, #36]	; (8233c <pmc_osc_is_ready_32kxtal+0x2c>)
   82316:	695b      	ldr	r3, [r3, #20]
   82318:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   8231c:	2b00      	cmp	r3, #0
   8231e:	d007      	beq.n	82330 <pmc_osc_is_ready_32kxtal+0x20>
   82320:	4b07      	ldr	r3, [pc, #28]	; (82340 <pmc_osc_is_ready_32kxtal+0x30>)
   82322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82324:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82328:	2b00      	cmp	r3, #0
   8232a:	d001      	beq.n	82330 <pmc_osc_is_ready_32kxtal+0x20>
   8232c:	2301      	movs	r3, #1
   8232e:	e000      	b.n	82332 <pmc_osc_is_ready_32kxtal+0x22>
   82330:	2300      	movs	r3, #0
}
   82332:	4618      	mov	r0, r3
   82334:	46bd      	mov	sp, r7
   82336:	f85d 7b04 	ldr.w	r7, [sp], #4
   8233a:	4770      	bx	lr
   8233c:	400e1a10 	.word	0x400e1a10
   82340:	400e0600 	.word	0x400e0600

00082344 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82344:	b480      	push	{r7}
   82346:	b085      	sub	sp, #20
   82348:	af00      	add	r7, sp, #0
   8234a:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   8234c:	2300      	movs	r3, #0
   8234e:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   82350:	4b21      	ldr	r3, [pc, #132]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   82352:	6a1b      	ldr	r3, [r3, #32]
   82354:	f003 0301 	and.w	r3, r3, #1
   82358:	2b00      	cmp	r3, #0
   8235a:	d00e      	beq.n	8237a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8235c:	4a1e      	ldr	r2, [pc, #120]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   8235e:	4b1e      	ldr	r3, [pc, #120]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   82360:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   82362:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82366:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8236a:	6879      	ldr	r1, [r7, #4]
   8236c:	430b      	orrs	r3, r1
   8236e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82372:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82376:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82378:	e00b      	b.n	82392 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8237a:	2301      	movs	r3, #1
   8237c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8237e:	4a16      	ldr	r2, [pc, #88]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   82380:	4b15      	ldr	r3, [pc, #84]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   82382:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   82384:	4b15      	ldr	r3, [pc, #84]	; (823dc <pmc_switch_mainck_to_fastrc+0x98>)
   82386:	400b      	ands	r3, r1
   82388:	6879      	ldr	r1, [r7, #4]
   8238a:	4319      	orrs	r1, r3
   8238c:	4b14      	ldr	r3, [pc, #80]	; (823e0 <pmc_switch_mainck_to_fastrc+0x9c>)
   8238e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82390:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82392:	bf00      	nop
   82394:	4b10      	ldr	r3, [pc, #64]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   82396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8239c:	2b00      	cmp	r3, #0
   8239e:	d0f9      	beq.n	82394 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   823a0:	4a0d      	ldr	r2, [pc, #52]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   823a2:	4b0d      	ldr	r3, [pc, #52]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   823a4:	6a1b      	ldr	r3, [r3, #32]
   823a6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   823aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   823ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823b2:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   823b4:	68fb      	ldr	r3, [r7, #12]
   823b6:	2b00      	cmp	r3, #0
   823b8:	d009      	beq.n	823ce <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823ba:	4a07      	ldr	r2, [pc, #28]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   823bc:	4b06      	ldr	r3, [pc, #24]	; (823d8 <pmc_switch_mainck_to_fastrc+0x94>)
   823be:	6a1b      	ldr	r3, [r3, #32]
   823c0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   823c4:	f023 0301 	bic.w	r3, r3, #1
   823c8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   823cc:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   823ce:	3714      	adds	r7, #20
   823d0:	46bd      	mov	sp, r7
   823d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   823d6:	4770      	bx	lr
   823d8:	400e0600 	.word	0x400e0600
   823dc:	ffc8c086 	.word	0xffc8c086
   823e0:	00373f09 	.word	0x00373f09

000823e4 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   823e4:	b480      	push	{r7}
   823e6:	b083      	sub	sp, #12
   823e8:	af00      	add	r7, sp, #0
   823ea:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   823ec:	687b      	ldr	r3, [r7, #4]
   823ee:	2b00      	cmp	r3, #0
   823f0:	d008      	beq.n	82404 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   823f2:	4912      	ldr	r1, [pc, #72]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   823f4:	4b11      	ldr	r3, [pc, #68]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   823f6:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   823f8:	4a11      	ldr	r2, [pc, #68]	; (82440 <pmc_switch_mainck_to_xtal+0x5c>)
   823fa:	401a      	ands	r2, r3
   823fc:	4b11      	ldr	r3, [pc, #68]	; (82444 <pmc_switch_mainck_to_xtal+0x60>)
   823fe:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82400:	620b      	str	r3, [r1, #32]
   82402:	e016      	b.n	82432 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82404:	490d      	ldr	r1, [pc, #52]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   82406:	4b0d      	ldr	r3, [pc, #52]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   82408:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8240a:	4a0f      	ldr	r2, [pc, #60]	; (82448 <pmc_switch_mainck_to_xtal+0x64>)
   8240c:	401a      	ands	r2, r3
   8240e:	4b0f      	ldr	r3, [pc, #60]	; (8244c <pmc_switch_mainck_to_xtal+0x68>)
   82410:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82412:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82414:	bf00      	nop
   82416:	4b09      	ldr	r3, [pc, #36]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   82418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8241a:	f003 0301 	and.w	r3, r3, #1
   8241e:	2b00      	cmp	r3, #0
   82420:	d0f9      	beq.n	82416 <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   82422:	4a06      	ldr	r2, [pc, #24]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   82424:	4b05      	ldr	r3, [pc, #20]	; (8243c <pmc_switch_mainck_to_xtal+0x58>)
   82426:	6a1b      	ldr	r3, [r3, #32]
   82428:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82430:	6213      	str	r3, [r2, #32]
	}
}
   82432:	370c      	adds	r7, #12
   82434:	46bd      	mov	sp, r7
   82436:	f85d 7b04 	ldr.w	r7, [sp], #4
   8243a:	4770      	bx	lr
   8243c:	400e0600 	.word	0x400e0600
   82440:	fec8fffc 	.word	0xfec8fffc
   82444:	01370002 	.word	0x01370002
   82448:	ffc8c0fc 	.word	0xffc8c0fc
   8244c:	00373f01 	.word	0x00373f01

00082450 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82450:	b480      	push	{r7}
   82452:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82454:	4b04      	ldr	r3, [pc, #16]	; (82468 <pmc_osc_is_ready_mainck+0x18>)
   82456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   8245c:	4618      	mov	r0, r3
   8245e:	46bd      	mov	sp, r7
   82460:	f85d 7b04 	ldr.w	r7, [sp], #4
   82464:	4770      	bx	lr
   82466:	bf00      	nop
   82468:	400e0600 	.word	0x400e0600

0008246c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   8246c:	b480      	push	{r7}
   8246e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82470:	4b03      	ldr	r3, [pc, #12]	; (82480 <pmc_disable_pllack+0x14>)
   82472:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82476:	629a      	str	r2, [r3, #40]	; 0x28
}
   82478:	46bd      	mov	sp, r7
   8247a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8247e:	4770      	bx	lr
   82480:	400e0600 	.word	0x400e0600

00082484 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82484:	b480      	push	{r7}
   82486:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82488:	4b04      	ldr	r3, [pc, #16]	; (8249c <pmc_is_locked_pllack+0x18>)
   8248a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8248c:	f003 0302 	and.w	r3, r3, #2
}
   82490:	4618      	mov	r0, r3
   82492:	46bd      	mov	sp, r7
   82494:	f85d 7b04 	ldr.w	r7, [sp], #4
   82498:	4770      	bx	lr
   8249a:	bf00      	nop
   8249c:	400e0600 	.word	0x400e0600

000824a0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   824a0:	b480      	push	{r7}
   824a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   824a4:	4b04      	ldr	r3, [pc, #16]	; (824b8 <pmc_is_locked_upll+0x18>)
   824a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   824ac:	4618      	mov	r0, r3
   824ae:	46bd      	mov	sp, r7
   824b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   824b4:	4770      	bx	lr
   824b6:	bf00      	nop
   824b8:	400e0600 	.word	0x400e0600

000824bc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   824bc:	b480      	push	{r7}
   824be:	b083      	sub	sp, #12
   824c0:	af00      	add	r7, sp, #0
   824c2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   824c4:	687b      	ldr	r3, [r7, #4]
   824c6:	2b2c      	cmp	r3, #44	; 0x2c
   824c8:	d901      	bls.n	824ce <pmc_enable_periph_clk+0x12>
		return 1;
   824ca:	2301      	movs	r3, #1
   824cc:	e02f      	b.n	8252e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   824ce:	687b      	ldr	r3, [r7, #4]
   824d0:	2b1f      	cmp	r3, #31
   824d2:	d813      	bhi.n	824fc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   824d4:	4b19      	ldr	r3, [pc, #100]	; (8253c <pmc_enable_periph_clk+0x80>)
   824d6:	699a      	ldr	r2, [r3, #24]
   824d8:	687b      	ldr	r3, [r7, #4]
   824da:	2101      	movs	r1, #1
   824dc:	fa01 f303 	lsl.w	r3, r1, r3
   824e0:	401a      	ands	r2, r3
   824e2:	687b      	ldr	r3, [r7, #4]
   824e4:	2101      	movs	r1, #1
   824e6:	fa01 f303 	lsl.w	r3, r1, r3
   824ea:	429a      	cmp	r2, r3
   824ec:	d01e      	beq.n	8252c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   824ee:	4b13      	ldr	r3, [pc, #76]	; (8253c <pmc_enable_periph_clk+0x80>)
   824f0:	687a      	ldr	r2, [r7, #4]
   824f2:	2101      	movs	r1, #1
   824f4:	fa01 f202 	lsl.w	r2, r1, r2
   824f8:	611a      	str	r2, [r3, #16]
   824fa:	e017      	b.n	8252c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   824fc:	687b      	ldr	r3, [r7, #4]
   824fe:	3b20      	subs	r3, #32
   82500:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82502:	4b0e      	ldr	r3, [pc, #56]	; (8253c <pmc_enable_periph_clk+0x80>)
   82504:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82508:	687b      	ldr	r3, [r7, #4]
   8250a:	2101      	movs	r1, #1
   8250c:	fa01 f303 	lsl.w	r3, r1, r3
   82510:	401a      	ands	r2, r3
   82512:	687b      	ldr	r3, [r7, #4]
   82514:	2101      	movs	r1, #1
   82516:	fa01 f303 	lsl.w	r3, r1, r3
   8251a:	429a      	cmp	r2, r3
   8251c:	d006      	beq.n	8252c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8251e:	4b07      	ldr	r3, [pc, #28]	; (8253c <pmc_enable_periph_clk+0x80>)
   82520:	687a      	ldr	r2, [r7, #4]
   82522:	2101      	movs	r1, #1
   82524:	fa01 f202 	lsl.w	r2, r1, r2
   82528:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8252c:	2300      	movs	r3, #0
}
   8252e:	4618      	mov	r0, r3
   82530:	370c      	adds	r7, #12
   82532:	46bd      	mov	sp, r7
   82534:	f85d 7b04 	ldr.w	r7, [sp], #4
   82538:	4770      	bx	lr
   8253a:	bf00      	nop
   8253c:	400e0600 	.word	0x400e0600

00082540 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82540:	b480      	push	{r7}
   82542:	b089      	sub	sp, #36	; 0x24
   82544:	af00      	add	r7, sp, #0
   82546:	60f8      	str	r0, [r7, #12]
   82548:	60b9      	str	r1, [r7, #8]
   8254a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8254c:	68bb      	ldr	r3, [r7, #8]
   8254e:	011a      	lsls	r2, r3, #4
   82550:	687b      	ldr	r3, [r7, #4]
   82552:	429a      	cmp	r2, r3
   82554:	d802      	bhi.n	8255c <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   82556:	2310      	movs	r3, #16
   82558:	61fb      	str	r3, [r7, #28]
   8255a:	e001      	b.n	82560 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   8255c:	2308      	movs	r3, #8
   8255e:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82560:	687b      	ldr	r3, [r7, #4]
   82562:	00da      	lsls	r2, r3, #3
   82564:	69fb      	ldr	r3, [r7, #28]
   82566:	68b9      	ldr	r1, [r7, #8]
   82568:	fb01 f303 	mul.w	r3, r1, r3
   8256c:	085b      	lsrs	r3, r3, #1
   8256e:	441a      	add	r2, r3
   82570:	69fb      	ldr	r3, [r7, #28]
   82572:	68b9      	ldr	r1, [r7, #8]
   82574:	fb01 f303 	mul.w	r3, r1, r3
   82578:	fbb2 f3f3 	udiv	r3, r2, r3
   8257c:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   8257e:	69bb      	ldr	r3, [r7, #24]
   82580:	08db      	lsrs	r3, r3, #3
   82582:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   82584:	69bb      	ldr	r3, [r7, #24]
   82586:	f003 0307 	and.w	r3, r3, #7
   8258a:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8258c:	697b      	ldr	r3, [r7, #20]
   8258e:	2b00      	cmp	r3, #0
   82590:	d003      	beq.n	8259a <usart_set_async_baudrate+0x5a>
   82592:	697b      	ldr	r3, [r7, #20]
   82594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82598:	d301      	bcc.n	8259e <usart_set_async_baudrate+0x5e>
		return 1;
   8259a:	2301      	movs	r3, #1
   8259c:	e00f      	b.n	825be <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   8259e:	69fb      	ldr	r3, [r7, #28]
   825a0:	2b08      	cmp	r3, #8
   825a2:	d105      	bne.n	825b0 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   825a4:	68fb      	ldr	r3, [r7, #12]
   825a6:	685b      	ldr	r3, [r3, #4]
   825a8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   825ac:	68fb      	ldr	r3, [r7, #12]
   825ae:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   825b0:	693b      	ldr	r3, [r7, #16]
   825b2:	041a      	lsls	r2, r3, #16
   825b4:	697b      	ldr	r3, [r7, #20]
   825b6:	431a      	orrs	r2, r3
   825b8:	68fb      	ldr	r3, [r7, #12]
   825ba:	621a      	str	r2, [r3, #32]

	return 0;
   825bc:	2300      	movs	r3, #0
}
   825be:	4618      	mov	r0, r3
   825c0:	3724      	adds	r7, #36	; 0x24
   825c2:	46bd      	mov	sp, r7
   825c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   825c8:	4770      	bx	lr
   825ca:	bf00      	nop

000825cc <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   825cc:	b580      	push	{r7, lr}
   825ce:	b082      	sub	sp, #8
   825d0:	af00      	add	r7, sp, #0
   825d2:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   825d4:	6878      	ldr	r0, [r7, #4]
   825d6:	4b0d      	ldr	r3, [pc, #52]	; (8260c <usart_reset+0x40>)
   825d8:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   825da:	687b      	ldr	r3, [r7, #4]
   825dc:	2200      	movs	r2, #0
   825de:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   825e0:	687b      	ldr	r3, [r7, #4]
   825e2:	2200      	movs	r2, #0
   825e4:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   825e6:	687b      	ldr	r3, [r7, #4]
   825e8:	2200      	movs	r2, #0
   825ea:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   825ec:	6878      	ldr	r0, [r7, #4]
   825ee:	4b08      	ldr	r3, [pc, #32]	; (82610 <usart_reset+0x44>)
   825f0:	4798      	blx	r3
	usart_reset_rx(p_usart);
   825f2:	6878      	ldr	r0, [r7, #4]
   825f4:	4b07      	ldr	r3, [pc, #28]	; (82614 <usart_reset+0x48>)
   825f6:	4798      	blx	r3
	usart_reset_status(p_usart);
   825f8:	6878      	ldr	r0, [r7, #4]
   825fa:	4b07      	ldr	r3, [pc, #28]	; (82618 <usart_reset+0x4c>)
   825fc:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   825fe:	6878      	ldr	r0, [r7, #4]
   82600:	4b06      	ldr	r3, [pc, #24]	; (8261c <usart_reset+0x50>)
   82602:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82604:	3708      	adds	r7, #8
   82606:	46bd      	mov	sp, r7
   82608:	bd80      	pop	{r7, pc}
   8260a:	bf00      	nop
   8260c:	00082809 	.word	0x00082809
   82610:	000826bd 	.word	0x000826bd
   82614:	000826ed 	.word	0x000826ed
   82618:	00082755 	.word	0x00082755
   8261c:	00082771 	.word	0x00082771

00082620 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82620:	b580      	push	{r7, lr}
   82622:	b084      	sub	sp, #16
   82624:	af00      	add	r7, sp, #0
   82626:	60f8      	str	r0, [r7, #12]
   82628:	60b9      	str	r1, [r7, #8]
   8262a:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8262c:	68f8      	ldr	r0, [r7, #12]
   8262e:	4b1a      	ldr	r3, [pc, #104]	; (82698 <usart_init_rs232+0x78>)
   82630:	4798      	blx	r3

	ul_reg_val = 0;
   82632:	4b1a      	ldr	r3, [pc, #104]	; (8269c <usart_init_rs232+0x7c>)
   82634:	2200      	movs	r2, #0
   82636:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82638:	68bb      	ldr	r3, [r7, #8]
   8263a:	2b00      	cmp	r3, #0
   8263c:	d009      	beq.n	82652 <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   8263e:	68bb      	ldr	r3, [r7, #8]
   82640:	681b      	ldr	r3, [r3, #0]
   82642:	68f8      	ldr	r0, [r7, #12]
   82644:	4619      	mov	r1, r3
   82646:	687a      	ldr	r2, [r7, #4]
   82648:	4b15      	ldr	r3, [pc, #84]	; (826a0 <usart_init_rs232+0x80>)
   8264a:	4798      	blx	r3
   8264c:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   8264e:	2b00      	cmp	r3, #0
   82650:	d001      	beq.n	82656 <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82652:	2301      	movs	r3, #1
   82654:	e01b      	b.n	8268e <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82656:	68bb      	ldr	r3, [r7, #8]
   82658:	685a      	ldr	r2, [r3, #4]
   8265a:	68bb      	ldr	r3, [r7, #8]
   8265c:	689b      	ldr	r3, [r3, #8]
   8265e:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82660:	68bb      	ldr	r3, [r7, #8]
   82662:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82664:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82666:	68bb      	ldr	r3, [r7, #8]
   82668:	68db      	ldr	r3, [r3, #12]
   8266a:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8266c:	4b0b      	ldr	r3, [pc, #44]	; (8269c <usart_init_rs232+0x7c>)
   8266e:	681b      	ldr	r3, [r3, #0]
   82670:	431a      	orrs	r2, r3
   82672:	4b0a      	ldr	r3, [pc, #40]	; (8269c <usart_init_rs232+0x7c>)
   82674:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   82676:	4b09      	ldr	r3, [pc, #36]	; (8269c <usart_init_rs232+0x7c>)
   82678:	681a      	ldr	r2, [r3, #0]
   8267a:	4b08      	ldr	r3, [pc, #32]	; (8269c <usart_init_rs232+0x7c>)
   8267c:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   8267e:	68fb      	ldr	r3, [r7, #12]
   82680:	685a      	ldr	r2, [r3, #4]
   82682:	4b06      	ldr	r3, [pc, #24]	; (8269c <usart_init_rs232+0x7c>)
   82684:	681b      	ldr	r3, [r3, #0]
   82686:	431a      	orrs	r2, r3
   82688:	68fb      	ldr	r3, [r7, #12]
   8268a:	605a      	str	r2, [r3, #4]
	
	return 0;
   8268c:	2300      	movs	r3, #0
}
   8268e:	4618      	mov	r0, r3
   82690:	3710      	adds	r7, #16
   82692:	46bd      	mov	sp, r7
   82694:	bd80      	pop	{r7, pc}
   82696:	bf00      	nop
   82698:	000825cd 	.word	0x000825cd
   8269c:	200704e4 	.word	0x200704e4
   826a0:	00082541 	.word	0x00082541

000826a4 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   826a4:	b480      	push	{r7}
   826a6:	b083      	sub	sp, #12
   826a8:	af00      	add	r7, sp, #0
   826aa:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   826ac:	687b      	ldr	r3, [r7, #4]
   826ae:	2240      	movs	r2, #64	; 0x40
   826b0:	601a      	str	r2, [r3, #0]
}
   826b2:	370c      	adds	r7, #12
   826b4:	46bd      	mov	sp, r7
   826b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   826ba:	4770      	bx	lr

000826bc <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   826bc:	b480      	push	{r7}
   826be:	b083      	sub	sp, #12
   826c0:	af00      	add	r7, sp, #0
   826c2:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   826c4:	687b      	ldr	r3, [r7, #4]
   826c6:	2288      	movs	r2, #136	; 0x88
   826c8:	601a      	str	r2, [r3, #0]
}
   826ca:	370c      	adds	r7, #12
   826cc:	46bd      	mov	sp, r7
   826ce:	f85d 7b04 	ldr.w	r7, [sp], #4
   826d2:	4770      	bx	lr

000826d4 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   826d4:	b480      	push	{r7}
   826d6:	b083      	sub	sp, #12
   826d8:	af00      	add	r7, sp, #0
   826da:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   826dc:	687b      	ldr	r3, [r7, #4]
   826de:	2210      	movs	r2, #16
   826e0:	601a      	str	r2, [r3, #0]
}
   826e2:	370c      	adds	r7, #12
   826e4:	46bd      	mov	sp, r7
   826e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   826ea:	4770      	bx	lr

000826ec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   826ec:	b480      	push	{r7}
   826ee:	b083      	sub	sp, #12
   826f0:	af00      	add	r7, sp, #0
   826f2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   826f4:	687b      	ldr	r3, [r7, #4]
   826f6:	2224      	movs	r2, #36	; 0x24
   826f8:	601a      	str	r2, [r3, #0]
}
   826fa:	370c      	adds	r7, #12
   826fc:	46bd      	mov	sp, r7
   826fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82702:	4770      	bx	lr

00082704 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82704:	b480      	push	{r7}
   82706:	b083      	sub	sp, #12
   82708:	af00      	add	r7, sp, #0
   8270a:	6078      	str	r0, [r7, #4]
   8270c:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   8270e:	687b      	ldr	r3, [r7, #4]
   82710:	683a      	ldr	r2, [r7, #0]
   82712:	609a      	str	r2, [r3, #8]
}
   82714:	370c      	adds	r7, #12
   82716:	46bd      	mov	sp, r7
   82718:	f85d 7b04 	ldr.w	r7, [sp], #4
   8271c:	4770      	bx	lr
   8271e:	bf00      	nop

00082720 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   82720:	b480      	push	{r7}
   82722:	b083      	sub	sp, #12
   82724:	af00      	add	r7, sp, #0
   82726:	6078      	str	r0, [r7, #4]
   82728:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   8272a:	687b      	ldr	r3, [r7, #4]
   8272c:	683a      	ldr	r2, [r7, #0]
   8272e:	60da      	str	r2, [r3, #12]
}
   82730:	370c      	adds	r7, #12
   82732:	46bd      	mov	sp, r7
   82734:	f85d 7b04 	ldr.w	r7, [sp], #4
   82738:	4770      	bx	lr
   8273a:	bf00      	nop

0008273c <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   8273c:	b480      	push	{r7}
   8273e:	b083      	sub	sp, #12
   82740:	af00      	add	r7, sp, #0
   82742:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   82744:	687b      	ldr	r3, [r7, #4]
   82746:	695b      	ldr	r3, [r3, #20]
}
   82748:	4618      	mov	r0, r3
   8274a:	370c      	adds	r7, #12
   8274c:	46bd      	mov	sp, r7
   8274e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82752:	4770      	bx	lr

00082754 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82754:	b480      	push	{r7}
   82756:	b083      	sub	sp, #12
   82758:	af00      	add	r7, sp, #0
   8275a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   8275c:	687b      	ldr	r3, [r7, #4]
   8275e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82762:	601a      	str	r2, [r3, #0]
}
   82764:	370c      	adds	r7, #12
   82766:	46bd      	mov	sp, r7
   82768:	f85d 7b04 	ldr.w	r7, [sp], #4
   8276c:	4770      	bx	lr
   8276e:	bf00      	nop

00082770 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82770:	b480      	push	{r7}
   82772:	b083      	sub	sp, #12
   82774:	af00      	add	r7, sp, #0
   82776:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82778:	687b      	ldr	r3, [r7, #4]
   8277a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8277e:	601a      	str	r2, [r3, #0]
}
   82780:	370c      	adds	r7, #12
   82782:	46bd      	mov	sp, r7
   82784:	f85d 7b04 	ldr.w	r7, [sp], #4
   82788:	4770      	bx	lr
   8278a:	bf00      	nop

0008278c <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   8278c:	b480      	push	{r7}
   8278e:	b083      	sub	sp, #12
   82790:	af00      	add	r7, sp, #0
   82792:	6078      	str	r0, [r7, #4]
   82794:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82796:	687b      	ldr	r3, [r7, #4]
   82798:	695b      	ldr	r3, [r3, #20]
   8279a:	f003 0302 	and.w	r3, r3, #2
   8279e:	2b00      	cmp	r3, #0
   827a0:	d101      	bne.n	827a6 <usart_write+0x1a>
		return 1;
   827a2:	2301      	movs	r3, #1
   827a4:	e005      	b.n	827b2 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   827a6:	683b      	ldr	r3, [r7, #0]
   827a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   827ac:	687b      	ldr	r3, [r7, #4]
   827ae:	61da      	str	r2, [r3, #28]
	return 0;
   827b0:	2300      	movs	r3, #0
}
   827b2:	4618      	mov	r0, r3
   827b4:	370c      	adds	r7, #12
   827b6:	46bd      	mov	sp, r7
   827b8:	f85d 7b04 	ldr.w	r7, [sp], #4
   827bc:	4770      	bx	lr
   827be:	bf00      	nop

000827c0 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   827c0:	b480      	push	{r7}
   827c2:	b085      	sub	sp, #20
   827c4:	af00      	add	r7, sp, #0
   827c6:	6078      	str	r0, [r7, #4]
   827c8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   827ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   827ce:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   827d0:	e006      	b.n	827e0 <usart_getchar+0x20>
		if (!timeout--) {
   827d2:	68fb      	ldr	r3, [r7, #12]
   827d4:	1e5a      	subs	r2, r3, #1
   827d6:	60fa      	str	r2, [r7, #12]
   827d8:	2b00      	cmp	r3, #0
   827da:	d101      	bne.n	827e0 <usart_getchar+0x20>
			return 1;
   827dc:	2301      	movs	r3, #1
   827de:	e00c      	b.n	827fa <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   827e0:	687b      	ldr	r3, [r7, #4]
   827e2:	695b      	ldr	r3, [r3, #20]
   827e4:	f003 0301 	and.w	r3, r3, #1
   827e8:	2b00      	cmp	r3, #0
   827ea:	d0f2      	beq.n	827d2 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   827ec:	687b      	ldr	r3, [r7, #4]
   827ee:	699b      	ldr	r3, [r3, #24]
   827f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   827f4:	683b      	ldr	r3, [r7, #0]
   827f6:	601a      	str	r2, [r3, #0]

	return 0;
   827f8:	2300      	movs	r3, #0
}
   827fa:	4618      	mov	r0, r3
   827fc:	3714      	adds	r7, #20
   827fe:	46bd      	mov	sp, r7
   82800:	f85d 7b04 	ldr.w	r7, [sp], #4
   82804:	4770      	bx	lr
   82806:	bf00      	nop

00082808 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82808:	b480      	push	{r7}
   8280a:	b083      	sub	sp, #12
   8280c:	af00      	add	r7, sp, #0
   8280e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   82810:	687b      	ldr	r3, [r7, #4]
   82812:	4a04      	ldr	r2, [pc, #16]	; (82824 <usart_disable_writeprotect+0x1c>)
   82814:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82818:	370c      	adds	r7, #12
   8281a:	46bd      	mov	sp, r7
   8281c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82820:	4770      	bx	lr
   82822:	bf00      	nop
   82824:	55534100 	.word	0x55534100

00082828 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   82828:	b480      	push	{r7}
   8282a:	b083      	sub	sp, #12
   8282c:	af00      	add	r7, sp, #0
   8282e:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   82830:	687a      	ldr	r2, [r7, #4]
   82832:	4b05      	ldr	r3, [pc, #20]	; (82848 <wdt_restart+0x20>)
   82834:	429a      	cmp	r2, r3
   82836:	d102      	bne.n	8283e <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   82838:	687b      	ldr	r3, [r7, #4]
   8283a:	4a04      	ldr	r2, [pc, #16]	; (8284c <wdt_restart+0x24>)
   8283c:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   8283e:	370c      	adds	r7, #12
   82840:	46bd      	mov	sp, r7
   82842:	f85d 7b04 	ldr.w	r7, [sp], #4
   82846:	4770      	bx	lr
   82848:	400e1a50 	.word	0x400e1a50
   8284c:	a5000001 	.word	0xa5000001

00082850 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   82850:	b480      	push	{r7}
   82852:	b083      	sub	sp, #12
   82854:	af00      	add	r7, sp, #0
   82856:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   82858:	687b      	ldr	r3, [r7, #4]
   8285a:	689b      	ldr	r3, [r3, #8]
}
   8285c:	4618      	mov	r0, r3
   8285e:	370c      	adds	r7, #12
   82860:	46bd      	mov	sp, r7
   82862:	f85d 7b04 	ldr.w	r7, [sp], #4
   82866:	4770      	bx	lr

00082868 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82868:	b480      	push	{r7}
   8286a:	af00      	add	r7, sp, #0
	while (1) {
	}
   8286c:	e7fe      	b.n	8286c <Dummy_Handler+0x4>
   8286e:	bf00      	nop

00082870 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82870:	b580      	push	{r7, lr}
   82872:	b082      	sub	sp, #8
   82874:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82876:	4b1e      	ldr	r3, [pc, #120]	; (828f0 <Reset_Handler+0x80>)
   82878:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8287a:	4b1e      	ldr	r3, [pc, #120]	; (828f4 <Reset_Handler+0x84>)
   8287c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8287e:	687a      	ldr	r2, [r7, #4]
   82880:	683b      	ldr	r3, [r7, #0]
   82882:	429a      	cmp	r2, r3
   82884:	d00c      	beq.n	828a0 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82886:	e007      	b.n	82898 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82888:	683b      	ldr	r3, [r7, #0]
   8288a:	1d1a      	adds	r2, r3, #4
   8288c:	603a      	str	r2, [r7, #0]
   8288e:	687a      	ldr	r2, [r7, #4]
   82890:	1d11      	adds	r1, r2, #4
   82892:	6079      	str	r1, [r7, #4]
   82894:	6812      	ldr	r2, [r2, #0]
   82896:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82898:	683a      	ldr	r2, [r7, #0]
   8289a:	4b17      	ldr	r3, [pc, #92]	; (828f8 <Reset_Handler+0x88>)
   8289c:	429a      	cmp	r2, r3
   8289e:	d3f3      	bcc.n	82888 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828a0:	4b16      	ldr	r3, [pc, #88]	; (828fc <Reset_Handler+0x8c>)
   828a2:	603b      	str	r3, [r7, #0]
   828a4:	e004      	b.n	828b0 <Reset_Handler+0x40>
		*pDest++ = 0;
   828a6:	683b      	ldr	r3, [r7, #0]
   828a8:	1d1a      	adds	r2, r3, #4
   828aa:	603a      	str	r2, [r7, #0]
   828ac:	2200      	movs	r2, #0
   828ae:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   828b0:	683a      	ldr	r2, [r7, #0]
   828b2:	4b13      	ldr	r3, [pc, #76]	; (82900 <Reset_Handler+0x90>)
   828b4:	429a      	cmp	r2, r3
   828b6:	d3f6      	bcc.n	828a6 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   828b8:	4b12      	ldr	r3, [pc, #72]	; (82904 <Reset_Handler+0x94>)
   828ba:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   828bc:	4a12      	ldr	r2, [pc, #72]	; (82908 <Reset_Handler+0x98>)
   828be:	687b      	ldr	r3, [r7, #4]
   828c0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   828c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   828c8:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   828ca:	687b      	ldr	r3, [r7, #4]
   828cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   828d0:	d309      	bcc.n	828e6 <Reset_Handler+0x76>
   828d2:	687a      	ldr	r2, [r7, #4]
   828d4:	4b0d      	ldr	r3, [pc, #52]	; (8290c <Reset_Handler+0x9c>)
   828d6:	429a      	cmp	r2, r3
   828d8:	d805      	bhi.n	828e6 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   828da:	4b0b      	ldr	r3, [pc, #44]	; (82908 <Reset_Handler+0x98>)
   828dc:	4a0a      	ldr	r2, [pc, #40]	; (82908 <Reset_Handler+0x98>)
   828de:	6892      	ldr	r2, [r2, #8]
   828e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   828e4:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   828e6:	4b0a      	ldr	r3, [pc, #40]	; (82910 <Reset_Handler+0xa0>)
   828e8:	4798      	blx	r3

	/* Branch to main function */
	main();
   828ea:	4b0a      	ldr	r3, [pc, #40]	; (82914 <Reset_Handler+0xa4>)
   828ec:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   828ee:	e7fe      	b.n	828ee <Reset_Handler+0x7e>
   828f0:	00085020 	.word	0x00085020
   828f4:	20070000 	.word	0x20070000
   828f8:	20070438 	.word	0x20070438
   828fc:	20070438 	.word	0x20070438
   82900:	2007a694 	.word	0x2007a694
   82904:	00080000 	.word	0x00080000
   82908:	e000ed00 	.word	0xe000ed00
   8290c:	200fffff 	.word	0x200fffff
   82910:	00084bf1 	.word	0x00084bf1
   82914:	000844bd 	.word	0x000844bd

00082918 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82918:	b480      	push	{r7}
   8291a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8291c:	4b56      	ldr	r3, [pc, #344]	; (82a78 <SystemCoreClockUpdate+0x160>)
   8291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82920:	f003 0303 	and.w	r3, r3, #3
   82924:	2b03      	cmp	r3, #3
   82926:	f200 808a 	bhi.w	82a3e <SystemCoreClockUpdate+0x126>
   8292a:	a101      	add	r1, pc, #4	; (adr r1, 82930 <SystemCoreClockUpdate+0x18>)
   8292c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82930:	00082941 	.word	0x00082941
   82934:	00082961 	.word	0x00082961
   82938:	000829b1 	.word	0x000829b1
   8293c:	000829b1 	.word	0x000829b1
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82940:	4b4e      	ldr	r3, [pc, #312]	; (82a7c <SystemCoreClockUpdate+0x164>)
   82942:	695b      	ldr	r3, [r3, #20]
   82944:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82948:	2b00      	cmp	r3, #0
   8294a:	d004      	beq.n	82956 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8294c:	4b4c      	ldr	r3, [pc, #304]	; (82a80 <SystemCoreClockUpdate+0x168>)
   8294e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82952:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82954:	e073      	b.n	82a3e <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82956:	4b4a      	ldr	r3, [pc, #296]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82958:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   8295c:	601a      	str	r2, [r3, #0]
		}
		break;
   8295e:	e06e      	b.n	82a3e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82960:	4b45      	ldr	r3, [pc, #276]	; (82a78 <SystemCoreClockUpdate+0x160>)
   82962:	6a1b      	ldr	r3, [r3, #32]
   82964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82968:	2b00      	cmp	r3, #0
   8296a:	d003      	beq.n	82974 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8296c:	4b44      	ldr	r3, [pc, #272]	; (82a80 <SystemCoreClockUpdate+0x168>)
   8296e:	4a45      	ldr	r2, [pc, #276]	; (82a84 <SystemCoreClockUpdate+0x16c>)
   82970:	601a      	str	r2, [r3, #0]
   82972:	e01c      	b.n	829ae <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82974:	4b42      	ldr	r3, [pc, #264]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82976:	4a44      	ldr	r2, [pc, #272]	; (82a88 <SystemCoreClockUpdate+0x170>)
   82978:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8297a:	4b3f      	ldr	r3, [pc, #252]	; (82a78 <SystemCoreClockUpdate+0x160>)
   8297c:	6a1b      	ldr	r3, [r3, #32]
   8297e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82982:	2b10      	cmp	r3, #16
   82984:	d004      	beq.n	82990 <SystemCoreClockUpdate+0x78>
   82986:	2b20      	cmp	r3, #32
   82988:	d008      	beq.n	8299c <SystemCoreClockUpdate+0x84>
   8298a:	2b00      	cmp	r3, #0
   8298c:	d00e      	beq.n	829ac <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8298e:	e00e      	b.n	829ae <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82990:	4b3b      	ldr	r3, [pc, #236]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82992:	681b      	ldr	r3, [r3, #0]
   82994:	005a      	lsls	r2, r3, #1
   82996:	4b3a      	ldr	r3, [pc, #232]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82998:	601a      	str	r2, [r3, #0]
				break;
   8299a:	e008      	b.n	829ae <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8299c:	4b38      	ldr	r3, [pc, #224]	; (82a80 <SystemCoreClockUpdate+0x168>)
   8299e:	681a      	ldr	r2, [r3, #0]
   829a0:	4613      	mov	r3, r2
   829a2:	005b      	lsls	r3, r3, #1
   829a4:	441a      	add	r2, r3
   829a6:	4b36      	ldr	r3, [pc, #216]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829a8:	601a      	str	r2, [r3, #0]
				break;
   829aa:	e000      	b.n	829ae <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   829ac:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   829ae:	e046      	b.n	82a3e <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   829b0:	4b31      	ldr	r3, [pc, #196]	; (82a78 <SystemCoreClockUpdate+0x160>)
   829b2:	6a1b      	ldr	r3, [r3, #32]
   829b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   829b8:	2b00      	cmp	r3, #0
   829ba:	d003      	beq.n	829c4 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   829bc:	4b30      	ldr	r3, [pc, #192]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829be:	4a31      	ldr	r2, [pc, #196]	; (82a84 <SystemCoreClockUpdate+0x16c>)
   829c0:	601a      	str	r2, [r3, #0]
   829c2:	e01c      	b.n	829fe <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   829c4:	4b2e      	ldr	r3, [pc, #184]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829c6:	4a30      	ldr	r2, [pc, #192]	; (82a88 <SystemCoreClockUpdate+0x170>)
   829c8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   829ca:	4b2b      	ldr	r3, [pc, #172]	; (82a78 <SystemCoreClockUpdate+0x160>)
   829cc:	6a1b      	ldr	r3, [r3, #32]
   829ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
   829d2:	2b10      	cmp	r3, #16
   829d4:	d004      	beq.n	829e0 <SystemCoreClockUpdate+0xc8>
   829d6:	2b20      	cmp	r3, #32
   829d8:	d008      	beq.n	829ec <SystemCoreClockUpdate+0xd4>
   829da:	2b00      	cmp	r3, #0
   829dc:	d00e      	beq.n	829fc <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   829de:	e00e      	b.n	829fe <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   829e0:	4b27      	ldr	r3, [pc, #156]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829e2:	681b      	ldr	r3, [r3, #0]
   829e4:	005a      	lsls	r2, r3, #1
   829e6:	4b26      	ldr	r3, [pc, #152]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829e8:	601a      	str	r2, [r3, #0]
				break;
   829ea:	e008      	b.n	829fe <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   829ec:	4b24      	ldr	r3, [pc, #144]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829ee:	681a      	ldr	r2, [r3, #0]
   829f0:	4613      	mov	r3, r2
   829f2:	005b      	lsls	r3, r3, #1
   829f4:	441a      	add	r2, r3
   829f6:	4b22      	ldr	r3, [pc, #136]	; (82a80 <SystemCoreClockUpdate+0x168>)
   829f8:	601a      	str	r2, [r3, #0]
				break;
   829fa:	e000      	b.n	829fe <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   829fc:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   829fe:	4b1e      	ldr	r3, [pc, #120]	; (82a78 <SystemCoreClockUpdate+0x160>)
   82a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a02:	f003 0303 	and.w	r3, r3, #3
   82a06:	2b02      	cmp	r3, #2
   82a08:	d115      	bne.n	82a36 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a0a:	4b1b      	ldr	r3, [pc, #108]	; (82a78 <SystemCoreClockUpdate+0x160>)
   82a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82a0e:	4b1f      	ldr	r3, [pc, #124]	; (82a8c <SystemCoreClockUpdate+0x174>)
   82a10:	4013      	ands	r3, r2
   82a12:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82a14:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a16:	4a1a      	ldr	r2, [pc, #104]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a18:	6812      	ldr	r2, [r2, #0]
   82a1a:	fb02 f203 	mul.w	r2, r2, r3
   82a1e:	4b18      	ldr	r3, [pc, #96]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a20:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a22:	4b17      	ldr	r3, [pc, #92]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a24:	681a      	ldr	r2, [r3, #0]
   82a26:	4b14      	ldr	r3, [pc, #80]	; (82a78 <SystemCoreClockUpdate+0x160>)
   82a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82a2a:	b2db      	uxtb	r3, r3
   82a2c:	fbb2 f2f3 	udiv	r2, r2, r3
   82a30:	4b13      	ldr	r3, [pc, #76]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a32:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82a34:	e002      	b.n	82a3c <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82a36:	4b12      	ldr	r3, [pc, #72]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a38:	4a15      	ldr	r2, [pc, #84]	; (82a90 <SystemCoreClockUpdate+0x178>)
   82a3a:	601a      	str	r2, [r3, #0]
		}
		break;
   82a3c:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82a3e:	4b0e      	ldr	r3, [pc, #56]	; (82a78 <SystemCoreClockUpdate+0x160>)
   82a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a46:	2b70      	cmp	r3, #112	; 0x70
   82a48:	d108      	bne.n	82a5c <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82a4a:	4b0d      	ldr	r3, [pc, #52]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a4c:	681a      	ldr	r2, [r3, #0]
   82a4e:	4b11      	ldr	r3, [pc, #68]	; (82a94 <SystemCoreClockUpdate+0x17c>)
   82a50:	fba3 1302 	umull	r1, r3, r3, r2
   82a54:	085a      	lsrs	r2, r3, #1
   82a56:	4b0a      	ldr	r3, [pc, #40]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a58:	601a      	str	r2, [r3, #0]
   82a5a:	e009      	b.n	82a70 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a5c:	4b08      	ldr	r3, [pc, #32]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a5e:	681a      	ldr	r2, [r3, #0]
   82a60:	4b05      	ldr	r3, [pc, #20]	; (82a78 <SystemCoreClockUpdate+0x160>)
   82a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a68:	091b      	lsrs	r3, r3, #4
   82a6a:	40da      	lsrs	r2, r3
   82a6c:	4b04      	ldr	r3, [pc, #16]	; (82a80 <SystemCoreClockUpdate+0x168>)
   82a6e:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82a70:	46bd      	mov	sp, r7
   82a72:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a76:	4770      	bx	lr
   82a78:	400e0600 	.word	0x400e0600
   82a7c:	400e1a10 	.word	0x400e1a10
   82a80:	20070000 	.word	0x20070000
   82a84:	00b71b00 	.word	0x00b71b00
   82a88:	003d0900 	.word	0x003d0900
   82a8c:	07ff0000 	.word	0x07ff0000
   82a90:	0e4e1c00 	.word	0x0e4e1c00
   82a94:	aaaaaaab 	.word	0xaaaaaaab

00082a98 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82a98:	b480      	push	{r7}
   82a9a:	b083      	sub	sp, #12
   82a9c:	af00      	add	r7, sp, #0
   82a9e:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82aa0:	687a      	ldr	r2, [r7, #4]
   82aa2:	4b1f      	ldr	r3, [pc, #124]	; (82b20 <system_init_flash+0x88>)
   82aa4:	429a      	cmp	r2, r3
   82aa6:	d806      	bhi.n	82ab6 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82aa8:	4b1e      	ldr	r3, [pc, #120]	; (82b24 <system_init_flash+0x8c>)
   82aaa:	2200      	movs	r2, #0
   82aac:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82aae:	4b1e      	ldr	r3, [pc, #120]	; (82b28 <system_init_flash+0x90>)
   82ab0:	2200      	movs	r2, #0
   82ab2:	601a      	str	r2, [r3, #0]
   82ab4:	e02e      	b.n	82b14 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82ab6:	687a      	ldr	r2, [r7, #4]
   82ab8:	4b1c      	ldr	r3, [pc, #112]	; (82b2c <system_init_flash+0x94>)
   82aba:	429a      	cmp	r2, r3
   82abc:	d808      	bhi.n	82ad0 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82abe:	4b19      	ldr	r3, [pc, #100]	; (82b24 <system_init_flash+0x8c>)
   82ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
   82ac4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82ac6:	4b18      	ldr	r3, [pc, #96]	; (82b28 <system_init_flash+0x90>)
   82ac8:	f44f 7280 	mov.w	r2, #256	; 0x100
   82acc:	601a      	str	r2, [r3, #0]
   82ace:	e021      	b.n	82b14 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82ad0:	687a      	ldr	r2, [r7, #4]
   82ad2:	4b17      	ldr	r3, [pc, #92]	; (82b30 <system_init_flash+0x98>)
   82ad4:	429a      	cmp	r2, r3
   82ad6:	d808      	bhi.n	82aea <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82ad8:	4b12      	ldr	r3, [pc, #72]	; (82b24 <system_init_flash+0x8c>)
   82ada:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ade:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82ae0:	4b11      	ldr	r3, [pc, #68]	; (82b28 <system_init_flash+0x90>)
   82ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
   82ae6:	601a      	str	r2, [r3, #0]
   82ae8:	e014      	b.n	82b14 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82aea:	687a      	ldr	r2, [r7, #4]
   82aec:	4b11      	ldr	r3, [pc, #68]	; (82b34 <system_init_flash+0x9c>)
   82aee:	429a      	cmp	r2, r3
   82af0:	d808      	bhi.n	82b04 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82af2:	4b0c      	ldr	r3, [pc, #48]	; (82b24 <system_init_flash+0x8c>)
   82af4:	f44f 7240 	mov.w	r2, #768	; 0x300
   82af8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82afa:	4b0b      	ldr	r3, [pc, #44]	; (82b28 <system_init_flash+0x90>)
   82afc:	f44f 7240 	mov.w	r2, #768	; 0x300
   82b00:	601a      	str	r2, [r3, #0]
   82b02:	e007      	b.n	82b14 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82b04:	4b07      	ldr	r3, [pc, #28]	; (82b24 <system_init_flash+0x8c>)
   82b06:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82b0a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82b0c:	4b06      	ldr	r3, [pc, #24]	; (82b28 <system_init_flash+0x90>)
   82b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82b12:	601a      	str	r2, [r3, #0]
	}
}
   82b14:	370c      	adds	r7, #12
   82b16:	46bd      	mov	sp, r7
   82b18:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b1c:	4770      	bx	lr
   82b1e:	bf00      	nop
   82b20:	0157529f 	.word	0x0157529f
   82b24:	400e0a00 	.word	0x400e0a00
   82b28:	400e0c00 	.word	0x400e0c00
   82b2c:	0206cc7f 	.word	0x0206cc7f
   82b30:	0328b73f 	.word	0x0328b73f
   82b34:	04a62f7f 	.word	0x04a62f7f

00082b38 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82b38:	b480      	push	{r7}
   82b3a:	b083      	sub	sp, #12
   82b3c:	af00      	add	r7, sp, #0
   82b3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b40:	687b      	ldr	r3, [r7, #4]
   82b42:	f103 0208 	add.w	r2, r3, #8
   82b46:	687b      	ldr	r3, [r7, #4]
   82b48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82b4a:	687b      	ldr	r3, [r7, #4]
   82b4c:	f04f 32ff 	mov.w	r2, #4294967295
   82b50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b52:	687b      	ldr	r3, [r7, #4]
   82b54:	f103 0208 	add.w	r2, r3, #8
   82b58:	687b      	ldr	r3, [r7, #4]
   82b5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82b5c:	687b      	ldr	r3, [r7, #4]
   82b5e:	f103 0208 	add.w	r2, r3, #8
   82b62:	687b      	ldr	r3, [r7, #4]
   82b64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82b66:	687b      	ldr	r3, [r7, #4]
   82b68:	2200      	movs	r2, #0
   82b6a:	601a      	str	r2, [r3, #0]
}
   82b6c:	370c      	adds	r7, #12
   82b6e:	46bd      	mov	sp, r7
   82b70:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b74:	4770      	bx	lr
   82b76:	bf00      	nop

00082b78 <vListInsertEnd>:
	pxItem->pvContainer = NULL;
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82b78:	b480      	push	{r7}
   82b7a:	b085      	sub	sp, #20
   82b7c:	af00      	add	r7, sp, #0
   82b7e:	6078      	str	r0, [r7, #4]
   82b80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82b82:	687b      	ldr	r3, [r7, #4]
   82b84:	685b      	ldr	r3, [r3, #4]
   82b86:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82b88:	683b      	ldr	r3, [r7, #0]
   82b8a:	68fa      	ldr	r2, [r7, #12]
   82b8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   82b8e:	68fb      	ldr	r3, [r7, #12]
   82b90:	689a      	ldr	r2, [r3, #8]
   82b92:	683b      	ldr	r3, [r7, #0]
   82b94:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82b96:	68fb      	ldr	r3, [r7, #12]
   82b98:	689b      	ldr	r3, [r3, #8]
   82b9a:	683a      	ldr	r2, [r7, #0]
   82b9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   82b9e:	68fb      	ldr	r3, [r7, #12]
   82ba0:	683a      	ldr	r2, [r7, #0]
   82ba2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82ba4:	683b      	ldr	r3, [r7, #0]
   82ba6:	687a      	ldr	r2, [r7, #4]
   82ba8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82baa:	687b      	ldr	r3, [r7, #4]
   82bac:	681b      	ldr	r3, [r3, #0]
   82bae:	1c5a      	adds	r2, r3, #1
   82bb0:	687b      	ldr	r3, [r7, #4]
   82bb2:	601a      	str	r2, [r3, #0]
}
   82bb4:	3714      	adds	r7, #20
   82bb6:	46bd      	mov	sp, r7
   82bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82bbc:	4770      	bx	lr
   82bbe:	bf00      	nop

00082bc0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82bc0:	b480      	push	{r7}
   82bc2:	b085      	sub	sp, #20
   82bc4:	af00      	add	r7, sp, #0
   82bc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82bc8:	687b      	ldr	r3, [r7, #4]
   82bca:	691b      	ldr	r3, [r3, #16]
   82bcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82bce:	687b      	ldr	r3, [r7, #4]
   82bd0:	685b      	ldr	r3, [r3, #4]
   82bd2:	687a      	ldr	r2, [r7, #4]
   82bd4:	6892      	ldr	r2, [r2, #8]
   82bd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82bd8:	687b      	ldr	r3, [r7, #4]
   82bda:	689b      	ldr	r3, [r3, #8]
   82bdc:	687a      	ldr	r2, [r7, #4]
   82bde:	6852      	ldr	r2, [r2, #4]
   82be0:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82be2:	68fb      	ldr	r3, [r7, #12]
   82be4:	685a      	ldr	r2, [r3, #4]
   82be6:	687b      	ldr	r3, [r7, #4]
   82be8:	429a      	cmp	r2, r3
   82bea:	d103      	bne.n	82bf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82bec:	687b      	ldr	r3, [r7, #4]
   82bee:	689a      	ldr	r2, [r3, #8]
   82bf0:	68fb      	ldr	r3, [r7, #12]
   82bf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82bf4:	687b      	ldr	r3, [r7, #4]
   82bf6:	2200      	movs	r2, #0
   82bf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82bfa:	68fb      	ldr	r3, [r7, #12]
   82bfc:	681b      	ldr	r3, [r3, #0]
   82bfe:	1e5a      	subs	r2, r3, #1
   82c00:	68fb      	ldr	r3, [r7, #12]
   82c02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82c04:	68fb      	ldr	r3, [r7, #12]
   82c06:	681b      	ldr	r3, [r3, #0]
}
   82c08:	4618      	mov	r0, r3
   82c0a:	3714      	adds	r7, #20
   82c0c:	46bd      	mov	sp, r7
   82c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c12:	4770      	bx	lr

00082c14 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   82c14:	4b07      	ldr	r3, [pc, #28]	; (82c34 <pxCurrentTCBConst2>)
   82c16:	6819      	ldr	r1, [r3, #0]
   82c18:	6808      	ldr	r0, [r1, #0]
   82c1a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82c1e:	f380 8809 	msr	PSP, r0
   82c22:	f3bf 8f6f 	isb	sy
   82c26:	f04f 0000 	mov.w	r0, #0
   82c2a:	f380 8811 	msr	BASEPRI, r0
   82c2e:	f04e 0e0d 	orr.w	lr, lr, #13
   82c32:	4770      	bx	lr

00082c34 <pxCurrentTCBConst2>:
   82c34:	2007a508 	.word	0x2007a508

00082c38 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   82c38:	b480      	push	{r7}
   82c3a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82c3c:	4b05      	ldr	r3, [pc, #20]	; (82c54 <vPortYield+0x1c>)
   82c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82c42:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   82c44:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82c48:	f3bf 8f6f 	isb	sy
}
   82c4c:	46bd      	mov	sp, r7
   82c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82c52:	4770      	bx	lr
   82c54:	e000ed04 	.word	0xe000ed04

00082c58 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   82c58:	b580      	push	{r7, lr}
   82c5a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   82c5c:	4b0c      	ldr	r3, [pc, #48]	; (82c90 <vPortEnterCritical+0x38>)
   82c5e:	4798      	blx	r3
	uxCriticalNesting++;
   82c60:	4b0c      	ldr	r3, [pc, #48]	; (82c94 <vPortEnterCritical+0x3c>)
   82c62:	681b      	ldr	r3, [r3, #0]
   82c64:	1c5a      	adds	r2, r3, #1
   82c66:	4b0b      	ldr	r3, [pc, #44]	; (82c94 <vPortEnterCritical+0x3c>)
   82c68:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   82c6a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   82c6e:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   82c72:	4b08      	ldr	r3, [pc, #32]	; (82c94 <vPortEnterCritical+0x3c>)
   82c74:	681b      	ldr	r3, [r3, #0]
   82c76:	2b01      	cmp	r3, #1
   82c78:	d108      	bne.n	82c8c <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   82c7a:	4b07      	ldr	r3, [pc, #28]	; (82c98 <vPortEnterCritical+0x40>)
   82c7c:	681b      	ldr	r3, [r3, #0]
   82c7e:	f003 031f 	and.w	r3, r3, #31
   82c82:	2b00      	cmp	r3, #0
   82c84:	d002      	beq.n	82c8c <vPortEnterCritical+0x34>
   82c86:	4b02      	ldr	r3, [pc, #8]	; (82c90 <vPortEnterCritical+0x38>)
   82c88:	4798      	blx	r3
   82c8a:	e7fe      	b.n	82c8a <vPortEnterCritical+0x32>
	}
}
   82c8c:	bd80      	pop	{r7, pc}
   82c8e:	bf00      	nop
   82c90:	00082cd5 	.word	0x00082cd5
   82c94:	20070004 	.word	0x20070004
   82c98:	e000ed04 	.word	0xe000ed04

00082c9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   82c9c:	b580      	push	{r7, lr}
   82c9e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   82ca0:	4b09      	ldr	r3, [pc, #36]	; (82cc8 <vPortExitCritical+0x2c>)
   82ca2:	681b      	ldr	r3, [r3, #0]
   82ca4:	2b00      	cmp	r3, #0
   82ca6:	d102      	bne.n	82cae <vPortExitCritical+0x12>
   82ca8:	4b08      	ldr	r3, [pc, #32]	; (82ccc <vPortExitCritical+0x30>)
   82caa:	4798      	blx	r3
   82cac:	e7fe      	b.n	82cac <vPortExitCritical+0x10>
	uxCriticalNesting--;
   82cae:	4b06      	ldr	r3, [pc, #24]	; (82cc8 <vPortExitCritical+0x2c>)
   82cb0:	681b      	ldr	r3, [r3, #0]
   82cb2:	1e5a      	subs	r2, r3, #1
   82cb4:	4b04      	ldr	r3, [pc, #16]	; (82cc8 <vPortExitCritical+0x2c>)
   82cb6:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   82cb8:	4b03      	ldr	r3, [pc, #12]	; (82cc8 <vPortExitCritical+0x2c>)
   82cba:	681b      	ldr	r3, [r3, #0]
   82cbc:	2b00      	cmp	r3, #0
   82cbe:	d102      	bne.n	82cc6 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   82cc0:	2000      	movs	r0, #0
   82cc2:	4b03      	ldr	r3, [pc, #12]	; (82cd0 <vPortExitCritical+0x34>)
   82cc4:	4798      	blx	r3
	}
}
   82cc6:	bd80      	pop	{r7, pc}
   82cc8:	20070004 	.word	0x20070004
   82ccc:	00082cd5 	.word	0x00082cd5
   82cd0:	00082ce9 	.word	0x00082ce9

00082cd4 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   82cd4:	f3ef 8011 	mrs	r0, BASEPRI
   82cd8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   82cdc:	f381 8811 	msr	BASEPRI, r1
   82ce0:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   82ce2:	2300      	movs	r3, #0
}
   82ce4:	4618      	mov	r0, r3
   82ce6:	bf00      	nop

00082ce8 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   82ce8:	f380 8811 	msr	BASEPRI, r0
   82cec:	4770      	bx	lr
   82cee:	bf00      	nop

00082cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   82cf0:	f3ef 8009 	mrs	r0, PSP
   82cf4:	f3bf 8f6f 	isb	sy
   82cf8:	4b0d      	ldr	r3, [pc, #52]	; (82d30 <pxCurrentTCBConst>)
   82cfa:	681a      	ldr	r2, [r3, #0]
   82cfc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82d00:	6010      	str	r0, [r2, #0]
   82d02:	e92d 4008 	stmdb	sp!, {r3, lr}
   82d06:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   82d0a:	f380 8811 	msr	BASEPRI, r0
   82d0e:	f000 fd19 	bl	83744 <vTaskSwitchContext>
   82d12:	f04f 0000 	mov.w	r0, #0
   82d16:	f380 8811 	msr	BASEPRI, r0
   82d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   82d1e:	6819      	ldr	r1, [r3, #0]
   82d20:	6808      	ldr	r0, [r1, #0]
   82d22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   82d26:	f380 8809 	msr	PSP, r0
   82d2a:	f3bf 8f6f 	isb	sy
   82d2e:	4770      	bx	lr

00082d30 <pxCurrentTCBConst>:
   82d30:	2007a508 	.word	0x2007a508

00082d34 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   82d34:	b580      	push	{r7, lr}
   82d36:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   82d38:	4b07      	ldr	r3, [pc, #28]	; (82d58 <SysTick_Handler+0x24>)
   82d3a:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   82d3c:	4b07      	ldr	r3, [pc, #28]	; (82d5c <SysTick_Handler+0x28>)
   82d3e:	4798      	blx	r3
   82d40:	4603      	mov	r3, r0
   82d42:	2b00      	cmp	r3, #0
   82d44:	d003      	beq.n	82d4e <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   82d46:	4b06      	ldr	r3, [pc, #24]	; (82d60 <SysTick_Handler+0x2c>)
   82d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   82d4c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   82d4e:	2000      	movs	r0, #0
   82d50:	4b04      	ldr	r3, [pc, #16]	; (82d64 <SysTick_Handler+0x30>)
   82d52:	4798      	blx	r3
}
   82d54:	bd80      	pop	{r7, pc}
   82d56:	bf00      	nop
   82d58:	00082cd5 	.word	0x00082cd5
   82d5c:	000835c9 	.word	0x000835c9
   82d60:	e000ed04 	.word	0xe000ed04
   82d64:	00082ce9 	.word	0x00082ce9

00082d68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   82d68:	b580      	push	{r7, lr}
   82d6a:	b082      	sub	sp, #8
   82d6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   82d6e:	f3ef 8305 	mrs	r3, IPSR
   82d72:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   82d74:	687b      	ldr	r3, [r7, #4]
   82d76:	2b0f      	cmp	r3, #15
   82d78:	d90c      	bls.n	82d94 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   82d7a:	4a0d      	ldr	r2, [pc, #52]	; (82db0 <vPortValidateInterruptPriority+0x48>)
   82d7c:	687b      	ldr	r3, [r7, #4]
   82d7e:	4413      	add	r3, r2
   82d80:	781b      	ldrb	r3, [r3, #0]
   82d82:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   82d84:	4b0b      	ldr	r3, [pc, #44]	; (82db4 <vPortValidateInterruptPriority+0x4c>)
   82d86:	781b      	ldrb	r3, [r3, #0]
   82d88:	78fa      	ldrb	r2, [r7, #3]
   82d8a:	429a      	cmp	r2, r3
   82d8c:	d202      	bcs.n	82d94 <vPortValidateInterruptPriority+0x2c>
   82d8e:	4b0a      	ldr	r3, [pc, #40]	; (82db8 <vPortValidateInterruptPriority+0x50>)
   82d90:	4798      	blx	r3
   82d92:	e7fe      	b.n	82d92 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   82d94:	4b09      	ldr	r3, [pc, #36]	; (82dbc <vPortValidateInterruptPriority+0x54>)
   82d96:	681b      	ldr	r3, [r3, #0]
   82d98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   82d9c:	4b08      	ldr	r3, [pc, #32]	; (82dc0 <vPortValidateInterruptPriority+0x58>)
   82d9e:	681b      	ldr	r3, [r3, #0]
   82da0:	429a      	cmp	r2, r3
   82da2:	d902      	bls.n	82daa <vPortValidateInterruptPriority+0x42>
   82da4:	4b04      	ldr	r3, [pc, #16]	; (82db8 <vPortValidateInterruptPriority+0x50>)
   82da6:	4798      	blx	r3
   82da8:	e7fe      	b.n	82da8 <vPortValidateInterruptPriority+0x40>
	}
   82daa:	3708      	adds	r7, #8
   82dac:	46bd      	mov	sp, r7
   82dae:	bd80      	pop	{r7, pc}
   82db0:	e000e3f0 	.word	0xe000e3f0
   82db4:	200704e8 	.word	0x200704e8
   82db8:	00082cd5 	.word	0x00082cd5
   82dbc:	e000ed0c 	.word	0xe000ed0c
   82dc0:	200704ec 	.word	0x200704ec

00082dc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   82dc4:	b580      	push	{r7, lr}
   82dc6:	b086      	sub	sp, #24
   82dc8:	af00      	add	r7, sp, #0
   82dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   82dcc:	2300      	movs	r3, #0
   82dce:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   82dd0:	4b4f      	ldr	r3, [pc, #316]	; (82f10 <pvPortMalloc+0x14c>)
   82dd2:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   82dd4:	4b4f      	ldr	r3, [pc, #316]	; (82f14 <pvPortMalloc+0x150>)
   82dd6:	681b      	ldr	r3, [r3, #0]
   82dd8:	2b00      	cmp	r3, #0
   82dda:	d101      	bne.n	82de0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   82ddc:	4b4e      	ldr	r3, [pc, #312]	; (82f18 <pvPortMalloc+0x154>)
   82dde:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   82de0:	4b4e      	ldr	r3, [pc, #312]	; (82f1c <pvPortMalloc+0x158>)
   82de2:	681a      	ldr	r2, [r3, #0]
   82de4:	687b      	ldr	r3, [r7, #4]
   82de6:	4013      	ands	r3, r2
   82de8:	2b00      	cmp	r3, #0
   82dea:	d17d      	bne.n	82ee8 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   82dec:	687b      	ldr	r3, [r7, #4]
   82dee:	2b00      	cmp	r3, #0
   82df0:	d015      	beq.n	82e1e <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   82df2:	2308      	movs	r3, #8
   82df4:	687a      	ldr	r2, [r7, #4]
   82df6:	4413      	add	r3, r2
   82df8:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   82dfa:	687b      	ldr	r3, [r7, #4]
   82dfc:	f003 0307 	and.w	r3, r3, #7
   82e00:	2b00      	cmp	r3, #0
   82e02:	d00c      	beq.n	82e1e <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   82e04:	687b      	ldr	r3, [r7, #4]
   82e06:	f023 0307 	bic.w	r3, r3, #7
   82e0a:	3308      	adds	r3, #8
   82e0c:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   82e0e:	687b      	ldr	r3, [r7, #4]
   82e10:	f003 0307 	and.w	r3, r3, #7
   82e14:	2b00      	cmp	r3, #0
   82e16:	d002      	beq.n	82e1e <pvPortMalloc+0x5a>
   82e18:	4b41      	ldr	r3, [pc, #260]	; (82f20 <pvPortMalloc+0x15c>)
   82e1a:	4798      	blx	r3
   82e1c:	e7fe      	b.n	82e1c <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   82e1e:	687b      	ldr	r3, [r7, #4]
   82e20:	2b00      	cmp	r3, #0
   82e22:	d061      	beq.n	82ee8 <pvPortMalloc+0x124>
   82e24:	4b3f      	ldr	r3, [pc, #252]	; (82f24 <pvPortMalloc+0x160>)
   82e26:	681b      	ldr	r3, [r3, #0]
   82e28:	687a      	ldr	r2, [r7, #4]
   82e2a:	429a      	cmp	r2, r3
   82e2c:	d85c      	bhi.n	82ee8 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   82e2e:	4b3e      	ldr	r3, [pc, #248]	; (82f28 <pvPortMalloc+0x164>)
   82e30:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   82e32:	4b3d      	ldr	r3, [pc, #244]	; (82f28 <pvPortMalloc+0x164>)
   82e34:	681b      	ldr	r3, [r3, #0]
   82e36:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82e38:	e004      	b.n	82e44 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   82e3a:	697b      	ldr	r3, [r7, #20]
   82e3c:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   82e3e:	697b      	ldr	r3, [r7, #20]
   82e40:	681b      	ldr	r3, [r3, #0]
   82e42:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   82e44:	697b      	ldr	r3, [r7, #20]
   82e46:	685a      	ldr	r2, [r3, #4]
   82e48:	687b      	ldr	r3, [r7, #4]
   82e4a:	429a      	cmp	r2, r3
   82e4c:	d203      	bcs.n	82e56 <pvPortMalloc+0x92>
   82e4e:	697b      	ldr	r3, [r7, #20]
   82e50:	681b      	ldr	r3, [r3, #0]
   82e52:	2b00      	cmp	r3, #0
   82e54:	d1f1      	bne.n	82e3a <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   82e56:	4b2f      	ldr	r3, [pc, #188]	; (82f14 <pvPortMalloc+0x150>)
   82e58:	681b      	ldr	r3, [r3, #0]
   82e5a:	697a      	ldr	r2, [r7, #20]
   82e5c:	429a      	cmp	r2, r3
   82e5e:	d043      	beq.n	82ee8 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   82e60:	693b      	ldr	r3, [r7, #16]
   82e62:	681a      	ldr	r2, [r3, #0]
   82e64:	2308      	movs	r3, #8
   82e66:	4413      	add	r3, r2
   82e68:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   82e6a:	697b      	ldr	r3, [r7, #20]
   82e6c:	681a      	ldr	r2, [r3, #0]
   82e6e:	693b      	ldr	r3, [r7, #16]
   82e70:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   82e72:	697b      	ldr	r3, [r7, #20]
   82e74:	685a      	ldr	r2, [r3, #4]
   82e76:	687b      	ldr	r3, [r7, #4]
   82e78:	1ad2      	subs	r2, r2, r3
   82e7a:	2308      	movs	r3, #8
   82e7c:	005b      	lsls	r3, r3, #1
   82e7e:	429a      	cmp	r2, r3
   82e80:	d917      	bls.n	82eb2 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   82e82:	697a      	ldr	r2, [r7, #20]
   82e84:	687b      	ldr	r3, [r7, #4]
   82e86:	4413      	add	r3, r2
   82e88:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   82e8a:	68bb      	ldr	r3, [r7, #8]
   82e8c:	f003 0307 	and.w	r3, r3, #7
   82e90:	2b00      	cmp	r3, #0
   82e92:	d002      	beq.n	82e9a <pvPortMalloc+0xd6>
   82e94:	4b22      	ldr	r3, [pc, #136]	; (82f20 <pvPortMalloc+0x15c>)
   82e96:	4798      	blx	r3
   82e98:	e7fe      	b.n	82e98 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   82e9a:	697b      	ldr	r3, [r7, #20]
   82e9c:	685a      	ldr	r2, [r3, #4]
   82e9e:	687b      	ldr	r3, [r7, #4]
   82ea0:	1ad2      	subs	r2, r2, r3
   82ea2:	68bb      	ldr	r3, [r7, #8]
   82ea4:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   82ea6:	697b      	ldr	r3, [r7, #20]
   82ea8:	687a      	ldr	r2, [r7, #4]
   82eaa:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   82eac:	68b8      	ldr	r0, [r7, #8]
   82eae:	4b1f      	ldr	r3, [pc, #124]	; (82f2c <pvPortMalloc+0x168>)
   82eb0:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   82eb2:	4b1c      	ldr	r3, [pc, #112]	; (82f24 <pvPortMalloc+0x160>)
   82eb4:	681a      	ldr	r2, [r3, #0]
   82eb6:	697b      	ldr	r3, [r7, #20]
   82eb8:	685b      	ldr	r3, [r3, #4]
   82eba:	1ad2      	subs	r2, r2, r3
   82ebc:	4b19      	ldr	r3, [pc, #100]	; (82f24 <pvPortMalloc+0x160>)
   82ebe:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   82ec0:	4b18      	ldr	r3, [pc, #96]	; (82f24 <pvPortMalloc+0x160>)
   82ec2:	681a      	ldr	r2, [r3, #0]
   82ec4:	4b1a      	ldr	r3, [pc, #104]	; (82f30 <pvPortMalloc+0x16c>)
   82ec6:	681b      	ldr	r3, [r3, #0]
   82ec8:	429a      	cmp	r2, r3
   82eca:	d203      	bcs.n	82ed4 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   82ecc:	4b15      	ldr	r3, [pc, #84]	; (82f24 <pvPortMalloc+0x160>)
   82ece:	681a      	ldr	r2, [r3, #0]
   82ed0:	4b17      	ldr	r3, [pc, #92]	; (82f30 <pvPortMalloc+0x16c>)
   82ed2:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   82ed4:	697b      	ldr	r3, [r7, #20]
   82ed6:	685a      	ldr	r2, [r3, #4]
   82ed8:	4b10      	ldr	r3, [pc, #64]	; (82f1c <pvPortMalloc+0x158>)
   82eda:	681b      	ldr	r3, [r3, #0]
   82edc:	431a      	orrs	r2, r3
   82ede:	697b      	ldr	r3, [r7, #20]
   82ee0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   82ee2:	697b      	ldr	r3, [r7, #20]
   82ee4:	2200      	movs	r2, #0
   82ee6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   82ee8:	4b12      	ldr	r3, [pc, #72]	; (82f34 <pvPortMalloc+0x170>)
   82eea:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   82eec:	68fb      	ldr	r3, [r7, #12]
   82eee:	2b00      	cmp	r3, #0
   82ef0:	d101      	bne.n	82ef6 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   82ef2:	4b11      	ldr	r3, [pc, #68]	; (82f38 <pvPortMalloc+0x174>)
   82ef4:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   82ef6:	68fb      	ldr	r3, [r7, #12]
   82ef8:	f003 0307 	and.w	r3, r3, #7
   82efc:	2b00      	cmp	r3, #0
   82efe:	d002      	beq.n	82f06 <pvPortMalloc+0x142>
   82f00:	4b07      	ldr	r3, [pc, #28]	; (82f20 <pvPortMalloc+0x15c>)
   82f02:	4798      	blx	r3
   82f04:	e7fe      	b.n	82f04 <pvPortMalloc+0x140>
	return pvReturn;
   82f06:	68fb      	ldr	r3, [r7, #12]
}
   82f08:	4618      	mov	r0, r3
   82f0a:	3718      	adds	r7, #24
   82f0c:	46bd      	mov	sp, r7
   82f0e:	bd80      	pop	{r7, pc}
   82f10:	00083489 	.word	0x00083489
   82f14:	2007a4f8 	.word	0x2007a4f8
   82f18:	00082fe1 	.word	0x00082fe1
   82f1c:	2007a504 	.word	0x2007a504
   82f20:	00082cd5 	.word	0x00082cd5
   82f24:	2007a4fc 	.word	0x2007a4fc
   82f28:	2007a4f0 	.word	0x2007a4f0
   82f2c:	000830a5 	.word	0x000830a5
   82f30:	2007a500 	.word	0x2007a500
   82f34:	000834a5 	.word	0x000834a5
   82f38:	000845bd 	.word	0x000845bd

00082f3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   82f3c:	b580      	push	{r7, lr}
   82f3e:	b084      	sub	sp, #16
   82f40:	af00      	add	r7, sp, #0
   82f42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   82f44:	687b      	ldr	r3, [r7, #4]
   82f46:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   82f48:	687b      	ldr	r3, [r7, #4]
   82f4a:	2b00      	cmp	r3, #0
   82f4c:	d038      	beq.n	82fc0 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   82f4e:	2308      	movs	r3, #8
   82f50:	425b      	negs	r3, r3
   82f52:	68fa      	ldr	r2, [r7, #12]
   82f54:	4413      	add	r3, r2
   82f56:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   82f58:	68fb      	ldr	r3, [r7, #12]
   82f5a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   82f5c:	68bb      	ldr	r3, [r7, #8]
   82f5e:	685a      	ldr	r2, [r3, #4]
   82f60:	4b19      	ldr	r3, [pc, #100]	; (82fc8 <vPortFree+0x8c>)
   82f62:	681b      	ldr	r3, [r3, #0]
   82f64:	4013      	ands	r3, r2
   82f66:	2b00      	cmp	r3, #0
   82f68:	d102      	bne.n	82f70 <vPortFree+0x34>
   82f6a:	4b18      	ldr	r3, [pc, #96]	; (82fcc <vPortFree+0x90>)
   82f6c:	4798      	blx	r3
   82f6e:	e7fe      	b.n	82f6e <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   82f70:	68bb      	ldr	r3, [r7, #8]
   82f72:	681b      	ldr	r3, [r3, #0]
   82f74:	2b00      	cmp	r3, #0
   82f76:	d002      	beq.n	82f7e <vPortFree+0x42>
   82f78:	4b14      	ldr	r3, [pc, #80]	; (82fcc <vPortFree+0x90>)
   82f7a:	4798      	blx	r3
   82f7c:	e7fe      	b.n	82f7c <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   82f7e:	68bb      	ldr	r3, [r7, #8]
   82f80:	685a      	ldr	r2, [r3, #4]
   82f82:	4b11      	ldr	r3, [pc, #68]	; (82fc8 <vPortFree+0x8c>)
   82f84:	681b      	ldr	r3, [r3, #0]
   82f86:	4013      	ands	r3, r2
   82f88:	2b00      	cmp	r3, #0
   82f8a:	d019      	beq.n	82fc0 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   82f8c:	68bb      	ldr	r3, [r7, #8]
   82f8e:	681b      	ldr	r3, [r3, #0]
   82f90:	2b00      	cmp	r3, #0
   82f92:	d115      	bne.n	82fc0 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   82f94:	68bb      	ldr	r3, [r7, #8]
   82f96:	685a      	ldr	r2, [r3, #4]
   82f98:	4b0b      	ldr	r3, [pc, #44]	; (82fc8 <vPortFree+0x8c>)
   82f9a:	681b      	ldr	r3, [r3, #0]
   82f9c:	43db      	mvns	r3, r3
   82f9e:	401a      	ands	r2, r3
   82fa0:	68bb      	ldr	r3, [r7, #8]
   82fa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   82fa4:	4b0a      	ldr	r3, [pc, #40]	; (82fd0 <vPortFree+0x94>)
   82fa6:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   82fa8:	68bb      	ldr	r3, [r7, #8]
   82faa:	685a      	ldr	r2, [r3, #4]
   82fac:	4b09      	ldr	r3, [pc, #36]	; (82fd4 <vPortFree+0x98>)
   82fae:	681b      	ldr	r3, [r3, #0]
   82fb0:	441a      	add	r2, r3
   82fb2:	4b08      	ldr	r3, [pc, #32]	; (82fd4 <vPortFree+0x98>)
   82fb4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   82fb6:	68b8      	ldr	r0, [r7, #8]
   82fb8:	4b07      	ldr	r3, [pc, #28]	; (82fd8 <vPortFree+0x9c>)
   82fba:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   82fbc:	4b07      	ldr	r3, [pc, #28]	; (82fdc <vPortFree+0xa0>)
   82fbe:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   82fc0:	3710      	adds	r7, #16
   82fc2:	46bd      	mov	sp, r7
   82fc4:	bd80      	pop	{r7, pc}
   82fc6:	bf00      	nop
   82fc8:	2007a504 	.word	0x2007a504
   82fcc:	00082cd5 	.word	0x00082cd5
   82fd0:	00083489 	.word	0x00083489
   82fd4:	2007a4fc 	.word	0x2007a4fc
   82fd8:	000830a5 	.word	0x000830a5
   82fdc:	000834a5 	.word	0x000834a5

00082fe0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   82fe0:	b480      	push	{r7}
   82fe2:	b085      	sub	sp, #20
   82fe4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   82fe6:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   82fea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   82fec:	4b27      	ldr	r3, [pc, #156]	; (8308c <prvHeapInit+0xac>)
   82fee:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   82ff0:	68fb      	ldr	r3, [r7, #12]
   82ff2:	f003 0307 	and.w	r3, r3, #7
   82ff6:	2b00      	cmp	r3, #0
   82ff8:	d00c      	beq.n	83014 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   82ffa:	68fb      	ldr	r3, [r7, #12]
   82ffc:	3307      	adds	r3, #7
   82ffe:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83000:	68fb      	ldr	r3, [r7, #12]
   83002:	f023 0307 	bic.w	r3, r3, #7
   83006:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   83008:	68ba      	ldr	r2, [r7, #8]
   8300a:	68fb      	ldr	r3, [r7, #12]
   8300c:	1ad2      	subs	r2, r2, r3
   8300e:	4b1f      	ldr	r3, [pc, #124]	; (8308c <prvHeapInit+0xac>)
   83010:	4413      	add	r3, r2
   83012:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   83014:	68fb      	ldr	r3, [r7, #12]
   83016:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   83018:	4b1d      	ldr	r3, [pc, #116]	; (83090 <prvHeapInit+0xb0>)
   8301a:	687a      	ldr	r2, [r7, #4]
   8301c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8301e:	4b1c      	ldr	r3, [pc, #112]	; (83090 <prvHeapInit+0xb0>)
   83020:	2200      	movs	r2, #0
   83022:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   83024:	687a      	ldr	r2, [r7, #4]
   83026:	68bb      	ldr	r3, [r7, #8]
   83028:	4413      	add	r3, r2
   8302a:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   8302c:	2308      	movs	r3, #8
   8302e:	68fa      	ldr	r2, [r7, #12]
   83030:	1ad3      	subs	r3, r2, r3
   83032:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83034:	68fb      	ldr	r3, [r7, #12]
   83036:	f023 0307 	bic.w	r3, r3, #7
   8303a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   8303c:	68fa      	ldr	r2, [r7, #12]
   8303e:	4b15      	ldr	r3, [pc, #84]	; (83094 <prvHeapInit+0xb4>)
   83040:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   83042:	4b14      	ldr	r3, [pc, #80]	; (83094 <prvHeapInit+0xb4>)
   83044:	681b      	ldr	r3, [r3, #0]
   83046:	2200      	movs	r2, #0
   83048:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8304a:	4b12      	ldr	r3, [pc, #72]	; (83094 <prvHeapInit+0xb4>)
   8304c:	681b      	ldr	r3, [r3, #0]
   8304e:	2200      	movs	r2, #0
   83050:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   83052:	687b      	ldr	r3, [r7, #4]
   83054:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   83056:	683b      	ldr	r3, [r7, #0]
   83058:	68fa      	ldr	r2, [r7, #12]
   8305a:	1ad2      	subs	r2, r2, r3
   8305c:	683b      	ldr	r3, [r7, #0]
   8305e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   83060:	4b0c      	ldr	r3, [pc, #48]	; (83094 <prvHeapInit+0xb4>)
   83062:	681a      	ldr	r2, [r3, #0]
   83064:	683b      	ldr	r3, [r7, #0]
   83066:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83068:	683b      	ldr	r3, [r7, #0]
   8306a:	685a      	ldr	r2, [r3, #4]
   8306c:	4b0a      	ldr	r3, [pc, #40]	; (83098 <prvHeapInit+0xb8>)
   8306e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83070:	683b      	ldr	r3, [r7, #0]
   83072:	685a      	ldr	r2, [r3, #4]
   83074:	4b09      	ldr	r3, [pc, #36]	; (8309c <prvHeapInit+0xbc>)
   83076:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   83078:	4b09      	ldr	r3, [pc, #36]	; (830a0 <prvHeapInit+0xc0>)
   8307a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   8307e:	601a      	str	r2, [r3, #0]
}
   83080:	3714      	adds	r7, #20
   83082:	46bd      	mov	sp, r7
   83084:	f85d 7b04 	ldr.w	r7, [sp], #4
   83088:	4770      	bx	lr
   8308a:	bf00      	nop
   8308c:	200704f0 	.word	0x200704f0
   83090:	2007a4f0 	.word	0x2007a4f0
   83094:	2007a4f8 	.word	0x2007a4f8
   83098:	2007a500 	.word	0x2007a500
   8309c:	2007a4fc 	.word	0x2007a4fc
   830a0:	2007a504 	.word	0x2007a504

000830a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   830a4:	b480      	push	{r7}
   830a6:	b085      	sub	sp, #20
   830a8:	af00      	add	r7, sp, #0
   830aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   830ac:	4b27      	ldr	r3, [pc, #156]	; (8314c <prvInsertBlockIntoFreeList+0xa8>)
   830ae:	60fb      	str	r3, [r7, #12]
   830b0:	e002      	b.n	830b8 <prvInsertBlockIntoFreeList+0x14>
   830b2:	68fb      	ldr	r3, [r7, #12]
   830b4:	681b      	ldr	r3, [r3, #0]
   830b6:	60fb      	str	r3, [r7, #12]
   830b8:	68fb      	ldr	r3, [r7, #12]
   830ba:	681a      	ldr	r2, [r3, #0]
   830bc:	687b      	ldr	r3, [r7, #4]
   830be:	429a      	cmp	r2, r3
   830c0:	d3f7      	bcc.n	830b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   830c2:	68fb      	ldr	r3, [r7, #12]
   830c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   830c6:	68fb      	ldr	r3, [r7, #12]
   830c8:	685b      	ldr	r3, [r3, #4]
   830ca:	68ba      	ldr	r2, [r7, #8]
   830cc:	441a      	add	r2, r3
   830ce:	687b      	ldr	r3, [r7, #4]
   830d0:	429a      	cmp	r2, r3
   830d2:	d108      	bne.n	830e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   830d4:	68fb      	ldr	r3, [r7, #12]
   830d6:	685a      	ldr	r2, [r3, #4]
   830d8:	687b      	ldr	r3, [r7, #4]
   830da:	685b      	ldr	r3, [r3, #4]
   830dc:	441a      	add	r2, r3
   830de:	68fb      	ldr	r3, [r7, #12]
   830e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   830e2:	68fb      	ldr	r3, [r7, #12]
   830e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   830e6:	687b      	ldr	r3, [r7, #4]
   830e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   830ea:	687b      	ldr	r3, [r7, #4]
   830ec:	685b      	ldr	r3, [r3, #4]
   830ee:	68ba      	ldr	r2, [r7, #8]
   830f0:	441a      	add	r2, r3
   830f2:	68fb      	ldr	r3, [r7, #12]
   830f4:	681b      	ldr	r3, [r3, #0]
   830f6:	429a      	cmp	r2, r3
   830f8:	d118      	bne.n	8312c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   830fa:	68fb      	ldr	r3, [r7, #12]
   830fc:	681a      	ldr	r2, [r3, #0]
   830fe:	4b14      	ldr	r3, [pc, #80]	; (83150 <prvInsertBlockIntoFreeList+0xac>)
   83100:	681b      	ldr	r3, [r3, #0]
   83102:	429a      	cmp	r2, r3
   83104:	d00d      	beq.n	83122 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   83106:	687b      	ldr	r3, [r7, #4]
   83108:	685a      	ldr	r2, [r3, #4]
   8310a:	68fb      	ldr	r3, [r7, #12]
   8310c:	681b      	ldr	r3, [r3, #0]
   8310e:	685b      	ldr	r3, [r3, #4]
   83110:	441a      	add	r2, r3
   83112:	687b      	ldr	r3, [r7, #4]
   83114:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   83116:	68fb      	ldr	r3, [r7, #12]
   83118:	681b      	ldr	r3, [r3, #0]
   8311a:	681a      	ldr	r2, [r3, #0]
   8311c:	687b      	ldr	r3, [r7, #4]
   8311e:	601a      	str	r2, [r3, #0]
   83120:	e008      	b.n	83134 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   83122:	4b0b      	ldr	r3, [pc, #44]	; (83150 <prvInsertBlockIntoFreeList+0xac>)
   83124:	681a      	ldr	r2, [r3, #0]
   83126:	687b      	ldr	r3, [r7, #4]
   83128:	601a      	str	r2, [r3, #0]
   8312a:	e003      	b.n	83134 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   8312c:	68fb      	ldr	r3, [r7, #12]
   8312e:	681a      	ldr	r2, [r3, #0]
   83130:	687b      	ldr	r3, [r7, #4]
   83132:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   83134:	68fa      	ldr	r2, [r7, #12]
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	429a      	cmp	r2, r3
   8313a:	d002      	beq.n	83142 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8313c:	68fb      	ldr	r3, [r7, #12]
   8313e:	687a      	ldr	r2, [r7, #4]
   83140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   83142:	3714      	adds	r7, #20
   83144:	46bd      	mov	sp, r7
   83146:	f85d 7b04 	ldr.w	r7, [sp], #4
   8314a:	4770      	bx	lr
   8314c:	2007a4f0 	.word	0x2007a4f0
   83150:	2007a4f8 	.word	0x2007a4f8

00083154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   83154:	b580      	push	{r7, lr}
   83156:	b084      	sub	sp, #16
   83158:	af00      	add	r7, sp, #0
   8315a:	6078      	str	r0, [r7, #4]
   8315c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8315e:	687b      	ldr	r3, [r7, #4]
   83160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   83162:	68fb      	ldr	r3, [r7, #12]
   83164:	2b00      	cmp	r3, #0
   83166:	d102      	bne.n	8316e <xQueueGenericReset+0x1a>
   83168:	4b26      	ldr	r3, [pc, #152]	; (83204 <xQueueGenericReset+0xb0>)
   8316a:	4798      	blx	r3
   8316c:	e7fe      	b.n	8316c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8316e:	4b26      	ldr	r3, [pc, #152]	; (83208 <xQueueGenericReset+0xb4>)
   83170:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   83172:	68fb      	ldr	r3, [r7, #12]
   83174:	681a      	ldr	r2, [r3, #0]
   83176:	68fb      	ldr	r3, [r7, #12]
   83178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8317a:	68f9      	ldr	r1, [r7, #12]
   8317c:	6c09      	ldr	r1, [r1, #64]	; 0x40
   8317e:	fb01 f303 	mul.w	r3, r1, r3
   83182:	441a      	add	r2, r3
   83184:	68fb      	ldr	r3, [r7, #12]
   83186:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   83188:	68fb      	ldr	r3, [r7, #12]
   8318a:	2200      	movs	r2, #0
   8318c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8318e:	68fb      	ldr	r3, [r7, #12]
   83190:	681a      	ldr	r2, [r3, #0]
   83192:	68fb      	ldr	r3, [r7, #12]
   83194:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   83196:	68fb      	ldr	r3, [r7, #12]
   83198:	681a      	ldr	r2, [r3, #0]
   8319a:	68fb      	ldr	r3, [r7, #12]
   8319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8319e:	3b01      	subs	r3, #1
   831a0:	68f9      	ldr	r1, [r7, #12]
   831a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
   831a4:	fb01 f303 	mul.w	r3, r1, r3
   831a8:	441a      	add	r2, r3
   831aa:	68fb      	ldr	r3, [r7, #12]
   831ac:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   831ae:	68fb      	ldr	r3, [r7, #12]
   831b0:	f04f 32ff 	mov.w	r2, #4294967295
   831b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   831b6:	68fb      	ldr	r3, [r7, #12]
   831b8:	f04f 32ff 	mov.w	r2, #4294967295
   831bc:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   831be:	683b      	ldr	r3, [r7, #0]
   831c0:	2b00      	cmp	r3, #0
   831c2:	d10e      	bne.n	831e2 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   831c4:	68fb      	ldr	r3, [r7, #12]
   831c6:	691b      	ldr	r3, [r3, #16]
   831c8:	2b00      	cmp	r3, #0
   831ca:	d014      	beq.n	831f6 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   831cc:	68fb      	ldr	r3, [r7, #12]
   831ce:	3310      	adds	r3, #16
   831d0:	4618      	mov	r0, r3
   831d2:	4b0e      	ldr	r3, [pc, #56]	; (8320c <xQueueGenericReset+0xb8>)
   831d4:	4798      	blx	r3
   831d6:	4603      	mov	r3, r0
   831d8:	2b01      	cmp	r3, #1
   831da:	d10c      	bne.n	831f6 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   831dc:	4b0c      	ldr	r3, [pc, #48]	; (83210 <xQueueGenericReset+0xbc>)
   831de:	4798      	blx	r3
   831e0:	e009      	b.n	831f6 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   831e2:	68fb      	ldr	r3, [r7, #12]
   831e4:	3310      	adds	r3, #16
   831e6:	4618      	mov	r0, r3
   831e8:	4b0a      	ldr	r3, [pc, #40]	; (83214 <xQueueGenericReset+0xc0>)
   831ea:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   831ec:	68fb      	ldr	r3, [r7, #12]
   831ee:	3324      	adds	r3, #36	; 0x24
   831f0:	4618      	mov	r0, r3
   831f2:	4b08      	ldr	r3, [pc, #32]	; (83214 <xQueueGenericReset+0xc0>)
   831f4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   831f6:	4b08      	ldr	r3, [pc, #32]	; (83218 <xQueueGenericReset+0xc4>)
   831f8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   831fa:	2301      	movs	r3, #1
}
   831fc:	4618      	mov	r0, r3
   831fe:	3710      	adds	r7, #16
   83200:	46bd      	mov	sp, r7
   83202:	bd80      	pop	{r7, pc}
   83204:	00082cd5 	.word	0x00082cd5
   83208:	00082c59 	.word	0x00082c59
   8320c:	00083841 	.word	0x00083841
   83210:	00082c39 	.word	0x00082c39
   83214:	00082b39 	.word	0x00082b39
   83218:	00082c9d 	.word	0x00082c9d

0008321c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   8321c:	b580      	push	{r7, lr}
   8321e:	b088      	sub	sp, #32
   83220:	af00      	add	r7, sp, #0
   83222:	60f8      	str	r0, [r7, #12]
   83224:	60b9      	str	r1, [r7, #8]
   83226:	4613      	mov	r3, r2
   83228:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   8322a:	2300      	movs	r3, #0
   8322c:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   8322e:	68fb      	ldr	r3, [r7, #12]
   83230:	2b00      	cmp	r3, #0
   83232:	d026      	beq.n	83282 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   83234:	204c      	movs	r0, #76	; 0x4c
   83236:	4b18      	ldr	r3, [pc, #96]	; (83298 <xQueueGenericCreate+0x7c>)
   83238:	4798      	blx	r3
   8323a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   8323c:	69bb      	ldr	r3, [r7, #24]
   8323e:	2b00      	cmp	r3, #0
   83240:	d01f      	beq.n	83282 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83242:	68fb      	ldr	r3, [r7, #12]
   83244:	68ba      	ldr	r2, [r7, #8]
   83246:	fb02 f303 	mul.w	r3, r2, r3
   8324a:	3301      	adds	r3, #1
   8324c:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   8324e:	6978      	ldr	r0, [r7, #20]
   83250:	4b11      	ldr	r3, [pc, #68]	; (83298 <xQueueGenericCreate+0x7c>)
   83252:	4798      	blx	r3
   83254:	4602      	mov	r2, r0
   83256:	69bb      	ldr	r3, [r7, #24]
   83258:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   8325a:	69bb      	ldr	r3, [r7, #24]
   8325c:	681b      	ldr	r3, [r3, #0]
   8325e:	2b00      	cmp	r3, #0
   83260:	d00c      	beq.n	8327c <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   83262:	69bb      	ldr	r3, [r7, #24]
   83264:	68fa      	ldr	r2, [r7, #12]
   83266:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   83268:	69bb      	ldr	r3, [r7, #24]
   8326a:	68ba      	ldr	r2, [r7, #8]
   8326c:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8326e:	69b8      	ldr	r0, [r7, #24]
   83270:	2101      	movs	r1, #1
   83272:	4b0a      	ldr	r3, [pc, #40]	; (8329c <xQueueGenericCreate+0x80>)
   83274:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   83276:	69bb      	ldr	r3, [r7, #24]
   83278:	61fb      	str	r3, [r7, #28]
   8327a:	e002      	b.n	83282 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   8327c:	69b8      	ldr	r0, [r7, #24]
   8327e:	4b08      	ldr	r3, [pc, #32]	; (832a0 <xQueueGenericCreate+0x84>)
   83280:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   83282:	69fb      	ldr	r3, [r7, #28]
   83284:	2b00      	cmp	r3, #0
   83286:	d102      	bne.n	8328e <xQueueGenericCreate+0x72>
   83288:	4b06      	ldr	r3, [pc, #24]	; (832a4 <xQueueGenericCreate+0x88>)
   8328a:	4798      	blx	r3
   8328c:	e7fe      	b.n	8328c <xQueueGenericCreate+0x70>

	return xReturn;
   8328e:	69fb      	ldr	r3, [r7, #28]
}
   83290:	4618      	mov	r0, r3
   83292:	3720      	adds	r7, #32
   83294:	46bd      	mov	sp, r7
   83296:	bd80      	pop	{r7, pc}
   83298:	00082dc5 	.word	0x00082dc5
   8329c:	00083155 	.word	0x00083155
   832a0:	00082f3d 	.word	0x00082f3d
   832a4:	00082cd5 	.word	0x00082cd5

000832a8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   832a8:	b580      	push	{r7, lr}
   832aa:	b088      	sub	sp, #32
   832ac:	af00      	add	r7, sp, #0
   832ae:	60f8      	str	r0, [r7, #12]
   832b0:	60b9      	str	r1, [r7, #8]
   832b2:	607a      	str	r2, [r7, #4]
   832b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   832b6:	68fb      	ldr	r3, [r7, #12]
   832b8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   832ba:	69bb      	ldr	r3, [r7, #24]
   832bc:	2b00      	cmp	r3, #0
   832be:	d102      	bne.n	832c6 <xQueueGenericSendFromISR+0x1e>
   832c0:	4b33      	ldr	r3, [pc, #204]	; (83390 <xQueueGenericSendFromISR+0xe8>)
   832c2:	4798      	blx	r3
   832c4:	e7fe      	b.n	832c4 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   832c6:	68bb      	ldr	r3, [r7, #8]
   832c8:	2b00      	cmp	r3, #0
   832ca:	d103      	bne.n	832d4 <xQueueGenericSendFromISR+0x2c>
   832cc:	69bb      	ldr	r3, [r7, #24]
   832ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   832d0:	2b00      	cmp	r3, #0
   832d2:	d101      	bne.n	832d8 <xQueueGenericSendFromISR+0x30>
   832d4:	2301      	movs	r3, #1
   832d6:	e000      	b.n	832da <xQueueGenericSendFromISR+0x32>
   832d8:	2300      	movs	r3, #0
   832da:	2b00      	cmp	r3, #0
   832dc:	d102      	bne.n	832e4 <xQueueGenericSendFromISR+0x3c>
   832de:	4b2c      	ldr	r3, [pc, #176]	; (83390 <xQueueGenericSendFromISR+0xe8>)
   832e0:	4798      	blx	r3
   832e2:	e7fe      	b.n	832e2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   832e4:	683b      	ldr	r3, [r7, #0]
   832e6:	2b02      	cmp	r3, #2
   832e8:	d103      	bne.n	832f2 <xQueueGenericSendFromISR+0x4a>
   832ea:	69bb      	ldr	r3, [r7, #24]
   832ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   832ee:	2b01      	cmp	r3, #1
   832f0:	d101      	bne.n	832f6 <xQueueGenericSendFromISR+0x4e>
   832f2:	2301      	movs	r3, #1
   832f4:	e000      	b.n	832f8 <xQueueGenericSendFromISR+0x50>
   832f6:	2300      	movs	r3, #0
   832f8:	2b00      	cmp	r3, #0
   832fa:	d102      	bne.n	83302 <xQueueGenericSendFromISR+0x5a>
   832fc:	4b24      	ldr	r3, [pc, #144]	; (83390 <xQueueGenericSendFromISR+0xe8>)
   832fe:	4798      	blx	r3
   83300:	e7fe      	b.n	83300 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   83302:	4b24      	ldr	r3, [pc, #144]	; (83394 <xQueueGenericSendFromISR+0xec>)
   83304:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   83306:	4b22      	ldr	r3, [pc, #136]	; (83390 <xQueueGenericSendFromISR+0xe8>)
   83308:	4798      	blx	r3
   8330a:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   8330c:	69bb      	ldr	r3, [r7, #24]
   8330e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83310:	69bb      	ldr	r3, [r7, #24]
   83312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83314:	429a      	cmp	r2, r3
   83316:	d302      	bcc.n	8331e <xQueueGenericSendFromISR+0x76>
   83318:	683b      	ldr	r3, [r7, #0]
   8331a:	2b02      	cmp	r3, #2
   8331c:	d12d      	bne.n	8337a <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   8331e:	69b8      	ldr	r0, [r7, #24]
   83320:	68b9      	ldr	r1, [r7, #8]
   83322:	683a      	ldr	r2, [r7, #0]
   83324:	4b1c      	ldr	r3, [pc, #112]	; (83398 <xQueueGenericSendFromISR+0xf0>)
   83326:	4798      	blx	r3
   83328:	4603      	mov	r3, r0
   8332a:	2b00      	cmp	r3, #0
   8332c:	d005      	beq.n	8333a <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   8332e:	687b      	ldr	r3, [r7, #4]
   83330:	2b00      	cmp	r3, #0
   83332:	d002      	beq.n	8333a <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   83334:	687b      	ldr	r3, [r7, #4]
   83336:	2201      	movs	r2, #1
   83338:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   8333a:	69bb      	ldr	r3, [r7, #24]
   8333c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8333e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83342:	d112      	bne.n	8336a <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83344:	69bb      	ldr	r3, [r7, #24]
   83346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83348:	2b00      	cmp	r3, #0
   8334a:	d013      	beq.n	83374 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8334c:	69bb      	ldr	r3, [r7, #24]
   8334e:	3324      	adds	r3, #36	; 0x24
   83350:	4618      	mov	r0, r3
   83352:	4b12      	ldr	r3, [pc, #72]	; (8339c <xQueueGenericSendFromISR+0xf4>)
   83354:	4798      	blx	r3
   83356:	4603      	mov	r3, r0
   83358:	2b00      	cmp	r3, #0
   8335a:	d00b      	beq.n	83374 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   8335c:	687b      	ldr	r3, [r7, #4]
   8335e:	2b00      	cmp	r3, #0
   83360:	d008      	beq.n	83374 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   83362:	687b      	ldr	r3, [r7, #4]
   83364:	2201      	movs	r2, #1
   83366:	601a      	str	r2, [r3, #0]
   83368:	e004      	b.n	83374 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8336a:	69bb      	ldr	r3, [r7, #24]
   8336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8336e:	1c5a      	adds	r2, r3, #1
   83370:	69bb      	ldr	r3, [r7, #24]
   83372:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   83374:	2301      	movs	r3, #1
   83376:	61fb      	str	r3, [r7, #28]
   83378:	e001      	b.n	8337e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   8337a:	2300      	movs	r3, #0
   8337c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8337e:	6978      	ldr	r0, [r7, #20]
   83380:	4b07      	ldr	r3, [pc, #28]	; (833a0 <xQueueGenericSendFromISR+0xf8>)
   83382:	4798      	blx	r3

	return xReturn;
   83384:	69fb      	ldr	r3, [r7, #28]
}
   83386:	4618      	mov	r0, r3
   83388:	3720      	adds	r7, #32
   8338a:	46bd      	mov	sp, r7
   8338c:	bd80      	pop	{r7, pc}
   8338e:	bf00      	nop
   83390:	00082cd5 	.word	0x00082cd5
   83394:	00082d69 	.word	0x00082d69
   83398:	000833a5 	.word	0x000833a5
   8339c:	00083841 	.word	0x00083841
   833a0:	00082ce9 	.word	0x00082ce9

000833a4 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   833a4:	b580      	push	{r7, lr}
   833a6:	b086      	sub	sp, #24
   833a8:	af00      	add	r7, sp, #0
   833aa:	60f8      	str	r0, [r7, #12]
   833ac:	60b9      	str	r1, [r7, #8]
   833ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   833b0:	2300      	movs	r3, #0
   833b2:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   833b4:	68fb      	ldr	r3, [r7, #12]
   833b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   833b8:	2b00      	cmp	r3, #0
   833ba:	d10d      	bne.n	833d8 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   833bc:	68fb      	ldr	r3, [r7, #12]
   833be:	681b      	ldr	r3, [r3, #0]
   833c0:	2b00      	cmp	r3, #0
   833c2:	d152      	bne.n	8346a <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   833c4:	68fb      	ldr	r3, [r7, #12]
   833c6:	685b      	ldr	r3, [r3, #4]
   833c8:	4618      	mov	r0, r3
   833ca:	4b2d      	ldr	r3, [pc, #180]	; (83480 <prvCopyDataToQueue+0xdc>)
   833cc:	4798      	blx	r3
   833ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   833d0:	68fb      	ldr	r3, [r7, #12]
   833d2:	2200      	movs	r2, #0
   833d4:	605a      	str	r2, [r3, #4]
   833d6:	e048      	b.n	8346a <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   833d8:	687b      	ldr	r3, [r7, #4]
   833da:	2b00      	cmp	r3, #0
   833dc:	d11a      	bne.n	83414 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   833de:	68fb      	ldr	r3, [r7, #12]
   833e0:	689a      	ldr	r2, [r3, #8]
   833e2:	68fb      	ldr	r3, [r7, #12]
   833e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   833e6:	4610      	mov	r0, r2
   833e8:	68b9      	ldr	r1, [r7, #8]
   833ea:	461a      	mov	r2, r3
   833ec:	4b25      	ldr	r3, [pc, #148]	; (83484 <prvCopyDataToQueue+0xe0>)
   833ee:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   833f0:	68fb      	ldr	r3, [r7, #12]
   833f2:	689a      	ldr	r2, [r3, #8]
   833f4:	68fb      	ldr	r3, [r7, #12]
   833f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   833f8:	441a      	add	r2, r3
   833fa:	68fb      	ldr	r3, [r7, #12]
   833fc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   833fe:	68fb      	ldr	r3, [r7, #12]
   83400:	689a      	ldr	r2, [r3, #8]
   83402:	68fb      	ldr	r3, [r7, #12]
   83404:	685b      	ldr	r3, [r3, #4]
   83406:	429a      	cmp	r2, r3
   83408:	d32f      	bcc.n	8346a <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8340a:	68fb      	ldr	r3, [r7, #12]
   8340c:	681a      	ldr	r2, [r3, #0]
   8340e:	68fb      	ldr	r3, [r7, #12]
   83410:	609a      	str	r2, [r3, #8]
   83412:	e02a      	b.n	8346a <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83414:	68fb      	ldr	r3, [r7, #12]
   83416:	68da      	ldr	r2, [r3, #12]
   83418:	68fb      	ldr	r3, [r7, #12]
   8341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8341c:	4610      	mov	r0, r2
   8341e:	68b9      	ldr	r1, [r7, #8]
   83420:	461a      	mov	r2, r3
   83422:	4b18      	ldr	r3, [pc, #96]	; (83484 <prvCopyDataToQueue+0xe0>)
   83424:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83426:	68fb      	ldr	r3, [r7, #12]
   83428:	68da      	ldr	r2, [r3, #12]
   8342a:	68fb      	ldr	r3, [r7, #12]
   8342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8342e:	425b      	negs	r3, r3
   83430:	441a      	add	r2, r3
   83432:	68fb      	ldr	r3, [r7, #12]
   83434:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83436:	68fb      	ldr	r3, [r7, #12]
   83438:	68da      	ldr	r2, [r3, #12]
   8343a:	68fb      	ldr	r3, [r7, #12]
   8343c:	681b      	ldr	r3, [r3, #0]
   8343e:	429a      	cmp	r2, r3
   83440:	d207      	bcs.n	83452 <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83442:	68fb      	ldr	r3, [r7, #12]
   83444:	685a      	ldr	r2, [r3, #4]
   83446:	68fb      	ldr	r3, [r7, #12]
   83448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8344a:	425b      	negs	r3, r3
   8344c:	441a      	add	r2, r3
   8344e:	68fb      	ldr	r3, [r7, #12]
   83450:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   83452:	687b      	ldr	r3, [r7, #4]
   83454:	2b02      	cmp	r3, #2
   83456:	d108      	bne.n	8346a <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83458:	68fb      	ldr	r3, [r7, #12]
   8345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8345c:	2b00      	cmp	r3, #0
   8345e:	d004      	beq.n	8346a <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   83460:	68fb      	ldr	r3, [r7, #12]
   83462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83464:	1e5a      	subs	r2, r3, #1
   83466:	68fb      	ldr	r3, [r7, #12]
   83468:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   8346a:	68fb      	ldr	r3, [r7, #12]
   8346c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8346e:	1c5a      	adds	r2, r3, #1
   83470:	68fb      	ldr	r3, [r7, #12]
   83472:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83474:	697b      	ldr	r3, [r7, #20]
}
   83476:	4618      	mov	r0, r3
   83478:	3718      	adds	r7, #24
   8347a:	46bd      	mov	sp, r7
   8347c:	bd80      	pop	{r7, pc}
   8347e:	bf00      	nop
   83480:	00083949 	.word	0x00083949
   83484:	00084ca9 	.word	0x00084ca9

00083488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   83488:	b480      	push	{r7}
   8348a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   8348c:	4b04      	ldr	r3, [pc, #16]	; (834a0 <vTaskSuspendAll+0x18>)
   8348e:	681b      	ldr	r3, [r3, #0]
   83490:	1c5a      	adds	r2, r3, #1
   83492:	4b03      	ldr	r3, [pc, #12]	; (834a0 <vTaskSuspendAll+0x18>)
   83494:	601a      	str	r2, [r3, #0]
}
   83496:	46bd      	mov	sp, r7
   83498:	f85d 7b04 	ldr.w	r7, [sp], #4
   8349c:	4770      	bx	lr
   8349e:	bf00      	nop
   834a0:	2007a5a4 	.word	0x2007a5a4

000834a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   834a4:	b580      	push	{r7, lr}
   834a6:	b082      	sub	sp, #8
   834a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   834aa:	2300      	movs	r3, #0
   834ac:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   834ae:	4b37      	ldr	r3, [pc, #220]	; (8358c <xTaskResumeAll+0xe8>)
   834b0:	681b      	ldr	r3, [r3, #0]
   834b2:	2b00      	cmp	r3, #0
   834b4:	d102      	bne.n	834bc <xTaskResumeAll+0x18>
   834b6:	4b36      	ldr	r3, [pc, #216]	; (83590 <xTaskResumeAll+0xec>)
   834b8:	4798      	blx	r3
   834ba:	e7fe      	b.n	834ba <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   834bc:	4b35      	ldr	r3, [pc, #212]	; (83594 <xTaskResumeAll+0xf0>)
   834be:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   834c0:	4b32      	ldr	r3, [pc, #200]	; (8358c <xTaskResumeAll+0xe8>)
   834c2:	681b      	ldr	r3, [r3, #0]
   834c4:	1e5a      	subs	r2, r3, #1
   834c6:	4b31      	ldr	r3, [pc, #196]	; (8358c <xTaskResumeAll+0xe8>)
   834c8:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   834ca:	4b30      	ldr	r3, [pc, #192]	; (8358c <xTaskResumeAll+0xe8>)
   834cc:	681b      	ldr	r3, [r3, #0]
   834ce:	2b00      	cmp	r3, #0
   834d0:	d155      	bne.n	8357e <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   834d2:	4b31      	ldr	r3, [pc, #196]	; (83598 <xTaskResumeAll+0xf4>)
   834d4:	681b      	ldr	r3, [r3, #0]
   834d6:	2b00      	cmp	r3, #0
   834d8:	d051      	beq.n	8357e <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   834da:	e02e      	b.n	8353a <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   834dc:	4b2f      	ldr	r3, [pc, #188]	; (8359c <xTaskResumeAll+0xf8>)
   834de:	68db      	ldr	r3, [r3, #12]
   834e0:	68db      	ldr	r3, [r3, #12]
   834e2:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   834e4:	683b      	ldr	r3, [r7, #0]
   834e6:	3318      	adds	r3, #24
   834e8:	4618      	mov	r0, r3
   834ea:	4b2d      	ldr	r3, [pc, #180]	; (835a0 <xTaskResumeAll+0xfc>)
   834ec:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   834ee:	683b      	ldr	r3, [r7, #0]
   834f0:	3304      	adds	r3, #4
   834f2:	4618      	mov	r0, r3
   834f4:	4b2a      	ldr	r3, [pc, #168]	; (835a0 <xTaskResumeAll+0xfc>)
   834f6:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   834f8:	683b      	ldr	r3, [r7, #0]
   834fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   834fc:	2201      	movs	r2, #1
   834fe:	409a      	lsls	r2, r3
   83500:	4b28      	ldr	r3, [pc, #160]	; (835a4 <xTaskResumeAll+0x100>)
   83502:	681b      	ldr	r3, [r3, #0]
   83504:	431a      	orrs	r2, r3
   83506:	4b27      	ldr	r3, [pc, #156]	; (835a4 <xTaskResumeAll+0x100>)
   83508:	601a      	str	r2, [r3, #0]
   8350a:	683b      	ldr	r3, [r7, #0]
   8350c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8350e:	4613      	mov	r3, r2
   83510:	009b      	lsls	r3, r3, #2
   83512:	4413      	add	r3, r2
   83514:	009b      	lsls	r3, r3, #2
   83516:	4a24      	ldr	r2, [pc, #144]	; (835a8 <xTaskResumeAll+0x104>)
   83518:	441a      	add	r2, r3
   8351a:	683b      	ldr	r3, [r7, #0]
   8351c:	3304      	adds	r3, #4
   8351e:	4610      	mov	r0, r2
   83520:	4619      	mov	r1, r3
   83522:	4b22      	ldr	r3, [pc, #136]	; (835ac <xTaskResumeAll+0x108>)
   83524:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83526:	683b      	ldr	r3, [r7, #0]
   83528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8352a:	4b21      	ldr	r3, [pc, #132]	; (835b0 <xTaskResumeAll+0x10c>)
   8352c:	681b      	ldr	r3, [r3, #0]
   8352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83530:	429a      	cmp	r2, r3
   83532:	d302      	bcc.n	8353a <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   83534:	4b1f      	ldr	r3, [pc, #124]	; (835b4 <xTaskResumeAll+0x110>)
   83536:	2201      	movs	r2, #1
   83538:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   8353a:	4b18      	ldr	r3, [pc, #96]	; (8359c <xTaskResumeAll+0xf8>)
   8353c:	681b      	ldr	r3, [r3, #0]
   8353e:	2b00      	cmp	r3, #0
   83540:	d1cc      	bne.n	834dc <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   83542:	4b1d      	ldr	r3, [pc, #116]	; (835b8 <xTaskResumeAll+0x114>)
   83544:	681b      	ldr	r3, [r3, #0]
   83546:	2b00      	cmp	r3, #0
   83548:	d011      	beq.n	8356e <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   8354a:	e00c      	b.n	83566 <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   8354c:	4b1b      	ldr	r3, [pc, #108]	; (835bc <xTaskResumeAll+0x118>)
   8354e:	4798      	blx	r3
   83550:	4603      	mov	r3, r0
   83552:	2b00      	cmp	r3, #0
   83554:	d002      	beq.n	8355c <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   83556:	4b17      	ldr	r3, [pc, #92]	; (835b4 <xTaskResumeAll+0x110>)
   83558:	2201      	movs	r2, #1
   8355a:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   8355c:	4b16      	ldr	r3, [pc, #88]	; (835b8 <xTaskResumeAll+0x114>)
   8355e:	681b      	ldr	r3, [r3, #0]
   83560:	1e5a      	subs	r2, r3, #1
   83562:	4b15      	ldr	r3, [pc, #84]	; (835b8 <xTaskResumeAll+0x114>)
   83564:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   83566:	4b14      	ldr	r3, [pc, #80]	; (835b8 <xTaskResumeAll+0x114>)
   83568:	681b      	ldr	r3, [r3, #0]
   8356a:	2b00      	cmp	r3, #0
   8356c:	d1ee      	bne.n	8354c <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   8356e:	4b11      	ldr	r3, [pc, #68]	; (835b4 <xTaskResumeAll+0x110>)
   83570:	681b      	ldr	r3, [r3, #0]
   83572:	2b01      	cmp	r3, #1
   83574:	d103      	bne.n	8357e <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   83576:	2301      	movs	r3, #1
   83578:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   8357a:	4b11      	ldr	r3, [pc, #68]	; (835c0 <xTaskResumeAll+0x11c>)
   8357c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   8357e:	4b11      	ldr	r3, [pc, #68]	; (835c4 <xTaskResumeAll+0x120>)
   83580:	4798      	blx	r3

	return xAlreadyYielded;
   83582:	687b      	ldr	r3, [r7, #4]
}
   83584:	4618      	mov	r0, r3
   83586:	3708      	adds	r7, #8
   83588:	46bd      	mov	sp, r7
   8358a:	bd80      	pop	{r7, pc}
   8358c:	2007a5a4 	.word	0x2007a5a4
   83590:	00082cd5 	.word	0x00082cd5
   83594:	00082c59 	.word	0x00082c59
   83598:	2007a58c 	.word	0x2007a58c
   8359c:	2007a578 	.word	0x2007a578
   835a0:	00082bc1 	.word	0x00082bc1
   835a4:	2007a594 	.word	0x2007a594
   835a8:	2007a50c 	.word	0x2007a50c
   835ac:	00082b79 	.word	0x00082b79
   835b0:	2007a508 	.word	0x2007a508
   835b4:	2007a59c 	.word	0x2007a59c
   835b8:	2007a598 	.word	0x2007a598
   835bc:	000835c9 	.word	0x000835c9
   835c0:	00082c39 	.word	0x00082c39
   835c4:	00082c9d 	.word	0x00082c9d

000835c8 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   835c8:	b580      	push	{r7, lr}
   835ca:	b086      	sub	sp, #24
   835cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   835ce:	2300      	movs	r3, #0
   835d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   835d2:	4b4d      	ldr	r3, [pc, #308]	; (83708 <xTaskIncrementTick+0x140>)
   835d4:	681b      	ldr	r3, [r3, #0]
   835d6:	2b00      	cmp	r3, #0
   835d8:	f040 8086 	bne.w	836e8 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   835dc:	4b4b      	ldr	r3, [pc, #300]	; (8370c <xTaskIncrementTick+0x144>)
   835de:	681b      	ldr	r3, [r3, #0]
   835e0:	1c5a      	adds	r2, r3, #1
   835e2:	4b4a      	ldr	r3, [pc, #296]	; (8370c <xTaskIncrementTick+0x144>)
   835e4:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   835e6:	4b49      	ldr	r3, [pc, #292]	; (8370c <xTaskIncrementTick+0x144>)
   835e8:	681b      	ldr	r3, [r3, #0]
   835ea:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   835ec:	693b      	ldr	r3, [r7, #16]
   835ee:	2b00      	cmp	r3, #0
   835f0:	d118      	bne.n	83624 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   835f2:	4b47      	ldr	r3, [pc, #284]	; (83710 <xTaskIncrementTick+0x148>)
   835f4:	681b      	ldr	r3, [r3, #0]
   835f6:	681b      	ldr	r3, [r3, #0]
   835f8:	2b00      	cmp	r3, #0
   835fa:	d002      	beq.n	83602 <xTaskIncrementTick+0x3a>
   835fc:	4b45      	ldr	r3, [pc, #276]	; (83714 <xTaskIncrementTick+0x14c>)
   835fe:	4798      	blx	r3
   83600:	e7fe      	b.n	83600 <xTaskIncrementTick+0x38>
   83602:	4b43      	ldr	r3, [pc, #268]	; (83710 <xTaskIncrementTick+0x148>)
   83604:	681b      	ldr	r3, [r3, #0]
   83606:	60fb      	str	r3, [r7, #12]
   83608:	4b43      	ldr	r3, [pc, #268]	; (83718 <xTaskIncrementTick+0x150>)
   8360a:	681a      	ldr	r2, [r3, #0]
   8360c:	4b40      	ldr	r3, [pc, #256]	; (83710 <xTaskIncrementTick+0x148>)
   8360e:	601a      	str	r2, [r3, #0]
   83610:	4b41      	ldr	r3, [pc, #260]	; (83718 <xTaskIncrementTick+0x150>)
   83612:	68fa      	ldr	r2, [r7, #12]
   83614:	601a      	str	r2, [r3, #0]
   83616:	4b41      	ldr	r3, [pc, #260]	; (8371c <xTaskIncrementTick+0x154>)
   83618:	681b      	ldr	r3, [r3, #0]
   8361a:	1c5a      	adds	r2, r3, #1
   8361c:	4b3f      	ldr	r3, [pc, #252]	; (8371c <xTaskIncrementTick+0x154>)
   8361e:	601a      	str	r2, [r3, #0]
   83620:	4b3f      	ldr	r3, [pc, #252]	; (83720 <xTaskIncrementTick+0x158>)
   83622:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   83624:	4b3f      	ldr	r3, [pc, #252]	; (83724 <xTaskIncrementTick+0x15c>)
   83626:	681b      	ldr	r3, [r3, #0]
   83628:	693a      	ldr	r2, [r7, #16]
   8362a:	429a      	cmp	r2, r3
   8362c:	d34d      	bcc.n	836ca <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8362e:	4b38      	ldr	r3, [pc, #224]	; (83710 <xTaskIncrementTick+0x148>)
   83630:	681b      	ldr	r3, [r3, #0]
   83632:	681b      	ldr	r3, [r3, #0]
   83634:	2b00      	cmp	r3, #0
   83636:	d101      	bne.n	8363c <xTaskIncrementTick+0x74>
   83638:	2301      	movs	r3, #1
   8363a:	e000      	b.n	8363e <xTaskIncrementTick+0x76>
   8363c:	2300      	movs	r3, #0
   8363e:	2b00      	cmp	r3, #0
   83640:	d004      	beq.n	8364c <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   83642:	4b38      	ldr	r3, [pc, #224]	; (83724 <xTaskIncrementTick+0x15c>)
   83644:	f04f 32ff 	mov.w	r2, #4294967295
   83648:	601a      	str	r2, [r3, #0]
						break;
   8364a:	e03e      	b.n	836ca <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8364c:	4b30      	ldr	r3, [pc, #192]	; (83710 <xTaskIncrementTick+0x148>)
   8364e:	681b      	ldr	r3, [r3, #0]
   83650:	68db      	ldr	r3, [r3, #12]
   83652:	68db      	ldr	r3, [r3, #12]
   83654:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   83656:	68bb      	ldr	r3, [r7, #8]
   83658:	685b      	ldr	r3, [r3, #4]
   8365a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   8365c:	693a      	ldr	r2, [r7, #16]
   8365e:	687b      	ldr	r3, [r7, #4]
   83660:	429a      	cmp	r2, r3
   83662:	d203      	bcs.n	8366c <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   83664:	4b2f      	ldr	r3, [pc, #188]	; (83724 <xTaskIncrementTick+0x15c>)
   83666:	687a      	ldr	r2, [r7, #4]
   83668:	601a      	str	r2, [r3, #0]
							break;
   8366a:	e02e      	b.n	836ca <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8366c:	68bb      	ldr	r3, [r7, #8]
   8366e:	3304      	adds	r3, #4
   83670:	4618      	mov	r0, r3
   83672:	4b2d      	ldr	r3, [pc, #180]	; (83728 <xTaskIncrementTick+0x160>)
   83674:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   83676:	68bb      	ldr	r3, [r7, #8]
   83678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8367a:	2b00      	cmp	r3, #0
   8367c:	d004      	beq.n	83688 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8367e:	68bb      	ldr	r3, [r7, #8]
   83680:	3318      	adds	r3, #24
   83682:	4618      	mov	r0, r3
   83684:	4b28      	ldr	r3, [pc, #160]	; (83728 <xTaskIncrementTick+0x160>)
   83686:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   83688:	68bb      	ldr	r3, [r7, #8]
   8368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8368c:	2201      	movs	r2, #1
   8368e:	409a      	lsls	r2, r3
   83690:	4b26      	ldr	r3, [pc, #152]	; (8372c <xTaskIncrementTick+0x164>)
   83692:	681b      	ldr	r3, [r3, #0]
   83694:	431a      	orrs	r2, r3
   83696:	4b25      	ldr	r3, [pc, #148]	; (8372c <xTaskIncrementTick+0x164>)
   83698:	601a      	str	r2, [r3, #0]
   8369a:	68bb      	ldr	r3, [r7, #8]
   8369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8369e:	4613      	mov	r3, r2
   836a0:	009b      	lsls	r3, r3, #2
   836a2:	4413      	add	r3, r2
   836a4:	009b      	lsls	r3, r3, #2
   836a6:	4a22      	ldr	r2, [pc, #136]	; (83730 <xTaskIncrementTick+0x168>)
   836a8:	441a      	add	r2, r3
   836aa:	68bb      	ldr	r3, [r7, #8]
   836ac:	3304      	adds	r3, #4
   836ae:	4610      	mov	r0, r2
   836b0:	4619      	mov	r1, r3
   836b2:	4b20      	ldr	r3, [pc, #128]	; (83734 <xTaskIncrementTick+0x16c>)
   836b4:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   836b6:	68bb      	ldr	r3, [r7, #8]
   836b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   836ba:	4b1f      	ldr	r3, [pc, #124]	; (83738 <xTaskIncrementTick+0x170>)
   836bc:	681b      	ldr	r3, [r3, #0]
   836be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   836c0:	429a      	cmp	r2, r3
   836c2:	d301      	bcc.n	836c8 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   836c4:	2301      	movs	r3, #1
   836c6:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   836c8:	e7b1      	b.n	8362e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   836ca:	4b1b      	ldr	r3, [pc, #108]	; (83738 <xTaskIncrementTick+0x170>)
   836cc:	681b      	ldr	r3, [r3, #0]
   836ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   836d0:	4917      	ldr	r1, [pc, #92]	; (83730 <xTaskIncrementTick+0x168>)
   836d2:	4613      	mov	r3, r2
   836d4:	009b      	lsls	r3, r3, #2
   836d6:	4413      	add	r3, r2
   836d8:	009b      	lsls	r3, r3, #2
   836da:	440b      	add	r3, r1
   836dc:	681b      	ldr	r3, [r3, #0]
   836de:	2b01      	cmp	r3, #1
   836e0:	d907      	bls.n	836f2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   836e2:	2301      	movs	r3, #1
   836e4:	617b      	str	r3, [r7, #20]
   836e6:	e004      	b.n	836f2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   836e8:	4b14      	ldr	r3, [pc, #80]	; (8373c <xTaskIncrementTick+0x174>)
   836ea:	681b      	ldr	r3, [r3, #0]
   836ec:	1c5a      	adds	r2, r3, #1
   836ee:	4b13      	ldr	r3, [pc, #76]	; (8373c <xTaskIncrementTick+0x174>)
   836f0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   836f2:	4b13      	ldr	r3, [pc, #76]	; (83740 <xTaskIncrementTick+0x178>)
   836f4:	681b      	ldr	r3, [r3, #0]
   836f6:	2b00      	cmp	r3, #0
   836f8:	d001      	beq.n	836fe <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   836fa:	2301      	movs	r3, #1
   836fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   836fe:	697b      	ldr	r3, [r7, #20]
}
   83700:	4618      	mov	r0, r3
   83702:	3718      	adds	r7, #24
   83704:	46bd      	mov	sp, r7
   83706:	bd80      	pop	{r7, pc}
   83708:	2007a5a4 	.word	0x2007a5a4
   8370c:	2007a590 	.word	0x2007a590
   83710:	2007a570 	.word	0x2007a570
   83714:	00082cd5 	.word	0x00082cd5
   83718:	2007a574 	.word	0x2007a574
   8371c:	2007a5a0 	.word	0x2007a5a0
   83720:	00083901 	.word	0x00083901
   83724:	20070008 	.word	0x20070008
   83728:	00082bc1 	.word	0x00082bc1
   8372c:	2007a594 	.word	0x2007a594
   83730:	2007a50c 	.word	0x2007a50c
   83734:	00082b79 	.word	0x00082b79
   83738:	2007a508 	.word	0x2007a508
   8373c:	2007a598 	.word	0x2007a598
   83740:	2007a59c 	.word	0x2007a59c

00083744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   83744:	b580      	push	{r7, lr}
   83746:	b084      	sub	sp, #16
   83748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   8374a:	4b34      	ldr	r3, [pc, #208]	; (8381c <vTaskSwitchContext+0xd8>)
   8374c:	681b      	ldr	r3, [r3, #0]
   8374e:	2b00      	cmp	r3, #0
   83750:	d003      	beq.n	8375a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   83752:	4b33      	ldr	r3, [pc, #204]	; (83820 <vTaskSwitchContext+0xdc>)
   83754:	2201      	movs	r2, #1
   83756:	601a      	str	r2, [r3, #0]
   83758:	e05c      	b.n	83814 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   8375a:	4b31      	ldr	r3, [pc, #196]	; (83820 <vTaskSwitchContext+0xdc>)
   8375c:	2200      	movs	r2, #0
   8375e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   83760:	4b30      	ldr	r3, [pc, #192]	; (83824 <vTaskSwitchContext+0xe0>)
   83762:	681b      	ldr	r3, [r3, #0]
   83764:	681a      	ldr	r2, [r3, #0]
   83766:	4b2f      	ldr	r3, [pc, #188]	; (83824 <vTaskSwitchContext+0xe0>)
   83768:	681b      	ldr	r3, [r3, #0]
   8376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8376c:	429a      	cmp	r2, r3
   8376e:	d808      	bhi.n	83782 <vTaskSwitchContext+0x3e>
   83770:	4b2c      	ldr	r3, [pc, #176]	; (83824 <vTaskSwitchContext+0xe0>)
   83772:	681a      	ldr	r2, [r3, #0]
   83774:	4b2b      	ldr	r3, [pc, #172]	; (83824 <vTaskSwitchContext+0xe0>)
   83776:	681b      	ldr	r3, [r3, #0]
   83778:	3334      	adds	r3, #52	; 0x34
   8377a:	4610      	mov	r0, r2
   8377c:	4619      	mov	r1, r3
   8377e:	4b2a      	ldr	r3, [pc, #168]	; (83828 <vTaskSwitchContext+0xe4>)
   83780:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   83782:	4b28      	ldr	r3, [pc, #160]	; (83824 <vTaskSwitchContext+0xe0>)
   83784:	681b      	ldr	r3, [r3, #0]
   83786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83788:	4618      	mov	r0, r3
   8378a:	4928      	ldr	r1, [pc, #160]	; (8382c <vTaskSwitchContext+0xe8>)
   8378c:	2214      	movs	r2, #20
   8378e:	4b28      	ldr	r3, [pc, #160]	; (83830 <vTaskSwitchContext+0xec>)
   83790:	4798      	blx	r3
   83792:	4603      	mov	r3, r0
   83794:	2b00      	cmp	r3, #0
   83796:	d008      	beq.n	837aa <vTaskSwitchContext+0x66>
   83798:	4b22      	ldr	r3, [pc, #136]	; (83824 <vTaskSwitchContext+0xe0>)
   8379a:	681a      	ldr	r2, [r3, #0]
   8379c:	4b21      	ldr	r3, [pc, #132]	; (83824 <vTaskSwitchContext+0xe0>)
   8379e:	681b      	ldr	r3, [r3, #0]
   837a0:	3334      	adds	r3, #52	; 0x34
   837a2:	4610      	mov	r0, r2
   837a4:	4619      	mov	r1, r3
   837a6:	4b20      	ldr	r3, [pc, #128]	; (83828 <vTaskSwitchContext+0xe4>)
   837a8:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   837aa:	4b22      	ldr	r3, [pc, #136]	; (83834 <vTaskSwitchContext+0xf0>)
   837ac:	681b      	ldr	r3, [r3, #0]
   837ae:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   837b0:	687b      	ldr	r3, [r7, #4]
   837b2:	fab3 f383 	clz	r3, r3
   837b6:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   837b8:	78fb      	ldrb	r3, [r7, #3]
   837ba:	f1c3 031f 	rsb	r3, r3, #31
   837be:	60fb      	str	r3, [r7, #12]
   837c0:	491d      	ldr	r1, [pc, #116]	; (83838 <vTaskSwitchContext+0xf4>)
   837c2:	68fa      	ldr	r2, [r7, #12]
   837c4:	4613      	mov	r3, r2
   837c6:	009b      	lsls	r3, r3, #2
   837c8:	4413      	add	r3, r2
   837ca:	009b      	lsls	r3, r3, #2
   837cc:	440b      	add	r3, r1
   837ce:	681b      	ldr	r3, [r3, #0]
   837d0:	2b00      	cmp	r3, #0
   837d2:	d102      	bne.n	837da <vTaskSwitchContext+0x96>
   837d4:	4b19      	ldr	r3, [pc, #100]	; (8383c <vTaskSwitchContext+0xf8>)
   837d6:	4798      	blx	r3
   837d8:	e7fe      	b.n	837d8 <vTaskSwitchContext+0x94>
   837da:	68fa      	ldr	r2, [r7, #12]
   837dc:	4613      	mov	r3, r2
   837de:	009b      	lsls	r3, r3, #2
   837e0:	4413      	add	r3, r2
   837e2:	009b      	lsls	r3, r3, #2
   837e4:	4a14      	ldr	r2, [pc, #80]	; (83838 <vTaskSwitchContext+0xf4>)
   837e6:	4413      	add	r3, r2
   837e8:	60bb      	str	r3, [r7, #8]
   837ea:	68bb      	ldr	r3, [r7, #8]
   837ec:	685b      	ldr	r3, [r3, #4]
   837ee:	685a      	ldr	r2, [r3, #4]
   837f0:	68bb      	ldr	r3, [r7, #8]
   837f2:	605a      	str	r2, [r3, #4]
   837f4:	68bb      	ldr	r3, [r7, #8]
   837f6:	685a      	ldr	r2, [r3, #4]
   837f8:	68bb      	ldr	r3, [r7, #8]
   837fa:	3308      	adds	r3, #8
   837fc:	429a      	cmp	r2, r3
   837fe:	d104      	bne.n	8380a <vTaskSwitchContext+0xc6>
   83800:	68bb      	ldr	r3, [r7, #8]
   83802:	685b      	ldr	r3, [r3, #4]
   83804:	685a      	ldr	r2, [r3, #4]
   83806:	68bb      	ldr	r3, [r7, #8]
   83808:	605a      	str	r2, [r3, #4]
   8380a:	68bb      	ldr	r3, [r7, #8]
   8380c:	685b      	ldr	r3, [r3, #4]
   8380e:	68da      	ldr	r2, [r3, #12]
   83810:	4b04      	ldr	r3, [pc, #16]	; (83824 <vTaskSwitchContext+0xe0>)
   83812:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   83814:	3710      	adds	r7, #16
   83816:	46bd      	mov	sp, r7
   83818:	bd80      	pop	{r7, pc}
   8381a:	bf00      	nop
   8381c:	2007a5a4 	.word	0x2007a5a4
   83820:	2007a59c 	.word	0x2007a59c
   83824:	2007a508 	.word	0x2007a508
   83828:	000845cd 	.word	0x000845cd
   8382c:	00084fe0 	.word	0x00084fe0
   83830:	00084c41 	.word	0x00084c41
   83834:	2007a594 	.word	0x2007a594
   83838:	2007a50c 	.word	0x2007a50c
   8383c:	00082cd5 	.word	0x00082cd5

00083840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   83840:	b580      	push	{r7, lr}
   83842:	b084      	sub	sp, #16
   83844:	af00      	add	r7, sp, #0
   83846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   83848:	687b      	ldr	r3, [r7, #4]
   8384a:	68db      	ldr	r3, [r3, #12]
   8384c:	68db      	ldr	r3, [r3, #12]
   8384e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   83850:	68bb      	ldr	r3, [r7, #8]
   83852:	2b00      	cmp	r3, #0
   83854:	d102      	bne.n	8385c <xTaskRemoveFromEventList+0x1c>
   83856:	4b21      	ldr	r3, [pc, #132]	; (838dc <xTaskRemoveFromEventList+0x9c>)
   83858:	4798      	blx	r3
   8385a:	e7fe      	b.n	8385a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8385c:	68bb      	ldr	r3, [r7, #8]
   8385e:	3318      	adds	r3, #24
   83860:	4618      	mov	r0, r3
   83862:	4b1f      	ldr	r3, [pc, #124]	; (838e0 <xTaskRemoveFromEventList+0xa0>)
   83864:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   83866:	4b1f      	ldr	r3, [pc, #124]	; (838e4 <xTaskRemoveFromEventList+0xa4>)
   83868:	681b      	ldr	r3, [r3, #0]
   8386a:	2b00      	cmp	r3, #0
   8386c:	d11c      	bne.n	838a8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8386e:	68bb      	ldr	r3, [r7, #8]
   83870:	3304      	adds	r3, #4
   83872:	4618      	mov	r0, r3
   83874:	4b1a      	ldr	r3, [pc, #104]	; (838e0 <xTaskRemoveFromEventList+0xa0>)
   83876:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   83878:	68bb      	ldr	r3, [r7, #8]
   8387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8387c:	2201      	movs	r2, #1
   8387e:	409a      	lsls	r2, r3
   83880:	4b19      	ldr	r3, [pc, #100]	; (838e8 <xTaskRemoveFromEventList+0xa8>)
   83882:	681b      	ldr	r3, [r3, #0]
   83884:	431a      	orrs	r2, r3
   83886:	4b18      	ldr	r3, [pc, #96]	; (838e8 <xTaskRemoveFromEventList+0xa8>)
   83888:	601a      	str	r2, [r3, #0]
   8388a:	68bb      	ldr	r3, [r7, #8]
   8388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8388e:	4613      	mov	r3, r2
   83890:	009b      	lsls	r3, r3, #2
   83892:	4413      	add	r3, r2
   83894:	009b      	lsls	r3, r3, #2
   83896:	4a15      	ldr	r2, [pc, #84]	; (838ec <xTaskRemoveFromEventList+0xac>)
   83898:	441a      	add	r2, r3
   8389a:	68bb      	ldr	r3, [r7, #8]
   8389c:	3304      	adds	r3, #4
   8389e:	4610      	mov	r0, r2
   838a0:	4619      	mov	r1, r3
   838a2:	4b13      	ldr	r3, [pc, #76]	; (838f0 <xTaskRemoveFromEventList+0xb0>)
   838a4:	4798      	blx	r3
   838a6:	e005      	b.n	838b4 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   838a8:	68bb      	ldr	r3, [r7, #8]
   838aa:	3318      	adds	r3, #24
   838ac:	4811      	ldr	r0, [pc, #68]	; (838f4 <xTaskRemoveFromEventList+0xb4>)
   838ae:	4619      	mov	r1, r3
   838b0:	4b0f      	ldr	r3, [pc, #60]	; (838f0 <xTaskRemoveFromEventList+0xb0>)
   838b2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   838b4:	68bb      	ldr	r3, [r7, #8]
   838b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   838b8:	4b0f      	ldr	r3, [pc, #60]	; (838f8 <xTaskRemoveFromEventList+0xb8>)
   838ba:	681b      	ldr	r3, [r3, #0]
   838bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   838be:	429a      	cmp	r2, r3
   838c0:	d905      	bls.n	838ce <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   838c2:	2301      	movs	r3, #1
   838c4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   838c6:	4b0d      	ldr	r3, [pc, #52]	; (838fc <xTaskRemoveFromEventList+0xbc>)
   838c8:	2201      	movs	r2, #1
   838ca:	601a      	str	r2, [r3, #0]
   838cc:	e001      	b.n	838d2 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   838ce:	2300      	movs	r3, #0
   838d0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   838d2:	68fb      	ldr	r3, [r7, #12]
}
   838d4:	4618      	mov	r0, r3
   838d6:	3710      	adds	r7, #16
   838d8:	46bd      	mov	sp, r7
   838da:	bd80      	pop	{r7, pc}
   838dc:	00082cd5 	.word	0x00082cd5
   838e0:	00082bc1 	.word	0x00082bc1
   838e4:	2007a5a4 	.word	0x2007a5a4
   838e8:	2007a594 	.word	0x2007a594
   838ec:	2007a50c 	.word	0x2007a50c
   838f0:	00082b79 	.word	0x00082b79
   838f4:	2007a578 	.word	0x2007a578
   838f8:	2007a508 	.word	0x2007a508
   838fc:	2007a59c 	.word	0x2007a59c

00083900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   83900:	b480      	push	{r7}
   83902:	b083      	sub	sp, #12
   83904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   83906:	4b0e      	ldr	r3, [pc, #56]	; (83940 <prvResetNextTaskUnblockTime+0x40>)
   83908:	681b      	ldr	r3, [r3, #0]
   8390a:	681b      	ldr	r3, [r3, #0]
   8390c:	2b00      	cmp	r3, #0
   8390e:	d101      	bne.n	83914 <prvResetNextTaskUnblockTime+0x14>
   83910:	2301      	movs	r3, #1
   83912:	e000      	b.n	83916 <prvResetNextTaskUnblockTime+0x16>
   83914:	2300      	movs	r3, #0
   83916:	2b00      	cmp	r3, #0
   83918:	d004      	beq.n	83924 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   8391a:	4b0a      	ldr	r3, [pc, #40]	; (83944 <prvResetNextTaskUnblockTime+0x44>)
   8391c:	f04f 32ff 	mov.w	r2, #4294967295
   83920:	601a      	str	r2, [r3, #0]
   83922:	e008      	b.n	83936 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   83924:	4b06      	ldr	r3, [pc, #24]	; (83940 <prvResetNextTaskUnblockTime+0x40>)
   83926:	681b      	ldr	r3, [r3, #0]
   83928:	68db      	ldr	r3, [r3, #12]
   8392a:	68db      	ldr	r3, [r3, #12]
   8392c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8392e:	687b      	ldr	r3, [r7, #4]
   83930:	685a      	ldr	r2, [r3, #4]
   83932:	4b04      	ldr	r3, [pc, #16]	; (83944 <prvResetNextTaskUnblockTime+0x44>)
   83934:	601a      	str	r2, [r3, #0]
	}
}
   83936:	370c      	adds	r7, #12
   83938:	46bd      	mov	sp, r7
   8393a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8393e:	4770      	bx	lr
   83940:	2007a570 	.word	0x2007a570
   83944:	20070008 	.word	0x20070008

00083948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   83948:	b580      	push	{r7, lr}
   8394a:	b084      	sub	sp, #16
   8394c:	af00      	add	r7, sp, #0
   8394e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   83950:	687b      	ldr	r3, [r7, #4]
   83952:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   83954:	2300      	movs	r3, #0
   83956:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   83958:	687b      	ldr	r3, [r7, #4]
   8395a:	2b00      	cmp	r3, #0
   8395c:	d056      	beq.n	83a0c <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   8395e:	68bb      	ldr	r3, [r7, #8]
   83960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83962:	2b00      	cmp	r3, #0
   83964:	d102      	bne.n	8396c <xTaskPriorityDisinherit+0x24>
   83966:	4b2c      	ldr	r3, [pc, #176]	; (83a18 <xTaskPriorityDisinherit+0xd0>)
   83968:	4798      	blx	r3
   8396a:	e7fe      	b.n	8396a <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   8396c:	68bb      	ldr	r3, [r7, #8]
   8396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83970:	1e5a      	subs	r2, r3, #1
   83972:	68bb      	ldr	r3, [r7, #8]
   83974:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   83976:	68bb      	ldr	r3, [r7, #8]
   83978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8397a:	68bb      	ldr	r3, [r7, #8]
   8397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8397e:	429a      	cmp	r2, r3
   83980:	d044      	beq.n	83a0c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   83982:	68bb      	ldr	r3, [r7, #8]
   83984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83986:	2b00      	cmp	r3, #0
   83988:	d140      	bne.n	83a0c <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8398a:	68bb      	ldr	r3, [r7, #8]
   8398c:	3304      	adds	r3, #4
   8398e:	4618      	mov	r0, r3
   83990:	4b22      	ldr	r3, [pc, #136]	; (83a1c <xTaskPriorityDisinherit+0xd4>)
   83992:	4798      	blx	r3
   83994:	4603      	mov	r3, r0
   83996:	2b00      	cmp	r3, #0
   83998:	d115      	bne.n	839c6 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8399a:	68bb      	ldr	r3, [r7, #8]
   8399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8399e:	4920      	ldr	r1, [pc, #128]	; (83a20 <xTaskPriorityDisinherit+0xd8>)
   839a0:	4613      	mov	r3, r2
   839a2:	009b      	lsls	r3, r3, #2
   839a4:	4413      	add	r3, r2
   839a6:	009b      	lsls	r3, r3, #2
   839a8:	440b      	add	r3, r1
   839aa:	681b      	ldr	r3, [r3, #0]
   839ac:	2b00      	cmp	r3, #0
   839ae:	d10a      	bne.n	839c6 <xTaskPriorityDisinherit+0x7e>
   839b0:	68bb      	ldr	r3, [r7, #8]
   839b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   839b4:	2201      	movs	r2, #1
   839b6:	fa02 f303 	lsl.w	r3, r2, r3
   839ba:	43da      	mvns	r2, r3
   839bc:	4b19      	ldr	r3, [pc, #100]	; (83a24 <xTaskPriorityDisinherit+0xdc>)
   839be:	681b      	ldr	r3, [r3, #0]
   839c0:	401a      	ands	r2, r3
   839c2:	4b18      	ldr	r3, [pc, #96]	; (83a24 <xTaskPriorityDisinherit+0xdc>)
   839c4:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   839c6:	68bb      	ldr	r3, [r7, #8]
   839c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   839ca:	68bb      	ldr	r3, [r7, #8]
   839cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   839ce:	68bb      	ldr	r3, [r7, #8]
   839d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   839d2:	f1c3 0205 	rsb	r2, r3, #5
   839d6:	68bb      	ldr	r3, [r7, #8]
   839d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   839da:	68bb      	ldr	r3, [r7, #8]
   839dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   839de:	2201      	movs	r2, #1
   839e0:	409a      	lsls	r2, r3
   839e2:	4b10      	ldr	r3, [pc, #64]	; (83a24 <xTaskPriorityDisinherit+0xdc>)
   839e4:	681b      	ldr	r3, [r3, #0]
   839e6:	431a      	orrs	r2, r3
   839e8:	4b0e      	ldr	r3, [pc, #56]	; (83a24 <xTaskPriorityDisinherit+0xdc>)
   839ea:	601a      	str	r2, [r3, #0]
   839ec:	68bb      	ldr	r3, [r7, #8]
   839ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   839f0:	4613      	mov	r3, r2
   839f2:	009b      	lsls	r3, r3, #2
   839f4:	4413      	add	r3, r2
   839f6:	009b      	lsls	r3, r3, #2
   839f8:	4a09      	ldr	r2, [pc, #36]	; (83a20 <xTaskPriorityDisinherit+0xd8>)
   839fa:	441a      	add	r2, r3
   839fc:	68bb      	ldr	r3, [r7, #8]
   839fe:	3304      	adds	r3, #4
   83a00:	4610      	mov	r0, r2
   83a02:	4619      	mov	r1, r3
   83a04:	4b08      	ldr	r3, [pc, #32]	; (83a28 <xTaskPriorityDisinherit+0xe0>)
   83a06:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   83a08:	2301      	movs	r3, #1
   83a0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   83a0c:	68fb      	ldr	r3, [r7, #12]
	}
   83a0e:	4618      	mov	r0, r3
   83a10:	3710      	adds	r7, #16
   83a12:	46bd      	mov	sp, r7
   83a14:	bd80      	pop	{r7, pc}
   83a16:	bf00      	nop
   83a18:	00082cd5 	.word	0x00082cd5
   83a1c:	00082bc1 	.word	0x00082bc1
   83a20:	2007a50c 	.word	0x2007a50c
   83a24:	2007a594 	.word	0x2007a594
   83a28:	00082b79 	.word	0x00082b79

00083a2c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   83a2c:	b480      	push	{r7}
   83a2e:	b083      	sub	sp, #12
   83a30:	af00      	add	r7, sp, #0
   83a32:	4603      	mov	r3, r0
   83a34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83a36:	4b08      	ldr	r3, [pc, #32]	; (83a58 <NVIC_EnableIRQ+0x2c>)
   83a38:	f997 2007 	ldrsb.w	r2, [r7, #7]
   83a3c:	0952      	lsrs	r2, r2, #5
   83a3e:	79f9      	ldrb	r1, [r7, #7]
   83a40:	f001 011f 	and.w	r1, r1, #31
   83a44:	2001      	movs	r0, #1
   83a46:	fa00 f101 	lsl.w	r1, r0, r1
   83a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83a4e:	370c      	adds	r7, #12
   83a50:	46bd      	mov	sp, r7
   83a52:	f85d 7b04 	ldr.w	r7, [sp], #4
   83a56:	4770      	bx	lr
   83a58:	e000e100 	.word	0xe000e100

00083a5c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   83a5c:	b480      	push	{r7}
   83a5e:	b083      	sub	sp, #12
   83a60:	af00      	add	r7, sp, #0
   83a62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83a64:	687b      	ldr	r3, [r7, #4]
   83a66:	2b07      	cmp	r3, #7
   83a68:	d825      	bhi.n	83ab6 <osc_get_rate+0x5a>
   83a6a:	a201      	add	r2, pc, #4	; (adr r2, 83a70 <osc_get_rate+0x14>)
   83a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83a70:	00083a91 	.word	0x00083a91
   83a74:	00083a97 	.word	0x00083a97
   83a78:	00083a9d 	.word	0x00083a9d
   83a7c:	00083aa3 	.word	0x00083aa3
   83a80:	00083aa7 	.word	0x00083aa7
   83a84:	00083aab 	.word	0x00083aab
   83a88:	00083aaf 	.word	0x00083aaf
   83a8c:	00083ab3 	.word	0x00083ab3
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   83a90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83a94:	e010      	b.n	83ab8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   83a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83a9a:	e00d      	b.n	83ab8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   83a9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83aa0:	e00a      	b.n	83ab8 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   83aa2:	4b08      	ldr	r3, [pc, #32]	; (83ac4 <osc_get_rate+0x68>)
   83aa4:	e008      	b.n	83ab8 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   83aa6:	4b08      	ldr	r3, [pc, #32]	; (83ac8 <osc_get_rate+0x6c>)
   83aa8:	e006      	b.n	83ab8 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   83aaa:	4b08      	ldr	r3, [pc, #32]	; (83acc <osc_get_rate+0x70>)
   83aac:	e004      	b.n	83ab8 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   83aae:	4b07      	ldr	r3, [pc, #28]	; (83acc <osc_get_rate+0x70>)
   83ab0:	e002      	b.n	83ab8 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   83ab2:	4b06      	ldr	r3, [pc, #24]	; (83acc <osc_get_rate+0x70>)
   83ab4:	e000      	b.n	83ab8 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   83ab6:	2300      	movs	r3, #0
}
   83ab8:	4618      	mov	r0, r3
   83aba:	370c      	adds	r7, #12
   83abc:	46bd      	mov	sp, r7
   83abe:	f85d 7b04 	ldr.w	r7, [sp], #4
   83ac2:	4770      	bx	lr
   83ac4:	003d0900 	.word	0x003d0900
   83ac8:	007a1200 	.word	0x007a1200
   83acc:	00b71b00 	.word	0x00b71b00

00083ad0 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   83ad0:	b580      	push	{r7, lr}
   83ad2:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   83ad4:	2006      	movs	r0, #6
   83ad6:	4b04      	ldr	r3, [pc, #16]	; (83ae8 <sysclk_get_main_hz+0x18>)
   83ad8:	4798      	blx	r3
   83ada:	4602      	mov	r2, r0
   83adc:	4613      	mov	r3, r2
   83ade:	00db      	lsls	r3, r3, #3
   83ae0:	1a9b      	subs	r3, r3, r2
   83ae2:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   83ae4:	4618      	mov	r0, r3
   83ae6:	bd80      	pop	{r7, pc}
   83ae8:	00083a5d 	.word	0x00083a5d

00083aec <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   83aec:	b580      	push	{r7, lr}
   83aee:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   83af0:	4b02      	ldr	r3, [pc, #8]	; (83afc <sysclk_get_cpu_hz+0x10>)
   83af2:	4798      	blx	r3
   83af4:	4603      	mov	r3, r0
   83af6:	085b      	lsrs	r3, r3, #1
}
   83af8:	4618      	mov	r0, r3
   83afa:	bd80      	pop	{r7, pc}
   83afc:	00083ad1 	.word	0x00083ad1

00083b00 <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   83b00:	b580      	push	{r7, lr}
   83b02:	b082      	sub	sp, #8
   83b04:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   83b06:	482b      	ldr	r0, [pc, #172]	; (83bb4 <CAN1_Handler+0xb4>)
   83b08:	492b      	ldr	r1, [pc, #172]	; (83bb8 <CAN1_Handler+0xb8>)
   83b0a:	4b2c      	ldr	r3, [pc, #176]	; (83bbc <CAN1_Handler+0xbc>)
   83b0c:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   83b0e:	482c      	ldr	r0, [pc, #176]	; (83bc0 <CAN1_Handler+0xc0>)
   83b10:	4b2c      	ldr	r3, [pc, #176]	; (83bc4 <CAN1_Handler+0xc4>)
   83b12:	4798      	blx	r3
   83b14:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   83b16:	683b      	ldr	r3, [r7, #0]
   83b18:	b2db      	uxtb	r3, r3
   83b1a:	2b00      	cmp	r3, #0
   83b1c:	d046      	beq.n	83bac <CAN1_Handler+0xac>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   83b1e:	2300      	movs	r3, #0
   83b20:	71fb      	strb	r3, [r7, #7]
   83b22:	e040      	b.n	83ba6 <CAN1_Handler+0xa6>
			ul_status = can_mailbox_get_status(CAN1, i);
   83b24:	79fb      	ldrb	r3, [r7, #7]
   83b26:	4826      	ldr	r0, [pc, #152]	; (83bc0 <CAN1_Handler+0xc0>)
   83b28:	4619      	mov	r1, r3
   83b2a:	4b27      	ldr	r3, [pc, #156]	; (83bc8 <CAN1_Handler+0xc8>)
   83b2c:	4798      	blx	r3
   83b2e:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   83b30:	683b      	ldr	r3, [r7, #0]
   83b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   83b36:	2b00      	cmp	r3, #0
   83b38:	d032      	beq.n	83ba0 <CAN1_Handler+0xa0>
				can1_mailbox.ul_mb_idx = i;
   83b3a:	79fa      	ldrb	r2, [r7, #7]
   83b3c:	4b1d      	ldr	r3, [pc, #116]	; (83bb4 <CAN1_Handler+0xb4>)
   83b3e:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   83b40:	4b1c      	ldr	r3, [pc, #112]	; (83bb4 <CAN1_Handler+0xb4>)
   83b42:	683a      	ldr	r2, [r7, #0]
   83b44:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   83b46:	481e      	ldr	r0, [pc, #120]	; (83bc0 <CAN1_Handler+0xc0>)
   83b48:	491a      	ldr	r1, [pc, #104]	; (83bb4 <CAN1_Handler+0xb4>)
   83b4a:	4b20      	ldr	r3, [pc, #128]	; (83bcc <CAN1_Handler+0xcc>)
   83b4c:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   83b4e:	4b19      	ldr	r3, [pc, #100]	; (83bb4 <CAN1_Handler+0xb4>)
   83b50:	69da      	ldr	r2, [r3, #28]
   83b52:	4b1f      	ldr	r3, [pc, #124]	; (83bd0 <CAN1_Handler+0xd0>)
   83b54:	429a      	cmp	r2, r3
   83b56:	d107      	bne.n	83b68 <CAN1_Handler+0x68>
   83b58:	4b16      	ldr	r3, [pc, #88]	; (83bb4 <CAN1_Handler+0xb4>)
   83b5a:	699a      	ldr	r2, [r3, #24]
   83b5c:	4b1d      	ldr	r3, [pc, #116]	; (83bd4 <CAN1_Handler+0xd4>)
   83b5e:	429a      	cmp	r2, r3
   83b60:	d102      	bne.n	83b68 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   83b62:	4b1d      	ldr	r3, [pc, #116]	; (83bd8 <CAN1_Handler+0xd8>)
   83b64:	2200      	movs	r2, #0
   83b66:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   83b68:	79fb      	ldrb	r3, [r7, #7]
   83b6a:	4812      	ldr	r0, [pc, #72]	; (83bb4 <CAN1_Handler+0xb4>)
   83b6c:	4619      	mov	r1, r3
   83b6e:	4b1b      	ldr	r3, [pc, #108]	; (83bdc <CAN1_Handler+0xdc>)
   83b70:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   83b72:	4810      	ldr	r0, [pc, #64]	; (83bb4 <CAN1_Handler+0xb4>)
   83b74:	4912      	ldr	r1, [pc, #72]	; (83bc0 <CAN1_Handler+0xc0>)
   83b76:	4b1a      	ldr	r3, [pc, #104]	; (83be0 <CAN1_Handler+0xe0>)
   83b78:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   83b7a:	79fb      	ldrb	r3, [r7, #7]
   83b7c:	2b07      	cmp	r3, #7
   83b7e:	d103      	bne.n	83b88 <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   83b80:	480c      	ldr	r0, [pc, #48]	; (83bb4 <CAN1_Handler+0xb4>)
   83b82:	490f      	ldr	r1, [pc, #60]	; (83bc0 <CAN1_Handler+0xc0>)
   83b84:	4b17      	ldr	r3, [pc, #92]	; (83be4 <CAN1_Handler+0xe4>)
   83b86:	4798      	blx	r3

				if (i == 0)
   83b88:	79fb      	ldrb	r3, [r7, #7]
   83b8a:	2b00      	cmp	r3, #0
   83b8c:	d103      	bne.n	83b96 <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   83b8e:	4809      	ldr	r0, [pc, #36]	; (83bb4 <CAN1_Handler+0xb4>)
   83b90:	490b      	ldr	r1, [pc, #44]	; (83bc0 <CAN1_Handler+0xc0>)
   83b92:	4b15      	ldr	r3, [pc, #84]	; (83be8 <CAN1_Handler+0xe8>)
   83b94:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   83b96:	4807      	ldr	r0, [pc, #28]	; (83bb4 <CAN1_Handler+0xb4>)
   83b98:	4907      	ldr	r1, [pc, #28]	; (83bb8 <CAN1_Handler+0xb8>)
   83b9a:	4b14      	ldr	r3, [pc, #80]	; (83bec <CAN1_Handler+0xec>)
   83b9c:	4798      	blx	r3
				break;
   83b9e:	e005      	b.n	83bac <CAN1_Handler+0xac>
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   83ba0:	79fb      	ldrb	r3, [r7, #7]
   83ba2:	3301      	adds	r3, #1
   83ba4:	71fb      	strb	r3, [r7, #7]
   83ba6:	79fb      	ldrb	r3, [r7, #7]
   83ba8:	2b07      	cmp	r3, #7
   83baa:	d9bb      	bls.n	83b24 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   83bac:	3708      	adds	r7, #8
   83bae:	46bd      	mov	sp, r7
   83bb0:	bd80      	pop	{r7, pc}
   83bb2:	bf00      	nop
   83bb4:	2007a5bc 	.word	0x2007a5bc
   83bb8:	2007a5f8 	.word	0x2007a5f8
   83bbc:	00083fcd 	.word	0x00083fcd
   83bc0:	400b8000 	.word	0x400b8000
   83bc4:	000819f1 	.word	0x000819f1
   83bc8:	00081a09 	.word	0x00081a09
   83bcc:	00081b89 	.word	0x00081b89
   83bd0:	01234567 	.word	0x01234567
   83bd4:	89abcdef 	.word	0x89abcdef
   83bd8:	2007a650 	.word	0x2007a650
   83bdc:	00083e55 	.word	0x00083e55
   83be0:	00083c91 	.word	0x00083c91
   83be4:	00083cf1 	.word	0x00083cf1
   83be8:	00083db5 	.word	0x00083db5
   83bec:	0008403d 	.word	0x0008403d

00083bf0 <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   83bf0:	b580      	push	{r7, lr}
   83bf2:	b082      	sub	sp, #8
   83bf4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   83bf6:	481c      	ldr	r0, [pc, #112]	; (83c68 <CAN0_Handler+0x78>)
   83bf8:	491c      	ldr	r1, [pc, #112]	; (83c6c <CAN0_Handler+0x7c>)
   83bfa:	4b1d      	ldr	r3, [pc, #116]	; (83c70 <CAN0_Handler+0x80>)
   83bfc:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   83bfe:	481d      	ldr	r0, [pc, #116]	; (83c74 <CAN0_Handler+0x84>)
   83c00:	4b1d      	ldr	r3, [pc, #116]	; (83c78 <CAN0_Handler+0x88>)
   83c02:	4798      	blx	r3
   83c04:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   83c06:	683b      	ldr	r3, [r7, #0]
   83c08:	b2db      	uxtb	r3, r3
   83c0a:	2b00      	cmp	r3, #0
   83c0c:	d029      	beq.n	83c62 <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   83c0e:	2300      	movs	r3, #0
   83c10:	71fb      	strb	r3, [r7, #7]
   83c12:	e023      	b.n	83c5c <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   83c14:	79fb      	ldrb	r3, [r7, #7]
   83c16:	4817      	ldr	r0, [pc, #92]	; (83c74 <CAN0_Handler+0x84>)
   83c18:	4619      	mov	r1, r3
   83c1a:	4b18      	ldr	r3, [pc, #96]	; (83c7c <CAN0_Handler+0x8c>)
   83c1c:	4798      	blx	r3
   83c1e:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   83c20:	683b      	ldr	r3, [r7, #0]
   83c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   83c26:	2b00      	cmp	r3, #0
   83c28:	d015      	beq.n	83c56 <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   83c2a:	79fa      	ldrb	r2, [r7, #7]
   83c2c:	4b0e      	ldr	r3, [pc, #56]	; (83c68 <CAN0_Handler+0x78>)
   83c2e:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   83c30:	4b0d      	ldr	r3, [pc, #52]	; (83c68 <CAN0_Handler+0x78>)
   83c32:	683a      	ldr	r2, [r7, #0]
   83c34:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   83c36:	480f      	ldr	r0, [pc, #60]	; (83c74 <CAN0_Handler+0x84>)
   83c38:	490b      	ldr	r1, [pc, #44]	; (83c68 <CAN0_Handler+0x78>)
   83c3a:	4b11      	ldr	r3, [pc, #68]	; (83c80 <CAN0_Handler+0x90>)
   83c3c:	4798      	blx	r3
				g_ul_recv_status = 1;
   83c3e:	4b11      	ldr	r3, [pc, #68]	; (83c84 <CAN0_Handler+0x94>)
   83c40:	2201      	movs	r2, #1
   83c42:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				debug_can_msg(&can0_mailbox, CAN0);
   83c44:	4808      	ldr	r0, [pc, #32]	; (83c68 <CAN0_Handler+0x78>)
   83c46:	490b      	ldr	r1, [pc, #44]	; (83c74 <CAN0_Handler+0x84>)
   83c48:	4b0f      	ldr	r3, [pc, #60]	; (83c88 <CAN0_Handler+0x98>)
   83c4a:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   83c4c:	4806      	ldr	r0, [pc, #24]	; (83c68 <CAN0_Handler+0x78>)
   83c4e:	4907      	ldr	r1, [pc, #28]	; (83c6c <CAN0_Handler+0x7c>)
   83c50:	4b0e      	ldr	r3, [pc, #56]	; (83c8c <CAN0_Handler+0x9c>)
   83c52:	4798      	blx	r3
				break;
   83c54:	e005      	b.n	83c62 <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   83c56:	79fb      	ldrb	r3, [r7, #7]
   83c58:	3301      	adds	r3, #1
   83c5a:	71fb      	strb	r3, [r7, #7]
   83c5c:	79fb      	ldrb	r3, [r7, #7]
   83c5e:	2b07      	cmp	r3, #7
   83c60:	d9d8      	bls.n	83c14 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   83c62:	3708      	adds	r7, #8
   83c64:	46bd      	mov	sp, r7
   83c66:	bd80      	pop	{r7, pc}
   83c68:	2007a628 	.word	0x2007a628
   83c6c:	2007a66c 	.word	0x2007a66c
   83c70:	00083fcd 	.word	0x00083fcd
   83c74:	400b4000 	.word	0x400b4000
   83c78:	000819f1 	.word	0x000819f1
   83c7c:	00081a09 	.word	0x00081a09
   83c80:	00081b89 	.word	0x00081b89
   83c84:	2007a5a8 	.word	0x2007a5a8
   83c88:	00083c91 	.word	0x00083c91
   83c8c:	0008403d 	.word	0x0008403d

00083c90 <debug_can_msg>:
/* depending on the CAN message which was received.						*/
/*																		*/
/************************************************************************/

void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   83c90:	b580      	push	{r7, lr}
   83c92:	b086      	sub	sp, #24
   83c94:	af00      	add	r7, sp, #0
   83c96:	6078      	str	r0, [r7, #4]
   83c98:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   83c9a:	687b      	ldr	r3, [r7, #4]
   83c9c:	699b      	ldr	r3, [r3, #24]
   83c9e:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   83ca0:	687b      	ldr	r3, [r7, #4]
   83ca2:	69db      	ldr	r3, [r3, #28]
   83ca4:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   83ca6:	693b      	ldr	r3, [r7, #16]
   83ca8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   83cac:	0c1b      	lsrs	r3, r3, #16
   83cae:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   83cb0:	693b      	ldr	r3, [r7, #16]
   83cb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   83cb6:	0a1b      	lsrs	r3, r3, #8
   83cb8:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   83cba:	7bfb      	ldrb	r3, [r7, #15]
   83cbc:	2b02      	cmp	r3, #2
   83cbe:	d105      	bne.n	83ccc <debug_can_msg+0x3c>
   83cc0:	7bbb      	ldrb	r3, [r7, #14]
   83cc2:	2b04      	cmp	r3, #4
   83cc4:	d102      	bne.n	83ccc <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   83cc6:	2057      	movs	r0, #87	; 0x57
   83cc8:	4b08      	ldr	r3, [pc, #32]	; (83cec <debug_can_msg+0x5c>)
   83cca:	4798      	blx	r3

	if (big_type == MT_HK)
   83ccc:	7bfb      	ldrb	r3, [r7, #15]
   83cce:	2b01      	cmp	r3, #1
   83cd0:	d102      	bne.n	83cd8 <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   83cd2:	2055      	movs	r0, #85	; 0x55
   83cd4:	4b05      	ldr	r3, [pc, #20]	; (83cec <debug_can_msg+0x5c>)
   83cd6:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   83cd8:	7bfb      	ldrb	r3, [r7, #15]
   83cda:	2b00      	cmp	r3, #0
   83cdc:	d102      	bne.n	83ce4 <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   83cde:	2056      	movs	r0, #86	; 0x56
   83ce0:	4b02      	ldr	r3, [pc, #8]	; (83cec <debug_can_msg+0x5c>)
   83ce2:	4798      	blx	r3

	return;
   83ce4:	bf00      	nop
}
   83ce6:	3718      	adds	r7, #24
   83ce8:	46bd      	mov	sp, r7
   83cea:	bd80      	pop	{r7, pc}
   83cec:	00081ed1 	.word	0x00081ed1

00083cf0 <decode_can_command>:


void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   83cf0:	b480      	push	{r7}
   83cf2:	b087      	sub	sp, #28
   83cf4:	af00      	add	r7, sp, #0
   83cf6:	6078      	str	r0, [r7, #4]
   83cf8:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   83cfa:	687b      	ldr	r3, [r7, #4]
   83cfc:	699b      	ldr	r3, [r3, #24]
   83cfe:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   83d00:	687b      	ldr	r3, [r7, #4]
   83d02:	69db      	ldr	r3, [r3, #28]
   83d04:	613b      	str	r3, [r7, #16]
	uint8_t sender, destination, big_type, small_type;

	sender = (uint8_t)(uh_data_incom >> 28);
   83d06:	693b      	ldr	r3, [r7, #16]
   83d08:	0f1b      	lsrs	r3, r3, #28
   83d0a:	73fb      	strb	r3, [r7, #15]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   83d0c:	693b      	ldr	r3, [r7, #16]
   83d0e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   83d12:	0e1b      	lsrs	r3, r3, #24
   83d14:	73bb      	strb	r3, [r7, #14]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   83d16:	693b      	ldr	r3, [r7, #16]
   83d18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   83d1c:	0c1b      	lsrs	r3, r3, #16
   83d1e:	737b      	strb	r3, [r7, #13]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   83d20:	693b      	ldr	r3, [r7, #16]
   83d22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   83d26:	0a1b      	lsrs	r3, r3, #8
   83d28:	733b      	strb	r3, [r7, #12]

	if(big_type != MT_COM)
   83d2a:	7b7b      	ldrb	r3, [r7, #13]
   83d2c:	2b02      	cmp	r3, #2
   83d2e:	d000      	beq.n	83d32 <decode_can_command+0x42>
		return;
   83d30:	e02e      	b.n	83d90 <decode_can_command+0xa0>
	
	switch(small_type)	// FROM WHO
   83d32:	7b3b      	ldrb	r3, [r7, #12]
   83d34:	2b06      	cmp	r3, #6
   83d36:	d002      	beq.n	83d3e <decode_can_command+0x4e>
   83d38:	2b08      	cmp	r3, #8
   83d3a:	d014      	beq.n	83d66 <decode_can_command+0x76>
				default :
					break;
			}
			break;
		default :
			break;
   83d3c:	e027      	b.n	83d8e <decode_can_command+0x9e>
		return;
	
	switch(small_type)	// FROM WHO
	{
		case ACK_READ:
			switch(destination)
   83d3e:	7bbb      	ldrb	r3, [r7, #14]
   83d40:	2b04      	cmp	r3, #4
   83d42:	d000      	beq.n	83d46 <decode_can_command+0x56>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   83d44:	e00e      	b.n	83d64 <decode_can_command+0x74>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   83d46:	4b15      	ldr	r3, [pc, #84]	; (83d9c <decode_can_command+0xac>)
   83d48:	781b      	ldrb	r3, [r3, #0]
   83d4a:	2b00      	cmp	r3, #0
   83d4c:	d009      	beq.n	83d62 <decode_can_command+0x72>
					{
						hk_read_receivedf = 1;
   83d4e:	4b14      	ldr	r3, [pc, #80]	; (83da0 <decode_can_command+0xb0>)
   83d50:	2201      	movs	r2, #1
   83d52:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   83d54:	4b13      	ldr	r3, [pc, #76]	; (83da4 <decode_can_command+0xb4>)
   83d56:	693a      	ldr	r2, [r7, #16]
   83d58:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   83d5a:	4b12      	ldr	r3, [pc, #72]	; (83da4 <decode_can_command+0xb4>)
   83d5c:	697a      	ldr	r2, [r7, #20]
   83d5e:	601a      	str	r2, [r3, #0]
					}
					break;
   83d60:	e7ff      	b.n	83d62 <decode_can_command+0x72>
   83d62:	bf00      	nop
				default :
					break;
			}
			break;
   83d64:	e013      	b.n	83d8e <decode_can_command+0x9e>
		case ACK_WRITE :
			switch(destination)
   83d66:	7bbb      	ldrb	r3, [r7, #14]
   83d68:	2b04      	cmp	r3, #4
   83d6a:	d000      	beq.n	83d6e <decode_can_command+0x7e>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   83d6c:	e00e      	b.n	83d8c <decode_can_command+0x9c>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   83d6e:	4b0e      	ldr	r3, [pc, #56]	; (83da8 <decode_can_command+0xb8>)
   83d70:	781b      	ldrb	r3, [r3, #0]
   83d72:	2b00      	cmp	r3, #0
   83d74:	d009      	beq.n	83d8a <decode_can_command+0x9a>
					{
						hk_write_receivedf = 1;
   83d76:	4b0d      	ldr	r3, [pc, #52]	; (83dac <decode_can_command+0xbc>)
   83d78:	2201      	movs	r2, #1
   83d7a:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   83d7c:	4b0c      	ldr	r3, [pc, #48]	; (83db0 <decode_can_command+0xc0>)
   83d7e:	693a      	ldr	r2, [r7, #16]
   83d80:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   83d82:	4b0b      	ldr	r3, [pc, #44]	; (83db0 <decode_can_command+0xc0>)
   83d84:	697a      	ldr	r2, [r7, #20]
   83d86:	601a      	str	r2, [r3, #0]
					}
					break;
   83d88:	e7ff      	b.n	83d8a <decode_can_command+0x9a>
   83d8a:	bf00      	nop
				default :
					break;
			}
			break;
   83d8c:	bf00      	nop
		default :
			break;
	}
	return;
   83d8e:	bf00      	nop
}
   83d90:	371c      	adds	r7, #28
   83d92:	46bd      	mov	sp, r7
   83d94:	f85d 7b04 	ldr.w	r7, [sp], #4
   83d98:	4770      	bx	lr
   83d9a:	bf00      	nop
   83d9c:	2007a654 	.word	0x2007a654
   83da0:	2007a5b8 	.word	0x2007a5b8
   83da4:	2007a5ec 	.word	0x2007a5ec
   83da8:	2007a61c 	.word	0x2007a61c
   83dac:	2007a5e9 	.word	0x2007a5e9
   83db0:	2007a620 	.word	0x2007a620

00083db4 <alert_can_data>:

void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   83db4:	b480      	push	{r7}
   83db6:	b087      	sub	sp, #28
   83db8:	af00      	add	r7, sp, #0
   83dba:	6078      	str	r0, [r7, #4]
   83dbc:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   83dbe:	687b      	ldr	r3, [r7, #4]
   83dc0:	69db      	ldr	r3, [r3, #28]
   83dc2:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   83dc4:	687b      	ldr	r3, [r7, #4]
   83dc6:	699b      	ldr	r3, [r3, #24]
   83dc8:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   83dca:	697b      	ldr	r3, [r7, #20]
   83dcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   83dd0:	0c1b      	lsrs	r3, r3, #16
   83dd2:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   83dd4:	697b      	ldr	r3, [r7, #20]
   83dd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   83dda:	0a1b      	lsrs	r3, r3, #8
   83ddc:	73bb      	strb	r3, [r7, #14]

	if(big_type != MT_DATA)
   83dde:	7bfb      	ldrb	r3, [r7, #15]
   83de0:	2b00      	cmp	r3, #0
   83de2:	d000      	beq.n	83de6 <alert_can_data+0x32>
		return;
   83de4:	e028      	b.n	83e38 <alert_can_data+0x84>

	switch(small_type)
   83de6:	7bbb      	ldrb	r3, [r7, #14]
   83de8:	3b01      	subs	r3, #1
   83dea:	2b03      	cmp	r3, #3
   83dec:	d822      	bhi.n	83e34 <alert_can_data+0x80>
   83dee:	a201      	add	r2, pc, #4	; (adr r2, 83df4 <alert_can_data+0x40>)
   83df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83df4:	00083e05 	.word	0x00083e05
   83df8:	00083e0b 	.word	0x00083e0b
   83dfc:	00083e11 	.word	0x00083e11
   83e00:	00083e23 	.word	0x00083e23
	{
		case SPI_TEMP1:
			glob_drf = 1;
   83e04:	4b0f      	ldr	r3, [pc, #60]	; (83e44 <alert_can_data+0x90>)
   83e06:	2201      	movs	r2, #1
   83e08:	701a      	strb	r2, [r3, #0]
		case COMS_PACKET:
			glob_comsf = 1;
   83e0a:	4b0f      	ldr	r3, [pc, #60]	; (83e48 <alert_can_data+0x94>)
   83e0c:	2201      	movs	r2, #1
   83e0e:	701a      	strb	r2, [r3, #0]
		case BATT_TOP :
			eps_data_receivedf = 1;
   83e10:	4b0e      	ldr	r3, [pc, #56]	; (83e4c <alert_can_data+0x98>)
   83e12:	2201      	movs	r2, #1
   83e14:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   83e16:	4b0e      	ldr	r3, [pc, #56]	; (83e50 <alert_can_data+0x9c>)
   83e18:	697a      	ldr	r2, [r7, #20]
   83e1a:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   83e1c:	4b0c      	ldr	r3, [pc, #48]	; (83e50 <alert_can_data+0x9c>)
   83e1e:	693a      	ldr	r2, [r7, #16]
   83e20:	601a      	str	r2, [r3, #0]
		case BATT_BOTTOM :
			eps_data_receivedf = 1;
   83e22:	4b0a      	ldr	r3, [pc, #40]	; (83e4c <alert_can_data+0x98>)
   83e24:	2201      	movs	r2, #1
   83e26:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   83e28:	4b09      	ldr	r3, [pc, #36]	; (83e50 <alert_can_data+0x9c>)
   83e2a:	697a      	ldr	r2, [r7, #20]
   83e2c:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   83e2e:	4b08      	ldr	r3, [pc, #32]	; (83e50 <alert_can_data+0x9c>)
   83e30:	693a      	ldr	r2, [r7, #16]
   83e32:	601a      	str	r2, [r3, #0]
		default :
			break;
   83e34:	bf00      	nop
	}

	return;
   83e36:	bf00      	nop
}
   83e38:	371c      	adds	r7, #28
   83e3a:	46bd      	mov	sp, r7
   83e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
   83e40:	4770      	bx	lr
   83e42:	bf00      	nop
   83e44:	2007a5dc 	.word	0x2007a5dc
   83e48:	2007a5e8 	.word	0x2007a5e8
   83e4c:	2007a65c 	.word	0x2007a65c
   83e50:	2007a648 	.word	0x2007a648

00083e54 <store_can_msg>:
/* 																		*/
/* These registers are then available to tasks through an API call.		*/
/************************************************************************/

void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   83e54:	b590      	push	{r4, r7, lr}
   83e56:	b087      	sub	sp, #28
   83e58:	af00      	add	r7, sp, #0
   83e5a:	6078      	str	r0, [r7, #4]
   83e5c:	460b      	mov	r3, r1
   83e5e:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   83e60:	687b      	ldr	r3, [r7, #4]
   83e62:	699b      	ldr	r3, [r3, #24]
   83e64:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   83e66:	687b      	ldr	r3, [r7, #4]
   83e68:	69db      	ldr	r3, [r3, #28]
   83e6a:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed, we won't block on queue reads.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   83e6c:	78fb      	ldrb	r3, [r7, #3]
   83e6e:	2b07      	cmp	r3, #7
   83e70:	d873      	bhi.n	83f5a <store_can_msg+0x106>
   83e72:	a201      	add	r2, pc, #4	; (adr r2, 83e78 <store_can_msg+0x24>)
   83e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83e78:	00083e99 	.word	0x00083e99
   83e7c:	00083f5b 	.word	0x00083f5b
   83e80:	00083f5b 	.word	0x00083f5b
   83e84:	00083f5b 	.word	0x00083f5b
   83e88:	00083f5b 	.word	0x00083f5b
   83e8c:	00083ec9 	.word	0x00083ec9
   83e90:	00083ef9 	.word	0x00083ef9
   83e94:	00083f29 	.word	0x00083f29
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   83e98:	4b32      	ldr	r3, [pc, #200]	; (83f64 <store_can_msg+0x110>)
   83e9a:	6819      	ldr	r1, [r3, #0]
   83e9c:	f107 0214 	add.w	r2, r7, #20
   83ea0:	f107 030c 	add.w	r3, r7, #12
   83ea4:	4608      	mov	r0, r1
   83ea6:	4611      	mov	r1, r2
   83ea8:	461a      	mov	r2, r3
   83eaa:	2300      	movs	r3, #0
   83eac:	4c2e      	ldr	r4, [pc, #184]	; (83f68 <store_can_msg+0x114>)
   83eae:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   83eb0:	4b2c      	ldr	r3, [pc, #176]	; (83f64 <store_can_msg+0x110>)
   83eb2:	6819      	ldr	r1, [r3, #0]
   83eb4:	f107 0210 	add.w	r2, r7, #16
   83eb8:	f107 030c 	add.w	r3, r7, #12
   83ebc:	4608      	mov	r0, r1
   83ebe:	4611      	mov	r1, r2
   83ec0:	461a      	mov	r2, r3
   83ec2:	2300      	movs	r3, #0
   83ec4:	4c28      	ldr	r4, [pc, #160]	; (83f68 <store_can_msg+0x114>)
   83ec6:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   83ec8:	4b28      	ldr	r3, [pc, #160]	; (83f6c <store_can_msg+0x118>)
   83eca:	6819      	ldr	r1, [r3, #0]
   83ecc:	f107 0214 	add.w	r2, r7, #20
   83ed0:	f107 030c 	add.w	r3, r7, #12
   83ed4:	4608      	mov	r0, r1
   83ed6:	4611      	mov	r1, r2
   83ed8:	461a      	mov	r2, r3
   83eda:	2300      	movs	r3, #0
   83edc:	4c22      	ldr	r4, [pc, #136]	; (83f68 <store_can_msg+0x114>)
   83ede:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   83ee0:	4b22      	ldr	r3, [pc, #136]	; (83f6c <store_can_msg+0x118>)
   83ee2:	6819      	ldr	r1, [r3, #0]
   83ee4:	f107 0210 	add.w	r2, r7, #16
   83ee8:	f107 030c 	add.w	r3, r7, #12
   83eec:	4608      	mov	r0, r1
   83eee:	4611      	mov	r1, r2
   83ef0:	461a      	mov	r2, r3
   83ef2:	2300      	movs	r3, #0
   83ef4:	4c1c      	ldr	r4, [pc, #112]	; (83f68 <store_can_msg+0x114>)
   83ef6:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   83ef8:	4b1d      	ldr	r3, [pc, #116]	; (83f70 <store_can_msg+0x11c>)
   83efa:	6819      	ldr	r1, [r3, #0]
   83efc:	f107 0214 	add.w	r2, r7, #20
   83f00:	f107 030c 	add.w	r3, r7, #12
   83f04:	4608      	mov	r0, r1
   83f06:	4611      	mov	r1, r2
   83f08:	461a      	mov	r2, r3
   83f0a:	2300      	movs	r3, #0
   83f0c:	4c16      	ldr	r4, [pc, #88]	; (83f68 <store_can_msg+0x114>)
   83f0e:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   83f10:	4b17      	ldr	r3, [pc, #92]	; (83f70 <store_can_msg+0x11c>)
   83f12:	6819      	ldr	r1, [r3, #0]
   83f14:	f107 0210 	add.w	r2, r7, #16
   83f18:	f107 030c 	add.w	r3, r7, #12
   83f1c:	4608      	mov	r0, r1
   83f1e:	4611      	mov	r1, r2
   83f20:	461a      	mov	r2, r3
   83f22:	2300      	movs	r3, #0
   83f24:	4c10      	ldr	r4, [pc, #64]	; (83f68 <store_can_msg+0x114>)
   83f26:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   83f28:	4b12      	ldr	r3, [pc, #72]	; (83f74 <store_can_msg+0x120>)
   83f2a:	6819      	ldr	r1, [r3, #0]
   83f2c:	f107 0214 	add.w	r2, r7, #20
   83f30:	f107 030c 	add.w	r3, r7, #12
   83f34:	4608      	mov	r0, r1
   83f36:	4611      	mov	r1, r2
   83f38:	461a      	mov	r2, r3
   83f3a:	2300      	movs	r3, #0
   83f3c:	4c0a      	ldr	r4, [pc, #40]	; (83f68 <store_can_msg+0x114>)
   83f3e:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   83f40:	4b0c      	ldr	r3, [pc, #48]	; (83f74 <store_can_msg+0x120>)
   83f42:	6819      	ldr	r1, [r3, #0]
   83f44:	f107 0210 	add.w	r2, r7, #16
   83f48:	f107 030c 	add.w	r3, r7, #12
   83f4c:	4608      	mov	r0, r1
   83f4e:	4611      	mov	r1, r2
   83f50:	461a      	mov	r2, r3
   83f52:	2300      	movs	r3, #0
   83f54:	4c04      	ldr	r4, [pc, #16]	; (83f68 <store_can_msg+0x114>)
   83f56:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   83f58:	bf00      	nop
   83f5a:	bf00      	nop
	}
	return;
}
   83f5c:	371c      	adds	r7, #28
   83f5e:	46bd      	mov	sp, r7
   83f60:	bd90      	pop	{r4, r7, pc}
   83f62:	bf00      	nop
   83f64:	2007a5f4 	.word	0x2007a5f4
   83f68:	000832a9 	.word	0x000832a9
   83f6c:	2007a668 	.word	0x2007a668
   83f70:	2007a5ac 	.word	0x2007a5ac
   83f74:	2007a658 	.word	0x2007a658

00083f78 <reset_mailbox_conf>:
/************************************************************************/
/* RESET MAILBOX CONFIGURE STRUCTURE                                    */
/************************************************************************/

void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   83f78:	b480      	push	{r7}
   83f7a:	b083      	sub	sp, #12
   83f7c:	af00      	add	r7, sp, #0
   83f7e:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   83f80:	687b      	ldr	r3, [r7, #4]
   83f82:	2200      	movs	r2, #0
   83f84:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   83f86:	687b      	ldr	r3, [r7, #4]
   83f88:	2200      	movs	r2, #0
   83f8a:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   83f8c:	687b      	ldr	r3, [r7, #4]
   83f8e:	2200      	movs	r2, #0
   83f90:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   83f92:	687b      	ldr	r3, [r7, #4]
   83f94:	2200      	movs	r2, #0
   83f96:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   83f98:	687b      	ldr	r3, [r7, #4]
   83f9a:	2200      	movs	r2, #0
   83f9c:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   83f9e:	687b      	ldr	r3, [r7, #4]
   83fa0:	2200      	movs	r2, #0
   83fa2:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   83fa4:	687b      	ldr	r3, [r7, #4]
   83fa6:	2200      	movs	r2, #0
   83fa8:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   83faa:	687b      	ldr	r3, [r7, #4]
   83fac:	2200      	movs	r2, #0
   83fae:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   83fb0:	687b      	ldr	r3, [r7, #4]
   83fb2:	2200      	movs	r2, #0
   83fb4:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   83fb6:	687b      	ldr	r3, [r7, #4]
   83fb8:	2200      	movs	r2, #0
   83fba:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   83fbc:	687b      	ldr	r3, [r7, #4]
   83fbe:	2200      	movs	r2, #0
   83fc0:	61da      	str	r2, [r3, #28]
}
   83fc2:	370c      	adds	r7, #12
   83fc4:	46bd      	mov	sp, r7
   83fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
   83fca:	4770      	bx	lr

00083fcc <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   83fcc:	b480      	push	{r7}
   83fce:	b083      	sub	sp, #12
   83fd0:	af00      	add	r7, sp, #0
   83fd2:	6078      	str	r0, [r7, #4]
   83fd4:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   83fd6:	687b      	ldr	r3, [r7, #4]
   83fd8:	681a      	ldr	r2, [r3, #0]
   83fda:	683b      	ldr	r3, [r7, #0]
   83fdc:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   83fde:	687b      	ldr	r3, [r7, #4]
   83fe0:	791a      	ldrb	r2, [r3, #4]
   83fe2:	683b      	ldr	r3, [r7, #0]
   83fe4:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   83fe6:	687b      	ldr	r3, [r7, #4]
   83fe8:	795a      	ldrb	r2, [r3, #5]
   83fea:	683b      	ldr	r3, [r7, #0]
   83fec:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   83fee:	687b      	ldr	r3, [r7, #4]
   83ff0:	799a      	ldrb	r2, [r3, #6]
   83ff2:	683b      	ldr	r3, [r7, #0]
   83ff4:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   83ff6:	687b      	ldr	r3, [r7, #4]
   83ff8:	79da      	ldrb	r2, [r3, #7]
   83ffa:	683b      	ldr	r3, [r7, #0]
   83ffc:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   83ffe:	687b      	ldr	r3, [r7, #4]
   84000:	689a      	ldr	r2, [r3, #8]
   84002:	683b      	ldr	r3, [r7, #0]
   84004:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   84006:	687b      	ldr	r3, [r7, #4]
   84008:	68da      	ldr	r2, [r3, #12]
   8400a:	683b      	ldr	r3, [r7, #0]
   8400c:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   8400e:	687b      	ldr	r3, [r7, #4]
   84010:	691a      	ldr	r2, [r3, #16]
   84012:	683b      	ldr	r3, [r7, #0]
   84014:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   84016:	687b      	ldr	r3, [r7, #4]
   84018:	695a      	ldr	r2, [r3, #20]
   8401a:	683b      	ldr	r3, [r7, #0]
   8401c:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   8401e:	687b      	ldr	r3, [r7, #4]
   84020:	699a      	ldr	r2, [r3, #24]
   84022:	683b      	ldr	r3, [r7, #0]
   84024:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   84026:	687b      	ldr	r3, [r7, #4]
   84028:	69da      	ldr	r2, [r3, #28]
   8402a:	683b      	ldr	r3, [r7, #0]
   8402c:	61da      	str	r2, [r3, #28]
	
	return;
   8402e:	bf00      	nop
}
   84030:	370c      	adds	r7, #12
   84032:	46bd      	mov	sp, r7
   84034:	f85d 7b04 	ldr.w	r7, [sp], #4
   84038:	4770      	bx	lr
   8403a:	bf00      	nop

0008403c <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   8403c:	b480      	push	{r7}
   8403e:	b083      	sub	sp, #12
   84040:	af00      	add	r7, sp, #0
   84042:	6078      	str	r0, [r7, #4]
   84044:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   84046:	683b      	ldr	r3, [r7, #0]
   84048:	681a      	ldr	r2, [r3, #0]
   8404a:	687b      	ldr	r3, [r7, #4]
   8404c:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   8404e:	683b      	ldr	r3, [r7, #0]
   84050:	791a      	ldrb	r2, [r3, #4]
   84052:	687b      	ldr	r3, [r7, #4]
   84054:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   84056:	683b      	ldr	r3, [r7, #0]
   84058:	795a      	ldrb	r2, [r3, #5]
   8405a:	687b      	ldr	r3, [r7, #4]
   8405c:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   8405e:	683b      	ldr	r3, [r7, #0]
   84060:	799a      	ldrb	r2, [r3, #6]
   84062:	687b      	ldr	r3, [r7, #4]
   84064:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   84066:	683b      	ldr	r3, [r7, #0]
   84068:	79da      	ldrb	r2, [r3, #7]
   8406a:	687b      	ldr	r3, [r7, #4]
   8406c:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   8406e:	683b      	ldr	r3, [r7, #0]
   84070:	689a      	ldr	r2, [r3, #8]
   84072:	687b      	ldr	r3, [r7, #4]
   84074:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   84076:	683b      	ldr	r3, [r7, #0]
   84078:	68da      	ldr	r2, [r3, #12]
   8407a:	687b      	ldr	r3, [r7, #4]
   8407c:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   8407e:	683b      	ldr	r3, [r7, #0]
   84080:	691a      	ldr	r2, [r3, #16]
   84082:	687b      	ldr	r3, [r7, #4]
   84084:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   84086:	683b      	ldr	r3, [r7, #0]
   84088:	695a      	ldr	r2, [r3, #20]
   8408a:	687b      	ldr	r3, [r7, #4]
   8408c:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   8408e:	683b      	ldr	r3, [r7, #0]
   84090:	699a      	ldr	r2, [r3, #24]
   84092:	687b      	ldr	r3, [r7, #4]
   84094:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   84096:	683b      	ldr	r3, [r7, #0]
   84098:	69da      	ldr	r2, [r3, #28]
   8409a:	687b      	ldr	r3, [r7, #4]
   8409c:	61da      	str	r2, [r3, #28]
	
	return;
   8409e:	bf00      	nop
}
   840a0:	370c      	adds	r7, #12
   840a2:	46bd      	mov	sp, r7
   840a4:	f85d 7b04 	ldr.w	r7, [sp], #4
   840a8:	4770      	bx	lr
   840aa:	bf00      	nop

000840ac <can_initialize>:
/*	Initialzies and enables CAN0 & CAN1 transceivers and clocks.	     */
/*	CAN0/CAN1 mailboxes are reset and interrupts are disabled.			 */
/*																		 */
/*************************************************************************/
void can_initialize(void)
{
   840ac:	b580      	push	{r7, lr}
   840ae:	b086      	sub	sp, #24
   840b0:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   840b2:	2301      	movs	r3, #1
   840b4:	613b      	str	r3, [r7, #16]
   840b6:	2300      	movs	r3, #0
   840b8:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   840ba:	4853      	ldr	r0, [pc, #332]	; (84208 <can_initialize+0x15c>)
   840bc:	2134      	movs	r1, #52	; 0x34
   840be:	4b53      	ldr	r3, [pc, #332]	; (8420c <can_initialize+0x160>)
   840c0:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   840c2:	4851      	ldr	r0, [pc, #324]	; (84208 <can_initialize+0x15c>)
   840c4:	2135      	movs	r1, #53	; 0x35
   840c6:	4b52      	ldr	r3, [pc, #328]	; (84210 <can_initialize+0x164>)
   840c8:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   840ca:	484f      	ldr	r0, [pc, #316]	; (84208 <can_initialize+0x15c>)
   840cc:	4b51      	ldr	r3, [pc, #324]	; (84214 <can_initialize+0x168>)
   840ce:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   840d0:	484d      	ldr	r0, [pc, #308]	; (84208 <can_initialize+0x15c>)
   840d2:	4b51      	ldr	r3, [pc, #324]	; (84218 <can_initialize+0x16c>)
   840d4:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   840d6:	4851      	ldr	r0, [pc, #324]	; (8421c <can_initialize+0x170>)
   840d8:	218f      	movs	r1, #143	; 0x8f
   840da:	4b4c      	ldr	r3, [pc, #304]	; (8420c <can_initialize+0x160>)
   840dc:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   840de:	484f      	ldr	r0, [pc, #316]	; (8421c <can_initialize+0x170>)
   840e0:	2190      	movs	r1, #144	; 0x90
   840e2:	4b4b      	ldr	r3, [pc, #300]	; (84210 <can_initialize+0x164>)
   840e4:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   840e6:	484d      	ldr	r0, [pc, #308]	; (8421c <can_initialize+0x170>)
   840e8:	4b4a      	ldr	r3, [pc, #296]	; (84214 <can_initialize+0x168>)
   840ea:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   840ec:	484b      	ldr	r0, [pc, #300]	; (8421c <can_initialize+0x170>)
   840ee:	4b4a      	ldr	r3, [pc, #296]	; (84218 <can_initialize+0x16c>)
   840f0:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   840f2:	202b      	movs	r0, #43	; 0x2b
   840f4:	4b4a      	ldr	r3, [pc, #296]	; (84220 <can_initialize+0x174>)
   840f6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   840f8:	202c      	movs	r0, #44	; 0x2c
   840fa:	4b49      	ldr	r3, [pc, #292]	; (84220 <can_initialize+0x174>)
   840fc:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   840fe:	4b49      	ldr	r3, [pc, #292]	; (84224 <can_initialize+0x178>)
   84100:	4798      	blx	r3
   84102:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84104:	4848      	ldr	r0, [pc, #288]	; (84228 <can_initialize+0x17c>)
   84106:	68f9      	ldr	r1, [r7, #12]
   84108:	22fa      	movs	r2, #250	; 0xfa
   8410a:	4b48      	ldr	r3, [pc, #288]	; (8422c <can_initialize+0x180>)
   8410c:	4798      	blx	r3
   8410e:	4603      	mov	r3, r0
   84110:	2b00      	cmp	r3, #0
   84112:	d074      	beq.n	841fe <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   84114:	4846      	ldr	r0, [pc, #280]	; (84230 <can_initialize+0x184>)
   84116:	68f9      	ldr	r1, [r7, #12]
   84118:	22fa      	movs	r2, #250	; 0xfa
   8411a:	4b44      	ldr	r3, [pc, #272]	; (8422c <can_initialize+0x180>)
   8411c:	4798      	blx	r3
   8411e:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84120:	2b00      	cmp	r3, #0
   84122:	d06c      	beq.n	841fe <can_initialize+0x152>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84124:	4840      	ldr	r0, [pc, #256]	; (84228 <can_initialize+0x17c>)
   84126:	f04f 31ff 	mov.w	r1, #4294967295
   8412a:	4b42      	ldr	r3, [pc, #264]	; (84234 <can_initialize+0x188>)
   8412c:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8412e:	4840      	ldr	r0, [pc, #256]	; (84230 <can_initialize+0x184>)
   84130:	f04f 31ff 	mov.w	r1, #4294967295
   84134:	4b3f      	ldr	r3, [pc, #252]	; (84234 <can_initialize+0x188>)
   84136:	4798      	blx	r3
			
		NVIC_EnableIRQ(CAN0_IRQn);
   84138:	202b      	movs	r0, #43	; 0x2b
   8413a:	4b3f      	ldr	r3, [pc, #252]	; (84238 <can_initialize+0x18c>)
   8413c:	4798      	blx	r3
		NVIC_EnableIRQ(CAN1_IRQn);
   8413e:	202c      	movs	r0, #44	; 0x2c
   84140:	4b3d      	ldr	r3, [pc, #244]	; (84238 <can_initialize+0x18c>)
   84142:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   84144:	4838      	ldr	r0, [pc, #224]	; (84228 <can_initialize+0x17c>)
   84146:	4b3d      	ldr	r3, [pc, #244]	; (8423c <can_initialize+0x190>)
   84148:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   8414a:	4839      	ldr	r0, [pc, #228]	; (84230 <can_initialize+0x184>)
   8414c:	4b3b      	ldr	r3, [pc, #236]	; (8423c <can_initialize+0x190>)
   8414e:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   84150:	6938      	ldr	r0, [r7, #16]
   84152:	4b3b      	ldr	r3, [pc, #236]	; (84240 <can_initialize+0x194>)
   84154:	4798      	blx	r3
   84156:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   84158:	4b3a      	ldr	r3, [pc, #232]	; (84244 <can_initialize+0x198>)
   8415a:	2200      	movs	r2, #0
   8415c:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   8415e:	4b3a      	ldr	r3, [pc, #232]	; (84248 <can_initialize+0x19c>)
   84160:	2200      	movs	r2, #0
   84162:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   84164:	4b39      	ldr	r3, [pc, #228]	; (8424c <can_initialize+0x1a0>)
   84166:	2200      	movs	r2, #0
   84168:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   8416a:	4b39      	ldr	r3, [pc, #228]	; (84250 <can_initialize+0x1a4>)
   8416c:	2200      	movs	r2, #0
   8416e:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   84170:	4b38      	ldr	r3, [pc, #224]	; (84254 <can_initialize+0x1a8>)
   84172:	2200      	movs	r2, #0
   84174:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   84176:	4b38      	ldr	r3, [pc, #224]	; (84258 <can_initialize+0x1ac>)
   84178:	2200      	movs	r2, #0
   8417a:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   8417c:	2300      	movs	r3, #0
   8417e:	617b      	str	r3, [r7, #20]
   84180:	e016      	b.n	841b0 <can_initialize+0x104>
		{
			glob_stored_data[i] = 0;
   84182:	4b36      	ldr	r3, [pc, #216]	; (8425c <can_initialize+0x1b0>)
   84184:	697a      	ldr	r2, [r7, #20]
   84186:	2100      	movs	r1, #0
   84188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   8418c:	4b34      	ldr	r3, [pc, #208]	; (84260 <can_initialize+0x1b4>)
   8418e:	697a      	ldr	r2, [r7, #20]
   84190:	2100      	movs	r1, #0
   84192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   84196:	4b33      	ldr	r3, [pc, #204]	; (84264 <can_initialize+0x1b8>)
   84198:	697a      	ldr	r2, [r7, #20]
   8419a:	2100      	movs	r1, #0
   8419c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   841a0:	4b31      	ldr	r3, [pc, #196]	; (84268 <can_initialize+0x1bc>)
   841a2:	697a      	ldr	r2, [r7, #20]
   841a4:	2100      	movs	r1, #0
   841a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   841aa:	697b      	ldr	r3, [r7, #20]
   841ac:	3301      	adds	r3, #1
   841ae:	617b      	str	r3, [r7, #20]
   841b0:	697b      	ldr	r3, [r7, #20]
   841b2:	2b01      	cmp	r3, #1
   841b4:	d9e5      	bls.n	84182 <can_initialize+0xd6>
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}
		
		/* Initialize global CAN FIFOs			*/
		fifo_length = 100;		// Max number of items in the FIFO.
   841b6:	2364      	movs	r3, #100	; 0x64
   841b8:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items (4 bytes).
   841ba:	2304      	movs	r3, #4
   841bc:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   841be:	68b8      	ldr	r0, [r7, #8]
   841c0:	6879      	ldr	r1, [r7, #4]
   841c2:	2200      	movs	r2, #0
   841c4:	4b29      	ldr	r3, [pc, #164]	; (8426c <can_initialize+0x1c0>)
   841c6:	4798      	blx	r3
   841c8:	4602      	mov	r2, r0
   841ca:	4b29      	ldr	r3, [pc, #164]	; (84270 <can_initialize+0x1c4>)
   841cc:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   841ce:	68b8      	ldr	r0, [r7, #8]
   841d0:	6879      	ldr	r1, [r7, #4]
   841d2:	2200      	movs	r2, #0
   841d4:	4b25      	ldr	r3, [pc, #148]	; (8426c <can_initialize+0x1c0>)
   841d6:	4798      	blx	r3
   841d8:	4602      	mov	r2, r0
   841da:	4b26      	ldr	r3, [pc, #152]	; (84274 <can_initialize+0x1c8>)
   841dc:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   841de:	68b8      	ldr	r0, [r7, #8]
   841e0:	6879      	ldr	r1, [r7, #4]
   841e2:	2200      	movs	r2, #0
   841e4:	4b21      	ldr	r3, [pc, #132]	; (8426c <can_initialize+0x1c0>)
   841e6:	4798      	blx	r3
   841e8:	4602      	mov	r2, r0
   841ea:	4b23      	ldr	r3, [pc, #140]	; (84278 <can_initialize+0x1cc>)
   841ec:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   841ee:	68b8      	ldr	r0, [r7, #8]
   841f0:	6879      	ldr	r1, [r7, #4]
   841f2:	2200      	movs	r2, #0
   841f4:	4b1d      	ldr	r3, [pc, #116]	; (8426c <can_initialize+0x1c0>)
   841f6:	4798      	blx	r3
   841f8:	4602      	mov	r2, r0
   841fa:	4b20      	ldr	r3, [pc, #128]	; (8427c <can_initialize+0x1d0>)
   841fc:	601a      	str	r2, [r3, #0]
		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   841fe:	bf00      	nop
}
   84200:	3718      	adds	r7, #24
   84202:	46bd      	mov	sp, r7
   84204:	bd80      	pop	{r7, pc}
   84206:	bf00      	nop
   84208:	2007a68c 	.word	0x2007a68c
   8420c:	00081731 	.word	0x00081731
   84210:	0008174d 	.word	0x0008174d
   84214:	00081785 	.word	0x00081785
   84218:	00081769 	.word	0x00081769
   8421c:	2007a5e0 	.word	0x2007a5e0
   84220:	000824bd 	.word	0x000824bd
   84224:	00083aed 	.word	0x00083aed
   84228:	400b4000 	.word	0x400b4000
   8422c:	000818f1 	.word	0x000818f1
   84230:	400b8000 	.word	0x400b8000
   84234:	000819d5 	.word	0x000819d5
   84238:	00083a2d 	.word	0x00083a2d
   8423c:	00081c4d 	.word	0x00081c4d
   84240:	00084281 	.word	0x00084281
   84244:	2007a5dc 	.word	0x2007a5dc
   84248:	2007a5e8 	.word	0x2007a5e8
   8424c:	2007a654 	.word	0x2007a654
   84250:	2007a5b8 	.word	0x2007a5b8
   84254:	2007a61c 	.word	0x2007a61c
   84258:	2007a5e9 	.word	0x2007a5e9
   8425c:	2007a5b0 	.word	0x2007a5b0
   84260:	2007a660 	.word	0x2007a660
   84264:	2007a5ec 	.word	0x2007a5ec
   84268:	2007a620 	.word	0x2007a620
   8426c:	0008321d 	.word	0x0008321d
   84270:	2007a5f4 	.word	0x2007a5f4
   84274:	2007a668 	.word	0x2007a668
   84278:	2007a5ac 	.word	0x2007a5ac
   8427c:	2007a658 	.word	0x2007a658

00084280 <can_init_mailboxes>:
/*	This function initializes the different CAN mailbboxes.			    */
/* 																        */
/************************************************************************/

uint32_t can_init_mailboxes(uint32_t x)
{
   84280:	b580      	push	{r7, lr}
   84282:	b082      	sub	sp, #8
   84284:	af00      	add	r7, sp, #0
   84286:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   84288:	484a      	ldr	r0, [pc, #296]	; (843b4 <can_init_mailboxes+0x134>)
   8428a:	4b4b      	ldr	r3, [pc, #300]	; (843b8 <can_init_mailboxes+0x138>)
   8428c:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   8428e:	4b49      	ldr	r3, [pc, #292]	; (843b4 <can_init_mailboxes+0x134>)
   84290:	2207      	movs	r2, #7
   84292:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84294:	4b47      	ldr	r3, [pc, #284]	; (843b4 <can_init_mailboxes+0x134>)
   84296:	2203      	movs	r2, #3
   84298:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   8429a:	4b46      	ldr	r3, [pc, #280]	; (843b4 <can_init_mailboxes+0x134>)
   8429c:	2205      	movs	r2, #5
   8429e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   842a0:	4b44      	ldr	r3, [pc, #272]	; (843b4 <can_init_mailboxes+0x134>)
   842a2:	2200      	movs	r2, #0
   842a4:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   842a6:	4b43      	ldr	r3, [pc, #268]	; (843b4 <can_init_mailboxes+0x134>)
   842a8:	2200      	movs	r2, #0
   842aa:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   842ac:	4843      	ldr	r0, [pc, #268]	; (843bc <can_init_mailboxes+0x13c>)
   842ae:	4941      	ldr	r1, [pc, #260]	; (843b4 <can_init_mailboxes+0x134>)
   842b0:	4b43      	ldr	r3, [pc, #268]	; (843c0 <can_init_mailboxes+0x140>)
   842b2:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   842b4:	4843      	ldr	r0, [pc, #268]	; (843c4 <can_init_mailboxes+0x144>)
   842b6:	4b40      	ldr	r3, [pc, #256]	; (843b8 <can_init_mailboxes+0x138>)
   842b8:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   842ba:	4b42      	ldr	r3, [pc, #264]	; (843c4 <can_init_mailboxes+0x144>)
   842bc:	2200      	movs	r2, #0
   842be:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   842c0:	4b40      	ldr	r3, [pc, #256]	; (843c4 <can_init_mailboxes+0x144>)
   842c2:	2201      	movs	r2, #1
   842c4:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   842c6:	4b3f      	ldr	r3, [pc, #252]	; (843c4 <can_init_mailboxes+0x144>)
   842c8:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   842cc:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   842ce:	4b3d      	ldr	r3, [pc, #244]	; (843c4 <can_init_mailboxes+0x144>)
   842d0:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   842d4:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   842d6:	483c      	ldr	r0, [pc, #240]	; (843c8 <can_init_mailboxes+0x148>)
   842d8:	493a      	ldr	r1, [pc, #232]	; (843c4 <can_init_mailboxes+0x144>)
   842da:	4b39      	ldr	r3, [pc, #228]	; (843c0 <can_init_mailboxes+0x140>)
   842dc:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   842de:	4839      	ldr	r0, [pc, #228]	; (843c4 <can_init_mailboxes+0x144>)
   842e0:	4b35      	ldr	r3, [pc, #212]	; (843b8 <can_init_mailboxes+0x138>)
   842e2:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   842e4:	4b37      	ldr	r3, [pc, #220]	; (843c4 <can_init_mailboxes+0x144>)
   842e6:	2205      	movs	r2, #5
   842e8:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   842ea:	4b36      	ldr	r3, [pc, #216]	; (843c4 <can_init_mailboxes+0x144>)
   842ec:	2201      	movs	r2, #1
   842ee:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   842f0:	4b34      	ldr	r3, [pc, #208]	; (843c4 <can_init_mailboxes+0x144>)
   842f2:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   842f6:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   842f8:	4b32      	ldr	r3, [pc, #200]	; (843c4 <can_init_mailboxes+0x144>)
   842fa:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   842fe:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   84300:	4831      	ldr	r0, [pc, #196]	; (843c8 <can_init_mailboxes+0x148>)
   84302:	4930      	ldr	r1, [pc, #192]	; (843c4 <can_init_mailboxes+0x144>)
   84304:	4b2e      	ldr	r3, [pc, #184]	; (843c0 <can_init_mailboxes+0x140>)
   84306:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   84308:	482e      	ldr	r0, [pc, #184]	; (843c4 <can_init_mailboxes+0x144>)
   8430a:	4b2b      	ldr	r3, [pc, #172]	; (843b8 <can_init_mailboxes+0x138>)
   8430c:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   8430e:	4b2d      	ldr	r3, [pc, #180]	; (843c4 <can_init_mailboxes+0x144>)
   84310:	2206      	movs	r2, #6
   84312:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84314:	4b2b      	ldr	r3, [pc, #172]	; (843c4 <can_init_mailboxes+0x144>)
   84316:	2201      	movs	r2, #1
   84318:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8431a:	4b2a      	ldr	r3, [pc, #168]	; (843c4 <can_init_mailboxes+0x144>)
   8431c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84320:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   84322:	4b28      	ldr	r3, [pc, #160]	; (843c4 <can_init_mailboxes+0x144>)
   84324:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   84328:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8432a:	4827      	ldr	r0, [pc, #156]	; (843c8 <can_init_mailboxes+0x148>)
   8432c:	4925      	ldr	r1, [pc, #148]	; (843c4 <can_init_mailboxes+0x144>)
   8432e:	4b24      	ldr	r3, [pc, #144]	; (843c0 <can_init_mailboxes+0x140>)
   84330:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   84332:	4824      	ldr	r0, [pc, #144]	; (843c4 <can_init_mailboxes+0x144>)
   84334:	4b20      	ldr	r3, [pc, #128]	; (843b8 <can_init_mailboxes+0x138>)
   84336:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   84338:	4b22      	ldr	r3, [pc, #136]	; (843c4 <can_init_mailboxes+0x144>)
   8433a:	2207      	movs	r2, #7
   8433c:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   8433e:	4b21      	ldr	r3, [pc, #132]	; (843c4 <can_init_mailboxes+0x144>)
   84340:	2201      	movs	r2, #1
   84342:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   84344:	4b1f      	ldr	r3, [pc, #124]	; (843c4 <can_init_mailboxes+0x144>)
   84346:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   8434a:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   8434c:	4b1d      	ldr	r3, [pc, #116]	; (843c4 <can_init_mailboxes+0x144>)
   8434e:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   84352:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   84354:	481c      	ldr	r0, [pc, #112]	; (843c8 <can_init_mailboxes+0x148>)
   84356:	491b      	ldr	r1, [pc, #108]	; (843c4 <can_init_mailboxes+0x144>)
   84358:	4b19      	ldr	r3, [pc, #100]	; (843c0 <can_init_mailboxes+0x140>)
   8435a:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   8435c:	481a      	ldr	r0, [pc, #104]	; (843c8 <can_init_mailboxes+0x148>)
   8435e:	2101      	movs	r1, #1
   84360:	4b1a      	ldr	r3, [pc, #104]	; (843cc <can_init_mailboxes+0x14c>)
   84362:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   84364:	4818      	ldr	r0, [pc, #96]	; (843c8 <can_init_mailboxes+0x148>)
   84366:	2120      	movs	r1, #32
   84368:	4b18      	ldr	r3, [pc, #96]	; (843cc <can_init_mailboxes+0x14c>)
   8436a:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   8436c:	4816      	ldr	r0, [pc, #88]	; (843c8 <can_init_mailboxes+0x148>)
   8436e:	2140      	movs	r1, #64	; 0x40
   84370:	4b16      	ldr	r3, [pc, #88]	; (843cc <can_init_mailboxes+0x14c>)
   84372:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   84374:	4814      	ldr	r0, [pc, #80]	; (843c8 <can_init_mailboxes+0x148>)
   84376:	2180      	movs	r1, #128	; 0x80
   84378:	4b14      	ldr	r3, [pc, #80]	; (843cc <can_init_mailboxes+0x14c>)
   8437a:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   8437c:	480d      	ldr	r0, [pc, #52]	; (843b4 <can_init_mailboxes+0x134>)
   8437e:	4b0e      	ldr	r3, [pc, #56]	; (843b8 <can_init_mailboxes+0x138>)
   84380:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   84382:	4b0c      	ldr	r3, [pc, #48]	; (843b4 <can_init_mailboxes+0x134>)
   84384:	2206      	movs	r2, #6
   84386:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84388:	4b0a      	ldr	r3, [pc, #40]	; (843b4 <can_init_mailboxes+0x134>)
   8438a:	2203      	movs	r2, #3
   8438c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   8438e:	4b09      	ldr	r3, [pc, #36]	; (843b4 <can_init_mailboxes+0x134>)
   84390:	2214      	movs	r2, #20
   84392:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   84394:	4b07      	ldr	r3, [pc, #28]	; (843b4 <can_init_mailboxes+0x134>)
   84396:	2200      	movs	r2, #0
   84398:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   8439a:	4b06      	ldr	r3, [pc, #24]	; (843b4 <can_init_mailboxes+0x134>)
   8439c:	2200      	movs	r2, #0
   8439e:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   843a0:	4806      	ldr	r0, [pc, #24]	; (843bc <can_init_mailboxes+0x13c>)
   843a2:	4904      	ldr	r1, [pc, #16]	; (843b4 <can_init_mailboxes+0x134>)
   843a4:	4b06      	ldr	r3, [pc, #24]	; (843c0 <can_init_mailboxes+0x140>)
   843a6:	4798      	blx	r3

	return 1;
   843a8:	2301      	movs	r3, #1
}
   843aa:	4618      	mov	r0, r3
   843ac:	3708      	adds	r7, #8
   843ae:	46bd      	mov	sp, r7
   843b0:	bd80      	pop	{r7, pc}
   843b2:	bf00      	nop
   843b4:	2007a628 	.word	0x2007a628
   843b8:	00083f79 	.word	0x00083f79
   843bc:	400b4000 	.word	0x400b4000
   843c0:	00081a69 	.word	0x00081a69
   843c4:	2007a5bc 	.word	0x2007a5bc
   843c8:	400b8000 	.word	0x400b8000
   843cc:	000819b9 	.word	0x000819b9

000843d0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   843d0:	b480      	push	{r7}
   843d2:	b085      	sub	sp, #20
   843d4:	af00      	add	r7, sp, #0
   843d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   843d8:	687b      	ldr	r3, [r7, #4]
   843da:	f003 0307 	and.w	r3, r3, #7
   843de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   843e0:	4b0c      	ldr	r3, [pc, #48]	; (84414 <NVIC_SetPriorityGrouping+0x44>)
   843e2:	68db      	ldr	r3, [r3, #12]
   843e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   843e6:	68ba      	ldr	r2, [r7, #8]
   843e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   843ec:	4013      	ands	r3, r2
   843ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   843f0:	68fb      	ldr	r3, [r7, #12]
   843f2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   843f4:	68bb      	ldr	r3, [r7, #8]
   843f6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   843f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   843fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   84400:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   84402:	4b04      	ldr	r3, [pc, #16]	; (84414 <NVIC_SetPriorityGrouping+0x44>)
   84404:	68ba      	ldr	r2, [r7, #8]
   84406:	60da      	str	r2, [r3, #12]
}
   84408:	3714      	adds	r7, #20
   8440a:	46bd      	mov	sp, r7
   8440c:	f85d 7b04 	ldr.w	r7, [sp], #4
   84410:	4770      	bx	lr
   84412:	bf00      	nop
   84414:	e000ed00 	.word	0xe000ed00

00084418 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   84418:	b480      	push	{r7}
   8441a:	b083      	sub	sp, #12
   8441c:	af00      	add	r7, sp, #0
   8441e:	4603      	mov	r3, r0
   84420:	6039      	str	r1, [r7, #0]
   84422:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   84424:	f997 3007 	ldrsb.w	r3, [r7, #7]
   84428:	2b00      	cmp	r3, #0
   8442a:	da0b      	bge.n	84444 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   8442c:	490d      	ldr	r1, [pc, #52]	; (84464 <NVIC_SetPriority+0x4c>)
   8442e:	79fb      	ldrb	r3, [r7, #7]
   84430:	f003 030f 	and.w	r3, r3, #15
   84434:	3b04      	subs	r3, #4
   84436:	683a      	ldr	r2, [r7, #0]
   84438:	b2d2      	uxtb	r2, r2
   8443a:	0112      	lsls	r2, r2, #4
   8443c:	b2d2      	uxtb	r2, r2
   8443e:	440b      	add	r3, r1
   84440:	761a      	strb	r2, [r3, #24]
   84442:	e009      	b.n	84458 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   84444:	4908      	ldr	r1, [pc, #32]	; (84468 <NVIC_SetPriority+0x50>)
   84446:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8444a:	683a      	ldr	r2, [r7, #0]
   8444c:	b2d2      	uxtb	r2, r2
   8444e:	0112      	lsls	r2, r2, #4
   84450:	b2d2      	uxtb	r2, r2
   84452:	440b      	add	r3, r1
   84454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   84458:	370c      	adds	r7, #12
   8445a:	46bd      	mov	sp, r7
   8445c:	f85d 7b04 	ldr.w	r7, [sp], #4
   84460:	4770      	bx	lr
   84462:	bf00      	nop
   84464:	e000ed00 	.word	0xe000ed00
   84468:	e000e100 	.word	0xe000e100

0008446c <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   8446c:	b480      	push	{r7}
   8446e:	b083      	sub	sp, #12
   84470:	af00      	add	r7, sp, #0
   84472:	4603      	mov	r3, r0
   84474:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   84476:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8447a:	2b00      	cmp	r3, #0
   8447c:	da0a      	bge.n	84494 <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   8447e:	4a0d      	ldr	r2, [pc, #52]	; (844b4 <NVIC_GetPriority+0x48>)
   84480:	79fb      	ldrb	r3, [r7, #7]
   84482:	f003 030f 	and.w	r3, r3, #15
   84486:	3b04      	subs	r3, #4
   84488:	4413      	add	r3, r2
   8448a:	7e1b      	ldrb	r3, [r3, #24]
   8448c:	b2db      	uxtb	r3, r3
   8448e:	091b      	lsrs	r3, r3, #4
   84490:	b2db      	uxtb	r3, r3
   84492:	e008      	b.n	844a6 <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   84494:	4a08      	ldr	r2, [pc, #32]	; (844b8 <NVIC_GetPriority+0x4c>)
   84496:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8449a:	4413      	add	r3, r2
   8449c:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   844a0:	b2db      	uxtb	r3, r3
   844a2:	091b      	lsrs	r3, r3, #4
   844a4:	b2db      	uxtb	r3, r3
}
   844a6:	4618      	mov	r0, r3
   844a8:	370c      	adds	r7, #12
   844aa:	46bd      	mov	sp, r7
   844ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   844b0:	4770      	bx	lr
   844b2:	bf00      	nop
   844b4:	e000ed00 	.word	0xe000ed00
   844b8:	e000e100 	.word	0xe000e100

000844bc <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   844bc:	b580      	push	{r7, lr}
   844be:	b082      	sub	sp, #8
   844c0:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   844c2:	4b07      	ldr	r3, [pc, #28]	; (844e0 <main+0x24>)
   844c4:	2200      	movs	r2, #0
   844c6:	601a      	str	r2, [r3, #0]
	safe_mode();
   844c8:	4b06      	ldr	r3, [pc, #24]	; (844e4 <main+0x28>)
   844ca:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   844cc:	4b06      	ldr	r3, [pc, #24]	; (844e8 <main+0x2c>)
   844ce:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   844d0:	4b06      	ldr	r3, [pc, #24]	; (844ec <main+0x30>)
   844d2:	4798      	blx	r3
	
	while (1)
	{
		struct timestamp t;
		rtc_get(&t);
   844d4:	463b      	mov	r3, r7
   844d6:	4618      	mov	r0, r3
   844d8:	4b05      	ldr	r3, [pc, #20]	; (844f0 <main+0x34>)
   844da:	4798      	blx	r3
	}
   844dc:	e7fa      	b.n	844d4 <main+0x18>
   844de:	bf00      	nop
   844e0:	2007a650 	.word	0x2007a650
   844e4:	000844f5 	.word	0x000844f5
   844e8:	00084571 	.word	0x00084571
   844ec:	00084541 	.word	0x00084541
   844f0:	0008076d 	.word	0x0008076d

000844f4 <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   844f4:	b580      	push	{r7, lr}
   844f6:	b084      	sub	sp, #16
   844f8:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   844fa:	4b0b      	ldr	r3, [pc, #44]	; (84528 <safe_mode+0x34>)
   844fc:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   844fe:	2000      	movs	r0, #0
   84500:	4b0a      	ldr	r3, [pc, #40]	; (8452c <safe_mode+0x38>)
   84502:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   84504:	4b0a      	ldr	r3, [pc, #40]	; (84530 <safe_mode+0x3c>)
   84506:	4798      	blx	r3
	
	uint32_t timeOut, low, high;
	
	timeOut = 80000000;
   84508:	4b0a      	ldr	r3, [pc, #40]	; (84534 <safe_mode+0x40>)
   8450a:	60fb      	str	r3, [r7, #12]
	
	
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   8450c:	4b0a      	ldr	r3, [pc, #40]	; (84538 <safe_mode+0x44>)
   8450e:	4798      	blx	r3
		
		
	//Debugging Stuff
	uint16_t MEM_LOCATION = 0x00080000;
   84510:	2300      	movs	r3, #0
   84512:	817b      	strh	r3, [r7, #10]
	size_t SIZE = 10;
   84514:	230a      	movs	r3, #10
   84516:	607b      	str	r3, [r7, #4]
	
	//uint32_t a;
	//a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   84518:	bf00      	nop
   8451a:	4b08      	ldr	r3, [pc, #32]	; (8453c <safe_mode+0x48>)
   8451c:	681b      	ldr	r3, [r3, #0]
   8451e:	2b00      	cmp	r3, #0
   84520:	d1fb      	bne.n	8451a <safe_mode+0x26>
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
		*/
	}
}
   84522:	3710      	adds	r7, #16
   84524:	46bd      	mov	sp, r7
   84526:	bd80      	pop	{r7, pc}
   84528:	000815a5 	.word	0x000815a5
   8452c:	000843d1 	.word	0x000843d1
   84530:	0008160d 	.word	0x0008160d
   84534:	04c4b400 	.word	0x04c4b400
   84538:	000840ad 	.word	0x000840ad
   8453c:	2007a650 	.word	0x2007a650

00084540 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   84540:	b580      	push	{r7, lr}
   84542:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   84544:	4b05      	ldr	r3, [pc, #20]	; (8455c <prvSetupHardware+0x1c>)
   84546:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   84548:	4b05      	ldr	r3, [pc, #20]	; (84560 <prvSetupHardware+0x20>)
   8454a:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   8454c:	4b05      	ldr	r3, [pc, #20]	; (84564 <prvSetupHardware+0x24>)
   8454e:	4798      	blx	r3
	
	/* Initilize SPI related registers and functions. */
	spi_initialize();
   84550:	4b05      	ldr	r3, [pc, #20]	; (84568 <prvSetupHardware+0x28>)
   84552:	4798      	blx	r3
	
	/* Initialize RTC registers and set the default initial time. */
	rtc_init(DS3234_INTCN);
   84554:	2004      	movs	r0, #4
   84556:	4b05      	ldr	r3, [pc, #20]	; (8456c <prvSetupHardware+0x2c>)
   84558:	4798      	blx	r3
}
   8455a:	bd80      	pop	{r7, pc}
   8455c:	00081675 	.word	0x00081675
   84560:	00080571 	.word	0x00080571
   84564:	00081225 	.word	0x00081225
   84568:	00080b99 	.word	0x00080b99
   8456c:	000806a1 	.word	0x000806a1

00084570 <prvInitializeInterruptPriorities>:
	Can1_Mutex = xSemaphoreCreateBinary();
	return;
}

static void prvInitializeInterruptPriorities(void)
{
   84570:	b580      	push	{r7, lr}
   84572:	b082      	sub	sp, #8
   84574:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   84576:	230b      	movs	r3, #11
   84578:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   8457a:	232c      	movs	r3, #44	; 0x2c
   8457c:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   8457e:	232b      	movs	r3, #43	; 0x2b
   84580:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   84582:	f997 3003 	ldrsb.w	r3, [r7, #3]
   84586:	4618      	mov	r0, r3
   84588:	6879      	ldr	r1, [r7, #4]
   8458a:	4b0a      	ldr	r3, [pc, #40]	; (845b4 <prvInitializeInterruptPriorities+0x44>)
   8458c:	4798      	blx	r3
	
	priority = 12;	
   8458e:	230c      	movs	r3, #12
   84590:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   84592:	f997 3002 	ldrsb.w	r3, [r7, #2]
   84596:	4618      	mov	r0, r3
   84598:	6879      	ldr	r1, [r7, #4]
   8459a:	4b06      	ldr	r3, [pc, #24]	; (845b4 <prvInitializeInterruptPriorities+0x44>)
   8459c:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   8459e:	f997 3003 	ldrsb.w	r3, [r7, #3]
   845a2:	4618      	mov	r0, r3
   845a4:	4b04      	ldr	r3, [pc, #16]	; (845b8 <prvInitializeInterruptPriorities+0x48>)
   845a6:	4798      	blx	r3
   845a8:	6078      	str	r0, [r7, #4]
	
	return;
   845aa:	bf00      	nop
}
   845ac:	3708      	adds	r7, #8
   845ae:	46bd      	mov	sp, r7
   845b0:	bd80      	pop	{r7, pc}
   845b2:	bf00      	nop
   845b4:	00084419 	.word	0x00084419
   845b8:	0008446d 	.word	0x0008446d

000845bc <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   845bc:	b580      	push	{r7, lr}
   845be:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   845c0:	4b01      	ldr	r3, [pc, #4]	; (845c8 <vApplicationMallocFailedHook+0xc>)
   845c2:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   845c4:	e7fe      	b.n	845c4 <vApplicationMallocFailedHook+0x8>
   845c6:	bf00      	nop
   845c8:	00082cd5 	.word	0x00082cd5

000845cc <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   845cc:	b580      	push	{r7, lr}
   845ce:	b082      	sub	sp, #8
   845d0:	af00      	add	r7, sp, #0
   845d2:	6078      	str	r0, [r7, #4]
   845d4:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   845d6:	4b01      	ldr	r3, [pc, #4]	; (845dc <vApplicationStackOverflowHook+0x10>)
   845d8:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   845da:	e7fe      	b.n	845da <vApplicationStackOverflowHook+0xe>
   845dc:	00082cd5 	.word	0x00082cd5

000845e0 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   845e0:	b580      	push	{r7, lr}
   845e2:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   845e4:	4804      	ldr	r0, [pc, #16]	; (845f8 <WDT_Handler+0x18>)
   845e6:	4b05      	ldr	r3, [pc, #20]	; (845fc <WDT_Handler+0x1c>)
   845e8:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   845ea:	2055      	movs	r0, #85	; 0x55
   845ec:	4b04      	ldr	r3, [pc, #16]	; (84600 <WDT_Handler+0x20>)
   845ee:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   845f0:	4801      	ldr	r0, [pc, #4]	; (845f8 <WDT_Handler+0x18>)
   845f2:	4b04      	ldr	r3, [pc, #16]	; (84604 <WDT_Handler+0x24>)
   845f4:	4798      	blx	r3
}
   845f6:	bd80      	pop	{r7, pc}
   845f8:	400e1a50 	.word	0x400e1a50
   845fc:	00082851 	.word	0x00082851
   84600:	00081ed1 	.word	0x00081ed1
   84604:	00082829 	.word	0x00082829

00084608 <__aeabi_frsub>:
   84608:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   8460c:	e002      	b.n	84614 <__addsf3>
   8460e:	bf00      	nop

00084610 <__aeabi_fsub>:
   84610:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084614 <__addsf3>:
   84614:	0042      	lsls	r2, r0, #1
   84616:	bf1f      	itttt	ne
   84618:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   8461c:	ea92 0f03 	teqne	r2, r3
   84620:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84624:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84628:	d06a      	beq.n	84700 <__addsf3+0xec>
   8462a:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8462e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   84632:	bfc1      	itttt	gt
   84634:	18d2      	addgt	r2, r2, r3
   84636:	4041      	eorgt	r1, r0
   84638:	4048      	eorgt	r0, r1
   8463a:	4041      	eorgt	r1, r0
   8463c:	bfb8      	it	lt
   8463e:	425b      	neglt	r3, r3
   84640:	2b19      	cmp	r3, #25
   84642:	bf88      	it	hi
   84644:	4770      	bxhi	lr
   84646:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   8464a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8464e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   84652:	bf18      	it	ne
   84654:	4240      	negne	r0, r0
   84656:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8465a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8465e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   84662:	bf18      	it	ne
   84664:	4249      	negne	r1, r1
   84666:	ea92 0f03 	teq	r2, r3
   8466a:	d03f      	beq.n	846ec <__addsf3+0xd8>
   8466c:	f1a2 0201 	sub.w	r2, r2, #1
   84670:	fa41 fc03 	asr.w	ip, r1, r3
   84674:	eb10 000c 	adds.w	r0, r0, ip
   84678:	f1c3 0320 	rsb	r3, r3, #32
   8467c:	fa01 f103 	lsl.w	r1, r1, r3
   84680:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   84684:	d502      	bpl.n	8468c <__addsf3+0x78>
   84686:	4249      	negs	r1, r1
   84688:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   8468c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   84690:	d313      	bcc.n	846ba <__addsf3+0xa6>
   84692:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   84696:	d306      	bcc.n	846a6 <__addsf3+0x92>
   84698:	0840      	lsrs	r0, r0, #1
   8469a:	ea4f 0131 	mov.w	r1, r1, rrx
   8469e:	f102 0201 	add.w	r2, r2, #1
   846a2:	2afe      	cmp	r2, #254	; 0xfe
   846a4:	d251      	bcs.n	8474a <__addsf3+0x136>
   846a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   846aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   846ae:	bf08      	it	eq
   846b0:	f020 0001 	biceq.w	r0, r0, #1
   846b4:	ea40 0003 	orr.w	r0, r0, r3
   846b8:	4770      	bx	lr
   846ba:	0049      	lsls	r1, r1, #1
   846bc:	eb40 0000 	adc.w	r0, r0, r0
   846c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   846c4:	f1a2 0201 	sub.w	r2, r2, #1
   846c8:	d1ed      	bne.n	846a6 <__addsf3+0x92>
   846ca:	fab0 fc80 	clz	ip, r0
   846ce:	f1ac 0c08 	sub.w	ip, ip, #8
   846d2:	ebb2 020c 	subs.w	r2, r2, ip
   846d6:	fa00 f00c 	lsl.w	r0, r0, ip
   846da:	bfaa      	itet	ge
   846dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   846e0:	4252      	neglt	r2, r2
   846e2:	4318      	orrge	r0, r3
   846e4:	bfbc      	itt	lt
   846e6:	40d0      	lsrlt	r0, r2
   846e8:	4318      	orrlt	r0, r3
   846ea:	4770      	bx	lr
   846ec:	f092 0f00 	teq	r2, #0
   846f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   846f4:	bf06      	itte	eq
   846f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   846fa:	3201      	addeq	r2, #1
   846fc:	3b01      	subne	r3, #1
   846fe:	e7b5      	b.n	8466c <__addsf3+0x58>
   84700:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84704:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84708:	bf18      	it	ne
   8470a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8470e:	d021      	beq.n	84754 <__addsf3+0x140>
   84710:	ea92 0f03 	teq	r2, r3
   84714:	d004      	beq.n	84720 <__addsf3+0x10c>
   84716:	f092 0f00 	teq	r2, #0
   8471a:	bf08      	it	eq
   8471c:	4608      	moveq	r0, r1
   8471e:	4770      	bx	lr
   84720:	ea90 0f01 	teq	r0, r1
   84724:	bf1c      	itt	ne
   84726:	2000      	movne	r0, #0
   84728:	4770      	bxne	lr
   8472a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8472e:	d104      	bne.n	8473a <__addsf3+0x126>
   84730:	0040      	lsls	r0, r0, #1
   84732:	bf28      	it	cs
   84734:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84738:	4770      	bx	lr
   8473a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8473e:	bf3c      	itt	cc
   84740:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   84744:	4770      	bxcc	lr
   84746:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   8474a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8474e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84752:	4770      	bx	lr
   84754:	ea7f 6222 	mvns.w	r2, r2, asr #24
   84758:	bf16      	itet	ne
   8475a:	4608      	movne	r0, r1
   8475c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   84760:	4601      	movne	r1, r0
   84762:	0242      	lsls	r2, r0, #9
   84764:	bf06      	itte	eq
   84766:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   8476a:	ea90 0f01 	teqeq	r0, r1
   8476e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   84772:	4770      	bx	lr

00084774 <__aeabi_ui2f>:
   84774:	f04f 0300 	mov.w	r3, #0
   84778:	e004      	b.n	84784 <__aeabi_i2f+0x8>
   8477a:	bf00      	nop

0008477c <__aeabi_i2f>:
   8477c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   84780:	bf48      	it	mi
   84782:	4240      	negmi	r0, r0
   84784:	ea5f 0c00 	movs.w	ip, r0
   84788:	bf08      	it	eq
   8478a:	4770      	bxeq	lr
   8478c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   84790:	4601      	mov	r1, r0
   84792:	f04f 0000 	mov.w	r0, #0
   84796:	e01c      	b.n	847d2 <__aeabi_l2f+0x2a>

00084798 <__aeabi_ul2f>:
   84798:	ea50 0201 	orrs.w	r2, r0, r1
   8479c:	bf08      	it	eq
   8479e:	4770      	bxeq	lr
   847a0:	f04f 0300 	mov.w	r3, #0
   847a4:	e00a      	b.n	847bc <__aeabi_l2f+0x14>
   847a6:	bf00      	nop

000847a8 <__aeabi_l2f>:
   847a8:	ea50 0201 	orrs.w	r2, r0, r1
   847ac:	bf08      	it	eq
   847ae:	4770      	bxeq	lr
   847b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   847b4:	d502      	bpl.n	847bc <__aeabi_l2f+0x14>
   847b6:	4240      	negs	r0, r0
   847b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   847bc:	ea5f 0c01 	movs.w	ip, r1
   847c0:	bf02      	ittt	eq
   847c2:	4684      	moveq	ip, r0
   847c4:	4601      	moveq	r1, r0
   847c6:	2000      	moveq	r0, #0
   847c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   847cc:	bf08      	it	eq
   847ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   847d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   847d6:	fabc f28c 	clz	r2, ip
   847da:	3a08      	subs	r2, #8
   847dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   847e0:	db10      	blt.n	84804 <__aeabi_l2f+0x5c>
   847e2:	fa01 fc02 	lsl.w	ip, r1, r2
   847e6:	4463      	add	r3, ip
   847e8:	fa00 fc02 	lsl.w	ip, r0, r2
   847ec:	f1c2 0220 	rsb	r2, r2, #32
   847f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   847f4:	fa20 f202 	lsr.w	r2, r0, r2
   847f8:	eb43 0002 	adc.w	r0, r3, r2
   847fc:	bf08      	it	eq
   847fe:	f020 0001 	biceq.w	r0, r0, #1
   84802:	4770      	bx	lr
   84804:	f102 0220 	add.w	r2, r2, #32
   84808:	fa01 fc02 	lsl.w	ip, r1, r2
   8480c:	f1c2 0220 	rsb	r2, r2, #32
   84810:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84814:	fa21 f202 	lsr.w	r2, r1, r2
   84818:	eb43 0002 	adc.w	r0, r3, r2
   8481c:	bf08      	it	eq
   8481e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84822:	4770      	bx	lr

00084824 <__aeabi_fmul>:
   84824:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84828:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   8482c:	bf1e      	ittt	ne
   8482e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   84832:	ea92 0f0c 	teqne	r2, ip
   84836:	ea93 0f0c 	teqne	r3, ip
   8483a:	d06f      	beq.n	8491c <__aeabi_fmul+0xf8>
   8483c:	441a      	add	r2, r3
   8483e:	ea80 0c01 	eor.w	ip, r0, r1
   84842:	0240      	lsls	r0, r0, #9
   84844:	bf18      	it	ne
   84846:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   8484a:	d01e      	beq.n	8488a <__aeabi_fmul+0x66>
   8484c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   84850:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   84854:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   84858:	fba0 3101 	umull	r3, r1, r0, r1
   8485c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84860:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   84864:	bf3e      	ittt	cc
   84866:	0049      	lslcc	r1, r1, #1
   84868:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   8486c:	005b      	lslcc	r3, r3, #1
   8486e:	ea40 0001 	orr.w	r0, r0, r1
   84872:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   84876:	2afd      	cmp	r2, #253	; 0xfd
   84878:	d81d      	bhi.n	848b6 <__aeabi_fmul+0x92>
   8487a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8487e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84882:	bf08      	it	eq
   84884:	f020 0001 	biceq.w	r0, r0, #1
   84888:	4770      	bx	lr
   8488a:	f090 0f00 	teq	r0, #0
   8488e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84892:	bf08      	it	eq
   84894:	0249      	lsleq	r1, r1, #9
   84896:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   8489a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8489e:	3a7f      	subs	r2, #127	; 0x7f
   848a0:	bfc2      	ittt	gt
   848a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   848a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   848aa:	4770      	bxgt	lr
   848ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   848b0:	f04f 0300 	mov.w	r3, #0
   848b4:	3a01      	subs	r2, #1
   848b6:	dc5d      	bgt.n	84974 <__aeabi_fmul+0x150>
   848b8:	f112 0f19 	cmn.w	r2, #25
   848bc:	bfdc      	itt	le
   848be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   848c2:	4770      	bxle	lr
   848c4:	f1c2 0200 	rsb	r2, r2, #0
   848c8:	0041      	lsls	r1, r0, #1
   848ca:	fa21 f102 	lsr.w	r1, r1, r2
   848ce:	f1c2 0220 	rsb	r2, r2, #32
   848d2:	fa00 fc02 	lsl.w	ip, r0, r2
   848d6:	ea5f 0031 	movs.w	r0, r1, rrx
   848da:	f140 0000 	adc.w	r0, r0, #0
   848de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   848e2:	bf08      	it	eq
   848e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   848e8:	4770      	bx	lr
   848ea:	f092 0f00 	teq	r2, #0
   848ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   848f2:	bf02      	ittt	eq
   848f4:	0040      	lsleq	r0, r0, #1
   848f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   848fa:	3a01      	subeq	r2, #1
   848fc:	d0f9      	beq.n	848f2 <__aeabi_fmul+0xce>
   848fe:	ea40 000c 	orr.w	r0, r0, ip
   84902:	f093 0f00 	teq	r3, #0
   84906:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   8490a:	bf02      	ittt	eq
   8490c:	0049      	lsleq	r1, r1, #1
   8490e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84912:	3b01      	subeq	r3, #1
   84914:	d0f9      	beq.n	8490a <__aeabi_fmul+0xe6>
   84916:	ea41 010c 	orr.w	r1, r1, ip
   8491a:	e78f      	b.n	8483c <__aeabi_fmul+0x18>
   8491c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84920:	ea92 0f0c 	teq	r2, ip
   84924:	bf18      	it	ne
   84926:	ea93 0f0c 	teqne	r3, ip
   8492a:	d00a      	beq.n	84942 <__aeabi_fmul+0x11e>
   8492c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84930:	bf18      	it	ne
   84932:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84936:	d1d8      	bne.n	848ea <__aeabi_fmul+0xc6>
   84938:	ea80 0001 	eor.w	r0, r0, r1
   8493c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84940:	4770      	bx	lr
   84942:	f090 0f00 	teq	r0, #0
   84946:	bf17      	itett	ne
   84948:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   8494c:	4608      	moveq	r0, r1
   8494e:	f091 0f00 	teqne	r1, #0
   84952:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   84956:	d014      	beq.n	84982 <__aeabi_fmul+0x15e>
   84958:	ea92 0f0c 	teq	r2, ip
   8495c:	d101      	bne.n	84962 <__aeabi_fmul+0x13e>
   8495e:	0242      	lsls	r2, r0, #9
   84960:	d10f      	bne.n	84982 <__aeabi_fmul+0x15e>
   84962:	ea93 0f0c 	teq	r3, ip
   84966:	d103      	bne.n	84970 <__aeabi_fmul+0x14c>
   84968:	024b      	lsls	r3, r1, #9
   8496a:	bf18      	it	ne
   8496c:	4608      	movne	r0, r1
   8496e:	d108      	bne.n	84982 <__aeabi_fmul+0x15e>
   84970:	ea80 0001 	eor.w	r0, r0, r1
   84974:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   84978:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   8497c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84980:	4770      	bx	lr
   84982:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   84986:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   8498a:	4770      	bx	lr

0008498c <__aeabi_fdiv>:
   8498c:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84990:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84994:	bf1e      	ittt	ne
   84996:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8499a:	ea92 0f0c 	teqne	r2, ip
   8499e:	ea93 0f0c 	teqne	r3, ip
   849a2:	d069      	beq.n	84a78 <__aeabi_fdiv+0xec>
   849a4:	eba2 0203 	sub.w	r2, r2, r3
   849a8:	ea80 0c01 	eor.w	ip, r0, r1
   849ac:	0249      	lsls	r1, r1, #9
   849ae:	ea4f 2040 	mov.w	r0, r0, lsl #9
   849b2:	d037      	beq.n	84a24 <__aeabi_fdiv+0x98>
   849b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   849b8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   849bc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   849c0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   849c4:	428b      	cmp	r3, r1
   849c6:	bf38      	it	cc
   849c8:	005b      	lslcc	r3, r3, #1
   849ca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   849ce:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   849d2:	428b      	cmp	r3, r1
   849d4:	bf24      	itt	cs
   849d6:	1a5b      	subcs	r3, r3, r1
   849d8:	ea40 000c 	orrcs.w	r0, r0, ip
   849dc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   849e0:	bf24      	itt	cs
   849e2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   849e6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   849ea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   849ee:	bf24      	itt	cs
   849f0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   849f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   849f8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   849fc:	bf24      	itt	cs
   849fe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   84a02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84a06:	011b      	lsls	r3, r3, #4
   84a08:	bf18      	it	ne
   84a0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   84a0e:	d1e0      	bne.n	849d2 <__aeabi_fdiv+0x46>
   84a10:	2afd      	cmp	r2, #253	; 0xfd
   84a12:	f63f af50 	bhi.w	848b6 <__aeabi_fmul+0x92>
   84a16:	428b      	cmp	r3, r1
   84a18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84a1c:	bf08      	it	eq
   84a1e:	f020 0001 	biceq.w	r0, r0, #1
   84a22:	4770      	bx	lr
   84a24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84a28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   84a2c:	327f      	adds	r2, #127	; 0x7f
   84a2e:	bfc2      	ittt	gt
   84a30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84a34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84a38:	4770      	bxgt	lr
   84a3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84a3e:	f04f 0300 	mov.w	r3, #0
   84a42:	3a01      	subs	r2, #1
   84a44:	e737      	b.n	848b6 <__aeabi_fmul+0x92>
   84a46:	f092 0f00 	teq	r2, #0
   84a4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84a4e:	bf02      	ittt	eq
   84a50:	0040      	lsleq	r0, r0, #1
   84a52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84a56:	3a01      	subeq	r2, #1
   84a58:	d0f9      	beq.n	84a4e <__aeabi_fdiv+0xc2>
   84a5a:	ea40 000c 	orr.w	r0, r0, ip
   84a5e:	f093 0f00 	teq	r3, #0
   84a62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84a66:	bf02      	ittt	eq
   84a68:	0049      	lsleq	r1, r1, #1
   84a6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84a6e:	3b01      	subeq	r3, #1
   84a70:	d0f9      	beq.n	84a66 <__aeabi_fdiv+0xda>
   84a72:	ea41 010c 	orr.w	r1, r1, ip
   84a76:	e795      	b.n	849a4 <__aeabi_fdiv+0x18>
   84a78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84a7c:	ea92 0f0c 	teq	r2, ip
   84a80:	d108      	bne.n	84a94 <__aeabi_fdiv+0x108>
   84a82:	0242      	lsls	r2, r0, #9
   84a84:	f47f af7d 	bne.w	84982 <__aeabi_fmul+0x15e>
   84a88:	ea93 0f0c 	teq	r3, ip
   84a8c:	f47f af70 	bne.w	84970 <__aeabi_fmul+0x14c>
   84a90:	4608      	mov	r0, r1
   84a92:	e776      	b.n	84982 <__aeabi_fmul+0x15e>
   84a94:	ea93 0f0c 	teq	r3, ip
   84a98:	d104      	bne.n	84aa4 <__aeabi_fdiv+0x118>
   84a9a:	024b      	lsls	r3, r1, #9
   84a9c:	f43f af4c 	beq.w	84938 <__aeabi_fmul+0x114>
   84aa0:	4608      	mov	r0, r1
   84aa2:	e76e      	b.n	84982 <__aeabi_fmul+0x15e>
   84aa4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84aa8:	bf18      	it	ne
   84aaa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84aae:	d1ca      	bne.n	84a46 <__aeabi_fdiv+0xba>
   84ab0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   84ab4:	f47f af5c 	bne.w	84970 <__aeabi_fmul+0x14c>
   84ab8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   84abc:	f47f af3c 	bne.w	84938 <__aeabi_fmul+0x114>
   84ac0:	e75f      	b.n	84982 <__aeabi_fmul+0x15e>
   84ac2:	bf00      	nop

00084ac4 <__gesf2>:
   84ac4:	f04f 3cff 	mov.w	ip, #4294967295
   84ac8:	e006      	b.n	84ad8 <__cmpsf2+0x4>
   84aca:	bf00      	nop

00084acc <__lesf2>:
   84acc:	f04f 0c01 	mov.w	ip, #1
   84ad0:	e002      	b.n	84ad8 <__cmpsf2+0x4>
   84ad2:	bf00      	nop

00084ad4 <__cmpsf2>:
   84ad4:	f04f 0c01 	mov.w	ip, #1
   84ad8:	f84d cd04 	str.w	ip, [sp, #-4]!
   84adc:	ea4f 0240 	mov.w	r2, r0, lsl #1
   84ae0:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84ae4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84ae8:	bf18      	it	ne
   84aea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84aee:	d011      	beq.n	84b14 <__cmpsf2+0x40>
   84af0:	b001      	add	sp, #4
   84af2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   84af6:	bf18      	it	ne
   84af8:	ea90 0f01 	teqne	r0, r1
   84afc:	bf58      	it	pl
   84afe:	ebb2 0003 	subspl.w	r0, r2, r3
   84b02:	bf88      	it	hi
   84b04:	17c8      	asrhi	r0, r1, #31
   84b06:	bf38      	it	cc
   84b08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   84b0c:	bf18      	it	ne
   84b0e:	f040 0001 	orrne.w	r0, r0, #1
   84b12:	4770      	bx	lr
   84b14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84b18:	d102      	bne.n	84b20 <__cmpsf2+0x4c>
   84b1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   84b1e:	d105      	bne.n	84b2c <__cmpsf2+0x58>
   84b20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   84b24:	d1e4      	bne.n	84af0 <__cmpsf2+0x1c>
   84b26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   84b2a:	d0e1      	beq.n	84af0 <__cmpsf2+0x1c>
   84b2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   84b30:	4770      	bx	lr
   84b32:	bf00      	nop

00084b34 <__aeabi_cfrcmple>:
   84b34:	4684      	mov	ip, r0
   84b36:	4608      	mov	r0, r1
   84b38:	4661      	mov	r1, ip
   84b3a:	e7ff      	b.n	84b3c <__aeabi_cfcmpeq>

00084b3c <__aeabi_cfcmpeq>:
   84b3c:	b50f      	push	{r0, r1, r2, r3, lr}
   84b3e:	f7ff ffc9 	bl	84ad4 <__cmpsf2>
   84b42:	2800      	cmp	r0, #0
   84b44:	bf48      	it	mi
   84b46:	f110 0f00 	cmnmi.w	r0, #0
   84b4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

00084b4c <__aeabi_fcmpeq>:
   84b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   84b50:	f7ff fff4 	bl	84b3c <__aeabi_cfcmpeq>
   84b54:	bf0c      	ite	eq
   84b56:	2001      	moveq	r0, #1
   84b58:	2000      	movne	r0, #0
   84b5a:	f85d fb08 	ldr.w	pc, [sp], #8
   84b5e:	bf00      	nop

00084b60 <__aeabi_fcmplt>:
   84b60:	f84d ed08 	str.w	lr, [sp, #-8]!
   84b64:	f7ff ffea 	bl	84b3c <__aeabi_cfcmpeq>
   84b68:	bf34      	ite	cc
   84b6a:	2001      	movcc	r0, #1
   84b6c:	2000      	movcs	r0, #0
   84b6e:	f85d fb08 	ldr.w	pc, [sp], #8
   84b72:	bf00      	nop

00084b74 <__aeabi_fcmple>:
   84b74:	f84d ed08 	str.w	lr, [sp, #-8]!
   84b78:	f7ff ffe0 	bl	84b3c <__aeabi_cfcmpeq>
   84b7c:	bf94      	ite	ls
   84b7e:	2001      	movls	r0, #1
   84b80:	2000      	movhi	r0, #0
   84b82:	f85d fb08 	ldr.w	pc, [sp], #8
   84b86:	bf00      	nop

00084b88 <__aeabi_fcmpge>:
   84b88:	f84d ed08 	str.w	lr, [sp, #-8]!
   84b8c:	f7ff ffd2 	bl	84b34 <__aeabi_cfrcmple>
   84b90:	bf94      	ite	ls
   84b92:	2001      	movls	r0, #1
   84b94:	2000      	movhi	r0, #0
   84b96:	f85d fb08 	ldr.w	pc, [sp], #8
   84b9a:	bf00      	nop

00084b9c <__aeabi_fcmpgt>:
   84b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   84ba0:	f7ff ffc8 	bl	84b34 <__aeabi_cfrcmple>
   84ba4:	bf34      	ite	cc
   84ba6:	2001      	movcc	r0, #1
   84ba8:	2000      	movcs	r0, #0
   84baa:	f85d fb08 	ldr.w	pc, [sp], #8
   84bae:	bf00      	nop

00084bb0 <__aeabi_f2uiz>:
   84bb0:	0042      	lsls	r2, r0, #1
   84bb2:	d20e      	bcs.n	84bd2 <__aeabi_f2uiz+0x22>
   84bb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   84bb8:	d30b      	bcc.n	84bd2 <__aeabi_f2uiz+0x22>
   84bba:	f04f 039e 	mov.w	r3, #158	; 0x9e
   84bbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   84bc2:	d409      	bmi.n	84bd8 <__aeabi_f2uiz+0x28>
   84bc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
   84bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84bcc:	fa23 f002 	lsr.w	r0, r3, r2
   84bd0:	4770      	bx	lr
   84bd2:	f04f 0000 	mov.w	r0, #0
   84bd6:	4770      	bx	lr
   84bd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
   84bdc:	d101      	bne.n	84be2 <__aeabi_f2uiz+0x32>
   84bde:	0242      	lsls	r2, r0, #9
   84be0:	d102      	bne.n	84be8 <__aeabi_f2uiz+0x38>
   84be2:	f04f 30ff 	mov.w	r0, #4294967295
   84be6:	4770      	bx	lr
   84be8:	f04f 0000 	mov.w	r0, #0
   84bec:	4770      	bx	lr
   84bee:	bf00      	nop

00084bf0 <__libc_init_array>:
   84bf0:	b570      	push	{r4, r5, r6, lr}
   84bf2:	4e0f      	ldr	r6, [pc, #60]	; (84c30 <__libc_init_array+0x40>)
   84bf4:	4d0f      	ldr	r5, [pc, #60]	; (84c34 <__libc_init_array+0x44>)
   84bf6:	1b76      	subs	r6, r6, r5
   84bf8:	10b6      	asrs	r6, r6, #2
   84bfa:	d007      	beq.n	84c0c <__libc_init_array+0x1c>
   84bfc:	3d04      	subs	r5, #4
   84bfe:	2400      	movs	r4, #0
   84c00:	3401      	adds	r4, #1
   84c02:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84c06:	4798      	blx	r3
   84c08:	42a6      	cmp	r6, r4
   84c0a:	d1f9      	bne.n	84c00 <__libc_init_array+0x10>
   84c0c:	4e0a      	ldr	r6, [pc, #40]	; (84c38 <__libc_init_array+0x48>)
   84c0e:	4d0b      	ldr	r5, [pc, #44]	; (84c3c <__libc_init_array+0x4c>)
   84c10:	f000 f9f4 	bl	84ffc <_init>
   84c14:	1b76      	subs	r6, r6, r5
   84c16:	10b6      	asrs	r6, r6, #2
   84c18:	d008      	beq.n	84c2c <__libc_init_array+0x3c>
   84c1a:	3d04      	subs	r5, #4
   84c1c:	2400      	movs	r4, #0
   84c1e:	3401      	adds	r4, #1
   84c20:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84c24:	4798      	blx	r3
   84c26:	42a6      	cmp	r6, r4
   84c28:	d1f9      	bne.n	84c1e <__libc_init_array+0x2e>
   84c2a:	bd70      	pop	{r4, r5, r6, pc}
   84c2c:	bd70      	pop	{r4, r5, r6, pc}
   84c2e:	bf00      	nop
   84c30:	00085008 	.word	0x00085008
   84c34:	00085008 	.word	0x00085008
   84c38:	00085010 	.word	0x00085010
   84c3c:	00085008 	.word	0x00085008

00084c40 <memcmp>:
   84c40:	2a03      	cmp	r2, #3
   84c42:	b470      	push	{r4, r5, r6}
   84c44:	d928      	bls.n	84c98 <memcmp+0x58>
   84c46:	ea40 0301 	orr.w	r3, r0, r1
   84c4a:	079b      	lsls	r3, r3, #30
   84c4c:	d013      	beq.n	84c76 <memcmp+0x36>
   84c4e:	7805      	ldrb	r5, [r0, #0]
   84c50:	780c      	ldrb	r4, [r1, #0]
   84c52:	42a5      	cmp	r5, r4
   84c54:	d124      	bne.n	84ca0 <memcmp+0x60>
   84c56:	3a01      	subs	r2, #1
   84c58:	2300      	movs	r3, #0
   84c5a:	e005      	b.n	84c68 <memcmp+0x28>
   84c5c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   84c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84c64:	42a5      	cmp	r5, r4
   84c66:	d11b      	bne.n	84ca0 <memcmp+0x60>
   84c68:	4293      	cmp	r3, r2
   84c6a:	f103 0301 	add.w	r3, r3, #1
   84c6e:	d1f5      	bne.n	84c5c <memcmp+0x1c>
   84c70:	2000      	movs	r0, #0
   84c72:	bc70      	pop	{r4, r5, r6}
   84c74:	4770      	bx	lr
   84c76:	460c      	mov	r4, r1
   84c78:	4603      	mov	r3, r0
   84c7a:	6825      	ldr	r5, [r4, #0]
   84c7c:	681e      	ldr	r6, [r3, #0]
   84c7e:	4621      	mov	r1, r4
   84c80:	42ae      	cmp	r6, r5
   84c82:	4618      	mov	r0, r3
   84c84:	f104 0404 	add.w	r4, r4, #4
   84c88:	f103 0304 	add.w	r3, r3, #4
   84c8c:	d104      	bne.n	84c98 <memcmp+0x58>
   84c8e:	3a04      	subs	r2, #4
   84c90:	2a03      	cmp	r2, #3
   84c92:	4618      	mov	r0, r3
   84c94:	4621      	mov	r1, r4
   84c96:	d8f0      	bhi.n	84c7a <memcmp+0x3a>
   84c98:	2a00      	cmp	r2, #0
   84c9a:	d1d8      	bne.n	84c4e <memcmp+0xe>
   84c9c:	4610      	mov	r0, r2
   84c9e:	e7e8      	b.n	84c72 <memcmp+0x32>
   84ca0:	1b28      	subs	r0, r5, r4
   84ca2:	bc70      	pop	{r4, r5, r6}
   84ca4:	4770      	bx	lr
   84ca6:	bf00      	nop

00084ca8 <memcpy>:
   84ca8:	4684      	mov	ip, r0
   84caa:	ea41 0300 	orr.w	r3, r1, r0
   84cae:	f013 0303 	ands.w	r3, r3, #3
   84cb2:	d149      	bne.n	84d48 <memcpy+0xa0>
   84cb4:	3a40      	subs	r2, #64	; 0x40
   84cb6:	d323      	bcc.n	84d00 <memcpy+0x58>
   84cb8:	680b      	ldr	r3, [r1, #0]
   84cba:	6003      	str	r3, [r0, #0]
   84cbc:	684b      	ldr	r3, [r1, #4]
   84cbe:	6043      	str	r3, [r0, #4]
   84cc0:	688b      	ldr	r3, [r1, #8]
   84cc2:	6083      	str	r3, [r0, #8]
   84cc4:	68cb      	ldr	r3, [r1, #12]
   84cc6:	60c3      	str	r3, [r0, #12]
   84cc8:	690b      	ldr	r3, [r1, #16]
   84cca:	6103      	str	r3, [r0, #16]
   84ccc:	694b      	ldr	r3, [r1, #20]
   84cce:	6143      	str	r3, [r0, #20]
   84cd0:	698b      	ldr	r3, [r1, #24]
   84cd2:	6183      	str	r3, [r0, #24]
   84cd4:	69cb      	ldr	r3, [r1, #28]
   84cd6:	61c3      	str	r3, [r0, #28]
   84cd8:	6a0b      	ldr	r3, [r1, #32]
   84cda:	6203      	str	r3, [r0, #32]
   84cdc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84cde:	6243      	str	r3, [r0, #36]	; 0x24
   84ce0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84ce2:	6283      	str	r3, [r0, #40]	; 0x28
   84ce4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84ce6:	62c3      	str	r3, [r0, #44]	; 0x2c
   84ce8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84cea:	6303      	str	r3, [r0, #48]	; 0x30
   84cec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84cee:	6343      	str	r3, [r0, #52]	; 0x34
   84cf0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84cf2:	6383      	str	r3, [r0, #56]	; 0x38
   84cf4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84cf6:	63c3      	str	r3, [r0, #60]	; 0x3c
   84cf8:	3040      	adds	r0, #64	; 0x40
   84cfa:	3140      	adds	r1, #64	; 0x40
   84cfc:	3a40      	subs	r2, #64	; 0x40
   84cfe:	d2db      	bcs.n	84cb8 <memcpy+0x10>
   84d00:	3230      	adds	r2, #48	; 0x30
   84d02:	d30b      	bcc.n	84d1c <memcpy+0x74>
   84d04:	680b      	ldr	r3, [r1, #0]
   84d06:	6003      	str	r3, [r0, #0]
   84d08:	684b      	ldr	r3, [r1, #4]
   84d0a:	6043      	str	r3, [r0, #4]
   84d0c:	688b      	ldr	r3, [r1, #8]
   84d0e:	6083      	str	r3, [r0, #8]
   84d10:	68cb      	ldr	r3, [r1, #12]
   84d12:	60c3      	str	r3, [r0, #12]
   84d14:	3010      	adds	r0, #16
   84d16:	3110      	adds	r1, #16
   84d18:	3a10      	subs	r2, #16
   84d1a:	d2f3      	bcs.n	84d04 <memcpy+0x5c>
   84d1c:	320c      	adds	r2, #12
   84d1e:	d305      	bcc.n	84d2c <memcpy+0x84>
   84d20:	f851 3b04 	ldr.w	r3, [r1], #4
   84d24:	f840 3b04 	str.w	r3, [r0], #4
   84d28:	3a04      	subs	r2, #4
   84d2a:	d2f9      	bcs.n	84d20 <memcpy+0x78>
   84d2c:	3204      	adds	r2, #4
   84d2e:	d008      	beq.n	84d42 <memcpy+0x9a>
   84d30:	07d2      	lsls	r2, r2, #31
   84d32:	bf1c      	itt	ne
   84d34:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84d38:	f800 3b01 	strbne.w	r3, [r0], #1
   84d3c:	d301      	bcc.n	84d42 <memcpy+0x9a>
   84d3e:	880b      	ldrh	r3, [r1, #0]
   84d40:	8003      	strh	r3, [r0, #0]
   84d42:	4660      	mov	r0, ip
   84d44:	4770      	bx	lr
   84d46:	bf00      	nop
   84d48:	2a08      	cmp	r2, #8
   84d4a:	d313      	bcc.n	84d74 <memcpy+0xcc>
   84d4c:	078b      	lsls	r3, r1, #30
   84d4e:	d0b1      	beq.n	84cb4 <memcpy+0xc>
   84d50:	f010 0303 	ands.w	r3, r0, #3
   84d54:	d0ae      	beq.n	84cb4 <memcpy+0xc>
   84d56:	f1c3 0304 	rsb	r3, r3, #4
   84d5a:	1ad2      	subs	r2, r2, r3
   84d5c:	07db      	lsls	r3, r3, #31
   84d5e:	bf1c      	itt	ne
   84d60:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84d64:	f800 3b01 	strbne.w	r3, [r0], #1
   84d68:	d3a4      	bcc.n	84cb4 <memcpy+0xc>
   84d6a:	f831 3b02 	ldrh.w	r3, [r1], #2
   84d6e:	f820 3b02 	strh.w	r3, [r0], #2
   84d72:	e79f      	b.n	84cb4 <memcpy+0xc>
   84d74:	3a04      	subs	r2, #4
   84d76:	d3d9      	bcc.n	84d2c <memcpy+0x84>
   84d78:	3a01      	subs	r2, #1
   84d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
   84d7e:	f800 3b01 	strb.w	r3, [r0], #1
   84d82:	d2f9      	bcs.n	84d78 <memcpy+0xd0>
   84d84:	780b      	ldrb	r3, [r1, #0]
   84d86:	7003      	strb	r3, [r0, #0]
   84d88:	784b      	ldrb	r3, [r1, #1]
   84d8a:	7043      	strb	r3, [r0, #1]
   84d8c:	788b      	ldrb	r3, [r1, #2]
   84d8e:	7083      	strb	r3, [r0, #2]
   84d90:	4660      	mov	r0, ip
   84d92:	4770      	bx	lr

00084d94 <register_fini>:
   84d94:	4b02      	ldr	r3, [pc, #8]	; (84da0 <register_fini+0xc>)
   84d96:	b113      	cbz	r3, 84d9e <register_fini+0xa>
   84d98:	4802      	ldr	r0, [pc, #8]	; (84da4 <register_fini+0x10>)
   84d9a:	f000 b805 	b.w	84da8 <atexit>
   84d9e:	4770      	bx	lr
   84da0:	00000000 	.word	0x00000000
   84da4:	00084db5 	.word	0x00084db5

00084da8 <atexit>:
   84da8:	4601      	mov	r1, r0
   84daa:	2000      	movs	r0, #0
   84dac:	4602      	mov	r2, r0
   84dae:	4603      	mov	r3, r0
   84db0:	f000 b818 	b.w	84de4 <__register_exitproc>

00084db4 <__libc_fini_array>:
   84db4:	b538      	push	{r3, r4, r5, lr}
   84db6:	4d09      	ldr	r5, [pc, #36]	; (84ddc <__libc_fini_array+0x28>)
   84db8:	4c09      	ldr	r4, [pc, #36]	; (84de0 <__libc_fini_array+0x2c>)
   84dba:	1b64      	subs	r4, r4, r5
   84dbc:	10a4      	asrs	r4, r4, #2
   84dbe:	bf18      	it	ne
   84dc0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   84dc4:	d005      	beq.n	84dd2 <__libc_fini_array+0x1e>
   84dc6:	3c01      	subs	r4, #1
   84dc8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84dcc:	4798      	blx	r3
   84dce:	2c00      	cmp	r4, #0
   84dd0:	d1f9      	bne.n	84dc6 <__libc_fini_array+0x12>
   84dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84dd6:	f000 b91b 	b.w	85010 <_fini>
   84dda:	bf00      	nop
   84ddc:	0008501c 	.word	0x0008501c
   84de0:	00085020 	.word	0x00085020

00084de4 <__register_exitproc>:
   84de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   84de6:	4c27      	ldr	r4, [pc, #156]	; (84e84 <__register_exitproc+0xa0>)
   84de8:	b085      	sub	sp, #20
   84dea:	6826      	ldr	r6, [r4, #0]
   84dec:	4607      	mov	r7, r0
   84dee:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84df2:	2c00      	cmp	r4, #0
   84df4:	d040      	beq.n	84e78 <__register_exitproc+0x94>
   84df6:	6865      	ldr	r5, [r4, #4]
   84df8:	2d1f      	cmp	r5, #31
   84dfa:	dd1e      	ble.n	84e3a <__register_exitproc+0x56>
   84dfc:	4822      	ldr	r0, [pc, #136]	; (84e88 <__register_exitproc+0xa4>)
   84dfe:	b918      	cbnz	r0, 84e08 <__register_exitproc+0x24>
   84e00:	f04f 30ff 	mov.w	r0, #4294967295
   84e04:	b005      	add	sp, #20
   84e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e08:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84e0c:	9103      	str	r1, [sp, #12]
   84e0e:	9202      	str	r2, [sp, #8]
   84e10:	9301      	str	r3, [sp, #4]
   84e12:	f3af 8000 	nop.w
   84e16:	9903      	ldr	r1, [sp, #12]
   84e18:	4604      	mov	r4, r0
   84e1a:	9a02      	ldr	r2, [sp, #8]
   84e1c:	9b01      	ldr	r3, [sp, #4]
   84e1e:	2800      	cmp	r0, #0
   84e20:	d0ee      	beq.n	84e00 <__register_exitproc+0x1c>
   84e22:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84e26:	2000      	movs	r0, #0
   84e28:	6025      	str	r5, [r4, #0]
   84e2a:	6060      	str	r0, [r4, #4]
   84e2c:	4605      	mov	r5, r0
   84e2e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84e32:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84e36:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84e3a:	b93f      	cbnz	r7, 84e4c <__register_exitproc+0x68>
   84e3c:	1c6b      	adds	r3, r5, #1
   84e3e:	2000      	movs	r0, #0
   84e40:	3502      	adds	r5, #2
   84e42:	6063      	str	r3, [r4, #4]
   84e44:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84e48:	b005      	add	sp, #20
   84e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e4c:	2601      	movs	r6, #1
   84e4e:	40ae      	lsls	r6, r5
   84e50:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84e54:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84e58:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84e5c:	2f02      	cmp	r7, #2
   84e5e:	ea42 0206 	orr.w	r2, r2, r6
   84e62:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84e66:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84e6a:	d1e7      	bne.n	84e3c <__register_exitproc+0x58>
   84e6c:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84e70:	431e      	orrs	r6, r3
   84e72:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84e76:	e7e1      	b.n	84e3c <__register_exitproc+0x58>
   84e78:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84e7c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84e80:	e7b9      	b.n	84df6 <__register_exitproc+0x12>
   84e82:	bf00      	nop
   84e84:	00084ff8 	.word	0x00084ff8
   84e88:	00000000 	.word	0x00000000

00084e8c <ulLED>:
   84e8c:	00000057 00000056 0000003b 00000055     W...V...;...U...
   84e9c:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   84eac:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   84ebc:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   84ecc:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   84edc:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   84eec:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   84efc:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   84f0c:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   84f1c:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   84f2c:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   84f3c:	0001c200 000000c0 00000800 00000000     ................
	...
   84f54:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   84f64:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00084f74 <can_bit_time>:
   84f74:	02020308 02094b03 43020303 0303030a     .....K.....C....
   84f84:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   84f94:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   84fa4:	05050510 06114504 47040505 06060512     .....E.....G....
   84fb4:	06134304 44040606 06060714 08154604     .C.....D.....F..
   84fc4:	47040606 07070716 08174404 46040708     ...G.....D.....F
   84fd4:	08080718 08194304 44040808              .....C.....D

00084fe0 <ucExpectedStackBytes.5295>:
   84fe0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   84ff0:	a5a5a5a5 00000043                       ....C...

00084ff8 <_global_impure_ptr>:
   84ff8:	20070010                                ... 

00084ffc <_init>:
   84ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84ffe:	bf00      	nop
   85000:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85002:	bc08      	pop	{r3}
   85004:	469e      	mov	lr, r3
   85006:	4770      	bx	lr

00085008 <__init_array_start>:
   85008:	00084d95 	.word	0x00084d95

0008500c <__frame_dummy_init_array_entry>:
   8500c:	00080119                                ....

00085010 <_fini>:
   85010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85012:	bf00      	nop
   85014:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85016:	bc08      	pop	{r3}
   85018:	469e      	mov	lr, r3
   8501a:	4770      	bx	lr

0008501c <__fini_array_start>:
   8501c:	000800f5 	.word	0x000800f5
