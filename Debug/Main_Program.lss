
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e34  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00084e34  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000a284  20070438  0008526c  00010438  2**2
                  ALLOC
  3 .stack        00002004  2007a6bc  0008f4f0  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000be54  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002471  00000000  00000000  0001c310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005774  00000000  00000000  0001e781  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000f60  00000000  00000000  00023ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000dd0  00000000  00000000  00024e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019991  00000000  00000000  00025c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000121eb  00000000  00000000  0003f5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00066c96  00000000  00000000  000517a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000031d4  00000000  00000000  000b8438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c6c0 	.word	0x2007c6c0
   80004:	00081635 	.word	0x00081635
   80008:	0008162d 	.word	0x0008162d
   8000c:	0008162d 	.word	0x0008162d
   80010:	0008162d 	.word	0x0008162d
   80014:	0008162d 	.word	0x0008162d
   80018:	0008162d 	.word	0x0008162d
	...
   8002c:	00081add 	.word	0x00081add
   80030:	0008162d 	.word	0x0008162d
   80034:	00000000 	.word	0x00000000
   80038:	00081ca1 	.word	0x00081ca1
   8003c:	00081ce5 	.word	0x00081ce5
   80040:	0008162d 	.word	0x0008162d
   80044:	0008162d 	.word	0x0008162d
   80048:	0008162d 	.word	0x0008162d
   8004c:	000848f9 	.word	0x000848f9
   80050:	00084819 	.word	0x00084819
   80054:	0008162d 	.word	0x0008162d
   80058:	0008162d 	.word	0x0008162d
   8005c:	0008162d 	.word	0x0008162d
   80060:	0008162d 	.word	0x0008162d
   80064:	0008162d 	.word	0x0008162d
   80068:	00000000 	.word	0x00000000
   8006c:	000810d9 	.word	0x000810d9
   80070:	000810f1 	.word	0x000810f1
   80074:	00081109 	.word	0x00081109
   80078:	00081121 	.word	0x00081121
	...
   80084:	00084969 	.word	0x00084969
   80088:	0008162d 	.word	0x0008162d
   8008c:	0008162d 	.word	0x0008162d
   80090:	0008162d 	.word	0x0008162d
   80094:	0008162d 	.word	0x0008162d
   80098:	0008162d 	.word	0x0008162d
   8009c:	0008162d 	.word	0x0008162d
   800a0:	0008162d 	.word	0x0008162d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008162d 	.word	0x0008162d
   800ac:	0008162d 	.word	0x0008162d
   800b0:	0008162d 	.word	0x0008162d
   800b4:	0008162d 	.word	0x0008162d
   800b8:	0008162d 	.word	0x0008162d
   800bc:	0008162d 	.word	0x0008162d
   800c0:	0008162d 	.word	0x0008162d
   800c4:	0008162d 	.word	0x0008162d
   800c8:	0008162d 	.word	0x0008162d
   800cc:	0008162d 	.word	0x0008162d
   800d0:	0008162d 	.word	0x0008162d
   800d4:	0008162d 	.word	0x0008162d
   800d8:	0008162d 	.word	0x0008162d
   800dc:	0008162d 	.word	0x0008162d
   800e0:	0008162d 	.word	0x0008162d
   800e4:	0008162d 	.word	0x0008162d
   800e8:	0008162d 	.word	0x0008162d
   800ec:	0008411d 	.word	0x0008411d
   800f0:	00084085 	.word	0x00084085

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	00084e34 	.word	0x00084e34

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00084e34 	.word	0x00084e34
   8013c:	2007043c 	.word	0x2007043c
   80140:	00084e34 	.word	0x00084e34
   80144:	00000000 	.word	0x00000000

00080148 <command_test>:
/************************************************************************/
/**
 * \brief Tests the housekeeping task.
 */
void command_test( void )
{
   80148:	b590      	push	{r4, r7, lr}
   8014a:	b085      	sub	sp, #20
   8014c:	af04      	add	r7, sp, #16
		/* Start the two tasks as described in the comments at the top of this
		file. */
		xTaskCreate( prvCommandTask,					/* The function that implements the task. */
   8014e:	2303      	movs	r3, #3
   80150:	9300      	str	r3, [sp, #0]
   80152:	2300      	movs	r3, #0
   80154:	9301      	str	r3, [sp, #4]
   80156:	2300      	movs	r3, #0
   80158:	9302      	str	r3, [sp, #8]
   8015a:	2300      	movs	r3, #0
   8015c:	9303      	str	r3, [sp, #12]
   8015e:	4806      	ldr	r0, [pc, #24]	; (80178 <command_test+0x30>)
   80160:	4906      	ldr	r1, [pc, #24]	; (8017c <command_test+0x34>)
   80162:	2282      	movs	r2, #130	; 0x82
   80164:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80168:	4c05      	ldr	r4, [pc, #20]	; (80180 <command_test+0x38>)
   8016a:	47a0      	blx	r4
					configMINIMAL_STACK_SIZE, 			/* The size of the stack to allocate to the task. */
					( void * ) COMMAND_PARAMETER, 			/* The parameter passed to the task - just to check the functionality. */
					Command_TASK_PRIORITY, 			/* The priority assigned to the task. */
					NULL );								/* The task handle is not required, so NULL is passed. */
					
		vTaskStartScheduler();
   8016c:	4b05      	ldr	r3, [pc, #20]	; (80184 <command_test+0x3c>)
   8016e:	4798      	blx	r3
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks	to be created.  See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80170:	bf00      	nop
}
   80172:	3704      	adds	r7, #4
   80174:	46bd      	mov	sp, r7
   80176:	bd90      	pop	{r4, r7, pc}
   80178:	00080189 	.word	0x00080189
   8017c:	00084d68 	.word	0x00084d68
   80180:	00082ac1 	.word	0x00082ac1
   80184:	00082d3d 	.word	0x00082d3d

00080188 <prvCommandTask>:
/**
 * \brief Performs the housekeeping task.
 * @param *pvParameters:
 */
static void prvCommandTask( void *pvParameters )
{
   80188:	b590      	push	{r4, r7, lr}
   8018a:	b08b      	sub	sp, #44	; 0x2c
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == COMMAND_PARAMETER );
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80196:	429a      	cmp	r2, r3
   80198:	d002      	beq.n	801a0 <prvCommandTask+0x18>
   8019a:	4b10      	ldr	r3, [pc, #64]	; (801dc <prvCommandTask+0x54>)
   8019c:	4798      	blx	r3
   8019e:	e7fe      	b.n	8019e <prvCommandTask+0x16>
	TickType_t	xLastWakeTime;
	const TickType_t xTimeToWait = 15;	//Number entered here corresponds to the number of ticks we should wait.
   801a0:	230f      	movs	r3, #15
   801a2:	627b      	str	r3, [r7, #36]	; 0x24
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/
	
	uint32_t low, high, ID, PRIORITY, x;
	
	low = DUMMY_COMMAND;
   801a4:	f04f 33ff 	mov.w	r3, #4294967295
   801a8:	623b      	str	r3, [r7, #32]
	high = CAN_MSG_DUMMY_DATA;
   801aa:	f04f 33ff 	mov.w	r3, #4294967295
   801ae:	61fb      	str	r3, [r7, #28]
	ID = SUB0_ID0;
   801b0:	2314      	movs	r3, #20
   801b2:	61bb      	str	r3, [r7, #24]
	PRIORITY = COMMAND_PRIO;
   801b4:	230b      	movs	r3, #11
   801b6:	617b      	str	r3, [r7, #20]
	
	/* @non-terminating@ */	
	for( ;; )
	{
			x = send_can_command(low, high, ID, PRIORITY);	//This is the CAN API function I have written for us to use.
   801b8:	6a38      	ldr	r0, [r7, #32]
   801ba:	69f9      	ldr	r1, [r7, #28]
   801bc:	69ba      	ldr	r2, [r7, #24]
   801be:	697b      	ldr	r3, [r7, #20]
   801c0:	4c07      	ldr	r4, [pc, #28]	; (801e0 <prvCommandTask+0x58>)
   801c2:	47a0      	blx	r4
   801c4:	6138      	str	r0, [r7, #16]
			xLastWakeTime = xTaskGetTickCount();
   801c6:	4b07      	ldr	r3, [pc, #28]	; (801e4 <prvCommandTask+0x5c>)
   801c8:	4798      	blx	r3
   801ca:	4603      	mov	r3, r0
   801cc:	60fb      	str	r3, [r7, #12]
			vTaskDelayUntil(&xLastWakeTime, xTimeToWait);
   801ce:	f107 030c 	add.w	r3, r7, #12
   801d2:	4618      	mov	r0, r3
   801d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   801d6:	4b04      	ldr	r3, [pc, #16]	; (801e8 <prvCommandTask+0x60>)
   801d8:	4798      	blx	r3
	}
   801da:	e7ed      	b.n	801b8 <prvCommandTask+0x30>
   801dc:	00081c85 	.word	0x00081c85
   801e0:	00084369 	.word	0x00084369
   801e4:	00082efd 	.word	0x00082efd
   801e8:	00082c41 	.word	0x00082c41

000801ec <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   801ec:	b580      	push	{r7, lr}
   801ee:	b082      	sub	sp, #8
   801f0:	af00      	add	r7, sp, #0
   801f2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801f4:	687b      	ldr	r3, [r7, #4]
   801f6:	2b07      	cmp	r3, #7
   801f8:	d82e      	bhi.n	80258 <osc_enable+0x6c>
   801fa:	a201      	add	r2, pc, #4	; (adr r2, 80200 <osc_enable+0x14>)
   801fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80200:	00080259 	.word	0x00080259
   80204:	00080221 	.word	0x00080221
   80208:	00080229 	.word	0x00080229
   8020c:	00080231 	.word	0x00080231
   80210:	00080239 	.word	0x00080239
   80214:	00080241 	.word	0x00080241
   80218:	00080249 	.word	0x00080249
   8021c:	00080251 	.word	0x00080251
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80220:	2000      	movs	r0, #0
   80222:	4b0f      	ldr	r3, [pc, #60]	; (80260 <osc_enable+0x74>)
   80224:	4798      	blx	r3
		break;
   80226:	e017      	b.n	80258 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80228:	2001      	movs	r0, #1
   8022a:	4b0d      	ldr	r3, [pc, #52]	; (80260 <osc_enable+0x74>)
   8022c:	4798      	blx	r3
		break;
   8022e:	e013      	b.n	80258 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80230:	2000      	movs	r0, #0
   80232:	4b0c      	ldr	r3, [pc, #48]	; (80264 <osc_enable+0x78>)
   80234:	4798      	blx	r3
		break;
   80236:	e00f      	b.n	80258 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80238:	2010      	movs	r0, #16
   8023a:	4b0a      	ldr	r3, [pc, #40]	; (80264 <osc_enable+0x78>)
   8023c:	4798      	blx	r3
		break;
   8023e:	e00b      	b.n	80258 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80240:	2020      	movs	r0, #32
   80242:	4b08      	ldr	r3, [pc, #32]	; (80264 <osc_enable+0x78>)
   80244:	4798      	blx	r3
		break;
   80246:	e007      	b.n	80258 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   80248:	2000      	movs	r0, #0
   8024a:	4b07      	ldr	r3, [pc, #28]	; (80268 <osc_enable+0x7c>)
   8024c:	4798      	blx	r3
		break;
   8024e:	e003      	b.n	80258 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   80250:	2001      	movs	r0, #1
   80252:	4b05      	ldr	r3, [pc, #20]	; (80268 <osc_enable+0x7c>)
   80254:	4798      	blx	r3
		break;
   80256:	bf00      	nop
	}
}
   80258:	3708      	adds	r7, #8
   8025a:	46bd      	mov	sp, r7
   8025c:	bd80      	pop	{r7, pc}
   8025e:	bf00      	nop
   80260:	000811bd 	.word	0x000811bd
   80264:	0008122d 	.word	0x0008122d
   80268:	000812cd 	.word	0x000812cd

0008026c <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   8026c:	b580      	push	{r7, lr}
   8026e:	b082      	sub	sp, #8
   80270:	af00      	add	r7, sp, #0
   80272:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80274:	687b      	ldr	r3, [r7, #4]
   80276:	2b07      	cmp	r3, #7
   80278:	d826      	bhi.n	802c8 <osc_is_ready+0x5c>
   8027a:	a201      	add	r2, pc, #4	; (adr r2, 80280 <osc_is_ready+0x14>)
   8027c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80280:	000802a1 	.word	0x000802a1
   80284:	000802a5 	.word	0x000802a5
   80288:	000802a5 	.word	0x000802a5
   8028c:	000802b7 	.word	0x000802b7
   80290:	000802b7 	.word	0x000802b7
   80294:	000802b7 	.word	0x000802b7
   80298:	000802b7 	.word	0x000802b7
   8029c:	000802b7 	.word	0x000802b7
	case OSC_SLCK_32K_RC:
		return 1;
   802a0:	2301      	movs	r3, #1
   802a2:	e012      	b.n	802ca <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   802a4:	4b0b      	ldr	r3, [pc, #44]	; (802d4 <osc_is_ready+0x68>)
   802a6:	4798      	blx	r3
   802a8:	4603      	mov	r3, r0
   802aa:	2b00      	cmp	r3, #0
   802ac:	bf0c      	ite	eq
   802ae:	2300      	moveq	r3, #0
   802b0:	2301      	movne	r3, #1
   802b2:	b2db      	uxtb	r3, r3
   802b4:	e009      	b.n	802ca <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   802b6:	4b08      	ldr	r3, [pc, #32]	; (802d8 <osc_is_ready+0x6c>)
   802b8:	4798      	blx	r3
   802ba:	4603      	mov	r3, r0
   802bc:	2b00      	cmp	r3, #0
   802be:	bf0c      	ite	eq
   802c0:	2300      	moveq	r3, #0
   802c2:	2301      	movne	r3, #1
   802c4:	b2db      	uxtb	r3, r3
   802c6:	e000      	b.n	802ca <osc_is_ready+0x5e>
	}

	return 0;
   802c8:	2300      	movs	r3, #0
}
   802ca:	4618      	mov	r0, r3
   802cc:	3708      	adds	r7, #8
   802ce:	46bd      	mov	sp, r7
   802d0:	bd80      	pop	{r7, pc}
   802d2:	bf00      	nop
   802d4:	000811f9 	.word	0x000811f9
   802d8:	00081339 	.word	0x00081339

000802dc <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   802dc:	b480      	push	{r7}
   802de:	b083      	sub	sp, #12
   802e0:	af00      	add	r7, sp, #0
   802e2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   802e4:	687b      	ldr	r3, [r7, #4]
   802e6:	2b07      	cmp	r3, #7
   802e8:	d825      	bhi.n	80336 <osc_get_rate+0x5a>
   802ea:	a201      	add	r2, pc, #4	; (adr r2, 802f0 <osc_get_rate+0x14>)
   802ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   802f0:	00080311 	.word	0x00080311
   802f4:	00080317 	.word	0x00080317
   802f8:	0008031d 	.word	0x0008031d
   802fc:	00080323 	.word	0x00080323
   80300:	00080327 	.word	0x00080327
   80304:	0008032b 	.word	0x0008032b
   80308:	0008032f 	.word	0x0008032f
   8030c:	00080333 	.word	0x00080333
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80310:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80314:	e010      	b.n	80338 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8031a:	e00d      	b.n	80338 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8031c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80320:	e00a      	b.n	80338 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80322:	4b08      	ldr	r3, [pc, #32]	; (80344 <osc_get_rate+0x68>)
   80324:	e008      	b.n	80338 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80326:	4b08      	ldr	r3, [pc, #32]	; (80348 <osc_get_rate+0x6c>)
   80328:	e006      	b.n	80338 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8032a:	4b08      	ldr	r3, [pc, #32]	; (8034c <osc_get_rate+0x70>)
   8032c:	e004      	b.n	80338 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8032e:	4b07      	ldr	r3, [pc, #28]	; (8034c <osc_get_rate+0x70>)
   80330:	e002      	b.n	80338 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80332:	4b06      	ldr	r3, [pc, #24]	; (8034c <osc_get_rate+0x70>)
   80334:	e000      	b.n	80338 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80336:	2300      	movs	r3, #0
}
   80338:	4618      	mov	r0, r3
   8033a:	370c      	adds	r7, #12
   8033c:	46bd      	mov	sp, r7
   8033e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80342:	4770      	bx	lr
   80344:	003d0900 	.word	0x003d0900
   80348:	007a1200 	.word	0x007a1200
   8034c:	00b71b00 	.word	0x00b71b00

00080350 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	4603      	mov	r3, r0
   80358:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8035a:	bf00      	nop
   8035c:	79fb      	ldrb	r3, [r7, #7]
   8035e:	4618      	mov	r0, r3
   80360:	4b05      	ldr	r3, [pc, #20]	; (80378 <osc_wait_ready+0x28>)
   80362:	4798      	blx	r3
   80364:	4603      	mov	r3, r0
   80366:	f083 0301 	eor.w	r3, r3, #1
   8036a:	b2db      	uxtb	r3, r3
   8036c:	2b00      	cmp	r3, #0
   8036e:	d1f5      	bne.n	8035c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80370:	3708      	adds	r7, #8
   80372:	46bd      	mov	sp, r7
   80374:	bd80      	pop	{r7, pc}
   80376:	bf00      	nop
   80378:	0008026d 	.word	0x0008026d

0008037c <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b086      	sub	sp, #24
   80380:	af00      	add	r7, sp, #0
   80382:	60f8      	str	r0, [r7, #12]
   80384:	607a      	str	r2, [r7, #4]
   80386:	603b      	str	r3, [r7, #0]
   80388:	460b      	mov	r3, r1
   8038a:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8038c:	687b      	ldr	r3, [r7, #4]
   8038e:	2b00      	cmp	r3, #0
   80390:	d107      	bne.n	803a2 <pll_config_init+0x26>
   80392:	683b      	ldr	r3, [r7, #0]
   80394:	2b00      	cmp	r3, #0
   80396:	d104      	bne.n	803a2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80398:	68fb      	ldr	r3, [r7, #12]
   8039a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8039e:	601a      	str	r2, [r3, #0]
   803a0:	e019      	b.n	803d6 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   803a2:	7afb      	ldrb	r3, [r7, #11]
   803a4:	4618      	mov	r0, r3
   803a6:	4b0d      	ldr	r3, [pc, #52]	; (803dc <pll_config_init+0x60>)
   803a8:	4798      	blx	r3
   803aa:	4602      	mov	r2, r0
   803ac:	687b      	ldr	r3, [r7, #4]
   803ae:	fbb2 f3f3 	udiv	r3, r2, r3
   803b2:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   803b4:	697b      	ldr	r3, [r7, #20]
   803b6:	683a      	ldr	r2, [r7, #0]
   803b8:	fb02 f303 	mul.w	r3, r2, r3
   803bc:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   803be:	683b      	ldr	r3, [r7, #0]
   803c0:	3b01      	subs	r3, #1
   803c2:	041a      	lsls	r2, r3, #16
   803c4:	4b06      	ldr	r3, [pc, #24]	; (803e0 <pll_config_init+0x64>)
   803c6:	4013      	ands	r3, r2
   803c8:	687a      	ldr	r2, [r7, #4]
   803ca:	b2d2      	uxtb	r2, r2
   803cc:	4313      	orrs	r3, r2
   803ce:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   803d2:	68fb      	ldr	r3, [r7, #12]
   803d4:	601a      	str	r2, [r3, #0]
	}
}
   803d6:	3718      	adds	r7, #24
   803d8:	46bd      	mov	sp, r7
   803da:	bd80      	pop	{r7, pc}
   803dc:	000802dd 	.word	0x000802dd
   803e0:	07ff0000 	.word	0x07ff0000

000803e4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   803e4:	b580      	push	{r7, lr}
   803e6:	b082      	sub	sp, #8
   803e8:	af00      	add	r7, sp, #0
   803ea:	6078      	str	r0, [r7, #4]
   803ec:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   803ee:	683b      	ldr	r3, [r7, #0]
   803f0:	2b00      	cmp	r3, #0
   803f2:	d108      	bne.n	80406 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   803f4:	4b08      	ldr	r3, [pc, #32]	; (80418 <pll_enable+0x34>)
   803f6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   803f8:	4b08      	ldr	r3, [pc, #32]	; (8041c <pll_enable+0x38>)
   803fa:	687a      	ldr	r2, [r7, #4]
   803fc:	6812      	ldr	r2, [r2, #0]
   803fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80402:	629a      	str	r2, [r3, #40]	; 0x28
   80404:	e005      	b.n	80412 <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80406:	4b05      	ldr	r3, [pc, #20]	; (8041c <pll_enable+0x38>)
   80408:	687a      	ldr	r2, [r7, #4]
   8040a:	6812      	ldr	r2, [r2, #0]
   8040c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   80410:	61da      	str	r2, [r3, #28]
	}
}
   80412:	3708      	adds	r7, #8
   80414:	46bd      	mov	sp, r7
   80416:	bd80      	pop	{r7, pc}
   80418:	00081355 	.word	0x00081355
   8041c:	400e0600 	.word	0x400e0600

00080420 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80420:	b580      	push	{r7, lr}
   80422:	b082      	sub	sp, #8
   80424:	af00      	add	r7, sp, #0
   80426:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   80428:	687b      	ldr	r3, [r7, #4]
   8042a:	2b00      	cmp	r3, #0
   8042c:	d103      	bne.n	80436 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8042e:	4b05      	ldr	r3, [pc, #20]	; (80444 <pll_is_locked+0x24>)
   80430:	4798      	blx	r3
   80432:	4603      	mov	r3, r0
   80434:	e002      	b.n	8043c <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   80436:	4b04      	ldr	r3, [pc, #16]	; (80448 <pll_is_locked+0x28>)
   80438:	4798      	blx	r3
   8043a:	4603      	mov	r3, r0
}
   8043c:	4618      	mov	r0, r3
   8043e:	3708      	adds	r7, #8
   80440:	46bd      	mov	sp, r7
   80442:	bd80      	pop	{r7, pc}
   80444:	0008136d 	.word	0x0008136d
   80448:	00081389 	.word	0x00081389

0008044c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8044c:	b580      	push	{r7, lr}
   8044e:	b082      	sub	sp, #8
   80450:	af00      	add	r7, sp, #0
   80452:	4603      	mov	r3, r0
   80454:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80456:	79fb      	ldrb	r3, [r7, #7]
   80458:	3b03      	subs	r3, #3
   8045a:	2b04      	cmp	r3, #4
   8045c:	d808      	bhi.n	80470 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8045e:	79fb      	ldrb	r3, [r7, #7]
   80460:	4618      	mov	r0, r3
   80462:	4b05      	ldr	r3, [pc, #20]	; (80478 <pll_enable_source+0x2c>)
   80464:	4798      	blx	r3
		osc_wait_ready(e_src);
   80466:	79fb      	ldrb	r3, [r7, #7]
   80468:	4618      	mov	r0, r3
   8046a:	4b04      	ldr	r3, [pc, #16]	; (8047c <pll_enable_source+0x30>)
   8046c:	4798      	blx	r3
		break;
   8046e:	e000      	b.n	80472 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   80470:	bf00      	nop
	}
}
   80472:	3708      	adds	r7, #8
   80474:	46bd      	mov	sp, r7
   80476:	bd80      	pop	{r7, pc}
   80478:	000801ed 	.word	0x000801ed
   8047c:	00080351 	.word	0x00080351

00080480 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   80480:	b580      	push	{r7, lr}
   80482:	b082      	sub	sp, #8
   80484:	af00      	add	r7, sp, #0
   80486:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80488:	bf00      	nop
   8048a:	6878      	ldr	r0, [r7, #4]
   8048c:	4b04      	ldr	r3, [pc, #16]	; (804a0 <pll_wait_for_lock+0x20>)
   8048e:	4798      	blx	r3
   80490:	4603      	mov	r3, r0
   80492:	2b00      	cmp	r3, #0
   80494:	d0f9      	beq.n	8048a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   80496:	2300      	movs	r3, #0
}
   80498:	4618      	mov	r0, r3
   8049a:	3708      	adds	r7, #8
   8049c:	46bd      	mov	sp, r7
   8049e:	bd80      	pop	{r7, pc}
   804a0:	00080421 	.word	0x00080421

000804a4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   804a4:	b580      	push	{r7, lr}
   804a6:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   804a8:	2006      	movs	r0, #6
   804aa:	4b04      	ldr	r3, [pc, #16]	; (804bc <sysclk_get_main_hz+0x18>)
   804ac:	4798      	blx	r3
   804ae:	4602      	mov	r2, r0
   804b0:	4613      	mov	r3, r2
   804b2:	00db      	lsls	r3, r3, #3
   804b4:	1a9b      	subs	r3, r3, r2
   804b6:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   804b8:	4618      	mov	r0, r3
   804ba:	bd80      	pop	{r7, pc}
   804bc:	000802dd 	.word	0x000802dd

000804c0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   804c0:	b580      	push	{r7, lr}
   804c2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   804c4:	4b02      	ldr	r3, [pc, #8]	; (804d0 <sysclk_get_cpu_hz+0x10>)
   804c6:	4798      	blx	r3
   804c8:	4603      	mov	r3, r0
   804ca:	085b      	lsrs	r3, r3, #1
}
   804cc:	4618      	mov	r0, r3
   804ce:	bd80      	pop	{r7, pc}
   804d0:	000804a5 	.word	0x000804a5

000804d4 <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   804d4:	b590      	push	{r4, r7, lr}
   804d6:	b083      	sub	sp, #12
   804d8:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   804da:	4b10      	ldr	r3, [pc, #64]	; (8051c <sysclk_init+0x48>)
   804dc:	4798      	blx	r3
   804de:	4603      	mov	r3, r0
   804e0:	4618      	mov	r0, r3
   804e2:	4b0f      	ldr	r3, [pc, #60]	; (80520 <sysclk_init+0x4c>)
   804e4:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   804e6:	2006      	movs	r0, #6
   804e8:	4b0e      	ldr	r3, [pc, #56]	; (80524 <sysclk_init+0x50>)
   804ea:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   804ec:	1d3b      	adds	r3, r7, #4
   804ee:	4618      	mov	r0, r3
   804f0:	2106      	movs	r1, #6
   804f2:	2201      	movs	r2, #1
   804f4:	230e      	movs	r3, #14
   804f6:	4c0c      	ldr	r4, [pc, #48]	; (80528 <sysclk_init+0x54>)
   804f8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   804fa:	1d3b      	adds	r3, r7, #4
   804fc:	4618      	mov	r0, r3
   804fe:	2100      	movs	r1, #0
   80500:	4b0a      	ldr	r3, [pc, #40]	; (8052c <sysclk_init+0x58>)
   80502:	4798      	blx	r3
		pll_wait_for_lock(0);
   80504:	2000      	movs	r0, #0
   80506:	4b0a      	ldr	r3, [pc, #40]	; (80530 <sysclk_init+0x5c>)
   80508:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8050a:	2010      	movs	r0, #16
   8050c:	4b09      	ldr	r3, [pc, #36]	; (80534 <sysclk_init+0x60>)
   8050e:	4798      	blx	r3
		break;
   80510:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80512:	4b09      	ldr	r3, [pc, #36]	; (80538 <sysclk_init+0x64>)
   80514:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   80516:	370c      	adds	r7, #12
   80518:	46bd      	mov	sp, r7
   8051a:	bd90      	pop	{r4, r7, pc}
   8051c:	000804c1 	.word	0x000804c1
   80520:	0008185d 	.word	0x0008185d
   80524:	0008044d 	.word	0x0008044d
   80528:	0008037d 	.word	0x0008037d
   8052c:	000803e5 	.word	0x000803e5
   80530:	00080481 	.word	0x00080481
   80534:	00081139 	.word	0x00081139
   80538:	000816dd 	.word	0x000816dd

0008053c <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   8053c:	b580      	push	{r7, lr}
   8053e:	af00      	add	r7, sp, #0
	uint32_t wdt_mode, wdt_timer;	// Values used in initializing WDT.

#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80540:	4b2e      	ldr	r3, [pc, #184]	; (805fc <board_init+0xc0>)
   80542:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80546:	605a      	str	r2, [r3, #4]
#endif

	/*Configure CAN related pins*/
#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80548:	2001      	movs	r0, #1
   8054a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8054e:	4b2c      	ldr	r3, [pc, #176]	; (80600 <board_init+0xc4>)
   80550:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80552:	2000      	movs	r0, #0
   80554:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80558:	4b29      	ldr	r3, [pc, #164]	; (80600 <board_init+0xc4>)
   8055a:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   8055c:	2034      	movs	r0, #52	; 0x34
   8055e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80562:	4b27      	ldr	r3, [pc, #156]	; (80600 <board_init+0xc4>)
   80564:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   80566:	2035      	movs	r0, #53	; 0x35
   80568:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8056c:	4b24      	ldr	r3, [pc, #144]	; (80600 <board_init+0xc4>)
   8056e:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   80570:	202f      	movs	r0, #47	; 0x2f
   80572:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80576:	4b22      	ldr	r3, [pc, #136]	; (80600 <board_init+0xc4>)
   80578:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   8057a:	202e      	movs	r0, #46	; 0x2e
   8057c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80580:	4b1f      	ldr	r3, [pc, #124]	; (80600 <board_init+0xc4>)
   80582:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
   80584:	208f      	movs	r0, #143	; 0x8f
   80586:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8058a:	4b1d      	ldr	r3, [pc, #116]	; (80600 <board_init+0xc4>)
   8058c:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
   8058e:	2090      	movs	r0, #144	; 0x90
   80590:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80594:	4b1a      	ldr	r3, [pc, #104]	; (80600 <board_init+0xc4>)
   80596:	4798      	blx	r3
#endif


	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   80598:	2057      	movs	r0, #87	; 0x57
   8059a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8059e:	4b18      	ldr	r3, [pc, #96]	; (80600 <board_init+0xc4>)
   805a0:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   805a2:	2057      	movs	r0, #87	; 0x57
   805a4:	4b17      	ldr	r3, [pc, #92]	; (80604 <board_init+0xc8>)
   805a6:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805a8:	203b      	movs	r0, #59	; 0x3b
   805aa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805ae:	4b14      	ldr	r3, [pc, #80]	; (80600 <board_init+0xc4>)
   805b0:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805b2:	2055      	movs	r0, #85	; 0x55
   805b4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805b8:	4b11      	ldr	r3, [pc, #68]	; (80600 <board_init+0xc4>)
   805ba:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805bc:	2056      	movs	r0, #86	; 0x56
   805be:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805c2:	4b0f      	ldr	r3, [pc, #60]	; (80600 <board_init+0xc4>)
   805c4:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805c6:	2087      	movs	r0, #135	; 0x87
   805c8:	490f      	ldr	r1, [pc, #60]	; (80608 <board_init+0xcc>)
   805ca:	4b0d      	ldr	r3, [pc, #52]	; (80600 <board_init+0xc4>)
   805cc:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805ce:	2037      	movs	r0, #55	; 0x37
   805d0:	490e      	ldr	r1, [pc, #56]	; (8060c <board_init+0xd0>)
   805d2:	4b0b      	ldr	r3, [pc, #44]	; (80600 <board_init+0xc4>)
   805d4:	4798      	blx	r3
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   805d6:	200a      	movs	r0, #10
   805d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805dc:	4b08      	ldr	r3, [pc, #32]	; (80600 <board_init+0xc4>)
   805de:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   805e0:	200b      	movs	r0, #11
   805e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805e6:	4b06      	ldr	r3, [pc, #24]	; (80600 <board_init+0xc4>)
   805e8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_SCK_IDX, PIN_USART0_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM3312 enable pin */
	gpio_configure_pin(PIN_USART0_EN_IDX, PIN_USART0_EN_FLAGS);
   805ea:	208e      	movs	r0, #142	; 0x8e
   805ec:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   805f0:	4b03      	ldr	r3, [pc, #12]	; (80600 <board_init+0xc4>)
   805f2:	4798      	blx	r3
	gpio_set_pin_low(PIN_USART0_EN_IDX);
   805f4:	208e      	movs	r0, #142	; 0x8e
   805f6:	4b06      	ldr	r3, [pc, #24]	; (80610 <board_init+0xd4>)
   805f8:	4798      	blx	r3
	gpio_configure_pin(PIN_EBI_NANDIO_6, PIN_EBI_NANDIO_6_FLAGS);
	gpio_configure_pin(PIN_EBI_NANDIO_7, PIN_EBI_NANDIO_7_FLAGS);
	gpio_configure_pin(PIN_NF_CE_IDX, PIN_NF_CE_FLAGS);
	gpio_configure_pin(PIN_NF_RB_IDX, PIN_NF_RB_FLAGS);
#endif
}
   805fa:	bd80      	pop	{r7, pc}
   805fc:	400e1a50 	.word	0x400e1a50
   80600:	00080ef9 	.word	0x00080ef9
   80604:	00080e31 	.word	0x00080e31
   80608:	28000079 	.word	0x28000079
   8060c:	28000059 	.word	0x28000059
   80610:	00080e65 	.word	0x00080e65

00080614 <sn65hvd234_set_rs>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver RS pin.
 */
void sn65hvd234_set_rs(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80614:	b480      	push	{r7}
   80616:	b083      	sub	sp, #12
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	p_component->pio_rs_idx = pin_idx;
   8061e:	687b      	ldr	r3, [r7, #4]
   80620:	683a      	ldr	r2, [r7, #0]
   80622:	601a      	str	r2, [r3, #0]
}
   80624:	370c      	adds	r7, #12
   80626:	46bd      	mov	sp, r7
   80628:	f85d 7b04 	ldr.w	r7, [sp], #4
   8062c:	4770      	bx	lr
   8062e:	bf00      	nop

00080630 <sn65hvd234_set_en>:
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 * \param pin_idx     The pin index value for transceiver EN pin.
 */
void sn65hvd234_set_en(sn65hvd234_ctrl_t *p_component, uint32_t pin_idx)
{
   80630:	b480      	push	{r7}
   80632:	b083      	sub	sp, #12
   80634:	af00      	add	r7, sp, #0
   80636:	6078      	str	r0, [r7, #4]
   80638:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8063a:	687b      	ldr	r3, [r7, #4]
   8063c:	683a      	ldr	r2, [r7, #0]
   8063e:	605a      	str	r2, [r3, #4]
}
   80640:	370c      	adds	r7, #12
   80642:	46bd      	mov	sp, r7
   80644:	f85d 7b04 	ldr.w	r7, [sp], #4
   80648:	4770      	bx	lr
   8064a:	bf00      	nop

0008064c <sn65hvd234_enable>:
 * \brief Enable transceiver.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_enable(sn65hvd234_ctrl_t *p_component)
{
   8064c:	b580      	push	{r7, lr}
   8064e:	b082      	sub	sp, #8
   80650:	af00      	add	r7, sp, #0
   80652:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	pio_set_pin_high(p_component->pio_en_idx);
   80654:	687b      	ldr	r3, [r7, #4]
   80656:	685b      	ldr	r3, [r3, #4]
   80658:	4618      	mov	r0, r3
   8065a:	4b02      	ldr	r3, [pc, #8]	; (80664 <sn65hvd234_enable+0x18>)
   8065c:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_en_idx, CAN_EN_HIGH);
}
   8065e:	3708      	adds	r7, #8
   80660:	46bd      	mov	sp, r7
   80662:	bd80      	pop	{r7, pc}
   80664:	00080e31 	.word	0x00080e31

00080668 <sn65hvd234_disable_low_power>:
 * \brief Resume to Normal mode by exiting from low power mode.
 *
 * \param p_component Pointer to SN65HVD234 control structure.
 */
void sn65hvd234_disable_low_power(sn65hvd234_ctrl_t *p_component)
{
   80668:	b580      	push	{r7, lr}
   8066a:	b082      	sub	sp, #8
   8066c:	af00      	add	r7, sp, #0
   8066e:	6078      	str	r0, [r7, #4]
	/* Lower RS pin of SN65HVD234 to 0.0v~0.33v. */
	pio_set_pin_low(p_component->pio_rs_idx);
   80670:	687b      	ldr	r3, [r7, #4]
   80672:	681b      	ldr	r3, [r3, #0]
   80674:	4618      	mov	r0, r3
   80676:	4b02      	ldr	r3, [pc, #8]	; (80680 <sn65hvd234_disable_low_power+0x18>)
   80678:	4798      	blx	r3
	//ioport_set_pin_level(p_component->pio_rs_idx, CAN_RS_LOW);
}
   8067a:	3708      	adds	r7, #8
   8067c:	46bd      	mov	sp, r7
   8067e:	bd80      	pop	{r7, pc}
   80680:	00080e65 	.word	0x00080e65

00080684 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   80684:	b580      	push	{r7, lr}
   80686:	b08a      	sub	sp, #40	; 0x28
   80688:	af00      	add	r7, sp, #0
   8068a:	60f8      	str	r0, [r7, #12]
   8068c:	60b9      	str	r1, [r7, #8]
   8068e:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80690:	687b      	ldr	r3, [r7, #4]
   80692:	f246 12a8 	movw	r2, #25000	; 0x61a8
   80696:	fb02 f203 	mul.w	r2, r2, r3
   8069a:	68bb      	ldr	r3, [r7, #8]
   8069c:	4413      	add	r3, r2
   8069e:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   806a0:	687b      	ldr	r3, [r7, #4]
   806a2:	f246 11a8 	movw	r1, #25000	; 0x61a8
   806a6:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   806aa:	fbb2 f3f3 	udiv	r3, r2, r3
   806ae:	2b80      	cmp	r3, #128	; 0x80
   806b0:	d901      	bls.n	806b6 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   806b2:	2300      	movs	r3, #0
   806b4:	e085      	b.n	807c2 <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   806b6:	68bb      	ldr	r3, [r7, #8]
   806b8:	085a      	lsrs	r2, r3, #1
   806ba:	687b      	ldr	r3, [r7, #4]
   806bc:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   806c0:	fb01 f303 	mul.w	r3, r1, r3
   806c4:	429a      	cmp	r2, r3
   806c6:	d201      	bcs.n	806cc <can_set_baudrate+0x48>
		return 0;
   806c8:	2300      	movs	r3, #0
   806ca:	e07a      	b.n	807c2 <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   806cc:	2308      	movs	r3, #8
   806ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   806d2:	f04f 33ff 	mov.w	r3, #4294967295
   806d6:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   806d8:	2308      	movs	r3, #8
   806da:	77fb      	strb	r3, [r7, #31]
   806dc:	e02b      	b.n	80736 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   806de:	7ffb      	ldrb	r3, [r7, #31]
   806e0:	687a      	ldr	r2, [r7, #4]
   806e2:	fb02 f303 	mul.w	r3, r2, r3
   806e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   806ea:	fb02 f303 	mul.w	r3, r2, r3
   806ee:	68ba      	ldr	r2, [r7, #8]
   806f0:	fbb2 f3f3 	udiv	r3, r2, r3
   806f4:	2b80      	cmp	r3, #128	; 0x80
   806f6:	d81b      	bhi.n	80730 <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   806f8:	7ffb      	ldrb	r3, [r7, #31]
   806fa:	687a      	ldr	r2, [r7, #4]
   806fc:	fb02 f303 	mul.w	r3, r2, r3
   80700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   80704:	fb02 f203 	mul.w	r2, r2, r3
   80708:	68bb      	ldr	r3, [r7, #8]
   8070a:	fbb3 f1f2 	udiv	r1, r3, r2
   8070e:	fb02 f201 	mul.w	r2, r2, r1
   80712:	1a9b      	subs	r3, r3, r2
   80714:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   80716:	69ba      	ldr	r2, [r7, #24]
   80718:	6a3b      	ldr	r3, [r7, #32]
   8071a:	429a      	cmp	r2, r3
   8071c:	d208      	bcs.n	80730 <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   8071e:	69bb      	ldr	r3, [r7, #24]
   80720:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   80722:	7ffb      	ldrb	r3, [r7, #31]
   80724:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   80728:	6a3b      	ldr	r3, [r7, #32]
   8072a:	2b00      	cmp	r3, #0
   8072c:	d100      	bne.n	80730 <can_set_baudrate+0xac>
					break;
   8072e:	e005      	b.n	8073c <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80730:	7ffb      	ldrb	r3, [r7, #31]
   80732:	3301      	adds	r3, #1
   80734:	77fb      	strb	r3, [r7, #31]
   80736:	7ffb      	ldrb	r3, [r7, #31]
   80738:	2b19      	cmp	r3, #25
   8073a:	d9d0      	bls.n	806de <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   8073c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80740:	687a      	ldr	r2, [r7, #4]
   80742:	fb02 f303 	mul.w	r3, r2, r3
   80746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8074a:	fb02 f303 	mul.w	r3, r2, r3
   8074e:	68ba      	ldr	r2, [r7, #8]
   80750:	fbb2 f3f3 	udiv	r3, r2, r3
   80754:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   80756:	7dfb      	ldrb	r3, [r7, #23]
   80758:	2b01      	cmp	r3, #1
   8075a:	d801      	bhi.n	80760 <can_set_baudrate+0xdc>
		return 0;
   8075c:	2300      	movs	r3, #0
   8075e:	e030      	b.n	807c2 <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   80760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80764:	f1a3 0208 	sub.w	r2, r3, #8
   80768:	4613      	mov	r3, r2
   8076a:	005b      	lsls	r3, r3, #1
   8076c:	4413      	add	r3, r2
   8076e:	005b      	lsls	r3, r3, #1
   80770:	4a16      	ldr	r2, [pc, #88]	; (807cc <can_set_baudrate+0x148>)
   80772:	4413      	add	r3, r2
   80774:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   80776:	68f8      	ldr	r0, [r7, #12]
   80778:	4b15      	ldr	r3, [pc, #84]	; (807d0 <can_set_baudrate+0x14c>)
   8077a:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   8077c:	693b      	ldr	r3, [r7, #16]
   8077e:	78db      	ldrb	r3, [r3, #3]
   80780:	3b01      	subs	r3, #1
   80782:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80786:	693b      	ldr	r3, [r7, #16]
   80788:	789b      	ldrb	r3, [r3, #2]
   8078a:	3b01      	subs	r3, #1
   8078c:	011b      	lsls	r3, r3, #4
   8078e:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80792:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80794:	693b      	ldr	r3, [r7, #16]
   80796:	785b      	ldrb	r3, [r3, #1]
   80798:	3b01      	subs	r3, #1
   8079a:	021b      	lsls	r3, r3, #8
   8079c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   807a0:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   807a2:	693b      	ldr	r3, [r7, #16]
   807a4:	791b      	ldrb	r3, [r3, #4]
   807a6:	3b01      	subs	r3, #1
   807a8:	031b      	lsls	r3, r3, #12
   807aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   807ae:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   807b0:	7dfb      	ldrb	r3, [r7, #23]
   807b2:	3b01      	subs	r3, #1
   807b4:	041b      	lsls	r3, r3, #16
   807b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   807ba:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   807bc:	68fb      	ldr	r3, [r7, #12]
   807be:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   807c0:	2301      	movs	r3, #1
}
   807c2:	4618      	mov	r0, r3
   807c4:	3728      	adds	r7, #40	; 0x28
   807c6:	46bd      	mov	sp, r7
   807c8:	bd80      	pop	{r7, pc}
   807ca:	bf00      	nop
   807cc:	00084d6c 	.word	0x00084d6c
   807d0:	0008087d 	.word	0x0008087d

000807d4 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   807d4:	b580      	push	{r7, lr}
   807d6:	b086      	sub	sp, #24
   807d8:	af00      	add	r7, sp, #0
   807da:	60f8      	str	r0, [r7, #12]
   807dc:	60b9      	str	r1, [r7, #8]
   807de:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   807e0:	68f8      	ldr	r0, [r7, #12]
   807e2:	68b9      	ldr	r1, [r7, #8]
   807e4:	687a      	ldr	r2, [r7, #4]
   807e6:	4b17      	ldr	r3, [pc, #92]	; (80844 <can_init+0x70>)
   807e8:	4798      	blx	r3
   807ea:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   807ec:	697b      	ldr	r3, [r7, #20]
   807ee:	2b00      	cmp	r3, #0
   807f0:	d101      	bne.n	807f6 <can_init+0x22>
		return 0;
   807f2:	2300      	movs	r3, #0
   807f4:	e021      	b.n	8083a <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   807f6:	68f8      	ldr	r0, [r7, #12]
   807f8:	4b13      	ldr	r3, [pc, #76]	; (80848 <can_init+0x74>)
   807fa:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   807fc:	68f8      	ldr	r0, [r7, #12]
   807fe:	4b13      	ldr	r3, [pc, #76]	; (8084c <can_init+0x78>)
   80800:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   80802:	2300      	movs	r3, #0
   80804:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   80806:	2300      	movs	r3, #0
   80808:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8080a:	e006      	b.n	8081a <can_init+0x46>
		ul_flag = can_get_status(p_can);
   8080c:	68f8      	ldr	r0, [r7, #12]
   8080e:	4b10      	ldr	r3, [pc, #64]	; (80850 <can_init+0x7c>)
   80810:	4798      	blx	r3
   80812:	6178      	str	r0, [r7, #20]
		ul_tick++;
   80814:	693b      	ldr	r3, [r7, #16]
   80816:	3301      	adds	r3, #1
   80818:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   8081a:	697b      	ldr	r3, [r7, #20]
   8081c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80820:	2b00      	cmp	r3, #0
   80822:	d103      	bne.n	8082c <can_init+0x58>
   80824:	693a      	ldr	r2, [r7, #16]
   80826:	4b0b      	ldr	r3, [pc, #44]	; (80854 <can_init+0x80>)
   80828:	429a      	cmp	r2, r3
   8082a:	d9ef      	bls.n	8080c <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   8082c:	693a      	ldr	r2, [r7, #16]
   8082e:	4b0a      	ldr	r3, [pc, #40]	; (80858 <can_init+0x84>)
   80830:	429a      	cmp	r2, r3
   80832:	d101      	bne.n	80838 <can_init+0x64>
		return 0;
   80834:	2300      	movs	r3, #0
   80836:	e000      	b.n	8083a <can_init+0x66>
	} else {
		return 1;
   80838:	2301      	movs	r3, #1
	}
}
   8083a:	4618      	mov	r0, r3
   8083c:	3718      	adds	r7, #24
   8083e:	46bd      	mov	sp, r7
   80840:	bd80      	pop	{r7, pc}
   80842:	bf00      	nop
   80844:	00080685 	.word	0x00080685
   80848:	00080c15 	.word	0x00080c15
   8084c:	0008085d 	.word	0x0008085d
   80850:	000808d5 	.word	0x000808d5
   80854:	0001869f 	.word	0x0001869f
   80858:	000186a0 	.word	0x000186a0

0008085c <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   8085c:	b480      	push	{r7}
   8085e:	b083      	sub	sp, #12
   80860:	af00      	add	r7, sp, #0
   80862:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   80864:	687b      	ldr	r3, [r7, #4]
   80866:	681b      	ldr	r3, [r3, #0]
   80868:	f043 0201 	orr.w	r2, r3, #1
   8086c:	687b      	ldr	r3, [r7, #4]
   8086e:	601a      	str	r2, [r3, #0]
}
   80870:	370c      	adds	r7, #12
   80872:	46bd      	mov	sp, r7
   80874:	f85d 7b04 	ldr.w	r7, [sp], #4
   80878:	4770      	bx	lr
   8087a:	bf00      	nop

0008087c <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   8087c:	b480      	push	{r7}
   8087e:	b083      	sub	sp, #12
   80880:	af00      	add	r7, sp, #0
   80882:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   80884:	687b      	ldr	r3, [r7, #4]
   80886:	681b      	ldr	r3, [r3, #0]
   80888:	f023 0201 	bic.w	r2, r3, #1
   8088c:	687b      	ldr	r3, [r7, #4]
   8088e:	601a      	str	r2, [r3, #0]
}
   80890:	370c      	adds	r7, #12
   80892:	46bd      	mov	sp, r7
   80894:	f85d 7b04 	ldr.w	r7, [sp], #4
   80898:	4770      	bx	lr
   8089a:	bf00      	nop

0008089c <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   8089c:	b480      	push	{r7}
   8089e:	b083      	sub	sp, #12
   808a0:	af00      	add	r7, sp, #0
   808a2:	6078      	str	r0, [r7, #4]
   808a4:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   808a6:	687b      	ldr	r3, [r7, #4]
   808a8:	683a      	ldr	r2, [r7, #0]
   808aa:	605a      	str	r2, [r3, #4]
}
   808ac:	370c      	adds	r7, #12
   808ae:	46bd      	mov	sp, r7
   808b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   808b4:	4770      	bx	lr
   808b6:	bf00      	nop

000808b8 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   808b8:	b480      	push	{r7}
   808ba:	b083      	sub	sp, #12
   808bc:	af00      	add	r7, sp, #0
   808be:	6078      	str	r0, [r7, #4]
   808c0:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   808c2:	687b      	ldr	r3, [r7, #4]
   808c4:	683a      	ldr	r2, [r7, #0]
   808c6:	609a      	str	r2, [r3, #8]
}
   808c8:	370c      	adds	r7, #12
   808ca:	46bd      	mov	sp, r7
   808cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   808d0:	4770      	bx	lr
   808d2:	bf00      	nop

000808d4 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   808d4:	b480      	push	{r7}
   808d6:	b083      	sub	sp, #12
   808d8:	af00      	add	r7, sp, #0
   808da:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   808dc:	687b      	ldr	r3, [r7, #4]
   808de:	691b      	ldr	r3, [r3, #16]
}
   808e0:	4618      	mov	r0, r3
   808e2:	370c      	adds	r7, #12
   808e4:	46bd      	mov	sp, r7
   808e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   808ea:	4770      	bx	lr

000808ec <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   808ec:	b480      	push	{r7}
   808ee:	b085      	sub	sp, #20
   808f0:	af00      	add	r7, sp, #0
   808f2:	6078      	str	r0, [r7, #4]
   808f4:	460b      	mov	r3, r1
   808f6:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   808f8:	687b      	ldr	r3, [r7, #4]
   808fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   808fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   80900:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   80902:	78fa      	ldrb	r2, [r7, #3]
   80904:	68fb      	ldr	r3, [r7, #12]
   80906:	431a      	orrs	r2, r3
   80908:	687b      	ldr	r3, [r7, #4]
   8090a:	625a      	str	r2, [r3, #36]	; 0x24
}
   8090c:	3714      	adds	r7, #20
   8090e:	46bd      	mov	sp, r7
   80910:	f85d 7b04 	ldr.w	r7, [sp], #4
   80914:	4770      	bx	lr
   80916:	bf00      	nop

00080918 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   80918:	b480      	push	{r7}
   8091a:	b083      	sub	sp, #12
   8091c:	af00      	add	r7, sp, #0
   8091e:	6078      	str	r0, [r7, #4]
   80920:	460b      	mov	r3, r1
   80922:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   80924:	78fb      	ldrb	r3, [r7, #3]
   80926:	687a      	ldr	r2, [r7, #4]
   80928:	015b      	lsls	r3, r3, #5
   8092a:	4413      	add	r3, r2
   8092c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80930:	681b      	ldr	r3, [r3, #0]
}
   80932:	4618      	mov	r0, r3
   80934:	370c      	adds	r7, #12
   80936:	46bd      	mov	sp, r7
   80938:	f85d 7b04 	ldr.w	r7, [sp], #4
   8093c:	4770      	bx	lr
   8093e:	bf00      	nop

00080940 <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80940:	b480      	push	{r7}
   80942:	b085      	sub	sp, #20
   80944:	af00      	add	r7, sp, #0
   80946:	6078      	str	r0, [r7, #4]
   80948:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8094a:	683b      	ldr	r3, [r7, #0]
   8094c:	681b      	ldr	r3, [r3, #0]
   8094e:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   80950:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   80952:	683a      	ldr	r2, [r7, #0]
   80954:	7992      	ldrb	r2, [r2, #6]
   80956:	0412      	lsls	r2, r2, #16
   80958:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   8095c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80960:	6879      	ldr	r1, [r7, #4]
   80962:	015b      	lsls	r3, r3, #5
   80964:	440b      	add	r3, r1
   80966:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8096a:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   8096c:	3714      	adds	r7, #20
   8096e:	46bd      	mov	sp, r7
   80970:	f85d 7b04 	ldr.w	r7, [sp], #4
   80974:	4770      	bx	lr
   80976:	bf00      	nop

00080978 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80978:	b480      	push	{r7}
   8097a:	b085      	sub	sp, #20
   8097c:	af00      	add	r7, sp, #0
   8097e:	6078      	str	r0, [r7, #4]
   80980:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80982:	683b      	ldr	r3, [r7, #0]
   80984:	681b      	ldr	r3, [r3, #0]
   80986:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80988:	683b      	ldr	r3, [r7, #0]
   8098a:	791b      	ldrb	r3, [r3, #4]
   8098c:	2b00      	cmp	r3, #0
   8098e:	d12e      	bne.n	809ee <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   80990:	7bfb      	ldrb	r3, [r7, #15]
   80992:	687a      	ldr	r2, [r7, #4]
   80994:	3310      	adds	r3, #16
   80996:	015b      	lsls	r3, r3, #5
   80998:	4413      	add	r3, r2
   8099a:	2200      	movs	r2, #0
   8099c:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   8099e:	7bfb      	ldrb	r3, [r7, #15]
   809a0:	687a      	ldr	r2, [r7, #4]
   809a2:	3310      	adds	r3, #16
   809a4:	015b      	lsls	r3, r3, #5
   809a6:	4413      	add	r3, r2
   809a8:	2200      	movs	r2, #0
   809aa:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   809ac:	7bfb      	ldrb	r3, [r7, #15]
   809ae:	687a      	ldr	r2, [r7, #4]
   809b0:	015b      	lsls	r3, r3, #5
   809b2:	4413      	add	r3, r2
   809b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   809b8:	2200      	movs	r2, #0
   809ba:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   809bc:	7bfb      	ldrb	r3, [r7, #15]
   809be:	687a      	ldr	r2, [r7, #4]
   809c0:	015b      	lsls	r3, r3, #5
   809c2:	4413      	add	r3, r2
   809c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
   809c8:	2200      	movs	r2, #0
   809ca:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   809cc:	7bfb      	ldrb	r3, [r7, #15]
   809ce:	687a      	ldr	r2, [r7, #4]
   809d0:	015b      	lsls	r3, r3, #5
   809d2:	4413      	add	r3, r2
   809d4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   809d8:	2200      	movs	r2, #0
   809da:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   809dc:	7bfb      	ldrb	r3, [r7, #15]
   809de:	687a      	ldr	r2, [r7, #4]
   809e0:	015b      	lsls	r3, r3, #5
   809e2:	4413      	add	r3, r2
   809e4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   809e8:	2200      	movs	r2, #0
   809ea:	605a      	str	r2, [r3, #4]
		return;
   809ec:	e04e      	b.n	80a8c <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   809ee:	7bfb      	ldrb	r3, [r7, #15]
   809f0:	7bfa      	ldrb	r2, [r7, #15]
   809f2:	6879      	ldr	r1, [r7, #4]
   809f4:	3210      	adds	r2, #16
   809f6:	0152      	lsls	r2, r2, #5
   809f8:	440a      	add	r2, r1
   809fa:	6812      	ldr	r2, [r2, #0]
   809fc:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   80a00:	683a      	ldr	r2, [r7, #0]
   80a02:	79d2      	ldrb	r2, [r2, #7]
   80a04:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   80a06:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a08:	6879      	ldr	r1, [r7, #4]
   80a0a:	3310      	adds	r3, #16
   80a0c:	015b      	lsls	r3, r3, #5
   80a0e:	440b      	add	r3, r1
   80a10:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   80a12:	683b      	ldr	r3, [r7, #0]
   80a14:	795b      	ldrb	r3, [r3, #5]
   80a16:	2b00      	cmp	r3, #0
   80a18:	d015      	beq.n	80a46 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   80a1a:	7bfb      	ldrb	r3, [r7, #15]
   80a1c:	683a      	ldr	r2, [r7, #0]
   80a1e:	68d2      	ldr	r2, [r2, #12]
   80a20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a24:	6879      	ldr	r1, [r7, #4]
   80a26:	3310      	adds	r3, #16
   80a28:	015b      	lsls	r3, r3, #5
   80a2a:	440b      	add	r3, r1
   80a2c:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80a2e:	7bfb      	ldrb	r3, [r7, #15]
   80a30:	683a      	ldr	r2, [r7, #0]
   80a32:	6912      	ldr	r2, [r2, #16]
   80a34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80a38:	6879      	ldr	r1, [r7, #4]
   80a3a:	015b      	lsls	r3, r3, #5
   80a3c:	440b      	add	r3, r1
   80a3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a42:	601a      	str	r2, [r3, #0]
   80a44:	e010      	b.n	80a68 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80a46:	7bfb      	ldrb	r3, [r7, #15]
   80a48:	683a      	ldr	r2, [r7, #0]
   80a4a:	68d2      	ldr	r2, [r2, #12]
   80a4c:	6879      	ldr	r1, [r7, #4]
   80a4e:	3310      	adds	r3, #16
   80a50:	015b      	lsls	r3, r3, #5
   80a52:	440b      	add	r3, r1
   80a54:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80a56:	7bfb      	ldrb	r3, [r7, #15]
   80a58:	683a      	ldr	r2, [r7, #0]
   80a5a:	6912      	ldr	r2, [r2, #16]
   80a5c:	6879      	ldr	r1, [r7, #4]
   80a5e:	015b      	lsls	r3, r3, #5
   80a60:	440b      	add	r3, r1
   80a62:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80a66:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a68:	7bfb      	ldrb	r3, [r7, #15]
   80a6a:	7bfa      	ldrb	r2, [r7, #15]
   80a6c:	6879      	ldr	r1, [r7, #4]
   80a6e:	3210      	adds	r2, #16
   80a70:	0152      	lsls	r2, r2, #5
   80a72:	440a      	add	r2, r1
   80a74:	6812      	ldr	r2, [r2, #0]
   80a76:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   80a7a:	683a      	ldr	r2, [r7, #0]
   80a7c:	7912      	ldrb	r2, [r2, #4]
   80a7e:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   80a80:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80a82:	6879      	ldr	r1, [r7, #4]
   80a84:	3310      	adds	r3, #16
   80a86:	015b      	lsls	r3, r3, #5
   80a88:	440b      	add	r3, r1
   80a8a:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   80a8c:	3714      	adds	r7, #20
   80a8e:	46bd      	mov	sp, r7
   80a90:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a94:	4770      	bx	lr
   80a96:	bf00      	nop

00080a98 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80a98:	b580      	push	{r7, lr}
   80a9a:	b086      	sub	sp, #24
   80a9c:	af00      	add	r7, sp, #0
   80a9e:	6078      	str	r0, [r7, #4]
   80aa0:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80aa2:	2300      	movs	r3, #0
   80aa4:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80aa6:	683b      	ldr	r3, [r7, #0]
   80aa8:	681b      	ldr	r3, [r3, #0]
   80aaa:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   80aac:	683b      	ldr	r3, [r7, #0]
   80aae:	689b      	ldr	r3, [r3, #8]
   80ab0:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   80ab2:	68fb      	ldr	r3, [r7, #12]
   80ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80ab8:	2b00      	cmp	r3, #0
   80aba:	d006      	beq.n	80aca <can_mailbox_read+0x32>
   80abc:	68fb      	ldr	r3, [r7, #12]
   80abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80ac2:	2b00      	cmp	r3, #0
   80ac4:	d001      	beq.n	80aca <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   80ac6:	2302      	movs	r3, #2
   80ac8:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   80aca:	7cfb      	ldrb	r3, [r7, #19]
   80acc:	687a      	ldr	r2, [r7, #4]
   80ace:	015b      	lsls	r3, r3, #5
   80ad0:	4413      	add	r3, r2
   80ad2:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80ad6:	685b      	ldr	r3, [r3, #4]
   80ad8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80adc:	683b      	ldr	r3, [r7, #0]
   80ade:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80ae0:	68fb      	ldr	r3, [r7, #12]
   80ae2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80ae6:	0c1b      	lsrs	r3, r3, #16
   80ae8:	b2da      	uxtb	r2, r3
   80aea:	683b      	ldr	r3, [r7, #0]
   80aec:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   80aee:	7cfb      	ldrb	r3, [r7, #19]
   80af0:	687a      	ldr	r2, [r7, #4]
   80af2:	015b      	lsls	r3, r3, #5
   80af4:	4413      	add	r3, r2
   80af6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80afa:	685a      	ldr	r2, [r3, #4]
   80afc:	683b      	ldr	r3, [r7, #0]
   80afe:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   80b00:	683b      	ldr	r3, [r7, #0]
   80b02:	799b      	ldrb	r3, [r3, #6]
   80b04:	2b04      	cmp	r3, #4
   80b06:	d908      	bls.n	80b1a <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   80b08:	7cfb      	ldrb	r3, [r7, #19]
   80b0a:	687a      	ldr	r2, [r7, #4]
   80b0c:	015b      	lsls	r3, r3, #5
   80b0e:	4413      	add	r3, r2
   80b10:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80b14:	681a      	ldr	r2, [r3, #0]
   80b16:	683b      	ldr	r3, [r7, #0]
   80b18:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   80b1a:	7cfb      	ldrb	r3, [r7, #19]
   80b1c:	687a      	ldr	r2, [r7, #4]
   80b1e:	015b      	lsls	r3, r3, #5
   80b20:	4413      	add	r3, r2
   80b22:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80b26:	681a      	ldr	r2, [r3, #0]
   80b28:	683b      	ldr	r3, [r7, #0]
   80b2a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80b2c:	683b      	ldr	r3, [r7, #0]
   80b2e:	689b      	ldr	r3, [r3, #8]
   80b30:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   80b32:	68fb      	ldr	r3, [r7, #12]
   80b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80b38:	2b00      	cmp	r3, #0
   80b3a:	d003      	beq.n	80b44 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   80b3c:	697b      	ldr	r3, [r7, #20]
   80b3e:	f043 0304 	orr.w	r3, r3, #4
   80b42:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   80b44:	6878      	ldr	r0, [r7, #4]
   80b46:	6839      	ldr	r1, [r7, #0]
   80b48:	4b03      	ldr	r3, [pc, #12]	; (80b58 <can_mailbox_read+0xc0>)
   80b4a:	4798      	blx	r3

	return ul_retval;
   80b4c:	697b      	ldr	r3, [r7, #20]
}
   80b4e:	4618      	mov	r0, r3
   80b50:	3718      	adds	r7, #24
   80b52:	46bd      	mov	sp, r7
   80b54:	bd80      	pop	{r7, pc}
   80b56:	bf00      	nop
   80b58:	00080941 	.word	0x00080941

00080b5c <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80b5c:	b580      	push	{r7, lr}
   80b5e:	b084      	sub	sp, #16
   80b60:	af00      	add	r7, sp, #0
   80b62:	6078      	str	r0, [r7, #4]
   80b64:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80b66:	683b      	ldr	r3, [r7, #0]
   80b68:	681b      	ldr	r3, [r3, #0]
   80b6a:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   80b6c:	7bfb      	ldrb	r3, [r7, #15]
   80b6e:	6878      	ldr	r0, [r7, #4]
   80b70:	4619      	mov	r1, r3
   80b72:	4b27      	ldr	r3, [pc, #156]	; (80c10 <can_mailbox_write+0xb4>)
   80b74:	4798      	blx	r3
   80b76:	4602      	mov	r2, r0
   80b78:	683b      	ldr	r3, [r7, #0]
   80b7a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80b7c:	683b      	ldr	r3, [r7, #0]
   80b7e:	689b      	ldr	r3, [r3, #8]
   80b80:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   80b82:	68bb      	ldr	r3, [r7, #8]
   80b84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80b88:	2b00      	cmp	r3, #0
   80b8a:	d101      	bne.n	80b90 <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   80b8c:	2301      	movs	r3, #1
   80b8e:	e03b      	b.n	80c08 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   80b90:	683b      	ldr	r3, [r7, #0]
   80b92:	795b      	ldrb	r3, [r3, #5]
   80b94:	2b00      	cmp	r3, #0
   80b96:	d00b      	beq.n	80bb0 <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80b98:	7bfb      	ldrb	r3, [r7, #15]
   80b9a:	683a      	ldr	r2, [r7, #0]
   80b9c:	6912      	ldr	r2, [r2, #16]
   80b9e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80ba2:	6879      	ldr	r1, [r7, #4]
   80ba4:	015b      	lsls	r3, r3, #5
   80ba6:	440b      	add	r3, r1
   80ba8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80bac:	601a      	str	r2, [r3, #0]
   80bae:	e008      	b.n	80bc2 <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80bb0:	7bfb      	ldrb	r3, [r7, #15]
   80bb2:	683a      	ldr	r2, [r7, #0]
   80bb4:	6912      	ldr	r2, [r2, #16]
   80bb6:	6879      	ldr	r1, [r7, #4]
   80bb8:	015b      	lsls	r3, r3, #5
   80bba:	440b      	add	r3, r1
   80bbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80bc0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80bc2:	7bfb      	ldrb	r3, [r7, #15]
   80bc4:	683a      	ldr	r2, [r7, #0]
   80bc6:	6992      	ldr	r2, [r2, #24]
   80bc8:	6879      	ldr	r1, [r7, #4]
   80bca:	015b      	lsls	r3, r3, #5
   80bcc:	440b      	add	r3, r1
   80bce:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80bd2:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   80bd4:	683b      	ldr	r3, [r7, #0]
   80bd6:	799b      	ldrb	r3, [r3, #6]
   80bd8:	2b04      	cmp	r3, #4
   80bda:	d908      	bls.n	80bee <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   80bdc:	7bfb      	ldrb	r3, [r7, #15]
   80bde:	683a      	ldr	r2, [r7, #0]
   80be0:	69d2      	ldr	r2, [r2, #28]
   80be2:	6879      	ldr	r1, [r7, #4]
   80be4:	015b      	lsls	r3, r3, #5
   80be6:	440b      	add	r3, r1
   80be8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80bec:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80bee:	7bfb      	ldrb	r3, [r7, #15]
   80bf0:	683a      	ldr	r2, [r7, #0]
   80bf2:	7992      	ldrb	r2, [r2, #6]
   80bf4:	0412      	lsls	r2, r2, #16
   80bf6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80bfa:	6879      	ldr	r1, [r7, #4]
   80bfc:	015b      	lsls	r3, r3, #5
   80bfe:	440b      	add	r3, r1
   80c00:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80c04:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   80c06:	2300      	movs	r3, #0
}
   80c08:	4618      	mov	r0, r3
   80c0a:	3710      	adds	r7, #16
   80c0c:	46bd      	mov	sp, r7
   80c0e:	bd80      	pop	{r7, pc}
   80c10:	00080919 	.word	0x00080919

00080c14 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   80c14:	b580      	push	{r7, lr}
   80c16:	b08c      	sub	sp, #48	; 0x30
   80c18:	af00      	add	r7, sp, #0
   80c1a:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80c1c:	2300      	movs	r3, #0
   80c1e:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80c20:	2300      	movs	r3, #0
   80c22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80c26:	e00d      	b.n	80c44 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   80c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c2c:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   80c2e:	f107 030c 	add.w	r3, r7, #12
   80c32:	6878      	ldr	r0, [r7, #4]
   80c34:	4619      	mov	r1, r3
   80c36:	4b07      	ldr	r3, [pc, #28]	; (80c54 <can_reset_all_mailbox+0x40>)
   80c38:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c3e:	3301      	adds	r3, #1
   80c40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80c44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80c48:	2b07      	cmp	r3, #7
   80c4a:	d9ed      	bls.n	80c28 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   80c4c:	3730      	adds	r7, #48	; 0x30
   80c4e:	46bd      	mov	sp, r7
   80c50:	bd80      	pop	{r7, pc}
   80c52:	bf00      	nop
   80c54:	00080979 	.word	0x00080979

00080c58 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   80c58:	b480      	push	{r7}
   80c5a:	b085      	sub	sp, #20
   80c5c:	af00      	add	r7, sp, #0
   80c5e:	60f8      	str	r0, [r7, #12]
   80c60:	60b9      	str	r1, [r7, #8]
   80c62:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80c64:	687b      	ldr	r3, [r7, #4]
   80c66:	2b00      	cmp	r3, #0
   80c68:	d003      	beq.n	80c72 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   80c6a:	68fb      	ldr	r3, [r7, #12]
   80c6c:	68ba      	ldr	r2, [r7, #8]
   80c6e:	665a      	str	r2, [r3, #100]	; 0x64
   80c70:	e002      	b.n	80c78 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80c72:	68fb      	ldr	r3, [r7, #12]
   80c74:	68ba      	ldr	r2, [r7, #8]
   80c76:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   80c78:	3714      	adds	r7, #20
   80c7a:	46bd      	mov	sp, r7
   80c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   80c80:	4770      	bx	lr
   80c82:	bf00      	nop

00080c84 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   80c84:	b480      	push	{r7}
   80c86:	b087      	sub	sp, #28
   80c88:	af00      	add	r7, sp, #0
   80c8a:	60f8      	str	r0, [r7, #12]
   80c8c:	60b9      	str	r1, [r7, #8]
   80c8e:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80c90:	68fb      	ldr	r3, [r7, #12]
   80c92:	687a      	ldr	r2, [r7, #4]
   80c94:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80c96:	68bb      	ldr	r3, [r7, #8]
   80c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c9c:	d01f      	beq.n	80cde <pio_set_peripheral+0x5a>
   80c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ca2:	d805      	bhi.n	80cb0 <pio_set_peripheral+0x2c>
   80ca4:	2b00      	cmp	r3, #0
   80ca6:	d027      	beq.n	80cf8 <pio_set_peripheral+0x74>
   80ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80cac:	d00a      	beq.n	80cc4 <pio_set_peripheral+0x40>
   80cae:	e01f      	b.n	80cf0 <pio_set_peripheral+0x6c>
   80cb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80cb4:	d020      	beq.n	80cf8 <pio_set_peripheral+0x74>
   80cb6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80cba:	d01d      	beq.n	80cf8 <pio_set_peripheral+0x74>
   80cbc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80cc0:	d01a      	beq.n	80cf8 <pio_set_peripheral+0x74>
   80cc2:	e015      	b.n	80cf0 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80cc4:	68fb      	ldr	r3, [r7, #12]
   80cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80cc8:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80cca:	68fb      	ldr	r3, [r7, #12]
   80ccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80cce:	687b      	ldr	r3, [r7, #4]
   80cd0:	43d9      	mvns	r1, r3
   80cd2:	697b      	ldr	r3, [r7, #20]
   80cd4:	400b      	ands	r3, r1
   80cd6:	401a      	ands	r2, r3
   80cd8:	68fb      	ldr	r3, [r7, #12]
   80cda:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80cdc:	e008      	b.n	80cf0 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80cde:	68fb      	ldr	r3, [r7, #12]
   80ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   80ce2:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80ce4:	687a      	ldr	r2, [r7, #4]
   80ce6:	697b      	ldr	r3, [r7, #20]
   80ce8:	431a      	orrs	r2, r3
   80cea:	68fb      	ldr	r3, [r7, #12]
   80cec:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   80cee:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   80cf0:	68fb      	ldr	r3, [r7, #12]
   80cf2:	687a      	ldr	r2, [r7, #4]
   80cf4:	605a      	str	r2, [r3, #4]
   80cf6:	e000      	b.n	80cfa <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   80cf8:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   80cfa:	371c      	adds	r7, #28
   80cfc:	46bd      	mov	sp, r7
   80cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d02:	4770      	bx	lr

00080d04 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   80d04:	b580      	push	{r7, lr}
   80d06:	b084      	sub	sp, #16
   80d08:	af00      	add	r7, sp, #0
   80d0a:	60f8      	str	r0, [r7, #12]
   80d0c:	60b9      	str	r1, [r7, #8]
   80d0e:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   80d10:	68f8      	ldr	r0, [r7, #12]
   80d12:	68b9      	ldr	r1, [r7, #8]
   80d14:	4b18      	ldr	r3, [pc, #96]	; (80d78 <pio_set_input+0x74>)
   80d16:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   80d18:	687b      	ldr	r3, [r7, #4]
   80d1a:	f003 0301 	and.w	r3, r3, #1
   80d1e:	68f8      	ldr	r0, [r7, #12]
   80d20:	68b9      	ldr	r1, [r7, #8]
   80d22:	461a      	mov	r2, r3
   80d24:	4b15      	ldr	r3, [pc, #84]	; (80d7c <pio_set_input+0x78>)
   80d26:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80d28:	687b      	ldr	r3, [r7, #4]
   80d2a:	f003 030a 	and.w	r3, r3, #10
   80d2e:	2b00      	cmp	r3, #0
   80d30:	d003      	beq.n	80d3a <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   80d32:	68fb      	ldr	r3, [r7, #12]
   80d34:	68ba      	ldr	r2, [r7, #8]
   80d36:	621a      	str	r2, [r3, #32]
   80d38:	e002      	b.n	80d40 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80d3a:	68fb      	ldr	r3, [r7, #12]
   80d3c:	68ba      	ldr	r2, [r7, #8]
   80d3e:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80d40:	687b      	ldr	r3, [r7, #4]
   80d42:	f003 0302 	and.w	r3, r3, #2
   80d46:	2b00      	cmp	r3, #0
   80d48:	d004      	beq.n	80d54 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   80d4a:	68fb      	ldr	r3, [r7, #12]
   80d4c:	68ba      	ldr	r2, [r7, #8]
   80d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   80d52:	e008      	b.n	80d66 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80d54:	687b      	ldr	r3, [r7, #4]
   80d56:	f003 0308 	and.w	r3, r3, #8
   80d5a:	2b00      	cmp	r3, #0
   80d5c:	d003      	beq.n	80d66 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   80d5e:	68fb      	ldr	r3, [r7, #12]
   80d60:	68ba      	ldr	r2, [r7, #8]
   80d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80d66:	68fb      	ldr	r3, [r7, #12]
   80d68:	68ba      	ldr	r2, [r7, #8]
   80d6a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   80d6c:	68fb      	ldr	r3, [r7, #12]
   80d6e:	68ba      	ldr	r2, [r7, #8]
   80d70:	601a      	str	r2, [r3, #0]
}
   80d72:	3710      	adds	r7, #16
   80d74:	46bd      	mov	sp, r7
   80d76:	bd80      	pop	{r7, pc}
   80d78:	00080de5 	.word	0x00080de5
   80d7c:	00080c59 	.word	0x00080c59

00080d80 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80d80:	b580      	push	{r7, lr}
   80d82:	b084      	sub	sp, #16
   80d84:	af00      	add	r7, sp, #0
   80d86:	60f8      	str	r0, [r7, #12]
   80d88:	60b9      	str	r1, [r7, #8]
   80d8a:	607a      	str	r2, [r7, #4]
   80d8c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   80d8e:	68f8      	ldr	r0, [r7, #12]
   80d90:	68b9      	ldr	r1, [r7, #8]
   80d92:	4b12      	ldr	r3, [pc, #72]	; (80ddc <pio_set_output+0x5c>)
   80d94:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   80d96:	68f8      	ldr	r0, [r7, #12]
   80d98:	68b9      	ldr	r1, [r7, #8]
   80d9a:	69ba      	ldr	r2, [r7, #24]
   80d9c:	4b10      	ldr	r3, [pc, #64]	; (80de0 <pio_set_output+0x60>)
   80d9e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80da0:	683b      	ldr	r3, [r7, #0]
   80da2:	2b00      	cmp	r3, #0
   80da4:	d003      	beq.n	80dae <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   80da6:	68fb      	ldr	r3, [r7, #12]
   80da8:	68ba      	ldr	r2, [r7, #8]
   80daa:	651a      	str	r2, [r3, #80]	; 0x50
   80dac:	e002      	b.n	80db4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80dae:	68fb      	ldr	r3, [r7, #12]
   80db0:	68ba      	ldr	r2, [r7, #8]
   80db2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80db4:	687b      	ldr	r3, [r7, #4]
   80db6:	2b00      	cmp	r3, #0
   80db8:	d003      	beq.n	80dc2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   80dba:	68fb      	ldr	r3, [r7, #12]
   80dbc:	68ba      	ldr	r2, [r7, #8]
   80dbe:	631a      	str	r2, [r3, #48]	; 0x30
   80dc0:	e002      	b.n	80dc8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80dc2:	68fb      	ldr	r3, [r7, #12]
   80dc4:	68ba      	ldr	r2, [r7, #8]
   80dc6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80dc8:	68fb      	ldr	r3, [r7, #12]
   80dca:	68ba      	ldr	r2, [r7, #8]
   80dcc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   80dce:	68fb      	ldr	r3, [r7, #12]
   80dd0:	68ba      	ldr	r2, [r7, #8]
   80dd2:	601a      	str	r2, [r3, #0]
}
   80dd4:	3710      	adds	r7, #16
   80dd6:	46bd      	mov	sp, r7
   80dd8:	bd80      	pop	{r7, pc}
   80dda:	bf00      	nop
   80ddc:	00080de5 	.word	0x00080de5
   80de0:	00080c59 	.word	0x00080c59

00080de4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   80de4:	b480      	push	{r7}
   80de6:	b083      	sub	sp, #12
   80de8:	af00      	add	r7, sp, #0
   80dea:	6078      	str	r0, [r7, #4]
   80dec:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   80dee:	687b      	ldr	r3, [r7, #4]
   80df0:	683a      	ldr	r2, [r7, #0]
   80df2:	645a      	str	r2, [r3, #68]	; 0x44
}
   80df4:	370c      	adds	r7, #12
   80df6:	46bd      	mov	sp, r7
   80df8:	f85d 7b04 	ldr.w	r7, [sp], #4
   80dfc:	4770      	bx	lr
   80dfe:	bf00      	nop

00080e00 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   80e00:	b480      	push	{r7}
   80e02:	b083      	sub	sp, #12
   80e04:	af00      	add	r7, sp, #0
   80e06:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   80e08:	687b      	ldr	r3, [r7, #4]
   80e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   80e0c:	4618      	mov	r0, r3
   80e0e:	370c      	adds	r7, #12
   80e10:	46bd      	mov	sp, r7
   80e12:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e16:	4770      	bx	lr

00080e18 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   80e18:	b480      	push	{r7}
   80e1a:	b083      	sub	sp, #12
   80e1c:	af00      	add	r7, sp, #0
   80e1e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   80e20:	687b      	ldr	r3, [r7, #4]
   80e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   80e24:	4618      	mov	r0, r3
   80e26:	370c      	adds	r7, #12
   80e28:	46bd      	mov	sp, r7
   80e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e2e:	4770      	bx	lr

00080e30 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   80e30:	b480      	push	{r7}
   80e32:	b085      	sub	sp, #20
   80e34:	af00      	add	r7, sp, #0
   80e36:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e38:	687b      	ldr	r3, [r7, #4]
   80e3a:	095b      	lsrs	r3, r3, #5
   80e3c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e40:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e44:	025b      	lsls	r3, r3, #9
   80e46:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80e48:	687b      	ldr	r3, [r7, #4]
   80e4a:	f003 031f 	and.w	r3, r3, #31
   80e4e:	2201      	movs	r2, #1
   80e50:	fa02 f303 	lsl.w	r3, r2, r3
   80e54:	461a      	mov	r2, r3
   80e56:	68fb      	ldr	r3, [r7, #12]
   80e58:	631a      	str	r2, [r3, #48]	; 0x30
}
   80e5a:	3714      	adds	r7, #20
   80e5c:	46bd      	mov	sp, r7
   80e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e62:	4770      	bx	lr

00080e64 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   80e64:	b480      	push	{r7}
   80e66:	b085      	sub	sp, #20
   80e68:	af00      	add	r7, sp, #0
   80e6a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e6c:	687b      	ldr	r3, [r7, #4]
   80e6e:	095b      	lsrs	r3, r3, #5
   80e70:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e74:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e78:	025b      	lsls	r3, r3, #9
   80e7a:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80e7c:	687b      	ldr	r3, [r7, #4]
   80e7e:	f003 031f 	and.w	r3, r3, #31
   80e82:	2201      	movs	r2, #1
   80e84:	fa02 f303 	lsl.w	r3, r2, r3
   80e88:	461a      	mov	r2, r3
   80e8a:	68fb      	ldr	r3, [r7, #12]
   80e8c:	635a      	str	r2, [r3, #52]	; 0x34
}
   80e8e:	3714      	adds	r7, #20
   80e90:	46bd      	mov	sp, r7
   80e92:	f85d 7b04 	ldr.w	r7, [sp], #4
   80e96:	4770      	bx	lr

00080e98 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   80e98:	b480      	push	{r7}
   80e9a:	b085      	sub	sp, #20
   80e9c:	af00      	add	r7, sp, #0
   80e9e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80ea0:	687b      	ldr	r3, [r7, #4]
   80ea2:	095b      	lsrs	r3, r3, #5
   80ea4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ea8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80eac:	025b      	lsls	r3, r3, #9
   80eae:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   80eb0:	68fb      	ldr	r3, [r7, #12]
   80eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   80eb4:	687b      	ldr	r3, [r7, #4]
   80eb6:	f003 031f 	and.w	r3, r3, #31
   80eba:	2101      	movs	r1, #1
   80ebc:	fa01 f303 	lsl.w	r3, r1, r3
   80ec0:	4013      	ands	r3, r2
   80ec2:	2b00      	cmp	r3, #0
   80ec4:	d009      	beq.n	80eda <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80ec6:	687b      	ldr	r3, [r7, #4]
   80ec8:	f003 031f 	and.w	r3, r3, #31
   80ecc:	2201      	movs	r2, #1
   80ece:	fa02 f303 	lsl.w	r3, r2, r3
   80ed2:	461a      	mov	r2, r3
   80ed4:	68fb      	ldr	r3, [r7, #12]
   80ed6:	635a      	str	r2, [r3, #52]	; 0x34
   80ed8:	e008      	b.n	80eec <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80eda:	687b      	ldr	r3, [r7, #4]
   80edc:	f003 031f 	and.w	r3, r3, #31
   80ee0:	2201      	movs	r2, #1
   80ee2:	fa02 f303 	lsl.w	r3, r2, r3
   80ee6:	461a      	mov	r2, r3
   80ee8:	68fb      	ldr	r3, [r7, #12]
   80eea:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   80eec:	3714      	adds	r7, #20
   80eee:	46bd      	mov	sp, r7
   80ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
   80ef4:	4770      	bx	lr
   80ef6:	bf00      	nop

00080ef8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80ef8:	b590      	push	{r4, r7, lr}
   80efa:	b087      	sub	sp, #28
   80efc:	af02      	add	r7, sp, #8
   80efe:	6078      	str	r0, [r7, #4]
   80f00:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80f02:	687b      	ldr	r3, [r7, #4]
   80f04:	095b      	lsrs	r3, r3, #5
   80f06:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80f0a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80f0e:	025b      	lsls	r3, r3, #9
   80f10:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   80f12:	683b      	ldr	r3, [r7, #0]
   80f14:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   80f18:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f1c:	d048      	beq.n	80fb0 <pio_configure_pin+0xb8>
   80f1e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f22:	d806      	bhi.n	80f32 <pio_configure_pin+0x3a>
   80f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80f28:	d00a      	beq.n	80f40 <pio_configure_pin+0x48>
   80f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80f2e:	d023      	beq.n	80f78 <pio_configure_pin+0x80>
   80f30:	e070      	b.n	81014 <pio_configure_pin+0x11c>
   80f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80f36:	d047      	beq.n	80fc8 <pio_configure_pin+0xd0>
   80f38:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80f3c:	d044      	beq.n	80fc8 <pio_configure_pin+0xd0>
   80f3e:	e069      	b.n	81014 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80f40:	687b      	ldr	r3, [r7, #4]
   80f42:	f003 031f 	and.w	r3, r3, #31
   80f46:	2201      	movs	r2, #1
   80f48:	fa02 f303 	lsl.w	r3, r2, r3
   80f4c:	68f8      	ldr	r0, [r7, #12]
   80f4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f52:	461a      	mov	r2, r3
   80f54:	4b33      	ldr	r3, [pc, #204]	; (81024 <pio_configure_pin+0x12c>)
   80f56:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80f58:	687b      	ldr	r3, [r7, #4]
   80f5a:	f003 031f 	and.w	r3, r3, #31
   80f5e:	2201      	movs	r2, #1
   80f60:	fa02 f303 	lsl.w	r3, r2, r3
   80f64:	461a      	mov	r2, r3
   80f66:	683b      	ldr	r3, [r7, #0]
   80f68:	f003 0301 	and.w	r3, r3, #1
   80f6c:	68f8      	ldr	r0, [r7, #12]
   80f6e:	4611      	mov	r1, r2
   80f70:	461a      	mov	r2, r3
   80f72:	4b2d      	ldr	r3, [pc, #180]	; (81028 <pio_configure_pin+0x130>)
   80f74:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80f76:	e04f      	b.n	81018 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80f78:	687b      	ldr	r3, [r7, #4]
   80f7a:	f003 031f 	and.w	r3, r3, #31
   80f7e:	2201      	movs	r2, #1
   80f80:	fa02 f303 	lsl.w	r3, r2, r3
   80f84:	68f8      	ldr	r0, [r7, #12]
   80f86:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f8a:	461a      	mov	r2, r3
   80f8c:	4b25      	ldr	r3, [pc, #148]	; (81024 <pio_configure_pin+0x12c>)
   80f8e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   80f90:	687b      	ldr	r3, [r7, #4]
   80f92:	f003 031f 	and.w	r3, r3, #31
   80f96:	2201      	movs	r2, #1
   80f98:	fa02 f303 	lsl.w	r3, r2, r3
   80f9c:	461a      	mov	r2, r3
   80f9e:	683b      	ldr	r3, [r7, #0]
   80fa0:	f003 0301 	and.w	r3, r3, #1
   80fa4:	68f8      	ldr	r0, [r7, #12]
   80fa6:	4611      	mov	r1, r2
   80fa8:	461a      	mov	r2, r3
   80faa:	4b1f      	ldr	r3, [pc, #124]	; (81028 <pio_configure_pin+0x130>)
   80fac:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   80fae:	e033      	b.n	81018 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80fb0:	687b      	ldr	r3, [r7, #4]
   80fb2:	f003 031f 	and.w	r3, r3, #31
   80fb6:	2201      	movs	r2, #1
   80fb8:	fa02 f303 	lsl.w	r3, r2, r3
   80fbc:	68f8      	ldr	r0, [r7, #12]
   80fbe:	4619      	mov	r1, r3
   80fc0:	683a      	ldr	r2, [r7, #0]
   80fc2:	4b1a      	ldr	r3, [pc, #104]	; (8102c <pio_configure_pin+0x134>)
   80fc4:	4798      	blx	r3
		break;
   80fc6:	e027      	b.n	81018 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fc8:	687b      	ldr	r3, [r7, #4]
   80fca:	f003 031f 	and.w	r3, r3, #31
   80fce:	2201      	movs	r2, #1
   80fd0:	fa02 f303 	lsl.w	r3, r2, r3
   80fd4:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80fd6:	683b      	ldr	r3, [r7, #0]
   80fd8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80fdc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80fe0:	bf14      	ite	ne
   80fe2:	2300      	movne	r3, #0
   80fe4:	2301      	moveq	r3, #1
   80fe6:	b2db      	uxtb	r3, r3
   80fe8:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   80fea:	683b      	ldr	r3, [r7, #0]
   80fec:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80ff0:	2b00      	cmp	r3, #0
   80ff2:	bf0c      	ite	eq
   80ff4:	2300      	moveq	r3, #0
   80ff6:	2301      	movne	r3, #1
   80ff8:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   80ffa:	6838      	ldr	r0, [r7, #0]
   80ffc:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81000:	2800      	cmp	r0, #0
   81002:	bf0c      	ite	eq
   81004:	2000      	moveq	r0, #0
   81006:	2001      	movne	r0, #1
   81008:	b2c0      	uxtb	r0, r0
   8100a:	9000      	str	r0, [sp, #0]
   8100c:	68f8      	ldr	r0, [r7, #12]
   8100e:	4c08      	ldr	r4, [pc, #32]	; (81030 <pio_configure_pin+0x138>)
   81010:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81012:	e001      	b.n	81018 <pio_configure_pin+0x120>

	default:
		return 0;
   81014:	2300      	movs	r3, #0
   81016:	e000      	b.n	8101a <pio_configure_pin+0x122>
	}

	return 1;
   81018:	2301      	movs	r3, #1
}
   8101a:	4618      	mov	r0, r3
   8101c:	3714      	adds	r7, #20
   8101e:	46bd      	mov	sp, r7
   81020:	bd90      	pop	{r4, r7, pc}
   81022:	bf00      	nop
   81024:	00080c85 	.word	0x00080c85
   81028:	00080c59 	.word	0x00080c59
   8102c:	00080d05 	.word	0x00080d05
   81030:	00080d81 	.word	0x00080d81

00081034 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81034:	b580      	push	{r7, lr}
   81036:	b084      	sub	sp, #16
   81038:	af00      	add	r7, sp, #0
   8103a:	6078      	str	r0, [r7, #4]
   8103c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8103e:	6878      	ldr	r0, [r7, #4]
   81040:	4b22      	ldr	r3, [pc, #136]	; (810cc <pio_handler_process+0x98>)
   81042:	4798      	blx	r3
   81044:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   81046:	6878      	ldr	r0, [r7, #4]
   81048:	4b21      	ldr	r3, [pc, #132]	; (810d0 <pio_handler_process+0x9c>)
   8104a:	4798      	blx	r3
   8104c:	4603      	mov	r3, r0
   8104e:	68fa      	ldr	r2, [r7, #12]
   81050:	4013      	ands	r3, r2
   81052:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   81054:	68fb      	ldr	r3, [r7, #12]
   81056:	2b00      	cmp	r3, #0
   81058:	d035      	beq.n	810c6 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   8105a:	2300      	movs	r3, #0
   8105c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8105e:	e02f      	b.n	810c0 <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   81060:	4a1c      	ldr	r2, [pc, #112]	; (810d4 <pio_handler_process+0xa0>)
   81062:	68bb      	ldr	r3, [r7, #8]
   81064:	011b      	lsls	r3, r3, #4
   81066:	4413      	add	r3, r2
   81068:	681a      	ldr	r2, [r3, #0]
   8106a:	683b      	ldr	r3, [r7, #0]
   8106c:	429a      	cmp	r2, r3
   8106e:	d124      	bne.n	810ba <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   81070:	4a18      	ldr	r2, [pc, #96]	; (810d4 <pio_handler_process+0xa0>)
   81072:	68bb      	ldr	r3, [r7, #8]
   81074:	011b      	lsls	r3, r3, #4
   81076:	4413      	add	r3, r2
   81078:	685a      	ldr	r2, [r3, #4]
   8107a:	68fb      	ldr	r3, [r7, #12]
   8107c:	4013      	ands	r3, r2
   8107e:	2b00      	cmp	r3, #0
   81080:	d01b      	beq.n	810ba <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81082:	4a14      	ldr	r2, [pc, #80]	; (810d4 <pio_handler_process+0xa0>)
   81084:	68bb      	ldr	r3, [r7, #8]
   81086:	011b      	lsls	r3, r3, #4
   81088:	4413      	add	r3, r2
   8108a:	3308      	adds	r3, #8
   8108c:	685b      	ldr	r3, [r3, #4]
   8108e:	4911      	ldr	r1, [pc, #68]	; (810d4 <pio_handler_process+0xa0>)
   81090:	68ba      	ldr	r2, [r7, #8]
   81092:	0112      	lsls	r2, r2, #4
   81094:	440a      	add	r2, r1
   81096:	6811      	ldr	r1, [r2, #0]
   81098:	480e      	ldr	r0, [pc, #56]	; (810d4 <pio_handler_process+0xa0>)
   8109a:	68ba      	ldr	r2, [r7, #8]
   8109c:	0112      	lsls	r2, r2, #4
   8109e:	4402      	add	r2, r0
   810a0:	6852      	ldr	r2, [r2, #4]
   810a2:	4608      	mov	r0, r1
   810a4:	4611      	mov	r1, r2
   810a6:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   810a8:	4a0a      	ldr	r2, [pc, #40]	; (810d4 <pio_handler_process+0xa0>)
   810aa:	68bb      	ldr	r3, [r7, #8]
   810ac:	011b      	lsls	r3, r3, #4
   810ae:	4413      	add	r3, r2
   810b0:	685b      	ldr	r3, [r3, #4]
   810b2:	43db      	mvns	r3, r3
   810b4:	68fa      	ldr	r2, [r7, #12]
   810b6:	4013      	ands	r3, r2
   810b8:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   810ba:	68bb      	ldr	r3, [r7, #8]
   810bc:	3301      	adds	r3, #1
   810be:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   810c0:	68fb      	ldr	r3, [r7, #12]
   810c2:	2b00      	cmp	r3, #0
   810c4:	d1cc      	bne.n	81060 <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   810c6:	3710      	adds	r7, #16
   810c8:	46bd      	mov	sp, r7
   810ca:	bd80      	pop	{r7, pc}
   810cc:	00080e01 	.word	0x00080e01
   810d0:	00080e19 	.word	0x00080e19
   810d4:	20070454 	.word	0x20070454

000810d8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   810d8:	b580      	push	{r7, lr}
   810da:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   810dc:	4802      	ldr	r0, [pc, #8]	; (810e8 <PIOA_Handler+0x10>)
   810de:	210b      	movs	r1, #11
   810e0:	4b02      	ldr	r3, [pc, #8]	; (810ec <PIOA_Handler+0x14>)
   810e2:	4798      	blx	r3
}
   810e4:	bd80      	pop	{r7, pc}
   810e6:	bf00      	nop
   810e8:	400e0e00 	.word	0x400e0e00
   810ec:	00081035 	.word	0x00081035

000810f0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   810f0:	b580      	push	{r7, lr}
   810f2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   810f4:	4802      	ldr	r0, [pc, #8]	; (81100 <PIOB_Handler+0x10>)
   810f6:	210c      	movs	r1, #12
   810f8:	4b02      	ldr	r3, [pc, #8]	; (81104 <PIOB_Handler+0x14>)
   810fa:	4798      	blx	r3
}
   810fc:	bd80      	pop	{r7, pc}
   810fe:	bf00      	nop
   81100:	400e1000 	.word	0x400e1000
   81104:	00081035 	.word	0x00081035

00081108 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81108:	b580      	push	{r7, lr}
   8110a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   8110c:	4802      	ldr	r0, [pc, #8]	; (81118 <PIOC_Handler+0x10>)
   8110e:	210d      	movs	r1, #13
   81110:	4b02      	ldr	r3, [pc, #8]	; (8111c <PIOC_Handler+0x14>)
   81112:	4798      	blx	r3
}
   81114:	bd80      	pop	{r7, pc}
   81116:	bf00      	nop
   81118:	400e1200 	.word	0x400e1200
   8111c:	00081035 	.word	0x00081035

00081120 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81120:	b580      	push	{r7, lr}
   81122:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   81124:	4802      	ldr	r0, [pc, #8]	; (81130 <PIOD_Handler+0x10>)
   81126:	210e      	movs	r1, #14
   81128:	4b02      	ldr	r3, [pc, #8]	; (81134 <PIOD_Handler+0x14>)
   8112a:	4798      	blx	r3
}
   8112c:	bd80      	pop	{r7, pc}
   8112e:	bf00      	nop
   81130:	400e1400 	.word	0x400e1400
   81134:	00081035 	.word	0x00081035

00081138 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   81138:	b480      	push	{r7}
   8113a:	b085      	sub	sp, #20
   8113c:	af00      	add	r7, sp, #0
   8113e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81140:	4b1d      	ldr	r3, [pc, #116]	; (811b8 <pmc_switch_mck_to_pllack+0x80>)
   81142:	4a1d      	ldr	r2, [pc, #116]	; (811b8 <pmc_switch_mck_to_pllack+0x80>)
   81144:	6b12      	ldr	r2, [r2, #48]	; 0x30
   81146:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   8114a:	687a      	ldr	r2, [r7, #4]
   8114c:	430a      	orrs	r2, r1
   8114e:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81150:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81154:	60fb      	str	r3, [r7, #12]
   81156:	e007      	b.n	81168 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81158:	68fb      	ldr	r3, [r7, #12]
   8115a:	2b00      	cmp	r3, #0
   8115c:	d101      	bne.n	81162 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8115e:	2301      	movs	r3, #1
   81160:	e023      	b.n	811aa <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81162:	68fb      	ldr	r3, [r7, #12]
   81164:	3b01      	subs	r3, #1
   81166:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81168:	4b13      	ldr	r3, [pc, #76]	; (811b8 <pmc_switch_mck_to_pllack+0x80>)
   8116a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8116c:	f003 0308 	and.w	r3, r3, #8
   81170:	2b00      	cmp	r3, #0
   81172:	d0f1      	beq.n	81158 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81174:	4b10      	ldr	r3, [pc, #64]	; (811b8 <pmc_switch_mck_to_pllack+0x80>)
   81176:	4a10      	ldr	r2, [pc, #64]	; (811b8 <pmc_switch_mck_to_pllack+0x80>)
   81178:	6b12      	ldr	r2, [r2, #48]	; 0x30
   8117a:	f022 0203 	bic.w	r2, r2, #3
   8117e:	f042 0202 	orr.w	r2, r2, #2
   81182:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81184:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81188:	60fb      	str	r3, [r7, #12]
   8118a:	e007      	b.n	8119c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8118c:	68fb      	ldr	r3, [r7, #12]
   8118e:	2b00      	cmp	r3, #0
   81190:	d101      	bne.n	81196 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   81192:	2301      	movs	r3, #1
   81194:	e009      	b.n	811aa <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   81196:	68fb      	ldr	r3, [r7, #12]
   81198:	3b01      	subs	r3, #1
   8119a:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8119c:	4b06      	ldr	r3, [pc, #24]	; (811b8 <pmc_switch_mck_to_pllack+0x80>)
   8119e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   811a0:	f003 0308 	and.w	r3, r3, #8
   811a4:	2b00      	cmp	r3, #0
   811a6:	d0f1      	beq.n	8118c <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   811a8:	2300      	movs	r3, #0
}
   811aa:	4618      	mov	r0, r3
   811ac:	3714      	adds	r7, #20
   811ae:	46bd      	mov	sp, r7
   811b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   811b4:	4770      	bx	lr
   811b6:	bf00      	nop
   811b8:	400e0600 	.word	0x400e0600

000811bc <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   811bc:	b480      	push	{r7}
   811be:	b083      	sub	sp, #12
   811c0:	af00      	add	r7, sp, #0
   811c2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   811c4:	687b      	ldr	r3, [r7, #4]
   811c6:	2b01      	cmp	r3, #1
   811c8:	d107      	bne.n	811da <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   811ca:	4a0a      	ldr	r2, [pc, #40]	; (811f4 <pmc_switch_sclk_to_32kxtal+0x38>)
   811cc:	4b09      	ldr	r3, [pc, #36]	; (811f4 <pmc_switch_sclk_to_32kxtal+0x38>)
   811ce:	689b      	ldr	r3, [r3, #8]
   811d0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   811d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   811d8:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   811da:	4a06      	ldr	r2, [pc, #24]	; (811f4 <pmc_switch_sclk_to_32kxtal+0x38>)
   811dc:	4b05      	ldr	r3, [pc, #20]	; (811f4 <pmc_switch_sclk_to_32kxtal+0x38>)
   811de:	681b      	ldr	r3, [r3, #0]
   811e0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   811e4:	f043 0308 	orr.w	r3, r3, #8
   811e8:	6013      	str	r3, [r2, #0]
}
   811ea:	370c      	adds	r7, #12
   811ec:	46bd      	mov	sp, r7
   811ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   811f2:	4770      	bx	lr
   811f4:	400e1a10 	.word	0x400e1a10

000811f8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   811f8:	b480      	push	{r7}
   811fa:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   811fc:	4b09      	ldr	r3, [pc, #36]	; (81224 <pmc_osc_is_ready_32kxtal+0x2c>)
   811fe:	695b      	ldr	r3, [r3, #20]
   81200:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   81204:	2b00      	cmp	r3, #0
   81206:	d007      	beq.n	81218 <pmc_osc_is_ready_32kxtal+0x20>
   81208:	4b07      	ldr	r3, [pc, #28]	; (81228 <pmc_osc_is_ready_32kxtal+0x30>)
   8120a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   81210:	2b00      	cmp	r3, #0
   81212:	d001      	beq.n	81218 <pmc_osc_is_ready_32kxtal+0x20>
   81214:	2301      	movs	r3, #1
   81216:	e000      	b.n	8121a <pmc_osc_is_ready_32kxtal+0x22>
   81218:	2300      	movs	r3, #0
}
   8121a:	4618      	mov	r0, r3
   8121c:	46bd      	mov	sp, r7
   8121e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81222:	4770      	bx	lr
   81224:	400e1a10 	.word	0x400e1a10
   81228:	400e0600 	.word	0x400e0600

0008122c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   8122c:	b480      	push	{r7}
   8122e:	b085      	sub	sp, #20
   81230:	af00      	add	r7, sp, #0
   81232:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   81234:	2300      	movs	r3, #0
   81236:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   81238:	4b21      	ldr	r3, [pc, #132]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   8123a:	6a1b      	ldr	r3, [r3, #32]
   8123c:	f003 0301 	and.w	r3, r3, #1
   81240:	2b00      	cmp	r3, #0
   81242:	d00e      	beq.n	81262 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81244:	4a1e      	ldr	r2, [pc, #120]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   81246:	4b1e      	ldr	r3, [pc, #120]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   81248:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   8124a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8124e:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   81252:	6879      	ldr	r1, [r7, #4]
   81254:	430b      	orrs	r3, r1
   81256:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8125a:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8125e:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   81260:	e00b      	b.n	8127a <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   81262:	2301      	movs	r3, #1
   81264:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81266:	4a16      	ldr	r2, [pc, #88]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   81268:	4b15      	ldr	r3, [pc, #84]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   8126a:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   8126c:	4b15      	ldr	r3, [pc, #84]	; (812c4 <pmc_switch_mainck_to_fastrc+0x98>)
   8126e:	400b      	ands	r3, r1
   81270:	6879      	ldr	r1, [r7, #4]
   81272:	4319      	orrs	r1, r3
   81274:	4b14      	ldr	r3, [pc, #80]	; (812c8 <pmc_switch_mainck_to_fastrc+0x9c>)
   81276:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   81278:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8127a:	bf00      	nop
   8127c:	4b10      	ldr	r3, [pc, #64]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   8127e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81284:	2b00      	cmp	r3, #0
   81286:	d0f9      	beq.n	8127c <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   81288:	4a0d      	ldr	r2, [pc, #52]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   8128a:	4b0d      	ldr	r3, [pc, #52]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   8128c:	6a1b      	ldr	r3, [r3, #32]
   8128e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   81292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   81296:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8129a:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   8129c:	68fb      	ldr	r3, [r7, #12]
   8129e:	2b00      	cmp	r3, #0
   812a0:	d009      	beq.n	812b6 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812a2:	4a07      	ldr	r2, [pc, #28]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   812a4:	4b06      	ldr	r3, [pc, #24]	; (812c0 <pmc_switch_mainck_to_fastrc+0x94>)
   812a6:	6a1b      	ldr	r3, [r3, #32]
   812a8:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   812ac:	f023 0301 	bic.w	r3, r3, #1
   812b0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   812b4:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   812b6:	3714      	adds	r7, #20
   812b8:	46bd      	mov	sp, r7
   812ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   812be:	4770      	bx	lr
   812c0:	400e0600 	.word	0x400e0600
   812c4:	ffc8c086 	.word	0xffc8c086
   812c8:	00373f09 	.word	0x00373f09

000812cc <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   812cc:	b480      	push	{r7}
   812ce:	b083      	sub	sp, #12
   812d0:	af00      	add	r7, sp, #0
   812d2:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   812d4:	687b      	ldr	r3, [r7, #4]
   812d6:	2b00      	cmp	r3, #0
   812d8:	d008      	beq.n	812ec <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812da:	4912      	ldr	r1, [pc, #72]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   812dc:	4b11      	ldr	r3, [pc, #68]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   812de:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   812e0:	4a11      	ldr	r2, [pc, #68]	; (81328 <pmc_switch_mainck_to_xtal+0x5c>)
   812e2:	401a      	ands	r2, r3
   812e4:	4b11      	ldr	r3, [pc, #68]	; (8132c <pmc_switch_mainck_to_xtal+0x60>)
   812e6:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812e8:	620b      	str	r3, [r1, #32]
   812ea:	e016      	b.n	8131a <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   812ec:	490d      	ldr	r1, [pc, #52]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   812ee:	4b0d      	ldr	r3, [pc, #52]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   812f0:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   812f2:	4a0f      	ldr	r2, [pc, #60]	; (81330 <pmc_switch_mainck_to_xtal+0x64>)
   812f4:	401a      	ands	r2, r3
   812f6:	4b0f      	ldr	r3, [pc, #60]	; (81334 <pmc_switch_mainck_to_xtal+0x68>)
   812f8:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   812fa:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   812fc:	bf00      	nop
   812fe:	4b09      	ldr	r3, [pc, #36]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   81300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81302:	f003 0301 	and.w	r3, r3, #1
   81306:	2b00      	cmp	r3, #0
   81308:	d0f9      	beq.n	812fe <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   8130a:	4a06      	ldr	r2, [pc, #24]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   8130c:	4b05      	ldr	r3, [pc, #20]	; (81324 <pmc_switch_mainck_to_xtal+0x58>)
   8130e:	6a1b      	ldr	r3, [r3, #32]
   81310:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81318:	6213      	str	r3, [r2, #32]
	}
}
   8131a:	370c      	adds	r7, #12
   8131c:	46bd      	mov	sp, r7
   8131e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81322:	4770      	bx	lr
   81324:	400e0600 	.word	0x400e0600
   81328:	fec8fffc 	.word	0xfec8fffc
   8132c:	01370002 	.word	0x01370002
   81330:	ffc8c0fc 	.word	0xffc8c0fc
   81334:	00373f01 	.word	0x00373f01

00081338 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   81338:	b480      	push	{r7}
   8133a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8133c:	4b04      	ldr	r3, [pc, #16]	; (81350 <pmc_osc_is_ready_mainck+0x18>)
   8133e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   81344:	4618      	mov	r0, r3
   81346:	46bd      	mov	sp, r7
   81348:	f85d 7b04 	ldr.w	r7, [sp], #4
   8134c:	4770      	bx	lr
   8134e:	bf00      	nop
   81350:	400e0600 	.word	0x400e0600

00081354 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   81354:	b480      	push	{r7}
   81356:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81358:	4b03      	ldr	r3, [pc, #12]	; (81368 <pmc_disable_pllack+0x14>)
   8135a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8135e:	629a      	str	r2, [r3, #40]	; 0x28
}
   81360:	46bd      	mov	sp, r7
   81362:	f85d 7b04 	ldr.w	r7, [sp], #4
   81366:	4770      	bx	lr
   81368:	400e0600 	.word	0x400e0600

0008136c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8136c:	b480      	push	{r7}
   8136e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81370:	4b04      	ldr	r3, [pc, #16]	; (81384 <pmc_is_locked_pllack+0x18>)
   81372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81374:	f003 0302 	and.w	r3, r3, #2
}
   81378:	4618      	mov	r0, r3
   8137a:	46bd      	mov	sp, r7
   8137c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81380:	4770      	bx	lr
   81382:	bf00      	nop
   81384:	400e0600 	.word	0x400e0600

00081388 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   81388:	b480      	push	{r7}
   8138a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8138c:	4b04      	ldr	r3, [pc, #16]	; (813a0 <pmc_is_locked_upll+0x18>)
   8138e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81390:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   81394:	4618      	mov	r0, r3
   81396:	46bd      	mov	sp, r7
   81398:	f85d 7b04 	ldr.w	r7, [sp], #4
   8139c:	4770      	bx	lr
   8139e:	bf00      	nop
   813a0:	400e0600 	.word	0x400e0600

000813a4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   813a4:	b480      	push	{r7}
   813a6:	b083      	sub	sp, #12
   813a8:	af00      	add	r7, sp, #0
   813aa:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   813ac:	687b      	ldr	r3, [r7, #4]
   813ae:	2b2c      	cmp	r3, #44	; 0x2c
   813b0:	d901      	bls.n	813b6 <pmc_enable_periph_clk+0x12>
		return 1;
   813b2:	2301      	movs	r3, #1
   813b4:	e02f      	b.n	81416 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   813b6:	687b      	ldr	r3, [r7, #4]
   813b8:	2b1f      	cmp	r3, #31
   813ba:	d813      	bhi.n	813e4 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   813bc:	4b19      	ldr	r3, [pc, #100]	; (81424 <pmc_enable_periph_clk+0x80>)
   813be:	699a      	ldr	r2, [r3, #24]
   813c0:	687b      	ldr	r3, [r7, #4]
   813c2:	2101      	movs	r1, #1
   813c4:	fa01 f303 	lsl.w	r3, r1, r3
   813c8:	401a      	ands	r2, r3
   813ca:	687b      	ldr	r3, [r7, #4]
   813cc:	2101      	movs	r1, #1
   813ce:	fa01 f303 	lsl.w	r3, r1, r3
   813d2:	429a      	cmp	r2, r3
   813d4:	d01e      	beq.n	81414 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   813d6:	4b13      	ldr	r3, [pc, #76]	; (81424 <pmc_enable_periph_clk+0x80>)
   813d8:	687a      	ldr	r2, [r7, #4]
   813da:	2101      	movs	r1, #1
   813dc:	fa01 f202 	lsl.w	r2, r1, r2
   813e0:	611a      	str	r2, [r3, #16]
   813e2:	e017      	b.n	81414 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   813e4:	687b      	ldr	r3, [r7, #4]
   813e6:	3b20      	subs	r3, #32
   813e8:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   813ea:	4b0e      	ldr	r3, [pc, #56]	; (81424 <pmc_enable_periph_clk+0x80>)
   813ec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   813f0:	687b      	ldr	r3, [r7, #4]
   813f2:	2101      	movs	r1, #1
   813f4:	fa01 f303 	lsl.w	r3, r1, r3
   813f8:	401a      	ands	r2, r3
   813fa:	687b      	ldr	r3, [r7, #4]
   813fc:	2101      	movs	r1, #1
   813fe:	fa01 f303 	lsl.w	r3, r1, r3
   81402:	429a      	cmp	r2, r3
   81404:	d006      	beq.n	81414 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   81406:	4b07      	ldr	r3, [pc, #28]	; (81424 <pmc_enable_periph_clk+0x80>)
   81408:	687a      	ldr	r2, [r7, #4]
   8140a:	2101      	movs	r1, #1
   8140c:	fa01 f202 	lsl.w	r2, r1, r2
   81410:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81414:	2300      	movs	r3, #0
}
   81416:	4618      	mov	r0, r3
   81418:	370c      	adds	r7, #12
   8141a:	46bd      	mov	sp, r7
   8141c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81420:	4770      	bx	lr
   81422:	bf00      	nop
   81424:	400e0600 	.word	0x400e0600

00081428 <rtt_init>:
 * \param us_prescaler Prescaler value for the RTT.
 *
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
   81428:	b480      	push	{r7}
   8142a:	b083      	sub	sp, #12
   8142c:	af00      	add	r7, sp, #0
   8142e:	6078      	str	r0, [r7, #4]
   81430:	460b      	mov	r3, r1
   81432:	807b      	strh	r3, [r7, #2]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
   81434:	887b      	ldrh	r3, [r7, #2]
   81436:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
   8143a:	687b      	ldr	r3, [r7, #4]
   8143c:	601a      	str	r2, [r3, #0]
#endif
	return 0;
   8143e:	2300      	movs	r3, #0
}
   81440:	4618      	mov	r0, r3
   81442:	370c      	adds	r7, #12
   81444:	46bd      	mov	sp, r7
   81446:	f85d 7b04 	ldr.w	r7, [sp], #4
   8144a:	4770      	bx	lr

0008144c <rtt_enable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   8144c:	b480      	push	{r7}
   8144e:	b085      	sub	sp, #20
   81450:	af00      	add	r7, sp, #0
   81452:	6078      	str	r0, [r7, #4]
   81454:	6039      	str	r1, [r7, #0]
	uint32_t temp;

	temp = p_rtt->RTT_MR;
   81456:	687b      	ldr	r3, [r7, #4]
   81458:	681b      	ldr	r3, [r3, #0]
   8145a:	60fb      	str	r3, [r7, #12]
	temp |= ul_sources;
   8145c:	68fa      	ldr	r2, [r7, #12]
   8145e:	683b      	ldr	r3, [r7, #0]
   81460:	4313      	orrs	r3, r2
   81462:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   81464:	687b      	ldr	r3, [r7, #4]
   81466:	68fa      	ldr	r2, [r7, #12]
   81468:	601a      	str	r2, [r3, #0]
}
   8146a:	3714      	adds	r7, #20
   8146c:	46bd      	mov	sp, r7
   8146e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81472:	4770      	bx	lr

00081474 <rtt_disable_interrupt>:
 *
 * \param p_rtt Pointer to an RTT instance.
 * \param ul_sources Interrupts to be disabled.
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
   81474:	b480      	push	{r7}
   81476:	b085      	sub	sp, #20
   81478:	af00      	add	r7, sp, #0
   8147a:	6078      	str	r0, [r7, #4]
   8147c:	6039      	str	r1, [r7, #0]
	uint32_t temp = 0;
   8147e:	2300      	movs	r3, #0
   81480:	60fb      	str	r3, [r7, #12]

	temp = p_rtt->RTT_MR;
   81482:	687b      	ldr	r3, [r7, #4]
   81484:	681b      	ldr	r3, [r3, #0]
   81486:	60fb      	str	r3, [r7, #12]
	temp &= (~ul_sources);
   81488:	683b      	ldr	r3, [r7, #0]
   8148a:	43db      	mvns	r3, r3
   8148c:	68fa      	ldr	r2, [r7, #12]
   8148e:	4013      	ands	r3, r2
   81490:	60fb      	str	r3, [r7, #12]
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM)
	temp |= g_wobits_in_rtt_mr;
#endif
	p_rtt->RTT_MR = temp;
   81492:	687b      	ldr	r3, [r7, #4]
   81494:	68fa      	ldr	r2, [r7, #12]
   81496:	601a      	str	r2, [r3, #0]
}
   81498:	3714      	adds	r7, #20
   8149a:	46bd      	mov	sp, r7
   8149c:	f85d 7b04 	ldr.w	r7, [sp], #4
   814a0:	4770      	bx	lr
   814a2:	bf00      	nop

000814a4 <rtt_get_status>:
 * \param p_rtt Pointer to an RTT instance.
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
   814a4:	b480      	push	{r7}
   814a6:	b083      	sub	sp, #12
   814a8:	af00      	add	r7, sp, #0
   814aa:	6078      	str	r0, [r7, #4]
	return p_rtt->RTT_SR;
   814ac:	687b      	ldr	r3, [r7, #4]
   814ae:	68db      	ldr	r3, [r3, #12]
}
   814b0:	4618      	mov	r0, r3
   814b2:	370c      	adds	r7, #12
   814b4:	46bd      	mov	sp, r7
   814b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   814ba:	4770      	bx	lr

000814bc <rtt_write_alarm_time>:
 *
 * \retval 0 Configuration is done.
 * \retval 1 Parameter error.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
   814bc:	b580      	push	{r7, lr}
   814be:	b084      	sub	sp, #16
   814c0:	af00      	add	r7, sp, #0
   814c2:	6078      	str	r0, [r7, #4]
   814c4:	6039      	str	r1, [r7, #0]
	uint32_t flag;

	if (ul_alarm_time == 0) {
   814c6:	683b      	ldr	r3, [r7, #0]
   814c8:	2b00      	cmp	r3, #0
   814ca:	d101      	bne.n	814d0 <rtt_write_alarm_time+0x14>
		return 1;
   814cc:	2301      	movs	r3, #1
   814ce:	e016      	b.n	814fe <rtt_write_alarm_time+0x42>
	}

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
   814d0:	687b      	ldr	r3, [r7, #4]
   814d2:	681b      	ldr	r3, [r3, #0]
   814d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   814d8:	60fb      	str	r3, [r7, #12]

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
   814da:	480b      	ldr	r0, [pc, #44]	; (81508 <rtt_write_alarm_time+0x4c>)
   814dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   814e0:	4b0a      	ldr	r3, [pc, #40]	; (8150c <rtt_write_alarm_time+0x50>)
   814e2:	4798      	blx	r3

	/* Alarm time = ALMV + 1 */
	p_rtt->RTT_AR = ul_alarm_time - 1;
   814e4:	683b      	ldr	r3, [r7, #0]
   814e6:	1e5a      	subs	r2, r3, #1
   814e8:	687b      	ldr	r3, [r7, #4]
   814ea:	605a      	str	r2, [r3, #4]

	if (flag) {
   814ec:	68fb      	ldr	r3, [r7, #12]
   814ee:	2b00      	cmp	r3, #0
   814f0:	d004      	beq.n	814fc <rtt_write_alarm_time+0x40>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
   814f2:	4805      	ldr	r0, [pc, #20]	; (81508 <rtt_write_alarm_time+0x4c>)
   814f4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   814f8:	4b05      	ldr	r3, [pc, #20]	; (81510 <rtt_write_alarm_time+0x54>)
   814fa:	4798      	blx	r3
	}

	return 0;
   814fc:	2300      	movs	r3, #0
}
   814fe:	4618      	mov	r0, r3
   81500:	3710      	adds	r7, #16
   81502:	46bd      	mov	sp, r7
   81504:	bd80      	pop	{r7, pc}
   81506:	bf00      	nop
   81508:	400e1a30 	.word	0x400e1a30
   8150c:	00081475 	.word	0x00081475
   81510:	0008144d 	.word	0x0008144d

00081514 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   81514:	b480      	push	{r7}
   81516:	b083      	sub	sp, #12
   81518:	af00      	add	r7, sp, #0
   8151a:	6078      	str	r0, [r7, #4]
   8151c:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   8151e:	687b      	ldr	r3, [r7, #4]
   81520:	683a      	ldr	r2, [r7, #0]
   81522:	60da      	str	r2, [r3, #12]
}
   81524:	370c      	adds	r7, #12
   81526:	46bd      	mov	sp, r7
   81528:	f85d 7b04 	ldr.w	r7, [sp], #4
   8152c:	4770      	bx	lr
   8152e:	bf00      	nop

00081530 <usart_get_interrupt_mask>:
 * \param p_usart Pointer to a USART peripheral.
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
   81530:	b480      	push	{r7}
   81532:	b083      	sub	sp, #12
   81534:	af00      	add	r7, sp, #0
   81536:	6078      	str	r0, [r7, #4]
	return p_usart->US_IMR;
   81538:	687b      	ldr	r3, [r7, #4]
   8153a:	691b      	ldr	r3, [r3, #16]
}
   8153c:	4618      	mov	r0, r3
   8153e:	370c      	adds	r7, #12
   81540:	46bd      	mov	sp, r7
   81542:	f85d 7b04 	ldr.w	r7, [sp], #4
   81546:	4770      	bx	lr

00081548 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   81548:	b480      	push	{r7}
   8154a:	b083      	sub	sp, #12
   8154c:	af00      	add	r7, sp, #0
   8154e:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   81550:	687b      	ldr	r3, [r7, #4]
   81552:	695b      	ldr	r3, [r3, #20]
}
   81554:	4618      	mov	r0, r3
   81556:	370c      	adds	r7, #12
   81558:	46bd      	mov	sp, r7
   8155a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8155e:	4770      	bx	lr

00081560 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   81560:	b480      	push	{r7}
   81562:	b085      	sub	sp, #20
   81564:	af00      	add	r7, sp, #0
   81566:	6078      	str	r0, [r7, #4]
   81568:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   8156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8156e:	60fb      	str	r3, [r7, #12]

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81570:	e006      	b.n	81580 <usart_putchar+0x20>
		if (!timeout--) {
   81572:	68fb      	ldr	r3, [r7, #12]
   81574:	1e5a      	subs	r2, r3, #1
   81576:	60fa      	str	r2, [r7, #12]
   81578:	2b00      	cmp	r3, #0
   8157a:	d101      	bne.n	81580 <usart_putchar+0x20>
			return 1;
   8157c:	2301      	movs	r3, #1
   8157e:	e00b      	b.n	81598 <usart_putchar+0x38>
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81580:	687b      	ldr	r3, [r7, #4]
   81582:	695b      	ldr	r3, [r3, #20]
   81584:	f003 0302 	and.w	r3, r3, #2
   81588:	2b00      	cmp	r3, #0
   8158a:	d0f2      	beq.n	81572 <usart_putchar+0x12>
		if (!timeout--) {
			return 1;
		}
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8158c:	683b      	ldr	r3, [r7, #0]
   8158e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81592:	687b      	ldr	r3, [r7, #4]
   81594:	61da      	str	r2, [r3, #28]

	return 0;
   81596:	2300      	movs	r3, #0
}
   81598:	4618      	mov	r0, r3
   8159a:	3714      	adds	r7, #20
   8159c:	46bd      	mov	sp, r7
   8159e:	f85d 7b04 	ldr.w	r7, [sp], #4
   815a2:	4770      	bx	lr

000815a4 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   815a4:	b480      	push	{r7}
   815a6:	b085      	sub	sp, #20
   815a8:	af00      	add	r7, sp, #0
   815aa:	6078      	str	r0, [r7, #4]
   815ac:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   815ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   815b2:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815b4:	e006      	b.n	815c4 <usart_getchar+0x20>
		if (!timeout--) {
   815b6:	68fb      	ldr	r3, [r7, #12]
   815b8:	1e5a      	subs	r2, r3, #1
   815ba:	60fa      	str	r2, [r7, #12]
   815bc:	2b00      	cmp	r3, #0
   815be:	d101      	bne.n	815c4 <usart_getchar+0x20>
			return 1;
   815c0:	2301      	movs	r3, #1
   815c2:	e00c      	b.n	815de <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   815c4:	687b      	ldr	r3, [r7, #4]
   815c6:	695b      	ldr	r3, [r3, #20]
   815c8:	f003 0301 	and.w	r3, r3, #1
   815cc:	2b00      	cmp	r3, #0
   815ce:	d0f2      	beq.n	815b6 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   815d0:	687b      	ldr	r3, [r7, #4]
   815d2:	699b      	ldr	r3, [r3, #24]
   815d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   815d8:	683b      	ldr	r3, [r7, #0]
   815da:	601a      	str	r2, [r3, #0]

	return 0;
   815dc:	2300      	movs	r3, #0
}
   815de:	4618      	mov	r0, r3
   815e0:	3714      	adds	r7, #20
   815e2:	46bd      	mov	sp, r7
   815e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   815e8:	4770      	bx	lr
   815ea:	bf00      	nop

000815ec <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   815ec:	b480      	push	{r7}
   815ee:	b083      	sub	sp, #12
   815f0:	af00      	add	r7, sp, #0
   815f2:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   815f4:	687a      	ldr	r2, [r7, #4]
   815f6:	4b05      	ldr	r3, [pc, #20]	; (8160c <wdt_restart+0x20>)
   815f8:	429a      	cmp	r2, r3
   815fa:	d102      	bne.n	81602 <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   815fc:	687b      	ldr	r3, [r7, #4]
   815fe:	4a04      	ldr	r2, [pc, #16]	; (81610 <wdt_restart+0x24>)
   81600:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   81602:	370c      	adds	r7, #12
   81604:	46bd      	mov	sp, r7
   81606:	f85d 7b04 	ldr.w	r7, [sp], #4
   8160a:	4770      	bx	lr
   8160c:	400e1a50 	.word	0x400e1a50
   81610:	a5000001 	.word	0xa5000001

00081614 <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   81614:	b480      	push	{r7}
   81616:	b083      	sub	sp, #12
   81618:	af00      	add	r7, sp, #0
   8161a:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   8161c:	687b      	ldr	r3, [r7, #4]
   8161e:	689b      	ldr	r3, [r3, #8]
}
   81620:	4618      	mov	r0, r3
   81622:	370c      	adds	r7, #12
   81624:	46bd      	mov	sp, r7
   81626:	f85d 7b04 	ldr.w	r7, [sp], #4
   8162a:	4770      	bx	lr

0008162c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8162c:	b480      	push	{r7}
   8162e:	af00      	add	r7, sp, #0
	while (1) {
	}
   81630:	e7fe      	b.n	81630 <Dummy_Handler+0x4>
   81632:	bf00      	nop

00081634 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81634:	b580      	push	{r7, lr}
   81636:	b082      	sub	sp, #8
   81638:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   8163a:	4b1e      	ldr	r3, [pc, #120]	; (816b4 <Reset_Handler+0x80>)
   8163c:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   8163e:	4b1e      	ldr	r3, [pc, #120]	; (816b8 <Reset_Handler+0x84>)
   81640:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   81642:	687a      	ldr	r2, [r7, #4]
   81644:	683b      	ldr	r3, [r7, #0]
   81646:	429a      	cmp	r2, r3
   81648:	d00c      	beq.n	81664 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   8164a:	e007      	b.n	8165c <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   8164c:	683b      	ldr	r3, [r7, #0]
   8164e:	1d1a      	adds	r2, r3, #4
   81650:	603a      	str	r2, [r7, #0]
   81652:	687a      	ldr	r2, [r7, #4]
   81654:	1d11      	adds	r1, r2, #4
   81656:	6079      	str	r1, [r7, #4]
   81658:	6812      	ldr	r2, [r2, #0]
   8165a:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8165c:	683a      	ldr	r2, [r7, #0]
   8165e:	4b17      	ldr	r3, [pc, #92]	; (816bc <Reset_Handler+0x88>)
   81660:	429a      	cmp	r2, r3
   81662:	d3f3      	bcc.n	8164c <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81664:	4b16      	ldr	r3, [pc, #88]	; (816c0 <Reset_Handler+0x8c>)
   81666:	603b      	str	r3, [r7, #0]
   81668:	e004      	b.n	81674 <Reset_Handler+0x40>
		*pDest++ = 0;
   8166a:	683b      	ldr	r3, [r7, #0]
   8166c:	1d1a      	adds	r2, r3, #4
   8166e:	603a      	str	r2, [r7, #0]
   81670:	2200      	movs	r2, #0
   81672:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81674:	683a      	ldr	r2, [r7, #0]
   81676:	4b13      	ldr	r3, [pc, #76]	; (816c4 <Reset_Handler+0x90>)
   81678:	429a      	cmp	r2, r3
   8167a:	d3f6      	bcc.n	8166a <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   8167c:	4b12      	ldr	r3, [pc, #72]	; (816c8 <Reset_Handler+0x94>)
   8167e:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81680:	4a12      	ldr	r2, [pc, #72]	; (816cc <Reset_Handler+0x98>)
   81682:	687b      	ldr	r3, [r7, #4]
   81684:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   81688:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8168c:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8168e:	687b      	ldr	r3, [r7, #4]
   81690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81694:	d309      	bcc.n	816aa <Reset_Handler+0x76>
   81696:	687a      	ldr	r2, [r7, #4]
   81698:	4b0d      	ldr	r3, [pc, #52]	; (816d0 <Reset_Handler+0x9c>)
   8169a:	429a      	cmp	r2, r3
   8169c:	d805      	bhi.n	816aa <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8169e:	4b0b      	ldr	r3, [pc, #44]	; (816cc <Reset_Handler+0x98>)
   816a0:	4a0a      	ldr	r2, [pc, #40]	; (816cc <Reset_Handler+0x98>)
   816a2:	6892      	ldr	r2, [r2, #8]
   816a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   816a8:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   816aa:	4b0a      	ldr	r3, [pc, #40]	; (816d4 <Reset_Handler+0xa0>)
   816ac:	4798      	blx	r3

	/* Branch to main function */
	main();
   816ae:	4b0a      	ldr	r3, [pc, #40]	; (816d8 <Reset_Handler+0xa4>)
   816b0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   816b2:	e7fe      	b.n	816b2 <Reset_Handler+0x7e>
   816b4:	00084e34 	.word	0x00084e34
   816b8:	20070000 	.word	0x20070000
   816bc:	20070438 	.word	0x20070438
   816c0:	20070438 	.word	0x20070438
   816c4:	2007a6bc 	.word	0x2007a6bc
   816c8:	00080000 	.word	0x00080000
   816cc:	e000ed00 	.word	0xe000ed00
   816d0:	200fffff 	.word	0x200fffff
   816d4:	00084a39 	.word	0x00084a39
   816d8:	000847ad 	.word	0x000847ad

000816dc <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   816dc:	b480      	push	{r7}
   816de:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   816e0:	4b56      	ldr	r3, [pc, #344]	; (8183c <SystemCoreClockUpdate+0x160>)
   816e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816e4:	f003 0303 	and.w	r3, r3, #3
   816e8:	2b03      	cmp	r3, #3
   816ea:	f200 808a 	bhi.w	81802 <SystemCoreClockUpdate+0x126>
   816ee:	a101      	add	r1, pc, #4	; (adr r1, 816f4 <SystemCoreClockUpdate+0x18>)
   816f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   816f4:	00081705 	.word	0x00081705
   816f8:	00081725 	.word	0x00081725
   816fc:	00081775 	.word	0x00081775
   81700:	00081775 	.word	0x00081775
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81704:	4b4e      	ldr	r3, [pc, #312]	; (81840 <SystemCoreClockUpdate+0x164>)
   81706:	695b      	ldr	r3, [r3, #20]
   81708:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8170c:	2b00      	cmp	r3, #0
   8170e:	d004      	beq.n	8171a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81710:	4b4c      	ldr	r3, [pc, #304]	; (81844 <SystemCoreClockUpdate+0x168>)
   81712:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81716:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   81718:	e073      	b.n	81802 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8171a:	4b4a      	ldr	r3, [pc, #296]	; (81844 <SystemCoreClockUpdate+0x168>)
   8171c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   81720:	601a      	str	r2, [r3, #0]
		}
		break;
   81722:	e06e      	b.n	81802 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81724:	4b45      	ldr	r3, [pc, #276]	; (8183c <SystemCoreClockUpdate+0x160>)
   81726:	6a1b      	ldr	r3, [r3, #32]
   81728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8172c:	2b00      	cmp	r3, #0
   8172e:	d003      	beq.n	81738 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81730:	4b44      	ldr	r3, [pc, #272]	; (81844 <SystemCoreClockUpdate+0x168>)
   81732:	4a45      	ldr	r2, [pc, #276]	; (81848 <SystemCoreClockUpdate+0x16c>)
   81734:	601a      	str	r2, [r3, #0]
   81736:	e01c      	b.n	81772 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81738:	4b42      	ldr	r3, [pc, #264]	; (81844 <SystemCoreClockUpdate+0x168>)
   8173a:	4a44      	ldr	r2, [pc, #272]	; (8184c <SystemCoreClockUpdate+0x170>)
   8173c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8173e:	4b3f      	ldr	r3, [pc, #252]	; (8183c <SystemCoreClockUpdate+0x160>)
   81740:	6a1b      	ldr	r3, [r3, #32]
   81742:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81746:	2b10      	cmp	r3, #16
   81748:	d004      	beq.n	81754 <SystemCoreClockUpdate+0x78>
   8174a:	2b20      	cmp	r3, #32
   8174c:	d008      	beq.n	81760 <SystemCoreClockUpdate+0x84>
   8174e:	2b00      	cmp	r3, #0
   81750:	d00e      	beq.n	81770 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   81752:	e00e      	b.n	81772 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81754:	4b3b      	ldr	r3, [pc, #236]	; (81844 <SystemCoreClockUpdate+0x168>)
   81756:	681b      	ldr	r3, [r3, #0]
   81758:	005a      	lsls	r2, r3, #1
   8175a:	4b3a      	ldr	r3, [pc, #232]	; (81844 <SystemCoreClockUpdate+0x168>)
   8175c:	601a      	str	r2, [r3, #0]
				break;
   8175e:	e008      	b.n	81772 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81760:	4b38      	ldr	r3, [pc, #224]	; (81844 <SystemCoreClockUpdate+0x168>)
   81762:	681a      	ldr	r2, [r3, #0]
   81764:	4613      	mov	r3, r2
   81766:	005b      	lsls	r3, r3, #1
   81768:	441a      	add	r2, r3
   8176a:	4b36      	ldr	r3, [pc, #216]	; (81844 <SystemCoreClockUpdate+0x168>)
   8176c:	601a      	str	r2, [r3, #0]
				break;
   8176e:	e000      	b.n	81772 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   81770:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   81772:	e046      	b.n	81802 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81774:	4b31      	ldr	r3, [pc, #196]	; (8183c <SystemCoreClockUpdate+0x160>)
   81776:	6a1b      	ldr	r3, [r3, #32]
   81778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   8177c:	2b00      	cmp	r3, #0
   8177e:	d003      	beq.n	81788 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81780:	4b30      	ldr	r3, [pc, #192]	; (81844 <SystemCoreClockUpdate+0x168>)
   81782:	4a31      	ldr	r2, [pc, #196]	; (81848 <SystemCoreClockUpdate+0x16c>)
   81784:	601a      	str	r2, [r3, #0]
   81786:	e01c      	b.n	817c2 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81788:	4b2e      	ldr	r3, [pc, #184]	; (81844 <SystemCoreClockUpdate+0x168>)
   8178a:	4a30      	ldr	r2, [pc, #192]	; (8184c <SystemCoreClockUpdate+0x170>)
   8178c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8178e:	4b2b      	ldr	r3, [pc, #172]	; (8183c <SystemCoreClockUpdate+0x160>)
   81790:	6a1b      	ldr	r3, [r3, #32]
   81792:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81796:	2b10      	cmp	r3, #16
   81798:	d004      	beq.n	817a4 <SystemCoreClockUpdate+0xc8>
   8179a:	2b20      	cmp	r3, #32
   8179c:	d008      	beq.n	817b0 <SystemCoreClockUpdate+0xd4>
   8179e:	2b00      	cmp	r3, #0
   817a0:	d00e      	beq.n	817c0 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   817a2:	e00e      	b.n	817c2 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   817a4:	4b27      	ldr	r3, [pc, #156]	; (81844 <SystemCoreClockUpdate+0x168>)
   817a6:	681b      	ldr	r3, [r3, #0]
   817a8:	005a      	lsls	r2, r3, #1
   817aa:	4b26      	ldr	r3, [pc, #152]	; (81844 <SystemCoreClockUpdate+0x168>)
   817ac:	601a      	str	r2, [r3, #0]
				break;
   817ae:	e008      	b.n	817c2 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   817b0:	4b24      	ldr	r3, [pc, #144]	; (81844 <SystemCoreClockUpdate+0x168>)
   817b2:	681a      	ldr	r2, [r3, #0]
   817b4:	4613      	mov	r3, r2
   817b6:	005b      	lsls	r3, r3, #1
   817b8:	441a      	add	r2, r3
   817ba:	4b22      	ldr	r3, [pc, #136]	; (81844 <SystemCoreClockUpdate+0x168>)
   817bc:	601a      	str	r2, [r3, #0]
				break;
   817be:	e000      	b.n	817c2 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   817c0:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   817c2:	4b1e      	ldr	r3, [pc, #120]	; (8183c <SystemCoreClockUpdate+0x160>)
   817c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   817c6:	f003 0303 	and.w	r3, r3, #3
   817ca:	2b02      	cmp	r3, #2
   817cc:	d115      	bne.n	817fa <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   817ce:	4b1b      	ldr	r3, [pc, #108]	; (8183c <SystemCoreClockUpdate+0x160>)
   817d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   817d2:	4b1f      	ldr	r3, [pc, #124]	; (81850 <SystemCoreClockUpdate+0x174>)
   817d4:	4013      	ands	r3, r2
   817d6:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   817d8:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   817da:	4a1a      	ldr	r2, [pc, #104]	; (81844 <SystemCoreClockUpdate+0x168>)
   817dc:	6812      	ldr	r2, [r2, #0]
   817de:	fb02 f203 	mul.w	r2, r2, r3
   817e2:	4b18      	ldr	r3, [pc, #96]	; (81844 <SystemCoreClockUpdate+0x168>)
   817e4:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   817e6:	4b17      	ldr	r3, [pc, #92]	; (81844 <SystemCoreClockUpdate+0x168>)
   817e8:	681a      	ldr	r2, [r3, #0]
   817ea:	4b14      	ldr	r3, [pc, #80]	; (8183c <SystemCoreClockUpdate+0x160>)
   817ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   817ee:	b2db      	uxtb	r3, r3
   817f0:	fbb2 f2f3 	udiv	r2, r2, r3
   817f4:	4b13      	ldr	r3, [pc, #76]	; (81844 <SystemCoreClockUpdate+0x168>)
   817f6:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   817f8:	e002      	b.n	81800 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   817fa:	4b12      	ldr	r3, [pc, #72]	; (81844 <SystemCoreClockUpdate+0x168>)
   817fc:	4a15      	ldr	r2, [pc, #84]	; (81854 <SystemCoreClockUpdate+0x178>)
   817fe:	601a      	str	r2, [r3, #0]
		}
		break;
   81800:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81802:	4b0e      	ldr	r3, [pc, #56]	; (8183c <SystemCoreClockUpdate+0x160>)
   81804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81806:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8180a:	2b70      	cmp	r3, #112	; 0x70
   8180c:	d108      	bne.n	81820 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   8180e:	4b0d      	ldr	r3, [pc, #52]	; (81844 <SystemCoreClockUpdate+0x168>)
   81810:	681a      	ldr	r2, [r3, #0]
   81812:	4b11      	ldr	r3, [pc, #68]	; (81858 <SystemCoreClockUpdate+0x17c>)
   81814:	fba3 1302 	umull	r1, r3, r3, r2
   81818:	085a      	lsrs	r2, r3, #1
   8181a:	4b0a      	ldr	r3, [pc, #40]	; (81844 <SystemCoreClockUpdate+0x168>)
   8181c:	601a      	str	r2, [r3, #0]
   8181e:	e009      	b.n	81834 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81820:	4b08      	ldr	r3, [pc, #32]	; (81844 <SystemCoreClockUpdate+0x168>)
   81822:	681a      	ldr	r2, [r3, #0]
   81824:	4b05      	ldr	r3, [pc, #20]	; (8183c <SystemCoreClockUpdate+0x160>)
   81826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81828:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8182c:	091b      	lsrs	r3, r3, #4
   8182e:	40da      	lsrs	r2, r3
   81830:	4b04      	ldr	r3, [pc, #16]	; (81844 <SystemCoreClockUpdate+0x168>)
   81832:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   81834:	46bd      	mov	sp, r7
   81836:	f85d 7b04 	ldr.w	r7, [sp], #4
   8183a:	4770      	bx	lr
   8183c:	400e0600 	.word	0x400e0600
   81840:	400e1a10 	.word	0x400e1a10
   81844:	20070000 	.word	0x20070000
   81848:	00b71b00 	.word	0x00b71b00
   8184c:	003d0900 	.word	0x003d0900
   81850:	07ff0000 	.word	0x07ff0000
   81854:	0e4e1c00 	.word	0x0e4e1c00
   81858:	aaaaaaab 	.word	0xaaaaaaab

0008185c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   8185c:	b480      	push	{r7}
   8185e:	b083      	sub	sp, #12
   81860:	af00      	add	r7, sp, #0
   81862:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   81864:	687a      	ldr	r2, [r7, #4]
   81866:	4b1f      	ldr	r3, [pc, #124]	; (818e4 <system_init_flash+0x88>)
   81868:	429a      	cmp	r2, r3
   8186a:	d806      	bhi.n	8187a <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   8186c:	4b1e      	ldr	r3, [pc, #120]	; (818e8 <system_init_flash+0x8c>)
   8186e:	2200      	movs	r2, #0
   81870:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   81872:	4b1e      	ldr	r3, [pc, #120]	; (818ec <system_init_flash+0x90>)
   81874:	2200      	movs	r2, #0
   81876:	601a      	str	r2, [r3, #0]
   81878:	e02e      	b.n	818d8 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8187a:	687a      	ldr	r2, [r7, #4]
   8187c:	4b1c      	ldr	r3, [pc, #112]	; (818f0 <system_init_flash+0x94>)
   8187e:	429a      	cmp	r2, r3
   81880:	d808      	bhi.n	81894 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   81882:	4b19      	ldr	r3, [pc, #100]	; (818e8 <system_init_flash+0x8c>)
   81884:	f44f 7280 	mov.w	r2, #256	; 0x100
   81888:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8188a:	4b18      	ldr	r3, [pc, #96]	; (818ec <system_init_flash+0x90>)
   8188c:	f44f 7280 	mov.w	r2, #256	; 0x100
   81890:	601a      	str	r2, [r3, #0]
   81892:	e021      	b.n	818d8 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   81894:	687a      	ldr	r2, [r7, #4]
   81896:	4b17      	ldr	r3, [pc, #92]	; (818f4 <system_init_flash+0x98>)
   81898:	429a      	cmp	r2, r3
   8189a:	d808      	bhi.n	818ae <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   8189c:	4b12      	ldr	r3, [pc, #72]	; (818e8 <system_init_flash+0x8c>)
   8189e:	f44f 7200 	mov.w	r2, #512	; 0x200
   818a2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   818a4:	4b11      	ldr	r3, [pc, #68]	; (818ec <system_init_flash+0x90>)
   818a6:	f44f 7200 	mov.w	r2, #512	; 0x200
   818aa:	601a      	str	r2, [r3, #0]
   818ac:	e014      	b.n	818d8 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   818ae:	687a      	ldr	r2, [r7, #4]
   818b0:	4b11      	ldr	r3, [pc, #68]	; (818f8 <system_init_flash+0x9c>)
   818b2:	429a      	cmp	r2, r3
   818b4:	d808      	bhi.n	818c8 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   818b6:	4b0c      	ldr	r3, [pc, #48]	; (818e8 <system_init_flash+0x8c>)
   818b8:	f44f 7240 	mov.w	r2, #768	; 0x300
   818bc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   818be:	4b0b      	ldr	r3, [pc, #44]	; (818ec <system_init_flash+0x90>)
   818c0:	f44f 7240 	mov.w	r2, #768	; 0x300
   818c4:	601a      	str	r2, [r3, #0]
   818c6:	e007      	b.n	818d8 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   818c8:	4b07      	ldr	r3, [pc, #28]	; (818e8 <system_init_flash+0x8c>)
   818ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   818ce:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   818d0:	4b06      	ldr	r3, [pc, #24]	; (818ec <system_init_flash+0x90>)
   818d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   818d6:	601a      	str	r2, [r3, #0]
	}
}
   818d8:	370c      	adds	r7, #12
   818da:	46bd      	mov	sp, r7
   818dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   818e0:	4770      	bx	lr
   818e2:	bf00      	nop
   818e4:	0157529f 	.word	0x0157529f
   818e8:	400e0a00 	.word	0x400e0a00
   818ec:	400e0c00 	.word	0x400e0c00
   818f0:	0206cc7f 	.word	0x0206cc7f
   818f4:	0328b73f 	.word	0x0328b73f
   818f8:	04a62f7f 	.word	0x04a62f7f

000818fc <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   818fc:	b480      	push	{r7}
   818fe:	b083      	sub	sp, #12
   81900:	af00      	add	r7, sp, #0
   81902:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81904:	687b      	ldr	r3, [r7, #4]
   81906:	f103 0208 	add.w	r2, r3, #8
   8190a:	687b      	ldr	r3, [r7, #4]
   8190c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8190e:	687b      	ldr	r3, [r7, #4]
   81910:	f04f 32ff 	mov.w	r2, #4294967295
   81914:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81916:	687b      	ldr	r3, [r7, #4]
   81918:	f103 0208 	add.w	r2, r3, #8
   8191c:	687b      	ldr	r3, [r7, #4]
   8191e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   81920:	687b      	ldr	r3, [r7, #4]
   81922:	f103 0208 	add.w	r2, r3, #8
   81926:	687b      	ldr	r3, [r7, #4]
   81928:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   8192a:	687b      	ldr	r3, [r7, #4]
   8192c:	2200      	movs	r2, #0
   8192e:	601a      	str	r2, [r3, #0]
}
   81930:	370c      	adds	r7, #12
   81932:	46bd      	mov	sp, r7
   81934:	f85d 7b04 	ldr.w	r7, [sp], #4
   81938:	4770      	bx	lr
   8193a:	bf00      	nop

0008193c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   8193c:	b480      	push	{r7}
   8193e:	b083      	sub	sp, #12
   81940:	af00      	add	r7, sp, #0
   81942:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81944:	687b      	ldr	r3, [r7, #4]
   81946:	2200      	movs	r2, #0
   81948:	611a      	str	r2, [r3, #16]
}
   8194a:	370c      	adds	r7, #12
   8194c:	46bd      	mov	sp, r7
   8194e:	f85d 7b04 	ldr.w	r7, [sp], #4
   81952:	4770      	bx	lr

00081954 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   81954:	b480      	push	{r7}
   81956:	b085      	sub	sp, #20
   81958:	af00      	add	r7, sp, #0
   8195a:	6078      	str	r0, [r7, #4]
   8195c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   8195e:	687b      	ldr	r3, [r7, #4]
   81960:	685b      	ldr	r3, [r3, #4]
   81962:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   81964:	683b      	ldr	r3, [r7, #0]
   81966:	68fa      	ldr	r2, [r7, #12]
   81968:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   8196a:	68fb      	ldr	r3, [r7, #12]
   8196c:	689a      	ldr	r2, [r3, #8]
   8196e:	683b      	ldr	r3, [r7, #0]
   81970:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   81972:	68fb      	ldr	r3, [r7, #12]
   81974:	689b      	ldr	r3, [r3, #8]
   81976:	683a      	ldr	r2, [r7, #0]
   81978:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   8197a:	68fb      	ldr	r3, [r7, #12]
   8197c:	683a      	ldr	r2, [r7, #0]
   8197e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81980:	683b      	ldr	r3, [r7, #0]
   81982:	687a      	ldr	r2, [r7, #4]
   81984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   81986:	687b      	ldr	r3, [r7, #4]
   81988:	681b      	ldr	r3, [r3, #0]
   8198a:	1c5a      	adds	r2, r3, #1
   8198c:	687b      	ldr	r3, [r7, #4]
   8198e:	601a      	str	r2, [r3, #0]
}
   81990:	3714      	adds	r7, #20
   81992:	46bd      	mov	sp, r7
   81994:	f85d 7b04 	ldr.w	r7, [sp], #4
   81998:	4770      	bx	lr
   8199a:	bf00      	nop

0008199c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   8199c:	b480      	push	{r7}
   8199e:	b085      	sub	sp, #20
   819a0:	af00      	add	r7, sp, #0
   819a2:	6078      	str	r0, [r7, #4]
   819a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   819a6:	683b      	ldr	r3, [r7, #0]
   819a8:	681b      	ldr	r3, [r3, #0]
   819aa:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   819ac:	68bb      	ldr	r3, [r7, #8]
   819ae:	f1b3 3fff 	cmp.w	r3, #4294967295
   819b2:	d103      	bne.n	819bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   819b4:	687b      	ldr	r3, [r7, #4]
   819b6:	691b      	ldr	r3, [r3, #16]
   819b8:	60fb      	str	r3, [r7, #12]
   819ba:	e00c      	b.n	819d6 <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   819bc:	687b      	ldr	r3, [r7, #4]
   819be:	3308      	adds	r3, #8
   819c0:	60fb      	str	r3, [r7, #12]
   819c2:	e002      	b.n	819ca <vListInsert+0x2e>
   819c4:	68fb      	ldr	r3, [r7, #12]
   819c6:	685b      	ldr	r3, [r3, #4]
   819c8:	60fb      	str	r3, [r7, #12]
   819ca:	68fb      	ldr	r3, [r7, #12]
   819cc:	685b      	ldr	r3, [r3, #4]
   819ce:	681a      	ldr	r2, [r3, #0]
   819d0:	68bb      	ldr	r3, [r7, #8]
   819d2:	429a      	cmp	r2, r3
   819d4:	d9f6      	bls.n	819c4 <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   819d6:	68fb      	ldr	r3, [r7, #12]
   819d8:	685a      	ldr	r2, [r3, #4]
   819da:	683b      	ldr	r3, [r7, #0]
   819dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   819de:	683b      	ldr	r3, [r7, #0]
   819e0:	685b      	ldr	r3, [r3, #4]
   819e2:	683a      	ldr	r2, [r7, #0]
   819e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   819e6:	683b      	ldr	r3, [r7, #0]
   819e8:	68fa      	ldr	r2, [r7, #12]
   819ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   819ec:	68fb      	ldr	r3, [r7, #12]
   819ee:	683a      	ldr	r2, [r7, #0]
   819f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   819f2:	683b      	ldr	r3, [r7, #0]
   819f4:	687a      	ldr	r2, [r7, #4]
   819f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   819f8:	687b      	ldr	r3, [r7, #4]
   819fa:	681b      	ldr	r3, [r3, #0]
   819fc:	1c5a      	adds	r2, r3, #1
   819fe:	687b      	ldr	r3, [r7, #4]
   81a00:	601a      	str	r2, [r3, #0]
}
   81a02:	3714      	adds	r7, #20
   81a04:	46bd      	mov	sp, r7
   81a06:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a0a:	4770      	bx	lr

00081a0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   81a0c:	b480      	push	{r7}
   81a0e:	b085      	sub	sp, #20
   81a10:	af00      	add	r7, sp, #0
   81a12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   81a14:	687b      	ldr	r3, [r7, #4]
   81a16:	691b      	ldr	r3, [r3, #16]
   81a18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81a1a:	687b      	ldr	r3, [r7, #4]
   81a1c:	685b      	ldr	r3, [r3, #4]
   81a1e:	687a      	ldr	r2, [r7, #4]
   81a20:	6892      	ldr	r2, [r2, #8]
   81a22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   81a24:	687b      	ldr	r3, [r7, #4]
   81a26:	689b      	ldr	r3, [r3, #8]
   81a28:	687a      	ldr	r2, [r7, #4]
   81a2a:	6852      	ldr	r2, [r2, #4]
   81a2c:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81a2e:	68fb      	ldr	r3, [r7, #12]
   81a30:	685a      	ldr	r2, [r3, #4]
   81a32:	687b      	ldr	r3, [r7, #4]
   81a34:	429a      	cmp	r2, r3
   81a36:	d103      	bne.n	81a40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   81a38:	687b      	ldr	r3, [r7, #4]
   81a3a:	689a      	ldr	r2, [r3, #8]
   81a3c:	68fb      	ldr	r3, [r7, #12]
   81a3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   81a40:	687b      	ldr	r3, [r7, #4]
   81a42:	2200      	movs	r2, #0
   81a44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   81a46:	68fb      	ldr	r3, [r7, #12]
   81a48:	681b      	ldr	r3, [r3, #0]
   81a4a:	1e5a      	subs	r2, r3, #1
   81a4c:	68fb      	ldr	r3, [r7, #12]
   81a4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   81a50:	68fb      	ldr	r3, [r7, #12]
   81a52:	681b      	ldr	r3, [r3, #0]
}
   81a54:	4618      	mov	r0, r3
   81a56:	3714      	adds	r7, #20
   81a58:	46bd      	mov	sp, r7
   81a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
   81a5e:	4770      	bx	lr

00081a60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   81a60:	b480      	push	{r7}
   81a62:	b085      	sub	sp, #20
   81a64:	af00      	add	r7, sp, #0
   81a66:	60f8      	str	r0, [r7, #12]
   81a68:	60b9      	str	r1, [r7, #8]
   81a6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   81a6c:	68fb      	ldr	r3, [r7, #12]
   81a6e:	3b04      	subs	r3, #4
   81a70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   81a72:	68fb      	ldr	r3, [r7, #12]
   81a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   81a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   81a7a:	68fb      	ldr	r3, [r7, #12]
   81a7c:	3b04      	subs	r3, #4
   81a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   81a80:	68ba      	ldr	r2, [r7, #8]
   81a82:	68fb      	ldr	r3, [r7, #12]
   81a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   81a86:	68fb      	ldr	r3, [r7, #12]
   81a88:	3b04      	subs	r3, #4
   81a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   81a8c:	4a09      	ldr	r2, [pc, #36]	; (81ab4 <pxPortInitialiseStack+0x54>)
   81a8e:	68fb      	ldr	r3, [r7, #12]
   81a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   81a92:	68fb      	ldr	r3, [r7, #12]
   81a94:	3b14      	subs	r3, #20
   81a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   81a98:	687a      	ldr	r2, [r7, #4]
   81a9a:	68fb      	ldr	r3, [r7, #12]
   81a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   81a9e:	68fb      	ldr	r3, [r7, #12]
   81aa0:	3b20      	subs	r3, #32
   81aa2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   81aa4:	68fb      	ldr	r3, [r7, #12]
}
   81aa6:	4618      	mov	r0, r3
   81aa8:	3714      	adds	r7, #20
   81aaa:	46bd      	mov	sp, r7
   81aac:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ab0:	4770      	bx	lr
   81ab2:	bf00      	nop
   81ab4:	00081ab9 	.word	0x00081ab9

00081ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   81ab8:	b580      	push	{r7, lr}
   81aba:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   81abc:	4b05      	ldr	r3, [pc, #20]	; (81ad4 <prvTaskExitError+0x1c>)
   81abe:	681b      	ldr	r3, [r3, #0]
   81ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ac4:	d002      	beq.n	81acc <prvTaskExitError+0x14>
   81ac6:	4b04      	ldr	r3, [pc, #16]	; (81ad8 <prvTaskExitError+0x20>)
   81ac8:	4798      	blx	r3
   81aca:	e7fe      	b.n	81aca <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   81acc:	4b02      	ldr	r3, [pc, #8]	; (81ad8 <prvTaskExitError+0x20>)
   81ace:	4798      	blx	r3
	for( ;; );
   81ad0:	e7fe      	b.n	81ad0 <prvTaskExitError+0x18>
   81ad2:	bf00      	nop
   81ad4:	20070004 	.word	0x20070004
   81ad8:	00081c85 	.word	0x00081c85

00081adc <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   81adc:	4b07      	ldr	r3, [pc, #28]	; (81afc <pxCurrentTCBConst2>)
   81ade:	6819      	ldr	r1, [r3, #0]
   81ae0:	6808      	ldr	r0, [r1, #0]
   81ae2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81ae6:	f380 8809 	msr	PSP, r0
   81aea:	f3bf 8f6f 	isb	sy
   81aee:	f04f 0000 	mov.w	r0, #0
   81af2:	f380 8811 	msr	BASEPRI, r0
   81af6:	f04e 0e0d 	orr.w	lr, lr, #13
   81afa:	4770      	bx	lr

00081afc <pxCurrentTCBConst2>:
   81afc:	2007a4e4 	.word	0x2007a4e4

00081b00 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81b00:	4806      	ldr	r0, [pc, #24]	; (81b1c <prvPortStartFirstTask+0x1c>)
   81b02:	6800      	ldr	r0, [r0, #0]
   81b04:	6800      	ldr	r0, [r0, #0]
   81b06:	f380 8808 	msr	MSP, r0
   81b0a:	b662      	cpsie	i
   81b0c:	b661      	cpsie	f
   81b0e:	f3bf 8f4f 	dsb	sy
   81b12:	f3bf 8f6f 	isb	sy
   81b16:	df00      	svc	0
   81b18:	bf00      	nop
   81b1a:	0000      	.short	0x0000
   81b1c:	e000ed08 	.word	0xe000ed08

00081b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   81b20:	b580      	push	{r7, lr}
   81b22:	b084      	sub	sp, #16
   81b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   81b26:	4b28      	ldr	r3, [pc, #160]	; (81bc8 <xPortStartScheduler+0xa8>)
   81b28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   81b2a:	68fb      	ldr	r3, [r7, #12]
   81b2c:	781b      	ldrb	r3, [r3, #0]
   81b2e:	b2db      	uxtb	r3, r3
   81b30:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   81b32:	68fb      	ldr	r3, [r7, #12]
   81b34:	22ff      	movs	r2, #255	; 0xff
   81b36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   81b38:	68fb      	ldr	r3, [r7, #12]
   81b3a:	781b      	ldrb	r3, [r3, #0]
   81b3c:	b2db      	uxtb	r3, r3
   81b3e:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   81b40:	79fb      	ldrb	r3, [r7, #7]
   81b42:	b2db      	uxtb	r3, r3
   81b44:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   81b48:	b2da      	uxtb	r2, r3
   81b4a:	4b20      	ldr	r3, [pc, #128]	; (81bcc <xPortStartScheduler+0xac>)
   81b4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   81b4e:	4b20      	ldr	r3, [pc, #128]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b50:	2207      	movs	r2, #7
   81b52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   81b54:	e009      	b.n	81b6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   81b56:	4b1e      	ldr	r3, [pc, #120]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b58:	681b      	ldr	r3, [r3, #0]
   81b5a:	1e5a      	subs	r2, r3, #1
   81b5c:	4b1c      	ldr	r3, [pc, #112]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b5e:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   81b60:	79fb      	ldrb	r3, [r7, #7]
   81b62:	b2db      	uxtb	r3, r3
   81b64:	005b      	lsls	r3, r3, #1
   81b66:	b2db      	uxtb	r3, r3
   81b68:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   81b6a:	79fb      	ldrb	r3, [r7, #7]
   81b6c:	b2db      	uxtb	r3, r3
   81b6e:	b2db      	uxtb	r3, r3
   81b70:	b25b      	sxtb	r3, r3
   81b72:	2b00      	cmp	r3, #0
   81b74:	dbef      	blt.n	81b56 <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   81b76:	4b16      	ldr	r3, [pc, #88]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b78:	681b      	ldr	r3, [r3, #0]
   81b7a:	021a      	lsls	r2, r3, #8
   81b7c:	4b14      	ldr	r3, [pc, #80]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b7e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   81b80:	4b13      	ldr	r3, [pc, #76]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b82:	681b      	ldr	r3, [r3, #0]
   81b84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81b88:	4b11      	ldr	r3, [pc, #68]	; (81bd0 <xPortStartScheduler+0xb0>)
   81b8a:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   81b8c:	68bb      	ldr	r3, [r7, #8]
   81b8e:	b2da      	uxtb	r2, r3
   81b90:	68fb      	ldr	r3, [r7, #12]
   81b92:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   81b94:	4b0f      	ldr	r3, [pc, #60]	; (81bd4 <xPortStartScheduler+0xb4>)
   81b96:	4a0f      	ldr	r2, [pc, #60]	; (81bd4 <xPortStartScheduler+0xb4>)
   81b98:	6812      	ldr	r2, [r2, #0]
   81b9a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   81b9e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   81ba0:	4b0c      	ldr	r3, [pc, #48]	; (81bd4 <xPortStartScheduler+0xb4>)
   81ba2:	4a0c      	ldr	r2, [pc, #48]	; (81bd4 <xPortStartScheduler+0xb4>)
   81ba4:	6812      	ldr	r2, [r2, #0]
   81ba6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   81baa:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   81bac:	4b0a      	ldr	r3, [pc, #40]	; (81bd8 <xPortStartScheduler+0xb8>)
   81bae:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   81bb0:	4b0a      	ldr	r3, [pc, #40]	; (81bdc <xPortStartScheduler+0xbc>)
   81bb2:	2200      	movs	r2, #0
   81bb4:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   81bb6:	4b0a      	ldr	r3, [pc, #40]	; (81be0 <xPortStartScheduler+0xc0>)
   81bb8:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   81bba:	4b0a      	ldr	r3, [pc, #40]	; (81be4 <xPortStartScheduler+0xc4>)
   81bbc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   81bbe:	2300      	movs	r3, #0
}
   81bc0:	4618      	mov	r0, r3
   81bc2:	3710      	adds	r7, #16
   81bc4:	46bd      	mov	sp, r7
   81bc6:	bd80      	pop	{r7, pc}
   81bc8:	e000e400 	.word	0xe000e400
   81bcc:	200704c4 	.word	0x200704c4
   81bd0:	200704c8 	.word	0x200704c8
   81bd4:	e000ed20 	.word	0xe000ed20
   81bd8:	00081d19 	.word	0x00081d19
   81bdc:	20070004 	.word	0x20070004
   81be0:	00081b01 	.word	0x00081b01
   81be4:	00081ab9 	.word	0x00081ab9

00081be8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   81be8:	b480      	push	{r7}
   81bea:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81bec:	4b05      	ldr	r3, [pc, #20]	; (81c04 <vPortYield+0x1c>)
   81bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81bf2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   81bf4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81bf8:	f3bf 8f6f 	isb	sy
}
   81bfc:	46bd      	mov	sp, r7
   81bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c02:	4770      	bx	lr
   81c04:	e000ed04 	.word	0xe000ed04

00081c08 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81c08:	b580      	push	{r7, lr}
   81c0a:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   81c0c:	4b0c      	ldr	r3, [pc, #48]	; (81c40 <vPortEnterCritical+0x38>)
   81c0e:	4798      	blx	r3
	uxCriticalNesting++;
   81c10:	4b0c      	ldr	r3, [pc, #48]	; (81c44 <vPortEnterCritical+0x3c>)
   81c12:	681b      	ldr	r3, [r3, #0]
   81c14:	1c5a      	adds	r2, r3, #1
   81c16:	4b0b      	ldr	r3, [pc, #44]	; (81c44 <vPortEnterCritical+0x3c>)
   81c18:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   81c1a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   81c1e:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   81c22:	4b08      	ldr	r3, [pc, #32]	; (81c44 <vPortEnterCritical+0x3c>)
   81c24:	681b      	ldr	r3, [r3, #0]
   81c26:	2b01      	cmp	r3, #1
   81c28:	d108      	bne.n	81c3c <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   81c2a:	4b07      	ldr	r3, [pc, #28]	; (81c48 <vPortEnterCritical+0x40>)
   81c2c:	681b      	ldr	r3, [r3, #0]
   81c2e:	f003 031f 	and.w	r3, r3, #31
   81c32:	2b00      	cmp	r3, #0
   81c34:	d002      	beq.n	81c3c <vPortEnterCritical+0x34>
   81c36:	4b02      	ldr	r3, [pc, #8]	; (81c40 <vPortEnterCritical+0x38>)
   81c38:	4798      	blx	r3
   81c3a:	e7fe      	b.n	81c3a <vPortEnterCritical+0x32>
	}
}
   81c3c:	bd80      	pop	{r7, pc}
   81c3e:	bf00      	nop
   81c40:	00081c85 	.word	0x00081c85
   81c44:	20070004 	.word	0x20070004
   81c48:	e000ed04 	.word	0xe000ed04

00081c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81c4c:	b580      	push	{r7, lr}
   81c4e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   81c50:	4b09      	ldr	r3, [pc, #36]	; (81c78 <vPortExitCritical+0x2c>)
   81c52:	681b      	ldr	r3, [r3, #0]
   81c54:	2b00      	cmp	r3, #0
   81c56:	d102      	bne.n	81c5e <vPortExitCritical+0x12>
   81c58:	4b08      	ldr	r3, [pc, #32]	; (81c7c <vPortExitCritical+0x30>)
   81c5a:	4798      	blx	r3
   81c5c:	e7fe      	b.n	81c5c <vPortExitCritical+0x10>
	uxCriticalNesting--;
   81c5e:	4b06      	ldr	r3, [pc, #24]	; (81c78 <vPortExitCritical+0x2c>)
   81c60:	681b      	ldr	r3, [r3, #0]
   81c62:	1e5a      	subs	r2, r3, #1
   81c64:	4b04      	ldr	r3, [pc, #16]	; (81c78 <vPortExitCritical+0x2c>)
   81c66:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   81c68:	4b03      	ldr	r3, [pc, #12]	; (81c78 <vPortExitCritical+0x2c>)
   81c6a:	681b      	ldr	r3, [r3, #0]
   81c6c:	2b00      	cmp	r3, #0
   81c6e:	d102      	bne.n	81c76 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   81c70:	2000      	movs	r0, #0
   81c72:	4b03      	ldr	r3, [pc, #12]	; (81c80 <vPortExitCritical+0x34>)
   81c74:	4798      	blx	r3
	}
}
   81c76:	bd80      	pop	{r7, pc}
   81c78:	20070004 	.word	0x20070004
   81c7c:	00081c85 	.word	0x00081c85
   81c80:	00081c99 	.word	0x00081c99

00081c84 <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   81c84:	f3ef 8011 	mrs	r0, BASEPRI
   81c88:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   81c8c:	f381 8811 	msr	BASEPRI, r1
   81c90:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   81c92:	2300      	movs	r3, #0
}
   81c94:	4618      	mov	r0, r3
   81c96:	bf00      	nop

00081c98 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   81c98:	f380 8811 	msr	BASEPRI, r0
   81c9c:	4770      	bx	lr
   81c9e:	bf00      	nop

00081ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   81ca0:	f3ef 8009 	mrs	r0, PSP
   81ca4:	f3bf 8f6f 	isb	sy
   81ca8:	4b0d      	ldr	r3, [pc, #52]	; (81ce0 <pxCurrentTCBConst>)
   81caa:	681a      	ldr	r2, [r3, #0]
   81cac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81cb0:	6010      	str	r0, [r2, #0]
   81cb2:	e92d 4008 	stmdb	sp!, {r3, lr}
   81cb6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81cba:	f380 8811 	msr	BASEPRI, r0
   81cbe:	f001 f9f1 	bl	830a4 <vTaskSwitchContext>
   81cc2:	f04f 0000 	mov.w	r0, #0
   81cc6:	f380 8811 	msr	BASEPRI, r0
   81cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81cce:	6819      	ldr	r1, [r3, #0]
   81cd0:	6808      	ldr	r0, [r1, #0]
   81cd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81cd6:	f380 8809 	msr	PSP, r0
   81cda:	f3bf 8f6f 	isb	sy
   81cde:	4770      	bx	lr

00081ce0 <pxCurrentTCBConst>:
   81ce0:	2007a4e4 	.word	0x2007a4e4

00081ce4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   81ce4:	b580      	push	{r7, lr}
   81ce6:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81ce8:	4b07      	ldr	r3, [pc, #28]	; (81d08 <SysTick_Handler+0x24>)
   81cea:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   81cec:	4b07      	ldr	r3, [pc, #28]	; (81d0c <SysTick_Handler+0x28>)
   81cee:	4798      	blx	r3
   81cf0:	4603      	mov	r3, r0
   81cf2:	2b00      	cmp	r3, #0
   81cf4:	d003      	beq.n	81cfe <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   81cf6:	4b06      	ldr	r3, [pc, #24]	; (81d10 <SysTick_Handler+0x2c>)
   81cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   81cfc:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   81cfe:	2000      	movs	r0, #0
   81d00:	4b04      	ldr	r3, [pc, #16]	; (81d14 <SysTick_Handler+0x30>)
   81d02:	4798      	blx	r3
}
   81d04:	bd80      	pop	{r7, pc}
   81d06:	bf00      	nop
   81d08:	00081c85 	.word	0x00081c85
   81d0c:	00082f29 	.word	0x00082f29
   81d10:	e000ed04 	.word	0xe000ed04
   81d14:	00081c99 	.word	0x00081c99

00081d18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   81d18:	b480      	push	{r7}
   81d1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   81d1c:	4b07      	ldr	r3, [pc, #28]	; (81d3c <vPortSetupTimerInterrupt+0x24>)
   81d1e:	4a08      	ldr	r2, [pc, #32]	; (81d40 <vPortSetupTimerInterrupt+0x28>)
   81d20:	6811      	ldr	r1, [r2, #0]
   81d22:	4a08      	ldr	r2, [pc, #32]	; (81d44 <vPortSetupTimerInterrupt+0x2c>)
   81d24:	fba2 0201 	umull	r0, r2, r2, r1
   81d28:	08d2      	lsrs	r2, r2, #3
   81d2a:	3a01      	subs	r2, #1
   81d2c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   81d2e:	4b06      	ldr	r3, [pc, #24]	; (81d48 <vPortSetupTimerInterrupt+0x30>)
   81d30:	2207      	movs	r2, #7
   81d32:	601a      	str	r2, [r3, #0]
}
   81d34:	46bd      	mov	sp, r7
   81d36:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d3a:	4770      	bx	lr
   81d3c:	e000e014 	.word	0xe000e014
   81d40:	20070000 	.word	0x20070000
   81d44:	cccccccd 	.word	0xcccccccd
   81d48:	e000e010 	.word	0xe000e010

00081d4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   81d4c:	b580      	push	{r7, lr}
   81d4e:	b082      	sub	sp, #8
   81d50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   81d52:	f3ef 8305 	mrs	r3, IPSR
   81d56:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   81d58:	687b      	ldr	r3, [r7, #4]
   81d5a:	2b0f      	cmp	r3, #15
   81d5c:	d90c      	bls.n	81d78 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   81d5e:	4a0d      	ldr	r2, [pc, #52]	; (81d94 <vPortValidateInterruptPriority+0x48>)
   81d60:	687b      	ldr	r3, [r7, #4]
   81d62:	4413      	add	r3, r2
   81d64:	781b      	ldrb	r3, [r3, #0]
   81d66:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   81d68:	4b0b      	ldr	r3, [pc, #44]	; (81d98 <vPortValidateInterruptPriority+0x4c>)
   81d6a:	781b      	ldrb	r3, [r3, #0]
   81d6c:	78fa      	ldrb	r2, [r7, #3]
   81d6e:	429a      	cmp	r2, r3
   81d70:	d202      	bcs.n	81d78 <vPortValidateInterruptPriority+0x2c>
   81d72:	4b0a      	ldr	r3, [pc, #40]	; (81d9c <vPortValidateInterruptPriority+0x50>)
   81d74:	4798      	blx	r3
   81d76:	e7fe      	b.n	81d76 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   81d78:	4b09      	ldr	r3, [pc, #36]	; (81da0 <vPortValidateInterruptPriority+0x54>)
   81d7a:	681b      	ldr	r3, [r3, #0]
   81d7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   81d80:	4b08      	ldr	r3, [pc, #32]	; (81da4 <vPortValidateInterruptPriority+0x58>)
   81d82:	681b      	ldr	r3, [r3, #0]
   81d84:	429a      	cmp	r2, r3
   81d86:	d902      	bls.n	81d8e <vPortValidateInterruptPriority+0x42>
   81d88:	4b04      	ldr	r3, [pc, #16]	; (81d9c <vPortValidateInterruptPriority+0x50>)
   81d8a:	4798      	blx	r3
   81d8c:	e7fe      	b.n	81d8c <vPortValidateInterruptPriority+0x40>
	}
   81d8e:	3708      	adds	r7, #8
   81d90:	46bd      	mov	sp, r7
   81d92:	bd80      	pop	{r7, pc}
   81d94:	e000e3f0 	.word	0xe000e3f0
   81d98:	200704c4 	.word	0x200704c4
   81d9c:	00081c85 	.word	0x00081c85
   81da0:	e000ed0c 	.word	0xe000ed0c
   81da4:	200704c8 	.word	0x200704c8

00081da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   81da8:	b580      	push	{r7, lr}
   81daa:	b086      	sub	sp, #24
   81dac:	af00      	add	r7, sp, #0
   81dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   81db0:	2300      	movs	r3, #0
   81db2:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   81db4:	4b4f      	ldr	r3, [pc, #316]	; (81ef4 <pvPortMalloc+0x14c>)
   81db6:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81db8:	4b4f      	ldr	r3, [pc, #316]	; (81ef8 <pvPortMalloc+0x150>)
   81dba:	681b      	ldr	r3, [r3, #0]
   81dbc:	2b00      	cmp	r3, #0
   81dbe:	d101      	bne.n	81dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   81dc0:	4b4e      	ldr	r3, [pc, #312]	; (81efc <pvPortMalloc+0x154>)
   81dc2:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   81dc4:	4b4e      	ldr	r3, [pc, #312]	; (81f00 <pvPortMalloc+0x158>)
   81dc6:	681a      	ldr	r2, [r3, #0]
   81dc8:	687b      	ldr	r3, [r7, #4]
   81dca:	4013      	ands	r3, r2
   81dcc:	2b00      	cmp	r3, #0
   81dce:	d17d      	bne.n	81ecc <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   81dd0:	687b      	ldr	r3, [r7, #4]
   81dd2:	2b00      	cmp	r3, #0
   81dd4:	d015      	beq.n	81e02 <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   81dd6:	2308      	movs	r3, #8
   81dd8:	687a      	ldr	r2, [r7, #4]
   81dda:	4413      	add	r3, r2
   81ddc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   81dde:	687b      	ldr	r3, [r7, #4]
   81de0:	f003 0307 	and.w	r3, r3, #7
   81de4:	2b00      	cmp	r3, #0
   81de6:	d00c      	beq.n	81e02 <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   81de8:	687b      	ldr	r3, [r7, #4]
   81dea:	f023 0307 	bic.w	r3, r3, #7
   81dee:	3308      	adds	r3, #8
   81df0:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   81df2:	687b      	ldr	r3, [r7, #4]
   81df4:	f003 0307 	and.w	r3, r3, #7
   81df8:	2b00      	cmp	r3, #0
   81dfa:	d002      	beq.n	81e02 <pvPortMalloc+0x5a>
   81dfc:	4b41      	ldr	r3, [pc, #260]	; (81f04 <pvPortMalloc+0x15c>)
   81dfe:	4798      	blx	r3
   81e00:	e7fe      	b.n	81e00 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   81e02:	687b      	ldr	r3, [r7, #4]
   81e04:	2b00      	cmp	r3, #0
   81e06:	d061      	beq.n	81ecc <pvPortMalloc+0x124>
   81e08:	4b3f      	ldr	r3, [pc, #252]	; (81f08 <pvPortMalloc+0x160>)
   81e0a:	681b      	ldr	r3, [r3, #0]
   81e0c:	687a      	ldr	r2, [r7, #4]
   81e0e:	429a      	cmp	r2, r3
   81e10:	d85c      	bhi.n	81ecc <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   81e12:	4b3e      	ldr	r3, [pc, #248]	; (81f0c <pvPortMalloc+0x164>)
   81e14:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   81e16:	4b3d      	ldr	r3, [pc, #244]	; (81f0c <pvPortMalloc+0x164>)
   81e18:	681b      	ldr	r3, [r3, #0]
   81e1a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81e1c:	e004      	b.n	81e28 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   81e1e:	697b      	ldr	r3, [r7, #20]
   81e20:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   81e22:	697b      	ldr	r3, [r7, #20]
   81e24:	681b      	ldr	r3, [r3, #0]
   81e26:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81e28:	697b      	ldr	r3, [r7, #20]
   81e2a:	685a      	ldr	r2, [r3, #4]
   81e2c:	687b      	ldr	r3, [r7, #4]
   81e2e:	429a      	cmp	r2, r3
   81e30:	d203      	bcs.n	81e3a <pvPortMalloc+0x92>
   81e32:	697b      	ldr	r3, [r7, #20]
   81e34:	681b      	ldr	r3, [r3, #0]
   81e36:	2b00      	cmp	r3, #0
   81e38:	d1f1      	bne.n	81e1e <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   81e3a:	4b2f      	ldr	r3, [pc, #188]	; (81ef8 <pvPortMalloc+0x150>)
   81e3c:	681b      	ldr	r3, [r3, #0]
   81e3e:	697a      	ldr	r2, [r7, #20]
   81e40:	429a      	cmp	r2, r3
   81e42:	d043      	beq.n	81ecc <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   81e44:	693b      	ldr	r3, [r7, #16]
   81e46:	681a      	ldr	r2, [r3, #0]
   81e48:	2308      	movs	r3, #8
   81e4a:	4413      	add	r3, r2
   81e4c:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81e4e:	697b      	ldr	r3, [r7, #20]
   81e50:	681a      	ldr	r2, [r3, #0]
   81e52:	693b      	ldr	r3, [r7, #16]
   81e54:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81e56:	697b      	ldr	r3, [r7, #20]
   81e58:	685a      	ldr	r2, [r3, #4]
   81e5a:	687b      	ldr	r3, [r7, #4]
   81e5c:	1ad2      	subs	r2, r2, r3
   81e5e:	2308      	movs	r3, #8
   81e60:	005b      	lsls	r3, r3, #1
   81e62:	429a      	cmp	r2, r3
   81e64:	d917      	bls.n	81e96 <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   81e66:	697a      	ldr	r2, [r7, #20]
   81e68:	687b      	ldr	r3, [r7, #4]
   81e6a:	4413      	add	r3, r2
   81e6c:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   81e6e:	68bb      	ldr	r3, [r7, #8]
   81e70:	f003 0307 	and.w	r3, r3, #7
   81e74:	2b00      	cmp	r3, #0
   81e76:	d002      	beq.n	81e7e <pvPortMalloc+0xd6>
   81e78:	4b22      	ldr	r3, [pc, #136]	; (81f04 <pvPortMalloc+0x15c>)
   81e7a:	4798      	blx	r3
   81e7c:	e7fe      	b.n	81e7c <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81e7e:	697b      	ldr	r3, [r7, #20]
   81e80:	685a      	ldr	r2, [r3, #4]
   81e82:	687b      	ldr	r3, [r7, #4]
   81e84:	1ad2      	subs	r2, r2, r3
   81e86:	68bb      	ldr	r3, [r7, #8]
   81e88:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   81e8a:	697b      	ldr	r3, [r7, #20]
   81e8c:	687a      	ldr	r2, [r7, #4]
   81e8e:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81e90:	68b8      	ldr	r0, [r7, #8]
   81e92:	4b1f      	ldr	r3, [pc, #124]	; (81f10 <pvPortMalloc+0x168>)
   81e94:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   81e96:	4b1c      	ldr	r3, [pc, #112]	; (81f08 <pvPortMalloc+0x160>)
   81e98:	681a      	ldr	r2, [r3, #0]
   81e9a:	697b      	ldr	r3, [r7, #20]
   81e9c:	685b      	ldr	r3, [r3, #4]
   81e9e:	1ad2      	subs	r2, r2, r3
   81ea0:	4b19      	ldr	r3, [pc, #100]	; (81f08 <pvPortMalloc+0x160>)
   81ea2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   81ea4:	4b18      	ldr	r3, [pc, #96]	; (81f08 <pvPortMalloc+0x160>)
   81ea6:	681a      	ldr	r2, [r3, #0]
   81ea8:	4b1a      	ldr	r3, [pc, #104]	; (81f14 <pvPortMalloc+0x16c>)
   81eaa:	681b      	ldr	r3, [r3, #0]
   81eac:	429a      	cmp	r2, r3
   81eae:	d203      	bcs.n	81eb8 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   81eb0:	4b15      	ldr	r3, [pc, #84]	; (81f08 <pvPortMalloc+0x160>)
   81eb2:	681a      	ldr	r2, [r3, #0]
   81eb4:	4b17      	ldr	r3, [pc, #92]	; (81f14 <pvPortMalloc+0x16c>)
   81eb6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   81eb8:	697b      	ldr	r3, [r7, #20]
   81eba:	685a      	ldr	r2, [r3, #4]
   81ebc:	4b10      	ldr	r3, [pc, #64]	; (81f00 <pvPortMalloc+0x158>)
   81ebe:	681b      	ldr	r3, [r3, #0]
   81ec0:	431a      	orrs	r2, r3
   81ec2:	697b      	ldr	r3, [r7, #20]
   81ec4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   81ec6:	697b      	ldr	r3, [r7, #20]
   81ec8:	2200      	movs	r2, #0
   81eca:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   81ecc:	4b12      	ldr	r3, [pc, #72]	; (81f18 <pvPortMalloc+0x170>)
   81ece:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   81ed0:	68fb      	ldr	r3, [r7, #12]
   81ed2:	2b00      	cmp	r3, #0
   81ed4:	d101      	bne.n	81eda <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   81ed6:	4b11      	ldr	r3, [pc, #68]	; (81f1c <pvPortMalloc+0x174>)
   81ed8:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   81eda:	68fb      	ldr	r3, [r7, #12]
   81edc:	f003 0307 	and.w	r3, r3, #7
   81ee0:	2b00      	cmp	r3, #0
   81ee2:	d002      	beq.n	81eea <pvPortMalloc+0x142>
   81ee4:	4b07      	ldr	r3, [pc, #28]	; (81f04 <pvPortMalloc+0x15c>)
   81ee6:	4798      	blx	r3
   81ee8:	e7fe      	b.n	81ee8 <pvPortMalloc+0x140>
	return pvReturn;
   81eea:	68fb      	ldr	r3, [r7, #12]
}
   81eec:	4618      	mov	r0, r3
   81eee:	3718      	adds	r7, #24
   81ef0:	46bd      	mov	sp, r7
   81ef2:	bd80      	pop	{r7, pc}
   81ef4:	00082dbd 	.word	0x00082dbd
   81ef8:	2007a4d4 	.word	0x2007a4d4
   81efc:	00081fc5 	.word	0x00081fc5
   81f00:	2007a4e0 	.word	0x2007a4e0
   81f04:	00081c85 	.word	0x00081c85
   81f08:	2007a4d8 	.word	0x2007a4d8
   81f0c:	2007a4cc 	.word	0x2007a4cc
   81f10:	00082089 	.word	0x00082089
   81f14:	2007a4dc 	.word	0x2007a4dc
   81f18:	00082dd9 	.word	0x00082dd9
   81f1c:	000847f5 	.word	0x000847f5

00081f20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81f20:	b580      	push	{r7, lr}
   81f22:	b084      	sub	sp, #16
   81f24:	af00      	add	r7, sp, #0
   81f26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   81f28:	687b      	ldr	r3, [r7, #4]
   81f2a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   81f2c:	687b      	ldr	r3, [r7, #4]
   81f2e:	2b00      	cmp	r3, #0
   81f30:	d038      	beq.n	81fa4 <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   81f32:	2308      	movs	r3, #8
   81f34:	425b      	negs	r3, r3
   81f36:	68fa      	ldr	r2, [r7, #12]
   81f38:	4413      	add	r3, r2
   81f3a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   81f3c:	68fb      	ldr	r3, [r7, #12]
   81f3e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   81f40:	68bb      	ldr	r3, [r7, #8]
   81f42:	685a      	ldr	r2, [r3, #4]
   81f44:	4b19      	ldr	r3, [pc, #100]	; (81fac <vPortFree+0x8c>)
   81f46:	681b      	ldr	r3, [r3, #0]
   81f48:	4013      	ands	r3, r2
   81f4a:	2b00      	cmp	r3, #0
   81f4c:	d102      	bne.n	81f54 <vPortFree+0x34>
   81f4e:	4b18      	ldr	r3, [pc, #96]	; (81fb0 <vPortFree+0x90>)
   81f50:	4798      	blx	r3
   81f52:	e7fe      	b.n	81f52 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   81f54:	68bb      	ldr	r3, [r7, #8]
   81f56:	681b      	ldr	r3, [r3, #0]
   81f58:	2b00      	cmp	r3, #0
   81f5a:	d002      	beq.n	81f62 <vPortFree+0x42>
   81f5c:	4b14      	ldr	r3, [pc, #80]	; (81fb0 <vPortFree+0x90>)
   81f5e:	4798      	blx	r3
   81f60:	e7fe      	b.n	81f60 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   81f62:	68bb      	ldr	r3, [r7, #8]
   81f64:	685a      	ldr	r2, [r3, #4]
   81f66:	4b11      	ldr	r3, [pc, #68]	; (81fac <vPortFree+0x8c>)
   81f68:	681b      	ldr	r3, [r3, #0]
   81f6a:	4013      	ands	r3, r2
   81f6c:	2b00      	cmp	r3, #0
   81f6e:	d019      	beq.n	81fa4 <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   81f70:	68bb      	ldr	r3, [r7, #8]
   81f72:	681b      	ldr	r3, [r3, #0]
   81f74:	2b00      	cmp	r3, #0
   81f76:	d115      	bne.n	81fa4 <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   81f78:	68bb      	ldr	r3, [r7, #8]
   81f7a:	685a      	ldr	r2, [r3, #4]
   81f7c:	4b0b      	ldr	r3, [pc, #44]	; (81fac <vPortFree+0x8c>)
   81f7e:	681b      	ldr	r3, [r3, #0]
   81f80:	43db      	mvns	r3, r3
   81f82:	401a      	ands	r2, r3
   81f84:	68bb      	ldr	r3, [r7, #8]
   81f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   81f88:	4b0a      	ldr	r3, [pc, #40]	; (81fb4 <vPortFree+0x94>)
   81f8a:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   81f8c:	68bb      	ldr	r3, [r7, #8]
   81f8e:	685a      	ldr	r2, [r3, #4]
   81f90:	4b09      	ldr	r3, [pc, #36]	; (81fb8 <vPortFree+0x98>)
   81f92:	681b      	ldr	r3, [r3, #0]
   81f94:	441a      	add	r2, r3
   81f96:	4b08      	ldr	r3, [pc, #32]	; (81fb8 <vPortFree+0x98>)
   81f98:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   81f9a:	68b8      	ldr	r0, [r7, #8]
   81f9c:	4b07      	ldr	r3, [pc, #28]	; (81fbc <vPortFree+0x9c>)
   81f9e:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   81fa0:	4b07      	ldr	r3, [pc, #28]	; (81fc0 <vPortFree+0xa0>)
   81fa2:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   81fa4:	3710      	adds	r7, #16
   81fa6:	46bd      	mov	sp, r7
   81fa8:	bd80      	pop	{r7, pc}
   81faa:	bf00      	nop
   81fac:	2007a4e0 	.word	0x2007a4e0
   81fb0:	00081c85 	.word	0x00081c85
   81fb4:	00082dbd 	.word	0x00082dbd
   81fb8:	2007a4d8 	.word	0x2007a4d8
   81fbc:	00082089 	.word	0x00082089
   81fc0:	00082dd9 	.word	0x00082dd9

00081fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   81fc4:	b480      	push	{r7}
   81fc6:	b085      	sub	sp, #20
   81fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   81fca:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   81fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   81fd0:	4b27      	ldr	r3, [pc, #156]	; (82070 <prvHeapInit+0xac>)
   81fd2:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   81fd4:	68fb      	ldr	r3, [r7, #12]
   81fd6:	f003 0307 	and.w	r3, r3, #7
   81fda:	2b00      	cmp	r3, #0
   81fdc:	d00c      	beq.n	81ff8 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   81fde:	68fb      	ldr	r3, [r7, #12]
   81fe0:	3307      	adds	r3, #7
   81fe2:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   81fe4:	68fb      	ldr	r3, [r7, #12]
   81fe6:	f023 0307 	bic.w	r3, r3, #7
   81fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   81fec:	68ba      	ldr	r2, [r7, #8]
   81fee:	68fb      	ldr	r3, [r7, #12]
   81ff0:	1ad2      	subs	r2, r2, r3
   81ff2:	4b1f      	ldr	r3, [pc, #124]	; (82070 <prvHeapInit+0xac>)
   81ff4:	4413      	add	r3, r2
   81ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   81ff8:	68fb      	ldr	r3, [r7, #12]
   81ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   81ffc:	4b1d      	ldr	r3, [pc, #116]	; (82074 <prvHeapInit+0xb0>)
   81ffe:	687a      	ldr	r2, [r7, #4]
   82000:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   82002:	4b1c      	ldr	r3, [pc, #112]	; (82074 <prvHeapInit+0xb0>)
   82004:	2200      	movs	r2, #0
   82006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   82008:	687a      	ldr	r2, [r7, #4]
   8200a:	68bb      	ldr	r3, [r7, #8]
   8200c:	4413      	add	r3, r2
   8200e:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   82010:	2308      	movs	r3, #8
   82012:	68fa      	ldr	r2, [r7, #12]
   82014:	1ad3      	subs	r3, r2, r3
   82016:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   82018:	68fb      	ldr	r3, [r7, #12]
   8201a:	f023 0307 	bic.w	r3, r3, #7
   8201e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   82020:	68fa      	ldr	r2, [r7, #12]
   82022:	4b15      	ldr	r3, [pc, #84]	; (82078 <prvHeapInit+0xb4>)
   82024:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   82026:	4b14      	ldr	r3, [pc, #80]	; (82078 <prvHeapInit+0xb4>)
   82028:	681b      	ldr	r3, [r3, #0]
   8202a:	2200      	movs	r2, #0
   8202c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   8202e:	4b12      	ldr	r3, [pc, #72]	; (82078 <prvHeapInit+0xb4>)
   82030:	681b      	ldr	r3, [r3, #0]
   82032:	2200      	movs	r2, #0
   82034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   82036:	687b      	ldr	r3, [r7, #4]
   82038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   8203a:	683b      	ldr	r3, [r7, #0]
   8203c:	68fa      	ldr	r2, [r7, #12]
   8203e:	1ad2      	subs	r2, r2, r3
   82040:	683b      	ldr	r3, [r7, #0]
   82042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   82044:	4b0c      	ldr	r3, [pc, #48]	; (82078 <prvHeapInit+0xb4>)
   82046:	681a      	ldr	r2, [r3, #0]
   82048:	683b      	ldr	r3, [r7, #0]
   8204a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8204c:	683b      	ldr	r3, [r7, #0]
   8204e:	685a      	ldr	r2, [r3, #4]
   82050:	4b0a      	ldr	r3, [pc, #40]	; (8207c <prvHeapInit+0xb8>)
   82052:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   82054:	683b      	ldr	r3, [r7, #0]
   82056:	685a      	ldr	r2, [r3, #4]
   82058:	4b09      	ldr	r3, [pc, #36]	; (82080 <prvHeapInit+0xbc>)
   8205a:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   8205c:	4b09      	ldr	r3, [pc, #36]	; (82084 <prvHeapInit+0xc0>)
   8205e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   82062:	601a      	str	r2, [r3, #0]
}
   82064:	3714      	adds	r7, #20
   82066:	46bd      	mov	sp, r7
   82068:	f85d 7b04 	ldr.w	r7, [sp], #4
   8206c:	4770      	bx	lr
   8206e:	bf00      	nop
   82070:	200704cc 	.word	0x200704cc
   82074:	2007a4cc 	.word	0x2007a4cc
   82078:	2007a4d4 	.word	0x2007a4d4
   8207c:	2007a4dc 	.word	0x2007a4dc
   82080:	2007a4d8 	.word	0x2007a4d8
   82084:	2007a4e0 	.word	0x2007a4e0

00082088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   82088:	b480      	push	{r7}
   8208a:	b085      	sub	sp, #20
   8208c:	af00      	add	r7, sp, #0
   8208e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   82090:	4b27      	ldr	r3, [pc, #156]	; (82130 <prvInsertBlockIntoFreeList+0xa8>)
   82092:	60fb      	str	r3, [r7, #12]
   82094:	e002      	b.n	8209c <prvInsertBlockIntoFreeList+0x14>
   82096:	68fb      	ldr	r3, [r7, #12]
   82098:	681b      	ldr	r3, [r3, #0]
   8209a:	60fb      	str	r3, [r7, #12]
   8209c:	68fb      	ldr	r3, [r7, #12]
   8209e:	681a      	ldr	r2, [r3, #0]
   820a0:	687b      	ldr	r3, [r7, #4]
   820a2:	429a      	cmp	r2, r3
   820a4:	d3f7      	bcc.n	82096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   820a6:	68fb      	ldr	r3, [r7, #12]
   820a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   820aa:	68fb      	ldr	r3, [r7, #12]
   820ac:	685b      	ldr	r3, [r3, #4]
   820ae:	68ba      	ldr	r2, [r7, #8]
   820b0:	441a      	add	r2, r3
   820b2:	687b      	ldr	r3, [r7, #4]
   820b4:	429a      	cmp	r2, r3
   820b6:	d108      	bne.n	820ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   820b8:	68fb      	ldr	r3, [r7, #12]
   820ba:	685a      	ldr	r2, [r3, #4]
   820bc:	687b      	ldr	r3, [r7, #4]
   820be:	685b      	ldr	r3, [r3, #4]
   820c0:	441a      	add	r2, r3
   820c2:	68fb      	ldr	r3, [r7, #12]
   820c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   820c6:	68fb      	ldr	r3, [r7, #12]
   820c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   820ca:	687b      	ldr	r3, [r7, #4]
   820cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   820ce:	687b      	ldr	r3, [r7, #4]
   820d0:	685b      	ldr	r3, [r3, #4]
   820d2:	68ba      	ldr	r2, [r7, #8]
   820d4:	441a      	add	r2, r3
   820d6:	68fb      	ldr	r3, [r7, #12]
   820d8:	681b      	ldr	r3, [r3, #0]
   820da:	429a      	cmp	r2, r3
   820dc:	d118      	bne.n	82110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   820de:	68fb      	ldr	r3, [r7, #12]
   820e0:	681a      	ldr	r2, [r3, #0]
   820e2:	4b14      	ldr	r3, [pc, #80]	; (82134 <prvInsertBlockIntoFreeList+0xac>)
   820e4:	681b      	ldr	r3, [r3, #0]
   820e6:	429a      	cmp	r2, r3
   820e8:	d00d      	beq.n	82106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   820ea:	687b      	ldr	r3, [r7, #4]
   820ec:	685a      	ldr	r2, [r3, #4]
   820ee:	68fb      	ldr	r3, [r7, #12]
   820f0:	681b      	ldr	r3, [r3, #0]
   820f2:	685b      	ldr	r3, [r3, #4]
   820f4:	441a      	add	r2, r3
   820f6:	687b      	ldr	r3, [r7, #4]
   820f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   820fa:	68fb      	ldr	r3, [r7, #12]
   820fc:	681b      	ldr	r3, [r3, #0]
   820fe:	681a      	ldr	r2, [r3, #0]
   82100:	687b      	ldr	r3, [r7, #4]
   82102:	601a      	str	r2, [r3, #0]
   82104:	e008      	b.n	82118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   82106:	4b0b      	ldr	r3, [pc, #44]	; (82134 <prvInsertBlockIntoFreeList+0xac>)
   82108:	681a      	ldr	r2, [r3, #0]
   8210a:	687b      	ldr	r3, [r7, #4]
   8210c:	601a      	str	r2, [r3, #0]
   8210e:	e003      	b.n	82118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   82110:	68fb      	ldr	r3, [r7, #12]
   82112:	681a      	ldr	r2, [r3, #0]
   82114:	687b      	ldr	r3, [r7, #4]
   82116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   82118:	68fa      	ldr	r2, [r7, #12]
   8211a:	687b      	ldr	r3, [r7, #4]
   8211c:	429a      	cmp	r2, r3
   8211e:	d002      	beq.n	82126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   82120:	68fb      	ldr	r3, [r7, #12]
   82122:	687a      	ldr	r2, [r7, #4]
   82124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   82126:	3714      	adds	r7, #20
   82128:	46bd      	mov	sp, r7
   8212a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8212e:	4770      	bx	lr
   82130:	2007a4cc 	.word	0x2007a4cc
   82134:	2007a4d4 	.word	0x2007a4d4

00082138 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   82138:	b580      	push	{r7, lr}
   8213a:	b084      	sub	sp, #16
   8213c:	af00      	add	r7, sp, #0
   8213e:	6078      	str	r0, [r7, #4]
   82140:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82142:	687b      	ldr	r3, [r7, #4]
   82144:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   82146:	68fb      	ldr	r3, [r7, #12]
   82148:	2b00      	cmp	r3, #0
   8214a:	d102      	bne.n	82152 <xQueueGenericReset+0x1a>
   8214c:	4b26      	ldr	r3, [pc, #152]	; (821e8 <xQueueGenericReset+0xb0>)
   8214e:	4798      	blx	r3
   82150:	e7fe      	b.n	82150 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   82152:	4b26      	ldr	r3, [pc, #152]	; (821ec <xQueueGenericReset+0xb4>)
   82154:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   82156:	68fb      	ldr	r3, [r7, #12]
   82158:	681a      	ldr	r2, [r3, #0]
   8215a:	68fb      	ldr	r3, [r7, #12]
   8215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8215e:	68f9      	ldr	r1, [r7, #12]
   82160:	6c09      	ldr	r1, [r1, #64]	; 0x40
   82162:	fb01 f303 	mul.w	r3, r1, r3
   82166:	441a      	add	r2, r3
   82168:	68fb      	ldr	r3, [r7, #12]
   8216a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   8216c:	68fb      	ldr	r3, [r7, #12]
   8216e:	2200      	movs	r2, #0
   82170:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   82172:	68fb      	ldr	r3, [r7, #12]
   82174:	681a      	ldr	r2, [r3, #0]
   82176:	68fb      	ldr	r3, [r7, #12]
   82178:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   8217a:	68fb      	ldr	r3, [r7, #12]
   8217c:	681a      	ldr	r2, [r3, #0]
   8217e:	68fb      	ldr	r3, [r7, #12]
   82180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82182:	3b01      	subs	r3, #1
   82184:	68f9      	ldr	r1, [r7, #12]
   82186:	6c09      	ldr	r1, [r1, #64]	; 0x40
   82188:	fb01 f303 	mul.w	r3, r1, r3
   8218c:	441a      	add	r2, r3
   8218e:	68fb      	ldr	r3, [r7, #12]
   82190:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   82192:	68fb      	ldr	r3, [r7, #12]
   82194:	f04f 32ff 	mov.w	r2, #4294967295
   82198:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8219a:	68fb      	ldr	r3, [r7, #12]
   8219c:	f04f 32ff 	mov.w	r2, #4294967295
   821a0:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   821a2:	683b      	ldr	r3, [r7, #0]
   821a4:	2b00      	cmp	r3, #0
   821a6:	d10e      	bne.n	821c6 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   821a8:	68fb      	ldr	r3, [r7, #12]
   821aa:	691b      	ldr	r3, [r3, #16]
   821ac:	2b00      	cmp	r3, #0
   821ae:	d014      	beq.n	821da <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   821b0:	68fb      	ldr	r3, [r7, #12]
   821b2:	3310      	adds	r3, #16
   821b4:	4618      	mov	r0, r3
   821b6:	4b0e      	ldr	r3, [pc, #56]	; (821f0 <xQueueGenericReset+0xb8>)
   821b8:	4798      	blx	r3
   821ba:	4603      	mov	r3, r0
   821bc:	2b01      	cmp	r3, #1
   821be:	d10c      	bne.n	821da <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   821c0:	4b0c      	ldr	r3, [pc, #48]	; (821f4 <xQueueGenericReset+0xbc>)
   821c2:	4798      	blx	r3
   821c4:	e009      	b.n	821da <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   821c6:	68fb      	ldr	r3, [r7, #12]
   821c8:	3310      	adds	r3, #16
   821ca:	4618      	mov	r0, r3
   821cc:	4b0a      	ldr	r3, [pc, #40]	; (821f8 <xQueueGenericReset+0xc0>)
   821ce:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   821d0:	68fb      	ldr	r3, [r7, #12]
   821d2:	3324      	adds	r3, #36	; 0x24
   821d4:	4618      	mov	r0, r3
   821d6:	4b08      	ldr	r3, [pc, #32]	; (821f8 <xQueueGenericReset+0xc0>)
   821d8:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   821da:	4b08      	ldr	r3, [pc, #32]	; (821fc <xQueueGenericReset+0xc4>)
   821dc:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   821de:	2301      	movs	r3, #1
}
   821e0:	4618      	mov	r0, r3
   821e2:	3710      	adds	r7, #16
   821e4:	46bd      	mov	sp, r7
   821e6:	bd80      	pop	{r7, pc}
   821e8:	00081c85 	.word	0x00081c85
   821ec:	00081c09 	.word	0x00081c09
   821f0:	000832c1 	.word	0x000832c1
   821f4:	00081be9 	.word	0x00081be9
   821f8:	000818fd 	.word	0x000818fd
   821fc:	00081c4d 	.word	0x00081c4d

00082200 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   82200:	b580      	push	{r7, lr}
   82202:	b088      	sub	sp, #32
   82204:	af00      	add	r7, sp, #0
   82206:	60f8      	str	r0, [r7, #12]
   82208:	60b9      	str	r1, [r7, #8]
   8220a:	4613      	mov	r3, r2
   8220c:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   8220e:	2300      	movs	r3, #0
   82210:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   82212:	68fb      	ldr	r3, [r7, #12]
   82214:	2b00      	cmp	r3, #0
   82216:	d026      	beq.n	82266 <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   82218:	204c      	movs	r0, #76	; 0x4c
   8221a:	4b18      	ldr	r3, [pc, #96]	; (8227c <xQueueGenericCreate+0x7c>)
   8221c:	4798      	blx	r3
   8221e:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   82220:	69bb      	ldr	r3, [r7, #24]
   82222:	2b00      	cmp	r3, #0
   82224:	d01f      	beq.n	82266 <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82226:	68fb      	ldr	r3, [r7, #12]
   82228:	68ba      	ldr	r2, [r7, #8]
   8222a:	fb02 f303 	mul.w	r3, r2, r3
   8222e:	3301      	adds	r3, #1
   82230:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   82232:	6978      	ldr	r0, [r7, #20]
   82234:	4b11      	ldr	r3, [pc, #68]	; (8227c <xQueueGenericCreate+0x7c>)
   82236:	4798      	blx	r3
   82238:	4602      	mov	r2, r0
   8223a:	69bb      	ldr	r3, [r7, #24]
   8223c:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   8223e:	69bb      	ldr	r3, [r7, #24]
   82240:	681b      	ldr	r3, [r3, #0]
   82242:	2b00      	cmp	r3, #0
   82244:	d00c      	beq.n	82260 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   82246:	69bb      	ldr	r3, [r7, #24]
   82248:	68fa      	ldr	r2, [r7, #12]
   8224a:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8224c:	69bb      	ldr	r3, [r7, #24]
   8224e:	68ba      	ldr	r2, [r7, #8]
   82250:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   82252:	69b8      	ldr	r0, [r7, #24]
   82254:	2101      	movs	r1, #1
   82256:	4b0a      	ldr	r3, [pc, #40]	; (82280 <xQueueGenericCreate+0x80>)
   82258:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   8225a:	69bb      	ldr	r3, [r7, #24]
   8225c:	61fb      	str	r3, [r7, #28]
   8225e:	e002      	b.n	82266 <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   82260:	69b8      	ldr	r0, [r7, #24]
   82262:	4b08      	ldr	r3, [pc, #32]	; (82284 <xQueueGenericCreate+0x84>)
   82264:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   82266:	69fb      	ldr	r3, [r7, #28]
   82268:	2b00      	cmp	r3, #0
   8226a:	d102      	bne.n	82272 <xQueueGenericCreate+0x72>
   8226c:	4b06      	ldr	r3, [pc, #24]	; (82288 <xQueueGenericCreate+0x88>)
   8226e:	4798      	blx	r3
   82270:	e7fe      	b.n	82270 <xQueueGenericCreate+0x70>

	return xReturn;
   82272:	69fb      	ldr	r3, [r7, #28]
}
   82274:	4618      	mov	r0, r3
   82276:	3720      	adds	r7, #32
   82278:	46bd      	mov	sp, r7
   8227a:	bd80      	pop	{r7, pc}
   8227c:	00081da9 	.word	0x00081da9
   82280:	00082139 	.word	0x00082139
   82284:	00081f21 	.word	0x00081f21
   82288:	00081c85 	.word	0x00081c85

0008228c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   8228c:	b580      	push	{r7, lr}
   8228e:	b08a      	sub	sp, #40	; 0x28
   82290:	af00      	add	r7, sp, #0
   82292:	60f8      	str	r0, [r7, #12]
   82294:	60b9      	str	r1, [r7, #8]
   82296:	607a      	str	r2, [r7, #4]
   82298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   8229a:	2300      	movs	r3, #0
   8229c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8229e:	68fb      	ldr	r3, [r7, #12]
   822a0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   822a2:	6a3b      	ldr	r3, [r7, #32]
   822a4:	2b00      	cmp	r3, #0
   822a6:	d102      	bne.n	822ae <xQueueGenericSend+0x22>
   822a8:	4b5b      	ldr	r3, [pc, #364]	; (82418 <xQueueGenericSend+0x18c>)
   822aa:	4798      	blx	r3
   822ac:	e7fe      	b.n	822ac <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   822ae:	68bb      	ldr	r3, [r7, #8]
   822b0:	2b00      	cmp	r3, #0
   822b2:	d103      	bne.n	822bc <xQueueGenericSend+0x30>
   822b4:	6a3b      	ldr	r3, [r7, #32]
   822b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   822b8:	2b00      	cmp	r3, #0
   822ba:	d101      	bne.n	822c0 <xQueueGenericSend+0x34>
   822bc:	2301      	movs	r3, #1
   822be:	e000      	b.n	822c2 <xQueueGenericSend+0x36>
   822c0:	2300      	movs	r3, #0
   822c2:	2b00      	cmp	r3, #0
   822c4:	d102      	bne.n	822cc <xQueueGenericSend+0x40>
   822c6:	4b54      	ldr	r3, [pc, #336]	; (82418 <xQueueGenericSend+0x18c>)
   822c8:	4798      	blx	r3
   822ca:	e7fe      	b.n	822ca <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   822cc:	683b      	ldr	r3, [r7, #0]
   822ce:	2b02      	cmp	r3, #2
   822d0:	d103      	bne.n	822da <xQueueGenericSend+0x4e>
   822d2:	6a3b      	ldr	r3, [r7, #32]
   822d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   822d6:	2b01      	cmp	r3, #1
   822d8:	d101      	bne.n	822de <xQueueGenericSend+0x52>
   822da:	2301      	movs	r3, #1
   822dc:	e000      	b.n	822e0 <xQueueGenericSend+0x54>
   822de:	2300      	movs	r3, #0
   822e0:	2b00      	cmp	r3, #0
   822e2:	d102      	bne.n	822ea <xQueueGenericSend+0x5e>
   822e4:	4b4c      	ldr	r3, [pc, #304]	; (82418 <xQueueGenericSend+0x18c>)
   822e6:	4798      	blx	r3
   822e8:	e7fe      	b.n	822e8 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   822ea:	4b4c      	ldr	r3, [pc, #304]	; (8241c <xQueueGenericSend+0x190>)
   822ec:	4798      	blx	r3
   822ee:	4603      	mov	r3, r0
   822f0:	2b00      	cmp	r3, #0
   822f2:	d102      	bne.n	822fa <xQueueGenericSend+0x6e>
   822f4:	687b      	ldr	r3, [r7, #4]
   822f6:	2b00      	cmp	r3, #0
   822f8:	d101      	bne.n	822fe <xQueueGenericSend+0x72>
   822fa:	2301      	movs	r3, #1
   822fc:	e000      	b.n	82300 <xQueueGenericSend+0x74>
   822fe:	2300      	movs	r3, #0
   82300:	2b00      	cmp	r3, #0
   82302:	d102      	bne.n	8230a <xQueueGenericSend+0x7e>
   82304:	4b44      	ldr	r3, [pc, #272]	; (82418 <xQueueGenericSend+0x18c>)
   82306:	4798      	blx	r3
   82308:	e7fe      	b.n	82308 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   8230a:	4b45      	ldr	r3, [pc, #276]	; (82420 <xQueueGenericSend+0x194>)
   8230c:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   8230e:	6a3b      	ldr	r3, [r7, #32]
   82310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82312:	6a3b      	ldr	r3, [r7, #32]
   82314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82316:	429a      	cmp	r2, r3
   82318:	d302      	bcc.n	82320 <xQueueGenericSend+0x94>
   8231a:	683b      	ldr	r3, [r7, #0]
   8231c:	2b02      	cmp	r3, #2
   8231e:	d11d      	bne.n	8235c <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   82320:	6a38      	ldr	r0, [r7, #32]
   82322:	68b9      	ldr	r1, [r7, #8]
   82324:	683a      	ldr	r2, [r7, #0]
   82326:	4b3f      	ldr	r3, [pc, #252]	; (82424 <xQueueGenericSend+0x198>)
   82328:	4798      	blx	r3
   8232a:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8232c:	6a3b      	ldr	r3, [r7, #32]
   8232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82330:	2b00      	cmp	r3, #0
   82332:	d00a      	beq.n	8234a <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   82334:	6a3b      	ldr	r3, [r7, #32]
   82336:	3324      	adds	r3, #36	; 0x24
   82338:	4618      	mov	r0, r3
   8233a:	4b3b      	ldr	r3, [pc, #236]	; (82428 <xQueueGenericSend+0x19c>)
   8233c:	4798      	blx	r3
   8233e:	4603      	mov	r3, r0
   82340:	2b01      	cmp	r3, #1
   82342:	d107      	bne.n	82354 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   82344:	4b39      	ldr	r3, [pc, #228]	; (8242c <xQueueGenericSend+0x1a0>)
   82346:	4798      	blx	r3
   82348:	e004      	b.n	82354 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   8234a:	69fb      	ldr	r3, [r7, #28]
   8234c:	2b00      	cmp	r3, #0
   8234e:	d001      	beq.n	82354 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   82350:	4b36      	ldr	r3, [pc, #216]	; (8242c <xQueueGenericSend+0x1a0>)
   82352:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   82354:	4b36      	ldr	r3, [pc, #216]	; (82430 <xQueueGenericSend+0x1a4>)
   82356:	4798      	blx	r3
				return pdPASS;
   82358:	2301      	movs	r3, #1
   8235a:	e059      	b.n	82410 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   8235c:	687b      	ldr	r3, [r7, #4]
   8235e:	2b00      	cmp	r3, #0
   82360:	d103      	bne.n	8236a <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82362:	4b33      	ldr	r3, [pc, #204]	; (82430 <xQueueGenericSend+0x1a4>)
   82364:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   82366:	2300      	movs	r3, #0
   82368:	e052      	b.n	82410 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   8236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8236c:	2b00      	cmp	r3, #0
   8236e:	d106      	bne.n	8237e <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82370:	f107 0314 	add.w	r3, r7, #20
   82374:	4618      	mov	r0, r3
   82376:	4b2f      	ldr	r3, [pc, #188]	; (82434 <xQueueGenericSend+0x1a8>)
   82378:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8237a:	2301      	movs	r3, #1
   8237c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   8237e:	4b2c      	ldr	r3, [pc, #176]	; (82430 <xQueueGenericSend+0x1a4>)
   82380:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82382:	4b2d      	ldr	r3, [pc, #180]	; (82438 <xQueueGenericSend+0x1ac>)
   82384:	4798      	blx	r3
		prvLockQueue( pxQueue );
   82386:	4b26      	ldr	r3, [pc, #152]	; (82420 <xQueueGenericSend+0x194>)
   82388:	4798      	blx	r3
   8238a:	6a3b      	ldr	r3, [r7, #32]
   8238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8238e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82392:	d102      	bne.n	8239a <xQueueGenericSend+0x10e>
   82394:	6a3b      	ldr	r3, [r7, #32]
   82396:	2200      	movs	r2, #0
   82398:	645a      	str	r2, [r3, #68]	; 0x44
   8239a:	6a3b      	ldr	r3, [r7, #32]
   8239c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   8239e:	f1b3 3fff 	cmp.w	r3, #4294967295
   823a2:	d102      	bne.n	823aa <xQueueGenericSend+0x11e>
   823a4:	6a3b      	ldr	r3, [r7, #32]
   823a6:	2200      	movs	r2, #0
   823a8:	649a      	str	r2, [r3, #72]	; 0x48
   823aa:	4b21      	ldr	r3, [pc, #132]	; (82430 <xQueueGenericSend+0x1a4>)
   823ac:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   823ae:	f107 0214 	add.w	r2, r7, #20
   823b2:	1d3b      	adds	r3, r7, #4
   823b4:	4610      	mov	r0, r2
   823b6:	4619      	mov	r1, r3
   823b8:	4b20      	ldr	r3, [pc, #128]	; (8243c <xQueueGenericSend+0x1b0>)
   823ba:	4798      	blx	r3
   823bc:	4603      	mov	r3, r0
   823be:	2b00      	cmp	r3, #0
   823c0:	d11e      	bne.n	82400 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   823c2:	6a38      	ldr	r0, [r7, #32]
   823c4:	4b1e      	ldr	r3, [pc, #120]	; (82440 <xQueueGenericSend+0x1b4>)
   823c6:	4798      	blx	r3
   823c8:	4603      	mov	r3, r0
   823ca:	2b00      	cmp	r3, #0
   823cc:	d012      	beq.n	823f4 <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   823ce:	6a3b      	ldr	r3, [r7, #32]
   823d0:	f103 0210 	add.w	r2, r3, #16
   823d4:	687b      	ldr	r3, [r7, #4]
   823d6:	4610      	mov	r0, r2
   823d8:	4619      	mov	r1, r3
   823da:	4b1a      	ldr	r3, [pc, #104]	; (82444 <xQueueGenericSend+0x1b8>)
   823dc:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   823de:	6a38      	ldr	r0, [r7, #32]
   823e0:	4b19      	ldr	r3, [pc, #100]	; (82448 <xQueueGenericSend+0x1bc>)
   823e2:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   823e4:	4b19      	ldr	r3, [pc, #100]	; (8244c <xQueueGenericSend+0x1c0>)
   823e6:	4798      	blx	r3
   823e8:	4603      	mov	r3, r0
   823ea:	2b00      	cmp	r3, #0
   823ec:	d10f      	bne.n	8240e <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   823ee:	4b0f      	ldr	r3, [pc, #60]	; (8242c <xQueueGenericSend+0x1a0>)
   823f0:	4798      	blx	r3
   823f2:	e00c      	b.n	8240e <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   823f4:	6a38      	ldr	r0, [r7, #32]
   823f6:	4b14      	ldr	r3, [pc, #80]	; (82448 <xQueueGenericSend+0x1bc>)
   823f8:	4798      	blx	r3
				( void ) xTaskResumeAll();
   823fa:	4b14      	ldr	r3, [pc, #80]	; (8244c <xQueueGenericSend+0x1c0>)
   823fc:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   823fe:	e784      	b.n	8230a <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   82400:	6a38      	ldr	r0, [r7, #32]
   82402:	4b11      	ldr	r3, [pc, #68]	; (82448 <xQueueGenericSend+0x1bc>)
   82404:	4798      	blx	r3
			( void ) xTaskResumeAll();
   82406:	4b11      	ldr	r3, [pc, #68]	; (8244c <xQueueGenericSend+0x1c0>)
   82408:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8240a:	2300      	movs	r3, #0
   8240c:	e000      	b.n	82410 <xQueueGenericSend+0x184>
		}
	}
   8240e:	e77c      	b.n	8230a <xQueueGenericSend+0x7e>
}
   82410:	4618      	mov	r0, r3
   82412:	3728      	adds	r7, #40	; 0x28
   82414:	46bd      	mov	sp, r7
   82416:	bd80      	pop	{r7, pc}
   82418:	00081c85 	.word	0x00081c85
   8241c:	00083799 	.word	0x00083799
   82420:	00081c09 	.word	0x00081c09
   82424:	00082811 	.word	0x00082811
   82428:	000832c1 	.word	0x000832c1
   8242c:	00081be9 	.word	0x00081be9
   82430:	00081c4d 	.word	0x00081c4d
   82434:	00083381 	.word	0x00083381
   82438:	00082dbd 	.word	0x00082dbd
   8243c:	000833b9 	.word	0x000833b9
   82440:	00082a21 	.word	0x00082a21
   82444:	000831a1 	.word	0x000831a1
   82448:	00082945 	.word	0x00082945
   8244c:	00082dd9 	.word	0x00082dd9

00082450 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   82450:	b580      	push	{r7, lr}
   82452:	b088      	sub	sp, #32
   82454:	af00      	add	r7, sp, #0
   82456:	60f8      	str	r0, [r7, #12]
   82458:	60b9      	str	r1, [r7, #8]
   8245a:	607a      	str	r2, [r7, #4]
   8245c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8245e:	68fb      	ldr	r3, [r7, #12]
   82460:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   82462:	69bb      	ldr	r3, [r7, #24]
   82464:	2b00      	cmp	r3, #0
   82466:	d102      	bne.n	8246e <xQueueGenericSendFromISR+0x1e>
   82468:	4b33      	ldr	r3, [pc, #204]	; (82538 <xQueueGenericSendFromISR+0xe8>)
   8246a:	4798      	blx	r3
   8246c:	e7fe      	b.n	8246c <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8246e:	68bb      	ldr	r3, [r7, #8]
   82470:	2b00      	cmp	r3, #0
   82472:	d103      	bne.n	8247c <xQueueGenericSendFromISR+0x2c>
   82474:	69bb      	ldr	r3, [r7, #24]
   82476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82478:	2b00      	cmp	r3, #0
   8247a:	d101      	bne.n	82480 <xQueueGenericSendFromISR+0x30>
   8247c:	2301      	movs	r3, #1
   8247e:	e000      	b.n	82482 <xQueueGenericSendFromISR+0x32>
   82480:	2300      	movs	r3, #0
   82482:	2b00      	cmp	r3, #0
   82484:	d102      	bne.n	8248c <xQueueGenericSendFromISR+0x3c>
   82486:	4b2c      	ldr	r3, [pc, #176]	; (82538 <xQueueGenericSendFromISR+0xe8>)
   82488:	4798      	blx	r3
   8248a:	e7fe      	b.n	8248a <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   8248c:	683b      	ldr	r3, [r7, #0]
   8248e:	2b02      	cmp	r3, #2
   82490:	d103      	bne.n	8249a <xQueueGenericSendFromISR+0x4a>
   82492:	69bb      	ldr	r3, [r7, #24]
   82494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82496:	2b01      	cmp	r3, #1
   82498:	d101      	bne.n	8249e <xQueueGenericSendFromISR+0x4e>
   8249a:	2301      	movs	r3, #1
   8249c:	e000      	b.n	824a0 <xQueueGenericSendFromISR+0x50>
   8249e:	2300      	movs	r3, #0
   824a0:	2b00      	cmp	r3, #0
   824a2:	d102      	bne.n	824aa <xQueueGenericSendFromISR+0x5a>
   824a4:	4b24      	ldr	r3, [pc, #144]	; (82538 <xQueueGenericSendFromISR+0xe8>)
   824a6:	4798      	blx	r3
   824a8:	e7fe      	b.n	824a8 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   824aa:	4b24      	ldr	r3, [pc, #144]	; (8253c <xQueueGenericSendFromISR+0xec>)
   824ac:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   824ae:	4b22      	ldr	r3, [pc, #136]	; (82538 <xQueueGenericSendFromISR+0xe8>)
   824b0:	4798      	blx	r3
   824b2:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   824b4:	69bb      	ldr	r3, [r7, #24]
   824b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   824b8:	69bb      	ldr	r3, [r7, #24]
   824ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   824bc:	429a      	cmp	r2, r3
   824be:	d302      	bcc.n	824c6 <xQueueGenericSendFromISR+0x76>
   824c0:	683b      	ldr	r3, [r7, #0]
   824c2:	2b02      	cmp	r3, #2
   824c4:	d12d      	bne.n	82522 <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   824c6:	69b8      	ldr	r0, [r7, #24]
   824c8:	68b9      	ldr	r1, [r7, #8]
   824ca:	683a      	ldr	r2, [r7, #0]
   824cc:	4b1c      	ldr	r3, [pc, #112]	; (82540 <xQueueGenericSendFromISR+0xf0>)
   824ce:	4798      	blx	r3
   824d0:	4603      	mov	r3, r0
   824d2:	2b00      	cmp	r3, #0
   824d4:	d005      	beq.n	824e2 <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   824d6:	687b      	ldr	r3, [r7, #4]
   824d8:	2b00      	cmp	r3, #0
   824da:	d002      	beq.n	824e2 <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   824dc:	687b      	ldr	r3, [r7, #4]
   824de:	2201      	movs	r2, #1
   824e0:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   824e2:	69bb      	ldr	r3, [r7, #24]
   824e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   824e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   824ea:	d112      	bne.n	82512 <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   824ec:	69bb      	ldr	r3, [r7, #24]
   824ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   824f0:	2b00      	cmp	r3, #0
   824f2:	d013      	beq.n	8251c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   824f4:	69bb      	ldr	r3, [r7, #24]
   824f6:	3324      	adds	r3, #36	; 0x24
   824f8:	4618      	mov	r0, r3
   824fa:	4b12      	ldr	r3, [pc, #72]	; (82544 <xQueueGenericSendFromISR+0xf4>)
   824fc:	4798      	blx	r3
   824fe:	4603      	mov	r3, r0
   82500:	2b00      	cmp	r3, #0
   82502:	d00b      	beq.n	8251c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   82504:	687b      	ldr	r3, [r7, #4]
   82506:	2b00      	cmp	r3, #0
   82508:	d008      	beq.n	8251c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   8250a:	687b      	ldr	r3, [r7, #4]
   8250c:	2201      	movs	r2, #1
   8250e:	601a      	str	r2, [r3, #0]
   82510:	e004      	b.n	8251c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   82512:	69bb      	ldr	r3, [r7, #24]
   82514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82516:	1c5a      	adds	r2, r3, #1
   82518:	69bb      	ldr	r3, [r7, #24]
   8251a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   8251c:	2301      	movs	r3, #1
   8251e:	61fb      	str	r3, [r7, #28]
   82520:	e001      	b.n	82526 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   82522:	2300      	movs	r3, #0
   82524:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   82526:	6978      	ldr	r0, [r7, #20]
   82528:	4b07      	ldr	r3, [pc, #28]	; (82548 <xQueueGenericSendFromISR+0xf8>)
   8252a:	4798      	blx	r3

	return xReturn;
   8252c:	69fb      	ldr	r3, [r7, #28]
}
   8252e:	4618      	mov	r0, r3
   82530:	3720      	adds	r7, #32
   82532:	46bd      	mov	sp, r7
   82534:	bd80      	pop	{r7, pc}
   82536:	bf00      	nop
   82538:	00081c85 	.word	0x00081c85
   8253c:	00081d4d 	.word	0x00081d4d
   82540:	00082811 	.word	0x00082811
   82544:	000832c1 	.word	0x000832c1
   82548:	00081c99 	.word	0x00081c99

0008254c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   8254c:	b580      	push	{r7, lr}
   8254e:	b08a      	sub	sp, #40	; 0x28
   82550:	af00      	add	r7, sp, #0
   82552:	60f8      	str	r0, [r7, #12]
   82554:	60b9      	str	r1, [r7, #8]
   82556:	607a      	str	r2, [r7, #4]
   82558:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   8255a:	2300      	movs	r3, #0
   8255c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8255e:	68fb      	ldr	r3, [r7, #12]
   82560:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   82562:	6a3b      	ldr	r3, [r7, #32]
   82564:	2b00      	cmp	r3, #0
   82566:	d102      	bne.n	8256e <xQueueGenericReceive+0x22>
   82568:	4b67      	ldr	r3, [pc, #412]	; (82708 <xQueueGenericReceive+0x1bc>)
   8256a:	4798      	blx	r3
   8256c:	e7fe      	b.n	8256c <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   8256e:	68bb      	ldr	r3, [r7, #8]
   82570:	2b00      	cmp	r3, #0
   82572:	d103      	bne.n	8257c <xQueueGenericReceive+0x30>
   82574:	6a3b      	ldr	r3, [r7, #32]
   82576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82578:	2b00      	cmp	r3, #0
   8257a:	d101      	bne.n	82580 <xQueueGenericReceive+0x34>
   8257c:	2301      	movs	r3, #1
   8257e:	e000      	b.n	82582 <xQueueGenericReceive+0x36>
   82580:	2300      	movs	r3, #0
   82582:	2b00      	cmp	r3, #0
   82584:	d102      	bne.n	8258c <xQueueGenericReceive+0x40>
   82586:	4b60      	ldr	r3, [pc, #384]	; (82708 <xQueueGenericReceive+0x1bc>)
   82588:	4798      	blx	r3
   8258a:	e7fe      	b.n	8258a <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   8258c:	4b5f      	ldr	r3, [pc, #380]	; (8270c <xQueueGenericReceive+0x1c0>)
   8258e:	4798      	blx	r3
   82590:	4603      	mov	r3, r0
   82592:	2b00      	cmp	r3, #0
   82594:	d102      	bne.n	8259c <xQueueGenericReceive+0x50>
   82596:	687b      	ldr	r3, [r7, #4]
   82598:	2b00      	cmp	r3, #0
   8259a:	d101      	bne.n	825a0 <xQueueGenericReceive+0x54>
   8259c:	2301      	movs	r3, #1
   8259e:	e000      	b.n	825a2 <xQueueGenericReceive+0x56>
   825a0:	2300      	movs	r3, #0
   825a2:	2b00      	cmp	r3, #0
   825a4:	d102      	bne.n	825ac <xQueueGenericReceive+0x60>
   825a6:	4b58      	ldr	r3, [pc, #352]	; (82708 <xQueueGenericReceive+0x1bc>)
   825a8:	4798      	blx	r3
   825aa:	e7fe      	b.n	825aa <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   825ac:	4b58      	ldr	r3, [pc, #352]	; (82710 <xQueueGenericReceive+0x1c4>)
   825ae:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   825b0:	6a3b      	ldr	r3, [r7, #32]
   825b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   825b4:	2b00      	cmp	r3, #0
   825b6:	d03b      	beq.n	82630 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   825b8:	6a3b      	ldr	r3, [r7, #32]
   825ba:	68db      	ldr	r3, [r3, #12]
   825bc:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   825be:	6a38      	ldr	r0, [r7, #32]
   825c0:	68b9      	ldr	r1, [r7, #8]
   825c2:	4b54      	ldr	r3, [pc, #336]	; (82714 <xQueueGenericReceive+0x1c8>)
   825c4:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   825c6:	683b      	ldr	r3, [r7, #0]
   825c8:	2b00      	cmp	r3, #0
   825ca:	d11c      	bne.n	82606 <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   825cc:	6a3b      	ldr	r3, [r7, #32]
   825ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   825d0:	1e5a      	subs	r2, r3, #1
   825d2:	6a3b      	ldr	r3, [r7, #32]
   825d4:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   825d6:	6a3b      	ldr	r3, [r7, #32]
   825d8:	681b      	ldr	r3, [r3, #0]
   825da:	2b00      	cmp	r3, #0
   825dc:	d104      	bne.n	825e8 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   825de:	4b4e      	ldr	r3, [pc, #312]	; (82718 <xQueueGenericReceive+0x1cc>)
   825e0:	4798      	blx	r3
   825e2:	4602      	mov	r2, r0
   825e4:	6a3b      	ldr	r3, [r7, #32]
   825e6:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   825e8:	6a3b      	ldr	r3, [r7, #32]
   825ea:	691b      	ldr	r3, [r3, #16]
   825ec:	2b00      	cmp	r3, #0
   825ee:	d01b      	beq.n	82628 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   825f0:	6a3b      	ldr	r3, [r7, #32]
   825f2:	3310      	adds	r3, #16
   825f4:	4618      	mov	r0, r3
   825f6:	4b49      	ldr	r3, [pc, #292]	; (8271c <xQueueGenericReceive+0x1d0>)
   825f8:	4798      	blx	r3
   825fa:	4603      	mov	r3, r0
   825fc:	2b01      	cmp	r3, #1
   825fe:	d113      	bne.n	82628 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   82600:	4b47      	ldr	r3, [pc, #284]	; (82720 <xQueueGenericReceive+0x1d4>)
   82602:	4798      	blx	r3
   82604:	e010      	b.n	82628 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   82606:	6a3b      	ldr	r3, [r7, #32]
   82608:	69fa      	ldr	r2, [r7, #28]
   8260a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8260c:	6a3b      	ldr	r3, [r7, #32]
   8260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82610:	2b00      	cmp	r3, #0
   82612:	d009      	beq.n	82628 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   82614:	6a3b      	ldr	r3, [r7, #32]
   82616:	3324      	adds	r3, #36	; 0x24
   82618:	4618      	mov	r0, r3
   8261a:	4b40      	ldr	r3, [pc, #256]	; (8271c <xQueueGenericReceive+0x1d0>)
   8261c:	4798      	blx	r3
   8261e:	4603      	mov	r3, r0
   82620:	2b00      	cmp	r3, #0
   82622:	d001      	beq.n	82628 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   82624:	4b3e      	ldr	r3, [pc, #248]	; (82720 <xQueueGenericReceive+0x1d4>)
   82626:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   82628:	4b3e      	ldr	r3, [pc, #248]	; (82724 <xQueueGenericReceive+0x1d8>)
   8262a:	4798      	blx	r3
				return pdPASS;
   8262c:	2301      	movs	r3, #1
   8262e:	e066      	b.n	826fe <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   82630:	687b      	ldr	r3, [r7, #4]
   82632:	2b00      	cmp	r3, #0
   82634:	d103      	bne.n	8263e <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   82636:	4b3b      	ldr	r3, [pc, #236]	; (82724 <xQueueGenericReceive+0x1d8>)
   82638:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   8263a:	2300      	movs	r3, #0
   8263c:	e05f      	b.n	826fe <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   8263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82640:	2b00      	cmp	r3, #0
   82642:	d106      	bne.n	82652 <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   82644:	f107 0314 	add.w	r3, r7, #20
   82648:	4618      	mov	r0, r3
   8264a:	4b37      	ldr	r3, [pc, #220]	; (82728 <xQueueGenericReceive+0x1dc>)
   8264c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8264e:	2301      	movs	r3, #1
   82650:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   82652:	4b34      	ldr	r3, [pc, #208]	; (82724 <xQueueGenericReceive+0x1d8>)
   82654:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   82656:	4b35      	ldr	r3, [pc, #212]	; (8272c <xQueueGenericReceive+0x1e0>)
   82658:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8265a:	4b2d      	ldr	r3, [pc, #180]	; (82710 <xQueueGenericReceive+0x1c4>)
   8265c:	4798      	blx	r3
   8265e:	6a3b      	ldr	r3, [r7, #32]
   82660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82662:	f1b3 3fff 	cmp.w	r3, #4294967295
   82666:	d102      	bne.n	8266e <xQueueGenericReceive+0x122>
   82668:	6a3b      	ldr	r3, [r7, #32]
   8266a:	2200      	movs	r2, #0
   8266c:	645a      	str	r2, [r3, #68]	; 0x44
   8266e:	6a3b      	ldr	r3, [r7, #32]
   82670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82672:	f1b3 3fff 	cmp.w	r3, #4294967295
   82676:	d102      	bne.n	8267e <xQueueGenericReceive+0x132>
   82678:	6a3b      	ldr	r3, [r7, #32]
   8267a:	2200      	movs	r2, #0
   8267c:	649a      	str	r2, [r3, #72]	; 0x48
   8267e:	4b29      	ldr	r3, [pc, #164]	; (82724 <xQueueGenericReceive+0x1d8>)
   82680:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   82682:	f107 0214 	add.w	r2, r7, #20
   82686:	1d3b      	adds	r3, r7, #4
   82688:	4610      	mov	r0, r2
   8268a:	4619      	mov	r1, r3
   8268c:	4b28      	ldr	r3, [pc, #160]	; (82730 <xQueueGenericReceive+0x1e4>)
   8268e:	4798      	blx	r3
   82690:	4603      	mov	r3, r0
   82692:	2b00      	cmp	r3, #0
   82694:	d12b      	bne.n	826ee <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   82696:	6a38      	ldr	r0, [r7, #32]
   82698:	4b26      	ldr	r3, [pc, #152]	; (82734 <xQueueGenericReceive+0x1e8>)
   8269a:	4798      	blx	r3
   8269c:	4603      	mov	r3, r0
   8269e:	2b00      	cmp	r3, #0
   826a0:	d01f      	beq.n	826e2 <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   826a2:	6a3b      	ldr	r3, [r7, #32]
   826a4:	681b      	ldr	r3, [r3, #0]
   826a6:	2b00      	cmp	r3, #0
   826a8:	d108      	bne.n	826bc <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   826aa:	4b19      	ldr	r3, [pc, #100]	; (82710 <xQueueGenericReceive+0x1c4>)
   826ac:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   826ae:	6a3b      	ldr	r3, [r7, #32]
   826b0:	685b      	ldr	r3, [r3, #4]
   826b2:	4618      	mov	r0, r3
   826b4:	4b20      	ldr	r3, [pc, #128]	; (82738 <xQueueGenericReceive+0x1ec>)
   826b6:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   826b8:	4b1a      	ldr	r3, [pc, #104]	; (82724 <xQueueGenericReceive+0x1d8>)
   826ba:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   826bc:	6a3b      	ldr	r3, [r7, #32]
   826be:	f103 0224 	add.w	r2, r3, #36	; 0x24
   826c2:	687b      	ldr	r3, [r7, #4]
   826c4:	4610      	mov	r0, r2
   826c6:	4619      	mov	r1, r3
   826c8:	4b1c      	ldr	r3, [pc, #112]	; (8273c <xQueueGenericReceive+0x1f0>)
   826ca:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   826cc:	6a38      	ldr	r0, [r7, #32]
   826ce:	4b1c      	ldr	r3, [pc, #112]	; (82740 <xQueueGenericReceive+0x1f4>)
   826d0:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   826d2:	4b1c      	ldr	r3, [pc, #112]	; (82744 <xQueueGenericReceive+0x1f8>)
   826d4:	4798      	blx	r3
   826d6:	4603      	mov	r3, r0
   826d8:	2b00      	cmp	r3, #0
   826da:	d10f      	bne.n	826fc <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   826dc:	4b10      	ldr	r3, [pc, #64]	; (82720 <xQueueGenericReceive+0x1d4>)
   826de:	4798      	blx	r3
   826e0:	e00c      	b.n	826fc <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   826e2:	6a38      	ldr	r0, [r7, #32]
   826e4:	4b16      	ldr	r3, [pc, #88]	; (82740 <xQueueGenericReceive+0x1f4>)
   826e6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   826e8:	4b16      	ldr	r3, [pc, #88]	; (82744 <xQueueGenericReceive+0x1f8>)
   826ea:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   826ec:	e75e      	b.n	825ac <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   826ee:	6a38      	ldr	r0, [r7, #32]
   826f0:	4b13      	ldr	r3, [pc, #76]	; (82740 <xQueueGenericReceive+0x1f4>)
   826f2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   826f4:	4b13      	ldr	r3, [pc, #76]	; (82744 <xQueueGenericReceive+0x1f8>)
   826f6:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   826f8:	2300      	movs	r3, #0
   826fa:	e000      	b.n	826fe <xQueueGenericReceive+0x1b2>
		}
	}
   826fc:	e756      	b.n	825ac <xQueueGenericReceive+0x60>
}
   826fe:	4618      	mov	r0, r3
   82700:	3728      	adds	r7, #40	; 0x28
   82702:	46bd      	mov	sp, r7
   82704:	bd80      	pop	{r7, pc}
   82706:	bf00      	nop
   82708:	00081c85 	.word	0x00081c85
   8270c:	00083799 	.word	0x00083799
   82710:	00081c09 	.word	0x00081c09
   82714:	000828f5 	.word	0x000828f5
   82718:	000839ad 	.word	0x000839ad
   8271c:	000832c1 	.word	0x000832c1
   82720:	00081be9 	.word	0x00081be9
   82724:	00081c4d 	.word	0x00081c4d
   82728:	00083381 	.word	0x00083381
   8272c:	00082dbd 	.word	0x00082dbd
   82730:	000833b9 	.word	0x000833b9
   82734:	000829ed 	.word	0x000829ed
   82738:	000837d5 	.word	0x000837d5
   8273c:	000831a1 	.word	0x000831a1
   82740:	00082945 	.word	0x00082945
   82744:	00082dd9 	.word	0x00082dd9

00082748 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
   82748:	b580      	push	{r7, lr}
   8274a:	b088      	sub	sp, #32
   8274c:	af00      	add	r7, sp, #0
   8274e:	60f8      	str	r0, [r7, #12]
   82750:	60b9      	str	r1, [r7, #8]
   82752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82754:	68fb      	ldr	r3, [r7, #12]
   82756:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   82758:	69bb      	ldr	r3, [r7, #24]
   8275a:	2b00      	cmp	r3, #0
   8275c:	d102      	bne.n	82764 <xQueueReceiveFromISR+0x1c>
   8275e:	4b27      	ldr	r3, [pc, #156]	; (827fc <xQueueReceiveFromISR+0xb4>)
   82760:	4798      	blx	r3
   82762:	e7fe      	b.n	82762 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   82764:	68bb      	ldr	r3, [r7, #8]
   82766:	2b00      	cmp	r3, #0
   82768:	d103      	bne.n	82772 <xQueueReceiveFromISR+0x2a>
   8276a:	69bb      	ldr	r3, [r7, #24]
   8276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8276e:	2b00      	cmp	r3, #0
   82770:	d101      	bne.n	82776 <xQueueReceiveFromISR+0x2e>
   82772:	2301      	movs	r3, #1
   82774:	e000      	b.n	82778 <xQueueReceiveFromISR+0x30>
   82776:	2300      	movs	r3, #0
   82778:	2b00      	cmp	r3, #0
   8277a:	d102      	bne.n	82782 <xQueueReceiveFromISR+0x3a>
   8277c:	4b1f      	ldr	r3, [pc, #124]	; (827fc <xQueueReceiveFromISR+0xb4>)
   8277e:	4798      	blx	r3
   82780:	e7fe      	b.n	82780 <xQueueReceiveFromISR+0x38>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   82782:	4b1f      	ldr	r3, [pc, #124]	; (82800 <xQueueReceiveFromISR+0xb8>)
   82784:	4798      	blx	r3

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   82786:	4b1d      	ldr	r3, [pc, #116]	; (827fc <xQueueReceiveFromISR+0xb4>)
   82788:	4798      	blx	r3
   8278a:	6178      	str	r0, [r7, #20]
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   8278c:	69bb      	ldr	r3, [r7, #24]
   8278e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82790:	2b00      	cmp	r3, #0
   82792:	d028      	beq.n	827e6 <xQueueReceiveFromISR+0x9e>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
   82794:	69b8      	ldr	r0, [r7, #24]
   82796:	68b9      	ldr	r1, [r7, #8]
   82798:	4b1a      	ldr	r3, [pc, #104]	; (82804 <xQueueReceiveFromISR+0xbc>)
   8279a:	4798      	blx	r3
			--( pxQueue->uxMessagesWaiting );
   8279c:	69bb      	ldr	r3, [r7, #24]
   8279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   827a0:	1e5a      	subs	r2, r3, #1
   827a2:	69bb      	ldr	r3, [r7, #24]
   827a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
   827a6:	69bb      	ldr	r3, [r7, #24]
   827a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   827aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   827ae:	d112      	bne.n	827d6 <xQueueReceiveFromISR+0x8e>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   827b0:	69bb      	ldr	r3, [r7, #24]
   827b2:	691b      	ldr	r3, [r3, #16]
   827b4:	2b00      	cmp	r3, #0
   827b6:	d013      	beq.n	827e0 <xQueueReceiveFromISR+0x98>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   827b8:	69bb      	ldr	r3, [r7, #24]
   827ba:	3310      	adds	r3, #16
   827bc:	4618      	mov	r0, r3
   827be:	4b12      	ldr	r3, [pc, #72]	; (82808 <xQueueReceiveFromISR+0xc0>)
   827c0:	4798      	blx	r3
   827c2:	4603      	mov	r3, r0
   827c4:	2b00      	cmp	r3, #0
   827c6:	d00b      	beq.n	827e0 <xQueueReceiveFromISR+0x98>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
   827c8:	687b      	ldr	r3, [r7, #4]
   827ca:	2b00      	cmp	r3, #0
   827cc:	d008      	beq.n	827e0 <xQueueReceiveFromISR+0x98>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   827ce:	687b      	ldr	r3, [r7, #4]
   827d0:	2201      	movs	r2, #1
   827d2:	601a      	str	r2, [r3, #0]
   827d4:	e004      	b.n	827e0 <xQueueReceiveFromISR+0x98>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
   827d6:	69bb      	ldr	r3, [r7, #24]
   827d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   827da:	1c5a      	adds	r2, r3, #1
   827dc:	69bb      	ldr	r3, [r7, #24]
   827de:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
   827e0:	2301      	movs	r3, #1
   827e2:	61fb      	str	r3, [r7, #28]
   827e4:	e001      	b.n	827ea <xQueueReceiveFromISR+0xa2>
		}
		else
		{
			xReturn = pdFAIL;
   827e6:	2300      	movs	r3, #0
   827e8:	61fb      	str	r3, [r7, #28]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   827ea:	6978      	ldr	r0, [r7, #20]
   827ec:	4b07      	ldr	r3, [pc, #28]	; (8280c <xQueueReceiveFromISR+0xc4>)
   827ee:	4798      	blx	r3

	return xReturn;
   827f0:	69fb      	ldr	r3, [r7, #28]
}
   827f2:	4618      	mov	r0, r3
   827f4:	3720      	adds	r7, #32
   827f6:	46bd      	mov	sp, r7
   827f8:	bd80      	pop	{r7, pc}
   827fa:	bf00      	nop
   827fc:	00081c85 	.word	0x00081c85
   82800:	00081d4d 	.word	0x00081d4d
   82804:	000828f5 	.word	0x000828f5
   82808:	000832c1 	.word	0x000832c1
   8280c:	00081c99 	.word	0x00081c99

00082810 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   82810:	b580      	push	{r7, lr}
   82812:	b086      	sub	sp, #24
   82814:	af00      	add	r7, sp, #0
   82816:	60f8      	str	r0, [r7, #12]
   82818:	60b9      	str	r1, [r7, #8]
   8281a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   8281c:	2300      	movs	r3, #0
   8281e:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   82820:	68fb      	ldr	r3, [r7, #12]
   82822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82824:	2b00      	cmp	r3, #0
   82826:	d10d      	bne.n	82844 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   82828:	68fb      	ldr	r3, [r7, #12]
   8282a:	681b      	ldr	r3, [r3, #0]
   8282c:	2b00      	cmp	r3, #0
   8282e:	d152      	bne.n	828d6 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   82830:	68fb      	ldr	r3, [r7, #12]
   82832:	685b      	ldr	r3, [r3, #4]
   82834:	4618      	mov	r0, r3
   82836:	4b2d      	ldr	r3, [pc, #180]	; (828ec <prvCopyDataToQueue+0xdc>)
   82838:	4798      	blx	r3
   8283a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   8283c:	68fb      	ldr	r3, [r7, #12]
   8283e:	2200      	movs	r2, #0
   82840:	605a      	str	r2, [r3, #4]
   82842:	e048      	b.n	828d6 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   82844:	687b      	ldr	r3, [r7, #4]
   82846:	2b00      	cmp	r3, #0
   82848:	d11a      	bne.n	82880 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   8284a:	68fb      	ldr	r3, [r7, #12]
   8284c:	689a      	ldr	r2, [r3, #8]
   8284e:	68fb      	ldr	r3, [r7, #12]
   82850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82852:	4610      	mov	r0, r2
   82854:	68b9      	ldr	r1, [r7, #8]
   82856:	461a      	mov	r2, r3
   82858:	4b25      	ldr	r3, [pc, #148]	; (828f0 <prvCopyDataToQueue+0xe0>)
   8285a:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8285c:	68fb      	ldr	r3, [r7, #12]
   8285e:	689a      	ldr	r2, [r3, #8]
   82860:	68fb      	ldr	r3, [r7, #12]
   82862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82864:	441a      	add	r2, r3
   82866:	68fb      	ldr	r3, [r7, #12]
   82868:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   8286a:	68fb      	ldr	r3, [r7, #12]
   8286c:	689a      	ldr	r2, [r3, #8]
   8286e:	68fb      	ldr	r3, [r7, #12]
   82870:	685b      	ldr	r3, [r3, #4]
   82872:	429a      	cmp	r2, r3
   82874:	d32f      	bcc.n	828d6 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   82876:	68fb      	ldr	r3, [r7, #12]
   82878:	681a      	ldr	r2, [r3, #0]
   8287a:	68fb      	ldr	r3, [r7, #12]
   8287c:	609a      	str	r2, [r3, #8]
   8287e:	e02a      	b.n	828d6 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   82880:	68fb      	ldr	r3, [r7, #12]
   82882:	68da      	ldr	r2, [r3, #12]
   82884:	68fb      	ldr	r3, [r7, #12]
   82886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82888:	4610      	mov	r0, r2
   8288a:	68b9      	ldr	r1, [r7, #8]
   8288c:	461a      	mov	r2, r3
   8288e:	4b18      	ldr	r3, [pc, #96]	; (828f0 <prvCopyDataToQueue+0xe0>)
   82890:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   82892:	68fb      	ldr	r3, [r7, #12]
   82894:	68da      	ldr	r2, [r3, #12]
   82896:	68fb      	ldr	r3, [r7, #12]
   82898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8289a:	425b      	negs	r3, r3
   8289c:	441a      	add	r2, r3
   8289e:	68fb      	ldr	r3, [r7, #12]
   828a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   828a2:	68fb      	ldr	r3, [r7, #12]
   828a4:	68da      	ldr	r2, [r3, #12]
   828a6:	68fb      	ldr	r3, [r7, #12]
   828a8:	681b      	ldr	r3, [r3, #0]
   828aa:	429a      	cmp	r2, r3
   828ac:	d207      	bcs.n	828be <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   828ae:	68fb      	ldr	r3, [r7, #12]
   828b0:	685a      	ldr	r2, [r3, #4]
   828b2:	68fb      	ldr	r3, [r7, #12]
   828b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   828b6:	425b      	negs	r3, r3
   828b8:	441a      	add	r2, r3
   828ba:	68fb      	ldr	r3, [r7, #12]
   828bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   828be:	687b      	ldr	r3, [r7, #4]
   828c0:	2b02      	cmp	r3, #2
   828c2:	d108      	bne.n	828d6 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   828c4:	68fb      	ldr	r3, [r7, #12]
   828c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   828c8:	2b00      	cmp	r3, #0
   828ca:	d004      	beq.n	828d6 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   828cc:	68fb      	ldr	r3, [r7, #12]
   828ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   828d0:	1e5a      	subs	r2, r3, #1
   828d2:	68fb      	ldr	r3, [r7, #12]
   828d4:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   828d6:	68fb      	ldr	r3, [r7, #12]
   828d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   828da:	1c5a      	adds	r2, r3, #1
   828dc:	68fb      	ldr	r3, [r7, #12]
   828de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   828e0:	697b      	ldr	r3, [r7, #20]
}
   828e2:	4618      	mov	r0, r3
   828e4:	3718      	adds	r7, #24
   828e6:	46bd      	mov	sp, r7
   828e8:	bd80      	pop	{r7, pc}
   828ea:	bf00      	nop
   828ec:	000838c9 	.word	0x000838c9
   828f0:	00084af1 	.word	0x00084af1

000828f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   828f4:	b580      	push	{r7, lr}
   828f6:	b082      	sub	sp, #8
   828f8:	af00      	add	r7, sp, #0
   828fa:	6078      	str	r0, [r7, #4]
   828fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   828fe:	687b      	ldr	r3, [r7, #4]
   82900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82902:	2b00      	cmp	r3, #0
   82904:	d019      	beq.n	8293a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   82906:	687b      	ldr	r3, [r7, #4]
   82908:	68da      	ldr	r2, [r3, #12]
   8290a:	687b      	ldr	r3, [r7, #4]
   8290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   8290e:	441a      	add	r2, r3
   82910:	687b      	ldr	r3, [r7, #4]
   82912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   82914:	687b      	ldr	r3, [r7, #4]
   82916:	68da      	ldr	r2, [r3, #12]
   82918:	687b      	ldr	r3, [r7, #4]
   8291a:	685b      	ldr	r3, [r3, #4]
   8291c:	429a      	cmp	r2, r3
   8291e:	d303      	bcc.n	82928 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   82920:	687b      	ldr	r3, [r7, #4]
   82922:	681a      	ldr	r2, [r3, #0]
   82924:	687b      	ldr	r3, [r7, #4]
   82926:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   82928:	687b      	ldr	r3, [r7, #4]
   8292a:	68da      	ldr	r2, [r3, #12]
   8292c:	687b      	ldr	r3, [r7, #4]
   8292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   82930:	6838      	ldr	r0, [r7, #0]
   82932:	4611      	mov	r1, r2
   82934:	461a      	mov	r2, r3
   82936:	4b02      	ldr	r3, [pc, #8]	; (82940 <prvCopyDataFromQueue+0x4c>)
   82938:	4798      	blx	r3
	}
}
   8293a:	3708      	adds	r7, #8
   8293c:	46bd      	mov	sp, r7
   8293e:	bd80      	pop	{r7, pc}
   82940:	00084af1 	.word	0x00084af1

00082944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   82944:	b580      	push	{r7, lr}
   82946:	b082      	sub	sp, #8
   82948:	af00      	add	r7, sp, #0
   8294a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   8294c:	4b23      	ldr	r3, [pc, #140]	; (829dc <prvUnlockQueue+0x98>)
   8294e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   82950:	e014      	b.n	8297c <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   82952:	687b      	ldr	r3, [r7, #4]
   82954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82956:	2b00      	cmp	r3, #0
   82958:	d00a      	beq.n	82970 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8295a:	687b      	ldr	r3, [r7, #4]
   8295c:	3324      	adds	r3, #36	; 0x24
   8295e:	4618      	mov	r0, r3
   82960:	4b1f      	ldr	r3, [pc, #124]	; (829e0 <prvUnlockQueue+0x9c>)
   82962:	4798      	blx	r3
   82964:	4603      	mov	r3, r0
   82966:	2b00      	cmp	r3, #0
   82968:	d003      	beq.n	82972 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   8296a:	4b1e      	ldr	r3, [pc, #120]	; (829e4 <prvUnlockQueue+0xa0>)
   8296c:	4798      	blx	r3
   8296e:	e000      	b.n	82972 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   82970:	e008      	b.n	82984 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   82972:	687b      	ldr	r3, [r7, #4]
   82974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82976:	1e5a      	subs	r2, r3, #1
   82978:	687b      	ldr	r3, [r7, #4]
   8297a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8297c:	687b      	ldr	r3, [r7, #4]
   8297e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82980:	2b00      	cmp	r3, #0
   82982:	dce6      	bgt.n	82952 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   82984:	687b      	ldr	r3, [r7, #4]
   82986:	f04f 32ff 	mov.w	r2, #4294967295
   8298a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8298c:	4b16      	ldr	r3, [pc, #88]	; (829e8 <prvUnlockQueue+0xa4>)
   8298e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   82990:	4b12      	ldr	r3, [pc, #72]	; (829dc <prvUnlockQueue+0x98>)
   82992:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   82994:	e014      	b.n	829c0 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   82996:	687b      	ldr	r3, [r7, #4]
   82998:	691b      	ldr	r3, [r3, #16]
   8299a:	2b00      	cmp	r3, #0
   8299c:	d00f      	beq.n	829be <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8299e:	687b      	ldr	r3, [r7, #4]
   829a0:	3310      	adds	r3, #16
   829a2:	4618      	mov	r0, r3
   829a4:	4b0e      	ldr	r3, [pc, #56]	; (829e0 <prvUnlockQueue+0x9c>)
   829a6:	4798      	blx	r3
   829a8:	4603      	mov	r3, r0
   829aa:	2b00      	cmp	r3, #0
   829ac:	d001      	beq.n	829b2 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   829ae:	4b0d      	ldr	r3, [pc, #52]	; (829e4 <prvUnlockQueue+0xa0>)
   829b0:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   829b2:	687b      	ldr	r3, [r7, #4]
   829b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   829b6:	1e5a      	subs	r2, r3, #1
   829b8:	687b      	ldr	r3, [r7, #4]
   829ba:	645a      	str	r2, [r3, #68]	; 0x44
   829bc:	e000      	b.n	829c0 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   829be:	e003      	b.n	829c8 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   829c0:	687b      	ldr	r3, [r7, #4]
   829c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   829c4:	2b00      	cmp	r3, #0
   829c6:	dce6      	bgt.n	82996 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   829c8:	687b      	ldr	r3, [r7, #4]
   829ca:	f04f 32ff 	mov.w	r2, #4294967295
   829ce:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   829d0:	4b05      	ldr	r3, [pc, #20]	; (829e8 <prvUnlockQueue+0xa4>)
   829d2:	4798      	blx	r3
}
   829d4:	3708      	adds	r7, #8
   829d6:	46bd      	mov	sp, r7
   829d8:	bd80      	pop	{r7, pc}
   829da:	bf00      	nop
   829dc:	00081c09 	.word	0x00081c09
   829e0:	000832c1 	.word	0x000832c1
   829e4:	00083469 	.word	0x00083469
   829e8:	00081c4d 	.word	0x00081c4d

000829ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   829ec:	b580      	push	{r7, lr}
   829ee:	b084      	sub	sp, #16
   829f0:	af00      	add	r7, sp, #0
   829f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   829f4:	4b08      	ldr	r3, [pc, #32]	; (82a18 <prvIsQueueEmpty+0x2c>)
   829f6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   829f8:	687b      	ldr	r3, [r7, #4]
   829fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   829fc:	2b00      	cmp	r3, #0
   829fe:	d102      	bne.n	82a06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   82a00:	2301      	movs	r3, #1
   82a02:	60fb      	str	r3, [r7, #12]
   82a04:	e001      	b.n	82a0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   82a06:	2300      	movs	r3, #0
   82a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   82a0a:	4b04      	ldr	r3, [pc, #16]	; (82a1c <prvIsQueueEmpty+0x30>)
   82a0c:	4798      	blx	r3

	return xReturn;
   82a0e:	68fb      	ldr	r3, [r7, #12]
}
   82a10:	4618      	mov	r0, r3
   82a12:	3710      	adds	r7, #16
   82a14:	46bd      	mov	sp, r7
   82a16:	bd80      	pop	{r7, pc}
   82a18:	00081c09 	.word	0x00081c09
   82a1c:	00081c4d 	.word	0x00081c4d

00082a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   82a20:	b580      	push	{r7, lr}
   82a22:	b084      	sub	sp, #16
   82a24:	af00      	add	r7, sp, #0
   82a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   82a28:	4b09      	ldr	r3, [pc, #36]	; (82a50 <prvIsQueueFull+0x30>)
   82a2a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   82a2c:	687b      	ldr	r3, [r7, #4]
   82a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   82a30:	687b      	ldr	r3, [r7, #4]
   82a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82a34:	429a      	cmp	r2, r3
   82a36:	d102      	bne.n	82a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   82a38:	2301      	movs	r3, #1
   82a3a:	60fb      	str	r3, [r7, #12]
   82a3c:	e001      	b.n	82a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   82a3e:	2300      	movs	r3, #0
   82a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   82a42:	4b04      	ldr	r3, [pc, #16]	; (82a54 <prvIsQueueFull+0x34>)
   82a44:	4798      	blx	r3

	return xReturn;
   82a46:	68fb      	ldr	r3, [r7, #12]
}
   82a48:	4618      	mov	r0, r3
   82a4a:	3710      	adds	r7, #16
   82a4c:	46bd      	mov	sp, r7
   82a4e:	bd80      	pop	{r7, pc}
   82a50:	00081c09 	.word	0x00081c09
   82a54:	00081c4d 	.word	0x00081c4d

00082a58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   82a58:	b580      	push	{r7, lr}
   82a5a:	b084      	sub	sp, #16
   82a5c:	af00      	add	r7, sp, #0
   82a5e:	6078      	str	r0, [r7, #4]
   82a60:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   82a62:	687b      	ldr	r3, [r7, #4]
   82a64:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   82a66:	4b12      	ldr	r3, [pc, #72]	; (82ab0 <vQueueWaitForMessageRestricted+0x58>)
   82a68:	4798      	blx	r3
   82a6a:	68fb      	ldr	r3, [r7, #12]
   82a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   82a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82a72:	d102      	bne.n	82a7a <vQueueWaitForMessageRestricted+0x22>
   82a74:	68fb      	ldr	r3, [r7, #12]
   82a76:	2200      	movs	r2, #0
   82a78:	645a      	str	r2, [r3, #68]	; 0x44
   82a7a:	68fb      	ldr	r3, [r7, #12]
   82a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   82a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   82a82:	d102      	bne.n	82a8a <vQueueWaitForMessageRestricted+0x32>
   82a84:	68fb      	ldr	r3, [r7, #12]
   82a86:	2200      	movs	r2, #0
   82a88:	649a      	str	r2, [r3, #72]	; 0x48
   82a8a:	4b0a      	ldr	r3, [pc, #40]	; (82ab4 <vQueueWaitForMessageRestricted+0x5c>)
   82a8c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   82a8e:	68fb      	ldr	r3, [r7, #12]
   82a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   82a92:	2b00      	cmp	r3, #0
   82a94:	d105      	bne.n	82aa2 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   82a96:	68fb      	ldr	r3, [r7, #12]
   82a98:	3324      	adds	r3, #36	; 0x24
   82a9a:	4618      	mov	r0, r3
   82a9c:	6839      	ldr	r1, [r7, #0]
   82a9e:	4b06      	ldr	r3, [pc, #24]	; (82ab8 <vQueueWaitForMessageRestricted+0x60>)
   82aa0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   82aa2:	68f8      	ldr	r0, [r7, #12]
   82aa4:	4b05      	ldr	r3, [pc, #20]	; (82abc <vQueueWaitForMessageRestricted+0x64>)
   82aa6:	4798      	blx	r3
	}
   82aa8:	3710      	adds	r7, #16
   82aaa:	46bd      	mov	sp, r7
   82aac:	bd80      	pop	{r7, pc}
   82aae:	bf00      	nop
   82ab0:	00081c09 	.word	0x00081c09
   82ab4:	00081c4d 	.word	0x00081c4d
   82ab8:	00083241 	.word	0x00083241
   82abc:	00082945 	.word	0x00082945

00082ac0 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   82ac0:	b590      	push	{r4, r7, lr}
   82ac2:	b08b      	sub	sp, #44	; 0x2c
   82ac4:	af02      	add	r7, sp, #8
   82ac6:	60f8      	str	r0, [r7, #12]
   82ac8:	60b9      	str	r1, [r7, #8]
   82aca:	603b      	str	r3, [r7, #0]
   82acc:	4613      	mov	r3, r2
   82ace:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   82ad0:	68fb      	ldr	r3, [r7, #12]
   82ad2:	2b00      	cmp	r3, #0
   82ad4:	d102      	bne.n	82adc <xTaskGenericCreate+0x1c>
   82ad6:	4b4b      	ldr	r3, [pc, #300]	; (82c04 <xTaskGenericCreate+0x144>)
   82ad8:	4798      	blx	r3
   82ada:	e7fe      	b.n	82ada <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82ade:	2b04      	cmp	r3, #4
   82ae0:	d902      	bls.n	82ae8 <xTaskGenericCreate+0x28>
   82ae2:	4b48      	ldr	r3, [pc, #288]	; (82c04 <xTaskGenericCreate+0x144>)
   82ae4:	4798      	blx	r3
   82ae6:	e7fe      	b.n	82ae6 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   82ae8:	88fb      	ldrh	r3, [r7, #6]
   82aea:	4618      	mov	r0, r3
   82aec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   82aee:	4b46      	ldr	r3, [pc, #280]	; (82c08 <xTaskGenericCreate+0x148>)
   82af0:	4798      	blx	r3
   82af2:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   82af4:	69bb      	ldr	r3, [r7, #24]
   82af6:	2b00      	cmp	r3, #0
   82af8:	d06d      	beq.n	82bd6 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   82afa:	69bb      	ldr	r3, [r7, #24]
   82afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82afe:	88fb      	ldrh	r3, [r7, #6]
   82b00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   82b04:	3b01      	subs	r3, #1
   82b06:	009b      	lsls	r3, r3, #2
   82b08:	4413      	add	r3, r2
   82b0a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   82b0c:	697b      	ldr	r3, [r7, #20]
   82b0e:	f023 0307 	bic.w	r3, r3, #7
   82b12:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82b14:	697b      	ldr	r3, [r7, #20]
   82b16:	f003 0307 	and.w	r3, r3, #7
   82b1a:	2b00      	cmp	r3, #0
   82b1c:	d002      	beq.n	82b24 <xTaskGenericCreate+0x64>
   82b1e:	4b39      	ldr	r3, [pc, #228]	; (82c04 <xTaskGenericCreate+0x144>)
   82b20:	4798      	blx	r3
   82b22:	e7fe      	b.n	82b22 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   82b24:	88fb      	ldrh	r3, [r7, #6]
   82b26:	9300      	str	r3, [sp, #0]
   82b28:	69b8      	ldr	r0, [r7, #24]
   82b2a:	68b9      	ldr	r1, [r7, #8]
   82b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   82b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   82b30:	4c36      	ldr	r4, [pc, #216]	; (82c0c <xTaskGenericCreate+0x14c>)
   82b32:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82b34:	6978      	ldr	r0, [r7, #20]
   82b36:	68f9      	ldr	r1, [r7, #12]
   82b38:	683a      	ldr	r2, [r7, #0]
   82b3a:	4b35      	ldr	r3, [pc, #212]	; (82c10 <xTaskGenericCreate+0x150>)
   82b3c:	4798      	blx	r3
   82b3e:	4602      	mov	r2, r0
   82b40:	69bb      	ldr	r3, [r7, #24]
   82b42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   82b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82b46:	2b00      	cmp	r3, #0
   82b48:	d002      	beq.n	82b50 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   82b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   82b4c:	69ba      	ldr	r2, [r7, #24]
   82b4e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   82b50:	4b30      	ldr	r3, [pc, #192]	; (82c14 <xTaskGenericCreate+0x154>)
   82b52:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   82b54:	4b30      	ldr	r3, [pc, #192]	; (82c18 <xTaskGenericCreate+0x158>)
   82b56:	681b      	ldr	r3, [r3, #0]
   82b58:	1c5a      	adds	r2, r3, #1
   82b5a:	4b2f      	ldr	r3, [pc, #188]	; (82c18 <xTaskGenericCreate+0x158>)
   82b5c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82b5e:	4b2f      	ldr	r3, [pc, #188]	; (82c1c <xTaskGenericCreate+0x15c>)
   82b60:	681b      	ldr	r3, [r3, #0]
   82b62:	2b00      	cmp	r3, #0
   82b64:	d109      	bne.n	82b7a <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   82b66:	4b2d      	ldr	r3, [pc, #180]	; (82c1c <xTaskGenericCreate+0x15c>)
   82b68:	69ba      	ldr	r2, [r7, #24]
   82b6a:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   82b6c:	4b2a      	ldr	r3, [pc, #168]	; (82c18 <xTaskGenericCreate+0x158>)
   82b6e:	681b      	ldr	r3, [r3, #0]
   82b70:	2b01      	cmp	r3, #1
   82b72:	d10f      	bne.n	82b94 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   82b74:	4b2a      	ldr	r3, [pc, #168]	; (82c20 <xTaskGenericCreate+0x160>)
   82b76:	4798      	blx	r3
   82b78:	e00c      	b.n	82b94 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82b7a:	4b2a      	ldr	r3, [pc, #168]	; (82c24 <xTaskGenericCreate+0x164>)
   82b7c:	681b      	ldr	r3, [r3, #0]
   82b7e:	2b00      	cmp	r3, #0
   82b80:	d108      	bne.n	82b94 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   82b82:	4b26      	ldr	r3, [pc, #152]	; (82c1c <xTaskGenericCreate+0x15c>)
   82b84:	681b      	ldr	r3, [r3, #0]
   82b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82b8a:	429a      	cmp	r2, r3
   82b8c:	d802      	bhi.n	82b94 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   82b8e:	4b23      	ldr	r3, [pc, #140]	; (82c1c <xTaskGenericCreate+0x15c>)
   82b90:	69ba      	ldr	r2, [r7, #24]
   82b92:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   82b94:	4b24      	ldr	r3, [pc, #144]	; (82c28 <xTaskGenericCreate+0x168>)
   82b96:	681b      	ldr	r3, [r3, #0]
   82b98:	1c5a      	adds	r2, r3, #1
   82b9a:	4b23      	ldr	r3, [pc, #140]	; (82c28 <xTaskGenericCreate+0x168>)
   82b9c:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   82b9e:	69bb      	ldr	r3, [r7, #24]
   82ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82ba2:	2201      	movs	r2, #1
   82ba4:	409a      	lsls	r2, r3
   82ba6:	4b21      	ldr	r3, [pc, #132]	; (82c2c <xTaskGenericCreate+0x16c>)
   82ba8:	681b      	ldr	r3, [r3, #0]
   82baa:	431a      	orrs	r2, r3
   82bac:	4b1f      	ldr	r3, [pc, #124]	; (82c2c <xTaskGenericCreate+0x16c>)
   82bae:	601a      	str	r2, [r3, #0]
   82bb0:	69bb      	ldr	r3, [r7, #24]
   82bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82bb4:	4613      	mov	r3, r2
   82bb6:	009b      	lsls	r3, r3, #2
   82bb8:	4413      	add	r3, r2
   82bba:	009b      	lsls	r3, r3, #2
   82bbc:	4a1c      	ldr	r2, [pc, #112]	; (82c30 <xTaskGenericCreate+0x170>)
   82bbe:	441a      	add	r2, r3
   82bc0:	69bb      	ldr	r3, [r7, #24]
   82bc2:	3304      	adds	r3, #4
   82bc4:	4610      	mov	r0, r2
   82bc6:	4619      	mov	r1, r3
   82bc8:	4b1a      	ldr	r3, [pc, #104]	; (82c34 <xTaskGenericCreate+0x174>)
   82bca:	4798      	blx	r3

			xReturn = pdPASS;
   82bcc:	2301      	movs	r3, #1
   82bce:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   82bd0:	4b19      	ldr	r3, [pc, #100]	; (82c38 <xTaskGenericCreate+0x178>)
   82bd2:	4798      	blx	r3
   82bd4:	e002      	b.n	82bdc <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82bd6:	f04f 33ff 	mov.w	r3, #4294967295
   82bda:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   82bdc:	69fb      	ldr	r3, [r7, #28]
   82bde:	2b01      	cmp	r3, #1
   82be0:	d10b      	bne.n	82bfa <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   82be2:	4b10      	ldr	r3, [pc, #64]	; (82c24 <xTaskGenericCreate+0x164>)
   82be4:	681b      	ldr	r3, [r3, #0]
   82be6:	2b00      	cmp	r3, #0
   82be8:	d007      	beq.n	82bfa <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   82bea:	4b0c      	ldr	r3, [pc, #48]	; (82c1c <xTaskGenericCreate+0x15c>)
   82bec:	681b      	ldr	r3, [r3, #0]
   82bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82bf2:	429a      	cmp	r2, r3
   82bf4:	d201      	bcs.n	82bfa <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   82bf6:	4b11      	ldr	r3, [pc, #68]	; (82c3c <xTaskGenericCreate+0x17c>)
   82bf8:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   82bfa:	69fb      	ldr	r3, [r7, #28]
}
   82bfc:	4618      	mov	r0, r3
   82bfe:	3724      	adds	r7, #36	; 0x24
   82c00:	46bd      	mov	sp, r7
   82c02:	bd90      	pop	{r4, r7, pc}
   82c04:	00081c85 	.word	0x00081c85
   82c08:	000836bd 	.word	0x000836bd
   82c0c:	000834a9 	.word	0x000834a9
   82c10:	00081a61 	.word	0x00081a61
   82c14:	00081c09 	.word	0x00081c09
   82c18:	2007a5bc 	.word	0x2007a5bc
   82c1c:	2007a4e4 	.word	0x2007a4e4
   82c20:	00083541 	.word	0x00083541
   82c24:	2007a5c8 	.word	0x2007a5c8
   82c28:	2007a5d8 	.word	0x2007a5d8
   82c2c:	2007a5c4 	.word	0x2007a5c4
   82c30:	2007a4e8 	.word	0x2007a4e8
   82c34:	00081955 	.word	0x00081955
   82c38:	00081c4d 	.word	0x00081c4d
   82c3c:	00081be9 	.word	0x00081be9

00082c40 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   82c40:	b580      	push	{r7, lr}
   82c42:	b086      	sub	sp, #24
   82c44:	af00      	add	r7, sp, #0
   82c46:	6078      	str	r0, [r7, #4]
   82c48:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   82c4a:	2300      	movs	r3, #0
   82c4c:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   82c4e:	687b      	ldr	r3, [r7, #4]
   82c50:	2b00      	cmp	r3, #0
   82c52:	d102      	bne.n	82c5a <vTaskDelayUntil+0x1a>
   82c54:	4b2f      	ldr	r3, [pc, #188]	; (82d14 <vTaskDelayUntil+0xd4>)
   82c56:	4798      	blx	r3
   82c58:	e7fe      	b.n	82c58 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   82c5a:	683b      	ldr	r3, [r7, #0]
   82c5c:	2b00      	cmp	r3, #0
   82c5e:	d102      	bne.n	82c66 <vTaskDelayUntil+0x26>
   82c60:	4b2c      	ldr	r3, [pc, #176]	; (82d14 <vTaskDelayUntil+0xd4>)
   82c62:	4798      	blx	r3
   82c64:	e7fe      	b.n	82c64 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   82c66:	4b2c      	ldr	r3, [pc, #176]	; (82d18 <vTaskDelayUntil+0xd8>)
   82c68:	681b      	ldr	r3, [r3, #0]
   82c6a:	2b00      	cmp	r3, #0
   82c6c:	d002      	beq.n	82c74 <vTaskDelayUntil+0x34>
   82c6e:	4b29      	ldr	r3, [pc, #164]	; (82d14 <vTaskDelayUntil+0xd4>)
   82c70:	4798      	blx	r3
   82c72:	e7fe      	b.n	82c72 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   82c74:	4b29      	ldr	r3, [pc, #164]	; (82d1c <vTaskDelayUntil+0xdc>)
   82c76:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   82c78:	4b29      	ldr	r3, [pc, #164]	; (82d20 <vTaskDelayUntil+0xe0>)
   82c7a:	681b      	ldr	r3, [r3, #0]
   82c7c:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   82c7e:	687b      	ldr	r3, [r7, #4]
   82c80:	681a      	ldr	r2, [r3, #0]
   82c82:	683b      	ldr	r3, [r7, #0]
   82c84:	4413      	add	r3, r2
   82c86:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   82c88:	687b      	ldr	r3, [r7, #4]
   82c8a:	681a      	ldr	r2, [r3, #0]
   82c8c:	693b      	ldr	r3, [r7, #16]
   82c8e:	429a      	cmp	r2, r3
   82c90:	d90b      	bls.n	82caa <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   82c92:	687b      	ldr	r3, [r7, #4]
   82c94:	681a      	ldr	r2, [r3, #0]
   82c96:	68fb      	ldr	r3, [r7, #12]
   82c98:	429a      	cmp	r2, r3
   82c9a:	d911      	bls.n	82cc0 <vTaskDelayUntil+0x80>
   82c9c:	68fa      	ldr	r2, [r7, #12]
   82c9e:	693b      	ldr	r3, [r7, #16]
   82ca0:	429a      	cmp	r2, r3
   82ca2:	d90d      	bls.n	82cc0 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   82ca4:	2301      	movs	r3, #1
   82ca6:	617b      	str	r3, [r7, #20]
   82ca8:	e00a      	b.n	82cc0 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   82caa:	687b      	ldr	r3, [r7, #4]
   82cac:	681a      	ldr	r2, [r3, #0]
   82cae:	68fb      	ldr	r3, [r7, #12]
   82cb0:	429a      	cmp	r2, r3
   82cb2:	d803      	bhi.n	82cbc <vTaskDelayUntil+0x7c>
   82cb4:	68fa      	ldr	r2, [r7, #12]
   82cb6:	693b      	ldr	r3, [r7, #16]
   82cb8:	429a      	cmp	r2, r3
   82cba:	d901      	bls.n	82cc0 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   82cbc:	2301      	movs	r3, #1
   82cbe:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82cc0:	687b      	ldr	r3, [r7, #4]
   82cc2:	68fa      	ldr	r2, [r7, #12]
   82cc4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   82cc6:	697b      	ldr	r3, [r7, #20]
   82cc8:	2b00      	cmp	r3, #0
   82cca:	d017      	beq.n	82cfc <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   82ccc:	4b15      	ldr	r3, [pc, #84]	; (82d24 <vTaskDelayUntil+0xe4>)
   82cce:	681b      	ldr	r3, [r3, #0]
   82cd0:	3304      	adds	r3, #4
   82cd2:	4618      	mov	r0, r3
   82cd4:	4b14      	ldr	r3, [pc, #80]	; (82d28 <vTaskDelayUntil+0xe8>)
   82cd6:	4798      	blx	r3
   82cd8:	4603      	mov	r3, r0
   82cda:	2b00      	cmp	r3, #0
   82cdc:	d10b      	bne.n	82cf6 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   82cde:	4b11      	ldr	r3, [pc, #68]	; (82d24 <vTaskDelayUntil+0xe4>)
   82ce0:	681b      	ldr	r3, [r3, #0]
   82ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82ce4:	2201      	movs	r2, #1
   82ce6:	fa02 f303 	lsl.w	r3, r2, r3
   82cea:	43da      	mvns	r2, r3
   82cec:	4b0f      	ldr	r3, [pc, #60]	; (82d2c <vTaskDelayUntil+0xec>)
   82cee:	681b      	ldr	r3, [r3, #0]
   82cf0:	401a      	ands	r2, r3
   82cf2:	4b0e      	ldr	r3, [pc, #56]	; (82d2c <vTaskDelayUntil+0xec>)
   82cf4:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82cf6:	68f8      	ldr	r0, [r7, #12]
   82cf8:	4b0d      	ldr	r3, [pc, #52]	; (82d30 <vTaskDelayUntil+0xf0>)
   82cfa:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82cfc:	4b0d      	ldr	r3, [pc, #52]	; (82d34 <vTaskDelayUntil+0xf4>)
   82cfe:	4798      	blx	r3
   82d00:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   82d02:	68bb      	ldr	r3, [r7, #8]
   82d04:	2b00      	cmp	r3, #0
   82d06:	d101      	bne.n	82d0c <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   82d08:	4b0b      	ldr	r3, [pc, #44]	; (82d38 <vTaskDelayUntil+0xf8>)
   82d0a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   82d0c:	3718      	adds	r7, #24
   82d0e:	46bd      	mov	sp, r7
   82d10:	bd80      	pop	{r7, pc}
   82d12:	bf00      	nop
   82d14:	00081c85 	.word	0x00081c85
   82d18:	2007a5dc 	.word	0x2007a5dc
   82d1c:	00082dbd 	.word	0x00082dbd
   82d20:	2007a5c0 	.word	0x2007a5c0
   82d24:	2007a4e4 	.word	0x2007a4e4
   82d28:	00081a0d 	.word	0x00081a0d
   82d2c:	2007a5c4 	.word	0x2007a5c4
   82d30:	0008364d 	.word	0x0008364d
   82d34:	00082dd9 	.word	0x00082dd9
   82d38:	00081be9 	.word	0x00081be9

00082d3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   82d3c:	b590      	push	{r4, r7, lr}
   82d3e:	b087      	sub	sp, #28
   82d40:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   82d42:	2300      	movs	r3, #0
   82d44:	9300      	str	r3, [sp, #0]
   82d46:	2300      	movs	r3, #0
   82d48:	9301      	str	r3, [sp, #4]
   82d4a:	2300      	movs	r3, #0
   82d4c:	9302      	str	r3, [sp, #8]
   82d4e:	2300      	movs	r3, #0
   82d50:	9303      	str	r3, [sp, #12]
   82d52:	4812      	ldr	r0, [pc, #72]	; (82d9c <vTaskStartScheduler+0x60>)
   82d54:	4912      	ldr	r1, [pc, #72]	; (82da0 <vTaskStartScheduler+0x64>)
   82d56:	2282      	movs	r2, #130	; 0x82
   82d58:	2300      	movs	r3, #0
   82d5a:	4c12      	ldr	r4, [pc, #72]	; (82da4 <vTaskStartScheduler+0x68>)
   82d5c:	47a0      	blx	r4
   82d5e:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   82d60:	687b      	ldr	r3, [r7, #4]
   82d62:	2b01      	cmp	r3, #1
   82d64:	d102      	bne.n	82d6c <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   82d66:	4b10      	ldr	r3, [pc, #64]	; (82da8 <vTaskStartScheduler+0x6c>)
   82d68:	4798      	blx	r3
   82d6a:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   82d6c:	687b      	ldr	r3, [r7, #4]
   82d6e:	2b01      	cmp	r3, #1
   82d70:	d10a      	bne.n	82d88 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   82d72:	4b0e      	ldr	r3, [pc, #56]	; (82dac <vTaskStartScheduler+0x70>)
   82d74:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   82d76:	4b0e      	ldr	r3, [pc, #56]	; (82db0 <vTaskStartScheduler+0x74>)
   82d78:	2201      	movs	r2, #1
   82d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   82d7c:	4b0d      	ldr	r3, [pc, #52]	; (82db4 <vTaskStartScheduler+0x78>)
   82d7e:	2200      	movs	r2, #0
   82d80:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   82d82:	4b0d      	ldr	r3, [pc, #52]	; (82db8 <vTaskStartScheduler+0x7c>)
   82d84:	4798      	blx	r3
   82d86:	e005      	b.n	82d94 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   82d88:	687b      	ldr	r3, [r7, #4]
   82d8a:	2b00      	cmp	r3, #0
   82d8c:	d102      	bne.n	82d94 <vTaskStartScheduler+0x58>
   82d8e:	4b07      	ldr	r3, [pc, #28]	; (82dac <vTaskStartScheduler+0x70>)
   82d90:	4798      	blx	r3
   82d92:	e7fe      	b.n	82d92 <vTaskStartScheduler+0x56>
	}
}
   82d94:	370c      	adds	r7, #12
   82d96:	46bd      	mov	sp, r7
   82d98:	bd90      	pop	{r4, r7, pc}
   82d9a:	bf00      	nop
   82d9c:	00083481 	.word	0x00083481
   82da0:	00084dd8 	.word	0x00084dd8
   82da4:	00082ac1 	.word	0x00082ac1
   82da8:	000839d5 	.word	0x000839d5
   82dac:	00081c85 	.word	0x00081c85
   82db0:	2007a5c8 	.word	0x2007a5c8
   82db4:	2007a5c0 	.word	0x2007a5c0
   82db8:	00081b21 	.word	0x00081b21

00082dbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   82dbc:	b480      	push	{r7}
   82dbe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   82dc0:	4b04      	ldr	r3, [pc, #16]	; (82dd4 <vTaskSuspendAll+0x18>)
   82dc2:	681b      	ldr	r3, [r3, #0]
   82dc4:	1c5a      	adds	r2, r3, #1
   82dc6:	4b03      	ldr	r3, [pc, #12]	; (82dd4 <vTaskSuspendAll+0x18>)
   82dc8:	601a      	str	r2, [r3, #0]
}
   82dca:	46bd      	mov	sp, r7
   82dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dd0:	4770      	bx	lr
   82dd2:	bf00      	nop
   82dd4:	2007a5dc 	.word	0x2007a5dc

00082dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   82dd8:	b580      	push	{r7, lr}
   82dda:	b082      	sub	sp, #8
   82ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   82dde:	2300      	movs	r3, #0
   82de0:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   82de2:	4b37      	ldr	r3, [pc, #220]	; (82ec0 <xTaskResumeAll+0xe8>)
   82de4:	681b      	ldr	r3, [r3, #0]
   82de6:	2b00      	cmp	r3, #0
   82de8:	d102      	bne.n	82df0 <xTaskResumeAll+0x18>
   82dea:	4b36      	ldr	r3, [pc, #216]	; (82ec4 <xTaskResumeAll+0xec>)
   82dec:	4798      	blx	r3
   82dee:	e7fe      	b.n	82dee <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   82df0:	4b35      	ldr	r3, [pc, #212]	; (82ec8 <xTaskResumeAll+0xf0>)
   82df2:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   82df4:	4b32      	ldr	r3, [pc, #200]	; (82ec0 <xTaskResumeAll+0xe8>)
   82df6:	681b      	ldr	r3, [r3, #0]
   82df8:	1e5a      	subs	r2, r3, #1
   82dfa:	4b31      	ldr	r3, [pc, #196]	; (82ec0 <xTaskResumeAll+0xe8>)
   82dfc:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82dfe:	4b30      	ldr	r3, [pc, #192]	; (82ec0 <xTaskResumeAll+0xe8>)
   82e00:	681b      	ldr	r3, [r3, #0]
   82e02:	2b00      	cmp	r3, #0
   82e04:	d155      	bne.n	82eb2 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   82e06:	4b31      	ldr	r3, [pc, #196]	; (82ecc <xTaskResumeAll+0xf4>)
   82e08:	681b      	ldr	r3, [r3, #0]
   82e0a:	2b00      	cmp	r3, #0
   82e0c:	d051      	beq.n	82eb2 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   82e0e:	e02e      	b.n	82e6e <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   82e10:	4b2f      	ldr	r3, [pc, #188]	; (82ed0 <xTaskResumeAll+0xf8>)
   82e12:	68db      	ldr	r3, [r3, #12]
   82e14:	68db      	ldr	r3, [r3, #12]
   82e16:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82e18:	683b      	ldr	r3, [r7, #0]
   82e1a:	3318      	adds	r3, #24
   82e1c:	4618      	mov	r0, r3
   82e1e:	4b2d      	ldr	r3, [pc, #180]	; (82ed4 <xTaskResumeAll+0xfc>)
   82e20:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82e22:	683b      	ldr	r3, [r7, #0]
   82e24:	3304      	adds	r3, #4
   82e26:	4618      	mov	r0, r3
   82e28:	4b2a      	ldr	r3, [pc, #168]	; (82ed4 <xTaskResumeAll+0xfc>)
   82e2a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   82e2c:	683b      	ldr	r3, [r7, #0]
   82e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82e30:	2201      	movs	r2, #1
   82e32:	409a      	lsls	r2, r3
   82e34:	4b28      	ldr	r3, [pc, #160]	; (82ed8 <xTaskResumeAll+0x100>)
   82e36:	681b      	ldr	r3, [r3, #0]
   82e38:	431a      	orrs	r2, r3
   82e3a:	4b27      	ldr	r3, [pc, #156]	; (82ed8 <xTaskResumeAll+0x100>)
   82e3c:	601a      	str	r2, [r3, #0]
   82e3e:	683b      	ldr	r3, [r7, #0]
   82e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e42:	4613      	mov	r3, r2
   82e44:	009b      	lsls	r3, r3, #2
   82e46:	4413      	add	r3, r2
   82e48:	009b      	lsls	r3, r3, #2
   82e4a:	4a24      	ldr	r2, [pc, #144]	; (82edc <xTaskResumeAll+0x104>)
   82e4c:	441a      	add	r2, r3
   82e4e:	683b      	ldr	r3, [r7, #0]
   82e50:	3304      	adds	r3, #4
   82e52:	4610      	mov	r0, r2
   82e54:	4619      	mov	r1, r3
   82e56:	4b22      	ldr	r3, [pc, #136]	; (82ee0 <xTaskResumeAll+0x108>)
   82e58:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   82e5a:	683b      	ldr	r3, [r7, #0]
   82e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82e5e:	4b21      	ldr	r3, [pc, #132]	; (82ee4 <xTaskResumeAll+0x10c>)
   82e60:	681b      	ldr	r3, [r3, #0]
   82e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82e64:	429a      	cmp	r2, r3
   82e66:	d302      	bcc.n	82e6e <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   82e68:	4b1f      	ldr	r3, [pc, #124]	; (82ee8 <xTaskResumeAll+0x110>)
   82e6a:	2201      	movs	r2, #1
   82e6c:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   82e6e:	4b18      	ldr	r3, [pc, #96]	; (82ed0 <xTaskResumeAll+0xf8>)
   82e70:	681b      	ldr	r3, [r3, #0]
   82e72:	2b00      	cmp	r3, #0
   82e74:	d1cc      	bne.n	82e10 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   82e76:	4b1d      	ldr	r3, [pc, #116]	; (82eec <xTaskResumeAll+0x114>)
   82e78:	681b      	ldr	r3, [r3, #0]
   82e7a:	2b00      	cmp	r3, #0
   82e7c:	d011      	beq.n	82ea2 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   82e7e:	e00c      	b.n	82e9a <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   82e80:	4b1b      	ldr	r3, [pc, #108]	; (82ef0 <xTaskResumeAll+0x118>)
   82e82:	4798      	blx	r3
   82e84:	4603      	mov	r3, r0
   82e86:	2b00      	cmp	r3, #0
   82e88:	d002      	beq.n	82e90 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   82e8a:	4b17      	ldr	r3, [pc, #92]	; (82ee8 <xTaskResumeAll+0x110>)
   82e8c:	2201      	movs	r2, #1
   82e8e:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   82e90:	4b16      	ldr	r3, [pc, #88]	; (82eec <xTaskResumeAll+0x114>)
   82e92:	681b      	ldr	r3, [r3, #0]
   82e94:	1e5a      	subs	r2, r3, #1
   82e96:	4b15      	ldr	r3, [pc, #84]	; (82eec <xTaskResumeAll+0x114>)
   82e98:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   82e9a:	4b14      	ldr	r3, [pc, #80]	; (82eec <xTaskResumeAll+0x114>)
   82e9c:	681b      	ldr	r3, [r3, #0]
   82e9e:	2b00      	cmp	r3, #0
   82ea0:	d1ee      	bne.n	82e80 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   82ea2:	4b11      	ldr	r3, [pc, #68]	; (82ee8 <xTaskResumeAll+0x110>)
   82ea4:	681b      	ldr	r3, [r3, #0]
   82ea6:	2b01      	cmp	r3, #1
   82ea8:	d103      	bne.n	82eb2 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   82eaa:	2301      	movs	r3, #1
   82eac:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   82eae:	4b11      	ldr	r3, [pc, #68]	; (82ef4 <xTaskResumeAll+0x11c>)
   82eb0:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   82eb2:	4b11      	ldr	r3, [pc, #68]	; (82ef8 <xTaskResumeAll+0x120>)
   82eb4:	4798      	blx	r3

	return xAlreadyYielded;
   82eb6:	687b      	ldr	r3, [r7, #4]
}
   82eb8:	4618      	mov	r0, r3
   82eba:	3708      	adds	r7, #8
   82ebc:	46bd      	mov	sp, r7
   82ebe:	bd80      	pop	{r7, pc}
   82ec0:	2007a5dc 	.word	0x2007a5dc
   82ec4:	00081c85 	.word	0x00081c85
   82ec8:	00081c09 	.word	0x00081c09
   82ecc:	2007a5bc 	.word	0x2007a5bc
   82ed0:	2007a57c 	.word	0x2007a57c
   82ed4:	00081a0d 	.word	0x00081a0d
   82ed8:	2007a5c4 	.word	0x2007a5c4
   82edc:	2007a4e8 	.word	0x2007a4e8
   82ee0:	00081955 	.word	0x00081955
   82ee4:	2007a4e4 	.word	0x2007a4e4
   82ee8:	2007a5d0 	.word	0x2007a5d0
   82eec:	2007a5cc 	.word	0x2007a5cc
   82ef0:	00082f29 	.word	0x00082f29
   82ef4:	00081be9 	.word	0x00081be9
   82ef8:	00081c4d 	.word	0x00081c4d

00082efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   82efc:	b580      	push	{r7, lr}
   82efe:	b082      	sub	sp, #8
   82f00:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   82f02:	4b06      	ldr	r3, [pc, #24]	; (82f1c <xTaskGetTickCount+0x20>)
   82f04:	4798      	blx	r3
	{
		xTicks = xTickCount;
   82f06:	4b06      	ldr	r3, [pc, #24]	; (82f20 <xTaskGetTickCount+0x24>)
   82f08:	681b      	ldr	r3, [r3, #0]
   82f0a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   82f0c:	4b05      	ldr	r3, [pc, #20]	; (82f24 <xTaskGetTickCount+0x28>)
   82f0e:	4798      	blx	r3

	return xTicks;
   82f10:	687b      	ldr	r3, [r7, #4]
}
   82f12:	4618      	mov	r0, r3
   82f14:	3708      	adds	r7, #8
   82f16:	46bd      	mov	sp, r7
   82f18:	bd80      	pop	{r7, pc}
   82f1a:	bf00      	nop
   82f1c:	00081c09 	.word	0x00081c09
   82f20:	2007a5c0 	.word	0x2007a5c0
   82f24:	00081c4d 	.word	0x00081c4d

00082f28 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   82f28:	b580      	push	{r7, lr}
   82f2a:	b086      	sub	sp, #24
   82f2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   82f2e:	2300      	movs	r3, #0
   82f30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   82f32:	4b4d      	ldr	r3, [pc, #308]	; (83068 <xTaskIncrementTick+0x140>)
   82f34:	681b      	ldr	r3, [r3, #0]
   82f36:	2b00      	cmp	r3, #0
   82f38:	f040 8086 	bne.w	83048 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   82f3c:	4b4b      	ldr	r3, [pc, #300]	; (8306c <xTaskIncrementTick+0x144>)
   82f3e:	681b      	ldr	r3, [r3, #0]
   82f40:	1c5a      	adds	r2, r3, #1
   82f42:	4b4a      	ldr	r3, [pc, #296]	; (8306c <xTaskIncrementTick+0x144>)
   82f44:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   82f46:	4b49      	ldr	r3, [pc, #292]	; (8306c <xTaskIncrementTick+0x144>)
   82f48:	681b      	ldr	r3, [r3, #0]
   82f4a:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   82f4c:	693b      	ldr	r3, [r7, #16]
   82f4e:	2b00      	cmp	r3, #0
   82f50:	d118      	bne.n	82f84 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   82f52:	4b47      	ldr	r3, [pc, #284]	; (83070 <xTaskIncrementTick+0x148>)
   82f54:	681b      	ldr	r3, [r3, #0]
   82f56:	681b      	ldr	r3, [r3, #0]
   82f58:	2b00      	cmp	r3, #0
   82f5a:	d002      	beq.n	82f62 <xTaskIncrementTick+0x3a>
   82f5c:	4b45      	ldr	r3, [pc, #276]	; (83074 <xTaskIncrementTick+0x14c>)
   82f5e:	4798      	blx	r3
   82f60:	e7fe      	b.n	82f60 <xTaskIncrementTick+0x38>
   82f62:	4b43      	ldr	r3, [pc, #268]	; (83070 <xTaskIncrementTick+0x148>)
   82f64:	681b      	ldr	r3, [r3, #0]
   82f66:	60fb      	str	r3, [r7, #12]
   82f68:	4b43      	ldr	r3, [pc, #268]	; (83078 <xTaskIncrementTick+0x150>)
   82f6a:	681a      	ldr	r2, [r3, #0]
   82f6c:	4b40      	ldr	r3, [pc, #256]	; (83070 <xTaskIncrementTick+0x148>)
   82f6e:	601a      	str	r2, [r3, #0]
   82f70:	4b41      	ldr	r3, [pc, #260]	; (83078 <xTaskIncrementTick+0x150>)
   82f72:	68fa      	ldr	r2, [r7, #12]
   82f74:	601a      	str	r2, [r3, #0]
   82f76:	4b41      	ldr	r3, [pc, #260]	; (8307c <xTaskIncrementTick+0x154>)
   82f78:	681b      	ldr	r3, [r3, #0]
   82f7a:	1c5a      	adds	r2, r3, #1
   82f7c:	4b3f      	ldr	r3, [pc, #252]	; (8307c <xTaskIncrementTick+0x154>)
   82f7e:	601a      	str	r2, [r3, #0]
   82f80:	4b3f      	ldr	r3, [pc, #252]	; (83080 <xTaskIncrementTick+0x158>)
   82f82:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   82f84:	4b3f      	ldr	r3, [pc, #252]	; (83084 <xTaskIncrementTick+0x15c>)
   82f86:	681b      	ldr	r3, [r3, #0]
   82f88:	693a      	ldr	r2, [r7, #16]
   82f8a:	429a      	cmp	r2, r3
   82f8c:	d34d      	bcc.n	8302a <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82f8e:	4b38      	ldr	r3, [pc, #224]	; (83070 <xTaskIncrementTick+0x148>)
   82f90:	681b      	ldr	r3, [r3, #0]
   82f92:	681b      	ldr	r3, [r3, #0]
   82f94:	2b00      	cmp	r3, #0
   82f96:	d101      	bne.n	82f9c <xTaskIncrementTick+0x74>
   82f98:	2301      	movs	r3, #1
   82f9a:	e000      	b.n	82f9e <xTaskIncrementTick+0x76>
   82f9c:	2300      	movs	r3, #0
   82f9e:	2b00      	cmp	r3, #0
   82fa0:	d004      	beq.n	82fac <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   82fa2:	4b38      	ldr	r3, [pc, #224]	; (83084 <xTaskIncrementTick+0x15c>)
   82fa4:	f04f 32ff 	mov.w	r2, #4294967295
   82fa8:	601a      	str	r2, [r3, #0]
						break;
   82faa:	e03e      	b.n	8302a <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82fac:	4b30      	ldr	r3, [pc, #192]	; (83070 <xTaskIncrementTick+0x148>)
   82fae:	681b      	ldr	r3, [r3, #0]
   82fb0:	68db      	ldr	r3, [r3, #12]
   82fb2:	68db      	ldr	r3, [r3, #12]
   82fb4:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   82fb6:	68bb      	ldr	r3, [r7, #8]
   82fb8:	685b      	ldr	r3, [r3, #4]
   82fba:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   82fbc:	693a      	ldr	r2, [r7, #16]
   82fbe:	687b      	ldr	r3, [r7, #4]
   82fc0:	429a      	cmp	r2, r3
   82fc2:	d203      	bcs.n	82fcc <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   82fc4:	4b2f      	ldr	r3, [pc, #188]	; (83084 <xTaskIncrementTick+0x15c>)
   82fc6:	687a      	ldr	r2, [r7, #4]
   82fc8:	601a      	str	r2, [r3, #0]
							break;
   82fca:	e02e      	b.n	8302a <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   82fcc:	68bb      	ldr	r3, [r7, #8]
   82fce:	3304      	adds	r3, #4
   82fd0:	4618      	mov	r0, r3
   82fd2:	4b2d      	ldr	r3, [pc, #180]	; (83088 <xTaskIncrementTick+0x160>)
   82fd4:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   82fd6:	68bb      	ldr	r3, [r7, #8]
   82fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82fda:	2b00      	cmp	r3, #0
   82fdc:	d004      	beq.n	82fe8 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   82fde:	68bb      	ldr	r3, [r7, #8]
   82fe0:	3318      	adds	r3, #24
   82fe2:	4618      	mov	r0, r3
   82fe4:	4b28      	ldr	r3, [pc, #160]	; (83088 <xTaskIncrementTick+0x160>)
   82fe6:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   82fe8:	68bb      	ldr	r3, [r7, #8]
   82fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82fec:	2201      	movs	r2, #1
   82fee:	409a      	lsls	r2, r3
   82ff0:	4b26      	ldr	r3, [pc, #152]	; (8308c <xTaskIncrementTick+0x164>)
   82ff2:	681b      	ldr	r3, [r3, #0]
   82ff4:	431a      	orrs	r2, r3
   82ff6:	4b25      	ldr	r3, [pc, #148]	; (8308c <xTaskIncrementTick+0x164>)
   82ff8:	601a      	str	r2, [r3, #0]
   82ffa:	68bb      	ldr	r3, [r7, #8]
   82ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   82ffe:	4613      	mov	r3, r2
   83000:	009b      	lsls	r3, r3, #2
   83002:	4413      	add	r3, r2
   83004:	009b      	lsls	r3, r3, #2
   83006:	4a22      	ldr	r2, [pc, #136]	; (83090 <xTaskIncrementTick+0x168>)
   83008:	441a      	add	r2, r3
   8300a:	68bb      	ldr	r3, [r7, #8]
   8300c:	3304      	adds	r3, #4
   8300e:	4610      	mov	r0, r2
   83010:	4619      	mov	r1, r3
   83012:	4b20      	ldr	r3, [pc, #128]	; (83094 <xTaskIncrementTick+0x16c>)
   83014:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   83016:	68bb      	ldr	r3, [r7, #8]
   83018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8301a:	4b1f      	ldr	r3, [pc, #124]	; (83098 <xTaskIncrementTick+0x170>)
   8301c:	681b      	ldr	r3, [r3, #0]
   8301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83020:	429a      	cmp	r2, r3
   83022:	d301      	bcc.n	83028 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   83024:	2301      	movs	r3, #1
   83026:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   83028:	e7b1      	b.n	82f8e <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8302a:	4b1b      	ldr	r3, [pc, #108]	; (83098 <xTaskIncrementTick+0x170>)
   8302c:	681b      	ldr	r3, [r3, #0]
   8302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83030:	4917      	ldr	r1, [pc, #92]	; (83090 <xTaskIncrementTick+0x168>)
   83032:	4613      	mov	r3, r2
   83034:	009b      	lsls	r3, r3, #2
   83036:	4413      	add	r3, r2
   83038:	009b      	lsls	r3, r3, #2
   8303a:	440b      	add	r3, r1
   8303c:	681b      	ldr	r3, [r3, #0]
   8303e:	2b01      	cmp	r3, #1
   83040:	d907      	bls.n	83052 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   83042:	2301      	movs	r3, #1
   83044:	617b      	str	r3, [r7, #20]
   83046:	e004      	b.n	83052 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   83048:	4b14      	ldr	r3, [pc, #80]	; (8309c <xTaskIncrementTick+0x174>)
   8304a:	681b      	ldr	r3, [r3, #0]
   8304c:	1c5a      	adds	r2, r3, #1
   8304e:	4b13      	ldr	r3, [pc, #76]	; (8309c <xTaskIncrementTick+0x174>)
   83050:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   83052:	4b13      	ldr	r3, [pc, #76]	; (830a0 <xTaskIncrementTick+0x178>)
   83054:	681b      	ldr	r3, [r3, #0]
   83056:	2b00      	cmp	r3, #0
   83058:	d001      	beq.n	8305e <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   8305a:	2301      	movs	r3, #1
   8305c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   8305e:	697b      	ldr	r3, [r7, #20]
}
   83060:	4618      	mov	r0, r3
   83062:	3718      	adds	r7, #24
   83064:	46bd      	mov	sp, r7
   83066:	bd80      	pop	{r7, pc}
   83068:	2007a5dc 	.word	0x2007a5dc
   8306c:	2007a5c0 	.word	0x2007a5c0
   83070:	2007a574 	.word	0x2007a574
   83074:	00081c85 	.word	0x00081c85
   83078:	2007a578 	.word	0x2007a578
   8307c:	2007a5d4 	.word	0x2007a5d4
   83080:	00083751 	.word	0x00083751
   83084:	20070008 	.word	0x20070008
   83088:	00081a0d 	.word	0x00081a0d
   8308c:	2007a5c4 	.word	0x2007a5c4
   83090:	2007a4e8 	.word	0x2007a4e8
   83094:	00081955 	.word	0x00081955
   83098:	2007a4e4 	.word	0x2007a4e4
   8309c:	2007a5cc 	.word	0x2007a5cc
   830a0:	2007a5d0 	.word	0x2007a5d0

000830a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   830a4:	b580      	push	{r7, lr}
   830a6:	b084      	sub	sp, #16
   830a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   830aa:	4b34      	ldr	r3, [pc, #208]	; (8317c <vTaskSwitchContext+0xd8>)
   830ac:	681b      	ldr	r3, [r3, #0]
   830ae:	2b00      	cmp	r3, #0
   830b0:	d003      	beq.n	830ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   830b2:	4b33      	ldr	r3, [pc, #204]	; (83180 <vTaskSwitchContext+0xdc>)
   830b4:	2201      	movs	r2, #1
   830b6:	601a      	str	r2, [r3, #0]
   830b8:	e05c      	b.n	83174 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   830ba:	4b31      	ldr	r3, [pc, #196]	; (83180 <vTaskSwitchContext+0xdc>)
   830bc:	2200      	movs	r2, #0
   830be:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   830c0:	4b30      	ldr	r3, [pc, #192]	; (83184 <vTaskSwitchContext+0xe0>)
   830c2:	681b      	ldr	r3, [r3, #0]
   830c4:	681a      	ldr	r2, [r3, #0]
   830c6:	4b2f      	ldr	r3, [pc, #188]	; (83184 <vTaskSwitchContext+0xe0>)
   830c8:	681b      	ldr	r3, [r3, #0]
   830ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830cc:	429a      	cmp	r2, r3
   830ce:	d808      	bhi.n	830e2 <vTaskSwitchContext+0x3e>
   830d0:	4b2c      	ldr	r3, [pc, #176]	; (83184 <vTaskSwitchContext+0xe0>)
   830d2:	681a      	ldr	r2, [r3, #0]
   830d4:	4b2b      	ldr	r3, [pc, #172]	; (83184 <vTaskSwitchContext+0xe0>)
   830d6:	681b      	ldr	r3, [r3, #0]
   830d8:	3334      	adds	r3, #52	; 0x34
   830da:	4610      	mov	r0, r2
   830dc:	4619      	mov	r1, r3
   830de:	4b2a      	ldr	r3, [pc, #168]	; (83188 <vTaskSwitchContext+0xe4>)
   830e0:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   830e2:	4b28      	ldr	r3, [pc, #160]	; (83184 <vTaskSwitchContext+0xe0>)
   830e4:	681b      	ldr	r3, [r3, #0]
   830e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   830e8:	4618      	mov	r0, r3
   830ea:	4928      	ldr	r1, [pc, #160]	; (8318c <vTaskSwitchContext+0xe8>)
   830ec:	2214      	movs	r2, #20
   830ee:	4b28      	ldr	r3, [pc, #160]	; (83190 <vTaskSwitchContext+0xec>)
   830f0:	4798      	blx	r3
   830f2:	4603      	mov	r3, r0
   830f4:	2b00      	cmp	r3, #0
   830f6:	d008      	beq.n	8310a <vTaskSwitchContext+0x66>
   830f8:	4b22      	ldr	r3, [pc, #136]	; (83184 <vTaskSwitchContext+0xe0>)
   830fa:	681a      	ldr	r2, [r3, #0]
   830fc:	4b21      	ldr	r3, [pc, #132]	; (83184 <vTaskSwitchContext+0xe0>)
   830fe:	681b      	ldr	r3, [r3, #0]
   83100:	3334      	adds	r3, #52	; 0x34
   83102:	4610      	mov	r0, r2
   83104:	4619      	mov	r1, r3
   83106:	4b20      	ldr	r3, [pc, #128]	; (83188 <vTaskSwitchContext+0xe4>)
   83108:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8310a:	4b22      	ldr	r3, [pc, #136]	; (83194 <vTaskSwitchContext+0xf0>)
   8310c:	681b      	ldr	r3, [r3, #0]
   8310e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   83110:	687b      	ldr	r3, [r7, #4]
   83112:	fab3 f383 	clz	r3, r3
   83116:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   83118:	78fb      	ldrb	r3, [r7, #3]
   8311a:	f1c3 031f 	rsb	r3, r3, #31
   8311e:	60fb      	str	r3, [r7, #12]
   83120:	491d      	ldr	r1, [pc, #116]	; (83198 <vTaskSwitchContext+0xf4>)
   83122:	68fa      	ldr	r2, [r7, #12]
   83124:	4613      	mov	r3, r2
   83126:	009b      	lsls	r3, r3, #2
   83128:	4413      	add	r3, r2
   8312a:	009b      	lsls	r3, r3, #2
   8312c:	440b      	add	r3, r1
   8312e:	681b      	ldr	r3, [r3, #0]
   83130:	2b00      	cmp	r3, #0
   83132:	d102      	bne.n	8313a <vTaskSwitchContext+0x96>
   83134:	4b19      	ldr	r3, [pc, #100]	; (8319c <vTaskSwitchContext+0xf8>)
   83136:	4798      	blx	r3
   83138:	e7fe      	b.n	83138 <vTaskSwitchContext+0x94>
   8313a:	68fa      	ldr	r2, [r7, #12]
   8313c:	4613      	mov	r3, r2
   8313e:	009b      	lsls	r3, r3, #2
   83140:	4413      	add	r3, r2
   83142:	009b      	lsls	r3, r3, #2
   83144:	4a14      	ldr	r2, [pc, #80]	; (83198 <vTaskSwitchContext+0xf4>)
   83146:	4413      	add	r3, r2
   83148:	60bb      	str	r3, [r7, #8]
   8314a:	68bb      	ldr	r3, [r7, #8]
   8314c:	685b      	ldr	r3, [r3, #4]
   8314e:	685a      	ldr	r2, [r3, #4]
   83150:	68bb      	ldr	r3, [r7, #8]
   83152:	605a      	str	r2, [r3, #4]
   83154:	68bb      	ldr	r3, [r7, #8]
   83156:	685a      	ldr	r2, [r3, #4]
   83158:	68bb      	ldr	r3, [r7, #8]
   8315a:	3308      	adds	r3, #8
   8315c:	429a      	cmp	r2, r3
   8315e:	d104      	bne.n	8316a <vTaskSwitchContext+0xc6>
   83160:	68bb      	ldr	r3, [r7, #8]
   83162:	685b      	ldr	r3, [r3, #4]
   83164:	685a      	ldr	r2, [r3, #4]
   83166:	68bb      	ldr	r3, [r7, #8]
   83168:	605a      	str	r2, [r3, #4]
   8316a:	68bb      	ldr	r3, [r7, #8]
   8316c:	685b      	ldr	r3, [r3, #4]
   8316e:	68da      	ldr	r2, [r3, #12]
   83170:	4b04      	ldr	r3, [pc, #16]	; (83184 <vTaskSwitchContext+0xe0>)
   83172:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   83174:	3710      	adds	r7, #16
   83176:	46bd      	mov	sp, r7
   83178:	bd80      	pop	{r7, pc}
   8317a:	bf00      	nop
   8317c:	2007a5dc 	.word	0x2007a5dc
   83180:	2007a5d0 	.word	0x2007a5d0
   83184:	2007a4e4 	.word	0x2007a4e4
   83188:	00084805 	.word	0x00084805
   8318c:	00084de0 	.word	0x00084de0
   83190:	00084a89 	.word	0x00084a89
   83194:	2007a5c4 	.word	0x2007a5c4
   83198:	2007a4e8 	.word	0x2007a4e8
   8319c:	00081c85 	.word	0x00081c85

000831a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   831a0:	b580      	push	{r7, lr}
   831a2:	b084      	sub	sp, #16
   831a4:	af00      	add	r7, sp, #0
   831a6:	6078      	str	r0, [r7, #4]
   831a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   831aa:	687b      	ldr	r3, [r7, #4]
   831ac:	2b00      	cmp	r3, #0
   831ae:	d102      	bne.n	831b6 <vTaskPlaceOnEventList+0x16>
   831b0:	4b1a      	ldr	r3, [pc, #104]	; (8321c <vTaskPlaceOnEventList+0x7c>)
   831b2:	4798      	blx	r3
   831b4:	e7fe      	b.n	831b4 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   831b6:	4b1a      	ldr	r3, [pc, #104]	; (83220 <vTaskPlaceOnEventList+0x80>)
   831b8:	681b      	ldr	r3, [r3, #0]
   831ba:	3318      	adds	r3, #24
   831bc:	6878      	ldr	r0, [r7, #4]
   831be:	4619      	mov	r1, r3
   831c0:	4b18      	ldr	r3, [pc, #96]	; (83224 <vTaskPlaceOnEventList+0x84>)
   831c2:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   831c4:	4b16      	ldr	r3, [pc, #88]	; (83220 <vTaskPlaceOnEventList+0x80>)
   831c6:	681b      	ldr	r3, [r3, #0]
   831c8:	3304      	adds	r3, #4
   831ca:	4618      	mov	r0, r3
   831cc:	4b16      	ldr	r3, [pc, #88]	; (83228 <vTaskPlaceOnEventList+0x88>)
   831ce:	4798      	blx	r3
   831d0:	4603      	mov	r3, r0
   831d2:	2b00      	cmp	r3, #0
   831d4:	d10b      	bne.n	831ee <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   831d6:	4b12      	ldr	r3, [pc, #72]	; (83220 <vTaskPlaceOnEventList+0x80>)
   831d8:	681b      	ldr	r3, [r3, #0]
   831da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   831dc:	2201      	movs	r2, #1
   831de:	fa02 f303 	lsl.w	r3, r2, r3
   831e2:	43da      	mvns	r2, r3
   831e4:	4b11      	ldr	r3, [pc, #68]	; (8322c <vTaskPlaceOnEventList+0x8c>)
   831e6:	681b      	ldr	r3, [r3, #0]
   831e8:	401a      	ands	r2, r3
   831ea:	4b10      	ldr	r3, [pc, #64]	; (8322c <vTaskPlaceOnEventList+0x8c>)
   831ec:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   831ee:	683b      	ldr	r3, [r7, #0]
   831f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   831f4:	d107      	bne.n	83206 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   831f6:	4b0a      	ldr	r3, [pc, #40]	; (83220 <vTaskPlaceOnEventList+0x80>)
   831f8:	681b      	ldr	r3, [r3, #0]
   831fa:	3304      	adds	r3, #4
   831fc:	480c      	ldr	r0, [pc, #48]	; (83230 <vTaskPlaceOnEventList+0x90>)
   831fe:	4619      	mov	r1, r3
   83200:	4b0c      	ldr	r3, [pc, #48]	; (83234 <vTaskPlaceOnEventList+0x94>)
   83202:	4798      	blx	r3
   83204:	e007      	b.n	83216 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   83206:	4b0c      	ldr	r3, [pc, #48]	; (83238 <vTaskPlaceOnEventList+0x98>)
   83208:	681a      	ldr	r2, [r3, #0]
   8320a:	683b      	ldr	r3, [r7, #0]
   8320c:	4413      	add	r3, r2
   8320e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   83210:	68f8      	ldr	r0, [r7, #12]
   83212:	4b0a      	ldr	r3, [pc, #40]	; (8323c <vTaskPlaceOnEventList+0x9c>)
   83214:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   83216:	3710      	adds	r7, #16
   83218:	46bd      	mov	sp, r7
   8321a:	bd80      	pop	{r7, pc}
   8321c:	00081c85 	.word	0x00081c85
   83220:	2007a4e4 	.word	0x2007a4e4
   83224:	0008199d 	.word	0x0008199d
   83228:	00081a0d 	.word	0x00081a0d
   8322c:	2007a5c4 	.word	0x2007a5c4
   83230:	2007a5a8 	.word	0x2007a5a8
   83234:	00081955 	.word	0x00081955
   83238:	2007a5c0 	.word	0x2007a5c0
   8323c:	0008364d 	.word	0x0008364d

00083240 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   83240:	b580      	push	{r7, lr}
   83242:	b084      	sub	sp, #16
   83244:	af00      	add	r7, sp, #0
   83246:	6078      	str	r0, [r7, #4]
   83248:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   8324a:	687b      	ldr	r3, [r7, #4]
   8324c:	2b00      	cmp	r3, #0
   8324e:	d102      	bne.n	83256 <vTaskPlaceOnEventListRestricted+0x16>
   83250:	4b14      	ldr	r3, [pc, #80]	; (832a4 <vTaskPlaceOnEventListRestricted+0x64>)
   83252:	4798      	blx	r3
   83254:	e7fe      	b.n	83254 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   83256:	4b14      	ldr	r3, [pc, #80]	; (832a8 <vTaskPlaceOnEventListRestricted+0x68>)
   83258:	681b      	ldr	r3, [r3, #0]
   8325a:	3318      	adds	r3, #24
   8325c:	6878      	ldr	r0, [r7, #4]
   8325e:	4619      	mov	r1, r3
   83260:	4b12      	ldr	r3, [pc, #72]	; (832ac <vTaskPlaceOnEventListRestricted+0x6c>)
   83262:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   83264:	4b10      	ldr	r3, [pc, #64]	; (832a8 <vTaskPlaceOnEventListRestricted+0x68>)
   83266:	681b      	ldr	r3, [r3, #0]
   83268:	3304      	adds	r3, #4
   8326a:	4618      	mov	r0, r3
   8326c:	4b10      	ldr	r3, [pc, #64]	; (832b0 <vTaskPlaceOnEventListRestricted+0x70>)
   8326e:	4798      	blx	r3
   83270:	4603      	mov	r3, r0
   83272:	2b00      	cmp	r3, #0
   83274:	d10b      	bne.n	8328e <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   83276:	4b0c      	ldr	r3, [pc, #48]	; (832a8 <vTaskPlaceOnEventListRestricted+0x68>)
   83278:	681b      	ldr	r3, [r3, #0]
   8327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8327c:	2201      	movs	r2, #1
   8327e:	fa02 f303 	lsl.w	r3, r2, r3
   83282:	43da      	mvns	r2, r3
   83284:	4b0b      	ldr	r3, [pc, #44]	; (832b4 <vTaskPlaceOnEventListRestricted+0x74>)
   83286:	681b      	ldr	r3, [r3, #0]
   83288:	401a      	ands	r2, r3
   8328a:	4b0a      	ldr	r3, [pc, #40]	; (832b4 <vTaskPlaceOnEventListRestricted+0x74>)
   8328c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   8328e:	4b0a      	ldr	r3, [pc, #40]	; (832b8 <vTaskPlaceOnEventListRestricted+0x78>)
   83290:	681a      	ldr	r2, [r3, #0]
   83292:	683b      	ldr	r3, [r7, #0]
   83294:	4413      	add	r3, r2
   83296:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   83298:	68f8      	ldr	r0, [r7, #12]
   8329a:	4b08      	ldr	r3, [pc, #32]	; (832bc <vTaskPlaceOnEventListRestricted+0x7c>)
   8329c:	4798      	blx	r3
	}
   8329e:	3710      	adds	r7, #16
   832a0:	46bd      	mov	sp, r7
   832a2:	bd80      	pop	{r7, pc}
   832a4:	00081c85 	.word	0x00081c85
   832a8:	2007a4e4 	.word	0x2007a4e4
   832ac:	00081955 	.word	0x00081955
   832b0:	00081a0d 	.word	0x00081a0d
   832b4:	2007a5c4 	.word	0x2007a5c4
   832b8:	2007a5c0 	.word	0x2007a5c0
   832bc:	0008364d 	.word	0x0008364d

000832c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   832c0:	b580      	push	{r7, lr}
   832c2:	b084      	sub	sp, #16
   832c4:	af00      	add	r7, sp, #0
   832c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   832c8:	687b      	ldr	r3, [r7, #4]
   832ca:	68db      	ldr	r3, [r3, #12]
   832cc:	68db      	ldr	r3, [r3, #12]
   832ce:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   832d0:	68bb      	ldr	r3, [r7, #8]
   832d2:	2b00      	cmp	r3, #0
   832d4:	d102      	bne.n	832dc <xTaskRemoveFromEventList+0x1c>
   832d6:	4b21      	ldr	r3, [pc, #132]	; (8335c <xTaskRemoveFromEventList+0x9c>)
   832d8:	4798      	blx	r3
   832da:	e7fe      	b.n	832da <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   832dc:	68bb      	ldr	r3, [r7, #8]
   832de:	3318      	adds	r3, #24
   832e0:	4618      	mov	r0, r3
   832e2:	4b1f      	ldr	r3, [pc, #124]	; (83360 <xTaskRemoveFromEventList+0xa0>)
   832e4:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   832e6:	4b1f      	ldr	r3, [pc, #124]	; (83364 <xTaskRemoveFromEventList+0xa4>)
   832e8:	681b      	ldr	r3, [r3, #0]
   832ea:	2b00      	cmp	r3, #0
   832ec:	d11c      	bne.n	83328 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   832ee:	68bb      	ldr	r3, [r7, #8]
   832f0:	3304      	adds	r3, #4
   832f2:	4618      	mov	r0, r3
   832f4:	4b1a      	ldr	r3, [pc, #104]	; (83360 <xTaskRemoveFromEventList+0xa0>)
   832f6:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   832f8:	68bb      	ldr	r3, [r7, #8]
   832fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   832fc:	2201      	movs	r2, #1
   832fe:	409a      	lsls	r2, r3
   83300:	4b19      	ldr	r3, [pc, #100]	; (83368 <xTaskRemoveFromEventList+0xa8>)
   83302:	681b      	ldr	r3, [r3, #0]
   83304:	431a      	orrs	r2, r3
   83306:	4b18      	ldr	r3, [pc, #96]	; (83368 <xTaskRemoveFromEventList+0xa8>)
   83308:	601a      	str	r2, [r3, #0]
   8330a:	68bb      	ldr	r3, [r7, #8]
   8330c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8330e:	4613      	mov	r3, r2
   83310:	009b      	lsls	r3, r3, #2
   83312:	4413      	add	r3, r2
   83314:	009b      	lsls	r3, r3, #2
   83316:	4a15      	ldr	r2, [pc, #84]	; (8336c <xTaskRemoveFromEventList+0xac>)
   83318:	441a      	add	r2, r3
   8331a:	68bb      	ldr	r3, [r7, #8]
   8331c:	3304      	adds	r3, #4
   8331e:	4610      	mov	r0, r2
   83320:	4619      	mov	r1, r3
   83322:	4b13      	ldr	r3, [pc, #76]	; (83370 <xTaskRemoveFromEventList+0xb0>)
   83324:	4798      	blx	r3
   83326:	e005      	b.n	83334 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   83328:	68bb      	ldr	r3, [r7, #8]
   8332a:	3318      	adds	r3, #24
   8332c:	4811      	ldr	r0, [pc, #68]	; (83374 <xTaskRemoveFromEventList+0xb4>)
   8332e:	4619      	mov	r1, r3
   83330:	4b0f      	ldr	r3, [pc, #60]	; (83370 <xTaskRemoveFromEventList+0xb0>)
   83332:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   83334:	68bb      	ldr	r3, [r7, #8]
   83336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83338:	4b0f      	ldr	r3, [pc, #60]	; (83378 <xTaskRemoveFromEventList+0xb8>)
   8333a:	681b      	ldr	r3, [r3, #0]
   8333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8333e:	429a      	cmp	r2, r3
   83340:	d905      	bls.n	8334e <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   83342:	2301      	movs	r3, #1
   83344:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   83346:	4b0d      	ldr	r3, [pc, #52]	; (8337c <xTaskRemoveFromEventList+0xbc>)
   83348:	2201      	movs	r2, #1
   8334a:	601a      	str	r2, [r3, #0]
   8334c:	e001      	b.n	83352 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   8334e:	2300      	movs	r3, #0
   83350:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   83352:	68fb      	ldr	r3, [r7, #12]
}
   83354:	4618      	mov	r0, r3
   83356:	3710      	adds	r7, #16
   83358:	46bd      	mov	sp, r7
   8335a:	bd80      	pop	{r7, pc}
   8335c:	00081c85 	.word	0x00081c85
   83360:	00081a0d 	.word	0x00081a0d
   83364:	2007a5dc 	.word	0x2007a5dc
   83368:	2007a5c4 	.word	0x2007a5c4
   8336c:	2007a4e8 	.word	0x2007a4e8
   83370:	00081955 	.word	0x00081955
   83374:	2007a57c 	.word	0x2007a57c
   83378:	2007a4e4 	.word	0x2007a4e4
   8337c:	2007a5d0 	.word	0x2007a5d0

00083380 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   83380:	b580      	push	{r7, lr}
   83382:	b082      	sub	sp, #8
   83384:	af00      	add	r7, sp, #0
   83386:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   83388:	687b      	ldr	r3, [r7, #4]
   8338a:	2b00      	cmp	r3, #0
   8338c:	d102      	bne.n	83394 <vTaskSetTimeOutState+0x14>
   8338e:	4b07      	ldr	r3, [pc, #28]	; (833ac <vTaskSetTimeOutState+0x2c>)
   83390:	4798      	blx	r3
   83392:	e7fe      	b.n	83392 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   83394:	4b06      	ldr	r3, [pc, #24]	; (833b0 <vTaskSetTimeOutState+0x30>)
   83396:	681a      	ldr	r2, [r3, #0]
   83398:	687b      	ldr	r3, [r7, #4]
   8339a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8339c:	4b05      	ldr	r3, [pc, #20]	; (833b4 <vTaskSetTimeOutState+0x34>)
   8339e:	681a      	ldr	r2, [r3, #0]
   833a0:	687b      	ldr	r3, [r7, #4]
   833a2:	605a      	str	r2, [r3, #4]
}
   833a4:	3708      	adds	r7, #8
   833a6:	46bd      	mov	sp, r7
   833a8:	bd80      	pop	{r7, pc}
   833aa:	bf00      	nop
   833ac:	00081c85 	.word	0x00081c85
   833b0:	2007a5d4 	.word	0x2007a5d4
   833b4:	2007a5c0 	.word	0x2007a5c0

000833b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   833b8:	b580      	push	{r7, lr}
   833ba:	b084      	sub	sp, #16
   833bc:	af00      	add	r7, sp, #0
   833be:	6078      	str	r0, [r7, #4]
   833c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   833c2:	687b      	ldr	r3, [r7, #4]
   833c4:	2b00      	cmp	r3, #0
   833c6:	d102      	bne.n	833ce <xTaskCheckForTimeOut+0x16>
   833c8:	4b21      	ldr	r3, [pc, #132]	; (83450 <xTaskCheckForTimeOut+0x98>)
   833ca:	4798      	blx	r3
   833cc:	e7fe      	b.n	833cc <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   833ce:	683b      	ldr	r3, [r7, #0]
   833d0:	2b00      	cmp	r3, #0
   833d2:	d102      	bne.n	833da <xTaskCheckForTimeOut+0x22>
   833d4:	4b1e      	ldr	r3, [pc, #120]	; (83450 <xTaskCheckForTimeOut+0x98>)
   833d6:	4798      	blx	r3
   833d8:	e7fe      	b.n	833d8 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   833da:	4b1e      	ldr	r3, [pc, #120]	; (83454 <xTaskCheckForTimeOut+0x9c>)
   833dc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   833de:	4b1e      	ldr	r3, [pc, #120]	; (83458 <xTaskCheckForTimeOut+0xa0>)
   833e0:	681b      	ldr	r3, [r3, #0]
   833e2:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   833e4:	683b      	ldr	r3, [r7, #0]
   833e6:	681b      	ldr	r3, [r3, #0]
   833e8:	f1b3 3fff 	cmp.w	r3, #4294967295
   833ec:	d102      	bne.n	833f4 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   833ee:	2300      	movs	r3, #0
   833f0:	60fb      	str	r3, [r7, #12]
   833f2:	e026      	b.n	83442 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   833f4:	687b      	ldr	r3, [r7, #4]
   833f6:	681a      	ldr	r2, [r3, #0]
   833f8:	4b18      	ldr	r3, [pc, #96]	; (8345c <xTaskCheckForTimeOut+0xa4>)
   833fa:	681b      	ldr	r3, [r3, #0]
   833fc:	429a      	cmp	r2, r3
   833fe:	d007      	beq.n	83410 <xTaskCheckForTimeOut+0x58>
   83400:	687b      	ldr	r3, [r7, #4]
   83402:	685a      	ldr	r2, [r3, #4]
   83404:	68bb      	ldr	r3, [r7, #8]
   83406:	429a      	cmp	r2, r3
   83408:	d802      	bhi.n	83410 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8340a:	2301      	movs	r3, #1
   8340c:	60fb      	str	r3, [r7, #12]
   8340e:	e018      	b.n	83442 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   83410:	687b      	ldr	r3, [r7, #4]
   83412:	685b      	ldr	r3, [r3, #4]
   83414:	68ba      	ldr	r2, [r7, #8]
   83416:	1ad2      	subs	r2, r2, r3
   83418:	683b      	ldr	r3, [r7, #0]
   8341a:	681b      	ldr	r3, [r3, #0]
   8341c:	429a      	cmp	r2, r3
   8341e:	d20e      	bcs.n	8343e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   83420:	683b      	ldr	r3, [r7, #0]
   83422:	681a      	ldr	r2, [r3, #0]
   83424:	687b      	ldr	r3, [r7, #4]
   83426:	6859      	ldr	r1, [r3, #4]
   83428:	68bb      	ldr	r3, [r7, #8]
   8342a:	1acb      	subs	r3, r1, r3
   8342c:	441a      	add	r2, r3
   8342e:	683b      	ldr	r3, [r7, #0]
   83430:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   83432:	6878      	ldr	r0, [r7, #4]
   83434:	4b0a      	ldr	r3, [pc, #40]	; (83460 <xTaskCheckForTimeOut+0xa8>)
   83436:	4798      	blx	r3
			xReturn = pdFALSE;
   83438:	2300      	movs	r3, #0
   8343a:	60fb      	str	r3, [r7, #12]
   8343c:	e001      	b.n	83442 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   8343e:	2301      	movs	r3, #1
   83440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83442:	4b08      	ldr	r3, [pc, #32]	; (83464 <xTaskCheckForTimeOut+0xac>)
   83444:	4798      	blx	r3

	return xReturn;
   83446:	68fb      	ldr	r3, [r7, #12]
}
   83448:	4618      	mov	r0, r3
   8344a:	3710      	adds	r7, #16
   8344c:	46bd      	mov	sp, r7
   8344e:	bd80      	pop	{r7, pc}
   83450:	00081c85 	.word	0x00081c85
   83454:	00081c09 	.word	0x00081c09
   83458:	2007a5c0 	.word	0x2007a5c0
   8345c:	2007a5d4 	.word	0x2007a5d4
   83460:	00083381 	.word	0x00083381
   83464:	00081c4d 	.word	0x00081c4d

00083468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   83468:	b480      	push	{r7}
   8346a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   8346c:	4b03      	ldr	r3, [pc, #12]	; (8347c <vTaskMissedYield+0x14>)
   8346e:	2201      	movs	r2, #1
   83470:	601a      	str	r2, [r3, #0]
}
   83472:	46bd      	mov	sp, r7
   83474:	f85d 7b04 	ldr.w	r7, [sp], #4
   83478:	4770      	bx	lr
   8347a:	bf00      	nop
   8347c:	2007a5d0 	.word	0x2007a5d0

00083480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   83480:	b580      	push	{r7, lr}
   83482:	b082      	sub	sp, #8
   83484:	af00      	add	r7, sp, #0
   83486:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   83488:	4b04      	ldr	r3, [pc, #16]	; (8349c <prvIdleTask+0x1c>)
   8348a:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   8348c:	4b04      	ldr	r3, [pc, #16]	; (834a0 <prvIdleTask+0x20>)
   8348e:	681b      	ldr	r3, [r3, #0]
   83490:	2b01      	cmp	r3, #1
   83492:	d901      	bls.n	83498 <prvIdleTask+0x18>
			{
				taskYIELD();
   83494:	4b03      	ldr	r3, [pc, #12]	; (834a4 <prvIdleTask+0x24>)
   83496:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   83498:	e7f6      	b.n	83488 <prvIdleTask+0x8>
   8349a:	bf00      	nop
   8349c:	000835c1 	.word	0x000835c1
   834a0:	2007a4e8 	.word	0x2007a4e8
   834a4:	00081be9 	.word	0x00081be9

000834a8 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   834a8:	b580      	push	{r7, lr}
   834aa:	b086      	sub	sp, #24
   834ac:	af00      	add	r7, sp, #0
   834ae:	60f8      	str	r0, [r7, #12]
   834b0:	60b9      	str	r1, [r7, #8]
   834b2:	607a      	str	r2, [r7, #4]
   834b4:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   834b6:	2300      	movs	r3, #0
   834b8:	617b      	str	r3, [r7, #20]
   834ba:	e012      	b.n	834e2 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   834bc:	68ba      	ldr	r2, [r7, #8]
   834be:	697b      	ldr	r3, [r7, #20]
   834c0:	4413      	add	r3, r2
   834c2:	781a      	ldrb	r2, [r3, #0]
   834c4:	68f9      	ldr	r1, [r7, #12]
   834c6:	697b      	ldr	r3, [r7, #20]
   834c8:	440b      	add	r3, r1
   834ca:	3330      	adds	r3, #48	; 0x30
   834cc:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   834ce:	68ba      	ldr	r2, [r7, #8]
   834d0:	697b      	ldr	r3, [r7, #20]
   834d2:	4413      	add	r3, r2
   834d4:	781b      	ldrb	r3, [r3, #0]
   834d6:	2b00      	cmp	r3, #0
   834d8:	d100      	bne.n	834dc <prvInitialiseTCBVariables+0x34>
		{
			break;
   834da:	e005      	b.n	834e8 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   834dc:	697b      	ldr	r3, [r7, #20]
   834de:	3301      	adds	r3, #1
   834e0:	617b      	str	r3, [r7, #20]
   834e2:	697b      	ldr	r3, [r7, #20]
   834e4:	2b09      	cmp	r3, #9
   834e6:	d9e9      	bls.n	834bc <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   834e8:	68fb      	ldr	r3, [r7, #12]
   834ea:	2200      	movs	r2, #0
   834ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   834f0:	687b      	ldr	r3, [r7, #4]
   834f2:	2b04      	cmp	r3, #4
   834f4:	d901      	bls.n	834fa <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   834f6:	2304      	movs	r3, #4
   834f8:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   834fa:	68fb      	ldr	r3, [r7, #12]
   834fc:	687a      	ldr	r2, [r7, #4]
   834fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   83500:	68fb      	ldr	r3, [r7, #12]
   83502:	687a      	ldr	r2, [r7, #4]
   83504:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   83506:	68fb      	ldr	r3, [r7, #12]
   83508:	2200      	movs	r2, #0
   8350a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8350c:	68fb      	ldr	r3, [r7, #12]
   8350e:	3304      	adds	r3, #4
   83510:	4618      	mov	r0, r3
   83512:	4b0a      	ldr	r3, [pc, #40]	; (8353c <prvInitialiseTCBVariables+0x94>)
   83514:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   83516:	68fb      	ldr	r3, [r7, #12]
   83518:	3318      	adds	r3, #24
   8351a:	4618      	mov	r0, r3
   8351c:	4b07      	ldr	r3, [pc, #28]	; (8353c <prvInitialiseTCBVariables+0x94>)
   8351e:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   83520:	68fb      	ldr	r3, [r7, #12]
   83522:	68fa      	ldr	r2, [r7, #12]
   83524:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83526:	687b      	ldr	r3, [r7, #4]
   83528:	f1c3 0205 	rsb	r2, r3, #5
   8352c:	68fb      	ldr	r3, [r7, #12]
   8352e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   83530:	68fb      	ldr	r3, [r7, #12]
   83532:	68fa      	ldr	r2, [r7, #12]
   83534:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   83536:	3718      	adds	r7, #24
   83538:	46bd      	mov	sp, r7
   8353a:	bd80      	pop	{r7, pc}
   8353c:	0008193d 	.word	0x0008193d

00083540 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   83540:	b580      	push	{r7, lr}
   83542:	b082      	sub	sp, #8
   83544:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83546:	2300      	movs	r3, #0
   83548:	607b      	str	r3, [r7, #4]
   8354a:	e00c      	b.n	83566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   8354c:	687a      	ldr	r2, [r7, #4]
   8354e:	4613      	mov	r3, r2
   83550:	009b      	lsls	r3, r3, #2
   83552:	4413      	add	r3, r2
   83554:	009b      	lsls	r3, r3, #2
   83556:	4a11      	ldr	r2, [pc, #68]	; (8359c <prvInitialiseTaskLists+0x5c>)
   83558:	4413      	add	r3, r2
   8355a:	4618      	mov	r0, r3
   8355c:	4b10      	ldr	r3, [pc, #64]	; (835a0 <prvInitialiseTaskLists+0x60>)
   8355e:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   83560:	687b      	ldr	r3, [r7, #4]
   83562:	3301      	adds	r3, #1
   83564:	607b      	str	r3, [r7, #4]
   83566:	687b      	ldr	r3, [r7, #4]
   83568:	2b04      	cmp	r3, #4
   8356a:	d9ef      	bls.n	8354c <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   8356c:	480d      	ldr	r0, [pc, #52]	; (835a4 <prvInitialiseTaskLists+0x64>)
   8356e:	4b0c      	ldr	r3, [pc, #48]	; (835a0 <prvInitialiseTaskLists+0x60>)
   83570:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   83572:	480d      	ldr	r0, [pc, #52]	; (835a8 <prvInitialiseTaskLists+0x68>)
   83574:	4b0a      	ldr	r3, [pc, #40]	; (835a0 <prvInitialiseTaskLists+0x60>)
   83576:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   83578:	480c      	ldr	r0, [pc, #48]	; (835ac <prvInitialiseTaskLists+0x6c>)
   8357a:	4b09      	ldr	r3, [pc, #36]	; (835a0 <prvInitialiseTaskLists+0x60>)
   8357c:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   8357e:	480c      	ldr	r0, [pc, #48]	; (835b0 <prvInitialiseTaskLists+0x70>)
   83580:	4b07      	ldr	r3, [pc, #28]	; (835a0 <prvInitialiseTaskLists+0x60>)
   83582:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   83584:	480b      	ldr	r0, [pc, #44]	; (835b4 <prvInitialiseTaskLists+0x74>)
   83586:	4b06      	ldr	r3, [pc, #24]	; (835a0 <prvInitialiseTaskLists+0x60>)
   83588:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8358a:	4b0b      	ldr	r3, [pc, #44]	; (835b8 <prvInitialiseTaskLists+0x78>)
   8358c:	4a05      	ldr	r2, [pc, #20]	; (835a4 <prvInitialiseTaskLists+0x64>)
   8358e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   83590:	4b0a      	ldr	r3, [pc, #40]	; (835bc <prvInitialiseTaskLists+0x7c>)
   83592:	4a05      	ldr	r2, [pc, #20]	; (835a8 <prvInitialiseTaskLists+0x68>)
   83594:	601a      	str	r2, [r3, #0]
}
   83596:	3708      	adds	r7, #8
   83598:	46bd      	mov	sp, r7
   8359a:	bd80      	pop	{r7, pc}
   8359c:	2007a4e8 	.word	0x2007a4e8
   835a0:	000818fd 	.word	0x000818fd
   835a4:	2007a54c 	.word	0x2007a54c
   835a8:	2007a560 	.word	0x2007a560
   835ac:	2007a57c 	.word	0x2007a57c
   835b0:	2007a590 	.word	0x2007a590
   835b4:	2007a5a8 	.word	0x2007a5a8
   835b8:	2007a574 	.word	0x2007a574
   835bc:	2007a578 	.word	0x2007a578

000835c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   835c0:	b580      	push	{r7, lr}
   835c2:	b082      	sub	sp, #8
   835c4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   835c6:	e028      	b.n	8361a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   835c8:	4b17      	ldr	r3, [pc, #92]	; (83628 <prvCheckTasksWaitingTermination+0x68>)
   835ca:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   835cc:	4b17      	ldr	r3, [pc, #92]	; (8362c <prvCheckTasksWaitingTermination+0x6c>)
   835ce:	681b      	ldr	r3, [r3, #0]
   835d0:	2b00      	cmp	r3, #0
   835d2:	bf14      	ite	ne
   835d4:	2300      	movne	r3, #0
   835d6:	2301      	moveq	r3, #1
   835d8:	b2db      	uxtb	r3, r3
   835da:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   835dc:	4b14      	ldr	r3, [pc, #80]	; (83630 <prvCheckTasksWaitingTermination+0x70>)
   835de:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   835e0:	687b      	ldr	r3, [r7, #4]
   835e2:	2b00      	cmp	r3, #0
   835e4:	d119      	bne.n	8361a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   835e6:	4b13      	ldr	r3, [pc, #76]	; (83634 <prvCheckTasksWaitingTermination+0x74>)
   835e8:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   835ea:	4b10      	ldr	r3, [pc, #64]	; (8362c <prvCheckTasksWaitingTermination+0x6c>)
   835ec:	68db      	ldr	r3, [r3, #12]
   835ee:	68db      	ldr	r3, [r3, #12]
   835f0:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   835f2:	683b      	ldr	r3, [r7, #0]
   835f4:	3304      	adds	r3, #4
   835f6:	4618      	mov	r0, r3
   835f8:	4b0f      	ldr	r3, [pc, #60]	; (83638 <prvCheckTasksWaitingTermination+0x78>)
   835fa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   835fc:	4b0f      	ldr	r3, [pc, #60]	; (8363c <prvCheckTasksWaitingTermination+0x7c>)
   835fe:	681b      	ldr	r3, [r3, #0]
   83600:	1e5a      	subs	r2, r3, #1
   83602:	4b0e      	ldr	r3, [pc, #56]	; (8363c <prvCheckTasksWaitingTermination+0x7c>)
   83604:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   83606:	4b0e      	ldr	r3, [pc, #56]	; (83640 <prvCheckTasksWaitingTermination+0x80>)
   83608:	681b      	ldr	r3, [r3, #0]
   8360a:	1e5a      	subs	r2, r3, #1
   8360c:	4b0c      	ldr	r3, [pc, #48]	; (83640 <prvCheckTasksWaitingTermination+0x80>)
   8360e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   83610:	4b0c      	ldr	r3, [pc, #48]	; (83644 <prvCheckTasksWaitingTermination+0x84>)
   83612:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   83614:	6838      	ldr	r0, [r7, #0]
   83616:	4b0c      	ldr	r3, [pc, #48]	; (83648 <prvCheckTasksWaitingTermination+0x88>)
   83618:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   8361a:	4b09      	ldr	r3, [pc, #36]	; (83640 <prvCheckTasksWaitingTermination+0x80>)
   8361c:	681b      	ldr	r3, [r3, #0]
   8361e:	2b00      	cmp	r3, #0
   83620:	d1d2      	bne.n	835c8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   83622:	3708      	adds	r7, #8
   83624:	46bd      	mov	sp, r7
   83626:	bd80      	pop	{r7, pc}
   83628:	00082dbd 	.word	0x00082dbd
   8362c:	2007a590 	.word	0x2007a590
   83630:	00082dd9 	.word	0x00082dd9
   83634:	00081c09 	.word	0x00081c09
   83638:	00081a0d 	.word	0x00081a0d
   8363c:	2007a5bc 	.word	0x2007a5bc
   83640:	2007a5a4 	.word	0x2007a5a4
   83644:	00081c4d 	.word	0x00081c4d
   83648:	0008372d 	.word	0x0008372d

0008364c <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   8364c:	b580      	push	{r7, lr}
   8364e:	b082      	sub	sp, #8
   83650:	af00      	add	r7, sp, #0
   83652:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   83654:	4b13      	ldr	r3, [pc, #76]	; (836a4 <prvAddCurrentTaskToDelayedList+0x58>)
   83656:	681b      	ldr	r3, [r3, #0]
   83658:	687a      	ldr	r2, [r7, #4]
   8365a:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   8365c:	4b12      	ldr	r3, [pc, #72]	; (836a8 <prvAddCurrentTaskToDelayedList+0x5c>)
   8365e:	681b      	ldr	r3, [r3, #0]
   83660:	687a      	ldr	r2, [r7, #4]
   83662:	429a      	cmp	r2, r3
   83664:	d209      	bcs.n	8367a <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   83666:	4b11      	ldr	r3, [pc, #68]	; (836ac <prvAddCurrentTaskToDelayedList+0x60>)
   83668:	681a      	ldr	r2, [r3, #0]
   8366a:	4b0e      	ldr	r3, [pc, #56]	; (836a4 <prvAddCurrentTaskToDelayedList+0x58>)
   8366c:	681b      	ldr	r3, [r3, #0]
   8366e:	3304      	adds	r3, #4
   83670:	4610      	mov	r0, r2
   83672:	4619      	mov	r1, r3
   83674:	4b0e      	ldr	r3, [pc, #56]	; (836b0 <prvAddCurrentTaskToDelayedList+0x64>)
   83676:	4798      	blx	r3
   83678:	e010      	b.n	8369c <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   8367a:	4b0e      	ldr	r3, [pc, #56]	; (836b4 <prvAddCurrentTaskToDelayedList+0x68>)
   8367c:	681a      	ldr	r2, [r3, #0]
   8367e:	4b09      	ldr	r3, [pc, #36]	; (836a4 <prvAddCurrentTaskToDelayedList+0x58>)
   83680:	681b      	ldr	r3, [r3, #0]
   83682:	3304      	adds	r3, #4
   83684:	4610      	mov	r0, r2
   83686:	4619      	mov	r1, r3
   83688:	4b09      	ldr	r3, [pc, #36]	; (836b0 <prvAddCurrentTaskToDelayedList+0x64>)
   8368a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8368c:	4b0a      	ldr	r3, [pc, #40]	; (836b8 <prvAddCurrentTaskToDelayedList+0x6c>)
   8368e:	681b      	ldr	r3, [r3, #0]
   83690:	687a      	ldr	r2, [r7, #4]
   83692:	429a      	cmp	r2, r3
   83694:	d202      	bcs.n	8369c <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   83696:	4b08      	ldr	r3, [pc, #32]	; (836b8 <prvAddCurrentTaskToDelayedList+0x6c>)
   83698:	687a      	ldr	r2, [r7, #4]
   8369a:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   8369c:	3708      	adds	r7, #8
   8369e:	46bd      	mov	sp, r7
   836a0:	bd80      	pop	{r7, pc}
   836a2:	bf00      	nop
   836a4:	2007a4e4 	.word	0x2007a4e4
   836a8:	2007a5c0 	.word	0x2007a5c0
   836ac:	2007a578 	.word	0x2007a578
   836b0:	0008199d 	.word	0x0008199d
   836b4:	2007a574 	.word	0x2007a574
   836b8:	20070008 	.word	0x20070008

000836bc <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   836bc:	b580      	push	{r7, lr}
   836be:	b084      	sub	sp, #16
   836c0:	af00      	add	r7, sp, #0
   836c2:	4603      	mov	r3, r0
   836c4:	6039      	str	r1, [r7, #0]
   836c6:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   836c8:	2048      	movs	r0, #72	; 0x48
   836ca:	4b15      	ldr	r3, [pc, #84]	; (83720 <prvAllocateTCBAndStack+0x64>)
   836cc:	4798      	blx	r3
   836ce:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   836d0:	68fb      	ldr	r3, [r7, #12]
   836d2:	2b00      	cmp	r3, #0
   836d4:	d01f      	beq.n	83716 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   836d6:	683b      	ldr	r3, [r7, #0]
   836d8:	2b00      	cmp	r3, #0
   836da:	d106      	bne.n	836ea <prvAllocateTCBAndStack+0x2e>
   836dc:	88fb      	ldrh	r3, [r7, #6]
   836de:	009b      	lsls	r3, r3, #2
   836e0:	4618      	mov	r0, r3
   836e2:	4b0f      	ldr	r3, [pc, #60]	; (83720 <prvAllocateTCBAndStack+0x64>)
   836e4:	4798      	blx	r3
   836e6:	4603      	mov	r3, r0
   836e8:	e000      	b.n	836ec <prvAllocateTCBAndStack+0x30>
   836ea:	683b      	ldr	r3, [r7, #0]
   836ec:	68fa      	ldr	r2, [r7, #12]
   836ee:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   836f0:	68fb      	ldr	r3, [r7, #12]
   836f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   836f4:	2b00      	cmp	r3, #0
   836f6:	d105      	bne.n	83704 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   836f8:	68f8      	ldr	r0, [r7, #12]
   836fa:	4b0a      	ldr	r3, [pc, #40]	; (83724 <prvAllocateTCBAndStack+0x68>)
   836fc:	4798      	blx	r3
			pxNewTCB = NULL;
   836fe:	2300      	movs	r3, #0
   83700:	60fb      	str	r3, [r7, #12]
   83702:	e008      	b.n	83716 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   83704:	68fb      	ldr	r3, [r7, #12]
   83706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83708:	88fb      	ldrh	r3, [r7, #6]
   8370a:	009b      	lsls	r3, r3, #2
   8370c:	4610      	mov	r0, r2
   8370e:	21a5      	movs	r1, #165	; 0xa5
   83710:	461a      	mov	r2, r3
   83712:	4b05      	ldr	r3, [pc, #20]	; (83728 <prvAllocateTCBAndStack+0x6c>)
   83714:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   83716:	68fb      	ldr	r3, [r7, #12]
}
   83718:	4618      	mov	r0, r3
   8371a:	3710      	adds	r7, #16
   8371c:	46bd      	mov	sp, r7
   8371e:	bd80      	pop	{r7, pc}
   83720:	00081da9 	.word	0x00081da9
   83724:	00081f21 	.word	0x00081f21
   83728:	00084bdd 	.word	0x00084bdd

0008372c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   8372c:	b580      	push	{r7, lr}
   8372e:	b082      	sub	sp, #8
   83730:	af00      	add	r7, sp, #0
   83732:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   83734:	687b      	ldr	r3, [r7, #4]
   83736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83738:	4618      	mov	r0, r3
   8373a:	4b04      	ldr	r3, [pc, #16]	; (8374c <prvDeleteTCB+0x20>)
   8373c:	4798      	blx	r3
		vPortFree( pxTCB );
   8373e:	6878      	ldr	r0, [r7, #4]
   83740:	4b02      	ldr	r3, [pc, #8]	; (8374c <prvDeleteTCB+0x20>)
   83742:	4798      	blx	r3
	}
   83744:	3708      	adds	r7, #8
   83746:	46bd      	mov	sp, r7
   83748:	bd80      	pop	{r7, pc}
   8374a:	bf00      	nop
   8374c:	00081f21 	.word	0x00081f21

00083750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   83750:	b480      	push	{r7}
   83752:	b083      	sub	sp, #12
   83754:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   83756:	4b0e      	ldr	r3, [pc, #56]	; (83790 <prvResetNextTaskUnblockTime+0x40>)
   83758:	681b      	ldr	r3, [r3, #0]
   8375a:	681b      	ldr	r3, [r3, #0]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d101      	bne.n	83764 <prvResetNextTaskUnblockTime+0x14>
   83760:	2301      	movs	r3, #1
   83762:	e000      	b.n	83766 <prvResetNextTaskUnblockTime+0x16>
   83764:	2300      	movs	r3, #0
   83766:	2b00      	cmp	r3, #0
   83768:	d004      	beq.n	83774 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   8376a:	4b0a      	ldr	r3, [pc, #40]	; (83794 <prvResetNextTaskUnblockTime+0x44>)
   8376c:	f04f 32ff 	mov.w	r2, #4294967295
   83770:	601a      	str	r2, [r3, #0]
   83772:	e008      	b.n	83786 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   83774:	4b06      	ldr	r3, [pc, #24]	; (83790 <prvResetNextTaskUnblockTime+0x40>)
   83776:	681b      	ldr	r3, [r3, #0]
   83778:	68db      	ldr	r3, [r3, #12]
   8377a:	68db      	ldr	r3, [r3, #12]
   8377c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   8377e:	687b      	ldr	r3, [r7, #4]
   83780:	685a      	ldr	r2, [r3, #4]
   83782:	4b04      	ldr	r3, [pc, #16]	; (83794 <prvResetNextTaskUnblockTime+0x44>)
   83784:	601a      	str	r2, [r3, #0]
	}
}
   83786:	370c      	adds	r7, #12
   83788:	46bd      	mov	sp, r7
   8378a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8378e:	4770      	bx	lr
   83790:	2007a574 	.word	0x2007a574
   83794:	20070008 	.word	0x20070008

00083798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   83798:	b480      	push	{r7}
   8379a:	b083      	sub	sp, #12
   8379c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   8379e:	4b0b      	ldr	r3, [pc, #44]	; (837cc <xTaskGetSchedulerState+0x34>)
   837a0:	681b      	ldr	r3, [r3, #0]
   837a2:	2b00      	cmp	r3, #0
   837a4:	d102      	bne.n	837ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   837a6:	2301      	movs	r3, #1
   837a8:	607b      	str	r3, [r7, #4]
   837aa:	e008      	b.n	837be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   837ac:	4b08      	ldr	r3, [pc, #32]	; (837d0 <xTaskGetSchedulerState+0x38>)
   837ae:	681b      	ldr	r3, [r3, #0]
   837b0:	2b00      	cmp	r3, #0
   837b2:	d102      	bne.n	837ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   837b4:	2302      	movs	r3, #2
   837b6:	607b      	str	r3, [r7, #4]
   837b8:	e001      	b.n	837be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   837ba:	2300      	movs	r3, #0
   837bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   837be:	687b      	ldr	r3, [r7, #4]
	}
   837c0:	4618      	mov	r0, r3
   837c2:	370c      	adds	r7, #12
   837c4:	46bd      	mov	sp, r7
   837c6:	f85d 7b04 	ldr.w	r7, [sp], #4
   837ca:	4770      	bx	lr
   837cc:	2007a5c8 	.word	0x2007a5c8
   837d0:	2007a5dc 	.word	0x2007a5dc

000837d4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   837d4:	b580      	push	{r7, lr}
   837d6:	b084      	sub	sp, #16
   837d8:	af00      	add	r7, sp, #0
   837da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   837dc:	687b      	ldr	r3, [r7, #4]
   837de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   837e0:	687b      	ldr	r3, [r7, #4]
   837e2:	2b00      	cmp	r3, #0
   837e4:	d062      	beq.n	838ac <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   837e6:	68fb      	ldr	r3, [r7, #12]
   837e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   837ea:	4b32      	ldr	r3, [pc, #200]	; (838b4 <vTaskPriorityInherit+0xe0>)
   837ec:	681b      	ldr	r3, [r3, #0]
   837ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   837f0:	429a      	cmp	r2, r3
   837f2:	d25b      	bcs.n	838ac <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   837f4:	68fb      	ldr	r3, [r7, #12]
   837f6:	699b      	ldr	r3, [r3, #24]
   837f8:	2b00      	cmp	r3, #0
   837fa:	db06      	blt.n	8380a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   837fc:	4b2d      	ldr	r3, [pc, #180]	; (838b4 <vTaskPriorityInherit+0xe0>)
   837fe:	681b      	ldr	r3, [r3, #0]
   83800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83802:	f1c3 0205 	rsb	r2, r3, #5
   83806:	68fb      	ldr	r3, [r7, #12]
   83808:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   8380a:	68fb      	ldr	r3, [r7, #12]
   8380c:	6959      	ldr	r1, [r3, #20]
   8380e:	68fb      	ldr	r3, [r7, #12]
   83810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83812:	4613      	mov	r3, r2
   83814:	009b      	lsls	r3, r3, #2
   83816:	4413      	add	r3, r2
   83818:	009b      	lsls	r3, r3, #2
   8381a:	4a27      	ldr	r2, [pc, #156]	; (838b8 <vTaskPriorityInherit+0xe4>)
   8381c:	4413      	add	r3, r2
   8381e:	4299      	cmp	r1, r3
   83820:	d101      	bne.n	83826 <vTaskPriorityInherit+0x52>
   83822:	2301      	movs	r3, #1
   83824:	e000      	b.n	83828 <vTaskPriorityInherit+0x54>
   83826:	2300      	movs	r3, #0
   83828:	2b00      	cmp	r3, #0
   8382a:	d03a      	beq.n	838a2 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8382c:	68fb      	ldr	r3, [r7, #12]
   8382e:	3304      	adds	r3, #4
   83830:	4618      	mov	r0, r3
   83832:	4b22      	ldr	r3, [pc, #136]	; (838bc <vTaskPriorityInherit+0xe8>)
   83834:	4798      	blx	r3
   83836:	4603      	mov	r3, r0
   83838:	2b00      	cmp	r3, #0
   8383a:	d115      	bne.n	83868 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8383c:	68fb      	ldr	r3, [r7, #12]
   8383e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83840:	491d      	ldr	r1, [pc, #116]	; (838b8 <vTaskPriorityInherit+0xe4>)
   83842:	4613      	mov	r3, r2
   83844:	009b      	lsls	r3, r3, #2
   83846:	4413      	add	r3, r2
   83848:	009b      	lsls	r3, r3, #2
   8384a:	440b      	add	r3, r1
   8384c:	681b      	ldr	r3, [r3, #0]
   8384e:	2b00      	cmp	r3, #0
   83850:	d10a      	bne.n	83868 <vTaskPriorityInherit+0x94>
   83852:	68fb      	ldr	r3, [r7, #12]
   83854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83856:	2201      	movs	r2, #1
   83858:	fa02 f303 	lsl.w	r3, r2, r3
   8385c:	43da      	mvns	r2, r3
   8385e:	4b18      	ldr	r3, [pc, #96]	; (838c0 <vTaskPriorityInherit+0xec>)
   83860:	681b      	ldr	r3, [r3, #0]
   83862:	401a      	ands	r2, r3
   83864:	4b16      	ldr	r3, [pc, #88]	; (838c0 <vTaskPriorityInherit+0xec>)
   83866:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   83868:	4b12      	ldr	r3, [pc, #72]	; (838b4 <vTaskPriorityInherit+0xe0>)
   8386a:	681b      	ldr	r3, [r3, #0]
   8386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8386e:	68fb      	ldr	r3, [r7, #12]
   83870:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   83872:	68fb      	ldr	r3, [r7, #12]
   83874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83876:	2201      	movs	r2, #1
   83878:	409a      	lsls	r2, r3
   8387a:	4b11      	ldr	r3, [pc, #68]	; (838c0 <vTaskPriorityInherit+0xec>)
   8387c:	681b      	ldr	r3, [r3, #0]
   8387e:	431a      	orrs	r2, r3
   83880:	4b0f      	ldr	r3, [pc, #60]	; (838c0 <vTaskPriorityInherit+0xec>)
   83882:	601a      	str	r2, [r3, #0]
   83884:	68fb      	ldr	r3, [r7, #12]
   83886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83888:	4613      	mov	r3, r2
   8388a:	009b      	lsls	r3, r3, #2
   8388c:	4413      	add	r3, r2
   8388e:	009b      	lsls	r3, r3, #2
   83890:	4a09      	ldr	r2, [pc, #36]	; (838b8 <vTaskPriorityInherit+0xe4>)
   83892:	441a      	add	r2, r3
   83894:	68fb      	ldr	r3, [r7, #12]
   83896:	3304      	adds	r3, #4
   83898:	4610      	mov	r0, r2
   8389a:	4619      	mov	r1, r3
   8389c:	4b09      	ldr	r3, [pc, #36]	; (838c4 <vTaskPriorityInherit+0xf0>)
   8389e:	4798      	blx	r3
   838a0:	e004      	b.n	838ac <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   838a2:	4b04      	ldr	r3, [pc, #16]	; (838b4 <vTaskPriorityInherit+0xe0>)
   838a4:	681b      	ldr	r3, [r3, #0]
   838a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   838a8:	68fb      	ldr	r3, [r7, #12]
   838aa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   838ac:	3710      	adds	r7, #16
   838ae:	46bd      	mov	sp, r7
   838b0:	bd80      	pop	{r7, pc}
   838b2:	bf00      	nop
   838b4:	2007a4e4 	.word	0x2007a4e4
   838b8:	2007a4e8 	.word	0x2007a4e8
   838bc:	00081a0d 	.word	0x00081a0d
   838c0:	2007a5c4 	.word	0x2007a5c4
   838c4:	00081955 	.word	0x00081955

000838c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   838c8:	b580      	push	{r7, lr}
   838ca:	b084      	sub	sp, #16
   838cc:	af00      	add	r7, sp, #0
   838ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   838d0:	687b      	ldr	r3, [r7, #4]
   838d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   838d4:	2300      	movs	r3, #0
   838d6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   838d8:	687b      	ldr	r3, [r7, #4]
   838da:	2b00      	cmp	r3, #0
   838dc:	d056      	beq.n	8398c <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   838de:	68bb      	ldr	r3, [r7, #8]
   838e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838e2:	2b00      	cmp	r3, #0
   838e4:	d102      	bne.n	838ec <xTaskPriorityDisinherit+0x24>
   838e6:	4b2c      	ldr	r3, [pc, #176]	; (83998 <xTaskPriorityDisinherit+0xd0>)
   838e8:	4798      	blx	r3
   838ea:	e7fe      	b.n	838ea <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   838ec:	68bb      	ldr	r3, [r7, #8]
   838ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838f0:	1e5a      	subs	r2, r3, #1
   838f2:	68bb      	ldr	r3, [r7, #8]
   838f4:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   838f6:	68bb      	ldr	r3, [r7, #8]
   838f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   838fa:	68bb      	ldr	r3, [r7, #8]
   838fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   838fe:	429a      	cmp	r2, r3
   83900:	d044      	beq.n	8398c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   83902:	68bb      	ldr	r3, [r7, #8]
   83904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83906:	2b00      	cmp	r3, #0
   83908:	d140      	bne.n	8398c <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8390a:	68bb      	ldr	r3, [r7, #8]
   8390c:	3304      	adds	r3, #4
   8390e:	4618      	mov	r0, r3
   83910:	4b22      	ldr	r3, [pc, #136]	; (8399c <xTaskPriorityDisinherit+0xd4>)
   83912:	4798      	blx	r3
   83914:	4603      	mov	r3, r0
   83916:	2b00      	cmp	r3, #0
   83918:	d115      	bne.n	83946 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   8391a:	68bb      	ldr	r3, [r7, #8]
   8391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8391e:	4920      	ldr	r1, [pc, #128]	; (839a0 <xTaskPriorityDisinherit+0xd8>)
   83920:	4613      	mov	r3, r2
   83922:	009b      	lsls	r3, r3, #2
   83924:	4413      	add	r3, r2
   83926:	009b      	lsls	r3, r3, #2
   83928:	440b      	add	r3, r1
   8392a:	681b      	ldr	r3, [r3, #0]
   8392c:	2b00      	cmp	r3, #0
   8392e:	d10a      	bne.n	83946 <xTaskPriorityDisinherit+0x7e>
   83930:	68bb      	ldr	r3, [r7, #8]
   83932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83934:	2201      	movs	r2, #1
   83936:	fa02 f303 	lsl.w	r3, r2, r3
   8393a:	43da      	mvns	r2, r3
   8393c:	4b19      	ldr	r3, [pc, #100]	; (839a4 <xTaskPriorityDisinherit+0xdc>)
   8393e:	681b      	ldr	r3, [r3, #0]
   83940:	401a      	ands	r2, r3
   83942:	4b18      	ldr	r3, [pc, #96]	; (839a4 <xTaskPriorityDisinherit+0xdc>)
   83944:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   83946:	68bb      	ldr	r3, [r7, #8]
   83948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8394a:	68bb      	ldr	r3, [r7, #8]
   8394c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8394e:	68bb      	ldr	r3, [r7, #8]
   83950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   83952:	f1c3 0205 	rsb	r2, r3, #5
   83956:	68bb      	ldr	r3, [r7, #8]
   83958:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   8395a:	68bb      	ldr	r3, [r7, #8]
   8395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8395e:	2201      	movs	r2, #1
   83960:	409a      	lsls	r2, r3
   83962:	4b10      	ldr	r3, [pc, #64]	; (839a4 <xTaskPriorityDisinherit+0xdc>)
   83964:	681b      	ldr	r3, [r3, #0]
   83966:	431a      	orrs	r2, r3
   83968:	4b0e      	ldr	r3, [pc, #56]	; (839a4 <xTaskPriorityDisinherit+0xdc>)
   8396a:	601a      	str	r2, [r3, #0]
   8396c:	68bb      	ldr	r3, [r7, #8]
   8396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83970:	4613      	mov	r3, r2
   83972:	009b      	lsls	r3, r3, #2
   83974:	4413      	add	r3, r2
   83976:	009b      	lsls	r3, r3, #2
   83978:	4a09      	ldr	r2, [pc, #36]	; (839a0 <xTaskPriorityDisinherit+0xd8>)
   8397a:	441a      	add	r2, r3
   8397c:	68bb      	ldr	r3, [r7, #8]
   8397e:	3304      	adds	r3, #4
   83980:	4610      	mov	r0, r2
   83982:	4619      	mov	r1, r3
   83984:	4b08      	ldr	r3, [pc, #32]	; (839a8 <xTaskPriorityDisinherit+0xe0>)
   83986:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   83988:	2301      	movs	r3, #1
   8398a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   8398c:	68fb      	ldr	r3, [r7, #12]
	}
   8398e:	4618      	mov	r0, r3
   83990:	3710      	adds	r7, #16
   83992:	46bd      	mov	sp, r7
   83994:	bd80      	pop	{r7, pc}
   83996:	bf00      	nop
   83998:	00081c85 	.word	0x00081c85
   8399c:	00081a0d 	.word	0x00081a0d
   839a0:	2007a4e8 	.word	0x2007a4e8
   839a4:	2007a5c4 	.word	0x2007a5c4
   839a8:	00081955 	.word	0x00081955

000839ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   839ac:	b480      	push	{r7}
   839ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   839b0:	4b07      	ldr	r3, [pc, #28]	; (839d0 <pvTaskIncrementMutexHeldCount+0x24>)
   839b2:	681b      	ldr	r3, [r3, #0]
   839b4:	2b00      	cmp	r3, #0
   839b6:	d004      	beq.n	839c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   839b8:	4b05      	ldr	r3, [pc, #20]	; (839d0 <pvTaskIncrementMutexHeldCount+0x24>)
   839ba:	681b      	ldr	r3, [r3, #0]
   839bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   839be:	3201      	adds	r2, #1
   839c0:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   839c2:	4b03      	ldr	r3, [pc, #12]	; (839d0 <pvTaskIncrementMutexHeldCount+0x24>)
   839c4:	681b      	ldr	r3, [r3, #0]
	}
   839c6:	4618      	mov	r0, r3
   839c8:	46bd      	mov	sp, r7
   839ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   839ce:	4770      	bx	lr
   839d0:	2007a4e4 	.word	0x2007a4e4

000839d4 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   839d4:	b590      	push	{r4, r7, lr}
   839d6:	b087      	sub	sp, #28
   839d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   839da:	2300      	movs	r3, #0
   839dc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   839de:	4b10      	ldr	r3, [pc, #64]	; (83a20 <xTimerCreateTimerTask+0x4c>)
   839e0:	4798      	blx	r3

	if( xTimerQueue != NULL )
   839e2:	4b10      	ldr	r3, [pc, #64]	; (83a24 <xTimerCreateTimerTask+0x50>)
   839e4:	681b      	ldr	r3, [r3, #0]
   839e6:	2b00      	cmp	r3, #0
   839e8:	d00f      	beq.n	83a0a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   839ea:	2302      	movs	r3, #2
   839ec:	9300      	str	r3, [sp, #0]
   839ee:	2300      	movs	r3, #0
   839f0:	9301      	str	r3, [sp, #4]
   839f2:	2300      	movs	r3, #0
   839f4:	9302      	str	r3, [sp, #8]
   839f6:	2300      	movs	r3, #0
   839f8:	9303      	str	r3, [sp, #12]
   839fa:	480b      	ldr	r0, [pc, #44]	; (83a28 <xTimerCreateTimerTask+0x54>)
   839fc:	490b      	ldr	r1, [pc, #44]	; (83a2c <xTimerCreateTimerTask+0x58>)
   839fe:	f44f 7282 	mov.w	r2, #260	; 0x104
   83a02:	2300      	movs	r3, #0
   83a04:	4c0a      	ldr	r4, [pc, #40]	; (83a30 <xTimerCreateTimerTask+0x5c>)
   83a06:	47a0      	blx	r4
   83a08:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   83a0a:	687b      	ldr	r3, [r7, #4]
   83a0c:	2b00      	cmp	r3, #0
   83a0e:	d102      	bne.n	83a16 <xTimerCreateTimerTask+0x42>
   83a10:	4b08      	ldr	r3, [pc, #32]	; (83a34 <xTimerCreateTimerTask+0x60>)
   83a12:	4798      	blx	r3
   83a14:	e7fe      	b.n	83a14 <xTimerCreateTimerTask+0x40>
	return xReturn;
   83a16:	687b      	ldr	r3, [r7, #4]
}
   83a18:	4618      	mov	r0, r3
   83a1a:	370c      	adds	r7, #12
   83a1c:	46bd      	mov	sp, r7
   83a1e:	bd90      	pop	{r4, r7, pc}
   83a20:	00083f09 	.word	0x00083f09
   83a24:	2007a610 	.word	0x2007a610
   83a28:	00083b51 	.word	0x00083b51
   83a2c:	00084df4 	.word	0x00084df4
   83a30:	00082ac1 	.word	0x00082ac1
   83a34:	00081c85 	.word	0x00081c85

00083a38 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   83a38:	b590      	push	{r4, r7, lr}
   83a3a:	b089      	sub	sp, #36	; 0x24
   83a3c:	af00      	add	r7, sp, #0
   83a3e:	60f8      	str	r0, [r7, #12]
   83a40:	60b9      	str	r1, [r7, #8]
   83a42:	607a      	str	r2, [r7, #4]
   83a44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   83a46:	2300      	movs	r3, #0
   83a48:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   83a4a:	4b1d      	ldr	r3, [pc, #116]	; (83ac0 <xTimerGenericCommand+0x88>)
   83a4c:	681b      	ldr	r3, [r3, #0]
   83a4e:	2b00      	cmp	r3, #0
   83a50:	d030      	beq.n	83ab4 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   83a52:	68bb      	ldr	r3, [r7, #8]
   83a54:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   83a56:	687b      	ldr	r3, [r7, #4]
   83a58:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   83a5a:	68fb      	ldr	r3, [r7, #12]
   83a5c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   83a5e:	68bb      	ldr	r3, [r7, #8]
   83a60:	2b05      	cmp	r3, #5
   83a62:	dc1c      	bgt.n	83a9e <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   83a64:	4b17      	ldr	r3, [pc, #92]	; (83ac4 <xTimerGenericCommand+0x8c>)
   83a66:	4798      	blx	r3
   83a68:	4603      	mov	r3, r0
   83a6a:	2b02      	cmp	r3, #2
   83a6c:	d10b      	bne.n	83a86 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   83a6e:	4b14      	ldr	r3, [pc, #80]	; (83ac0 <xTimerGenericCommand+0x88>)
   83a70:	681a      	ldr	r2, [r3, #0]
   83a72:	f107 0310 	add.w	r3, r7, #16
   83a76:	4610      	mov	r0, r2
   83a78:	4619      	mov	r1, r3
   83a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83a7c:	2300      	movs	r3, #0
   83a7e:	4c12      	ldr	r4, [pc, #72]	; (83ac8 <xTimerGenericCommand+0x90>)
   83a80:	47a0      	blx	r4
   83a82:	61f8      	str	r0, [r7, #28]
   83a84:	e016      	b.n	83ab4 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   83a86:	4b0e      	ldr	r3, [pc, #56]	; (83ac0 <xTimerGenericCommand+0x88>)
   83a88:	681a      	ldr	r2, [r3, #0]
   83a8a:	f107 0310 	add.w	r3, r7, #16
   83a8e:	4610      	mov	r0, r2
   83a90:	4619      	mov	r1, r3
   83a92:	2200      	movs	r2, #0
   83a94:	2300      	movs	r3, #0
   83a96:	4c0c      	ldr	r4, [pc, #48]	; (83ac8 <xTimerGenericCommand+0x90>)
   83a98:	47a0      	blx	r4
   83a9a:	61f8      	str	r0, [r7, #28]
   83a9c:	e00a      	b.n	83ab4 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   83a9e:	4b08      	ldr	r3, [pc, #32]	; (83ac0 <xTimerGenericCommand+0x88>)
   83aa0:	681a      	ldr	r2, [r3, #0]
   83aa2:	f107 0310 	add.w	r3, r7, #16
   83aa6:	4610      	mov	r0, r2
   83aa8:	4619      	mov	r1, r3
   83aaa:	683a      	ldr	r2, [r7, #0]
   83aac:	2300      	movs	r3, #0
   83aae:	4c07      	ldr	r4, [pc, #28]	; (83acc <xTimerGenericCommand+0x94>)
   83ab0:	47a0      	blx	r4
   83ab2:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   83ab4:	69fb      	ldr	r3, [r7, #28]
}
   83ab6:	4618      	mov	r0, r3
   83ab8:	3724      	adds	r7, #36	; 0x24
   83aba:	46bd      	mov	sp, r7
   83abc:	bd90      	pop	{r4, r7, pc}
   83abe:	bf00      	nop
   83ac0:	2007a610 	.word	0x2007a610
   83ac4:	00083799 	.word	0x00083799
   83ac8:	0008228d 	.word	0x0008228d
   83acc:	00082451 	.word	0x00082451

00083ad0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   83ad0:	b590      	push	{r4, r7, lr}
   83ad2:	b087      	sub	sp, #28
   83ad4:	af02      	add	r7, sp, #8
   83ad6:	6078      	str	r0, [r7, #4]
   83ad8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83ada:	4b18      	ldr	r3, [pc, #96]	; (83b3c <prvProcessExpiredTimer+0x6c>)
   83adc:	681b      	ldr	r3, [r3, #0]
   83ade:	68db      	ldr	r3, [r3, #12]
   83ae0:	68db      	ldr	r3, [r3, #12]
   83ae2:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83ae4:	68fb      	ldr	r3, [r7, #12]
   83ae6:	3304      	adds	r3, #4
   83ae8:	4618      	mov	r0, r3
   83aea:	4b15      	ldr	r3, [pc, #84]	; (83b40 <prvProcessExpiredTimer+0x70>)
   83aec:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83aee:	68fb      	ldr	r3, [r7, #12]
   83af0:	69db      	ldr	r3, [r3, #28]
   83af2:	2b01      	cmp	r3, #1
   83af4:	d11b      	bne.n	83b2e <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   83af6:	68fb      	ldr	r3, [r7, #12]
   83af8:	699a      	ldr	r2, [r3, #24]
   83afa:	687b      	ldr	r3, [r7, #4]
   83afc:	4413      	add	r3, r2
   83afe:	68f8      	ldr	r0, [r7, #12]
   83b00:	4619      	mov	r1, r3
   83b02:	683a      	ldr	r2, [r7, #0]
   83b04:	687b      	ldr	r3, [r7, #4]
   83b06:	4c0f      	ldr	r4, [pc, #60]	; (83b44 <prvProcessExpiredTimer+0x74>)
   83b08:	47a0      	blx	r4
   83b0a:	4603      	mov	r3, r0
   83b0c:	2b01      	cmp	r3, #1
   83b0e:	d10e      	bne.n	83b2e <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   83b10:	2300      	movs	r3, #0
   83b12:	9300      	str	r3, [sp, #0]
   83b14:	68f8      	ldr	r0, [r7, #12]
   83b16:	2100      	movs	r1, #0
   83b18:	687a      	ldr	r2, [r7, #4]
   83b1a:	2300      	movs	r3, #0
   83b1c:	4c0a      	ldr	r4, [pc, #40]	; (83b48 <prvProcessExpiredTimer+0x78>)
   83b1e:	47a0      	blx	r4
   83b20:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   83b22:	68bb      	ldr	r3, [r7, #8]
   83b24:	2b00      	cmp	r3, #0
   83b26:	d102      	bne.n	83b2e <prvProcessExpiredTimer+0x5e>
   83b28:	4b08      	ldr	r3, [pc, #32]	; (83b4c <prvProcessExpiredTimer+0x7c>)
   83b2a:	4798      	blx	r3
   83b2c:	e7fe      	b.n	83b2c <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83b2e:	68fb      	ldr	r3, [r7, #12]
   83b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83b32:	68f8      	ldr	r0, [r7, #12]
   83b34:	4798      	blx	r3
}
   83b36:	3714      	adds	r7, #20
   83b38:	46bd      	mov	sp, r7
   83b3a:	bd90      	pop	{r4, r7, pc}
   83b3c:	2007a608 	.word	0x2007a608
   83b40:	00081a0d 	.word	0x00081a0d
   83b44:	00083c95 	.word	0x00083c95
   83b48:	00083a39 	.word	0x00083a39
   83b4c:	00081c85 	.word	0x00081c85

00083b50 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   83b50:	b580      	push	{r7, lr}
   83b52:	b084      	sub	sp, #16
   83b54:	af00      	add	r7, sp, #0
   83b56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   83b58:	f107 0308 	add.w	r3, r7, #8
   83b5c:	4618      	mov	r0, r3
   83b5e:	4b05      	ldr	r3, [pc, #20]	; (83b74 <prvTimerTask+0x24>)
   83b60:	4798      	blx	r3
   83b62:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   83b64:	68bb      	ldr	r3, [r7, #8]
   83b66:	68f8      	ldr	r0, [r7, #12]
   83b68:	4619      	mov	r1, r3
   83b6a:	4b03      	ldr	r3, [pc, #12]	; (83b78 <prvTimerTask+0x28>)
   83b6c:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   83b6e:	4b03      	ldr	r3, [pc, #12]	; (83b7c <prvTimerTask+0x2c>)
   83b70:	4798      	blx	r3
	}
   83b72:	e7f1      	b.n	83b58 <prvTimerTask+0x8>
   83b74:	00083c05 	.word	0x00083c05
   83b78:	00083b81 	.word	0x00083b81
   83b7c:	00083d1d 	.word	0x00083d1d

00083b80 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   83b80:	b580      	push	{r7, lr}
   83b82:	b084      	sub	sp, #16
   83b84:	af00      	add	r7, sp, #0
   83b86:	6078      	str	r0, [r7, #4]
   83b88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   83b8a:	4b17      	ldr	r3, [pc, #92]	; (83be8 <prvProcessTimerOrBlockTask+0x68>)
   83b8c:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83b8e:	f107 0308 	add.w	r3, r7, #8
   83b92:	4618      	mov	r0, r3
   83b94:	4b15      	ldr	r3, [pc, #84]	; (83bec <prvProcessTimerOrBlockTask+0x6c>)
   83b96:	4798      	blx	r3
   83b98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   83b9a:	68bb      	ldr	r3, [r7, #8]
   83b9c:	2b00      	cmp	r3, #0
   83b9e:	d11e      	bne.n	83bde <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   83ba0:	683b      	ldr	r3, [r7, #0]
   83ba2:	2b00      	cmp	r3, #0
   83ba4:	d10a      	bne.n	83bbc <prvProcessTimerOrBlockTask+0x3c>
   83ba6:	687a      	ldr	r2, [r7, #4]
   83ba8:	68fb      	ldr	r3, [r7, #12]
   83baa:	429a      	cmp	r2, r3
   83bac:	d806      	bhi.n	83bbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   83bae:	4b10      	ldr	r3, [pc, #64]	; (83bf0 <prvProcessTimerOrBlockTask+0x70>)
   83bb0:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   83bb2:	6878      	ldr	r0, [r7, #4]
   83bb4:	68f9      	ldr	r1, [r7, #12]
   83bb6:	4b0f      	ldr	r3, [pc, #60]	; (83bf4 <prvProcessTimerOrBlockTask+0x74>)
   83bb8:	4798      	blx	r3
   83bba:	e012      	b.n	83be2 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   83bbc:	4b0e      	ldr	r3, [pc, #56]	; (83bf8 <prvProcessTimerOrBlockTask+0x78>)
   83bbe:	681a      	ldr	r2, [r3, #0]
   83bc0:	6879      	ldr	r1, [r7, #4]
   83bc2:	68fb      	ldr	r3, [r7, #12]
   83bc4:	1acb      	subs	r3, r1, r3
   83bc6:	4610      	mov	r0, r2
   83bc8:	4619      	mov	r1, r3
   83bca:	4b0c      	ldr	r3, [pc, #48]	; (83bfc <prvProcessTimerOrBlockTask+0x7c>)
   83bcc:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   83bce:	4b08      	ldr	r3, [pc, #32]	; (83bf0 <prvProcessTimerOrBlockTask+0x70>)
   83bd0:	4798      	blx	r3
   83bd2:	4603      	mov	r3, r0
   83bd4:	2b00      	cmp	r3, #0
   83bd6:	d104      	bne.n	83be2 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   83bd8:	4b09      	ldr	r3, [pc, #36]	; (83c00 <prvProcessTimerOrBlockTask+0x80>)
   83bda:	4798      	blx	r3
   83bdc:	e001      	b.n	83be2 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   83bde:	4b04      	ldr	r3, [pc, #16]	; (83bf0 <prvProcessTimerOrBlockTask+0x70>)
   83be0:	4798      	blx	r3
		}
	}
}
   83be2:	3710      	adds	r7, #16
   83be4:	46bd      	mov	sp, r7
   83be6:	bd80      	pop	{r7, pc}
   83be8:	00082dbd 	.word	0x00082dbd
   83bec:	00083c4d 	.word	0x00083c4d
   83bf0:	00082dd9 	.word	0x00082dd9
   83bf4:	00083ad1 	.word	0x00083ad1
   83bf8:	2007a610 	.word	0x2007a610
   83bfc:	00082a59 	.word	0x00082a59
   83c00:	00081be9 	.word	0x00081be9

00083c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   83c04:	b480      	push	{r7}
   83c06:	b085      	sub	sp, #20
   83c08:	af00      	add	r7, sp, #0
   83c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   83c0c:	4b0e      	ldr	r3, [pc, #56]	; (83c48 <prvGetNextExpireTime+0x44>)
   83c0e:	681b      	ldr	r3, [r3, #0]
   83c10:	681b      	ldr	r3, [r3, #0]
   83c12:	2b00      	cmp	r3, #0
   83c14:	bf14      	ite	ne
   83c16:	2300      	movne	r3, #0
   83c18:	2301      	moveq	r3, #1
   83c1a:	b2db      	uxtb	r3, r3
   83c1c:	461a      	mov	r2, r3
   83c1e:	687b      	ldr	r3, [r7, #4]
   83c20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   83c22:	687b      	ldr	r3, [r7, #4]
   83c24:	681b      	ldr	r3, [r3, #0]
   83c26:	2b00      	cmp	r3, #0
   83c28:	d105      	bne.n	83c36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83c2a:	4b07      	ldr	r3, [pc, #28]	; (83c48 <prvGetNextExpireTime+0x44>)
   83c2c:	681b      	ldr	r3, [r3, #0]
   83c2e:	68db      	ldr	r3, [r3, #12]
   83c30:	681b      	ldr	r3, [r3, #0]
   83c32:	60fb      	str	r3, [r7, #12]
   83c34:	e001      	b.n	83c3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   83c36:	2300      	movs	r3, #0
   83c38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   83c3a:	68fb      	ldr	r3, [r7, #12]
}
   83c3c:	4618      	mov	r0, r3
   83c3e:	3714      	adds	r7, #20
   83c40:	46bd      	mov	sp, r7
   83c42:	f85d 7b04 	ldr.w	r7, [sp], #4
   83c46:	4770      	bx	lr
   83c48:	2007a608 	.word	0x2007a608

00083c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   83c4c:	b580      	push	{r7, lr}
   83c4e:	b084      	sub	sp, #16
   83c50:	af00      	add	r7, sp, #0
   83c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   83c54:	4b0c      	ldr	r3, [pc, #48]	; (83c88 <prvSampleTimeNow+0x3c>)
   83c56:	4798      	blx	r3
   83c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   83c5a:	4b0c      	ldr	r3, [pc, #48]	; (83c8c <prvSampleTimeNow+0x40>)
   83c5c:	681b      	ldr	r3, [r3, #0]
   83c5e:	68fa      	ldr	r2, [r7, #12]
   83c60:	429a      	cmp	r2, r3
   83c62:	d205      	bcs.n	83c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   83c64:	4b0a      	ldr	r3, [pc, #40]	; (83c90 <prvSampleTimeNow+0x44>)
   83c66:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   83c68:	687b      	ldr	r3, [r7, #4]
   83c6a:	2201      	movs	r2, #1
   83c6c:	601a      	str	r2, [r3, #0]
   83c6e:	e002      	b.n	83c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   83c70:	687b      	ldr	r3, [r7, #4]
   83c72:	2200      	movs	r2, #0
   83c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   83c76:	4b05      	ldr	r3, [pc, #20]	; (83c8c <prvSampleTimeNow+0x40>)
   83c78:	68fa      	ldr	r2, [r7, #12]
   83c7a:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   83c7c:	68fb      	ldr	r3, [r7, #12]
}
   83c7e:	4618      	mov	r0, r3
   83c80:	3710      	adds	r7, #16
   83c82:	46bd      	mov	sp, r7
   83c84:	bd80      	pop	{r7, pc}
   83c86:	bf00      	nop
   83c88:	00082efd 	.word	0x00082efd
   83c8c:	2007a614 	.word	0x2007a614
   83c90:	00083e49 	.word	0x00083e49

00083c94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   83c94:	b580      	push	{r7, lr}
   83c96:	b086      	sub	sp, #24
   83c98:	af00      	add	r7, sp, #0
   83c9a:	60f8      	str	r0, [r7, #12]
   83c9c:	60b9      	str	r1, [r7, #8]
   83c9e:	607a      	str	r2, [r7, #4]
   83ca0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   83ca2:	2300      	movs	r3, #0
   83ca4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   83ca6:	68fb      	ldr	r3, [r7, #12]
   83ca8:	68ba      	ldr	r2, [r7, #8]
   83caa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83cac:	68fb      	ldr	r3, [r7, #12]
   83cae:	68fa      	ldr	r2, [r7, #12]
   83cb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   83cb2:	68ba      	ldr	r2, [r7, #8]
   83cb4:	687b      	ldr	r3, [r7, #4]
   83cb6:	429a      	cmp	r2, r3
   83cb8:	d812      	bhi.n	83ce0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   83cba:	687a      	ldr	r2, [r7, #4]
   83cbc:	683b      	ldr	r3, [r7, #0]
   83cbe:	1ad2      	subs	r2, r2, r3
   83cc0:	68fb      	ldr	r3, [r7, #12]
   83cc2:	699b      	ldr	r3, [r3, #24]
   83cc4:	429a      	cmp	r2, r3
   83cc6:	d302      	bcc.n	83cce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   83cc8:	2301      	movs	r3, #1
   83cca:	617b      	str	r3, [r7, #20]
   83ccc:	e01b      	b.n	83d06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   83cce:	4b10      	ldr	r3, [pc, #64]	; (83d10 <prvInsertTimerInActiveList+0x7c>)
   83cd0:	681a      	ldr	r2, [r3, #0]
   83cd2:	68fb      	ldr	r3, [r7, #12]
   83cd4:	3304      	adds	r3, #4
   83cd6:	4610      	mov	r0, r2
   83cd8:	4619      	mov	r1, r3
   83cda:	4b0e      	ldr	r3, [pc, #56]	; (83d14 <prvInsertTimerInActiveList+0x80>)
   83cdc:	4798      	blx	r3
   83cde:	e012      	b.n	83d06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   83ce0:	687a      	ldr	r2, [r7, #4]
   83ce2:	683b      	ldr	r3, [r7, #0]
   83ce4:	429a      	cmp	r2, r3
   83ce6:	d206      	bcs.n	83cf6 <prvInsertTimerInActiveList+0x62>
   83ce8:	68ba      	ldr	r2, [r7, #8]
   83cea:	683b      	ldr	r3, [r7, #0]
   83cec:	429a      	cmp	r2, r3
   83cee:	d302      	bcc.n	83cf6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   83cf0:	2301      	movs	r3, #1
   83cf2:	617b      	str	r3, [r7, #20]
   83cf4:	e007      	b.n	83d06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83cf6:	4b08      	ldr	r3, [pc, #32]	; (83d18 <prvInsertTimerInActiveList+0x84>)
   83cf8:	681a      	ldr	r2, [r3, #0]
   83cfa:	68fb      	ldr	r3, [r7, #12]
   83cfc:	3304      	adds	r3, #4
   83cfe:	4610      	mov	r0, r2
   83d00:	4619      	mov	r1, r3
   83d02:	4b04      	ldr	r3, [pc, #16]	; (83d14 <prvInsertTimerInActiveList+0x80>)
   83d04:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   83d06:	697b      	ldr	r3, [r7, #20]
}
   83d08:	4618      	mov	r0, r3
   83d0a:	3718      	adds	r7, #24
   83d0c:	46bd      	mov	sp, r7
   83d0e:	bd80      	pop	{r7, pc}
   83d10:	2007a60c 	.word	0x2007a60c
   83d14:	0008199d 	.word	0x0008199d
   83d18:	2007a608 	.word	0x2007a608

00083d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   83d1c:	b590      	push	{r4, r7, lr}
   83d1e:	b08b      	sub	sp, #44	; 0x2c
   83d20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83d22:	e070      	b.n	83e06 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   83d24:	68bb      	ldr	r3, [r7, #8]
   83d26:	2b00      	cmp	r3, #0
   83d28:	db6d      	blt.n	83e06 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   83d2a:	693b      	ldr	r3, [r7, #16]
   83d2c:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   83d2e:	69fb      	ldr	r3, [r7, #28]
   83d30:	695b      	ldr	r3, [r3, #20]
   83d32:	2b00      	cmp	r3, #0
   83d34:	d004      	beq.n	83d40 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83d36:	69fb      	ldr	r3, [r7, #28]
   83d38:	3304      	adds	r3, #4
   83d3a:	4618      	mov	r0, r3
   83d3c:	4b3a      	ldr	r3, [pc, #232]	; (83e28 <prvProcessReceivedCommands+0x10c>)
   83d3e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   83d40:	1d3b      	adds	r3, r7, #4
   83d42:	4618      	mov	r0, r3
   83d44:	4b39      	ldr	r3, [pc, #228]	; (83e2c <prvProcessReceivedCommands+0x110>)
   83d46:	4798      	blx	r3
   83d48:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   83d4a:	68bb      	ldr	r3, [r7, #8]
   83d4c:	2b09      	cmp	r3, #9
   83d4e:	d859      	bhi.n	83e04 <prvProcessReceivedCommands+0xe8>
   83d50:	a201      	add	r2, pc, #4	; (adr r2, 83d58 <prvProcessReceivedCommands+0x3c>)
   83d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d56:	bf00      	nop
   83d58:	00083d81 	.word	0x00083d81
   83d5c:	00083d81 	.word	0x00083d81
   83d60:	00083d81 	.word	0x00083d81
   83d64:	00083e05 	.word	0x00083e05
   83d68:	00083dd3 	.word	0x00083dd3
   83d6c:	00083dfd 	.word	0x00083dfd
   83d70:	00083d81 	.word	0x00083d81
   83d74:	00083d81 	.word	0x00083d81
   83d78:	00083e05 	.word	0x00083e05
   83d7c:	00083dd3 	.word	0x00083dd3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   83d80:	68fa      	ldr	r2, [r7, #12]
   83d82:	69fb      	ldr	r3, [r7, #28]
   83d84:	699b      	ldr	r3, [r3, #24]
   83d86:	441a      	add	r2, r3
   83d88:	68fb      	ldr	r3, [r7, #12]
   83d8a:	69f8      	ldr	r0, [r7, #28]
   83d8c:	4611      	mov	r1, r2
   83d8e:	69ba      	ldr	r2, [r7, #24]
   83d90:	4c27      	ldr	r4, [pc, #156]	; (83e30 <prvProcessReceivedCommands+0x114>)
   83d92:	47a0      	blx	r4
   83d94:	4603      	mov	r3, r0
   83d96:	2b01      	cmp	r3, #1
   83d98:	d11a      	bne.n	83dd0 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83d9a:	69fb      	ldr	r3, [r7, #28]
   83d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83d9e:	69f8      	ldr	r0, [r7, #28]
   83da0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83da2:	69fb      	ldr	r3, [r7, #28]
   83da4:	69db      	ldr	r3, [r3, #28]
   83da6:	2b01      	cmp	r3, #1
   83da8:	d112      	bne.n	83dd0 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   83daa:	68fa      	ldr	r2, [r7, #12]
   83dac:	69fb      	ldr	r3, [r7, #28]
   83dae:	699b      	ldr	r3, [r3, #24]
   83db0:	4413      	add	r3, r2
   83db2:	2200      	movs	r2, #0
   83db4:	9200      	str	r2, [sp, #0]
   83db6:	69f8      	ldr	r0, [r7, #28]
   83db8:	2100      	movs	r1, #0
   83dba:	461a      	mov	r2, r3
   83dbc:	2300      	movs	r3, #0
   83dbe:	4c1d      	ldr	r4, [pc, #116]	; (83e34 <prvProcessReceivedCommands+0x118>)
   83dc0:	47a0      	blx	r4
   83dc2:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   83dc4:	697b      	ldr	r3, [r7, #20]
   83dc6:	2b00      	cmp	r3, #0
   83dc8:	d102      	bne.n	83dd0 <prvProcessReceivedCommands+0xb4>
   83dca:	4b1b      	ldr	r3, [pc, #108]	; (83e38 <prvProcessReceivedCommands+0x11c>)
   83dcc:	4798      	blx	r3
   83dce:	e7fe      	b.n	83dce <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   83dd0:	e019      	b.n	83e06 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   83dd2:	68fa      	ldr	r2, [r7, #12]
   83dd4:	69fb      	ldr	r3, [r7, #28]
   83dd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   83dd8:	69fb      	ldr	r3, [r7, #28]
   83dda:	699b      	ldr	r3, [r3, #24]
   83ddc:	2b00      	cmp	r3, #0
   83dde:	d102      	bne.n	83de6 <prvProcessReceivedCommands+0xca>
   83de0:	4b15      	ldr	r3, [pc, #84]	; (83e38 <prvProcessReceivedCommands+0x11c>)
   83de2:	4798      	blx	r3
   83de4:	e7fe      	b.n	83de4 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   83de6:	69fb      	ldr	r3, [r7, #28]
   83de8:	699a      	ldr	r2, [r3, #24]
   83dea:	69bb      	ldr	r3, [r7, #24]
   83dec:	4413      	add	r3, r2
   83dee:	69f8      	ldr	r0, [r7, #28]
   83df0:	4619      	mov	r1, r3
   83df2:	69ba      	ldr	r2, [r7, #24]
   83df4:	69bb      	ldr	r3, [r7, #24]
   83df6:	4c0e      	ldr	r4, [pc, #56]	; (83e30 <prvProcessReceivedCommands+0x114>)
   83df8:	47a0      	blx	r4
					break;
   83dfa:	e004      	b.n	83e06 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   83dfc:	69f8      	ldr	r0, [r7, #28]
   83dfe:	4b0f      	ldr	r3, [pc, #60]	; (83e3c <prvProcessReceivedCommands+0x120>)
   83e00:	4798      	blx	r3
					break;
   83e02:	e000      	b.n	83e06 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   83e04:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   83e06:	4b0e      	ldr	r3, [pc, #56]	; (83e40 <prvProcessReceivedCommands+0x124>)
   83e08:	681a      	ldr	r2, [r3, #0]
   83e0a:	f107 0308 	add.w	r3, r7, #8
   83e0e:	4610      	mov	r0, r2
   83e10:	4619      	mov	r1, r3
   83e12:	2200      	movs	r2, #0
   83e14:	2300      	movs	r3, #0
   83e16:	4c0b      	ldr	r4, [pc, #44]	; (83e44 <prvProcessReceivedCommands+0x128>)
   83e18:	47a0      	blx	r4
   83e1a:	4603      	mov	r3, r0
   83e1c:	2b00      	cmp	r3, #0
   83e1e:	d181      	bne.n	83d24 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   83e20:	3724      	adds	r7, #36	; 0x24
   83e22:	46bd      	mov	sp, r7
   83e24:	bd90      	pop	{r4, r7, pc}
   83e26:	bf00      	nop
   83e28:	00081a0d 	.word	0x00081a0d
   83e2c:	00083c4d 	.word	0x00083c4d
   83e30:	00083c95 	.word	0x00083c95
   83e34:	00083a39 	.word	0x00083a39
   83e38:	00081c85 	.word	0x00081c85
   83e3c:	00081f21 	.word	0x00081f21
   83e40:	2007a610 	.word	0x2007a610
   83e44:	0008254d 	.word	0x0008254d

00083e48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   83e48:	b590      	push	{r4, r7, lr}
   83e4a:	b089      	sub	sp, #36	; 0x24
   83e4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83e4e:	e03d      	b.n	83ecc <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   83e50:	4b27      	ldr	r3, [pc, #156]	; (83ef0 <prvSwitchTimerLists+0xa8>)
   83e52:	681b      	ldr	r3, [r3, #0]
   83e54:	68db      	ldr	r3, [r3, #12]
   83e56:	681b      	ldr	r3, [r3, #0]
   83e58:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   83e5a:	4b25      	ldr	r3, [pc, #148]	; (83ef0 <prvSwitchTimerLists+0xa8>)
   83e5c:	681b      	ldr	r3, [r3, #0]
   83e5e:	68db      	ldr	r3, [r3, #12]
   83e60:	68db      	ldr	r3, [r3, #12]
   83e62:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   83e64:	693b      	ldr	r3, [r7, #16]
   83e66:	3304      	adds	r3, #4
   83e68:	4618      	mov	r0, r3
   83e6a:	4b22      	ldr	r3, [pc, #136]	; (83ef4 <prvSwitchTimerLists+0xac>)
   83e6c:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   83e6e:	693b      	ldr	r3, [r7, #16]
   83e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83e72:	6938      	ldr	r0, [r7, #16]
   83e74:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   83e76:	693b      	ldr	r3, [r7, #16]
   83e78:	69db      	ldr	r3, [r3, #28]
   83e7a:	2b01      	cmp	r3, #1
   83e7c:	d126      	bne.n	83ecc <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   83e7e:	693b      	ldr	r3, [r7, #16]
   83e80:	699a      	ldr	r2, [r3, #24]
   83e82:	697b      	ldr	r3, [r7, #20]
   83e84:	4413      	add	r3, r2
   83e86:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   83e88:	68fa      	ldr	r2, [r7, #12]
   83e8a:	697b      	ldr	r3, [r7, #20]
   83e8c:	429a      	cmp	r2, r3
   83e8e:	d90e      	bls.n	83eae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   83e90:	693b      	ldr	r3, [r7, #16]
   83e92:	68fa      	ldr	r2, [r7, #12]
   83e94:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   83e96:	693b      	ldr	r3, [r7, #16]
   83e98:	693a      	ldr	r2, [r7, #16]
   83e9a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   83e9c:	4b14      	ldr	r3, [pc, #80]	; (83ef0 <prvSwitchTimerLists+0xa8>)
   83e9e:	681a      	ldr	r2, [r3, #0]
   83ea0:	693b      	ldr	r3, [r7, #16]
   83ea2:	3304      	adds	r3, #4
   83ea4:	4610      	mov	r0, r2
   83ea6:	4619      	mov	r1, r3
   83ea8:	4b13      	ldr	r3, [pc, #76]	; (83ef8 <prvSwitchTimerLists+0xb0>)
   83eaa:	4798      	blx	r3
   83eac:	e00e      	b.n	83ecc <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   83eae:	2300      	movs	r3, #0
   83eb0:	9300      	str	r3, [sp, #0]
   83eb2:	6938      	ldr	r0, [r7, #16]
   83eb4:	2100      	movs	r1, #0
   83eb6:	697a      	ldr	r2, [r7, #20]
   83eb8:	2300      	movs	r3, #0
   83eba:	4c10      	ldr	r4, [pc, #64]	; (83efc <prvSwitchTimerLists+0xb4>)
   83ebc:	47a0      	blx	r4
   83ebe:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   83ec0:	68bb      	ldr	r3, [r7, #8]
   83ec2:	2b00      	cmp	r3, #0
   83ec4:	d102      	bne.n	83ecc <prvSwitchTimerLists+0x84>
   83ec6:	4b0e      	ldr	r3, [pc, #56]	; (83f00 <prvSwitchTimerLists+0xb8>)
   83ec8:	4798      	blx	r3
   83eca:	e7fe      	b.n	83eca <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   83ecc:	4b08      	ldr	r3, [pc, #32]	; (83ef0 <prvSwitchTimerLists+0xa8>)
   83ece:	681b      	ldr	r3, [r3, #0]
   83ed0:	681b      	ldr	r3, [r3, #0]
   83ed2:	2b00      	cmp	r3, #0
   83ed4:	d1bc      	bne.n	83e50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   83ed6:	4b06      	ldr	r3, [pc, #24]	; (83ef0 <prvSwitchTimerLists+0xa8>)
   83ed8:	681b      	ldr	r3, [r3, #0]
   83eda:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   83edc:	4b09      	ldr	r3, [pc, #36]	; (83f04 <prvSwitchTimerLists+0xbc>)
   83ede:	681a      	ldr	r2, [r3, #0]
   83ee0:	4b03      	ldr	r3, [pc, #12]	; (83ef0 <prvSwitchTimerLists+0xa8>)
   83ee2:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   83ee4:	4b07      	ldr	r3, [pc, #28]	; (83f04 <prvSwitchTimerLists+0xbc>)
   83ee6:	687a      	ldr	r2, [r7, #4]
   83ee8:	601a      	str	r2, [r3, #0]
}
   83eea:	371c      	adds	r7, #28
   83eec:	46bd      	mov	sp, r7
   83eee:	bd90      	pop	{r4, r7, pc}
   83ef0:	2007a608 	.word	0x2007a608
   83ef4:	00081a0d 	.word	0x00081a0d
   83ef8:	0008199d 	.word	0x0008199d
   83efc:	00083a39 	.word	0x00083a39
   83f00:	00081c85 	.word	0x00081c85
   83f04:	2007a60c 	.word	0x2007a60c

00083f08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   83f08:	b580      	push	{r7, lr}
   83f0a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   83f0c:	4b11      	ldr	r3, [pc, #68]	; (83f54 <prvCheckForValidListAndQueue+0x4c>)
   83f0e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   83f10:	4b11      	ldr	r3, [pc, #68]	; (83f58 <prvCheckForValidListAndQueue+0x50>)
   83f12:	681b      	ldr	r3, [r3, #0]
   83f14:	2b00      	cmp	r3, #0
   83f16:	d11a      	bne.n	83f4e <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   83f18:	4810      	ldr	r0, [pc, #64]	; (83f5c <prvCheckForValidListAndQueue+0x54>)
   83f1a:	4b11      	ldr	r3, [pc, #68]	; (83f60 <prvCheckForValidListAndQueue+0x58>)
   83f1c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   83f1e:	4811      	ldr	r0, [pc, #68]	; (83f64 <prvCheckForValidListAndQueue+0x5c>)
   83f20:	4b0f      	ldr	r3, [pc, #60]	; (83f60 <prvCheckForValidListAndQueue+0x58>)
   83f22:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   83f24:	4b10      	ldr	r3, [pc, #64]	; (83f68 <prvCheckForValidListAndQueue+0x60>)
   83f26:	4a0d      	ldr	r2, [pc, #52]	; (83f5c <prvCheckForValidListAndQueue+0x54>)
   83f28:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   83f2a:	4b10      	ldr	r3, [pc, #64]	; (83f6c <prvCheckForValidListAndQueue+0x64>)
   83f2c:	4a0d      	ldr	r2, [pc, #52]	; (83f64 <prvCheckForValidListAndQueue+0x5c>)
   83f2e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   83f30:	2005      	movs	r0, #5
   83f32:	210c      	movs	r1, #12
   83f34:	2200      	movs	r2, #0
   83f36:	4b0e      	ldr	r3, [pc, #56]	; (83f70 <prvCheckForValidListAndQueue+0x68>)
   83f38:	4798      	blx	r3
   83f3a:	4602      	mov	r2, r0
   83f3c:	4b06      	ldr	r3, [pc, #24]	; (83f58 <prvCheckForValidListAndQueue+0x50>)
   83f3e:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   83f40:	4b05      	ldr	r3, [pc, #20]	; (83f58 <prvCheckForValidListAndQueue+0x50>)
   83f42:	681b      	ldr	r3, [r3, #0]
   83f44:	2b00      	cmp	r3, #0
   83f46:	d102      	bne.n	83f4e <prvCheckForValidListAndQueue+0x46>
   83f48:	4b0a      	ldr	r3, [pc, #40]	; (83f74 <prvCheckForValidListAndQueue+0x6c>)
   83f4a:	4798      	blx	r3
   83f4c:	e7fe      	b.n	83f4c <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   83f4e:	4b0a      	ldr	r3, [pc, #40]	; (83f78 <prvCheckForValidListAndQueue+0x70>)
   83f50:	4798      	blx	r3
}
   83f52:	bd80      	pop	{r7, pc}
   83f54:	00081c09 	.word	0x00081c09
   83f58:	2007a610 	.word	0x2007a610
   83f5c:	2007a5e0 	.word	0x2007a5e0
   83f60:	000818fd 	.word	0x000818fd
   83f64:	2007a5f4 	.word	0x2007a5f4
   83f68:	2007a608 	.word	0x2007a608
   83f6c:	2007a60c 	.word	0x2007a60c
   83f70:	00082201 	.word	0x00082201
   83f74:	00081c85 	.word	0x00081c85
   83f78:	00081c4d 	.word	0x00081c4d

00083f7c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   83f7c:	b480      	push	{r7}
   83f7e:	b083      	sub	sp, #12
   83f80:	af00      	add	r7, sp, #0
   83f82:	4603      	mov	r3, r0
   83f84:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83f86:	4b08      	ldr	r3, [pc, #32]	; (83fa8 <NVIC_EnableIRQ+0x2c>)
   83f88:	f997 2007 	ldrsb.w	r2, [r7, #7]
   83f8c:	0952      	lsrs	r2, r2, #5
   83f8e:	79f9      	ldrb	r1, [r7, #7]
   83f90:	f001 011f 	and.w	r1, r1, #31
   83f94:	2001      	movs	r0, #1
   83f96:	fa00 f101 	lsl.w	r1, r0, r1
   83f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83f9e:	370c      	adds	r7, #12
   83fa0:	46bd      	mov	sp, r7
   83fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
   83fa6:	4770      	bx	lr
   83fa8:	e000e100 	.word	0xe000e100

00083fac <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   83fac:	b480      	push	{r7}
   83fae:	b083      	sub	sp, #12
   83fb0:	af00      	add	r7, sp, #0
   83fb2:	4603      	mov	r3, r0
   83fb4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   83fb6:	4b09      	ldr	r3, [pc, #36]	; (83fdc <NVIC_DisableIRQ+0x30>)
   83fb8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   83fbc:	0952      	lsrs	r2, r2, #5
   83fbe:	79f9      	ldrb	r1, [r7, #7]
   83fc0:	f001 011f 	and.w	r1, r1, #31
   83fc4:	2001      	movs	r0, #1
   83fc6:	fa00 f101 	lsl.w	r1, r0, r1
   83fca:	3220      	adds	r2, #32
   83fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   83fd0:	370c      	adds	r7, #12
   83fd2:	46bd      	mov	sp, r7
   83fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   83fd8:	4770      	bx	lr
   83fda:	bf00      	nop
   83fdc:	e000e100 	.word	0xe000e100

00083fe0 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   83fe0:	b480      	push	{r7}
   83fe2:	b083      	sub	sp, #12
   83fe4:	af00      	add	r7, sp, #0
   83fe6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83fe8:	687b      	ldr	r3, [r7, #4]
   83fea:	2b07      	cmp	r3, #7
   83fec:	d825      	bhi.n	8403a <osc_get_rate+0x5a>
   83fee:	a201      	add	r2, pc, #4	; (adr r2, 83ff4 <osc_get_rate+0x14>)
   83ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83ff4:	00084015 	.word	0x00084015
   83ff8:	0008401b 	.word	0x0008401b
   83ffc:	00084021 	.word	0x00084021
   84000:	00084027 	.word	0x00084027
   84004:	0008402b 	.word	0x0008402b
   84008:	0008402f 	.word	0x0008402f
   8400c:	00084033 	.word	0x00084033
   84010:	00084037 	.word	0x00084037
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   84014:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84018:	e010      	b.n	8403c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8401a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8401e:	e00d      	b.n	8403c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   84020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   84024:	e00a      	b.n	8403c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   84026:	4b08      	ldr	r3, [pc, #32]	; (84048 <osc_get_rate+0x68>)
   84028:	e008      	b.n	8403c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8402a:	4b08      	ldr	r3, [pc, #32]	; (8404c <osc_get_rate+0x6c>)
   8402c:	e006      	b.n	8403c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8402e:	4b08      	ldr	r3, [pc, #32]	; (84050 <osc_get_rate+0x70>)
   84030:	e004      	b.n	8403c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   84032:	4b07      	ldr	r3, [pc, #28]	; (84050 <osc_get_rate+0x70>)
   84034:	e002      	b.n	8403c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   84036:	4b06      	ldr	r3, [pc, #24]	; (84050 <osc_get_rate+0x70>)
   84038:	e000      	b.n	8403c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8403a:	2300      	movs	r3, #0
}
   8403c:	4618      	mov	r0, r3
   8403e:	370c      	adds	r7, #12
   84040:	46bd      	mov	sp, r7
   84042:	f85d 7b04 	ldr.w	r7, [sp], #4
   84046:	4770      	bx	lr
   84048:	003d0900 	.word	0x003d0900
   8404c:	007a1200 	.word	0x007a1200
   84050:	00b71b00 	.word	0x00b71b00

00084054 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   84054:	b580      	push	{r7, lr}
   84056:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   84058:	2006      	movs	r0, #6
   8405a:	4b04      	ldr	r3, [pc, #16]	; (8406c <sysclk_get_main_hz+0x18>)
   8405c:	4798      	blx	r3
   8405e:	4602      	mov	r2, r0
   84060:	4613      	mov	r3, r2
   84062:	00db      	lsls	r3, r3, #3
   84064:	1a9b      	subs	r3, r3, r2
   84066:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   84068:	4618      	mov	r0, r3
   8406a:	bd80      	pop	{r7, pc}
   8406c:	00083fe1 	.word	0x00083fe1

00084070 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   84070:	b580      	push	{r7, lr}
   84072:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   84074:	4b02      	ldr	r3, [pc, #8]	; (84080 <sysclk_get_cpu_hz+0x10>)
   84076:	4798      	blx	r3
   84078:	4603      	mov	r3, r0
   8407a:	085b      	lsrs	r3, r3, #1
}
   8407c:	4618      	mov	r0, r3
   8407e:	bd80      	pop	{r7, pc}
   84080:	00084055 	.word	0x00084055

00084084 <CAN1_Handler>:

/**
 * \brief Default interrupt handler for CAN 1.
 */
void CAN1_Handler(void)
{
   84084:	b580      	push	{r7, lr}
   84086:	b082      	sub	sp, #8
   84088:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   8408a:	481b      	ldr	r0, [pc, #108]	; (840f8 <CAN1_Handler+0x74>)
   8408c:	491b      	ldr	r1, [pc, #108]	; (840fc <CAN1_Handler+0x78>)
   8408e:	4b1c      	ldr	r3, [pc, #112]	; (84100 <CAN1_Handler+0x7c>)
   84090:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   84092:	481c      	ldr	r0, [pc, #112]	; (84104 <CAN1_Handler+0x80>)
   84094:	4b1c      	ldr	r3, [pc, #112]	; (84108 <CAN1_Handler+0x84>)
   84096:	4798      	blx	r3
   84098:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   8409a:	683b      	ldr	r3, [r7, #0]
   8409c:	b2db      	uxtb	r3, r3
   8409e:	2b00      	cmp	r3, #0
   840a0:	d026      	beq.n	840f0 <CAN1_Handler+0x6c>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   840a2:	2300      	movs	r3, #0
   840a4:	71fb      	strb	r3, [r7, #7]
   840a6:	e020      	b.n	840ea <CAN1_Handler+0x66>
			ul_status = can_mailbox_get_status(CAN1, i);
   840a8:	79fb      	ldrb	r3, [r7, #7]
   840aa:	4816      	ldr	r0, [pc, #88]	; (84104 <CAN1_Handler+0x80>)
   840ac:	4619      	mov	r1, r3
   840ae:	4b17      	ldr	r3, [pc, #92]	; (8410c <CAN1_Handler+0x88>)
   840b0:	4798      	blx	r3
   840b2:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   840b4:	683b      	ldr	r3, [r7, #0]
   840b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   840ba:	2b00      	cmp	r3, #0
   840bc:	d012      	beq.n	840e4 <CAN1_Handler+0x60>
				can1_mailbox.ul_mb_idx = i;
   840be:	79fa      	ldrb	r2, [r7, #7]
   840c0:	4b0d      	ldr	r3, [pc, #52]	; (840f8 <CAN1_Handler+0x74>)
   840c2:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   840c4:	4b0c      	ldr	r3, [pc, #48]	; (840f8 <CAN1_Handler+0x74>)
   840c6:	683a      	ldr	r2, [r7, #0]
   840c8:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   840ca:	480e      	ldr	r0, [pc, #56]	; (84104 <CAN1_Handler+0x80>)
   840cc:	490a      	ldr	r1, [pc, #40]	; (840f8 <CAN1_Handler+0x74>)
   840ce:	4b10      	ldr	r3, [pc, #64]	; (84110 <CAN1_Handler+0x8c>)
   840d0:	4798      	blx	r3
				
				/* Decode CAN Message */
				decode_can_msg(&can1_mailbox, CAN1);
   840d2:	4809      	ldr	r0, [pc, #36]	; (840f8 <CAN1_Handler+0x74>)
   840d4:	490b      	ldr	r1, [pc, #44]	; (84104 <CAN1_Handler+0x80>)
   840d6:	4b0f      	ldr	r3, [pc, #60]	; (84114 <CAN1_Handler+0x90>)
   840d8:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   840da:	4807      	ldr	r0, [pc, #28]	; (840f8 <CAN1_Handler+0x74>)
   840dc:	4907      	ldr	r1, [pc, #28]	; (840fc <CAN1_Handler+0x78>)
   840de:	4b0e      	ldr	r3, [pc, #56]	; (84118 <CAN1_Handler+0x94>)
   840e0:	4798      	blx	r3
				break;
   840e2:	e005      	b.n	840f0 <CAN1_Handler+0x6c>
	/* Save the state of the can1_mailbox object */	
	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   840e4:	79fb      	ldrb	r3, [r7, #7]
   840e6:	3301      	adds	r3, #1
   840e8:	71fb      	strb	r3, [r7, #7]
   840ea:	79fb      	ldrb	r3, [r7, #7]
   840ec:	2b07      	cmp	r3, #7
   840ee:	d9db      	bls.n	840a8 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   840f0:	3708      	adds	r7, #8
   840f2:	46bd      	mov	sp, r7
   840f4:	bd80      	pop	{r7, pc}
   840f6:	bf00      	nop
   840f8:	2007a624 	.word	0x2007a624
   840fc:	2007a64c 	.word	0x2007a64c
   84100:	0008450d 	.word	0x0008450d
   84104:	400b8000 	.word	0x400b8000
   84108:	000808d5 	.word	0x000808d5
   8410c:	00080919 	.word	0x00080919
   84110:	00080a99 	.word	0x00080a99
   84114:	000841bd 	.word	0x000841bd
   84118:	0008457d 	.word	0x0008457d

0008411c <CAN0_Handler>:

/**
 * \brief Default interrupt handler for CAN0
 */
void CAN0_Handler(void)
{
   8411c:	b580      	push	{r7, lr}
   8411e:	b082      	sub	sp, #8
   84120:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);
   84122:	481c      	ldr	r0, [pc, #112]	; (84194 <CAN0_Handler+0x78>)
   84124:	491c      	ldr	r1, [pc, #112]	; (84198 <CAN0_Handler+0x7c>)
   84126:	4b1d      	ldr	r3, [pc, #116]	; (8419c <CAN0_Handler+0x80>)
   84128:	4798      	blx	r3

	ul_status = can_get_status(CAN0);
   8412a:	481d      	ldr	r0, [pc, #116]	; (841a0 <CAN0_Handler+0x84>)
   8412c:	4b1d      	ldr	r3, [pc, #116]	; (841a4 <CAN0_Handler+0x88>)
   8412e:	4798      	blx	r3
   84130:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   84132:	683b      	ldr	r3, [r7, #0]
   84134:	b2db      	uxtb	r3, r3
   84136:	2b00      	cmp	r3, #0
   84138:	d029      	beq.n	8418e <CAN0_Handler+0x72>
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8413a:	2300      	movs	r3, #0
   8413c:	71fb      	strb	r3, [r7, #7]
   8413e:	e023      	b.n	84188 <CAN0_Handler+0x6c>
			ul_status = can_mailbox_get_status(CAN0, i);
   84140:	79fb      	ldrb	r3, [r7, #7]
   84142:	4817      	ldr	r0, [pc, #92]	; (841a0 <CAN0_Handler+0x84>)
   84144:	4619      	mov	r1, r3
   84146:	4b18      	ldr	r3, [pc, #96]	; (841a8 <CAN0_Handler+0x8c>)
   84148:	4798      	blx	r3
   8414a:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   8414c:	683b      	ldr	r3, [r7, #0]
   8414e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   84152:	2b00      	cmp	r3, #0
   84154:	d015      	beq.n	84182 <CAN0_Handler+0x66>
				can0_mailbox.ul_mb_idx = i;
   84156:	79fa      	ldrb	r2, [r7, #7]
   84158:	4b0e      	ldr	r3, [pc, #56]	; (84194 <CAN0_Handler+0x78>)
   8415a:	601a      	str	r2, [r3, #0]
				can0_mailbox.ul_status = ul_status;
   8415c:	4b0d      	ldr	r3, [pc, #52]	; (84194 <CAN0_Handler+0x78>)
   8415e:	683a      	ldr	r2, [r7, #0]
   84160:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN0, &can0_mailbox);
   84162:	480f      	ldr	r0, [pc, #60]	; (841a0 <CAN0_Handler+0x84>)
   84164:	490b      	ldr	r1, [pc, #44]	; (84194 <CAN0_Handler+0x78>)
   84166:	4b11      	ldr	r3, [pc, #68]	; (841ac <CAN0_Handler+0x90>)
   84168:	4798      	blx	r3
				g_ul_recv_status = 1;
   8416a:	4b11      	ldr	r3, [pc, #68]	; (841b0 <CAN0_Handler+0x94>)
   8416c:	2201      	movs	r2, #1
   8416e:	601a      	str	r2, [r3, #0]
				
				// Decode CAN Message
				decode_can_msg(&can0_mailbox, CAN0);
   84170:	4808      	ldr	r0, [pc, #32]	; (84194 <CAN0_Handler+0x78>)
   84172:	490b      	ldr	r1, [pc, #44]	; (841a0 <CAN0_Handler+0x84>)
   84174:	4b0f      	ldr	r3, [pc, #60]	; (841b4 <CAN0_Handler+0x98>)
   84176:	4798      	blx	r3
				//assert(g_ul_recv_status); ***implement assert here.
				
				/* Restore the can0 mailbox object */
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
   84178:	4806      	ldr	r0, [pc, #24]	; (84194 <CAN0_Handler+0x78>)
   8417a:	4907      	ldr	r1, [pc, #28]	; (84198 <CAN0_Handler+0x7c>)
   8417c:	4b0e      	ldr	r3, [pc, #56]	; (841b8 <CAN0_Handler+0x9c>)
   8417e:	4798      	blx	r3
				break;
   84180:	e005      	b.n	8418e <CAN0_Handler+0x72>
	/* Save the state of the can0_mailbox object */
	save_can_object(&can0_mailbox, &temp_mailbox_C0);

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) {
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   84182:	79fb      	ldrb	r3, [r7, #7]
   84184:	3301      	adds	r3, #1
   84186:	71fb      	strb	r3, [r7, #7]
   84188:	79fb      	ldrb	r3, [r7, #7]
   8418a:	2b07      	cmp	r3, #7
   8418c:	d9d8      	bls.n	84140 <CAN0_Handler+0x24>
				restore_can_object(&can0_mailbox, &temp_mailbox_C0);
				break;
			}
		}
	}
}
   8418e:	3708      	adds	r7, #8
   84190:	46bd      	mov	sp, r7
   84192:	bd80      	pop	{r7, pc}
   84194:	2007a66c 	.word	0x2007a66c
   84198:	2007a68c 	.word	0x2007a68c
   8419c:	0008450d 	.word	0x0008450d
   841a0:	400b4000 	.word	0x400b4000
   841a4:	000808d5 	.word	0x000808d5
   841a8:	00080919 	.word	0x00080919
   841ac:	00080a99 	.word	0x00080a99
   841b0:	2007a618 	.word	0x2007a618
   841b4:	000841bd 	.word	0x000841bd
   841b8:	0008457d 	.word	0x0008457d

000841bc <decode_can_msg>:
 * the message received.
 * @param *controller:  	CAN sending controller
 * @param *p_mailbox:		CAN mailbox structure of sending controller
 */
void decode_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   841bc:	b580      	push	{r7, lr}
   841be:	b084      	sub	sp, #16
   841c0:	af00      	add	r7, sp, #0
   841c2:	6078      	str	r0, [r7, #4]
   841c4:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   841c6:	687b      	ldr	r3, [r7, #4]
   841c8:	699b      	ldr	r3, [r3, #24]
   841ca:	60fb      	str	r3, [r7, #12]
	if(controller == CAN0)
   841cc:	683a      	ldr	r2, [r7, #0]
   841ce:	4b4c      	ldr	r3, [pc, #304]	; (84300 <decode_can_msg+0x144>)
   841d0:	429a      	cmp	r2, r3
   841d2:	d102      	bne.n	841da <decode_can_msg+0x1e>
		pio_toggle_pin(LED0_GPIO);
   841d4:	203b      	movs	r0, #59	; 0x3b
   841d6:	4b4b      	ldr	r3, [pc, #300]	; (84304 <decode_can_msg+0x148>)
   841d8:	4798      	blx	r3
	if(controller == CAN1)
   841da:	683a      	ldr	r2, [r7, #0]
   841dc:	4b4a      	ldr	r3, [pc, #296]	; (84308 <decode_can_msg+0x14c>)
   841de:	429a      	cmp	r2, r3
   841e0:	d102      	bne.n	841e8 <decode_can_msg+0x2c>
		pio_toggle_pin(LED1_GPIO);
   841e2:	2055      	movs	r0, #85	; 0x55
   841e4:	4b47      	ldr	r3, [pc, #284]	; (84304 <decode_can_msg+0x148>)
   841e6:	4798      	blx	r3
	if (ul_data_incom == COMMAND_OUT)
   841e8:	68fb      	ldr	r3, [r7, #12]
   841ea:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   841ee:	d102      	bne.n	841f6 <decode_can_msg+0x3a>
		pio_toggle_pin(LED0_GPIO);
   841f0:	203b      	movs	r0, #59	; 0x3b
   841f2:	4b44      	ldr	r3, [pc, #272]	; (84304 <decode_can_msg+0x148>)
   841f4:	4798      	blx	r3
	if (ul_data_incom == COMMAND_IN)
   841f6:	68fb      	ldr	r3, [r7, #12]
   841f8:	f1b3 3f11 	cmp.w	r3, #286331153	; 0x11111111
   841fc:	d102      	bne.n	84204 <decode_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);
   841fe:	2055      	movs	r0, #85	; 0x55
   84200:	4b40      	ldr	r3, [pc, #256]	; (84304 <decode_can_msg+0x148>)
   84202:	4798      	blx	r3
	if (ul_data_incom == DUMMY_COMMAND)
   84204:	68fb      	ldr	r3, [r7, #12]
   84206:	f1b3 3fff 	cmp.w	r3, #4294967295
   8420a:	d102      	bne.n	84212 <decode_can_msg+0x56>
		pio_toggle_pin(LED1_GPIO);
   8420c:	2055      	movs	r0, #85	; 0x55
   8420e:	4b3d      	ldr	r3, [pc, #244]	; (84304 <decode_can_msg+0x148>)
   84210:	4798      	blx	r3
	if (ul_data_incom == MSG_ACK)
   84212:	68fb      	ldr	r3, [r7, #12]
   84214:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   84218:	d102      	bne.n	84220 <decode_can_msg+0x64>
		pio_toggle_pin(LED1_GPIO);
   8421a:	2055      	movs	r0, #85	; 0x55
   8421c:	4b39      	ldr	r3, [pc, #228]	; (84304 <decode_can_msg+0x148>)
   8421e:	4798      	blx	r3

	if ((ul_data_incom == COMMAND_IN) & (controller == CAN0)) 
   84220:	68fb      	ldr	r3, [r7, #12]
   84222:	f1b3 3f11 	cmp.w	r3, #286331153	; 0x11111111
   84226:	bf14      	ite	ne
   84228:	2300      	movne	r3, #0
   8422a:	2301      	moveq	r3, #1
   8422c:	b2da      	uxtb	r2, r3
   8422e:	6839      	ldr	r1, [r7, #0]
   84230:	4b33      	ldr	r3, [pc, #204]	; (84300 <decode_can_msg+0x144>)
   84232:	4299      	cmp	r1, r3
   84234:	bf14      	ite	ne
   84236:	2300      	movne	r3, #0
   84238:	2301      	moveq	r3, #1
   8423a:	b2db      	uxtb	r3, r3
   8423c:	4013      	ands	r3, r2
   8423e:	b2db      	uxtb	r3, r3
   84240:	2b00      	cmp	r3, #0
   84242:	d004      	beq.n	8424e <decode_can_msg+0x92>
	{
		// Command has been received, respond.
		pio_toggle_pin(LED0_GPIO);
   84244:	203b      	movs	r0, #59	; 0x3b
   84246:	4b2f      	ldr	r3, [pc, #188]	; (84304 <decode_can_msg+0x148>)
   84248:	4798      	blx	r3
		command_in();
   8424a:	4b30      	ldr	r3, [pc, #192]	; (8430c <decode_can_msg+0x150>)
   8424c:	4798      	blx	r3
	}
	if ((ul_data_incom == COMMAND_OUT) & (controller == CAN1))
   8424e:	68fb      	ldr	r3, [r7, #12]
   84250:	f1b3 3f01 	cmp.w	r3, #16843009	; 0x1010101
   84254:	bf14      	ite	ne
   84256:	2300      	movne	r3, #0
   84258:	2301      	moveq	r3, #1
   8425a:	b2da      	uxtb	r2, r3
   8425c:	6839      	ldr	r1, [r7, #0]
   8425e:	4b2a      	ldr	r3, [pc, #168]	; (84308 <decode_can_msg+0x14c>)
   84260:	4299      	cmp	r1, r3
   84262:	bf14      	ite	ne
   84264:	2300      	movne	r3, #0
   84266:	2301      	moveq	r3, #1
   84268:	b2db      	uxtb	r3, r3
   8426a:	4013      	ands	r3, r2
   8426c:	b2db      	uxtb	r3, r3
   8426e:	2b00      	cmp	r3, #0
   84270:	d002      	beq.n	84278 <decode_can_msg+0xbc>
	{
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the response to the command
   84272:	2056      	movs	r0, #86	; 0x56
   84274:	4b23      	ldr	r3, [pc, #140]	; (84304 <decode_can_msg+0x148>)
   84276:	4798      	blx	r3
	}								// has been received.
	if ((ul_data_incom == HK_TRANSMIT) & (controller == CAN1))
   84278:	68fa      	ldr	r2, [r7, #12]
   8427a:	4b25      	ldr	r3, [pc, #148]	; (84310 <decode_can_msg+0x154>)
   8427c:	429a      	cmp	r2, r3
   8427e:	bf14      	ite	ne
   84280:	2300      	movne	r3, #0
   84282:	2301      	moveq	r3, #1
   84284:	b2da      	uxtb	r2, r3
   84286:	6839      	ldr	r1, [r7, #0]
   84288:	4b1f      	ldr	r3, [pc, #124]	; (84308 <decode_can_msg+0x14c>)
   8428a:	4299      	cmp	r1, r3
   8428c:	bf14      	ite	ne
   8428e:	2300      	movne	r3, #0
   84290:	2301      	moveq	r3, #1
   84292:	b2db      	uxtb	r3, r3
   84294:	4013      	ands	r3, r2
   84296:	b2db      	uxtb	r3, r3
   84298:	2b00      	cmp	r3, #0
   8429a:	d002      	beq.n	842a2 <decode_can_msg+0xe6>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   8429c:	2057      	movs	r0, #87	; 0x57
   8429e:	4b19      	ldr	r3, [pc, #100]	; (84304 <decode_can_msg+0x148>)
   842a0:	4798      	blx	r3
	}
	if ((ul_data_incom == DUMMY_COMMAND) & (controller == CAN1))
   842a2:	68fb      	ldr	r3, [r7, #12]
   842a4:	f1b3 3fff 	cmp.w	r3, #4294967295
   842a8:	bf14      	ite	ne
   842aa:	2300      	movne	r3, #0
   842ac:	2301      	moveq	r3, #1
   842ae:	b2da      	uxtb	r2, r3
   842b0:	6839      	ldr	r1, [r7, #0]
   842b2:	4b15      	ldr	r3, [pc, #84]	; (84308 <decode_can_msg+0x14c>)
   842b4:	4299      	cmp	r1, r3
   842b6:	bf14      	ite	ne
   842b8:	2300      	movne	r3, #0
   842ba:	2301      	moveq	r3, #1
   842bc:	b2db      	uxtb	r3, r3
   842be:	4013      	ands	r3, r2
   842c0:	b2db      	uxtb	r3, r3
   842c2:	2b00      	cmp	r3, #0
   842c4:	d002      	beq.n	842cc <decode_can_msg+0x110>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates housekeeping has been received.
   842c6:	2057      	movs	r0, #87	; 0x57
   842c8:	4b0e      	ldr	r3, [pc, #56]	; (84304 <decode_can_msg+0x148>)
   842ca:	4798      	blx	r3
	}
	
	if ((ul_data_incom == MSG_ACK) & (controller == CAN1))
   842cc:	68fb      	ldr	r3, [r7, #12]
   842ce:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
   842d2:	bf14      	ite	ne
   842d4:	2300      	movne	r3, #0
   842d6:	2301      	moveq	r3, #1
   842d8:	b2da      	uxtb	r2, r3
   842da:	6839      	ldr	r1, [r7, #0]
   842dc:	4b0a      	ldr	r3, [pc, #40]	; (84308 <decode_can_msg+0x14c>)
   842de:	4299      	cmp	r1, r3
   842e0:	bf14      	ite	ne
   842e2:	2300      	movne	r3, #0
   842e4:	2301      	moveq	r3, #1
   842e6:	b2db      	uxtb	r3, r3
   842e8:	4013      	ands	r3, r2
   842ea:	b2db      	uxtb	r3, r3
   842ec:	2b00      	cmp	r3, #0
   842ee:	d002      	beq.n	842f6 <decode_can_msg+0x13a>
	{
		pio_toggle_pin(LED3_GPIO);	// LED3 indicates the reception of a return message.
   842f0:	2057      	movs	r0, #87	; 0x57
   842f2:	4b04      	ldr	r3, [pc, #16]	; (84304 <decode_can_msg+0x148>)
   842f4:	4798      	blx	r3
	}
	return;
   842f6:	bf00      	nop
}
   842f8:	3710      	adds	r7, #16
   842fa:	46bd      	mov	sp, r7
   842fc:	bd80      	pop	{r7, pc}
   842fe:	bf00      	nop
   84300:	400b4000 	.word	0x400b4000
   84304:	00080e99 	.word	0x00080e99
   84308:	400b8000 	.word	0x400b8000
   8430c:	00084419 	.word	0x00084419
   84310:	12345678 	.word	0x12345678

00084314 <reset_mailbox_conf>:
/**
 * \brief Resets the mailbox configure structure.  
 * @param *p_mailbox:		Mailbox structure that will be reset. 
 */
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   84314:	b480      	push	{r7}
   84316:	b083      	sub	sp, #12
   84318:	af00      	add	r7, sp, #0
   8431a:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   8431c:	687b      	ldr	r3, [r7, #4]
   8431e:	2200      	movs	r2, #0
   84320:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   84322:	687b      	ldr	r3, [r7, #4]
   84324:	2200      	movs	r2, #0
   84326:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   84328:	687b      	ldr	r3, [r7, #4]
   8432a:	2200      	movs	r2, #0
   8432c:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   8432e:	687b      	ldr	r3, [r7, #4]
   84330:	2200      	movs	r2, #0
   84332:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   84334:	687b      	ldr	r3, [r7, #4]
   84336:	2200      	movs	r2, #0
   84338:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   8433a:	687b      	ldr	r3, [r7, #4]
   8433c:	2200      	movs	r2, #0
   8433e:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   84340:	687b      	ldr	r3, [r7, #4]
   84342:	2200      	movs	r2, #0
   84344:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   84346:	687b      	ldr	r3, [r7, #4]
   84348:	2200      	movs	r2, #0
   8434a:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   8434c:	687b      	ldr	r3, [r7, #4]
   8434e:	2200      	movs	r2, #0
   84350:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   84352:	687b      	ldr	r3, [r7, #4]
   84354:	2200      	movs	r2, #0
   84356:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   84358:	687b      	ldr	r3, [r7, #4]
   8435a:	2200      	movs	r2, #0
   8435c:	61da      	str	r2, [r3, #28]
}
   8435e:	370c      	adds	r7, #12
   84360:	46bd      	mov	sp, r7
   84362:	f85d 7b04 	ldr.w	r7, [sp], #4
   84366:	4770      	bx	lr

00084368 <send_can_command>:
/*																		*/
/*	This function does not alter the can0_mailbox object.				*/
/************************************************************************/

uint32_t send_can_command(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   84368:	b580      	push	{r7, lr}
   8436a:	b08c      	sub	sp, #48	; 0x30
   8436c:	af00      	add	r7, sp, #0
   8436e:	60f8      	str	r0, [r7, #12]
   84370:	60b9      	str	r1, [r7, #8]
   84372:	607a      	str	r2, [r7, #4]
   84374:	603b      	str	r3, [r7, #0]
	*/
	
	
	/* Save current can0_mailbox object */
	can_temp_t temp_mailbox;
	save_can_object(&can0_mailbox, &temp_mailbox);
   84376:	f107 0310 	add.w	r3, r7, #16
   8437a:	481e      	ldr	r0, [pc, #120]	; (843f4 <send_can_command+0x8c>)
   8437c:	4619      	mov	r1, r3
   8437e:	4b1e      	ldr	r3, [pc, #120]	; (843f8 <send_can_command+0x90>)
   84380:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   84382:	481c      	ldr	r0, [pc, #112]	; (843f4 <send_can_command+0x8c>)
   84384:	4b1d      	ldr	r3, [pc, #116]	; (843fc <send_can_command+0x94>)
   84386:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   84388:	4b1a      	ldr	r3, [pc, #104]	; (843f4 <send_can_command+0x8c>)
   8438a:	2207      	movs	r2, #7
   8438c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   8438e:	4b19      	ldr	r3, [pc, #100]	; (843f4 <send_can_command+0x8c>)
   84390:	2203      	movs	r2, #3
   84392:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 9;		//Transmission Priority (Can be Changed dynamically)
   84394:	4b17      	ldr	r3, [pc, #92]	; (843f4 <send_can_command+0x8c>)
   84396:	2209      	movs	r2, #9
   84398:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8439a:	4b16      	ldr	r3, [pc, #88]	; (843f4 <send_can_command+0x8c>)
   8439c:	2200      	movs	r2, #0
   8439e:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   843a0:	4b14      	ldr	r3, [pc, #80]	; (843f4 <send_can_command+0x8c>)
   843a2:	2200      	movs	r2, #0
   843a4:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   843a6:	4816      	ldr	r0, [pc, #88]	; (84400 <send_can_command+0x98>)
   843a8:	4912      	ldr	r1, [pc, #72]	; (843f4 <send_can_command+0x8c>)
   843aa:	4b16      	ldr	r3, [pc, #88]	; (84404 <send_can_command+0x9c>)
   843ac:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   843ae:	687b      	ldr	r3, [r7, #4]
   843b0:	049a      	lsls	r2, r3, #18
   843b2:	4b15      	ldr	r3, [pc, #84]	; (84408 <send_can_command+0xa0>)
   843b4:	4013      	ands	r3, r2
   843b6:	4a0f      	ldr	r2, [pc, #60]	; (843f4 <send_can_command+0x8c>)
   843b8:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   843ba:	4b0e      	ldr	r3, [pc, #56]	; (843f4 <send_can_command+0x8c>)
   843bc:	68fa      	ldr	r2, [r7, #12]
   843be:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   843c0:	4b0c      	ldr	r3, [pc, #48]	; (843f4 <send_can_command+0x8c>)
   843c2:	68ba      	ldr	r2, [r7, #8]
   843c4:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   843c6:	4b0b      	ldr	r3, [pc, #44]	; (843f4 <send_can_command+0x8c>)
   843c8:	2208      	movs	r2, #8
   843ca:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   843cc:	480c      	ldr	r0, [pc, #48]	; (84400 <send_can_command+0x98>)
   843ce:	4909      	ldr	r1, [pc, #36]	; (843f4 <send_can_command+0x8c>)
   843d0:	4b0e      	ldr	r3, [pc, #56]	; (8440c <send_can_command+0xa4>)
   843d2:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   843d4:	480a      	ldr	r0, [pc, #40]	; (84400 <send_can_command+0x98>)
   843d6:	2180      	movs	r1, #128	; 0x80
   843d8:	4b0d      	ldr	r3, [pc, #52]	; (84410 <send_can_command+0xa8>)
   843da:	4798      	blx	r3
	
	/* Restore the can0_mailbox object */
	restore_can_object(&can0_mailbox, &temp_mailbox);
   843dc:	f107 0310 	add.w	r3, r7, #16
   843e0:	4804      	ldr	r0, [pc, #16]	; (843f4 <send_can_command+0x8c>)
   843e2:	4619      	mov	r1, r3
   843e4:	4b0b      	ldr	r3, [pc, #44]	; (84414 <send_can_command+0xac>)
   843e6:	4798      	blx	r3
	
	return 1;
   843e8:	2301      	movs	r3, #1
}
   843ea:	4618      	mov	r0, r3
   843ec:	3730      	adds	r7, #48	; 0x30
   843ee:	46bd      	mov	sp, r7
   843f0:	bd80      	pop	{r7, pc}
   843f2:	bf00      	nop
   843f4:	2007a66c 	.word	0x2007a66c
   843f8:	0008450d 	.word	0x0008450d
   843fc:	00084315 	.word	0x00084315
   84400:	400b4000 	.word	0x400b4000
   84404:	00080979 	.word	0x00080979
   84408:	1ffc0000 	.word	0x1ffc0000
   8440c:	00080b5d 	.word	0x00080b5d
   84410:	000808ed 	.word	0x000808ed
   84414:	0008457d 	.word	0x0008457d

00084418 <command_in>:

/**
 * \brief Responds to he command from CAN0 and sends to CAN1
 **/
void command_in(void)
{
   84418:	b580      	push	{r7, lr}
   8441a:	af00      	add	r7, sp, #0
	pio_toggle_pin(LED0_GPIO);
   8441c:	203b      	movs	r0, #59	; 0x3b
   8441e:	4b2d      	ldr	r3, [pc, #180]	; (844d4 <command_in+0xbc>)
   84420:	4798      	blx	r3
	
	can_disable_interrupt(CAN0, CAN_IER_MB0);
   84422:	482d      	ldr	r0, [pc, #180]	; (844d8 <command_in+0xc0>)
   84424:	2101      	movs	r1, #1
   84426:	4b2d      	ldr	r3, [pc, #180]	; (844dc <command_in+0xc4>)
   84428:	4798      	blx	r3
	NVIC_DisableIRQ(CAN0_IRQn);
   8442a:	202b      	movs	r0, #43	; 0x2b
   8442c:	4b2c      	ldr	r3, [pc, #176]	; (844e0 <command_in+0xc8>)
   8442e:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   84430:	4829      	ldr	r0, [pc, #164]	; (844d8 <command_in+0xc0>)
   84432:	4b2c      	ldr	r3, [pc, #176]	; (844e4 <command_in+0xcc>)
   84434:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   84436:	482c      	ldr	r0, [pc, #176]	; (844e8 <command_in+0xd0>)
   84438:	4b2a      	ldr	r3, [pc, #168]	; (844e4 <command_in+0xcc>)
   8443a:	4798      	blx	r3

	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   8443c:	482b      	ldr	r0, [pc, #172]	; (844ec <command_in+0xd4>)
   8443e:	4b2c      	ldr	r3, [pc, #176]	; (844f0 <command_in+0xd8>)
   84440:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 1;
   84442:	4b2c      	ldr	r3, [pc, #176]	; (844f4 <command_in+0xdc>)
   84444:	2201      	movs	r2, #1
   84446:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84448:	4b2a      	ldr	r3, [pc, #168]	; (844f4 <command_in+0xdc>)
   8444a:	2201      	movs	r2, #1
   8444c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk;
   8444e:	4b29      	ldr	r3, [pc, #164]	; (844f4 <command_in+0xdc>)
   84450:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84454:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(7);
   84456:	4b27      	ldr	r3, [pc, #156]	; (844f4 <command_in+0xdc>)
   84458:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   8445c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8445e:	4822      	ldr	r0, [pc, #136]	; (844e8 <command_in+0xd0>)
   84460:	4924      	ldr	r1, [pc, #144]	; (844f4 <command_in+0xdc>)
   84462:	4b25      	ldr	r3, [pc, #148]	; (844f8 <command_in+0xe0>)
   84464:	4798      	blx	r3

	/* Init CAN0 Mailbox 0 to Transmit Mailbox. */
	reset_mailbox_conf(&can0_mailbox);
   84466:	4821      	ldr	r0, [pc, #132]	; (844ec <command_in+0xd4>)
   84468:	4b21      	ldr	r3, [pc, #132]	; (844f0 <command_in+0xd8>)
   8446a:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 1;
   8446c:	4b1f      	ldr	r3, [pc, #124]	; (844ec <command_in+0xd4>)
   8446e:	2201      	movs	r2, #1
   84470:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   84472:	4b1e      	ldr	r3, [pc, #120]	; (844ec <command_in+0xd4>)
   84474:	2203      	movs	r2, #3
   84476:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 15;
   84478:	4b1c      	ldr	r3, [pc, #112]	; (844ec <command_in+0xd4>)
   8447a:	220f      	movs	r2, #15
   8447c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8447e:	4b1b      	ldr	r3, [pc, #108]	; (844ec <command_in+0xd4>)
   84480:	2200      	movs	r2, #0
   84482:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   84484:	4b19      	ldr	r3, [pc, #100]	; (844ec <command_in+0xd4>)
   84486:	2200      	movs	r2, #0
   84488:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   8448a:	4813      	ldr	r0, [pc, #76]	; (844d8 <command_in+0xc0>)
   8448c:	4917      	ldr	r1, [pc, #92]	; (844ec <command_in+0xd4>)
   8448e:	4b1a      	ldr	r3, [pc, #104]	; (844f8 <command_in+0xe0>)
   84490:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(7);
   84492:	4b16      	ldr	r3, [pc, #88]	; (844ec <command_in+0xd4>)
   84494:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   84498:	611a      	str	r2, [r3, #16]
	can0_mailbox.ul_datal = COMMAND_OUT;
   8449a:	4b14      	ldr	r3, [pc, #80]	; (844ec <command_in+0xd4>)
   8449c:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
   844a0:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = CAN_MSG_DUMMY_DATA;
   844a2:	4b12      	ldr	r3, [pc, #72]	; (844ec <command_in+0xd4>)
   844a4:	f04f 32ff 	mov.w	r2, #4294967295
   844a8:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   844aa:	4b10      	ldr	r3, [pc, #64]	; (844ec <command_in+0xd4>)
   844ac:	2208      	movs	r2, #8
   844ae:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   844b0:	4809      	ldr	r0, [pc, #36]	; (844d8 <command_in+0xc0>)
   844b2:	490e      	ldr	r1, [pc, #56]	; (844ec <command_in+0xd4>)
   844b4:	4b11      	ldr	r3, [pc, #68]	; (844fc <command_in+0xe4>)
   844b6:	4798      	blx	r3

	/* Enable CAN1 mailbox 0 interrupt. */
	can_enable_interrupt(CAN1, CAN_IER_MB1);
   844b8:	480b      	ldr	r0, [pc, #44]	; (844e8 <command_in+0xd0>)
   844ba:	2102      	movs	r1, #2
   844bc:	4b10      	ldr	r3, [pc, #64]	; (84500 <command_in+0xe8>)
   844be:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB1);
   844c0:	4805      	ldr	r0, [pc, #20]	; (844d8 <command_in+0xc0>)
   844c2:	2102      	movs	r1, #2
   844c4:	4b0f      	ldr	r3, [pc, #60]	; (84504 <command_in+0xec>)
   844c6:	4798      	blx	r3

	/* potentially @non-terminating@ */
	while (!g_ul_recv_status) {
   844c8:	bf00      	nop
   844ca:	4b0f      	ldr	r3, [pc, #60]	; (84508 <command_in+0xf0>)
   844cc:	681b      	ldr	r3, [r3, #0]
   844ce:	2b00      	cmp	r3, #0
   844d0:	d0fb      	beq.n	844ca <command_in+0xb2>
	}
}
   844d2:	bd80      	pop	{r7, pc}
   844d4:	00080e99 	.word	0x00080e99
   844d8:	400b4000 	.word	0x400b4000
   844dc:	000808b9 	.word	0x000808b9
   844e0:	00083fad 	.word	0x00083fad
   844e4:	00080c15 	.word	0x00080c15
   844e8:	400b8000 	.word	0x400b8000
   844ec:	2007a66c 	.word	0x2007a66c
   844f0:	00084315 	.word	0x00084315
   844f4:	2007a624 	.word	0x2007a624
   844f8:	00080979 	.word	0x00080979
   844fc:	00080b5d 	.word	0x00080b5d
   84500:	0008089d 	.word	0x0008089d
   84504:	000808ed 	.word	0x000808ed
   84508:	2007a618 	.word	0x2007a618

0008450c <save_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and save each of it's elements in a temporary can structure.        */
/************************************************************************/

void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   8450c:	b480      	push	{r7}
   8450e:	b083      	sub	sp, #12
   84510:	af00      	add	r7, sp, #0
   84512:	6078      	str	r0, [r7, #4]
   84514:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   84516:	687b      	ldr	r3, [r7, #4]
   84518:	681a      	ldr	r2, [r3, #0]
   8451a:	683b      	ldr	r3, [r7, #0]
   8451c:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   8451e:	687b      	ldr	r3, [r7, #4]
   84520:	791a      	ldrb	r2, [r3, #4]
   84522:	683b      	ldr	r3, [r7, #0]
   84524:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   84526:	687b      	ldr	r3, [r7, #4]
   84528:	795a      	ldrb	r2, [r3, #5]
   8452a:	683b      	ldr	r3, [r7, #0]
   8452c:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   8452e:	687b      	ldr	r3, [r7, #4]
   84530:	799a      	ldrb	r2, [r3, #6]
   84532:	683b      	ldr	r3, [r7, #0]
   84534:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   84536:	687b      	ldr	r3, [r7, #4]
   84538:	79da      	ldrb	r2, [r3, #7]
   8453a:	683b      	ldr	r3, [r7, #0]
   8453c:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   8453e:	687b      	ldr	r3, [r7, #4]
   84540:	689a      	ldr	r2, [r3, #8]
   84542:	683b      	ldr	r3, [r7, #0]
   84544:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   84546:	687b      	ldr	r3, [r7, #4]
   84548:	68da      	ldr	r2, [r3, #12]
   8454a:	683b      	ldr	r3, [r7, #0]
   8454c:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   8454e:	687b      	ldr	r3, [r7, #4]
   84550:	691a      	ldr	r2, [r3, #16]
   84552:	683b      	ldr	r3, [r7, #0]
   84554:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   84556:	687b      	ldr	r3, [r7, #4]
   84558:	695a      	ldr	r2, [r3, #20]
   8455a:	683b      	ldr	r3, [r7, #0]
   8455c:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   8455e:	687b      	ldr	r3, [r7, #4]
   84560:	699a      	ldr	r2, [r3, #24]
   84562:	683b      	ldr	r3, [r7, #0]
   84564:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   84566:	687b      	ldr	r3, [r7, #4]
   84568:	69da      	ldr	r2, [r3, #28]
   8456a:	683b      	ldr	r3, [r7, #0]
   8456c:	61da      	str	r2, [r3, #28]
	
	return;
   8456e:	bf00      	nop
}
   84570:	370c      	adds	r7, #12
   84572:	46bd      	mov	sp, r7
   84574:	f85d 7b04 	ldr.w	r7, [sp], #4
   84578:	4770      	bx	lr
   8457a:	bf00      	nop

0008457c <restore_can_object>:
/*	This function will take in a mailbox object as the original pointer */
/*  and restore each of it's elements from a temporary can structure.   */
/************************************************************************/

void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   8457c:	b480      	push	{r7}
   8457e:	b083      	sub	sp, #12
   84580:	af00      	add	r7, sp, #0
   84582:	6078      	str	r0, [r7, #4]
   84584:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   84586:	683b      	ldr	r3, [r7, #0]
   84588:	681a      	ldr	r2, [r3, #0]
   8458a:	687b      	ldr	r3, [r7, #4]
   8458c:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   8458e:	683b      	ldr	r3, [r7, #0]
   84590:	791a      	ldrb	r2, [r3, #4]
   84592:	687b      	ldr	r3, [r7, #4]
   84594:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   84596:	683b      	ldr	r3, [r7, #0]
   84598:	795a      	ldrb	r2, [r3, #5]
   8459a:	687b      	ldr	r3, [r7, #4]
   8459c:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   8459e:	683b      	ldr	r3, [r7, #0]
   845a0:	799a      	ldrb	r2, [r3, #6]
   845a2:	687b      	ldr	r3, [r7, #4]
   845a4:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   845a6:	683b      	ldr	r3, [r7, #0]
   845a8:	79da      	ldrb	r2, [r3, #7]
   845aa:	687b      	ldr	r3, [r7, #4]
   845ac:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   845ae:	683b      	ldr	r3, [r7, #0]
   845b0:	689a      	ldr	r2, [r3, #8]
   845b2:	687b      	ldr	r3, [r7, #4]
   845b4:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   845b6:	683b      	ldr	r3, [r7, #0]
   845b8:	68da      	ldr	r2, [r3, #12]
   845ba:	687b      	ldr	r3, [r7, #4]
   845bc:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   845be:	683b      	ldr	r3, [r7, #0]
   845c0:	691a      	ldr	r2, [r3, #16]
   845c2:	687b      	ldr	r3, [r7, #4]
   845c4:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   845c6:	683b      	ldr	r3, [r7, #0]
   845c8:	695a      	ldr	r2, [r3, #20]
   845ca:	687b      	ldr	r3, [r7, #4]
   845cc:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   845ce:	683b      	ldr	r3, [r7, #0]
   845d0:	699a      	ldr	r2, [r3, #24]
   845d2:	687b      	ldr	r3, [r7, #4]
   845d4:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   845d6:	683b      	ldr	r3, [r7, #0]
   845d8:	69da      	ldr	r2, [r3, #28]
   845da:	687b      	ldr	r3, [r7, #4]
   845dc:	61da      	str	r2, [r3, #28]
	
	return;
   845de:	bf00      	nop
}
   845e0:	370c      	adds	r7, #12
   845e2:	46bd      	mov	sp, r7
   845e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   845e8:	4770      	bx	lr
   845ea:	bf00      	nop

000845ec <can_initialize>:
/**
 * \brief Initializes and enables CAN0 & CAN1 tranceivers and clocks. 
 * CAN0/CAN1 mailboxes are reset and interrupts disabled.
 */
void can_initialize(void)
{
   845ec:	b580      	push	{r7, lr}
   845ee:	b082      	sub	sp, #8
   845f0:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1;
   845f2:	2301      	movs	r3, #1
   845f4:	607b      	str	r3, [r7, #4]

	/* Initialize CAN0 Transceiver. */
	sn65hvd234_set_rs(&can0_transceiver, PIN_CAN0_TR_RS_IDX);
   845f6:	4829      	ldr	r0, [pc, #164]	; (8469c <can_initialize+0xb0>)
   845f8:	2134      	movs	r1, #52	; 0x34
   845fa:	4b29      	ldr	r3, [pc, #164]	; (846a0 <can_initialize+0xb4>)
   845fc:	4798      	blx	r3
	sn65hvd234_set_en(&can0_transceiver, PIN_CAN0_TR_EN_IDX);
   845fe:	4827      	ldr	r0, [pc, #156]	; (8469c <can_initialize+0xb0>)
   84600:	2135      	movs	r1, #53	; 0x35
   84602:	4b28      	ldr	r3, [pc, #160]	; (846a4 <can_initialize+0xb8>)
   84604:	4798      	blx	r3
	/* Enable CAN0 Transceiver. */
	sn65hvd234_disable_low_power(&can0_transceiver);
   84606:	4825      	ldr	r0, [pc, #148]	; (8469c <can_initialize+0xb0>)
   84608:	4b27      	ldr	r3, [pc, #156]	; (846a8 <can_initialize+0xbc>)
   8460a:	4798      	blx	r3
	sn65hvd234_enable(&can0_transceiver);
   8460c:	4823      	ldr	r0, [pc, #140]	; (8469c <can_initialize+0xb0>)
   8460e:	4b27      	ldr	r3, [pc, #156]	; (846ac <can_initialize+0xc0>)
   84610:	4798      	blx	r3

	/* Initialize CAN1 Transceiver. */
	sn65hvd234_set_rs(&can1_transceiver, PIN_CAN1_TR_RS_IDX);
   84612:	4827      	ldr	r0, [pc, #156]	; (846b0 <can_initialize+0xc4>)
   84614:	218f      	movs	r1, #143	; 0x8f
   84616:	4b22      	ldr	r3, [pc, #136]	; (846a0 <can_initialize+0xb4>)
   84618:	4798      	blx	r3
	sn65hvd234_set_en(&can1_transceiver, PIN_CAN1_TR_EN_IDX);
   8461a:	4825      	ldr	r0, [pc, #148]	; (846b0 <can_initialize+0xc4>)
   8461c:	2190      	movs	r1, #144	; 0x90
   8461e:	4b21      	ldr	r3, [pc, #132]	; (846a4 <can_initialize+0xb8>)
   84620:	4798      	blx	r3
	/* Enable CAN1 Transceiver. */
	sn65hvd234_disable_low_power(&can1_transceiver);
   84622:	4823      	ldr	r0, [pc, #140]	; (846b0 <can_initialize+0xc4>)
   84624:	4b20      	ldr	r3, [pc, #128]	; (846a8 <can_initialize+0xbc>)
   84626:	4798      	blx	r3
	sn65hvd234_enable(&can1_transceiver);
   84628:	4821      	ldr	r0, [pc, #132]	; (846b0 <can_initialize+0xc4>)
   8462a:	4b20      	ldr	r3, [pc, #128]	; (846ac <can_initialize+0xc0>)
   8462c:	4798      	blx	r3

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   8462e:	202b      	movs	r0, #43	; 0x2b
   84630:	4b20      	ldr	r3, [pc, #128]	; (846b4 <can_initialize+0xc8>)
   84632:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   84634:	202c      	movs	r0, #44	; 0x2c
   84636:	4b1f      	ldr	r3, [pc, #124]	; (846b4 <can_initialize+0xc8>)
   84638:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   8463a:	4b1f      	ldr	r3, [pc, #124]	; (846b8 <can_initialize+0xcc>)
   8463c:	4798      	blx	r3
   8463e:	6038      	str	r0, [r7, #0]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   84640:	481e      	ldr	r0, [pc, #120]	; (846bc <can_initialize+0xd0>)
   84642:	6839      	ldr	r1, [r7, #0]
   84644:	22fa      	movs	r2, #250	; 0xfa
   84646:	4b1e      	ldr	r3, [pc, #120]	; (846c0 <can_initialize+0xd4>)
   84648:	4798      	blx	r3
   8464a:	4603      	mov	r3, r0
   8464c:	2b00      	cmp	r3, #0
   8464e:	d021      	beq.n	84694 <can_initialize+0xa8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {
   84650:	481c      	ldr	r0, [pc, #112]	; (846c4 <can_initialize+0xd8>)
   84652:	6839      	ldr	r1, [r7, #0]
   84654:	22fa      	movs	r2, #250	; 0xfa
   84656:	4b1a      	ldr	r3, [pc, #104]	; (846c0 <can_initialize+0xd4>)
   84658:	4798      	blx	r3
   8465a:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   8465c:	2b00      	cmp	r3, #0
   8465e:	d019      	beq.n	84694 <can_initialize+0xa8>
	can_init(CAN1, ul_sysclk, CAN_BPS_250K)) {

	/* Disable all CAN0 & CAN1 interrupts. */
	can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   84660:	4816      	ldr	r0, [pc, #88]	; (846bc <can_initialize+0xd0>)
   84662:	f04f 31ff 	mov.w	r1, #4294967295
   84666:	4b18      	ldr	r3, [pc, #96]	; (846c8 <can_initialize+0xdc>)
   84668:	4798      	blx	r3
	can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   8466a:	4816      	ldr	r0, [pc, #88]	; (846c4 <can_initialize+0xd8>)
   8466c:	f04f 31ff 	mov.w	r1, #4294967295
   84670:	4b15      	ldr	r3, [pc, #84]	; (846c8 <can_initialize+0xdc>)
   84672:	4798      	blx	r3
		
	NVIC_EnableIRQ(CAN0_IRQn);
   84674:	202b      	movs	r0, #43	; 0x2b
   84676:	4b15      	ldr	r3, [pc, #84]	; (846cc <can_initialize+0xe0>)
   84678:	4798      	blx	r3
	NVIC_EnableIRQ(CAN1_IRQn);
   8467a:	202c      	movs	r0, #44	; 0x2c
   8467c:	4b13      	ldr	r3, [pc, #76]	; (846cc <can_initialize+0xe0>)
   8467e:	4798      	blx	r3
	
	can_reset_all_mailbox(CAN0);
   84680:	480e      	ldr	r0, [pc, #56]	; (846bc <can_initialize+0xd0>)
   84682:	4b13      	ldr	r3, [pc, #76]	; (846d0 <can_initialize+0xe4>)
   84684:	4798      	blx	r3
	can_reset_all_mailbox(CAN1);
   84686:	480f      	ldr	r0, [pc, #60]	; (846c4 <can_initialize+0xd8>)
   84688:	4b11      	ldr	r3, [pc, #68]	; (846d0 <can_initialize+0xe4>)
   8468a:	4798      	blx	r3
	
	/* Initialize the CAN0 & CAN1 mailboxes */
	x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   8468c:	6878      	ldr	r0, [r7, #4]
   8468e:	4b11      	ldr	r3, [pc, #68]	; (846d4 <can_initialize+0xe8>)
   84690:	4798      	blx	r3
   84692:	6078      	str	r0, [r7, #4]
	//configASSERT(x);
	
	
	}
	return;
   84694:	bf00      	nop
}
   84696:	3708      	adds	r7, #8
   84698:	46bd      	mov	sp, r7
   8469a:	bd80      	pop	{r7, pc}
   8469c:	2007a6ac 	.word	0x2007a6ac
   846a0:	00080615 	.word	0x00080615
   846a4:	00080631 	.word	0x00080631
   846a8:	00080669 	.word	0x00080669
   846ac:	0008064d 	.word	0x0008064d
   846b0:	2007a644 	.word	0x2007a644
   846b4:	000813a5 	.word	0x000813a5
   846b8:	00084071 	.word	0x00084071
   846bc:	400b4000 	.word	0x400b4000
   846c0:	000807d5 	.word	0x000807d5
   846c4:	400b8000 	.word	0x400b8000
   846c8:	000808b9 	.word	0x000808b9
   846cc:	00083f7d 	.word	0x00083f7d
   846d0:	00080c15 	.word	0x00080c15
   846d4:	000846d9 	.word	0x000846d9

000846d8 <can_init_mailboxes>:

uint32_t can_init_mailboxes(uint32_t x)
{
   846d8:	b580      	push	{r7, lr}
   846da:	b082      	sub	sp, #8
   846dc:	af00      	add	r7, sp, #0
   846de:	6078      	str	r0, [r7, #4]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	//configASSERT(x);	//Check if this function was called naturally.
	
	reset_mailbox_conf(&can0_mailbox);
   846e0:	4819      	ldr	r0, [pc, #100]	; (84748 <can_init_mailboxes+0x70>)
   846e2:	4b1a      	ldr	r3, [pc, #104]	; (8474c <can_init_mailboxes+0x74>)
   846e4:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   846e6:	4b18      	ldr	r3, [pc, #96]	; (84748 <can_init_mailboxes+0x70>)
   846e8:	2207      	movs	r2, #7
   846ea:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   846ec:	4b16      	ldr	r3, [pc, #88]	; (84748 <can_init_mailboxes+0x70>)
   846ee:	2203      	movs	r2, #3
   846f0:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 5;		//Transmission Priority (Can be Changed dynamically)
   846f2:	4b15      	ldr	r3, [pc, #84]	; (84748 <can_init_mailboxes+0x70>)
   846f4:	2205      	movs	r2, #5
   846f6:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   846f8:	4b13      	ldr	r3, [pc, #76]	; (84748 <can_init_mailboxes+0x70>)
   846fa:	2200      	movs	r2, #0
   846fc:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   846fe:	4b12      	ldr	r3, [pc, #72]	; (84748 <can_init_mailboxes+0x70>)
   84700:	2200      	movs	r2, #0
   84702:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   84704:	4812      	ldr	r0, [pc, #72]	; (84750 <can_init_mailboxes+0x78>)
   84706:	4910      	ldr	r1, [pc, #64]	; (84748 <can_init_mailboxes+0x70>)
   84708:	4b12      	ldr	r3, [pc, #72]	; (84754 <can_init_mailboxes+0x7c>)
   8470a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   8470c:	4812      	ldr	r0, [pc, #72]	; (84758 <can_init_mailboxes+0x80>)
   8470e:	4b0f      	ldr	r3, [pc, #60]	; (8474c <can_init_mailboxes+0x74>)
   84710:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;
   84712:	4b11      	ldr	r3, [pc, #68]	; (84758 <can_init_mailboxes+0x80>)
   84714:	2200      	movs	r2, #0
   84716:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   84718:	4b0f      	ldr	r3, [pc, #60]	; (84758 <can_init_mailboxes+0x80>)
   8471a:	2201      	movs	r2, #1
   8471c:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   8471e:	4b0e      	ldr	r3, [pc, #56]	; (84758 <can_init_mailboxes+0x80>)
   84720:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   84724:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(NODE0_ID);					  // The ID of CAN1 MB0 is currently NODE0_ID (standard).
   84726:	4b0c      	ldr	r3, [pc, #48]	; (84758 <can_init_mailboxes+0x80>)
   84728:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8472c:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   8472e:	480b      	ldr	r0, [pc, #44]	; (8475c <can_init_mailboxes+0x84>)
   84730:	4909      	ldr	r1, [pc, #36]	; (84758 <can_init_mailboxes+0x80>)
   84732:	4b08      	ldr	r3, [pc, #32]	; (84754 <can_init_mailboxes+0x7c>)
   84734:	4798      	blx	r3
	
	can_enable_interrupt(CAN1, CAN_IER_MB0);
   84736:	4809      	ldr	r0, [pc, #36]	; (8475c <can_init_mailboxes+0x84>)
   84738:	2101      	movs	r1, #1
   8473a:	4b09      	ldr	r3, [pc, #36]	; (84760 <can_init_mailboxes+0x88>)
   8473c:	4798      	blx	r3
	
	return 1;
   8473e:	2301      	movs	r3, #1
}
   84740:	4618      	mov	r0, r3
   84742:	3708      	adds	r7, #8
   84744:	46bd      	mov	sp, r7
   84746:	bd80      	pop	{r7, pc}
   84748:	2007a66c 	.word	0x2007a66c
   8474c:	00084315 	.word	0x00084315
   84750:	400b4000 	.word	0x400b4000
   84754:	00080979 	.word	0x00080979
   84758:	2007a624 	.word	0x2007a624
   8475c:	400b8000 	.word	0x400b8000
   84760:	0008089d 	.word	0x0008089d

00084764 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   84764:	b480      	push	{r7}
   84766:	b085      	sub	sp, #20
   84768:	af00      	add	r7, sp, #0
   8476a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   8476c:	687b      	ldr	r3, [r7, #4]
   8476e:	f003 0307 	and.w	r3, r3, #7
   84772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   84774:	4b0c      	ldr	r3, [pc, #48]	; (847a8 <NVIC_SetPriorityGrouping+0x44>)
   84776:	68db      	ldr	r3, [r3, #12]
   84778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   8477a:	68ba      	ldr	r2, [r7, #8]
   8477c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   84780:	4013      	ands	r3, r2
   84782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   84784:	68fb      	ldr	r3, [r7, #12]
   84786:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   84788:	68bb      	ldr	r3, [r7, #8]
   8478a:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   8478c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   84790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   84794:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   84796:	4b04      	ldr	r3, [pc, #16]	; (847a8 <NVIC_SetPriorityGrouping+0x44>)
   84798:	68ba      	ldr	r2, [r7, #8]
   8479a:	60da      	str	r2, [r3, #12]
}
   8479c:	3714      	adds	r7, #20
   8479e:	46bd      	mov	sp, r7
   847a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   847a4:	4770      	bx	lr
   847a6:	bf00      	nop
   847a8:	e000ed00 	.word	0xe000ed00

000847ac <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   847ac:	b580      	push	{r7, lr}
   847ae:	af00      	add	r7, sp, #0
	/* Prepare the hardware to run this demo. */
	prvSetupHardware();
   847b0:	4b02      	ldr	r3, [pc, #8]	; (847bc <main+0x10>)
   847b2:	4798      	blx	r3
		stk600_test0();
	}
#endif
#if PROGRAM_CHOICE == 8
{
	command_test();
   847b4:	4b02      	ldr	r3, [pc, #8]	; (847c0 <main+0x14>)
   847b6:	4798      	blx	r3
	{
		main_full();
	}
#endif
	{
		while (1){}
   847b8:	e7fe      	b.n	847b8 <main+0xc>
   847ba:	bf00      	nop
   847bc:	000847c5 	.word	0x000847c5
   847c0:	00080149 	.word	0x00080149

000847c4 <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   847c4:	b580      	push	{r7, lr}
   847c6:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);

	/* ASF function to setup clocking. */
	sysclk_init();
   847c8:	4b05      	ldr	r3, [pc, #20]	; (847e0 <prvSetupHardware+0x1c>)
   847ca:	4798      	blx	r3

	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   847cc:	2000      	movs	r0, #0
   847ce:	4b05      	ldr	r3, [pc, #20]	; (847e4 <prvSetupHardware+0x20>)
   847d0:	4798      	blx	r3

	/* Atmel library function to setup for the evaluation kit being used. */
	board_init();
   847d2:	4b05      	ldr	r3, [pc, #20]	; (847e8 <prvSetupHardware+0x24>)
   847d4:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output
	functions. */
	vParTestInitialise();
   847d6:	4b05      	ldr	r3, [pc, #20]	; (847ec <prvSetupHardware+0x28>)
   847d8:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   847da:	4b05      	ldr	r3, [pc, #20]	; (847f0 <prvSetupHardware+0x2c>)
   847dc:	4798      	blx	r3
	
}
   847de:	bd80      	pop	{r7, pc}
   847e0:	000804d5 	.word	0x000804d5
   847e4:	00084765 	.word	0x00084765
   847e8:	0008053d 	.word	0x0008053d
   847ec:	00084841 	.word	0x00084841
   847f0:	000845ed 	.word	0x000845ed

000847f4 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/


void vApplicationMallocFailedHook(void)
{
   847f4:	b580      	push	{r7, lr}
   847f6:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   847f8:	4b01      	ldr	r3, [pc, #4]	; (84800 <vApplicationMallocFailedHook+0xc>)
   847fa:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   847fc:	e7fe      	b.n	847fc <vApplicationMallocFailedHook+0x8>
   847fe:	bf00      	nop
   84800:	00081c85 	.word	0x00081c85

00084804 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   84804:	b580      	push	{r7, lr}
   84806:	b082      	sub	sp, #8
   84808:	af00      	add	r7, sp, #0
   8480a:	6078      	str	r0, [r7, #4]
   8480c:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   8480e:	4b01      	ldr	r3, [pc, #4]	; (84814 <vApplicationStackOverflowHook+0x10>)
   84810:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   84812:	e7fe      	b.n	84812 <vApplicationStackOverflowHook+0xe>
   84814:	00081c85 	.word	0x00081c85

00084818 <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   84818:	b580      	push	{r7, lr}
   8481a:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   8481c:	4804      	ldr	r0, [pc, #16]	; (84830 <WDT_Handler+0x18>)
   8481e:	4b05      	ldr	r3, [pc, #20]	; (84834 <WDT_Handler+0x1c>)
   84820:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   84822:	2055      	movs	r0, #85	; 0x55
   84824:	4b04      	ldr	r3, [pc, #16]	; (84838 <WDT_Handler+0x20>)
   84826:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   84828:	4801      	ldr	r0, [pc, #4]	; (84830 <WDT_Handler+0x18>)
   8482a:	4b04      	ldr	r3, [pc, #16]	; (8483c <WDT_Handler+0x24>)
   8482c:	4798      	blx	r3
}
   8482e:	bd80      	pop	{r7, pc}
   84830:	400e1a50 	.word	0x400e1a50
   84834:	00081615 	.word	0x00081615
   84838:	00080e99 	.word	0x00080e99
   8483c:	000815ed 	.word	0x000815ed

00084840 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   84840:	b580      	push	{r7, lr}
   84842:	b082      	sub	sp, #8
   84844:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   84846:	2300      	movs	r3, #0
   84848:	607b      	str	r3, [r7, #4]
   8484a:	e00f      	b.n	8486c <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   8484c:	4b0a      	ldr	r3, [pc, #40]	; (84878 <vParTestInitialise+0x38>)
   8484e:	687a      	ldr	r2, [r7, #4]
   84850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84854:	4618      	mov	r0, r3
   84856:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8485a:	4b08      	ldr	r3, [pc, #32]	; (8487c <vParTestInitialise+0x3c>)
   8485c:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   8485e:	6878      	ldr	r0, [r7, #4]
   84860:	2100      	movs	r1, #0
   84862:	4b07      	ldr	r3, [pc, #28]	; (84880 <vParTestInitialise+0x40>)
   84864:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   84866:	687b      	ldr	r3, [r7, #4]
   84868:	3301      	adds	r3, #1
   8486a:	607b      	str	r3, [r7, #4]
   8486c:	687b      	ldr	r3, [r7, #4]
   8486e:	2b02      	cmp	r3, #2
   84870:	d9ec      	bls.n	8484c <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   84872:	3708      	adds	r7, #8
   84874:	46bd      	mov	sp, r7
   84876:	bd80      	pop	{r7, pc}
   84878:	00084dfc 	.word	0x00084dfc
   8487c:	00080ef9 	.word	0x00080ef9
   84880:	00084885 	.word	0x00084885

00084884 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   84884:	b580      	push	{r7, lr}
   84886:	b082      	sub	sp, #8
   84888:	af00      	add	r7, sp, #0
   8488a:	6078      	str	r0, [r7, #4]
   8488c:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   8488e:	687b      	ldr	r3, [r7, #4]
   84890:	2b02      	cmp	r3, #2
   84892:	d823      	bhi.n	848dc <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   84894:	687b      	ldr	r3, [r7, #4]
   84896:	2b00      	cmp	r3, #0
   84898:	d106      	bne.n	848a8 <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   8489a:	683b      	ldr	r3, [r7, #0]
   8489c:	2b00      	cmp	r3, #0
   8489e:	bf14      	ite	ne
   848a0:	2300      	movne	r3, #0
   848a2:	2301      	moveq	r3, #1
   848a4:	b2db      	uxtb	r3, r3
   848a6:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   848a8:	683b      	ldr	r3, [r7, #0]
   848aa:	2b00      	cmp	r3, #0
   848ac:	d00b      	beq.n	848c6 <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   848ae:	4b0d      	ldr	r3, [pc, #52]	; (848e4 <vParTestSetLED+0x60>)
   848b0:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   848b2:	4b0d      	ldr	r3, [pc, #52]	; (848e8 <vParTestSetLED+0x64>)
   848b4:	687a      	ldr	r2, [r7, #4]
   848b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   848ba:	4618      	mov	r0, r3
   848bc:	4b0b      	ldr	r3, [pc, #44]	; (848ec <vParTestSetLED+0x68>)
   848be:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   848c0:	4b0b      	ldr	r3, [pc, #44]	; (848f0 <vParTestSetLED+0x6c>)
   848c2:	4798      	blx	r3
   848c4:	e00a      	b.n	848dc <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   848c6:	4b07      	ldr	r3, [pc, #28]	; (848e4 <vParTestSetLED+0x60>)
   848c8:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   848ca:	4b07      	ldr	r3, [pc, #28]	; (848e8 <vParTestSetLED+0x64>)
   848cc:	687a      	ldr	r2, [r7, #4]
   848ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   848d2:	4618      	mov	r0, r3
   848d4:	4b07      	ldr	r3, [pc, #28]	; (848f4 <vParTestSetLED+0x70>)
   848d6:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   848d8:	4b05      	ldr	r3, [pc, #20]	; (848f0 <vParTestSetLED+0x6c>)
   848da:	4798      	blx	r3
		}
	}
}
   848dc:	3708      	adds	r7, #8
   848de:	46bd      	mov	sp, r7
   848e0:	bd80      	pop	{r7, pc}
   848e2:	bf00      	nop
   848e4:	00081c09 	.word	0x00081c09
   848e8:	00084dfc 	.word	0x00084dfc
   848ec:	00080e65 	.word	0x00080e65
   848f0:	00081c4d 	.word	0x00081c4d
   848f4:	00080e31 	.word	0x00080e31

000848f8 <RTT_Handler>:
/************************************************************************/
/**
 * \brief Real-time timer interrupt handler.
 */
void RTT_Handler(void)
{
   848f8:	b580      	push	{r7, lr}
   848fa:	b082      	sub	sp, #8
   848fc:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	/* Get RTT status */
	ul_status = rtt_get_status(RTT); // Reading the status register clears the interrupt requests.
   848fe:	4812      	ldr	r0, [pc, #72]	; (84948 <RTT_Handler+0x50>)
   84900:	4b12      	ldr	r3, [pc, #72]	; (8494c <RTT_Handler+0x54>)
   84902:	4798      	blx	r3
   84904:	6078      	str	r0, [r7, #4]

	/* Time has changed*/
	pio_toggle_pin(LED0_GPIO);
   84906:	203b      	movs	r0, #59	; 0x3b
   84908:	4b11      	ldr	r3, [pc, #68]	; (84950 <RTT_Handler+0x58>)
   8490a:	4798      	blx	r3
		
	/* Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
   8490c:	687b      	ldr	r3, [r7, #4]
   8490e:	f003 0301 	and.w	r3, r3, #1
   84912:	2b00      	cmp	r3, #0
   84914:	d015      	beq.n	84942 <RTT_Handler+0x4a>
		g_uc_alarmed = 1;
   84916:	4b0f      	ldr	r3, [pc, #60]	; (84954 <RTT_Handler+0x5c>)
   84918:	2201      	movs	r2, #1
   8491a:	701a      	strb	r2, [r3, #0]
		pio_toggle_pin(LED1_GPIO);
   8491c:	2055      	movs	r0, #85	; 0x55
   8491e:	4b0c      	ldr	r3, [pc, #48]	; (84950 <RTT_Handler+0x58>)
   84920:	4798      	blx	r3
		rtt_init(RTT, 32768);
   84922:	4809      	ldr	r0, [pc, #36]	; (84948 <RTT_Handler+0x50>)
   84924:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   84928:	4b0b      	ldr	r3, [pc, #44]	; (84958 <RTT_Handler+0x60>)
   8492a:	4798      	blx	r3
		rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
   8492c:	4806      	ldr	r0, [pc, #24]	; (84948 <RTT_Handler+0x50>)
   8492e:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   84932:	4b0a      	ldr	r3, [pc, #40]	; (8495c <RTT_Handler+0x64>)
   84934:	4798      	blx	r3
		rtt_write_alarm_time(RTT, g_ul_new_alarm);
   84936:	4b0a      	ldr	r3, [pc, #40]	; (84960 <RTT_Handler+0x68>)
   84938:	681b      	ldr	r3, [r3, #0]
   8493a:	4803      	ldr	r0, [pc, #12]	; (84948 <RTT_Handler+0x50>)
   8493c:	4619      	mov	r1, r3
   8493e:	4b09      	ldr	r3, [pc, #36]	; (84964 <RTT_Handler+0x6c>)
   84940:	4798      	blx	r3
	}
}
   84942:	3708      	adds	r7, #8
   84944:	46bd      	mov	sp, r7
   84946:	bd80      	pop	{r7, pc}
   84948:	400e1a30 	.word	0x400e1a30
   8494c:	000814a5 	.word	0x000814a5
   84950:	00080e99 	.word	0x00080e99
   84954:	2007a6b4 	.word	0x2007a6b4
   84958:	00081429 	.word	0x00081429
   8495c:	0008144d 	.word	0x0008144d
   84960:	2007a6b8 	.word	0x2007a6b8
   84964:	000814bd 	.word	0x000814bd

00084968 <USART0_Handler>:
 * inside an interrupt service routine.  The serial driver used here is *not*
 * intended to represent an efficient implementation.  Real applications should
 * make use of the USARTS peripheral DMA channel (PDC).
 */
void USART0_Handler( void )
{
   84968:	b590      	push	{r4, r7, lr}
   8496a:	b087      	sub	sp, #28
   8496c:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
   8496e:	2300      	movs	r3, #0
   84970:	60fb      	str	r3, [r7, #12]
	uint8_t ucChar;
	uint32_t ulChar;
	uint32_t ulUSARTStatus, ulUSARTMask;

	ulUSARTStatus = usart_get_status( serUSART_PORT );
   84972:	4826      	ldr	r0, [pc, #152]	; (84a0c <USART0_Handler+0xa4>)
   84974:	4b26      	ldr	r3, [pc, #152]	; (84a10 <USART0_Handler+0xa8>)
   84976:	4798      	blx	r3
   84978:	6178      	str	r0, [r7, #20]
	ulUSARTMask = usart_get_interrupt_mask( serUSART_PORT );
   8497a:	4824      	ldr	r0, [pc, #144]	; (84a0c <USART0_Handler+0xa4>)
   8497c:	4b25      	ldr	r3, [pc, #148]	; (84a14 <USART0_Handler+0xac>)
   8497e:	4798      	blx	r3
   84980:	6138      	str	r0, [r7, #16]
	ulUSARTStatus &= ulUSARTMask;
   84982:	697a      	ldr	r2, [r7, #20]
   84984:	693b      	ldr	r3, [r7, #16]
   84986:	4013      	ands	r3, r2
   84988:	617b      	str	r3, [r7, #20]

	if( ( ulUSARTStatus & US_CSR_TXRDY ) != 0UL )
   8498a:	697b      	ldr	r3, [r7, #20]
   8498c:	f003 0302 	and.w	r3, r3, #2
   84990:	2b00      	cmp	r3, #0
   84992:	d017      	beq.n	849c4 <USART0_Handler+0x5c>
	{
		/* The interrupt was caused by the TX register becoming empty.  Are
		there any more characters to transmit? */
		if( xQueueReceiveFromISR( xCharsForTx, &ucChar, &xHigherPriorityTaskWoken ) == pdTRUE )
   84994:	4b20      	ldr	r3, [pc, #128]	; (84a18 <USART0_Handler+0xb0>)
   84996:	6819      	ldr	r1, [r3, #0]
   84998:	f107 020b 	add.w	r2, r7, #11
   8499c:	f107 030c 	add.w	r3, r7, #12
   849a0:	4608      	mov	r0, r1
   849a2:	4611      	mov	r1, r2
   849a4:	461a      	mov	r2, r3
   849a6:	4b1d      	ldr	r3, [pc, #116]	; (84a1c <USART0_Handler+0xb4>)
   849a8:	4798      	blx	r3
   849aa:	4603      	mov	r3, r0
   849ac:	2b01      	cmp	r3, #1
   849ae:	d105      	bne.n	849bc <USART0_Handler+0x54>
		{
			/* A character was retrieved from the queue so can be sent to the
			USART now. */
			usart_putchar( serUSART_PORT, ( uint32_t ) ucChar );
   849b0:	7afb      	ldrb	r3, [r7, #11]
   849b2:	4816      	ldr	r0, [pc, #88]	; (84a0c <USART0_Handler+0xa4>)
   849b4:	4619      	mov	r1, r3
   849b6:	4b1a      	ldr	r3, [pc, #104]	; (84a20 <USART0_Handler+0xb8>)
   849b8:	4798      	blx	r3
   849ba:	e003      	b.n	849c4 <USART0_Handler+0x5c>
		}
		else
		{
			usart_disable_interrupt( serUSART_PORT, US_IER_TXRDY );
   849bc:	4813      	ldr	r0, [pc, #76]	; (84a0c <USART0_Handler+0xa4>)
   849be:	2102      	movs	r1, #2
   849c0:	4b18      	ldr	r3, [pc, #96]	; (84a24 <USART0_Handler+0xbc>)
   849c2:	4798      	blx	r3
		}
	}

	if( ( ulUSARTStatus & US_CSR_RXRDY ) != 0UL )
   849c4:	697b      	ldr	r3, [r7, #20]
   849c6:	f003 0301 	and.w	r3, r3, #1
   849ca:	2b00      	cmp	r3, #0
   849cc:	d013      	beq.n	849f6 <USART0_Handler+0x8e>
	{
		/* A character has been received on the USART, send it to the Rx
		handler task. */
		usart_getchar( serUSART_PORT, &ulChar );
   849ce:	1d3b      	adds	r3, r7, #4
   849d0:	480e      	ldr	r0, [pc, #56]	; (84a0c <USART0_Handler+0xa4>)
   849d2:	4619      	mov	r1, r3
   849d4:	4b14      	ldr	r3, [pc, #80]	; (84a28 <USART0_Handler+0xc0>)
   849d6:	4798      	blx	r3
		ucChar = ( uint8_t ) ( ulChar & 0xffUL );
   849d8:	687b      	ldr	r3, [r7, #4]
   849da:	b2db      	uxtb	r3, r3
   849dc:	72fb      	strb	r3, [r7, #11]
		xQueueSendFromISR( xRxedChars, &ucChar, &xHigherPriorityTaskWoken );
   849de:	4b13      	ldr	r3, [pc, #76]	; (84a2c <USART0_Handler+0xc4>)
   849e0:	6819      	ldr	r1, [r3, #0]
   849e2:	f107 020b 	add.w	r2, r7, #11
   849e6:	f107 030c 	add.w	r3, r7, #12
   849ea:	4608      	mov	r0, r1
   849ec:	4611      	mov	r1, r2
   849ee:	461a      	mov	r2, r3
   849f0:	2300      	movs	r3, #0
   849f2:	4c0f      	ldr	r4, [pc, #60]	; (84a30 <USART0_Handler+0xc8>)
   849f4:	47a0      	blx	r4
	the unblocked task has a priority equal to or higher than the currently
	running task (the task this ISR interrupted), then xHigherPriorityTaskWoken
	will have automatically been set to pdTRUE within the queue send or receive
	function.  portEND_SWITCHING_ISR() will then ensure that this ISR returns
	directly to the higher priority unblocked task. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
   849f6:	68fb      	ldr	r3, [r7, #12]
   849f8:	2b00      	cmp	r3, #0
   849fa:	d003      	beq.n	84a04 <USART0_Handler+0x9c>
   849fc:	4b0d      	ldr	r3, [pc, #52]	; (84a34 <USART0_Handler+0xcc>)
   849fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   84a02:	601a      	str	r2, [r3, #0]
}
   84a04:	371c      	adds	r7, #28
   84a06:	46bd      	mov	sp, r7
   84a08:	bd90      	pop	{r4, r7, pc}
   84a0a:	bf00      	nop
   84a0c:	40098000 	.word	0x40098000
   84a10:	00081549 	.word	0x00081549
   84a14:	00081531 	.word	0x00081531
   84a18:	2007a620 	.word	0x2007a620
   84a1c:	00082749 	.word	0x00082749
   84a20:	00081561 	.word	0x00081561
   84a24:	00081515 	.word	0x00081515
   84a28:	000815a5 	.word	0x000815a5
   84a2c:	2007a61c 	.word	0x2007a61c
   84a30:	00082451 	.word	0x00082451
   84a34:	e000ed04 	.word	0xe000ed04

00084a38 <__libc_init_array>:
   84a38:	b570      	push	{r4, r5, r6, lr}
   84a3a:	4e0f      	ldr	r6, [pc, #60]	; (84a78 <__libc_init_array+0x40>)
   84a3c:	4d0f      	ldr	r5, [pc, #60]	; (84a7c <__libc_init_array+0x44>)
   84a3e:	1b76      	subs	r6, r6, r5
   84a40:	10b6      	asrs	r6, r6, #2
   84a42:	d007      	beq.n	84a54 <__libc_init_array+0x1c>
   84a44:	3d04      	subs	r5, #4
   84a46:	2400      	movs	r4, #0
   84a48:	3401      	adds	r4, #1
   84a4a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84a4e:	4798      	blx	r3
   84a50:	42a6      	cmp	r6, r4
   84a52:	d1f9      	bne.n	84a48 <__libc_init_array+0x10>
   84a54:	4e0a      	ldr	r6, [pc, #40]	; (84a80 <__libc_init_array+0x48>)
   84a56:	4d0b      	ldr	r5, [pc, #44]	; (84a84 <__libc_init_array+0x4c>)
   84a58:	f000 f9da 	bl	84e10 <_init>
   84a5c:	1b76      	subs	r6, r6, r5
   84a5e:	10b6      	asrs	r6, r6, #2
   84a60:	d008      	beq.n	84a74 <__libc_init_array+0x3c>
   84a62:	3d04      	subs	r5, #4
   84a64:	2400      	movs	r4, #0
   84a66:	3401      	adds	r4, #1
   84a68:	f855 3f04 	ldr.w	r3, [r5, #4]!
   84a6c:	4798      	blx	r3
   84a6e:	42a6      	cmp	r6, r4
   84a70:	d1f9      	bne.n	84a66 <__libc_init_array+0x2e>
   84a72:	bd70      	pop	{r4, r5, r6, pc}
   84a74:	bd70      	pop	{r4, r5, r6, pc}
   84a76:	bf00      	nop
   84a78:	00084e1c 	.word	0x00084e1c
   84a7c:	00084e1c 	.word	0x00084e1c
   84a80:	00084e24 	.word	0x00084e24
   84a84:	00084e1c 	.word	0x00084e1c

00084a88 <memcmp>:
   84a88:	2a03      	cmp	r2, #3
   84a8a:	b470      	push	{r4, r5, r6}
   84a8c:	d928      	bls.n	84ae0 <memcmp+0x58>
   84a8e:	ea40 0301 	orr.w	r3, r0, r1
   84a92:	079b      	lsls	r3, r3, #30
   84a94:	d013      	beq.n	84abe <memcmp+0x36>
   84a96:	7805      	ldrb	r5, [r0, #0]
   84a98:	780c      	ldrb	r4, [r1, #0]
   84a9a:	42a5      	cmp	r5, r4
   84a9c:	d124      	bne.n	84ae8 <memcmp+0x60>
   84a9e:	3a01      	subs	r2, #1
   84aa0:	2300      	movs	r3, #0
   84aa2:	e005      	b.n	84ab0 <memcmp+0x28>
   84aa4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   84aa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   84aac:	42a5      	cmp	r5, r4
   84aae:	d11b      	bne.n	84ae8 <memcmp+0x60>
   84ab0:	4293      	cmp	r3, r2
   84ab2:	f103 0301 	add.w	r3, r3, #1
   84ab6:	d1f5      	bne.n	84aa4 <memcmp+0x1c>
   84ab8:	2000      	movs	r0, #0
   84aba:	bc70      	pop	{r4, r5, r6}
   84abc:	4770      	bx	lr
   84abe:	460c      	mov	r4, r1
   84ac0:	4603      	mov	r3, r0
   84ac2:	6825      	ldr	r5, [r4, #0]
   84ac4:	681e      	ldr	r6, [r3, #0]
   84ac6:	4621      	mov	r1, r4
   84ac8:	42ae      	cmp	r6, r5
   84aca:	4618      	mov	r0, r3
   84acc:	f104 0404 	add.w	r4, r4, #4
   84ad0:	f103 0304 	add.w	r3, r3, #4
   84ad4:	d104      	bne.n	84ae0 <memcmp+0x58>
   84ad6:	3a04      	subs	r2, #4
   84ad8:	2a03      	cmp	r2, #3
   84ada:	4618      	mov	r0, r3
   84adc:	4621      	mov	r1, r4
   84ade:	d8f0      	bhi.n	84ac2 <memcmp+0x3a>
   84ae0:	2a00      	cmp	r2, #0
   84ae2:	d1d8      	bne.n	84a96 <memcmp+0xe>
   84ae4:	4610      	mov	r0, r2
   84ae6:	e7e8      	b.n	84aba <memcmp+0x32>
   84ae8:	1b28      	subs	r0, r5, r4
   84aea:	bc70      	pop	{r4, r5, r6}
   84aec:	4770      	bx	lr
   84aee:	bf00      	nop

00084af0 <memcpy>:
   84af0:	4684      	mov	ip, r0
   84af2:	ea41 0300 	orr.w	r3, r1, r0
   84af6:	f013 0303 	ands.w	r3, r3, #3
   84afa:	d149      	bne.n	84b90 <memcpy+0xa0>
   84afc:	3a40      	subs	r2, #64	; 0x40
   84afe:	d323      	bcc.n	84b48 <memcpy+0x58>
   84b00:	680b      	ldr	r3, [r1, #0]
   84b02:	6003      	str	r3, [r0, #0]
   84b04:	684b      	ldr	r3, [r1, #4]
   84b06:	6043      	str	r3, [r0, #4]
   84b08:	688b      	ldr	r3, [r1, #8]
   84b0a:	6083      	str	r3, [r0, #8]
   84b0c:	68cb      	ldr	r3, [r1, #12]
   84b0e:	60c3      	str	r3, [r0, #12]
   84b10:	690b      	ldr	r3, [r1, #16]
   84b12:	6103      	str	r3, [r0, #16]
   84b14:	694b      	ldr	r3, [r1, #20]
   84b16:	6143      	str	r3, [r0, #20]
   84b18:	698b      	ldr	r3, [r1, #24]
   84b1a:	6183      	str	r3, [r0, #24]
   84b1c:	69cb      	ldr	r3, [r1, #28]
   84b1e:	61c3      	str	r3, [r0, #28]
   84b20:	6a0b      	ldr	r3, [r1, #32]
   84b22:	6203      	str	r3, [r0, #32]
   84b24:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84b26:	6243      	str	r3, [r0, #36]	; 0x24
   84b28:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   84b2a:	6283      	str	r3, [r0, #40]	; 0x28
   84b2c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   84b2e:	62c3      	str	r3, [r0, #44]	; 0x2c
   84b30:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84b32:	6303      	str	r3, [r0, #48]	; 0x30
   84b34:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84b36:	6343      	str	r3, [r0, #52]	; 0x34
   84b38:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   84b3a:	6383      	str	r3, [r0, #56]	; 0x38
   84b3c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   84b3e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84b40:	3040      	adds	r0, #64	; 0x40
   84b42:	3140      	adds	r1, #64	; 0x40
   84b44:	3a40      	subs	r2, #64	; 0x40
   84b46:	d2db      	bcs.n	84b00 <memcpy+0x10>
   84b48:	3230      	adds	r2, #48	; 0x30
   84b4a:	d30b      	bcc.n	84b64 <memcpy+0x74>
   84b4c:	680b      	ldr	r3, [r1, #0]
   84b4e:	6003      	str	r3, [r0, #0]
   84b50:	684b      	ldr	r3, [r1, #4]
   84b52:	6043      	str	r3, [r0, #4]
   84b54:	688b      	ldr	r3, [r1, #8]
   84b56:	6083      	str	r3, [r0, #8]
   84b58:	68cb      	ldr	r3, [r1, #12]
   84b5a:	60c3      	str	r3, [r0, #12]
   84b5c:	3010      	adds	r0, #16
   84b5e:	3110      	adds	r1, #16
   84b60:	3a10      	subs	r2, #16
   84b62:	d2f3      	bcs.n	84b4c <memcpy+0x5c>
   84b64:	320c      	adds	r2, #12
   84b66:	d305      	bcc.n	84b74 <memcpy+0x84>
   84b68:	f851 3b04 	ldr.w	r3, [r1], #4
   84b6c:	f840 3b04 	str.w	r3, [r0], #4
   84b70:	3a04      	subs	r2, #4
   84b72:	d2f9      	bcs.n	84b68 <memcpy+0x78>
   84b74:	3204      	adds	r2, #4
   84b76:	d008      	beq.n	84b8a <memcpy+0x9a>
   84b78:	07d2      	lsls	r2, r2, #31
   84b7a:	bf1c      	itt	ne
   84b7c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84b80:	f800 3b01 	strbne.w	r3, [r0], #1
   84b84:	d301      	bcc.n	84b8a <memcpy+0x9a>
   84b86:	880b      	ldrh	r3, [r1, #0]
   84b88:	8003      	strh	r3, [r0, #0]
   84b8a:	4660      	mov	r0, ip
   84b8c:	4770      	bx	lr
   84b8e:	bf00      	nop
   84b90:	2a08      	cmp	r2, #8
   84b92:	d313      	bcc.n	84bbc <memcpy+0xcc>
   84b94:	078b      	lsls	r3, r1, #30
   84b96:	d0b1      	beq.n	84afc <memcpy+0xc>
   84b98:	f010 0303 	ands.w	r3, r0, #3
   84b9c:	d0ae      	beq.n	84afc <memcpy+0xc>
   84b9e:	f1c3 0304 	rsb	r3, r3, #4
   84ba2:	1ad2      	subs	r2, r2, r3
   84ba4:	07db      	lsls	r3, r3, #31
   84ba6:	bf1c      	itt	ne
   84ba8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84bac:	f800 3b01 	strbne.w	r3, [r0], #1
   84bb0:	d3a4      	bcc.n	84afc <memcpy+0xc>
   84bb2:	f831 3b02 	ldrh.w	r3, [r1], #2
   84bb6:	f820 3b02 	strh.w	r3, [r0], #2
   84bba:	e79f      	b.n	84afc <memcpy+0xc>
   84bbc:	3a04      	subs	r2, #4
   84bbe:	d3d9      	bcc.n	84b74 <memcpy+0x84>
   84bc0:	3a01      	subs	r2, #1
   84bc2:	f811 3b01 	ldrb.w	r3, [r1], #1
   84bc6:	f800 3b01 	strb.w	r3, [r0], #1
   84bca:	d2f9      	bcs.n	84bc0 <memcpy+0xd0>
   84bcc:	780b      	ldrb	r3, [r1, #0]
   84bce:	7003      	strb	r3, [r0, #0]
   84bd0:	784b      	ldrb	r3, [r1, #1]
   84bd2:	7043      	strb	r3, [r0, #1]
   84bd4:	788b      	ldrb	r3, [r1, #2]
   84bd6:	7083      	strb	r3, [r0, #2]
   84bd8:	4660      	mov	r0, ip
   84bda:	4770      	bx	lr

00084bdc <memset>:
   84bdc:	b4f0      	push	{r4, r5, r6, r7}
   84bde:	0784      	lsls	r4, r0, #30
   84be0:	d043      	beq.n	84c6a <memset+0x8e>
   84be2:	1e54      	subs	r4, r2, #1
   84be4:	2a00      	cmp	r2, #0
   84be6:	d03e      	beq.n	84c66 <memset+0x8a>
   84be8:	b2cd      	uxtb	r5, r1
   84bea:	4603      	mov	r3, r0
   84bec:	e003      	b.n	84bf6 <memset+0x1a>
   84bee:	1e62      	subs	r2, r4, #1
   84bf0:	2c00      	cmp	r4, #0
   84bf2:	d038      	beq.n	84c66 <memset+0x8a>
   84bf4:	4614      	mov	r4, r2
   84bf6:	f803 5b01 	strb.w	r5, [r3], #1
   84bfa:	079a      	lsls	r2, r3, #30
   84bfc:	d1f7      	bne.n	84bee <memset+0x12>
   84bfe:	2c03      	cmp	r4, #3
   84c00:	d92a      	bls.n	84c58 <memset+0x7c>
   84c02:	b2cd      	uxtb	r5, r1
   84c04:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84c08:	2c0f      	cmp	r4, #15
   84c0a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84c0e:	d915      	bls.n	84c3c <memset+0x60>
   84c10:	f1a4 0710 	sub.w	r7, r4, #16
   84c14:	093f      	lsrs	r7, r7, #4
   84c16:	f103 0610 	add.w	r6, r3, #16
   84c1a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   84c1e:	461a      	mov	r2, r3
   84c20:	6015      	str	r5, [r2, #0]
   84c22:	6055      	str	r5, [r2, #4]
   84c24:	6095      	str	r5, [r2, #8]
   84c26:	60d5      	str	r5, [r2, #12]
   84c28:	3210      	adds	r2, #16
   84c2a:	42b2      	cmp	r2, r6
   84c2c:	d1f8      	bne.n	84c20 <memset+0x44>
   84c2e:	f004 040f 	and.w	r4, r4, #15
   84c32:	3701      	adds	r7, #1
   84c34:	2c03      	cmp	r4, #3
   84c36:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   84c3a:	d90d      	bls.n	84c58 <memset+0x7c>
   84c3c:	461e      	mov	r6, r3
   84c3e:	4622      	mov	r2, r4
   84c40:	3a04      	subs	r2, #4
   84c42:	2a03      	cmp	r2, #3
   84c44:	f846 5b04 	str.w	r5, [r6], #4
   84c48:	d8fa      	bhi.n	84c40 <memset+0x64>
   84c4a:	1f22      	subs	r2, r4, #4
   84c4c:	f022 0203 	bic.w	r2, r2, #3
   84c50:	3204      	adds	r2, #4
   84c52:	4413      	add	r3, r2
   84c54:	f004 0403 	and.w	r4, r4, #3
   84c58:	b12c      	cbz	r4, 84c66 <memset+0x8a>
   84c5a:	b2c9      	uxtb	r1, r1
   84c5c:	441c      	add	r4, r3
   84c5e:	f803 1b01 	strb.w	r1, [r3], #1
   84c62:	42a3      	cmp	r3, r4
   84c64:	d1fb      	bne.n	84c5e <memset+0x82>
   84c66:	bcf0      	pop	{r4, r5, r6, r7}
   84c68:	4770      	bx	lr
   84c6a:	4614      	mov	r4, r2
   84c6c:	4603      	mov	r3, r0
   84c6e:	e7c6      	b.n	84bfe <memset+0x22>

00084c70 <register_fini>:
   84c70:	4b02      	ldr	r3, [pc, #8]	; (84c7c <register_fini+0xc>)
   84c72:	b113      	cbz	r3, 84c7a <register_fini+0xa>
   84c74:	4802      	ldr	r0, [pc, #8]	; (84c80 <register_fini+0x10>)
   84c76:	f000 b805 	b.w	84c84 <atexit>
   84c7a:	4770      	bx	lr
   84c7c:	00000000 	.word	0x00000000
   84c80:	00084c91 	.word	0x00084c91

00084c84 <atexit>:
   84c84:	4601      	mov	r1, r0
   84c86:	2000      	movs	r0, #0
   84c88:	4602      	mov	r2, r0
   84c8a:	4603      	mov	r3, r0
   84c8c:	f000 b818 	b.w	84cc0 <__register_exitproc>

00084c90 <__libc_fini_array>:
   84c90:	b538      	push	{r3, r4, r5, lr}
   84c92:	4d09      	ldr	r5, [pc, #36]	; (84cb8 <__libc_fini_array+0x28>)
   84c94:	4c09      	ldr	r4, [pc, #36]	; (84cbc <__libc_fini_array+0x2c>)
   84c96:	1b64      	subs	r4, r4, r5
   84c98:	10a4      	asrs	r4, r4, #2
   84c9a:	bf18      	it	ne
   84c9c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   84ca0:	d005      	beq.n	84cae <__libc_fini_array+0x1e>
   84ca2:	3c01      	subs	r4, #1
   84ca4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84ca8:	4798      	blx	r3
   84caa:	2c00      	cmp	r4, #0
   84cac:	d1f9      	bne.n	84ca2 <__libc_fini_array+0x12>
   84cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84cb2:	f000 b8b7 	b.w	84e24 <_fini>
   84cb6:	bf00      	nop
   84cb8:	00084e30 	.word	0x00084e30
   84cbc:	00084e34 	.word	0x00084e34

00084cc0 <__register_exitproc>:
   84cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84cc2:	4c27      	ldr	r4, [pc, #156]	; (84d60 <__register_exitproc+0xa0>)
   84cc4:	b085      	sub	sp, #20
   84cc6:	6826      	ldr	r6, [r4, #0]
   84cc8:	4607      	mov	r7, r0
   84cca:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84cce:	2c00      	cmp	r4, #0
   84cd0:	d040      	beq.n	84d54 <__register_exitproc+0x94>
   84cd2:	6865      	ldr	r5, [r4, #4]
   84cd4:	2d1f      	cmp	r5, #31
   84cd6:	dd1e      	ble.n	84d16 <__register_exitproc+0x56>
   84cd8:	4822      	ldr	r0, [pc, #136]	; (84d64 <__register_exitproc+0xa4>)
   84cda:	b918      	cbnz	r0, 84ce4 <__register_exitproc+0x24>
   84cdc:	f04f 30ff 	mov.w	r0, #4294967295
   84ce0:	b005      	add	sp, #20
   84ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ce4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84ce8:	9103      	str	r1, [sp, #12]
   84cea:	9202      	str	r2, [sp, #8]
   84cec:	9301      	str	r3, [sp, #4]
   84cee:	f3af 8000 	nop.w
   84cf2:	9903      	ldr	r1, [sp, #12]
   84cf4:	4604      	mov	r4, r0
   84cf6:	9a02      	ldr	r2, [sp, #8]
   84cf8:	9b01      	ldr	r3, [sp, #4]
   84cfa:	2800      	cmp	r0, #0
   84cfc:	d0ee      	beq.n	84cdc <__register_exitproc+0x1c>
   84cfe:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84d02:	2000      	movs	r0, #0
   84d04:	6025      	str	r5, [r4, #0]
   84d06:	6060      	str	r0, [r4, #4]
   84d08:	4605      	mov	r5, r0
   84d0a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84d0e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84d12:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84d16:	b93f      	cbnz	r7, 84d28 <__register_exitproc+0x68>
   84d18:	1c6b      	adds	r3, r5, #1
   84d1a:	2000      	movs	r0, #0
   84d1c:	3502      	adds	r5, #2
   84d1e:	6063      	str	r3, [r4, #4]
   84d20:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84d24:	b005      	add	sp, #20
   84d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d28:	2601      	movs	r6, #1
   84d2a:	40ae      	lsls	r6, r5
   84d2c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84d30:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84d34:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84d38:	2f02      	cmp	r7, #2
   84d3a:	ea42 0206 	orr.w	r2, r2, r6
   84d3e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84d42:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84d46:	d1e7      	bne.n	84d18 <__register_exitproc+0x58>
   84d48:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84d4c:	431e      	orrs	r6, r3
   84d4e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84d52:	e7e1      	b.n	84d18 <__register_exitproc+0x58>
   84d54:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84d58:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84d5c:	e7b9      	b.n	84cd2 <__register_exitproc+0x12>
   84d5e:	bf00      	nop
   84d60:	00084e0c 	.word	0x00084e0c
   84d64:	00000000 	.word	0x00000000
   84d68:	00004e4f 	.word	0x00004e4f

00084d6c <can_bit_time>:
   84d6c:	02020308 02094b03 43020303 0303030a     .....K.....C....
   84d7c:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   84d8c:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   84d9c:	05050510 06114504 47040505 06060512     .....E.....G....
   84dac:	06134304 44040606 06060714 08154604     .C.....D.....F..
   84dbc:	47040606 07070716 08174404 46040708     ...G.....D.....F
   84dcc:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   84ddc:	00000000                                ....

00084de0 <ucExpectedStackBytes.5295>:
   84de0:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   84df0:	a5a5a5a5 20726d54 00637653              ....Tmr Svc.

00084dfc <ulLED>:
   84dfc:	00000056 0000003b 00000055 00000043     V...;...U...C...

00084e0c <_global_impure_ptr>:
   84e0c:	20070010                                ... 

00084e10 <_init>:
   84e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e12:	bf00      	nop
   84e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84e16:	bc08      	pop	{r3}
   84e18:	469e      	mov	lr, r3
   84e1a:	4770      	bx	lr

00084e1c <__init_array_start>:
   84e1c:	00084c71 	.word	0x00084c71

00084e20 <__frame_dummy_init_array_entry>:
   84e20:	00080119                                ....

00084e24 <_fini>:
   84e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e26:	bf00      	nop
   84e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84e2a:	bc08      	pop	{r3}
   84e2c:	469e      	mov	lr, r3
   84e2e:	4770      	bx	lr

00084e30 <__fini_array_start>:
   84e30:	000800f5 	.word	0x000800f5
