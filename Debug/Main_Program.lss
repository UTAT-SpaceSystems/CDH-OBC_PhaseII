
Main_Program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000070c4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  000870c4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000b740  20070438  000874fc  00010438  2**2
                  ALLOC
  3 .stack        00002000  2007bb78  00092c3c  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   000102a1  00000000  00000000  000104bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b18  00000000  00000000  0002075d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000652c  00000000  00000000  00023275  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001178  00000000  00000000  000297a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000fd8  00000000  00000000  0002a919  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019681  00000000  00000000  0002b8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013755  00000000  00000000  00044f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00064ed6  00000000  00000000  000586c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003970  00000000  00000000  000bd5a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007db78 	.word	0x2007db78
   80004:	00082b5d 	.word	0x00082b5d
   80008:	00082b55 	.word	0x00082b55
   8000c:	00082b55 	.word	0x00082b55
   80010:	00082b55 	.word	0x00082b55
   80014:	00082b55 	.word	0x00082b55
   80018:	00082b55 	.word	0x00082b55
	...
   8002c:	00083005 	.word	0x00083005
   80030:	00082b55 	.word	0x00082b55
   80034:	00000000 	.word	0x00000000
   80038:	000831c9 	.word	0x000831c9
   8003c:	0008320d 	.word	0x0008320d
   80040:	00082b55 	.word	0x00082b55
   80044:	00082b55 	.word	0x00082b55
   80048:	00082b55 	.word	0x00082b55
   8004c:	00082b55 	.word	0x00082b55
   80050:	000865dd 	.word	0x000865dd
   80054:	00082b55 	.word	0x00082b55
   80058:	00082b55 	.word	0x00082b55
   8005c:	00082b55 	.word	0x00082b55
   80060:	00082b55 	.word	0x00082b55
   80064:	00082b55 	.word	0x00082b55
   80068:	00000000 	.word	0x00000000
   8006c:	000824a5 	.word	0x000824a5
   80070:	000824bd 	.word	0x000824bd
   80074:	000824d5 	.word	0x000824d5
   80078:	000824ed 	.word	0x000824ed
	...
   80084:	00080dc1 	.word	0x00080dc1
   80088:	00082b55 	.word	0x00082b55
   8008c:	00082b55 	.word	0x00082b55
   80090:	00082b55 	.word	0x00082b55
   80094:	00082b55 	.word	0x00082b55
   80098:	00082b55 	.word	0x00082b55
   8009c:	00082b55 	.word	0x00082b55
   800a0:	00080a89 	.word	0x00080a89
   800a4:	00000000 	.word	0x00000000
   800a8:	00082b55 	.word	0x00082b55
   800ac:	00082b55 	.word	0x00082b55
   800b0:	00082b55 	.word	0x00082b55
   800b4:	00082b55 	.word	0x00082b55
   800b8:	00082b55 	.word	0x00082b55
   800bc:	00082b55 	.word	0x00082b55
   800c0:	00082b55 	.word	0x00082b55
   800c4:	00082b55 	.word	0x00082b55
   800c8:	00082b55 	.word	0x00082b55
   800cc:	00082b55 	.word	0x00082b55
   800d0:	00082b55 	.word	0x00082b55
   800d4:	00082b55 	.word	0x00082b55
   800d8:	00082b55 	.word	0x00082b55
   800dc:	00082b55 	.word	0x00082b55
   800e0:	00082b55 	.word	0x00082b55
   800e4:	00082b55 	.word	0x00082b55
   800e8:	00082b55 	.word	0x00082b55
   800ec:	000855a1 	.word	0x000855a1
   800f0:	000854b1 	.word	0x000854b1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070438 	.word	0x20070438
   80110:	00000000 	.word	0x00000000
   80114:	000870c4 	.word	0x000870c4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000870c4 	.word	0x000870c4
   8013c:	2007043c 	.word	0x2007043c
   80140:	000870c4 	.word	0x000870c4
   80144:	00000000 	.word	0x00000000

00080148 <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
   80148:	b480      	push	{r7}
   8014a:	b083      	sub	sp, #12
   8014c:	af00      	add	r7, sp, #0
   8014e:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   80150:	687b      	ldr	r3, [r7, #4]
   80152:	685b      	ldr	r3, [r3, #4]
   80154:	f003 0302 	and.w	r3, r3, #2
   80158:	2b00      	cmp	r3, #0
   8015a:	d001      	beq.n	80160 <spi_get_peripheral_select_mode+0x18>
		return 1;
   8015c:	2301      	movs	r3, #1
   8015e:	e000      	b.n	80162 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
   80160:	2300      	movs	r3, #0
	}
}
   80162:	4618      	mov	r0, r3
   80164:	370c      	adds	r7, #12
   80166:	46bd      	mov	sp, r7
   80168:	f85d 7b04 	ldr.w	r7, [sp], #4
   8016c:	4770      	bx	lr
   8016e:	bf00      	nop

00080170 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80170:	b580      	push	{r7, lr}
   80172:	b082      	sub	sp, #8
   80174:	af00      	add	r7, sp, #0
   80176:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80178:	6878      	ldr	r0, [r7, #4]
   8017a:	4b02      	ldr	r3, [pc, #8]	; (80184 <sysclk_enable_peripheral_clock+0x14>)
   8017c:	4798      	blx	r3
}
   8017e:	3708      	adds	r7, #8
   80180:	46bd      	mov	sp, r7
   80182:	bd80      	pop	{r7, pc}
   80184:	00082771 	.word	0x00082771

00080188 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   80188:	b580      	push	{r7, lr}
   8018a:	b082      	sub	sp, #8
   8018c:	af00      	add	r7, sp, #0
   8018e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80190:	687a      	ldr	r2, [r7, #4]
   80192:	4b04      	ldr	r3, [pc, #16]	; (801a4 <spi_enable_clock+0x1c>)
   80194:	429a      	cmp	r2, r3
   80196:	d102      	bne.n	8019e <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   80198:	2018      	movs	r0, #24
   8019a:	4b03      	ldr	r3, [pc, #12]	; (801a8 <spi_enable_clock+0x20>)
   8019c:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   8019e:	3708      	adds	r7, #8
   801a0:	46bd      	mov	sp, r7
   801a2:	bd80      	pop	{r7, pc}
   801a4:	40008000 	.word	0x40008000
   801a8:	00080171 	.word	0x00080171

000801ac <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
   801ac:	b480      	push	{r7}
   801ae:	b083      	sub	sp, #12
   801b0:	af00      	add	r7, sp, #0
   801b2:	6078      	str	r0, [r7, #4]
   801b4:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   801b6:	687b      	ldr	r3, [r7, #4]
   801b8:	685b      	ldr	r3, [r3, #4]
   801ba:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
   801be:	687b      	ldr	r3, [r7, #4]
   801c0:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   801c2:	687b      	ldr	r3, [r7, #4]
   801c4:	685a      	ldr	r2, [r3, #4]
   801c6:	683b      	ldr	r3, [r7, #0]
   801c8:	041b      	lsls	r3, r3, #16
   801ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   801ce:	431a      	orrs	r2, r3
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	605a      	str	r2, [r3, #4]
}
   801d4:	370c      	adds	r7, #12
   801d6:	46bd      	mov	sp, r7
   801d8:	f85d 7b04 	ldr.w	r7, [sp], #4
   801dc:	4770      	bx	lr
   801de:	bf00      	nop

000801e0 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
   801e0:	b480      	push	{r7}
   801e2:	b083      	sub	sp, #12
   801e4:	af00      	add	r7, sp, #0
   801e6:	6078      	str	r0, [r7, #4]
   801e8:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   801ea:	687b      	ldr	r3, [r7, #4]
   801ec:	685b      	ldr	r3, [r3, #4]
   801ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   801f2:	687b      	ldr	r3, [r7, #4]
   801f4:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   801f6:	687b      	ldr	r3, [r7, #4]
   801f8:	685a      	ldr	r2, [r3, #4]
   801fa:	683b      	ldr	r3, [r7, #0]
   801fc:	061b      	lsls	r3, r3, #24
   801fe:	431a      	orrs	r2, r3
   80200:	687b      	ldr	r3, [r7, #4]
   80202:	605a      	str	r2, [r3, #4]
}
   80204:	370c      	adds	r7, #12
   80206:	46bd      	mov	sp, r7
   80208:	f85d 7b04 	ldr.w	r7, [sp], #4
   8020c:	4770      	bx	lr
   8020e:	bf00      	nop

00080210 <spi_read>:
 *
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
   80210:	b580      	push	{r7, lr}
   80212:	b086      	sub	sp, #24
   80214:	af00      	add	r7, sp, #0
   80216:	60f8      	str	r0, [r7, #12]
   80218:	60b9      	str	r1, [r7, #8]
   8021a:	607a      	str	r2, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   8021c:	f643 2398 	movw	r3, #15000	; 0x3a98
   80220:	617b      	str	r3, [r7, #20]
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80222:	e006      	b.n	80232 <spi_read+0x22>
		if (!timeout--) {
   80224:	697b      	ldr	r3, [r7, #20]
   80226:	1e5a      	subs	r2, r3, #1
   80228:	617a      	str	r2, [r7, #20]
   8022a:	2b00      	cmp	r3, #0
   8022c:	d101      	bne.n	80232 <spi_read+0x22>
			return SPI_ERROR_TIMEOUT;
   8022e:	2301      	movs	r3, #1
   80230:	e01d      	b.n	8026e <spi_read+0x5e>
spi_status_t spi_read(Spi *p_spi, uint16_t *us_data, uint8_t *p_pcs)
{
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(p_spi->SPI_SR & SPI_SR_RDRF)) {
   80232:	68fb      	ldr	r3, [r7, #12]
   80234:	691b      	ldr	r3, [r3, #16]
   80236:	f003 0301 	and.w	r3, r3, #1
   8023a:	2b00      	cmp	r3, #0
   8023c:	d0f2      	beq.n	80224 <spi_read+0x14>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = p_spi->SPI_RDR;
   8023e:	68fb      	ldr	r3, [r7, #12]
   80240:	689a      	ldr	r2, [r3, #8]
   80242:	4b0d      	ldr	r3, [pc, #52]	; (80278 <spi_read+0x68>)
   80244:	601a      	str	r2, [r3, #0]
	if (spi_get_peripheral_select_mode(p_spi)) {
   80246:	68f8      	ldr	r0, [r7, #12]
   80248:	4b0c      	ldr	r3, [pc, #48]	; (8027c <spi_read+0x6c>)
   8024a:	4798      	blx	r3
   8024c:	4603      	mov	r3, r0
   8024e:	2b00      	cmp	r3, #0
   80250:	d007      	beq.n	80262 <spi_read+0x52>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   80252:	4b09      	ldr	r3, [pc, #36]	; (80278 <spi_read+0x68>)
   80254:	681b      	ldr	r3, [r3, #0]
   80256:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8025a:	0c1b      	lsrs	r3, r3, #16
   8025c:	b2da      	uxtb	r2, r3
   8025e:	687b      	ldr	r3, [r7, #4]
   80260:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   80262:	4b05      	ldr	r3, [pc, #20]	; (80278 <spi_read+0x68>)
   80264:	681b      	ldr	r3, [r3, #0]
   80266:	b29a      	uxth	r2, r3
   80268:	68bb      	ldr	r3, [r7, #8]
   8026a:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   8026c:	2300      	movs	r3, #0
   8026e:	b25b      	sxtb	r3, r3
}
   80270:	4618      	mov	r0, r3
   80272:	3718      	adds	r7, #24
   80274:	46bd      	mov	sp, r7
   80276:	bd80      	pop	{r7, pc}
   80278:	20070454 	.word	0x20070454
   8027c:	00080149 	.word	0x00080149

00080280 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   80280:	b480      	push	{r7}
   80282:	b085      	sub	sp, #20
   80284:	af00      	add	r7, sp, #0
   80286:	60f8      	str	r0, [r7, #12]
   80288:	60b9      	str	r1, [r7, #8]
   8028a:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   8028c:	687b      	ldr	r3, [r7, #4]
   8028e:	2b00      	cmp	r3, #0
   80290:	d00c      	beq.n	802ac <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   80292:	68fb      	ldr	r3, [r7, #12]
   80294:	68ba      	ldr	r2, [r7, #8]
   80296:	320c      	adds	r2, #12
   80298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8029c:	f043 0101 	orr.w	r1, r3, #1
   802a0:	68fb      	ldr	r3, [r7, #12]
   802a2:	68ba      	ldr	r2, [r7, #8]
   802a4:	320c      	adds	r2, #12
   802a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802aa:	e00b      	b.n	802c4 <spi_set_clock_polarity+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   802ac:	68fb      	ldr	r3, [r7, #12]
   802ae:	68ba      	ldr	r2, [r7, #8]
   802b0:	320c      	adds	r2, #12
   802b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802b6:	f023 0101 	bic.w	r1, r3, #1
   802ba:	68fb      	ldr	r3, [r7, #12]
   802bc:	68ba      	ldr	r2, [r7, #8]
   802be:	320c      	adds	r2, #12
   802c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   802c4:	3714      	adds	r7, #20
   802c6:	46bd      	mov	sp, r7
   802c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   802cc:	4770      	bx	lr
   802ce:	bf00      	nop

000802d0 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   802d0:	b480      	push	{r7}
   802d2:	b085      	sub	sp, #20
   802d4:	af00      	add	r7, sp, #0
   802d6:	60f8      	str	r0, [r7, #12]
   802d8:	60b9      	str	r1, [r7, #8]
   802da:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   802dc:	687b      	ldr	r3, [r7, #4]
   802de:	2b00      	cmp	r3, #0
   802e0:	d00c      	beq.n	802fc <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   802e2:	68fb      	ldr	r3, [r7, #12]
   802e4:	68ba      	ldr	r2, [r7, #8]
   802e6:	320c      	adds	r2, #12
   802e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   802ec:	f043 0102 	orr.w	r1, r3, #2
   802f0:	68fb      	ldr	r3, [r7, #12]
   802f2:	68ba      	ldr	r2, [r7, #8]
   802f4:	320c      	adds	r2, #12
   802f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   802fa:	e00b      	b.n	80314 <spi_set_clock_phase+0x44>
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   802fc:	68fb      	ldr	r3, [r7, #12]
   802fe:	68ba      	ldr	r2, [r7, #8]
   80300:	320c      	adds	r2, #12
   80302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80306:	f023 0102 	bic.w	r1, r3, #2
   8030a:	68fb      	ldr	r3, [r7, #12]
   8030c:	68ba      	ldr	r2, [r7, #8]
   8030e:	320c      	adds	r2, #12
   80310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   80314:	3714      	adds	r7, #20
   80316:	46bd      	mov	sp, r7
   80318:	f85d 7b04 	ldr.w	r7, [sp], #4
   8031c:	4770      	bx	lr
   8031e:	bf00      	nop

00080320 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
   80320:	b480      	push	{r7}
   80322:	b085      	sub	sp, #20
   80324:	af00      	add	r7, sp, #0
   80326:	60f8      	str	r0, [r7, #12]
   80328:	60b9      	str	r1, [r7, #8]
   8032a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   8032c:	687b      	ldr	r3, [r7, #4]
   8032e:	2b04      	cmp	r3, #4
   80330:	d118      	bne.n	80364 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   80332:	68fb      	ldr	r3, [r7, #12]
   80334:	68ba      	ldr	r2, [r7, #8]
   80336:	320c      	adds	r2, #12
   80338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8033c:	f023 0108 	bic.w	r1, r3, #8
   80340:	68fb      	ldr	r3, [r7, #12]
   80342:	68ba      	ldr	r2, [r7, #8]
   80344:	320c      	adds	r2, #12
   80346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   8034a:	68fb      	ldr	r3, [r7, #12]
   8034c:	68ba      	ldr	r2, [r7, #8]
   8034e:	320c      	adds	r2, #12
   80350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80354:	f043 0104 	orr.w	r1, r3, #4
   80358:	68fb      	ldr	r3, [r7, #12]
   8035a:	68ba      	ldr	r2, [r7, #8]
   8035c:	320c      	adds	r2, #12
   8035e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   80362:	e02a      	b.n	803ba <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   80364:	687b      	ldr	r3, [r7, #4]
   80366:	2b00      	cmp	r3, #0
   80368:	d118      	bne.n	8039c <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   8036a:	68fb      	ldr	r3, [r7, #12]
   8036c:	68ba      	ldr	r2, [r7, #8]
   8036e:	320c      	adds	r2, #12
   80370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80374:	f023 0108 	bic.w	r1, r3, #8
   80378:	68fb      	ldr	r3, [r7, #12]
   8037a:	68ba      	ldr	r2, [r7, #8]
   8037c:	320c      	adds	r2, #12
   8037e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   80382:	68fb      	ldr	r3, [r7, #12]
   80384:	68ba      	ldr	r2, [r7, #8]
   80386:	320c      	adds	r2, #12
   80388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8038c:	f023 0104 	bic.w	r1, r3, #4
   80390:	68fb      	ldr	r3, [r7, #12]
   80392:	68ba      	ldr	r2, [r7, #8]
   80394:	320c      	adds	r2, #12
   80396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8039a:	e00e      	b.n	803ba <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   8039c:	687b      	ldr	r3, [r7, #4]
   8039e:	2b08      	cmp	r3, #8
   803a0:	d10b      	bne.n	803ba <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   803a2:	68fb      	ldr	r3, [r7, #12]
   803a4:	68ba      	ldr	r2, [r7, #8]
   803a6:	320c      	adds	r2, #12
   803a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803ac:	f043 0108 	orr.w	r1, r3, #8
   803b0:	68fb      	ldr	r3, [r7, #12]
   803b2:	68ba      	ldr	r2, [r7, #8]
   803b4:	320c      	adds	r2, #12
   803b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
   803ba:	3714      	adds	r7, #20
   803bc:	46bd      	mov	sp, r7
   803be:	f85d 7b04 	ldr.w	r7, [sp], #4
   803c2:	4770      	bx	lr

000803c4 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   803c4:	b480      	push	{r7}
   803c6:	b085      	sub	sp, #20
   803c8:	af00      	add	r7, sp, #0
   803ca:	60f8      	str	r0, [r7, #12]
   803cc:	60b9      	str	r1, [r7, #8]
   803ce:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   803d0:	68fb      	ldr	r3, [r7, #12]
   803d2:	68ba      	ldr	r2, [r7, #8]
   803d4:	320c      	adds	r2, #12
   803d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   803da:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
   803de:	68fb      	ldr	r3, [r7, #12]
   803e0:	68ba      	ldr	r2, [r7, #8]
   803e2:	320c      	adds	r2, #12
   803e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   803e8:	68fb      	ldr	r3, [r7, #12]
   803ea:	68ba      	ldr	r2, [r7, #8]
   803ec:	320c      	adds	r2, #12
   803ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   803f2:	687b      	ldr	r3, [r7, #4]
   803f4:	ea42 0103 	orr.w	r1, r2, r3
   803f8:	68fb      	ldr	r3, [r7, #12]
   803fa:	68ba      	ldr	r2, [r7, #8]
   803fc:	320c      	adds	r2, #12
   803fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80402:	3714      	adds	r7, #20
   80404:	46bd      	mov	sp, r7
   80406:	f85d 7b04 	ldr.w	r7, [sp], #4
   8040a:	4770      	bx	lr

0008040c <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   8040c:	b480      	push	{r7}
   8040e:	b085      	sub	sp, #20
   80410:	af00      	add	r7, sp, #0
   80412:	6078      	str	r0, [r7, #4]
   80414:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   80416:	683a      	ldr	r2, [r7, #0]
   80418:	687b      	ldr	r3, [r7, #4]
   8041a:	4413      	add	r3, r2
   8041c:	1e5a      	subs	r2, r3, #1
   8041e:	687b      	ldr	r3, [r7, #4]
   80420:	fbb2 f3f3 	udiv	r3, r2, r3
   80424:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   80426:	68fb      	ldr	r3, [r7, #12]
   80428:	2b00      	cmp	r3, #0
   8042a:	dd02      	ble.n	80432 <spi_calc_baudrate_div+0x26>
   8042c:	68fb      	ldr	r3, [r7, #12]
   8042e:	2bff      	cmp	r3, #255	; 0xff
   80430:	dd02      	ble.n	80438 <spi_calc_baudrate_div+0x2c>
		return -1;
   80432:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80436:	e001      	b.n	8043c <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   80438:	68fb      	ldr	r3, [r7, #12]
   8043a:	b29b      	uxth	r3, r3
   8043c:	b21b      	sxth	r3, r3
}
   8043e:	4618      	mov	r0, r3
   80440:	3714      	adds	r7, #20
   80442:	46bd      	mov	sp, r7
   80444:	f85d 7b04 	ldr.w	r7, [sp], #4
   80448:	4770      	bx	lr
   8044a:	bf00      	nop

0008044c <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   8044c:	b480      	push	{r7}
   8044e:	b085      	sub	sp, #20
   80450:	af00      	add	r7, sp, #0
   80452:	60f8      	str	r0, [r7, #12]
   80454:	60b9      	str	r1, [r7, #8]
   80456:	4613      	mov	r3, r2
   80458:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   8045a:	68fb      	ldr	r3, [r7, #12]
   8045c:	68ba      	ldr	r2, [r7, #8]
   8045e:	320c      	adds	r2, #12
   80460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80464:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   80468:	68fb      	ldr	r3, [r7, #12]
   8046a:	68ba      	ldr	r2, [r7, #8]
   8046c:	320c      	adds	r2, #12
   8046e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80472:	68fb      	ldr	r3, [r7, #12]
   80474:	68ba      	ldr	r2, [r7, #8]
   80476:	320c      	adds	r2, #12
   80478:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   8047c:	79fb      	ldrb	r3, [r7, #7]
   8047e:	021b      	lsls	r3, r3, #8
   80480:	b29b      	uxth	r3, r3
   80482:	ea42 0103 	orr.w	r1, r2, r3
   80486:	68fb      	ldr	r3, [r7, #12]
   80488:	68ba      	ldr	r2, [r7, #8]
   8048a:	320c      	adds	r2, #12
   8048c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80490:	3714      	adds	r7, #20
   80492:	46bd      	mov	sp, r7
   80494:	f85d 7b04 	ldr.w	r7, [sp], #4
   80498:	4770      	bx	lr
   8049a:	bf00      	nop

0008049c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8049c:	b480      	push	{r7}
   8049e:	b085      	sub	sp, #20
   804a0:	af00      	add	r7, sp, #0
   804a2:	60f8      	str	r0, [r7, #12]
   804a4:	60b9      	str	r1, [r7, #8]
   804a6:	71fa      	strb	r2, [r7, #7]
   804a8:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   804aa:	68fb      	ldr	r3, [r7, #12]
   804ac:	68ba      	ldr	r2, [r7, #8]
   804ae:	320c      	adds	r2, #12
   804b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   804b4:	b299      	uxth	r1, r3
   804b6:	68fb      	ldr	r3, [r7, #12]
   804b8:	68ba      	ldr	r2, [r7, #8]
   804ba:	320c      	adds	r2, #12
   804bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   804c0:	68fb      	ldr	r3, [r7, #12]
   804c2:	68ba      	ldr	r2, [r7, #8]
   804c4:	320c      	adds	r2, #12
   804c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   804ca:	79fb      	ldrb	r3, [r7, #7]
   804cc:	041b      	lsls	r3, r3, #16
   804ce:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
   804d2:	79bb      	ldrb	r3, [r7, #6]
   804d4:	061b      	lsls	r3, r3, #24
   804d6:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   804d8:	ea42 0103 	orr.w	r1, r2, r3
   804dc:	68fb      	ldr	r3, [r7, #12]
   804de:	68ba      	ldr	r2, [r7, #8]
   804e0:	320c      	adds	r2, #12
   804e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   804e6:	3714      	adds	r7, #20
   804e8:	46bd      	mov	sp, r7
   804ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   804ee:	4770      	bx	lr

000804f0 <eps>:
/* EPS (Function) 														*/
/* @Purpose: This function is simply used to create the EPS task below	*/
/* in main.c															*/
/************************************************************************/
void eps( void )
{
   804f0:	b590      	push	{r4, r7, lr}
   804f2:	b085      	sub	sp, #20
   804f4:	af04      	add	r7, sp, #16
	/* Start the two tasks as described in the comments at the top of this
	file. */
	xTaskCreate( prvEpsTask, /* The function that implements the task. */
   804f6:	2301      	movs	r3, #1
   804f8:	9300      	str	r3, [sp, #0]
   804fa:	2300      	movs	r3, #0
   804fc:	9301      	str	r3, [sp, #4]
   804fe:	2300      	movs	r3, #0
   80500:	9302      	str	r3, [sp, #8]
   80502:	2300      	movs	r3, #0
   80504:	9303      	str	r3, [sp, #12]
   80506:	4805      	ldr	r0, [pc, #20]	; (8051c <eps+0x2c>)
   80508:	4905      	ldr	r1, [pc, #20]	; (80520 <eps+0x30>)
   8050a:	2282      	movs	r2, #130	; 0x82
   8050c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80510:	4c04      	ldr	r4, [pc, #16]	; (80524 <eps+0x34>)
   80512:	47a0      	blx	r4
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached. If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for the idle and/or
	timer tasks to be created. See the memory management section on the
	FreeRTOS web site for more details. */
	return;
   80514:	bf00      	nop
}
   80516:	3704      	adds	r7, #4
   80518:	46bd      	mov	sp, r7
   8051a:	bd90      	pop	{r4, r7, pc}
   8051c:	00080529 	.word	0x00080529
   80520:	00086f1c 	.word	0x00086f1c
   80524:	00083f21 	.word	0x00083f21

00080528 <prvEpsTask>:
/* PRVEPSTask															*/
/* @Purpose: This task contains all the high level software required to */
/* run the EPS Subsystem.												*/
/************************************************************************/
static void prvEpsTask(void *pvParameters )
{
   80528:	b580      	push	{r7, lr}
   8052a:	b084      	sub	sp, #16
   8052c:	af00      	add	r7, sp, #0
   8052e:	6078      	str	r0, [r7, #4]
	configASSERT( ( ( unsigned long ) pvParameters ) == EPS_PARAMETER );
   80530:	687a      	ldr	r2, [r7, #4]
   80532:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   80536:	429a      	cmp	r2, r3
   80538:	d002      	beq.n	80540 <prvEpsTask+0x18>
   8053a:	4b0d      	ldr	r3, [pc, #52]	; (80570 <prvEpsTask+0x48>)
   8053c:	4798      	blx	r3
   8053e:	e7fe      	b.n	8053e <prvEpsTask+0x16>
	TickType_t xLastWakeTime;
	const TickType_t xTimeToWait = 15; // Number entered here corresponds to the number of ticks we should wait.
   80540:	230f      	movs	r3, #15
   80542:	60fb      	str	r3, [r7, #12]
	/* As SysTick will be approx. 1kHz, Num = 1000 * 60 * 60 = 1 hour.*/

	/* Declare Variables Here */

	setUpMPPT();
   80544:	4b0b      	ldr	r3, [pc, #44]	; (80574 <prvEpsTask+0x4c>)
   80546:	4798      	blx	r3
	/* @non-terminating@ */	
	for( ;; )
	{
		// Write your application here.
		xLastWakeTime = xTaskGetTickCount();
   80548:	4b0b      	ldr	r3, [pc, #44]	; (80578 <prvEpsTask+0x50>)
   8054a:	4798      	blx	r3
   8054c:	4603      	mov	r3, r0
   8054e:	60bb      	str	r3, [r7, #8]
		vTaskDelayUntil(&xLastWakeTime, xTimeToWait);		// This is what delays your task if you need to yield. Consult CDH before editing.	
   80550:	f107 0308 	add.w	r3, r7, #8
   80554:	4618      	mov	r0, r3
   80556:	68f9      	ldr	r1, [r7, #12]
   80558:	4b08      	ldr	r3, [pc, #32]	; (8057c <prvEpsTask+0x54>)
   8055a:	4798      	blx	r3
		
		getxDirection();
   8055c:	4b08      	ldr	r3, [pc, #32]	; (80580 <prvEpsTask+0x58>)
   8055e:	4798      	blx	r3
		getyDirection();
   80560:	4b08      	ldr	r3, [pc, #32]	; (80584 <prvEpsTask+0x5c>)
   80562:	4798      	blx	r3
		setxDuty();
   80564:	4b08      	ldr	r3, [pc, #32]	; (80588 <prvEpsTask+0x60>)
   80566:	4798      	blx	r3
		setyDuty();	
   80568:	4b08      	ldr	r3, [pc, #32]	; (8058c <prvEpsTask+0x64>)
   8056a:	4798      	blx	r3
	}
   8056c:	e7ec      	b.n	80548 <prvEpsTask+0x20>
   8056e:	bf00      	nop
   80570:	000831ad 	.word	0x000831ad
   80574:	00080749 	.word	0x00080749
   80578:	0008435d 	.word	0x0008435d
   8057c:	000840a1 	.word	0x000840a1
   80580:	00080591 	.word	0x00080591
   80584:	00080625 	.word	0x00080625
   80588:	000806b9 	.word	0x000806b9
   8058c:	00080701 	.word	0x00080701

00080590 <getxDirection>:
			The new power is compared to the last power measurement to determine if the 
			MPPT duty cycle should be adjusted in the same direction or if it should 
			switch directions															*/
/****************************************************************************************/
static void getxDirection(void)
{
   80590:	b580      	push	{r7, lr}
   80592:	b084      	sub	sp, #16
   80594:	af00      	add	r7, sp, #0
	uint32_t pxv, pxi, pxp_new;

	pxv = get_sensor_data(PANELX_V);
   80596:	2001      	movs	r0, #1
   80598:	4b1f      	ldr	r3, [pc, #124]	; (80618 <getxDirection+0x88>)
   8059a:	4798      	blx	r3
   8059c:	60f8      	str	r0, [r7, #12]
	pxi = get_sensor_data(PANELX_I);
   8059e:	2002      	movs	r0, #2
   805a0:	4b1d      	ldr	r3, [pc, #116]	; (80618 <getxDirection+0x88>)
   805a2:	4798      	blx	r3
   805a4:	60b8      	str	r0, [r7, #8]
	pxp_new = pxi * pxv;
   805a6:	68bb      	ldr	r3, [r7, #8]
   805a8:	68fa      	ldr	r2, [r7, #12]
   805aa:	fb02 f303 	mul.w	r3, r2, r3
   805ae:	607b      	str	r3, [r7, #4]

	if ((pxp_new < pxp_last) & (xDirection == 1))
   805b0:	4b1a      	ldr	r3, [pc, #104]	; (8061c <getxDirection+0x8c>)
   805b2:	681b      	ldr	r3, [r3, #0]
   805b4:	687a      	ldr	r2, [r7, #4]
   805b6:	429a      	cmp	r2, r3
   805b8:	bf2c      	ite	cs
   805ba:	2300      	movcs	r3, #0
   805bc:	2301      	movcc	r3, #1
   805be:	b2da      	uxtb	r2, r3
   805c0:	4b17      	ldr	r3, [pc, #92]	; (80620 <getxDirection+0x90>)
   805c2:	781b      	ldrb	r3, [r3, #0]
   805c4:	2b01      	cmp	r3, #1
   805c6:	bf14      	ite	ne
   805c8:	2300      	movne	r3, #0
   805ca:	2301      	moveq	r3, #1
   805cc:	b2db      	uxtb	r3, r3
   805ce:	4013      	ands	r3, r2
   805d0:	b2db      	uxtb	r3, r3
   805d2:	2b00      	cmp	r3, #0
   805d4:	d003      	beq.n	805de <getxDirection+0x4e>
	{
		xDirection = 0;
   805d6:	4b12      	ldr	r3, [pc, #72]	; (80620 <getxDirection+0x90>)
   805d8:	2200      	movs	r2, #0
   805da:	701a      	strb	r2, [r3, #0]
   805dc:	e015      	b.n	8060a <getxDirection+0x7a>
	}
	else if ((pxp_new < pxp_last) & (xDirection == 0))
   805de:	4b0f      	ldr	r3, [pc, #60]	; (8061c <getxDirection+0x8c>)
   805e0:	681b      	ldr	r3, [r3, #0]
   805e2:	687a      	ldr	r2, [r7, #4]
   805e4:	429a      	cmp	r2, r3
   805e6:	bf2c      	ite	cs
   805e8:	2300      	movcs	r3, #0
   805ea:	2301      	movcc	r3, #1
   805ec:	b2da      	uxtb	r2, r3
   805ee:	4b0c      	ldr	r3, [pc, #48]	; (80620 <getxDirection+0x90>)
   805f0:	781b      	ldrb	r3, [r3, #0]
   805f2:	2b00      	cmp	r3, #0
   805f4:	bf14      	ite	ne
   805f6:	2300      	movne	r3, #0
   805f8:	2301      	moveq	r3, #1
   805fa:	b2db      	uxtb	r3, r3
   805fc:	4013      	ands	r3, r2
   805fe:	b2db      	uxtb	r3, r3
   80600:	2b00      	cmp	r3, #0
   80602:	d002      	beq.n	8060a <getxDirection+0x7a>
	{
		xDirection = 1;
   80604:	4b06      	ldr	r3, [pc, #24]	; (80620 <getxDirection+0x90>)
   80606:	2201      	movs	r2, #1
   80608:	701a      	strb	r2, [r3, #0]
	}
	
	pxp_last = pxp_new;
   8060a:	4b04      	ldr	r3, [pc, #16]	; (8061c <getxDirection+0x8c>)
   8060c:	687a      	ldr	r2, [r7, #4]
   8060e:	601a      	str	r2, [r3, #0]
}
   80610:	3710      	adds	r7, #16
   80612:	46bd      	mov	sp, r7
   80614:	bd80      	pop	{r7, pc}
   80616:	bf00      	nop
   80618:	00080795 	.word	0x00080795
   8061c:	2007045c 	.word	0x2007045c
   80620:	20070458 	.word	0x20070458

00080624 <getyDirection>:
			The new power is compared to the last power measurement to determine if the 
			MPPT duty cycle should be adjusted in the same direction or if it should 
			switch directions															*/
/****************************************************************************************/
static void getyDirection(void)
{
   80624:	b580      	push	{r7, lr}
   80626:	b084      	sub	sp, #16
   80628:	af00      	add	r7, sp, #0
	uint32_t pyv, pyi, pyp_new;
	pyv = get_sensor_data(PANELY_V);
   8062a:	2003      	movs	r0, #3
   8062c:	4b1f      	ldr	r3, [pc, #124]	; (806ac <getyDirection+0x88>)
   8062e:	4798      	blx	r3
   80630:	60f8      	str	r0, [r7, #12]
	pyi = get_sensor_data(PANELY_I);
   80632:	2004      	movs	r0, #4
   80634:	4b1d      	ldr	r3, [pc, #116]	; (806ac <getyDirection+0x88>)
   80636:	4798      	blx	r3
   80638:	60b8      	str	r0, [r7, #8]
	pyp_new = pyi * pyv;
   8063a:	68bb      	ldr	r3, [r7, #8]
   8063c:	68fa      	ldr	r2, [r7, #12]
   8063e:	fb02 f303 	mul.w	r3, r2, r3
   80642:	607b      	str	r3, [r7, #4]

	if ((pyp_new < pyp_last) & (yDirection == 1))
   80644:	4b1a      	ldr	r3, [pc, #104]	; (806b0 <getyDirection+0x8c>)
   80646:	681b      	ldr	r3, [r3, #0]
   80648:	687a      	ldr	r2, [r7, #4]
   8064a:	429a      	cmp	r2, r3
   8064c:	bf2c      	ite	cs
   8064e:	2300      	movcs	r3, #0
   80650:	2301      	movcc	r3, #1
   80652:	b2da      	uxtb	r2, r3
   80654:	4b17      	ldr	r3, [pc, #92]	; (806b4 <getyDirection+0x90>)
   80656:	781b      	ldrb	r3, [r3, #0]
   80658:	2b01      	cmp	r3, #1
   8065a:	bf14      	ite	ne
   8065c:	2300      	movne	r3, #0
   8065e:	2301      	moveq	r3, #1
   80660:	b2db      	uxtb	r3, r3
   80662:	4013      	ands	r3, r2
   80664:	b2db      	uxtb	r3, r3
   80666:	2b00      	cmp	r3, #0
   80668:	d003      	beq.n	80672 <getyDirection+0x4e>
	{
		yDirection = 0;
   8066a:	4b12      	ldr	r3, [pc, #72]	; (806b4 <getyDirection+0x90>)
   8066c:	2200      	movs	r2, #0
   8066e:	701a      	strb	r2, [r3, #0]
   80670:	e015      	b.n	8069e <getyDirection+0x7a>
	}
	
	else if ((pyp_new < pyp_last) & (yDirection == 0))
   80672:	4b0f      	ldr	r3, [pc, #60]	; (806b0 <getyDirection+0x8c>)
   80674:	681b      	ldr	r3, [r3, #0]
   80676:	687a      	ldr	r2, [r7, #4]
   80678:	429a      	cmp	r2, r3
   8067a:	bf2c      	ite	cs
   8067c:	2300      	movcs	r3, #0
   8067e:	2301      	movcc	r3, #1
   80680:	b2da      	uxtb	r2, r3
   80682:	4b0c      	ldr	r3, [pc, #48]	; (806b4 <getyDirection+0x90>)
   80684:	781b      	ldrb	r3, [r3, #0]
   80686:	2b00      	cmp	r3, #0
   80688:	bf14      	ite	ne
   8068a:	2300      	movne	r3, #0
   8068c:	2301      	moveq	r3, #1
   8068e:	b2db      	uxtb	r3, r3
   80690:	4013      	ands	r3, r2
   80692:	b2db      	uxtb	r3, r3
   80694:	2b00      	cmp	r3, #0
   80696:	d002      	beq.n	8069e <getyDirection+0x7a>
	{
		yDirection = 1;
   80698:	4b06      	ldr	r3, [pc, #24]	; (806b4 <getyDirection+0x90>)
   8069a:	2201      	movs	r2, #1
   8069c:	701a      	strb	r2, [r3, #0]
	}
	
	pyp_last = pyp_new;
   8069e:	4b04      	ldr	r3, [pc, #16]	; (806b0 <getyDirection+0x8c>)
   806a0:	687a      	ldr	r2, [r7, #4]
   806a2:	601a      	str	r2, [r3, #0]
}
   806a4:	3710      	adds	r7, #16
   806a6:	46bd      	mov	sp, r7
   806a8:	bd80      	pop	{r7, pc}
   806aa:	bf00      	nop
   806ac:	00080795 	.word	0x00080795
   806b0:	20070460 	.word	0x20070460
   806b4:	20070459 	.word	0x20070459

000806b8 <setxDuty>:
 @Purpose: This function updates and sets the duty cycle that the MPPT is being run at
			This particular function sets for the X-axis MPPT and sends a CAN message  
			with the update to the EPS SSM												*/
/****************************************************************************************/
static void setxDuty(void)
{
   806b8:	b580      	push	{r7, lr}
   806ba:	af00      	add	r7, sp, #0
	if (xDirection == 1)
   806bc:	4b0d      	ldr	r3, [pc, #52]	; (806f4 <setxDuty+0x3c>)
   806be:	781b      	ldrb	r3, [r3, #0]
   806c0:	2b01      	cmp	r3, #1
   806c2:	d106      	bne.n	806d2 <setxDuty+0x1a>
	{
		xDuty = xDuty + DUTY_INCREMENT;
   806c4:	4b0c      	ldr	r3, [pc, #48]	; (806f8 <setxDuty+0x40>)
   806c6:	781b      	ldrb	r3, [r3, #0]
   806c8:	3306      	adds	r3, #6
   806ca:	b2da      	uxtb	r2, r3
   806cc:	4b0a      	ldr	r3, [pc, #40]	; (806f8 <setxDuty+0x40>)
   806ce:	701a      	strb	r2, [r3, #0]
   806d0:	e009      	b.n	806e6 <setxDuty+0x2e>
	}
	
	else if (xDirection == 0)
   806d2:	4b08      	ldr	r3, [pc, #32]	; (806f4 <setxDuty+0x3c>)
   806d4:	781b      	ldrb	r3, [r3, #0]
   806d6:	2b00      	cmp	r3, #0
   806d8:	d105      	bne.n	806e6 <setxDuty+0x2e>
	{
		xDuty = xDuty - DUTY_INCREMENT;
   806da:	4b07      	ldr	r3, [pc, #28]	; (806f8 <setxDuty+0x40>)
   806dc:	781b      	ldrb	r3, [r3, #0]
   806de:	3b06      	subs	r3, #6
   806e0:	b2da      	uxtb	r2, r3
   806e2:	4b05      	ldr	r3, [pc, #20]	; (806f8 <setxDuty+0x40>)
   806e4:	701a      	strb	r2, [r3, #0]
	}
	set_variable_value(MPPTA, xDuty);	
   806e6:	4b04      	ldr	r3, [pc, #16]	; (806f8 <setxDuty+0x40>)
   806e8:	781b      	ldrb	r3, [r3, #0]
   806ea:	20ff      	movs	r0, #255	; 0xff
   806ec:	4619      	mov	r1, r3
   806ee:	4b03      	ldr	r3, [pc, #12]	; (806fc <setxDuty+0x44>)
   806f0:	4798      	blx	r3
}
   806f2:	bd80      	pop	{r7, pc}
   806f4:	20070458 	.word	0x20070458
   806f8:	2007045a 	.word	0x2007045a
   806fc:	000807f1 	.word	0x000807f1

00080700 <setyDuty>:
 @Purpose: This function updates and sets the duty cycle that the MPPT is being run at
			This particular function sets for the Y-axis MPPT and sends a CAN message  
			with the update to the EPS SSM												*/
/****************************************************************************************/
static void setyDuty(void)
{
   80700:	b580      	push	{r7, lr}
   80702:	af00      	add	r7, sp, #0
	if (yDirection == 1)
   80704:	4b0d      	ldr	r3, [pc, #52]	; (8073c <setyDuty+0x3c>)
   80706:	781b      	ldrb	r3, [r3, #0]
   80708:	2b01      	cmp	r3, #1
   8070a:	d106      	bne.n	8071a <setyDuty+0x1a>
	{
		yDuty = yDuty + DUTY_INCREMENT;
   8070c:	4b0c      	ldr	r3, [pc, #48]	; (80740 <setyDuty+0x40>)
   8070e:	781b      	ldrb	r3, [r3, #0]
   80710:	3306      	adds	r3, #6
   80712:	b2da      	uxtb	r2, r3
   80714:	4b0a      	ldr	r3, [pc, #40]	; (80740 <setyDuty+0x40>)
   80716:	701a      	strb	r2, [r3, #0]
   80718:	e009      	b.n	8072e <setyDuty+0x2e>
	}
	
	else if (yDirection == 0)
   8071a:	4b08      	ldr	r3, [pc, #32]	; (8073c <setyDuty+0x3c>)
   8071c:	781b      	ldrb	r3, [r3, #0]
   8071e:	2b00      	cmp	r3, #0
   80720:	d105      	bne.n	8072e <setyDuty+0x2e>
	{
		yDuty = yDuty - DUTY_INCREMENT;
   80722:	4b07      	ldr	r3, [pc, #28]	; (80740 <setyDuty+0x40>)
   80724:	781b      	ldrb	r3, [r3, #0]
   80726:	3b06      	subs	r3, #6
   80728:	b2da      	uxtb	r2, r3
   8072a:	4b05      	ldr	r3, [pc, #20]	; (80740 <setyDuty+0x40>)
   8072c:	701a      	strb	r2, [r3, #0]
	}
	set_variable_value(MPPTB, yDuty);
   8072e:	4b04      	ldr	r3, [pc, #16]	; (80740 <setyDuty+0x40>)
   80730:	781b      	ldrb	r3, [r3, #0]
   80732:	20fe      	movs	r0, #254	; 0xfe
   80734:	4619      	mov	r1, r3
   80736:	4b03      	ldr	r3, [pc, #12]	; (80744 <setyDuty+0x44>)
   80738:	4798      	blx	r3
}
   8073a:	bd80      	pop	{r7, pc}
   8073c:	20070459 	.word	0x20070459
   80740:	2007045b 	.word	0x2007045b
   80744:	000807f1 	.word	0x000807f1

00080748 <setUpMPPT>:
 @Purpose: This function initializes all of the global variables used in running
			the MPPT algorithms									
																						*/
/****************************************************************************************/
static void setUpMPPT(void)
{
   80748:	b480      	push	{r7}
   8074a:	af00      	add	r7, sp, #0
	pxp_last = 0xFFFFFFFF;
   8074c:	4b0b      	ldr	r3, [pc, #44]	; (8077c <setUpMPPT+0x34>)
   8074e:	f04f 32ff 	mov.w	r2, #4294967295
   80752:	601a      	str	r2, [r3, #0]
	pyp_last = 0xFFFFFFFF;
   80754:	4b0a      	ldr	r3, [pc, #40]	; (80780 <setUpMPPT+0x38>)
   80756:	f04f 32ff 	mov.w	r2, #4294967295
   8075a:	601a      	str	r2, [r3, #0]
	xDirection = 0;
   8075c:	4b09      	ldr	r3, [pc, #36]	; (80784 <setUpMPPT+0x3c>)
   8075e:	2200      	movs	r2, #0
   80760:	701a      	strb	r2, [r3, #0]
	yDirection = 0;
   80762:	4b09      	ldr	r3, [pc, #36]	; (80788 <setUpMPPT+0x40>)
   80764:	2200      	movs	r2, #0
   80766:	701a      	strb	r2, [r3, #0]
	xDuty = 0x3F;
   80768:	4b08      	ldr	r3, [pc, #32]	; (8078c <setUpMPPT+0x44>)
   8076a:	223f      	movs	r2, #63	; 0x3f
   8076c:	701a      	strb	r2, [r3, #0]
	yDuty = 0x3F;
   8076e:	4b08      	ldr	r3, [pc, #32]	; (80790 <setUpMPPT+0x48>)
   80770:	223f      	movs	r2, #63	; 0x3f
   80772:	701a      	strb	r2, [r3, #0]
}
   80774:	46bd      	mov	sp, r7
   80776:	f85d 7b04 	ldr.w	r7, [sp], #4
   8077a:	4770      	bx	lr
   8077c:	2007045c 	.word	0x2007045c
   80780:	20070460 	.word	0x20070460
   80784:	20070458 	.word	0x20070458
   80788:	20070459 	.word	0x20070459
   8078c:	2007045a 	.word	0x2007045a
   80790:	2007045b 	.word	0x2007045b

00080794 <get_sensor_data>:
/* @return:								returns sensor value requested	*/
/* NOTE: This function will wait for a maximum of X * 25ms. for the		*/
/* operation to complete.												*/
/************************************************************************/
static uint32_t get_sensor_data(uint8_t sensor_id)
{
   80794:	b590      	push	{r4, r7, lr}
   80796:	b087      	sub	sp, #28
   80798:	af00      	add	r7, sp, #0
   8079a:	4603      	mov	r3, r0
   8079c:	71fb      	strb	r3, [r7, #7]
	//Declare testing variables
	int* status = 0;
   8079e:	2300      	movs	r3, #0
   807a0:	613b      	str	r3, [r7, #16]
	uint8_t tries;
	uint32_t sensor_value;
	tries = 0;
   807a2:	2300      	movs	r3, #0
   807a4:	75fb      	strb	r3, [r7, #23]
	
	sensor_value = request_sensor_data(EPS_TASK_ID, EPS_ID, sensor_id, status);		//request a value
   807a6:	79fb      	ldrb	r3, [r7, #7]
   807a8:	2008      	movs	r0, #8
   807aa:	2101      	movs	r1, #1
   807ac:	461a      	mov	r2, r3
   807ae:	693b      	ldr	r3, [r7, #16]
   807b0:	4c0e      	ldr	r4, [pc, #56]	; (807ec <get_sensor_data+0x58>)
   807b2:	47a0      	blx	r4
   807b4:	60f8      	str	r0, [r7, #12]
	while (*status == -1)								//If there is an error, check the status
   807b6:	e00e      	b.n	807d6 <get_sensor_data+0x42>
	{
		if (tries++ > MAX_NUM_TRIES)
   807b8:	7dfb      	ldrb	r3, [r7, #23]
   807ba:	1c5a      	adds	r2, r3, #1
   807bc:	75fa      	strb	r2, [r7, #23]
   807be:	2b0a      	cmp	r3, #10
   807c0:	d902      	bls.n	807c8 <get_sensor_data+0x34>
			return 0xFFFFFFFF;							// FAILURE_RECOVERY
   807c2:	f04f 33ff 	mov.w	r3, #4294967295
   807c6:	e00c      	b.n	807e2 <get_sensor_data+0x4e>
		else
			request_sensor_data(EPS_TASK_ID, EPS_ID, sensor_id, status);		//Otherwise try again
   807c8:	79fb      	ldrb	r3, [r7, #7]
   807ca:	2008      	movs	r0, #8
   807cc:	2101      	movs	r1, #1
   807ce:	461a      	mov	r2, r3
   807d0:	693b      	ldr	r3, [r7, #16]
   807d2:	4c06      	ldr	r4, [pc, #24]	; (807ec <get_sensor_data+0x58>)
   807d4:	47a0      	blx	r4
	uint8_t tries;
	uint32_t sensor_value;
	tries = 0;
	
	sensor_value = request_sensor_data(EPS_TASK_ID, EPS_ID, sensor_id, status);		//request a value
	while (*status == -1)								//If there is an error, check the status
   807d6:	693b      	ldr	r3, [r7, #16]
   807d8:	681b      	ldr	r3, [r3, #0]
   807da:	f1b3 3fff 	cmp.w	r3, #4294967295
   807de:	d0eb      	beq.n	807b8 <get_sensor_data+0x24>
		if (tries++ > MAX_NUM_TRIES)
			return 0xFFFFFFFF;							// FAILURE_RECOVERY
		else
			request_sensor_data(EPS_TASK_ID, EPS_ID, sensor_id, status);		//Otherwise try again
	}
	return sensor_value;
   807e0:	68fb      	ldr	r3, [r7, #12]
}
   807e2:	4618      	mov	r0, r3
   807e4:	371c      	adds	r7, #28
   807e6:	46bd      	mov	sp, r7
   807e8:	bd90      	pop	{r4, r7, pc}
   807ea:	bf00      	nop
   807ec:	000861bd 	.word	0x000861bd

000807f0 <set_variable_value>:
 NOTE: This function will wait for a maximum of X * 25ms. for the		
 operation to complete.																	*/
/****************************************************************************************/

static void set_variable_value(uint8_t variable_name, uint8_t new_var_value)
{
   807f0:	b590      	push	{r4, r7, lr}
   807f2:	b085      	sub	sp, #20
   807f4:	af00      	add	r7, sp, #0
   807f6:	4602      	mov	r2, r0
   807f8:	460b      	mov	r3, r1
   807fa:	71fa      	strb	r2, [r7, #7]
   807fc:	71bb      	strb	r3, [r7, #6]
	//Declare testing variables
	int status;
	uint8_t tries = 0;
   807fe:	2300      	movs	r3, #0
   80800:	72fb      	strb	r3, [r7, #11]
	status = set_variable(EPS_TASK_ID, EPS_ID, variable_name, new_var_value);
   80802:	79bb      	ldrb	r3, [r7, #6]
   80804:	b29b      	uxth	r3, r3
   80806:	79fa      	ldrb	r2, [r7, #7]
   80808:	2008      	movs	r0, #8
   8080a:	2101      	movs	r1, #1
   8080c:	4c0c      	ldr	r4, [pc, #48]	; (80840 <set_variable_value+0x50>)
   8080e:	47a0      	blx	r4
   80810:	60f8      	str	r0, [r7, #12]
	while (status == -1)								//If there is an error, check the status
   80812:	e00d      	b.n	80830 <set_variable_value+0x40>
	{
		if (tries++ > MAX_NUM_TRIES)
   80814:	7afb      	ldrb	r3, [r7, #11]
   80816:	1c5a      	adds	r2, r3, #1
   80818:	72fa      	strb	r2, [r7, #11]
   8081a:	2b0a      	cmp	r3, #10
   8081c:	d900      	bls.n	80820 <set_variable_value+0x30>
			return;									// FAILURE_RECOVERY
   8081e:	e00c      	b.n	8083a <set_variable_value+0x4a>
		else
			status = set_variable(EPS_TASK_ID, EPS_ID, variable_name, new_var_value);		//Otherwise try again
   80820:	79bb      	ldrb	r3, [r7, #6]
   80822:	b29b      	uxth	r3, r3
   80824:	79fa      	ldrb	r2, [r7, #7]
   80826:	2008      	movs	r0, #8
   80828:	2101      	movs	r1, #1
   8082a:	4c05      	ldr	r4, [pc, #20]	; (80840 <set_variable_value+0x50>)
   8082c:	47a0      	blx	r4
   8082e:	60f8      	str	r0, [r7, #12]
{
	//Declare testing variables
	int status;
	uint8_t tries = 0;
	status = set_variable(EPS_TASK_ID, EPS_ID, variable_name, new_var_value);
	while (status == -1)								//If there is an error, check the status
   80830:	68fb      	ldr	r3, [r7, #12]
   80832:	f1b3 3fff 	cmp.w	r3, #4294967295
   80836:	d0ed      	beq.n	80814 <set_variable_value+0x24>
		if (tries++ > MAX_NUM_TRIES)
			return;									// FAILURE_RECOVERY
		else
			status = set_variable(EPS_TASK_ID, EPS_ID, variable_name, new_var_value);		//Otherwise try again
	}
	return;						//If status is 1 then we are good and we should return the sensor value
   80838:	bf00      	nop
   8083a:	3714      	adds	r7, #20
   8083c:	46bd      	mov	sp, r7
   8083e:	bd90      	pop	{r4, r7, pc}
   80840:	00086259 	.word	0x00086259

00080844 <vParTestInitialise>:

/**
 * \brief Initializes the LEDs in the off state.
 */ 
void vParTestInitialise( void )
{
   80844:	b580      	push	{r7, lr}
   80846:	b082      	sub	sp, #8
   80848:	af00      	add	r7, sp, #0
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8084a:	2300      	movs	r3, #0
   8084c:	607b      	str	r3, [r7, #4]
   8084e:	e00f      	b.n	80870 <vParTestInitialise+0x2c>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
   80850:	4b0a      	ldr	r3, [pc, #40]	; (8087c <vParTestInitialise+0x38>)
   80852:	687a      	ldr	r2, [r7, #4]
   80854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80858:	4618      	mov	r0, r3
   8085a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8085e:	4b08      	ldr	r3, [pc, #32]	; (80880 <vParTestInitialise+0x3c>)
   80860:	4798      	blx	r3
		vParTestSetLED( ul, pdFALSE );
   80862:	6878      	ldr	r0, [r7, #4]
   80864:	2100      	movs	r1, #0
   80866:	4b07      	ldr	r3, [pc, #28]	; (80884 <vParTestInitialise+0x40>)
   80868:	4798      	blx	r3
 */ 
void vParTestInitialise( void )
{
	unsigned long ul;

	for( ul = 0; ul < partestNUM_LEDS; ul++ )
   8086a:	687b      	ldr	r3, [r7, #4]
   8086c:	3301      	adds	r3, #1
   8086e:	607b      	str	r3, [r7, #4]
   80870:	687b      	ldr	r3, [r7, #4]
   80872:	2b03      	cmp	r3, #3
   80874:	d9ec      	bls.n	80850 <vParTestInitialise+0xc>
	{
		/* Configure the LED, before ensuring it starts in the off state. */
		gpio_configure_pin( ulLED[ ul ],  ( PIO_OUTPUT_1 | PIO_DEFAULT ) );
		vParTestSetLED( ul, pdFALSE );
	}
}
   80876:	3708      	adds	r7, #8
   80878:	46bd      	mov	sp, r7
   8087a:	bd80      	pop	{r7, pc}
   8087c:	00086f20 	.word	0x00086f20
   80880:	000821e5 	.word	0x000821e5
   80884:	00080889 	.word	0x00080889

00080888 <vParTestSetLED>:
 						will be inverted.
 * @param xValue:		Boolean value - true to turn LED on,
 *									  - false to turn LED off
 */
void vParTestSetLED( unsigned portBASE_TYPE uxLED, signed portBASE_TYPE xValue )
{
   80888:	b580      	push	{r7, lr}
   8088a:	b082      	sub	sp, #8
   8088c:	af00      	add	r7, sp, #0
   8088e:	6078      	str	r0, [r7, #4]
   80890:	6039      	str	r1, [r7, #0]
	if( uxLED < partestNUM_LEDS )
   80892:	687b      	ldr	r3, [r7, #4]
   80894:	2b03      	cmp	r3, #3
   80896:	d823      	bhi.n	808e0 <vParTestSetLED+0x58>
	{
		if( uxLED == partstsINVERTED_LED )
   80898:	687b      	ldr	r3, [r7, #4]
   8089a:	2b00      	cmp	r3, #0
   8089c:	d106      	bne.n	808ac <vParTestSetLED+0x24>
		{
			xValue = !xValue;
   8089e:	683b      	ldr	r3, [r7, #0]
   808a0:	2b00      	cmp	r3, #0
   808a2:	bf14      	ite	ne
   808a4:	2300      	movne	r3, #0
   808a6:	2301      	moveq	r3, #1
   808a8:	b2db      	uxtb	r3, r3
   808aa:	603b      	str	r3, [r7, #0]
		}

		if( xValue != pdFALSE )
   808ac:	683b      	ldr	r3, [r7, #0]
   808ae:	2b00      	cmp	r3, #0
   808b0:	d00b      	beq.n	808ca <vParTestSetLED+0x42>
		{
			/* Turn the LED on. */
			taskENTER_CRITICAL();
   808b2:	4b0d      	ldr	r3, [pc, #52]	; (808e8 <vParTestSetLED+0x60>)
   808b4:	4798      	blx	r3
			{
				gpio_set_pin_low( ulLED[ uxLED ]);
   808b6:	4b0d      	ldr	r3, [pc, #52]	; (808ec <vParTestSetLED+0x64>)
   808b8:	687a      	ldr	r2, [r7, #4]
   808ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   808be:	4618      	mov	r0, r3
   808c0:	4b0b      	ldr	r3, [pc, #44]	; (808f0 <vParTestSetLED+0x68>)
   808c2:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   808c4:	4b0b      	ldr	r3, [pc, #44]	; (808f4 <vParTestSetLED+0x6c>)
   808c6:	4798      	blx	r3
   808c8:	e00a      	b.n	808e0 <vParTestSetLED+0x58>
		}
		else
		{
			/* Turn the LED off. */
			taskENTER_CRITICAL();
   808ca:	4b07      	ldr	r3, [pc, #28]	; (808e8 <vParTestSetLED+0x60>)
   808cc:	4798      	blx	r3
			{
				gpio_set_pin_high( ulLED[ uxLED ]);
   808ce:	4b07      	ldr	r3, [pc, #28]	; (808ec <vParTestSetLED+0x64>)
   808d0:	687a      	ldr	r2, [r7, #4]
   808d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   808d6:	4618      	mov	r0, r3
   808d8:	4b07      	ldr	r3, [pc, #28]	; (808f8 <vParTestSetLED+0x70>)
   808da:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   808dc:	4b05      	ldr	r3, [pc, #20]	; (808f4 <vParTestSetLED+0x6c>)
   808de:	4798      	blx	r3
		}
	}
}
   808e0:	3708      	adds	r7, #8
   808e2:	46bd      	mov	sp, r7
   808e4:	bd80      	pop	{r7, pc}
   808e6:	bf00      	nop
   808e8:	00083131 	.word	0x00083131
   808ec:	00086f20 	.word	0x00086f20
   808f0:	00082151 	.word	0x00082151
   808f4:	00083175 	.word	0x00083175
   808f8:	0008211d 	.word	0x0008211d

000808fc <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   808fc:	b480      	push	{r7}
   808fe:	b083      	sub	sp, #12
   80900:	af00      	add	r7, sp, #0
   80902:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80904:	687b      	ldr	r3, [r7, #4]
   80906:	2b07      	cmp	r3, #7
   80908:	d825      	bhi.n	80956 <osc_get_rate+0x5a>
   8090a:	a201      	add	r2, pc, #4	; (adr r2, 80910 <osc_get_rate+0x14>)
   8090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80910:	00080931 	.word	0x00080931
   80914:	00080937 	.word	0x00080937
   80918:	0008093d 	.word	0x0008093d
   8091c:	00080943 	.word	0x00080943
   80920:	00080947 	.word	0x00080947
   80924:	0008094b 	.word	0x0008094b
   80928:	0008094f 	.word	0x0008094f
   8092c:	00080953 	.word	0x00080953
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80930:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80934:	e010      	b.n	80958 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8093a:	e00d      	b.n	80958 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8093c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80940:	e00a      	b.n	80958 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80942:	4b08      	ldr	r3, [pc, #32]	; (80964 <osc_get_rate+0x68>)
   80944:	e008      	b.n	80958 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80946:	4b08      	ldr	r3, [pc, #32]	; (80968 <osc_get_rate+0x6c>)
   80948:	e006      	b.n	80958 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8094a:	4b08      	ldr	r3, [pc, #32]	; (8096c <osc_get_rate+0x70>)
   8094c:	e004      	b.n	80958 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8094e:	4b07      	ldr	r3, [pc, #28]	; (8096c <osc_get_rate+0x70>)
   80950:	e002      	b.n	80958 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80952:	4b06      	ldr	r3, [pc, #24]	; (8096c <osc_get_rate+0x70>)
   80954:	e000      	b.n	80958 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80956:	2300      	movs	r3, #0
}
   80958:	4618      	mov	r0, r3
   8095a:	370c      	adds	r7, #12
   8095c:	46bd      	mov	sp, r7
   8095e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80962:	4770      	bx	lr
   80964:	003d0900 	.word	0x003d0900
   80968:	007a1200 	.word	0x007a1200
   8096c:	00b71b00 	.word	0x00b71b00

00080970 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80970:	b580      	push	{r7, lr}
   80972:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80974:	2006      	movs	r0, #6
   80976:	4b04      	ldr	r3, [pc, #16]	; (80988 <sysclk_get_main_hz+0x18>)
   80978:	4798      	blx	r3
   8097a:	4602      	mov	r2, r0
   8097c:	4613      	mov	r3, r2
   8097e:	00db      	lsls	r3, r3, #3
   80980:	1a9b      	subs	r3, r3, r2
   80982:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80984:	4618      	mov	r0, r3
   80986:	bd80      	pop	{r7, pc}
   80988:	000808fd 	.word	0x000808fd

0008098c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8098c:	b580      	push	{r7, lr}
   8098e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80990:	4b02      	ldr	r3, [pc, #8]	; (8099c <sysclk_get_cpu_hz+0x10>)
   80992:	4798      	blx	r3
   80994:	4603      	mov	r3, r0
   80996:	085b      	lsrs	r3, r3, #1
}
   80998:	4618      	mov	r0, r3
   8099a:	bd80      	pop	{r7, pc}
   8099c:	00080971 	.word	0x00080971

000809a0 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   809a0:	b480      	push	{r7}
   809a2:	b083      	sub	sp, #12
   809a4:	af00      	add	r7, sp, #0
   809a6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   809a8:	687b      	ldr	r3, [r7, #4]
   809aa:	2280      	movs	r2, #128	; 0x80
   809ac:	601a      	str	r2, [r3, #0]
}
   809ae:	370c      	adds	r7, #12
   809b0:	46bd      	mov	sp, r7
   809b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   809b6:	4770      	bx	lr

000809b8 <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   809b8:	b480      	push	{r7}
   809ba:	b083      	sub	sp, #12
   809bc:	af00      	add	r7, sp, #0
   809be:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   809c0:	687b      	ldr	r3, [r7, #4]
   809c2:	2201      	movs	r2, #1
   809c4:	601a      	str	r2, [r3, #0]
}
   809c6:	370c      	adds	r7, #12
   809c8:	46bd      	mov	sp, r7
   809ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   809ce:	4770      	bx	lr

000809d0 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   809d0:	b480      	push	{r7}
   809d2:	b083      	sub	sp, #12
   809d4:	af00      	add	r7, sp, #0
   809d6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   809d8:	687b      	ldr	r3, [r7, #4]
   809da:	685b      	ldr	r3, [r3, #4]
   809dc:	f043 0201 	orr.w	r2, r3, #1
   809e0:	687b      	ldr	r3, [r7, #4]
   809e2:	605a      	str	r2, [r3, #4]
}
   809e4:	370c      	adds	r7, #12
   809e6:	46bd      	mov	sp, r7
   809e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   809ec:	4770      	bx	lr
   809ee:	bf00      	nop

000809f0 <spi_set_variable_peripheral_select>:
 * Peripheral Chip Select can be controlled by SPI_TDR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_variable_peripheral_select(Spi *p_spi)
{
   809f0:	b480      	push	{r7}
   809f2:	b083      	sub	sp, #12
   809f4:	af00      	add	r7, sp, #0
   809f6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_PS;
   809f8:	687b      	ldr	r3, [r7, #4]
   809fa:	685b      	ldr	r3, [r3, #4]
   809fc:	f043 0202 	orr.w	r2, r3, #2
   80a00:	687b      	ldr	r3, [r7, #4]
   80a02:	605a      	str	r2, [r3, #4]
}
   80a04:	370c      	adds	r7, #12
   80a06:	46bd      	mov	sp, r7
   80a08:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a0c:	4770      	bx	lr
   80a0e:	bf00      	nop

00080a10 <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
   80a10:	b480      	push	{r7}
   80a12:	b083      	sub	sp, #12
   80a14:	af00      	add	r7, sp, #0
   80a16:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   80a18:	687b      	ldr	r3, [r7, #4]
   80a1a:	685b      	ldr	r3, [r3, #4]
   80a1c:	f023 0204 	bic.w	r2, r3, #4
   80a20:	687b      	ldr	r3, [r7, #4]
   80a22:	605a      	str	r2, [r3, #4]
}
   80a24:	370c      	adds	r7, #12
   80a26:	46bd      	mov	sp, r7
   80a28:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a2c:	4770      	bx	lr
   80a2e:	bf00      	nop

00080a30 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80a30:	b480      	push	{r7}
   80a32:	b083      	sub	sp, #12
   80a34:	af00      	add	r7, sp, #0
   80a36:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80a38:	687b      	ldr	r3, [r7, #4]
   80a3a:	685b      	ldr	r3, [r3, #4]
   80a3c:	f043 0210 	orr.w	r2, r3, #16
   80a40:	687b      	ldr	r3, [r7, #4]
   80a42:	605a      	str	r2, [r3, #4]
}
   80a44:	370c      	adds	r7, #12
   80a46:	46bd      	mov	sp, r7
   80a48:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a4c:	4770      	bx	lr
   80a4e:	bf00      	nop

00080a50 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   80a50:	b480      	push	{r7}
   80a52:	b083      	sub	sp, #12
   80a54:	af00      	add	r7, sp, #0
   80a56:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80a58:	687b      	ldr	r3, [r7, #4]
   80a5a:	685b      	ldr	r3, [r3, #4]
   80a5c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   80a60:	687b      	ldr	r3, [r7, #4]
   80a62:	605a      	str	r2, [r3, #4]
}
   80a64:	370c      	adds	r7, #12
   80a66:	46bd      	mov	sp, r7
   80a68:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a6c:	4770      	bx	lr
   80a6e:	bf00      	nop

00080a70 <spi_read_status>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return SPI status register value.
 */
static inline uint32_t spi_read_status(Spi *p_spi)
{
   80a70:	b480      	push	{r7}
   80a72:	b083      	sub	sp, #12
   80a74:	af00      	add	r7, sp, #0
   80a76:	6078      	str	r0, [r7, #4]
	return p_spi->SPI_SR;
   80a78:	687b      	ldr	r3, [r7, #4]
   80a7a:	691b      	ldr	r3, [r3, #16]
}
   80a7c:	4618      	mov	r0, r3
   80a7e:	370c      	adds	r7, #12
   80a80:	46bd      	mov	sp, r7
   80a82:	f85d 7b04 	ldr.w	r7, [sp], #4
   80a86:	4770      	bx	lr

00080a88 <SPI0_Handler>:

/**
 * \brief Interrupt handler for the SPI slave.
 */
void SPI_Handler(void)
{
   80a88:	b580      	push	{r7, lr}
   80a8a:	b082      	sub	sp, #8
   80a8c:	af00      	add	r7, sp, #0
	static uint16_t data;
	uint8_t uc_pcs;
	uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
   80a8e:	4b0c      	ldr	r3, [pc, #48]	; (80ac0 <SPI0_Handler+0x38>)
   80a90:	607b      	str	r3, [r7, #4]

	if (spi_read_status(SPI_SLAVE_BASE) & SPI_SR_RDRF) 
   80a92:	480c      	ldr	r0, [pc, #48]	; (80ac4 <SPI0_Handler+0x3c>)
   80a94:	4b0c      	ldr	r3, [pc, #48]	; (80ac8 <SPI0_Handler+0x40>)
   80a96:	4798      	blx	r3
   80a98:	4603      	mov	r3, r0
   80a9a:	f003 0301 	and.w	r3, r3, #1
   80a9e:	2b00      	cmp	r3, #0
   80aa0:	d00b      	beq.n	80aba <SPI0_Handler+0x32>
	{
		spi_read(SPI_SLAVE_BASE, &data, &uc_pcs);	// SPI message is put into the 16-bit data variable.
   80aa2:	1cfb      	adds	r3, r7, #3
   80aa4:	4807      	ldr	r0, [pc, #28]	; (80ac4 <SPI0_Handler+0x3c>)
   80aa6:	4909      	ldr	r1, [pc, #36]	; (80acc <SPI0_Handler+0x44>)
   80aa8:	461a      	mov	r2, r3
   80aaa:	4b09      	ldr	r3, [pc, #36]	; (80ad0 <SPI0_Handler+0x48>)
   80aac:	4798      	blx	r3
		
		//gs_ul_transfer_index++;
		//gs_ul_transfer_length--;
		
		*reg_ptr |= 0x00BB;		// transfer 0xFF back to the SSM.
   80aae:	687b      	ldr	r3, [r7, #4]
   80ab0:	681b      	ldr	r3, [r3, #0]
   80ab2:	f043 02bb 	orr.w	r2, r3, #187	; 0xbb
   80ab6:	687b      	ldr	r3, [r7, #4]
   80ab8:	601a      	str	r2, [r3, #0]
	}
}
   80aba:	3708      	adds	r7, #8
   80abc:	46bd      	mov	sp, r7
   80abe:	bd80      	pop	{r7, pc}
   80ac0:	4000800c 	.word	0x4000800c
   80ac4:	40008000 	.word	0x40008000
   80ac8:	00080a71 	.word	0x00080a71
   80acc:	20070464 	.word	0x20070464
   80ad0:	00080211 	.word	0x00080211

00080ad4 <spi_master_initialize>:

/**
 * \brief Initialize SPI as master.
 */
static void spi_master_initialize(void)
{
   80ad4:	b590      	push	{r4, r7, lr}
   80ad6:	b085      	sub	sp, #20
   80ad8:	af00      	add	r7, sp, #0
	/* Configure an SPI peripheral. */
	uint32_t spi_chip_sel, spi_clk_freq, spi_clk_pol, spi_clk_pha;
	spi_enable_clock(SPI_MASTER_BASE);
   80ada:	4859      	ldr	r0, [pc, #356]	; (80c40 <spi_master_initialize+0x16c>)
   80adc:	4b59      	ldr	r3, [pc, #356]	; (80c44 <spi_master_initialize+0x170>)
   80ade:	4798      	blx	r3
	spi_reset(SPI_MASTER_BASE);
   80ae0:	4857      	ldr	r0, [pc, #348]	; (80c40 <spi_master_initialize+0x16c>)
   80ae2:	4b59      	ldr	r3, [pc, #356]	; (80c48 <spi_master_initialize+0x174>)
   80ae4:	4798      	blx	r3
	spi_set_master_mode(SPI_MASTER_BASE);
   80ae6:	4856      	ldr	r0, [pc, #344]	; (80c40 <spi_master_initialize+0x16c>)
   80ae8:	4b58      	ldr	r3, [pc, #352]	; (80c4c <spi_master_initialize+0x178>)
   80aea:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI_MASTER_BASE);
   80aec:	4854      	ldr	r0, [pc, #336]	; (80c40 <spi_master_initialize+0x16c>)
   80aee:	4b58      	ldr	r3, [pc, #352]	; (80c50 <spi_master_initialize+0x17c>)
   80af0:	4798      	blx	r3
	spi_disable_loopback(SPI_MASTER_BASE);
   80af2:	4853      	ldr	r0, [pc, #332]	; (80c40 <spi_master_initialize+0x16c>)
   80af4:	4b57      	ldr	r3, [pc, #348]	; (80c54 <spi_master_initialize+0x180>)
   80af6:	4798      	blx	r3

	spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, spi_get_pcs(2));	// This sets the value of PCS within the Mode Register.
   80af8:	4851      	ldr	r0, [pc, #324]	; (80c40 <spi_master_initialize+0x16c>)
   80afa:	210b      	movs	r1, #11
   80afc:	4b56      	ldr	r3, [pc, #344]	; (80c58 <spi_master_initialize+0x184>)
   80afe:	4798      	blx	r3
	spi_set_variable_peripheral_select(SPI_MASTER_BASE);					// PCS needs to be set within each transfer (PCS within SPI_TDR).
   80b00:	484f      	ldr	r0, [pc, #316]	; (80c40 <spi_master_initialize+0x16c>)
   80b02:	4b56      	ldr	r3, [pc, #344]	; (80c5c <spi_master_initialize+0x188>)
   80b04:	4798      	blx	r3
	spi_disable_peripheral_select_decode(SPI_MASTER_BASE);					// Each CS is to be connected to a single device.
   80b06:	484e      	ldr	r0, [pc, #312]	; (80c40 <spi_master_initialize+0x16c>)
   80b08:	4b55      	ldr	r3, [pc, #340]	; (80c60 <spi_master_initialize+0x18c>)
   80b0a:	4798      	blx	r3
	spi_set_delay_between_chip_select(SPI_MASTER_BASE, SPI_DLYBCS);
   80b0c:	484c      	ldr	r0, [pc, #304]	; (80c40 <spi_master_initialize+0x16c>)
   80b0e:	2100      	movs	r1, #0
   80b10:	4b54      	ldr	r3, [pc, #336]	; (80c64 <spi_master_initialize+0x190>)
   80b12:	4798      	blx	r3

	/* Set communication parameters for CS0	*/
	spi_chip_sel = 0;
   80b14:	2300      	movs	r3, #0
   80b16:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 100000;	// SPI CLK for RTC = 100kHz.
   80b18:	4b53      	ldr	r3, [pc, #332]	; (80c68 <spi_master_initialize+0x194>)
   80b1a:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   80b1c:	2301      	movs	r3, #1
   80b1e:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80b20:	2300      	movs	r3, #0
   80b22:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80b24:	4846      	ldr	r0, [pc, #280]	; (80c40 <spi_master_initialize+0x16c>)
   80b26:	68f9      	ldr	r1, [r7, #12]
   80b28:	2200      	movs	r2, #0
   80b2a:	2302      	movs	r3, #2
   80b2c:	4c4f      	ldr	r4, [pc, #316]	; (80c6c <spi_master_initialize+0x198>)
   80b2e:	47a0      	blx	r4
			SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_16_BIT);
   80b30:	4843      	ldr	r0, [pc, #268]	; (80c40 <spi_master_initialize+0x16c>)
   80b32:	68f9      	ldr	r1, [r7, #12]
   80b34:	2280      	movs	r2, #128	; 0x80
   80b36:	4b4e      	ldr	r3, [pc, #312]	; (80c70 <spi_master_initialize+0x19c>)
   80b38:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   80b3a:	4b4e      	ldr	r3, [pc, #312]	; (80c74 <spi_master_initialize+0x1a0>)
   80b3c:	4798      	blx	r3
   80b3e:	4603      	mov	r3, r0
   80b40:	68b8      	ldr	r0, [r7, #8]
   80b42:	4619      	mov	r1, r3
   80b44:	4b4c      	ldr	r3, [pc, #304]	; (80c78 <spi_master_initialize+0x1a4>)
   80b46:	4798      	blx	r3
   80b48:	4603      	mov	r3, r0
   80b4a:	b2db      	uxtb	r3, r3
   80b4c:	483c      	ldr	r0, [pc, #240]	; (80c40 <spi_master_initialize+0x16c>)
   80b4e:	68f9      	ldr	r1, [r7, #12]
   80b50:	461a      	mov	r2, r3
   80b52:	4b4a      	ldr	r3, [pc, #296]	; (80c7c <spi_master_initialize+0x1a8>)
   80b54:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);		// CS rises after SPI transfers have completed.
   80b56:	483a      	ldr	r0, [pc, #232]	; (80c40 <spi_master_initialize+0x16c>)
   80b58:	68f9      	ldr	r1, [r7, #12]
   80b5a:	2204      	movs	r2, #4
   80b5c:	4b48      	ldr	r3, [pc, #288]	; (80c80 <spi_master_initialize+0x1ac>)
   80b5e:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80b60:	4837      	ldr	r0, [pc, #220]	; (80c40 <spi_master_initialize+0x16c>)
   80b62:	68f9      	ldr	r1, [r7, #12]
   80b64:	687a      	ldr	r2, [r7, #4]
   80b66:	4b47      	ldr	r3, [pc, #284]	; (80c84 <spi_master_initialize+0x1b0>)
   80b68:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   80b6a:	4835      	ldr	r0, [pc, #212]	; (80c40 <spi_master_initialize+0x16c>)
   80b6c:	68f9      	ldr	r1, [r7, #12]
   80b6e:	683a      	ldr	r2, [r7, #0]
   80b70:	4b45      	ldr	r3, [pc, #276]	; (80c88 <spi_master_initialize+0x1b4>)
   80b72:	4798      	blx	r3
	
	/* Set communication parameters for CS1	*/
	spi_chip_sel = 1;
   80b74:	2301      	movs	r3, #1
   80b76:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 2000000;	// SPI CLK for RTC = 4MHz.
   80b78:	4b44      	ldr	r3, [pc, #272]	; (80c8c <spi_master_initialize+0x1b8>)
   80b7a:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 0;
   80b7c:	2300      	movs	r3, #0
   80b7e:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80b80:	2300      	movs	r3, #0
   80b82:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80b84:	482e      	ldr	r0, [pc, #184]	; (80c40 <spi_master_initialize+0x16c>)
   80b86:	68f9      	ldr	r1, [r7, #12]
   80b88:	2200      	movs	r2, #0
   80b8a:	2302      	movs	r3, #2
   80b8c:	4c37      	ldr	r4, [pc, #220]	; (80c6c <spi_master_initialize+0x198>)
   80b8e:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   80b90:	482b      	ldr	r0, [pc, #172]	; (80c40 <spi_master_initialize+0x16c>)
   80b92:	68f9      	ldr	r1, [r7, #12]
   80b94:	2200      	movs	r2, #0
   80b96:	4b36      	ldr	r3, [pc, #216]	; (80c70 <spi_master_initialize+0x19c>)
   80b98:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz())); 
   80b9a:	4b36      	ldr	r3, [pc, #216]	; (80c74 <spi_master_initialize+0x1a0>)
   80b9c:	4798      	blx	r3
   80b9e:	4603      	mov	r3, r0
   80ba0:	68b8      	ldr	r0, [r7, #8]
   80ba2:	4619      	mov	r1, r3
   80ba4:	4b34      	ldr	r3, [pc, #208]	; (80c78 <spi_master_initialize+0x1a4>)
   80ba6:	4798      	blx	r3
   80ba8:	4603      	mov	r3, r0
   80baa:	b2db      	uxtb	r3, r3
   80bac:	4824      	ldr	r0, [pc, #144]	; (80c40 <spi_master_initialize+0x16c>)
   80bae:	68f9      	ldr	r1, [r7, #12]
   80bb0:	461a      	mov	r2, r3
   80bb2:	4b32      	ldr	r3, [pc, #200]	; (80c7c <spi_master_initialize+0x1a8>)
   80bb4:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_RISE_FORCED);
   80bb6:	4822      	ldr	r0, [pc, #136]	; (80c40 <spi_master_initialize+0x16c>)
   80bb8:	68f9      	ldr	r1, [r7, #12]
   80bba:	2204      	movs	r2, #4
   80bbc:	4b30      	ldr	r3, [pc, #192]	; (80c80 <spi_master_initialize+0x1ac>)
   80bbe:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80bc0:	481f      	ldr	r0, [pc, #124]	; (80c40 <spi_master_initialize+0x16c>)
   80bc2:	68f9      	ldr	r1, [r7, #12]
   80bc4:	687a      	ldr	r2, [r7, #4]
   80bc6:	4b2f      	ldr	r3, [pc, #188]	; (80c84 <spi_master_initialize+0x1b0>)
   80bc8:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   80bca:	481d      	ldr	r0, [pc, #116]	; (80c40 <spi_master_initialize+0x16c>)
   80bcc:	68f9      	ldr	r1, [r7, #12]
   80bce:	683a      	ldr	r2, [r7, #0]
   80bd0:	4b2d      	ldr	r3, [pc, #180]	; (80c88 <spi_master_initialize+0x1b4>)
   80bd2:	4798      	blx	r3
	
	/* Set communication parameters for CS2	*/
	spi_chip_sel = 2;
   80bd4:	2302      	movs	r3, #2
   80bd6:	60fb      	str	r3, [r7, #12]
	spi_clk_freq = 44000000;	// SPI CLK for MEM2 = 44MHz.
   80bd8:	4b2d      	ldr	r3, [pc, #180]	; (80c90 <spi_master_initialize+0x1bc>)
   80bda:	60bb      	str	r3, [r7, #8]
	spi_clk_pol = 1;
   80bdc:	2301      	movs	r3, #1
   80bde:	607b      	str	r3, [r7, #4]
	spi_clk_pha = 0;
   80be0:	2300      	movs	r3, #0
   80be2:	603b      	str	r3, [r7, #0]
	spi_set_transfer_delay(SPI_MASTER_BASE, spi_chip_sel, SPI_DLYBS,
   80be4:	4816      	ldr	r0, [pc, #88]	; (80c40 <spi_master_initialize+0x16c>)
   80be6:	68f9      	ldr	r1, [r7, #12]
   80be8:	2200      	movs	r2, #0
   80bea:	2302      	movs	r3, #2
   80bec:	4c1f      	ldr	r4, [pc, #124]	; (80c6c <spi_master_initialize+0x198>)
   80bee:	47a0      	blx	r4
	SPI_DLYBCT);
	spi_set_bits_per_transfer(SPI_MASTER_BASE, spi_chip_sel, SPI_CSR_BITS_8_BIT);
   80bf0:	4813      	ldr	r0, [pc, #76]	; (80c40 <spi_master_initialize+0x16c>)
   80bf2:	68f9      	ldr	r1, [r7, #12]
   80bf4:	2200      	movs	r2, #0
   80bf6:	4b1e      	ldr	r3, [pc, #120]	; (80c70 <spi_master_initialize+0x19c>)
   80bf8:	4798      	blx	r3
	spi_set_baudrate_div(SPI_MASTER_BASE, spi_chip_sel, spi_calc_baudrate_div(spi_clk_freq, sysclk_get_cpu_hz()));
   80bfa:	4b1e      	ldr	r3, [pc, #120]	; (80c74 <spi_master_initialize+0x1a0>)
   80bfc:	4798      	blx	r3
   80bfe:	4603      	mov	r3, r0
   80c00:	68b8      	ldr	r0, [r7, #8]
   80c02:	4619      	mov	r1, r3
   80c04:	4b1c      	ldr	r3, [pc, #112]	; (80c78 <spi_master_initialize+0x1a4>)
   80c06:	4798      	blx	r3
   80c08:	4603      	mov	r3, r0
   80c0a:	b2db      	uxtb	r3, r3
   80c0c:	480c      	ldr	r0, [pc, #48]	; (80c40 <spi_master_initialize+0x16c>)
   80c0e:	68f9      	ldr	r1, [r7, #12]
   80c10:	461a      	mov	r2, r3
   80c12:	4b1a      	ldr	r3, [pc, #104]	; (80c7c <spi_master_initialize+0x1a8>)
   80c14:	4798      	blx	r3
	spi_configure_cs_behavior(SPI_MASTER_BASE, spi_chip_sel, SPI_CS_KEEP_LOW);
   80c16:	480a      	ldr	r0, [pc, #40]	; (80c40 <spi_master_initialize+0x16c>)
   80c18:	68f9      	ldr	r1, [r7, #12]
   80c1a:	2208      	movs	r2, #8
   80c1c:	4b18      	ldr	r3, [pc, #96]	; (80c80 <spi_master_initialize+0x1ac>)
   80c1e:	4798      	blx	r3
	spi_set_clock_polarity(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pol);
   80c20:	4807      	ldr	r0, [pc, #28]	; (80c40 <spi_master_initialize+0x16c>)
   80c22:	68f9      	ldr	r1, [r7, #12]
   80c24:	687a      	ldr	r2, [r7, #4]
   80c26:	4b17      	ldr	r3, [pc, #92]	; (80c84 <spi_master_initialize+0x1b0>)
   80c28:	4798      	blx	r3
	spi_set_clock_phase(SPI_MASTER_BASE, spi_chip_sel, spi_clk_pha);
   80c2a:	4805      	ldr	r0, [pc, #20]	; (80c40 <spi_master_initialize+0x16c>)
   80c2c:	68f9      	ldr	r1, [r7, #12]
   80c2e:	683a      	ldr	r2, [r7, #0]
   80c30:	4b15      	ldr	r3, [pc, #84]	; (80c88 <spi_master_initialize+0x1b4>)
   80c32:	4798      	blx	r3
	
	/* Enable SPI Communication */
	spi_enable(SPI_MASTER_BASE);
   80c34:	4802      	ldr	r0, [pc, #8]	; (80c40 <spi_master_initialize+0x16c>)
   80c36:	4b17      	ldr	r3, [pc, #92]	; (80c94 <spi_master_initialize+0x1c0>)
   80c38:	4798      	blx	r3
}
   80c3a:	3714      	adds	r7, #20
   80c3c:	46bd      	mov	sp, r7
   80c3e:	bd90      	pop	{r4, r7, pc}
   80c40:	40008000 	.word	0x40008000
   80c44:	00080189 	.word	0x00080189
   80c48:	000809a1 	.word	0x000809a1
   80c4c:	000809d1 	.word	0x000809d1
   80c50:	00080a31 	.word	0x00080a31
   80c54:	00080a51 	.word	0x00080a51
   80c58:	000801ad 	.word	0x000801ad
   80c5c:	000809f1 	.word	0x000809f1
   80c60:	00080a11 	.word	0x00080a11
   80c64:	000801e1 	.word	0x000801e1
   80c68:	000186a0 	.word	0x000186a0
   80c6c:	0008049d 	.word	0x0008049d
   80c70:	000803c5 	.word	0x000803c5
   80c74:	0008098d 	.word	0x0008098d
   80c78:	0008040d 	.word	0x0008040d
   80c7c:	0008044d 	.word	0x0008044d
   80c80:	00080321 	.word	0x00080321
   80c84:	00080281 	.word	0x00080281
   80c88:	000802d1 	.word	0x000802d1
   80c8c:	001e8480 	.word	0x001e8480
   80c90:	029f6300 	.word	0x029f6300
   80c94:	000809b9 	.word	0x000809b9

00080c98 <spi_initialize>:
 * \brief Initialize the ATSAM3X8E SPI driver in Master mode.
 *
 * \return Unused (ANSI-C compatibility).
 */
void spi_initialize(void)
{
   80c98:	b580      	push	{r7, lr}
   80c9a:	af00      	add	r7, sp, #0
	//uint32_t* reg_ptr = 0x4000800C;		// SPI_TDR (SPI0)
		
	//*reg_ptr |= 0x00BB;
	//spi_slave_initialize();
	spi_master_initialize();
   80c9c:	4b01      	ldr	r3, [pc, #4]	; (80ca4 <spi_initialize+0xc>)
   80c9e:	4798      	blx	r3

	return;
   80ca0:	bf00      	nop
}
   80ca2:	bd80      	pop	{r7, pc}
   80ca4:	00080ad5 	.word	0x00080ad5

00080ca8 <delay_us>:
	while(timeout--){ }
	return;
}

void delay_us(uint32_t us)
{
   80ca8:	b480      	push	{r7}
   80caa:	b085      	sub	sp, #20
   80cac:	af00      	add	r7, sp, #0
   80cae:	6078      	str	r0, [r7, #4]
	uint32_t timeout = us * 84;	// Number of clock cycles needed
   80cb0:	687b      	ldr	r3, [r7, #4]
   80cb2:	2254      	movs	r2, #84	; 0x54
   80cb4:	fb02 f303 	mul.w	r3, r2, r3
   80cb8:	60fb      	str	r3, [r7, #12]
	while(timeout--){ }
   80cba:	bf00      	nop
   80cbc:	68fb      	ldr	r3, [r7, #12]
   80cbe:	1e5a      	subs	r2, r3, #1
   80cc0:	60fa      	str	r2, [r7, #12]
   80cc2:	2b00      	cmp	r3, #0
   80cc4:	d1fa      	bne.n	80cbc <delay_us+0x14>
	return;
   80cc6:	bf00      	nop
}
   80cc8:	3714      	adds	r7, #20
   80cca:	46bd      	mov	sp, r7
   80ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop

00080cd4 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80cd4:	b480      	push	{r7}
   80cd6:	b083      	sub	sp, #12
   80cd8:	af00      	add	r7, sp, #0
   80cda:	4603      	mov	r3, r0
   80cdc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80cde:	4b08      	ldr	r3, [pc, #32]	; (80d00 <NVIC_EnableIRQ+0x2c>)
   80ce0:	f997 2007 	ldrsb.w	r2, [r7, #7]
   80ce4:	0952      	lsrs	r2, r2, #5
   80ce6:	79f9      	ldrb	r1, [r7, #7]
   80ce8:	f001 011f 	and.w	r1, r1, #31
   80cec:	2001      	movs	r0, #1
   80cee:	fa00 f101 	lsl.w	r1, r0, r1
   80cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   80cf6:	370c      	adds	r7, #12
   80cf8:	46bd      	mov	sp, r7
   80cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
   80cfe:	4770      	bx	lr
   80d00:	e000e100 	.word	0xe000e100

00080d04 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80d04:	b480      	push	{r7}
   80d06:	b083      	sub	sp, #12
   80d08:	af00      	add	r7, sp, #0
   80d0a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d0c:	687b      	ldr	r3, [r7, #4]
   80d0e:	2b07      	cmp	r3, #7
   80d10:	d825      	bhi.n	80d5e <osc_get_rate+0x5a>
   80d12:	a201      	add	r2, pc, #4	; (adr r2, 80d18 <osc_get_rate+0x14>)
   80d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d18:	00080d39 	.word	0x00080d39
   80d1c:	00080d3f 	.word	0x00080d3f
   80d20:	00080d45 	.word	0x00080d45
   80d24:	00080d4b 	.word	0x00080d4b
   80d28:	00080d4f 	.word	0x00080d4f
   80d2c:	00080d53 	.word	0x00080d53
   80d30:	00080d57 	.word	0x00080d57
   80d34:	00080d5b 	.word	0x00080d5b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80d38:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d3c:	e010      	b.n	80d60 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   80d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d42:	e00d      	b.n	80d60 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80d48:	e00a      	b.n	80d60 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80d4a:	4b08      	ldr	r3, [pc, #32]	; (80d6c <osc_get_rate+0x68>)
   80d4c:	e008      	b.n	80d60 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   80d4e:	4b08      	ldr	r3, [pc, #32]	; (80d70 <osc_get_rate+0x6c>)
   80d50:	e006      	b.n	80d60 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80d52:	4b08      	ldr	r3, [pc, #32]	; (80d74 <osc_get_rate+0x70>)
   80d54:	e004      	b.n	80d60 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80d56:	4b07      	ldr	r3, [pc, #28]	; (80d74 <osc_get_rate+0x70>)
   80d58:	e002      	b.n	80d60 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80d5a:	4b06      	ldr	r3, [pc, #24]	; (80d74 <osc_get_rate+0x70>)
   80d5c:	e000      	b.n	80d60 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   80d5e:	2300      	movs	r3, #0
}
   80d60:	4618      	mov	r0, r3
   80d62:	370c      	adds	r7, #12
   80d64:	46bd      	mov	sp, r7
   80d66:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d6a:	4770      	bx	lr
   80d6c:	003d0900 	.word	0x003d0900
   80d70:	007a1200 	.word	0x007a1200
   80d74:	00b71b00 	.word	0x00b71b00

00080d78 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80d78:	b580      	push	{r7, lr}
   80d7a:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   80d7c:	2006      	movs	r0, #6
   80d7e:	4b04      	ldr	r3, [pc, #16]	; (80d90 <sysclk_get_main_hz+0x18>)
   80d80:	4798      	blx	r3
   80d82:	4602      	mov	r2, r0
   80d84:	4613      	mov	r3, r2
   80d86:	00db      	lsls	r3, r3, #3
   80d88:	1a9b      	subs	r3, r3, r2
   80d8a:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80d8c:	4618      	mov	r0, r3
   80d8e:	bd80      	pop	{r7, pc}
   80d90:	00080d05 	.word	0x00080d05

00080d94 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80d94:	b580      	push	{r7, lr}
   80d96:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   80d98:	4b02      	ldr	r3, [pc, #8]	; (80da4 <sysclk_get_cpu_hz+0x10>)
   80d9a:	4798      	blx	r3
   80d9c:	4603      	mov	r3, r0
   80d9e:	085b      	lsrs	r3, r3, #1
}
   80da0:	4618      	mov	r0, r3
   80da2:	bd80      	pop	{r7, pc}
   80da4:	00080d79 	.word	0x00080d79

00080da8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80da8:	b580      	push	{r7, lr}
   80daa:	b082      	sub	sp, #8
   80dac:	af00      	add	r7, sp, #0
   80dae:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80db0:	6878      	ldr	r0, [r7, #4]
   80db2:	4b02      	ldr	r3, [pc, #8]	; (80dbc <sysclk_enable_peripheral_clock+0x14>)
   80db4:	4798      	blx	r3
}
   80db6:	3708      	adds	r7, #8
   80db8:	46bd      	mov	sp, r7
   80dba:	bd80      	pop	{r7, pc}
   80dbc:	00082771 	.word	0x00082771

00080dc0 <USART0_Handler>:
/**
 * \brief Interrupt handler for USART. Echo the bytes received and start the
 * next receive.
 */
void USART_Handler(void)
{
   80dc0:	b580      	push	{r7, lr}
   80dc2:	b084      	sub	sp, #16
   80dc4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	uint32_t new_char = 0, new_char2 = 0;	// For ease of reading, I have created this variable.
   80dc6:	2300      	movs	r3, #0
   80dc8:	60bb      	str	r3, [r7, #8]
   80dca:	2300      	movs	r3, #0
   80dcc:	607b      	str	r3, [r7, #4]
	uint8_t command_completed = 0;
   80dce:	2300      	movs	r3, #0
   80dd0:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
   80dd2:	2300      	movs	r3, #0
   80dd4:	73bb      	strb	r3, [r7, #14]

	/* Read USART Status. */
	ul_status = usart_get_status(BOARD_USART);
   80dd6:	483b      	ldr	r0, [pc, #236]	; (80ec4 <USART0_Handler+0x104>)
   80dd8:	4b3b      	ldr	r3, [pc, #236]	; (80ec8 <USART0_Handler+0x108>)
   80dda:	4798      	blx	r3
   80ddc:	6038      	str	r0, [r7, #0]
	
	pio_toggle_pin(LED4_GPIO);
   80dde:	2058      	movs	r0, #88	; 0x58
   80de0:	4b3a      	ldr	r3, [pc, #232]	; (80ecc <USART0_Handler+0x10c>)
   80de2:	4798      	blx	r3

	if (gs_uc_trans_mode == BYTE_TRANSFER)
   80de4:	4b3a      	ldr	r3, [pc, #232]	; (80ed0 <USART0_Handler+0x110>)
   80de6:	781b      	ldrb	r3, [r3, #0]
   80de8:	2b00      	cmp	r3, #0
   80dea:	d167      	bne.n	80ebc <USART0_Handler+0xfc>
	{
		/* Transfer without PDC. */
		if (ul_status & US_CSR_RXRDY) 
   80dec:	683b      	ldr	r3, [r7, #0]
   80dee:	f003 0301 	and.w	r3, r3, #1
   80df2:	2b00      	cmp	r3, #0
   80df4:	d062      	beq.n	80ebc <USART0_Handler+0xfc>
		{
			usart_getchar(BOARD_USART, (uint32_t *)&gs_ul_read_buffer);
   80df6:	4833      	ldr	r0, [pc, #204]	; (80ec4 <USART0_Handler+0x104>)
   80df8:	4936      	ldr	r1, [pc, #216]	; (80ed4 <USART0_Handler+0x114>)
   80dfa:	4b37      	ldr	r3, [pc, #220]	; (80ed8 <USART0_Handler+0x118>)
   80dfc:	4798      	blx	r3
			new_char = gs_ul_read_buffer;
   80dfe:	4b35      	ldr	r3, [pc, #212]	; (80ed4 <USART0_Handler+0x114>)
   80e00:	681b      	ldr	r3, [r3, #0]
   80e02:	60bb      	str	r3, [r7, #8]
			
			if (new_char == 0x31)									// The character '1' was received, start "listening".
   80e04:	68bb      	ldr	r3, [r7, #8]
   80e06:	2b31      	cmp	r3, #49	; 0x31
   80e08:	d102      	bne.n	80e10 <USART0_Handler+0x50>
				command_start = 1;
   80e0a:	4b34      	ldr	r3, [pc, #208]	; (80edc <USART0_Handler+0x11c>)
   80e0c:	2201      	movs	r2, #1
   80e0e:	701a      	strb	r2, [r3, #0]
				
			if (new_char == 0x32)									// The character '2' was received, execute command.
   80e10:	68bb      	ldr	r3, [r7, #8]
   80e12:	2b32      	cmp	r3, #50	; 0x32
   80e14:	d102      	bne.n	80e1c <USART0_Handler+0x5c>
				command_end = 1;
   80e16:	4b32      	ldr	r3, [pc, #200]	; (80ee0 <USART0_Handler+0x120>)
   80e18:	2201      	movs	r2, #1
   80e1a:	701a      	strb	r2, [r3, #0]
				
			if ((command_start == 1) && (new_char != 0) && (new_char != 0x31) && new_char != 0x32)			// Since we are listening, we store the new characters.
   80e1c:	4b2f      	ldr	r3, [pc, #188]	; (80edc <USART0_Handler+0x11c>)
   80e1e:	781b      	ldrb	r3, [r3, #0]
   80e20:	2b01      	cmp	r3, #1
   80e22:	d11e      	bne.n	80e62 <USART0_Handler+0xa2>
   80e24:	68bb      	ldr	r3, [r7, #8]
   80e26:	2b00      	cmp	r3, #0
   80e28:	d01b      	beq.n	80e62 <USART0_Handler+0xa2>
   80e2a:	68bb      	ldr	r3, [r7, #8]
   80e2c:	2b31      	cmp	r3, #49	; 0x31
   80e2e:	d018      	beq.n	80e62 <USART0_Handler+0xa2>
   80e30:	68bb      	ldr	r3, [r7, #8]
   80e32:	2b32      	cmp	r3, #50	; 0x32
   80e34:	d015      	beq.n	80e62 <USART0_Handler+0xa2>
			{
				command_array[array_pos % 10] = new_char;
   80e36:	4b2b      	ldr	r3, [pc, #172]	; (80ee4 <USART0_Handler+0x124>)
   80e38:	781a      	ldrb	r2, [r3, #0]
   80e3a:	4b2b      	ldr	r3, [pc, #172]	; (80ee8 <USART0_Handler+0x128>)
   80e3c:	fba3 1302 	umull	r1, r3, r3, r2
   80e40:	08d9      	lsrs	r1, r3, #3
   80e42:	460b      	mov	r3, r1
   80e44:	009b      	lsls	r3, r3, #2
   80e46:	440b      	add	r3, r1
   80e48:	005b      	lsls	r3, r3, #1
   80e4a:	1ad3      	subs	r3, r2, r3
   80e4c:	b2db      	uxtb	r3, r3
   80e4e:	68ba      	ldr	r2, [r7, #8]
   80e50:	b2d1      	uxtb	r1, r2
   80e52:	4a26      	ldr	r2, [pc, #152]	; (80eec <USART0_Handler+0x12c>)
   80e54:	54d1      	strb	r1, [r2, r3]
				array_pos ++;
   80e56:	4b23      	ldr	r3, [pc, #140]	; (80ee4 <USART0_Handler+0x124>)
   80e58:	781b      	ldrb	r3, [r3, #0]
   80e5a:	3301      	adds	r3, #1
   80e5c:	b2da      	uxtb	r2, r3
   80e5e:	4b21      	ldr	r3, [pc, #132]	; (80ee4 <USART0_Handler+0x124>)
   80e60:	701a      	strb	r2, [r3, #0]
			}
			// '1' and '2' were both received, execute command.
			if ((command_end == 1) && (command_start == 1))
   80e62:	4b1f      	ldr	r3, [pc, #124]	; (80ee0 <USART0_Handler+0x120>)
   80e64:	781b      	ldrb	r3, [r3, #0]
   80e66:	2b01      	cmp	r3, #1
   80e68:	d11d      	bne.n	80ea6 <USART0_Handler+0xe6>
   80e6a:	4b1c      	ldr	r3, [pc, #112]	; (80edc <USART0_Handler+0x11c>)
   80e6c:	781b      	ldrb	r3, [r3, #0]
   80e6e:	2b01      	cmp	r3, #1
   80e70:	d119      	bne.n	80ea6 <USART0_Handler+0xe6>
			{
				// Check command function.
				check_command();
   80e72:	4b1f      	ldr	r3, [pc, #124]	; (80ef0 <USART0_Handler+0x130>)
   80e74:	4798      	blx	r3
				command_end = 0;
   80e76:	4b1a      	ldr	r3, [pc, #104]	; (80ee0 <USART0_Handler+0x120>)
   80e78:	2200      	movs	r2, #0
   80e7a:	701a      	strb	r2, [r3, #0]
				command_start = 0;
   80e7c:	4b17      	ldr	r3, [pc, #92]	; (80edc <USART0_Handler+0x11c>)
   80e7e:	2200      	movs	r2, #0
   80e80:	701a      	strb	r2, [r3, #0]
				array_pos = 0;
   80e82:	4b18      	ldr	r3, [pc, #96]	; (80ee4 <USART0_Handler+0x124>)
   80e84:	2200      	movs	r2, #0
   80e86:	701a      	strb	r2, [r3, #0]
					
				for (i = 0; i < 10; i ++)
   80e88:	2300      	movs	r3, #0
   80e8a:	73bb      	strb	r3, [r7, #14]
   80e8c:	e006      	b.n	80e9c <USART0_Handler+0xdc>
				{
					command_array[i] = 0;
   80e8e:	7bbb      	ldrb	r3, [r7, #14]
   80e90:	4a16      	ldr	r2, [pc, #88]	; (80eec <USART0_Handler+0x12c>)
   80e92:	2100      	movs	r1, #0
   80e94:	54d1      	strb	r1, [r2, r3]
				check_command();
				command_end = 0;
				command_start = 0;
				array_pos = 0;
					
				for (i = 0; i < 10; i ++)
   80e96:	7bbb      	ldrb	r3, [r7, #14]
   80e98:	3301      	adds	r3, #1
   80e9a:	73bb      	strb	r3, [r7, #14]
   80e9c:	7bbb      	ldrb	r3, [r7, #14]
   80e9e:	2b09      	cmp	r3, #9
   80ea0:	d9f5      	bls.n	80e8e <USART0_Handler+0xce>
				{
					command_array[i] = 0;
				}
				command_completed = 1;
   80ea2:	2301      	movs	r3, #1
   80ea4:	73fb      	strb	r3, [r7, #15]
			}

			if (!command_completed)				
   80ea6:	7bfb      	ldrb	r3, [r7, #15]
   80ea8:	2b00      	cmp	r3, #0
   80eaa:	d105      	bne.n	80eb8 <USART0_Handler+0xf8>
				usart_write(BOARD_USART, gs_ul_read_buffer);
   80eac:	4b09      	ldr	r3, [pc, #36]	; (80ed4 <USART0_Handler+0x114>)
   80eae:	681b      	ldr	r3, [r3, #0]
   80eb0:	4804      	ldr	r0, [pc, #16]	; (80ec4 <USART0_Handler+0x104>)
   80eb2:	4619      	mov	r1, r3
   80eb4:	4b0f      	ldr	r3, [pc, #60]	; (80ef4 <USART0_Handler+0x134>)
   80eb6:	4798      	blx	r3
					
			command_completed = 0;
   80eb8:	2300      	movs	r3, #0
   80eba:	73fb      	strb	r3, [r7, #15]
				
		}
	}
}
   80ebc:	3710      	adds	r7, #16
   80ebe:	46bd      	mov	sp, r7
   80ec0:	bd80      	pop	{r7, pc}
   80ec2:	bf00      	nop
   80ec4:	40098000 	.word	0x40098000
   80ec8:	000829f1 	.word	0x000829f1
   80ecc:	00082185 	.word	0x00082185
   80ed0:	2007046c 	.word	0x2007046c
   80ed4:	20070468 	.word	0x20070468
   80ed8:	00082a75 	.word	0x00082a75
   80edc:	2007046d 	.word	0x2007046d
   80ee0:	2007046e 	.word	0x2007046e
   80ee4:	2007047c 	.word	0x2007047c
   80ee8:	cccccccd 	.word	0xcccccccd
   80eec:	20070470 	.word	0x20070470
   80ef0:	00080ef9 	.word	0x00080ef9
   80ef4:	00082a41 	.word	0x00082a41

00080ef8 <check_command>:
/*		which was sent via a computer terminal and determine what		*/
/*		action to take.													*/
/************************************************************************/

void check_command(void)
{	
   80ef8:	b580      	push	{r7, lr}
   80efa:	b08a      	sub	sp, #40	; 0x28
   80efc:	af00      	add	r7, sp, #0
	uint32_t character = 0;
   80efe:	2300      	movs	r3, #0
   80f00:	623b      	str	r3, [r7, #32]
	uint32_t sign = 1;
   80f02:	2301      	movs	r3, #1
   80f04:	61fb      	str	r3, [r7, #28]
	
	char* message_array;
	
	char* check_array;
	
	uint8_t i = 0;
   80f06:	2300      	movs	r3, #0
   80f08:	76fb      	strb	r3, [r7, #27]
	uint8_t hk = 1;
   80f0a:	2301      	movs	r3, #1
   80f0c:	76bb      	strb	r3, [r7, #26]
	uint8_t sad = 1;
   80f0e:	2301      	movs	r3, #1
   80f10:	767b      	strb	r3, [r7, #25]
	uint8_t msg = 1;
   80f12:	2301      	movs	r3, #1
   80f14:	763b      	strb	r3, [r7, #24]
	
	uint32_t temp = 295.0;
   80f16:	f240 1327 	movw	r3, #295	; 0x127
   80f1a:	607b      	str	r3, [r7, #4]
	
	uint32_t temp1;
	
	uint8_t temp_int = 25, upper, lower;
   80f1c:	2319      	movs	r3, #25
   80f1e:	75fb      	strb	r3, [r7, #23]
	
	// Housekeeping requested. "hk" was sent.
	check_array = "hk";
   80f20:	4b7e      	ldr	r3, [pc, #504]	; (8111c <check_command+0x224>)
   80f22:	613b      	str	r3, [r7, #16]
	
	hk =  check_string(check_array);
   80f24:	6938      	ldr	r0, [r7, #16]
   80f26:	4b7e      	ldr	r3, [pc, #504]	; (81120 <check_command+0x228>)
   80f28:	4798      	blx	r3
   80f2a:	4603      	mov	r3, r0
   80f2c:	76bb      	strb	r3, [r7, #26]
	
	check_array = "i am sad";
   80f2e:	4b7d      	ldr	r3, [pc, #500]	; (81124 <check_command+0x22c>)
   80f30:	613b      	str	r3, [r7, #16]
	
	sad = check_string(check_array);
   80f32:	6938      	ldr	r0, [r7, #16]
   80f34:	4b7a      	ldr	r3, [pc, #488]	; (81120 <check_command+0x228>)
   80f36:	4798      	blx	r3
   80f38:	4603      	mov	r3, r0
   80f3a:	767b      	strb	r3, [r7, #25]
	
	check_array = "msg";
   80f3c:	4b7a      	ldr	r3, [pc, #488]	; (81128 <check_command+0x230>)
   80f3e:	613b      	str	r3, [r7, #16]
	
	msg = check_string(check_array);
   80f40:	6938      	ldr	r0, [r7, #16]
   80f42:	4b77      	ldr	r3, [pc, #476]	; (81120 <check_command+0x228>)
   80f44:	4798      	blx	r3
   80f46:	4603      	mov	r3, r0
   80f48:	763b      	strb	r3, [r7, #24]
	
	if (hk == 1)
   80f4a:	7ebb      	ldrb	r3, [r7, #26]
   80f4c:	2b01      	cmp	r3, #1
   80f4e:	f040 8088 	bne.w	81062 <check_command+0x16a>
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
   80f52:	4b76      	ldr	r3, [pc, #472]	; (8112c <check_command+0x234>)
   80f54:	627b      	str	r3, [r7, #36]	; 0x24
				
		while(*message_array)
   80f56:	e00d      	b.n	80f74 <check_command+0x7c>
		{
			character = *message_array;
   80f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f5a:	781b      	ldrb	r3, [r3, #0]
   80f5c:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80f5e:	bf00      	nop
   80f60:	4873      	ldr	r0, [pc, #460]	; (81130 <check_command+0x238>)
   80f62:	6a39      	ldr	r1, [r7, #32]
   80f64:	4b73      	ldr	r3, [pc, #460]	; (81134 <check_command+0x23c>)
   80f66:	4798      	blx	r3
   80f68:	4603      	mov	r3, r0
   80f6a:	2b00      	cmp	r3, #0
   80f6c:	d1f8      	bne.n	80f60 <check_command+0x68>
			
			message_array++;
   80f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f70:	3301      	adds	r3, #1
   80f72:	627b      	str	r3, [r7, #36]	; 0x24
	if (hk == 1)
	{	
		
		message_array = "\n\rSYSTEMS ARE NOMINAL, SIR.\n\r";
				
		while(*message_array)
   80f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f76:	781b      	ldrb	r3, [r3, #0]
   80f78:	2b00      	cmp	r3, #0
   80f7a:	d1ed      	bne.n	80f58 <check_command+0x60>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
   80f7c:	4b6e      	ldr	r3, [pc, #440]	; (81138 <check_command+0x240>)
   80f7e:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   80f80:	e00d      	b.n	80f9e <check_command+0xa6>
		{
			character = *message_array;
   80f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f84:	781b      	ldrb	r3, [r3, #0]
   80f86:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   80f88:	bf00      	nop
   80f8a:	4869      	ldr	r0, [pc, #420]	; (81130 <check_command+0x238>)
   80f8c:	6a39      	ldr	r1, [r7, #32]
   80f8e:	4b69      	ldr	r3, [pc, #420]	; (81134 <check_command+0x23c>)
   80f90:	4798      	blx	r3
   80f92:	4603      	mov	r3, r0
   80f94:	2b00      	cmp	r3, #0
   80f96:	d1f8      	bne.n	80f8a <check_command+0x92>
			
			message_array++;
   80f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80f9a:	3301      	adds	r3, #1
   80f9c:	627b      	str	r3, [r7, #36]	; 0x24
			message_array++;
		}
		
		message_array = "\n\rSUBSYSTEM TEMPERATURE IS ";
		
		while(*message_array)
   80f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80fa0:	781b      	ldrb	r3, [r3, #0]
   80fa2:	2b00      	cmp	r3, #0
   80fa4:	d1ed      	bne.n	80f82 <check_command+0x8a>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp = glob_stored_data[0];						// This is the ADC value retrieved from the subsystem.
   80fa6:	4b65      	ldr	r3, [pc, #404]	; (8113c <check_command+0x244>)
   80fa8:	681b      	ldr	r3, [r3, #0]
   80faa:	607b      	str	r3, [r7, #4]
			
		sign = convert_to_temp(&temp);						// Temperature returned is in degrees Celsius.
   80fac:	1d3b      	adds	r3, r7, #4
   80fae:	4618      	mov	r0, r3
   80fb0:	4b63      	ldr	r3, [pc, #396]	; (81140 <check_command+0x248>)
   80fb2:	4798      	blx	r3
   80fb4:	61f8      	str	r0, [r7, #28]

		temp_int = (uint8_t)temp;						// Convert the float to an 8-bit integer.
   80fb6:	687b      	ldr	r3, [r7, #4]
   80fb8:	75fb      	strb	r3, [r7, #23]
		
		temp_int = convert_to_bcd(temp_int);				// Convert the temperature into a BCD.
   80fba:	7dfb      	ldrb	r3, [r7, #23]
   80fbc:	4618      	mov	r0, r3
   80fbe:	4b61      	ldr	r3, [pc, #388]	; (81144 <check_command+0x24c>)
   80fc0:	4798      	blx	r3
   80fc2:	4603      	mov	r3, r0
   80fc4:	75fb      	strb	r3, [r7, #23]
		
		lower = temp_int << 4;
   80fc6:	7dfb      	ldrb	r3, [r7, #23]
   80fc8:	011b      	lsls	r3, r3, #4
   80fca:	73fb      	strb	r3, [r7, #15]
		lower = lower >> 4;
   80fcc:	7bfb      	ldrb	r3, [r7, #15]
   80fce:	091b      	lsrs	r3, r3, #4
   80fd0:	73fb      	strb	r3, [r7, #15]
		upper = temp_int >> 4;
   80fd2:	7dfb      	ldrb	r3, [r7, #23]
   80fd4:	091b      	lsrs	r3, r3, #4
   80fd6:	73bb      	strb	r3, [r7, #14]
		
		lower += (uint8_t)0x30;								// Convert to ASCII form.
   80fd8:	7bfb      	ldrb	r3, [r7, #15]
   80fda:	3330      	adds	r3, #48	; 0x30
   80fdc:	73fb      	strb	r3, [r7, #15]
		upper += (uint8_t)0x30;
   80fde:	7bbb      	ldrb	r3, [r7, #14]
   80fe0:	3330      	adds	r3, #48	; 0x30
   80fe2:	73bb      	strb	r3, [r7, #14]
		
		if(sign)
   80fe4:	69fb      	ldr	r3, [r7, #28]
   80fe6:	2b00      	cmp	r3, #0
   80fe8:	d00a      	beq.n	81000 <check_command+0x108>
		{
			character = 0x2B;
   80fea:	232b      	movs	r3, #43	; 0x2b
   80fec:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "+"
   80fee:	bf00      	nop
   80ff0:	484f      	ldr	r0, [pc, #316]	; (81130 <check_command+0x238>)
   80ff2:	6a39      	ldr	r1, [r7, #32]
   80ff4:	4b4f      	ldr	r3, [pc, #316]	; (81134 <check_command+0x23c>)
   80ff6:	4798      	blx	r3
   80ff8:	4603      	mov	r3, r0
   80ffa:	2b00      	cmp	r3, #0
   80ffc:	d1f8      	bne.n	80ff0 <check_command+0xf8>
		{
			character = 0x2D;
			while(usart_write(BOARD_USART, character));				// Send "-"
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   80ffe:	e009      	b.n	81014 <check_command+0x11c>
			character = 0x2B;
			while(usart_write(BOARD_USART, character));				// Send "+"
		}
		else
		{
			character = 0x2D;
   81000:	232d      	movs	r3, #45	; 0x2d
   81002:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));				// Send "-"
   81004:	bf00      	nop
   81006:	484a      	ldr	r0, [pc, #296]	; (81130 <check_command+0x238>)
   81008:	6a39      	ldr	r1, [r7, #32]
   8100a:	4b4a      	ldr	r3, [pc, #296]	; (81134 <check_command+0x23c>)
   8100c:	4798      	blx	r3
   8100e:	4603      	mov	r3, r0
   81010:	2b00      	cmp	r3, #0
   81012:	d1f8      	bne.n	81006 <check_command+0x10e>
		}
	
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
   81014:	bf00      	nop
   81016:	7bbb      	ldrb	r3, [r7, #14]
   81018:	4845      	ldr	r0, [pc, #276]	; (81130 <check_command+0x238>)
   8101a:	4619      	mov	r1, r3
   8101c:	4b45      	ldr	r3, [pc, #276]	; (81134 <check_command+0x23c>)
   8101e:	4798      	blx	r3
   81020:	4603      	mov	r3, r0
   81022:	2b00      	cmp	r3, #0
   81024:	d1f7      	bne.n	81016 <check_command+0x11e>
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
   81026:	bf00      	nop
   81028:	7bfb      	ldrb	r3, [r7, #15]
   8102a:	4841      	ldr	r0, [pc, #260]	; (81130 <check_command+0x238>)
   8102c:	4619      	mov	r1, r3
   8102e:	4b41      	ldr	r3, [pc, #260]	; (81134 <check_command+0x23c>)
   81030:	4798      	blx	r3
   81032:	4603      	mov	r3, r0
   81034:	2b00      	cmp	r3, #0
   81036:	d1f7      	bne.n	81028 <check_command+0x130>
		
		message_array = " C\n\r";							// Finish the sentence.
   81038:	4b43      	ldr	r3, [pc, #268]	; (81148 <check_command+0x250>)
   8103a:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   8103c:	e00d      	b.n	8105a <check_command+0x162>
		{
			character = *message_array;
   8103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81040:	781b      	ldrb	r3, [r3, #0]
   81042:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81044:	bf00      	nop
   81046:	483a      	ldr	r0, [pc, #232]	; (81130 <check_command+0x238>)
   81048:	6a39      	ldr	r1, [r7, #32]
   8104a:	4b3a      	ldr	r3, [pc, #232]	; (81134 <check_command+0x23c>)
   8104c:	4798      	blx	r3
   8104e:	4603      	mov	r3, r0
   81050:	2b00      	cmp	r3, #0
   81052:	d1f8      	bne.n	81046 <check_command+0x14e>
			
			message_array++;
   81054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81056:	3301      	adds	r3, #1
   81058:	627b      	str	r3, [r7, #36]	; 0x24
		while(usart_write(BOARD_USART, upper));				// Send the upper digit.
		while(usart_write(BOARD_USART, lower));				// Send the lower digit.			
		
		message_array = " C\n\r";							// Finish the sentence.

		while(*message_array)
   8105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8105c:	781b      	ldrb	r3, [r3, #0]
   8105e:	2b00      	cmp	r3, #0
   81060:	d1ed      	bne.n	8103e <check_command+0x146>
			
			message_array++;
		}	
	}
	
	if (sad == 1)
   81062:	7e7b      	ldrb	r3, [r7, #25]
   81064:	2b01      	cmp	r3, #1
   81066:	d114      	bne.n	81092 <check_command+0x19a>
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
   81068:	4b38      	ldr	r3, [pc, #224]	; (8114c <check_command+0x254>)
   8106a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   8106c:	e00d      	b.n	8108a <check_command+0x192>
		{
			character = *message_array;
   8106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81070:	781b      	ldrb	r3, [r3, #0]
   81072:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   81074:	bf00      	nop
   81076:	482e      	ldr	r0, [pc, #184]	; (81130 <check_command+0x238>)
   81078:	6a39      	ldr	r1, [r7, #32]
   8107a:	4b2e      	ldr	r3, [pc, #184]	; (81134 <check_command+0x23c>)
   8107c:	4798      	blx	r3
   8107e:	4603      	mov	r3, r0
   81080:	2b00      	cmp	r3, #0
   81082:	d1f8      	bne.n	81076 <check_command+0x17e>
			
			message_array++;
   81084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81086:	3301      	adds	r3, #1
   81088:	627b      	str	r3, [r7, #36]	; 0x24
	if (sad == 1)
	{	
		
		message_array = "\n\rDO YOU WANT A BISCUIT?\n\r";
		
		while(*message_array)
   8108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8108c:	781b      	ldrb	r3, [r3, #0]
   8108e:	2b00      	cmp	r3, #0
   81090:	d1ed      	bne.n	8106e <check_command+0x176>
			
			message_array++;
		}
	}
	
	if (msg == 1)
   81092:	7e3b      	ldrb	r3, [r7, #24]
   81094:	2b01      	cmp	r3, #1
   81096:	d13d      	bne.n	81114 <check_command+0x21c>
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
   81098:	4b2d      	ldr	r3, [pc, #180]	; (81150 <check_command+0x258>)
   8109a:	627b      	str	r3, [r7, #36]	; 0x24
		
		while(*message_array)
   8109c:	e00d      	b.n	810ba <check_command+0x1c2>
		{
			character = *message_array;
   8109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810a0:	781b      	ldrb	r3, [r3, #0]
   810a2:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   810a4:	bf00      	nop
   810a6:	4822      	ldr	r0, [pc, #136]	; (81130 <check_command+0x238>)
   810a8:	6a39      	ldr	r1, [r7, #32]
   810aa:	4b22      	ldr	r3, [pc, #136]	; (81134 <check_command+0x23c>)
   810ac:	4798      	blx	r3
   810ae:	4603      	mov	r3, r0
   810b0:	2b00      	cmp	r3, #0
   810b2:	d1f8      	bne.n	810a6 <check_command+0x1ae>
			
			message_array++;
   810b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810b6:	3301      	adds	r3, #1
   810b8:	627b      	str	r3, [r7, #36]	; 0x24
	if (msg == 1)
	{
		
		message_array = "\n\rA MESSAGE WAS RECEIVED FROM COMS: ";
		
		while(*message_array)
   810ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810bc:	781b      	ldrb	r3, [r3, #0]
   810be:	2b00      	cmp	r3, #0
   810c0:	d1ed      	bne.n	8109e <check_command+0x1a6>
			while(usart_write(BOARD_USART, character));	// Send the character.
			
			message_array++;
		}
		
		temp1 = (uint32_t)(glob_stored_message[0]);	// This is the ADC value retrieved from the subsystem.
   810c2:	4b24      	ldr	r3, [pc, #144]	; (81154 <check_command+0x25c>)
   810c4:	681b      	ldr	r3, [r3, #0]
   810c6:	60bb      	str	r3, [r7, #8]
		temp1 = temp1 & (uint32_t)0x000000FF;
   810c8:	68bb      	ldr	r3, [r7, #8]
   810ca:	b2db      	uxtb	r3, r3
   810cc:	60bb      	str	r3, [r7, #8]
		
		if ( (temp1 > 0x40) || (temp1 < 0x5B) )
   810ce:	68bb      	ldr	r3, [r7, #8]
   810d0:	2b40      	cmp	r3, #64	; 0x40
   810d2:	d802      	bhi.n	810da <check_command+0x1e2>
   810d4:	68bb      	ldr	r3, [r7, #8]
   810d6:	2b5a      	cmp	r3, #90	; 0x5a
   810d8:	d807      	bhi.n	810ea <check_command+0x1f2>
		{
			while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.		
   810da:	bf00      	nop
   810dc:	4814      	ldr	r0, [pc, #80]	; (81130 <check_command+0x238>)
   810de:	68b9      	ldr	r1, [r7, #8]
   810e0:	4b14      	ldr	r3, [pc, #80]	; (81134 <check_command+0x23c>)
   810e2:	4798      	blx	r3
   810e4:	4603      	mov	r3, r0
   810e6:	2b00      	cmp	r3, #0
   810e8:	d1f8      	bne.n	810dc <check_command+0x1e4>
		//if ( (temp1 > 0x20) || (temp1 < 0x5B) )
		//{
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.
   810ea:	4b1b      	ldr	r3, [pc, #108]	; (81158 <check_command+0x260>)
   810ec:	627b      	str	r3, [r7, #36]	; 0x24

		while(*message_array)
   810ee:	e00d      	b.n	8110c <check_command+0x214>
		{
			character = *message_array;
   810f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   810f2:	781b      	ldrb	r3, [r3, #0]
   810f4:	623b      	str	r3, [r7, #32]
			while(usart_write(BOARD_USART, character));	// Send the character.
   810f6:	bf00      	nop
   810f8:	480d      	ldr	r0, [pc, #52]	; (81130 <check_command+0x238>)
   810fa:	6a39      	ldr	r1, [r7, #32]
   810fc:	4b0d      	ldr	r3, [pc, #52]	; (81134 <check_command+0x23c>)
   810fe:	4798      	blx	r3
   81100:	4603      	mov	r3, r0
   81102:	2b00      	cmp	r3, #0
   81104:	d1f8      	bne.n	810f8 <check_command+0x200>
			
			message_array++;
   81106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   81108:	3301      	adds	r3, #1
   8110a:	627b      	str	r3, [r7, #36]	; 0x24
			//while(usart_write(BOARD_USART, temp1));				// Send the ASCII character.
		//}
		
		message_array = "\n\r";								// Finish the sentence.

		while(*message_array)
   8110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   8110e:	781b      	ldrb	r3, [r3, #0]
   81110:	2b00      	cmp	r3, #0
   81112:	d1ed      	bne.n	810f0 <check_command+0x1f8>
			
			message_array++;
		}
	}
	
	return;
   81114:	bf00      	nop
}
   81116:	3728      	adds	r7, #40	; 0x28
   81118:	46bd      	mov	sp, r7
   8111a:	bd80      	pop	{r7, pc}
   8111c:	00086f30 	.word	0x00086f30
   81120:	0008115d 	.word	0x0008115d
   81124:	00086f34 	.word	0x00086f34
   81128:	00086f40 	.word	0x00086f40
   8112c:	00086f44 	.word	0x00086f44
   81130:	40098000 	.word	0x40098000
   81134:	00082a41 	.word	0x00082a41
   81138:	00086f64 	.word	0x00086f64
   8113c:	2007a658 	.word	0x2007a658
   81140:	000811b9 	.word	0x000811b9
   81144:	00081251 	.word	0x00081251
   81148:	00086f80 	.word	0x00086f80
   8114c:	00086f88 	.word	0x00086f88
   81150:	00086fa4 	.word	0x00086fa4
   81154:	2007a730 	.word	0x2007a730
   81158:	00086fcc 	.word	0x00086fcc

0008115c <check_string>:
/*		is equal to the array of chars in command_array (which is		*/
/*		defined globally.												*/	
/************************************************************************/

uint8_t check_string(char* str_to_check)
{
   8115c:	b480      	push	{r7}
   8115e:	b085      	sub	sp, #20
   81160:	af00      	add	r7, sp, #0
   81162:	6078      	str	r0, [r7, #4]
	uint8_t	i = 0;
   81164:	2300      	movs	r3, #0
   81166:	73fb      	strb	r3, [r7, #15]
	uint8_t ret_val = 1;
   81168:	2301      	movs	r3, #1
   8116a:	73bb      	strb	r3, [r7, #14]
	
	char* temp_str;
	
	temp_str = str_to_check;
   8116c:	687b      	ldr	r3, [r7, #4]
   8116e:	60bb      	str	r3, [r7, #8]
	
	for (i = 0; i < 10; i++)
   81170:	2300      	movs	r3, #0
   81172:	73fb      	strb	r3, [r7, #15]
   81174:	e014      	b.n	811a0 <check_string+0x44>
	{
		if (*temp_str != command_array[i])
   81176:	68bb      	ldr	r3, [r7, #8]
   81178:	781a      	ldrb	r2, [r3, #0]
   8117a:	7bfb      	ldrb	r3, [r7, #15]
   8117c:	490d      	ldr	r1, [pc, #52]	; (811b4 <check_string+0x58>)
   8117e:	5ccb      	ldrb	r3, [r1, r3]
   81180:	429a      	cmp	r2, r3
   81182:	d002      	beq.n	8118a <check_string+0x2e>
		{
			ret_val = 0;
   81184:	2300      	movs	r3, #0
   81186:	73bb      	strb	r3, [r7, #14]
			break;
   81188:	e00d      	b.n	811a6 <check_string+0x4a>
		}
		if (!*temp_str)
   8118a:	68bb      	ldr	r3, [r7, #8]
   8118c:	781b      	ldrb	r3, [r3, #0]
   8118e:	2b00      	cmp	r3, #0
   81190:	d100      	bne.n	81194 <check_string+0x38>
			break;
   81192:	e008      	b.n	811a6 <check_string+0x4a>
			
		temp_str++;
   81194:	68bb      	ldr	r3, [r7, #8]
   81196:	3301      	adds	r3, #1
   81198:	60bb      	str	r3, [r7, #8]
	
	char* temp_str;
	
	temp_str = str_to_check;
	
	for (i = 0; i < 10; i++)
   8119a:	7bfb      	ldrb	r3, [r7, #15]
   8119c:	3301      	adds	r3, #1
   8119e:	73fb      	strb	r3, [r7, #15]
   811a0:	7bfb      	ldrb	r3, [r7, #15]
   811a2:	2b09      	cmp	r3, #9
   811a4:	d9e7      	bls.n	81176 <check_string+0x1a>
			break;
			
		temp_str++;
	}
	
	return ret_val;
   811a6:	7bbb      	ldrb	r3, [r7, #14]
}
   811a8:	4618      	mov	r0, r3
   811aa:	3714      	adds	r7, #20
   811ac:	46bd      	mov	sp, r7
   811ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   811b2:	4770      	bx	lr
   811b4:	20070470 	.word	0x20070470

000811b8 <convert_to_temp>:
/*		It then takes this raw reading and converts it into a positive	*/
/*		temperature reading. The function will return a 1 if the temp	*/
/*		was nonnegative, and 0 otherwise.								*/
/************************************************************************/
uint32_t convert_to_temp(uint32_t* temp)
{
   811b8:	b580      	push	{r7, lr}
   811ba:	b084      	sub	sp, #16
   811bc:	af00      	add	r7, sp, #0
   811be:	6078      	str	r0, [r7, #4]
	uint32_t temperature, remainder;
	float t = 0.0;
   811c0:	f04f 0300 	mov.w	r3, #0
   811c4:	60fb      	str	r3, [r7, #12]
	
	temperature = *temp;
   811c6:	687b      	ldr	r3, [r7, #4]
   811c8:	681b      	ldr	r3, [r3, #0]
   811ca:	60bb      	str	r3, [r7, #8]
	
	temperature = temperature >> 2;
   811cc:	68bb      	ldr	r3, [r7, #8]
   811ce:	089b      	lsrs	r3, r3, #2
   811d0:	60bb      	str	r3, [r7, #8]
	
	t = (float)temperature;
   811d2:	4b1b      	ldr	r3, [pc, #108]	; (81240 <convert_to_temp+0x88>)
   811d4:	68b8      	ldr	r0, [r7, #8]
   811d6:	4798      	blx	r3
   811d8:	4603      	mov	r3, r0
   811da:	60fb      	str	r3, [r7, #12]
	
	t *= 0.03125;
   811dc:	4b19      	ldr	r3, [pc, #100]	; (81244 <convert_to_temp+0x8c>)
   811de:	68f8      	ldr	r0, [r7, #12]
   811e0:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
   811e4:	4798      	blx	r3
   811e6:	4603      	mov	r3, r0
   811e8:	60fb      	str	r3, [r7, #12]
	
	t = t / (float)1.0;
	
	if (t >= (float)0.0)
   811ea:	4b17      	ldr	r3, [pc, #92]	; (81248 <convert_to_temp+0x90>)
   811ec:	68f8      	ldr	r0, [r7, #12]
   811ee:	f04f 0100 	mov.w	r1, #0
   811f2:	4798      	blx	r3
   811f4:	4603      	mov	r3, r0
   811f6:	2b00      	cmp	r3, #0
   811f8:	d009      	beq.n	8120e <convert_to_temp+0x56>
	{
		temperature = (uint32_t)t;
   811fa:	4b14      	ldr	r3, [pc, #80]	; (8124c <convert_to_temp+0x94>)
   811fc:	68f8      	ldr	r0, [r7, #12]
   811fe:	4798      	blx	r3
   81200:	4603      	mov	r3, r0
   81202:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   81204:	687b      	ldr	r3, [r7, #4]
   81206:	68ba      	ldr	r2, [r7, #8]
   81208:	601a      	str	r2, [r3, #0]
		return 1;	
   8120a:	2301      	movs	r3, #1
   8120c:	e013      	b.n	81236 <convert_to_temp+0x7e>
	}
	else
	{	
		temperature *= (float)-1.0;
   8120e:	4b0c      	ldr	r3, [pc, #48]	; (81240 <convert_to_temp+0x88>)
   81210:	68b8      	ldr	r0, [r7, #8]
   81212:	4798      	blx	r3
   81214:	4603      	mov	r3, r0
   81216:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
   8121a:	4b0c      	ldr	r3, [pc, #48]	; (8124c <convert_to_temp+0x94>)
   8121c:	4610      	mov	r0, r2
   8121e:	4798      	blx	r3
   81220:	4603      	mov	r3, r0
   81222:	60bb      	str	r3, [r7, #8]
		temperature = (uint32_t)t;
   81224:	4b09      	ldr	r3, [pc, #36]	; (8124c <convert_to_temp+0x94>)
   81226:	68f8      	ldr	r0, [r7, #12]
   81228:	4798      	blx	r3
   8122a:	4603      	mov	r3, r0
   8122c:	60bb      	str	r3, [r7, #8]
		*temp = temperature;
   8122e:	687b      	ldr	r3, [r7, #4]
   81230:	68ba      	ldr	r2, [r7, #8]
   81232:	601a      	str	r2, [r3, #0]
		return 0;
   81234:	2300      	movs	r3, #0
	}
}
   81236:	4618      	mov	r0, r3
   81238:	3710      	adds	r7, #16
   8123a:	46bd      	mov	sp, r7
   8123c:	bd80      	pop	{r7, pc}
   8123e:	bf00      	nop
   81240:	00086771 	.word	0x00086771
   81244:	00086821 	.word	0x00086821
   81248:	00086b85 	.word	0x00086b85
   8124c:	00086bad 	.word	0x00086bad

00081250 <convert_to_bcd>:
/*		The sole purpose of this helper function is to take an integer	*/
/*		and convert it into BCD form (upper four bits = 'tens' & the	*/
/*		lower four bits = 'ones'.										*/
/************************************************************************/
uint8_t convert_to_bcd(uint8_t temp)
{
   81250:	b480      	push	{r7}
   81252:	b085      	sub	sp, #20
   81254:	af00      	add	r7, sp, #0
   81256:	4603      	mov	r3, r0
   81258:	71fb      	strb	r3, [r7, #7]
	uint8_t upper = 0, lower = 0, ret_val = 0;
   8125a:	2300      	movs	r3, #0
   8125c:	73fb      	strb	r3, [r7, #15]
   8125e:	2300      	movs	r3, #0
   81260:	73bb      	strb	r3, [r7, #14]
   81262:	2300      	movs	r3, #0
   81264:	737b      	strb	r3, [r7, #13]
	
	if(temp > 9)
   81266:	79fb      	ldrb	r3, [r7, #7]
   81268:	2b09      	cmp	r3, #9
   8126a:	d919      	bls.n	812a0 <convert_to_bcd+0x50>
	{
		lower = temp % 10;
   8126c:	79fa      	ldrb	r2, [r7, #7]
   8126e:	4b10      	ldr	r3, [pc, #64]	; (812b0 <convert_to_bcd+0x60>)
   81270:	fba3 1302 	umull	r1, r3, r3, r2
   81274:	08d9      	lsrs	r1, r3, #3
   81276:	460b      	mov	r3, r1
   81278:	009b      	lsls	r3, r3, #2
   8127a:	440b      	add	r3, r1
   8127c:	005b      	lsls	r3, r3, #1
   8127e:	1ad3      	subs	r3, r2, r3
   81280:	73bb      	strb	r3, [r7, #14]
		upper = temp / 10;
   81282:	79fa      	ldrb	r2, [r7, #7]
   81284:	4b0a      	ldr	r3, [pc, #40]	; (812b0 <convert_to_bcd+0x60>)
   81286:	fba3 1302 	umull	r1, r3, r3, r2
   8128a:	08db      	lsrs	r3, r3, #3
   8128c:	73fb      	strb	r3, [r7, #15]
		
		upper = upper << 4;
   8128e:	7bfb      	ldrb	r3, [r7, #15]
   81290:	011b      	lsls	r3, r3, #4
   81292:	73fb      	strb	r3, [r7, #15]
		
		ret_val = upper | lower;
   81294:	7bfa      	ldrb	r2, [r7, #15]
   81296:	7bbb      	ldrb	r3, [r7, #14]
   81298:	4313      	orrs	r3, r2
   8129a:	737b      	strb	r3, [r7, #13]
			
		return ret_val;
   8129c:	7b7b      	ldrb	r3, [r7, #13]
   8129e:	e000      	b.n	812a2 <convert_to_bcd+0x52>
	}
	else
		return temp;
   812a0:	79fb      	ldrb	r3, [r7, #7]
}
   812a2:	4618      	mov	r0, r3
   812a4:	3714      	adds	r7, #20
   812a6:	46bd      	mov	sp, r7
   812a8:	f85d 7b04 	ldr.w	r7, [sp], #4
   812ac:	4770      	bx	lr
   812ae:	bf00      	nop
   812b0:	cccccccd 	.word	0xcccccccd

000812b4 <configure_usart>:
 * \brief Configure USART in normal (serial rs232) mode, asynchronous,
 * 8 bits, 1 stop bit, no parity, 115200 bauds and enable its transmitter
 * and receiver.
 */
void configure_usart(void)
{
   812b4:	b5b0      	push	{r4, r5, r7, lr}
   812b6:	b086      	sub	sp, #24
   812b8:	af00      	add	r7, sp, #0
	const sam_usart_opt_t usart_console_settings = {
   812ba:	4b13      	ldr	r3, [pc, #76]	; (81308 <configure_usart+0x54>)
   812bc:	463c      	mov	r4, r7
   812be:	461d      	mov	r5, r3
   812c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   812c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   812c4:	e895 0003 	ldmia.w	r5, {r0, r1}
   812c8:	e884 0003 	stmia.w	r4, {r0, r1}
		/* This field is only used in IrDA mode. */
		0
	};

	/* Enable the peripheral clock in the PMC. */
	sysclk_enable_peripheral_clock(BOARD_ID_USART);
   812cc:	2011      	movs	r0, #17
   812ce:	4b0f      	ldr	r3, [pc, #60]	; (8130c <configure_usart+0x58>)
   812d0:	4798      	blx	r3

	/* Configure USART in serial mode. */
	usart_init_rs232(BOARD_USART, &usart_console_settings,
   812d2:	4b0f      	ldr	r3, [pc, #60]	; (81310 <configure_usart+0x5c>)
   812d4:	4798      	blx	r3
   812d6:	4603      	mov	r3, r0
   812d8:	463a      	mov	r2, r7
   812da:	480e      	ldr	r0, [pc, #56]	; (81314 <configure_usart+0x60>)
   812dc:	4611      	mov	r1, r2
   812de:	461a      	mov	r2, r3
   812e0:	4b0d      	ldr	r3, [pc, #52]	; (81318 <configure_usart+0x64>)
   812e2:	4798      	blx	r3
			sysclk_get_cpu_hz());

	/* Disable all the interrupts. */
	usart_disable_interrupt(BOARD_USART, ALL_INTERRUPT_MASK);
   812e4:	480b      	ldr	r0, [pc, #44]	; (81314 <configure_usart+0x60>)
   812e6:	f04f 31ff 	mov.w	r1, #4294967295
   812ea:	4b0c      	ldr	r3, [pc, #48]	; (8131c <configure_usart+0x68>)
   812ec:	4798      	blx	r3

	/* Enable the receiver and transmitter. */
	usart_enable_tx(BOARD_USART);
   812ee:	4809      	ldr	r0, [pc, #36]	; (81314 <configure_usart+0x60>)
   812f0:	4b0b      	ldr	r3, [pc, #44]	; (81320 <configure_usart+0x6c>)
   812f2:	4798      	blx	r3
	usart_enable_rx(BOARD_USART);
   812f4:	4807      	ldr	r0, [pc, #28]	; (81314 <configure_usart+0x60>)
   812f6:	4b0b      	ldr	r3, [pc, #44]	; (81324 <configure_usart+0x70>)
   812f8:	4798      	blx	r3

	/* Configure and enable interrupt of USART. */
	NVIC_EnableIRQ(USART_IRQn);
   812fa:	2011      	movs	r0, #17
   812fc:	4b0a      	ldr	r3, [pc, #40]	; (81328 <configure_usart+0x74>)
   812fe:	4798      	blx	r3
}
   81300:	3718      	adds	r7, #24
   81302:	46bd      	mov	sp, r7
   81304:	bdb0      	pop	{r4, r5, r7, pc}
   81306:	bf00      	nop
   81308:	00086fd0 	.word	0x00086fd0
   8130c:	00080da9 	.word	0x00080da9
   81310:	00080d95 	.word	0x00080d95
   81314:	40098000 	.word	0x40098000
   81318:	000828d5 	.word	0x000828d5
   8131c:	000829d5 	.word	0x000829d5
   81320:	00082959 	.word	0x00082959
   81324:	00082989 	.word	0x00082989
   81328:	00080cd5 	.word	0x00080cd5

0008132c <usart_initialize>:
 * \brief Application entry point for usart_serial example.
 *
 * \return Unused (ANSI-C compatibility).
 */
void usart_initialize(void)
{
   8132c:	b580      	push	{r7, lr}
   8132e:	b084      	sub	sp, #16
   81330:	af00      	add	r7, sp, #0
	uint8_t uc_char;
	uint8_t uc_flag;
	uint8_t i = 0;
   81332:	2300      	movs	r3, #0
   81334:	73fb      	strb	r3, [r7, #15]
	char* message_array;
	uint32_t character = 0;
   81336:	2300      	movs	r3, #0
   81338:	607b      	str	r3, [r7, #4]

	/* Configure USART. */
	configure_usart();
   8133a:	4b1a      	ldr	r3, [pc, #104]	; (813a4 <usart_initialize+0x78>)
   8133c:	4798      	blx	r3

	gs_uc_trans_mode = BYTE_TRANSFER;
   8133e:	4b1a      	ldr	r3, [pc, #104]	; (813a8 <usart_initialize+0x7c>)
   81340:	2200      	movs	r2, #0
   81342:	701a      	strb	r2, [r3, #0]
	
	for (i = 0; i < 10; i++)
   81344:	2300      	movs	r3, #0
   81346:	73fb      	strb	r3, [r7, #15]
   81348:	e006      	b.n	81358 <usart_initialize+0x2c>
	{
		command_array[i] = 0;
   8134a:	7bfb      	ldrb	r3, [r7, #15]
   8134c:	4a17      	ldr	r2, [pc, #92]	; (813ac <usart_initialize+0x80>)
   8134e:	2100      	movs	r1, #0
   81350:	54d1      	strb	r1, [r2, r3]
	/* Configure USART. */
	configure_usart();

	gs_uc_trans_mode = BYTE_TRANSFER;
	
	for (i = 0; i < 10; i++)
   81352:	7bfb      	ldrb	r3, [r7, #15]
   81354:	3301      	adds	r3, #1
   81356:	73fb      	strb	r3, [r7, #15]
   81358:	7bfb      	ldrb	r3, [r7, #15]
   8135a:	2b09      	cmp	r3, #9
   8135c:	d9f5      	bls.n	8134a <usart_initialize+0x1e>
	{
		command_array[i] = 0;
	}

	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
   8135e:	4814      	ldr	r0, [pc, #80]	; (813b0 <usart_initialize+0x84>)
   81360:	2101      	movs	r1, #1
   81362:	4b14      	ldr	r3, [pc, #80]	; (813b4 <usart_initialize+0x88>)
   81364:	4798      	blx	r3
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
   81366:	4812      	ldr	r0, [pc, #72]	; (813b0 <usart_initialize+0x84>)
   81368:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8136c:	4b12      	ldr	r3, [pc, #72]	; (813b8 <usart_initialize+0x8c>)
   8136e:	4798      	blx	r3
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
   81370:	4b12      	ldr	r3, [pc, #72]	; (813bc <usart_initialize+0x90>)
   81372:	60bb      	str	r3, [r7, #8]
		
	while(*message_array)
   81374:	e00d      	b.n	81392 <usart_initialize+0x66>
	{
		character = *message_array;
   81376:	68bb      	ldr	r3, [r7, #8]
   81378:	781b      	ldrb	r3, [r3, #0]
   8137a:	607b      	str	r3, [r7, #4]
		while(usart_write(BOARD_USART, character));	// Send the character.
   8137c:	bf00      	nop
   8137e:	480c      	ldr	r0, [pc, #48]	; (813b0 <usart_initialize+0x84>)
   81380:	6879      	ldr	r1, [r7, #4]
   81382:	4b0f      	ldr	r3, [pc, #60]	; (813c0 <usart_initialize+0x94>)
   81384:	4798      	blx	r3
   81386:	4603      	mov	r3, r0
   81388:	2b00      	cmp	r3, #0
   8138a:	d1f8      	bne.n	8137e <usart_initialize+0x52>
			
		message_array++;
   8138c:	68bb      	ldr	r3, [r7, #8]
   8138e:	3301      	adds	r3, #1
   81390:	60bb      	str	r3, [r7, #8]
	usart_enable_interrupt(BOARD_USART, US_IDR_RXRDY);
	usart_disable_interrupt(BOARD_USART, US_IER_RXBUFF);
	
	message_array = "WHAT CAN I DO FOR YOU, SIR?\n\r";
		
	while(*message_array)
   81392:	68bb      	ldr	r3, [r7, #8]
   81394:	781b      	ldrb	r3, [r3, #0]
   81396:	2b00      	cmp	r3, #0
   81398:	d1ed      	bne.n	81376 <usart_initialize+0x4a>
		while(usart_write(BOARD_USART, character));	// Send the character.
			
		message_array++;
	}
	
	return;
   8139a:	bf00      	nop
}
   8139c:	3710      	adds	r7, #16
   8139e:	46bd      	mov	sp, r7
   813a0:	bd80      	pop	{r7, pc}
   813a2:	bf00      	nop
   813a4:	000812b5 	.word	0x000812b5
   813a8:	2007046c 	.word	0x2007046c
   813ac:	20070470 	.word	0x20070470
   813b0:	40098000 	.word	0x40098000
   813b4:	000829b9 	.word	0x000829b9
   813b8:	000829d5 	.word	0x000829d5
   813bc:	00086fe8 	.word	0x00086fe8
   813c0:	00082a41 	.word	0x00082a41

000813c4 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ			BOARD_FREQ_MAINCK_XTAL			//!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ		BOARD_FREQ_MAINCK_BYPASS		//!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   813c4:	b580      	push	{r7, lr}
   813c6:	b082      	sub	sp, #8
   813c8:	af00      	add	r7, sp, #0
   813ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   813cc:	687b      	ldr	r3, [r7, #4]
   813ce:	2b07      	cmp	r3, #7
   813d0:	d82e      	bhi.n	81430 <osc_enable+0x6c>
   813d2:	a201      	add	r2, pc, #4	; (adr r2, 813d8 <osc_enable+0x14>)
   813d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   813d8:	00081431 	.word	0x00081431
   813dc:	000813f9 	.word	0x000813f9
   813e0:	00081401 	.word	0x00081401
   813e4:	00081409 	.word	0x00081409
   813e8:	00081411 	.word	0x00081411
   813ec:	00081419 	.word	0x00081419
   813f0:	00081421 	.word	0x00081421
   813f4:	00081429 	.word	0x00081429
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   813f8:	2000      	movs	r0, #0
   813fa:	4b0f      	ldr	r3, [pc, #60]	; (81438 <osc_enable+0x74>)
   813fc:	4798      	blx	r3
		break;
   813fe:	e017      	b.n	81430 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   81400:	2001      	movs	r0, #1
   81402:	4b0d      	ldr	r3, [pc, #52]	; (81438 <osc_enable+0x74>)
   81404:	4798      	blx	r3
		break;
   81406:	e013      	b.n	81430 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   81408:	2000      	movs	r0, #0
   8140a:	4b0c      	ldr	r3, [pc, #48]	; (8143c <osc_enable+0x78>)
   8140c:	4798      	blx	r3
		break;
   8140e:	e00f      	b.n	81430 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   81410:	2010      	movs	r0, #16
   81412:	4b0a      	ldr	r3, [pc, #40]	; (8143c <osc_enable+0x78>)
   81414:	4798      	blx	r3
		break;
   81416:	e00b      	b.n	81430 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   81418:	2020      	movs	r0, #32
   8141a:	4b08      	ldr	r3, [pc, #32]	; (8143c <osc_enable+0x78>)
   8141c:	4798      	blx	r3
		break;
   8141e:	e007      	b.n	81430 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL);
   81420:	2000      	movs	r0, #0
   81422:	4b07      	ldr	r3, [pc, #28]	; (81440 <osc_enable+0x7c>)
   81424:	4798      	blx	r3
		break;
   81426:	e003      	b.n	81430 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS);
   81428:	2001      	movs	r0, #1
   8142a:	4b05      	ldr	r3, [pc, #20]	; (81440 <osc_enable+0x7c>)
   8142c:	4798      	blx	r3
		break;
   8142e:	bf00      	nop
	}
}
   81430:	3708      	adds	r7, #8
   81432:	46bd      	mov	sp, r7
   81434:	bd80      	pop	{r7, pc}
   81436:	bf00      	nop
   81438:	00082589 	.word	0x00082589
   8143c:	000825f9 	.word	0x000825f9
   81440:	00082699 	.word	0x00082699

00081444 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   81444:	b580      	push	{r7, lr}
   81446:	b082      	sub	sp, #8
   81448:	af00      	add	r7, sp, #0
   8144a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8144c:	687b      	ldr	r3, [r7, #4]
   8144e:	2b07      	cmp	r3, #7
   81450:	d826      	bhi.n	814a0 <osc_is_ready+0x5c>
   81452:	a201      	add	r2, pc, #4	; (adr r2, 81458 <osc_is_ready+0x14>)
   81454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81458:	00081479 	.word	0x00081479
   8145c:	0008147d 	.word	0x0008147d
   81460:	0008147d 	.word	0x0008147d
   81464:	0008148f 	.word	0x0008148f
   81468:	0008148f 	.word	0x0008148f
   8146c:	0008148f 	.word	0x0008148f
   81470:	0008148f 	.word	0x0008148f
   81474:	0008148f 	.word	0x0008148f
	case OSC_SLCK_32K_RC:
		return 1;
   81478:	2301      	movs	r3, #1
   8147a:	e012      	b.n	814a2 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8147c:	4b0b      	ldr	r3, [pc, #44]	; (814ac <osc_is_ready+0x68>)
   8147e:	4798      	blx	r3
   81480:	4603      	mov	r3, r0
   81482:	2b00      	cmp	r3, #0
   81484:	bf0c      	ite	eq
   81486:	2300      	moveq	r3, #0
   81488:	2301      	movne	r3, #1
   8148a:	b2db      	uxtb	r3, r3
   8148c:	e009      	b.n	814a2 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8148e:	4b08      	ldr	r3, [pc, #32]	; (814b0 <osc_is_ready+0x6c>)
   81490:	4798      	blx	r3
   81492:	4603      	mov	r3, r0
   81494:	2b00      	cmp	r3, #0
   81496:	bf0c      	ite	eq
   81498:	2300      	moveq	r3, #0
   8149a:	2301      	movne	r3, #1
   8149c:	b2db      	uxtb	r3, r3
   8149e:	e000      	b.n	814a2 <osc_is_ready+0x5e>
	}

	return 0;
   814a0:	2300      	movs	r3, #0
}
   814a2:	4618      	mov	r0, r3
   814a4:	3708      	adds	r7, #8
   814a6:	46bd      	mov	sp, r7
   814a8:	bd80      	pop	{r7, pc}
   814aa:	bf00      	nop
   814ac:	000825c5 	.word	0x000825c5
   814b0:	00082705 	.word	0x00082705

000814b4 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   814b4:	b480      	push	{r7}
   814b6:	b083      	sub	sp, #12
   814b8:	af00      	add	r7, sp, #0
   814ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   814bc:	687b      	ldr	r3, [r7, #4]
   814be:	2b07      	cmp	r3, #7
   814c0:	d825      	bhi.n	8150e <osc_get_rate+0x5a>
   814c2:	a201      	add	r2, pc, #4	; (adr r2, 814c8 <osc_get_rate+0x14>)
   814c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   814c8:	000814e9 	.word	0x000814e9
   814cc:	000814ef 	.word	0x000814ef
   814d0:	000814f5 	.word	0x000814f5
   814d4:	000814fb 	.word	0x000814fb
   814d8:	000814ff 	.word	0x000814ff
   814dc:	00081503 	.word	0x00081503
   814e0:	00081507 	.word	0x00081507
   814e4:	0008150b 	.word	0x0008150b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   814e8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   814ec:	e010      	b.n	81510 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   814ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814f2:	e00d      	b.n	81510 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   814f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814f8:	e00a      	b.n	81510 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   814fa:	4b08      	ldr	r3, [pc, #32]	; (8151c <osc_get_rate+0x68>)
   814fc:	e008      	b.n	81510 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   814fe:	4b08      	ldr	r3, [pc, #32]	; (81520 <osc_get_rate+0x6c>)
   81500:	e006      	b.n	81510 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81502:	4b08      	ldr	r3, [pc, #32]	; (81524 <osc_get_rate+0x70>)
   81504:	e004      	b.n	81510 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81506:	4b07      	ldr	r3, [pc, #28]	; (81524 <osc_get_rate+0x70>)
   81508:	e002      	b.n	81510 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8150a:	4b06      	ldr	r3, [pc, #24]	; (81524 <osc_get_rate+0x70>)
   8150c:	e000      	b.n	81510 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8150e:	2300      	movs	r3, #0
}
   81510:	4618      	mov	r0, r3
   81512:	370c      	adds	r7, #12
   81514:	46bd      	mov	sp, r7
   81516:	f85d 7b04 	ldr.w	r7, [sp], #4
   8151a:	4770      	bx	lr
   8151c:	003d0900 	.word	0x003d0900
   81520:	007a1200 	.word	0x007a1200
   81524:	00b71b00 	.word	0x00b71b00

00081528 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   81528:	b580      	push	{r7, lr}
   8152a:	b082      	sub	sp, #8
   8152c:	af00      	add	r7, sp, #0
   8152e:	4603      	mov	r3, r0
   81530:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   81532:	bf00      	nop
   81534:	79fb      	ldrb	r3, [r7, #7]
   81536:	4618      	mov	r0, r3
   81538:	4b05      	ldr	r3, [pc, #20]	; (81550 <osc_wait_ready+0x28>)
   8153a:	4798      	blx	r3
   8153c:	4603      	mov	r3, r0
   8153e:	f083 0301 	eor.w	r3, r3, #1
   81542:	b2db      	uxtb	r3, r3
   81544:	2b00      	cmp	r3, #0
   81546:	d1f5      	bne.n	81534 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   81548:	3708      	adds	r7, #8
   8154a:	46bd      	mov	sp, r7
   8154c:	bd80      	pop	{r7, pc}
   8154e:	bf00      	nop
   81550:	00081445 	.word	0x00081445

00081554 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   81554:	b580      	push	{r7, lr}
   81556:	b086      	sub	sp, #24
   81558:	af00      	add	r7, sp, #0
   8155a:	60f8      	str	r0, [r7, #12]
   8155c:	607a      	str	r2, [r7, #4]
   8155e:	603b      	str	r3, [r7, #0]
   81560:	460b      	mov	r3, r1
   81562:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   81564:	687b      	ldr	r3, [r7, #4]
   81566:	2b00      	cmp	r3, #0
   81568:	d107      	bne.n	8157a <pll_config_init+0x26>
   8156a:	683b      	ldr	r3, [r7, #0]
   8156c:	2b00      	cmp	r3, #0
   8156e:	d104      	bne.n	8157a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   81570:	68fb      	ldr	r3, [r7, #12]
   81572:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   81576:	601a      	str	r2, [r3, #0]
   81578:	e019      	b.n	815ae <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8157a:	7afb      	ldrb	r3, [r7, #11]
   8157c:	4618      	mov	r0, r3
   8157e:	4b0d      	ldr	r3, [pc, #52]	; (815b4 <pll_config_init+0x60>)
   81580:	4798      	blx	r3
   81582:	4602      	mov	r2, r0
   81584:	687b      	ldr	r3, [r7, #4]
   81586:	fbb2 f3f3 	udiv	r3, r2, r3
   8158a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);
		
		vco_hz *= ul_mul;
   8158c:	697b      	ldr	r3, [r7, #20]
   8158e:	683a      	ldr	r2, [r7, #0]
   81590:	fb02 f303 	mul.w	r3, r2, r3
   81594:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);
	
		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   81596:	683b      	ldr	r3, [r7, #0]
   81598:	3b01      	subs	r3, #1
   8159a:	041a      	lsls	r2, r3, #16
   8159c:	4b06      	ldr	r3, [pc, #24]	; (815b8 <pll_config_init+0x64>)
   8159e:	4013      	ands	r3, r2
   815a0:	687a      	ldr	r2, [r7, #4]
   815a2:	b2d2      	uxtb	r2, r2
   815a4:	4313      	orrs	r3, r2
   815a6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   815aa:	68fb      	ldr	r3, [r7, #12]
   815ac:	601a      	str	r2, [r3, #0]
	}
}
   815ae:	3718      	adds	r7, #24
   815b0:	46bd      	mov	sp, r7
   815b2:	bd80      	pop	{r7, pc}
   815b4:	000814b5 	.word	0x000814b5
   815b8:	07ff0000 	.word	0x07ff0000

000815bc <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   815bc:	b580      	push	{r7, lr}
   815be:	b082      	sub	sp, #8
   815c0:	af00      	add	r7, sp, #0
   815c2:	6078      	str	r0, [r7, #4]
   815c4:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID) {
   815c6:	683b      	ldr	r3, [r7, #0]
   815c8:	2b00      	cmp	r3, #0
   815ca:	d108      	bne.n	815de <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   815cc:	4b08      	ldr	r3, [pc, #32]	; (815f0 <pll_enable+0x34>)
   815ce:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   815d0:	4b08      	ldr	r3, [pc, #32]	; (815f4 <pll_enable+0x38>)
   815d2:	687a      	ldr	r2, [r7, #4]
   815d4:	6812      	ldr	r2, [r2, #0]
   815d6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   815da:	629a      	str	r2, [r3, #40]	; 0x28
   815dc:	e005      	b.n	815ea <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   815de:	4b05      	ldr	r3, [pc, #20]	; (815f4 <pll_enable+0x38>)
   815e0:	687a      	ldr	r2, [r7, #4]
   815e2:	6812      	ldr	r2, [r2, #0]
   815e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   815e8:	61da      	str	r2, [r3, #28]
	}
}
   815ea:	3708      	adds	r7, #8
   815ec:	46bd      	mov	sp, r7
   815ee:	bd80      	pop	{r7, pc}
   815f0:	00082721 	.word	0x00082721
   815f4:	400e0600 	.word	0x400e0600

000815f8 <pll_is_locked>:
	else
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   815f8:	b580      	push	{r7, lr}
   815fa:	b082      	sub	sp, #8
   815fc:	af00      	add	r7, sp, #0
   815fe:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);
	
	if (ul_pll_id == PLLA_ID)
   81600:	687b      	ldr	r3, [r7, #4]
   81602:	2b00      	cmp	r3, #0
   81604:	d103      	bne.n	8160e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   81606:	4b05      	ldr	r3, [pc, #20]	; (8161c <pll_is_locked+0x24>)
   81608:	4798      	blx	r3
   8160a:	4603      	mov	r3, r0
   8160c:	e002      	b.n	81614 <pll_is_locked+0x1c>
	else
		return pmc_is_locked_upll();
   8160e:	4b04      	ldr	r3, [pc, #16]	; (81620 <pll_is_locked+0x28>)
   81610:	4798      	blx	r3
   81612:	4603      	mov	r3, r0
}
   81614:	4618      	mov	r0, r3
   81616:	3708      	adds	r7, #8
   81618:	46bd      	mov	sp, r7
   8161a:	bd80      	pop	{r7, pc}
   8161c:	00082739 	.word	0x00082739
   81620:	00082755 	.word	0x00082755

00081624 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   81624:	b580      	push	{r7, lr}
   81626:	b082      	sub	sp, #8
   81628:	af00      	add	r7, sp, #0
   8162a:	4603      	mov	r3, r0
   8162c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8162e:	79fb      	ldrb	r3, [r7, #7]
   81630:	3b03      	subs	r3, #3
   81632:	2b04      	cmp	r3, #4
   81634:	d808      	bhi.n	81648 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   81636:	79fb      	ldrb	r3, [r7, #7]
   81638:	4618      	mov	r0, r3
   8163a:	4b05      	ldr	r3, [pc, #20]	; (81650 <pll_enable_source+0x2c>)
   8163c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8163e:	79fb      	ldrb	r3, [r7, #7]
   81640:	4618      	mov	r0, r3
   81642:	4b04      	ldr	r3, [pc, #16]	; (81654 <pll_enable_source+0x30>)
   81644:	4798      	blx	r3
		break;
   81646:	e000      	b.n	8164a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   81648:	bf00      	nop
	}
}
   8164a:	3708      	adds	r7, #8
   8164c:	46bd      	mov	sp, r7
   8164e:	bd80      	pop	{r7, pc}
   81650:	000813c5 	.word	0x000813c5
   81654:	00081529 	.word	0x00081529

00081658 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   81658:	b580      	push	{r7, lr}
   8165a:	b082      	sub	sp, #8
   8165c:	af00      	add	r7, sp, #0
   8165e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81660:	bf00      	nop
   81662:	6878      	ldr	r0, [r7, #4]
   81664:	4b04      	ldr	r3, [pc, #16]	; (81678 <pll_wait_for_lock+0x20>)
   81666:	4798      	blx	r3
   81668:	4603      	mov	r3, r0
   8166a:	2b00      	cmp	r3, #0
   8166c:	d0f9      	beq.n	81662 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   8166e:	2300      	movs	r3, #0
}
   81670:	4618      	mov	r0, r3
   81672:	3708      	adds	r7, #8
   81674:	46bd      	mov	sp, r7
   81676:	bd80      	pop	{r7, pc}
   81678:	000815f9 	.word	0x000815f9

0008167c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8167c:	b580      	push	{r7, lr}
   8167e:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   81680:	2006      	movs	r0, #6
   81682:	4b04      	ldr	r3, [pc, #16]	; (81694 <sysclk_get_main_hz+0x18>)
   81684:	4798      	blx	r3
   81686:	4602      	mov	r2, r0
   81688:	4613      	mov	r3, r2
   8168a:	00db      	lsls	r3, r3, #3
   8168c:	1a9b      	subs	r3, r3, r2
   8168e:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81690:	4618      	mov	r0, r3
   81692:	bd80      	pop	{r7, pc}
   81694:	000814b5 	.word	0x000814b5

00081698 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   81698:	b580      	push	{r7, lr}
   8169a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   8169c:	4b02      	ldr	r3, [pc, #8]	; (816a8 <sysclk_get_cpu_hz+0x10>)
   8169e:	4798      	blx	r3
   816a0:	4603      	mov	r3, r0
   816a2:	085b      	lsrs	r3, r3, #1
}
   816a4:	4618      	mov	r0, r3
   816a6:	bd80      	pop	{r7, pc}
   816a8:	0008167d 	.word	0x0008167d

000816ac <sysclk_init>:
	pll_disable(1);
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   816ac:	b590      	push	{r4, r7, lr}
   816ae:	b083      	sub	sp, #12
   816b0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   816b2:	4b10      	ldr	r3, [pc, #64]	; (816f4 <sysclk_init+0x48>)
   816b4:	4798      	blx	r3
   816b6:	4603      	mov	r3, r0
   816b8:	4618      	mov	r0, r3
   816ba:	4b0f      	ldr	r3, [pc, #60]	; (816f8 <sysclk_init+0x4c>)
   816bc:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
		break;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		pll_enable_source(CONFIG_PLL0_SOURCE);
   816be:	2006      	movs	r0, #6
   816c0:	4b0e      	ldr	r3, [pc, #56]	; (816fc <sysclk_init+0x50>)
   816c2:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   816c4:	1d3b      	adds	r3, r7, #4
   816c6:	4618      	mov	r0, r3
   816c8:	2106      	movs	r1, #6
   816ca:	2201      	movs	r2, #1
   816cc:	230e      	movs	r3, #14
   816ce:	4c0c      	ldr	r4, [pc, #48]	; (81700 <sysclk_init+0x54>)
   816d0:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   816d2:	1d3b      	adds	r3, r7, #4
   816d4:	4618      	mov	r0, r3
   816d6:	2100      	movs	r1, #0
   816d8:	4b0a      	ldr	r3, [pc, #40]	; (81704 <sysclk_init+0x58>)
   816da:	4798      	blx	r3
		pll_wait_for_lock(0);
   816dc:	2000      	movs	r0, #0
   816de:	4b0a      	ldr	r3, [pc, #40]	; (81708 <sysclk_init+0x5c>)
   816e0:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   816e2:	2010      	movs	r0, #16
   816e4:	4b09      	ldr	r3, [pc, #36]	; (8170c <sysclk_init+0x60>)
   816e6:	4798      	blx	r3
		break;
   816e8:	bf00      	nop
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
		break;
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   816ea:	4b09      	ldr	r3, [pc, #36]	; (81710 <sysclk_init+0x64>)
   816ec:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   816ee:	370c      	adds	r7, #12
   816f0:	46bd      	mov	sp, r7
   816f2:	bd90      	pop	{r4, r7, pc}
   816f4:	00081699 	.word	0x00081699
   816f8:	00082d85 	.word	0x00082d85
   816fc:	00081625 	.word	0x00081625
   81700:	00081555 	.word	0x00081555
   81704:	000815bd 	.word	0x000815bd
   81708:	00081659 	.word	0x00081659
   8170c:	00082505 	.word	0x00082505
   81710:	00082c05 	.word	0x00082c05

00081714 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81714:	b480      	push	{r7}
   81716:	b083      	sub	sp, #12
   81718:	af00      	add	r7, sp, #0
   8171a:	4603      	mov	r3, r0
   8171c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8171e:	4b08      	ldr	r3, [pc, #32]	; (81740 <NVIC_EnableIRQ+0x2c>)
   81720:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81724:	0952      	lsrs	r2, r2, #5
   81726:	79f9      	ldrb	r1, [r7, #7]
   81728:	f001 011f 	and.w	r1, r1, #31
   8172c:	2001      	movs	r0, #1
   8172e:	fa00 f101 	lsl.w	r1, r0, r1
   81732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   81736:	370c      	adds	r7, #12
   81738:	46bd      	mov	sp, r7
   8173a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8173e:	4770      	bx	lr
   81740:	e000e100 	.word	0xe000e100

00081744 <NVIC_DisableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to disable
 */
static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   81744:	b480      	push	{r7}
   81746:	b083      	sub	sp, #12
   81748:	af00      	add	r7, sp, #0
   8174a:	4603      	mov	r3, r0
   8174c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   8174e:	4b09      	ldr	r3, [pc, #36]	; (81774 <NVIC_DisableIRQ+0x30>)
   81750:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81754:	0952      	lsrs	r2, r2, #5
   81756:	79f9      	ldrb	r1, [r7, #7]
   81758:	f001 011f 	and.w	r1, r1, #31
   8175c:	2001      	movs	r0, #1
   8175e:	fa00 f101 	lsl.w	r1, r0, r1
   81762:	3220      	adds	r2, #32
   81764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   81768:	370c      	adds	r7, #12
   8176a:	46bd      	mov	sp, r7
   8176c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81770:	4770      	bx	lr
   81772:	bf00      	nop
   81774:	e000e100 	.word	0xe000e100

00081778 <NVIC_ClearPendingIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the interrupt for clear pending
 */
static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81778:	b480      	push	{r7}
   8177a:	b083      	sub	sp, #12
   8177c:	af00      	add	r7, sp, #0
   8177e:	4603      	mov	r3, r0
   81780:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81782:	4b09      	ldr	r3, [pc, #36]	; (817a8 <NVIC_ClearPendingIRQ+0x30>)
   81784:	f997 2007 	ldrsb.w	r2, [r7, #7]
   81788:	0952      	lsrs	r2, r2, #5
   8178a:	79f9      	ldrb	r1, [r7, #7]
   8178c:	f001 011f 	and.w	r1, r1, #31
   81790:	2001      	movs	r0, #1
   81792:	fa00 f101 	lsl.w	r1, r0, r1
   81796:	3260      	adds	r2, #96	; 0x60
   81798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   8179c:	370c      	adds	r7, #12
   8179e:	46bd      	mov	sp, r7
   817a0:	f85d 7b04 	ldr.w	r7, [sp], #4
   817a4:	4770      	bx	lr
   817a6:	bf00      	nop
   817a8:	e000e100 	.word	0xe000e100

000817ac <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   817ac:	b480      	push	{r7}
   817ae:	b083      	sub	sp, #12
   817b0:	af00      	add	r7, sp, #0
   817b2:	4603      	mov	r3, r0
   817b4:	6039      	str	r1, [r7, #0]
   817b6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   817b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   817bc:	2b00      	cmp	r3, #0
   817be:	da0b      	bge.n	817d8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   817c0:	490d      	ldr	r1, [pc, #52]	; (817f8 <NVIC_SetPriority+0x4c>)
   817c2:	79fb      	ldrb	r3, [r7, #7]
   817c4:	f003 030f 	and.w	r3, r3, #15
   817c8:	3b04      	subs	r3, #4
   817ca:	683a      	ldr	r2, [r7, #0]
   817cc:	b2d2      	uxtb	r2, r2
   817ce:	0112      	lsls	r2, r2, #4
   817d0:	b2d2      	uxtb	r2, r2
   817d2:	440b      	add	r3, r1
   817d4:	761a      	strb	r2, [r3, #24]
   817d6:	e009      	b.n	817ec <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   817d8:	4908      	ldr	r1, [pc, #32]	; (817fc <NVIC_SetPriority+0x50>)
   817da:	f997 3007 	ldrsb.w	r3, [r7, #7]
   817de:	683a      	ldr	r2, [r7, #0]
   817e0:	b2d2      	uxtb	r2, r2
   817e2:	0112      	lsls	r2, r2, #4
   817e4:	b2d2      	uxtb	r2, r2
   817e6:	440b      	add	r3, r1
   817e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   817ec:	370c      	adds	r7, #12
   817ee:	46bd      	mov	sp, r7
   817f0:	f85d 7b04 	ldr.w	r7, [sp], #4
   817f4:	4770      	bx	lr
   817f6:	bf00      	nop
   817f8:	e000ed00 	.word	0xe000ed00
   817fc:	e000e100 	.word	0xe000e100

00081800 <safe_board_init>:
/************************************************************************/
/* SAFE BOARD INIT                                                      */
/************************************************************************/

void safe_board_init(void)
{	
   81800:	b590      	push	{r4, r7, lr}
   81802:	b083      	sub	sp, #12
   81804:	af00      	add	r7, sp, #0

	#endif

	#ifdef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Configure WDT to trigger an interrupt (or reset). */
	wdt_mode = WDT_MR_WDFIEN |  /* Enable WDT fault interrupt. */
   81806:	4b1d      	ldr	r3, [pc, #116]	; (8187c <safe_board_init+0x7c>)
   81808:	607b      	str	r3, [r7, #4]
	WDT_MR_WDRPROC |  /* WDT fault resets processor only. */
	WDT_MR_WDIDLEHLT |
	WDT_MR_WDRSTEN;   /* WDT stops in idle state. */

	wdt_timer = 125;
   8180a:	237d      	movs	r3, #125	; 0x7d
   8180c:	603b      	str	r3, [r7, #0]

	/* Initialize WDT with the given parameters. */
	wdt_init(WDT, wdt_mode, wdt_timer, wdt_timer);
   8180e:	683b      	ldr	r3, [r7, #0]
   81810:	b29a      	uxth	r2, r3
   81812:	683b      	ldr	r3, [r7, #0]
   81814:	b29b      	uxth	r3, r3
   81816:	481a      	ldr	r0, [pc, #104]	; (81880 <safe_board_init+0x80>)
   81818:	6879      	ldr	r1, [r7, #4]
   8181a:	4c1a      	ldr	r4, [pc, #104]	; (81884 <safe_board_init+0x84>)
   8181c:	47a0      	blx	r4

	/* Configure and enable WDT interrupt. */
	NVIC_DisableIRQ(WDT_IRQn);
   8181e:	2004      	movs	r0, #4
   81820:	4b19      	ldr	r3, [pc, #100]	; (81888 <safe_board_init+0x88>)
   81822:	4798      	blx	r3
	NVIC_ClearPendingIRQ(WDT_IRQn);
   81824:	2004      	movs	r0, #4
   81826:	4b19      	ldr	r3, [pc, #100]	; (8188c <safe_board_init+0x8c>)
   81828:	4798      	blx	r3
	NVIC_SetPriority(WDT_IRQn, 0);
   8182a:	2004      	movs	r0, #4
   8182c:	2100      	movs	r1, #0
   8182e:	4b18      	ldr	r3, [pc, #96]	; (81890 <safe_board_init+0x90>)
   81830:	4798      	blx	r3
	NVIC_EnableIRQ(WDT_IRQn);
   81832:	2004      	movs	r0, #4
   81834:	4b17      	ldr	r3, [pc, #92]	; (81894 <safe_board_init+0x94>)
   81836:	4798      	blx	r3
	#endif

	/*Configure CAN related pins*/
	#ifdef CONF_BOARD_CAN0
	/* Configure the CAN0 TX and RX pins. */
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   81838:	2001      	movs	r0, #1
   8183a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8183e:	4b16      	ldr	r3, [pc, #88]	; (81898 <safe_board_init+0x98>)
   81840:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   81842:	2000      	movs	r0, #0
   81844:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81848:	4b13      	ldr	r3, [pc, #76]	; (81898 <safe_board_init+0x98>)
   8184a:	4798      	blx	r3
	/* Configure the transiver0 RS & EN pins. */
	gpio_configure_pin(PIN_CAN0_TR_RS_IDX, PIN_CAN0_TR_RS_FLAGS);
   8184c:	2034      	movs	r0, #52	; 0x34
   8184e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81852:	4b11      	ldr	r3, [pc, #68]	; (81898 <safe_board_init+0x98>)
   81854:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TR_EN_IDX, PIN_CAN0_TR_EN_FLAGS);
   81856:	2035      	movs	r0, #53	; 0x35
   81858:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8185c:	4b0e      	ldr	r3, [pc, #56]	; (81898 <safe_board_init+0x98>)
   8185e:	4798      	blx	r3
	#endif

	#ifdef CONF_BOARD_CAN1
	/* Configure the CAN1 TX and RX pin. */
	gpio_configure_pin(PIN_CAN1_RX_IDX, PIN_CAN1_RX_FLAGS);
   81860:	202f      	movs	r0, #47	; 0x2f
   81862:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81866:	4b0c      	ldr	r3, [pc, #48]	; (81898 <safe_board_init+0x98>)
   81868:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN1_TX_IDX, PIN_CAN1_TX_FLAGS);
   8186a:	202e      	movs	r0, #46	; 0x2e
   8186c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81870:	4b09      	ldr	r3, [pc, #36]	; (81898 <safe_board_init+0x98>)
   81872:	4798      	blx	r3
	/* Configure the transiver1 RS & EN pins. */
	//gpio_configure_pin(PIN_CAN1_TR_RS_IDX, PIN_CAN1_TR_RS_FLAGS);
	//gpio_configure_pin(PIN_CAN1_TR_EN_IDX, PIN_CAN1_TR_EN_FLAGS);
	#endif
	return;
   81874:	bf00      	nop
}
   81876:	370c      	adds	r7, #12
   81878:	46bd      	mov	sp, r7
   8187a:	bd90      	pop	{r4, r7, pc}
   8187c:	20007000 	.word	0x20007000
   81880:	400e1a50 	.word	0x400e1a50
   81884:	00082add 	.word	0x00082add
   81888:	00081745 	.word	0x00081745
   8188c:	00081779 	.word	0x00081779
   81890:	000817ad 	.word	0x000817ad
   81894:	00081715 	.word	0x00081715
   81898:	000821e5 	.word	0x000821e5

0008189c <board_init>:

/**
 * \brief Initialize board watchdog timer and pins.
 */
void board_init(void)
{
   8189c:	b580      	push	{r7, lr}
   8189e:	af00      	add	r7, sp, #0
	/* Configure Power LED */
	gpio_configure_pin(LED3_GPIO, LED3_FLAGS);
   818a0:	2057      	movs	r0, #87	; 0x57
   818a2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   818a6:	4b2e      	ldr	r3, [pc, #184]	; (81960 <board_init+0xc4>)
   818a8:	4798      	blx	r3
	gpio_set_pin_high(LED3_GPIO); /* Turned on by default */
   818aa:	2057      	movs	r0, #87	; 0x57
   818ac:	4b2d      	ldr	r3, [pc, #180]	; (81964 <board_init+0xc8>)
   818ae:	4798      	blx	r3

	/* Configure User LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   818b0:	203b      	movs	r0, #59	; 0x3b
   818b2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818b6:	4b2a      	ldr	r3, [pc, #168]	; (81960 <board_init+0xc4>)
   818b8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   818ba:	2055      	movs	r0, #85	; 0x55
   818bc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818c0:	4b27      	ldr	r3, [pc, #156]	; (81960 <board_init+0xc4>)
   818c2:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   818c4:	2056      	movs	r0, #86	; 0x56
   818c6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   818ca:	4b25      	ldr	r3, [pc, #148]	; (81960 <board_init+0xc4>)
   818cc:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   818ce:	4826      	ldr	r0, [pc, #152]	; (81968 <board_init+0xcc>)
   818d0:	f44f 7140 	mov.w	r1, #768	; 0x300
   818d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   818d8:	4b24      	ldr	r3, [pc, #144]	; (8196c <board_init+0xd0>)
   818da:	4798      	blx	r3
	//gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
//#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   818dc:	2019      	movs	r0, #25
   818de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818e2:	4b1f      	ldr	r3, [pc, #124]	; (81960 <board_init+0xc4>)
   818e4:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   818e6:	201a      	movs	r0, #26
   818e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818ec:	4b1c      	ldr	r3, [pc, #112]	; (81960 <board_init+0xc4>)
   818ee:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   818f0:	201b      	movs	r0, #27
   818f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   818f6:	4b1a      	ldr	r3, [pc, #104]	; (81960 <board_init+0xc4>)
   818f8:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   818fa:	201c      	movs	r0, #28
   818fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81900:	4b17      	ldr	r3, [pc, #92]	; (81960 <board_init+0xc4>)
   81902:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS1
#       if defined(CONF_BOARD_SPI0_NPCS1_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS1_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS1_GPIO,
   81904:	2034      	movs	r0, #52	; 0x34
   81906:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8190a:	4b15      	ldr	r3, [pc, #84]	; (81960 <board_init+0xc4>)
   8190c:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS2
#       if defined(CONF_BOARD_SPI0_NPCS2_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS2_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS2_GPIO,
   8190e:	2035      	movs	r0, #53	; 0x35
   81910:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81914:	4b12      	ldr	r3, [pc, #72]	; (81960 <board_init+0xc4>)
   81916:	4798      	blx	r3
#   endif

#   ifdef CONF_BOARD_SPI0_NPCS3
#       if defined(CONF_BOARD_SPI0_NPCS3_GPIO) && \
		defined(CONF_BOARD_SPI0_NPCS3_FLAGS)
			gpio_configure_pin(CONF_BOARD_SPI0_NPCS3_GPIO,
   81918:	2037      	movs	r0, #55	; 0x37
   8191a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8191e:	4b10      	ldr	r3, [pc, #64]	; (81960 <board_init+0xc4>)
   81920:	4798      	blx	r3
					SPI0_NPCS3_PA31_FLAGS);
#       endif
#   endif

#	ifdef CONF_SPI_MEM2
		gpio_configure_pin(SPI0_MEM2_HOLD, SPI0_MEM2_HOLD_FLAGS);
   81922:	2020      	movs	r0, #32
   81924:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81928:	4b0d      	ldr	r3, [pc, #52]	; (81960 <board_init+0xc4>)
   8192a:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM2_WP, SPI0_MEM2_WP_FLAGS);
   8192c:	201c      	movs	r0, #28
   8192e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81932:	4b0b      	ldr	r3, [pc, #44]	; (81960 <board_init+0xc4>)
   81934:	4798      	blx	r3
#	endif

#	ifdef CONF_SPI_MEM1
		gpio_configure_pin(SPI0_MEM1_HOLD, SPI0_MEM1_HOLD_FLAGS);
   81936:	2015      	movs	r0, #21
   81938:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8193c:	4b08      	ldr	r3, [pc, #32]	; (81960 <board_init+0xc4>)
   8193e:	4798      	blx	r3
		gpio_configure_pin(SPI0_MEM1_WP, SPI0_MEM1_WP_FLAGS);
   81940:	2033      	movs	r0, #51	; 0x33
   81942:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81946:	4b06      	ldr	r3, [pc, #24]	; (81960 <board_init+0xc4>)
   81948:	4798      	blx	r3

#endif // #ifdef CONF_BOARD_SPI0

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART0_RXD_IDX, PIN_USART0_RXD_FLAGS);
   8194a:	200a      	movs	r0, #10
   8194c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81950:	4b03      	ldr	r3, [pc, #12]	; (81960 <board_init+0xc4>)
   81952:	4798      	blx	r3
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
   81954:	200b      	movs	r0, #11
   81956:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8195a:	4b01      	ldr	r3, [pc, #4]	; (81960 <board_init+0xc4>)
   8195c:	4798      	blx	r3
#endif

}
   8195e:	bd80      	pop	{r7, pc}
   81960:	000821e5 	.word	0x000821e5
   81964:	0008211d 	.word	0x0008211d
   81968:	400e0e00 	.word	0x400e0e00
   8196c:	00082321 	.word	0x00082321

00081970 <can_set_baudrate>:
 *
 * \retval Set the baudrate successfully or not.
 */
static uint32_t can_set_baudrate(Can *p_can, uint32_t ul_mck,
		uint32_t ul_baudrate)
{
   81970:	b580      	push	{r7, lr}
   81972:	b08a      	sub	sp, #40	; 0x28
   81974:	af00      	add	r7, sp, #0
   81976:	60f8      	str	r0, [r7, #12]
   81978:	60b9      	str	r1, [r7, #8]
   8197a:	607a      	str	r2, [r7, #4]
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   8197c:	687b      	ldr	r3, [r7, #4]
   8197e:	f246 12a8 	movw	r2, #25000	; 0x61a8
   81982:	fb02 f203 	mul.w	r2, r2, r3
   81986:	68bb      	ldr	r3, [r7, #8]
   81988:	4413      	add	r3, r2
   8198a:	1e5a      	subs	r2, r3, #1
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
   8198c:	687b      	ldr	r3, [r7, #4]
   8198e:	f246 11a8 	movw	r1, #25000	; 0x61a8
   81992:	fb01 f303 	mul.w	r3, r1, r3
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   81996:	fbb2 f3f3 	udiv	r3, r2, r3
   8199a:	2b80      	cmp	r3, #128	; 0x80
   8199c:	d901      	bls.n	819a2 <can_set_baudrate+0x32>
			(ul_baudrate * CAN_MAX_TQ_NUM * 1000)) >
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
   8199e:	2300      	movs	r3, #0
   819a0:	e085      	b.n	81aae <can_set_baudrate+0x13e>
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   819a2:	68bb      	ldr	r3, [r7, #8]
   819a4:	085a      	lsrs	r2, r3, #1
   819a6:	687b      	ldr	r3, [r7, #4]
   819a8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   819ac:	fb01 f303 	mul.w	r3, r1, r3
   819b0:	429a      	cmp	r2, r3
   819b2:	d201      	bcs.n	819b8 <can_set_baudrate+0x48>
		return 0;
   819b4:	2300      	movs	r3, #0
   819b6:	e07a      	b.n	81aae <can_set_baudrate+0x13e>
	}

	/* Initialize it as the minimum Time Quantum. */
	uc_tq = CAN_MIN_TQ_NUM;
   819b8:	2308      	movs	r3, #8
   819ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
   819be:	f04f 33ff 	mov.w	r3, #4294967295
   819c2:	623b      	str	r3, [r7, #32]
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   819c4:	2308      	movs	r3, #8
   819c6:	77fb      	strb	r3, [r7, #31]
   819c8:	e02b      	b.n	81a22 <can_set_baudrate+0xb2>
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   819ca:	7ffb      	ldrb	r3, [r7, #31]
   819cc:	687a      	ldr	r2, [r7, #4]
   819ce:	fb02 f303 	mul.w	r3, r2, r3
   819d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   819d6:	fb02 f303 	mul.w	r3, r2, r3
   819da:	68ba      	ldr	r2, [r7, #8]
   819dc:	fbb2 f3f3 	udiv	r3, r2, r3
   819e0:	2b80      	cmp	r3, #128	; 0x80
   819e2:	d81b      	bhi.n	81a1c <can_set_baudrate+0xac>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   819e4:	7ffb      	ldrb	r3, [r7, #31]
   819e6:	687a      	ldr	r2, [r7, #4]
   819e8:	fb02 f303 	mul.w	r3, r2, r3
   819ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   819f0:	fb02 f203 	mul.w	r2, r2, r3
   819f4:	68bb      	ldr	r3, [r7, #8]
   819f6:	fbb3 f1f2 	udiv	r1, r3, r2
   819fa:	fb02 f201 	mul.w	r2, r2, r1
   819fe:	1a9b      	subs	r3, r3, r2
   81a00:	61bb      	str	r3, [r7, #24]
			if (ul_cur_mod < ul_mod) {
   81a02:	69ba      	ldr	r2, [r7, #24]
   81a04:	6a3b      	ldr	r3, [r7, #32]
   81a06:	429a      	cmp	r2, r3
   81a08:	d208      	bcs.n	81a1c <can_set_baudrate+0xac>
				ul_mod = ul_cur_mod;
   81a0a:	69bb      	ldr	r3, [r7, #24]
   81a0c:	623b      	str	r3, [r7, #32]
				uc_tq = i;
   81a0e:	7ffb      	ldrb	r3, [r7, #31]
   81a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (!ul_mod) {
   81a14:	6a3b      	ldr	r3, [r7, #32]
   81a16:	2b00      	cmp	r3, #0
   81a18:	d100      	bne.n	81a1c <can_set_baudrate+0xac>
					break;
   81a1a:	e005      	b.n	81a28 <can_set_baudrate+0xb8>

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   81a1c:	7ffb      	ldrb	r3, [r7, #31]
   81a1e:	3301      	adds	r3, #1
   81a20:	77fb      	strb	r3, [r7, #31]
   81a22:	7ffb      	ldrb	r3, [r7, #31]
   81a24:	2b19      	cmp	r3, #25
   81a26:	d9d0      	bls.n	819ca <can_set_baudrate+0x5a>
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   81a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81a2c:	687a      	ldr	r2, [r7, #4]
   81a2e:	fb02 f303 	mul.w	r3, r2, r3
   81a32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81a36:	fb02 f303 	mul.w	r3, r2, r3
   81a3a:	68ba      	ldr	r2, [r7, #8]
   81a3c:	fbb2 f3f3 	udiv	r3, r2, r3
   81a40:	75fb      	strb	r3, [r7, #23]
	if (uc_prescale < 2) {
   81a42:	7dfb      	ldrb	r3, [r7, #23]
   81a44:	2b01      	cmp	r3, #1
   81a46:	d801      	bhi.n	81a4c <can_set_baudrate+0xdc>
		return 0;
   81a48:	2300      	movs	r3, #0
   81a4a:	e030      	b.n	81aae <can_set_baudrate+0x13e>
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   81a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   81a50:	f1a3 0208 	sub.w	r2, r3, #8
   81a54:	4613      	mov	r3, r2
   81a56:	005b      	lsls	r3, r3, #1
   81a58:	4413      	add	r3, r2
   81a5a:	005b      	lsls	r3, r3, #1
   81a5c:	4a16      	ldr	r2, [pc, #88]	; (81ab8 <can_set_baudrate+0x148>)
   81a5e:	4413      	add	r3, r2
   81a60:	613b      	str	r3, [r7, #16]

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);
   81a62:	68f8      	ldr	r0, [r7, #12]
   81a64:	4b15      	ldr	r3, [pc, #84]	; (81abc <can_set_baudrate+0x14c>)
   81a66:	4798      	blx	r3

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81a68:	693b      	ldr	r3, [r7, #16]
   81a6a:	78db      	ldrb	r3, [r3, #3]
   81a6c:	3b01      	subs	r3, #1
   81a6e:	f003 0207 	and.w	r2, r3, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81a72:	693b      	ldr	r3, [r7, #16]
   81a74:	789b      	ldrb	r3, [r3, #2]
   81a76:	3b01      	subs	r3, #1
   81a78:	011b      	lsls	r3, r3, #4
   81a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81a7e:	431a      	orrs	r2, r3
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81a80:	693b      	ldr	r3, [r7, #16]
   81a82:	785b      	ldrb	r3, [r3, #1]
   81a84:	3b01      	subs	r3, #1
   81a86:	021b      	lsls	r3, r3, #8
   81a88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   81a8c:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81a8e:	693b      	ldr	r3, [r7, #16]
   81a90:	791b      	ldrb	r3, [r3, #4]
   81a92:	3b01      	subs	r3, #1
   81a94:	031b      	lsls	r3, r3, #12
   81a96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   81a9a:	431a      	orrs	r2, r3
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   81a9c:	7dfb      	ldrb	r3, [r7, #23]
   81a9e:	3b01      	subs	r3, #1
   81aa0:	041b      	lsls	r3, r3, #16
   81aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   81aa6:	431a      	orrs	r2, r3

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   81aa8:	68fb      	ldr	r3, [r7, #12]
   81aaa:	615a      	str	r2, [r3, #20]
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
	return 1;
   81aac:	2301      	movs	r3, #1
}
   81aae:	4618      	mov	r0, r3
   81ab0:	3728      	adds	r7, #40	; 0x28
   81ab2:	46bd      	mov	sp, r7
   81ab4:	bd80      	pop	{r7, pc}
   81ab6:	bf00      	nop
   81ab8:	00087008 	.word	0x00087008
   81abc:	00081b69 	.word	0x00081b69

00081ac0 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   81ac0:	b580      	push	{r7, lr}
   81ac2:	b086      	sub	sp, #24
   81ac4:	af00      	add	r7, sp, #0
   81ac6:	60f8      	str	r0, [r7, #12]
   81ac8:	60b9      	str	r1, [r7, #8]
   81aca:	607a      	str	r2, [r7, #4]
	uint32_t ul_flag;
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
   81acc:	68f8      	ldr	r0, [r7, #12]
   81ace:	68b9      	ldr	r1, [r7, #8]
   81ad0:	687a      	ldr	r2, [r7, #4]
   81ad2:	4b17      	ldr	r3, [pc, #92]	; (81b30 <can_init+0x70>)
   81ad4:	4798      	blx	r3
   81ad6:	6178      	str	r0, [r7, #20]
	if (ul_flag == 0) {
   81ad8:	697b      	ldr	r3, [r7, #20]
   81ada:	2b00      	cmp	r3, #0
   81adc:	d101      	bne.n	81ae2 <can_init+0x22>
		return 0;
   81ade:	2300      	movs	r3, #0
   81ae0:	e021      	b.n	81b26 <can_init+0x66>
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   81ae2:	68f8      	ldr	r0, [r7, #12]
   81ae4:	4b13      	ldr	r3, [pc, #76]	; (81b34 <can_init+0x74>)
   81ae6:	4798      	blx	r3

	/* Enable the CAN controller. */
	can_enable(p_can);
   81ae8:	68f8      	ldr	r0, [r7, #12]
   81aea:	4b13      	ldr	r3, [pc, #76]	; (81b38 <can_init+0x78>)
   81aec:	4798      	blx	r3

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   81aee:	2300      	movs	r3, #0
   81af0:	617b      	str	r3, [r7, #20]
	ul_tick = 0;
   81af2:	2300      	movs	r3, #0
   81af4:	613b      	str	r3, [r7, #16]
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81af6:	e006      	b.n	81b06 <can_init+0x46>
		ul_flag = can_get_status(p_can);
   81af8:	68f8      	ldr	r0, [r7, #12]
   81afa:	4b10      	ldr	r3, [pc, #64]	; (81b3c <can_init+0x7c>)
   81afc:	4798      	blx	r3
   81afe:	6178      	str	r0, [r7, #20]
		ul_tick++;
   81b00:	693b      	ldr	r3, [r7, #16]
   81b02:	3301      	adds	r3, #1
   81b04:	613b      	str	r3, [r7, #16]
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   81b06:	697b      	ldr	r3, [r7, #20]
   81b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   81b0c:	2b00      	cmp	r3, #0
   81b0e:	d103      	bne.n	81b18 <can_init+0x58>
   81b10:	693a      	ldr	r2, [r7, #16]
   81b12:	4b0b      	ldr	r3, [pc, #44]	; (81b40 <can_init+0x80>)
   81b14:	429a      	cmp	r2, r3
   81b16:	d9ef      	bls.n	81af8 <can_init+0x38>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   81b18:	693a      	ldr	r2, [r7, #16]
   81b1a:	4b0a      	ldr	r3, [pc, #40]	; (81b44 <can_init+0x84>)
   81b1c:	429a      	cmp	r2, r3
   81b1e:	d101      	bne.n	81b24 <can_init+0x64>
		return 0;
   81b20:	2300      	movs	r3, #0
   81b22:	e000      	b.n	81b26 <can_init+0x66>
	} else {
		return 1;
   81b24:	2301      	movs	r3, #1
	}
}
   81b26:	4618      	mov	r0, r3
   81b28:	3718      	adds	r7, #24
   81b2a:	46bd      	mov	sp, r7
   81b2c:	bd80      	pop	{r7, pc}
   81b2e:	bf00      	nop
   81b30:	00081971 	.word	0x00081971
   81b34:	00081f01 	.word	0x00081f01
   81b38:	00081b49 	.word	0x00081b49
   81b3c:	00081bc1 	.word	0x00081bc1
   81b40:	0001869f 	.word	0x0001869f
   81b44:	000186a0 	.word	0x000186a0

00081b48 <can_enable>:
 * \brief Enable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
   81b48:	b480      	push	{r7}
   81b4a:	b083      	sub	sp, #12
   81b4c:	af00      	add	r7, sp, #0
   81b4e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR |= CAN_MR_CANEN;
   81b50:	687b      	ldr	r3, [r7, #4]
   81b52:	681b      	ldr	r3, [r3, #0]
   81b54:	f043 0201 	orr.w	r2, r3, #1
   81b58:	687b      	ldr	r3, [r7, #4]
   81b5a:	601a      	str	r2, [r3, #0]
}
   81b5c:	370c      	adds	r7, #12
   81b5e:	46bd      	mov	sp, r7
   81b60:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b64:	4770      	bx	lr
   81b66:	bf00      	nop

00081b68 <can_disable>:
 * \brief Disable CAN Controller.
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
   81b68:	b480      	push	{r7}
   81b6a:	b083      	sub	sp, #12
   81b6c:	af00      	add	r7, sp, #0
   81b6e:	6078      	str	r0, [r7, #4]
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   81b70:	687b      	ldr	r3, [r7, #4]
   81b72:	681b      	ldr	r3, [r3, #0]
   81b74:	f023 0201 	bic.w	r2, r3, #1
   81b78:	687b      	ldr	r3, [r7, #4]
   81b7a:	601a      	str	r2, [r3, #0]
}
   81b7c:	370c      	adds	r7, #12
   81b7e:	46bd      	mov	sp, r7
   81b80:	f85d 7b04 	ldr.w	r7, [sp], #4
   81b84:	4770      	bx	lr
   81b86:	bf00      	nop

00081b88 <can_enable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be enabled.
 */
void can_enable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81b88:	b480      	push	{r7}
   81b8a:	b083      	sub	sp, #12
   81b8c:	af00      	add	r7, sp, #0
   81b8e:	6078      	str	r0, [r7, #4]
   81b90:	6039      	str	r1, [r7, #0]
	p_can->CAN_IER = dw_mask;
   81b92:	687b      	ldr	r3, [r7, #4]
   81b94:	683a      	ldr	r2, [r7, #0]
   81b96:	605a      	str	r2, [r3, #4]
}
   81b98:	370c      	adds	r7, #12
   81b9a:	46bd      	mov	sp, r7
   81b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81ba0:	4770      	bx	lr
   81ba2:	bf00      	nop

00081ba4 <can_disable_interrupt>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 * \param dw_mask Interrupt to be disabled.
 */
void can_disable_interrupt(Can *p_can, uint32_t dw_mask)
{
   81ba4:	b480      	push	{r7}
   81ba6:	b083      	sub	sp, #12
   81ba8:	af00      	add	r7, sp, #0
   81baa:	6078      	str	r0, [r7, #4]
   81bac:	6039      	str	r1, [r7, #0]
	p_can->CAN_IDR = dw_mask;
   81bae:	687b      	ldr	r3, [r7, #4]
   81bb0:	683a      	ldr	r2, [r7, #0]
   81bb2:	609a      	str	r2, [r3, #8]
}
   81bb4:	370c      	adds	r7, #12
   81bb6:	46bd      	mov	sp, r7
   81bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
   81bbc:	4770      	bx	lr
   81bbe:	bf00      	nop

00081bc0 <can_get_status>:
 * \param p_can Pointer to a CAN peripheral instance.
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
   81bc0:	b480      	push	{r7}
   81bc2:	b083      	sub	sp, #12
   81bc4:	af00      	add	r7, sp, #0
   81bc6:	6078      	str	r0, [r7, #4]
	return (p_can->CAN_SR);
   81bc8:	687b      	ldr	r3, [r7, #4]
   81bca:	691b      	ldr	r3, [r3, #16]
}
   81bcc:	4618      	mov	r0, r3
   81bce:	370c      	adds	r7, #12
   81bd0:	46bd      	mov	sp, r7
   81bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
   81bd6:	4770      	bx	lr

00081bd8 <can_global_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param uc_mask Mask for mailboxes that are requested to transfer.
 */
void can_global_send_transfer_cmd(Can *p_can, uint8_t uc_mask)
{
   81bd8:	b480      	push	{r7}
   81bda:	b085      	sub	sp, #20
   81bdc:	af00      	add	r7, sp, #0
   81bde:	6078      	str	r0, [r7, #4]
   81be0:	460b      	mov	r3, r1
   81be2:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_reg;

	ul_reg = p_can->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   81be4:	687b      	ldr	r3, [r7, #4]
   81be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   81be8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   81bec:	60fb      	str	r3, [r7, #12]
	p_can->CAN_TCR = ul_reg | uc_mask;
   81bee:	78fa      	ldrb	r2, [r7, #3]
   81bf0:	68fb      	ldr	r3, [r7, #12]
   81bf2:	431a      	orrs	r2, r3
   81bf4:	687b      	ldr	r3, [r7, #4]
   81bf6:	625a      	str	r2, [r3, #36]	; 0x24
}
   81bf8:	3714      	adds	r7, #20
   81bfa:	46bd      	mov	sp, r7
   81bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c00:	4770      	bx	lr
   81c02:	bf00      	nop

00081c04 <can_mailbox_get_status>:
 * \param uc_index Indicate which mailbox is to be read.
 *
 * \retval The mailbox status.
 */
uint32_t can_mailbox_get_status(Can *p_can, uint8_t uc_index)
{
   81c04:	b480      	push	{r7}
   81c06:	b083      	sub	sp, #12
   81c08:	af00      	add	r7, sp, #0
   81c0a:	6078      	str	r0, [r7, #4]
   81c0c:	460b      	mov	r3, r1
   81c0e:	70fb      	strb	r3, [r7, #3]
	return (p_can->CAN_MB[uc_index].CAN_MSR);
   81c10:	78fb      	ldrb	r3, [r7, #3]
   81c12:	687a      	ldr	r2, [r7, #4]
   81c14:	015b      	lsls	r3, r3, #5
   81c16:	4413      	add	r3, r2
   81c18:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81c1c:	681b      	ldr	r3, [r3, #0]
}
   81c1e:	4618      	mov	r0, r3
   81c20:	370c      	adds	r7, #12
   81c22:	46bd      	mov	sp, r7
   81c24:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c28:	4770      	bx	lr
   81c2a:	bf00      	nop

00081c2c <can_mailbox_send_transfer_cmd>:
 *
 * \param p_can   Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_send_transfer_cmd(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81c2c:	b480      	push	{r7}
   81c2e:	b085      	sub	sp, #20
   81c30:	af00      	add	r7, sp, #0
   81c32:	6078      	str	r0, [r7, #4]
   81c34:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81c36:	683b      	ldr	r3, [r7, #0]
   81c38:	681b      	ldr	r3, [r3, #0]
   81c3a:	73fb      	strb	r3, [r7, #15]

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81c3c:	7bfb      	ldrb	r3, [r7, #15]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
   81c3e:	683a      	ldr	r2, [r7, #0]
   81c40:	7992      	ldrb	r2, [r2, #6]
   81c42:	0412      	lsls	r2, r2, #16
   81c44:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;

	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |
   81c48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   81c4c:	6879      	ldr	r1, [r7, #4]
   81c4e:	015b      	lsls	r3, r3, #5
   81c50:	440b      	add	r3, r1
   81c52:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81c56:	605a      	str	r2, [r3, #4]
			CAN_MCR_MDLC(p_mailbox->uc_length);;
}
   81c58:	3714      	adds	r7, #20
   81c5a:	46bd      	mov	sp, r7
   81c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81c60:	4770      	bx	lr
   81c62:	bf00      	nop

00081c64 <can_mailbox_init>:
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81c64:	b480      	push	{r7}
   81c66:	b085      	sub	sp, #20
   81c68:	af00      	add	r7, sp, #0
   81c6a:	6078      	str	r0, [r7, #4]
   81c6c:	6039      	str	r1, [r7, #0]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81c6e:	683b      	ldr	r3, [r7, #0]
   81c70:	681b      	ldr	r3, [r3, #0]
   81c72:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   81c74:	683b      	ldr	r3, [r7, #0]
   81c76:	791b      	ldrb	r3, [r3, #4]
   81c78:	2b00      	cmp	r3, #0
   81c7a:	d12e      	bne.n	81cda <can_mailbox_init+0x76>
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   81c7c:	7bfb      	ldrb	r3, [r7, #15]
   81c7e:	687a      	ldr	r2, [r7, #4]
   81c80:	3310      	adds	r3, #16
   81c82:	015b      	lsls	r3, r3, #5
   81c84:	4413      	add	r3, r2
   81c86:	2200      	movs	r2, #0
   81c88:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   81c8a:	7bfb      	ldrb	r3, [r7, #15]
   81c8c:	687a      	ldr	r2, [r7, #4]
   81c8e:	3310      	adds	r3, #16
   81c90:	015b      	lsls	r3, r3, #5
   81c92:	4413      	add	r3, r2
   81c94:	2200      	movs	r2, #0
   81c96:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   81c98:	7bfb      	ldrb	r3, [r7, #15]
   81c9a:	687a      	ldr	r2, [r7, #4]
   81c9c:	015b      	lsls	r3, r3, #5
   81c9e:	4413      	add	r3, r2
   81ca0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81ca4:	2200      	movs	r2, #0
   81ca6:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   81ca8:	7bfb      	ldrb	r3, [r7, #15]
   81caa:	687a      	ldr	r2, [r7, #4]
   81cac:	015b      	lsls	r3, r3, #5
   81cae:	4413      	add	r3, r2
   81cb0:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81cb4:	2200      	movs	r2, #0
   81cb6:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   81cb8:	7bfb      	ldrb	r3, [r7, #15]
   81cba:	687a      	ldr	r2, [r7, #4]
   81cbc:	015b      	lsls	r3, r3, #5
   81cbe:	4413      	add	r3, r2
   81cc0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81cc4:	2200      	movs	r2, #0
   81cc6:	601a      	str	r2, [r3, #0]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   81cc8:	7bfb      	ldrb	r3, [r7, #15]
   81cca:	687a      	ldr	r2, [r7, #4]
   81ccc:	015b      	lsls	r3, r3, #5
   81cce:	4413      	add	r3, r2
   81cd0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81cd4:	2200      	movs	r2, #0
   81cd6:	605a      	str	r2, [r3, #4]
		return;
   81cd8:	e04e      	b.n	81d78 <can_mailbox_init+0x114>
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81cda:	7bfb      	ldrb	r3, [r7, #15]
   81cdc:	7bfa      	ldrb	r2, [r7, #15]
   81cde:	6879      	ldr	r1, [r7, #4]
   81ce0:	3210      	adds	r2, #16
   81ce2:	0152      	lsls	r2, r2, #5
   81ce4:	440a      	add	r2, r1
   81ce6:	6812      	ldr	r2, [r2, #0]
   81ce8:	f422 2170 	bic.w	r1, r2, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   81cec:	683a      	ldr	r2, [r7, #0]
   81cee:	79d2      	ldrb	r2, [r2, #7]
   81cf0:	0412      	lsls	r2, r2, #16
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_PRIOR_Msk) |
   81cf2:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81cf4:	6879      	ldr	r1, [r7, #4]
   81cf6:	3310      	adds	r3, #16
   81cf8:	015b      	lsls	r3, r3, #5
   81cfa:	440b      	add	r3, r1
   81cfc:	601a      	str	r2, [r3, #0]
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   81cfe:	683b      	ldr	r3, [r7, #0]
   81d00:	795b      	ldrb	r3, [r3, #5]
   81d02:	2b00      	cmp	r3, #0
   81d04:	d015      	beq.n	81d32 <can_mailbox_init+0xce>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   81d06:	7bfb      	ldrb	r3, [r7, #15]
   81d08:	683a      	ldr	r2, [r7, #0]
   81d0a:	68d2      	ldr	r2, [r2, #12]
   81d0c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81d10:	6879      	ldr	r1, [r7, #4]
   81d12:	3310      	adds	r3, #16
   81d14:	015b      	lsls	r3, r3, #5
   81d16:	440b      	add	r3, r1
   81d18:	605a      	str	r2, [r3, #4]
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81d1a:	7bfb      	ldrb	r3, [r7, #15]
   81d1c:	683a      	ldr	r2, [r7, #0]
   81d1e:	6912      	ldr	r2, [r2, #16]
   81d20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81d24:	6879      	ldr	r1, [r7, #4]
   81d26:	015b      	lsls	r3, r3, #5
   81d28:	440b      	add	r3, r1
   81d2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81d2e:	601a      	str	r2, [r3, #0]
   81d30:	e010      	b.n	81d54 <can_mailbox_init+0xf0>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   81d32:	7bfb      	ldrb	r3, [r7, #15]
   81d34:	683a      	ldr	r2, [r7, #0]
   81d36:	68d2      	ldr	r2, [r2, #12]
   81d38:	6879      	ldr	r1, [r7, #4]
   81d3a:	3310      	adds	r3, #16
   81d3c:	015b      	lsls	r3, r3, #5
   81d3e:	440b      	add	r3, r1
   81d40:	605a      	str	r2, [r3, #4]
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81d42:	7bfb      	ldrb	r3, [r7, #15]
   81d44:	683a      	ldr	r2, [r7, #0]
   81d46:	6912      	ldr	r2, [r2, #16]
   81d48:	6879      	ldr	r1, [r7, #4]
   81d4a:	015b      	lsls	r3, r3, #5
   81d4c:	440b      	add	r3, r1
   81d4e:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81d52:	601a      	str	r2, [r3, #0]
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81d54:	7bfb      	ldrb	r3, [r7, #15]
   81d56:	7bfa      	ldrb	r2, [r7, #15]
   81d58:	6879      	ldr	r1, [r7, #4]
   81d5a:	3210      	adds	r2, #16
   81d5c:	0152      	lsls	r2, r2, #5
   81d5e:	440a      	add	r2, r1
   81d60:	6812      	ldr	r2, [r2, #0]
   81d62:	f022 61e0 	bic.w	r1, r2, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   81d66:	683a      	ldr	r2, [r7, #0]
   81d68:	7912      	ldrb	r2, [r2, #4]
   81d6a:	0612      	lsls	r2, r2, #24
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
			~CAN_MMR_MOT_Msk) |
   81d6c:	430a      	orrs	r2, r1
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   81d6e:	6879      	ldr	r1, [r7, #4]
   81d70:	3310      	adds	r3, #16
   81d72:	015b      	lsls	r3, r3, #5
   81d74:	440b      	add	r3, r1
   81d76:	601a      	str	r2, [r3, #0]
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   81d78:	3714      	adds	r7, #20
   81d7a:	46bd      	mov	sp, r7
   81d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
   81d80:	4770      	bx	lr
   81d82:	bf00      	nop

00081d84 <can_mailbox_read>:
 * \retval Different CAN mailbox transfer status.
 *
 * \note Read the mailbox status before calling this function.
 */
uint32_t can_mailbox_read(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81d84:	b580      	push	{r7, lr}
   81d86:	b086      	sub	sp, #24
   81d88:	af00      	add	r7, sp, #0
   81d8a:	6078      	str	r0, [r7, #4]
   81d8c:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   81d8e:	2300      	movs	r3, #0
   81d90:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81d92:	683b      	ldr	r3, [r7, #0]
   81d94:	681b      	ldr	r3, [r3, #0]
   81d96:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   81d98:	683b      	ldr	r3, [r7, #0]
   81d9a:	689b      	ldr	r3, [r3, #8]
   81d9c:	60fb      	str	r3, [r7, #12]

	/* Check whether there is overwriting happening in Receive with
	 * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {
   81d9e:	68fb      	ldr	r3, [r7, #12]
   81da0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81da4:	2b00      	cmp	r3, #0
   81da6:	d006      	beq.n	81db6 <can_mailbox_read+0x32>
   81da8:	68fb      	ldr	r3, [r7, #12]
   81daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81dae:	2b00      	cmp	r3, #0
   81db0:	d001      	beq.n	81db6 <can_mailbox_read+0x32>
		ul_retval = CAN_MAILBOX_RX_OVER;
   81db2:	2302      	movs	r3, #2
   81db4:	617b      	str	r3, [r7, #20]
	}

	/* Read the message family ID. */
	p_mailbox->ul_fid = p_can->CAN_MB[uc_index].CAN_MFID &
   81db6:	7cfb      	ldrb	r3, [r7, #19]
   81db8:	687a      	ldr	r2, [r7, #4]
   81dba:	015b      	lsls	r3, r3, #5
   81dbc:	4413      	add	r3, r2
   81dbe:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81dc2:	685b      	ldr	r3, [r3, #4]
   81dc4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   81dc8:	683b      	ldr	r3, [r7, #0]
   81dca:	615a      	str	r2, [r3, #20]
			CAN_MFID_MFID_Msk;

	/* Read received data length. */
	p_mailbox->uc_length
		= (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   81dcc:	68fb      	ldr	r3, [r7, #12]
   81dce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81dd2:	0c1b      	lsrs	r3, r3, #16
   81dd4:	b2da      	uxtb	r2, r3
   81dd6:	683b      	ldr	r3, [r7, #0]
   81dd8:	719a      	strb	r2, [r3, #6]

	/* Read received data. */
	p_mailbox->ul_datal = p_can->CAN_MB[uc_index].CAN_MDL;
   81dda:	7cfb      	ldrb	r3, [r7, #19]
   81ddc:	687a      	ldr	r2, [r7, #4]
   81dde:	015b      	lsls	r3, r3, #5
   81de0:	4413      	add	r3, r2
   81de2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81de6:	685a      	ldr	r2, [r3, #4]
   81de8:	683b      	ldr	r3, [r7, #0]
   81dea:	619a      	str	r2, [r3, #24]
	if (p_mailbox->uc_length > 4) {
   81dec:	683b      	ldr	r3, [r7, #0]
   81dee:	799b      	ldrb	r3, [r3, #6]
   81df0:	2b04      	cmp	r3, #4
   81df2:	d908      	bls.n	81e06 <can_mailbox_read+0x82>
		p_mailbox->ul_datah = p_can->CAN_MB[uc_index].CAN_MDH;
   81df4:	7cfb      	ldrb	r3, [r7, #19]
   81df6:	687a      	ldr	r2, [r7, #4]
   81df8:	015b      	lsls	r3, r3, #5
   81dfa:	4413      	add	r3, r2
   81dfc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81e00:	681a      	ldr	r2, [r3, #0]
   81e02:	683b      	ldr	r3, [r7, #0]
   81e04:	61da      	str	r2, [r3, #28]
	}

	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = p_can->CAN_MB[uc_index].CAN_MSR;
   81e06:	7cfb      	ldrb	r3, [r7, #19]
   81e08:	687a      	ldr	r2, [r7, #4]
   81e0a:	015b      	lsls	r3, r3, #5
   81e0c:	4413      	add	r3, r2
   81e0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81e12:	681a      	ldr	r2, [r3, #0]
   81e14:	683b      	ldr	r3, [r7, #0]
   81e16:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81e18:	683b      	ldr	r3, [r7, #0]
   81e1a:	689b      	ldr	r3, [r3, #8]
   81e1c:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {
   81e1e:	68fb      	ldr	r3, [r7, #12]
   81e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   81e24:	2b00      	cmp	r3, #0
   81e26:	d003      	beq.n	81e30 <can_mailbox_read+0xac>
		ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;
   81e28:	697b      	ldr	r3, [r7, #20]
   81e2a:	f043 0304 	orr.w	r3, r3, #4
   81e2e:	617b      	str	r3, [r7, #20]
	} else {
		ul_retval |= CAN_MAILBOX_TRANSFER_OK;
	}

	/* Enable next receive process. */
	can_mailbox_send_transfer_cmd(p_can, p_mailbox);
   81e30:	6878      	ldr	r0, [r7, #4]
   81e32:	6839      	ldr	r1, [r7, #0]
   81e34:	4b03      	ldr	r3, [pc, #12]	; (81e44 <can_mailbox_read+0xc0>)
   81e36:	4798      	blx	r3

	return ul_retval;
   81e38:	697b      	ldr	r3, [r7, #20]
}
   81e3a:	4618      	mov	r0, r3
   81e3c:	3718      	adds	r7, #24
   81e3e:	46bd      	mov	sp, r7
   81e40:	bd80      	pop	{r7, pc}
   81e42:	bf00      	nop
   81e44:	00081c2d 	.word	0x00081c2d

00081e48 <can_mailbox_write>:
 * \note After calling this function, the mailbox message won't be sent out
 *until
 * can_mailbox_send_transfer_cmd() is called.
 */
uint32_t can_mailbox_write(Can *p_can, can_mb_conf_t *p_mailbox)
{
   81e48:	b580      	push	{r7, lr}
   81e4a:	b084      	sub	sp, #16
   81e4c:	af00      	add	r7, sp, #0
   81e4e:	6078      	str	r0, [r7, #4]
   81e50:	6039      	str	r1, [r7, #0]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   81e52:	683b      	ldr	r3, [r7, #0]
   81e54:	681b      	ldr	r3, [r3, #0]
   81e56:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = can_mailbox_get_status(p_can, uc_index);
   81e58:	7bfb      	ldrb	r3, [r7, #15]
   81e5a:	6878      	ldr	r0, [r7, #4]
   81e5c:	4619      	mov	r1, r3
   81e5e:	4b27      	ldr	r3, [pc, #156]	; (81efc <can_mailbox_write+0xb4>)
   81e60:	4798      	blx	r3
   81e62:	4602      	mov	r2, r0
   81e64:	683b      	ldr	r3, [r7, #0]
   81e66:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   81e68:	683b      	ldr	r3, [r7, #0]
   81e6a:	689b      	ldr	r3, [r3, #8]
   81e6c:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   81e6e:	68bb      	ldr	r3, [r7, #8]
   81e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   81e74:	2b00      	cmp	r3, #0
   81e76:	d101      	bne.n	81e7c <can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   81e78:	2301      	movs	r3, #1
   81e7a:	e03b      	b.n	81ef4 <can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) {
   81e7c:	683b      	ldr	r3, [r7, #0]
   81e7e:	795b      	ldrb	r3, [r3, #5]
   81e80:	2b00      	cmp	r3, #0
   81e82:	d00b      	beq.n	81e9c <can_mailbox_write+0x54>
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   81e84:	7bfb      	ldrb	r3, [r7, #15]
   81e86:	683a      	ldr	r2, [r7, #0]
   81e88:	6912      	ldr	r2, [r2, #16]
   81e8a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81e8e:	6879      	ldr	r1, [r7, #4]
   81e90:	015b      	lsls	r3, r3, #5
   81e92:	440b      	add	r3, r1
   81e94:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81e98:	601a      	str	r2, [r3, #0]
   81e9a:	e008      	b.n	81eae <can_mailbox_write+0x66>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   81e9c:	7bfb      	ldrb	r3, [r7, #15]
   81e9e:	683a      	ldr	r2, [r7, #0]
   81ea0:	6912      	ldr	r2, [r2, #16]
   81ea2:	6879      	ldr	r1, [r7, #4]
   81ea4:	015b      	lsls	r3, r3, #5
   81ea6:	440b      	add	r3, r1
   81ea8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   81eac:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	p_can->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   81eae:	7bfb      	ldrb	r3, [r7, #15]
   81eb0:	683a      	ldr	r2, [r7, #0]
   81eb2:	6992      	ldr	r2, [r2, #24]
   81eb4:	6879      	ldr	r1, [r7, #4]
   81eb6:	015b      	lsls	r3, r3, #5
   81eb8:	440b      	add	r3, r1
   81eba:	f503 7304 	add.w	r3, r3, #528	; 0x210
   81ebe:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {
   81ec0:	683b      	ldr	r3, [r7, #0]
   81ec2:	799b      	ldrb	r3, [r3, #6]
   81ec4:	2b04      	cmp	r3, #4
   81ec6:	d908      	bls.n	81eda <can_mailbox_write+0x92>
		p_can->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   81ec8:	7bfb      	ldrb	r3, [r7, #15]
   81eca:	683a      	ldr	r2, [r7, #0]
   81ecc:	69d2      	ldr	r2, [r2, #28]
   81ece:	6879      	ldr	r1, [r7, #4]
   81ed0:	015b      	lsls	r3, r3, #5
   81ed2:	440b      	add	r3, r1
   81ed4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ed8:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	p_can->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   81eda:	7bfb      	ldrb	r3, [r7, #15]
   81edc:	683a      	ldr	r2, [r7, #0]
   81ede:	7992      	ldrb	r2, [r2, #6]
   81ee0:	0412      	lsls	r2, r2, #16
   81ee2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   81ee6:	6879      	ldr	r1, [r7, #4]
   81ee8:	015b      	lsls	r3, r3, #5
   81eea:	440b      	add	r3, r1
   81eec:	f503 7306 	add.w	r3, r3, #536	; 0x218
   81ef0:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   81ef2:	2300      	movs	r3, #0
}
   81ef4:	4618      	mov	r0, r3
   81ef6:	3710      	adds	r7, #16
   81ef8:	46bd      	mov	sp, r7
   81efa:	bd80      	pop	{r7, pc}
   81efc:	00081c05 	.word	0x00081c05

00081f00 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   81f00:	b580      	push	{r7, lr}
   81f02:	b08c      	sub	sp, #48	; 0x30
   81f04:	af00      	add	r7, sp, #0
   81f06:	6078      	str	r0, [r7, #4]
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   81f08:	2300      	movs	r3, #0
   81f0a:	743b      	strb	r3, [r7, #16]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81f0c:	2300      	movs	r3, #0
   81f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81f12:	e00d      	b.n	81f30 <can_reset_all_mailbox+0x30>
		mb_config_t.ul_mb_idx = i;
   81f14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81f18:	60fb      	str	r3, [r7, #12]
		can_mailbox_init(p_can, &mb_config_t);
   81f1a:	f107 030c 	add.w	r3, r7, #12
   81f1e:	6878      	ldr	r0, [r7, #4]
   81f20:	4619      	mov	r1, r3
   81f22:	4b07      	ldr	r3, [pc, #28]	; (81f40 <can_reset_all_mailbox+0x40>)
   81f24:	4798      	blx	r3
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   81f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81f2a:	3301      	adds	r3, #1
   81f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   81f30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   81f34:	2b07      	cmp	r3, #7
   81f36:	d9ed      	bls.n	81f14 <can_reset_all_mailbox+0x14>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   81f38:	3730      	adds	r7, #48	; 0x30
   81f3a:	46bd      	mov	sp, r7
   81f3c:	bd80      	pop	{r7, pc}
   81f3e:	bf00      	nop
   81f40:	00081c65 	.word	0x00081c65

00081f44 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   81f44:	b480      	push	{r7}
   81f46:	b085      	sub	sp, #20
   81f48:	af00      	add	r7, sp, #0
   81f4a:	60f8      	str	r0, [r7, #12]
   81f4c:	60b9      	str	r1, [r7, #8]
   81f4e:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f50:	687b      	ldr	r3, [r7, #4]
   81f52:	2b00      	cmp	r3, #0
   81f54:	d003      	beq.n	81f5e <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   81f56:	68fb      	ldr	r3, [r7, #12]
   81f58:	68ba      	ldr	r2, [r7, #8]
   81f5a:	665a      	str	r2, [r3, #100]	; 0x64
   81f5c:	e002      	b.n	81f64 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f5e:	68fb      	ldr	r3, [r7, #12]
   81f60:	68ba      	ldr	r2, [r7, #8]
   81f62:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   81f64:	3714      	adds	r7, #20
   81f66:	46bd      	mov	sp, r7
   81f68:	f85d 7b04 	ldr.w	r7, [sp], #4
   81f6c:	4770      	bx	lr
   81f6e:	bf00      	nop

00081f70 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   81f70:	b480      	push	{r7}
   81f72:	b087      	sub	sp, #28
   81f74:	af00      	add	r7, sp, #0
   81f76:	60f8      	str	r0, [r7, #12]
   81f78:	60b9      	str	r1, [r7, #8]
   81f7a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81f7c:	68fb      	ldr	r3, [r7, #12]
   81f7e:	687a      	ldr	r2, [r7, #4]
   81f80:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81f82:	68bb      	ldr	r3, [r7, #8]
   81f84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f88:	d01f      	beq.n	81fca <pio_set_peripheral+0x5a>
   81f8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f8e:	d805      	bhi.n	81f9c <pio_set_peripheral+0x2c>
   81f90:	2b00      	cmp	r3, #0
   81f92:	d027      	beq.n	81fe4 <pio_set_peripheral+0x74>
   81f94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f98:	d00a      	beq.n	81fb0 <pio_set_peripheral+0x40>
   81f9a:	e01f      	b.n	81fdc <pio_set_peripheral+0x6c>
   81f9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81fa0:	d020      	beq.n	81fe4 <pio_set_peripheral+0x74>
   81fa2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81fa6:	d01d      	beq.n	81fe4 <pio_set_peripheral+0x74>
   81fa8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81fac:	d01a      	beq.n	81fe4 <pio_set_peripheral+0x74>
   81fae:	e015      	b.n	81fdc <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81fb0:	68fb      	ldr	r3, [r7, #12]
   81fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81fb4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81fb6:	68fb      	ldr	r3, [r7, #12]
   81fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   81fba:	687b      	ldr	r3, [r7, #4]
   81fbc:	43d9      	mvns	r1, r3
   81fbe:	697b      	ldr	r3, [r7, #20]
   81fc0:	400b      	ands	r3, r1
   81fc2:	401a      	ands	r2, r3
   81fc4:	68fb      	ldr	r3, [r7, #12]
   81fc6:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81fc8:	e008      	b.n	81fdc <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81fca:	68fb      	ldr	r3, [r7, #12]
   81fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   81fce:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81fd0:	687a      	ldr	r2, [r7, #4]
   81fd2:	697b      	ldr	r3, [r7, #20]
   81fd4:	431a      	orrs	r2, r3
   81fd6:	68fb      	ldr	r3, [r7, #12]
   81fd8:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   81fda:	bf00      	nop
#else
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
   81fdc:	68fb      	ldr	r3, [r7, #12]
   81fde:	687a      	ldr	r2, [r7, #4]
   81fe0:	605a      	str	r2, [r3, #4]
   81fe2:	e000      	b.n	81fe6 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   81fe4:	bf00      	nop
#error "Unsupported device"
#endif

	// Remove the pins from under the control of PIO
	p_pio->PIO_PDR = ul_mask;
}
   81fe6:	371c      	adds	r7, #28
   81fe8:	46bd      	mov	sp, r7
   81fea:	f85d 7b04 	ldr.w	r7, [sp], #4
   81fee:	4770      	bx	lr

00081ff0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   81ff0:	b580      	push	{r7, lr}
   81ff2:	b084      	sub	sp, #16
   81ff4:	af00      	add	r7, sp, #0
   81ff6:	60f8      	str	r0, [r7, #12]
   81ff8:	60b9      	str	r1, [r7, #8]
   81ffa:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   81ffc:	68f8      	ldr	r0, [r7, #12]
   81ffe:	68b9      	ldr	r1, [r7, #8]
   82000:	4b18      	ldr	r3, [pc, #96]	; (82064 <pio_set_input+0x74>)
   82002:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82004:	687b      	ldr	r3, [r7, #4]
   82006:	f003 0301 	and.w	r3, r3, #1
   8200a:	68f8      	ldr	r0, [r7, #12]
   8200c:	68b9      	ldr	r1, [r7, #8]
   8200e:	461a      	mov	r2, r3
   82010:	4b15      	ldr	r3, [pc, #84]	; (82068 <pio_set_input+0x78>)
   82012:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82014:	687b      	ldr	r3, [r7, #4]
   82016:	f003 030a 	and.w	r3, r3, #10
   8201a:	2b00      	cmp	r3, #0
   8201c:	d003      	beq.n	82026 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8201e:	68fb      	ldr	r3, [r7, #12]
   82020:	68ba      	ldr	r2, [r7, #8]
   82022:	621a      	str	r2, [r3, #32]
   82024:	e002      	b.n	8202c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82026:	68fb      	ldr	r3, [r7, #12]
   82028:	68ba      	ldr	r2, [r7, #8]
   8202a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8202c:	687b      	ldr	r3, [r7, #4]
   8202e:	f003 0302 	and.w	r3, r3, #2
   82032:	2b00      	cmp	r3, #0
   82034:	d004      	beq.n	82040 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82036:	68fb      	ldr	r3, [r7, #12]
   82038:	68ba      	ldr	r2, [r7, #8]
   8203a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8203e:	e008      	b.n	82052 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82040:	687b      	ldr	r3, [r7, #4]
   82042:	f003 0308 	and.w	r3, r3, #8
   82046:	2b00      	cmp	r3, #0
   82048:	d003      	beq.n	82052 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   8204a:	68fb      	ldr	r3, [r7, #12]
   8204c:	68ba      	ldr	r2, [r7, #8]
   8204e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82052:	68fb      	ldr	r3, [r7, #12]
   82054:	68ba      	ldr	r2, [r7, #8]
   82056:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82058:	68fb      	ldr	r3, [r7, #12]
   8205a:	68ba      	ldr	r2, [r7, #8]
   8205c:	601a      	str	r2, [r3, #0]
}
   8205e:	3710      	adds	r7, #16
   82060:	46bd      	mov	sp, r7
   82062:	bd80      	pop	{r7, pc}
   82064:	000820d1 	.word	0x000820d1
   82068:	00081f45 	.word	0x00081f45

0008206c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8206c:	b580      	push	{r7, lr}
   8206e:	b084      	sub	sp, #16
   82070:	af00      	add	r7, sp, #0
   82072:	60f8      	str	r0, [r7, #12]
   82074:	60b9      	str	r1, [r7, #8]
   82076:	607a      	str	r2, [r7, #4]
   82078:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8207a:	68f8      	ldr	r0, [r7, #12]
   8207c:	68b9      	ldr	r1, [r7, #8]
   8207e:	4b12      	ldr	r3, [pc, #72]	; (820c8 <pio_set_output+0x5c>)
   82080:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   82082:	68f8      	ldr	r0, [r7, #12]
   82084:	68b9      	ldr	r1, [r7, #8]
   82086:	69ba      	ldr	r2, [r7, #24]
   82088:	4b10      	ldr	r3, [pc, #64]	; (820cc <pio_set_output+0x60>)
   8208a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8208c:	683b      	ldr	r3, [r7, #0]
   8208e:	2b00      	cmp	r3, #0
   82090:	d003      	beq.n	8209a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   82092:	68fb      	ldr	r3, [r7, #12]
   82094:	68ba      	ldr	r2, [r7, #8]
   82096:	651a      	str	r2, [r3, #80]	; 0x50
   82098:	e002      	b.n	820a0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8209a:	68fb      	ldr	r3, [r7, #12]
   8209c:	68ba      	ldr	r2, [r7, #8]
   8209e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   820a0:	687b      	ldr	r3, [r7, #4]
   820a2:	2b00      	cmp	r3, #0
   820a4:	d003      	beq.n	820ae <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   820a6:	68fb      	ldr	r3, [r7, #12]
   820a8:	68ba      	ldr	r2, [r7, #8]
   820aa:	631a      	str	r2, [r3, #48]	; 0x30
   820ac:	e002      	b.n	820b4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   820ae:	68fb      	ldr	r3, [r7, #12]
   820b0:	68ba      	ldr	r2, [r7, #8]
   820b2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   820b4:	68fb      	ldr	r3, [r7, #12]
   820b6:	68ba      	ldr	r2, [r7, #8]
   820b8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   820ba:	68fb      	ldr	r3, [r7, #12]
   820bc:	68ba      	ldr	r2, [r7, #8]
   820be:	601a      	str	r2, [r3, #0]
}
   820c0:	3710      	adds	r7, #16
   820c2:	46bd      	mov	sp, r7
   820c4:	bd80      	pop	{r7, pc}
   820c6:	bf00      	nop
   820c8:	000820d1 	.word	0x000820d1
   820cc:	00081f45 	.word	0x00081f45

000820d0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   820d0:	b480      	push	{r7}
   820d2:	b083      	sub	sp, #12
   820d4:	af00      	add	r7, sp, #0
   820d6:	6078      	str	r0, [r7, #4]
   820d8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   820da:	687b      	ldr	r3, [r7, #4]
   820dc:	683a      	ldr	r2, [r7, #0]
   820de:	645a      	str	r2, [r3, #68]	; 0x44
}
   820e0:	370c      	adds	r7, #12
   820e2:	46bd      	mov	sp, r7
   820e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   820e8:	4770      	bx	lr
   820ea:	bf00      	nop

000820ec <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   820ec:	b480      	push	{r7}
   820ee:	b083      	sub	sp, #12
   820f0:	af00      	add	r7, sp, #0
   820f2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   820f4:	687b      	ldr	r3, [r7, #4]
   820f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   820f8:	4618      	mov	r0, r3
   820fa:	370c      	adds	r7, #12
   820fc:	46bd      	mov	sp, r7
   820fe:	f85d 7b04 	ldr.w	r7, [sp], #4
   82102:	4770      	bx	lr

00082104 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82104:	b480      	push	{r7}
   82106:	b083      	sub	sp, #12
   82108:	af00      	add	r7, sp, #0
   8210a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   8210c:	687b      	ldr	r3, [r7, #4]
   8210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82110:	4618      	mov	r0, r3
   82112:	370c      	adds	r7, #12
   82114:	46bd      	mov	sp, r7
   82116:	f85d 7b04 	ldr.w	r7, [sp], #4
   8211a:	4770      	bx	lr

0008211c <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   8211c:	b480      	push	{r7}
   8211e:	b085      	sub	sp, #20
   82120:	af00      	add	r7, sp, #0
   82122:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82124:	687b      	ldr	r3, [r7, #4]
   82126:	095b      	lsrs	r3, r3, #5
   82128:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8212c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82130:	025b      	lsls	r3, r3, #9
   82132:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 1.
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   82134:	687b      	ldr	r3, [r7, #4]
   82136:	f003 031f 	and.w	r3, r3, #31
   8213a:	2201      	movs	r2, #1
   8213c:	fa02 f303 	lsl.w	r3, r2, r3
   82140:	461a      	mov	r2, r3
   82142:	68fb      	ldr	r3, [r7, #12]
   82144:	631a      	str	r2, [r3, #48]	; 0x30
}
   82146:	3714      	adds	r7, #20
   82148:	46bd      	mov	sp, r7
   8214a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8214e:	4770      	bx	lr

00082150 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   82150:	b480      	push	{r7}
   82152:	b085      	sub	sp, #20
   82154:	af00      	add	r7, sp, #0
   82156:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82158:	687b      	ldr	r3, [r7, #4]
   8215a:	095b      	lsrs	r3, r3, #5
   8215c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82160:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82164:	025b      	lsls	r3, r3, #9
   82166:	60fb      	str	r3, [r7, #12]
	// Value to be driven on the I/O line: 0.
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   82168:	687b      	ldr	r3, [r7, #4]
   8216a:	f003 031f 	and.w	r3, r3, #31
   8216e:	2201      	movs	r2, #1
   82170:	fa02 f303 	lsl.w	r3, r2, r3
   82174:	461a      	mov	r2, r3
   82176:	68fb      	ldr	r3, [r7, #12]
   82178:	635a      	str	r2, [r3, #52]	; 0x34
}
   8217a:	3714      	adds	r7, #20
   8217c:	46bd      	mov	sp, r7
   8217e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82182:	4770      	bx	lr

00082184 <pio_toggle_pin>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_toggle_pin(uint32_t ul_pin)
{
   82184:	b480      	push	{r7}
   82186:	b085      	sub	sp, #20
   82188:	af00      	add	r7, sp, #0
   8218a:	6078      	str	r0, [r7, #4]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8218c:	687b      	ldr	r3, [r7, #4]
   8218e:	095b      	lsrs	r3, r3, #5
   82190:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82194:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82198:	025b      	lsls	r3, r3, #9
   8219a:	60fb      	str	r3, [r7, #12]
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8219c:	68fb      	ldr	r3, [r7, #12]
   8219e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   821a0:	687b      	ldr	r3, [r7, #4]
   821a2:	f003 031f 	and.w	r3, r3, #31
   821a6:	2101      	movs	r1, #1
   821a8:	fa01 f303 	lsl.w	r3, r1, r3
   821ac:	4013      	ands	r3, r2
   821ae:	2b00      	cmp	r3, #0
   821b0:	d009      	beq.n	821c6 <pio_toggle_pin+0x42>
		// Value to be driven on the I/O line: 0.
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   821b2:	687b      	ldr	r3, [r7, #4]
   821b4:	f003 031f 	and.w	r3, r3, #31
   821b8:	2201      	movs	r2, #1
   821ba:	fa02 f303 	lsl.w	r3, r2, r3
   821be:	461a      	mov	r2, r3
   821c0:	68fb      	ldr	r3, [r7, #12]
   821c2:	635a      	str	r2, [r3, #52]	; 0x34
   821c4:	e008      	b.n	821d8 <pio_toggle_pin+0x54>
	} else {
		// Value to be driven on the I/O line: 1.
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   821c6:	687b      	ldr	r3, [r7, #4]
   821c8:	f003 031f 	and.w	r3, r3, #31
   821cc:	2201      	movs	r2, #1
   821ce:	fa02 f303 	lsl.w	r3, r2, r3
   821d2:	461a      	mov	r2, r3
   821d4:	68fb      	ldr	r3, [r7, #12]
   821d6:	631a      	str	r2, [r3, #48]	; 0x30
	}
}
   821d8:	3714      	adds	r7, #20
   821da:	46bd      	mov	sp, r7
   821dc:	f85d 7b04 	ldr.w	r7, [sp], #4
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop

000821e4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   821e4:	b590      	push	{r4, r7, lr}
   821e6:	b087      	sub	sp, #28
   821e8:	af02      	add	r7, sp, #8
   821ea:	6078      	str	r0, [r7, #4]
   821ec:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   821ee:	687b      	ldr	r3, [r7, #4]
   821f0:	095b      	lsrs	r3, r3, #5
   821f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   821f6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   821fa:	025b      	lsls	r3, r3, #9
   821fc:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   821fe:	683b      	ldr	r3, [r7, #0]
   82200:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82204:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82208:	d048      	beq.n	8229c <pio_configure_pin+0xb8>
   8220a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8220e:	d806      	bhi.n	8221e <pio_configure_pin+0x3a>
   82210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82214:	d00a      	beq.n	8222c <pio_configure_pin+0x48>
   82216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8221a:	d023      	beq.n	82264 <pio_configure_pin+0x80>
   8221c:	e070      	b.n	82300 <pio_configure_pin+0x11c>
   8221e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82222:	d047      	beq.n	822b4 <pio_configure_pin+0xd0>
   82224:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82228:	d044      	beq.n	822b4 <pio_configure_pin+0xd0>
   8222a:	e069      	b.n	82300 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8222c:	687b      	ldr	r3, [r7, #4]
   8222e:	f003 031f 	and.w	r3, r3, #31
   82232:	2201      	movs	r2, #1
   82234:	fa02 f303 	lsl.w	r3, r2, r3
   82238:	68f8      	ldr	r0, [r7, #12]
   8223a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8223e:	461a      	mov	r2, r3
   82240:	4b33      	ldr	r3, [pc, #204]	; (82310 <pio_configure_pin+0x12c>)
   82242:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82244:	687b      	ldr	r3, [r7, #4]
   82246:	f003 031f 	and.w	r3, r3, #31
   8224a:	2201      	movs	r2, #1
   8224c:	fa02 f303 	lsl.w	r3, r2, r3
   82250:	461a      	mov	r2, r3
   82252:	683b      	ldr	r3, [r7, #0]
   82254:	f003 0301 	and.w	r3, r3, #1
   82258:	68f8      	ldr	r0, [r7, #12]
   8225a:	4611      	mov	r1, r2
   8225c:	461a      	mov	r2, r3
   8225e:	4b2d      	ldr	r3, [pc, #180]	; (82314 <pio_configure_pin+0x130>)
   82260:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82262:	e04f      	b.n	82304 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82264:	687b      	ldr	r3, [r7, #4]
   82266:	f003 031f 	and.w	r3, r3, #31
   8226a:	2201      	movs	r2, #1
   8226c:	fa02 f303 	lsl.w	r3, r2, r3
   82270:	68f8      	ldr	r0, [r7, #12]
   82272:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82276:	461a      	mov	r2, r3
   82278:	4b25      	ldr	r3, [pc, #148]	; (82310 <pio_configure_pin+0x12c>)
   8227a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   8227c:	687b      	ldr	r3, [r7, #4]
   8227e:	f003 031f 	and.w	r3, r3, #31
   82282:	2201      	movs	r2, #1
   82284:	fa02 f303 	lsl.w	r3, r2, r3
   82288:	461a      	mov	r2, r3
   8228a:	683b      	ldr	r3, [r7, #0]
   8228c:	f003 0301 	and.w	r3, r3, #1
   82290:	68f8      	ldr	r0, [r7, #12]
   82292:	4611      	mov	r1, r2
   82294:	461a      	mov	r2, r3
   82296:	4b1f      	ldr	r3, [pc, #124]	; (82314 <pio_configure_pin+0x130>)
   82298:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8229a:	e033      	b.n	82304 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8229c:	687b      	ldr	r3, [r7, #4]
   8229e:	f003 031f 	and.w	r3, r3, #31
   822a2:	2201      	movs	r2, #1
   822a4:	fa02 f303 	lsl.w	r3, r2, r3
   822a8:	68f8      	ldr	r0, [r7, #12]
   822aa:	4619      	mov	r1, r3
   822ac:	683a      	ldr	r2, [r7, #0]
   822ae:	4b1a      	ldr	r3, [pc, #104]	; (82318 <pio_configure_pin+0x134>)
   822b0:	4798      	blx	r3
		break;
   822b2:	e027      	b.n	82304 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822b4:	687b      	ldr	r3, [r7, #4]
   822b6:	f003 031f 	and.w	r3, r3, #31
   822ba:	2201      	movs	r2, #1
   822bc:	fa02 f303 	lsl.w	r3, r2, r3
   822c0:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   822c2:	683b      	ldr	r3, [r7, #0]
   822c4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822c8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   822cc:	bf14      	ite	ne
   822ce:	2300      	movne	r3, #0
   822d0:	2301      	moveq	r3, #1
   822d2:	b2db      	uxtb	r3, r3
   822d4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   822d6:	683b      	ldr	r3, [r7, #0]
   822d8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822dc:	2b00      	cmp	r3, #0
   822de:	bf0c      	ite	eq
   822e0:	2300      	moveq	r3, #0
   822e2:	2301      	movne	r3, #1
   822e4:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   822e6:	6838      	ldr	r0, [r7, #0]
   822e8:	f000 0001 	and.w	r0, r0, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   822ec:	2800      	cmp	r0, #0
   822ee:	bf0c      	ite	eq
   822f0:	2000      	moveq	r0, #0
   822f2:	2001      	movne	r0, #1
   822f4:	b2c0      	uxtb	r0, r0
   822f6:	9000      	str	r0, [sp, #0]
   822f8:	68f8      	ldr	r0, [r7, #12]
   822fa:	4c08      	ldr	r4, [pc, #32]	; (8231c <pio_configure_pin+0x138>)
   822fc:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   822fe:	e001      	b.n	82304 <pio_configure_pin+0x120>

	default:
		return 0;
   82300:	2300      	movs	r3, #0
   82302:	e000      	b.n	82306 <pio_configure_pin+0x122>
	}

	return 1;
   82304:	2301      	movs	r3, #1
}
   82306:	4618      	mov	r0, r3
   82308:	3714      	adds	r7, #20
   8230a:	46bd      	mov	sp, r7
   8230c:	bd90      	pop	{r4, r7, pc}
   8230e:	bf00      	nop
   82310:	00081f71 	.word	0x00081f71
   82314:	00081f45 	.word	0x00081f45
   82318:	00081ff1 	.word	0x00081ff1
   8231c:	0008206d 	.word	0x0008206d

00082320 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82320:	b590      	push	{r4, r7, lr}
   82322:	b087      	sub	sp, #28
   82324:	af02      	add	r7, sp, #8
   82326:	60f8      	str	r0, [r7, #12]
   82328:	60b9      	str	r1, [r7, #8]
   8232a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8232c:	687b      	ldr	r3, [r7, #4]
   8232e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82332:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82336:	d02e      	beq.n	82396 <pio_configure_pin_group+0x76>
   82338:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8233c:	d806      	bhi.n	8234c <pio_configure_pin_group+0x2c>
   8233e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82342:	d00a      	beq.n	8235a <pio_configure_pin_group+0x3a>
   82344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82348:	d016      	beq.n	82378 <pio_configure_pin_group+0x58>
   8234a:	e04a      	b.n	823e2 <pio_configure_pin_group+0xc2>
   8234c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82350:	d027      	beq.n	823a2 <pio_configure_pin_group+0x82>
   82352:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82356:	d024      	beq.n	823a2 <pio_configure_pin_group+0x82>
   82358:	e043      	b.n	823e2 <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8235a:	68f8      	ldr	r0, [r7, #12]
   8235c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82360:	68ba      	ldr	r2, [r7, #8]
   82362:	4b23      	ldr	r3, [pc, #140]	; (823f0 <pio_configure_pin_group+0xd0>)
   82364:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82366:	687b      	ldr	r3, [r7, #4]
   82368:	f003 0301 	and.w	r3, r3, #1
   8236c:	68f8      	ldr	r0, [r7, #12]
   8236e:	68b9      	ldr	r1, [r7, #8]
   82370:	461a      	mov	r2, r3
   82372:	4b20      	ldr	r3, [pc, #128]	; (823f4 <pio_configure_pin_group+0xd4>)
   82374:	4798      	blx	r3
		break;
   82376:	e036      	b.n	823e6 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82378:	68f8      	ldr	r0, [r7, #12]
   8237a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8237e:	68ba      	ldr	r2, [r7, #8]
   82380:	4b1b      	ldr	r3, [pc, #108]	; (823f0 <pio_configure_pin_group+0xd0>)
   82382:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82384:	687b      	ldr	r3, [r7, #4]
   82386:	f003 0301 	and.w	r3, r3, #1
   8238a:	68f8      	ldr	r0, [r7, #12]
   8238c:	68b9      	ldr	r1, [r7, #8]
   8238e:	461a      	mov	r2, r3
   82390:	4b18      	ldr	r3, [pc, #96]	; (823f4 <pio_configure_pin_group+0xd4>)
   82392:	4798      	blx	r3
		break;
   82394:	e027      	b.n	823e6 <pio_configure_pin_group+0xc6>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#     endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82396:	68f8      	ldr	r0, [r7, #12]
   82398:	68b9      	ldr	r1, [r7, #8]
   8239a:	687a      	ldr	r2, [r7, #4]
   8239c:	4b16      	ldr	r3, [pc, #88]	; (823f8 <pio_configure_pin_group+0xd8>)
   8239e:	4798      	blx	r3
		break;
   823a0:	e021      	b.n	823e6 <pio_configure_pin_group+0xc6>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   823a2:	687b      	ldr	r3, [r7, #4]
   823a4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   823a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   823ac:	bf14      	ite	ne
   823ae:	2300      	movne	r3, #0
   823b0:	2301      	moveq	r3, #1
   823b2:	b2db      	uxtb	r3, r3
   823b4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   823b6:	687b      	ldr	r3, [r7, #4]
   823b8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   823bc:	2b00      	cmp	r3, #0
   823be:	bf0c      	ite	eq
   823c0:	2300      	moveq	r3, #0
   823c2:	2301      	movne	r3, #1
   823c4:	b2db      	uxtb	r3, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   823c6:	6879      	ldr	r1, [r7, #4]
   823c8:	f001 0101 	and.w	r1, r1, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   823cc:	2900      	cmp	r1, #0
   823ce:	bf0c      	ite	eq
   823d0:	2100      	moveq	r1, #0
   823d2:	2101      	movne	r1, #1
   823d4:	b2c9      	uxtb	r1, r1
   823d6:	9100      	str	r1, [sp, #0]
   823d8:	68f8      	ldr	r0, [r7, #12]
   823da:	68b9      	ldr	r1, [r7, #8]
   823dc:	4c07      	ldr	r4, [pc, #28]	; (823fc <pio_configure_pin_group+0xdc>)
   823de:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   823e0:	e001      	b.n	823e6 <pio_configure_pin_group+0xc6>

	default:
		return 0;
   823e2:	2300      	movs	r3, #0
   823e4:	e000      	b.n	823e8 <pio_configure_pin_group+0xc8>
	}

	return 1;
   823e6:	2301      	movs	r3, #1
}
   823e8:	4618      	mov	r0, r3
   823ea:	3714      	adds	r7, #20
   823ec:	46bd      	mov	sp, r7
   823ee:	bd90      	pop	{r4, r7, pc}
   823f0:	00081f71 	.word	0x00081f71
   823f4:	00081f45 	.word	0x00081f45
   823f8:	00081ff1 	.word	0x00081ff1
   823fc:	0008206d 	.word	0x0008206d

00082400 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82400:	b580      	push	{r7, lr}
   82402:	b084      	sub	sp, #16
   82404:	af00      	add	r7, sp, #0
   82406:	6078      	str	r0, [r7, #4]
   82408:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8240a:	6878      	ldr	r0, [r7, #4]
   8240c:	4b22      	ldr	r3, [pc, #136]	; (82498 <pio_handler_process+0x98>)
   8240e:	4798      	blx	r3
   82410:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82412:	6878      	ldr	r0, [r7, #4]
   82414:	4b21      	ldr	r3, [pc, #132]	; (8249c <pio_handler_process+0x9c>)
   82416:	4798      	blx	r3
   82418:	4603      	mov	r3, r0
   8241a:	68fa      	ldr	r2, [r7, #12]
   8241c:	4013      	ands	r3, r2
   8241e:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82420:	68fb      	ldr	r3, [r7, #12]
   82422:	2b00      	cmp	r3, #0
   82424:	d035      	beq.n	82492 <pio_handler_process+0x92>
		/* Find triggering source */
		i = 0;
   82426:	2300      	movs	r3, #0
   82428:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   8242a:	e02f      	b.n	8248c <pio_handler_process+0x8c>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   8242c:	4a1c      	ldr	r2, [pc, #112]	; (824a0 <pio_handler_process+0xa0>)
   8242e:	68bb      	ldr	r3, [r7, #8]
   82430:	011b      	lsls	r3, r3, #4
   82432:	4413      	add	r3, r2
   82434:	681a      	ldr	r2, [r3, #0]
   82436:	683b      	ldr	r3, [r7, #0]
   82438:	429a      	cmp	r2, r3
   8243a:	d124      	bne.n	82486 <pio_handler_process+0x86>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8243c:	4a18      	ldr	r2, [pc, #96]	; (824a0 <pio_handler_process+0xa0>)
   8243e:	68bb      	ldr	r3, [r7, #8]
   82440:	011b      	lsls	r3, r3, #4
   82442:	4413      	add	r3, r2
   82444:	685a      	ldr	r2, [r3, #4]
   82446:	68fb      	ldr	r3, [r7, #12]
   82448:	4013      	ands	r3, r2
   8244a:	2b00      	cmp	r3, #0
   8244c:	d01b      	beq.n	82486 <pio_handler_process+0x86>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8244e:	4a14      	ldr	r2, [pc, #80]	; (824a0 <pio_handler_process+0xa0>)
   82450:	68bb      	ldr	r3, [r7, #8]
   82452:	011b      	lsls	r3, r3, #4
   82454:	4413      	add	r3, r2
   82456:	3308      	adds	r3, #8
   82458:	685b      	ldr	r3, [r3, #4]
   8245a:	4911      	ldr	r1, [pc, #68]	; (824a0 <pio_handler_process+0xa0>)
   8245c:	68ba      	ldr	r2, [r7, #8]
   8245e:	0112      	lsls	r2, r2, #4
   82460:	440a      	add	r2, r1
   82462:	6811      	ldr	r1, [r2, #0]
   82464:	480e      	ldr	r0, [pc, #56]	; (824a0 <pio_handler_process+0xa0>)
   82466:	68ba      	ldr	r2, [r7, #8]
   82468:	0112      	lsls	r2, r2, #4
   8246a:	4402      	add	r2, r0
   8246c:	6852      	ldr	r2, [r2, #4]
   8246e:	4608      	mov	r0, r1
   82470:	4611      	mov	r1, r2
   82472:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82474:	4a0a      	ldr	r2, [pc, #40]	; (824a0 <pio_handler_process+0xa0>)
   82476:	68bb      	ldr	r3, [r7, #8]
   82478:	011b      	lsls	r3, r3, #4
   8247a:	4413      	add	r3, r2
   8247c:	685b      	ldr	r3, [r3, #4]
   8247e:	43db      	mvns	r3, r3
   82480:	68fa      	ldr	r2, [r7, #12]
   82482:	4013      	ands	r3, r2
   82484:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82486:	68bb      	ldr	r3, [r7, #8]
   82488:	3301      	adds	r3, #1
   8248a:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8248c:	68fb      	ldr	r3, [r7, #12]
   8248e:	2b00      	cmp	r3, #0
   82490:	d1cc      	bne.n	8242c <pio_handler_process+0x2c>
				}
			}
			i++;
		}
	}
}
   82492:	3710      	adds	r7, #16
   82494:	46bd      	mov	sp, r7
   82496:	bd80      	pop	{r7, pc}
   82498:	000820ed 	.word	0x000820ed
   8249c:	00082105 	.word	0x00082105
   824a0:	20070480 	.word	0x20070480

000824a4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   824a4:	b580      	push	{r7, lr}
   824a6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   824a8:	4802      	ldr	r0, [pc, #8]	; (824b4 <PIOA_Handler+0x10>)
   824aa:	210b      	movs	r1, #11
   824ac:	4b02      	ldr	r3, [pc, #8]	; (824b8 <PIOA_Handler+0x14>)
   824ae:	4798      	blx	r3
}
   824b0:	bd80      	pop	{r7, pc}
   824b2:	bf00      	nop
   824b4:	400e0e00 	.word	0x400e0e00
   824b8:	00082401 	.word	0x00082401

000824bc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   824bc:	b580      	push	{r7, lr}
   824be:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   824c0:	4802      	ldr	r0, [pc, #8]	; (824cc <PIOB_Handler+0x10>)
   824c2:	210c      	movs	r1, #12
   824c4:	4b02      	ldr	r3, [pc, #8]	; (824d0 <PIOB_Handler+0x14>)
   824c6:	4798      	blx	r3
}
   824c8:	bd80      	pop	{r7, pc}
   824ca:	bf00      	nop
   824cc:	400e1000 	.word	0x400e1000
   824d0:	00082401 	.word	0x00082401

000824d4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   824d4:	b580      	push	{r7, lr}
   824d6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   824d8:	4802      	ldr	r0, [pc, #8]	; (824e4 <PIOC_Handler+0x10>)
   824da:	210d      	movs	r1, #13
   824dc:	4b02      	ldr	r3, [pc, #8]	; (824e8 <PIOC_Handler+0x14>)
   824de:	4798      	blx	r3
}
   824e0:	bd80      	pop	{r7, pc}
   824e2:	bf00      	nop
   824e4:	400e1200 	.word	0x400e1200
   824e8:	00082401 	.word	0x00082401

000824ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   824ec:	b580      	push	{r7, lr}
   824ee:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   824f0:	4802      	ldr	r0, [pc, #8]	; (824fc <PIOD_Handler+0x10>)
   824f2:	210e      	movs	r1, #14
   824f4:	4b02      	ldr	r3, [pc, #8]	; (82500 <PIOD_Handler+0x14>)
   824f6:	4798      	blx	r3
}
   824f8:	bd80      	pop	{r7, pc}
   824fa:	bf00      	nop
   824fc:	400e1400 	.word	0x400e1400
   82500:	00082401 	.word	0x00082401

00082504 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82504:	b480      	push	{r7}
   82506:	b085      	sub	sp, #20
   82508:	af00      	add	r7, sp, #0
   8250a:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8250c:	4b1d      	ldr	r3, [pc, #116]	; (82584 <pmc_switch_mck_to_pllack+0x80>)
   8250e:	4a1d      	ldr	r2, [pc, #116]	; (82584 <pmc_switch_mck_to_pllack+0x80>)
   82510:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82512:	f022 0170 	bic.w	r1, r2, #112	; 0x70
   82516:	687a      	ldr	r2, [r7, #4]
   82518:	430a      	orrs	r2, r1
   8251a:	631a      	str	r2, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8251c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82520:	60fb      	str	r3, [r7, #12]
   82522:	e007      	b.n	82534 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82524:	68fb      	ldr	r3, [r7, #12]
   82526:	2b00      	cmp	r3, #0
   82528:	d101      	bne.n	8252e <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8252a:	2301      	movs	r3, #1
   8252c:	e023      	b.n	82576 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8252e:	68fb      	ldr	r3, [r7, #12]
   82530:	3b01      	subs	r3, #1
   82532:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82534:	4b13      	ldr	r3, [pc, #76]	; (82584 <pmc_switch_mck_to_pllack+0x80>)
   82536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82538:	f003 0308 	and.w	r3, r3, #8
   8253c:	2b00      	cmp	r3, #0
   8253e:	d0f1      	beq.n	82524 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82540:	4b10      	ldr	r3, [pc, #64]	; (82584 <pmc_switch_mck_to_pllack+0x80>)
   82542:	4a10      	ldr	r2, [pc, #64]	; (82584 <pmc_switch_mck_to_pllack+0x80>)
   82544:	6b12      	ldr	r2, [r2, #48]	; 0x30
   82546:	f022 0203 	bic.w	r2, r2, #3
   8254a:	f042 0202 	orr.w	r2, r2, #2
   8254e:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82550:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82554:	60fb      	str	r3, [r7, #12]
   82556:	e007      	b.n	82568 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82558:	68fb      	ldr	r3, [r7, #12]
   8255a:	2b00      	cmp	r3, #0
   8255c:	d101      	bne.n	82562 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   8255e:	2301      	movs	r3, #1
   82560:	e009      	b.n	82576 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82562:	68fb      	ldr	r3, [r7, #12]
   82564:	3b01      	subs	r3, #1
   82566:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82568:	4b06      	ldr	r3, [pc, #24]	; (82584 <pmc_switch_mck_to_pllack+0x80>)
   8256a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8256c:	f003 0308 	and.w	r3, r3, #8
   82570:	2b00      	cmp	r3, #0
   82572:	d0f1      	beq.n	82558 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82574:	2300      	movs	r3, #0
}
   82576:	4618      	mov	r0, r3
   82578:	3714      	adds	r7, #20
   8257a:	46bd      	mov	sp, r7
   8257c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82580:	4770      	bx	lr
   82582:	bf00      	nop
   82584:	400e0600 	.word	0x400e0600

00082588 <pmc_switch_sclk_to_32kxtal>:
 * power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82588:	b480      	push	{r7}
   8258a:	b083      	sub	sp, #12
   8258c:	af00      	add	r7, sp, #0
   8258e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82590:	687b      	ldr	r3, [r7, #4]
   82592:	2b01      	cmp	r3, #1
   82594:	d107      	bne.n	825a6 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   82596:	4a0a      	ldr	r2, [pc, #40]	; (825c0 <pmc_switch_sclk_to_32kxtal+0x38>)
   82598:	4b09      	ldr	r3, [pc, #36]	; (825c0 <pmc_switch_sclk_to_32kxtal+0x38>)
   8259a:	689b      	ldr	r3, [r3, #8]
   8259c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   825a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   825a4:	6093      	str	r3, [r2, #8]
				SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR |= SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   825a6:	4a06      	ldr	r2, [pc, #24]	; (825c0 <pmc_switch_sclk_to_32kxtal+0x38>)
   825a8:	4b05      	ldr	r3, [pc, #20]	; (825c0 <pmc_switch_sclk_to_32kxtal+0x38>)
   825aa:	681b      	ldr	r3, [r3, #0]
   825ac:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   825b0:	f043 0308 	orr.w	r3, r3, #8
   825b4:	6013      	str	r3, [r2, #0]
}
   825b6:	370c      	adds	r7, #12
   825b8:	46bd      	mov	sp, r7
   825ba:	f85d 7b04 	ldr.w	r7, [sp], #4
   825be:	4770      	bx	lr
   825c0:	400e1a10 	.word	0x400e1a10

000825c4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   825c4:	b480      	push	{r7}
   825c6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   825c8:	4b09      	ldr	r3, [pc, #36]	; (825f0 <pmc_osc_is_ready_32kxtal+0x2c>)
   825ca:	695b      	ldr	r3, [r3, #20]
   825cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   825d0:	2b00      	cmp	r3, #0
   825d2:	d007      	beq.n	825e4 <pmc_osc_is_ready_32kxtal+0x20>
   825d4:	4b07      	ldr	r3, [pc, #28]	; (825f4 <pmc_osc_is_ready_32kxtal+0x30>)
   825d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   825d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   825dc:	2b00      	cmp	r3, #0
   825de:	d001      	beq.n	825e4 <pmc_osc_is_ready_32kxtal+0x20>
   825e0:	2301      	movs	r3, #1
   825e2:	e000      	b.n	825e6 <pmc_osc_is_ready_32kxtal+0x22>
   825e4:	2300      	movs	r3, #0
}
   825e6:	4618      	mov	r0, r3
   825e8:	46bd      	mov	sp, r7
   825ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   825ee:	4770      	bx	lr
   825f0:	400e1a10 	.word	0x400e1a10
   825f4:	400e0600 	.word	0x400e0600

000825f8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   825f8:	b480      	push	{r7}
   825fa:	b085      	sub	sp, #20
   825fc:	af00      	add	r7, sp, #0
   825fe:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   82600:	2300      	movs	r3, #0
   82602:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   82604:	4b21      	ldr	r3, [pc, #132]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82606:	6a1b      	ldr	r3, [r3, #32]
   82608:	f003 0301 	and.w	r3, r3, #1
   8260c:	2b00      	cmp	r3, #0
   8260e:	d00e      	beq.n	8262e <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82610:	4a1e      	ldr	r2, [pc, #120]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82612:	4b1e      	ldr	r3, [pc, #120]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82614:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   82616:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8261a:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   8261e:	6879      	ldr	r1, [r7, #4]
   82620:	430b      	orrs	r3, r1
   82622:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82626:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8262a:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   8262c:	e00b      	b.n	82646 <pmc_switch_mainck_to_fastrc+0x4e>
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   8262e:	2301      	movs	r3, #1
   82630:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82632:	4a16      	ldr	r2, [pc, #88]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82634:	4b15      	ldr	r3, [pc, #84]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82636:	6a19      	ldr	r1, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
   82638:	4b15      	ldr	r3, [pc, #84]	; (82690 <pmc_switch_mainck_to_fastrc+0x98>)
   8263a:	400b      	ands	r3, r1
   8263c:	6879      	ldr	r1, [r7, #4]
   8263e:	4319      	orrs	r1, r3
   82640:	4b14      	ldr	r3, [pc, #80]	; (82694 <pmc_switch_mainck_to_fastrc+0x9c>)
   82642:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82644:	6213      	str	r3, [r2, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME) |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82646:	bf00      	nop
   82648:	4b10      	ldr	r3, [pc, #64]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   8264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82650:	2b00      	cmp	r3, #0
   82652:	d0f9      	beq.n	82648 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | PMC_CKGR_MOR_KEY_VALUE;
   82654:	4a0d      	ldr	r2, [pc, #52]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82656:	4b0d      	ldr	r3, [pc, #52]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82658:	6a1b      	ldr	r3, [r3, #32]
   8265a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8265e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82662:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82666:	6213      	str	r3, [r2, #32]

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   82668:	68fb      	ldr	r3, [r7, #12]
   8266a:	2b00      	cmp	r3, #0
   8266c:	d009      	beq.n	82682 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8266e:	4a07      	ldr	r2, [pc, #28]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82670:	4b06      	ldr	r3, [pc, #24]	; (8268c <pmc_switch_mainck_to_fastrc+0x94>)
   82672:	6a1b      	ldr	r3, [r3, #32]
   82674:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82678:	f023 0301 	bic.w	r3, r3, #1
   8267c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82680:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   82682:	3714      	adds	r7, #20
   82684:	46bd      	mov	sp, r7
   82686:	f85d 7b04 	ldr.w	r7, [sp], #4
   8268a:	4770      	bx	lr
   8268c:	400e0600 	.word	0x400e0600
   82690:	ffc8c086 	.word	0xffc8c086
   82694:	00373f09 	.word	0x00373f09

00082698 <pmc_switch_mainck_to_xtal>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
   82698:	b480      	push	{r7}
   8269a:	b083      	sub	sp, #12
   8269c:	af00      	add	r7, sp, #0
   8269e:	6078      	str	r0, [r7, #4]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   826a0:	687b      	ldr	r3, [r7, #4]
   826a2:	2b00      	cmp	r3, #0
   826a4:	d008      	beq.n	826b8 <pmc_switch_mainck_to_xtal+0x20>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   826a6:	4912      	ldr	r1, [pc, #72]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826a8:	4b11      	ldr	r3, [pc, #68]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826aa:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   826ac:	4a11      	ldr	r2, [pc, #68]	; (826f4 <pmc_switch_mainck_to_xtal+0x5c>)
   826ae:	401a      	ands	r2, r3
   826b0:	4b11      	ldr	r3, [pc, #68]	; (826f8 <pmc_switch_mainck_to_xtal+0x60>)
   826b2:	4313      	orrs	r3, r2
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   826b4:	620b      	str	r3, [r1, #32]
   826b6:	e016      	b.n	826e6 <pmc_switch_mainck_to_xtal+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   826b8:	490d      	ldr	r1, [pc, #52]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826ba:	4b0d      	ldr	r3, [pc, #52]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826bc:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   826be:	4a0f      	ldr	r2, [pc, #60]	; (826fc <pmc_switch_mainck_to_xtal+0x64>)
   826c0:	401a      	ands	r2, r3
   826c2:	4b0f      	ldr	r3, [pc, #60]	; (82700 <pmc_switch_mainck_to_xtal+0x68>)
   826c4:	4313      	orrs	r3, r2
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   826c6:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(PMC_XTAL_STARTUP_TIME);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   826c8:	bf00      	nop
   826ca:	4b09      	ldr	r3, [pc, #36]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   826ce:	f003 0301 	and.w	r3, r3, #1
   826d2:	2b00      	cmp	r3, #0
   826d4:	d0f9      	beq.n	826ca <pmc_switch_mainck_to_xtal+0x32>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   826d6:	4a06      	ldr	r2, [pc, #24]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826d8:	4b05      	ldr	r3, [pc, #20]	; (826f0 <pmc_switch_mainck_to_xtal+0x58>)
   826da:	6a1b      	ldr	r3, [r3, #32]
   826dc:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   826e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   826e4:	6213      	str	r3, [r2, #32]
	}
}
   826e6:	370c      	adds	r7, #12
   826e8:	46bd      	mov	sp, r7
   826ea:	f85d 7b04 	ldr.w	r7, [sp], #4
   826ee:	4770      	bx	lr
   826f0:	400e0600 	.word	0x400e0600
   826f4:	fec8fffc 	.word	0xfec8fffc
   826f8:	01370002 	.word	0x01370002
   826fc:	ffc8c0fc 	.word	0xffc8c0fc
   82700:	00373f01 	.word	0x00373f01

00082704 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82704:	b480      	push	{r7}
   82706:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82708:	4b04      	ldr	r3, [pc, #16]	; (8271c <pmc_osc_is_ready_mainck+0x18>)
   8270a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8270c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82710:	4618      	mov	r0, r3
   82712:	46bd      	mov	sp, r7
   82714:	f85d 7b04 	ldr.w	r7, [sp], #4
   82718:	4770      	bx	lr
   8271a:	bf00      	nop
   8271c:	400e0600 	.word	0x400e0600

00082720 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82720:	b480      	push	{r7}
   82722:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82724:	4b03      	ldr	r3, [pc, #12]	; (82734 <pmc_disable_pllack+0x14>)
   82726:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8272a:	629a      	str	r2, [r3, #40]	; 0x28
}
   8272c:	46bd      	mov	sp, r7
   8272e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82732:	4770      	bx	lr
   82734:	400e0600 	.word	0x400e0600

00082738 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82738:	b480      	push	{r7}
   8273a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8273c:	4b04      	ldr	r3, [pc, #16]	; (82750 <pmc_is_locked_pllack+0x18>)
   8273e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82740:	f003 0302 	and.w	r3, r3, #2
}
   82744:	4618      	mov	r0, r3
   82746:	46bd      	mov	sp, r7
   82748:	f85d 7b04 	ldr.w	r7, [sp], #4
   8274c:	4770      	bx	lr
   8274e:	bf00      	nop
   82750:	400e0600 	.word	0x400e0600

00082754 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82754:	b480      	push	{r7}
   82756:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82758:	4b04      	ldr	r3, [pc, #16]	; (8276c <pmc_is_locked_upll+0x18>)
   8275a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8275c:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82760:	4618      	mov	r0, r3
   82762:	46bd      	mov	sp, r7
   82764:	f85d 7b04 	ldr.w	r7, [sp], #4
   82768:	4770      	bx	lr
   8276a:	bf00      	nop
   8276c:	400e0600 	.word	0x400e0600

00082770 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82770:	b480      	push	{r7}
   82772:	b083      	sub	sp, #12
   82774:	af00      	add	r7, sp, #0
   82776:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82778:	687b      	ldr	r3, [r7, #4]
   8277a:	2b2c      	cmp	r3, #44	; 0x2c
   8277c:	d901      	bls.n	82782 <pmc_enable_periph_clk+0x12>
		return 1;
   8277e:	2301      	movs	r3, #1
   82780:	e02f      	b.n	827e2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82782:	687b      	ldr	r3, [r7, #4]
   82784:	2b1f      	cmp	r3, #31
   82786:	d813      	bhi.n	827b0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82788:	4b19      	ldr	r3, [pc, #100]	; (827f0 <pmc_enable_periph_clk+0x80>)
   8278a:	699a      	ldr	r2, [r3, #24]
   8278c:	687b      	ldr	r3, [r7, #4]
   8278e:	2101      	movs	r1, #1
   82790:	fa01 f303 	lsl.w	r3, r1, r3
   82794:	401a      	ands	r2, r3
   82796:	687b      	ldr	r3, [r7, #4]
   82798:	2101      	movs	r1, #1
   8279a:	fa01 f303 	lsl.w	r3, r1, r3
   8279e:	429a      	cmp	r2, r3
   827a0:	d01e      	beq.n	827e0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   827a2:	4b13      	ldr	r3, [pc, #76]	; (827f0 <pmc_enable_periph_clk+0x80>)
   827a4:	687a      	ldr	r2, [r7, #4]
   827a6:	2101      	movs	r1, #1
   827a8:	fa01 f202 	lsl.w	r2, r1, r2
   827ac:	611a      	str	r2, [r3, #16]
   827ae:	e017      	b.n	827e0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S)
	} else {
		ul_id -= 32;
   827b0:	687b      	ldr	r3, [r7, #4]
   827b2:	3b20      	subs	r3, #32
   827b4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   827b6:	4b0e      	ldr	r3, [pc, #56]	; (827f0 <pmc_enable_periph_clk+0x80>)
   827b8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   827bc:	687b      	ldr	r3, [r7, #4]
   827be:	2101      	movs	r1, #1
   827c0:	fa01 f303 	lsl.w	r3, r1, r3
   827c4:	401a      	ands	r2, r3
   827c6:	687b      	ldr	r3, [r7, #4]
   827c8:	2101      	movs	r1, #1
   827ca:	fa01 f303 	lsl.w	r3, r1, r3
   827ce:	429a      	cmp	r2, r3
   827d0:	d006      	beq.n	827e0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   827d2:	4b07      	ldr	r3, [pc, #28]	; (827f0 <pmc_enable_periph_clk+0x80>)
   827d4:	687a      	ldr	r2, [r7, #4]
   827d6:	2101      	movs	r1, #1
   827d8:	fa01 f202 	lsl.w	r2, r1, r2
   827dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   827e0:	2300      	movs	r3, #0
}
   827e2:	4618      	mov	r0, r3
   827e4:	370c      	adds	r7, #12
   827e6:	46bd      	mov	sp, r7
   827e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   827ec:	4770      	bx	lr
   827ee:	bf00      	nop
   827f0:	400e0600 	.word	0x400e0600

000827f4 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock 
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   827f4:	b480      	push	{r7}
   827f6:	b089      	sub	sp, #36	; 0x24
   827f8:	af00      	add	r7, sp, #0
   827fa:	60f8      	str	r0, [r7, #12]
   827fc:	60b9      	str	r1, [r7, #8]
   827fe:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82800:	68bb      	ldr	r3, [r7, #8]
   82802:	011a      	lsls	r2, r3, #4
   82804:	687b      	ldr	r3, [r7, #4]
   82806:	429a      	cmp	r2, r3
   82808:	d802      	bhi.n	82810 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8280a:	2310      	movs	r3, #16
   8280c:	61fb      	str	r3, [r7, #28]
   8280e:	e001      	b.n	82814 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   82810:	2308      	movs	r3, #8
   82812:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate the clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82814:	687b      	ldr	r3, [r7, #4]
   82816:	00da      	lsls	r2, r3, #3
   82818:	69fb      	ldr	r3, [r7, #28]
   8281a:	68b9      	ldr	r1, [r7, #8]
   8281c:	fb01 f303 	mul.w	r3, r1, r3
   82820:	085b      	lsrs	r3, r3, #1
   82822:	441a      	add	r2, r3
   82824:	69fb      	ldr	r3, [r7, #28]
   82826:	68b9      	ldr	r1, [r7, #8]
   82828:	fb01 f303 	mul.w	r3, r1, r3
   8282c:	fbb2 f3f3 	udiv	r3, r2, r3
   82830:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   82832:	69bb      	ldr	r3, [r7, #24]
   82834:	08db      	lsrs	r3, r3, #3
   82836:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   82838:	69bb      	ldr	r3, [r7, #24]
   8283a:	f003 0307 	and.w	r3, r3, #7
   8283e:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82840:	697b      	ldr	r3, [r7, #20]
   82842:	2b00      	cmp	r3, #0
   82844:	d003      	beq.n	8284e <usart_set_async_baudrate+0x5a>
   82846:	697b      	ldr	r3, [r7, #20]
   82848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8284c:	d301      	bcc.n	82852 <usart_set_async_baudrate+0x5e>
		return 1;
   8284e:	2301      	movs	r3, #1
   82850:	e00f      	b.n	82872 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   82852:	69fb      	ldr	r3, [r7, #28]
   82854:	2b08      	cmp	r3, #8
   82856:	d105      	bne.n	82864 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   82858:	68fb      	ldr	r3, [r7, #12]
   8285a:	685b      	ldr	r3, [r3, #4]
   8285c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   82860:	68fb      	ldr	r3, [r7, #12]
   82862:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82864:	693b      	ldr	r3, [r7, #16]
   82866:	041a      	lsls	r2, r3, #16
   82868:	697b      	ldr	r3, [r7, #20]
   8286a:	431a      	orrs	r2, r3
   8286c:	68fb      	ldr	r3, [r7, #12]
   8286e:	621a      	str	r2, [r3, #32]

	return 0;
   82870:	2300      	movs	r3, #0
}
   82872:	4618      	mov	r0, r3
   82874:	3724      	adds	r7, #36	; 0x24
   82876:	46bd      	mov	sp, r7
   82878:	f85d 7b04 	ldr.w	r7, [sp], #4
   8287c:	4770      	bx	lr
   8287e:	bf00      	nop

00082880 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82880:	b580      	push	{r7, lr}
   82882:	b082      	sub	sp, #8
   82884:	af00      	add	r7, sp, #0
   82886:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. Some register can't be written if the write protect is enabled. */
	usart_disable_writeprotect(p_usart);
   82888:	6878      	ldr	r0, [r7, #4]
   8288a:	4b0d      	ldr	r3, [pc, #52]	; (828c0 <usart_reset+0x40>)
   8288c:	4798      	blx	r3

	/* Reset mode and other registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8288e:	687b      	ldr	r3, [r7, #4]
   82890:	2200      	movs	r2, #0
   82892:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82894:	687b      	ldr	r3, [r7, #4]
   82896:	2200      	movs	r2, #0
   82898:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8289a:	687b      	ldr	r3, [r7, #4]
   8289c:	2200      	movs	r2, #0
   8289e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX, reset status bits and turn off RTS and DTR if exist. */
	usart_reset_tx(p_usart);
   828a0:	6878      	ldr	r0, [r7, #4]
   828a2:	4b08      	ldr	r3, [pc, #32]	; (828c4 <usart_reset+0x44>)
   828a4:	4798      	blx	r3
	usart_reset_rx(p_usart);
   828a6:	6878      	ldr	r0, [r7, #4]
   828a8:	4b07      	ldr	r3, [pc, #28]	; (828c8 <usart_reset+0x48>)
   828aa:	4798      	blx	r3
	usart_reset_status(p_usart);
   828ac:	6878      	ldr	r0, [r7, #4]
   828ae:	4b07      	ldr	r3, [pc, #28]	; (828cc <usart_reset+0x4c>)
   828b0:	4798      	blx	r3
	usart_drive_RTS_pin_high(p_usart);
   828b2:	6878      	ldr	r0, [r7, #4]
   828b4:	4b06      	ldr	r3, [pc, #24]	; (828d0 <usart_reset+0x50>)
   828b6:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   828b8:	3708      	adds	r7, #8
   828ba:	46bd      	mov	sp, r7
   828bc:	bd80      	pop	{r7, pc}
   828be:	bf00      	nop
   828c0:	00082abd 	.word	0x00082abd
   828c4:	00082971 	.word	0x00082971
   828c8:	000829a1 	.word	0x000829a1
   828cc:	00082a09 	.word	0x00082a09
   828d0:	00082a25 	.word	0x00082a25

000828d4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   828d4:	b580      	push	{r7, lr}
   828d6:	b084      	sub	sp, #16
   828d8:	af00      	add	r7, sp, #0
   828da:	60f8      	str	r0, [r7, #12]
   828dc:	60b9      	str	r1, [r7, #8]
   828de:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   828e0:	68f8      	ldr	r0, [r7, #12]
   828e2:	4b1a      	ldr	r3, [pc, #104]	; (8294c <usart_init_rs232+0x78>)
   828e4:	4798      	blx	r3

	ul_reg_val = 0;
   828e6:	4b1a      	ldr	r3, [pc, #104]	; (82950 <usart_init_rs232+0x7c>)
   828e8:	2200      	movs	r2, #0
   828ea:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   828ec:	68bb      	ldr	r3, [r7, #8]
   828ee:	2b00      	cmp	r3, #0
   828f0:	d009      	beq.n	82906 <usart_init_rs232+0x32>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
   828f2:	68bb      	ldr	r3, [r7, #8]
   828f4:	681b      	ldr	r3, [r3, #0]
   828f6:	68f8      	ldr	r0, [r7, #12]
   828f8:	4619      	mov	r1, r3
   828fa:	687a      	ldr	r2, [r7, #4]
   828fc:	4b15      	ldr	r3, [pc, #84]	; (82954 <usart_init_rs232+0x80>)
   828fe:	4798      	blx	r3
   82900:	4603      	mov	r3, r0
	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt ||
   82902:	2b00      	cmp	r3, #0
   82904:	d001      	beq.n	8290a <usart_init_rs232+0x36>
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82906:	2301      	movs	r3, #1
   82908:	e01b      	b.n	82942 <usart_init_rs232+0x6e>
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8290a:	68bb      	ldr	r3, [r7, #8]
   8290c:	685a      	ldr	r2, [r3, #4]
   8290e:	68bb      	ldr	r3, [r7, #8]
   82910:	689b      	ldr	r3, [r3, #8]
   82912:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82914:	68bb      	ldr	r3, [r7, #8]
   82916:	691b      	ldr	r3, [r3, #16]
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82918:	431a      	orrs	r2, r3
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8291a:	68bb      	ldr	r3, [r7, #8]
   8291c:	68db      	ldr	r3, [r3, #12]
   8291e:	431a      	orrs	r2, r3
		usart_set_async_baudrate(p_usart, p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the character length, parity type, channel mode and stop bit length. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82920:	4b0b      	ldr	r3, [pc, #44]	; (82950 <usart_init_rs232+0x7c>)
   82922:	681b      	ldr	r3, [r3, #0]
   82924:	431a      	orrs	r2, r3
   82926:	4b0a      	ldr	r3, [pc, #40]	; (82950 <usart_init_rs232+0x7c>)
   82928:	601a      	str	r2, [r3, #0]
				p_usart_opt->channel_mode | p_usart_opt->stop_bits;
	
	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8292a:	4b09      	ldr	r3, [pc, #36]	; (82950 <usart_init_rs232+0x7c>)
   8292c:	681a      	ldr	r2, [r3, #0]
   8292e:	4b08      	ldr	r3, [pc, #32]	; (82950 <usart_init_rs232+0x7c>)
   82930:	601a      	str	r2, [r3, #0]
	
	p_usart->US_MR |= ul_reg_val;
   82932:	68fb      	ldr	r3, [r7, #12]
   82934:	685a      	ldr	r2, [r3, #4]
   82936:	4b06      	ldr	r3, [pc, #24]	; (82950 <usart_init_rs232+0x7c>)
   82938:	681b      	ldr	r3, [r3, #0]
   8293a:	431a      	orrs	r2, r3
   8293c:	68fb      	ldr	r3, [r7, #12]
   8293e:	605a      	str	r2, [r3, #4]
	
	return 0;
   82940:	2300      	movs	r3, #0
}
   82942:	4618      	mov	r0, r3
   82944:	3710      	adds	r7, #16
   82946:	46bd      	mov	sp, r7
   82948:	bd80      	pop	{r7, pc}
   8294a:	bf00      	nop
   8294c:	00082881 	.word	0x00082881
   82950:	200704f0 	.word	0x200704f0
   82954:	000827f5 	.word	0x000827f5

00082958 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82958:	b480      	push	{r7}
   8295a:	b083      	sub	sp, #12
   8295c:	af00      	add	r7, sp, #0
   8295e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82960:	687b      	ldr	r3, [r7, #4]
   82962:	2240      	movs	r2, #64	; 0x40
   82964:	601a      	str	r2, [r3, #0]
}
   82966:	370c      	adds	r7, #12
   82968:	46bd      	mov	sp, r7
   8296a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8296e:	4770      	bx	lr

00082970 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82970:	b480      	push	{r7}
   82972:	b083      	sub	sp, #12
   82974:	af00      	add	r7, sp, #0
   82976:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82978:	687b      	ldr	r3, [r7, #4]
   8297a:	2288      	movs	r2, #136	; 0x88
   8297c:	601a      	str	r2, [r3, #0]
}
   8297e:	370c      	adds	r7, #12
   82980:	46bd      	mov	sp, r7
   82982:	f85d 7b04 	ldr.w	r7, [sp], #4
   82986:	4770      	bx	lr

00082988 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82988:	b480      	push	{r7}
   8298a:	b083      	sub	sp, #12
   8298c:	af00      	add	r7, sp, #0
   8298e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82990:	687b      	ldr	r3, [r7, #4]
   82992:	2210      	movs	r2, #16
   82994:	601a      	str	r2, [r3, #0]
}
   82996:	370c      	adds	r7, #12
   82998:	46bd      	mov	sp, r7
   8299a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8299e:	4770      	bx	lr

000829a0 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   829a0:	b480      	push	{r7}
   829a2:	b083      	sub	sp, #12
   829a4:	af00      	add	r7, sp, #0
   829a6:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   829a8:	687b      	ldr	r3, [r7, #4]
   829aa:	2224      	movs	r2, #36	; 0x24
   829ac:	601a      	str	r2, [r3, #0]
}
   829ae:	370c      	adds	r7, #12
   829b0:	46bd      	mov	sp, r7
   829b2:	f85d 7b04 	ldr.w	r7, [sp], #4
   829b6:	4770      	bx	lr

000829b8 <usart_enable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   829b8:	b480      	push	{r7}
   829ba:	b083      	sub	sp, #12
   829bc:	af00      	add	r7, sp, #0
   829be:	6078      	str	r0, [r7, #4]
   829c0:	6039      	str	r1, [r7, #0]
	p_usart->US_IER = ul_sources;
   829c2:	687b      	ldr	r3, [r7, #4]
   829c4:	683a      	ldr	r2, [r7, #0]
   829c6:	609a      	str	r2, [r3, #8]
}
   829c8:	370c      	adds	r7, #12
   829ca:	46bd      	mov	sp, r7
   829cc:	f85d 7b04 	ldr.w	r7, [sp], #4
   829d0:	4770      	bx	lr
   829d2:	bf00      	nop

000829d4 <usart_disable_interrupt>:
 *
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
   829d4:	b480      	push	{r7}
   829d6:	b083      	sub	sp, #12
   829d8:	af00      	add	r7, sp, #0
   829da:	6078      	str	r0, [r7, #4]
   829dc:	6039      	str	r1, [r7, #0]
	p_usart->US_IDR = ul_sources;
   829de:	687b      	ldr	r3, [r7, #4]
   829e0:	683a      	ldr	r2, [r7, #0]
   829e2:	60da      	str	r2, [r3, #12]
}
   829e4:	370c      	adds	r7, #12
   829e6:	46bd      	mov	sp, r7
   829e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   829ec:	4770      	bx	lr
   829ee:	bf00      	nop

000829f0 <usart_get_status>:
 * \param p_usart Pointer to a USART instance.
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
   829f0:	b480      	push	{r7}
   829f2:	b083      	sub	sp, #12
   829f4:	af00      	add	r7, sp, #0
   829f6:	6078      	str	r0, [r7, #4]
	return p_usart->US_CSR;
   829f8:	687b      	ldr	r3, [r7, #4]
   829fa:	695b      	ldr	r3, [r3, #20]
}
   829fc:	4618      	mov	r0, r3
   829fe:	370c      	adds	r7, #12
   82a00:	46bd      	mov	sp, r7
   82a02:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a06:	4770      	bx	lr

00082a08 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82a08:	b480      	push	{r7}
   82a0a:	b083      	sub	sp, #12
   82a0c:	af00      	add	r7, sp, #0
   82a0e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82a10:	687b      	ldr	r3, [r7, #4]
   82a12:	f44f 7280 	mov.w	r2, #256	; 0x100
   82a16:	601a      	str	r2, [r3, #0]
}
   82a18:	370c      	adds	r7, #12
   82a1a:	46bd      	mov	sp, r7
   82a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a20:	4770      	bx	lr
   82a22:	bf00      	nop

00082a24 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82a24:	b480      	push	{r7}
   82a26:	b083      	sub	sp, #12
   82a28:	af00      	add	r7, sp, #0
   82a2a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82a2c:	687b      	ldr	r3, [r7, #4]
   82a2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82a32:	601a      	str	r2, [r3, #0]
}
   82a34:	370c      	adds	r7, #12
   82a36:	46bd      	mov	sp, r7
   82a38:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a3c:	4770      	bx	lr
   82a3e:	bf00      	nop

00082a40 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82a40:	b480      	push	{r7}
   82a42:	b083      	sub	sp, #12
   82a44:	af00      	add	r7, sp, #0
   82a46:	6078      	str	r0, [r7, #4]
   82a48:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82a4a:	687b      	ldr	r3, [r7, #4]
   82a4c:	695b      	ldr	r3, [r3, #20]
   82a4e:	f003 0302 	and.w	r3, r3, #2
   82a52:	2b00      	cmp	r3, #0
   82a54:	d101      	bne.n	82a5a <usart_write+0x1a>
		return 1;
   82a56:	2301      	movs	r3, #1
   82a58:	e005      	b.n	82a66 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82a5a:	683b      	ldr	r3, [r7, #0]
   82a5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82a60:	687b      	ldr	r3, [r7, #4]
   82a62:	61da      	str	r2, [r3, #28]
	return 0;
   82a64:	2300      	movs	r3, #0
}
   82a66:	4618      	mov	r0, r3
   82a68:	370c      	adds	r7, #12
   82a6a:	46bd      	mov	sp, r7
   82a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82a70:	4770      	bx	lr
   82a72:	bf00      	nop

00082a74 <usart_getchar>:
 *
 * \retval 0 Data has been received.
 * \retval 1 on failure.
 */
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
   82a74:	b480      	push	{r7}
   82a76:	b085      	sub	sp, #20
   82a78:	af00      	add	r7, sp, #0
   82a7a:	6078      	str	r0, [r7, #4]
   82a7c:	6039      	str	r1, [r7, #0]
	uint32_t timeout = USART_DEFAULT_TIMEOUT;
   82a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   82a82:	60fb      	str	r3, [r7, #12]

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82a84:	e006      	b.n	82a94 <usart_getchar+0x20>
		if (!timeout--) {
   82a86:	68fb      	ldr	r3, [r7, #12]
   82a88:	1e5a      	subs	r2, r3, #1
   82a8a:	60fa      	str	r2, [r7, #12]
   82a8c:	2b00      	cmp	r3, #0
   82a8e:	d101      	bne.n	82a94 <usart_getchar+0x20>
			return 1;
   82a90:	2301      	movs	r3, #1
   82a92:	e00c      	b.n	82aae <usart_getchar+0x3a>
uint32_t usart_getchar(Usart *p_usart, uint32_t *c)
{
	uint32_t timeout = USART_DEFAULT_TIMEOUT;

	/* If the receiver is empty, wait until it's not empty or timeout has reached. */
	while (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82a94:	687b      	ldr	r3, [r7, #4]
   82a96:	695b      	ldr	r3, [r3, #20]
   82a98:	f003 0301 	and.w	r3, r3, #1
   82a9c:	2b00      	cmp	r3, #0
   82a9e:	d0f2      	beq.n	82a86 <usart_getchar+0x12>
			return 1;
		}
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   82aa0:	687b      	ldr	r3, [r7, #4]
   82aa2:	699b      	ldr	r3, [r3, #24]
   82aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82aa8:	683b      	ldr	r3, [r7, #0]
   82aaa:	601a      	str	r2, [r3, #0]

	return 0;
   82aac:	2300      	movs	r3, #0
}
   82aae:	4618      	mov	r0, r3
   82ab0:	3714      	adds	r7, #20
   82ab2:	46bd      	mov	sp, r7
   82ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ab8:	4770      	bx	lr
   82aba:	bf00      	nop

00082abc <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82abc:	b480      	push	{r7}
   82abe:	b083      	sub	sp, #12
   82ac0:	af00      	add	r7, sp, #0
   82ac2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   82ac4:	687b      	ldr	r3, [r7, #4]
   82ac6:	4a04      	ldr	r2, [pc, #16]	; (82ad8 <usart_disable_writeprotect+0x1c>)
   82ac8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82acc:	370c      	adds	r7, #12
   82ace:	46bd      	mov	sp, r7
   82ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ad4:	4770      	bx	lr
   82ad6:	bf00      	nop
   82ad8:	55534100 	.word	0x55534100

00082adc <wdt_init>:
 * \param us_counter The value loaded in the 12-bit Watchdog Counter.
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
   82adc:	b480      	push	{r7}
   82ade:	b085      	sub	sp, #20
   82ae0:	af00      	add	r7, sp, #0
   82ae2:	60f8      	str	r0, [r7, #12]
   82ae4:	60b9      	str	r1, [r7, #8]
   82ae6:	80fa      	strh	r2, [r7, #6]
   82ae8:	80bb      	strh	r3, [r7, #4]
	p_wdt->WDT_MR = ul_mode |
   82aea:	88fb      	ldrh	r3, [r7, #6]
   82aec:	f3c3 020b 	ubfx	r2, r3, #0, #12
   82af0:	68bb      	ldr	r3, [r7, #8]
   82af2:	431a      	orrs	r2, r3
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
   82af4:	88bb      	ldrh	r3, [r7, #4]
   82af6:	041b      	lsls	r3, r3, #16
   82af8:	4619      	mov	r1, r3
   82afa:	4b05      	ldr	r3, [pc, #20]	; (82b10 <wdt_init+0x34>)
   82afc:	400b      	ands	r3, r1
   82afe:	431a      	orrs	r2, r3
 * \param us_delta The permitted range for reloading the Watchdog Timer.
 */
void wdt_init(Wdt *p_wdt, uint32_t ul_mode, uint16_t us_counter,
		uint16_t us_delta)
{
	p_wdt->WDT_MR = ul_mode |
   82b00:	68fb      	ldr	r3, [r7, #12]
   82b02:	605a      	str	r2, [r3, #4]
			WDT_MR_WDV(us_counter) | WDT_MR_WDD(us_delta);
}
   82b04:	3714      	adds	r7, #20
   82b06:	46bd      	mov	sp, r7
   82b08:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b0c:	4770      	bx	lr
   82b0e:	bf00      	nop
   82b10:	0fff0000 	.word	0x0fff0000

00082b14 <wdt_restart>:

/**
 * \brief Restart the watchdog timer.
 */
void wdt_restart(Wdt *p_wdt)
{
   82b14:	b480      	push	{r7}
   82b16:	b083      	sub	sp, #12
   82b18:	af00      	add	r7, sp, #0
   82b1a:	6078      	str	r0, [r7, #4]
	if (p_wdt == WDT) {
   82b1c:	687a      	ldr	r2, [r7, #4]
   82b1e:	4b05      	ldr	r3, [pc, #20]	; (82b34 <wdt_restart+0x20>)
   82b20:	429a      	cmp	r2, r3
   82b22:	d102      	bne.n	82b2a <wdt_restart+0x16>
		p_wdt->WDT_CR = WDT_KEY_PASSWORD | WDT_CR_WDRSTT;
   82b24:	687b      	ldr	r3, [r7, #4]
   82b26:	4a04      	ldr	r2, [pc, #16]	; (82b38 <wdt_restart+0x24>)
   82b28:	601a      	str	r2, [r3, #0]
#if (SAM4C || SAM4CM || SAM4CP)
	else {
		p_wdt->WDT_CR = RSWDT_CR_KEY(0xC4u) | RSWDT_CR_WDRSTT;
	}
#endif
}
   82b2a:	370c      	adds	r7, #12
   82b2c:	46bd      	mov	sp, r7
   82b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b32:	4770      	bx	lr
   82b34:	400e1a50 	.word	0x400e1a50
   82b38:	a5000001 	.word	0xa5000001

00082b3c <wdt_get_status>:
 * \brief Check the watchdog timer status.
 *
 * \return Bitmask of watchdog timer status.
 */
uint32_t wdt_get_status(Wdt *p_wdt)
{
   82b3c:	b480      	push	{r7}
   82b3e:	b083      	sub	sp, #12
   82b40:	af00      	add	r7, sp, #0
   82b42:	6078      	str	r0, [r7, #4]
	return p_wdt->WDT_SR;
   82b44:	687b      	ldr	r3, [r7, #4]
   82b46:	689b      	ldr	r3, [r3, #8]
}
   82b48:	4618      	mov	r0, r3
   82b4a:	370c      	adds	r7, #12
   82b4c:	46bd      	mov	sp, r7
   82b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82b52:	4770      	bx	lr

00082b54 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82b54:	b480      	push	{r7}
   82b56:	af00      	add	r7, sp, #0
	while (1) {
	}
   82b58:	e7fe      	b.n	82b58 <Dummy_Handler+0x4>
   82b5a:	bf00      	nop

00082b5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82b5c:	b580      	push	{r7, lr}
   82b5e:	b082      	sub	sp, #8
   82b60:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   82b62:	4b1e      	ldr	r3, [pc, #120]	; (82bdc <Reset_Handler+0x80>)
   82b64:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   82b66:	4b1e      	ldr	r3, [pc, #120]	; (82be0 <Reset_Handler+0x84>)
   82b68:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   82b6a:	687a      	ldr	r2, [r7, #4]
   82b6c:	683b      	ldr	r3, [r7, #0]
   82b6e:	429a      	cmp	r2, r3
   82b70:	d00c      	beq.n	82b8c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   82b72:	e007      	b.n	82b84 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   82b74:	683b      	ldr	r3, [r7, #0]
   82b76:	1d1a      	adds	r2, r3, #4
   82b78:	603a      	str	r2, [r7, #0]
   82b7a:	687a      	ldr	r2, [r7, #4]
   82b7c:	1d11      	adds	r1, r2, #4
   82b7e:	6079      	str	r1, [r7, #4]
   82b80:	6812      	ldr	r2, [r2, #0]
   82b82:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82b84:	683a      	ldr	r2, [r7, #0]
   82b86:	4b17      	ldr	r3, [pc, #92]	; (82be4 <Reset_Handler+0x88>)
   82b88:	429a      	cmp	r2, r3
   82b8a:	d3f3      	bcc.n	82b74 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82b8c:	4b16      	ldr	r3, [pc, #88]	; (82be8 <Reset_Handler+0x8c>)
   82b8e:	603b      	str	r3, [r7, #0]
   82b90:	e004      	b.n	82b9c <Reset_Handler+0x40>
		*pDest++ = 0;
   82b92:	683b      	ldr	r3, [r7, #0]
   82b94:	1d1a      	adds	r2, r3, #4
   82b96:	603a      	str	r2, [r7, #0]
   82b98:	2200      	movs	r2, #0
   82b9a:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82b9c:	683a      	ldr	r2, [r7, #0]
   82b9e:	4b13      	ldr	r3, [pc, #76]	; (82bec <Reset_Handler+0x90>)
   82ba0:	429a      	cmp	r2, r3
   82ba2:	d3f6      	bcc.n	82b92 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   82ba4:	4b12      	ldr	r3, [pc, #72]	; (82bf0 <Reset_Handler+0x94>)
   82ba6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82ba8:	4a12      	ldr	r2, [pc, #72]	; (82bf4 <Reset_Handler+0x98>)
   82baa:	687b      	ldr	r3, [r7, #4]
   82bac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   82bb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82bb4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82bb6:	687b      	ldr	r3, [r7, #4]
   82bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   82bbc:	d309      	bcc.n	82bd2 <Reset_Handler+0x76>
   82bbe:	687a      	ldr	r2, [r7, #4]
   82bc0:	4b0d      	ldr	r3, [pc, #52]	; (82bf8 <Reset_Handler+0x9c>)
   82bc2:	429a      	cmp	r2, r3
   82bc4:	d805      	bhi.n	82bd2 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82bc6:	4b0b      	ldr	r3, [pc, #44]	; (82bf4 <Reset_Handler+0x98>)
   82bc8:	4a0a      	ldr	r2, [pc, #40]	; (82bf4 <Reset_Handler+0x98>)
   82bca:	6892      	ldr	r2, [r2, #8]
   82bcc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82bd0:	609a      	str	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82bd2:	4b0a      	ldr	r3, [pc, #40]	; (82bfc <Reset_Handler+0xa0>)
   82bd4:	4798      	blx	r3

	/* Branch to main function */
	main();
   82bd6:	4b0a      	ldr	r3, [pc, #40]	; (82c00 <Reset_Handler+0xa4>)
   82bd8:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82bda:	e7fe      	b.n	82bda <Reset_Handler+0x7e>
   82bdc:	000870c4 	.word	0x000870c4
   82be0:	20070000 	.word	0x20070000
   82be4:	20070438 	.word	0x20070438
   82be8:	20070438 	.word	0x20070438
   82bec:	2007bb78 	.word	0x2007bb78
   82bf0:	00080000 	.word	0x00080000
   82bf4:	e000ed00 	.word	0xe000ed00
   82bf8:	200fffff 	.word	0x200fffff
   82bfc:	00086bed 	.word	0x00086bed
   82c00:	00086475 	.word	0x00086475

00082c04 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   82c04:	b480      	push	{r7}
   82c06:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82c08:	4b56      	ldr	r3, [pc, #344]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82c0c:	f003 0303 	and.w	r3, r3, #3
   82c10:	2b03      	cmp	r3, #3
   82c12:	f200 808a 	bhi.w	82d2a <SystemCoreClockUpdate+0x126>
   82c16:	a101      	add	r1, pc, #4	; (adr r1, 82c1c <SystemCoreClockUpdate+0x18>)
   82c18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   82c1c:	00082c2d 	.word	0x00082c2d
   82c20:	00082c4d 	.word	0x00082c4d
   82c24:	00082c9d 	.word	0x00082c9d
   82c28:	00082c9d 	.word	0x00082c9d
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82c2c:	4b4e      	ldr	r3, [pc, #312]	; (82d68 <SystemCoreClockUpdate+0x164>)
   82c2e:	695b      	ldr	r3, [r3, #20]
   82c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82c34:	2b00      	cmp	r3, #0
   82c36:	d004      	beq.n	82c42 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82c38:	4b4c      	ldr	r3, [pc, #304]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82c3e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   82c40:	e073      	b.n	82d2a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82c42:	4b4a      	ldr	r3, [pc, #296]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c44:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   82c48:	601a      	str	r2, [r3, #0]
		}
		break;
   82c4a:	e06e      	b.n	82d2a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82c4c:	4b45      	ldr	r3, [pc, #276]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82c4e:	6a1b      	ldr	r3, [r3, #32]
   82c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82c54:	2b00      	cmp	r3, #0
   82c56:	d003      	beq.n	82c60 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82c58:	4b44      	ldr	r3, [pc, #272]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c5a:	4a45      	ldr	r2, [pc, #276]	; (82d70 <SystemCoreClockUpdate+0x16c>)
   82c5c:	601a      	str	r2, [r3, #0]
   82c5e:	e01c      	b.n	82c9a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82c60:	4b42      	ldr	r3, [pc, #264]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c62:	4a44      	ldr	r2, [pc, #272]	; (82d74 <SystemCoreClockUpdate+0x170>)
   82c64:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82c66:	4b3f      	ldr	r3, [pc, #252]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82c68:	6a1b      	ldr	r3, [r3, #32]
   82c6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82c6e:	2b10      	cmp	r3, #16
   82c70:	d004      	beq.n	82c7c <SystemCoreClockUpdate+0x78>
   82c72:	2b20      	cmp	r3, #32
   82c74:	d008      	beq.n	82c88 <SystemCoreClockUpdate+0x84>
   82c76:	2b00      	cmp	r3, #0
   82c78:	d00e      	beq.n	82c98 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82c7a:	e00e      	b.n	82c9a <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82c7c:	4b3b      	ldr	r3, [pc, #236]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c7e:	681b      	ldr	r3, [r3, #0]
   82c80:	005a      	lsls	r2, r3, #1
   82c82:	4b3a      	ldr	r3, [pc, #232]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c84:	601a      	str	r2, [r3, #0]
				break;
   82c86:	e008      	b.n	82c9a <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82c88:	4b38      	ldr	r3, [pc, #224]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c8a:	681a      	ldr	r2, [r3, #0]
   82c8c:	4613      	mov	r3, r2
   82c8e:	005b      	lsls	r3, r3, #1
   82c90:	441a      	add	r2, r3
   82c92:	4b36      	ldr	r3, [pc, #216]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82c94:	601a      	str	r2, [r3, #0]
				break;
   82c96:	e000      	b.n	82c9a <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82c98:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   82c9a:	e046      	b.n	82d2a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82c9c:	4b31      	ldr	r3, [pc, #196]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82c9e:	6a1b      	ldr	r3, [r3, #32]
   82ca0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   82ca4:	2b00      	cmp	r3, #0
   82ca6:	d003      	beq.n	82cb0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82ca8:	4b30      	ldr	r3, [pc, #192]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82caa:	4a31      	ldr	r2, [pc, #196]	; (82d70 <SystemCoreClockUpdate+0x16c>)
   82cac:	601a      	str	r2, [r3, #0]
   82cae:	e01c      	b.n	82cea <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82cb0:	4b2e      	ldr	r3, [pc, #184]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82cb2:	4a30      	ldr	r2, [pc, #192]	; (82d74 <SystemCoreClockUpdate+0x170>)
   82cb4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82cb6:	4b2b      	ldr	r3, [pc, #172]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82cb8:	6a1b      	ldr	r3, [r3, #32]
   82cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82cbe:	2b10      	cmp	r3, #16
   82cc0:	d004      	beq.n	82ccc <SystemCoreClockUpdate+0xc8>
   82cc2:	2b20      	cmp	r3, #32
   82cc4:	d008      	beq.n	82cd8 <SystemCoreClockUpdate+0xd4>
   82cc6:	2b00      	cmp	r3, #0
   82cc8:	d00e      	beq.n	82ce8 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   82cca:	e00e      	b.n	82cea <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82ccc:	4b27      	ldr	r3, [pc, #156]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82cce:	681b      	ldr	r3, [r3, #0]
   82cd0:	005a      	lsls	r2, r3, #1
   82cd2:	4b26      	ldr	r3, [pc, #152]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82cd4:	601a      	str	r2, [r3, #0]
				break;
   82cd6:	e008      	b.n	82cea <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82cd8:	4b24      	ldr	r3, [pc, #144]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82cda:	681a      	ldr	r2, [r3, #0]
   82cdc:	4613      	mov	r3, r2
   82cde:	005b      	lsls	r3, r3, #1
   82ce0:	441a      	add	r2, r3
   82ce2:	4b22      	ldr	r3, [pc, #136]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82ce4:	601a      	str	r2, [r3, #0]
				break;
   82ce6:	e000      	b.n	82cea <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   82ce8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82cea:	4b1e      	ldr	r3, [pc, #120]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82cee:	f003 0303 	and.w	r3, r3, #3
   82cf2:	2b02      	cmp	r3, #2
   82cf4:	d115      	bne.n	82d22 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82cf6:	4b1b      	ldr	r3, [pc, #108]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   82cfa:	4b1f      	ldr	r3, [pc, #124]	; (82d78 <SystemCoreClockUpdate+0x174>)
   82cfc:	4013      	ands	r3, r2
   82cfe:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   82d00:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82d02:	4a1a      	ldr	r2, [pc, #104]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d04:	6812      	ldr	r2, [r2, #0]
   82d06:	fb02 f203 	mul.w	r2, r2, r3
   82d0a:	4b18      	ldr	r3, [pc, #96]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d0c:	601a      	str	r2, [r3, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82d0e:	4b17      	ldr	r3, [pc, #92]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d10:	681a      	ldr	r2, [r3, #0]
   82d12:	4b14      	ldr	r3, [pc, #80]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   82d16:	b2db      	uxtb	r3, r3
   82d18:	fbb2 f2f3 	udiv	r2, r2, r3
   82d1c:	4b13      	ldr	r3, [pc, #76]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d1e:	601a      	str	r2, [r3, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   82d20:	e002      	b.n	82d28 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82d22:	4b12      	ldr	r3, [pc, #72]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d24:	4a15      	ldr	r2, [pc, #84]	; (82d7c <SystemCoreClockUpdate+0x178>)
   82d26:	601a      	str	r2, [r3, #0]
		}
		break;
   82d28:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82d2a:	4b0e      	ldr	r3, [pc, #56]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82d32:	2b70      	cmp	r3, #112	; 0x70
   82d34:	d108      	bne.n	82d48 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   82d36:	4b0d      	ldr	r3, [pc, #52]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d38:	681a      	ldr	r2, [r3, #0]
   82d3a:	4b11      	ldr	r3, [pc, #68]	; (82d80 <SystemCoreClockUpdate+0x17c>)
   82d3c:	fba3 1302 	umull	r1, r3, r3, r2
   82d40:	085a      	lsrs	r2, r3, #1
   82d42:	4b0a      	ldr	r3, [pc, #40]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d44:	601a      	str	r2, [r3, #0]
   82d46:	e009      	b.n	82d5c <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82d48:	4b08      	ldr	r3, [pc, #32]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d4a:	681a      	ldr	r2, [r3, #0]
   82d4c:	4b05      	ldr	r3, [pc, #20]	; (82d64 <SystemCoreClockUpdate+0x160>)
   82d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d50:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82d54:	091b      	lsrs	r3, r3, #4
   82d56:	40da      	lsrs	r2, r3
   82d58:	4b04      	ldr	r3, [pc, #16]	; (82d6c <SystemCoreClockUpdate+0x168>)
   82d5a:	601a      	str	r2, [r3, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82d5c:	46bd      	mov	sp, r7
   82d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82d62:	4770      	bx	lr
   82d64:	400e0600 	.word	0x400e0600
   82d68:	400e1a10 	.word	0x400e1a10
   82d6c:	20070000 	.word	0x20070000
   82d70:	00b71b00 	.word	0x00b71b00
   82d74:	003d0900 	.word	0x003d0900
   82d78:	07ff0000 	.word	0x07ff0000
   82d7c:	0e4e1c00 	.word	0x0e4e1c00
   82d80:	aaaaaaab 	.word	0xaaaaaaab

00082d84 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   82d84:	b480      	push	{r7}
   82d86:	b083      	sub	sp, #12
   82d88:	af00      	add	r7, sp, #0
   82d8a:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   82d8c:	687a      	ldr	r2, [r7, #4]
   82d8e:	4b1f      	ldr	r3, [pc, #124]	; (82e0c <system_init_flash+0x88>)
   82d90:	429a      	cmp	r2, r3
   82d92:	d806      	bhi.n	82da2 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   82d94:	4b1e      	ldr	r3, [pc, #120]	; (82e10 <system_init_flash+0x8c>)
   82d96:	2200      	movs	r2, #0
   82d98:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   82d9a:	4b1e      	ldr	r3, [pc, #120]	; (82e14 <system_init_flash+0x90>)
   82d9c:	2200      	movs	r2, #0
   82d9e:	601a      	str	r2, [r3, #0]
   82da0:	e02e      	b.n	82e00 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   82da2:	687a      	ldr	r2, [r7, #4]
   82da4:	4b1c      	ldr	r3, [pc, #112]	; (82e18 <system_init_flash+0x94>)
   82da6:	429a      	cmp	r2, r3
   82da8:	d808      	bhi.n	82dbc <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   82daa:	4b19      	ldr	r3, [pc, #100]	; (82e10 <system_init_flash+0x8c>)
   82dac:	f44f 7280 	mov.w	r2, #256	; 0x100
   82db0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   82db2:	4b18      	ldr	r3, [pc, #96]	; (82e14 <system_init_flash+0x90>)
   82db4:	f44f 7280 	mov.w	r2, #256	; 0x100
   82db8:	601a      	str	r2, [r3, #0]
   82dba:	e021      	b.n	82e00 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   82dbc:	687a      	ldr	r2, [r7, #4]
   82dbe:	4b17      	ldr	r3, [pc, #92]	; (82e1c <system_init_flash+0x98>)
   82dc0:	429a      	cmp	r2, r3
   82dc2:	d808      	bhi.n	82dd6 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   82dc4:	4b12      	ldr	r3, [pc, #72]	; (82e10 <system_init_flash+0x8c>)
   82dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
   82dca:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   82dcc:	4b11      	ldr	r3, [pc, #68]	; (82e14 <system_init_flash+0x90>)
   82dce:	f44f 7200 	mov.w	r2, #512	; 0x200
   82dd2:	601a      	str	r2, [r3, #0]
   82dd4:	e014      	b.n	82e00 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   82dd6:	687a      	ldr	r2, [r7, #4]
   82dd8:	4b11      	ldr	r3, [pc, #68]	; (82e20 <system_init_flash+0x9c>)
   82dda:	429a      	cmp	r2, r3
   82ddc:	d808      	bhi.n	82df0 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   82dde:	4b0c      	ldr	r3, [pc, #48]	; (82e10 <system_init_flash+0x8c>)
   82de0:	f44f 7240 	mov.w	r2, #768	; 0x300
   82de4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   82de6:	4b0b      	ldr	r3, [pc, #44]	; (82e14 <system_init_flash+0x90>)
   82de8:	f44f 7240 	mov.w	r2, #768	; 0x300
   82dec:	601a      	str	r2, [r3, #0]
   82dee:	e007      	b.n	82e00 <system_init_flash+0x7c>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   82df0:	4b07      	ldr	r3, [pc, #28]	; (82e10 <system_init_flash+0x8c>)
   82df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82df6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   82df8:	4b06      	ldr	r3, [pc, #24]	; (82e14 <system_init_flash+0x90>)
   82dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   82dfe:	601a      	str	r2, [r3, #0]
	}
}
   82e00:	370c      	adds	r7, #12
   82e02:	46bd      	mov	sp, r7
   82e04:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e08:	4770      	bx	lr
   82e0a:	bf00      	nop
   82e0c:	0157529f 	.word	0x0157529f
   82e10:	400e0a00 	.word	0x400e0a00
   82e14:	400e0c00 	.word	0x400e0c00
   82e18:	0206cc7f 	.word	0x0206cc7f
   82e1c:	0328b73f 	.word	0x0328b73f
   82e20:	04a62f7f 	.word	0x04a62f7f

00082e24 <vListInitialise>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "list.h"

void vListInitialise( List_t * const pxList )
{
   82e24:	b480      	push	{r7}
   82e26:	b083      	sub	sp, #12
   82e28:	af00      	add	r7, sp, #0
   82e2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82e2c:	687b      	ldr	r3, [r7, #4]
   82e2e:	f103 0208 	add.w	r2, r3, #8
   82e32:	687b      	ldr	r3, [r7, #4]
   82e34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   82e36:	687b      	ldr	r3, [r7, #4]
   82e38:	f04f 32ff 	mov.w	r2, #4294967295
   82e3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82e3e:	687b      	ldr	r3, [r7, #4]
   82e40:	f103 0208 	add.w	r2, r3, #8
   82e44:	687b      	ldr	r3, [r7, #4]
   82e46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82e48:	687b      	ldr	r3, [r7, #4]
   82e4a:	f103 0208 	add.w	r2, r3, #8
   82e4e:	687b      	ldr	r3, [r7, #4]
   82e50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   82e52:	687b      	ldr	r3, [r7, #4]
   82e54:	2200      	movs	r2, #0
   82e56:	601a      	str	r2, [r3, #0]
}
   82e58:	370c      	adds	r7, #12
   82e5a:	46bd      	mov	sp, r7
   82e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e60:	4770      	bx	lr
   82e62:	bf00      	nop

00082e64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   82e64:	b480      	push	{r7}
   82e66:	b083      	sub	sp, #12
   82e68:	af00      	add	r7, sp, #0
   82e6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   82e6c:	687b      	ldr	r3, [r7, #4]
   82e6e:	2200      	movs	r2, #0
   82e70:	611a      	str	r2, [r3, #16]
}
   82e72:	370c      	adds	r7, #12
   82e74:	46bd      	mov	sp, r7
   82e76:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e7a:	4770      	bx	lr

00082e7c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82e7c:	b480      	push	{r7}
   82e7e:	b085      	sub	sp, #20
   82e80:	af00      	add	r7, sp, #0
   82e82:	6078      	str	r0, [r7, #4]
   82e84:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   82e86:	687b      	ldr	r3, [r7, #4]
   82e88:	685b      	ldr	r3, [r3, #4]
   82e8a:	60fb      	str	r3, [r7, #12]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   82e8c:	683b      	ldr	r3, [r7, #0]
   82e8e:	68fa      	ldr	r2, [r7, #12]
   82e90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   82e92:	68fb      	ldr	r3, [r7, #12]
   82e94:	689a      	ldr	r2, [r3, #8]
   82e96:	683b      	ldr	r3, [r7, #0]
   82e98:	609a      	str	r2, [r3, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
   82e9a:	68fb      	ldr	r3, [r7, #12]
   82e9c:	689b      	ldr	r3, [r3, #8]
   82e9e:	683a      	ldr	r2, [r7, #0]
   82ea0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   82ea2:	68fb      	ldr	r3, [r7, #12]
   82ea4:	683a      	ldr	r2, [r7, #0]
   82ea6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82ea8:	683b      	ldr	r3, [r7, #0]
   82eaa:	687a      	ldr	r2, [r7, #4]
   82eac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82eae:	687b      	ldr	r3, [r7, #4]
   82eb0:	681b      	ldr	r3, [r3, #0]
   82eb2:	1c5a      	adds	r2, r3, #1
   82eb4:	687b      	ldr	r3, [r7, #4]
   82eb6:	601a      	str	r2, [r3, #0]
}
   82eb8:	3714      	adds	r7, #20
   82eba:	46bd      	mov	sp, r7
   82ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82ec0:	4770      	bx	lr
   82ec2:	bf00      	nop

00082ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   82ec4:	b480      	push	{r7}
   82ec6:	b085      	sub	sp, #20
   82ec8:	af00      	add	r7, sp, #0
   82eca:	6078      	str	r0, [r7, #4]
   82ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   82ece:	683b      	ldr	r3, [r7, #0]
   82ed0:	681b      	ldr	r3, [r3, #0]
   82ed2:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   82ed4:	68bb      	ldr	r3, [r7, #8]
   82ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
   82eda:	d103      	bne.n	82ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   82edc:	687b      	ldr	r3, [r7, #4]
   82ede:	691b      	ldr	r3, [r3, #16]
   82ee0:	60fb      	str	r3, [r7, #12]
   82ee2:	e00c      	b.n	82efe <vListInsert+0x3a>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   82ee4:	687b      	ldr	r3, [r7, #4]
   82ee6:	3308      	adds	r3, #8
   82ee8:	60fb      	str	r3, [r7, #12]
   82eea:	e002      	b.n	82ef2 <vListInsert+0x2e>
   82eec:	68fb      	ldr	r3, [r7, #12]
   82eee:	685b      	ldr	r3, [r3, #4]
   82ef0:	60fb      	str	r3, [r7, #12]
   82ef2:	68fb      	ldr	r3, [r7, #12]
   82ef4:	685b      	ldr	r3, [r3, #4]
   82ef6:	681a      	ldr	r2, [r3, #0]
   82ef8:	68bb      	ldr	r3, [r7, #8]
   82efa:	429a      	cmp	r2, r3
   82efc:	d9f6      	bls.n	82eec <vListInsert+0x28>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   82efe:	68fb      	ldr	r3, [r7, #12]
   82f00:	685a      	ldr	r2, [r3, #4]
   82f02:	683b      	ldr	r3, [r7, #0]
   82f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   82f06:	683b      	ldr	r3, [r7, #0]
   82f08:	685b      	ldr	r3, [r3, #4]
   82f0a:	683a      	ldr	r2, [r7, #0]
   82f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   82f0e:	683b      	ldr	r3, [r7, #0]
   82f10:	68fa      	ldr	r2, [r7, #12]
   82f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   82f14:	68fb      	ldr	r3, [r7, #12]
   82f16:	683a      	ldr	r2, [r7, #0]
   82f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   82f1a:	683b      	ldr	r3, [r7, #0]
   82f1c:	687a      	ldr	r2, [r7, #4]
   82f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   82f20:	687b      	ldr	r3, [r7, #4]
   82f22:	681b      	ldr	r3, [r3, #0]
   82f24:	1c5a      	adds	r2, r3, #1
   82f26:	687b      	ldr	r3, [r7, #4]
   82f28:	601a      	str	r2, [r3, #0]
}
   82f2a:	3714      	adds	r7, #20
   82f2c:	46bd      	mov	sp, r7
   82f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f32:	4770      	bx	lr

00082f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   82f34:	b480      	push	{r7}
   82f36:	b085      	sub	sp, #20
   82f38:	af00      	add	r7, sp, #0
   82f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   82f3c:	687b      	ldr	r3, [r7, #4]
   82f3e:	691b      	ldr	r3, [r3, #16]
   82f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   82f42:	687b      	ldr	r3, [r7, #4]
   82f44:	685b      	ldr	r3, [r3, #4]
   82f46:	687a      	ldr	r2, [r7, #4]
   82f48:	6892      	ldr	r2, [r2, #8]
   82f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   82f4c:	687b      	ldr	r3, [r7, #4]
   82f4e:	689b      	ldr	r3, [r3, #8]
   82f50:	687a      	ldr	r2, [r7, #4]
   82f52:	6852      	ldr	r2, [r2, #4]
   82f54:	605a      	str	r2, [r3, #4]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   82f56:	68fb      	ldr	r3, [r7, #12]
   82f58:	685a      	ldr	r2, [r3, #4]
   82f5a:	687b      	ldr	r3, [r7, #4]
   82f5c:	429a      	cmp	r2, r3
   82f5e:	d103      	bne.n	82f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   82f60:	687b      	ldr	r3, [r7, #4]
   82f62:	689a      	ldr	r2, [r3, #8]
   82f64:	68fb      	ldr	r3, [r7, #12]
   82f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   82f68:	687b      	ldr	r3, [r7, #4]
   82f6a:	2200      	movs	r2, #0
   82f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   82f6e:	68fb      	ldr	r3, [r7, #12]
   82f70:	681b      	ldr	r3, [r3, #0]
   82f72:	1e5a      	subs	r2, r3, #1
   82f74:	68fb      	ldr	r3, [r7, #12]
   82f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   82f78:	68fb      	ldr	r3, [r7, #12]
   82f7a:	681b      	ldr	r3, [r3, #0]
}
   82f7c:	4618      	mov	r0, r3
   82f7e:	3714      	adds	r7, #20
   82f80:	46bd      	mov	sp, r7
   82f82:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f86:	4770      	bx	lr

00082f88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   82f88:	b480      	push	{r7}
   82f8a:	b085      	sub	sp, #20
   82f8c:	af00      	add	r7, sp, #0
   82f8e:	60f8      	str	r0, [r7, #12]
   82f90:	60b9      	str	r1, [r7, #8]
   82f92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   82f94:	68fb      	ldr	r3, [r7, #12]
   82f96:	3b04      	subs	r3, #4
   82f98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   82f9a:	68fb      	ldr	r3, [r7, #12]
   82f9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   82fa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82fa2:	68fb      	ldr	r3, [r7, #12]
   82fa4:	3b04      	subs	r3, #4
   82fa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   82fa8:	68ba      	ldr	r2, [r7, #8]
   82faa:	68fb      	ldr	r3, [r7, #12]
   82fac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   82fae:	68fb      	ldr	r3, [r7, #12]
   82fb0:	3b04      	subs	r3, #4
   82fb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   82fb4:	4a09      	ldr	r2, [pc, #36]	; (82fdc <pxPortInitialiseStack+0x54>)
   82fb6:	68fb      	ldr	r3, [r7, #12]
   82fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   82fba:	68fb      	ldr	r3, [r7, #12]
   82fbc:	3b14      	subs	r3, #20
   82fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   82fc0:	687a      	ldr	r2, [r7, #4]
   82fc2:	68fb      	ldr	r3, [r7, #12]
   82fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
   82fc6:	68fb      	ldr	r3, [r7, #12]
   82fc8:	3b20      	subs	r3, #32
   82fca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   82fcc:	68fb      	ldr	r3, [r7, #12]
}
   82fce:	4618      	mov	r0, r3
   82fd0:	3714      	adds	r7, #20
   82fd2:	46bd      	mov	sp, r7
   82fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
   82fd8:	4770      	bx	lr
   82fda:	bf00      	nop
   82fdc:	00082fe1 	.word	0x00082fe1

00082fe0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   82fe0:	b580      	push	{r7, lr}
   82fe2:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   82fe4:	4b05      	ldr	r3, [pc, #20]	; (82ffc <prvTaskExitError+0x1c>)
   82fe6:	681b      	ldr	r3, [r3, #0]
   82fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
   82fec:	d002      	beq.n	82ff4 <prvTaskExitError+0x14>
   82fee:	4b04      	ldr	r3, [pc, #16]	; (83000 <prvTaskExitError+0x20>)
   82ff0:	4798      	blx	r3
   82ff2:	e7fe      	b.n	82ff2 <prvTaskExitError+0x12>
	portDISABLE_INTERRUPTS();
   82ff4:	4b02      	ldr	r3, [pc, #8]	; (83000 <prvTaskExitError+0x20>)
   82ff6:	4798      	blx	r3
	for( ;; );
   82ff8:	e7fe      	b.n	82ff8 <prvTaskExitError+0x18>
   82ffa:	bf00      	nop
   82ffc:	20070004 	.word	0x20070004
   83000:	000831ad 	.word	0x000831ad

00083004 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
   83004:	4b07      	ldr	r3, [pc, #28]	; (83024 <pxCurrentTCBConst2>)
   83006:	6819      	ldr	r1, [r3, #0]
   83008:	6808      	ldr	r0, [r1, #0]
   8300a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8300e:	f380 8809 	msr	PSP, r0
   83012:	f3bf 8f6f 	isb	sy
   83016:	f04f 0000 	mov.w	r0, #0
   8301a:	f380 8811 	msr	BASEPRI, r0
   8301e:	f04e 0e0d 	orr.w	lr, lr, #13
   83022:	4770      	bx	lr

00083024 <pxCurrentTCBConst2>:
   83024:	2007a514 	.word	0x2007a514

00083028 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   83028:	4806      	ldr	r0, [pc, #24]	; (83044 <prvPortStartFirstTask+0x1c>)
   8302a:	6800      	ldr	r0, [r0, #0]
   8302c:	6800      	ldr	r0, [r0, #0]
   8302e:	f380 8808 	msr	MSP, r0
   83032:	b662      	cpsie	i
   83034:	b661      	cpsie	f
   83036:	f3bf 8f4f 	dsb	sy
   8303a:	f3bf 8f6f 	isb	sy
   8303e:	df00      	svc	0
   83040:	bf00      	nop
   83042:	0000      	.short	0x0000
   83044:	e000ed08 	.word	0xe000ed08

00083048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   83048:	b580      	push	{r7, lr}
   8304a:	b084      	sub	sp, #16
   8304c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
   8304e:	4b28      	ldr	r3, [pc, #160]	; (830f0 <xPortStartScheduler+0xa8>)
   83050:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
   83052:	68fb      	ldr	r3, [r7, #12]
   83054:	781b      	ldrb	r3, [r3, #0]
   83056:	b2db      	uxtb	r3, r3
   83058:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
   8305a:	68fb      	ldr	r3, [r7, #12]
   8305c:	22ff      	movs	r2, #255	; 0xff
   8305e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
   83060:	68fb      	ldr	r3, [r7, #12]
   83062:	781b      	ldrb	r3, [r3, #0]
   83064:	b2db      	uxtb	r3, r3
   83066:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
   83068:	79fb      	ldrb	r3, [r7, #7]
   8306a:	b2db      	uxtb	r3, r3
   8306c:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
   83070:	b2da      	uxtb	r2, r3
   83072:	4b20      	ldr	r3, [pc, #128]	; (830f4 <xPortStartScheduler+0xac>)
   83074:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
   83076:	4b20      	ldr	r3, [pc, #128]	; (830f8 <xPortStartScheduler+0xb0>)
   83078:	2207      	movs	r2, #7
   8307a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   8307c:	e009      	b.n	83092 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
   8307e:	4b1e      	ldr	r3, [pc, #120]	; (830f8 <xPortStartScheduler+0xb0>)
   83080:	681b      	ldr	r3, [r3, #0]
   83082:	1e5a      	subs	r2, r3, #1
   83084:	4b1c      	ldr	r3, [pc, #112]	; (830f8 <xPortStartScheduler+0xb0>)
   83086:	601a      	str	r2, [r3, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
   83088:	79fb      	ldrb	r3, [r7, #7]
   8308a:	b2db      	uxtb	r3, r3
   8308c:	005b      	lsls	r3, r3, #1
   8308e:	b2db      	uxtb	r3, r3
   83090:	71fb      	strb	r3, [r7, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
   83092:	79fb      	ldrb	r3, [r7, #7]
   83094:	b2db      	uxtb	r3, r3
   83096:	b2db      	uxtb	r3, r3
   83098:	b25b      	sxtb	r3, r3
   8309a:	2b00      	cmp	r3, #0
   8309c:	dbef      	blt.n	8307e <xPortStartScheduler+0x36>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
   8309e:	4b16      	ldr	r3, [pc, #88]	; (830f8 <xPortStartScheduler+0xb0>)
   830a0:	681b      	ldr	r3, [r3, #0]
   830a2:	021a      	lsls	r2, r3, #8
   830a4:	4b14      	ldr	r3, [pc, #80]	; (830f8 <xPortStartScheduler+0xb0>)
   830a6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
   830a8:	4b13      	ldr	r3, [pc, #76]	; (830f8 <xPortStartScheduler+0xb0>)
   830aa:	681b      	ldr	r3, [r3, #0]
   830ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   830b0:	4b11      	ldr	r3, [pc, #68]	; (830f8 <xPortStartScheduler+0xb0>)
   830b2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
   830b4:	68bb      	ldr	r3, [r7, #8]
   830b6:	b2da      	uxtb	r2, r3
   830b8:	68fb      	ldr	r3, [r7, #12]
   830ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   830bc:	4b0f      	ldr	r3, [pc, #60]	; (830fc <xPortStartScheduler+0xb4>)
   830be:	4a0f      	ldr	r2, [pc, #60]	; (830fc <xPortStartScheduler+0xb4>)
   830c0:	6812      	ldr	r2, [r2, #0]
   830c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   830c6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   830c8:	4b0c      	ldr	r3, [pc, #48]	; (830fc <xPortStartScheduler+0xb4>)
   830ca:	4a0c      	ldr	r2, [pc, #48]	; (830fc <xPortStartScheduler+0xb4>)
   830cc:	6812      	ldr	r2, [r2, #0]
   830ce:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   830d2:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   830d4:	4b0a      	ldr	r3, [pc, #40]	; (83100 <xPortStartScheduler+0xb8>)
   830d6:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   830d8:	4b0a      	ldr	r3, [pc, #40]	; (83104 <xPortStartScheduler+0xbc>)
   830da:	2200      	movs	r2, #0
   830dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   830de:	4b0a      	ldr	r3, [pc, #40]	; (83108 <xPortStartScheduler+0xc0>)
   830e0:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
   830e2:	4b0a      	ldr	r3, [pc, #40]	; (8310c <xPortStartScheduler+0xc4>)
   830e4:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   830e6:	2300      	movs	r3, #0
}
   830e8:	4618      	mov	r0, r3
   830ea:	3710      	adds	r7, #16
   830ec:	46bd      	mov	sp, r7
   830ee:	bd80      	pop	{r7, pc}
   830f0:	e000e400 	.word	0xe000e400
   830f4:	200704f4 	.word	0x200704f4
   830f8:	200704f8 	.word	0x200704f8
   830fc:	e000ed20 	.word	0xe000ed20
   83100:	00083241 	.word	0x00083241
   83104:	20070004 	.word	0x20070004
   83108:	00083029 	.word	0x00083029
   8310c:	00082fe1 	.word	0x00082fe1

00083110 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   83110:	b480      	push	{r7}
   83112:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   83114:	4b05      	ldr	r3, [pc, #20]	; (8312c <vPortYield+0x1c>)
   83116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8311a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
   8311c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   83120:	f3bf 8f6f 	isb	sy
}
   83124:	46bd      	mov	sp, r7
   83126:	f85d 7b04 	ldr.w	r7, [sp], #4
   8312a:	4770      	bx	lr
   8312c:	e000ed04 	.word	0xe000ed04

00083130 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   83130:	b580      	push	{r7, lr}
   83132:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
   83134:	4b0c      	ldr	r3, [pc, #48]	; (83168 <vPortEnterCritical+0x38>)
   83136:	4798      	blx	r3
	uxCriticalNesting++;
   83138:	4b0c      	ldr	r3, [pc, #48]	; (8316c <vPortEnterCritical+0x3c>)
   8313a:	681b      	ldr	r3, [r3, #0]
   8313c:	1c5a      	adds	r2, r3, #1
   8313e:	4b0b      	ldr	r3, [pc, #44]	; (8316c <vPortEnterCritical+0x3c>)
   83140:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
   83142:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   83146:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
   8314a:	4b08      	ldr	r3, [pc, #32]	; (8316c <vPortEnterCritical+0x3c>)
   8314c:	681b      	ldr	r3, [r3, #0]
   8314e:	2b01      	cmp	r3, #1
   83150:	d108      	bne.n	83164 <vPortEnterCritical+0x34>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
   83152:	4b07      	ldr	r3, [pc, #28]	; (83170 <vPortEnterCritical+0x40>)
   83154:	681b      	ldr	r3, [r3, #0]
   83156:	f003 031f 	and.w	r3, r3, #31
   8315a:	2b00      	cmp	r3, #0
   8315c:	d002      	beq.n	83164 <vPortEnterCritical+0x34>
   8315e:	4b02      	ldr	r3, [pc, #8]	; (83168 <vPortEnterCritical+0x38>)
   83160:	4798      	blx	r3
   83162:	e7fe      	b.n	83162 <vPortEnterCritical+0x32>
	}
}
   83164:	bd80      	pop	{r7, pc}
   83166:	bf00      	nop
   83168:	000831ad 	.word	0x000831ad
   8316c:	20070004 	.word	0x20070004
   83170:	e000ed04 	.word	0xe000ed04

00083174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   83174:	b580      	push	{r7, lr}
   83176:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   83178:	4b09      	ldr	r3, [pc, #36]	; (831a0 <vPortExitCritical+0x2c>)
   8317a:	681b      	ldr	r3, [r3, #0]
   8317c:	2b00      	cmp	r3, #0
   8317e:	d102      	bne.n	83186 <vPortExitCritical+0x12>
   83180:	4b08      	ldr	r3, [pc, #32]	; (831a4 <vPortExitCritical+0x30>)
   83182:	4798      	blx	r3
   83184:	e7fe      	b.n	83184 <vPortExitCritical+0x10>
	uxCriticalNesting--;
   83186:	4b06      	ldr	r3, [pc, #24]	; (831a0 <vPortExitCritical+0x2c>)
   83188:	681b      	ldr	r3, [r3, #0]
   8318a:	1e5a      	subs	r2, r3, #1
   8318c:	4b04      	ldr	r3, [pc, #16]	; (831a0 <vPortExitCritical+0x2c>)
   8318e:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
   83190:	4b03      	ldr	r3, [pc, #12]	; (831a0 <vPortExitCritical+0x2c>)
   83192:	681b      	ldr	r3, [r3, #0]
   83194:	2b00      	cmp	r3, #0
   83196:	d102      	bne.n	8319e <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
   83198:	2000      	movs	r0, #0
   8319a:	4b03      	ldr	r3, [pc, #12]	; (831a8 <vPortExitCritical+0x34>)
   8319c:	4798      	blx	r3
	}
}
   8319e:	bd80      	pop	{r7, pc}
   831a0:	20070004 	.word	0x20070004
   831a4:	000831ad 	.word	0x000831ad
   831a8:	000831c1 	.word	0x000831c1

000831ac <ulPortSetInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
   831ac:	f3ef 8011 	mrs	r0, BASEPRI
   831b0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   831b4:	f381 8811 	msr	BASEPRI, r1
   831b8:	4770      	bx	lr
		:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "r0", "r1"	\
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
   831ba:	2300      	movs	r3, #0
}
   831bc:	4618      	mov	r0, r3
   831be:	bf00      	nop

000831c0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
   831c0:	f380 8811 	msr	BASEPRI, r0
   831c4:	4770      	bx	lr
   831c6:	bf00      	nop

000831c8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   831c8:	f3ef 8009 	mrs	r0, PSP
   831cc:	f3bf 8f6f 	isb	sy
   831d0:	4b0d      	ldr	r3, [pc, #52]	; (83208 <pxCurrentTCBConst>)
   831d2:	681a      	ldr	r2, [r3, #0]
   831d4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   831d8:	6010      	str	r0, [r2, #0]
   831da:	e92d 4008 	stmdb	sp!, {r3, lr}
   831de:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   831e2:	f380 8811 	msr	BASEPRI, r0
   831e6:	f001 f98d 	bl	84504 <vTaskSwitchContext>
   831ea:	f04f 0000 	mov.w	r0, #0
   831ee:	f380 8811 	msr	BASEPRI, r0
   831f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   831f6:	6819      	ldr	r1, [r3, #0]
   831f8:	6808      	ldr	r0, [r1, #0]
   831fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   831fe:	f380 8809 	msr	PSP, r0
   83202:	f3bf 8f6f 	isb	sy
   83206:	4770      	bx	lr

00083208 <pxCurrentTCBConst>:
   83208:	2007a514 	.word	0x2007a514

0008320c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )				// This is the actual subroutine that handles the Systick interrupt.
{
   8320c:	b580      	push	{r7, lr}
   8320e:	af00      	add	r7, sp, #0
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   83210:	4b07      	ldr	r3, [pc, #28]	; (83230 <SysTick_Handler+0x24>)
   83212:	4798      	blx	r3
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )		// xTaskIncrementTick is contained in tasks.c, it increments the tick
   83214:	4b07      	ldr	r3, [pc, #28]	; (83234 <SysTick_Handler+0x28>)
   83216:	4798      	blx	r3
   83218:	4603      	mov	r3, r0
   8321a:	2b00      	cmp	r3, #0
   8321c:	d003      	beq.n	83226 <SysTick_Handler+0x1a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8321e:	4b06      	ldr	r3, [pc, #24]	; (83238 <SysTick_Handler+0x2c>)
   83220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   83224:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   83226:	2000      	movs	r0, #0
   83228:	4b04      	ldr	r3, [pc, #16]	; (8323c <SysTick_Handler+0x30>)
   8322a:	4798      	blx	r3
}
   8322c:	bd80      	pop	{r7, pc}
   8322e:	bf00      	nop
   83230:	000831ad 	.word	0x000831ad
   83234:	00084389 	.word	0x00084389
   83238:	e000ed04 	.word	0xe000ed04
   8323c:	000831c1 	.word	0x000831c1

00083240 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
   83240:	b480      	push	{r7}
   83242:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   83244:	4b07      	ldr	r3, [pc, #28]	; (83264 <vPortSetupTimerInterrupt+0x24>)
   83246:	4a08      	ldr	r2, [pc, #32]	; (83268 <vPortSetupTimerInterrupt+0x28>)
   83248:	6811      	ldr	r1, [r2, #0]
   8324a:	4a08      	ldr	r2, [pc, #32]	; (8326c <vPortSetupTimerInterrupt+0x2c>)
   8324c:	fba2 0201 	umull	r0, r2, r2, r1
   83250:	0992      	lsrs	r2, r2, #6
   83252:	3a01      	subs	r2, #1
   83254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
   83256:	4b06      	ldr	r3, [pc, #24]	; (83270 <vPortSetupTimerInterrupt+0x30>)
   83258:	2207      	movs	r2, #7
   8325a:	601a      	str	r2, [r3, #0]
}
   8325c:	46bd      	mov	sp, r7
   8325e:	f85d 7b04 	ldr.w	r7, [sp], #4
   83262:	4770      	bx	lr
   83264:	e000e014 	.word	0xe000e014
   83268:	20070000 	.word	0x20070000
   8326c:	10624dd3 	.word	0x10624dd3
   83270:	e000e010 	.word	0xe000e010

00083274 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
   83274:	b580      	push	{r7, lr}
   83276:	b082      	sub	sp, #8
   83278:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
   8327a:	f3ef 8305 	mrs	r3, IPSR
   8327e:	607b      	str	r3, [r7, #4]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
   83280:	687b      	ldr	r3, [r7, #4]
   83282:	2b0f      	cmp	r3, #15
   83284:	d90c      	bls.n	832a0 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
   83286:	4a0d      	ldr	r2, [pc, #52]	; (832bc <vPortValidateInterruptPriority+0x48>)
   83288:	687b      	ldr	r3, [r7, #4]
   8328a:	4413      	add	r3, r2
   8328c:	781b      	ldrb	r3, [r3, #0]
   8328e:	70fb      	strb	r3, [r7, #3]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
   83290:	4b0b      	ldr	r3, [pc, #44]	; (832c0 <vPortValidateInterruptPriority+0x4c>)
   83292:	781b      	ldrb	r3, [r3, #0]
   83294:	78fa      	ldrb	r2, [r7, #3]
   83296:	429a      	cmp	r2, r3
   83298:	d202      	bcs.n	832a0 <vPortValidateInterruptPriority+0x2c>
   8329a:	4b0a      	ldr	r3, [pc, #40]	; (832c4 <vPortValidateInterruptPriority+0x50>)
   8329c:	4798      	blx	r3
   8329e:	e7fe      	b.n	8329e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
   832a0:	4b09      	ldr	r3, [pc, #36]	; (832c8 <vPortValidateInterruptPriority+0x54>)
   832a2:	681b      	ldr	r3, [r3, #0]
   832a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
   832a8:	4b08      	ldr	r3, [pc, #32]	; (832cc <vPortValidateInterruptPriority+0x58>)
   832aa:	681b      	ldr	r3, [r3, #0]
   832ac:	429a      	cmp	r2, r3
   832ae:	d902      	bls.n	832b6 <vPortValidateInterruptPriority+0x42>
   832b0:	4b04      	ldr	r3, [pc, #16]	; (832c4 <vPortValidateInterruptPriority+0x50>)
   832b2:	4798      	blx	r3
   832b4:	e7fe      	b.n	832b4 <vPortValidateInterruptPriority+0x40>
	}
   832b6:	3708      	adds	r7, #8
   832b8:	46bd      	mov	sp, r7
   832ba:	bd80      	pop	{r7, pc}
   832bc:	e000e3f0 	.word	0xe000e3f0
   832c0:	200704f4 	.word	0x200704f4
   832c4:	000831ad 	.word	0x000831ad
   832c8:	e000ed0c 	.word	0xe000ed0c
   832cc:	200704f8 	.word	0x200704f8

000832d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   832d0:	b580      	push	{r7, lr}
   832d2:	b086      	sub	sp, #24
   832d4:	af00      	add	r7, sp, #0
   832d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   832d8:	2300      	movs	r3, #0
   832da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
   832dc:	4b4f      	ldr	r3, [pc, #316]	; (8341c <pvPortMalloc+0x14c>)
   832de:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   832e0:	4b4f      	ldr	r3, [pc, #316]	; (83420 <pvPortMalloc+0x150>)
   832e2:	681b      	ldr	r3, [r3, #0]
   832e4:	2b00      	cmp	r3, #0
   832e6:	d101      	bne.n	832ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
   832e8:	4b4e      	ldr	r3, [pc, #312]	; (83424 <pvPortMalloc+0x154>)
   832ea:	4798      	blx	r3

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
   832ec:	4b4e      	ldr	r3, [pc, #312]	; (83428 <pvPortMalloc+0x158>)
   832ee:	681a      	ldr	r2, [r3, #0]
   832f0:	687b      	ldr	r3, [r7, #4]
   832f2:	4013      	ands	r3, r2
   832f4:	2b00      	cmp	r3, #0
   832f6:	d17d      	bne.n	833f4 <pvPortMalloc+0x124>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
   832f8:	687b      	ldr	r3, [r7, #4]
   832fa:	2b00      	cmp	r3, #0
   832fc:	d015      	beq.n	8332a <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
   832fe:	2308      	movs	r3, #8
   83300:	687a      	ldr	r2, [r7, #4]
   83302:	4413      	add	r3, r2
   83304:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
   83306:	687b      	ldr	r3, [r7, #4]
   83308:	f003 0307 	and.w	r3, r3, #7
   8330c:	2b00      	cmp	r3, #0
   8330e:	d00c      	beq.n	8332a <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   83310:	687b      	ldr	r3, [r7, #4]
   83312:	f023 0307 	bic.w	r3, r3, #7
   83316:	3308      	adds	r3, #8
   83318:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
   8331a:	687b      	ldr	r3, [r7, #4]
   8331c:	f003 0307 	and.w	r3, r3, #7
   83320:	2b00      	cmp	r3, #0
   83322:	d002      	beq.n	8332a <pvPortMalloc+0x5a>
   83324:	4b41      	ldr	r3, [pc, #260]	; (8342c <pvPortMalloc+0x15c>)
   83326:	4798      	blx	r3
   83328:	e7fe      	b.n	83328 <pvPortMalloc+0x58>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
   8332a:	687b      	ldr	r3, [r7, #4]
   8332c:	2b00      	cmp	r3, #0
   8332e:	d061      	beq.n	833f4 <pvPortMalloc+0x124>
   83330:	4b3f      	ldr	r3, [pc, #252]	; (83430 <pvPortMalloc+0x160>)
   83332:	681b      	ldr	r3, [r3, #0]
   83334:	687a      	ldr	r2, [r7, #4]
   83336:	429a      	cmp	r2, r3
   83338:	d85c      	bhi.n	833f4 <pvPortMalloc+0x124>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
   8333a:	4b3e      	ldr	r3, [pc, #248]	; (83434 <pvPortMalloc+0x164>)
   8333c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
   8333e:	4b3d      	ldr	r3, [pc, #244]	; (83434 <pvPortMalloc+0x164>)
   83340:	681b      	ldr	r3, [r3, #0]
   83342:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83344:	e004      	b.n	83350 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
   83346:	697b      	ldr	r3, [r7, #20]
   83348:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
   8334a:	697b      	ldr	r3, [r7, #20]
   8334c:	681b      	ldr	r3, [r3, #0]
   8334e:	617b      	str	r3, [r7, #20]
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   83350:	697b      	ldr	r3, [r7, #20]
   83352:	685a      	ldr	r2, [r3, #4]
   83354:	687b      	ldr	r3, [r7, #4]
   83356:	429a      	cmp	r2, r3
   83358:	d203      	bcs.n	83362 <pvPortMalloc+0x92>
   8335a:	697b      	ldr	r3, [r7, #20]
   8335c:	681b      	ldr	r3, [r3, #0]
   8335e:	2b00      	cmp	r3, #0
   83360:	d1f1      	bne.n	83346 <pvPortMalloc+0x76>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
   83362:	4b2f      	ldr	r3, [pc, #188]	; (83420 <pvPortMalloc+0x150>)
   83364:	681b      	ldr	r3, [r3, #0]
   83366:	697a      	ldr	r2, [r7, #20]
   83368:	429a      	cmp	r2, r3
   8336a:	d043      	beq.n	833f4 <pvPortMalloc+0x124>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
   8336c:	693b      	ldr	r3, [r7, #16]
   8336e:	681a      	ldr	r2, [r3, #0]
   83370:	2308      	movs	r3, #8
   83372:	4413      	add	r3, r2
   83374:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   83376:	697b      	ldr	r3, [r7, #20]
   83378:	681a      	ldr	r2, [r3, #0]
   8337a:	693b      	ldr	r3, [r7, #16]
   8337c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   8337e:	697b      	ldr	r3, [r7, #20]
   83380:	685a      	ldr	r2, [r3, #4]
   83382:	687b      	ldr	r3, [r7, #4]
   83384:	1ad2      	subs	r2, r2, r3
   83386:	2308      	movs	r3, #8
   83388:	005b      	lsls	r3, r3, #1
   8338a:	429a      	cmp	r2, r3
   8338c:	d917      	bls.n	833be <pvPortMalloc+0xee>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
   8338e:	697a      	ldr	r2, [r7, #20]
   83390:	687b      	ldr	r3, [r7, #4]
   83392:	4413      	add	r3, r2
   83394:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   83396:	68bb      	ldr	r3, [r7, #8]
   83398:	f003 0307 	and.w	r3, r3, #7
   8339c:	2b00      	cmp	r3, #0
   8339e:	d002      	beq.n	833a6 <pvPortMalloc+0xd6>
   833a0:	4b22      	ldr	r3, [pc, #136]	; (8342c <pvPortMalloc+0x15c>)
   833a2:	4798      	blx	r3
   833a4:	e7fe      	b.n	833a4 <pvPortMalloc+0xd4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   833a6:	697b      	ldr	r3, [r7, #20]
   833a8:	685a      	ldr	r2, [r3, #4]
   833aa:	687b      	ldr	r3, [r7, #4]
   833ac:	1ad2      	subs	r2, r2, r3
   833ae:	68bb      	ldr	r3, [r7, #8]
   833b0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
   833b2:	697b      	ldr	r3, [r7, #20]
   833b4:	687a      	ldr	r2, [r7, #4]
   833b6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   833b8:	68b8      	ldr	r0, [r7, #8]
   833ba:	4b1f      	ldr	r3, [pc, #124]	; (83438 <pvPortMalloc+0x168>)
   833bc:	4798      	blx	r3
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
   833be:	4b1c      	ldr	r3, [pc, #112]	; (83430 <pvPortMalloc+0x160>)
   833c0:	681a      	ldr	r2, [r3, #0]
   833c2:	697b      	ldr	r3, [r7, #20]
   833c4:	685b      	ldr	r3, [r3, #4]
   833c6:	1ad2      	subs	r2, r2, r3
   833c8:	4b19      	ldr	r3, [pc, #100]	; (83430 <pvPortMalloc+0x160>)
   833ca:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
   833cc:	4b18      	ldr	r3, [pc, #96]	; (83430 <pvPortMalloc+0x160>)
   833ce:	681a      	ldr	r2, [r3, #0]
   833d0:	4b1a      	ldr	r3, [pc, #104]	; (8343c <pvPortMalloc+0x16c>)
   833d2:	681b      	ldr	r3, [r3, #0]
   833d4:	429a      	cmp	r2, r3
   833d6:	d203      	bcs.n	833e0 <pvPortMalloc+0x110>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
   833d8:	4b15      	ldr	r3, [pc, #84]	; (83430 <pvPortMalloc+0x160>)
   833da:	681a      	ldr	r2, [r3, #0]
   833dc:	4b17      	ldr	r3, [pc, #92]	; (8343c <pvPortMalloc+0x16c>)
   833de:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
   833e0:	697b      	ldr	r3, [r7, #20]
   833e2:	685a      	ldr	r2, [r3, #4]
   833e4:	4b10      	ldr	r3, [pc, #64]	; (83428 <pvPortMalloc+0x158>)
   833e6:	681b      	ldr	r3, [r3, #0]
   833e8:	431a      	orrs	r2, r3
   833ea:	697b      	ldr	r3, [r7, #20]
   833ec:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
   833ee:	697b      	ldr	r3, [r7, #20]
   833f0:	2200      	movs	r2, #0
   833f2:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
   833f4:	4b12      	ldr	r3, [pc, #72]	; (83440 <pvPortMalloc+0x170>)
   833f6:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   833f8:	68fb      	ldr	r3, [r7, #12]
   833fa:	2b00      	cmp	r3, #0
   833fc:	d101      	bne.n	83402 <pvPortMalloc+0x132>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   833fe:	4b11      	ldr	r3, [pc, #68]	; (83444 <pvPortMalloc+0x174>)
   83400:	4798      	blx	r3
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
   83402:	68fb      	ldr	r3, [r7, #12]
   83404:	f003 0307 	and.w	r3, r3, #7
   83408:	2b00      	cmp	r3, #0
   8340a:	d002      	beq.n	83412 <pvPortMalloc+0x142>
   8340c:	4b07      	ldr	r3, [pc, #28]	; (8342c <pvPortMalloc+0x15c>)
   8340e:	4798      	blx	r3
   83410:	e7fe      	b.n	83410 <pvPortMalloc+0x140>
	return pvReturn;
   83412:	68fb      	ldr	r3, [r7, #12]
}
   83414:	4618      	mov	r0, r3
   83416:	3718      	adds	r7, #24
   83418:	46bd      	mov	sp, r7
   8341a:	bd80      	pop	{r7, pc}
   8341c:	0008421d 	.word	0x0008421d
   83420:	2007a504 	.word	0x2007a504
   83424:	000834ed 	.word	0x000834ed
   83428:	2007a510 	.word	0x2007a510
   8342c:	000831ad 	.word	0x000831ad
   83430:	2007a508 	.word	0x2007a508
   83434:	2007a4fc 	.word	0x2007a4fc
   83438:	000835b1 	.word	0x000835b1
   8343c:	2007a50c 	.word	0x2007a50c
   83440:	00084239 	.word	0x00084239
   83444:	000865b9 	.word	0x000865b9

00083448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   83448:	b580      	push	{r7, lr}
   8344a:	b084      	sub	sp, #16
   8344c:	af00      	add	r7, sp, #0
   8344e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
   83450:	687b      	ldr	r3, [r7, #4]
   83452:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
   83454:	687b      	ldr	r3, [r7, #4]
   83456:	2b00      	cmp	r3, #0
   83458:	d038      	beq.n	834cc <vPortFree+0x84>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
   8345a:	2308      	movs	r3, #8
   8345c:	425b      	negs	r3, r3
   8345e:	68fa      	ldr	r2, [r7, #12]
   83460:	4413      	add	r3, r2
   83462:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
   83464:	68fb      	ldr	r3, [r7, #12]
   83466:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
   83468:	68bb      	ldr	r3, [r7, #8]
   8346a:	685a      	ldr	r2, [r3, #4]
   8346c:	4b19      	ldr	r3, [pc, #100]	; (834d4 <vPortFree+0x8c>)
   8346e:	681b      	ldr	r3, [r3, #0]
   83470:	4013      	ands	r3, r2
   83472:	2b00      	cmp	r3, #0
   83474:	d102      	bne.n	8347c <vPortFree+0x34>
   83476:	4b18      	ldr	r3, [pc, #96]	; (834d8 <vPortFree+0x90>)
   83478:	4798      	blx	r3
   8347a:	e7fe      	b.n	8347a <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
   8347c:	68bb      	ldr	r3, [r7, #8]
   8347e:	681b      	ldr	r3, [r3, #0]
   83480:	2b00      	cmp	r3, #0
   83482:	d002      	beq.n	8348a <vPortFree+0x42>
   83484:	4b14      	ldr	r3, [pc, #80]	; (834d8 <vPortFree+0x90>)
   83486:	4798      	blx	r3
   83488:	e7fe      	b.n	83488 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
   8348a:	68bb      	ldr	r3, [r7, #8]
   8348c:	685a      	ldr	r2, [r3, #4]
   8348e:	4b11      	ldr	r3, [pc, #68]	; (834d4 <vPortFree+0x8c>)
   83490:	681b      	ldr	r3, [r3, #0]
   83492:	4013      	ands	r3, r2
   83494:	2b00      	cmp	r3, #0
   83496:	d019      	beq.n	834cc <vPortFree+0x84>
		{
			if( pxLink->pxNextFreeBlock == NULL )
   83498:	68bb      	ldr	r3, [r7, #8]
   8349a:	681b      	ldr	r3, [r3, #0]
   8349c:	2b00      	cmp	r3, #0
   8349e:	d115      	bne.n	834cc <vPortFree+0x84>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
   834a0:	68bb      	ldr	r3, [r7, #8]
   834a2:	685a      	ldr	r2, [r3, #4]
   834a4:	4b0b      	ldr	r3, [pc, #44]	; (834d4 <vPortFree+0x8c>)
   834a6:	681b      	ldr	r3, [r3, #0]
   834a8:	43db      	mvns	r3, r3
   834aa:	401a      	ands	r2, r3
   834ac:	68bb      	ldr	r3, [r7, #8]
   834ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
   834b0:	4b0a      	ldr	r3, [pc, #40]	; (834dc <vPortFree+0x94>)
   834b2:	4798      	blx	r3
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
   834b4:	68bb      	ldr	r3, [r7, #8]
   834b6:	685a      	ldr	r2, [r3, #4]
   834b8:	4b09      	ldr	r3, [pc, #36]	; (834e0 <vPortFree+0x98>)
   834ba:	681b      	ldr	r3, [r3, #0]
   834bc:	441a      	add	r2, r3
   834be:	4b08      	ldr	r3, [pc, #32]	; (834e0 <vPortFree+0x98>)
   834c0:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
   834c2:	68b8      	ldr	r0, [r7, #8]
   834c4:	4b07      	ldr	r3, [pc, #28]	; (834e4 <vPortFree+0x9c>)
   834c6:	4798      	blx	r3
				}
				( void ) xTaskResumeAll();
   834c8:	4b07      	ldr	r3, [pc, #28]	; (834e8 <vPortFree+0xa0>)
   834ca:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   834cc:	3710      	adds	r7, #16
   834ce:	46bd      	mov	sp, r7
   834d0:	bd80      	pop	{r7, pc}
   834d2:	bf00      	nop
   834d4:	2007a510 	.word	0x2007a510
   834d8:	000831ad 	.word	0x000831ad
   834dc:	0008421d 	.word	0x0008421d
   834e0:	2007a508 	.word	0x2007a508
   834e4:	000835b1 	.word	0x000835b1
   834e8:	00084239 	.word	0x00084239

000834ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
   834ec:	b480      	push	{r7}
   834ee:	b085      	sub	sp, #20
   834f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
uint32_t ulAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
   834f2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
   834f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	ulAddress = ( uint32_t ) ucHeap;
   834f8:	4b27      	ldr	r3, [pc, #156]	; (83598 <prvHeapInit+0xac>)
   834fa:	60fb      	str	r3, [r7, #12]

	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
   834fc:	68fb      	ldr	r3, [r7, #12]
   834fe:	f003 0307 	and.w	r3, r3, #7
   83502:	2b00      	cmp	r3, #0
   83504:	d00c      	beq.n	83520 <prvHeapInit+0x34>
	{
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
   83506:	68fb      	ldr	r3, [r7, #12]
   83508:	3307      	adds	r3, #7
   8350a:	60fb      	str	r3, [r7, #12]
		ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   8350c:	68fb      	ldr	r3, [r7, #12]
   8350e:	f023 0307 	bic.w	r3, r3, #7
   83512:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
   83514:	68ba      	ldr	r2, [r7, #8]
   83516:	68fb      	ldr	r3, [r7, #12]
   83518:	1ad2      	subs	r2, r2, r3
   8351a:	4b1f      	ldr	r3, [pc, #124]	; (83598 <prvHeapInit+0xac>)
   8351c:	4413      	add	r3, r2
   8351e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) ulAddress;
   83520:	68fb      	ldr	r3, [r7, #12]
   83522:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
   83524:	4b1d      	ldr	r3, [pc, #116]	; (8359c <prvHeapInit+0xb0>)
   83526:	687a      	ldr	r2, [r7, #4]
   83528:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8352a:	4b1c      	ldr	r3, [pc, #112]	; (8359c <prvHeapInit+0xb0>)
   8352c:	2200      	movs	r2, #0
   8352e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
   83530:	687a      	ldr	r2, [r7, #4]
   83532:	68bb      	ldr	r3, [r7, #8]
   83534:	4413      	add	r3, r2
   83536:	60fb      	str	r3, [r7, #12]
	ulAddress -= xHeapStructSize;
   83538:	2308      	movs	r3, #8
   8353a:	68fa      	ldr	r2, [r7, #12]
   8353c:	1ad3      	subs	r3, r2, r3
   8353e:	60fb      	str	r3, [r7, #12]
	ulAddress &= ~portBYTE_ALIGNMENT_MASK;
   83540:	68fb      	ldr	r3, [r7, #12]
   83542:	f023 0307 	bic.w	r3, r3, #7
   83546:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) ulAddress;
   83548:	68fa      	ldr	r2, [r7, #12]
   8354a:	4b15      	ldr	r3, [pc, #84]	; (835a0 <prvHeapInit+0xb4>)
   8354c:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
   8354e:	4b14      	ldr	r3, [pc, #80]	; (835a0 <prvHeapInit+0xb4>)
   83550:	681b      	ldr	r3, [r3, #0]
   83552:	2200      	movs	r2, #0
   83554:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
   83556:	4b12      	ldr	r3, [pc, #72]	; (835a0 <prvHeapInit+0xb4>)
   83558:	681b      	ldr	r3, [r3, #0]
   8355a:	2200      	movs	r2, #0
   8355c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
   8355e:	687b      	ldr	r3, [r7, #4]
   83560:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
   83562:	683b      	ldr	r3, [r7, #0]
   83564:	68fa      	ldr	r2, [r7, #12]
   83566:	1ad2      	subs	r2, r2, r3
   83568:	683b      	ldr	r3, [r7, #0]
   8356a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8356c:	4b0c      	ldr	r3, [pc, #48]	; (835a0 <prvHeapInit+0xb4>)
   8356e:	681a      	ldr	r2, [r3, #0]
   83570:	683b      	ldr	r3, [r7, #0]
   83572:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   83574:	683b      	ldr	r3, [r7, #0]
   83576:	685a      	ldr	r2, [r3, #4]
   83578:	4b0a      	ldr	r3, [pc, #40]	; (835a4 <prvHeapInit+0xb8>)
   8357a:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
   8357c:	683b      	ldr	r3, [r7, #0]
   8357e:	685a      	ldr	r2, [r3, #4]
   83580:	4b09      	ldr	r3, [pc, #36]	; (835a8 <prvHeapInit+0xbc>)
   83582:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
   83584:	4b09      	ldr	r3, [pc, #36]	; (835ac <prvHeapInit+0xc0>)
   83586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   8358a:	601a      	str	r2, [r3, #0]
}
   8358c:	3714      	adds	r7, #20
   8358e:	46bd      	mov	sp, r7
   83590:	f85d 7b04 	ldr.w	r7, [sp], #4
   83594:	4770      	bx	lr
   83596:	bf00      	nop
   83598:	200704fc 	.word	0x200704fc
   8359c:	2007a4fc 	.word	0x2007a4fc
   835a0:	2007a504 	.word	0x2007a504
   835a4:	2007a50c 	.word	0x2007a50c
   835a8:	2007a508 	.word	0x2007a508
   835ac:	2007a510 	.word	0x2007a510

000835b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
   835b0:	b480      	push	{r7}
   835b2:	b085      	sub	sp, #20
   835b4:	af00      	add	r7, sp, #0
   835b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   835b8:	4b27      	ldr	r3, [pc, #156]	; (83658 <prvInsertBlockIntoFreeList+0xa8>)
   835ba:	60fb      	str	r3, [r7, #12]
   835bc:	e002      	b.n	835c4 <prvInsertBlockIntoFreeList+0x14>
   835be:	68fb      	ldr	r3, [r7, #12]
   835c0:	681b      	ldr	r3, [r3, #0]
   835c2:	60fb      	str	r3, [r7, #12]
   835c4:	68fb      	ldr	r3, [r7, #12]
   835c6:	681a      	ldr	r2, [r3, #0]
   835c8:	687b      	ldr	r3, [r7, #4]
   835ca:	429a      	cmp	r2, r3
   835cc:	d3f7      	bcc.n	835be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
   835ce:	68fb      	ldr	r3, [r7, #12]
   835d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
   835d2:	68fb      	ldr	r3, [r7, #12]
   835d4:	685b      	ldr	r3, [r3, #4]
   835d6:	68ba      	ldr	r2, [r7, #8]
   835d8:	441a      	add	r2, r3
   835da:	687b      	ldr	r3, [r7, #4]
   835dc:	429a      	cmp	r2, r3
   835de:	d108      	bne.n	835f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   835e0:	68fb      	ldr	r3, [r7, #12]
   835e2:	685a      	ldr	r2, [r3, #4]
   835e4:	687b      	ldr	r3, [r7, #4]
   835e6:	685b      	ldr	r3, [r3, #4]
   835e8:	441a      	add	r2, r3
   835ea:	68fb      	ldr	r3, [r7, #12]
   835ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
   835ee:	68fb      	ldr	r3, [r7, #12]
   835f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
   835f2:	687b      	ldr	r3, [r7, #4]
   835f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
   835f6:	687b      	ldr	r3, [r7, #4]
   835f8:	685b      	ldr	r3, [r3, #4]
   835fa:	68ba      	ldr	r2, [r7, #8]
   835fc:	441a      	add	r2, r3
   835fe:	68fb      	ldr	r3, [r7, #12]
   83600:	681b      	ldr	r3, [r3, #0]
   83602:	429a      	cmp	r2, r3
   83604:	d118      	bne.n	83638 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   83606:	68fb      	ldr	r3, [r7, #12]
   83608:	681a      	ldr	r2, [r3, #0]
   8360a:	4b14      	ldr	r3, [pc, #80]	; (8365c <prvInsertBlockIntoFreeList+0xac>)
   8360c:	681b      	ldr	r3, [r3, #0]
   8360e:	429a      	cmp	r2, r3
   83610:	d00d      	beq.n	8362e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   83612:	687b      	ldr	r3, [r7, #4]
   83614:	685a      	ldr	r2, [r3, #4]
   83616:	68fb      	ldr	r3, [r7, #12]
   83618:	681b      	ldr	r3, [r3, #0]
   8361a:	685b      	ldr	r3, [r3, #4]
   8361c:	441a      	add	r2, r3
   8361e:	687b      	ldr	r3, [r7, #4]
   83620:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   83622:	68fb      	ldr	r3, [r7, #12]
   83624:	681b      	ldr	r3, [r3, #0]
   83626:	681a      	ldr	r2, [r3, #0]
   83628:	687b      	ldr	r3, [r7, #4]
   8362a:	601a      	str	r2, [r3, #0]
   8362c:	e008      	b.n	83640 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8362e:	4b0b      	ldr	r3, [pc, #44]	; (8365c <prvInsertBlockIntoFreeList+0xac>)
   83630:	681a      	ldr	r2, [r3, #0]
   83632:	687b      	ldr	r3, [r7, #4]
   83634:	601a      	str	r2, [r3, #0]
   83636:	e003      	b.n	83640 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
   83638:	68fb      	ldr	r3, [r7, #12]
   8363a:	681a      	ldr	r2, [r3, #0]
   8363c:	687b      	ldr	r3, [r7, #4]
   8363e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   83640:	68fa      	ldr	r2, [r7, #12]
   83642:	687b      	ldr	r3, [r7, #4]
   83644:	429a      	cmp	r2, r3
   83646:	d002      	beq.n	8364e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   83648:	68fb      	ldr	r3, [r7, #12]
   8364a:	687a      	ldr	r2, [r7, #4]
   8364c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   8364e:	3714      	adds	r7, #20
   83650:	46bd      	mov	sp, r7
   83652:	f85d 7b04 	ldr.w	r7, [sp], #4
   83656:	4770      	bx	lr
   83658:	2007a4fc 	.word	0x2007a4fc
   8365c:	2007a504 	.word	0x2007a504

00083660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   83660:	b580      	push	{r7, lr}
   83662:	b084      	sub	sp, #16
   83664:	af00      	add	r7, sp, #0
   83666:	6078      	str	r0, [r7, #4]
   83668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   8366a:	687b      	ldr	r3, [r7, #4]
   8366c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   8366e:	68fb      	ldr	r3, [r7, #12]
   83670:	2b00      	cmp	r3, #0
   83672:	d102      	bne.n	8367a <xQueueGenericReset+0x1a>
   83674:	4b26      	ldr	r3, [pc, #152]	; (83710 <xQueueGenericReset+0xb0>)
   83676:	4798      	blx	r3
   83678:	e7fe      	b.n	83678 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
   8367a:	4b26      	ldr	r3, [pc, #152]	; (83714 <xQueueGenericReset+0xb4>)
   8367c:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8367e:	68fb      	ldr	r3, [r7, #12]
   83680:	681a      	ldr	r2, [r3, #0]
   83682:	68fb      	ldr	r3, [r7, #12]
   83684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83686:	68f9      	ldr	r1, [r7, #12]
   83688:	6c09      	ldr	r1, [r1, #64]	; 0x40
   8368a:	fb01 f303 	mul.w	r3, r1, r3
   8368e:	441a      	add	r2, r3
   83690:	68fb      	ldr	r3, [r7, #12]
   83692:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   83694:	68fb      	ldr	r3, [r7, #12]
   83696:	2200      	movs	r2, #0
   83698:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8369a:	68fb      	ldr	r3, [r7, #12]
   8369c:	681a      	ldr	r2, [r3, #0]
   8369e:	68fb      	ldr	r3, [r7, #12]
   836a0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   836a2:	68fb      	ldr	r3, [r7, #12]
   836a4:	681a      	ldr	r2, [r3, #0]
   836a6:	68fb      	ldr	r3, [r7, #12]
   836a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   836aa:	3b01      	subs	r3, #1
   836ac:	68f9      	ldr	r1, [r7, #12]
   836ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
   836b0:	fb01 f303 	mul.w	r3, r1, r3
   836b4:	441a      	add	r2, r3
   836b6:	68fb      	ldr	r3, [r7, #12]
   836b8:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   836ba:	68fb      	ldr	r3, [r7, #12]
   836bc:	f04f 32ff 	mov.w	r2, #4294967295
   836c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   836c2:	68fb      	ldr	r3, [r7, #12]
   836c4:	f04f 32ff 	mov.w	r2, #4294967295
   836c8:	649a      	str	r2, [r3, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   836ca:	683b      	ldr	r3, [r7, #0]
   836cc:	2b00      	cmp	r3, #0
   836ce:	d10e      	bne.n	836ee <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   836d0:	68fb      	ldr	r3, [r7, #12]
   836d2:	691b      	ldr	r3, [r3, #16]
   836d4:	2b00      	cmp	r3, #0
   836d6:	d014      	beq.n	83702 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   836d8:	68fb      	ldr	r3, [r7, #12]
   836da:	3310      	adds	r3, #16
   836dc:	4618      	mov	r0, r3
   836de:	4b0e      	ldr	r3, [pc, #56]	; (83718 <xQueueGenericReset+0xb8>)
   836e0:	4798      	blx	r3
   836e2:	4603      	mov	r3, r0
   836e4:	2b01      	cmp	r3, #1
   836e6:	d10c      	bne.n	83702 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
   836e8:	4b0c      	ldr	r3, [pc, #48]	; (8371c <xQueueGenericReset+0xbc>)
   836ea:	4798      	blx	r3
   836ec:	e009      	b.n	83702 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   836ee:	68fb      	ldr	r3, [r7, #12]
   836f0:	3310      	adds	r3, #16
   836f2:	4618      	mov	r0, r3
   836f4:	4b0a      	ldr	r3, [pc, #40]	; (83720 <xQueueGenericReset+0xc0>)
   836f6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   836f8:	68fb      	ldr	r3, [r7, #12]
   836fa:	3324      	adds	r3, #36	; 0x24
   836fc:	4618      	mov	r0, r3
   836fe:	4b08      	ldr	r3, [pc, #32]	; (83720 <xQueueGenericReset+0xc0>)
   83700:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   83702:	4b08      	ldr	r3, [pc, #32]	; (83724 <xQueueGenericReset+0xc4>)
   83704:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   83706:	2301      	movs	r3, #1
}
   83708:	4618      	mov	r0, r3
   8370a:	3710      	adds	r7, #16
   8370c:	46bd      	mov	sp, r7
   8370e:	bd80      	pop	{r7, pc}
   83710:	000831ad 	.word	0x000831ad
   83714:	00083131 	.word	0x00083131
   83718:	00084721 	.word	0x00084721
   8371c:	00083111 	.word	0x00083111
   83720:	00082e25 	.word	0x00082e25
   83724:	00083175 	.word	0x00083175

00083728 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
   83728:	b580      	push	{r7, lr}
   8372a:	b088      	sub	sp, #32
   8372c:	af00      	add	r7, sp, #0
   8372e:	60f8      	str	r0, [r7, #12]
   83730:	60b9      	str	r1, [r7, #8]
   83732:	4613      	mov	r3, r2
   83734:	71fb      	strb	r3, [r7, #7]
Queue_t *pxNewQueue;
size_t xQueueSizeInBytes;
QueueHandle_t xReturn = NULL;
   83736:	2300      	movs	r3, #0
   83738:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( UBaseType_t ) 0 )
   8373a:	68fb      	ldr	r3, [r7, #12]
   8373c:	2b00      	cmp	r3, #0
   8373e:	d026      	beq.n	8378e <xQueueGenericCreate+0x66>
	{
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) );
   83740:	204c      	movs	r0, #76	; 0x4c
   83742:	4b18      	ldr	r3, [pc, #96]	; (837a4 <xQueueGenericCreate+0x7c>)
   83744:	4798      	blx	r3
   83746:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
   83748:	69bb      	ldr	r3, [r7, #24]
   8374a:	2b00      	cmp	r3, #0
   8374c:	d01f      	beq.n	8378e <xQueueGenericCreate+0x66>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   8374e:	68fb      	ldr	r3, [r7, #12]
   83750:	68ba      	ldr	r2, [r7, #8]
   83752:	fb02 f303 	mul.w	r3, r2, r3
   83756:	3301      	adds	r3, #1
   83758:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( int8_t * ) pvPortMalloc( xQueueSizeInBytes );
   8375a:	6978      	ldr	r0, [r7, #20]
   8375c:	4b11      	ldr	r3, [pc, #68]	; (837a4 <xQueueGenericCreate+0x7c>)
   8375e:	4798      	blx	r3
   83760:	4602      	mov	r2, r0
   83762:	69bb      	ldr	r3, [r7, #24]
   83764:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
   83766:	69bb      	ldr	r3, [r7, #24]
   83768:	681b      	ldr	r3, [r3, #0]
   8376a:	2b00      	cmp	r3, #0
   8376c:	d00c      	beq.n	83788 <xQueueGenericCreate+0x60>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   8376e:	69bb      	ldr	r3, [r7, #24]
   83770:	68fa      	ldr	r2, [r7, #12]
   83772:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   83774:	69bb      	ldr	r3, [r7, #24]
   83776:	68ba      	ldr	r2, [r7, #8]
   83778:	641a      	str	r2, [r3, #64]	; 0x40
				( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   8377a:	69b8      	ldr	r0, [r7, #24]
   8377c:	2101      	movs	r1, #1
   8377e:	4b0a      	ldr	r3, [pc, #40]	; (837a8 <xQueueGenericCreate+0x80>)
   83780:	4798      	blx	r3
					pxNewQueue->pxQueueSetContainer = NULL;
				}
				#endif /* configUSE_QUEUE_SETS */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
   83782:	69bb      	ldr	r3, [r7, #24]
   83784:	61fb      	str	r3, [r7, #28]
   83786:	e002      	b.n	8378e <xQueueGenericCreate+0x66>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   83788:	69b8      	ldr	r0, [r7, #24]
   8378a:	4b08      	ldr	r3, [pc, #32]	; (837ac <xQueueGenericCreate+0x84>)
   8378c:	4798      	blx	r3
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   8378e:	69fb      	ldr	r3, [r7, #28]
   83790:	2b00      	cmp	r3, #0
   83792:	d102      	bne.n	8379a <xQueueGenericCreate+0x72>
   83794:	4b06      	ldr	r3, [pc, #24]	; (837b0 <xQueueGenericCreate+0x88>)
   83796:	4798      	blx	r3
   83798:	e7fe      	b.n	83798 <xQueueGenericCreate+0x70>

	return xReturn;
   8379a:	69fb      	ldr	r3, [r7, #28]
}
   8379c:	4618      	mov	r0, r3
   8379e:	3720      	adds	r7, #32
   837a0:	46bd      	mov	sp, r7
   837a2:	bd80      	pop	{r7, pc}
   837a4:	000832d1 	.word	0x000832d1
   837a8:	00083661 	.word	0x00083661
   837ac:	00083449 	.word	0x00083449
   837b0:	000831ad 	.word	0x000831ad

000837b4 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   837b4:	b580      	push	{r7, lr}
   837b6:	b08a      	sub	sp, #40	; 0x28
   837b8:	af00      	add	r7, sp, #0
   837ba:	60f8      	str	r0, [r7, #12]
   837bc:	60b9      	str	r1, [r7, #8]
   837be:	607a      	str	r2, [r7, #4]
   837c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   837c2:	2300      	movs	r3, #0
   837c4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   837c6:	68fb      	ldr	r3, [r7, #12]
   837c8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   837ca:	6a3b      	ldr	r3, [r7, #32]
   837cc:	2b00      	cmp	r3, #0
   837ce:	d102      	bne.n	837d6 <xQueueGenericSend+0x22>
   837d0:	4b5b      	ldr	r3, [pc, #364]	; (83940 <xQueueGenericSend+0x18c>)
   837d2:	4798      	blx	r3
   837d4:	e7fe      	b.n	837d4 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   837d6:	68bb      	ldr	r3, [r7, #8]
   837d8:	2b00      	cmp	r3, #0
   837da:	d103      	bne.n	837e4 <xQueueGenericSend+0x30>
   837dc:	6a3b      	ldr	r3, [r7, #32]
   837de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   837e0:	2b00      	cmp	r3, #0
   837e2:	d101      	bne.n	837e8 <xQueueGenericSend+0x34>
   837e4:	2301      	movs	r3, #1
   837e6:	e000      	b.n	837ea <xQueueGenericSend+0x36>
   837e8:	2300      	movs	r3, #0
   837ea:	2b00      	cmp	r3, #0
   837ec:	d102      	bne.n	837f4 <xQueueGenericSend+0x40>
   837ee:	4b54      	ldr	r3, [pc, #336]	; (83940 <xQueueGenericSend+0x18c>)
   837f0:	4798      	blx	r3
   837f2:	e7fe      	b.n	837f2 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   837f4:	683b      	ldr	r3, [r7, #0]
   837f6:	2b02      	cmp	r3, #2
   837f8:	d103      	bne.n	83802 <xQueueGenericSend+0x4e>
   837fa:	6a3b      	ldr	r3, [r7, #32]
   837fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   837fe:	2b01      	cmp	r3, #1
   83800:	d101      	bne.n	83806 <xQueueGenericSend+0x52>
   83802:	2301      	movs	r3, #1
   83804:	e000      	b.n	83808 <xQueueGenericSend+0x54>
   83806:	2300      	movs	r3, #0
   83808:	2b00      	cmp	r3, #0
   8380a:	d102      	bne.n	83812 <xQueueGenericSend+0x5e>
   8380c:	4b4c      	ldr	r3, [pc, #304]	; (83940 <xQueueGenericSend+0x18c>)
   8380e:	4798      	blx	r3
   83810:	e7fe      	b.n	83810 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83812:	4b4c      	ldr	r3, [pc, #304]	; (83944 <xQueueGenericSend+0x190>)
   83814:	4798      	blx	r3
   83816:	4603      	mov	r3, r0
   83818:	2b00      	cmp	r3, #0
   8381a:	d102      	bne.n	83822 <xQueueGenericSend+0x6e>
   8381c:	687b      	ldr	r3, [r7, #4]
   8381e:	2b00      	cmp	r3, #0
   83820:	d101      	bne.n	83826 <xQueueGenericSend+0x72>
   83822:	2301      	movs	r3, #1
   83824:	e000      	b.n	83828 <xQueueGenericSend+0x74>
   83826:	2300      	movs	r3, #0
   83828:	2b00      	cmp	r3, #0
   8382a:	d102      	bne.n	83832 <xQueueGenericSend+0x7e>
   8382c:	4b44      	ldr	r3, [pc, #272]	; (83940 <xQueueGenericSend+0x18c>)
   8382e:	4798      	blx	r3
   83830:	e7fe      	b.n	83830 <xQueueGenericSend+0x7c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   83832:	4b45      	ldr	r3, [pc, #276]	; (83948 <xQueueGenericSend+0x194>)
   83834:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be
			the highest priority task wanting to access the queue.  If
			the head item in the queue is to be overwritten then it does
			not matter if the queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   83836:	6a3b      	ldr	r3, [r7, #32]
   83838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8383a:	6a3b      	ldr	r3, [r7, #32]
   8383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8383e:	429a      	cmp	r2, r3
   83840:	d302      	bcc.n	83848 <xQueueGenericSend+0x94>
   83842:	683b      	ldr	r3, [r7, #0]
   83844:	2b02      	cmp	r3, #2
   83846:	d11d      	bne.n	83884 <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   83848:	6a38      	ldr	r0, [r7, #32]
   8384a:	68b9      	ldr	r1, [r7, #8]
   8384c:	683a      	ldr	r2, [r7, #0]
   8384e:	4b3f      	ldr	r3, [pc, #252]	; (8394c <xQueueGenericSend+0x198>)
   83850:	4798      	blx	r3
   83852:	61f8      	str	r0, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83854:	6a3b      	ldr	r3, [r7, #32]
   83856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83858:	2b00      	cmp	r3, #0
   8385a:	d00a      	beq.n	83872 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   8385c:	6a3b      	ldr	r3, [r7, #32]
   8385e:	3324      	adds	r3, #36	; 0x24
   83860:	4618      	mov	r0, r3
   83862:	4b3b      	ldr	r3, [pc, #236]	; (83950 <xQueueGenericSend+0x19c>)
   83864:	4798      	blx	r3
   83866:	4603      	mov	r3, r0
   83868:	2b01      	cmp	r3, #1
   8386a:	d107      	bne.n	8387c <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
   8386c:	4b39      	ldr	r3, [pc, #228]	; (83954 <xQueueGenericSend+0x1a0>)
   8386e:	4798      	blx	r3
   83870:	e004      	b.n	8387c <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
   83872:	69fb      	ldr	r3, [r7, #28]
   83874:	2b00      	cmp	r3, #0
   83876:	d001      	beq.n	8387c <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
   83878:	4b36      	ldr	r3, [pc, #216]	; (83954 <xQueueGenericSend+0x1a0>)
   8387a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   8387c:	4b36      	ldr	r3, [pc, #216]	; (83958 <xQueueGenericSend+0x1a4>)
   8387e:	4798      	blx	r3
				return pdPASS;
   83880:	2301      	movs	r3, #1
   83882:	e059      	b.n	83938 <xQueueGenericSend+0x184>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83884:	687b      	ldr	r3, [r7, #4]
   83886:	2b00      	cmp	r3, #0
   83888:	d103      	bne.n	83892 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8388a:	4b33      	ldr	r3, [pc, #204]	; (83958 <xQueueGenericSend+0x1a4>)
   8388c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8388e:	2300      	movs	r3, #0
   83890:	e052      	b.n	83938 <xQueueGenericSend+0x184>
				}
				else if( xEntryTimeSet == pdFALSE )
   83892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83894:	2b00      	cmp	r3, #0
   83896:	d106      	bne.n	838a6 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83898:	f107 0314 	add.w	r3, r7, #20
   8389c:	4618      	mov	r0, r3
   8389e:	4b2f      	ldr	r3, [pc, #188]	; (8395c <xQueueGenericSend+0x1a8>)
   838a0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   838a2:	2301      	movs	r3, #1
   838a4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   838a6:	4b2c      	ldr	r3, [pc, #176]	; (83958 <xQueueGenericSend+0x1a4>)
   838a8:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   838aa:	4b2d      	ldr	r3, [pc, #180]	; (83960 <xQueueGenericSend+0x1ac>)
   838ac:	4798      	blx	r3
		prvLockQueue( pxQueue );
   838ae:	4b26      	ldr	r3, [pc, #152]	; (83948 <xQueueGenericSend+0x194>)
   838b0:	4798      	blx	r3
   838b2:	6a3b      	ldr	r3, [r7, #32]
   838b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   838b6:	f1b3 3fff 	cmp.w	r3, #4294967295
   838ba:	d102      	bne.n	838c2 <xQueueGenericSend+0x10e>
   838bc:	6a3b      	ldr	r3, [r7, #32]
   838be:	2200      	movs	r2, #0
   838c0:	645a      	str	r2, [r3, #68]	; 0x44
   838c2:	6a3b      	ldr	r3, [r7, #32]
   838c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   838c6:	f1b3 3fff 	cmp.w	r3, #4294967295
   838ca:	d102      	bne.n	838d2 <xQueueGenericSend+0x11e>
   838cc:	6a3b      	ldr	r3, [r7, #32]
   838ce:	2200      	movs	r2, #0
   838d0:	649a      	str	r2, [r3, #72]	; 0x48
   838d2:	4b21      	ldr	r3, [pc, #132]	; (83958 <xQueueGenericSend+0x1a4>)
   838d4:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   838d6:	f107 0214 	add.w	r2, r7, #20
   838da:	1d3b      	adds	r3, r7, #4
   838dc:	4610      	mov	r0, r2
   838de:	4619      	mov	r1, r3
   838e0:	4b20      	ldr	r3, [pc, #128]	; (83964 <xQueueGenericSend+0x1b0>)
   838e2:	4798      	blx	r3
   838e4:	4603      	mov	r3, r0
   838e6:	2b00      	cmp	r3, #0
   838e8:	d11e      	bne.n	83928 <xQueueGenericSend+0x174>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   838ea:	6a38      	ldr	r0, [r7, #32]
   838ec:	4b1e      	ldr	r3, [pc, #120]	; (83968 <xQueueGenericSend+0x1b4>)
   838ee:	4798      	blx	r3
   838f0:	4603      	mov	r3, r0
   838f2:	2b00      	cmp	r3, #0
   838f4:	d012      	beq.n	8391c <xQueueGenericSend+0x168>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   838f6:	6a3b      	ldr	r3, [r7, #32]
   838f8:	f103 0210 	add.w	r2, r3, #16
   838fc:	687b      	ldr	r3, [r7, #4]
   838fe:	4610      	mov	r0, r2
   83900:	4619      	mov	r1, r3
   83902:	4b1a      	ldr	r3, [pc, #104]	; (8396c <xQueueGenericSend+0x1b8>)
   83904:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   83906:	6a38      	ldr	r0, [r7, #32]
   83908:	4b19      	ldr	r3, [pc, #100]	; (83970 <xQueueGenericSend+0x1bc>)
   8390a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   8390c:	4b19      	ldr	r3, [pc, #100]	; (83974 <xQueueGenericSend+0x1c0>)
   8390e:	4798      	blx	r3
   83910:	4603      	mov	r3, r0
   83912:	2b00      	cmp	r3, #0
   83914:	d10f      	bne.n	83936 <xQueueGenericSend+0x182>
				{
					portYIELD_WITHIN_API();
   83916:	4b0f      	ldr	r3, [pc, #60]	; (83954 <xQueueGenericSend+0x1a0>)
   83918:	4798      	blx	r3
   8391a:	e00c      	b.n	83936 <xQueueGenericSend+0x182>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8391c:	6a38      	ldr	r0, [r7, #32]
   8391e:	4b14      	ldr	r3, [pc, #80]	; (83970 <xQueueGenericSend+0x1bc>)
   83920:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83922:	4b14      	ldr	r3, [pc, #80]	; (83974 <xQueueGenericSend+0x1c0>)
   83924:	4798      	blx	r3
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
   83926:	e784      	b.n	83832 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   83928:	6a38      	ldr	r0, [r7, #32]
   8392a:	4b11      	ldr	r3, [pc, #68]	; (83970 <xQueueGenericSend+0x1bc>)
   8392c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8392e:	4b11      	ldr	r3, [pc, #68]	; (83974 <xQueueGenericSend+0x1c0>)
   83930:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   83932:	2300      	movs	r3, #0
   83934:	e000      	b.n	83938 <xQueueGenericSend+0x184>
		}
	}
   83936:	e77c      	b.n	83832 <xQueueGenericSend+0x7e>
}
   83938:	4618      	mov	r0, r3
   8393a:	3728      	adds	r7, #40	; 0x28
   8393c:	46bd      	mov	sp, r7
   8393e:	bd80      	pop	{r7, pc}
   83940:	000831ad 	.word	0x000831ad
   83944:	00084bf9 	.word	0x00084bf9
   83948:	00083131 	.word	0x00083131
   8394c:	00083c71 	.word	0x00083c71
   83950:	00084721 	.word	0x00084721
   83954:	00083111 	.word	0x00083111
   83958:	00083175 	.word	0x00083175
   8395c:	000847e1 	.word	0x000847e1
   83960:	0008421d 	.word	0x0008421d
   83964:	00084819 	.word	0x00084819
   83968:	00083e81 	.word	0x00083e81
   8396c:	00084601 	.word	0x00084601
   83970:	00083da5 	.word	0x00083da5
   83974:	00084239 	.word	0x00084239

00083978 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   83978:	b580      	push	{r7, lr}
   8397a:	b088      	sub	sp, #32
   8397c:	af00      	add	r7, sp, #0
   8397e:	60f8      	str	r0, [r7, #12]
   83980:	60b9      	str	r1, [r7, #8]
   83982:	607a      	str	r2, [r7, #4]
   83984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83986:	68fb      	ldr	r3, [r7, #12]
   83988:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   8398a:	69bb      	ldr	r3, [r7, #24]
   8398c:	2b00      	cmp	r3, #0
   8398e:	d102      	bne.n	83996 <xQueueGenericSendFromISR+0x1e>
   83990:	4b33      	ldr	r3, [pc, #204]	; (83a60 <xQueueGenericSendFromISR+0xe8>)
   83992:	4798      	blx	r3
   83994:	e7fe      	b.n	83994 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83996:	68bb      	ldr	r3, [r7, #8]
   83998:	2b00      	cmp	r3, #0
   8399a:	d103      	bne.n	839a4 <xQueueGenericSendFromISR+0x2c>
   8399c:	69bb      	ldr	r3, [r7, #24]
   8399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   839a0:	2b00      	cmp	r3, #0
   839a2:	d101      	bne.n	839a8 <xQueueGenericSendFromISR+0x30>
   839a4:	2301      	movs	r3, #1
   839a6:	e000      	b.n	839aa <xQueueGenericSendFromISR+0x32>
   839a8:	2300      	movs	r3, #0
   839aa:	2b00      	cmp	r3, #0
   839ac:	d102      	bne.n	839b4 <xQueueGenericSendFromISR+0x3c>
   839ae:	4b2c      	ldr	r3, [pc, #176]	; (83a60 <xQueueGenericSendFromISR+0xe8>)
   839b0:	4798      	blx	r3
   839b2:	e7fe      	b.n	839b2 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   839b4:	683b      	ldr	r3, [r7, #0]
   839b6:	2b02      	cmp	r3, #2
   839b8:	d103      	bne.n	839c2 <xQueueGenericSendFromISR+0x4a>
   839ba:	69bb      	ldr	r3, [r7, #24]
   839bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   839be:	2b01      	cmp	r3, #1
   839c0:	d101      	bne.n	839c6 <xQueueGenericSendFromISR+0x4e>
   839c2:	2301      	movs	r3, #1
   839c4:	e000      	b.n	839c8 <xQueueGenericSendFromISR+0x50>
   839c6:	2300      	movs	r3, #0
   839c8:	2b00      	cmp	r3, #0
   839ca:	d102      	bne.n	839d2 <xQueueGenericSendFromISR+0x5a>
   839cc:	4b24      	ldr	r3, [pc, #144]	; (83a60 <xQueueGenericSendFromISR+0xe8>)
   839ce:	4798      	blx	r3
   839d0:	e7fe      	b.n	839d0 <xQueueGenericSendFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
   839d2:	4b24      	ldr	r3, [pc, #144]	; (83a64 <xQueueGenericSendFromISR+0xec>)
   839d4:	4798      	blx	r3
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   839d6:	4b22      	ldr	r3, [pc, #136]	; (83a60 <xQueueGenericSendFromISR+0xe8>)
   839d8:	4798      	blx	r3
   839da:	6178      	str	r0, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   839dc:	69bb      	ldr	r3, [r7, #24]
   839de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   839e0:	69bb      	ldr	r3, [r7, #24]
   839e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   839e4:	429a      	cmp	r2, r3
   839e6:	d302      	bcc.n	839ee <xQueueGenericSendFromISR+0x76>
   839e8:	683b      	ldr	r3, [r7, #0]
   839ea:	2b02      	cmp	r3, #2
   839ec:	d12d      	bne.n	83a4a <xQueueGenericSendFromISR+0xd2>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			if( prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition ) != pdFALSE )
   839ee:	69b8      	ldr	r0, [r7, #24]
   839f0:	68b9      	ldr	r1, [r7, #8]
   839f2:	683a      	ldr	r2, [r7, #0]
   839f4:	4b1c      	ldr	r3, [pc, #112]	; (83a68 <xQueueGenericSendFromISR+0xf0>)
   839f6:	4798      	blx	r3
   839f8:	4603      	mov	r3, r0
   839fa:	2b00      	cmp	r3, #0
   839fc:	d005      	beq.n	83a0a <xQueueGenericSendFromISR+0x92>
			{
				/* This is a special case that can only be executed if a task
				holds multiple mutexes and then gives the mutexes back in an
				order that is different to that in which they were taken. */
				if( pxHigherPriorityTaskWoken != NULL )
   839fe:	687b      	ldr	r3, [r7, #4]
   83a00:	2b00      	cmp	r3, #0
   83a02:	d002      	beq.n	83a0a <xQueueGenericSendFromISR+0x92>
				{
					*pxHigherPriorityTaskWoken = pdTRUE;
   83a04:	687b      	ldr	r3, [r7, #4]
   83a06:	2201      	movs	r2, #1
   83a08:	601a      	str	r2, [r3, #0]
				}
			}

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   83a0a:	69bb      	ldr	r3, [r7, #24]
   83a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
   83a12:	d112      	bne.n	83a3a <xQueueGenericSendFromISR+0xc2>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83a14:	69bb      	ldr	r3, [r7, #24]
   83a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83a18:	2b00      	cmp	r3, #0
   83a1a:	d013      	beq.n	83a44 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83a1c:	69bb      	ldr	r3, [r7, #24]
   83a1e:	3324      	adds	r3, #36	; 0x24
   83a20:	4618      	mov	r0, r3
   83a22:	4b12      	ldr	r3, [pc, #72]	; (83a6c <xQueueGenericSendFromISR+0xf4>)
   83a24:	4798      	blx	r3
   83a26:	4603      	mov	r3, r0
   83a28:	2b00      	cmp	r3, #0
   83a2a:	d00b      	beq.n	83a44 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   83a2c:	687b      	ldr	r3, [r7, #4]
   83a2e:	2b00      	cmp	r3, #0
   83a30:	d008      	beq.n	83a44 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   83a32:	687b      	ldr	r3, [r7, #4]
   83a34:	2201      	movs	r2, #1
   83a36:	601a      	str	r2, [r3, #0]
   83a38:	e004      	b.n	83a44 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   83a3a:	69bb      	ldr	r3, [r7, #24]
   83a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83a3e:	1c5a      	adds	r2, r3, #1
   83a40:	69bb      	ldr	r3, [r7, #24]
   83a42:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
   83a44:	2301      	movs	r3, #1
   83a46:	61fb      	str	r3, [r7, #28]
   83a48:	e001      	b.n	83a4e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   83a4a:	2300      	movs	r3, #0
   83a4c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   83a4e:	6978      	ldr	r0, [r7, #20]
   83a50:	4b07      	ldr	r3, [pc, #28]	; (83a70 <xQueueGenericSendFromISR+0xf8>)
   83a52:	4798      	blx	r3

	return xReturn;
   83a54:	69fb      	ldr	r3, [r7, #28]
}
   83a56:	4618      	mov	r0, r3
   83a58:	3720      	adds	r7, #32
   83a5a:	46bd      	mov	sp, r7
   83a5c:	bd80      	pop	{r7, pc}
   83a5e:	bf00      	nop
   83a60:	000831ad 	.word	0x000831ad
   83a64:	00083275 	.word	0x00083275
   83a68:	00083c71 	.word	0x00083c71
   83a6c:	00084721 	.word	0x00084721
   83a70:	000831c1 	.word	0x000831c1

00083a74 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
   83a74:	b580      	push	{r7, lr}
   83a76:	b08a      	sub	sp, #40	; 0x28
   83a78:	af00      	add	r7, sp, #0
   83a7a:	60f8      	str	r0, [r7, #12]
   83a7c:	60b9      	str	r1, [r7, #8]
   83a7e:	607a      	str	r2, [r7, #4]
   83a80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   83a82:	2300      	movs	r3, #0
   83a84:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83a86:	68fb      	ldr	r3, [r7, #12]
   83a88:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   83a8a:	6a3b      	ldr	r3, [r7, #32]
   83a8c:	2b00      	cmp	r3, #0
   83a8e:	d102      	bne.n	83a96 <xQueueGenericReceive+0x22>
   83a90:	4b67      	ldr	r3, [pc, #412]	; (83c30 <xQueueGenericReceive+0x1bc>)
   83a92:	4798      	blx	r3
   83a94:	e7fe      	b.n	83a94 <xQueueGenericReceive+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   83a96:	68bb      	ldr	r3, [r7, #8]
   83a98:	2b00      	cmp	r3, #0
   83a9a:	d103      	bne.n	83aa4 <xQueueGenericReceive+0x30>
   83a9c:	6a3b      	ldr	r3, [r7, #32]
   83a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83aa0:	2b00      	cmp	r3, #0
   83aa2:	d101      	bne.n	83aa8 <xQueueGenericReceive+0x34>
   83aa4:	2301      	movs	r3, #1
   83aa6:	e000      	b.n	83aaa <xQueueGenericReceive+0x36>
   83aa8:	2300      	movs	r3, #0
   83aaa:	2b00      	cmp	r3, #0
   83aac:	d102      	bne.n	83ab4 <xQueueGenericReceive+0x40>
   83aae:	4b60      	ldr	r3, [pc, #384]	; (83c30 <xQueueGenericReceive+0x1bc>)
   83ab0:	4798      	blx	r3
   83ab2:	e7fe      	b.n	83ab2 <xQueueGenericReceive+0x3e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   83ab4:	4b5f      	ldr	r3, [pc, #380]	; (83c34 <xQueueGenericReceive+0x1c0>)
   83ab6:	4798      	blx	r3
   83ab8:	4603      	mov	r3, r0
   83aba:	2b00      	cmp	r3, #0
   83abc:	d102      	bne.n	83ac4 <xQueueGenericReceive+0x50>
   83abe:	687b      	ldr	r3, [r7, #4]
   83ac0:	2b00      	cmp	r3, #0
   83ac2:	d101      	bne.n	83ac8 <xQueueGenericReceive+0x54>
   83ac4:	2301      	movs	r3, #1
   83ac6:	e000      	b.n	83aca <xQueueGenericReceive+0x56>
   83ac8:	2300      	movs	r3, #0
   83aca:	2b00      	cmp	r3, #0
   83acc:	d102      	bne.n	83ad4 <xQueueGenericReceive+0x60>
   83ace:	4b58      	ldr	r3, [pc, #352]	; (83c30 <xQueueGenericReceive+0x1bc>)
   83ad0:	4798      	blx	r3
   83ad2:	e7fe      	b.n	83ad2 <xQueueGenericReceive+0x5e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   83ad4:	4b58      	ldr	r3, [pc, #352]	; (83c38 <xQueueGenericReceive+0x1c4>)
   83ad6:	4798      	blx	r3
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83ad8:	6a3b      	ldr	r3, [r7, #32]
   83ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83adc:	2b00      	cmp	r3, #0
   83ade:	d03b      	beq.n	83b58 <xQueueGenericReceive+0xe4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
   83ae0:	6a3b      	ldr	r3, [r7, #32]
   83ae2:	68db      	ldr	r3, [r3, #12]
   83ae4:	61fb      	str	r3, [r7, #28]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   83ae6:	6a38      	ldr	r0, [r7, #32]
   83ae8:	68b9      	ldr	r1, [r7, #8]
   83aea:	4b54      	ldr	r3, [pc, #336]	; (83c3c <xQueueGenericReceive+0x1c8>)
   83aec:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   83aee:	683b      	ldr	r3, [r7, #0]
   83af0:	2b00      	cmp	r3, #0
   83af2:	d11c      	bne.n	83b2e <xQueueGenericReceive+0xba>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
   83af4:	6a3b      	ldr	r3, [r7, #32]
   83af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83af8:	1e5a      	subs	r2, r3, #1
   83afa:	6a3b      	ldr	r3, [r7, #32]
   83afc:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83afe:	6a3b      	ldr	r3, [r7, #32]
   83b00:	681b      	ldr	r3, [r3, #0]
   83b02:	2b00      	cmp	r3, #0
   83b04:	d104      	bne.n	83b10 <xQueueGenericReceive+0x9c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   83b06:	4b4e      	ldr	r3, [pc, #312]	; (83c40 <xQueueGenericReceive+0x1cc>)
   83b08:	4798      	blx	r3
   83b0a:	4602      	mov	r2, r0
   83b0c:	6a3b      	ldr	r3, [r7, #32]
   83b0e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83b10:	6a3b      	ldr	r3, [r7, #32]
   83b12:	691b      	ldr	r3, [r3, #16]
   83b14:	2b00      	cmp	r3, #0
   83b16:	d01b      	beq.n	83b50 <xQueueGenericReceive+0xdc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   83b18:	6a3b      	ldr	r3, [r7, #32]
   83b1a:	3310      	adds	r3, #16
   83b1c:	4618      	mov	r0, r3
   83b1e:	4b49      	ldr	r3, [pc, #292]	; (83c44 <xQueueGenericReceive+0x1d0>)
   83b20:	4798      	blx	r3
   83b22:	4603      	mov	r3, r0
   83b24:	2b01      	cmp	r3, #1
   83b26:	d113      	bne.n	83b50 <xQueueGenericReceive+0xdc>
						{
							queueYIELD_IF_USING_PREEMPTION();
   83b28:	4b47      	ldr	r3, [pc, #284]	; (83c48 <xQueueGenericReceive+0x1d4>)
   83b2a:	4798      	blx	r3
   83b2c:	e010      	b.n	83b50 <xQueueGenericReceive+0xdc>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
   83b2e:	6a3b      	ldr	r3, [r7, #32]
   83b30:	69fa      	ldr	r2, [r7, #28]
   83b32:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83b34:	6a3b      	ldr	r3, [r7, #32]
   83b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83b38:	2b00      	cmp	r3, #0
   83b3a:	d009      	beq.n	83b50 <xQueueGenericReceive+0xdc>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83b3c:	6a3b      	ldr	r3, [r7, #32]
   83b3e:	3324      	adds	r3, #36	; 0x24
   83b40:	4618      	mov	r0, r3
   83b42:	4b40      	ldr	r3, [pc, #256]	; (83c44 <xQueueGenericReceive+0x1d0>)
   83b44:	4798      	blx	r3
   83b46:	4603      	mov	r3, r0
   83b48:	2b00      	cmp	r3, #0
   83b4a:	d001      	beq.n	83b50 <xQueueGenericReceive+0xdc>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
   83b4c:	4b3e      	ldr	r3, [pc, #248]	; (83c48 <xQueueGenericReceive+0x1d4>)
   83b4e:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
   83b50:	4b3e      	ldr	r3, [pc, #248]	; (83c4c <xQueueGenericReceive+0x1d8>)
   83b52:	4798      	blx	r3
				return pdPASS;
   83b54:	2301      	movs	r3, #1
   83b56:	e066      	b.n	83c26 <xQueueGenericReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   83b58:	687b      	ldr	r3, [r7, #4]
   83b5a:	2b00      	cmp	r3, #0
   83b5c:	d103      	bne.n	83b66 <xQueueGenericReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   83b5e:	4b3b      	ldr	r3, [pc, #236]	; (83c4c <xQueueGenericReceive+0x1d8>)
   83b60:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   83b62:	2300      	movs	r3, #0
   83b64:	e05f      	b.n	83c26 <xQueueGenericReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
   83b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   83b68:	2b00      	cmp	r3, #0
   83b6a:	d106      	bne.n	83b7a <xQueueGenericReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   83b6c:	f107 0314 	add.w	r3, r7, #20
   83b70:	4618      	mov	r0, r3
   83b72:	4b37      	ldr	r3, [pc, #220]	; (83c50 <xQueueGenericReceive+0x1dc>)
   83b74:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   83b76:	2301      	movs	r3, #1
   83b78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   83b7a:	4b34      	ldr	r3, [pc, #208]	; (83c4c <xQueueGenericReceive+0x1d8>)
   83b7c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   83b7e:	4b35      	ldr	r3, [pc, #212]	; (83c54 <xQueueGenericReceive+0x1e0>)
   83b80:	4798      	blx	r3
		prvLockQueue( pxQueue );
   83b82:	4b2d      	ldr	r3, [pc, #180]	; (83c38 <xQueueGenericReceive+0x1c4>)
   83b84:	4798      	blx	r3
   83b86:	6a3b      	ldr	r3, [r7, #32]
   83b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b8e:	d102      	bne.n	83b96 <xQueueGenericReceive+0x122>
   83b90:	6a3b      	ldr	r3, [r7, #32]
   83b92:	2200      	movs	r2, #0
   83b94:	645a      	str	r2, [r3, #68]	; 0x44
   83b96:	6a3b      	ldr	r3, [r7, #32]
   83b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
   83b9e:	d102      	bne.n	83ba6 <xQueueGenericReceive+0x132>
   83ba0:	6a3b      	ldr	r3, [r7, #32]
   83ba2:	2200      	movs	r2, #0
   83ba4:	649a      	str	r2, [r3, #72]	; 0x48
   83ba6:	4b29      	ldr	r3, [pc, #164]	; (83c4c <xQueueGenericReceive+0x1d8>)
   83ba8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   83baa:	f107 0214 	add.w	r2, r7, #20
   83bae:	1d3b      	adds	r3, r7, #4
   83bb0:	4610      	mov	r0, r2
   83bb2:	4619      	mov	r1, r3
   83bb4:	4b28      	ldr	r3, [pc, #160]	; (83c58 <xQueueGenericReceive+0x1e4>)
   83bb6:	4798      	blx	r3
   83bb8:	4603      	mov	r3, r0
   83bba:	2b00      	cmp	r3, #0
   83bbc:	d12b      	bne.n	83c16 <xQueueGenericReceive+0x1a2>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   83bbe:	6a38      	ldr	r0, [r7, #32]
   83bc0:	4b26      	ldr	r3, [pc, #152]	; (83c5c <xQueueGenericReceive+0x1e8>)
   83bc2:	4798      	blx	r3
   83bc4:	4603      	mov	r3, r0
   83bc6:	2b00      	cmp	r3, #0
   83bc8:	d01f      	beq.n	83c0a <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83bca:	6a3b      	ldr	r3, [r7, #32]
   83bcc:	681b      	ldr	r3, [r3, #0]
   83bce:	2b00      	cmp	r3, #0
   83bd0:	d108      	bne.n	83be4 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
   83bd2:	4b19      	ldr	r3, [pc, #100]	; (83c38 <xQueueGenericReceive+0x1c4>)
   83bd4:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   83bd6:	6a3b      	ldr	r3, [r7, #32]
   83bd8:	685b      	ldr	r3, [r3, #4]
   83bda:	4618      	mov	r0, r3
   83bdc:	4b20      	ldr	r3, [pc, #128]	; (83c60 <xQueueGenericReceive+0x1ec>)
   83bde:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   83be0:	4b1a      	ldr	r3, [pc, #104]	; (83c4c <xQueueGenericReceive+0x1d8>)
   83be2:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83be4:	6a3b      	ldr	r3, [r7, #32]
   83be6:	f103 0224 	add.w	r2, r3, #36	; 0x24
   83bea:	687b      	ldr	r3, [r7, #4]
   83bec:	4610      	mov	r0, r2
   83bee:	4619      	mov	r1, r3
   83bf0:	4b1c      	ldr	r3, [pc, #112]	; (83c64 <xQueueGenericReceive+0x1f0>)
   83bf2:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   83bf4:	6a38      	ldr	r0, [r7, #32]
   83bf6:	4b1c      	ldr	r3, [pc, #112]	; (83c68 <xQueueGenericReceive+0x1f4>)
   83bf8:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   83bfa:	4b1c      	ldr	r3, [pc, #112]	; (83c6c <xQueueGenericReceive+0x1f8>)
   83bfc:	4798      	blx	r3
   83bfe:	4603      	mov	r3, r0
   83c00:	2b00      	cmp	r3, #0
   83c02:	d10f      	bne.n	83c24 <xQueueGenericReceive+0x1b0>
				{
					portYIELD_WITHIN_API();
   83c04:	4b10      	ldr	r3, [pc, #64]	; (83c48 <xQueueGenericReceive+0x1d4>)
   83c06:	4798      	blx	r3
   83c08:	e00c      	b.n	83c24 <xQueueGenericReceive+0x1b0>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   83c0a:	6a38      	ldr	r0, [r7, #32]
   83c0c:	4b16      	ldr	r3, [pc, #88]	; (83c68 <xQueueGenericReceive+0x1f4>)
   83c0e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   83c10:	4b16      	ldr	r3, [pc, #88]	; (83c6c <xQueueGenericReceive+0x1f8>)
   83c12:	4798      	blx	r3
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
   83c14:	e75e      	b.n	83ad4 <xQueueGenericReceive+0x60>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   83c16:	6a38      	ldr	r0, [r7, #32]
   83c18:	4b13      	ldr	r3, [pc, #76]	; (83c68 <xQueueGenericReceive+0x1f4>)
   83c1a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   83c1c:	4b13      	ldr	r3, [pc, #76]	; (83c6c <xQueueGenericReceive+0x1f8>)
   83c1e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   83c20:	2300      	movs	r3, #0
   83c22:	e000      	b.n	83c26 <xQueueGenericReceive+0x1b2>
		}
	}
   83c24:	e756      	b.n	83ad4 <xQueueGenericReceive+0x60>
}
   83c26:	4618      	mov	r0, r3
   83c28:	3728      	adds	r7, #40	; 0x28
   83c2a:	46bd      	mov	sp, r7
   83c2c:	bd80      	pop	{r7, pc}
   83c2e:	bf00      	nop
   83c30:	000831ad 	.word	0x000831ad
   83c34:	00084bf9 	.word	0x00084bf9
   83c38:	00083131 	.word	0x00083131
   83c3c:	00083d55 	.word	0x00083d55
   83c40:	00084e0d 	.word	0x00084e0d
   83c44:	00084721 	.word	0x00084721
   83c48:	00083111 	.word	0x00083111
   83c4c:	00083175 	.word	0x00083175
   83c50:	000847e1 	.word	0x000847e1
   83c54:	0008421d 	.word	0x0008421d
   83c58:	00084819 	.word	0x00084819
   83c5c:	00083e4d 	.word	0x00083e4d
   83c60:	00084c35 	.word	0x00084c35
   83c64:	00084601 	.word	0x00084601
   83c68:	00083da5 	.word	0x00083da5
   83c6c:	00084239 	.word	0x00084239

00083c70 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   83c70:	b580      	push	{r7, lr}
   83c72:	b086      	sub	sp, #24
   83c74:	af00      	add	r7, sp, #0
   83c76:	60f8      	str	r0, [r7, #12]
   83c78:	60b9      	str	r1, [r7, #8]
   83c7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   83c7c:	2300      	movs	r3, #0
   83c7e:	617b      	str	r3, [r7, #20]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   83c80:	68fb      	ldr	r3, [r7, #12]
   83c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83c84:	2b00      	cmp	r3, #0
   83c86:	d10d      	bne.n	83ca4 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   83c88:	68fb      	ldr	r3, [r7, #12]
   83c8a:	681b      	ldr	r3, [r3, #0]
   83c8c:	2b00      	cmp	r3, #0
   83c8e:	d152      	bne.n	83d36 <prvCopyDataToQueue+0xc6>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   83c90:	68fb      	ldr	r3, [r7, #12]
   83c92:	685b      	ldr	r3, [r3, #4]
   83c94:	4618      	mov	r0, r3
   83c96:	4b2d      	ldr	r3, [pc, #180]	; (83d4c <prvCopyDataToQueue+0xdc>)
   83c98:	4798      	blx	r3
   83c9a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   83c9c:	68fb      	ldr	r3, [r7, #12]
   83c9e:	2200      	movs	r2, #0
   83ca0:	605a      	str	r2, [r3, #4]
   83ca2:	e048      	b.n	83d36 <prvCopyDataToQueue+0xc6>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   83ca4:	687b      	ldr	r3, [r7, #4]
   83ca6:	2b00      	cmp	r3, #0
   83ca8:	d11a      	bne.n	83ce0 <prvCopyDataToQueue+0x70>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   83caa:	68fb      	ldr	r3, [r7, #12]
   83cac:	689a      	ldr	r2, [r3, #8]
   83cae:	68fb      	ldr	r3, [r7, #12]
   83cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83cb2:	4610      	mov	r0, r2
   83cb4:	68b9      	ldr	r1, [r7, #8]
   83cb6:	461a      	mov	r2, r3
   83cb8:	4b25      	ldr	r3, [pc, #148]	; (83d50 <prvCopyDataToQueue+0xe0>)
   83cba:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   83cbc:	68fb      	ldr	r3, [r7, #12]
   83cbe:	689a      	ldr	r2, [r3, #8]
   83cc0:	68fb      	ldr	r3, [r7, #12]
   83cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83cc4:	441a      	add	r2, r3
   83cc6:	68fb      	ldr	r3, [r7, #12]
   83cc8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83cca:	68fb      	ldr	r3, [r7, #12]
   83ccc:	689a      	ldr	r2, [r3, #8]
   83cce:	68fb      	ldr	r3, [r7, #12]
   83cd0:	685b      	ldr	r3, [r3, #4]
   83cd2:	429a      	cmp	r2, r3
   83cd4:	d32f      	bcc.n	83d36 <prvCopyDataToQueue+0xc6>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   83cd6:	68fb      	ldr	r3, [r7, #12]
   83cd8:	681a      	ldr	r2, [r3, #0]
   83cda:	68fb      	ldr	r3, [r7, #12]
   83cdc:	609a      	str	r2, [r3, #8]
   83cde:	e02a      	b.n	83d36 <prvCopyDataToQueue+0xc6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   83ce0:	68fb      	ldr	r3, [r7, #12]
   83ce2:	68da      	ldr	r2, [r3, #12]
   83ce4:	68fb      	ldr	r3, [r7, #12]
   83ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83ce8:	4610      	mov	r0, r2
   83cea:	68b9      	ldr	r1, [r7, #8]
   83cec:	461a      	mov	r2, r3
   83cee:	4b18      	ldr	r3, [pc, #96]	; (83d50 <prvCopyDataToQueue+0xe0>)
   83cf0:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   83cf2:	68fb      	ldr	r3, [r7, #12]
   83cf4:	68da      	ldr	r2, [r3, #12]
   83cf6:	68fb      	ldr	r3, [r7, #12]
   83cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83cfa:	425b      	negs	r3, r3
   83cfc:	441a      	add	r2, r3
   83cfe:	68fb      	ldr	r3, [r7, #12]
   83d00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   83d02:	68fb      	ldr	r3, [r7, #12]
   83d04:	68da      	ldr	r2, [r3, #12]
   83d06:	68fb      	ldr	r3, [r7, #12]
   83d08:	681b      	ldr	r3, [r3, #0]
   83d0a:	429a      	cmp	r2, r3
   83d0c:	d207      	bcs.n	83d1e <prvCopyDataToQueue+0xae>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   83d0e:	68fb      	ldr	r3, [r7, #12]
   83d10:	685a      	ldr	r2, [r3, #4]
   83d12:	68fb      	ldr	r3, [r7, #12]
   83d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83d16:	425b      	negs	r3, r3
   83d18:	441a      	add	r2, r3
   83d1a:	68fb      	ldr	r3, [r7, #12]
   83d1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   83d1e:	687b      	ldr	r3, [r7, #4]
   83d20:	2b02      	cmp	r3, #2
   83d22:	d108      	bne.n	83d36 <prvCopyDataToQueue+0xc6>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
   83d24:	68fb      	ldr	r3, [r7, #12]
   83d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83d28:	2b00      	cmp	r3, #0
   83d2a:	d004      	beq.n	83d36 <prvCopyDataToQueue+0xc6>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
   83d2c:	68fb      	ldr	r3, [r7, #12]
   83d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83d30:	1e5a      	subs	r2, r3, #1
   83d32:	68fb      	ldr	r3, [r7, #12]
   83d34:	639a      	str	r2, [r3, #56]	; 0x38
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
   83d36:	68fb      	ldr	r3, [r7, #12]
   83d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83d3a:	1c5a      	adds	r2, r3, #1
   83d3c:	68fb      	ldr	r3, [r7, #12]
   83d3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   83d40:	697b      	ldr	r3, [r7, #20]
}
   83d42:	4618      	mov	r0, r3
   83d44:	3718      	adds	r7, #24
   83d46:	46bd      	mov	sp, r7
   83d48:	bd80      	pop	{r7, pc}
   83d4a:	bf00      	nop
   83d4c:	00084d29 	.word	0x00084d29
   83d50:	00086ca5 	.word	0x00086ca5

00083d54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   83d54:	b580      	push	{r7, lr}
   83d56:	b082      	sub	sp, #8
   83d58:	af00      	add	r7, sp, #0
   83d5a:	6078      	str	r0, [r7, #4]
   83d5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   83d5e:	687b      	ldr	r3, [r7, #4]
   83d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83d62:	2b00      	cmp	r3, #0
   83d64:	d019      	beq.n	83d9a <prvCopyDataFromQueue+0x46>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   83d66:	687b      	ldr	r3, [r7, #4]
   83d68:	68da      	ldr	r2, [r3, #12]
   83d6a:	687b      	ldr	r3, [r7, #4]
   83d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83d6e:	441a      	add	r2, r3
   83d70:	687b      	ldr	r3, [r7, #4]
   83d72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   83d74:	687b      	ldr	r3, [r7, #4]
   83d76:	68da      	ldr	r2, [r3, #12]
   83d78:	687b      	ldr	r3, [r7, #4]
   83d7a:	685b      	ldr	r3, [r3, #4]
   83d7c:	429a      	cmp	r2, r3
   83d7e:	d303      	bcc.n	83d88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   83d80:	687b      	ldr	r3, [r7, #4]
   83d82:	681a      	ldr	r2, [r3, #0]
   83d84:	687b      	ldr	r3, [r7, #4]
   83d86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   83d88:	687b      	ldr	r3, [r7, #4]
   83d8a:	68da      	ldr	r2, [r3, #12]
   83d8c:	687b      	ldr	r3, [r7, #4]
   83d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   83d90:	6838      	ldr	r0, [r7, #0]
   83d92:	4611      	mov	r1, r2
   83d94:	461a      	mov	r2, r3
   83d96:	4b02      	ldr	r3, [pc, #8]	; (83da0 <prvCopyDataFromQueue+0x4c>)
   83d98:	4798      	blx	r3
	}
}
   83d9a:	3708      	adds	r7, #8
   83d9c:	46bd      	mov	sp, r7
   83d9e:	bd80      	pop	{r7, pc}
   83da0:	00086ca5 	.word	0x00086ca5

00083da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   83da4:	b580      	push	{r7, lr}
   83da6:	b082      	sub	sp, #8
   83da8:	af00      	add	r7, sp, #0
   83daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   83dac:	4b23      	ldr	r3, [pc, #140]	; (83e3c <prvUnlockQueue+0x98>)
   83dae:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83db0:	e014      	b.n	83ddc <prvUnlockQueue+0x38>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   83db2:	687b      	ldr	r3, [r7, #4]
   83db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83db6:	2b00      	cmp	r3, #0
   83db8:	d00a      	beq.n	83dd0 <prvUnlockQueue+0x2c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   83dba:	687b      	ldr	r3, [r7, #4]
   83dbc:	3324      	adds	r3, #36	; 0x24
   83dbe:	4618      	mov	r0, r3
   83dc0:	4b1f      	ldr	r3, [pc, #124]	; (83e40 <prvUnlockQueue+0x9c>)
   83dc2:	4798      	blx	r3
   83dc4:	4603      	mov	r3, r0
   83dc6:	2b00      	cmp	r3, #0
   83dc8:	d003      	beq.n	83dd2 <prvUnlockQueue+0x2e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
   83dca:	4b1e      	ldr	r3, [pc, #120]	; (83e44 <prvUnlockQueue+0xa0>)
   83dcc:	4798      	blx	r3
   83dce:	e000      	b.n	83dd2 <prvUnlockQueue+0x2e>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
   83dd0:	e008      	b.n	83de4 <prvUnlockQueue+0x40>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
   83dd2:	687b      	ldr	r3, [r7, #4]
   83dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83dd6:	1e5a      	subs	r2, r3, #1
   83dd8:	687b      	ldr	r3, [r7, #4]
   83dda:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   83ddc:	687b      	ldr	r3, [r7, #4]
   83dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83de0:	2b00      	cmp	r3, #0
   83de2:	dce6      	bgt.n	83db2 <prvUnlockQueue+0xe>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
   83de4:	687b      	ldr	r3, [r7, #4]
   83de6:	f04f 32ff 	mov.w	r2, #4294967295
   83dea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   83dec:	4b16      	ldr	r3, [pc, #88]	; (83e48 <prvUnlockQueue+0xa4>)
   83dee:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   83df0:	4b12      	ldr	r3, [pc, #72]	; (83e3c <prvUnlockQueue+0x98>)
   83df2:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83df4:	e014      	b.n	83e20 <prvUnlockQueue+0x7c>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   83df6:	687b      	ldr	r3, [r7, #4]
   83df8:	691b      	ldr	r3, [r3, #16]
   83dfa:	2b00      	cmp	r3, #0
   83dfc:	d00f      	beq.n	83e1e <prvUnlockQueue+0x7a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   83dfe:	687b      	ldr	r3, [r7, #4]
   83e00:	3310      	adds	r3, #16
   83e02:	4618      	mov	r0, r3
   83e04:	4b0e      	ldr	r3, [pc, #56]	; (83e40 <prvUnlockQueue+0x9c>)
   83e06:	4798      	blx	r3
   83e08:	4603      	mov	r3, r0
   83e0a:	2b00      	cmp	r3, #0
   83e0c:	d001      	beq.n	83e12 <prvUnlockQueue+0x6e>
				{
					vTaskMissedYield();
   83e0e:	4b0d      	ldr	r3, [pc, #52]	; (83e44 <prvUnlockQueue+0xa0>)
   83e10:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
   83e12:	687b      	ldr	r3, [r7, #4]
   83e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83e16:	1e5a      	subs	r2, r3, #1
   83e18:	687b      	ldr	r3, [r7, #4]
   83e1a:	645a      	str	r2, [r3, #68]	; 0x44
   83e1c:	e000      	b.n	83e20 <prvUnlockQueue+0x7c>
			}
			else
			{
				break;
   83e1e:	e003      	b.n	83e28 <prvUnlockQueue+0x84>
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   83e20:	687b      	ldr	r3, [r7, #4]
   83e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83e24:	2b00      	cmp	r3, #0
   83e26:	dce6      	bgt.n	83df6 <prvUnlockQueue+0x52>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   83e28:	687b      	ldr	r3, [r7, #4]
   83e2a:	f04f 32ff 	mov.w	r2, #4294967295
   83e2e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   83e30:	4b05      	ldr	r3, [pc, #20]	; (83e48 <prvUnlockQueue+0xa4>)
   83e32:	4798      	blx	r3
}
   83e34:	3708      	adds	r7, #8
   83e36:	46bd      	mov	sp, r7
   83e38:	bd80      	pop	{r7, pc}
   83e3a:	bf00      	nop
   83e3c:	00083131 	.word	0x00083131
   83e40:	00084721 	.word	0x00084721
   83e44:	000848c9 	.word	0x000848c9
   83e48:	00083175 	.word	0x00083175

00083e4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   83e4c:	b580      	push	{r7, lr}
   83e4e:	b084      	sub	sp, #16
   83e50:	af00      	add	r7, sp, #0
   83e52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83e54:	4b08      	ldr	r3, [pc, #32]	; (83e78 <prvIsQueueEmpty+0x2c>)
   83e56:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   83e58:	687b      	ldr	r3, [r7, #4]
   83e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83e5c:	2b00      	cmp	r3, #0
   83e5e:	d102      	bne.n	83e66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   83e60:	2301      	movs	r3, #1
   83e62:	60fb      	str	r3, [r7, #12]
   83e64:	e001      	b.n	83e6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   83e66:	2300      	movs	r3, #0
   83e68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83e6a:	4b04      	ldr	r3, [pc, #16]	; (83e7c <prvIsQueueEmpty+0x30>)
   83e6c:	4798      	blx	r3

	return xReturn;
   83e6e:	68fb      	ldr	r3, [r7, #12]
}
   83e70:	4618      	mov	r0, r3
   83e72:	3710      	adds	r7, #16
   83e74:	46bd      	mov	sp, r7
   83e76:	bd80      	pop	{r7, pc}
   83e78:	00083131 	.word	0x00083131
   83e7c:	00083175 	.word	0x00083175

00083e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   83e80:	b580      	push	{r7, lr}
   83e82:	b084      	sub	sp, #16
   83e84:	af00      	add	r7, sp, #0
   83e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   83e88:	4b09      	ldr	r3, [pc, #36]	; (83eb0 <prvIsQueueFull+0x30>)
   83e8a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   83e8c:	687b      	ldr	r3, [r7, #4]
   83e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   83e90:	687b      	ldr	r3, [r7, #4]
   83e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83e94:	429a      	cmp	r2, r3
   83e96:	d102      	bne.n	83e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   83e98:	2301      	movs	r3, #1
   83e9a:	60fb      	str	r3, [r7, #12]
   83e9c:	e001      	b.n	83ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   83e9e:	2300      	movs	r3, #0
   83ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   83ea2:	4b04      	ldr	r3, [pc, #16]	; (83eb4 <prvIsQueueFull+0x34>)
   83ea4:	4798      	blx	r3

	return xReturn;
   83ea6:	68fb      	ldr	r3, [r7, #12]
}
   83ea8:	4618      	mov	r0, r3
   83eaa:	3710      	adds	r7, #16
   83eac:	46bd      	mov	sp, r7
   83eae:	bd80      	pop	{r7, pc}
   83eb0:	00083131 	.word	0x00083131
   83eb4:	00083175 	.word	0x00083175

00083eb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
   83eb8:	b580      	push	{r7, lr}
   83eba:	b084      	sub	sp, #16
   83ebc:	af00      	add	r7, sp, #0
   83ebe:	6078      	str	r0, [r7, #4]
   83ec0:	6039      	str	r1, [r7, #0]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   83ec2:	687b      	ldr	r3, [r7, #4]
   83ec4:	60fb      	str	r3, [r7, #12]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   83ec6:	4b12      	ldr	r3, [pc, #72]	; (83f10 <vQueueWaitForMessageRestricted+0x58>)
   83ec8:	4798      	blx	r3
   83eca:	68fb      	ldr	r3, [r7, #12]
   83ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   83ece:	f1b3 3fff 	cmp.w	r3, #4294967295
   83ed2:	d102      	bne.n	83eda <vQueueWaitForMessageRestricted+0x22>
   83ed4:	68fb      	ldr	r3, [r7, #12]
   83ed6:	2200      	movs	r2, #0
   83ed8:	645a      	str	r2, [r3, #68]	; 0x44
   83eda:	68fb      	ldr	r3, [r7, #12]
   83edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   83ede:	f1b3 3fff 	cmp.w	r3, #4294967295
   83ee2:	d102      	bne.n	83eea <vQueueWaitForMessageRestricted+0x32>
   83ee4:	68fb      	ldr	r3, [r7, #12]
   83ee6:	2200      	movs	r2, #0
   83ee8:	649a      	str	r2, [r3, #72]	; 0x48
   83eea:	4b0a      	ldr	r3, [pc, #40]	; (83f14 <vQueueWaitForMessageRestricted+0x5c>)
   83eec:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   83eee:	68fb      	ldr	r3, [r7, #12]
   83ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   83ef2:	2b00      	cmp	r3, #0
   83ef4:	d105      	bne.n	83f02 <vQueueWaitForMessageRestricted+0x4a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   83ef6:	68fb      	ldr	r3, [r7, #12]
   83ef8:	3324      	adds	r3, #36	; 0x24
   83efa:	4618      	mov	r0, r3
   83efc:	6839      	ldr	r1, [r7, #0]
   83efe:	4b06      	ldr	r3, [pc, #24]	; (83f18 <vQueueWaitForMessageRestricted+0x60>)
   83f00:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   83f02:	68f8      	ldr	r0, [r7, #12]
   83f04:	4b05      	ldr	r3, [pc, #20]	; (83f1c <vQueueWaitForMessageRestricted+0x64>)
   83f06:	4798      	blx	r3
	}
   83f08:	3710      	adds	r7, #16
   83f0a:	46bd      	mov	sp, r7
   83f0c:	bd80      	pop	{r7, pc}
   83f0e:	bf00      	nop
   83f10:	00083131 	.word	0x00083131
   83f14:	00083175 	.word	0x00083175
   83f18:	000846a1 	.word	0x000846a1
   83f1c:	00083da5 	.word	0x00083da5

00083f20 <xTaskGenericCreate>:
static void prvResetNextTaskUnblockTime( void );

/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   83f20:	b590      	push	{r4, r7, lr}
   83f22:	b08b      	sub	sp, #44	; 0x2c
   83f24:	af02      	add	r7, sp, #8
   83f26:	60f8      	str	r0, [r7, #12]
   83f28:	60b9      	str	r1, [r7, #8]
   83f2a:	603b      	str	r3, [r7, #0]
   83f2c:	4613      	mov	r3, r2
   83f2e:	80fb      	strh	r3, [r7, #6]
BaseType_t xReturn;
TCB_t * pxNewTCB;

	configASSERT( pxTaskCode );
   83f30:	68fb      	ldr	r3, [r7, #12]
   83f32:	2b00      	cmp	r3, #0
   83f34:	d102      	bne.n	83f3c <xTaskGenericCreate+0x1c>
   83f36:	4b4b      	ldr	r3, [pc, #300]	; (84064 <xTaskGenericCreate+0x144>)
   83f38:	4798      	blx	r3
   83f3a:	e7fe      	b.n	83f3a <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   83f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83f3e:	2b04      	cmp	r3, #4
   83f40:	d902      	bls.n	83f48 <xTaskGenericCreate+0x28>
   83f42:	4b48      	ldr	r3, [pc, #288]	; (84064 <xTaskGenericCreate+0x144>)
   83f44:	4798      	blx	r3
   83f46:	e7fe      	b.n	83f46 <xTaskGenericCreate+0x26>

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
   83f48:	88fb      	ldrh	r3, [r7, #6]
   83f4a:	4618      	mov	r0, r3
   83f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
   83f4e:	4b46      	ldr	r3, [pc, #280]	; (84068 <xTaskGenericCreate+0x148>)
   83f50:	4798      	blx	r3
   83f52:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
   83f54:	69bb      	ldr	r3, [r7, #24]
   83f56:	2b00      	cmp	r3, #0
   83f58:	d06d      	beq.n	84036 <xTaskGenericCreate+0x116>
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
   83f5a:	69bb      	ldr	r3, [r7, #24]
   83f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   83f5e:	88fb      	ldrh	r3, [r7, #6]
   83f60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   83f64:	3b01      	subs	r3, #1
   83f66:	009b      	lsls	r3, r3, #2
   83f68:	4413      	add	r3, r2
   83f6a:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   83f6c:	697b      	ldr	r3, [r7, #20]
   83f6e:	f023 0307 	bic.w	r3, r3, #7
   83f72:	617b      	str	r3, [r7, #20]

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   83f74:	697b      	ldr	r3, [r7, #20]
   83f76:	f003 0307 	and.w	r3, r3, #7
   83f7a:	2b00      	cmp	r3, #0
   83f7c:	d002      	beq.n	83f84 <xTaskGenericCreate+0x64>
   83f7e:	4b39      	ldr	r3, [pc, #228]	; (84064 <xTaskGenericCreate+0x144>)
   83f80:	4798      	blx	r3
   83f82:	e7fe      	b.n	83f82 <xTaskGenericCreate+0x62>
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
   83f84:	88fb      	ldrh	r3, [r7, #6]
   83f86:	9300      	str	r3, [sp, #0]
   83f88:	69b8      	ldr	r0, [r7, #24]
   83f8a:	68b9      	ldr	r1, [r7, #8]
   83f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   83f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   83f90:	4c36      	ldr	r4, [pc, #216]	; (8406c <xTaskGenericCreate+0x14c>)
   83f92:	47a0      	blx	r4
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   83f94:	6978      	ldr	r0, [r7, #20]
   83f96:	68f9      	ldr	r1, [r7, #12]
   83f98:	683a      	ldr	r2, [r7, #0]
   83f9a:	4b35      	ldr	r3, [pc, #212]	; (84070 <xTaskGenericCreate+0x150>)
   83f9c:	4798      	blx	r3
   83f9e:	4602      	mov	r2, r0
   83fa0:	69bb      	ldr	r3, [r7, #24]
   83fa2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
   83fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83fa6:	2b00      	cmp	r3, #0
   83fa8:	d002      	beq.n	83fb0 <xTaskGenericCreate+0x90>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   83faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   83fac:	69ba      	ldr	r2, [r7, #24]
   83fae:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
   83fb0:	4b30      	ldr	r3, [pc, #192]	; (84074 <xTaskGenericCreate+0x154>)
   83fb2:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   83fb4:	4b30      	ldr	r3, [pc, #192]	; (84078 <xTaskGenericCreate+0x158>)
   83fb6:	681b      	ldr	r3, [r3, #0]
   83fb8:	1c5a      	adds	r2, r3, #1
   83fba:	4b2f      	ldr	r3, [pc, #188]	; (84078 <xTaskGenericCreate+0x158>)
   83fbc:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   83fbe:	4b2f      	ldr	r3, [pc, #188]	; (8407c <xTaskGenericCreate+0x15c>)
   83fc0:	681b      	ldr	r3, [r3, #0]
   83fc2:	2b00      	cmp	r3, #0
   83fc4:	d109      	bne.n	83fda <xTaskGenericCreate+0xba>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   83fc6:	4b2d      	ldr	r3, [pc, #180]	; (8407c <xTaskGenericCreate+0x15c>)
   83fc8:	69ba      	ldr	r2, [r7, #24]
   83fca:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   83fcc:	4b2a      	ldr	r3, [pc, #168]	; (84078 <xTaskGenericCreate+0x158>)
   83fce:	681b      	ldr	r3, [r3, #0]
   83fd0:	2b01      	cmp	r3, #1
   83fd2:	d10f      	bne.n	83ff4 <xTaskGenericCreate+0xd4>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
   83fd4:	4b2a      	ldr	r3, [pc, #168]	; (84080 <xTaskGenericCreate+0x160>)
   83fd6:	4798      	blx	r3
   83fd8:	e00c      	b.n	83ff4 <xTaskGenericCreate+0xd4>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   83fda:	4b2a      	ldr	r3, [pc, #168]	; (84084 <xTaskGenericCreate+0x164>)
   83fdc:	681b      	ldr	r3, [r3, #0]
   83fde:	2b00      	cmp	r3, #0
   83fe0:	d108      	bne.n	83ff4 <xTaskGenericCreate+0xd4>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   83fe2:	4b26      	ldr	r3, [pc, #152]	; (8407c <xTaskGenericCreate+0x15c>)
   83fe4:	681b      	ldr	r3, [r3, #0]
   83fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   83fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   83fea:	429a      	cmp	r2, r3
   83fec:	d802      	bhi.n	83ff4 <xTaskGenericCreate+0xd4>
					{
						pxCurrentTCB = pxNewTCB;
   83fee:	4b23      	ldr	r3, [pc, #140]	; (8407c <xTaskGenericCreate+0x15c>)
   83ff0:	69ba      	ldr	r2, [r7, #24]
   83ff2:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
   83ff4:	4b24      	ldr	r3, [pc, #144]	; (84088 <xTaskGenericCreate+0x168>)
   83ff6:	681b      	ldr	r3, [r3, #0]
   83ff8:	1c5a      	adds	r2, r3, #1
   83ffa:	4b23      	ldr	r3, [pc, #140]	; (84088 <xTaskGenericCreate+0x168>)
   83ffc:	601a      	str	r2, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
   83ffe:	69bb      	ldr	r3, [r7, #24]
   84000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84002:	2201      	movs	r2, #1
   84004:	409a      	lsls	r2, r3
   84006:	4b21      	ldr	r3, [pc, #132]	; (8408c <xTaskGenericCreate+0x16c>)
   84008:	681b      	ldr	r3, [r3, #0]
   8400a:	431a      	orrs	r2, r3
   8400c:	4b1f      	ldr	r3, [pc, #124]	; (8408c <xTaskGenericCreate+0x16c>)
   8400e:	601a      	str	r2, [r3, #0]
   84010:	69bb      	ldr	r3, [r7, #24]
   84012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84014:	4613      	mov	r3, r2
   84016:	009b      	lsls	r3, r3, #2
   84018:	4413      	add	r3, r2
   8401a:	009b      	lsls	r3, r3, #2
   8401c:	4a1c      	ldr	r2, [pc, #112]	; (84090 <xTaskGenericCreate+0x170>)
   8401e:	441a      	add	r2, r3
   84020:	69bb      	ldr	r3, [r7, #24]
   84022:	3304      	adds	r3, #4
   84024:	4610      	mov	r0, r2
   84026:	4619      	mov	r1, r3
   84028:	4b1a      	ldr	r3, [pc, #104]	; (84094 <xTaskGenericCreate+0x174>)
   8402a:	4798      	blx	r3

			xReturn = pdPASS;
   8402c:	2301      	movs	r3, #1
   8402e:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   84030:	4b19      	ldr	r3, [pc, #100]	; (84098 <xTaskGenericCreate+0x178>)
   84032:	4798      	blx	r3
   84034:	e002      	b.n	8403c <xTaskGenericCreate+0x11c>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   84036:	f04f 33ff 	mov.w	r3, #4294967295
   8403a:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
   8403c:	69fb      	ldr	r3, [r7, #28]
   8403e:	2b01      	cmp	r3, #1
   84040:	d10b      	bne.n	8405a <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
   84042:	4b10      	ldr	r3, [pc, #64]	; (84084 <xTaskGenericCreate+0x164>)
   84044:	681b      	ldr	r3, [r3, #0]
   84046:	2b00      	cmp	r3, #0
   84048:	d007      	beq.n	8405a <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8404a:	4b0c      	ldr	r3, [pc, #48]	; (8407c <xTaskGenericCreate+0x15c>)
   8404c:	681b      	ldr	r3, [r3, #0]
   8404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   84052:	429a      	cmp	r2, r3
   84054:	d201      	bcs.n	8405a <xTaskGenericCreate+0x13a>
			{
				taskYIELD_IF_USING_PREEMPTION();
   84056:	4b11      	ldr	r3, [pc, #68]	; (8409c <xTaskGenericCreate+0x17c>)
   84058:	4798      	blx	r3
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
   8405a:	69fb      	ldr	r3, [r7, #28]
}
   8405c:	4618      	mov	r0, r3
   8405e:	3724      	adds	r7, #36	; 0x24
   84060:	46bd      	mov	sp, r7
   84062:	bd90      	pop	{r4, r7, pc}
   84064:	000831ad 	.word	0x000831ad
   84068:	00084b1d 	.word	0x00084b1d
   8406c:	00084909 	.word	0x00084909
   84070:	00082f89 	.word	0x00082f89
   84074:	00083131 	.word	0x00083131
   84078:	2007a5ec 	.word	0x2007a5ec
   8407c:	2007a514 	.word	0x2007a514
   84080:	000849a1 	.word	0x000849a1
   84084:	2007a5f8 	.word	0x2007a5f8
   84088:	2007a608 	.word	0x2007a608
   8408c:	2007a5f4 	.word	0x2007a5f4
   84090:	2007a518 	.word	0x2007a518
   84094:	00082e7d 	.word	0x00082e7d
   84098:	00083175 	.word	0x00083175
   8409c:	00083111 	.word	0x00083111

000840a0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
   840a0:	b580      	push	{r7, lr}
   840a2:	b086      	sub	sp, #24
   840a4:	af00      	add	r7, sp, #0
   840a6:	6078      	str	r0, [r7, #4]
   840a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
   840aa:	2300      	movs	r3, #0
   840ac:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
   840ae:	687b      	ldr	r3, [r7, #4]
   840b0:	2b00      	cmp	r3, #0
   840b2:	d102      	bne.n	840ba <vTaskDelayUntil+0x1a>
   840b4:	4b2f      	ldr	r3, [pc, #188]	; (84174 <vTaskDelayUntil+0xd4>)
   840b6:	4798      	blx	r3
   840b8:	e7fe      	b.n	840b8 <vTaskDelayUntil+0x18>
		configASSERT( ( xTimeIncrement > 0U ) );
   840ba:	683b      	ldr	r3, [r7, #0]
   840bc:	2b00      	cmp	r3, #0
   840be:	d102      	bne.n	840c6 <vTaskDelayUntil+0x26>
   840c0:	4b2c      	ldr	r3, [pc, #176]	; (84174 <vTaskDelayUntil+0xd4>)
   840c2:	4798      	blx	r3
   840c4:	e7fe      	b.n	840c4 <vTaskDelayUntil+0x24>
		configASSERT( uxSchedulerSuspended == 0 );
   840c6:	4b2c      	ldr	r3, [pc, #176]	; (84178 <vTaskDelayUntil+0xd8>)
   840c8:	681b      	ldr	r3, [r3, #0]
   840ca:	2b00      	cmp	r3, #0
   840cc:	d002      	beq.n	840d4 <vTaskDelayUntil+0x34>
   840ce:	4b29      	ldr	r3, [pc, #164]	; (84174 <vTaskDelayUntil+0xd4>)
   840d0:	4798      	blx	r3
   840d2:	e7fe      	b.n	840d2 <vTaskDelayUntil+0x32>

		vTaskSuspendAll();
   840d4:	4b29      	ldr	r3, [pc, #164]	; (8417c <vTaskDelayUntil+0xdc>)
   840d6:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   840d8:	4b29      	ldr	r3, [pc, #164]	; (84180 <vTaskDelayUntil+0xe0>)
   840da:	681b      	ldr	r3, [r3, #0]
   840dc:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   840de:	687b      	ldr	r3, [r7, #4]
   840e0:	681a      	ldr	r2, [r3, #0]
   840e2:	683b      	ldr	r3, [r7, #0]
   840e4:	4413      	add	r3, r2
   840e6:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
   840e8:	687b      	ldr	r3, [r7, #4]
   840ea:	681a      	ldr	r2, [r3, #0]
   840ec:	693b      	ldr	r3, [r7, #16]
   840ee:	429a      	cmp	r2, r3
   840f0:	d90b      	bls.n	8410a <vTaskDelayUntil+0x6a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
   840f2:	687b      	ldr	r3, [r7, #4]
   840f4:	681a      	ldr	r2, [r3, #0]
   840f6:	68fb      	ldr	r3, [r7, #12]
   840f8:	429a      	cmp	r2, r3
   840fa:	d911      	bls.n	84120 <vTaskDelayUntil+0x80>
   840fc:	68fa      	ldr	r2, [r7, #12]
   840fe:	693b      	ldr	r3, [r7, #16]
   84100:	429a      	cmp	r2, r3
   84102:	d90d      	bls.n	84120 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   84104:	2301      	movs	r3, #1
   84106:	617b      	str	r3, [r7, #20]
   84108:	e00a      	b.n	84120 <vTaskDelayUntil+0x80>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
   8410a:	687b      	ldr	r3, [r7, #4]
   8410c:	681a      	ldr	r2, [r3, #0]
   8410e:	68fb      	ldr	r3, [r7, #12]
   84110:	429a      	cmp	r2, r3
   84112:	d803      	bhi.n	8411c <vTaskDelayUntil+0x7c>
   84114:	68fa      	ldr	r2, [r7, #12]
   84116:	693b      	ldr	r3, [r7, #16]
   84118:	429a      	cmp	r2, r3
   8411a:	d901      	bls.n	84120 <vTaskDelayUntil+0x80>
				{
					xShouldDelay = pdTRUE;
   8411c:	2301      	movs	r3, #1
   8411e:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   84120:	687b      	ldr	r3, [r7, #4]
   84122:	68fa      	ldr	r2, [r7, #12]
   84124:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
   84126:	697b      	ldr	r3, [r7, #20]
   84128:	2b00      	cmp	r3, #0
   8412a:	d017      	beq.n	8415c <vTaskDelayUntil+0xbc>
			{
				traceTASK_DELAY_UNTIL();

				/* Remove the task from the ready list before adding it to the
				blocked list as the same list item is used for both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   8412c:	4b15      	ldr	r3, [pc, #84]	; (84184 <vTaskDelayUntil+0xe4>)
   8412e:	681b      	ldr	r3, [r3, #0]
   84130:	3304      	adds	r3, #4
   84132:	4618      	mov	r0, r3
   84134:	4b14      	ldr	r3, [pc, #80]	; (84188 <vTaskDelayUntil+0xe8>)
   84136:	4798      	blx	r3
   84138:	4603      	mov	r3, r0
   8413a:	2b00      	cmp	r3, #0
   8413c:	d10b      	bne.n	84156 <vTaskDelayUntil+0xb6>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   8413e:	4b11      	ldr	r3, [pc, #68]	; (84184 <vTaskDelayUntil+0xe4>)
   84140:	681b      	ldr	r3, [r3, #0]
   84142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84144:	2201      	movs	r2, #1
   84146:	fa02 f303 	lsl.w	r3, r2, r3
   8414a:	43da      	mvns	r2, r3
   8414c:	4b0f      	ldr	r3, [pc, #60]	; (8418c <vTaskDelayUntil+0xec>)
   8414e:	681b      	ldr	r3, [r3, #0]
   84150:	401a      	ands	r2, r3
   84152:	4b0e      	ldr	r3, [pc, #56]	; (8418c <vTaskDelayUntil+0xec>)
   84154:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   84156:	68f8      	ldr	r0, [r7, #12]
   84158:	4b0d      	ldr	r3, [pc, #52]	; (84190 <vTaskDelayUntil+0xf0>)
   8415a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   8415c:	4b0d      	ldr	r3, [pc, #52]	; (84194 <vTaskDelayUntil+0xf4>)
   8415e:	4798      	blx	r3
   84160:	60b8      	str	r0, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   84162:	68bb      	ldr	r3, [r7, #8]
   84164:	2b00      	cmp	r3, #0
   84166:	d101      	bne.n	8416c <vTaskDelayUntil+0xcc>
		{
			portYIELD_WITHIN_API();
   84168:	4b0b      	ldr	r3, [pc, #44]	; (84198 <vTaskDelayUntil+0xf8>)
   8416a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   8416c:	3718      	adds	r7, #24
   8416e:	46bd      	mov	sp, r7
   84170:	bd80      	pop	{r7, pc}
   84172:	bf00      	nop
   84174:	000831ad 	.word	0x000831ad
   84178:	2007a60c 	.word	0x2007a60c
   8417c:	0008421d 	.word	0x0008421d
   84180:	2007a5f0 	.word	0x2007a5f0
   84184:	2007a514 	.word	0x2007a514
   84188:	00082f35 	.word	0x00082f35
   8418c:	2007a5f4 	.word	0x2007a5f4
   84190:	00084aad 	.word	0x00084aad
   84194:	00084239 	.word	0x00084239
   84198:	00083111 	.word	0x00083111

0008419c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   8419c:	b590      	push	{r4, r7, lr}
   8419e:	b087      	sub	sp, #28
   841a0:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
   841a2:	2300      	movs	r3, #0
   841a4:	9300      	str	r3, [sp, #0]
   841a6:	2300      	movs	r3, #0
   841a8:	9301      	str	r3, [sp, #4]
   841aa:	2300      	movs	r3, #0
   841ac:	9302      	str	r3, [sp, #8]
   841ae:	2300      	movs	r3, #0
   841b0:	9303      	str	r3, [sp, #12]
   841b2:	4812      	ldr	r0, [pc, #72]	; (841fc <vTaskStartScheduler+0x60>)
   841b4:	4912      	ldr	r1, [pc, #72]	; (84200 <vTaskStartScheduler+0x64>)
   841b6:	2282      	movs	r2, #130	; 0x82
   841b8:	2300      	movs	r3, #0
   841ba:	4c12      	ldr	r4, [pc, #72]	; (84204 <vTaskStartScheduler+0x68>)
   841bc:	47a0      	blx	r4
   841be:	6078      	str	r0, [r7, #4]
	}
	#endif /* INCLUDE_xTaskGetIdleTaskHandle */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   841c0:	687b      	ldr	r3, [r7, #4]
   841c2:	2b01      	cmp	r3, #1
   841c4:	d102      	bne.n	841cc <vTaskStartScheduler+0x30>
		{
			xReturn = xTimerCreateTimerTask();
   841c6:	4b10      	ldr	r3, [pc, #64]	; (84208 <vTaskStartScheduler+0x6c>)
   841c8:	4798      	blx	r3
   841ca:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   841cc:	687b      	ldr	r3, [r7, #4]
   841ce:	2b01      	cmp	r3, #1
   841d0:	d10a      	bne.n	841e8 <vTaskStartScheduler+0x4c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   841d2:	4b0e      	ldr	r3, [pc, #56]	; (8420c <vTaskStartScheduler+0x70>)
   841d4:	4798      	blx	r3
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xSchedulerRunning = pdTRUE;
   841d6:	4b0e      	ldr	r3, [pc, #56]	; (84210 <vTaskStartScheduler+0x74>)
   841d8:	2201      	movs	r2, #1
   841da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   841dc:	4b0d      	ldr	r3, [pc, #52]	; (84214 <vTaskStartScheduler+0x78>)
   841de:	2200      	movs	r2, #0
   841e0:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   841e2:	4b0d      	ldr	r3, [pc, #52]	; (84218 <vTaskStartScheduler+0x7c>)
   841e4:	4798      	blx	r3
   841e6:	e005      	b.n	841f4 <vTaskStartScheduler+0x58>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
   841e8:	687b      	ldr	r3, [r7, #4]
   841ea:	2b00      	cmp	r3, #0
   841ec:	d102      	bne.n	841f4 <vTaskStartScheduler+0x58>
   841ee:	4b07      	ldr	r3, [pc, #28]	; (8420c <vTaskStartScheduler+0x70>)
   841f0:	4798      	blx	r3
   841f2:	e7fe      	b.n	841f2 <vTaskStartScheduler+0x56>
	}
}
   841f4:	370c      	adds	r7, #12
   841f6:	46bd      	mov	sp, r7
   841f8:	bd90      	pop	{r4, r7, pc}
   841fa:	bf00      	nop
   841fc:	000848e1 	.word	0x000848e1
   84200:	00087074 	.word	0x00087074
   84204:	00083f21 	.word	0x00083f21
   84208:	00084e35 	.word	0x00084e35
   8420c:	000831ad 	.word	0x000831ad
   84210:	2007a5f8 	.word	0x2007a5f8
   84214:	2007a5f0 	.word	0x2007a5f0
   84218:	00083049 	.word	0x00083049

0008421c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   8421c:	b480      	push	{r7}
   8421e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   84220:	4b04      	ldr	r3, [pc, #16]	; (84234 <vTaskSuspendAll+0x18>)
   84222:	681b      	ldr	r3, [r3, #0]
   84224:	1c5a      	adds	r2, r3, #1
   84226:	4b03      	ldr	r3, [pc, #12]	; (84234 <vTaskSuspendAll+0x18>)
   84228:	601a      	str	r2, [r3, #0]
}
   8422a:	46bd      	mov	sp, r7
   8422c:	f85d 7b04 	ldr.w	r7, [sp], #4
   84230:	4770      	bx	lr
   84232:	bf00      	nop
   84234:	2007a60c 	.word	0x2007a60c

00084238 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   84238:	b580      	push	{r7, lr}
   8423a:	b082      	sub	sp, #8
   8423c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
   8423e:	2300      	movs	r3, #0
   84240:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   84242:	4b37      	ldr	r3, [pc, #220]	; (84320 <xTaskResumeAll+0xe8>)
   84244:	681b      	ldr	r3, [r3, #0]
   84246:	2b00      	cmp	r3, #0
   84248:	d102      	bne.n	84250 <xTaskResumeAll+0x18>
   8424a:	4b36      	ldr	r3, [pc, #216]	; (84324 <xTaskResumeAll+0xec>)
   8424c:	4798      	blx	r3
   8424e:	e7fe      	b.n	8424e <xTaskResumeAll+0x16>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   84250:	4b35      	ldr	r3, [pc, #212]	; (84328 <xTaskResumeAll+0xf0>)
   84252:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   84254:	4b32      	ldr	r3, [pc, #200]	; (84320 <xTaskResumeAll+0xe8>)
   84256:	681b      	ldr	r3, [r3, #0]
   84258:	1e5a      	subs	r2, r3, #1
   8425a:	4b31      	ldr	r3, [pc, #196]	; (84320 <xTaskResumeAll+0xe8>)
   8425c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   8425e:	4b30      	ldr	r3, [pc, #192]	; (84320 <xTaskResumeAll+0xe8>)
   84260:	681b      	ldr	r3, [r3, #0]
   84262:	2b00      	cmp	r3, #0
   84264:	d155      	bne.n	84312 <xTaskResumeAll+0xda>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   84266:	4b31      	ldr	r3, [pc, #196]	; (8432c <xTaskResumeAll+0xf4>)
   84268:	681b      	ldr	r3, [r3, #0]
   8426a:	2b00      	cmp	r3, #0
   8426c:	d051      	beq.n	84312 <xTaskResumeAll+0xda>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   8426e:	e02e      	b.n	842ce <xTaskResumeAll+0x96>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   84270:	4b2f      	ldr	r3, [pc, #188]	; (84330 <xTaskResumeAll+0xf8>)
   84272:	68db      	ldr	r3, [r3, #12]
   84274:	68db      	ldr	r3, [r3, #12]
   84276:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   84278:	683b      	ldr	r3, [r7, #0]
   8427a:	3318      	adds	r3, #24
   8427c:	4618      	mov	r0, r3
   8427e:	4b2d      	ldr	r3, [pc, #180]	; (84334 <xTaskResumeAll+0xfc>)
   84280:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84282:	683b      	ldr	r3, [r7, #0]
   84284:	3304      	adds	r3, #4
   84286:	4618      	mov	r0, r3
   84288:	4b2a      	ldr	r3, [pc, #168]	; (84334 <xTaskResumeAll+0xfc>)
   8428a:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   8428c:	683b      	ldr	r3, [r7, #0]
   8428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84290:	2201      	movs	r2, #1
   84292:	409a      	lsls	r2, r3
   84294:	4b28      	ldr	r3, [pc, #160]	; (84338 <xTaskResumeAll+0x100>)
   84296:	681b      	ldr	r3, [r3, #0]
   84298:	431a      	orrs	r2, r3
   8429a:	4b27      	ldr	r3, [pc, #156]	; (84338 <xTaskResumeAll+0x100>)
   8429c:	601a      	str	r2, [r3, #0]
   8429e:	683b      	ldr	r3, [r7, #0]
   842a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   842a2:	4613      	mov	r3, r2
   842a4:	009b      	lsls	r3, r3, #2
   842a6:	4413      	add	r3, r2
   842a8:	009b      	lsls	r3, r3, #2
   842aa:	4a24      	ldr	r2, [pc, #144]	; (8433c <xTaskResumeAll+0x104>)
   842ac:	441a      	add	r2, r3
   842ae:	683b      	ldr	r3, [r7, #0]
   842b0:	3304      	adds	r3, #4
   842b2:	4610      	mov	r0, r2
   842b4:	4619      	mov	r1, r3
   842b6:	4b22      	ldr	r3, [pc, #136]	; (84340 <xTaskResumeAll+0x108>)
   842b8:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   842ba:	683b      	ldr	r3, [r7, #0]
   842bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   842be:	4b21      	ldr	r3, [pc, #132]	; (84344 <xTaskResumeAll+0x10c>)
   842c0:	681b      	ldr	r3, [r3, #0]
   842c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   842c4:	429a      	cmp	r2, r3
   842c6:	d302      	bcc.n	842ce <xTaskResumeAll+0x96>
					{
						xYieldPending = pdTRUE;
   842c8:	4b1f      	ldr	r3, [pc, #124]	; (84348 <xTaskResumeAll+0x110>)
   842ca:	2201      	movs	r2, #1
   842cc:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   842ce:	4b18      	ldr	r3, [pc, #96]	; (84330 <xTaskResumeAll+0xf8>)
   842d0:	681b      	ldr	r3, [r3, #0]
   842d2:	2b00      	cmp	r3, #0
   842d4:	d1cc      	bne.n	84270 <xTaskResumeAll+0x38>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
   842d6:	4b1d      	ldr	r3, [pc, #116]	; (8434c <xTaskResumeAll+0x114>)
   842d8:	681b      	ldr	r3, [r3, #0]
   842da:	2b00      	cmp	r3, #0
   842dc:	d011      	beq.n	84302 <xTaskResumeAll+0xca>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   842de:	e00c      	b.n	842fa <xTaskResumeAll+0xc2>
					{
						if( xTaskIncrementTick() != pdFALSE )
   842e0:	4b1b      	ldr	r3, [pc, #108]	; (84350 <xTaskResumeAll+0x118>)
   842e2:	4798      	blx	r3
   842e4:	4603      	mov	r3, r0
   842e6:	2b00      	cmp	r3, #0
   842e8:	d002      	beq.n	842f0 <xTaskResumeAll+0xb8>
						{
							xYieldPending = pdTRUE;
   842ea:	4b17      	ldr	r3, [pc, #92]	; (84348 <xTaskResumeAll+0x110>)
   842ec:	2201      	movs	r2, #1
   842ee:	601a      	str	r2, [r3, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
   842f0:	4b16      	ldr	r3, [pc, #88]	; (8434c <xTaskResumeAll+0x114>)
   842f2:	681b      	ldr	r3, [r3, #0]
   842f4:	1e5a      	subs	r2, r3, #1
   842f6:	4b15      	ldr	r3, [pc, #84]	; (8434c <xTaskResumeAll+0x114>)
   842f8:	601a      	str	r2, [r3, #0]
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
   842fa:	4b14      	ldr	r3, [pc, #80]	; (8434c <xTaskResumeAll+0x114>)
   842fc:	681b      	ldr	r3, [r3, #0]
   842fe:	2b00      	cmp	r3, #0
   84300:	d1ee      	bne.n	842e0 <xTaskResumeAll+0xa8>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
   84302:	4b11      	ldr	r3, [pc, #68]	; (84348 <xTaskResumeAll+0x110>)
   84304:	681b      	ldr	r3, [r3, #0]
   84306:	2b01      	cmp	r3, #1
   84308:	d103      	bne.n	84312 <xTaskResumeAll+0xda>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   8430a:	2301      	movs	r3, #1
   8430c:	607b      	str	r3, [r7, #4]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   8430e:	4b11      	ldr	r3, [pc, #68]	; (84354 <xTaskResumeAll+0x11c>)
   84310:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   84312:	4b11      	ldr	r3, [pc, #68]	; (84358 <xTaskResumeAll+0x120>)
   84314:	4798      	blx	r3

	return xAlreadyYielded;
   84316:	687b      	ldr	r3, [r7, #4]
}
   84318:	4618      	mov	r0, r3
   8431a:	3708      	adds	r7, #8
   8431c:	46bd      	mov	sp, r7
   8431e:	bd80      	pop	{r7, pc}
   84320:	2007a60c 	.word	0x2007a60c
   84324:	000831ad 	.word	0x000831ad
   84328:	00083131 	.word	0x00083131
   8432c:	2007a5ec 	.word	0x2007a5ec
   84330:	2007a5ac 	.word	0x2007a5ac
   84334:	00082f35 	.word	0x00082f35
   84338:	2007a5f4 	.word	0x2007a5f4
   8433c:	2007a518 	.word	0x2007a518
   84340:	00082e7d 	.word	0x00082e7d
   84344:	2007a514 	.word	0x2007a514
   84348:	2007a600 	.word	0x2007a600
   8434c:	2007a5fc 	.word	0x2007a5fc
   84350:	00084389 	.word	0x00084389
   84354:	00083111 	.word	0x00083111
   84358:	00083175 	.word	0x00083175

0008435c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   8435c:	b580      	push	{r7, lr}
   8435e:	b082      	sub	sp, #8
   84360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   84362:	4b06      	ldr	r3, [pc, #24]	; (8437c <xTaskGetTickCount+0x20>)
   84364:	4798      	blx	r3
	{
		xTicks = xTickCount;
   84366:	4b06      	ldr	r3, [pc, #24]	; (84380 <xTaskGetTickCount+0x24>)
   84368:	681b      	ldr	r3, [r3, #0]
   8436a:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
   8436c:	4b05      	ldr	r3, [pc, #20]	; (84384 <xTaskGetTickCount+0x28>)
   8436e:	4798      	blx	r3

	return xTicks;
   84370:	687b      	ldr	r3, [r7, #4]
}
   84372:	4618      	mov	r0, r3
   84374:	3708      	adds	r7, #8
   84376:	46bd      	mov	sp, r7
   84378:	bd80      	pop	{r7, pc}
   8437a:	bf00      	nop
   8437c:	00083131 	.word	0x00083131
   84380:	2007a5f0 	.word	0x2007a5f0
   84384:	00083175 	.word	0x00083175

00084388 <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   84388:	b580      	push	{r7, lr}
   8438a:	b086      	sub	sp, #24
   8438c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   8438e:	2300      	movs	r3, #0
   84390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84392:	4b4d      	ldr	r3, [pc, #308]	; (844c8 <xTaskIncrementTick+0x140>)
   84394:	681b      	ldr	r3, [r3, #0]
   84396:	2b00      	cmp	r3, #0
   84398:	f040 8086 	bne.w	844a8 <xTaskIncrementTick+0x120>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
   8439c:	4b4b      	ldr	r3, [pc, #300]	; (844cc <xTaskIncrementTick+0x144>)
   8439e:	681b      	ldr	r3, [r3, #0]
   843a0:	1c5a      	adds	r2, r3, #1
   843a2:	4b4a      	ldr	r3, [pc, #296]	; (844cc <xTaskIncrementTick+0x144>)
   843a4:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
   843a6:	4b49      	ldr	r3, [pc, #292]	; (844cc <xTaskIncrementTick+0x144>)
   843a8:	681b      	ldr	r3, [r3, #0]
   843aa:	613b      	str	r3, [r7, #16]

			if( xConstTickCount == ( TickType_t ) 0U )
   843ac:	693b      	ldr	r3, [r7, #16]
   843ae:	2b00      	cmp	r3, #0
   843b0:	d118      	bne.n	843e4 <xTaskIncrementTick+0x5c>
			{
				taskSWITCH_DELAYED_LISTS();
   843b2:	4b47      	ldr	r3, [pc, #284]	; (844d0 <xTaskIncrementTick+0x148>)
   843b4:	681b      	ldr	r3, [r3, #0]
   843b6:	681b      	ldr	r3, [r3, #0]
   843b8:	2b00      	cmp	r3, #0
   843ba:	d002      	beq.n	843c2 <xTaskIncrementTick+0x3a>
   843bc:	4b45      	ldr	r3, [pc, #276]	; (844d4 <xTaskIncrementTick+0x14c>)
   843be:	4798      	blx	r3
   843c0:	e7fe      	b.n	843c0 <xTaskIncrementTick+0x38>
   843c2:	4b43      	ldr	r3, [pc, #268]	; (844d0 <xTaskIncrementTick+0x148>)
   843c4:	681b      	ldr	r3, [r3, #0]
   843c6:	60fb      	str	r3, [r7, #12]
   843c8:	4b43      	ldr	r3, [pc, #268]	; (844d8 <xTaskIncrementTick+0x150>)
   843ca:	681a      	ldr	r2, [r3, #0]
   843cc:	4b40      	ldr	r3, [pc, #256]	; (844d0 <xTaskIncrementTick+0x148>)
   843ce:	601a      	str	r2, [r3, #0]
   843d0:	4b41      	ldr	r3, [pc, #260]	; (844d8 <xTaskIncrementTick+0x150>)
   843d2:	68fa      	ldr	r2, [r7, #12]
   843d4:	601a      	str	r2, [r3, #0]
   843d6:	4b41      	ldr	r3, [pc, #260]	; (844dc <xTaskIncrementTick+0x154>)
   843d8:	681b      	ldr	r3, [r3, #0]
   843da:	1c5a      	adds	r2, r3, #1
   843dc:	4b3f      	ldr	r3, [pc, #252]	; (844dc <xTaskIncrementTick+0x154>)
   843de:	601a      	str	r2, [r3, #0]
   843e0:	4b3f      	ldr	r3, [pc, #252]	; (844e0 <xTaskIncrementTick+0x158>)
   843e2:	4798      	blx	r3

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further	down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
   843e4:	4b3f      	ldr	r3, [pc, #252]	; (844e4 <xTaskIncrementTick+0x15c>)
   843e6:	681b      	ldr	r3, [r3, #0]
   843e8:	693a      	ldr	r2, [r7, #16]
   843ea:	429a      	cmp	r2, r3
   843ec:	d34d      	bcc.n	8448a <xTaskIncrementTick+0x102>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   843ee:	4b38      	ldr	r3, [pc, #224]	; (844d0 <xTaskIncrementTick+0x148>)
   843f0:	681b      	ldr	r3, [r3, #0]
   843f2:	681b      	ldr	r3, [r3, #0]
   843f4:	2b00      	cmp	r3, #0
   843f6:	d101      	bne.n	843fc <xTaskIncrementTick+0x74>
   843f8:	2301      	movs	r3, #1
   843fa:	e000      	b.n	843fe <xTaskIncrementTick+0x76>
   843fc:	2300      	movs	r3, #0
   843fe:	2b00      	cmp	r3, #0
   84400:	d004      	beq.n	8440c <xTaskIncrementTick+0x84>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
   84402:	4b38      	ldr	r3, [pc, #224]	; (844e4 <xTaskIncrementTick+0x15c>)
   84404:	f04f 32ff 	mov.w	r2, #4294967295
   84408:	601a      	str	r2, [r3, #0]
						break;
   8440a:	e03e      	b.n	8448a <xTaskIncrementTick+0x102>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   8440c:	4b30      	ldr	r3, [pc, #192]	; (844d0 <xTaskIncrementTick+0x148>)
   8440e:	681b      	ldr	r3, [r3, #0]
   84410:	68db      	ldr	r3, [r3, #12]
   84412:	68db      	ldr	r3, [r3, #12]
   84414:	60bb      	str	r3, [r7, #8]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   84416:	68bb      	ldr	r3, [r7, #8]
   84418:	685b      	ldr	r3, [r3, #4]
   8441a:	607b      	str	r3, [r7, #4]

						if( xConstTickCount < xItemValue )
   8441c:	693a      	ldr	r2, [r7, #16]
   8441e:	687b      	ldr	r3, [r7, #4]
   84420:	429a      	cmp	r2, r3
   84422:	d203      	bcs.n	8442c <xTaskIncrementTick+0xa4>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
   84424:	4b2f      	ldr	r3, [pc, #188]	; (844e4 <xTaskIncrementTick+0x15c>)
   84426:	687a      	ldr	r2, [r7, #4]
   84428:	601a      	str	r2, [r3, #0]
							break;
   8442a:	e02e      	b.n	8448a <xTaskIncrementTick+0x102>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   8442c:	68bb      	ldr	r3, [r7, #8]
   8442e:	3304      	adds	r3, #4
   84430:	4618      	mov	r0, r3
   84432:	4b2d      	ldr	r3, [pc, #180]	; (844e8 <xTaskIncrementTick+0x160>)
   84434:	4798      	blx	r3

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   84436:	68bb      	ldr	r3, [r7, #8]
   84438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8443a:	2b00      	cmp	r3, #0
   8443c:	d004      	beq.n	84448 <xTaskIncrementTick+0xc0>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   8443e:	68bb      	ldr	r3, [r7, #8]
   84440:	3318      	adds	r3, #24
   84442:	4618      	mov	r0, r3
   84444:	4b28      	ldr	r3, [pc, #160]	; (844e8 <xTaskIncrementTick+0x160>)
   84446:	4798      	blx	r3
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
   84448:	68bb      	ldr	r3, [r7, #8]
   8444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8444c:	2201      	movs	r2, #1
   8444e:	409a      	lsls	r2, r3
   84450:	4b26      	ldr	r3, [pc, #152]	; (844ec <xTaskIncrementTick+0x164>)
   84452:	681b      	ldr	r3, [r3, #0]
   84454:	431a      	orrs	r2, r3
   84456:	4b25      	ldr	r3, [pc, #148]	; (844ec <xTaskIncrementTick+0x164>)
   84458:	601a      	str	r2, [r3, #0]
   8445a:	68bb      	ldr	r3, [r7, #8]
   8445c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8445e:	4613      	mov	r3, r2
   84460:	009b      	lsls	r3, r3, #2
   84462:	4413      	add	r3, r2
   84464:	009b      	lsls	r3, r3, #2
   84466:	4a22      	ldr	r2, [pc, #136]	; (844f0 <xTaskIncrementTick+0x168>)
   84468:	441a      	add	r2, r3
   8446a:	68bb      	ldr	r3, [r7, #8]
   8446c:	3304      	adds	r3, #4
   8446e:	4610      	mov	r0, r2
   84470:	4619      	mov	r1, r3
   84472:	4b20      	ldr	r3, [pc, #128]	; (844f4 <xTaskIncrementTick+0x16c>)
   84474:	4798      	blx	r3
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   84476:	68bb      	ldr	r3, [r7, #8]
   84478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8447a:	4b1f      	ldr	r3, [pc, #124]	; (844f8 <xTaskIncrementTick+0x170>)
   8447c:	681b      	ldr	r3, [r3, #0]
   8447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84480:	429a      	cmp	r2, r3
   84482:	d301      	bcc.n	84488 <xTaskIncrementTick+0x100>
							{
								xSwitchRequired = pdTRUE;
   84484:	2301      	movs	r3, #1
   84486:	617b      	str	r3, [r7, #20]
								mtCOVERAGE_TEST_MARKER();
							}
						}
						#endif /* configUSE_PREEMPTION */
					}
				}
   84488:	e7b1      	b.n	843ee <xTaskIncrementTick+0x66>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   8448a:	4b1b      	ldr	r3, [pc, #108]	; (844f8 <xTaskIncrementTick+0x170>)
   8448c:	681b      	ldr	r3, [r3, #0]
   8448e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84490:	4917      	ldr	r1, [pc, #92]	; (844f0 <xTaskIncrementTick+0x168>)
   84492:	4613      	mov	r3, r2
   84494:	009b      	lsls	r3, r3, #2
   84496:	4413      	add	r3, r2
   84498:	009b      	lsls	r3, r3, #2
   8449a:	440b      	add	r3, r1
   8449c:	681b      	ldr	r3, [r3, #0]
   8449e:	2b01      	cmp	r3, #1
   844a0:	d907      	bls.n	844b2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
   844a2:	2301      	movs	r3, #1
   844a4:	617b      	str	r3, [r7, #20]
   844a6:	e004      	b.n	844b2 <xTaskIncrementTick+0x12a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   844a8:	4b14      	ldr	r3, [pc, #80]	; (844fc <xTaskIncrementTick+0x174>)
   844aa:	681b      	ldr	r3, [r3, #0]
   844ac:	1c5a      	adds	r2, r3, #1
   844ae:	4b13      	ldr	r3, [pc, #76]	; (844fc <xTaskIncrementTick+0x174>)
   844b0:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   844b2:	4b13      	ldr	r3, [pc, #76]	; (84500 <xTaskIncrementTick+0x178>)
   844b4:	681b      	ldr	r3, [r3, #0]
   844b6:	2b00      	cmp	r3, #0
   844b8:	d001      	beq.n	844be <xTaskIncrementTick+0x136>
		{
			xSwitchRequired = pdTRUE;
   844ba:	2301      	movs	r3, #1
   844bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   844be:	697b      	ldr	r3, [r7, #20]
}
   844c0:	4618      	mov	r0, r3
   844c2:	3718      	adds	r7, #24
   844c4:	46bd      	mov	sp, r7
   844c6:	bd80      	pop	{r7, pc}
   844c8:	2007a60c 	.word	0x2007a60c
   844cc:	2007a5f0 	.word	0x2007a5f0
   844d0:	2007a5a4 	.word	0x2007a5a4
   844d4:	000831ad 	.word	0x000831ad
   844d8:	2007a5a8 	.word	0x2007a5a8
   844dc:	2007a604 	.word	0x2007a604
   844e0:	00084bb1 	.word	0x00084bb1
   844e4:	20070008 	.word	0x20070008
   844e8:	00082f35 	.word	0x00082f35
   844ec:	2007a5f4 	.word	0x2007a5f4
   844f0:	2007a518 	.word	0x2007a518
   844f4:	00082e7d 	.word	0x00082e7d
   844f8:	2007a514 	.word	0x2007a514
   844fc:	2007a5fc 	.word	0x2007a5fc
   84500:	2007a600 	.word	0x2007a600

00084504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   84504:	b580      	push	{r7, lr}
   84506:	b084      	sub	sp, #16
   84508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   8450a:	4b34      	ldr	r3, [pc, #208]	; (845dc <vTaskSwitchContext+0xd8>)
   8450c:	681b      	ldr	r3, [r3, #0]
   8450e:	2b00      	cmp	r3, #0
   84510:	d003      	beq.n	8451a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   84512:	4b33      	ldr	r3, [pc, #204]	; (845e0 <vTaskSwitchContext+0xdc>)
   84514:	2201      	movs	r2, #1
   84516:	601a      	str	r2, [r3, #0]
   84518:	e05c      	b.n	845d4 <vTaskSwitchContext+0xd0>
	}
	else
	{
		xYieldPending = pdFALSE;
   8451a:	4b31      	ldr	r3, [pc, #196]	; (845e0 <vTaskSwitchContext+0xdc>)
   8451c:	2200      	movs	r2, #0
   8451e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
   84520:	4b30      	ldr	r3, [pc, #192]	; (845e4 <vTaskSwitchContext+0xe0>)
   84522:	681b      	ldr	r3, [r3, #0]
   84524:	681a      	ldr	r2, [r3, #0]
   84526:	4b2f      	ldr	r3, [pc, #188]	; (845e4 <vTaskSwitchContext+0xe0>)
   84528:	681b      	ldr	r3, [r3, #0]
   8452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8452c:	429a      	cmp	r2, r3
   8452e:	d808      	bhi.n	84542 <vTaskSwitchContext+0x3e>
   84530:	4b2c      	ldr	r3, [pc, #176]	; (845e4 <vTaskSwitchContext+0xe0>)
   84532:	681a      	ldr	r2, [r3, #0]
   84534:	4b2b      	ldr	r3, [pc, #172]	; (845e4 <vTaskSwitchContext+0xe0>)
   84536:	681b      	ldr	r3, [r3, #0]
   84538:	3334      	adds	r3, #52	; 0x34
   8453a:	4610      	mov	r0, r2
   8453c:	4619      	mov	r1, r3
   8453e:	4b2a      	ldr	r3, [pc, #168]	; (845e8 <vTaskSwitchContext+0xe4>)
   84540:	4798      	blx	r3
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
   84542:	4b28      	ldr	r3, [pc, #160]	; (845e4 <vTaskSwitchContext+0xe0>)
   84544:	681b      	ldr	r3, [r3, #0]
   84546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84548:	4618      	mov	r0, r3
   8454a:	4928      	ldr	r1, [pc, #160]	; (845ec <vTaskSwitchContext+0xe8>)
   8454c:	2214      	movs	r2, #20
   8454e:	4b28      	ldr	r3, [pc, #160]	; (845f0 <vTaskSwitchContext+0xec>)
   84550:	4798      	blx	r3
   84552:	4603      	mov	r3, r0
   84554:	2b00      	cmp	r3, #0
   84556:	d008      	beq.n	8456a <vTaskSwitchContext+0x66>
   84558:	4b22      	ldr	r3, [pc, #136]	; (845e4 <vTaskSwitchContext+0xe0>)
   8455a:	681a      	ldr	r2, [r3, #0]
   8455c:	4b21      	ldr	r3, [pc, #132]	; (845e4 <vTaskSwitchContext+0xe0>)
   8455e:	681b      	ldr	r3, [r3, #0]
   84560:	3334      	adds	r3, #52	; 0x34
   84562:	4610      	mov	r0, r2
   84564:	4619      	mov	r1, r3
   84566:	4b20      	ldr	r3, [pc, #128]	; (845e8 <vTaskSwitchContext+0xe4>)
   84568:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8456a:	4b22      	ldr	r3, [pc, #136]	; (845f4 <vTaskSwitchContext+0xf0>)
   8456c:	681b      	ldr	r3, [r3, #0]
   8456e:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
   84570:	687b      	ldr	r3, [r7, #4]
   84572:	fab3 f383 	clz	r3, r3
   84576:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
   84578:	78fb      	ldrb	r3, [r7, #3]
   8457a:	f1c3 031f 	rsb	r3, r3, #31
   8457e:	60fb      	str	r3, [r7, #12]
   84580:	491d      	ldr	r1, [pc, #116]	; (845f8 <vTaskSwitchContext+0xf4>)
   84582:	68fa      	ldr	r2, [r7, #12]
   84584:	4613      	mov	r3, r2
   84586:	009b      	lsls	r3, r3, #2
   84588:	4413      	add	r3, r2
   8458a:	009b      	lsls	r3, r3, #2
   8458c:	440b      	add	r3, r1
   8458e:	681b      	ldr	r3, [r3, #0]
   84590:	2b00      	cmp	r3, #0
   84592:	d102      	bne.n	8459a <vTaskSwitchContext+0x96>
   84594:	4b19      	ldr	r3, [pc, #100]	; (845fc <vTaskSwitchContext+0xf8>)
   84596:	4798      	blx	r3
   84598:	e7fe      	b.n	84598 <vTaskSwitchContext+0x94>
   8459a:	68fa      	ldr	r2, [r7, #12]
   8459c:	4613      	mov	r3, r2
   8459e:	009b      	lsls	r3, r3, #2
   845a0:	4413      	add	r3, r2
   845a2:	009b      	lsls	r3, r3, #2
   845a4:	4a14      	ldr	r2, [pc, #80]	; (845f8 <vTaskSwitchContext+0xf4>)
   845a6:	4413      	add	r3, r2
   845a8:	60bb      	str	r3, [r7, #8]
   845aa:	68bb      	ldr	r3, [r7, #8]
   845ac:	685b      	ldr	r3, [r3, #4]
   845ae:	685a      	ldr	r2, [r3, #4]
   845b0:	68bb      	ldr	r3, [r7, #8]
   845b2:	605a      	str	r2, [r3, #4]
   845b4:	68bb      	ldr	r3, [r7, #8]
   845b6:	685a      	ldr	r2, [r3, #4]
   845b8:	68bb      	ldr	r3, [r7, #8]
   845ba:	3308      	adds	r3, #8
   845bc:	429a      	cmp	r2, r3
   845be:	d104      	bne.n	845ca <vTaskSwitchContext+0xc6>
   845c0:	68bb      	ldr	r3, [r7, #8]
   845c2:	685b      	ldr	r3, [r3, #4]
   845c4:	685a      	ldr	r2, [r3, #4]
   845c6:	68bb      	ldr	r3, [r7, #8]
   845c8:	605a      	str	r2, [r3, #4]
   845ca:	68bb      	ldr	r3, [r7, #8]
   845cc:	685b      	ldr	r3, [r3, #4]
   845ce:	68da      	ldr	r2, [r3, #12]
   845d0:	4b04      	ldr	r3, [pc, #16]	; (845e4 <vTaskSwitchContext+0xe0>)
   845d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   845d4:	3710      	adds	r7, #16
   845d6:	46bd      	mov	sp, r7
   845d8:	bd80      	pop	{r7, pc}
   845da:	bf00      	nop
   845dc:	2007a60c 	.word	0x2007a60c
   845e0:	2007a600 	.word	0x2007a600
   845e4:	2007a514 	.word	0x2007a514
   845e8:	000865c9 	.word	0x000865c9
   845ec:	0008707c 	.word	0x0008707c
   845f0:	00086c3d 	.word	0x00086c3d
   845f4:	2007a5f4 	.word	0x2007a5f4
   845f8:	2007a518 	.word	0x2007a518
   845fc:	000831ad 	.word	0x000831ad

00084600 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   84600:	b580      	push	{r7, lr}
   84602:	b084      	sub	sp, #16
   84604:	af00      	add	r7, sp, #0
   84606:	6078      	str	r0, [r7, #4]
   84608:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;

	configASSERT( pxEventList );
   8460a:	687b      	ldr	r3, [r7, #4]
   8460c:	2b00      	cmp	r3, #0
   8460e:	d102      	bne.n	84616 <vTaskPlaceOnEventList+0x16>
   84610:	4b1a      	ldr	r3, [pc, #104]	; (8467c <vTaskPlaceOnEventList+0x7c>)
   84612:	4798      	blx	r3
   84614:	e7fe      	b.n	84614 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   84616:	4b1a      	ldr	r3, [pc, #104]	; (84680 <vTaskPlaceOnEventList+0x80>)
   84618:	681b      	ldr	r3, [r3, #0]
   8461a:	3318      	adds	r3, #24
   8461c:	6878      	ldr	r0, [r7, #4]
   8461e:	4619      	mov	r1, r3
   84620:	4b18      	ldr	r3, [pc, #96]	; (84684 <vTaskPlaceOnEventList+0x84>)
   84622:	4798      	blx	r3

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84624:	4b16      	ldr	r3, [pc, #88]	; (84680 <vTaskPlaceOnEventList+0x80>)
   84626:	681b      	ldr	r3, [r3, #0]
   84628:	3304      	adds	r3, #4
   8462a:	4618      	mov	r0, r3
   8462c:	4b16      	ldr	r3, [pc, #88]	; (84688 <vTaskPlaceOnEventList+0x88>)
   8462e:	4798      	blx	r3
   84630:	4603      	mov	r3, r0
   84632:	2b00      	cmp	r3, #0
   84634:	d10b      	bne.n	8464e <vTaskPlaceOnEventList+0x4e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   84636:	4b12      	ldr	r3, [pc, #72]	; (84680 <vTaskPlaceOnEventList+0x80>)
   84638:	681b      	ldr	r3, [r3, #0]
   8463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8463c:	2201      	movs	r2, #1
   8463e:	fa02 f303 	lsl.w	r3, r2, r3
   84642:	43da      	mvns	r2, r3
   84644:	4b11      	ldr	r3, [pc, #68]	; (8468c <vTaskPlaceOnEventList+0x8c>)
   84646:	681b      	ldr	r3, [r3, #0]
   84648:	401a      	ands	r2, r3
   8464a:	4b10      	ldr	r3, [pc, #64]	; (8468c <vTaskPlaceOnEventList+0x8c>)
   8464c:	601a      	str	r2, [r3, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8464e:	683b      	ldr	r3, [r7, #0]
   84650:	f1b3 3fff 	cmp.w	r3, #4294967295
   84654:	d107      	bne.n	84666 <vTaskPlaceOnEventList+0x66>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84656:	4b0a      	ldr	r3, [pc, #40]	; (84680 <vTaskPlaceOnEventList+0x80>)
   84658:	681b      	ldr	r3, [r3, #0]
   8465a:	3304      	adds	r3, #4
   8465c:	480c      	ldr	r0, [pc, #48]	; (84690 <vTaskPlaceOnEventList+0x90>)
   8465e:	4619      	mov	r1, r3
   84660:	4b0c      	ldr	r3, [pc, #48]	; (84694 <vTaskPlaceOnEventList+0x94>)
   84662:	4798      	blx	r3
   84664:	e007      	b.n	84676 <vTaskPlaceOnEventList+0x76>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
   84666:	4b0c      	ldr	r3, [pc, #48]	; (84698 <vTaskPlaceOnEventList+0x98>)
   84668:	681a      	ldr	r2, [r3, #0]
   8466a:	683b      	ldr	r3, [r7, #0]
   8466c:	4413      	add	r3, r2
   8466e:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   84670:	68f8      	ldr	r0, [r7, #12]
   84672:	4b0a      	ldr	r3, [pc, #40]	; (8469c <vTaskPlaceOnEventList+0x9c>)
   84674:	4798      	blx	r3
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   84676:	3710      	adds	r7, #16
   84678:	46bd      	mov	sp, r7
   8467a:	bd80      	pop	{r7, pc}
   8467c:	000831ad 	.word	0x000831ad
   84680:	2007a514 	.word	0x2007a514
   84684:	00082ec5 	.word	0x00082ec5
   84688:	00082f35 	.word	0x00082f35
   8468c:	2007a5f4 	.word	0x2007a5f4
   84690:	2007a5d8 	.word	0x2007a5d8
   84694:	00082e7d 	.word	0x00082e7d
   84698:	2007a5f0 	.word	0x2007a5f0
   8469c:	00084aad 	.word	0x00084aad

000846a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, const TickType_t xTicksToWait )
	{
   846a0:	b580      	push	{r7, lr}
   846a2:	b084      	sub	sp, #16
   846a4:	af00      	add	r7, sp, #0
   846a6:	6078      	str	r0, [r7, #4]
   846a8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;

		configASSERT( pxEventList );
   846aa:	687b      	ldr	r3, [r7, #4]
   846ac:	2b00      	cmp	r3, #0
   846ae:	d102      	bne.n	846b6 <vTaskPlaceOnEventListRestricted+0x16>
   846b0:	4b14      	ldr	r3, [pc, #80]	; (84704 <vTaskPlaceOnEventListRestricted+0x64>)
   846b2:	4798      	blx	r3
   846b4:	e7fe      	b.n	846b4 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   846b6:	4b14      	ldr	r3, [pc, #80]	; (84708 <vTaskPlaceOnEventListRestricted+0x68>)
   846b8:	681b      	ldr	r3, [r3, #0]
   846ba:	3318      	adds	r3, #24
   846bc:	6878      	ldr	r0, [r7, #4]
   846be:	4619      	mov	r1, r3
   846c0:	4b12      	ldr	r3, [pc, #72]	; (8470c <vTaskPlaceOnEventListRestricted+0x6c>)
   846c2:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   846c4:	4b10      	ldr	r3, [pc, #64]	; (84708 <vTaskPlaceOnEventListRestricted+0x68>)
   846c6:	681b      	ldr	r3, [r3, #0]
   846c8:	3304      	adds	r3, #4
   846ca:	4618      	mov	r0, r3
   846cc:	4b10      	ldr	r3, [pc, #64]	; (84710 <vTaskPlaceOnEventListRestricted+0x70>)
   846ce:	4798      	blx	r3
   846d0:	4603      	mov	r3, r0
   846d2:	2b00      	cmp	r3, #0
   846d4:	d10b      	bne.n	846ee <vTaskPlaceOnEventListRestricted+0x4e>
		{
			/* The current task must be in a ready list, so there is no need to
			check, and the port reset macro can be called directly. */
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
   846d6:	4b0c      	ldr	r3, [pc, #48]	; (84708 <vTaskPlaceOnEventListRestricted+0x68>)
   846d8:	681b      	ldr	r3, [r3, #0]
   846da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   846dc:	2201      	movs	r2, #1
   846de:	fa02 f303 	lsl.w	r3, r2, r3
   846e2:	43da      	mvns	r2, r3
   846e4:	4b0b      	ldr	r3, [pc, #44]	; (84714 <vTaskPlaceOnEventListRestricted+0x74>)
   846e6:	681b      	ldr	r3, [r3, #0]
   846e8:	401a      	ands	r2, r3
   846ea:	4b0a      	ldr	r3, [pc, #40]	; (84714 <vTaskPlaceOnEventListRestricted+0x74>)
   846ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   846ee:	4b0a      	ldr	r3, [pc, #40]	; (84718 <vTaskPlaceOnEventListRestricted+0x78>)
   846f0:	681a      	ldr	r2, [r3, #0]
   846f2:	683b      	ldr	r3, [r7, #0]
   846f4:	4413      	add	r3, r2
   846f6:	60fb      	str	r3, [r7, #12]

		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   846f8:	68f8      	ldr	r0, [r7, #12]
   846fa:	4b08      	ldr	r3, [pc, #32]	; (8471c <vTaskPlaceOnEventListRestricted+0x7c>)
   846fc:	4798      	blx	r3
	}
   846fe:	3710      	adds	r7, #16
   84700:	46bd      	mov	sp, r7
   84702:	bd80      	pop	{r7, pc}
   84704:	000831ad 	.word	0x000831ad
   84708:	2007a514 	.word	0x2007a514
   8470c:	00082e7d 	.word	0x00082e7d
   84710:	00082f35 	.word	0x00082f35
   84714:	2007a5f4 	.word	0x2007a5f4
   84718:	2007a5f0 	.word	0x2007a5f0
   8471c:	00084aad 	.word	0x00084aad

00084720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   84720:	b580      	push	{r7, lr}
   84722:	b084      	sub	sp, #16
   84724:	af00      	add	r7, sp, #0
   84726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   84728:	687b      	ldr	r3, [r7, #4]
   8472a:	68db      	ldr	r3, [r3, #12]
   8472c:	68db      	ldr	r3, [r3, #12]
   8472e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   84730:	68bb      	ldr	r3, [r7, #8]
   84732:	2b00      	cmp	r3, #0
   84734:	d102      	bne.n	8473c <xTaskRemoveFromEventList+0x1c>
   84736:	4b21      	ldr	r3, [pc, #132]	; (847bc <xTaskRemoveFromEventList+0x9c>)
   84738:	4798      	blx	r3
   8473a:	e7fe      	b.n	8473a <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8473c:	68bb      	ldr	r3, [r7, #8]
   8473e:	3318      	adds	r3, #24
   84740:	4618      	mov	r0, r3
   84742:	4b1f      	ldr	r3, [pc, #124]	; (847c0 <xTaskRemoveFromEventList+0xa0>)
   84744:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84746:	4b1f      	ldr	r3, [pc, #124]	; (847c4 <xTaskRemoveFromEventList+0xa4>)
   84748:	681b      	ldr	r3, [r3, #0]
   8474a:	2b00      	cmp	r3, #0
   8474c:	d11c      	bne.n	84788 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8474e:	68bb      	ldr	r3, [r7, #8]
   84750:	3304      	adds	r3, #4
   84752:	4618      	mov	r0, r3
   84754:	4b1a      	ldr	r3, [pc, #104]	; (847c0 <xTaskRemoveFromEventList+0xa0>)
   84756:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   84758:	68bb      	ldr	r3, [r7, #8]
   8475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8475c:	2201      	movs	r2, #1
   8475e:	409a      	lsls	r2, r3
   84760:	4b19      	ldr	r3, [pc, #100]	; (847c8 <xTaskRemoveFromEventList+0xa8>)
   84762:	681b      	ldr	r3, [r3, #0]
   84764:	431a      	orrs	r2, r3
   84766:	4b18      	ldr	r3, [pc, #96]	; (847c8 <xTaskRemoveFromEventList+0xa8>)
   84768:	601a      	str	r2, [r3, #0]
   8476a:	68bb      	ldr	r3, [r7, #8]
   8476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   8476e:	4613      	mov	r3, r2
   84770:	009b      	lsls	r3, r3, #2
   84772:	4413      	add	r3, r2
   84774:	009b      	lsls	r3, r3, #2
   84776:	4a15      	ldr	r2, [pc, #84]	; (847cc <xTaskRemoveFromEventList+0xac>)
   84778:	441a      	add	r2, r3
   8477a:	68bb      	ldr	r3, [r7, #8]
   8477c:	3304      	adds	r3, #4
   8477e:	4610      	mov	r0, r2
   84780:	4619      	mov	r1, r3
   84782:	4b13      	ldr	r3, [pc, #76]	; (847d0 <xTaskRemoveFromEventList+0xb0>)
   84784:	4798      	blx	r3
   84786:	e005      	b.n	84794 <xTaskRemoveFromEventList+0x74>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   84788:	68bb      	ldr	r3, [r7, #8]
   8478a:	3318      	adds	r3, #24
   8478c:	4811      	ldr	r0, [pc, #68]	; (847d4 <xTaskRemoveFromEventList+0xb4>)
   8478e:	4619      	mov	r1, r3
   84790:	4b0f      	ldr	r3, [pc, #60]	; (847d0 <xTaskRemoveFromEventList+0xb0>)
   84792:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   84794:	68bb      	ldr	r3, [r7, #8]
   84796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84798:	4b0f      	ldr	r3, [pc, #60]	; (847d8 <xTaskRemoveFromEventList+0xb8>)
   8479a:	681b      	ldr	r3, [r3, #0]
   8479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8479e:	429a      	cmp	r2, r3
   847a0:	d905      	bls.n	847ae <xTaskRemoveFromEventList+0x8e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   847a2:	2301      	movs	r3, #1
   847a4:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   847a6:	4b0d      	ldr	r3, [pc, #52]	; (847dc <xTaskRemoveFromEventList+0xbc>)
   847a8:	2201      	movs	r2, #1
   847aa:	601a      	str	r2, [r3, #0]
   847ac:	e001      	b.n	847b2 <xTaskRemoveFromEventList+0x92>
	}
	else
	{
		xReturn = pdFALSE;
   847ae:	2300      	movs	r3, #0
   847b0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   847b2:	68fb      	ldr	r3, [r7, #12]
}
   847b4:	4618      	mov	r0, r3
   847b6:	3710      	adds	r7, #16
   847b8:	46bd      	mov	sp, r7
   847ba:	bd80      	pop	{r7, pc}
   847bc:	000831ad 	.word	0x000831ad
   847c0:	00082f35 	.word	0x00082f35
   847c4:	2007a60c 	.word	0x2007a60c
   847c8:	2007a5f4 	.word	0x2007a5f4
   847cc:	2007a518 	.word	0x2007a518
   847d0:	00082e7d 	.word	0x00082e7d
   847d4:	2007a5ac 	.word	0x2007a5ac
   847d8:	2007a514 	.word	0x2007a514
   847dc:	2007a600 	.word	0x2007a600

000847e0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   847e0:	b580      	push	{r7, lr}
   847e2:	b082      	sub	sp, #8
   847e4:	af00      	add	r7, sp, #0
   847e6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   847e8:	687b      	ldr	r3, [r7, #4]
   847ea:	2b00      	cmp	r3, #0
   847ec:	d102      	bne.n	847f4 <vTaskSetTimeOutState+0x14>
   847ee:	4b07      	ldr	r3, [pc, #28]	; (8480c <vTaskSetTimeOutState+0x2c>)
   847f0:	4798      	blx	r3
   847f2:	e7fe      	b.n	847f2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   847f4:	4b06      	ldr	r3, [pc, #24]	; (84810 <vTaskSetTimeOutState+0x30>)
   847f6:	681a      	ldr	r2, [r3, #0]
   847f8:	687b      	ldr	r3, [r7, #4]
   847fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   847fc:	4b05      	ldr	r3, [pc, #20]	; (84814 <vTaskSetTimeOutState+0x34>)
   847fe:	681a      	ldr	r2, [r3, #0]
   84800:	687b      	ldr	r3, [r7, #4]
   84802:	605a      	str	r2, [r3, #4]
}
   84804:	3708      	adds	r7, #8
   84806:	46bd      	mov	sp, r7
   84808:	bd80      	pop	{r7, pc}
   8480a:	bf00      	nop
   8480c:	000831ad 	.word	0x000831ad
   84810:	2007a604 	.word	0x2007a604
   84814:	2007a5f0 	.word	0x2007a5f0

00084818 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   84818:	b580      	push	{r7, lr}
   8481a:	b084      	sub	sp, #16
   8481c:	af00      	add	r7, sp, #0
   8481e:	6078      	str	r0, [r7, #4]
   84820:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   84822:	687b      	ldr	r3, [r7, #4]
   84824:	2b00      	cmp	r3, #0
   84826:	d102      	bne.n	8482e <xTaskCheckForTimeOut+0x16>
   84828:	4b21      	ldr	r3, [pc, #132]	; (848b0 <xTaskCheckForTimeOut+0x98>)
   8482a:	4798      	blx	r3
   8482c:	e7fe      	b.n	8482c <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
   8482e:	683b      	ldr	r3, [r7, #0]
   84830:	2b00      	cmp	r3, #0
   84832:	d102      	bne.n	8483a <xTaskCheckForTimeOut+0x22>
   84834:	4b1e      	ldr	r3, [pc, #120]	; (848b0 <xTaskCheckForTimeOut+0x98>)
   84836:	4798      	blx	r3
   84838:	e7fe      	b.n	84838 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
   8483a:	4b1e      	ldr	r3, [pc, #120]	; (848b4 <xTaskCheckForTimeOut+0x9c>)
   8483c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   8483e:	4b1e      	ldr	r3, [pc, #120]	; (848b8 <xTaskCheckForTimeOut+0xa0>)
   84840:	681b      	ldr	r3, [r3, #0]
   84842:	60bb      	str	r3, [r7, #8]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   84844:	683b      	ldr	r3, [r7, #0]
   84846:	681b      	ldr	r3, [r3, #0]
   84848:	f1b3 3fff 	cmp.w	r3, #4294967295
   8484c:	d102      	bne.n	84854 <xTaskCheckForTimeOut+0x3c>
			{
				xReturn = pdFALSE;
   8484e:	2300      	movs	r3, #0
   84850:	60fb      	str	r3, [r7, #12]
   84852:	e026      	b.n	848a2 <xTaskCheckForTimeOut+0x8a>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   84854:	687b      	ldr	r3, [r7, #4]
   84856:	681a      	ldr	r2, [r3, #0]
   84858:	4b18      	ldr	r3, [pc, #96]	; (848bc <xTaskCheckForTimeOut+0xa4>)
   8485a:	681b      	ldr	r3, [r3, #0]
   8485c:	429a      	cmp	r2, r3
   8485e:	d007      	beq.n	84870 <xTaskCheckForTimeOut+0x58>
   84860:	687b      	ldr	r3, [r7, #4]
   84862:	685a      	ldr	r2, [r3, #4]
   84864:	68bb      	ldr	r3, [r7, #8]
   84866:	429a      	cmp	r2, r3
   84868:	d802      	bhi.n	84870 <xTaskCheckForTimeOut+0x58>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   8486a:	2301      	movs	r3, #1
   8486c:	60fb      	str	r3, [r7, #12]
   8486e:	e018      	b.n	848a2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
   84870:	687b      	ldr	r3, [r7, #4]
   84872:	685b      	ldr	r3, [r3, #4]
   84874:	68ba      	ldr	r2, [r7, #8]
   84876:	1ad2      	subs	r2, r2, r3
   84878:	683b      	ldr	r3, [r7, #0]
   8487a:	681b      	ldr	r3, [r3, #0]
   8487c:	429a      	cmp	r2, r3
   8487e:	d20e      	bcs.n	8489e <xTaskCheckForTimeOut+0x86>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
   84880:	683b      	ldr	r3, [r7, #0]
   84882:	681a      	ldr	r2, [r3, #0]
   84884:	687b      	ldr	r3, [r7, #4]
   84886:	6859      	ldr	r1, [r3, #4]
   84888:	68bb      	ldr	r3, [r7, #8]
   8488a:	1acb      	subs	r3, r1, r3
   8488c:	441a      	add	r2, r3
   8488e:	683b      	ldr	r3, [r7, #0]
   84890:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
   84892:	6878      	ldr	r0, [r7, #4]
   84894:	4b0a      	ldr	r3, [pc, #40]	; (848c0 <xTaskCheckForTimeOut+0xa8>)
   84896:	4798      	blx	r3
			xReturn = pdFALSE;
   84898:	2300      	movs	r3, #0
   8489a:	60fb      	str	r3, [r7, #12]
   8489c:	e001      	b.n	848a2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			xReturn = pdTRUE;
   8489e:	2301      	movs	r3, #1
   848a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   848a2:	4b08      	ldr	r3, [pc, #32]	; (848c4 <xTaskCheckForTimeOut+0xac>)
   848a4:	4798      	blx	r3

	return xReturn;
   848a6:	68fb      	ldr	r3, [r7, #12]
}
   848a8:	4618      	mov	r0, r3
   848aa:	3710      	adds	r7, #16
   848ac:	46bd      	mov	sp, r7
   848ae:	bd80      	pop	{r7, pc}
   848b0:	000831ad 	.word	0x000831ad
   848b4:	00083131 	.word	0x00083131
   848b8:	2007a5f0 	.word	0x2007a5f0
   848bc:	2007a604 	.word	0x2007a604
   848c0:	000847e1 	.word	0x000847e1
   848c4:	00083175 	.word	0x00083175

000848c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   848c8:	b480      	push	{r7}
   848ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   848cc:	4b03      	ldr	r3, [pc, #12]	; (848dc <vTaskMissedYield+0x14>)
   848ce:	2201      	movs	r2, #1
   848d0:	601a      	str	r2, [r3, #0]
}
   848d2:	46bd      	mov	sp, r7
   848d4:	f85d 7b04 	ldr.w	r7, [sp], #4
   848d8:	4770      	bx	lr
   848da:	bf00      	nop
   848dc:	2007a600 	.word	0x2007a600

000848e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   848e0:	b580      	push	{r7, lr}
   848e2:	b082      	sub	sp, #8
   848e4:	af00      	add	r7, sp, #0
   848e6:	6078      	str	r0, [r7, #4]
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
   848e8:	4b04      	ldr	r3, [pc, #16]	; (848fc <prvIdleTask+0x1c>)
   848ea:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   848ec:	4b04      	ldr	r3, [pc, #16]	; (84900 <prvIdleTask+0x20>)
   848ee:	681b      	ldr	r3, [r3, #0]
   848f0:	2b01      	cmp	r3, #1
   848f2:	d901      	bls.n	848f8 <prvIdleTask+0x18>
			{
				taskYIELD();
   848f4:	4b03      	ldr	r3, [pc, #12]	; (84904 <prvIdleTask+0x24>)
   848f6:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
   848f8:	e7f6      	b.n	848e8 <prvIdleTask+0x8>
   848fa:	bf00      	nop
   848fc:	00084a21 	.word	0x00084a21
   84900:	2007a518 	.word	0x2007a518
   84904:	00083111 	.word	0x00083111

00084908 <prvInitialiseTCBVariables>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
   84908:	b580      	push	{r7, lr}
   8490a:	b086      	sub	sp, #24
   8490c:	af00      	add	r7, sp, #0
   8490e:	60f8      	str	r0, [r7, #12]
   84910:	60b9      	str	r1, [r7, #8]
   84912:	607a      	str	r2, [r7, #4]
   84914:	603b      	str	r3, [r7, #0]
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   84916:	2300      	movs	r3, #0
   84918:	617b      	str	r3, [r7, #20]
   8491a:	e012      	b.n	84942 <prvInitialiseTCBVariables+0x3a>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
   8491c:	68ba      	ldr	r2, [r7, #8]
   8491e:	697b      	ldr	r3, [r7, #20]
   84920:	4413      	add	r3, r2
   84922:	781a      	ldrb	r2, [r3, #0]
   84924:	68f9      	ldr	r1, [r7, #12]
   84926:	697b      	ldr	r3, [r7, #20]
   84928:	440b      	add	r3, r1
   8492a:	3330      	adds	r3, #48	; 0x30
   8492c:	711a      	strb	r2, [r3, #4]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   8492e:	68ba      	ldr	r2, [r7, #8]
   84930:	697b      	ldr	r3, [r7, #20]
   84932:	4413      	add	r3, r2
   84934:	781b      	ldrb	r3, [r3, #0]
   84936:	2b00      	cmp	r3, #0
   84938:	d100      	bne.n	8493c <prvInitialiseTCBVariables+0x34>
		{
			break;
   8493a:	e005      	b.n	84948 <prvInitialiseTCBVariables+0x40>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   8493c:	697b      	ldr	r3, [r7, #20]
   8493e:	3301      	adds	r3, #1
   84940:	617b      	str	r3, [r7, #20]
   84942:	697b      	ldr	r3, [r7, #20]
   84944:	2b09      	cmp	r3, #9
   84946:	d9e9      	bls.n	8491c <prvInitialiseTCBVariables+0x14>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   84948:	68fb      	ldr	r3, [r7, #12]
   8494a:	2200      	movs	r2, #0
   8494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   84950:	687b      	ldr	r3, [r7, #4]
   84952:	2b04      	cmp	r3, #4
   84954:	d901      	bls.n	8495a <prvInitialiseTCBVariables+0x52>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   84956:	2304      	movs	r3, #4
   84958:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
   8495a:	68fb      	ldr	r3, [r7, #12]
   8495c:	687a      	ldr	r2, [r7, #4]
   8495e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   84960:	68fb      	ldr	r3, [r7, #12]
   84962:	687a      	ldr	r2, [r7, #4]
   84964:	641a      	str	r2, [r3, #64]	; 0x40
		pxTCB->uxMutexesHeld = 0;
   84966:	68fb      	ldr	r3, [r7, #12]
   84968:	2200      	movs	r2, #0
   8496a:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8496c:	68fb      	ldr	r3, [r7, #12]
   8496e:	3304      	adds	r3, #4
   84970:	4618      	mov	r0, r3
   84972:	4b0a      	ldr	r3, [pc, #40]	; (8499c <prvInitialiseTCBVariables+0x94>)
   84974:	4798      	blx	r3
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   84976:	68fb      	ldr	r3, [r7, #12]
   84978:	3318      	adds	r3, #24
   8497a:	4618      	mov	r0, r3
   8497c:	4b07      	ldr	r3, [pc, #28]	; (8499c <prvInitialiseTCBVariables+0x94>)
   8497e:	4798      	blx	r3

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   84980:	68fb      	ldr	r3, [r7, #12]
   84982:	68fa      	ldr	r2, [r7, #12]
   84984:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84986:	687b      	ldr	r3, [r7, #4]
   84988:	f1c3 0205 	rsb	r2, r3, #5
   8498c:	68fb      	ldr	r3, [r7, #12]
   8498e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   84990:	68fb      	ldr	r3, [r7, #12]
   84992:	68fa      	ldr	r2, [r7, #12]
   84994:	625a      	str	r2, [r3, #36]	; 0x24
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
   84996:	3718      	adds	r7, #24
   84998:	46bd      	mov	sp, r7
   8499a:	bd80      	pop	{r7, pc}
   8499c:	00082e65 	.word	0x00082e65

000849a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   849a0:	b580      	push	{r7, lr}
   849a2:	b082      	sub	sp, #8
   849a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   849a6:	2300      	movs	r3, #0
   849a8:	607b      	str	r3, [r7, #4]
   849aa:	e00c      	b.n	849c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   849ac:	687a      	ldr	r2, [r7, #4]
   849ae:	4613      	mov	r3, r2
   849b0:	009b      	lsls	r3, r3, #2
   849b2:	4413      	add	r3, r2
   849b4:	009b      	lsls	r3, r3, #2
   849b6:	4a11      	ldr	r2, [pc, #68]	; (849fc <prvInitialiseTaskLists+0x5c>)
   849b8:	4413      	add	r3, r2
   849ba:	4618      	mov	r0, r3
   849bc:	4b10      	ldr	r3, [pc, #64]	; (84a00 <prvInitialiseTaskLists+0x60>)
   849be:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   849c0:	687b      	ldr	r3, [r7, #4]
   849c2:	3301      	adds	r3, #1
   849c4:	607b      	str	r3, [r7, #4]
   849c6:	687b      	ldr	r3, [r7, #4]
   849c8:	2b04      	cmp	r3, #4
   849ca:	d9ef      	bls.n	849ac <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
   849cc:	480d      	ldr	r0, [pc, #52]	; (84a04 <prvInitialiseTaskLists+0x64>)
   849ce:	4b0c      	ldr	r3, [pc, #48]	; (84a00 <prvInitialiseTaskLists+0x60>)
   849d0:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   849d2:	480d      	ldr	r0, [pc, #52]	; (84a08 <prvInitialiseTaskLists+0x68>)
   849d4:	4b0a      	ldr	r3, [pc, #40]	; (84a00 <prvInitialiseTaskLists+0x60>)
   849d6:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   849d8:	480c      	ldr	r0, [pc, #48]	; (84a0c <prvInitialiseTaskLists+0x6c>)
   849da:	4b09      	ldr	r3, [pc, #36]	; (84a00 <prvInitialiseTaskLists+0x60>)
   849dc:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   849de:	480c      	ldr	r0, [pc, #48]	; (84a10 <prvInitialiseTaskLists+0x70>)
   849e0:	4b07      	ldr	r3, [pc, #28]	; (84a00 <prvInitialiseTaskLists+0x60>)
   849e2:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   849e4:	480b      	ldr	r0, [pc, #44]	; (84a14 <prvInitialiseTaskLists+0x74>)
   849e6:	4b06      	ldr	r3, [pc, #24]	; (84a00 <prvInitialiseTaskLists+0x60>)
   849e8:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   849ea:	4b0b      	ldr	r3, [pc, #44]	; (84a18 <prvInitialiseTaskLists+0x78>)
   849ec:	4a05      	ldr	r2, [pc, #20]	; (84a04 <prvInitialiseTaskLists+0x64>)
   849ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   849f0:	4b0a      	ldr	r3, [pc, #40]	; (84a1c <prvInitialiseTaskLists+0x7c>)
   849f2:	4a05      	ldr	r2, [pc, #20]	; (84a08 <prvInitialiseTaskLists+0x68>)
   849f4:	601a      	str	r2, [r3, #0]
}
   849f6:	3708      	adds	r7, #8
   849f8:	46bd      	mov	sp, r7
   849fa:	bd80      	pop	{r7, pc}
   849fc:	2007a518 	.word	0x2007a518
   84a00:	00082e25 	.word	0x00082e25
   84a04:	2007a57c 	.word	0x2007a57c
   84a08:	2007a590 	.word	0x2007a590
   84a0c:	2007a5ac 	.word	0x2007a5ac
   84a10:	2007a5c0 	.word	0x2007a5c0
   84a14:	2007a5d8 	.word	0x2007a5d8
   84a18:	2007a5a4 	.word	0x2007a5a4
   84a1c:	2007a5a8 	.word	0x2007a5a8

00084a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   84a20:	b580      	push	{r7, lr}
   84a22:	b082      	sub	sp, #8
   84a24:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84a26:	e028      	b.n	84a7a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
   84a28:	4b17      	ldr	r3, [pc, #92]	; (84a88 <prvCheckTasksWaitingTermination+0x68>)
   84a2a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   84a2c:	4b17      	ldr	r3, [pc, #92]	; (84a8c <prvCheckTasksWaitingTermination+0x6c>)
   84a2e:	681b      	ldr	r3, [r3, #0]
   84a30:	2b00      	cmp	r3, #0
   84a32:	bf14      	ite	ne
   84a34:	2300      	movne	r3, #0
   84a36:	2301      	moveq	r3, #1
   84a38:	b2db      	uxtb	r3, r3
   84a3a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
   84a3c:	4b14      	ldr	r3, [pc, #80]	; (84a90 <prvCheckTasksWaitingTermination+0x70>)
   84a3e:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   84a40:	687b      	ldr	r3, [r7, #4]
   84a42:	2b00      	cmp	r3, #0
   84a44:	d119      	bne.n	84a7a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
   84a46:	4b13      	ldr	r3, [pc, #76]	; (84a94 <prvCheckTasksWaitingTermination+0x74>)
   84a48:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   84a4a:	4b10      	ldr	r3, [pc, #64]	; (84a8c <prvCheckTasksWaitingTermination+0x6c>)
   84a4c:	68db      	ldr	r3, [r3, #12]
   84a4e:	68db      	ldr	r3, [r3, #12]
   84a50:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
   84a52:	683b      	ldr	r3, [r7, #0]
   84a54:	3304      	adds	r3, #4
   84a56:	4618      	mov	r0, r3
   84a58:	4b0f      	ldr	r3, [pc, #60]	; (84a98 <prvCheckTasksWaitingTermination+0x78>)
   84a5a:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   84a5c:	4b0f      	ldr	r3, [pc, #60]	; (84a9c <prvCheckTasksWaitingTermination+0x7c>)
   84a5e:	681b      	ldr	r3, [r3, #0]
   84a60:	1e5a      	subs	r2, r3, #1
   84a62:	4b0e      	ldr	r3, [pc, #56]	; (84a9c <prvCheckTasksWaitingTermination+0x7c>)
   84a64:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   84a66:	4b0e      	ldr	r3, [pc, #56]	; (84aa0 <prvCheckTasksWaitingTermination+0x80>)
   84a68:	681b      	ldr	r3, [r3, #0]
   84a6a:	1e5a      	subs	r2, r3, #1
   84a6c:	4b0c      	ldr	r3, [pc, #48]	; (84aa0 <prvCheckTasksWaitingTermination+0x80>)
   84a6e:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
   84a70:	4b0c      	ldr	r3, [pc, #48]	; (84aa4 <prvCheckTasksWaitingTermination+0x84>)
   84a72:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
   84a74:	6838      	ldr	r0, [r7, #0]
   84a76:	4b0c      	ldr	r3, [pc, #48]	; (84aa8 <prvCheckTasksWaitingTermination+0x88>)
   84a78:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
   84a7a:	4b09      	ldr	r3, [pc, #36]	; (84aa0 <prvCheckTasksWaitingTermination+0x80>)
   84a7c:	681b      	ldr	r3, [r3, #0]
   84a7e:	2b00      	cmp	r3, #0
   84a80:	d1d2      	bne.n	84a28 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
   84a82:	3708      	adds	r7, #8
   84a84:	46bd      	mov	sp, r7
   84a86:	bd80      	pop	{r7, pc}
   84a88:	0008421d 	.word	0x0008421d
   84a8c:	2007a5c0 	.word	0x2007a5c0
   84a90:	00084239 	.word	0x00084239
   84a94:	00083131 	.word	0x00083131
   84a98:	00082f35 	.word	0x00082f35
   84a9c:	2007a5ec 	.word	0x2007a5ec
   84aa0:	2007a5d4 	.word	0x2007a5d4
   84aa4:	00083175 	.word	0x00083175
   84aa8:	00084b8d 	.word	0x00084b8d

00084aac <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
   84aac:	b580      	push	{r7, lr}
   84aae:	b082      	sub	sp, #8
   84ab0:	af00      	add	r7, sp, #0
   84ab2:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   84ab4:	4b13      	ldr	r3, [pc, #76]	; (84b04 <prvAddCurrentTaskToDelayedList+0x58>)
   84ab6:	681b      	ldr	r3, [r3, #0]
   84ab8:	687a      	ldr	r2, [r7, #4]
   84aba:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
   84abc:	4b12      	ldr	r3, [pc, #72]	; (84b08 <prvAddCurrentTaskToDelayedList+0x5c>)
   84abe:	681b      	ldr	r3, [r3, #0]
   84ac0:	687a      	ldr	r2, [r7, #4]
   84ac2:	429a      	cmp	r2, r3
   84ac4:	d209      	bcs.n	84ada <prvAddCurrentTaskToDelayedList+0x2e>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84ac6:	4b11      	ldr	r3, [pc, #68]	; (84b0c <prvAddCurrentTaskToDelayedList+0x60>)
   84ac8:	681a      	ldr	r2, [r3, #0]
   84aca:	4b0e      	ldr	r3, [pc, #56]	; (84b04 <prvAddCurrentTaskToDelayedList+0x58>)
   84acc:	681b      	ldr	r3, [r3, #0]
   84ace:	3304      	adds	r3, #4
   84ad0:	4610      	mov	r0, r2
   84ad2:	4619      	mov	r1, r3
   84ad4:	4b0e      	ldr	r3, [pc, #56]	; (84b10 <prvAddCurrentTaskToDelayedList+0x64>)
   84ad6:	4798      	blx	r3
   84ad8:	e010      	b.n	84afc <prvAddCurrentTaskToDelayedList+0x50>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
   84ada:	4b0e      	ldr	r3, [pc, #56]	; (84b14 <prvAddCurrentTaskToDelayedList+0x68>)
   84adc:	681a      	ldr	r2, [r3, #0]
   84ade:	4b09      	ldr	r3, [pc, #36]	; (84b04 <prvAddCurrentTaskToDelayedList+0x58>)
   84ae0:	681b      	ldr	r3, [r3, #0]
   84ae2:	3304      	adds	r3, #4
   84ae4:	4610      	mov	r0, r2
   84ae6:	4619      	mov	r1, r3
   84ae8:	4b09      	ldr	r3, [pc, #36]	; (84b10 <prvAddCurrentTaskToDelayedList+0x64>)
   84aea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   84aec:	4b0a      	ldr	r3, [pc, #40]	; (84b18 <prvAddCurrentTaskToDelayedList+0x6c>)
   84aee:	681b      	ldr	r3, [r3, #0]
   84af0:	687a      	ldr	r2, [r7, #4]
   84af2:	429a      	cmp	r2, r3
   84af4:	d202      	bcs.n	84afc <prvAddCurrentTaskToDelayedList+0x50>
		{
			xNextTaskUnblockTime = xTimeToWake;
   84af6:	4b08      	ldr	r3, [pc, #32]	; (84b18 <prvAddCurrentTaskToDelayedList+0x6c>)
   84af8:	687a      	ldr	r2, [r7, #4]
   84afa:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
   84afc:	3708      	adds	r7, #8
   84afe:	46bd      	mov	sp, r7
   84b00:	bd80      	pop	{r7, pc}
   84b02:	bf00      	nop
   84b04:	2007a514 	.word	0x2007a514
   84b08:	2007a5f0 	.word	0x2007a5f0
   84b0c:	2007a5a8 	.word	0x2007a5a8
   84b10:	00082ec5 	.word	0x00082ec5
   84b14:	2007a5a4 	.word	0x2007a5a4
   84b18:	20070008 	.word	0x20070008

00084b1c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
   84b1c:	b580      	push	{r7, lr}
   84b1e:	b084      	sub	sp, #16
   84b20:	af00      	add	r7, sp, #0
   84b22:	4603      	mov	r3, r0
   84b24:	6039      	str	r1, [r7, #0]
   84b26:	80fb      	strh	r3, [r7, #6]
TCB_t *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
   84b28:	2048      	movs	r0, #72	; 0x48
   84b2a:	4b15      	ldr	r3, [pc, #84]	; (84b80 <prvAllocateTCBAndStack+0x64>)
   84b2c:	4798      	blx	r3
   84b2e:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
   84b30:	68fb      	ldr	r3, [r7, #12]
   84b32:	2b00      	cmp	r3, #0
   84b34:	d01f      	beq.n	84b76 <prvAllocateTCBAndStack+0x5a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84b36:	683b      	ldr	r3, [r7, #0]
   84b38:	2b00      	cmp	r3, #0
   84b3a:	d106      	bne.n	84b4a <prvAllocateTCBAndStack+0x2e>
   84b3c:	88fb      	ldrh	r3, [r7, #6]
   84b3e:	009b      	lsls	r3, r3, #2
   84b40:	4618      	mov	r0, r3
   84b42:	4b0f      	ldr	r3, [pc, #60]	; (84b80 <prvAllocateTCBAndStack+0x64>)
   84b44:	4798      	blx	r3
   84b46:	4603      	mov	r3, r0
   84b48:	e000      	b.n	84b4c <prvAllocateTCBAndStack+0x30>
   84b4a:	683b      	ldr	r3, [r7, #0]
   84b4c:	68fa      	ldr	r2, [r7, #12]
   84b4e:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   84b50:	68fb      	ldr	r3, [r7, #12]
   84b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84b54:	2b00      	cmp	r3, #0
   84b56:	d105      	bne.n	84b64 <prvAllocateTCBAndStack+0x48>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   84b58:	68f8      	ldr	r0, [r7, #12]
   84b5a:	4b0a      	ldr	r3, [pc, #40]	; (84b84 <prvAllocateTCBAndStack+0x68>)
   84b5c:	4798      	blx	r3
			pxNewTCB = NULL;
   84b5e:	2300      	movs	r3, #0
   84b60:	60fb      	str	r3, [r7, #12]
   84b62:	e008      	b.n	84b76 <prvAllocateTCBAndStack+0x5a>
		{
			/* Avoid dependency on memset() if it is not required. */
			#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
			{
				/* Just to help debugging. */
				( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
   84b64:	68fb      	ldr	r3, [r7, #12]
   84b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   84b68:	88fb      	ldrh	r3, [r7, #6]
   84b6a:	009b      	lsls	r3, r3, #2
   84b6c:	4610      	mov	r0, r2
   84b6e:	21a5      	movs	r1, #165	; 0xa5
   84b70:	461a      	mov	r2, r3
   84b72:	4b05      	ldr	r3, [pc, #20]	; (84b88 <prvAllocateTCBAndStack+0x6c>)
   84b74:	4798      	blx	r3
			}
			#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
		}
	}

	return pxNewTCB;
   84b76:	68fb      	ldr	r3, [r7, #12]
}
   84b78:	4618      	mov	r0, r3
   84b7a:	3710      	adds	r7, #16
   84b7c:	46bd      	mov	sp, r7
   84b7e:	bd80      	pop	{r7, pc}
   84b80:	000832d1 	.word	0x000832d1
   84b84:	00083449 	.word	0x00083449
   84b88:	00086d91 	.word	0x00086d91

00084b8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   84b8c:	b580      	push	{r7, lr}
   84b8e:	b082      	sub	sp, #8
   84b90:	af00      	add	r7, sp, #0
   84b92:	6078      	str	r0, [r7, #4]
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
   84b94:	687b      	ldr	r3, [r7, #4]
   84b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84b98:	4618      	mov	r0, r3
   84b9a:	4b04      	ldr	r3, [pc, #16]	; (84bac <prvDeleteTCB+0x20>)
   84b9c:	4798      	blx	r3
		vPortFree( pxTCB );
   84b9e:	6878      	ldr	r0, [r7, #4]
   84ba0:	4b02      	ldr	r3, [pc, #8]	; (84bac <prvDeleteTCB+0x20>)
   84ba2:	4798      	blx	r3
	}
   84ba4:	3708      	adds	r7, #8
   84ba6:	46bd      	mov	sp, r7
   84ba8:	bd80      	pop	{r7, pc}
   84baa:	bf00      	nop
   84bac:	00083449 	.word	0x00083449

00084bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   84bb0:	b480      	push	{r7}
   84bb2:	b083      	sub	sp, #12
   84bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   84bb6:	4b0e      	ldr	r3, [pc, #56]	; (84bf0 <prvResetNextTaskUnblockTime+0x40>)
   84bb8:	681b      	ldr	r3, [r3, #0]
   84bba:	681b      	ldr	r3, [r3, #0]
   84bbc:	2b00      	cmp	r3, #0
   84bbe:	d101      	bne.n	84bc4 <prvResetNextTaskUnblockTime+0x14>
   84bc0:	2301      	movs	r3, #1
   84bc2:	e000      	b.n	84bc6 <prvResetNextTaskUnblockTime+0x16>
   84bc4:	2300      	movs	r3, #0
   84bc6:	2b00      	cmp	r3, #0
   84bc8:	d004      	beq.n	84bd4 <prvResetNextTaskUnblockTime+0x24>
		/* The new current delayed list is empty.  Set
		xNextTaskUnblockTime to the maximum possible value so it is
		extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   84bca:	4b0a      	ldr	r3, [pc, #40]	; (84bf4 <prvResetNextTaskUnblockTime+0x44>)
   84bcc:	f04f 32ff 	mov.w	r2, #4294967295
   84bd0:	601a      	str	r2, [r3, #0]
   84bd2:	e008      	b.n	84be6 <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   84bd4:	4b06      	ldr	r3, [pc, #24]	; (84bf0 <prvResetNextTaskUnblockTime+0x40>)
   84bd6:	681b      	ldr	r3, [r3, #0]
   84bd8:	68db      	ldr	r3, [r3, #12]
   84bda:	68db      	ldr	r3, [r3, #12]
   84bdc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
   84bde:	687b      	ldr	r3, [r7, #4]
   84be0:	685a      	ldr	r2, [r3, #4]
   84be2:	4b04      	ldr	r3, [pc, #16]	; (84bf4 <prvResetNextTaskUnblockTime+0x44>)
   84be4:	601a      	str	r2, [r3, #0]
	}
}
   84be6:	370c      	adds	r7, #12
   84be8:	46bd      	mov	sp, r7
   84bea:	f85d 7b04 	ldr.w	r7, [sp], #4
   84bee:	4770      	bx	lr
   84bf0:	2007a5a4 	.word	0x2007a5a4
   84bf4:	20070008 	.word	0x20070008

00084bf8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   84bf8:	b480      	push	{r7}
   84bfa:	b083      	sub	sp, #12
   84bfc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   84bfe:	4b0b      	ldr	r3, [pc, #44]	; (84c2c <xTaskGetSchedulerState+0x34>)
   84c00:	681b      	ldr	r3, [r3, #0]
   84c02:	2b00      	cmp	r3, #0
   84c04:	d102      	bne.n	84c0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   84c06:	2301      	movs	r3, #1
   84c08:	607b      	str	r3, [r7, #4]
   84c0a:	e008      	b.n	84c1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   84c0c:	4b08      	ldr	r3, [pc, #32]	; (84c30 <xTaskGetSchedulerState+0x38>)
   84c0e:	681b      	ldr	r3, [r3, #0]
   84c10:	2b00      	cmp	r3, #0
   84c12:	d102      	bne.n	84c1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   84c14:	2302      	movs	r3, #2
   84c16:	607b      	str	r3, [r7, #4]
   84c18:	e001      	b.n	84c1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   84c1a:	2300      	movs	r3, #0
   84c1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   84c1e:	687b      	ldr	r3, [r7, #4]
	}
   84c20:	4618      	mov	r0, r3
   84c22:	370c      	adds	r7, #12
   84c24:	46bd      	mov	sp, r7
   84c26:	f85d 7b04 	ldr.w	r7, [sp], #4
   84c2a:	4770      	bx	lr
   84c2c:	2007a5f8 	.word	0x2007a5f8
   84c30:	2007a60c 	.word	0x2007a60c

00084c34 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   84c34:	b580      	push	{r7, lr}
   84c36:	b084      	sub	sp, #16
   84c38:	af00      	add	r7, sp, #0
   84c3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84c3c:	687b      	ldr	r3, [r7, #4]
   84c3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   84c40:	687b      	ldr	r3, [r7, #4]
   84c42:	2b00      	cmp	r3, #0
   84c44:	d062      	beq.n	84d0c <vTaskPriorityInherit+0xd8>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   84c46:	68fb      	ldr	r3, [r7, #12]
   84c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84c4a:	4b32      	ldr	r3, [pc, #200]	; (84d14 <vTaskPriorityInherit+0xe0>)
   84c4c:	681b      	ldr	r3, [r3, #0]
   84c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84c50:	429a      	cmp	r2, r3
   84c52:	d25b      	bcs.n	84d0c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   84c54:	68fb      	ldr	r3, [r7, #12]
   84c56:	699b      	ldr	r3, [r3, #24]
   84c58:	2b00      	cmp	r3, #0
   84c5a:	db06      	blt.n	84c6a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84c5c:	4b2d      	ldr	r3, [pc, #180]	; (84d14 <vTaskPriorityInherit+0xe0>)
   84c5e:	681b      	ldr	r3, [r3, #0]
   84c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84c62:	f1c3 0205 	rsb	r2, r3, #5
   84c66:	68fb      	ldr	r3, [r7, #12]
   84c68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   84c6a:	68fb      	ldr	r3, [r7, #12]
   84c6c:	6959      	ldr	r1, [r3, #20]
   84c6e:	68fb      	ldr	r3, [r7, #12]
   84c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84c72:	4613      	mov	r3, r2
   84c74:	009b      	lsls	r3, r3, #2
   84c76:	4413      	add	r3, r2
   84c78:	009b      	lsls	r3, r3, #2
   84c7a:	4a27      	ldr	r2, [pc, #156]	; (84d18 <vTaskPriorityInherit+0xe4>)
   84c7c:	4413      	add	r3, r2
   84c7e:	4299      	cmp	r1, r3
   84c80:	d101      	bne.n	84c86 <vTaskPriorityInherit+0x52>
   84c82:	2301      	movs	r3, #1
   84c84:	e000      	b.n	84c88 <vTaskPriorityInherit+0x54>
   84c86:	2300      	movs	r3, #0
   84c88:	2b00      	cmp	r3, #0
   84c8a:	d03a      	beq.n	84d02 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84c8c:	68fb      	ldr	r3, [r7, #12]
   84c8e:	3304      	adds	r3, #4
   84c90:	4618      	mov	r0, r3
   84c92:	4b22      	ldr	r3, [pc, #136]	; (84d1c <vTaskPriorityInherit+0xe8>)
   84c94:	4798      	blx	r3
   84c96:	4603      	mov	r3, r0
   84c98:	2b00      	cmp	r3, #0
   84c9a:	d115      	bne.n	84cc8 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84c9c:	68fb      	ldr	r3, [r7, #12]
   84c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ca0:	491d      	ldr	r1, [pc, #116]	; (84d18 <vTaskPriorityInherit+0xe4>)
   84ca2:	4613      	mov	r3, r2
   84ca4:	009b      	lsls	r3, r3, #2
   84ca6:	4413      	add	r3, r2
   84ca8:	009b      	lsls	r3, r3, #2
   84caa:	440b      	add	r3, r1
   84cac:	681b      	ldr	r3, [r3, #0]
   84cae:	2b00      	cmp	r3, #0
   84cb0:	d10a      	bne.n	84cc8 <vTaskPriorityInherit+0x94>
   84cb2:	68fb      	ldr	r3, [r7, #12]
   84cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84cb6:	2201      	movs	r2, #1
   84cb8:	fa02 f303 	lsl.w	r3, r2, r3
   84cbc:	43da      	mvns	r2, r3
   84cbe:	4b18      	ldr	r3, [pc, #96]	; (84d20 <vTaskPriorityInherit+0xec>)
   84cc0:	681b      	ldr	r3, [r3, #0]
   84cc2:	401a      	ands	r2, r3
   84cc4:	4b16      	ldr	r3, [pc, #88]	; (84d20 <vTaskPriorityInherit+0xec>)
   84cc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84cc8:	4b12      	ldr	r3, [pc, #72]	; (84d14 <vTaskPriorityInherit+0xe0>)
   84cca:	681b      	ldr	r3, [r3, #0]
   84ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84cce:	68fb      	ldr	r3, [r7, #12]
   84cd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
   84cd2:	68fb      	ldr	r3, [r7, #12]
   84cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84cd6:	2201      	movs	r2, #1
   84cd8:	409a      	lsls	r2, r3
   84cda:	4b11      	ldr	r3, [pc, #68]	; (84d20 <vTaskPriorityInherit+0xec>)
   84cdc:	681b      	ldr	r3, [r3, #0]
   84cde:	431a      	orrs	r2, r3
   84ce0:	4b0f      	ldr	r3, [pc, #60]	; (84d20 <vTaskPriorityInherit+0xec>)
   84ce2:	601a      	str	r2, [r3, #0]
   84ce4:	68fb      	ldr	r3, [r7, #12]
   84ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84ce8:	4613      	mov	r3, r2
   84cea:	009b      	lsls	r3, r3, #2
   84cec:	4413      	add	r3, r2
   84cee:	009b      	lsls	r3, r3, #2
   84cf0:	4a09      	ldr	r2, [pc, #36]	; (84d18 <vTaskPriorityInherit+0xe4>)
   84cf2:	441a      	add	r2, r3
   84cf4:	68fb      	ldr	r3, [r7, #12]
   84cf6:	3304      	adds	r3, #4
   84cf8:	4610      	mov	r0, r2
   84cfa:	4619      	mov	r1, r3
   84cfc:	4b09      	ldr	r3, [pc, #36]	; (84d24 <vTaskPriorityInherit+0xf0>)
   84cfe:	4798      	blx	r3
   84d00:	e004      	b.n	84d0c <vTaskPriorityInherit+0xd8>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   84d02:	4b04      	ldr	r3, [pc, #16]	; (84d14 <vTaskPriorityInherit+0xe0>)
   84d04:	681b      	ldr	r3, [r3, #0]
   84d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84d08:	68fb      	ldr	r3, [r7, #12]
   84d0a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   84d0c:	3710      	adds	r7, #16
   84d0e:	46bd      	mov	sp, r7
   84d10:	bd80      	pop	{r7, pc}
   84d12:	bf00      	nop
   84d14:	2007a514 	.word	0x2007a514
   84d18:	2007a518 	.word	0x2007a518
   84d1c:	00082f35 	.word	0x00082f35
   84d20:	2007a5f4 	.word	0x2007a5f4
   84d24:	00082e7d 	.word	0x00082e7d

00084d28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   84d28:	b580      	push	{r7, lr}
   84d2a:	b084      	sub	sp, #16
   84d2c:	af00      	add	r7, sp, #0
   84d2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   84d30:	687b      	ldr	r3, [r7, #4]
   84d32:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   84d34:	2300      	movs	r3, #0
   84d36:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   84d38:	687b      	ldr	r3, [r7, #4]
   84d3a:	2b00      	cmp	r3, #0
   84d3c:	d056      	beq.n	84dec <xTaskPriorityDisinherit+0xc4>
		{
			configASSERT( pxTCB->uxMutexesHeld );
   84d3e:	68bb      	ldr	r3, [r7, #8]
   84d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84d42:	2b00      	cmp	r3, #0
   84d44:	d102      	bne.n	84d4c <xTaskPriorityDisinherit+0x24>
   84d46:	4b2c      	ldr	r3, [pc, #176]	; (84df8 <xTaskPriorityDisinherit+0xd0>)
   84d48:	4798      	blx	r3
   84d4a:	e7fe      	b.n	84d4a <xTaskPriorityDisinherit+0x22>
			( pxTCB->uxMutexesHeld )--;
   84d4c:	68bb      	ldr	r3, [r7, #8]
   84d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84d50:	1e5a      	subs	r2, r3, #1
   84d52:	68bb      	ldr	r3, [r7, #8]
   84d54:	645a      	str	r2, [r3, #68]	; 0x44

			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   84d56:	68bb      	ldr	r3, [r7, #8]
   84d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84d5a:	68bb      	ldr	r3, [r7, #8]
   84d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   84d5e:	429a      	cmp	r2, r3
   84d60:	d044      	beq.n	84dec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   84d62:	68bb      	ldr	r3, [r7, #8]
   84d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   84d66:	2b00      	cmp	r3, #0
   84d68:	d140      	bne.n	84dec <xTaskPriorityDisinherit+0xc4>
				{
					/* The holding task must be the running task to be able to give
					the mutex back.  Remove the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
   84d6a:	68bb      	ldr	r3, [r7, #8]
   84d6c:	3304      	adds	r3, #4
   84d6e:	4618      	mov	r0, r3
   84d70:	4b22      	ldr	r3, [pc, #136]	; (84dfc <xTaskPriorityDisinherit+0xd4>)
   84d72:	4798      	blx	r3
   84d74:	4603      	mov	r3, r0
   84d76:	2b00      	cmp	r3, #0
   84d78:	d115      	bne.n	84da6 <xTaskPriorityDisinherit+0x7e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
   84d7a:	68bb      	ldr	r3, [r7, #8]
   84d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84d7e:	4920      	ldr	r1, [pc, #128]	; (84e00 <xTaskPriorityDisinherit+0xd8>)
   84d80:	4613      	mov	r3, r2
   84d82:	009b      	lsls	r3, r3, #2
   84d84:	4413      	add	r3, r2
   84d86:	009b      	lsls	r3, r3, #2
   84d88:	440b      	add	r3, r1
   84d8a:	681b      	ldr	r3, [r3, #0]
   84d8c:	2b00      	cmp	r3, #0
   84d8e:	d10a      	bne.n	84da6 <xTaskPriorityDisinherit+0x7e>
   84d90:	68bb      	ldr	r3, [r7, #8]
   84d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84d94:	2201      	movs	r2, #1
   84d96:	fa02 f303 	lsl.w	r3, r2, r3
   84d9a:	43da      	mvns	r2, r3
   84d9c:	4b19      	ldr	r3, [pc, #100]	; (84e04 <xTaskPriorityDisinherit+0xdc>)
   84d9e:	681b      	ldr	r3, [r3, #0]
   84da0:	401a      	ands	r2, r3
   84da2:	4b18      	ldr	r3, [pc, #96]	; (84e04 <xTaskPriorityDisinherit+0xdc>)
   84da4:	601a      	str	r2, [r3, #0]
					}

					/* Disinherit the priority before adding the task into the new
					ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   84da6:	68bb      	ldr	r3, [r7, #8]
   84da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   84daa:	68bb      	ldr	r3, [r7, #8]
   84dac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   84dae:	68bb      	ldr	r3, [r7, #8]
   84db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84db2:	f1c3 0205 	rsb	r2, r3, #5
   84db6:	68bb      	ldr	r3, [r7, #8]
   84db8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   84dba:	68bb      	ldr	r3, [r7, #8]
   84dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84dbe:	2201      	movs	r2, #1
   84dc0:	409a      	lsls	r2, r3
   84dc2:	4b10      	ldr	r3, [pc, #64]	; (84e04 <xTaskPriorityDisinherit+0xdc>)
   84dc4:	681b      	ldr	r3, [r3, #0]
   84dc6:	431a      	orrs	r2, r3
   84dc8:	4b0e      	ldr	r3, [pc, #56]	; (84e04 <xTaskPriorityDisinherit+0xdc>)
   84dca:	601a      	str	r2, [r3, #0]
   84dcc:	68bb      	ldr	r3, [r7, #8]
   84dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   84dd0:	4613      	mov	r3, r2
   84dd2:	009b      	lsls	r3, r3, #2
   84dd4:	4413      	add	r3, r2
   84dd6:	009b      	lsls	r3, r3, #2
   84dd8:	4a09      	ldr	r2, [pc, #36]	; (84e00 <xTaskPriorityDisinherit+0xd8>)
   84dda:	441a      	add	r2, r3
   84ddc:	68bb      	ldr	r3, [r7, #8]
   84dde:	3304      	adds	r3, #4
   84de0:	4610      	mov	r0, r2
   84de2:	4619      	mov	r1, r3
   84de4:	4b08      	ldr	r3, [pc, #32]	; (84e08 <xTaskPriorityDisinherit+0xe0>)
   84de6:	4798      	blx	r3

					/* Return true to indicate that a context switch is required.
					This is only actually required in the corner case whereby
					multiple mutexes were held and the mutexes were given back
					in an order different to that in which they were taken. */
					xReturn = pdTRUE;
   84de8:	2301      	movs	r3, #1
   84dea:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   84dec:	68fb      	ldr	r3, [r7, #12]
	}
   84dee:	4618      	mov	r0, r3
   84df0:	3710      	adds	r7, #16
   84df2:	46bd      	mov	sp, r7
   84df4:	bd80      	pop	{r7, pc}
   84df6:	bf00      	nop
   84df8:	000831ad 	.word	0x000831ad
   84dfc:	00082f35 	.word	0x00082f35
   84e00:	2007a518 	.word	0x2007a518
   84e04:	2007a5f4 	.word	0x2007a5f4
   84e08:	00082e7d 	.word	0x00082e7d

00084e0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   84e0c:	b480      	push	{r7}
   84e0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   84e10:	4b07      	ldr	r3, [pc, #28]	; (84e30 <pvTaskIncrementMutexHeldCount+0x24>)
   84e12:	681b      	ldr	r3, [r3, #0]
   84e14:	2b00      	cmp	r3, #0
   84e16:	d004      	beq.n	84e22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   84e18:	4b05      	ldr	r3, [pc, #20]	; (84e30 <pvTaskIncrementMutexHeldCount+0x24>)
   84e1a:	681b      	ldr	r3, [r3, #0]
   84e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   84e1e:	3201      	adds	r2, #1
   84e20:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
   84e22:	4b03      	ldr	r3, [pc, #12]	; (84e30 <pvTaskIncrementMutexHeldCount+0x24>)
   84e24:	681b      	ldr	r3, [r3, #0]
	}
   84e26:	4618      	mov	r0, r3
   84e28:	46bd      	mov	sp, r7
   84e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   84e2e:	4770      	bx	lr
   84e30:	2007a514 	.word	0x2007a514

00084e34 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   84e34:	b590      	push	{r4, r7, lr}
   84e36:	b087      	sub	sp, #28
   84e38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
   84e3a:	2300      	movs	r3, #0
   84e3c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   84e3e:	4b10      	ldr	r3, [pc, #64]	; (84e80 <xTimerCreateTimerTask+0x4c>)
   84e40:	4798      	blx	r3

	if( xTimerQueue != NULL )
   84e42:	4b10      	ldr	r3, [pc, #64]	; (84e84 <xTimerCreateTimerTask+0x50>)
   84e44:	681b      	ldr	r3, [r3, #0]
   84e46:	2b00      	cmp	r3, #0
   84e48:	d00f      	beq.n	84e6a <xTimerCreateTimerTask+0x36>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   84e4a:	2302      	movs	r3, #2
   84e4c:	9300      	str	r3, [sp, #0]
   84e4e:	2300      	movs	r3, #0
   84e50:	9301      	str	r3, [sp, #4]
   84e52:	2300      	movs	r3, #0
   84e54:	9302      	str	r3, [sp, #8]
   84e56:	2300      	movs	r3, #0
   84e58:	9303      	str	r3, [sp, #12]
   84e5a:	480b      	ldr	r0, [pc, #44]	; (84e88 <xTimerCreateTimerTask+0x54>)
   84e5c:	490b      	ldr	r1, [pc, #44]	; (84e8c <xTimerCreateTimerTask+0x58>)
   84e5e:	f44f 7282 	mov.w	r2, #260	; 0x104
   84e62:	2300      	movs	r3, #0
   84e64:	4c0a      	ldr	r4, [pc, #40]	; (84e90 <xTimerCreateTimerTask+0x5c>)
   84e66:	47a0      	blx	r4
   84e68:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   84e6a:	687b      	ldr	r3, [r7, #4]
   84e6c:	2b00      	cmp	r3, #0
   84e6e:	d102      	bne.n	84e76 <xTimerCreateTimerTask+0x42>
   84e70:	4b08      	ldr	r3, [pc, #32]	; (84e94 <xTimerCreateTimerTask+0x60>)
   84e72:	4798      	blx	r3
   84e74:	e7fe      	b.n	84e74 <xTimerCreateTimerTask+0x40>
	return xReturn;
   84e76:	687b      	ldr	r3, [r7, #4]
}
   84e78:	4618      	mov	r0, r3
   84e7a:	370c      	adds	r7, #12
   84e7c:	46bd      	mov	sp, r7
   84e7e:	bd90      	pop	{r4, r7, pc}
   84e80:	00085369 	.word	0x00085369
   84e84:	2007a640 	.word	0x2007a640
   84e88:	00084fb1 	.word	0x00084fb1
   84e8c:	00087090 	.word	0x00087090
   84e90:	00083f21 	.word	0x00083f21
   84e94:	000831ad 	.word	0x000831ad

00084e98 <xTimerGenericCommand>:
	return ( TimerHandle_t ) pxNewTimer;
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   84e98:	b590      	push	{r4, r7, lr}
   84e9a:	b089      	sub	sp, #36	; 0x24
   84e9c:	af00      	add	r7, sp, #0
   84e9e:	60f8      	str	r0, [r7, #12]
   84ea0:	60b9      	str	r1, [r7, #8]
   84ea2:	607a      	str	r2, [r7, #4]
   84ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   84ea6:	2300      	movs	r3, #0
   84ea8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   84eaa:	4b1d      	ldr	r3, [pc, #116]	; (84f20 <xTimerGenericCommand+0x88>)
   84eac:	681b      	ldr	r3, [r3, #0]
   84eae:	2b00      	cmp	r3, #0
   84eb0:	d030      	beq.n	84f14 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   84eb2:	68bb      	ldr	r3, [r7, #8]
   84eb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   84eb6:	687b      	ldr	r3, [r7, #4]
   84eb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   84eba:	68fb      	ldr	r3, [r7, #12]
   84ebc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   84ebe:	68bb      	ldr	r3, [r7, #8]
   84ec0:	2b05      	cmp	r3, #5
   84ec2:	dc1c      	bgt.n	84efe <xTimerGenericCommand+0x66>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   84ec4:	4b17      	ldr	r3, [pc, #92]	; (84f24 <xTimerGenericCommand+0x8c>)
   84ec6:	4798      	blx	r3
   84ec8:	4603      	mov	r3, r0
   84eca:	2b02      	cmp	r3, #2
   84ecc:	d10b      	bne.n	84ee6 <xTimerGenericCommand+0x4e>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   84ece:	4b14      	ldr	r3, [pc, #80]	; (84f20 <xTimerGenericCommand+0x88>)
   84ed0:	681a      	ldr	r2, [r3, #0]
   84ed2:	f107 0310 	add.w	r3, r7, #16
   84ed6:	4610      	mov	r0, r2
   84ed8:	4619      	mov	r1, r3
   84eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   84edc:	2300      	movs	r3, #0
   84ede:	4c12      	ldr	r4, [pc, #72]	; (84f28 <xTimerGenericCommand+0x90>)
   84ee0:	47a0      	blx	r4
   84ee2:	61f8      	str	r0, [r7, #28]
   84ee4:	e016      	b.n	84f14 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   84ee6:	4b0e      	ldr	r3, [pc, #56]	; (84f20 <xTimerGenericCommand+0x88>)
   84ee8:	681a      	ldr	r2, [r3, #0]
   84eea:	f107 0310 	add.w	r3, r7, #16
   84eee:	4610      	mov	r0, r2
   84ef0:	4619      	mov	r1, r3
   84ef2:	2200      	movs	r2, #0
   84ef4:	2300      	movs	r3, #0
   84ef6:	4c0c      	ldr	r4, [pc, #48]	; (84f28 <xTimerGenericCommand+0x90>)
   84ef8:	47a0      	blx	r4
   84efa:	61f8      	str	r0, [r7, #28]
   84efc:	e00a      	b.n	84f14 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   84efe:	4b08      	ldr	r3, [pc, #32]	; (84f20 <xTimerGenericCommand+0x88>)
   84f00:	681a      	ldr	r2, [r3, #0]
   84f02:	f107 0310 	add.w	r3, r7, #16
   84f06:	4610      	mov	r0, r2
   84f08:	4619      	mov	r1, r3
   84f0a:	683a      	ldr	r2, [r7, #0]
   84f0c:	2300      	movs	r3, #0
   84f0e:	4c07      	ldr	r4, [pc, #28]	; (84f2c <xTimerGenericCommand+0x94>)
   84f10:	47a0      	blx	r4
   84f12:	61f8      	str	r0, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   84f14:	69fb      	ldr	r3, [r7, #28]
}
   84f16:	4618      	mov	r0, r3
   84f18:	3724      	adds	r7, #36	; 0x24
   84f1a:	46bd      	mov	sp, r7
   84f1c:	bd90      	pop	{r4, r7, pc}
   84f1e:	bf00      	nop
   84f20:	2007a640 	.word	0x2007a640
   84f24:	00084bf9 	.word	0x00084bf9
   84f28:	000837b5 	.word	0x000837b5
   84f2c:	00083979 	.word	0x00083979

00084f30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   84f30:	b590      	push	{r4, r7, lr}
   84f32:	b087      	sub	sp, #28
   84f34:	af02      	add	r7, sp, #8
   84f36:	6078      	str	r0, [r7, #4]
   84f38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   84f3a:	4b18      	ldr	r3, [pc, #96]	; (84f9c <prvProcessExpiredTimer+0x6c>)
   84f3c:	681b      	ldr	r3, [r3, #0]
   84f3e:	68db      	ldr	r3, [r3, #12]
   84f40:	68db      	ldr	r3, [r3, #12]
   84f42:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   84f44:	68fb      	ldr	r3, [r7, #12]
   84f46:	3304      	adds	r3, #4
   84f48:	4618      	mov	r0, r3
   84f4a:	4b15      	ldr	r3, [pc, #84]	; (84fa0 <prvProcessExpiredTimer+0x70>)
   84f4c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   84f4e:	68fb      	ldr	r3, [r7, #12]
   84f50:	69db      	ldr	r3, [r3, #28]
   84f52:	2b01      	cmp	r3, #1
   84f54:	d11b      	bne.n	84f8e <prvProcessExpiredTimer+0x5e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   84f56:	68fb      	ldr	r3, [r7, #12]
   84f58:	699a      	ldr	r2, [r3, #24]
   84f5a:	687b      	ldr	r3, [r7, #4]
   84f5c:	4413      	add	r3, r2
   84f5e:	68f8      	ldr	r0, [r7, #12]
   84f60:	4619      	mov	r1, r3
   84f62:	683a      	ldr	r2, [r7, #0]
   84f64:	687b      	ldr	r3, [r7, #4]
   84f66:	4c0f      	ldr	r4, [pc, #60]	; (84fa4 <prvProcessExpiredTimer+0x74>)
   84f68:	47a0      	blx	r4
   84f6a:	4603      	mov	r3, r0
   84f6c:	2b01      	cmp	r3, #1
   84f6e:	d10e      	bne.n	84f8e <prvProcessExpiredTimer+0x5e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   84f70:	2300      	movs	r3, #0
   84f72:	9300      	str	r3, [sp, #0]
   84f74:	68f8      	ldr	r0, [r7, #12]
   84f76:	2100      	movs	r1, #0
   84f78:	687a      	ldr	r2, [r7, #4]
   84f7a:	2300      	movs	r3, #0
   84f7c:	4c0a      	ldr	r4, [pc, #40]	; (84fa8 <prvProcessExpiredTimer+0x78>)
   84f7e:	47a0      	blx	r4
   84f80:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
   84f82:	68bb      	ldr	r3, [r7, #8]
   84f84:	2b00      	cmp	r3, #0
   84f86:	d102      	bne.n	84f8e <prvProcessExpiredTimer+0x5e>
   84f88:	4b08      	ldr	r3, [pc, #32]	; (84fac <prvProcessExpiredTimer+0x7c>)
   84f8a:	4798      	blx	r3
   84f8c:	e7fe      	b.n	84f8c <prvProcessExpiredTimer+0x5c>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   84f8e:	68fb      	ldr	r3, [r7, #12]
   84f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   84f92:	68f8      	ldr	r0, [r7, #12]
   84f94:	4798      	blx	r3
}
   84f96:	3714      	adds	r7, #20
   84f98:	46bd      	mov	sp, r7
   84f9a:	bd90      	pop	{r4, r7, pc}
   84f9c:	2007a638 	.word	0x2007a638
   84fa0:	00082f35 	.word	0x00082f35
   84fa4:	000850f5 	.word	0x000850f5
   84fa8:	00084e99 	.word	0x00084e99
   84fac:	000831ad 	.word	0x000831ad

00084fb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   84fb0:	b580      	push	{r7, lr}
   84fb2:	b084      	sub	sp, #16
   84fb4:	af00      	add	r7, sp, #0
   84fb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   84fb8:	f107 0308 	add.w	r3, r7, #8
   84fbc:	4618      	mov	r0, r3
   84fbe:	4b05      	ldr	r3, [pc, #20]	; (84fd4 <prvTimerTask+0x24>)
   84fc0:	4798      	blx	r3
   84fc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   84fc4:	68bb      	ldr	r3, [r7, #8]
   84fc6:	68f8      	ldr	r0, [r7, #12]
   84fc8:	4619      	mov	r1, r3
   84fca:	4b03      	ldr	r3, [pc, #12]	; (84fd8 <prvTimerTask+0x28>)
   84fcc:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   84fce:	4b03      	ldr	r3, [pc, #12]	; (84fdc <prvTimerTask+0x2c>)
   84fd0:	4798      	blx	r3
	}
   84fd2:	e7f1      	b.n	84fb8 <prvTimerTask+0x8>
   84fd4:	00085065 	.word	0x00085065
   84fd8:	00084fe1 	.word	0x00084fe1
   84fdc:	0008517d 	.word	0x0008517d

00084fe0 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, const BaseType_t xListWasEmpty )
{
   84fe0:	b580      	push	{r7, lr}
   84fe2:	b084      	sub	sp, #16
   84fe4:	af00      	add	r7, sp, #0
   84fe6:	6078      	str	r0, [r7, #4]
   84fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   84fea:	4b17      	ldr	r3, [pc, #92]	; (85048 <prvProcessTimerOrBlockTask+0x68>)
   84fec:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   84fee:	f107 0308 	add.w	r3, r7, #8
   84ff2:	4618      	mov	r0, r3
   84ff4:	4b15      	ldr	r3, [pc, #84]	; (8504c <prvProcessTimerOrBlockTask+0x6c>)
   84ff6:	4798      	blx	r3
   84ff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   84ffa:	68bb      	ldr	r3, [r7, #8]
   84ffc:	2b00      	cmp	r3, #0
   84ffe:	d11e      	bne.n	8503e <prvProcessTimerOrBlockTask+0x5e>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   85000:	683b      	ldr	r3, [r7, #0]
   85002:	2b00      	cmp	r3, #0
   85004:	d10a      	bne.n	8501c <prvProcessTimerOrBlockTask+0x3c>
   85006:	687a      	ldr	r2, [r7, #4]
   85008:	68fb      	ldr	r3, [r7, #12]
   8500a:	429a      	cmp	r2, r3
   8500c:	d806      	bhi.n	8501c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
   8500e:	4b10      	ldr	r3, [pc, #64]	; (85050 <prvProcessTimerOrBlockTask+0x70>)
   85010:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   85012:	6878      	ldr	r0, [r7, #4]
   85014:	68f9      	ldr	r1, [r7, #12]
   85016:	4b0f      	ldr	r3, [pc, #60]	; (85054 <prvProcessTimerOrBlockTask+0x74>)
   85018:	4798      	blx	r3
   8501a:	e012      	b.n	85042 <prvProcessTimerOrBlockTask+0x62>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8501c:	4b0e      	ldr	r3, [pc, #56]	; (85058 <prvProcessTimerOrBlockTask+0x78>)
   8501e:	681a      	ldr	r2, [r3, #0]
   85020:	6879      	ldr	r1, [r7, #4]
   85022:	68fb      	ldr	r3, [r7, #12]
   85024:	1acb      	subs	r3, r1, r3
   85026:	4610      	mov	r0, r2
   85028:	4619      	mov	r1, r3
   8502a:	4b0c      	ldr	r3, [pc, #48]	; (8505c <prvProcessTimerOrBlockTask+0x7c>)
   8502c:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   8502e:	4b08      	ldr	r3, [pc, #32]	; (85050 <prvProcessTimerOrBlockTask+0x70>)
   85030:	4798      	blx	r3
   85032:	4603      	mov	r3, r0
   85034:	2b00      	cmp	r3, #0
   85036:	d104      	bne.n	85042 <prvProcessTimerOrBlockTask+0x62>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   85038:	4b09      	ldr	r3, [pc, #36]	; (85060 <prvProcessTimerOrBlockTask+0x80>)
   8503a:	4798      	blx	r3
   8503c:	e001      	b.n	85042 <prvProcessTimerOrBlockTask+0x62>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
   8503e:	4b04      	ldr	r3, [pc, #16]	; (85050 <prvProcessTimerOrBlockTask+0x70>)
   85040:	4798      	blx	r3
		}
	}
}
   85042:	3710      	adds	r7, #16
   85044:	46bd      	mov	sp, r7
   85046:	bd80      	pop	{r7, pc}
   85048:	0008421d 	.word	0x0008421d
   8504c:	000850ad 	.word	0x000850ad
   85050:	00084239 	.word	0x00084239
   85054:	00084f31 	.word	0x00084f31
   85058:	2007a640 	.word	0x2007a640
   8505c:	00083eb9 	.word	0x00083eb9
   85060:	00083111 	.word	0x00083111

00085064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   85064:	b480      	push	{r7}
   85066:	b085      	sub	sp, #20
   85068:	af00      	add	r7, sp, #0
   8506a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   8506c:	4b0e      	ldr	r3, [pc, #56]	; (850a8 <prvGetNextExpireTime+0x44>)
   8506e:	681b      	ldr	r3, [r3, #0]
   85070:	681b      	ldr	r3, [r3, #0]
   85072:	2b00      	cmp	r3, #0
   85074:	bf14      	ite	ne
   85076:	2300      	movne	r3, #0
   85078:	2301      	moveq	r3, #1
   8507a:	b2db      	uxtb	r3, r3
   8507c:	461a      	mov	r2, r3
   8507e:	687b      	ldr	r3, [r7, #4]
   85080:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   85082:	687b      	ldr	r3, [r7, #4]
   85084:	681b      	ldr	r3, [r3, #0]
   85086:	2b00      	cmp	r3, #0
   85088:	d105      	bne.n	85096 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8508a:	4b07      	ldr	r3, [pc, #28]	; (850a8 <prvGetNextExpireTime+0x44>)
   8508c:	681b      	ldr	r3, [r3, #0]
   8508e:	68db      	ldr	r3, [r3, #12]
   85090:	681b      	ldr	r3, [r3, #0]
   85092:	60fb      	str	r3, [r7, #12]
   85094:	e001      	b.n	8509a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   85096:	2300      	movs	r3, #0
   85098:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   8509a:	68fb      	ldr	r3, [r7, #12]
}
   8509c:	4618      	mov	r0, r3
   8509e:	3714      	adds	r7, #20
   850a0:	46bd      	mov	sp, r7
   850a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   850a6:	4770      	bx	lr
   850a8:	2007a638 	.word	0x2007a638

000850ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   850ac:	b580      	push	{r7, lr}
   850ae:	b084      	sub	sp, #16
   850b0:	af00      	add	r7, sp, #0
   850b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   850b4:	4b0c      	ldr	r3, [pc, #48]	; (850e8 <prvSampleTimeNow+0x3c>)
   850b6:	4798      	blx	r3
   850b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
   850ba:	4b0c      	ldr	r3, [pc, #48]	; (850ec <prvSampleTimeNow+0x40>)
   850bc:	681b      	ldr	r3, [r3, #0]
   850be:	68fa      	ldr	r2, [r7, #12]
   850c0:	429a      	cmp	r2, r3
   850c2:	d205      	bcs.n	850d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
   850c4:	4b0a      	ldr	r3, [pc, #40]	; (850f0 <prvSampleTimeNow+0x44>)
   850c6:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   850c8:	687b      	ldr	r3, [r7, #4]
   850ca:	2201      	movs	r2, #1
   850cc:	601a      	str	r2, [r3, #0]
   850ce:	e002      	b.n	850d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   850d0:	687b      	ldr	r3, [r7, #4]
   850d2:	2200      	movs	r2, #0
   850d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   850d6:	4b05      	ldr	r3, [pc, #20]	; (850ec <prvSampleTimeNow+0x40>)
   850d8:	68fa      	ldr	r2, [r7, #12]
   850da:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   850dc:	68fb      	ldr	r3, [r7, #12]
}
   850de:	4618      	mov	r0, r3
   850e0:	3710      	adds	r7, #16
   850e2:	46bd      	mov	sp, r7
   850e4:	bd80      	pop	{r7, pc}
   850e6:	bf00      	nop
   850e8:	0008435d 	.word	0x0008435d
   850ec:	2007a644 	.word	0x2007a644
   850f0:	000852a9 	.word	0x000852a9

000850f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   850f4:	b580      	push	{r7, lr}
   850f6:	b086      	sub	sp, #24
   850f8:	af00      	add	r7, sp, #0
   850fa:	60f8      	str	r0, [r7, #12]
   850fc:	60b9      	str	r1, [r7, #8]
   850fe:	607a      	str	r2, [r7, #4]
   85100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   85102:	2300      	movs	r3, #0
   85104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   85106:	68fb      	ldr	r3, [r7, #12]
   85108:	68ba      	ldr	r2, [r7, #8]
   8510a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8510c:	68fb      	ldr	r3, [r7, #12]
   8510e:	68fa      	ldr	r2, [r7, #12]
   85110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   85112:	68ba      	ldr	r2, [r7, #8]
   85114:	687b      	ldr	r3, [r7, #4]
   85116:	429a      	cmp	r2, r3
   85118:	d812      	bhi.n	85140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
   8511a:	687a      	ldr	r2, [r7, #4]
   8511c:	683b      	ldr	r3, [r7, #0]
   8511e:	1ad2      	subs	r2, r2, r3
   85120:	68fb      	ldr	r3, [r7, #12]
   85122:	699b      	ldr	r3, [r3, #24]
   85124:	429a      	cmp	r2, r3
   85126:	d302      	bcc.n	8512e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   85128:	2301      	movs	r3, #1
   8512a:	617b      	str	r3, [r7, #20]
   8512c:	e01b      	b.n	85166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8512e:	4b10      	ldr	r3, [pc, #64]	; (85170 <prvInsertTimerInActiveList+0x7c>)
   85130:	681a      	ldr	r2, [r3, #0]
   85132:	68fb      	ldr	r3, [r7, #12]
   85134:	3304      	adds	r3, #4
   85136:	4610      	mov	r0, r2
   85138:	4619      	mov	r1, r3
   8513a:	4b0e      	ldr	r3, [pc, #56]	; (85174 <prvInsertTimerInActiveList+0x80>)
   8513c:	4798      	blx	r3
   8513e:	e012      	b.n	85166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   85140:	687a      	ldr	r2, [r7, #4]
   85142:	683b      	ldr	r3, [r7, #0]
   85144:	429a      	cmp	r2, r3
   85146:	d206      	bcs.n	85156 <prvInsertTimerInActiveList+0x62>
   85148:	68ba      	ldr	r2, [r7, #8]
   8514a:	683b      	ldr	r3, [r7, #0]
   8514c:	429a      	cmp	r2, r3
   8514e:	d302      	bcc.n	85156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   85150:	2301      	movs	r3, #1
   85152:	617b      	str	r3, [r7, #20]
   85154:	e007      	b.n	85166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   85156:	4b08      	ldr	r3, [pc, #32]	; (85178 <prvInsertTimerInActiveList+0x84>)
   85158:	681a      	ldr	r2, [r3, #0]
   8515a:	68fb      	ldr	r3, [r7, #12]
   8515c:	3304      	adds	r3, #4
   8515e:	4610      	mov	r0, r2
   85160:	4619      	mov	r1, r3
   85162:	4b04      	ldr	r3, [pc, #16]	; (85174 <prvInsertTimerInActiveList+0x80>)
   85164:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   85166:	697b      	ldr	r3, [r7, #20]
}
   85168:	4618      	mov	r0, r3
   8516a:	3718      	adds	r7, #24
   8516c:	46bd      	mov	sp, r7
   8516e:	bd80      	pop	{r7, pc}
   85170:	2007a63c 	.word	0x2007a63c
   85174:	00082ec5 	.word	0x00082ec5
   85178:	2007a638 	.word	0x2007a638

0008517c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   8517c:	b590      	push	{r4, r7, lr}
   8517e:	b08b      	sub	sp, #44	; 0x2c
   85180:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   85182:	e070      	b.n	85266 <prvProcessReceivedCommands+0xea>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   85184:	68bb      	ldr	r3, [r7, #8]
   85186:	2b00      	cmp	r3, #0
   85188:	db6d      	blt.n	85266 <prvProcessReceivedCommands+0xea>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   8518a:	693b      	ldr	r3, [r7, #16]
   8518c:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8518e:	69fb      	ldr	r3, [r7, #28]
   85190:	695b      	ldr	r3, [r3, #20]
   85192:	2b00      	cmp	r3, #0
   85194:	d004      	beq.n	851a0 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   85196:	69fb      	ldr	r3, [r7, #28]
   85198:	3304      	adds	r3, #4
   8519a:	4618      	mov	r0, r3
   8519c:	4b3a      	ldr	r3, [pc, #232]	; (85288 <prvProcessReceivedCommands+0x10c>)
   8519e:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   851a0:	1d3b      	adds	r3, r7, #4
   851a2:	4618      	mov	r0, r3
   851a4:	4b39      	ldr	r3, [pc, #228]	; (8528c <prvProcessReceivedCommands+0x110>)
   851a6:	4798      	blx	r3
   851a8:	61b8      	str	r0, [r7, #24]

			switch( xMessage.xMessageID )
   851aa:	68bb      	ldr	r3, [r7, #8]
   851ac:	2b09      	cmp	r3, #9
   851ae:	d859      	bhi.n	85264 <prvProcessReceivedCommands+0xe8>
   851b0:	a201      	add	r2, pc, #4	; (adr r2, 851b8 <prvProcessReceivedCommands+0x3c>)
   851b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   851b6:	bf00      	nop
   851b8:	000851e1 	.word	0x000851e1
   851bc:	000851e1 	.word	0x000851e1
   851c0:	000851e1 	.word	0x000851e1
   851c4:	00085265 	.word	0x00085265
   851c8:	00085233 	.word	0x00085233
   851cc:	0008525d 	.word	0x0008525d
   851d0:	000851e1 	.word	0x000851e1
   851d4:	000851e1 	.word	0x000851e1
   851d8:	00085265 	.word	0x00085265
   851dc:	00085233 	.word	0x00085233
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
   851e0:	68fa      	ldr	r2, [r7, #12]
   851e2:	69fb      	ldr	r3, [r7, #28]
   851e4:	699b      	ldr	r3, [r3, #24]
   851e6:	441a      	add	r2, r3
   851e8:	68fb      	ldr	r3, [r7, #12]
   851ea:	69f8      	ldr	r0, [r7, #28]
   851ec:	4611      	mov	r1, r2
   851ee:	69ba      	ldr	r2, [r7, #24]
   851f0:	4c27      	ldr	r4, [pc, #156]	; (85290 <prvProcessReceivedCommands+0x114>)
   851f2:	47a0      	blx	r4
   851f4:	4603      	mov	r3, r0
   851f6:	2b01      	cmp	r3, #1
   851f8:	d11a      	bne.n	85230 <prvProcessReceivedCommands+0xb4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   851fa:	69fb      	ldr	r3, [r7, #28]
   851fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   851fe:	69f8      	ldr	r0, [r7, #28]
   85200:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   85202:	69fb      	ldr	r3, [r7, #28]
   85204:	69db      	ldr	r3, [r3, #28]
   85206:	2b01      	cmp	r3, #1
   85208:	d112      	bne.n	85230 <prvProcessReceivedCommands+0xb4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8520a:	68fa      	ldr	r2, [r7, #12]
   8520c:	69fb      	ldr	r3, [r7, #28]
   8520e:	699b      	ldr	r3, [r3, #24]
   85210:	4413      	add	r3, r2
   85212:	2200      	movs	r2, #0
   85214:	9200      	str	r2, [sp, #0]
   85216:	69f8      	ldr	r0, [r7, #28]
   85218:	2100      	movs	r1, #0
   8521a:	461a      	mov	r2, r3
   8521c:	2300      	movs	r3, #0
   8521e:	4c1d      	ldr	r4, [pc, #116]	; (85294 <prvProcessReceivedCommands+0x118>)
   85220:	47a0      	blx	r4
   85222:	6178      	str	r0, [r7, #20]
							configASSERT( xResult );
   85224:	697b      	ldr	r3, [r7, #20]
   85226:	2b00      	cmp	r3, #0
   85228:	d102      	bne.n	85230 <prvProcessReceivedCommands+0xb4>
   8522a:	4b1b      	ldr	r3, [pc, #108]	; (85298 <prvProcessReceivedCommands+0x11c>)
   8522c:	4798      	blx	r3
   8522e:	e7fe      	b.n	8522e <prvProcessReceivedCommands+0xb2>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					break;
   85230:	e019      	b.n	85266 <prvProcessReceivedCommands+0xea>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   85232:	68fa      	ldr	r2, [r7, #12]
   85234:	69fb      	ldr	r3, [r7, #28]
   85236:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   85238:	69fb      	ldr	r3, [r7, #28]
   8523a:	699b      	ldr	r3, [r3, #24]
   8523c:	2b00      	cmp	r3, #0
   8523e:	d102      	bne.n	85246 <prvProcessReceivedCommands+0xca>
   85240:	4b15      	ldr	r3, [pc, #84]	; (85298 <prvProcessReceivedCommands+0x11c>)
   85242:	4798      	blx	r3
   85244:	e7fe      	b.n	85244 <prvProcessReceivedCommands+0xc8>
					longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot be
					zero the next expiry time can only be in the future, meaning
					(unlike for the xTimerStart() case above) there is no fail case
					that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   85246:	69fb      	ldr	r3, [r7, #28]
   85248:	699a      	ldr	r2, [r3, #24]
   8524a:	69bb      	ldr	r3, [r7, #24]
   8524c:	4413      	add	r3, r2
   8524e:	69f8      	ldr	r0, [r7, #28]
   85250:	4619      	mov	r1, r3
   85252:	69ba      	ldr	r2, [r7, #24]
   85254:	69bb      	ldr	r3, [r7, #24]
   85256:	4c0e      	ldr	r4, [pc, #56]	; (85290 <prvProcessReceivedCommands+0x114>)
   85258:	47a0      	blx	r4
					break;
   8525a:	e004      	b.n	85266 <prvProcessReceivedCommands+0xea>

				case tmrCOMMAND_DELETE :
					/* The timer has already been removed from the active list,
					just free up the memory. */
					vPortFree( pxTimer );
   8525c:	69f8      	ldr	r0, [r7, #28]
   8525e:	4b0f      	ldr	r3, [pc, #60]	; (8529c <prvProcessReceivedCommands+0x120>)
   85260:	4798      	blx	r3
					break;
   85262:	e000      	b.n	85266 <prvProcessReceivedCommands+0xea>

				default	:
					/* Don't expect to get here. */
					break;
   85264:	bf00      	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   85266:	4b0e      	ldr	r3, [pc, #56]	; (852a0 <prvProcessReceivedCommands+0x124>)
   85268:	681a      	ldr	r2, [r3, #0]
   8526a:	f107 0308 	add.w	r3, r7, #8
   8526e:	4610      	mov	r0, r2
   85270:	4619      	mov	r1, r3
   85272:	2200      	movs	r2, #0
   85274:	2300      	movs	r3, #0
   85276:	4c0b      	ldr	r4, [pc, #44]	; (852a4 <prvProcessReceivedCommands+0x128>)
   85278:	47a0      	blx	r4
   8527a:	4603      	mov	r3, r0
   8527c:	2b00      	cmp	r3, #0
   8527e:	d181      	bne.n	85184 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
   85280:	3724      	adds	r7, #36	; 0x24
   85282:	46bd      	mov	sp, r7
   85284:	bd90      	pop	{r4, r7, pc}
   85286:	bf00      	nop
   85288:	00082f35 	.word	0x00082f35
   8528c:	000850ad 	.word	0x000850ad
   85290:	000850f5 	.word	0x000850f5
   85294:	00084e99 	.word	0x00084e99
   85298:	000831ad 	.word	0x000831ad
   8529c:	00083449 	.word	0x00083449
   852a0:	2007a640 	.word	0x2007a640
   852a4:	00083a75 	.word	0x00083a75

000852a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   852a8:	b590      	push	{r4, r7, lr}
   852aa:	b089      	sub	sp, #36	; 0x24
   852ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   852ae:	e03d      	b.n	8532c <prvSwitchTimerLists+0x84>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   852b0:	4b27      	ldr	r3, [pc, #156]	; (85350 <prvSwitchTimerLists+0xa8>)
   852b2:	681b      	ldr	r3, [r3, #0]
   852b4:	68db      	ldr	r3, [r3, #12]
   852b6:	681b      	ldr	r3, [r3, #0]
   852b8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   852ba:	4b25      	ldr	r3, [pc, #148]	; (85350 <prvSwitchTimerLists+0xa8>)
   852bc:	681b      	ldr	r3, [r3, #0]
   852be:	68db      	ldr	r3, [r3, #12]
   852c0:	68db      	ldr	r3, [r3, #12]
   852c2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   852c4:	693b      	ldr	r3, [r7, #16]
   852c6:	3304      	adds	r3, #4
   852c8:	4618      	mov	r0, r3
   852ca:	4b22      	ldr	r3, [pc, #136]	; (85354 <prvSwitchTimerLists+0xac>)
   852cc:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   852ce:	693b      	ldr	r3, [r7, #16]
   852d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   852d2:	6938      	ldr	r0, [r7, #16]
   852d4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   852d6:	693b      	ldr	r3, [r7, #16]
   852d8:	69db      	ldr	r3, [r3, #28]
   852da:	2b01      	cmp	r3, #1
   852dc:	d126      	bne.n	8532c <prvSwitchTimerLists+0x84>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   852de:	693b      	ldr	r3, [r7, #16]
   852e0:	699a      	ldr	r2, [r3, #24]
   852e2:	697b      	ldr	r3, [r7, #20]
   852e4:	4413      	add	r3, r2
   852e6:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   852e8:	68fa      	ldr	r2, [r7, #12]
   852ea:	697b      	ldr	r3, [r7, #20]
   852ec:	429a      	cmp	r2, r3
   852ee:	d90e      	bls.n	8530e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   852f0:	693b      	ldr	r3, [r7, #16]
   852f2:	68fa      	ldr	r2, [r7, #12]
   852f4:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   852f6:	693b      	ldr	r3, [r7, #16]
   852f8:	693a      	ldr	r2, [r7, #16]
   852fa:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   852fc:	4b14      	ldr	r3, [pc, #80]	; (85350 <prvSwitchTimerLists+0xa8>)
   852fe:	681a      	ldr	r2, [r3, #0]
   85300:	693b      	ldr	r3, [r7, #16]
   85302:	3304      	adds	r3, #4
   85304:	4610      	mov	r0, r2
   85306:	4619      	mov	r1, r3
   85308:	4b13      	ldr	r3, [pc, #76]	; (85358 <prvSwitchTimerLists+0xb0>)
   8530a:	4798      	blx	r3
   8530c:	e00e      	b.n	8532c <prvSwitchTimerLists+0x84>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   8530e:	2300      	movs	r3, #0
   85310:	9300      	str	r3, [sp, #0]
   85312:	6938      	ldr	r0, [r7, #16]
   85314:	2100      	movs	r1, #0
   85316:	697a      	ldr	r2, [r7, #20]
   85318:	2300      	movs	r3, #0
   8531a:	4c10      	ldr	r4, [pc, #64]	; (8535c <prvSwitchTimerLists+0xb4>)
   8531c:	47a0      	blx	r4
   8531e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
   85320:	68bb      	ldr	r3, [r7, #8]
   85322:	2b00      	cmp	r3, #0
   85324:	d102      	bne.n	8532c <prvSwitchTimerLists+0x84>
   85326:	4b0e      	ldr	r3, [pc, #56]	; (85360 <prvSwitchTimerLists+0xb8>)
   85328:	4798      	blx	r3
   8532a:	e7fe      	b.n	8532a <prvSwitchTimerLists+0x82>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8532c:	4b08      	ldr	r3, [pc, #32]	; (85350 <prvSwitchTimerLists+0xa8>)
   8532e:	681b      	ldr	r3, [r3, #0]
   85330:	681b      	ldr	r3, [r3, #0]
   85332:	2b00      	cmp	r3, #0
   85334:	d1bc      	bne.n	852b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   85336:	4b06      	ldr	r3, [pc, #24]	; (85350 <prvSwitchTimerLists+0xa8>)
   85338:	681b      	ldr	r3, [r3, #0]
   8533a:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   8533c:	4b09      	ldr	r3, [pc, #36]	; (85364 <prvSwitchTimerLists+0xbc>)
   8533e:	681a      	ldr	r2, [r3, #0]
   85340:	4b03      	ldr	r3, [pc, #12]	; (85350 <prvSwitchTimerLists+0xa8>)
   85342:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   85344:	4b07      	ldr	r3, [pc, #28]	; (85364 <prvSwitchTimerLists+0xbc>)
   85346:	687a      	ldr	r2, [r7, #4]
   85348:	601a      	str	r2, [r3, #0]
}
   8534a:	371c      	adds	r7, #28
   8534c:	46bd      	mov	sp, r7
   8534e:	bd90      	pop	{r4, r7, pc}
   85350:	2007a638 	.word	0x2007a638
   85354:	00082f35 	.word	0x00082f35
   85358:	00082ec5 	.word	0x00082ec5
   8535c:	00084e99 	.word	0x00084e99
   85360:	000831ad 	.word	0x000831ad
   85364:	2007a63c 	.word	0x2007a63c

00085368 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   85368:	b580      	push	{r7, lr}
   8536a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8536c:	4b11      	ldr	r3, [pc, #68]	; (853b4 <prvCheckForValidListAndQueue+0x4c>)
   8536e:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   85370:	4b11      	ldr	r3, [pc, #68]	; (853b8 <prvCheckForValidListAndQueue+0x50>)
   85372:	681b      	ldr	r3, [r3, #0]
   85374:	2b00      	cmp	r3, #0
   85376:	d11a      	bne.n	853ae <prvCheckForValidListAndQueue+0x46>
		{
			vListInitialise( &xActiveTimerList1 );
   85378:	4810      	ldr	r0, [pc, #64]	; (853bc <prvCheckForValidListAndQueue+0x54>)
   8537a:	4b11      	ldr	r3, [pc, #68]	; (853c0 <prvCheckForValidListAndQueue+0x58>)
   8537c:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   8537e:	4811      	ldr	r0, [pc, #68]	; (853c4 <prvCheckForValidListAndQueue+0x5c>)
   85380:	4b0f      	ldr	r3, [pc, #60]	; (853c0 <prvCheckForValidListAndQueue+0x58>)
   85382:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   85384:	4b10      	ldr	r3, [pc, #64]	; (853c8 <prvCheckForValidListAndQueue+0x60>)
   85386:	4a0d      	ldr	r2, [pc, #52]	; (853bc <prvCheckForValidListAndQueue+0x54>)
   85388:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   8538a:	4b10      	ldr	r3, [pc, #64]	; (853cc <prvCheckForValidListAndQueue+0x64>)
   8538c:	4a0d      	ldr	r2, [pc, #52]	; (853c4 <prvCheckForValidListAndQueue+0x5c>)
   8538e:	601a      	str	r2, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   85390:	2005      	movs	r0, #5
   85392:	210c      	movs	r1, #12
   85394:	2200      	movs	r2, #0
   85396:	4b0e      	ldr	r3, [pc, #56]	; (853d0 <prvCheckForValidListAndQueue+0x68>)
   85398:	4798      	blx	r3
   8539a:	4602      	mov	r2, r0
   8539c:	4b06      	ldr	r3, [pc, #24]	; (853b8 <prvCheckForValidListAndQueue+0x50>)
   8539e:	601a      	str	r2, [r3, #0]
			configASSERT( xTimerQueue );
   853a0:	4b05      	ldr	r3, [pc, #20]	; (853b8 <prvCheckForValidListAndQueue+0x50>)
   853a2:	681b      	ldr	r3, [r3, #0]
   853a4:	2b00      	cmp	r3, #0
   853a6:	d102      	bne.n	853ae <prvCheckForValidListAndQueue+0x46>
   853a8:	4b0a      	ldr	r3, [pc, #40]	; (853d4 <prvCheckForValidListAndQueue+0x6c>)
   853aa:	4798      	blx	r3
   853ac:	e7fe      	b.n	853ac <prvCheckForValidListAndQueue+0x44>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   853ae:	4b0a      	ldr	r3, [pc, #40]	; (853d8 <prvCheckForValidListAndQueue+0x70>)
   853b0:	4798      	blx	r3
}
   853b2:	bd80      	pop	{r7, pc}
   853b4:	00083131 	.word	0x00083131
   853b8:	2007a640 	.word	0x2007a640
   853bc:	2007a610 	.word	0x2007a610
   853c0:	00082e25 	.word	0x00082e25
   853c4:	2007a624 	.word	0x2007a624
   853c8:	2007a638 	.word	0x2007a638
   853cc:	2007a63c 	.word	0x2007a63c
   853d0:	00083729 	.word	0x00083729
   853d4:	000831ad 	.word	0x000831ad
   853d8:	00083175 	.word	0x00083175

000853dc <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   853dc:	b480      	push	{r7}
   853de:	b083      	sub	sp, #12
   853e0:	af00      	add	r7, sp, #0
   853e2:	4603      	mov	r3, r0
   853e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   853e6:	4b08      	ldr	r3, [pc, #32]	; (85408 <NVIC_EnableIRQ+0x2c>)
   853e8:	f997 2007 	ldrsb.w	r2, [r7, #7]
   853ec:	0952      	lsrs	r2, r2, #5
   853ee:	79f9      	ldrb	r1, [r7, #7]
   853f0:	f001 011f 	and.w	r1, r1, #31
   853f4:	2001      	movs	r0, #1
   853f6:	fa00 f101 	lsl.w	r1, r0, r1
   853fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   853fe:	370c      	adds	r7, #12
   85400:	46bd      	mov	sp, r7
   85402:	f85d 7b04 	ldr.w	r7, [sp], #4
   85406:	4770      	bx	lr
   85408:	e000e100 	.word	0xe000e100

0008540c <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   8540c:	b480      	push	{r7}
   8540e:	b083      	sub	sp, #12
   85410:	af00      	add	r7, sp, #0
   85412:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   85414:	687b      	ldr	r3, [r7, #4]
   85416:	2b07      	cmp	r3, #7
   85418:	d825      	bhi.n	85466 <osc_get_rate+0x5a>
   8541a:	a201      	add	r2, pc, #4	; (adr r2, 85420 <osc_get_rate+0x14>)
   8541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85420:	00085441 	.word	0x00085441
   85424:	00085447 	.word	0x00085447
   85428:	0008544d 	.word	0x0008544d
   8542c:	00085453 	.word	0x00085453
   85430:	00085457 	.word	0x00085457
   85434:	0008545b 	.word	0x0008545b
   85438:	0008545f 	.word	0x0008545f
   8543c:	00085463 	.word	0x00085463
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   85440:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   85444:	e010      	b.n	85468 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   85446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8544a:	e00d      	b.n	85468 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   8544c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   85450:	e00a      	b.n	85468 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   85452:	4b08      	ldr	r3, [pc, #32]	; (85474 <osc_get_rate+0x68>)
   85454:	e008      	b.n	85468 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   85456:	4b08      	ldr	r3, [pc, #32]	; (85478 <osc_get_rate+0x6c>)
   85458:	e006      	b.n	85468 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8545a:	4b08      	ldr	r3, [pc, #32]	; (8547c <osc_get_rate+0x70>)
   8545c:	e004      	b.n	85468 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8545e:	4b07      	ldr	r3, [pc, #28]	; (8547c <osc_get_rate+0x70>)
   85460:	e002      	b.n	85468 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   85462:	4b06      	ldr	r3, [pc, #24]	; (8547c <osc_get_rate+0x70>)
   85464:	e000      	b.n	85468 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   85466:	2300      	movs	r3, #0
}
   85468:	4618      	mov	r0, r3
   8546a:	370c      	adds	r7, #12
   8546c:	46bd      	mov	sp, r7
   8546e:	f85d 7b04 	ldr.w	r7, [sp], #4
   85472:	4770      	bx	lr
   85474:	003d0900 	.word	0x003d0900
   85478:	007a1200 	.word	0x007a1200
   8547c:	00b71b00 	.word	0x00b71b00

00085480 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   85480:	b580      	push	{r7, lr}
   85482:	af00      	add	r7, sp, #0
    case SYSCLK_SRC_MAINCK_BYPASS:
		return OSC_MAINCK_BYPASS_HZ;

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLLACK:
		return pll_get_default_rate(0);	
   85484:	2006      	movs	r0, #6
   85486:	4b04      	ldr	r3, [pc, #16]	; (85498 <sysclk_get_main_hz+0x18>)
   85488:	4798      	blx	r3
   8548a:	4602      	mov	r2, r0
   8548c:	4613      	mov	r3, r2
   8548e:	00db      	lsls	r3, r3, #3
   85490:	1a9b      	subs	r3, r3, r2
   85492:	005b      	lsls	r3, r3, #1
	
	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   85494:	4618      	mov	r0, r3
   85496:	bd80      	pop	{r7, pc}
   85498:	0008540d 	.word	0x0008540d

0008549c <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   8549c:	b580      	push	{r7, lr}
   8549e:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() / ((CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos) + 1);
   854a0:	4b02      	ldr	r3, [pc, #8]	; (854ac <sysclk_get_cpu_hz+0x10>)
   854a2:	4798      	blx	r3
   854a4:	4603      	mov	r3, r0
   854a6:	085b      	lsrs	r3, r3, #1
}
   854a8:	4618      	mov	r0, r3
   854aa:	bd80      	pop	{r7, pc}
   854ac:	00085481 	.word	0x00085481

000854b0 <CAN1_Handler>:

/************************************************************************/
/* Interrupt Handler for CAN1								    		*/
/************************************************************************/
void CAN1_Handler(void)
{
   854b0:	b580      	push	{r7, lr}
   854b2:	b082      	sub	sp, #8
   854b4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	/* Save the state of the can1_mailbox object */	
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
   854b6:	482b      	ldr	r0, [pc, #172]	; (85564 <CAN1_Handler+0xb4>)
   854b8:	492b      	ldr	r1, [pc, #172]	; (85568 <CAN1_Handler+0xb8>)
   854ba:	4b2c      	ldr	r3, [pc, #176]	; (8556c <CAN1_Handler+0xbc>)
   854bc:	4798      	blx	r3
	
	ul_status = can_get_status(CAN1);
   854be:	482c      	ldr	r0, [pc, #176]	; (85570 <CAN1_Handler+0xc0>)
   854c0:	4b2c      	ldr	r3, [pc, #176]	; (85574 <CAN1_Handler+0xc4>)
   854c2:	4798      	blx	r3
   854c4:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) 
   854c6:	683b      	ldr	r3, [r7, #0]
   854c8:	b2db      	uxtb	r3, r3
   854ca:	2b00      	cmp	r3, #0
   854cc:	d046      	beq.n	8555c <CAN1_Handler+0xac>
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   854ce:	2300      	movs	r3, #0
   854d0:	71fb      	strb	r3, [r7, #7]
   854d2:	e040      	b.n	85556 <CAN1_Handler+0xa6>
		{
			ul_status = can_mailbox_get_status(CAN1, i);
   854d4:	79fb      	ldrb	r3, [r7, #7]
   854d6:	4826      	ldr	r0, [pc, #152]	; (85570 <CAN1_Handler+0xc0>)
   854d8:	4619      	mov	r1, r3
   854da:	4b27      	ldr	r3, [pc, #156]	; (85578 <CAN1_Handler+0xc8>)
   854dc:	4798      	blx	r3
   854de:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) 
   854e0:	683b      	ldr	r3, [r7, #0]
   854e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   854e6:	2b00      	cmp	r3, #0
   854e8:	d032      	beq.n	85550 <CAN1_Handler+0xa0>
			{
				can1_mailbox.ul_mb_idx = i;
   854ea:	79fa      	ldrb	r2, [r7, #7]
   854ec:	4b1d      	ldr	r3, [pc, #116]	; (85564 <CAN1_Handler+0xb4>)
   854ee:	601a      	str	r2, [r3, #0]
				can1_mailbox.ul_status = ul_status;
   854f0:	4b1c      	ldr	r3, [pc, #112]	; (85564 <CAN1_Handler+0xb4>)
   854f2:	683a      	ldr	r2, [r7, #0]
   854f4:	609a      	str	r2, [r3, #8]
				can_mailbox_read(CAN1, &can1_mailbox);
   854f6:	481e      	ldr	r0, [pc, #120]	; (85570 <CAN1_Handler+0xc0>)
   854f8:	491a      	ldr	r1, [pc, #104]	; (85564 <CAN1_Handler+0xb4>)
   854fa:	4b20      	ldr	r3, [pc, #128]	; (8557c <CAN1_Handler+0xcc>)
   854fc:	4798      	blx	r3
				
				if((can1_mailbox.ul_datah == 0x01234567) && (can1_mailbox.ul_datal == 0x89ABCDEF))
   854fe:	4b19      	ldr	r3, [pc, #100]	; (85564 <CAN1_Handler+0xb4>)
   85500:	69da      	ldr	r2, [r3, #28]
   85502:	4b1f      	ldr	r3, [pc, #124]	; (85580 <CAN1_Handler+0xd0>)
   85504:	429a      	cmp	r2, r3
   85506:	d107      	bne.n	85518 <CAN1_Handler+0x68>
   85508:	4b16      	ldr	r3, [pc, #88]	; (85564 <CAN1_Handler+0xb4>)
   8550a:	699a      	ldr	r2, [r3, #24]
   8550c:	4b1d      	ldr	r3, [pc, #116]	; (85584 <CAN1_Handler+0xd4>)
   8550e:	429a      	cmp	r2, r3
   85510:	d102      	bne.n	85518 <CAN1_Handler+0x68>
				{
					SAFE_MODE = 0;
   85512:	4b1d      	ldr	r3, [pc, #116]	; (85588 <CAN1_Handler+0xd8>)
   85514:	2200      	movs	r2, #0
   85516:	601a      	str	r2, [r3, #0]
				}
				store_can_msg(&can1_mailbox, i);			// Save CAN Message to the appropriate global register.
   85518:	79fb      	ldrb	r3, [r7, #7]
   8551a:	4812      	ldr	r0, [pc, #72]	; (85564 <CAN1_Handler+0xb4>)
   8551c:	4619      	mov	r1, r3
   8551e:	4b1b      	ldr	r3, [pc, #108]	; (8558c <CAN1_Handler+0xdc>)
   85520:	4798      	blx	r3
				
				/* Debug CAN Message 	*/
				debug_can_msg(&can1_mailbox, CAN1);
   85522:	4810      	ldr	r0, [pc, #64]	; (85564 <CAN1_Handler+0xb4>)
   85524:	4912      	ldr	r1, [pc, #72]	; (85570 <CAN1_Handler+0xc0>)
   85526:	4b1a      	ldr	r3, [pc, #104]	; (85590 <CAN1_Handler+0xe0>)
   85528:	4798      	blx	r3
				/* Decode CAN Message 	*/
				if (i == 7)
   8552a:	79fb      	ldrb	r3, [r7, #7]
   8552c:	2b07      	cmp	r3, #7
   8552e:	d103      	bne.n	85538 <CAN1_Handler+0x88>
					decode_can_command(&can1_mailbox, CAN1);
   85530:	480c      	ldr	r0, [pc, #48]	; (85564 <CAN1_Handler+0xb4>)
   85532:	490f      	ldr	r1, [pc, #60]	; (85570 <CAN1_Handler+0xc0>)
   85534:	4b17      	ldr	r3, [pc, #92]	; (85594 <CAN1_Handler+0xe4>)
   85536:	4798      	blx	r3

				if (i == 0)
   85538:	79fb      	ldrb	r3, [r7, #7]
   8553a:	2b00      	cmp	r3, #0
   8553c:	d103      	bne.n	85546 <CAN1_Handler+0x96>
					alert_can_data(&can1_mailbox, CAN1);
   8553e:	4809      	ldr	r0, [pc, #36]	; (85564 <CAN1_Handler+0xb4>)
   85540:	490b      	ldr	r1, [pc, #44]	; (85570 <CAN1_Handler+0xc0>)
   85542:	4b15      	ldr	r3, [pc, #84]	; (85598 <CAN1_Handler+0xe8>)
   85544:	4798      	blx	r3
				/*assert(g_ul_recv_status); ***Implement assert here.*/
				
				/* Restore the can1 mailbox object */
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
   85546:	4807      	ldr	r0, [pc, #28]	; (85564 <CAN1_Handler+0xb4>)
   85548:	4907      	ldr	r1, [pc, #28]	; (85568 <CAN1_Handler+0xb8>)
   8554a:	4b14      	ldr	r3, [pc, #80]	; (8559c <CAN1_Handler+0xec>)
   8554c:	4798      	blx	r3
				break;
   8554e:	e005      	b.n	8555c <CAN1_Handler+0xac>
   	save_can_object(&can1_mailbox, &temp_mailbox_C1);	//Doesn't erase the CAN message.
	
	ul_status = can_get_status(CAN1);
	if (ul_status & GLOBAL_MAILBOX_MASK) 
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   85550:	79fb      	ldrb	r3, [r7, #7]
   85552:	3301      	adds	r3, #1
   85554:	71fb      	strb	r3, [r7, #7]
   85556:	79fb      	ldrb	r3, [r7, #7]
   85558:	2b07      	cmp	r3, #7
   8555a:	d9bb      	bls.n	854d4 <CAN1_Handler+0x24>
				restore_can_object(&can1_mailbox, &temp_mailbox_C1);
				break;
			}
		}
	}
}
   8555c:	3708      	adds	r7, #8
   8555e:	46bd      	mov	sp, r7
   85560:	bd80      	pop	{r7, pc}
   85562:	bf00      	nop
   85564:	2007a664 	.word	0x2007a664
   85568:	2007a6a0 	.word	0x2007a6a0
   8556c:	00085b35 	.word	0x00085b35
   85570:	400b8000 	.word	0x400b8000
   85574:	00081bc1 	.word	0x00081bc1
   85578:	00081c05 	.word	0x00081c05
   8557c:	00081d85 	.word	0x00081d85
   85580:	01234567 	.word	0x01234567
   85584:	89abcdef 	.word	0x89abcdef
   85588:	2007a70c 	.word	0x2007a70c
   8558c:	00085871 	.word	0x00085871
   85590:	000855f5 	.word	0x000855f5
   85594:	00085655 	.word	0x00085655
   85598:	000857a9 	.word	0x000857a9
   8559c:	00085ba5 	.word	0x00085ba5

000855a0 <CAN0_Handler>:
/************************************************************************/
/* Interrupt Handler for CAN0										    */
/************************************************************************/
void CAN0_Handler(void)
{
   855a0:	b580      	push	{r7, lr}
   855a2:	b082      	sub	sp, #8
   855a4:	af00      	add	r7, sp, #0
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
   855a6:	4810      	ldr	r0, [pc, #64]	; (855e8 <CAN0_Handler+0x48>)
   855a8:	4b10      	ldr	r3, [pc, #64]	; (855ec <CAN0_Handler+0x4c>)
   855aa:	4798      	blx	r3
   855ac:	6038      	str	r0, [r7, #0]
	if (ul_status & GLOBAL_MAILBOX_MASK) 
   855ae:	683b      	ldr	r3, [r7, #0]
   855b0:	b2db      	uxtb	r3, r3
   855b2:	2b00      	cmp	r3, #0
   855b4:	d014      	beq.n	855e0 <CAN0_Handler+0x40>
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   855b6:	2300      	movs	r3, #0
   855b8:	71fb      	strb	r3, [r7, #7]
   855ba:	e00e      	b.n	855da <CAN0_Handler+0x3a>
		{
			ul_status = can_mailbox_get_status(CAN0, i);
   855bc:	79fb      	ldrb	r3, [r7, #7]
   855be:	480a      	ldr	r0, [pc, #40]	; (855e8 <CAN0_Handler+0x48>)
   855c0:	4619      	mov	r1, r3
   855c2:	4b0b      	ldr	r3, [pc, #44]	; (855f0 <CAN0_Handler+0x50>)
   855c4:	4798      	blx	r3
   855c6:	6038      	str	r0, [r7, #0]
			
			if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) 
   855c8:	683b      	ldr	r3, [r7, #0]
   855ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   855ce:	2b00      	cmp	r3, #0
   855d0:	d000      	beq.n	855d4 <CAN0_Handler+0x34>
			{
				//assert(g_ul_recv_status); ***implement assert here.
				break;
   855d2:	e005      	b.n	855e0 <CAN0_Handler+0x40>
	uint32_t ul_status;

	ul_status = can_get_status(CAN0);
	if (ul_status & GLOBAL_MAILBOX_MASK) 
	{
		for (uint8_t i = 0; i < CANMB_NUMBER; i++) 
   855d4:	79fb      	ldrb	r3, [r7, #7]
   855d6:	3301      	adds	r3, #1
   855d8:	71fb      	strb	r3, [r7, #7]
   855da:	79fb      	ldrb	r3, [r7, #7]
   855dc:	2b07      	cmp	r3, #7
   855de:	d9ed      	bls.n	855bc <CAN0_Handler+0x1c>
				//assert(g_ul_recv_status); ***implement assert here.
				break;
			}
		}
	}
}
   855e0:	3708      	adds	r7, #8
   855e2:	46bd      	mov	sp, r7
   855e4:	bd80      	pop	{r7, pc}
   855e6:	bf00      	nop
   855e8:	400b4000 	.word	0x400b4000
   855ec:	00081bc1 	.word	0x00081bc1
   855f0:	00081c05 	.word	0x00081c05

000855f4 <debug_can_msg>:
/************************************************************************/
/* DEBUG CAN MESSAGE 													*/
/* USED FOR debugging 													*/
/************************************************************************/
void debug_can_msg(can_mb_conf_t *p_mailbox, Can* controller)
{
   855f4:	b580      	push	{r7, lr}
   855f6:	b086      	sub	sp, #24
   855f8:	af00      	add	r7, sp, #0
   855fa:	6078      	str	r0, [r7, #4]
   855fc:	6039      	str	r1, [r7, #0]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   855fe:	687b      	ldr	r3, [r7, #4]
   85600:	699b      	ldr	r3, [r3, #24]
   85602:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85604:	687b      	ldr	r3, [r7, #4]
   85606:	69db      	ldr	r3, [r3, #28]
   85608:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8560a:	693b      	ldr	r3, [r7, #16]
   8560c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85610:	0c1b      	lsrs	r3, r3, #16
   85612:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85614:	693b      	ldr	r3, [r7, #16]
   85616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8561a:	0a1b      	lsrs	r3, r3, #8
   8561c:	73bb      	strb	r3, [r7, #14]

	if ((big_type == MT_COM) && (small_type == RESPONSE))
   8561e:	7bfb      	ldrb	r3, [r7, #15]
   85620:	2b02      	cmp	r3, #2
   85622:	d105      	bne.n	85630 <debug_can_msg+0x3c>
   85624:	7bbb      	ldrb	r3, [r7, #14]
   85626:	2b04      	cmp	r3, #4
   85628:	d102      	bne.n	85630 <debug_can_msg+0x3c>
		pio_toggle_pin(LED3_GPIO);	// LED2 indicates a command response.
   8562a:	2057      	movs	r0, #87	; 0x57
   8562c:	4b08      	ldr	r3, [pc, #32]	; (85650 <debug_can_msg+0x5c>)
   8562e:	4798      	blx	r3

	if (big_type == MT_HK)
   85630:	7bfb      	ldrb	r3, [r7, #15]
   85632:	2b01      	cmp	r3, #1
   85634:	d102      	bne.n	8563c <debug_can_msg+0x48>
		pio_toggle_pin(LED1_GPIO);	// LED1 indicates the reception of housekeeping.
   85636:	2055      	movs	r0, #85	; 0x55
   85638:	4b05      	ldr	r3, [pc, #20]	; (85650 <debug_can_msg+0x5c>)
   8563a:	4798      	blx	r3
	
	if (big_type == MT_DATA)
   8563c:	7bfb      	ldrb	r3, [r7, #15]
   8563e:	2b00      	cmp	r3, #0
   85640:	d102      	bne.n	85648 <debug_can_msg+0x54>
		pio_toggle_pin(LED2_GPIO);	// LED2 indicates the reception of data.
   85642:	2056      	movs	r0, #86	; 0x56
   85644:	4b02      	ldr	r3, [pc, #8]	; (85650 <debug_can_msg+0x5c>)
   85646:	4798      	blx	r3

	return;
   85648:	bf00      	nop
}
   8564a:	3718      	adds	r7, #24
   8564c:	46bd      	mov	sp, r7
   8564e:	bd80      	pop	{r7, pc}
   85650:	00082185 	.word	0x00082185

00085654 <decode_can_command>:
/* @param: *controller: used to verify authenticity						*/
/* @Purpose: This function decodes commands which are received and 		*/
/* performs different actions based on what was received. 				*/
/************************************************************************/
void decode_can_command(can_mb_conf_t *p_mailbox, Can* controller)
{
   85654:	b590      	push	{r4, r7, lr}
   85656:	b087      	sub	sp, #28
   85658:	af00      	add	r7, sp, #0
   8565a:	6078      	str	r0, [r7, #4]
   8565c:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8565e:	687b      	ldr	r3, [r7, #4]
   85660:	699b      	ldr	r3, [r3, #24]
   85662:	613b      	str	r3, [r7, #16]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85664:	687b      	ldr	r3, [r7, #4]
   85666:	69db      	ldr	r3, [r3, #28]
   85668:	60fb      	str	r3, [r7, #12]
	uint8_t sender, destination, big_type, small_type;
	BaseType_t wake_task;	// Not needed here.

	sender = (uint8_t)(uh_data_incom >> 28);
   8566a:	68fb      	ldr	r3, [r7, #12]
   8566c:	0f1b      	lsrs	r3, r3, #28
   8566e:	75fb      	strb	r3, [r7, #23]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   85670:	68fb      	ldr	r3, [r7, #12]
   85672:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   85676:	0e1b      	lsrs	r3, r3, #24
   85678:	75bb      	strb	r3, [r7, #22]
	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   8567a:	68fb      	ldr	r3, [r7, #12]
   8567c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   85680:	0c1b      	lsrs	r3, r3, #16
   85682:	757b      	strb	r3, [r7, #21]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   85684:	68fb      	ldr	r3, [r7, #12]
   85686:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8568a:	0a1b      	lsrs	r3, r3, #8
   8568c:	753b      	strb	r3, [r7, #20]

	if(big_type != MT_COM)
   8568e:	7d7b      	ldrb	r3, [r7, #21]
   85690:	2b02      	cmp	r3, #2
   85692:	d000      	beq.n	85696 <decode_can_command+0x42>
		return;
   85694:	e06f      	b.n	85776 <decode_can_command+0x122>
	
	switch(small_type)	// FROM WHO
   85696:	7d3b      	ldrb	r3, [r7, #20]
   85698:	3b06      	subs	r3, #6
   8569a:	2b0d      	cmp	r3, #13
   8569c:	d869      	bhi.n	85772 <decode_can_command+0x11e>
   8569e:	a201      	add	r2, pc, #4	; (adr r2, 856a4 <decode_can_command+0x50>)
   856a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   856a4:	000856dd 	.word	0x000856dd
   856a8:	00085773 	.word	0x00085773
   856ac:	00085705 	.word	0x00085705
   856b0:	00085773 	.word	0x00085773
   856b4:	00085773 	.word	0x00085773
   856b8:	00085773 	.word	0x00085773
   856bc:	00085773 	.word	0x00085773
   856c0:	00085773 	.word	0x00085773
   856c4:	0008572d 	.word	0x0008572d
   856c8:	00085773 	.word	0x00085773
   856cc:	0008576b 	.word	0x0008576b
   856d0:	0008575d 	.word	0x0008575d
   856d4:	00085773 	.word	0x00085773
   856d8:	00085761 	.word	0x00085761
	{
		case ACK_READ:
			switch(destination)
   856dc:	7dbb      	ldrb	r3, [r7, #22]
   856de:	2b04      	cmp	r3, #4
   856e0:	d000      	beq.n	856e4 <decode_can_command+0x90>
						hk_read_receive[1] = uh_data_incom;
						hk_read_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   856e2:	e00e      	b.n	85702 <decode_can_command+0xae>
	{
		case ACK_READ:
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_read_requestedf)
   856e4:	4b25      	ldr	r3, [pc, #148]	; (8577c <decode_can_command+0x128>)
   856e6:	781b      	ldrb	r3, [r3, #0]
   856e8:	2b00      	cmp	r3, #0
   856ea:	d009      	beq.n	85700 <decode_can_command+0xac>
					{
						hk_read_receivedf = 1;
   856ec:	4b24      	ldr	r3, [pc, #144]	; (85780 <decode_can_command+0x12c>)
   856ee:	2201      	movs	r2, #1
   856f0:	701a      	strb	r2, [r3, #0]
						hk_read_receive[1] = uh_data_incom;
   856f2:	68fa      	ldr	r2, [r7, #12]
   856f4:	4b23      	ldr	r3, [pc, #140]	; (85784 <decode_can_command+0x130>)
   856f6:	605a      	str	r2, [r3, #4]
						hk_read_receive[0] = ul_data_incom;
   856f8:	693a      	ldr	r2, [r7, #16]
   856fa:	4b22      	ldr	r3, [pc, #136]	; (85784 <decode_can_command+0x130>)
   856fc:	601a      	str	r2, [r3, #0]
					}
					break;
   856fe:	e7ff      	b.n	85700 <decode_can_command+0xac>
   85700:	bf00      	nop
				default :
					break;
			}
			break;
   85702:	e037      	b.n	85774 <decode_can_command+0x120>
		case ACK_WRITE :
			switch(destination)
   85704:	7dbb      	ldrb	r3, [r7, #22]
   85706:	2b04      	cmp	r3, #4
   85708:	d000      	beq.n	8570c <decode_can_command+0xb8>
						hk_write_receive[1] = uh_data_incom;
						hk_write_receive[0] = ul_data_incom;
					}
					break;
				default :
					break;
   8570a:	e00e      	b.n	8572a <decode_can_command+0xd6>
			break;
		case ACK_WRITE :
			switch(destination)
			{
				case HK_TASK_ID :
					if(hk_write_requestedf)
   8570c:	4b1e      	ldr	r3, [pc, #120]	; (85788 <decode_can_command+0x134>)
   8570e:	781b      	ldrb	r3, [r3, #0]
   85710:	2b00      	cmp	r3, #0
   85712:	d009      	beq.n	85728 <decode_can_command+0xd4>
					{
						hk_write_receivedf = 1;
   85714:	4b1d      	ldr	r3, [pc, #116]	; (8578c <decode_can_command+0x138>)
   85716:	2201      	movs	r2, #1
   85718:	701a      	strb	r2, [r3, #0]
						hk_write_receive[1] = uh_data_incom;
   8571a:	68fa      	ldr	r2, [r7, #12]
   8571c:	4b1c      	ldr	r3, [pc, #112]	; (85790 <decode_can_command+0x13c>)
   8571e:	605a      	str	r2, [r3, #4]
						hk_write_receive[0] = ul_data_incom;
   85720:	693a      	ldr	r2, [r7, #16]
   85722:	4b1b      	ldr	r3, [pc, #108]	; (85790 <decode_can_command+0x13c>)
   85724:	601a      	str	r2, [r3, #0]
					}
					break;
   85726:	e7ff      	b.n	85728 <decode_can_command+0xd4>
   85728:	bf00      	nop
				default :
					break;
			}
			break;
   8572a:	e023      	b.n	85774 <decode_can_command+0x120>
		case SEND_TC:
			xQueueSendToBackFromISR(tc_msg_fifo, &ul_data_incom, &wake_task);		// Telecommand reception FIFO.
   8572c:	4b19      	ldr	r3, [pc, #100]	; (85794 <decode_can_command+0x140>)
   8572e:	6819      	ldr	r1, [r3, #0]
   85730:	f107 0210 	add.w	r2, r7, #16
   85734:	f107 0308 	add.w	r3, r7, #8
   85738:	4608      	mov	r0, r1
   8573a:	4611      	mov	r1, r2
   8573c:	461a      	mov	r2, r3
   8573e:	2300      	movs	r3, #0
   85740:	4c15      	ldr	r4, [pc, #84]	; (85798 <decode_can_command+0x144>)
   85742:	47a0      	blx	r4
			xQueueSendToBackFromISR(tc_msg_fifo, &uh_data_incom, &wake_task);
   85744:	4b13      	ldr	r3, [pc, #76]	; (85794 <decode_can_command+0x140>)
   85746:	6819      	ldr	r1, [r3, #0]
   85748:	f107 020c 	add.w	r2, r7, #12
   8574c:	f107 0308 	add.w	r3, r7, #8
   85750:	4608      	mov	r0, r1
   85752:	4611      	mov	r1, r2
   85754:	461a      	mov	r2, r3
   85756:	2300      	movs	r3, #0
   85758:	4c0f      	ldr	r4, [pc, #60]	; (85798 <decode_can_command+0x144>)
   8575a:	47a0      	blx	r4
		case TC_PACKET_READY:
			start_tc_packet();
   8575c:	4b0f      	ldr	r3, [pc, #60]	; (8579c <decode_can_command+0x148>)
   8575e:	4798      	blx	r3
		case TM_TRANSACTION_RESP:
			tm_transfer_completef = (uint8_t)(ul_data_incom & 0x000000FF);
   85760:	693b      	ldr	r3, [r7, #16]
   85762:	b2da      	uxtb	r2, r3
   85764:	4b0e      	ldr	r3, [pc, #56]	; (857a0 <decode_can_command+0x14c>)
   85766:	701a      	strb	r2, [r3, #0]
			break;
   85768:	e004      	b.n	85774 <decode_can_command+0x120>
		case OK_START_TM_PACKET:
			start_tm_transferf = 1;
   8576a:	4b0e      	ldr	r3, [pc, #56]	; (857a4 <decode_can_command+0x150>)
   8576c:	2201      	movs	r2, #1
   8576e:	701a      	strb	r2, [r3, #0]
			break;
   85770:	e000      	b.n	85774 <decode_can_command+0x120>
		default :
			break;
   85772:	bf00      	nop
	}
	return;
   85774:	bf00      	nop
}
   85776:	371c      	adds	r7, #28
   85778:	46bd      	mov	sp, r7
   8577a:	bd90      	pop	{r4, r7, pc}
   8577c:	2007a719 	.word	0x2007a719
   85780:	2007a660 	.word	0x2007a660
   85784:	2007a694 	.word	0x2007a694
   85788:	2007a6cc 	.word	0x2007a6cc
   8578c:	2007a688 	.word	0x2007a688
   85790:	2007a6d8 	.word	0x2007a6d8
   85794:	2007a714 	.word	0x2007a714
   85798:	00083979 	.word	0x00083979
   8579c:	00086345 	.word	0x00086345
   857a0:	2007a710 	.word	0x2007a710
   857a4:	2007a686 	.word	0x2007a686

000857a8 <alert_can_data>:
/* @param: *controller: To be used to verify that the request was genuin*/
/* @Purpose: This function sets flags which let process know that they 	*/
/* have data waiting for them. 											*/
/************************************************************************/
void alert_can_data(can_mb_conf_t *p_mailbox, Can* controller)
{
   857a8:	b480      	push	{r7}
   857aa:	b087      	sub	sp, #28
   857ac:	af00      	add	r7, sp, #0
   857ae:	6078      	str	r0, [r7, #4]
   857b0:	6039      	str	r1, [r7, #0]
	//assert(g_ul_recv_status);		// Only decode if a message was received.	***Asserts here.
	//assert(controller);				// CAN0 or CAN1 are nonzero.
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   857b2:	687b      	ldr	r3, [r7, #4]
   857b4:	69db      	ldr	r3, [r3, #28]
   857b6:	617b      	str	r3, [r7, #20]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   857b8:	687b      	ldr	r3, [r7, #4]
   857ba:	699b      	ldr	r3, [r3, #24]
   857bc:	613b      	str	r3, [r7, #16]
	uint8_t big_type, small_type, destination;

	big_type = (uint8_t)((uh_data_incom & 0x00FF0000)>>16);
   857be:	697b      	ldr	r3, [r7, #20]
   857c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   857c4:	0c1b      	lsrs	r3, r3, #16
   857c6:	73fb      	strb	r3, [r7, #15]
	small_type = (uint8_t)((uh_data_incom & 0x0000FF00)>>8);
   857c8:	697b      	ldr	r3, [r7, #20]
   857ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   857ce:	0a1b      	lsrs	r3, r3, #8
   857d0:	73bb      	strb	r3, [r7, #14]
	destination = (uint8_t)((uh_data_incom & 0x0F000000)>>24);
   857d2:	697b      	ldr	r3, [r7, #20]
   857d4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
   857d8:	0e1b      	lsrs	r3, r3, #24
   857da:	737b      	strb	r3, [r7, #13]

	if(big_type != MT_DATA)
   857dc:	7bfb      	ldrb	r3, [r7, #15]
   857de:	2b00      	cmp	r3, #0
   857e0:	d000      	beq.n	857e4 <alert_can_data+0x3c>
		return;
   857e2:	e02f      	b.n	85844 <alert_can_data+0x9c>
	
	if(small_type == SPI_TEMP1)
   857e4:	7bbb      	ldrb	r3, [r7, #14]
   857e6:	2b01      	cmp	r3, #1
   857e8:	d102      	bne.n	857f0 <alert_can_data+0x48>
		glob_drf = 1;
   857ea:	4b19      	ldr	r3, [pc, #100]	; (85850 <alert_can_data+0xa8>)
   857ec:	2201      	movs	r2, #1
   857ee:	701a      	strb	r2, [r3, #0]
		
	if(small_type == COMS_PACKET)
   857f0:	7bbb      	ldrb	r3, [r7, #14]
   857f2:	2b02      	cmp	r3, #2
   857f4:	d102      	bne.n	857fc <alert_can_data+0x54>
		glob_comsf = 1;
   857f6:	4b17      	ldr	r3, [pc, #92]	; (85854 <alert_can_data+0xac>)
   857f8:	2201      	movs	r2, #1
   857fa:	701a      	strb	r2, [r3, #0]
		
	switch(destination)
   857fc:	7b7b      	ldrb	r3, [r7, #13]
   857fe:	2b08      	cmp	r3, #8
   85800:	d004      	beq.n	8580c <alert_can_data+0x64>
   85802:	2b09      	cmp	r3, #9
   85804:	d014      	beq.n	85830 <alert_can_data+0x88>
   85806:	2b07      	cmp	r3, #7
   85808:	d009      	beq.n	8581e <alert_can_data+0x76>
		case PAY_TASK_ID:
			pay_data_receivedf = 1;
			pay_data_receive[1] = uh_data_incom;
			pay_data_receive[0] = ul_data_incom;
		default:
			return;	
   8580a:	e01b      	b.n	85844 <alert_can_data+0x9c>
		glob_comsf = 1;
		
	switch(destination)
	{
		case EPS_TASK_ID:
			eps_data_receivedf = 1;
   8580c:	4b12      	ldr	r3, [pc, #72]	; (85858 <alert_can_data+0xb0>)
   8580e:	2201      	movs	r2, #1
   85810:	701a      	strb	r2, [r3, #0]
			eps_data_receive[1] = uh_data_incom;
   85812:	4b12      	ldr	r3, [pc, #72]	; (8585c <alert_can_data+0xb4>)
   85814:	697a      	ldr	r2, [r7, #20]
   85816:	605a      	str	r2, [r3, #4]
			eps_data_receive[0] = ul_data_incom;
   85818:	4b10      	ldr	r3, [pc, #64]	; (8585c <alert_can_data+0xb4>)
   8581a:	693a      	ldr	r2, [r7, #16]
   8581c:	601a      	str	r2, [r3, #0]
		case COMS_TASK_ID:
			coms_data_receivedf = 1;
   8581e:	4b10      	ldr	r3, [pc, #64]	; (85860 <alert_can_data+0xb8>)
   85820:	2201      	movs	r2, #1
   85822:	701a      	strb	r2, [r3, #0]
			coms_data_receive[1] = uh_data_incom;
   85824:	4b0f      	ldr	r3, [pc, #60]	; (85864 <alert_can_data+0xbc>)
   85826:	697a      	ldr	r2, [r7, #20]
   85828:	605a      	str	r2, [r3, #4]
			coms_data_receive[0] = ul_data_incom;
   8582a:	4b0e      	ldr	r3, [pc, #56]	; (85864 <alert_can_data+0xbc>)
   8582c:	693a      	ldr	r2, [r7, #16]
   8582e:	601a      	str	r2, [r3, #0]
		case PAY_TASK_ID:
			pay_data_receivedf = 1;
   85830:	4b0d      	ldr	r3, [pc, #52]	; (85868 <alert_can_data+0xc0>)
   85832:	2201      	movs	r2, #1
   85834:	701a      	strb	r2, [r3, #0]
			pay_data_receive[1] = uh_data_incom;
   85836:	4b0d      	ldr	r3, [pc, #52]	; (8586c <alert_can_data+0xc4>)
   85838:	697a      	ldr	r2, [r7, #20]
   8583a:	605a      	str	r2, [r3, #4]
			pay_data_receive[0] = ul_data_incom;
   8583c:	4b0b      	ldr	r3, [pc, #44]	; (8586c <alert_can_data+0xc4>)
   8583e:	693a      	ldr	r2, [r7, #16]
   85840:	601a      	str	r2, [r3, #0]
		default:
			return;	
   85842:	bf00      	nop
	}
	return;
}
   85844:	371c      	adds	r7, #28
   85846:	46bd      	mov	sp, r7
   85848:	f85d 7b04 	ldr.w	r7, [sp], #4
   8584c:	4770      	bx	lr
   8584e:	bf00      	nop
   85850:	2007a684 	.word	0x2007a684
   85854:	2007a687 	.word	0x2007a687
   85858:	2007a720 	.word	0x2007a720
   8585c:	2007a700 	.word	0x2007a700
   85860:	2007a685 	.word	0x2007a685
   85864:	2007a6c4 	.word	0x2007a6c4
   85868:	2007a728 	.word	0x2007a728
   8586c:	2007a6d0 	.word	0x2007a6d0

00085870 <store_can_msg>:
/* @param: mb: The mailbox from which the message was received. 		*/
/* @Purpose: This function takes a message which was received and stores*/
/* in the proper FIFO in memory.										*/
/************************************************************************/
void store_can_msg(can_mb_conf_t *p_mailbox, uint8_t mb)
{
   85870:	b590      	push	{r4, r7, lr}
   85872:	b087      	sub	sp, #28
   85874:	af00      	add	r7, sp, #0
   85876:	6078      	str	r0, [r7, #4]
   85878:	460b      	mov	r3, r1
   8587a:	70fb      	strb	r3, [r7, #3]
	uint32_t ul_data_incom = p_mailbox->ul_datal;
   8587c:	687b      	ldr	r3, [r7, #4]
   8587e:	699b      	ldr	r3, [r3, #24]
   85880:	617b      	str	r3, [r7, #20]
	uint32_t uh_data_incom = p_mailbox->ul_datah;
   85882:	687b      	ldr	r3, [r7, #4]
   85884:	69db      	ldr	r3, [r3, #28]
   85886:	613b      	str	r3, [r7, #16]
	BaseType_t wake_task;	// Not needed here.

	/* UPDATE THE GLOBAL CAN REGS		*/
	switch(mb)
   85888:	78fb      	ldrb	r3, [r7, #3]
   8588a:	2b07      	cmp	r3, #7
   8588c:	d873      	bhi.n	85976 <store_can_msg+0x106>
   8588e:	a201      	add	r2, pc, #4	; (adr r2, 85894 <store_can_msg+0x24>)
   85890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85894:	000858b5 	.word	0x000858b5
   85898:	00085977 	.word	0x00085977
   8589c:	00085977 	.word	0x00085977
   858a0:	00085977 	.word	0x00085977
   858a4:	00085977 	.word	0x00085977
   858a8:	000858e5 	.word	0x000858e5
   858ac:	00085915 	.word	0x00085915
   858b0:	00085945 	.word	0x00085945
	{		
	case 0 :
		xQueueSendToBackFromISR(can_data_fifo, &ul_data_incom, &wake_task);		// Global CAN Data FIFO
   858b4:	4b32      	ldr	r3, [pc, #200]	; (85980 <store_can_msg+0x110>)
   858b6:	6819      	ldr	r1, [r3, #0]
   858b8:	f107 0214 	add.w	r2, r7, #20
   858bc:	f107 030c 	add.w	r3, r7, #12
   858c0:	4608      	mov	r0, r1
   858c2:	4611      	mov	r1, r2
   858c4:	461a      	mov	r2, r3
   858c6:	2300      	movs	r3, #0
   858c8:	4c2e      	ldr	r4, [pc, #184]	; (85984 <store_can_msg+0x114>)
   858ca:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_data_fifo, &uh_data_incom, &wake_task);
   858cc:	4b2c      	ldr	r3, [pc, #176]	; (85980 <store_can_msg+0x110>)
   858ce:	6819      	ldr	r1, [r3, #0]
   858d0:	f107 0210 	add.w	r2, r7, #16
   858d4:	f107 030c 	add.w	r3, r7, #12
   858d8:	4608      	mov	r0, r1
   858da:	4611      	mov	r1, r2
   858dc:	461a      	mov	r2, r3
   858de:	2300      	movs	r3, #0
   858e0:	4c28      	ldr	r4, [pc, #160]	; (85984 <store_can_msg+0x114>)
   858e2:	47a0      	blx	r4
		
	case 5 :
		xQueueSendToBackFromISR(can_msg_fifo, &ul_data_incom, &wake_task);		// Global CAN Message FIFO
   858e4:	4b28      	ldr	r3, [pc, #160]	; (85988 <store_can_msg+0x118>)
   858e6:	6819      	ldr	r1, [r3, #0]
   858e8:	f107 0214 	add.w	r2, r7, #20
   858ec:	f107 030c 	add.w	r3, r7, #12
   858f0:	4608      	mov	r0, r1
   858f2:	4611      	mov	r1, r2
   858f4:	461a      	mov	r2, r3
   858f6:	2300      	movs	r3, #0
   858f8:	4c22      	ldr	r4, [pc, #136]	; (85984 <store_can_msg+0x114>)
   858fa:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_msg_fifo, &uh_data_incom, &wake_task);
   858fc:	4b22      	ldr	r3, [pc, #136]	; (85988 <store_can_msg+0x118>)
   858fe:	6819      	ldr	r1, [r3, #0]
   85900:	f107 0210 	add.w	r2, r7, #16
   85904:	f107 030c 	add.w	r3, r7, #12
   85908:	4608      	mov	r0, r1
   8590a:	4611      	mov	r1, r2
   8590c:	461a      	mov	r2, r3
   8590e:	2300      	movs	r3, #0
   85910:	4c1c      	ldr	r4, [pc, #112]	; (85984 <store_can_msg+0x114>)
   85912:	47a0      	blx	r4
	
	case 6 :
		xQueueSendToBackFromISR(can_hk_fifo, &ul_data_incom, &wake_task);		// Global CAN HK FIFO.
   85914:	4b1d      	ldr	r3, [pc, #116]	; (8598c <store_can_msg+0x11c>)
   85916:	6819      	ldr	r1, [r3, #0]
   85918:	f107 0214 	add.w	r2, r7, #20
   8591c:	f107 030c 	add.w	r3, r7, #12
   85920:	4608      	mov	r0, r1
   85922:	4611      	mov	r1, r2
   85924:	461a      	mov	r2, r3
   85926:	2300      	movs	r3, #0
   85928:	4c16      	ldr	r4, [pc, #88]	; (85984 <store_can_msg+0x114>)
   8592a:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_hk_fifo, &uh_data_incom, &wake_task);
   8592c:	4b17      	ldr	r3, [pc, #92]	; (8598c <store_can_msg+0x11c>)
   8592e:	6819      	ldr	r1, [r3, #0]
   85930:	f107 0210 	add.w	r2, r7, #16
   85934:	f107 030c 	add.w	r3, r7, #12
   85938:	4608      	mov	r0, r1
   8593a:	4611      	mov	r1, r2
   8593c:	461a      	mov	r2, r3
   8593e:	2300      	movs	r3, #0
   85940:	4c10      	ldr	r4, [pc, #64]	; (85984 <store_can_msg+0x114>)
   85942:	47a0      	blx	r4
	
	case 7 :
		xQueueSendToBackFromISR(can_com_fifo, &ul_data_incom, &wake_task);		// Global CAN Command FIFO
   85944:	4b12      	ldr	r3, [pc, #72]	; (85990 <store_can_msg+0x120>)
   85946:	6819      	ldr	r1, [r3, #0]
   85948:	f107 0214 	add.w	r2, r7, #20
   8594c:	f107 030c 	add.w	r3, r7, #12
   85950:	4608      	mov	r0, r1
   85952:	4611      	mov	r1, r2
   85954:	461a      	mov	r2, r3
   85956:	2300      	movs	r3, #0
   85958:	4c0a      	ldr	r4, [pc, #40]	; (85984 <store_can_msg+0x114>)
   8595a:	47a0      	blx	r4
		xQueueSendToBackFromISR(can_com_fifo, &uh_data_incom, &wake_task);
   8595c:	4b0c      	ldr	r3, [pc, #48]	; (85990 <store_can_msg+0x120>)
   8595e:	6819      	ldr	r1, [r3, #0]
   85960:	f107 0210 	add.w	r2, r7, #16
   85964:	f107 030c 	add.w	r3, r7, #12
   85968:	4608      	mov	r0, r1
   8596a:	4611      	mov	r1, r2
   8596c:	461a      	mov	r2, r3
   8596e:	2300      	movs	r3, #0
   85970:	4c04      	ldr	r4, [pc, #16]	; (85984 <store_can_msg+0x114>)
   85972:	47a0      	blx	r4
		// be able to use without reading CAN messages.
		// Of course, CAN messages and FIFOs will still be used to transmit info
		// to the requesting process.

	default :
		return;
   85974:	bf00      	nop
   85976:	bf00      	nop
	}
	return;
}
   85978:	371c      	adds	r7, #28
   8597a:	46bd      	mov	sp, r7
   8597c:	bd90      	pop	{r4, r7, pc}
   8597e:	bf00      	nop
   85980:	2007a69c 	.word	0x2007a69c
   85984:	00083979 	.word	0x00083979
   85988:	2007a738 	.word	0x2007a738
   8598c:	2007a654 	.word	0x2007a654
   85990:	2007a71c 	.word	0x2007a71c

00085994 <reset_mailbox_conf>:
/* RESET_MAILBOX_CONF 		                                            */
/* @param: *p_mailbox: the mailbox object to be reset. 					*/
/* @Purpose: This function resets the attributes of object p_mailbox.	*/
/************************************************************************/
void reset_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   85994:	b480      	push	{r7}
   85996:	b083      	sub	sp, #12
   85998:	af00      	add	r7, sp, #0
   8599a:	6078      	str	r0, [r7, #4]
	p_mailbox->ul_mb_idx = 0;
   8599c:	687b      	ldr	r3, [r7, #4]
   8599e:	2200      	movs	r2, #0
   859a0:	601a      	str	r2, [r3, #0]
	p_mailbox->uc_obj_type = 0;
   859a2:	687b      	ldr	r3, [r7, #4]
   859a4:	2200      	movs	r2, #0
   859a6:	711a      	strb	r2, [r3, #4]
	p_mailbox->uc_id_ver = 0;
   859a8:	687b      	ldr	r3, [r7, #4]
   859aa:	2200      	movs	r2, #0
   859ac:	715a      	strb	r2, [r3, #5]
	p_mailbox->uc_length = 0;
   859ae:	687b      	ldr	r3, [r7, #4]
   859b0:	2200      	movs	r2, #0
   859b2:	719a      	strb	r2, [r3, #6]
	p_mailbox->uc_tx_prio = 0;
   859b4:	687b      	ldr	r3, [r7, #4]
   859b6:	2200      	movs	r2, #0
   859b8:	71da      	strb	r2, [r3, #7]
	p_mailbox->ul_status = 0;
   859ba:	687b      	ldr	r3, [r7, #4]
   859bc:	2200      	movs	r2, #0
   859be:	609a      	str	r2, [r3, #8]
	p_mailbox->ul_id_msk = 0;
   859c0:	687b      	ldr	r3, [r7, #4]
   859c2:	2200      	movs	r2, #0
   859c4:	60da      	str	r2, [r3, #12]
	p_mailbox->ul_id = 0;
   859c6:	687b      	ldr	r3, [r7, #4]
   859c8:	2200      	movs	r2, #0
   859ca:	611a      	str	r2, [r3, #16]
	p_mailbox->ul_fid = 0;
   859cc:	687b      	ldr	r3, [r7, #4]
   859ce:	2200      	movs	r2, #0
   859d0:	615a      	str	r2, [r3, #20]
	p_mailbox->ul_datal = 0;
   859d2:	687b      	ldr	r3, [r7, #4]
   859d4:	2200      	movs	r2, #0
   859d6:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = 0;
   859d8:	687b      	ldr	r3, [r7, #4]
   859da:	2200      	movs	r2, #0
   859dc:	61da      	str	r2, [r3, #28]

	return;
   859de:	bf00      	nop
}
   859e0:	370c      	adds	r7, #12
   859e2:	46bd      	mov	sp, r7
   859e4:	f85d 7b04 	ldr.w	r7, [sp], #4
   859e8:	4770      	bx	lr
   859ea:	bf00      	nop

000859ec <send_can_command_h>:
/* @NOTE: 1 != Success (Necessarily) 									*/
/* @NOTE: This is a helper function, it is only to be used in sections  */
/* of code where the Can0_Mutex has been acquired.						*/
/************************************************************************/
uint32_t send_can_command_h(uint32_t low, uint32_t high, uint32_t ID, uint32_t PRIORITY)
{	
   859ec:	b580      	push	{r7, lr}
   859ee:	b086      	sub	sp, #24
   859f0:	af00      	add	r7, sp, #0
   859f2:	60f8      	str	r0, [r7, #12]
   859f4:	60b9      	str	r1, [r7, #8]
   859f6:	607a      	str	r2, [r7, #4]
   859f8:	603b      	str	r3, [r7, #0]
	uint32_t timeout = 8400;		// ~ 100 us timeout.
   859fa:	f242 03d0 	movw	r3, #8400	; 0x20d0
   859fe:	617b      	str	r3, [r7, #20]
	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */	
	/* CAN0 MB7 == COMMAND/MSG MB				*/
	reset_mailbox_conf(&can0_mailbox);
   85a00:	4819      	ldr	r0, [pc, #100]	; (85a68 <send_can_command_h+0x7c>)
   85a02:	4b1a      	ldr	r3, [pc, #104]	; (85a6c <send_can_command_h+0x80>)
   85a04:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;						//Mailbox Number 7
   85a06:	4b18      	ldr	r3, [pc, #96]	; (85a68 <send_can_command_h+0x7c>)
   85a08:	2207      	movs	r2, #7
   85a0a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85a0c:	4b16      	ldr	r3, [pc, #88]	; (85a68 <send_can_command_h+0x7c>)
   85a0e:	2203      	movs	r2, #3
   85a10:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = PRIORITY;				//Transmission Priority (Can be Changed dynamically)
   85a12:	683b      	ldr	r3, [r7, #0]
   85a14:	b2da      	uxtb	r2, r3
   85a16:	4b14      	ldr	r3, [pc, #80]	; (85a68 <send_can_command_h+0x7c>)
   85a18:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85a1a:	4b13      	ldr	r3, [pc, #76]	; (85a68 <send_can_command_h+0x7c>)
   85a1c:	2200      	movs	r2, #0
   85a1e:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85a20:	4b11      	ldr	r3, [pc, #68]	; (85a68 <send_can_command_h+0x7c>)
   85a22:	2200      	movs	r2, #0
   85a24:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85a26:	4812      	ldr	r0, [pc, #72]	; (85a70 <send_can_command_h+0x84>)
   85a28:	490f      	ldr	r1, [pc, #60]	; (85a68 <send_can_command_h+0x7c>)
   85a2a:	4b12      	ldr	r3, [pc, #72]	; (85a74 <send_can_command_h+0x88>)
   85a2c:	4798      	blx	r3

	/* Write transmit information into mailbox. */
	can0_mailbox.ul_id = CAN_MID_MIDvA(ID);			// ID of the message being sent,
   85a2e:	687b      	ldr	r3, [r7, #4]
   85a30:	049a      	lsls	r2, r3, #18
   85a32:	4b11      	ldr	r3, [pc, #68]	; (85a78 <send_can_command_h+0x8c>)
   85a34:	4013      	ands	r3, r2
   85a36:	4a0c      	ldr	r2, [pc, #48]	; (85a68 <send_can_command_h+0x7c>)
   85a38:	6113      	str	r3, [r2, #16]
	can0_mailbox.ul_datal = low;					// shifted over to the standard frame position.
   85a3a:	4b0b      	ldr	r3, [pc, #44]	; (85a68 <send_can_command_h+0x7c>)
   85a3c:	68fa      	ldr	r2, [r7, #12]
   85a3e:	619a      	str	r2, [r3, #24]
	can0_mailbox.ul_datah = high;
   85a40:	4b09      	ldr	r3, [pc, #36]	; (85a68 <send_can_command_h+0x7c>)
   85a42:	68ba      	ldr	r2, [r7, #8]
   85a44:	61da      	str	r2, [r3, #28]
	can0_mailbox.uc_length = MAX_CAN_FRAME_DATA_LEN;
   85a46:	4b08      	ldr	r3, [pc, #32]	; (85a68 <send_can_command_h+0x7c>)
   85a48:	2208      	movs	r2, #8
   85a4a:	719a      	strb	r2, [r3, #6]
	can_mailbox_write(CAN0, &can0_mailbox);
   85a4c:	4808      	ldr	r0, [pc, #32]	; (85a70 <send_can_command_h+0x84>)
   85a4e:	4906      	ldr	r1, [pc, #24]	; (85a68 <send_can_command_h+0x7c>)
   85a50:	4b0a      	ldr	r3, [pc, #40]	; (85a7c <send_can_command_h+0x90>)
   85a52:	4798      	blx	r3

	/* Send out the information in the mailbox. */
	can_global_send_transfer_cmd(CAN0, CAN_TCR_MB7);
   85a54:	4806      	ldr	r0, [pc, #24]	; (85a70 <send_can_command_h+0x84>)
   85a56:	2180      	movs	r1, #128	; 0x80
   85a58:	4b09      	ldr	r3, [pc, #36]	; (85a80 <send_can_command_h+0x94>)
   85a5a:	4798      	blx	r3
	
	return 0;
   85a5c:	2300      	movs	r3, #0
}
   85a5e:	4618      	mov	r0, r3
   85a60:	3718      	adds	r7, #24
   85a62:	46bd      	mov	sp, r7
   85a64:	bd80      	pop	{r7, pc}
   85a66:	bf00      	nop
   85a68:	2007a6e0 	.word	0x2007a6e0
   85a6c:	00085995 	.word	0x00085995
   85a70:	400b4000 	.word	0x400b4000
   85a74:	00081c65 	.word	0x00081c65
   85a78:	1ffc0000 	.word	0x1ffc0000
   85a7c:	00081e49 	.word	0x00081e49
   85a80:	00081bd9 	.word	0x00081bd9

00085a84 <send_can_command>:
/* @Purpose: This function sends an 8 byte message to the SSM chosen. 	*/
/* @return: 1 == completed, (<=0) == failure.							*/
/* @NOTE: 1 != Success (Necessarily) 									*/
/************************************************************************/
int send_can_command(uint32_t low, uint8_t byte_four, uint8_t sender_id, uint8_t ssm_id, uint8_t smalltype, uint8_t priority)
{	
   85a84:	b590      	push	{r4, r7, lr}
   85a86:	b087      	sub	sp, #28
   85a88:	af00      	add	r7, sp, #0
   85a8a:	6078      	str	r0, [r7, #4]
   85a8c:	70f9      	strb	r1, [r7, #3]
   85a8e:	70ba      	strb	r2, [r7, #2]
   85a90:	707b      	strb	r3, [r7, #1]
	uint32_t timeout = 8400;		// ~ 100 us timeout.
   85a92:	f242 03d0 	movw	r3, #8400	; 0x20d0
   85a96:	60fb      	str	r3, [r7, #12]
	uint32_t id, ret_val, high;
	
	if(ssm_id == COMS_ID)
   85a98:	787b      	ldrb	r3, [r7, #1]
   85a9a:	2b00      	cmp	r3, #0
   85a9c:	d101      	bne.n	85aa2 <send_can_command+0x1e>
		id = SUB0_ID0;
   85a9e:	2314      	movs	r3, #20
   85aa0:	617b      	str	r3, [r7, #20]
	if(ssm_id == EPS_ID)
   85aa2:	787b      	ldrb	r3, [r7, #1]
   85aa4:	2b01      	cmp	r3, #1
   85aa6:	d101      	bne.n	85aac <send_can_command+0x28>
		id = SUB1_ID0;
   85aa8:	231a      	movs	r3, #26
   85aaa:	617b      	str	r3, [r7, #20]
	if(ssm_id == PAY_ID)
   85aac:	787b      	ldrb	r3, [r7, #1]
   85aae:	2b02      	cmp	r3, #2
   85ab0:	d101      	bne.n	85ab6 <send_can_command+0x32>
		id = SUB2_ID0;
   85ab2:	2320      	movs	r3, #32
   85ab4:	617b      	str	r3, [r7, #20]
		
	high = high_command_generator(sender_id, ssm_id, MT_COM, smalltype);
   85ab6:	78b9      	ldrb	r1, [r7, #2]
   85ab8:	787a      	ldrb	r2, [r7, #1]
   85aba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   85abe:	4608      	mov	r0, r1
   85ac0:	4611      	mov	r1, r2
   85ac2:	2202      	movs	r2, #2
   85ac4:	4c16      	ldr	r4, [pc, #88]	; (85b20 <send_can_command+0x9c>)
   85ac6:	47a0      	blx	r4
   85ac8:	6138      	str	r0, [r7, #16]
	if(byte_four)
   85aca:	78fb      	ldrb	r3, [r7, #3]
   85acc:	2b00      	cmp	r3, #0
   85ace:	d003      	beq.n	85ad8 <send_can_command+0x54>
		high &= (uint32_t)byte_four;
   85ad0:	78fb      	ldrb	r3, [r7, #3]
   85ad2:	693a      	ldr	r2, [r7, #16]
   85ad4:	4013      	ands	r3, r2
   85ad6:	613b      	str	r3, [r7, #16]

	if (xSemaphoreTake(Can0_Mutex, (TickType_t) 1) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   85ad8:	4b12      	ldr	r3, [pc, #72]	; (85b24 <send_can_command+0xa0>)
   85ada:	681b      	ldr	r3, [r3, #0]
   85adc:	4618      	mov	r0, r3
   85ade:	2100      	movs	r1, #0
   85ae0:	2201      	movs	r2, #1
   85ae2:	2300      	movs	r3, #0
   85ae4:	4c10      	ldr	r4, [pc, #64]	; (85b28 <send_can_command+0xa4>)
   85ae6:	47a0      	blx	r4
   85ae8:	4603      	mov	r3, r0
   85aea:	2b01      	cmp	r3, #1
   85aec:	d111      	bne.n	85b12 <send_can_command+0x8e>
	{
		ret_val = send_can_command_h(low, high, id, priority);
   85aee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   85af2:	6878      	ldr	r0, [r7, #4]
   85af4:	6939      	ldr	r1, [r7, #16]
   85af6:	697a      	ldr	r2, [r7, #20]
   85af8:	4c0c      	ldr	r4, [pc, #48]	; (85b2c <send_can_command+0xa8>)
   85afa:	47a0      	blx	r4
   85afc:	60b8      	str	r0, [r7, #8]
		xSemaphoreGive(Can0_Mutex);
   85afe:	4b09      	ldr	r3, [pc, #36]	; (85b24 <send_can_command+0xa0>)
   85b00:	681b      	ldr	r3, [r3, #0]
   85b02:	4618      	mov	r0, r3
   85b04:	2100      	movs	r1, #0
   85b06:	2200      	movs	r2, #0
   85b08:	2300      	movs	r3, #0
   85b0a:	4c09      	ldr	r4, [pc, #36]	; (85b30 <send_can_command+0xac>)
   85b0c:	47a0      	blx	r4
		return (int)ret_val;
   85b0e:	68bb      	ldr	r3, [r7, #8]
   85b10:	e001      	b.n	85b16 <send_can_command+0x92>
	}
	
	else
		return -1;												// CAN0 is currently busy, or something has gone wrong.
   85b12:	f04f 33ff 	mov.w	r3, #4294967295
}
   85b16:	4618      	mov	r0, r3
   85b18:	371c      	adds	r7, #28
   85b1a:	46bd      	mov	sp, r7
   85b1c:	bd90      	pop	{r4, r7, pc}
   85b1e:	bf00      	nop
   85b20:	00085fb9 	.word	0x00085fb9
   85b24:	2007a724 	.word	0x2007a724
   85b28:	00083a75 	.word	0x00083a75
   85b2c:	000859ed 	.word	0x000859ed
   85b30:	000837b5 	.word	0x000837b5

00085b34 <save_can_object>:
/* the one that enables the functionality you want.						*/
/* @Purpose: The function takes all the attributes of the original		*/
/* object and stores them in the temp object.							*/
/************************************************************************/
void save_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85b34:	b480      	push	{r7}
   85b36:	b083      	sub	sp, #12
   85b38:	af00      	add	r7, sp, #0
   85b3a:	6078      	str	r0, [r7, #4]
   85b3c:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/
	
	temp->ul_mb_idx		= original->ul_mb_idx;
   85b3e:	687b      	ldr	r3, [r7, #4]
   85b40:	681a      	ldr	r2, [r3, #0]
   85b42:	683b      	ldr	r3, [r7, #0]
   85b44:	601a      	str	r2, [r3, #0]
	temp->uc_obj_type	= original->uc_obj_type;
   85b46:	687b      	ldr	r3, [r7, #4]
   85b48:	791a      	ldrb	r2, [r3, #4]
   85b4a:	683b      	ldr	r3, [r7, #0]
   85b4c:	711a      	strb	r2, [r3, #4]
	temp->uc_id_ver		= original->uc_id_ver;
   85b4e:	687b      	ldr	r3, [r7, #4]
   85b50:	795a      	ldrb	r2, [r3, #5]
   85b52:	683b      	ldr	r3, [r7, #0]
   85b54:	715a      	strb	r2, [r3, #5]
	temp->uc_length		= original->uc_length;
   85b56:	687b      	ldr	r3, [r7, #4]
   85b58:	799a      	ldrb	r2, [r3, #6]
   85b5a:	683b      	ldr	r3, [r7, #0]
   85b5c:	719a      	strb	r2, [r3, #6]
	temp->uc_tx_prio	= original->uc_tx_prio;
   85b5e:	687b      	ldr	r3, [r7, #4]
   85b60:	79da      	ldrb	r2, [r3, #7]
   85b62:	683b      	ldr	r3, [r7, #0]
   85b64:	71da      	strb	r2, [r3, #7]
	temp->ul_status		= original->ul_status;
   85b66:	687b      	ldr	r3, [r7, #4]
   85b68:	689a      	ldr	r2, [r3, #8]
   85b6a:	683b      	ldr	r3, [r7, #0]
   85b6c:	609a      	str	r2, [r3, #8]
	temp->ul_id_msk		= original->ul_id_msk;
   85b6e:	687b      	ldr	r3, [r7, #4]
   85b70:	68da      	ldr	r2, [r3, #12]
   85b72:	683b      	ldr	r3, [r7, #0]
   85b74:	60da      	str	r2, [r3, #12]
	temp->ul_id			= original->ul_id;
   85b76:	687b      	ldr	r3, [r7, #4]
   85b78:	691a      	ldr	r2, [r3, #16]
   85b7a:	683b      	ldr	r3, [r7, #0]
   85b7c:	611a      	str	r2, [r3, #16]
	temp->ul_fid		= original->ul_fid;
   85b7e:	687b      	ldr	r3, [r7, #4]
   85b80:	695a      	ldr	r2, [r3, #20]
   85b82:	683b      	ldr	r3, [r7, #0]
   85b84:	615a      	str	r2, [r3, #20]
	temp->ul_datal		= original->ul_datal;
   85b86:	687b      	ldr	r3, [r7, #4]
   85b88:	699a      	ldr	r2, [r3, #24]
   85b8a:	683b      	ldr	r3, [r7, #0]
   85b8c:	619a      	str	r2, [r3, #24]
	temp->ul_datah		= original->ul_datah;
   85b8e:	687b      	ldr	r3, [r7, #4]
   85b90:	69da      	ldr	r2, [r3, #28]
   85b92:	683b      	ldr	r3, [r7, #0]
   85b94:	61da      	str	r2, [r3, #28]
	
	return;
   85b96:	bf00      	nop
}
   85b98:	370c      	adds	r7, #12
   85b9a:	46bd      	mov	sp, r7
   85b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   85ba0:	4770      	bx	lr
   85ba2:	bf00      	nop

00085ba4 <restore_can_object>:
/* @param: *temp: A pointer to what was the temporary CAN object.		*/
/* @Purpose: This function replaces all the attributes of the "original"*/
/* object with all the attributes in the "temp" object.					*/
/************************************************************************/
void restore_can_object(can_mb_conf_t *original, can_temp_t *temp)
{
   85ba4:	b480      	push	{r7}
   85ba6:	b083      	sub	sp, #12
   85ba8:	af00      	add	r7, sp, #0
   85baa:	6078      	str	r0, [r7, #4]
   85bac:	6039      	str	r1, [r7, #0]
	/*This function takes in a mailbox object as the original pointer*/	
	
	original->ul_mb_idx		= temp->ul_mb_idx; 
   85bae:	683b      	ldr	r3, [r7, #0]
   85bb0:	681a      	ldr	r2, [r3, #0]
   85bb2:	687b      	ldr	r3, [r7, #4]
   85bb4:	601a      	str	r2, [r3, #0]
	original->uc_obj_type	= temp->uc_obj_type;
   85bb6:	683b      	ldr	r3, [r7, #0]
   85bb8:	791a      	ldrb	r2, [r3, #4]
   85bba:	687b      	ldr	r3, [r7, #4]
   85bbc:	711a      	strb	r2, [r3, #4]
	original->uc_id_ver		= temp->uc_id_ver;
   85bbe:	683b      	ldr	r3, [r7, #0]
   85bc0:	795a      	ldrb	r2, [r3, #5]
   85bc2:	687b      	ldr	r3, [r7, #4]
   85bc4:	715a      	strb	r2, [r3, #5]
	original->uc_length		= temp->uc_length;
   85bc6:	683b      	ldr	r3, [r7, #0]
   85bc8:	799a      	ldrb	r2, [r3, #6]
   85bca:	687b      	ldr	r3, [r7, #4]
   85bcc:	719a      	strb	r2, [r3, #6]
	original->uc_tx_prio	= temp->uc_tx_prio;
   85bce:	683b      	ldr	r3, [r7, #0]
   85bd0:	79da      	ldrb	r2, [r3, #7]
   85bd2:	687b      	ldr	r3, [r7, #4]
   85bd4:	71da      	strb	r2, [r3, #7]
	original->ul_status		= temp->ul_status;
   85bd6:	683b      	ldr	r3, [r7, #0]
   85bd8:	689a      	ldr	r2, [r3, #8]
   85bda:	687b      	ldr	r3, [r7, #4]
   85bdc:	609a      	str	r2, [r3, #8]
	original->ul_id_msk		= temp->ul_id_msk;
   85bde:	683b      	ldr	r3, [r7, #0]
   85be0:	68da      	ldr	r2, [r3, #12]
   85be2:	687b      	ldr	r3, [r7, #4]
   85be4:	60da      	str	r2, [r3, #12]
	original->ul_id			= temp->ul_id;
   85be6:	683b      	ldr	r3, [r7, #0]
   85be8:	691a      	ldr	r2, [r3, #16]
   85bea:	687b      	ldr	r3, [r7, #4]
   85bec:	611a      	str	r2, [r3, #16]
	original->ul_fid		= temp->ul_fid;
   85bee:	683b      	ldr	r3, [r7, #0]
   85bf0:	695a      	ldr	r2, [r3, #20]
   85bf2:	687b      	ldr	r3, [r7, #4]
   85bf4:	615a      	str	r2, [r3, #20]
	original->ul_datal		= temp->ul_datal;
   85bf6:	683b      	ldr	r3, [r7, #0]
   85bf8:	699a      	ldr	r2, [r3, #24]
   85bfa:	687b      	ldr	r3, [r7, #4]
   85bfc:	619a      	str	r2, [r3, #24]
	original->ul_datah		= temp->ul_datah;
   85bfe:	683b      	ldr	r3, [r7, #0]
   85c00:	69da      	ldr	r2, [r3, #28]
   85c02:	687b      	ldr	r3, [r7, #4]
   85c04:	61da      	str	r2, [r3, #28]
	
	return;
   85c06:	bf00      	nop
}
   85c08:	370c      	adds	r7, #12
   85c0a:	46bd      	mov	sp, r7
   85c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
   85c10:	4770      	bx	lr
   85c12:	bf00      	nop

00085c14 <can_initialize>:
/* CAN_INITIALIZE 			                                            */
/* @Purpose: Initializes and enables CAN0 & CAN1 controllers and clocks.*/
/* CAN0/CAN1 mailboxes are reset and interrupts are disabled.			*/
/************************************************************************/
void can_initialize(void)
{
   85c14:	b580      	push	{r7, lr}
   85c16:	b086      	sub	sp, #24
   85c18:	af00      	add	r7, sp, #0
	uint32_t ul_sysclk;
	uint32_t x = 1, i = 0;
   85c1a:	2301      	movs	r3, #1
   85c1c:	613b      	str	r3, [r7, #16]
   85c1e:	2300      	movs	r3, #0
   85c20:	617b      	str	r3, [r7, #20]
	UBaseType_t fifo_length, item_size;

	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
   85c22:	202b      	movs	r0, #43	; 0x2b
   85c24:	4b6d      	ldr	r3, [pc, #436]	; (85ddc <can_initialize+0x1c8>)
   85c26:	4798      	blx	r3
	pmc_enable_periph_clk(ID_CAN1);
   85c28:	202c      	movs	r0, #44	; 0x2c
   85c2a:	4b6c      	ldr	r3, [pc, #432]	; (85ddc <can_initialize+0x1c8>)
   85c2c:	4798      	blx	r3

	ul_sysclk = sysclk_get_cpu_hz();
   85c2e:	4b6c      	ldr	r3, [pc, #432]	; (85de0 <can_initialize+0x1cc>)
   85c30:	4798      	blx	r3
   85c32:	60f8      	str	r0, [r7, #12]
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85c34:	486b      	ldr	r0, [pc, #428]	; (85de4 <can_initialize+0x1d0>)
   85c36:	68f9      	ldr	r1, [r7, #12]
   85c38:	22fa      	movs	r2, #250	; 0xfa
   85c3a:	4b6b      	ldr	r3, [pc, #428]	; (85de8 <can_initialize+0x1d4>)
   85c3c:	4798      	blx	r3
   85c3e:	4603      	mov	r3, r0
   85c40:	2b00      	cmp	r3, #0
   85c42:	f000 80c7 	beq.w	85dd4 <can_initialize+0x1c0>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
   85c46:	4869      	ldr	r0, [pc, #420]	; (85dec <can_initialize+0x1d8>)
   85c48:	68f9      	ldr	r1, [r7, #12]
   85c4a:	22fa      	movs	r2, #250	; 0xfa
   85c4c:	4b66      	ldr	r3, [pc, #408]	; (85de8 <can_initialize+0x1d4>)
   85c4e:	4798      	blx	r3
   85c50:	4603      	mov	r3, r0
	/* Enable CAN0 & CAN1 clock. */
	pmc_enable_periph_clk(ID_CAN0);
	pmc_enable_periph_clk(ID_CAN1);

	ul_sysclk = sysclk_get_cpu_hz();
	if (can_init(CAN0, ul_sysclk, CAN_BPS_250K) &&
   85c52:	2b00      	cmp	r3, #0
   85c54:	f000 80be 	beq.w	85dd4 <can_initialize+0x1c0>
			can_init(CAN1, ul_sysclk, CAN_BPS_250K)) 
	{
		/* Disable all CAN0 & CAN1 interrupts. */
		can_disable_interrupt(CAN0, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85c58:	4862      	ldr	r0, [pc, #392]	; (85de4 <can_initialize+0x1d0>)
   85c5a:	f04f 31ff 	mov.w	r1, #4294967295
   85c5e:	4b64      	ldr	r3, [pc, #400]	; (85df0 <can_initialize+0x1dc>)
   85c60:	4798      	blx	r3
		can_disable_interrupt(CAN1, CAN_DISABLE_ALL_INTERRUPT_MASK);
   85c62:	4862      	ldr	r0, [pc, #392]	; (85dec <can_initialize+0x1d8>)
   85c64:	f04f 31ff 	mov.w	r1, #4294967295
   85c68:	4b61      	ldr	r3, [pc, #388]	; (85df0 <can_initialize+0x1dc>)
   85c6a:	4798      	blx	r3

		NVIC_EnableIRQ(CAN1_IRQn);
   85c6c:	202c      	movs	r0, #44	; 0x2c
   85c6e:	4b61      	ldr	r3, [pc, #388]	; (85df4 <can_initialize+0x1e0>)
   85c70:	4798      	blx	r3
		
		can_reset_all_mailbox(CAN0);
   85c72:	485c      	ldr	r0, [pc, #368]	; (85de4 <can_initialize+0x1d0>)
   85c74:	4b60      	ldr	r3, [pc, #384]	; (85df8 <can_initialize+0x1e4>)
   85c76:	4798      	blx	r3
		can_reset_all_mailbox(CAN1);
   85c78:	485c      	ldr	r0, [pc, #368]	; (85dec <can_initialize+0x1d8>)
   85c7a:	4b5f      	ldr	r3, [pc, #380]	; (85df8 <can_initialize+0x1e4>)
   85c7c:	4798      	blx	r3
		
		/* Initialize the CAN0 & CAN1 mailboxes */
		x = can_init_mailboxes(x); // Prevent Random PC jumps to this point.
   85c7e:	6938      	ldr	r0, [r7, #16]
   85c80:	4b5e      	ldr	r3, [pc, #376]	; (85dfc <can_initialize+0x1e8>)
   85c82:	4798      	blx	r3
   85c84:	6138      	str	r0, [r7, #16]
		//configASSERT(x);
		
		/* Initialize the data reception flag	*/
		glob_drf = 0;
   85c86:	4b5e      	ldr	r3, [pc, #376]	; (85e00 <can_initialize+0x1ec>)
   85c88:	2200      	movs	r2, #0
   85c8a:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the message reception flag */
		glob_comsf = 0;
   85c8c:	4b5d      	ldr	r3, [pc, #372]	; (85e04 <can_initialize+0x1f0>)
   85c8e:	2200      	movs	r2, #0
   85c90:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the HK Command Flags */
		hk_read_requestedf = 0;
   85c92:	4b5d      	ldr	r3, [pc, #372]	; (85e08 <can_initialize+0x1f4>)
   85c94:	2200      	movs	r2, #0
   85c96:	701a      	strb	r2, [r3, #0]
		hk_read_receivedf = 0;
   85c98:	4b5c      	ldr	r3, [pc, #368]	; (85e0c <can_initialize+0x1f8>)
   85c9a:	2200      	movs	r2, #0
   85c9c:	701a      	strb	r2, [r3, #0]
		hk_write_requestedf = 0;
   85c9e:	4b5c      	ldr	r3, [pc, #368]	; (85e10 <can_initialize+0x1fc>)
   85ca0:	2200      	movs	r2, #0
   85ca2:	701a      	strb	r2, [r3, #0]
		hk_write_receivedf = 0;
   85ca4:	4b5b      	ldr	r3, [pc, #364]	; (85e14 <can_initialize+0x200>)
   85ca6:	2200      	movs	r2, #0
   85ca8:	701a      	strb	r2, [r3, #0]
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85caa:	2300      	movs	r3, #0
   85cac:	617b      	str	r3, [r7, #20]
   85cae:	e016      	b.n	85cde <can_initialize+0xca>
		{
			glob_stored_data[i] = 0;
   85cb0:	4b59      	ldr	r3, [pc, #356]	; (85e18 <can_initialize+0x204>)
   85cb2:	697a      	ldr	r2, [r7, #20]
   85cb4:	2100      	movs	r1, #0
   85cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			glob_stored_message[i] = 0;
   85cba:	4b58      	ldr	r3, [pc, #352]	; (85e1c <can_initialize+0x208>)
   85cbc:	697a      	ldr	r2, [r7, #20]
   85cbe:	2100      	movs	r1, #0
   85cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_read_receive[i] = 0;
   85cc4:	4b56      	ldr	r3, [pc, #344]	; (85e20 <can_initialize+0x20c>)
   85cc6:	697a      	ldr	r2, [r7, #20]
   85cc8:	2100      	movs	r1, #0
   85cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			hk_write_receive[i] = 0;
   85cce:	4b55      	ldr	r3, [pc, #340]	; (85e24 <can_initialize+0x210>)
   85cd0:	697a      	ldr	r2, [r7, #20]
   85cd2:	2100      	movs	r1, #0
   85cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hk_read_receivedf = 0;
		hk_write_requestedf = 0;
		hk_write_receivedf = 0;
		
		/* Initialize the global can regs		*/
		for (i = 0; i < 2; i++)
   85cd8:	697b      	ldr	r3, [r7, #20]
   85cda:	3301      	adds	r3, #1
   85cdc:	617b      	str	r3, [r7, #20]
   85cde:	697b      	ldr	r3, [r7, #20]
   85ce0:	2b01      	cmp	r3, #1
   85ce2:	d9e5      	bls.n	85cb0 <can_initialize+0x9c>
			glob_stored_message[i] = 0;
			hk_read_receive[i] = 0;
			hk_write_receive[i] = 0;
		}

		tm_transfer_completef = 0;
   85ce4:	4b50      	ldr	r3, [pc, #320]	; (85e28 <can_initialize+0x214>)
   85ce6:	2200      	movs	r2, #0
   85ce8:	701a      	strb	r2, [r3, #0]
		start_tm_transferf = 0;
   85cea:	4b50      	ldr	r3, [pc, #320]	; (85e2c <can_initialize+0x218>)
   85cec:	2200      	movs	r2, #0
   85cee:	701a      	strb	r2, [r3, #0]
		current_tc_fullf = 0;
   85cf0:	4b4f      	ldr	r3, [pc, #316]	; (85e30 <can_initialize+0x21c>)
   85cf2:	2200      	movs	r2, #0
   85cf4:	701a      	strb	r2, [r3, #0]
		receiving_tcf = 0;
   85cf6:	4b4f      	ldr	r3, [pc, #316]	; (85e34 <can_initialize+0x220>)
   85cf8:	2200      	movs	r2, #0
   85cfa:	701a      	strb	r2, [r3, #0]
		
		/* Initialize global CAN FIFOs					*/
		fifo_length = 100;		// Max number of items in the FIFO.
   85cfc:	2364      	movs	r3, #100	; 0x64
   85cfe:	60bb      	str	r3, [r7, #8]
		item_size = 4;			// Number of bytes in the items.
   85d00:	2304      	movs	r3, #4
   85d02:	607b      	str	r3, [r7, #4]
		
		/* This corresponds to 400 bytes, or 50 CAN messages */
		can_data_fifo = xQueueCreate(fifo_length, item_size);
   85d04:	68b8      	ldr	r0, [r7, #8]
   85d06:	6879      	ldr	r1, [r7, #4]
   85d08:	2200      	movs	r2, #0
   85d0a:	4b4b      	ldr	r3, [pc, #300]	; (85e38 <can_initialize+0x224>)
   85d0c:	4798      	blx	r3
   85d0e:	4602      	mov	r2, r0
   85d10:	4b4a      	ldr	r3, [pc, #296]	; (85e3c <can_initialize+0x228>)
   85d12:	601a      	str	r2, [r3, #0]
		can_msg_fifo = xQueueCreate(fifo_length, item_size);
   85d14:	68b8      	ldr	r0, [r7, #8]
   85d16:	6879      	ldr	r1, [r7, #4]
   85d18:	2200      	movs	r2, #0
   85d1a:	4b47      	ldr	r3, [pc, #284]	; (85e38 <can_initialize+0x224>)
   85d1c:	4798      	blx	r3
   85d1e:	4602      	mov	r2, r0
   85d20:	4b47      	ldr	r3, [pc, #284]	; (85e40 <can_initialize+0x22c>)
   85d22:	601a      	str	r2, [r3, #0]
		can_hk_fifo = xQueueCreate(fifo_length, item_size);
   85d24:	68b8      	ldr	r0, [r7, #8]
   85d26:	6879      	ldr	r1, [r7, #4]
   85d28:	2200      	movs	r2, #0
   85d2a:	4b43      	ldr	r3, [pc, #268]	; (85e38 <can_initialize+0x224>)
   85d2c:	4798      	blx	r3
   85d2e:	4602      	mov	r2, r0
   85d30:	4b44      	ldr	r3, [pc, #272]	; (85e44 <can_initialize+0x230>)
   85d32:	601a      	str	r2, [r3, #0]
		can_com_fifo = xQueueCreate(fifo_length, item_size);
   85d34:	68b8      	ldr	r0, [r7, #8]
   85d36:	6879      	ldr	r1, [r7, #4]
   85d38:	2200      	movs	r2, #0
   85d3a:	4b3f      	ldr	r3, [pc, #252]	; (85e38 <can_initialize+0x224>)
   85d3c:	4798      	blx	r3
   85d3e:	4602      	mov	r2, r0
   85d40:	4b41      	ldr	r3, [pc, #260]	; (85e48 <can_initialize+0x234>)
   85d42:	601a      	str	r2, [r3, #0]
		tc_msg_fifo = xQueueCreate(fifo_length, item_size);
   85d44:	68b8      	ldr	r0, [r7, #8]
   85d46:	6879      	ldr	r1, [r7, #4]
   85d48:	2200      	movs	r2, #0
   85d4a:	4b3b      	ldr	r3, [pc, #236]	; (85e38 <can_initialize+0x224>)
   85d4c:	4798      	blx	r3
   85d4e:	4602      	mov	r2, r0
   85d50:	4b3e      	ldr	r3, [pc, #248]	; (85e4c <can_initialize+0x238>)
   85d52:	601a      	str	r2, [r3, #0]

		/* Initialize global PUS Packet FIFOs			*/
		fifo_length = 4;			// Max number of items in the FIFO.
   85d54:	2304      	movs	r3, #4
   85d56:	60bb      	str	r3, [r7, #8]
		item_size = 147;			// Number of bytes in the items
   85d58:	2393      	movs	r3, #147	; 0x93
   85d5a:	607b      	str	r3, [r7, #4]
		hk_to_obc_fifo = xQueueCreate(fifo_length, item_size);
   85d5c:	68b8      	ldr	r0, [r7, #8]
   85d5e:	6879      	ldr	r1, [r7, #4]
   85d60:	2200      	movs	r2, #0
   85d62:	4b35      	ldr	r3, [pc, #212]	; (85e38 <can_initialize+0x224>)
   85d64:	4798      	blx	r3
   85d66:	4602      	mov	r2, r0
   85d68:	4b39      	ldr	r3, [pc, #228]	; (85e50 <can_initialize+0x23c>)
   85d6a:	601a      	str	r2, [r3, #0]
		mem_to_obc_fifo = xQueueCreate(fifo_length, item_size);
   85d6c:	68b8      	ldr	r0, [r7, #8]
   85d6e:	6879      	ldr	r1, [r7, #4]
   85d70:	2200      	movs	r2, #0
   85d72:	4b31      	ldr	r3, [pc, #196]	; (85e38 <can_initialize+0x224>)
   85d74:	4798      	blx	r3
   85d76:	4602      	mov	r2, r0
   85d78:	4b36      	ldr	r3, [pc, #216]	; (85e54 <can_initialize+0x240>)
   85d7a:	601a      	str	r2, [r3, #0]
		fifo_length = 4;
   85d7c:	2304      	movs	r3, #4
   85d7e:	60bb      	str	r3, [r7, #8]
		item_size = 4;
   85d80:	2304      	movs	r3, #4
   85d82:	607b      	str	r3, [r7, #4]
		time_to_obc_fifo = xQueueCreate(fifo_length, item_size);
   85d84:	68b8      	ldr	r0, [r7, #8]
   85d86:	6879      	ldr	r1, [r7, #4]
   85d88:	2200      	movs	r2, #0
   85d8a:	4b2b      	ldr	r3, [pc, #172]	; (85e38 <can_initialize+0x224>)
   85d8c:	4798      	blx	r3
   85d8e:	4602      	mov	r2, r0
   85d90:	4b31      	ldr	r3, [pc, #196]	; (85e58 <can_initialize+0x244>)
   85d92:	601a      	str	r2, [r3, #0]

		/* Initialize global Command FIFOs				*/
		fifo_length = 4;
   85d94:	2304      	movs	r3, #4
   85d96:	60bb      	str	r3, [r7, #8]
		item_size = 147;
   85d98:	2393      	movs	r3, #147	; 0x93
   85d9a:	607b      	str	r3, [r7, #4]
		obc_to_hk_fifo = xQueueCreate(fifo_length, item_size);
   85d9c:	68b8      	ldr	r0, [r7, #8]
   85d9e:	6879      	ldr	r1, [r7, #4]
   85da0:	2200      	movs	r2, #0
   85da2:	4b25      	ldr	r3, [pc, #148]	; (85e38 <can_initialize+0x224>)
   85da4:	4798      	blx	r3
   85da6:	4602      	mov	r2, r0
   85da8:	4b2c      	ldr	r3, [pc, #176]	; (85e5c <can_initialize+0x248>)
   85daa:	601a      	str	r2, [r3, #0]
		obc_to_mem_fifo = xQueueCreate(fifo_length, item_size);
   85dac:	68b8      	ldr	r0, [r7, #8]
   85dae:	6879      	ldr	r1, [r7, #4]
   85db0:	2200      	movs	r2, #0
   85db2:	4b21      	ldr	r3, [pc, #132]	; (85e38 <can_initialize+0x224>)
   85db4:	4798      	blx	r3
   85db6:	4602      	mov	r2, r0
   85db8:	4b29      	ldr	r3, [pc, #164]	; (85e60 <can_initialize+0x24c>)
   85dba:	601a      	str	r2, [r3, #0]
		fifo_length	 = 4;
   85dbc:	2304      	movs	r3, #4
   85dbe:	60bb      	str	r3, [r7, #8]
		item_size = 2;
   85dc0:	2302      	movs	r3, #2
   85dc2:	607b      	str	r3, [r7, #4]
		obc_to_time_fifo = xQueueCreate(fifo_length, item_size);
   85dc4:	68b8      	ldr	r0, [r7, #8]
   85dc6:	6879      	ldr	r1, [r7, #4]
   85dc8:	2200      	movs	r2, #0
   85dca:	4b1b      	ldr	r3, [pc, #108]	; (85e38 <can_initialize+0x224>)
   85dcc:	4798      	blx	r3
   85dce:	4602      	mov	r2, r0
   85dd0:	4b24      	ldr	r3, [pc, #144]	; (85e64 <can_initialize+0x250>)
   85dd2:	601a      	str	r2, [r3, #0]

		/* MAKE SURE TO SEND LOW 4 BYTES FIRST, AND RECEIVE LOW 4 BYTES FIRST. */
	}
	return;
   85dd4:	bf00      	nop
}
   85dd6:	3718      	adds	r7, #24
   85dd8:	46bd      	mov	sp, r7
   85dda:	bd80      	pop	{r7, pc}
   85ddc:	00082771 	.word	0x00082771
   85de0:	0008549d 	.word	0x0008549d
   85de4:	400b4000 	.word	0x400b4000
   85de8:	00081ac1 	.word	0x00081ac1
   85dec:	400b8000 	.word	0x400b8000
   85df0:	00081ba5 	.word	0x00081ba5
   85df4:	000853dd 	.word	0x000853dd
   85df8:	00081f01 	.word	0x00081f01
   85dfc:	00085e69 	.word	0x00085e69
   85e00:	2007a684 	.word	0x2007a684
   85e04:	2007a687 	.word	0x2007a687
   85e08:	2007a719 	.word	0x2007a719
   85e0c:	2007a660 	.word	0x2007a660
   85e10:	2007a6cc 	.word	0x2007a6cc
   85e14:	2007a688 	.word	0x2007a688
   85e18:	2007a658 	.word	0x2007a658
   85e1c:	2007a730 	.word	0x2007a730
   85e20:	2007a694 	.word	0x2007a694
   85e24:	2007a6d8 	.word	0x2007a6d8
   85e28:	2007a710 	.word	0x2007a710
   85e2c:	2007a686 	.word	0x2007a686
   85e30:	2007a648 	.word	0x2007a648
   85e34:	2007a650 	.word	0x2007a650
   85e38:	00083729 	.word	0x00083729
   85e3c:	2007a69c 	.word	0x2007a69c
   85e40:	2007a738 	.word	0x2007a738
   85e44:	2007a654 	.word	0x2007a654
   85e48:	2007a71c 	.word	0x2007a71c
   85e4c:	2007a714 	.word	0x2007a714
   85e50:	2007a6c0 	.word	0x2007a6c0
   85e54:	2007a75c 	.word	0x2007a75c
   85e58:	2007a708 	.word	0x2007a708
   85e5c:	2007a64c 	.word	0x2007a64c
   85e60:	2007a72c 	.word	0x2007a72c
   85e64:	2007a760 	.word	0x2007a760

00085e68 <can_init_mailboxes>:
/* @param: x: simply meant to be to confirm that this function was 		*/
/* called naturally.													*/
/* @Purpose: This function initializes the CAN mailboxes for use.		*/
/************************************************************************/
uint32_t can_init_mailboxes(uint32_t x)
{
   85e68:	b580      	push	{r7, lr}
   85e6a:	b082      	sub	sp, #8
   85e6c:	af00      	add	r7, sp, #0
   85e6e:	6078      	str	r0, [r7, #4]
	//configASSERT(x);	//Check if this function was called naturally.

	/* Init CAN0 Mailbox 7 to Transmit Mailbox. */
	/* CAN0 MB7 == COMMAND/MSG MB				*/	
	reset_mailbox_conf(&can0_mailbox);
   85e70:	484a      	ldr	r0, [pc, #296]	; (85f9c <can_init_mailboxes+0x134>)
   85e72:	4b4b      	ldr	r3, [pc, #300]	; (85fa0 <can_init_mailboxes+0x138>)
   85e74:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 7;			//Mailbox Number 7
   85e76:	4b49      	ldr	r3, [pc, #292]	; (85f9c <can_init_mailboxes+0x134>)
   85e78:	2207      	movs	r2, #7
   85e7a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85e7c:	4b47      	ldr	r3, [pc, #284]	; (85f9c <can_init_mailboxes+0x134>)
   85e7e:	2203      	movs	r2, #3
   85e80:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 10;		//Transmission Priority (Can be Changed dynamically)
   85e82:	4b46      	ldr	r3, [pc, #280]	; (85f9c <can_init_mailboxes+0x134>)
   85e84:	220a      	movs	r2, #10
   85e86:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85e88:	4b44      	ldr	r3, [pc, #272]	; (85f9c <can_init_mailboxes+0x134>)
   85e8a:	2200      	movs	r2, #0
   85e8c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85e8e:	4b43      	ldr	r3, [pc, #268]	; (85f9c <can_init_mailboxes+0x134>)
   85e90:	2200      	movs	r2, #0
   85e92:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85e94:	4843      	ldr	r0, [pc, #268]	; (85fa4 <can_init_mailboxes+0x13c>)
   85e96:	4941      	ldr	r1, [pc, #260]	; (85f9c <can_init_mailboxes+0x134>)
   85e98:	4b43      	ldr	r3, [pc, #268]	; (85fa8 <can_init_mailboxes+0x140>)
   85e9a:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 0 to Data Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85e9c:	4843      	ldr	r0, [pc, #268]	; (85fac <can_init_mailboxes+0x144>)
   85e9e:	4b40      	ldr	r3, [pc, #256]	; (85fa0 <can_init_mailboxes+0x138>)
   85ea0:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 0;				// Mailbox 0
   85ea2:	4b42      	ldr	r3, [pc, #264]	; (85fac <can_init_mailboxes+0x144>)
   85ea4:	2200      	movs	r2, #0
   85ea6:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85ea8:	4b40      	ldr	r3, [pc, #256]	; (85fac <can_init_mailboxes+0x144>)
   85eaa:	2201      	movs	r2, #1
   85eac:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85eae:	4b3f      	ldr	r3, [pc, #252]	; (85fac <can_init_mailboxes+0x144>)
   85eb0:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85eb4:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB0);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85eb6:	4b3d      	ldr	r3, [pc, #244]	; (85fac <can_init_mailboxes+0x144>)
   85eb8:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   85ebc:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85ebe:	483c      	ldr	r0, [pc, #240]	; (85fb0 <can_init_mailboxes+0x148>)
   85ec0:	493a      	ldr	r1, [pc, #232]	; (85fac <can_init_mailboxes+0x144>)
   85ec2:	4b39      	ldr	r3, [pc, #228]	; (85fa8 <can_init_mailboxes+0x140>)
   85ec4:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 5 to Message Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85ec6:	4839      	ldr	r0, [pc, #228]	; (85fac <can_init_mailboxes+0x144>)
   85ec8:	4b35      	ldr	r3, [pc, #212]	; (85fa0 <can_init_mailboxes+0x138>)
   85eca:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 5;				// Mailbox 5
   85ecc:	4b37      	ldr	r3, [pc, #220]	; (85fac <can_init_mailboxes+0x144>)
   85ece:	2205      	movs	r2, #5
   85ed0:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85ed2:	4b36      	ldr	r3, [pc, #216]	; (85fac <can_init_mailboxes+0x144>)
   85ed4:	2201      	movs	r2, #1
   85ed6:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85ed8:	4b34      	ldr	r3, [pc, #208]	; (85fac <can_init_mailboxes+0x144>)
   85eda:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85ede:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB5);					  // The ID of CAN1 MB0 is currently CAN1_MB0 (standard).
   85ee0:	4b32      	ldr	r3, [pc, #200]	; (85fac <can_init_mailboxes+0x144>)
   85ee2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
   85ee6:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85ee8:	4831      	ldr	r0, [pc, #196]	; (85fb0 <can_init_mailboxes+0x148>)
   85eea:	4930      	ldr	r1, [pc, #192]	; (85fac <can_init_mailboxes+0x144>)
   85eec:	4b2e      	ldr	r3, [pc, #184]	; (85fa8 <can_init_mailboxes+0x140>)
   85eee:	4798      	blx	r3
	
	/* Init CAN1 Mailbox 6 to HK Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85ef0:	482e      	ldr	r0, [pc, #184]	; (85fac <can_init_mailboxes+0x144>)
   85ef2:	4b2b      	ldr	r3, [pc, #172]	; (85fa0 <can_init_mailboxes+0x138>)
   85ef4:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 6;				// Mailbox 6
   85ef6:	4b2d      	ldr	r3, [pc, #180]	; (85fac <can_init_mailboxes+0x144>)
   85ef8:	2206      	movs	r2, #6
   85efa:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85efc:	4b2b      	ldr	r3, [pc, #172]	; (85fac <can_init_mailboxes+0x144>)
   85efe:	2201      	movs	r2, #1
   85f00:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85f02:	4b2a      	ldr	r3, [pc, #168]	; (85fac <can_init_mailboxes+0x144>)
   85f04:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85f08:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB6);					  // The ID of CAN1 MB6 is currently CAN1_MB6 (standard).
   85f0a:	4b28      	ldr	r3, [pc, #160]	; (85fac <can_init_mailboxes+0x144>)
   85f0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   85f10:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85f12:	4827      	ldr	r0, [pc, #156]	; (85fb0 <can_init_mailboxes+0x148>)
   85f14:	4925      	ldr	r1, [pc, #148]	; (85fac <can_init_mailboxes+0x144>)
   85f16:	4b24      	ldr	r3, [pc, #144]	; (85fa8 <can_init_mailboxes+0x140>)
   85f18:	4798      	blx	r3
		
	/* Init CAN1 Mailbox 7 to Command Reception Mailbox. */
	reset_mailbox_conf(&can1_mailbox);
   85f1a:	4824      	ldr	r0, [pc, #144]	; (85fac <can_init_mailboxes+0x144>)
   85f1c:	4b20      	ldr	r3, [pc, #128]	; (85fa0 <can_init_mailboxes+0x138>)
   85f1e:	4798      	blx	r3
	can1_mailbox.ul_mb_idx = 7;				// Mailbox 7
   85f20:	4b22      	ldr	r3, [pc, #136]	; (85fac <can_init_mailboxes+0x144>)
   85f22:	2207      	movs	r2, #7
   85f24:	601a      	str	r2, [r3, #0]
	can1_mailbox.uc_obj_type = CAN_MB_RX_MODE;
   85f26:	4b21      	ldr	r3, [pc, #132]	; (85fac <can_init_mailboxes+0x144>)
   85f28:	2201      	movs	r2, #1
   85f2a:	711a      	strb	r2, [r3, #4]
	can1_mailbox.ul_id_msk = CAN_MID_MIDvA_Msk | CAN_MID_MIDvB_Msk;	  // Compare the full 11 bits of the ID in both standard and extended.
   85f2c:	4b1f      	ldr	r3, [pc, #124]	; (85fac <can_init_mailboxes+0x144>)
   85f2e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
   85f32:	60da      	str	r2, [r3, #12]
	can1_mailbox.ul_id = CAN_MID_MIDvA(CAN1_MB7);					  // The ID of CAN1 MB7 is currently CAN1_MB7 (standard).
   85f34:	4b1d      	ldr	r3, [pc, #116]	; (85fac <can_init_mailboxes+0x144>)
   85f36:	f44f 0288 	mov.w	r2, #4456448	; 0x440000
   85f3a:	611a      	str	r2, [r3, #16]
	can_mailbox_init(CAN1, &can1_mailbox);
   85f3c:	481c      	ldr	r0, [pc, #112]	; (85fb0 <can_init_mailboxes+0x148>)
   85f3e:	491b      	ldr	r1, [pc, #108]	; (85fac <can_init_mailboxes+0x144>)
   85f40:	4b19      	ldr	r3, [pc, #100]	; (85fa8 <can_init_mailboxes+0x140>)
   85f42:	4798      	blx	r3
	
	/* Init CAN0 Mailbox 6 to Housekeeping Request Mailbox. */	
	reset_mailbox_conf(&can0_mailbox);
   85f44:	4815      	ldr	r0, [pc, #84]	; (85f9c <can_init_mailboxes+0x134>)
   85f46:	4b16      	ldr	r3, [pc, #88]	; (85fa0 <can_init_mailboxes+0x138>)
   85f48:	4798      	blx	r3
	can0_mailbox.ul_mb_idx = 6;			//Mailbox Number 6
   85f4a:	4b14      	ldr	r3, [pc, #80]	; (85f9c <can_init_mailboxes+0x134>)
   85f4c:	2206      	movs	r2, #6
   85f4e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE;
   85f50:	4b12      	ldr	r3, [pc, #72]	; (85f9c <can_init_mailboxes+0x134>)
   85f52:	2203      	movs	r2, #3
   85f54:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = HK_REQUEST_PRIO;		//Transmission Priority (Can be Changed dynamically)
   85f56:	4b11      	ldr	r3, [pc, #68]	; (85f9c <can_init_mailboxes+0x134>)
   85f58:	2214      	movs	r2, #20
   85f5a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   85f5c:	4b0f      	ldr	r3, [pc, #60]	; (85f9c <can_init_mailboxes+0x134>)
   85f5e:	2200      	movs	r2, #0
   85f60:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0;
   85f62:	4b0e      	ldr	r3, [pc, #56]	; (85f9c <can_init_mailboxes+0x134>)
   85f64:	2200      	movs	r2, #0
   85f66:	60da      	str	r2, [r3, #12]
	can_mailbox_init(CAN0, &can0_mailbox);
   85f68:	480e      	ldr	r0, [pc, #56]	; (85fa4 <can_init_mailboxes+0x13c>)
   85f6a:	490c      	ldr	r1, [pc, #48]	; (85f9c <can_init_mailboxes+0x134>)
   85f6c:	4b0e      	ldr	r3, [pc, #56]	; (85fa8 <can_init_mailboxes+0x140>)
   85f6e:	4798      	blx	r3

	can_enable_interrupt(CAN1, CAN_IER_MB0);
   85f70:	480f      	ldr	r0, [pc, #60]	; (85fb0 <can_init_mailboxes+0x148>)
   85f72:	2101      	movs	r1, #1
   85f74:	4b0f      	ldr	r3, [pc, #60]	; (85fb4 <can_init_mailboxes+0x14c>)
   85f76:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB5);
   85f78:	480d      	ldr	r0, [pc, #52]	; (85fb0 <can_init_mailboxes+0x148>)
   85f7a:	2120      	movs	r1, #32
   85f7c:	4b0d      	ldr	r3, [pc, #52]	; (85fb4 <can_init_mailboxes+0x14c>)
   85f7e:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB6);
   85f80:	480b      	ldr	r0, [pc, #44]	; (85fb0 <can_init_mailboxes+0x148>)
   85f82:	2140      	movs	r1, #64	; 0x40
   85f84:	4b0b      	ldr	r3, [pc, #44]	; (85fb4 <can_init_mailboxes+0x14c>)
   85f86:	4798      	blx	r3
	can_enable_interrupt(CAN1, CAN_IER_MB7);
   85f88:	4809      	ldr	r0, [pc, #36]	; (85fb0 <can_init_mailboxes+0x148>)
   85f8a:	2180      	movs	r1, #128	; 0x80
   85f8c:	4b09      	ldr	r3, [pc, #36]	; (85fb4 <can_init_mailboxes+0x14c>)
   85f8e:	4798      	blx	r3
	
	return 1;
   85f90:	2301      	movs	r3, #1
}
   85f92:	4618      	mov	r0, r3
   85f94:	3708      	adds	r7, #8
   85f96:	46bd      	mov	sp, r7
   85f98:	bd80      	pop	{r7, pc}
   85f9a:	bf00      	nop
   85f9c:	2007a6e0 	.word	0x2007a6e0
   85fa0:	00085995 	.word	0x00085995
   85fa4:	400b4000 	.word	0x400b4000
   85fa8:	00081c65 	.word	0x00081c65
   85fac:	2007a664 	.word	0x2007a664
   85fb0:	400b8000 	.word	0x400b8000
   85fb4:	00081b89 	.word	0x00081b89

00085fb8 <high_command_generator>:
/* the one that enables the functionality you want.						*/
/* @Purpose: This function is used to generate the upper 4 bytes of all */
/* CAN messages as per the new structure. 								*/
/************************************************************************/
uint32_t high_command_generator(uint8_t sender_id, uint8_t ssm_id, uint8_t MessageType, uint8_t smalltype)
{
   85fb8:	b480      	push	{r7}
   85fba:	b087      	sub	sp, #28
   85fbc:	af00      	add	r7, sp, #0
   85fbe:	71f8      	strb	r0, [r7, #7]
   85fc0:	71b9      	strb	r1, [r7, #6]
   85fc2:	717a      	strb	r2, [r7, #5]
   85fc4:	713b      	strb	r3, [r7, #4]
	uint32_t sender, m_type, s_type, destination;
	
	sender = (uint32_t)sender_id;
   85fc6:	79fb      	ldrb	r3, [r7, #7]
   85fc8:	617b      	str	r3, [r7, #20]
	sender = sender << 28;
   85fca:	697b      	ldr	r3, [r7, #20]
   85fcc:	071b      	lsls	r3, r3, #28
   85fce:	617b      	str	r3, [r7, #20]
	
	destination = (uint32_t)ssm_id;
   85fd0:	79bb      	ldrb	r3, [r7, #6]
   85fd2:	613b      	str	r3, [r7, #16]
	ssm_id = ssm_id << 24;
   85fd4:	2300      	movs	r3, #0
   85fd6:	71bb      	strb	r3, [r7, #6]
		
	m_type = (uint32_t)MessageType;
   85fd8:	797b      	ldrb	r3, [r7, #5]
   85fda:	60fb      	str	r3, [r7, #12]
	m_type = m_type << 16;
   85fdc:	68fb      	ldr	r3, [r7, #12]
   85fde:	041b      	lsls	r3, r3, #16
   85fe0:	60fb      	str	r3, [r7, #12]
	
	s_type = (uint32_t)smalltype;
   85fe2:	793b      	ldrb	r3, [r7, #4]
   85fe4:	60bb      	str	r3, [r7, #8]
	s_type = s_type << 8;
   85fe6:	68bb      	ldr	r3, [r7, #8]
   85fe8:	021b      	lsls	r3, r3, #8
   85fea:	60bb      	str	r3, [r7, #8]
	
	return sender + destination + m_type + s_type;
   85fec:	697a      	ldr	r2, [r7, #20]
   85fee:	693b      	ldr	r3, [r7, #16]
   85ff0:	441a      	add	r2, r3
   85ff2:	68fb      	ldr	r3, [r7, #12]
   85ff4:	441a      	add	r2, r3
   85ff6:	68bb      	ldr	r3, [r7, #8]
   85ff8:	4413      	add	r3, r2
}
   85ffa:	4618      	mov	r0, r3
   85ffc:	371c      	adds	r7, #28
   85ffe:	46bd      	mov	sp, r7
   86000:	f85d 7b04 	ldr.w	r7, [sp], #4
   86004:	4770      	bx	lr
   86006:	bf00      	nop

00086008 <request_sensor_data_h>:
/* NOTE: This function should only be used in sections of code where the*/
/* Can0_Mutex was acquired.												*/
/************************************************************************/

static uint32_t request_sensor_data_h(uint8_t sender_id, uint8_t ssm_id, uint8_t sensor_name, uint8_t* status)
{
   86008:	b590      	push	{r4, r7, lr}
   8600a:	b089      	sub	sp, #36	; 0x24
   8600c:	af00      	add	r7, sp, #0
   8600e:	603b      	str	r3, [r7, #0]
   86010:	4603      	mov	r3, r0
   86012:	71fb      	strb	r3, [r7, #7]
   86014:	460b      	mov	r3, r1
   86016:	71bb      	strb	r3, [r7, #6]
   86018:	4613      	mov	r3, r2
   8601a:	717b      	strb	r3, [r7, #5]
	uint32_t high, low, timeout, s, ret_val;
	timeout = 2000000;		// Maximum wait time of 25ms.
   8601c:	4b5e      	ldr	r3, [pc, #376]	; (86198 <request_sensor_data_h+0x190>)
   8601e:	61fb      	str	r3, [r7, #28]
	uint8_t id;
	
	high = high_command_generator(sender_id, ssm_id, MT_COM, REQ_DATA);
   86020:	79fa      	ldrb	r2, [r7, #7]
   86022:	79bb      	ldrb	r3, [r7, #6]
   86024:	4610      	mov	r0, r2
   86026:	4619      	mov	r1, r3
   86028:	2202      	movs	r2, #2
   8602a:	2302      	movs	r3, #2
   8602c:	4c5b      	ldr	r4, [pc, #364]	; (8619c <request_sensor_data_h+0x194>)
   8602e:	47a0      	blx	r4
   86030:	6138      	str	r0, [r7, #16]
	low = (uint32_t)sensor_name;
   86032:	797b      	ldrb	r3, [r7, #5]
   86034:	60fb      	str	r3, [r7, #12]
	low = low << 24;
   86036:	68fb      	ldr	r3, [r7, #12]
   86038:	061b      	lsls	r3, r3, #24
   8603a:	60fb      	str	r3, [r7, #12]
	
	if(ssm_id == COMS_ID)
   8603c:	79bb      	ldrb	r3, [r7, #6]
   8603e:	2b00      	cmp	r3, #0
   86040:	d101      	bne.n	86046 <request_sensor_data_h+0x3e>
		id = SUB0_ID0;
   86042:	2314      	movs	r3, #20
   86044:	75fb      	strb	r3, [r7, #23]
	if(ssm_id == EPS_ID)
   86046:	79bb      	ldrb	r3, [r7, #6]
   86048:	2b01      	cmp	r3, #1
   8604a:	d101      	bne.n	86050 <request_sensor_data_h+0x48>
		id = SUB1_ID0;
   8604c:	231a      	movs	r3, #26
   8604e:	75fb      	strb	r3, [r7, #23]
	if(ssm_id == PAY_ID)
   86050:	79bb      	ldrb	r3, [r7, #6]
   86052:	2b02      	cmp	r3, #2
   86054:	d101      	bne.n	8605a <request_sensor_data_h+0x52>
		id = SUB2_ID0;
   86056:	2320      	movs	r3, #32
   86058:	75fb      	strb	r3, [r7, #23]

	if (send_can_command_h(low, high, id, DEF_PRIO) < 1)
   8605a:	7dfb      	ldrb	r3, [r7, #23]
   8605c:	68f8      	ldr	r0, [r7, #12]
   8605e:	6939      	ldr	r1, [r7, #16]
   86060:	461a      	mov	r2, r3
   86062:	230a      	movs	r3, #10
   86064:	4c4e      	ldr	r4, [pc, #312]	; (861a0 <request_sensor_data_h+0x198>)
   86066:	47a0      	blx	r4
   86068:	4603      	mov	r3, r0
   8606a:	2b00      	cmp	r3, #0
   8606c:	d105      	bne.n	8607a <request_sensor_data_h+0x72>
	{
		*status = -1;
   8606e:	683b      	ldr	r3, [r7, #0]
   86070:	22ff      	movs	r2, #255	; 0xff
   86072:	701a      	strb	r2, [r3, #0]
		return -1;
   86074:	f04f 33ff 	mov.w	r3, #4294967295
   86078:	e08a      	b.n	86190 <request_sensor_data_h+0x188>
	}

	if(sender_id == EPS_TASK_ID)
   8607a:	79fb      	ldrb	r3, [r7, #7]
   8607c:	2b08      	cmp	r3, #8
   8607e:	d129      	bne.n	860d4 <request_sensor_data_h+0xcc>
	{
		while(!eps_data_receivedf)	// Wait for the response to come back.
   86080:	e00a      	b.n	86098 <request_sensor_data_h+0x90>
		{
			if(!timeout--)
   86082:	69fb      	ldr	r3, [r7, #28]
   86084:	1e5a      	subs	r2, r3, #1
   86086:	61fa      	str	r2, [r7, #28]
   86088:	2b00      	cmp	r3, #0
   8608a:	d105      	bne.n	86098 <request_sensor_data_h+0x90>
			{
				*status = -1;
   8608c:	683b      	ldr	r3, [r7, #0]
   8608e:	22ff      	movs	r2, #255	; 0xff
   86090:	701a      	strb	r2, [r3, #0]
				return -1;			// The operation failed.
   86092:	f04f 33ff 	mov.w	r3, #4294967295
   86096:	e07b      	b.n	86190 <request_sensor_data_h+0x188>
		return -1;
	}

	if(sender_id == EPS_TASK_ID)
	{
		while(!eps_data_receivedf)	// Wait for the response to come back.
   86098:	4b42      	ldr	r3, [pc, #264]	; (861a4 <request_sensor_data_h+0x19c>)
   8609a:	781b      	ldrb	r3, [r3, #0]
   8609c:	2b00      	cmp	r3, #0
   8609e:	d0f0      	beq.n	86082 <request_sensor_data_h+0x7a>
			{
				*status = -1;
				return -1;			// The operation failed.
			}
		}
		s = (uint8_t)((eps_data_receive[1] & 0x0000FF00) >> 8);	// Name of the sensor
   860a0:	4b41      	ldr	r3, [pc, #260]	; (861a8 <request_sensor_data_h+0x1a0>)
   860a2:	685b      	ldr	r3, [r3, #4]
   860a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   860a8:	0a1b      	lsrs	r3, r3, #8
   860aa:	b2db      	uxtb	r3, r3
   860ac:	60bb      	str	r3, [r7, #8]
	
		if (s != sensor_name)
   860ae:	797a      	ldrb	r2, [r7, #5]
   860b0:	68bb      	ldr	r3, [r7, #8]
   860b2:	429a      	cmp	r2, r3
   860b4:	d008      	beq.n	860c8 <request_sensor_data_h+0xc0>
		{
			eps_data_receivedf = 0;
   860b6:	4b3b      	ldr	r3, [pc, #236]	; (861a4 <request_sensor_data_h+0x19c>)
   860b8:	2200      	movs	r2, #0
   860ba:	701a      	strb	r2, [r3, #0]
			*status = -1;
   860bc:	683b      	ldr	r3, [r7, #0]
   860be:	22ff      	movs	r2, #255	; 0xff
   860c0:	701a      	strb	r2, [r3, #0]
			return -1;			// The operation failed.
   860c2:	f04f 33ff 	mov.w	r3, #4294967295
   860c6:	e063      	b.n	86190 <request_sensor_data_h+0x188>
		}
	
		ret_val = eps_data_receive[0];	// 32-bit return value.
   860c8:	4b37      	ldr	r3, [pc, #220]	; (861a8 <request_sensor_data_h+0x1a0>)
   860ca:	681b      	ldr	r3, [r3, #0]
   860cc:	61bb      	str	r3, [r7, #24]
	
		eps_data_receivedf = 0;		// Zero this last to keep in sync.
   860ce:	4b35      	ldr	r3, [pc, #212]	; (861a4 <request_sensor_data_h+0x19c>)
   860d0:	2200      	movs	r2, #0
   860d2:	701a      	strb	r2, [r3, #0]
	}

	if(sender_id == COMS_TASK_ID)
   860d4:	79fb      	ldrb	r3, [r7, #7]
   860d6:	2b07      	cmp	r3, #7
   860d8:	d129      	bne.n	8612e <request_sensor_data_h+0x126>
	{
		while(!coms_data_receivedf)	// Wait for the response to come back.
   860da:	e00a      	b.n	860f2 <request_sensor_data_h+0xea>
		{
			if(!timeout--)
   860dc:	69fb      	ldr	r3, [r7, #28]
   860de:	1e5a      	subs	r2, r3, #1
   860e0:	61fa      	str	r2, [r7, #28]
   860e2:	2b00      	cmp	r3, #0
   860e4:	d105      	bne.n	860f2 <request_sensor_data_h+0xea>
			{
				*status = -1;
   860e6:	683b      	ldr	r3, [r7, #0]
   860e8:	22ff      	movs	r2, #255	; 0xff
   860ea:	701a      	strb	r2, [r3, #0]
				return -1;			// The operation failed.
   860ec:	f04f 33ff 	mov.w	r3, #4294967295
   860f0:	e04e      	b.n	86190 <request_sensor_data_h+0x188>
		eps_data_receivedf = 0;		// Zero this last to keep in sync.
	}

	if(sender_id == COMS_TASK_ID)
	{
		while(!coms_data_receivedf)	// Wait for the response to come back.
   860f2:	4b2e      	ldr	r3, [pc, #184]	; (861ac <request_sensor_data_h+0x1a4>)
   860f4:	781b      	ldrb	r3, [r3, #0]
   860f6:	2b00      	cmp	r3, #0
   860f8:	d0f0      	beq.n	860dc <request_sensor_data_h+0xd4>
			{
				*status = -1;
				return -1;			// The operation failed.
			}
		}
		s = (uint8_t)((coms_data_receive[1] & 0x0000FF00) >> 8);	// Name of the sensor
   860fa:	4b2d      	ldr	r3, [pc, #180]	; (861b0 <request_sensor_data_h+0x1a8>)
   860fc:	685b      	ldr	r3, [r3, #4]
   860fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   86102:	0a1b      	lsrs	r3, r3, #8
   86104:	b2db      	uxtb	r3, r3
   86106:	60bb      	str	r3, [r7, #8]
	
		if (s != sensor_name)
   86108:	797a      	ldrb	r2, [r7, #5]
   8610a:	68bb      	ldr	r3, [r7, #8]
   8610c:	429a      	cmp	r2, r3
   8610e:	d008      	beq.n	86122 <request_sensor_data_h+0x11a>
		{
			coms_data_receivedf = 0;
   86110:	4b26      	ldr	r3, [pc, #152]	; (861ac <request_sensor_data_h+0x1a4>)
   86112:	2200      	movs	r2, #0
   86114:	701a      	strb	r2, [r3, #0]
			*status = -1;
   86116:	683b      	ldr	r3, [r7, #0]
   86118:	22ff      	movs	r2, #255	; 0xff
   8611a:	701a      	strb	r2, [r3, #0]
			return -1;			// The operation failed.
   8611c:	f04f 33ff 	mov.w	r3, #4294967295
   86120:	e036      	b.n	86190 <request_sensor_data_h+0x188>
		}
	
		ret_val = coms_data_receive[0];	// 32-bit return value.
   86122:	4b23      	ldr	r3, [pc, #140]	; (861b0 <request_sensor_data_h+0x1a8>)
   86124:	681b      	ldr	r3, [r3, #0]
   86126:	61bb      	str	r3, [r7, #24]
	
		coms_data_receivedf = 0;		// Zero this last to keep in sync.
   86128:	4b20      	ldr	r3, [pc, #128]	; (861ac <request_sensor_data_h+0x1a4>)
   8612a:	2200      	movs	r2, #0
   8612c:	701a      	strb	r2, [r3, #0]
	}

	if(sender_id == PAY_TASK_ID)
   8612e:	79fb      	ldrb	r3, [r7, #7]
   86130:	2b09      	cmp	r3, #9
   86132:	d129      	bne.n	86188 <request_sensor_data_h+0x180>
	{
		while(!pay_data_receivedf)	// Wait for the response to come back.
   86134:	e00a      	b.n	8614c <request_sensor_data_h+0x144>
		{
			if(!timeout--)
   86136:	69fb      	ldr	r3, [r7, #28]
   86138:	1e5a      	subs	r2, r3, #1
   8613a:	61fa      	str	r2, [r7, #28]
   8613c:	2b00      	cmp	r3, #0
   8613e:	d105      	bne.n	8614c <request_sensor_data_h+0x144>
			{
				*status = -1;
   86140:	683b      	ldr	r3, [r7, #0]
   86142:	22ff      	movs	r2, #255	; 0xff
   86144:	701a      	strb	r2, [r3, #0]
				return -1;			// The operation failed.
   86146:	f04f 33ff 	mov.w	r3, #4294967295
   8614a:	e021      	b.n	86190 <request_sensor_data_h+0x188>
		coms_data_receivedf = 0;		// Zero this last to keep in sync.
	}

	if(sender_id == PAY_TASK_ID)
	{
		while(!pay_data_receivedf)	// Wait for the response to come back.
   8614c:	4b19      	ldr	r3, [pc, #100]	; (861b4 <request_sensor_data_h+0x1ac>)
   8614e:	781b      	ldrb	r3, [r3, #0]
   86150:	2b00      	cmp	r3, #0
   86152:	d0f0      	beq.n	86136 <request_sensor_data_h+0x12e>
			{
				*status = -1;
				return -1;			// The operation failed.
			}
		}
		s = (uint8_t)((pay_data_receive[1] & 0x0000FF00) >> 8);	// Name of the sensor
   86154:	4b18      	ldr	r3, [pc, #96]	; (861b8 <request_sensor_data_h+0x1b0>)
   86156:	685b      	ldr	r3, [r3, #4]
   86158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   8615c:	0a1b      	lsrs	r3, r3, #8
   8615e:	b2db      	uxtb	r3, r3
   86160:	60bb      	str	r3, [r7, #8]
	
		if (s != sensor_name)
   86162:	797a      	ldrb	r2, [r7, #5]
   86164:	68bb      	ldr	r3, [r7, #8]
   86166:	429a      	cmp	r2, r3
   86168:	d008      	beq.n	8617c <request_sensor_data_h+0x174>
		{
			pay_data_receivedf = 0;
   8616a:	4b12      	ldr	r3, [pc, #72]	; (861b4 <request_sensor_data_h+0x1ac>)
   8616c:	2200      	movs	r2, #0
   8616e:	701a      	strb	r2, [r3, #0]
			*status = -1;
   86170:	683b      	ldr	r3, [r7, #0]
   86172:	22ff      	movs	r2, #255	; 0xff
   86174:	701a      	strb	r2, [r3, #0]
			return -1;			// The operation failed.
   86176:	f04f 33ff 	mov.w	r3, #4294967295
   8617a:	e009      	b.n	86190 <request_sensor_data_h+0x188>
		}
	
		ret_val = pay_data_receive[0];	// 32-bit return value.
   8617c:	4b0e      	ldr	r3, [pc, #56]	; (861b8 <request_sensor_data_h+0x1b0>)
   8617e:	681b      	ldr	r3, [r3, #0]
   86180:	61bb      	str	r3, [r7, #24]
	
		pay_data_receivedf = 0;		// Zero this last to keep in sync.
   86182:	4b0c      	ldr	r3, [pc, #48]	; (861b4 <request_sensor_data_h+0x1ac>)
   86184:	2200      	movs	r2, #0
   86186:	701a      	strb	r2, [r3, #0]
	}

	*status = 1;				// The operation succeeded.
   86188:	683b      	ldr	r3, [r7, #0]
   8618a:	2201      	movs	r2, #1
   8618c:	701a      	strb	r2, [r3, #0]
	return ret_val;				// This is the requested data.
   8618e:	69bb      	ldr	r3, [r7, #24]
}
   86190:	4618      	mov	r0, r3
   86192:	3724      	adds	r7, #36	; 0x24
   86194:	46bd      	mov	sp, r7
   86196:	bd90      	pop	{r4, r7, pc}
   86198:	001e8480 	.word	0x001e8480
   8619c:	00085fb9 	.word	0x00085fb9
   861a0:	000859ed 	.word	0x000859ed
   861a4:	2007a720 	.word	0x2007a720
   861a8:	2007a700 	.word	0x2007a700
   861ac:	2007a685 	.word	0x2007a685
   861b0:	2007a6c4 	.word	0x2007a6c4
   861b4:	2007a728 	.word	0x2007a728
   861b8:	2007a6d0 	.word	0x2007a6d0

000861bc <request_sensor_data>:
/* NOTE: This function will wait for a maximum of 25ms. for the			*/
/* operation to complete.												*/
/************************************************************************/

uint32_t request_sensor_data(uint8_t sender_id, uint8_t ssm_id, uint8_t sensor_name, int* status)
{
   861bc:	b590      	push	{r4, r7, lr}
   861be:	b087      	sub	sp, #28
   861c0:	af00      	add	r7, sp, #0
   861c2:	603b      	str	r3, [r7, #0]
   861c4:	4603      	mov	r3, r0
   861c6:	71fb      	strb	r3, [r7, #7]
   861c8:	460b      	mov	r3, r1
   861ca:	71bb      	strb	r3, [r7, #6]
   861cc:	4613      	mov	r3, r2
   861ce:	717b      	strb	r3, [r7, #5]
	uint32_t ret_val = 0;
   861d0:	2300      	movs	r3, #0
   861d2:	613b      	str	r3, [r7, #16]
	uint32_t id;
	uint8_t* s;
	if(ssm_id == COMS_ID)
   861d4:	79bb      	ldrb	r3, [r7, #6]
   861d6:	2b00      	cmp	r3, #0
   861d8:	d101      	bne.n	861de <request_sensor_data+0x22>
		id = SUB0_ID0;
   861da:	2314      	movs	r3, #20
   861dc:	617b      	str	r3, [r7, #20]
	if(ssm_id == EPS_ID)
   861de:	79bb      	ldrb	r3, [r7, #6]
   861e0:	2b01      	cmp	r3, #1
   861e2:	d101      	bne.n	861e8 <request_sensor_data+0x2c>
		id = SUB1_ID0;
   861e4:	231a      	movs	r3, #26
   861e6:	617b      	str	r3, [r7, #20]
	if(ssm_id == PAY_ID)
   861e8:	79bb      	ldrb	r3, [r7, #6]
   861ea:	2b02      	cmp	r3, #2
   861ec:	d101      	bne.n	861f2 <request_sensor_data+0x36>
		id = SUB2_ID0;
   861ee:	2320      	movs	r3, #32
   861f0:	617b      	str	r3, [r7, #20]
	
	if (xSemaphoreTake(Can0_Mutex, (TickType_t) 0) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   861f2:	4b15      	ldr	r3, [pc, #84]	; (86248 <request_sensor_data+0x8c>)
   861f4:	681b      	ldr	r3, [r3, #0]
   861f6:	4618      	mov	r0, r3
   861f8:	2100      	movs	r1, #0
   861fa:	2200      	movs	r2, #0
   861fc:	2300      	movs	r3, #0
   861fe:	4c13      	ldr	r4, [pc, #76]	; (8624c <request_sensor_data+0x90>)
   86200:	47a0      	blx	r4
   86202:	4603      	mov	r3, r0
   86204:	2b01      	cmp	r3, #1
   86206:	d119      	bne.n	8623c <request_sensor_data+0x80>
	{
		ret_val = request_sensor_data_h(sender_id, id, sensor_name, s);
   86208:	697b      	ldr	r3, [r7, #20]
   8620a:	b2da      	uxtb	r2, r3
   8620c:	79f9      	ldrb	r1, [r7, #7]
   8620e:	797b      	ldrb	r3, [r7, #5]
   86210:	4608      	mov	r0, r1
   86212:	4611      	mov	r1, r2
   86214:	461a      	mov	r2, r3
   86216:	68fb      	ldr	r3, [r7, #12]
   86218:	4c0d      	ldr	r4, [pc, #52]	; (86250 <request_sensor_data+0x94>)
   8621a:	47a0      	blx	r4
   8621c:	6138      	str	r0, [r7, #16]
		*status = (int)(*s);
   8621e:	68fb      	ldr	r3, [r7, #12]
   86220:	781b      	ldrb	r3, [r3, #0]
   86222:	461a      	mov	r2, r3
   86224:	683b      	ldr	r3, [r7, #0]
   86226:	601a      	str	r2, [r3, #0]
		xSemaphoreGive(Can0_Mutex);
   86228:	4b07      	ldr	r3, [pc, #28]	; (86248 <request_sensor_data+0x8c>)
   8622a:	681b      	ldr	r3, [r3, #0]
   8622c:	4618      	mov	r0, r3
   8622e:	2100      	movs	r1, #0
   86230:	2200      	movs	r2, #0
   86232:	2300      	movs	r3, #0
   86234:	4c07      	ldr	r4, [pc, #28]	; (86254 <request_sensor_data+0x98>)
   86236:	47a0      	blx	r4
		return ret_val;
   86238:	693b      	ldr	r3, [r7, #16]
   8623a:	e001      	b.n	86240 <request_sensor_data+0x84>
	}
	else
		return -1;					// CAN0 was busy or something has gone wrong.
   8623c:	f04f 33ff 	mov.w	r3, #4294967295
}
   86240:	4618      	mov	r0, r3
   86242:	371c      	adds	r7, #28
   86244:	46bd      	mov	sp, r7
   86246:	bd90      	pop	{r4, r7, pc}
   86248:	2007a724 	.word	0x2007a724
   8624c:	00083a75 	.word	0x00083a75
   86250:	00086009 	.word	0x00086009
   86254:	000837b5 	.word	0x000837b5

00086258 <set_variable>:
/* @NOTE: This function checks to make sure that the request succeeded	*/
/*			(this has a timeout of 25 ms)								*/
/* @NOTE: This is for use with tasks and their corresponding SSMs only.	*/
/************************************************************************/
int set_variable(uint8_t sender_id, uint8_t ssm_id, uint8_t var_name, uint16_t value)
{
   86258:	b590      	push	{r4, r7, lr}
   8625a:	b089      	sub	sp, #36	; 0x24
   8625c:	af00      	add	r7, sp, #0
   8625e:	71f8      	strb	r0, [r7, #7]
   86260:	71b9      	strb	r1, [r7, #6]
   86262:	717a      	strb	r2, [r7, #5]
   86264:	807b      	strh	r3, [r7, #2]
	uint32_t high, low, check;
	uint8_t ret_val;
	uint32_t id;

	if(ssm_id == COMS_ID)
   86266:	79bb      	ldrb	r3, [r7, #6]
   86268:	2b00      	cmp	r3, #0
   8626a:	d101      	bne.n	86270 <set_variable+0x18>
		id = SUB0_ID0;
   8626c:	2314      	movs	r3, #20
   8626e:	61fb      	str	r3, [r7, #28]
	if(ssm_id == EPS_ID)
   86270:	79bb      	ldrb	r3, [r7, #6]
   86272:	2b01      	cmp	r3, #1
   86274:	d101      	bne.n	8627a <set_variable+0x22>
		id = SUB1_ID0;
   86276:	231a      	movs	r3, #26
   86278:	61fb      	str	r3, [r7, #28]
	if(ssm_id == PAY_ID)
   8627a:	79bb      	ldrb	r3, [r7, #6]
   8627c:	2b02      	cmp	r3, #2
   8627e:	d101      	bne.n	86284 <set_variable+0x2c>
		id = SUB2_ID0;
   86280:	2320      	movs	r3, #32
   86282:	61fb      	str	r3, [r7, #28]
	
	high = high_command_generator(sender_id, ssm_id, MT_COM, SET_VAR);
   86284:	79fa      	ldrb	r2, [r7, #7]
   86286:	79bb      	ldrb	r3, [r7, #6]
   86288:	4610      	mov	r0, r2
   8628a:	4619      	mov	r1, r3
   8628c:	2202      	movs	r2, #2
   8628e:	230b      	movs	r3, #11
   86290:	4c25      	ldr	r4, [pc, #148]	; (86328 <set_variable+0xd0>)
   86292:	47a0      	blx	r4
   86294:	61b8      	str	r0, [r7, #24]
	low = (uint32_t)var_name;
   86296:	797b      	ldrb	r3, [r7, #5]
   86298:	617b      	str	r3, [r7, #20]
	low = low << 24;
   8629a:	697b      	ldr	r3, [r7, #20]
   8629c:	061b      	lsls	r3, r3, #24
   8629e:	617b      	str	r3, [r7, #20]
	low |= value;
   862a0:	887b      	ldrh	r3, [r7, #2]
   862a2:	697a      	ldr	r2, [r7, #20]
   862a4:	4313      	orrs	r3, r2
   862a6:	617b      	str	r3, [r7, #20]
	
	if (xSemaphoreTake(Can0_Mutex, (TickType_t) 0) == pdTRUE)		// Attempt to acquire CAN1 Mutex, block for 1 tick.
   862a8:	4b20      	ldr	r3, [pc, #128]	; (8632c <set_variable+0xd4>)
   862aa:	681b      	ldr	r3, [r3, #0]
   862ac:	4618      	mov	r0, r3
   862ae:	2100      	movs	r1, #0
   862b0:	2200      	movs	r2, #0
   862b2:	2300      	movs	r3, #0
   862b4:	4c1e      	ldr	r4, [pc, #120]	; (86330 <set_variable+0xd8>)
   862b6:	47a0      	blx	r4
   862b8:	4603      	mov	r3, r0
   862ba:	2b01      	cmp	r3, #1
   862bc:	d12d      	bne.n	8631a <set_variable+0xc2>
	{
		send_can_command_h(low, high, id, DEF_PRIO);
   862be:	6978      	ldr	r0, [r7, #20]
   862c0:	69b9      	ldr	r1, [r7, #24]
   862c2:	69fa      	ldr	r2, [r7, #28]
   862c4:	230a      	movs	r3, #10
   862c6:	4c1b      	ldr	r4, [pc, #108]	; (86334 <set_variable+0xdc>)
   862c8:	47a0      	blx	r4
		check = request_sensor_data_h(sender_id, id, var_name, &ret_val);
   862ca:	69fb      	ldr	r3, [r7, #28]
   862cc:	b2d9      	uxtb	r1, r3
   862ce:	79f8      	ldrb	r0, [r7, #7]
   862d0:	797a      	ldrb	r2, [r7, #5]
   862d2:	f107 030f 	add.w	r3, r7, #15
   862d6:	4c18      	ldr	r4, [pc, #96]	; (86338 <set_variable+0xe0>)
   862d8:	47a0      	blx	r4
   862da:	6138      	str	r0, [r7, #16]
		
		if ((ret_val > 1) || (check != value))
   862dc:	7bfb      	ldrb	r3, [r7, #15]
   862de:	2b01      	cmp	r3, #1
   862e0:	d803      	bhi.n	862ea <set_variable+0x92>
   862e2:	887a      	ldrh	r2, [r7, #2]
   862e4:	693b      	ldr	r3, [r7, #16]
   862e6:	429a      	cmp	r2, r3
   862e8:	d00a      	beq.n	86300 <set_variable+0xa8>
		{
			xSemaphoreGive(Can0_Mutex);
   862ea:	4b10      	ldr	r3, [pc, #64]	; (8632c <set_variable+0xd4>)
   862ec:	681b      	ldr	r3, [r3, #0]
   862ee:	4618      	mov	r0, r3
   862f0:	2100      	movs	r1, #0
   862f2:	2200      	movs	r2, #0
   862f4:	2300      	movs	r3, #0
   862f6:	4c11      	ldr	r4, [pc, #68]	; (8633c <set_variable+0xe4>)
   862f8:	47a0      	blx	r4
			return -1;
   862fa:	f04f 33ff 	mov.w	r3, #4294967295
   862fe:	e00e      	b.n	8631e <set_variable+0xc6>
		}
		else
		{
			xSemaphoreGive(Can0_Mutex);
   86300:	4b0a      	ldr	r3, [pc, #40]	; (8632c <set_variable+0xd4>)
   86302:	681b      	ldr	r3, [r3, #0]
   86304:	4618      	mov	r0, r3
   86306:	2100      	movs	r1, #0
   86308:	2200      	movs	r2, #0
   8630a:	2300      	movs	r3, #0
   8630c:	4c0b      	ldr	r4, [pc, #44]	; (8633c <set_variable+0xe4>)
   8630e:	47a0      	blx	r4
			delay_us(100);
   86310:	2064      	movs	r0, #100	; 0x64
   86312:	4b0b      	ldr	r3, [pc, #44]	; (86340 <set_variable+0xe8>)
   86314:	4798      	blx	r3
			return 1;
   86316:	2301      	movs	r3, #1
   86318:	e001      	b.n	8631e <set_variable+0xc6>
		}
	}
	else
		return -1;					// CAN0 is currently busy or something has gone wrong.
   8631a:	f04f 33ff 	mov.w	r3, #4294967295
}
   8631e:	4618      	mov	r0, r3
   86320:	3724      	adds	r7, #36	; 0x24
   86322:	46bd      	mov	sp, r7
   86324:	bd90      	pop	{r4, r7, pc}
   86326:	bf00      	nop
   86328:	00085fb9 	.word	0x00085fb9
   8632c:	2007a724 	.word	0x2007a724
   86330:	00083a75 	.word	0x00083a75
   86334:	000859ed 	.word	0x000859ed
   86338:	00086009 	.word	0x00086009
   8633c:	000837b5 	.word	0x000837b5
   86340:	00080ca9 	.word	0x00080ca9

00086344 <start_tc_packet>:

// Let the SSM know that you're ready for a TC packet.
static void start_tc_packet(void)
{
   86344:	b590      	push	{r4, r7, lr}
   86346:	b083      	sub	sp, #12
   86348:	af02      	add	r7, sp, #8
	if((!receiving_tcf) && (!current_tc_fullf))
   8634a:	4b0c      	ldr	r3, [pc, #48]	; (8637c <start_tc_packet+0x38>)
   8634c:	781b      	ldrb	r3, [r3, #0]
   8634e:	2b00      	cmp	r3, #0
   86350:	d10d      	bne.n	8636e <start_tc_packet+0x2a>
   86352:	4b0b      	ldr	r3, [pc, #44]	; (86380 <start_tc_packet+0x3c>)
   86354:	781b      	ldrb	r3, [r3, #0]
   86356:	2b00      	cmp	r3, #0
   86358:	d109      	bne.n	8636e <start_tc_packet+0x2a>
	{
		send_can_command(0x00, 0x00, OBC_PACKET_ROUTER_ID, COMS_ID, OK_START_TC_PACKET, COMMAND_PRIO);		
   8635a:	2312      	movs	r3, #18
   8635c:	9300      	str	r3, [sp, #0]
   8635e:	2319      	movs	r3, #25
   86360:	9301      	str	r3, [sp, #4]
   86362:	2000      	movs	r0, #0
   86364:	2100      	movs	r1, #0
   86366:	220a      	movs	r2, #10
   86368:	2300      	movs	r3, #0
   8636a:	4c06      	ldr	r4, [pc, #24]	; (86384 <start_tc_packet+0x40>)
   8636c:	47a0      	blx	r4
	}
	receiving_tcf = 1;
   8636e:	4b03      	ldr	r3, [pc, #12]	; (8637c <start_tc_packet+0x38>)
   86370:	2201      	movs	r2, #1
   86372:	701a      	strb	r2, [r3, #0]
	return;
   86374:	bf00      	nop
}
   86376:	3704      	adds	r7, #4
   86378:	46bd      	mov	sp, r7
   8637a:	bd90      	pop	{r4, r7, pc}
   8637c:	2007a650 	.word	0x2007a650
   86380:	2007a648 	.word	0x2007a648
   86384:	00085a85 	.word	0x00085a85

00086388 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
   86388:	b480      	push	{r7}
   8638a:	b085      	sub	sp, #20
   8638c:	af00      	add	r7, sp, #0
   8638e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
   86390:	687b      	ldr	r3, [r7, #4]
   86392:	f003 0307 	and.w	r3, r3, #7
   86396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
   86398:	4b0c      	ldr	r3, [pc, #48]	; (863cc <NVIC_SetPriorityGrouping+0x44>)
   8639a:	68db      	ldr	r3, [r3, #12]
   8639c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
   8639e:	68ba      	ldr	r2, [r7, #8]
   863a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
   863a4:	4013      	ands	r3, r2
   863a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
   863a8:	68fb      	ldr	r3, [r7, #12]
   863aa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
   863ac:	68bb      	ldr	r3, [r7, #8]
   863ae:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
   863b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   863b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   863b8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
   863ba:	4b04      	ldr	r3, [pc, #16]	; (863cc <NVIC_SetPriorityGrouping+0x44>)
   863bc:	68ba      	ldr	r2, [r7, #8]
   863be:	60da      	str	r2, [r3, #12]
}
   863c0:	3714      	adds	r7, #20
   863c2:	46bd      	mov	sp, r7
   863c4:	f85d 7b04 	ldr.w	r7, [sp], #4
   863c8:	4770      	bx	lr
   863ca:	bf00      	nop
   863cc:	e000ed00 	.word	0xe000ed00

000863d0 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   863d0:	b480      	push	{r7}
   863d2:	b083      	sub	sp, #12
   863d4:	af00      	add	r7, sp, #0
   863d6:	4603      	mov	r3, r0
   863d8:	6039      	str	r1, [r7, #0]
   863da:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   863dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   863e0:	2b00      	cmp	r3, #0
   863e2:	da0b      	bge.n	863fc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   863e4:	490d      	ldr	r1, [pc, #52]	; (8641c <NVIC_SetPriority+0x4c>)
   863e6:	79fb      	ldrb	r3, [r7, #7]
   863e8:	f003 030f 	and.w	r3, r3, #15
   863ec:	3b04      	subs	r3, #4
   863ee:	683a      	ldr	r2, [r7, #0]
   863f0:	b2d2      	uxtb	r2, r2
   863f2:	0112      	lsls	r2, r2, #4
   863f4:	b2d2      	uxtb	r2, r2
   863f6:	440b      	add	r3, r1
   863f8:	761a      	strb	r2, [r3, #24]
   863fa:	e009      	b.n	86410 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   863fc:	4908      	ldr	r1, [pc, #32]	; (86420 <NVIC_SetPriority+0x50>)
   863fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86402:	683a      	ldr	r2, [r7, #0]
   86404:	b2d2      	uxtb	r2, r2
   86406:	0112      	lsls	r2, r2, #4
   86408:	b2d2      	uxtb	r2, r2
   8640a:	440b      	add	r3, r1
   8640c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   86410:	370c      	adds	r7, #12
   86412:	46bd      	mov	sp, r7
   86414:	f85d 7b04 	ldr.w	r7, [sp], #4
   86418:	4770      	bx	lr
   8641a:	bf00      	nop
   8641c:	e000ed00 	.word	0xe000ed00
   86420:	e000e100 	.word	0xe000e100

00086424 <NVIC_GetPriority>:

    \param [in]   IRQn  Number of the interrupt for get priority
    \return             Interrupt Priority
 */
static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
   86424:	b480      	push	{r7}
   86426:	b083      	sub	sp, #12
   86428:	af00      	add	r7, sp, #0
   8642a:	4603      	mov	r3, r0
   8642c:	71fb      	strb	r3, [r7, #7]

  if(IRQn < 0) {
   8642e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86432:	2b00      	cmp	r3, #0
   86434:	da0a      	bge.n	8644c <NVIC_GetPriority+0x28>
    return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for Cortex-M  system interrupts */
   86436:	4a0d      	ldr	r2, [pc, #52]	; (8646c <NVIC_GetPriority+0x48>)
   86438:	79fb      	ldrb	r3, [r7, #7]
   8643a:	f003 030f 	and.w	r3, r3, #15
   8643e:	3b04      	subs	r3, #4
   86440:	4413      	add	r3, r2
   86442:	7e1b      	ldrb	r3, [r3, #24]
   86444:	b2db      	uxtb	r3, r3
   86446:	091b      	lsrs	r3, r3, #4
   86448:	b2db      	uxtb	r3, r3
   8644a:	e008      	b.n	8645e <NVIC_GetPriority+0x3a>
  else {
    return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get priority for device specific interrupts  */
   8644c:	4a08      	ldr	r2, [pc, #32]	; (86470 <NVIC_GetPriority+0x4c>)
   8644e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   86452:	4413      	add	r3, r2
   86454:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
   86458:	b2db      	uxtb	r3, r3
   8645a:	091b      	lsrs	r3, r3, #4
   8645c:	b2db      	uxtb	r3, r3
}
   8645e:	4618      	mov	r0, r3
   86460:	370c      	adds	r7, #12
   86462:	46bd      	mov	sp, r7
   86464:	f85d 7b04 	ldr.w	r7, [sp], #4
   86468:	4770      	bx	lr
   8646a:	bf00      	nop
   8646c:	e000ed00 	.word	0xe000ed00
   86470:	e000e100 	.word	0xe000e100

00086474 <main>:
/*		This is the function that is called when the reset handler		*/
/*		is triggered.													*/
/************************************************************************/

int main(void)
{
   86474:	b580      	push	{r7, lr}
   86476:	af00      	add	r7, sp, #0
	SAFE_MODE = 0;
   86478:	4b06      	ldr	r3, [pc, #24]	; (86494 <main+0x20>)
   8647a:	2200      	movs	r2, #0
   8647c:	601a      	str	r2, [r3, #0]
	safe_mode();
   8647e:	4b06      	ldr	r3, [pc, #24]	; (86498 <main+0x24>)
   86480:	4798      	blx	r3
	
	/* Initialize Interrupt Priorities */
	prvInitializeInterruptPriorities();
   86482:	4b06      	ldr	r3, [pc, #24]	; (8649c <main+0x28>)
   86484:	4798      	blx	r3
	
	/* Prepare the hardware */
	prvSetupHardware();
   86486:	4b06      	ldr	r3, [pc, #24]	; (864a0 <main+0x2c>)
   86488:	4798      	blx	r3
	//command_loop();
	//housekeep();
	//data_test();
	//time_update();
	//memory_wash();
	eps();
   8648a:	4b06      	ldr	r3, [pc, #24]	; (864a4 <main+0x30>)
   8648c:	4798      	blx	r3
	//wdt_reset();
	
	/* Start Scheduler */
	vTaskStartScheduler();
   8648e:	4b06      	ldr	r3, [pc, #24]	; (864a8 <main+0x34>)
   86490:	4798      	blx	r3
	
	/* If all is well, the scheduler will now be running, and the following
	line will never be reached.  If the following line does execute, then
	there was insufficient FreeRTOS heap memory available for tasks	to be created.*/
	
	while (1);
   86492:	e7fe      	b.n	86492 <main+0x1e>
   86494:	2007a70c 	.word	0x2007a70c
   86498:	000864ad 	.word	0x000864ad
   8649c:	0008656d 	.word	0x0008656d
   864a0:	000864ed 	.word	0x000864ed
   864a4:	000804f1 	.word	0x000804f1
   864a8:	0008419d 	.word	0x0008419d

000864ac <safe_mode>:
	return 0;
}
/*-----------------------------------------------------------*/

static void safe_mode(void)
{
   864ac:	b580      	push	{r7, lr}
   864ae:	af00      	add	r7, sp, #0
	extern void SystemCoreClockUpdate(void);
	
	/* ASF function to setup clocking. */
	sysclk_init();
   864b0:	4b08      	ldr	r3, [pc, #32]	; (864d4 <safe_mode+0x28>)
   864b2:	4798      	blx	r3
	
	/* Ensure all priority bits are assigned as preemption priority bits. */
	NVIC_SetPriorityGrouping(0);
   864b4:	2000      	movs	r0, #0
   864b6:	4b08      	ldr	r3, [pc, #32]	; (864d8 <safe_mode+0x2c>)
   864b8:	4798      	blx	r3
	
	/* Initializes WDT, CAN, and interrupts. */
	safe_board_init();
   864ba:	4b08      	ldr	r3, [pc, #32]	; (864dc <safe_mode+0x30>)
   864bc:	4798      	blx	r3
	//uint32_t timeOut, low, high;
	
	//timeOut = 80000000;
	
	/* Initialize Mutexes */
	prvInitializeMutexes();
   864be:	4b08      	ldr	r3, [pc, #32]	; (864e0 <safe_mode+0x34>)
   864c0:	4798      	blx	r3
	
	/* Initialize CAN-related registers and functions for tests and operation */
	can_initialize();
   864c2:	4b08      	ldr	r3, [pc, #32]	; (864e4 <safe_mode+0x38>)
   864c4:	4798      	blx	r3
	
	//uint32_t a;
	//a = fletcher32(MEM_LOCATION, SIZE);
	
	
	while(SAFE_MODE)
   864c6:	bf00      	nop
   864c8:	4b07      	ldr	r3, [pc, #28]	; (864e8 <safe_mode+0x3c>)
   864ca:	681b      	ldr	r3, [r3, #0]
   864cc:	2b00      	cmp	r3, #0
   864ce:	d1fb      	bne.n	864c8 <safe_mode+0x1c>
			send_can_command(low, high, SUB0_ID0, DEF_PRIO);
			timeOut = 80000000;
		}
		*/
	}
}
   864d0:	bd80      	pop	{r7, pc}
   864d2:	bf00      	nop
   864d4:	000816ad 	.word	0x000816ad
   864d8:	00086389 	.word	0x00086389
   864dc:	00081801 	.word	0x00081801
   864e0:	00086515 	.word	0x00086515
   864e4:	00085c15 	.word	0x00085c15
   864e8:	2007a70c 	.word	0x2007a70c

000864ec <prvSetupHardware>:

/**
 * \brief Initializes the hardware.	
 */
static void prvSetupHardware(void)
{
   864ec:	b580      	push	{r7, lr}
   864ee:	af00      	add	r7, sp, #0
	/* Perform the remainder of board initialization functions. */
	board_init();
   864f0:	4b04      	ldr	r3, [pc, #16]	; (86504 <prvSetupHardware+0x18>)
   864f2:	4798      	blx	r3

	/* Perform any configuration necessary to use the ParTest LED output functions. */
	vParTestInitialise();
   864f4:	4b04      	ldr	r3, [pc, #16]	; (86508 <prvSetupHardware+0x1c>)
   864f6:	4798      	blx	r3
		
	/* Initialize USART-related registers and functions. */
	usart_initialize();
   864f8:	4b04      	ldr	r3, [pc, #16]	; (8650c <prvSetupHardware+0x20>)
   864fa:	4798      	blx	r3
	
	/* Initialize SPI related registers and functions. */
	spi_initialize();
   864fc:	4b04      	ldr	r3, [pc, #16]	; (86510 <prvSetupHardware+0x24>)
   864fe:	4798      	blx	r3
	//rtc_init(DS3234_INTCN);
	
	/* Initialize the SPI memory chips	*/
	//spimem_initialize();
	
}
   86500:	bd80      	pop	{r7, pc}
   86502:	bf00      	nop
   86504:	0008189d 	.word	0x0008189d
   86508:	00080845 	.word	0x00080845
   8650c:	0008132d 	.word	0x0008132d
   86510:	00080c99 	.word	0x00080c99

00086514 <prvInitializeMutexes>:
/*-----------------------------------------------------------*/

static void prvInitializeMutexes(void)
{	
   86514:	b598      	push	{r3, r4, r7, lr}
   86516:	af00      	add	r7, sp, #0
	Can0_Mutex = xSemaphoreCreateBinary();
   86518:	2001      	movs	r0, #1
   8651a:	2100      	movs	r1, #0
   8651c:	2203      	movs	r2, #3
   8651e:	4b0f      	ldr	r3, [pc, #60]	; (8655c <prvInitializeMutexes+0x48>)
   86520:	4798      	blx	r3
   86522:	4602      	mov	r2, r0
   86524:	4b0e      	ldr	r3, [pc, #56]	; (86560 <prvInitializeMutexes+0x4c>)
   86526:	601a      	str	r2, [r3, #0]
	Spi0_Mutex = xSemaphoreCreateBinary();
   86528:	2001      	movs	r0, #1
   8652a:	2100      	movs	r1, #0
   8652c:	2203      	movs	r2, #3
   8652e:	4b0b      	ldr	r3, [pc, #44]	; (8655c <prvInitializeMutexes+0x48>)
   86530:	4798      	blx	r3
   86532:	4602      	mov	r2, r0
   86534:	4b0b      	ldr	r3, [pc, #44]	; (86564 <prvInitializeMutexes+0x50>)
   86536:	601a      	str	r2, [r3, #0]

	xSemaphoreGive(Can0_Mutex);
   86538:	4b09      	ldr	r3, [pc, #36]	; (86560 <prvInitializeMutexes+0x4c>)
   8653a:	681b      	ldr	r3, [r3, #0]
   8653c:	4618      	mov	r0, r3
   8653e:	2100      	movs	r1, #0
   86540:	2200      	movs	r2, #0
   86542:	2300      	movs	r3, #0
   86544:	4c08      	ldr	r4, [pc, #32]	; (86568 <prvInitializeMutexes+0x54>)
   86546:	47a0      	blx	r4
	xSemaphoreGive(Spi0_Mutex);
   86548:	4b06      	ldr	r3, [pc, #24]	; (86564 <prvInitializeMutexes+0x50>)
   8654a:	681b      	ldr	r3, [r3, #0]
   8654c:	4618      	mov	r0, r3
   8654e:	2100      	movs	r1, #0
   86550:	2200      	movs	r2, #0
   86552:	2300      	movs	r3, #0
   86554:	4c04      	ldr	r4, [pc, #16]	; (86568 <prvInitializeMutexes+0x54>)
   86556:	47a0      	blx	r4
	return;
   86558:	bf00      	nop
}
   8655a:	bd98      	pop	{r3, r4, r7, pc}
   8655c:	00083729 	.word	0x00083729
   86560:	2007a724 	.word	0x2007a724
   86564:	2007ab74 	.word	0x2007ab74
   86568:	000837b5 	.word	0x000837b5

0008656c <prvInitializeInterruptPriorities>:

static void prvInitializeInterruptPriorities(void)
{
   8656c:	b580      	push	{r7, lr}
   8656e:	b082      	sub	sp, #8
   86570:	af00      	add	r7, sp, #0
	uint32_t priority = 11;
   86572:	230b      	movs	r3, #11
   86574:	607b      	str	r3, [r7, #4]
	IRQn_Type can1_int_num = (IRQn_Type)44;
   86576:	232c      	movs	r3, #44	; 0x2c
   86578:	70fb      	strb	r3, [r7, #3]
	IRQn_Type can0_int_num = (IRQn_Type)43;
   8657a:	232b      	movs	r3, #43	; 0x2b
   8657c:	70bb      	strb	r3, [r7, #2]
		
	NVIC_SetPriority(can1_int_num, priority);
   8657e:	f997 3003 	ldrsb.w	r3, [r7, #3]
   86582:	4618      	mov	r0, r3
   86584:	6879      	ldr	r1, [r7, #4]
   86586:	4b0a      	ldr	r3, [pc, #40]	; (865b0 <prvInitializeInterruptPriorities+0x44>)
   86588:	4798      	blx	r3
	
	priority = 12;	
   8658a:	230c      	movs	r3, #12
   8658c:	607b      	str	r3, [r7, #4]
	NVIC_SetPriority(can0_int_num, priority);
   8658e:	f997 3002 	ldrsb.w	r3, [r7, #2]
   86592:	4618      	mov	r0, r3
   86594:	6879      	ldr	r1, [r7, #4]
   86596:	4b06      	ldr	r3, [pc, #24]	; (865b0 <prvInitializeInterruptPriorities+0x44>)
   86598:	4798      	blx	r3
	
	priority = NVIC_GetPriority(can1_int_num);
   8659a:	f997 3003 	ldrsb.w	r3, [r7, #3]
   8659e:	4618      	mov	r0, r3
   865a0:	4b04      	ldr	r3, [pc, #16]	; (865b4 <prvInitializeInterruptPriorities+0x48>)
   865a2:	4798      	blx	r3
   865a4:	6078      	str	r0, [r7, #4]
	
	return;
   865a6:	bf00      	nop
}
   865a8:	3708      	adds	r7, #8
   865aa:	46bd      	mov	sp, r7
   865ac:	bd80      	pop	{r7, pc}
   865ae:	bf00      	nop
   865b0:	000863d1 	.word	0x000863d1
   865b4:	00086425 	.word	0x00086425

000865b8 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
   865b8:	b580      	push	{r7, lr}
   865ba:	af00      	add	r7, sp, #0
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
   865bc:	4b01      	ldr	r3, [pc, #4]	; (865c4 <vApplicationMallocFailedHook+0xc>)
   865be:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   865c0:	e7fe      	b.n	865c0 <vApplicationMallocFailedHook+0x8>
   865c2:	bf00      	nop
   865c4:	000831ad 	.word	0x000831ad

000865c8 <vApplicationStackOverflowHook>:

/**
 * \brief 
 */
void vApplicationStackOverflowHook(TaskHandle_t pxTask, char *pcTaskName)
{
   865c8:	b580      	push	{r7, lr}
   865ca:	b082      	sub	sp, #8
   865cc:	af00      	add	r7, sp, #0
   865ce:	6078      	str	r0, [r7, #4]
   865d0:	6039      	str	r1, [r7, #0]
	(void)pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
   865d2:	4b01      	ldr	r3, [pc, #4]	; (865d8 <vApplicationStackOverflowHook+0x10>)
   865d4:	4798      	blx	r3
	/* @non-terminating@ */
	for (;;);
   865d6:	e7fe      	b.n	865d6 <vApplicationStackOverflowHook+0xe>
   865d8:	000831ad 	.word	0x000831ad

000865dc <WDT_Handler>:

/**
 * \brief Clears watchdog timer status bit and restarts the counter.
 */
void WDT_Handler(void)
{
   865dc:	b580      	push	{r7, lr}
   865de:	af00      	add	r7, sp, #0
	/* Clear status bit to acknowledge interrupt by dummy read. */
	wdt_get_status(WDT);
   865e0:	4804      	ldr	r0, [pc, #16]	; (865f4 <WDT_Handler+0x18>)
   865e2:	4b05      	ldr	r3, [pc, #20]	; (865f8 <WDT_Handler+0x1c>)
   865e4:	4798      	blx	r3
	gpio_toggle_pin(LED1_GPIO);
   865e6:	2055      	movs	r0, #85	; 0x55
   865e8:	4b04      	ldr	r3, [pc, #16]	; (865fc <WDT_Handler+0x20>)
   865ea:	4798      	blx	r3
	/* Restart the WDT counter. */
	wdt_restart(WDT);
   865ec:	4801      	ldr	r0, [pc, #4]	; (865f4 <WDT_Handler+0x18>)
   865ee:	4b04      	ldr	r3, [pc, #16]	; (86600 <WDT_Handler+0x24>)
   865f0:	4798      	blx	r3
}
   865f2:	bd80      	pop	{r7, pc}
   865f4:	400e1a50 	.word	0x400e1a50
   865f8:	00082b3d 	.word	0x00082b3d
   865fc:	00082185 	.word	0x00082185
   86600:	00082b15 	.word	0x00082b15

00086604 <__aeabi_frsub>:
   86604:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   86608:	e002      	b.n	86610 <__addsf3>
   8660a:	bf00      	nop

0008660c <__aeabi_fsub>:
   8660c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00086610 <__addsf3>:
   86610:	0042      	lsls	r2, r0, #1
   86612:	bf1f      	itttt	ne
   86614:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   86618:	ea92 0f03 	teqne	r2, r3
   8661c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   86620:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86624:	d06a      	beq.n	866fc <__addsf3+0xec>
   86626:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8662a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8662e:	bfc1      	itttt	gt
   86630:	18d2      	addgt	r2, r2, r3
   86632:	4041      	eorgt	r1, r0
   86634:	4048      	eorgt	r0, r1
   86636:	4041      	eorgt	r1, r0
   86638:	bfb8      	it	lt
   8663a:	425b      	neglt	r3, r3
   8663c:	2b19      	cmp	r3, #25
   8663e:	bf88      	it	hi
   86640:	4770      	bxhi	lr
   86642:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   86646:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8664a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   8664e:	bf18      	it	ne
   86650:	4240      	negne	r0, r0
   86652:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   86656:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8665a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   8665e:	bf18      	it	ne
   86660:	4249      	negne	r1, r1
   86662:	ea92 0f03 	teq	r2, r3
   86666:	d03f      	beq.n	866e8 <__addsf3+0xd8>
   86668:	f1a2 0201 	sub.w	r2, r2, #1
   8666c:	fa41 fc03 	asr.w	ip, r1, r3
   86670:	eb10 000c 	adds.w	r0, r0, ip
   86674:	f1c3 0320 	rsb	r3, r3, #32
   86678:	fa01 f103 	lsl.w	r1, r1, r3
   8667c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86680:	d502      	bpl.n	86688 <__addsf3+0x78>
   86682:	4249      	negs	r1, r1
   86684:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   86688:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   8668c:	d313      	bcc.n	866b6 <__addsf3+0xa6>
   8668e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   86692:	d306      	bcc.n	866a2 <__addsf3+0x92>
   86694:	0840      	lsrs	r0, r0, #1
   86696:	ea4f 0131 	mov.w	r1, r1, rrx
   8669a:	f102 0201 	add.w	r2, r2, #1
   8669e:	2afe      	cmp	r2, #254	; 0xfe
   866a0:	d251      	bcs.n	86746 <__addsf3+0x136>
   866a2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   866a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   866aa:	bf08      	it	eq
   866ac:	f020 0001 	biceq.w	r0, r0, #1
   866b0:	ea40 0003 	orr.w	r0, r0, r3
   866b4:	4770      	bx	lr
   866b6:	0049      	lsls	r1, r1, #1
   866b8:	eb40 0000 	adc.w	r0, r0, r0
   866bc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   866c0:	f1a2 0201 	sub.w	r2, r2, #1
   866c4:	d1ed      	bne.n	866a2 <__addsf3+0x92>
   866c6:	fab0 fc80 	clz	ip, r0
   866ca:	f1ac 0c08 	sub.w	ip, ip, #8
   866ce:	ebb2 020c 	subs.w	r2, r2, ip
   866d2:	fa00 f00c 	lsl.w	r0, r0, ip
   866d6:	bfaa      	itet	ge
   866d8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   866dc:	4252      	neglt	r2, r2
   866de:	4318      	orrge	r0, r3
   866e0:	bfbc      	itt	lt
   866e2:	40d0      	lsrlt	r0, r2
   866e4:	4318      	orrlt	r0, r3
   866e6:	4770      	bx	lr
   866e8:	f092 0f00 	teq	r2, #0
   866ec:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   866f0:	bf06      	itte	eq
   866f2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   866f6:	3201      	addeq	r2, #1
   866f8:	3b01      	subne	r3, #1
   866fa:	e7b5      	b.n	86668 <__addsf3+0x58>
   866fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86704:	bf18      	it	ne
   86706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8670a:	d021      	beq.n	86750 <__addsf3+0x140>
   8670c:	ea92 0f03 	teq	r2, r3
   86710:	d004      	beq.n	8671c <__addsf3+0x10c>
   86712:	f092 0f00 	teq	r2, #0
   86716:	bf08      	it	eq
   86718:	4608      	moveq	r0, r1
   8671a:	4770      	bx	lr
   8671c:	ea90 0f01 	teq	r0, r1
   86720:	bf1c      	itt	ne
   86722:	2000      	movne	r0, #0
   86724:	4770      	bxne	lr
   86726:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8672a:	d104      	bne.n	86736 <__addsf3+0x126>
   8672c:	0040      	lsls	r0, r0, #1
   8672e:	bf28      	it	cs
   86730:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   86734:	4770      	bx	lr
   86736:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8673a:	bf3c      	itt	cc
   8673c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   86740:	4770      	bxcc	lr
   86742:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   86746:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   8674a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8674e:	4770      	bx	lr
   86750:	ea7f 6222 	mvns.w	r2, r2, asr #24
   86754:	bf16      	itet	ne
   86756:	4608      	movne	r0, r1
   86758:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   8675c:	4601      	movne	r1, r0
   8675e:	0242      	lsls	r2, r0, #9
   86760:	bf06      	itte	eq
   86762:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   86766:	ea90 0f01 	teqeq	r0, r1
   8676a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   8676e:	4770      	bx	lr

00086770 <__aeabi_ui2f>:
   86770:	f04f 0300 	mov.w	r3, #0
   86774:	e004      	b.n	86780 <__aeabi_i2f+0x8>
   86776:	bf00      	nop

00086778 <__aeabi_i2f>:
   86778:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   8677c:	bf48      	it	mi
   8677e:	4240      	negmi	r0, r0
   86780:	ea5f 0c00 	movs.w	ip, r0
   86784:	bf08      	it	eq
   86786:	4770      	bxeq	lr
   86788:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   8678c:	4601      	mov	r1, r0
   8678e:	f04f 0000 	mov.w	r0, #0
   86792:	e01c      	b.n	867ce <__aeabi_l2f+0x2a>

00086794 <__aeabi_ul2f>:
   86794:	ea50 0201 	orrs.w	r2, r0, r1
   86798:	bf08      	it	eq
   8679a:	4770      	bxeq	lr
   8679c:	f04f 0300 	mov.w	r3, #0
   867a0:	e00a      	b.n	867b8 <__aeabi_l2f+0x14>
   867a2:	bf00      	nop

000867a4 <__aeabi_l2f>:
   867a4:	ea50 0201 	orrs.w	r2, r0, r1
   867a8:	bf08      	it	eq
   867aa:	4770      	bxeq	lr
   867ac:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   867b0:	d502      	bpl.n	867b8 <__aeabi_l2f+0x14>
   867b2:	4240      	negs	r0, r0
   867b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   867b8:	ea5f 0c01 	movs.w	ip, r1
   867bc:	bf02      	ittt	eq
   867be:	4684      	moveq	ip, r0
   867c0:	4601      	moveq	r1, r0
   867c2:	2000      	moveq	r0, #0
   867c4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   867c8:	bf08      	it	eq
   867ca:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   867ce:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   867d2:	fabc f28c 	clz	r2, ip
   867d6:	3a08      	subs	r2, #8
   867d8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   867dc:	db10      	blt.n	86800 <__aeabi_l2f+0x5c>
   867de:	fa01 fc02 	lsl.w	ip, r1, r2
   867e2:	4463      	add	r3, ip
   867e4:	fa00 fc02 	lsl.w	ip, r0, r2
   867e8:	f1c2 0220 	rsb	r2, r2, #32
   867ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   867f0:	fa20 f202 	lsr.w	r2, r0, r2
   867f4:	eb43 0002 	adc.w	r0, r3, r2
   867f8:	bf08      	it	eq
   867fa:	f020 0001 	biceq.w	r0, r0, #1
   867fe:	4770      	bx	lr
   86800:	f102 0220 	add.w	r2, r2, #32
   86804:	fa01 fc02 	lsl.w	ip, r1, r2
   86808:	f1c2 0220 	rsb	r2, r2, #32
   8680c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   86810:	fa21 f202 	lsr.w	r2, r1, r2
   86814:	eb43 0002 	adc.w	r0, r3, r2
   86818:	bf08      	it	eq
   8681a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8681e:	4770      	bx	lr

00086820 <__aeabi_fmul>:
   86820:	f04f 0cff 	mov.w	ip, #255	; 0xff
   86824:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86828:	bf1e      	ittt	ne
   8682a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8682e:	ea92 0f0c 	teqne	r2, ip
   86832:	ea93 0f0c 	teqne	r3, ip
   86836:	d06f      	beq.n	86918 <__aeabi_fmul+0xf8>
   86838:	441a      	add	r2, r3
   8683a:	ea80 0c01 	eor.w	ip, r0, r1
   8683e:	0240      	lsls	r0, r0, #9
   86840:	bf18      	it	ne
   86842:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   86846:	d01e      	beq.n	86886 <__aeabi_fmul+0x66>
   86848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   8684c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   86850:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   86854:	fba0 3101 	umull	r3, r1, r0, r1
   86858:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   8685c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   86860:	bf3e      	ittt	cc
   86862:	0049      	lslcc	r1, r1, #1
   86864:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   86868:	005b      	lslcc	r3, r3, #1
   8686a:	ea40 0001 	orr.w	r0, r0, r1
   8686e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   86872:	2afd      	cmp	r2, #253	; 0xfd
   86874:	d81d      	bhi.n	868b2 <__aeabi_fmul+0x92>
   86876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   8687a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8687e:	bf08      	it	eq
   86880:	f020 0001 	biceq.w	r0, r0, #1
   86884:	4770      	bx	lr
   86886:	f090 0f00 	teq	r0, #0
   8688a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   8688e:	bf08      	it	eq
   86890:	0249      	lsleq	r1, r1, #9
   86892:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86896:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   8689a:	3a7f      	subs	r2, #127	; 0x7f
   8689c:	bfc2      	ittt	gt
   8689e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   868a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   868a6:	4770      	bxgt	lr
   868a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   868ac:	f04f 0300 	mov.w	r3, #0
   868b0:	3a01      	subs	r2, #1
   868b2:	dc5d      	bgt.n	86970 <__aeabi_fmul+0x150>
   868b4:	f112 0f19 	cmn.w	r2, #25
   868b8:	bfdc      	itt	le
   868ba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   868be:	4770      	bxle	lr
   868c0:	f1c2 0200 	rsb	r2, r2, #0
   868c4:	0041      	lsls	r1, r0, #1
   868c6:	fa21 f102 	lsr.w	r1, r1, r2
   868ca:	f1c2 0220 	rsb	r2, r2, #32
   868ce:	fa00 fc02 	lsl.w	ip, r0, r2
   868d2:	ea5f 0031 	movs.w	r0, r1, rrx
   868d6:	f140 0000 	adc.w	r0, r0, #0
   868da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   868de:	bf08      	it	eq
   868e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   868e4:	4770      	bx	lr
   868e6:	f092 0f00 	teq	r2, #0
   868ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   868ee:	bf02      	ittt	eq
   868f0:	0040      	lsleq	r0, r0, #1
   868f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   868f6:	3a01      	subeq	r2, #1
   868f8:	d0f9      	beq.n	868ee <__aeabi_fmul+0xce>
   868fa:	ea40 000c 	orr.w	r0, r0, ip
   868fe:	f093 0f00 	teq	r3, #0
   86902:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86906:	bf02      	ittt	eq
   86908:	0049      	lsleq	r1, r1, #1
   8690a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8690e:	3b01      	subeq	r3, #1
   86910:	d0f9      	beq.n	86906 <__aeabi_fmul+0xe6>
   86912:	ea41 010c 	orr.w	r1, r1, ip
   86916:	e78f      	b.n	86838 <__aeabi_fmul+0x18>
   86918:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8691c:	ea92 0f0c 	teq	r2, ip
   86920:	bf18      	it	ne
   86922:	ea93 0f0c 	teqne	r3, ip
   86926:	d00a      	beq.n	8693e <__aeabi_fmul+0x11e>
   86928:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8692c:	bf18      	it	ne
   8692e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86932:	d1d8      	bne.n	868e6 <__aeabi_fmul+0xc6>
   86934:	ea80 0001 	eor.w	r0, r0, r1
   86938:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8693c:	4770      	bx	lr
   8693e:	f090 0f00 	teq	r0, #0
   86942:	bf17      	itett	ne
   86944:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   86948:	4608      	moveq	r0, r1
   8694a:	f091 0f00 	teqne	r1, #0
   8694e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   86952:	d014      	beq.n	8697e <__aeabi_fmul+0x15e>
   86954:	ea92 0f0c 	teq	r2, ip
   86958:	d101      	bne.n	8695e <__aeabi_fmul+0x13e>
   8695a:	0242      	lsls	r2, r0, #9
   8695c:	d10f      	bne.n	8697e <__aeabi_fmul+0x15e>
   8695e:	ea93 0f0c 	teq	r3, ip
   86962:	d103      	bne.n	8696c <__aeabi_fmul+0x14c>
   86964:	024b      	lsls	r3, r1, #9
   86966:	bf18      	it	ne
   86968:	4608      	movne	r0, r1
   8696a:	d108      	bne.n	8697e <__aeabi_fmul+0x15e>
   8696c:	ea80 0001 	eor.w	r0, r0, r1
   86970:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   86974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8697c:	4770      	bx	lr
   8697e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   86982:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   86986:	4770      	bx	lr

00086988 <__aeabi_fdiv>:
   86988:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8698c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   86990:	bf1e      	ittt	ne
   86992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   86996:	ea92 0f0c 	teqne	r2, ip
   8699a:	ea93 0f0c 	teqne	r3, ip
   8699e:	d069      	beq.n	86a74 <__aeabi_fdiv+0xec>
   869a0:	eba2 0203 	sub.w	r2, r2, r3
   869a4:	ea80 0c01 	eor.w	ip, r0, r1
   869a8:	0249      	lsls	r1, r1, #9
   869aa:	ea4f 2040 	mov.w	r0, r0, lsl #9
   869ae:	d037      	beq.n	86a20 <__aeabi_fdiv+0x98>
   869b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   869b4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   869b8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   869bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   869c0:	428b      	cmp	r3, r1
   869c2:	bf38      	it	cc
   869c4:	005b      	lslcc	r3, r3, #1
   869c6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   869ca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   869ce:	428b      	cmp	r3, r1
   869d0:	bf24      	itt	cs
   869d2:	1a5b      	subcs	r3, r3, r1
   869d4:	ea40 000c 	orrcs.w	r0, r0, ip
   869d8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   869dc:	bf24      	itt	cs
   869de:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   869e2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   869e6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   869ea:	bf24      	itt	cs
   869ec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   869f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   869f4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   869f8:	bf24      	itt	cs
   869fa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   869fe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   86a02:	011b      	lsls	r3, r3, #4
   86a04:	bf18      	it	ne
   86a06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   86a0a:	d1e0      	bne.n	869ce <__aeabi_fdiv+0x46>
   86a0c:	2afd      	cmp	r2, #253	; 0xfd
   86a0e:	f63f af50 	bhi.w	868b2 <__aeabi_fmul+0x92>
   86a12:	428b      	cmp	r3, r1
   86a14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   86a18:	bf08      	it	eq
   86a1a:	f020 0001 	biceq.w	r0, r0, #1
   86a1e:	4770      	bx	lr
   86a20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   86a24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   86a28:	327f      	adds	r2, #127	; 0x7f
   86a2a:	bfc2      	ittt	gt
   86a2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   86a30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   86a34:	4770      	bxgt	lr
   86a36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   86a3a:	f04f 0300 	mov.w	r3, #0
   86a3e:	3a01      	subs	r2, #1
   86a40:	e737      	b.n	868b2 <__aeabi_fmul+0x92>
   86a42:	f092 0f00 	teq	r2, #0
   86a46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   86a4a:	bf02      	ittt	eq
   86a4c:	0040      	lsleq	r0, r0, #1
   86a4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   86a52:	3a01      	subeq	r2, #1
   86a54:	d0f9      	beq.n	86a4a <__aeabi_fdiv+0xc2>
   86a56:	ea40 000c 	orr.w	r0, r0, ip
   86a5a:	f093 0f00 	teq	r3, #0
   86a5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   86a62:	bf02      	ittt	eq
   86a64:	0049      	lsleq	r1, r1, #1
   86a66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   86a6a:	3b01      	subeq	r3, #1
   86a6c:	d0f9      	beq.n	86a62 <__aeabi_fdiv+0xda>
   86a6e:	ea41 010c 	orr.w	r1, r1, ip
   86a72:	e795      	b.n	869a0 <__aeabi_fdiv+0x18>
   86a74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   86a78:	ea92 0f0c 	teq	r2, ip
   86a7c:	d108      	bne.n	86a90 <__aeabi_fdiv+0x108>
   86a7e:	0242      	lsls	r2, r0, #9
   86a80:	f47f af7d 	bne.w	8697e <__aeabi_fmul+0x15e>
   86a84:	ea93 0f0c 	teq	r3, ip
   86a88:	f47f af70 	bne.w	8696c <__aeabi_fmul+0x14c>
   86a8c:	4608      	mov	r0, r1
   86a8e:	e776      	b.n	8697e <__aeabi_fmul+0x15e>
   86a90:	ea93 0f0c 	teq	r3, ip
   86a94:	d104      	bne.n	86aa0 <__aeabi_fdiv+0x118>
   86a96:	024b      	lsls	r3, r1, #9
   86a98:	f43f af4c 	beq.w	86934 <__aeabi_fmul+0x114>
   86a9c:	4608      	mov	r0, r1
   86a9e:	e76e      	b.n	8697e <__aeabi_fmul+0x15e>
   86aa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   86aa4:	bf18      	it	ne
   86aa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   86aaa:	d1ca      	bne.n	86a42 <__aeabi_fdiv+0xba>
   86aac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   86ab0:	f47f af5c 	bne.w	8696c <__aeabi_fmul+0x14c>
   86ab4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   86ab8:	f47f af3c 	bne.w	86934 <__aeabi_fmul+0x114>
   86abc:	e75f      	b.n	8697e <__aeabi_fmul+0x15e>
   86abe:	bf00      	nop

00086ac0 <__gesf2>:
   86ac0:	f04f 3cff 	mov.w	ip, #4294967295
   86ac4:	e006      	b.n	86ad4 <__cmpsf2+0x4>
   86ac6:	bf00      	nop

00086ac8 <__lesf2>:
   86ac8:	f04f 0c01 	mov.w	ip, #1
   86acc:	e002      	b.n	86ad4 <__cmpsf2+0x4>
   86ace:	bf00      	nop

00086ad0 <__cmpsf2>:
   86ad0:	f04f 0c01 	mov.w	ip, #1
   86ad4:	f84d cd04 	str.w	ip, [sp, #-4]!
   86ad8:	ea4f 0240 	mov.w	r2, r0, lsl #1
   86adc:	ea4f 0341 	mov.w	r3, r1, lsl #1
   86ae0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86ae4:	bf18      	it	ne
   86ae6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   86aea:	d011      	beq.n	86b10 <__cmpsf2+0x40>
   86aec:	b001      	add	sp, #4
   86aee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   86af2:	bf18      	it	ne
   86af4:	ea90 0f01 	teqne	r0, r1
   86af8:	bf58      	it	pl
   86afa:	ebb2 0003 	subspl.w	r0, r2, r3
   86afe:	bf88      	it	hi
   86b00:	17c8      	asrhi	r0, r1, #31
   86b02:	bf38      	it	cc
   86b04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   86b08:	bf18      	it	ne
   86b0a:	f040 0001 	orrne.w	r0, r0, #1
   86b0e:	4770      	bx	lr
   86b10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   86b14:	d102      	bne.n	86b1c <__cmpsf2+0x4c>
   86b16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   86b1a:	d105      	bne.n	86b28 <__cmpsf2+0x58>
   86b1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   86b20:	d1e4      	bne.n	86aec <__cmpsf2+0x1c>
   86b22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   86b26:	d0e1      	beq.n	86aec <__cmpsf2+0x1c>
   86b28:	f85d 0b04 	ldr.w	r0, [sp], #4
   86b2c:	4770      	bx	lr
   86b2e:	bf00      	nop

00086b30 <__aeabi_cfrcmple>:
   86b30:	4684      	mov	ip, r0
   86b32:	4608      	mov	r0, r1
   86b34:	4661      	mov	r1, ip
   86b36:	e7ff      	b.n	86b38 <__aeabi_cfcmpeq>

00086b38 <__aeabi_cfcmpeq>:
   86b38:	b50f      	push	{r0, r1, r2, r3, lr}
   86b3a:	f7ff ffc9 	bl	86ad0 <__cmpsf2>
   86b3e:	2800      	cmp	r0, #0
   86b40:	bf48      	it	mi
   86b42:	f110 0f00 	cmnmi.w	r0, #0
   86b46:	bd0f      	pop	{r0, r1, r2, r3, pc}

00086b48 <__aeabi_fcmpeq>:
   86b48:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b4c:	f7ff fff4 	bl	86b38 <__aeabi_cfcmpeq>
   86b50:	bf0c      	ite	eq
   86b52:	2001      	moveq	r0, #1
   86b54:	2000      	movne	r0, #0
   86b56:	f85d fb08 	ldr.w	pc, [sp], #8
   86b5a:	bf00      	nop

00086b5c <__aeabi_fcmplt>:
   86b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b60:	f7ff ffea 	bl	86b38 <__aeabi_cfcmpeq>
   86b64:	bf34      	ite	cc
   86b66:	2001      	movcc	r0, #1
   86b68:	2000      	movcs	r0, #0
   86b6a:	f85d fb08 	ldr.w	pc, [sp], #8
   86b6e:	bf00      	nop

00086b70 <__aeabi_fcmple>:
   86b70:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b74:	f7ff ffe0 	bl	86b38 <__aeabi_cfcmpeq>
   86b78:	bf94      	ite	ls
   86b7a:	2001      	movls	r0, #1
   86b7c:	2000      	movhi	r0, #0
   86b7e:	f85d fb08 	ldr.w	pc, [sp], #8
   86b82:	bf00      	nop

00086b84 <__aeabi_fcmpge>:
   86b84:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b88:	f7ff ffd2 	bl	86b30 <__aeabi_cfrcmple>
   86b8c:	bf94      	ite	ls
   86b8e:	2001      	movls	r0, #1
   86b90:	2000      	movhi	r0, #0
   86b92:	f85d fb08 	ldr.w	pc, [sp], #8
   86b96:	bf00      	nop

00086b98 <__aeabi_fcmpgt>:
   86b98:	f84d ed08 	str.w	lr, [sp, #-8]!
   86b9c:	f7ff ffc8 	bl	86b30 <__aeabi_cfrcmple>
   86ba0:	bf34      	ite	cc
   86ba2:	2001      	movcc	r0, #1
   86ba4:	2000      	movcs	r0, #0
   86ba6:	f85d fb08 	ldr.w	pc, [sp], #8
   86baa:	bf00      	nop

00086bac <__aeabi_f2uiz>:
   86bac:	0042      	lsls	r2, r0, #1
   86bae:	d20e      	bcs.n	86bce <__aeabi_f2uiz+0x22>
   86bb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   86bb4:	d30b      	bcc.n	86bce <__aeabi_f2uiz+0x22>
   86bb6:	f04f 039e 	mov.w	r3, #158	; 0x9e
   86bba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   86bbe:	d409      	bmi.n	86bd4 <__aeabi_f2uiz+0x28>
   86bc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
   86bc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   86bc8:	fa23 f002 	lsr.w	r0, r3, r2
   86bcc:	4770      	bx	lr
   86bce:	f04f 0000 	mov.w	r0, #0
   86bd2:	4770      	bx	lr
   86bd4:	f112 0f61 	cmn.w	r2, #97	; 0x61
   86bd8:	d101      	bne.n	86bde <__aeabi_f2uiz+0x32>
   86bda:	0242      	lsls	r2, r0, #9
   86bdc:	d102      	bne.n	86be4 <__aeabi_f2uiz+0x38>
   86bde:	f04f 30ff 	mov.w	r0, #4294967295
   86be2:	4770      	bx	lr
   86be4:	f04f 0000 	mov.w	r0, #0
   86be8:	4770      	bx	lr
   86bea:	bf00      	nop

00086bec <__libc_init_array>:
   86bec:	b570      	push	{r4, r5, r6, lr}
   86bee:	4e0f      	ldr	r6, [pc, #60]	; (86c2c <__libc_init_array+0x40>)
   86bf0:	4d0f      	ldr	r5, [pc, #60]	; (86c30 <__libc_init_array+0x44>)
   86bf2:	1b76      	subs	r6, r6, r5
   86bf4:	10b6      	asrs	r6, r6, #2
   86bf6:	d007      	beq.n	86c08 <__libc_init_array+0x1c>
   86bf8:	3d04      	subs	r5, #4
   86bfa:	2400      	movs	r4, #0
   86bfc:	3401      	adds	r4, #1
   86bfe:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86c02:	4798      	blx	r3
   86c04:	42a6      	cmp	r6, r4
   86c06:	d1f9      	bne.n	86bfc <__libc_init_array+0x10>
   86c08:	4e0a      	ldr	r6, [pc, #40]	; (86c34 <__libc_init_array+0x48>)
   86c0a:	4d0b      	ldr	r5, [pc, #44]	; (86c38 <__libc_init_array+0x4c>)
   86c0c:	f000 fa48 	bl	870a0 <_init>
   86c10:	1b76      	subs	r6, r6, r5
   86c12:	10b6      	asrs	r6, r6, #2
   86c14:	d008      	beq.n	86c28 <__libc_init_array+0x3c>
   86c16:	3d04      	subs	r5, #4
   86c18:	2400      	movs	r4, #0
   86c1a:	3401      	adds	r4, #1
   86c1c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   86c20:	4798      	blx	r3
   86c22:	42a6      	cmp	r6, r4
   86c24:	d1f9      	bne.n	86c1a <__libc_init_array+0x2e>
   86c26:	bd70      	pop	{r4, r5, r6, pc}
   86c28:	bd70      	pop	{r4, r5, r6, pc}
   86c2a:	bf00      	nop
   86c2c:	000870ac 	.word	0x000870ac
   86c30:	000870ac 	.word	0x000870ac
   86c34:	000870b4 	.word	0x000870b4
   86c38:	000870ac 	.word	0x000870ac

00086c3c <memcmp>:
   86c3c:	2a03      	cmp	r2, #3
   86c3e:	b470      	push	{r4, r5, r6}
   86c40:	d928      	bls.n	86c94 <memcmp+0x58>
   86c42:	ea40 0301 	orr.w	r3, r0, r1
   86c46:	079b      	lsls	r3, r3, #30
   86c48:	d013      	beq.n	86c72 <memcmp+0x36>
   86c4a:	7805      	ldrb	r5, [r0, #0]
   86c4c:	780c      	ldrb	r4, [r1, #0]
   86c4e:	42a5      	cmp	r5, r4
   86c50:	d124      	bne.n	86c9c <memcmp+0x60>
   86c52:	3a01      	subs	r2, #1
   86c54:	2300      	movs	r3, #0
   86c56:	e005      	b.n	86c64 <memcmp+0x28>
   86c58:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   86c5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   86c60:	42a5      	cmp	r5, r4
   86c62:	d11b      	bne.n	86c9c <memcmp+0x60>
   86c64:	4293      	cmp	r3, r2
   86c66:	f103 0301 	add.w	r3, r3, #1
   86c6a:	d1f5      	bne.n	86c58 <memcmp+0x1c>
   86c6c:	2000      	movs	r0, #0
   86c6e:	bc70      	pop	{r4, r5, r6}
   86c70:	4770      	bx	lr
   86c72:	460c      	mov	r4, r1
   86c74:	4603      	mov	r3, r0
   86c76:	6825      	ldr	r5, [r4, #0]
   86c78:	681e      	ldr	r6, [r3, #0]
   86c7a:	4621      	mov	r1, r4
   86c7c:	42ae      	cmp	r6, r5
   86c7e:	4618      	mov	r0, r3
   86c80:	f104 0404 	add.w	r4, r4, #4
   86c84:	f103 0304 	add.w	r3, r3, #4
   86c88:	d104      	bne.n	86c94 <memcmp+0x58>
   86c8a:	3a04      	subs	r2, #4
   86c8c:	2a03      	cmp	r2, #3
   86c8e:	4618      	mov	r0, r3
   86c90:	4621      	mov	r1, r4
   86c92:	d8f0      	bhi.n	86c76 <memcmp+0x3a>
   86c94:	2a00      	cmp	r2, #0
   86c96:	d1d8      	bne.n	86c4a <memcmp+0xe>
   86c98:	4610      	mov	r0, r2
   86c9a:	e7e8      	b.n	86c6e <memcmp+0x32>
   86c9c:	1b28      	subs	r0, r5, r4
   86c9e:	bc70      	pop	{r4, r5, r6}
   86ca0:	4770      	bx	lr
   86ca2:	bf00      	nop

00086ca4 <memcpy>:
   86ca4:	4684      	mov	ip, r0
   86ca6:	ea41 0300 	orr.w	r3, r1, r0
   86caa:	f013 0303 	ands.w	r3, r3, #3
   86cae:	d149      	bne.n	86d44 <memcpy+0xa0>
   86cb0:	3a40      	subs	r2, #64	; 0x40
   86cb2:	d323      	bcc.n	86cfc <memcpy+0x58>
   86cb4:	680b      	ldr	r3, [r1, #0]
   86cb6:	6003      	str	r3, [r0, #0]
   86cb8:	684b      	ldr	r3, [r1, #4]
   86cba:	6043      	str	r3, [r0, #4]
   86cbc:	688b      	ldr	r3, [r1, #8]
   86cbe:	6083      	str	r3, [r0, #8]
   86cc0:	68cb      	ldr	r3, [r1, #12]
   86cc2:	60c3      	str	r3, [r0, #12]
   86cc4:	690b      	ldr	r3, [r1, #16]
   86cc6:	6103      	str	r3, [r0, #16]
   86cc8:	694b      	ldr	r3, [r1, #20]
   86cca:	6143      	str	r3, [r0, #20]
   86ccc:	698b      	ldr	r3, [r1, #24]
   86cce:	6183      	str	r3, [r0, #24]
   86cd0:	69cb      	ldr	r3, [r1, #28]
   86cd2:	61c3      	str	r3, [r0, #28]
   86cd4:	6a0b      	ldr	r3, [r1, #32]
   86cd6:	6203      	str	r3, [r0, #32]
   86cd8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86cda:	6243      	str	r3, [r0, #36]	; 0x24
   86cdc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86cde:	6283      	str	r3, [r0, #40]	; 0x28
   86ce0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86ce2:	62c3      	str	r3, [r0, #44]	; 0x2c
   86ce4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86ce6:	6303      	str	r3, [r0, #48]	; 0x30
   86ce8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86cea:	6343      	str	r3, [r0, #52]	; 0x34
   86cec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86cee:	6383      	str	r3, [r0, #56]	; 0x38
   86cf0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86cf2:	63c3      	str	r3, [r0, #60]	; 0x3c
   86cf4:	3040      	adds	r0, #64	; 0x40
   86cf6:	3140      	adds	r1, #64	; 0x40
   86cf8:	3a40      	subs	r2, #64	; 0x40
   86cfa:	d2db      	bcs.n	86cb4 <memcpy+0x10>
   86cfc:	3230      	adds	r2, #48	; 0x30
   86cfe:	d30b      	bcc.n	86d18 <memcpy+0x74>
   86d00:	680b      	ldr	r3, [r1, #0]
   86d02:	6003      	str	r3, [r0, #0]
   86d04:	684b      	ldr	r3, [r1, #4]
   86d06:	6043      	str	r3, [r0, #4]
   86d08:	688b      	ldr	r3, [r1, #8]
   86d0a:	6083      	str	r3, [r0, #8]
   86d0c:	68cb      	ldr	r3, [r1, #12]
   86d0e:	60c3      	str	r3, [r0, #12]
   86d10:	3010      	adds	r0, #16
   86d12:	3110      	adds	r1, #16
   86d14:	3a10      	subs	r2, #16
   86d16:	d2f3      	bcs.n	86d00 <memcpy+0x5c>
   86d18:	320c      	adds	r2, #12
   86d1a:	d305      	bcc.n	86d28 <memcpy+0x84>
   86d1c:	f851 3b04 	ldr.w	r3, [r1], #4
   86d20:	f840 3b04 	str.w	r3, [r0], #4
   86d24:	3a04      	subs	r2, #4
   86d26:	d2f9      	bcs.n	86d1c <memcpy+0x78>
   86d28:	3204      	adds	r2, #4
   86d2a:	d008      	beq.n	86d3e <memcpy+0x9a>
   86d2c:	07d2      	lsls	r2, r2, #31
   86d2e:	bf1c      	itt	ne
   86d30:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86d34:	f800 3b01 	strbne.w	r3, [r0], #1
   86d38:	d301      	bcc.n	86d3e <memcpy+0x9a>
   86d3a:	880b      	ldrh	r3, [r1, #0]
   86d3c:	8003      	strh	r3, [r0, #0]
   86d3e:	4660      	mov	r0, ip
   86d40:	4770      	bx	lr
   86d42:	bf00      	nop
   86d44:	2a08      	cmp	r2, #8
   86d46:	d313      	bcc.n	86d70 <memcpy+0xcc>
   86d48:	078b      	lsls	r3, r1, #30
   86d4a:	d0b1      	beq.n	86cb0 <memcpy+0xc>
   86d4c:	f010 0303 	ands.w	r3, r0, #3
   86d50:	d0ae      	beq.n	86cb0 <memcpy+0xc>
   86d52:	f1c3 0304 	rsb	r3, r3, #4
   86d56:	1ad2      	subs	r2, r2, r3
   86d58:	07db      	lsls	r3, r3, #31
   86d5a:	bf1c      	itt	ne
   86d5c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86d60:	f800 3b01 	strbne.w	r3, [r0], #1
   86d64:	d3a4      	bcc.n	86cb0 <memcpy+0xc>
   86d66:	f831 3b02 	ldrh.w	r3, [r1], #2
   86d6a:	f820 3b02 	strh.w	r3, [r0], #2
   86d6e:	e79f      	b.n	86cb0 <memcpy+0xc>
   86d70:	3a04      	subs	r2, #4
   86d72:	d3d9      	bcc.n	86d28 <memcpy+0x84>
   86d74:	3a01      	subs	r2, #1
   86d76:	f811 3b01 	ldrb.w	r3, [r1], #1
   86d7a:	f800 3b01 	strb.w	r3, [r0], #1
   86d7e:	d2f9      	bcs.n	86d74 <memcpy+0xd0>
   86d80:	780b      	ldrb	r3, [r1, #0]
   86d82:	7003      	strb	r3, [r0, #0]
   86d84:	784b      	ldrb	r3, [r1, #1]
   86d86:	7043      	strb	r3, [r0, #1]
   86d88:	788b      	ldrb	r3, [r1, #2]
   86d8a:	7083      	strb	r3, [r0, #2]
   86d8c:	4660      	mov	r0, ip
   86d8e:	4770      	bx	lr

00086d90 <memset>:
   86d90:	b4f0      	push	{r4, r5, r6, r7}
   86d92:	0784      	lsls	r4, r0, #30
   86d94:	d043      	beq.n	86e1e <memset+0x8e>
   86d96:	1e54      	subs	r4, r2, #1
   86d98:	2a00      	cmp	r2, #0
   86d9a:	d03e      	beq.n	86e1a <memset+0x8a>
   86d9c:	b2cd      	uxtb	r5, r1
   86d9e:	4603      	mov	r3, r0
   86da0:	e003      	b.n	86daa <memset+0x1a>
   86da2:	1e62      	subs	r2, r4, #1
   86da4:	2c00      	cmp	r4, #0
   86da6:	d038      	beq.n	86e1a <memset+0x8a>
   86da8:	4614      	mov	r4, r2
   86daa:	f803 5b01 	strb.w	r5, [r3], #1
   86dae:	079a      	lsls	r2, r3, #30
   86db0:	d1f7      	bne.n	86da2 <memset+0x12>
   86db2:	2c03      	cmp	r4, #3
   86db4:	d92a      	bls.n	86e0c <memset+0x7c>
   86db6:	b2cd      	uxtb	r5, r1
   86db8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86dbc:	2c0f      	cmp	r4, #15
   86dbe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86dc2:	d915      	bls.n	86df0 <memset+0x60>
   86dc4:	f1a4 0710 	sub.w	r7, r4, #16
   86dc8:	093f      	lsrs	r7, r7, #4
   86dca:	f103 0610 	add.w	r6, r3, #16
   86dce:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   86dd2:	461a      	mov	r2, r3
   86dd4:	6015      	str	r5, [r2, #0]
   86dd6:	6055      	str	r5, [r2, #4]
   86dd8:	6095      	str	r5, [r2, #8]
   86dda:	60d5      	str	r5, [r2, #12]
   86ddc:	3210      	adds	r2, #16
   86dde:	42b2      	cmp	r2, r6
   86de0:	d1f8      	bne.n	86dd4 <memset+0x44>
   86de2:	f004 040f 	and.w	r4, r4, #15
   86de6:	3701      	adds	r7, #1
   86de8:	2c03      	cmp	r4, #3
   86dea:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   86dee:	d90d      	bls.n	86e0c <memset+0x7c>
   86df0:	461e      	mov	r6, r3
   86df2:	4622      	mov	r2, r4
   86df4:	3a04      	subs	r2, #4
   86df6:	2a03      	cmp	r2, #3
   86df8:	f846 5b04 	str.w	r5, [r6], #4
   86dfc:	d8fa      	bhi.n	86df4 <memset+0x64>
   86dfe:	1f22      	subs	r2, r4, #4
   86e00:	f022 0203 	bic.w	r2, r2, #3
   86e04:	3204      	adds	r2, #4
   86e06:	4413      	add	r3, r2
   86e08:	f004 0403 	and.w	r4, r4, #3
   86e0c:	b12c      	cbz	r4, 86e1a <memset+0x8a>
   86e0e:	b2c9      	uxtb	r1, r1
   86e10:	441c      	add	r4, r3
   86e12:	f803 1b01 	strb.w	r1, [r3], #1
   86e16:	42a3      	cmp	r3, r4
   86e18:	d1fb      	bne.n	86e12 <memset+0x82>
   86e1a:	bcf0      	pop	{r4, r5, r6, r7}
   86e1c:	4770      	bx	lr
   86e1e:	4614      	mov	r4, r2
   86e20:	4603      	mov	r3, r0
   86e22:	e7c6      	b.n	86db2 <memset+0x22>

00086e24 <register_fini>:
   86e24:	4b02      	ldr	r3, [pc, #8]	; (86e30 <register_fini+0xc>)
   86e26:	b113      	cbz	r3, 86e2e <register_fini+0xa>
   86e28:	4802      	ldr	r0, [pc, #8]	; (86e34 <register_fini+0x10>)
   86e2a:	f000 b805 	b.w	86e38 <atexit>
   86e2e:	4770      	bx	lr
   86e30:	00000000 	.word	0x00000000
   86e34:	00086e45 	.word	0x00086e45

00086e38 <atexit>:
   86e38:	4601      	mov	r1, r0
   86e3a:	2000      	movs	r0, #0
   86e3c:	4602      	mov	r2, r0
   86e3e:	4603      	mov	r3, r0
   86e40:	f000 b818 	b.w	86e74 <__register_exitproc>

00086e44 <__libc_fini_array>:
   86e44:	b538      	push	{r3, r4, r5, lr}
   86e46:	4d09      	ldr	r5, [pc, #36]	; (86e6c <__libc_fini_array+0x28>)
   86e48:	4c09      	ldr	r4, [pc, #36]	; (86e70 <__libc_fini_array+0x2c>)
   86e4a:	1b64      	subs	r4, r4, r5
   86e4c:	10a4      	asrs	r4, r4, #2
   86e4e:	bf18      	it	ne
   86e50:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   86e54:	d005      	beq.n	86e62 <__libc_fini_array+0x1e>
   86e56:	3c01      	subs	r4, #1
   86e58:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   86e5c:	4798      	blx	r3
   86e5e:	2c00      	cmp	r4, #0
   86e60:	d1f9      	bne.n	86e56 <__libc_fini_array+0x12>
   86e62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   86e66:	f000 b925 	b.w	870b4 <_fini>
   86e6a:	bf00      	nop
   86e6c:	000870c0 	.word	0x000870c0
   86e70:	000870c4 	.word	0x000870c4

00086e74 <__register_exitproc>:
   86e74:	b5f0      	push	{r4, r5, r6, r7, lr}
   86e76:	4c27      	ldr	r4, [pc, #156]	; (86f14 <__register_exitproc+0xa0>)
   86e78:	b085      	sub	sp, #20
   86e7a:	6826      	ldr	r6, [r4, #0]
   86e7c:	4607      	mov	r7, r0
   86e7e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   86e82:	2c00      	cmp	r4, #0
   86e84:	d040      	beq.n	86f08 <__register_exitproc+0x94>
   86e86:	6865      	ldr	r5, [r4, #4]
   86e88:	2d1f      	cmp	r5, #31
   86e8a:	dd1e      	ble.n	86eca <__register_exitproc+0x56>
   86e8c:	4822      	ldr	r0, [pc, #136]	; (86f18 <__register_exitproc+0xa4>)
   86e8e:	b918      	cbnz	r0, 86e98 <__register_exitproc+0x24>
   86e90:	f04f 30ff 	mov.w	r0, #4294967295
   86e94:	b005      	add	sp, #20
   86e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86e98:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86e9c:	9103      	str	r1, [sp, #12]
   86e9e:	9202      	str	r2, [sp, #8]
   86ea0:	9301      	str	r3, [sp, #4]
   86ea2:	f3af 8000 	nop.w
   86ea6:	9903      	ldr	r1, [sp, #12]
   86ea8:	4604      	mov	r4, r0
   86eaa:	9a02      	ldr	r2, [sp, #8]
   86eac:	9b01      	ldr	r3, [sp, #4]
   86eae:	2800      	cmp	r0, #0
   86eb0:	d0ee      	beq.n	86e90 <__register_exitproc+0x1c>
   86eb2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   86eb6:	2000      	movs	r0, #0
   86eb8:	6025      	str	r5, [r4, #0]
   86eba:	6060      	str	r0, [r4, #4]
   86ebc:	4605      	mov	r5, r0
   86ebe:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86ec2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   86ec6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   86eca:	b93f      	cbnz	r7, 86edc <__register_exitproc+0x68>
   86ecc:	1c6b      	adds	r3, r5, #1
   86ece:	2000      	movs	r0, #0
   86ed0:	3502      	adds	r5, #2
   86ed2:	6063      	str	r3, [r4, #4]
   86ed4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   86ed8:	b005      	add	sp, #20
   86eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86edc:	2601      	movs	r6, #1
   86ede:	40ae      	lsls	r6, r5
   86ee0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   86ee4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   86ee8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   86eec:	2f02      	cmp	r7, #2
   86eee:	ea42 0206 	orr.w	r2, r2, r6
   86ef2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   86ef6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   86efa:	d1e7      	bne.n	86ecc <__register_exitproc+0x58>
   86efc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86f00:	431e      	orrs	r6, r3
   86f02:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   86f06:	e7e1      	b.n	86ecc <__register_exitproc+0x58>
   86f08:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   86f0c:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   86f10:	e7b9      	b.n	86e86 <__register_exitproc+0x12>
   86f12:	bf00      	nop
   86f14:	0008709c 	.word	0x0008709c
   86f18:	00000000 	.word	0x00000000
   86f1c:	00004e4f 	.word	0x00004e4f

00086f20 <ulLED>:
   86f20:	00000057 00000056 0000003b 00000055     W...V...;...U...
   86f30:	00006b68 6d612069 64617320 00000000     hk..i am sad....
   86f40:	0067736d 59530d0a 4d455453 52412053     msg...SYSTEMS AR
   86f50:	4f4e2045 414e494d 53202c4c 0a2e5249     E NOMINAL, SIR..
   86f60:	0000000d 55530d0a 53595342 204d4554     ......SUBSYSTEM 
   86f70:	504d4554 54415245 20455255 00205349     TEMPERATURE IS .
   86f80:	0d0a4320 00000000 4f440d0a 554f5920      C........DO YOU
   86f90:	4e415720 20412054 43534942 3f544955      WANT A BISCUIT?
   86fa0:	00000d0a 20410d0a 5353454d 20454741     ......A MESSAGE 
   86fb0:	20534157 45434552 44455649 4f524620     WAS RECEIVED FRO
   86fc0:	4f43204d 203a534d 00000000 00000d0a     M COMS: ........
   86fd0:	0001c200 000000c0 00000800 00000000     ................
	...
   86fe8:	54414857 4e414320 44204920 4f46204f     WHAT CAN I DO FO
   86ff8:	4f592052 53202c55 0a3f5249 0000000d     R YOU, SIR?.....

00087008 <can_bit_time>:
   87008:	02020308 02094b03 43020303 0303030a     .....K.....C....
   87018:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   87028:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   87038:	05050510 06114504 47040505 06060512     .....E.....G....
   87048:	06134304 44040606 06060714 08154604     .C.....D.....F..
   87058:	47040606 07070716 08174404 46040708     ...G.....D.....F
   87068:	08080718 08194304 44040808 454c4449     .....C.....DIDLE
   87078:	00000000                                ....

0008707c <ucExpectedStackBytes.5295>:
   8707c:	a5a5a5a5 a5a5a5a5 a5a5a5a5 a5a5a5a5     ................
   8708c:	a5a5a5a5 20726d54 00637653 00000043     ....Tmr Svc.C...

0008709c <_global_impure_ptr>:
   8709c:	20070010                                ... 

000870a0 <_init>:
   870a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870a2:	bf00      	nop
   870a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   870a6:	bc08      	pop	{r3}
   870a8:	469e      	mov	lr, r3
   870aa:	4770      	bx	lr

000870ac <__init_array_start>:
   870ac:	00086e25 	.word	0x00086e25

000870b0 <__frame_dummy_init_array_entry>:
   870b0:	00080119                                ....

000870b4 <_fini>:
   870b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   870b6:	bf00      	nop
   870b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   870ba:	bc08      	pop	{r3}
   870bc:	469e      	mov	lr, r3
   870be:	4770      	bx	lr

000870c0 <__fini_array_start>:
   870c0:	000800f5 	.word	0x000800f5
